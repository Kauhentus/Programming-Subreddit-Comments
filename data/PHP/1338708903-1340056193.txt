What's your problem?
are you sure $_POST['editBusiness'] in second case was empty? echo $_POST['editBusiness'] . "&lt;br /&gt;"; is not a good way to test whether it's empty or not. Instead of *echo* use *var_dump(...)* var_dump($_POST['editBusiness']); echo "&lt;br /&gt;";
If your server is UNIX-based (but not OS X server), always use LF and upload your files as binary if you're using FTP.
&gt; The comment is apparently extending to include the conditional which means the php engine is respecting different line ending styles than your favorite editor. This is pretty much "the only reason" ... to verify, you could just put something like "print( 'After Comment' );" in-between the comment and the conditional. 
Better yet, try [Adminer Editor](http://www.adminer.org/en/editor/). Easy deployment, extensible, skinnable and under active development. &gt; Adminer Editor is both easy-to-use and user-friendly database editing tool written in PHP. It is suitable for common users, as it provides high-level data manipulation.
don't understand this down-voting, but seems that asking of a legitimate question is not welcome. btw, then I try to reproduce it, the comment has no influence, but changing the value of $_POST['editBusiness'] does.
this looks promising!
Export is a must, so yours wouldn't be an option (sorry). The program you mention on that page looks like exactly what i need, though.
You can write an export function in about 45 seconds.
These maps/forms generally sit on top of Wordpress. The data is sanitized before it is placed in the database.
I'm not familiar with the inner workings of Wordpress, but surely there's a way to get that to let some users post, and other users edit?
To be fair, that code was done in under 3 hours (pressing deadline when I thought of it) on Nov 2, 2008 (night of the elections; my deadline). And I'm a much better coder now. I'm SURE that given a repository of 30,000 lines of your own code someone could find ~300 lines of bad code... so what you're saying is a cowardly ad hominem attack. --- **Plus, you missed the new repo!** In the same repository, i'm sure you didn't miss the "redditmirror.new". Here's the current version, that uses PDO and is much more organized: http://repo.phpexperts.pro/source/redditmirror.cc.new/annotate/head:/index.php I hope people can see how completely disingenuous you are.
Because he's trying to learn php?
I asked the question to determine whether he needs to learn PHP or whether he's just trying to build a small site for his company. There are people that don't realize you can simply install website software, and there's no programming required.
from the responses I've gotten, it looks like phpGrid and Xataface are probably the best options.
I don't believe this is a "reproducible" issue, as-written. It's pretty clear that the comment, if it's inferring with his *second* test, is somehow being concatenated with the comment immediately above. At least as it is pasted, here - that would likely be due to whitespace or some line ending fowl-up.
There was/is (?) a command in ASP that you could bypass errors (like warnings I guess) "on error resume next" which would ensure the program would run regardless of errors. Not knowing any better I used it all the time.
Well you wouldn't just blindly insert records when a URL says to. Do some authentication. Check the userid in the URL against the userid of the submitter. That will virtually eliminate a URL spammer saving links to other user accounts. I'd elaborate more but I'm currently typing on a phone 
If I have one or more sets of data that would be shared/paired with multiple other databases/applications on the same host, then yes, I have a separate database for that shared data. For example: 1 db holds user account info, while other db's hold data for various individual applications/websites which have nothing in common with each other _except_ for the users. It just makes it easier to manage the separation of applications/websites, and the sharing of only necessary things in common. For access across two or more db's on the same server, the syntax to reference a column in another table in another database is simply `databasename.tablename.columnname`. Mysql will automatically resolve database, table, and column references. If the data you want is located on another server entirely however, you'll have to [implement a federated table](http://dev.mysql.com/doc/refman/5.1/en/grant.html), which isn't really that hard. Otherwise, if you're hosting only _one_ application/website on the server, it really isn't necessary to separate anything. User accounts could be housed in the same database as the rest of the application you serve, and Mysql user permissions could be limited [to at least the table or column-level](http://dev.mysql.com/doc/refman/5.5/en/grant.html) if needed. Security, performance, and manageability wise, there is no advantage to house this other specific data in a separate database. 
thank you so much your answering!. I'm putting everything on one schema after all. Realized I'm **not** gonna be storing financial information anyway, just payment confirmations
Okay so how would userA craft a URL that would save a record under userB's profile? Or am I misunderstanding your problem? 
See: http://en.wikipedia.org/wiki/Csrf 
Even better, you might want to $_POST the xsrf token, so that a CSS attacker won't know why the thing won't authenticate (Wouldn't that be frustrating?) Chances are, the person who is trying to spam save posts is a script kiddie, and won't have any idea how to figure out what is being posted to the page (Dang word post!)
OOOHHH, lol. I remember "on error resume next" from VB6 days. Totally forgot about that. Silly Microsoft. For some reason, I kept reading "on error resum√©," and thought you were making some kind of joke. 
I see. so using POST with a token is a great idea. Guess I didnt understand the concern. 
1 year of CodeIgnitEr and still don't know how it's spelled ?
heh didn't even realise, thanks! &amp;#3232;\_&amp;#3232;
That was my first thought as well. He's *only* sending the post ID in the URL, which is good, because that means he's got the logged in user data stored in the session. He should just be able to check for a valid logged in user in the session, make sure that the post ID from the request is valid, and then be good to go. That will at least make it so you can not save a link to any account other than the one you're signed in on. Sure, it won't save people from being tricked into clicking links while signed in, but you can never completely save people from their own ignorance, and sometimes there are legitimate reasons for keeping links like this open. It would just depend on his implementation I suppose. For this, the session token is probably a good idea.
I can't reproduce your test case -- it works as expected for me, with and without the comment. Can you post a broken version to run on an online PHP interpreter, like [codepad.viper-7.com](http://codepad.viper-7.com)?
It is confusing...moreso challenging, really. I'm understanding it as I read more and more and continue on with the tutorials. 
POST is no safer than GET though - whether hidden form field or passed by GET vars - it's still exposed in the request. POST is harder to fake than GET, but not by much. **EDIT:** You do make a good point on the analytics though - use POST if you're tracking the URLs people visit and need to aggregate.
Someone's already implemented the [Wilson Score Interval] (http://www.derivante.com/2009/09/01/php-content-rating-confidence/) There's also a stats functionality in php, if the [Extension](http://php.net/manual/en/ref.stats.php) is installed. Where other statistical methods are available.
I think Nomikos is right, according to the [Zend Framework's wikipedia page](http://en.wikipedia.org/wiki/Zend_Framework) version 2.0 requires PHP 5.3 or later. Can you check which version of PHP you're using? You could always try using [Zend Framework version 1.11](http://www.zend.com/community/downloads) instead of 2.0, which is usable by PHP 5.2.4 or later.
I don't know ZFW but: &gt; Zend\Db\Adapter, instance of Zend\Db\Adapter\Adapter Something initializes an adapter instance in the wrong namespace (probably using an internal class in place of one intended for end users)
Ahh, thank you so much! I've seen some other projects that do the way I did it, like this: https://github.com/Hanse/verbier. Two questions for you: 1) Is there a standardized way or best-practices way that everyone does it? 2) Why is the way you just coded up a bad idea?
[Laravel does routing with anonymous functions, it's pretty cool.](http://laravel.com/docs/routing#the-basics) Just make sure you're not using anonymous functions for the hell of it, unless the project itself is for fun ;) in that case, go wild.
Learn 2. It's going to be a struggle because it's in beta, but push through. You'll be out in front.
For doing the conversions I just have a script running every 5 minutes that makes an exec() call to the proper command. I use ffmpeg-php for creating thumbnails but you can do that from command line too.
cheers
&gt; I used to use FFMpeg-PHP, but I don't think it's active anymore. [It looks fairly active to me](https://github.com/char0n/ffmpeg-php).
Wordpress
I'll repost the same comment I put on Brian Moons post: People are often very quick to link a XKCD comic in about "theres currently 14 standards, oh no now there are 15!", but that really doesn't apply here. It's litterally backwards. The was NO standard so everyone made their own. Now what is happening is that the projects that all currently have their own standards coming together to work on a standard set. Drupal, Zend, phpBB, FuelPHP, Joomla, Typo3, etc all have their own standards. If instead of having all of these different standards we can converge on one then that has to be a good thing. Now, these coding standards are also being widely misunderstood. PSR-0, PSR-1 and PSR-2 all do different things. 0 = Basic interoperability 1 = Interoperability without side-effects 2 = Making our syntax look the same There are some projects that will not instantly love PSR-2, or ever adopt it, but even if the projects only adopt 0 or 1 that is certainly a brilliant thing for the PHP community. As a developer who has to maintain CodeIgniter and FuelPHP bundles of the same code, some of which was ported from Kohana and has since been ported to Laravel - I am all for projects coming together around PSR-0/1 and stopping this stupid framework-specific package development idiocy. Reference: http://github.com/fuel-packages/fuel-oauth2 http://bundles.laravel.com/bundle/laravel-oauth2 http://getsparks.org/packages/oauth2/versions/HEAD/show Let's stop that, get on with making awesome packages for ALL of our projects, and stop complaining about which line our brackets go on.
I always use CLI exec(). The documentation to use ffmpeg by shell is so much larger on its own and it's easy to build a clean command, that you can then test and debug by copying it and executing yourself.
Eclipse with the PDT plugin. Fossil for source control and integrated wiki for your own notes, and it has a ticket system for to dog's.
How is the competition being judged?
Bah. You changed things after I emailed. So, "score_signe($g)" was what I ended up using... $g is shorter than $game after all. Edit: Of course now I realize about five chars I could have shaved off.
yeah, i figured some people wouldn't want me having their email address so PMs are better. 
I was talking about template inheritance . See http://twig.sensiolabs.org/doc/templates.html#template-inheritance
I used localhost before instead of an ip address and it lead to every database connection costing at least a second. Glad I figured that one out.
Then pull it down using JWPlayer on pretty much anything fast enough to view video.
Yep, you're correct, the VALUES syntax allows for multiple value sets. INSERT INTO table (col1, col2, col3) VALUES (a, b, c), (d, e, f), (g, h, i) In the OP's example prepared statement, he would only be able to insert one row with the statement, though.
http://dev.mysql.com/doc/refman/5.6/en/insert.html
On the topic of prepared statements: if I have a sharded database like so: serv_5_data serv_5_metadata serv_5_properties serv_6_data serv_6_metadata serv_6_properties and needed to join each table for an app while also parameterizing the app # ... how would I do that? When I tried to use named parameters like serv_:app_data then the named parameter became :app_data instead of :app. How could I inform PDO that my variable is just ":app"?
Do you use require? I prefer using an autoloader that translates namespaces to directory structures and filenames to classnames.
this way is much easier
I'm using PHP 5.3.6 No notices/errors/warnings can be thrown
Thanks for posting this here! I'm really excited about launching this book- if you guys have any suggestions or ideas for topics, post them here and I'll see if it's something I can include or touch on in the book.
Question about your usage of Resque -- The main issue I encountered using it was that it was firing up a new instance, executing 1 job, and killing the instance thereafter. The overhead of doing that for every single job really slowed down overall performance. Did you overcome that particular nuance?
I'm illustrating why you'd use one style of insert over the other. Thank you for fleshing it out with the prepared statement stuff :)
Look at his posting history. He's ran contests like these before. Also, do you really think a **homework** assignment would aim for obfuscation?
Seriously?
sounds interesting, I left my email behind. Will it be available as ebook? I like reading on my kindle.
Okay, great. Yeah I understand *why* it recycles instances so often but it absolutely kills performance in a controlled environment. I ended up making my own very lightweight worker/job system that uses Redis for the queues. Looking forward to seeing that portion and the book in general!
The second one is just an alternate syntax provided by MySQL, so functionally, there is no difference between the two queries you posted. However, keep in mind that the second query is a MySQL-specific syntax and is not supported by any other DBMS as far as I know. If you're using (Hopefully) PDO to prepare your statements, keep in mind that PDO also acts as an abstraction layer so that your entire application can smoothly shift to other DBMSs with a simple edit in one file. Because the second query is not standard SQL, your application would break in other DBMSs. And as yeskia mentioned, the first supports multi-insert syntax. Not sure of the potential benefit of using the second one over the first or how it would save you lines of code. I usually like to create an array containing pre-filtered and validated input with the keys being the column names and the values being the values to insert. That way I can do this: $columns = implode(', ', array_keys($valid)); $values = rtrim(str_repeat('?, ', count($valid)), ', '); $sth = $pdo-&gt;prepare("INSERT INTO table ($columns) VALUES ($values)"); $sth-&gt;execute(array_values($valid));
That's not how prepared statements work. Prepared statements do **not** execute SQL queries. When using prepared statements, the SQL query is precompiled and left with placeholders for binding values to parameters. You cannot use prepared statements for table names, column names, order by clauses, keywords etc. It is only to be used for the actual data.
+1 for distinguishing between templates and views
This might be relevant to you: https://github.com/salimane/php-resque-jobs-per-fork
.mobi is Kindle, as far as I know - if it's DRM-free, you can just plug your Kindle and and send the file to it.
Thanks! Looks like it'll be easier than I thought
Awkaaayyy
&gt;I just listed everything I would need to make it into a finished product. I like my forms to look nice... CSS is used to style things. To make them... not so... average? Maybe he won't need CSS to get info into his form, but he will need it if he doesn't want it to look like craigslist. Sorry if my answer earlier wasn't more obvious. 
I'm not being sarcasm. Maybe it's a small matter for you. But it does matter for someone out there. That including me. So I share this for someone, like me, to stop them scratching head finding the actual problem. I posted this after solved some problem regarding this. Thank you old mang.
I completely agree! After I read through the article I checked the date so I can see if it was too outdated to use and noticed it was posted in May. My boss and I had a good chuckle from it.
At my previous job (I won't name names directly!), I asked our lead developer why he didn't comment a recursive lambda that was ~50 lines long. His response was that he only commented what code did, not how it did it. I pointed out that there wasn't a single line of comments at all. I no longer work at that company, and from what I've heard it is currently imploding. Lesson of this story, folks, is to always comment your code or you'll kill your company.
True. But sometimes there is some insight to learn from such feedback. As for building a site that attract traffic, it's such a wide subject, with lots of variables, and a costly one. (it is rare to get to millions of users for cheap)
&gt;Though I agree with your remark, I am not the author of this book. So I noticed. However, I figured the comment was still relevant. You may not have written the book, but (according to your post history) you have worked for pornhub, brazzers etc. and you do know about scaling. Given that knowledge and the fact that you're trying to build interest for *this* book, it should hint at its quality. 
I'm sure the company tanked for not commenting a 50 line routine... All kidding aside, I think you missed my point. The 50 line long lambda didn't need comments. It needed refactoring. If it wasn't understandable as-is, then it needed to be refactored until it was understandable. Only then should the comment be used to improve the understandability further. A bunch of great comments on unmaintainable garbage code is still garbage code. But no comments on great easy to understand code is a far better situation to be in...
 &lt;soapenv:Header&gt; &lt;v1:loginDetails&gt; &lt;v11:siteId&gt;0&lt;/v11:siteId&gt; &lt;v11:username&gt;USERNAME&lt;/v11:username&gt; &lt;v11:password&gt;0x909711E5,0xE301F82A,0x0E2783CC,0xAF6BC3DB,0x57727CFB&lt;/v11:password&gt; &lt;/v1:loginDetails&gt; &lt;/soapenv:Header&gt; &lt;soapenv:Body&gt; &lt;v11:GetNextAvailableNumberRequest&gt; &lt;v11:membershipId&gt;1&lt;/v11:membershipId&gt; &lt;/v11:GetNextAvailableNumberRequest&gt; &lt;/soapenv:Body&gt; &lt;/soapenv:Envelope&gt; This is the example that they give me
Its been a few years but I had similar requirements once. I subclassed PHPs SoapClient (remembering off the top of my head so may be wrong) and replaced the transport stuff with my own code using curl as it was way more flexible. I had to inject a SAML2 token into the soap header and I did that in the subclass somewhere too. 
You need to link the selection criteria for the two tables together with a join. Add a where clause like: and r.referrer = u.nick after line 18.
I agree with the sentiment, but if it's stuff you can learn and factor into your worth with little effort, it can be useful when planning. Now, if it's stuff that will take hours/days/weeks to accomplish, you should probably worry about attracting users first.
This isn't specific to PHP, but one of the founders of Reddit recently posted an amazing video series of how they scaled Reddit over the years. It's part of the CS253 free lecture course at Udacity. Unit 7 is where they talk about scaling Reddit. I think this link should work... http://www.udacity.com/view#Course/cs253/CourseRev/apr2012/Unit/413004/Nugget/490002
Doubt that facebook uses this but it is a possible solution to the problem: http://neo4j.org/
Go with Symfony 2. ZF2 is not ready yet.
I was guessing at the fields that match. You'll have to look at your database design and figure out which field in the referral table matches a corresponding field in the users table, and then tell the database about that when you issue the query.
I built one a while back and did it basically like you say. One table had user info, with a userid key. Another table had friends info, with a userid column and a friendid column that was a secondary key to the userid table. Then a groups table that linked friends to specific groups (userid, friendid, groupid, groupname). Then, a security table, with a userid column, a group column, and a binary column for every possible security setting. Mine was set up more like google+ so that you can have differential security settings for different users, so you might come up with something easier. Mine had a lot more joins and queries than I would have liked.
Wow! I can't even begin to get my head around how complex this must have been! Thanks for letting me know :)
Dear Previous Developer, Tell me why you did this, and I won't come for you.
The easiest way is to use an ORM such as [propel](http://www.propelorm.org/), [doctrine](http://www.doctrine-project.org/), or [phpactiverecord](http://www.phpactiverecord.org/). While you can force these things to do engine-specific stuff, most of the things you'd need to run the average site are easily portable between different RDBMS. In addition, you get development migration capabilities, which means you can incrementally build your tables and/or databases without having to worry about whether or not the other people working on the project have the most up to date schemas.
is it possible to post contestants codes here after this contest end? thanks
Hmm, this seems a little overkill for my needs. I've been thinking about using an interface, but im not too sure how to implement it. Am i way off track here? 
* [APC](http://php.net/manual/en/book.apc.php) * [HttpGzipModule](http://wiki.nginx.org/HttpGzipModule) Recently on my managed vps, I had to request they install mcrypt. Not sure why it wasn't on there already...
Definition of irony: Posting a link about scaling a website to reddit; that website goes down
Uh... meant to say "to do's". Stupid auto-correct.
SOLVED: {{ "now"|date("m/d/Y") }} Simply Gorgeous!!
Pretty sure I'm already running HttpGzip configurations with my NGiNX setup, but if I'm not I'll look down that path. As for APC, I've never really used it. Got some lunch time reading material. Is it really that much better an alternative to Memcache, even over multiple machines? I currently use Memcache to do session handling across multiple nodes.
I taught myself programming at 14. I started web dev at 15. I have a cs degree. I learn for myself, and solve u own problems. I took cs to make sure I had the solid foundation to ground my self taught knowledge. Am I the only one?
Actually, I'm using the following: &lt;IfModule mod_rewrite.c&gt; RewriteEngine On RewriteBase / RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule . /index.php [L] &lt;/IfModule&gt; ...and PHP follows the rule fine. ~~That or it's just reading negotiating every non existing file request back to index.php -- I could be totally wrong, but I do know that in testing, my projects work perfectly as they would under normal conditions.~~ EDIT: My Bad &gt; URI requests are served from the current working directory where PHP was started, unless the -t option is used to specify an explicit document root. If a URI request does not specify a file, then either index.php or index.html in the given directory are returned. If neither file exists, then a 404 response code is returned. Looks like it is doing that. So if you were to have your "app" to hook off the request URI, then you'd be fine.
APC is generally not used as an alternative to memcached (I didn't even know that was possible 'til I looked it up just now). It's big selling point is caching compiled PHP code.
thank you. this is the kind of detailed answer i was looking for. 
Here is a stupid question. I have to write a form to mail script. To write a test case don't I need to have the form to mail script in place? 
You may be right, but I think the facebook driver just wraps the Wire Protocol, so as they add more things to it, the facebook driver doesn't need to be updated.
Not really, you have to know what your script expected result is, you will then write a UnitTest that will test the expect result, then you write your script to make it pass the test. You can sum it up as is: In TDD you write code to pass your test, as opposed to writing test to validate your code. It's a thin line, but can be an important one.
Well here's one possible example. You write a form handler function that accepts an array, and either passes back an error object or returns true. The function would normally accept the $_POST array, but you can write tests to manually pass it data. The tests would be like this (Pseudo code below): If I pass this array to form_handler(), I expect to get the following error back If I pass this other array to form_handler(), I expect a different error And if I pass this array, I expect true to be returned 
That's not the same project but a PHP implementation of the functionality offered by the module. I'm making use of it myself as FFMPEG-PHP *is* inactive and even with various patches to fix typos and bugs I still found it to be incredibly unstable. That said, the PHP implementation isn't perfect either but does the job with a few minor fixes.
Usually testing that *x* input produces *y* output is a much clearer concept, and so it's not hard to write the correct code to perform the test. Unit testing mainly refers to testing one piece of functionality [in a system] at a time, and in isolation from other pieces; the pieces are referred to as units. One thing it will then foster is writing loosely coupled code (because it's functionality has to be independent of other code in order to be tested as an isolated unit), which is generally regarded as A Good Thing‚Ñ¢. Test Driven Development is based around writing code to pass tests. In order for the code to pass tests, the tests for the code have to be written first, or at least right-after. Code coverage is then regarded as how much of your code base is covered by tests; i.e somewhat simplistically, what percentage of your functions have a test written for them to ensure they perform as intended. The more code coverage you then have, and the more thorough the tests and numerous the test cases, the less likely that the code base will perform out-of-spec (do the wrong thing) in practice, and the more likely that bugs introduced by changes to the code will be picked up immediately.
It's pretty much just to save yourself the hassle of parsing FFMPEG's output. If you want anything beyond grabbing basic file information and stills, you'll need to resort to exec anyway.
Markup? You run through a HTML validator and see if it's correct. There's a cousin to TDD called [Behaviour Driven Development](http://en.wikipedia.org/wiki/Behavior_Driven_Development), which could provide you some more insight. UX testing (User Experience) is a human thing, and so unfortunately you have to test that with humans. A validation function is a great example of something that can be tested. It can be tested that valid input should produce a pass, and that invalid input should produce a fail. The more test cases you have of different examples of valid and invalid inputs, the better.
In general, if you were testing user input, it would be an integration test or functional test; not a unit test. So if you were testing an HTML form and its interaction, you would indeed need the form in place to test it, and then use some testing framework to "simulate" a browser and actually test the web page. Unit tests are about testing small units of code to be sure that given an input you get the expected output. In your case, (forgive the terrible example) maybe you have a class FormMailer which has two methods: parseInput() and sendMessage() You could write a test for each method, "proving" that they work the way you expect. You'd test that given certain inputs, parseInput() does what it should, and likewise with sendMessage(). Then, to truly do TDD, you would write the tests first and *then* code your FormMailer class. This takes a lot of practice... Even I have a hard time writing tests first, especially when taking on a more complex task.
Fair point. I didn't actually read his article because I felt there was no way one needed that much text to cover json_decode/json_encode :) I was more defending authors and bloggers in general who often get criticized as not offering anything valuable that couldn't be readily googled.
If you're using nginx to serve up PHP make sure you're using php-fpm.
Very good resources.
How many pages is this going to be? When I look at the subjects you plan to cover and then look my 2nd edition high performance mysql book and my nginx book (though I admit it has a lot of useless fluff), and then consider how much I could personally write about job servers, deployment and everything that involves such as different environments like staging, unit testing and minifying. Well I'm thinking I'd have a hard time getting everything covered in less than a thousand pages.
This is why I created my own CMS (using Zend Framework + Doctrine) with a super simple, yet feature-rich e-commerce module. I don't have many plugin hooks at the moment, just basic stuff like header/footer on the frontend and major router dispatch events on the backend. I'm in the same boat as you. I'm tired of extremely bloated systems that required weeks to learn, and even then, simple customizations are overly complex to accomplish. As for security, if you're not storing CC info in your database, then the standard security features included in most frameworks should be sufficient to protect against most, if not all, attacks.
I couldn't figure that out either. Would be nice to know what error_reporting he has set and if we're allowed to suppress errors with @ (answer is no, btw)
My company is looking for substring-finding ninjas and array-exploding rockstars. Do you have what it takes?
Well, have_fields() must be changing some sort of state...what does it do?
I'll look into xdebug, thanks
Also, FWIW, before deciding to write this book I was going to write one on just scaling mySQL. I created a huge list of topics and compared it to the High Performance mySQL book... which covered every single topic/optimization I came up with plus 1000 more. It truly covers every single tunable aspect of the software.
Is your CMS open sourced? I'm stuck trying to implement Amazon payments (and any other payment method available on mine, currently paypal &amp; elitpay). For some reason the signature is not correct ... 
I would recommend mine, which is really easy to extend/customize/whatever but unfortunately we have no cart implemented yet (also is more oriented to classifieds sites than to shops). I'm really not sure what reasons are behind the structure of CMS as magento, which I find really really hard to work with/customize, which inside of every folder there more folder, and more folder and at the end, some files 
I wish you the best of luck, then. I had personally hoped to hear it would have been a bit longer but I might check it out anyway just in case it contains something new to me.
bool(true) bool(false)
So, looking at your code, I have a question. global $slideshow_content; why is that in the while loop? It should be set one time. It's in a while loop, it will get redeclared every time. Maybe that's giving you the issues? Try moving it out side of the while loop. It will still be accessible by that php file.
Well, it's an option, if you can't figure out anything else. PHPstorm (IDE I use) has a deploy function. I've never used it personally. I use git and hooks to deploy to production sites.
I usually let the php-fpm/nginx/php.ini settings catch all errors like that. I only use those I mentioned before in development. But thanks for that tip; that would be nice to have in a custom Exception handler.
http://www.opencart.com/ is an easily hackable shopping cart. There are quite a few module / extensions / plugins available (not all are free). Their own documentation is pretty terrible, but it's all MVC+L so it's not too bad to follow the logic. You don't even have to use their product pages. I've migrated 35 websites that were using a perl shopping cart to OpenCart. I just spent some time deploying it to a really nightmare situation of multiple sites and it's performed quite well for what I'm doing with it. The extent of my hacking at it was to allow custom order id handling and a good bit of input form manipulation. I've also done quite a bit on the back end that allows it to work with our custom management system back end. Good luck finding something that works for you.
Yeah...the title's quite misleading. There was nothing unique or profound about the article. A better title would probably be "An Intro to JSON using PHP." That said, it would be a good read for those wanting to get their feet wet with JSON and PHP.
This is the best I could do (270)... I'm looking forward to learn from the winners. function score_pixel7000($g){ $r=explode(",",$g); $t=$i=0; while(count($r)&gt;2){ $n=array_slice($r,0,3); array_shift($r); $a=array_sum($n); if($n[0]==10){ $t+=$a; $i=0; }elseif($n[0]+$n[1]==10&amp;($i%2!=1)){ $t+=$a; array_shift($r); $i=0; }else{ $t+=$n[0]; $i++; } } if($i&gt;1)$t+=array_sum($r); return $t; }
It's perfectly readable unless you happen to be an illiterate.
Interesting link, thanks for sharing that! I still feel like from both a development perspective and execution time/memory usage, I can go further and faster with something more lightweight than Symfony or ZF. Not saying I'm not using a CDN, Redis, etc. but that doesn't mean I shouldn't care about the performance characteristics of each layer. And personally, I find ZF2 over-architected for most needs. I mean, just look at their ["quick" start](http://packages.zendframework.com/docs/latest/manual/en/zend.mvc.quick-start.html)... :\
I understand this frustration completely, which is why I built my own CMS - like everybody else who has answered in here! Unlike WordPress or other systems that force you to jump through hoops, PyroCMS http://pyrocms.com/ gives you an admin backend, allows you to write HTML themes and gives you the full MVC stack with database connections so you can do your own thing. We have avoided building an e-Commerce solution, because if we try to take on Magento AND WordPress at the same time it's going to be a mess, so we stick to making PyroCMS as well as possible. Unlike a lot of these home-brew solutions PyroCMS is actually a profitable company with multiple revenue streams, but grew up in the same way as may others - I needed it so I built it. There are a bazillion CMS around, but I think you'll like Pyro based on your post. Every client I have has always needed "Stock website + Foo" and I just build a module for foo. Later on a second client may need the same module, or a tweak of it, so I can just reuse or tweak it for them. Its entirely open source, or you can buy a copy for some extra cool features like Streams (custom data), up to you.
I've been looking at both recently (though not using them in anger) and also come from a Zend background. The things that I liked disliked about each were: Zend 2 Liked: - Still using table/row gateways for default Db implementation. I prefer this to Doctrine 99% of the time. - Much less magic than ZF1 and a generally simplified structure. - Supposedly 7x+ faster than ZF1 due to simplified autoloading strategies and classmaps. Synfony 2 Liked: - Very good PHPUnit integration - Very good documentation - Built in Reverse Proxy Cache - Dev console - idea of "bundles" is excellent - Assetic seems cool Zend2 Disliked: - I know I'm in the minority but - DI containers for every little thing in the application (controllers etc.). - No more config inheritance. - No proper PHPUnit integration at this point (AFAIK) - Documentation is a work in progress Synfony 2 Disliked: - So. many. config. files. (also very large DI containers as per ZF2 - seems to be the way of the future but it's a real pain when you're used to everything just kind of "happening") - Doctrine. I just can't get on with it and I've really tried. I get what it's for but I just don't need it most of the time. You don't have to use it all (you can just use DBAL for example) but I miss the middle ground of something like Zend DB. Generally speaking Symfony 2 impressed me a lot more than ZF2 but it's not really fair to compare them yet given ZF2 is still so far behind Sf2 in development. I think both will turn out great eventually but if you need to make a decision quickly it's probably got to be Symfony 2. Besides, since everyone has settled on auto-loading standards and agreed loose coupling is a good idea you can pretty much just use your favourite Zf components in Sf without too much trouble. 
Try: session_unregister("myusername"); session_unregister("mypassword"); session_destroy(); Also, make sure the information you don't want them to see is included within some check to see if they are logged in or not: if(&lt;logged in&gt;){ show them the good stuff } else{ show them the login page }
Just where it is now, "STEP5: Create file Logout.php". Change &lt;?php session_start(); session_destroy(); ?&gt; to &lt;?php session_start(); session_unregister("myusername"); session_unregister("mypassword"); session_destroy(); ?&gt; 
Generally, I think the better developers are the ones that use frameworks.
Well, that's just plain retarded. session_destroy() destroys all data associated with the session, so unregistering them beforehand is completely unnecessary. 
Why do you have both nginx and apache listed?
Not really if you ask me, too much data, most of it useless most of the times. The query you are executing is printed several times (instead of one). I have no idea what would you need DB callstack, and I wonder how bad does it look when it's appended to AJAX response which is inserted somewhere at the page. EDIT: I replied before you posted your comment, so I some of my points are wrong. I now I see how (and why) it works. Nice work then.
No, that's cool man :) I get the point of them for the most, I just find it odd how there are so many now, (I've been a php dev for about 8 years now), and generally they're so similar that it seems pointless to use one over the other, yet people will argue back and forth endlessly. From my experience with zend, I wasn't too impressed, but to be fair it could have been my coworker's shitty code that made me dislike it. 
Converting non-fatal errors (warnings, notices) to exceptions is rather silly. Even languages designed from the ground up to use exceptions don't do this.
I created a small set of code for storing the "state" of a common shopping cart (items, discounts, shipments). The object(s) are meant to be stored in the session and/or database. I included some functionality for import/exporting json. Let me know if it helps you out in any way. Feel free to fork it, or whatever. [CartComponent](https://github.com/jesse-dev/CartComponent) btw, I'm building a Symfony2-based cart on top of CartComponent. I plan on open-sourcing it _soon_.
I should have noted, most of this output is only called up during an error. When there are no errors or exceptions, much of that output is not printed - although I do output the call stack for each query as a tooltip on the query. I've found it useful enough to keep it around, though I admit there are times when I don't even need to look at the debug output. There is definitely some redundancy, but having all the extra information is more useful than no information - and there is zero performance impact in a production environment. :)
My opinions are a matter of personal preference. I think ZendAcl is more straight-forward than Symfony's ACL. It's been a few months since I played around with Symfony's ACL api, but if I recall correctly, it stores every rule for every user, so it's a bit heavy for role-based ACL's.
It wasn't entirely clear, but hiii seems to be running PHP with the default settings, which have E_STRICT off, so deprecated stuff is still allowed.
I actually worked it down to 117, but missed the deadline. function HorribleUsername($game){$c=split(',',$game);for($d=$e=$f=0;$f&lt;10;$f++){$d+=($g=$c[$e]+$c[$e+1])+($g&gt;9?$c[$e+2]:0);$e+=$c[$e]&gt;9?1:2;}return$d;} Thanks for running the contest hiii, it was fun.
That was fun, but I have a few complaints: split() throws an E_DEPRECATED notice in 5.3 My solution is 125 characters. Code posted for horribleusername is 122 characters (is this an older one?)
Yeah, agreed. split() shouldn't be allowed. That said, you can always do this: $x=explode(',',$game); // str_getcsv yields 1 less character $x=str_getcsv($game); Also the everyone doing this: for($c=0;$c&lt;10;$c++) Is a lot shorter to do this instead: for($c=10;$c--;) Nobody is actually using the counter inside the loop, so the value itself doesnt matter. just that it loops 10 times. 
I didn't read everyones code. I just pasted and ran it. split is deprecated, but it didnt throw any notices or warnings. not sure why.
It was one of mine. I sent in 3 or 4 iterations, which might've caused some confusion. Sorry.
Yeah the fact that the split was allowed was a bit of a bummer(I could've saved an extra character if I used it). But anyway competition was damn interesting.
Plus most of these tutorials go unchecked as older functions and features become depreciated. On top of that, security flaws can crop up or new vulnerabilities will come up, rendering that tutorial code flawed.
Quite right you are.
My solution is in a [comment](http://www.reddit.com/r/PHP/comments/uliem/php_contest_score_a_bowling_game/c4x71qg) down the page
It is an older one. The one listed as kinmix's is mine. [Here's the proper kinmix solution](/r/PHP/comments/uliem/php_contest_score_a_bowling_game/c4x71qg).
Yeah, same here. I thought all top solutions will be almost the same, with some just missing few last steps. And in reality solutions are quite different.
thats what i have, no notices
In the United States our postal codes are 9 digits long: ex: 12345-6789 I reckon there are probably hundreds of thousands if not millions here in the US.
instead of arguing about the quality of your link, I'll just say that I didn't think that the specifics of the method were important - nor do I even comprehend them. It appears I was wrong - and what I assumed might be a quirk of php or an encoding issue was actually related to the method call in question doing something weird. I'm upset at myself for getting angry with you. I appologize. However, when you up a link like that its pretty much saying "thats a stupid question" - and likely to get a poor reaction.
No, that link is meant to show you that asking vague questions won't get you the answers you're after. Instead of choosing to be offended by it, you might consider just choosing to learn from it. How you want to proceed is always your choice.
exec() for executing FFmpeg and parse it's output in PHP or Node.js. And mediainfo --format=XML for getting information about the file.
Have a look at this way of dumping structures: http://dbug.ospinto.com/ 
Doesn't seem too different than what I'm trying to accomplish - though obviously that is better formatted (and tabbed). Certainly gives me a couple ideas, but as a whole I don't seem too far off.
Thanks for the tips, Youre probably right about the ORM, It's just I'm trying to learn about PHP inbuilt features as i go, so I'll definitely be looking into PDOs.
Actually I should mention before I was using htaccess. Im in the process of going from htaccess to sessions. Thats why they are both there now.
Using NGiNX backing up normal requests straight through to Apache (I know I should probably be using NGiNX for the primary server, but at the moment, I'm just going with what I know. Maybe down the track I'll drop Apache. Additionally, using NGiNX to mask requests to other services ie /feed/ -&gt; proxy_pass to a node.js app without the user knowing that the request is being pushed to another service. Probably doing this wrong, but well, that's something I'll figure out along the way.
I initially set up nginx as a proxy in front of PHP as well. We ran into some small issues and it was kind of a pain sometimes. A few months later, and I just completed the migration... We now run nginx exclusively. We stuck with Apache for a while because we didn't have the faith in nginx - that it would have all the features we would need. We liked having the Apache fallback. However, having been running both for a while, I can tell you that nginx is indeed all you need. We get *vastly* better performance out of nginx/php-fpm than Apache/mod_php. We had to convert a few .htaccess rewrite rules to nginx rewrite rules, but it was pretty simple. Before you deploy anything, spend a bit of time and set up a server exclusively with nginx and install some of your stuff on it. I think with a small bit of time invested, you'll choose like we did and go with nginx exclusively.
Wow. And all this time I had wished for something similar to the debugging capabilities of VS/Xcode/Chrome (yes, Chrome - I love the JavaScript debugger). Definitely going to dedicate some time to it this weekend.
Thanks, I shall do. I remember messing around with nginx way back when as the primary web server, and while impressed, it was limited and Apache was far to familiar to leave. I might re-assess it and drop Apache all together, there's no real reason to keep it apart from as a fail safe.
;-) - thats the problem with the interwebs. You can't easily infer emotion or intent from text. I did get the answer I was after - just not the one I expected / hoped for.
That would indeed be a smart idea, though at the cost of greater I/O. In my case the situation was that I simply didn't need that degree of information.
No, I don't. I mean a book which actually explains programming logic rather than something which begs to merely copy and paste code. Don't be daft. 
Should use Geshi to color your queries and such. I find it handy.
you can pass the Post object instead of just the ID, and you can use type hinting to validate it. and also, consider moving the method to the post class so no argument is needed.
Notice: Undefined variable: i
Except you are. In your error logs which you should be watching.
You can always ping me on Freenode, same nick as here, whenever I'm online. I'm also learning myself but who knows I might have already figured some things out you didn't :)
It's not all of nothing; you can use both. But look at [this example](http://i.imgur.com/711vG.png). Both display the same exception, but I personally find the one on the left more readable then the log-file. I get syntax highlighting, it prioritizes on showing application code (which can be turned off), application/framework files are colour coded, I get a code snippet, and it's better laid out. You can get some of this with a log file, but not all of it. With errors forced on you, it means all I do is: * visit the page .. and that's it. If it errors I see it immediately; if it doesn't then I don't. With logs it's ... * visit the page * alt+tab to editor * ctrl+tab to the log * ctrl+end to see the bottom * read if there is an error You also have to do that even if there isn't an error, because it could be hidden behind the HTML. With mine, you don't. When you're coding quickly, I find that easily breaks up my flow. Logs have their place, but I prefer to have errors forced on me the *instant* they occur.
i started off commenting, then stopped as i simply didn't need to, alas a recent course has told me its good practice, but i still forget most of the time, im only commenting for myself anyway.
Exactly what I though mate :)
Just a heads up, count(*) gets sluggish on bigger databases. If you do count(id) where id is the primary key it will be much faster.
[Nice!](http://weknowmemes.com/wp-content/uploads/2011/09/obama-not-bad-face.jpg)
On production sure, i didn't think it was a big deal on development 
Try to repair sql database owing to [SQL Server Fix Toolbox](http://www.sqlserver.fixtoolbox.com) software is able to restore sql db of more than 2GB
If I remember correctly, ''|date('Y-m-d) works just fine as well 
I agree fatals are not recoverable, and shouldn't be, however they should be able to be caught. This is just so you can add custom logging. Namely fatals don't give you a stack trace, and they really should. This can make some bugs a nightmare to debug, especially if it's coming from inside someone elses code, or happens in production.
It's going to be open sourced, and I had planned on trying to make it work stand alone. However right now it's only half built, and it's built for the framework I'm building. It's also capable of being setup to be application aware, for example [here](http://i.imgur.com/FEmaF.png) it highlights the application code in the middle of the stack, ignoring the deep call into the framework. In the finished version you'll be able to look at the code from any of the levels, up or down. When it's done, it will also feature a code editor, rather then a code snippet. That way you can just fix the bug there and then, and it'll auto-refresh, rather then alt+tabbing back and forth with an editor. That suits me very well as I often write several pages of code, and then when I run it, have a tonne of typos and minor bugs to fix. This will speed that debugging phase up. edit: all of the code for editing your application will also be in one folder. The framework will turn editing off when it's not in dev mode, or if you delete that folder. So you can trivially delete all of the editing functionality when you deploy.
Also a good idea.
Very good tip. I typically do this (usually on the index id column), in this case I probably wrote it up and never got back to it. It has been fixed. =)
Should mention that link is **NSFW**.
[this](http://i.imgur.com/Z0lCG.png) (hidden under the konami code) is what I use for debugging where the entire page loads but behavior is unexpected. There is obviously room to expand, and I like the idea of tracking queries and page render time. Also, it would be nice to dump similar data if there is a fatal error. 
Good. Now, let's hope they drop PSR-2. Edit: Crap, it's already [accepted](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md). Fuck you, FIG. 
Yeah, I hated being "that guy" that critics your code. Honestly I wasn't, but it stood out to me there. :)
jQuery UI is an abomination.
From [PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md) overview: &gt;* Opening braces for classes MUST go on the next line, and closing braces MUST go on the next line after the body. &gt; * Opening braces for methods MUST go on the next line, and closing braces MUST go on the next line after the body. I've seen people get into fist fights over this before. People are genuinely passionate about this kind of stuff. That said, I agree with you. I can jibe with [PSR-1](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md), but [PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md) is turning *preferences* into *standards*. 
I can't stress this enough. PHP users seem to be the worst when it comes to debugging; I don't know why this is but I wish I knew. A runtime debugger is going to be leaps and bounds easier and more helpful in tracking down and squishing bugs. Learn to use debugging tools, you won't be sorry. And if you absolutely HAVE to do it the other way, then remember that system-level error details should never be sent to standard ouput. At least use stderr or syslog or something.
I just want that style :P
I must've misinterpreted him then, because I thought he was creating a level of abstraction which would then communicate with an API. 
I used the wrong word. I meant 'fatal' error not in the PHP sense (E_ERROR), but in the thats-the-wrong-value sense.
&gt; and a view is created(each view has it's own row, with 3 cells: banner id, timestamp, url), Can you elaborate a bit more on this? What 'view'? A CodeIgniter view? A MySQL view? Or is this just a table called "views" ?
Wow, that's quite an improvement, just installed it, can't really see any difference, probably because my cpu usage wasn't that high to begin with, but thank you, I will try this on a more cpu-intensive server! Edit: omfg, the ram dropped form 2 gb to 1 gb. THANK YOU
Umm, good question, here's the create syntax for the table as it is now. CREATE TABLE `views` ( `banner_name` int(11) DEFAULT NULL, `stamp` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', `exit_url` varchar(255) DEFAULT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8; Would you recommend adding the id with auto increment back in? The data is read at most once a day, a query is likely to do a group by exit_url, we never really do anything else with it. I was considering setting up a cron job of sorts that would clean the views table every 12 hours, but before, it would so something like "select *,count(`exit_url`) from views group by `exit_url` order by count(`exit_url`) DESC" and then offloading this into a different table, that would hold let's say at most 50000 different records per day, instead of 1.5 million records per day. Does this sound sane? **edit: I understood the insanity of what I was doing, here's the table as it is now** CREATE TABLE `views` ( `id` bigint(11) unsigned NOT NULL AUTO_INCREMENT, `banner_name` int(11) DEFAULT NULL, `stamp` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', `exit_url` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=6677179 DEFAULT CHARSET=utf8;
I would look to cache those requests at every possible interval. I think that you could throw Varnish on top of the whole stack so any time a second request is made from the same URL it is not touch apache or mysql or php. This will be much much more performant. It sounds like the way in which you've setup the swf files that that wouldn't interfere with the analytics coming back from them. Whenever an editor changes the content you could setup a script to invalidate that url in Varnish so the new content is retrieved. Just make sure that the headers coming out of Varnish don't let browsers cache your content (which I assume you are doing out of apache/php). If that is undesirable I would recommend a datastore other than mysql that can cache requests before they hit the database such as memcache or redis. An opcode cache as suggested already like APC would also likely be an easy win.
Yep, APC and memcached, best things my CPUs have seen :)
You really should add a primary key back to that. Internally that's what InnoDB is doing anyway since you do not have a PK and you do not have any unique fields -- It's generating a PK (technically the row identifier) behind the scenes. Since at that point you'd be inserting in PK order anyway, you aren't going to have any sort of speed impact whatsoever. I would suggest not ever destroying data. Setup a views_archive table if you'd like and move anything older than a day or whatever into that archive table.
Additionally I'd suggest moving your static content (swf, images and XML files) onto a separate server. Rackspace Cloud Files are perfect for this. At that point the only requests that hit your server heavily are the impression + click events. All the content itself can be served from something optimal at serving static content. Your "admin" module can be responsible for generating+replacing the static XML data, since I doubt this probably changes too frequently anyway. I saw you enabled APC, that's a /huge/ benefit as you've already seen.
1. I will definitely be setting up nginx and testing it out on a separate box. It does sound very good. 2. php-apc as of an hour ago, it's the middle of the night in the UK right now (that's where I and my clients are), 46 requests per second = 402 mb ram, this used to cost at least 1.4 gb. 3. I've been using ubuntu because I kind of grew up with it, but your success story does sound extremely attractive. Could you please go into a bit more detail about your server or maybe point me to the resources that you have used while setting it up? Thank you very much.
Could you explain what APC is and what you use it for? Seems really interesting.
Slicehost's articles are quite good: [http://articles.slicehost.com/debian-lenny](http://articles.slicehost.com/debian-lenny)
Regarding your memory usage, this kind of growth is normal. The apache workers get reused and eventually grow in size. Unless you're server is starting to swap, I wouldn't worry about it.
I can't disagree with your points. It's just that it's unfortunate timing choice and perception. The group had precisely lacked the input of CI, Fuel, Kohana, Laravel, when they decided suddenly to focus on coding style (PSR-2), end up happy of how they were already following them (well... yeah), then alienate kohana and others, by it.
Knowing [a teensy bit of awk](http://gregable.com/2010/09/why-you-should-know-just-little-awk.html) is super-useful when doing log parsing.
+10 on nginx, it works wonders. APC is a huge one as well. And in your code, cache cache cache
You might want to use a tool like Sawmill or something else that exists for stats. You can also use a redis store and another "offline" script to parse these stats (on another server reading it or something)
&gt; array-exploding rockstars Bro tip: you can't just explode an array. `explode` only takes a string argument. So, you have to cast that array to string first...
&gt; okay, you can in register_shutdown, but don't do it! Looks like `debug_backtrace()` within the scope of the shutdown function contains only the internal function call to your register shutdown function. No extra information about how the force shutdown occurred besides the basic info in `error_get_last()`. [This technique](http://stackoverflow.com/questions/277224/how-do-i-catch-a-php-fatal-error) really doesn't seem any more useful than reading the regular error log anyway from a debugging perspective.
Get a good caching/invalidation strategy in order to minimize database hits. The idea being that you cache for infinite time, and only invalidate that cache when it is stale (something it depends on changes).
+1 I had no idea how useful tools like `awk` were until someone finally got me to use them.
&gt; Do I verify it's an integer or do I let the developer deal with this? It should be common sense that consumers should never implicitly trust service providers to do their job, be 100% reliable, or actually provide a decent service at all. In the reverse, the consumer needs to accurately describe to the provider _exactly_ what it is they want or else it very likely could be _your_ fault when the service can't fulfill its duties. The same can be said about the digital world as well. Likely the service provider you're fetching from parses _all_ remote request parameters as strings just as PHP does for its incoming requests. But, for the sake of accurate communications between you two, you should verify that your outgoing `post_ID` at least follows the rules of integers if the service requires it: a whole number and most likely positive. If you can't verify the outgoing parameter is a whole number before you send the request, then you're wasting remote connection resources on both ends making both parties sad. 
Also up voted the nginx suggestion. In fact, on occasion when Reddit goes down real hard, you'll notice the error page is being served from nginx. If it's good enough for Reddit, it should be good enough for you.
&gt; gets written into an xml file Using actual xml files could become a problem as your service grows. I personally would avoid that, and instead serve the XML via a PHP script, and keep the data in Redis. &gt; The swf then sends a straight get request with it's own id This sounds redundant. The swf has already made a GET request for the XML data. Why not pass the swf ID with that request? You would drop GET requests in half (Not counting images). &gt; which uses PDO to make an INSERT into mysql, and a view is created You would probably be better off storing this data in Redis. &gt; apache: Use Nginx with PHP-FPM instead. It uses far less memory per request than Apache, and is generally optimized for this type of work. Besides that things sound good. I would advise you relax with trying to micro-optimize and analyze everything. At the moment you were about to remove auto_increment columns from your database, you should of thought to yourself, "Okay, now this is just getting silly. I need to relax." 
I would love a resource or article that describes a Reddis implementation for analytics with a PHP focus (pretty specific, I know). Do you have any suggestions?
I don't know of any specific resources off hand. We do a lot of in-house analytics using redis, and I could answer specific questions. 
If you're looking for an overview on writing solid code from a library level I'd highly recommend ["The Grumpy Programmer's Guide to Writing Testable PHP Applications" by Christ Hartjes](http://leanpub.com/grumpy-testing).
Why does the "famous Jewish sports heros" gag from Airplane come to mind?
/r/apache /r/sysadmin I wouldn't ask programmers for sysadmin-style help.
Start using a modern framework like Symfony2. Follow their conventions. Go through their source. 
What a complete joke, I'm all for PSR-0 but this is just ridiculous. Enforcing StudlyCaps and camelCase is complete nonsense, this isn't Java! I'm glad to see that at least [Kohana has told them to go pound sand](http://forum.kohanaframework.org/discussion/10784/psr-1-and-psr-2/p1). &gt;Expect PSR-3 to focus on personal hygiene and manner of dress.
*Christ* Hartjes?
APC and Varnish are easy wins.
Thank you, the xml parsing is done inside the swf file client side, so not really a concern, plus there are at most 15 lines inside the xml.
I'd wager NFS would be 5x slower than using MySQL... If your worried about the mysql server, what about memcached, would that work? Otherwise I'd still say go with MySQL
NFS has no shared file locking which can end up corrupting sessions. It's going to be slow. It's a single point of failure. If your application continues to grow (presumably it's already grown if you're running more than one server?), NFS is going to become a bottleneck down the road. The last time I used NFS, it really had very little in the way of security which may or may not be an issue depending where and how your servers are hosted. (Also: Zombies.) Storing the session information in a RDBMS has many of the same problems. You won't end up with corrupted sessions, however it's a single point of failure, will cause scalability issues, is slow, and is placing load on your database which will, presumably, negatively affect the rest of the application. The "best of the worst" depends on exactly what your application does. Are the sessions used for anything that would be a huge pain if it were lost (e.g., a shopping cart)? Do you write to your sessions a lot, or usually just write once (say, at login) and read repeatedly (each page load)? Implement a custom SessionHandler, and back it with something else. You can hack it onto an existing app (or multiple apps) without changing them using PHP's auto_prepend option if need be. If losing a session occasionally isn't the end of the world, a simple memcache install may work. You could either use the built-in sharding (simply add multiple servers, it will handle distributing the keys), or add the creating server's id to the session identifier and use that to determine which memcache instance to pull the session out of. If your cluster is all running on the same network segment, it shouldn't be too bad performance-wise, and barring a server dying, you having a *lot* of concurrent clients, or you storing way too much information in the session, you really shouldn't lose all that many sessions. You may occassionally lose a session, but this should scale fairly well, shouldn't be too slow, and shouldn't significantly increase the load on anything. If you're worried about losing sessions, you could add a backing behind memcache. If you don't do many writes, you could store the session in an RDBMS and pull it into memcache if it doesn't exist there. Add some versioning data (or change the session identifier) whenever you write to invalidate stale memcache data and have it re-retrieved from the database. Assuming your memcache instances have enough space to store most of your active sessions, you should only see approximately 1 write and 1 read for each node on an active session hitting your RDBMS. You could also look at another database solution. Some people have reported good results with something like MongoDB. However I'm not sure if it actually was effective or they're just fanboys. Zend also provides some sort of session clustering implementation in their Zend Server for around $7-10k/yr. Or you could just enable host affinity on your load balancer.
Thank you very much, I now know how I'm spending my weekend.
This app is currently serving 1 client, currently serving 2.2 million banner views per day (2.2m in the last 24 hours) I need to make a business plan with load-specific costs (for example: how much does it cost us to serve 1 million views, 10 million views, 100 million views per day), so we know what prices to charge our clients and how we should go about scaling.
Thank you, this is what I'm going to do this weekend ;)
Yeah, as you might have guessed, that's *one* correct answer. The problem is the question. If, by free, you and I meant "absolutely unused memory", you'd be right: 125MB. But most of the time when we want to know how much memory is free, we're actually either watching it for diagnostic purposes (e.g. to see when the server might start swapping), or to see how much memory would be available for extra processes if we were to increase MaxClients, spawn more workers, increase APC's shm_size, etc. In that case, the most common one, reading just the top line can be misleading. The better answer would be 496MB The most important numbers here are used/free, in both the top two rows. The label on the left hand side is to be read like this: there is 625MB used, but 254MB used once the memory tied up in buffers/cache is *subtracted* from that total; there is 125MB free, 496MB once the memory tied up in buffers/cache is *added*. Notice that the two sets of used/free (625 + 125, 254 + 496) both add up to the total. It's usually the second set that you want to be looking at. "Buffers/cache" refers to otherwise free memory used by the kernel to improve performance. There's no cost to this usage: the memory would otherwise be going unused, and can still be made available to applications as needed, if needed. It improves performance, with no real downside.
We do use Predis although there is a native client lib which you can find on github. We tried them both, and I decided I preferred the Predis syntax for pipelining commands. The setup is simple as the lib follows the standard autoloading directory layout. Just download it, drop it in your include path, and you're done. I would say you do need a lib to communicate with Redis. It uses a text based protocol like memcache, but it's complicated enough that I wouldn't try writing a simple lib for a specific purpose like using the hash type. Plus you may end up using Redis more than you initially planned. So might as well just use the Predis. 
Another technology worth looking at is [Yahoo Traffic Server](http://trafficserver.apache.org/). The idea is that any page that does not need to be rebuilt every time, it can built once and served multiple times. Apache Traffic server also solves a whole bunch of problems you don't even know you have yet. From the overview... "Traffic Server is serving more than 30 billion Web objects a day across the Yahoo! network, delivering more than 400 terabytes of data per day. It's in use as a proxy or cache (or both) by services like the Yahoo! Front Page, Mail, Sports, Search, News, and Finance." If you want a commercial proxy product, [Citrix netscaler](http://www.citrix.com/English/ps2/products/product.asp?contentID=21679). Netscalar is expensive. Both of these technologies require patience to setup but can easily reduce your database load by 1000x if you are serving the same page to a large number of users.
wondering why using a 'database' is a single point of failure, but using 'memcache' isn't? Presumably someone who has the ability/wherewithal to install and configure memcache would also have the ability to set up a secondary mysql server just for session data.
Install the proper extension ([memcache](http://uk.php.net/memcache), [memcached](http://uk.php.net/memcached) or [phpredis](https://github.com/nicolasff/phpredis)). Then depending on the extension have your php.ini set the save handler to this: **Memcache** session.save_handler = memcache session.save_path = "tcp://localhost:11211" **Memcached** session.save_handler = memcached session.save_path = "localhost:11211" **Redis** session.save_handler = redis session.save_path = "host1:6379" Or if you have multiple Redis servers (notice the extra **tcp://** needed in order to pass the weight parameter): session.save_handler = redis session.save_path = "tcp://host1:6379?weight=1, tcp://host2:6379?weight=2&amp;timeout=2.5, tcp://host3:6379?weight=2" 
Thank you this couldn't have been a better reply. If only I had more than one upvote to give :)
[PHP Object-Oriented Solutions](http://www.amazon.com/PHP-Object-Oriented-Solutions-David-Powers/dp/1430210117) [PHP Objects Patterns and Practice](http://www.amazon.com/Objects-Patterns-Practice-Experts-Source/dp/143022925X) [Real-World Solutions for Developing High-Quality PHP Frameworks and Applications](http://www.amazon.com/Real-World-Developing-High-Quality-Frameworks-Applications/dp/0470872497) Have fun!
&gt;Even if StudlyCaps and camelCase were the de facto standard it doesn't make any sense to include them in a standard. The whole point of PSR is "framework interoperability", how does mandating StudlyCaps and camelCase help with "framework interoperability"? The fact is, things like class/method naming conventions and tabs vs spaces for indentation don't belong in a standard. Well, I could see two arguments in favour of StudlyCaps, namely 1. naming consistency when mixing various libraries, and 2. making it easier for autoloaders to map classes to file paths. As for tabs vs spaces, that doesn't affect the end-user programmer in the slightest and I agree that it doesn't at all belong in a standard. &gt;The majority of this isn't directed at you, I kind of went off on a rant there, it's mostly directed at the entire concept of this so called "PHP Standards Working Group". That's okay, I didn't take offence. I'm kind of pissed 'bout the whole thing as well.
how so?
I second the nginx solution - it probably won't affect PHP speed much but it will use less memory and greatly improve static file serving.
Yes, because at 25 years old and writing articles like "FUCK PASSWORDS", this guy's word is clearly law.
It's stupidly easy to make memcached redundant. Though your mysql ought to be as well. 
Yes sir, you are in the right track.
I see. I read that incorrectly. So your SWF makes two requests, one for the XML and one to do the tracking. Is there a request to your server to get the SWF in the first place? If you can cut down on the number of requests, that's a quick way to achieve results.
There are plenty of other things I wish were in the FAQ as well. Like not posting blogspam and doing a basic google search/checking the manual before posting questions. Every once in a while we get questions which are on the level of asking what the parameter order of a function is. That shit shouldn't be allowed to happen, as it brings down the quality of the community. It's so basic that it could be looked up within 15 seconds. People need to understand that we're here for discussion and support. We're not here to process documentation for people too lazy to do it themselves. 
This. You should pass in your "Model". You could have an interface, say, MyModel: interface MyModel { public function connect(); public function prepare( $query ); public function getResults(); } Among other things.. This can be tailored to how you want it. Then, create a class that implements this interface: class MySqlIModel implements MyModel { private $connection; public function connect( ... ){ $this-&gt;connection = mysqli_connect... etc; } } Now you can pass it into a class you need: class MyBlogController { private $model; public function __construct( MyModel $model ) { $this-&gt;model = $model; } public function getPosts() { $this-&gt;model-&gt;prepare('blah blah blah'); return $this-&gt;model-&gt;getResults(); // etc } } You'd probably want to do the $model-&gt;connect() somewhere else, and then pass this in. This way if you awnt to change from mysqli at any point, you can just create another class that implements the same interface and not have to change the rest of your code!
If you don't feel like installing nginx you can get similar results by using mod_worker + fastcgi using apache.
Isn't the code within getPosts() mysql-specific? Seems like he'd still have to change code if he wanted to change the data source. 
You could definitely do that. You could also just use Doctrine too because it has a DBAL. This was more just to illustrate an OOP pattern 
From the TFD bootstrap: // our file extension define('EXT', '.php'); // main directories define('PUBLIC_DIR', $public_dir.'/'); define('BASE_DIR', __DIR__.'/'); define('APP_DIR', realpath($app_dir).'/'); define('CONTENT_DIR', realpath($content_dir).'/'); unset($public_dir, $app_dir, $content_dir); // cleanup the global namespace // app directories define('FUNCTIONS_DIR', APP_DIR.'functions/'); define('LIBRARY_DIR', APP_DIR.'library/'); define('TEA_DIR', APP_DIR.'tea/'); // public directories define('MASTERS_DIR', CONTENT_DIR.'masters/'); define('MODELS_DIR', CONTENT_DIR.'models/'); define('PARTIALS_DIR', CONTENT_DIR.'partials/'); define('TEMPLATES_DIR', CONTENT_DIR.'templates/'); define('VIEWS_DIR', CONTENT_DIR.'views/'); Dear god, noooooooooo!
I'm in a windows environment... I store sessions in a folder replicated on all web servers. Working so far for php. Alternatively I guess I could use a networked location for the sessions folder. My web sites run in iis with domain user credentials.
&gt;You are correct, of course, but don't you think that this is an overkill? No, I don't think proper abstraction and application design is overkill. &gt;The dude is obviously still learning. And? Did I degrade him or something? I don't think I did. &gt;And I agree to the whole "learn things right the first time" thing, but one thing at a time, please. Oh, fooey. All I did was suggest that he might want to consider abstracting things to make it less tightly coupled. I did not tell him how or otherwise instruct him in it. Merely mentioning it isn't overkill at all. 
Oh, well now you're talking about some security you should have setup on your server to begin with. You should have your server completely firewalled to begin with. You should only have the a few ports open to the outside world, like port 80 for http, and port 22 for ssh. Once that's setup correctly, needing security on Redis becomes a mute point. Keep in mind some of the most popular daemons, like memcache, don't provide any authentication at all! You're expected to have your server firewalled. You might want to talk to a sys admin about this kind of stuff. Some things to look out for: * Only the bare minimum of ports should be open. * You should *not* be using FTP. * You should have root logins completely disabled. * You should have password logins disabled, and instead use certificates. You're going to have to talk to a sys admin about setting all this stuff up.
Oh I see. Thank you!
Thanks for the help.
Bullshit. "In the future you might want to change that data source for something else, in which case it helps if you're able to abstract away the database-specific code" is not hard to understand at all. Furthermore, **the guy fucking asked**. What should I have done, said nothing? Another point is that these posts aren't only useful for the people asking them, but also for other people which might stumble across them in the future, so having the information handy is a good idea.
We run high traffic sites fronted by nginx with apache/php for the backend. Apache makes a wonderful container for PHP: it's stable, it's easily tuned, it's well understood and has many more features (both in the core and in modules) than nginx. I don't see a reason to switch to PHP-FPM yet, as PHP execution time is almost never our bottleneck with a caching frontend. If you use mod_rpaf you can make your requests on the backend look exactly like they are coming from the client. We use the nginx file cache as we have enough RAM and fast netapp storage, but there are other caching backends too. A goal should be to trap as much traffic as you can at the frontend proxy cache so that requests never hit your slow dynamic PHP backend. This works great for us and we frequently get pretty big surges in traffic. nginx is magic, you can put it in front of ANYTHING and cache whatever you feel like and your apps behind it don't even need to know it's there. Great stuff.
Stop being retarded. Two sentences is not too much information. I didn't give him any information at all apart from mentioning abstractions and briefly explaining what it is for. I'm done with you. 
It's up to you to argue why the abstraction is necessary when you know nothing about the requirements he's working against. What you've done is added complexity. Is it worth it? You can't answer that for the OP, so stop acting as if you can.
Only using sftp for file uploads, the one that came packaged with ubuntu. After doing a bit of researching, how's this? Is it enough to run the stuff I'm running + redis safely? iptables -A INPUT -i eth0 -p tcp -m multiport --dports 22,80 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A OUTPUT -o eth0 -p tcp -m multiport --sports 22,80 -m state --state ESTABLISHED -j ACCEPT iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT iptables -P INPUT DROP iptables -P FORWARD DROP I'm sorry for kind of pushing this on you, but I don't really know who else to ask.
Came here to make a joke about twinkies and fritos, but after reading everyone else's serious responses, I will only mention the fact that I was going to make it, and not actually make it.
I'd suggest borrowing a session handler from a framework if you aren't already using a framework. Most frameworks have 'em. Like you guessed the easiest way is to manually store a session in a DB or a fast key-value store, that way you have absolute control over what gets stored and for how long. If you go down the massive gigantacookie method. Remember that a) the user can view and edit anything stored in a cookie as can the next person who uses that computer so don't "trust" cookie data nor store nuclear launch codes in it. Also, the way cookies work, the get sent as part of the HTTP request, so if you have a 2KB cookie, then you are added 2KB of extra "upload" data to every subsequent, page view, image viewed and even JS/CSS file downloaded from that domain (obviously there are workarounds, but that's the basics) which means that on a page with 5 images and 3 uncached stylesheets or script files you could be adding an extra 16KB of upload transfer to the client on that page view, which can be significant for some users with slower upload than download.
Thank you!
No problem.
Thank you, that's actually what I did while waiting for a response (spun up a 512mb ubuntu box, installed lamp-server^ and then applied the above rules, worked as I expected it to, then did an image backup of the whole live server and executed the iptables rules on it, everything ok, I already feel safer :) I don't use FTP (so no need for 21) and every attempt at setting up ssl resulted in apache screaming something like "port already in use" and blocking connections all together, so I don't need 443 until I figure out how to set it up properly. Thank you once again.
Hey, sorry, we only allow positions that allow full telecommuting.
Thank you, Will give it a go!!! 
Hey meteors. Unfortunately answers in this thread are incorrect or mostly incorrect. The subject is fairly simple when explained correctly. Let me explain how sessions in PHP work. For a session to exist, there needs to be a connection between the browser (cookies) and the server (a file, a database entry, a memcache entry ‚Äî any kind of storage on the server). In default configuration, PHP sets a cookie with a session ID and creates a file with its name being the ID. Once the cookie with the ID is set, and some kind of server storage with the same ID exists, you've established a session. Browser sends the cookie, PHP picks it up and gets the session data from the storage. Since a session requires information from both the browser (cookie) and server (some kind of storage) it can be invalidated by either. The cookie can expire, in which case your PHP script doesn't get a session ID to link to the session stored on the server. Alternatively, the session stored on the server can be deleted; meaning the session ID sent by the browser can't be linked to a session stored on the server. Now, the interesting parts. You can control session lifetime by the following configuration settings (being it php.ini or ini_set() or Apache directives, etc): session.cookie_lifetime how long the cookie will live in the browser (renewed with every request). If you set it to 0 it will be stored in the browser until it's closed. If you set it to 60, the session ID will be stored in the browser for 60 seconds since the last request The above is the only way to control the browser-side longevity of the session ‚Äî but remember that it still can be removed on the server side. And that's controlled by the following: session.gc_maxlifetime in seconds, controls max age of session data stored on the server. All sessions older than that will be removed. But they are removed at times controlled by the following 2 directives: session.gc_probability and session.gc_divisor work together to establish when sessions are removed server side. Sessions older than session.gc_maxlifetime will be removed session.gc_probability times in session.gc_divisor requests. As an example: if session.gc_probability is set to 1 and session.gc_divisor is set to 100, then sessions older than session.gc_maxlifetime will be removed once every 100 requests. You may think it's confusing and unnecessary. The reason for the probability/divisor malarkey is so that PHP doesn't have to check for old sessions on every request (theoretically slowing your app down). Instead you can tell it to, for example, remove old sessions once every 1000 request. Or 3 times every 589 requests. Or whatever you want. It doesn't really matter, because old sessions will be invalidated by session.cookie_lifetime (remember, session ID must exist in the browser, for PHP to find it on the server). The only reason it matters is so that you don't store old session data on the server, so it's worth deleting them from time to time. TL;DR: Sessions in PHP make sense once you've understood them. Read above. Ask questions if the above is unclear. I've had 3 beers so I may have made mistakes.
I actually think losing sessions is bad in terms of not pissing off your users...but thats up to the developer I suppose. If your storing so much in session that you run out of memory for memcache you are doing something wrong or have so many users you probably need more hardware anyway. Storing a LOT in sessions is poor design as it must unserialized and then serialized to text format every single page load. Though if you slam your memcache with *that* much, run two memcache processes and allocate a minimum to your session process and force the other to dump its data first. Or better yet, get more ram or a second server for memcache. If your dumping so much data into memcache that you are pushing data out before it expires, I do agree mysql is great if you can't use memcache. If you have mysql and can't add anything else to your environment, it is by far the best method. There are classes out there that are stupid simple to use as well that do not require any config changes. The real advantage with with memcache is the latency is low no matter how many entries, scales outward nearly indefinitely with little cost per node and adds no additional load on your mysql server which can be expensive to scale beyond a certain point. Also as session data is volatile anyway, there is no real need to write to disk, so why waste io? Another (small) advantage to memcache via php config, assuming you use a fastcgi setup, is that the php process will maintain its connection to memcache which means a little less latency per page. As for things you don't want lost like a shopping cart, they should not be in session. Yeah, an item count and total cost, ect sure. But why store the whole cart and load it every page load when its only needed when you modify or view it? Session should only be used for data you can recover from another source if lost (ie, auth credentials when they log back in) and is needed most every page load. Using another DB is a new one on me... if you have enough threads configured for your hardware and don't lock other tables with the queries for your sessions why would it penalize anything? It seems to me that two processes would fight each other for resources where one would prioritize. I'm honestly unsure, I don't know a whole hell of a lot about the internal workings of mysql.
Definitely on the right track. Might be a good idea to implement type hinting though, so the constructor won't allow a non-mysqli object to be passed. Something like: function __construct(MySQLi $mysqli)
I used to go the singleton route as well, but with larger applications, the long-term benefits of dependency injection make the initial hassle worth it.
I've been using it successfully for around ten years. I have no complaints about it. 
This seems like a better idea to me. Is there a specific reason the data has to be housed in Access? Are there other dependent systems on the Access data or something?
I must say, 99.999% of the time it's not worth the extra effort to support multiple database vendors. Most applications don't change from one database type to another. If they do, the work of changing your db interface code is generally much less than you'll do creating an interface that is database agnostic. 
Look into a dependency injection framework, like Symfony's.
[How much is enough?](http://imgur.com/d35rJ)
Yeah, our entire accounting system is built on Access... so unless we want to migrate our entire business to another database engine we're stuck with it for now :S
Good, now stop using mysqli and change to PDO.
I'm using dreamweaver at the moment, in it's coder view. I like it overall, but it doesn't feel as complete as IDEs for other languages. 
Actually, you can convert MDB files to SQL and then build a script to import them into your new system. That gives you useable data to test your system with. Then when it's all ready you come in on a saturday and run the whole thing again so monday morning everyone is running with the latest live data.
&gt;However, your solution (‚Äúmanually‚Äù extending the session) is unnecessary since you can achieve the same by configuration options. You didn't read the comment well enough. As I explained in the comment, the setcookie is only for the ones which has clicked "remember me". The session for that particular user would last for 24 hours, where-as the users which didn't click "remember me" and closed down their browsers would have lost their session. The example wasn't about extending the lifetime across the board. 
Maybe not, but they might change their internal structure, which is why it is a good idea to only work with the data, rather than interfacing with the database directly through SQL queries.
Can you link / synchronise the Access db with a MS SQL Server instance, and then query that instead?
The problem is that if he's doing a mysql specific implementation, mainly with the mysqli class used bare, then the dependency injection he's implemented is mostly for naught, because there isn't another abstracted from of the mysqli class he could usefully substitute.
Is the hostname being re-written by chance during the redirect? If your start a session on "www.website.com" and then you get redirected to "website.com", it might be the same site, but you may not carry over the session depending on how the cookie was set. 
oke i kind of found something out myself: it doesnt work for me using chrome or safari on a mac but when my bro goes there on his windows pc using IE it does work:S, however when he uses chrome on his pc it doent work either. so it only seems to work on IE. what kind of nonsense is that?
Is it possible your browser is rejecting all cookies? The session id is typically stored in a cookie by default.
Maybe a caching issue, somehow? What if you do incognito mode?
oke, i had it as: header('Location: http://domainname.com/file2.php') now i changed it too: header('Location: http://www.domainname.com/file2.php') and it works! but i dont understand how and why? could you please explain? thx a lot btw:D
I would strongly suggest going with your own suggestion of building an API in front of your Access DB like you suggested. Just make a basic REST API (google, you'll find some articles on it) and hide the Access DB in there. When everything is going smoothly you can take a little time coding a change-over, so the API is rocking MySQL or Mongo, or whatever the hell. Push that code live along with a quick data conversion script (they're out there) to MySQL, so the same API is being used but all of a sudden your API just got a shitload faster. From CI use the Rest Client to push and pull, and your API can be built with anything, but potentially the CI Rest Server.
Using another database - not necessarily process, but another database instance altogether ("schema", in postgresql parlance). It simply makes it easier to move away to different hardware if you need to, and segment the credentials such that the session-writing database connection only has access to a limited amount of stuff. Being able to push session database on to its own partition (or eventually off to another box altogether) is useful. If you're using memcached or redis or whatever, you're *already* using a separate database for session data anyway. 
Though you're not supposed to, it is relatively safe to do header('Location: /file2.php'); Sessions are a type of cookie, and cookies are generally set per-domain. Adding or removing the sub-domain (in this case www) can make it so there is a different session between the domains. There are ways to rectify this though, that involve messing with the session cookie. Cookies are a bit.. strange. So not everything I said here is 100% correct.
Sessions (by default) only work on one domain -- 'domainname.com' and 'www.domainname.com' are technically two different websites! So your session only existed on 'www.domainname.com' but not 'domainname.com'. Many websites force the users to use either 'www.' or not with redirects to avoid this problem.
filemtime does a system call to stat as the error tells you, what you can do is use the HTTP header (if sent): Last-Modified instead.
Well, it's mostly a security feature. For example, let's go back a few years: You could get (and maybe still CAN) subdomain.angelfire.com. It would be a pretty big security issue if subdomain.* could read angelfire.com's cookies. However, not so much the other way around. A cookie set on www.domain would be accessible by domain but a cookie set on domain would not be accessible by www.domain unless the cookie was explicitly set to allow such things. For best results with sessions between your main domain and www, I recommend setting up your site in such a way so that a person is either always on www.domain.com or domain.com (ie: no www forwards to www or www forwards to no www).
Many people use the .htaccess file to force the "www." (or remove it). If you're not familiar with .htaccess, it's a rules file that Apache uses. You can put some logic in the .htaccess file that will see if the host has the "www.", and if not it'll automatically redirect you to the www. version of the domain. We typically prefer to do this in .htaccess because it applies to every file and every script on the server. It really is the best solution for forcing the "www." to be there all the time. See the top reply on [this StackExchange post](http://stackoverflow.com/questions/4916222/htaccess-how-to-force-www-in-a-generic-way) to see what to put in your .htaccess file. MAKE SURE that you have 'mod_rewrite' enabled, and make sure that above that code in the .htaccess file you have the directive "RewriteEngine on". Edit: all this assumes you're using the Apache web server.
Unless you're doing something crazy like [establishing a side connection in your local script to the remote server](http://php.net/manual/en/function.ssh2-connect.php) and executing it as some sort of remote shell command, `filemtime()` won't work on remote hosts. On your local laptop - the [`$http_response_header`](http://us2.php.net/manual/en/reserved.variables.httpresponseheader.php) magic array - if used immediately after something like a `file_get_contents()` call - should show all new incoming headers used in that call, including the `Last-Modified` header if the remote server provided it. You can also just use the [`Curl`](http://us2.php.net/manual/en/book.curl.php) library from your local system to handle the whole thing.
 $currentMember = unserialize($_SESSION['currentMember']); what is the contents of $currentMember after that statement executes? It's coughing up an error because that object is non-existent.
Im sorry won't do that again. 
I fixed that and it still gets the same error. 
Have you tried print_r($_SESSION) to see what keys are set in the session variable? Is 'currentmember' even there? Is it a real instance of class person? Is it being set in the first place? Is the problem with a) creating the object, b) setting the session, c) retrieving the session, or d) unserializing the object? You need more information, and if you want help here you need to give us more than "I tried that and it didn't work." What else are you trying? I would put print_r statements everywhere. In your login routine I'd print_r($currentmember) before it's being set to the session, then I'd print_r($_SESSION) to see what got put in there. And then in your other script I'd print_r($_SESSION) before trying to access it again to see if the session is alive and real.
I'll try that and will tell the results. 
Please put 4 spaces in front of all of your code so that it all gets formatted correctly. It's really difficult to mentally parse the parts of your code that are being formatted into paragraphs.
You can get a local dev server running with less than 10 lines of code. And yes, I realize that it's mostly easier to deploy (though there are some hosts that make it fantastically simple for Python), but the author here is saying that it's "easier to get started with", telling me that he obviously doesn't know his shit.
Even with sessions it can be done. It just involves doing something like: `setcookie(session_name(),session_id(),$expirationTimestamp,'/','domain.tld',false,true)` Which I was being too lazy to type out.
setcookie() is sending a cookie through the http headers to be stored in the user's browser. You're thinking of [session_set_cookie_params](http://php.net/manual/en/function.session-set-cookie-params.php), which must be called before session_start. To reuse a session in this way on another child domain, the other domain must use the same session storage area. The session cookie sent to the browser is merely an identifier to the server's file which contains the information. Cookies set using setcookie() can be viewed on any child domain as long as the parent domain is used in the domain parameter.
The HTTP specification requires that you place the entire path in the Location header. 
For a total beginner that doesn't know what they are doing, PHP is easier to set up and start using. 
Depends 100% on your environment and what you're trying to do.
When placing print_r after attribute setting code, all the attributes seem fine except the connection attribute is null. When doing print_r on $_SESSION variable I get the following "Array ( [currentMember] =&gt; O:6:"person":5:{s:17:"personfirstname";s:5:"Wilma";s:16:"personlastname";s:10:"Flintstone";s:20:"personemailaddress";s:20:"wil ma\@flintstone.com";s:16:"personmemberid";s:1:"1";s:10:"connection";N;} ) In the veiwaccounts.php script before the unserialization when I print_r $currentMember I get nothing. in that same file when I print_r currentMember after unserialization I get nothing. When I print_r $_SESSION before unserialization I get "Array() Print_r $_SESSION after unserialization I get "Array()" 
Uh huh.
It's worth noting that you can just store the object directly in the session and let PHP serialize/deserialize it for you. It will handle it automatically when the request starts and ends $currentMember = $_SESSION['currentMember']; $_SESSION['currentMember'] = $currentMember;
I wish I could upvote this more than once. I've been crusading on StackOverflow for the last 18 months to get the users there to stop using the mysql_* functions.
Some things to try: Make sure your session_start() happens before everything else in the file. Make sure the two requests are happening on the same domain (ie, "www.domain.com" is different than "domain.com", and $_SESSION will *not* transfer between the two).
About time. Learners googling for PHP &amp; MySQL tutorials are still getting directed to ancient (and even some new) tutorials showing awful `mysql_connect() or die()`-type code. 
I agree. I was mostly just speaking regarding a trap I used to fall into. I'd write these model libraries that were completely database agnostic. So I'd have a config file which specified a database type (mysql, mssql, postgres, oracle, etc). Then the code would be something like (simplified): $user = new User($uid); // Loads user from DB echo $user-&gt;name; // prints "John" $user-&gt;name = 'Frank'; $user-&gt;save(); // User name is now frank On the backend, the model code would know what type of database to use. If you switched from mysql to oracle it'd just be a matter of changing a string in the config file from 'mysql' to 'oracle' and everything else would "just work". It was neat, basically creating doctrine-like modeling before doctorine was around. It was also a waste of time. I think only once did I ever need to change database types. 
This one doesn't look too shabby: http://net.tutsplus.com/tutorials/php/why-you-should-be-using-phps-pdo-for-database-access/
Make sure you call `session_start` on every page and sessions really shouldn't be a problem. You could try using cookies.
What you're trying to do should just work. Give us some code and we'll be able to see if something is wrong.
Can we just get it over with and encourage people to use an ORM rather than another extension?
Dreamweaver works fairly well. 
It now has it's own [GitHub](https://github.com/JosephLenton/PHP-Error). The name has changed to better reflect what it does, but apart from that it's mostly extra options, some better errors, and bug fixes.
When you "isolate relevant code" you ultimately can be ignoring hard to spot issues that may bite you. If you save that code into two standalone files, does it work? I'm running PHP 5.3.8 and Apache 2.2.21 with success.
To be fair, explode runs faster than split, so in the real world, you would want to be using explode.
Can you remove any passwords/confidential info and paste your code into pastebin for us to look at? The page that sets it and the page that tries to display it.
[Page 1](http://pastebin.com/kZgGu7Ha) [Page 2](http://pastebin.com/8yTGGZ81) Obviously these are rough, half-done pages with CSS and everything.
True, thanks for noting that... It didn't become apparent until after i was about 1/4 of the way down the list, got too excited too fast.. Still some gems in there, good starting points...
Gotta give you props for that reference.
Actually he's right. Variables in queries must be escaped, no matter where they come from, to prevent breaking queries. Parameterized queries simply eliminate the manual aspect and hence another point of failure. Injection prevention is a side effect of doing things properly (prepare or real_escape).
Some people, including myself, don't like ORMs from a purely architectural point of view, as normally ORMs are implemented in such a way that they violate pretty much every guiding principle of object oriented programming. Also, if you invest at least some time learning SQL, it is a nice and easy to use domain specific language. No need to put something on top of it.
Is this a lib or something custom of yours?
New log level then? E_DEPRECIATION
Absolutely not. I don't want sub-optimal database code slowing my app down. And I don't want to spend hours shoehorning simple things into ORMs' limitations with shims and callbacks and other crap that makes code harder to follow than ever.
You should try changing the session.save_path in your php config to a different folder. Perhaps your sessions are getting wiped for some reason, as there doesn't appear to be anything wrong with the code.
benchmarks are stupid; pick the best tool for *your* needs (and knowledge)! _Premature optimization is the root of all evil_
Check your php.ini on the remote server to make sure the following aren't happening. * Safe Mode * glob as a disabled_function Check your various logs for errors. **Nevermind, answer up there ^**
all file names are case sensitive in linux (and most other OS's except windows)
For example, if you have a db class like this: class Db { public function __construct() { // (...) } public function query ($sql, [...]) { // (...) } } You can link it to the users class by providing the database object to the user class, like: class User { private $db; public function __construct(Db $db) { $this-&gt;db = $db; } public function add_user ( $username, $password ) { $this-&gt;db-&gt;query('insert into users (username, password) values (:user, :pass)', $username, $password); } } **EDIT:** I suggest you to take a look on [autoloading](http://php.net/manual/en/language.oop5.autoload.php) classes in PHP
exactly. [read this](http://blog.astrumfutura.com/2010/02/php-framework-benchmarks-entertaining-but-ultimately-useless/)
It is something I've built. I put it on GitHub just yesterday [here](https://github.com/JosephLenton/PHP-Error).
If there was one, nice, best-practice, clearly-best, simple method of doing this kind of thing, then that knowledge would already be out there and used by every framework and CMS.
There's a great tutorial on PDO here: http://www.phpro.org/tutorials/Introduction-to-PHP-PDO.html Building your own stuff is a great way to learn, but for the love of god use a framework after that. Kohana (http://kohanaframework.org/) is my personal favorite, it's basically just an advanced autoloader, with a bunch of really usefull classes.. It comes with an ORM for database stuff.
And it's clear and you don't really have a clue what you're talking about, and is only out to pick a fight. I have 12 years of web development experience under my belt.
http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers I would recommend to avoid "tutorial sites: like nettuts and w3schools ..
As long as you *truly* create it and use it as OOP it will be *very* nice and easy to read. A lot of people use classes and objects but still program in a procedural manner and think they're doing OOP. It looks ugly though.
$n is always 0 Why? $n++ is the [post-decrement](http://php.net/manual/en/language.operators.increment.php) operator, which returns $n (0) and then increments it (1). So $n can never equal $result-1 if $result is also greater than 1.
 $db = new PDO('mysql:dbname=mydb;host=localhost','admin','root'); $statement = $db-&gt;prepare('SELECT breed,weight FROM dogs WHERE daysInKennel &gt; ? AND age &lt; ?'); $statement-&gt;execute(array(1=&gt;$days,2=&gt;$age)); Safely do that with the original mysql functions while assuming `$days` and `$age` are user input. Then do it in under 3 lines.
It's just easier to switch between various languages by keeping things standard: $n = $n+1 Although my suggestion wasn't an improvement.
I would figure ++n or n++ etc is the standard since that comes from C. :S
Could you provide the entire scope of your script? We'd like to know what $result contains. Edit: Also, don't worry about not being a coder. We all start somewhere and /r/php is a nice place. :)
I agree with this - but what you really want is benchmarks, so here's one: http://sonicframework.com/benchmarks 
I dont have an opinion on the matter but: http://stackoverflow.com/questions/971312/why-avoid-increment-and-decrement-operators-in-javascript Its javascript because I was searching earlier due to a bug that we had found in some code because of the increment being used inline. Some languages it is allowed and some it isnt, I suppose it just gets incredibly confusing to do it. Edit: Very coincidental that I still had that tab open whilst reading this though.
Why avoid nettuts? I thought they were ok?
While the site is "up to date" (unlike others), the code quality is low, they focus too much on latest hype and they are filtering negative feedback in articles.
I don't know, but line #46 appears malformed.
Why?
Where it is the source of many off by one errors. Using ++ is stupid because: #1.) Very few programmers are aware of exactly how it executes #2.) Even if _you_ understand and think you can use them correctly, that doesn't change the fact that most who read your code are going to be in category #1.) and will likely make changes in ignorance of how it's executing. Also, even in C there are circumstances where it's execution is Undefined If you're coding because you like tricky or 'clever' constructs, continue to use ++ If you're coding because you wan to write good, maintainable software, avoid them.
 if(count($results) &gt; 2){ $last = array_pop($results); echo implode(', ',$results); echo ", and $last"; echo "\n"; } elseif(count($results) == 2){ echo implode(' and ',$results); echo "\n"; } elseif(count($results) == 1){ echo array_pop($results); echo "\n"; } else { echo "No results."; } 
Try using the mysql function NOW() instead of the PHP time function. Also you have a stray single quote. $query = "INSERT INTO customer_transaction (customer_id, order_id, amount, date_added) VALUES ('{$userName}', 0, 10.0000, NOW())"; As a precaution make sure you are escaping $userName before putting it into the query. 
Thank you a bunch! It's always silly things...
and you can implement them in a mixed procedural/functional way just fine. They don't have to be implemented as classes and objects. However I still don't see how this relates your idea that MVC *has* to be OO.
Actually just to double check is $userName an int? In your table customer_id is set to an int. Also you should make sure you are using mysqli or PDO to work with your database.
userName is an int, and I'm really new to PHP, why would you recommend these?
then stop feeding the troll...
I sure hope to god that you're sanitizing $userName. Look into [prepared statements](http://php.net/manual/en/mysqli.quickstart.prepared-statements.php).
The mysql_* functions are deprecated. They leave you open to all sorts of SQL Injection attacks. It's best to get out of the habit of creating SQL queries via concatenating strings now. Otherwise you'll just end up rewriting it correctly later, or worse losing your data. Check out references on using Mysqli or PDO to properly bind params. 
Is `$userName` intended to be a string or an integer? According to `customer_id` it looks like an integer but `$userName` seems to indicate a string. The value for `order_id` does/should not need quotes around it since it should be insert as an integer. The value for `amount` is missing the ending single quote and it may not need either in the first place. Also, for `date_added` do like jimdoescode said and use the mysql NOW() function.
I can't really comment as to how to do it in opencart. There could be a function call or something. I'm not real familiar with opencart. If it were in regular PHP though you could just do this: $userId = $this-&gt;request-&gt;get['referred']; Then use userId in a sql query.
A lot of his opinions seem dated. Most ORM implementations allow for a shallow fetch versus a saturated fetch. Also, his argument about muddled abstraction is valid, but only if it is your intention to abstract the implementation details completely. ORM is not an option for anything that needs to scale (e.g. live on more than one database), but for OPs needs, it's just fine. You dont need to develop everything with the intention of scaling it up to run on a cluster. I would argue that if you're getting that big, you should reconsider using PHP in your data access stack.
Apache has one built in, [mod_autoindex](http://httpd.apache.org/docs/2.2/mod/mod_autoindex.html). No need to use any PHP app if all you're doing is making contents of a folder available for download locally.
You can always use an MySQL error reporting function to get the error of the last query: [mysql_error()](http://us2.php.net/mysql_error) (deprecated), [mysqli_error()](http://us2.php.net/manual/en/mysqli.error.php), or [PDO:errorInfo()](http://us2.php.net/manual/en/pdo.errorinfo.php).
Well, you could store your variables in a db, flat file, or choose from other popular voodoo magics like sessions and cookies.
yeah close the quote after 10.0000
Just because a benchmark doesn't test every aspect of a system doesn't mean it's useless. As long as it states clearly what it is testing and how it went about it (aka published source, specs, data, etc), then you're free to compare and try it for yourself, correct any issues with the tests, and use it to hopefully improve the under-performing contestants. A framework is something that is responsible for balancing a number of different priorities, and to a website's visitors, speed is a high priority. And satisfying what a visitor wants should be pretty high up on the list of a site owner's priorities. As a framework developer, I find it hard to accept that we can't be more creative in coming up with better ways to balance developer productivity, security, and speed of execution.
this should be the first step. After that print out the query string and try it with another SQL editor/software ( phpmyadmin / navicat etc. )
ugh. Since I don't know what you wan to create I just throw this Idea: Access information on a different server, from a different host should be done with as interface ( not the OO interface ). On the server create a php file which can be called with parameters and returns the wanted information as XML or JSON. On the client use curl to call the URL+parameters. Use the return payload to work with. This way you have a "standard" way to access and receive information.
doesn't the fact that it's worked with the barest code mean that the variables are at least writing?
That's simply not true any more with frameworks such as Flask
 you declare the integer i and set it to 0; you declare an integer array arr with 2 slots from 0-1; you assign to arr[0] the pre-incremented value of i; arr[0] = 0; i = 1
Okay, I've figured out the problem, but I don't have a solution: I'm trying to save a local variable into a $_SESSION variable, but I guess since the local variable clears when the page changes, the global one goes null.
Unsurprisingly, that article/post was met with wide disagreement when it was published last year. My opinion is that it sounds like he takes issue with the ActiveRecord ORM pattern as a lot of his issues do not apply to other patterns such as Unit Of Work.
If used correctly, the mysql_ functions are fine. The issue isn't that they are buggy or broken, it's about usability; that it's fiddly to write code which is always bug free. So deprecating them shouldn't be done when the code does work. Personally I think more should be done on PHP.net to scare off potential users. Currently if you lookup a MySQL function, you get a suggested alternative at the top. It would be better to use more colourful language, such as bluntly stating that they are dangerous to use, and should be avoided.
Well, you're clearly missing a quote after the 10.0000
How do you figure? The code itself looked well written.
I thought it was at least partly about efficiency.
 - use of global state - tight coupling - not implementing MVC
Have you seen any PHP ORMs implementing UoW? Hell .. there is only one that even implements something resembling DataMapper pattern (oddly enough, that's not "DataMapper ORM", which actually is another AR implementation ), which is Doctrine2. That one, IMHO, is the lesser of evils. The main issue with ORMs is that they create technical dept, which usually is not recognized immediately, and thus, is left unmitigated far too long. 
Actually i would go with name OPT (orm-presenter-template .. a bastardization of MVP pattern).
Oh, that sucks. Well maybe we could at least lighten that mauve colour. Or maybe reddit could integrate it site-wide?
&gt;Or maybe reddit could integrate it site-wide? Nope. Reddit is designed to be fairly lightweight on the whole Javascript thing. I agree, though. Syntax highlighting would be nice. For most things, the /r/php code style works fine, but yes, there are times when syntax highlighting would help.
I would recommend you to use prepared statements - those are faster and you can't have mysql injections. For debugging those queries: I have in my my.cnf: log = /tmp/mysqld.sql So I can look inside which queries get executed - either I see the error there directly or I run it in phpmyadmin so that it can point me the error.
It could probably be integrated into RES, though, since that includes live previews and other neat stuff.
I've heard the new extensions are ever so slightly slower. There are also another commenter here that says prepared statements is about 3 times slower than calling quote by hand, for most non-large queries.
Whenever you are putting a string in another string, for example text into an html page or data into a mysql query, you want to make sure that every possible combination of characters will work in the string. For example, if your query is "insert into foo values ('$a')" and I put in to your form the string "brian's fish sticks" your query now reads "insert into foo values ('brian's fish sticks')" which is an invalid syntax because of that apostrophe there. Worse, I can manipulate your query to do all kinds of horrible things like retrieve or delete records from your database - this is how high profile hacks go. Or, take another situation, lets say I have a page, it reads like this: &lt;html&gt;&lt;body&gt;&lt;h1&gt;Your name: &lt;?php echo($yourname); ?&gt;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; and me the user puts into a field that ends up being $yourname the text: &lt;script&gt;alert("hello");&lt;/script&gt;. Now, when this page renders, I the user managed to make it run javascript. This is particularly bad if I put some javascript to send the users current session to my server - now every one of your users that visits my script on your site, I can log into their account. The solutions to both of these problems is to always escape your text. You run the text for mysql through mysql_real_escape_string() and the text for html through htmlspecialchars(). Or, better, use mysqli or pdo with prepared statments, they let you run queries like this: query("insert into foo values (?)", $a); and pdo/mysqli do all the work to put $a in the appropriate part of the query on the db server rather than through php.
I agree on transactions (and I do use mysqli, I was just pointing out that the query could be safety done using mysql using the constraints provided), but looping inserts? No, it's faster to do a single mass insert: insert into article_topic values (2, 15), (2, 18), (3, 21), (4, 55);
Inspect your cookies using something like [Chrome Edit This Cookie Extension](https://chrome.google.com/webstore/detail/fngmhnnpilhplaeedifhccceomclgfbg) to ensure the same cookie with the same session ID value is being passed between pages. If this cookie either isn't being set or isn't being saved by your browser and passed back on the next request, this will make it look like sessions are not working, even though they are and it's just the cookie part that is not working. If cookies don't work, then no method of maintaining state will work (unless you're gonna get all crazy and try doing that [browser fingerprinting stuff](https://panopticlick.eff.org/), which... you're not).
Yes and no. MVC is rooted in object oriented principles. But you do not need classes or objects to write object oriented code. And same is true vice versa. Not all code, which has been written with classes, is object oriented. Most glaring example would be singleton pattern.
At this stage, the only editors I consider are PHPStorm and vim.
 for i in `seq 1 1000`; do mysql -u root --password=bad -h 127.0.0.1 2&gt;/dev/null; done Running that on Ubuntu 11.10 with MySQL 5.1.62 I was able to login within seconds. Ugh...
I don't even hear the code anymore. All I hear is blonde, brunette, red-head.
No mention of MySQL 5.1.62, anyone got any idea if it's vulnerable?
Fair enough, but I checked two versions on two OSs that the article said were affected, and it didn't work.
Looks like it tries to emulate all of the features that caused me to avoid working with ASP3 and ASP.NET.
could not reproduce version 5.0 any steps needed to reproduce this bug? the article doesn't mention it
I am on Ubuntu 10.04, same version of MySQL, but it doesn't succeed.
STart at the beginning. OOP is an advanced topic that most tutorials don't teach right away. Start by learning procedural code, and get confident with that. And to make sure that your OOP styles are good, start learning about the MVC pattern as you are working on learning OOP PHP.
Root is defaulted to local only (and it should always be). But if you create a user account, I think the 'user'@'%' is pretty standard..
This code is wrong on a few points. * The cost parameter must be two-digits. If someone passes a single digit or something outside the range 04 - 31, it will break. * The salt should be 22 characters although crypt seems to just ignore extra. * Your code doesn't validate that $salt actually meets the blowfish requirements.
I can confirm too, didn't take more than 5 seconds each of my attempts... for i in `seq 1 1000`; do mysql -u root --password=bad -h 127.0.0.1 2&gt;/dev/null; done uname -a Linux ubuntu 3.0.0-20-generic #34-Ubuntu SMP Tue May 1 17:24:39 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux +-------------------------+ | version() | +-------------------------+ | 5.1.62-0ubuntu0.11.10.1 | +-------------------------+ 
I don't usually dig into this kind of posts but I'm bored. You say: * "I don't think there would be a lot more to do" * "I'm not sure if there's an easy way to fix this" * "Instead of redoing it, it might be simpler to just..." * "get this done for $500 or less" * "So, hopefully I'll have additional projects for you at a more reasonable rate" I say: Ha ha!!
Actually, none of those are flaws. - If the developer does not pass a two-digit number - it fails. - The extra IV characters are ignored and never used again. - The only $salt that is passed back in is the full hash. If the wrong hash is given then it fails just as it should.
where's the globals? it's not quite done how I might have done it, but it's certainly a better starting point than much of the php example code that's found in random searching.
Way to take what I said out of context.
And precisely how does one detect failure versus success in your *flawless* solution?
No, really, this sounds like every Craigslist Gig Scam I've ever read.
$500 for under 20 hours of work. At minimum that's $25/hour. Not great, but it's hardly a scam. 
I'm not sure, but it's highly unlikely that it would take over 20 hours. The system is built. It's just a matter of figuring out how it works and adding a couple of things (like these checks through the Checkout API). In my professional opinion, I'd estimate 8 to 12 hours. If I were a real developer that's how long it would take me. That comes out closer to $40/hour. 
I also thought that crypt should have returned false. However, I'm assuming they worried about `false == ''` comparisons by new PHP developers. So, I have no intention of changing the default PHP behavior since this still works fine. You are however welcome to make the padding change: '$2a$' . str_pad($iterations, 2, "0", STR_PAD_LEFT) . '$'
No, they're not. Are you a developer or an English teacher?
A system that's already built is often HARDER to change. That's just the way it is - sorting out someone else's mess is rarely easy. I'm interested to know why the other developer bailed. I've never willingly given up on a project unless there was something seriously wrong with the contract or the personalities involved. You have a contract with this other developer, right?
Global state, not `global` variables. Here, watch this: http://www.youtube.com/watch?v=-FRm3VPhseI
Are you asking for help or looking for a fight? Would you trust me, as a professional computer programmer, to give you an estimate on how long it takes a line cook to make a 3 course meal?
If it's your job to manage cooks, you'd probably know a thing or two about how long it takes them to do certain tasks.
A beeping sound that can be turned off is less effective than a small label maker creating a printout that can follow the meal through production. See [principles of kanban](http://en.wikipedia.org/wiki/Kanban), which is often used in fast food chains and restaurants.
They need a sound alert to know that an order was received, otherwise they wouldn't bother looking at the printout. 
No repro on 5.1.61 Ubuntu 10.04.
Yeah, which is why I'm leaving plenty of room for excess. I believe the project should take 8 to 12 hours. If it goes over 20 hours, then that's really the fault of the developer. There's no reason for it.
I don't mean to pick on OP, but this really highlights one of the core problems: developer ignorance and making false assumptions. Cryptography is complicated and hard, and you really need to understand exactly what functions and methods you're using before you rely on them to secure your data. Blowfish is a two-way encryption method. What you're referring to here is bcrypt, a one-way hashing function which uses the blowfish cipher. There's a big difference between them which needs to be understood. Your wrapper is flawed in a couple ways. By using md5() on the salt value, you're significantly reducing the key space. Valid salts should be in the range [./0-9A-Za-z]. The salt is really a 128-bit key encoded using a system similar to, but isn't, base64. It needs to be generated in a secure manner. The other issue has been pointed out already: bcrypt requires a 2-digit cost factor, zero-padded between 4 and 31. Failure to properly pad this value causes crypt() to fall back to the insecure DES hash (contrary to what the documentation says. See [bug #61852](https://bugs.php.net/bug.php?id=61852)). Your wrapper fails to properly detect failure conditions, which could lead to unexpected behavior.
Documentation is wrong, you can't rely on that behavior. The crypt() function will return a DES hash in these cases. This can cause accidental success, in that the hashing algorithm will be the weaker DES instead of bcrypt. I keep pointing this out because it's VERY impoertant to understand how the crypt() function behaves if you intend to use it to generate secure password hashes.
&gt; One of the nice things about PHP's looseness is how forgiving it can be and you can get stuff done quickly as a result. Usually it just slows you down. For instance in Python if you try to do `"foo" / 2` it will raise an error because it's a very silly thing to do. You see the error, find out why you were trying to do something silly and fixes it. In a language that just keeps going on, you waste a ton of time trying to find why it doesn't work because the symptom you see is the wrong result returned very far from the site of the actual problem because the interpreter just went past the problem happily. A compromise that is spreading now in some languages is to let you declare that your code is "strict" at the start of your source file so you can opt-in not being let doing silly things.
It's fixed in that anything outside of the range 04-31 returns *0 as expected ($2a$03$... returns *0). Omitting the zero still falls back to DES.
Article never mentioned OS's or Linux distros by name. Each distro package maintainer may have their own methods of building the package for release for their own OS, and that is what vulnerability seems to hinge on.
Should brute-force tests be required (or at least industry standard) now for any application of any sort? If it fails within just ~~128~~ 256 tries, it obviously fails. I for one will be including such tests from now on. Call me paranoid, but this...
As you're discovering, implementing crypto isn't easy and you need to be very familiar with the issues (given, PHP doesn't make this any easier by layering it's own bugs on top of it all). There's a portable, tested and reviewed library for implementing safe password hashes in PHP including bcrypt and decent fallbacks if bcrypt is not available (&lt;5.3 or suhosin) http://www.openwall.com/phpass/ It ensures that all the inputs are correct and the input that is meant to be random is random, even when certain extensions aren't available. Also, just a little nitpick - blowfish is an encryption algorithim, bcrypt is an adaptive hashing algorithim that's based on certain parts of the blowfish cipher.
There is the /r/phphelp subreddit, but it doesn't look too frequented. You're entitled to ask questions or ask for help anyway.
According to the article, the actual vulnerability occurs in about 1/256 attempts. So your 128 attempt automated brute force would still miss this half of the time (I think. I'm not really up on my probability. Certainly not a 100% guarantee to catch this.)
&gt; This does not seem legit. I think I'll take MariaDB/MySQL's word on it over yours and your single test case. No offense.
Oh ok, sorry about that, now I know for next time :D
I am very sorry I am terrible at explaining these things, I have a post [here](http://www.reddit.com/r/arduino/comments/un5xs/arduino_php_led_color_picker/) that explains it. But don't spend much time looking at it, I don't know too much about programming PHP and I can only imagine how frustrating this is for you haha.
I probably can't help, just trying to understand the situation... So someone makes an order, and this goes into your db somewhere with some kind of identifier as you hand it off to Google, and then you want to wait X mins before sending some XML to see if the order got paid for correctly? What initiates this API call? (And do you have cURL installed with SSL support? This is probably going to be a requirement.) And then based on the order payment/fulfillment status, you need some UI changes on the kitchen screen to prevent making the same order twice or making an order that didn't get paid for?
Why is this in /r/PHP?
Just use sha-2 and lots of rounds. Problem solved.
Can someone tell me if this is a good way to hash passwords for website users? Given a password ($password), I do the following: function generateKey($input) { // split password into 4 character chunks $chunks = str_split($input, 4); $key = array(); // generate randon number chunks foreach ($chunks as $chunk) { $key[] = rand().$chunk.rand(); } // // join random chunks together $key = implode('', $key); // hash the chunk $key = hash('whirlpool', $key.time()); // return password key return $key; } Generate a key from the password. $pKey = generateKey($password); Then, hash the password, like so: function hashPassword($password, $key) { $keyChunks = str_split($key, 4); $masterKey = array(); for ($i = 1; $i &lt;= 32; $i++) { if ($i % 2 === 0) { $masterKey[] = array_pop($keyChunks); } else { $masterKey[] = array_shift($keyChunks); } } return hash_hmac('whirlpool', $password, implode('', $masterKey)); } $passwordHash = hashPassword($password, $pKey); I store the password key in the database along side the password hash as the 'key1' column. I also have another column 'key2' that I use for other things.
&gt;At least use Blowfish for password hashing Bcrypt, not blowfish. Bcrypt is an adaptive cryptographic hash function which is based on blowfish, built specifically for handling passwords. Blowfish, on the other hand, is a general-purpose algorithm. While one is based on the other, the two are not the same. 
Blowfish is not a hashing algorithm. It's symmetric, which implies it is reversible. Encrypted passwords typically should not be reversible. Salted SHA2 family algorithms are fine, and pass PCI compliance for storing cardholder data.
You are probably better off just waiting for a patch, and - as stated - restricting access to the local machine. The time it would take to do the check for every program's execution wouldn't be worth it, especially for large systems. And especially if your programs are meant to be used... I mean, are you just going to turn off every MySQL-using program you've written? What then?
The best way to learn, in my opinion, is to actually build it yourself, rather than taking one that's already built and trying to figure out how it works. It's a much more enriching experience, and you learn how to think critically and problem solve that way. EDIT: I understand that everyone learns differently, but everyone that I've recommended this method to (I usually recommend creating your own CMS/blog or forum) has found it to be extremely helpful.
Build it yourself, that is the best way for you to learn this.
Cheers, I did feel the need to work on phpass when I first came across it (e.g. bring it up to current coding standards, namespaces etc...) but then I just bundled it into a helper on my project and forgot about it.
AJAX is running on the kitchen screen webpage that continually runs the scripts necessary. So, it could theoretically check the database for new orders, then send an API call to see if the new orders were paid for. 
What attack exists against `crypt` MD5??? All the attacks against `md5` and `sha1` that I've seen have required the original input first (such as pre-image attacks, or suffix based attacks). With a password hash, that's not the case... The only vulnerability that exists for `crypt md5` is brute forcing, which is the same for `bcrypt` and `scrypt`, depending on how you setup the cost parameters...
ahh, benchmarks from framework developers are rarely reliable... would you publish benchmarks that painted your framework in a bad light? better off using an independent measure of performance
I'm admitting I'm not good at development. I am good at knowing what it takes to do development work. I make a living giving estimates.
I don't know why this is getting so many upvotes, the code sample is bad information!
MD5 as a digest algorithim is cryptographically broken. But yes, as far as I understand, there's not much likely to affect simple password hashing with MD5 besides the ability to brute force with ease. My post was using md5 as an example of an algorithm with many eyes over it, not specifically with passwords or crypt().
Use a library: http://stackoverflow.com/a/1581919
just...use...bcrypt. You are not a cryptography expert, so designing your own password scheme is a bad idea from the get go. Not being able to use rainbow tables means nothing when you can compute BILLIONS of hashes per second on COTS hardware, the barrier to brute forcing that used to be there isn't anymore. /thread
You don't need to force users to reset their passwords. When I've switched a website from one password encryption routine to another, I add a new column on the password/user table which indicates which encryption routine is in use. When a user logs in, the correct routine is used. When they authenticate using the old routine, you have the correct password as the user just submitted it to you, so you upgrade them to the new routine. The process is completely transparent to the user and slowly your passwords upgrade to the new routine in the database.
Cryptographic hashes, salted or not, are not "fine" unless you simply don't care about security. Every single thread here has a post about this, and everybody continues to ignore the issue. Cryptographic hashes such as the SHA-2 family are specifically designed to produce unique hashes for very large data sets as quickly as possible. The failure in using these hashes for passwords can be attributed mostly to the fact that hundreds of thousands of hashes can be calculated per second on commodity hardware. Cheap specialized circuits and GPU processing (say through Amazon EC2) make these hashes obsolete for password storage. Use an algorithm specifically designed by professional cryptographers for password storage, such as bcrypt, scrypt, or PBKDF2. Edit: ah, yes. The down votes make me wrong. Obviously md5 is the superior choice. WTF?
Probably won't have time until next month, but I plan on measuring memory usage and speed for a few different query types (fetch one, fetch all, etc), inserts/updates, table relations (ORM), batch updates, and clarity of code too. I'd like to compare Doctrine, Propel, and probably a few framework-specific ones too.
I enjoy looking through new Mustache forks, but ... What's the point of your include tag? [Mustache already has this ability natively](http://mustache.github.com/mustache.5.html). 
No. The system works. We've used it in the restaurant, however there are a few problems. They aren't even really bugs, just design faults that make customers screw up things. So, we need to address those issues.
Dammit, just use bcrypt! There are several threads asking the same or similar, and the advice is pretty much the same! Don't try to create your own method, you'll get it wrong. Bcrypt, pbkdf2, and even scrypt were designed by professional cryptographers specifically for password storage. They are well tested and widely recognized (except scrypt, which is new). A better question would be "how do I create a secure salt for bcrypt or pbkdf2?"
And you sound like a pretentious, argumentative fool.
Please, just stop using md5 anywhere near passwords. Nevermind that it's a small, terribly fast, and most-broken-in-its-class hashing algorithm, there are far better ones to use anyway.
&gt; ... md5( salt + password ) &gt; &gt; This will be secure enough for almost any normal to heavy-duty application ... Reading comprehension in our profession is seriously on the decline. Maybe it needs to be said more clearly: Salted MD5/SHA-1/SHA-2 is NOT EVER "secure enough." Use bcrypt. Or pbkdf2. Or even scrypt. Bcrypt is supported in modern versions of php by default via crypt(). There is NO reason not to use it other than ignorance.
The sordid details - http://wiki.hashphp.org/Storing_Passwords_Safely (skip to nr 4 if you're in a hurry). Feel free to ignore the usage of uppercase/exclamation marks in answers on php password hashing, it's become a bit of a trend I'm afraid..
 &lt;?php // The password from our user $password = "hello"; // Generate a 22 character salt $salt = substr(bin2hex(mcrypt_create_iv(32)), -22); // Construct the bcrypt format $saltstr = '$2a$10$' . $salt; $hash = crypt($password, $saltstr); // 60-char hash, just store this in the db echo $hash. "\n"; // User re-enters their password: $new_password = "hello"; // verify the new password to login: if (crypt($new_password, $hash) === $hash) { echo "Password verified!\n"; } else { echo "Bad username or password\n"; } Not the full amount of entropy possible for the salt, but even a 12 character salt should normally add enough entropy for what a salt *is designed to do*. The main point is that `mcrypt_create_iv` is a convenient source of good random data.
Why are you ditching it though? Too unwieldy?
Raw php and MySQL 
Because you should code everything from scratch every time you start a project, or else you're not doing real work! I've got no problems saying I don't remember how to use the built in `mysql_` crap in PHP. Why do I need to memorize that? For one, any project I work on is large enough to make using a framework of *any* kind a big help. And for two, I've got fuckin' Google.
Unless you're processing a lot of users and your site is high-profile / financial / business in some manner, then practically your method is probably fine. The biggest issue it has is brute-force, if someone wanted to find a password of a specific user of yours.
Shameless self plug: I'm the author the PHP Password Library, which supports bcrypt out of the box and will handle generating secure salts. https://github.com/rchouinard/phpass
If I can get someone to DDos the site, that means I have at least 1 visitor. Mission accomplished ;) haha! nah but I see how that could be a problem. I'll make sure to address that! thanks for the heads up! 
You should be using a password encryption algorithm, see my post (shameless plug) http://www.reddit.com/r/PHP/comments/uxxkr/using_bcrypt_to_store_passwords_bytes_in_the/
If he thought he was almost finished, guess what! He'd finish it. IN all likelihood, he's lowballing you and it's no where near finished.
Someone correct me if I'm wrong, but isn't session_register() deprecated? I believe you should use $_SESSION instead. So instead of this: session_register("myusername"); Use this: $_SESSION['myusername'] = $myusername;
As coders sometimes it is important to do and learn for yourself AS WELL AS use other libraries. Telling someone "just use x" doesn't really educate about the problem.
No, it was finished. Then there was a lot of time after that while we implemented it and tested it. It ran live for about a month. By the time we were ready for making adjustment, he was overloaded with some kind of non-development career.
&gt;Unless you're processing a lot of users and your site is high-profile / financial / business in some manner, then practically your method is probably fine. The bigger problem is that a lot of users share passwords across sites, so if the database is compromised and the credentials aren't properly encrypted, it has the potential to compromise users' accounts on other sites as well. That's why even small sites should use proper cryptographic hashing algorithms for passwords.
I'm going to repeat what somone else said for emphasis. Salt your passwords. 
Aside: line 20 better be PDO or mysqli code.
yes, please. Proper password storage is nothing new. LinkedIn just didn't do it properly. People should stop trying to re-invent the wheel; just implement proven solutions. "Somebody somewhere in the world has already solved your problem" -- John Suffolk
I used it for a few sites and found it slow. As much as I liked the editing on page, I'm much happier with Wordpress now
While I agree it's important to understand the concepts behind the libraries you implement, and that the best way to do this is to try your hand at writing something similar, password hashing is probably not the best time to try to do it yourself. 
&gt;what should I do to data before it goes into the DB? That depends on the data, obviously. But, for simply adding the data to the database you don't need to do anything to it, provided you are using prepared statements: $db = new PDO($dsn); $stmt = $db-&gt;prepare("INSERT INTO post (title, message, author) VALUES(?, ?, ?)"); $stmt-&gt;execute(array( $title, $message, $this-&gt;user-&gt;id )); Same example, but using named parameters: $db = new PDO($dsn); $stmt = $db-&gt;prepare("INSERT INTO post (title, message, author) VALUES(:title, :message, :author)"); $stmt-&gt;execute(array( 'title' =&gt; $title, 'message' =&gt; $message, 'author' =&gt; $this-&gt;user-&gt;id ));
The include tag allows you to include other templates in your template. Let say for example a page with header and footer {{%include header.html}} MY PAGE CONTENT HERE {{%include footer.html}} ThickMustache will include them in the rendered template 
Rather than muck around with PHP on OSX, I use virtual machines to test out different environments. I have multiple combinations of Centos and PHP as different virtual machines (You can use VirtualBox, Parallels, or VMware Fusion to set up the VMs). This way, I can simulate my production environment without having to mess up my host OS.
Simple answer is that I follow PSR-0 standards. That means one class per file and the directory structure mirrors the namespaces.
heh, that's a good point, but from experience that's a best case scenario! I'm working on a project right now for the US government that was put together by unpaid student interns. They wouldn't have been able to ask that question because they didn't know that they didn't know enough. Most of your learning takes place on the job...
Right... I'm still not seeing the difference in your way... Other than maybe giving the template the power to set its own includes rather than being provided them by the viewmodel?
I've used this before and I just wanted to say thanks for creating it!
Normally, I'd agree with you, which I am sure you've noticed from past interactions. However, today I did come up with something which meta-languages such as mustache, which has ports to multiple platforms, could bring to the table: You could potentially share view partials between the server and the client. In other words, you could parse the mustache template on the server-side and send it over the wire as HTML, then you could use the same template file on the client-side and update content dynamically using a JavaScript MVC framework and AJAX. Not sure if it's worth it, but hey, it's a thought. 
&gt;Not sure if it's worth it, but hey, it's a thought. It's always worth a thought. If you can find some advantage to this methodology, then by all means pursue it to its natural conclusion to see if it's worth using.
Is there any benefit to me using this over Openwall's phpass? Thanks
This is already doable in Ion Auth. If you set the active field to 0 then they cannot login, in without an authentication code they cannot "re-activate" it.
is it a year from the last expiration date, or everyone gets reset on the same date? I'd go with on-login-check, it's easy. just make sure to only change the expiry date if the password is reset after the expiry date. ...if they don't have emails, how will they recover forgotten passwords? 
I think your best approach may be to just ask a developer to take a look, get them to give you an estimate and if it's not in line with what you were expecting you can challenge them then, you have the power to walk away if you're not happy with their quote I probably speak for most developers when I say that we don't like being told how long our work will take, but I think if you take the approach I've outlined above you'll be fine
I would say using this method as well as enforcing some minimum password length and complexity rules is fairly secure. You are basically using a salt that is unique to each user thus minimizing the effectiveness of pre-existing rainbow tables. Yes it is possible to crack some simple passwords (dictionary words) in seconds if someone has access to both your database and code but practically speaking unless you are a high value target (facebook, gmail, chase bank, etc.) most hackers would skip it just because the potential payoff is not worth it. This article goes into detail: http://www.codinghorror.com/blog/2012/04/speed-hashing.html FTA: Here are my results on my current PC, which has two ATI Radeon 7970 cards generating nearly 16000 M c/s with MD5 all 6 character password MD5s 47 seconds all 7 character password MD5s 1 hour, 14 minutes all 8 character password MD5s ~465 days I am not sure how much faster it is to generate MD5 hashes vs. SHA-256 but this is VERY sobering information. mrargh is definitely correct though. However, as far as a I know using a unique to each user salt is still a best practice so your methodology is correct. The only weakness is your chosen encryption algorithm is not computationally difficult enough for modern day GPU hardware. 
Yes sir. I'll get in contact with you tonight. Thank you
O.o cool:D
never liked PDO! I'm diving into MySQLi today!
I was using mt_rand ^^
First of all, intval("2 years") === 2. Secondly, what security problem? intval() will always return an integer, no matter what. If all else fails, it returns 0. It is 100% bulletproof sanitization.
got to my office and found the link. It's [http://areyouahuman.com/](http://areyouahuman.com/)
Check out the memory_limit and post_size parameters?
That doesn't seem to affect the result. I'm setting the memory_limit and post_max_size to -1. I did encounter some libxml constant "LIBXML_PARSEHUGE" that can be set for DOM and SimpleXML, but no evidence of it being used by SoapClient
&gt;Any ideas for refreshing PHP knowledge? Whenever I need a refresher in a language I just do it and kind of lean on the crux of knowing other, similar languages and the design patterns etc. that go along with that, and Google.
&gt;are any suggestions to refresh my knowledge of PHP. Care to specify what you mean? For instance: 1. Are you looking to familiarize yourself with the API, or 2. are you looking to get into the latest development trends, or 3. are you looking to further your understanding of software design architecture, or 4. something else entirely?
Probably a problem with the remote endpoint.
I agree. Depending on the remote endpoints implementation, PHP specifically will show $_POST as blank when trying to interpret a POST message that is over the limit. Perhaps that's why it's returning an error code ("Wrong Version") that doesn't make sense. It could be the first thing the SOAP endpoint checks and it doesn't exist, because no POST data was processed.
[This](http://hashphp.org) covers more bases.
Really, PHP itself is easy, the hard part is deciding how to go about your project there are just so many frameworks and such now days. Is it existing, is it ground up? If its existing, what framework does it use if any? If its new, how complex is it going to be? What kind of load will it be under?
I don't know if this is going down the right path, but is your soap server sending chunked data? 5.3.11 has some fixes to deal with that. Can you upgrade and try again? https://bugs.php.net/bug.php?id=51775 
I think I can do it in CodeIgniter in about an hour. You must type like the wind.
If you don't mind a 10,000 file, ~200Mb, PHP5.3+ cms maybe look at Pimcore. It's based on Zend Framework and ExtJS so it's not exactly EASY to use but if you have previous ZF experience it's simple to pick up. Similarly the actual admin interface is so elaborate some users might find it a bit daunting but you can't fault it for features and flexibility. If an admin user engages with it and makes an effort to learn how it works they'll love it. People who want things to "just work" might not so much.
Both fair points that would improve the original. The chars missing are '.' and '/'. Nothing wrong with the original IMO, but those changes make it better. 
He/She means in your generateRandomString function. 
Not in the generateRandomString function :)
I may be willing to help but I don't have experience with Google Checkout API.
For lookups. You can use a payment token to look up a previous transaction.
I would see doing the "sudo port select php php53/php54" command working for your apache configuration if you had it setup properly. I'm not familiar with OS X but would love if someone could give a better explanation on how to do this.
I suppose that the first 3 are exactly what I am looking for.
I'd be interested in this. Because I'm using FPM, I have two processes running: php53-fpm and php54-fpm-- so two different configurations and two different unix sockets. I wonder if if I could just rig the port-select script to stop php-fpm, symlink php54-fpm to php-fpm and then restart it. Then Apache could just always listen to the same socket. I'll have to play with this
If you're going to be accessing a database, go read PDO tutorials. You don't want to use the MYSQL(/etc) extension that the vast majority of (outdated) tutorials will point you toward.
For tokens they usually recommend you use a _random_ or _generated_ token that is not derived from the PAN. Reason being, credit card numbers are so uniform (0-9, 16 digits, LUHN, issuer numbers) that it's near-trivial to test all combinations against a hash very, very quickly. It's even worse if you have a masked version (PCI specifies first six, last 4) of the CC number alongside it... then you only need to find *6* digits to match the hash.
Thanks! I am the author of that answer (Andrew Moore).
[PHP and MySQL Web Development (4th Edition)](http://www.amazon.com/gp/product/0672329166/ref=oh_details_o02_s00_i00) A really comprehensive book.
ah I see! thanks! 
Best php tutorials and examples for for beginner and advanced web developer to find out more about php script and project
search: php cheat sheet
You could easily write a bash script to do it all. Have it do the switch, then start php-fpm and pick the other. Let me know if you want a better explanation via PM.
Thanks ALOT for writing that.
PSR-0 seems to be a pain in the ass. Maybe you could enlighten me? I have been using this one: [https://gist.github.com/1053158](https://gist.github.com/1053158)
Eh, it can be, depending on your point of view. I find it easier to work with when you have several classes and interfaces. The implementation you have looks fine, and it actually builds the salt correctly for the most part. Very few code snippets or blog posts get that right. My library is admittedly a bit heavy, and intended for use in environments that might need to migrate hashes, say from sha1 to bcrypt, in-place. I'm working on a new API in an upcoming version intended to be far more light-weight yet just as flexible. I might ship that version as a self-contained phar.
does not extract into it's own folder... arg...
Its really not that hard. Just have it continue iterating for one second. It will auto-upgrade as you upgrade hardware. You can store the number of iterations with the password hash.
No, Cake's baking would do 60% of the work for me :D
Having a non-deterministic hashing function sounds like a bad idea
&gt; [Thanks ALOT](http://i.imgur.com/k67h2.png)
Yep, it's just a radio select in the MAMP preferences to switch between the two. I would go this direction for simplicity.
what that means with MD5 is that is it possible quite easily to create collisions, ie, the produce a different input which results in the same hash. This can be used by an attacker to supply his/her own executable with the same md5 checksum - see [this](http://cryptography.hyperlink.cz/MD5_collisions.html)
&gt; that will also function on systems that don't support bcrypt. Any version of PHP that does not support bcrypt is so old that you should not use it for anything at all, much less passwords. All version of PHP that do not support crypt are no longer supported and have known security holes. That class is obsolete. crypt is built in to PHP now, and that's what you should use.
I had to learn more about this. Came across this which is pretty interesting: http://blog.astrumfutura.com/2010/10/nanosecond-scale-remote-timing-attacks-on-php-applications-time-to-take-them-seriously/
&gt; Passwords need a one-way hashing function. Not always. Running SugarCRM, you need to enter passwords for the IMAP mail server login. The PHP application needs to store those passwords, and needs to be able to get at those passwords to log into the mail server. So there are times when a two-way encryption is needed. For just authenticating people on the local application, sure, it is one-way.
You miss the point. That collision attack is based on the original input. It's either a pre-image attack, or a suffix based attack. Right now, there's no attack that takes a given hash and produces another string with the same hash efficiently (with less than on average 2^128 tries). Therefore, md5 is just as secure as it ever was (the day it was created) for uses where the original text is not known to an attacker. I'm not saying to use it for passwords, I'd much rather use sha256 + PBKDF2, or bcrypt or scrypt, but to say *it's broken for passwords* is completely missing the point, and downright false.
It is possible to code like that. $password = rot13($password); $password = base64($password); $password = hash('sha512', $password); In assembly, this is the only way you can code. In a more expressive language, you can usually think more *functionally*.
this has thedailywtf.com or /r/talesfromtechsupport written all over it
No...
Looks interesting. If anyone have previously run this on popular frameworks link please?
The general rule of thumb when it comes to hash security is that if they have the hash, you can assume they have the salt. It's not always the case in practice, but when dealing with a security breach, you should assume from the start that your entire system is compromised. With a unique salt on each password, it would be considerably slower to find collisions on *all* of the hashes in the database, but finding collisions on individual hashes would still be slowed only by the complexity of the password or the time the algorithm actually takes to run. Most users have terrible passwords, so you can't rely on that. The only remaining factor is the speed of the algorithm, and unfortunately sha512 is designed to be extraordinarily fast, so it isn't ideal for password hashing. If you are using a unique salt with something like hash_hmac, then you could do worse than using sha512, but you can also do considerably better.
Why? The number of rounds can be stored with the password.
The only way to store passwords: $sql = "INSERT INTO TABLE passwords SET password = '" . $_GET['password'] . "1' WHERE username = '" . $_GET['username'] . "'"; mysql_query($sql); return true; ^(I feel I need to make a disclaimer that this is a joke...do NOT ever do this)
"always make your own functions" "ALWAYS MAKE YOUR OWN FUNCTIONS" **"ALWAYS MAKE YOUR OWN FUNCTIONS"** wat
Nothing wrong with that. I would recommend, taking a look at the [SPL Exceptions](http://ca2.php.net/manual/en/spl.exceptions.php). I use those when the situation fits, before I create my own exceptions. 
~~i'm not going to tell you what to do with your script, but have you heard of [denyhosts](http://denyhosts.sourceforge.net/). It monitors failed login attempts to ssh and ban's them after 3 tries (probably configurable, but I'm down for 3 attempts) In running for ~1 month, it has banned a number of IP's (http://chrissterling.me/deny.txt)~~ that being said, I have bookmarked your github and will be looking at it
&gt;Say, for example, you've got a blog and the article in the GET request doesn't exist---what I do is throw new ProgramException( "There isn't an article with that name." );. Well, you shouldn't create exceptions with the sole purpose of being a message delivery system. Make sure the exceptions actually mean something and that they can be handled. For instance, in the case you presented above, why not do something like this: class HTTPException extends RuntimeException { } throw new HTTPException('File Not Found', 404); 
Take a look at Haskell if you like this style.
The comment is now missing!!! I found it via Google Cache and have now preserved it in the RedditMirror: http://www.redditmirror.cc/users/public/how_not_to_hash_passwords/webcache.googleusercontent.com/search024b.html#104770
Even though the comment disappeared now, I have managed to preserve it for (hopefully) a long time here: http://www.redditmirror.cc/users/public/how_not_to_hash_passwords/webcache.googleusercontent.com/search024b.html#104770
There are plenty of known ways to compromise web servers. You can even get some Wordpress templates which come pre-compromised. Once you've compromised the code, getting into the DB can be trivial. I have seen more sites get compromised through injecting source code, then through SQL injection.
The thing I needed to do in this partial is see if a image had to be on the left or right. Maybe it is just easier to pre calculate where it needs to be (in the controller) and put it in my function. I want to try to write all the code my self so I can 'preserve' quality and generaly I just like to do it my self. (Time is not a problem on this project)
I agree that SHA512 is not quite as good for password storage as something like bcrypt, but it is still good enough for *most* sites. It still takes an unfeasible amount of time to obtain passwords from SHA512. One advantage of SHA512 is that it is more widely available. If nothing else it is a good fallback if bcrypt isn't available. Also, using hash_hmac requires the sitekey to recreate the hash. therefore the filesystem will have to be compromised aswell.
One Theory that a lot of people subscribe to is: You shouldn't be using str_replace for your template. You should write files that combine php and html in a view only manner. From your controller you can write some sort of "assign('username', 'MiniTim')" function that when you call display will create the variable $username in the function scope. From there you could include the php template file. You should be using output buffering to display everything at once.
Sounds like a perfect use for SSL Client Certificates: http://pilif.github.com/2008/05/why-is-nobody-using-ssl-client-certificates/ EDIT: For the record I've only ever heard of this technique. I've never implemented it.
Modify the user agent to send a specific string. Easy, don't need SSL certs, but potentially a bit limited.
If both the clients and the server are running in the same environment (i.e. the same subnet), why not simply use the MAC address?
Found a typo &gt;Who can us it? VirtualHost rewrite conditions: RewriteCond %{REQUEST_URI} !^/css/ RewriteCond %{REQUEST_URI} !^/js/ RewriteCond %{REQUEST_URI} !^/images/ RewriteRule . /index.php [L] Really? Are YOU gonna tell me how to handle that? Seriously? &gt;2. Add a file to the [../src/templates] directory, naming the file the same as the class, lowercase and appended with ".tmp" (e.g. Home.php = home.tmp). This will represent your core template file. So a controller cant work without a template. &gt;3. Add a directive to the routes.ini file in the root directory (or into the database table "pages" as specified by the model Pages) to handle requests based on the desired URI (and be sure the URI is unique): That seems a looooooot of trouble for every single controller. Can you even change the title of a controller for an specific action? I see this: function action() { $this-&gt;tmp()-&gt;setTemplate($this-&gt;template); if (!empty($this-&gt;reqData['username'])) { if (!empty($this-&gt;reqData['rememberMe'])) $sticky = true; else $sticky = false; $user = new Users(); $user = $user-&gt;login($this-&gt;reqData['username'],$this-&gt;reqData['password'],$sticky); if (!empty($user)) return json_encode(array('result' =&gt; 'success', 'msg' =&gt; $this-&gt;tmp()-&gt;render('successLogin'))); else return json_encode(array('result' =&gt; 'error', 'msg' =&gt; $this-&gt;tmp()-&gt;render('failLogin'))); } else return json_encode(array('result' =&gt; 'error', 'msg' =&gt; $this-&gt;tmp()-&gt;render('failLogin'))); } And then this: &gt;The genesis of this framework is rooted in utility. I wanted to have an easy to deploy and easy to develop development core that wasn't bloated with a litany of extras that I didn't want or need. And i dont know what to think anymore.
&gt;reverse the passwords A hash digest does not contain the original message. It is not reversible. What they attempt to do is use a large table of known passwords and their corresponding digests and look for a match with the digest they have.
If its a controlled environment you already have network identities (NIC). You can use the $_SERVER variables and create a unique id from hashing specific client variables maybe?
It's really just some dude's code.
Slightly off topic, but since we're talking about salt... I've been using a custom function to intersperse salt throughout the password (every other letter, then extra characters are appended to the end) before it's hashed. Is there any point in doing this? My reasoning was that, since I have to store the salt in plain text, this would slow down brute forcing attempts because they wouldn't be able to simply append the salt to the end of the guess. I'm not a security expert though, and this might just be a waste of code.
Telecommuting is a pretty essential part of the average freelancer's tool set. It's a bit silly to not allow it, especially if you are in dire need of help.
I do all the things you listed. Sometimes it helps to write pseudocode for your more complicated business logic before you write your data model. This may help ensure that your data scructure can meet all the needs of your application.
...What? There are many things wrong with this, but I'll stick to the big self-contradicting one: &gt; You should not be hashing server-side. [snip] &gt; Server [has] its own copy of the salted hash ... and then hashes that 
Lately, I've been spending more of my off time developing boilerplates for different types of sites. This means that, if a user wants a single page application, for example, I already have an MVC framework ready for the back end, with support for session management, user authentication, AJAX requests / permalinks, JSON output, etc. usually written in object-oriented PHP, so I can easily strip out features I know I won't be needing. Once I deploy the boilerplate, I have an outline for a working site; it just doesn't have any content. That's when I clear off a white board and start plotting out major features and designing database tables. I'll build the tables, write the models, and most of what's left is front end work. 
Why does everyone always include code in their templates? Kinda defeats the code (php) from html separation doesn't it?
There is an 'unboxing' blog post of RIPS here which you may find useful http://www.boxuk.com/blog/unboxing-rips
I generally start with "&lt;?php"
I did see that (not until after I posted my comment) I'll leave it in case people stumble upon this looking for something.
+1 for Twig. Just been playing with it recently and I like it.
This. Very much this.
Plan ahead to save time. This is wise.
Noob question, but how do you get the MAC address?
I wrote a template engine quite awhile ago but I used regex rather than str_replace. Take a look at preg_match_all and preg_replace
This. I loved how you said ZF was too heavy, and you want a str_replacement template engine. I have an article about exactly this. http://codeangel.org/articles/simple-php-template-engine.html.
Yeah, no.
Oh, gullible me.
I usually write from the outside in. First, make views and feed them with totally fake data. Then, in the logic, start from the most abstract objects and work my way to the most specific, again by backing with placeholders for yet-to-be-implemented objects that send fake data across the interface. This way I find that everything is usually thought out pretty well by the time I get around to coding it. In fact, it can make many projects boring because each step is so obvious that it's more of a typing exercise than anything else. Things like authentication don't really provide many surprises after the first few times you've done them, unless the client wants you to interface with their pre-existing system or something.
Actually I've always found this to be the worst way of doing things. I've found in the past that it was easier to allow a designer accessed to the HTML and allow him to modify it in any app he cares to use and he'll never wreck my code. Years ago I wrote a template system precisely for this as I had an over eager designer who kept asking for small html changes every two hours while I was trying to do actual coding. As soon as you put any kind of code into a template file, HTML editors might break it etc and thus, the PHP dev has to edit them... Or you need a designer who understands PHP.
&gt; I'm trying to get to the point where the client side is all javascript and symfony is only for the backend and outputting json. So you're that guy who builds those sites I can't use on my [phone|tablet|yet-to-be-invented-gadget] or find in Google.
This seems like the easiest solution if you have control of the machines, and its easy to do in just about any browser. Then it's all just in $_SERVER['HTTP_USER_AGENT']
So if you somehow get the hash from the db, you can log in knowing only it, and not the real password. Defeats the point of hashing.
I am by no means a PHP expert, but from what I have read, you should always rely on a well established hashing method rather than doing your own thing.
Surely that is just about getting the hierarchy of the templates right; build them outwards, from the detail.
Bcrypt is always available in PHP 5.3 and up. If bcrypt isn't available and sha512 is, you can use PHP's crypt() function with the appropriate SHA512 argument. This uses a stretched (configurable) 5000 round salted SHA512, which is much more resistant to brute force than a single hash_hmac with per-user salt. If you want to add a "pepper" or site-wide salt sourced from the filesystem, you can do that with crypt() just as easily as with hash_hmac.
with a blunt... maybe im different.. 
&lt;? include("large-10year-old-file-of-almost-every-function-ive-ever-written");
For goodness sakes why? What's wrong with it? Personally I find mysqli to be marginally slower and way buggier than original mysql. 
There aren't any known exploits that can inject SQL if you use addslashes and mysql_query provided your database is UTF-8 encoded (almost always the case). As far as I know the GBK character set (simplified Chinese) is the only db encoding that is vulnerable when using addslashes.
 arp -a &lt;IP&gt;
I think you're being downvoted because your comment is dumb and comparing PHP to JS isn't exactly fair. AFAIK, JS was from the beginning a prototypal object oriented language, whereas PHP added OOP 5 years after release and true prototyping only recently. Needless to say, the development of frameworks consistent with conventional programming techniques was a late-comer to the PHP world. Even then the adoption rate of OOP was relatively slow. I see a lot of developers still treating the PHP object model with a procedural paradigm. Most won't even really adopt PHP's new prototypal and compiler capabilities for a while yet. JS isn't all a bucket of unicorns. While PHP's backend is wonkier by comparison, in my opinion, PHP as a language is now nearly on-par with JS in terms of ease of use and code elegance in all excluding some minor edge-cases.
yep that would be it. The server should only serve the information the client needs. The client should make the calls and the server responds with the data and the client decides what to do.
nice work ! +1
That's right. Do not re-invent the wheel.
I merged your pull request, thanks! You did add an extra newline at the end of the file, so be careful of that next time. You can do a git diff to see which lines you changed, and make sure nothing was accidentally changed :)
Feel free to use it in any project you want :)
Thanks :)
Thanks!
Who doesn't like Monokai :)
Wouldn't say the internal code for the class is all that clean as there are far too many else's and else/if's for my liking, but the interface is nice and clean and it does look quite useful, so thanks for this.
Heh, I wrote the template engine because the guy was a designer and only a designer. He was very capable to work with the templates I provided him because the file extension was .html and thus he had no problems loading it into his visual editor of choice. No template engine will keep someone from breaking something and review are required. But if someone was using an editor that didn't understand PHP my template system handled it nicely. I agree with the need for the reduction of DSLs... I'd rather have multiple templates and have the PHP dev manage them with his code.
The core highlight_* functions are very sedimentary, they only support 6 different colors, for strings, comments, keywords and default. Those are ini settings and are inline styles. That means you can't style the source yourself since it's all hardcoded. My library uses HTML classes so you can create custom styles, and you have a lot of detail since there are a lot of token names uses as classes (T_COMMENT for comments, T_ECHO for the echo keyword, T_IF for the if keyword, etc). The highlight_* functions are probably written in C, which isn't exactly my strong area, but I'll take a look at it. 
Polymorphism :-) Basically, you'd want an abstract base class called Token, and then for each instance where you have an if/else statement, instead create a concrete class to handle the request. So for example, you could replace the email token code with an 'EmailToken' class. There would be a factory class that instantiates the EmailToken or LinkToken etc class based on these if/else rules, but the if/else logic is now clearly kept away from the implementation logic, so you'd end up with a cleaner code base that would be easier to edit and modify in the future. One other tip: why not move all the define() statements and convert them into class constants within the class itself? So you'd have like: class PHPLighter{ const PHPLIGHTER_BASIC_HIGHLIGHTING = 1; const PHPLIGHTER_NO_TOKENIZE_DOC_TAGS = 2; ...etc And then instantiation would look something like this: PHPLighter::highlight( $php_str, FALSE, PHPLighter::PHPLIGHTER_BASIC_HIGHLIGHTING ); The Zend Framework uses class constants in this way quite a lot. 
Thanks for the ideas about using abstract token classes, I'll take a look into using that approach. As for class constants, I was debating using that approach but I decided to copy the core PHP way of doing things. Using class constants could avoid naming collisions, but I thought that was pretty unlikely. I may look at changing that in the future.
Yeah, it's just that I can't imagine a time where you would gain an advantage from having the constants outside of the class. Also, in a modern IDE such as PHPStorm, if I were to type PHPLighter::, at the point of typing the second colon, the code hinting would kick in and I'd be able to see all the options. Just something to bare in mind :-) With regards to the abstract base class - you want to just read up on polymorphism and factories. The idea is to have the abstract base class force an interface that is then used by all the Token classes. Good luck though, and it looks interesting :-)
Cool, thanks to both of you. Yeah sorry by "see the actual program run" I just meant execute the code and such. I suppose that would have been better phrasing heh
Even better, when adding your changes, use `git add -p` to approve changes in patch mode.
I've used the abstract base class + polymorphism for other things, like models. I just didn't think to use it for this :)
Hold on. If I've interpreted this thread correctly, you've applied for a position doing something you know nothing of?
Ah cool. I tend to see loads of 'if' statements as a sign that polymorphism might be able help out. I'm taking a look at your code now... I'm gonna have a play with it. I can't promise I can work on it, but I'm gonna have a play about with it and see anyway. Well done overall though, it looks promising! :-)
Didn't know about this, thanks :)
My only beef with your code is the mixed brace styles. While I disagree with other style choices, I find them permissible as that's simply a matter of preference. Other than that, good, clean, readable code. Job well done.
Primarily because it's a huge security vulnerability, but there's a lot more to it than that. The mysql extension is no longer actively developed, it doesn't have an OOP interface, it doesn't support prepared statements, stored procedures, or transactions, it doesn't support recent versions of MySQL, and most of all it has already been announced that PHP is going to mothball it ([source](http://us2.php.net/manual/en/mysqlinfo.api.choosing.php)).
We call that the ‚Äú[WTFPL](http://sam.zoy.org/wtfpl/)‚Äù ;)
I wasn't aware of ob_get_contents, thanks for helping out!
Most designers are only designers, and they don't know any templating language except maybe the one that dreamweaver uses. So if they need to learn syntax, they might as well learn the *tiny* bit of PHP needed to know to do basic templating. Also PHP/HTML is well supported in most visual editors these days. Hard to find one where it's not supported.
It's around 36 hours and its a small job What price? I really need it
Yeah, I agree that designers *should* learn more than design but to this day, that still isn't always the case. Heck there are a bunch of jobs I've had where designers do the HTML but expect the devs to 'deploy it', meaning make it work withe the back end. Last year, I had designers giving me raw HTML documents (of which I had to correct) but with the idea that they would update their 'source' so if I translated it into a template system I would be doomed to do it over and over. The template system I wrote was done back in 1999 in Classic ASP and eventually transitioned to [PHP](https://github.com/jqs/tmpl). But back in the day, no visual editor understood the underpinnings of anything but HTML and they would regularly thrash anything they didn't understand. My template class is very much like [mustache](http://mustache.github.com/) except it supports included files and a few data types for passing template vars etc to it... And yes the code looks like crap but that's because it is pretty much a direct port of the old ASP code.
No problem. While this code certainly works, it's more or less the simplest form for a PHP templating engine. A more full-fledged engine would also have support for view helpers and the like. I wrote this one on-the-fly to demonstrate the usage. 
I've worked for hundreds of designers throughout the years. Believe it or not, most of them already knew PHP. They even could program a bit of javascript, flash. And some even knew how to configure apache, even that crazy mod_rewrite stuff.
Great, thank you for the input! I'll be more careful next time! The code was really well documented and well written, that's the only way I found the bug, because I could read along and understand what was meant to be happening at each step.
It gives me too many 80s flashbacks.
Unfortunately, it's because the browsers all produce wildly inconsistent crap that any wysiwyg implementor has to try to deal with. I've settled on jwysiwyg lately because it's light and flexible, but I definitely need to get around to writing some better cleanup routines. One paste from Word and there's a surprise for me in my inbox... *sigh*
http://ideone.com/ will led you put code in an editor and see the output. If you just want to see if you can put the concepts down, this will do it. If you want to set up actual applications, you will need to find hosting, or set up your own environment. 
Me. Its colors are too bright and saturated, and for my crappy eyes, bright and saturated on a dark background causes problems. I started using the light version of [Solarized](http://ethanschoonover.com/solarized) a long time ago and haven't needed to look for another theme since. It's incredibly easy to look at all day at work.
I know the feeling. The mess WYWISYGs produce makes me want to put a barrel to my forehead at times. Sometimes I wonder if it might be worth it re-implementing the whole WYSIWYG from scratch in &lt;canvas&gt; or generate markup yourself, without the use of contentEditable/designMode (of course, you'd have to re-implement the cursor, work with the selections API etc. to get that to work). At least it'd be consistent, and you (the developer) would have full control over the code that is produced rather than relying on what the browser spits back. *sigh* oh well. 
I've just tried it out and the force paste as plain text doesn't seem to actually work. It still copies across tables etc from an email. 
&gt; Info: Code is object-oriented. This is not supported yet and can lead to false negatives. Hmm :/
Thanks for all the feedback. I've decided to move the global constants to class constants instead, based on feedback from everyone. I've also decided to refactor that giant if/else if block into something better. This will probably reduce the regex as well. I'll also add some custom classes to the different types of comments so different styles can be applied to them. I'll make these changes tonight so check back tomorrow :)
Cool, but don't do all that on my account! I just like doing code reviews (and I have lots of opinions). Regardless, thanks for sharing.
This is awesome! I'm working on writing a bunch of PHP articles for a blog I'm starting... I think I'll look at bringing this into a WordPress plugin. Should be awesome :)
This development method is called Integration Test-based Development. It's sister is where you develop unit tests first and then the backend, and then the frontend.
Wow, you are quite lucky. We had a designer last year who wasn't a programmer, not much more than a Photoshop guy, but boy did he have his UX chops. 
*facepalm* 1. He's asking about WYSIWYG editors, not text editors. 2. He's asking about javascript WYSIWYG editors, i.e. editors which can be included on a website. You missed the mark completely. 
Nope, I was planning on making one tonight. I have some code working already that gives you three options: Auto detect PHP in &lt;pre&gt; tags, highlight all &lt;pre&gt; tags or highlight &lt;pre&gt; tags with the given class. Just gotta clean it up and polish it.
Check out [Github Pages](http://pages.github.com/) to host the example.
Wow man, I cannot wait to try this on my site (and to give you full credit). This looks absolutely gorgeous. What a great contribution - THANK YOU!!!
Perfect! This is how I did it and I used [this plugin](https://addons.mozilla.org/en-US/firefox/addon/user-agent-switcher/) to set the user agent (I just added to the end of the existing one). Thanks! EDIT: Now I am setting the user agent directly in firefox config (about:config, then create/set general.useragent.override)
Try running this to see what happens: echo $xml-&gt;item[5]-&gt;description-&gt;asXML(); i.e. your print_r is simply not printing the inner content of the XML nodes (description has rich content -- i.e. lots of HTML).
Take a look at this SO question. I used to always make sure my files didn't end with a line break. But after being scolded by my professor more than once I always ensure there is a line break at the end of every file I touch http://stackoverflow.com/questions/729692/why-should-files-end-with-a-newline
I would recommend htmlentities over htmlspecialchars; more entities (like Unicode characters) are supported. Also, what the heck is with that showy code style? Ridiculous newlines and indentation towards the end (you have a concatenation operator lurking on the end of one line that looks like a mistake but isn't) and you use print() with parentheses and you assign the content to a variable for no reason. I'd just write it as a function and add some examples at the end, rather than making your code look weird. Nice work on the regex though, thanks.
I've found that my problem with database development first is that the application requirements change for most things. So I start with something like RedBean which can auto-create tables as I go. Before I push the app "live" I finalize the database, make sure everything is normalized, re-write my DB access and then yank redbean. 
I'm glad it's working out for you.
If you're not into installing much, you can also try a portable webserver like the [uniform server](http://www.uniformserver.com/). No install, no fuss. Just start, test your stuff at http://localhost, stop the server again and you have no messy services and whatnot left running.
No plans to expand this particular library to other languages, but I am working on a more general parser that could be used for languages like Python, JavaScript and SQL. Because this library uses the built-in PHP parser, it could highlight any reasonably sized file with ease.
Jesus, guys, the man needs help with a small project, that's what we're here for. There's no reason to just tell him "screw you, figure it out" or "you have to write a whole project plan".
The problem with APIs is that I may need to do this over a million records.
I had a similar problem in the past and went with WYMEDITOR. Its a What You See Is What You Mean editor. It is designed around the plilosophy of specifying what an element is, not what it looks like. It can be a bit different than your normal WYSIWIG editor, and might need a bit of explaining but overall it really helps preventing users from breaking the layout. Regarding the paste from Word, it has a button which basically lets you paste into a normal texarea, but it strips all html tags, and users need to format again using the editors interface. Still it beats having the horrors word spews sisplaying oon your page.
Is there a specific reason you use getcwd() chdir() dirname() and basename() to just include the file? Oh and by the way, this works perfectly! Only thing is, the function in_array in __get isn't returning true for some reason so I hacked my way around that. Thanks again!
I'd use the date function as mentioned below, then I'd use a switch to catch the different times.
#4 never occurred to me, and frankly its diabolical. I think I will try that route.
So you're saying that every single class needs an interface, even if there's only 1 class per interface, no matter what, in order for it to be DI? I don't think so. Besides, taht seems like a LOT more extra work for limited gain! My views are the templates. The controller just includes the templates instead of calling another class which does nothing but include a template... taht also seems like a lot of unnecessary labor.
Thanks, i just jabbered that to everyone in our office!
just loop through them foreach() until you print everything there is to print.
Innovastudio
I think it's fine, failtoban and denyhosts can be used well in some contexts that iptables isn't as good at (or is difficult to configure right). Everything has it's place. In addition, my script offers the ability to change the SSH port from 22 which really helps to save server load since it doesn't have to deal with script kitties running bots against default server ports.
You usually have to explicitly cast SimpleXMLElement Objects to (string) if you want to print them. It is a quirk in the way SimpleXML works. [See example # 6](http://php.net/manual/en/simplexml.examples-basic.php) http://stackoverflow.com/questions/416548/forcing-a-simplexml-object-to-a-string-regardless-of-context Edit: I just noticed you are using RSS format. You may have better luck using SimplePie to parse the feed. http://simplepie.org/
[This](https://github.com/mikenz/twitter-text-php) contains code forked from twitter's url detection library. Their [regex](https://github.com/mikenz/twitter-text-php/blob/master/lib/Twitter/Regex.php) is pretty ridiculous as well. 
+1 I'd love to see a Solarized theme.
htmlspecialchars is absolutely the better choice. If you did everything well, and took steps to make sure that everything is correctly done in UTF-8, you would only want to escape the absolute necessary, which is just &lt; &gt; and &amp; (and " in attributes)
Of course, none of those approaches need to be mutually exclusive, of course. And you may run into the same limitations with their javascript api as you do with #3 up there in terms of 15k / day, tbh.
Don't use htmlentities unless you really need to (for whatever reason). htmlspecialchars *is* the right choice here.
Why are you throwing your php, js, and css files into the src directory? Why don't you move the js and css files into a public directory?
Oh, a downvote! Let the bullying commence.
I don't think his comment is dumb. I disagree with him, but he has every right to not like frameworks. I also disagree with your reasoning. The approach to object-orientation, and syntax, is irrelevant. You can have frameworks with and without OO, and with different forms of OO. I think it comes down to other factors. First frameworks are needed for JS to normalize away the cross browser differences. Today there is very little point in writing your own cross-browser ajax code, as 99% of the time, you could just use an existing solution instead. PHP doesn't suffer from this issue, as it typically only run on your server. Lots of quite simple JS code is also difficult. Just making something draggable is an issue, as you have to deal with element positioning, altering styles, and more cross browser issues and corner cases (like what happens if the mouse down on a scroll bar). Most PHP comes down to checking input, DB, file IO, and outputting HTML; all of those are trivial with vanilla PHP. Yes frameworks make it even easier, but the fact that most PHP devs can do that already, puts them off using a framework. Finally plenty of PHP frameworks have the perception that they are really there to force structure and conventions onto your code. You know where the views are, you know where to change routes, and you know where to add your new controller actions. Yes they do more, but this is usually the first thing a dev will see. This gives the worry that they have to learn a new application structure, and that they have to code for the framework, instead of the application. Plenty of JS frameworks are actually just big libraries (although not all), making this less of an issue. All of the gains that JS frameworks offer (like better cross browser code), is also more of a clear gain then what you gain through PHP.
Throwing up a random chart with no back-story or explanation is pretty useless.
TinyMCE is pretty much the industry standard. But again, it sucks.
Why not just use [html purifier](http://htmlpurifier.org/). They have a "linkification" feature like you describe and I believe one of the best reputations regarding secure html filtering (which is really difficult to keep air-tight from what I've read).
Plan ahead so you can do it properly and save yourself a headache if you ever need to modify and add features later. It will not always save time, in fact, ~~sometimes~~ most of the time it takes longer doing all the planning but you have a greater success at building a more solid application and is easily extendible.
Take a look at [SCEditor](http://www.samclarke.com/2011/07/sceditor/), a really simple wysiwyg editor.
craigslist would be next to useless to me without the rss feeds. I can't even imagine having to do all that clicking 0_o
&gt; I don't think his comment is dumb. He provided no explanation about why everything but JS frameworks make him squeamish. "Me don't like fruit, except banana" is not insightful or somehow a constructive addition to this discussion. I didn't even downvote him. I upvoted him to counter downvotes that he already had and I get downvoted for doing so. Stay classy reddit. &gt;The approach to object-orientation, and syntax, is irrelevant I never mentioned syntax. I didn't say using OOP derived any more or less functionality. I said that OOP was a conventional programming technique that PHP didn't implement for a while after release. I'm pretty sure you totally missed my point and had a knee-jerk reaction to what you perceived as, but wasn't, yet another misguided OOP vs procedural argument. My first point was about how developers use the wrong paradigms often and my other point was about usability and elegance, neither of which are inherent to an OOP or procedural frameworks in any way.
Yes. [Regexes are not sufficient for parsing arbitrary HTML.](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags) HTML Purifier is easy to use and solid.
This particularly sucks when using a custom object relational mapper. You MUST explicitly cast to strings.
http://httpd.apache.org/docs/2.0/mod/mod_auth_ldap.html If you're company is using Active Directory, you can use this on the linux server for controlled access using AD logins and instead of getting a machine ID, get the users NT login. Also, this would work for applications that require a login, set them up to authenticate to the AD and with this module, they could be automatically logged in based on their NT login.
Love this license. It doesn't get the attention it deserves.
I'm not parsing html, though. Anything the user writes is printed out verbatim. If the user writes a script tag, they will be shown exactly the text typed in, not the html as interpreted by a browser.
[Regexpal](http://regexpal.com/) is great too. It even has highlighting and live updating.
&gt;Only if it's used incorrectly. It's no less secure than mysqli. To claim a piece of code has a security vulnerability you need to provide an exploit. What exploit applies to ext mysql that doesn't apply to mysqli? Humans. If you have to remember to escape things you will fuck it up eventually. It's not an exploit but it is a security issue. &gt;Yes, but it has been feature complete for years and does not warrant active development. According to your source it is still maintained so I guess any new vulnerabilities are patched. If mysql is being developed and the mysql extension is not, then it cannot be feature complete. Fair point about maintenance though, however resources are finite so maintenance is at the expense of something else. &gt;I see that as a plus. OO is fantastic insofar as it allows you to separate your concerns (ie. MVC design pattern) - but OO for the sake of OO (where it does not improve separation) adds complexity with no benefit. Exceptions, testing, the fact that OO is actually nice to work with? &gt;As I understand it prepared statements only execute faster because they cache the query plan. This provides a benefit when doing the same complex SQL many times. It's an optimization I choose not to use as there is a slight performance cost to the caching depending on how you're using it. No. The primary benefit is the separation of data from the query. And lol ... cost of caching ?!!!???. &gt;It supports all the features I want to use. You are an edge case by the looks, so why don't you sod off? Preaching mysql_* because it fits your particular needs is just fucking stupid when it plain as day does not fit the needs of almost every other developer out there. You might be fucking brilliant at whatever you do, but unfortunately the vast majority of php devs aren't. PDO/MySQLi help A LOT in combating that, you would do well to recognize this.
But this isn't a jobs board either.
Aha, didn't realize you needed that type of functionality. So you're trying to output some sort of "copy and paste this in your website to create a link to so-and-so page" or an html tutorial then??? Or am I just confused by what you are trying to do (why are you wanting to escape unwanted html instead of remove it)? Yes, I don't think html purifier does handle urls without the http. Which is a functionality I would like to have for my own project honestly. I suppose since you will be escaping all html before output(?), you don't need the additional security anyways.
For a website where regular people write stuff, I just think it is stupid to try to second guess them and remove html tags etc. Just give them the exact output they typed in. It would make sense if you used a rich ext editor like TinyMCE, that outputs html. But that also makes the interface more complex and risks to break the design of your site.
To elaborate on this a little bit, the common practice is to store the user_id in the session when the user logs in. Then, when they fill out the form, you can take that variable from the session, and insert it with the rest of the data.
I can't speak highly enough of nginx with php-fpm, it's a great choice. I'm also becoming a huge fan of redis, so your choices sound solid to me. :) Regarding collecting statistics, also take a look at statsd and see if that might be useful (especially for metrics for yourself). It operates over UDP, so there's no additional lag for statistics. I use it all over my projects for timing page loads and general server stuff. In this case, I would say that redis is probably what you'd want for that more specific stuff, but statsd might be a nice supplement.
oh.. i thought this reddit was about the drug
Why did you take a job that you don't have the basic knowledge foundation to do?
Unfortunately, this didn't end up working out the way I had hoped. I had just assumed that I could be able to serialize the result of the odbc_exec and pass it back as a cURL response - unfortunately PHP does not support serialization of resources. I had thought at first that I could just modify the result() function, but this is defined explicitly in the abstract db_result class and all related functions are called with the actual database resource, unfortunately.
Yeah that sounds similar to my second idea of how to do it. What did your function do to see if there was a change?
I think you're almost there with your first idea - but add a new attribute on each input field to store the original the value that was on the record when the page first loads. And when you've completed the save, compare each value vs the original-value on the form. You don't need to copy values any where, worry about state or anything - just one quick function that does a compare. You could use [HTML5 Custom Data Attributes](http://html5doctor.com/html5-custom-data-attributes/) to store the field in - just for the sake of following a convention.
There are definitely more elegant ways to write this - but this is easier to read/understand.
SQL injection.
&gt; If there is an easier, more intelligent way to do this. Yes, there is. [Don't use your daily OS as your development OS. Use a virtual machine.](http://jtreminio.com/2012/04/setting-up-an-ubuntu-vm-step-by-step/)
Options?
For one, [it is no longer being developed and **is in the process of being deprecated**](http://www.php.net/manual/en/mysqlinfo.api.choosing.php). For two, the `ext/mysql` was built for MySQL 4.x.
Windows works fine with PHP, Curl, Apache, and whatnot. No need to give up, and **I always use my daily OS as my development OS**. First thing I would do is run a phpinfo() and ctrl+f for "curl" to see if it's loaded. Also, delete the libeay32.dll and ssleay32.dll that you moved around and download the latest OpenSSL http://slproweb.com/products/Win32OpenSSL.html (let it install to the system folder) And make sure php_curl.dll is in the proper PHP extensions folder. You don't need the actual program curl either.
Had this issue last week actually. * Uninstall Current Version of WAMP Server * Download and Install the 32 bit version of WAMP server * Enable CURL In PHP Settings * Modify BOTH PHP.ini files to enable php_curl.dll * You already moved the ddls so you won't have to do it again. Worked for me. EDIT: The issue is that CURL appears to have issues running under the 64-bit version of WAMP.
Stop using the mysql_ functions, and upgrade your code to mysqli or PDO. 
THANKS! I got it. I was not calling the proper variable. Dreamweaver automatically makes the session for the user under MM_Username and I was trying to Call it with Username. So with dreamweaver in the text field Init val you can put... &lt;?php echo $_SESSION['MM_Username']; ?&gt; where you want the current user to show in the form text field. 
As In depth as the program is, and having NO experience with this, DreamWeaver was my best alternative. I DEF agree with you though. I'm proud of myself and what I have gotten done. Learned a good bit too from destroying half of it troubleshooting a little baby problem. 
I suggest building a custom program to do that, but if that is something out of your reach, then choose a nice third party program like http://www.phpmyedit.org/ 
Have you looked at the Microsoft Web PI installer? http://www.microsoft.com/web/downloads/platform.aspx It can set up a full PHP dev environment for you on Windows with enabled modules, etc.
This is probably the issue. It may be something like you compiled the extension and it is somehow compiling in a format different then your web server. I had a similar issue in OS X when I was compiling a redis extension to run with zend server community edition. I had to purposely compile the extension for 32 bit since that is what zend server CE is... 
thanks for that :)
Or just do an [array_diff_assoc()](http://www.php.net/manual/en/function.array-diff-assoc.php) instead of the loop. &lt;?php $original = array( 'name'=&gt;'testing', 'email'=&gt;'test@test.com' ); $new = array( 'name'=&gt;'testing', 'email'=&gt;'new@mail.com' ); $diff = array_diff($original, $new); var_dump($diff); 
So you want to do this dynamically? You could use [jEditable](http://www.appelsiini.net/projects/jeditable).
What exactly are you running that you are needing the machine/computer ID?
For more in-depth diffs, http://pear.php.net/package/Text_Diff/redirected There is a newer version available. 
We switched from TinyMCE to CKEditor and run it through HTML purifier. It's been working great so far. TinyMCE was a nightmare.
Salts may not have to be "secure," but the method of generation can matter. Using a cryptographic random data source helps ensure uniqueness and randomness in the salt data. Depending on the algorithm being used, the distribution of randomness in the salt can have bearing on the strength of the key.
I ask because the current option you seem to have chosen doesn't seem very reliable. Since it's reliant on a browser plugin, the user could either use a different browser or change the outgoing ID in the headers. I am not sure there is a surefire way of doing this with PHP. I would think some sort of two-step authentication with a .NET application installed on the computer is what would be needed. * Have them sign in at the web site * Before continuing they see a unique ID/code that has to be entered from the .NET application * They open the .NET application, enter the same username they logged in with and the unique ID/code that is displayed in the browser * The .NET application then sends a unique identifier of the computer, say the hostname, MAC Address and possibly some other unique ID that may be backend available to .NET apps. Then you have the user has authenticated and what machine they authenticated from. **EDIT** I don't believe it would *have* to be a .NET application, it could probably be any sort of compiled language that would actually run the application on the computer itself.
You may want to start migrating towards a framework such as Yii or Symfony. I would recommend Yii for the lightweight fact. Also, I hope your customer data is being stored securely and your user passwords are either utilizing LDAP or bcrypt for storage.
What do you mean fun? Fun to solve/work on?
yes, what else would i mean?
They aren't compiling anything here. The file php_curl.dll is 32bit only unfortunately.
First, if you are not going to require username/password, then take a dump of all other data you can get from the user. This includes the full user agent, screen size, ip address, mac address, language preference, and any other info you can get. This would make spoofing other people more difficult, but still not impossible, and doesn't take into account two people legitimately using the same machine. An alternative to the plugin idea could be to give each user a unique shortcut to the site, pre-provided on the PC, which includes a user id number passed in the url. So one user has webapp.com?id=1234 and another has webapp.com?id=9999 You might also be able to setup this up automatically in the Windows hosts file, so they don't need a shortcut, and works machine wide. However I've not tried this. You can definitely map one address to another in there, I just don't know if it works with query parameters too. You keep track of which IDs are given out, and ban any connections which don't have a valid ID (or do something else). If the IDs are long enough, then it would be almost impossible to randomly guess another ID. When a page is rendered, the system could automatically append the ID to the end of a request. You could also do this trivially with JS. For example: $('a').each( function() { $(this).attr('href', $(this).attr('href') + '?id=1234' ); } ); ... although that is just the idea, it doesn't cover a number of corner cases. Now there is the issue that one user could pretend to be another, if they copy their shortcut. The only way to prevent that is to require a password. Rather then requiring a username/password for the web app, an alternative could be to host the webapp privately on a network, which requires the user to start up a VPN connection using a provided username/password login. There might be ways you could also setup the access info automatically for each machine without a password, so they are identified and tracked when they talk to the network, before then when they reach Apache (or whatever you are using).
So is it a joke, or did they really screw up that badly? [Screenshot incase it isn't a joke and they fix it.](http://i.imgur.com/Y95Hv.png)
I was thinking the complete opposite. It's an awful interview question. How practical is that? You know what 90% of the programmers in the world are going to do when confronted with the task of writing that function? They're going to Google it, which is probably what led OP to StackOverflow in the first place. It's not important that a programmer can come up with an answer like that on the spot. I'm a little more interested in the way a potential hire *thinks*. 
I'll concede that point, so long as a failure to come up with a fully working function doesn't instantly disqualify the person for the job.
Exactly, it's more watching their thought process than having them come up with an actual solution.
Did anyone in there actually come up with the correct solution? None of the ones I've looked at so far are properly justifying the text (the hello should not be centered).
Ok. I'm not brilliant at what I do. If I was I would maintain the old extension for the sake of it. All I want is the option to use an extension I see as simple and elegant. An extension that many developers have built some incredibly successful web apps with. And I can't see how mysqli_query is more secure than mysql_query. I will sod off now. Arguing on the internet is not good for your soul.
I generally consider myself to have a decent grasp on PHP and programming but given just a whiteboard and this question I would be so fucked. The only way I could see myself getting a working solution would be to write some tests and get them to pass with a considerable amount of trial and error. I could probably do a hack solution which didn't work all the time on a whiteboard but who cares if a programmer can hack code under pressure. If you're under pressure the last thing you should do is start hacking code IMO as you always just end up screwing yourself when an inevitable minor change is required.
So .. instead of doing your own **homework**, you decided to put in StackOverflow. And when people were not eager enough, you spammed it here too. It would have been faster to write it yourself. 
A username/password is still required (two in fact). This is not about authentication, but identification. Two people can legitimately use the same machine and they use their own login, but I still need to record which machine they used. Modifying the user agent resolved my problem as suggested by dx4100. Thanks though! 
Because it's a controlled environment, this is not an issue - all of the users will be trained employees and it's not on the plugin anymore, I discovered how to set the user agent directly in firefox config (set general.useragent.override)
The reason URLs like that are considered SEO friendly are because they increase CTR on the search pages themselves, not because they help you rank better. So when you have a URL like /blog/read/42.html then it's not really that much better. If you had /blog/awesome-relevant-topic.html then it'd be far more useful.
TBH, I probably would not write any code for this in an interview question. I would sketch out the algorithm in whatever appropriate form makes sense at the time. There is no point diving into code until you *fully* understand what the code is supposed to be doing, and have a good idea how to do it. That's what I would *hope* to be given as an interviewer, and something I seldom see from developers that work for me. When I need to rip development days of code apart to show someone that they have not understood the problem at all, solely because they were not able to express their approach in any way other than "just code", it frankly pisses me off. The developer nearly always needs to check assumptions and ask questions. For example, with this interview question, examples I have seen involving two words on a line have the two words justified, i.e. to the far left and far right. Now, that may be fine so long it is not the last line of a paragraph. What assumption should be made? Every single line has to be justified, or we should follow more real-world rules that may not be explicitly stated in the original problem? (Okay: "ok then" and "hello" are pretty clear in the original question about what is needed, but many SO answers point out that this is not proper justification - 'hello' should not be centred. I guess we can assume that handling lines, i.e. deciding whether to justify an individual line or not, is an out-of-scope wrapper to this specific problem. But then, has the OP questioner understood the interview question correctly either?) Sorry - bit ranty. Just done too much clearing up other people's mess over the last year.
Store it in the database and upon submit compare the last posted value with the current posted value. **Clarification/EDIT** Insert them both, then pull the last 2 rows inserted and compare them.
 "2 years" !== 2 "6 months" !== 6 Your bulletproof sanitization changes the logic of the program. Instead of selecting values that are "2 years", "6 months", "half a decade" it attempts to select values that are 2, 6, or 0 -- which is wrong. Literally the first part of that comment was "And if either of those **isn't an integer**..." Don't get hung up on this specific query. The point is that given a string, you have to do better data sanitization. You're focusing on a literal number when the query could be: SELECT blah FROM people WHERE name = ? AND department = ?; How's `intval` going to treat you there? You're going to have to wrap each argument in a sanitization function. Which, realistically, you're doing with `intval` anyway. It *looks* clean, but it's actually shitty. Add a few more arguments to the query, make sure they're wrapped in the correct function. Now we have a huge string being concatenated. It's just tons of room for error to be introduced. You lose nothing by using a DB wrapper, and gain everything.
Yes, they potentially could, if they had local execution privledges on your machine, or similar rights. If that seems like a vague answer, it's because you asked a vague question. [Lastly, don't use mysql_* functions.](http://net.tutsplus.com/tutorials/php/why-you-should-be-using-phps-pdo-for-database-access/)
It's correct code, but the mysql_ functions have been deprecated/"discouraged" in favor of using MySQLi or PDO.^[[1]](http://www.php.net/manual/en/faq.databases.php#faq.databases.mysql.deprecated)[[2]](http://www.php.net/manual/en/mysqlinfo.api.choosing.php) In practice, you don't want to use those functions because they encourage SQL injections by not including a way to bind query parameters. In simple terms, you're more likely to write insecure code when you're using those functions, so **use MySQLi or PDO**.
I did a simply string comparison of the values if(x !== y). The function also accepts a field name to note which field is being changed. If there is a difference the function initiates an audit class and calls its write method, which sets the user id, time etc etc and writes the change to the database. This ends up being something like: date, time, user_id, method (new / update), field name, changed from, changed to (My $_POST data gets trimmed and slashes stripped before being compared, to prevent "hello " being different to "hello" or "didn\'t" to "didn't" etc.)
Just use one the [Zend_Config](http://framework.zend.com/manual/en/zend.config.html) options or something similar and specify it in words which configuration should be used. Then your variables for the mysql_conn() will always be the same variables but the value of the variables will change depending on the environment.
No dice, instead of doing the if( $numRows &gt; 0 ) thing, I just echoed $numRows. And it looked [like this.](http://i.imgur.com/hM0rj.png) Whereas it should look[ like this \(probably\)](http://i.imgur.com/sRSLK.png) Because the bottom one is the only one in the system.
Hmm, based on what you're saying it should look like, it's not setting it as `0` or `1` but that it's either `NULL` or `1`. So, adjust the query to this: $query = &lt;&lt;&lt;SQL SELECT c.`referred` FROM `customer` c WHERE `referred` = '{$userEmail}' AND `approved` IS NOT NULL LIMIT 0,1 SQL; 
I'd recommend against using constants for storing sensitive data like database access credentials. It's better to set the username and password as variables, use them to connect and then destroy the variables. There is no need for them to stay in memory since these values will most probably be only used once during the whole script anyway. If a reconnection mechanism is needed, it can simply include the definition file again when needed. 
That's ridiculous, it's not a security concern to have the constants remain accessible and in memory. If you're on shared hosting, your website is probably vulnerable to all kinds of attack. If you're on a dedicated server, there is no need to worry about those kind of things.
A switch statement might make sense here. Also you shouldn't repeat the connect call, assign some variables and call connect once at the end. In general, the idea of what you're doing is not wrong.
&gt;they encourage SQL injections by not including a way to bind query parameters You made a complete valid point, then say that?
Use PDO. It's better and the whole mysql_connect family of functions have been deprecated in an aggressive fashion. This looks like an OK tutorial: http://www.phpro.org/tutorials/Introduction-to-PHP-PDO.html
&gt; Depending on the algorithm being used, the distribution of randomness in the salt can have bearing on the strength of the key. This is, to be bet of my knowledge entirely incorrect. Can you back this up? 
You cannot make such a big step (which it is, doubtless) without breaking some backwards compatibility. For example, how would you handle is_object("hello") ? And what about type juggling? floor("10.2") works fine, "10.2"-&gt;floor() will break because the string class does not have the float methods. This is just too far away from the dynamic type system of PHP. Personally I'd love to see objects for strings etc. as an optional feature, enabled via ini setting (autoboxing=on) but as the core had to be changed significantly, this won't happen. Also, "going full OOP" would mean more than that. At least classes and functions should be objects too, to be consequent. But I don't dare to think about the consequences.
Do not make such settings within the code, environment variables and the $_ENV array exist for a reason. Example: .htaccess: SetEnv area development index.php: if ($_ENV['area'] == 'development') { // ... }
Please for the love of all that is holy Google SQL Injection!
Dot syntax would be backwards incompatible :(
Oh please don't promote such ideas as an ini setting. The last thing PHP needs is more ini settings that radically ~~break~~ change code, from one installation to another.
Considering the current state of PHP, the most realistic (albeit messy) option to accomplish this sort of syntax would be to just alias arrow syntax on non-objects to the correct function call. It'd have to be on a per-function basis, because there's not much convention for argument order in PHP (e.g. `"hello world"-&gt;substr(6)` should alias to `substr("hello world", 6)` while `"hello world"-&gt;str_replace("hello", "goodbye")` should alias to `str_replace("hello", "goodbye", "hello world")`). Really though, it's just syntactical at that point. And though, yes, the syntax is nice, what we really want is the OO design the syntax represents, and PHP is just too far along to turn around and implement that sort of thing with a single major release.
This wasn't my question. Im on stack overflow, saw the question, had fun working on it, and shared it. dummy
I can't tell if you genuinely didn't know I meant "SQL injection **vulnerabilities**" or if you're just being a pedantic ass. If it's the former, I hope that clears it up. If it's the latter, please leave.
Dude, everyone knows in PHP, you never go full OOP.
I'd be ok with just the function mapping. I like the syntax more.
I do too, but I wouldn't be okay with it. It's misleading. I believe in high-level programming, but to me that's crossing a line. Also, there's a lot of functionality missing here if you actually want to make people feel like they're being OO. We're talking subclassing, magic methods, `new`, overloading -- missing OO functionality that can't be implemented for "pretend objects". I understand the appeal of what you're asking for in your original post, but the "full OOP" concept is way more than a bullet point in a minor release's patch notes. You have to build the language around this stuff, like Java, and that comes with a whole set of other problems.
I'm confused by the question. 5.3 is backwards compatible with everything except the things that they previously had deprecated for _years_ in 5.2 and then got rid of in 5.3 because that's how deprecation and removal works although PHP's version numbering scheme is strange. Are you saying 3 years wasn't enough time to get ready for the switch then another 2 years on top of that wasn't enough time to update your code to 5.3?
You can create a library of some deprecated functions and their counterparts that will duplicate the functionality, then include your library for these older clients so they can upgrade to newer PHP versions. if(!function_exists("ereg")){ function ereg($pattern, $string){ return preg_match($pattern, $string); } }
I have seen new code written with depricated functions just because "it is the way we have always done it" which really just means the developer was too lazy to learn to do it the right way. Functions are depricated because there is something seriously wrong with them. In PHP depricated funtions are often a security risk. Continuing to use depricated functions is the modern equivalent of wiring down the safety valve on a steam locomotive ; it works for a while, but it can be quite dramatic when failure finally happens.
Honestly at this point Drupal 8 is looming, and as others have stated php has warned of certain things for *years*. The last Drupal 5 update was two years ago, and updates for it ceased with the release of Drupal 7. Run the most up to date version of php you can with Drupal 5, and ignore the rest IMO. This is the price you pay for having something that is frozen in time because no one wants to spend money on updating it.
That's why drupal is adopting many symfony2 components.
"Note: For backward compatibility, the following deprecated alias may be used: mysql_numrows()" -php.net
If its deprecated why the fuck are you using it?
This. I worked on a project and the site changes "modes" at night/day. This is exactly how I did it and it works wonderfully. 
&gt; Also, there's a lot of functionality missing here if you actually want to make people feel like they're being OO. We're talking subclassing, magic methods, new, overloading You don't really need them for most scalars. In Java String is final, and it's rare you ever run into this limitation. Do you really need magic methods for Integer? 'new' is the only one you might run into, and you could easily use some internal magic to turn this into a function call.
I think if they wanted to keep string as a scalar, then this would be the best option. They could just have a fake, final String class, where each method is actually just a defined function call, as you suggested. Keeping it final avoids a lot of issues with inheritance. However there is a difference between if it's really a function call under the hood (which is an implementation detail), and if it auto-maps to functions. I believe your suggesting the latter, and I think that is a bad idea. Even if they are really function calls, any methods should be clearly defined for a String class. At the very least this makes documentation easier to read (all String methods are in the String class). It would also allow better names, such as 'replace' instead of 'str_replace', fixing API differences (like explode takes the string as the second parameter, not the first), and would avoid strange mapping code. For example it would be odd for this to work: function getPostByTitle( $title ) { // db query here } "some blog post"-&gt;getPostByTitle(); ... as it would lead to some very strange code. I'd also have to rip that function out too (and anything it touched), if I wanted to port that string code across to my project. It's also been shown with JS and Ruby that when you start adding to a core class or prototype, it often ends up with a big headache. Finally you can also ban functions from PHP in the ini. Although this is mostly for exec and similar system calls, there is nothing to stop me banning some string functions too. That could easily break a String class, even though I didn't touch (i.e. I banned the function explode, not the String method explode).
Cheers. And you're right about it being a waste of resources to maintain two extensions. So, fuck it, I'm gonna be using mysqli from now on. Not that big of a deal really.
Most (serious) hosting providers allowed their customers to choose PHP5.3 or PHP5.2 for themselves in the upgrade phase, and simply defaulting to PHP5.3 for new customers and 5.2 for old customers.
You could even take it a step further with [`__get` and `__set`](http://www.php.net/manual/en/language.oop5.overloading.php#object.get) methods. But really. Don't. That's already pretty gross.
this is a good place to start - http://xkcd.com/327/ edit - then here http://php.net/manual/en/security.database.sql-injection.php
Why have the query in a heredoc? The kid barely knows what mysql is
No, it was about mysql_ functions encouraging SQL injection vulnerabilities, which is obviously not true and misleading. He's not being an ass at all, you are.
Let's add more functions to the &gt;3000 existing ones: http://www.php.net/quickref.php
I'm not sure you fully grasp the concept of _encouraging_.
It might be because you're downvoting based on opinions and it's greatly frustrating to debate with someone like you. mysql_ functions do not promote whatsoever the SQL injections, it's a completely ridiculous statement. Not providing an automated way to escape data is in no way promoting exploits. It's a design flaw, sure, and it forces developers to be more cautious while using this library, but it does not __at all__ encourage people to be exploited.
I see what you did there...
Constants are, for the most part, standard practice for storing data that never changes throughout the script/program execution. Additionally, constants remain on the global scope so you won't have to say "global $db_user, $db_pass, ..." if you have a function or method that does the connecting. (Although one can argue you probably should be passing these values in the function/method parameters to ensure it's generalized enough to be reused).
Rather than `"10.2"-&gt;isObject()` we could use `"10.2"-&gt;isScalar()`, which for all intents and purposes is the desired answer. Other languages handle type juggling just fine. `"10.2"-&gt;toFloor()-&gt;round(2)` seems perfectly plausible.
I'm guessing your getting only basic styling? It uses client side less, and so fails with noscript.
Clarify, please? You're looking to use the HTTP_REFERRER server variable, or adwords links to different URIs on your site (yourdomain.com/Long-Beach-Island, yourdomain.com/Santa-Monica, etc?)
And he shold be checking if id is numeric and check for file existance i.e. &lt;?php if(! isset($_GET['id'])) { include('news.html'); } else if(is_numeric($_GET['id']) &amp;&amp; file_exists($_GET['id'].'.html')) { include($_GET['id'].'.html'); } ?&gt; So he can prevent something like this: http://example.com/index.php?id=../something which will open ../something.html file. I can't find a way to open a file with other file extension, any ideas?
 &lt;?php $words = str_replace("-"," ",$_SERVER['PHP_SELF']); echo $words; ?&gt; ? 
Is there anything else that needs to be addressed so that the string knows to pull from the URL? I'm not very familiar with the intricacies of this stuff.
You should really be using a switch { } to handle navigation like this... it's a lot safer because you can specify a default if no case match is returned. Example - &lt;?php switch ($_GET["id"]) { case default: $page = "whatever"; $title = "a title"; break; case "news": $page = "news"; $title = "News"; break; case "something": $page = "something"; $title = "Something"; break; } include("/path/to/". $page .".html"); ?&gt;
Well first thing you need to do is set up URL rewriting so all requests go to a single page. You can use .htaccess file for that. Content of the file should be somthing like: RewriteEngine on RewriteRule ^([A-Za-z-]+)$ landing_page.php?referrer=$1 [L] You should name this file .htaccess and put it in public_html folder on your server. Now all request in the format domain.com/blah-blah-blah will be processed by landing_page.php script. And the blah-blah-blah part will be available via $_GET['referrer'] variable. So you should be able to just do a simple string replacement to remove dashes: &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; Hi &lt;?=str_replace('-',' ',$_GET['referrer'])?&gt;! &lt;/body&gt; &lt;/html&gt; If you have any other software like Wordpress installed on the same server it might have it's own .htaccess file. in this case make sure you append RewriteRule ^([A-Za-z-]+)$ landing_page.php?referrer=$1 [L] after all other rules which might be already there
From what I have understoon I will do this. WP has a pretty good .htaccess file that sends all requests to index.php of WP. I will use that htaccess to send all requests to my file. Then I will have a look up table with key being the "Long-Beach-Island" part of the URL. This Look up table will have all the related metadat, strings, images, css or banners etc for my custom domain.com/Long-Beach-Island landing page. If this is not what you are looking for, you need to add details to your question.
I'm not quite sure what your $id variable is of type, but if it is a GET parameter, as the recent commenters expected, you got a serious security leak in your script ;) At least use the example shown from cryonine, otherwise anyone could inject your code with a script from another server like http://example.com/?id=http://blog.lipautz.org/include.html - as long as your server is configured with allow_url_include, see also http://www.php.net/manual/en/filesystem.configuration.php#ini.allow-url-include
Neither Python nor PHP has the "everything is an Object" philosophy that Ruby stole from Smalltalk.
Not necessarily. For the case of ereg vs preg_match it was a matter of the function being replaced with a better extension that had improved speed. Other functions that had security vulnerabilities can be re-made by wrapping their newer counterparts with your own safety measures to prevent the original security vulnerability from showing up. If you could give an example of one of these then I could probably give you an alternative wrapper. &gt; Ereg is deprecated because it was replaced by the the PCRE extension. The reason(s) it was replaced and deprecated is answered in the below link, but to save you some time here is the copy and pasted answer: &gt; Note: preg_match(), which uses a Perl-compatible regular expression syntax, is often a faster alternative to ereg().
That's an incredibly major change to a language (ditching primitives for objects!); I wouldn't expect any language to do this, much less PHP, which is very widely used and has shitty language designers. This is the sort of thing that causes people to create *new* languages - which they have. Also, removing primitives has performance implications.
How about this: &lt;?php include( in_array( $incfile = $_GET['id'] .'.html', scandir( '.' ) ) ? $incfile : 'news.html' ) ; ?&gt; It's compact, and input is validated against the directory contents.
If you do everything, think about how to handle images / CSS / JavaScript files. I don't pass any paths that exist to index.php.
I think I get how you want to set this up, but if my initial assumptions here are wrong just ignore me. *You have one filesystem that's going to handle multiple incoming domains, and you want them all to have their own structure (with direct-everything-to-index.php routing)*. This is easy to do, and I do it for my site(s). At the top level, you'll have directories named for the exact sub/domain they'll serve, so `~/example.com/`, `~/foo.example.com/`, etc. Then, you have an .htaccess next to them with this: RewriteEngine on RewriteCond %{ENV:REDIRECT_ENTEREDSITE} !=1 RewriteCond %{ENV:REDIRECT_REDIRECT_ENTEREDSITE} !=1 RewriteRule ^.*$ %{HTTP_HOST}/$0 [env=ENTEREDSITE:1] [last] From that point forward, the domain someone uses to get to your site determines which directory they're routed to. For .htaccess rewriting below, just include `RewriteBase /foo.example.com/` or whichever domain it's for, then do your rewriting as normal. This way, you can still set "redirect everything to index.php except images/files/css/whatever", and it will only apply to the domain the directory is for. Adding another subdomain just takes making a new directory and setting up DNS. Rereading more thoroughly, you want everything to be routed down from one application, but I think it might still be simpler to have the domains-as-directories setup, and route only within a specific site. Personally it would be much less headache I think, even if you have to deploy changes to the application to multiple directories.
Centralizing is a good idea for security reasons in the long ride. Over handling is not: there is no need to re-process static files with php (css/js/images...).
Can you elaborate a bit, because I'm curious how you would implement it.
&gt; Hi &lt;?=str_replace('-',' ',$_GET['referrer'])?&gt;! What a great way to turn his site into a malware launching platform. The regexp in the RewriteRule doesn't prevent someone from directly passing in whatever they want for the 'referrer' GET arg. http://example.com/landing_page.php?referrer=&lt;script&gt;alert('haha');&lt;/script&gt;
I was being 100% sarcastic anyways :P
Well no shit. yoursite.com/([\.\w\d\-]+) Also htmlspecialchars is a thing that exists nowadays. &gt;Why is this thread full of people who shouldn't be allowed near a webserver? Be a dick more.
Dear sir, could you direct me to some of your sites such that I can add to my collection of malware puppets?
Make sure to use htmlentities/htmlspecialchars with the correct encoding. Certain versions of IE are vulnerable otherwise. For instance, if you're outputting UTF-8 (which you likely should be) make sure to use htmlspecialchars($text, ENT_QUOTES, 'UTF-8').
 $pages = array( 'news' =&gt; array( 'controller' =&gt; 'news' ), 'something' =&gt; array( 'controller' =&gt; 'something' ) ); if ( isset( $pages[$_GET['id']] ) &amp;&amp; ... ) { //do stuff } else { error } 
It'd be nice if input sanity was such a given, but you gave an example of code that unambiguously failed to use it. You printed a value from a superglobal without processing for sanity. If you'd say, used a variable (could possibly have been sanitized before use) I could be persuaded. Otherwise this is what you're saying: &gt;Shoot yourself in the foot. &gt;Obviously you should never shoot yourself in the foot, I don't even need to say that.
Give SASS a look. Its an app that runs on your dev machine and compiles your sass\scss into a .css files. I've been using it at work and it's amazing. http://sass-lang.com/ Theres two types it does, sass and scss. scss is more like real CSS, sass is their newer no brackets crap.
No it doesn't. It only prevents the "bad" input from reaching it via a specific URL pattern. It does nothing to prevent malicious input via, as I said, landing_page.php?referrer=BAD_INPUT.
This seems like an XSS nightmare.
That is correct. Many people think that rewrite rules somehow magically protect them from other injection vectors.
yeah, I'm not too fond of including a file name of the same value that is in the request, even if it is sanitized. There are better options but at the very least I would prefer it look up in a table or an INI file to see what file it should include based on a given value than just include a file with the value in the request.
we do this. we redirect everything that's not an actual file to index.php and then route to a method handler for that URL. i let apache deal with image requests. we're running 40 or so sites through this. no issues.
parse_str() / parse_url() are pretty cool. but for your needs, use a re-write.. so much cleaner.
You mean something like this [Auto Complete](http://jqueryui.com/demos/autocomplete/) ?
Answer: no You want to use vhosts (httpd-vhosts.com or whatever. vhosts are enabled in the httpd.conf) &lt;VirtualHost *:80&gt; ServerName newsite.local ServerAdmin you@newsite.mainsite.org DocumentRoot "pathtowebroot\htdocs\newsite" &lt;Directory "pathtowebroot\htdocs\newsite"&gt; ## Rewrite Rules Here RewriteEngine On ## Permit assets directory to resolve to filesystem RewriteRule ^(?:assets|uploadedfiles) - [L] ## Everything else goes to index.php RewriteRule .* index.php [PT] &lt;/Directory&gt; &lt;/VirtualHost&gt;
You could try some regexes... preg_match_all('/\((.*?)\)\[(.*?)\]/', $html, $links); Then in a for loop you can use something to the effect of... $indexes = array_keys(array_unique($links[0])); foreach($indexes as $i) { $new_url = load_database_value($links[2][$i]); $html = preg_replace('/\(' . $links[1][$i] . '\)\[' . $links[2][$i] . '\]/', $new_url, $html); }
Try to find a good markdown lib. That's probably what you would ultimately want for this kind of thing. 
You can use regular expressions. I created simple function to demonstrate you how you can do it. This is just an example so you will probably need to adjust it for your needs ( sanitize inputs etc. ). You will find function and example on [pastebin](http://pastebin.com/Vm4viLmR). Function you will need is processLinks(). First parameter you need to send is text and second is callback function like replace() in my example. Callback function will be called for every link found in the text and result returned from it will be used as a replace text. If you have some problems with it or need some help ask :) I hope I understood what you want to do. 
the SASS no-bracket style is actually older than the SCSS style. SCSS is actually the preferred newer way to use sass. However I'm absolutely with you, SASS looks much cleaner than SCSS!
Dude, you nailed it! Thank you so much!
I wouldn't say that, actually. I personally prefer a build process which minifies stuff and then the app simply knows to use the compressed version or not depending on environmental variables. I just don't like invoking PHP for every request just to toss a 304 response out, let the webserver handle that stuff, it's already good at it. That said, such a system is usually far more complex and complicated to get setup, and sometimes depends on the framework/system in place, so it's not quite as useful to suggest when someone is first starting out on the minifying path :)
Download CakePHP and see how it does it. There's an very simple index.php in the webroot directory. You could have multiple webroots for each site with the same simple index.php file, along with that sites' css/js/images - no need to deliver files via script.
Just leave RewriteCond %{REQUEST_FILENAME} !-f Before your rewrite rule so actual files can be accessed. You'll end up wasting a lot of time invoking your framework multiple times unless you're caching properly so image requests etc, don't have to be re-fetched every time. Even then, your initial requests are going to be rather slow 
It seems like you would need to be using virtual hosts if you were going to have multiple domains on the same server. How were you planning on running separate domains off of one index.php? Just splitting by REMOTE_HOST or something?
I set up [YUI Compressor](http://yuilibrary.com/projects/yuicompressor) as a daemon that runs via a post-merge git hook when deploying. It works gangbusters.
It's Pythony. There's like a cult of no-brackets in that bunch. 
&gt; floor("10.2") works fine, "10.2"-&gt;floor() will break because the string class does not have the float methods. That's fine. A string shouldn't have float methods. If you have a string and you need to call a float method, use a cast. Plus, some things are just better as functions. is_object() doesn't make much sense a method.
I'd also say Assetic, doesn't only compress, combine and cache but can also use various filters: SASS, Compass, SCSS, etc. Plus it's not just for CSS
Use a symlink, perhaps? Doing this with PHP is slow. What about having a variable in the templates like: &lt;img src="&lt;?=$app-&gt;static('images/derp.jpg')?&gt;"/&gt; Where the static() function returns a path based on the site URL like: function static($path) { return sprintf('%s%s/%s', $settings-&gt;STATIC_URL, $this-&gt;domain, $path); } Or whatever (where $app was your site's "instance")
403 = Forbidden 404 = File Not Found Check your .htaccess file and make sure it's not pointing to the old location. 
Already using CSP here, very happy with it. Does break some stuff, but we decided to work around those for the greater good. Now we can be 100% sure we're protected on modern browsers, but we still do all the escaping for old browsers as well. The biggest bonus is that new browsers can actually report violations when they occur, so the CSP-enabled browsers actually make the non-CSP browsers more secure as well :)
Here it is: ## # @version $Id: htaccess.txt 21064 2011-04-03 22:12:19Z dextercowley $ # @package Joomla # @copyright Copyright (C) 2005 - 2010 Open Source Matters. All rights reserved. # @license http://www.gnu.org/copyleft/gpl.html GNU/GPL # Joomla! is Free Software ## ##################################################### # READ THIS COMPLETELY IF YOU CHOOSE TO USE THIS FILE # # The line just below this section: 'Options +FollowSymLinks' may cause problems # with some server configurations. It is required for use of mod_rewrite, but may already # be set by your server administrator in a way that dissallows changing it in # your .htaccess file. If using it causes your server to error out, comment it out (add # to # beginning of line), reload your site in your browser and test your sef url's. If they work, # it has been set by your server administrator and you do not need it set here. # ##################################################### ## Can be commented out if causes errors, see notes above. Options +FollowSymLinks # # mod_rewrite in use RewriteEngine On ########## Begin - Rewrite rules to block out some common exploits ## If you experience problems on your site block out the operations listed below ## This attempts to block the most common type of exploit `attempts` to Joomla! # ## Deny access to extension xml files (uncomment out to activate) #&lt;Files ~ "\.xml$"&gt; #Order allow,deny #Deny from all #Satisfy all #&lt;/Files&gt; ## End of deny access to extension xml files # Block out any script trying to set a mosConfig value through the URL RewriteCond %{QUERY_STRING} mosConfig_[a-zA-Z_]{1,21}(=|\%3D) [OR] # Block out any script trying to base64_encode data within the URL RewriteCond %{QUERY_STRING} base64_encode[^(]*\([^)]*\) [OR] # Block out any script that includes a &lt;script&gt; tag in URL RewriteCond %{QUERY_STRING} (&lt;|%3C)([^s]*s)+cript.*(&gt;|%3E) [NC,OR] # Block out any script trying to set a PHP GLOBALS variable via URL RewriteCond %{QUERY_STRING} GLOBALS(=|\[|\%[0-9A-Z]{0,2}) [OR] # Block out any script trying to modify a _REQUEST variable via URL RewriteCond %{QUERY_STRING} _REQUEST(=|\[|\%[0-9A-Z]{0,2}) # Return 403 Forbidden header and show the content of the root homepage RewriteRule .* index.php [F] # ########## End - Rewrite rules to block out some common exploits ########## Begin - Custom redirects # # If you need to redirect some pages, or set a canonical non-www to # www redirect (or vice versa), place that code here. Ensure those # redirects use the correct RewriteRule syntax and the [R=301,L] flags. # ########## End - Custom redirects # Uncomment following line if your webserver's URL # is not directly related to physical file paths. # Update Your Joomla! Directory (just / for root) # RewriteBase / ########## Begin - Joomla! core SEF Section # RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}] # # If the requested path and file is not /index.php and the request # has not already been internally rewritten to the index.php script RewriteCond %{REQUEST_URI} !^/index\.php # and the request is for root, or for an extensionless URL, or the # requested URL ends with one of the listed extensions RewriteCond %{REQUEST_URI} (/[^.]*|\.(php|html?|feed|pdf|raw))$ [NC] # and the requested path and file doesn't directly match a physical file RewriteCond %{REQUEST_FILENAME} !-f # and the requested path and file doesn't directly match a physical folder RewriteCond %{REQUEST_FILENAME} !-d # internally rewrite the request to the index.php script RewriteRule .* index.php [L] # ########## End - Joomla! core SEF Section In theory, why would it not work if the directory/file structure is the same? 
You sure the DB is connecting? In the (thus deleting Joomla files) bit, did you actually delete the Joomla files before you moved the WP files into / ?
Nope :( Do you think that Apache needs to be restarted? I wish I had physical (slash SSH) access to the server, but I can't even see the apache logs which is unfortunate.
Minify should serve most of your needs - but if you're looking to reduce some of the redundancy, take a look at [LESS](http://lesscss.org/).
Initially I thought it will be some sort of another magic_quotes type of bull shit. But CSP actually does make a lot of sense. Too bad we can't rely on it while IE9,8,7 is still in use.
Can you reach the .php files if you rename of your .htaccess?
If you're gonna go through that kind of trouble, you probably should consider using nginx in the first place, then your static assets can be passed through while your main app can be handed off to php/fastcgi.
Nope. 
That means that there's another issue. If a trivial phpinfo.php file (with just phpinfo() in it) returns a 403, that *probably* means that your permissions are wrong. You should doublecheck that they are what they should be on both the files themselves (664 or 644) and the containing directory (775 or 755), and owned by the correct user. That's the most likely situation. 
viper-7's codepad is a tool I use almost daily when helping people out in #php.
This is what we have used as well.
I would also recommend this one, which kind of goes along with OP's situation of using myql_connect and needing to switch to pdo: [http://net.tutsplus.com/tutorials/php/php-database-access-are-you-doing-it-correctly/](http://net.tutsplus.com/tutorials/php/php-database-access-are-you-doing-it-correctly/)
&gt; Of course but I was referencing the suggested backwards compatibilty Yeah, I don't think we need backwards compatibility here (it's a waste of a good opportunity). &gt; I did not talk about an is_object() method but about how old code would possibly break: is_object("foo") == true There is no value in having scalars be full objects in the sense of being `is_object("foo") === true` or being able to be subclassed. There is *some* value in just adding methods to scalars as a way of cleaning up the API. 
[PEAR's PHP_Compat](http://pear.php.net/package/PHP_Compat) used to be awesome for this (it provides all of the missing functions, with identical behavior, and you just tell it which version you want to target), but I'm not sure if it's still maintained as I haven't used it in a few years.
If PHP doesn't work after renaming your .htaccess file, then I would contact your host. Who is your host?
That's the plan. And that's also a good question. I'm helping a friend out with the behind the scenes version of the site who is doing it for someone else. Some Spanish host. Apparently they're going to get it sorted out. Thanks for the help though, I really appreciate it!
Have you checked your WP-config file? If the WP functions are set to the wrong relative directory, your system will be pretty well gummed up...
[Smarty.](http://www.smarty.net/)
It would be useful if you changed the value of the submit button to something like "Run" instead of "Paste". It took me a little while to figure out that was how to run the code.
Even with no files on the server I get the same errors :/
You'll have to use ajax to submit the form while leaving the user on the page. Found this nice [tutorial](http://www.queness.com/post/160/create-a-ajax-based-form-submission-with-jquery) that should get you started
For complex pages, I have a class that handles building output (giving it a $content variable and having the templates built around it and finally echoed out). For Ajax / Simple pages, I tend to just store the output in a variable and echo it out as needed. I've tried the whole drop in/out of PHP method before, it ends up getting really messy really fast.
I second this, MVC is the way to go.
[ThickMustache](http://github.com/mardix/ThickMustache): A logic-less template system. Super easy
There are so many suggestions here that I don't even know where to start. Again, I'm in Wordpress so the re-write should be pretty straight forward. Parsing the URL/STR should be straight forward but then I open myself up to people trying to input strings of data into my site. I'm sure some other blogger or website owner has had this problem. So I'm sure this has to be simply and concisely documented somewhere. Any idea?
http://twig.sensiolabs.org/
There is a reason it became trendy to separate technologies and ideologies (not only html from php). Considering you don't have any formal training... train yourself to what is currently in common practice. Otherwise, in the long run I guarantee you, you will feel you've lost time. Again, train yourself to common actual programming practices and you will figure reasons in the way.
Template engines tend to piss me off. I'd rather keep a nice clean MVC framework going and then echo out variables passed from the controller with a few clean foreach loops here and there. Php is a mighty fine templating engine in itself if you use it wisely - especially if you do the bad thing and use those sexy forbidden depreciated &lt;?= tags... mmm... I agree with your "No"-s though, no html is being echo'd by my scripts.
&gt;It's a great template engine and something OP should definitely look into. Sorry, I just cannot agree with such a statement. It just misses the mark completely. For instance, one common argument smarty supporters tend to make is that the designers don't have to learn the PHP syntax. This is true, but what they substitute it with is just another dialect; an abstraction which often just wraps the PHP syntax directly. In the real world, it doesn't make any difference to the designer whether he or she learns smarty or the few PHP commands needed to output the data. 
Do you know your .tpl files can be "browsed" on your server. You should better have them in some server recognisable file format or make your server treat them as PHP or have .htaccess. I would prefer having them in .php extension, why make server do something extra.
I third-ed you.
I usually name them .phtml myself. The code was just a quick and dirty example, nothing more. The ".tpl" was just intended as a placeholder file exension for whatever your own preference might be. I changed it now, happy?
The fact that you're getting millions of hits does not mean that you are doing it right.
Thanks - I'm working through troubleshooting my form. Seems to create lots of odd question marks. [Imgur](http://i.imgur.com/0z42V.png)
Mine has a few other options as well, but the basics are the same. I implemented a /DefaultSkin and /Sites/&lt;SITENAME&gt;/Skin type schema for overriding default display for a larger codebase supporting multiple sites for admin templates, etc...
~~.phtml can still be browsed. You have to explicitly serve the content as text/php, or do the much, much simpler thing of naming them .php, which also allows IDE syntax highlighters to work with them without special configuration.~~
That's actually how CakePHP does it, very nice to work with.
http://i.imgur.com/jJpKe.jpg
&gt;.phtml can still be browsed. Uh. No. phtml is a recognized PHP file extension. It's parsed by PHP by default, and it works fine in the IDEs. Heck, it's even used by the major frameworks, e.g. Zend Framework. 
I buck the trend and use print as much as possible.
I stand corrected, many apologies. I assumed it was an ad-hoc extension that you'd just sort of made. Downvoted myself to compensate.
This is almost exactly how my index page looks. :) I feel like my site is entering a complexity threshold that may require a more nuanced approach though. Everyone here is suggesting that I use a template engine, and but I'm having a hard time grasping what it is. I think I need to do some more reading. 
Can you perform ANY sort of queries? In your first sample of code, does $result_2 = mysql_query($sql_2) or die("Error: " . mysql_error() . "&lt;br&gt;"); even ever complete?
+1 for zend config, it's great
Is there really a "right" way to do php though? I mean, if it works isn't it right?
The biggest problem with php is that it's so easy to do things wrong and have them still work. Then when it comes time to add on to your code things don't line up and you end up hacking it in, and then more additions and more hacking and THEN you either lock it away for a couple months and forget what the hell you were doing or somebody else takes over the project and subsequently kills themselves. Then there's the topic of efficiency - all of those string concatenations add up, especially over millions of hits. When done correctly you're just dumping raw html and a few variables to the output buffer.
You *could* try something like this: DELETE FROM tempTable WHERE account_no IN (SELECT account_no FROM tempTable limit 10) And just put that in a php for loop or something. However, from what you have described, I think your database is toast. You might try entering single user mode ... that *might* allow you to work on the table. EDIT: more thoughts: You could also select all of the account_no into a static file on the file system, one that is complete, have php load all of the id's and auto generate individual SQL delete statements for each one, write that to a file, then execute the file ... ?
that's some hardcore redditing right there. not many downvote themselves. 
You monster.
You should probably put a notice on that post to click the link before people start disagreeing with you, I know I certainly did :P Stating '`template engine`' makes it seem like there's some kind of third party involvement (Smarty), as compared to '`my own template class`'.
fuck Smarty. Seriously. Holy shit. I was handed a site once and told to "make it work" and it was written in Smarty. Granted this was about 6 years ago, but it was the most convoluted mess I've ever had to deal with. I refuse to even look at smarty code anymore.
It isn't. Though, to improve on your PHP: &lt;?php if ($in_ca): ?&gt; Well, $&lt;?= $taxed_value ?&gt;, after taxes. &lt;?php endif; ?&gt;
lol. You don't write code i Smarty/Twig, you output data. The project you worked with had it all wrong :P
Yes, I am quick to shoot down any mention of templating engine after dealing with the stupidity of Smarty. A class like this to handle the view/template is perfect and *thee* way to do it 99% of the time. Especially when it's done cleanly as in Nicoon's example.
It will make your delete operation extremely fast. create index acct on customersTable (account_no); delete tempTable from tempTable join customersTable using (account_no);
&gt; This is true, but what they substitute it with is just another dialect Just like every templating language out there.
&gt; PHP is designed for templating and it is extremely good at it. How is it designed for templating? Just because you can echo out inline doesn't mean that it was designed for it.
again, how is that an improvement? How is ":" better than "{" and how is "endif" better than "}"?
I use Mustache.php to print it. :s
Smarty's just another tool: if used properly in the right situations it can be great, however if placed in the wrong hands... Sounds like you got to deal with the latter :P
I actually hear a lot more people that hate smarty than love it. I've never cared to revisit it because I've never found that the benefits outweigh the drawbacks. There's just too many better things out there to use than to bother with Smarty, again.
Wow. Surprised to see another template engine that supports extending a template like [Dwoo](http://dwoo.org/).
I actually like Smarty. To me, it makes things pretty simple IMO.
they don't compile down to the same https://gist.github.com/2889005
Actually, you seconded his second.
That doesn't always work too well in templates, matey. That's why you use the alternative syntax in views and the regular syntax in plain PHP files. 
I built this into my request parser years ago.
I return response objects that contain Views, XML objects, or JSON arrays and the system takes it from there. Nothing is every printed directly since there are many formats that the user might have requested. if($format === 'json') { $view = $rows; } elseif($format === 'xml') { $view = new MyXML($rows); } else // html { $view = new View('path/tofile.php'); $view-&gt;rows = $rows; } return new Response($view);
I present to you limonade: http://limonade-php.github.com Doesn't enforce MVC by default, but I've made a pretty sweet mvc setup for it without taking too much time and startup. I agree setting up symfony or a huge framework is a pain in the butt for something quick and simple, but something "quick and simple" to our standards is something that turns out to never be "quick and simple" in terms of what the boss man wants, so it's best to keep some sort of organization in the event that you need to be more organized.
I'm happy this topic got posted, even happier for your response. I'm a bit of a newb with PHP and this type of programming, I've been trying to figure out how/what MVC is. I also am dabbling in .NET at work and have chosen to not bother with webforms and to try my hand at MVC 2. I don't quite follow your code since I've been procedurally writing all my PHP, but now I'm thinking I should move towards OOP. Right now I have a webpage/site hosted from home. I'm probably 100% wrong in how I'm doing this, but let me explain how I have it setup. I have a basic "template" I'm using, which is the html and css code for the head and formatting of my website. I then have a folder where I have php scripts that insert cookies, login users, etc. Most of my pages basically check to see who the user is, then it pulls from my database certain variables and I use the include() function to grab the other parts of the page that will be viewed. I'm not sure if I've explained that well, if you wouldn't mind helping me out here, I could give a better example when I get home. I've now read a ton about MVC and I'm just having a hard time understanding exactly what it is. I'm guessing Views is going to be mostly the markup (html, css), but what exactly is the model and the controller? Is the model my SQL database? or is it a link between my site and the SQL database? Is the controller basically the scripts? From what little I've described about my situation, does it sound like I'm heading in a bad direction?
I can't imagine ever having code like that, though. I don't really understand the need for templates in most cases because between outputters for typical data and internationalization, I'm never echo'ing raw HTML anyway. // lower() adds a huge amount of overhead to sorts and it's irrelevant // in mysql if using the correct collation $sql = "select lname, fname, zip from schema.customers order by lname"; $results = $this-&gt;db-&gt;query($sql); $table = new table; $table-&gt;class = 'customerList'; $table-&gt;alternate_row_colors = true; $table-&gt;headers('Last name', 'First name', 'Zip'); $table-&gt;rows($results); echo $table;
Using PHP for 13 years and still putting SQL in the same file? Horrible practice
Another: * Using extract() is almost always wrong. It leaves no context of what variables are now available in the current scope. Stick with the array.
I like this idea. I don't currently know of any system that does this.
Review the history of PHP. It was designed for inline HTML templating. I dont see a difference between &lt;?= $foo ?&gt; and {{ $foo }} or &lt;?= trim(ucwords($bar); ?&gt; {{ etc. }} . The thousands of string/array manipulation and templating features php offers make it vastly more powerful than most other programming languages for templating (esp. smarty). Most large organisations I have worked at (and many others) use PHP for this almost solely, with their backends in java/c++/etc. delivering a rest API which is then effectively templated-in with PHP. 
Just make sure you don't use it on any kind user submitted data. Some people make the mistake of: extract($_POST); Which can in some situations create many security issues, it's something that should be used carefully. I'm not saying you didn't see the warning in the docs, It's just a friendly note in case you didn't because it's important.
Meh, if I screw up I don't deserve karma. That kind of blew up in my face though, I shouldn't have said I downvoted :/
I like this idea as well...
But... but I... :'(
If it's downvoted it's still there. I know I always click through every comment, even the downvoted ones. Besides it didn't really work, people upvoted it for some reason... 
The model is the code that retrieves data from your database The controller is the code that calls the model The view is the file containing the html/css/javascript that the controller loads (model data will be used in the view) 
what?