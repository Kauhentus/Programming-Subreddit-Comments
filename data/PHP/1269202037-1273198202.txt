hmmm, i'm with dreamhost, is there a way to circumvent this?
Thanks guys. I'll check it out.
Thanks for taking the time, I appreciate the response. I think dreamhost will let me run ffmpeg, so I might try that. Going to check out youtube API also.
Dreamhost will kill your site fast if you're encoding videos with it. That's a very resource intensive process.
Duly noted. I just opened an account with them yesterday (unrelated to this video encoding need). Thx.
Check this: http://www.google.com/#hl=en&amp;source=hp&amp;q=vps+ffmpeg&amp;aq=f&amp;aqi=g1&amp;aql=&amp;oq=&amp;gs_rfai=&amp;fp=7a0f3b167a3fb4f3 VPS with ffpeg might be your best route. It's a step above shared hosting, but if they provide ffmpeg, they're somewhat setup for the task - meaning 10-15 clients per-server max
It is. I've been lead dev at a company running a video conversion service for the last year. We're using ffmpeg, which is very reliable for flash transcoding from several different codecs/containers, and doing it on very modest hardware. And we've done it at the expense of zero souls.
yeah, I run dreamhost for [gifexplode](http://www.gifexplode.com), and often imagemagick gets killed for using too much processing power just spitting a gif into frames. don't even try on shared hosting would be my adivce. It's not just a DH thing, it's any shared host who cares about their servers; you can't blame them.
You could offload the video encoding to a cloud provider: http://www.encoding.com/
I have done this in the past with ffmpeg. The quick and dirty of it is, I used APC for rfc1867 support (upload progress bar). The video upload actually took place in a pop-up window and would display a progress bar. At the end of the upload, the PHP script would run a bash script that forked off ffmpeg (and another small script that would move and rename the video) and returned the pid of said fork. The PHP script would store the PID, display a message that the video was converting, and then close. The actual application on the video page would check for the pid in the database, if the pid number was set check and see if said process was running. If it was, display a message that the video was converting. If it wasn't running and the video file is not present, display a fatal error. If it wasn't running and the video file was present, go ahead and clear the pid and display the video. Granted this only works when ffmpeg is on the same webserver.
Whatever you do, don't convert the files on-the-fly. After the source file is uploaded, add it to a queue for processing. This way, if something goes wrong and the conversion process dies, you can restart without losing any data. It also makes it much easier to split the transcoding work to another machine (preferably one that is not also serving the site files and/or database) or, if necessary, split the work up among several machines or slices. At the very least, using a queue will allow you to prioritize when conversions occur, so you can schedule them for early morning rather than peak traffic times, etc.
what if $addiction starts with a vowel?
A better solution might be to pass $var by reference and clear it's contents inside the function(thus making the code appear more logical).
and a point for you.
Indeed. The real sting in the tail though is that you can have all the CSRF countermeasures in the world, but if your site has an XSS flaw then they can be cirvumvented, fairly trivially.
Incase you missed the link at the bottom of the page, the code is [here](http://www.asciiqr.com/source.txt).
Not working for me, it renders like [this](http://img.skitch.com/20100323-fps84df1q3kfb5aq53q8gucxea.png) in Chrome on a Mac. 
Oh damn-it, and I have no mac to test on.
You're absolutely right. PHP got a bad rep for some of the truly bizarre constructs that existed in 3.x and 4.x iterations. People who tried it then (who had some programming background) got frustrated and vowed to never try it again and became evangelists determined to destroy it because it pissed on their narrow view of "how things should be". Plus it *does* have a low barrier to entry that made it easy for hobbyists and script kiddies to concatenate a few variables and read from a text file and call it "programming" like they call HTML "programming". As a result, alot of what you see on the net is nothing but procedural crap riddled with security holes. But to most people that's "good enough" and so it never moves forward because they either can't or don't want to grasp best practices and OOP. A few months ago I went through some old backups and found some ancient PHP I wrote when I started out on it around 1999 and I was doing exactly what most people complain about. But I didn't stop there and say I knew everything. I kept learning. PHP has paid my house off. While you are right in what these people *should* be hating (the bad coders) I think that's morphed into a hate for the language for some bizarre reason. But then, I learned long ago that it's fruitless to get into a platform evangelism argument on the Internet because there are more important things in life than constantly evangelizing the one thing you understand and knocking down everything else as "stupid" or "useless". We need less noise on these things and more work done on moving forward. Windows vs. Mac vs. Linux. Who cares? They all have plusses and minuses. If ASP or VB works to solve your particular problem go for it! If PHP is the right tool for the job then go for it. What a boring world it would be if all anybody was ever allowed to use was J2EE on Linux with Oracle. And that's why I don't get all these platform wars. Is that what people really want? Less choice? Anyway, I have better things to do with my time than care what some Internet wannabe tough guy decides to write about my particular area of expertise. It used to bug me, but now I just don't pay any attention to it. On the other hand, I think we can all agree that IE sucks... :P
Just wait until they define `E_SUPPRESS_ALL_EXCEPT_FATAL` :) (That page suggests using `2147483647` on external configuration files which don't have the constants applied. I would argue that just using `error_reporting(E_ALL | E_STRICT);` makes more sense in a PHP file)
Looks good, but I couldn't find a demo on the page. Since I am new at PHP, it could help a great deal. Can someone help?
You're totally right, I've added links to a demo. Thanks for the tip!
It worked fine for me, Chrome on Mac. 
I ran into major problems with this last year using tcpdf. Arial Unicode MS had the best support for multiple languages, the problem is you have to include different versions of it depending on if you want to support korean/japanese/chinese. There was no one font fits all solution. In the end I switched to wkhtmltopdf as it was the only way to support characters from multiple languages in one file. 
if you want use your memory like that, please use a more system-closed language, like C++.
Thank you and bravo let me tell you how impressed I am by the quick reaction!
Wkhtmltopdf saved me from insanity, writing html = much easier than TCPDF and it gives you the option to offer html reports with no extra code. I'm not sure if it embeds the fonts within the generated pdf, if it does it must only be the characters that are actually used in the document, as each generated pdf is much smaller than a full font would be. 
Okay, but the thing is that most of the snobbery over PHP being inefficient comes from people running, like, Ruby. Which last I checked is not efficient.
I was the least I could do! I appreciate any and all feedback. Next part in the tutorial will be a lot of fun too :)
With Cron?
Yup.
Is there any way to have oracle spit out debug information on why a connection is being dropped? As an aside, is this PHP 5.3 by chance?
I don't think writing your own framework is the best solution in 99% of commercial projects. I also would note that I learned ALOT about security checking, cleaning data, and so on by reading the code of frameworks. I haven't used Kohana at all, but I have enjoyed Yii in some of my projects. I do agree that Yii has some difficult to digest documentation, but you learn to navigate it the more you use it.
Do you not have error_log generated when this happens?
What version of Oracle are you running? In 11g you can set up Fast Application Notification support.
 ▄▄▄▄▄▄▄ ▄▄ ▄ ▄▄▄▄▄▄▄ █ ▄▄▄ █ ▄▀▄ █ █ ▄▄▄ █ █ ███ █ █▄▄▀ █ ███ █ █▄▄▄▄▄█ ▄ ▄ ▄ █▄▄▄▄▄█ ▄▄▄▄ ▄ ▄▀█ ▄ ▄▄▄ ▄ ▄ █▀▄█▀ ▄ █▄▀█▀▄ ▄█ █▄▀▀▀ ▄▀▀ ▀▄▀▀ █ ▀ ▀ ▄▄▄▄▄▄▄ ▀ █ █▄▄██▀▀▀ █ ▄▄▄ █ ███▀▀█▄█▀█ █ ███ █ ██ ▄ █ ▀▄▀ █▄▄▄▄▄█ ██ ██ ▀▀█ ▄ ▀ 
Nagios might be better for this. There are oracle plugins for it. http://www.nagios.org/
It is 5.3
I'll take a look at Nagios. This is more of a temporary thing, so I'm not sure I want to go through Nagios setup.
It is 11g. I'm trying to keep this check script completely off of the 11g server. I may be misunderstanding what fast application notification does.
I had some funky issues with 5.3 on Windows &amp; mysqlnd doing weird stuff; however the recent version (5.3.2) seems to resolve it. If you can determine an actual architectural problem it'd be worth a bug report
Scroll down to the bottom of this page: http://php.net/manual/en/oci8.connection.php As long as it is turned on you can handle it via PHP.
If you cannot stand on your choices alone, but must bring others down in an attempt to prove why your choices are best, you've made the wrong choice. Also, ASP is for fools.
No. Just no. I don't even know why anyone would do this in PHP? edit: Did I hurt your feelings by saying this?
It's a script to track your resume with. You can access it by doing /image.php?img=example.gif. This way it takes all possible info and writes it to a file. The problem is, it is writing the same message twice! Any reason it's doing that? Thanks P.s: be sure to have a gif image (any gif image will do) called "output.gif" in the dir. **Update:** see [here](http://www.reddit.com/r/PHP/comments/bi3ae/reddit_why_is_it_writing_the_same_message_to_the/c0mvdr5)
how DARE you? do NOT leave a negative response unless you are pairing it with a USEFUL SUGGESTION. vagabond!
perhaps it's all the knowledge the user has, great master, or maybe he has no shell access...or maybe he just wanted to piss you off!
I've just tested it, but the message is only printed once ?
What? for me it really does it twice. it loads the image, but the loading bar on the bottom keeps on running, suggesting its doing it twice.
When I remove the part where is loads the image instead: header("Content-Type: $mimetype"); echo file_get_contents($outputimage); Then it only writes once, how come?
I had an issue like this when I wrote an image counter for my signature, some browsers use multiple connections to make the file load faster so it hits the file twice instead of once.
Is $outputimage really "output.gif" and not "yourscript.php"?
Maybe that could be it. I'm using the following .htaccess to generate dynamic filenames, which you in turn can define in the script: RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^(.*)$ image.php?img=$1 [L] Maybe because it calls output.gif (which is an actual file) it performs the script twice. Edit: Nope, thats not it, I removed the htaccess and executed as /image.php?img=example.gif, it still writes twice.
I just tried it with a gif image of 1px, and it still writes twice.
**This seems to be it** Even though it is only 1px, it seems to open 2 sessions. I just tried with iexplore, and it only wrote once. Now, how to tackle this issue?
Are you using Firebug? Some versions have a double submit bug (I haven't looked at your code) if you're posting stuff, and it does it twice.
It's because on a different page you are also running this code. do a global search in your project for &gt;fwrite( and see what comes up.
I am using firebug, but disabling doesnt help. Same for greasemonkey. Personalyl, I think it shouldnt matter because it doesnt do it twice when *file_get_contents($outputimage);* is removed.
nope, as you can see in the source, I'm only using 1 fwrite
What about the page that brings them to this page
There is no page that bringes them there. It's the htaccess that I posted a bit below to make it seem like a legit image.
You can modify your firefox settings (you would have to research it), or you could log ip's and only count once per ip if its within &lt; 5 seconds of loading.
Any idea on how to do that when looking at my script? It does a pretty raw filewrite.
You could have to maintain a separate database for it. Maybe write a second log with the time stamp/ip and grep their ip and figure out the time difference. Also I would have the script auto unlink (delete) after 2-3mb or maybe archive it.
 $baseVar = "a"; foreach($array as $aName) { $accessor = $baseVar.$aName; $foundVar = $$accessor; } 
 foreach ($array as $name) { ${'a'. $name} = 'foo'; // or: $prefix = 'a'; $foo = ${$prefix . $name}; } Note, you can also use this syntax for object properties: $object-&gt;{$prefix . $name} = 'foo';
I know that its not quite what you asked for, but there's built in functionality if you can use associative array: http://us3.php.net/extract $a = array('cat' =&gt; 'fluffy', 'hat' =&gt; 'fedora'); extract($a, EXTR_PREFIX_ALL, 'a'); echo $a_cat; echo $a_hat; 
so many people are being helpful with an answer, but WTF are you trying to accomplish?
I don't exactly follow what you are asking. you want to append the letter a in to the front of each array element?, or do you want all of the array elements to be their own variable (sort of like register globals)
One doesn't. Not because it's not possible, but because it's not good.
And there is array_flip() which turns values into keys, so this would be better solution than foreach.
One wouldst retire to thine drawing room, upon which thereafter thouest would thurneth on thine computre and subsequently askest thee holy Reddit. **One** is my favo(u)rite plural pronoun! One thinks it's spiffy and is quite amused especially when [it's is used in the context of computers](http://en.wikipedia.org/wiki/Shakespeare_(programming_language)).
you're most likely doing something wrong, you should find another way of doing whatever it is that you are trying to do
What you are trying to do doesn't make sense. You want to create a var for every value in an array? Here's the only thing I can think if that is useful and somewhat related $vars = array(); $vars['apple'] = 42; $vars['banana'] = 3.14; $vars['coconut'] = 69; foreach ($vars as $k=&gt;$v) { $$k = $v; //this is the trick, $$var references a var that is named $var. } has the same result as: $apple = 42; $banana = 3.14; $coconut = 69; Next time try stackoverflow.
The title goes to the php.net page that explains exactly how to do that, so I don't think he's actually asking anything, just linking it for other people to see. Leaving that aside, I can't think of a situation where you'd need to do something like that (and not have any other, better solution).
All these complicated solutions; just use [extract()](http://uk3.php.net/manual/en/function.extract.php) and give it a prefix. extract(array_flip(array('hat', 'cat'))), EXTR_PREFIX_ALL, 'a');
and that is why you will never be the author of a sentient program
Check the rss feed - there are direct links to download the videos in Quicktime format
I have a [multiple item select list parameter](http://docs.joomla.org/Adding_a_multiple_item_select_list_parameter_type) of columns to show. In the view, before I decide to show the columns, I have a set of boolean variables all set to "false": showcol1, showcol2, showcol3. I am iterating through the multilist to find selected columns and setting ${'show'.$columnName} = "true"; so I can quickly decide to show the column or not. Any suggestions on a better way to do this?
Use an array. That's what they're there for.
Or just use extract($vars);
I am familiar with Collections in other languages. Would iterating through the array (of &lt; 8 items) at each decision be faster?
PHP arrays work like hashes. So you can do $column[$columnName] = true;
Don't be confused by PHP's idiotic naming; arrays are actually hash tables (and arrays, all at the same time).
I do PHP 9-5 and I gotta say I hate the language. It's cluttered, disorganised and inconsistent. The only decent bits seem tacked on as an afterthought. Beyond that the dev community can't decide if they are coding Java (every damn class has a getFoo/setFoo) or Python. It's as if someone built a language by adding half baked copies of whatever language is popular that year onto Perl. Another annoyance is the spotty state of the community. You have a huge range of skill levels that call themselves "PHP developers". I cringe at half of the advice that gets dolled out on IRC and the various forums I lurk on. I took a screen shot from this forum to prove this point: http://imgur.com/lbvlM
* Everything is not an object arrays are copied when passed while objects are passed by ref. * Exceptions are not universal, $arr['key'] will not throw an exception. * Shitty syntax like -&gt; * Useless syntax like $ * "Features" that promote unreadable code $$my_object-&gt;$someFunction('confused?); * "Features" that promote laziness: autoload. * Lack of other good features like namespaces (until 5.3) means that the community has to create their own solutions. * Drupal * Drupal * Drupal
[Selenium RC](http://seleniumhq.org/) is fantastic for running functional tests through the browser experience. There's a firefox extension to help develop the tests which can then be easily converted over to PHP with PHPUnit integration.
We use Selenium, and it works great for us.
Agreed ... Selenium for functional testing but JMeter for load testing.
For load testing, I usually just run siege. Selenium is nice for functional testing, or you can use SimpleTest's WebTestCases, if your interface isn't too heavy on Javascript.
[I think so](http://lmgtfy.com/?q=google+docs+api)
&gt; Dealing with character sets and encodings is tough. As long as you're dealing only with English texts you in a luxury situation and can mix utf-8 and iso-8859-1 encoded texts and most (all?) of your tests will work. Some of your users, like me, with strange names ("Schlüter") will be annoyed as your application breaks them ("SchlÃ¼ter"), but these will be edge cases. There are bigger issues with mixing encodings but that's not what I wanted to tell now. I have a headache from banging my head on the table after reading this paragraph.
I'd read up on ORM, that might help you understand how it would be done in that way with object relationships defined by database relationships. DoctrineORM/CakePHP have some good tutorials, but reading through those, the types of associations and relationships would make sense.
Doesn't sound like all your tests will work then unless you're hoping for wrong answers. 
A) why would I hope for wrong answers and B) huh? The point is that mixing utf-8 and iso-8859-1 is BONKERS, and considering corrupted umlauts an "edge case" is a horrible design policy.
### ☹
After years of dealing with this on a daily basis I think it's safe to say that if it wasn't for the mbstring extensions PHP would be useless. It's hard to notice there's even a problem if you're using English exclusively, but if you're not you start running into a whole set of excruciating issues that you must work-around manually.
http://framework.zend.com/manual/en/zend.gdata.html
Why run it with cron? Just run it, have it [fork](http://php.net/manual/en/function.pcntl-fork.php) a shit load of processes and hammer the DB... in the /etc/php5/cli/php.ini just set the max execution time to 0 ;)
Generally, you don't want two objects to be dependant on one another like that... I suggest making each be able to be used independently. If you feel one really needs the other object at some point, have the option to pass an instance to it as an optional var. 
Dude... learn how to use a pastebin... 
Better http://www.google.com/search?hl=en&amp;q=google+docs+api+php&amp;aq=f&amp;aqi=g4&amp;aql=&amp;oq=&amp;gs_rfai= 
I haven't used it, so I'm really just guessing, but does this answer your question: http://framework.zend.com/manual/en/zend.gdata.gapps.html#zend.gdata.gapps.users.creating
Ironically, this is how it appeared on my (fucked up) work machine: http://imgur.com/pGYO3.png (my fonts periodically break).
now _there's_ an acronym for the ages
...and i particularly enjoy how the site is hanging
Why you getting downvoted for a better search?
IE6?
&lt;/shameless self promotion&gt;
What advantage does it offer over PDO and prepared statements?
Nearly nothing, if you're already familiar with PDO. In fact, the API is very similar to PDO, albeit a little bit simpler: e.g. you can run unprepared parametrized queries in one function call instead of going through a prepare &amp; execute cycle. Basically this is a poor man's PDO, geared towards small time web developers (like me) whose projects often end up in a shared hosting environment selected by the client -- where you can't rely on the availability of anything other than the most basic extensions. Yes, there are still some places that don't have pdo_mysql.
mysqli has prepared statements you know.
Which is extremely tedious to use. Prepare a statement, bind variables to each placeholder, execute the statement, bind variables to each column of the result set, wash, rinse, repeat. It might be the "correct" way to do it, but it's tedious nonetheless. PDO does much better than that. Besides, MySQLi isn't available everywhere, and until PHP 5.3 some of its functions only worked properly in procedural style. [edit]
MySQLi's prepared statements are pretty fucking dire. I suppose this is useful in places that don't have PDO, though.
&gt; // Check if the same connection object is already cached. &gt; &gt; $identifier = md5("$host::$user::$pass::$database"); &gt; if (isset(self::$handles[$identifier])) &gt; { &gt; return self::$handles[$identifier]; &gt; } So I can't create more than one connection to a database. Why? &gt; (...) new MySquirrelDriver_MySQLi($host, $user, $pass, $database, $charset = false); Let me guess. You didn't test this, did you? &gt; private $host; &gt; private $user; &gt; ... Why *private*? Is there any particular reason why I'm not allowed to extend your class? &gt; $select_db = @$this-&gt;connection-&gt;select_db($this-&gt;database); The error suppressor is *not* a good idea. &gt; if (strpos($querystring, ';') !== false) Let's hope the query doesn't contain any semi colons. &gt; $queryparts = explode('?', $querystring); Let's hope the query doesn't contain any question marks. &gt; if (get_magic_quotes_runtime()) $param = stripslashes($param); Seriously? &gt; class MySquirrelResult_MySQLi implements MySquirrelResult See [Iterator](http://www.php.net/~helly/php/ext/spl/interfaceIterator.html).
&gt; So I can't create more than one connection to a database. Why? I'm curious, what situation are you working in where you need more than one connection to the same database as the same user? &gt; &gt; if (get_magic_quotes_runtime()) $param = stripslashes($param); &gt; Seriously? I'm not surprised to see this, it is pretty much straight out of a bunch of other database toolkits, including the code bundled with Dreamweaver. For the most part it works correctly, until you need to work with binary data. 'course, why you would have magic quotes turned on is an entirely different wtf.
&gt; So I can't create more than one connection to a database. Why? Because 99.9% of web apps don't open two connections to the same database. If your app really needs to do it, then you're probably better off using something a little more sophisticated. &gt; new MySquirrelDriver_MySQLi($host, $user, $pass, $database, $charset = false) Thanks for the bug report, I have no idea why the false ended up in that constructor. Probably missed it because I only ever use one charset. Will fix soon. [edit: fixed in 16748744] &gt; Why private? Is there any particular reason why I'm not allowed to extend your class? Will consider changing to protected. Thanks for the suggestion. [edit: see other comment below] &gt; $select\_db = @$this-&gt;connection-&gt;select\_db($this-&gt;database); &gt; The error suppressor is not a good idea. PHP errors are not very helpful anyway, because most users end up ignoring them. MySquirrel turns errors into exceptions, so that they cannot be ignored. Immediately after the line you quoted, there's another line that tests $select_db to see if the operation succeeded and throws an exception if not. &gt; Let's hope the query doesn't contain any semi colons. &gt; Let's hope the query doesn't contain any question marks. Ever heard of how prepared and/or parametrized queries work? Only one statement at a time, with parameters marked by question marks. By the way, IIRC, the question mark serves no purpose in SQL unless it's part of a string literal, and string literals are supposed to be passed as separate parameters here. &gt; if (get\_magic\_quotes\_runtime()) $param = stripslashes($param); &gt; Seriously? Magic quotes are charset insensitive, and therefore may be insecure when used with different charsets. The proper way to escape an already magic-quoted string is to apply stripslashes() first, and then apply mysql\_real\_escape\_string() which is charset sensitive. &gt; See Iterator. I've seen it and I'm not going to use it for now. Maybe in a future version if there's enough demand, but for now I'm settling for a more familiar style of iterating through a result set (for mysql_* users anyway). 
Good responses. Haters always be hatin
&gt; Will consider changing to protected. Thanks for the suggestion. I must protest. Exposing internal implementations (including member variables themselves) is code-smell. Please use protected set\*() and get\*() methods (eg: setHost() and getHost()) instead. EDIT: Also, the name for your library (MySquirrel) is how I first learned how to pronounce MySQL (rather than My-S-Q-L, or the even more perturbing 'My Sequel'). Interesting.
I like the idea, but like it was stated I do not see what it has more than PDO
To clarify, those variables are stored in the object only for the sake of lazy connecting. (Connection is established when the first query is made, not when the object is created.) So if anything is going to be turned into protected, it's probably the private connect() method. Just a thought, though. Extensibility is not a current priority.
360 characters is possibly a couple too many without a linebreak :)
The CakePHP tutorials might be misleading from a "real nazi OO purist" point of view because individual Mail or User records won't actually be objects, they'll be associative arrays (thanks, PHP4 support). OP's 'Manager' methods would live in the Mail or User class because they really represent all records going by that name.
&gt; I'm curious, what situation are you working in where you need more than one connection to the same database as the same user? The most common case would be during testing. &gt; For the most part it works correctly, until you need to work with binary data. No it won't. It'll fail in very subtle ways. Magic quotes work on http input only. If any of the input values did not come from the http request, it won't be magic-quoted, but this code will still stripslash it. So if the string contains any backslashes in it, they will be lost. This is why magic quotes are deprecated, and the database layer should not try to manage that.
&gt; Because 99.9% of web apps don't open two connections to the same database. If your app really needs to do it, then you're probably better off using something a little more sophisticated. Sure, I will. &gt; PHP errors are not very helpful anyway, because most users end up ignoring them. MySquirrel turns errors into exceptions, so that they cannot be ignored. Immediately after the line you quoted, there's another line that tests $select_db to see if the operation succeeded and throws an exception if not. Good and all, but you still shouldn't use the error suppressor. It is slow and it can make it very hard to track down fatal errors. You can set a temporary error handler instead. &gt; Ever heard of how prepared and/or parametrized queries work? Only one statement at a time, with parameters marked by question marks. By the way, IIRC, the question mark serves no purpose in SQL unless it's part of a string literal, and string literals are supposed to be passed as separate parameters here. Yep. Ever heard of string literals? By the way; Why don't you use mysqli's native support for prepared statements? &gt; Magic quotes are charset insensitive, and therefore may ... Magic quotes is a disaster. Your database layer can't fix that and so it shouldn't try. You're only making the problem worse by providing a half-baked solution. See my reply elsewhere in this thread. &gt; ... but for now I'm settling for a more familiar style of iterating through a result set More familiar than `foreach ($result as $row)`? I don't follow that. Another effect of iterator is that it allows you to load on-demand, which can have serious implication for memory usage, if the resultset is large.
I was offering constructive criticism. How did you get from that to hate?
What are the disadvantages of your solution compared to PDO? I haven't used PDO before, but it looks a bit clumsy from the code examples I just read.
You came off as an arrogant asshat in your post. You can offer constructive criticism without the snark.
Firefox 3 :( we have to use IE6 too though, it's a Windows 2000 network. Seriously.
I suppose I was a bit curt. But then, I expect that people provide proper quality code if they ask for feedback on it.
'Suppose' , 'bit' , 'cu*t', 'proper', 'feedback'. Right.
ROFL. Check out all the down-votes. Haters always be hatin'.
Your interfaces should be abstract classes. Your paranoid and constructors are the same and could be dealt with via the abstract super-class. Also, you store the same class-members throughout the drivers; this could be done in the abstract class also. Doing these things will lend to extensibility, etc.
Not as bad as my headache when clients send web-site copy translated in three different languages as multiple word documents. I learned more about encoding than I ever wanted from copy/pasting crap directly from Word into Notepad++ and exporting word documents as text files (with OpenOffice) and editing them in Vim. This article summarized my experience most accurately.
http://lithify.me/docs/lithium/util/String::insert()
I don't get it. What does it do?
yes you did, kids go back to 4chan please.
It gives you the ability to make templates in PHP. Templates are a file that you can insert snippets into to insert data into a page. For instance, you could write some HTML like: &lt;h1&gt;{{Header}}&lt;/h1&gt; &lt;p&gt;Hello, welcome to your account area {{Username}}&lt;/p&gt; Instead of: &lt;h1&gt;&lt;?php echo $header; ?&gt;&lt;/h1&gt; &lt;p&gt;Hello, welcome to your account area &lt;?php echo $username; ?&gt;&lt;/p&gt; This gets super-handy when you're dealing with multiple elements: &lt;h1&gt;{{Header}}&lt;/h1&gt; &lt;ul&gt; {{#ListItem}} &lt;li&gt;&lt;a href="www.yoursite.com/{{LinkName}}"&gt;{{LinkName}}&lt;/a&gt;&lt;/li&gt; {{/ListItem}} &lt;/ul&gt; Check out this demo of [Mustache Templating](http://defunkt.github.com/mustache/#demo). **Disclaimer**: Blind leading the blind. Get off my friggin' back!
Yeah, which is why I mentioned Doctrine as well. But conceptually, I think they both fit.
Do yourself a HUGE favor: do NOT use Wordpress code as a reference. Their code is shit, and is completely WRONG.
First of all, you should stop reinventing the wheel. What you are trying to do have been done by yet too many people. (sorry if you already have some dev background, no harm done...) Do you know the concept of abstraction layer? What you are trying to do can be done in a clear way using an ORM. There are plenty of them out there (propel, doctrine, etc). Even though I am not a huge fan of wordpress, I am pretty sure they have their own ORM built. You would be suprised how easy and less headache-itchy it can be with an ORM. As we are getting into this, have you ever considered using a framework? Development time can be almost cut by 3 using a proper framework. At first it might be frustrating to learn again from almost zero a bunch of different ways of coding, but after a while you'll be wondering how you where coding WITHOUT a framework. If you want a good start, search for symfony. I've been using it for a year now. Currently finishing my third project with it and I just love it.
 gc_collect_cycles();
Thanks for the constructive criticism, especially concerning error handling and magic quotes. One reason I didn't use set\_error\_handler() is that it might interfere with error handling functions built into web frameworks and other libraries, but perhaps I'll just need to call restore\_error\_handler() every time. Not sure what the performance implication will be, though. Or maybe I'll just throw both the error and the exception and forget about it. [edit: fixed in 52ae152c. Turns out MySQL functions don't raise any errors anyway. Totally brain dead.] With respect to magic quotes, I agree with everyone else that it's a disaster. Still, the unfortunate fact is that a lot of shared hosts enable it by default. Another statistically significant fact is that, at least in simple apps, the majority of variables involved in database calls do come from http requests. If I want to offer some convenience to people whose projects fit this description, that's my choice. But I understand that sometimes this may have unintended consequences, so perhaps the right solution will be to add an option to switch this on and off. [edit: fixed in 5418ed40. Compensation for magic quotes is now opt-in.] As I said, string literals are supposed to be passed as separate parameters here. My library encourages this practice even where the string literal is safe; and when paranoid mode is enabled, string literals aren't even allowed. Besides, it is extremely rare for a string literal that doesn't come from insecure sources to contain special characters such as question marks. I'll consider using a regex to discriminate between real placeholders and string literals containing question marks, but I'm not sure if it'll work in all cases. In any case, if a stray question mark somehow gets into the querystring, it'll result in a mismatch between the number of placeholders and the number of parameters supplied, and an exception will be thrown. [Edit] I'm not using MySQLi's native support for prepared statements because I'm lazy :p Basically, I just ported the original mysql_* version to use MySQLi instead. I'll look into it once I've transitioned to using abstract classes, as someone else suggested below. Regarding iterators, I guess it's just a difference in style between us. By the way, on-demand loading is already used unless the user specifically calls fetchAll(), so I don't see how using iterators can save any memory in this case. [edit: iterators are now implemented.]
Thanks for the suggestion. Been planning to do that, but too lazy to refactor :p [edit: fixed in 14d81d71, cbc75131, a86411ff]
Thanks for the long reply! Haha, reinventing the wheel is sort of what I'm going for here, I'm in it for the learning and want to start from the ground up. I'm a designer + frontend coder by trade and just started playing around with PHP (as in session handling and mysql-querying, nothing more advanced than that). Havent grasped what an abstraction layer or ORM is, I'll give it a google, thanks. I've dabbled some in CakePHP and RoR (not PHP-related but yeah) but decided I want to be efficient enough in the original language first, hence the wheel reinventing. I'll give Symfony or CakePHP or Code Igniter or whichever a whirl when I feel that I just need it for the time efficiency and not because I can't do it on my own. :)
Same goes for their query + loop handling? How would you do it? (Not trying to bash, I'm just curious). 
Whats wrong with shortags? &lt;h1&gt;&lt;?=$title ?&gt;&lt;/h1&gt;
Came here to ask the same thing. I'll stick with Smarty until I see PHP actually include it in the code base. 
Your "constructive criticism" was abrasive and without pity or support. All you had were negatives with no positives. When you combine that with your username (Troll skin? Troll's kin? what?), well...
jQuery makes ajax calls really simple. I've been quite happy to let jQuery do it.
It's really simple too. 1) Learn MVC 2) Write code include 'smarty.php'; $s = new smarty(); $s-&gt;assign('field') = $value; // any variable, including arrays and objects $s-&gt;display('template file'); in your template file &lt;h1&gt;{$field}&lt;/h1&gt; 
I am coding a wpmu/buddypress plugin, this is what I did: **Create a class to handle looping/db structure:** class Admin_App { var $current_application = -1; var $application_count; var $applications; var $application; var $in_the_loop; function admin_app($type,$user) { global $bp,$wpdb; $sql = $wpdb-&gt;prepare( "YOUR QUERY" ); // $this-&gt;applications will be an array of 'sdtClass' representing each result row. // you will be able to access your columns via $this-&gt;applications[0]-&gt;column_name // (or $this-&gt;application-&gt;column_name) $this-&gt;applications = $wpdb-&gt;get_results( $sql ); $this-&gt;application_count = count($this-&gt;applications); } function has_applications() { if ( $this-&gt;application_count &gt; 0 ) return true; return false; } function next_application() { $this-&gt;current_application++; $this-&gt;application = $this-&gt;applications[$this-&gt;current_application]; return $this-&gt;application; } function rewind_applications() { $this-&gt;current_application = -1; if ( $this-&gt;application_count &gt; 0 ) { $this-&gt;application = $this-&gt;applications[0]; } } function user_applications() { if ( $this-&gt;current_application + 1 &lt; $this-&gt;application_count ) { return true; } elseif ( $this-&gt;application_field + 1 == $this-&gt;application_count ) { // Do some cleaning up after the loop $this-&gt;rewind_applications(); } $this-&gt;in_the_loop = false; return false; } function the_applications() { $this-&gt;in_the_loop = true; $this-&gt;application = $this-&gt;next_application(); } } **then create helper functions:** function has_applications($args='') { global $admin_application; $defaults = array( 'type' =&gt; 'admin', 'user_id' =&gt; 0, ); $r = wp_parse_args( $args, $defaults ); extract( $r, EXTR_SKIP ); $admin_application = new admin_App($type,$user_id); return $admin_application-&gt;has_applications(); } function the_applications() { global $admin_application; return $admin_application-&gt;the_applications(); } function applications() { global $admin_application; return $admin_application-&gt;user_applications(); } **Then your format functions:** function admin_application_name() { echo get_admin_application_name(); } function get_admin_application_name() { global $admin_application; return $admin_application-&gt;application-&gt;name; } **Then your loop:** &lt;?php if ( has_applications('type=admin') ) : while ( applications() ) : the_applications() ; admin_application_name(); endwhile; endif; ?&gt; I hope this helps you! Edit: formatting
Try 'CodeIgniter' its a bit weird to get used to but it has a very good layout.
Read through it and think I understand most of it. This is **exactly** what I'm looking for, thanks a bunch!
You mean, as in md5("$host::$user::$pass::$database") ? Well it's just a meaningless delimiter. You could change that to any other string and the effect will be the same. Did you think it was the [Paamayim Nekudotayim](http://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php) ?
This may help you: (regarding stdClass) http://www.richardcastera.com/2009/07/06/php-convert-array-to-object-with-stdclass/ what I would do: $result = mysql_query( 'query'); $count = mysql_num_rows($result); $results = array(); for($i=0;$i &lt; $count; $i++) { $row = mysql_fetch_assoc($result); $object = new sdtClass(); foreach($row as $column =&gt; $val) { $object-&gt;$column = $val; } $results[] = $object; // Or you could type-cast and avoid the previous foreach loop. $results[] = (object)$row; } Then you can access your data as: $results[0]-&gt;column_name; 
Shit, I don't know. Just seems like more abstraction. Thanks for setting me straight.
I didn't see your comment, see the comment that I made to my post that explains a bit more.
I'll look into stdClass as well then, thanks! 
ahah alright. wasn't sure what kind of background you had so I just threw my "Hey what is sql? I wanna clone wordpress" response
So you rather mix your HTML with Mustache than with PHP? Because that's all it is... exchanging one template engine for another.
OK, I see what you mean. The double colon in self::$handles (in the next line) is definitely the scope resolution operator, similar to -&gt; but used in a static context. Anyway, the delimiter in the first line has been changed to a blank space in f2899585, in order to prevent ambiguity.
Lots of changes today, please see the [commit log](http://github.com/kijin/mysquirrel/commits/master/). Many thanks to troelskn, ihsw, mahcuz, and psilokan. * Abstract classes * Better error handling * Compensation for magic quotes is now optional. * Iterators * Miscellaneous bug fixes Todo: * Regex detection of control characters in string literals. For now there's an easy workaround: pass string literals as separate parameters. * Taking advantage of MySQLi native prepared statements. The variable binding process is really tedious you know :( 
The only real advantage I see is that it's universal, so you could port your templates to different languages. And the automatic enumeration is pretty cool.
I don't see how that is supposed to convince me of anything. (I'll just ignore the example you gave) Mind you, I've got my fair share of experience with PHP and all kinds of templating engines. I still don't see the point. The only advantage of something like Smarty is that it *can* look better and be easier to read. However really only a little. And the downside of learning Smarty and dealing with another set of quirks in addition to the quirks you have form PHP, is just not a good decision in my opinion. (plus it's slower to use another layer... but that should be the least of your worries in regards to performance, since templates should be cached anyways) It's still better than writing your own template engine that uses a self-written xml-reader though... Which I sadly have seen too.
If you're trying to do what I think you're trying to do, there's no need to use array indices ($querynumber, $x, etc.) at all. Why not: while ( $array = mysql_fetch_array($thequery) ) { $this-&gt;cats[] = $array['value']; } And then: foreach ( $cats as $cat ) { // do whatever you want to do with cats } You should probably encapsulate this inside a function or method.
Totally agree. If you want a clean and simple blog, try Habari.
Short tags are not portable, as they may be disabled in the configuration.
Here's a simple MVC framework i wrote for college (in about 300 lines): http://bitbucket.org/wooptoo/simplemvc/ [Get zip with source](http://bitbucket.org/wooptoo/simplemvc/get/tip.zip) if you don't have mercurial installed. It contains a simple blog as an example.
I think you might have misinterpreted the question a little? You're suggesting (definitely worthwhile) ORM resources but HiSamn is asking about OO design and in which classes his methods should live. 
&gt; you could port your templates to different languages Yes, in the ideal case. Mostly not. I've seen too many implementations of template languages create their own unique twists which make them incompatible. Mustache is suffering from this too, afaik. :(
I would recommend Kohana over CodeIgniter. Cleaner code, more truely OO, true ORM. 
Maybe, but I was pointing out for instance Doctrine which is very OO, and how that design might help him design his own OO, and to compare how they do it with how Cake handles their OO, I mean, ORM is basically an OO implementation...that's how I learned, I'm better with learning by example, vs just textbook definitions, so I thought it might help :)
Well, I wouldn't say that's totally wrong, but there are some problems with it. First, don't use the `mysql_` functions. Use PDO. Also, don't use queries, use prepared statements. Prepared statements are more efficient and more secure, you don't have to worry about quirky escaping behaviors.
Thanks for that, been looking for a Wordpress alternative
How would a templating abstraction help here?
don't use the mysql_ functions.
It's actually an odd combination of Smarty and Django syntax.
Disadvantages (compared to PDO): * Only supports MySQL * May be slower (because it's written in PHP rather than C)
Dreamhost does this. I'm sure lots of other hosting companies do as well. Even if it is $10 / month, that's less than the cost of a meal.
With PDO you just have to do. `$cats = $sth-&gt;fetchAll();` 
This times a million. I cringe whenever I see someone using anything other than PDO in new code.
 # $db is a PDO object. $sth = $db-&gt;prepare( " SELECT * FROM " . DB_PREFIX . "categories" " ); if( $sth-&gt;execute() ) { return $sth-&gt;fetchAll(); } else { throw new Exception( LANG_EX_QUERY_FAILED, EX_QUERY_FAILED ); } Write reliable, nice code.
I'll mention the naming issue to my parents.
&gt; As I said, string literals are supposed to be passed as separate parameters here. My library encourages this practice even where the string literal is safe; and when paranoid mode is enabled, string literals aren't even allowed. Besides, it is extremely rare for a string literal that doesn't come from insecure sources to contain special characters such as question marks. I'll consider using a regex to discriminate between real placeholders and string literals containing question marks, but I'm not sure if it'll work in all cases. In any case, if a stray question mark somehow gets into the querystring, it'll result in a mismatch between the number of placeholders and the number of parameters supplied, and an exception will be thrown. It's an edge case alright, but that actually makes it more troublesome in my opinion. It means that the problem will only surface itself under rare conditions, making it much harder for the user to realise what's going on. I prefer something that works all the time or fails all the time. It's the same reasoning behind not wanting the database layer to try to compensate for magic quotes. The only realistic example I can think of for using a semi colon as a string literal, would be for calling [`group_concat`](http://dev.mysql.com/doc/refman/5.0/en/group-by-functions.html#function_group-concat). Here it would make sense that the separator was part of the query, rather than a bound parameter. Surely, you could work around it, but wouldn't it be better if the user didn't have to work around quirks?
Oh. Cool.
Maybe I'm missing something as I just glanced at the code, but that looks like the most dangerous one line of code I've ever seen... I don't know about all configurations, but I've used server OS configurations before where you could access a file, for example, with: /view/../../private.txt?param=.php
Well, i don't think anyone is actually going to use this in production ;) but it is a really neat line of code. Give him some props for that.
`String::insert` is pretty useful, but doesn't support looping or conditional display.
I'm also becoming a big fan of [Twig](http://www.twig-project.org/) -- cleaner than Smarty, and really deep.
As the author says: "I know how insecure it is. It's just a novelty. Oh man please do not deploy this." I think it's just an amusing one liner
Superdense framework for superdense people.
I only ignored your example because it is just not usable for anything. It not only looks horrible, but is also bad performance wise. (slightly) And that is not due to the use of PHP as the template engine but the use of *bad* PHP; which is sadly very common. I'm not ignoring the rest of your post, I just don't understand your arguments. Sorry for misphrasing my first line a little.
I just now added an example wizard: http://github.com/geon/wwForm/blob/master/examples/wizard.php A more sophisticated approach would save each form in a separate PHP-file, and define entire wizards as an array of filenames, but it's really outside of the scope of my project. Either way, wwForm is very useful for building most kinds of forms.
Just because the problem with inline semicolons and question marks would only surface under rare conditions, it doesn't mean that it would be hard for the user to realize what's going on. Stray semicolons and/or question marks will immediately result in an exception being thrown, with (IMO) an error message that is pretty clear as to which symbol is the culprit. It will not lead to unpredictable behavior, because script execution reliably stops right there and then. You mean, as in GROUP\_CONCAT(column\_name SEPARATOR ';') ? How is that different from any other semicolon-containing string literal? If you hard-code that into the querystring, you'll get an exception the first time you test it. Solution would be to use rawQuery(). If you don't hard-code it, then you should be passing it as a separate parameter anyway. Not at all difficult to troubleshoot, and a much more well-defined behavior than a "quirk" IMO. Sure it's a little inconvenient, but I would tend to think of it as the cost of being paranoid about security. A different solution would be to have a delimiter() method, which would issue a DELIMITER query on the server and also change the behavior of query() to look for the specified delimiter rather than the semicolon. An advanced user who needs to issue a lot of unusual queries would just need to toggle this on and off. This strategy is already used widely when defining stored routines, etc.
Lame. Not even amusing. "Fits on a tweet". So what?
 $u=basename($_GET['u']); There, made it just a little more secure for you. Not sure about the function call though.
Here is a quick way to run your own popurls style website: http://www.pythondaddy.com/niftyurls/ Powered by django, it's using jQuery and YUI Grids for visual effects and dandy features. Instead of tooltips I used a facebook style lightbox (facebox) and the option of showing a full view of the feed. The whole project is available for download, I made it easy configurable so you can roll your own instance.
Well, it is roughly as secure as an average pvp webapp. 
http://pear.php.net/manual/en/standards.php
How does this compare to (Zend|PEAR|Horde)_Form?
I haven't used any of them, so I couldn't say, really. After checking out a few tutorials for each, I would guess: * Zend: doesn't seem to abstract the form logic as well as wwForm. wwForm will only need you to call one method "Execute()", before outputting any HTML, and all the form logic will be taken care of. (You still need to call "Render()" to see the form, of course.) * PEAR: I couldn't find a clearly canonical implementation, but QuickForm2 seems to be the most popular. It seems to me wwForm has a better integration of client-side and server-side validation of input (through regexps by default). * Horde: this seems to be the most capable implementation of the three. I don't know enough to judge, but it seems to me wwForm would require less code to write for the same functionality. Overall, I would say wwForm is less capable, but easier to use. It would be nice if someone less biased than myself could make this comparison. There is a suitable example here: http://github.com/geon/wwForm/blob/master/examples/complex-contact-form.php
the first fools-day joke today, that I really believed for a minute... *lol*
&gt; I haven't used any of them haha, ooops. I've used ZF Form in a lot of projects, it has no real problems. The decorators are a bit cumbersome, but I don't decorate my forms (CSS is enough for me.) BTW you can do &lt;?= $this-&gt;form ?&gt; to render the form. Before ZF Form I used PEAR which was also fine. Your example didn't show how you initially populate the form (say from a database, e.g. updating a users profile) but it looks very similar to the others which means you think in the correct way. The pattern of code you came up with is more or less the same as the others, well done :) I'd like to see integration with Doctrine, so I could pass in my User object and you could build the form from the database definition. Column DATETIME would show a calendar, VARCHAR a text box, etc... That'd be neat.
&gt; haha, ooops. Opps indeed. Seriously, though, when I first started working on what became wwForm back in 2004, I did quite a lot of research, but didn't find anything that did what I wanted. I don't know if the other form classes were available then, or if I just didn't google well enough. Anyway, having built it on my own, it does exactly what I wanted, and I understand it inside and out. That too has its merit. &gt; BTW you can do &lt;?= $this-&gt;form ?&gt; to render the form. No. The form is rendered by print():ing. It would be easy, but tedious to change it to return a string. &gt;Your example didn't show how you initially populate the form (say from a database, e.g. updating a users profile) There are arguments for preset values for all form field classes. If the form needs to be re-rendered (because of invalid data), the fields are automatically filled with the data from the last post. &gt;The pattern of code you came up with is more or less the same as the others, well done Yes, I noticed that too. How do other implementations handle executing code to handle the validated data? Do you need to manually check if there was a POST and if it was valid? I couldn't figure it out from the examples I saw. &gt; you could build the form from the database definition I had some thoughts about that, but it didn't seem useful enough to me. I added a method "Update($TableName, $Key, $Data)" to my databse class instead. If I name the form fields properly, I can just plug in the $Reply variable as the $Data argument.
Protip: Use PDO, even if all you are using is MySQL. Did I mention that you should use PDO? Btw, use PDO. Here is how I've done it with an app I started working on a few weeks ago: http://github.com/Deadpool/Ximps-Framework/blob/master/Ximps/Template.php It's basically used like this (how you assign variables): $template = new Template(); for ($i = 0; $i &lt; 5; $i++) { $template-&gt;addIterate('TEST_LOOP', array( 'KEY' =&gt; sprintf('Value iteration %d', $i + 1), )); } And then you should use in a template file: &lt;?php while ($template-&gt;iterate('TEST_LOOP')) : $data = $template-&gt;data('TEST_LOOP'); ?&gt; &lt;p&gt;Data: &lt;?php echo $data-&gt;KEY ?&gt;&lt;/p&gt; &lt;?php endwhile; ?&gt; Of course you'd have to modify the code a bit to get it working with your app but you should be able too.
Would it be acceptable to you to store the users passwords encrypted?
I was thinking that this is how I would have to do it. Encrypt/encode it somewhere and decrypt/decode at runtime. If I need to, I'll probably resort to this. But part of me is hoping there's a bit of a better way and I just missed it when going through the docs.
Almost positive SwiftMailer doesn't support it but [Gmail now supports OAuth](http://www.webmonkey.com/2010/03/gmail-now-more-secure-with-oauth-support/) for just this kind of thing. You'd have to do a lot of legwork to make it work the first time of course. 
encrypted passwords can be decrypted. if someone gets the database, ok youre as safe as using a hash, but if someone breaks into the system as a whole, they have access to the script holding the encryption routines and password, which will land them all the users email accounts.
Try using a supermodel. Each model should extend this class, providing default implementations of commonly used methods, such as getAll(), getById(), getRelationsOfType(), etc. to all your models. The GetFriends() method should be in a superclass, since several of your models can possibly have relations to other types of objects (or the same type). There is no need for a "manager" class: class Supermodel { public function getAll(); public function getById($id); public function getRelationsOfType($type); } class User extends Supermodel {} class Mail extends Supermodel {} $user = new User; $mail = new Mail; $user-&gt;getById(42); // get user id 42 $user_mail = $user-&gt;getRelationsOfType('Mail'); // get all mail for user $all_mail = $mail-&gt;getAll(); // get all mail in the system Also, you mentionned you have a CreateMail controller. Theoretically, in MVC, you should have a Mail controller, with a Create action in it, not a CreateMail controller. 
The fact that PHP is using the "self" and the "static" keyword makes this a little confusing to coders sometimes. Some other languages, like C++, avoid this by *not* using special keywords, but class names instead: class B { public: static void tryme() { std::cout &lt;&lt; "Called in class B"; } }; class A : public B { public: static void tryme() { std::cout &lt;&lt; "Called in class A"; } static void test() { A::tryme(); B::tryme(); } }; int main() { A::test(); } 
no one is on to chat to
I am....of course that might not be a good thing. :)
Thanks. I'll be looking at that.
I did a bit chatting with uberbeast and found a few issues: * Can input empty messages. * Names are not bolded, can be a bit difficult to separate the name from the message. * Cannot scroll up and view previous messages. Other points: * The title should be updated to reflect a new message, this is useful when tabbing away for a short time. * Find a decent colour scheme from the [Colour Lovers](http://colourlovers.com) I couldn't vouch for it's Geo locating abilities as the closest person to me was in the United States (I'm in England).
Thanks! I truly appreciate the help. I plan on re-doing the front-end. As you can tell, I did not spend much time on how it looks. I am currently using a textarea to do the chat. Anyone have a better suggestion? The Geo-Locating is based on the IP Address. The system tries to find someone who fits the profile you asked for but if nobody is available, it tries to pair you with the closest person. Since there is little to nobody on, the Geo won't do much. This is a hobby for me, so if any of you PRO's out there have any suggestions, I am all ears! Thanks again to everyone! 
I logged in from my home and from my work (remote desktop). It matched me with myself. Worked pretty nice. Keep it up.
Thanks!
This, 1000x over. I spent ~10-15 min attempting to find anyone who would respond. 
What are you using for your reverse IP lookup?
I am using www.ipinfodb.com
Cool idea, but it didn't work for me. It kept saying start chatting, then when I typed anything it'd reconnect. 
What browser are you using? There might be a bug in Firefox. It has something to do with the enter/return key being bound to the "skip" button and not submit. I am trying to recreate the problem, so any help would be appreciated. Thanks for checking it out though! 
I made some changes to the "chat" area. Hopefully I did not break anything. I am signing off for the evening. Thanks again. 
Yep, FF 3.6.3
You should also put a count of total users online, and users currently waiting in the selected distance. I didn't wait long enough to find out if there was anyone online, but I might have if the chances were good.
Good idea. That seems to be the biggest complaint right now is the lack of users. An old fashion chicken/egg situation. The Reddit/PHP is the first place I posted this to so the only users at this point are coming from here. Thanks for the input!
change the input from a text box to a textarea, then it won't submit the form when you hit enter, it'll go to a new line.
That must be it. I think I have a solution but won't be able to test it until I get home from work. 
I suppose the number of users waiting should be 1 or 0 at all times, so maybe that's not necessary, just the total people online in the distance selected.
Will you be releasing the source? I'd be interested in contributing if you do.
I was thinking about it. My programming skills are not up to with the majority of the users on here but if people are interested, that I do not see why not. 
I know how you feel. I'm not a professional programmer either. I'm an engineer. I actually feel embarrassed sometimes showing people some of the stuff I've written. But I'm sure most people will offer constructive criticism. Maybe host it on http://code.google.com/ or something.
If you release it, maybe we can help you with it?
Sounds like a good idea. I have never released any code to the public. Once I get some of the bugs squashed and clean-up some of the code. There is a lot of place holder info in the code for a couple new features that I have been working on that I have not turned on yet. The biggest problems I am having at this point are on the AJAX/JQuery side. I am still learning JQuery and I find myself hacking together solutions. 
I am looking for some input on a couple ideas and explain a little to help clear up any confusion. * The biggest issue at this point is getting a critical mass of users to test the system. No users == no chats. I have no idea how to drive more users to the site so hopefully via word-of-mouth that might slowly grow. I plan on adding a counter to the site to show how many "available" users there are on. * The geo-locating is based on your IP address. I pull a latitude and longitude based on your course location. I then wrote a simple calculation to estimate distance. So if you select a distance like "close", I hit the mySQL db to search for any users based on a latitude and longitude range within 500 miles or so. If there is no user in that range, then the app keeps looping until someone falls into that range or someone chooses you from the map. Should I allow a user outside the range you selected be able to select you? * I originally had the system open the "net" for searching if no users were found in your area but I took that out a couple builds ago. (For whoever I told that is what was happening, I was mistaken). Should I go back to the expanding "net" or just keep looping until someone shows up? * I just want to thank everyone that has checked out the site. This is the first time I have done anything like this so I am both scared, nervous and elated at the same time. I might get some time to update it tonight but I have a sick wife and a sick baby that need my attention tonight. Thanks!
 Semi-Random chat, sure ill look at that RapAttack likes integration with google maps curious as to the code, so i take a peep constant pings to server, no long polling async? 
I have a todo for you. Stop writing this bullshit, do something constructive, and stop making PHP look bad. This is the 1 millionth class written in PHP for handling simple SQL queries. It amazes me how much time and effort is put into something so trivial. You create a name, create the git repo, document your code, post it on reddit, get feedback and release multiple versions - all this coding and maintenance for doing something that already exists like... everywhere? That's not mentioning the many straight boneheaded decisions you've made (many mentioned already in this thread). Why stuff everything into one file? It's standard procedure to place every class into a separate file. I know why. You wanted this to be a single lightweight class until you realized you'll need more than 1, but then you realized it'll be more complicated than "include this, instantiate that". So you just decided to stuff it in 1 file so it "feels" lightweight, while it's everything but not. I don't care what your reasons are, it's stupid. You didn't even know mysql functions don't raise errors. Great. People like you frustrate me to no end. You post this crap to "self promote" yourself, some other asshole sees it and bookmarks it, implements the code 1 month later for some project I'm asked to do a week of maintenance on, then 1 year later I'm staring down your mediocre shit pile and trying to figure out * why in the fuck someone would error suppress a standard mysql function * why magic quotes would be handled anywhere near this class * why I'm even looking at this class used in a production environment when there are powerful alternatives available created by *professionals* * why you're throwing a generic exception class for every freaking exception (how am i supposed to handle connection exceptions vs startup exceptions?) * or what the fuck "paranoid mode" is. I get it, you're proud of yourself. You learned PHP. Now please delete this crap, read a book on how to write code the right way, pick something *that hasn't been done 1 million times*, research it thoroughly, come back here and make PHP look good. And if you absolutely HAVE to write a custom library for querying MySQL can you please spend more than 5 minutes researching the topic and not draw everything from limited 1st hand experience? &lt;/rant&gt; 
Surely this is less memory efficient as you are storing the entire result set in memory, in comparison to the 'while' loop scenario which replaces the variable content upon each iteration of the loop meaning no more than one record is in memory at any one time. Edit: If I've made a mistake in how PHP handles this, please correct me.
Well you can always do `while( $row = $sth-&gt;fetch() ) {`
http://www.reddit.com/r/SomebodyMakeThis/
Ouch, I can't imagine going back to something like this. Template's / Flexy spoiled me I guess. http://pear.php.net/package/HTML_Template_Flexy/redirected
 $css_dir="/css/"; $style_choice=$_POST['style_choice']; $css_file=$css_dir."default.css"; switch($style_choice){ case "sky_blue": case "dark_forest": case "pink_tulip": $css_file=$css_dir.$style_choice.".css"; }
A program that does this? Probably there are countless cms solutions out there and this should be built in or an extension to many existing solutions. It is very simple to roll your own in all reality. 1. Take all of your styles and make thumbnail images of them. [I would use the firebug extension of firefox and one by one cycle through all of the stylesheets that you have and use a screen grabber to save the images.] 2. Then create a page that displays a table of all those thumbnails. it can be done staticly with a html file no php required. 3. Create a dropdown that allows people to choose a theme by name. and a submit button to save it. 4. Save their submission in a $_SESSION variable or database. [don't forget input validation if you don't check if the file name submitted is a file that exists in your style sheets folder you can open yourself up to being hacked easily] 5. when your pages display take the contents of the $_SESSION variable you saved and validated and print it as the source attribute in your LINK anchor.
Use a normal html form and save it with a cookie. A session will only save it for that visit, I'm assuming you want it to be remembered when they come back. I used to have one on my site. I had like ten different backgrounds to choose from.
Hey thanks. I don't really know what this means, but I'm going to figure it out and try to use it!
Thanks! I couldn't really find exactly what I was looking for, but I'll check again just to be sure. Your solution is what I would do, at least steps 1 and 2 are completely doable for me. Steps 4 and 5 is what's difficult for me, but I'm going to figure out how to save the submission on that variable or database, and all that. Thanks!
Any chance you still have the code for that? Because that's what my problem is, I know what I want to make, just not how. Is it just an html form? What does it do for the action on the submit button?
 $css_dir="/css/"; //sets default directory for where css files will be kept. Can be modified. $style_choice=$_POST['style_choice']; //populates the $style_choice variable with the value of the form element named 'style_choice' $css_file=$css_dir."default.css"; // sets a default css file to use in the event a valid selection by the end user is not made switch($style_choice){ //basically a multi-line if/then statement, hinging on $style_choice. case "sky_blue": case "dark_forest": case "pink_tulip": $css_file=$css_dir.$style_choice.".css"; //If the variable is "sky_blue", "dark_forest" or "pink_tulip", set the $css_file variable to /css/sky_blue.css or /css/dark_forest.css or /css/pink_tulip.css } The code above goes at the top of the page. In the &lt;head&gt;..&lt;/head&gt; section of the page, include the following: &lt;link rel="stylesheet" href="&lt;?php echo $style_choice?&gt;" type="text/css" /&gt; In the body of your page include something like the following: &lt;form action=&lt;whatever the page name is&gt; method=post name=css_choice&gt; &lt;label&gt;Choose your style&lt;/label&gt; &lt;select name="style_choice"&gt; &lt;option value="sky_blue"&gt;Sky Blue&lt;/option&gt; &lt;option value="dark_forest"&gt;Dark Forest&lt;/option&gt; &lt;option value="pink_tulip"&gt;Pink Tulip&lt;/option&gt; &lt;/select&gt; &lt;input type=submit name="submit" /&gt; &lt;/form&gt; 
Now that's above and beyond the call of duty, thank you so much!
 $css_dir="/css/"; $cookie_style_choice=$_COOKIE['style_choice']; $post_style_choice=$_POST['style_choice']; if ($cookie_style_choice&lt;&gt;''){ $style_choice=$cookie_style_choice; } if ($post_style_choice&lt;&gt;''){ $style_choice=$post_style_choice; } $css_file=$css_dir."default.css"; switch($style_choice){ case "sky_blue": case "dark_forest": case "pink_tulip": $css_file=$css_dir.$style_choice.".css"; setcookie('style_choice',$style_choice); }
Again, thank you. You are one helpful dude! Can I do the monkey with you?
Only if i can be a banana [banana power](http://www.youtube.com/watch?v=LH5ay10RTGY)
A tetris clone in PHP-GTK ;) (http://gtk.php.net)
Austrian economics response to Paul Krugman- hard to figure out without the earlier posts.
Even harder to figure it out when you're posting economics articles in /r/php
try this line by line, also the the two comments above it http://www.php.net/manual/en/function.header.php#94646
&gt;$file=glob('.'); Glob returns an array, not a string, so all of your file_exists checks will fail. You need to actually pull out the specific files you want. &gt;file_exists("$file") Don't put your variables in quotes like that- what is the point? If you want to make sure it's a string the way to do it is '(string) $file'- although that still won't help you pick the file you specifically want out of the array. &gt;header('Content-Disposition: attachment;filename="imgs/"'); You're not actually putting the filename there, which is why you're not getting the name to append correctly. &gt; $fp=fopen('imgs/*.jpg','r'); You can't open a file handler to multiple files at once.
That's not going to solve any of his issues. His problem is that he's not actually pulling the proper files out- instead he's treating the results of glob (which returns an array of all files matching the pattern) as if it was the path to a single file. He converts it to a string (which probably ends up like "Array") and then when his file_exists check fails he gets his blank page.
One file at a time. One file, okay? Just one file. With glob() you're listing all files in that directory. Same with the fopen('*.jpg'). It doesn't work. You can only send one file at a time. Figure out the exact filename, and use it. Also, the filename in the Content-Disposition header shouldn't contain the full path to the file, just the filename portion of it. You can grab the filename portion by using the basename() function.
I feel that some of the replies here are somewhat harsh and unforgiving considering that it appears that you are just a little inexperienced. Let me offer you some tips which will hopefull improve your method and allow you to more easily diagnose and fix issues like this. var_dump() or print_r() is your friend: http://uk.php.net/var_dump If something appears to be behaving in a non expected way, use this function to see whats actually going on. This will usually reveal that what you thought was going on is not the case and can offer a clue as to what the problem is. For ease of display, follow the command with an exit(); so its the last thing output on the page. Another good practice is to use assertions in your code using the assert() function; http://uk.php.net/assert The ideal place to use assertions are anywhere where you assume a variable will be a certain value at a given time in order for your script to work. Should this then ever not be the case, you will get an assertion failed error. Assetions really shine in larger scripts which are refactored but contain an error. The more assertions you have, the quicker you will get to the cause of the problem. Finally, pay close attention to function descriptions and their return values in the documentation. You would be surprised how easy it is to miss a vital detail and think a function works in a way it does not when you are reading too fast when looking for answers. Armed with these tips, consult (as pointed out by supersan) this post http://www.php.net/manual/en/function.header.php#94646 as it contains the correct combination of functions to achieve what you are trying to do.
You know, I am a huge fan of Envato's network of sites. I could have sworn I found your script a few days ago, while browsing codecanyon. This looks promising, I'm sure I'll end up buying a few copies.
$17!!!!! you think people on reddit want to pay for stuff???
I hope my response wasn't one of the ones that came across has harsh, as it wasn't my intention.
Congratulations, you have just reinvented the wheel: http://sourceforge.net/search/?type_of_search=soft&amp;type_of_search=soft&amp;words=php+backup .
&gt;This particular algorithm can backup a big wordpress installation db in less than half a second. Make your calculations from that... this is no way to estimate a programs performance.
I looked over your script a while ago because I was looking for something all inclusive. It definitely beat the pants off everything else I found feature wise. But then I quit that job, otherwise you'd have a sale from me.
But it backs up wordpress, even if you have 100 posts!
FAIL.
Well, if you want this to become a successful backup software, you need to stop trusting the user. The user isn't going to download those backups (especially not hourly) because the user is sloppy, lazy and *human*. If you want it to become successful, then bake in a feature that allows them to upload the backup automatically. Some suggestions would be having the script : * e-mail the backup. * upload to a separate FTP account. * upload to cloud services. Storing the backups on the server would be utterly useless. If the server crashes, what good would the backups be if you can't access them? **tl;dr**: Users are human and aren't going to backup properly. Having backups on the server is useless if server crashes and should therefore be stored elsewhere. 
Thank you so much for your help; I don't exactly excel at programming and I just started learning php... this was very helpful and I really appreciate it!
I didn't think it was harsh; the fact that you responded at all makes me incredibly appreciative. Thanks!
Not to rain on your parade, but isn't this what we have cron for?
It looks nice and all, but I would prefer rsync and a cronjob. I think most people with a clue would, and those without a clue probably won't think about installing something like this. I may be wrong, but that's my hunch.
not all people have the luxury of direct shell. 
thanks for the link!
Ignore the nay sayers, the app is awesome. Congrats!
This seems to be solving a problem that doesn't exist.
I would have to throw in with WAMP server or Zend Server, apache is really the way to go with PHP on windows, IIS causes all sorts of headaches plus it's harder to use opcode caches etc.
I hate Windows. Good way to get hacked or to end up with cant-get-there-from-here scenarios because if you read the docs on php.net, there are many places where it says, "This doesn't work on Windows" or where you have to change your code a different way to make it work on Windows.
I agree here. IIS adds another layer of goo that is unnecessary. 
I'll repost my answer with some slight edits: --- We have several 2003 R2 and 2008 servers running PHP. We use Window's [Web Platform Installer](http://www.microsoft.com/web/Downloads/platform.aspx) to install PHP 5.2.x, FastCGI, and WinCache (for opcode and shared-memory caching). We go this route namely because most of the Windows development in PHP has been re-focused into the WPI system and the are Microsoft tested and maintained builds. That and the server admins have the most experience in IIS. Never use XAMPP or WAMP server in a Windows production server (these systems are intended for development environments). You could, if you wish, use Zend Server however I wouldn't really recommend it on Windows (or generally anywhere, but that's just me). 
[WampServer](http://www.wampserver.com/en/index.php) (link is to the English version) I use it extensively, and the control panel makes adjusting the configuration of the server a cinch.
I used wamp for ages and it was great. However i've recently swapped to Zend Server CE and it's definitely better from a performance perspective and from an integrated debugger perspective. (Not that wamp cannot be tuned or have debuggers installed just that it can be a bit finnicky to set them up). I'd have to recommend zsce &gt; wamp these days i think, however its close, so don't feel you'll lose out with wamp. Regardless i'd never recommend the mess that is php support in iis. Tl;dr ZSCE &gt; Wamp &gt;&gt;&gt;&gt; IIS
&gt; You could, if you wish, use Zend Server however I wouldn't really recommend it on Windows (or generally anywhere, but that's just me). May I ask why?
Uninstalling windows and installing linux.
Yeah, I saw that. I went and tried to find the script I had seen, and couldn't find it. Odd...
Could you just run linux in a VM on windows? I mean your bosses wishes do make sense if you don't really have experienced linux admins. 
How about NetBSD? I hear it's really secure by default.
I've not been happy with Zend Server as a platform in general. I prefer my production services to be modular as opposed to monolithic (Zend Server contains apache, php, and a small lighttpd admin server rolled into a single package). I prefer things separate so I can upgrade PHP and other items individiaully. Beyond that its PHP distribution is harder to configure and littered with Zend's crap extensions. Finally, I really just have not been impressed by the windows version of Zend Server.
ive never tried it so i wouldn't know. all i know is trying to get php to work as well on a windows server as a linux server is very difficult. your boss needs to let you do your job and use the best tool for the situation, in this case windows would not be that tool. i mean if i wanted to run a .net application i wouldn't first try to use a linux server to do it if a windows server was proven to be more reliable 
I suppose runng it in a VM would allow for all the usual Windows connectivity... Does anybody know of a nice AMP GUI front-end for Linux? I'd rather just use SSH, but the others are used to wizards and such.
You know what you might consider, depending on the size and scale of your operation, just get a VPS from [Linode](http://www.linode.com/). This might be the best of both worlds for you and your boss. You get professional administration, a nice gui for some of the very basic setup of the server and full on SSH access for you. I used to recommend shared hosting, but now when you can get a dedicated slice for $20/month it makes life so much easier.
That looks really good, especially because they have a datacenter in Europe. Also, being able to reset a server by cliking a website and being able to run an image that's known to work, should save lots of headaches, especially when I'm unavailable.
Hmm, one other option you may want to consider is simply running linux inside a VM on the windows machine. The performance hit from running inside a VM these days is pretty negligible and that way you get the superior maintenance/compatibility to boot.
Ya, their web interface is also handy if you ever needed to do any administration when you were out and about. AJAX based SSH and something they call Slish which is basically a remote KVM so you can watch the virtual boot up or shutdown just like you would a physical box.
Is someone able to recommend any ffmpeg VPS host? I'm kind of in the same situation as the OP
I had absolutely no idea PHP had this built in. I had to do my own BB filter for a site. You are correct that there are no comments/examples available on PHP.net. I will have to investigate this more ... thanks.
I didn't know there were built-in BBCode functions either. Someone needs to put together a big list of "secret" PHP features...
Here's a link: http://php.net/manual/en/book.bbcode.php
My Mac didn't have the bbcode extension already installed so I had to do it myself. Works like a charm now.
Uhm, Smarty **is** mixing PHP and HTML, you're just adding a layer "on top" that breaks things apart for you. It's still code, and it's still in your presentation layer.
This is very important: It's NOT built-in. It's a third party extension.
Most of the BBCode I implement is simple in nature, so I use an array of conversions and preg_replace. Not much code and sometimes more viable than needing something third party.
This is just part of the PECL Library, not technically built-in. Looking through the documentation... it seems needlessly over complicated. I imagine benchmarks on a significant amount of text wouldn't show much difference between this library and a standard BBCode function using RegEx. Though if I can be bothered later I might actually do some benchmarks to check this out...
It would be simple to make wwForm use some sort of template. I just haven't had any use for it myself.
Handling forms is cumbersome. You need a lot of code just to determine if the post you recieved was the expected one, with valid data. wwForm (like several others) simplify this by supplying a set of predefined form elements to use. Instead of writing code to render, validate and process a select-box, you can just plug your database output into the wwSelectBox class and be done. Also, wwSelectBox won't show the internal data to the user, so you could safely use sensitive data as the values. From my quick glance at it, another form system named "Horde" even has an interface to define relationships and dependencies between elements, like disabling a textfield depending on if a checkbox is ticked. Creating this kind of interfaces without help from something like wwForm is very tedious and error prone, so there is indeed a problem to be solved.
PHP Women has [a collection of OS projects seeking help.](http://www.phpwomen.org/wordpress/os-project-opportunities) Might be a good place to start.
You miss php, really? What are you currently working in? I work in php and honestly would love a job working in (almost) any other language. Just curious.
My brother and I are in the process of developing a community-driven locally-responsible tourist website. He is the designer and I am the developer. We are working on this during our free time as we do not have any money to put in it. He did put around 60-70 hours on the design since he had lots of spare time the last months. As for me, I am finishing a contract in the days to come and might put 20 hours per week on it until June-July. If you do have some free time (maybe 5-10 hours per week) and would like to get involved, PM me! Keep in mind that we are both doing it for free because it is something we both believe in and want to build a community from it. Tech chit-chat: it will be built on top of Symfony 1.4 Sorry for grammar, I'm a french native speaker.
storytlr is cool: http://storytlr.org/
Why don't you go get one then?
I work with C#.NET and VB.NET and while it can be fun programming in C#, the deployment for .NET is pain in the ass compared to PHP.
How about an entire sub-reddit dedicated to the subject? http://www.reddit.com/r/csbooks/
I look forward to seeing your results if you get around to it. I have yet to try it myself as well, but with the forums I am working on I might try it.
Not entirely sure, but you should be able to use realpath with $_GET['u'] to eliminate the nastiness of directory traversal.
I get it, you're proud of yourself. You obviously want everyone to bow to your arrogant attitude. You don't see why anyone would bother to post some code and ask for feedback for the sake of improving it. You don't want any code to be released into the wild unless it's already perfect -- you've obviously never had much respect for the mantra, "release early, release often". You have the luxury of a well-paid corporate job and a real (or virtual) server which you can configure the hell out of everything exactly the way you want, which naturally makes you utterly contemptuous of those who are unfortunately stuck in the non-ideal world of PHP hosting. You love design patterns and so-called best practices. Actually your mind is so full of them that you don't recognize that PDO, the most recommended and "professional" way to access databases from PHP, also throws a generic exception class all the time. You haven't been a small-time web dev for so long that you've forgotten that it just doesn't matter in this sector of the fucking industry. You've used nothing but perfectly awesome libraries lately, that you forgot how many well-known libraries stuff several classes into one PHP file for the sake of performance or convenience or whatnot. And of course you don't have any time read the documentation to figure out what the fuck "paranoid mode" is before ranting about it. To cap it all, you just can't imagine why anyone would reinvent the wheel simply for the sake of fun, or to teach himself how the wheel works. Or because 60% of the other million wheels haven't been maintained in six years and the other 39% don't have a usable documentation. Hey, this is PHP, officially worse than Perl. There is more than one way to do everything. If you don't like one way of doing it, well, don't do it that way. Nobody's forcing you to use this or that, or even to work with folks who do it the "wrong way". If you have a problem with that, I suggest you hang out in /r/python instead ;) &lt;/rant&gt; Okay, sorry. I'm not saying that any of the above applies to you. But hey, how does it feel to be stereotyped like that by someone who doesn't know shit about you? I'm sure I've just made myself look like an asshole but so are you, sir.
Not really an answer, but have you considered not using bbcode? In my opinion, Markdown is a much better markup language than bbcode is.
I've used OpenSTA before with some success. I picked it because https was a requirement. Haven't used selenium, seems neat.
Related: #!/bin/sh echo `date +%Y-%m-%d_%H-%M-%S` echo "Backup started." tar cjf ~/__backup/$(date +%Y%m%d).tar.bz2 ~/public_html echo `date +%Y-%m-%d_%H-%M-%S` echo "Backup complete!" 
I like Markdown, but more people are familiar with bbcode. I planned to release this software and wanted it to offer alot of the common basic features. I guess maybe allowing markdown as an alternative or even allowing both would be something to work on.
Cool! Thanks for the feedback!
What you're failing to grasp is that Smarty **is** code. You can dress it up however you want but that's what it is.
Ah, gotcha. I see what you're saying but I still have to disagree with it. You're then adding a layer of complexity you don't need. Use MVC and plain old fashioned PHP echos.
Everything you just said would have had merit if it wasn't for how you were distributing and presenting your code. If you posted something like "Hey Reddit, I created this class for making SQL queries. What did I do wrong?" then I'd have no problem with it. In fact I would have encouraged you and PM'd you with some cool ideas I came across years ago when I wrote a similar class that evolved over time. I firmly believe that exploration of new ideas or re-inventing the wheel *is the only way to learn anything*. When I was learning python last year, the first thing I did was try to recreate something I've done a hundred times over in PHP because I could focus on higher level concepts and learning the language. That being said, what you did was present your code in way that it seems complete and well researched. You gave it a name to sound catchy too. You should know how harsh the programming community is on PHP. This mostly comes from people *using code like yours*. That isn't an attack on your character. It's simply stating fact. A developer who doesn't know any better (there are a lot, in any language) may download your library because, hey, it looks like the guy behind it knows what he's doing. He's releasing multiple versions, it's on Git, he has a catch name, and he really sells the idea in the overview page on Git. "This could save me some time!", they say. Then, 1 year later, my company gets a client that has the above code implemented and they just can't figure out what's going wrong. Because the developer that downloaded your code did not keep up with iterations of your library (who would? it's so basic, right?) I now have to spend time debugging your crap to make the client happy. Do you now see the problem? You're overestimating your abilities and as a result you're making the PHP community look bad as a whole. You do not represent an experienced PHP developer - you are a novice and there's nothing wrong with that. However, instead of accepting your skill level and spending time truly understanding object oriented design patterns and other key concepts you need to be aware of before releasing a library like the above - you conveniently bypass all of this and tarnish the well written libraries out there by releasing it as if it's some hot shit. Granted, I've steered my career far away from situations where I have to deal with code like yours. But there are people out there that have no choice because they need to pay the bills and you are potentially contributing to making their life miserable (even if it's for a few days). I'm *really* **really** hoping that this experience has brought a little more down to earth. I'm really hoping that next time you consider releasing some code and branding it with fancy bullshit you will consider the true implication of releasing your code into the wild under the flag of production readiness. At the very *least*, I hope that you'll note at the very top of your well written documentation that **"This code is not production ready and developers should take care when implementing it"**. Your enthusiasm in this field will likely grow in a few years and, if you're not a moron, you'll be a well rounded and experienced web developer. After you have substantial experience under your belt and you feel like you can hold your own with other experienced professionals - then consider contributing something back to the community in a form of a library that will demonstrate that PHP is not a fugly language and can be written in a beautiful way. With that said, I do apologize for the verbal beating. I was trying to make a point. I hope I did.
There'd be no reason to have an array that large. Store records in the DB and load into arrays only as much as you need to display.
Depends on how you are using these. Are they changing a lot? If they are, you could more easily add a record than to pull the record down, add to the array, then add the record back up. If they are pretty cut and dry and don't change a lot. I would store as an array.
arrays will likely change regularly
Then I think it would be easier to just add stuff to the database. I think it comes down to whether you change them, add to them, modify them, and use them the most. Each has it's own different reason to do it one of the two ways. Figure out what you would be doing the most and do it so that is the fastest. 
There is also the issue of joining and/or searching the database. When values are stored in the db with serialize (I assume that's what the OP is using to do this), there is no way to easily select, join on, or order by values.
In terms of correctness, each item ought to be it's own record. In terms of being techincally faster I'm not sure. But if you store things in a funky way in mysql you'll pay for it down the road.
Actually I work as a programmer for a medium size wholesale company. I was first using arrays to store information pertaining to individual orders, which was a bit annoying because I had to load the whole thing even if I just wanted to update one piece of data. So when I had the opportunity to re-do the whole database structure, I switched to one record per line and now running reports is a complete night mare. Maybe I need to read more about mysql optimization but at this point I wish I had not made the switch.
You might want to read up on data architecture. "Running reports" is what databases are really good at, and analyzing the stored information should be fast and easy.
thanks, I will!
Did you make any indexes? Also, if you have access, increase some of the mysql caches so that everything can fit into RAM. If you don't have enough ram, stick the index keys in RAM. 
hmm. you just went way over my head.
Not to be a dick, but if he went over your head with the beginning index-statement, then that's your problem. A DB without proper indices is not a DB, it's bigass file with an SQL interface.
my advice would be to write it correctly, then check the speed. If there is a problem profile it before making an optimization descision (mine have always been - more CPU and memory please)
Insightful. Educate yourself. Relational databases are nearly 50 years old, people have had the same problem as you and have solved it a million times over. A lot of them blog :)
By arrays, do you mean serialized blob? In that case, don't. The one thing you want to do by the book, is database schema design. It will come back and haunt you if you don't.
Might be useful to explain exactly how he went over your head - what part of sdlvx's reply didn't you understand?
Uhm. I think you replied to the wrong comment there.
Sorry, those comments were to jcsickz, not to you. I was just adding to what you said.
So, uh, this is kinda was databases are designed for... storage. And lots of it. Unless you need to pull complete arrays from the database each time then simply create a new row for each record. What are you trying to do here?
I think we have found your problem. You need to go find out what these things are, because we cannot have a sensible conversation about databases if you have not got a handle on these basic concepts.
Rows of data: it is what you deal with in the database. Arrays: it is something you throw about in PHP. Don't mix the two if you want to stay on the right side of sane.
it may already, but I don't know what an index is. I just kinda go by how it looks in phpmyadmin. 
NetBeans is pretty nice for development ... PHP and other.
I've been using it for about a year now. Whilst the application itself may occasionally become slow and hog up my system, in general it greatly decreases application development time for me. It's certainly worth spending the time trying it out and learning its shortcuts.
What OS are you running?
Be mad at the dev that implements half-baked software, not the author.
Arguments for NetBeans over something like Aptana?
Win XP Professional (32 bit) at work, Windows 7 Ultimate (64 bit) my main desktop at home, Fedora 12 (32 bit) on my netbook and centos 5.4 64 bit on my virtual development server at home.
Bullshit. The author deserves just as much blame. All it takes is one asshole and a keyboard to make life miserable for someone else down the road.
I'm just curious which one is slowing down on you. I tried Netbeans on OSX and didn't experience any slowdowns. But I gave up on it after a month because the (Python) debugger was quirky. I might have to give it another go.
I love netbeans, it seems to be the only IDE that has natively implemented support for multiple languages, most IDEs seem to officially supprt one programming language, and all other language support is just "hacked in".
it's not Eclipse :D
This also happens to me. NetBeans seems to always scan all your projects and once in a while it just become soo laggy I have to restart it.
Indexes are awesome for speeding up mysql queries. As an example, let's say you have 5000 people, and all 5000 of them live in one of 10 different cities. You can index your table by city and from then on any search by city will cause MUCH less CPU power to perform. Once you start doing joins across tables those indexes really become important.
I really must hear more about your coding experiences. I created [a subreddit just for you](http://www.reddit.com/r/ExpertProgramming/).
I've gone back and forth between NetBeans and Eclipse PDT a number of times. NetBeans always draws me in because it is generally faster and the code-completion seems to be a lot smarter when you're dealing with complex situations. But PDT just beats the pants off of it in terms of getting the IDE to work exactly the way I want it to (that may just be because I am more accustomed to PDT). The SFTP sync interface is sorely lacking in NetBeans IMHO. I don't get why people rag on Eclipse so much for its performance, it seems to run fine for me (on OSX at least), and definitely not badly enough to rank it below other IDEs I have used.
I've never had that problem, though I close projects that I'm not currently working on, it bugs me to see projects listed that are irrelevant to what I'm doing. The only thing I don't like about it is when I'm reorganzing tabs, I can't even seem to get to drop them right where I meant to put them, it just so easily decides that I wanted to drag the tab into a new window or into a new split in the work area.
NetBeans' code completion bothers me a bit. If I have a method which takes another class instance as an argument, NetBeans won't auto-complete for that class. I have to do "$x = new x" in the current scope rather than passing in $x as an argument. This makes auto completion a lot less useful in highly object oriented code. PHP supports type hinting, like "function foo(myClass $x)" but NetBeans won't use it to help with auto completion. It also won't use phpdoc comments to help, although it does display the doc comments when you're coding. I'm not sure if any IDE supports type hinting for auto completion, but it'd be fantastic if it did. NetBeans is also not particularly stable on OS X for me. It's not terrible and I've never lost work because I save a lot, but it crashes once a week or so. Also, svn+ssh doesn't seem to work at all.
each user will have the ability to create a list. each list will have up to 500 items. think along the lines of google tasks
All of it. Although I have a lot of experience working with mysql databases before, I haven't learned the terminology. I'm a frontend guy working on improving my backend skillset.
Yeah. Welcome to three years ago.
I've tried tons of IDEs before settling with NetBeans. It's not the perfect IDE, but it's the best one so far for PHP. Now if only I could get Visual Studio to work in Linux. Probably have to use wine. *Run for COVER!*
You want one row per entry. You probably won't be showing 500 items on every page which means that you'll need to pull all 500 items each time you need to show any and every list time that the user saves. This is super inefficient. Storing data like this is precisely what a relational database is built for. Normalize as much as possible and you'll be fine. If you ever reach the point where scalability is a problem then you're in a good place (ie: you've got tons of users and your service is popular) ;)
so now im not limited to awfully formatted and awful looking code in java, YEY!!
all i ask is why? codeBlocks does pretty well, or just vim it, LIKE A MAN
I'm not sure if this application would need pagination. It might be one of those things where I do pagination in the future, but I'm trying to get this thing going as soon as possible. If it gains in popularity I'll do a lot more fine-tuning and possibly hire a more experienced developer to do the advanced stuff.
If I wanted be LIKE A MAN, I would just do assembly.
I have this problem all the time (NB 6.8). When the file becomes long then it seems to slow down the input from the keyboard. This happens on HTML files and longer PHP files as well. I have an Ubuntu 9.10 x64 system with 8G ram, Quad core Phenom processor, NVidia 9800GT, and almost 3TB of storage space. The system is not slow because of the specs, it's definitely NetBeans. I don't like how the right-click context menu in the projects and files section doesn't have a border and NB doesn't seem to have a built-in FTP utility to retrieve files from FTP, it can only upload files. Other than the speed issue, I love NB, so don't get me wrong about it.
Eclipse has never worked on my computer (Java issues). I'm hoping a fresh install of Ubuntu 10.04 fixes that.
All of them but it's very sporadic. The only consistent problem I have is running Netbeans on the CentOS VM or accessing a Samba share on the VM is ridiculously slow and unusable when it decides to scan my projects.
Grrr: double-click drag doesn't work in Netbeans. Try it. That's enough (with the terrible font display) to keep me using PDT.
that just game me a massive erection.
I'd like to revise my earlier comment. It appears as though the newest version of NetBeans does support type hinting for function parameters. Unfortunately, PHP doesn't support type hinting for return values, so if a function returns an object NetBeans won't auto-complete for that object.
Yeah, NetBeans is really unusable when scanning projects over samba. You have to wait for it to finish until you can get started coding. This happens to me on WinXP at work as well as Linux Mint 7 at home.
what does double-click drag do in PDT?
It allows you to select by word. This is actually probably something done by the OS/windowing/widget system, as it works pretty much everywhere (odds are you can do it on this text right here: double-click a word, hold down on the second click and drag to extend the selection a word at a time - try it). This also works with triple clicking, where it allows you to select by line. I gather the reason it doesn't work in Netbeans is because the editing area is AWT/Swing as opposed to a native widget. Eclipse uses SWT, so it works there. Same reason Eclipse has much nicer anti-aliased fonts.
it's aite.
yeah, it certainly seems useful, but it's not anything special.
can I borrow one of those H's? tanks.
TIL that the inventor of PHP works for Yahoo!
in case you want to work on bullet #3, you might find this interesting/helpful: [cloudfusion](http://getcloudfusion.com/) - it's a PHP API to various cloud services including Amazon S3, CloudFront, and a number of others.
How did you learn that today if he stopped working there last year?
Do you really need to use tables?
I just downloaded it and tried it out, and it is fast and simple to use. I like it a lot. I used Eclipse PDT before, but it just kept crashing. Aptana was worse. I'm sold on NetBeans for PHP for now.
I just tried it. Double-click drag works in NetBeans PHP.
Hmm. Not 6.8, nor 6.9m1, nor the nightlies for me. Could just be in Linux or Gnome.
Most of it's applicable to any language really, with a few PHP examples towards the end.
I find it ironic there's an example of micro-optimization (the for loop example) without any evidence what-so-ever of its efficacy and immediately afterwords discusses Xdebug and how profiling can show you your bottlenecks. I hate to throw the baby out with the bathwater, but the PHP community is desperately trying to escape the quagmire of micro-optimizations and this article isn't helping. If the article wanted to be more genuine, it would have either (preferably) dropped the for loop segment or it would have compared for loops with foreach loops and provided benchmarking details. And it would address issues like the fact that PHP arrays are not numerically indexed, and said numerical indexes do not have to start at 0 and go in perfect sequential order (making for loops a stability liability when it comes to accessing an array). I wish everyone would PLEASE stop trying to outsmart the compiler and instead focus on real issues like algorithm inefficiencies ("By changing how I call my recursive functions I can become O(log n)"). And I really wish everyone realize that noone's sites are going to be as high traffic that they need to worry about single/double quotes, for vs. while loops, etc. It has been shown time and time again that you will hit database and IO bottlenecks long before language bottlenecks that will force you to scale up or out your architecture (thus delaying the possibility of reaching language bottlenecks) so by the time you hit language bottlenecks you're so massive you'll have a team of engineers using HipHop (and STILL avoiding these silly little micro-optimizations).
You're taking one little example and throwing the rest of the article out along with it. I did kinda try to dismiss that as a "simple good practice optimisation" and then try to direct the reader to a more structured approach. &gt; compared for loops with foreach loops and provided benchmarking details In an earlier draft I did link to phpbench.com for that, but decided (as you say) that micro-optimisations aren't really worth the bother. &gt; single/double quotes, for vs. while loops, etc. I agree, that's why I didn't speak about them. &gt; It has been shown time and time again that you will hit database and IO bottlenecks Yep, that was my very first point in the article.
 for($i=0, $c=count($arr) ; $i &lt; $c ; $i++) { I had no idea you could put multiple statements in the for loop like that. What else am I missing?
I apologize for jumping on the one small example. I guess I'm a bit sensitive being a regular on freenode.net#phpc and having to watch all these micro-optimization posts come and go. But, and there's always a but: 1. You don't back up your "good practice optimization" with proof as to why it's an optimization. Code readability is probably one of the pinnacle "good practices" and your example eschews readability and semantics for speed. Back up your assertion, is there evidence to show that the speed gain is worth the awkward layout of a text-book loop? 2. What you demonstrated is not PHP best practice. Best practice is using the foreach loop construct by default. The foreach construct will gracefully handle code refactorings (No longer looping an array but an object? If it's iteratable you're good) and mixed-key environments. After benchmarking, then and only then will one make the decision to convert a foreach loop into a for or a while loop. 3. Whether or not you intended to dismiss the example, you proceed to go on and (properly) instruct me to make all of my decisions based on profiling and evidence. Which is jarring because before this instruction you just told me to use this non-standard "best practice" without providing evidence for its efficacy. You do this on all your other points, you make an assertion, provide links or examples to back it up. On this particular point, however, you bring up your for loop example, make a segway into xdebug profiling, and don't tie the two concepts (by, for example, showing the xdebug profiles of two sections of code, one with and one without your optimizations). So if the point you really want to get across is "database, client-side, and io are your bottlenecks and profiling will help you find them", why did you even waste the bytes discussing a micro-optimization technique without tying into the post? I'm sorry if I'm being rude by zeroing in on this one point, but like I said I've become extremely sensitive to micro-optimization "techniques." They distract and mislead newbies, waste time, and contribute to some of the ugliest and most unstable code I've ever seen.
How about some tidy array_* function usage: $required = array('name', 'email'); $invalidFields = array_diff_key($_POST['person'], array_flip($required)); $personFields = array_intersect_key($_POST['person'], array_flip($required)); $personFields = array_filter(array_map('trim', $person)); Oh, and arrays work with the "+" operator too, which allows stuff like: list($firstName, $lastName) = explode(' ', $name, 2) + array('', '[no last name]');
&gt; arrays work with the "+" operator Mind = Blown. Is there any reason to use array_merge() over this?
Caching should be first on the list. Set up something like Varnish and check your Cache-Control headers. Until then, basically anything else you're doing for performance is a waste of time. Caching will hide a *lot* of sins in the rest of the application. PHP is fastest when it never has to run. 
mod_expires does wonders. curl -I domain.com
It's not the language that makes a fast website. It's the architecture. 
"+" doesn't overwrite existing keys, array\_merge does only when the key is a string (for int keys, array\_merge appends).
Why would a call to count() take any time at all? In concept, I see why you would want to follow the _never repeat yourself_ rule, but in practicality does count() really hog CPU? There are much bigger fish to fry, like all the code _in the loop_ which could be abstracted out. Also, I'm not quite sure why he sticks a section on image compression in there... Seems out of place in a PHP optimization article.
I believe he intended it more as an example then as an actual case, but in situations where you may have a very large array (say 1,000+ items) it most certainly can make a difference. Especially if this is a page that's getting a lot of hits.
:) - you're right, there are a lot of micro-optimisation articles out there which are really counter-productive, and I don't blame you for seeing the post title and flinching as you click the link. 1). yes, I don't give proof. As I said I did link to phpbench in an earlier draft but I really didn't want to give too much space over to it so it got cut. 2) Good point about foreach handling iterable objects. 3) Point taken. I've edited in some words about not getting all bent out of shape on silly little optimisations: &gt; PHP is easy. Easy to get wrong that is. There are a lot of posts out there with micro-optimisation techniques, which can work wonders in very specific circumstances, but generally speaking these "tips" will be counter-productive in the long run, forcing you to code un-naturally and making your code resistant to changes. For example, using [&amp; to access 1d arrays is faster](http://www.phpbench.com), but what if you add a dimension later on in development - will you remember that it hurts performance on &gt;1d arrays? And what if the next version of PHP changes that behaviour? &gt; However, there are a few optimisations that are so blindingly obvious, yet often ignored - Caching the count() in a loop for instance:
Yeah, I didn't mean to imply a hierarchy in the ordering. &gt; PHP is fastest when it never has to run. nice phrase ;)
I'd like to, and have some experience with C, but writing C/C++ for the web is a fucking liability.
I've submitted patches and bugfixes for both PHP and PECL extensions, but have never created an extension from scratch - good luck to you if you want to, though! Anything interesting in mind?
If you want to profile your application, use [xhprof](http://mirror.facebook.net/facebook/xhprof/doc.html). Protip: Your queries are slow. Stop worrying about 2) and 3) and look at mysql's slow query log. 4) is actually 5), only done wrong.
Any open source project is open for new contributors, not only the ones actively seeking help. Usually they have public issue trackers, look for small things you'd like to do there and get in touch with the devs' mailing list. Think of the tools you use regulary: frameworks, libraries… 
This is the PHP sub-Reddit. Don't come in here trolling around. -1 for douchebaggery
Why is it a liability?
check out: * the PHP Community channel (\#phpc) on irc.freenode.org * [php source tree](http://svn.php.net/viewvc/php/php-src/trunk/ext/) * [Extension Writing Part I: Introduction to PHP and Zend](http://devzone.zend.com/article/1021/extension-writing-part-1-introduction-to-php-and-zend)
[Extending and Embedding PHP by Sara Golemon](http://www.amazon.com/Extending-Embedding-PHP-Sara-Golemon/dp/067232704X) is the go-to book for this subject.
&gt; the PHP Community channel (#phpc) on irc.freenode.org While we are a friendly community, don't pop in asking questions all at once. Spend a week being social before you start asking questions. However if you're popping in to ask which particular channel is best to pose your question, that would be acceptable. We're kinda sensitive to people treating us like we're ##php.
I highly recommend [Sara Golemon's Extending and Embedding PHP](http://www.amazon.com/gp/product/067232704X?ie=UTF8&amp;tag=pixelateddrea-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=067232704X) — it's a little out of date now, but still an invaluable resource (and to my knowledge, the only decent resource on PHP internals [at least, the only one written by an internals dev])
This looks like exactly what I have been looking for. WISP (Windows, IIS, SQL Server, and PHP) application development has been an interest of mine lately, and this definitely looks promising.
I don't know if this is good or not, but it's always good to have more database support.
Davey!
I need a good example of PHP JSON and Ext controls. I return a JSON formatted dataset and then pass it to an Ext control, but the data does not get rendered. WTF.
Because you have to be really careful in order to not write exploitable code.
It depends more upon what platform you deploy to than what platform you develop on. Find an editor or IDE that you're comfortable with and go with that, whatever OS it happens to run under. I use Windows workstations for development work, but I typically deploy to FreeBSD or Linux environments. If you deploy to Windows, there are a few functions that won't work, though none immediately come to mind. If you're deploying to Windows 2000 and need sockets capability, you're stuck with PHP 5.2.x, 5.3 uses an API that doesn't exist in Windows 2000. For convenience, stick with unix-style pathing (e.g. "c:/apache/htdocs/class/Foo.php") to avoid escape issues. I'm sure others can chime in with other caveats.
whats stopping you from going the LAMP route?
Nothing at all, LAMP is a proven and great success. WISP, however, is new territory.
I can't speak for ihsw, but I work for a marketing agency and a lot of our clients want to host their own sites, and their IT department is invariably familiar only with Windows servers. Often we can convince them to use Apache/MySQL on Windows, but with this announcement we'll soon be able to use IIS/SQL and still use our normal PHP tools (like Drupal, once 7x is released).
I believe this was initially announced at Drupalcon, or at least it was synced with the first day of the conference as Dries mentioned it during the opening keynote yesterday. Drupal 7.x, which should be coming out before the end of the year at the latest, will ship with full Microsoft SQL server support.
I don't care for IDE differences, I like NetBeans on Linux and Visual Studio of Windows, but I'm more concerned about functions that don't work, or strange behaviors of expected functionality. Does it matter if I use IIS or Apache on Windows, versus Apache on Linux? I've been doing all my work on Linux, but I do my Windows development within a VMware slice, so in all my years I've never had to worry about losing my work or setting things up again when upgrading my Linux OS. Right now I'm planning on upgrading to the latest Ubuntu next week, so I will need to back up MySQL and code, upgrade, restore my database, download the source code for PHP 5.3.x, re-compile, setup my development environment and tools, and THEN get back to work. On my VMware slice I just start it up and get working. NO matter if I updated my Windows or Linux, my VMware image stays the same and I just keep working. P.S. I recently updated my VMware "development" image to Windows 7 with all the latest development tools, databases, and IDE (Visual Studio 2010 Premium!!).
I'm helping with the Cairo, GTK and WinGUI (WinGDI, WinGUI, WinSystem) projects. General thoughts: it's really not that hard. Most of the time you're simply wrapping a pre-existing C function using the Zend API, which is simple as pig-shit. The more tedious bits are building the config.(m4|w32) files. If you're on Windows, you don't have the phpize functionality which makes building the extension a little more tedious. What platform are you on?
Right. SQL Server support was not planned for D 7.x in core, but it would be even better IMO. It also means Drupal would run OOB on Azure without having to resort to Azure VM or an expensive extra worker for MySQL.
When developing on windows and deploying on Linux I have run into some functions not working as expected. If I remember correctly they had to do with opening files, but I can not remember which they were.
I'm running linux and osx, so no windows headaches for me.
From the Amazon reviews it seems that it doesn't cover any of the php5/oop stuff- do you have any recommendations for filling that gap?
Is ##php the same group of people as in #phpc? I'll be honest, I stopped going to ##php because of how awful the advice generally was and how little the people in there seemed to know about programming. It seemed that the more I tried to give decent feedback the more I got trolled. I haven't given #phpc a chance though.
The common errors you are reporting have no link with Windows / Linux. It's just the default configuration. If you don't want &lt;? : shorttag=no (in php.ini) To get errors: error\_reporting(E\_ALL); ini\_set('display\_errors','yes'); For the charset: you use a goddamn text-editor worth his name. SSH: use cygwin 
I suggested keeping tools together, even if it's not needed: ASP/Windows/IIS/VBStudio or PHP/Linux/Apache/whatever See my other post for more details
There's a couple of issues yes, but you can still do it. For PHP, use apache. The mod is excellent, speed also. There's a bunch of bindings between the two and this is the most common, so support is legion. On windows, I strongly suggest using Notepad++ for a text-editor or Netbeans/Eclipse as an IDE. Their PDP is nice and they exist on linux. Common problems: * Unix paths (as mentionned). Always use forward slash and never write 'C:' in a path. Declare a global constant like BASE\_DIR (The best is to autodetect it), so you can do: require BASE\_DIR . '/functions.php'; Bonus: faster than to lookup in the include path * If you have a dumb editor, watch for newlines: \n vs \r\n vs \r * PHP is fun to use in combinaison with the command-line. You'll have hard problems if you mix windows/linux. My best advice: use linux
* Windows filesystems are case-insensitive, so if you store a file as "somefile.php" and open/include it as "SomeFile.php" Windows won't complain. As soon as you deploy your project on a Linux filesystem you'll get file not found errors. * Make sure your editor doesn't prepend a [BOM to UTF-8](http://bugs.php.net/bug.php?id=22108) files or you might get funny characters at the start of your page or worse ("headers already sent").
Some of the people in #phpc also listen in on ##php, but they really aren't the same group of people. #phpc was designated as purely a social channel for this reason (and is usually hostile to technical help questions and solicitations from people we don't know yet, though not hostile to general socializing). It's a good crowd. As long as you truly understand the basic rules of etiquette and realize it'll be a few weeks before your safe soliciting help, you'll be more than welcome.
I like http://www.elgg.org - an open source social network web application. You can create plug-ins, widgets, or themes if you don't want to work on bug fixing. It has a large community of developers.
YQL - Yahoo! Query Language http://developer.yahoo.com/yql/ does something similar except with a REST API that can return JSON 
Drupal.... pfffft.... I will never develop anything for that CMS again, I swear.
I've always spoke poorly of drupal. I wish it would just go away, I'm just sick of hearing about people wanting to make a drupal site where they get 90% of everything working in a week, then spend the next year hacking the hell out of drupal to finish the last 10%. edit: to be fair to drupal, I say this about all "productivity tools". They give you just enough stuff to get you knee deep into your project, but theres always that last important detail that NEEDS to be done which the productivity tool doesn't natively support, and you start doing things like "well I can't fit a paragraph of text under this image, but it does have a space for a caption, if I hack up the CSS file I can make the caption look like a small paragraph"
Don't use absolute paths, always use references. Use forward slash for working with files even though windows prefers backslash, it works with forward slash. The only other thing is commands that let python run system commands (like exec() ) For the most part everything else is the same. Remember to not use config specific code (like &lt;? instead of &lt;?php ).. however you shouldn't be doing that regardless.
i wish i *could* swear... for me it pays part of my rent, but from a developers standpoint: i really *don't* like it. it feels like bronze age.
&gt; Shorttag was set to yes &gt; I tried both of these as well, as I said, no errors were returned. You had the php.ini file in the wrong location, should've checked phpinfo (hint: it doesn't go in the PHP directory). &gt; It's happened in several, don't blame the text editor as it has nothing to do with this. This is actually the server setup, the Windows HTTP server was probably set to send things as ASCII by default while you save as UTF-8 (or reverse). There are weird things with PHP on Windows, but the things you describe are PEBCAK.
that makes sense. just was wondering if ppl just choose windows to choose windows instead of running a LAMP setup.
Run LAMP in a virtual machine and use your dev tools in windows. That's what I do and it's amazing.
Sounds like a bad idea to me. Just adding another layer of complexity to creating a project. 
You can experience this on a mac too (if you don't set the filesystem up as case sensitive)
Career-wise you would be better off to develop in linux. They don't call it the LAMP stack for nothing.
&gt; Don't use absolute paths, always use references. I have heard that can harm performance, as the interpreter has to loop through the include paths when not provided with an absolute path. Of course, this cannot be said without an example using platform-agnostic absolute paths. define("SITE_PATH", realpath(dirname(__FILE__))); define("DS", DIRECTORY_SEPARATOR); $myFunctionsFile = implode(DS, array(SITE_PATH, "my_functions.php")); include($myFunctionsFile); There, that works on any platform.
This. I was forced to use Drupal for a site recently... first time using it for a project of any size. Giving me fucking nightmares.
I use dirname(\_\_FILE\_\_) all the time, not so much for performance reasons but for sanity reasons. For instance if you include a file which includes a file, it can get very confusing as to what the "current" directory is that is acting as the reference directory. but if you use dirname(\_\_FILE\_\_) you ALWAYS get the directory of the file that you are currently coding, it doesn't matter if it's being included or not. For example, I made a little PHP script which helps me in quickly creating multi-page forms. (Called Mr_Webform), I have it set up so that if I open Mr_Webform.class.php in a web browser it just runs all my test cases to make sure it works, but for normal use it's meant to be included into other scripts... So on the top of Mr_Webform.class.php I have put $temp=dirname(__FILE__).'/Mr_Webform_files'; require($temp.'/Step.class.php'); require($temp.'/AbstractField.abstractclass.php'); require($temp.'/AbstractMultiSelectField.abstractclass.php'); require($temp.'/FieldCheck.class.php'); require($temp.'/FieldDropdown.class.php'); require($temp.'/FieldRadio.class.php'); require($temp.'/FieldSubmit.class.php'); require($temp.'/FieldText.class.php'); require($temp.'/FieldEmail.class.php'); require($temp.'/FieldPassword.class.php'); require($temp.'/FieldZipcode.class.php'); so that it always includes files correctly. (just to give some ideas, the whole trick is just to make sure you aren't saying something like C:/www/file.html or /var/www/html/file.html) I've also heard there is a perfomance hit from using relative paths, I'm not sure if it's true though, I imagine it's a small peformance hit if any. P.S. There is no need to use the DIRECTORY_SEPARATOR, you an just always use a / because windows sill works as expected with a regular old /. edit: Fixed the underscore error, anyone else sick of reddit's "intuitive" formatting, I wish it used a more HTML tag like approach like bbcode.
Did you guys actually buy a book and attempt to learn how drupal works? Or did you really think you were just going to dive into a huge codebase with thousands of lines of code and be able to do everything from the get go? It only took me a weekend to learn the ins and outs of module and theme development by reading a book. If you want something less dense try kohana or the like. You have the unreasonable expectation that everything should be infinitely flexible. There is never a tool that can match your needs 100%. What matters is you have a support structure, aren't rewriting a new login system for the 100th time, and have an east way to update, backup and regress to previous versions.
It's not really another level of complexity so much as another tool, but that's irrelevant: running a virtual LAMP stack will ensure that deploying to a Linux environment won't prompt any surprises. The extra 5 minutes of work required to install VMware or Virtual PC is vastly out-weighed by the insurance of developing on the same platform as the final deployment/production environment.
You said you're uprading Ubuntu, but didn't clarify why that would require re-installing all your tools and data. Are you not currently using Ubuntu on that machine? You might want to look into splitting your /home directory to a separate partition, which would help with several of the steps you listed. The only thing that would absolutely need to be repeated is re-compiling PHP (unless the latest Ubuntu has packages for 5.3.x, either natively or in a third-party repo).
They call it the LAMP stack because it's an acronym: Linux, Apache, MySQL, PHP.
Do you mind sharing the problems or annoyances you ran into with Drupal?
Drupal, like many other productivity tools. Work GREAT when you have a cookie cutter project. if youre doing something that's been done 100 times before, you'll find a sanctuary in drupal. However to every degree that you create something new, you will find that it's not so easily implemented. The worst part is that everyone gets the feeling that its so close, because you'll look at it and look at your specs and say "well it seems I've got 90% of this done", so you keep fiddling at it trying to complete those past few tricky parts, it eventually just becomes an ordeal that continues on for months and years. Eventually you either change the spec sheet or go bankrupt paying everyone overtime to try and get "these last few things working". I've been there, I've done that, I've seen it happen. It's quite sad.
Bronze age compared to what? The learning curve is steep, sure, but what other open-source PHP framework do you prefer as an alternative? It might help to get a book (Pro Drupal Development is excellent) or check out some of the screencasts and videos floating around (Lullabot has a very thorough and easy-to-digest video series).
I don't see how you can have that problem. Between themes and modules you should be able to do anything you want. Anything you do would be less work then starting from scratch. The only reason not to use drupal or any other CMS would be for speed. Any examples you can give?
In my experience, Drupal is infinitely customizable, but it has a steep learning curve. If you don't spend the time up-front to understand the tool, you're going to spend a majority of your time fighting back and hacking modules rather than getting things done. I suggest investing in a book that covers the basics of the various APIs, hooks, theme layer and module system, etc. *Pro Drupal Development* is always highly recommended, as are the Lullabot videos if you're more of a visual learner. Edit: In reply to your own reply, I see this as a problem outside the development process. I find it to be much better to pick the tool (like Drupal, or any other CMS or framework) and then design the requirements and functionality around that tool. This allows you to identify problems up front, or in the worst case allows you to switch the tool to one that better fits the requirements.
Were you forced to use it by a client or by your boss? If the former, why would you agree to using a technology you're not familiar with without putting in the time and/or resouces to get proper training? If the latter, why aren't you being supported with proper training, books, etc? Sounds like the problem isn't Drupal specifically, but using an unfamiliar tool prematurely.
I guess the thing that bothered me most is the complete lack of a clear [flow of control](http://en.wikipedia.org/wiki/Control_flow). You never know what part of the code is executed, why it's executed, and how to influence the decision that this particular piece of code is executed. In effect, this means you end up shouting "stop doing that!" at your screen. In my view, any system should have a structure such that it's completely obvious what code is run, and why. Drupal does not have that - on the contrary. I guess the reason for this is the rather opaque hook system and the lack of a object-oriented environment. Unfortunately, these things are not easy to change - which is why I'll never develop anything for Drupal again.
I wish this article would have mentioned more than just Dries' keynote speech and Acquia's involvement. I'm at Drupalcon right now and there are dozens of companies that focus singularly on Drupal development, which in my mind proves that Drupal has become a legitimate "enterprise" platform.
I know you said you're looking at using Symfony, but have you looked at Drupal as a framework/CMS? Once you get your head around the core functionality and contrib modules like CCK and Views, you can do an amazing amount of detailed configuration and customization without touching any code. Of course, you can always drop into the template or module system and override individual elements or functionality if you need something to work slightly different. The reason I suggest Drupal is because of two factors: 1) Community-focused projects are very popular within the Drupal community, and there are several D6 distributons specifically focused on that kind of project. 2) For hobby or side projects, Drupal is a great choice as you can get really complex sites built within a few weeks (assuming you don't need to tweak every little thing as you might with a commercial or primary project), and the community is second-to-none in terms of support.
I completely disagree that there is no control flow in Drupal. I don't know how much time you invested into learning the system before you abandoned it, but if you pick up a book on the hook and module systems you may be surprised at how incredibly detailed and flexible, yet entirely predictable and reliable, the code actually is. The hook system is very powerful, but it's also something that is confusing if you don't understand it. I can't speak much to the object-oriented complaint, but if that's a key sticking point I guess that's a deal-breaker.
&gt; However to every degree that you create something new, you will find that it's not so easily implemented. If you don't understand the tool, of course it will be difficult to implement custom functionality. Do you mind sharing how you familiarized yourself with Drupal? Did you rely on any of the books, videos, or other training materials, or did you just try to jump in without learning about the hook, module and theming systems?
I have read the book and I've been working full time on drupal projects for about 2 years now (and 10+ years php developer). When I say bronze age, I refer to the programming concepts implemented in drupal itself: They are like a reminder of php4 which we all should try to forget a fast as possible...
Ah, well, I'm more of a template/theme developer than a true programmer, so I can't speak to that with any authority. What kind of things are you doing in Drupal? Building sites, applications, modules?
Of course there is a control flow, but it's just very opaque and non-intuitive. I don't like the hook system. There. I've said it. In fact, I despise it. I've seen code a 1000x more complex than Drupal that is easier to understand. All over this thread you've been implying that if people just read enough books, and if they did another Drupal course they might have been educated enough to see the advantages of the 'incredibly detailed and flexible' hook system. Hogwash. I have never needed any book or any course or any training to maintain or develop for whichever code they threw at me. And believe me, some of that code was larger and way more complex than Drupal (think missile systems). But once I spent a few days in it, I'm comfortable and can be highly productive. With Drupal, I just kept swearing. Weeks on end. And it's been the only piece of code that has done that to me. So no matter what you say, you cannot convince me. Drupal is rotten, and I will never touch it again. To all the fellow haters (there seem to be quite a few around): try [concrete5](http://www.concrete5.org/). FINALLY a decent open source CMS.
&gt; All over this thread you've been implying that if people just read enough books, and if they did another Drupal course they might have been educated enough to see the advantages of the 'incredibly detailed and flexible' hook system. Drupal is an excellent platform for writing tutorials off of, and for making some pretty good bread as a consultant. I agree with the notion that it's become too unwieldy, but disagree that it's because of hooks. Hooks are great, if the motto is "don't hack core." The devs kept adding "cool features" to core, though, which might be better off as contrib modules, so sometimes core breaks and if you want to be able to add security patches in the future, you'll have to work around those problems. Node, for example, and the forms api, might be better off as something you can add as an optional extra, rather than the only proper way to store content and post data. Some content does not belong in the node table, but those are edge cases. Even when you use the node table properly and you make a page, you need to either give it a pathalias, or memorize node id's. If you use pathalias, then you'll run in to trouble the second you try to use localizer. If you use localizer, even node id's are aliases for something, and it's never quite clear what, and your urls don't work the same. Also, since so much of your information lives in the database, you'll be faced with quite a challenge if you have to move a large site from your desktop to a staging area, or a staging area to production. CCK, Views and Rules include import/export, however these modules should probably not be used very much after the prototyping stage is over. If only views2 didn't make their api's impenetrable to mere mortals. Form API is a great idea, and it's amazingly well-executed, for what it is. However, try editing three nodes in three different windows, and then saving. There is no guarantee where your file attachments will land. If you create a custom form in-code, it will behave differently based on whether you're logged in and what the cache state is, and if something is cached there is no way to get the slightest indication that that is your problem, so you do all sorts of voodoo code around the bit that renders the form, or handles submit actions, or shows the form in the menu callback, instead of truncating your cache table. And don't get me started on Ubercart. Taxes were added as an afterthought. I challenge you to make your store support multiple currencies in a sensible manner. If you change any item data in your cart item hook, and then attempt to update your cart in the ui, you can't remove the item. There are little "security checks" all over the contrib modules, to protect against developers. So yes, Drupal has some warts. Maybe by version 8 someone will be fed up enough to release a stripped-down Drupal which just has the hooks api, menu and user_access stuff. 
Voodoo. That's the word. Drupal is just **too much voodoo**. I appreciate your post though. And I repeat my nomination of [concrete5](http://concrete5.org). It is modular, well coded (in PHP5), easy to use, and easy to extend. I'm sure it will replace both Drupal and Joomla in the long run. Not yet (critical mass etc), but eventually.
It's a very good idea.
ViewVC is pretty crappy. Instead I use http://php-og.mgdm.net
mac=linux
Mac=BSD more so than Linux
Long story actually. Also, had used Drupal for small stuff in the past, this was the first major one... at no point did I have issues with how to do thing, merely with the fact that it does a lot of the things I needed to do quite badly (and yes, I am doing things the way they need to be done, not overlooking better methods or anything... some of what I need to do, the documentation actually says that Joomla is a better choice for this)
Bookmarked... I've set up Drupal from scratch, it is quite a monster, probably overkill for these projects... but I couldn't find anything that had so many plugins, I found plugin for almost everything I needed...
Esp. Gentoo where large parts of the "standard" PHP components are optional. *sigh*
RobbStark here makes a good point, Linux is the "traditional", and more popular environment for PHP to run on. This is particularly true when it comes to large sites where licensing becomes even more ridiculous and startups where financial responsibility is important.
I eventually want my app to be platform independent, and I'll need to host it somewhere which will probably use Linux anyways. But, I don't want to have to launch VMware if I don't have to.
I do my work in my /home directory, but I like doing fresh installs instead of upgrades. My database in in MySQL and needs to be backed up before I wipe everything away. I always backup my /home directory just before a re-install.
I currently do my development in Linux with NetBeans, MySQL and other tools.
In C# ASP.Net I always set my root directory with "~/" which represents the web app root folder. I don't know the equivalent in PHP. I **have** to have a direct full path to my header includes.
see:http://www.reddit.com/r/PHP/comments/btmam/does_it_matter_if_i_develop_php_in_linux_or/c0oj77e to see how to make sure youre working in the directory you want to think youre in.
So, I know it's nitpicking and completely besides the point, but I can't help but mention: &gt; `$session_res = $this-&gt;db-&gt;Query($session_sql);` &gt; &gt; `if (!$session_res) return FALSE;` &gt; &gt; `else return TRUE;` What‽
I've always worked under the assumption that one wants to avoid making database requests for common/temporary data. Wouldn't this add a lot of overhead?
What's confusing about it? If the query passes, it'll return an object. The conditional will return true or false depending on the value of $session\_res. You don't want to return $session\_res because it's not a boolean variable and you shouldn't leak the internals of your class. 
Better way to do that- &gt; return (bool) $session_res;
Yes, it would. The only benefit to this would be if you're running multiple machines and need to share session data, but there are better ways to do it.
Personally, I tend to avoid type casting due to the overhead that it generally involves. If the only grudge with the code you had was that it was too long, then I much prefer doing it in the following way: return $this-&gt;db-&gt;Query($session_sql) ? true : false; Anyway, after hearing your objections, I find nothing particularly outrageous about the code snippet that you pasted from the class. 
Typecasting overhead? Seriously? You think that casting a new type is going to have more overhead then adding control structures? Alright, I'll bite. Here's my shitty little benchmark tool- &gt;$thing = 'dfadjsfhjdshfkjdshfkjsdhfjkhdsfjkhdsjkfh'; &gt;$time = microtime(true); &gt;for($i=1;$i&lt; 10000;$i++) $stuff = (bool) $thing; &gt;echo microtime(true) - $time; &gt;echo "\n"; &gt;$time = microtime(true); &gt;for($i=1;$i&lt;10000;$i++) $stuff = $thing ? true : false; &gt;echo microtime(true) - $time; Results: &gt;0.0017690658569336 &gt;0.0024340152740479 Not concrete evidence, but certainly enough to show that you're micro-optimizing and doing it poorly. Remember people- always test, never assume.
&gt; Typecasting overhead? Yes, typecasting comes with an overhead. Albeit, it might not play a significant part in this case, but that's besides the issue. Bottom line is, there's nothing particularly outrageous about the snippet pasted earlier and you're making a lot of fuss about nothing. PS. My code wasn't an alternative to yours, it was an alternative to the original snippet, doing the same thing, only shortening the length of the code. It was merely there to demonstrate my own personal writing style. I'm sorry you took offence. **Edit**: Ran your code on my side and got the following results: 0.00214290618896 0.00109791755676 0.00210809707642 0.00106596946716 0.00210499763489 0.00104999542236 Ran it 3 times just to be sure. 
&gt;Yes, typecasting comes with an overhead. Albeit, it might not play a significant part in this case, but that's besides the issue. I just can't imagine any case where typecasting is useful where it would advantageous to do it in another way for performance, particularly when it comes to casting to a bool. Typecasting is one of the very lowest level operations, and php often does it behind the scenes without you even knowing. In fact, in your own example, I would bet that the results of "$this-&gt;db-&gt;Query($session_sql)" end up getting typecast by php just by virtue of being the subject of a conditional statement. &gt;Bottom line is, there's nothing particularly outrageous about the snippet pasted earlier and you're making a lot of fuss about nothing. Well, as was said in the very first post, "it's nitpicking and completely besides the point". That being said I feel like we should discuss things like that. The code above, while functional, is not very elegant and doesn't match many code standards out there. There are a lot of newer PHP people on this subreddit, and as experienced developers we should point out that style and clarity do matter. I think your comment helped with that- I do agree that a tertiary statement is probably the best way to handle those situations in general (just not when looking for a boolean) and it was helpful for people to see that. At the same time, I felt it was my place to point out the one thing I felt was a flaw in your own statements, in order to prevent the various newbies who may read it from avoiding typecasting over some non-existant performance issues.
&gt;is not very elegant and doesn't match many code standards out there. I can certainly agree that it's not particularly elegant (though, not particularly ugly either), but it does reflect the majority of PHP code out there, so it most definitely is a de facto standard. &gt;I felt it was my place to point out the one thing I felt was a flaw in your own statements I re-ran your test a few times. I got quite the different result than you did. I edited my [previous message](http://www.reddit.com/r/PHP/comments/bu8nl/writing_a_custom_sessionhandler_class/c0okuza) to include the data. Anyway, reddit is running ridiculously slow on my side and I'm starting to get "503 Service Not Available" errors. I'm assuming my side of the network is under heavy load, so I'll be off for a while. 
I tried this with my preferred method, and to my surprise, it was the fastest of the three: $stuff = !!$thing; 
The session hi-jacking portion of this post is completely pointless, just use this where appropriate (I'd say, once logged in, every request, before then, not really necessary): session_regenerate_id(true); This means that the session ID is regenerated on [most] every request, such that even if an attacker steals a session ID: it's useless. Personally, I'd wrap this in your Session class, and UPDATE the session_id in the database rather than passing in TRUE for the first argument and needing to delete and re-write the session. Also, memcache is a far better storage medium so long as you're OK with it's volatile nature — at the very least, for high-traffic sites with few per-session writes (which should invalidate the cache), use it in front of your database.
An if statement checking a boolean that returns true else false is definitely NOT a de facto standard. If I was considering a library for use in a project, and saw garbage like that, I would throw it aside and look elsewhere. That is just ridiculous in every way.
Well, the if-statement doesn't check a boolean, as explained in my original post. It checks if the variable is an **object or false**, and returns true or false depending on the value. 
I'm getting the following results: 0.00214600563049 0.00109195709229 0.00115299224854 Third one is yours. 
Regenerating on each page view is unnecessary and can cause a lot of trouble. The rule is to regenerate the session-id each time the users privileges increases. Typically that simply means on login.
For instance, I would abstract the persistence mechanisms out of the solution. Maybe create a methods called: getStorageMechanism() and setStorageMechanism() public function getStorageMechamism() { if(is_null($this-&gt;storageMechanism)) { $this-&gt;storageMechanism = // Default session storage Mechanism. } return $this-&gt;storageMechanism; } In this kind of way, one could configure the session facade to use any storage mechanism whatever without really having to modify the code-base.
Over multiple machines, I wouldn't programatically (at least via php) try to share the session. Better to use Varnish or the like on the backend to distribute it.
Fuck you. It's not a "de-facto standard". It's complete bullshit. If you use braces, use fucking braces. Why right and if/else IN TWO DIFFERENT WAYS IN THE SAME METHOD. It's fucking stupid and you're fucking stupid if you think it's a good idea. Not typecasting due to overhead? You're a *complete moron* and you I'm thankful I don't have to spend my work day anywhere near you. Un fucking believable. Wow. Wow. Wow. Wow.
The PHP community needs more articles like these.
Which I am well aware of, but when you are using a language with Type Juggling, and you write "if ($var)" where var is object or false, $var is converted to a boolean ANYWAY. So that line does, in fact, check a boolean.
Fabien never fails to impress. This looks sweet.
Odd, I ran that code here (Windows machine) and I got typecasting about 52% slower than ternary. This is worth looking into.
I ran this test on the php install that ships with Snow Leopard (so php 5.3). I normally have xdebug on, but disabled it quickly for this. Additionally I do not have any opcode caching taking place at all (this is my dev box). But yeah, weird. This is going to bother me a bit.
On my Dreamhost server ternary also runs faster, but only about 12%. I think there's a lot more to the issue than you guys have been considering here - so fiercely, I may add. This is definitely something we should study in detail.
Testing across one of my development servers yields- &gt;0.00265097618103 &gt;0.00141406059265 and testing from my macbook (pseudo-fresh install, no changes to php as I've been letting my roommate use it)- &gt;0.0014510154724121 &gt;0.00097990036010742 So clearly I have a magic iMac. **Edit:** Bah, I just was comparing the different installed extensions and it looks like I hadn't cleared out xdebug as I had thought. Apparently xdebug treats typecasting better than conditionals.
please elaborate on "can cause a lot of trouble" as I have never seen any.
It is almost 10 months now and I've been using Netbeans ever since the day I wrote the comment above. I would not go back to Komodo.
Browser back/forward buttons. Open in link in tab. Ajax stuff. May be browser dependent though.
Very interesting article. The biggest drawback, however, is you still need access to the inheritance chain, which takes away most of the reason for using Extension methods. Might not be a bad idea to write an [RFC](http://wiki.php.net/rfc) for extension methods in PHP, I just finished an RFC for a [C# style property get/set syntax](http://wiki.php.net/rfc/propertygetsetsyntax) in PHP myself.
Agreed. However, it is still useful if you're the author of a library and you want the core classes to be extensible by users without them having to modify the core class source files.
I'd avoid using the for($i=0, $c=count($arr) ; $i &lt; $c ; $i++) construct as it's not idiomatic and therefore will slow down code-reading.
But if you are the author of the library, you can just make sure to use the proper public/protected accessibility, and not use final on classes that should allow extension. There is no need for extension methods when you are designing the library.
I actually read that RFC a few months ago and thought it was a fantastic idea. Now that you've finished it I'm going to have to give it another go.
Inheritance isn't always an option or necessarily what people should use. Suppose you want to make some of your core classes immutable? How can you use inheritance to allow them to be extensible then? Suppose the functionality a user wants to add does not have an "is-a" relationship? In these situations, using extension methods would be a more suitable alternative.
Kind of boring. Shouldn't the last echo be inside of the while loop. Also, 
Thanks! I started it last year but was too busy until now to do anything with it. I just did some grammar fixes, added some clarifications and a couple code samples. I am preparing to start discussion on the subject and get the idea rolling. I have a major PHP dev behind me already, who has been helping me develop the RFC, so hopefully that will help to sway the other devs.
Lame. A whole article on passing a connection link into the mysql_query() function. Why not just copy/paste the PHP docs? 
You'd have to give a more specific use case than "what if you want some of your core classes to be immutable". I can't think of a single real world case where this would be needed, could you enlighten me? By the way, the example given is extremely inefficient. Every time toLower() is called, a new object is created. Yuck.
You do realize that in Java and C# have immutable strings that essentially do what my example does behind the scenes? Immutable objects are easier for a programmer to reason about, they are thread-safe and they are cache-able. For some further reading on the advantages/disadvantages immutable objects, here are some links: http://en.wikipedia.org/wiki/Immutable_object http://stackoverflow.com/questions/214714/mutable-vs-immutable-objects http://java.sun.com/docs/books/tutorial/essential/concurrency/immutable.html
i find the as3 getter/setter better: [override] public function get varname(): type { return $varname; } [override] public function set varname($value: type): void { $varname = $value; } so much easier!
Nifty Idea...I just don't get the point of injecting method into a class in this way--actually I imagine it'd be an absolute nightmare maintenance-wise. 
PHP is not Java or C# - at all.
That point doesn't pertain to our argument at all. You wanted a good example of when you would want to use immutable objects and I gave you an excellent one.
I worked for equity on a start-up. The CEO has a marketing background, but never started a business. I own 20% of the company. Things went well for the initial build; as well as they could go. The front-end guy was a moron and he ended up getting fired for his attitude. The 'CEO' was on top of things, he worked his ass off, I worked my ass off on top of my full-time job. Then the site launched. It's been 4 months. We've made $25 and he's done nothing. He's supposed to be out selling, but only sold for about 2 weeks, didn't get anything and gave up. Right now he's asking for more features and I've told him I don't want to unless he does more work. That led to a lot of excuses. I had big hopes for the company, now I'm tired and skeptical. I'll never work for equity again. Unless its my own business and I own at least 50% of it and the other person has a long history of success with start ups. If I wanted to look at the bright side, at least I know I can build and launch a site on my own and I have a helluva portfolio piece, but its still not enough. Fuck equity, take cash and build your own business.
I have only had bad experience working for equity. It simply means you are working for somebody who does not have a strong enough business model to have raised capital beforehand. 
Cannot eat equity or buy food with it. It may sound good and sometimes may be worth it, but it seems to me most of the time it is a gamble. I feel that if somebody is serious about building their business they can get it to the point where they have some capital or at least get a business loan to pay developers for their efforts. It shows that they are responsible and committed. Otherwise unless it is a project I am incredibly interested in I am staying clear of it. 
DES is [deprecated](http://en.wikipedia.org/wiki/Data_Encryption_Standard#Chronology). So much so, that it's almost impossible to find a functioning single-DES implementation in a modern distribution of any platform or language.
&gt; He's supposed to be out selling, but only sold for about 2 weeks, didn't get anything and gave up. This is the biggest thing. You can make a great product, but if you aren't out there telling people about it, no one will use it, thus making you no money.
I worked for a company for three years before they ended up getting bought by fox for 300 M. I wish I had worked for equity. Then again, they had already raised enough from 1st round VC to pay my salary so they were in a really strong place. I suppose that if you are being asked by them to work for equity, then that probably means that they can't get funding, and it's probably not a good idea. On the other hand, if it's your idea and you think that there is something awesome going on then it *might* work out.
Depends on the terms and who controls the shares. I've done it an have old paper to show for it. I'd do it again, but would never work for ONLY equity unless I had a majority stake in the venture. Better to go for a mix of salary/hourly AND equity in a 3:1, 4:1 ratio (min -- higher ratio if you don't trust the direction of the company) IF you aren't controlling the shares. If they get a funder who demands X% of equity, your shares automagically become worth less, and unless you have a say in it, basically ANYONE with enough cash can devalue your stake. 
If you're working for equity it means 1 of 2 things: 1. They **won't** pay you. 2. They **can't** pay you. If it's the 1st, you should get the hell out. If they won't pay you now, why would they pay you once they have everything they wanted? If it's the 2nd, you should get the hell out. If they can't pay you it means that they cannot convince anyone else of the viability of their business enough to invest, and the owners themselves have so little faith they're unwilling to invest in their own business. tl;dr: You can work for equity and reduced pay, but equity for no pay is **always** a bad sign.
I've done this a couple of times. Ultimately I came to the conclusion that if I am going to work for free, I will do it for myself. If you think for 10 minutes, I bet there are a few ideas of YOUR OWN that you could implement instead of implementing someone-else's idea. If it is yours, and you are as dedicated to producing it as you are in producing someone's paid work, it will work out and you will get some sort of income from it. Probably. Even if you don't make money on your first (or second, or third) project - at least you are investing your time on yourself.
I've worked for equity and reduced pay, which is a good tradeoff if you feel risky... However never work ONLY for equity. It means the person has no capital to run the business and he is essentially trying to find a way to make thousands of dollars by doing nothing but manipulating everyone in to working for him for free. The only time it's ok to work for complete equity is if it is a business idea that **you** have thought up and really want to take a stab at it.... don't work for someone else is if youre not being paid though. Also if it's a business where youre being paid but you know other people are working for equity, take it as a bad sign. I wouldn't refuse the project, but be prepared for them to disappear over night.
If you designed the idea and want to make it your life's work - if you're a founding partner, that is - then sure, work for equity and make it happen. If you are not a founding partner, then no, do not work for equity, unless you like working for free and getting absolutely nothing to show for it.
I'm working for **free** in a start up, anyone have a good/bad expierience doing this? FTFY
Unfortunately it's difficult to use any variant of blowfish as I was unable to easily convert the encrypted string into a UTF-8 compatible key to be used as a valid INPUT element name. There's a reason behind the madness of using DES. PHP and JavaScript both have functioning single-DES encryption implementations which is why I went this route. I had anticipated using a more secure method of two-way encryption but I found it was increasingly difficult to handle all scenarios of unicode chars. The main intention of encrypting the form fields was to obfuscate the field names from bots so they could not auto-populate fields with names like "name" and "email". I may have gone a little overboard here...
The only exception is if you are starting the business. For example, I work with a friend on a game. Obviously we both work for no pay at the moment but we're both working together to create something new. We both worked hard to come up ideas and believe in our vision. Basically, we work for ourselves on this. If someone is out there trying to sell you their idea and get you to work for free, it's probably a bad deal.
Well obviously if you are starting the business you are working for equity. All rules go out the window when you're someone who started the business. But then again, you aren't working for the start up, you're working for yourself in this scenario.
&gt; 2 assumes a classical approach to creating a business, business plan first than create the business when you get money. Many businesses seek initial investments on the idea to get them up and started and ready for a full round of investments. Usually these investments are personal funds and investments from friends and family. If you're bringing in someone before investments, personal or not, are being made, you're bringing in full partners, not employees working for equity. &gt; Would you have worked for the Google guys before they landed investment? Did the Google guys ask people to work for them before they were willing to pay out of their own pockets? Again, it's a case of either no one wants to invest in your business, or if the case is you want to wait to seek investment, you have so little faith you're unwilling to put up your own cash reserves in the interim. If you take that second path and you don't have the cash reserves, what are you doing trying to bootstrap a business with employees and no investments?
Best piece of advice ever given to me on this subject; get everything in writing - the ideas, agreements and responsibilities.
It sounds like you are, to put it delicately, the "[engineering bitch](http://www.metamorphblog.com/2010/02/startup-lessons-for-the-protofounder.html)." It's common for the "business" people to have an idea and think that's what they're bringing to the table. I've had guys approach me to offer 5-25% equity in their imaginary company if I'll just build the product for free. My response is, generally, "How about I build this and hire you when I'm done to sell it?" They'll protest "But this is my idea!" Who cares? Ideas are worth absolutely nothing. I have stacks of ideas that are gathering dust because I haven't had the time to do anything with them. Why should I suddenly stop everything and try to make you rich with my skills and then, inevitably, watch you try to screw me later if it works? Because you had an idea? Awesome - go to the library and check out PHP for Dummies and see if you can execute it. Sales that haven't occurred are also worth nothing. If you want me to work for you, you need to bring something to the table - a paycheck, capital in the bank, connections or contracts that have been signed on the line that is dotted. Otherwise you're just a loser in a suit looking for a handout. 
Thanks for the feedback, you've mostly said take the money which is what the accountant and lawyer both said. Essentially this company can't pay me. They hired me on contract to build the site from scratch for several months, and paid me for that time, but there is no capital left to pay anybody and they need the site finished basically. The share price I can buy shares at is USD 644 per share. I mean, this seems high, the share price is going to drop severely after a round of investment isn't it? In which case the only way I can get a return on my shares is if we sell to another company in 5 years time for millions of pounds. The lawyer said work in a compulsory buy back clause into the agreement so that I can always sell the shares at that price back to the company.
Well, not exactly but Mac=='a lot more like linux than windows is like linux or than it is like windows'.
yup and I will never, EVER do it again. 
&gt; The lawyer said work in a compulsory buy back clause into the agreement so that I can always sell the shares at that price back to the company. IANAL but as far as I know, if the business doesn't work out, they'll always have the option to bankrupt it, screwing you out of your money.
Run away.
Yes it is that simple. Just make sure you split your presentation layer into two bits, your side and theirs. Use 2 (or more) .css files, yours will hold 90% of styles they can't change + 10% they can change, set with nice defaults. Then make sure their styles can override those. We put all customer stuff into * /{$customer_name}/css * /{$customer_name}/images We also set up different databases for each customer, so when they connect to the system we take a look at the domain name and figure out which one to connect to. This means security and backups is easier, it is much harder for a customer to access anothers data. But this also causes all sorts of other problems which aren't fun. Doing reports across all customers is harder (MySQL has cross database JOINs which are fun). Database version control is harder, say you need to add a column to a table - ouch, now you need to do this over 200 databases. Another hard(ish) part is separating the admin area. They need some admin control while you need to control all the instances. But again this all falls into the nice MVC pattern.
Thanks for this, exactly the type of stuff I was looking for, I had intended to use a single DB, but I'll definitely put some thought into using one per customer, the database for the current site is only around 6 tables so it's not too complicated.
don't, either use multiple tables or just use the one set of tables. look into how wordpress does it they pretty much do what you are looking for. It will work out better than having loads of live databases in the long run. 
Does any one have a link to any articles on how Wordpress does this, i've searched but can't find anything?
I have done this (a CMS running thousands of different real estate web sites). First I agree with putting as much as possible into CSS. Take a look at csszengarden.com to see how much you can do just switching style sheets. Having two, one with nice defaults and cms orientated stuff, and a second with customer over-rides is good. Secondly you will want switchable templates, selectable as a field from the customer table. "Basic, Premium, Gold, Expired, etc". This will allow customers to pay to upgrade functionality. It also means if a decent paying customer wants a radical design you don't need to take them outside of your cms. Third, choose a template language that will easily allow you to add functions as template tags. One of the benefits of multi-hosting is that a customer will pay you to add functionality they really want, which you can then offer to other customers later. Fourth, think about caching for both speed in delivering the page and reducing the load on the server and database. If it's static content then this can be as simple as putting squid as a reverse proxy in front. Otherwise look at integrating in memcached. Fifth, DON'T use separate databases for each customer. It's unnecessary and a maintenance nightmare. Phillip.
I'm pretty sure its all open source http://codex.wordpress.org/Database_Description 
Sixth, DON'T use separate databases for each customer. It's unnecessary and a maintenance nightmare.
OK, I get the message, I WON'T. But this is exactly why I asked the question in the first place. It's good to get different views before setting out, I'd like to get this right first time, as changing once we have live sites will be tricky.
huh... Microsoft's writing PHP!
Well, it's not that hard. You'll have a database update as part of your deployment script, so iterating over many DBs isn't too hard. Our script allows us to target a release version in SVN to some customers. The script then grabs the code, the DB updates and does its thing on various servers. Many databases does allow you to have different versions all running together on one server. We have a few expert customers who run bleeding edge BETAs for us (at a discounted price), so we may have 10 beta DB, 2-3 developer ALPHA/testing and hundreds of normal databases all running together. It also allows customer access to the DB - but this is an unusual case for us. It also allows remote installs on their server, or on a server closer (lat, long) to them (we have a lot of customers at the end of flakey web connections). But again this is an unusual case that we deal with. Luckly I didn't design the DB architecture so I feel no pain when you poke fun at me ;) lol :P
If I were you I'd add a customer table and then have customer ID in all the other relevant tables. Easy peasy. Store the domain name in the customer table, PHP can use $_SERVER domain name to lookup the customer and do all the JOINs like normal. I recomend using Doctrine - it is well worth a day or two installing and reading the docs.
Nice - I wrote one myself, but this is much better!
You did not. Not in the context of what PHP is used for (creating web applications). I'm sure you can find many-a-reason in Java and C# as the application of such languages spans many industries. In PHP, objects are expensive. Immutable objects basically means "lots of fucking objects". This combined with the overhead of getting it done (see code in article), must force to think about the problem you're really solving. Like I said, PHP is not Java or C#. If you could have given me a practical example for using this you would have done so by now - but you can't. And neither can I - I cannot see what would possibly justify this overhead. I'm not into micro optimization, but seriously that's crazy. 
They've been marketing IIS (and WinCache) for PHPers for a while now. Sharing code that helps devs work with their product is a good way to do it and probably a good thing.
So you have two arguments here: 1) PHP objects are too expensive for immutable objects. This may have been true in PHP before version 5.3. As of version 5.3, PHP now has a garbage collector that deals with the circular reference problem that has plagued PHP for years: http://www.php.net/manual/en/features.gc.performance-considerations.php Thus, although PHP objects have an overhead (as objects do any language including your favourites Java and C#), one could argue the overhead is worth it for the clarity and convenience using objects provides. However, even if PHP objects were expensive, there are other ways to deal with, as you say "lots of fucking objects". As I mentioned earlier in this thread, immutable objects are cache-able. That means that one can use a static factory for object creation and cache all unique instances, returning only new instances when they are not in the cache. 2) A string class is not a practical example. I disagree with you on this. Given that objects in 5.3 are cheaper than they have ever been, and given that the PHP string API is a mess, an immutable string class would be a practical application of immutable objects. 
It does not seem odd to me that when MS chose to contribute to a PHP project they chose Joomla. I hold them in similar regard.
When you make an object immutable, circular references aren't created when you make operations on that object. It simply creates a new object with the new values and returns it. PHP is an interpreted language, making object creation expensive. Since the language is not OO at its core, this will be the case for the foreseeable future. You still haven't given a practical real world application of immutable objects in a web application written in PHP. Creating a class to handle string manipulation because you think "PHP string API is a mess" is a reason to switch to another language, not write expensive objects on top of an interpreted language. Come on man.
They also contribute (indirectly) to other PHP projects. Drupal is an example. I'm sure you have some snarky comment on that as well.
Um, I can't stand Joomla?
When you say object creation is expensive, what do you mean? More expensive compared to using equivalent API calls? If so, how much more expensive is it? Does it take longer, or does it take more memory? Right now you're speaking in generalities in terms of how expensive PHP objects are. I think we need to have actual numbers before we can argue how expensive they are. Moving to another language is not always an option. There may be constraints imposed by availability (PHP is on practically every web host) or job requirements (your job or client might require PHP be used). In the case where people who must use PHP but would prefer a comprehensible OO API for strings and collections, immutable objects would be useful. As I've said before, a practical example of using immutable objects would be for representing value types like strings. However another example would be in a threaded environment where you need to share objects between threads. If these shared objects were immutable, they could be used between the threads without any special synchronization code.
I wouldn't dismiss multiple databases straight away - I wrote a bigger reply that outlines pros/cons
I do something similar and do use a separate database per customer. Advantages: - Security, no chance of screwing up someone else's site with a rogue sql command (eg. delete without a where clause). - Ease of backups - you can backup or restore a single clients site separately. - Movability - you can move a single website to another server easily. - Scalability - when a site gets too big, again you can easily move it to it's own server Disadvantages - Yes altering tables needs to be done carefully. I have a simple script that loops through all sites on the server, and issues an sql command to them all. You also need to make sure your script to generate a new site database will work after you alter it. - The above problem is multiplied if you have multiple servers. I've only had 2 or 3 at once, so I'd just issue the same SQL command for each server. Tips - Prefix your database names eg. abc\_mcdonalds, abc\_starbucks, abc\_nike etc - You can select all databases with "show databases like 'abc\_%'" and loop through them easily. - I use a subdomain for each site eg. mcdonalds.mysystem.com - It's probably easiest to have a dedicated apache server for the system, then you can set any domains to point to that box, and your software can determine which site to serve. If you have virtual servers you'll need some way to specify which domains go to which virtual server. I used some fancy Apache proxy+url rewriting, but it's not very efficient. - I have url rewriting set so all PHP requests go through index.php, and that file decides what pages to serve.
It's a cute troll. For those who are tripped up by this line: if ((true == "foo") &amp;&amp; ("foo" == 0) &amp;&amp; (0 == false)) echo "yay!"; In PHP, any literal or variable which is set to a nonzero, non-null value will evaluate to true. That is, in the following test, $a = 'ass'; if ($a) echo 'Ay!'; The conditional evaluates true because $a is nonzero and non-null, and 'Ay!' will be echoed. Thusly, if ('ass') echo 'Ay!'; ..will also evaluate true. Likewise, if (true == "") echo 'Yes!'; ..will output nothing, as the empty string does not evaluate true. In PHP, any string cast to a numeric type will evaluate to zero. That is, echo 'foo' == 0 ? 'foo is zero' : 'foo is nonzero'; ..will echo "foo is zero."
I can agree with all of the article for all that is trollworthy. Except for the tidbit about security. The real lack of security comes from poor programming, not from problems in the language itself. Other languages just do a better job of providing built in security, wheras PHP requires you to do it yourself. Is this a better or worse thing? Depends on the person and the project.. (There's a similar argument for programming languages that do automatic garbage collection versus the ones where you do it manually)
if I ever have to reboot a linux server because of Joomla, I'm going to give up on life.
Symfony
&gt;However, since Encyclopedia Dramatica runs on PHP, we love it. 
Codeigniter
CakePHP
Zend
but... WHY?
Flourish
This will output foo because the values are equivalent if (true == "foo") echo "foo!"; This will not output anything because the values are not identical even though they are equivalent if (true === "foo") echo "foo!"; 
PHP is platform independant and no framework is optimized for windows, i guess.
Define "Works best"?
I guess some features of PHP don't work well with Windows. rand() is much weaker for instance, and some may not work at all.
There is a way to make the FS case sensitive in OS X? Thank god! Because it's quite ridiculous.
Why does ZF always get modded down? I've used most of the frameworks here in anger across various projects, ZF is still the one I prefer. Maybe it is seen as a more industrial or business framework. It certainly doesn't have the fanbois and the coolness that Kohana has. The ZF dev and help forums are quiet. No major bugs, no major regressions, no clammour for missing components. It just works.
PHPStorm is frigging awesome, and I say this as a die-hard vim user of 15 years. I've tried NetBeans (including 6.8 and 6.9), Komodo IDE, Eclipse with PDT, and none of them hold a candle to PHPStorm or just plain "IntelliJ Idea". If IDEA didn't have the current bug where PHP projects are treated as Java when you open them (it just throws up a warning, it doesn't actually seem to change anything) I'd say it's perfect.
Sure, Windows is a second rate platform for PHP, but I fail to see how it relates to choice of framework?
Some frameworks may not work well or at all on Windows. It's not really "works best" but "works" ;-)
Well, I don't really think the OS has any significance. If a framework works on Linux, I'm pretty sure it works just fine on Windows as well.
I can think of a few alternate titles for this. One that comes to mind is "Oh god, oh god we're all going to die."
Who cares? They're not forcing you to use it, and then it caters for those who do have a use for it.
It's not the end of the world, you don't have to use it, you can immediately spot a noobs code by copious use of the function. I can't see a problem.
What's this "being added" business? [5.3 was released almost a year ago](http://www.php.net/releases/#5.3.0), and the addition of goto was discussed on the internals list for quite a while before then.
Don't be an asshole, read the docs. &gt; This is not a full unrestricted goto. The target label must be within the same file and context, meaning that ***you cannot jump out of a function or method, nor can you jump into one***. There are very rare cases where goto may be useful and if you're not aware of them shut the fuck up and don't use it.
Goto was added as an alternative to 'break x', which can lead to unclear code. 
I'm quite interested in seeing an example (besides the loop thing on the manual page, which is really just a way to get out of spending 2 minutes to properly structure your code) of these specific cases you are referring to. (Don't mean this in an asshole way, just curious)
xhprof needed an effort like this, and it's nice to see it happening. 
Work on the PHP project itself, over at php.net. Start with documentation, write some examples, then eventually stumble into something else you like. A start: - http://wiki.php.net/doc/howto
[http://github.com/huberry/phuby](http://github.com/huberry/phuby) - rubyisms in php
http://www.phparch.com/2009/06/11/goto-in-php-5-3-is-it-really-that-evil/ &gt; The question then is, why is there a GOTO statement at all? The answer is actually quite simple: it makes writing some code easier. For example, finite-state machines, such as regular expression compilers and compile compilers (that is, compilers that are used to generate other compilers) make extensive use of GOTO statements in a variety of situations. &gt; You may, of course, wonder whether any sane person would implement a compiler in PHP—and you may be surprised. A number of organizations have specialized compilers that are used internally for various tasks; for example, at MTA we use a custom-built compiler to process and manipulate manuscripts written using our proprietary Ceres format. The compiler is written in PHP for portability and ease of installation and, although it was created by a compiler compiler also written in PHP without the help of GOTO statements, it took much more work than would have otherwise been possible had GOTO been available.
Can you describe your problem a bit more? Did you get an error, a blank screen, something else..?
[Here's a screenshot](http://i.imgur.com/ttv5W.jpg). Unfortunately, the actual problem is unknown to me. I just know that even after installing APC, and editing the php.ini file correctly, I still can't activate APC in that little drop down box in the screenshot above. Also, I read somewhere that APC won't work with 3.x, so I commented out Zend of my php.ini file and it still didn't work. I asked the hosting company for support (after they installed APC for me), and this is their response: &gt;Dear Customer, We're sorry for the trouble you've been having. Please keep in mind that, even though we attempt to help as much as possible, somethings fit outside our realm of support. This would be one of those things. However, I did do a Google search for "w3 total cache APC" and found some different sites that you may find useful. One of these is from Bluehost's forum. Bluehost is a sister company to Hostmonster and their servers are very similar. Here is the forum post related to the above mentioned Google search results: http://www.bluehostforum.com/showthread.php?t=18037 Following that link didn't really help me at all either. 
http://www.google.com/search?q=w3+total+cache+apc+grayed+out Try looking through the first few results, and maybe contacting the plugin's author directly.
Does phpinfo() show that you've enabled APC correctly? Is apc.enabled set to an appropriate value?
goto was evil when people used it instead of if. it is no longer 1968. jesus.
I should clarify that I'm a total noob when it comes to this. I don't know how to do anything you just said. But I'm capable, so if you tell me how I can let you know. I have shell access if that helps. 
http://php.net/manual/en/function.phpinfo.php
phpinfo() is a PHP function, and one that you should get familiar with as it reveals a lot of information about your system. To use, create a php file (let's call it phpinfo.php) and add it to your systems doc root (near where the wordpress files live). Now, load it via the browser, so like foo.com/phpinfo.php Three things it will tell you that should help are (a) the real and correct location of your php.ini, (b) which extensions are loaded, like hopefully APC, and (c) the ini values, such as the APC ones. 
Yes. You might have to edit php.ini to enable the extension and/or restart your web server and/or ask them to do it all. Every host is different, so it's difficult for an outsider (such as myself) to say.
How refreshing these feel (coming from a world where the likes of Drupal and WordPress is considered hot stuff).
Ok, if we're going to treat PHP like a real language and have this kind of stuff running within it, someone *really* needs to write a PHP server that doesn't tear down and recreate everything on every single request. node.php, maybe? As it is, this whole thing is just downright goofy. 
&gt; someone really needs to write a PHP server that doesn't tear down and recreate everything on every single request Are you implying that design patterns cannot be utilised in PHP without making it into a compiled language? Please correct me if I'm wrong, but it seems acceptable to have it both ways (keep PHP interpreted and utilise design patterns). Anyways, if you desire a compiled language for web development, try C# or Java. I think you'd feel more at home with them.
Not at all, compilation has nothing to do with it, and C#/Java are kinda funny examples to use, given that they're both compiled to opcodes, and those opcodes are then interpreted or compiled, as opposed to PHP, which gets compiled to opcodes which are then cached and interpreted. My problem with this is that there is a trend of building wonderful cathedral of PHP code using state of art design patterns, full with layers of abstractions, interfaces, and generally speaking overhead on top of what the code actually means to do. Now in most environments, that's not an issue, as the cathedral gets built once at startup, and the language is designed so that those abstraction layers have a low runtime cost. In PHP environments however, the cathedral gets built on every request. That means all those classes that are referenced, explicitely or implicitly, have to get auto-loaded and run. Then we run our one measly HTTP request. then we tear everything down, only to do it all again on the next request. My mention of "node.php" was a play on [node.js](http://nodejs.org/), a long-lived asynchronous IO server that runs javascript code. If there was a reasonable equivalent for PHP, all this pattern stuff would make vastly more sense. 
I think your point about the cathedral being torn down and rebuilt every time is very well made. It's such a shame that we often have to build little wooden shacks instead of beautiful cathedrals because the performance hit is too great to make it worthwhile. Still, with proper caching you can still make use of design patterns in PHP. I agree that it shouldn't be necessary.
 ( ($hook::$se_hooks-&gt;exists('example')) ? $se_hooks::call($hook, array( 'value1' =&gt; &amp;$value1, 'value2' =&gt; &amp;$value2 )) : NULL ); Social Engine has some cool features for end users, but programming it sucks. Documentation is practically non-existent, huge swaths of code are a giant mess. Because of the way they support multi-languages, reading a template is a nightmare. I'm just about done with a SocialEngine build out and I can't wait til its over. I only got it because the company hired two other devs who couldn't handle it.
Solr looks nice - really REALLY nice. The main problem for getting started is the lack of practical information on how to set up your data and its indexing rules. Sure, it all looks simple to do, but there are lots of *gotcha* that will bit you further down the line. My Particular problem is in how to handle hierarchical data, e.g. geographical regions. Is it better to get solr to handle the hierachies, or flatten out the hiearchies when indexing and the expanding the search terms instead? More articles like this one would be very helpful.
You'll have to get in contact with the theme author. My guess is that since it's a premium theme you can't redistribute it so we can't view the code to help.
I emailed him half a day ago and he still hasn't replied. It seems as if he's away from his keyboard, and I'll have to wait. Thanks anyway! 
Wordpress 2.9 replaces timthumb with post-thumbnail. You can still use timthumb, though. I'd imagine you are using two different templates for your home page and your regular page. I'd compare the two. It's most likely that the author didn't put the timthumb stuff in the page template, just the index and the post template.
chmodding things to 777 isn't a wise idea. If your were getting a file system error, php would probably throw a fatal error and would log the error to php_log and or your httpd's error log. 
Its really hard to debug without seeing the source files... But I agree with everyone else, check your error logs / compare the template files in question. Is it possible the template you bought was made for an older version of wp? 
The theme was made for the current version of wp but for some reason he has an extremely awkward method set up. I had to create a page with a "blog styled attribute" and set the reading to display that page as static on front page. I'm not much of a coder so after two hours of playing around with code I gave up.
I only chmodded the cache folder because I assumed that would get the timthumb script working and resize the images in posts but that didn't work either.
I work with wordpress / wordpress themes daily so I could have a look, I'm in a fixing stuff mood anyways.
Aye, if I knew how to use the latter I definitely would. I'll have a look around the coding and try to make sense of something while the author replies. Gosh, it's been five hours. Thanks for your reply, btw.
Check your inbox.
Hierarchical inferences are best left to other data formats driving your application. You don't have to 'flatten' them, per se; Solr supports multiple fields per field type, so long as you define it in your schema. Start from the top down, and put each term denoting a geographic area into your document as a field of the same name. Solr is only really doing textual IR with excellent memory management, so you'll have to do your geographical inferences outside of this particular format. That's okay: if someone is searching for a term in text, textual IR is probably your best bet.
Yeah, I got that far. I was hoping to not have to modify any of the core files, but it doesn't look like the SE codebase uses hooks very often for important things like profile's being edited. Glad to know I'm not going crazy from a developer's perspective.
I'm on a short timeline so I just started modifying core files. If/when upgrade time comes I'll worry about it then. But I've modified a lot, so I don't think I'll be recommending an upgrade any time soon. I fixed the security issue with logins myself, so I hope that the rest is secure. From my standpoint, it's bad enough when I use open source code that is a mess. But when it's decently expensive software, that really pisses me off. I know I'm anal about proper formatting, but it doesn't take much if any time to do, and saves you a ton of time in the future.
The current version of SocialEngine 3 is probably the last one anyway, before they switch to SE4. I still have my doubts on its (4) quality but the fact that they use Zend Framework must at least improve code quality somewhat. If you have to upgrade, wouldn't running a `diff` on all files be possible? You could backport the updates into your own 'build'. Shouldn't take too long. Is there anything better out there? The company I work for looked at Elgg (which sounds pretty good on paper) and I've looked at the not-yet-released-but-looks-nice Anahita Social Engine.
They were, it was a CSS error on my part. Thanks, and it should be fixed now.
Yeah, I can diff, but there will probably be a lot of changes with a new version. So it's not really automatable, will have to do a lot of cross checking on what the new methods return, stuff like that. It can be done, just isn't a task I'm particularly looking forward to. As far as alternatives, I'm not really sure. The last social network I used, I wrote myself. In this case the client already had SocialEngine set up and had some custom work done to it, so I go with it. I really can't dog all the code, there is a lot of socialengine that is well written. You can tell from the files the different coders that wrote them. I also hate Smarty, so that's a quick strike against any project that uses it, at least for me.
Safe mode is officially deprecated as of PHP 5.3.0 and will be completely removed in future releases. "Relying on this feature is highly discouraged." And it's been de facto deprecated since long before that. Why? &gt; As safe\_mode is a name that gives the wrong signals as making PHP safe, we all agreed that we should remove this function. It can never be made totally safe as _there will always be ways to circumvent safe\_mode through libraries_. This kind of functionality also better belongs in the web server or other security scheme. Also, what is safe_mod?
I did not see your code, but two questions: Why put the images into the database? Why base64? Mysql has a proper BLOB type for your needs.
Ah, thanks for the input. However the safe_mod feature is still around on older webservers, so the flaws still exist in the wild. Sorry for the misspelled "safe_mod" though.
adding: error_reporting(E_ALL); ini_set('display_errors', 1); might also help debug 
I don't actually know what the BLOB thing is. I am *just starting* to learn php and mysql (know bits of both to get my way around) I have used base64 in the past, so I just assumed it would be best. I know it works though, because I have the form loading some base64 images into the products table (the sql works) and have been able to read them with php. tl;dr: beginner with php. don't know how to use BLOB
That didn't show any additional messages, but thanks for the tip!
mysql_error(); is your friend. Also, dont put images into the DB - what is the point of that? Put them into the file system where they belong.
THANK YOU! it turns out the max\_allowed\_packet setting was only at 1mb. I changed that, and now it works!
Glad to have helped :)
bluepostit's first question was probably more relevant than the second one -- in most cases you should be using the file system for files and images and just saving the route or hash required to retrieve that file in the database as a text string. 
I realise in a production environment that would be a good idea, but this isn't too important. I just wanted an easy way to keep all the data in one spot. thanks though :)
An article for beginners to PHP about regular expression and some of its uses. 
That's the main point of Gentoo.
backslash solves the underscore italic problem
this is what i love about php, there are many many ways of doing the exact same thing. 
If your using mysqldump -A, I would recommend not doing this as this can cause major issues for mysql servers running a particular release of a percona patch that scans the innodb_content_buffer_pool which locks innodb, unfortunately using kill on the query will not kill it, a restart is required. Getting the available databases should be handled through the information_schema Very cool thou!
Still useless.
Coincidentally, that's what other people hate about it.
Can you have it backup to a s3 account? That would be awesome!
What kind of license is it published under? Am I allowed to modify the software and redistribute those modifications unrestricted, etc.?
I used to like and use Joomla for everything before 1.5. I don't care much for 1.5 but I do have to admit as a general purpose CMS designed for a large user base, it does an incredible job. It's even great for developers who want to make cash on the side with addons. I am a bit surprized to see Microsoft contributing to a PHP project, but kudos to them, even if they have an agenda behind it. I only stopped using Joomla in favor of my own CMS, which is ofcoarse, much better ;)
any plans for postgres?
&gt; Just for you, /r/php/, I will be giving 10 free copies for those interested. Email me at support (at) phpsitebackup.com, with reddit in the subject line, and I'll send you a copy. First come, first serve. ...
Some sites don't even *let* you run mysqldump. I wrote a [mysqldump clone](http://gpl.internetconnection.net/mysqldump.php.txt) in PHP to help a customer emancipate himself from Yahoo's farm. Btw: backslash-escape your underbars to prevent unexpected italics.
ah right on. Very cool script thou!
This will definitely need a cloud computing feature added. Possibly even a way to initiate an rsync to maintain directory and permissions structures for a quicker restore. 
Don't forget his other point. Files don't belong in a DB.
yeah, i know that. it's just a small project for school.
If you don't mind using the command line, my PHP app will do just that. http://github.com/leftnode/S3-Backup
The primary developers (Zend) are Israeli. Hence the Hebrew terminology.
ah cool, I did not know that.
While it's technically the 'Paamayim Nekudotayim', for all intents and purposes, I just call it the "scope resolution operator"
I call it the "double colon." The literal translation of "פעמיים נקודתיים" (or "paamayim nekudotayim") is "double colon." See here: http://translate.google.com/#iw|en|%D7%A4%D7%A2%D7%9E%D7%99%D7%99%D7%9D%20%D7%A0%D7%A7%D7%95%D7%93%D7%AA%D7%99%D7%99%D7%9D
heh, yeah I love getting the old "unexpected T\_PAAMAYIM\_NEKUDOTAYIM" error. at least it's an easily googleable error.
I call it the 4 hole parade operator.
When I got this error for the first time, I almost quit on PHP. "WTF is that?? This is bullshit, PHP! Come on!"
... what does _scope resolution_ mean ?
Easy! Just remember "Pam I am naked otay, I am" (and think Eddie Murphy's old SNL skit and Alfalfa when you say "otay"). It's not a perfect pronunciation, but *good enough*. 
Yeah, I read that page since it was linked in the comments. I just don't really understand what it means and was kinda hoping someone could put it into more easily understandable terms. At first I started looking it up from different sources, but got distracted.
I get the scope part. I just didn't see how that was an issue in the wikipedia examle. &gt; `$ php -r "define('foo', 'bar'); if (empty(foo)) echo 'empty';"` Thanks for trying to explain it. I'll read more about it and code up some examples. I'm pretty sure I ran into this once when I first started writing php and appreciated the hebrew name for its googleability. EDIT: I read the documentation for `empty` which looks for a variable not a constant. I still don't understand why it throws THAT error, but I'll figure it out. Thanks again.
I've previously found that *storing* both processed and raw versions of posts to be very useful, even if it does use a bit more space. Besides making editing and quoting posts far easier, you also get the ability to easily reprocess the original post in any way you need. For example, you could later use a third-party BBCode parser later without needing to unparse the world.
Why reinvent the wheel? http://www.php.net/manual/en/function.bbcode-parse.php
probably storing the processed version only and then converting it to bbcode if a user needs to edit is better. It uses less space and the page is going to be viewed by far more often then it is going to be edited. 
It's a binary extension from PECL, not built in. I really wish they'd make that more obvious...
The conversion back is not going to be reliable, especially if there's ever a switch to third party code that may not even have the ability to reverse it's own transformation, not to even mention the chaos of having it try to work on data it didn't transform to begin with. Also, not all parsers are created equally. Simple regexes are fast and simple and stupid. In the past I've written a stateful, validating, correcting BBCode parser. It could handle any variety of tag soup thrown at it and produce valid, well-formed XHTML output. It was also slow and kind of memory hungry, not something you'd want to run on every view. I never bothered writing a reverse routine for it. Trying to turn HTML back into BBCode ended up being rather painful once it wasn't just simple regexes.
Depends on the data volume you'll be waiting for. If possible, I would store both versions, the original (for edition purposes) and the parsed ones as cache. Let's say that tomorrow you decide to change something, like the URLs of the emoticons (let's say start using a CDN), it will be easy to just delete the caches and let them be regenerated with the new URLs for your emoticons (or re-process every cache, since you have the original).
This is the way to go. It's more reliable than trying to reconvert the parsed version. Also, it's great that the parser removes XSS attempts, but having some place where you can actually see an attempt was made is pretty handy.
I realise that ... plus it does say under the function name: bbcode_parse (PECL bbcode &gt;= 0.9.0) Installing a PECL extension still way preferable to reimplementing your own bb_code parser.
Oh yeah, I'm right there with you. I went through that whole mess awhile back before I started storing both the raw and formatted version. If space is a concern you can always compress stuff before saving it anyways. Another valuable lesson learned on my part, make sure you save the encoding type in it's own column for a little flexibility when switching between compression algorithms.
I made a post about the bbcode functions within PHP (well, not built in). I will release this project once done, so I don't want to reply on these functions since they are PECL extensions. Thanks for bringing these up though.
This is a good idea, didn't think of this. Much thanks.
No it's not since it won't be available everywhere. You can write a simple BBCode parser with little to no effort. In fact, I'm sure there are about 100 different variations on the preg_* manual pages.
http://github.com/jwage/odm It's further along than you think : )
WTF is with this attitude? So there are frameworks out there, what's your point? Should Apple and Ubuntu and all the Linux flavors just cease development because Microsoft already has an operating system? No. Having options is a good thing. The more, the merrier. Stop urging people to cede to the success of other projects.
Before you go any further, save yourself a future rewrite and just go with 5.3+ only. That's the way all of the major frameworks are going.
Storing the transformed code is basically a form of caching. Caching is a technique for performance optimisation. And optimisation should never be done until you have a real problem to solve. So the question you need to answer first is; Do you have an actual problem with the performance of the transformation?
I would personally store each post in its raw form in the database, and use a caching system such as APC (or maybe memcached if you're running from multiple machines) for the parsed form. If your bbcode parser is as lightweight as you suggest though, this may result in more cpu time used than just parsing posts on the fly. I'd suggest running some benchmarks - I can't imagine it being more than a few ms either way though.
Yeah, there's a 5.3 branch. Now that 5.3 comes default on Ubuntu installs, I think I'm going that way. If you notice on the website for the framework, http://joltcore.org - it's a custom compiled PHP5.3 version, so I'm definitely thinking of refactoring it a bit to be 5.3 only.
correct: upvoted
I am also writing a toolkit fir my company. We've been using ZF, but I found that it is a bit too bloated for our needs, and there's quite a bit of platform-agnostic code that slows things down. I've built a solid ORM layer (pretty much just like Propel, just slimmed down for our infrastructure), and I am looking at other means of persistence. I've been looking into Apache Cassandra, MongoDB, CouchDb, and other non-relational stores. Is there a good primer out there that covers use cases for these 'cloud' databases? Specifically when they should or shouldn't be used? 
leverage other frameworks. ZF is very modular so make sure you can hook into all that cool code. E.g. I use BBEdit codes in my site - make sure you can use their markup parser. Same with jQuery etc. Make it easy to move chunks of code around. Say I have an admin controller that I want to split into a module, then later I need to split this into two modules. Bad example maybe, but being able to split big controllers up and merge smaller ones would make early design desision mistakes easier to mend.
Try using this parser, it is very easy and doesn't rely on much in the framework: http://framework.zend.com/manual/en/zend.markup.parsers.html I use it a lot and it works fine.
Thanks for the input! One idea I had was to have widgets or blocks, which are essentially mini-controllers called from within a view. For example, if you were building a shopping cart and you wanted to have a mini cart in the sidebar, the mini-cart code could be a widget/block, easily embeddable in any view.
that sounds neat, how does this relate to view helpers? Like for forms and repeated items (e.g: view all items in a cart must have to loop over the items displaying each one using a widget/view helper)
Also store data in its raw form (or as close as possible within your DB) should sometime in the future you decide that you want to do something different with the data and you have already parsed it is going to make things more difficult for you. For example: yesterday you might have converted [b] to &lt;b&gt;, today you might want to convert it to &lt;strong&gt; and tomorrow you might be back converting it to &lt;b&gt; again. But if you are worried about performance then as has been mentioned already, store both. But never just store the processed data.
With something like that, displaying each cart item is a pretty specific application, so you'd just write the foreach ( $cart_item as $item): endforeach; statement to display each. However, you could wrap the entire cart up in a single object so it could be displayed anywhere, for example. As for common elements like forms, images, css, and other UI elements, different helpers will be available to quickly mock up a UI. Ideally, I'd also support the different markup languages like Haml, Markdown, etc. Hah, so many ideas, so little time! :)
Because **everyone and their mother has written a PHP framework**. He's already written one and doing it all over again. Every single PHP developer has written a PHP framework at some point in their career, no matter how small or big. Others have taken it to the next level and ultimately did nothing to help the PHP community.
Please don't. The PHP community would benefit more from you contributing to the existing large frameworks than dealing with an entirely new one.
You know, this all sounds great. I tend to think of use cases like that. But ultimately I honestly think that writing your own framework is not the best use of your time. I mean, maybe you just really enjoy that kind of stuff. Thinking in abstract components and coming up with reusable classes and all that, but if your goal is to be able to create web applications intuitively, with minimal amount of work, leveraging a stable, mature framework that provides proper abstraction, convenience methods, syntactic sugar and is fun and makes PHP bearable, then I think sticking with an existing thriving framework is the way to go. You end up having to maintain less code that already gets more exposure and you can take advantage of all kinds of features that other people have already thought of. I'm actually a big fan of ZF. WRT UI elements, the view helpers in ZF are pretty good, and it's easy to write filters for markdown and markdownify and what not and custom input elements to achieve that kind of quick, reusable functionality that you seem to seek. I would really recommend picking an existing framework and contributing. I've used PHP since 99 and ZF since 06 and it's come a long way.
I appreciate the comments. Yeah I've been a PHPer since 99 as well, I'll give ZF some more consideration. I do just like doing this though, if it helps one person, then it's a success, and it's a fun side project. I've learned a ton about TDD for example during the process.
It's definitely a learning experience. And there's a lot to take away from. I've put together my own frameworks (per project) in the past. I'm big on proper OOP and design patterns and what not. I've gone from "the programmer's syndrome (AKA not invented here)" to "the less I have to code, the less I have to support" I can sum up my experience as: It's tedious but fun, it's more complex than I thought, yet I like to dabble with it, but ultimately I feel like I don't have enough to show for in the end (in terms of productivity), and with an existing framework I can concentrate on the parts that I actually care about. And the nice part about ZF is that you don't have to use the entire framework. You can treat it as a loosely coupled component library. But it does shine when the various parts come together. Enjoy and happy coding!
Also, do you have an example of some well written apps in ZF? So far I've only viewed Magento, and well....
Try it. Just install the latest, use the command line to set up a reasonably complex blog/shop/warehouse reporting system/whatever hook in a decient ORM (i.e. Doctrine) make some pages that CRUD. Then see what we are all using. This is now your point of reference. Improve on what they have done :) I'm sure you could take their app/module/controller/bootstrap framework and improve on it. All of the rest (the model and view) would just hook into your framework like it does into theirs. Then we'd get a choice of the C in their (MVC) which would be nice :)
what I meant was something like this. In your View: foreach($cart_items as $i) { render_item_view($i) } render_item_view would be a mini MVC in it's own right. Somehow. lol. What you said made sense up until the 'display' part, I need a view to display it (HTML + CSS etc)
PAAMAYIM means twice, NEKUDOTAYIM means : literally, NEKUDOTAYIM broken down means "NEKUD" as in point and "TAYIM" as in twice
Wrap another framework around Doctrine that is more lightweight. Symfony is a great tool, but it is slow and sometimes overkill.
why doesn't php have threads? Thats annoyed me for a while. I usually just use perl when i need something threaded
Because noone has submitted an acceptable patch to introduce threading. If you have C skills, get your patching on.
Unfortunately I don't. There probably are few and far between to be honest, and that's true for all things PHP, IMO. [This book](http://www.survivethedeepend.com/) (online and free) might be a good start. The guy is a ZF contributor, too. I lurk on the mailing lists, keep an eye on the [component proposals](http://framework.zend.com/wiki/display/ZFPROP/Home) and report the occasional bug and so far I found things to be of very high quality, well tested and quite fun to work with. The conventions are fairly intuitive -- as good as it gets with PHP. They're also very careful about how they approach the PHP 5.3 / ZF 2.0 transition: http://framework.zend.com/wiki/display/ZFDEV2/Zend+Framework+2.0+Roadmap
The way it was explained to me was, "the Zend Engine core is thread-safe, but given the sheer # of extensions/libraries that can be included that *aren't* thread-safe, there's no point until everyone of them is made thread-safe as well". 
Which is something that a Java programmer would say. PHP will be getting threads, but not likely on the Zend interpreter.
Do we ever really resolve any of our scopes, or do we just keep changing scopes, hoping that the problem goes away on its own?
You should also consider explaining alternatives to forking, such as work queues like [Gearman](http://gearman.org/). (Forking can be impractical or have side effects, such as under Apache and mod_php)
&gt;Lets work hard to get another 1000. As long as we give them a warm welcome and keep the discussions courteous, that shouldn't really be a problem. 
This is true. By work hard I mean, posting articles, various areas of research you do or projects your working on. 
Since I've been using CodeIgniter a lot recently, I've taking a liking to its style: http://codeigniter.com/user_guide/general/styleguide.html
Maybe I've just been lucky and gotten it correct the first time every time? I don't know?
I have inspired mine a lot from my recent use of Symfony also.
How long has this subreddit been around?
I use 8 space tabs. I used to only use 2 space tabs, but I've grown to like 8. Of course you should always convert tabs to spaces using the settings in the IDE. While this isn't an official standard. I've always understood the /* */ type comments to be for writing in human comments, for instance you'd put it above the declartion of a function to explain what it does... Then You use the // style comment when you're taking out lines that you would otherwise delete but you want to keep them there for now. I don't really use the MVC concept in writing PHP, I do still try to keep my "view" separate from all of the business logic. I usually do this by making a [singleton](http://php.net/manual/en/language.oop5.patterns.php) class. I know Singleton's are technically evil, but I find that they work the best when writing PHP. If PHP had something like the expression language / jstl like java has, then I would be a stronger advocate of the MVC pattern in PHP. But without that it really defeats the purpose of having a separate view file.
 if ($v === true) { print "Yes"; } method ($param, $param2, $param3); $foo = array( 'foo' =&gt; 'bar', 'baz' =&gt; 'qux' ); ish. * Always {} - even if one-liners * Always &lt;?php * Never alternative coding (foreach ($foo as $bar):) * Space between function name and ( (i used to do method( $foo, $bar ), but have switched to method ($foo, $bar)) Edit: Readability, and additions * No line-length limit. I can fit 3.5 80-character windows on my laptop screen, seems like a waste to limit myself to that. Edit2: Yay, reddit is functioning again, now to try to remember what I was typing out for replies 12 hours ago..
If he thinks he can do better than what's already out there, then by all means, he should go for it and to hell with what everyone else thinks.
Documentation and lots of it, clearly written with good examples. If you can do better than CI, then that's a point in your favor, but that's a pretty tough row to hoe. Pretty much anyone can beat the Zend documentation (instructions on toothpick packets are better than the Zend documentation). I don't use Cake or Symfony so I can't really speak to their standards.
Of course. I just mentioned it because I haven't exactly received the best treatment myself during my stay here. Figured it'd be a good thing to keep in mind. 
Yeah, I'm pretty adamant about that as well. I also own a small software company, I'd like to give CI/ExpressionEngine/EllisLabs some competition by building commercial products on it.
[1TBS](http://en.wikipedia.org/wiki/Indent_style#Variant:_1TBS) always. no spaces inbetween function_names and ( or { rarely use camel case - I prefer underscore_separation /\*\* commenting out a line for testing. /\**/ /\* comment for information \*/ foreach($foo as $f){ ?&gt; &lt;p&gt;&lt;?php echo $f['your_mom'];?&gt;&lt;/p&gt; &lt;?php } $bar = array( 'you_are' =&gt; 'drunk', 'i_am' =&gt; array( 'also' =&gt; 'drunk', 'and' =&gt; 'high' ) ); short tags suck. Also I use tabs. Deal with it. MVC through Zend Framework usually.
It's not possible with PhpMyAdmin. You could create a link with MySQL string concatenation, but since any output will be htmlspecialchar escaped by PhpMyAdmin, it won't be a clickable link. Edit - It would be possible by hacking a PhpMyAdmin file, but it would be just as easy for you to set up your own custom script to do this.
you dont use alternate coding in views?
[Allman style](http://en.wikipedia.org/wiki/Indent_style#Allman_style_.28bsd_in_Emacs.29): class MyClass { private $var; public function __construct() { while (condition) { //do stuff } } } In addition to that, I: * use tabs for indentation. * [omit the closing tag for scripts](http://framework.zend.com/manual/en/coding-standard.php-file-formatting.html). * use the [alternative syntax](http://php.net/manual/en/control-structures.alternative-syntax.php) in my template files. No short tags. * use camel casing for names (a la Java). UpperCamelCase for class names and lowerCamelCase for methods and properties. * generally use block comments more than one-line comments as they are easier to spot. * use [PHPdoc](http://www.phpdoc.org/) comments. * have given up on vertical alignment. Different fonts always screw up the presentation. * separate parameter lists with a comma, followed by a space. If they are really long, I tend to break it up on multiple lines, like this: $var = array( "value one", "value two", ..., "value twenty" ); * break up ternary operators on multiple lines for readability: return (condition) ? true : false;
Here we go (with MySQL!): &lt;?php class GenClass { /* Crazy comments go like this! Whoa! MULTI-LINE! */ public function getShitFromDB($id=null) { //simple comments go like this! (string)$id = (isset($id) &amp;&amp; is_int($id) &amp;&amp; (int)$id &gt; 0) ? $id : 1; $query = 'SELECT some_id, some_name FROM `random_shit` WHERE some_parent='.$id.' ORDER BY some_id ASC LIMIT 1,50; $result = $this-&gt;dbLink-&gt;queryResult($query); } } ?&gt; Simple tabs for each new line, essentially. Fun formatting for queries to make them easier to read!
&gt; Always {} - even if one-liners May I ask why? It always drives me crazy when I see that in code. Why take three lines to one line worth of work? Otherwise this is dead on to how I do it. Since short-tags are often turned off in the default config (and at one time they were going to be depreciated but I guess that got reversed), I've always used the full &lt;?php syntax. Alternative format scares me because it looks like the kind of thing they'll stop supporting in future versions. Plus, Textmate doesn't know how to parse code blocks without curly braces.
Two years. It says so in the sidebar to the right. 
The front-end could need some improvement. I think you need to get it working even if JS is disabled. A sturdy foundation is important. Enhancements come afterwards. Once you've done that, make sure that the interface itself is as usable as possible. Make sure everything lines up nicely. Also, keep in mind that top-to-bottom forms are usually easier to scan than left-to-right forms. As for the back-end, I'd actually suggest a feature freeze for now. Revise your existing code and make sure that everything is in order. Just like with the front-end, a sturdy foundation is important. Is your code secure? Is it immune from SQL injections? Does it have protection against CSRF, XSS, brute-force logins etc? Once you have ensured yourself that everything is top-notch, that's the time to be thinking about new features. 
Ah. Nice to see that there are other people breaking up their SQL queries on multiple lines and indenting the fields. Have an upvote and an orangered, sir. PS. You might want to look into using prepared statements :)
eight friggin spaces? seriously? while i agree that two is a bit too less intendation, with eight your source files must be at least 50% space characters...
Yay Allman style!
Pretty much now I use: * curly brackets alone on one line * never use short tags * // comment style for methods, /asterisk asterisk/ style for class definitions * camelCase everything except for DB fields in models and the database itself, those are _ separated. * no line limit, but sensible...have to turn off soft wrap sometimes in textmate * ternary operations on a single line * 4 space / tab, I think textmate's default * my model classes are similar to dasFisch's sql example except with prepared statements (for nearly all, but some non-prepared SQL for highly dynamic queries) * model class extends an abstract model class which has a generic select / find() defined and some abstract methods that must be defined * controller extends an abstract controller class which has some abstract methods that must be defined * my controllers return an object to be used on the view * my controller call is at the top of the view, no smart url routing to an index that handles everything * nice looking urls done in 3 simple htaccess regex I wrote a blog post on the progression of my coding over the years w/ samples: http://www.elementalblend.com/v/post-detail/On-the-Origin-of-Species-err-Programming/4k/ -- pretty funny to look at my older stuff.
Yay, indeed :) I find the Allman style helps improve readability in the script, making it significantly easier to find the matching brace in a code block. Another benefit with Allman is that it makes things easier to debug, as you can easily comment out things without having to worry about accidently deleting braces and ruining encapsulation. For example, this is perfectly valid: //while(condition) { doStuff(); }
;)
http://garv.in/tops/texte/mimetutorial
I actually googled for it but couldn't find anything about what an ODM is... I know what ORM is but not this... Care to explain? 
when I create foreign keys that reference another table, the drop down menu will often list the id off of the other table along with the name. it happens automatically. phpmyadmin is for noobs thou
I'm very anal about comments. I add a comment after every class and function so that if the function gets very long, I can identify my position within the code from 2 different points. Also, = signs have to line up vertically. OCD ftw. &lt;?php /* ** A comment explaining this particular file ** 2010-05-04 */ class Reddit { private $id = null; private $widget = null; /* Constructor */ public function __construct($id=null) { $this-&gt;id = $id; $this-&gt;load(); } // function __construct /* Load a widget by our current id */ public function load() { // Make sure we have an id if ($this-&gt;id===null) { trigger_error('No id specified', E_USER_ERROR); } // if !id // Load widget $this-&gt;widget = WidgetFactory::get($this-&gt;id); } // function load } // class Reddit
I used to do vertical alignment but I came to the conclusion that it was ultimately futile as switching fonts would mess up the presentation... so I FUUU'd and gave up on it. It wasn't worth the effort and I found that the misalignment was more annoying to view than reading code plainly. Anyway, since you're anal about documenting the code, have you considered using [PHPDoc](http://www.phpdoc.org/)?
I used to do vertical alignment but I came to the conclusion that it was ultimately futile as switching fonts would mess up the presentation... so I FUUU'd and gave up on it. It wasn't worth the effort and I found that the misalignment was more annoying to view than reading code plainly. Anyway, since you're anal about documenting the code, have you considered using [PHPDoc](http://www.phpdoc.org/)?
I used to do vertical alignment but I came to the conclusion that it was ultimately futile as switching fonts would mess up the presentation... so I FUUU'd and gave up on it. It wasn't worth the effort and I found that the misalignment was more annoying to view than reading code plainly. Anyway, since you're anal about documenting the code, have you considered using [PHPDoc](http://www.phpdoc.org/)?
Dreamweaver?
When working in PHP I follow the [Zend coding style](http://framework.zend.com/manual/en/coding-standard.coding-style.html) (Summary / Cheat sheet .pdf at [raphaelstolt.blogspot.com ](http://raphaelstolt.blogspot.com/2008/02/zend-framework-coding-standards-on-one.html))
 &lt;?php namespace com\awesome\rainbows; class Amazing extends Helper implements Interface { public static $people; private static $_yes; protected $_name; private $_amazing; /** doing something amazing! **/ public function doAmazing ($amazing = true, $name = "John") { $this-&gt;_amazing = true; } public function doAmazingStuff () { $data = array( array( array( 'name'=&gt;'john' ), array( 'name'=&gt;'mike' ) ) ); # loop while we get stuff while ($this-&gt;doAmazing()) { echo "hello world\n"; sleep(5); } } } * curly brackets on new line only for class and (function|method) declarations * tabs only! * use &lt;?php for php code, short tags &lt;? for templates if required * space before parenthesis on method and function declaration, as well for while for if * space before curly brackets for non-(function|method) declaration * single line comments with #, with space after pound * /* .. */-style comments as doc comments * i've been trying to keep it under 120 chars, 80 really doesn't matter anymore, we're not using 800x600 terminales, and if we had to go to a box and plug a monitor in, we can change the resolution to something bigger * never close the php tag, html whitespace issues might occur, rather not close it, no harm done. * don't include html, seperate business logic and views 
There's a massive oil geyser out there and you go and start a flame war. Damn. --Whichever one suits you best. You'll get a different answer from everyone. All are right and none are wrong. Personally, I use Komodo because I like to. Nothing more, nothing less.
Just write a simple script. It sounds pretty easy.
One thing many coding standards adhere to is the 70 character limit. For me it's closer to 100, but it's fine to break that if needed. Furthermore: * phpdoc everywhere * 95% phpunit code coverage * no closing ?&gt; * 4 spaces, no tabs * rules are meant to be broken. All of these are guidelines =)
I like to write out arrays like this: $arrArray = array( '1' , '2' , '3' ); Also my sql like this. If I have long element values, sometimes it's easy for me to leave of commas at the end. This way, I can tell at a glance if a comma is missing.
For the comma problem, remember that in PHP, you can do this: array( '1', '2', '3', ) The extra comma at the end of the element list is explicitly permitted in PHP, and is simply ignored by the parser. I do use the technique you posted for functions with long argument lists though: mail( $to , $subject , $message , $additional_headers , $additional_parameters ) Also, I tend to use the vprintf family instead of the printf variants: vprintf( '%1$s: %3$s %2$s' , array( 1 =&gt; $a, 2 =&gt; $b, 3 =&gt; $c, ) ); With the above, I tend to always use the positional syntax for the place holders (1$, 2$, 3$, etc...), and index the array starting with one explicitly, which has no affect on the execution of the code what-so-ever, but makes it a little easier to map placeholders to array elements when scanning and maintaining code.
You seriously use proportional fonts for code? WTF?
No. I use Consolas, which is a non-proportional typeface. Anyway, you're misunderstanding me. My point was that you won't get the same presentation when viewing the code under various machines with various code editors and fonts. For this reason I find a plain code file free from any attempts at vertical alignment to be preferable. IMO, it should be the code editor's job to handle any fancy presentations like vertical alignment, not the developer's. 
Object Document Manager (because Mongo/Couch are *document*, not *relational* databases)
I know you can have a comma on the final element, but I like to 'front-load' them because then I can easily see if one's missing. $arrArray = array( 'someelement' , 'someverylongelementvalue', 'another element' 'thefinalelement of the array', ); versus: $arrArray = array( 'someelement' , 'someverylongelementvalue' 'another element' , 'thefinalelement of the array' ); In the second one, it jumps right out to me. I find it more visually elegant. It's annoying to move the first element and change the comma, but I prefer the visual symmetry of front-loading.
I know you can have a comma on the final element, but I like to 'front-load' them because then I can easily see if one's missing. $arrArray = array( 'someelement' , 'someverylongelementvalue', 'another element' 'thefinalelement of the array', ); versus: $arrArray = array( 'someelement' , 'someverylongelementvalue' 'another element' , 'thefinalelement of the array' ); In the second one, it jumps right out to me. I find it more visually elegant. It's annoying to move the first element and change the comma, but I prefer the visual symmetry of front-loading.
I personally have been using Notepad++ quite a bit lately, Komodo is good, but I think the most complete (although overkill for many) is Eclipse/Aptana with PDT.
Netbeans
Then you use tabs? Otherwise I don't see how you could possibly get broken alignments. PS: I agree about not bothering to align assignments. That assumes that there is a relationship from one assignment to the next, which is usually not the case. Assignment alignment just doesn't seem relevant to readability of the code to me.
Technically it takes 3 lines to do two lines of work, as the opening { is on the same line as the if-statement. The reason for it is that the {}-less statements will lead to annoying mistakes, sooner or later. Especially when you start nesting statements, then the overview of what's included in "one line" gets hairy, and what drives me crazy is code that's written differently in different places, hence always using {}.
Views are usually implemented with a superset of Smarty or similar, so it's more pseudocode than actual PHP. Smarty, of course, renders it to PHP with the alternative syntax, but I'm not writing it myself ;)
OH GOD THE OIL GEYSER SHUT DOWN REDDIT
Its generally useless for doing anything half complex... But I enjoy Dreamweaver simply because of its integrated FTP client. Its far and away better than anything else I've found. When I'm forced to do any hardcore scripting I have found NetBeans to be pretty excellent though.. I just wish it had the same site management as Dreamweaver
Hmpf, I wrote a reply, but reddit seems to deny it ever happened... So, the new condensed version reads something like: Technically, 3 lines for a 2 line block (see code example). Leaving out {} will get you into trouble, sooner or later. Not to mention when stacking if/else/foreach I at least find it difficult to see with a glance what parts are "one line" of code. And I hate code that does similar thing differently in separate places, hence the always using {}. It's an insurance against that kind of fuckups.
Notepad++ suits almost anything, but i would like that it could ftp the files directly to the server, like i think is Coda form mac
Thanks for the tip. This is the first I've heard of prepared statements; it seems really powerful. One question. DEALLOCATE keeps popping up: is it totally necessary to DEALLOCATE every PREPARE? It almost seems easier to make it a stored function...but I don't think stored functions return data sets...am I totally off-base? (Yes, I looked around the interwebs, but did not find a solid answer :\ )
/me hearts [phpeclipse](http://www.phpeclipse.com/)
/me hearts [phpeclipse](http://www.phpeclipse.com/)
Personally, I use Netbeans namely for the fact that it's cross-platform and it has great Mercurial support. The syntax highlighter and code completion are generic and work, but are nothing particularly special. A definite "nice to have but not a deal breaker since every IDE in existence has this feature."
I'vebeen using Zend 5.5 and then switched to phpEd when they've stopped supporting the 5.5 branch. Am happy with the choice :)
We use CakePHP at work and **netbeans** code completion is the best I have found, often times the code completion will pull the models' functions. I really dig the SVN integration, it is really nice to be able to go back through a project and look at exactly what changed in what files and reverting single lines that was really nice. 
The correct answer to your question is Emacs.
I've been using my Ubuntu Netbook to do most of my coding, and I can't decide between gEdit or Geany. 
I use Notepad++ too. I hate using IDEs, because they manage things for me. I prefer being in complete control. (For PHP, anyway. Compiled languages, I tend to use an IDE because of the built-in compiler support and debugger support.)
JESUS CHRIST WE'RE ALL GONN-
Ok, I'm going to the tool that complains about PHP IDEs: they all do pretty cool stuff but are largely overpriced and overengineered for my common project (even my ~35k line project at work). I use e-texteditor as it does little in the way of things I don't want it to, and I can mod it to hell in simple ways (syntax coloring styles are what I interfere with most). It's great looking, but it's also incredibly buggy. If it manages to be stable for you, it's worth the small $35 price tag it demands for a full version.
I have never been more productive than Notepad++ once I got to a really stable setup. I moved to Ubuntu on the work comp last year though, and ended up switch to NetBeans rather than set up Wine to run np++. I've been really disappointed with NetBeans. It crashes quite frequently, and I had to turn off all the code completion otherwise it would lock up every few statements or when I tried selecting blocks of text. Also, trying to drag a tab to re-order it will usually cause a stall. All this is on Karmic Koala on a IBM T400 Thinkpad with good specs. It also doesn't have word wrap. I mean come on, word wrap, really? Anyways, sorry for the complaining, but I miss Notepad++ and want to write a Linux port for it. 
Agreed. Netbeans wins this contest hands down. Great support for it, and handles large codebases extremely well. 
i'm not going to lie; php figures out your paths correctly between common linux distros and windows. you're (generally speaking) fine using forward slashes in file paths.
I started with zend studio and eventually moved on to zend studio for eclipse, I tried Komodo and for a while I was using intelliJ idea and then netbeans. for the last two years I have been using vim I found that everything that I used an ide for can be replicated with it and the things that it doesn't really do I don't miss that much.
I started with Dreamweaver (what was I thinking?!?!?) then moved to a mac and quickly realised that DW was a huge ugly bloated wart-covered p.o.s. and dropped it immediately for Coda. Which is nice for simple stuff, but it's hardly an IDE. It's mainly a pretty HTML notepad. I tried eclipse and all manner of variations of that huge ugly bloated quirky crashy p.o.s. and finally settled on a mix between netbeans (when I have an extra 10-15 minutes to spare to just start the damn thing) and Textmate.
Thanks for the vprintf hint. I never knew about that one. Coming from a C background, I shunned PHP's version of sprintf and variants (for no good reason other than I thought that anything C was "old"). I've recently come back to enjoy the clarity that be had by using these functions, as opposed to embedding {$variables} {$arrays[and]} {$worseyet-&gt;attributes} in strings. I really show RTFM once in a while!
Anything that you can use with a debugger. If you're not using one then you are wasting a lot of time and effort. Now watch me get modded down by all the "I don't need a debugger - 'echo' is my debugger"... ahem... experts ;) I use PhpEd. Hit the play button, step through the code. Mouse over a variable to see it's value. Alter it. See the call stack, run any old code in the immediate window. Add breakpoints, add conditional break points, etc. It also does code completion, so I can create a new Doctrine object, and as soon as I type -&gt; I get a list of the methods I can call and all the parameters it'll take. Also works on normal PHP functions so you'll never get bitten by the 'needle' / 'haystack' order again. It has support for * projects * SVN etc through the normal shell right click menu * syntax highlighting * IE and Firefox toolbars
Also you can do: $sql = &lt;&lt;&lt;EOT SELECT * FROM table WHERE moo={$poo} EOT; Even if you are using quotes, avoid this: $tmp = 'a' . $b .'cde'; and use this: $tmp = "a{$b}cde"; it makes more sense as this what the language was designed to do.
Or doctrine :)
&gt; Always {} - even if one-liners No. What's the point? No one ever gets confused with one liners. &gt; Always &lt;?php Use &lt;?= $hello ?&gt; to output in the VIEW (this is what zend framework recommends) &gt; No set restriction on line length Needs to be under 100 chars really. Think about how a book reads or a newspaper column. They are narrow for a reason. No need to buck the rules of English prose for no real reason :)
To prevent trouble on edits/due to sloppiness: if ($condition) foo(); bar(); // Oops, unconditionally executed. 
I normally use if/while with the bracket on the same line. What sometimes bites me on projects with Allman style is the habitual semi-colon: while ($condition); // OUCH { foo(); } That sure teached me to pay extra attention.
I don't get why this guys gets downvoted, he's right. Try several editors, you'll find things you like/dislike in each one of them. I started with Eclipse PDT then tried Aptana, Notepad++, Netbeans, Php Developer and eventually came back to Eclipse PDT.
I won't call it the best, but I've always gone back to Eclipse PDT (http://eclipse.org/pdt) after working with other IDEs. Reasons: - I have the impression its autocomplete is better than that of netbeans or vs.php. - It keeps a list of projects. This makes it easy to have multiple projects open or switch quickly between them. - CTRL+SHIFT+R (open file) and CTRL+SHIFT+M (open method) are indexed and very fast. Drawbacks / Annoyances: - It's a beast. This is mitigated by having a very powerful pc. - Plugin installation is a nightmare sometimes (eg SVN). - Project type silos. To get a PHP support on Hg project I have to edit the .project files. SVN + PHP does not have this issue. - No option for project specific formatting (tabs/spaces). - When a non-active file is updated from the outside (eg git pull), Eclipse complains that its information is out of date and needs to be refreshed. The shortcut doesn't work so you have to go mousing around. edit: formatting, adding SHIFT
Zend Studio for Eclipse
&gt; No. What's the point? No one ever gets confused with one liners. Oh really? If i had a nickel for every time I had to clean up a commit by someone who added a line of functional code to a nested set of statements only to make it not work at all like it did before, I'd have... a couple of nickels. Not that I kept count. It makes things overly obvious, and slightly impossible to *mistake-break*. I don't see what the hate is about. (see [1TBS](http://en.wikipedia.org/wiki/Indent_style\#Variant:_1TBS)) &gt; Use &lt;?= $hello ?&gt; to output in the VIEW (this is what zend framework recommends) Always &lt;?php. I thought that line was perfectly clear. I guess I should have written short\_open\_tags=0 instead. Now I did. Views are superclassed Smarty-instances or something anyway, and what they do with the template-code is not my concern. &gt; Needs to be under 100 chars really. Think about how a book reads or a newspaper column. They are narrow for a reason. No need to buck the rules of English prose for no real reason :) You start writing code like a newspaper column, then come back when your scroll-wheel wears out. 80 columns is a relic from the days of 80x25 terminals, we don't use those anymore. If you want to arbitrarily waste screen area because you think PHP is somehow related to english prose, go ahead, I don't have that problem.
I also use netbeans, I find it less bloated and easier to set-up and use than eclipse. Code completion and navigtion is great as is the debugger.
I agree, however over dependence on a debugger can lead to bad habits; coding for the debugger - rather than coding well to start with.
I agree completely. With, say, Java you have to use an IDE because every other function you call requires another import. But with PHP, they just get in the way.
I really like NuSphere PhpED. Has all the things I like. * Project work groups * Syntax highlighting (PHP, HTML, JavaScript, CSS) * Code completion (PHP, HTML, CSS) * Built in FTP (Ctrl + Shift + S -&gt; Save local copy and upload) * Regex find and replace in all files in a project (Not just open ones, although you can do that too) http://i.imgur.com/8ilZ6.png
Could a browser plugin do this? i.e. a plugin that recognises non-anchor URLs in he page and displays them as URLs.
* You should be developing on Linux. * You should be using Geany and vim. * The command line. That's about it, no setup, once you're comfortable with it, is faster or more efficient.
Yes, I use tabs. Anyway, if you were to do vertical alignment with spaces, you'd still get small variations in position if you were to view it with a proportional typeface. Something like that would bug the crap out of me. 
Are you going to start by explaining what threads are, both for people who are not sure and people who may be thinking of something slightly different to what you are thinking?
Another vote for Notepad++ here. 
Just some complimentary information for anyone who happens to run across this post: The first part is called a [heredoc](http://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc). As for the second, I guess the poster is trying to suggest that string parsing should be favoured to concatenation, performance-wise. Also, the last code snippet shows an example of [complex syntaxes](http://php.net/manual/en/language.types.string.php#language.types.string.parsing.complex). Since PHP will greedily match as many tokens as it can following the dollar sign, we have to use curly brackets to indicate where the variable name starts and ends. For example: $beer = "Heineken"; echo "I won't share my $beers with you"; // Won't work, since it greedily matches $beers rather than $beer. echo "I won't share my {$beer}s with you"; //Works. Prints "I won't share my Heinekens with you"
+1 for Eclipse PDT, though I do believe there is an option for whitespace formatting somewhere.
I concur. If I can get at some level of debugger, that is my most compelling reason to use an IDE. Otherwise, as thin as I can get. Notepad++ has great syntax highlighting and function completion support (even on the fly, load up a .INC file, and you can just change the language to get the syntax highlighting straight). Most IDEs feel a lot like you're driving a semi around for a jaunt down to the QuikStop. A lot of overkill. 
The only problem with it is extraneous features, like the autolinking of URLs that couldn't be disabled (thankfully, that was changed within a release or two).
If you care about *INSTANT code completion* when you hit ctrl+space but you have a *huge* project (ex: hundreds and hundreds of files and Zend Framework), then: * Eclipse-based IDE (ex: Zend Studio, etc): SUCKS FOR YOU! * Netbeans: still takes too much time... * **PHPStorm** : BINGO!!!!!!!!! Great indexing! (and they're still in beta)
&gt; Project type silos. To get a PHP support on Hg project I have to edit the .project files. SVN + PHP does not have this issue. Rightclick -&gt; *Configure* -&gt; *Add PHP support...* That's a fairly recent thing though, introduced in some PDT 2.2 prerelease I believe.
Zend Studio for completeness, but unless you're actually doing lots of proper debugging, use a text editor and do shit in your head. I use Sublime Text as it supports sexy Textmate themes.
Why would you pay for buggy software if you can get excellent open-source software for free?
Technically not an IDE, vim is what I use on a daily basis. It has code completion, documentation, debugging (well, I use php -r mapped to a :make command within the editor), and way more than you could ever ask for. It's minimalist, so it doesnt get in your way. It's fast as hell, and the number of plugins available for it are mind boggling. For plugins, I use snipMate (best thing on the face of the earth, think textmate-like snippets in vim), surround, paste (a custom plugin allowing me to paste to a private pastebin), matchit, and mru (shows the most recently used files). The freedom to split panes any way you want, combined with tabs and sessions makes jumping back into old projects a breeze too. 
NetBeans FTW!
If you're on Windows: I personally like [DzSoft's PHP Editor](http://www.dzsoft.com/php-editor.html). I know, not free (it's shareware), but it's comfortable and reminiscent of Delphi.
If you're on Windows: I personally like [DzSoft's PHP Editor](http://www.dzsoft.com/php-editor.html). I know, not free (it's shareware), but it's comfortable and reminiscent of Delphi.
You should try NetBeans (again). I recommend the 6.9 beta, as the PHP support is seeing a lot of development in recent releases. NetBeans is not the beast Eclipse is and mitigates most of the drawbacks you mention.
Actually, the standard is 80 character lines.
Eclipse with PDT and NetBeans both provide debugger support for PHP. After more than a year of using both intermittently, I haven't settled upon a favorite yet... A big thing I like about these editors, is that they're cross-platform. No matter what type of machine I end up working on, I can have my favorite dev environment set up in no time... When I'm just doing a quick edit to one file, whatever text editor I have on hand is fine. But when I'm working on a "project", I want the productivity features that the better IDEs bring to the table. NetBeans and Eclipse PDT both smart enough to "learn" your own code as you write it and start giving code hints and such. Even if you work in a framework, there are ways to configure them to know the code base of the framework so that you can get code hints from framework methods as well. Finally, the plugins that give built-in support for source control within the IDE are very nice to have as well.
I wanted to give this a try, but I had trouble. All I wanted to do was connect to my webapp's ftp directories, and it doesn't seem to have anything that simple. It wants to start a project with its special project file and when I make a "remote project" with my ftp information, it wont complete because it says it can't find a project file on my webhost.
Personally, I prefer the [One True Brace Style](http://en.wikipedia.org/wiki/Indent_style#Variant:_1TBS) with indentation by 4 spaces and lines of 80 characters. All files use Unix line endings and utf-8 encoding. And basically I'm sticking to the [Zend Framework coding style](http://framework.zend.com/manual/en/coding-standard.coding-style.html).
Zend Framework does a lot of things right. What I'm missing is: * always use autoloader, get rid of the require_once statements * [Doctrine](http://www.doctrine-project.org/) integration (I know this is coming in 2.0) * [PHPTAL](http://phptal.org/) for views * [PHPIDS](http://php-ids.org/) integration
yes
I use editplus http://www.editplus.com/ but its not an IDE
I use codeigniters style guide, even when Im not using the framework http://codeigniter.com/user_guide/general/styleguide.html
Quite simply - none. Start using Linux, work in the terminal, learn it, love it. Pick an editor, emacs/vim/whatever, they will have a bit of a learning curve, but it's worth it. Relying on an IDE to do the work for you just means when you don't have that IDE available (on the road, borrowing a computer, etc) you'll be handicapped.
Komodo for me right now.
FTP is so 1996 it's not funny. Pretty soon you'll get excited about CVS.
Debuggers are great, though rarely my first line of bug-defense. I'll usually var_dump() whatever seems to be incorrect, then if that fails to find the problem or I don't know the source of the problem I'll go to the debugger. Netbeans has browser plugins to debug both PHP and Javascript from the IDE, which is awesome.
Nice to see another E user, it's been a little buggy on some releases but it's really not that bad, very rare crashes for me, current version is stable.
There's some promising open source textmate clones but nothing that compares to E currently.
Can you expand on the FTP support? I'm using Aptana right now, mostly because it has a great remote explorer that negates the need for copying down project files to my local machine. I can have multiple servers configured, browse the files and folders in the sidebar, and saving the file saves it directly to the server. Anything similar in PhpED?
PHPStorm bugged the hell out of me, though I can't remember why. I used it for less than an hour. Komodo is great. The free Komodo Edit does just about everything, but the paid Komodo IDE adds debugging.
Does phpEd have a remote file browser similar to Zend's remote explorer? I do not want to download local copies of all the projects I work on, but so far the only decent IDE I've found that has true S/FTP file browsing is Eclipse/Aptana, but of course code completion only works in 'project mode'.
Sweet, I'll look into this!
I've done something very similar using drupal multi-site. It's basically designed for doing this, and using database splitting you can accomplish some very advanced setups quite easily. http://drupal.org/node/43816 
Try Geany - it's good as a fast, straight forward text editor for people who don't do vi
No, it's a great idea, especially if you have multiple developers. You can then have a central dev site for testing - using a hook to refresh the dev site when ever a change is made. It also allows for branching - which is invaluable in larger environments. &gt;I don't want to commit and update every time I make a change. That is exactly what you should do, that way every change is isolated. Ideally every change should be connected to a task in an issue tracker. It is ok for multiple commits in a task, but they should not span tasks. As an added bonus, if your repository is remote, you are backing up very frequently.
My reason is mostly due to consistency and to avoid the annoyance of adding the brackets if/when a second line inside the conditional is necessary.
When I say "every change," I literally mean every time I save a file. It's also worth mentioning that my current employer has given me zero budget for a development server, so SVN is painfully slow. If I had a reasonably powerful server handling the commits, I probably wouldn't resist this process so strongly.
I'm currently developing using Geany and was disappointed to see that there are no macros available :( Maybe I just haven't found them. Otherwise it's a great Linux program, very similar to Notepad++.
Yes! That's the main feature I'm looking for in a php ide. FTP, SFTP are all supported.
Yes! That's the main feature I'm looking for in a php ide. FTP, SFTP are all supported.
Yup! This is how I have mine set up. 
vs.php/visual studio is pretty good.
Why pay for an expensive Editor when you can ahem, borrow it, ahem, from online?
Yeah you can open files directly from a configured FTP address and save them. You can associate a project with an FTP and sync with it.
I used Zend for 2 years, and I used Netbeans for a few years and really liked them both, but then I started using Emacs for todo/project management (org-mode kicks ass). After learning the Emacs commands I started coding in it and haven't looked back. I did measurements and my productivity went up 13%. I don't know why - maybe because of focus? It has also made me a better coder. My bug rate fell significantly and the quality of my code went up. Without the crutch of an IDE, I find that I also have a much better grasp on the structure of a project as I don't rely as much on code browsers and intelligent autocomplete. I have heard similar stories from VIMer's - VIM is great though it is a little harder to customize than Emacs.
No, not every time you save a file. always debug locally before committing. For many smaller projects I use a basic [webfaction](http://www.webfaction.com/services/hosting) account. Subversion and Trac both have built in installs and it is pretty cheap.
No, not every time you save a file. always debug locally before committing. For many smaller projects I use a basic [webfaction](http://www.webfaction.com/services/hosting) account. Subversion and Trac both have built in installs and it is pretty cheap.
Local web server, then commit once the code is ready for other developers or for deployment? That's a much better solution. Currently we're using SFTP to open/save files directly on the dev server, then manage SVN through SSH. We also use post-commit hooks so the non-developers (designers, mostly) can make image and other small changes through SVN but don't have to bother with learning the command-line.
Did you try gVim? It's very nice too!
you then might as well _borrow_ better software...
Surprisingly, if you look at almost all the PHP editors/IDE discussions, people prefer vim to emacs.
I'll take another look... I remember looking at phpEd before I settled on Aptana several months ago, but probably ignored it since I was strictly looking for something open-source. Of course, now that open-source (and/or free) has failed me, I'm open to other options!
&gt;I don't get why this guys gets downvoted, he's right. Because OP's question is an invitation to share your experiences and we are a lot who would like to hear what others think and perhaps to pick up something that's better than what we've got right now.
I have used Vim, Textpad, Netbeans, Zend Studio, and about every other one. So far Zend Studio is the only one that does absolutely everything I need the way I want it done in my large projects. However, each has served me well at some time. And I would recommend not getting to attached to any one of them, as they all have things that they do a little better.
For the time being, Netbeans, I usually pick up the latest nightly build here http://bits.netbeans.org/netbeans/trunk/nightly/latest/ 
Honestly? I see a lot of people saying "Netbeans" and other things. 90% of all php I've ever written has been done in vi. The other 10% has been in gedit.
&gt;May I ask why? If you ever need to add another line, it prevents the possibility of forgetting to add the braces.
You do have a point you can only use it to work on files in a project. However if you're not working on files in a project, then netbeans is probably overkill.. Maybe you oughta just use filezilla with notepad++... What most people do is create a project with 2 "run" configurations in their netbeans projects. One of them deploys to your local server for when your working on it. Then when your done and ready you can run the other "run" configuration which deploys it to the live server. Plus, it's generally bad taste to modify the production code without testing it first.
I'm doing almost exactly like you braces on separate lines, two spaces etc., except that I always use // if it's comments inside functions or other pieces that are not fully developed because it will let me comment out large chunks with slash-star
REAL programmers use butterflies. They open their hands and let the delicate wings flap once. The disturbance ripples outward, changing the flow of the eddy currents in the upper atmosphere. These cause momentary pockets of higher-pressure air to form, which act as lenses that deflect incoming cosmic rays, focusing them to strike the drive platter and flip the desired bit.
If you don't use alternative coding in views I along with the rest of the PHP community would be disgusted by the braces in views.
Apparently my last comment disappeared into the /dev/null that is roaming reddit today. So here it is again: I use Netbeans and I regularly get the latest nightly from here http://bits.netbeans.org/netbeans/trunk/nightly/latest/
I'm trying for the third time - my comment disappeared again Get latest netbeans nightly from here http://bits.netbeans.org/netbeans/trunk/nightly/latest/ 
I regularly pick up the latest nightly netbeans from here http://bits.netbeans.org/netbeans/trunk/nightly/latest/ (if this comment seem to be reposted several times it's because the previous versions all disappeared - probably due the problems reddit seems to be having)
&gt;Why would you pay for buggy software if you can get excellent open-source software for free? He's probably a mac user
That's cheating, and it's hurting open source
What are E's features that you miss in other editors?
A vote for [Komodo Edit](http://www.activestate.com/komodo_edit/). The code completion is as good as commercial IDE's, it's extremely customizable, and there are some great [plugins](http://community.activestate.com/addons) available (I can't live without the Source Tree extension).
I use VS.PHP, it's an addon to Visual Studio, but you don't need Visual Studio to use it... it's great. Code completion, remove server projects through FTP/SFTP/SSH, integrated Zend and CodeIgniter support (though I use Cake), but it's a great IDE. I've been using it for years, haven't been able to get used to using Netbeans or Zend. It just has a different 'feel' to it
I like Netbeans for some of the basic IDE features it has like finding all my TODO tasks, going to the definition of a variable or function, and showing me what code is not being used at all.
I would have said Aptana, but then they went ahead and screwed their own product.
I'm a big fan of Zend Studio 7... ZS6 was a horrible abomination but 7 is much more stable. The debugging support and using Eclipse plugins like Mylyn make PHP development a dream. 
Nope. As in, views are superclassed instances of Smarty currently, so I don't write PHP at all in them. Smarty does render it to PHP in the alternative syntax, but it's nothing I do myself.
&gt; No. What's the point? No one ever gets confused with one liners. If I a nickel for every time I had to clean up commits by someone who messed up a nested if-statement because they blindly inserted a line where it should logically go, I'd have.. a few nickels.. It's one "extra line" (from your point of view, it's the right amount of lines for me) and it removes that kind of "oops"-moments. [See 1TBS](http://en.wikipedia.org/wiki/Indent_style\#Variant:_1TBS) &gt; Use &lt;?= $hello ?&gt; to output in the VIEW (this is what zend framework recommends) allow\_short\_tags=0, nope :p See reply to hiii about views. &gt; Needs to be under 100 chars really. Think about how a book reads or a newspaper column. They are narrow for a reason. No need to buck the rules of English prose for no real reason :) No they don't. These days we have these fancy widescreen-monitors, giving us more horizontal space with the trade of less vertical space. Writing your code to specifically not make use of horizontal space is fairly backwards. And if you want to write your code in the format of a newspaper column, go right ahead - and then come back when your scroll wheel/pgup/pgdn wears out. And PHP isn't english prose, and should**n't** be written like it. Code is code. Edit: Yeah, forgot an important negation :p
&gt; May I ask why? Pretty much what aardvark92 said. With the addition that it makes the code beautiful, since you have one standard. Not different bracing-cases in different situations. It's always braced. Opening braces always impose an increase in tabulation. Closing braces always impose a decrease in tabulation. There is no indent-change without braces, except for the cases of multi-line arrays (but they of course also return the indentation to baseline when the ending parenthesis is put in place). Mixing bracing and indentation styles depending on what part of a file is currently open makes the code uglier, IMO. &gt; Why take three lines to one line worth of work? Well, it's 3 lines instead of 2. if ($foo == $bar) { echo "Yay!"; } vs if ($foo == $bar) echo "Yay"; Unless you do if ($foo == $bar) echo "Yay";, but then I'd have to catch, flog and quarter you :p
I've been using [textpad](http://www.textpad.com/) for years. I have a few nice macros and some other [textpad tips](http://www.puremango.co.uk/2010/02/textpad-php-manual-lookup-tool/). I still wish for code completion. Might try moving over to netbeans. I like that I can use textpad as my default text editor for anything; todo lists, javascript, html, php, etc. It starts really quickly too.
You use CVS? That must be rough :(
A thousand times this.
Such is the internet. :)
What did they do?
The internet is rarely [this](http://www.reddit.com/r/PHP/comments/bu8nl/writing_a_custom_sessionhandler_class/c0omkba) bad. I've been a member for about 5 months now, and I've definitely had a few heated discussions, but nowhere in the other subreddits have I had someone pop in out of the blue and tell me to fuck off. 
&gt; but then I'd have to catch, flog and quarter you :p Again, why?
 if ($foo == $bar) echo "Yay!"; is in my opinion a horrible horrible *horrible* coding practice. If you enjoy it, all glory to you, but if any of the people I work with attempt to sneak something like that in, I'll make damn sure they never do it again. It, in my opinion, breaks the structure of the code, making it harder to insta-grok. Program flow-statements should be clearly separated from program "non-flow" statements. They're both equally easy to read when you actually *read* them, but at a quick glance (pagedn, grok, pagedn, grok, pagedn, grok) that coding practice forces you to stop eyeing over things quickly and actually break the line up in its component parts to understand what is going on. Especially when you introduce more complex if-statements, then you have to actually *read* the line in question to know where the if-statement ends and the code begins. It's just not a good practice. Edit: And it's not a good practice because code is *read* a lot more than it is *written*, and obstructing the reading is bad. If it costs you 3 more keypresses ( {enter} ) to write, but doesn't require people to stop dead in their tracks to figure out where flow-code ends and "real code" begins, it's a net plus.
smarty....gross
This is a bit dirty but you can have images automatically resize themselves to their parent container by setting the width of the image to 100% in css. As a temporary fix, of course.
\*shrug\* It works fine for me. Only annoying thing is that it as a knack for translating static texts into &lt;?php echo "STATIC TEXT"; ?&gt;, which seems a bit odd to me, but with our good friends opcode cache and output cache, I don't really care that much. Edit: Although that might have changed. Been quite a while since I had to dig down in the rendered templates to locate oddities.
Awesome. Thanks for this. Will need it for a project.
Very spiffy. Somebody should merge this with [this](http://ukijs.org/mail/index.html) to create the world's greatest webmail app.
This is a good question! I paid for E-texteditor and Skybound's Stylizer because, despite their bugs, they're the best at what they do on the platform I prefer. E lets me modify every portion of it in relatively simple ways (syntax highlighting for example is json, and snippets are very extremely simple) and is somewhat compatible with a large library of bundles from TextMate from the mac. Stylizer has a few really annoying bugs, but is BY FAR the best CSS tool I've ever used, and I have no plans on giving it up due to bugs. I've tried many free things and the trials of many pay-for things but I still keep coming back to these two tools. If E and Stylizer had not existed, I would likely be doing things in Notepad2, since Notepad++ is a little on the side of fugly (this actually matters to me for reasons I do not know)
Do you really like PHPTAL? Or is there just no better XML-based template engine for PHP? I used to be forced by an employer to use PHPTAL and I have to say that I really didn't enjoy the experience at all.
Which version are you using? I get 711.98 on OSX: PHP 5.3.1 (cli) (built: Feb 11 2010 02:32:22)
I get 711.98 PHP 5.3.1 (cli) (built: Nov 20 2009 17:26:32) Copyright (c) 1997-2009 The PHP Group Zend Engine v2.3.0, Copyright (c) 1998-2009 Zend Technologies
PHP Version 5.2.6 I'll have to look at upgrading I suppose. yay for all the things it will no doubt break.
I get 711.98 on PHP 5.3.0 on Win7
If you happen to be running on Windows 2000 and rely on sockets (e.g. fsockopen()), don't upgrade to 5.3, it doesn't work and they've decided not to support W2K.
PHP 5.3.2/Linux here. Getting the same results as you. According to the [comments](http://php.net/number_format#83143) it's an issue regarding floating point calculations, which apparently got [patched last year](http://php.net/ChangeLog-5.php) (in PHP 5.3.0). 
There is a response to a similar previous bug post: http://bugs.php.net/bug.php?id=41808 It may not be a problem with PHP version you are using, but some floating point precision issue independent of the version. Maybe you can get some more insight here: http://php.net/manual/en/language.types.float.php
I make my most valiant attempt to write code with a few bugs and/or security issues as possible.
Floating point precision problem. Behold: &lt;?php echo number_format((237.325 * 3), 20); ?&gt; 711.97499999999990905053 on my machine, so it rounds down.
Thankyou :-) I thought I was going insane...
In that case, don't check [this](http://www.reddit.com/r/programming/comments/8tqpj/phpwtf_an_annoyance_will_be_posted_each_day/c0aeg66).
Gah!
I guess I'll try to get the ball rolling. **Management** * *Object-Oriented Programming* * *Model-View-Controller* * *Template engine* - Similar to [Savant](http://phpsavant.com/). * *Database wrapper* - Set of classes providing a uniform API to various databases, using whatever drivers which happens to be available. * *PHPDoc* **Performance** * *Lazy-loading of resources* * *Lazy-initialization of resources* - Only use the stuff when I actually need it. * *Caching of pages, images and other generated content* -Writing them to static files wherever and whenever it makes sense to do so. * *Cleaning up resources in destructor* - Figured it would be a good idea to clean up after myself rather than relying on the garbage collection. **Error management** * *Exception sub-classing* - Along with every class, I create a general exception class with it (named *ClassNameException*). I later subclass that general exception class to whatever specific cases I run into. That way I can cover both general exception handling and specific ones. * *Exception chaining* - Don't want to hide the original exception when debugging the code using the stack trace. * *Exception logging* - I store all the uncaught exceptions to a file. **Security** * *Input validation class* - Works similarly to the [PHP input filters](http://php.net/filter). * *Prepared statements* - Whenever I deal with external data. Immune to SQL injections. * *Login limit* - Protection against brute-force attacks. * *Hidden form field with generated token* - Protection against CSRF. ...
I use smultron on a mac for my php and agree completely, I fell like I know whats going on in every aspect of my code and think it helps make me a better programmer. I compare using an IDE for php with dreamweaver for HTML/css (although you can use it for php too).
Gee, shaunc, that's awfully specific of ya :) It would be good if you could expand a bit on that. Like [this](http://www.reddit.com/r/PHP/comments/c0u3b/dear_rphp_whats_your_coding_practices/c0pivhg).
Windows: notepad++ mac: smultron However, neither of those are ful IDEs in the same sense as netbeans. I prefer to avoid a full IDE and opt mostly for syntax highlighting. Why? I think it's made me a better programmer in the sense that you don't have to rely on autocomplete but actually have to know your code and php.
Ask a generic question, get a generic answer. :P
So, if I wanted to find out what you had for breakfast this morning, I'd have to poll you for each ingredient I could possibly come up with until I hit the right ones? ... Makes sense. 
Here's a function from a sitemap program I wrote recently. `function generateMap(){` create_site_map("."); // Complete first part of sitemap $con2 = mysql_connect(SERVER, USER, PASS); if (!$con2){ // return an error if couldn't connect die('Could not connect: ' . mysql_error()); } // Now add all of the teacher's names into the database and link them to the dynmaic staff page generator // Connect to database mysql_select_db("nslogan_lsnhs_staff", $con2); // Select name, id from table $sql = mysql_query("SELECT name, id FROM staff", $con2); // Loop through all returned staff, loading them into an array while($row = mysql_fetch_array($sql)){ $names[$row['id']] = $row['name']; } $con = mysql_connect(SERVER, USER, PASS); if (!$con){ // return an error if couldn't connect die('Could not connect: ' . mysql_error()); } mysql_select_db("nslogan_lsnsearch", $con); foreach($names as $id =&gt; $name){ $pageLink = SITE_ROOT . "staff/staffPages/spg.php?id=$id"; $query = mysql_query("INSERT INTO title_search (Page_Title, Page_Link) VALUES ('$name', '$pageLink')", $con); } `}` Obviously there are some ambiguous things going on here that are declared elsewhere in my php. For SQL I usually define the server, username, password and sometimes table names at the top of my program or in a separate doc if I'm going to be using them a lot (like for a login system that involves multiple php files). I use both forms of comments, // and /**/, it just depends on the situation. Loops, ifs, fors, etc. I have the { on the same line and the } on a separate line (although I still haven't decided if I like that or not). I space after commas but for ( or ). I still haven't decided on a set format for all of my code and am constantly changing it depending on other code I read and like the formatting of (so this is a great post). *edit* formatting
I had no idea you could use {} in the middle of strings for variables. That's awesome *mental note*. I'm relatively new to PHP (since November 09) but have been programming C for 4 years.
Makes sense to me. "What's your coding practices?" is about as open-ended as "What do you eat for breakfast?" What do I eat for breakfast on Mondays? How do I take my bacon? What's my preferred way of fixing eggs? If I drink coffee, how do I like to brew it? Those are questions I can answer with specifics. What are my coding practices? Well, I try not to write vulnerable code. That's pretty much it without some qualifier to the question. :)
w2k is a decade old. do you still use it?
Well, using that kind of logic in this context, I'd have to guess what you ate. Did you drink milk? No. Did you drink coffee? No. Did you drink tea? Yes. Did you eat a sandwich? Yes. Did you have cheese on it? No. etc. 