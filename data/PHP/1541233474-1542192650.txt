If you have trouble imagining how to achieve pagination like features without usage of terrible inefficient and situationally hazardrous SQL clause I suggest to read on SQL specification. You have quite some work to do. '92 specification, '99 specification, '03 specification.. well, that would be enough for starters.
Never understood the need of such libraries when \`DateTimeImmutable\` exists...
Citation needed.
I'm no longer with the company I worked at when I wrote it so I can't release a modified version because I don't have the original source or the permission to do it.
And practically nobody is using it at fullest. 
&gt; Carbon is a shit library that no-one should use - u/briancodes mom 
Google for Php login with curl and check the result. 
If you are familiar with symfony, their guard authenticators would be perfect for this
Oauth is not available and signon is not a good idea i dont like that
Yeah its a good idea but I'm using wordpress and i dont know the variables for email and password that the login plugin using, i can not edit the variables therefore
Why don't you like it? From a security standpoint, it's an excellent solution. Client applications (just like yours) can verify the user's identity against a known service, users only need to share the password with one service (the IdP), and the university can vouch for the client applications good reputation. Asking the end users for their usernames and passwords is just full of potential problems. 
You're being resistant without giving any incite into your reasons why. People have suggested a few ideas and you've shot them down.
I learn more by doing that
I bet WordPress has a way for custom php scripts
No, you learn by being open and listening to people who are more knowledgeable than you. That's literally how the teacher-student relationship works. *sigh*
Might want to look at the symmetry man page....
Right, to be honest i was just extending this thread 
Looks like it is a helper on top of PDO. https://gist.github.com/PhrozenByte/c7f67d8fc32eb4b2689b
Yeah wp also have some useful plugins &amp;#x200B;
Thank you! 
Hy /u/rockthescrote Thanks for replying. I stumbled upon a file located in system\\library\\db\\MPDO.php which contain look like [THIS](https://searchcode.com/file/95707844/upload/system/library/driver/database/mpdo.php) . From the line 8 I can assume that this is mysql driver?
Thanks for replying. So, what does helper on top of PDO mean/do?
I know it is a little early as PHP 7.3 is still an RC, but why not :-) The PHP(-FPM) 7.4-dev image is built from the official git sources and updated/pushed nightly to ensure you'll always get the latest available state. **Try it out** Project | Description :- | :- **[Devilbox](https://github.com/cytopia/devilbox)** | Test your projects against **PHP 7.4-dev** with a configuration-free setup (dockerized LAMP stack) **[docker-php-fpm](https://github.com/devilbox/docker-php-fpm)** | See similar images ranging from **PHP 5.2** up to **PHP 7.4-dev** with flavours for base, production ready and workhorses **[docker-php-fpm-7.4](https://github.com/devilbox/docker-php-fpm-7.4)** | See how PHP 7.4-dev is being built **PHP modules** In general I try to keep all images as up-to-date as it gets and as feature-rich as it is supported. There's however always the possibility to disable any un-required modules and be sure to only use what you actually also need. **Syncronized directory permissions** When using dockerized LAMP stacks for local development, you probably also came across the issue of syncing file permissions between the local system and the Docker mounted directories. This has been addressed as well by parsing the uid/gid to the container which will then internally assign the same user/group for running process as your local OS user. This has been proven to work for Linux, Mac and Windows. To read more about the concept go here: https://github.com/devilbox/docker-php-fpm#unsynchronized-permissions Let me know of any issues, I am always happy to improve, discard outdated ideas and try new concepts. 
From what I can tell, isn't the upcoming preloading feature basically the same thing as if you just hit a select script automatically after startup? Seems like you could that now with a container's entrypoint script via the cgi-fcgi command
Have you confirmed this is okay with your university? Because from their perspective it's going to look like a glorified phishing scam
Stop posting your spam shitty websites on /r/PHP, no one in their fucking mind is going to pay you 15$ for that crap. &amp;#x200B; This is not the place to advertise you.
That's because Laravel is built on Symfony
What are the top 7.4 features in your opinion?
What about varnish?
Based on the docs it looked like a per project composer dependency, is it possible to install php cs once and then simply enable it per project? It’s likely I’d use this across the board and installing every single time seems tedious.
I don't care if you have listed your crap in another website, this doesn't give you permission to break the rules here. &amp;#x200B; I know that sometimes can be really hard to understand this, but you can read it 10 times in a row to see if it works: "**Your crap does't interest us, this is a PHP subreddit and this is not a place to advertise you.**" &amp;#x200B; If you want to promete got to the /r/codester subreddit and publish whatever they let you.
Yes but that's the point exactly—if you hit it at entrypoint, PHP has to spend the time reading it in and compiling it into memory. If I'm reading the RFC correctly, this would be an optimization that reads the pre-compiled code straight into memory, so it would shave at least the compile time, no?
It uses several Symfony components. That's nowhere near being built on Symfony.
No, you're just being an asshole.
Alright smarty pants. How about built "upon" Symfony?
... why not just use wordpress (forget all the haters). Time is money
&gt; PHP runs in a single thread, which means that at any given moment there is only one bit of PHP code that can be running. hmmm
I think you are wrong. It’s not the point to include ALL files from vendor directory, but rather only hotpath. For example Symfony already has support for something similar, so for all apps running this framework it will be literally 5 minutes change to only preload hot path items. Also for custom applications it’s pretty easy to figure out what are the hotpath classes using some APM.
This was in reference specifically to a Magento project, and we had a few EFS volumes shared between the containers. One of them contained a directory where filesystem locks were stored (big WTF there), and when the limit hit, locks were held up because of normal traffic hitting the tiny limit, so requests would wait until the lock was freed. This led to a bit of a pile-on until we had AWS emergency lift our limit while we moved the locks directory elsewhere. Eventually we moved the requests that used the locks to a separate instance with local storage for that locks directory. Luckily those requests are mostly for backend purposes, so it doesn’t impact frontend scalability.
Which of the above listed projects did you try out?
Tweaking websites for customers. Making web-apps for businesses. It would eventually include Wordpress along with general PHP. Gig-economy stuff.
&gt; Ask for double the salary. I don't know where you're located that this is even remotely possible to pull off, but around here it's definitely not. I just changed jobs after almost two years into my first position. Twice my old salary is what a guy with 5+ years experience would get, and while I'm very confident with my skill level, there's no way I'd have been able to get that around here. I managed to get a 25% increase over my previous position, on top of the much better benefits, but damn, being able to get twice an entry level salary for 1-2 years experience must be damn nice...
It is commonly referred to as freelance jobs. Whereas a consulting job is more like telling people how can they improve. So to become a consultant you must become an expert first. And it takes time and money. A quite lot of both. Just like in any other profession. I never tried to pay my bills from freelance jobs but from what I heard the market is vast albeit highly competitive. So the question is not just the number of gigs available but also the salary offered. And the less you are an expert, the more competitive the market is. Either way it does no harm to register on one of freelance sites such as Upwork and to try your hand at. 
It's one of those things that's correct or wrong depending on your perspective (every server runs multiple PHP threads/processes, but you have access to only the current one from each of them... unless you do a sub-request over HTTP, or fork over CLI etc.).
I really wish lambda supported PHP out of the box
Half of the text disappears on iphone :(
Nah, through generators it’s simply wrong. With stream_select you can already write a native PHP event loop that might not be as fast as Nodejs asynchronity, but works in the same way. The key is being able to pass execution contexts and that is something generators do. PHP generators initially provided the send method already, which also allowed bi-directional communication between execution contexts. And even then there is PHP ZTS and pthreads.
&gt; So to become a consultant you must become an expert first. If only.
Nice article. For anyone interested in async PHP - a better and more powerful async API extension is already in the works [concurrent-php/ext-async](https://github.com/concurrent-php/ext-async).
You seem to be confusing concurrency with asynchronicity. Generators are great for asynchronicity, but they do not (on their own) deal with concurrency. Multi-threading and multi-processing are in the domain of concurrency.
So basically just for IDE's 
Wow, i remember when they introduced scaffolding (basically a RoR clone at the time)... It was great!
Started here: http://devilbox.org/ I see there are youtube videos further down the page. I'll try that.
Well, salary dynamics are quite interesting. Generally, you are not adding any value to them right from the get go and actually cause loses, because you eat away time of senior / mid developers who would otherwise spent that time delivering actual value. So you eat value and require to be paid. Now, I'm not complaining, but when negotiating for higher pay you should keep this in mind. 
Then what does that mean by no one is going to pay 15$???? You did not mention anything about rule in your first comment. You can say that in your first comment that we can not promote our php scripts in php sub reddit. Think twice before you speak a word. 
I think the official documentation is the best place to start: https://devilbox.readthedocs.io/en/latest/
Subreddit's rules are on the right sidebar. &amp;#x200B; &gt; You can say that in your first comment that we can not promote our php scripts in php sub reddit. Because "**This is not the place to advertise you.** " in my first comment encourages you to do so. &amp;#x200B; &amp;#x200B;
This is a mess... why do you assume i want my dirs to be 0777, why do you assume i have write permissions in the target dir...? Just use [https://symfony.com/doc/current/components/finder.html](https://symfony.com/doc/current/components/finder.html) for listing files in a location and do whatever you want with those files but make sure you can do what you are after, aka you have permissions.
No sir I left link to share sorry for that
https://w3hubs.com/simple-registration-and-login-form/
Ahh, so it’s a successful spam attempt 
So, yes.
Visit this link atleast one time https://w3hubs.com/simple-registration-and-login-form/
Oh please for everything that is holy nooooo! $name=$_POST['name']; $email=$_POST['email']; $uname=$_POST['uname']; $password=$_POST['password']; $conn= new mysqli("localhost","root","","prathmesh1"); if ($conn-&gt;connect_error) { echo "Connection Error.$conn-&gt;error"; exit(); } $result=$conn-&gt;query("INSERT INTO login1 VALUES ('$name','$email','$uname','$password')"); ...
There's not a single line of PHP in that example which makes it nothing but blogspam!
You're a fucking spammer, dude!
&gt; Is there any possibility to measure ABC for php or should I change my language of choice? I'm not aware of any. However when I search ABC complexity to look up what it is, I find [this](http://wiki.c2.com/?AbcMetric), and the first thing it says is it's not a complexity metric at all. Not being a computer scientist, however, I'm not going to agree or disagree with that, but I'm going to assume that at least its definition of the ABC metric is correct and I may not be a computer scientist, but I *am* an experienced programmer and I don't see the value of ABC over just cyclomatic complexity. What ABC adds over cyclomatic complexity measurement, is the number of comparisons and assignments. In theory those are the meat and potatoes of any program, but in practice are never, _ever_, where performance or complexity issues are. Even in theory, they are both O(1) operations and comparisons are actually already contained in cyclomatic complexity because they add a branch, and that's what you are trying to measure when you do complexity calculations. Unless your professor requires you to supply ABC metrics of your own code, I don't see why the lack of ABC complexity measurement software would be a deal breaker for you, let alone why it necessitates the dramatic threat of changing languages (what are you trying to accomplish there, anyway?). As for tips on finding ABC complexity tools, you want to look into static analysis software, [this](https://github.com/exakat/php-static-analysis-tools) looks comprehensive, and I think phpstan is a leading and active one at the moment. The ABC metric doesn't seem terribly complicated to implement so perhaps somebody (such as yourself) could contribute to an existing static analyzer to add support for ABC.
I was one for a year and a half. It was much like being an employee minus the employee benefits (insurance, holidays, job security, etc) plus the higher pay. I think you're usually expected to be able to lead yourself when working a contractor. It all depends on the company though
Sorry man but the code is terrible. At very top you have this: if ($\_SERVER\['HTTP\_HOST'\] != $good\_http\_host) { // Display it and quit it echo "You need to be on the WIP server."; exit; } else { Why *else* statement when previous condition kills the script? Makes no sense and even IDE should warn you about that. The rest is bad as well. Check this instead: [https://symfony.com/doc/current/components/filesystem.html](https://symfony.com/doc/current/components/filesystem.html) and look at that code. The best way of learning is by using proven tools made by others.
Sir there is one button it's called demo button you can click and see demo atleast
I thought that was going to be in 7.3. Damn, I was all excited for 7.3 Now I feel gipped
This is where i was considering it. I've done lots of freelance, and I guess have experience as a long term contractor for a firm (handling all of their web stuff, without being an employee). How do the companies expect to pay? monthly, after I send an invoice? Do they actually only expect the day rate, or do you track the exact hours? 
So on the first day, what's it like? They say what they need doing, introduce you to the team, and you just get on with it? Is it mostly a solo job, or a lot of working with the other team (I guess it would depend massively on each company though?)
Why? I would never consider using this. Based on the one code snip someone posted, you are vulnerable to sql injection, don’t use composer, you create variables in the global namespace, and your code is restricted to using MySQL. It’s a first year amateur project at best, but never something that anyone should ever use in production 
Personally Dont like the idea of properties have the orNull operator. Types should by defualt have the ability to null. That should not be burdoned on the dev if a type if ever going to be null.
What are the interviews like, compared to for normal jobs? I've read that a lot of bigger companies don't like to hire freelancers (I have been doing it for over 10 years, and run lots of websites (with ads, etc for income), with only really one company long term to put on my cv). I guess with contracting it is less of an issue?
And if you want FTP, local, Amazon S3... anything else to copy to: [https://knplabs.github.io/Gaufrette/basic-usage.html](https://knplabs.github.io/Gaufrette/basic-usage.html)
do they expect you to be VAT registered? 
https://imgur.com/a/gZR3VBL This shit, right here, is the only reason you are spamming links around Reddit. Your pages have more ad space than content. It’s called blog spam and excessive self promotion and will get the same negative reaction from everyone, regardless of the quality of your code 
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/b0nUI3T.jpg** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20e918b5f) 
Actually I think the fact that types in PHP are non-nullable by default is one of the best features of the language. It means that I don't have to add checks all over the place for whether a value is null or not before it is safe to use.
I've been a contractor in London for about 10 years, a few things. Checkout IR35, make sure any contracts you get are "outside" of IR35 Also, use an agency, don't go direct. Sure the agency will skim £25/£50 a day off your day rate but they'll pay you weekly / monthly without fail and won't make you wait 90+ days for money. Cash flow is king and you don't wanna be cashing companies who hate paying so swallow the loss, its REALLY worth it. Depending on experience expect £400+ per day. You don't \*need\* to be VAT registered but you should, it'll make you more money. You do need a limited company and you do need indemnity insurance. Good Luck. Feel free to DM me if you want / need more info or you want me to pass on your deets to people I know looking. 
SQL injection and plain text passwords? sign me up! $username=mysqli_real_escape_string($conn,$_POST['uname']); $password=mysqli_real_escape_string($conn,$_POST['password']); $sql="select * from login1 where uname='".$uname."' AND password='".$password."'";
I do, it's wonderful. &amp;#x200B; My typical day is waking up at 7:45, by 8:15 I've run and jumped in the shower. For 9 I'm fed and at a computer at my house. Between 9 and 10:30, I review requirements for the day, send emails, reorganize my tasks etc and usually much around on tech forums. Mid-morning until lunch, I code and deal with bug reports. After lunch, I stop work around 3 and head out for coffee for the day. The best part? I only work four days a week, Fridays are always reserved for non-coding days. &amp;#x200B; I think, generally speaking, I put in about 5 hours a day and get paid $600 a day as a consultant for that time, if I was willing to work longer hours or five days a week, it would easily be double that.
Generators don't provide access to multiple OS threads. Preemptive multitasking and access to all CPU cores being two of the key features differentiating them from generator-based coroutines.
yeah depends on the company. for me it was just joining their team and doing what everyone else was doing
The hard part is getting those kinds of contracts 
Yes and no, it's not easy to find them but one you have them it's incredibly easy to keep them. My advice though, for people looking to find those types of contracts is to be active in local coding communities. Almost every job I've had for the past 20 years has come from friends of friends, not adverts and the most profitable? They've come from open source projects I've donated my time to.
Take a look at Chronos. It's a fork of Carbon, but everything is immutable by default.
&gt; I'm also not sure if this metric makes more sense in other languages than it does in PHP. Well, in C++ you can overload operators, and perhaps in other languages you can do that too. However, I would argue that you're no longer talking about simple assignments and comparisons anymore once you start doing that, but instead are using syntactic sugar to call a method.
Lost?
Not really.
You'll be competing against very low foreign wages on up work. Like 20 an hour low. That was my brief experience in there. Most the customers in there are not concerned with quality either. It's tough. If you're looking for higher wages id look local.
I keep hearing that if you are on upwork or some similar platform, you've already done yourself a disservice, and that finding customers locally is a completely different experience and pay-scale.
Everything we say is relative and subjective. Let's not turn this into a philosophical debate. For me the main benefits are: - it is fully written in C and Assembly (boost.context) - should be more performant than pure PHP libraries (just like Swoole is faster than React/Amp), but only time will tell - fibers abstraction allows to implement different backends (boost.context, libaco, libdill, libwire, etc) - each async operation has Context (similair to Golang context) - Golang-like channels for synchronization are planned - tight integration with libuv Please read the description on the GitHub page, it is very comprehensive. If after that you are still not convinced that this is the future of asynchronous programming in PHP, there is not much more I can do.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I know this probably isn't a popular opinion on this sub, but it seems to me that when you get to the point where concurrency is a real need, you're probably best off opting for something other than PHP.
It’s Quora, you’re not allowed to post factual information
The first link you provided links to an IEEE paper that goes into more detail. The metric is specifically *not* a measure of complexity. It’s more similar to measuring SLOC as it attempts to quantify the size of a program while making no claims about its complexity. It also discusses that it’s debatable whether or not this measurement actually provides value.
`echo`, `header()` and similar only work when using the internal web server, or a SAPI that is sending information to a webserver (like php-fpm does). That won't work as soon as your application is plugged in other environments, such as: * simulating a request in a contained environment (test suite, sandbox, etc) * sending a request through something like ReactPHP, AMP, PHP-PM, etc You are going to be perfectly fine with `echo` and `header()` for most use-case scenarios, but the library is built to allow other emitters in order to disable or redirect output completely. 
Thank you for your input. It really got me thinking about what I want to measure at all. The goal of my professor was to show us how to find code with high, as he had said, 'WTF factor' with static code analysers. One of the requirements stated that tool we must use returns some numeric output, not interpreted to string by analyser. He seems to be ruby fan so thats why he mentioned flog ABC metrics.
This should be a more popular opinion in any sub. Languages are implementation details, albeit important ones. I love PHP but, for concurrent programming, there are often better options. 
Sounds right.
In addition, it is because the lib implements [https://www.php-fig.org/psr/psr-15/](https://www.php-fig.org/psr/psr-15/)
If I do this: echo json_encode($json_array); in the while loop its still blank
Hmm..are you echoing into the body of an HTML page? If not, view source on the "blank" page -- the output might actually be there.
Might as well check the most common error first, are you 100% sure you're connected to the right database instance, it has a table named `movies`, and there are rows in the table? If that checks out, try adding some error handling to see where things might be going wrong: public function displayAllJson(){ //Make sure the database handle is valid if (!$this-&gt;conn instanceof mysqli) { throw new \Exception("The database isn't connected!"); } $sql = "SELECT * FROM movies"; //Try a query but only run the loop if the query succeedsd if ($result = mysqli_query($this-&gt;conn, $sql)) { $json_array = array(); while($row = mysqli_fetch_assoc($result)){ $json_array[] = $row; } //Success, print the results echo json_encode($json_array); } else { //Something went wrong, try to get the error from MySQL throw new \Exception("Error: " . mysqli_error($mysqli)); } }
That's a perfectly sensible error. Use `json_encode` like you did at the end.
Came in too late for 7.3 Close, but ultimately too late.
Maintainer from the Slim Framework here, which handles PSR-7 objects. Once our app has finished processing the incoming PSR-7 ServerRequest object it returns a PSR-7 Response object. An emitter is used to take in a PSR-7 Response object and emit (echo) its headers and stream contents (body). It’s a layer of abstraction which provides the end user with the ability to emit a response without having to loop through/set response headers and echo stream contents manually. 
Try `var_dump`ing the `$row` to see what you get, inside the loop. 
Try to print_r($result); to see whats bringing back from the query. And analyze whats going on. Have you selected the correct/any at all database on your $conn? 
Not a fan of how the controller is highly opinionated about the model, and how the model is wrapped by a proxy (this is a level of indirection that has proven problematic for debugging). This is also makes the same mistake that literally every "MVC" framework makes. The "Model" is not a single class. The "Model" is effectively your entire domain layer, which can be comprised of data models, services, validators, factories, repositories, adapters, any and all kinds of value objects, and just about anything that's needed in order to materialize the data needed for the incoming HTTP request. If a controller needs to make use of any of these, they should be passed in via dependency injection through the constructor. This makes them easier to test and mock, and more loosely couples the controller to the model. 
You need to have something like this as an abstraction if you encapsulate it within an object/layer/wrapper having different responsibility (so you could at least test it). You can go without it if output is your top layer serving response from injected handler and request as its parameter. The point is that if you want to do something else with the response *without sacrificing any other functionality* you could change this abstraction (or mentioned wrapper), because that's the only thing it was responsible for. Handling output from global namespace will coexist with things like configuration, instantiation... all environment stuff, so it's impossible to detach output independently, and duplicated code will need special attention.
Then why are you posting a music video in r/php?
Which method was that? I'd love to see the PR/issue for it
So just jump in, make a claim, and don't respond, eh?
Generally weekly actually. And it's 50/50 whether it's auto-billed by recruitment company (as you will most likely go through them) or you generate the envois yourself then send to recruitment company or employer. The freelance exp is good but you will need to be very specialised or very good at what you do to be a successful contractor - you need to "hit the ground running" etc. Most permies don't have this mindset they just leave their education and training to the company. As a contractor you must constantly be learning and updating and getting your cv ready for that next contract. It's easy though, thoroughly recommend it and I never looked back once I started. I'm typing this in a villa in Bali and I've had 5-6 months off already and pseudo plan to get a new contract next year.
clearly you haven't heard of this little thing which has been around for a few years called "caching". no server running wordpress takes seconds to respond to a request unless it's a calculator. trust me, this is not the future.
Hi, thanks for your comment ! Could you explain/guide me on why the proxy is an issue ? I understand my mistake about the model, I read PHP the right way yesterday, I'll work on this part soon.
Hey, I really dig Devilbox, I'm using it every day for about half a year. My only gripe with it, it's performance. Maybe this is by design, but it gives me hard time at sometimes. Do you plan to improve performance in the near future?
Hey, I really dig Devilbox, I'm using it every day for about half a year. My only gripe with it, it's performance. Maybe this is by design, but it gives me hard time at sometimes. Do you plan to improve performance in the near future?
Hey, I really dig Devilbox, I'm using it every day for about half a year. My only gripe with it it's performance. Maybe this is by design, but it gives me hard time at sometimes. Do you plan to improve performance in the near future?
Well suppose you wanted to type hint the model as an argument for a function doSomething(MyModel $model) { ... } This will now fail, because as far as your code is concerned, it's an instance of `Proxy`, not the actual model. (though maybe I'm misunderstanding the purpose of the Proxy in your framework). If something weird happens with a method call in the template, it's possible it will raise an error here: https://github.com/AymDev/Phunder/blob/master/src/Model/Proxy.php#L40, instead of the actual place in the model where the error occurs. I have enough bad experiences with debugging magic call methods in PHP that I just 100% avoid them now. They have a way of obscuring where errors *actually* occur.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [AymDev/Phunder/.../**Proxy.php#L40** (master → 40b16f6)](https://github.com/AymDev/Phunder/blob/40b16f6560729b971bb62b4be34c05cf4af82ef4/src/Model/Proxy.php#L40) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e92zgru.)
Yes, it does. This post is toxic.
&gt; vatch ( ͡° ͜ʖ ͡°)
What? Why this post is toxic?
I would recommend: \- Use a good framework for a while (to learn about code style, patterns, etc). \- Read [https://symfony.com/doc/current/create\_framework/index.html](https://symfony.com/doc/current/create_framework/index.html) \- If you want to build your own stuff it's ok, but please at least do it on top of things you know are already working.
The system that we have developed in the company I work, uses the classic approach frontend &amp; api backend architecture. The backend is in php and it's a custom set of components with our own structure (using silex and many other symfony components). &amp;#x200B; My two concerts are about the API documentation and the input validation (validate request parameters). &amp;#x200B; Documentation: We have been using swagger (with annotations). I personally don't like at all. It's no nice to have those pieces of big commented blocks everywhere and of course, it's not easy to keep the docs on track. Do you know any other good library for this? &amp;#x200B; Input validation: About the input validation, we tried [https://github.com/Respect/Validation](https://github.com/Respect/Validation) but that library lacks proper granularity when it comes to set custom error messages for specific cases. And the usage of the library is not that nice either. I recently saw someone posting [https://opis.io/json-schema](https://opis.io/json-schema) and I was wondering if it could be used to validate the input somehow but I am not sure. &amp;#x200B; Any advice on any of these topics, like libraries or good practices? &amp;#x200B; Thanks in advance!
Are you using it on Linux, Mac or Windows?
The best good practice is to use graphql.
&gt; Documentation: We have been using swagger (with annotations). I personally don't like at all. It's no nice to have those pieces of big commented blocks everywhere and of course, it's not easy to keep the docs on track. We recently started using Swagger and keep our documentation separate from code, that is we have a bunch of YAML files that describe the API. We are planning to use [Dredd](http://dredd.org/en/latest/) to validate the API at some point but unfortunately Open API 3.0 is not yet supported. See https://github.com/apiaryio/dredd/issues/894 In the meantime we have unit tests that test the controllers which have validate the input and return [errors](https://jsonapi.org/format/#errors). We also manually test each others work against the API docs.
Yes you can install it globally through composer. Then configure the path to global installation of phpcs.
I mean shit, if all you are serving is an HTML file with some scripts and styles, why bother with PHP at all O_O. People suggesting Wordpress are equally retarded. He clearly needs a ```/``` and ```/download```. Generate those 2 locally, upload to w/e you want and router your domain accordingly. Hook-up some google analytics to measure your traffic and be done with it, jesus.
Because other parts of your app might need to catch these as they can destroy your response
Any static site generator + any service to handle forms, for example hugo + netlify. Save time, save money.
I've recently delved into PHP a bit and was surprised to see type hinting but.. what's up with not being able to hint a typed array? 
Could you be a little bit more specific? (Or I'm just completely misunderstanding your question also quite possible) Because you can type hint an array as for example: `public function amazingFunction(array $data)` `{` `return $data;` `}`
I think what he means is type hinting an array as for example an integer only array 
You really can't typehint which type the items in an array are going to be. I think that's because you can have multiple different types inside of an array. What you can do, that has support in many IDEs, is use PHPDoc for that. Something like this: &amp;#x200B; `/**` `* My amazing function` `* @param MyType[] $data Array of MyTypes` `* @return MyType[] The $data parameter` `*` `*/` `public function amazingFunction(array $data){` `return $data;` `}`
Hi, thanks for your advice. I am coming from a C# background just I accepted a PHP job so I want to see how things work in that particular language. Would you still recommend this book in that case or do you know any better resource to catch up with PHP ?
Nah, own experience.
That's a cool story. &gt; Leave it at that. You're not my supervisor! 
Vs code! 
Mostly vi but also VS Code, depending on what I'm working on. 
exactly.. i ended up with vs code + php tools and its BRILLIANT! 
ArrayObject and / or ArrayIterator are good for this, but it's not a perfect solution. It does allow you to ensure what goes in and out of your 'array' is precisely what you'd expect (for example an IntegerCollection object extending one of the mentioned classes) though. I might be wrong on this, but I think Doctrine uses this method for traversing db results represented as entities. The other way is to validate the array contents as you loop over them but that can lead to a lot of duplicated code and isn't as efficient as refusing values on entry to the array (unless you're only ever looping the array once I guess, in which case its negligible). The upshot of the first method is more object-oriented code that in theory is more resilient, easier to manage, and easier to test. You can't, however, treat the object like an array in all cases (for example you can't do sort($arrayObject)), and you're adding more objects into the mix which is essentially a further layer of abstraction. For what it's worth I hate seeing lots of needless abstraction, yet I'd personally suggest this method. As for the second method, it's definitely simpler and let's you manipulate the array more directly, but it's less 'safe' (you could add to the array elsewhere, and 'bad' data might get in). Validating the array as you use it also often leads to duplicated code doing the same thing. For me I'd decide based on what I was doing. If it's a small, simple array then whatevs, I'd just validate the array directly and leave it at that. If my array was supposed to be a collection of objects I'd be way more likely to create a collection object. 
Even as someone with a "bit" of dislike for Microsoft, I'm happy to say VS Code is good. The doc8 integration works really well, making it excellent for Python.
I do agree that GraphQL is a really nice solution and single handedly solves many of the issues that REST Apis have. However, it may not be possible for OP to implement it now, it seems like their app is pretty far already. But for new projects, i can not recommend it enough.
Did you tell it to open your home directory? Atom did the same thing to me when I did that by accident once. I think OSX triggers the alert when it detects an application trying to access certain files/directories (e.g. maybe caused by the editor trying to read metadata on the files storing your contacts)
Oh!! Neat. I his does indeed help :) I also like how the IDEs use the "instanceof" trick to know which auto-complete data but having that check there is kind of an eye sore :(
Coda 2 is great too (its pricey but worth it!) :)
Did you just copy my amazingFunction ?! :P
My experience has been the opposite. For the past couple of years it has been getting better and faster.
I got lazy!! :P
Well you're a real programmer alright :P
Atom
Thanks! That's an interesting thought. To be honest, I can't remember what I did when this happened. But it could be something like you described. I cannot imagine that Jetbrains would try to access my contacts on purpose.
I use Neovim (and Vim before that). I've tried PHPStorm and I just don't understand how people manage to use it without wanting to set fire to it. These days, thanks to PHPActor I've got pretty good completion and refactoring in Neovim, and I have snippets via Ultisnips and various other niceties, and if I decide I need something from PHPStorm I can usually find a way to get it working in Neovim.
Sorry for not mentioning it, I'm on Win. For the sake of truth, I'm working on a fairly heavy WP site, but still, compared to a barebone (custom) Docker solution, Devilbox lacks performance big time. Why am I still using it? It's really convenient! 😉👌
don't be the next facebook plz, jetbrains ...
This makes intersting reading (and I use this on our projects). It's about cognitive complexity, which is how humans would experience a piece of code. https://www.tomasvotruba.cz/blog/2018/05/21/is-your-code-readable-by-humans-cognitive-complexity-tells-you/
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
what's your hardware?
Have you tried the above listed directory caching options. Also can you give an example of such a general (custom) Docker solution.
PhpStorm + [Php Inspections](https://plugins.jetbrains.com/plugin/7622-php-inspections-ea-extended-) = ❤️ PhpStorm is fantastic. Yeah, when it's indexing it sounds like my MacBook will take off and fly away because of the loud fan noise but other than that the integration is just great.
At the time it was 32GB RAM and an Intel 7700K, running on a Samsung M.2 850 Evo NVMe 512GB device.
Whenever I tried using it the indexing and auto-completion has just never worked properly. There's much better software you can get for the same price.
weird, that's more beef than what I have, but I haven't had any performance problems with it at all... wonder if a plugin was going haywire on you. ah well, if you've got an acceptable alternative now, I guess it doesn't matter
Same here especially when opening large projects (in the MLOC range), it used to be extremely slow and unreliable (~4-5 years ago). Tried using it again a couple of years ago and it’s much better. Even indexing, which makes my computer go to 100% for a couple of minutes is considerably faster.
Yep, certainly possible it was something like that. I'm definitely not saying it's a bad product (the features are great), just that it was oddly slow for me. Each to their own, I guess. :)
An opinion? We deal with evidence-based facts here :-) It may be your *experience*, and may be an issue for some people/hardware/OS/applications/whatever.
Because they're tracking every click on menus, porjects, settings and what changes you do https://i.imgur.com/uRMN6Y9.png . What you see in that screenshot is the statistics.application.usages.xml after few hours of usage. They love telemetry data like every other big company. Still using an old version which I will replace soon with the old Netbeans or Sublime.
Yep, agreed. I could've worded it better, I guess, but too late now, I guess. Like I said in another response, the features are great but it was a problem for me. Interesting, though, that the bug ticket I filed at the time had someone else report a similar issue.
Hmmmm that's really interesting. Lots of stuff going on, even in 1 day.
Same. Last year I tried it out several times over a few months. It burned my top of the line 2017 MacBook Pro to the ground. Fans spinning at high speed, battery life just plummeted, etc. It took measurable seconds to open a file. Tried all the recommendations too. Really don’t see why others use it.
Everything is slow compared to vi
You realize this "telemetry" is a [setting](https://i.imgur.com/gp2CeT8.png) you can disable, right? It's not like it's hidden, either, I'm pretty sure it asks you during setup (or on first run?) whether you want to share usage statistics with JetBrains or not. 
A 300k line project. It took around 2 minutes to index all the project from scratch. So, if you could live with 2 minutes of index (once per project), then PHPStorm is usable. How is it slow?
 that seems a little bit weird ~ i have 6GB RAM/Intel I5-4200U and its running smoothly with no performance issues 
MS always has the better tools. Visual Studio (beside Code, the actual CS) is unrivaled if you intend to develop for windows. Part of me thinks it's mostly why there are/were so much developers for Windows OS and mostly neckbeards for Linux, lol.. 
Sometimes you just want to defer header and body so they are not returned to the click as soon as you call these functions. You don't need an emitter library though. you can buffer echos et just put the headers in a response object.
Also gave up on PHPStorm this year. The RAM usage, random freezes got me fed up (linux). I do not regret the jump to vim and my experience has been better since then.
Same... I was like wtf.... no, bad Atom BAD
I really dont know, everything works with Coda 2, it never crashed, works smoothly, so many features :) But again everyone has their own taste :)
*nano, fight me :P
And your productivity took at least a 33% hit!
PHPStorm SUCKS if the source code folder is on a 5400 RPM (or even 7200 RPM) hard drive. Especially on Windows. What I do is put my source on a RAMdisk and then all of the PHPStorm problems melt away.
lies.
So you are just a random Reddit troll having no idea what is this stuff about.
Why don't you just eat uncooked rice? Or drive a car with just a chassis? Same reason.
Because vs code is a text editor and phpstorm is an IDE.
1. https://i.imgur.com/DK1ckG8.png 2. Your research is wrong. Webalizer is the standard solution for the Apache web-server
I find that this happens when I update my macOS, may be a new security measure by the OS
just use graphql, you'll thank me later.
You could also use something amazing like this: http://www.reliablecounter.com/
I've got an XML file wich contains signs like \&amp;#13; and \&amp;#195;\&amp;#188; ... I've tried nearly any php function to convert this into html entities like &lt;br&gt; and so on but nothing works... when I convert this to UTF8 nothing happens and I'll get weird thins like Ã¼ ?!?!
I am not too thrilled about those types of "free" counters. They download sketchy javascript from even sketchier sites. I am security conscious and don't want to introduce something unknown like that.
Like a sheep, I use to hate it because everybody hated the idea even if they didn't even try it. Then I tried it. Saved 90% of my time not writing REST apis anymore, not arguing with colleagues as to whether to use PUT or PATCH or what is the meaning of "idempotent" and all that bullshit. There is a spec, you follow it, or you don't, it's not some vague ass idea. The official docs are shit though, they are not beginner friendly at all, they tried to be generic but it's a mistake.
Ignoring the fact that this is optional behavior: Do you really think that such simplistic telemetry would cause any sort of noticeable slow down?
People are ripping on you, but in certain circumstances Jetbrain's JVM has some really, really bad performance bugs. I have experienced them too. The good news is, they can often be fixed with minor configuration changes to the JVM's flags. 
Maybe I didn't phrase my post correctly. My chief wants a webhit counter that displays on the website itself. Oldskool style.
I have heard of caching. &amp;#x200B; Even the Codex explains that wordpress is heavyweight. \&gt; Although WordPress is fast, it does contain a substantial quantity of code that needs to be loaded each time a page is displayed. &amp;#x200B; [source](https://codex.wordpress.org/Integrating_WordPress_with_Your_Website#Performance) Micro-frameworks (Slim, Express, Flask, Sinatra, Goji) are becoming more popular as fast ways to develop services. Containerization rewards smaller services with faster deployments and reduced difficulty orchestrating infrastructure. Serverless makes it even easier to developer those services by abstracting away deployment and scaling. &amp;#x200B; I don't think wordpress is the future. 
I just don't feel comfortable knowing that my clicks/actions are writed to a file and synced once in a while. And no, this is not optional as long as it can't be disabled.
PHP _is_ an open source language. It's been explained many times that Zend does not owns it. Nothing to see here.
Entities can be converted with: mb_convert_encoding('&amp;#65;', 'UTF-8', 'HTML-ENTITIES'); // A Add a call to nl2br to convert new lines to &lt;br&gt;'s. nl2br( mb_convert_encoding('&amp;#13;', 'UTF-8', 'HTML-ENTITIES') ); // &lt;br /&gt;
If you really want/need to do this in PHP then you have to make some considerations. The simplest way of doing this is with a not unique view counter, it saves you the hassle of dealing with the GDPR (if this applies to you) because you're not storing any visitor data that can actually track specific visitors. Create a database table with the columns 'date' (if you want to have time specific statistics swap the date column with a datetime column),'path','views'. Every time a visitor opens a page on the website update the 'views' column with + 1 for the specific date and path. If page specific statistics aren't required you can just remove the path folder and update the 'views' column everytime someone opens a page on the website, same goes for the 'date' column. Then just retrieve the statistics from the database that you need to display. &amp;#x200B; For unique visitor statistics you'll have to create a table that also stores the visitors ip address, as said when the GDPR applies to the company you'll have to request the user for permission. Only when the user grants permission you can store the ip address.
Firstly this has nothing to do with what I said. You were replying to someone who was talking about PhpStorm's performance getting worse. You said `Because they're tracking...`, which is to say that the telemetry is the reason for the degrading performance. Secondly it's absolutely optional. You said yourself that you found the **option** in the help menu. Just because it's written to a file doesn't mean it's sent anywhere. Sure, it may be a crap design to continue local-logging when the output isn't being used but that doesn't make this feature not optional.
This is absolutely getting out of control. Fuck these companies who want access to everything!
So you understand the difference, yet wonder why one is slower?
So you don't even realize who these people are
First of all, this is the third repost (at least). Second, see [this thread](https://www.reddit.com/r/PHP/comments/9rk4zy/thephpcc_the_future_of_zend)
Will do. TBH, I don't think I have done anything using Carbon that would not work if immutable, so could be ideal.
Nice article, I’d still prefer language support for Asynchronous programming, with the async and await keywords like C# and modern Javascript. 
thx for your reply ... but this doesn't work for me :-( ... I need a function that's replacing all HTML Numbers in HTML Signs like this: `$string = str_replace("&amp;#13;", "&lt;br&gt;", $string); // Line break` `$string = str_replace("&amp;#160;", "&amp;nbsp;", $string); // Blank` But I don't want to define this for each sign... Is there an alternative Solution ?
Client certificates are not related to a client certificate. The interface describes how the client is used, not how it's built, coded, or what it does.
- `evee` =&gt; `echo var_export($var$, true). "\n";exit;` Need this often with unit tests and matching nested data structures - `make` =&gt; `$this-&gt;app-&gt;make($ENDS$::class);` Obviously Laravel dev here. Use this mostly for tests do, DI otherwise - `vd` and `vde` =&gt; `var_dump($var$);$END$` (the latter with exit afterwards). Mostly obsolete with Symfonys `dd` helper except: you can pass multiple variables. Couple others but they're even more project specific.
This thread is full of bullshit. I can imagine there are a lot of people who have no idea what it like to maintain such a huge project like PHP. What I would never understand why these people would raise their squeaky voice to discuss the matter. The link *you* posted is a speculation. The link makes this thread is fucking bare first hand description of events. A very disturbing one.
It's only now that I saw this library and I am blown away by the effort. This is how native functions should behave. IMO you should push this to the PHP core so maybe we can see this on PHP 9 or 10. At least there should be an ini setting to switch this on on future PHP versions. Thanks for the effort, this is easily the next best thing in PHP since it became OOP'sh.
So everyone else is a dumbass but you. I see.
Everyone aside, you dare to call Zeev's own words "a speculation". So yes. Now go away troll, no more food for you. 
If it's only for internal consumption (web, app), I too can recommend at least looking at GraphQL. It "solves" so many small issues: - documentation is done within it, can be interactively explored via GraphiQL or Playground, etc. - no need to touch upon subjects like "how are we fetching relations", "how only select specific fields" - no more discussion about get/patch/post/put/delete; it's all post and over - tooling is very good around it, IDE even have built-in support writing/executing GraphQL (though personally rarely need it, I rather write tests) Cons: - it's not like your regular REST/json API, can take time to get used to it if no experience. Expect to take a few weeks to work into the subject (spoiler: it pays off) - forget http caching; if it's important, graphql isn't for you (rule of thumb) - pagination can take more to get to understand how to implement it - return complex nested structures/relations can pose their own challenge. It's all about writing good resolvers and understand n+1 problems and use of concepts like dataloader or working with deferreds. https://github.com/webonyx/graphql-php is _the_ librar for PHP (though there are contenders rising), but usually you want a bundle/package for your framework as it eases integration and "getting started" a LOT. 
Vim is good enough for Rasmus. If the language’s inventor uses it, I think it’s fine for anyone else. Everyone here needs to seriously chill the fuck out about the PHPStorm circlejerk. Use whatever editor you like, and let others do the same. 
Look, as much as we want to, it's just bad form to fight the mentally disabled. 
It just wants to stalk your ex-gf. That's all. give it permission.
&gt; It was getting slower and slower every version, to the point where it was unusable. yes, but they also notices that and managed to turn it around. it got a lot better in the last year and a half
Thanks for your comment, I will learn how to use Symfony and Laravel (it can only be useful) asap I guess
I'm just here to get downvoted
We are, you're telling people to use vim.
Here's what I have noticed in this thread: Say anything bad about php storm or bring up any other editor: Down voted to hell.
https://wiki.php.net/rfc/context_sensitive_lexer
This change is part of the [uniform variable syntax RFC](https://wiki.php.net/rfc/uniform_variable_syntax).
Hi! So yes, this is happening due to how macOS now handles directory access. Likely due to the way PhpStorm (and other IDEA platform IDEs) request acces from the OS to view directories this popup will show as your contacts are essentially in a folder of your home directory. Nothing to be concerned about at all and certainly not JetBrains trying to steal your contacts. Feel free to make a report over on YouTrack https://youtrack.jetbrains.com/issues/WI if you have steps to reproduce this. Side note: If you didn’t trigger this (through open etc) please check your installed plugins, could be one that has decided to go rouge!
I started off on the same and then in the first 12 months I showed straight away that I could do anything that they needed of me and so I received a series of 5k increment pay rises. I think I got up to 50k in my first year 
The only "real" use I've found for them is when you want to make sure two different classes that inherit from different places can work like each other. Example: Framework Entity B and Framework Entity C inherits From Framework Entity A, you don't want to (or can't) change Framework Entity A, and you don't want to have to maintain your code in two places when you create App Entity 1 (inherits from Framework Entity B) and App Entity 2 (inherits from Framework Entity C). I've truthfully not seen a lot of need for this in any PHP projects I've worked on, but I have seen it in UE4 c++ projects -- especially when dealing with several of the built in Actor classes.
Oooh! Thanks, that definitely explains it
Documentation, like NJ247, we also just write our API docs in Swagger YAML files, then generate the output documentation/tests etc. &amp;#x200B; Validation, we use symfony/validator standalone, works a treat and has been able to handle everything we have thrown at it so far. I also tried Respect before, and it didn't quite stack up. We do something along the lines of this: &amp;#x200B; public function somEndpoint() { if ($this-&gt;validateJsonApi([ 'id' =&gt; new Constraints\Optional(new Constraints\Blank()), 'type' =&gt; 'SomeType', 'attributes' =&gt; [ 'emailAddress' =&gt; [ new Constraints\NotBlank(), new Constraints\Email(), ], 'name' =&gt; [ new Constraints\NotBlank(), new Constraints\Length([ 'min' =&gt; 3, 'max' =&gt; 30, ]), ], ], ])) { // do some stuff return new Serializers\SomeSerializer($someEntity); } return $this-&gt;jsonApiErrors('Could not do something.'); } (we also follow JSONAPI [https://jsonapi.org/](https://jsonapi.org/))
Nope, didn't have to do with reserved keywords. Turns out it's the parentheses. See /u/nikic's link
`head` for a comment header block like //========================== // {NAME HERE} //==========================
I’ve worked with the APIs before. Those won’t trigger unless you’re explicitly requesting them. They are. That doesn’t mean they’re doing something nefarious or even anything at all, but those prompts *will not show up* if they didn’t ask for the permissions. 
I said vim is fine, not told you to use it. 
As of macOS Mojave, these prompts will appear even if you don't use the APIs. If an application tries to access `~/Library/Calendars` or `~/Library/Application\ Support/AddressBook` for example (whether intentional or not), the system will force a prompt requesting access to Calendar or Contacts. You can try this with Terminal, by doing `ls ~/Library/Calendars`, assuming Terminal doesn't already have access to Contacts and is not added to "Full Disk Access" in Security &amp; Privacy.
While you are not wrong. Those comments do not contribute to the conversation regarding OP.
Testing. With a library like Carbon, you can use `Carbon::now()` anywhere in the code you need it. But when you run a test, you can mock the current time with `Carbon::setTestNow(...)`. Very useful in practice and not possible with just `DateTime*`.
I changed the setting of how much ram phpstorm could use to 2gb and it made a huge difference in performance. I was ready to switch to vs code but everytime I try, I miss all the features storm gives me 
Ah, fair enough. I forgot that didn't work in PHP 5!
Anonymous functions and closures can be quite useful, despite the other comments on here. You aren't going to find a book on this though because there isn't that much to it. It's summed up in just a few pages typically. The book "Modern PHP New Features and Good Practices" had a good explanation and is generally a must read anyway. It was written by the creator of the Slim framework.
Oh that is fact.
Functional programming in PHP is making pure static methods and stacking them to build behavior.
Could you be more specific though? For example everything looks like it's being done through static namespace resolution which is a bit confusing whats the objection to class instances when talking about models? Stringly getting property's by passing in 'var_name' is an exacerbation of not making any instances of models and using accessing the attribute normally: &gt; (new Fish())-&gt;Weight; instead of: &gt; self::Model('Weight')-&gt;MyModelMethod();
7php is a popular blog of php. Interviews of php interviews are published here.
It won’t take your contacts, but it will take your RAM! MUHAHA
It is the template layer's job to make sure that the data that is passed into is safely escaped. It is NOT the code that calls temple layer's job to pass in data that doesn't need to be escaped anymore. It's funny. This is a thread where pretty much every post in favor of template engines says "Template engines automatically escape HTML on output, whereas PHP can't do that" and the first post that says that you can use PHP makes exactly the mistake to forget to escape. If it's such a simple example, then it may as well just have done it right. &gt; I could just as easily assume that the $employee data came from a database where any malicious attempt to embed something in the text was filtered out (as it should be) before anything ever got persisted to storage No! There is nothing "malicious" about input from the user that happens to contain HTML. You shouldn't save it escaped, that will only cause you problems. It's not like you can be sure that you'll only output it in HTML. What if you want to output it as JSON? things like \&amp;lt; get printed out literally in .json. This bad practice is the reason we see so much doubly escaped HTML everywhere. The thing that should escape it for output is the template engine. And to ensure that it always does that, that you won't forget it, you should really use a template engine.
This isnt an unpopular opinion, i've seen many people on this sub talking about moving services that outgrow PHP into other lanagugaes. One popular choice is Go, some move to salesforce.
I doubt his blog is very popular, the guy's main area of activity seems to be on Twitter. Reddit search can find me only [one](https://www.reddit.com/domain/7php.com/) interview, which was not overly popular. The guy seems to be a community activist, who is more about chit-chat rather than any useful info. His career story is an example: there is nothing technologically related in it - no achievements, no contributions, no mistakes to learn from - just a list of some obscure companies. 
With symfony's `dd` you can pass multiple variables too (`dd($var1, $var2)`) Unless you meant something else
Functional programming is not all about closures. Immutability/statelessness is a huge concept and works excellent in PHP and in combination with OOP.
notepad.exe!
https://blog.golang.org/concurrency-is-not-parallelism
Did you install the php7.2 extensions? Is this CentOS?
Just did a quick profiler, and Carbon performing DateTime operations is about 10-20% slower. Wrong place to try to get performance from. However, I've never found any kind of date math that I couldn't just do with the base DateTime objects so I don't really see the point of wrappers around it, especially now we have DateTimeImmutable. Paste if you're interested: https://pastebin.com/NUn6XJX8
Thanks NJ247 for your response. I remember about checking out Dredd and it looks nice. Let's see how do they make it with the Open API 3.0 support. It also makes sense about writing the unit tests for testing the controllers. Thanks again! 
I definitely would like to try the validation symfony standalone component. And I liked the recommendation about following [jsonapi.org](https://jsonapi.org). I will git it a try to this setup, thanks PetahNZ!
We have a mixed setup between regular and plain rest and graphql. So far we added support to only some endpoints. A complete migration will take quite a lot I guess. But thanks for the suggestion and the extensive pros &amp; cons :)
Hi, just applied the `MOUNT_OPTIONS=,cached` change in `.env` but I don't see any difference. Maybe the code I'm working on is unsalvageable :/ What I meant in barebone solution is to connect official images like WordPress + MySQL seems pretty fast compared to Devilbox,
PHP loads extensions before it executes code. You have your php.ini file set up to load extensions that apparently don't exist on your machine, so it's throwing those errors. Depending on your operating system and packages you have installed, the place to look to fix it will differ. Check your /etc/php.d directory (if it exists on your system). If you have that directory, each module that PHP loads will exist there as a separate .ini file (opcache.ini, memcached.ini, etc.) You can either comment out or rm these files, or uninstall the php packages associated with them via your Operating System's package installer.
I just have `storage` and `node_modules` marked as excluded in the large* Laravel project I have open at the moment, and the indexing is only really noticeable when I start up the IDE. I do have 32GB RAM and an SSD, though. * 10-20 developers working on it full-time for 3.5 years.
There's a knee-jerk dislike of fp in PHP, that's ultimately based on a misunderstanding of what FP is. Once you understand one thing the rest is easier. OOP is not the opposite of FP. You see this misconception so often it might even be a more common view than the correct one. FP is really a subset of *declarative* programming (what something is eg 1 cup flour, 1 egg, 2 tsp sugar), whose opposite is *imperative* programming (the steps to do it, eg turn oven to 350°, grease a baking pan). A closer direct parallel to fp is procedural programming, which is a common approach in oop, but certainly not intrinsic to oop itself. Now there are definitely some techniques we love in fp that aren't gorgeous in PHP, eg currying in JS is pretty concise nowadays `const add = a =&gt; b =&gt; a + b; console.log(add(1)(2))`, vs PHP function add($a) { return function ($b) use ($a) { return $a + $b; } } echo add(1)(2); Now the autoloader not supporting functions (even namespaced ones) is a bit of a nuisance, but requiring closures to be more explicit is the furthest thing from being anti-fp. The most fundamental part is to code via expressions, not statements. This implies a requirement to enforce immutability, which many PHP classes don't, but that says nothing of oop. Some big libs like immutable.js, or more obviously the built-in Array in JS, are favourites in FP on that language. Clearly those things are objects. In practice this usually means writing something using an object with mutator methods run in statements: $pants = Clothing::get('pants'); $pants-&gt;setColor('blue'); As one that keeps the original object but the method returns a new object that you assign $updatedPants = $pants-&gt;withColor('blue'); I can't think of a good tutorial off the top of my head, but there are some good reference projects that take an fp approach. https://github.com/jkoudys/immutable.php Collections with methods to build new versions, instead of mutating. https://github.com/webonyx/graphql-php/tree/master/examples You'll notice all the examples build out expressions, rarely side-effect statements. The only side effects are the actual invoking of a server or caching. https://www.php-fig.org/psr/psr-7/ request and response interfaces are modeled on immutability, and are always executed as expressions. Good examples in the code snippets. 
Slim itself has a lot of good examples of fp, as it's based on the immutability-enforced psr7 request and responses. It still has a bunch of side effect inducing statements, and anything binding to a server will (eg it's `$app-&gt;get(`, not `$app = $app-&gt;get(`, but a lot of the middleware and callback examples take a declarative approach. 
Sure does. I even wrote a lib about it. https://github.com/jkoudys/immutable.php
Well that's what I mean when asked. I'm of the same opinion as you, adding a wrapper to DateTime seems pretty stupid, if you take the time to read the docs (20 mins?) you can do everything that Carbon does, and faster. You said is a wrong place to try to get performance from, but in the grand scheme of things, sacrificing performance for using a library that is completely unnecessary seem not the best option for me.
No osx just had to do everything a bit different.
Frontend is built with ionic and test runs in a browser. Using something like "xDebug helper" for chrome - the cookie for debug is never added. Has anyone managed to get a page that uses rest api with tokens (using authentication header) to send debug cookie?
&gt;You can either comment out or rm these files. Or install those modules. Depending on his needs :-)
Sadly in my experience this is all there is: https://phptherightway.com/pages/Functional-Programming.html If you want a wider scope on this watch some videos by Rich Hickey on Clojure, + Clojure books because Clojure uses a flavour of FP that isn't overly convoluted, and relies heavily on hash map like structures. If you're doing FP in PHP I'd recommend the following: Do not install a library or code something to "help" you do FP Do not use objects for data, they are change by reference by default in PHP Do not try to emulate monads, type classes, ADTs, pattern matching, immutability in PHP Do use type hinting, particularly scalar types Do use the function versions of the DateTime interface Do learn how and when to inject a Closure into a function so that responsibility is outside of current scope The good news is that you don't tend to design a system in FP, you kind of discover the DRY abstraction for your system as you go, instead of copying and pasting an existing object for example to extend something you can just often pass a different function and refactors are very predictable The bad news is the autoloader doesn't work nicely for PHP, and array_ iteration functions can be expensive at scale, that said array_* functions is how I started, I went mad for them and in doing so, I learnt how to apply SRP to loops and it teaches you why you would (partially apply|curry) something I've been doing this for what feels like about 5 years now if you want to pm me with specific problems 
I mean - OP said they wanted to prevent PHP from trying to use those modules, so I assumed they don't want them installed.
Use top 10 what YOU personally use in YOUR project the most often. For me it's: - `ctor` - `r` - `rn' - `rt` - `rf` - `ra` - `pa` and few more. You can find not-so-fresh ones in my settings on Gitub: https://github.com/TomasVotruba/PhpStorm-LiveTemplates 
Class - constants - fields - methods construct - private - public - protected static - final
I've read Clean Code many years ago and one of takeaway I still love is to **order private method by their call order**. &amp;#x200B; I asked devs around me and they have no idea what's that about. They sort methods random... wee, they don't sort methods at all apart visibility. One of the reasons is that **it takes too much energy for little gain.** That's not a problem anymore with this [coding standard fixer](https://www.tomasvotruba.cz/blog/2018/11/01/how-teach-your-team-private-method-sorting-in-3-mins). &amp;#x200B; How do you approach this?
I've read Clean Code many years ago and one of takeaway I still love is to **order private method by their call order.** &amp;#x200B; I asked devs around me and they have no idea what's that about. They sort methods random... well, they don't sort methods at all apart visibility :). One of the reasons is that **it takes too much energy for little gain.** That's not a problem anymore with this [coding standard fixer](https://www.tomasvotruba.cz/blog/2018/11/01/how-teach-your-team-private-method-sorting-in-3-mins). &amp;#x200B; How do you approach this?
Oh! I guess I wasn't aware, thanks for the clarification. No idea why I thought otherwise…
What difference would it make what order they were in? Who would ever care?
i suggest you learn better laravel or symphony. As of laravel there are plenty of videos at laracast 
We could be working at the same company 😀 We're too driving a public/internal JSONAPI [1] endpoint and GraphQL (only internal) together. We've made some good code-design decision and are slowly moving endpoints over (or: use them from both parties). Having a clean architecture with well-defined boundaries helps a lot here. Another thing which is a HUGE boost, at least for us: the (new) frontend uses Typescript and, lo' and behold, it's possible to a) extract GraphQL types and b) generate TypeScript types. This is so amazing for the frontend dev, because he has all the correct types, including the documentation ANDon top of that, the TypeScript compiler immediately shows problems with the GraphQL queries/mutations when we change something. I can hardly imagine you'll find easy solutions for this with REST APIs as the (mostly, not all) lack a _more or less_ standardized introspection system.
1 this ain't a support forum. 2 you're asking us to guess for you what you are doing wrong? lol
We use a tool that sort all methods (https://github.com/FriendsOfPHP/PHP-CS-Fixer) and then, everybody is on the same level. (In our case, the private methods are at the end of the file, ordered alphabetically)
Thanks for advice
&gt; There's a knee-jerk dislike of fp in PHP, that's ultimately based on a misunderstanding of what FP is. Once you understand one thing the rest is easier. you're making a lot of stupid assumptions. OOP is not the opposite of FP. Functional programming is about functional types, just like OO is about objects as type. The reason why FP isn't relevant with PHP is that PHP has a poor type system not suited for FP. 
 // &lt;editor-fold defaultstate="collapsed" desc="some methods"&gt; function... //&lt;/editor-fold&gt; // &lt;editor-fold defaultstate="collapsed" desc="other methods"&gt; function... //&lt;/editor-fold&gt; Personally, I don't care about the order but about grouping.
My goal is to have the smallest class with as little code in it, even if that mean more classes. Order don't matter when you have a small class anyway.
I tend to have 
Same as you, call order when I develop, but later on, when there's a lot, I actually do not care and write them at the first found empty space nearest possible to its usage. 
[This YouTube channel](https://www.youtube.com/playlist?list=PLRd0zhQj3CBmusDbBzFgg3H20VxLx2mkF) was a good start for me, personally. I just manually recreated the different tasks as shown in the videos. But honestly, it might actually be a good idea to start with a more widely used framework since there will be a lot more people around that can help you. :)
Hey I didn't mean to break any rules. I was just wondering if someone spots a flaw in my system design. If it's not your thing, you can just ignore it, it's okay.
Readability, it's the only difference it makes: grouping methods that are meant to work together together easier code readability for later developers, that's pretty much all.
Don't go to far with "the smallest class", the more you divide stuff, the harder it gets to understand the underlying algorithm. Small is not better in everycase. You may think of your class more like a namespace sometime, case it might be pretty big in the end. Code splitting must follow the business logic or technical design, and should never be driven just because smaller is better.
You're complaining about explicit capturing? That's one of the only design decisions I *like* from PHP...
Debian 8 Actually. I used php-build to actually install / build php so im unsure exactly what packages it builds with in the default php-build setup. 
Yeah, using phpenv i've opened the php file and can see that im not calling any of the modules that are failing, thats why im really stuck in a weird spot here. e
That's all I found too, and while it's a useful guide to some of the things that work well with fp, it doesn't really help you learn fp as a concept. Ditto with the array_ functions - I wasn't a huge fan, and much preferred the SplFixedArray, which is quite performant if you know its contents don't change, so I wrote [immutable.php](https://github.com/jkoudys/immutable.php) with that in mind. I do think you should learn enough that you could use the array_ functions directly, and not expect mine or any lib to figure it out for you. Paradigms can't be replaced by libraries. I wouldn't recommend against using objects for data (or immutability, obviously), but I would recommend against any special syntax that tries to freeze your object. Best to define classes that enforce immutability in their methods. The psr7 Response objects are a good example, as you never modify the response itself but instead create new responses based on the old ones. 
Well, just following the good practice of SRP (Single Responsability Principle) generally makes your class quite small. I also try to use a "callable classes" if I can, with a single "__invoke" public method, cool for controllers.
I'm a huge fan of coroutines; I go as far as thinking that the ecma async/await was a mistake that's added to the mounting clutter in that language. I find Promise.coroutine(()* =&gt; { const a = yield somePromise; To make just as much sense as async () =&gt; { const a = await somePromise; Except it requires no extra syntax, and you could always assign the Promise.coroutine to co if you use it enough. co(()* =&gt; { const a = yield somePromise; On the php side, I've taken to using Generators everywhere, and type hinting as Generator to imply they yield to a promise-resolver. If I want to use one as an iterator instead (ie I don't care about the response from -&gt;next), I'll hint the return type as Traversable. This lets all my async code be implementation agnostic to whatever promises lib happens to be used. public function somethingAsync(string $url): Generator { $page = yield Http::get($url); Then wherever I finally need to resolve, just go `P\coroutine($someGenerator)` and either wait for it or put it on a queue in the event loop. 
Just try reading classes from the bottom.
I'm the CTO with a legal tech startup (paperChaser), and we have a pretty wide range. New hires at entry level often come in at lower rates because they get more intangibles at the job. I also teach at a bootcamp, and often graduates are ready to stop paying other people to learn and get paid themselves, but they continue their mentorship under me. Intermediate and senior devs tend to be well paid from day one, because I have a clear picture of the value they provide my company, and they're capable of simply doing their own work if the compensation isn't right. There's also the potential to partner or take equity/profit sharing later, which if you believe in the startup could be worth it. Of course, you're also new and probably not that capable of judging if they're likely to succeed or not. Unless you think working there will be mind numbing, and prevent you from finding a better job, I say take it. You'll have a much easier time finding your next job with some experience, some more skill, and if you are already working so you can take your time and find an ideal fit. 
How do you order them by call? What if a private mehod is called from more other metjdos?
Why did you go for alphabetical order?
Pretty much how we run things. The fear I have as an employer isn't what people imagine, where I might get $30k of value but pay $35k so it's a net loss. With devs, especially newbies, I'm worried that having them around is going to take value away from the team and we'd have been better off throwing that $35k salary in the furnace. You can tell a bit from an interview, but unless you have a proven track record I'll need to work with a new jr for at least a few weeks to really know the value they bring. If it's positive, we find ways to keep them on and compensate them appropriately. If it's negative, their probation ends and we're happy we didn't lose any more than we did. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; There's a knee-jerk dislike of fp in PHP, that's ultimately based on a misunderstanding of what FP is. Once you understand one thing the rest is easier. Most PHP devs are just now figuring out OOP. It'll be some years before the mainstream of PHP devs start to buy into FP.
I don't stricly order them, more like "naturally" order the top level on top and bottom level on bottom… Simple example : class HomepageController { public function __invoke() { $posts = $this-&gt;getNormalizedBlogPosts(); return new BlogPostResponse($posts); } private function getNormalizedBlogPosts(): array { $posts = $this-&gt;findBlogPosts(); return $this-&gt;normalize($posts); } private function findBlogPosts(): array { $pdo = // ... return $pdo-&gt;execute(); } private function normalize(array $posts): array { return array_map(function($post) { return [ 'id' =&gt; $post-&gt;getId(), 'content' =&gt; $post-&gt;getContent(), // ... ] }, $posts); } }
How do you mean? Many functional languages are not even strongly typed, e.g., Clojure, Elixir, Scheme.
I don't really see the point of this package, you can do this yourself with just plain PHP objects? With no magic
Is it possible to have nested structures? 
Well, it eliminates some boilerplate. In order to get the type safety you would have to either implement `__set/__get` and setters, or implement the annotation validation. It’s not revolutionary, but what is?
Yes, you're able to type hint DTOs in DTO fields, and are free to construct the DTO in however you want with static constructors. There's no automatic casting from arrays to DTOs. That might be a nice feature. Much more magic though 🤔
Yeah when you use classes for data you have to have a library like immutable.php or laravel collections or any number of other variants instead of the PHP inbuilts for sorting, filtering, reducing mapping etc Letting go of rigid types was difficult for me, I had this idea that I could define a class called User for example and it would have, a id, a name and these hard properties that define what a User is and give me safety, but then I looked into F# domain modelling: https://fsharpforfunandprofit.com/ddd/, (ReasonML\Ocaml were the others) F# makes defining these structures easy, part of DDD is defining the lifecycle of a model, so for example a User might have a anonymous stage, a unverified stage, a verified stage and the problem becomes that you might not have a name or gender or w/e at all of those stages so you need different classes (or records in F#) for each of those, and then some way of grouping them could use an interface in PHP, F# has ADTs which are more powerful but essentially similar in this example.. Once you've done all of that modelling and defined functions for moving a User through the lifecycle (including backwards) you've got a mess of a brittle system that no co-worker is going to want to read, let alone modify That's what happens if you follow the type system to its logical conclusion of knowing all the properties all the time and validating for each one, then converting one class to another to transition the user within the lifecycle Mostly because you wanted to be super explicit about what's going to happen all the time to get that type safety, my general thinking on this is if you use arrays, you get copy by value by default, free usage of all array_* functions natively and your container of data is fairly liberal, you'll still get errors for missing offsets and you'll still have dochints, typehints and names to describe the data inside the array, for additional safety you can validate against the data if you need to, but I quickly found the "safety" my classes were giving me or the assurances were not that substantial, compared to their costs, I'm not willing to pay it nor am I willing to inflict it on co-workers The other thing to consider is that objects say they have certain properties but it's very easy to break that "safety" even if they're "immutable" ```\Closure::call()``` comes to mind or Reflection if you're some kind of animal :D which means if I am consuming a class I have to be very careful, I cannot be certain what it does until I read it all (and it's parents) and everything that happened to the class from instantiation till now This line of thinking where maps are preferred is similar to Clojure: https://www.youtube.com/watch?v=-6BsiVyC1kM https://www.youtube.com/watch?v=rI8tNMsozo0 Racket and Clojure both have systems designed to verify data, for Racket it's contracts, and for Clojure it's specs Those are different ways of getting that safety that we're all after, for me I wouldn't want to wrap beginners up in classes and the associated code that needs to go with it to maintain a basic life cycle, only to find they started mixing behaviour and data together and their code isn't easily re-usable, isn't easy to delete or compose and doesn't work with half the standard library That said I see a lot of people on twitter happy with Laravel Collections, discovering for the first time the power of reduce|map|filter which is a least one step right? So I'm not going to knock anything like immutable.php because it's all a step in the right direction, I learn FP from rambdaJS which I wouldn't class as idiomatic JS either 
I have found certain domains where functional programming shines. For example, I have an HTML emitting library that does context aware escaping and is written in a functional style: $fragment = html\article(['id' =&gt; 123456])( html\h1()("Functional Programming is Sometimes Okay in PHP"), html\p()("For instance, this library is pretty nice.") ); // builds up structure html\render_with_echo($fragment); I also use a library that has variants of `array_map`, `array_filter`, etc, that work with `iterable` that combines nicely with the HTML lib: $table = html\table()( html\thead()( html\tr()( algorithm\map(html\td(), ["Order ID", "Business Purpose", "Order Date"]) ) ), html\tbody( algorithm\map( function ($order_summary) { return html\tr()( algorithm\map(html\td(), $order_summary); ); }, $order_summaries ) ); Excuse any mistakes; I wrote that directly in the browser. Anyway, the point is that it has niches where it shine. If you try and force large swaths of the code into using functional programming it can often make the code worse.
Linux for Windows, I get the best of both worlds (in my opinion!), Linux for setting up Apache, PHP, etc., and Windows for using Photoshop, and personally a better experience with software like Skype.
I **really** dislike the practice of using docblocks this way. Comments as code is really unpleasant. But I love the purpose and execution of the library.
how bout your development tools?
Yeah ramda most definitely is not idiomatic JS. There's also the simple wrapper lodash comes bundled with so you can import `lodash/fp`, which is a similar idea (though I prefer ramda for its stronger adherence to maintaining the same return type as the collection it's run on. lodash is way to quick to turn everything into an array). In your user example, I think if you're strict about defining a good model-system, and use composition over inheritance, you can make a lot of that reusable. e.g. if I have both `User` and `ShopCart` implementing `JsonSerializable`, then I can easily build another class that serializes them both back as easily as returning `[ 'user' =&gt; $user, 'shopCart' =&gt; $shopCart ]`. I worked with Rails for years, and I far prefer keeping model classes immutable, then passing them back to save. It gets really hard to reason about if you can say `$user-&gt;setAddress('123 Sesame St');`, but that doesn't go to the DB until `$user-&gt;save()`. Much simpler when you can pass a newly generated `User` into an arg for a save method. While I don't worry about novices accidentally Reflecting all over my immutables, it's definitely a fear that a framework you pass into might gum it up. I've used reflection a little bit in 5.6, because there weren't better ways to call a `new` with an array of arguments, but spreads in 7 have made that obsolete. Nowadays all I use it for is yoinking the same mysqli connection handle out of WordPress if I am unfortunate enough to need to work on WordPress :) Yeah your conclusion is pretty much 99% of what devs, especially new devs, need to learn. You can learn all about closures, statements vs expressions, etc. slowly over time. Starting to use reduce|map|filter right away, even if the dev can't reason about how `$foo-&gt;map(function ($val) {` is much different from `foreach ($foo as $val) {` except that it builds a new collection (and knows to keep the function free of side effects), that goes a long, long way. They start using those, and they'll learn quickly why and when they're useful.
I work on Windows locally, though the servers are Debian. I use wampserver and switch between PHP 5 and 7 since we have a server still on 5. MySQL. I work in Sublime Text 3 with a couple of plugins. Pretty light. I use git by command line. I use cmder an application for windows that lets me run a bash console. I used Meld for merge comparisons. I should have sublimerge now but conflicts are so rare that I don't recall if I've used it yet or finished setting it up.
This is till woocommerce's fault because it does not cleanup after itself.
Comments are not first class citizens. Doc blocks are first class citizens. Your argument is invalid. 
My argument is that they shouldn't be, because they are a form of comment. Learn to read.
You're missing the point. I don't like how PHP handles docblocks. I think it's poor design of the language.
+1 for wampserver to switch between PHP versions, my team uses it too for changing/using MariaDB 10.2+ Also on Windows, NuSphere as IDE is really a good choice for superior interactive debugging and integrates pretty well with wampserver
Solus as OS and Eclipse as IDE. Git with git-flow for version control
I never said anything as fact. I gave my opinion. Neither Python decorators nor Java annotations share syntax with comments. Docblocks are embedded in comments and are therefor a subset of comments, regardless of how they are separated out by the interpreter. You don't have to like my opinion but it doesn't make it wrong.
Hey, UnusualBear, just a quick heads-up: **therefor** is actually spelled **therefore**. You can remember it by **ends with -fore**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". You're useless. Have a nice day!
delete
I'm really excited for new features allowing us to get rid of poorly implemented features like docblocks. Hopefully eventually you can get rid of them completely. On the topic of the library itself though I'm excited to try using this. I have some regular CSV import scripts that could make good use of it.
VMs or containers on a bunch of physical servers in the same local network. Samba shares. Full SSH access. Every dev VM/container is provisioned with Puppet, exactly like production servers, same OS, same everything. Just a few different env vars and of course different data.
I'm no wp expert or fan, but I was under the impression one can hook into [https://codex.wordpress.org/Function\_Reference/register\_deactivation\_hook](https://codex.wordpress.org/Function_Reference/register_deactivation_hook) (or something similar) for doing cleanup after the plugin is disabled. Wordpress gives you the flexibility, it's up to the plugin developer how it uses that, this is why i believe this isn't really a problem of wordpress but rather woocommerce.
I've extended laravel homestead for our use cases. Vagrant is really nice to work with. Throw docker in it, and off to the races.
Windows 10. Windows Subsystem for Linux ConEmu PhpStorm/IntelliJ/Pycharm with VSCode for other work 
on linux these days I use devilbox, a docker based solution. there is also a great tool named puphpet using puppet and vagrant. i use vim most of the time because i'm typically on many different machines throughout the day, but when i'm at home, i love using vscode with vim bindings.
&gt; PHP has no concept of immutability at the language level, Except for const and final.
Virtualbox / Vim / Nginx / PostgreSQL on Windows 10 atm. 
W10 running docker with a simple script to set up local https - PHPStorm for 99% of code writing - Sublime 3 for some other stuff like log files and other random non/code stuff Arch boot - PHPStorm for coding - CLI tools for anything else
\[Automattic when it comes to anything not related to Gutenberg\]([https://nwlc-ciw49tixgw5lbab.stackpathdns.com/wp-content/uploads/2016/07/jimcarrey.gif](https://nwlc-ciw49tixgw5lbab.stackpathdns.com/wp-content/uploads/2016/07/jimcarrey.gif))
Windows 10 + WSL with a lamp stack + phpstorm. Im doing mostly Magento 2 development. 
I disagree with your message. Syntax is not the reason you shouldn't do FP in PHP. Yes, the syntax is a bit cumbersome, but there are fundamental *semantic* issues with attempting FP in PHP that have nothing to do with ugly syntax.
Well for what's it's worth, when I hire mid level dev's or even sometimes seniors i still get that same level of uncertainty. So many times they say they have skills in areas that they dont. 
&gt; I’ve also created an error formatter which takes the error message from JSON Guard and formats it in a user friendly message using a field’s label and not it’s property name in the data object that’s being validated. Example: if there’s an error with addressLine1 it will say “Address Line 1 cannot be empty” instead of “addressLine1 ...”. This sounds cool. Are you inflecting the property name, using the `title` keyword, or mapping from the property to the label somehow?
AFAIK justinrainbow/json-schema doesn't support Draft 07, while the Opis library does. The maintainer of swagger/json-schema maintains some [benchmarks](https://github.com/swaggest/php-json-schema-bench/) if you want to compare spec compliance and performance.
Which language do you prefer ?
Valet+ for laravel projects, vagrant with other projects. Using macOS, using IntelliJ as IDE
&gt; Plugins must not give edit_users capability and then trust a filter it applies to restrict that capabilty. IMO this was their issue and is the proper solution. Instead of giving out 'edit_users' to shop managers they should use a filter that's the inverse/converse of what they do now. So instead of `disallow_editing_of_admin` it should be `allow_editing_of_customers` which will obviously stop working if the plugin is disabled. So something like (pseudo-code): function allow_editing_of_customers( $capability, $target_user_id ) { // If the current user is a shop manager and // the target user is a customer allow the edit. if( $capability == "edit_user" &amp;&amp; user_is_shopmanager($user_id) &amp;&amp; user_is_customer($target_user_id) ) { return true; } return false; }
I run PHP, Apache, and any other Linux tools/programs on Windows Subsystem for Linux (Ubuntu). I write code with Visual Studio Code on the Windows side. I have PHP installed on Windows as well when I need it for any reason.
You could write without closures and use strings to reference all your functions and still do fp. Hell you could even try fp in SQL, though that would almost certainly be terrible. 
Nice work. I expect I'll be using this. Thanks!
This is a classic example of how horrible WP security in general, with poor architectural decisions like this. Unless a plugin objects, permission is allowed by default... There can be hundreds of ways a particular hook isn't run (deleting the plugin being one example), and Wordpress just grants the permission.
That their argument had no bearing at all, since typing has nothing to do with FP. FP is a paradigm, and while there are languages specifically suited for it, typing isn't what it hinges on. I *think* what they were trying to reference was first-class functions. You can, of course, use \`Closure\`s, but you can also pass around a string reference to a function. e.g. \`MyClass::class . '::someStaticMethod'\` finds its way into a lot of my Slim routes as an easy way to break out my various route handlers into different files that can be autoloaded. A \`Closure\`, an array like \`\[$thing, 'method'\]\`, and a string referencing a method can all be \`callable\`.
Hard to care or have any sympathy for anyone voluntarily using a known insecure platform.
Hard to care or have any sympathy for anyone voluntarily using a known inherently insecure platform.
That's still after giving the edit\_user capability, so how do you figure that will keep working after the plugin is deleted?
From my understanding it won't continue to work and shouldn't. That's essentially the whole point of the issue - that it continues to work after the plugin is disabled. WooCommerce should only be granting elevated user access when it's active, not when it's disabled. So instead of granting all `edit_user` access and limiting based on a filter, they should only be granting based on a filter.
Homestead for a quick and easy vagrant VM with simple vhost configuration, easy shared folders, plenty of runtime options e.g. apache or nginx, which php version etc which can be configured per vhost. Vscode, command line git, ubuntu cause I grew tired of slow or buggy terminal emulators on Windows 
I just use the PHP in-built web server.
A lot of people hating on WordPress... could anyone suggest comparable alternatives for me to look into?
Title suggests that RCE is the consequence of WP's design flaw, but If I understand correctly it's more like... *WooCommerce Arbitrary File Deletion vulnerability can use Wordpress design flaw to escalate privileges* &amp;#x200B;
Are you aware of phpmetrics? [https://www.phpmetrics.org/](https://www.phpmetrics.org/) A sample: [http://www.phpmetrics.org/report/latest/complexity.html](http://www.phpmetrics.org/report/latest/complexity.html)
as another former TYPO3 dev it's a nice CMS but I can confirm it's very thick and its use case is a bit limited because of that. you use TYPO3 for larger multilingual websites, preferrably which have multiple microsites or 'sub' sites. it isn't really suited for everyday blogs for example. but it's so good to develop complicated functionality with, the file management part of the framework is absolutely great for example. 
At my old job (web agency) we used Craft CMS quite a bit. Documentation is a bit on the lacking side IMHO, but it's basically Yii2 with CMS features tacked on top, so Yii docs are your friend, and their Slack is very active and pretty helpful. All our devs liked it quite a lot.
Joomla. Security is actually taken seriously with a dedicated security team. It's also an actual CMS and not a blogging platform with plugins.
octobercms.com 
Linux laptop with: * [devilbox](https://github.com/cytopia/devilbox) * [spacemacs](http://spacemacs.org) The rest are just [simple terminal](https://st.suckless.org/) from suckless and some web browsers to build the UI.
Cool project. I get it. I’m in the process of converting a 30k line Symfony app to Laravel 5.6 and 3/4 of the methods in the old project have array $data passed to them with no logging and no code comments and half of them changes and returns $data. If it weren’t for XDebug I’d definitely be in an insane asylum by now.
Interested in this as well. Especially with seeing so many WAHM's (Work At Home Mum) niche designers calling themselves Developer's when in fact they are only installing WordPress, not doing updates, installing some plugins and themes and pretty much taking work away from real developer's whether they are doing serious WordPress development or custom coded sites. Note: I have nothing against WAHM's, just those that are blatantly ripping off other businesses and not doing due diligence when it comes to security, and touting themselves as something they clearly are not experienced with.
Uhh yeah that's me some years ago. I changed a bit but I'm a kind of freak dude, nobody never expect me lol Thanks for your comment, yes the router is used in public, if you have any suggestions I'll think about it
Yep, it's a nice tool but I my case it's too complex
Because that is for us the most logical way. If you look through a part of the source code (scroll blind), you do know what to expect. Any other sort order can't give you that. For instance, if it is in calling order, you have to know the order of calling, to know if you have to scroll up, or down, if you look for the method "findNext()". So first the public ones, because they are the "frame" of a class, then the privates, because they are the "tools" or "glue". :-) 
MacOS, Docker, PHP 7.2, nginx, PostgreSQL, Beanstalk, Redis, Git. Sometimes I get by without Docker since it has performance problems on MacOS. Docker Sync remedies some of them, but not completely. However, for personal projects it's Docker all the way (I use OpenSUSE Tumbleweed at home). At the moment GitLab CI/CD is used for deployments but I'm looking into other alternatives. IDEs - PhpStorm and DataGrip (while PhpStorm has pretty much the same capabilities, I prefer to use separate tools).
I'm a big fan of [Bolt](https://bolt.cm/). it's simple yet very flexible, and the dev team is really nice (and currently hard at work moving the CMS from a Silex base to Symfony 4.
Thanx for sharing your VSC extensions, picked a few nice ones out of your list :-)
Wordpress the living bug
Allow them to carry on. People who churn out shit ultimately push more money our way in the end as it makes the client appreciate why we charge more.
&gt; There's no automatic casting from arrays to DTOs. That might be a nice feature. Much more magic though 🤔 I think I ran into this on the first attempt to do something useful with your package. For me the #1 use case would be to wrap "api results" and have them immediately validated through the reflect to "know" it's good. And by nature, many API results are Point in case, I'm working with the LinkedIn API and I receive this: ``` array ( '$URN' =&gt; 'urn:li:activity:123456789', 'likesSummary' =&gt; array ( 'likedByCurrentUser' =&gt; true, 'totalLikes' =&gt; 10, ), ) ``` So far I already have two problems: - can't typehint/access `$URN`. No idea what LinkedIn was thinking, but I wouldn't know what property to create to get; and it's essential to work with - I was eager and created a `class LikesSummary extends DataTransferObject` and did typehint on the `likesSummary` public property but I was met with: &gt; Spatie\DataTransferObject\DataTransferObjectError: Invalid type: expected ItemSocialActions::likesSummary to be of type LikesSummary, instead got value `array`. I guess this is what you referred too? In general I really like the approach of you library though I think in reality a few things are missing (like: the inverse, getting the array out of it). A few months ago https://www.reddit.com/r/PHP/comments/8x3vri/introducing_gson_serializer_in_php/ was posted. To me the two are _somewhat_ similar. The other library however had other issues: not so much concerned with type correctness; the author stated: &gt; I don't consider it the role of the serializer to do validation But I had other issues with namespace resolving incorrectly and then lost interest. Also it felt very heavyweight and trying to do serialziation, etc. whereas I like your approach: arrays&lt;&gt;DTO and no one cares whether the arrays where ever serialized before or not.
Correct.
CraftCMS is great! Big companies use it and is very customizable for client needs. Check it out
WordPress is horrible, and the most horrible thing about it is there's no competition left. There are some other CMSes but none come close to the amount of templates, plugins and community support you get with WordPress. As long as you're not planning to make your own plugins or themes, I'd suggest you just don't look at the core, so you don't see all the uglyness. The user interface works great, so stick to that. Just make sure you install each and every update the second it comes out, and only use well-maintained plugins. And don't use pirated plugins.
Pretty cool, although it is too bad that PHP does not have a construct for immutable, typed containers of data. 
I swear, PHP is one of the few languages that constantly adopts the newest versions promptly. Meanwhile, all of my node friends tell me to avoid any update (anywhere, phones, iOS, etc) until the "bugs have been sorted out"
To be fair this is people that are using composer. Many, many sites will be running older versions of php and alot of sites will only use composer in Dev and once released won't regularly update packages. So this is only really, "web developers making new sites tend to use newer versions" With that in mind the number of old versions that are still in there is showing to me.
We're going to add it: https://github.com/spatie/data-transfer-object/issues/29
That's exactly one the cases we're using this in!
I do somewhat agree however this is code that already uses composer, which I am guessing is a small % of PHP code out there. If a codebase is using composer, its more likely they will use later versions as using composer is 'best practice'.
After suffering from brew dependency hell (I had several Apaches, PHP instances, and spent a lot of time to find the correct configuration file), I've just reseted Mac, installed Docker and keep my system in a good condition: everything is isolated, configuration process and version switching is clear and simple (important when working with a lot of projects with a unique environment). IDE: PHPStorm, sometimes VS Code MySQL GUI: Sequel Pro ITerm + OhMyZsh (shows current git branch, that is cool) instead of default terminal &amp;#x200B;
Would be interested in seeing an example of that 
Desktop: Windows Local server: Laragon/WAMP Editor: Sublime Text 3 DB client: HeidiSQL/SQLYog CE CLI: CMDer GIT: GitHub Desktop for Windows :)
* Laragon for super easy local server * PHPStorm as the best PHP IDE out there * Datagrip and some PHPMyAdmin for database work * Git, obviously * WinSCP for when I need to deal with files on the server
``vex`` ``` var_export($VAR$, true) ```
&gt;Yeah, such a vast majority. It's still supported? Whats your point.
My point is that PHP 5.6, the language used to power the majority of all PHP installations, will be unsupported in a few weeks, and I highly doubt any of them are going to upgrade in that time frame. If the PHP community was so prompt about updating, they definitely wouldn't wait for the latest possible moment to do so.
&gt;I swear, PHP is one of the few languages that constantly adopts the newest versions promptly Probably due to the lack of enterprise market share and mostly running small start-ups. When you start looking at languages with a large market share in the enterprise space such as JAVA and C# it's not very often their versions get updated. I worked as a contractor for 6 months in one of the worlds largest corps that had a few C# business-critical apps and it was all in C# v4, we're talking circa 2010. They have no reason to upgrade as 'it works' and don't want to spend anything on upgrading something 'that works'.
Hi, I see you use a response factory to produce default responses when method not allowed or not found. My take on this is exceptions should be thrown instead, because it allows developers using your library to catch them with another middleware to produce any response they want. Here we don't have the choice how to deal with those errors. What are your thoughts about this?
It's overinflated because new projects use composer while projects stuck on PHP 5.5 and earlier usually do not.
It's added now: https://github.com/spatie/data-transfer-object/releases/tag/1.5.0
Try /r/laravel
It isn't. Take the left segment of the table as one separate table.
No, I don't think that's the case. There's a huge disconnect between modern PHP devs and those using Wordpress or other CMS's, or maintaining legacy apps. Pretty much by definition, those using Composer will almost all be in the former category, and those in the latter category won't. The stats from Composer are therefore biased towards modern devs who do update regularly.
Mac is cool if you are a student because Students could get it for free or with a student discount. However, the big leagues are Windows and Linux. Also, if you want or use a powerful machine, then Apple is not giving you enough power, even the almighty Mac Pro is subpar with the most powerful PC of the market (and for the double of the price, sheesh). In my case, I only use a notebook (I am a nomad-developer), and I work in 3d, so I need a beast of a machine, and the most powerful MacBook Pro of the market is really mediocre in raw power, it also lacks of a proper cooling system. So, for me, it is useless for 3d. But, I also program for XCode, so I too own a Macbook and it works fine (it was fine-tuned with more memory and two hard disk, one is SSD). Sadly, the latest Macbook can't be customized, what's a joke!. 
It's been a month since I got my first job out of university, and the company I work for is still using PHP 5.6, and it doesn't look like we'll be making an upgrade any time soon. Should I jump ship as soon as possible?
Here's a simple example: `$unitData = UnitData::fromRequest($unitRequest);`
I'm not sure, it only optimizes the cold startup. However, everything else is already cached. I would prefer to have access to the shared memory.
it's WodrPress arbitrary file deletion, the xss uses the log deletion in wordpress to delete the file, because it passes as file to delete the woocommerce main file where checks are made for rights the and as someone suggested, Woo could just change giving edit rights and filtering with not\_allow\_admin\_edit into disable editing and allowed\_users\_to\_be\_edited. But it's still a issue in wp because you can delete any file when you should not.
Leading php spammers in Bangalore 
Title gore? Proposal has been accepted, nothing else.
&gt; The RFC requires 50%+1 majority. The voting started **2018-11-06** and will close on **2018-11-14** [https://wiki.php.net/rfc/preload#proposed\_voting\_choices](https://wiki.php.net/rfc/preload#proposed_voting_choices)
I wouldn’t call it gore but a bit misleading for sure. Hopefully it’s accepted as this would provide me a nice little speed up in production with zero changes. 
No, not at all. It's basically stateless Java, with the bytecode cache-side instead of having a proper compiling stage. IMHO this is useful only for very stable private platforms so you can do whatever you want with your servers, not for the classic worldwide PHP usage (shared hosts for example). Still nice to have this feature tho.
Yes, the title is a bit misleading and I'm sorry for that, I saw the news on Twitter and thought that it was already accepted. When I saw the voting on php wiki page, it looked like the proposal was already accepted with only 'Yes' votes. But it looks like it will be accepted, though, and that's very nice :)
Amazing! The PHP team has been killing it lately.
Correction: opcode preload is being proposed to PHP7.4, **it has not already been accepted**. &gt; The RFC requires 50%+1 majority. The voting started **2018-11-06** and will close on **2018-11-14** &amp;#x200B; That being said, I'm sorry for the misleading title, got too excited when I heard the news on Twitter and on PHP wiki page I did not see the above line at first. &amp;#x200B; Nevertheless, the voting is going super well with only approval votes so far. &amp;#x200B;
Some months ago I worked for a company who were not using composer at all. They used PHP 5.4 and copied the packages from GitHub. (Also, there are a lot of "download link" in many repositories). I was able to move the code from PHP 5.4 to 7.0 but I wasn't able to make the other devs start using composer :'(
Thanks! Do you have an idea how to support array keys which are not valid class property names, like the mentioned `$URN` above?
Just google "tayrona giveaway" and thank me later.
thanks for thr extensions!
The only thing that connects the code from `woocommerce/includes/admin/class-wc-admin-status.php` and `woocommerce/includes/log-handlers/class-wc-log-handler-file.php` with WP is `wp_unslash()` function, and it solves unrelated problem. Btw. I knew Wordpress (and its plugins apparently) is shitty code when I first (and last) time saw it, but with that quick research part of me just died: function wp_unslash( $value ) { return stripslashes_deep( $value ); } function stripslashes_deep( $value ) { return map_deep( $value, 'stripslashes_from_strings_only' ); } function map_deep( $value, $callback ) { if ( is_array( $value ) ) { foreach ( $value as $index =&gt; $item ) { $value[ $index ] = map_deep( $item, $callback ); } } elseif ( is_object( $value ) ) { $object_vars = get_object_vars( $value ); foreach ( $object_vars as $property_name =&gt; $property_value ) { $value-&gt;$property_name = map_deep( $property_value, $callback ); } } else { $value = call_user_func( $callback, $value ); } return $value; } function stripslashes_from_strings_only( $value ) { return is_string( $value ) ? stripslashes( $value ) : $value; } &amp;#x200B;
so most people here use phpstorm, vscode and VIM
Just commit seppuku. I don't know why we tolerate this low quality type post. Jokes aside this seems like an proposal that was a bit under the radar. I'm looking forward to reading more in-depth.
🤦‍♂️ of course, totally makes sense; works great, thanks! 
Is this really necessary? Won't setting opcache.revalidate_freq = 0 have the same effect (apart from the first request)?
I’ve never met a PHP developer that doesn’t use a Mac. That’s entirely selection bias based on my local perspective. On the other hand, this sub is fairly heavily populated by less experienced developers who haven’t been working long enough to assess different solutions. This isn’t supposed to be a smear, it just takes a long time to settle on a decent environment that your comfortable with (as opposed to the easiest thing to set up). It matters a lot less these days between Docker, VMs/Vagrant, and decent CM solutions. Ultimately your development environment should mirror production as closely as possible, so you can mock services and backend integrations easily. It really depends on whether you’re developing web sites or web applications. You can usually get away with a lot more for a simple website with no external dependencies but a DB. Once you need services like internal APIs, LDAP, mailing, etc you quickly come to need more comprehensive development environments
Out of curiosity, why are you looking to get away from GitLab CD? We’re evaluating it at the moment to replace an old in-house task runner, so I’d love to hear your thoughts
I'm honestly mildly embarrassed to say that I don't fully understand what I am reading here. Can someone explain to me the impact of this?
I use [WireMock](wiremock.org)
Real optimizations tend to be marginal, taken individually. Book together, they make a world of difference.
https://www.getpostman.com/ is pretty decent :)
I am more interested in the underlying changes that enable this to work. This required some work that might also enable core functionality *to be written in PHP instead of C*, which for some things is a huge improvement.
The only change is that a new php.ini directive is added: `opcache.preload`. That directive points to a file and that file prepopulates the opcache so that PHP doesn't have to "compile" all of Zend Framework (which is the example they use) on every page load (as would currently need to be done)
You got a point, difference between servers configurations are minimized with this method. That is one of the reason I tryied to learn more about containers with Docker.
I use GuzzleHttp as client and simply use the `MockHandler` to create the response(s) I want to test. No need for additional dependencies like WireMock. This way I can also test the middlewares, test exception cases; basically everything without having to ever fire a real HTTP request. 
People bitch about the weird functions, their arguments, etc. since like every and then this, we port it to other languages. :-) /SCNR Good job. I guess 🤷‍♀️
Yes it's still a thing. I may run everything I publish on a VPS. My clients, ... all shared hosting. Can't blame them. They want a small business site up, they won't want to run an IT operation with a dedicated admin managing a server. It worked, it works, and it will work. Shared hosting ain't going nowhere. It might transform into other forms of "higher level" managed shared hosting like Squarespace, but it's here to stay in some form regardless.
For unit testing?
That clears it up. I took your first comment as a suggestion that WooCommerce could fix it with a different filter, but I see now you're arguing that it's a core Wordpress issue and it should also deny by default instead.
Yeah it is a thing and will be a thing in foreseeable future. Don’t want your language to be concerned with shared hosting, then you get rid of 80-90% of the users who are using it. It may be a good choice for you, but can’t speak the same for the other developers. 
The functionality is great. But porting the syntax over? Weird choice, lol.
Hej there... i've got a problem with this code: &lt;?php $string = 'Lorem &lt;span&gt;ipsum&lt;/span&gt; dolor sit amet...&lt;br&gt;'; json\_encode(preg\_match("/&lt;span\[\^&gt;\]\*&gt;(.\*?)&lt;\\/span&gt;/", $string, $output)); print\_r(json\_encode($output\[0\])); ?&gt; The result is \`"ipsum&lt;\\/span&gt;"\` ... Why is there always the closing tag in the encoded json string? &amp;#x200B; PS: Why am I not able to post a comment directly with the creation of the post in this subreddit?
It looks to me like there is greediness that is encroaching your desired result. Someone else will be able to explain better than I. However, if you want to capture characters between delimiters, it is important to define what you are looking for correctly and to search and capture what is not an ending delimiter. For example, and to keep this simple, if searching for text delimited between `&gt;` and `&lt;`, you would use something like `&gt;([^&lt;]*)&lt;’ That is to capture everything that is not a `&lt;` following a `&gt;`.
Yup all good thanks for bringing it to my attention!
It's also much easier for *library authors* to adopt new versions than it is for applications. It's a fairly natural thing, and a good thing too: if the libraries that an app uses can't upgrade then the app can't upgrade either.
\&gt; I was able to move the code from PHP 5.4 to 7.0 I think that's a great job. People learn by small steps. How did you do it?
Used tools like php-stan to find deprecations for each version, that, a lot of grep, moving dependencies to composer (as those were copied to the repository). So, it was more than all a matter of time, changing things while working on other tasks and testing if anything break on newer php versions.
Shameless self promotion but we internally use a library I wrote https://github.com/donatj/mock-webserver
I am very disappointed to find that the Strtotime is not an actual compatible version of Strtotime. I have been missing Strtotime like no other. I went so far as to poke the C - not knowing C however I failed to port it.
Helps you use on of the regex sites out there first: https://regex101.com If you use the Ungreedy flag `!&lt;span.*&gt;(.*)&lt;/span&gt;!U`. It's quite specific though. If you don't want to use the "Ungreedy" flag then you're after `!&lt;([^&gt;]+)&gt;([^&lt;]+)&lt;/([^&gt;]+)&gt;!`. This is a little more open but catches first tag set doesn't need to be span.
In the context of routing I do not believe using exceptions is the right approach. Middleware has access to the response and can check the status and modify before returning it. This is a situation where adding exceptions would be using exceptions for flow control and would actually interrupt normal middleware processing.
one thing that some people are getting wrong here IIUC is that it's a level of optimization faster than just Opcache, because it doesn't care about reading files to finish the class hierarchy, plus some other optmizations the RFC is not clear about
Not only is this just people using Composer, but it's probably vastly over-represented by CI test runners. Like many others, I have my CI tool test all of my libraries against all of the supported PHP versions in their composer manifests. That will results in hits to packagist with 7.2 and 7.1 (and some 7.0) but nothing older. In some cases, that means that there will be a "download" on approximately every commit on every branch of the package (quotes because the local package cache complicates the numbers). The numbers are certainly interesting, but are probably a _very_ poor representation of actual PHP installations on webservers in the wild.
If I am understanding correctly: http://php-vcr.github.io/ We configure YAML files that mock the response. VCR intercepts the request when those tests run and return the mock response.
You can't parse [X]HTML with regex. Because HTML can't be parsed by regex. Regex is not a tool that can be used to correctly parse HTML. As I have answered in HTML-and-regex questions here so many times before, the use of regex will not allow you to consume HTML. Regular expressions are a tool that is insufficiently sophisticated to understand the constructs employed by HTML. HTML is not a regular language and hence cannot be parsed by regular expressions. Regex queries are not equipped to break down HTML into its meaningful parts. so many times but it is not getting to me. Even enhanced irregular regular expressions as used by Perl are not up to the task of parsing HTML. You will never make me crack. HTML is a language of sufficient complexity that it cannot be parsed by regular expressions. Even Jon Skeet cannot parse HTML using regular expressions. Every time you attempt to parse HTML with regular expressions, the unholy child weeps the blood of virgins, and Russian hackers pwn your webapp. Parsing HTML with regex summons tainted souls into the realm of the living. HTML and regex go together like love, marriage, and ritual infanticide. The &lt;center&gt; cannot hold it is too late. The force of regex and HTML together in the same conceptual space will destroy your mind like so much watery putty. If you parse HTML with regex you are giving in to Them and their blasphemous ways which doom us all to inhuman toil for the One whose Name cannot be expressed in the Basic Multilingual Plane, he comes. HTML-plus-regexp will liquify the n​erves of the sentient whilst you observe, your psyche withering in the onslaught of horror. Rege̿̔̉x-based HTML parsers are the cancer that is killing StackOverflow it is too late it is too late we cannot be saved the trangession of a chi͡ld ensures regex will consume all living tissue (except for HTML which it cannot, as previously prophesied) dear lord help us how can anyone survive this scourge using regex to parse HTML has doomed humanity to an eternity of dread torture and security holes using regex as a tool to process HTML establishes a breach between this world and the dread realm of c͒ͪo͛ͫrrupt entities (like SGML entities, but more corrupt) a mere glimpse of the world of reg​ex parsers for HTML will ins​tantly transport a programmer's consciousness into a world of ceaseless screaming, he comes, the pestilent slithy regex-infection wil​l devour your HT​ML parser, application and existence for all time like Visual Basic only worse he comes he comes do not fi​ght he com̡e̶s, ̕h̵i​s un̨ho͞ly radiańcé destro҉ying all enli̍̈́̂̈́ghtenment, HTML tags lea͠ki̧n͘g fr̶ǫm ̡yo​͟ur eye͢s̸ ̛l̕ik͏e liq​uid pain, the song of re̸gular exp​ression parsing will exti​nguish the voices of mor​tal man from the sp​here I can see it can you see ̲͚̖͔̙î̩́t̲͎̩̱͔́̋̀ it is beautiful t​he final snuffing of the lie​s of Man ALL IS LOŚ͖̩͇̗̪̏̈́T ALL I​S LOST the pon̷y he comes he c̶̮omes he comes the ich​or permeates all MY FACE MY FACE ᵒh god no NO NOO̼O​O NΘ stop the an​*̶͑̾̾​̅ͫ͏̙̤g͇̫͛͆̾ͫ̑͆l͖͉̗̩̳̟̍ͫͥͨe̠̅s ͎a̧͈͖r̽̾̈́͒͑e n​ot rè̑ͧ̌aͨl̘̝̙̃ͤ͂̾̆ ZA̡͊͠͝LGΌ ISͮ̂҉̯͈͕̹̘̱ TO͇̹̺ͅƝ̴ȳ̳ TH̘Ë͖́̉ ͠P̯͍̭O̚​N̐Y̡ H̸̡̪̯ͨ͊̽̅̾̎Ȩ̬̩̾͛ͪ̈́̀́͘ ̶̧̨̱̹̭̯ͧ̾ͬC̷̙̲̝͖ͭ̏ͥͮ͟Oͮ͏̮̪̝͍M̲̖͊̒ͪͩͬ̚̚͜Ȇ̴̟̟͙̞ͩ͌͝S̨̥̫͎̭ͯ̿̔̀ͅ https://stackoverflow.com/a/1732454/508666
Why the downvotes ?
From what I've understood of the RFC, opcache data still needs to be copied from shared memory to process memory. The preloaded cache would not have this overhead.
Right I didn't think about using the response status. Pretty nice. Then, how would you deal with exceptions producing 500 responses? Let's say the request handler matched by the router try to connect to a database and something goes wrong. Would you directly produce a response from the request handler or would you use a catch-all middleware in this case?
IMO the RFC is not very clear on this. It does not explain the actual preloading process too well. How would you even load something into the "request memory" before an actual request exists. The cache must be in shared initially either way
I thought Dmitry and Zeev are quitting Zend. But apparently they plan to deliver great stuff until the very last day.
Really? The OPcache is only populated for a specific code path? What exactly does that mean? Is this "code path" file based, function based, etc?
What I meant is that certain code paths will change what files are loaded during a single request. I.e. different routes will load different controllers, which have different dependencies, etc. I did not mean to imply anything within a single file (if vs else, for example) - Opcache definitely does *not* work that way! Preloading every file ahead of time makes this a non-issue. Traditionally, you’ll be loading more and more files into Opcache over time as various requests need them. Each of those new requests is slower than it otherwise would be. Hopefully I explained it better this time!
I know HTML and CSS. I started reading about Wordpress, but now I'm more interested in learning PHP, so I can make wacky things instead of blogs. I have some programming experience... from Hypercard and Commodore 64 BASIC, so I understand some things. Can anyone recommend a setup of PHP and MySQL for a Windows 7 computer? Thanks!
As someone learning Go, I was really just hoping it would tell me all the equivalents/alternatives
If you can upgrade to windows 10, you can use the Ubuntu windows layer... But php and iis is fine, you can install php from the web platform installer built into iis and it works fine. I personally avoid windows as most companies are going to run php servers on Linux, but I have supported a windows iis php setup for a client for over a decade and you learn to work around the quirks. 
I stopped building brochure sites in WP. It sucks at that too. I do them all in Squarespace now. My clients love them, I can build them super fast, and they never go down. If someone needs something more sophisticated I use Laravel + Nova. I might try Statamic though.
Me too. 
Or use laragon, the wamp but with all included done for you by default (wamp + test domains + https + 1 click laravel/wordpress/symfony install + auto db create + redis + mailcatcher + ...). All with 0 config to do.
Says something about the php community that I didn't immediately think you were kidding
I'd recommend downloading something like VMWare Player (free) or VirtualBox (free) and importing an .ova file from here: [https://bitnami.com/stack/lamp/virtual-machine](https://bitnami.com/stack/lamp/virtual-machine) The versions listed (e.g LAMP 5.6.38-2) corresponds with the version of PHP included. You should use PHP 7.1 or higher, the older versions are out of date, or close to be. This all depends if your computer can do virtualisation, in most cases newer computers can.
You guys are all trying to make this way to complicated.
I honestly can't even... how will Zend's owner EVER get so much free exposure and validation towards their commercial products, if they f\*\*\* up their sponsorship of PHP? It's literally the cheapest way to get their name out there and automatically make their stuff *better* because it's "the official PHP company". Not to mention the negative PR of supporting PHP and then *abandoning it*, while continuing to profit from PHP-related products.
I also recently started learning PHP. In the beginning I mostly watched youtube tutorials. [This](https://www.youtube.com/watch?v=qVU3V0A05k8&amp;list=PL0eyrZgxdwhwBToawjm9faF1ixePexft-) is a pretty good playlist on PHP basics. After that I watched some videos from TraversyMedia (also on Youtube). Now I use Laracasts. I'm on Windows 10 myself and use xampp, haven't had any problems with it. Both mmtuts and [TraversyMedia](https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA) videos explain how to set it up. I also started learning WordPress and quickly decided to try PHP so I could make better WP sites. Now that I know the basics of PHP I've started learning Laravel and you can do so much with it, it's so much fun that I've forgotten about WordPress to be honest. 
I believe the change happened because Zend came under new ownership that wasn't interested in sponsoring the development of PHP. Presumably the new owner has other plans.
&gt;seppuku You misspelled sudoku
Funny little trick you can do is abuse the splat operator for a semblance of this; `public function makeList(int ...$item) {}`
Yeah, I should have worded it better. If you're writing in PHP as a means to live or hobby, you should have adopted Composer. If you adopted composer, there is a chance that you're utilizing the newest version oh PHP, and are excited about it. That is not said about a shitload of JS developers, or pretty much any other language, that I know. And trust me, I know a lot about them boys - they can't seem to talk enough about themselves. LOL
Yeah, I meant to say this, thanks for clearing it up. It's 2018, I don't consider any legacy PHP developers as PHP developers. To me, they are just dudes who know how to make something cool online.
Been there, done that. Wasn't speaking in terms of corporations. Shit, I've seen companies hire teams of people who specialized in expired versions of languages or frameworks just to support their billion dollar systems. That being said, those are companies - I was talking strictly developers, like us.
Dude, I've extended my PHP development to millions of users and millions of dollars. It was only until I absolutely had to use composer that I switched over (yeah I'm the contrary to my own comments on this thread about adoption). Once I finally adopted that bitch - she's my main hoe. That being said, I 100% agree and believe that the other devs pushed back super hard on using composer or any other "php mods" lol
But the people actually developing such software (like Wordpress) should be held responsible to force their users to upgrade to secure PHP versions, instead of leaving well over half of the internet vulnerable. If Wordpress said that minimum PHP version for their next release is 7.2 or 7.3, your generic shared host would have no choice but to upgrade.
True, but if they did so, they'd be alienating a majority of their user base. "Programmers" who know how to install wordpress and add a theme. They'd also be ruining theme markets, and a ton of other industries built around their platforms. It's just politics - they know what to do. They could make it happen, but they never will.. Bottom line rules everything.
$zip = new ZipArchive; if ($zip-&gt;open("path-to-zip-file.'.zip', ZipArchive::CREATE) === TRUE) { // Add files to the zip file $zip-&gt;addFile("path-to-file-adding-to-zip"); } Zip should be included in your package if you're running version 5.6.0 or later. It should really be that easy.
WAMP is probably harder than installing a LAMP on digitalocean or any other hosting company. Just get a $5 a month server, ssh into it, use sublime or atom and have at it. Make sure you're familiar with how to "google for things" and you'll be just fine. It's a widely supported language with tons of documentation.
I do know a much better link, php.net/zip No ads, not blocking banners, no shit. 
I haven't used it yet but I'd go with: https://flysystem.thephpleague.com/docs/adapter/zip-archive/
You start five years ago.
Let me know if you need a breakdown, I can help with that. Basically, the "if" line is either seeing if it exists or creating the zip file, and the $zip-&gt;addFile line is adding X files to the archive. If you want to add more files, just repeat that line, just make sure you do it before the "}" line.
&gt;Shit, I've seen companies hire teams of people who specialized in expired versions of languages or frameworks Yeah I'm getting many downvotes for a factually correct comment but this exactly. They actually advertised for C# v4 experience and they had no plans to change otherwise. The majority of people on old versions of PHP are purely small businesses or individuals who have installed Wordpress. Start-ups and small businesses (like I'm at currently) have the ability and are flexible enough to make the upgrades to newer versions that larger businesses simply won't invest in.
&gt;You guys are all trying to make this way to complicated. Help him out then, the comment adds nothing for the OP.
Probably in 5 years. I want it to initialize once vs on each refresh - can I get an Amen!
I like using XAMPP on my windows at home. It's pretty simple to use. You don't have to worry about what the other comments say about linux, packages, distributions and so on. Start with the basics, learn the syntax, get into OOP, try to build your own stuff, before going into frameworks. There are million of tutorials out there. Good luck!
Where the hell did those downvotes come from? I swear a few hours ago they weren't there... LOL wow, crazy...... PHP is like every "startup's" language. Wordpress + fancy clothes and smooth talking = "I'm an entrepreneur with a startup". That's probably where all the downvotes are coming from. The "startup" php "developers". It's funny because, I've had startups funded. I've been on TV and had investments and even sold companies to investment groups. I'm a normal looking dude, probably more like a "bro" than the public's description of a developer. That being said, the one thing I know for sure is, you can't tell the "startups" what they are doing wrong or dispute the bullshit they spew from shit they've read in some ebook. tl:dr your downvotes are probably from wannabes. 
Still waiting for PHP 5.7.
We shouldn't add anything for the OP, as he is too lazy to google this simple question. This subreddit is being populated by "I want to learn PHP what do" kind of stuff daily, I don't think this is a good thing tbh.
http://news.php.net/php.internals/102415
Thanks for your advice.
Guys, its over, lets be real
Right now we only have information regarding the 7.3 release date [https://wiki.php.net/todo/php73](https://wiki.php.net/todo/php73) There is some discussion regarding if the next version will be 7.4 or 8. 
How somebody could learn php better starting with laragon instead of the php built-in http server? Is just a development server, you don't have to care about config files and those stuff's, there is any "unconnected" island, you're using a web server. The abstract concept is there
&gt;We shouldn't add anything for the OP, as he is too lazy to google this simple question. This subreddit is being populated by "I want to learn PHP what do" kind of stuff daily, I don't think this is a good thing tbh. I agree completely with you about the sub turning into mostly posts like that. However, this comment was a response to the other responses without adding any depth or quality to the thread, pretty pointless addition and somehow it got top rank. If the other replies are too complicated then explain why and what the alternative is that he thinks isn't too complicated. If he replied to OP saying see /r/phphelp then understandable but the reply just seems pointless.
Perhaps what would be 7.5, they would've made a decision by now to make next year's release 8.0
5.7? Are you mad? Never gonna happen. You should be waiting for 6.0 instead
Well we once thought Trump would not be possible..
Because when someone says they want to learn php, it usually means they want to make websites/web stuff. Not php only. The db is needed real fast. Node for js stuff comes quick too. Cleaner urls are wanted. Etc. Few people would ask to learn php without a web context. It can do general stuff. Beginers don't learn it for that. You think one has to start small game and build his way up the complexity scale. True for some, wrong for others, at least when said complexity is nicely abstracted/hidden where you don't need to think about it at first. If everything works out of the box and you don't have to fix broken stuff, composer/symfony on your first project ever is doable. I put a few friends in web dev that way. Why start without the current best practices and methodologies if you can ? Because you would drown in a sea of dependencies to install, binaries to configures, etc. ? Not with something like Laragon. One doesn't have to redo the full history of the last 20 years of php dev, from the unprepared mysql calls in between the html, to `include 'functions.php`, to a single front controller, to laravel/symfony level of abstraction. It's even a bit heartbreaking if any time you learn something it's not good enough yet. Start right away with the badly named MVC, OOP, etc.
Does Composer team has any plans implementing this as an optimized autoloader if/when this feature gets added into PHP? I think it's going to be fantastic caching the whole vendor folder since it rarely changes. Or should we rely on ourselves to preload whatever we want? Are there any talks about this? The helper function in the RFC doesn't seem too hard to implement on an application level but I still wonder if we could have Composer to enforce best practices once again. 
Testing the API endpoints is really a functional test of the app. As such, I would mock third party services such as databases, caches, whatever. The better you structure your code the easier it will be to stablish these boundaries beyond which stuff is mocked.
I use a Mac now because I was given a choice of Windows or Mac when I started, but I've used Ubuntu professionally for most of my career.
I use Lando if I need a proper dev server. For Laravel and Lumen projects I often don't need one, however.
Are you really replying to my comment?. I never said any of the things you're arguing about.
In submit.php, the pop code in the beginning may not work without &lt;?php
`&lt;form method="post" enctype="multipart/form-data"&gt;` you don't have action, so when you submit, will be redirected to same file where you have only html code for submit form. `submit.php` you missed &lt;?php start tag at top of file. Also `for($col = 'A'; $col != $lastcol; $col++){` how do you increment $col if is a char/string?
My clients use HTTPlug, and I test them with PHPSpec. I mock the response received from HTTPlug.
Do *NOT* use mysql, it's depreciated - Use mysqli or PDO instead. Why are you using @ before including the PHPExcel.php file? You should rather deal with the error than asking PHP to ignore it.
If i don't misunderstand what you are saying, what you want is probably going to be released with PHP 7.4, see [here] (https://talks.php.net/phpce18#/php74_preload) and [here] (https://wiki.php.net/rfc/preload)
Don't feel discouraged...I have years of experience and get nervous when someone looks at my code. But this is how you become a better coder 
Php-vcr records real responses, so you can't set your own responses. If you need to handle some unexpected API response which can't be triggered normally, you can't really do it in php-vcr.
Does it work?
Yes
&gt; how do you increment $col if is a char/string? Very easily?
On a related note. What would be the optimal way to pipe variables from php to the javascript file? echoing them in the php file in script tags?
I just tried it, it doesn't. On [this](https://github.com/d-inquisitor/import_list/blob/master/submit.php#L2) line you are including a file that doesn't exist in repo.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [d-inquisitor/import_list/.../**submit.php#L2** (master → bcd01e6)](https://github.com/d-inquisitor/import_list/blob/bcd01e6b65c578f7a9273d343ef5148a647b4a9a/submit.php#L2) ---- 
The worst offenders of mixing PHP/HTML/JS in the same file will just not have JS includes and have the JS code be right in the same file and pop the data right in using PHP. Something horrible like &lt;script&gt;var string = '&lt;?php echo $string ?&gt;';&lt;/script&gt;. Have a dozen of those scattered throughout a file and you will be driven to insanity. If you're able to use something like Knockout.js then you can just generate an array of data you need in PHP, json_encode it and then pass it into the knockout initialization. Knockout then has it and you can pass the data around in JS all you want. I'm not sure if there is a standard 'best way' to do it. I personally try to use a lot of AJAX calls, which gets you the data directly into JS. 
You should probably stop doing this type of unguided learning at this point in your learning/career. Frankly there are a lot of very bad habbits here and you are using an outdated style of coding. What I would do is start by learning a framework. Laravel is wonderfully documented and you will find a ton of guided learning at places like laracasts.com. You also might choose symfony, laravel uses shortcuts that some developers don't agree with or don't fit their use case. Symfony is a bit more sparse, and I think has less (but still a vast amount) learning to go along with it. Either would be a good choice. But learn on those. Learn about MVC and why organizing code and not using package management is bad. Once you are comfortable with those concepts, and you've got the basics of what composer is, what's an autoloader, what is caching, how to properly bootstrap a database, etc.. Once you have an understanding (no need to be an expert), go ahead and start from scratch or something like symfony components, and go ahead and start writing a cms from scratch. You'll have a better understanding of what you need to improve on and what you already understand. Knowing what you don't know is a chunk of the battle.
What are you doing in this subreddit lmao
I come from the land of JS, to revisit my old stomping grounds
That's the way I prefer to do it. Ajax calls based off a session identifier.
I was going to write a pretty mean message, but your reply is 100% better.
Just a few things I can instantly see &amp;#x200B; \- You're pulling in 3rd party libraries, why not use composer to handle this autoloading? \- PHPExcel is deprecated, use [https://github.com/PHPOffice/PhpSpreadsheet](https://github.com/PHPOffice/PhpSpreadsheet) \- mysql\_query is deprecated, use mysqli or PDO \- You can use \`range('A', 'Z')\` to create an array of letters
PHPExcel is deprecated too. The new version is called PhpSpreadsheet.
Please, full utf8 support and strict option for switch statements and I'll be all happy
Alright, I'll be blunt. This is some shitty fucking code.
If you use functions to iterate your array you can type hint the collection when its iterated: ``` function multiply(array $numbers) { $points = array_map(function (int $point) : int { return $point * $point; }, $points); return $points; } ```
[https://www.google.com/search?q=php+8](https://www.google.com/search?q=php+8)
I will checkout and test it. What is your contact when I want to discuss?
Esanibukun@gmail.com
I have used this and can definitely recommend it. Flysystem provides an intuitive API that is consistent no matter where your files live – in the cloud, local, in a zip, etc. I prefer to use the Zip Adapter for managing zip files, since I'm already using Flysystem to manage other files. However, it might be a little bit overkill if all you are doing is some basic zip functionality.
As others have said, read some books and learn modern programming. And learn to think that, if you've just written a line such as $letters = \['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'\]; there \*has\* to be a better way. One that is shorter, more elegant, and less prone to errors. Because there are 2 errors in that list of letters. &amp;#x200B; &amp;#x200B;
compared to what? 5.6?
Intensive how? What resources is it using that you think are too much?
 Time to hire a sysadmin imo. your questions indicate a significant lack of experience in this area, rough times ahead.
While PHPStorm has some features but you can extend it with this plugins https://plugins.jetbrains.com/plugin/9927-deep-assoc-completion It's for free. 
CPU usage is up to 100, each request is sometimes using 75%+
opcache is enabled and logs are all set to E\_ALL. Maybe there is just too many sites on the server and not liking PHP 7 FPM
Yup: `range('A', 'Z');`
Human hate changes :(
You should try profiling it. Blackfire, Tideways, and/or New Relic would help pinpoint the PHP code causing the high resource usage.
Array &lt;- that's a type Array&lt;Int&gt; &lt;- that's higher order type, it's a type that accept a type before it can be a thing &amp;#x200B; PHP have only support for first order types. Higher orders will require parametric polymorphism (aka generics in Java or templates in C++)
Company has used Plesk for years and it's just how we have used it. Ease of use. Bottleneck seems to be CPU, everything else is fine, memory, disk space. &amp;#x200B;
How many users are you serving at your peak?
Yeah, that's definitely not PHP 7's fault. It's either a misconfiguration or some seriously bad code.
What is your question?
Well, your code could just as well rely on "functions" only because of autoloading too, which basically registering autoloaders do - they are callbacks, or interceptors. Object orientation is a way for large libraries to have easier and more maintainable code. There are packages out there that only come with functions, even like you said namespace functions. On top of my head there are plenty of wrapper libs for php to normalize function calls etc, such as https://github.com/nkkollaw/zubr/ That said, I don't exactly get what you're asking.
This is a java cult.
A few corrections if you let me. Mysql is not deprecated it is completely [**removed** from the language](http://php.net/manual/en/function.mysql-query.php) several years ago. [It's a common misconception](https://phpdelusions.net/top#mysqli_vs_pdo) to recommend mysqli for a learner. They would either mechanically use it *the same way as old mysql functions* which will do them no good whatsoever, or struggle with most basic operations like fetching a row as an array from a prepared statement. If you want to do them a favor, recommend PDO for its [simple and consistent API](https://phpdelusions.net/pdo_examples/select#prepare)
You can share your ideas here : [https://php-vote.com/](https://php-vote.com/)
What you want is php streams with zip: [https://stackoverflow.com/questions/3078266/zip-stream-in-php](https://stackoverflow.com/questions/3078266/zip-stream-in-php)
I'll take a stab at this. &amp;#x200B; Simply put, functions do a worse job of encapsulation and organization than classes do. Functions also tend to be very specific in their function, where objects can utilize inheritance and composition to become more flexible in how they act in a codebase. It is much easier to extend the functionality of a class than a function, since class extensions can still reference the parent while the function can't. For example: class HtmlWriter { function write($text) { return "&lt;p&gt;$text&lt;/p&gt;"; } } class BootstrapHtmlWriter extends HtmlWriter{ function write($text) { $html = parent::write($text); return "&lt;div class='row'&gt;$html&lt;/div&gt;"; } } class Renderer { public function construct(HtmlWriter $writer) { $this-&gt;writer = $writer; } public function render() { print $this-&gt;writer-&gt;write('Hello World'); } } Here we can easily switch the logic of how we want our `Renderer` to output by swapping out the class, and we can do that when we create the Renderer. This allows us to use `BootstrapHtmlWriter` versus someone else using the base `HtmlWriter`, or someone creating something like `MaterialHtmlWriter` or `FoundationHtmlWriter` for their own project. Compare that to a similar functional setup: function writeHtml($text) { return "&lt;p&gt;$text&lt;/p&gt;"; } function writeBootstrap($text) { $html = writeHtml($text); return "&lt;div class='row'&gt;$html&lt;/div&gt;"; } function render($text) { print writeHtml($text); } This code looks pretty similiar, but now we're hard-coded our dependency of the `render()` function to our `writeHtml()`. If we want to override this, we need to either completely redeclare `render` in a new namespace using `writeBootstrap()` under the hood, or we have to edit the source directly, or have two `render` functions. Why two functions? We may want plain HTML in some parts of our app, and Bootstrapped-HTML in others. And down the line we might need a Plain Text version, or a JSON version. Is that two more functions? Functions aren't inherently bad when they are small, single-use bits of logic. I think it's safe to say that, especially in larger applications, it quickly becomes apparently that for code flexibility having a class system makes it easier to extend code. I agree with your assessment that "using classes just for namespaces" is a bad idea, you should be using classes for code encapsulation, extension, and separation of concerns, all of which can happen in even the smallest program.
This. And companies like heroku and amazon offer free tier stuff too.
 function render($text, $renderer) PHP supports first-class functions nicely.
Classes *are* a way of namespacing functions
Well done for achieving your first github project. Something small &amp; simple like this is ideal to get you into the swing of using PHP. Your next steps would be to try and get your project and skills up to date with the latest version of PHP and it's components. Have a go at using PDO instead of mysql_ for your database calls, and PHPExcel has been rewritten to the new PHPSpreadsheet (it has a very similar API). Then, just keep building stuff. Think of a feature? make it, don't know how? figure it out. Keep going with that cycle and you will learn web development with PHP.
This is totally valid. But what is `$renderer` supposed to be? Is it supposed to be a function that's passed in and invoked? Is it a class? We're losing some code visibility here depending on what `$renderer` is intended to be. If `$renderer` can be both (or something else even), our code becomes more complex. `render()` how has to check to see what `$renderer` is and act appropriately. Without type hinting (which could be used on a bare function) we have to handle more ways the code needs to be handled. And if `$renderer` is supposed to be a class, why even have the function? From a code architecture standpoint, it doesn't seem to make sense. Again, my point isn't that functions are necessarily bad. You need to look at _what_ the function is doing, and _how_ it's being used, and see if it's appropriate. Falling into the trap of "everything must be an object" or "everything must be a function" results in the same inflexibility as "everything must have an interface" and "code inheritance is bad." Each paradigm has it's place, you just have to use the correct paradigm for the problem.
Your 1st example was pretty much a perfect opportunity to use a decorator.
The typehint you're looking for is `callable`. That being said, I generally agree with you.
Contrive examples are contrived :P I would still use class-based decorators myself, especially because you can then enforce stricter type-hinting. 
does anyone from internals actually check that?
There are a few good ones mixed in, I upvoted them.
It's literally the #1 asked for request. They're working on it but it's actually a significant change. 
Code is not like a book, code can be sorted any way you want, and as a human I prefer to know approximately where I can look. I sometimes yank my mousewheel and it end somewhere in the middle. I don't have to know the code from my colleague to know where the method is where I'm looking for. Sorting it on the way it was used, is much more work, since each time a piece of code is added, the author has to maintain that "logic". For me, automatic sorting is the way, since everybody here knows where to look for, withour ever thinking to maintain that order. (call us lazy)
Go have a look at [Clojure](https://clojure.org) 
You can namespace functions, no need for classes for doing auto-loading. Classes are here when you need some form of polymorphism. The real issue is PHP type system. You can't declare functions as type AFAIK. you can't write (pseudo code) function map($array array,$mapper function(T):T):array{} or something like that.
I used to read so many oreilly books when I was young, what a great publisher.
removed !== depreciated 
https://laragon.org/
I was not too lazy to google it. I googled and found this: [https://www.investigatii.md/uploads/resurse/php-the-right-way-06-21-2013.pdf](https://www.investigatii.md/uploads/resurse/php-the-right-way-06-21-2013.pdf) and it seems to be a tutorial but it's not, it assumes you already know PHP. So I posted a very specific question indicating what background I had, because we all know that it's not one-size-fits-all, everyone starts off at a different level of prior knowledge. So if you're going to add unproductive comments instead of just downvoting, then you are more of a problem than I am.
I am learning Wordpress and the disconnected snippets of PHP are annoying me. I want to get a bigger picture of PHP. I have ZERO interest in blogging. I am trying to learn Wordpress purely so that I can get jobs at companies doing their website - many of them use Wordpress. PHP seems interesting to me, so if I can use it at a job too, all the better. I don't like disconnected little pieces, I'd like to get an overview of PHP and learn more of it.
Tell that to the clowns who have a corporate website designed with Wordpress
For all who still don't get it: The OP, allegedly, DID NOT have a problem with 5.6 mod_php setup, they got the problem after switching to PHP7 php-fpm. So preaching about horrors of mod_php and wonders of php-fpm in general is slightly irrelevant to the topic. 
what is your php-fpm config? how many sites do you have? what is the estimated traffic for all sites? 
 echo json_encode($pdo-&gt;query("SELECT * FROM TABLE")-&gt;fetchAll(PDO::FETCH_ASSOC)); 
Through a thorough and complete learning of why you probably wouldn’t do that in the first place?
A catch all middleware, or a global exception handler, to handle exceptions that for *cough* exceptional situations.
Painful
very informative. I didn't know if you're answered.
Why do you want to do that?
[API Platform](https://api-platform.com/)
True! But it depends entirely on the PHP version he's running, so I'd rather say depreciated than removed in this care.
I like the last bugfix. ...processing never fails. I've fixed it so it can fail!
Oh crap, I'm sorry I forgot answering: I was busy with SSL (and a bunch of complications) and then I forgot. By the time I reinstalled everything and everything but OPCACHE works. I am using Raspbian 4.14.71+. I only have /etc/php/7.0 and configured ./apache2/php.ini. I wish you are still here and would like to help me.
This. 
Please check the sidebar for r/PHP rules #4.
THIS plus a custom RESTful API (for whatever you want that to mean). Easy enough to implement on your own.
Sounds like a person who is afraid to be strict about anything. And that's simply terrible, of no use to oneself and anybody else.
So much this! Use docker and a config file parser that lets you set and override default values (e.g. with a config.format and a config.format.dist with the defaults). Docker-composer is very nice and easy to learn. 
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required). You may also join us on at #phpmentoring on Freenode IRC for community and mentoring discussions.
Yes you can, you can edit the YAML to change the response. It can be anything, valid, null response, invalid XML, invalid JSON, whatever..
Didn't know you could do all that. Can you do full integration testing with this type of setup though or is it more unit tests?
Not sure about release date. Biggest planned things include major deprecations and removals of obsolete features and the addition of JIT and FFI.
You can but you are not really supposed to do that. Those files are generated from real responses. If you edit it, it no longer matches. It's not built for this. Also goodbye if you need any logic, like callbacks - you can't write that in yaml
Can you more specific? Everytime someone tells me the difference between integration and unit tests, it's different 😀 They are not integration test in a sense they need a HTTP server. However their unit isn't very small either...
React/Angular doesn't live on the same side of the network. You seem confused.
To some people it does. Not me, but some other people.
Why be rude ?
Why would you use a plate over a bowl/rake/leaf blower? PHP and Node.js can be compared, but react and angular are both front end frameworks that serve different purposes than PHP/Node.
React and Angular are front-end libraries/frameworks, respectively, meant to take care of how HTML/JavaScript behaves in the user's browser. PHP is a server-side language which can communicate with front-end JavaScript. Node.js is a runtime environment that allows you to run JavaScript on the server-side, so the real question is Node.js vs PHP. From there it's a matter of personal preference/experience. 
it can be used as a backend as well though.
I use both. PHP as API server, and React as the front end. - PHP is a server side language - Node.js is the engine to execute javascript codes - React is a javascript library to render dom elements - Angular is a full stack javascript framework to build a full front end web app. They couldn't really be compared to be honest. They coexist in the whole stack of application. It's (almost) like saying would you use C++ over Windows/Facebook/WhatsApp? (Sorry for the weak comparison but you get the meaning)
I think you're confused. Node can be used as a backend, react and angular can't. They both can be compiled to native code using other tools, but neither can be used as a backend.
Body of the post is here: Guys hi, I wander what's the best way to measure site speed for real user visits? (not talking about test tools like gtmetrix, etc) I need to record the value in milliseconds that takes to load the page (i guess from time of request to dom or document ready) Than i will pass it to GTM/GA. Passing value is not problem, just wonder what is the best way to measure the value itself.
Why is it rude? It's an unusual and backward question that indicates a misunderstanding of server-side versus client-side web stacks and I have indicated my understanding of a likely misunderstanding.
GA has standard reports for site load time under \`Behaviour -&gt; Site Speed\`
When RogueWave bought out ZendCorp, I was all over /r/php warning people that it would just lead to the death of PHP or at least of them stopping the funding of PHP development. You guys, esp one admin, really got on me. I'm pretty sure /u/zeev himself said I was fear-mongering. Well! I'm very sorry to say that I was proven right! Unfortunately, however, our once-savior HHVM (whom inspired PHP7, strict types, return types, etc.) has all but abandoned the PHP spec. Now what? Do we just hope we still have a job programming in PHP in 10 years? Because now I'm not as optimistic as I was in September.
It's *shocking* just how few PHP devs even know about docker! Hell! Just look at all the idiots who still use *Vagrant*! Holy cow!
At SumfonyCon Cluj 2017 I made a joke prediction of September 2021, a year on, I think that'll be damned close. We'll get 7.4 next November, From there we *could* see 8.0 in Nov 2020, but with Dmitry's situation changed, I think he'll end up slowed down a little and we'll get 7.5 in Nov 2020, then 8.0 in Nov 2021. We'll likely see some kind of JIT, might see async/await.
Honestly I think Google metrics are the industry standard., regardless of their accuracy. When people talk about page load time, bounce rates, etc the general assumption are these numbers are coming from GA.
Check out how the API Platform does it with Behat (and PhpUnit) + https://api-platform.com/docs/distribution/testing + https://github.com/api-platform/demo/tree/master/api/features 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [api-platform/demo/.../**features** (master → 47f4da9)](https://github.com/api-platform/demo/tree/47f4da92a2a978c69f5833895f4ce7289c802f78/api/features) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e9c0mvt.)
I use this site: https://www.webpagetest.org/
i use this site for testing too :) that's the best one (it provides video recordings so you can see perceived speed as well). However in this post i am talking about measuring &amp; recording load speed not for my test visits but for real visits of real visitors. &amp;#x200B;
Or both.
You can use something like AppDynamics which will connect all of the backend and front end data. It’s not cheap, though. 
Yep, Rasmus Lerdorf
I am building a time travel machine right now
Does it run on PHP?
Better use PHP 7 then.
It sure feels like 24 years.
I’ve been a PHP developer since 1996...
You have only 22 years of experience, we need 24 years experienced developer 😂😂😂
I mean, I’ve seen it for other languages, but nothing that ridiculous. They want to hire a wizard?
Damn, well I was doing Lingo &amp; WebObjects (Java) for 3 years before - that count? 
I am planning to use it to stop the invention of js.
Ohh sorry, Misunderstood :P
We’re just looking for a super high standard right now, I’m sorry. You really only have 22 years of experience? 
I am just wondering how years of experience determine the quality of code.
I suspect this ad was posted by rasmus lerdorf
And how old is their candidate age max should be? Max 35 years old?
requires a masters in comp sci. heck that. if I had a masters I sure as hell wouldnt be writing php.. 
I'd like to hear it from a veteran. Curlies on the same line or curlies on their own line?
Master's and 20 years of PHP. Use the language that makes sense. C++, Asm, .NET, js, minizinc, PHP, whatever. I find PHP has it's place.
Better prevent HTML. It only went downhill since then.
Depends on the person's willingness to keep up with the technologies. A dev who still can't part with their php4 habits is the last thing you need in your team.
I am afraid that the number of js frameworks might exceed the population of humans.To save humanity I had to make strong decisions.
&gt; Simply put, functions do a worse job of encapsulation and organization than classes do I disagree with this. It's much easier to make a function pure (and thus fully encapsulated) than to make a class "pure". You have to work a lot harder to ensure your classes are not allowing leaks to their encapsulation rules, or are not carrying around unwanted state. The most reliable OO code I write these days is effectively stateless OO code, with the exception of simple value objects containing and encapsulating their own state. But any code that "acts upon" other code (e.g. service classes), I keep as bundles of pure, or otherwise stateless, functions. Could literally just be a shitload of static methods on static classes, which means they could in fact just be a bunch of plain old functions. &gt; Functions also tend to be very specific in their function, where objects can utilize inheritance and composition to become more flexible in how they act in a codebase There are many, many functional programming equivalencies to traditional OO patterns that increase flexibility. Partial application, currying, higher order functions (this is the same as composition), etc etc. Same goals, different approaches. But you know what? Functions that are very specific in their function is a damn good thing. The best, most stable, most easy-to-reason-about code I write is when I focus on writing pure, simple functions with very specific purposes. I *could* build an elaborate scheme of curryable functions, and partial application, and what not. Just like I could build an elaborate scheme of inheritance, composition, polymorphism etc. But I choose not to because 9 times out of 10 it's either not needed, or it makes the code more indirect and thus harder to reason about, and thus harder to fix bugs in. IMO, the strength of OO, especially in a nominally typed language like PHP, is how a class is able to describe a concept in your domain very succinctly and in concrete terms. I see a `User` or a function that takes a `User`, or a service that has a dependency on a `FooFactory`, or some interface, and I automatically *know* what it is I'm dealing with. There is some code that serves some purpose in my domain, and it has a name. This makes codebases *super* easy to reason about, *as long as you don't go off the deep end with your abstractions*. All of the actual OO features themselves are "meh". It's the ability to describe a domain concept as a named *thing* in your code that makes it shine. 
So the concerns about performance hits in frameworks are valid, despite opinions you don't need to care about performance because come on, you don't really need it for most projects.
Doesn't it described in PSR?
Can you just fix 'this' keyword scoping? k thx.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
And twice that working with MariaDB!
Laragon and Notepad is all you need.
I have encountered a problem while unit testing the guzzle promises. How do you guys tackle the problem of not being able to test the callbacks and the logic that is added on the callbacks that you pass to the promise. Here is the link to the problem in stackoverflow : &amp;#x200B; [https://stackoverflow.com/questions/53211474/unit-testing-guzzle-http-promises-callbacks](https://stackoverflow.com/questions/53211474/unit-testing-guzzle-http-promises-callbacks) &amp;#x200B; &amp;#x200B;
Damn... Just putting a 1 into the square brackets was the solution!!! Now I can extract the data out of the XML files... My problem is the the SimpleXML class could not do the work because the exported XML contains unsupported characters :-(
Yeah that site is awesome... Found it during my research about RegEx... 
Excuse me, but this is Reddit. You're supposed to shit on PHP every chance you get! We don't want none of that "reasoning" here.
My thoughts exactly... But it would be funny if someone not in IT would put that there...
Well yes, but I’m also a bit `&amp;shy;`.
gtmetrix
/r/PHP is not a help sub. Please use /r/PHPhelp/ for inquiries.
School (18) + BS CompSci (3) + PHP (24) = 45. PHP was first released in 94 so basically if I'd started working with PHP at 16 (and never stopped) I'd be eligible today. They're asking for someone from a pool of a few thousand people max, none of whom would take this job.. 
&gt;WAMP is probably harder than installing a LAMP on digitalocean or any other hosting company. 1 click install vs having to have basic server admin skills? It's a million times easier to set up wamp than a server, if you're new to this. Managing a server with no linux/server experience is a scary thing that a lot of people forget. Then you've got the price - adding even a small price to anything is a barrier to entry. I use DO too, but for a novice user I'd recommend WAMP/Laragon every time. Plenty of time later to learn server management later (if you even need it, with all the places offering GitHub deployment). Why focus on anything other than the language at the start?
What are you talking about? UTF-8 support was the main thing for PHP6 and we're on PHP7. UTF-8 is clearly in the past. /s
yeah I think it's a typo but I have seen adverts for things like "5 years experience" in technologies that are only 3 or 4 years old.
Few thousand? That’s a lot. I guess 10 to 30
H1b trap
Can't upvote this enougth xD
[removed]
Did you do over time? Otherwise you need not apply. :D
Refer them to Rasmus Lerdorf, he \*almost\* has the requisite experience
What problems do you have with “this”-scoping?
If you have a big framework (like Symfony or Laravel) or even deploy with a stateless container like Docker, you could basically preoload your whole app. That is awesome!
either that, or they switched from months to years and didn't change the number... &amp;#x200B; If someone actually worked with php for 24 years, that would be the only requirement needed. that guy would tell them what they need. 
Well fuck. I'm only at 23 years. I hope the job is still available next year!
Well, don't know if Rasmus Lerdorf would want to apply this job.
Wouldn't this just work (from memory:)? copy( 'input-file.dat', 'compress.zlib://output-archive.zip'); &amp;#x200B;
The classic 5 years of experience with Swift
It's a typo but do you know what is funny?. When people fake their CV with obvious forgery information. I bet that some candidates will write 24 years of experience. For example, I saw a CV about SharePoint 2010, one of the candidates said "experience, 10 years!".
Haven't we all
https://ospanel.io
Yep [https://twitter.com/PHPVote/status/1026385894054522880](https://twitter.com/PHPVote/status/1026385894054522880)
&gt; CPU usage is up to 100, each request is sometimes using 75%+ Try using Xdebug's profiler on some requests, then open the callgraph it produces in, say, kcachegrind or qcachegrind and see what's taking up the time.
So they are trying to hire Rasmus Lerdorf.
So they don't want anyone with 5+ years of experience?
I think it is very valuable. Even if you want to do it all yourself, it is a nice set of "this is how we do it" kind of library. (and 4 me: very usable)
I would love an option to deselect some rules.
Maybe they are targeting Siemens Triplets? 24 years for the group, 8 years each?
You would be surprised. I know ppl with 15 years experience that are really not good. We call it 15 years of 2 years experience.
Wrong question. Who would even endure PHP for 24 years?
tldr; everyone uses composer for package management and you can do return types. 
I know! Anti PHP folks often point to Python as a better language but after JavaScript, it has the worst OOP features of any language I know. Its array functions have the parameter order consistent though! /s
WTF ... is this real??? Who wants 24 fucking years experience with any language? That HR department has issues.
Does anything [here](https://www.librarything.com/search.php?search=PHP&amp;searchtype=newwork_titles&amp;searchtype=newwork_titles&amp;sortchoice=0) jog your memory?
If your code relies on classes simply for auroloadigf, then something is wrong with your OO design. In a good object oriented system, classs and objects communicate with each other properly. Classes shouldn’t be used as simple collections of functions, It defeats the purpose of OOP. Objects contain both data and behaviors, while methods of an object act on the data to provide encapsulated behaviors that client coders do not need to concern themselves with. 
They might have discovered a Y2K bug in some rarely used, but critical, legacy code?
Modern PHP is mostly about frameworks so you better start learning one https://symfonycasts.com/
When you want an EXACT replacement for the guy who retired....
Specifically, you can check this (completely free) screencast about Symfony 4: [https://symfonycasts.com/screencast/symfony](https://symfonycasts.com/screencast/symfony)
You probably have a never ending loop. Please debug your code, because there's a for/foreach that keeps running and in this way your server is running out of memory/cpu.
Thanks, i never knew this approach before
Not what your looking for but oldest one I could find in my dusty book pile was this JS book, copyright 2001 http://imgur.com/gallery/J4q6XpN
I just plucked the name Julie C Meloni from the depths of my memory. She wrote a book on PHP and SQL in the late 90s/early 00s that helped launch my career as a PHP developer. Turns out she wrote [a lot of books](https://www.amazon.co.uk/Julie-C.-Meloni/e/B001IOF7KU) on PHP. 
 I don’t need to tell you that following PHP programming practices from 20 years ago would be downright dangerous, do I Oh hell no. I want to read it to see if it's where I picked up some nasty habits... 
Pretty sure I landed a college internship based on having a small HTML page hosted on my university's student hosting server.
Do you still have the CD-ROM?
Was it a big red book?
Or 24 months
&gt; There where places were being able to spell "HTML" was enough to get you hired! During the dotcom days of absurdity, the company I went to work at hired a couple of HTML people, starting at $40K (USD) a year. One of these 40k-ers sat behind me and one afternoon started yelling "YES! YES! YES! I AM SO AWESOME. I AM THE MAAAAAASSSSTER!!! WOOOOHOOO!" We went to look to see and were like "Oh. You got an extremely simple HTML table with 4 columns and 5 rows to render. Congrats. Good job...." That was $40,000 well spent. Can't imagine how that company blew threw $26,000,000 of seed money in less than a year
No
&gt;Optimize your scripts for Internet Explorer 5.5 and Netscape Navigator 6 Getting PTSD flashbacks now...
Your code is so bad now, you just don't know it yet. (same for everyone, including myself)
Code is like a interlinked game book :) &gt; Sorting it on the way it was used, is much more work, since each time a piece of code is added, the author has to maintain that "logic". For me, automatic sorting is the way, since everybody here knows where to look for, withour ever thinking to maintain that order. (call us lazy) That's my point in the origin post. Thinking about this is waste of time. Automated wins!
It's the best part of the profession :)
Wow, grep? I admire your skills. Could you share them? I wonder how they look like. &amp;#x200B; I use AST instant upgrades of PHP 5.4 to 7.2: [https://www.tomasvotruba.cz/blog/2018/11/08/fatal-error-uncaught-error-operator-not-supported-for-strings-in/](https://www.tomasvotruba.cz/blog/2018/11/08/fatal-error-uncaught-error-operator-not-supported-for-strings-in/)
Assuming that wasn't the first edition, I'm sure this is it - I remember the surfer on the cover. That description says up to PHP 4, which wasn't out yet when I started, but otherwise HELL YES. 
Tables? No frames and blink tags?
I have four PHP books on my shelf. I keep this one around because it was my first. It came out in 1999 or 2000, and it covers some light SQL as well. https://i.imgur.com/VONNzup.jpg I love having these physical books that sortof show off my progression over the years. It's a little sad that I've found more convenience in digital books lately.
So, if I have a method that performs some logic, then makes an http call to some api, and process that data and returns something. I can fully test the method with VCR. Since that is just intercepting the request and giving a canned response. Can you do the same with MockHandlers or do you have to work around it a bit?
I try to buy hard copies of digital books I've first found useful, just to have it on my shelf. Some are crappy quality due to the nature of self-publishing, but I still like having them.
I have that book!
That stuff was left to the senior webmasters ;-)
Using available php internal methods and throwing exceptions is a good start. Adding return/argument types is even better. IE: **function** doThingWithArray($data) { **if** (!\\is\_array($data)) { **throw new** \\Exception('Data provided is not an array'); } **if** (!\\array\_key\_exists('key', $data)) { **throw new** \\Exception('Missing \`key\` in data'); } // code } **function** doThingWithObject($object) { **if** (!$object **instanceof** MyClass) { **throw new** \\Exception(\\sprintf('Class %s is not an instance of %s', \\get\_class($object), MyClass::**class**)); } // code } **function** doThingWithInteger($int) { **if** (!\\is\_int($int)) { **throw new** \\Exception('Value provided is not an integer'); } // code } **function** doThingWithArgumentAndReturnType(int $int): int { // code }
Symfony has a validator component: [https://symfony.com/doc/current/components/validator.html](https://symfony.com/doc/current/components/validator.html)
Long story short they have critical code running PHP 1
I think you mean Siamese. Siemens build industrial robots and i don’t think AI has gotten to PHP development yet.
Yeh, the hyphen on their keyboard is broken.
&lt;?php $ip_a = '127.0.0.14'; $ip_b = '42.42'; if (filter_var($ip_a, FILTER_VALIDATE_IP)) { echo "IP address '$ip_a' is considered valid."; } if (filter_var($ip_b, FILTER_VALIDATE_IP)) { echo "IP address '$ip_b' is considered valid."; } ?&gt;
I learned from https://www.amazon.com/Beginning-PHP4-Programmer-Wankyu-Choi-ebook/dp/B000VZW34A/ which allowed me to write shit code for many years. I thumbed my nose at other programming languages because PHP was the best and global variables make everything so easy! I was surprised when I picked it up a few years ago to see a section on OOP, because I didn't remember it at all, but then I saw that the authors pretty quickly dismiss it as not being the PHP way. 
Agree on google metrics being standard, but they not always the right tools to for decision making: [https://www.blastam.com/blog/problem-with-site-speed-accuracy-in-google-analytics](https://www.blastam.com/blog/problem-with-site-speed-accuracy-in-google-analytics)
Maybe will be useful for you, here article why google Site Speed is not best tool for decision making: [https://www.blastam.com/blog/problem-with-site-speed-accuracy-in-google-analytics](https://www.blastam.com/blog/problem-with-site-speed-accuracy-in-google-analytics)
Also: https://github.com/beberlei/assert
\`trans\` =&gt; \`'$var'|trans$END$\`
At work every developer has a local nginx + mariadb setup on their (pretty powerful) work-issues laptops, all using Fedora (linux), and we all use phpstorm as our IDE. For my own personal projects that I don't plan to sink much time into, I run WAMP on my win10 desktop and use atom.
I add that on the todo list. Thanks.
Scrolling, blinking, rainbow coloured marquee.
Darn spell check combined with fat fingers. Bad combination. You are right. Thanks
&gt; If your code rely on classes only because of autoloading then something is terribly wrong. 1. That's overly dramatic 2. Even if true, the language supports autoloading of classes and not functions. That's a fact you have to deal with one way or another. And sure, one way of dealing with that is to just ignore it; it's not a *big* issue. &gt; What happened to functions better yet to namespaced functions ? As you encountered in the discussion on your [other thread](https://www.reddit.com/r/PHP/comments/9p7zqd/leagueperiod_400_is_out/) a lot of people view uses static methods on classes as the most idiomatic way of solving that problem in PHP. You (clearly) disagree, and you made some valid points in that thread, but what's going on here isn't exactly a mystery. Clearly you can do this in multiple ways, clearly one of the ways is more common, and clearly some people dislike libraries that do it in one of the less common ways, which is (surprise!) a pattern we see constantly in every programming community. Not really sure what you're looking for here.
 1. * &gt;!!&lt;
Or how about we let this ancient framework die in peace? There's so many bad practices packed in there, that's not something I'd want absolute beginners to start with. &amp;#x200B;
They're busy rewriting it from scratch, thankfully.
Hey this framework helped me to understand Php (self taught) after struggling for the last year and a half a week with codeigniter and their very handy user guide which kind of just put everything into perspective for me. (unlike some clunky undocumented frameworks) that I shall not name. Codeigniter is lightweight and does what it needs to do, no complaints from this side 👍
CI is certainly ancient, and 95% of the time these days when I need a framework I reach for Laravel or Symphony, but I wouldn't dismiss CI completely and glad to see it's getting an update. CI has the advantage of extreme simplicity of design and ease of deployment, and if you're just after something minimal - for instance a one-page app with an api, CI still has something to recommend it. 
i'd choose micro frameworks for that. slum, silex, lumen on top mind
Yes, that's a good argument and probably *technically* the correct one. My reservation about those though is they come and go somewhat - even more so than the bigger frameworks. CI though has been around (what seems like) forever, has good documentation, and probably still isn't going to go away for a while yet. If I'm building aforesaid but expect it to be around for a while when I come back to amend in 5 years time there's a good chance that CI will still be in existence, whereas we'll be a couple of generations on with whatever is the current micro-framework of choice.
CI is not a micro framework, and just the fact that it has been around for a while doesn't automatically make it \_good\_, it makes it - at best - \_familiar\_. Software development isn't a static field, so any framework that \_is\_ automagically gets outdated.
IF you mean user provided variables then I use the builtin PHP functions like `is_array()` and `is_string()`. Sometimes I put them in a utility. 
Agree. I see pretty good web apps written in Codeigniter at codecanyon for example, and they're more than OK. Let's stop using Apache just because is "old"....
Interesting, I was looking at Slack PHP libraries the other day and found them all to be lacking, will check this out
Or explain that you can take up CPU with an enough long standing for loop, not a problem of file_get_contents
No, but it does come with a guarantee that you're building on a good base, and if you're setting up your code *properly*, as modern frameworks enable and promote, it doesn't really matter if framework x is still around in a couple of years, since you can take your domain code and move that to framework y without too much hassle.
Because it's not possible to check it at runtime. And unlike Hack (facebook version of php) it doesn't lie about how it works. Because hack doesn't check for typed arrays either, although you receive the type hinting.
Presumably it would load only the parts that you really use? Frameworks can be quite large.
I'm a beginner, new to coding in general please can you elaborate on some of the bad practices that are present in the current CI framework and what framework would you recommend based on your experience? Thank you. 
For those wondering how can this work with javascript disabled, please take a look at "sample.html" in project 2.01. CrxCmp itself can be used server side on a JS server, but it is not necessary, nor difficult to use any other server. As a matter of fact, two of the projects that make up CrxCmp were developed in PHP originally, and continue to be so, and code is then imported to javascript "1 to 1", possible because of CrxOop.
This is a great advice! I always code for PHP 7.2 nowadays and typehints help me not to write tons of boilerplate. That said, configure your exception handler to accept `\Throwable` type, because exceptions of \TypeError are not subclasses of `\Exception`, but `\Error`. You should have granular validation for user inoit, but an exception handler like this can help as a last line of defense. 
But for me, I never understood it. Sticked with Core PHP. Now, learning Node :)
According to the map, in a 200-mile radius of me, that contains about 20 million people, there are 0 PHP groups. And from my experience, that's about right. There's a Perl group that meets a few miles from my house, though.
That's sad. You should start one. Or check from framework groups -- Laravel, Symfony, Drupal, Wordpress etc. There are a few near me that don't mention PHP but those.
There's one Wordpress group about 45 minutes away that I've gone to a few times but it's a bit of a hassle to get to. I'd be interested in a Symfony one, as I'm trying to make that my framework-of-choice, but I've never met anyone in person who uses it, outside of Drupal 8.
I like your username, and the article. very nice. Will try to implement in my next project
Maybe it exists a library that does this task but, (it is my personal opinion) most libraries are too bloated (they have external dependencies). So, I created a small library for the validation: https://github.com/EFTEC/ValidationOne For example, validating an input value ($_GET["id"]), ```php $val=new ValidationOne(); $r = $val-&gt;def('ERROR') // on error, $R="ERROR" -&gt;type('integer') // the value must be integeer -&gt;condition("eq", "It's not equals to 10", 10) // THE VALUE MUST BE 10 -&gt;condition("eq", "It's not equals to 30 (info)", 30, 'info') // THE VALUE MUST BE 30 -&gt;ifFailThenDefault() // IF FAIL THEN SET THE DEFAULT VALUE ("ERROR") -&gt;get('id'); // FETCH THE ID VALUE ``` However, while validation is somewhat trivial, but capturing the validation is not. Validation is not always as simple as to throw an exception. Sometimes its required to show a message (on an error, warning and such) for each element of for the whole group. Shows messages as an array: ```php var_dump($val-&gt;messagelist-&gt;allArray()) ``` So Validation works together with a message container. Validating an object is the same than validating each field separately. 
Um, this is fantastic. Thanks!
Doesn't work in Microsoft Edge :( https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/6263825-server-sent-events-eventsource https://developer.mozilla.org/en-US/docs/Web/API/EventSource#Browser_compatibility
It's amazing to me how it feels like it's been ages that people have been complaining about Internet Explorer slugging behind other browsers with regard to feature support, and yet Microsoft still can't get it together. What's keeping them from shipping regular updates to Edge like other vendors do?
Because it uses sampling? Well most of GA is based on sampling if you have any significant amount of users. Or because it shows the average? That's also pretty obvious you need to break it down by page if you don't want the average. If you really don't want to use GA (even though I can't see why), then just use the navigation timing API I posted above. 
TBH a PHP group probably just meets up to share wifi and post on /r/php or php internals.
PR the 1024th of the list :D
I mean… if you google "PHP user groups" the first result is: https://php.ug/
Works with a polyfill though: https://github.com/Yaffle/EventSource (Load eventsource.min.js before the other scripts)
5.6 is a lot better than 5.2
There isn't one
phpmyadmin is just an application to manage MySQL databases. You will need some basic entity relation database background to be able to use MySQL. Short answer is yes.
Yes
PhpMyAdmin is a GUI for your MySQL server only. Any website that needs to use the database will reqire it's own access to it.
It's actually for a job but I was told I only needed to know some basic PHP/HTML. But considering the eventual usage of the site, I think having a database would be the best decision. Otherwise all the data the site would be collecting like usernames/passwords/form data/etc. would just pile up on the PC the server is running on, correct?
I use it to learn from skilled friends. Thanks to my first PHP group I learned about composer and how to use it on Windows in 15 minutes (that was ages ago). In second I learned all I wanted from Symfony in 3 months. I could never know so much and so we'll without them. Also it's the best place to get safe and useful feedback. My skills very really lame before I learned to ask for feedback 
I tried to use that, but its very limited, not fully open -sourced, slow - 6 second to see any events - and buggy (see my post in phpug slack). This small page sums up my expectations - usable, simple, working, map, only location I need, not the whole world. It was one of places to inspire thought. I never new that meetup.com is so full of PHP meetups before
Oh jeeze. Yeah you need some where to store data. MySQL or Postgrese would be fine open source options. You mention passwords so that scares me since you're new. As far as those go look into bcrypt storage in your DB. Definitely do not store passwords plain text. 
PDO
Basically I was hired to make an existing site look better. Come to find out, none of the site's features worked and the whole thing was just built with a website creator, so the code was god awful trying to read. So I had to just start from scratch. Thanks for the tip though, i'll look into that
The internet is already stuffed with such information...
 I started self taught procedural php. I started reading a few php books ( can't remember, this was a decade ago). I found the initial learning phase hard, like "what the heck is $this?" OOP isn't related to a certain language, you can use it in many others applications. Once my brain finally got a grip on OOP, it was easy. I'm now a lead developer, and when I'm working with the other people in my team, you really can't under estimate the value of planning. I still often start drawing out my models and controllers (MVC pattern). This way you can see all their properties, how they interact. Until you can train your brain to visualise all this, start drawing it out. I personally recommended a white board. I spent hours in my early days working on a white board before ever starting to code. In fact I got my current employer to paint an entire wall in whiteboard paint so as a team we can rapidly brainstorm ideas. Spend the time to master these principles, you can pick up a programming language quick, but getting a deep understanding of how to leverage OOP will make you a very attractive hire when you start looking for jobs.
I'd consider if there's some kind of prebuilt solution you can use, this sounds like a really simple outcome that could be achieved with configuration of a solution without any coding.
mysql is a database server. phpmyadmin is a mysql client. So yes, you need some basic knowledge of mysql. PHP is not forced to use mysql, you could also use many other databases like nosql (file based database) mongo db etc.. but personally I would start with learning about mysql. Where I work we are using mysql only together with php.
For the meantime i'm considering ignoring the login feature for now altogether, and just trying to figure out how to manipulate the PHP form data and create a report without needing a database. Maybe using sessions? 
Certainly true, and don't get me wrong, I'm not disagreeing with you at all from a technical pov, but I've been in the situation on (a lot) more than one occasion and forwards compatibility at minimal cost is an important consideration from a business stance. If you've built a system for a client in say, PHP X.x on platform A, then 5 years later PHP X.x isn't supported on the new server they want to upgrade too and there's no version of framework A that supports your new PHP you're screwed. The client is not going to be happy when you go along and say he's got to spend $ paying you to move his application to new framework B - you will be accused of having given bad advise previously and no amount of technical babble will get you out of that perception, no matter how valid and correct your reason is. Believe me, with many business clients explaining that you were right to build on A 5 years ago and they just have to pay now to rebuild on B because of reasons will get you shown the door. Unfairly from your pov because you were correct, but it's the door anyway. I'd rather compromise a little over being at the technical cutting edge when I build, even if that is the 100% 'correct' thing to do. A good enough solution is preferable if I can be assured it's going to be around for a long time to come. That's why my goto network is currently Laravel, and in the past has been CI. 
Hmm, i'll look into that
I'd say my primary influences were: * I was taught OOP in high school * I had an OOP course in college * a few of Bob Martin's lessons on Youtube * reading Go's and Rust's standard library code (PHP's standard library is an epitome of bad design and Java's standard library is too fat)
asking this myself.. I see all the people traveling the world just to be in one of these group conference... spending thousands of dollars every year for tickets flights and hotels... They are not really learning something revolutionary new... and the best conferences are recorded anyway for everyone to watch for free.
I think we absolutely agree here. The average customer is not going to understand the need to actively maintain software, which is why it's part of our job as programmers to educate them about that. Be honest up front that a solution is going to work for a while and that at some point in the future, it's going to be outdated and/or in need of some work to keep it running. &amp;#x200B; It's the same with cars, you don't expect to buy a car and not do any maintenance on it and then expect it to keep going for a decade - it \_will\_ need maintenance, and in software it's even worse - there's so much change continuously going on, that even a couple of years is a long, long time.
I'm a third year uni student with 1.5 years of part-time work experience. I've always used OOP. I think of it like real objects, as the name suggest. I think of what the object name should be, and then what I should be able to do with it. I love MVC, so i think of my models like this: I have a product? I want to be able to set the price, set an image, get available options, etc... Controller methods act like "buttons" on a control panel. Each controller is a different "panel" on the table in front of me.
I would certainly not recommend that OP take advice from someone who thinks OOP is garbage at this point in his career. I'm sure other programming paradigms have their time and place, but the next step up from procedural code is definitely OOP. Also BTW it's not garbage. I mean it clearly and obviously isn't.
Well if you know a little bit about OOP then maybe reading _Head First Design Patterns_ can help. It was an eye opener for me. It goes into SOLID, design patterns and more. Only downside is that it's about Java, but the exact same principles apply to PHP.
I moved to oop learning Java in 2001 and it's still a great language to learn oop because it forces you to use it. PHP has feature wise almost caught up to Java 1.4 released in 2002. Since 15 years ago the world had changed and I think the consensus is that oop definitely had its place, but it has been overused in the past making a lot of Frameworks released during oop's prime bulky and difficult to use. For example in node a http Middleware ist simply a function, while in PHP a committee has to come together for many years and come up with a genius MiddlewareInterface that perhaps 3% of PHP middlewares actually implement. That's why I'd recommend learning functional programming first before oop and take it with a grain of salt.
The switch to OOP from procedural was probably one of the hardest mental hurdles that I have faced. I'm not particularly sure why, other than years of habit having to be overwritten. Read, read, read. Go through tutorials for building simple sites (todos, blogs, etc) in symfony, laravel, slim. Do it over and over and over. Eventually your mind will start associating the things in a more OOP manner. From there you can continue to learn and improve the way you implement and apply it. 
I think he, as anybody, should learn it and then learn ora drawbacks. There is no reason to ignore well thought out points just because they go against the flow. Yes, to work anywhere and use 99% of frameworks and technology OPP should be well understood and practiced, but having an idea of what can be some problems can help
With modern PHP everything can be type hinted except associative arrays and callable signatures. &amp;#x200B; For non-associative arrays, use variadic functions. The spat operator can always be used to pass arguments as array when calling. The only drawback is there must be only one typed array as it must be the last parameter of the method. I still not came across a situation it could be a problem, probably because I would think code looks weird when a method needs many arrays as argument: &lt;?php class SomeClass { private $strs; public function __construct(string ...$strs) { $this-&gt;strs = $strs; } } new SomeClass(...['str1', 'str2']); Unfortunately it is not possible for associative arrays. I made a class reproducing the built in argument `TypeError` message with associative array: [https://github.com/quantaphp/exceptions/blob/master/src/ArrayArgumentTypeErrorMessage.php](https://github.com/quantaphp/exceptions/blob/master/src/ArrayArgumentTypeErrorMessage.php). It looks the same as a regular argument `TypeError` message except it adds information about the key of the first wrongly type value. Also, I always throw from the method being called so the exception trace is not confusing: &lt;?php use Quanta\Exceptions\ArrayArgumentTypeErrorMessage; final class SomeClass { private $strs; public function __construct(array $strs) { if (! $this-&gt;areAllStrings($strs)) { throw new \InvalidArgumentException( (string) ArrayArgumentTypeErrorMessage(1, 'string', $strs) ); } // ... } public function with(array $strs): SomeClass { if (! $this-&gt;areAllStrings($strs)) { throw new \InvalidArgumentException( (string) ArrayArgumentTypeErrorMessage(1, 'string', $strs) ); } // ... } private areAllStrings(array $strs): bool { return count($strs) == array_filter('is_string', $strs); } } // Would throw an InvalidArgumentException with message: // Argument 1 passed to SomeClass::__construct must be an array of string values, object given // for key 'key2', called in {the_file} on line {the_line} new SomeClass(['key1' =&gt; 'str1', 'key2' =&gt; new stdClass]); It is harder for callables. I usually use callables to let the user easily define some custom logic. For this situation I made another class reproducing the built in return value `TypeError` message: [https://github.com/quantaphp/exceptions/blob/master/src/ReturnTypeErrorMessage.php](https://github.com/quantaphp/exceptions/blob/master/src/ReturnTypeErrorMessage.php): &lt;?php use Quanta\Exceptions\ReturnTypeErrorMessage; final class SomeClass { private $resolver; public function __construct(callable $resolver) { $this-&gt;resolver = $resolver; } public function __invoke($value): SomeInterface { $resolved = ($this-&gt;resolver)($value); try { return $resolved; } // Use a nice error message instead the ugly original one. catch (\TypeError $e) { throw new \UnexpectedValueException( (string) ReturnTypeErrorMessage('resolving callable', SomeInterface::class, $resolved) ); } } } $resolver = new SomeClass(function () { return 1; }); // Would throw an UnexpectedValueException with message: // Return value of resolving callable must implement interface SomeInterface, int returned $resolver('value'); I still not have a solution when a callable parameters are wrongly typed. It would involve reflection on the callable when failing. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [quantaphp/exceptions/.../**ArrayArgumentTypeErrorMessage.php** (master → 9305190)](https://github.com/quantaphp/exceptions/blob/9305190cdd4cc75bfa8bce240236947d4f523207/src/ArrayArgumentTypeErrorMessage.php) * [quantaphp/exceptions/.../**ReturnTypeErrorMessage.php** (master → 9305190)](https://github.com/quantaphp/exceptions/blob/9305190cdd4cc75bfa8bce240236947d4f523207/src/ReturnTypeErrorMessage.php) ---- 
I'd strongly consider seeing if there is something prebuilt you can use. I'm not a WordPress expert, but I'm almost certain what you are doing can be done with Wordpress. Doing what you want with PHP/MySQL isn't hard but there are nuances that can be dangerous for a first-timer. 
And I am trying to move from OOP to procedure. Studied Java first and now coding Python.
yes and not only sql but probably some pdo or sqli i pdo i like it better and i think it looks neater i always wrap the code in a try and catch block to so if you are doing searches you are gonna still have to bind the query but as a value. sql is really the language that is most important you probably can't get into AI without sql for example. definitely not data science.
I didn’t use OOP in PHP on all projects except Laravel, it’s only it start to make sense when I learn Crystal programming because it has concise syntax and OOP make it useful for writing cleaner code: https://crystal-lang.org/docs/syntax_and_semantics/everything_is_an_object.html Even complex as this https://github.com/crystal-community/crystal-patterns/blob/master/README.md
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [crystal-community/crystal-patterns/.../**README.md** (master → 349f906)](https://github.com/crystal-community/crystal-patterns/blob/349f9065a178be125c78c6edc64639f5aab049b3/README.md) ---- 
Crystal is awesome. I would switch to it in a heartbeat if it was more popular (I've yet to see a job ad where it was a requirement).
For me it was programming my own framework for sites I made. The first version was 100% procedural, with many files of functions which were loaded based on the users clicks and echoed everything out from within the functions. I was sure that OOP is not really useful and my method was superior. Though ran into troubles when I wanted to edit some part of the site like the title or menu from within my functions. I worked through exactly one tutorial that taught me the MVC (model view controller) principle and since then I never went back and had much easier times editing and making a solid code structure for later edits
PHP has no generics. Better create a plain old PHP object. Create a DTO with setters and getters or a Value Object (immutable) for small things like a Email address or a CustomerId etc. Within you data object you can use array for a list of values of course.
Upstate NY. Even though it doesn't show on the linked map, there are probably some in NYC and Boston (both of which are less than 200 miles away)... but none in the Albany, NY area which is closer to me.
Don’t do this, yeeeaaarrrss ago I wrote a Div class that wrote an html div element. It was fun because I had to figure out attributes and content, and nesting divs. It eventually lead to classes for all tags
I'm not familiar with WP actually, is it like a website creator? I already have my html/CSS written how I like it and wouldn't want that to change
You just got to start doing it. Make mistakes, feel lost, get frustrated, work through it. 
Wordpress is a content management system. It is templatized so you can easily change the design of the website. You'll have to rearrange things a bit (things like the header and footer need to be split out into seperate files) but you can make your own template using your own HTML and CSS. The benefits would be that it completely would handle login for you. The form and database storage could be done through a plugin like Gravity Forms. I dont know if there are better ones than Gravity Forms, but i know that one is pretty popu i'll and works well. I'd assume there are two factor plugins too but dont have much experience with that. The benefit of using something prebuilt is that you dont have to worry about security as much. Someone inexperienced rolling their own login and database stuff can lead to things like SQL injection vulnerablities which are easy for a new person to simply be unaware of due to inexperience.
I think that you should have an understanding of structs in C, just the concept not how they are used but why they are used, that's how I got used to it as we were first taught C then C++ and though it was really hard to understand and grasp the concepts but you'll get it eventually, * Understand structs * Think classes = structs + steroids then understand other concepts.
I built a dumb turn based game in PHP. I had a warrior class, an enemy class, and I passed those into a game class. It was just form driven. I posted it online and asked people for feedback on how to improve it. That was probably 10 or more years ago, but it gave me a starting point.
The Head First series is so good.
Yeah I wanted to do things from the ground up for the experience, but it sounds like I could be in over my head. I think it'd probably be better to get it built with that first, then afterwards teach myself how to do it at my own pace. Thanks, that's super helpful
Given the visual nature of Flash objects are easy to grok. Here you have a sprite, it has properties(alpha) and methods (rotate). The flash API wasn't actually that bad design wise, they got a lot of things right. Flash has always been a fantastic tool to learn programming, it's was the modern LOGO. It's demise is stupid. It could have been a killer for mobile apps or games, but Adobe stopped investing in Air. I mean people use React-Native and Expo to write mobile apps. Flash and Flex could have been that.
I do not understand the negative points for the previous comment. "For those wondering how can this work with javascript disabled, please take a look at "sample.html" in project 2.01. CrxCmp itself can be used server side on a JS server, but it is not necessary, nor difficult to use any other server. As a matter of fact, two of the projects that make up CrxCmp were developed in PHP originally, and continue to be so, and code is then imported to javascript "1 to 1", possible because of CrxOop." I built multiple projects with those two same projects on the PHP side, and their port to JS is why CrxCmp works on a JS server. 
Yea, trying to do OOP from scratch might be painful. Try to contribute to some OOP project instead. Download some existing project and try to change there something. During the process you will start understanding basics. The way I started to learn OOP was by inheriting project after previous guy who wrote it. Then, I wrote project using CodeIgniter which had excellent documentation.
&gt;The benefit of using something prebuilt is that you dont have to worry about security as much. &gt;suggests using WordPress.
Yes, and for the love of god learn how to use prepared statements first lest you end up the 968373895th site to get hacked due to sql injection.
Not really. 90 % of information is rubish. Internet is full of missleading "you shoulda's". I know many friends who learn Symfony from the internet and they use many blind anti-patterns. This is easily avoided having a mentor with 5+ years of experience :) But only few people have the balls to ask sb in person for mentoring. I'm super lazy so I had no choice :D 
I never used procedural. In fact, many years ago when I learned programming in high-school, I learned OOP Java. After that, however, I did learn procedural C, and had a few years on/off writing procedural Pascal in a specific open source community. Years after that, I switched to PHP, and just wrote my stuff in an Object Oriented manner from the get go. Every time I see a large PHP system written procedurally it makes me want to puke.
Could you link that group? I'll try to find out how it got unspotted. P.S. I'm &lt;a href=" https://www.google.com/search?sitesearch=tomasvotruba.cz&amp;q=Symfony"&gt; Symfony geek&lt;/a&gt; :)
My advice would be to not learn OOP PHP, but just learn OOP period. Learn to understand what it is and why it's good and all that on a conceptual level, and then PHP is just the language you happen to be doing it in. &amp;#x200B; All OOP is is black-boxing away like minded concepts to their own objects. Like people with different professions. It unclutters the main program because you're just asking people to do the jobs they know how to do, and you don't care how it gets done. &amp;#x200B; Your main program doesn't have to have anything about firefighting or surgery in it because the Firefighter and Doctor objects know how to do their job. Your main program doesn't have to keep track of the status of their jobs, because the Doctor and Firefighter know what it means to be done with the jobs and can just tell you. &amp;#x200B; OOP is nice because when done right the main/running part of your code can borderline be read by someone who has no idea how to program. 
Sorry, i should have put a big asterisk next to that. Using Wordpress does have security implications, but I'd choose wordpress over something from made from scratch someone's first time
Can't recommend this enough. I can remember really struggling to get my head around OOP. I understood all the terminology (i.e "instances", "objects", "classes", "properties", "visibility"..) but found myself frustrated as I couldn't see *why* this mattered. *Why did I need to describe my application in such a convoluted way, when I could do it perfectly well procedurally?* It was *Head First Design Patterns* that allowed me to really understand how I could take advantage of OOP. In contrast to my original view where I thought OOP was little more than an additional layer of complexity, this book allowed me to appreciate object composition and how large and complex systems can be broken down - quite elegantly - in to small and simple chunks.
While I had experience in OOP and got how it worked, it’s benefits etc... it wasn’t until I used the CodeIgniter framework that it just all fell completely into place. Having to follow the rules really just cemented those building blocks i already knew. CakePHP, Symfony or Laravel might be better alternatives as it’s been a while since I’ve relied on a ‘off the shelf’ framework. 
&gt;This also demonstrates nicely why you shouldn't do that because&lt;li&gt;&lt;?php echo $employee; ?&gt;&lt;/li&gt;Is not escaped and thus allows for cross site scripting. What if you just use htmlspecialchars in the view() function? Problem solved?
You’re right. All he really needs are a few mysql_* functions and bob’s your uncle.
The Wordpress one? It's https://www.meetup.com/wordpress-wp518/
I search for "php meetup &lt;cityname&gt;". So "php meetup new york city" returns a few results. Not sure which are active, but if it's on meetup.com, it probably is because that costs money.
To meet others in your local community who do similar work. I've gotten freelance job offers and recommendations from similar groups.
What made it click for me is an example that doesn't apply directly to PHP in practical terms, but hopefully it makes sense. We are going to write a program to show a stick figure waving their arm. (Hence why it doesn't apply to PHP directly :) ). Procedurally, we might create a function to draw the figure initially, then another to redraw the arm in the various positions it will animate back and forth as it waves. We call the create function, then enter a loop redrawing the arm at the various positions to make it wave. Easy enough. Now we want to make it walk at the same time. We (maybe) have to rewrite the redraw code to make it relative to the arm position, then we write new code to make it walk, in a similar way. Time passes, now we have 200 functions to wave, walk, jump, crouch etc. etc. Now the boss says "Hey can you change the color of the stick figure?". Hopefully it's already a constant and it's easy, if not, then it's refactoring time. Next the boss says "Stick figure is no good, it needs to be a 3D robot". OK, copy the functions and update them all to make it a robot. Then he says "Yeah, and another 3D robot, like that, but red". Then another, but with antennae and so on. Time passes and the code gets messier now that there are 400 functions and 200 variations, with robots, astronaughts, dogs, octopii (is that right?) and of course the good old stick figure. As you can image the code gets messy. Time passes and now we need to add a speak function to let the figures talk with a speech bubble... When you use OOP, you can have objects and they can inherit things. This makes it much easier to maintain. For example, my code with OOP might look like this: $figure = new stickFigure(); $figure-&gt;wave(); $figure = new robotFigure(); $figure-&gt;wave(); All of the figures inherit from a `baseFigure` class. When we get asked to add the speech function, it will be the same for all of them, so we add it to `baseFigure` and instantly, all of our 400*200 options can speak. We might have to override the function for the cat, who can only say "meow", but that's it! Plus when we want to have fifty stick figures all waving it is so easy to create them and read the code. 
What the tutorial?
Yes sir
You have to configure ini\_set('default\_socket\_timeout', 5000); for example to get a 5 second timeout related to file\_get\_contents. The default is pretty high at 60 seconds, you should always lower it. I wrote a blog post about this a while ago here: [https://tideways.com/profiler/blog/using-http-client-timeouts-in-php](https://tideways.com/profiler/blog/using-http-client-timeouts-in-php)
you need to learn data modelling, Entity-Relationship model and normalization.
that's why you use non-blocking I/O and buffers... well it's a bit harder in regular PHP...
Learn a framework. Go do Laracasts or Symfonycasts and learn the frameworks pretty well. When you start dealing with dependency injection and passing data back and forth you quickly realize the importance of OOP.
Go and rust are not OO languages though, but I’m sure you know that :)
/u/Hall_of_Famer already hinted at it, but Python is very much an OOP language - all things are objects. Even the primitives. Even class definitions are objects. A huge amount of Python's behavior depends on classes which implement given methods.
Why would you recommend functional programming out of the blue?
You just made me want to write some more code. Is this nerd porn or something? I've been building a Vue.js powered SPA, which is absolutely cool tech, but i feel I'm going to get rusty on OOP if this is what i focus on. 
For me, I grew up programming in BASIC on a ZX-81, Vic-20, and C64, then on to ML on the c64, IBM 8088, and a bit on the Amiga. I looked at C, but I never really had much of an interest in OOP as I thought it was too bulky and the added abstraction was unnecessarily wasteful in resources. So, when I started webdev with PERL/CGI, I was all procedural. It worked for me. I eventually moved to PHP and stayed the course. I did, though, also learn Java just before I took up PHP, and for that OOP was necessary. I realized the strengths with OOP, how specific functions (called class methods) made sense to be packages with the class rather than have a huge list of functions that are loaded just in case they are needed. PHP was fairly early at that time, I was working with PHP 4.x and 5.0 was brand new around that time. I felt that PHP wasn't robust enough to do OOP as well as Java which allowed "method overloading" and forced "strict typing". In Java, you can have `public int do_it(int in)` and `public string do_it(string in)` which will be seen as two different methods without error and depending on whether you pass an int or a string type to do_it, it will call the appropriate method. In PHP, you can emulate method overloading by taking the arguments and doing internal is_int() checks to decide how to handle the data. As for strict typing, though, PHP is catching up, but it is still loose. You can now specify a type for objects, but not for every data type (it's called "type hinting" in PHP). So, I spend the majority of my PHP development doing procedural, about 12 years. I had a potential client sounded shocked when I explained why I didn't do PHP OOP, and that was a motivator for me as I missed out on that client. Since then, I began working on OOP and I've converted fully over to it. I'd developed my of framework which I use for all my projects when needed, but it too was procedural. So my first step was to convert that to OOP. In doing so, I learned the ins and outs and differences that PHP OOP has with Java. What you may appreciate is the nature of objects. It's got an elegance that can be appreciated quickly. If you have an object that is a vehicle, you can define a list of properties for cars in general (number of doors, length, wheelbase, fuel type, etc.), and then you can create a list of more defined objects such as "sedan", "sport", "truck", "van" which extends that parent class of vehicle. You can also force a template on to each by using an interface to require specific methods to exist for each of the objects. OOP is amazing. Just dive in and work on getting better.
Took years of playing with it for it to finally stick. Composer changes everything. 
This. Hardest transition but it starts to click when you go through a few tutorials. The one that made the most sense to me was setting up an API with Laravel. If you have a strong grasp on procedural, it starts to make sense after a while. Especially if you’re used to using multidimensional arrays (for some reason that correlation works for me). 
What do you mean? Because as a blanket statement that's just wrong.
When in doubt, rewrite the whole damn thing!
I think you need to read Clean Code by Robert C. Martin. I changed my view of exceptions after reading chapter about it in this book.
This is a good question, and i think there is still something magical that you just have to "get" with Oop. I've Been doing it for a while and still don't understand the what , how and why. Like I get the class, object, method, property, scoping, get/set, inheritance things. I've also used it with MVC in frameworks like codeigniter, but ask me about when would be the right time to use any design pattern, and I won't have any idea. I just use other people's templats in this regards. I feel like a sham programmer.
Few tips: oop is not about inheritance. Inhertance should be avoided. Use composion instead. I suggest to start by reading articles on dependency injection by Martin Frowler. You wont be able to write clean OOP code without DI IoC in php. So you mat want to look up DI containers.
You already posted about this here: https://github.com/spatie/data-transfer-object
Upvote, but not because of the slack client but TIL about https://github.com/janephp/janephp :-)
Haha, I know right?!
Ordered just now, thanks.
I don't know man.. That was a link to the repository, while this blog post is about using a pattern. It's true that there's a link between the two, but do you really feel these are the same things and not worth of sharing on this subreddit?
It's been a few days. It starts to look like you're just farming exposure for spatie.
While I don’t agree with your lecturer, not being an OO language isn’t necessarily a bad thing. Also, hearing someone outing such an opinion shouldn’t be a reason to boycot all opinions on a technology or language in the future.
Disagree! Spatie provides many interesting packages that I use often because they solve problems (much love for Fractal). The article definitely didnt read like spam and was well reseaeched. 
Nice one, I use DTOs often and this sounds worth checking out. 
We could even call it a _classification_ of functions.
Spammersayswhat?
Never tried text/event-stream, actually have an assignment where this could be useful. Thanks!
[removed]
I worked on it 2 days and now it's ready. There is 115 new american groups! [https://github.com/TomasVotruba/friendsofphp.org/pull/78/files](https://github.com/TomasVotruba/friendsofphp.org/pull/78/files) &amp;#x200B; Thanks for feedback!
I'm a desktop application developer by profession and moving myself into web development. As a self taught web developer(currently just building front-end stuffs), I'm leaning towards PHP as my back-end language of choice because in my workplace and where I live (South East Asia) this is what they are using, PHP is everywhere in this region. I think I can't go wrong choosing this as my first back-end language in web development. Since I'm late to the party, I can't seem to find my starting point. It's important for me to build the right way. If you don't mind, Where should I start?
The "smug" `:)` was not meant that way at all. I honestly just wanted to bring some nuance to your statement because I feel like calling Go and Rust object oriented languages does not do them justice. The `:)` I added in because I wanted to make sure that my remark would be interpreted as good-nature d, but I obviously was at fault there. I don't often react on public forums like these, so I'm a little unsure about how best to communicate my intent. I am a fan of your reductionist view. Too often people confuse the traditional language constructs for object oriented code like the `class` with the functionality that they were created to provide. I agree completely with you that it is possible to practice Object Oriented Programming in either Go or Rust. From reading the rust documentation and experiencing the development of software in Go by colleagues at work I would say that both languages have features that make them well suited to write code in an object oriented style. However, in my opinion there should be a clear distinction between being able to write object oriented programs in a language, and a language being object oriented. I would say that a *language* can be marked object oriented when the development of that language is mainly oriented towards enabling the users of that language to program in an object oriented manner. An example of this would be PHP as of the past couple of years. While PHP is still actively being used in a procedural fashion by many, the development of the language has through the years become increasingly invested in providing functionalities that enable object oriented programming. It has not, however, made the same progression to support other paradigms. The high overhead in PHP function calls, for example, do not make it particularly well suited for functional programming and other language features like concurrency are practically non-existent. This main focus on the development of features to enable Object Oriented Development in the language is, in my opinion, what makes PHP an object oriented language. Rust and Go, I feel, are sold short when called object oriented, because neither language is being developed or designed with the practice of object oriented programming as the main objective. In stead, both languages are developed with different goals in mind, which is what makes them innovative and unique, both in their own way. I would say that Rust's features were developed while learning from multiple programming paradigms and that it therefore has much more to offer than object oriented languages (as per the definition of object oriented languages I described above) would have. As a consequence, limiting oneself to strictly using object oriented features in the language, would probably mean artificially limiting the functionalities that the language provides you with . Because the development of Rust does not have enabling Object Oriented Programming as the main goal, I would say that while being well suited for the paradigm, Rust is not an object oriented language. And we should be happy that it isn't. Go on the other hand is being developed with simplicity in mind, and has a large focus on enabling its users to write concurrent code. These features are what define the language and have made it very popular. Again, enabling object oriented development in the language is not one of the main language development goals. And again, I think we should be happy about that. Both languages are unique and innovative because they are not being developed with a single paradigm in mind, so calling either one object oriented or functional languages would i.m.o not do them justice.
Nice.
I think it was this one: http://anantgarg.com/2009/03/13/write-your-own-php-mvc-framework-part-1/
It all depends, of course. There is some overhead, that's true. If you're dealing with thousands, millions of objects which have to be parsed in real time, than this approach isn't the right solution. But if you're into high speed data processing, I think there are better solutions than a PHP script? We're using this approach in several projects for different things: mapping API responses, validated request data, file imports,... All of these tasks are either small of don't have to be processed at lightning speeds in real time. In my experience the performance impact is more in the IO layer, than parsing an array into an object. One thing we _did_ consider was adding class alias support. So that `/** @var Foo */ will look at the use statements of that class. Unfortunately there's no reflection support for use statements, meaning you're stuck with scanning the class files. That's a feature we decided not to add, because of the extra IO operation for every type of DTO. That would have too big an impact.
Wait a second.. it does use regex for the whole router event the simple one? if it's javascript it doesn't have any problem, but on php I hope you have read the "Notes" for using [regex](http://php.net/manual/en/function.preg-match.php)
You should learn UML, relationships, foreign keys and SQL. Then use whatever SQL RDBMS fill your needs. Try to use an ORM on top of that.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Most clients I’ve used inplemented an interface. So using either MockBuilder or Prophecy it’s like mocking any other interface.
Why separate data and behavior? This post fails to actually address the problem by focusing on a purely procedural paradigm. Simply re-writing function doSomething( array $blogPost ) { $blogPost[/* Now what?? */]; } to class BlogPost { private $title; private $body; private $active; /* construct however you want */ public function doSomething() : void { /* It's very clear what properties exist in this context /* } } solves the problem in a much simpler way, and doesn't require reflection. Creating a class definition for every group of data that flows in or out of your application for the sake of intellisense is not only misunderstanding the purpose of a DTO and a complete waste of time, it can also become quite a mess when a system reaches a certain size. Hundreds of DTOs polluting every namespace does not make a system easier to understand (which is the real goal here). Either properly design your system according to OOP or pass primitives to your functions and give the client the responsibility to conform to your public interface. Is function doSomething( string $title, string $body, bool $active ) : void; really so verbose that it cannot be used? DTOs are best-used to pass data between layers of an application where each layer exists in a different process (and can therefore not be directly invoked). That is, the usage of DTOs is meant to be a communications solution for distributed systems through encapsulating the serialization mechanism. A DTO with no behavior solves no problem, rather, *moves* the problem somewhere else. These PTOs (Problem Transfer Objects) only serve to complicate and obfuscate a system.
Not a huge fan. Especially if they are not checked exceptions. I've heard/read the arguments against checked exceptions, but I still don't buy it. I much prefer the way Rust does errors: by returning a "Result" type that is a wrapper around either the successful result or an error type. I use Result types in my Swift code and also my Java code. I would do the same in PHP if the project I'm working on didn't already have a long history and a more "conventional" style of error handling. It would be pretty easy to implement a basic Result type in PHP (if not entirely bullet-proof) and return that from functions with known failure paths.
There's so much freemium stuff out there with trials but this is completely FREE! Every feature is free. The goal is to learn PHP from this and to have fun with it. And of course to do a bit of good in the world. Let me know if anyone is interested in helping out with the project!
Learning is good and all, but I would get rid of the committed php_errorlog and .DS_Store files. You also have a wide open SQL injection attack in your auth code: https://github.com/topherjamesknoll/allenwrench/blob/1.2.5/auth/login.php. It doesn't appear that $user is sanitized in any way. I would definitely spend some time learning one of the major frameworks that can take care of all of this for you automatically - especially if this is for non-profits.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [topherjamesknoll/allenwrench/.../**login.php** (1.2.5 → 1ab2b3c)](https://github.com/topherjamesknoll/allenwrench/blob/1ab2b3c36e5535ba6c03e2e6dd8c0cc2f4e5bf7f/auth/login.php) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e9kailv.)
Holy cow!~ I'd insta-fire anyone who wrote that who was on my team :o I expect even juniors to code better!
But you use mysqli instead of PDO and have a very open SQL injection in the only file I actually reviewed.... What are your qualifications exactly?
DO NOT USE THIS TO LEARN PHP !!! Reasons: 1. Doesn't use composer AT ALL, not even for even dependency management. 2. NO FRONT CONTROLLER: Everything's in old-fashioned .php URLs that I haven't seen done in at least 10 years. 3. **DOESNT USE AUTOLOADING~** 403 require's and 98 include's :O 4. DOESN'T USE NAMESPACES :O 5. Doesn't use PDO, but mysqli: THis is VERY common for idiot programmers to use because all the stupid tutorials teach mysqli. 6. **At least 5 hard-core SQL exploits. Your entire database will be owned by hackers quite easily** 7. **VERY LITTLE XSS PROTECTION:** htmlspecialchars() is only called twice :o 8. **NOT A SINGLE CLASS AT ALL!!!** 100% PHP4 compatible!! If you want to learn how to program like it's 1999 read this. Otherwise, skip. To the author: YOU HAVE SO MUCH LEARN and you, sir, are giving PHP a VERY BAD NAME! 
It always uses a regex, yes. The "Notes" don't say much, just to avoid unnecessary use of regex, what are you trying to tell me ?
Excellent post, I use arrays a lot as function parameters - you presented a way to enforce types.
You uhh.. have a very interesting post history.
Awesome. Thanks for the feedback. I'll look into it! I really appreciate it.
&gt; THis is VERY common for idiot programmers to use because all the stupid tutorials teach mysqli. You know that there's a way to critique without sounding like an asshole?
If you're reading in a CSV file I would imagine you'd want to do the type checks in production.
From auth/login.php $password = hash('ripemd160', $_POST['password']); Please do not store passwords this way, they are way too easy to break. PHP has a wonderful built in password hashing and verifying function, please read up on them here: http://php.net/manual/en/function.password-hash.php
I cannot upvote this enough. Personal attacks on multiple comments through this thread help no-one. Not to mention, this isn’t even good critique. Help the OP improve. Don’t just list errors without so much as a why or a suggestion of how to do things correctly.
Reading an array into an object simply for the purpose of type safety/intellisense doesn't achieve anything, rather, makes a system needlessly complex. I explain why above. I'm open to a discussion on this, but I can assure you that introducing classes that don't "do" anything is an unnecessary practice that quickly complicates a system. Furthermore, I clearly explain alternative approaches. Both of my examples above accomplish the same guarantees/goals without the need for directly interacting with the POST array, so I'm not entirely sure where you see my advocating for passing arrays around. The solution is to simply not use an array. Problem solved. Additionally, neither approach adds dependencies, cognitive overhead, or reflection. Lastly, as I also explain above, DTOs are *not* used for passing data around within an application (I'm not sure why you would want to do that anyway. To create a mess of dependencies?). Any literature on the topic supports this, for example: https://martinfowler.com/eaaCatalog/dataTransferObject.html And for what it's worth, you cannot avoid direct interaction with the POST array. Somewhere, somehow, something has to read the data. Critically, *this* is where the coordination of the data should be done. Let the thing that created the `$blogPost` array for example (the thing that knows its structure), pass its pieces into your functions. In this way, we know that the dependencies are flowing downward.
Unless you're still making money. If you do, you're closer to being rich than being stupid :)
&gt; Everything's in old-fashioned .php URLs that I haven't seen done in at least 10 years. https://www.youtube.com/watch?v=sbPSjI4tt10&amp;t=2196
&gt; NOT A SINGLE CLASS AT ALL!!! 100% PHP4 compatible!! PHP4 compatibility and the use of classes are not mutually exclusive: https://web.archive.org/web/20090217045458/http://php.net:80/manual/en/language.oop.php
I understand that but did not thought about performance issues there, thanks for the links, I'll check all of them tomorrow. But I don't know how could I "auto-detect" the need of regex while using strpos by default, I'll think about that...
You may haven't feel it right now because it's just like a cholesterol in blood vessels. Usually the router library have an option to use regex or not, Laravel also [have that](https://laravel.com/docs/5.7/routing). Good luck for your framework! 
I created numerous improvement issues on the github repo. What have you done?
It can't be compatible w/ PHP3 because of the require_onces.
Yeah looks like it. All CI builds are failing for the last 30 minutes or so
Also getting some people noticing via Twitter: [https://twitter.com/hashtag/pecl?lang=en](https://twitter.com/hashtag/pecl?lang=en)
no
Hey I see me!
In Laravel I used the default validation component. I followed the Rails-style validation (which is quite natural for me), and kept all rules in my Eloquent models. Now that I am working in projects that are not built on top of any framework I played a bit with [https://github.com/Respect/Validation](https://github.com/Respect/Validation) and I must say it is a very nice and quite powerful library. Most of the time I don't need it though and prefer to rely on simple classes, just because writing tests is faster. As for input (mostly request data, be it GET or POST), especially for internal API endpoints, I am using also JSON schema-based validation. There is also a great library out there to help us out: [https://github.com/justinrainbow/json-schema](https://github.com/justinrainbow/json-schema) As for validation related to business logic, I write dedicated classes. There are usually several of them and they share some common interface. So, for instance, I would write some generic validation class, like \[SomeSettingValidator\] that authorizes a given operation. These validators either return null (no error) or some generic \[Error\] class. The application can perform a certain operation through multiple entry points, like UI, feed upload etc. These concrete components (entry points) just decorate those generic classes as they please, like throw an exception if needed, or add additional metadata to the \[Error\] class.
You can profile your PHP code as described at https://wodby.com/docs/stacks/php/containers/#xhprof and review traces visually (graphviz) with the xhprof viewer service. Unlike xdebug xhprof extension (by tideways) does not affect the performance that much and you can even use it in production to debug some nasty requests by a specific GET param or just every N requests.
I don't know if you guys ever heard of it but I read something about this nice framework called Laravel idk if it's famous or anything but it looks really nice. 
That's a fair point. I think it's a balance of performance vs. usefulness.
I wonder if it will replace CodeIgniter
I don't think that this is only for type validation. It's allowing you to interact with array data (from anywhere) through an interface. If you have post data that you've decoded, yes you must interact with it somewhere, but where and how does the mapping between the request and the entity happen? If the entity is an interface, and you can map the decoded array to the interface, the rest of your application shouldn't care how the interface was implemented. 
noice 
Why is that sir?
Currently I'm building [frontend](https://github.com/ScarletsFiction/ScarletsFrame) and [backend](https://github.com/ScarletsFiction/Scarlets) framework that have better performance than Laravel. It also allow you to create nested router and have build-in authentication library. But because it isn't popular yet, I haven't finished the documentation. If you curious about the result, you can visit [this website](https://anisics.stream).
Checking on isset should never be done I think? Not when you're using a stricter type system as demonstrated in the blog post. Non-nullable values should always be set, or you'll get an error. Nullable value will get the value `null` automatically, but also be set. Non set values will throw an uninitialised error. Concerning the constructor: we wanted to be able to mix up the order of parameters, which is why we chose the array approach.
Shouldn't you be making Ansible playbooks or something? :P
No need to use php framework. You only use native PHP to do it. All function for management you need as: \- Login / Logout using Session \- List table \- Add new row, edit row, delete row \- Paging view in table \- Input element in form html and handle POST request to save to your Database
Sorry, did you just wrote an article of how to use simple docblocks and use objects instead of arrays? Is it any new to someone? Guys...
- error reporting / handling - debugging - input validation - security (sqli/xss/rfe/whatever) - handling of table relations - dozens other essentials newbie programmers have no idea of 
It is not that is "isn't popular yet" is a problem but it's developed single-handedly. So there are additional pairs of eyes to look at. So there are deliberately many errors. Besides, you just have no time to develop all the parts of your framework according to the changing standards. Offering such a limited solution to someone is a disservice. 
Fantastic write up! I will be implementing that in future projects for sure! Thank you
I think it should be. Everything programmers agree upon should end up in PHP sooner or later. The reason why there are other frameworks on top of PHP is that either engineers can‘t agree yet on how to implement basic stuff like routing and/or programmers think they make their life easier - which is true until a new fashion kicks in.
If you have to take care of an application for over 10 years - a framework is a must 
You can read up on the decision to use "date-transfer-object" as a name here: https://github.com/spatie/data-transfer-object/issues/17 Dismissing type safety in production application is _a_ approach, I'm not saying it's wrong. The same goes for embracing it. It's a highly debated topic in the PHP world, because PHP after all is not type safe, and maybe it shouldn't. For me it's simple: stronger type systems have prevented me from having major bugs in production, the same way a loose type system has bitten me before. The end result was a client loosing a few thousand dollars worth of leads. I just don't want that anymore. A stronger type system helps prevent these errors, at least in my personal, real life, experience.
on the project folder has an error.log, maybe you could get some detail on there
Maybe you're right that "I have no time". Even there are no people look at it, I would still improve it as I need to build portable framework that can running on low end android devices or a computer. But, can you explain what do you mean about "limited solution"?
Gotta love Symfony, they just have everything, don't they?
Why not start with Symfony and only add the services you need.
Well, it's hard to explain. I worked with many homemade frameworks. They all were outdated and limited. They are less flexible, they don't follow latest standards, they more a patchwork than a solid foundation. The recent development is modular. You need a query builder? Use composer to add Aure.SQL to your framework in seconds instead of rolling up your own. Need logging? The same with Monolog. And so on. And you can be sure that you are using a recent polished solution that has been tested on hundreds to thousands installs and use cases. *And you are free from maintaining all these parts.* That's essential. Working all by yourself you have to choose - to update and maintain your framework or update and maintain your application. And I can tell you who would win and who will become outdated. 
Slim is a very good microframework, but given the fact that you need all those extra services, I would just use Symfony components instead of a microframework.
Ah, I didn't realized if it has a problem for new visitor after I uploaded the update. Thanks for notice me xD.
Asking reddit for framework suggestions, ough, you've got the ballz. &amp;#x200B; Use whatever you're familiar with. Personally I usually go Zend Expressive. Alternatives are Symfony 4 (which can be super slim), Laravel (just not mine, but very easy to get going), Slim and many many others.
when PHP supports contextual escaping without a template library, routing without a library, and has a better API than this mess of $_POSt $_GET then core PHP will be the only thing people need...
That was awesome explanation, and I almost completely agree with you. Maybe I should consider for using external dependencies for the framework. Maintaining a script will be easier if the code readability was good and has simple structure. So I haven't feel any problem about that. But if the code was messy and have some deep logic on there, I can also tell who will win and become outdated.
&gt; which does the same thing, only with a lot more control What does curl do that `file_get_contents`cannot control that you would use during typical usage?
That's old news, it has been posted several times on r/php :)
Symfony or Laravel, roll a dice. They're both good.
checkout mocklets (https://mocklets.com?ref=reddit)
Maybe Lumen? It has queueing, the same Eloquent ORM as Laravel (though it's disabled by default), and caching. It doesn't include the Blade templating system, but from the sound of things you don't want that anyway. &amp;#x200B; Only issue is most of the time when I use Lumen I wind up running into something I need Laravel for...
Ok thank you. But this is official cybersecurity agency. 
Oh u right sorry!
I'm kind of in this camp with you. I try to take a new opportunity to learn or work with something new, but yeah. Might go this route. You win.
Actually, I have one that I wrote for fun. I could clean it up and release it just to see if anyone wants it.
+1 This. Unlike prior versions of Symfony, Symfony 4 starts out very very small, and you only add what you need.
I'll check this out, thanks!
I like exceptions for the fact that they get caught by our logging service (Loggly) and sent to me. I suppose as long as the error isn't egregious you could get the same by triggering E_USER_WARNING. There are indeed places in the code where I trigger warnings instead. A cron job that must manipulate many records is when one use-case for that.
Funny story, using PHP generators actually got me fired once. Other senior dev didn't know about them and apparently he felt threatened by me so when we had an issue in prod he blamed my "strange code that makes no sense" and told the owner who was his long time friend. They called me up and showed a screen with that piece of code and demanded explanations, I was dumbfounded but didn't get fired right there, they waited for me next mistake/bug and fired me.
Thanks, I like this. I end up fighting with PHP-VCR a bit, this does have limitations with pure SOAP services though. I know you can work around SOAP by building the HTTP yourself, but it is nice to consume the WSDL when possible.
Send headers (is possible in file_get_contents, but weird). Receive headers. Send other than GET requests: POST, HEAD Control different timeouts. You can even have partial download callbacks. And a lot more I never used
&gt; Nullable value will get the value null automatically, but also be set. What I mean is, if you are using an object as a DTO there are some things you can't model that you can model with an array. Imagine you have a REST API and you want to put the parameters from a PATCH request in the DTO. If you have a parameter that allows `null` the code receiving the DTO can't tell if it's null because the PATCH request didn't supply it or because the request explicitly provided `null`. Using the `BlogPost` DTO example from the article, imagine there is an additional parameter `subTitle` with the type `?string`. Setting it to null clears the sub title. If I send an update request resulting in `new BlogPost(['title' =&gt; 'New title'])`, am I only updating the title or am I also trying to clear the existing sub title? Both `new BlogPost(['title' =&gt; 'New title'])` and `new BlogPost(['title' =&gt; 'New title', 'subTitle' =&gt; null])` look identical to the code receiving the DTO. With an array this isn't a problem because the key will not be set for a partial update. If the array contains `'subTitle' =&gt; null` it's clear that the user provided a value for `subTitle` and they are trying to set it to null.
They fire people over bugs over there? Seems like you dodged a bullet...
All of that is perfectly possible with `file_get_contents`.
Yeah, they had one guy clear a prod database by mistake and nothing happened, so this was more of a personal thing against me I believe.
It's a government site for Catalonia... So? php.net is the official PHP website, which carries a bit more weight on this topic.
In my opinion the draw back of exceptions is that you can only throw one exception at a time, I mostly use it for fatal errors that terminate a program. For form validation I do not use exceptions because you can have many errors.
My answer is no. Don't make PHP follow javascript's willingness of "be everywhere please, and suck at everything please"
Just sharing that this option exists. It doesn't have to be taken advantage of.
Ah right, partial DTOs. With the way our projects are set up, we never really encounter these problems. We're always updating records with a "full DTO". But there might be several DTOs for the same model/entity, each specific to their context. Allowing unset values is a difficult thing to get right, if you want to keep the certainty of corectness that this stronger type system ensures. If you have any concrete ideas on how to solve the problem: feel free to submit a PR 👍
Mine arrived today. Somehow I missed the bit where you said "it's about Java" - I think I'd assumed it'd language-agnostic. I don't know Java at all, and haven't touched C++ in (scarily) about 20 years. 20 years, fucking hell. Anyway, I'll start reading and see if I can see past the Javaness, I feel I should be able to. 
Hah, indeed. Oh well. Hope you found something more satisfying :)
In general it's not a good idea to inject the whole container anywhere (not only in the controllers). This is like injecting all of your public services and making it super easy to create a lot of tight coupling without even realizing it. It's much cleaner to declare the dependencies in the constructor as you said. This way any dev reading the code knows what the dependencies of this class are, maybe find a way to remove or exchange some of them, makes writing tests much much easier etc.
I cannot tell if you are being facetious or intentionally disingenuous. Take a close look at my examples again. Both of them guarantee type safety. My argument is in no way related to the idea of type safety as a programming paradigm, rather, that creating objects for the purpose of type-safety is a waste of time, a misunderstanding of OOP, and creates great complexity for any non-trivial application. This project is attempting to solve a problem that could only exist in a poorly designed system. I sincerely doubt experience is something you much of. I have provided clear examples of superior alternative approaches with explanation as well as detailed precisely why modeling data into objects for the sake of it is a bad practice in terms of maintainability and dependency management. Again, I am open to a discussion on the matter. And FWIW, despite the fact that I would shudder to think that anybody would find themselves in a situation where they have been led to believe this package could be useful and because you seem to be a maintainer of this project, I'll give you some pointers: *Any* object could be created according to your approach, so why require inheritance? Separate the act from the actor. The public interface of this project needn't be more than: DataTransferObject::unserialize( string $class, array $data ); /* returns class or throws*/ DataTransferObject::serialize( $object ) : array; Your `DataTransferObject` should be declared abstract and cache reflection data as it's reflected. There is absolutely NO reason to call any reflection method more than one time per type. Class definitions are not going to change at run time.
Any sane Cron runner should attempt to catch exceptions it can handle and log them appropriately. If it cannot, it must leave it to bubble up. For example, a database failure should stop the Cron, but a missing database record probably should not. 
In a clean code, there shouldn't be a reason to throw more than one exception. If you do, they are just errors (log them), and not exceptions. 
I would use Symfony 4 too. I've never used Slim myself but it sounded really cool. But it is considered deprecated since the release of Symfony 4. [https://symfony.com/blog/the-end-of-silex](https://symfony.com/blog/the-end-of-silex) Lumen and Laravel are an alternative, but my own preference is Symfony.
&gt; Javascript is a very healthy language. A language can run everywhere and have many implementations, and not necessarily be 'healthy' - it just depends on how you define 'healthy'. I for one kinda hate many parts of the Javascript language, such as the lack of proper integers. I'm also not a fan of it trying everything it can to just keep running despite obviously wrong code, such as ignoring extra function parameters and heavy, coercive type converting.
&gt; Javascript is a very healthy language. And the common-cold is a very healthy virus :P
Things like \`$oddNumberThing = $numberThing;\` don't create a copy when it comes down to objects, they just create a reference. If you want a copy, you'll most likely need to \`clone\` the object like \`$oddNumberThing = clone $numberThing;\`
Sure that the code actually run on PHP 5 before? I think the cloing of objects when you assign them to other variables has not been a thing since PHP 4 - but i may be mistaken there, maybe that was changed in PHP 5.3. To your problem: Yes, PHP passes objects by reference (or "pointer") - if you want a copy, use "clone": $oddNumberThing = clone $numberThing;
You are correct. This does happen in 5 still. I think this is the only instance where we are not properly cloning or creating new objects. Appreciate your quick response!
Thanks! 
See: https://www.reddit.com/r/PHP/comments/959fle/dont_clone_your_php_objects_deepcopy_them/
3v4l.org has a nice PHP interpreter that runs the code through all sorts of PHP versions and highlights the differences. You can use it to determine which version has a [feature that was added](https://3v4l.org/ILtFQ) or for [changes in behavior between versions](https://3v4l.org/kT6oL).
I have the same experience, whatever I build something for myself I end up adding a lot of packages a framework usually already has included or it's much easier to add. I only really use a micro framework when I just need a couple of pages, the moment I need a form I'd probably just jump back to Symfony. With flex that can already be somewhat lightweight. Maybe I'm just spoiled by all the framework goodies.
I cannot stress this enough. There is no worse practice than passing objects around as bags of data. That represents a fundamental misunderstanding OOP, SOLID design principals, and clean architecture that inevitably leads incredibly complex systems due to coupling. The goal is to *prevent* clients the ability to couple themselves to an implementation. Low coupling, high cohesion! Code like if( $object-&gt;property ) /* do something */ is pure evil because now `$object` must always have `property` or the above has to be changed every time `$object` changes. This is precisely why properties on objects should be declared private. A smaller public surface means less coupling. This is the goal! If there is some behavior that requires knowledge of an object's state, that behavior belongs on the object (see example 1 above). This is OOP 101. The "problem" you seem to be concerned with of "allowing for the interaction with array data from anywhere through an interface" can only exist in a poorly designed system. In fact, the goal of a well-designed system is precisely the opposite. That is, to *prevent* the interaction with data and instead focus on behavior. More important to where/how mapping occurs is what you are mapping to. 
Yikes. I don't like the over-use of annotations for behaviour. Annotations are fine for test stuff (PHPUnit), static analysis and docs IMO, but outside of that, I don't like it.
For your use case you can get away with no sql database. However, it may prove to be troublesome if you are planning to use shared hosting. Although personally given the freedom I would go postgres and utilize JSON to store quiz results. If you're planning to do it quickly, you might as well get a trial license of PHPstorm. It has sql database integration much better than nay phpmyadmin nonsense could provide. And generally, phpmyadmin is for page administrators, not developers. Given your use case, you won't need to learn more than how to install it, create a few users and very very simple queries like `SELECT * FROM &lt;table&gt; WHERE &lt;data&gt; = &lt;needle&gt;`; and such. To be honest, php developers in general get away with knowing SQL very poorly. Like up to '92 specification. Some even continue to refer to SQL as relational databases, which they are no for quarter of a century. But whatevs /rant
Couldn’t agree more. It feels like they may as well use java and be done with it
How can I add to allow parenthesis to my preg\_match function
\( and \)
Recently I created a package called PHP Simple two way config which is designed to make it easy synchronizing the source file with the run-time values. It's suitable for applications that require the use of file-based system to store preferences or configuration. [https://github.com/mazentouati/simple-2way-config](https://github.com/mazentouati/simple-2way-config) suggestions and contribution are welcomed.
Yeah it’s a bit messy but it works 
&gt; The first high-performance PHP coroutine full-stack componentization framework based on Swoole native coroutine, built-in coroutine web server and commonly-used coroutine client, resident memory, which has no dependency on PHP-FPM, asynchronous non-blocking IO implementation, similar to synchronous client style of writing to achieve the use of asynchronous clients, without complex asynchronous callback, no tedious yield, similar Go language coroutines, flexible annotations framework, a powerful global dependency injection container base on annotations, and great service governance , flexible and powerful AOP, PSR specification implementation, etc., could be used to build high-performance Web systems, APIs, middleware, basic services, microservice and so on. I feel like it would be easier to understand Chinese than this huge sentence loaded with various technical terms. 
That was a little confusing, but I’ll check out the link. 
Sorry. I'm just saying you'll have a hard time using a regex to match all forms of bracket notation, so you'd probably want to do it with loops that check for balance (i.e. a ')' for every open '(').
hey @thermobaer I looked over and while its starting to make more sense I'm just trying to include 3 things. (), square root and exponent into my regular expression. I know its not very common but is there a way to do this with my code above? I managed to do it with +,-,/,and % and they work well. Now i just want to add the other 3.
Code Recommendation: Instead of echoing the HTML as strings, echo the PHP expressions within the HTML. For example: &lt;form action="/" method="POST"&gt; ... &lt;td colspan="4"&gt;&lt;?= $display ?&gt;&lt;/td&gt; ... &lt;td &lt;?= sizeof($chunk)!=4 ? 'colspan="4"' : '' ?&gt;&gt; &lt;button name="pressed" value="&lt;?= $button ?&gt;"&gt;&lt;?= $button ?&gt;&lt;/button&gt; &lt;/td&gt; &lt;/form&gt; It makes the code cleaner and easier to read. `&lt;?= $variable ?&gt;` is [shorthand](https://stackoverflow.com/questions/2020445/what-does-mean-in-php) for `&lt;?php echo $variable; ?&gt;`.
For the love of god.
yes i see now that could have made it look a lot cleaner... this is only my second day with php 
It kinda feels like 2003 in here. As in, I feel like I wrote code like this in 2003.
I'm actually not disagreeing with what you're saying, if I'm understanding correctly. "There is no worse practice than passing objects around as bags of data" - what about an entity? When a repository creates a new entity, what should it return? IMO it should be an entity interface. How that interface is implemented doesn't matter. This project (which I have issues with) doesn't advocate for interfaces, but uses public properties instead. That code snippet you used is a code-smell *immediately*, because it is accessing a property on an object - no argument there. What I was trying to say before was referring to the translation between an array (often unavoidable), and an entity interface. Where and how should that happen? What should a repository's "create" or "update" methods accept? And how should an array be translated or transported to those methods?
I like it. I did something similar where I build a base class as Prooph is doing it: [https://github.com/prooph/proophessor-do/blob/master/src/Model/User/Command/RegisterUser.php](https://github.com/prooph/proophessor-do/blob/master/src/Model/User/Command/RegisterUser.php) and then added Laravels Validator on top so I can easily define validation rules for the DTO
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [prooph/proophessor-do/.../**RegisterUser.php** (master → 7407e6a)](https://github.com/prooph/proophessor-do/blob/7407e6aeb2217344a48c60a747c3d6b555ab7144/src/Model/User/Command/RegisterUser.php) ---- 
&gt; no tedious yield This indicates a fundamental misunderstanding of the purpose of keywords like "async" and "await". They aren't only there because the language needs some hint as to whether or not the functions are asynchronous. They are there to indicate to the developer that these things are the case. They are there to allow promise juggling _as well as_ "waiting" for deferred execution. 1. In a situation where there is no "tedious yield", how does one start multiple promise-making function calls, and only wait for a single aggregated promise of them all completing? How do you turn... $promise1 = await doThing(); $promise2 = await doThing(); $promise3 = await doThing(); ...into... await Promise.all([ doThing(), doThing(), doThing(), ]) 2. How do you tell that a function call is meant to execute asynchronously, without reading the function definition? "async", "await", and their predecessor "yield": are as useful for understanding code as they are for writing it. Arguing that they are tedious (or that they should not be required) missed that point entirely.
Calling php libraries from C# and vice versa
Idk, thought it's a good review, there is also something to be said about the classic format - it gives time to mingle and really get into discussions with other people. I have skipped talks because we got into it with people and had great time and learned probably more during that time than the whole conference in general. There are downsides to both approaches. Depends on what you are going for. It also depends how technical the conference is too I guess. These days there are rarely truly deep technical conferences around.
Yeah, that's why I organized my conf as 4 talks a day per track (usually two tracks). That gave people the ability to have a deep talk, have a Q&amp;A if they wanted and a 30 min break between talks to mingle. And due to smaller speaker pool the cost of the 2 day ticket was 60 euro :)
&gt; Regardless of which level you're at you'll learn some things and you'll meet interesting people. I think this is pretty disingenuous. I've literally attended multiple conferences where I literally learned nothing new about PHP or how to improve my development. One year at PHPNW, the only thing I learned was there was a project PHPSchool, this doesn't actually help me since I am not learning basic PHP. After a certain amount of conferences you are listening to the same subject from different developers repeat the same basic stuff. There is only so many ways people can talk about SOLID, BDD, Adding Tests to a legacy system, Most conference talks are about giving you things to google instead of actually teaching about those things. 
That five minute WebGL talk was an amazing talk. Learnt more about how WebGL works over breakfast just now than ever. Can't program it still, but I'm now armed with knowledge that will drive decisions in the future. The 20 minute format is perfect IMO. I attend lots of conferences that use it, and it helps support lots of breaks with mingling and networking. TED, TEDx, TDC, all use it.
I've been to PHP North West three times, PHP South Coast once, and two different WordCamps. I've found that the best talks need a combination of a good subject and a good speaker. Bad speakers can make good subjects boring and good speakers can make dull subjects interesting. Similarly a good speaker can squeeze a 90 minute talk into 60 minutes, while a bad one will stretch out 30 minutes into 60. One of the most interesting talks I've attended was [phpBB, meet Symfony](https://www.youtube.com/watch?v=J4F16PLFUoc). I didn't really learn anything practical out of it, mainly because I've never worked on a phpBB project; but it was an interesting talk nontheless. 
We need more PHP people at DEFCON. I honestly have never had more fun attending talks, engaging with people, and making friends learning things that were so far-out of my “lane” that have re-kindled a general optimism for my chosen profession that I didn’t know was missing. I have only been to a handful of PHP talks in person, - At which I have met some incredibly hilarious, like-minded people who have become close friends and trusted surfaces for my idea bouncing. Other times I feel like we are all just farting up this room and then complementing each other on the earthy notes and flavor profile of the flatulence. Breach the chasm my friends! Be a technologist that does PHP!
I learned OOP this way too (vehicle -&gt; car, etc), but the more I learn and use OOP, this example looks a bit rotten. Inheritance is the root of a lot of unnecessary code bloat. It's a good way to learn and make sense, but inheritance almost never is a good approach to solve something like this. Composition is. 
depends on the license of the code you copied