Much easier to read.
I tend to like using scandir: http://www.php.net/manual/en/function.scandir.php
I love NetBeans. As long as your system has the memory, it's indexing, searching, autocomplete, and code look up are very handy. Even if your classes are lacking in doc tags it still does a decent job giving you autocomplete. Also nice that my preferences.xml works on Mac and Windows.
I think I just had my 'aha' moment...I didn't realize that it was reading the character set from left to right. I was thinking it was matching any of the letters/numbers in the range to the character set. I _think_ I understand now. Phew... Thanks for taking the time to explain this to me!
I learned PHP entirely through trial and error. When I was about 12 years old, I downloaded a board system called "Discoboards" which is a rudimentary replication of the old IGN Boards. I set it up on a server and went through the code, changing a line at a time to see what happened. I did this for a while, encountering a lot of errors and Googling most of my answers and eventually worked my way up to larger mods, then to CMSs, etc etc. It is possible to learn PHP through reading (Larry Ullman has a few good PHP w/ MySQL books); however, I think that the experience through trial and error is extremely valuable. A few resources I would recommend: Notepad++ (for writing) and wampserver (for testing). Once you get better and better then you can move up to bigger software but starting with Notepad++ is good because you aren't relying on autocomplete and software that automatically fills in your missing semicolons/parenthesis, allowing you to pick up good habits early on.
I woke up early with 25 solutions in my inbox. I tried my best to get them all in there. I can verify that you gota correct solution and will add you now.
Alrighty, time for another!
localhost
This. I started with Notepad++, but Sublime is better overall. Just the [scrolling thing on the left side](http://www.sublimetext.com/screenshots/cppHeroLarge.png) is enough for a switch, everything else is a plus.
I'm a big fan of [Head First PHP](http://www.amazon.com/Head-First-MySQL-Lynn-Beighley/dp/0596006306/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1336684196&amp;sr=1-1), personally. StackOverflow has also been really helpful for random functional requirement scenarios.
This, trial and error isn't working from a book.
Localhost, the PHP docs, and Googling any errors you may encounter.
Try to write a basic html form that sends over $_POST variables to a .php page and displays them in alphabetical order. Then set them inside of a mysql database. Check out r/dailyprogrammer They have tasks that can be done with most languages, some for total beginners to experiment around with. Books will put you on the right path to doing things correctly, instead of hacking together what works. 
I read it, and you shouldn't do that either. That is not validation, it's data transformation. Transformation: $value = (int)$value; Validation: $options = array('options' =&gt; array('min_range' =&gt; 0)); if (!isset($value) || (filter_var($value, FILTER_VALIDATE_INT, $options) === false)) { die('You must use a positive integer'); } Where the die() is, you would of course modify your logic to do whatever makes sense for that situation, such as reloading a form, or throwing an error dialog of some kind. The difference here is that transformation changes the input to something the user might not expect, while proper validation won't let anything past unless the user has done it right. When it's properly validated, it should never get anywhere close to the query until the value is acceptable.
Engineer for a video delivery platform built (primarily) on PHP here. A few obvious tips, followed by some additional advice: 1. The language you choose to write the application in (PHP) won't be your bottleneck: Waiting for responses from services will be. 2. Monitoring! If you're not monitoring your application, how will you be able to make educated decisions on what needs to be improved? If you're not monitoring, you're going to have a bad time. 3. Centralized logging. Goes hand-in-hand with monitoring. Get alerts setup so you know when exceptional behavior is occurring. Don't wait for users to tell you something is wrong. 4. Profiling. You're profiling, right? Use something like [xhprof](https://github.com/facebook/xhprof) for your production environment. 5. Cache, cache, cache. Use a distributed memory cache. Memcached is a great choice because if you decide to go full AWS, Elasticache implements the Memcached API so it's an easy switch. 6. Process intensive tasks offline. 7. Yadda yadda, explicitly call for data, don't "SELECT *" for example (if you use an RDBMS). 8. Be a polygot. If something is already well-developed in Ruby, Java, or whatever: Use it! Make it a service to your application (via protocol buffers or add a RESTful API wrapper around it). Reinventing the wheel is for suckers and people that like to move slow. SOA makes life a lot easier when you need to scale to hundreds or thousands of servers, as opposed to some monolithic application that handles everything. Pro-tip: After consulting dozens of startups, my best words of wisdom is this: Do whatever will get you up and running the fastest. Unless you're seeding your site with 1 million users overnight, you won't need to scale to 1 million users initially. Getting a website to handle 1 million users is *easy*, just get your product/service out there as soon as possible. With your well-implemented monitoring and a staging environment for load testing, you'll typically know ahead of time what needs to be improved. Just focus on your product, worry about scaling when you actually need to worry about scaling, but make sure you have monitoring from the start.
He has 24 years experience in programming. Not lying. Vague? Definitely. Disingenuous? Maybe, but not lying.
No, mysql_real_escape_string takes care of that.
it looks for 5 characters that match. the suits wont match so get rid of them youre left with 26534 that is found in a**23456**7891jqka
Google for Bug Tracker/Issue Tracker GitHub has this built in.
You could do what most do - Download a copy of osCommerce from 2005, migrate it to modern OO PHP, introduce a plug-in architecture, and call it RajCart.
Thats a lot of work for the exact same logic as $value = intval($value); if($value &lt; 1) die('Invalid ID');
http://cs50.tv teaches you C, mostly, but one of the later problem sets is PHP. The nice thing about it is that the syntax is mostly the same. It starts out with "this is a variable", "this is how memory works", etc. I prefer working in higher-level languages (like JavaScript) where you don't have to worry about the basic stuff like in C, but if you start learning in C, you'll have a deeper background in how it all works.
Well, for working on local projects, I used to love NetBeans because it had great intelligent detection of the code (jump to definitions, object and PHPdoc recognition, parameter information). But with all that intelligence comes a great deal of file scanning, so when I started working on a 200MB+ project over a mounted SSH drive (I'm on Ubuntu), NetBeans simply was too slow. I fell back to Sublime Text 2, where I love the fast jump-to file prompt (Ctrl + P). in another window I use the awesome unix-based "ack" utility which searches an entire directory tree for a given phrase and reports the results with color coding. 
It's not the same logic. Not at all. intval() does a cast, which means it follows php's conversion rules. '123abc' becomes '123'. '0123abc' becomes '123'. 'a123' becomes '0'. When you properly validate, no conversion takes place. The problem is that you're doing something unexpected. It will make no sense to your user who will not be warned of what you're doing, and it has the possibility of backfiring if it's an operation that is supposed to manipulate a record. Say I enter something, and I use a character that looks like a number like: '423l23' - this ID then becomes 423, but it's not obvious why. Don't be lazy. Cutting corners on validation is not worth the risk.
Learning PHP by trial and error is fine, but if you're new to coding, you should really pick up some books on basic best practices. Even a textbook would work.
amen. I just learn php a few weeks ago. most i learn is getting fatal error. and google the shit out of it.
CODA! FUCK YEAH!
1. MongoDB is webscale so of course not. :) Kidding. Making fewer trips to Mongodb the better. I've not worked long enough with MongoDB to say from experience that under load writes cause the same problems for it that they do for a relational DB. I'd guess they do though. 2. Simple answer is I'd use a separate key for each user. Longer answers. If you're dealing with a query then a memcache layer above your database takes care of it for you. If you're doing some complex data manipulation on every check then caching that result and checking for it before going into the routine gets it done for you.
try out [killersitesuniversity](http://www.killersitesuniversity.com) ...the PHP videos are absolutely great and the code challenges are pretty fun to solve! 
Other than continuing to learn PHP (I would recommend Head First, tizag.com and the php docs), also, try getting your hands on a linux system. Most of the stuff that you write will be deployed on a linux machine, and as such it is quite important that you get used to a *nix environment (even mac would do). Get an account on github. Post some code over there. Find out what others are doing, and learn other server-related stuff (for instance heroku)
There is a great PHP5 CMS book written by the developer of Joomla and Moodle. It has a ton of great info, and you can build your own CMS along the way.
[This question has been posted about 15 times already.](http://www.reddit.com/r/PHP/search?q=ide&amp;restrict_sr=on)
How does this react to users that have auto form complete enabled?
This....you can hack away at PHP and get some working code...but if you want to be a *good* developer you need to do some reading on the basics of programming logic, algorithms, and design patterns.
Yes. It always has been...(seriously)
My recommnded editors: Windows: NuSphere PhpEd, MacOS X: PhpStorm
Do you even realize the ludicrous hypocrisy in your own title?? "I think the best way to learn is through hands on experience with trial and error. What's the best book to teach me how to do this?" ###MORON!!
I'm optimistic about it. Just having a gander at their docs now, it's so much cleaner and better organized than the hell that is Typo3's backend. I've been winning most of the battles with Typo3 over the years, but with this, they may finally win the war.
glad it wasn't just me not understanding wtf he's asking lol
I'm sure you're asking a very simple question, but if what you're asking (whatever on Earth that may be...) requires such simple code, it's probably not worth asking *here*. Perhaps stackoverflow.
&gt;Any good tools for managing this? Pretty much any issue tracker does this for you. 
I'm sure it is a good book, but much has changed in the web world in the last 6 years. PHP has obviously changed, but more so the entire web. Newer good books will describe a more complete scenario with HTML5, CSS3, AJAX, server side scripting, and maybe even some APIs like Google Maps, Facebook Widgets and so on.
I like using trello for my personal item tracking. Check it out, very best and lightweight
Trac: http://trac.edgewall.org/ Jira: http://www.atlassian.com/software/jira/overview Big compare page: http://en.wikipedia.org/wiki/Comparison_of_issue_tracking_systems
AWh I missed it! 
If the field is named something lagit it like email it would fill and not validate. It has to be named something that looks to the spammer like it's supposed to be filled with out it being a name, email, address or any other standard contact form field. 
## Test 1 I would add a few more words, because my initial thinking told me _he doesn't want me to use a native function_, and so there's a decent chance I would've just done it all manually style. Perhaps a 'native functions are acceptable' or similar would have clued me in. You could extend this example to add a little bit of complexity though, as one of the better interview questions that I've been asked was essentially: _Given an array of 100 items with values of 1-100, and I remove an arbitrary item, what is the most efficient way to find which was missing?_ The answer was: sum them and subtract the result from the known sum of the unaltered array. $ints = range(1, 100); unset($ints[ mt_rand(0, 99) ]); // which one is now missing? ## Test 2 I think your dox are off? &gt; function addItem($object) &gt; function getItems() and then... &gt; function addItem($object) { … } &gt; function getItems($object) { … } Does `getItems()` really require a parameter? Seems illogical in this context...
What coding standard are you using?
That's great, but opinions change. I see the last time it was asked was 5 months ago, and the time before that was 1 year ago (so I can't even comment on or upvote that post since it's been archived). I think it's a relevant question to ask every few months since we have new-comers (like myself) and old-timers who change their mind.
I'm confused, does anybody know how to see the actual code? Where do I input the [crayon-4fad3c97d26df/] tags ?
Regex is the key to understanding this. I'll try to break it down. function check_straight( $hand ) { return [preg_match](http://us.php.net/manual/en/function.preg-match.php)("/[".[join](http://us.php.net/manual/en/function.join.php)($hand)."]{5}/",'a234567890jqka'); } We begin evaluating from the inside out. This is necessary because we have to resolve the return value of the innermost functions to determine what the return value of the outermost functions will be. [join\(\)](http://us.php.net/manual/en/function.join.php) is just an alias of [implode\(\)](http://us.php.net/manual/en/function.implode.php) which takes an array and turns it in to one long string. Notably, this function can take one or two parameters. If if has two, it uses the first parameter, a `String`, to glue the elements of the `Array` together. If it only has one parameter, it takes all of it's elements and puts them together to form a string. $hand = array( '2c', '6d', 'as', 'jh', '10c' ); $hand = join($hand) // $hand = '2c6dasjh10c'; At this point in the function, we have `join($hand)` which is `'2c6dasjh10c'`. We use that value to concatenate a few strings which will result in the first parameter being passed to preg_match(). `"/[2c6dasjh10c]{5}/"` preg_match("/[2c6dasjh10c]{5}/", 'a234567890jqka'); [preg_match\(\)](http://us.php.net/manual/en/function.preg-match.php) uses [Perl-Compatible Regular Expressions](http://us.php.net/manual/en/book.pcre.php) (a.k.a. PCRE) to evaluate if a pattern can be found. Once a pattern is found, a replace is performed using the second parameter. Regular expressions are a separate topic, but I will try to explain what is happening in this one. The regular expression `"/[2c6dasjh10c]{5}/"` can be broken down in to pieces. 1. `/.../` The slashes are used to denote the beginning and end of the PCRE pattern. 2. `[...]{...}` The square brackets are defining a set of characters that are considered a match. The curly brackets determine the number of matches required in a row in order for the previous element (a set of characters in this case) to be considered a match. 3. `2c6dasjh10c` This is the set of characters that are a match. 4. `5` This is the number of the previous element (any character from the set of `2c6dasjh10c`) that are required in order for a match to be found. When you put that all together, we're looking for *any one character* from the string of characters that make up the hand (`2c6dasjh10c`) five times in a row. This is beneficial for two reasons: 1. This eliminates the need for the hand to be sorted at any point since all of the possible cards have a unique identifier that determines their number. 2. We can ignore the suit character because none of `h`, `s`, `d`, or `c` collide with the possible identifiers for the number of the card. 3. Notably, the number ten can be identified just by `0`. It is as if we are looking only at `a234567890jqka` and seeing if there is a set of characters with a length of 5 that all come from the pool of `26aj0`. There were several tricks required to solve this including: 1. Understanding regex well enough to write the preg_match use. 2. Adding `a` to the high and low end of the card order. 3. Using join() instead of implode() since it's just an alias. 4. Not passing join() a second parameter. (this saves 3 characters) 5. Realizing that the cards containing the suit completely doesn't matter because the sets of identifiers don't intersect. 6. Noticing that there was a single character that represented the value for each card. **This is a great demonstration of why regular expressions are so powerful.** You can accomplish large programmatic tasks by using a standardized compact syntax. There are several different syntaxes for regular expressions including [POSIX](http://en.wikipedia.org/wiki/Regular_expressions#POSIX) which tacks on several character classes as well that let you more concisely define sets of characters (white space, printable, digits, and so on). Some of these are available in other syntaxes (including PCRE) but they often are denoted slightly differently and vary in scope. I've never found a great resource for learning Regular Expressions. I hope that someone here can provide one. There are a few other good resources including [regexlib.com](http://www.regexlib.com/) which collects useful regex from user input and [RegExr](http://gskinner.com/RegExr/) which can be helpful for testing out things that you learn if you don't have `vi` available. Best of luck! I hope this helps! Also: This was a pretty awesome exercise and I *really* hope that you do another.
As a further explanation, this is my impression of `preg_match()`: SET: `2c6dasjh10c` CHECKLIST: `a234567890jqka` TIME TO GO THROUGH THE CHECKLIST! IS `a` IN OUR SET? **YES!** That makes 1 in a row! IS `2` IN OUR SET? **YES!** That makes 2 in a row! IS `3` IN OUR SET? No. Back to 0 in a row. IS `4` IN OUR SET? No. Back to 0 in a row. IS `5` IN OUR SET? No. Back to 0 in a row. IS `6` IN OUR SET? **YES!** That makes 1 in a row! IS `7` IN OUR SET? No. Back to 0 in a row. IS `8` IN OUR SET? No. Back to 0 in a row. IS `9` IN OUR SET? No. Back to 0 in a row. IS `0` IN OUR SET? **YES!** That makes 1 in a row! IS `j` IN OUR SET? **YES!** That makes 2 in a row! IS `q` IN OUR SET? No. Back to 0 in a row. IS `k` IN OUR SET? No. Back to 0 in a row. IS `a` IN OUR SET? **YES!** That makes 1 in a row! DID WE EVER GET TO FIVE IN A ROW? NO WE DID NOT! RETURN FALSE! `preg_match()` is very enthusiastic about its job.
A better question is *why* would you want to do this? What is it you are trying to accomplish? Chances are your problems can be solved with a different solution than what you asked for. 
no, it seems interesting though, but much beyond the scope of this project ;)
I almost benefited from your $0.02, but this PC just ate it up in electricity.
So the fulfillment center is the one forcing this odd CSV format? Can you not use JSON or something else more sane?
You need a *fixture* in your test case. A fixture is a known value that you compare your test order against. Use the setUp() function to create it and then later on use it to compare it to the order file you generate. http://www.phpunit.de/manual/current/en/fixtures.html 
I know there is a much easier way, I was just curious about the ability to do such things. Bottom line is that I am trying to represent random_seeds with small text representations. I know this could easily be done with base64 or any other numeric to text encoding.
I fucking hate you jesus christ why would you post this Upvoted. I don't want to help you, but I bet someone could use the extra $50. Cheers
Why do you hate Jesus Christ?
lol...
I'll offer a second opinion for free as well. Just so you get two views not that the first will be wrong.
Would you mind if I asked you to expand on this a little bit? Obviously they mention 2004 which isn't a great sign - but they also mention PHP5. Is it outdated as in pre-PHP5 as Scroph said?
Then zip/tar/whatever it. I'm sure a lot of people will take a look :)
I'd be interested in reading the exegesis and looking at the code in the end.
&gt; Membership includes… access to PHPU's exclusive community open source projects. I think you may be doing open source wrong. 
Ok, I'll give it a shot, thanks for the quick reply and such
Wait sorry, I realised what this does, this will just place the text boxes into the table. The problem is I can't display any of the data in the text boxes. Is it possible to take the queries I fetch and place them inside a textbox?
Zing.
Yeah, this is probably the first thing OP should learn about modern collaborative software development: (distributed) version control. The best way to do this is to just jump right in and create a Bitbucket or GitHub account and take it from there.
check my edit
no, it came from not using the $row array. You had it just as $Tile. you could've used value='". $row['Tile'] ."' Likewise, everywhere you concat the strings to add the $row arrays, you could use the curlies: echo "&lt;td&gt;{$row['Tile']}&lt;/td&gt;"; It's just a way of inserting complex variable notations into the strings without having to concatenate them. 
I dont find this to be the case. I wish it was though.
Overall MUCH better than the majority of PHP code that I see. Not surprising since you care enough about quality to offer up $50. I just ran through a couple of files, and found a small number of things. Only one of these I'd consider a fairly serious potential bug: * https://github.com/galen/PHP-Instagram-API/blob/master/Instagram/Auth.php#L64 -- unless I'm missing something (possible) you need to urlencode at the very least the redirect URL. It could have any number of characters in it that are bad. The rest are more stylistic in nature, but I still care enough about to mention: * There's a lot of debate about tabs/spaces for indentation in general, but something that's pretty universal is that inner-line indentation should be spaces. See https://github.com/galen/PHP-Instagram-API/blob/master/Instagram/Auth.php and how your hash values don't line up because github uses a different tab length than you apparently do. * https://github.com/galen/PHP-Instagram-API/blob/master/Instagram/Auth.php#L49 -- I find things like array_merge to be far more readable. Is there an edge case that makes array_merge unusable or you just disagree on the readability? * https://github.com/galen/PHP-Instagram-API/blob/master/Instagram/CurrentUser.php#L64 -- I sometimes write code like this too, but always consider it bad. Using temporary variables can make it a lot clearer what is going on there.
Thanks for your comments. - Ill check the Instagram API and see what happens if i URL encode the redirect. The API is weird with that redirect. - I probably should just switch the order and use array_merge. I learned a bunch reading the Lithium framework, and this is how they did it, so it kinda just stuck with me. - The last one i actually just wrote down a note today to refactor that. Its a mess. Thanks again
I made a (somewhat local) file sharing website, and it is very heavy on the css and misc. stuff. It uses a PHP script to load the files from a folder, and echo it along with some table formatting. I want to do the same thing with an RSS feed.
RSS/Atom and HTML are no different. They're just tags. Just make a template with the correct tags, or even go so far as to use the PHP DOM objects, if you want to.
Okay thankyou. I think i'll try to find somewhere else to learn this stuff. I really want to make sure that when I write a big application it's watertight and I don't make the mistake of writing just for myself. I'm hoping to pick up some of the best conventions, but obviously this isn't it. 
 echo . $row['Tile']; Should give you an error. The "." is for concatenating a string, ie "this" . "string" = "thisstring". Since you have no string to the left of the period, this is a syntax error. echo $row['Tile']; should give you an empty string if $row['Tile'] is empty. Check your logs or turn up logging to see if you have a warning that the variable isn't set.
I was going to use SimpleTest. Would it be worth it to learn PHPUnit instead? I usually program with MVC frameworks such as Yii.
ohhh, thats right, that was added recently. i usually use the ternary operator for `isset()` and it doesnt work that way with isset so i forgot. Thanks for the reminder =)
If I'm understanding your question correctly, you should be able to set the .htaccess file to have XML files run on the server-side as PHP. Assuming your web host supports that (some need it set in cPanel to make it work, while others let you set it directly in the .htaccess file).
Careful of using brand new syntax. This looks like library-style code and usually with libraries you want to support more than just the latest version of PHP. In code where you do control the hosting environment though it's fine.
I **highly** recommend Gearman and contribute to the documentation occasionally. 
From PHP Ternary docs: &gt; Since PHP 5.3, it is possible to leave out the middle part of the ternary operator. Expression expr1 ?: expr3 returns expr1 if expr1 evaluates to TRUE, and expr3 otherwise. [PHP Comparison Operators](http://php.net/manual/en/language.operators.comparison.php) Also since this is a "PHP 5.3 wrapper", I would see this as being a legitimate use for it.
I threw it together to test my various trials of check_straight(). I wasn't too concerned with the high ace nor the suits because my code wasn't concerned with it either. &gt; *Also why are you copy-pasting everything instead of generating with a loop?* Procedural generation of 52 cards is overengineering a solution to a trivial problem. I would no sooner write a generator for a simple deck of cards than I would a set of chess pieces or mahjong tiles. &gt; *Also all that copy and paste makes people cry.* DRY principles don't apply to everything. This isn't a library or framework we're writing here. It's just code golf.
When your input name ends with [] it means you are collecting multiple options. So php receives an array. In order to do anything with this, you must iterate over the value in a foreach statement. foreach($_POST['foo'] as $foo) { echo $foo;} The reason you see "array" is because you are treating it as a string. Hope this helps, and sorry if anything appears wrong, posting on my phone at 1:30 am...
 sed -i 's/\t/ /g'
for laymen: run this to replace tabs with spaces
FWIW, the shorthand ternary has a name - the Elvis Operator. https://www.google.com/search?q=elvis+operator Originally named in the Groovy language. A few years ago I met the guy who named it. He named it that because it looks a bit like an emoticon of Elvis (Presley), with the curled up hair. :)
"Using temporary variables can make it a lot clearer what is going on there." Not just clearer, but much easier to debug. About 100% of the code I maintain that has this style of return, I end up needing to rewrite as temp variables so I can do testing on. When something doesn't work, I need to test each condition separately to figure out what's failing, and sometimes add some logging of those values as well. When it's all on one line, as clever/compact as that may seem, it's a real bear to deal with the moment something goes wrong. Same views on 'clever' code that doesn't use parenthesis after a conditional: if(foo) echo 'bar'; echo 'another line here'; The moment I have to do any testing/debugging/logging, I have to add parens. Just add them in from day one please. (Not saying you, galen, specifically, do/did that, just a note about long-term maintenance vs 'I can save 5 keystrokes today!' thinking, which I often see/hear as the root of this type of coding). 
Well, there are two things here actually. **Dependency Injection** Dependency injection is a good thing. This allows you to easily swap out objects for testing or as situations change over time, like you switch from one API service to another. The idea behind Dependency Injection is that one object isn't directly coupled to a specific instance of another object. You pass in any dependencies either via the constructor or setters. This makes you code more robust by allow tests to mock objects, as well as making business changes easier, like changing services. This class is directly coupled to another object type, thereby making it very hard to test: class myClass { protected $this-&gt;service; function __construct() { $this-&gt;service = new AmazonApiService(); } } This next class is easier to test. Let's assume that ApiService is an interface. You can now mock an object that implements ApiService and use it in your tests. You can also swap out the above AmazonApiService with something else without changing your object. class myClass { protected $this-&gt;service; function __construct(ApiService $service) { $this-&gt;service = $service; } } As I said, you can also do dependency injection by using setters, not just constructor injection. You probably do some forms of dependency injection already. **Dependency Injection Containers** These are objects, much like a registry, that contain things that can be injected into other objects. For example, you would store the configuration and objects for your DB connection in here. Let's use the classes from above. We set up a DI Container with our service, so we'd use it like this: $service = new myClass(DIContainer::get('ApiService')); I'll admit, this doesn't look to fancy, and really it isn't. The idea is that there is some central place to manage your dependencies though. DI Containers usually take a config and will build objects as you need them to conserve memory. This is helpful because you can have two configs, such as Production and Testing. Testing can set up a bunch of mock objects for you when doing larger integration tests (though in individual unit tests you'll probably mock things yourself). If you run a Selenium test, you can use the Test DI config to run your tests without having to do anything in your mainline code, just somehow tell your app to use the Test config instead of the Production config. *Edit* I realize I didn't answer the question in your title. Depending on your DI Container, yes, those can be tedious to maintain and you will end up with large config files for them, as you have to specify all your objects and all the things to make those objects work. It's a technical debt thing though, as if you spend a bit more time getting this to work, when it comes time to do testing or even something as simple as changing one object instance for another, you can do it in one central place instead of many.
I would argue that's not over-engineering, since it's like 2 lines of code. It would argue that it's the standard solution, since it's shorter, less error-prone, doesn't make people laugh and shows that the programmer is at least basically competent. Also NOT checking your code works for all possible straights is just plain sloppy and a symtopm of the above. You can't control what the deck gives you, and if the deck give you a high straight and you don't detect it, that's actually a critical bug in a poker game.
To illustrate the problem slightly here is the skeleton DI config from Zend2 (pretty much the least stuff that can be in it): https://github.com/zendframework/ZendSkeletonApplication/blob/e6e2f227eb449fc7cd1028974d16e013dfe5d2a5/module/Application/config/module.config.php on top of that in order to access a DB table using a table object I needed something along the lines of: return array( 'di' =&gt; array( 'instance' =&gt; array( 'Application\Model\Table\Event' =&gt; array( 'parameters' =&gt; array( 'adapter' =&gt; 'Zend\Db\Adapter\Adapter', ) ), 'Zend\Db\Adapter\Adapter' =&gt; array( 'parameters' =&gt; array( 'driver' =&gt; array( 'driver' =&gt; 'Pdo', 'dsn' =&gt; 'mysql:dbname=etrack;hostname=localhost', 'username' =&gt; 'root', 'password' =&gt; '', 'driver_options' =&gt; array( PDO::MYSQL_ATTR_INIT_COMMAND =&gt; 'SET NAMES \'UTF8\'' ) ) ) ) ) ) ); (note that all tables would need to be added to this config) which allows me to do this in a controller: $table = $this-&gt;locator-&gt;get('Application\Model\Table\Event'); $results = $table-&gt;fetchAll(); which is pretty cool but so verbose for what would previously have been so simple in Zend 1. I guess it all just comes down to testing - If you want stuff to be testable all dependencies need to be explicit so they can be swapped out. 
I stopped using Zend before I got that far. The overhead it causes is crazy and not worth it for the sorts of things I do.
Yes. 
I can totally see it being useful in cases where you might need to swap out an entire sub-system for testing purposes - e.g. the part of the system that must interface with a third party for billing/accounting. If it was just a case of using a different config file full of mocks it would make life very simple, I just don't want EVERYTHING to be a config file... I dunno... I'm starting to talk myself around to it now. Maybe it should all just be config for the sake of consistency.
It depends on whether you want the community to take what you have and update the bot code for you.
I do that *all* the time but I do it in code. There is a one-to-one mapping between DI configuration and code except the configuration is more verbose, a new syntax/convention to learn, and less flexible. I think a lot of this config-file-everything mentality is just borrowed from Java where these kind of changes would require a recompile. In PHP, that issue doesn't exist. Also, in PHP, you have a plain script file without a class -- that's how my DI configuration is done. 
Give me the entire code block please
The last example you show is not a dependency injection container. It's a Service Locator ("locator" already hints at that). Service locators are generally considered an anti-pattern. The main difference between a DIC and a SL is that you (generally) don't inject the DIC itself. If you inject the DIC into a controller it becomes a service locator: Your dependencies are again not explicit, because you now accept some magical locator, but don't specify what exactly you need.
&gt; A bunch of people are offering to look it over for free. So I've decided to post the link here and donate $50 to St Jude Children's Hospital. You sir, are a gentleman. First the nice code golf now this. I wish I could hire people based on disposition. Edit: actually after quickly glancing over your source I'd probably hire you anyway. It's a lot cleaner and well structured than many of our entry level employees.
This makes sense, ive added an issue on github to do this. thanks.
This is me being lazy. Eventually i will go back and add more info and examples.
Im not sure what you mean
 A couple of hints, related to your specific problems: mysql.sock - not sure what the problem is. When you say "won't run", do you mean the client or the server? [Here's a build script](https://gist.github.com/2668130) I use for mySQL. I keep my custom-compiled stuff separate from OS-supplied installs, so here, all the mysql stuff lives under /db PHP - there's no libphp.so because you're not compiling mod_php. You say you want PHP under FPM. That means you need to compile php with FPM, compile apache with some kind of FastCGI support, and hook it all up. From a recently built server's httpd.conf: LoadModule fastcgi_module modules/mod_fastcgi.so &lt;IfModule mod_fastcgi.c&gt; ScriptAlias /fcgi-bin/ /web/php/sbin/ FastCgiExternalServer /web/php/sbin/php-fpm -socket /web/php/var/php-fpm.sock -pass-header Authorization AddHandler php-fastcgi .php Action php-fastcgi /fcgi-bin/php-fpm &lt;/IfModule&gt; Note that on that server, PHP was compiled with --prefix=/web/php Feel free to PM me if you'd like some more help setting up a nice bunch of build scripts.
I didnt get offended. My tone was playful, promise.
Some MD5 libraries do actually [generate the constants](https://github.com/leto/asmutils/blob/master/src/md5.asm). But it has nothing to do with execution speed. The constants are generated once over the lifetime of the application and cached for subsequent calls. You must take code golf a lot more seriously than everybody else. Apparently you've never just thrown some code together real quick to play around with. I guess every single piece of code you've ever written has had a suite of unit tests. Well not everybody has that kind of time for throwaway code. Your haughtiness over triviality is starting to make me think you're StoneCypher.
I say you add it to GitHub if you're already using it. I'd have the readme read like your post here. Just say its old, probably doesn't work, and has a neat UI. 
I would never allow this.
Does it use the Facebook API? If so, look through their API regulations and see if it goes against them on any point. If not, release. If it doesn't use the API, it's probably a grey area.
Wouldn't it always be better to build a query string inside the loop, then execute 1 query at the end of the loop? I can't think of any reason to every have insert inside a loop when you could do it this way instead.
I disagree with the auto-complete comment. I find that auto-complete can be a very useful tool when one needs some guidance on what to do next. Things like hinting also helps greatly in understanding the expectations and requirements of functions. I've learned a lot of new functions simply because phpStorm(my current IDE) introduced me to a lot of new functions.
It's not really triviality. Once you're experienced with PHP and have a gorunding in algorithms etc, (see here for how to do it) http://www.reddit.com/r/PHP/comments/tezmi/coding_contest_determine_if_a_hand_of_cards/c4man3d it comes as second nature, and you have to make an effort to doi it badly. It's like golf. Once you learn how to swing a club properly, you do it that way by second nature. You have to make a real effort to swing badly, and you end up feeling dirty.
Then enjoy the lawsuit
How would I go about doing this with the .htaccess? It's hosted locally with an AMP server, just so you know.
That's what pseudonyms/online handles are for.
So if it's your core business you open source it... what???
It is. One common use is to have PHP generate a string such as: $tmp = '$variable = "'; $tmp .= $user_name; $tmp .= '"'; eval($tmp); echo $variable; // Will be the value of $user_name; There are much better techniques to getting around this now, with an example being variable variables. $bob = 'hello!'; $name = 'bob'; echo $$name; // Echo's out 'hello!' from the $bob variable.
 class GETdata function getLocationDB($data) { return $datafromDB } function getLocationURL etc... I mean a framework from someone else as your basic
You (afaik) won't be able to just register the filter function and then do a copy() on the path from $_FILES automagically, but use fopen, stream_filter_append and stream_copy_to_stream to implement a filter-aware copy().
It can be anywhere, but it affects the folder it's in and every folder that's included in it. I.e. if it's in root, it affects everything (unless you have another one in a subfolder to tell it to ignore the root one).
The form looks like this: &lt;form id='contactus' action='&lt;?php echo $formproc-&gt;GetSelfScript(); ?&gt;' method='post' enctype="multipart/form-data" accept-charset='UTF-8'&gt; &lt;fieldset &gt; &lt;legend&gt;Contact us&lt;/legend&gt; &lt;input type='hidden' name='submitted' id='submitted' value='1'/&gt; &lt;input type='hidden' name='&lt;?php echo $formproc-&gt;GetFormIDInputName(); ?&gt;' value='&lt;?php echo $formproc-&gt;GetFormIDInputValue(); ?&gt;'/&gt; &lt;input type='text' class='spmhidip' name='&lt;?php echo $formproc-&gt;GetSpamTrapInputName(); ?&gt;' /&gt; &lt;div class='short_explanation'&gt;* required fields&lt;/div&gt; &lt;div&gt;&lt;span class='error'&gt;&lt;?php echo $formproc-&gt;GetErrorMessage(); ?&gt;&lt;/span&gt;&lt;/div&gt; &lt;div class='container'&gt; &lt;label for='name' &gt;Your Full Name*: &lt;/label&gt;&lt;br/&gt; &lt;input type='text' name='name' id='name' value='&lt;?php echo $formproc-&gt;SafeDisplay('name') ?&gt;' maxlength="50" /&gt;&lt;br/&gt; &lt;span id='contactus_name_errorloc' class='error'&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class='container'&gt; &lt;label for='dob' &gt;Date of Birth*:&lt;/label&gt;&lt;br/&gt; &lt;input type='text' name='dob' id='dob' value='&lt;?php echo $formproc-&gt;SafeDisplay('dob') ?&gt;' maxlength="10" /&gt;&lt;br/&gt; &lt;span id='contactus_email_errorloc' class='error'&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class='container'&gt; &lt;label for='nic' &gt;Personal NIC Number*:&lt;/label&gt;&lt;br/&gt; &lt;input type='text' name='nic' id='nic' value='&lt;?php echo $formproc-&gt;SafeDisplay('nic') ?&gt;' maxlength="50" /&gt;&lt;br/&gt; &lt;span id='contactus_email_errorloc' class='error'&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class='container'&gt; &lt;label for='email' &gt;Email Address*:&lt;/label&gt;&lt;br/&gt; &lt;input type='text' name='email' id='email' value='&lt;?php echo $formproc-&gt;SafeDisplay('email') ?&gt;' maxlength="50" /&gt;&lt;br/&gt; &lt;span id='contactus_email_errorloc' class='error'&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class='container'&gt; &lt;label for='phone' &gt;Phone Number*:&lt;/label&gt;&lt;br/&gt; &lt;input type='text' name='phone' id='phone' value='&lt;?php echo $formproc-&gt;SafeDisplay('email') ?&gt;' maxlength="11" /&gt;&lt;br/&gt; &lt;span id='contactus_email_errorloc' class='error'&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class='container'&gt; &lt;label for='CV' &gt;CV:&lt;/label&gt;&lt;br/&gt; &lt;input type="file" name='CV' id='CV' /&gt;&lt;br/&gt; &lt;span id='contactus_resume_errorloc' class='error'&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class='container'&gt; &lt;div&gt;&lt;img alt='Captcha image' src='show-captcha.php?rand=1' id='scaptcha_img' /&gt;&lt;/div&gt; &lt;label for='scaptcha' &gt;Enter the code above here:&lt;/label&gt; &lt;input type='text' name='scaptcha' id='scaptcha' maxlength="10" /&gt;&lt;br/&gt; &lt;span id='contactus_scaptcha_errorloc' class='error'&gt;&lt;/span&gt; &lt;div class='short_explanation'&gt;Can't read the image? &lt;a href='javascript: refresh_captcha_img();'&gt;Click here to refresh&lt;/a&gt;.&lt;/div&gt; &lt;/div&gt; &lt;div class='container'&gt; &lt;input type='submit' name='Submit' value='Submit' /&gt; &lt;/div&gt; &lt;/fieldset&gt; &lt;/form&gt; 
It is 5, stop asking people on the internet for help on your homework.
It is 7, stop asking people on the internet for help on your homework.
Its over 9000! :D
Because every Joomla site I've had to fix seems to be broken from the ground up. Slow loading, bad code quality and sites seem to break easily if you look at them wrong. I either have terrible luck with Joomla around here, or it is as it shows me through a Google search - that Joomla isn't all that it's cracked up to be.
Hmm. My editor doesn't fix semi-colons for me. I wouldn't want to either. I don't even want it completing my closing apostrophes because it's annoying.
42
I have my vacations ahead, and I want to learn something new during it. I know HTML/CSS and some basic PHP aswell. But what I'm attempting to do here is pretty new to me, as I am not used to getting data from other websites. Could you please link me to something to help me get started? I just need someone to point me in the right direction :3
Is $champions an array? I tried the following : echo $champions[caitlyn_the_sheriff_of_piltover]; echo $champions[0]; But they don't return the ID's, they just return '&lt;'. Also, I found this video : http://www.youtube.com/watch?v=PvEJz6du7R0 Is it possible to get the data using cURL, like in the video?
Sorry I can't be of more help, but JQuery would make the Ajax side of things *much* easier. http://api.jquery.com/jQuery.ajax/ I think you can keep a single PHP file to handle to each form, and just have it check for a hidden form element so it knows which form its handling. HTML: &lt;input type="hidden" name="form" value="a"&gt; PHP: switch ($_GET['form']) { case "a": // do something break; case "b": // do something else break; default: // default behavior goes here break; } I'd also [sanitize](http://www.php.net/manual/en/function.mysql-real-escape-string.php) $q. Never a good idea to take user input and put it directly into a SQL query. I'm new to this stuff myself but that's where I'd start. :)
Try looking into JSON and using JSON with ajax.
This is very nice and is quite helpful. I am however confused what to do with the final part you wrote. var resultObj = JSON.parse(xmlhttp.responseText); var tile = resultObj.Tile; var score = resultObj.TileScore; Do I put this in the existing _getDetails()_ function?
I'm just going to be frank here, your code is very sloppy and a bad way of doing this. As others suggested, you can make this a lot better and easier by using jQuery and JSON. Some suggestions: - Use [json_encode()](http://php.net/manual/en/function.json-encode.php) to pass data between scripts. This makes sure the data maintains structure and labels. - Use jQuery to simplify your AJAX calls. The [jQuery .ajax() call](http://api.jquery.com/jQuery.ajax/) is a lot easier, and cross-browser compatible unlike your browser specific code above. - Lastly, if you want to allow the user to enter multiple RFIDs and get the data for all of them, the best way to do this would be to allow them to enter a comma or newline separated list of RFIDs into a single textarea, and then onKeyUp check for valid minimum length, parse it and perform a single AJAX call which retrieves all the associated Text &amp; TextScore. You could then iterate over that retrieved data (since you're getting it back in JSON it would be in a nice clean format you can iterate over), and put into some divs or something to present it nicely. Here's an example of some JavaScript which retrieves a set of data and iterates over it, outputting the retrieved data as a list into a div (or other container) with an id of 'output-area'. For your purposes you would want to bind this to the user entering data, not document ready, and probably want to modify this to output the RFID, Title and TitleScore. But this is a decent basic starting point for you. $(document).ready(function () { $.ajax({ url: "/script-name.php?arg1=val1&amp;", dataType: "json", success: function (data) { $('#output-area').append('&lt;ul&gt;'); $.each(data, function (key, value) { $('#output-area').append('&lt;li&gt;&lt;strong&gt;'+key+'&lt;/strong&gt; '+value+'&lt;/li&gt;'); }); $('#output-area').append('&lt;/ul&gt;'); } }); });
I like the site. Neat idea. I see some interesting possibilities.
Ah okay, thanks for clarifying :)
I found this : https://github.com/promisedlandt/loldata/tree/9c214067af09b5fb305d765701af83c7c4f93f4e Which does something similar but is in ruby I think.
In your javascript where you are doing: document.getElementById("Text1").value=xmlhttp.responseText; document.getElementById("TextScore1").value=xmlhttp.responseText; You would add the tile and score variables instead of just the response text.
I'm not having a good day. -_-
PCRE is an acronym for Perl Compatible Regular Expressions. Also, they may not have "switched" but support for POSIX is being deprecated. So, no longer supported.
Are you talking about loading the website on https -&gt; redirect before the insecure warning? If so, that's not possible.
currently i am doing this if($_SERVER["HTTPS"] != "on") {//make sure to page uses https header("HTTP/1.1 301 Moved Permanently"); header("Location: https://" . $_SERVER["SERVER_NAME"] . $_SERVER["REQUEST_URI"]); exit(); } at the beginning of the php file to make sure it uses https. I want to insert some code ahead of that to check the ssl certificate and see if it is self signed. if it is, provide my own warning via http instead of letting it get to a browser warning.
I think you might misunderstand where the SSL certificate resides and which side of the communication transaction the SSL certificate originates. SSL certificates are server side. The only thing that clients generally have are pre-installed CA (Certificate Authority) chain certs that allow the SSL certificate chain to verify that the SSL certificate has been signed by a known (read: safe) SSL certificate issuer. This can be mitigated by installing the CA as part of the SSL certificate on the server as part of the SSL certificate installation process on the server. There are also client side SSL certificates, but they aren't traditionally used in web communications (they can be though if you wanted to have a very secure communication setup, but requires some configuration on the client side which is generally beyond most people's skill level).
Yes, openssl has a [verify] (http://www.openssl.org/docs/apps/verify.html) function which can do exactly this. An error of "18 X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: self signed certificate" means the certificate is self signed. However this isn't a problem you want to solve programmatically. If a client doesn't like seeing that warning, all you have to do is explain what a self-signed SSL cert means, and how to buy a signed cert. Even if you can tell if the redirection link is not signed, they client is still going to have to see the browser error message. This seems like something that can easily be explained when you install the CMS or something.
I understand that ssl certificates are server side. a person that wants to install my cms would put it on their server. only the control panel/dashboard would use https but not all people using my cms will necessarily understand ssl certificates. if they go to login to the dashboard for the first time and they are using a self signed cert, the browser will give them a warning [similar to this](http://lh5.ggpht.com/-_DzKBDO9avs/TtNjInHnFTI/AAAAAAAAC-0/8vLq3TO-Lmk/image3111.png) I want to be able to catch they are using a self signed certificate before they see that and recommend they get a verifiable ssl certificate
I think I probably will change the design to ask at installation if they have an ssl cert (not self signed) and if they do not, warn them of the browser warning and tell them to proceed anyway or get a valid cert. that seems to be the easiest way to do it. if i used openssl_verify I would need to figure out where the cert is installed
Explaining it is often the best way to go, Control panels like cPanel and Plesk operate in this manner too with a self signed certificate by default. You can replace it with a full cert if you want, but the only difference really is central verification, and the dent in your wallet. Lets face it, with the pricing of certs the whole SSL business is a bit of a shysters game.
i am changing my design to warn them during installation that they will get a warning from their browser when they first log in and to allow it and proceed anyway. I want to keep using https so that passwords aren't sent in plain text but if they use a self signed cert it could still allow for a man in the middle to get into the dashboard and edit posts
While it definitely reeks of over-engineering — versus, say, just allowing the user to choose between HTTPS and HTTP in the settings — it's not necessarily impossible or even impractical. Just request the same URL, as you're currently on, only over HTTPS, from the server; if OpenSSL alerts you to the fact that the certificate is self-signed (which cURL, for example, will let you know) then you can cancel any redirect you might previously have done. If you get no errors, you can likely redirect safely.
If you're basically testing for a finite, always-the-same number of semicolon delimited fields, that may or may not be empty, you can use: $this-&gt;assertPattern('/([^;]*;){15}/', $line); …where 15 is the number of fields you're expecting. If the lines don't end in semicolons, then use: $this-&gt;assertPattern('/([^;]*;){14}([^;]*)/', $line); …where 14 is one less than the number of fields you're expecting.
Love the site! I think I'll try this sometime soon.
This is a site that I use a lot at work. You can verify an SSL, decode it, or test it against the RSA key. [SSL-shopper](http://www.sslshopper.com/ssl-checker.html)
Don't use PHP for anything but frontend crud applications.
Check out some open source solutions that could satisfy most if not all your needs and if there is a great solution but does not satisfy all of your requirements, EXTEND do not modify the source code. This will allow you to keep your proprietary components your own as a lot of open source software requires you to submit your modifications back to the repo.
That is an excellent, very concise explanation. I really like your edit, as well. I feel like I would not have been able to explain it nearly as well. Thanks!
I disagree, though you make great points. I feel like I *must* define exactly which dependencies to inject. I want it to be very explicit. Not to mention that if you want multiple instances of an interface, you would likely run into problems with a zero-config DIC. With, for example, Symfony2 DIC, you could set up multiple loggers: one for web services, one for exceptions, etc, all extending the same ILogger interface. Then your different services are configured to use the logger they want. Obviously, there are ways around this (creating two interfaces: IWebServiceLogger and IExceptionLogger) but I digress. I admit, though, for smaller, simpler applications, the amount of configuration can be too much. However, for larger applications (which I tend to work on) it is better to be explicit. I think in the end it's down to personal (and team) preference and both ways have pros and cons. edit: clarity
True. Also check out Murach's books on the topic 
I don't think it's ever going to compete with phpDoc feature-wise, both out of practicality and a deliberate effort to keep things simple. A description, an explanation of arguments, and a statement of the return values is probably 99% of the use of phpDoc; by abandoning the rest of the functionality, it's possible to keep things much simpler and more elegant. The other features are great suggestions, though.
For browsers that "silently" drop broken HTTPS resources from HTTP pages, so you can do this: &lt;img src=https://mydomain.com/blank.gif onload="location.href='https://mydomain.com/'" onerror="location.href='http://mydomain.com/buy-a-cert/'"&gt;
I think codeigniter's is the best. I don't really know what's bad or what I would improve but I like the fact that its more of a reference. Compared to like symfony which is more of a book you have to read as opposed to looking up stuff?
Sadly while I really like Kohana, it's probably got the worst documentation :( CodeIgnitor and Zend probably have the better documentation sets. How would I improve Kohana's documentation? More guides on how to use each part of the code. How tos for all different query types, rather than just having to live with function look ups. Up to date documentation, a lot of the older stuff is more thorough but out of date, which is especially annoying when Kohana is a framework that's based on the idea of changing more often than not, i.e. performance and new PHP feature usage over backwards compatibility. 
I prefer Zend as a framework but CI has way better docs. Havn't looked at anything else.
Just started using PHPStorm recently too, loving it :)
I mean mostly in basic areas like improving HTML output, e.g., multi-file, which will need some sort of class listing in a sidebar, things like that. I wouldn't go so far as trying to emulate too much of phpDoc though, you'll definitely end up losing your value proposition over it by doing so. Thinking about custom design themes, maybe you can allow someone to specify a `--header=my_header.html` and `--footer=my_footer.html` to be included in your output instead of a full theming system, or even just `--css=my_styles.css` to override the defaults. Just a thought... :) Looking forward to seeing where this project goes!
Not for me it didn't. Then again, I'm used to the PHPDoc syntax.
Agreed, Kohana's documentation is the absolute worst there is. I spent a couple weeks with it and kind of like it, but I know I'm going to miss some feature of it because it's not documented. I recently started messing with CakePHP and absolutely love it. Very well documented and some REALLY awesome features.
I'm looking at the code for this, and I don't like it. Not because I dislike the documentation format - I think it's a huge step up from javadoc-style - but because it uses regular expressions to parse PHP code. PHP has all of the "finder" and most of the "parser" functionality built into it, through the Reflection extension. The only detriment to doing so is that you have to run the code through the PHP engine first. What my suggestion would be is, let the user define a manifest of what they want to have documented, which would include non-executing code (code which actually performs operations, rather than definitions). Then, simply iterate through `get_declared_classes()`, `get_defined_functions()` and so on, instantiate the appropriate `Reflector` for each one, and check `::getFileName()` to ensure that the class is included in the manifest. Then you can simply use `::getDocComment()` to get the preceding doc comment. What's better, you can then have a setting for your tool which will allow the user to specify whether they want you to insert missing docblocks. For any class/function/etc that is missing a docblock, simply insert a skeleton docblock with the appropriate data filled out. **Edit:** Honestly, even if you're not willing to use Reflection, you can still just use the built-in tokenizer to parse the PHP. There's no reason to use regular expressions on PHP source code. `token_get_all()` would allow extraction of all comments.
They're both mostly overkill. Use tests to document your code. Comments and inline docs get out of date pretty quickly. A valid test, by definition, is never out of date. Reading over a test suite can provide more insight than a ton of docblocks.
Try MaxMind. They offer free country/city geoip databases, and a PHP library to read it. http://www.maxmind.com/app/geolitecountry
phpdoc kind of does the job, but you have to have the appropriately tagged documentation to begin with. It might be somewhat helpful with straight code. Depending on the size of the codebase it might crash tho. I tried to run it on our project including the Zend Framework and it ran out of memory.
Thanks! I applied for a job at one of my countries most popular newspapers, and I'm going to talk to my employer about the quality of this exam.
&gt; A system designed for machine consumption is great when you're using that particular IDE... It's not necessarily any particular IDE but any static analysis tool. Static analysis is like unit testing or a code convention -- if your project requires that than anyone hacking on the project should do it. 
[http://ipinfodb.com/ip_location_api.php](http://ipinfodb.com/ip_location_api.php)
Yeah, I definitely agree with this. It's on the todos to take a look at reflection — I only hadn't done so out of wanting to get something up and running quickly; having never used reflection, it never really entered into my mind that early on. Feel free to fork!
&gt;CodeIgnitor and Zend probably have the better documentation sets. So let's compare CodeIgniter and Zend. What do you feel each do better than the other?
I take it you didn't score as well as you thought you should? I just took it and if someone can't get at least 80% of them right, they need to study harder.
I've played a bit with the built-in tokeniser and I just don't think it's going to work — certainly not without switching to phpDoc-style docblocks, anyway, and that's something I'd wanted to avoid if possible. As it stands, though, using the tokeniser is going to be more error-prone and hacky than parsing with regex, which is saying something. (For example, with the tokeniser, how do you know that the comment block precedes a function definition? You have to test the next token for T_PUBLIC, T_PRIVATE, T_PROTECTED, T_ABSTRACT, T_FUNCTION, etc. — and if you miss one, or if PHP adds one later, that's it — you miss the whole docblock.)
Heh, I remember doing couple of their tests for free, LONG time ago. I even printed out couple of the certificates, no idea where they are now.
Yeah this is definitely possible. You would need to setup a **cron job** to execute a PHP script every so often (for example, every 5 minutes). This script would send a single email containing all the items added to your database since the last time it ran. If nothing has been added in the last 5 minutes, no email would be sent and it would simply check again in another 5 minutes.
Why? 
&gt;"I only missed three questions" Erm.. No, you didn't: &gt;Correct/Total: (34/40)
My last experience with Brainbench is 2+years old. I have 3 certs from them, they are nearly worthless (i.e. recruiters/employers don't care). Their tests don't assess things you'd use on a day-to-day, and their multiple-choice answers always offer a few gotchas. IMO it's not worth your money to buy their service. If somebody forces you to take their test you should know that they'd rather throw money at testing than have a technical interviewer ask you a few intelligent qualifying questions. That doesn't mean you should run as soon as they mention BB, just be aware that they probably have more money than sense.
He's in the top 5 percentile in PHP, but the bottom 5 percentile in math.
I've only used it a couple of times, but [Doxygen](http://www.stack.nl/~dimitri/doxygen/) works well enough.
Thanks a bunch I'll try it out now :D
wow, you're building json strings manually instead of using json_encode() ? try this: echo json_encode(array( 'Word_one' =&gt; $row['WordOne'], 'Word_two' =&gt; $row['WordTwo'], ));
It works beautifully. All my upvotes good sir.
Awesome, glad to help!
I'd definitely disagree with this, and this is as someone who heavily advocates test-driven development (and who used test-driven development to write php-tomdoc!) Tests and documentation are complementary but serve entirely different purposes, IMO. When I approach a new codebase, I'd much rather see a well-written, two-line summary of what a method does than try to decipher it from a test suite.
What about the CodeIgniter documentation do you feel is better?
Tokenizer can be a pain to use, but Reflection is pretty solid. I decided to try writing my own doc browser for my framework today after seeing this discussion, and my results for just an afternoon of tinkering are pretty positive: http://imgur.com/AwxK7 (it's not online just yet) Key source code bits: * https://github.com/jbroadway/visor/blob/master/handlers/lib.php * https://github.com/jbroadway/visor/blob/master/lib/Visor.php Hope that helps give you some ideas how it might work for you :)
Wow, these are sweet results. I got 3.82 with weak areas within db (it's almost the only thing I do, but I do PDO and MySQLi) and general functions.
I find @ tags to be useful though: we're programmers, we can deal with looking at code. If I want to see what something returns it's easier to scan for @returns.
$49.95 per test, and anything recent is "coming soon." Heh.
Could be 20 questions, two points per question.
It's not built into a framework. It's simple. There doesn't appear to be any html rendering.
Until you get a bunch of: /** * Returns the ID. * * @returns id integer * @group Item_Group * @author Bob Saget &lt;bsaget@site.com&gt; * */ public function getId() { return($this-&gt;id); } Docblock zealots take the documentation to the furthest limits and start doing that and that's bad code in the guise of good code. Read _Clean Coder_ by Uncle Bob Martin. If you don't agree with everything he has to say, at least it'll make you think about your code.
i really like the tutorials of Yii on their site.
I usually rely on their lib, it's good enough.
Thanks for answering his question and not beating him up for code style. We need more of this on /r/PHP 
CakePHP has a bunch of CRUD scaffolding it'll do for you relatively easily. You could probably modify their [Blog tutorial](http://book.cakephp.org/2.0/en/tutorials-and-examples/blog/blog.html) to handle what you want.
I understand that PHPDoc syntax is maybe not the best, but it is by far the most supported and the most widely adopted when it comes to documenting PHP code. You might not like it, but you should really still be using it.
https://github.com/apigen/apigen &lt;-- I have yet to try this project, but it does seem a lot nicer than PHPDoc.
Your project actually inspired me to start a project of my own, for a tool that will go through a set of PHP sources and add inline documentation automatically, based on the Reflection data available. It'll be [here](https://github.com/TheFrozenFire/PHP-Doc-Comment-Generator) when I push my initial bit of work. Let me know if you have any questions. I'm part of the PHP documentation team, so I have a pretty good idea about what does work, and what doesn't, when it comes to documentation.
Yii's API has the "Gii" tool which can easily generate models and CRUD for you, so long as the database is put together properly. (That means FOREIGN KEYS and the likes~!)
I'm going to assume it's critical that the emails go out, so this is enterprise level thinking (probably one of many ways). Try maybe a message bus into the mix. Perhaps overkill for your situation, but it's how an enterprise level solution would work. The basic idea: 1. cronA to poll the rss feed table. Populate an rss entry table. 2. cronB to poll the database queue up a list of emails to of newly created. 1. table_user_RSS a row for each story to be emailed, additional column (datetime) emailed=null 2. create message bus message, saying email userX. 3. Email Service 1. send to to the email service. 2. query database, table_user_RSS, where user = userX, and emailed is Null. 3. send email out 4. mark rows emailed = now(); 5. reply to message bus, that the message was successfully consumed. 4. [throw in a check against the user, if you've emailed them within the last ten minutes]. This may depend on your business logic. Reason why to use the message bus: 1. If the message bus message is not consumed, it can be retried. I.e. if your php script failed [overloaded server], another server can retry the message. 2. If you have 50K+ users using it, you will not crush the cron job. If you have tons of emails that you need to send out, spawn a new email service, to double your capacity. With this method, the servers can pretty easily be load balanced. Again, probably overkill for what you want to do, but if not, I hope this helps.
&gt; Your use of closures forces the use of PHP 5.3; so why not use namespaces and be PSR-0 compatible to make it easier for people to use your code? I came here to say just this. If you've used a common class name like "Inspector" and haven't chosen a vendor string and implemented PSR-0, I'm going to have to go out of my way to use your code. Once you've done that you should add Composer and upload to Packagist.
I don't mean to hijack the thread, but what is the point of having a framework if it's not documented? I know that digging into the guts is a good learning experience, but one of the main reasons to use a framework is quick development. /soapbox
http://www.vfront.org/ and http://www.dadabik.org/ come to mind. We use vfront for some apps here, nothing big or public facing, just internal, quick edit database stuff, that isn't too different from what you get from phpmyadmin. 
No, the code I have scans the files in a folder and displays it with some formatting in a for loop.
Congratulations on learning so much in a year and a half. The quality of the code in this framework doesn't usually fit the description of someone with that little experience. I'm assuming you also have extensive experience with other languages? A few things: From the little code I see, it appears you're using models as simply database layers, when models are so much more than that. A model is where the logic for your application belongs - anything that is not route-related (controller) or template-related (view) goes into a model, or a module. Your session class uses the singleton pattern, which I disagree with. For one, you only allow using the native PHP sessions, which would disallow any sort of scaling. Permitting users to choose which session handler they wish to use, be it memcache or database or cookies or native, allows more flexibility. Making your session class non-static also allows multiple session handlers to be instantiated at one time. I can't seem to find where you define your routes, however.
Yes, and you want your RSS to include those files, right? &gt; &lt;rss version="0.91"&gt; &gt; &lt;channel&gt; &gt; &lt;title&gt;The Smallest test channel&lt;/title&gt; &gt; &lt;link&gt;http://www.thesmallest.com/&lt;/link&gt; &gt; &lt;description&gt;Example channel construction test&lt;/description&gt; &gt; &lt;/channel&gt; &gt; &lt;?php foreach(file){ ?&gt; &gt; &lt;item&gt; &gt; &lt;?php PRINT DETAILS HERE ?&gt; &gt; &lt;/item&gt; &gt; &lt;?php } ?&gt; &gt; &lt;/rss&gt; 
That's pretty much what my current code looks like, except it generates a whole item; 1 for each file. My only concern is that it doesn't run.
Tomorrow :\ I'm in bed on my iPod. And my parents sent me to bed. Yes, I'm younger than you may have thought.
haha, i don't judge anyone!! i'm going to bed before my wife notices how late it is :D
I also have tests tomorrow, so I shouldn't even be on reddit.
Good points. Like I said, he should only post it if he wants free labor on the project. Lots of talented people have figured out that it's smarter to improve the wheel than re-invent it.
Instead of donating that money to charity, why dont you donate it to free software? Give something back to the people who helped you to be able to code this. Be it Apache, PHP, Linux (if you use it), your IDE, anything related.
Thanks! PHP was my actually first foray into programming, but I try to put a lot of thought into what I write. To respond to your feedback: &gt; ... models are so much more than that ... Those are some good points, I'll definately do some research on model design. &gt; Your session class uses the singleton pattern, which ... I've always suspected that class to be dirty; Thanks for reaffirming this. I'll research PHP session handling methods and re-impliment the class as a handler agnostic/configurable non-global object. &gt; I can't seem to find where you define your routes, however. Heh, caught me, I just haven't got around to custom uri-routing rules yet. I'll remove 'URI-routing' from the README.md for now. Your comments were very helpful. Thank-you.
I don't believe you can use `simplexml_load_file` in that way. It is generally for loading a local xml file not a xml url. You need to read the data from the URL into a variable, then you don't need simplexml_load_file and can apply it directly to the `new SimpleXMLElement( $xmlString )`
Prefix of the classes is more of a programming taste thing. I don't know how they did in PHP4 times since i've only written PHP3 and PHP5. The underscore is more of a mark of importance. call_user_func_array is slow so it switches and calls the functions directly instead. True about the static public validator functions, I will fix that. I will have a look at PSR-0 since there is a demand for it. And I do like pull requests. Thank you!
As long as [allow_url_fopen](http://www.php.net/manual/en/filesystem.configuration.php#ini.allow-url-fopen) is enabled you most definitely can.
I sorta meant tests for your library. Typically authors will package their unit tests with the source. If you do have unit tests, I'd urge you to ship them with your library. This way people who want to contribute will know if a change they made broke any intended behaviours. Despite my nitpicking, I do like what you did here.
 $apFeed = 'http://hosted2.ap.org/atom/APDEFAULT/3d281c11a96b4ad082fe88aa0db04305'; $xml = simplexml_load_file($apFeed); foreach($xml-&gt;entry as $entry) { $link = (string)$entry-&gt;link['href']; // Do whatever you want with $link } 
&gt;Ex: $username = mysql_real_escape_string($_POST["username"]); Using prepared statements is technically better, as they're actually immune against SQL Injection. &gt;PS: About the XSS, look up a function to, again, sanitize input. I recommend using regular expressions. Great. [Now he's got two problems](http://www.codinghorror.com/blog/2008/06/regular-expressions-now-you-have-two-problems.html). It's been said time and time again: [DON'T USE REGEX FOR HTML](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454). Use a proper HTML parsing library instead. 
HTML? I'm talking about Comment forms and other things with user input that is displayed to other users. EDIT: Yeah, the PDO class is technically better, however it is a little advanced.
I know this comes up every single time, but use prepared statements. MySQLi and PDO has these built in. **[MySQLi](http://php.net/manual/en/book.mysqli.php):** $id = $_POST['id']; $query = "SELECT name FROM names WHERE id = ?"; if ($stmt = $db-&gt;prepare($query)) { $stmt-&gt;bind_param("d", $id); $stmt-&gt;execute(); } **[PDO](http://php.net/manual/en/book.pdo.php):** $id = $_POST['id']; $query = "SELECT name FROM names WHERE id = :id"; if ($stmt = $pdo-&gt;prepare($query)) { $stmt-&gt;bindParam(":id", $id, PDO::PARAM_INT); $stmt-&gt;execute(); }
Thanks for your reply, but as a n00b I have no real idea what these things are. If you have a link to a good tutorial, or somewhere that goes in to these things indepth that'd be a great help.
that's right. It could be easily done beating him up, with this kind of code. The best way is always to break up the string and add them with a dot. Safest way to avoid syntax errors. Avoid escaping. It can be very dangerous...
I second that. Also the free GeoIP database they provide is accurate enough.
Didn't know that was possible.
No problem. :)
I understand that you're only trying to help and educate, but it comes across as very condescending and rude.
Hm, so you do. I think I extracted the php file and didn't look again. My mistake.
The others gave you proper solutions to the problem, but I thought I'd let you know what was wrong with your attempts as well. Your first code block: echo'{"Word_one":"$row['WordOne'];", "Word_two":"$row['WordTwo'];"}'; Here the issue is concatenating the strings. A semi-colon is only used to signify the end of a line/expression. A full-stop/period is used to join (concatenate) parts of a string together. So the above line would work if you tried this: echo '{"Word_one":"' . $row['WordOne'] . '", "Word_two":"' . $row['WordTwo'] .'"}'; Second one works like this: (obviously rather ugly and hard to read) echo"{\"Word_one\":\"" . $row['WordOne'] . "\", \"Word_two\":\"" . $row['WordTwo'] . "\"}"; Your third one would work like this: (issue was lack of semi-colons for each line) echo "{\"Word_one\":\""; echo $row['WordOne']; echo "\", \"Word_two\":\""; echo $row['WordTwo']; echo "\"}"; 
Thank you - Everyone on this PHP subreddit is exceedingly helpful, and you are not exception. Have an upvote.
Cabbage is good.
 $data = file_get_contents( 'http://hosted2.ap.org/atom/APDEFAULT/3d281c11a96b4ad082fe88aa0db04305' ); preg_match_all( '#&lt;link .+?href="([^"]+?)" /&gt;#', $data, $match, PREG_SET_ORDER ); if( count( $match ) &gt; 0 ) { array_shift( $match ); $links = array(); foreach( $match as $link ) { $links[] = $link[1]; } } print_r( $links ); the preg version. just benchmarked it because i wanted to know ... for science: PREG in 0.00019192695617676 seconds XML in 0.00053811073303223 seconds (yes, i excluded the file_get_contents from the bench and i used xml_load_string for obvious reasons.) :D SCIENCE!
Use PDO statements. mysql_real_escape_string is vulnerable to attack.
Oh, I thought you were bashing me here, noticed down votes. Sorry, my bad :)
[Again?!](http://www.reddit.com/r/PHP/comments/takqp/php_websocket/c4l0n6l) Get out of here. Shoo!
I wont give up until you all learned that php isn't the solution for everything. nor is mysql. :P
&gt;I wont give up until you all learned that php isn't the solution for everything. nor is mysql. Nowhere have I stated that. Point is, you're not answering the OP's question about how to protect against SQL vulnerabilities. "Use mongodb" is not a valid answer to that question. You keep doing this, over and over, so it's quite clear that you're just here to troll rather than providing useful discussion. 
I never said anything about how advanced the code was, or if Nicoon was correct or not. I simply stated he came across condescending. Nowhere did I give any indication I don't already understand and agree with all the points that he makes.
&gt; OP's question about how to protect against SQL vulnerabilities. don't use SQL. valid answered was given.
Yeah, gotta cast the values explicitly. Its one of the gotya's in php and simplexml. 
So many nopes &amp;#3232;\_&amp;#3232;
Troll.
Is there any sort of (reliable) "code validation" services that one can run code through to check for obvious security holes?
I recently found some element values in a feed I was loading wrapped in CDATA sections. Example: &lt;link&gt;&lt;![CDATA[http://www.goodreads.com/review/show/133316513?utm_medium=api&amp;utm_source=rss]]&gt;&lt;/link&gt; When I'd **print_r** the SimpleXMLElement object these values would be empty. The feed you're loading doesn't wrap its values in CDATA but this might be useful if you're thinking of loading feeds from other sources. To get the value of these elements add a third parameter to the simplexml_load_file() function, LIBXML_NOCDATA. simplexml_load_file($apFeed, 'SimpleXMLElement', LIBXML_NOCDATA); Note: A PHP version &gt;= 5.1.0 is required for this to work.
https://chorizo-scanner.com/
Interesting! I will give this a look. Thanks for the link.
I agree. IMHO, the main change concerns the export system: by default it displays a simplified view, so simplified that it doesn't even show if it exports structure or data. On the other side, the detailed export view is now more verbose than before, so much that it's hard to find anything in it. We switched to [adminer](http://www.adminer.org) a couple of month ago, I'm still glad we did so. It is much faster. Its user interface is lighter. Now we can open several tabs (no frames).
&gt;It will save your code from XSS Attack. Slightly misleading sentence. It will save your code from creating a XSS attack vector in instances where you otherwise would have used PHP_SELF, but it certainly won't save your code from other injection points.
Hah, I beg your pardon, I appear to have thought that your reply to Nicoon was from the same poster that he had initially replied to. My apologies.
That's very true, Dunhamzzz, I wasn't aware that the config file could be altered to turn off the ajax features. However, my reasoning for upgrading is also for security, since one would assume that given time, vulnerabilities are discovered, patched, and released into a newer version.
TIL, thank you.
In phpmyadmins config, turn off ajax, it makes it all better. Also whoever decided the create table popup window was a good idea can shoot themselves. Also the export page is so much more cumbersome to use, Instead of quickly clicking a few checkboxes, I now have to expand and search through a list of labels that have near zero individualization from all the others to find the options I want.
If you're working on a mac, and when you're at your work station, I recommend [Sequel Pro](http://www.sequelpro.com/), extremely awesome app for managing databases.
YES. That table creation "modal" needs to sod off and die. The fact that it's a modal when you create less than X columns, but is a page after more than Y columns is just mind-boggling. *Edit* Added to the list
Dude, PHP is procedural. Stop trying to make it something it is not. Look how much time you are spending making a custom language on top of a language that already exists. What a showoff-y waste of time. Programmers are so unnecessarily pompous somethings.
I agree. It seems like everything they have done, most likely to increase ease of use, has actually caused me all kinds of frustration.
I wouldn't use phpMyAdmin on a production server, I just don't trust any 3rd party web-app with admin access to my db server. The web-server gets basic CRUD permissions and all management is done via remote MySQL over a secure connection. I use http://www.heidisql.com/ (free/feature-full/fast).
Does it have any themes that are actually easy to view/read/comprehend?
I switched to [MySQL Workbench](http://www.mysql.com/products/workbench/) a while back, and although I hate how it refuses to remember the interface settings (I don't want the SQL query window to cover more than half the window, nor is connection information at all needed), the benefits far outweigh the annoyances.
heidiSQL is great, using it here too
I agree. Since they added the AJAX system, queries randomly don't work (particularly select with multiple joins) or results don't actually show (e.g. an update/insert might not tell you that it's done). Coupled with the fact the UI has always been pretty awful.
Normally, that would be what I would do, except it seems as though they are focusing more on the UI instead of functionality. Not that there's anything wrong with that... I just find that their approach to upgrading the UI tends to be a "one step forward, two steps back" sort of thing.
Damn, this is a nice looking app. Simple and efficient. I think I might be a convert as well.
I'm not agreeing with your exact issues - but I agree with you on the general note that PhpMyAdmin is for lack of a better word - *dying*. It needs new developer blood in there...
On a somewhat related note, I recently discovered a super easy way to cast a SimpleXMLElement to an array or object: $xml = simplexml_load_file($apFeed); // To an array $arr = json_decode(json_encode((array)$xml)); // To an object $obj = json_decode(json_encode($xml)); Thought that might be useful to some of the people here.
This article lost my vote when it started talking about reducing the error message level during development.
Yes. You are right. It will save the page from scripting attack.
I've hated graphical SQL tools for the longest time, I do all my direct interaction with databases on the command line. I used PMA when I was first learning PHP, and it was handy then, but I can't stomach it these days. Partly because of unnecessary UI "enhancements" slowing stuff down, as you mentioned, but mostly because it's just quicker to type stuff out, and it leads to a better understanding of all the weird and wonderful syntax of (My)SQL. Win win.
This is what really bugs me too. Why would phpMyAdmin need shiny ajax and hide/show javascript? It seems like anyone that is exporting a database doesn't really care about shiny, and just wants their db. 
By chance, have you updated it lately? The latest versions don't seem to have those issues you listed, unless I'm mistaken.
Two additional problems: 1. If you enter a table (let's say table `a`), then write a SQL query returning data only from a second table `b`, then attempt to inline edit the results, it will throw an error because it can't find `b`'s fields in `a`. 2. I also had a problem with inconsistent behavior of SQL query boxes and delimiters. Some boxes barf if you include one, others don't. I can't seem to replicate the problem at this time, but I think it was a problem when I was creating triggers. Also, when I *can* inline edit, the CSS goes all wonky as table cells are permanently "highlighted" for no reason.
You can hardly knock them for promoting their software on their own website.
The very first thing I do when I install a new myadmin copy is add the following to the config.inc.php file. $cfg['ThemeDefault'] = 'original'; //get rid of that ugly-ass pmahomme theme. $cfg['AjaxEnable'] = false; //disable ajax requests, since they don't give any browser status while running $cfg['LongtextDoubleTextarea'] = false; //don't need HUGE text areas on longtext fields. $cfg['MaxRows'] = 50; //change the default row display count $cfg['PropertiesIconic'] = true; //icon only row action links $cfg['DefaultTabTable'] = 'tbl_properties_structure.php'; // action for clicking table name is to edit the structure $cfg['LeftDefaultTabTable'] = 'sql.php'; //action for clicking the mini-icon is to browse $cfg['Export']['method'] = 'custom-no-form'; //disable the "quick" export feature. $cfg['Export']['sql_drop_table'] = true; //add DROP TABLE IF EXISTS to SQL table structure exports This disables many of the new "features" that have damaged it so much, tho sadly it will not restore the original export screen.
There's promotion and then there's slandering the competition. I'm pretty sure calling PMA "not smart" counts as the latter.
For science, read this http://stackoverflow.com/a/1732454/523794 :)
im not "parsing" html. im extracting a single value out of a predefined, always formatted the same way, text document. ;)
What I do now is installing PhpMyAdmin on localhost and put all my mysql servers in the config file, so I can access any of them from one PhpMyAdmin. That said I also use HeidiSQL but it crashes sometimes.
&gt; since I have my browser cache disabled with the Web Developer Toolbar. More seriously (and a bit off-topic), if you need have your browser cache disabled via the browser, this probably indicates a bug in the way you do website development. Another way to look at it is that your clients won't have their caches disabled, so if your website doesn't specify the proper HTTP headers to invalidate your cache, it probably won't invalidate their cache either, causing some possibly bizzare support issues.
When I was on Windows, HeidiSQL was the best.
Here's a pretty neat open-source forum I found the other day, it's more of a BB than a reddit-type system, but you might be interested. http://esotalk.org/
At the point where you have spent this much time with mysql, isn't it time to switch to the command line? Are there things you are doing in phpMyAdmin that you can't do as quickly from the CLI?
It will take more time to completely rewrite the entire app, but that's an option as well.
They are attempting to AJAXify when it's unnecessary (and poorly implemented). This is a tool for developers and sysadmins: we can wait for pages to load, and we would rather our "loading monitor" be managed by a browser's UI rather than the "spinning wheel of uncertainty". A fully rewritten "PHPMyAJAX" might work, but their shoehorned in stuff is just confusing and unneeded!
Symfony 1 and 2 both let you reverse engineer a schema from an existing database and build a CRUD module in 3 cli commands. /Symfony fanboy
This is a [45min video I made several years ago](http://videos.code2design.com/video/play/PHP/11) about many different types of attacks and problems. Some of the info is outdated, but it's a good start. Actually, compared to the "PHP security" tutorials I've seen - it's a *great* start! 
Are you sure you're connected to the database through PHP? Try putting or die(mysql_error()) at the end of your mysql_query statement and see what you get back.
$query_result != $result $result isn't set, so it shows it false and mysql_error() comes up empty.
TIL some people still use phpmyadmin
portable code, seamless connections to additional databases, division of labor, etc. include("/path/to/dbclass.php"); $db = array(); $db[] = new databaseclass("host", "user", "pass"); $db[] = new databaseclass("host2", "user", "pass"); etc etc.. However slightly off topic, I'd recommend changing to PDO to eliminate the constant need to mysqli_escape_string everything.
Thanks, ill check it out. The db class array is actually appealing, it wont be long until we need multiple servers. I wasn't sold on the portability of it since moving to progressql etc will likely need a lot of changes to the queries anyway, but if I aim to convert to PDO that wont be a problem in the future.
/r/phphelp
http://pastebin.com/5m530WRU This is the PDO database class/wrapper I wrote/use. Below are some usage examples: //make database connection $database = new database_pdo("mysql:dbname=mmIntranet;host=192.168.0.7", "loginUsername", "loginPassword"); //run an insert query with raw user input. PDO handles the data security for you $array = array ( ":id" =&gt; $toDoID, ":data" =&gt; $v, ":priority" =&gt; $priority ); $ret = $database-&gt;justquery("INSERT INTO com_toDo_listItems (toDoID,data,priority) VALUES(:id,:data,:priority)", $array); //returns boolean true/false //simple select query with no parameters. returns array of objects $users = $database-&gt;query("SELECT * FROM com_users ORDER BY userLastName ASC"); //returns array of objects or false on error //instance where you want just the first row of results as an object instead of an array containing 1 object $user = $database-&gt;loadFirstRow("SELECT * FROM com_users WHERE userID = :id", array(":id" =&gt; $userID)); //returns object or false on error //instance where you want the value of the first column of the first row of your query result, useful for count queries. $totalUsers = $database-&gt;loadResult("SELECT count(*) FROM com_users"); //returns raw value or false on error
just saying, im sure you wouldnt give your money to a site like that either.
You definitely want a database class. It should have the ability to log errors, only create a single connection per request, and should use binded parameters via PDO. There are some other fancy things I like to do in my own like log queries to FireBUG via FirePHP in dev and staging environments.
It happens to everyone. I can't even count the amount of times I've done that with typos.
Ok cheers, I think I am sold on the move to PDO.
Cheers buddy, looks very useful, I wont steal your code but its good to see how people with experience do it.
Is there a high turn over rate where you work? It sound's like you're working in a much more stressful environment than is healthy. Employers try to get the most out of you for the least amount of money. Plenty of managers find the easiest way to do this is to pressure their employees and make them think they're not doing well. Keep the stress high enough and they might even to too lazy to look for another job. The economy has made this even worse. This tactic should not work in our field. As programmers we are a very valuable asset and our skills are marketable. Polish off your resume and find a new job. Look for a place using modern tools and where people work in teams.
Take a step back and remember that of the 3 (Quality, Speed, Cost) you may select 2. You have to make sure your company is aware of this as well. I don't know of one developer who isn't required to deploy code that they are not quite happy with due to a client demanding a release or their company forcing them release the product. I am with you in the fact that I strive for high quality code and do not like any bugs in the UX. However it is unrealistic to think you will ever deploy a 100% bug free system, even in just the UX, let alone the entire system. Demand the best work from yourself, but don't let it get to you when you create bugs. Just strive to be able to detect the cause of bugs and patch them with increased responsiveness. I can say that my clients are more appreciative with my response time in fixing buts and generally don't even seem to be bothered with the fact the bug was there. In regards to your company not having a Q/A department, this is unfortunately normal. You should tell your boss that you are stressed, but don't just go to your boss with words. Take documentation of all you have been doing, as well as bring some documentation that can help you to plan a better approach. If your boss is not willing to work with you to reduce your stresses, then look for another job. A good boss can appreciate that you are willing to admit you're stressed out, especially when you help them to identify what needs to be done to fix the problem. TLDR; Don't quit. Approach boss and try to refine expectations to be reasonable.
This.
Almost all the time. I've been the critical path for over three years and I work with upgrading code (It's not PHP) that is literally 20 years old. I recommend making sure you get enough exercise and sleep. It's not a panacea, but it helps. Down side is I have worked very little on fun/side projects cause my job is so demanding mentally all the time. However, it's odd how quickly the passion to program comes back after I haven't programmed for a few days.
Yes, if you're highly paid, explain to him a QA person may be more cost effective than having you fix all the bugs.
I would ask if you are one of my coworkers, but since you posted this under PHP instead of /r/dotnet I'm pretty sure you aren't him.
Sounds like burnout. It happens to everyone.
^ Been trying this. I do light exercise every day and heavy exercise on the weekend. Try to get at least 6 hours of sleep (obviously shoot for 8). Maybe the fact that I quit smoking and drinking is a contributing factor as well *sigh*
1. I use the testing solution that works best. For PHP I use SimpleTest, but for javascript I use a combination of [JsTestDriver](http://code.google.com/p/js-test-driver/) and [JsMockito](http://jsmockito.org/). Javascript is a bit tricky to test because the standard js coding structure is reaaaally not friendly to test-driven code. Just takes some practice. 2. Writing unit tests is the worst waste of time. You write tests to pin down every possible boundary and edge case, AFTER you've written the code. If you write a test first, and then do the least amount of work to make it pass, then you can iterate a few times, have 3-4 tests that pin down your functionality and it's not a unit test, it's a code-based *spec*. When your code needs to change, you just write another test to define another rule in your *spec* and poof, your code practically writes itself. 3. I started TDD on a project that had 6 million active users, with 1 million daily users and not a single line was tested. Just pull out a small part of code you can work with, pin it down with a pinning test, and then make your change using TDD. I don't use a traditional MVC framework, but the patterns arise naturally if you just code what you need. Unit tests are a waste of time because you're tempted to get old, untouched code under test. TDD says that if you're changing some code, you have to write a test first. Your goal is to be as lazy as possible, so you slice out the smallest part of code where you need to make a change, test it, and then bam. One more test over some clearly-defined functionality.
I'm thinking the same. I've felt this way before, and it's not because my workload changed, it's because I'm just tired- flat out, no excuses, tired. Take a break, center yourself, don't allow work to bleed over into your personal time. Go at least one day a week without looking at a computer until you feel centered again, then analyze the problems in an orderly fashion. The job isn't worth your health.
Git is new to me, I'll investigate it
This is surreal. http://en.wikipedia.org/wiki/Revision_control
&gt; This gives me the ability to synch the development files between all my development machines with DropBox. [nooooooooooooooo](http://www.nooooooooooooooo.com/) 
take a look at the crxml (http://crxml.pagodabox.com) library mentioned in this thread http://www.reddit.com/r/PHP/comments/r2vnl/i_have_written_a_replacement_for_simplexml_the I have had great success with it for parsing with cdata and namespaces. It has a search function that can generate php code for accessing the nodes matched by the parameter passed to it. Details are in that thread. 
Yeah, I need to start using namespaces too like you do, its a bit hard since I inherited the project and have been asked to push out features, I have got the guy to settle down a bit and let me do things right now though.
That was my attitude, but what I a thinking is if I start now while I am rewriting the whole checkout system from scratch, it will be a lot easier down the line when I do need it.
Just be aware that one one of the biggest pitfalls of OO is the ease with which it can be over-designed.
I was hired as QA in that situation and I resent you suggesting to continue the tradition!
First learn about version control in general, then get your hands dirty with subversion or git
Use Gearman for queuing your data instead of a CRON job. 
Any day. You got me curious, what are your trying to code there anyway?
this was the first thing I thought of. http://en.wikipedia.org/wiki/Burnout_(psychology) 
Use version control. It has never been easier to start with Git. Just use it. Then, learn about Capistrano and deploy everything with Capistrano. But, set up a build server with CI-Joe/Jenkins/Travis first. Continuously build your code with it, and then deploy if it works. You do have a test suite, right?
&lt;form method="post"&gt; &lt;input name="data[0][]" type="text" /&gt; &lt;input name="data[0][]" type="text" /&gt; &lt;/form&gt; &lt;form method="post"&gt; &lt;input name="data[1][]" type="text" /&gt; &lt;input name="data[1][]" type="text" /&gt; &lt;/form&gt; in php print_r( $_POST ); get it? :)
To me it sounds like you're working in a bad environment. With so much resting on your head and nobody there to test or ensure quality, it seems like you're a one man workforce. I sometimes have days where I will literally not write a line of code. I realise I'm stressed or that my brain isn't functioning the way I want it to and I just concentrate on less stressful tasks for the day. Give yourself a couple of days of relaxation and you should recover your love of programming. If that doesn't work it may be time to look for a change of scenery and failing that, possibly leaving the field altogether.
No love on here for Navicat? I love it...
&gt; I think I am losing my love for programming some how That is the stress talking. I have been in very high pressure programming environments where you are given projects goals which are unrealistic given the time frame and down-trodden every day in an attempt to motivate you. Your work environment doesn't sound anything like that but you do sound on the verge of burn out, I would take a few weeks holiday to get your head in order and if you go back and still don't like it - look for a job elsewhere. 
What if you've made changes on the laptop that you've forgotten about (none-committed changed) and you overwrite them? It's really not hard to do a pull, how long does it take? 10 seconds for piece of mind IMO is worth it.
codebasehq.com - start working yourself into code comments etc. then there is obviously xdebug and if that all isn't enough you can use or setup your own bug tracker like mantis, assembla or fogbugz and phpbugtracker. 
We've used [Geoplugin](http://www.geoplugin.com/) for our production site, it's stupidly simple to use
everybody starts with "lame" coding. No need to fear about being a "noob"
If they are actually different forms (separate sets of &lt;form&gt; tags), then the submit button will only submit the data from its own form. Do you have multiple HTML forms or just multiple sets of inputs within one form?
Why not sign up on github or bitbucket or launchpad or google code or freshmeat or sourceforge or set up your own version control system if u have webspace.
You contributed to Windows ME - your point is invalid.
Just keep it up! Don't go back to smoking or drinking, but especially smoking. You don't need it, it can only hurt you. Just keep holding out and it'll get better.
How to reinvent the wheel, except let's make it triangle shaped because shut up, that's why. &gt; function load_class - See any difference ? You must. It does not need any more explanation. Heh. http://php.net/manual/en/language.oop5.autoload.php I also like how you defeat the purpose of require by checking if the file exists. I also like how you made your own a class loader, then in example 6 you don't use it. Why not use a ORM or database abstraction layer? Nope, Chuck Testa, write your own. Sorry, these are not best practices and I do not recommend them.
Use a ticket tracking system to track your defects. You can only work on them one at a time. When someone reports a new one, your answer should always be: "Okay. I added that to the defect tracking system. I'll take a look at it as soon as I can." Which, of course, means it's last on your list of 20 other defects to fix. Write test procedures and perform them before a big release! I can't believe anyone works without these any more. Once your system reaches a "critical mass" of complexity, the risk of introducing bugs in new development gets huge. If haven't gone back and tested everything, there's no way for you to know what's broken before you ship new code. You might even want to pitch the idea of hiring a tester. No real job skills are required so they're pretty cheap. Explain to your boss that if he wants a reliable system, this is what needs to happen. The idea that you're some kind of super hero who's gonna fly in and write perfect code all day that the whole company can rely on is a pipe dream. You need these procedures in place to ensure reliability. 
The first one... define('ROOT' , pathinfo(__FILE__, PATHINFO_DIRNAME)); There's `__DIR__` in 5.3, and then there's just `dirname(__FILE__)` for everything else since 4. Or shit, `realpath` for your `../` style paths. As soon as I saw that I knew this article wouldn't be top notch. And for god's sake people, include/require(_once) are not functions. They don't need ();
filesystem != version control, and yes, DropBox is a form of filesystem. Different paradigms for different uses.
&gt; include/require(_once) are not functions. They don't need (); I'll admit to doing that occasionally. That's why I have PHP_CodeSniffer to yell at me :-)
Yeah man, try to ease off and take a break. Everyone starts to feel that way at some point, but if you really love what you do (which, reading your comments, I would say its pretty clear that you do) the flame will always come back.
This wasn't my first one. Well, let me rephrase that. This was the first one for a product that is in production now. I had used it for some products that didn't go anywhere. The Symfony2 learning curve wasn't that hard at all. Doctrine2 was a bit tougher. It was the first ORM I had ever used, and getting the associations working properly can be tough if you're used to just writing straight up queries. Few things that are bothersome (that I'm sure I haven't figured out how to fix properly): * No true unit testing. Because of the dependencies just to instantiate a controller, you can't just include the controller file and write an actual unit test for it. Thus, all testing is functional or integration testing which means your tests run slowly. The web testing framework included is fantastic, however. * Vendors are just not quite there. The vendor installation script is a bit limited with how it works. You point it to a bunch of Git repositories and it clones those into the vendor directory. This is very slow, especially for large repositories like Symfony2 and Doctrine2. Plus, it keeps the .git directories which I don't think are necessary. I'd much prefer to be able to point to a tar.gz file on Github (or any server, really) and it just downloads that, untars it, and installs the vendors that way. Would make deployments much much easier. Right now, it takes about 6-10 minutes to include all of the vendors, depending on how fast Github is at the time. I had to update my deployment scripts to copy a previous releases vendors if they haven't changed. This really needs improvement on their end to make it much faster.
Chucking out buzzwords? Really? Yes, Mysqli can do all of those things, but PDO is essentially the defacto standard when it comes to database connections. You get the same PHP syntax for any database platform, and it still uses native database drivers behind the scenes.
&gt; why is there a need to make it a string to get the value Because the value is a SimpleXMLElement object. Not a string. If you want the string value of the object, you need to cast it. It may have been easier if php added a SimpleXMLElement::text() method or something, but calling a method, or casting is unavoidable.
Great points, thanks for the response. We started a project about 7 months ago using Symfony2 and we actually just went live yesterday. I agree about the unit testing, but there are ways you can literally unit test your controller-- though sometimes, like you said, the number of dependencies required to 'get things done' makes that a lot harder. I ended up sticking to strictly functional tests for my controllers, as it seems you have. As for the vendors management-- I haven't had any issues with my dependency management but I agree that it can be very slow. At times, github will even throw an error when you try to fetch the Symfony2 repository. That's not annoying at all :\ Good news is that Symfony2 will be switching to composer.json as of 2.1, and that will be a major step forward. You'll be able to do exactly as you say and point your composer.json file to archives or your own internal git repositories. edit: formatting
I guess I just don't associate simple version control with some mystical skill only obtained after completing a CompSci degree. I've always felt it was a fundamental part of web development as much as html, animated gifs and ftp.
I've heard that programmers have a shelf life. I am starting to believe it myself.
In general, I think you want to read the file in chunks rather than all at once. So look at functions like fread() rather than stuff like file() or file_get_contents(). If it were XML, I'd recommend using something like the XMLReader class that allows you to parse very large xml files one node at a time. CSV, and XLS, I'm not so sure about. The problem you might run into reading a CSV file in chunks is that the chunk will break in the middle of a field. There may be libraries out there to help with this, I'm not sure. 
Did you look at the packaged php file itself, or the source? According to the project page, the source itself is split into several files.
[Lithium framework](http://lithify.me/) has a super extendable authentication system, here is a [blog post](http://www.shift8creative.com/blog/lithium-and-ldap-authentication) about LDAP with the framework. EDIT: apologies realized you were looking for a CMS, not a framework HTH
This looks ok but where are the submit buttons and how are the forms all submitted at once? I don't see how all the information could be collected from all the forms without using javascript. You might have to use some jQuery to collect all the info from the various forms and then supply it to the processing script. This really isn't how html forms should work, at least not if they aren't being submitted by AJAX. Something like this would be better: &lt;form method="post" action=""&gt; &lt;label for="data[0]"&gt;Form 1: &lt;/label&gt; &lt;input name="data[0][]" type="text" /&gt; &lt;input name="data[0][]" type="text" /&gt; &lt;label for="data[1]"&gt;Form 2: &lt;/label&gt; &lt;input name="data[1][]" type="text" /&gt; &lt;input name="data[1][]" type="text" /&gt; &lt;input type="submit" /&gt; &lt;/form&gt; &lt;?php print_r($data); ?&gt; try this.
I know what revision control is, but I never used git. I also have been programming professionally for over 10 years (since php was called php/fi) and never have I needed it. So why don't you try to sell me on it rather than assume I'm ignorant. 
Unfortunately, most parsing libraries that pull in an entire document aren't memory efficient for any platform. It's not usual for a few bytes in a file to bloat to a few hundred bytes. The solution, as mentioned by JerkyBeef, is to avoid bringing the whole document in at once. In order to gain any improvement, you would have to move away from the library you are using. For XLSX, if the data is relatively simply structured in the file (and if it is really huge, it's probably just a dump of a lot of data) then you could just open the file and parse it yourself. You would PHP's SAX XML [parser](http://php.net/manual/en/book.xml.php) which does not load the entire document at once. 
Joomla has LDAP built in. Not sure if they offer a way to add new. I did notice they added the option to authenticate against Gmail.
Thanks for the solarized. I downloaded the whole suite. With all my apps solarized and running F.lux my eyes are mood will be thankful.
I'll look into parsing it myself, thanks! It really is simply structured data, stuff that could easily be a CSV. 
There's a command line tool that comes with Gnumeric called "ssconvert" that could probably do the conversion to CSV for you, depending on how much control you have over the server. I don't recall using it myself though.
Yes you're right, I mixed it up. There actually is a speed advantage to ++i, and it may be as much as 10% but probably more often much less. I do numbers all day and still I messed this simple thing up ;-/ The interesting part, though is the massive speed gain from the alternative count method. I've never seen that before, I didn't even know that was possible.
[fgetcsv](http://php.net/fgetcsv) reads from a stream and is capable of dealing with "breaking chunks". The only time you should specify length is when the fields are known to have a predictable fixed maximum length.
I completely agree with all of this. The "Oh my god why haven't I been doing this forever" feeling is pretty common with everyone I know who's done TDD and stuck with it for a while. And it definitely improves your designs. All of the CS education I got at school that was promptly ignored to "simplify my code so I can read it" came back into play in a big way. I use composition instead of inheritance, I "code east" and I have adopted a lot of philosophies that make fast development so much easier. My favorite line, though is: &gt; Unit tests make you feel like you have your seatbelt on.
Quote wikipedia at me all you want, but there are two forms of "unit tests" people talk about when coding. The "writing unit tests" I am talking about is the concept of writing a test that exactly tests what your code does. This is RADICALLY different from using unit tests to *drive your development*. I wrote "unit tests" at my first job, and hated every second of the wasted time and frustration, as did all of my co-workers. We saw no value in getting tiny bits of functionality explicitly defined, and when a change came around, would have to delete all of the tests and do it again. Driving development with unit tests, on the other hand, is probably the greatest experience I have ever had while coding. I feel safe and confident, and my code and disposition is better because of it.
[PyroCMS](http://www.pyrocms.com/) based on Codeigniter, with the [LDAP for PyroCMS](https://github.com/appstucco/LDAP-for-PyroCMS) plugin! 
This is php. In most cases you can't properly test until it's refactored anyway because php doesn't lend itself easily to dependency injection. DI has to be worked in to your design. Rewriting code to be testable doesn't have to occur all at once. The whole codebase is generally not one monolithic class, and if it is you have a bigger problem.
The newer native mysql drivers are supposed to help reduce footprint, especially when pulling large datasets from mysql. http://www.php.net/manual/en/mysqlinfo.library.choosing.php "One example of the memory efficiency is the fact that when using the MySQL Client Library, each row is stored in memory twice, whereas with the MySQL Native Driver each row is only stored once in memory."
The PHP code I started TDD on was barely object oriented. I just started taking swaths of code, and then wrapping them away into testable classes. Once I had a significant amount of the code under test, I started a refactor project to clean up the design and reduce duplication. So I would disagree with the argument that PHP is difficult to test; slice out a workable amount, wrap it, pin it down and TDD the changes you want.
Coding East is a concept that says it is better to "tell an object to do something, and hand it the classes it needs to complete the job" than "ask one object for a dependency, and pass that into the object doing the work" It's kinda hard to explain without having some examples, but I always reference [A Design Compass](http://jamesladdcode.com/?p=12) and [More East](http://jamesladdcode.com/?p=302) for a starting point. instead of saying function mainPage() { $view = $class1-&gt;getView(); $data = $class2-&gt;getData(); $class3-&gt;render($view, $data); } You say function mainPage() { $class3-&gt;render($class1, $class2); } And let **$class3** pull the information it needs out of it's dependencies. This way, if something changes in the information needed in **$class3**, you don't have to change the **mainPage()** function at all. There's a lot more to discuss about the concept, so if you still have questions, just ask.
If you really get so much value out of unit tests, you should definitely look into [Test Driven Development](http://net.tutsplus.com/tutorials/php/the-newbies-guide-to-test-driven-development/). For me, unit tests are not some chore to be done, but more of the *spec* of the system I'm attempting to build. It's awesome because the tests essentially write the code; you get the simplest, easiest solution AND a fully-defined set of tests over your new change. No more "going back to add or improve" existing tests; your tests drive the code you write.
I disagree with your assessment, here's why: The actions/behaviours you described in that post is not indicative of a web developer, but rather of novice programmers in general. You're also mixing definitions of web development and web design, which is not a very great way to look at things. Novice programmers that make these kinds of mistakes exist in every field of programming; Because the web is a public place, discovering these novice programmers is much easier than, say, with C#. I agree with almost all of your points, but they are **certainly** not limited to web development, even in the least. As for the lack of challenges claim, it's another matter where scope is important. Sure, some people never face any issues larger than getting that table to be centered in internet explorer, but how is that any less true about *all* programming fields? You saying that "most web devs are hobbyists" is quite a bold statement to make without sources. Refer to paragraph #1 for why this could be inaccurate. tl;dr - *All* programming fields have their share of slackers, idiots, and beginners. Casting your opinions on web developers with such a broad stroke is a little short-sighted, especially given the massive amount of web code that goes well above the head of what would be considered a "good" programmer by your standards. And with all that being said, there *are* a lot of idiots who put terrible code on the web, and I wish they would stop :[
I don't think I fully understand what your application does. ...are you actually suggesting people off-load their user management to your service? 
Load up the data you're working on, no more, and clear it out when you're done with it.
Try this: echo $_SERVER['REQUEST_URI']; 
[PDO](http://php.net/manual/en/book.pdo.php) will go a long way in mitigating your risk of SQL injection.
I never said that there weren't lackluster devs in other industries; rather, just that it's much easier to be lackluster in web dev. One can ostensibly create decent sites without even knowing HTML/CSS/JS, but this is rather tough to do for other industries and/or languages. Exhibit A: all of the "online site builder" tools and WYSIWYG editors. &gt; You saying that "most web devs are hobbyists" is quite a bold statement to make without sources. Care to source **that** quote? In reality, you quoting me as saying that I said _most_ is quite the bold statement -- maybe because that's not what I said. FWIW, there's a huge difference between _many_ and _most_, and I deliberately chose my words there. In the future, I'd appreciate it if you didn't put words in my mouth.
 echo sprintf('some-file.css?%s', filemtime('/full/path/to/some-file.css'));
Sorry if my mis-reading was offensive, I really thought I read "most." I don't consider people who install wordpress/drupal "web developers," just the same as I don't consider people who use Excel "programmers." I just find it interesting that you have such a negative opinion of web developers, but define the term with no real boundaries, essentially defining an entire industry by accepting the casual hobbyists as the average :/
yes, you are right, but not a huge problem actually ;) especially when order by rand is absolutely impossible...
I would have a separate table for referrals that would have a unique ID for that referral, the user ID that made the referral, email address of the referral and a timestamp of when the referral was created. Then you would only need to count the number of rows in the referral table where ID = ?
I suffer from reality, whereby finding a good _web dev_ to hire is near impossible; a good 90% of the applicants that I interview are like I described, so that's what I'm basing my definition on. No matter how clear it is in the job description that I'm seeking bona fide _programmers_ -- listing things like TDD, knowledge of design patterns, OOP, source control, etc. as requirements -- I still get people that, as far as I can tell, would likely have trouble installing Wordpress. I also base my opinion on cruising sites like stackoverflow.com, where the average html/css/js/php question is of the _duhhhhh_ variety. While I don't spend much time on the site anymore, when I do actually visit and check out the questions they're all so fundamental that you can answer pretty much any of them simply by searching previously-answered questions or by linking to a manual page. This is what I meant by there being no real challenges left that a framework or library hasn't solved already. It's also a fact that web _programming_ languages are higher-level languages which do not require the CS fundamentals such as are pretty much required to program in any of the C-family of languages (or of course, even lower languages). At least in my opinion, programming effectively in a lower-level language is typically much harder than a higher-level language.
Is there a way to revert a change or deleted file with Dropbox?
App|Link|OS Support :----|:----|:---- XAMPP|http://www.apachefriends.org/en/xampp.html|Windows, Mac, Linux, Solaris MAMP|http://www.mamp.info/en/index.html|Mac WAMP|http://www.wampserver.com/en/|Windows --- Personally, I prefer MAMP for Mac OS X rather than XAMPP
Recursion can be a quick way to overflow your call stack, especially if the recursion is not strictly limited by depth and you're passing objects or arrays as parameters to each function. This is not necessarily related to exhausting your memory limits since the stack is a different thing.
oh boy. You should start with the basics. good luck
I'll add [Wamp](http://www.wampserver.com/en/) to this list if you're on a PC. I use Wamp for all my PHP dev and find it perfect.
So you want to remove the duplicates right? http://php.net/manual/en/function.array-unique.php 
I can't really disagree with you, especially because I frequent SO and see some really, really bad code every day. A CS degree really helps me to see the line between good/bad code, and you obviously havea similar sense, which will at least help keep the morons (for lack of a better term) out of your codebase :]
Try to do everything in small increments. The biggest culprit is database servers. So look at how you are handling your SQL moreso than your PHP code itself. Look out for temporary tables and cardinality. 
1. For the love of god, write tests 2. Get out of the churn-and-burn PHP trenches.
Seems like with this the respective states of the country would be lost wouldnt they? 
The not going home thing would be an automatic "find a new job" for me, but everything else you say is one of the keys to less unenlightenment. Automated test suite. Do it or suffer.
Good tip! I'd imagine recursive functions that pass references instead of copies probably wouldn't run into that issue, right?
I've felt this way since before I got my CS degree, and I've been a software engineer, well, really before then, but professionally for 5 years with the degree and maybe 10 before/during it. I wish I'd paid attention to how I was feeling, I could have already had my master's in biology by now and be doing what I actually like.
Zend Certification is a joke, imho. The test has questions about the order of arguments in some methods - who cares? Instead, ask them to send you to interesting conferences like Tek or Lonestar!
Not getting data when you expect data it's an huge issue ... event several retries can end in not retrieving any data(a simple example will be a table with 1 row) There are other solution depending on the case ...
I don't think so, though I don't know enough about why. I was using references when I experienced my problem. I think that even if you don't pass by reference, it doesn't mean the entire object is stored on your stack, but just a reference to it. And ever since PHP5, the boundary between reference and non-reference in objects is different anyway - technically all times you refer to an object it's a reference.
Thank you!
Well great. I think we're starting to step outside of my cone of understanding. 
This is awesome. I never knew that. Probably everything but Windows, I'm assuming?
Lol Thank you. Just re-learned my rust HTML, next is PHP, and the icing is CSS.
You don't need all 3, just pick the one that suits your needs best.
I have it, and if you talk to most devs you'll realize that it really isn't that necessary. I only got it because it was free at ZendCon. You are better of going to a conference like php|Tek, ZendCon, Lonestar, or another smaller conference. 
Generally, PHP now performs a "copy on write". When you pass a variable not by reference (explicitly, I mean), it is passed by reference. Once you make changes to the variable, it is first copied and then modified. When you pass by reference, no copy is created, so you are working directly on the variable that was passed by reference.
Sounds rough. But it looks like if you have PHP up to date (at least on lastest 5.3.x or 5.4.x) and convert your DateTime's to UTC, you should be mostly fine. Except for things like the last two bugs. I'm looking forward to seeing lolDateTime! What's requiring such precision in your date diff'ing?
Notice I linked to 'revision control' and not git? I don't give a shit if you use CVS, SVN, Mercurial, Git or Perforce. The fact that you've been "programming professionally" for over 10 years and apparently dropbox is your form of version control negates your claim to "professionalism".
Yep, that's the one I'm using and I'm really only using it because the first library I found could only handle XLS files. The whole thing seriously needs to be scrapped and written from the ground up. I bet there might be a way to read a file in as chunks, but the documentation is so terrible that there's no way I'm going to figure that out in a reasonable amount of time (or at all). Once I figured out how to get the raw contents of a cell, I said fuck it and called it a day. I just wanted to say something like `$spreadsheet-&gt;get_cell($numeric_x, $numeric_y)`, goddammit.
I just set up a Jenkins CI server on my dedicated server and it has a LDAP authentication module. I don't know what LDAP is so I was looking at it and then at a LDAP tutorial but decided it was too complicated for the time being. Can anyone explain to me what this LDAP stuff is? It has an AD module as well for linux that's built on LDAP. If you can explain it to me briefly I'd appreciate it. Is LDAP good stuff? Is it important? Is it worth me pursuing to set up for Jenkins?
The biggest flaw a programmer can have is not being 100% aware of their effect on servers and databases. Sorry if this isnt very specific, im sleepy.
Well I wouldn't knock them, it's a tremendous job to parse proprietary file formats that may change overtime. Maybe you can write a wrapper class that simplifies it 
That's what kills me about this whole situation. It's the only solution out there and it seems like tricky business. But maybe I will write a super parser! It'll smell like roses and tell you re-affirming stuff.
Conferences are good but I'd personally shoot for something that would also be useful outside of PHP so it'll still be useful as you continue growing as a developer. General web security is a good one (XSS, CSRF, etc). Front-end performance or general javascript knowledge is good too. Testing is great (unit testing, functional testing, frontend testing, load testing, automated testing every commit with jenkins or similar). Maybe some sys admin stuff (setting up servers from scratch, EC2 or other AWS tech). Learn Git if you haven't yet and start putting your projects on GitHub. Try out mongodb or another nosql solution. Try out some more real-time programming with websockets. Conferences are good for meeting other devs, learning more about the PHP community, and maybe an introduction to a technology or two that you haven't hear of before. That might be a useful long-term investment if you keep it up every year or so but I don't know if they're a one-shot level up. If you just want to meet others in the web industry, try out SXSW. :) I'd argue that picking up any of these other skills would be way more valuable than a Zend Cert, especially if you're already happily hired!
It was the variable. Thank you. The framework was exploding the "/" and I forgot about it.
I had a lot of problems when trying to find out the difference in days between two dates, because you may have date, say _dateA_, add 1 day (24 hours) to it and assign it to _dateB_, then compare the day of the month and find out they are the same, because of DST. Luckily, I didn't need the time at all, so I made it so that every date created had a specific time, say, 5am. So at most, when adding days, I would end up with 4am or 6am, without changing the day of the month. It worked, and I was happy. Now I've learned to always use dates in UTC if the hour doesn't matter, it makes everything simpler.
["For 64-bit versions of PHP, the valid range of a timestamp is effectively infinite, as 64 bits can represent approximately 293 billion years in either direction."](http://php.net/manual/en/function.strtotime.php) 
The GC in PHP only does cycle detection; PHP cleans up memory from variables immediate when there are no longer any references (gone out of scope). Even long running scripts won't necessarily benefit from using GC in PHP. 
Then pin your information to a community notice board.
/r/lolphp worthy submission imho.
I've found that working for any company that is prepared to do testing *right* is a company where my stress levels remain relatively low. I dunno if that applies to your current employer (hopefully!) but testing skills and awareness might hold you in good stead for future jobs in that regard. I'd also reccomend security - I suspect the market for that skillset is going to get bigger in the future, but others might have other input on that.
Dropbox was to synch my files, not for version control. And my use of version control or source code management software has nothing to do with my professional quality. I just switched to this Netbeans/Dropbox configuration recently, wounder what php subreddit says about it, oops! meritt_zare has some things to say about it :) I'm accustomed to using putty to ssh into my server and edit my files via vim. This is how I have always done it, and now I'm trying other configurations. What setup do you use?
I find it pretty good and accurate when working with Timezones and Dates. I don't use the locale functionality.
Datetime + Encoding are the two hells of information technology :) You just *can't* get them right.
Don't do it in PHP. 
Learn CSS before PHP. IMO it's the right order
Well that's terribly unhelpful.
DST, whether DST has happened in the relevant timezone for the user who needs to know a time, leap years, all this nonsense. There's only one thing you need to know about this, and it's that you should consider them all before you design your application. This is ESPECIALLY true for your database. Just assume that by default everything you use has the most basic definition of what a day, year, month is, etc. I'm not that old, but old enough to still be assuming that most programming language oversimplify date calculations to an extreme just because of resource considerations. 
As a general rule, your best approach is always to use intuition at first and then do some profiling with cachegrind. Optimizing an algorithm for speed is one thing, but I don't think anybody can really reliably predict which parts of their code are going to actually use the least resources. You don't want to go looking through your code and go "OH NO RECURSION", then rack your brain on a method that isn't really putting any strain on your system. You'd also be surprised how inefficient some of the nice built in functions and classes become for certain uses when you really put them to the test.
"Don't douse yourself in gasoline and then roll around in a burning fire" is more like it. There is no reliable and aesthetic solution to your problem other than going back and branching off. Maybe the improvements in 5.3/5.4 alleviate the memory leak issues, but I have little faith.
I'm really new with MVC. Can you elaborate?
I suppose that would fit the analogy a little bit better, except in my case I had no choice in being doused in gasoline and then lit on fire. I'll definitely keep this advise in mind when doing personal projects, though.
If your company isn't even unit testing, your company is the problem, not you. Been there, done that. There's a reason for things like unit testing and agile development. People make mistakes, and allowing for this is an important part of project management. I wouldn't advise going and taking it upon yourself to fix it though, because you're going to end up spending a ton of extra time on a sinking ship. There's a chance you'll save the day, but there's a greater chance that you'll do a few great things but ultimately the project will fail because of the bad management and you'll have nothing to show for it other than more and more stress. Whenever I interview somewhere now, and they ask me what I want to know, I ask if the management is good enough for me. Basically, I want to know how they handle this because that's what's going to effect my quality of life day to day. They either don't like it, or they're impressed that I actually understand how this stuff works. The second guys are who you want to work for.
Sure. One thing I've noticed with several people that have asked me for framework help, and that are new to frameworks, is that they forget that MVC is just a *pattern*. It's simply a way to organize your code to make it easier to manage. All the rules of OOP still apply: inheritance being the one you're missing here. Have a base Controller_Admin (or whatever the naming scheme of CI is) and have all your admin-related controllers extend that. IN your Controller_Admin have a method for verifying that the current user is logged in, and call it in the constructor, or before() or whatever method you can add code that is run on every load.
cURL is faster, which is actually surprising to me, but as for security there's no reason to believe cURL is more secure. It could theoretically be less secure in some circumstances (I can execute arbitrary code within a scope where I can access a cURL object, I output the cookie you're using, blah blah). As much as I've used it, I'll never use it just for the sake of using it. Only doing GET requests? No cookie or anything? file_get_contents. CPU cycles are cheap and developers aren't.
Pretty much. I don't have any control over the server this will reside on.
I guess it depends on what you are trying to index in the search engine and how. If you want to index data on the site, something like [Solr](http://lucene.apache.org/solr/) or [sphinx](http://sphinxsearch.com/) might be a good option. If you want to index actual rendered pages, then something like [Apache's Nutch](http://nutch.apache.org/) might be a better fit.
I would be looking to index rendered pages only. Google Custom Search pretty much accomplishes what I am looking for, but the client is not interested in using it. 
Sphider
I second this! The videos are actually pretty good, and for $12/ea I'm not too worried about supporting the maker.
mysql full text indexing can be quite effective and is easy to set up.
What does Reddit use for searches? I want to avoid that like the plague. 
Ohh, thanks for linking me to that. I never knew.
I have used sphinx for my some project. I will recommend sphinx - full text search server.
Depending on site size mysql full text index could be possible. It suffers from two main issues: 1. It's slow 2. It requires you to use MyIsam tables - you should be using innoDB
It was IndexTank but they were purchased by LinkedIn.
1. It's not slow 2. There is no authority saying you should strictly use mysiam over innodb for instance, mysiam is inherently faster in doing sum calculations. If you do want innodb I believe Sphinx in fact requires it and is built by the same guy (or at least he was heavily consulted by the mysql devs in developing mysql full text).
Put it into your controller folder; you're simply extending from it. I *believe* CI's autoloader can let you do `class Controller_Admin extends CI_Controller{}` `class Controller_Admin_Foo extends Controller_Admin{}`
You really should avoid myisam tables. When they corrupt (when, not if), you'll be in for a world of hurt. If you must use myisam, *backup often*. The obvious solution to avoiding myisam with sphinx is not to use mysql. Postgresql is fully supported by sphinx.
Xdebug
You can also extend the core classes (i.e. CI_Controller, CI_Model, CI_Loader, etc) http://codeigniter.com/user_guide/general/core_classes.html (See "Extending Core Classes"). I use this a lot to define global functions and variables.
 log_errors = On error_log = /path/to/log
No, I'm the kind of guy who doesn't like having to restore from backups when myisam trashes my tables.
Cool, thanks for stopping by.
Sorry lilzipops - full text search on MyIsam is slow its not even something you can argue. Also Sphinx does not require innoDB. You can provide any xml stream you want and it will index that. You don't even have to use MySql. Using the right tool for the job is not over engineering.
depends if it comes w your install. packages like MAMP for example include it, but you need to enable it by uncommenting a line.
XDebug has documentation on the settings. A lot of them are a matter of personal preference. 
APC
For the longest time, innodb had a bunch of problems with their dive in, estimate data distribution method of indexing tables. Some people probably got tired of hand optimizing every single join whenever the distribution of values changed in huge tables, especially if you are doing aggregate calculations across the table, so myisam that is replicated and distributed is a pretty good substitute in this case. It's an edge case, but I thought I would bring it up for consideration.
 error_reporting = 2147483647
Do you think that by installing APC on a development environment, that its caching could potentially interfere with what you're developing? Would there be any settings in APC that you could use to mitigate against this?
From http://www.php.net/manual/en/function.error-reporting.php &gt; Passing in the value -1 will show every possible error, even when new levels and constants are added in future PHP versions. The E_ALL constant also behaves this way as of PHP 5.4. Pretty sure that also goes for the .ini setting.
By default APC does not interfere with your development environment because it confirms the modification date of every file. So you get a performance benefit without really interfering with development. In production, you can get a good speed boost by disabling the file system check on the cache but then you have to control the cache when you update your code. It's also useful for your development environment to match your production environment as close as possible. For example, if you run APC in dev and production, your code can make use of the APC caching functions. 
PostgreSQL has great full text search capabilities - look into `tsearch2`.
 magic_quotes_gpc = on register_globals = on **BEFORE YOU FREAK OUT, READ THE EXPLANATION** Only do this in a testing/development environment. The reason I do this is because so many other people do it, and I want to make sure my software works with the largest target audience possible. While you shouldn't actively exploit/use these features, it pays to make sure that your software doesn't break with them on. It's going to be a few years yet before they officially disappear from many production servers, so until then it's a real possibility that you'll have to continue worrying about it for a while. Properly designed PHP software should not care if these settings are on or off - it should just deal with it appropriately. 
* Your first algorithm issue is that MySQL should review all records to use limit. Usage of the WHERE reduces the number of the records and makes things much faster. I have spent a few minutes to write test code to show you the difference on the table with 19189 rows 100 selections of random value (both without max key &amp; number of records calculation) Your algorithm: 1.2954380512238 sec My one: 0.024272918701172 sec I think I should not explain what will happen on 2 millions of records... * Second one will not return random values at all, values will be returned in some order. Filling column with the random values will make things better (not ideal, but better). Here I should notice that this will be modification of third algorithm described in my article. My version tries to make it little bit more random. I am open to criticism and ideas, but I preffer to analyse, test things before taking decisions.
**AAAH! AAAH! GLOBALS!** :3
What?! I never thought I would see the day I would have to downvote you. Forgive me for this... ^ This guy is my business partner and one of my oldest friends. I've worked on many of the projects he's referring to and had the displeasure of debugging Lucene related search issues on them. * The query language doesn't work the way the docs say it does. * It's slow. * There is no way to actually examine the indexes. (Other non-mysql solutions would fall down here as well) * Indexes become corrupted forcing me to have to rebuild them periodically.
&gt;I did read it, it doesn't matter. No, you really didn't. Nobody is suggesting enabling these things on production servers. &gt;Exactly, you should not need to turn it on. That's not true. You need to ensure that it's not going to break, and the only way you're going to do that is by turning these features on to test it.
Seems like this would have been a good project for SQL Server, SQL Server Reporting Services, and an ASP.NET site. But I'd also be interested to know if there are any good reporting tools for PHP on par (or close) with SSRS. 
You can't call it good or bad code, it's simply an example of how these things can crop up with no real context. You're not expecting that variable to be defined, but it could be under certain circumstances. If there's "no way your code could break with it on or off" then it can't possibly hurt for you to test your code in both states before sending it to a production server.
 error_reporting: E_ALL &amp; ~E_NOTICE &amp; ~E_STRICT post_max_size: 100M upload_max_filesize: 100M date.timezone: pick one from http://us3.php.net/manual/en/timezones.php
No, it's been around for a while and it's what I always use.
I have something like that. I'm just wondering if this is the correct syntax for what I wanted.
At least as of 5.3, not sure when though, if before.
No, you're making sure that your software doesn't break when a customer decides he's going to use it on a badly configured server. I don't understand why a good portion of the PHP community is so violently against testing.
Because your code is still more vulnerable even when you know what you're doing.
...which is why you test... You don't test because you intend to do it on your own servers, you test so that if someone else insists on it that you're not limiting your client base. Also, it's not just things like this that a good portion of the PHP community is against testing. Most major projects which are in widespread use don't even have proper testing suites, never mind testing for obvious edge cases such as this.
What I like to do is how CakePHP approaches it. Setup your controller like so: class MyController extends CI_Controller { public function __construct(){ // Some check to see if the admin_ prefix is set, then do your admin configurations. (similar to extending controller, then extending again) } } /* ./Controllers/MyController.php */ class Agents extends MyController { public function admin_index(){} public function index(){} } /* ./Controllers/Agents.php */ Then in your routing, you will have a prefix trigger when admin_ is called. ---------------------- The other alternative that is more native to CodeIgniter is to put the controllers in an admin directory. /Controllers/admin/agents.php ( url.com/admin/agents/*function* ) /Controllers/agents.php ( url.com/agents/*function* )
&gt;But maybe there are some cases when you would want to log errors to a file during development? I just ran into a situation where logging was needed while troubleshooting an error that occurred during an ajax operation.
 $sql = "SELECT COUNT(ID) AS Cnt FROM events_log"; if ($result = $mysqli-&gt;query($sql)) { $Row = $result-&gt;fetch_object(); $result-&gt;close(); } $Max = $Row-&gt;Cnt-1; $start = microtime(true); for($i = 0; $i&lt;100; $i++){ $rand = mt_rand(0, $Max); $sql = "SELECT * FROM events_log LIMIT {$rand}, 1"; if ($result = $mysqli-&gt;query($sql)) { //$Row = $result-&gt;fetch_object(); //var_dump($Row); $result-&gt;close(); } } $end = microtime(true); echo "Elapsed time. SQL query: ".($end-$start)." sec&lt;br/&gt;"; $sql = "SELECT MAX(ID) AS Cnt FROM events_log"; if ($result = $mysqli-&gt;query($sql)) { $Row = $result-&gt;fetch_object(); $result-&gt;close(); } $Max = $Row-&gt;Cnt-1; $start = microtime(true); for($i = 0; $i&lt;100; $i++){ $rand = mt_rand(0, $Max); $sql = "SELECT * FROM events_log WHERE ID&gt;{$rand} LIMIT 1"; if ($result = $mysqli-&gt;query($sql)) { //$Row = $result-&gt;fetch_object(); //var_dump($Row); $result-&gt;close(); } } $end = microtime(true); echo "Elapsed time. SQL query: ".($end-$start)." sec&lt;br/&gt;";
syntax is fine but this is a bad idea. Have an audit log instead. timestamp | nick | balance_change | whatever else you track.
I can sort that out, but now my biggest issue is including it in the php file. I'll have to ask someone who knows php.
Move sessions off the filesystem. 
 error_reporting = -1 display_errors = On
&gt; date.timezone That annoying, constant "please set a timezone" notice...
Yeah, displaying errors is annoying anyway. I keep logging on and then when I have issues I just tail the log file. It doesn't happen often, but it's [alot](http://4.bp.blogspot.com/_D_Z-D2tzi14/S8TRIo4br3I/AAAAAAAACv4/Zh7_GcMlRKo/s400/ALOT.png) more convenient for me, personally.
It would be better to use Microsoft Access, and even that is a pretty terrible idea.
No, it is not the best code generator in the world. For example, Doctrine and Propel generate code for database interaction, and it is by far better than any database code that PHPRunner generates. Also, Symfony generates controller code, which is by far better .. All of which are free, btw
Here here! I consider that to be a feature of PHP, I really wish I could disable notices for just array indexes.
Xdebug really needs to be more well-known - I'm amazed at the number of people who've never heard of it.
(Warning: opinions below) $car and $train should be initialized so no check is needed for those. Using an uninitialized variable should throw a hard error. External input from users or other services are the exception and better fit your point, but you can't have the hard errors for other variables without the same for all of them. Those inputs should be wrapped in some way to limit the isset()s. $data = MyPostData::get('selection') == 'car' ? $car : $train;
Take a try with this: function removeAccents($str) { $a = array('À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ð', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ÿ', 'Ā', 'ā', 'Ă', 'ă', 'Ą', 'ą', 'Ć', 'ć', 'Ĉ', 'ĉ', 'Ċ', 'ċ', 'Č', 'č', 'Ď', 'ď', 'Đ', 'đ', 'Ē', 'ē', 'Ĕ', 'ĕ', 'Ė', 'ė', 'Ę', 'ę', 'Ě', 'ě', 'Ĝ', 'ĝ', 'Ğ', 'ğ', 'Ġ', 'ġ', 'Ģ', 'ģ', 'Ĥ', 'ĥ', 'Ħ', 'ħ', 'Ĩ', 'ĩ', 'Ī', 'ī', 'Ĭ', 'ĭ', 'Į', 'į', 'İ', 'ı', 'Ĳ', 'ĳ', 'Ĵ', 'ĵ', 'Ķ', 'ķ', 'Ĺ', 'ĺ', 'Ļ', 'ļ', 'Ľ', 'ľ', 'Ŀ', 'ŀ', 'Ł', 'ł', 'Ń', 'ń', 'Ņ', 'ņ', 'Ň', 'ň', 'ŉ', 'Ō', 'ō', 'Ŏ', 'ŏ', 'Ő', 'ő', 'Œ', 'œ', 'Ŕ', 'ŕ', 'Ŗ', 'ŗ', 'Ř', 'ř', 'Ś', 'ś', 'Ŝ', 'ŝ', 'Ş', 'ş', 'Š', 'š', 'Ţ', 'ţ', 'Ť', 'ť', 'Ŧ', 'ŧ', 'Ũ', 'ũ', 'Ū', 'ū', 'Ŭ', 'ŭ', 'Ů', 'ů', 'Ű', 'ű', 'Ų', 'ų', 'Ŵ', 'ŵ', 'Ŷ', 'ŷ', 'Ÿ', 'Ź', 'ź', 'Ż', 'ż', 'Ž', 'ž', 'ſ', 'ƒ', 'Ơ', 'ơ', 'Ư', 'ư', 'Ǎ', 'ǎ', 'Ǐ', 'ǐ', 'Ǒ', 'ǒ', 'Ǔ', 'ǔ', 'Ǖ', 'ǖ', 'Ǘ', 'ǘ', 'Ǚ', 'ǚ', 'Ǜ', 'ǜ', 'Ǻ', 'ǻ', 'Ǽ', 'ǽ', 'Ǿ', 'ǿ'); $b = array('A', 'A', 'A', 'A', 'A', 'A', 'AE', 'C', 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'I', 'D', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'U', 'U', 'U', 'U', 'Y', 's', 'a', 'a', 'a', 'a', 'a', 'a', 'ae', 'c', 'e', 'e', 'e', 'e', 'i', 'i', 'i', 'i', 'n', 'o', 'o', 'o', 'o', 'o', 'o', 'u', 'u', 'u', 'u', 'y', 'y', 'A', 'a', 'A', 'a', 'A', 'a', 'C', 'c', 'C', 'c', 'C', 'c', 'C', 'c', 'D', 'd', 'D', 'd', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'G', 'g', 'G', 'g', 'G', 'g', 'G', 'g', 'H', 'h', 'H', 'h', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'IJ', 'ij', 'J', 'j', 'K', 'k', 'L', 'l', 'L', 'l', 'L', 'l', 'L', 'l', 'l', 'l', 'N', 'n', 'N', 'n', 'N', 'n', 'n', 'O', 'o', 'O', 'o', 'O', 'o', 'OE', 'oe', 'R', 'r', 'R', 'r', 'R', 'r', 'S', 's', 'S', 's', 'S', 's', 'S', 's', 'T', 't', 'T', 't', 'T', 't', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'W', 'w', 'Y', 'y', 'Y', 'Z', 'z', 'Z', 'z', 'Z', 'z', 's', 'f', 'O', 'o', 'U', 'u', 'A', 'a', 'I', 'i', 'O', 'o', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'A', 'a', 'AE', 'ae', 'O', 'o'); return str_replace($a, $b, $str); } [Original Source](http://myshadowself.com/coding/php-function-to-convert-accented-characters-to-their-non-accented-equivalant/)
Not in the .ini file, but something that I just ran into last week: compiling PHP with OpenSSL enabled might come in handy down the road. 
I develop a large-ish project. Here are my favorite tools, in no particular order: * [Eclipse PDT](http://www.eclipse.org/projects/project.php?id=tools.pdt) for all editing * Git * [PHPUnit](https://github.com/sebastianbergmann/phpunit) (with code coverage reports) + [Mockery](https://github.com/padraic/mockery) + [MockFunction](https://github.com/tcz/phpunit-mockfunction) * [Xdebug](http://xdebug.org/) + [runkit](http://www.php.net/manual/en/intro.runkit.php) * [PHP_CodeSniffer](http://pear.php.net/package/PHP_CodeSniffer/redirected) with some custom sniffs * [Apache Ant](http://ant.apache.org/) for building releases For webserver and database, I like to just get Apache and MySQL from a package manager. In Linux (LMDE) this is just using apt-get and with my Mac I prefer [MacPorts](http://www.macports.org/). I find that using xampp or the like is more of a pain than it is a convenience.
In a midsize web studio, I setup the following for our dev server: * get a domain, yourcompany.net * get a dyndns account, and setup a wildcard domain *.yourcompany.net and point it to your companies static IP. * router forwards all port 80 to ubuntu box we have here. * Web projects start off in /var/www/clientID/projectID * Domains are accessed by projectid.clientid.yourcompany.net (eg stage.monkeynipples.yourcompany.net) * Databases are stored as clientid_projectid * gitweb is at git.yourcompany.net/clientid_projectid * git repo is at git.yourcompany.net/clientid_projectid.git * Rolling backups are stored in /srv/backup/clientid/projectid I have a php script custom coded to do the following (not sharing, but its basically got visudo access to run a shell script): * create vhost from template * create git * create folder structure for www &amp; src * create guard script from template * create mysql db * restart webserver It's then shared out on our OSX network using netatalk, ssh, ftp, or whatever. This might help you visualize what I setup. http://i.imgur.com/gdVpl.png (censored, paranoia). This works well for a smallish web dev team, if you were going more than say 5 people, you'd probably have multiple servers, and couldnt take over all of port 80 - And might need to run proper nameservers or something. This is just a quick setup for a simple use. We also use in dev [guard](https://github.com/guard/guard), with some plugins - its fairly neat. We just run some watches on the src directory and push to www. Cool beans.
Whenever I create a new game entry in a database for video games, a folder is also automatically created with the name of that game in /db/SYSTEM_ABBREVIATION/GAME_NAME. So if you add the game "1080° Snowboarding", the PHP program will add the folder "/db/N64/1080 Snowboarding" which is where all the info for that game gets stored (screenshots, boxarts, etc). Even though I'm working in a Unix OS, my program still calls a function to remove invalid Windows filename characters, just in case I ever want to transfer the directories to a Windows computer or something. All is fine and dandy, but with the current solution, a folder will get created located at "/db/N64/1080° Snowboarding". Non standard characters such as ° and characters with accents have been making my PHP application crash, so to fix this I want to remove them. The MySQL database has entries in the games table called "game_name" which CAN include any character, and "directory_uri" which holds the path of the corresponding folder for that game, which I don't want to store non-standard characters or characters with accents. So, I'm basically trying to remove non-standard characters from being in the filename of any of the directories that get created when I add a game entry.
Nobody is condoning these things in a production environment. If you had bothered to read what I've said, it's specifically about making sure that if the target *is* a bad environment, that your software still works as advertised. You can't always control where your software is installed, but you can ensure that the quality of your software is high enough that it can effectively deal with a bad environment without breaking. This is why I encourage people to test their software with the bad settings on - so you can see if it can stand up to a bad environment.
I just wrote a library for this to get around limitations of iconv(): https://github.com/jbroadway/urlify Hope it helps!
Thanks for the tip. I'll be revisiting that bug soon, since the current solution required a naughty core patch.
Do you work on projects offline? How do you submit them to the web? How do you use Eclipse PDT and GIT together?
Just wondering why the need for Dyndns? Nothing against it but most domain registrars include nameservers in the price.. Also, do you make use of Git hooks for pushing? I've been meaning to do this for some time myself, how would this compare to the guard setup you're using? Thanks for any replies :)
Local box pushes to git repo on dev box (git.xxxxx.net.au) If the remote server has ssh access, we just login and do a clone. Otherwise just use ftp and curse it's slowness. Due to how we use git, there isn't much benefit (for us, currently anyway) in using plugins to IDEs and such, you just pop into terminal and commit. Everyone codes in whatever they like, and terminal is common. Teach a man to fish.
Using guard for js + sass is nice (I think I might set it up now). No worries about git, that's very much how my projects work at the moment. I don't generally commit to them manually, but a commit is done automatically when I deploy (useful if I need to rollback). As for DynDNS, I've never had any trouble using wildcards with other registrars, I simply specify: domain.com *.domain.com and everything works perfectly (on 4 different registrars so far). Wildcard support is needed if you're using DynDNS as a free domain though (ie. company.dyndns.net in order to have \*.company.dyndns.net) if I remember correctly.
That is a very good question, but I could image something like .sql database dump being included in their GIT repos is adequate, and probably some very elaborate solutions with database replication. 
~E_NOTICE means do not show them.
Be prepared to watch a lot of videos, since they have some aversion to releasing documentation in other formats.
Ew.
Don't do this. You'll have to re-learn a fair bit when you do make the transition to 2
I wouldn't use that thing in a million years. 
IMHO , Its actually better that you dont have prior experience with MVC Frameworks. Since Symfony2 Is a bit different, It gets a lot of ideas from hibernate (Java) more than any other PHP based framework. The Official documentation is a bit lacking, but should be good to show you the basics, After that, you will probably be better off to start your app , google , try (Put those steps in an infinite loop) Also dont try and understand every concept in Symfony2 (Dependency Injection in particular) as you develop more , you will get the hang of it. 
It's laziness, that's what this is.
It doesn't even look object-oriented, or seem to follow any MVC pattern. On top of that, I'd never, EVER let any tools write lines for me. I'd stay far away from that thing - it can only promote bad practices. Plus, if you use this for a client project and it breaks, you'd have to dive into that generated code to fix it.
There should be a E_FUCKING_EVERYTHING (actually there is, error_reporting(-1);). The only reason I've ever been able to come up with to reduce reporting is that you've inherited some legacy app. But even then I'd argue for better error handling/logging over turning them off.
A good function to use is `strtr`, much better than `str_replace`: $a = 'ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïñòóôõöøùúûýýÿŔŕ'; $b = 'AAAAAAACEEEEIIIIDNOOOOOOUUUUYsaaaaaaaceeeeiiiinoooooouuuyyyRr'; $new = strtr( $a, $b ); 
Agreed. Symfony is actually quite nice once you get used to building small apps in it. @OP Just make sure you understand the fundamental basics (like how Symfony is based on there always being a response to a request) before you dive into it. It can be frustrating at first but it's so worth it.
 I beg to differ. Lucene works great. Now and then the indexes get corrupted, but they seem to get fixed automatically somehow. Sometimes search doesn't work right, but you can just assign all the "search not working" bugs to TheJulian in basecamp. Presto! 
Follow this http://tutorial.symblog.co.uk/ and you will be up and running in no time!
What OS are you using? In Linux I have no problem with filenames containing unicode characters outside the ASCII range. What do you mean when you say your application "crash"es? 
This isn't relevant but since you're on 5.3.x, you can use the `__DIR__` constant instead of `dirname(__FILE__)`.
Do you have your custom sniffs available?
Please use this -1 setting !!!! It is the most save way to get the errors to display. And I mean ALL errors stuff. Also the timezone setting and the post/upload stuff is really a good start. Consider installing suhosin: http://www.hardened-php.net/suhosin/ If you have the money and want a very good debugger, use ZendStudio.
an alternative (but not free) is ZendStudio. A very, very good combination of an IDE and a debugger.
true, but a method to get the value would be easier to undertstand..
We use phing's dbdeploy to handle database changes. We keep all the changes as uniquely number .sql files in one folder (1_addUsers.sql, 2_addSoftDeleteToUsers.sql, etc.) and then phing keeps track of which scripts have been run on which database servers through a changelog table. There's built-in support for rolling back changes made by each script but I've never experimented with it.
Looks fine. But you will use the process if you need it.
Instead of putting $120,000 into a Honda Civic, why not just buy a Ferrari in the first place?
You have to draw a line somewhere. Informing potential clients of the issues with PHP would be a start, but nobody does this. Businesses just can't name another programming language and that's why they use PHP. Any developer I've ever met, who has used something else, avoids PHP at all costs now.
I use Crystal 2008 to connect directly to the mySQL db via ODBC and have no issues. Have you tried that?
I'm afraid I have to say don't use iconv() for this. Even with setlocale() set correctly for the particular character set you're transliterating, iconv() is extremely limited and unreliable for this, which is why I ended up porting Django's URLify.js to PHP (not a one-to-one port, but the character support is the same): https://github.com/jbroadway/urlify It handles Latin-based language as well as Greek, Turkish, Russian, Ukrainian, Czech, Polish, Latvian, and you can easily add your own characters to the list as well. It's also fast and simple, and you can also install it via Composer. I'm not trying to plug my own code (it's basically a rewrite of someone else's anyway), just that iconv() is the often suggested and poor solution to this problem :)
I can't even use it anymore, they put all the create table content inside a stupidly small pop up box with 9000 scroll bars and the errors don't make sense or say where they come from, it's fucking stupid.
Ah, welcome to the dark side, er.. well green side or something. I'd recommend setting up a VPS. If you don't have much experience doing sysadmin work, it will teach you a lot. The Slicehost article repo is very handy to learn this stuff. You will have a better understanding of running a web server in general. So now you see why Python and Ruby nerds are passionate about bashing PHP, it really is the blind leading the blind. It's just so fundamentally wrong compared to the other options. I've been using Django primarily since 0.96, so if you ever have a hard one (even with internals), feel free to message me.
Interesting thread. Not something I need to do because I'm generally not writing stuff for public consumption. But I can see why you do it. Do you also avoid php 5-only functions?
Because not everyone has a choice in that regard. Limiting a potential client base because of configuration settings you can work around is silly. I don't see a problem with making a strong recommendation that these features be turned off in a production environment, but you shouldn't make unnecessary demands. The most successful software will usually be the software that gets the job done and presents the lowest barrier to entry. There is no point to cutting off your nose to spite your face.
We work similarly though we don't use dyn dns. We do have local dev enviroments, dev server and staging server. We use git and we all push to our own repo on or our server with Redmine. Since we're also working with flash guys and some of our programmers :gasp: don't work well with terminal envs :gasp: we've set up Jenkins jobs for deploys on the remote servers. When the project justifies it, we use PHPUnit for unit testing and we use hooks on commit to make sure that changes that fail tests cannot be committed into our main dev branches.
No, it's about writing compact, efficient code. You aren't being lazy if you're avoided doing extra work that adds unnecessary complexity and makes programs longer and therefore more complicated to maintain.
When you say it's annoying, you're saying there are errors, but you would rather not see them until sometime later? It seems like that would make development more confusing because there may be subtle errors that you aren't seeing that are affecting the results but you didn't know it because you didn't think to check the log right away.
Like I said, more convenient for me personally. All errors other than fatal errors are caught and turned into exceptions and handled "gracefully" by my application.. so only fatal errors get logged by PHP. With the error log tailed, I can see right when one occurs in my application. It's always in the same place (my terminal window) so I don't have to expect to see errors in random places. Different preferences, I guess. edit: clarity
I've been using this for years as it handles all localhost mail, not just mail from PHP 5.3+ http://www.toolheap.com/test-mail-server-tool/
It looks cool, but I don't think I want to trust anyone else with that information. I use KeePass for that stuff.
Nothing revolutionary, but for text data, you can just display results in some kind of sortable grid. For pretty charts and graphs there are countless solutions; swf, javascript, google even has a charting tool (if you can and want to pass the data).
Depends on a server hardware a bit. Like baconpiex, I'd say below 100 ms is essential but you can easily do load times of around 10 ms on a decent server. In the end it all depends on how fast you *need* it to be to handle the load you expect. It's important to remember that backend loading speed has very little to do with perceived loading speed. Network latency has the biggest effect so work on the frontend to minimize amount of data through compression, minification and reducing amount of files has the biggest effect for the end-user.
100ms is pretty high, but you still won't notice it. 
yes absolutely *edit* e.g., stack traces are awesome. and prettier than var_dump too
An apcode cache like xcache or APC is a much more effective performance increase than tweaking settings in php.ini.
A pull request was merged fro the $inspector-&gt;validate() issue. If there aren't any errors, that method will now return true. 
At my former employer, our goal for our REST API was &lt; 10ms on every request that primarily performed a read operation and &lt; 30ms on every request that primarily performed a write operation with at least O(n) effectiveness across the board. This obviously wasn't always possible to meet, but 100ms sounds *really, really* high to me as a goal time.
UI studies have shown that anything under 100ms feels "instant" to a human...so while 10ms is TOTALLY awesome, if it's under 100ms I feel pretty good about myself.
Off-topic, but if you're doing profiling, [webgrind](https://github.com/jokkedk/webgrind) is *really* useful.
This. nginx. php-fpm. apc. No .ini tweaks really make the amount of difference in performance as the above.
Well, hope you like something of it ;)
Uh, didn't know TraceLytics yet. Will check them out.
Make sure you properly define $referrer and referred. mysql_query("UPDATE " . $DBPrefix . "users SET balance = balance+5 WHERE nick LIKE $referrer"); mysql_query("UPDATE " . $DBPrefix . "users SET refer=' ' WHERE nick LIKE $referred"); Are you sure you want to clear the refer field after someone gets their award? If you had another column with a boolean for "rewarded" or something like that you could track how many referrals a user has.
Nope no where near that, however tweaking settings in php.ini is very easy to do so if there was anything I overlooked I wanted to know.
Do you mean a do-while loop? PHP has those...
 &lt;?php $counter = 0; do { $counter++; } while($counter &lt; 5); Pro-tip: If it amazes you the language doesn't have X feature, it's more likely it does and you just don't know about it. And who in the world calls them "repeat until" loops?
&gt;But this isn't real money per se, just 'credits'. [Don't take credits lightly](http://endlessparadigm.com/forum/showthread.php?tid=20105)
... What the fuck did I just read?
It doesn't matter if it's money, credits, or apples. It's data. You want to create an augmented join table like: Referrals ------------- new_user_id reffered_by_id created referral_bonus bonus_credited_date This will let you track who referred who, when, what the referral bonus was at that time, and when the referring user was credited. When the user logs in, you do a search for SELECT * FROM referrals WHERE referred_by_id = :user_id AND bonus_credited_date IS NULL; Then you'll get a nice tally of all the credits you should bestow on the user who did the referring. Bestow them, update the tables appropriately, and enjoy the ability to do things like offer tiered bonuses to top performers and so on. Yay. 
Thats still a while loop, an until loop iterates while a condition is false and stops when it's true. This is just a different kind of while loop. A bottom conditioned one. 
Wait, so all you want a loop that does `while (!condition)`? Why not just use, I dunno, `while (!condition)`?
Many of the large, CMS software like wordpress takes 0.5s on moderately good hardware (better than most cheap VPS). I usually aim for 0.01 for non-blocking scripts (those without Database, cURL, or I/O requests), and 0.1s or less for normal pages. Most frameworks seem to be about 0.09-0.3s. In addition, sometimes you can que time-consuming tasks until after the output has been sent to the user. You can also pass it off to a message que or CRON job.
Then I have no idea what you're looking for. Do = Repeat, While = Until.
[phunction](https://github.com/alixaxel/phunction/blob/master/phunction/Text.php#L300) has some neat handlers for this. Alix put a lot of time into dealing with many types of character sets.
I just noticed that PHP has a [Transliterator Class](http://www.php.net/manual/en/class.transliterator.php). It's part of the [Internationalization Functions](http://www.php.net/manual/en/book.intl.php). Have you tried this?
Your problem in this thread is that you are recommending people do what has been recognized as incredibly bad practice for several years. Your problem in real life is that you can undo magic quotes and reg globals in code and not bother at all about turning them on, except to test that dozen lines of code actually turns them off. Your problem in general is not realizing when you are wrong.
I don't know why so many of you aren't even trying to understand what is being said. The PHP community has a definite cancer when it comes to reading and comprehension.
Just invert the logic of a standard while loop? I don't understand what you're asking. Do you need a language to spoon feed you everything? Or is this what the real world is like? People really need a feature to change &gt;while($counter &lt; 5) into &gt;while($counter &gt;=5) Is that that hard? You need new syntax for that? If you need your language to do something like that for you then you shouldn't even be programming.
&gt; Why is that? I have never heard of a programming language that does not offer every type of loop. Many languages do not have a loop construct named "repeat until". For instance, C, C++, and Java don't have such a loop. It's not needed because you can easily do the same thing with the do-while loop. If you want to know why this isn't in the language, I guess you could email Rasmus Lerdorf and ask him for an official answer :)
You are saying you want to support idiots that run reg globals. You can do that by using some code to reverse the effects of this in a "boot" script. YOU NEVER NEED TO TURN THEM ON. Fucking retard.
Any particular reason to have all the joins, instead of just using a simple UPDATE statement?
This allows us to update both rows in the same query. And if you have a proper primary key on column 'nick', it should be just as fast. By using "two simple update" statements, you'll also have to: * Wrap it in a transaction * Do an initial SELECT to find the referrer's nick. So you'll end up with 5 queries: start transaction, select, update, update, commit transaction.
I can 100% agree with this. I took a class on Big O notation that was called "Design Structures of Algorithms" and it was fucking hard. We had to come up with mathematical proofs (on paper) to figure out the efficiency of some of the different sorting algorithms. Basically: if you want to write an efficient program, stay away from nested loops and especially stay away from double nested loops if you can help it.
This function is great! That being said, the iconv function provides no way to REMOVE strange characters that don't have accents (such as the ° in 1080° Snowboarding) and at the same time, CONVERT strange characters with accents (such as the ō in Gekitō) to the same character without the accents. For example, if I have the string "1080° Gekitō", I would want to convert it to "1080 Gekito", thus removing the ° character and converting the ō to o in the same step, but I don't think the `iconv` function provides any way to do that. Correct me if I'm wrong. The result of `iconv('utf-8', 'ASCII//TRANSLIT', '1080° Gekitō')` would be "1080^0 Gekito". The ° character gets converted to "^0". This is not what I want. I want this character to be removed. The result of `iconv('utf-8', 'ASCII//IGNORE', '1080° Gekitō')` would be "1080 Gekit". Both the ° and ō characters are removed. This is not what I want either because I want the ō to convert to o, not remove it. The only solution I can come up with now is this: function remove_unwanted_chars($invalid) { $bad = array_merge( array_map('chr', range(0, 31)), array("&lt;", "&gt;", ":", '"', "/", "\\", "|", "?", "*", "°", "ø")); return str_replace($bad, "", $invalid); } $the_string = "1080° Gekitō"; $the_string = remove_unwanted_chars($the_string); //This removed unwanted characters such as ° $the_string = iconv('utf-8', 'ASCII/TRANSLIT', $the_string); //This converts characters with accents to the same character without accents. The value of $the_string is now "1080 Gekito", which is what I want. Although this method works, you have to have a full list of the possible characters that you would want removed from the original string. Sure, I know that I want the ° character removed for this example, but there's no telling how many other strange characters might pop up that I'd also want removed. But, this is the best way I can think of currently to solve thsi problem. If you know a better way, please, I'm all ears.
[xhgui](https://github.com/preinheimer/xhprof) is the best php profiler i've found but the installation is a bit of a pain.
Man, this sounds like a dream setup. I'm a one man army, but I'd love to have these things in place. I have to do so many things manually. It's ridiculous and time-consuming. I'm on OSX using MAMP with Aptana developing HTML/CSS/Javascript and PHP solutions with Wordpress, Magento and a customized Zend Framework. I push code to a private GitHub on larger projects. I really need a dev server locally... :/
You need to declare class properties, like so: class user { private $user; }
I meant 10ms in PHP, which is most definitely attainable some of the time :)
Your code never sets loggedin to false, anywhere. In fact, the token `false` doesn't appear anywhere in your code. Furthermore, when your user isn't logged in, you don't create the user object either which is why it's undefined when you access it. Altogether your code is pretty strange; you fetch the user twice in two separate queries and use two different database access methods ($db vs. mysql_query). 
What's the different between private and public?
See here: http://php.net/manual/en/language.oop5.visibility.php Private: you can only modify $this-&gt;var in the class itself. Protected: you can only modify $this-&gt;var in the class and by classes that subclass it. Public: anything can change it. 
That's a fatal error because that code is wrong. The correct version looks like this: class A { function x($param) { } } class B extends A { function x($param,$param2 = null) { } // no fatal error with strict on } Your code breaks the rules of polymorphism. Also, even if your hiding notices PHP still generates them behind the scenes and it isn't cheap about it. 
&gt; but unfortunately it causes notices when you access variables and array elements that don't exist It also causes notices when you make a tiny typo in your variable or array element names. So instead of telling you that you have a problem, your script continues on incorrectly. This isn't efficient code because generating the notice (even if hidden by error_reporting) is *much* more expensive than the isset() call. And one should not value compactness over correctness!
Our app is international. You should have seen the hundreds of lines of if/else statements that were guaranteed incorrect and out-of-date by the time they hit production, before we refactored it with DateTime, bugs or no bugs. Basically, if you have a 'dst_type' field in your database, UR DOIN IT RONG.
Yes, I write a significant amount of my code so that it is compatible with PHP 5.2.
See my comment below, you're going to want to read it.
I do as well, because of work. 
Agreed, but see below for some nasty gotchas.
For personal projects, I don't really care about backward compatibility. Namespaces beat lengthy underscores! But for clients. I have one that uses PHP 5.2 and another that's still using PHP 4. So yeah, I still write code for older versions.
That's actually kinda where I intended it to go, but I'd forgotten the name of the sub, ended up at this one, and saw there was a lot of bitching about other stuff, so... :)
It's unaware of time zones, DST, and so forth. That kind of code is hell on Earth to write. DateTime handles all that, which is a massive relief, except that it's still buggy.
Do you have any screenshots you can share? It's a little tough trying to sell a GUI without showing what it looks like... Edit: Also, apparently it's been in my Pinboard bookmarks since early last year. Always interesting when I rediscover things.
One of my clients had PHP 3. Upgrading was not an option :(
Even RHEL is at 5.3 now. Time to let the past fade away...
&gt; Maybe so but not all class extensions are designed to be interchangeable with the original class. If that's the case, then you don't need to name the method the same as the base class method. Or use composition instead of inheritance. You've purposely setup your code to be polymorphic and then you're ignoring the error.
Looking more for a one on one
Any other options other than google talk?
Guy, I still code with php4 and html 3.2 in mind. If you can't support 10 year old systems, you're doing it wrong.
Hell no. 5.3 was released 2009-06-30 That's 3 years ago.... 5.4 is now the main stable branch..... why would you still support a release that's that old? Every sensible distro updated long ago and the language features are pretty compelling.
pm me your google talk?
I have skype open most of the day. But I can install Adium for google talk, I don't mind.
Unless the client is stuck on 5.2 or older, why would I care? My concern is mostly with writing the best code possible, and supporting old versions of PHP is never a priority. I do try to support IE7, but that's about as much care as I put into backward compatibility, unless I know the target audience is old or otherwise out of touch with technology.
At work we use 1and1 hosting, which refuses to offer 5.3 unless it is on a Windows 2008 Server. All other offerings (various Linux servers) have 4 on by default and 5.2 optional. Don't use 1and1 hosting.
And I thought having to support PHP 4 was bad...
Centos didn't even have a 5.2 package afaik. The official packages were 5.1 and 5.3.
Yeah, not really an ideal function compared to other replies.
a good anecdote my prof used when explaining accessing private versus public variables (and this is dating me, and I'm not even that old) is: Say you need to make a phone call. Now say you walk up to me and shove your hand directly into my pocket and take a quarter. My response should/will be "hey man, wtf are you doing?" Now, had you come up to me and said "hey man, can I borrow a quarter?" I'd have had no problem giving you a quarter (or saying no, if I didn't have one, etc) The point is that direct manipulation of class members from outside the class ~should feel like a breach of privacy.
My actual evidence is personal experience and years of working on business problems exactly like this, in various shapes and forms from vendor integration through simulation and screen scraping to data mining to billing and accounting systems. I am not assuming PHP would have problems, I am saying that it DOES have problems, because it is a horrible language whose design is a genuine pile of hacks and experiments, and because you need to be a clueless fanboy to try and solve every kind of problem given to you with it.
Why not set up a VM? If you're interested, I write a fairly in depth tutorial on my blog, jtreminio.com
I like to make use of the [auto_prepend_file](http://www.php.net/manual/en/ini.core.php#ini.auto-prepend-file) option, e.g. auto_prepend_file "/var/www/lib/start.php" The start.php script will be executed at the start of every request (before all other php scripts). In that start.php script, I will include core php libraries, set the default time zone, set some constants, define my autoload function. It's quite a handy technique.
Oh I forgot to mention: My employers refuse to get any of the dedicated servers ("plesk boxes" as we call them) because it takes too much effort to set them up.
I've been searching for this for a while. Thanks!
And array-literal notation. $names = ["John", "Jacob", "Jack"]; EDIT: syntax error
Have you done any benchmarking? I setup the hello world example and tried to `ab` test it but I'm getting "Connection reset by peer" errors after at most 2 requests: $ ab -n 5 -c 1 http://127.0.0.1:1337/ This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt; Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/ Licensed to The Apache Software Foundation, http://www.apache.org/ Benchmarking 127.0.0.1 (be patient)...Send request failed! Send request failed! apr_socket_recv: Connection reset by peer (54) Total of 2 requests completed 
I hate 1&amp;1's nameserver method but I didn't find it difficult to set up at all.
ooo! thanks!
I had the same thought when I first started working with Plesk servers. I hate Plesk, but getting a server set up with PHP 5.3 on Plesk isn't hard. All you have to do is run two commands, and it'll upgrade the Plesk install and then you can select the PHP 5.3 option.
&gt;failed to open stream: No such file or directory Pretty self explanatory: The pay_start.php file doesn't exist in the location you have specified
just checked my file directory. I don't actually have a pay_start.php file at all.
Absolutely. There is also Zend Debugger too, and you can choose either or based on what IDE you are using. Netbeans, Komodo, Eclipse and PhpStorm all have howtos for getting set up. Also, if you are on a mac, there is a tool that can run independent of your editor and have you step through.
 $ ab -n 5 -c 1 http://127.0.0.1:1337/ This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt; Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/ Licensed to The Apache Software Foundation, http://www.apache.org/ Benchmarking 127.0.0.1 (be patient).....done Server Software: Server Hostname: 127.0.0.1 Server Port: 1337 Document Path: / Document Length: 12 bytes Concurrency Level: 1 Time taken for tests: 0.010 seconds Complete requests: 5 Failed requests: 0 Write errors: 0 Total transferred: 420 bytes HTML transferred: 60 bytes Requests per second: 515.04 [#/sec] (mean) Time per request: 1.942 [ms] (mean) Time per request: 1.942 [ms] (mean, across all concurrent requests) Transfer rate: 42.25 [Kbytes/sec] received Connection Times (ms) min mean[+/-sd] median max Connect: 0 0 0.0 0 0 Processing: 2 2 0.1 2 2 Waiting: 2 2 0.1 2 2 Total: 2 2 0.2 2 2 Percentage of the requests served within a certain time (ms) 50% 2 66% 2 75% 2 80% 2 90% 2 95% 2 98% 2 99% 2 100% 2 (longest request) 
Use prepend and append $start = microtime(); $end = microtime(); $diff = $start - $end; Echo $diff; Ive always toyed with the idea of writing all error messages to console.log, but i've never actually done it. 
I forget to use array-literal notation!!!
Good question because Crystal Reports is the suck. The simplest answer is...no answer. There is not a comparable tool in PHP that fills the gap Crystal does: easy report generation for people who don't want to write every query. In my own work, I built up a set of classes to help me. I have my own PDO CRUD, a class that houses all my database credentials (internal only herp derp) and then true object classes for the elements I'm commonly pulling in. I'm sure that someone will piss and moan about this, but I even have classes to help me build queries. It took me a long time to put it all together, but I can generally whip up a report quicker than our Crystal Reports folks, and that includes me having to manually parse the effer put because I never figured out a way to elegantly output a result set automatically.
So you've done years of doing stuff in PHP that you shouldn't be doing and can't be specific about any problems. Ok. Other /r/php members have given concrete examples of PHP code that runs for months doing background tasks. I've personally never tried long running tasks in PHP. Calling it a "horrible language" isn't evidence of problems. It's a horrible language for everything and yet it still works. 
Every time you use an asterisk in a query, someone, somewhere wakes up screaming from night terrors.
You're missing a quote.
Don't configure a remote server for debugging, configure your local environment for debugging and fix everything locally on your PC. 
For your software: Optimize every query to execute as fast as possible. This means no asterisks. Close files and connections when done. Trash vars once done. Garbage collection Clean your output buffer. Use built in functionality when possible. Use sockets instead of tcp for php to server connectivity (less overhead) Nginx over apache Only use extensions in php that are needed If apache, only use what is needed module wise FPM APC For your own mind: Never google "php vs X" During development, try not to get tied down too much to over optimization Debug during development Profile and unit test I find sometimes that literally talking through my code helps me a ton. I'm an aural learner so actually hearing it helps me figure out ways to do things differently. 
Working with other people. It's *much* easier to transition new people on to a project with a common basis. it's also much easier to transition yourself *away* from a project by finding another dev with similar skills ("we need someone who groks yii"). When everything you deliver is your own bespoke code, it can be harder to have clients quit calling you. The "i need to understand this 100%" approach - while i understand it - is a bit scary at times. I've ended up taking over a lot of bespoke code over the years, and everything made *100% perfect sense* to the dev before me, but was an absolute nightmare to understand. It was almost as if, beyond using the same alphabet, they'd begun making their up own words and syntax, as opposed to using standard English words and syntax, and focusing only on the narrative of a story. It all made perfect sense to them (some of these devs I've spoken to months or years after they left), but it was fairly indecipherable. I've picked up Zend Framework and Grails over the past few years - there's *0* chance I'm going to be 100% fluent in the entirety of those codebases. And guess what. It doesn't matter one single bit. The parts I need to understand in depth, I can study or ask questions or experiment. The parts that 'just work' the way I need (perhaps not the way I *want*) them to just work, so I move on. This frees up some of my time to focus on documentation, or diving in with a client on project clarification more, or perhaps even more testing time. IMO, life's just too short to try to have a mastery of everything (I think) you're aiming for. So, while *your own* understanding of a codebase is important, keeping in mind others who have to follow isn't a bad thing. And yeah, there's more likely a chance that by using community-tested, aged libraries, you've got a better chance of avoiding security issues. For me, this isn't a huge one, but it doesn't hurt. I've been *programming* for 28 years, and 17 of that professionally, so take that for what it's worth.
Oh the joys of framework indecisiveness. :) I am in the same boat but I also have peers barking at me. You sound like you might be most happy with something decoupled so that you aren't totally dependent to something you might construe as monolithic. Symfony2 can either be used as a big giant framework or you can grab individual components like Silex as a microframework, Doctrine as your ORM, Twig for templates, etc. I'm actually a pretty big fan of Will Bond and the Flourish Unframework. Its basically a giant library of awesome classes written by a guy obsessed with PHP security and documentation that flat out embarrasses bigger teams of developers. I have a hangup with using 1 man projects due to support longevity, otherwise I'd use this for almost everything. If you want something small with routing, Fat-free is also fairly comprehensive but the DSL just annoys me. If you need to standardize, go with a framework like Symfony or Zend or CI. IF you just want more structure, check out the microframeworks.
I have experience with both, CodeIgniter and Symfony2. It really depends on the project. Symfony2 definitively is great for larger projects, while CI is good if you need something done quickly. Symfony2 is much more organized while Codeigniter is not. I have pretty large project built on CI, and right now it became a bit of a mess, and it's getting harder to manage it, you know, you could always manage it better, but that's not the point. While Symfony2 forces you to do things properly, CI is more of a freedom. If you want to work as a team as well, Symfony2 is a much better choice.
What is taking so long to set up something like xdebug? pecl install xdebug Add it to your php.ini and set up the PHP options for remote debugging. Done. Granted, you don't always be able to open ports to get back to you. In that case, you should look into running VMs or locally installing PHP. 
the configuration of your vhosts should be pretty much exactly the same. Just write a shell script(or php, whatever) that reads in a vhost template and puts the proper file locations/etc in place, puts the configuration where its needed in the filesystem, and optionally restarts the web server. On our dev box we have a script that basically creates a new user, sets up the account, puts all the right configuration in place, clones the proper git repo and installs some hooks so its constantly updated with changes to that branch. Another script can 'un-sandbox' the branch, basically just deleting the account and hooks.
I know, what I'm asking is what would be the most efficient way (especially after the database grows big). Store only the raw date and make calculations in the MySQL query or store every possible search criteria and don't have the need of making calculations
Stop being silly and use the data types. Here are all the documentation you need on the subject: http://dev.mysql.com/doc/refman/5.6/en/date-and-time-types.html http://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html I suggest you read it and understand it. You don't need to do any calculation at all by yourself; MySQL does that for you, *if you use the right data type*.
ah thank you!
thank you too!
I use XDebug with PHPStorm. I don't know about everyone else but I use the debugger A LOT. Many times I want to see what is in scope such as Cookie values, request params, etc. Now, what I would really really really like to see is this (anyone?)... the ability to: 1) Easily break on exceptions with xdebug. 2) Debug in a VERY detailed way. Like stack trace, but where you can literally go line by line or, fuck it, assembly instruction at a time. Just a read-only snapshot of everything it has done. Suggestions?
You may be my personal hero. I demand more knowledge from your brain!
Does anyone here actually do TDD? do they recommend it?
As for DB, I don't really have an elegant solution. I usually do a just do a mysqldump, then move the file via scp, then a mysql * * * &lt; db-file.sql. Then update the few rows manually or via script depending on how many times I've had to do it. But my two major clients are eCommerce, so the production DBs are sacred. Every so often, I'll clone my staging (and perhaps dev if necessary) from the production, but I find it's not that important for me to keep them all in sync.) I try to keep a Vagrant (VirtualBox) for each platform I'm working on. Right now that's just a box for Magento, iScripts (commercial php software, bleg), and Drupal. I start with a lucid box (see vagrant guides), then open ports for Xdebug and MySQL. You can do that as a box, then "inherit" and customize from there for the specific projects/platforms you work on. Note that you're "development database" is housed inside your vagrant boxes. So between my work and home computer the dev db could be slightly out of sync. This hasn't gotten in my way too many times, but I suppose you could always set up a remote development DB and connect to it over the network to keep dev db in sync across home &amp; work. Of course that will introduce some latency. (If there are major DB changes, you ought to at least have an install script that will get promoted with code through dev-&gt;staging-&gt;production. Most frameworks have something along these lines.) If I didn't mention it, I send copies of my boxes to my personal linode so I have access to them later. I suppose you could probably set up some rsync to keep them up to date. But you could get some weird conflicts with that. As of now, if there is a major change, I just repackage the latest box and put it up on the server, and pull it down where needed. This lets me fire up Xdebug inside Eclipse-PDT, and also use MySQL query browser and admin programs. If you have any specific questions, let me know but this is the gist of my setup.
I've been learning PHP as I go using online sources to make this online text based game. I'm guessing that a lot of my code is innefficient. If you look through the site you'll see that I use this link to generate the images for the buttons of every form. My question is: would it be better to save a copy every time I need new text on it or just leave it like this?
Where can I buy one of those?
If the buttons are going to be used more than once, it would probably be more efficient to save a copy. Though if you've got an audience that's likely to use modern browsers, you should use CSS gradients to get the same effect. Less processing, less data, and easier maintenance.
Extremely useful. Can't believe this is the first time I heard of Vagrant. Thanks again!
Depends on what it's for. If I don't know the server environment it's going to run on, I code it for 5.2 compatibility. Still there are just too many web hosts that doesn't do 5.3.
I'm in the same boat. I was programming in PHP back when it was PHP/FI and things have changed quite a bit. I'm a solo programmer, and I concentrate on quickly developing small sites/apps. But here the bottom line on why Im switching to a framework : Almost all projects worth anything need a framework of some sorts. You need structure for your applications that require some complexity. You probably have developed your own framework and use this code over and over again to facilitate your needs. This is great, but someone has already done it, and there is a good chance it was done better. So instead of developing your own frameworks, why not adapt one that is built by a team and tested. There are many to choose from. But once again, I could get away with using everything from scratch since I am a solo freelancer ( I have so far ), but I gain proficiency when using frameworks, proper IDEs and versioning. Also, versioning, common frameworks, proper documentation; these things will allow projects to grow beyond just one developer, and for you to open shop to having other developers work with you is how applications take a leap into greatness. 
You're welcome, always happy to do my part to help spread the gospel. 
mysql_ functions are outdated &amp; are no longer being developed. mysqli_ functions are under active dev &amp; should be used.
I use it on Windows with WinCacheGrind to analyze execution and find out what parts of my code have the highest cumulative execution time so I can focus my optimization efforts. I once worked on the TorrentBits (PHP bittorrent tracker) source code in a fork. I managed to get the main page generation time down from over 1,500ms to under 100ms with under an hour of work. It has been a while since I used it, so maybe it has changed, but when I used it there was no feature to track memory usage or CPU usage, just execution time. Those two features would have been **amazing**. Example: http://blog.codecentric.de/wp-content/uploads/2008/11/wincachegrind.png *edit:* This may be of use for memory usage: http://derickrethans.nl/xdebug-and-tracing-memory-usage.html Apparently Facebook made an extension called xhprof that can also do CPU and memory tracking.
I don't do real TDD, but I do almost always write tests before writing code. I find that writing a single atomic test and then coding against the test is easier than writing a bunch of code and testing *in situ*. It lets me isolate one individual facet of the problem, solve that problem, then move on to the next. It reduces the cognitive load. Test-first development also ensures that you'll have a full suite (or nearly full--I get lazy too) of unit tests. This makes it **much** easier when the project gets bigger to refactor or make any other changes. I'm not a zealot, but I definitely recommend everyone give it a try.
Exactly. You can make buttons like this without images: http://webdesignerwall.com/tutorials/css3-gradient-buttons
What about a simple real-time game or web chat or website with web-sockets. Let's say you don't need high-load solution and want to stick to single platform for simplicity?
[Comparison operators](http://php.net/manual/en/language.operators.comparison.php)
Yeah, it's exactly equal to / identical. This still isn't a comparison? You use === like: if ($a === 2), not $a === 2; Shrug. Maybe it's supposed to be a comparison without context.
We don't have context, so certainly anything could've happened. All we know is that the file isn't there now. An you give us some background on how thi error came up? Did the site ever work well or is this a new site? 
You should really turn off error-displaying on a production site.
There are things afoot in the framework world. Many frameworks - and I mean the big ones - are looking at becoming [PSR-0](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md) compliant. This will allow packages to be freely moved between different frameworks witnh ease. The idea is to allow packages to be simply *moved* to a new framework, rather than *ported*, and it will *just work*. That way the framework is something that you learn, and that should hopefully be minimal. Then you pull in your favourite PSR-0 compatible ORM, templating engine, authentication packages, email handler etc. Those things you don't meed to relearn. So yes, I do think people need frameworks. Yes, learning each framework, learning or porting packages you use can be a pain, but I believe that issue is being tackled. I see 2012 turning out good things for PHP frameworks.
Thanks.
Yeah but this is a new project, no reason it can't use php 5.4
Yeah but this is a new project, no reason it can't use php 5.4
CI comes with PDO, MySQLi and many other database drivers, MySQL is the default, but you can change it in config/database.php Built-in drivers are in system/database/drivers
Didn't know that. Is that new? 
There's no fragmentation with CodeIgniter anymore. Reactor === CodeIgniter.
Learn PHP from a 10-year old. At your own peril, I might add.
The best way to learn, is to teach. Yes, if someone, somehow decided to use his material to learn, they would probably learn some bad practises. However, that's not the point. The process of formulating your understanding into a format that you can propagate to others is the best way to discover where your knowledge is lacking, and to come to even better understandings.
&gt;The best way to learn, is to teach. Then we are diametrically opposed, because I don't agree with you in the slightest. Again, I don't think newcomers should teach, because it creates more harm than it does good. They should instead learn from people who know what they are doing (which is why we have books and the like in the first place), and then learn by doing, not by teaching. You can formulate your understanding without propagating that information, with all it's faults, to other people, and you do that by programming things, i.e. putting your knowledge to the test. 
I don't necessarily disagree with you when you say that new programmers shouldn't teach. All I'm saying is that there's no harm done in them trying. If you're interested in putting your money where your mouth is in regards to "They should instead learn from people who know what they are doing", I'm thinking about putting together a sort of mentorship program in tandem with #phpc and the PHP community at large.
If you are wanting to stick with a single platform then you would probably want to stick with the same language on the client and server. Making Node your go to solution. I just think PHP is great at what it does and as is Node so why reinvent the wheel?
Most of us are busy people - it's a busy industry. But, I've been mentoring a young guy for a few months now, and I find that it takes up less than an hour of my day, each day. I just make myself available for questions, provide him with a few important resources that most teenage kids can't afford themselves (web hosting, etc), and show him the work I'm doing myself (as legality permits). I might also set up an internship for him with my company, as resources permit. The mentorship program is really just an idea in my head, though I've floated it to a couple of key members of the PHP community. I'd only suggest involving yourself in such a venture if you're actually interested in doing it; you can probably find someone to mentor on your own. The mentorship program would simply be a matter of "matchmaking", and providing a few extra resources that you wouldn't have available yourself.
The image is hosted on the same server so I didn't think it would need to do another DNS lookup? I'm relatively new to this so I'm not too familiar with this sort of stuff.
If you make it a relative link then no, It won't need to. Relative: &gt;../images/button1.png Non-relative: &gt;http://example.com/images/button1.png
http://en.wikipedia.org/wiki/ISO_8601 Ignore MySQL date functions and store your dates as ints (YYYYMMDD). This way you can order your records easily as they ascend and descend linearly. So you can do things like: select date from tbl0 where date between 20120100 and 20120131 order by date; And in PHP you can play with the dates easily: date('d/m/Y', strtotime($row['date']));
A point I haven't seen mentioned is that frameworks shield you from many of the language-specific implementation details and give you a pretty standard set of abstractions, allowing you to switch between different languages. Suddenly you're not just a 'Perl developer' or 'PHP developer' anymore, but can rapidly build a web application in just about any language. I started out doing the same thing, building up my own framework just the way I wanted it in Perl and reusing and refining it in successive projects. I still get calls from old places I worked that sill use various versions of it asking questions about it, and the details are still fresh years since I've actually looked at the code. Then Perl went out of vogue, and I started working in PHP, Python, Ruby, and most recently Node. On my first professional PHP project, they were already using CodeIgniter. I found CI to have many of the same conveniences I had built in my home-brewed framework, and many little niceties I hadn't thought of. There's a fair amount going on under the hood I don't understand, but it doesn't matter if it works the way the documentation describes - that's the whole beauty of it. I don't need to know a language intimately enough to build a solid framework in it in order to consider it part of my skill set. And, the great thing about OO is you can and should extend the framework with any features you think are missing. You can even experience the warm-fuzzy's of giving back to the community by contributing your improvements. If you're devoted to PHP this might not be an issue, but becoming comfortable with common framework patterns goes a long way towards making you a more language-agnostic developer. Now rather than viewing learning a framework as a chore/waste of time, I'll read the documentation for frameworks I have no direct need of, just to get ideas/inspiration.
Let's be realistic here: http://w3techs.com/technologies/details/pl-php/5/all
Your original post sparked me to finally overhall the system, on this fine Saturday. It was an interesting project, I got git pushing to bitbucket happily, and then bitbucket would tell my online dev server to retrieve and cp over the www directory from the repository into a live directory on my dev site (so now the version in bitbucket is propagated to a live, dev, site). I also setup a pre-commit, and post-checkout hooks to dump and reload the db respectively, just ssh into the vagrant box and dump the file to a shared directory, and vice versa; that solved the miss synced dbs in the dev environments extremely well (I could throw you the scripts if you like, they aren't large). I also got vagrant setup with some chef scripts to install a lamp box. Though I wasn't happy with how little of that bit I actually understood, I really want to learn puppet after doing that now :). (Fyi, that was mostly bragging, really happy with how it turned out \^w\^). Again thanks for pushing me in the right direction, vagrant is amazing, and though this setup was a bit painful to get up and running, it's by far the best environment I've ever worked off of before, now lets see how easy it is to get my coworkers to adopt it &lt;/sarcasm&gt;
TCPDF
I believe this also has output to PDF, but I haven't tried to yet. 
Google: maxmorgandesign (Max Morgan) AIM: maxmorgandesign I've been freelancing for about 4 years now. PHP, MSYQL, CSS, JS, AS3, XHTML, some Java, some C++, etc. All of that fun stuff. I try to stick to the backend of PHP/MYSQL driven applications. I dont know any other serious web developers - mainly front end / graphic guys and gals, so yeah I'm up for it.
And then there is the check to see if $form_values is greater than null. If it is, append an empty string. Otherwise, set it to an empty string. Yep.
It's very possible in PHP using one of the available image manipulation libraries. Checkout either GD or imagemagick.
Check out Codeception! [http://codeception.com/](http://codeception.com/)
Yes. I do TDD every day, and I am a PHP developer for a website that gets hundreds of thousands of unique hits each day. It took me a long time to figure out a good testing pattern to drive my development, but once I did I won't ever go back. I can confidently release huge new features with minimal QA testing, and for the last 6 releases, we have had 0 bugs. Zero. And these aren't simple changes. We replaced the entire purchasing system on the last release. Sure, it might take a few days longer than cowboy coding it, but 100% stability and massive flexibility is definitely worth it. I'm on my phone for the weekend, but send me a message if you want to know more. I'm even up for some TDD tutorials later in the week if you want an intro hand-holding lesson.
The seminal text would probably be _Test Driven Development_ by Kent Beck. Couldn't go wrong with that one. I would add _Growing Object Oriented Software, Guided by Tests_, by Freeman and Pryce.
* Why? * Where can we see the rest? For days when we need to feel better about our code. * What did you say? 
I've written some [Behat](http://behat.org/) tests for projects in the past. It's a pretty good BDD tool and the test scenarios are essentially plain English ([Gherkin syntax](http://docs.behat.org/guides/1.gherkin.html)) so they can be written by non-developer stakeholders. You can get your PM or QA team to write the scenario descriptions for you, and then you code your app so it meets all the scenarios. The features are described using "Given, When, Then" or "Arrange, Act, Assert" syntax (where "Given" is any preconditions for the feature, "When" is the actual actions you're testing, and "Then" is the expected results). Something like this might be a simple example: Given "Product 1" costs $10 And "Product 2" costs $20 When I create a new shopping basket And I add "Product 1" to the basket And I add "Product 2" to the basket And I go to the checkout Then the subtotal will be $30 And sales tax will be $3 Behind the scenes, Behat maps each line of the feature into a method in a class (it calls this class the "FeatureContext"). This class can do whatever you want, there's two approaches. The first approach is to take a functional testing approach using something like Selenium, where it actually uses a browser to click stuff. The second approach (which is what I usually use) is to directly interact with the PHP classes being tested. So for the example above, it might be something like: public function whenICreateAShoppingBasket() { $this-&gt;basket = new ShoppingBasket(); } public function whenIAddProductToTheBasket($name) { $product = $this-&gt;productRepository-&gt;getProduct($name); $this-&gt;basket-&gt;addProduct($product); } // etc. [SpecFlow](http://www.specflow.org/) (a BDD library for .NET) has a good example with bowling score calculation, but the same principles apply to Behat.
Apache FOP (XSL-FO) works great for PDF generation if you need a high level of control. If you manage a way to generate excel files, you could use OpenOffice.Org to programatically convert to PDF. It usually does a great job.
null = 0, in case you were unaware of that. So even if it equals "asdf" it's still greater than 0, as in not 0.
I felt wrong upvoting this, but damn I lol'd good.
It's probably pretty slow.
I have made one website with Bonfire. It's not very bad but it is also not perfect. And it is also in early stage of development... And not many devs are working on it but by last commits it seems they are actively developing Bonfire now (which was not true some time ago)...
So if you have some large website which suits PHP very good, but there's a little piece of functionality that requires asynchronous server - would you use node for the whole site? You could use it just for the asynchronous parts, but you will have to rewrite the models and business logic in JavaScript. Having the same functionality in two languages.
&gt;Do I really need a framework? Which you follow with... &gt; I always build my own code from scratch (and re-use my own frameworks of course). And then you say... &gt;but am I just being ignorant/stupid by working without them? By your own admission, you already use a framework. It doesn't matter that you built it, it's still a framework. It seems you've answered your own question.
Using raw DOMDocument is only recommended by those with too much spare time or an affection for more lengthy and unreadable code. You ought to be using a wrapper atop the libxml DOM wrapper. The three big contenders are FluentDom, phpQuery and QueryPath. Most of them following the jQuery API and handling scheme to some extend: print qp($html)-&gt;find(".class a")-&gt;wrap("&lt;p&gt;")-&gt;top()-&gt;html(); Yes, there are also tutorials: http://www.ibm.com/developerworks/opensource/library/os-php-querypath/
... you hired an odesk programmer. What did you expect?
Downvoted because it recommends cakephp as an 'excellent choice'
That code reflects a profound wisdom that only an odesk programmer can withhold. Did you pay him though ?
I had the same thought, and actually followed through with it last month. I just wanted a simple Joomla plugin without learning how to do it, as I hate Joomla. They ended up quoting me $100, (at $13 / hr rate?). I ended up accepting their offer, and then contacting them via Skype. They tried to get more money out of me for something that should have been painfully easy. So I pulled out and learned how to do it, and did it in 30 minutes. I think they legitimately didn't know how to do what I wanted them to do, so they were trying to get money to do it some backwards way. 
probably downvoted here for suggesting an open mind.
I used to be on odesk and elance. I stopped after I realized that what everyone else comes to: Its not worth it. The amount of time you spend chasing these jobs, only to be beaten out by some dude billing 4/hr (and just raping the hours clock to still bill 200-1000 USD per project) is wasteful. There are also the rules, such as "use this app, screen shot everything you do" etc.
This seems to be the norm at odesk: Advertise low rates as a developer so you can get the initial foot-in-the-door. Afterwards, negotiate a price that is higher than your advertised price. Since a lot of people are desperate in getting "cheap" developers, they fall for the trap, and once the developers get the money, they can just bail.
This isn't a remote exploit.
I recommend [RatProxy](https://code.google.com/p/ratproxy/) which is the same as chorizo-scanner, but free. Another excellent scanner is [Skipfish](https://code.google.com/p/skipfish/). The latter uses brute-force guesses on your pages' parameters. Though it is meant for the PHP framework [Yii](http://www.yiiframework.com), this page [How to write secure Yii applications](http://www.yiiframework.com/wiki/275/how-to-write-secure-yii-applications/) contains valuable information for all PHP applications.
Careful with [loose comparisons](http://php.net/manual/en/types.comparisons.php) and [automatic conversions with operators](http://www.php.net/manual/en/language.operators.comparison.php). `0 &gt; null` is `false`. `'asdf' &gt; null` is `true`. But, `'asdf' &gt; 0` is `false`. But what I don't get is this: `$form_values .=''` on true cases. Maybe employee is making sure it's a string? Why not just cast it? No, better yet, cut that line entirely since it's auto-casted anyway down below.
Right, you can't set empty($cup). But it's still not a comparison. There's nothing to compare to. This should just be $emptyCup = true; empty($cup) = true might be invalid, but it makes much more sense than to use === true when you're not comparing it to anything. It's not saying "if (empty($cup) === true)) .." it's just stating that it's empty.
Lol yeah, I'd still buy it.
I've never needed one in PHP.
PHPExcel is capable of doing Excel 2003 (.xls) and Excel 2007 (.xlsx) as well.
Check out [HatePaste](http://www.hatepaste.com)
Wow I needed this so much! I was using plain XPath up until now. I'll redo all my code! 
Why? Our first odesk experience was great. We found a $25/hr ($30/hr now) programmer that has the skills equivalent of a senior developer in the states and after 500 hours he is still employed by us. So we decided to see if we can find a junior developer for around 20/hr and this is what we got. A lot of these guys are shady but there are defiantly some "rockstars". Since I will not end up using any of his code, here is the rest of the file: http://hatepaste.com/paste/5b73e62f This was his 'revised' work. The previous file was using 'var's for class variables and was not proparly handling the exec() function. There needs to be some kind of validation on the result of the system call. Mind you I actually interviewed the fellow on skype. His english was great and so was his test (I had him create a shopping cart class while I watched his screen). My guess is that the person doing the interview was not the person doing the actual work. We are canceling the contract Monday morning and are going to look for another.
Even if he was actually checking if null = 0, the proceeding code does completely nothing. If its greater, it appends nothing to the variable. If it is null it sets the variable to an empty string, only to make it a string anyway on the very next line. My head hurts.
if you're a student, do some volunteer work for some charities or not for profits. Help them implement some sort of php app that you can build and deploy that will streamline or help them better manage their activities. Throw up an article or tutorial here and there on your blog, even if 100 people have written about it write your own. Become the 12030120**2th** person on that github project or find a smaller one and work on it. Go on Craigslist say you're a php engineer for hire and do some pace work if you can afford it. Apply for Jr programming positions, trying to act like a Sr without the experience just won't work. Get your foot into the door, and if you are as good as you say you are, you will quickly rise to the top.
A potential employer is a good answer
Facebook chat is written in Erlang, rest of the site is in pseudoPHP, you can definitely glue together different languages to build a site. PS, not knocking the project, I think its pretty cool
So post on github - the idea is less about being a well known project, but putting your code somewhere that people can read it. Build a site - there's many niches left open, you just have to find one - I have a list 2 pages long of PHP projects ALONE. The best idea I can give you is get another hobby, preferably one that programmers don't generally have. Combine your new hobby with programming and I'm sure you'll get an idea that no one has had yet. Remember, your job is not to write code, it's to solve problems.
Switch to Ruby or Python. I feel like this is a bad thing to post here lol.
Get certified: http://www.zend.com/services/certification/
Pretty sure something like mod rewrite for Apache is required. The webserver has to know what file to load somehow.
Learn a new language. It's not enough to be a good PHP programmer, you want to demonstrate that you are a good *developer*. Github is a good place to demonstrate your skills as well. Contribute to an open source project, especially those that are widely used tools. Even if your contribution is small, it demonstrates familiarity with the ecosystem and a willingness to make stuff better than when you found it.
You would want to do something similar to this: RewriteEngine On RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ index.php [QSA,L] It routes all file and directory requests that do not actually exist in the web directory to index.php without actually needing to display index.php
It's up to you, Github or Bitbucket but personally I would choose Bitbucket. You can store both public and private repositories for free. **EDIT** If you're not concerned about having private repositories too, go with Github, the community might be a bit stronger.
Symfony would be a better choice for your database requirements. Even if you use Symfony 1.4, there's nothing that says you *have* to use the latest and greatest Symfony version. I wonder though, why do you need to access not only multiple databases but multiple databases that 3 different interfaces? You should probably look at the possibilities of consolidating this to one interface if you can.
Write a book and release it under CC license.
120301202**nd**
"Anyone can program PHP, it's just typing stuff..." Have you taken the certification test? I teach a prep course for Zend, and probably 20% or so of the students that take my course end up failing the first time they take the exam. I don't know how many actually take the test altogether - I don't have stats on that. It's not 'just memorize stuff'. Is it useful for everyone? No, but no cert is. It's useful as a signal that you have a certain level of competence with PHP, and it's a competence level that I know from experience with my students that can't be faked, even if you do software development for a living.
This is exactly what you would need to do. For a more in-depth explanation on this code and now to set it up, check this out as a reference: http://codeigniter.com/wiki/mod_rewrite It's for CodeIgniter, but it follows the same idea with great explanations. The only difference between the comment I replied on and this one is the [QSA] in the RewriteRule (which will append new and old query strings to the rewritten URL) ----- Edit: I missed the original question about doing this in PHP. It is not possible because PHP is not your "httpd" engine that's directing traffic, so it cannot route it. You could do a 404 error redirect to the index file to properly load the pages from Apache though. This is also mentioned briefly in the URL I put.
To hell with posting stuff at github and stackoverflow to show you're a good php programmer. Those are the end result of people being good developers, not the cause. They're also not the only end result, as you can be a good developer and never post on either of those sites. But... it's a common one. But posting to github to get noticed by someone (who? employers? parents?) is a fool's errand. You want to get noticed? For what purpose? To get hired? Look beyond that - establish a whole reputation for yourself as someone who does stuff outside what others do. This may not apply to you - perhaps you really just want to write code every day, all day long. If not... Start a user group in your area. Getting that off the ground and keeping it running will demonstrate to business people in your area that your competence goes far and above pure coding - you need a degree of social skills to pull that off for any length of time. Is there already a user group in your area? Speak at it, and/or offer to help co-manage it. You'll get noticed. As someone else said - write a book. You could release it as free/opensource, or find a publisher, or self-publish via amazon/lulu/etc. If you're in to javascript, I publisher authors (and pay) at jsmag.com all the time. Speak at regional conferences. Promote these on your blog. Video yourself doing so. Produce some screencasts on a series of topics and publish/promote them. Organize a conference or hackathon in your area. Find local business groups and offer to present tech topics to them, but in non-tech terms. Again... I'm not sure of your goals - assuming it's to get hired. Rereading - it's coming across like you just want popularity or approval - "please tell me I'm a good php programmer! see my code? I'm good!" No one cares if you're a good programmer. They care if you solve their problems. This is a major reason why so many of us run in to crappy code every day - the hiring people didn't care about the code - they cared about the results, and the results most likely *were fine* for some period of time. 
You are totally right. I was too quick to read over the comment and miss-read the variable name (I didn't even see `SCRIPT_NAME`). I would delete my comment, but I want them to see yours.
It shows you're so good at PHP that you left PHP because it wasn't good enough to keep up with you. Lol, here comes another punch to my karma.
I feel it should be specifically stated that those four lines of code go in .htaccess, not in PHP (as the OP was asking/hoping for). This is, indeed, the solution, just thought that that clarification would be good.
You could look at using Websockets with PHP if you're trying to build an HTML + Javascript client? There's a few examples out there, for example: [https://github.com/nicokaiser/php-websocket](https://github.com/nicokaiser/php-websocket). If you're planning on developing your client as a standalone client which doesn't run in the browser, you could look into PHP's sockets functionality: [http://php.net/manual/en/book.sockets.php](http://php.net/manual/en/book.sockets.php).
No.
Since I can't test this until tomorrow, what is wrong with [this library for open connections in PHP](https://github.com/nicokaiser/php-websocket)?
When you say that I can omit the HTML head and body tags would I just link to my external CSS file, then the actual container div?
You wont be running that under your webserver, it looks like it has to be started as a separate process. If you can do that, you can run a server in a language better suited to such things, like Perl.
Thanks so much for the fast response! This will make life so much easier for me. 
I came across this a few days ago. I'm glad I bookmarked it now! http://nodephp.org/ This might be just what you're looking for.
I'm currently researching various PHP frameworks to use for a new project and the reasons I decided not to use CodeIgniter are: * Outdated method of loading helpers/libraries/models/etc. autoloading can be used nowadays. * No ORM by default * Libraries and database use single $this-&gt;{var} to interface with, rather than for example creating a new query class to build a query with. * Only filesystem based caching * No ACL Some of these can be solved by using plugins and some are a matter of taste, but CodeIgniter feels dated for me. Symfony2 so far doesn't really have any major downsides for me, yet I haven't dug too far into it.
Is Zend really that big of a community?
25+ years experience in PHP, a programming language which is 17 years old? :)
I'm working under the assumption that this was intended as sarcasm, but given that the internet is a limited medium in terms of human expression, I think some clarification is in order (I wouldn't want anyone to take you seriously and think that w3 schools is actually a good place to learn from). 
You are able to use sockets in PHP if you can start the script via command line or maybe cron (if you don't have shell access and are on cPanel). Edit: But then again, if you have shell access, you can compile a local version of node and just have that running without it being in the global paths of the system. Shoot me a PM if you'd like to chat more about it.
Your webserver likely has a 30 second runtime limit on PHP, which is the first thing that needs to go. It's an ini option - `max_execution_time`. Really you want cli access to the server, and starting PHP as a daemon process if you want it to listen to connections like a full-on server. That's usually the job of the HTTP server. All of this is mostly demanding that you have administration of the server.
 $form_values .=''; Mind blown.
"PHP wasn't good enough to keep up with you" doesn't really make sense. Ruby and Python are different, with different strengths and weaknesses but not "better". Why would anybody use PHP if this were the case?
You can't do noise yet with CSS. Plus the gradient stuff won't work for probably 40% of your visitors.
Your second bullet point will be more efficient for looking up months and years etc. As others said a timestamp would be best for storing the full date/time. Then you could have fields for year, month and day, which you index for quick lookup.
This makes me wonder: what's your github/stackoverflow account ... 
Nginx version should someone dislike Apache as much as me. location / { try_files $uri $uri/ /index.php; } 
Why ಠ_ಠ? You can't parse PDFs without Ghostscript... EDIT: or convert PNGs without libpng, for instance...
I really like this idea as I am at a starting point of making an easy, agile system at this place.
You can use server-sent events for when the server needs to push an event to the client. Then use AJAX for when the client needs to speak back to the server. I have done this with a standard LAMP stack. It requires no extra configuration on the server side. Here's a blog with an introduction: http://dsheiko.com/weblog/html5-and-server-sent-events This is not supported by IE, but is supported by other modern browsers. http://caniuse.com/#feat=eventsource 
It truly depends. As a performance engineer (previously at a major shared hosting provider, now consultant) I've seen it take up to 5 seconds for just the first line of a PHP script to be executed. If you are competing against other websites requests, ie shared hosting, VPS or just a busy server) the average will be skewed from what most dedicated-servers developers experience, let alone what they experience on their own desktop dev env. Average speed will vary depending on the complexity and technology stack behind the site. There are an infinite number of value-added items that can dramatically increase the response time of a site even under load but as always 'it depends'. 100ms is a good goal, but the load on the server/network is an important variable to keep in mind.
Speaking of Joomla, here is a great piece of software I had found from an overseas freelancer.com user (who's code I was then hired to fix): http://pastebin.com/VFrYGb2J Edit, little details. It was a decently made coupon manager plugin that someone else made and this Indian developer butchered with code like this in it as well as overwriting all of the top comment block with his own copyright notice.
If you're coding on an iPhone or Android mobile device, good luck to you. But a few colleagues of mine use iPads/tablets on the train and such for programming, so they might be worth supporting.
Unfortunately that's not the first time I've seen that one instead of just (string) type casting.
It would be cool to have limited functionality on mobile devices, such as the ability to read posted code/reviews/comments.
Had a discussion about this recently, either here or on /r/programming; I don't actually think w3schools is as bad as people make it out to be. Not that it's a great resource, by any stretch, but if you just need to look up the syntax for creating a mySQL connection or something, it's fine. But otherwise, yes, I was being sarcastic.
Use the Simple HTML DOM Parser library. http://simplehtmldom.sourceforge.net/
This might be similar to what you're looking for? http://code.google.com/p/phpwebsocket/
It would be a bit pointless to set up @fontface just for a few buttons, if you're not using the font elsewhere on the site. But if you're not set on that exact button design, you can compromise by using CSS gradients, a basic font, etc.
[re: realpath cache size](http://markmail.org/message/kcogqi2rrkogystb)
You could do one of a few things: - Set up caching so that you save the generated buttons to e.g. Login.png. Every time the script is loaded, check if you have a local copy and serve that directly instead of regenerating. Only problem is if they get 'hacked' e.g. http://mafiapoint.com/image/button.php?text=Blah%20blah%20blah - you'd end up with a ton of cached files never actually used on the site. - Make a separate script the generate the buttons, then save that to a static image and link that in the CSS instead. You could also merge all the various buttons (Login, Submit etc) into one CSS sprite. - If the background is always the same, save that as a blank image and put the text on with CSS. If you want the exact font you'd need to use @font-face which may be a bit more overhead. - Use pure CSS i.e. gradients with background-image. You won't be able to make the buttons exactly the same, and older browsers will just see a solid colour, so it depends how much you want to compromise.
Looks pretty nice. Fonts are too large though.
Also, i have no idea what the site is about.. i just thought it was some sort of pastebin style site. 
Paste a block of code, and then comment on any line. Comments are threaded. I think it would be interesting to see this paired with etherpad.
I just replied to the original comment but I wanted to tell you too. I do plan on having a version for tablets to allow commenting. I myself have a kindle fire and it's nice to sit in my living room and look at do reviews on it. I feel like a phone screen is just too small to look at code with any kind of understanding though so I don't plan on going smaller than tablets
Thanks! I am pretty happy with it. It looks way more professional than it's predecessor. 
You're right. I'll get that cleaned up when I create support for smaller screen sizes.
I never used etherpad so I can't really comment on that. The code should have syntax highlighting unless the css is being blocked for some reason.
I like this look a lot better. Some continuity issues though. http://i.imgur.com/5MrwY.png
git, github, svn ... Are some related keywords. 
OK it's fixed. Though chrome seems to ignore border-radius if there is a scroll bar.
Awesome, thank you. This worked perfectly :)
Thank you for this. I use nginx on my server, and apache on my localhost. So it will be nice to have this information for when I go live with anything.
I have Cron. What would I do from it?
There is still the one pixel height difference of the dark gray header bar. When viewing the code, its one pixel higher. Trivial, but its noticeable when using back/forward.
I'm not seeing it on chrome or firefox. What browser are you using? OS?
Click the "Hide" link at the top just below the review title.
[Code Complete](http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670) [The Pragmatic Programmer](http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1337620147&amp;sr=1-1) Both available as ebooks, reading and groking all the info in each of these books will give you a great introduction to software development in general, not just PHP.
For sure it's quite possible to glue any technologies, the question is the price.
This is the right answer if you must use a relational database. postgresql and oracle support recursive queries if either of those are an option, but a nested set would perform better.
Would it have anything to do with the fact that you're setting `$referName` after you're running the query?
Yes I'd like to know this too. accorging to [myfavoritebooze.org](http://myfavoritebooze.org/)'s [code](https://github.com/lloyd/myfavoritebooze.org/): &gt; /api/whoami is an API that returns the authentication status of the current session. &gt; it returns a JSON encoded string containing the currently authenticated user's email &gt; if someone is logged in, otherwise it returns null. I'll have to look in to this. Thanks for bringing this to my attention
The [wikipedia](http://en.wikipedia.org/wiki/Nested_set_model#Example) article has a good example. Imagine a tree, then traversing a tree either top to bottom or left to right. Your basically making a "circle" around the tree. 
Yeah, so Git or Mercurial is what you want. 
There's a lot of different ways to handle the login flow. If you want to adapt it to a traditional login flow, where you are redirected to a login page, you might make a page like: &lt;script&gt; $('#login').click(function () {navigator.id.get(gotAssertion);}); function gotAssertion(assertion) { $('#assertion').val(assertion); $('#login-form').submit(); } &lt;/script&gt; &lt;body&gt; &lt;button id="login"&gt;Login with BrowserID&lt;/button&gt; &lt;form id="login-form" style="display: none" action="/login" method="POST"&gt; &lt;input id="assertion" name="assertion" type="text"&gt; &lt;/form&gt; On the server side you'd check that assertion submitted in the form against `https://browserid.org/verify`. That's not necessarily the awesomest way to do logins, but it might be an easy or comfortable starting place.
It would be nice to have an upfront description so new-comers better understand that.
Please do this. Last time I did a similar test, the php libevent based solution was outperforming node.js (that was months ago though)
This has helped me in the past: http://www.sitepoint.com/hierarchical-data-database/
Well, personally I'd have the "all reviews" on the index page, solely so that new people to your website would actually know what it's about. An intro text would also help out. So that you'd have some sort of Header Navigation Intro text (Write a review, which opens a box similair to the one you get when you click on login) Reviews Reviews Reviews Reviews Reviews Reviews Reviews Reviews Reviews Reviews Reviews Reviews
Well, I just inserted my two cents. :) I like the design though, don't take it the wrong way.
Oh no I appreciate your feedback and definitely see what you are saying. I kind of flip flop between both view points so hearing someone actually fall on one side definitely helps with the decision process.
PM Sent
If you can find a way of getting a list of bugs/things which need improving or adding, and the source code to me, then I'd happily take a look to see if its within my capabilities. Maybe stick it up on a Git repository? Also if you could give a timescale as to when you'd need all the work completed by that would help along with any specification documents you gave to the original developer so I can understand your whole project in more detail than you've described above. If I take a look and think its something I could tackle within my skillset, then I'd happily take this job on. Looking to get as much private experience on projects as possible outside my 9-6 job as a PHP web developer.
git is what you're looking for anymore. SVN works too and I still use it most of the time since it's familiar and my work uses it, but if you're starting at ground zero, git is definitely what you want to learn. Also, be warned, you will at some point screw up your custom versioning setup you have going on and lose days of work. This is not something that may happen, this is something that will happen if you don't use proper version control.
referred and referrer aren't referring (ha) to column names, but to table names. By using "AS referrer" in the first line, we've given that table an alias for use within the query. Specifically, we're pulling out one row for each of the users: the referrer and the referred (finding the referrer using referred.refer). We're then setting the referred's refer to ''. Then updating the referrer's balance. Try running the query and see if it works as you were asking.
Nope, referrer and referred are created automatically in memory (based on users) when the query is run. You don't need to change your schema at all. The query's designed for your schema as is. Here's a tutorial on JOIN's: http://www.tizag.com/mysqlTutorial/mysqljoins.php And the (totally overwhelming) full documentation: http://dev.mysql.com/doc/refman/5.6/en/join.html
Customizable syntax highlighting is currently in the works which will hopefully alleviate some of the eye strain you experience. The input area text is governed by your browser. I'm not using any special plugins there it's just the placeholder attribute, which does seem to function as you are wanting in Firefox. Multi line comments can be achieved using the @ syntax outlined in the formatting help. Basically is you want to talk about several lines do @1-5 and that will get converted into a link that will flash those lines red. The same rules apply for linking to a single line just type @1 to reference another line. Keep in mind I do have some changes planned for the @ notation which will hopefully make it even more useful in the future. I haven't done much profiling yet the site isn't optimized at all. There really isn't a point as the traffic is still well within reason and I am still expanding the feature set. I want to avoid any kind of premature optimization while the code base is still in a state of flux. Thanks for the feedback.
Haha, the MySQL's confusing :P But seriously, JOINs are awesome (and often necessary). They're a very valuable skill to learn. Best of luck! Feel free to shoot me any other questions.
thanks for this!
Ah, you were searching on the referrerName, not referredName. Where/how is $referName (which should actually be $referrerName, right?) defined in the original version?
It appears that you're frequently using variables before they're set (e.g. $referrer). You add the line "error_reporting(-1);" at the top to see if you get notices. I assume $user is set in common.inc.php. Is $user-&gt;nick (or however you get their name) the person that just did the transaction?
Probably should x-post this to /r/forhire if you haven't already. That being said I would love to take a look and see what I can do!
[WOOOOOOOOOOOOOW](http://i.imgur.com/YFGqp.png) And yes, the $user would be the person that was referred, and completed the transaction.
Okay, then send $user-&gt;nick (or however you get their name) into the query I gave you. You can take out that error_reporting() stuff for now, but you should fix those later.
Have someFunction return either True or False
Do you know any other good screencast tutorial vendors?
Can I ask you if your store locator can discriminate types of stores? (i.e. grocery stores?) 
The question is: do you bring your own toilet paper when you go out? It really doesnt matter because the basics are provided everywhere, but i suppose those few times you go into a public stall in a rush to void a duke and low and behold, an empty roll.. youll feel like a genius for having a backup plan.
Postgres makes this sort of thing unnecessary. It can recurse. God I miss being able to use a real database. Edit: Using nested set model should be decided on carefully, it makes writes slower in order to make reads easier when it's easier to scale reads. Your set needs to be large enough to need to take advantage of the strategy but static enough not to suffer from it.
Something that can (and might happen) even if you DO use proper version control. I highly recommend git. Git is very lightweight and is very lovely to use. [Here is a recommended model for larger projects, especially if you're working with others.](http:///nvie.com/posts/a-successful-git-branching-model/)
Its actually a point-of-sale locator for a particular product. The company has a backend where they enter locations that stock their product, and then on the frontend we've got a form where users enter their zip/postcode and a radius, and then it spits out stores within that range.
The fact that the string "0" == false is the one that bakes my noodle. Pretty clear signal that: maybe types are pretty important and perhaps we shouldn't carelessly shift them around.
I'm kinda wondering how I clicked Log In, made an account, and your site managed to get my profile picture... gravatar, or something more magical?
Are there plans to open source this (at least the commenting aspect, none of the voting and what not)? I could see it being useful for code reviews.
I didn't realize just how many postal codes there were until recently. I was screwing with Weatherbug's API. Part of it converts postal code to city name. I realized as I incremented post codes by 1, that the city stated the same. Every city has multiple codes. Some cities have a ton. 7,700 codes isn't that many when you consider that many cities have 3+. I dare say most cities have 2+.
Git will sync to and from a folder, yes
An excellent book that covers this topic comprehensively is Joe Celko's "Trees and Hierarchies in SQL for Smarties" (think that's the right title). I think Nested Sets have value but may be a premature or even inappropriate optimisation in many use cases. Also, google for Vadim Tropashko's work on Nested Intervals - three or four papers that eventually get pretty complex in terms of math(s). The first one when you find it has a fatal flaw (which he talls about in the later articles) so don't get too excited about it. I'll add some more detail later if anyone's interested - an efficient representation of hierarchical data in an RDBMS was a grail I spent way too long hunting earlier in my career. 
Take a look at Neo4j.
Actually, it sounds like they're asking for this: if(someFunction() == "value") {
If the function returns a boolean, both these examples would work perfectly. If not, pretty much any return value would probably make the if test true, as PHP interprets if($variable) as if($variable != null &amp;&amp; $variable != false) if I remember correctly. Disclaimer: It's been a few years since I coded PHP.
yep git will do the job. there are a lot of clients available wich help you get startet. And don't try to re-invent the wheel.
More in depth guide [here.](http://www.phpro.org/tutorials/Introduction-to-SPL.html) People learning PHP that don't have any OOP teachings may wonder what's the point of IteratorAggregate? An Iterators goal is to encapsulate the traversal of another object's data aka an aggregate. If you're learning, and can write simple collections using an iterator then the next step would be experimenting with the [composite pattern](http://en.wikipedia.org/wiki/Composite_pattern). Writing an external composite iterator which iterate over other iterators would be interesting, or you can just use [RecursiveIteratorIterator](http://php.net/manual/en/class.recursiveiteratoriterator.php).
&gt;Code MUST use 4 spaces for indenting, not tabs. Fuck that. 
React can use threads emulation like this: https://github.com/amal/AzaThread It will be usefull for non-blocking workers
Default e=settings are not enough for xdebug to work remotely...
That's interesting, thanks. Seems a little funky though. I'm wondering what it would spit out if you added attributes to the child nodes. Not that I'm at all above using a shortcut like this if I trust myself to 100% keep the XML formatted in a way this will understand.
Well you've got a point there haha! I'd never deny that using cURL is a good practice, I'd just never tell somebody using file_get_contents or something like that is a bad practice when you don't need that level of control. Maybe a little off topic, but I'm always curious about Indian developers. I have heard nightmare stories about them, but I can only assume it's one of those things where people will just be satisfied if it turns out good and only go complain online if it's bad. I used some once and it was OK but didn't save a ton because I still had to do a lot of hand holding being the one actually over here in the states interacting with the client and whatnot. I'm in New York and actually interviewing right now and they are desperate for PHP developers, offering huge salaries. Have something like 8 interviews this week. I'm surprised all the time that people aren't sending more work to India but like I said it may be that there aren't many people over here that are good at actually managing a team here as well as communicating overseas.
I would avoid assigning variables in a conditional.
neat
I'm with you there. You'll have my tabs when you pull them from my cold dead hands. Spaces are an unmitigated formatting disaster, they always end up sloppy and off-kilter (suddenly a block is indented 7 spaces instead of 8, etc.) and they take away people's ability to adjust the indentation to how it suits them (some people like it to look tight in their editor, other people like it looking loose, and with tabs you can just adjust your editor preference without messing up the file at all). When using a text editor to work live on the server, spaces waste a bunch of time too. If I'm working live on the server, I'm probably in a hurry.
STOP BLOODY WORRYING ABOUT ALIGNMENT! You bunch of OCD morons.
Do what you like. If you don't like to use the standard, and a framework, project or client demands it, then you have a choice of getting with it, or walking.
when would this be useful? Looks like hell to work with a class where methods come and go =S
AFAIK, file_get_contents/fopen need some context to be set which generally coders do not set. Moreover these methods tend to follow redirects and you can end up going to untrusted sites using these. cURL wants you to take care of all. Hence the obvious security issue. Now regarding horror stories of Indian devs and my comment. I have had seen my share of all good and bad coders in US, Russia, UK, Australia and India. For an Indian dev 5$ per hour is awesome deal but not for a US or Russian guy. So it all comes to cost. I have seen poorly designed specs with just few hundred bucks resulting in horror stories. So, you go to freeance websites and see projects with hardly any description. I want a clone of twitter. That's it. Budget 500$. You want an A5 for the price of an old bicycle. Good luck. Low budget means you attract cheap coders, talented ones simply do not look at these projects. But somehow decently priced projects end up with sweat shops who in turn employ cheap coders which is a genuine case of outsourcing gone wrong. This can happen to any one in India or US. You have Chinese goods and Indian coders :-) I would have definitely marketed myself for the position you are talking about in NY but I don't have work permit for US, though have visited US twice, and currently work for #3 search engine. Yeah the organisation is not doing good as a business but we still have some awesome engineering talent. I also do some freelance consulting in spare time. You know what I mean. ;-)
well, you've got lines 12 through 64 all pulled apart, so that's a good start. I assume you want only to show the author box if they have posts. So after the first colon in line 6 put a ?&gt; because this file's doing it like that. Then cut the while posts ... endwhile part out (including the end ?&gt; and move it down to around line 65, and paste it back in. Make sure it's bracketed by &lt;?php ?&gt; and you should be golden. You should wind up with something like http://pastebin.ca/2152221 . I'd offer more help but I have to get the kids to school.
Not to get into the space/tab debate, but spaces should not waste time if you are working on a server. Any good editor will let you navigate regardless of spaces. vi allows you to easily jump around, regardless of tabs or spaces, without worrying about either one. If you are traversing over individual spaces or tabs, you are doing it wrong.
&gt; Not to get into the space/tab debate, but spaces should not waste time if you are working on a server. Any good editor will let you navigate regardless of spaces. vi allows you to easily jump around, regardless of tabs or spaces, without worrying about either one. Using vi wastes more of my time than skipping over spaces. It is interesting how all these religious debates are intertwined.
This is great stuff. They have a CS sniff and the fixer too. Remember this is a standard for frameworks that have joined the group. This is not 'the PHP standard'. Nobody says you should use it. But member frameworks will be adopting it. How did they decide on decisions like tabs? They took a poll of all their members' frameworks and went with what the majority were ALREADY doing. And in almost all decisions it was a landslide.
Then don't be PSR-2 compliant. It's not a requirement. However, it is an easy way to establish a set of standards. Indeed, nothing is stopping you from creating a "PSR-2 (Tabs)" standard that invokes a tabs over spaces and defines how those tabs are supposed to be used (do you only use tabs for indenting, or do you mix tabs and spaces).
That's an issue with your editor. Various text editors already solve that. vi, for example, and numerous others. Indeed, I see no reason every to move anywhere using the arrows keys, especially back 16 spaces. 
I cannot see how vi wastes time if you are editing on the server. Maybe it's just that you don't know vi or another quality text editor. In this case, it's an issue of ignorance. Really, if you are working on a server, and you don't know how to use a good text editor, you are the problem.
I like my tabs. And I like my braces on the next line in control structures. I don't mind what other people like and I don't need no standards about that. Otherwise there is a opinionated great language called Python.
Uhh dunno what PHPMailer is but if it requires PEAR I wouldn't touch it with a barge pole. Give SwiftMailer a go or the Zend Mail as part of Zend Framework also works well.
Just like SwiftMailer it doesn't require PEAR, it's like SwiftMailer, It's a PHP library and maybe part of my problem is not knowing where to install those, If you told me to install SwiftMailer I'd put it in the PEAR folder cause I'd assume that's where libraries go.
I see. Perhaps I can add some place to let you adjust the font size.
They had a sample size of 22, and they only used projects from a specific group? "Well, everyone here likes spaces, so everyone in the world must use spaces!"
It does make it easier to see the blocks of code when the opening brace is on the next line, but doing it makes me feel dirty inside every time.
tempting...
Thanks! that solves part of it. It brings the author box up to the top of the page, the number of posts counter works, but it doesn't bring in the rest of the author bio fields. those seem to be dependent on &lt;?php if ( have_posts() ) : while ( have_posts() ) : the_post(); ?&gt; 
Do we honestly not have bigger problems with standardization than which line the curly brace goes on? The PSR-0 standard is great. In fact, it's a god send. The first few bullet points for PSR-1 are pretty good too. Specifically "Files SHOULD either declare symbols or cause side-effects but SHOULD NOT do both." I think PSR-0 and some of PSR-1 will make things easier for the developers, and the creators of IDEs. However I think the last few bullet points on PSR-1, and PSR-2 should be completely thrown away, as I don't think it's a standards committee's job to enforce coding style. Those kinds of things should be handled at the organization level. Plus, it is *not* hard to use someone else's code that's written in a different style. 
This is fine for having fun, but please don't ever use this for any production code.
&gt;F. Copyright and Content Ownership &gt; &gt;We claim no intellectual property rights over the material you provide to the Service. Your profile and materials uploaded remain yours. However, by setting your pages to be viewed publicly, you agree to allow others to view your Content. By setting your repositories to be viewed publicly, you agree to allow others to view and fork your repositories. [Github Terms of Service](http://help.github.com/terms-of-service/)
If you don't stand up for yourself, you'll be walked on for the rest of your life. I let my first boss intimidate me. It was at a fast food restaurant, and I was 16. Since then I've learned to say "No", and to demand I be treated as an adult that is on par with the managers. You'll mess up - that's a given. If you don't mess up in your work then you need to advance your skills, but a manager that treats you poorly because you're human is little more than a bully and should be pushed back against. @thesplashfactor: Since you're very new to PHP, you may not realize that there's a huge demand for developers right now. There's no need to work for assholes. Granted, this is all assuming that by saying your boss is angry, he's screamed or made threats against your employment.
There is no real reason to follow any of this. It's kind of a joke.
PSR-1 looks pretty solid, and I'll probably follow it in all of my future projects. PSR-2 on the other hand... I can't see it being taken all that seriously. 4 spaces for indentation? Opening brace on its own line *in some cases* and opening brace on same line *in some cases*? Specifically, the opening brace of a function should be on its own line *unless* it's an anonymous function, in which case it's on the same line? WTF?
There is of course a difference in the source of the anger. If he's a dick with unrealistic expectations and a "beat on IT" complex, then you HAVE to stand up for yourself, or spend the rest of your time at the job cleaning up his 13 year-old son's HTML. If it's because you fucked up, and the reaction isn't way over the top, there's no case to be made for not letting someone be angry for a bit if they have a right to be. IMHO, of course. Edit: comma faults are not opinion.
Perhaps he's angry because he hired a PHP "developer" and instead got this guy who can't even make a simple edit (and even has to resort to asking the internet for help). I'd be pissed too, just like I am every other time that I don't get what I paid for. Not saying that's what happened here, or that it would justify verbal abuse, but just throwing that out there.
NOPE
Will definitely pass this on, thanks!
I disagree. There are some real objective pros and cons to different styles, and I think it's worth focusing on those pros and cons. Using spaces for indentation has some real cons. monk_e_boy mentioned one. Another is that it's difficult to visually differentiate between 7 spaces and 8 spaces, which means people will sometimes miscount and end up with indentation levels that are off by a space or two (a very common problem that leads to very messy source files over time). Also, tabs allow the user to adjust the indentation width to suit his/her preference without affecting the file; with spaces, you're stuck with one hard-set width. There are real benefits to spaces, too. Some people seem to have trouble intuitively grasping when to use tabs (for indentation) vs. spaces (for alignment), and using spaces for both would avoid the issue of mixing them inappropriately. With spaces, it's easier to enforce line length limits, since lines indented with tabs may end at different columns depending on the editor configuration. Another benefit is that some editing scenarios, like in HTML textarea elements, don't provide an easy way to insert tabs, so spaces are a bit more portable in that regard. So, it's a matter of weighing the pros and cons. It should be possible to objectively measure various aspects of these decisions, in terms of developer productivity, frequency of deviations from the style guidelines over time, and so on. I personally haven't seen any such scientific studies, but I'm sure some have been attempted. My suspicion, based on what I've seen in multi-developer projects, is that using tabs for indentation will generally tend to improve the indentation consistency, which I'd argue is the most important aspect of this whole discussion.
This. I wish I could upvote this a million times.
Register as a voting member and get involved, or comment on the Google group to make your opinions heard.
Then register for a vote?
It's just bad formatting. $a = 1; $b = -1; if ($a == -$b) { echo 'Match'; } Result: "Match" Additional clarification because I'm getting downvoted: $v = 'test'; var_dump($v == 1); // bool(false) var_dump($v === 1); // bool(false) var_dump($v == -1); // bool(false) var_dump($v == -'something'); // bool(true) var_dump(-'something'); // int(0) var_dump((int) 'something'); // int(0) var_dump($v == -0); // bool(true) var_dump(-0); // int(0) var_dump((int) $v); // int(0) The reason $v ==- 'something' evaluates as TRUE is that since there's a [negation symbol](http://www.php.net/manual/en/language.operators.arithmetic.php) (-), PHP [type juggles](http://php.net/manual/en/language.operators.comparison.php) as numbers and does a mathematical comparison. As both $v and 'something' are 0 when treated as numbers, 0 == 0, so the expression evaluates as TRUE.
In England a postcode covers a very small area - the street I grew up in had at least four postal codes and there were a total of around 60 houses on the street
FUCK THAT! and a lot of the other stuff too. one of the gods invented tabs for that fucking reason. also most of the code looks like written by someone who started coding a couple years ago. all the formatting looks like from different guidelines. F U C K that.
No, the group made a standard for the members of the group to use. The members are all the biggest php frameworks. Nobody is saying you have to adopt it for your own coding. It's a group for frameworks who want to work with each other better.
no. boss is volatile. he asked me to do something that was out of my scope and I foolishly said it wouldn't be a problem. then the parameters of the project changed, and he twists it so that i look like i overpromised. 
Why? Tabs are represented differently across different editors. If you stick with spaces, it's much more uniform. That's the reasoning behind this.
The other day I accidentally pasted something that resulted in: $Result = 'some string' - 'some other string'; and I was not getting an error because of that and it was throwing me off for sometime until I realized what I did. Sometimes it's kind of annoying how flexible php can be, generally not though as long as you don't paste something stupid.
And you're the person that I want to murder when I have to dig into your code.
Using method chaining is fine, but please, please don't try to emulate JavaScript in PHP. Prototype-based concepts do not map well to class-based languages. Use appropriate design patterns in their respective domain. We already have well-established design patterns which applies to class-based languages: http://en.wikipedia.org/wiki/Design_pattern_%28computer_science%29 Have a look at the [observer pattern](http://en.wikipedia.org/wiki/Observer_pattern) or the [mediator pattern](http://en.wikipedia.org/wiki/Mediator_pattern) for instance.
Indentation is important. Alignment is not. 
In his defense, and at the risk of sounding like a jerk, if you can't handle something like this, you're probably not qualified. Edit: Unless you weren't hired as a PHP developer, in which case, he shouldn't expect you to be doing this.
is that what it actually said? I could see how that would mean something if 'something' was a number. Like that, I think it always just returns true.
The point is not just different editors. Different people. I don't want to use the indenting you use. With tabs I can see the file the way I want, and the next person can do the same. Also, and this has been discussed plenty of times, the tabs are meant to be indent only. No tabs after a printable char is in the line. So I would use both tabs and spaces.
Great point, especially about tabs *only* for indentation. I would be okay with that. But we both know that most people don't or won't follow that. It really has to go one way or the other, and that means one side is going to feel left out, I think.
Is this on a shared host? Some hosts disallow changing of ini settings, especially memory limit settings.
Indentation and alignment are very similar in their nature. Sometimes they are hard to distinguish. E.g. consider this example: if (abc &amp;&amp; def // &lt;- this line ) { // ... } In the marked line the first four spaces are indentation (and could be replaced by a tab) and the second four spaces are alignment (which should never be replaced by tabs). So in that case you'd actually have a tab followed by four spaces... Which would by most people be considered to be rather ugly. That's why I personally prefer to simply always use spaces.
I don't believe you. Sure, there are objective arguments for both, but how they are weighted is different from person to person. For example I think that the advantages of space-based indentation *by far* outweighs its disadvantages. You disagree. Who's right now? Probably nobody :)
Yeah, but that is just PHP. There are other ways of enforcing memory limits, which is likely what they've done to mitigate a single account hogging all the resources. If you've confirmed the change with phpinfo, I would say this is likely the case. The size at which it fails seems to add to that likelihood, as well. It's right near 256MB which would be a reasonable limit for a shared hosting account.
I agree except I think your own example show that indentation and alignment are two completely separate things. Your if block is spread over 2 lines, but its indentation is 1 level, the 2nd line does not have an indentation of 2 levels but rather 1 level plus alignment of 4 spaces. There's nothing ugly about this at all, claiming that "most people" would consider it ugly is not a valid argument at all, it's an "I don't like it argument and to lend credibility to that I'm just going to pretend that most people don't." If you personally prefer to use spaces then great, continue doing that, just don't claim that using tabs for indentation and spaces for alignment doesn't work.
NO
If the "PSR-2 (Tabs)" standard gets more popular than the original PSR-2, then we won.
the fact that it works doesn't mean it's not a bug, it's particularily suspicious since it's being applied to a string. nonetheless it could be intentional, it's PHP after all.
I could live with "no tabs for alignment" rule
You mean four word tag. I may have jumped the gun a bit early, but thespaslfactor's later comments turned out that my initial guess was correct, the boss seems to be a jerk. Whether you're paid $7.15/hour or $100k/year, you should always demand respect from your employers, else you'll end up providing positive feedback to your boss that it is ok to treat you like a small child. When I was a junior at my first real development position, I messed up quite a bit, and may have taken some abuse at first. One day I simply got tired of being reamed and answered back in the same tone. Keep personal insults out of it, but let them know that you are not their child. Worst thing that can happen is you're out of a job and looking for someplace better, which in this industry usually translates to a raise.
From what he's mentioned this isn't his job. Also, we all had to start somewhere, and this horrible mishmash of html/php doesn't help.
I wasn't clear in my context; I was referring to the OP's expression. I've edited my post, thanks.
No it's the sole reason why I don't give a shit about following this rule set. I don't even get why you need a community wide rule on those two issues. It's not exactly something which hinders readability at all.
I'm not the author, but saw this on Hacker News and thought it ought to be shared here too. Edit: Here's the HN discussion too: http://news.ycombinator.com/item?id=4008552
you don't know that and you can't assume just because in this particular language it is allowed, that's what I mean. (by "bug" I assume you understand "bug in the code" not in PHP itself).
Okay, gotcha. We were talking about different "bugs" -- I meant that the comparison outcome ("string" == 0 is true) is intended behavior for PHP.
Like a scene in star trek: Scotty: I will do the engines in four hours Captain: Do it in two Scotty: OK!
Why not? I am thinking on having some event-like system having methods like $database-&gt;oninsert(function (){...}); Do you think its a bad idea?
And why would anyone in their right mind write PHP directly from the server?
Can someone tell me the pros/cons of using tabs/spaces? Have been taught to be using spaces "my entire life", and never had any problems. So why all this hate? :S thanks
Why is this magic methods setup better than `$database-&gt;on('insert', function () {})`?
That didn't answer my question, if you're just doing `on('event', ...)` you don't have to worry about colliding methods/variables because the event only exists in an array instead of actually being bound methods.
it hinders diffs and such things very much.
This should go to sidebar, sending a request to mods.
I'm still left with some questions: * What exactly I should do with an exception after I catch one? In his examples he just throws another exception. * When should I write a thow, catch block? When I'm expecting a possible exception? Why don't I just write all my code in one big throw, catch block? * What if I want to reuse the way I handled an exception? Can you somehow reuse the functionality that you write in a catch block? 
Explain specifically why it doesn't solve the problem. Are you using non-fixed-width fonts or something?
I think the [observer pattern](http://en.wikipedia.org/wiki/Observer_pattern) would be a better solution for what you want to do. 
It's either a typo or a lazy/bad way to comment out that conditional.
Yeah that's what stack overflow and expert sexchange are for, not reddit.
Yes, sorry, I don't have any statistically significant data to support that "most people" claim. Should have written "most people I know" :)
Read the whole thing: " have been programming for 25+ years and in PHP since around 2001." Since around 2001 is pretty key to that statement.
I personally built my own MVC framework. It gave me a better understanding of the language.
Zend server CE with zend studio works great for me
As far as I know, PHPMailer is just a bunch of PHP classes you need to include in the file you'll be using for sending, no need to place them at the PEAR folder.
Oh if it's not a PEAR library you basically just make a folder/directory in your project and call it libraries or something. Then drop the files into there perhaps inside another folder called PHPMailer so that way you can make your own classes to go in there and pull in other libraries. To load the library you use include_once or require_once commands in PHP or set up an autoloader to do that for you.
&gt; What exactly I should do with an exception after I catch one? In his examples he just throws another exception. Most often you would log to a file, maybe send an email, and present the user with a nice error page. Most exceptions cannot be handled in a meaningful way. &gt; What if I want to reuse the way I handled an exception? Can you somehow reuse the functionality that you write in a catch block? Most often you can get away with a single catch block around the start of your code and that can catch all the exceptions thrown. For example, I have one catch block which does everything I said in the previous paragraph for all exceptions. The general rule with exceptions is throw frequently but catch infrequently. That's where their value comes in; exceptions let you centralize your error handling code and provide different paths only where needed. 
It's the One True Brace Style (1TBS). The same style used by Linux kernel. I'd say a very large number of PHP developers (myself included) already use this style.
It's most commonly used for static methods (i.e. methods that can be called without an instance of the class) e.g. class MyClass { public static function doSomething(){ return 'something'; } } echo MyClass::doSomething(); //prints something it may also be used for properties and constants of a class but properties are rarely public so you won't see it that much. It's suggested you use class constants instead of global constants as pretty much anything in global scope is bad. e.g. class MyClass { const SOME_CONSTANT = 'the constant'; public $someProperty = 'the property'; } echo myClass::$someProperty; //prints the property echo myClass::SOME_CONSTANT; //prints the constant it can also be used within a class to refer to other classes in the hierarchy. class MyClass { public function someMethod(){ return 'foo'; } public function anotherMethod(){ return static::someMethod(); } public function yetAnotherMethod(){ return self::someMethod(); } } class MySubClass extends MyClass { public function someMethod { return parent::someMethod().' via sub class'; } } $parentClass = new MyClass(); echo $parentClass-&gt;someMethod(); //foo echo $parentClass-&gt;anotherMethod() //foo echo $parentClass-&gt;yetAnotherMethod(); //foo $childClass = new MySubClass(); $childClass-&gt;someMethod() //foo via sub claas $childClass-&gt;anotherMethod() //foo via sub class $childClass-&gt;yetAnotherMethod() //foo So self calls a method on the current class, parent calls the method on the parent class and static calls the method on the class that was instantiated regardless of if it's used in the super of sub class (late static binding).
That's a more fair statement, in comparison, most people I know really don't give a shit so long as it still looks nice. :P
Related to your question, but why not go the git/hg route? I see you're using PhpStorm, which has amazing integration options for SVN, Git, Hg and even CVS (I think), and committing/pushing change sets is as easy as pressing a few buttons.