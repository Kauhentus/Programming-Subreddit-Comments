I am not the author, but can you give an example on why he doesn't know php at all? 
Before PHP plz deprecate Javascript. 
Then don't write it. Theres no sense in writing it if your not going to use it in production app.
Seconded. I know there is another RFC from a few months ago about this specific matter, but it is a good occasion to make (all) PHP functions more consistent.
I prefer to procrastinate when faced with trouble: set_exception_handler(function(Throwable $e){ header('Location: https://www.reddit.com'); });
This just seems to be an implementation bug. Why deprecate instead of fix?
if you don't break backwards compatibility then everyone will upgrade. The benefits to the PHP community in 7 are huge. The performance alone is massive. The last thing we want is half the community sitting tight on 5.6
they could be the same.
There's `random_int` for that now
So, I just looked at the `fputcsv` implementation and ... I have no idea how that is *supposed* to work. What it does is escape `"` by doubling it, so it already does what you want by default. **However** if `"` is preceded by the "escape character" (that is `\`) then it will not be doubled. So `"` becomes `""`, but `\"` becomes `\"`. I honestly have no idea why the hell it would work like that or what this is supposed to be useful for. Edit: Found a bug report for this problem: https://bugs.php.net/bug.php?id=43225 So it looks like at some point fputcsv was modified to be "consistent" with fgetcsv -- however the change was done in a buggy way, so that now fputcsv is usable neither with double `"` escaping nor with `\` escaping. Great!
Let's talk about that beautiful color scheme
Seriously. Still waiting to hear what color scheme that is.
Looks like Atom's Dark Theme default one
Hold my beer!
Another which I found by sheer luck: [`convert_cyr_string`](http://php.net/manual/en/function.convert-cyr-string.php) -&gt; migrate to [`mb_convert_encoding`](http://php.net/manual/en/function.mb-convert-encoding.php) (or `iconv`?)
This is possibly the biggest whoosh I've seen on PHP
Already on it. http://colabti.org/irclogger/irclogger_log/php.security?date=2016-02-18#l48
Not sure if serious. I looked at the readme, and the 404 image, then stopped...
Cool. Props for your ongoing work with this stuff. I think something conceptually along the lines of Anthony's `password_compat` would be ideal here, but given how fiddly the APIs you're trying to replace are that's probably just not possible.
That is beautiful. Maybe one of the base 16 color schemes?
Aha the Well Fuck This Shit method. I dig it 
Possibly SublimeText theme?
Thanks. :) It's not a polyfill, so it won't be replacing `mcrypt_decrypt()`, but it will hopefully be simple enough to figure out how to use it to migrate data from mcrypt's circle of Hell to something sane.
No, but that's the point. If you need a repeatable sequence for unsafe work, use `mt_rand` + `mt_srand`. 
Good point. For seedable numbers, use `mt_rand`
Do we need it? No. There are plenty of solid lightweight choices like [Spot](http://phpdatamapper.com/) or [Eloquent](https://laravel.com/docs/5.1/eloquent) If you want to build it as a learning project, then by all means, go for it!
Good timing -- you might want to look at Atlas. &lt;https://github.com/atlasphp/Atlas.Orm&gt;. (I am the lead on the project.)
&gt; That's the point How so? If I can't seed it with random numbers generated by hashing a webcam of a lava lamp it's not random!
i did look at it. Seems like it still has a long way to go.
Its only as secure as you make it.
Just yesterday you were saying you wanted to build your own framework. And you specifically said you wanted an ActiveRecord ORM and rejected Datamappers because you are not familiar with it. You are the most indecisive programmer I've ever encountered. And if you are really doing these things you must be the most productive programmer on the planet.
That's not even valid PHP. 
It is the most popular platform. Actually compromised websites due to PHP security issues (as opposed to, poor PHP code) is pretty well unheard of.
It depends on your needs; if you want to use your own templates and don't mind coding a bit, the best among the best is Amazon SES. Nothing beats SES on price and performance right now. As long as your content is not spammy, e-mails from Amazon SES consistently hit the user inbox. If you want a ready-made solution though, you might be better off with MailChimp or something (haven't tried this though).
I tried MailChip the free account and sent 1800 email when i tried to send the another time they blocked my account! 
POST is for writing (CRUD). I'm making a read request with parameters to the RESTful API.
 define('Role', 'role_'); define('Admin', 'admin'); Fixed :)
Why deprecate `rand()` instead of aliasing it to `mt_rand()` or `random_int()`? This is a very explicit/standard name, it would be too bad to loose it.
Okay, apparently it can be done using Threaded class. Easiest example I could come up with is: &lt;?php class Easiest extends Thread { function run(){ $globalStuff[] = "It's working!"; } } $globalStuff = new Threaded(); // create a variable which can be directly passed to a thread $easiest = new Easiest(); $easiest-&gt;start(PTHREADS_INHERIT_ALL | PTHREADS_ALLOW_GLOBALS); // make the thread see variables from the global scope $easiest-&gt;join(); // wait for the thread to finish print_r($globalStuff); This, however, is NOT how you're supposed to make things done, it is merely a most simple demonstration of how Threaded class allows to both read and write data from the isolated scope. Proper techniques include passing variable in __construct instead of making it global and using special classes provided by pthreads extension. 
Install a php &gt;= 5.4 at minimum, use PDO, secure input, ... look at https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet
I did last year, and look where we are.
Somewhere, someone is studying lava lamps for cryptographic vulnerabilities.
Doing it for nothing. No-one does anything for nothing. They are doing it to promote their consultancy, promote their business, or to get exposure in the PHP community. I don't believe that anyone there is doing it just for nothing. Yes I am disappointed. These comments may not be popular, but I do it to raise the problems that exist. The new relic room is the only room that is suitable for an event like this. The others are not. I will inform the organisers but I won't be going there again.
Nah, Darcula has more earthy orange tones. 
 PHP Fatal error: Uncaught exception 'Exception' with message '$arm holding $beer not found'
Agreed! Especially as it seems strange to force a user to choose what algorithm they are going to use. The vast majority of the time a user - especially in PHP - just wants a pseudo-random number. Occasionally they'll want to seed it. Approximately nobody specifically wants a mersenne twister PRNG, so why force them to specify it? Sure it's good to *allow* them to specify `mt_rand()`, but not *force* them to. Any more than we should deprecate the `sort()` function and force them to specify `qsort()` or `timsort()` etc.
Yes but what is the harm in posting to Reddit? This is a community where we should be able to share our opinions. So for everyone to downvote shows an agenda to silence instead of fix.
&gt; I don't believe that anyone there is doing it just for nothing. True, but some people are really just doing it for the satisfaction of sharing their knowledge and teaching. They're still getting "something" out of it, but the something isn't always as mercenary as you think. (Disclaimer: I'm a speaker, I work for New Relic, and I'm being paid to attend PHP UK in this instance, but I've given a good number of talks completely for free on esoteric topics that are of no benefit to me because I enjoy doing so.)
That is true - I actually hadn't though of using " as the escape character. But I still really don't like that it defaults to being incompatible with Excel, LibreOffice, etc. And you can't change the default without breaking backwards compatibility.
Eh, he seems to be more intent on writing about ... uh ... something. Apparently Swedish chicks dig prefaces.
If they are then I am all for that, my hat goes off to them. But most aren't, that's the truth. I have been to much better (smaller) conferences.
Please don't try and give me the guilt trip. These individuals are doing it for free, because it is free exposure for them. Please do not try and sugar coat it. These speakers are not going off to war, its business. Pure and simple. Also how is it not the right place? This is the PHP community subreddit, where all the people who attend are reading this. It couldn't be in a better place.
No thanks. ES6 is amazing.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
The triad is the object that links the models, views, presenters and controllers, it also provides the support for children triads. The other option I was considering was to reference the different parts of the MV(VM)C on each class, but I think that the triad is easier to use.
I don't know. That's why Rails has great documentation and support, Spring / Play have great documentation and support, Django has great documentation and support while the best PHP frameworks struggle to have a documentation as good as CodeIgniter. The PHP community is great but regarding to the vast number of PHP frameworks and documentation/suppor to them, only 3-4 are good. The rest sucks and I think these people should help the big frameworks to get better instead of creating a new one.
This! 
I can not comment on it, I am not there unfortunately...
Why all these ORM treat properties and related objects differently? If you want to decouple the objects from storage I believe that the related objects should be treated like properties. In NOSQL you can store a blog post with all its tags in the same record. In graph databases all the relation between entities, no matter the type, are probably stored in a different location, no matter the relation type. Even in relational databases you may choose to store the parent-to-child relationship in a different table.
&gt; Looking at Laravel, CacePHP, etc. there are a lot of people around which will look for potential bugs, suggest improvements, ... . If your framework and a popular framework have both security bugs, in which one would you find the bugs much faster? The code only you and maybe a couple of your buddies are working on, or a framework with thounsand of testers behind it? But at the same time, there is security by obscurity. Laravel is more likely to be searched for security bugs because it's more popular. Unless the site on which you're running the custom framework is super popular, no one will care to try hacking you.
I've added a note mentioning this alternative. After thinking about it a bit, this seems like a better choice, especially if we combine it with other long overdue, mildly BC-breaking changes to our PRNGs.
&gt;I see it was accepted for 7.1. It wasn't accepted. I closed the vote early and put the RFC back under discussion. &gt; Would it cover comparisons: 3 == 'bla' &gt; If not can you propose it? There's no reason to compare strings to integers if the string isn't numeric. No, it doesn't affect comparisons, which are a separate matter. I'm not fond of =='s rules, though. Some day I might try to make them more uniform.
And backups are for scrubs right? :)
Added: https://wiki.php.net/rfc/deprecations_php_7_1#mbstringfunc_overload
Rand doesn't have an output range limit when min/max are specified. It does have a platform limit in producing unique outputs (these are two separate concepts). [rand()](https://github.com/php/php-src/blob/master/ext/standard/rand.c#L289-L305) is literally just a warapper for [php_rand](https://github.com/php/php-src/blob/master/ext/standard/rand.c#L62-L83), which is an internal function that ends up calling C's rand() function. rand's platform limitations, lack of decent randomness and lack of 64-bit support make it a nearly useless function. On some platforms it literally doesn't do what you're expecting; on windows it uses a LCG, can only produce 32,767 unique values (regardless of range), has biases (such as serial correlation) and thus makes it nearly useless for random numbers, even if you don't need more than a handful of outputs. It can't be replaced with mt_rand because mt_rand itself on PHP has issues, and generally then changes what you'd expect rand() to generate (on Linux C's rand() uses a linear-feedback shift register, and IIRC that means you can't get 0 from it (if you can, then it's not a straight LFSR)...). If you want a seedable RNG that gives you the same set of numbers from the same seed, then you want to do something like AES-CTR (ala what [seedspring does](https://github.com/paragonie/seedspring) ). Replacing rand() with something like seedspring, though, would make rand() carry a requirement with it, and then that might not work in some situations. It's better to deprecate it.
Its not your fault, it is the venue where they provide the talks. Something like a lecture hall would be better suited. Thanks for trolling.
I would guess the reason we made mt_rand() separate in the first place is that some apps might rely on seeded `rand()` always producing the same sequence of values given a particular seed with `srand()`. EDIT: of course, maybe whoever added it just wanted to allow choice. I wasn't there.
I guess it depends on personal preference. I like having the public methods as part of a contract so I can be sure they're imported, since the trait just acts as copy-paste of the implementation in that case. I generally try to avoid traits wherever possible and opt for composition instead, since it also avoids problems like this in the first place. Sorry I can't fill you in on the technical side of why traits don't support constants, though. :(
Backwards-compatibility doesn't apply to bugs.
In PHP 7, references incur a small performance and memory usage hit over regular variables, whereas in PHP 5 they were the same - I'm ignoring the additional factors like copy-on-write, though. In 5 all values (`zval`) were separately allocated on the heap, but in 7 this is only done for references. Or to say it with ASCII art, where each box is a memory allocation, and arrows represent pointers: PHP 5: +------------------+ |(variables table) | | | +------------------------------------------------+ |$some_int -------+-----&gt;|(value) type=IS_LONG lval=12 is_ref=0 refcount=0| | | +------------------------------------------------+ | | | | +------------------------------------------------+ |$some_bool ------+-----&gt;|(value) type=IS_BOOL lval=1 is_ref=0 refcount=0| | | +------------------------------------------------+ | | | | +------------------------------------------------+ |$some_int_ref ---+-----&gt;|(value) type=IS_LONG lval=12 is_ref=1 refcount=2| | | +------------------------------------------------+ | | ^ | | | |$some_int_ref_2 --+--------+ +------------------+ See above how in PHP 5 we had to allocate each variable its own memory, and references to the same value share their allocation. PHP 7: +-----------------------------+ |(variables table) | | | |$some_int: | |(value) type=IS_LONG lval=12 | | | |$some_bool: | |(value) type=IS_TRUE | | | +----------------------------+ |$some_int_ref: | |(reference) refcount=2 | |(value) type=IS_REFERENCE ---+-----&gt;|(value) type=IS_LONG lval=12| | | +----------------------------+ | | ^ |$some_int_ref_2: | | |(value) type=IS_REFERENCE ---+--------+ +-----------------------------+ In PHP 7 on the other hand, we're able to pack the contents of the `$some_int` and `$some_bool` variables into the variables table itself, saving us the expense of a memory allocation and the extra indirection. But we can't do that for `$some_int_ref` and `$some_int_ref_2`, because they're references.
I inherited some code from 2007 or earlier that passed variables as references solely to improve efficiency. As well as pointing out that this was dumb, posts like this underlined that it was (on a tiny level) actually harming performance.
(╯ಠ_ಠ）╯︵ ┻━┻
Use BoltCM instead :) https://bolt.cm/ future self will thank you later.
In the linked articles I discuss other issues with references. However from time to time I see people, probably with a C or C++ background, putting references all over their code in order to improve performance while it doesn't. And true - you don't run that loop in that form. But people do stuff like function foo(&amp;$array) { return in_array($array, "bar") || in_array($array, "baz"); } Which copies the array two times, while without reference no copy would be there. And true, this still most likely isn't your bottleneck. But it's still a bad practice. And in bad circumstances such things can sum up. So don't use references Almost any time other solutions are more performant and more elegant. (the only valid case I've seen in recent times was using anonymous functions capturing things by ref ( function () use (&amp;$ref) { } ) 
I wish. For lesser used and young features, usually not so much, but for much used and important features, it's not that easy. Ask those who intentionally rely on the bug and don't want to bother with fixing it... Really… we should just break BC when necessary and _acknowledge_ all the BC breaks.
Cool! Just checked, everything is working great!
From a re-run with today's master branch: $ ./sapi/cli/php -v PHP 7.1.0-dev (cli) (built: Feb 19 2016 12:47:15) ( NTS ) Copyright (c) 1997-2016 The PHP Group Zend Engine v3.1.0-dev, Copyright (c) 1998-2016 Zend Technologies $ ./sapi/cli/php test.php Ref: 1.8029961585999 Val: 1.6254208087921 But a good point about strlen in the engine. I tried with abs() and an integer 1, there I got $ ./sapi/cli/php abs.php Ref: 2.6623990535736 Val: 2.3065781593323 And he key point is still valid: Don't use references. Don't use them for improving performance. (I know you are among the ones able to create cases where references make things faster and you could probably identify such cases in real life, as you know the engine in and out, but that knowledge is the exception ;-) )
It's exactly that easy, and PHP (as well as most other projects) fixes bugs relatively often that "break BC" in areas of high-usage. The rationale is that BC maintenance is only applicable to the intended consumer API of a project - which doesn't apply to bugs.
I think my definition of *crazy long URI* (2000+ chars) and your idea are vastly different. If your example is close to what reality is, GET is fine. 
Search google for "rest api mysql" For example: https://github.com/moddity/Rester/
its not a framework at all... it's literally a way more sane version of Wordpress :D
because it's fun. And you learn a lot. I've written many, but don't use any in production though...
Most conferences in the 'PHP Conference Circuit' cover the speakers expenses (airfare, some hotel). But end there. There's a reason tho, the attendees are already complaining about the cost of the conferences being too high to begin with. Trying to do something like pay the speakers a $1k stipend, would end up raising the costs even higher. But the PHP community is much better than some related ones at the moment. Where speakers often have to pay their own way, and sometimes even have to buy their own tickets. ... Disclaimer: Conference Chair of multiple large PHP conferences.
Thank you. I had read this at some point and there are some helpful tips there, especially regarding dynamic content (images). The problem is that it doesn't really propose any satisfactory solutions to dynamic code. For instance, it mentions that after installing and configuring a specific plugin: "... certain changes have been performed on the file system. For example the plugin code has been downloaded and certain configuration files have been created. Those changes (that you implement after your initial AWS Elastic Beanstalk deployment) will be lost if the instance is terminated. They will also not be applied to any new instances added later (e.g., Auto Scaling). To avoid this, as a first step you can use secure copy (SCP) to download the web folder from the staging environment (folder /var/app/current/) locally.Then create a new .zip file (remember to also include the .ebextensions folder) and deploy it as a new application version. Please note that this now includes hardcoded values (e.g., the host names of the ElastiCache nodes in the W3 Total Cache configuration) and as such is environment specific. " Am I being too negative to feel like this is a really fragile workflow? What if I have many instances running, from which should i copy? Aren't they going to get out of code-sync when a config is changed on one? What if my dev version has been changed in the meantime, I'll need to merge? This seems so unintuitive to everything that I've learned about autoscaling cloud deployments so far. Somehow people must be getting it to work though, but at the moment I feel like concluding that Wordpress is simply not compatible with Elastic Beanstalk or similar deployment systems.
&gt; if they don't even condition some of the speakers before they speak on stage How exactly would someone "condition" a speaker? &gt; So I sit there, or try to, it all depends on if I get there quick enough, otherwise I have to take a back seat and look over the head of some tall guy, swaying left and right to keep in vision of the awkward speaker. So, you want infinite rooms, which never get full? And apparently you're very unlucky since you *always* end up behind a tall guy. Those damn tall persons! &gt; When the speaker is done he will say 'any questions?' then sometimes when a reasonable question is asked, a response of... 'Ermm. Hmm, sorry don't know', or 'I don't understand the question.' Right, everyone knows public speakers are obligated to know everything on the tip of their tongues. They also *always* undertstand exactly what you mean when you ask a question. Public speakers are awesome! Sorry for all the sarcasm, but I really don't understand what the hell you're complaining about. Believe me every event you attend no matter how "professional" will have issues like this. You've just set tthe bar way high imagining a mythical experience that simply doesn't exist.
I wish I had gold to give
&gt; And WTF, why is there no live stream? Just out of curiosity what do you imagine the cost of providing a live-stream would be? And also, how many hours do you think it would take the organisers to organise? 
FWIW Juan ... the way you phrased that makes it sound like we only booked 2 nights hotel for you. We booked 2 nights hotel, paid your flight, covered your conference ticket and all your breakfasts/lunches/drinks at the event :) Not a biggee, just putting this here for others who may not have realized that :)
openssl_random_pseudo_bytes() is your answer
With this module: https://github.com/zfcampus/zf-apigility-doctrine ... you are able to directly query your database over a REST-API which is exactly what you describe.
Do you have specific examples on how to avoid global App class and at the same time making services (db, log, cache, storage etc.) available from everywhere within framework? Thank you.
Ya it fun to make new things and learn about things
I'll look into it
I don't want to look at options I want to write something to learn about he achitrcture of a data mapper
Cool story bro
Ya I don't really wanna build anything but I do wanna build something to learn about the underlying layers
The key to it is the W3 Total Cache Plugin which is able to: *Store static assets on S3 (stateless web tier) *Serve those assets via CDN / Cache Control *Enable ElastiCache’s Memcached ..fuck Reddits Markdown! Combine that with Amazon RDS and you should be good to go. Amazon takes care of the load balancing etc. I didn't have too much trouble setting it up, although I never really used it outside of testing.
I'm not sure if I've been able to explain the problem to you. The assets that can be served from S3 is not my problem. It's the changes to the codebase that certain operations in Wordpress do (upgrades, config files changes) that I'm worried about causing massive headaches down the road. 
Most tutorials I have seen use a git repo to hold the wordpress/system files. Updates are made to the repo and then rolled out to your instances. Otherwise you are going to have to use some sort of persistent storage and manually check/update the changes.
Thanks for answering my n00b question. I'm so out of my element I don't even really know what to Google so this was very helpful. I think I'm going to install wp on a blog subdomain and go with a regular site like you suggested
Ahhh I see, thanks for the input!
Breadcrumbs are designed as, and get their name from, a tool to find your way back home. If you leave breadcrumbs to FOLLOW back home, you should have links to those upper level pages, not just exploding the uri and outputting each bit as plain text.
&gt; The next previous pagination in php is confirm as javascript and after then using only… What? Also try and format your PHP so it's easier to read. 
Yes, that is the usual way to do things. This is still not addressing what I'm talking about. What if you have 3 instances behind a load balancer. A user logs into the Wordpress admin and makes config changes through the UI. These changes are stored in the files system for many plugins, it seems, not the database. But only for this instance. At the same time, another instance gets auto-updated, witch changes the codebase. Before you know it, you have three instances with three different codebases. One could of course simple make a rule to the users: Never ever make any config changes or upgrades except in the dev environment, but I have a feeling that because of the way WP works, this is going to be a pain to enforce.
haha this is quite funny!
Especially given that very few sites actually use applications with URLs well-constructed enough that you can get a useful index page just by stripping off the last bits.
https://www.reddit.com/r/PHP/comments/46h5c5/the_only_php_exception_handler_you_will_ever_need/d063me0
git repositories are for squares
Think you responded to wrong person :) Also, personal enjoyment is not a replacement for financial compensation.
Just use EC2 instances so you have 'real' server. You can set yourself up with scaling with a regular update to the image to spawn from if needed, or just run a single EC2 instance to serve everything. &gt;On first glance, it seems like Wordpress is only made for the old-school FTP into server to change stuff workflow, FTPing itself is a bit outdated perhaps, but SSHing in to machines isn't really old-school, it's just how a lot of management is done. About 2 years back I was doing the sysadmin stuff for a company with, among other things, a WordPress blog. Scare up an EC2 instance fitting the bill, set a load balancer on it, set a policy to spawn more copies if the instance is getting over-taxed and scale down if things are going idle. &gt;How are serious, critical websites structuring their deployment (dev, stage, prod) workflow? There are some different ways, but most really big companies are doing something comparable to EC2 instances or other virtual servers and load balancing over them. It's a bit more hassle, but much more flexible. (And if you ensure you only rely on non-vendor-specific tools you can also move from one service to another. You can use AWS or similar in a way that means leaving to go use some other provider wouldn't be too difficult.) You can update a group like that by swapping each instance you're load balancing on in turn such that all requests should be serviced as you update, and eventually all requests get the updated version. It's fairly easy to create dev-only instances that match the live environment if you want to.
I'm really sorry if I'm not anwsering your question. I know all too well how annoying that is. It's this plugin thats responsible for updating/syncing changes. Not all wordpress plugins are supported so you have to check compatibility. Image uploads/pages/posts/etc are handled via W3 Total cache so they can be updated normally however with regards to keeping the core up to do date this has to be done via somewhere else with the updates pushed to the repo. The servers spin up, grab the repo and you have the updates synces across all instances.
You are kinda. It's called SQL and it's been around for a while.
Nothing is a waste of time.
Edited post. I think it boils down to this: * Show somebody `("5.0" == "5.0000")` and it's pretty straightforward, perhaps even *intentional* behavior. * Show somebody `("00E1959013750195"=="0E26810498248921");` and they'll go "WTF? Those aren't the same hash at all!" I think the convenience-factor of the notation is outweighed by the bugs it can ~~introduce~~ enable, especially because its special-allowed-letter (e/E) happens to be legal in hexadecimal. &gt; Also, how reasonable is it to make something as simple as an integer to string comparison throw deprecations? Well, the process of "deprecation" doesn't *have* to involve throwing exceptions or triggering errors. You can also say "this is going away" (especially as a package of other BC-breaks) and give people enough time to get used to it.
This is a set of talks. Can't you be grateful? There are people who would kill to be in your situation to sit and learn and take part in the activities and all you do is bitch. I would be so happy just to be there. I would slam my mac book with all the stickers in the world, I would not give out my email though. But I would go and I would enjoy it regardless of it flaws. 
If you have to ask then the answer is yes.
PHP UK has always tried to keep a community feel to it even as it has grown over the years. That means having a mix of speakers who are very good at what they do and also some who have only spoken a couple of times before. If it was the same speakers every year you seem like the kind of person who would be first to complain. Despite the way you've chosen to air your views you might have a point about the way some rooms get full. It's a difficult one to work around without being in a much larger and more expensive venue. I think you were concerned about the ticket prices though? PHP UK has been hosting 700+ people for a few years now. I've never known a conference without queues for food but I always thought this was one of the better ones in that regard - I've never waited more than 5 minutes for food. I suppose there could be more serving stations and more staff so everyone gets served quickly but that sounds expensive - the sort of thing that might mean more expensive ticket prices. Live streaming is a great idea but one that is very expensive to do properly. The videos that are posted after the event, in my opinion, provide the best of both worlds. They're not as expensive as a live stream (or the three simultaneous live streams that would be needed in the case of PHP UK), but they allow the conference to give back to the wider community by providing good content online for free. As others here have said, you could contribute a lot more by leaving joind.in comments for the speakers who you felt could have done better. Joind.in also lets you rate the event - maybe you could post something constructive there too?
Because RedTube gets you a visit from HR.
Thanks for the insight.
1. As mentioned by shawn (sibling comment). You can check to see if someone can string a sentence together before you put them on stage in front of hundreds of (i assume) well experienced developers. Symfony conference is well known for providing good talks. 2. Yeah I want infinite rooms... are you serious? Obviously not. I just want somewhere to sit, like all the other people who were splayed all over the floor trying not to stand on each others nuts. 3. I agree, you cannot always have the answers when public speaking, but there are times (only a few) where I think they didn't try hard enough to answer the question.
To OP: It sounds like you had a bad experience. I don't think anyone's doubting you, but if you're wondering where the hostility is coming from, you should consider that your criticism of PHPUK sounds itself very unprofessional. If your complaint to PHPUK's organisers read like this post, no wonder they ignored it... ITT there's lots of assumptions from people who either have little commercial understanding, or just want everything for nothing. I felt compelled to comment on some of the broader misunderstandings: &gt; Shitty speakers are shitty When I'm looking at a conference schedule, I want the speakers to walk a very delicate balance: engaging topic, knowledgable in their field, good speaker. If you want all three, then developers aren't usually the best candidates. &gt; Speakers are only doing this to further themselves professionally Yes, so? You make it sound like speakers walk out of the stage door and are greeted with recruiters throwing cash like confetti. It's good for the CV, just like doing hackathons, community code clubs, open source projects ... &gt; Speakers aren't paid? Outrageous! Taking ZendCon as an example, speakers will be compensated and I'm pretty sure it'll be a slick event. It's also $2,000 a ticket. Compare that to PHP South Coast (UK) where it's $140. There's an element of "you get what you pay for" with these cheaper conferences. &gt; The venues are crappy You need the following for a conference venue: large hall for milling about and sponsors, auditoriums with AV equipment (note, plural because you have 2+ tracks these days) eating area for *$attendeeCount* people (and potentially some catering facilities onsite), conveniently situated/well-connected and it can't cost a fortune because you're only charging $140. **Don't Forget** Someone has to part with $$$$$ to make this happen. Someone (or most likely, a company who probably only does this once a year) has got to pay the deposit for the venue, catering, AV, venue staff, printing, etc. They have to sign contracts, arrange sponsors, find speakers ... all of that takes time. Yes, they (hopefully) make it back, but there's no guarantees... Because it's not done by a company whose sole purpose is putting on PHP conferences, there's no margin/profit in it, so it's done for the community, by the community. 
I stopped going to PHPUK a number of years ago because it costs a lot to get and stay there, but as you say, it's just too big. Almost overwhelming...
Thanks for feedback. Live stream would mean more revenue from the people who cannot make it from all around the world. Therefore the price would be covered. This could also get more exposure for the speakers. They should do it next year.
I only hate this one thing.
If there was a live stream then it would've been possible for you to be part of it.
Hi, Thanks for reply. I agree with you, but .... AMPPS is probably fastest way to set web dev environment on OSX without much trouble - and also to have possibility to quickly switch between PHP versions. Imagine some frontend developer who is not so familiar with Docker, Vagrant and server technology and just needs to get project set up as quickly as possible in order to start working. I don't think that all devs like Vagrant provisioning etc .
I'm not sure about others. But I would class joomla as a cms rather than a framework. 
testing is for cowards
To be fair, you did pay for a PHP conference. What did you expect :)
&gt; Don't use them for improving performance. References, especially when modifying the contents of large arrays, can still improve performance in terms of peak memory usage though, correct? For example, this code: function alter_some_settings(array &amp;$settings) { if($settings['foo'] === 'bar') { $settings['baz'] = $settings['qux']; } } $settings = [/* some array with 10K items */]; alter_some_settings($settings); Would have a lower peak memory usage than this code: function alter_some_settings(array $settings) { if($settings['foo'] === 'bar') { $settings['baz'] = $settings['qux']; } return $settings; } $settings = [/* some array with 10K items */]; $settings = alter_some_settings($settings); I only ask because I've run into a few cases that required manipulating large arrays and tactically employing references seemed to cut down on memory usage quite a bit.
The real link: https://github.com/voku/Arrayy
Look into http://dreamfactory.com It is a nice API platform that uses PHP/Laravel. Has so much built into it already such as user access, API keys, groups, etc. and allows you to easily connect to databases and other services such as S3.
Why is the composer/composer image so bloated?
Why would a live stream have to cost a lot of money? There are free services to live stream on. All you would need is a camera which can be rented relatively cheap and good internet.
Ok. Fine. I get your point. So explain to me why traits CAN have static properties?
A lot of the talks were not that special. You get the same if not better talks at free php meetups. The food was good imo. Queues? There were several points to pick up food, including people carrying trays around, why wait in a queue? The goodies/email signups are like that for every conference regardless of industry. 
To hold data for static method calls for one. When sharing methods between classes, let's say you return a database connection in `$this-&gt;getAdapter()`, which also creates one if it doesn't already exist. So other classes using the trait can then utilize the already created connection in subsequent calls.
A quick glance at Slack's API, and something like this should be suitable: $message = "CW Ticket #*".$text."* from ".$user. " \n"; $message .= "https://&lt;ticket url&gt;/v4_6_release/services/system_io/router/openrecord.rails?locale=en_US&amp;recordType=ServiceFv&amp;recid=".$text."&amp;companyName=&lt;company&gt;"; $response = [ "response_type": "in_channel", "text": $message, ]; echo json_encode($response); For future reference, /r/phphelp, ##php on IRC, or [Room 11](https://chat.stackoverflow.com/rooms/11/php) is a better place for small questions like these. /r/php is usually for discussions, sharing resources, etc. rather than support.
Several people in my company are regular conference speakers, and all of them seem pretty happy with the situation. The #1 reason to go to conferences is to professionally network. For speakers it's even better because their exposure is that much more. Getting paid to do it would be great, I'm sure, but most of the people who are competent enough to give talks are also competent enough to already get paid very well in their regular work.
Don't feel bad. Most PHP conference speakers are horrible honestly. It's just very rare to have a talented programmer who is also a gifted and entertaining speaker.
Mysqli is **not** frowned upon now. PDO indeed is better for the everyday use, but mysqli's purpose is just different. What is frowned upon is a tutorial you linked to. 
You might want to look at glusterfs as a solution to this. [This guide may help.](https://www.digitalocean.com/community/tutorials/automating-the-deployment-of-a-scalable-wordpress-site)
&gt;JavaScript is an order of magnitude more broken, but nobody seems to understand that.. You mean, just like you don't seem to understand that it is actually the other way around...lol. 
&gt; This, however, is NOT how you're supposed to make things done It certainly isn't how you're meant to do things ... in the latest versions of pthreads, this won't even work; ```PTHREADS_ALLOW_GLOBALS``` was removed, because it's stupid. &gt; a most simple demonstration of how Threaded class allows to both read and write data from the isolated scope At no time do you write the global scope of another context, what you are writing too is a copy of the original variable, it just so happens that because you are using a ```pthreads``` object, the copy is a shadow of the original object, so it appears to work (and is safe). &lt;?php class Easiest extends Thread { function run(){ $globalInt++; var_dump($globalInt); } } $globalInt = 1; $easiest = new Easiest(); $easiest-&gt;start(PTHREADS_INHERIT_ALL | PTHREADS_ALLOW_GLOBALS); $easiest-&gt;join(); var_dump($globalInt); This will yield int(2) int(1) Because ```$globalInt``` in the ```Thread``` and in the main context are normal distinct variables. You already seem to know that the proper code should look like: &lt;?php class Example extends Thread { public function __construct(Threaded $shared) { $this-&gt;shared = $shared; } public function run(){ $this-&gt;shared[] = "proper things are proper"; } private $shared; } $shared = new Threaded(); $example = new Example($shared); $example-&gt;start(); $example-&gt;join(); var_dump($shared); Forcing you to inject dependencies encourages you to write code that has minimal cognitive overhead ... multithreading is complicated enough without having to guess which context a variable comes from, globals simply do not belong in this environment, and as mentioned if you want to benefit from PHP 7, you'll need to write the code the proper way.
So I'm trying to figure out when you'd want to use this. You would use this so you could build your app without a dependency on composer? 
NUMBER 5 AMAZES ME!
Frankly, the guy who wrote it were either drunk or insane. For starter, it doesn't answer its own title question, *why* should one actually use PDO (and prefer it, for example, over mysqli). There are **a lot** of typos, factual errors and overall inconsistency. The guy apparently thinks that prepare and execute belongs exclusively to insert an update, while select queries have to be run via query(). The explanation of exceptions is just equally bad. In essence, it seems that the author barely have an idea on PDO at all. Say, there is not a single mention on `fetchAll()` method - one of the most powerful PDO features. Poor fellows who learned PDO from this tutorial are using it as just a clumsy substitution for a mysql_query stuff. 
Ahh, perfect insight, thanks! Do you perhaps have a more suitable tutorial for PDO implementation? 
[removed]
&gt; You can check to see if someone can string a sentence together That's vetting, not conditioning. Are you seeing the hypocrisy?
The [Docker nano](https://github.com/Docker-nano) project has a [Composer build](https://hub.docker.com/r/nano/php-composer/) that's **9MB**.
It's as Levi said. You need to imagine traits as a "copy/paste". Everything defined inside the trait actually becomes part of the class definition where the trait was used. This is why we have the ugly `insteadof` operator for conflict resolution.
A better question would be why do you think you need to do this?
For a large project you'll usually end up with quite a range of tools, gulp, npm, composer, etc. Previously we've had a complex developer setup. Using Docker means we can get developers setup quickly, and the only thing they need to download is the toolbox. Docker Compose and a make file sorts out the rest.
A very good point. Fixed; thank you!
Because traits are only one form of code reuse and if you find you need to reuse constants it may very well be the case that traits are the wrong form of reuse for your use case.
Why did you get someone else to post your article?
Because just posting links to your own stuff is against the rules of the sub-reddit. https://www.reddit.com/r/PHP/wiki/index &gt; Please do not frequently submit links to your own content, exclusively. It's likely to get spam-filtered.
They didn't. I follow them on Twitter and thought it was interesting and relevant, so I posted it here. I guess they spotted my post.
[removed]
[removed]
By the way, you're welcome to ask any questions. It will let me make the article better, so if you find any statement unclear or unsatisfying - please ask.
Yes and (thankfully) no, respectively. I assume I'd have questions asked if I told everyone I met "$competitor is great!" for two straight days, but my talk wasn't a marketing talk or pre-screened (or even particularly relevant to what we do), and we're not a company that straitjackets what people can say. (I wouldn't represent a company that did, personally.)
If you really are being sincere, you're wrong – there are plenty of shops where CakePHP remains the primary PHP framework.
At least you didn't say the *L word*.
This is pure nonsense, but assuming you are talking from experience, do you have any links to talks you have given?
Ha, I might have if I wasn't so blind as to miss it in your redaction!
Okay. You have made your point clear: PHPMailer is a poor choice if you're building something with the "standard" development process most PHP applications go through. That's wonderful. Did you ever take into account that OP isn't building a professional Web app? That they may not need to follow the whole mess of a system? I'm sorry you're so jaded. I'm not defending it for every use case, as I've said. Quit attacking me on that front; I never said PHPMailer was da best package evar. It's an easy package to jump into and adapt into a simple application.
Thx ;) Surely extension porting is one of the things that I would guess is exactly what NewRelic must be doing for PHP7? AFAIK the extension is still in QA, but in any case it's great to hear they are cool with Employee's, paying for your time to help the PHP community; and that you are able to give back. Please don't take OP too seriously, I think it's either a really clever way to address unreasonable demands of conferences, and group events or a troll.
And you need to stop shoving the enterprise-y development model down people's throats.
[removed]
What if I told you you can can use class constants from other classes without having to extend them :D
TBH I did, which is why I asked. It seemed strange to install PHP, which is why I asked. It's like installing Apache, PHP &amp; MySQL in a single container, or bundling your app code into the same container as Apache and PHP, rather than use a data-container and volume from. I started using docker-compose to deal with complex situations like this one, I'm not sure that the app code should be using it's own composer container, and not just a cli-container that bundles the same. That way you can share the ini-files and have a consistent modification of the init / upstart script to tell PHP to use an ini file from a data volume, sharing extensions between CLI &amp; FPM (composer AFAIK only works CLI).
Every single package for PHP in the RH/Fedora space is derived from his work, even the IUS ones. He also contributes to the PHP Project, and works on the QA team as well. In many cases, his work has also influenced PHP packaging in other distributions (Mageia, openSUSE, Debian, etc.). He's also very prolific in packaging PHP extensions, libraries, and applications. Remi's packages are the upstream for Fedora, RHEL, IUS, and a lot of other PHP packages. And recently, [he's reorganized his repository](http://blog.remirepo.net/post/2015/08/03/Remi-repository-is-changing) so that the default configuration doesn't conflict with the base distribution. The administrator of those servers must be fully aware of what they're doing to enable things that could break stuff. You shouldn't be so rude to a guy who works very hard in good faith to provide an excellent PHP stack for the RH/Fedora family. And you should listen to it if you're even remotely interested in PHP 7 and its adoption in Linux distributions.
What about it is nonsense?
Congrats on shipping! :)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; you can prepare speakers. Have them practice, have them show up early and give their talk once to the other speakers or just an empty room. Empty rooms are nothing like packed rooms, it's not just nonsense, its downright stupid as it also puts the focus on the organisers to imagine everything that could be asked. &gt; "Try not to walk around too much, don't stare at your feet the whole time, make sure you practice to avoid lots of unnecessary umms and pauses, practice with the microphone so you're not eating it or ignoring it, practice projecting your voice" Even dumber still. These people are not talking 24/7, 365; The organizers may not be full-time event planners; it's for people in-industry to SHARE. Reasonable people will have already accepted this before asking their boss, or purchasing tickets. 
I mention empty rooms just so they can have _some_ practice, obviously it's not optimal. Though being comfortable just standing at the front of a room, even if empty, goes a long way. &gt; These people are not talking 24/7, 365; Who cares if they're not full time public speakers, you're saying there's no point in _practicing_ public speaking if you're going to be speaking in public? &gt; The organizers may not be full-time event planners; They are during the conference they are organizing, that's literally what it means to organize a conference. It takes _zero_ work for the organizers to say "Hey, anyone that hasn't done any public speaking before please practice before hand, here are some tips." Bad public speakers are ineffective at conveying their message, the _only_ reason they're speaking at the conference is to convey their message. I really don't understand your hostility to preparing the speakers. It's little to no work for the organizers, it doesn't raise ticket prices, all it does is make for a more engaged audience that actually take something away from talks more than "Wow, so awkward"
I use [Restler](https://github.com/Luracast/Restler). It is super simple, supports really easy intuitive routing (via routes to find the class, and reflection on php doc comments in the API class to find the function to call to handle the request). They have pretty good documentation [here](http://restler3.luracast.com/examples/). 
[removed]
I do a dev/stage/prod workflow, but only on single boxes. That said this is a subject I've researched a lot, but still take my thoughts with a grain of salt. (1) Your first defence is culling your plugins list. You mentioned that you've seen plugins storing config in files. Try to avoid those plugins, if you can. (2) Even if you can avoid those plugins, you still end up with the updates issue you mentioned. Two ways to avoid it: (a) use distributed filesystems (Gluster, for instance… also recently heard of a case where someone used simpler filesystem watchers to push/pull files between servers) or (b) disable WP auto-updates (in fact, they'll be auto-disabled if WP detects it's stored in a VCS repo by crawling up the tree searching for .svn and .git folders (possibly .hg too?)). We went the (b) route. Introduces a lot of update-related work (we have a dedicated person on staff to QA test updates and deploy them to production), but it prevents servers from going out of sync. We install WP and associated plugins with Composer and the wpackagist.org repo (a mirror of the WP Plugin repository, ready for Composer), and maintain a private Composer repo for commercial WP plugins that WPackagist can't serve. Again, this introduces update complexities because someone has to manually keep the private Composer repo up-to-date, but it's better than nothing.
&gt; think this sentence gives a wrong impression of how bad using H(k || m) is. Breaking this is trivial for anyone with basic understanding of crypto, it does not require a powerful adversary. For people for whom the problem is not immediately obvious: https://en.wikipedia.org/wiki/Length_extension_attack
https://www.codepunker.com/blog/how-to-install-php-7-on-a-cpanel-whm-driven-server-without-breaking-everything may work...
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Looks nice. Why did you use propel and not doctrine? 
Isn't it obvious beside the better performance point? :-P
Does this impact CodeIgniter 2.2.6 in any way?
No, just pre-2.2
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Ayos po
Man, checkout the last releases. It features CSS Selectors if you don't like XPath.
Thanks! 
Of course everything can be improved, but I don't think it's "a mess"... ;) Checkout the last release. The code is split between many files, maybe you'll find it easier to understand.
I've not tested it, but they seam to share few ideas.
Points of view... ;) About PHP 5.5, I would too but it misses so many featured used of PHP 5.6 that back porting is not convenient.
How, though? I'll freely admit there are problems with JS, but the biggest one - implicit type coercion - is not only present but *worse* in PHP. What issues do you have in mind?
&gt; Plus he is french lol. Even if you are a child, this is disgusting ...
The object system is simply not designed for the kind of large projects which it is used for today. (and let me just mention the lack of modules and includes) Also, the handling of "this" is unnecessarily confusing. Other languages don't have the same problem. See https://wiki.theory.org/YourLanguageSucks#Bad_Features
JavaScript has modules, and PHP doesn't. ¯\\\_(ツ)_/¯ `this` is dynamically-scoped, unlike every other identifier, which is lexically-scoped. This is indeed magical. It is also a behaviour of the vast majority of object-oriented languages (although the keyword sometimes has a different name) and can at least be circumvented in JS by storing the current instance on a regular lexical variable.
Why take advantage of system scheduling when you can just call a PHP script once every minute? Thanks, Russia!
Not sure if it's sarcasm or serious) The tool provides many advantages. Reports, output handler and GUI are very convenient.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
You completely throw the entire cron task scheduling system out the window replacing it with a dumb and grossly inefficient polling system that calls a PHP script every minute. There's no sarcasm here. Whatever purported advantages you're parading are hardly worth the trade-off for such a poor implementation. Also, nice of you to respond on your main account.
The plot thickens...
How dare you go against mainstream?
Since Doctrine is mostly used everywhere, i dont think so :D.
I *know*!
So in this respect, are any of the other CMSs not a Gate Community? Or rather, which CMSs have the least Gated Community? 
See http://www.reddit.com/r/drupal/comments/46udqe/why_is_drupal_still_a_gated_community/d083345 for my other comment. I won't be repeating it, unlike the op did because it would get more people in this sub. 
Well, it's mainly because I just like Propel2 more, its a bit faster and easier for me to use and because I'm the current maintainer of Propel2.
Seams legit. Thanks ! Will have a look in Propel2.
One advantage is that it could help keep all of your application's task scheduling logic in one location, rather than having to configure a bunch of cron tasks every setup. Plus, unless the PHP script itself has a massive overhead, the actual CPU resources used have got to be miniscule.
&gt; dumb and grossly inefficient polling system The hyperbole is thick enough to cut with a knife.
Man, I don't know who pissed in your cheerios this morning, but I hope your day gets better for the sake of anyone else who has to interact with you.
It depends on what you do. Most website are either data input or data output. It's really not that complex. Even Apis are just get some parameters, sanitize them andquery a database and output a result (usually in json, or something) There's lots of competitive advantage in writing only what you need, when it comes to speed and agility for future changes
Why one would want to make *runtime errors caused by environment* into issues for the code base? What database errors like "Too many connections" or filesystem errors like "permission denied" have to do with project files? Github is a support system for a code base, not a product. That's just a fun idea to toy with composer, but absolutely impracticable.
It's a cool idea, but probably impractical for real production projects. You could also accidentally flood your GitHub issues if you don't have good deduplication. You should check out bugsnag. It does the same thing but will aggregate the errors/exceptions and tell you how many users it affects, etc. It even still gives you the stack trace.
Joomla tried releasing many pieces as libraries. Wasn't a huge success because, frankly, it doesn't fit the mindset of the organization nor most of the CMS developers.
Why this: Tissue::create( $e-&gt;getMessage(), $e-&gt;getCode(), $e-&gt;getSeverity(), $e-&gt;getFile(), $e-&gt;getLine(), $e-&gt;getTraceAsString() ); and not this: Tissue::create($e); ?
So it sounds like there really aren't any CMSs that isn't a gated community. Do you think it's a folly of Open Source Development in general? It's obviously awesome to get free stuff but... 
Because none of the ones you mention would exist without someone thinking they could make something better. Most importantly the frameworks you mention are demonstrably better than those before them.
You know nothing from the OPs post about the value produced by this code currently for the business or the business model and how the app/code relates. A rewrite can never be recommended until you know that.
I think that would be a good idea as a helper - such as `createFromException`. Also, a helper to bind an uncaught exception handler.
You can also create GitHub (or BitBucket or JIRA or...) issues from within BugSnag, if an exception needs a ticket created for handling. Same can be said for other error aggregate services (we use [Sentry](https://getsentry.com/welcome/) which is very similar to BugSnag).
No, I mean, why would you *need* the verbose version at all? All you are calling are methods on the exception, so why not just take it directly?
Wouldn't a Monolog handler be more useful?
I agree this wouldn't be practical in reality, but why would all runtime errors be caused by the environment? Don't you write any bugs?
&gt; $cityRepository = $services-&gt;get('RepositoryFactory')-&gt;get('\sample\src\model\CityRepository'); I hope this isn't some baked-in proprietary service location pattern you have to use just to get access to repositories.
Thanks a lot! It does some simple duplication verification by querying the Search API with this: {$title} in:title state:open label:bug repo:{$author}/{$name} The issue is only created if there are no results. I like the idea of adding or editing a comment, but I would worry about flooding and abusing the API limits! Thanks again, I'm always nervous about submitting my work, your comment reassured me.
Yeah, I agree. Laravel as an example throws an exception when a Model is not found and you use Eloquent's `firstOrFail/findOrFail` method instead of `first/find`. To create an issue for that would be kind of nonsense. I know that you can only call this library when you need it, but if you know that something bad can happen, why don't you implement the fixes or error handling directly instead of waiting until it happens and then open an issue to it?
That's very cool, I didn't know about either of those. They're a big step up from my free tiny weekend project though! 
I like your idea, it could be treated *à-la* zapier/ifttt, with several services like "show a desktop notification", "post to github", "send me a phone text message" all subscribed to the event "an exception occured". The idea deserves some digging I think.
I can't agree more with you. It's sad that people think that a certain language can compensate for the lack of developer knowledge or the overall dumbness of said one.
Not replace - enhance. You can have as many Monolog handlers as you want. Why bring extra method calls in error logging when you can adjust the behavior globally in the configuration?
Send error to email, post to stackoverflow, etc etc :)
There is a constant that you can define to make it so that plugins, themes, and WordPress core can't be updated from the WordPress admin (or through automatic security updates). define('DISALLOW_FILE_MODS', true); You will be responsible for ensuring everything get's updated, so please, act responsibly and keep your sites updated. For file uploads, I would encourage looking at https://github.com/humanmade/S3-Uploads so that all uploads go to s3. As far as plugins that try to edit files, the best answer to those is just don't use them.
&gt; I stopped when I realized stack traces could contain sensitive information such as DB credentials or API keys Yes, this could be a disaster on public repositories, that's why I made the stack trace optional and put a security disclaimer. I don't understand your second sentence though, you mean filtering duplicates?
Wow, I didn't think about that, that's an awesome idea. I'll be working on it, thanks!
Ok, maybe everyone already knows FluidXML here, but not everyone (and could be interested to) knows that in the last release of _Yesterday_ there are some interesting features: 1. **HTML** export 2. **CSS Selectors** for queries 3. query **filtering** 4. **PSR-0/4** compliance Everything is on _Packagist_ in the **1.20** release, if you want to try.
Thanks. I think the conclusion here is that it is possible but there are tradeoffs. 
Thanks for the tip about DISALLOW_FILE_MODS - is it likely there will be any side effects of setting this to be true? I feel like there may be. &gt; As far as plugins that try to edit files, the best answer to those is just don't use them. One of the plugins that does that is W3 Total Cache, which is the plugin officially recommended by AWS in their Elastic Beanstalk guide.
W3 Total Cache is frequently recommended, but is a giant blunt hammer of a plugin that tries to do way too much. Figure out what features you need from it first, then find (or write) smaller plugins to accomplish those needs. (And if you need it for full-page caching, go Varnish instead.)
Maybe it did in the past. You're right that it doesn't appear to anymore. Laravel 5.2 does have this in its Exception handler however: protected $dontReport = [ AuthorizationException::class, HttpException::class, ModelNotFoundException::class, ValidationException::class, ]; This would serve as a good starting point for excluding exception types from being reported to Github (if using Laravel).
&gt; Pure PHP implementation (no PDO, no XML) In what way is PDO not considered "pure PHP"? Regardless, it looks interesting. I'll take a more detailed look tomorrow.
I think it comes down to size and popularity, which is why the author opened up the post by mentioning Drupal's size and popularity. There's no reason to expect every project using open source components to give back to the community, but we do expect it from projects of Drupal's size. Especially when the project leaders have created a small industry around their software. WordPress on the other hand gives a lot back to the community. Not necessarily by sharing code (who would want it, eh?) but Automattic does a lot for the open source community and internet community at large.
Background: part of the business I work at dispatches parcels out every day and uses some desktop software supplied by their courier company that prints a label and emails the client with a tracking number. I was asked to grab that tracking number and put it into the ordering site that I built. After some investigation into the dispatch software, I've decided the easiest way is to make the software also email, um, the site, and the site it can parse the email for the url and insert that into the db. So the question is, how do I get an email to my site? Have some mail server somewhere that is accessible to php scripts? I'm having a mental block and can't figure out if this is easy / I'm just missing something or if it will be quite fiddly. I don't have server access but can ask the host to do things... just not sure what to ask him yet. Edit: Thank you all! :)
The IMAP PHP extension is great and really easy to use. http://php.net/manual/en/book.imap.php I've used this to accomplish similar things, such as reading &amp; parsing mailboxes.
[Fetch](https://github.com/tedious/Fetch) should make it easy to get the mail. Once you've grabbed the email and parsed it. Use Fetch to mark it "seen" or delete it off the mail server. Setup a cron job to run your script periodically.
You can also use Ting (http://tech.ccmbg.com/ting/) Fast, pure SQL, very fast to learn, no magic (i am one of the lead of the project)
Thanks for your work pmjones, without your library we should have made our own sql builder :) 
I've never understood the distinction.
I tried to explained it in [the documentation website](http://uri.thephpleague.com/definitions/) TL;DR: everything you call an URL is an URI but an URI is not always an URL. for instance a telephone number can be an URI but is not an URL
Perhaps consider using a micro framework like Slim to give your code base some structure. It means you can delve straight into developing your app without spending time setting up the preliminary structure.
&gt; If you need truly isolated persistence layer, the only existing solution is Doctrine2. ... I like to see some easy-to-use alternative to hundreds of stupid AR implementations. I wanted the same thing, and worked up [Atlas](https://github.com/atlasphp/Atlas.Orm). It might begin to suit your needs.
First, I recommend doing a job search for your local area. Use the keyword "PHP" and the location where you would want to work. Browse all the available jobs, and take note of the job requirements. Also be sure to keep track of how many times each technology shows up on a new job. For example, if you find 20 applicable PHP-related jobs, and 10 of them mention Laravel, then it might be a good idea to learn Laravel. Personally, I'm not a big fan...I'd suggest Symphony or rather micro-frameworks like Silex or Slim. Personally, I'd recommend reading http://www.phptherightway.com/ if you have not already. I suggest learning and utilizing modern PHP and following all best practices and standards which are all mentioned in this book. Lastly, you have the right idea to start building stuff in order to learn, and to also help create a portfolio where you can show off what you have built. I've always done CRUD applications when I'm learning, like a simple Recipe website. A place to show recipes, categorized (Breakfast, Lunch, Dinner, Dessert), with list of ingredients, instructions, etc. A way for users to rate recipes once they've tried them and optionally provide comments. A way for users to add their own recipes and potentially update them or delete them, if you'd like. But definitely an administrative area for you, as a site administrator, to manage all of this and be able to create/read/update/delete as needed.
I'm familiar with PHPtherightway, great site! I'm just way past the reading about it part and only really learn when I put those concepts into action in the form of a project. So a recipe app is now on my list of projects to *just do*, thanks a ton!
Wow that is great, really. I never though somebody would do this, but it's great!
&gt;you shouldn't be making a custom CMS because any number of people have already done and probably done it better That would be pretty stupid to avoid doing something because it's already been done several times. If it's for learning, you should do anything you can/want. Don't release it to the public unless it's really good and you spent a lot of time on it AND it fills a specific need that is not filled by another CMS (or badly)
Probably you could, yes. But the gain could be lost by another copy somewhere else, after the "is_ref" flag was set, again, or the reference there might create a copy as he reference counter might be higher. Just for the most trivial case: function alter_some_settings(array &amp;$settings) {} $settings = [/* some array with 10K items */]; $settings2 = $settings; // No actual copy done, yet alter_some_settings($settings); // Now it is copied to split $setings2 from $settings or function alter_some_settings(array &amp;$settings) { if (in_array("foo", $settings)) /* copy here */ { ... } } $settings = [/* some array with 10K items */]; alter_some_settings($settings); // No copy here In real life the places which increase the refcount might be harder to find. And even after tuning and benchmarking once a small change might accidentally re-introduce the copy. Aside from the short example and in an actual application I'd look at the bigger picture: Maybe it's worthwhile to wrap the settings and the settings modification into an object. The settings array then is only modified from within the object using $this-&gt;settings and properly encapsulated. This not only avoids the accidental copy costs but probably also leads to a nicer API and architecture.
&gt; If it's for learning, you should do anything you can/want. I don't fully disagree but the post was specifically for increasing employment. While it probably wouldn't hurt your chances I would question if the time wouldn't be better spent somewhere else.
&gt; All the job apps I see want EVERYTHING it seems. You will find that alot. It's a problem with the industry and even more so for entry level jobs. Entry level to to sometimes even mid can be a crapshoot in quality. If you're lucky you'll find a place that wants to invest in you and mold you into their dream developer. Other places will view you as an expense and try and drain every drop from you. It will be up to you to decide what you're willing to do and what's best for your future. 
I have to give props to Automattic, even though I've never been a fan of WordPress. Matt Mullenweg (founder) seems like a swell fellow. Some of the things they do for the community which aren't directly related to sharing software. * They created [Gravatar](https://en.gravatar.com/), which is used everywhere, and it's totally free. * They created [Akismet](https://akismet.com/), which is also totally free for casual users. I'm not totally sure how it works, but I bet it's not cheap to run. * They sponsor [Let's Encrypt](https://letsencrypt.org/), a free SSL certificate authority created by the Linux Foundation. I started using this recently myself. It's legit. Unlike some other free certificate authorities I've tried. And they do give back source code as well. (I'm just now sure how "valuable" that is.) Compare [their Github profile](https://github.com/Automattic) to [that of Drupal](https://github.com/drupal). Big difference! ha
Really useful! Thanks!
Should I make a confession bear since I like BitBucket way more than GitHub?
Be able to do FizzBuzz. It's amazing how few candidates I interview are able to handle it.
Well the same could be said about RFC3986 which has more than 30 pages to describe a string... if I follow your reasoning. I believe that simplicity and ease of use have nothing to do with how a package is built. The public API and the package usage **are** simple which is what anyone want. As for the performance it has been improve in the last release thanks to twicks using blackfire.
I spent several years on Stack Overflow answering questions on PHP. Being interested in database wrappers, I kept an eye on PDO related questions in particular. With a lot of data to review, one is able to collect some statistics, and even trace the common patterns of (mis)use. So did I. From such an experience, and due to lack of really good tutorials on PDO (To be frank, one from Tutsplus is just terrible), I set out for creating one of my own. Finally, I was able to come up with a tutorial biased towards the very patterns of misuse I was able to spot - aiming to correct them. Please keep it in mind this fact if some statements would look too imperative to you - it's only to counter overwhelmingly massive use of bad practices. At the same time, I was able to discover some neat PDO features that are almost totally unknown to developers, which I find a great waste. So I tried to advertise them as well. Some topics of the interest are: - [Error handling](https://phpdelusions.net/pdo#errors) - [Return types](https://phpdelusions.net/pdo#returntypes) - [Getting data out of statement in dozens different formats](https://phpdelusions.net/pdo#fetchall) - [Getting row count with PDO](https://phpdelusions.net/pdo#count) - [Calling stored procedures in PDO](https://phpdelusions.net/pdo#call) - [Emulation mode](https://phpdelusions.net/pdo#emulation) - [Mysqlnd and buffered queries. Huge datasets](https://phpdelusions.net/pdo#mysqlnd) I am looking forward to get the usual friendly and unprejudiced feedback from /r/php/ Your comments on my previous sharings proved to be invaluable, making me to work on the better phrasing a lot. So I am eager to see your remarks. 
How about Async/Await? We've been wanting this for ages, and the fact that Hack implemented it means that it can be done for PHP 7 too. 
Well said.
I seen Atlas and it seems to be pretty interesting solution. But I had no chance to try it.
I have quite different view on this problem of handing errors. Please, refer to the [corresponding chapter](https://phpdelusions.net/pdo#errors ) - I hope you'll find my recommendations reasonable. If not, I'll be glad to answer any argument you've got.
Nice. Had not noticed `nextRowset()` before, so I learned something new. Thanks!
Yeah, it's brand-new. If/when you use it in the future, I'm interested to hear your criticisms of it.
Glad I was able to help such an experienced PDO user! By the way, is there anything you don't agree with? 
Agree. That's what I was trying to say: as long as you have the data itself, you don't need an API call to know the count. You can just count the data itself. 
Could you elaborate why a direct closure binding mechanism and fluid objects would be pointless ? I agree that a reflection keyword and/or reflection cast is nothing what php really needs.
Eh, GitLab, BitBucket and GitHub are all pretty much the same to me. The features between all three are all similar these days. I just happen to like BB's UI a lot more than the others.
Bitbucket is cheaper for entreprise solutions
An ORM knows how to handle the relation between object, retrieve them and persist them. Ting doesn't know that (but it can handle object composition if you precise which composition you want) A Datamapper compare to ActiveRecord said your object should be independent of database, Ting entities are pure PHP object with absolutely no knowledge of SQL or database. A Datamapper need to add the knowledge of Repository, to querying your database, Metadata to know how to map database to entity. If you really want a Datamapper only knows "take a list of stuff" and "turn it into objects" so you want a Serializer, not a Datamapper.
At first, fast glance it looks very promising, nice to see it is "up to date" with platform dependencies, nice UI etc, I need to take a closer look at sources. However, it is sad to see another Symfony-based e-commerce solution not reusing some components.. What is out there, remind me? Theila, Elcodi, Sylius - ones I know, and still re-inventing the wheel of e-commerce components in this WellCommerce.
Yes, it's entirely a matter of taste and I'll tell you why I prefer ?s. If you look at the query, most likely you'll find a name next to the placeholder. Say, `email=?` evidently is dealing with email. While `email=:email` looks redundant to me. Thus I find even the short form readable enough.
I feel like all of these kinds of posts suggest the same solution → spinning up a JavaScript interpreter to execute JavaScript on the server. Personally, that doesn't feel anywhere near as nice as using something like Hack + XHP to have actual, evaluable components. It's the same as having string templates instead of JSX: not idiomatic at all (and with the added burden of running 2 interpreters instead of 1). It's not that I think this post is bad. Just that I think the approach (as generally put forward by these _kinds_ of posts) is less than ideal...
Good catch. I tried to use it all the way, but indeed in some older examples old notation persisted. Fixed now. Thanks for the pointer!
Most are fine, but ~~fluid objects~~ monkey patching is a horrible, horrible idea and every language that has them is worse off for it. It makes reasoning about the code you are looking at pretty much impossible since whatever *you* wrote can be modified by anyone, anywhere. In the Ruby world, it is an endless source of bugs and I really don't want PHP to be "infected" by it.
Damn me, what a stupid mistype. Fixed. Thanks a ton!
I would like to see the Phar and Zip extensions enabled by default in the .ini It is rare to find Phar support on most shared hostings
The section on buffered queries and mysqlnd sounds a bit misleading to me. Whether you use libmysql or mysqlnd, buffered queries will be hogging memory. They are not "free" if you use libmysql. They simply won't be counted towards the value returned by `memory_get_usage()` (which only reports a certain subset of the memory usage).
Yes, but those classes are there for a reason - each piece covers something in order to make the whole behave correctly in any scenario (thus complex). And it's a good thing that we have standards which are strict in the tiniest details, otherwise we would end up with various implementation conflicting one another (let's take the simple kilobyte for example - for some is 1024 bytes, for others 1000, for other category of people there is the kibibyte, for some it isn't because it's not standardized...)
You tapped into Nancy Drew just by checking it ;)
"Agree/disagree" is probably not the axis to use. Based on reading through it once over about 15 minutes, as far as I can tell, everything there is "accurate" (which is what I care about most). I did not find anything obviously misleading. I reserve the right to report later discoveries. ;-) On a note of shameless self-promotion, you mention some ORMs by name, but not query builders; you may or may not wish to mention [Aura.SqlQuery](https://github.com/auraphp/Aura.SqlQuery).
That would definitely be better, but if I had to vote on it, I'd still need an extensive RFC that covers every edge case to really consider it.
Yes, that is correct. Only memory reported by memory_get_usage() counts towards the memory_limit.
phpstorm 9 was so slow on my mac mini, version 10 is so much faster. because of the jdk bundle stuff
I like the operator overloading interface, but I feel like most implementations would have little use for the `__div` `__mul` and `__pow` methods. My implementations would probably just throw `LogicException` when called. Might it be logical to use one interface for addition, division, and concatenation, and another for multiplication, division, and exponentials? Or am I just being too much of a purist here?
You are very right!! I wrote my own framework few years ago and learned a lot. Then i had to move to an existing framework, because i could not keep with the amount of functionality which the existing frameworks cover. 
I promised my self to investigate Aura already a month ago, but still didn't get the time :( Bu the way, just after a quick glance: I've seen you've got s a pecial routine to add NOW() to the query, but how does an insert helper deal with sql functions for which you have to provide an argument, INET_ATON() for example? , 
People bash PHP primarily because it's fun and trendy, but also because PHP has some quirks. For those who have been developing in PHP for most of their programming lives, these quirks are easily either dealt with or worked around. Those same developers have to be able to tune out the PHP naysayers at the same time, though, and also know that above all they must not contribute to further tarnishing of the language with bad practices and ugly code. Given that you're posting on /r/php, you're almost certainly going to get an overwhelmingly positive response to the question of should you learn PHP and is it still worth it. Obviously, we think it is because most of us here write in it and use it in some fashion every day. Whether or not *you* should use it, however, is entirely up to the project you are working on. Some are suited for PHP, some are not. For example, most PHP developers would agree that PHP is best for small-ish sites and projects that won't need to be scaled for an ultra-high user load or support an enterprise application-level of features. For that, you might be better suited with something like JEE or .NET. Finally, I don't know if I agree with you that 70% of all webdev is PHP...it certainly isn't. That's the great thing about web dev: there are already tons of tools to choose from and there are more being released every day. The most prominent on the scene now are PHP, Ruby/Ruby on Rails, Python/Django, Nginx, the list goes on and on. You certainly shouldn't feel as if you *MUST* learn PHP in order to be competitive in today's job market, that certainly isn't the case. Instead, experiment a little to see what you're comfortable with, then explore that avenue even further. Best of luck.
Making all services available everywhere is the wrong problem to solve. It means you're thinking old-school like with PHP4 globals. Instead of replicating globals through an App class, consider why would you need all services everywhere in the first place. Is everything running raw SQL queries? Is everything caching? That would be highly suspicious. How do you enforce business rules in such a mess? How could you have some semblance of an architecture? You don't want every service to be entangled with every part of your code. Instead, every component should have access to exactly what it needs, and nothing else. As for how to do it, look at how dependency injection works (not the fancy reflection/container based one, I mean the one-liner one, with passing parameters to a constructor).
- parse_url predates RFC3986 so its ~~validation~~ parsing rules does not conform RFC3986 - parse_str mangles variables in PHP - http_build_query adds extra indexes to array like parameters. - filter_var does not validate i18n hosts ... Most of the classes in the library are modifiers which are decoupled to avoid a URI class with 60+ modifiying methods. For the majority of people using this library none of this matter what matter is the exposed API which I think is simple. Try the library and then tell me if it's as complex I you think it is 
So if you are using ? for a placeholders and you have multiple in your sql statement: $stmt = $pdo-&gt;prepare('UPDATE users SET bonus = bonus + ? WHERE id = ?'); and then you do: $stmt-&gt;execute([$id,$bonus]); How do you know which variable goes to which place holder? To me it seems it should go left to right. So if $id = 5 and $bonus = 100 So it would end up looking like UPDATE users SET bonus = bonus + 5 WHERE id = 100 which isn't what we are trying to do But in your example the first variable $id went to the second ? placeholder and the sencond variable $bonus went to the first ? 
It was a typo of mine. Thank you for spotting it. You are right, it goes from left to right. Fixed. 
so we have implementations that have been battle tested for years, but only validates a subset of the standards, and we throw all those away, because we can do it better in PHP alone. ok. &gt; For the majority of people using this library none of this matter what matter is the exposed API which I think is simple. Try the library and then tell me if it's as complex you think it is. From the documentation site. &gt; The Http class is compliant with PSR-7 UriInterface interface. This means that you can use this class anytime you need a PSR-7 compliant URI object. Simple? This is simple --&gt; https://github.com/slimphp/Slim/blob/3.x/Slim/Http/Uri.php
PITCHFORKS!
&gt; I've seen you've got s a pecial routine to add NOW() to the query My guess is that you see `$insert-&gt;set('ts', 'NOW()')` being used in the documentation. The `set()`method is a "set this raw value" method, specifically intended for SQL functions. So you could use `set('colname', 'INET_ATON()')` (or any other SQL function) if you liked. (Note that it's explicitly for raw values; the default is to pass an array of key-value pairs that get used in prepared statements.) Does that answer your question?
That's an excellent point and probably reveals a flaw in my thinking. I rarely deal with mathematical objects, so my envisioned use-case for operator overloading would be shorthand for logically combining classes like DTOs and Filters. For example: $twoCountyElectionResult = $countyOneResult + $countyTwoResult; $nonGoldMembersWithPurchases = $membersWithPurchases - $membersWithGoldStatus; But that doesn't make any sense for dealing with general cases, because `$membersWithPurchasesFilter - 1` would still be valid. I think my examples might be an abuse of operator overloading, and a safer, more readable option would be what I currently do: $twoCountyResult = $countyOneResult-&gt;combineWith($countyTwoResult); $nonGoldMembersWithPurchases = $membersWithPurchases-&gt;not($membersWithGoldStatus); TL;DR: You're right, my assumed use-case might be an antipattern.
&gt; so we have implementations that have been battle tested for years, but only validates a subset of the standards, and we throw all those away, because we can do it better in PHP alone. ok. User land implementations are slower than theirs C counterpart. But they can be fixed a lot quicker. https://wiki.php.net/rfc/on_demand_name_mangling &lt;- you may have to wait PHP8 for a fix for parse_str for example. And fixing parse_url would be another huge BC break for anyone. Yes there are a number of PSR-7 UriInterface implementations I'm not going to deny that but a majority of them depend on parse_url, League URI does not and that's one feature/tradeoff (depending on how you see it) to set it apart from the other implementations. Bottom line: you have the choice between implementations so fill free to make a educate choice as long as it suit your needs. But do keep in mind that league URI is not only about HTTP Uri. The package deals with every URI part and components and is build to manipulate any URI scheme.
In the interim perhaps check out http://amphp.org/docs/amp/
It's a bit unfair, but once you'd got to that point, maybe they were testing to see how you'd react to impossible problems?
Looks like you are looking for some sort of reporting tool / business intelligence tool. Try googling for these terms or take a look at eclipse BIRT. I am on mobile now but I can give you more information tomorrow.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; Url was restricted to HTTP(s), Ws(s), FTP URI while Uri can be used with any scheme specific URI. So I think it make sense to call it URI to express its wider usage. Er, okay, but that doesn't really address my comment. "Url" and "Uri" look very similar and are almost (but not quite) synonyms. Naming the new library this way will create confusion.
I only tried it with apt-get. There was a php5-apcu package but I did not think it would work with php7.0. Was that incorrect?
Yeah definitely a possibility...
Build what you want first by consuming the REST API provided by the web server, and then see if there is any rationale behind building an extension. That way you can presumably run your web server wherever.
Kind of reminds me of the Drupal 6 Views module. I haven't worked with Drupal much since 6, so I don't know if it's changed since then.
I'd love it if the reflect keyword get implemented :) , it will make the code more readable and also less typing compared to something like ```new ReflectionClass(FQCN\ClassName)``` 
&gt; parse_url predates RFC3986 so its ~~validation~~ parsing rules does not conform RFC3986 As I don't intimately know the spec or the ones that predate it, would you care to elaborate on what's not handled? I've yet to find a situation where `parse_url` didn't cover my needs, though admittedly I've never tried to use it with anything that falls outside of the intersection of URI and URL. More pointedly, I'd like to know what bugs I should be on the lookout for having used the stupid-simple approach.
Probably yes, both are big datasets in the worst case, nothing what should be calculated in PHP scope. Real world use-cases like yours are data sources to combine, not general subjects of math. In those cases __mul(), __div(), __pow() makes no sense or may result in very large numbers, probably exceeding the max integer value. DateTime Objects hitting the same issue. There is a theoretical use-case to add or subtract dates, but no use-case to multiply, divide or exponentiate. The question is: Should we count operator awareness as an implementation of math subjects or is it more logical to divide all operator methods to grant the ability of turn objects into single operator aware states. Do we need the freedom of choice or do we need a standardized interface for math operations, or both ? An Interface could be applied easily in user-land code for all those methods. But if we make the entire mechanism depending on that interface, the door to math objects is opened and partial operator awareness is closed forever. I think the freedom to decide for every use-case will last. So, the OperatorAwareInterface wouldn't be the greatest idea.
# To land an interview ##Entry level PHP developers should: #1 Have a github or gitlab or bitbucket account with at least a couple of personal projects. This shows that you are familiar with git, which IMO is as crucial as knowing development these days. It's one less thing the employer will have to teach you the basic mechanics of. #2 Demonstrate code that accepts user input of some kind, uses that user input to query from the database, and then displays some information to the user in an HTML template - in otherwords, code that covers the full request/response cycle. MEGA bonus points if you demonstrate prepared statements in either PDO or mysqli, and escape output (specifically output that first originated as user input) before echoing it in the template. This demonstrates you know basic HTML, SQL, and the basic foundations of security for user-generated content. #3 Demonstrate code which is formatted consistently, and logically organized. I'm not necessarily talking about adhering to PSR standards or code that follows current object-oriented best practices, but code that merely "presents" well. Consistent indentation, consistent spacing, consistent naming conventions. Similar code should be grouped together, and the execution path should be logical. Ideally, most obvious forms of repetition extracted out into re-usable functions or objects. Some separation of concerns would also be a huge bonus (e.g. not mixing SQL with PHP logic with HTML in a single file). Beyond that, I would say exactly *what* projects you use are a bit irrelevant as long as you can demonstrate those underlying principles in them. Of course, it also depends on what kind of job you're interviewing for. A company looking for an entry-level Wordpress or Drupal developer should demonstrate the basics of those CMSs - building a theme from scratch in Wordpress and Drupal, adding some custom content types to Wordpress / Drupal, configuring them etc. Though I would say if you can demonstrate a decent foundation for actual PHP programming, an employer should be able to realize your potential to learn the basics of the CMS they use - it's just documentation and following a recipe after all. Sadly there are many junior developers who don't actually know programming, and only *can* follow a recipe, but still manage to get by anyway... # During an interview ##Entry level PHP developers should be able to: #1 Read and follow just about any real-world code example. If someone asked you what some (sane) snippet of code did, you should be able to read through to the end, tell them what you think it did, and then if given some input, trace the code transformation step-by-step and tell them what the output would be. This establishes you have familiarity with programming, PHP, and can work with existing and unfamiliar code. Note that this is very likely to involve object-oriented code, so you should know basic OO syntax and behavior. #2 Solve FizzBuzz. As fucking stupid as I think those gimmick problems are during interviews, they are a reality of many interviewing processes. Know your FizzBuzz, and be prepared to explain WHY your implementation works. Sometimes devs will just memorize a FizzBuzz implementation, but then can't actually talk through their solution to explain what it's doing. That catches them with their pants down. Don't be freeballin' during your interview. #3 Explain how the request/response cycle in PHP works - roughly what happens when you access a script from your address bar, which may include/require a few other scripts, to how the execution flows through the entry file into the included/required files, and finally at what point the output is returned to the browser and the script terminates. It sounds basic, but it's a pretty important conceptual understanding to have. There are many examples of code out there that show a lot of duplication of logic in several files, because the developer doesn't understand how to share common code/functionality between files, in turn because they don't understand exactly how combined files execute during a request. You also see some really insane stuff like a PHP function terminated half way through it's definition, a giant chunk of HTML, then the remainder of the PHP function definition, all because the developer didn't really understand execution order in PHP (which I have seen examples of in Vbulletin - commercial forum software, and MANY Wordpress themes) Should also be able to explain that by default, all PHP requests are stateless. What happens during one request is immediately forgotten about for the next request, unless you start employing session, cookie, or database storage. #4 Similar to #1, if given a sample of code that you are told contains a bug, you should be prepared to walk through your debugging process to figure out what the bug is and how to fix it. They may intentionally withhold information from you about the details to see what kind of discovery questions you ask to narrow down what and where the bug is. #5 Write some basic SQL queries on a whiteboard involving simple joins and aggregates. Perhaps even write the table schema for a simple problem like storing a list of students, courses, and which students are enrolled in which courses (or users, movies, and users' favorite movies, or any such similar pattern)
Not interested, but sounds cool. Good luck finding a dev. If all else fails you could post the job to guru.com
An is before a vowel sound, [not a vowel](http://www.writersdigest.com/online-editor/a-before-consonants-and-an-before-vowels-is-not-the-rule). 
Or [Atlas](https://github.com/atlasphp/Atlas.Orm), which not only does ORM stuff, but exposes the underlying PDO connection if you need it. (See the very end of [this section](https://github.com/atlasphp/Atlas.Orm#reading).)
Joomla is far away from a full-stack or micro-framework. It is too specific to count as one. The closest definition a "highly customized" would match is an CMF: Content Management Framework. Frameworks are commonly interoperating toolkits who connects single components together to achieve a specific goal. This definition is too general for a content management based system like joomla.
Its up to the company how to test. Usually those test are no kind of jailed environments that forces you to match a specific set of tests, without having any chance to debug what you do properly, it is simply not fair, no development environment will ever meet that requirement. If i would run your skill tests, i would give you a task and let you implement it in your way with the hint to focus on best practices for as many use-cases as possible. What i would learn from your results is how you did it ( standards, unit tests, code quality / metrics ) and probably why. An concluding discussion of what you have done would set my assessment of your skills in stone. Working with given - immutable - tests would be an advanced test, nothing for junior developer for example.
"Hackathon Starter Pack For Laravel Developers"
Thanks for the input!
Considering the number of good fixes given in the replies here, you could consider keeping the docs on Github, and letting people send pull requests with fixes. With a little web hook you could update the docs on your site automatically after each commit.
FETCH_COLUMN is not a valid fetch style for fetch()
Ah, originally I wrote interface, but then thought I'd use UI to be clear I don't mean a PHP interface, must have missed the an.
Thanks - that looks very similar to what I was thinking, cheers!
Sounds like a horrible usecase. Either way why can't you just wrap it in a proxy class?
Thank you for the thorough response! I really appreciate this kind of comments - with questions and suggestions, showing the real interest and comprehension! Makes me feel I am doing it not in vain. &gt; How have I been using PDO for years and just now finding out about this? I can immediately use these to replace several dozen lines of dumb grouping code in my current project. Glad to hear that! That was my aim exactly! By the way, at the moment I am working on the distinct article explaining in detail all the 18(sic!) fetch modes available in PDO, one of which will probably make you friends with `PDO::FETCH_CLASS`: `PDO::FETCH_PROPS_LATE`' makes PDO to change the attitude towards constructor: -&gt;fetchAll(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Foo'); will create an instance of Foo class filling properties *after* constructor call! I should have mentioned it in the article probably. It just occurred to me that there is so much details and nuances, that all the fetch modes nitty-gritty details have to be herded into the distinct article. &gt; This really deserves to be mentioned on PHP The Right Way. Well, given the fact that there are scarcely a few paragraphs on PDO there, I think there are other important things to mention first - like the necessity of the exception mode or even basic fetch modes. After all, constants like `FETCH_GROUP` are but a syntax sugar, while to me it is much more important to wean php users from a habit of catching and echoing exceptions out right away. But surely it will be a honor to be mentioned on this great site, along with any excerpt from the text you think is suitable. Dunno the procedure but my email is col.shrapnel@gmail.com
Thank you for the pointer! Although DSN is explained, indeed PDO and LAMP are not. Going to add these too!
You are right. I myself been in doubts, and even finally decided to remove this part, as being indeed irrelevant to PDO. But it seems after that I messed up some revisions and lost several changes, including this one. On a second thought I think it should be preserved, but in the form of recommendation. As of the AR - to me it's just another way to map a database record into PHP object, thus an ORM in essence. Am I wrong? 
&gt; parse_str can be used without extracting values into the scope. Cover the cases missed by parse_url, and cover the encodings missed by filter_var. Isn't that a safer approach? I've already tried this approach in League\Url and while developing this new package because I thought it was possible but you end up with hacks that depends on PHP/Hacks minor versions fixing bugs or creating new ones. And there are some situations where it's simply not possible to do this. $query_string = 'foo.bar=3&amp;foo.bar=4'; parse_str($query_string, $res); //$res contains ['foo_bar' =&gt; '4']; $res2 = (new League\Uri\QueryParser())-&gt;parse($query_string); //$res2 contains ['foo.bar' =&gt; ['3', '4']] With the latter, you preserve the query string data and you make your code **more interoperable with other scripts outside of PHP**. You simply can not do that with parse_str. The same is true with parse_url by the way. &gt; And really, 101 classes + interfaces that get bootstrapped on every request for the narrow use case of constructing/breaking down URIs? Well if you use an autoloader only the required classes will be loaded and again unless you use ALL the library modifiers you won't load 101 classes as you suggest. Ithink you may load less than half of them. If you main concern is autoloading then it means that your are already doing premature optimization. In PHP7 with the boost in performance this is really not an issue in 99% of the case. my 2cents
You might be right but again naming things is one of the hardest thing to do in programming :) 
I'm... I'm speechless.
I like this. This is my kind of crazy. 
No technical one. Sometimes it might make sense in terms of code style, but in your example it looks like stuff that was copy and pasted around.
FYI: in the demo, when editing CMS pages or layout boxes I'm getting 500 errors. When clicking on any product, I'm getting a 404.
http://i1354.photobucket.com/albums/q696/MalloryAG17/office-no.gif
Can we hook up somewhere in realtime ?
Looks really thorough, I like how you have the data thing already worked out. Will try this. 
I am so happy that this exists.
...Oh god.. what... 
More like `$insert-&gt;set('ip', 'INET_ATON(:foo)')-&gt;bindValue('foo' =&gt; '127.0.0.1')`. However, the idea of passing ?-values directly in set() is a good one; if you want to report an issue (or send a patch!) I'll do something about that. :-)
Agreed. It will take longer than 6 weeks if you have "little to no experience in building Web apps". Just hire someone. However, you could use a CMS if you insist on doing this yourself. WordPress could potentially do everything you asked, or something way more advanced like Drupal definitely could.
I was thinking "Why?", but the real question is "Why not?"
Can someone explain to me roughly how this is possible? I thought PHP couldn't dynamically update a page.
I like the comments : &gt; Niggers Are black what
That is the thought I had, also not a lawyer.
You could use websockets. But in this case I think it's a CLI app.
It runs from the command line, and displays graphics in ASCII art in your console.
I should have mentioned I need to develop it myself. And I'd preferably want to do it with PHP.
This is amazing. Good work!
Thanks for the feedback!
And those echoed white spaces means you can no longer send headers ... since the response has already started. Multiple &lt;?php is a bad practice in non-View PHP code.
I don't see any ROMs anywhere, just a `roms` folder (which is common in emulators).
Sounds like you committed to a contract you can't fulfill. Tell the person relying on you as soon as possible. The longer you assume you can "figure it out", the more pain they will feel.
no it can not because League Url requires PHP5.3 which League URI does not support
You were so preoccupied with whether or not you could that you didn't stop to think if you should.
I've come to like the echo tag for that. &lt;?= $adress ?&gt;&lt;br /&gt; &lt;?= $city ?&gt;, &lt;?= $state ?&gt; &lt;?= $zip ?&gt;
You are running a computer inside a computer inside a computer; of course it is slow.
It's a university project.. I'm just looking for advice.
Random Japanese word in the title -- Did I accidentally come to /r/ruby?
I'm on Freenode under the same name - usually in #phpmentoring. I'm also on EFnet in #php.doc and #php.pecl as FF.
Yes: /play/@id The id is accessed then along the id-key of the second parameter of the controller closure in f3.
Just as I thought :) Telling us what experience you have with PHP and what kind of advice you wish would be a good start :)
So i'm close: &gt; [redirects] &gt; GET|HEAD /playvid.php?@video = /play/@video gives me &gt; domain.com/play/video=N6kxakjd is there a way for me to remove the "video=" part?
Routing is not rewriting. Routing means that a virtual path receives an handler that creates the response. $f3-&gt;route('GET|HEAD /play/@id', function($f3, $params) { // do here what normally playvid.php would do and form a proper response. });
They're nowhere near old enough that they wouldn't be subject to copyright. But Nintendo *might* choose not to sue you.
If you have no experience it'll be short, did you even study basic things like form treatments with GET / POST, the MVC architecture ( or any other architecture ) or will you begin with nearly zero knowledge ? Edit: Also, do you know SQL ? If you don't know SQL this will be very hard because you'll have 2 things to learn
Well, with VT-X, technically I'm running an emulator in a computer, but you still have a point.
Interesting, Typicaly i stream progressive output as a single variable. But this comes from developing wordpress plugins. $output = ""; $output .= $city. ",". $street. ",". $postcode. ","; return $output; // or print.... But its interesting to see. I guess its all preference? unless theres some performance values for the different formats? 
I've not studied any MVC architecture, basically no experience. I have used MySQL and I know some basic SQL but nothing to the scale I imagine I will need. (I am willing to put in a lot of time to learn and I'm a fairly quick learner)
Yeah, the guy should probably be locked up, but it's really cool.
I'm not sure why you were not allowed a debugger. That particular point makes little sense.
This problem have been solved in PHP. Like 30 minutes ago lol
Clever girl...
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This reminds me of PHP 4.... I would say its 1/2 and 1/2
It's really the only syntax that makes PHP usable as a templating engine, however bad that is.
Typically lawyers send a "cease and desist" letter before pursuing legal action, so yeah.
Arrays are copied by value not by 'reference' like objects are. Theoretically you could do this: https://3v4l.org/u4JLQ if you don't need to support HHVM. Or probably use ArrayObjects. Or just stay clear of the SPL ...
Yeah. Unless the C API does things the HTTP API can't, why not use Guzzle and the HTTP API? The only argument I can thing is speed, but is that really an issue with home automation?
Jaw Drop, Slow Clap
Hash brown tight.
Some of the transactional email SaaS apps out there can process incoming mail and push it to your app. More than likely a lot easier to integrate than some custom email parsing solution. Although not guaranteed to be free, either. Some of those services: - https://www.mandrill.com - https://www.mailgun.com - https://postmarkapp.com/
I did not see that coming
You have to get the input from someplace, but you realllllllllllly need to be using some form of sanitization. Some places have switched to php://input for body content... to replace _POST so you can parse, POST, PUT, DELETE I think _GET has been mostly replaced with dynamic routes, but is still valid for some things.
It is better than good. But I'd like to criticize the fact it is mysql centric. A little note about the fact that you can not use some of postgres JSON operators if you have unnamed parameters can be useful (because they use the '?' character for those operators).
Why does "PH" make an "F" sound? Why is "c" sometimes pronounced like "k" or "s"? Inconsistencies and exceptions like this exist because the English language has roots in Latin, Greek, Germanic, etc. Such is also the case with PHP. Parts have been lifted from C, C++, Python, and many others over the years. In your example, we see influence from C.
I'd vote for a separate interface for each operator in truth, or at least group interfaces better, like `AdditionInterface` for `+` and `-`.
The baseline can be done. As /u/SkyRak3r mentioned, there's already projects like Amp and [Icicle](http://icicle.io) that accomplish this, but without language support for `async` and `await` keywords. I'd love to see this feature added, but there is a fair bit of work that needs to go into the engine first to fully support those keywords out of the box.
That's pretty damn impressive,teach me sempai....
You could also eventually add tutorials for other areas of PHP using the same open contributor model. Essentially becoming a wiki of sorts for PHP tutorials, but backed by git. I would contribute.
Which is a perfect example of why named params may be preferred. My only gripe with named params is that you can't use the same parameter in multiple places in the query. Really dumb implementation.
I've noticed it too - thought it was just me. I'm resorting to hitting ctrl-space to help nudge it along.
Yeah...thought it was just me, but you're quite right. Slow as balls. They keep fuckin shit up that used to work just fine. All I want is bug fixes right now.
Thank you. I was going to say.
Just because you can, doesn't mean you should. 
Same here, doing CTRL+Space like /u/dejan9393 but it's still annoying as fuck.
My bad for using .gitignore as a verb.
Yes. Jasny\MySQL is a dependency of one of my project, but I did not wrote this module. But question is still legit: why is it final *now*? (and not in php 5.*)
Why do you need to extend this class? I see no reason why it should be inherited. 
Also when pasting a snippet the correct colors come in way too late
I am not sure. You could check https://github.com/php/php-src/commits/master/ext/mysqli/mysqli.c I did a quick look, but could't find anything. It also seems that the exception class was final before 7.0 looking through the commit history
&gt; I don't know if I agree with you that 70% of all webdev is PHP...it certainly isn't. PHP powers over 70% of websites (closer to 80% actually), so that's probably where the figure comes from. Whether that's the same as "70% of all webdev" is another matter.
https://wiki.php.net/rfc/adopt-code-of-conduct Still under discussion.
http://docs.sonarqube.org/display/PLUG/PHP+Plugin create phpunit and phpunit coverage reports first: phpunit --coverage-clover reports/phpunit.coverage.xml --log-junit reports/phpunit.xml in project root add *sonar-project.properties* file: sonar.projectKey=portal sonar.projectName=Portal sonar.projectVersion=1.0 sonar.sources=src/ sonar.exclusions=src/Bundle/Tests/** sonar.tests=src/Bundle/Tests sonar.language=php sonar.sourceEncoding=UTF-8 sonar.php.coverage.reportPath=reports/phpunit.coverage.xml sonar.php.coverage.exclusions=src/Bundle/Controller/**,src/Bundle/DependencyInjection/*.php sonar.php.tests.reportPath=reports/phpunit.xml and run command sonerqube collector: sonar-runner 
I've only ever used PDO for MySQL but still find it superior. For example, with PDO there are many more fetching methods (class, object, key-value pairs). It's just more flexible. /u/colshrapnel posted [this link](https://phpdelusions.net/usab) which has more examples of where PDO is more flexible than mysqli.
On the other hand, Mysqli supports asynchronous queries and PDO does not. https://secure.php.net/manual/en/mysqli.reap-async-query.php
1. PDO is using mysqnd as well. 2. Beside being "robust and powerful", a library have to be also *usable.* And [here mysqli fails a big one](https://phpdelusions.net/usab). Makes PDO superior in terms of usability. Of course, if mysqli is used as a source for an abstraction, all it's inconveniences could be solved. 
For the most of the jobs, PDO is superior, as it does everything that average user needs. However, clean persistent connections and asynchronous queries are indeed things that you need to use mysqli for.
I have experience with mysql, mysqli and PDO, and I find PDO better than mysqli. mysql is obviously not a serious option anymore. 
Spot on.
Header on the GitHub page: &gt; Laravel Hackathon Starter - SUSUMU 進
Haha, I didn't notice that.
&gt; So the question is, what changed to make it get detected That's it! Thanks a lot to have clarified the question. +1 &gt; Or just a coincidence from some other changes in the engine, to make the behaviour be correct, but be a break from the past behaviour. I think too (now)
Can someone explain it to me? :(
you can fetch results as objects or associative arrays with mysqli functions as well. mysql/mysqli both have been doing that even before PDO was born.
I'm assuming its some kind of reference to the 'level' (distance from hardware) each language is; hence C is naked and interpreted languages are wearing more and more clothes. Not very accurate in my opinion.
Obviously, but PDO has many more fetch styles which makes it more flexible. See [this page](http://www.php.net/manual/en/pdo.constants.php) and look for all `PDO::FETCH_` constants. AFAIK, mysqli can't fetch into a predefined class, into a key-value pair (an array where one column is used as key) or into a preexisting object. You can even let PDO figure out the class name it should fetch into from a certain column (reflection-ish), or pass a function handle to PDO which it calls for every row so you can define some custom (anonymous) function.
Ok thanks! Do you know why it's final? Don't understand why one can't extends this exception
The refactoring tools are what puts it above and beyond any other editor for me. Being able to hit F6, move a class to a new namespace, and then have it automatically move the file and show you all the class references it's changing makes refactoring an order of magnitude easier. Most of it's other features you can get in Netbeans or Sublime, but the refactoring tools make it stand out.
&gt; Meme posts are prohibited. This includes things such as Advice Animals, Rage Comics and similar content. Read the rules and take your shitty reposted memes to /r/programmerhumor, please.
Wow. I'm not an expert with PDO but I've been working with php for years. In other words, I'm an old dog and those new newfangled tricks that people use are fine, but I'll stick to my tried and true, difficult, walking-up-hill-both-ways ways, thank you very much. ;) I learned something within 5 minutes of reading it. Clear explanations, to the point examples, and aimed at experienced developers. Nice work. Thanks for teaching me something new! 
How about native multithreading? I think this is exactly what PHP need
The idea is to close off classes to make them behave 'sensibly' in all cases. In this case the exception is using some internal state to create the exception, and so it is 'not safe' to extend the exception. That's the argument at least; it sounds like bollocks to me....I can't see any benefit in making exceptions be final, and it means that it's hard to provide more context to an exception, but still have it be handled by an exception handler that is expecting to handle the more generic exception.
Working now thanks, good job !
&gt; Why do you need to extend this class? One reason would be to abstract the external dependency away behind a framework exception to minimize the number of times you have to add try/catch blocks for `\mysqli_sql_exception`. The idea being that if the codebase ever migrated away from `mysql`, you'd have fewer points in the code to change. Another use would be to "enhance" the class by adding custom information along with the generic information. One example could be changing the formatting of the message to fit whatever logging/reporting mechanism is in place--maybe they use graylog and they want to change the message to GELF instead of a plain-text string (mind you, I'm pulling a contrived example out of thin air, so take it with a grain of salt). A final example could be that they need to augment the exception with specific environment/server information that would not normally be included in a stack trace. Regardless of the reason, I have your same sentiment with respect to making exception classes `final`. Developers should have the ability to do whatever they want with the exception. Whether what they do is right or wrong is a topic for other discussions. 
And /dev/null is the most scalable of all databases for web development. As /u/InfiniteRadius pointed out, it's a matter of the right tool for the right job. What has worked very well for you most likely won't work very well for everyone else, and this should always be taken into account when giving advice. There could very well be very specific reasons why OP is using the `mysqli` extension over `PDO` that are out of their control, and no matter how hard you rail for them to use `PDO`, they cannot, and you've wasted both your time and their time. Food for thought...
Rubbish article. Sublime isn't a PHP debugging tool. No mention of recent stuff like Blackfire or Zend Z-Ray.
I was surprised that "var_dump" wasn't mentioned as one tool :P
[A Link to Google's Cached Version](http://webcache.googleusercontent.com/search?q=cache%3Ahttp%3A%2F%2Fwww.phpgang.com%2Fbest-debugging-tools-in-php_3425.html&amp;oq=cache%3Ahttp%3A%2F%2Fwww.phpgang.com%2Fbest-debugging-tools-in-php_3425.html&amp;aqs=chrome..69i57j69i58.1663j0j7&amp;sourceid=chrome&amp;es_sm=0&amp;ie=UTF-8), so you can critique this subpar article without contributing to their revenue stream. EDIT: Okay, so this listicle consists of the following: 1. Netbeans, PHPStorm, and Zend IDEs, and does not actually specify *what* debugging capabilities they have 2. Sublime text, because syntax highlighting is debugging now 3. Webgrind, which hasn't been touched in 5 years 4. PHP_Dyn, "a debugging tool of PHP which is an extension of PHP." So fetch. 5. Xdebug and Whoops, **omg something actually relevant**
&gt; If you don't want to learn how to use the command line, don't become a developer. This.
Man, I sure do hate having to enter sequential commands into an interface in order for a computer system to interpret and execute them. Can't I just get back to programming?
So how can I fetch into a class using that? Maybe I'm missing something but I don't think you can. With PDO I can just fetch a whole table at once, as an array of objects (of a predefined class), which is just very convenient. You can do the same thing with mysqli but you'd need to manually loop over your results and manually instantiate your classes. For example, with PDO, I can do this: $result = $db-&gt;query("SELECT * FROM foobar")-&gt;fetchAll(PDO::FETCH_CLASS, "ClassName"); This will return an array of instances of ClassName. Whereas mysqli's *fetchAll()* can't do that. Quoted from [the documentation](https://secure.php.net/manual/en/mysqli-result.fetch-all.php): &gt; mysqli_result::fetch_all -- mysqli_fetch_all — Fetches all result rows as an associative array, a numeric array, or both This is just one example of course, there are much more examples that demonstrate how much more convenient and flexible PDO is compared to mysqli.
I've moved towards offering three ways to install projects (implemented in [random_compat](https://github.com/paragonie/random_compat#installing), but eventually will be covered by other projects too): 1. Composer, because it's the easiest (and, despite the objections I and others have raised in the past over technical concerns, /u/Seldaek is proactively trying to make it more secure). 2. PHP Archive (Phar) signed with an ECDSA key pair, which is in turn signed by my company's GPG key for trust verification. 3. Instructions for "download the release tarball and extract" users. The last two are morally equivalent. You can either `require "lib/my-project/autoloader.php";` or `require "lib/my-project.phar";` and get the same result. I've found that **most users are fine with Composer**, a handful will go with the tarball strategy, and only the paranoid opt for the GPG + signed Phar distribution. Since I work with appsec/crypto, I accommodate a tad bit more bikeshedding by privacy/security advocates than I expect anyone else to tolerate. I don't agree that Composer or command line tools are creating a barrier to entry. However, if anyone wants help shipping a signed .phar with their project for "drag n' drop deployment" users, feel free to grab and repurpose [our build script](https://github.com/paragonie/random_compat/blob/master/other/build_phar.php) and let me know if you need help using it.
ha ha ha ha ha oh wait ...
&gt; As soon as I store the very same URL in a variable [...] So my guess is that PHP doesn't understand that the URL is in fact a URL if stored as a string in a variabel. Could that be true? Very very unlikely. I'd check for typos in $url instead. Is it really what you expect it to be? Do you want it to literally contain those {{page: mainAlias}} sections with their curly-braces? 
to piggyback, so to speak, on what /u/Jake_Jeremy said, there was something I was once told by one of the PHP Architect guys, many years ago, that stuck with me ... Everyone should build a framework, no one should release it. At the time I had just taken my first PHP dev position after spending 10+ years in the hardware side of IT. I was tasked with taking on several projects from a dev that was no longer with the company, no documentation, etc.. A lot of the projects currently had, and going forward would have, many of the same features so I thought about using a framework. I had tried Codeigniter in the past but it never stuck and outside consultants for the company were pushing Symfony or Zend. I took a week long Zend course and none of it stuck. All I kept think is, this was overkill. Furthermore, I had really no context, or experience really, to apply the information to. I decided to build my own framework. I built the DB connection class(es), the templating engine, the routing, the error handling, the helper class(es) to do all the little things you take for granted ina framework, things like being able to call getIpAddr() and it gets the right one. Most of this stuff I had never seen before, never used composer or anything like that. It took a lot of research and time; I added to it as things were needed. I called it MVC and it behaved a lot like it but since I didn't really know what that truly meant at the time, it ended up being only about 70% of the way there. Over the next 2.5 years it went through 4 major revisions. The true test came when I was tasked with hiring other developers. I now had 13+ projects using my framework at the company plus I was handling all DevOps, etc.. I hired 2 other developers and within 1 or 2 days, with zero documentation, they got up to speed quickly using the framework, with little to no help from me; I was busy and working remotely by that point. As much as I enjoyed seeing that - it wasn't good enough for me. I started researching frameworks and came across one starting to gain some serious traction - Laravel; It was early version 4 at the time. Without telling anyone at the company, I spent about a month in my free time converting the companies flagship product to Laravel. Needless to say, the company was pissed at first when I deployed it without telling anyone but then quickly saw the benefits. Improved load times for starters. I also showed them how much quicker I could add new features, how quickly I could import libraries with all that composer wizardry. Even better, it made hiring easier b/c we could look for people who had knowledge of Symfony and/or Laravel, but we could also hire regular PHP folk and feel confident they could get up to speed even more quickly b/c of documentation and the community. The hidden benefit however was this, as well as being the point of this entire diatribe ... without realizing it - I converted a product that had millions of customers and two years of build time - in just about a month of free time. I was able to understand the framework much more easily because I had experience and context. As a further test, I took a new role with another company and was thrown into a ZF1 and Magento situation, and then later, a zf2 project and while I still absolutely loath Zend framework, I was able to get up to speed quickly and was able to implement stuff the "Zend" way. It was such a great learning experience that I agree, wholeheartedly, with anyone/everyone that says you should build your own framework. I'm a better PHP developer, and developer as whole, because of it.
[Maybe this computer would be more appropriate for him](http://www.kohls.com/product/prd-1918347/fisher-price-smart-stages-laptop.jsp?ci_mcc=ci&amp;utm_campaign=PRESCHOOL%20TOYS&amp;utm_medium=CSE&amp;utm_source=google&amp;utm_product=95587526&amp;CID=shopping15&amp;ci_src=17588969&amp;ci_sku=95587526&amp;gclid=Cj0KEQiAxrW2BRCFidKbqKyq1YEBEiQAnMDWxotlnDTMMekQFgReCuQBLoWUizgr_a-HpbuutmAkIFYaAh8C8P8HAQ&amp;gclsrc=aw.ds&amp;dclid=CLK7su3qkMsCFYpwMAodcMoCyw)
PHP used to be the only language unique in that. It's now just catching up. Although programming certainly seems to have a higher barrier to entry in general.
If these haters really are big bad sysadmins that have been in the business for 10 years then they've probably had to work with gems, pip, CPAN modules, PEAR modules, and the like. As far as their jobs go, Composer isn't that much different. I don't get the hate. My projects use composer for development, composer --install for staging, but sync to production w/o calling composer. I've also packaged software with /vendor so users don't have to fiddle in the CLI if they don't want to. It's a flexible system. I'm not sure what their gripe is other than "I don't know this thing, so now I think it's a bad thing."
FirePHP has been defunct for a long time
The first company I worked at, there was a nasty joke about one of the less skilled programmers: Q: "How do you double John's productivity?" A: "Give him a second hammer." *imitate dual-wielded hammers hitting keyboard here* 
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required). You may also join us on at #phpmentoring on Freenode IRC for community and mentoring discussions.
I strongly recommend using CURL or any other library for accessing remote files. Although the file_ functions can work with remote things....they are not so good.
What an insane issue to post. EVEN if you agree with his point that beginners are the majority and you shouldn't make... them... use the command line... because it's... hard.. or something? and EVEN if you ignore than some of the most popular IDEs (e.g. PHPStorm) actually put a UI on composer. and EVEN if you actually agree that having to use the command line is more difficult than having to manually fuck about with dependencies. What, precisely, does he expect composer to do about it? Just give up? "Sorry guys, project is over. Everyone go back to PEAR." People use it because it works. 
i believe it was sarcasm
{{page: mainAlias}} has been an insert tag stemming from my CMS. You were absolutely right that this may be the problem. They are getting rendered after PHP of course. I had to replaces these and now it works perfectly! Thanks alot buddy!
[removed]
Wix is a demon spawned from hell, masquerading as an install builder. It's unfortunate that the website company chose the same name.
I'm in the same boat. My first computer was DOS then Win3.1, there was no getting around using the command line. You used it or you died.
[removed]
I know you're a troll and don't actually care what I have to say, but let me be clear. I am fluent in PHP, Ruby, Python, Javascript, and Rust. I prefer to use PHP for web backends because I feel it's the best tool for the job. It is: - Mature - Stable - Has many stable, full-featured frameworks and ORMs - Faster than any other interpreted language (to my knowledge--definitely faster than Ruby, Python, or Node according to numerous benchmarks) - Easy to deploy And your reasons for hating PHP are inevitably: - Hating PHP is cool - Everyone else does it
&gt; So much so that I'm having trouble putting it into words [You're not alone](https://twitter.com/briandavidearp/status/481304548305555456) This is how extreme misinformation spreads so easily btw, such as with the assault on encryption by conservative pundits and fascist police state supporters.
[**@briandavidearp**](https://twitter.com/briandavidearp/) &gt; [2014-06-24 05:15 UTC](https://twitter.com/briandavidearp/status/481304548305555456) &gt; The amount of energy necessary to refute bullshit ... &gt;[[Attached pic]](http://pbs.twimg.com/media/Bq3v771IQAAoY__.jpg) [[Imgur rehost]](http://i.imgur.com/woz7lYw.jpg) ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Laravel didn't exist a few years ago. Should they not have gone forward?
No shit, right? Or unzipping some download which never unzips correctly, because sometimes it unzips into a folder named after itself rather than just unzipping the contents into the empty folder you told them to unzip to, prompting you to move them out of that redundant folder... And beyond the fact that composer gives you a standard interface for installing that code, it pretty much ALSO guarantees you have a standard interface for importing that code. While it's not enforced, you can be pretty certain you can just `use &lt;fqn&gt;` and you're good to go.
Wait.... is that thread REALLY the GENTOO team telling the Composer team to fuck off because the people who use composer are no longer providing them with ZIP files so they can maintain their own custom competitor Portage? That's really what that thread is, right? They really are essentially making the argument that their concerns as package maintainers for Gentoo is more important to how PHP applications are packaged and distributed than PHP devs? Well they can go fuck themselves.
This is the most entertaining thing I have read all day. Thanks OP!
What does [rendering a mandelbrot](https://www.zend.com/en/resources/php7_infographic) set have to do with web development? I think the biggest improvement PHP has yet to do, is to [not kill the chef](https://andrewcarteruk.github.io/slides/breaking-boundaries-with-fastcgi/), like every other modern web framework does.
&gt;Should I be looking into other languages for web development? Yes. &gt;I know the limitations of the language and there are applications that I would not dare do with PHP. Are you sure? Or is your confidence just like [this guy?](https://www.reddit.com/r/PHP/comments/41bm7j/new_rfc_allow_specifying_keys_in_list/cz1qnca)
Why exactly?
Though I still continue to do web-dev in python :P
[See this](https://www.reddit.com/r/PHP/comments/41bm7j/new_rfc_allow_specifying_keys_in_list/cz1qnca)
Just one small point: languages aren't "fast", implementations are. CPython (from what I've seen) is consistently slower than Zend, but Pypy runs circles around it after the JIT warms up.
Stop the presses! Some nobody with a GitHub account created a few days ago thinks CLI is unsuitable for beginners!
Seriously, if you have trouble with the command line, programming probably isn't for you.
All these sysadminswho are complaining are making the same mistake: using Composer in production. You use Composer during *development* and *only* during development. After that, you simply deploy the `vendor` directory. No Composer required for that. If you leave the vendor directory outside the doc root, the security risks are pretty much gone. Those guys need to either hire a good devops person to clue them in on this, or they need to hire PHP developers who know how to use Composer and about web security, so they will stop nagging for being allowed to use Composer in production. Composer, like Git, has no place on a production server so all arguments anyone has against running Composer, because it's unfit for use on production servers are, in my view, invalid by definition.
He's a troll. You can ignore him.
&gt; Should I be looking into other languages for web development? If you want to challenge yourself and be a better programmer overall, yes. If you don't care about learning new paradigms or how other languages do things, then stick with PHP.
&gt; A raw project should not include dependencies and it does not as you can see from Drush! Please go and take a look: https://github.com/drush-ops/drush/releases If you download Source Code all you get is a broken package. You are breaking the source code with developers using composer! I've never downloaded a C program source code that worked out of the box either that had dependencies, before installing them.
Additionally, if you want, Composer autoloader generates a classmap that is essentially a huge list of requires, so I'm not sure what the problem is.
[Google, my only weakness!](http://lmgtfy.com/?q=php+banking+system) -- /u/phpguy2
How do you keep a server with dozens of PHP apps updated?
Don't be an apologetic php developer. they hate us cuz they anus 
dot dot dot lol
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; I think killing the chef is one of the key reasons why PHP projects are often the fastest to reach completion and out-compete so many other projects in other languages. That doesn't make sense. Killing the chef after every request implies, that the whole framework has to be bootstrapped for each and every single new request. I can't see how that is a good thing. Not killing the chef is very likely *improving* the performance a lot.
Just because you don't know how to setup Apache or nginx doesn't mean you can't develop PHP. Certainly a mid level or sr level PHP dev ought to know how to do that but a jr level one? A jr level dev might find Vagrant similarly intimidating as well. If some up and coming PHP dev wants to try, as a programming exercise, to do something for which every tutorial recommends a particular composer library, what's he to do? "aw crap, now I have to install figure out how to install ubuntu, apache, setup virtual hosts, php, mysql, grants on mysql, etc". Sure, apt-get makes it mostly easy, but I think it's easy for more experienced devs to take for granted the years of experience that they're drawing upon to do these things.
&gt; Well, in Python functions and classes are objects of the highest order. Meaning you can theoretically do all the things with them that you can do with normal objects, like accessing attributes and calling methods on them. This is also true in PHP. :) In PHP 'classes' generally refers to the definitions and declarations, while 'objects' refers to the individual instances. In PHP, a class' methods and properties may only be accessed statically if they are declared that way, and otherwise must be accessed from the object instead. 'public', 'private', and 'protected' allow the class designer to control the way in which the object may be used, and interfaces, traits, and parent classes can help the developer using the classes to enforce their own safety as well. PHP also supports private constructors and final classes as well. In fact... &gt; While I'm at it, another thing I really like in Python: The property decorator (which is a descriptor). Getting rid of getter/setter methods forever (I think C# has something similar and other languages probably too). PHP has better support for using getters/setters than Python does, as making a property private will force you to use the setter, and not allow someone to extend the class and then expose the property that way. It does not allow you to generate the getters/setters using a decorator, although that is something the internals team *wants* to do. The last time it was proposed however, there were concerns that the internal implementation of it was not high enough quality. I would expect to see getter/setter decorators in 7.1 personally. &gt; Also: Whitespaces. I think PHP should get rid of braces and use indentation as syntax for block scope Respectfully, I disagree. :) I personally find it much easier as a developer to mentally keep track of the code using the braces and then coding using the PSR-2 standard. But for those who do want to use whitespace this way, Python is extremely capable.
hmm... when you say "know" Jimmy... what exactly do you mean?
You are spot on. People say Php is faster than Python. What they miss is that Python has a whole lot more powerful dynamic features than Php. Which is part of what makes it slow. (for ex, a lot of looking up has to be done to make a function call). Php on the other hand, due to the lack of dynamic features as you listed, fails short in pros of being a dynamic language, but has all the cons of being a dynamic language (and a lot more, but let us not go there). So it is actually a lose lose situation for Php. You get very few benefits of being dynamic and you get all the flaws. 
That's a non-argument. Basically just an extremely weak appeal to authority. If you want to convince people you are right, you have to find a way to prove that it's not possible to write clean, stable, secure, maintainable, readable, performant, comprehensible code in PHP -OR- that doing so takes so much longer in PHP than other languages that it justifies the statement that there are better tools for the job. If your argument is "you shouldn't use PHP", then you need to come up with actual reasons and proof as to why. Until then, if your code logic is as sloppy as your argument logic is, you have no ground from which to criticize any language or any developer of any language...
Or it implies that using a massive framework that has to be setup each time isn't good for a language like PHP but can still be made fast enough that it doesn't matter. PHP isn't a persistent language and has never been. It was built from the ground up to not be, and the fact that people keep trying to program it like it's Java has always seemed silly to me. One of the main reasons it can be so fast is the lack of persistence. 
I was thinking the exact same thing. If you can't grasp command line, how will you grasp programming?
&gt; This is also true in PHP. :) No. it is not. In Php, how will you pass a class (not an instance) to a function so that the function can create an instance of the passed class? you have to either use the string name of the class or use Reflection API. In other words, if it was true for Php, [this](https://3v4l.org/gGl1s) should have worked as [it works](https://repl.it/Bpyo/1) in Python..
Documentation (this is what important) and promotion. And that's all.
[removed]
Serious question: why is sharing hosting (still?) relevant at all these days? How many projects are even testing against the constraints that tend to come with shared hosting? You can get a VPS for $5/month, and there are providers that offer one-click installations on top of that. Nearly everyone that's migrated off of it has done so for more or less the same reasons, and those that haven't are typically using it in a "FTP my files to X" way. Composer works perfectly fine with FTP - just run it locally first. Any dependency that is looking for specific PHP extensions won't validate in the same way locally as on the server, but seeing as you have no control over that with a shared host, it's basically irrelevant. I can kind of agree with the "this is annoying unnecessary step" argument, but it takes literally one command to execute that step. And it's the same command for every project.
Oh, so then you were more focused on being pedantic than on actually contributing useful things. You should have led with that. Edit: and for the record, it IS true in PHP for everything defined as static, the ONLY difference is that PHP demands that the programmer be explicit about which way they would like to use the class' properties and methods.
Here's a great article, take a look [https://knpuniversity.com/blog/AppBundle](https://knpuniversity.com/blog/AppBundle). It's only a matter of convention. Using many bundles allows us to update only desirable parts of application at a time, release patches/fixes for particular bundle (all bundles will be installed/updated through composer, here's a short video how it works https://www.youtube.com/watch?v=3_254lnGZKk). We must have a possibility to use specific bundles in other projects. Of course there are dependencies between bundles but it's not as hard as it looks like to maintain them. For me there is a small difference between one or many bundles as long as the structure of the application is logical.
This seems like the issue. OP comes off like he's never used another language.
&gt; If you want to convince people that they should not drink and drive then you have to find a way to prove that it is not possible to be drunk and reach the intended destination safely, without killing anyone. Or reaching there takes so much longer than if you were sober. Get it? Yep. Another non-argument that has PRECISELY nothing to do with either backing up your original point, or dismantling mine. &gt; Also appeal to authority is only fallacious, when an authority is cited on a topic outside their area of expertise...which is not the case here... Nope. Because it's still a matter of opinion, and one which is not universally true. So. Once again. Convince me I shouldn't use PHP. You haven't even presented an argument for me to disagree or agree with yet. The entire *format* of your reasoning is presently nonsense.
It's a known fact. And Taylor has worked on making it better. The problem is if there is a part not matter people, then lack of documentation is going to be unnoticed. 
&gt; Oh, so then you were more focused on being pedantic than on actually contributing useful things. Yea, just saying that you were wrong.
Someone show him docker.
&gt;* list comprehensions: `mylist = [n**2 for n in somethingelse if n % 2 == 0]` &gt;* dict comprehensions: `mydict = {k: v**2 for k, v in somethingelse if v % 2 == 0}` &gt;* set comprehensions: `myset = {n**2 for n in somethingelse if n % 2 == 0}` &gt;* generator expressions: `mygen = (n**2 for n in somethingelse if n % 2 == 0)` I've always thought those harder to read than a more verbose variant with `map` and `filter`-type functions (although those could use a lot of work), but there's definitely a lot of people that love the "elegance" of those one-liners. Of the remaining points, I totally agree with kwargs and sets (and the over-generalization of arrays). Though I'd say re:kwargs that by the time you need them, your method is probably doing too much. Where it's necessary, my preference is actually what Swift/ObjC give you, although it's a little different. The error handling and type systems were massively overhauled with PHP7 (I think the type system in PHP7 is *vastly superior* to what Python offers; I also felt that PHP5's offering was *marginally superior* so take that with a grain of salt). Unicode doesn't seem to be a big issue in my day-to-day, but there's room for improvement.
This is the most magical way to justify not having script-only files I've ever seen. An upvote and tip of the hat to you.
I run a script that creates a new instance, gets the latest version of each of the apps, installs them and the dependencies (using the composer lock file to make sure the same versions of dependencies are installed as the smoke tests were run against), runs some final tests, and then moves the IP address from the old server to the new one, and after a while terminate the old server.
fyi if the zip always has one extra level of directory in there: tar -xf ${zipName} -C $targetDir --strip-components=1 
Only hesitating because I just know the next patch will fix it ;).
I actually didn't know about ctrl-space. I used it a lot today. I'm moving back to 10 tonight on my home environment.
I never could get the hang of sourcetree or any other git GUI tools. The CLI makes more sense to me.
This is a bit odd to me looking from a Python perspective. pip, virtualenv and setuptools for all their quirks are absolutely deployed to production servers. So I'd probably be one of the folks calling composer from my build server.
Loves my PHP. And with 5.6 (or even soon switching to 7.0) its just awesome. Fastest way to get safely from A to B and that is what matters 95% of the time.
&gt; Basically, bundling wastes space and is a huge security vulnerability. Well for desktop(ish) software this is true. This is why most C and C++ libs used are dynamically linked instead of statically linked.
God forbid people actually read code these days. 
I didn't get 20 comments into this thread before I forgot I was on /r/php and began to believe I was in r/programming
The 2/3 split is annoying, but has little to do with web development. AFAIK Django and Flask (and most libraries nowadays) both support both 2 and 3. I'd also take what I say with a grain of salt because I have less web experience with Python than I do with PHP or Ruby. That being said, here are the primary advantages I see of PHP over Python for web dev: - With PHP, deployments can in many cases be updated with zero downtime, because of the shared-nothing environment. With Python, the application needs to be restarted to deploy changes. - Managing application dependencies is very easy in PHP with Composer--however it's becoming easier in Python as well with virtualenv. - PHP 7 is faster and can handle more requests per second than Python (although as mentioned in another comment, Pypy is very fast, although some packages need special install steps to work with Pypy). Of course these aren't make-or-break differences. PHP and Python are both great languages and plenty of sites on the web are written in each. However, although I feel that PHP has a small advantage over Python on the web, data science is where Python really shines because of its vast collection of libraries.
this is retarded. when I learned runy, I learned from rails, that came from a command line .... it doesn't make it harder to leanr, doesn't make it like a "gated" community. 
Yikes
interesting... I didn't realize it was the best framework. I wouldn't class it as the best by a long-shot. No offence to Taylor.
The way that second page you linked is set up makes me quite mad.
The performance improvement between chef killing and not highly depends upon the use case. If you're loading a web page from SQL and caching the requests, not so much. If you're relying upon real-time dynamic data from Redis or something, then having everything in-memory running would be a major performance improvement. However, for most use-cases, it isn't necessary, as shown by pretty much half the internet and its usage of PHP CMS systems.
Edit: Whoops, this post was for Paypal not Stripe. Not sure if you're on the framework or not, but [Laravel's Cashier](https://laravel.com/docs/5.2/billing) is built for Stripe and handles subscriptions.
Check out [Omnipay](http://omnipay.thephpleague.com/) by The PHP League. I believe it has a Paypal driver.
&gt; I don't know that using a Vagrant box is more intimidating than FTPing into a shared server. Especially since those Windows folks will run into the joys of cross-platform PHP development. idk. FTP clients are a dime a dozen. Just give someone an FTP address and username and password and more often than not it'll take them to their virtualhost's DocumentRoot. With Vagrant... well you have to install VirtualBox, Vagrant and then decide upon an image. I'd do laravel/homestead, but I've been around for a while and I have experience to draw upon that a jr lvl dev wouldn't. &gt; Install Composer, read the docs for a bit and run "composer require vendor/package". Which will be exactly what the documentation for the library in question will spell out for them. Which doesn't work out so well if you don't have shell access or if you have paralyzing fear of the CLI. &gt; MySQL: we're talking about an up and coming PHP dev who wants to try a programming exercise with Composer. Not even going to address this one. Because no jr lvl dev has been able to log into CPanel and pull up phpMyAdmin. &gt; And instead, you'd have junior and up-and-coming PHP developers develop on an internet-facing server, running technology they know nothing about? I think that's a little irresponsible, having been a junior, up-and-coming PHP developer myself. I agree. I'm not saying that Composer's use of CLI is a bad thing but that doesn't mean I can't empathize with those who are annoyed by it. I can totally understand how some people could be inconvenienced by it but the advantages outweigh the disadvantages. Devs wouldn't have embraced it as they have if they didn't. And if, as a dev, it forces you to embrace things you're not comfortable with then good! That's how you grow - that's how you become a better dev. Through out my many PHP jobs I've been forced to take on technologies I didn't want to utilize but when forced to use them I've often grown to love them and, overall, I'm a better dev for it. Composer is not a bad thing. It's a good thing. But that doesn't mean I can't empathize with people.
&gt; Serious question: why is sharing hosting (still?) relevant at all these days? How many projects are even testing against the constraints that tend to come with shared hosting? Wordpress, I imagine. And probably Drupal and Joomla! as well. dreamhost.com, inmotionhosting.com, etc, all seem to be alive and well. Probably hosting websites maintained by some high school kid or something for whom the title jr php dev is probably over generous.
&gt; I Honestly believe the reason PHP gets bashed on it's because new comers that can't program well try it out and write horrible code with it, but that is just my opinion. What are your thoughts? Because there's many bad designed in PHP. Like he said. PHP have many security flaws ever existed. Here's my proof -&gt; https://en.wikipedia.org/wiki/PHP#Security
Yeah, hiring people with character who have standards is bad for business. Why would you want to hire someone who can think?
Interesting. Was surprised to hear this. Shook his hand not too long ago at Zendcon.
That is fine for internal products but becomes a pain when you are using third-party apps on more than a handful of machines. A sysadmin doesn't want to learn how to use the different package managers for PHP, Phython, Node, C#, and Java. They should just be able to update from their OSes package manager. Even for internal apps using tools like composer can become a major issue if the external package repos become inaccessible. Some people don't cache packages and build from external packages every time and subsequently ran into trouble with Githubs recent downtime.
I didn't know about it and I've been using composer since the very first symfony2 came out :/ Thanks for letting me know. This seems like the exact solution they are looking for.
Mailgun still allows 10,000 free monthly sends
Hey thanks, will check them out :)
From personal experience I can tell you she's crazy productive, and her impact on FB has been (in my opinion) worth the investment. Even when taking into account her exuberant character. There comes a time when devs of her calibre have reached the potential for innovation within a particular setting. You soon have to start blending in, being part of the furniture. Sara is definitely the type to move on, push new boundaries, and continue pushing novel advances. I can't speak for her true motives, but I strongly suspect she felt a stagnation. I for one wish her all the very best and thank her for the OSS contributions she's made. 
Andi leaves Zend, Sara leaves Facebook. COINCIDENCE? Probably, but I want to think not.
The fact that "My-SQL" is in the title worries me. However, I don't own the book, nor have I ever read it so I can't comment on its contents. There are plenty of good free resources for learning modern PHP. Starting with [PHP101 - For the absolute beginner](http://ss23.github.io/php-tutorial/) and continuing with [PHP: The Right Way](http://www.phptherightway.com/) once you have a grasp on the syntax and some basic programming concepts.
The intended metaphor, back then, was "the waitress picks food in the fridge". The thing was supposed to be stateless, ie. HATEOAS. So the real question is not why PHP kills the chef, but: was it advisable to put a chef in the fridge?
Yeah I was very disappointed with the news too. I was an advocate of Mandrill up to this point.
let's try not to use blade instead (twig is way better)
Trying a language that works quite differently can force you to learn a new programming style. After using Haskell for a bit, I use functional programming techniques a lot more. I'd recommend learning something dissimilar from what you know: * PHP, JS, Python, Ruby and so on are quite similar. * C, C++, Rust, Pascal and to some extent Go are more low-level. * Java and C# are somewhere between PHP and C++, but the programming experience isn't different enough from PHP for me to recommend you try them. PHP's object model is basically copied from Java's. * Smalltalk is a world where everything is an object, and all code lives inside a program whose state can be saved. * Lisp is its own thing, functional with weird syntax and code that you manipulate as data. * Haskell and the ML family are another thing, functional programming languages, with Haskell being particularly interesting as it is pure (no side effects in a function) and lazy (values aren't computed until they're needed). * Assembly is ultra-low-level. * Forth and other stack-based languages are fun, too: a world where there is virtually no syntax, and everything operates on a single data structure. A world where any part of any function can be refactored into a separate function with merely copy and paste.
Laravel docs are bad. They require so much more work, that it's not possible to fix it any time soon. And the fact, that you have to google, to get the link to Laravel's API reference says a lot. P.S. Just compare the Yii's "Definitive Guide" + API Reference vs what Laravel has. Day and night to be honest.
They are on the way. Will be release in a few months.
I would digress on the routing aspect. In Yii just just uncomment default routing and any combination of /controller /controller/action /controller/action/id works for any controller you have in the application. You do not need to define any routes manually, and your routing is just 3 damn lines. Even in a sizable app, if it's pretty straight forward, it's about 7 to 10 lines that define routing for the whole application. So I would not say that Laravel style routing is more simple, it is simple while it's a few pages. But when you go for a sizable CRUD style application (any CRM/internal system/backend for the project) and sizable front-end projects with lots of pages - route file becomes quite a mess.
Not usually. CGI is uncommon now.
[removed]
It's not sarcasm. Unless you're actually designing a class to be extendable, you don't want it to be extended.
To be fair, thats what they said about PHP 10 years ago and look at it now.
[removed]
You might have missed my point: the fridge is not another metaphor for an application, it's whatever stores your pages, out of PHP--presumably the filesystem. The waitress picks it from there, adds sauce/dressing ie. fetches a few dynamic resources from DB or elsewhere, and voilà, ready to serve. At first, webpages where just plain documents, html files and likes. Quickly, dynamic pages became necessary, but there were just seen as static documents with some blank fields filled with live data. As websites got more dynamic/complex, and later with webapps, the stateless paradigm became a thing of the past, and we got the impedence mismatch between stateless/fridge/no-need-no-chef and stateful/chef/why-kill-him-ffs.
Woha! Pretty neat, but it isn't a "tank for crush a nut" tool? :D
&gt;Why are there so many people hating on it like this guy? That guy has [quit the industry](https://eev.ee/blog/2015/06/09/i-quit-the-tech-industry/) recently. 
Looks at post history. Commission based advertising or something? All your posts on reddit are promoting books. 
Not once in my life have I built an application where all routes were that basic and simplistic. Maybe if you don't care about information architecture or SEO that incredibly narrow format is fine. But when you do need to start customizing routes, Yii has a terrible mental model for it and even more confusing documentation. Also, nothing in Laravel stops you from creating the same dynamic default route
But if you want them to be sent from your domain and not @gmail.com it will cost you $5/month
This morning, I've looked through some alternatives and I ended up creating an account at MailGun. Works really nice so far.
I haven't found a nice library that handles subscriptions in combination with f.e. Omnipay. Any suggestions are welcome!
Thanks for the link. But it looks for me that the focus are writing xml. Not reading. Or is this wrong?
I don't think so, but you're right, the wording is a little off. There are nice new features, like css-like selectors to retrieve elements.
i hire on brilliance not communication. those basement nerds need jobs too bro.
cause then you can't manipulate them into working 120 hours a week and make them think they are still a drag on the company. :D
[removed]
[removed]
the way i see it rpm's are installer packages, which is not related to what composer does, and it shouldn't be either. a full php application includes the vendor directory, the moment you pull it out and have it shared among multiple projects, you start having the trouble of compatibility issues of the applications to eachother (composer doesn't allow for the same package in several versions to be installed, neither in vendor nor in global installed packages (and it shouldn't allow those)). 
If you are just reading, what is wrong with using SimpleXML? It is, well, simple. And I 110% agree with you on sabre/xml.
The assumption there is that the dependency information that composer uses was not translated into the RPM. I won't speak for the other system packaging solutions, but multiversioning is very much possible in an RPM context, both in establishing the dependency and in installing them. And frankly, a PHP application that uses composer to pull things in is likely to pull in *the same thing*, the difference is that you'd have multiple copies everywhere of the same code, as opposed to one location that everything pulls from. Composer's handling of packages is much simpler than RPM's, and easily maps to an RPM context. Also, the rapid adoption of semantic versioning in the PHP world is helping things, because it makes it easier to define compatible versions of software.
Yeah I decided on MailGun until I saw the HackerNews discussion: https://news.ycombinator.com/item?id=11170713 Check out this link from the comments: https://www.inboxtrail.com/compare Perhaps will be moving to SendGrid
[removed]
I counted Etsy, Github, Apple, Google, and AOL.. 
What is going on here
BrainTree only supports Paypal in a [limited amount of countries](https://developers.braintreepayments.com/guides/paypal/vault/javascript/v2).
An article on PHP error handling that doesn't mention exceptions?
What is your PHP version? Composer kinda attempts to stop you from running on stacks that don't support SSL peer validation (for good reasons).
 PHP 5.5.30 (cli) (built: Oct 3 2015 23:46:56) Copyright (c) 1997-2015 The PHP Group Zend Engine v2.5.0, Copyright (c) 1998-2015 Zend Technologies with Xdebug v2.3.3, Copyright (c) 2002-2015, by Derick Rethans 
Crap I misread the post last night I guess. Sorry.
No affiliate or anyhow but as someone who knows a little bit about these email providers, i believe sparkpost is a better alternative than mandrill is. You also get 10k free emails/month and the inbox delivery rate is crazy, way better than others.
Because Sara is a big deal. She has forgotten more about the internals of PHP than I will ever know.
Any CRUD like application for backend with 40-50 controllers resulting in some 400-500 actions. So, you wana tell me that a route file with up to 500 entries is fine? I can tell you the bootstrap alone is gona kill performance to shit. I'm not saying that Laravel's approach is bad for everything, but for bigger serious applications you really do not want to define every route, especially when you have a clear mapping from the URL to Controller/Action.
isn't that what /r/lolphp is for?
This time, with semi-broken multiplayer! :) https://www.youtube.com/watch?v=vfQ4bXN3oFk also, if anyone knows how handle binary in PHP better than I can.... please help me. :sob:
Sadly, the announcement is vague: &gt; My new chapter affords me the opportunity to focus more of my time on product, something I love and am passionate about.
Rails...
I'm aware, but integrating recurring payments with Paypal's SDK is so unnecessarily complicated that I'd like to find a Stripe-esque way of integrating subscription payments with Paypal. It's 2016 and working with most payment processors is (or should be) a breeze.
HHVM-ng-icu 9. Ya gotta skip them version numbers. :)
[**@phpstorm**](https://twitter.com/phpstorm/) &gt; [2016-02-25 14:13 UTC](https://twitter.com/phpstorm/status/702858914216452096) &gt; @ACoders Please vote for this issue (if you haven't yet) to move it in a queue. Bugs are fixed based on vote weight and current priorities ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Eh. Your coworkers need to be able to communicate efficiently no matter what position they are in. 
If you're looking at SendGrid you should look at SparkPost too. We chose SparkPost at Circonus for all our transactional mail delivery. The reporting is very good and their deliverability is simply better than any other provider.
+1 for just doing `$foo = Foo(...$args)` instead of `$foo = new Foo(...$args);`. But as you said, it probably results in too much change to system. That said, I think the author has experienced architecture problems, not language feature problems. I would not be in favor of this RFC.
Yes https://github.com/Javanile/SchemaDB
I know we argue about a certain range of topics Paul, but I appreciate this comment. Respect.
SchemaDB is ready for composer try with your hand and give me more feedback
Agreed :)
Since you're on AWS already, why not SES?
EVERYTHING IS ACCESSIBLE! I never really learned true OOP.. ^icamefromjavascript ^^shhhh ^^^toomuchwork ^^^^jk
Notice, this is not my video.
Does that mean I can use PHP to write mods?
Not too sure how you do, but usually pack() and unpack() are good for binary data.
Very very cool sir. Gj
It really surprised me too. There's quite a few missing features that I need to implement.. but even for a functional demo, it's kinda crazy. EDIT: Four clients connected simultaneously resulted in 130MB usage and 3% CPU usage. Granted, I'm running dual 6 core xeons @ 2.4ghz.. but still. PHP is really interesting.
HUGE inspiration. That guy/project is 1,000,000x better than I will ever be.
&gt; Improved traits support including code completion of classes inside traits Sweeeet. Maybe I'll try this out now.
Holy shit. I talked about this being a possibility a while back and got mocked to no end. Someone actually built it?! This is beautiful. 
Ill put money on Etsy. 
Onsite and it's full-time.
&gt; +1 for just doing $foo = Foo(...$args) instead of $foo = new Foo(...$args);. But as you said, it probably results in too much change to system. As before - that throws away type information for all parameters that are needed by the constructor. That makes it really not a great solution. &gt; That said, I think the author has experienced architecture problems, I don't think this is the case. We've spoken before elsewhere about DIC matters....did I give you the impression that I'm bit of an idiot? If not, then maybe if I'm proposing an RFC and saying that it helps solves problems when using DIC, and you don't understand why the solution is required, why not ask me to explain the problem, rather than calling me stupid on Reddit? 
Don't get me wrong, i like an IDE more if it can give me buttons to press. But yeah. Wat?
The Mountain is there to be climbed.
&gt; That said, I think the author has experienced architecture problems, Did you mean that as a compliment?
A thousand times, yes.
That article talks as if all the big companies using PHP he mentioned all have monolithic apps backing their services. I worked for one of the mentioned and know for certain that it's not the case. "Microservices" is not a language feature. It's an architecture, focusing on composition of simple and small services. It is language and protocol agnostic. That article is horrible. 
Firstly, Laravel has Controller routers. So that goes a long way to fixing that "problem". Though it's not a problem in reality. Having to read through all your controller code to know what routes you have available is a terrible idea. One of the main reasons I moved away from CodeIgniter.
&gt; PHP got 99 problems but foreach ain't one. lol
You can mimic Async using something like ReactPHP. Threading in a shared-nothing environment can be much harder.
If mere sarcasm is enough to warrant the label "toxic" then I highly suggest you escape while you still can.
I haven't looked at minecraft modding in YEARS but when I did I was under the impression that modding that game wasn't officially supported and required some pretty serious hacks...if yours supports it natively I'm picking it up and giving it a go.
It's not client-sided mods, that still unfortunately requires Java and fun. For this, since the server is implemented from scratch, server-sided plugins/mods are up for grabs.
Now imagine if you actually learned a bit...
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Your comment didnt help much
I was on the EAP until last night and the auto-complete was slow at best. I downgraded to 10.3 and all problems have been resolved.. but 11 officially dropped and I'm reluctant to upgrade.
Well the problem with these magic methods is that they are much slower than any other methods. This benchmark shows that __call is about 3 times slower than a native PHP method: http://www.garfieldtech.com/blog/benchmarking-magic So yeah, monkey patching through __call is a terrible idea, unless you want your website to perform poorly. But of course, this is not to say that monkey patching itself is a good idea either, its a controversial topic still. 
Yes exceptions are the initial part of error handling and also help us to stop our program from breaking.
You get a star, because this is awesome.
I'm going to take any article that says whether it's worth it or not to learn anything beyond language X because of Y and Z reasons with a grain of salt. 
You are right, an instance is needed before "invoking"
That is valid for any other implementation though. This is the reason we try move dead-end jobs to be microservices, things that require no immediate response. For things that require it, try to float it to the surface of your http api. Thanks for raising the point. 
On mobile so I can't find it easily sorry, but there was an article today from Uber about their geofencing microservive written in Go. A lot of their stack is apparently PHP so it's interesting to hear about it from their perspective. 
MinecraPHPt?
[removed]
Keep it simple with something like PHPMS. PHP Minecraft Server :-)
https://eng.uber.com/go-geofence/ is the article but it doesn't mention PHP
Thanks! No it doesn't but if you look at Uber job archives they ask for PHP developers, so I'm making the rather broad assumption that a lot of their infrastructure is still written in it. I could be completely wrong though, still an interesting article about where Go excels.
what is that anyways
isn't that what php-fpm with whether apache or nginx as web server do?
Last year I went from being a full time PHP developer to being a full time Go developer (working on similar types of software). Overall I don't think I'd go back. I don't hate PHP and certainly some things can be more complicated in Go but I these days I really resent how much "stuff" is involved in PHP development. I'd consider things like in-memory caching, queues, workers and so on to be more or less required for even simple web applications. With Go I can do it all in a single binary that is easy to deploy, build and maintain. With PHP to do the same stuff I'd need a whole bunch of services running (not to mention the services required for php itself - Nginx, php-fpm). Ideally I'd then need to setup automated provisioning for all this stuff and monitor their logs and keep track of security upgrades and so on. It's a whole other level of bullshit compared to just deploying a single binary, monitoring 1 log and upgrading packages every so often. Also coming from PHP I love how with Go there are standards that pretty much everyone just sticks to because it's really hard NOT to. All the in-fighting and drama around even basic standards in PHP is ridiculous and toxic. There is no such thing as idomatic PHP it seems, and multiple factions seem to want to pull the language in different directions. It's all just a mess. I'm not even going to talk about the syntax or standard lib because I don't really find it super important. Both languages are fine. People that endlessly go on about e.g. PHP's inconsistent functions are just annoying. Same goes for performance. It's possible to make high performance PHP apps and shitty performance Go apps. Synthetic benchmarks/hello world benchmarks are bullshit. If you want your hello world page to be fast just use HTML.
https://golang.org/doc/effective_go.html#goroutines
[removed]
I like GO, however I don't like its ancient typed structure that prevents dynamic data input. Anytime you're taking in JSON, it has to match a structure. This is nice when you want to do basic schema matching, but a hindrance when actual schema matching relies upon filtering the values as well.
Note: There *are* libraries for PHP that will do async, they just aren't built in to the language (yet).
I'm familiar with it and it has a few nice features.
Because i hate myself... But seriously it's my go to language for just getting stuff done. If you need the language to do something obscure it normally has a function for it.
Yes, Yes!
Agreed. I would just like for it to have a way to keep things in memory natively. AppServer maybe.
There is a fig like workgroup for ecommerce https://github.com/e-ig/standards
&gt; Hello guys, serious question. Why you still code with php? As opposed to? &gt; Everybody have a different answer to that question. That's the thing. Without context you can just expect a bunch of different answers, but no insight. &gt; I myself love this language, even with the problems. I've used about 12-13 languages in the last 20 years and it may be hard to believe, but they all have problems.
That looks like the way the butt headed people from South Park would say it.
It does everything I need, and as efficiently as with another language (most often problems come from developers). Why would I move to python or ruby?
simple: when I use PHP, then usually because I find myself working on things that are best done with PHP. 
PHP is so easy to get going. I can throw Apache and mod_php on a Linux server and be up and running in minutes. No complicated frameworks needed like Rails, no compiler needed like Go, no build system like Java. Throw in PHP 7 and now I have good performance without any extra work.
Because I'm familiar with it and it pays the bills. At my daily job I also have the opportunity to work with different languages (Swift, Go, Java and Python) but most of the code I write during a work-day is PHP.
I've been learning how to write mods with [scriptcraft](https://github.com/walterhiggins/ScriptCraft), which lets you write mods in javascript. Pretty fun!
Eh, functional programming isn't very well supported in PHP. No real closure (constantly need `use`) and functions are not really first class - eg can only nest functions as assigned lambas. Can't have nested named function definitions. IMO PHPs paradigm flexibility is found in OO, where it is both duck typed and strongly typed, so it can be used like Python/Ruby, OR like Java(-ish) giving you two OO paradigms to choose from as needed.
People that hate on PHP today clearly haven't used the language in a few years. It's lightyears better than it used to be and frameworks available make it wonderful to use.
&gt; Eh, functional programming isn't very well supported in PHP. Yes, it's not *true* functional programming like you'd find in other languages, but it's still possible to use many functional paradigms in some way.
People still pay me to use it.
Why an ORM, that's supposed to be decoupled, depends on a container implementation? Are you using service location?
It uses reflections... :D
What's funny is in JS, `this` is not fixed, meaning you have to constantly bind the correct context when calling or defining functions to ensure `this` means what you want it to mean, and IMO that makes OOP in JS wonky for the same reason `use` makes FP in PHP wonky. Having to use bind in JS OOP is like having to use `use` in PHP lambas.
You should check out nginx and php-fpm.
Can you elaborate a little bit on the future of PHP, in your perspective?
&gt; I'd consider things like in-memory caching, queues, workers and so on to be more or less required for even simple web applications. With Go I can do it all in a single binary that is easy to deploy, build and maintain. With PHP to do the same stuff I'd need a whole bunch of services running (not to mention the services required for php itself - Nginx, php-fpm). This would work if you're deploying to a single-server, but I don't see how a single-binary helps you in a distributed architecture. Having services like beanstalkd, redis, etc are absolutely vital in any cluster &gt; 1 machine. Not to mention, you can implement workers/caching in pure-PHP as well. I don't understand how this is golang-specific.
the core changes to PHP doubled its execution speed, and I can only imagine how much faster things will get with time. The changes introduced in 7 were great. The null coalesce operator, spaceship operator and scalar type hinting will help PHP become more mature. 
no
* Easy to use * Fast * Can get apps up quick * I just think its fun to code in it
Minecrapht?
redis
No query building and relationships? How is this an ORM ? This is a table gateway at most
The more important question is: Why another ORM we have a ton of these like we have a ton of frameworks. How is this better then using say doctrine or laravels elequent?
Well, I mean, if you're willing to be that loose with it most all language support much of the functional paradigm. 
Not the author but, here's a bit of an abstract explanation (to the best of my understanding) First, let's try to look at the client/server model of Minecraft. Your client is the component that handles rendering the world, collecting and processing your inputs, and playing sound. There's probably some more but, this works for a basic understanding. The server is the component that handles tracking world state and updating world logic based on inputs. These two components interact over a network connection, sending bits of data back and fourth to each other. For (a completely made up) instance, your client may send a "player moved to x,y,z" message to the server when you press your forward arrow key and the server will send back updates to the "world state" after calculating where everything is if the player moved forward. Your client will then interpret the world state it gets and update your screen/audio accordingly. As an aside, when you play single-player, you're still using the client/server model and your local machine is running both components communicating over machine-local network traffic. When playing on a remote server, all of those original "local" calls are instead directed outward to the internet. From a client perspective, all it knows is that it's sending some bits out to an address, and then getting some other bits back as a response. The client doesn't specifically care who is at the end of that address, as long as it gets a response it understands. This PHP application sits at the opposite end of the client and is re-implementing the message/responses of the Java Minecraft server component. It listens for packages sent to the machine on a specific port, processes that information, then sends appropriate packages to connected clients.
Yeah started using it on a new site :)
If you read the source composer.json, you'll see it only depends on `container-interop`, which is an interface. The League container is only for the examples.
Both of your examples are bloated, Laravel's has been buggy for as long as I've been using it and encourages monolithic model classes and other bad practices. Competition in the ORM department is something I wholeheartedly welcome.
Expects to see a selenium test or something to test the UI. finds out they're skipping the UI and testing an API call. thanks for the click bait.
just change font size in settings to 11 or 12 instead of system-defaults
Eloquent has a lot of behavior that I don't necessarily like, but I've never found it to be especially buggy.
It started as an internal google project but was open sourced and donated to the community. The copyright was transferred to "The Go Authors". Now the majority of contributors are not googlers.
I stopped working with Laravel some time ago, for all I know they're not bugs anymore. I just know half the issues I kept track of got closed without reason.
Why are you here? Just trolling?
The wind bit at /u/phpguy2 through his parka, his hand slowly losing feeling as he held his "HONK IF YOU HATE PHP" sign high. Sure, no one had honked yet, but they would. He would reach them eventually. He reached down to pull another Mellow Yellow from the small cooler next to him when a car pulled up. "Hey, do you need a ride or something?" Asked a boyish looking man in his 20s. Finally! "PHP'S STANDARD LIBRARY IS GROSSLY INCONSISTENT! STRING AND ARRAY FUNCTION PARAMETER ORDER IS REVERSED!" The rest of his sermon, unfortunately, was lost beneath the sound of the man's car speeding away. Suddenly, his cheeks were wet. Must be the rain. 
You say boring crap like this ad nauseam. Do you have a job? God knows I don't have time to constantly spew hate about languages I don't use anymore. Pray tell, what magical language do you use that's so problem and wart free eh? Enlighten us please. Can't wait.
&gt; if its based on Doctrine2's DBAL, why wouldnt I just use Doctrine2's ORM Because the DBAL just abstracts a DB connection, not the actual ORM stuff. Pretty much any ORM should use a DAL abstraction to avoid rewriting all the engine-specific cruft every time.
Hmm, ok. Well I'm sorry you had that experience and if you remember the issues I would be glad to look at them again and see why they were closed. Sorry you had a frustrating time.
Ohhhhhhhhhh ... So it seems sort of like a REST app where the server handles the inputs/outputs (json) while the frontend js handles most of the gruntwork that the user actually sees. Question - how do you figure out what the minecraft server input/output packets are supposed to be? Is there an api out there somewhere, or do you need to use some kind of packet-sniffer (for java apps?)
A bit of a nitpick here, but I'd suggest not using the term "sub processes" when describing concurrency, as the word "process" is often affiliated with an OS process or thread. Concurrency doesn't have to necessarily be multi-process or multi-thread based. In fact, one of the creators has a great talk on this: http://blog.golang.org/concurrency-is-not-parallelism
Does the Laravel ORM docs make mention of any other classes than ones extending the Model class? It didn't when I last read it. The design works fine up until a point, it's very easy to use for small projects, but things fall apart fast when you start reaching several thousands of lines of code. In a better framework, the Model class would just be a logicless class that described the data in the database and relationships to other models. In Laravel, it does everything. You shouldn't be able to do `MyModel::query()`, you should have some separate repository and/or query factory that's responsible for creating a query. You shouldn't be overriding the `toArray` method to change how a model's JSON is represented, there should be a serializer class. And so on. You can implement these things on top of the Laravel ORM (I tried) but it gets messy real fast, and the ORM's design works against it in subtle ways. If you really want to avoid these things I really believe you can't be using the Laravel ORM at all.
That's somehow the wrong way round ... Why didn't you just build a transpiler converting a whole codebase from 5.6 to 7.0? That way all software on a server can run 7.0 easily… (instead of lower performance etc.)
What should I be using instead? As far as I know , you do have to make a repository to query stuff. Well, I guess you don't have to, as you could just do it with the Model, but the Intermediate tutorial (like the second most basic thing you can read for Laravel) talks about setting up a repository.
I'm not a big fan of PHP ORMs in general, but Doctrine is the best around.
It's a pretty bad RFC, both the change and the reasoning.
Are you implying segfaults are all it takes to stop you?
Yep! back-end is PHP, front-end is Java. :) except the messages are formatted in a unique way for that interaction. For figuring out how you're suppose to format the packets, there's been a strong effort to document all the packets over every version. http://wiki.vg/Main_Page People reverse engineer by packet-sniffing, or even reading obfuscated minecraft code.
&gt;Make them change for us, don't make us change for them. Most of the above list are companies that have to obey the law of supply and demand. Use your vote as a customer (your dollars) to force better practices (i.e. keeping up-to-date). RedHat's money-makers are really big enterprises with massive contracts. Really big enterprises that would sell their own grandma rather than face downtime would rather stick with known-working solutions where 'known-working' means at least a couple years of use in the wild with no major issues. Most other distros aren't working for money, and will continue to meet their own view of what their mission is. Often this means some amount of accountability to stability that precludes including PHP7 until it's more tested. (Or at least not providing it as a default option.) &gt;Newer versions of PHP are more secure Are they? The latest releases haven't been tested thoroughly, almost certainly there are some as-of-yet unknown security issues in there. (Or known, but only to the malicious. Even worse.) Distributions and maintainers like RedHat go to some effort to ensure they ship only versions that are patched against known vulnerabilities and the like. &gt;and offer better performance. If you think that performance is all that important to stability-oriented distributions well, I have bad news for you.
Isn't doctrine basically the same as Laravel's Eloquent?
inb4 https://packagist.org/packages/symfony/polyfill-php70 or am I mistaking intent?
They're different approaches to the same problem. Eloquent follows a design pattern called active record. Models inherit from a base model and act as a dual query executor and database row. That's a really bad explanation, but since you use Eloquent I hope it makes some sense. Doctrine2 follows a pattern called Data Mapper. In doctrine Models are called Entities. The entities don't extend any base class, a separate class reads configs and can hydrate the entity or look up relationships from the database. One of key differences is, the database logic and hydration are a separate class / library. Your entity is not actually tied in anyway to Doctrine. &gt; What should I be using instead? Don't worry about it. Eloquent certainly gets the job done. It's easy to use. You might want to google active record vs data mapper or "Active Record Anti Pattern". Read what people's complaints are wiht it and see if you feel those issues are adversely effecting you.
So, it is better than Php?
Hell yeah man, it's way better at being garbage than php. You're quite an astute individual.
You can. And then you can also wrap that in another repository, and another. But why have layers of abstraction you don't actually need?
&gt; The joys of dealing with million settings I usually only have to change 1 or 2. You might be doing something wrong... &gt; Did you just include 'procedural' to increase the paradigm count? Well it is a paradigm, and I'm counting them, so yes? &gt; if I write all my code inside one class, my program cease to be procedural and becomes oop, right? No, it becomes a mess. &gt; You cannot even pass a function object with out making an anonymous function in Php (or use a string as the function name) Not true - you can also create a function object by implementing the `__invoke` method.
Yeah. It's a bummer because I paid a guy to make the contact phone form and now he's gone forever so I kind of can't fix it lmao. Work around I figured out was to just make a Gmail that I sent the leads to and then autoforward them to my customer
Polyfills only go so far.
Depends how determined I am. :)
&gt; You can. And then you can also wrap that in another repository, and another. But why have layers of abstraction you don't actually need? The Repository pattern exists for the sole purpose of providing you with a layer of abstraction on top of your DAL. It really doesn't matter what type of interface you're using to fetch your entities; in fact you could store them in an array and it would still be considered a repository. Doctrine takes a similar approach in the sense that you can use either the generic repository which they provide you out of the box or DQL. 
how often is it the case you do not know what the valid input should be? Also one other thing to note it is entirely possible to decode a json document with nested types without implementing the unmarshal interface. There are specifics when this breaks down but the 80% case is you would be unlikely to implement it yourself.
&gt; this is an implementation detail of YOUR repository layer Correct. Doesn't change the fact that the Blast ORM "repository" is poorly named, as repositories don't live on the infrastructure side of an architecture boundary (which I've said 3x now).
&gt; Doctrine comes with a generic Doctrine\Common\Persistence\ObjectRepository interface that lets you easily find one, many or all entities by ID, by an array of filters or by complex Criteria, and an implementation of it in Doctrine\ORM\EntityRepository. You should tell the [Doctrine](http://www.laraveldoctrine.org/docs/current/orm/repositories) developers off then. Go get them champ.
If I were king of Nintendo, I'd join the ROM devs, host an emulator, and profit. 
That's correct, it's a bridge for the Doctrine ORM. I thought you might have recognized the vendor in the fully-qualified class name. ---------- Here's some actual code from the Doctrine ORM: https://github.com/doctrine/doctrine2/blob/master/lib/Doctrine/ORM/Repository/DefaultRepositoryFactory.php http://www.doctrine-project.org/api/orm/2.2/class-Doctrine.ORM.EntityRepository.html
I... may be talking to some Goog peeps about V8... If nothing else, the 20% time to work on getting some more of that HHVM/Hack goodness into PHP would be worth it.
&gt; Not my problem if you want to use Doctrine as a point of authority. It's not just Doctrine. The Generic Repository is a known anti-pattern. https://www.google.com/search?q=Generic+Repository&amp;ie=utf-8&amp;oe=utf-8
Even if the language itself might have flaws, the community makes up for it. I'd use composer over rubygems or requirements.txt like... Always. Only NPM can claim to have a more robust ecosystem.
I don't see how the code applies to open/closed. The idea of open/closed is that you create well encapsulated, stable objects, which can ensure their own self-consistency, and you provide extensibility "hooks" where necessary through patterns like Delegate, Strategy, configuration objects and so on.
Sadly, but this is just an advertising for the Nginx Plus, trying to make a profit from the PHP7 buzzword. A paid version of Nginx is a good idea *per se*, nothing wrong with it. But the advertising should be not that blunt. The real value of this article is next to nothing. Any of Digital Ocean guides on Nginx/PHP-FPM installation will give you a lot more insight.
I'm getting really tired of nginx publishing all these fluff pieces just slurping for SEO to sell nginxplus. 
From what I've seen of mismanaged tech companies; the best leave ASAP, the good leave after a while, and the crap stay behind...usually all based on how easy it is for them to walk into another job
Absolutely, in the companies I reference in the articles same happened, good devs always left quickly craps ones which were there whilst I was are still there to this day!
Ipso facto, you *may* be one of those "craps ones"... which you should be thankful they're still cutting you a check, and don't see your article ;-) Then Legal will be all like "LIBEL! LIBEL!" even though you never identified them.
I have a fair amount to say on this subject as well actually, given I've recently handed my notice in but for almost the opposite reason of what most other developers would hand their notice in for. This is probably more of a rant than something cohesive but it's a problem I'm having with the PHP community at large at the moment. I think I'm leaving because of the supposed 'best' that apparently leave ASAP. I'm leaving because too much new technology is being introduced, and too many ways to do things. A lot of our software was written in ZF1. Stable, good amounts of tests, takes very little time for new developers to start contributing to. It has some problems like fairly chunky controllers, but folks don't want to just refactor those parts, they want to rewrite the whole thing using a command bus and containers and silex and (or the previous generation who wanted to add their own flavor of DDD, or the ones before that who wanted to move to Doctrine 2)... and these things are fine if your software demands it, but something that's stable and easy to work with doesn't need rewritten to flavor of the week. The problem is, you hire these people who think that anything from a previous year is shit and then they do this half ass job of implementing their flavor of the week, and then they leave. So now you have 2 ways of doing things, and one of them is only used in like 10% of the code base. Do that for 4 generations and you have a fucking shit show. Are these the supposed best that leave ASAP? Because all I saw was people with big egos and little little care for the product they're working on. All they wanted was a tool on their CV so they could find the next job. Yeah at home I experiment, and I bring my learning to the office when it makes sense to do so. I've used silex, symfony, and slim and these do make writing web applications easier compared to ZF1 (although I have issues with PSR7 and JSON APIs so I fell out with slim over that). When I'm working on a brand new project I generally opt for something along those lines. I'm also a big proponent of DDD and hexagonal architecture which do make testing easier and business logic easier to reason about, but when you have a CRUD application that works, is well tested and easy to contribute to, why don't you just leave it the fuck alone? Give me an older code base that's well tested over one that's event sourced DDD hexagonal DI-containered YAML configured any day. Especially when people don't understand why they're doing these things and what problems they actually address (and don't fucking test; jesus christ people test your fucking code!) Go read some of the classics like Code Complete, Clean Code, Refactoring, Mythical Man Month, etc. and stop using reddit and hacker news as the only sources of your learning.
Sorry i broke your heart, The business question was "If we delete and move items, do they still end up in the correct position after a refresh"
Yum!
This article is on point. After 7 years I resigned my position and I am looking elsewhere. Having created the technology at this company that drove revenues through the roof and getting little value in return, mounting technical debt from management that only does changes when clients request / pay for them, I see no reason to take orders from the technologically illiterate. They can have their obsolete and unsupported tech. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Who knows, I guess it's up to others to decide, however I think my Portfolio, and the praise I receive for my work from most, would go against your point of view. I have nothing to be thankful for because I quit, and I quit for very valid reasons. If they see my article I honestly, could not care less, maybe they'll realise the error of their ways (doubtful). As for the legal point you mention, ever heard of something called freedom of speech? I no longer work at the companies I mention. Plus I have dirt that would most definitely protect me in any case.
It's sad to see, it's not that uncommon, the architect I mention in the blog, is very much similar to this dev you reference here, and at my first experience I mentioned in the blog, we essentially had a clone of that dude you're mentioning, remote work, paid over £70,000 wrote everything himself for a very long time, and during his very long tenure he learned absolutely nothing.
By quitting, you are NOT a "crap" one because you understand the core problems. 
You make a completely valid point which I completely agree with, please don't think by my rant I'm advocating switching everything at once, by no means at all. It's foolhardy to just throw away a stable system like you're describing, the systems I'm describing in my article don't compare to your ZF1 system, far from it. The situation you're describing is one I have also experienced, and is usually brought up by slightly less experienced developers whom forget at every company you code at there is usually a business element involved. In there being a business element involved, it means that there is a bottom line which the company will always have as their top priority, top management doesn't care (usually) if you're using tabs or spaces, if you're using active record or not, they just care that their money is still coming in. Unfortunately (I say that way too much) these developers completely overlook that, and just want a rehaul, without thinking on how that would affect the business. You can absolutely not just introduce tons of new "flavor of the month" tech as you put it, especially when there are other considerations such as all "Business as usual" which has to carry on. My approach with implementing new technology has been, to where possible try to update, with security updates being one of the upmost considerations, and not to dump it all in one go. Not everyone will have knowledge of the technologies you may want to implement, meaning training needs to be done. Etc... On your point on people who think anything from a previous year is shit, this is so true, these developers need to learn one important thing, older software is not necessarily bad software, and in fact a lot of design patterns were actually thought up a very long time ago, and are not new-fangled at all. Any time we saw we could improve something in a system, I would involve all the developers and get their opinions, thoughts, ideas, we'd then reach a mutual agreement and draw out a roadmap for training, implementation and maintenance. And if there was any talk of implementing or replacing some technology without good cause, we'd dismiss it and add it to the nice to have list for possible future reference. + 10000 to testing code Hell yes to your book recommendations, I'll also add: The Clean Coder, Working Effectively with Legacy Code and The Pragmatic Programmer.
Forget slasher and thriller horror flicks, I want to see THIS because it is damn scary. 
I gotta be honest. A guy bullshitting his way to 150k is a hero in my book.
Hmkay..? I do know what OOP is.. I'm just wondering what you're trying to say that I should do right now?
I think the last sentence was a bit uncalled for, but overall I agree: OP's initial model (just relations via identifiers) was quite OK, but a bit painful to deal with when you need to load associations. Now OP went the opposite way and made it a bit worse without realizing that (due to the AR/SRP/etc issues coming from that). If OP want lazy-loaded associations, he can build something around this PoC: https://gist.github.com/Ocramius/f8504800183cf0210793 It's more work on the technical layer (especially the "saving back" part), but it pays off, in my opinion, as the entities stay DB-unaware. Hope that helps :-)
&gt; Also, are you really trying to convince me that typing `composer require` is too hard for a junior dev to do? They're inexperienced, not stupid! You can be afraid of something without being stupid. Some people are scared of heights even when there's a huge barrier in front of them and the ledge. It may be silly and irrational but it's not stupid. In any event I will admit that I'm extrapolating. I haven't personally met developers that were intimidated by the command line but then again if someone was intimidated by the command line they probably wouldn't be bragging about it either. &gt; Second, because MySQL is something you want to read up on and learn about before you start to use it. The lack of MySQL knowledge I've seen in junior, but also in some experienced PHP developers, is staggering. You're right - people should know about SQL before jumping into it. But, as your second sentence hints at, a lot of people don't. People ought to know about prepared statements and sanitizing inputs before writing production code but fact is a lot of people don't. What constitutes a roadblock will be different for everyone and if something is blocking you or slowing you down you certainly do have the right to complain. And the PHP community also has the right to ignore your complaints. A small number of dissenters ought not stop progress. &gt; I don't mind people being uncomfortable developing locally as long as I don't have to buy their products tbh I can't imagine them writing a good enough product that anyone would actually want to buy lol.
&gt; I think the last sentence was a bit uncalled for I think his lack of experience with OOP is rather obvious from the code he linked. Attempt to unit test that code and you'll find that it needs serious refactoring just to avoid hitting the database. He can find that out after X hundred hours of development, or before he even attempts it. I didn't mean it in a rude way. Nobody was born with knowledge.
Dat indentation, tho.
I must say, I am not familiar with a look of the terminology, like activerecord and datamapper. I learned about MVC 2 years ago at school, and I've learned that a model is just to represent a specific row in the database. What do you recommend I do right now? Should I dive deeper into this topic? Where can I find more information about this?
Thank you. It always upset me when a dev would come around and say 'oh hey just do that in X language' when its all perfectly possible in the same language. "Oh but look at these benches!" Yeah, cool, look at these benches of maintainability. I could learn 5 languages and impliment a ton of features in every one of them, but good luck on future maintenance. "Flavor of the week" is a good way to put it. So many shitty applications made in some 'new' language because it looks cool and feels nice rather than because it works.
Elaborate?
Why not simply write, "because I'm incompetent". Will save depreciation costs on your keyboard and monitor in the long run.
As for experience with development; 3 years ago I started at a new school to get my degree as a webdeveloper. The school sucks and we have learned some shitty jQuery and PHP stuff the past 3 years, but, I've been doing a lot of things in my free time. I've worked as a part time PHP developer on Wordpress projects, I've been an Angular 1.x developer for 6 months (that trend died quickly in the company I worked at lol), and I've been doing my own personal stuff on the side. The reason I'm focussing on this framework is; I have this application I'd like to build and I wanted to use my own framework since, I dunno, I'm a crazy kid with weird habits, I don't like off the shelf frameworks, I wanna build my own things :P
&gt; I'm kinda stressed out after spending all my free time on this 'issue' Not all the code you write ends up in production. You shouldn't regret fiddling with code.
There is a saying "people join companies but leave managers". I have left for the following reasons: 1) Bad managers/stupid rules, 2) bored with the problem space/tech set I'm working with, 3) management choice to change to the stupid flavor of the month language/tech (I would leave a company doing iOS that suddenly mandated all new code be done in Swift for no particularly good reason), 4) Opportunity to learn something really new and cool elsewhere, 5) no financial recognition of my work (2% raise? kthxbye).
After 24 years in the IT industry in various different roles. I am not surprised by this in the least. Small to Medium sized companies are pretty much known for this. They have something that works, if it works then why replace it? Usually it's a bean counter or member of the board which will block development of a new system to replace the old because of the cost of development, bug testing, user testing, more bug testing and then deployment of the new system parallel with the old and then running the new and turning off the old. Depending on the project, this could cost a lot of money and guess what, this means less to their bonus bottom line! So many times I have been the sole developer for a company. Many times I have either implemented something which still to this day is being used or inherited a shit-show and patched it up with newer features and moved on. It never ever is pretty, but in business you have to move fast. These companies with systems in PHP 3/4/5 whatever. They don't care what framework or language is being used. If they have clients, they want to support them, if they are selling to the general public, they want joe shmoe to be able to buy. That's it and done. At the end of the day, if you want the most up-to-date stack, you want the development practices you want to see in a company. Easy, setup one yourself. Give good salaries to developers, setup good processes and try not to fall into the same trap these companies fall into. But one word of caution. If you go the VC route and you get a non-technical CTO or CFO who has control of the purse strings. Oh boy, be prepared to let go of those principles you hold on to, lest you find yourself as one of these companies. It's a slippery slope, I've seen it after working for many startups. Day one, an evangelist on tech. Day 700, gotta run faster and faster and just get those features in, testing be damned! :)
Or PHPFastCGI: http://andrewcarteruk.github.io/slides/breaking-boundaries-with-fastcgi/#/
While you may not ultimately use your custom solution, I applaud you for building it. This is one of the better ways to comprehend what goes on behind the scenes and understand that there is a lot of edge cases that you aren't familiar with and/or accounted for with your solution. To answer your question "how to handle relationships," the best way to do it is to define the relationship and query it when requested (lazy load). This has problems with things like pagination or caching (edge cases you may not have accounted for), but here is an example: class Post extends MyORM\Model{ // lets say it is possible to define objects as members directly $name = \MyOrm\Field\String(); $email = \MyOrm\Field\String(); // here is the magic that you'll have to figure out how to do $pictures = \MyOrm\Field\Relationship(array( 'table' =&gt; 'images', 'join' =&gt; '%s.id = %s.post_id' // you'll figure out how to replace the %s with the correct tables )); // this would be in the base class, btw public function __get($field){ // loop through your defined fields and if it is an instance of // \MyOrm\Field\Relationship build the query and run it // here is where you'd probably figure out pagination and caching } } // later $post = Post(3); $post_pics = $post-&gt;pictures; //would call that magic __get Active record is kinda easy once you wrap your head around the core concept. The difficult part is to account for all of the edge cases. Good luck
&gt;I learned about MVC 2 years ago at school, and I've learned that a model is just to represent a specific row in the database Just to clarify though, a model is not what the M in **M**VC is referring to, it refers to *the* model layer which is basically the entire business logic of your application and it will contain a variety of different classes, only some of which will be classes representing a single database row. [This is a pretty good post](http://stackoverflow.com/a/5864000) if you want to read more.
No problem, I noticed that the top reply was very condescending so I wanted to counter. Keep learning. Try defining the fields in the constructor or a method that will be called during construction: class Post extends \MyOrm\Model{ private $_fields = array(); public function __construct(){ $this-&gt;_fields['content'] = new \MyOrm\Field\String(); ... and so on } public function __get($field){ $value = null; // loop over $this-&gt;_fields and set $value return $value; } public function __set($field, $value){ //set $this-&gt;_field[$field] = $value somehow } }
Indeed
I understand it may be prevalent, but there are companies out there who do stick to good practices and standards, and one shouldn't give up looking for them and set them up oneself unless that's really what you want to do. I've worked for companies who have, except in those companies I just left, because there was nowhere for me to progress my career beyond that point, but they do exist. Completely agree on your point about how it'll affect their bottom line, but it's two types of management, one who is short sighted and only sees what's directly in front of him, and the other looks ahead, prepares, and focuses on delivering quality.
Uh ...... I feel like this is heavily opinionated reasoning against these ORMs.bone of them, doctrine, being "industry standard" and one being "inspired" by rails active record impl
I think you should look at what's already out there and use those as opposed to trying to write your own. 
It's the current year?!
I see the value of this as its like a JavaScript transpiler but at the end of the day of your on hosting that can't upgrade move off it. Use something like linode or another service that allows you to control the whole of your system. If it's a work thing it's your job to convince the employer why they should upgrade 
**Off topic -- thanks for sharing an Internet accessible personal Gitlab installation. Been thinking of migrating ( Github--&gt;personal Gitlab ) and it is neat to see it in action without having to take my time for an install to be able to poke around. On Topic FWIW -- You seem to understand what you want to build and you've come up against your first stumbling block. As an academic exercise, when you imagine yourself using it-- what does your code look like? To enable the usage of your dreamed up code, what considerations and methods have to exist in your Model class? Despite being all together slower-- sometimes I use multiple calls to the database as it leaks progress to the user and makes them more patient as well as being better on low RAM VPS VMs... Maybe as a headache reducing stipulation for yourself, limit the depth you will accomodate in your Model class. Maybe look into the established ORMs to see how they have done it. And, unfortunately, this is one of those times that you are unlikely to build something better. So, please do slip Doctrine, Propel, etc... into your project going forward. (You still get the points for prepared statements in your Model class.)
Tbh, it's just reddit that is a big container of acid and hatred, waiting to be spewed. The great majority of folks are actually nice in most communities :-)
Give that example a shot: it will be clear to you how it works after reading how ProxyManager works, and seeing it running with a debugger. Also, feel free to shoot me an email if you got questions.
The article's content, in full: * Use nginx * Please buy the paid version of nginx * Don't use Apache * Try PHP 7! * Cache static files
Alright, just remember to formulate it differently, next time :-P
There are a lot of things at play when it comes to speed of a website and its relationship with the framework used. Here are a few things (on a very very high level) that I can think of: 1. Nature of the framework; compare CI to Laravel, they're both pretty similar; but compared to Phalcon where the code is compiled as a PHP extension, you're in a whole different league. 2. The number of files it must load; lots of small files are great for separation of concern, but not so great when it comes to reading them off of disk. If your framework requires you to load a bunch of small classes as opposed to one medium sized one, you're probably going to end up slower. 3. The implementation used for routing; if your framework is using highly optimized hash tables to do routing look up, it might be faster than those that require heavy regex. However, if your routes are complicated, regex + hash tables might end up faster than straight on hash tables. 4. Database implementation; for basic lookups, raw PDO will likely be faster than an active record implementation, and will generally be faster than an entity mapper implementation (both due to the added overhead of mapping data to your class as opposed to serving as a raw array from the DB). However, with all that said, we're probably looking at milliseconds of difference between requests. Milliseconds that makes absolutely no difference when you're building out your application. Developers build applications using frameworks because it allows them to speed up the implementation, so they don't need to worry about building out the routers, the database abstraction layer, the application bootstrap, the view rendering, ... etc. It is much more important to think about your implementation on a higher abstraction level, and focus on building your code and system such that it can be horizontally scalable. That way, when you get to the point where those milliseconds do matter, it is because you're serving tens and hundreds of thousands of requests per second... and you can scale by adding more servers to reduce the load across the board.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
So what you're saying is- the framework choice DOES affect speed, albeit very minimally. Right? 
Yes it does. You can google and find some charts, but frameworks do operate at different speeds. However, equally as important is how the framework is utilized and the quality of the programming. And then there's server speed. I'm not experienced with EC2 so that is potentially a speed pain point as well. CodeIgniter, while dated, is reasonably fast for a PHP framework (see other commenter's mention of Phalcon). I've used it for dozens of SMB sites and in general, on reasonable "hardware", it works just fine. Try profiling and see where your pain points are; that should give you an idea of what part of your overall system the issues lie. 
I'm using CI for a social network application and it runs oddly slow. How do I identify where my pain points are? What do you mean by profiling? 
Yes. If the objective is for pure speed, then raw PHP is the fastest because it doesn't add any of the overhead. However, development will be slow, because what will end up happening is a lot of reinvention of what the frameworks set out to do: make database queries easier, make routing easier, make the application coherent for other devs working on the project... etc. It is usually best to choose the framework your dev team is familiar with, and run with it until you have a better reason than performance to consider switching.
Profiling is a term that means to observe an application in action and time all the various parts and actions that make up the application. CI has a built-in profiler class that will show you all the queries you are making to the database and the times they take and how long each part of generating the page takes. You turn it on in the configuration (it's been a while so can't remember exactly where). That should give you a start on finding out what the slowest parts of your CI application are, and then you can focus on improving those. 
Are your images served through PHP? If so, that's the first thing to fix. Load them directly from Apache or Nginx. If that is still too slow, look into a reverse proxy like Varnish. That can help your PHP pages too if they are fairly static. The fastest PHP pages are when no PHP has to be executed at all. For the rest, profile. XCache profiler or XHProf are good tools for that.
Here is where you can derive an immediate benefit. 1) Use varnish, a CDN or use cloudflare. If images are loading slowly, thats nothing to do with PHP. Or perhaps you aren't using optimised images and maybe 10MB images? I don't know. 2) If you are using a lot of db calls. Can you use redis/memcached? This will give you a big boost in loading pages. Similarly, are you compressing/minifying your css/js files? Are you using http2? 3) Uploading files is down to your upstream, however I suggest using Go for any intensive backend operations. CI is pretty dated, but from what I understand Laravel is slower, which is why Lumen was introduced. But look, I don't have a dog in the race. I'm running a single 512MB in Digital Ocean. Paying $5 a month for a blog. It's lightning fast. Of course I wrote the whole thing and it's seriously freakingly optimised.
I find asking about design patterns tends to filter those out and give more reliable results ;)
I'm not a WP expert, but that sounds like it's masking the problem instead of doing it properly in the first place.
You're fortunate to have seemingly competent employers, I was in the same situation 6 years ago and I almost didn't get the job I ended up crushing because apparently my resume looked like someone who couldn't hold a job :(
You're absolutely right, but you'll end up with similar issues regardless of what pre-built CMS you use. Drupal is a little lighter, but takes a lot more work to make palatable for content creators, Joomla is a little heavier but is stupidly simple for the content creators. WordPress is sort of in the middle. Almost every "slow" WordPress site I've seen has been bogged down with poorly optimized plugins. Usually they're plugins that were installed to handle one thing (when a custom piece would have done better) but have a bunch of other 'features' that aren't being used. Most of them are done by beginner-to-intermediate developers, and won't leverage OOP at all (which leads to a mess of a mess). Properly set up caching is a much in any PHP application, and it's pretty sad that WP doesn't leverage Varnish or even APC by default. It could also do with a major code overhaul, but won't in the interests of "backwards compatibility" - they want someone to be able to upgrade a WP install that's nearly a decade out of date without any issues. But really, if your site is "fairly static", one wonders why you'd be using a CMS at all.
Implementation is everything though. If you know an orm well you can get queries just as efficient as direct queries in most any cases with eager loading. If you ignore db interactions until rendering and are heavy with lazy loading nested objects or overdo eager loading it can make some ugly db interactions or heavy memory usage at scale.
It's unlikely to be CI that is your bottleneck. I am running code igniter on a fairly large scale web app and the bottleneck is usually elsewhere. Eg. Database, caching, web server setup. CI is comparably fast and lightweight to other web frameworks albeit a bit outdated these days.
Well, it's ecommerce and the homepage just happened to be simple so illustrates the overhead quite nicely. (For what it's worth, we rarely need to cache with our framework, other than static assets of course.)
Wordpress is meant for many different solutions, I can guarantee whats done is done for a good reason. A homebrewed solution could do it faster because it has far greater specific criteria to meet, but using W3 total cache is something you should do for pretty much any site. There's no reason static content should be queried every time.
Your points 2 and 3. Pretty much re-iterate what I said. You are right on your point 1. That will help a little.
&gt; Does a PHP framework have anything to do with the speed of a website? Frameworks do not come for free. They add weight and processing time to your application in exchange to make your life easier. It has an name: "Abstraction". Or put in other plain words, "Frameworks are not zero-cost abstractions".
it really doesn't look that much different. Also, it looks like the side bars are in the "auto hide" mode... you can use Ctrl + Tab to navigate around to open Project, Structure, etc. Or you can double tap Ctrl and hold down Ctrl on the second tap.
The culprit is found in this line of the bad practice example: if ($figureCollection[$x]-&gt;isWhat('rectangle')) The area calculator has a hard reference to a specific shape, while the good practice example does not. This means that the area calculator in the good practice example was built to handle any shape, rather than requiring modification to handle the specific case of the rectangle. That said, this was a really contrived example IMO.
Not necessarily just hooks, really anything where you can substitute a switch statement or a series of else-ifs with injectable polymorphic services/objects is a good way to make your code extensible as well. 
Short answer is frameworks do have a performance impact but it is usually one of the last place you should look to optimise. The overhead is much smaller then database / network. Are you using micro instances. They have the worst network and CPU performance. - understandably 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
And by profile, what you can do is install xdebug and configure it to profile and dump those to files: https://xdebug.org/docs/profiler and use QCacheGrind/KCacheGrind to read those profiling dumps and it will represent that profile with an interface that allows you to drill in and find out whats making it so slow. Regarding images, OP could also just not be optimizing those images and be serving high res images with big file sizes. Easiest way to find out is to use Chromes dev tools to profile loading a site and see where the latency is happening. I mean, there are a hundred and one different reasons why OPs site could be slow. PageSpeed Tools (https://developers.google.com/speed/pagespeed/) might help identify where things are sucking on the front end side.
Way before all the complicated profiling, just fire up firebug or your browser's equivalent, and get a feel for where this perceived slowness is. It will help you to tackle the low hanging fruit first.
Dunno why it was received too harsh. Though there is too much pulp fiction in the question, it's fairly legitimate. You should look not into PHP but into web-server configuration. It's web-served in response for the web-sites to appear. If it's apache - then look for apache config. REgardig the story - I find suchg conditions are the best for learning. If you won't give up, you'll learn helluwalot of things in a very short time
Just depend on what you want to achieve! If you want to be a developer, you must learn how a CMS/Framework works internally... If you want to just make some projects where you don't need to master your architecture, just use it!
Not only that, but you posted about it to commemorate the occasion. I can tell you're a high achiever.
Yay. :)
Thanks. :) We use it for many adminpanels in our more light weight backends where we don't want to go the heavy way of symfony2, Grails, Play etc.. :)
&gt; then why does it matter that the model has more than one responsibility? https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)
I currently work for a company making websites mostly based on Wordpress. However all the plugins and themes we use are usually self coded. Our main reason for using a CMS is to make it easier on the clients updating the website. Personally though I still code my own from scratch. 
Most of the time I code my own from scratch. By the time I have built a template for different pages, adapted plugins and got them to do what I want, I find it quicker to start with a blank page and empty db. I do realise though that if I spent more time learning things like Drupal or Larval though I would be a lot quicker with them.
It sounds as though.. you are very CPU intensive through redis.. and not through php? setup a dev environment with 2 vm's. one for php and one for redis. which one is more cpu intensive? if its redis.. offload some or most of that to php if you can. redis is generally a memory store and is really fast. once you go that route, request -&gt; load balancer -&gt; (php node)* &lt;-&gt; redis 
&gt; completely irrelevant unless we can produce solutions that are objectively GOOD in a given context I submit that Taylor runs a number of successful businesses on Laravel code. Many of the more well-known community members do (like Jeffrey does with Laracasts). Perhaps they are qualified to hold this opinion based on their experiences..? &gt; when you are trying to create a generalized/horizontal solution that should fit an unknown number of problems There is something to be said for the balance that must be struck between coding for an unlimited number of unknowns and shipping code that is reasonably easy to maintain. I have had much success with Active Record behind a well-constructed set of repositories. I left a company a year ago and they are still shipping new products based on the work I did about 18 months ago (90% of which was AR/Repository CRUD API endpoints). Even going through the ^4.2 → ^5.0 upgrade path with no issues. Active Record works in many situations, just like Data Mapper does. And using Active Record doesn't mean one is ignoring SRP...
Yeah, I find that these are the best conditions too. I can only go up from here. Don't know why it was received so harshly here either. Was a good reception over at the IT dept sub. Yeah, I pretty much covered all of HTML and CSS' codecademy courses in a day. I'm now on JS. After that, well PHP is the next step. 
&gt; I submit that Taylor runs a number of successful businesses on Laravel code. Many of the more well-known community members do (like Jeffrey does with Laracasts). Perhaps they are qualified to hold this opinion based on their experiences..? https://en.wikipedia.org/wiki/Argument_from_authority Building a successful business on Laravel is easy. You can build most businesses on almost any given platform and it would still work. Building web-applications is easy. Heck, you and I can do it and we are no geniuses and neither are those guys. I do not buy the argument that they are qualified just because they have successful businesses. If there is a better solution, I would welcome it with open arms regardless of where it comes from. However, it should be considered based on its merits/trade-offs. And throwing SOLID out the window is not a good thing. &gt; There is something to be said for the balance that must be struck between coding for an unlimited number of unknowns and shipping code that is reasonably easy to maintain. I have had much success with Active Record behind a well-constructed set of repositories. I left a company a year ago and they are still shipping new products based on the work I did about 18 months ago (90% of which was AR/Repository CRUD API endpoints). Even going through the 4.2 → 5.0 upgrade path with no issues. Active Record works in many situations, just like Data Mapper does. I buy that and I respect that. &gt; And using Active Record doesn't mean one is ignoring SRP... But the original comment I made a reply to stated: &gt; then why does it matter that the model has more than one responsibility? I either misunderstood what you wrote or you are contradicting yourself! 
Personally, I think /u/judgej2 has the best two cents I've read in this thread so far. The answer to this question is yes, but that information is not going to help you. As others have pointed out, code takes time to run and different frameworks will do things differently and therefore have different run times. Having said that, any framework will be complex and it's difficult to say which framework is the best for your application. If you were able to simply take CI out of the equation and plug Laravel in, you could compare speeds but that's really the only way to find out if CI is what's slowing your application down. Instead, the key is to realize that the whole application isn't slow, it's likely a few parts that are making the application respond slowly. Now to figure out which. If you're doing a lot of AJAX calls, you can use Firebug or Chrome Developer Tools to find the bottlenecks. Otherwise you could use a PHP profiler, or maybe find a clever way to add logging to find out which parts of your app are the culprit. My first place to look would be database queries. In my experience, if an application is slow and it shouldn't be, it's often a poorly written database query.
It is a difficult problem to solve. I'll recommend you to use a third party service. Try box.com, they are fine for what you want to do.
You realize I wrote a mini-book on SOLID that sold several thousand copies? So it's not like Laravel people "ignore" SOLID. In fact, in many ways Laravel makes it easier to design maintainable applications than other frameworks.
&gt; they were pretty convincing Of course they were. They're professional shills paid to sell Laravel and you took it hook, line and sinker like the gullible punter you, and every other Laravel zealot, eventually becomes.
&gt; You realize I wrote a mini-book on SOLID that sold several thousand copies? Wow. Nobody cares. That's like buying a book on puritanism from the Devil.
On top of this you could use LibreOffice headless on a dedicated VM and pass documents to it for conversion to PDF. I suggest a dedicated VM due to the safety issues with issuing shell commands direct from PHP. It's probably not something you want enabled on the primary application server.
- true - true
And this is exactly the point that Taylor made in his podcast, it's hilarious. Your argument against ActiveRecord is SRP because SRP because SRP, you don't give any good arguments nor code examples to prove your point.
I have opined elsewhere, and will do so again here, that the vast majority of "Active Record" devotees in PHP land are first-and-foremost "Laravel" devotees. I further opine that if Laravel used a different data-source pattern, the very same people would be devotees of that pattern instead.
I can! A year ago, I built fairly complex data-driven API using Laravel 4.2 as a backend and the Eloquent ORM. I didn't have complete control over the database structure, as some of it had to be imported from different sources and it wasn't possible to massage the data into a perfectly normalized form. So, at a certain point, I had to relate certain entities to each other via a composite key, which Eloquent doesn't support. I ended up using a combination of query scopes and repository methods to achieve the same effect, but it wasn't great. Later, I needed to pull additional information into the entity that was related to but not contained within the composite key. As a result, I had to create an ugly hack whereby I pulled the models from the database, iterated over them and set the required data, and then return the collection. This wasn't the only complication caused by AR, just the biggest. I was really hoping to refactor some of it a few months ago but because all of my entities depend on Eloquent, `__get`, and `__set`, it's a very difficult task even with a full suite of automated tests. So it's probably not going to happen. Really wish I had gone with a Data Mapper instead.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I've had similar problems with AR implementations in the past, at least one of them my own. If you have the time and inclination, I'd appreciate your critique of [Atlas](https://github.com/atlasphp/Atlas.Orm), a data mapper that does support composite keys. It is intended as a *persistence model* mapper, not a domain model mapper, so if you do take the time, keeping that in mind may help explain some of the decisions. (Others are welcome to critique as well.)
&gt; That fact doesn't contribute anything relevant to the discussion. Maybe, maybe not. If it turns out that a lot of this is not so much about "defending Active Record" as it is about "defending Laravel" then that gives us a different way to interpret the discussion. (/me shrugs)
Agree with that entirely. When the idea of using repositories with Eloquent was brought up in the podcast, it seemed the consensus was mostly not to bother: "embrace active record" and couple your app to the framework. As I think was discussed towards the end, the question should really be whether to use your database framework's objects everywhere throughout your app, or whether to map them to your own domain objects. *For the applications I work on*, the cost of writing a tiny bit of mapping boilerplate tends to be the negligible compared to the concerns that passing around AR objects would raise.
/u/utotwel - Do you have any general principles or advice for what, and when, a developer should test their Eloquent models when writing a Laravel application? This is the main road block I have when trying to convince myself it's okay to use Eloquent everywhere. For example, let's say I add a `comments()` hasMany relationship to a blog. Would you test that `$blog-&gt;comments` works as expected? If Laravel is working as expected then there would be no need to test this. How about testing that I can add a comment to a blog? Again, if Laravel works as expected then the developer actually had nothing to test. But I feel uncomfortable not having any tests in my suite that proves that adding a comment to a blog actually does what I expect. Same goes for query scopes, pagination etc - if i didnt test any of that, and just made the assumption Eloquent works, then there's a whole lot of Eloquent stuff littered throughout my app that isn't in my test suite. So would you, as a developer, test these things or not bother? In the case of an `Invoice` model that has many line items, and it had a custom `total()` method then that should be tested, no debate there. But would you create the line items and the invoice in the database, using model factories, and then retrieve the invoice back from the database and assert that `$invoice-&gt;total()` gives you what you expect? Or would you some how do it all in memory? A code example of how you might year this would be great :) What about when doing non-trivial queries? To keep it simple let's say this happens in your controller: $blogs = Blog::where(''title", "some title") -&gt;where("views", "&gt;", " 150) -&gt;all(); return View::make('blogs.index', $blogs); Would you seed the database with some blogs and then just acceptance test the controller route and asset that the view contains the expected blogs? Or would you pull that query out into something else and test that it works in isolation? Or something else entirely?
Regarding number 4 I'm not entirely sure what problem you're trying to solve there. If you're worried about HAProxy not being able to handle the number of requests you need it to (or availability), then what I've done is use rrdns to multiple instances of HAProxy, but they're all at the same level (but I do this for availability, not for scaling; a single instance of HAProxy can handle a lot of traffic). I would recommend looking at a front end cache like varnish as well if you're 95% reads. This has probably been the single biggest benefit to my stack. In one application I once added a 1 second cache to the request but because we had around 200r/s that reduced load significantly because most of the requests were the same (I think it was like 80% or so of the requests were for the same 3-4 resources). It also has ESI support if your content suits that sort of setup (but I haven't used that personally).
&gt; A CMS (I'm guessing you mean wordpress) is useless for all but the simplest static websites like blogs or comics. All it's good for is what it sounds like. Managing content. Not building applications. There's a whole big world out there of more complex applications. Not a WP fan, but frankly I've seen people deliver 50K €+ ecommerce projects based on WP + highly customized modules
Thanks for the response! We've been looking for something like this where I work, a bridge between phpMyAdmin and building a custom CRUD application in Laravel or similar. ~~One question I did have - if we were building an app with CRUDLex and wanted to override a single template but keep it out of the vendor directory, is that possible without copying all of the other templates to that directory? I'm not that familiar with Twig but it seems like one would have to replace the file path in Twig's template loader (which replaces it for all the templates).~~ EDIT: After doing some poking around, I can achieve the desired effect with this line of code: $app['twig.loader.filesystem']-&gt;prependPath(/* custom template path */, 'crud'); Awesome work though! I'd been on the fence about building something to use internally but I would rather contribute to an existing OSS project, personally. Are you open to feature requests?
I haven't gotten it up to that personally so I can't comment for certain, but given I have a single instance with a few hundred IOPS and server load is minimal (I'm not sure of the specs I'm afraid, but this is a VM and not a very beefy one), and given the following article from them: http://www.haproxy.org/10g.html I would assume 5k IOPS on consumer hardware is fine. If you're still hitting bottlenecks there then like I said I'd just stick some rrdns in there. That's about as far as my knowledge goes so sorry if that doesn't help! Beyond that I'd be googling what ISPs, the big CDNs, Facebook, et al. are doing (probably plugging hardware in to exchanges directly...)
Something I've considered as a compromise is using a POPO domain entity, but then have an implementation-specific subclass of said entity that an ORM can work with that doesn't violate LSP. The biggest problem with that approach is that most ORM entities use `__get` and `__set`, which makes it pretty difficult to keep the ORM from leaking everywhere. Being able to do something like this would be awesome: class OrmModel extends DomainEntity implements OrmModelInterface { /** @see OrmModelInterface */ public function getOrmDataFields() //from OrmModelInterface { return [ 'foo' =&gt; $this-&gt;getFoo(), 'bar' =&gt; $this-&gt;getBar(), 'baz' =&gt; $this-&gt;getBaz() ]; } /** @see OrmModelInterface */ public function setOrmDataFields(array $fields) { $this-&gt;setFoo($fields['foo']); $this-&gt;setBar($fields['bar']); $this-&gt;setBaz($fields['baz']); } } I've also considered having a persistence model map itself to or from a domain model but it felt like an unnecessary step. That being said, if I have time I might try implementing a smaller project's persistence with Atlas and see how well it works compared to my previously-linked proprietary solution.
In the past, I've tested these kinds of things via functional testing. So, set up a test database with a known subset of data, then test your eloquent models/repositories with that data. For example: public function testCreatesPollingLocation() { $expectedImportId = 'TEST-PL-1'; $pollLocationData = $this-&gt;factory() -&gt;getPollingLocationModel(['import_id' =&gt; $expectedImportId]) -&gt;toArray(); $result = $this-&gt;repository-&gt;create($pollLocationData); $this-&gt;assertTrue($result-&gt;exists); $this-&gt;assertEquals($expectedImportId, $result-&gt;import_id); } The downside of this being that your tests can be pretty slow. Testing all of my Eloquent repositories this way makes up for about half of my total run time for tests, because it requires both a database connection and booting up Laravel each test. The total running time for my tests is about 4 minutes, which really screws with the red-green-refactor cycle.
&gt; There will be a huge IO on Redis Node's network. I'm not very familiar with linux core, but is it possible to reach OS limit before I reach Redis limits such as the amount of network IO it can handle? Sorry I missed that on my first read. This article provides a lot of details about how redis works if you go in to swap, and some file disk settings that might be important if you're persisting (for example the huge pages stuff): http://redis.io/topics/latency I think Redis is a decent choice though; there are a lot of KV databases that solve different areas of the CAP theorem so you might want to analyze your choice at some point, but it will scale to multiple instances fine, it just might not handle split brain situations elegantly for example (https://aphyr.com/posts/283-jepsen-redis).
That was three years ago.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Why should I use this over xdebug profiling and kcachegrind?
I would not test a plain simple relation or any other built-in Eloquent feature works because Laravel already has hundreds of tests around that, and I think that is generally accepted testing practice to not test the *implementation* of other libraries. In your `Invoice` example, you could test it either way. If you want to just do it all in memory you can build up the Invoice objects and then do `$invoice-&gt;setRelation('lineItems', $lineItems);` to populate the relation and then just call your `total` method. None of that will hit the database. Your last example with the blog posts you will need to hit a real database. There is no other way to prove that it will actually return the results you want I don't think. You could test the raw generated SQL but I wouldn't do that. I would just create some dummy records and hit the database. If your database tests run a little slow you could put them in a separate PHPUnit group so you only run them when you actually change something database related. Hope this help! :)
https://en.wikipedia.org/wiki/Stealth_banning
No where does it use the words embrace. Maybe you should listen to the pod cast before attempting to start a flame war of why AR is crap and docrine is better or vice versa. Both systems have there advantages and disadvantages. Taylor was right in the part where he states, something like, its usually the business needs that create exceptionally complex queries making people be like "if only I didn't have active record". One of the things people need to stop doing is abstracting things so much that there tests never hit the database. Just take the hit and hit the database. It makes the code so much easier to read and understand
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Hey, thanks for reply. I agree those solutions are ideal and many I already use, but the serious spammers bypass all of this, and they are able to because of the profits they will make via spam. Even Facebook have trouble stopping it, but I feel Facebook's approach isn't good enough as spam is rife on Facebook groups. The application is heavily funded, and has a huge marketing budget, and sadly wherever there's users there will also be spammers. In the dating business spammers can make $100 per lead, so the protections have to be stepped up. PlentyOfFish were said to have the best spam filtering, but I was able to bypass that in minutes. &gt; 1. use a strong CAPTCHA This can be defeated with services such as http://www.deathbycaptcha.com. They have APIs, making it easy for automated bots to bypass them. &gt; Use the http://stopforumspam.com API to check for toxic IPs/email addresses before letting someone register. here's an example Good spammers would use private proxies, or set up their own proxy servers with fresh IPs &gt; Use https://blogspam.net for actual comment spam detection. This looks cool, but the traffic load is high and sending 100's of requests to their API is going to be slow (if they even allow 100 requests per second). &gt; Implement honeypot fields on all forms (e.g. fields that are invisible to a person, but a bot would fill out). Then if an invisible field is filled out, ignore the request and auto-ban the user. Writing software to bypass this is easy. Monitor the HTTP request and see what form data is being sent, and then replicate them. That way you know what parameters are being sent in requests. &gt; Implement submission throttling. Let a fixed number of comments, private messages, and status updates be submitted by a person in a given period of time. Spammers would just create more accounts. The good spammers use automated software. They also use spun text that they've written manually (spintax). So non of this comes at any cost in time to the spammer - aside from the time needed to develop the automated tools. But is much more difficult to stop. Which is why I was looking at a different solution to the problem. 
The point was that when people argue against AR, people say "why" and the answer to why is SRP and so you say why srp and then the response is because SRP.
We shadow accounts, but that doesn't address the issue of deciding whether corpus is spam or not.
Are you looking to block bots or human spammers? There can be different methods depending on which you are having problems with.
Fair enough. I had the impression you were still just developing the site and were not yet at the scale where it was worth it for someone to build custom spam solutions for your site, in which case the low hanging fruit is a quick solution for spam problems most sites have just starting out. If you are indeed getting hit with custom crafted attacks, then you'll need deep multi-facet analysis of the actual content being posted, and details of who is posting, and from where. Factors like: 1. Name 2. Email format and extension 3. Geo Location / IP 4. Past content 5. Presence of links in new content (and names/domains of links) 6. Weird formatting like S P A C E S between single letters, non-standards characters like repeated ***** ---- ~~~~~ etc. I'm betting there are libraries and dictionaries out there, the problem is that they have to be updated frequently, or you'll likely have to pay for a third party service similar to Akismet.
The problem is a difficult one. Which is why I looked at techniques used to detect email spam. Bayesian filtering looks promising, I was hoping to hear from others who had experience with this. Many thanks for your suggestions. Much appreciated.
In addition to all of the above, you could use a proof-of-work algorithm: 1. Generate N random bytes of data: `$random` 2. Generate 32 random bytes, store in a session variable: `$unique` 3. Publish `hash_hmac('sha256', $unique, $random)` and `$unique`. 4. Require the client to work out `$random` before their message is accepted. Validate that `$unique` was stored in the session variable (and only let it be used once). 5. Add a client-side script that works this out before any messages can be submitted. Let me know if you need help with the implementation down the line. (I'm booked solid until April.)
Negative sides of PDO according to your link: * API supports non-blocking, asynchronous queries with mysqlnd (PDO doesn't support) * API supports Multiple Statements (PDO; Not all of them) * Supports all MySQL 5.1+ functionality (PDO; Not all of them)
This is the answer I'd totally expect you to write.
Hahaha. I'm glad I didn't disappoint, then. :)
One thing I always implement on public facing forms (ie not behind an account login) is a token that expires when the form is successfully submitted or after a timed duration. This helps to prevent bots from scraping form structures and re-posting requests again in the future. They have to hit the form page every time they want to make a submission in order to get a new valid token. (Used in addition to the other things mentioned in comments here) You do have to account for situation where the user fills out the form but doesn't submit it for hours later, but then you just re-show them the form they've filled with their posted data with a fresh valid token.
&gt;This can be defeated with services such as http://www.deathbycaptcha.com. They have APIs, making it easy for automated bots to bypass them. Manually made recaptchas, yes, but googles new recaptcha is by far harder for bots to get pass. There are very few spammers that have the technical abilities to solve it properly in an automated way, and it doesn't always work. &gt;Writing software to bypass this is easy. Monitor the HTTP request and see what form data is being sent, and then replicate them. That way you know what parameters are being sent in requests. You're dealing with a hacker now, not a spam bot. Any good submission form will use javascript to make sure the form is filled out properly before sending it. The bot wouldn't be able to send a blank form, get the data back, and then re-submit without the honeypot field. This requires human intervention. Most human intervention isn't going to be on any level to manually get the post fields and re-submit manually. That takes a dev to do. Overall what you're saying is there's no magic bullet solution, and you're right, there isn't. You can only impliment various mitigations that will effectively operate as a solution, but you're going to have to make sure to have good system monitoring. There is no method by which to prevent all exploitation.
maybe you can hide it using javascript
&gt; One big issue from my point of view which they didn't touch on at all is vendor lock-in. If you use Eloquent (or any other Active Record ORM), and "embrace" it without hiding the ORM behind interfaces you control (eg. repositories, domain objects), you're going to end up completely coupled to the framework. Not to mention the inherent awkwardness in having to combine your Active Record ORM with a Repository layer.
I do find it useful to test that the relationship exists though (but nothing beyond the fact that the relationship exists) - guards against people accidentally removing or renaming a relationship without factoring in the consequences of doing so.. Would be great if laravel had some model test helpers which let you $this-&gt;assertHasRelation() 
You're overcomplicating in a number of ways: * The assumption that you're solving hard or unique problems. This results in you coming up with creative solutions instead of tried-and-true simple flows. * Separating Redis by CPU-core when CPU is never the bottleneck in the first place. It's always memory or network throughput. This solves the wrong problem and also creates inherent complexity by pushing that partitioning complexity to your clients. * Using multiple Redis databases when it sounds like each HTTP request yields 1 Redis read. Which means at least 2 operations per request, since you're needing to SELECT then your read/write operation. * Intending to create some multi-tier hierarchy of haproxy and PHP servers. You're right. PHP *is* the bottleneck. So keep that aspect simple. Your horizontal scaling approach there is totally fine. Don't over-complicate the rest of the stack to accommodate a PHP version you refuse to upgrade due to some shitty monitoring plugin not yet supporting php7.
What do you mean, there's no difference? One is sentient, the other is a script. Of course you'll have to analyze both cases much, *much* differently
https://akismet.com - It's generally designed for preventing spam in comments but I am pretty sure you can adapt it for checking anything that is being posted.
I created a classifier project for PHP the works well for spam: https://github.com/camspiers/statistical-classifier
I find your insults towards the guy whose job you can't do quite insulting. Making fun of his appearance and that he has "no degree" - what a joke. Then you come to reddit looking for help because you can't fill his shoes, talking about completing a codecademy course on html. Lmao. Hop off your high horse because you clearly don't deserve to think you're so great.
Or consider transform scale 0.0
To prevent something like bobby table you have to use **prepared statements**. While to avoid some useful database feature only because you're afraid of SQL injection would be ridiculous. Go on, prohibit the use of UNION and subqueries, because they could be used to exploit an injection too!
Did you really mean to say mysqlnd?
Yes. mysqlnd/mysqli are the same thing on any modern PHP installation. nd adds some new features like async querying. I'm basically saying unless you intend to switch off MySQL (MariaDB and Percona are API-identical) in the future, you should avoid PDO.
Of course. Eloquent uses PDO if I'm not mistaken. I still stand by what I said, though.
There's literally more material than you can process on the topic of "why SRP?" (and the rest of SOLID) Read a book. Listen to a talk. Take a class. Visit a Google. If you ask that question in a casual discussion/conversation and expect some mind-blowing revelation to come out of the response, you're going to have a bad time in software architecture. Sadly, most answers in this field are lengthy, complex, and ridiculously hard to explain ad hoc. If, knowing this, you still expect to be spoon fed on demand, you're probably not the type anyone cares enough to teach, and certainly not the type they care enough to prove wrong on the internet. (And I'm using "you" generically, by the way - nothing personal.)
Yeah that makes sense, thanks!
And still you fail to provide any reason beside a fake one about mysqlnd. 
Symfony is faster, check out benchmarks 
Thank god for reddit. Tried to install Composer for a first time and spent an hour trying to realise what was wrong with my openssl
Yes, IMHO it's still problematic. It takes long to show up, so long that sometimes you think it won't show up anymore. I've to force it to show up with CTRL-Space more than I want. Please vote https://youtrack.jetbrains.com/issue/WI-30743
Define "Overkill".
[Laravel](https://www.laravel.com) is the framework you're looking for !
gg responding to yourself
I suppose it's you who are playing these childish games with nickname cloning.
As suggested by others, mapping is probably the fastest and most maintainable way to go. You could then create logic which builds your models (or entities, if you will) from the structure of the database tables, their indexes, and their foreign keys. Much like Doctrine. I won't recommend using constructors for the find logic. Instead, pass in the necessary dependencies to the constructor, e.g. PDO. Create "find" type functions, which adds data to the model internally, but doesn't return the data immediately as e.g. an Array. Instead, create purpose-built functions for returning and setting the data. If you need all data as an array, I recommend doing `toArray` functions, which you may then customize for your specific purposes. interface AbstractModelInterface { public function __construct(PDO $pdo); } abstract class AbstractModel implements AbstractModelInterface { protected $pdo; public function __construct(PDO $pdo) { $this-&gt;pdo = $pdo; } } class Car extends AbstractModel { protected $id = null; public function find($id) { // ... Perform find logic here ... $this-&gt;id = $id; return $this; // Chaining } public function getId() { return $this-&gt;id; } public function toArray() { return [ "id" =&gt; $this-&gt;id, ]; } }
gg responding to me
Interesting. So, similar to [HashCash](http://www.hashcash.org/)?
because we need more excuses for companies+hosters not to adopt new versions of PHP.
You might consider creating your own framework based on for example Slim. Using composer to build your framework exactly as you wish, no overhead.
I would go for Symfony with Doctrine. I like the ORM approach far more than the ActiveRecord approach in Laravel. Although you could also use doctrine in laravel instead of eloquent...
I would also suggest Laravel as some others have. It has some really excellent documentation, follows best practices throughout its implementation and takes some of the best ideas from Ruby on Rails/Django and applies them to the PHP domain. Please avoid CodeIgniter. It was great back in its day but will lead to a lot of frustration when building a web application in 2016. As someone currently fighting CI's lack of following best practices and outdated ways of doing things, this is not something you want to use as your starting point. 
If you looking for a RoR inspired framework, see [Yii 2](http://www.yiiframework.com/)
What's a good userland implementation? I'm using the imap extension in a project (and honestly it's a bit of a PITA).
http://www.phptherightway.com
mysqli is slightly faster. But it's pretty much negligible, and will never be the bottleneck (obviously running the actual queries will always be more significant).
Horde_map (http://dev.horde.org/imap_client/) was mentioned a lot in the discussion on internals. Never used myself though.
&gt; If you are only using MySQL/Maria/Percona as your database, you'll be better offer using mysqlnd. PDO uses mysqlnd too. Mysqlnd is a database *driver*, not an access layer. I guess you meant to say *mysqli*?
I don't think OP meant raw PDO *as opposed to ORM*. If you use some ORM, it still uses PDO in the background. However, there are alternatives to PDO like mysqli (which I assume OP was referring to).
There are other frameworks than also support psr-7... I would not say a "majority" use diactoros
As I already stated a few times in direct responses to you, HTTPlug is PSR-7 implementation unaware. This is what interfaces are famous for. I don't know why you keep repeating the same arguments, if they have nothing to do with HTTPlug. Please enlighten me so we can avoid arguing about this over and over again.
I work for prismic.io, I'm talking about the official SDK :) Thank you for the answer!
You need to be careful of browser support with that, though.
I would say: it depends on your needs and user base. If you need something that is guzzle specific (for example custom timeouts can hardly be solved in adapters) or runtime configuration, then pick Guzzle. If you want to avoid installing multiple clients, try an adapter and stick to one chosen client. In case of the Guzzle 6 httplug adapter, it is not harder to install than installing monolog or stashphp. Other adapters might require more difficult configuration. Using Guzzle is not worst or better than using an http adapter implementation. Again: choose based on your needs.
Uh sorry, that was completely lost on me. The rest stands though: Use Guzzle.
How is it simpler that all your models have to understand the database on top of their main purpose?
In startups not only will you not be remunerated according to the value your work brings, you will be paid partly in funny money in the form of worthless equity.
1. /r/phphelp 2. http://php.net/flush
Fortunately I know this is not necessarily true. You're generalizing. Sure it may be the majority, thats why you gotta pick your projects if you can and really keep your eyes and ears open. No doubt is it tough to do, but its possible. 
&gt; Someone above mentioned sql injection use [PDO](http://php.net/manual/en/book.pdo.php) instead of mysqli 
If you can do it, it doesn't mean you should do it.
Diactoros currently has [over 200 dependents](https://packagist.org/packages/zendframework/zend-diactoros/dependents). Name any other PSR-7 package that contains an implementation of `ServerRequest` that comes close to that.
Hey terrker, Thank you for your comment. It isn't a compressor, the name "Smasher" might have made you think that it is a compressor, but it isn't. The idea is to use it programatically. Originally it was used to index cloud formation scripts that were stored on disk. It will parse the files assuming that they are JSON files. However there can be many usages, For example: - When parsing several directories of files it's nice to just provide a path rather than iterating through all the directories (which means more memory and usage of resources). - You may use it to index your directories and easily locate the place you are looking for. - Or may be you can use it to search files or folders based on some keywords. - Or you can use it where you need some sort of *virtual filesystem* What do you say?
Great comment, thank you! I have to agree with every statement you made. 
Tar also isn't a compressor, you used gzip or similar to compress your tar if you want compression to get a .tar.gz or something. The tar format was made to let you archive a directory structure including user/perms metadata and the like. The tar.gz or similar became a defacto UNIX standard because it offers both compression and maintains the hierarchy and metadata. &gt; The idea is to use it programatically. And that's why I bring up the many existing tar archive libraries; you can do just that with a tar archive. You can navigate the archived hierarchy and query various things about the filesystem inside. You could make a tar extractor that lets you only get files belonging to a given user or users with names matching a regex or you could strip links or rewrite the links on the fly during extraction or whatever. You could use it as a virtual filesystem if you wanted; in fact with FUSE there's a way to mount it so it's transparent to any tool/program that does normal file access. You don't even need to write the tar-&gt;real fs abstraction because someone else did long ago. 
Well a quick google would get you somewhere. But here's my custom function from my util system. This wont work under all host setups, but has proven pretty reliable. Top of your php script you need ob_implicit_flush(true); And here's the function you can send your message (output) to each time you want it to echo. Change the uSleep() time to have it wait longer before processing the next message (can be set to 0 if you want) function bSend($message) { echo $message."&lt;br/&gt;"; echo str_pad('',4096)."\n"; ob_flush(); flush(); usleep(1500); } edit: downvoted for helping the lad, ok..
I am just confused on how exactly I would put together my website strictly using PHP. I am not familiar with frameworks or anything like that. I would like to make it a site where I can put all my information that I want in it, and then I would ultimately like to make a blog or or possible forum where I can communicate with people I want to view my site.
From what I've read it's true for the majority of SV startups. Anyway, good luck.
&gt; The most significant problem is that most PSR7 packages are not complete. I am talking about this one. You keep making this argument together with HTTPlug and I don't see the connection.
yep! but the important point is that you're not checking the inputs so a bad person could essentially create an SQL query that could make your page do something you don't want, like steal all customer's credit card data or whatever. It's a bit of a classic mistake that's still [very common](http://www.infosecurity-magazine.com/news/sql-injection-possible-vector-for/)
Well, you learn everyday. I wasn't aware that you can do the similar with `tar`. Thank you for bringing it up.
Look, PHP is not a goal, it's a tool. PHP doesn't make a site for you. If you want a site, then you need a design and HTML pages. PHP won't draw HTML design for you. You have to do it yourself. PHP won't write texts for you, you have to write them yourself. Again, if you want to put your information - just put it. Without any PHP. As simple as that.
ha, true ... but it takes no extra effort to go clean, clean code doesn't take longer to implement.
I would recommend using a templating library, like Twig.
&gt; Could anyone point me in the right direction for how to learn debugging skills in PHP? 1. Install xdebug on your dev server, and use a xdebug-compatible IDE. Don't settle for `var_dump()`, `var_export()`, or `print_r()` when you could have a *real* debugger. 2. For better information when things fail and you *aren't* there, use exceptions (which provide a stack-trace if not caught) and consider a logging framework. Try to avoid `die() `or `trigger_error()`. 
I believe he (sarcastically) means "a 10-times-better-than-normal programmer".
Honeypot fields cut at least 99.9% of spam bot sign-ups on couple of my sites, so it's wrong to say they "don't really work". Of course it's possible to bypass them, but that requires manually adjusting them for the particular site, and that almost never happens.
In my experience, most spam isn't targeted. The bots are generically coded to find anything that looks like a contact form / shoutbox / forum and spam it. Yes, if someone wants to specifically target your site, working around your specific antispam field names is relatively trivial. But these fields work because in 99.9% of cases the spam isn't targeted. I don't think I've seen anyone claim it's a complete solution. It's a simple, quick to implement and effective first resort.
I disagree. Developers should be implementing CSRF as default anyway, to avoid Cross Site Request Forgery attacks. Which cuts out any need for honeypot fields in the first place. I failed to discuss this in the video. Some people are taking what I said above way out of context. CSRF is a real problem, as such every developer should implement CSRF protection. If you do implement CSRF, as you should, you would get the added bonus of stopping the same bots that honeypot field would. So there is no need to implement honeypot fields. Why does this work? Because a bot would have to pass the CSRF token in the POST request. And as the CSRF token and form name, can change per request, it's unknown to the bot, thus the POST request will fail because the bot wouldn't submit the CSRF token. Making the honeypot field not required.
But it does help curb spam. Seriously, I've read your question and responses, and you're being kind of a pain in the ass. You've shot down everyone's answer without giving so much as a thank you for their effort. If you're such an expert on spam control, why are you even asking for help?
I do appologize if I came across like that. It was not my intention. When I initially asked the question I was hoping to discuss more about dealing with spam at a contextual level. I didn't expect responses on basic spam prevention techniques - methods I already know and use. As such the question has gone off topic and it's difficult trying to tell people that I already know this. 4 years ago I was writing spam software at my last company. So I do have fair experience in evading spam prevention methods. Personally I feel the way to solve this problem is to deal with spam at the contextual level. It avoids the need to differentiate between human spammers, and automated spammers. But sadly nobody has raised this discussion. Again, I appologize. I have edited the description a little too.
"Hi, Matthew! I don't remember it clearly at all, but I'm fairly certain I was the person who treated you poorly. I just want to apologize to you directly. It wasn't my intention to hurt you, quite the opposite, but my intent is completely irrelevant and I am so, so sorry to have hurt you. I'm so glad that you've joined the conference family. I remember you as being a very quiet but delightful member of our dinner party, and I never even noticed that I'd offended you. I'm completely mortified that I left you with such a negative impression and I'm thankful that you've been gracious enough not to let that ruin your experience of the event on the whole." The apology is full of SJW-speak. I, for one, will wait patiently for a "Gamergate" in the PHP world.
CSRF does not prevent spambot signups. You should implement CSRF tokens, but it's for different reasons. It prevents fake cross site requests and phishing attacks. It has nothing to do with spambots. Honeypot field + dynamically generated input name for couple of fields eliminated almost all spam-bot signups for me.
CSRF is used to stop CRSF Attacks (I submitted a Facebook exploit that used CSRF in 2013 directly to Facebook and was paid for this, my name is on their Thanks page). As an added bonus it stops exactly the same types of signups as a honepot field would. A spider bot trawling the Internet posting spam is going to be halted by the CSRF protection because it also has to pass the CSRF token along in the request. If you have JS setting the value of the CSRF hidden field this completely stops bots (unless you parsed the JS, but I obfuscate it) - although a headless browser bot would defeat this (CasperJS/PhantomJS/Spooky). I am fully aware they serve two different purposes, but as developers we should be implementing CSRF protection and if we are, there is no need for honeypot form fields as the CSRF protection deals with the same problem as an added bonus.
Thanks for that. I had taken a look at Symfony's Config, but I think I was put off by how extensive the Tree-Builder was: http://symfony.com/doc/current/components/config/definition.html After looking at it again, that seems to be an optional way to validate a given set of configuration values. Everything else actually looks pretty close to what I had in mind, but likely with better code, better tests, and a larger following. I haven't seen the other two before. They seem pretty mature and likely have been used in the wild (Zend moreso). I probably should have done a little more research rather than a cursory glance. Still, the goal with mine was that I wanted to build something somewhat useful since I hadn't done it in a while. If the configuration market is already saturated with libraries, I'm fine with letting this one sit on the sidelines.
That is called "getting your foot in the door". And this strategy works since the dawn of mankind.
Supported since IE9. The only browser that doesn't support it currently is opera mobile **edit**: http://caniuse.com/#search=transform
One note for people is that "/" has always been a valid directory separator on Windows. Don't stress out about trying to figure out your platform or litter your paths with DIRECTORY_SEPARATOR, just use "/"
This is more like it. Out of everyone, this is the sort of response I was expecting. My initial idea was to develop a microservice and I wanted to using something like SpamAssassin to deal with spam at the contextual level. I wasn't aware there were libraries that communicate SpamAssassin though, so I'll be digging around on Google now :) You suggestions were very helpful, thank you.
Sorry Dave but as a paid Laravel shill it is *literally* my job.
I said IF you use JS to populate the hidden field for the CSRF token. Are you for real? You're going on as if I don't know what I'm talking about.
"huge hidden costs" - Typical Ferrara Hand Waving
sure, but now we have arrow functions in JS so binding to `this` isn't an issue anymore.
Where did I say CSRF has anything to do with JS? I said it's possible to populate the form field using JS, but it's not required for CSRF protection. What I said is every developer should be implementing CSRF by default. And if they do this, they get the added protection of stoping the same bots honeypot fields would. You're either too stupid to realize this, or your a troll.
&gt; And if they do this, they get the added protection of stoping the same bots honeypot fields would. You've been told already that it is not true. CSRF protection doesn't stop spam bots. 
&gt;edit: downvoted for helping the lad, ok.. This also drives me crazy, because instead of a downvote and a comment correcting you - it's a just a passive-aggressive "you're wrong". In other sub-reddits this doesn't bother me at all, but in here it really rubs me the wrong way.
Now it's time to show your colors champ. Give me an example of a case where a honeypot field would stop an automated bot, but CSRF protection wouldn't? Show me that both are required. I'm happy to get schooled here. I know for certain that if a developer implements CSRF, there is absolutely no need for a honeypot field. I am not saying it stops bots, I am saying it stops the same type of spider bots that honeypot fields stop. Explain away ...
what is this 'SJW-speak' you mention?
&gt; As an added bonus it stops exactly the same types of signups as a honepot field would. The bot can see the CSRF token on the form just like the user's browser does. They aim to prevent confused deputy attacks, not automation.
I am afraid I don't have that much time.
Another way would be a socket server. Especially if you are going to be interacting with the shell. Have JavaScript send the stuff over the socket and output it when it gets data back. More work though.
The apology includes a lot of references about how her actions affected you but not to the nature of the actions. Her wording makes it sound like having someone's feelings hurt is enough of a reason to give an apology or be punished (one of the main point of SJWs agenda). If you don't agree think about movies like "The great dictator", "The interview" or about all the corrupt politicians that deserve to be mocked until they they hang themselves. She introduced your feelings in her apology so she does not assume full responsibility ("if you were tougher you wouldn't have complained"). Another trait of SJW. Here's an example of a non-politically motivated apology: "I was an asshole and my behavior was completely unwarranted". Then again, what do I know. I'm a privileged white male :)
&gt; If Laravel was used to build the EXACT same application, would it be faster just because it's using Laravel and not CI? No. Laravel is slower in banchmarks. And besides, for complex applications dealing with databases, network requests, etc. framework choice is usually not really that important factor for performance. Your design for application logic, db queries and indexing, network requests, caching implementation affects performance a lot more than the time it takes to load the framework. If your site is slow, I'm pretty sure framework is not the bottleneck.
Ah great! Stumbled upon this some time ago, but it only supported a fixed list of packages. It really helps out when you're trying to set minimal version constraints for library dependencies.
Instead of dismissing me or my thoughts, you could perhaps start a discussion... Do you disagree with my assertion that the coupling between business logic and persistence structure is a huge cost (and is hidden because it's implicit)?
The problem, in my mind, is that if we "let the drama die", then the only discussion that will occur is pro-CoC. It will be pushed through as most of us are afraid of, and it will pass, unless the community is made to understand exactly what sort of threat this proposal is. Until the RFC vote finishes, this discussion can't end. And I suspect the RFC process will drag on rather intentionally, so people stop paying attention.
&gt; I have many applications built on ActiveRecord and they run fine for years with no problem. The kinds of applications that you build, are they mostly "build and deploy" or do you evolve them over time? Meaning do the business requirements change over time? My experience is that most software changes its business assumptions and model over time. There is actually a lot of research behind this, including the 60/60 rule (60% of a project cost comes post-delivery, and 60% of that cost is due to changing requirements - NOT new features). If we buy that, then we would want to build software that while maybe not optimizing for changing requirements at least doesn't hamper it, since that's 36% of the project cost (40% initial dev, 24% bugs + new features). &gt; There are many, many apps that are fine with this coupling and it will never be a problem for them. Absolutely correct. However if it does become a problem, it becomes a large problem. To the point that some have said that often when you run into those sorts of problems a rewrite is cheaper than a refactor. We can disagree onto the relative weight of the cost, the severity of it, but it definitely exists and is non-trivial. &gt; You make a lot of blanket statements like this and they are only true from your particular context and background, based on the specific types of applications you work on. I make them like that for a reason. There is a lot of nuance out there in the world, and if you constantly walk the nuance line a LOT will get lost in the middle. I intentionally go a bit further than I believe to make the point and get people to think. After all, the thinking is the important part. And if I got you to think, then I've done exactly what I set out to do.
CakePHP has been actively thinking about this for a few months, and there has been some recent work on this front by lead developer Mark Story. Here is an [issue](https://github.com/cakephp/cakephp/issues/6960) discussing it, as well as a [work-in-progress plugin here](https://github.com/markstory/cakephp-spekkoek). The Cake Core team is definitely interested in pushing out support for it as a plugin for our current major release, and almost certainly in the core for our next major release.
Cheers, thanks for reading, unfortunately in many companies this is true, it seems to be more in the SaaS closer to startup companies that they do sometimes, but it really depends on the culture alas.
"At the point at which we are now in, in theory, should someone wish to call for a vote of no confidence to have Samantha removed, that is obviously within their rights although I think most people have made their points here regarding Samantha including, in my opinion, the most important party involved, Matthew (Thank you for commenting on this here by the way) and I’m not sure much more productive discussion can be had on Samantha’s eligibility as secretary." This should end all discussions on the matter. Both parties were able to be adults and use proper communication to settle the issue.
I don't think you understand. If someone mugs you, and later returns and apologizes, *that person still fucking mugged you*, whether you kiss and make up or not. Your big heart and forgive-and-forget outlook on life has no bearing on what went down. It's completely and utterly irrelevant that these two are now amicable. The only relevant point is that Samantha insulted someone she didn't even know, without any provocation, in one of the most objectively offensive and flagrant ways that I've seen written about so far. Allowances are being made because she's a she. End of discussion. Had a man said the exact same thing to a female conference newbie, he would have been thoroughly and publicly chastised. He could very well have lost his job over it (it's happened before for less), and basically been turned into a social pariah. Whereas she managed to m'lady her way out of being a complete asshole to someone, thanks to a male-dominated community that has been groomed and conditioned to be so ultra careful not to offend women that they've effectively lost all sense of perspective.
Again that's not quite what I meant, I'm not totally sure im being clear any more. There's nothing wrong with emergent technologies, but it can get dangerous with over-saturation and fragmentation of effort. Just look at the Javascript world right now, where everybody is piggy backing off of each other, everyone trying to solve the same set of problems as each other but in "their own way". If there is a legitimate use case / problem that's needs to be or trying to be solved, there's nothing wrong with that. Like, why would I re-make Codeigniter and call it something different, and especially if I'm still using it's ActiveRecord and MVC interface? What does that solve exactly? Why shouldn't I just contribute my changes back to codeigniter OR in the case that its a bit too different, fork it and go from there? Because in the case of this ORM, it's going to have to go through all the same growing pains as all the existing ORM solutions out there, re-solving the same set of problems each one of them has already faced and solved in their long journey into being an established name. At some point at a job interview someones going to say "So do you have experience with with Eloquent" to which you say "No, I've used Blast and Propel though" can mean the difference between a job acquired and a job lost, exactly what's happening in the Node world last time I looked for work two years ago. "Do you have any experience with EJS?" "No, I've used Jade though" "Ok ya see we use EJS" "Ok sure, I can adapt" "No see, we need someone with years of experience writing quality EJS templates.. and without any examples..." To summarize: emergent tech is fine, solving problems that either dont have good solutions or falls far too behind the times is the primary game here. But at some point we need to take a step back and say "Ok, I built this {thing}, I like this {thing}, but should this {thing} be released as a legitimate solution that I am going to now have to maintain to keep up with emerging standards and demands? Or does some other project already do all this, and I can just contribute my experience to it instead, and help that grow as a better product?" Because man, the amount of abandonware I've been noticing these past couple years that brand themselves as the next big thing but the moment they're faced with a pull request that doesnt match their own coding style.. and then they get frustrated and just disappear off the face of the planet.. To round it out im not explicitly referring to Blast. I'm sure it's wonderful, in fact I dont see anything wrong with it other than I think its trying to be another hammer in an already excellent line of hammers. I am painting broader strokes with my statements here now
You can't really use PHP to create a website without HTML/CSS. The most you can do with PHP is output text since it's entirely serverside so yes I'd advise HTML/CSS first then PHP.
[removed]
Do you want to control or communicate with your pi ports from your application?
&gt; Personally this COC drama really needs to die. I'd love that. The sooner the COC is withdrawn from consideration, the better.
thanks; will give it a read
This out rage in your tone is hilarious. I don't have questions. I have agreements with the podcast that it seems that you haven't listened to or given any consideration to. &gt;you'll probably wish you had just done some lazy Sunday Googling many years ago instead of brushing off people who told you the what without the why you act as if I am the one asking why. When I am not. Listen to the podcast.
The discussion or drama I am not for is this business of ladies being "assaulted" at conferences by men making (in some cases rude) advances be it asking them out to dinner or in some justifiable claims, asking them up to bed. While some of these cases warrant the creeps being told to bugger off, other cases such as making specific groups of people feel welcome in a community that could care less what you are, you could be from mars for all we care, as long as you have contributions to the ecosystem of OSS, then by all means welcome. but the moment these SJW's say "a women was looked at a conference and now I must tweet about feminazi bs" is when Is ay this drama needs to die. let us deal with the actual issues at hand and not some twitter idiots.
[removed]
Thanks! I wasn't aware that such workgroup exists. I've sent them a proposal.
Sycophants and zealots.
I agree wholeheartedly with everything you said. We probably believe the exact same thing. Except, I'm of the opinion that these regressive people need to be met head on, because their tactics don't allow one to idly oppose them. As conspiracy-theory-crazy as it sounds, it's become very common for these sorts of political zealots of infiltrate powerful organizations and effect their political ideology from the inside. Look at Mozilla. Look at GitHub. Look at Reddit. These are three organizations that once were heralded as excellent tech companies with great things to offer. Now they are openly political, spending tons of their time and resources on pushing forth feminist ideology, instead of doing the technology work we all love them for. Leaders in the PHP community have become openly political, trying to oust anyone who doesn't believe exactly as they do. I co-founded PHP Mentoring, but late last year had my access to the IRC channel and GitHub organization removed because I criticized a [PHP Roundtable discussion](https://www.phproundtable.com/episode/being-a-woman-in-the-php-community) (which Samantha from this latest controversy was part of) as being a radical feminist echo chamber, and subsequently had a whisper campaign enacted against me, trying to get me fired from the company I manage. There was no justification offered for removing me from PHP Mentoring. Daniel Cousineau (who I invited to help lead PHP Mentoring) lied and said that the decision was made well before that, but I have clear evidence that my access was removed the day after I criticized that talk. He also said it was a "temporary measure", but I still have no access months later. I've been kicked out of an organization I founded because I have an unpopular political opinion. I've been told to talk to Liz Smith (auroraeosrose), who I co-founded with, about it if I want it reversed, but she hasn't been significantly involved in PHP Mentoring since the start. In my opinion, I was told this so that I wouldn't actually have any recourse. That is what is happening in the PHP community right now, and if nobody openly opposes it, it will continue. It's also worth mentioning, Anthony Ferrara (ircmaxell), the original proposer of this CoC, has since made accusations of professional misconduct against me, openly in #phpmentoring, in front of my friends and colleagues. He's accused me of abusing my moderator access here in /r/PHP to further my own political will, but really what he's complaining about is that I haven't shut down threads that have been overwhelmingly against the CoC proposal, making harsh criticisms of his proposal and his motivations. My fellow mods, and several people in the community, have rejected those accusations out of hand, as baseless. Instead of responding to what people are saying, he's made himself a victim, talking about how he's being harassed, and having death threats directed at him. But he'll offer no evidence of these things, because it's a more effective tactic if he doesn't.
Is contentful written in PHP? 
&gt; You make a lot of blanket statements like this and they are only true from your particular context and background, based on the specific types of applications you work on. While this may or may not be true, the coupling and costs of Active Record are pretty widely accepted as tight and large, respectively. Here is a short article by Steve Klabnik, who hopefully doesn't need an introduction, entitled [Active Record Considered Harmful](http://blog.steveklabnik.com/posts/2011-12-30-active-record-considered-harmful). It's from 2011 about Ruby on Rails but it's every bit as relevant today.
way to add meaningful conversation to the topic. 
I don't think it's possible. Derick, the new maintainer of the RFC, doesn't seem like he's interested in hearing anything from those opposed to a CoC. When I opened [an issue](https://github.com/derickr/php-community-health/issues/27), to raise a discussion, he basically said "No" and closed it without further discussion. He's also not been significantly involved in discussions here on reddit, or the IRC channel (#php-codeofconduct on Freenode) created to have these discussions outside of community channels like #phpmentoring where they might cause unneeded tension. The only people Derick seems to be listening to are people who agree with him already.
Yes. It's an interesting feature of employment that it is not ideal to pay everyone the value they generate, since if everyone was remunerated fairly there would be no surplus labour value for the employer. The most generous analysis of this phenomenon is that the surplus goes into building the company (as a vehicle for stable employment) but in general this surplus is used to bolster the wages of upper managers and owners. 
If that were true, then everyone would produce clean code. Heck, the article even has giant callouts to this effect: &gt; "we need to ship this tomorrow, so don’t do any of the unit tests, we will add those later.” and &gt; “I know this feature has a couple of nasty bugs in it, but I have been told to ship this today and under no circumstances should I allow this deadline to slip”
It's a good article, though keeping a more balanced tone would be ideal. The reader can probably be easily persuaded that you were unfairly blamed for errors in the payment system. However this emboldened and underlined shouting does you a disservice: &gt; Good article on why it's fucking stupid to say an employee who switched jobs because of employer disloyalty are they themselves disloyal. The excessive formatting is exactly how tabloid papers underscore the message they want to transmit to their audience, but your readership is probably rather smarter than that. (The article introduces a slightly different theme than the point you had previously just made, but seems to allow the anger to drift into it. If you can make this less shouty it might less undermine your broad points, which are sound). The points about unfair pay scales is an interesting one. There are two schools of thought on fixing that (three if you include "negotiate better", though that's not really much of a change): competency categories and open salaries. I should like to see more companies test open salary approaches. 
*Warning*: this article suggests some really bad ideas when handling money. Namely, using `float`s inside your value object. Don't do this, unless you enjoy being the butt of *Office Space* jokes. The correct method is to store, as an integer, the currency's smallest unit in the value object, and handle the mapping and conversion as part of the currency. E.g. `new Money(150, new Currency('USD'))` === $1.50; `new Money(452, new Currency('JPY'))` === 452¥. The currency class maintains an `exponent` map that pulls [directly from ISO4217](https://en.wikipedia.org/wiki/ISO_4217#Active_codes). If you're rendering it, then your conversion does the math (e.g. `$this-&gt;amount / pow(10, $this-&gt;currency-&gt;exponent)`) but all math and storage stays as integers. Currency conversion is nowhere near as simple as the article suggests, although it's directionally correct. Of all the places you don't want to introduce rounding errors due to a loss of floating point precision, it's handling money.
I think this is often due to developers not understanding what clean code is or how to motivate it in instances where it will take significantly more time to write than throw-away code. I absolutely love Uncle Bob's [Clean Code](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) book, but even more than that, his [Clean Coder](http://www.amazon.com/The-Clean-Coder-Professional-Programmers/dp/0137081073) book talks about the skills to be a professional developer. Skills which include being able to say "no" to poor management decisions and communicate and code professionally. If the reader must choose between the two, I would recommend the latter. And I do, to all junior developers who ask...
You should have a good understanding of the difference between active record and data mapper. With that being said, most people that don't understand the difference end up recreating active record (e.g. Doctrine 1, RoR, Elequent). After a while they realize it makes testing easier, but very slow. Then, they do data mapper. Then, after a few years and realizing that ORM's are a bad idea, they ditch them altogether. Then they make grumpy posts on Reddit and get downvoted. It's the cycle of life.