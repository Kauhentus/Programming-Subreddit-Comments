No, this is exclusively about the function and class state. You will not be able to persist objects in this way. For PDO specifically though, is this not addressed by persistent connections?
Not sure if I like this. This means you will be dependent on this package (not like a PSR-style dependency). Next to this it would be be cooler to have String Objects so you could do str.length() instead of strLength(). Or is it just me with a .NET background?
If only they'd get round to fixing basic type inspections - broken for 6 years and counting: https://youtrack.jetbrains.com/issue/WI-10904
you have a language error on the front page. (Mainpulation). Or is this a pun?
I can see the benefits for a production environment, but what about development? will your tests usually hit the cache rather than your fresh saved code?
How does those generics work? PSR-5 collection generics only allow for types for index values and "held" values. But even with those, how does PHPStorm knows that any collection method actually accepts index value, or return "held" value? Is PHPStorm shipped with hardcoded annotations for each method? There is some convention?
Union (\`|\`) have this unique property that you can create new type that is closed set of types with it. Inheritance? Can't be done. Even if all subclasses are final, superclass can't be final, thus new types can be added to inheritance tree. Interfaces? Can't control number of implementers at all. &amp;#x200B; Secondly union is something higher level type do to lower level type. Thus lower level type is unaware of any higher level type it's part of. This means that higher level types do not increase complexity of lower level types. (Unlike inheritance or interfaces which at least have to be listed in the lower level type)
imho if you're happy with the intersection types support you should seriously reconsider you're code style. Why would you ever want to do something like this? :/
"Interface segregation" from SOLID will also lead to many "capability based" interfaces, which in turn will enable writing code that relays on lower level objects to implement multiple "capabilities". Type intersection will ensure that this dependency is explicit.
This is going to be fun, as php doesn't have generics. Now we get a nice hardcoded list: ```` ArrayObject&lt;k, v&gt; ArrayObject&lt;v&gt; MyCustomCollection&lt;k&gt; // how will this work?! ```
Personal preference, no security reasons here. I also prefer using sprintf() as it just makes the whole message look cleaner and, for me, better readable.
`$cats = get_the_terms($post-&gt;ID, 'product-cat');` `if ( $cats )` `{` `foreach ( $cats as $cat ) break;` `$category_name = $cat-&gt;name;` `}`
Guess you will have the last category‘s name in the variable
Or the first, right? As it breaks immediately. Is there any logic to having such an odd setup?
Aaah, yes, sorry, the first
Similar but no. Your first example would only return the last name, as the string is being overwritten each loop. $cat_names[] = $cat-&gt;name; would store all the names in an array, but without the [] its a string, not an array.
Ah, sorry, yes. The first. Hm. I would probably access it via [0] directly. Easier to understand. But it depends on the array of course, if it’s even numbered.
It is the same if $cats array always has the first element with key 0.
I'd rather go for something like this: `if (!empty($cats)) {` `$category_name = reset($cats)-&gt;name` `}`
Wasn't there something posted on here a long time ago that stored a framework in memory so it didn't need to be bootstrapped on each request. I scoured my bookmarks and github stars, but couldn't find it. I believe it supported a few frameworks, Symphony was one. Does anybody recall this? If so so what was that and how is this different?
Ah, that makes me realise, the original will get the first `$cat-&gt;name`, even if the keys aren't 0 based and in order – that must be why its there. 
JFK, that's hideous:- firstly it's non-intuitive, and secondly it's only a quirk of PHP that $cat is visible on the assignment. Most programming languages it wouldn't be, and there's no guarantee that it will continue to be so. If I saw that in a code review I'd insist on a rewrite.
Yeah, probably :)
https://i.imgur.com/DK1ckG8.png
Oh, don't you worry, I hate it. I'd favour at the very least a `getFirstCategoryName($cats)`, but the whole project is filled with things like this, huge one-liners, no namespaces, no autoloading and application logic in the views. All I can do is set an example in my branch.
jms/serializer looks very useful when you have king of entity object on project (maybe provided by a framework), but in case you don't, Is it useful instead of \`json\_encode\`?
Not if you're in charge of it.
Ah, how i yearn for those real time things.
Yeah it's getting real this time.
&gt;Fair point. I would love an automatic boxing/unboxing solution in userland. Sadly, I think the neatest solution will be with a custom compiler or preprocessing. Speaking of preprocessing, I am actually curious at the possibility of automatic boxing/unboxing with Yay/Pre Macros. Its quite easy for constant scalar literals, but for variables in which the type is not obvious, this can be very tricky. The closest I can think of is to define a list of scalar methods that the macro can look up, but still wont be elegant. You've been writing pre macros for a long time, I wonder if you've found a solution for this. 
There is no elegant preprocessing solution. Currently, the Yay AST pass doesn't allow in-place modification of the AST. The brute-force option is to replace all `$thing-&gt;` with `resolve($thing)-&gt;`...
It looks like he farted and everyone knows it was him (pic related).
PHP does repetative work while other languages do that just once?
you probably mean php-pm (https://github.com/php-pm/php-pm) its not the same, because php-pm executes multiple requests in the same php process, whereas this approach by dmitry would keep the shared nothing benefit of PHP and destroy the memory between each requests.
PHP has the overhead of [reinitializing and shutting down on every request](https://software-gunslinger.tumblr.com/post/47131406821/php-is-meant-to-die). Other languages like NodeJS can just initialize once and not die every request. 
I would suggest committing to one project/product &amp; creating it from ground zero. This way you will learn PHP &amp; have a reward at the and + I think this method of learning is the best one out there. There are a lot of courses online which offer training but I suggest look for [interactive ones](https://stude.co/405150/learn-php).
so sad, that this just works with collections.
I feel your pain. I've just picked up a project for someone which seems to consist of nothing but a single god object who's functions are called by function names allocated to variables. Similar logic - it looks clever but it's a nightmare to maintain as you can't do a straight search for a function name to understand what the execution paths are. I've seen this a fair few occasions, generally it's code written by a young developer who is either self-taught or has never worked under supervision - with the result they've never had it hammered into them that writing code is as much, if not more so, about communicating with the next developer (who could well be yourself in a couple of years) as getting something running. 
Brilliant! :) Been using the nightly 8.2 for a long time now ;)
Thanks, fixed.
For arrays I use [https://github.com/tightenco/collect](https://github.com/tightenco/collect) all the time.
Build PHP? Do you mean the source code?
It’s nowhere near full, but thanks for the suggestion!
Yeah, that is cool. It's not the auto-unboxing I was talking about though, and includes all the scaffolding I was talking about (but in an opinionated way). So, better than nothing, but not the ideal.
Good question! It's mostly readability and united syntax. One guy asked also in comments under the post where I replied with examples: https://www.tomasvotruba.cz/blog/2018/09/17/7-tips-to-write-exceptions-everyone-will-love/#comment-4100904216
Thanks for chiming in. I think I’m on 7.2.5 in prod, but could probably deploy the latest in about ten minutes. Any chance it’s Docker-specific? I can’t imagine why it would be, but then again I’ve see it cause other unexpected slowdowns. It also seems to be in the ballpark-same speed as `php -S` locally (not like that’s a terribly useful comparison)
fpm would totally be the easiest thing, though I think it has a stable version for older php versions (&lt; 5.4). But above that I would agree that it is preferred.
&gt; I know 5.2 is incredibly insecure but I have a WP plugin which needs to be maintained for those with really old PHP versions No you don't. 5.2 has been unsupported for almost 8 years. Bump the minimum PHP version to a supported one and make your users upgrade. Imo actively supporting old versions like that makes you part of the problem.
[Copyright Taylor Otwell](https://github.com/LiveSugar/framework/commit/17e494dfa9ffe4b1dc038edd47acc97908857e57#diff-37854d19817c792316d481f5beb93cc7R3) xD
A new framework from someone who doesn't know how to make a link on reddit… :/
...what?
https://github.com/LiveSugar/kernel/blob/master/kernel-zamyatin.php This is an abomination. Ever heard of code standards? Unit tests and testability? Security? SOLID, at all? One class per file, PSR-4 or at least PSR-0 (or any PSR, for that matter)? Normally I'd vomit saying this, but **even the WordPress devs would've done this better.** I don't even know where to get started, I couldn't find a single line I'd use in any of my projects ever. It's like those old PHP3 projects we wrote, just that you replaced "function" with "class" (in some cases). Oh no, you used "Class". And "class", depending on your mood. Everything is static and tightly coupled. This isn't even a "framework". There is no "frame" (and very few "work"). It's a bunch of insecure functions that follow no kind of coding standards, use statics and globals all over and use really weird patterns and logic (if you can call it "patterns" and "logic") I'm sorry to say this, but I wouldn't have posted this here. This is garbage. No person should ever come close to the idea of using it. Normally I'd say it's okay because you've learned a lot with it, but you've surely didn't learn anything with this one, if anything, you've lost some brain cells putting it together. I suggest you take a look at the bigger frameworks like [Symfony](https://github.com/symfony/symfony) and [Laravel](https://github.com/laravel/laravel) and understand what frameworks are. And then take a look at PHP-FIG's [PSRs](https://www.php-fig.org/psr/) and follow/implement them. Understand [Dependency Injection/DI](http://php-di.org/doc/understanding-di.html), get an understanding of [SOLID](https://en.wikipedia.org/wiki/SOLID), learn to [unit test your stuff](https://phpunit.de/getting-started/phpunit-7.html) so that others can verify that block of garbage code is working at all. That'd be a good start. Before you don't know any of these concepts, don't try to write a "framework". Imagine a beginner gets the idea that this is a useful and well-written piece of software. Not only will you desinform him about how actual modern PHP software looks like, you'll also expose him to security risks and unmaintainable software.
**SOLID** In object-oriented computer programming, the term SOLID is a mnemonic acronym for five design principles intended to make software designs more understandable, flexible and maintainable. It is closely related to the GRASP software design principle. The principles are a subset of many principles promoted by Robert C. Martin. Though they apply to any object-oriented design, the SOLID principles can also form a core philosophy for methodologies such as agile development or adaptive software development. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
[S](https://github.com/symfony/symfony)ymfony, Laravel, SOLID, PSRs, GRASP. Very clever words. But this, just a belch of a drunk man. I will demonstrate how easy and simple programming can be. And how useless additional abstractions.
Strong words for someone who can't successfully reply to the comment they're trying to rebuke.
It's not like what we're used to, which means it's not right.
The world needs framework that are easier to use than those that are at the moment.
Speed and simplicity. This is what other people neglect.
Laravel is quite friendly, Slim is super easy and simple, CodeIgniter is basic. There's a lot to choose from and a lot of people worked on them for a reason. Why are they hard to use? What's the advantage of this one compared to them?
Yes, Laravel is a very good framework. But routing should be done with your hands. In addition, you need to work a lot with the keyboard. I tried to minimize the work with routing. I also do not need to create many classes. The idea is that there is only one large class in which the methods are loaded automatically depending on what functionality we need.
That's it. In PHP if you want some kind of cache persisted across request you need to use APC/Xcache/Memcached/shm, if you don't want to parse 1000 files each request you need opcache (which is now part of the core IIRC), you still need to load that cache on every request. In other languages (or if you get rid of cgi) you can keep your whole process and store stuff in it. If I wanted in-memory cache in go, I'd just allocate a slice in my Server type and it'd be done. There's quite a lot to gain in PHP by just keeping the initial state of an app in memory.
I agree it sounds somewhat aggressive. Sorry for that!
I could understand your opinion if this was the GPL, but may I ask what issues you have with the LGPL?
Can I see one of your "final products"? You're talking a lot of big words for someone that barely understands anything about modern software architecture.
&gt; actively supporting old versions like that makes you part of the problem Yes 100000% this. Maybe it's still acceptable to support 5.6 but anything later is a disservice to everyone. Not only from a security perspective but also from a resources/speed perspective IMO.
That's not what that pull request is about though. Afaict the proposed feature makes PHP preload some scripts, making function and classes available to all requests. This is a step forward from what opcache already does, but objects still need to be instantiated and they still die every request if I understood it correctly. The benefit you're describing from platforms like Node.js is that the app itself handles HTTP requests so that many things are kept alive between requests. This approach is more aligned with what [ReactPHP](https://reactphp.org) does (not to be confused with the Javascript library for building interfaces).
В следующем посте, я буду выкладывать примеры того как использовать. Я понимаю, что это непревычно. Но я хочу обратить внимание на способ пострения архитектуры приложения. Да у меня есть слабые места, но в пример я покажу в чем именно моеё превосходство.
In the next post, I'll post examples of how to use it. I understand that this is not the case. But I want to pay attention to the way the architecture of the application is built. Yes, I have weak points, but for example I will show what my superiority is.
Thank you all for your comments. Whatever they were, they were helpful.
You bring your work to us and receive valid criticisms. You then insult everyone who replies by implying that we are incapable of understanding your ideas and insult other tested and proven projects by calling them a drunken belch. You need to start acting like a professional if you want to be taken seriously.
Was that really necessary? Did you expect us all to tell you how great you are, and move all of our apps to your framework? Instead you respond to criticism with rude remarks and become uncivil when people call you out on it.
I would never advocate using bash aliases BEFORE someone knew and understood the raw commands. However, once they do, bash aliases can increase productivity and make repetitive tasks less of a pain. Using your argument would you also recommend people DON'T use code snippets? After all, if they went to another system they'd start typing invalid code.
You are the best. But PHP must burn in hell. Then the world will become a little better.
You are the best. But PHP must burn in hell. Then the world will become a little better.
You are the best. But PHP must burn in hell. Then the world will become a little better.
PHP and the rest of the world are just fine, you seem to be the only one with a problem. I'm done talking with you now, I hope you have a better day.
lol, yeah PHP is the problem here, not your fundamental lack of understanding of security or standards.
I would have sounded worse. This is way worse than the Apex thing part 2 we had 12 days ago. I can't, for the life of me, understand dudes who decide to create a framework without even trying to understand why the other contenders are like they are. It seems so self important, to the ridicule. 
Good eye, I would have never seen that
Nah. But next time tell us how you really feel. No holding back.
Is the world right? In the world there is no disease of death? Or hurt and die is normal?
It's objectively not secure, which means even if the rest was ok, it can't be right. And the rest is far from good. And lean to hit the reply link under comments, ffs.
Sorry, by "world", I meant world in the context of web development.
Package management, framework inter-op standards recommendations, and frameworks using tested design patterns, these are all very good things. "Pure PHP" is a fallacy, as all of these other frameworks and packages are written in PHP. PHP is getting alone just fine with all of these. Frameworks like yours result in poorly designed and impossible to maintain applications filled with security holes and customer data breaches.
what?
&gt;You could atleast get the name of the language right. It's Go. Not Golang. [https://en.wikipedia.org/wiki/Go\_(programming\_language)](https://en.wikipedia.org/wiki/Go_(programming_language)) &amp;#x200B; &gt;**Go** (often referred to as **Golang**) is a [programming language](https://en.wikipedia.org/wiki/Programming_language) created in 2009 by [Google](https://en.wikipedia.org/wiki/Google) &amp;#x200B;
Thanks for proving my point?
Yes, I did. Clearly this is going nowhere so now I am really done. 
Others have already commented on the code quality so I'll just skip to the Git usage. I'm not trying to offend you but this might be the worst commit history I've ever seen - commit messages are completely unreadable and provide no useful information about the changes (why they were done, what the changes contain etc.). If you ever find yourself working in a team, you'll coworkers will want to murder you. [This](https://github.com/LiveSugar/framework/blob/master/save.sh) is what I'm talking about: #!/bin/sh -e # Create commit /usr/bin/git add -A DATE=`date +%d-%m-%Y' '%H:%M:%S` /usr/bin/git commit -m "$DATE development" /usr/bin/git pull origin master /usr/bin/git push origin master If you don't even bother to write a commit message yourself, then what's even the point of using Git? Compared to [what you used to do 4 years ago](https://github.com/xezzus/webcmf2/blob/master/save) in one of the previous versions of your "framework", it's clear that you haven't learned anything about proper VCS usage.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [LiveSugar/framework/.../**save.sh** (master → aec6240)](https://github.com/LiveSugar/framework/blob/aec6240c72563ca739248b9ea9f29770744a4f08/save.sh) * [xezzus/webcmf2/.../**save** (master → d48edb5)](https://github.com/xezzus/webcmf2/blob/d48edb5779cfb13069108ec66ecbca057f8d1610/save) ---- 
That's not the limitation of PHP, but a way http servers use it. Use http server like php-pm, aerys etc and you no longer have this overhead
Who gave you the right to talk about in what mood I am. Maybe you live under my bed?
It's even better when your log messages are all searchable in Kibana. ELK is pretty amazing. 
How are code snippets even the same thing as using aliases?
you're an idiot, gtfo
the idiocy in this post alone makes my eyes bleed.
Lol, how pathetic 
There is no superiority. You're confusing "simplicity", or what you, personally perceive as simplicity with stable, secure and maintainable software. Your "framework" has no superiority. Put a site online with it and I'll hack it for you, I found like 20 different attack vectors and I'd find more if I'd look further, most probably. Simple as that. There is no superiority in being hacked. You're not even making things simpler, your "framework" has no tools, there is no form validation, no real abstracted persistence layer, there is nothing. As said, it's a bunch of horribly written functions no one should ever use.
Why .NET when there is C#? Why Rails when there is Ruby? Why Django when there is Python? Rinse and repeat for any programming language ever. The programming language doesn't know what you want to do. PHP can be used for anything, including console applications. I'm running whole stock importers with it. So it comes as minimal as possible. Library authors tailor software for specific needs, that creates the eco-system of a language. Good, solid and rich frameworks are the meat, the core of a programming language. Without good frameworks and an active, collaborating and competent community, the programming language behind it will go nowhere. All of the things I told you are interop. PSRs make them interop. They extend each other. All of them together create a stable and clean eco-system of software. Some parts are required. Some parts are optional. The ones I told you are the absolute minimum. You don't need to introduce a (unsecure and absolutely unusable) solution to a problem that has been solved by many different, bigger, more functional, more stable, well tested frameworks long time ago. 
Security, stability, maintainability, scalability. And speed. And simplicity. That's what you neglect. Your ignorance doesn't help here, click the links in my first, big response. It helps you.
Do you think he'd accept PRs? 
I just wanted to say congrats on putting the effort to write it :) Writing a framework is a learning experience like all things in life. We programmers often look back at our own code with disdain more often than not given enough time. Happens to all of us and it means we are improving. My advice is dodge the personal attacks and learn from the constructive criticism :) Have a great weekend! 
Now that you mention it, were you entirely sober while responding to or writing most of these comments?
Who do you think you are kidding, Mr /r/dodit_solutions ?
Site [http://example1.bework.info/](http://example1.bework.info/) Code [https://github.com/LiveSugar/example1](https://github.com/LiveSugar/example1) &amp;#x200B; Hack, if your words, something is worth.
Can you share your opcache configuration and how many files an average request autoloads (approximately)?
thanks for another framework. good for you. sometimes please try making something good for someone else too 😊
You might wanna add some description text
Nothing here is representative of a real application, website, or completed creation. What you've provided us to 'hack' is tantamount to 3 static HTML page. I really won't even bother poking at things since, as mentioned, this is essentially 3 static pages. All this proves is that when you build nothing, then you're nothing will be free from vulnerabilities.
This post is in response to tantrum he threw in this thread: https://www.reddit.com/r/PHP/comments/9hsbzr/created_new_php_framework
You can trust a German to explode with critics right into your face :)
&gt;Do yourself a favor and give up already I do not pretend to win
You’re right, because it is not a game or battle. It is just you making a spectacle of yourself in the saddest way possible
&gt;You’re right, because it is not a game or battle. It is just you making a spectacle of yourself in the saddest way possible Why do you think that I look stupid, and you're smart. I see stupidity and anger. Desire to humiliate and insult. Rise up due to the failure of another person. All this characterizes the php community. Maybe I specifically showed a weak code to see people's reactions. I was wondering how much in the php community of humanity and mind.
You're really on a roll with [shitposts like this](https://www.reddit.com/r/PHP/comments/9hud68/golang_win/).
You are evil, and evil must burn in hell.
Op can't take criticism
There isn't any moderation in this sub is there!
&gt;Op can't take criticism I had to make a decision, continue to study php or go into another programming language. One of the factors is the friendliness of the php community. I created a php framework and decided to find out how the php community will react to this. I'm very upset with people's behavior.
&gt; Why do you think that I look stupid, and you're smart. I see stupidity and anger. I didn't start this. No one else in any of these threads started this, just you. You shared your framework with us, claiming that other frameworks were a drunken belch and then insulted us by claiming we were not capable of understanding your work. We understand it. We understand it fully and we reject it as it is a huge step backwards. You are the one getting angry and stupid, not me.
if you realized what you have done, you won't ask this question. You own if.
It seems you do not understand the difference between an exclamation point and a question mark.
&gt;if you realized what you have done, you won't ask this question. You own if. I want to see people's opinions about themselves
OpenSSL is a popular cryptography library. In order to use native libraries in PHP, somebody needs to develop an extension that exposes the desired functionality to the interpreter at runtime. So, the PHP OpenSSL extension exists. I’m also pretty sure this is the wrong subreddit and you should be asking this at /r/PHPHelp.
You are the best
lmao, Thanks god. Hahaha
Your file upload function does not appear to sanitize file names, so let's say I upload something called "../hello.php" it might not appear where you expect it to In your "kernel" file the function calls to `call_user_func()` don't look too safe to me, I'm not able to provide a working exploit right now but someone else might be more familiar with this
Is it easy to extend this framework?
Ah, I see. It can see how that would cause you to feel that way. First off, way to jump in and go and learn! Making a framework is a great way to learn the nuts and bolts of a language! As with any group of people, the PHP community has all types; introvert lurkers, savant coders with no social skills, charasmatic leaders, helpful problem solvers, open source contributors who get no credit, teachers, plus a few self-righteous ***holes. As a feeling-based person, and a PHP veteran of over a decade, I have had a few negative reactions to my work that hurt my feelings, ego or sense or self. My advice is to not throw the baby out with the bathwater. There are great people in the PHP community. They are the reason why I love PHP and still code with it today. Also, those negative reactions actually helped me more than they hurt in the long run. They are the reason I started writing tests, and stopped over abtracting my code along with lots of other changes through the years. I hope you find a good home in the Go community, but you don't have to give up on PHP yet if you don't want to. There is a good community here.
You can not execute the file hello.php, even if I give you the opportunity to download it [http://example1.bework.info/](http://example1.bework.info/) &amp;#x200B; Prove your point. Do not be unfounded &amp;#x200B;
Thanks for the positive comment
Only if they contain at least one backdoor for him to use!
You mean r/phpshowerthoughts?
👍
I also thought this would be easy to crack. I tried... and failed. But my uploaded files ended up in the github repo though :) ( 1c3b39b )
Sami was really really easy to use, while phpDoc seemed a bit more complex at the time I was looking for doc gen tools. I'll take a look at it now, thanks!
Nope, no problem. phpDoc seems to be the standard recommendation, I'll take a look at it. Thanks!
What does Twine do? I've never heard from it before, lol I guess that I shouldn't worry then, unless Symfony 4 has it bundled and I'm not aware of it. And is good to know that with 2 files I can generate the docs I want/need. It also supports generating MD docs, which is awesome to keep on the repo. &amp;#x200B; Thanks!
Features of the System currently being built. \^\^ &amp;#x200B; Subscribe / Unsubscribe. Password-less Accounts. OpenVPN Portal and Gateway. Quote Messages like Twitter. 
In other languages you can install a "monitor" that reload the code when changes are deteced.
I didn't want to waste to much time on this (there are many possibilities with the `require` I explained above, as you can control the included file via user-input in many possible ways through your direct $_GET-handlers at the bottom of your "kernel") You can upload any kind of files and any size (there is no time limit as it seems), so I basically just started this: https://imgur.com/a/Vid76Cx I'll keep it running, delete against it or not, I don't care. Have a great day!
Well, I don't think his server has unlimited file space. You can send any Octet-Stream with your request and it will be uploaded. His nginx avoids null-byte injections, which surely is not the case for other server configurations by default (a think against which _he_ protected, but he doesn't document how others can protect against it, so it's still a gaping security hole)
The first thing I thought when I clicked the video was "Prontera". I don't exactly understand what this is. Can you explain?
Good. A great example. I will keep in mind and correct it.
But as far as I understand, so, you can attack any site. You promised to perform an exploit.
I wanted to showcase the Wireframes and the Beta of the Software I am building on, So I thought of a Jolly Music from a once loved oldies game, Like the Ragnarok or a Bastion Software Game. :)
I "promised" nothing. I can upload script files: http://example1.bework.info/upload/6/d/4/1/6/1/5/8/a/c/7/3/7/3/6/c/b/d/2/b/5/3/1/3/5/d/5/f/d/b/a/9/4/b/7/0/8/e/2/b/c/f/7/a/f/8/f/e/4/5/4/5/d/9/8/5/9/7/e/1/7/4/d/b.file so I can mis-use your whole website as a storage, I'd just need to write an adapter. Read this please: http://php.net/manual/en/security.filesystem.nullbytes.php Having .php at the end of a dynamic include doesn't protect it from letting other files of the file system being included, considering the permissions are there and the server configuration allows it. It doesn't, in your case (stated that above already), but that surely doesn't mean it won't in every case, right? The amount of static $_GET handlers you use in your code reek of security holes. Filter your input data. Make it only accept exactly what you want to accept. If you look at the first picture in my imgur link above, I uploaded a 1GB file. Not only did you allow uploads all over the site, you also allowed files bigger than 1GB, random, binary files (those could be harmful executables and viruses for your underlying OS). Then look at the request time, it uploaded for **19 minutes**. I was able to **upload 1 GB file for 19 minutes to your webserver, via your website**. Understand what problems that leads to.
You missed the point by a mile. Even einstein didn't woke up a morning thinking "I'll just reinvent half of physics for fun." I'd love to see a completely different framework made by someone with a deep knowledge of the current PHP, but unsatisfied with it. That would be almost garanteed to solve an actual problem, and at least not be a ten (15?) years step back. But juniors understanding a tenth of why framework are the way they are today ? That's just overblown ego, self-importance, and straight out ignorance.
soundTeMP did an awesome job back then. Can you explain what exactly your software does?
Dude, I have other things to do than to show you how to make websites. It's weekend. I've explained everything, over multiple posts, in detail. I've given you links, I explained exact attack vectors and how you'd exploit them. I'm not a hacker, I'm the exact opposite. I have to secure my applications against them. Obviously if you know one, you know the other, but I don't enjoy hacking (especially since it's legally restricted in germany and I already came in contact with this). I'm done here. Everyone can see what's up. Everyone can link back when it's required. And assess for themselves if they'd ever want to use any of this.
You can not execute the file. I allowed the download. You have not bypassed the defense. You did what you did, what was allowed. Your words are not confirmed by deed.
I give permission to hack my site. So that you can confirm your words with deed. Do not be unfounded.
So, it doesn't matter to you that I can mis-use your whole webserver as an own, personal file space? Or upload viruses to your webserver? I don't think you understand what defense means. Remote-code execution is not the only thing that makes your server attackable. If I chain this with the require-failure and a null-byte injection, I can also execute it on several server configurations. The only thing that protects you here is nginx, not your code. I've already said that multiple times now.
 opcache.enable = 1 opcache.file_update_protection = 0 opcache.interned_strings_buffer = 16 opcache.max_accelerated_files = 16229 opcache.memory_consumption = 128 opcache.revalidate_freq = 0 opcache.validate_timestamps = 0 I think it’s in the ballpark of 100 autoload requests based on what I was seeing in xhprof. Which seemed high to me, but dependencies add up I guess. 
Are you comparing him or the Apex framework creator with Einstein?
We're all volunteers, and most of us are in USA timezones. We depend on the community to report posts and check them as they come in. I also routinely prune posts that are low-quality. Do your part, report posts.
Now that you say it, it makes sense. Interesting.
Ah goddamnit, I meant Twig not Twine... Sorry for the confusion.
I ported [Retrofit](https://github.com/tebru/retrofit-php) to PHP. It allows you define your API as an interface, and inform the http client through annotations. It's not for everyone, but it can help speed up development and provide consistency. https://github.com/tebru/retrofit-php
Security by obscurity is no security at all.
Didn’t someone a while back had an interesting proof of concept that could mix C &amp; PHP code? PHP code was preloaded like this MR. Basically you could write extensions with some parts in C and some in PHP. This could potentially open up core development to more developers that only knows PHP. 
Yes. I know the old saying, and I see it’s connection here, but the truth is, that saying was alway mean as hyperbole to push back against people who think obscurity is sufficient security. What I’m wondering is if obscurity in conjunction with quality work adds anything. 
\&gt; isn’t there some security in having a custom framework whose structure and source code are known by no one outside the dev team? That's called security through obscurity. The answer is no. Security comes through the implementation. If you cannot show the code because it would break security then it should be considered completely broken. &amp;#x200B; You're also risking even more security issues as the major frameworks has had **tens of thousands** of people looking at the code. Hundreds of thousands of sites rely on those frameworks. Corporations with major dev teams use them. If there is a security hole it will be found and patched. Your homebrew framework? It'll be looked at by one person, you. No one else because you want your security through obscurity and anyone else seeing it would break that. &amp;#x200B; So yeah, the answer is a big fat no. &amp;#x200B;
There is likely more risk with having built your own framework that hasn’t been reviewed than one that is heavily used, and reviewed by the community. 
Still not getting it. I am very of the old adage and the benefit of using community-vetted code. That’s why I included the use of established components in my post. I’m clearly not advocating security by obscurity ALONE (or even advocating anything for that matter - it’s a question), rather I’m wondering if obscurity on top of quality work adds another layer of security. 
&gt; what security benefit is there, if any, to developing one’s own custom framework, using portions of others if so desired (e.g., Symfony components), on the assumption that the privacy of the code adds a layer of security? You can obtain security through sheer accident of not repeating others' mistakes. You can avoid your software being easily fingerprintable by script kiddies scanning for Joomla 3.4.5 installs in 2018. But unless you've been designing software with a security-first mindset for all this time, and [nothing in this list or its supplementary articles would have surprised you](https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software) when you set out to start your framework, I'd be immensely skeptical of any purported security benefits in this situation. I frequently do code audits-- formally, "third-party software security assessments"-- and I run into a lot of homegrown frameworks. Most of them (especially the ones written in the mid 2000s and tweaked to support newer versions of PHP along the way) utterly fail to prevent SQL injection, store password securely, or implement secure password resets. (The latter is my favorite way to break into administrator accounts.) I'd like to propose an alternative spin for your circumstances: **It's not the custom framework itself that's valuable.** It's the experience of creating your own framework that lets you understand the underlying mechanics of existing frameworks and develop more secure software. (And if that's not true, check the linked article and make it so.)
That’s a helpful response, and actually hits on something that led to me pondering this, specifically the ability for scripts to be created that could potentially scan for known vulnerabilities should there be a lag between the discovery, the patch, and me or on old client updating their system. However, if the system architecture is unknown (and built otherwise correctly), doesn’t that obscurity severely hamper the ability of a script kitty scanning the site and finding something?
However, even tanks use camoflage.
No. Not ever. One rule of thumb in security is that you must assume a malicious agent know's how your system works.
My 2 cents is that you do get it but do not want to hear that obscurity doesn’t make a difference. If your code is secure, it doesn’t make a difference whether it is obscure or not. People pen-test for a living. This isn’t to say your homebrew framework *cant* be secure but obscurity isn’t an added layer of security.
Hmmmm - under that assumption, isn’t security impossible? If I assume that the thief looking for my gun safe knows where the safe is, knows what kind of safe it is, knows how that safe works, and knows how to break into that safe, then why have a safe at all? Under this metaphor my question could be phrased like this: which is more secure - a safe any thief can see, or one that’s hidden and hard to find?
Security scanners suffer from an [unknown unknowns](https://www.brainyquote.com/quotes/donald_rumsfeld_148142) problem. I was at a "writing Snort rules" presentation at a B-Sides event a few years ago, and the presenter was demonstrating an exploit detection for a Joomla file upload vulnerability (i.e. uploading `.php.` files allowed you to upload malware) by only blocking `.php` (not `.php3.` or `.phtml.` or anything else Apache would recognize as a PHP script). When I asked why he didn't include these other common evasion techniques, he retorted, "Well, 99.9% of attackers aren't going to try that." I'm taking an opposite approach with [Ward](https://ward.paragonie.com) (my company's WAF product): In a future release, it's going to include a feature will learn what legitimate traffic looks like, and then block everything else. That will allow Ward to be compatible with custom frameworks without us having to know what they're doing.
&gt; If I assume that the thief looking for my gun safe knows where the safe is, knows what kind of safe it is, knows how that safe works, and knows how to break into that safe, then why have a safe at all? The latter assumption is the one that attackers must not know: The key. https://en.wikipedia.org/wiki/Kerckhoffs%27s_principle
Absolutely not. RSA, cryptographic hash functions, and many more are all open source. PGP etc. Sure -the inputs are secret -the keys and passwords etc, but if these things weren't open source, no one would use them because no one could trust them. Neither is more secure. Hiding it provides no benefit.
No, it’s a matter of time before a vector is discovered. Implementing your own leads to oversight and whereas you can cherrypick components into your own framework you cannot guarantee those cherrypicked components are faithfully implemented or don’t carry unwarranted side effects. It doesn’t add security, but does give you a false sense of security.
Great point - I hadn’t connected the concepts of site security and hash functions. 
Well, I’d say you’ve all talked me off the ledge. I’ve been using community frameworks for a while now, and just recently started pondering this question after cleaning up a horribly hacked WordPress installation. I didn’t have any desire to spend time rolling my own again, but thought the question was at least worth asking. 
Metaphors between code-things and real-world-things often break down and become useless, and this gun one does pretty fast. The code for public key cryptography is all open source, publicly readable, and yet it's secure. So that's one concrete example of a malicious agent being able to know how a system works, and still not break it. More generally to your root question: yes, there is some value to *not* being an overly-complex oft-used framework - while there may be, as others have cited, "thousands of pairs of eyes checking it for problems", to believe that all those pairs of eyes (and more importantly, all the pairs of hands writing it) *actually know the entire system inside out and are smart enough to figure its flaws* is an entirely different proposition. A lot of those devs are going to be *rubbish*, and not be aware they are. With so many hands in the kitchen, that broth has so many more chances to have bugs in it. Plus, these hands-on guys aren't going to be trawling the longstanding code, looking for fresh problems, they're going to be fucking around with the shiny shiny. Malicious actors - they'll be scanning *everything*. So, no, this face value perspective that "more devs on the problem means it's more secure" is far from a home run. It means it may not fall victim to the usual exploits, but the sheer complexity of it introduces far-harder-to-spot problems too. Your self-rolled thing (as long as it isn't anywhere in the realm of the complexity of these established frameworks, of course) *yes* won't be possible for an attacked to just fire up BreakInToJoomla4.6.exe and get in to you, but as cited by someone, there are *a lot* of basic problems you might not be aware of - the things that EstablishedFramework.com *will* have covered. TL;DR while, sure, if we're talking academically/intellectually, I'll agree with the other nerds in here that "security by obscurity" is a stupid idea, and should **never** be your actual and entire approach to being safe, *in the real world* it does provide some benefits, yes. Largely depends on: are you any good?
It can by not having known holes to exploit but can just as likely fail to reduce the attack surface as much as the collaborative approach would. I suspect that in most cases rolling your own would be less secure but that in theory it can be slightly more secure through the addition of obscurity. 
That’s honestly where I landed - am I good enough? Truth be told, I don’t think my confidence in myself alone is high enough to risk a client’s data, which is why I posted that everyone here has sufficiently convinced me to back away from this ledge for now.
Docker dont make it more difficult. It exactly the same. Or course, if you have a reverse proxy in front of your php app, debugging is harder bevause the reverse proxy usally have pretty low timeout. But who has a reverse proxy in a local dev box.
Good real-world metaphor that gets to the heart of my question. Man, I wish I’d thought of that.
How many security holes have been found in closed development streams like Windows over the years?
Hmmmm, great, great point. 
I am only now returning here after OP's original comment to my post. I def thought he/she was just being immature / pathetic. Didn't want to give the edgelord more attention than I already had. 
There are advantages on a custom made framework. Security is not in the top 10. 
I’m ultimately a programmer to make money, not because it’s my greatest passion. More important to me than the code or the community are my clients. I asked the question not because I wanted to create something bespoke, but rather out of wondering if doing so would provide my clients with greater security. The preponderance of opinion here seems to be I could potentially do more damage than good. It would be beyond obtuse to ask the question and then ignore the feedback, right? I greatly appreciate your comment and everyone else’s. 
Good point. No, I honestly meant it as a question. You see, I’m the homeschool equivalent of a developer, i.e., a solo freelancer who doesn’t spent much time with other developers. I’ve been doing this long enough to remember when no one batted an eye at PHP, HTML, and JS (CSS? What’s that?) being found in the same file. Now, everyone put down your torches - I haven’t done that garbage in over a decade. I’ve leaned and grown and tried to keep up, but I think it’s foolish to turn your brain off and just accept what “everyone” thinks. I’m new to reddit, and I thought it might be the right place to ask this (SO already has its share of questions that don’t actually belong on SO). 
Is it possible to undo an array\_pop()? Without having to manually enter the value again?
$x = array_pop($arr); array_push($x, $arr); // or $arr, $x, who knows // Or $array[] = $x;
I guess people call it "return early" to avoid nesting. https://arne-mertz.de/2016/12/early-return/ https://en.wikibooks.org/wiki/Computer_Programming/Coding_Style/Minimize_nesting http://blog.timoxley.com/post/47041269194/avoid-else-return-early
https://en.wikipedia.org/wiki/XY_problem What exactly are you trying to do?
**XY problem** The XY problem is a communication problem encountered in help desk and similar situations in which the real issue ("X") of the person asking for help is obscured, because instead of asking directly about issue X, they ask how to solve a secondary issue ("Y") which they believe will allow them to resolve issue X. However, resolving issue Y often does not resolve issue X, or is a poor way to resolve it, and the obscuring of the real issue and the introduction of the potentially strange secondary issue can lead to the person trying to help having unnecessary difficulties in communication and offering poor solutions. The XY problem is commonly encountered in technical support or customer service environments where the end user has attempted to solve the problem on their own, and misunderstands the real nature of the problem, believing that their real problem X has already been solved, except for some small detail Y in their solution. The inability of the support personnel to resolve their real problem or to understand the nature of their enquiry may cause the end user to become frustrated. The situation can make itself clear if the end user asks about some seemingly inane detail which is disconnected from any useful end goal. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
I'm just sitting here trying to learn about arrays, there are no higher thoughts at this moment :) I was playing with array_pop and wondered if I could reset the array to its origins.
I did store the value, good thinking! 
Oh, right! Ok, the thing is that there are a /lot/ of basic data structures wrapped up in PHP arrays. They're pretty powerful. push and pop are operations that apply to [stacks](https://en.wikipedia.org/wiki/Stack_(abstract_data_type)), and when we treat an array as a stack we generally don't treat it as - well, as an array, because that gets messy. So typically we either apply push/pop to an array, or we get elements via their index (`$var = $arr[2]`), or we treat the array as a dictionary (`$var = $arr['key']`), but we don't mix and match those addressing systems unless we have a good reason. Hope this helps, or that someone explains it better.
Everyone is focusing on security as in the number of exploitable holes your application will contain. Using this definition, there is no security by obscurity — those holes exist regardless if anyone knows about them. But if you’re small, you may benefit from being custom built. In other words, unless someone attacks your project in particular, you‘re better off using custom than Wordpress or Drupal, especially if you can‘t keep up with regular security updates. Your custom framework can probably be better than software with estabilished bad track record (like WP), but not vs solid software like Symfony. The numbers and severity of security issues is one, but the likelyhood of people making an effort of finding them is another thing. And in my opinion, security isn‘t an absolute, but a healthy balance of wht works for you. In closing, framework can only get you so far. Even if its perfectly secure, there is also your own code on top of it, and that is more likely to be expoited. 
[removed]
Last year I got told some pages had messed up. Seemed a political statement being made by one country to the country our website was aimed at. Nope, just script kiddies claiming to be Anonymous and getting to a random website (one of our least popular ones!) I checked, and you could type any username &amp; password to enter the admin area. No staff had checked that, and nicely nobody ever had trouble getting the password wrong, since the outsourced developers built the website many years ago. This was even more simple than SQL injections. Blessing was that in adding a video to our pages they kept breaking the admin area &amp; locked everyone out of the CMS after changing 10 pages. I did a patch of the code within an hour, and repaired the page content from a backup I happened to have. The pages could've been bad for a couple of days before we noticed. Then I repeated the code patch for 8 other brand websites that used the same framework. It took away my dev time from new work for the day. It's good I was able to drop everything &amp; solve it. It didn't convince the bosses I should do a code audit. Trying to make more money was a priority. 
While it's true that most of the scanners you'll encounter on a publicly-facing site will be looking for known vulnerabilities in known applications, security-through-obscurity means nothing if someone runs a [fuzzer](https://www.owasp.org/index.php/Fuzzing) on your application. If a tactic automatically fails against an attacker using novice-level techniques to break in, it's probably not worth serious consideration.
Generally it's held that security through obscurity isn't really security at all. Logically there must be some value in the sense of it being harder to exploit because knowledge is scare, but that's minimal help if it's intrinsically insecure and doesn't help if an insider wants to compromise it. I don't necessarily buy the argument that proprietary software is insecure simply because a bunch of open source devs didn't get to see it and poke around, but there's no reason it shouldn't be thoroughly in house.
You are incorrect. And your interpretation of the adage is also incorrect. Obscurity by itself is no security. If given the choice of "out in the open and secured" vs "hidden, secret, AND secured", you should choose the latter every time. You will never, ever be able to make sure there are no vectors to your code. There are zero days, there are updates that you missed, whatever. Obscurity adds one more layer of security. That's why even though I encrypt all my sensitive data with industry standard AES, I don't store the blob on a publicly accessible server and announce it's location.
It is objectively false that obscurity doesn't make a difference. There are countless cases of security infiltration that would have been thwarted had things been obscured. Secrecy is rule number 1 for any kind of security. The less people know about your operation, the more difficult it will be to compromise. Had Iran been successful in obscuring more details about their nuclear program, Stuxnet would not have worked. The development of stuxnet required detailed knowledge of the inner workings of their system. Sure, properly patched and secured systems would have also stopped it. But that doesn't negate the fact that you can't write a targeted virus for a system that you don't have any details about.
I think it actually depends. For example, if you roll your own super crappy, insecure CMS, rather than use Wordpress, you are probably less likely to have security issues. Because there are countless bots out there scanning the web for vulnerable Wordpress sites, sometimes they are searching for zero days that you have no way of knowing about. The huge majority of security issues come from this, rather than direct targeting. The best security would be to use the CMS and then obscure it to not show up to scanners as the CMS they are looking for.
My advice is to use something like Wordpress, but as part of your security plan, you should also implement some obscurity. There are plugins to wordpress for this. If automated scanners can't detect that you are using wordpress, then you won't end up hacked when someone discovers a zero day and sets up a scanner to find as many vulnerable sites as possible. This is by far the most common thing to happen to WP sites. No one was targeting you in particular, but they had a scanner looking for vulnerable sites and you just happened to be found.
Reverse engineering is also a thing as well though. Someone can take your program, turn it back into code, and find vulnerabilities
Sorry, man, I can’t stand Wordpress. I’ll stick to using a mixture of Symfony, Laravel, and Lumen, depending on the job. Nobody found “me”, they found a WP site and I was hired to clean it up. I appreciate the thoughtful response, but WP is just too opinionated for my tastes. 
That was a inadvertant. To be clear, my comment wasn't directed at you. It was concersational and in response to OPs series of, how you put it, "shit posts".
I wasn't suggesting wordpress. I just meant use "something like wordpress" (i.e. an open source framework) but add a layer of obscurity after you have done everything you can to secure it.
Ya, it's a thing. But it is more difficult. And it is really hard to reverse engineer software that you can't find or don't know about. Which is why I usually work from an open source product, but take additional precautions to obscure what I am using.
Well the Software / System is based mostly on Cryptography like the Hashing and Encrypt / Decrypt of Request Tokens, Messaging and Applications of their own Web Works, and also a Friendly Neighborhood based Cryptography System wherein they can usually create their own Copy of the System API, To link their Database Works or UX / UI based Interface Dev Projects into my own Platform / Software. The Project is based solely on Software as a Service. And most importantly keeply intact'd with Cryptography and with Security purposes, So that the Server of the Mother System isn't that purely attack-able or vulnerable to the Users, and / or Hackers. Anything might be compromiseable anytime soon, So the Secret Formula for this Software is besides than Cryptography is highly based Confidential. :)
#1 JSON was just an example, basically encode an object to a string, then decode it back. #2 So, from this I take it that I could: Encode ( class object), send it over to another server, decode (string), and I get the first object class, correct? #3 What else does it do? 
Custom frameworks do not add any layers of security. I worked with a guy that developed customer framework he ensured us that everything is secure and we can store credit cards in plain text so we did, later when guru quit we ordered penetration test and the security team sent us a dump of a table with credit cards. The point is with custom framework a bunch of hackers can go through your system and you will not even notice. With open source solution at least someone will notice and hopefully you can patch the system in timely manner.
I don’t really know where to start with that. That’s like saying, “I once trusted a guy who assured me that fire can’t hurt you and I got burned, so fire must be useless”. I’m sorry you trusted an idiot. I suppose I should clarify that my question assumes the person doing the dev work isn’t incompetent. 
No, not really. Aside from the security implications, I’m yet to see a good business case for rolling your own. It’s *far* more likely there’s a security vulnerability in your code that’s never been properly analysed/pen tested. Have you ever run a proper penetration test on somebody else’s project before? None of it involves visibility of the code - there’s plenty you can break attacking forms, cookies and the sever config.
Name *one* real word advantage, running the assumption you’re building a regular business application and not the next Facebook. 
You're making a specialized application and require certain abstractions not found anywhere else. It kinda sounds like the next Facebook. I did found this situation at my current work 10+ years ago. We made our own framework and slowly expanded with our requirements.
Obscurity can be an excellent supplement to proper security. Making yourself a less obvious target reduces the number of attacks against your systems. It can be the difference between getting hit by an automated zero day attack and having a chance to patch your systems in time. Often part of security is just making yourself a harder target than your neighbor and obscurity does that when all other things are equal. On the other hand obscurity as a primary defense is a terrible idea. 
Fantastic point about penetration testing. When I posted the question I was mostly thinking about scripts scanning for known exploits, since that’s what I see routinely popping up in logs. 
Add assertion for number of SQL statements performed within (a region) of the tests. No matter how good you are, how well you know your framework: `n+1` problems happen to the best of us. Got bitten one time enough that I implemented a facility so I can check the code for it and immediately can see "SQL'splosions".
Make my tests as dumb as possible. I don't write lots of abstractions to keep them short, I keep them as *transparent* as possible. Whenever possible, I should not have to leave a test function to see how the test is constructed and asserted. Any sort of abstraction has the propensity to couple multiple tests together, which can lead to more headaches than it's worth.
[Mutation testing](https://en.wikipedia.org/wiki/Mutation_testing)
**Mutation testing** Mutation testing (or mutation analysis or program mutation) is used to design new software tests and evaluate the quality of existing software tests. Mutation testing involves modifying a program in small ways. Each mutated version is called a mutant and tests detect and reject mutants by causing the behavior of the original version to differ from the mutant. This is called killing the mutant. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
A single provider for all the urls of the app to test they return 200. Adding a test with this is just adding a line in the file. I also have a bit more complex version with roles handling.
I tried it with https://github.com/humbug/humbug around half a year ago. Unfortunately I couldn't get it to work, the details escape me unfortunately. Time to try it again. While googling for it I also found https://github.com/infection/infection so I guess options are on the table!
A generic `tearDown` which ensures all jobs are dispatched. The details are a bit non-straightforward: - all critical code has to run in (database) transactions and there are cases where a background job is created for, well, background processing. - But: you can't expect a background a job with IDs from the database to pick them up _before_ the transactions are commited, can you? :) But jobs get dispatched immediately and may be picked up immediately for execution, resulting in jobs not finding their data - on top of that: there are _multiple_ background job systems (native Framework and an external solution =&gt; we just all love how technical debt evolves) - So there was created an `ApplicationTransaction` concept which encapsulates the database transaction and once its commited successfully, only then the background jobs are dispatched Basically, jobs created for certain critical parts of the application are not immediately dispatched but are "queued" in memory, waiting for the successful database transaction to be commited. However due to the size of the project, it's possible to "forget" that you may call code requiring "surrounding" code taking care of this so there's a `tearDown` which ensures all in-memory job queued are empty and the test will fail otherwise. Re-reading this, it sounds totally complex and also feels wrong. But here we are!
I use `Mockery::mock()` in `tearDown` on all classes remotely dealing with Guzzle. This is a project with multitude of different Guzzlehttp configurations for various external networks. Forgetting to disable it can have disastrous effect when an (integration) test triggers at. For this all the HTTP clients using guzzles have to be most and foremost disabled in `tearDown` which immediately bombs when you call them (I love Mockerys defualt behaviour for that). I hate to manually maintain this list but I haven't yet found a smarter/central way to do it.
Holy, that's nice! Any brief code to share?
You really have your head far too far up your own ass.
I think tests are good to know if one specific scenario works but you need an analysis tool to cover all possible scenarios. This is very simple you do the minimal business scenario works and the analysis tool find the bugs, you don't need to duplicate anything. &amp;#x200B; I used to have loads of tests to cover every single scenario and it was a waste of time writing them, it was a waste of time executing them, it was a massive waste of time refactor all of them.
Shouldn't that generator also include null? You'd override the default every time which would miss a case
### Background A few years ago I started a library called [EasyDB](https://github.com/paragonie/easydb) with the aim of helping companies move away from `ext/mysql` (even if some of their developers cling to "clever one-liners"). Part of the design of EasyDB was to be secure *even if developers don't think about security*. The resulting API looked like this: foreach($db-&gt;run("SELECT * FROM foo WHERE bar = ? AND baz != ?", $bar, $notBaz) as $row) { var_dump($row); } Since this uses prepared statements in the background, so long as you aren't contaminating the query string, you don't need to worry about SQL injection. [Even in edge cases](https://github.com/paragonie/easydb/blob/0677dc8f0e6aebe5322956386fe75a9626deb9b2/src/EasyDB.php#L48-L55). After a while, /u/Shadowhand designed a feature called [`EasyStatement`](https://github.com/paragonie/easydb#generate-dynamic-query-conditions) to support dynamic queries (i.e. `WHERE foo IN (?*)` -&gt; `WHERE foo IN (?, ?, ?, ?)` depending on the number of arguments). Over time I planned on building a query builder on top of that (tentatively called Decibel, since it would be abbreviated as dB), but I ended up back-burdering that project 3 years ago and never picked it back up. /u/shadowhand created one called [Latitude](https://github.com/shadowhand/latitude) which is very similar to what I had envisioned, but is far more fleshed out. ### What is EasyDB-Cache? Instead of invoking `PDO::prepare()` multiple times for the same query string, this caches the `PDOStatement` object in memory (where the cache index is derived from the query string, using SipHash-2-4). That's literally all it does, but it can have a substantial performance impact if you're sending the same queries in a loop but with different values. Since it extends the `EasyDB` class, it's backwards compatible (as of EasyDB 2.7.0, at least). Any projects that used EasyDB can use the EasyDBCache interface instead with minimal refactoring, and probably shave minutes off e.g. data migration scripts. ### Why Submit It Here? I think it's a good example of a simple implementation of a straightforward concept. While a lot of the open source software I share here looks [like](https://github.com/paragonie/sodium_compat/blob/master/src/Core32/Int64.php) [this](https://github.com/paragonie/sodium_compat/blob/master/src/Core32/Curve25519.php), that level of complexity isn't usually necessary. Also, nobody (to my knowledge) has implemented this for EasyDB yet, so I decided to do so. So if you're using EasyDB, give the EasyDB-Cache alternative a try. It may improve performance.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [paragonie/sodium_compat/.../**Int64.php** (master → 7b73005)](https://github.com/paragonie/sodium_compat/blob/7b73005be3c224f12c47bd75a23ce24b762e47e8/src/Core32/Int64.php) * [paragonie/sodium_compat/.../**Curve25519.php** (master → 7b73005)](https://github.com/paragonie/sodium_compat/blob/7b73005be3c224f12c47bd75a23ce24b762e47e8/src/Core32/Curve25519.php) ---- 
Not at the moment - it's still at the "conceptual" stage of implementation while I hustle on other projects/waste entirely too much time on Reddit ;) I'll post PHPUnit examples when I get around to it - @arswright on GitHub.
You are correct. *Implementation left as an exercise to the reader.*
Can vouch for infection
[`humbug\humbug`](https://github.com/humbug/humbug) has been deprecated in favor of [`infection\infection`](https://github.com/infection/infection). Also see https://github.com/theofidry/awesome-mutation-testing. 
This is exactly what I did in first example. And no, you can't just undo stuff, you have to implement it. When you use array pop you are taking value from array and removes it, the value of array is changed. You can change it back so it looks like original one.
Using builder to build test data, great when testing validators.
hmm are n+1 so stealthy and creepy? no matter how bad one is queries in loops are hard to go missing. and there is code review. 
Last week's work. I've got a project that receives some messages about users (created, modified, deleted, new password), and updates Active Directory or mail server (Zimbra) accordingly. While writing it I wrote some code to test various scenarios on actual AD and Zimbra servers. To automate it and to make possible to run them in isolation without actual communication with AD or Zimbra, I: * made RecordingActiveDirectoryClient as a proxy to ActiveDirectoryClient (both implementing ActiveDirectoryClientInterface) * run manual tests on actual AD server and recorded all method calls (and their order) with arguments and results * saved recorded sessions to files (serialized) * made ReplyingActiveDirectoryClient which takes recorded session and replays it, that is: checks the called method name and call order, checks the arguments passed and returns corresponding result * moved my manual tests to PHPUnit and feeded them ReplyingActiveDirectoryClient instance instead of ActiveDirectoryClient * done the same for Zimbra client
There's a whole host of exploits which are framework-agnostic. Most known are XSS and SQL injections. If your framework is vulnerable to these the secrecy of the implementation is not relevant. 
Don't remember the specifics, but it happened. AFAIK it made it into production, passing review. Well, won't happen again :-) Also :it's still interesting to see how many statements certain parts (blackbox testing) generate. The project / we devs did and do benefit from this indie in general, not only for the n+1 case. 
Wrote a test method that auto creates an object, clones it and tests that all the properties of an object have been cloned. 
I did this gist a few weeks back: https://gist.github.com/tgalopin/d628ad6afaf90af004077d0f3d811335 It's using Symfony but I think it's quite understandable even when you don't know Symfony. Super useful.
Sounds interesting. Do you have an implementation example?
I'm using this in a Laravel code project, thus it's specific to it. This is the trait-code,the setup is done in the `TestCase` class by calling `setupSqlCountListenForQueries`. Before a region, call: `sqlCounterReset` To check, call: `assertSqlCount` or `assertSqlQueries` The former is used regularly, the latter sparingly but has its places for very specialized dynamic custom queries. ``` /** * Including this trait will **automatically** start counting SQL queries * for every test. * * Use `$this-&gt;assertSqlCount(..);` to test for them. * * @mixin TestCase */ trait SqlStatementCountAssertionTrait { /** * Recorded SQL query events * * @var QueryExecuted[] */ protected $sqlQueryEvents = []; protected function setupSqlCountListenForQueries(): void { $this-&gt;sqlCounterReset(); DB::listen(function (QueryExecuted $event) { $this-&gt;sqlQueryEvents[] = $event; }); } /** * Assert the number of SQL queries performed. * * After "reading" this value, the counters are reset. * * @param int $expectedCount * @param string $msg Will only be displayed if the assertion failes */ protected function assertSqlCount(int $expectedCount, string $msg = ''): void { $numSqlQueries = \count($this-&gt;sqlQueryEvents); if ($expectedCount === $numSqlQueries) { $this-&gt;sqlCounterReset(); return; } if ($msg) { $msg .= "\n\n"; } $msg .= sprintf("Expected number of SQL statements of %d does not match the actual value of %d\nQueries:\n\n%s\n", $expectedCount, $numSqlQueries, implode("\n", array_map( function (QueryExecuted $query) { return sprintf('[%s] %s', $query-&gt;connectionName, $query-&gt;sql ); }, $this-&gt;sqlQueryEvents ) ) ); $this-&gt;assertSame($expectedCount, $numSqlQueries, $msg); } /** * Assert the actual SQL queries (without bindings). * * After "reading" this value, the counters are reset. * * @param string $expectedQueries * @param string $msg Will only be displayed if the assertion fails */ protected function assertSqlQueries(string $expectedQueries, string $msg = ''): void { $expectedQueries = trim($expectedQueries); $actualQueries = trim( implode("\n", array_map( function (QueryExecuted $query): string { return $query-&gt;sql . ';'; }, $this-&gt;sqlQueryEvents ) ) ); $this-&gt;sqlCounterReset(); if (!$msg) { $msg = 'SQL queries mismatch'; } $this-&gt;assertSame($expectedQueries, $actualQueries, $msg); } protected function sqlCounterReset(): void { $this-&gt;sqlQueryEvents = []; } } ```
Using [Characterization tests](https://en.wikipedia.org/wiki/Characterization_test) (sorta) when working with legacy code. It usually goes like this: 1. Create a new function/class/whatever with the behaviour you want to test by duplicating existing code (not changing original code ... yet). 2. Rewrite newly created code to move dependencies outside (mostly using DI). 3. Write a test for the newly created code and check if it behaves as expected and/or find out how it behaves given different data. 4. Refactor and repeat until everything relevant is know/proven. 5. Replace original code with newly created code. 6. Ensure that stuff still works. With all that in place work on the actual feature/change/bugfix can start. YMMV though depending on the specific type of legacy code.
**Characterization test** In computer programming, a characterization test (also known as Golden Master Testing) is a means to describe (characterize) the actual behavior of an existing piece of software, and therefore protect existing behavior of legacy code against unintended changes via automated testing. This term was coined by Michael Feathers. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Build a file system class that handles GET, POST, FILES requests from the user. Then route the requests as behaviors: get folders, get files, create folder ect inside the class. Use AJAX to send the HTTP requests to the class and route back data in a JSON string to display/update results in different parts of your document's interface. Use session storage to keep history ect of actions taking place.
Thanks. Indeed, it looks Laravel-specific, but still thanks for sharing. I like the idea. :)
Very usefull tool for working with **OpenTravel** Alliance xsd templates. Better performance is very welcoming change. My system is processing tons of XMLs using jms/serializer, so 35% is huge difference! Thanks :)
Either that's totally bonkers or totally brilliant. I think it's brilliant! How? That coloring looks like PhpStorm how can you make it display that way? Is it actually snake_cased but hid the `_`?
Nice what did you use for the ui? 
[Non-breaking spaces in the test name](http://mnapoli.fr/using-non-breakable-spaces-in-test-method-names/) :) public function test a user can add a product to a wishlist() { // ... }
I did this years ago and nobody seemed to care: [https://github.com/Level-2/Aphplication](https://github.com/Level-2/Aphplication) &amp;#x200B; Gives about 1600% performance improvement in a base Laravel install. &amp;#x200B;
Can I pose the question of if such a library can sit between say WordPress and it’s dB? I’m personally fascinated with dbs and performance, and I’ve always wanted to add an in-Memory element to my projects. Given WordPress stores an immense amount of data in the dB that is not often changed, surely this is somewhat possible?
My open source bot code: [https://www.pastiebin.com/5ba7d198d60d5](https://www.pastiebin.com/5ba7d198d60d5)... I know it needs improvements whipped it together...working on new smart ai loop for bot holes and new multiple request support
What are the performance implications?
Doing selects in a loop like that is a performance killer, not good big-O. That could easily be improved using a single select statement with a WHERE IN clause.
Performance improvement for CakePHP users who create their table fixtures by loading in schema from the database. Rather than creating the fixtures on each test, the linked code does it just once. Unit and Integration tests went from taking nearly 3 minutes to 13 seconds for us. https://stackoverflow.com/questions/52118092/improving-cakephp-3-unit-test-performance
I'll add PHP-VCR for testing remote HTTP calls. Useful for unit testing APIs, web services, etc.. https://github.com/php-vcr/php-vcr
Mind blown. Didn't know this is possible. Is there something you have to change in your INI settings for this to be possible?
I *think* you'd have to hack the core code to replace their DB class with this wrapper.
One of our unit tests will fail if it's slower than the original EasyDB `prepare()` method. This uses `sqlite::memory:`, to be specific. * Calling `prepare()` 100,000 times on EasyDB took roughly 0.070 seconds. * Calling `prepare()` 100,000 times on EasyDB-Cache took roughly 0.014 seconds. SipHash-2-4 is very fast.
The killer use case isn't doing SELECT queries in a loop, but rather, INSERT and UPDATE queries in a loop.
This looks great do you have a GitHub link to the source?
Those are non-breaking spaces. Alt + space on a mac, alt + num pad 0160 on windows IIRC. 
That's so .. I'm missing words :-) Unfortunately alt-Space doesn't insert the hard space in PhpStorm for me (only in other/regular editors like vim). Hmmm.
That's pretty nice. I'm still stuck on CakePHP2 on some pretty big projects and banging my head against the wall every day and loosing hair too.
Oh, are you critiquing the example code? `run()` returns a 2D array. It doesn't keep querying.
Aww I didn't realize.
Unless I'm terribly mistaken, the performance advantage here is the database roundtrip. EasyDB uses database-prepared statements instead of doing them so at client level. I'm not here to discuss which approach is secure. WordPress does not send the placeholder query to the database to get the prepared statement, so you won't get any advantage caching such requests. You can cache the full query at memcache level or similar(for which Im sure you'll find a plethora of plugins for).
There is maybe a PhpStorm shortcut highjacking the actual key?
It is available everywhere :)
Nice. Thanks for sharing. I got it on my list for whenever I'd need something like this.
I see. Oddly I can't type the non breaking space in Ubuntu Gnome, Alt Gr + Space seems to be intercepted and opens up a menu.
An alternative https://github.com/ellisgl/GeekLab-INIConf
Gentella free bootstrap 3 admin template
no, not open source
This is pretty neat, this will work with any framework?
What about the date pickers, selects, etc?
Give me a break. I was posting a "gotcha" for others to learn.
Oops. I knew I forgot something. Doing that now.
This gotcha is better fit for /r/phphelp
Here's a sneak peek of /r/PHPhelp using the [top posts](https://np.reddit.com/r/PHPhelp/top/?sort=top&amp;t=year) of the year! \#1: [Join the battle for Net Neutrality! The FCC plans to kill Net Neutrality and it will affect everyone unless YOU fight for it!](https://www.battleforthenet.com/) | [4 comments](https://np.reddit.com/r/PHPhelp/comments/7eoq2o/join_the_battle_for_net_neutrality_the_fcc_plans/) \#2: [Please stop closing your PHP tags](https://np.reddit.com/r/PHPhelp/comments/8tq4h7/please_stop_closing_your_php_tags/) \#3: [Making /r/PHPHelp better, Pt 2.](https://np.reddit.com/r/PHPhelp/comments/8jejyf/making_rphphelp_better_pt_2/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
I don't know bro, maybe because it's about PHP, testing and I find it creative, awesome and life saving, but you can classify it as most stupid if you want. Got anything constructive to say? 
Sorry, yes, the WprdPress (and many others) emulate prepared statements. It's not quite as secure as prepared statements. In WordPress case though, it's a quite messy piece of code with regex sprinkled around everywhere. 
I'd just like to say that I'm thankful for the quality of this sub. Perhaps in the past (I'm old) the PHP forums were filled with "stack overflow" questions, nowadays the discussion seems to be both more mature and of a higher level. Thanks for that!
More spam
Mostly. If your framework has superglobals used everywhere you'll need to tweak it to use constructor arguments. The problem is that `$\_GET` on the server reads the server's `$\_GET` variable. Thinking about it 3 years later, it would be easy enough to replace all the superglobals using the `$GLOBALS` variable to make it just work. You do have to ensure that any code running on the server closes the session when it's finished but for most applications this can be as simple as putting `if (session_id()) session_write_close()` at the bottom of the `accept` method.
Take a look at https://github.com/Level-2/Aphplication/ 
That's right, I'm using xsd2php. Had to make some manual changes to classes due to bad implementation of Ota in booking.com and few others, so simple rebuilding in new version could not be sufficient. Or I could just clone and modify xsds for each vendor. Or update will work without rebuilding classes and Metadata? 
That is jquery select and bootstrap datepicker
It would be nice to split this repository in a server and client repo. Because you'd probably want to use a client of your choice (like JS) with a backend of your choice (like PHP).
As others said, it's called "smoke testing". It's one of the "best practices" promoted by Symfony. See [https://symfony.com/doc/current/best\_practices/tests.html#functional-tests](https://symfony.com/doc/current/best_practices/tests.html#functional-tests)
"This is a safe, **non-judging** environment for all your questions **no matter how silly** **you think** they are. Anyone can answer questions." Highlighted important parts for you.
That’s one of taking a compliment. 
Characterization tests aka golden master, require saving input/output pairs for comparison. Looks good on paper for me, but never seen a good way to capture enough such test data in case of web app with fat controllers. And advice there? &amp;#x200B;
80% unit test, 20% functional test, not the other way around :-) Reaching 100% unit test code coverage is the first level. Forces you to mock correctly. You can also identify dead code or stuff you want or can remove safely. The second level is asserting as much as possible what is going on. But in a framework architecture, the unit tests will sometimes be unable to assert the consequences of your methods. Especially when you mock top level component like Doctrine or Event Dispatcher. The functional test should take over to test all the expected outcome (especially for listeners). e2e test is a must of course and the last piece of the puzzle (nightwatch for react, protractor for angular). I will look into mutation testing, that looks so interesting. Phpstan is really cool too to make your code cleaner. It's like a different tool to improve quality. It's a bit like testing your syntax itself.
You really shouldn't be putting anything into the `vendor` directory or using it as part of namespace specifications. `vendor/` is the defacto standard for where Composer keeps managed dependencies. If Composer starts wanting to use the same filename or directory name that you're already using as part of your project, you're going to end up with conflicts (and remember that a directory in `vendor/` can be almost any name because it's the author name part of the Composer / Packagist package name). Additionally, it's very common to not want to commit the `vendor` directory to version control. In these cases it's usually added to `.gitignore` (or equivalent). Keeping other files in `vendor/` breaks this convention and makes version control file management much harder. You should look at other frameworks and how they organize themselves and allow installation via Composer's `create-project` command.
**Are iterators the same thing as generators?** Every online tutorial says that generators are exactly the same thing as iterators but simplified. However, my old textbook says that purpose of iterators is to convert any object into array like thing which you can loop but also do other useful things to like seek, forward, backward and so on. Whereas, it looks like the primary purpose of generator is to iterate very large arrays without exeeding memory limit.
Yes of course (french here). Sometimes you're a bit confused by words like needle and haystack but we're used to.
Thank you
This haha moment when you understand the metaphor
Make sense, let's first see if we will have enough user using this lib ;)
oh no, you just reminded me that I haven't changed my wallpaper since 3 years 😅
im from germany and we have the same saying here so for me it was always clear why it was called needle and haystack. I realized it when i cooperated with a russian guy to build an api and we used this as keywords that it is not clear for all languages/countries. 
PHPStorm not on #1 ??
More like, haHAAAAAAAAAaaaaaaaaaaaaaaaa.............
No. Iterator is the concept of a thing being able to give access to some internal values in some standardized way. Iterator do not say anything about how it knows those values. &amp;#x200B; Generator on the other hand is supposed to "generate" those values. Most generators will also be iterators so that outside code can access generated values. &amp;#x200B; So generators -&gt; when you want to create/produce some data. Iterators -&gt; when you want to expose some data to consumers in uniform way.
I use Rapid PHP. It's cheap, quick, and works really well. PHP Storm is not only expensive, it's also on annual subscription. And I don't like renting software if I can help it. Plus, it's written in Java, and I don't allow Java on my machines. &amp;#x200B;
At our company we use PHPstan (awesome tool, I'm suprised only metioned once in comments) https://github.com/phpstan/phpstan Php_CodeSniffer together with awesome slevomat coding standards https://github.com/squizlabs/PHP_CodeSniffer https://github.com/slevomat/coding-standard Everything is configurable as you wish :)
Pretty much every language have concept of foreign-origin words that are so commonly used they are treated like native ones. That's how it felt for me when I was reading some of code. However, English is lingua franca of computing, so at some point I was able to understand intend of English texts about computing/programming, even if I could not understood "English" in them ;) terms where often the same in English and my native language, and spoken/written language is thankfully very, very, VERY redundant.
phpstorm comes with a perpetual license, you only subscribe to updates. But by all the other arguments in your comment I can already see that logic and facts are not your strong suit.
Not on #1 as of now.
Can #1 Eclipse and #2 Netbeans be run without JAVA?
French here, In school I actually learned programming in french directly. Which means for/while/if/switch is translated in french and code needed to be written on paper in french. No computer. 
Reported as spam spam glorious spam! 
Was that sort of pseudo code? To my knowledge no programming languages are translated into anything other than English are they?
Follow up question: are all your variable names in French then? I bet it would be much harder to do maintenance on code written in English and not know what the var names meant. 
I would never use french names. Because English is the de facto language and because french is way more complex than english (no accents, no endings for adjectives, etc...)
Don't know... I work in science so every coworkers speak english. But I guess you'd be surprised how many french engineers can speak english without too much trouble.
Yes. 
Does it really matter? $x, $x1, $x2, $x3... /s
actually there is something that is called windev where you write programs in French. But we didn't use that. We learned algorithms by writing them down on a paper.
As said, I expect that the update will be fully transparent. No need to re generate metadata or similar stuff.
I'm not quite sure on how namespaces working Do I include the files I want to work with? Do they have to be on the same folder? Also do I have to apply the namespace directive yo every file I want to work with?
French Canadian here. We always use french words in code when we can. We have certains rules to follow: no accented characters like é, è, ë, â, etc... and we dont translate special words like get, set, is, with, etc. So our code is kind of bilingual.
That was funny. I remember when I saw “todo: bla bla” I was like.... what does that mean? I’m from Spain and todo means everything. In the end, it all makes sense. You don’t think “I have to write in English” you just asume you have to write “for each” or whatever to accomplish something. The tricky thing comes when you start to make progress and need to find documentation and you realize that anything written in Spanish is usually obsolete. So you find yourself reading books in English, but after a few of them, is easy, course is technical language. After a few years I realized I already “know” English, so I enrolled an official course (things may be weird in spain). S few weeks ago I passed my C2 (higher level) in English. I was really proud of myself, but everything started when I started programming. Ps: ten years ago, I barely knew how to write in English. I still make a lot of mistakes, but people understand me. 
If your issue is DB locks, Paraunit tries to catch them in the test output and it retries the test. I hope that's enough for you, otherwise you will have to add me patterns to match your exceptions. 
I know people that absolutely use variable names, function names and comments in our own language, mainly in their personal projects. It makes for a great distinction between your own naming of functions and variables from those that exist in the programming language
Quick search reveled that you need JVM still, doesn't need a full install, but could be a portable version. Tell me how you can run it with out Java?
Russian also has this metaphor and it's well-known. It's just that needle and especially haystack are not the words you learn first from English.
I tried it but every test immediately errored and now I remember what the issue was: the issue the braindead fixture setup in the project. It requires a fixed set of data to be loaded _before_ all tests which is incredible hard to get right with parallel testing: i.e. single database and ensure that before the suite runs the fixture are loaded. Although each tests runs in a transaction and should theoretically work, it's the setup which I've hard time to get right. All the wonderful tools out there but stupid setups negative all joy!
&gt; To my knowledge no programming languages are translated into anything other than English are they? There are dozens of them: https://en.wikipedia.org/wiki/Non-English-based_programming_languages I used 1C:Enterprise where you can use either Russian or English but most people use Russian, and it feels weird, but you get used to it and stop noticing it at some point.
Is this a CSS issue?
Maybe? I just checked (probably should have before I guess) and it seems that emails do treat CSS differently which could be doing it. 
Not Op, but we used to do that at a previous company, naming variables and database tables in french. Worked pretty well on short project as the whole team was francophone, but in the end french is to verbose, and tools like Laravel don't deal well with languages other then English for pluralization for example so we stopped. I only use English now, even on personal projects.
there is no debugging, it's like math. Either you get the algorithm/formula right or you get it wrong, which teaches you to think ahead about the code you are going to write instead of opening an IDE and typing some random code. If mathematicians can do it so can developers.
Inline styles and such
French here, I learned programming with a really low level of English, as someone said bellow, you just learn what the words do, not what they mean and it works, some English does helps though, and ultimately, I learned most of my English from deciphering documentation and Stack Overflow posts.
Understood. But whoever grades your written code would need to review it for errors, no? It would be easier to have code compiled or ran through an interpreter to find errors, and then use it to find runtime errors.
[https://www.emailonacid.com/blog/article/email-development/12\_things\_you\_must\_know\_when\_developing\_for\_gmail\_and\_gmail\_mobile\_apps-2/](https://www.emailonacid.com/blog/article/email-development/12_things_you_must_know_when_developing_for_gmail_and_gmail_mobile_apps-2/)
Emails are always a pain in the *** for this reason : email client always have trouble with html and css. Your email is going to look different in other email client. You can check out what mjml is, this lib/small templating language allow you to generate html that is supported by email clients 
It costs $ but https://litmus.com/ has proven invaluable at the company i used to work at if you are doing a lot of work with email templates as the issue you are describing is going to come up again and again depending on which email client the recipient is using. You can get live previews of just about any email client under the sun. I like to joke that the team that used to work on IE6-11 moved over to outlook after Edge was released. Except working with those browsers was a literal cakewalk compared to supporting all of the various versions of outlook that are out there.
That's "pidgin" programming, rather than bilingual. It's a play on the name of the bird (pigeon), and happens when two different language speakers communicate and end up each using some of the words / grammar of the other speaker's language. Creole is an example in the U.S. - it's a pidgin language using words from both French and English, and grammar from both languages.
What's the point of sharing it then?
You can automatically convert CSS files to inline CSS: [https://packagist.org/packages/tijsverkoyen/css-to-inline-styles](https://packagist.org/packages/tijsverkoyen/css-to-inline-styles)
not really. in fact it's the opposite. open source projects are laid bare for the whole world to see and break. they get patched up and tested often and frequently. your home rolled framework could be vulnerable to a number of known vectors 
And not to pile on, but one of the selling points for a .env is that you can source it from the shell. If you start putting it in .ini format, then you lose that ability.
It wasn't my case but learning programming to most of my classmates was hard because of the extra layer of english. It would be like this for those of you who doesn't speak spanish: **para cada** user **en** users **si** (user.active **igual** true) **entonces** **imprimir** user.name You may or not know exactly what means each instruction but you get the idea of what represents. So in the case of **para cada** you may not know the exact translation however you know is something relating to repeating the next instructions. For a lot of programmers I know there's no connection between the english word **if** and the operator **if** when they first learn to programming.
Is this a...?
I started with html when I was around 12 years old. I didn’t speak a lot of english at the time. I just studied the source of any website that did something cool. I had made made my own website with cool javascript effects before I had learned the word “tutorial”. The day I typed that into altavista was the day my world got rocked.
Yeah this is dumb. No shit you can write this in PHP, but lets see the code and see if it's well done. Python/Go/Node/Ruby could have also been use to make this. Should we post Wikipedia and Yahoo next and say here's some sites in PHP, but it's not open source.
I'm going to give you a low-level view of them. Mostly because I don't have the ability to give you detailed view of them. Functionally, namespaces remove the need to check for and include/require external .php files. They also allow you to have methods of the same name but in different places. The key to all of it is the [Autoloader](https://www.php-fig.org/psr/psr-4/). It knows how to translate namespaces into file paths and automatically includes them for you. Example ClassOne.php namespace Project/ClassOne class ClassOne { public function save(){} } --- ClassTwo.php namespace Project/ClassTwo use Project/ClassOne class ClassOne { public function newThing() { $classOne = new ClassOne(); $classOne-&gt;save(); } } So, you give a class a namespace and when you need it you put the `use` statement in your class. The autoloader knows where that files and knows that you'll need it so it's already included. Namespaces and autoloaders really go well with Composer. You should read up on that as well. [This site is a great place to start and this link goes directly to namespaces.](https://phptherightway.com/#namespaces)
Anyone have experience with this? Install a profiler? It is old, can't upgrade PHP, and the timeouts happen intermittently. It has been a persistent problem for at least a year, probably several. Logging is also noisy and unhelpful, but I'm working on that separately. 
I'm from Ukraine and learned to code at school from 1999 and my first programming language was Logo, but speed and all instructions were in Russian, so it wasn't hard and I learn some basic things and when we start learning Pascal later it wasn't so hard to switch.
This is a good idea. I know it was in use at some point. Thanks.
Good idea. Thanks.
That does seem to be pretty novel in my experience.
Thanks! TIL!
Not nova 
I really appreciate your help, sir. You have a good day!
Sentry.io is really nice for making sense of noisy logs. It’ll group similar errors, show you when they first appeared, were last seen, etc. Also if this app uses MySQL I’d turn on the slow query log just to see if any long running queries show up.
I see `gabordemooij/redbean` as a dependency in your `composer.json` but I can't seem to find it being used anywhere in the code ...
Wat?
Why are you not ... explains why. Because they're not the same thing.
I’m just not sure the scope or being bound to a class is enough of a distinguishing factor to justify a completely different name. Within the prescribed scope they function the same as their procedural or global counterpart. And given that they are declared using the same word, there can’t be much difference under the hood other than, again, scope. 
Have you test it on different mail clients? every mail client will support diffent css and not all css is supported on HTML email
Imagine you have the following code: &lt;?php class Foo { public function bar() { $baz = 1; $this-&gt;baz += $baz; } } How would you refer to \`$baz\` and \`$this-&gt;baz\` respectively when talking about the implementation of \`Foo::bar()\`? Would you say *the variable baz* and *the other variable baz, the one called via $this*? I think that when talking about this code it woud be easier to know which is which when they are refered to *the variable baz* and *the property baz* instead. **Also** (and this is important): *Happy Cake day!*
Hey, michaelbiberich, just a quick heads-up: **refered** is actually spelled **referred**. You can remember it by **two rs**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Not difficult at all. I opened a book over the weekend that had a completely different name for methods and properties. Can’t remember the names but that’s what sparked this question in my mind. Then I opened php.net for the first time in a while to reference something today and noticed they are starting to call built-in functions methods in their documentation. I haven’t looked at the PHP source, but it seems the difference in the name function and method is highly disproportionate to the difference in their interpreted functionally. 
More often than not you're going to be incorrect in this sub, botty :D
laziness is the universal language
This distinguishes quite the same as parameters do from arguments. Some developers don't know they're different, but they do help define subtle differences in a conversation. Much like variable and value, a parameter is what you define in a signature or documentation thereof. Hence @param. An argument is that which you provide in a function or method call. This allows me to discuss them more precisely, like: if we widen this parameter type, we allow the following arguments. The same argument is true for the following: I would like to simplify that method by moving bits over to a separate function. We can't use a trait there, because of legacy systems, and I would hate to solve it through inheritance. The subtle difference makes following those motivations easy as pie. Your argument is more in the lines of: why don't we call a convertible a hatchback or a sedan? Let's call a quad and a trike just a bike. Given their main function, they all do the same. I know I'm just rehashing what has been said, but wanted to give the parameter vs argument part a place in this thread.
I like this, mainly because it's incredibly similar to what I've already rolled for myself. $db-&gt;insert('comments', [ 'blogpostid' =&gt; $_POST['blogpost'], 'userid' =&gt; $_SESSION['user'], 'comment' =&gt; $_POST['body'], 'parent' =&gt; isset($_POST['replyTo']) ? $_POST['replyTo'] : null ]); Couple of things: 1) obviously the last line can be shortened to `$_POST['replyTo'] ?: null`, but I'm sure you know that already 2) less obviously, this method gives you problems when you want to insert a SQL value. I made it so I could do this: $db-&gt;insert('comments', [ 'blogpostid' =&gt; $_POST['blogpost'], 'userid' =&gt; $_SESSION['user'], 'comment' =&gt; $_POST['body'], 'parent' =&gt; isset($_POST['replyTo']) ? $_POST['replyTo'] : null, 'commentedAt' =&gt; ['sql' =&gt; 'NOW()'] ]); I don't **think** it's possible for the array `['sql' =&gt; 'potentiallyNefariousCode()'] to be passed into a $_GET/$_POST variable - someone please tell me if I'm wrong..!
That's a good idea about the slow query log. Thanks.
How old is the stack? Apache logs, trace/strace, gdb if you don't have the experience fall back to good old echo ;) Apache method: On top of your code add: ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); If you change the php.ini for these flags don't forget to reload apache This will report all errors to the apache log file (usually /var/log/apache A little more info more specific information on your case would help
Generate the email template using [https://edmdesigner.com/](https://edmdesigner.com/) .. best 10 USD a month you'll ever spend. Ensures the email looks good in all browsers/mail apps and degrades nicely...
Not where you'd expect it ;) https://github.com/h4kbas/Just-Framework/blob/master/vendor/shared.php
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [h4kbas/Just-Framework/.../**shared.php** (master → 8c2b61a)](https://github.com/h4kbas/Just-Framework/blob/8c2b61ab16cce23bc29c4d7484ccb83f76a0a872/vendor/shared.php) ---- 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [h4kbas/Just-Framework/.../**index.php** (master → 8c2b61a)](https://github.com/h4kbas/Just-Framework/blob/8c2b61ab16cce23bc29c4d7484ccb83f76a0a872/public/index.php) * [h4kbas/Just-Framework/.../**shared.php** (master → 8c2b61a)](https://github.com/h4kbas/Just-Framework/blob/8c2b61ab16cce23bc29c4d7484ccb83f76a0a872/vendor/shared.php) ---- 
I did not know that, thanks!
I don't think this will work on our kubernetes cluster 🤔
setting up a local host with xammp 
Which words are used for needle and haystack in Russian?
&gt; I don't think it's possible for the array ['sql' =&gt; '1; drop table users; --'] to be passed into a $_GET/$_POST variable - someone please tell me if I'm wrong..! &gt; `&amp;argument[sql]=1;%20DROP%20TABLE%20users;%20--`
Well, who knew. Everyone but me I'm betting. Thanks, GAPING security glitch duly emergency plugged!
Same metaphor "une aiguille dans une botte de foin" but needle and haystack are not the first words you learn in English.
Merci! That makes sense. Thank you for the insight. 
There’s also MJML. Maybe it’ll help!
That guy wrapped parae ini function to class. Js cancer getting to php.
This project looks pretty cool, but the demo is down, the GIFs on the github page are shit and tiny, the SSL cert for the demo website isn't even valid, and the landing page doesn't even seem to be complete.... To be honest, I'd not want software by this developer to be handling my projects...
I will fix the demo, the project works completely its just the demo does need to be fixed.
[https://www.vaultproject.io/](https://www.vaultproject.io/)
[Sentry.io](https://Sentry.io) or [Blackfire.io](https://Blackfire.io) for profiling the app Percona MySQL Monitoring and Management for the DB Prometheus for server monitoring Graylog / ELK and log all CURL/file requests and their response times. &amp;#x200B; That'll get you a fairly expansive view of the application and only the last requires code changes. The rest just hooks into the service or server.
Uhm... 1. First of all questions should be posted on r/phphelp 2. Where do you have problem here? `function f() { return pow(2.8370071337, (1/435)); }`
&lt;?php echo pow(2.8370071337,1/435) ?&gt;
Storing configuration files outside of the web root directory is a good start. Make sure file system permissions (read, write, execute) are setup correctly for users &amp; groups. You should be able to access config files outside of the document root. If not, you may need to look into open\_basedir PHP configuration restriction. &amp;#x200B; Not sure about your current setup but I would also recommend checking out the Dotenv Component for Symfony: [https://github.com/symfony/dotenv](https://github.com/symfony/dotenv) | [https://symfony.com/doc/current/components/dotenv.html](https://symfony.com/doc/current/components/dotenv.html) 
If you're limited on the type of operations you can use (e.g. basic addition and multiplication) you can use the following identity: **x^(1/y) = e^(1/y ln (x)^)** And now you can use the Taylor series of [e^x](https://en.wikipedia.org/wiki/Taylor_series#Exponential_function) and [ln x](https://en.wikipedia.org/wiki/Taylor_series#Natural_logarithm) to approximate the result. You only need to implement integer exponentiation (easy for-loop multiplying the variable onto an accumulator) and the factorial function (easy for-loop again). 
Oh man, I just realized what "haystack" is! Before now I just remembered it like that "needle" is what I "need" to find. And haystack - where to search. Fun fact that we have same saying in Russian. Thank you, bro! My life will never be the same!
When it comes to server management and installing software that you need to be able to trust 1000% to be secure you start looking at everything about the developer or the company that runs it to see if they've done everything right. Having a demo go down doesn't look good but not having a valid SSL when you're actively posting it, and dare I say advertising it, is a glaring flaw and if this is seen to be something you overlooked then it stands to reason that more things have been overlooked. I mean you had to receive an issue on github to implement salting of your hashes. You only get one chance to make a good first impression and honestly you've unfortunately failed at that in some very critical ways. 
This is shit. Please don't use this shit.
What a mess
You misspelled /r/domyhomeworkformeplease
Great explanation, thanks. 
Php mess detector will detect complexity and complain about it. It's a good tool to force you to fix things.
Have you seen the installation video? It's hilarious.
I've never truly been behind this principle. The way I see it, a class supplies you with everything that you need to manipulate, format or any other actions you may want to perform on a certain object. It seems nonsensical to have multiple classes that both perform actions on one object. In the example given he has a "ReportWriter" class, but why not a Report class? Which inside on it there's two methods, write and format? It's not hard to maintain, if there's an issue with the formatting fix the format method. I believe you should keep methods sort but not classes.
It goes as "Искать иголку в стогу сена" which literally translates to "Searching for a needle in a haystack".
Found the junior.
I would have thought needle in a haystack would be easy to understand. If someone said "this like finding an acorn in an ocean" I would get their meaning. 
It's not about the meaning - we have the same metaphor - it's just needle and haystack are unusual words.
I think teaching students the non-English terms actually hurts them in the long run. It's nice to promote your own culture, the battle is already lost on this one. The amount of keywords and terms is small enough that you could learn all of them in English in just a couple days.
Nadel and Heuhaufen in German. I guess that makes it a lot easier when the words are basically identical. 
&gt;Have you seen the installation video? It's hilarious. Why would they even put that out there? It makes them look amateurish 
&gt;No way I'm going to trust software from this dev on my server, man. The fact they think 'Fix' is a good enough commit message is really bothering me 
wtf is this file? [https://github.com/INTisp/INTisp/blob/master/intisp/system/data/dfkjstijijf.php](https://github.com/INTisp/INTisp/blob/master/intisp/system/data/dfkjstijijf.php) 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [INTisp/INTisp/.../**dfkjstijijf.php** (master → 23ab86b)](https://github.com/INTisp/INTisp/blob/23ab86bc6936238356a353fc82a4de1ba216c954/intisp/system/data/dfkjstijijf.php) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e6lsmeo.)
Take it as a rule of thumb and not something concrete. You’ll know when your classes starting getting out of hand and need to split them up. I’ve seen far too many devs take this to heart and write code that’s extremely over engineered for no reason. Your example is completely correct and follows a pretty typical model / DTO pattern. It’s more that you may have a class that contains the data (Person) and another that actually persists the object (PersonRepository) so you can swap out the underlying ‘persistence’ logic.
You should strive for low coupling (classes don't know a lot about other classes) and high cohesion (all the things in the class are related to each other). In your person class, if there was an obvious segregation of methods and data, like some methods only worked on some of the data, and other methods worked on the other data and there was no connectedness or overlap between these data and methods, you should probably separate them into two classes.
I have my os in English, but I don’t think is a must. I found that useful in photoshop, because most of the tutorials are written in English. Trying to figure out what option is what can be hard. When you are programming, the errors are generic, at least in php. What I suggest to people around me is to google for how to do things in English. So, for example, google “bind click event jquery” instead of “evento click en jquery”. The same applies when you’re looking for technical stuff in YouTube 
Please, take my money!!!
I don't know who this Ashton fellow is, but he needs to specify that he's referring strictly to Java (which mostly applies to PHP, too), because some of the things he says are wrong if applied to other OOP languages (or just wrong, period). I'll copy and paste here for convenience: &gt;In order for an object to be immutable, it must adhere to the following criteria: &gt; &gt;\* It must have no setter methods (methods that alter object fields). &gt; &gt;\* All fields must be final and private. &gt; &gt;\* The class must be declared as final. &gt; &gt;\* Instance fields should not reference mutable objects. The first two points are explicitly about Java. I can write an object in Swift that has only public `let` fields (no such thing as `final` in that context in Swift) and it will still be immutable as long as the fields are primitives or `struct`s. But, I agree that, in Java/PHP, the only way to have an immutable object is to do the first two points combined. The third point is totally irrelevant. The class being final has absolutely nothing to do with immutability of an instantiated object. Correct me if I'm wrong... The last point is the one the article addresses. The article is correct in asserting that this point is overly strict in many cases. It's probably not even what Ashton meant. I *think* Ashton meant that the fields should not reference any mutable objects that *live outside of* ***this*** *object*. Otherwise, the state of the object could be modified by some other object. When you write code in Haskell, everything is immutable. Until it's compiled to machine code, which knows nothing about types and immutability. The implementation doesn't really matter. Similarly, I don't think it's usually important that there is a caching layer built into an object. The object is still referentially transparent. Though, it could matter- as the author points out, in multi-threaded situations. &amp;#x200B;
I agree with you. I guess the rule 'no property referencing a mutable object' is there to avoid some unexpected changes from outside of the object. Here only the library can mutate the cache and anyway the way the cache is used does not alter the library state. A better rule I guess would be 'no mutable object injected or exposed'. If a mutable object is instantiated inside the immutable object and never exposed to the outside then no problem.
I've seen plenty of code with swedish function names and variables. This was a long time ago though and getting less and less common.
Haha, we call it "Swenglish" (Swedish / English).
Yes thank you, we were testing something and forgot to delete a file. So obviously this project isn't 100% ready.
I'm gonna fix the demo. Its actually a really cool project, its just we didn't do our commit messages really good.
&gt; The third point is totally irrelevant. The class being final has absolutely nothing to do with immutability of an instantiated object. Correct me if I'm wrong... A class with no mutable state could be extended with (separate) mutable state if it isn't final. 
I might actually use reddit to improve my projects.
Should I just restart this project completely?
https://www.yegor256.com/2014/11/20/seven-virtues-of-good-object.html
First rule: never over-engineering!. For example, to use Interface everywhere, even when the interfaces are only used by a simple class each one. &amp;#x200B;
I agree. I have many libraries that are simple: one class, one file, and no dependency. Adding a cluster of classes and interfaces are hard to maintenance, debug and deploy. For example, Laravel, you will need +300 files to do a simple hello world. It is the definition of insanity.
Your salt generating is terrible: $salt = rand(1,9999) . rand(1,9999) . rand(1,9999) . rand(1,9999) . rand(1,9999) . rand(1,9999) . rand(1,9999) . rand(1,9999); Your password hashing is terrible: password="'.sha1($passx . $salt) Your way of assigning id's to users is WTF level 11: `insert into users` with an id of `rand(10000, 99999)` Your "encryption" scheme is waaaaaaaaaat: for ($i=0; $i &lt; strlen($password); $i++) { // encrypts one character - two bytes at once $password_encrypted .= sprintf("%02X", hexdec(substr($encryption_string, 2*$i % strlen($encryption_string), 2)) ^ ord($password{$i})); } Your SQL injection prevention is terrible: net2ftp_username_safe = addslashes($net2ftp_globals["username"]); And your are vulnerable to timing attacks: $input_admin_password != $net2ftp_settings["admin_password"]) { And that is just from a quick look into two files ([billingconnect](https://github.com/INTisp/INTisp/blob/master/intisp/inc/billingconnect.php) and [authorizations](https://github.com/INTisp/INTisp/blob/master/intisp/system/features/fman/includes/authorizations.inc.php)). If there are that many problems is just two pieces of code I would stay as far as possible away from the rest of the project.
What's the best way to encrypt with PHP?
Totally agree. The problem is that it's difficult to define "reason to change" and "responsibility". It's very difficult, especially for junior developers and the university students I teach, to work out what is "too much" or whether specific methods belong in the class. I wrote a more practical and easy to follow guide for working out whether a method belongs in a class: https://r.je/single-responsibility-principle-how-to-apply.html 
I don't want to depend on software that has these kind of BC breaks.
Something like https://github.com/defuse/php-encryption is made to make it hard to screw itup.
They didn't really have much choice considering Silex has been abandoned.
So, what should we do instead? Fork Silex to keep it going? Spread our limited resources further? In practice, we'll keep \_supporting\_ Bolt 3.x for the foreseeable future. Sites running on Bolt 3 don't \_have\_ to upgrade. In fact, there's still tons of sites around that run on anything from PHP 5.3.3 to 7.2.10. On the other hand, if you're starting a \_new\_ site, it'll be nice to be able to use a newer version, without all the Silex and other legacy stuff. If we did \_not\_ have BC breaks between major versions, we also couldn't have new nice things, and people would stop using Bolt. Nobody would benefit from that. &amp;#x200B; &amp;#x200B;
The confusion I see from new developers in PHP is that PHP uses the keyword `function` when declaring methods. This definitely does not help the situation. Yes, they are subtly different but I agree with you, it makes moving to OOP unnecessarily different. I've always preferred "class variables" over "properties" as it's a lot clearer. And it does get even more confusing when you look at different languages: Perl uses the keyword `sub` for methods/functions. In Pascal/Delphi, a method that returns a value is called a function but a void method is called a procedure. Unfortunately, this is just a side-effect of humans inventing the programming languages we use. No different that the rear storage compartment of a car being called a "boot" in British english but a "trunk" in American english. 
this was a good read and something i forget sometimes
Correct, but two things: 1. If I write a class Foo and say it's immutable and someone else writes a class Bar and makes no such claim, does it matter that Bar inherited from Foo? 2. It's only a problem if the derived class overrides methods from the base class and is passed around as a polymorphic instance of the base class. Therefore, just as fields should be final, methods should also be final. That is not the same as the whole class being final, though. Granted, inheriting without overriding anything is an odd case, but it's still different.
For sure, but then it's not about the *class* being final. It's about the *methods* being final. Using inheritance for subtyping would still be okay as long as the base class methods still preserve the immutability built in to the base class.
1. It does if an immutable object should not contain references to mutable objects. I may have a reference to Foo which turns out to be mutable. 2. See 1. In other words, should LSP be applied to immutability? Imo yes.
But if you have a reference to Foo, then all you can do is Foo-like things with it. Does it matter if it mutates in ways that have nothing to do with its Foo API? Similar to the point in the article- does it matter if it has a (mutable) HashMap if you can't access or see any of the effects of its mutable state?
What should you do? I don't know, you're screwed either way. As are your users. Do better next time and make sure Bolt 5 is far away and a smooth upgrade. Look at Symfony's BC policy for a good example.
I think LSP applies especially to mutability / side effects
I completely agree. Its nice to design our classes with immutability in mind, but we should not be extremists. If pure immutability comes at a cost of encapsulation, its necessary to move away from this utopia of purism. After all, immutability is supposed to help with our application/class design, not to hinder it. There are times when it makes more sense to be mutable, or at least mutable internally. An immutable object as interface with internal implementation to be mutable but will not produce side effects, is a perfectly acceptable compromise in this Immutability vs Encapsulation paradox. 
People should understand that we wouldn't have Symfony 4 if there weren't BC breaks. A good decision is based on knowledge and not on numbers.
So I am rebuilding the project. https://github.com/INTisp/INTispRewritten 
&gt;What's the best way to encrypt with PHP? You're creating code to manage things like server security and you have no idea how to hash passwords correctly? This is basic level stuff you're getting wrong, I would close the project immediately in case someone starts using it. Sound like you have a lot of learning to do before even attempting something like this.
I know how to encrypt. Bcrypt md5 sha1. I just don't know the best one. Jeez why is this community so mean. Everything here has been negative.
This is not a good way to build a good discussion. Just because someone disagrees doesn't mean they are more "junior" than you. This is especially not alright since you don't provide any argument.
If we start with a `ReportWriter` class and a `ReportFormatter` class, if we decide we want a single `Report` class that has both functionalities, we can then accept the other two classes as dependencies and the functionality is still isolated. If we had another class that needed to format a raw report, but didn't care about writing it, if we import `Report` it contains unnecessary methods and consequently may have additionally dependencies that aren't applicable making it harder to reuse. Also, just from managing the code, the larger the class, the more difficult it is to navigate and update, and the more complex the test cases are. The more complex `ReportWriter` functionality gets and the more rules it has, the more it's bloating the same class that houses `ReportFormatter` despite being irrelevant to formatting. If we need to pull in a dependency for writing, we are then pulling in that dependency even if we only want formatting. Related, this makes testing much easier and clearer, as your tests are focused to the specific cases. It is much easier to start with narrowed specific classes, then expand by creating a class that takes in what it needs as dependencies than it is to start with a bloated class and refactor it down and extract the functionality into an external dependency when we want to reuse it.
Uncle Bob defines responsibility as 'axis of change', in this sense SRP means one and only one axis to change. This definition is a bit vague, but I can relate that to the geometric model of axis. In an one-dimensional(linear) space you have only X coordinate, and X can change from 0 to 1, or any arbitrary number. But the change is on the X axis only, and hence its one axis to change. In a two-dimensional(planar) space however, you have both X and Y coordinates. If both X and Y coordinates are allowed to change, ie from (0, 0) to (1, 1), you have two axis of changes. So we can view SRP in the same way as the geometric model, by viewing each method as a point on a given axis. For example, you have a Serializer class that serialize a PHP object to string format, or unserialize the PHP string back to a PHP object. In this case, serialize() and unserialize() methods are two points of the space, but on the same PHP axis. This class follows SRP, since it has only one axis and hence only one axis to change. However, when you expand this class to be able to serialize/unserialize JSON, alongside with PHP, you now have 2 axis with 4 methods serializePHP(), unserializePHP(), serializeJSON, unserializeJSON(). At this point, you are effectively violating SRP, as you now have 2 axis of changes. To follow SRP, you will need to break down the class into PHPSerializer/JSONSerializer, or Serializer/Unserializer. It doesnt matter which axis you break down with, although one may make better sense than the other logically. With this being said, the goal of SRP is to create small, readable, maintanable and easy to test classes. If the class are inherently small, like in the Serializer example, you will probably end up with less than 100 lines anyway, then breaking SRP isnt really a big problem. But more often than not, you end up with classes that will grow out of control, and in more than 1-2 axis. For newbies, following SRP is necessary as it prevents you from creating a God class with thousands of lines of code and tens of responsibilities(axis). At least, we will have less incompetent programmers writing such 9000 lines of class as the one shown below: https://pastebin.com/m76ZAUZc
Hashing is not the same as encryption. It is well known that MD5 and SHA1 hashing should not be used for security means, because they are prone to dictionary attacks and could encounter collisions. This is basic knowledge in the security field, so the community is well in their right to scrutinize and reject non-secure solutions for sensitive systems.
I think I speak for most of us here that it bothers us that hasn't been spotted by code reviews.
I like your article, its a very good read. What do you think about my theory regarding 'axis of change'? I think thats Uncle Bob's official explanation for what is considered a responsibility. 
Usually the config.php is not executable, so even if somebody calls it: mysite/config.php then it will not show any information. &gt; I tried to place sensitive files in a directory with htaccess file set to deny all but it denied my php scripts from accessing the files as well. How do you access to your files? As local files or via a web link? &amp;#x200B; &amp;#x200B; &amp;#x200B;
I am bothered that I spent 2 years on this project and nobody has said anything till now.
Those frameworks are not focused on security, they have security features but only to a limited scope. Security is about discipline, not about adding more "stuff" that magically adds security. For example, one of the good practices about security is: a) https b) hide the version of the language, framework and library. You must hide that you are using PHP. In the case of PHP, you must secure EVERY SINGLE PHP file. If the file is not "executable", for example a php file with only a class or an interface, then it is safe (of course, if the code is safe too, most open source code around here is not!). While, if the php file is executable, i.e. it does something, then you must audit it. Sometimes is as easy as to block to execute any file in a specific folder (such as composer's vendor folder). Usually, a top grade system consists of a few files that are executable (index.php for example), while everything else is encapsulated in a class. &amp;#x200B;
And that WordPress is a mess because they are adamant on backwards compatibility. 
Absolutely - I agree with (and do) all of that; a framework is just one tool that can be used in the pursuit of developing a secure body of code, that then must be configured in a secure manner, which then must be deployed to a secure server, all of which must be maintained. All that said - it sounds like you agree, in part, with the idea that some level of anonymity can aid in securing a system, at least against very low-level penetration attempts (in that you advocate for hiding that you even use PHP, the version, the framework, etc...)
I recall training some folks from India. I forgot and dropped an American phrase -"In the ballpark" They were curious as to what baseball had to do with programming...
Ah so the Person example isn't as clear as it could be? Would it be better to have a Head and Body class which both extend from Person?
Thanks for the support!! Don't worry though, I've come to the realisation that if somebody says something along the lines of "here's the noob dev..." they usually don't fully grasp the concept themselves..
I disagree. Interfaces are the very thing that will make the developer think about responsibilities and keep public API short. The problem is that PHP chose to make interfaces explicit (when using type guards). 
like always it depends. Don't write 15 classes when you can write only 2 of them just to keep them "short". These generic principles never work in practice. "Be aware of the trade-offs is a better principle".
I think that's more of an issue of choosing good names for classes. In this case `Report` can be confused with `RawReport` and `FormattedReport` which are objects containing report data, and should maybe be something more clearly distinguished like `ReportManager` or some such (albeit, `Manager` is something of a catch-all and maybe still not the best) that accepts and returns `Report` objects, be it `RawReport`, `FormattedReport` or otherwise. What I've described in taking in dependencies are pretty essential to good object-oriented design -- composition and dependency injection. We're using composition by reusing these other modular components. And dependency injection by accepting the components as dependencies; by externalizing the dependency of say, `ReportWriter` the underlying implementation can be swapped out with changing the core functionality of any other classes using it, and it can be tested independently. There really isn't a difference between having a function that accepts an integer as a parameter and saying that function only ever is to be used with integers, and one that says it only accepts a Report. It doesn't need to go into one big `Integer` class. You also wouldn't want to be modifying the state of the `RawReport` object when passing it to the formatter -- the formatter is returning a new `FormattedReport` object; if we were, your description may apply in that they are perhaps overly coupled.
I think you are just dumb. 
Can you expand that thought. To me one class one interface rule do not make large interfaces inconvenient any more because its only apparent in one interface to many classes scenario! 
You're right. Seems I don't know the Github search very well. Searched for this, did not find anything (aside from composer.json): [https://github.com/h4kbas/Just-Framework/search?q=RedBean&amp;unscoped\_q=RedBean](https://github.com/h4kbas/Just-Framework/search?q=RedBean&amp;unscoped_q=RedBean) Should have search for this instead which found what you linked: [https://github.com/h4kbas/Just-Framework/search?q=RedBeanPHP&amp;unscoped\_q=RedBeanPHP](https://github.com/h4kbas/Just-Framework/search?q=RedBeanPHP&amp;unscoped_q=RedBeanPHP)
I agree with the article but in practise it may not always be useful. The example given is simple enough to refactor afterwards if the need is there to change writers or formatters, so unless you have reason to split it up (because you expect you may need it in the near future) it feels like a lot of wasted time. Because the functionality is already split up in 2 methods, it's easy enough to extract one into a seperate class when the need is there. &amp;#x200B; This is from a project level point of view though, when we're talking about shared code such as a library - it's indeed best to split them apart because you're exposing two potentially used public methods (outside of the library) and you'll break things if you do it later. &amp;#x200B; That said, if I can make two methods, I can just as easily create two classes instead, so I'll usually go down that road. But there are cases where I decide to hold off on splitting things up (more) because the need for it isn't there and probably wont ever be; it's easy to change afterwards; and time at that moment is too valuable to go too deep into it (deadlines).
Hey, Veloxy, just a quick heads-up: **seperate** is actually spelled **separate**. You can remember it by **-par- in the middle**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
delete
I was accessing them via require once 'path/to/file'; !
There are still sites around that run symfony 1.x (with the bc community efforts). Just because there's a new toy does not mean the old ones stop working.
[https://gitlab.com/DrRoach/DynamicImage/blob/master/src/DynamicImage.php#L101](https://gitlab.com/DrRoach/DynamicImage/blob/master/src/DynamicImage.php#L101) // If `debug` is set to true in the parameters, turn on errors if (!empty($params['debug']) &amp;&amp; $params['debug'] == true) { ... *I did the* ***exact same thing*** with commenting every second line / block of code in the past, describing *what* it does (but not *why*). Over time I came to the conclusion that pretty much 95% or more of these comments could (and *should*) be removed as they do not add any value (they are just *cluttering the code*). I'd recommend to at least try that sometime and see for yourself *if* you *really* need all those comments. ^(If you do, would you please let me know how it worked out? Just curious.)
Bolt is the best CMS I've ever worked with. I'm glad they are going to Symfony 4, it will be probably much easier to extend if it's done correctly. The Bolt interface is awesome, the way they handle things like image / file upload, configuration, and ease of use of the admin with a global search etc is really clever. I've been inspired by its interface a lot for my symfony dev at work. It deserves to be more popular. I'm very curious to see how it's gonna be, thanks for your hard work!
I would want to say I am really excited about this. Having it with standard symfony components all around and vue makes me really happy. Can't wait to see this up and give it a try. 
Please take a look here [https://phptherightway.com/#security](https://phptherightway.com/#security)
In Perl `sub` is short for [subroutine](https://perldoc.perl.org/perlsub.html). It's pretty much different words meaning the same thing, except when languages reuse some of these words for describing language specific concepts. Wikipedia references the US EAC article on the [Definitions of Words with Special Meanings](https://web.archive.org/web/20121208084203/http://www.eac.gov/vvsg/glossary.aspx) grouping all these words under `callable units` (though I haven't heard *that* one before). &gt;**callable unit**: (Of a software program or analogous logical design) Function, method, operation, subroutine, procedure, or analogous structural unit that appears within a module. 
I think that all of the core extensions should be enabled by default. Certainly things like gd and bcmath.
Great insight into your plans for bolt 4. Thanks for all your hard work Bob! Bolt is the best cms I’ve ever worked with and it’s a great fit for our team and our customers. I wish my boss would let me spend some time helping you out with contributions :(
Confirmed WordPress user
love retrofit on java, this is very very cool. 
slim to make the api, guzzle to consume
I completed the Symfony 4 free cast and it was very good, this is my first time using a framework and everything was explained perfectly and it was very easy to follow everything!
static functions are okay if they're deterministic like the other's mentioned. that basically means NOT using the class state to store values to be mutated elsewhere. i think an okay case is singleton. like, if you have a function "getModifiedString" that takes one string, performs some stuff on it, and returns a modified string (without accessing class state variables, etc), then it's probably okay. now, if you have 5 versions of this function, you should think about putting them into a class the "poor testability" comes from using class state. if they're deterministic they are totally testable. and yeah, performance should rarely be the main reason to do anything (except looping queries). 
This is perhaps a silly question, and if so I apologise for my lack of understanding, but why would you need an OAuth mechanism if the system is not available from the outside? Seems more trouble than it’s worth?
I need to access a site that implements OAuth on a site that is local. Does that make more sense?
There is a tipping point for me. I really don't want to look at classes that have over 500 lines of code. Yuck. But sometimes it makes sense to keep it all together. You can split them up of course. I also don't want 10 different classes with a few small methods in them that are all involved in the same sort of process. It's a pain in the ass to have that many files open when you are debugging something. I'd take OPs link as a rule of thumb, but not a commandment. This is the sort of thing that code review is really good for. Get the opinions of a few developers on how things should be structured and go with the consensus.
Awesome
Thanks! I also ported gson if you’re interested. I know moshi is the new thing, but hopefully the problems people had in java aren’t the same here.
Not having used bolt before I just tried to have a look at how they do global search but couldn't figure it out. Would you care to explain what's so good about it?
If you are a consumer, it shouldn't be any different than a regular implementation. The data sent by the identity provider is sent thru an HTTP request done by client via a redirect or a post back (depending on the provider). The actual IdP never communicates directly to your server.
that's a great help - thanks!
The demo is finally updated. https://intisp.delinz.com/demo 
The .htaccess file is only read by your web server. PHP itself doesn't care about it at all. Either you're attempting to access them through your web server, or there is some other file permissions issue that has nothing to do with the .htaccess file. Doing "require\_once('r/http://example.org/myscript.php');" is possible... but probably won't work as newbies expect it. The PHP interpreter will run myscript.php, then the require\_once() directive will interpret the output. If myscript.php was just dumping out some HTML blocks, things might work just fine... but if the code contained any functions or objects that you were wanting to use elsewhere in the code, there would be a problem. And... that could also be a HUGE security bug if you don't control the domain... Or even if you do control the domain, it's possible for a man-in-the-middle attack to occur. Just generally don't include/require/execute any code that you don't have immediate control over, ever. (This includes anything that may be sitting in your database, too, and for that matter, don't even trust DNS records: [YouTube video of a WHOIS service with an XSS vulnerability](https://www.youtube.com/watch?v=1anIUDvdCjY) )
If you're testing locally, you can let the firewall block all external connections. There's some risks involved, but don't fret too much about them. You can shutdown the server whenever you're not using it. 
Not to mention there's *a lot* of things happening in that constructor, public properties, and while it may not be *that* big of a deal, I have come up with some weird issues setting the default value on the property instead of in the constructor. The last may be more of an issue when you're dealing with entities and ORMs. 
I'm guessing that gd and bcmath have dependencies that keep them out of the default?
Sure, but you also mention there's an entire community working on BC. Just because something isn't immediately broken, doesn't mean you should continue using unsupported products, and the time to make those BC breaks are in major releases...
XAMPP is just a web server and a MySQL server. Does your database have a password? Yes -&gt; Good, No? -&gt; Go set one up Is the code running on the web server secure? Yes -&gt; Good, No? -&gt; Put on HTTP Auth or a Firewall to port 80 and 443
The fact that you're moving to Symfony 4 actually gives me a lot of confidence in Bolt moving forward as a project. Symfony 4 seems like a really nice system and I would be concerned if you were latching onto a deprecated software. Using more off-the-shelf components is great. Bolt's use of standards was one of the original selling points for me. It means that many things I learn about Bolt is applicable outside Bolt, and vice versa. I imagine a lot of Bolt 3 sites will never make it to Bolt 4, instead being replaced by entirely new sites. So I wonder what the upgrade path will be for those few who do want to upgrade their site. I'm guessing some kind of export/import tool. I could come up with a whole wish list for Bolt 4 but overall I think this is good news.
Make sure your router does not open port 80 and 443. Your network will have access to the server but not outside. This allows you to try out things. If you let your router expose those ports you basically have a public server that requires all the modern security standards for hosting something online.
Some Devs understand that major version bumps can come with BC breaks. Others have a below average IQ. Best of luck
Lols nope. Also, just go get a cloud server noob.
Make sure you chmod your files so they are read only. 1. Always use an index.html file to prevent directory listing. 2. Create a folder where all your configuration files will be stored. 3. Use htaccess to deny access to that folder so it is always defined internally. 4. Use defined to prevent direct access. &amp;#x200B;
Whats the point of this? &amp;#x200B; You can just use echos or `?&gt;` `&lt;h1&gt;hello&lt;/h1&gt;` `&lt;?php` I dont see the purpose of why you would need to learn something completely different when this just looks cleaner. I can only see the point of this for forms because forms are annoying to deal with inside of php.
Hey, how's this joke going for you? You keep repeating it, it must be going well. Just a matter of time before all those upboats start rolling in, amirite?
If you don’t know it’s probably 3306
If you're looking for a way to store config, I highly recommend [TOML](https://github.com/toml-lang/toml). It's a lot like INI, but an actually-defined format with standards and syntax
Http = 80 Https = 443
Yes, but to an extent when you serve 25% of the web you need to support people for more than 3 years. It needs enterprise and legacy support. It would be nice to see WordPress 5 be recoded. Even if the database structure was the same (which is adequate for its purpose) it would be nice if it were truly OOP.
That's it. For forms génération and attributes handling. 
Unless you're a 2.7 Pythonista, that's not how most software grows over time: sometimes you have to break APIs because of improved insights or in order to get a more stable and extendable one in the future. Holding on to backwards compatibility often means slowing down progress and it makes it more difficult to maintain and to keep or gain contributors. Bolt will probably offer tools and plans for updating to make it easier. As a user of libraries, you should design your code in a way that can deal with BC issues: depend on libraries using your own interfaces. Use adapters or decorators (wrappers) -- although this is more difficult with something like a full-blown CMS.
don't feed the troll
This is only true if you also forward traffic from port 80 on the router to port 80 on the other machine. Without that, nothing’s going to happen.
Implies that procedural programmer grunts are too silly to adopt php just because things have different names? 
The website is not working on mobile.
Have you addresses the issues found in your previous post?
wat
I think I speak for most people here when I say it's great that you are putting yourself out there, being passionate and building something but there is no way in hell I would touch this software. I have only checked a few files but you dont follow **any** software design patterns. I mean look at this file and the class it contains &amp;#x200B; [https://github.com/INTisp/INTisp/blob/master/intisp/system/features/ade/l.php](https://github.com/INTisp/INTisp/blob/master/intisp/system/features/ade/l.php) &amp;#x200B; None of the functions have declared visibility and then in the function loginForm you actually end PHP output raw HTML and start it again to return TRUE. Honestly this is some of the worst code quality I have ever seen. &amp;#x200B; I would recommend completing a course somewhere
It's not a joke.
Quality - 1
gd? Are you sure? I run a handful of servers and none of them use gd (or any other image processing extension such as image-magic) just because there is no need to process images in them. Hash, on the other hand is used in a wide range of use cases.
Property based testing [https://fsharpforfunandprofit.com/posts/property-based-testing/](https://fsharpforfunandprofit.com/posts/property-based-testing/) Then being able to generate those tests from specs (which give other benefits too) [https://clojure.org/about/spec#\_generative\_testing\_and\_robustness](https://clojure.org/about/spec#_generative_testing_and_robustness) Example: [https://stackoverflow.com/a/43349674/7357479](https://stackoverflow.com/a/43349674/7357479) &amp;#x200B; prior art: [https://docs.racket-lang.org/reference/contracts.html](https://docs.racket-lang.org/reference/contracts.html)
Totally agree. Actually, everyone I follow on YouTube is English spaaking and any search I do (except for local searches) are in English. To be honest, when I’m arruine friends they look at me as a weird person, as I might be looking the tv in English and I just don’t realize is in English and they won’t understand 
thanks &amp;#x200B; &amp;#x200B;
What is the purpose of this? Anyone who has the skills required to make this not look like garbage could probably do a much better job than this...
90% of what it does is done in application space, so you are saying you'd set fire to that quarter (your 25%) or over a third (their figures) of the known world blogging CMS's, stores etc just to be able to use object orientation? The reason the other CMS's don't have the market share is that they've failed to get it into their heads that cheap nick-nacks ala Envato and not breaking BC are harder than adopting every new pattern and shitting it out at users of your product.
It sounds to me that you are too tied to the framework. Didnt you consider a few well-tested psr-components to build your foundation on? Anyway i wish you best luck.
The search feature in the admin I was talking about is just a regular search input that's available on the header of the admin and that works with all the content types you create. For example if you create a "News" content type and name a news "foo", if you write "foo" in the search box it will find it. It's useful when you have many different content type and can't be bothered to click to the corresponding menu entry etc. It's not a revolution but it's a nice quality of life feature to have. It will also perform the search with other fields like subtitle, etc and show the result pretty fast in ajax. I use it all the time I know they also have a search feature for the frontend, but I never got to use it.
I really enjoyed the blog-post, I think it looks like the various parts will share a core, but otherwise be considered self-contained services. I like this a lot! Can't hack an admin-UI that doesn't exist. I'm not familiar with what bolt is. I was dragged kicking and screaming away from completely bespoke (with libraries) approach to SW dev and feel it's helped me to grow. Now we have all these projects and all these libraries to express ourselves with. Showcase section of nav also helped me to see what others have done. Do you have a vision beyond what there is? Is it mostly for small endeavours looking to minimise effort on single-build sites?
You should've said you're a schooler or student for "angry devs" to keep calm. What's the story behind this, is it a project or an idea? As a suggestion, replace UI with [Bootstrap](https://getbootstrap.com/docs/4.1/getting-started/introduction/). This is 2018, we/devs rarely make entirely custom layouts. Bootstrap allows to make pages responsive from start with somewhat modern initial look that you build on to. To create basic boostrap layout you can even use [LayoutIt](https://www.layoutit.com) to generate HTML for you to get used to how elements are structured. Also if you're not using backend framework, check CodeIgniter to quickly create data driven pages in MVC(Model/View/Controller), then look into Laravel or other PHP frameworks for getting to work with more technicalities. With practice, in couple of months you'll be able to create this very very quick and keeping it look good.
Please tell me you’re not dumping a user’s post field into a database query without sanitisation/prepared statements. 😭
Oh god oh god oh god! https://phptherightway.com
Lol have I fucked up? 
This is a valuable lesson and now is the time to learn. OP is probably new to PHP. OP, look up PHP prepared statements and why they should be used to prevent SQL Injection attacks. God bless
I advice you to read about SQL Injection, and pray this code isn't in production.. Where did you learn to do querys like that in 2018 ??..
10 years from now you’ll laugh about it. 
This catched my eye instantly too.
‘); DROP TABLE
Select FROM or 🤔
Yea I only started it this week lol
It'll work, but pretty it isn't. 
I don’t know if that’s going to be enough...
Not enough in what capacity? Should a community that isn't interested in being a support community be actively supporting a fledgling developer? Or is my message not clear enough to redirect OP to the appropriate forum?
Ok all I am a student just still learning and I realise alot of the techniques I am used are awful. But if that program was to work what would I have to do haha 
Please correct me if I'm wrong, but it appears this is a youtube video to advertise a website that sells projects aimed at students that can't be arsed to write their own projects?
I mean I think the OP needs some more hands on help to give him a push in the right direction.
you should provide the mysqli connection to the query
Just counted that out of 9 production servers I run, only 2 are using gd and none bcmath.
We all gotta start somewhere! That said, understanding prepared statements and the risks of MySQL injection is a crucial thing to get right. It's important to get to grips with it as soon as possible, before you dive deeper into development. If you need help with it, don't hesitate to ask on /r/PHPhelp/ You can even PM me if you want some 1 on 1 help. Suffice to say, there's quite a few things here that you shouldn't do for any serious project, MySQL injection just being most severe. For just learning the language it's best not to embed certain mistakes and start "the right way". You should look at a "proper" example of a database powered site. This is a decent example of segmenting your application into simple "components" that handle different things like layout, program flow and connecting to a database in a more "modern" sense: https://www.taniarascia.com/create-a-simple-database-app-connecting-to-mysql-with-php/ It may seem like a lot for your first application, but these are important subjects. One final suggestion: It's a good thing to understand PHP, understand how to work with databases. But once you have a firm understanding, you should look into frameworks. I think every PHP developer has started with "building their own site"; which is a great skill, but at the end of the day you'll be re-inventing the wheel. You'll get a better result with less effort by making use of a good Framework.
If I was your professor I would give you D for this assignment, sorry. This is not even funny anymore when you try to hire developers and all of them are just half-asking everything and not seeing any value in good code and practices accepted by the industry.
It's just a fun project I am doing at home, no need to be so negative. All previous comments have already established it's bad code 
Thanks this is so helpful, sorry for frying everyone's brains lol 
I’m a procedural programmer so no, I was implying that OOP kiddies unnecessarily created new words just so OOP would sound cool.
Thanks so much 
Wow, that is a whole different experience with the non-English script. 
Yeah this is something I've definitely stopped doing in more recent work. At the time it seemed to make sense to me but in retrospect I saw that those lines were so self explanatory that the comments were completely redundant. One day I may take the useless comments out of that project but unfortunately I don't have the time at the moment.
That's something that I have tried to find a solution for in the past. I'm planning on creating some form of empty check method so that each empty check doesn't haven't to be done one call at a time, this is something that I'm hopefully going to get to implement not too far in the future. Are the issues that you're having with my project or one of your own? Just so that I can make fixes if needed :)
Are you aware that your license is completely void. It doesn't even make sense. Also, why is there ioncube references in this? The code quality is appauling, the security is a joke and the organisation is just non existant. As a personal project I'm sure it was a cool fun project, but this absolutely is not even close to being suitable for anyone to use in a live environment unless you want to invite the outside world in to being able to get into your server.
From your description: &gt;is more stable and uses CodeIgniter. Nobody is going to touch it. CodeIgniter should not be used for modern development, it's such a dated and poorly maintained framework and really only exists for projects already stuck using it. Why on earth would you not use a modern framework like Symfony or Laravel. Please, PLEASE read phptherightway.com before you waste another 2 years. You've got some serious learning to do before you can build something sustainable here. 
The installer can actually preinstall ioncube on your system as it is a hosting panel. We are in the process of organization of file. I mean seriously look at wordpress, it has millions of users, and the files are very disorganized.
Theres files being disorganised and code being downright insecure and unmaintainable. You shouldn't be comparing your new project, which should be using modern development practices to Wordpress, a legacy application beset with legacy problems.
Thank you for introducing me to the world of r/pho.
Here's a sneak peek of /r/pho using the [top posts](https://np.reddit.com/r/pho/top/?sort=top&amp;t=year) of the year! \#1: [Thanks mum](https://i.redd.it/p83n8vf5jttz.jpg) | [4 comments](https://np.reddit.com/r/pho/comments/78hl4u/thanks_mum/) \#2: [It's 108f outside today...](https://i.redd.it/2l2ordk6p4e11.jpg) | [15 comments](https://np.reddit.com/r/pho/comments/94lrw2/its_108f_outside_today/) \#3: [Made some oxtail pho today. Damn that was great. And my homegrown chilis made it even better](https://i.redd.it/ivz8qqtcdya11.jpg) | [11 comments](https://np.reddit.com/r/pho/comments/908qhn/made_some_oxtail_pho_today_damn_that_was_great/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
This subreddit is aimed at discussing the PHP internals and wider development ecosystem, if you're wanting basic help with PHP take a look at r/phphelp
The front end isn't half bad, the backend is somewhat lacking due to a lot of custom code and poor practices. Have a look at frameworks like Laravel and this: https://phptherightway.com/.
For christ sake, don't bash the younglings.
Time to bump them deps to `"php": "^7.4-dev"`!
And here is how you could use [prepared statements](https://phpdelusions.net/pdo#prepared) in practice.
With a while loop. 
I meant more technically. Like does it search cross multiple tables or store search terms and related models in a specific search table.
and what happens when that branch goes unstable?
&gt; Excuse the ignorance, but would overloading __get and __set magic methods not allow this same behaviour? Not if the properties were already bound. &gt; I suppose if paired with c# style property syntax it'd be lovely. There's probably not a single person who disagrees with you on having get; set syntax. &gt; Also is it just syntactic sugar? What happens if I attempt to deserialize to an object an invalid state from a previous revision? No, it's an extra safety guard to ensure that properties have type consistency enforced similar to parameter and return types. Can't say what would happen on unserializing. 
Well, I really don't like the C# syntax but the semantics are nice.
The only vote against is from Dmitry, one of the main engine developers of last years (i.e. AFAIK the PHP 7 speed up is mostly his (or his team?) work). I thought I was always reading the threads and don't remember him objecting it that hard. OTOH he also voted against the first one (but there I remember much about technical objections, https://wiki.php.net/rfc/typed-properties ). Wonder why …
The best news in 2017 (PHP related). Really great job Nikita! Congratulations! Unfortunately, we will have to wait a lot for the 7.4 release, I want to change everything right now. 
let's stop wasting time posting about it on reddit and make it happen sooner :)
As you say, Dmitry is one of the main engine developers, and this feature brings in a significant amount of additional engine complexity. As Dmitry does not see much benefit in additional typing features, this ends up being a lot of complexity for little benefit. Which is, I think, a reasonable position to take.
If I were designing it for PHP I would perhaps forgo the separate variable-to-property binding and just roll them into one. Add access modifiers and you get a free 'readonly' out of it. class Person { property int $height { public __get; public __set(int $value) { if ($height &lt;= 0) { throw \LogicException("Science says no"); } return $height; } } property int $weight { public __get; protected __set; } public function eat($something) { $this-&gt;weight+= $something-&gt;toWeightIncrease() } }
Depends on your view of the world. Glass half full kind of guy? You get a slew of new problems to solve! Glass half empty kind of guy? Better start looking for a new job now, you'll either quit or get fired if that branch goes unstable.
&gt; (such as property accessors and typed arrays / array generics). I’m on mobile, but are there active RFCs for these features? 
No active RFCs. Some people are doing preliminary design work on generics, but I would not expect a viable prototype soon (and array generics are unfortunately one of the trickier parts). For accessors the last RFC (https://wiki.php.net/rfc/propertygetsetsyntax-v1.2) has been declined, but I think this is something we should revisit soon. Typed properties and accessors work very well in combination.
I would love the hell out of this syntax. Maybe submit an RFC? Would be a good feature for PHP 8.
Generics first, then typed callables with be automatically available.
Note: Z Language, Stands for the Zend Engine, Not some random-made stuff. \^\^
&gt; Not if the properties were already bound. Do you mean if you'd set them to be invalid in the constructor, or if some mad sod made them public? I know serialisation could lead to type constraints being violated in some scripting languages. It's not like that not being solved isn't better than what is and my original comment wasn't an attack. I just like to know where the fences are.
Didn't take it as an attack :) just included different points best suited for bulleted replies. If a property is bound to the class i.e. included in the class definition, then the __get and __set are not called when reading / writing it, unless, of course, as you suggested, someone did something stupid in the constructor like called unset($this-&gt;prop). 
&gt; Accordingly, anything that makes using get/set easier should be down voted. Out of curiosity, how would you access protected class data in that case?
Love it!! It will save me a lot of work (especially the comments destined to the IDE). BTW, do you think these 2 are in the pipe? * Typed array of Objects: public function save(User\[\] $users) {...} * Method overloading. public function save(User $user) {...} public function save(User\[\] $users) {...} &amp;#x200B; &amp;#x200B;
https://3v4l.org/Z5k5q
Part of the benefit to getters and setters is that you can declare an individual scope on each, something properties currently cannot do, both getting and setting is whatever access scope you declare the property to be. Immutability typically has less place in business logic IMO. The applicability of say... $bank_account-&gt;debit(500); and it returning a new bank account object leaving the previous one in existence goes against common sense IMO.
Typed arrays (in the form of `array&lt;User&gt;`) are in the *long-term* pipe. I'd expect them to come at some point, but not for 7.4. I think you can forget about method overloading, I'm reasonably sure that it will never be added. Or maybe that's just my own prejudice against it clouding judgement.
Cool! Good news! I have still hope for method overloading. It would allow to write so cleaner/smaller code. :)
As I read through the docs for the third time I might have a grasp on this. How's this for a hot-take: The Handler is a stack of Middleware that handles the request and response generation.
Smaller/cleaner code doesn't imply "easier to reason about" code.
Well I don't think that people are obsessed with it. It's just that generics are very useful. Thanks to them your code can be more predictable and also smaller (as you don't have to write your own, explicit type-checks). Also it is more likely that you will catch errors while developing when using generics than without them. It's a feature that every complete language should have and I don't see any pitfalls it could bring.
7.4 is late. The current development of PHP is excellent but just too slow (like it was in the past). The team has to speed up. Otherwise the fight against JS and the .NET ecosystem will become quite hard... With HHVM leaving we just lost another great supporter...
SCHNELLER!
I second this. I use a lot of custom iterators and reader/writer interfaces to achieve what could be done with generics.
**Handler** is an abstraction - a function/object that takes request and returns response (here it's a function). Every abstraction can be decorated, so if you wrap handler with another one (handler) the procedure calling it wouldn't see the difference. This way either request or response can be modified or intercepted to use its data, or return its own response on some conditions (but the "happy path" is to call wrapped handler - otherwise subsequent handlers would be pointless). **Middleware** solves problem with composition of these wrappers. If you want to wrap some handler directly you need to have its concrete instance (you cannot instantiate object without having it's dependencies first). Using handler as parameter you can stack middlewares in queue where first in line is an outer layer for the next and so on. When last handler is resolved/defined (can be instantiated) you may compose all middlewares together and call them as one object/function, because each middleware after receiving subsequent handler can become handler itself. Another advantage is definition order corresponding to execution flow which makes composition code more readable - no deep nested structures and dependencies preparation that move external (evaluated first) wrappers down.
Eile mit Weile :-P
HTTP 204.
No, you're entirely right as to __get and __set being called if they can't be reached from current scope. I admittedly never thought of that, learn something new every day!
Maybe he believes in type inference ;)
https://xdebug.org/docs/profiler + http://kcachegrind.sourceforge.net/html/Home.html
Is there any kind of cache involved? Maybe some extensions are missing for 5.6 which were available in 5.3... Anyway: You should upgrade to php 7, 7.2 to be precise. Just try it out. See what needs to be fixed and fix it. There is opcache per default enabled. If the site is still slow, investigate more. \--&gt; [http://php.net/supported-versions.php](http://php.net/supported-versions.php)
It's actually been pretty fast- it's just that it has a loooong way to go from where it was pre-7.0. I'm surprised that anyone is willing to wait around for it to catch up. You could just use a language that is already good (enough).
I prefer to use pascal case for static functions and camel case the normal methods, fetch_all is just an outlier I should probably fix.
Method overloading is usually a compile-time feature: ```swift func foo(foo: Foo) { print("Foo") } func foo(any: Any){ print("Any") } let any = Foo() print(foo) // Any ``` This doesn't work well in a dynamic language since PHP has no way to prove a variable has a certain type. Calling the right method at runtime (analogous to dynamic dispatch) seems dangerous to me.
Look into how you have your PHP SAPI set up. Did it change when you upgraded? For example, were you using FPM or FCGI with 5.3 but your 5.6 install uses mod\_php by default? Look at php\_info and see if you have the same extensions installed in 5.6 as you do in 5.3. Did something like apcu not get enabled? Also start looking into profiling with xdebug.
I’m not saying burn the existing sites but a major release usually indicates non-backwards comparability. Why not have a LTS and keep 4.x going until 202X and work on refactoring the architecture to not pollute the global name space. WordPress is adaptable/extendable through hooks, filters and plugins and has an easy data architecture which makes picking up on it a breeze which IMHO is why it was so easily accepted for CMS users and devs. Keep those in mind, but for a major release refactor the code so it’s not stuck in 2005 standards
- rent 2 similar servers as your production one (the same) - put your code there - install php 5.3 on one - run some 1000 gets to some 100 different actions on your site, log the response time, load, and htop - install php 5.6 (or update the code to 7...) on the other - run the same 1000 gets to the same 100 different actions on your site, log the response time, load, and htop Check the difference between the two. That way, you pinpoint the "script" that causes it. Then, go in that script, and keep removing code, until you see the same results on both servers (php versions) That way, you find what call "messes up", and fix it. That's the retarded way to do it with 100% unknown code (but known enough not to update external sites and so on) Ps: my load went from 7 to 0.5 when upgrading from php 5.3 to 7.1, so depends 100% on how your code is built, but generally load should go down and memory usage should go down for the same job when you upgrade, unless you had a compiled library in 5.3 and you run the php version in 5.6 (but even then, not 10x the load...)
&gt; After developing this bundle, I've realized that there might be no real usage for this kind of tool. We use it for [Chronicle](https://github.com/paragonie/chronicle), wherein all server-to-server API communications are Ed25519 signed on top of HTTPS. (Most importantly: Requests that write to a Chronicle must be signed.)
Does your code run cleanly (logs no errors, warnings or deprecation notices) under error_reporting=E_ALL? It might be that you're generating a large number of warnings, which is slow even if they are suppressed. 
But what does is do?
See - http://php.net/manual/en/migration54.php - http://php.net/manual/en/migration55.php - http://php.net/manual/en/migration56.php Then continue with - http://php.net/manual/en/migration70.php - http://php.net/manual/en/migration71.php - http://php.net/manual/en/migration72.php and soon - http://php.net/manual/en/migration73.php
Julia does this with multiple dispatch, FYI. They love the feature, but I'm not sure about how difficult it is on the technical level, and since they have an aggressive optimizer it may be able to mitigate the runtime effects in common cases.
Getting it set up and creating your first dumps will take about half an hour, provided you've got a local server available. The strongest tip I can give you is don't run it unrestricted on a production server. If you're running profiling, make sure it's set to only come on when a secret key is sent as a cookie, otherwise you're going to eat a 90% performance drop. Once you've created your dump files of a few pages, you will load them up in KCacheGrind (or QCacheGrind for Windows) and bottlenecks will in most cases immediately become obvious as the squares which end up filling most of the screen.
The standard opcache cache since PHP 5.5 is "opcache". You'll definitely want to enable it, if it isn't already.
Didn't know that. Still, doesn't seem awfully useful to me. You can achieve the same thing right now by just checking the parameter type in the function. You might save a few keystrokes but the intent is more obvious IMO.
In my case, "they" is almost always "me" so I have no one to blame but myself if I overwrite my squirrel with an int. I have been doing php for quite some time. Long before typehint was even thought of. Heck, I remember heated discussions about the merits of using uninitialized variables. I'm glad to see php ever so slowly moving towards being a more strictly typed language. But using doc hints and just being careful works well enough for me. In fact, using the read-only hint allows me to expose most properties as public without being overly concerned with them being inadvertently changed.
Seconded. In [Atlas](http://atlasphp.io) I get around this by creating several classes per table/mapper with a skeleton generator, and then adding a lot of Docblock typehints; cf. &lt;http://paul-m-jones.com/archives/6885&gt;. Generics would offer a lot in this situation.
It worked! I implemented the __destruct method with carray_destroy and the memory consumption from a NaiveBayes algorithm droped from 50mb (tooo big) to 4mb (oh yeah) and valgrind showed 0 memory leaks. Thank you guys a lot!!
[removed]
By your very metrics, `**static** function BeginQuery()` is also an outlier :-/ Exactly 50% of the methods in your example are outliers :-(
This editor is for writing code, or for the users to write their inputs?
Phew. There's a red-alert that can stand down ;-)
For some reasons I reddit tells me " Post body cannot contain text " so here I'll post the body. This is more of an open ended discussion on what you think are best practive or good ways to deal with a wysiwyg editor on backend and rendering on front. I've never found any resource that felt complete and secure (except the markdown ones but I'll need html) I've always avoided the problem by having plain textarea fields rendered later with either `&lt;pre&gt;` tags, good old `nl2br`, `bbcode` and the likes or no html markdown, but I won't be able to avoid it this time. While I'll go with PHP in my current project, I think this is a cross language question, so please don't feel obliged to send php resources only. I know of htmlpurifier, I can do the basic ckeditor/tinymce/trix integration, but always shelved it as I though I might miss important things, and thought of my takes as brittle (even with good composer packages, but I might have missed the One and Holy Grail). Some points to start conversation about strategies and pros and cons : * Working with images and other embeded :Base64 encode + analysing and exctraction from sent HTML server-side ?Massive dump endpoint (`/uploads` or `/posts/uploads` style) and mix and match later ?Specific endpoint by resource (`/posts/1/uploads`) and if so, what do you do when creating the model as the endpoint wouldn't match ? * Security :I remember being told to keep the input "as is" in db (or any storage) and only but always escape/purify on output. Still valid to this day ?Is there some other security things to know ? * Default styling :Should I have a `wysiwyg` class that apply default style to most of its children html elements ?Can you (and does an editor support it) add classes by default for some tags (lets say add a `bg-blue` class to all `&lt;strong&gt;` tags) and if so at which point of the cycle (in the js editor, on upload, or on outputting) ? I might add more points if I read about interesting ones in the comments, or think of other myself.
I'll added a body with more info, the new reddit redesign threw me off. For your specific question, I though more of users (admin or not) writting post, blog, comments, or even marketting content. A following question would be how to include custom made widgets, or how to balance output freedom without having a mess of html soup and custom (or worse, inline) css everywhere.
Major means a breaking change in public API Minor can be new features or deprecation warnings before a major. Patch should be bug-fixes Well managed software should handle this like a pyramid with major changes at the pinnacle, as few minor changes as possible, and as many patches as are needed. Non-public API changes can happen at-will at any stage. WordPress has an unenviable position of a medium-large public API, with very few private details. So far as I can tell, it's not practical to rewrite it totally without BC, architectural changes, etc. I think it was 4.9 (December 2017) I completely mapped the thing including vanilla execution order of filters and actions. Perhaps if it were internal the old lift-and-shift could work, putting special rewrite rules in to ensure old and new do not interact. In-fact I think that is what they are trying to do with that pile of React they shat onto the top. That as well as boost costs because "look we're all react dev's now and they get paid well". Unfortunately React is a bubble at this point. All they are doing is serving to commodify the marketplace so they are essentially tying their own noose.
Already enabled, which is good, except that it isn't a solution to my problems, which is bad. 
Yes, I did go through those, and did not see anything which would indicate that I was either using deprecated functionality (except the things I already knew about like request variables) or performance issues. Thanks for the pointer though!
ohh looks like 11 php devs don't have a sense of humour
APC has been replaced by APCu, xcache is just deprecated. OPcache is the primary choice for a Bytecache as nikic suggested. If you need a "full" caching driver you should looking into APCu and Redis I would say, although that shouldn't be your primary concern for now. For performance profiling I can also recommend blackfire.io
If you are destined for a Laravel app, it seems like a no brainer to start there with something simple. There are numerous excellent resources to help you along the way.
First off: Java calls them generics, and a few other languages have followed suit, but an earlier and much clearer name is "parametric polymorphism", or "parameterized types". (Or for an even more opaque name, C++ calls them "templates".) As the phrase "parameterized types" implies, what we're really talking about is the ability to write type hints where we say "this method returns something of the same type it accepts", or "this accepts an array of some type, and returns a single instance of that type", or "this accepts an array of this type, but returns an array of a second type". It's useful anywhere you would otherwise want to use type hints but you need to deal with arrays or multiple types. If you've ever written a docblock annotation like `@param $users User[]` or `@return Post[]` then you'll probably understand the attraction of generics, but actual generics are more powerful and flexible. For a concrete example: Let's say you have a custom `Collection`class which can hold a bunch of `User` objects or `Post` objects, and then you have a `find` method, which will return a single object of whatever type the collection consists of. With generics, you can just...do it. It's one class, super clear, no duplication. Without them, you'd need to make a `UsersCollection` and a `PostsCollection` (and so on for every type you need a collection for), all of them inheriting from the base `Collection` class, and then the base `find` method couldn't specify a return type, so you'd need to duplicate that as well, and honestly it's just exhausting to think about. As a developer, there's no real pitfalls in relying on generics. If you like type hints, then it'll let you type hint some things you currently can't. If you don't like type hints, it won't force you to use them. And as for how it'll help PHP: It'll mean that the developers who want to use them can, and their code will be shorter, safer, and more maintainable.
Things I will invoke into it, Thus I will continue developing the Extension using C++ or C. \^\^
Thanks for this. :)
I agree on this suggestion, because updating from PHP 5.3 to 5.6 without other changes should make the application faster, unless it triggers more warnings.
This would be YUGE...I can't wait!
Thanks mate!
Yes, it would help a lot, but we didn't look at how to make that work in the ORM yet: if you have ideas, open an issue with a proposed approach :-)
&gt; The strongest tip I can give you is don't run it unrestricted on a production server. If you're running profiling, make sure it's set to only come on when a secret key is sent as a cookie, otherwise you're going to eat a 90% performance drop. Unless you mean to actually redirect traffic to a separate php-fpm instance which has different extensions loaded, this is still a bad idea. Xdebug slows down your code (significantly!) even if it is not used at all. If the xdebug extension is loaded, you are always taking a performance hit. Xdebug is not suitable for profiling production services, you should use a different profiler with less overhead for that.
Sorry for my ignorance but shouldn't array&lt;User&gt; be simpler than full generics? For example, we already have typed variadics; can't that logic be somehow reused? &amp;#x200B;
Agreed. In general code execution time should go down when upgrading. When I moved from PHP 5.6 to PHP 7.2, the speed of my code doubled in two different projects.
I strongly agree with this. This is probably what is happening. In general, code execution should stay the same or speed up when upgrading PHP versions. And I have noticed that if a page generates PHP errors, the script slows down to way slower than normal.
For my small website, I install the browser plugin iMacros and run test scripts that I created. I run the tests on the dev part of my website, run a script that swaps dev with production, then run the tests again on production. Seems like unit tests are a lot of work, and didn't address any of the HTML or SQL sections of my website. I like iMacros because it mimics a user submitting forms and clicking things in the browser.
this whole post is odd
Haha, really? xD
[https://www.reddit.com/r/PHPhelp/](https://www.reddit.com/r/PHPhelp/)
Also, if you develop a lot of cli apps to automate stuff you could also use [https://laravel-zero.com/#/](https://laravel-zero.com/#/). So imho its indeed best to learn the laravel stack at this point
Based on your very, very short description you could take a look at Goutte.
C++ calls them templates because it's truly is string based code generation. C++ have no notion of "parametric polymorphism" on type level.
why dont they mention languages. they should mention languages.
Or [phppm](https://github.com/php-pm/php-pm/blob/master/bin/ppm) which is based on [React PHP](https://reactphp.org/) Or [Swoole](https://www.swoole.co.uk/) which uses a C extension.
ask /u/levelsi, haha. He's the one who coded it :)
NodeJS would work in the same way if you had a FastCGI proxy for a JS script. The script would be loaded for each HTTP request and shutdown after a response has been sent. The default for NodeJS is to create a socket server which itself makes proxying less useful. PHP can do it as well, check out ReactPHP, Amphp, Ratchet, etc.
I'm writing a programming language interpreter in Rust and am having a blast with early returns. ;)
Thanks
Exceptions for errors. Or option/result types that can be coerced into a concrete value depending on success of the call.
Symfony Flex FTW!
I have an update on this. We enabled PHP 5.6 again this morning, and as expected, the load shot up (we had tweaked a few PHP.ini parameters but that didn't help). However, I changed my most popular script to run under PHP CGI 7.2 via .htaccess in that directory, and this sped things up and caused the server load to drop. This script uses PDO to connect to the mySQL database, and also uses XML DOMDocument to build and return XML objects. Is anyone aware of any PHP 5.6 issues with either of those things? Ultimately, the goal is to move to PHP 7.2, however that is going to take some time to sort out the various issues around that.
Of course, but we’re talking about C here
that site needs some UX work. any time you search for a job type without a listing, it gives you a 404 page instead of just informing the user that there are no jobs found. that's pretty terrible
Wordpress better than Laravel, Symfony, etc confirmed. /s Interesting opinions but what it really sounds like is that php needs a way to skip the bootstrap phase for production environments where it is very unlikely to change
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
That was my first Reddit post. I was unable to keep typing my message, nothing happened when I pressed the keys on my keyboard. Is there a character limit or what? 
Type inference do not work with subtyping polymorphism all that well, thus explicit type annotations are a must.
Yup something like this. I remember investigating this a year or two ago but it seemed a bit too rough around the edges. Perhaps it's time to take another look. Thanks!
Typed callable provides parameter types (and thus it's count) and return type. It does not matter if types in question are lower level or higher level like generics. So generics by themselfs would not be enough.
I was thinking the same thing as he was describing the problems. Add or remove whatever functionality you want, all config/translations/templates are cached on first use, and you can extend it with custom modules without worrying about something breaking because the Symfony team does an excellent job with backwards compatibility.
What i have been saying since cakePHP became famous. I rarely use php frameworks in my projects, throught the years (&gt;10) I kinda developed my own framework, that doesnt depends on fanboys &amp; marketing for survival..
I guess Rasmos Lerdorf was right, I mean, There's no generality in wherein PHP Frameworks will always be a guided interview to an applicant (not stating a Real Job Interview here, I meant by if we have to create a Framework that can adjust to any type of General Business or Merchandise, rather something that really helps its Customers), I have made my own Frameworks before (personally for selfless uses). I believe however that MVC is really important in terms of Framework Design, like a Controller or some sort, I have read his entire video scheme, And I still think Wordpress is indeed a Universal Fact slapped into the Faces of other Frameworks. lmao. So I guess, that's it. If you want it to be a Universal Framework like Zend or Symfony for a Company, I guess he's right. Haha, No offense really. \^\^
&gt; I rarely use php frameworks ... &gt; I developed my own framework k then.
that comment section is also full of BS
There is not really any pitfalls to generics. For instance say you want to have an arrayable collection but want that collection to be locked to the type dynamically specified, PHP would do this automatically with type exeption &amp;#x200B; \`\`\`php class Collection&lt;type T&gt; { public $colleciton = \[\]; public function push(T $item){ $colleciton += $item; } \`\`\` &amp;#x200B; If you try to push a different type on to the collection then how it was contructed PHP should throw a invalid type exeption. 
There is also [roadrunner](https://github.com/spiral/roadrunner) but I don't know how it compares. I've been wanting to try that out for a while as well.
&gt; Interesting opinions but what it really sounds like is that php needs a way to skip the bootstrap phase for production environments where it is very unlikely to change [Like this PR?](https://github.com/php/php-src/pull/3538)
He was the only one who could do it right!!
I value this guy's opinion less and less as time goes on.
Please provide code and see /r/phphelp
Solution: Download XAMPP or any other webserver, start it and then call your script which needs to be placed inside the webservers folder (htdocs, www, html, its called something along this lines). 
yeah well thats what I did &amp;#x200B; what is webserver simply?
Well a Webserver handles incoming requests and in your case interprets the PHP script and executes it. I'd go for XAMPP, it's ery easy to use, specially for newbies. 
This is old, The major flaw in his talk is that even though a request comes in, it might not access the database and so the database class doesnt need to be contructed every request. This is what frameworks already do. Yes they come with alot of features, but if they are not used they arent contructed. He has been doing this talk for years now, I think i first watched it in 2014 where he blasted laravel 4 specifically. Which was true, laravel 4 loaded and instantiated everything for every request. But not anymore, laravel 5 will only instantiate what you use. So who cares if a framework comes with alot of features, Sure you might not ever use them. But if you dont use them, they are never loaded or instantiated.
In the same area, OP can try New Relic: https://newrelic.com Try the 14 day trial and see if it's worth to keep the license after you've fixed the problem. This all sounds like something you can fix in minutes when using something like Blackfire or New Relic.
Yep, and that doesn’t depend on a huge community battle-testing it all day. Always a good choice for writing stable applications. Why reinvent the wheel when you can reinvent the whole vehicle?
&gt; everyone needs a framework, just not a general purpose framework Did the distinction go over your head?
Im sure you have built fine framework not like that Symfony or Laravel crap /s
Not quite - that PR’s about doing all the class loading in one hit from opcache. Using that you’d still have all the runtime elements of an app’s bootstrap like instantiating objects, connecting to services, etc.
or Zend Expressive, i use symfony components while using zend expressive ( e.g: translator, validator or cache ) but only when needed. 
Laravel 4 never instantiated everything for every request. So, if that is what he said, he was wrong then too.
For I is dutch. If I not program English = false. Goto school: English++ 
Front end user input already does proper validation and then sanitizes data before transferring to back end. Back end cannot receive data from anywhere else and is locked down to front end, but I also wondering if its overkill to do validation and sanitization again on the back end using a completely different method. For example gump or custom coded regex. This means all data would be validated and sanitized twice. On user input and before processing on the back end. Is this unnecessary or maybe just overkill? How about the data that is transferred back to the GUI front end. Is there any reason to sanitize this back? My assumption is not, because I trust the code and the data on my back end already.
:) Jokes aside. You might be right on this one.
Submit the data with AJAX. Do the validation / sensitization on the server side. Respond with the AJAX call back to client with fixes or errors. Displays errors if any or success and move on. That way you're not double coding it. Never trust the data coming from the client. Your front end code doesn't matter if someone can fake the form input.
&gt; creator of the framework tells you thats not how it works &gt; tell him he's wrong Classic PHP Reddit
The correct way would be to validate once. That's how most professors will tell you. My recommendation would be to validate it in both places. In the front end because you can react faster to the user and in the backend because some users might disable JS completely. 
He wasunt wrong 2 years ago. When the video was posted. Big part of my point my man.
Validate input. Do not fix invalid data, just reject it (with a useful error message that your future self can refer to). That is, if you disallow HTML, then don't try to strip HTML tags out of the data. That leaves you open to things like "&lt;&lt;a&gt;script&gt;alert('foo')&lt;&lt;/a&gt;/script&gt;" being turned into "&lt;script&gt;alert('foo')&lt;/script&gt;". Sanitize output. Only sanitize for the next hop, never for multiple hops. The database is input and output. Even if you validated the data before you put it into the database, validate it when you're pulling it back out. Forms are (obviously) input. The HTML you generate is output. Javascript on the page is a different type of output. JSON is yet another different type of output. Sanitize them all differently. That is, when putting comments into your database, do not use htmlspecialchars(). Do use parameterized statements or if you're actually completely unable to avoid it (such as a statement that acts on the schema rather than data) -- and this is extremely rare that you can't avoid it to the point where you should waste hours figuring out why you can't avoid using parameterized statements before implementing it -- THEN and only then use the built in function from your database module to escape the data (after re-reviewing all relevant caveats and gotchas, like potentially different character sets escaping things differently). This means that when you pull your data out of your database, you're never tempted to use something like htmlspecialchars\_decode(). And always remember, just because it isn't coming *directly* from the user doesn't mean data from the database, some API, or whatever doesn't come from a user. Every time it touches your code, validate it. Every time it leaves your code, sanitize it only to the specific needs of that system. Never guess where the data might go afterwards.
&gt; Back end cannot receive data from anywhere else and is locked down to front end, [Are you sure about that?](https://paragonie.com/blog/2016/03/client-authenticity-is-not-server-s-problem).
&gt; Back end cannot receive data from anywhere else and is locked down to front end This is not possible. Anything passed to your back end via HTTP can be imitated via any http client and as such, you cannot rely on the front end only for validation. Use front end validation for user experience / interface, use the back end for data integrity.
next rfp: declare variables by using type instead of $ string var = "test"; 
I don't think you understood what I tried to say. My front end is actually a different system than the back end. I'm not talking here about browsers. The browser is just what users will interact with the front end. An attacker can or can't use a browser as he can just try to manipulate data in other ways. Assuming your forms are not protecting against cross scripting, have no unique tokens that expire, you are not encrypting values first, checking referrers, user session, account, etc. My questions are not about the form or browser. How exactly do you think sanitization and validation works? Its just software code and attacks try to find a loop in the hole to bypass them. Then you have a serious issue. Of course its about security. This is how you inject JS to pages or SQL injections into databases. Most software do sanitization but the reason some are hacked is because someone found a bug that tricks the system into letting the attacker input or use the system. The door is usually the front end that needs to transfers data, this can or can't be forms depending on the software. Think of this like Mario Level 4-2 where speed runners found bugs relating to how pixels are calculated to gain more speed. The front end usually lets someone submit and try data over and over and over again. This is exactly what attackers are doing to exploit and try to use something in their favor. There is no perfect sanitization code. This is like claiming no software has bugs. If that was true we would have no security holes in anything. Hence my point was that if you are using a completely different system on the back end. Data gets checked twice using different methods. Attackers can't reply on errors or information from the back end as they can't see or interact with that. So even if the front end server has a glitch that lets something pass, the back end has a second chance to detect this.
To be fair he's not replying to Taylor, Taylor's comment was posted after his.
Thank you. Yes, logic tells you to do this only once, in my case user touches data only once but I was just curious if there was any extra benefit on doing it again with another method before database insertion/processing. Just in case of software glitches or if an attacker manages to bypass the first checks.
You might want to clarify your first post to say that your front end system is your main web server in the DMZ that talks directly to the clients, and the back end that you're talking about is a firewalled server that can only get requests from the server in the DMZ. The way I understood it was when you were talking about a front end, you meant client-side code, and the back end was a web server accessible to the world.
I know that. I do browser JS validation just for user convenience. All the validation/sanitzation is on the server side. The first one is just so forms are nice and the GUI is more user friendly. I'm completely aware of this and nobody should rely on code that users can manipulate on their side, that includes HTML or JavaScript. I posted this on r/PHP so I assume we are talking here about PHP on the server side which the user can't tamper with.
Its not a public server.
Sorry, you are correct. My mistake.
Must be an amazing framework. 
&gt; Classic I didn't make this :)
I didn't make this
Hey Pieter, I thought you did, as a companion site to Nomad List?
Front end: user experience Back end: security and integrity Back end is a must, front end is a good to have. 
When doing dependency injection, inject the factory. Then, if you need a different file fetcher class, switch factories in your dependency injector to one that provides the new fetcher factory. &amp;#x200B; interface FileFetcherFactoryInterface { public function create(): FileFetcherInterface; } interface FileFetcherInterface { public function fetch(string $file): File; } class FileFetcherFactoryFoo implements FileFetcherFactoryInterface { public function create(): FileFetcherInterface { return new FileFetcherFoo(); } } class FileFetcherFoo implements FileFetcherInterface { public function fetch(string $file): File { ... } } class FileFetcherFactoryBar implements FileFetcherFactoryInterface { public function create(): FileFetcherInterface { return new FileFetcherBar(); } } class FileFetcherBar implements FileFetcherInterface { public function fetch(string $file): File { ... } } class MyClass { function __construct(FileFetcherFactoryInterface $fileFetcherFactory) { $this-&gt;fileFetcherFactory = $fileFetcherFactory; } public function init() { $this-&gt;fileFetcher = $this-&gt;fileFetcherFactory-&gt;create(); $file = $this-&gt;fileFetcher-&gt;fetch('baz'); } public function check() { if (!isnull($this-&gt;fileFetcher)) { echo get_class($this-&gt;fileFetcher); } } protected $fileFetcherFactory; protected $fileFetcher; } /* Using Level-2/Dice as my dependency injector because I'm too lazy to type out my own hardcoded injector. https://github.com/Level-2/Dice */ $dice = new \Dice\Dice(); $rule = ['substitutions' =&gt; ['FileFetcherFactoryInterface' =&gt; ['instance' =&gt; 'FileFetcherFactoryFoo']]]; $dice-&gt;addRule(MyClass::class, $rule); $myClassFoo = $dice-&gt;create(MyClass::class); $myClassFoo-&gt;init(); $myClassFoo-&gt;check(); # echos FileFetcherFoo $rule = ['substitutions' =&gt; ['FileFetcherFactoryInterface' =&gt; ['instance' =&gt; 'FileFetcherFactoryBar']]]; $dice-&gt;addRule(MyClass::class, $rule); $myClassBar = $dice-&gt;create(MyClass::class); $myClassBar-&gt;init(); $myClassBar-&gt;check(); # echos FileFetcherBar &amp;#x200B;
Hey, chillidoor, just a quick heads-up: **refering** is actually spelled **referring**. You can remember it by **two rs**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
&gt; The only problem with that approach is that an attacker can now rely on your errors/info to try to bypass the server sid Wat?
There's a package called larastan that could help here. But yeah all that black magic are rightly reported as code smell by the static analysers. Laravel models are pretty bad. 
This is how I do it. If you are guaranteed to have JS enabled (such as in a frontend-heavy application) you can forego the error messages from the backend. Display errors only on the JS pass of the validation, and if the validation fails on the backend, just output a 500 or something. My rationale is that if someone is trying to access the backend through means other than the supposed frontend app, they are probably up to no good, and I would not deign to throw even an error message at them.
So how do you check if an email is valid? On the client side once and then not at all on the server side?
If you're publishing an API and its openapi schéma, you can use it to drive both frontend and backend validation. 
On both. I have developed a set of symmetric validation rules for both client and server side. For those that can only really be checked server-side, the frontend validator does an ajax call. It's a bit more complex this way, since validating is not just a matter of looping through rules anymore, but the user-perceived performance gain is well worth it. 
Nothing wrong with that decision, but the existence of symfony flex renders Silex pointless, and a small API can very happily be built within that
&gt; silex was recently deprecated. they said, hey just use symfony4 Actually, they said "hey, just use Symfony Flex", which is a more modern take on what Silex was; a lightweight framework with a subset of the components of SF.
Thanks to you and /u/dmgctrlr for your comments. I suspected just learning Laravel would be the way to go, but I thought as an outsider looking in that it might be too "big" for pumping out tiny solution apps; it seems by the response that my assumption is incorrect, and I need to sit down and learn it.
I tend to use the filestructure for this. Glob() a directory and those classes are what the factory can create. You don't need to read the directory when you don't have to list the classes/objects either. With a PSR-0/4 autoloader you can simply check if a class exists.
Really? I thought he said use symfony4. I'll check it symfony flex
Yes, for a landing page I maybe wouldn't use a framework. I also wouldn't make my own, because if I need one I'll use a real one. That's the point.
He was, though.
Slim is the closest thing we have to a perfect framework. If there was just a *little* bit more out of the box, or if they unwrapped the router, request cycle, and container *just enough* to turn slim into a library (that someone else could make perfect), I think that'd be fantastic. I'm sure everyone has a boilerplate set of classes they drop into Slim projects to flesh out the functionality where it's lacking.
I kinda stopped doing client side validation years ago because I can submit the data to the server and return something like this: { success: false, error: { field: 'email', error: 'Not a valid email'} } The JavaScript simply highlights the fields that have issues. Depending on the design you can display the errors as a tool tip or other UI component. Doing it twice just raises all sorts of annoying issues. Let's say you need to change the way the validation works or the field name or something like that. This makes it so that you need to change that in multiple places in the code rather than one. I tend to do still do client side validation if the user needs it for their own convenience if the design calls for it. Just to be clear most of these validations are basic things like "oh no this string isn't an email but this is an email field" or "this number is outside the defined range 0 - 3.14159". These are mistakes that employees who use the tools might make innocently so responding with the correct error is not a security issue. These are all authenticated users. If they didn't provide the right session key in the form of a cookie string then the API would not be responding to them at all error or not. Also my server side validations are unit tested and backed by built in PHP methods like filter_var which I tend to trust a little more than most JavaScript out there these days.
[](https://github.com/INTisp/INTisp/blob/master/intisp/inc/service.php)[https://github.com/INTisp/INTisp/blob/master/intisp/inc/service.php](https://github.com/INTisp/INTisp/blob/master/intisp/inc/service.php) &amp;#x200B; Please tell me that isn't what I think it is.
Ok so There are some files that need to be cleaned up. I will do that now
Dependency injection. 
Simply because everyone loves collections and generics are necessary to have properly typed collections. It is also very java.
Not hotdog?
By "cleaned up" you mean "remove a remote exec shell" 
That works if you can know everything at injection time or can use some type level discriminator (read: generics) AND you can ensure each thing only deals with one kind of fetcher (reasonable but not always possible). I don't know if php has generics off hand (I just lurk here and don't actually use the language any more), so it may be necessary to inject a factory that can determine what thing to give you based on user input rather than type input. You can still use DI for this, but you end up with a contained service locator usage. 
That's a security risk
&gt; I'm not a real programmer. I throw together things until it works then I move on. The real programmers will say "Yeah it works but you're leaking memory everywhere. Perhaps we should fix that." I’ll just restart Apache every 10 requests. -- Rasmus Lerdorf 
Oh, rasmus, we know. ....fucking trust is php4 users; we fucking _know_.
There's plenty of overhead in Laravel. First the basic classes like Container and App contain over 60, in some cases over 100 methods covering a wide range of arbitrary functionality that should never be in one class. Then it does things like start the session even if you don't use the session. And also opening it for WRITING even when you're only reading it. Things like that can easily destroy performance in the name of apparent ease of use. 
It depends on what kind of factory you're talking about. If it's *Main* factory that compose use case handler (mapped to route endpoint) then treat it like configuration not the source code - don't worry about changing it. Using autowire tools, your factory would be hidden behind configuration (maybe with some meta-programming logic) and changes would affect your code the same way as if you overwritten injected object's instantiation (FileFetcher implementation). If this factory's product implementation is based on (or indirectly derived from) input/request parameters then inject factory implementing common interface into service/business object that will pass that runtime parameter to factory. There's also hybrid case, when middleware "utility" services (like authentication) provide different implementations to main factory but resolve them from incoming data (mostly meta-data like headers in case of http). These are similar to main factory, but serve wide range of use cases - treat their instantiation as a part of configuration as well.
I agree, he is very opinionated. From a pure performance perspective he is right, but as well all know there is more to the game than just performance.
No generics, but there appears to be growing interest in getting them.
Oh. Oh my. That is certainly a thing. 
It’s true: they all suck, because like myself, PHP is an old-school crap coder and we don’t like the “modern way”. I cannot stand Laravel or Symfony because they demand a drastically different workflow than the spaghetti code guys like Rasmus and I learned in the 80s. So really, frameworks suck... for people who don’t like frameworks. For everyone else, they seem pretty fantastically useful and I’m more than happy to let people use what works best for them. I’m also happy to be the guy who gets called in a while later to sell them additional hardware once the product becomes successful and brings the entire infrastructure to its knees.
The PHP opcache takes away a lot of the performance hit of having all those classes. And the session code is optional and is designed to be easy to removed or replaced with something else. But having said that, yeah, Laravel does put a much higher priority on easy of use than it does on maximizing performance. 
You don't need to know everything at injection time. There are libraries that use reflection that will inject specific classes automatically, and can be further configured to inject implementing classes instead when you need to. The parent class doesn't know if it's being extended. The class that is being injected into shouldn't know if it's using the parent class or some child class (or, ideally, you'd use an interface, explicitly map an implementing class to each interface, and leave all implementation details behind). Configuring a generic DI library to substitute a specific class (or use a specific class when it sees an interface) is a two dimensional array per substitution... Using an application specific dependency injection class where you code your own closures for each case is about 6 lines per substitution, with lots of very similar syntax for each case. One may be more verbose than the other, but either you know everything at injection time and forego the overhead of a generic library, or you just make special cases in your configuration when necessary. I've done both, and it really is reasonable to keep track of your dependencies as you develop... even for full fledged CMSes.
Based on your workflow, I think you might like Crystal programming without drastic changes and their web framework is less to write and very expressive. Just like how she code https://github.com/vladfaust/crystalworld
Pressing F so goddamn hard, so much respect for you guys. I voluntarily upgraded two projects in my company from 5.1 to 7 just to get them more up to date. But 4... how do you do it? Do they pay you extra?
Would be nice to see this debated here : [https://php-vote.com/idea/28](https://php-vote.com/idea/28) :D 
Sorry, but you provide no value here. You have 0 code on your own (the example is copy-paste from https://pixlab.io/examples) and the API is already available from https://github.com/symisc/pixlab-php (composer compatible).
It depends on your use case. If the factory always returns an instance of the same class and you, at some point, want to change this class to other implementation, than the classname can be a configuration parameter injected to factory. If the factory creates instances of different classes based on some input, it would be easier to know what is this input, to come up with some advice (for example some input-&gt;classname mapping in configuration). In both cases, fetchers should have constructors with no parameters, otherwise you will have to write some code or have a DI that will guess the parameters without additional code changes. 
At least it's bound to localhost.
&gt; Backend cannot receive data from anywhere else Har har har
What "professors" you are talking about?
you are not quoting yourself though. your comment did not imply that at all.
Sony, NBC sports, the Olympics were all done with a, wait for it, Drupal app.
Doesn't this mean that the new factory needs to copy code from the old factory? Or maybe just extend it.
People read what they want, and im delusional, has i wrote, i **BARELY** use frameworks, your comment said nothing usefull related to where a general porpuse framework would help me.. &amp;#x200B; All i read in those discussions is, its good because everyone uses it.. uses it for **WHAT** ?? Id bet my salary none of those that downvoted could point a real reason why to use a framework. &amp;#x200B; i've worked with all the frameworks, from zend to cakePHP, codeigniter, from the new kid in the block, to the homeless in the corner.. you name it, i probably have worked with.. &amp;#x200B; Only when the project requires it for some reason. &amp;#x200B; Like i said to the other guy, cant care less about the downvotes, but at least bring some proper arguments to the discussion..
Problem with splat operator is there is no keys. Sometime you need an associative array with all values of some type.
Your statement about the gap between fopen and flock is correct and I guess that is why file_put_contents has the LOCK_EX option. Note that the post takes the behavior/problem you describe into account (except in the example with sleep, which is for illustrative purposes).
For your use case, I would recommend the strategy pattern, not factory: ``` class FileType { private $id; public function __construct(string $id) { $this-&gt;id = $id; } public function getId() { return $this-id; } } class FileData { } interface FileInterface { public function getType(): FileType; } interface FetchingStrategyInterface { public function fetchFile(FileInterface $file): FileData; } class Fetcher { private $strategies = []; public function setStrategyForType(FetchingStrategyInterface $strategy, FileType $file_type): void { $this-&gt;$strategies[$file_type-&gt;getId()] = $strategy; } private function getStrategyForType(FileType $file_type): ?FetchingStrategyInterface { return $this-&gt;strategies[$file_type-&gt;getId()] ?? null; } public function fetch(FileInterface $file): ?FileData { $strategy = $this-&gt;getStrategyForType($file-&gt;getType()); if (!$strategy) { return null; } return $strategy-&gt;fetchFile($file); } } $fetcher = new Fetcher(); $fetcher-&gt;setStrategyForType(new FooFetchingStrategy(), new FileType('foo')); $fetcher-&gt;setStrategyForType(new BarFetchingStrategy(), new FileType('bar')); $foo_file = new FooFile(); $bar_file = new BarFile(); $foo_data = $fetcher-&gt;fetch($foo_file); $bar_data = $fetcher-&gt;fetch($bar_file); ```
The idea would be you have a well defined enumeration of things and you use the you're system to enforce that enumeration rather than some run time behaviour (e.g. a string or an actual enum). You define a generic interface and constrain it's generic parameter to some type hierarchy. Subtypes in your heirarchy are essentially markers (they don't have to be though). Here's a C# example: public impl IFileFetcher&lt;T&gt; where T : FetcherKind {} // just assume there's a fetch method public class S3FileFetcher&lt;T&gt; : IFileFetcher&lt;T&gt; {} You'd then have registrations for each FetcherKind. If you keep public assests in one bucket, user uploads in another, and sensitive user documents in a third, you'd have: services.AddTransient&lt;IFileFetcher&lt;PublicAssests&gt;&gt;(sp =&gt; new S3FileFetcher&lt;PublicAssets&gt;("publicbucket", sp.Resolve&lt;IS3Client&gt;())); // etc Now you can restrict what things are allowed to look at what kind of files at the type level and prevent things like sensitive user documents from being accidentally exposed on an upload overview page. You also prevent some run time errors such as misspelling a name because a strong discriminator was used (admittedly a true enum prevents this as well). You also avoid implementing a service locator restricted to only these types as well since you've forced it into the type system, this is the big win. You can also go a step further and reuse your marker classes to register configs as well that your Fetchers use to determine bucket name, etc. Maybe something like `public class S3Config&lt;FetcherKind&gt; {}` and it holds all that knowledge for you. The impl just says "I need an S3Config&lt;T&gt;" and the IoC container resolves the right one for it. The thing using the fetcher will just say, "I need a IFileFetcher&lt;PublicAssets&gt;` and it doesn't care what they under laying impl is so long as it hands out public assets. 
You're always going to have to modify something when you add support for a new file type. With the strategy pattern, you would avoid violating the open/closed principle: the fetcher code never changes, you just add strategies when it's instantiated, like via a service locator: $container = new Container(); $container-&gt;add('file.fetcher', function () { $fetcher = new Fetcher(); $fetcher-&gt;setStrategyForType(new FooFetchingStrategy(), new FileType('foo')); $fetcher-&gt;setStrategyForType(new BarFetchingStrategy(), new FileType('bar')); return $fetcher; }); $fetcher = $container-&gt;get('file.fetcher'); From there, you can use whatever dependency injection method you'd like.
You could add an event to hook into to add new strategies, I guess. Although event systems usually are built on reflection and convention. Will read up on service locator, thanks!
One pitfall to watch out for with service location is injecting the service container into your services instead of specific dependencies: class FileService { private $container; public function __construct(ContainerInterface $container) { $this-&gt;container = $container; } public function doSomething() { $fetcher = $this-&gt;container-&gt;get('file.fetcher'); } } This is bad, because you're injecting too much. `FileService` only needs to know about the file fetcher, not everything else. Instead, you really want to do this: class FileService { private $fetcher; public function __construct(FileFetcherInterface $fetcher) { $this-&gt;fetcher = $fetcher; } public function doSomething() { $this-&gt;fetcher-&gt;fetch(); } } When doing dependency inversion you will use a service locator, or something similar, at some layer of your application, but you want it to be as high up as possible. The less classes know about the container, the better.
Are you not bothered by PHP using `offsetGet` and you using `fetch_all`? Sounds like it would end up incredibly inconsistent in bigger libraries.
That's because they are duck-typed languages. PHP is not and never was.
It's a work around, agreed, but it's not great. Best solution thus far to solve the generics problem is having collection classes containing an array of specific instances. It's n+1 for many classes, but if one wants type safety - which this RFC is very much about - that's the way to go.
There's a lot of work being put into Slim 4 you might be interested in. To be honest, if I feel I need to start adding a load of stuff on top of Slim 4 that's when I reach for Symfony Flex.
Flex is a composer plugin to work with symfony 4. Instead of having the mega package we used to have when installing symfony, you use flex to install the bare minimum then add components on top (eg debug, database, forms) if and as you need them, already auto-configured to work out of the box. I haven't started a single Slim or Lumen project since Flex and S4 came out.
I don't mean a lot, I mean basic things like better glue between the controller and view layer, a more sensible container pattern (almost everyone implements a service locator antipattern in Slim because that's how it works out of the box).
Yes, I thought about this. Convention over configuration, as it's called.
The strategy pattern is a poor man's lambda, it is used to compensate for the lack of closures in languages like C++, Old School Java(before version 8). This article explains how to cut down the boilerplate code: https://www.baeldung.com/java-strategy-pattern
To resolve the issue i creatd a public folder which contains my index file and i placed all my other files outside my public folder. &amp;#x200B; I changed my virtual host file ona pache to point to [mydomain.com/public/](https://mydomain.com/public/) &amp;#x200B; so with dotenv library and a simple router everything goes to my index file and then routed to one level above my public folder!
Well, the only form I would buy it would be like "the validation *code* should be written only once". Which could be used for the both server and client side validation 
Not even 2006, I'd say they were valid until around 2012 or so, maybe a bit later. Whenever CodeIgniter stopped being the most popular framework. He probably sees a lot of code written before then, or by developers who use practices they developed before then. My company is still making new websites with CodeIgniter 2 :(
Lots of people here taking the OOP approach. We've got higher order functions and they're the right mechanism for this - treating your **factory as data**. This is the core principle of e.g. Fabien's Pimple.
[Python does have generics.](https://docs.python.org/3/library/typing.html#typing.Generic) That said: plenty of people rarely or never use type hinting in python even with all the support for it and the static analysis you can get with it from tools like mypy. Why? Because often people that really care about static typing are probably going to go off and use statically typed languages. 
Okay - I get where you're coming from. I was confused by the use of generics, which to me, didn't include what you described. What you're describing is something I actually do in my code, using [Auryn dependency injector](https://github.com/rdlowrey/auryn). &gt; "can use some type level discriminator" For that I don't use generics, just explicitly list the known types which are created by extending an interface/class. Some code from a project, with the names changed to protect the innocent: class NewsletterImageStorageClient extends \Google\Cloud\Storage\StorageClient { } class PdfStorageClient extends \Google\Cloud\Storage\StorageClient { } function createNewsletterImageStorageClient() { return new NewsletterImageStorageClient([ // Get appropriate config here. ]); } function createPdfStorageClient() { return new PdfStorageClient([ // Get appropriate config here ]); } $injector-&gt;delegate(NewsletterImageStorageClient::class, 'createNewsletterImageStorageClient'); $injector-&gt;delegate(PdfStorageClient::class, 'createPdfStorageClient'); function renderNewsletter(NewsletterImageStorageClient $imageClient) { // do stuff with $imageClient } $injector-&gt;execute('renderNewsletter'); Which I think has the same main benefit you listed; each specific type of StorageClient can do the specific things that are configured for that client, and not the other things. (btw I think I was assuming that OP needs some runtime info to determine exactly what type to return from the factory.....which re-reading their question might not be the case.) 
&gt; There is no way to conveniently browse through the available plugins I'm guessing there's a website? [?](https://plugins.jetbrains.com/phpstorm) &gt; probably the first steps in developing an "app store" for plugins Yeah, that. 
C not supporting unicode except in obnoxious ways is also a criticism of C, python1/2 had the same deal with strings and was willing to knowingly walk into the python2/3 divide that *still* isn't fully resolved over 10 years later because there was so much will to make a real distinction between byte sequences and encoded text, and there's a reason both [go](https://golang.org/) and [rust](https://www.rust-lang.org/en-US/) put their utf-8 string support front and center on their homepages. Is it just a matter of 'not understanding the language'? In a certain sense sure, but just because you understand there's something awful for historical reasons doesn't make it not awful now, and the effort to not repeat the historical mistake of conflating bytes and characters demonstrates that *it is awful*. It can easily lead to bad bugs, often even ones with security implications.
&gt; I'm guessing there's a website? ? Yes, there may be a website somewhere, it wouldn't surprise me. But I'm talking about the plugins dialog page inside phpstorm. It does indeed feel like just a web page rendered within the dialog and that's not convenient. It shouldn't discourage me from even looking for a plugin because it's too much of a hassle. As mentioned, I recently went through reinstalling an older version just to fix an issue - this is IMO the definition of "discourage" and I'm sure that's not their intention.
Hmm actually some say that PHP has duck typing, as shown in this stackoverflow article. I am curious at why you think PHP doesn’t, what makes the difference between PHP and Python/Ruby’s dynamic typing system. https://stackoverflow.com/a/5605531
No u
Not yet, but you just gave me the idea :) can you give more feedback on your requirement? Text from Word, flat text, posdibility to add styling, ... ?
You could submit to [YouTrack](https://youtrack.jetbrains.com/issues/WI), probably not a high priority fix for them but they may take the feedback on board.
I need a function that'll create a pdf from text returned from a php function. I'm creating set of 60 questions for a quiz league from a database. The php libraries I've tried are too big for my free hosting.
You should submit this feedback to them directly. I've had either full success with them, or at least gotten a plausible answer on why something can't be changed. 
after doing everything and watching a tutorial I type localhost and nothing just happens 
Lots of pseudo-intellectual talk up in this post.
Ha ha, real programmer spells 'refered' as it is spelled in HTTP :D
Jetbrains really listen to their customers. I agree. If you're not comfortable with this, tell them, and they just might fix this. 
This one is fpdf in the back-end. Works kind of easy imo. I'll check out tcpdf as well!
I also used fpdf, works pretty easy. Also a small library to include, just one file.
I would also recommend wkhtmltopdf. Been using it to generate reports for years.
Yeah, they'll definitely pay attention. I got a bug fixed in about a month from report to release. Pretty good timing if you ask me.
Can you search at least?
`PublicAssets` is part of an enum here, correct? So with this method, you still have to touch old code to add new categories of assets?
You don't, it's automated by DI: https://www.tomasvotruba.cz/blog/2018/06/14/collector-pattern-for-dummies/ Syntax might vary from framework to framework, but the basic principle is the same.
Still might get some traffic through your ports when working on a coffee shop network
mPdf is the best by far
People are downvoting you without realising this is actually a simple and elegant solution without layer upon layer of OOP.
Only 448 jobs in the world, eh?
well, PHP functions, their lack of namespace, argument order consistency and naming consistency all suck as well. Perhaps if all that shit was better designed we wouldn't need a fucking framework at first place. 
I think it’s more like the opposite that you don’t need interfaces if you have duck typing, though I still fail to understand why duck typing never takes off in PHP like in Python/Ruby, if PHP does support it as a dynamic language. Perhaps there are some things achievable with Python/Ruby’s duck typing that cannot be done in PHP. 
Pun intended 
In the grand scheme of things, such a trivial concern as to if a single function is camel or snake plays is of very little consequence compared to the business domain problems I get paid to solve. So no, it doesn't really bother me.
I still won't touch this with a ten foot pole.
Why would you do duck typing when there is instanceof which let’s you not only validate method and property existence, but also their types, parameters, return types through interfaces? It doesn’t sound logical to me. That’s probably why you don’t understand it, because it doesn’t make any sense to do it in PHP. There are some implementations that use method_exists, property_exists, isset and unset on plain objects etc., but they suck. The only thing you could compare to duck typing is the way we handle our associative option arrays to real classes.
Using snake_case is a business domain problem you solve? Or is it just the standard you are stuck to use because the creators of the project you work on did it? All SPL methods are named lower camelCase and modern projects use the SPL a lot. All PSR methods are named like that, too, so either you don’t follow PSR or you have withUri, getMethod, getItem etc all over next to your snake cases methods. Also, all composer libraries you use also bring in camelCase instead of snake_case. In my eyes it will just end up in an inconsistent mess regarding naming.
Tried it, it's too big for my free hosting.
When the author of a blog post can't correctly spell either the first or last name of the man who created the most popular PHP framework on earth, I stop reading.
No symfony... really?
Oh sorry, yes I made RemoteOK.io, I didn't make RemotePHP.io
Blogspam at its finest
It is, it wasn't meant to be offending, sorry if it was. It would just bug me personally, that's why I am asking why it doesn't bug you, as a single line alone named like that would already feel extremely inconsistent to me. I'm aware PHP itself isn't the epitome of consistency, but at least the SPL is somewhat consistent in naming and is pointing towards the future of PHP, and it decided on camelCase.
As I mentioned before, going back and changing the public API of that one set of classes is quite a small concern to me compared to everything else I have to get done - I'm an engineer and have to allocate my time appropriately, and adding hundreds if not thousands of changed files just for a *very* minimal style change in one set of classes doesn't meet my criteria. Is it a bit odd for it to be different, yes, but I don't lose any sleep over it, it's half a dozen functions out of about 10,000, give or take, all the rest of which are camel with the exception of some which use direct method-name mapping in __call to interact with external APIs. 
That's why I was asking, I was questioning whether you prefer snake_case or simply don't want to refactor a huge, existing code-base using it. I agree it makes no sense to refactor a huge code-base already using it. In the case of preference, it's always a good idea to go with standards. We all have preferences, that's why we need standards.
What do you do if you can’t be arsed to find an actual job?
I'm happy with camel for most things, occasionally I'll use both at once for readabilities sake, in particular when using things like PHP: public function test_DoThisThing_ExpectException { ... }
&gt; EDIT: Didn't notice the link in the second question mark :) Yeah, I didn't know if it was actually useful, which is why I made it a ?. Sorry, that was obviously too cute.
Yes, it's too big for my free hosting.
If you need to make this question is because you not ready to do the task at hand. So just go for shopify and be happy for what you get for the price you pay. &amp;#x200B; If thats still an expensive investment for you multi billion dollar business, then take a look at woocommerce or prestashop, both have big amount of resources available. &amp;#x200B;
Same thing you’re doing right now mate, just stay on reddit all day
How do you aggregate the jobs unless posted on your site?
None
Sounds like you need Shopify. It's designed for non developers, anyone can use it. They have plenty of tutorials.
Just pulling from API or xml feeds. I could get into web scraping but don't feel it's worth the effort yet.
woocommerce has the easiest install-to-sale workflow i guess
My company in Canada uses Indeed for job postings. I know it's pretty active and they have an API. https://www.indeed.com/publisher
It’s also probably a violation of the site’s TOS. There’s an interesting project called WrapAPI that does the scrapping for you and responds with JSON but I haven’t had the chance to try it on anything meaningful yet. 
Whichever one doesn't put social links over the text of the article.
&gt; Drupal is more mind boggling than WordPress, so on account of this Drupal has some propelled functionality. Wut?
What does automated mean here, though? It still has to be either convention or configuration when you include new classes, no? I'm working in legacy code with Yii 1, but I think a combination of strategy pattern and service locator (file fetcher strategy is read from config file) might work well!
Filters?
Assuming you need a widely-adopted CMS because you need to rely on a bigger team of people to fix bugs and patch security issues and add features because you're too busy doing more business-critical things to be worrying about that stuff, I would ask myself a few questions. If you need quick and easy, and you want to use an of-the-shelf theme, and don't see the website evolving much beyond the basics of posting pages and articles, and if non-technical people intend on doing the posting, then WP is probably a better choice. If you foresee the website evolving, and have many types of content with more complicated taxonomy and other data structures, and if you need to write your own theme, and if it will be managed by more technically savvy people, Drupal is probably a better choice. Caveat: WP does require more maintenance attention to keep it secure, because like Windows is typically more prone to security issues than Mac because Windows is more popular, the same is true for WP because it is more popular than Drupal. By popular I mean number of installations.
I was right...enjoy the salt
Same, only occasionally. In this case I wanted to communicate my wishlist to the devs but didn't want to go the "bug-reporting" route as I isn't clear what or how to report. I think it filters through to them if it's mentioned here. That's enough for me.
On the road map. Search / filters are very important for job seekers - I need to normalize the data first before I can implement good filters
Indeed and ZipRecruiter will have a good amount of volume. I plan to look into them soon. 
👆
Wow, looks like you were deep in it. I'm using it as a learning experience and side project. We will see if it turns into anything bigger.
I've just referred to the is this a pigeon meme. Enjoy the sour.
None. Both are crap. Drupal is excessive complex and drains a lot of computer power. Wordpress is a zero-day with blog functionality. Code quality of both is extremely poor. Using any of them is simply asking for trouble.
This will probably be the most elementary questions this thread has ever received, but i'm desperate for help and have wasted so many hours. I am building an ecommerce website. I've been tweaking the CSS and adding PHP into Code Snippets plugin to get the website to look the way I want to look. Here are the two things that for the life of me, I cannot figure out. &amp;#x200B; 1. I am using the latest version of WooCommerce along with Stripe. There are two payment icons (JCB, Diner's Club) that I would like removed. It's too many icons for mobile display. I tried using some simple CSS such as display:none to achieve this. It looks great on mobile, but not on desktop because there is a gap in space where the icons are hidden. I need PHP code that I can input and remove those icons. There are a couple of articles online, but they are reference older versions of Stripe/Woo so they don't work for me. Here is an example of the code I was trying: function rs\_removed\_icon( $icons ) { $icons = str\_replace( '&lt;img src="[https://trendypupstore.com/wp-content/plugins/woocommerce-gateway-stripe/assets/images/icons/credit-cards/jcb.svg](https://trendypupstore.com/wp-content/plugins/woocommerce-gateway-stripe/assets/images/icons/credit-cards/jcb.svg)" alt="JCB" width="32" style="margin-left: 0.3em" /&gt;', '', $icons ); $icons = str\_replace( '&lt;img src="[https://trendypupstore.com/wp-content/plugins/woocommerce-gateway-stripe/assets/images/icons/credit-cards/diners.svg](https://trendypupstore.com/wp-content/plugins/woocommerce-gateway-stripe/assets/images/icons/credit-cards/diners.svg)" alt="Diners" width="32" style="margin-left: 0.3em" /&gt;', '', $icons ); return $icons; } add\_filter( 'woocommerce\_gateway\_icon', 'rs\_removed\_icon'); &amp;#x200B; 2. I am trying to change my Add to Cart button on all of my variable products from gray to black. The apple pay button is solid black, and my button would look better if the colors matched. I have tried several CSS rules to achieve this, but all I've managed to achieve was having the button turn black after a size has been selected. Is there a PHP rule I can write to override it being gray before a size is selected? I might be able to just go into Woo and select a default size so one is automatically selected, but I haven't tried it yet. &amp;#x200B; Any help is greatly appreciated. Thank you in advance. I wouldn't have written this post if I hadn't tried hard to solve this prior.
Context clues would help, maybe a link? Actually saying pigeon, perhaps?
[Here's the link.](https://www.youtube.com/watch?v=dQw4w9WgXcQ)
Laravel 5 was released over 2 years ago and composers auto loading has been mitigating exactly what rasmus's argument is.
The problem is that there isn't really a better language out there. I mean, ruby needs to be on rails, and in javascript, 7.1 - 7 = 0.9999999999999964 and thus you need crap like typescript. Python? i dunno..
To me Slim and Codeigniter are the best frameworks out there though I use none.
All the errors you see are due to PHP starting up and not being able to find the extensions that it’s been told to load from your ini file. I would first open your PHP install directory and see what extensions are there and in what exact location. You should ensure the extension loading path is correct (go into the php.ini file and look for where the extensions folder is, seems to be currently set to c:\php\ext) If you’re missing a few, you should be able to download them from the php website, but it may also require some googling. For an immediate fix, go into the php.ini file and disable the lines that declare those extensions, then composer will install. The best test to ensure you have them all is to run php -v That is just to ask php to boot up and show it’s version. That should let you know if any extensions are missing
☝️ this guy knows 👍
Search for profile and if you're suspecting of this very only script, determine what's causing the bottleneck by examining times on some pieces. So you can tell where is the problem when executing in the new version... Otherwise you're just guessing
The choice of static versus non static methods are not about speed, they are about code organization. A static method is a 'class' method intented to be called upon the whole class, not a singular object. In some languages they use that to construct a library. But usually this is a construct we use to operate on the whole class, notably on static (class) variable. One notable use is for the Singleton design pattern when you ask the class to gives you the unique object instance like MyClass.getInstance(). But the rule is that you use static rarely, only when there is a good reason to put something shared by the whole class. Beginner often misuse static in some programming language because they feel it is easier to start with. That might be the reason your trainer teach you to avoid it. Well we don't avoid it at all cost, we use it rarely only with a good reason to do so. 
You said to disable the lines and proceed the setup It actually worked Thanks
No problems, you’ll have to address this again though if you want to use any functionality provided by those extensions :)
Random thought, maybe having Caddy built-in would make sense?
While autoloaders make use of the namespace, autoloading and namespaces are distinct separate features. A single file can (technically, not smart) have multiple namespaces, and the autoloader can just load any file it knows to find the given class name. Think of namespaces as a prefix to the class/interface/trait names, functions, and constants. That is all what namespaces are, just saving you a few keystrokes. When you use \`use\` statements, you are NOT importing them. You just make the PHP engine remember than when you mention a particular class/function name, you just mean to use the class with that full "prefixed" name. Autoloader has nothing to play here if the classes are already loaded. 
I wrote to mwholt a while back asking for advice regarding RR integration to Caddy as a component. I did not get any answer so our focus was moved to other direction.
Alright, I'll get his attention for you :P
Was it a forum post? Maybe it caught me at a really busy time to answer a pretty in-depth question. Sorry I just don't remember right now...
&gt;Some may argue that forcing a type-focused approach is a good thing, and will make programmers write better programs with fewer bugs. Along with this argument, static analysis tools may very well be able to detect runtime errors ahead of time. &gt; &gt;At least for me, this type of discussion has rarely been around concrete evidence that type-safety makes one’s code better, and more around hypothetical scenarios that make it hard to discern if type-safety makes code “better.” Type safety makes code better. I say this as someone who's added a lot of types to a lot of code, and seen the benefit that myself and other developers derive from having those constraints. Put another way, adding types forces you to understand all the possible states your program can be in.
Out of interest why did you decide to replace NGINX? Couldn't you have written this as a fastcgi client and replaced just PHP-FPM leaving all the webserver stuff to NGINX?
I have seen many times variables that change types and you have no idea what they represent. My only problem is that bad coders will keep ignoring type hinting. I believe its time to make php more strict when in comes to types.
http://www.phpinternalsbook.com
Add a type checker and make them suffer?
&gt; I mean, ruby needs to be on rails, and in javascript, 7.1 - 7 = 0.9999999999999964 and thus you need crap like typescript. Typescript isn't going to fix arbitrary precision numbers. That's a spec and these languages follow the spec. PHP isn't any better: php -r"echo 7.01-7;" 0.0099999999999998 Go, Java, Erlang, C#,... there is plenty of better languages with a better API and std lib than PHP's mess. And personally I'll take javascript over php any day. 
[php/php-src](https://github.com/php/php-src)
Why force upstreams to stick with fastcgi? It doesn’t add anything useful and makes integration with other software generally more annoying. *Everything* in the web stack speaks HTTP. You can still put this behind nginx without issue. You just configure it like you would for, uh, every web server backend that’s not FPM. 
https://github.com/paragonie/stern
Could someone please ELI5 what this is for?
I was thinking of creating something similar with `ocramius/proxy-manager`: like https://github.com/InterNations/type-jail, but with `declare(strict_types=1)` on every generated file (should be trivial to do).
Do you have a good resource that can help clarify the difference for others?
You can check the article below to find out what is strong/weak typing. A dynamically typed language can be strongly typed such as Python/Ruby, while a statically typed language can be weakly typed such as C. The problem with PHP isnt dynamic typing, but weak typing. There have been attempts to resolve the issues caused by PHP's weak typing, PHP 7's declare(strict_types=1) is a good starting point, though fixing it completely will be a significant BC break that PHP internals aint willing to make at this moment. http://wiki.c2.com/?WeakAndStrongTyping
Can't agree. Using a class for every strategy is necessary where each strategy must be in it's own file _and_ should be able to be expanded by third-party libs.
I'm not sure I understand how this helps. Why does that do anything at all?
Forces everyone to use strict types with your API whether they like it or not.
I still don't understand. How would they not be using strict types without the function proxy?
This is huge, Great job ! IDE's will also finally have autocomplete without annotating every single property....
Static typing means that a variable can holds ints, OR it can hold strings, but you can't change your mind halfway through. A lot of type errors can be detected at compile time, since passing a string to something that is expecting an integer is clearly wrong, and you can tell that's going to happen without executing the code by looking at the types. (On the other hand, you may need to jump through more hoops when dealing with code that has unknown types. Something as simple as parsing some JSON can be surprisingly painful in a very static type system.) Dynamic typing means that a variable can hold whatever you like. The same things that would be errors with static typing are still errors, but you'll hit them at run time, rather than compile time. That's *generally* worse (but as above, may be slightly easier.) Strong typing means that types are very distinct, and can't be implicitly converted. You're trying to treat the string "500" as an integer? Nope, that's a string, not an integer; if you want to cast it you need to explicitly do that. You can have static or dynamic types and still have strong types. Weak typing means the language will just do its best to try and figure out what you meant. You're trying to treat the string "500 A.D." as an integer? You must have meant the integer 500. But the string "A.D. 500" must be the integer 0, because reasons. :) Type systems can be static OR dynamic, as well as strong OR weak, and PHP has historically been dynamic and very weak (much like JS), but any combination is possible and widely used among one or more popular languages. More recently PHP has allowed some very limited opt-in to stronger types via the `strict_types` flag, but has remained highly dynamic. This proposal allows, optionally, slightly more static types. So trying to draw a distinction between "dynamic typed" and "strongly typed" code is a bit odd. It's like asking what's faster, a red car or a Toyota. Nothing stops you from having a red Toyota (or a green Mazda)!
I write php code for a living and only used third party packages for things like exporting a PDF or XLS file. Never had it do fuzzy math like that when operating on variables it considers numbers. PHP was built very well for being a server side language. You can write raw PHP code without a framework or perhaps a very minimal framework and do very well with it. I can't say that about Go, Java, Erlang, C#.. In fact, my lil' framework is mostly database and filtering functions.. php has a built in function for a hell of a lot of web related things. It's biggest competitor, Javascript, is lacking a lot of things for server side. Which is not a surprise at all.
Static typing has saved my ass on more than a few occasions by showing bugs which might have caused problems that would have been extremely difficult to detect. I couldn't go back to using PHP without it. I now add type hints to everything, and use docblock hints to type hint arrays for that extra degree of static analysis. 
If you as a user call function of other class, and you don't have strict enabled in your file PHP won't check types, with proxy function is called from inside of that class so it doesn't matter if your file is strict or not. Makes sense?
Oh, that's weird. I never messed around with strict enabled, that makes sense. I assumed that any call to that function would be type checked. Weird that it's not implemented that way. Thanks
Finally! 
Looks like we are going back to FastCGI style servers :) 
Yes, but be aware that running this stuff means that you are going to get the usual problems and advantages of long running processes: libraries that widely (ab)use statics (*cough cough*) are not going to work here.
Some random person doesn't like my language... [**https://giphy.com/gifs/94EQmVHkveNck**](https://giphy.com/gifs/94EQmVHkveNck)
If we get generics at some point, I really hope they make the types nestable as such: Storage&lt; array &lt; string, array &lt; int, SomeWeirdClass &gt; &gt; &gt; That'd be the greatest thing ever.
If it's a sane, normal generic system, this comes by default. Generic types always take something that is a "type" for the system and create something, that is a "type", too. So generics should be recursive by default, you really would have to fuck this up on purpose. 
General Kenobi! 
Good, Anakin! Good! I think more and more people will begin to like PHP.
Attach xdebug, enable profiling and perform the operation you're looking for. Load up the resulting cachegrind file in a cachegrind compatible viewer for your platform, and you'll be able to see exactly what's being called from where and how often.
I'll quote myself: &amp;#x200B; This is Golang application which do all the heavy work to parse user HTTP request into PSR-7 form ([https://www.php-fig.org/psr/psr-7/](https://www.php-fig.org/psr/psr-7/)) which is community standard for HTTP messages in PHP frameworks. Then it passes serialized PSR-7 request over long pooling socket to your PHP application (which is managed as worker pool). This allows you to run same script for multiple requests to gain a lot of free performance, write lambda function or do other stuff.
post the code on github and we'll help you out!
As others have said, xdebug or somesuch. What I did recently, was to create a log table in my database, and then I sprinkled commands throughout the code which would write suitable messages to the log file at opportune times. Eg "entering function xyz" or "leaving function xyz with a return value of 7". My code is a web crawler that runs entirely in the background with no visible output, so it was the easiest way. 
Hey all Laravel Project, sole contributer, 1 year in. I'm not facing any problems at the moment Read: I'm facing lots of problems that I've accepted I'm putting off until launch
While this sounds right and solid in theory, my practical experience in last 12 years says the opposite. 99% of time when something has been hacked/injected for my clients or when I got asked to clean something up, the issue comes from some open source cms/framework/library/tool with known vulnerabilities, not custom built, "obscure" code.
I've been using xdebug with IDE integration for 6 years and never knew about cachegrind viewers. I feel like the world's biggest noob right now.
I agree. This would also bring nesting to regular type hinting. private T $data; Given `T` is `array&lt; string, array&lt; int, string &gt; &gt;`, we should be able to do: public function foo(): array&lt; string, array&lt; int, string &gt; &gt; {} And _now_ we need typedefs. We're kind of making C++ for the web here though, but I think it'd be fantastic. I imagine PHP would probably not use `typedef` but something like `alias`, just to not be C++. This would be ideal, when we get nested typing: alias WeirdClassArray as array&lt; string, array&lt; int, WeirdClass &gt; &gt;; public function foo(): WeirdClassArray {} class Storage&lt;T&gt; {} $s = new Storage&lt;WeirdClassArray&gt;; Otherwise, having to remember the entire type specification for something could be problematic.
That's not as easy as you might think. You have to keep in mind autoloading. I agree aliases would reduce some weight on using long generic types, but it would also make autoloading harder or you'd have to have a single alias in a single file all the time. For starters, just generics would already be awesome. And then we'll see where PHP evolves to, what tools will exist at that point etc. (like, composer integrated into PHP, maybe?) and then maybe aliases will be easier to realize. I'd love to see them, too.
Hey all, So I am playing around with php and learning it for fun and started using Slim and twig. I noticed in the docs when creating the `SlimContainer` object.Iit is created as follows: \`$container = new \\Slim\\Container;\` What threw me of was the backlashes? Is this a php or slim thing? Wondering if anyone can point me to a good resource to explain this or can give me a brief run down. Happy coding all!
it's PHP namespace notation.
I am stuck supporting a legacy PHP 5.4 app using the old mysql library. I want to start adding integration and unit test to the project because it is brittle, and changing anything leads to lots of little bugs, and failed queries/application state. I have been slowly converting the php app to a class based, json api, one endpoint at a time, and using vuejs on the frontend because it is incrementally adoptable. All the testing frameworks I have looked at seem to be built around the various mvc frameworks. Any suggestions on testing that would let me test DB state and make requests. I would love to move this to PDO as well, but there is just an insurmountable amount of queries to rewrite(I can't even enable mysql strict). I am in sort of a pickle because a lot of the new tech doesn't support php 5.4 and I can't just flat upgrade without dropping the old mysql implementations. It feels like I'd have to rewrite the whole app to move forward. Any suggestions, libraries or tips would be really appreciated.
Ahhk right. Thanks!
FWIW you can also "profile" your web app via XDebug which might also help. The cachegrind file can be read by PHPStorm which is super duper awesome.
Don't think F5-based development is going anywhere, Slack uses PHP for example: https://slack.engineering/taking-php-seriously-cf7a60065329
You're right - the RFC actually only talks about nesting of generics, not nesting of types. Thus, this would be possible: $foo = new Collection&lt; Entity&lt; string, Entity&lt; int, string &gt; &gt; &gt; But this wouldn't be possible: $foo = new Collection&lt; array&lt; string, array&lt; int, string &gt; &gt; &gt; As `array` is not a class. I'm sure a kind of type alias (type def) wouldn't work well in PHP as C/C++ usually has them in their header-files and such a concept doesn't exist in PHP, outside of simply `include`'ing a PHP files with aliases, but then we're back to using includes which we've done away with using autoloaders.
I think all these trend things are just creating unnecessary drama and cock measuring contest. I am a strong believer that you have to use the best tool for the job. As a language PHP is moving faster than ever, we jumped through so many versions in the last years with so many improvements so I'm pretty sure it's gonna stay here for a while, given a very large community around it (same as other languages aswell). I think people stopped bragging about something built in one or another language because they started combining them. In the last 4-5 years I used 3-4 different languages in the same company (mid-sized). Some services are in PHP, some in NodeJS, some in C# or Python. They all do their job well and it's hard to pinpoint one of them. - Nothing is killing any language, the popularity depends on people preferring one side or the other, trends shift as people start/stop using it, sometimes developers shift from one language to another. - For the web I think combination of PHP/NodeJS works very well. NodeJS sometimes has npm hell, PHP sometimes has very low quality code, both are hard to work with. For both world I guess quality of produced code is a big issue since there are so many ways to do the same thing and a lot of corner-cutting. I would wish more push towards increasing quality for the language.
I have personally fully switched to using C\# and ASP.Net MVC Core for any web application. It is now truly cross platform. I am not saying that means PHP is dead, but I think Microsoft has actually made the most viable alternative to PHP that isn't just a tad.
Let's be honest, you want a beautiful frontend. Forget all the php templating stuff that is outdated. You want your angular/react/vue app. You need an API for this. Yes you can use PHP to power the API. But come on, you're using ES6/TS on the frontend, why not use the same for the backend ? PHP had its time. Let's build modern stuff.
- PHP is easy to start with, hard to maintain. So no, established businesses with a clearly defined business domain and USPs are better off with Java. A lot of smaller companies, new businesses, non-IT companies use PHP quite a lot though. - For me it's the baggage that is most damaging. When we hire new people it takes quite some time to teach them which PHP features to use, and which better not to touch. It's very similar to C++ in this regard: good PHP code is nice, but it takes substantial amount of time to learn what's good PHP code. - I think most of other languages don't want to be seen as alternative to PHP. So although mimicking Java features used to work before, PHP should concentrate on staying PHP-like, i.e. mostly same language but more predictable and more consistent.
Can I ask why you switched to ASP.Net, and what benefits it has over PHP. I'm a PHP guy working in an agency, and we've had a number of clients come to us with ASP.Net based sites that we've helped them convert over to PHP. Most of them were running Sitecore and all had terrible things to say about their experiences on the platform, and the cost of hosting the platform seemed ridiculously expensive. So is there a real reason I should learn the Microsoft ecosystem and am I doing our clients a disservice by switching them away from it? It's not entirely up to me, but I do have a large say in the decision making process.
Hi, thank for the feedback. &amp;#x200B; I was thinking about removing the loader. &amp;#x200B; There is no affiliation with PHP London, I manually added interesting contents from different global conferences (PHP london/Symfony live/etc.). The end goal is to have more content from our community (not only conferences video/slides)
I use PHP for ERP development with Vue and Laravel :) I see no problem at all .
I'm not sure language improvements work the same way as business market share, but that's my opinion.
So *you* don't have any. You just want other people to create/share a content for your site. Any reason they should share a link to a youtube video there instead of posting it on Reddit? there is already a community, mind you. what you have to offer, other than a fancy loading icon and a few links to youtube videos? I genuinely don't understand the idea. 
I also like browsing reddit to find interesting PHP content. I also spend quite some time browsing git projects that gather this kind of content. I just feel like there is no platform that focus specifically on developer feedbacks and that was enjoyable to browse (in term of UX and design). This is just a first draft of my idea of a platform to gather all this in one place.
&gt; there is no platform that focus specifically on developer feedbacks What's wrong with Reddit in this regard?
No. Although it is hard to survive the Nodejs trend as a PHP developer, because everyone thinks that nodejs somehow will transform their shitty start up in to a multi billion dollar enterprise, php is not going anywhere. The biggest issue in my opinion is that PHP really likes freedom of choice. This might sound good however it promotes bad habits. I'd like to see a gradual transformation from Dynamic/Weak to Static/Strong. 
&gt; Thanks for your application &gt; You are in the waiting list &gt; 124 &gt; people ahead of you &gt; Our own army of nightowls ninja is working really hard to make the best features of the platform available to you as soon as possible. You will be contacted as soon as we have something cool for you. WTF is that? You call it "focus on developer feedbacks"? Seriously?
ASP.Net Core is the new version of ASP.Net and is supposedly very good. Can't say I've used it myself, just read good things about it online. I think one of the obvious benefits is that it uses C# which I'm sure most would agree is a much nicer language than PHP is.
Nowhere to go, if you're already [used for 80% of all websites on the server side](https://w3techs.com/technologies/overview/programming_language/all).
Sorry if this is a dumb question, but did you rewrite the php parser? Or just wrap it with go that listens/longpoll on a socket like FPM? It’s meant to replace nginx/Apache?
&gt;Sorry if this is a dumb question, but did you rewrite the php parser? No. &gt; Or just wrap it with go that listens/longpoll on a socket like FPM? Correct. &gt; It’s meant to replace nginx/Apache? For HTTP yes. Besides that, we use same protocol for Amazon Lambda function and async Job scheduling.
So if we use nginx with php-fpm now, for web application, we could instead use only yours? It doesn’t serve images or css, right?
Depends on the application, WordPress won't work on RR but Symfony will. It can serve static resources, even more, latest patch allows you to use HTTP/2 Push to pre-load resources to the browser directly from your application.
So it’s not for shitty php apps, only good ones. Got it ;-)
* PHP is mature programming language. * It has vast community * 80% of internet uses PHP * It was made from ground-up just for the Web, unlike Java and other languages who came up later with working on the Web. * Launching PHP on the Web is the most simple thing ever and its cheap. * Its very fast. * It does it job. * Just remember how many blogs/private websites/websites of companies work with PHP CMS system like WordPress. PHP haters are people who really dont have any real argument against PHP or they are simply jealous. Every language has its pros and cons. If we could look at languages like tools, for example PHP can be hammer, its good to hit a nail, but to screw, to screw something you need to use screwdriver not hammer, its very hard to do it with the hammer. Choose language depending on what you will work, if you want to make a game dont make it with PHP, use C# for example, but for the Web, PHP is a nice option. Hope that helps!
&gt; 80% of internet uses PHP. 80% of sites use PHP to some extent (and that is if you take the highest estimate), 80% of the internet and 80% of sites are two very different things. 
Sorry for the frustration Rome wasn’t built in a day :) For now, I call or chat with all people that subscribe to know more about how they understand my website, the goal and how it can help them (it helps me to build my roadmap). If I post on reddit, it's also to have feedback like yours and thanks for that.
And? How does that change anything I wrote?
Performance and Java in the same sentence -- does not compute.
while (true) { Thanks to all ! } Those were really quick answers. I knew I asked my questions cutting round corners, and with a few assumptions that needed checking, and some very arguable vocabulary. But I'm glad to see that once again, people are taking the questions seriously, answering earnestly and exhaustively, and not focusing unduly on vocabulary but still correcting those off-the-mark assumptions. :-) So far, the consensus seems to be that : 1. Yes, there are lots of big projects, they just may not be very openly advertised, for several reasons. 2. It's hard to draw a comparison between PHP and anything else, so it's also hard to say that something is directly competing with something else. Different languages and framework just have different use cases. This questions is probably too vague to answer fully, but short answer is, PHP does certain things even better than Node, and PHP is still very relevant. 3. u/TorbenKoehn brought up that there is R&amp;D into making PHP asynchronous, which is hugely interesting, I'll keep an eye out for that. Otherwise it's what we see elsewhere : PHP needs strict typing, generics, some function standardization, etc. Overall : glad to have another confirmation that PHP isn't going anywhere, and it's really not only due to it powering Wordpress. I've always liked the community and every time I hear about it, it seems as vibrant as ever. Thanks again to all who took the time to answer. Cheers ! :-)
If you choose PHP today you are hurting your career and business. It is just as simple as that.
I'd rather see `string[]`, `Entity[]` instead of `array&lt;Entity&gt;`, I think that works better for the way generics will be implemented in PHP, as arrays will stay an own type and it will probably not become generic in the form classes do. On the other hand, SPL arrays will probably get generic equivalents, so you could do `ArrayObject&lt;string&gt;`, as an example.
working in porn right? :)
Sad people have to waste their time reading this kind of b\*shit unfounded answer. Anyway...
It is not a frustration. I just thought the "feedback" you are looking for is the literal feedback, i.e. comments left by the readersm and there doesn't seem to be a way to leave one. So I still don't get the idea of the site beside a random choice of youtube videos whidh you can get by sinply typing php conference in yourtube search.
Prove me wrong.
I work for a very large studio with mid sided to very large client company size. Every single thing we build is API based, so we use Ember/Angular/React for web, native apps on each platform, and then a purely API backend. We build the majority of our APIs in Laravel or Lumen. When high performance is needed we use C# or Java. PHP is fairly fast in terms of performance, but it's insanely fast in terms of dev time. We have tried every backend tech there is and nothing can beat Laravel for getting a high quality API out the door FAST. And if we need anything with higher performance for our huge Enterprise clients we use a real language like C# or Java anyways. Beyond that, I live/work in one of the biggest tech cities in the world and probably 60% of the recruiters that hit me up (several dozen per month) have PHP needs. It's still very much in demand. TL;DR: PHP is great for what it is good at and is still very much in use everywhere. If you need higher performance you're better off with a real language like C# anyways.
The burden of proof is on you. 
I forgot to add text, i was in hurry. I know a difference between internet and websites, so no, i didnt miss a point. I said that PHP runs on 80% of the web, because some websites, some researches will tell its 80% of sites, some will say 80% of web, and I choose to say web. But if you look at that research, you will see that it runs on 79-80% of websites. Objectively, PHP is fast. If you look at experienced programmers talking about PHP and videos about PHP performance, for example PHP meetings with Rasmus Lerdof in Vienna or wherever, you will just see how PHP is faster then before and how little memory it takes to do something. Hint - I knew that before you told me.
&gt;Many people choose JavaScript for their career and business and JavaScript is a lot worse than PHP. lol
Simply because Node.js can't pack the same punch as PHP can, especially on very business-critical and frequently requested endpoints. Deployment is a bigger hassle. And most importantly, you still transpile your code. In the end, at least with TypeScript. You don't need that in PHP. PHP has strict typing inbuilt and at runtime, is stateless by nature, what most, if not *all*, APIs should be. Node.js isn't, every time you change something, you need to restart your whole application, if something fails, it can break your whole application at once.
1) lots of government Latin American systems were developed using php, and though legacy don’t see the maintenance of it going away. 2) websockets and chat real real-time apps, way easier using express 3) making websockets easier to deal with in php along with multi threading, though I understand why php didn’t come out of the box with multi threading, I think moving forward giving that sort of functionality will make it more use.
I have a full time PHP job that pays me $110k/year plus benefits, and I freelance with PHP/Laravel for an additional $100k/year. It's just as simple as that. 
I'd never use AliceBundle in tests as it adds more time your tests compared to DoctrineFixturesBundle.
&gt; In ~some~ all parts it even easier than WP. FTFY Checked out Laravel Nova yet?
Congrats. You learn less than me working 2 jobs.
Then maybe you should learn to write things properly, 80% of websites (let's just ignore that other sites have it at a lot less than that) is very different from 80% of the web, most of the web is not run on PHP, because most of the traffic and usage of the web is accounted for by a small minority of sites, of which PHP does not account for anywhere near 80% because there are better choices for scale and large teams. &gt; Objectively, PHP is fast. If you look at experienced programmers talking about PHP and videos about PHP performance, for example PHP meetings with Rasmus Lerdof in Vienna or wherever, you will just see how PHP is faster then before and how little memory it takes to do something. LOL, PHP 7 being faster than say PHP 5 does not make a fast programming language, I hate to break it to you, but PHP is not fast in the grand scheme of things, it isn't bad for a scripting language, but that is all, it does not compare to things like Rust, Go, Java, etc. 
Not going anywhere. Plenty of new projects happening and plenty of jobs going for developers in the North of England
I honestly think that the success of wordpress has more to do with the fact there is a massive number of 3rd party plugins and just about every web host provides a 1click wordpress install. Combine that with the fact that if you are also: \- clever entrepenuer \- non-developer \- can install wordpress plugins and themes you can turn almost any retail or publishing related business idea into a profitable business literally overnight. A profitable business that runs on shit code, but one you didn't shell out $10k in fee's to developers for either.
&gt; Performance and Java in the same sentence -- does not compute Because you have no formal computing education and lack experience, if you had a clue what you were talking about it would compute fine. &gt; You can also magnify the speed of PHP much further by using: a compiler, memcache, opcache &amp; PHP-FPM Ironically enough PHP-FPM is one of the slower ways to run PHP because it doesn't solve PHP's big performance issue on the web which is having to bootstrap every request, which is basically the reason a framework like Django outperforms Laravel either though PHP is a overall a bit faster than the standard implementation of Python. https://www.techempower.com/benchmarks/#section=data-r16&amp;hw=ph&amp;test=fortune&amp;l=hr9y4f&amp;f=zik0zb-zik073-zik0zj-zik0zj-zik0zj-zik0zj-zik0zj-4zsov
PHP stays for PornHub Programming, doesn't it?
I switched mainly because that is what they are using at my job. I enjoy C# more than PHP. I lose out on some of the more dynamic aspects of PHP, but overall I feel I can code easier in C# than PHP. I am not familiar with Sitecore, but I can say that the ASP.Net Core MVC framework is very well designed. Almost everything is setup with dependency injection from the start. The Razor template language is very powerful. Multiple ways to layout the pages is supported out of the box. The [documentation](https://docs.microsoft.com/en-us/aspnet/core/mvc/overview?view=aspnetcore-2.1) is really good. All of this is made even better with Visual Studio which is one of the best IDEs available in my opinion.
I would be careful with saying slack uses PHP, because they use Hack and they just announced that they will not keep PHP compatibility in the future and develop Hack to be an independent language.
Probably (I've not benchmarked), but it also comes with more features. As often it's a tradeoff. That's being said, the new trait should be easy to adapt to work with DoctrineFixturesBundle directly (it's planned!)
You can get SQL Server on a Linux box now with 2 GB of RAM and should be able to host most smaller traffic sites on there. That is $10 a month on a Linode and allows scaling up as more memory is required.
You work for MindGeek/Manwin? ;-)
I'm confused... How will this get more people to like PHP? It's added complexity. Sure, it forces people to write better code, but isn't one of the biggest appeals that PHP is simpler to learn/write than other languages? Why do people seem to want PHP to become identical to other languages?
I no longer am a fan of heavier ORMs like Entity Framework. I like SQL and know how to write good SQL queries. So I have switched over to [Insight.Database](https://github.com/jonwagner/Insight.Database) which I think might be the most beautiful DBAL ;-)
Your education is bursting at the seams, resorting to personal attacks, you must be fun to work with. And for your information I do not lack a formal degree in computer science. So you are saying that Java outperforms languages like C, C++ and the other plethora of compiled languages? Which college did YOU study in? Hating on PHP is easy but Laravel is not the framework to choose to compare the speed of PHP. I could choose a slow python framework, compare it with Laravel and declare python to be slow. &gt; Ironically enough PHP-FPM is one of the slower ways to run PHP Your ignorance is showing. Then again, you haven't addressed the remaining points possibly because you are ignorant of their existence?
You are a jackass. 
I'm a mid-high level php developer ( 9 years of experience ) and have also done very complicated things in javascript for frontends. My most recent JS project is a drag and drop visual school lessons editor. My biggest PHP project is writing an entire learning management system. PHP and JS were both conceived at the beginning of the internet, and the idiosyncrasies and design flaws are apparent in both. Both of them have plenty of legacy cruft to support, and so neither can easily be reformed into something more modern. The approach so far has been to tack on more things as time goes on. I find javascript's idiosyncrasies less tolerable though because of how the built in functions are all over the place in terms of how they need to be written. PHP is more consistent because it was loosely built around C, but javascript is kind of a bastard child of java and ???. Also, javascript was designed around interacting with a DOM, not HTML itself. Node.js is kind of a hack to make a client side language into a server side language. If i had my choice, i'd go with a newer purpose built language for server side. But for now, i prefer PHP for that.
[removed]
It's the first programming language of a TON of people, myself included. It didn't use to be so confusing. It used to be super basic, and then we started adding a bunch of shit to it, which is fine, because it is all optional. If this update becomes mandatory, it's going to hurt the language. Yes, it's nice to have bug free scripts, but it takes away from the autonomy of the developer; we might as well have an AI writing our code for us at this point.
&gt;So you are saying that Java outperforms languages like C, C++ and the other plethora of compiled languages? No, I just find it idiotic to make a crack about Java's performance in the same sentence as claiming PHP is fast, how do you think PHP does not even compare to Java let alone the "plethora of compiled languages", yet apparently it is "fast". (or even "very fast" is we go back to the person I originally replied to). This is why I ask about education and experience, no one with those things is under the delusion that PHP is a fast language in the grand scheme of things. &gt;Hating on PHP is easy but Laravel is not the framework to choose to compare the speed of PHP. I could choose a slow python framework, compare it with Laravel and declare python to be slow. Django isn't a fast Python framework (go see Bottle, Falcon, etc), I picked it because it is basically the equivalent to Laravel, as in a heavy "batteries included" framework that happens to also be the most commonly used like Laravel is in PHP. &gt; Your ignorance is showing. No just yours, see - https://github.com/php-pm/php-pm for example. &gt; Then again, you haven't addressed the remaining points possibly because you are ignorant of their existence? What points? Opcahce, memcache, etc are irrelevant, because they don't make PHP very fast, they just make what is a relatively slow language, faster, they don't turn into Golang, Rust, etc. 
C# was my first.
PHP &amp; PORN is a match made in heaven
Well, I started the www.starfish.com project in PHP + PostgreSQL in mid-2016... Runs PHP 7.2 and everything...
Well obviously if you are privileged to have access to that level of career options then php is probably a waste of time. But how many of you are there and where are the locations where most of you exist and were born? Maybe a quarter of a million, probably major tech hub cities and in the richer parts of first world countries? The options are different for the rest of the planet. I'd bet there are people in my home town making more than you (not developers) but still have to do it through 2 or 3 jobs, one of them still being a regular 9 to 5. 
&gt;Objectively it isn't, which is why if something really needs performance then Golang, Elixir, Rust, Java, etc are used, however it is fast enough for most sites needs. But, but, but- you can't compare interpreted languages to compiled langauges! PHP 7 is better than PHP 5! PHP doesn't **need** concurrency! /s
Somebody posted a similar site here a few days ago; the thread might be interesting: [https://www.reddit.com/r/PHP/comments/9jtte2/i\_made\_a\_site\_for\_aggregating\_php\_jobs\_from/](https://www.reddit.com/r/PHP/comments/9jtte2/i_made_a_site_for_aggregating_php_jobs_from/) &amp;#x200B; Anyways, it looks really big on my 23" 1080p screen. Not really into it. The 99 days thing seems weird too.
the elephant in the room with node.js is that it's popularity is faddish and everyone knows it's not due to the technical excellence of the software or its ecosystem (both are deeply flawed, like most of everything in software development is). better for your career and your sanity to ignore fads and fashion trends and focus on fundamentals. PHP is fine. There are lots of other languages you could use too but PHP gets the job done. It has its warts and it was a much worse language in the past but as of today PHP7 is as good a choice for a server-side language as anything else. my advice to you is to not think of your skill as a developer in terms of specific technologies. there is no language, no framework, and no platform that will make you a good developer with a durable long-term upward trending career. that comes from learning your fundamentals, being versatile and adaptable (you WILL have to learn new technology throughout your career), and not losing sight of the forest for the trees. you want to focus on design patterns, application architecture, and learning the details about how the web works on a technical level. Learning Wordpress, React, and Vue will get you some short term contract work. Learning data model design, MVC pattern, the details of client/server architecture, the details of networking (HTTP, TCP/IP, etc.), and how to implement robust (i.e. well tested) and secure systems will make you into a solid developer with a great career. 
Well, for everything traditional PHP is here to stay, but... show me a PHP websockets server as easy to use as the ones in Node.js
&gt; In ~~some~~ **all** parts it even easier than WP. LOL &amp;#x200B; No, I use October CMS if I need admin area.
Yeah, but how often are you writing hello world type apps? For bigger apps, Java and its type system catches so many bugs PHP wouldn't. Compare real world apps, not hello world apps.
Are your interested in how a computer language works or just php?
Not really a "simple" answer to this. I suggest reading "Modernizing Legacy Applications in PHP" by Paul Jones. In the book you will find do's and don't's for each step of the way in refactoring your application.
similar situation with our company. we serve tens or hundreds of millions of requests per day on PHP stacks. we have one on java. the java team, when deciding on a platform for an offshoot app, chose PHP. not saying anything bad about java, i quite like the language. but PHP is a robust, fast language, and it gets faster every version but yeah, you won't see "WE &lt;3 NODE.JS" for php at our place. quiet majority and all that
I am a fan of learning other languages, even if it's just a minimal understanding of it. Sometimes design patterns and workflows make sense when you look at them through the lens of another language. That was me and OOP years and years ago. I couldn't get my head around it, started learning Rails and all of a sudden OOP in PHP make a ton of sense. PHP is also not always the best fit for everything, so having another tool on your belt you can reach for is handy. The bigger question is, will it hurt you to learn Go and the answer is no. I suggest taking the time. 
Nope, Go is too much Hype and unlike Node.JS, it will never deliver. You can look up all available programming language popularity ranking/index, and Go is not top 10 languages. The hype has already begun to die down, and soon developers will be back to reality. You use the right tool for your job, Go provides very little that you cant do in other languages. 
Not a Go fan. You just trash talk too much. 
I’ve been coding in PHP now for over 10 years and I kept asking myself this same question. I finally dove in and I absolutely love it. I’d encourage anyone else to do the same. But I’d also advise against using other people’s packages/libraries/frameworks for a while. All too often I see devs learn a framework and they don’t understand the underlying language that backs it. Go right out of the box is awesome and has all the tools you need to get started. It’s not Object Oriented, but you can mimic OOP style programming. Use the Go Playground on GoLang.org and walk through the tutorials and see how you like it. Also, check out some benchmark tests for Go vs anything else. It’s speed is nearly untouchable. 
You probably ain’t around when people on this subreddit constantly had to put up with craps like ‘goodbye PHP, hello Go’, ‘why you should learn Go as a PHP programmer’, and ‘PHP is dying, time to switch to Go’ from these fanboys. You don’t see Java and C# devs doing this at such a frenzied manner, heck even JS proponents ain’t as obsessed with spamming their favorite programming language everywhere they get a chance. I am glad the Go hype is finally dying down, the fanboys remind me of Mormons. 
Most of the time I'm just lurking around. 