The no framework requirment is stupid, because most good candidates would be using a framework as it helps standardise us. Beyond that, we're all going to come up with our own interesting ways to solve problems that others won't immediately get. When you're in a new job 99% of what you do is try to fit your code into theirs. You might think you have a better structure, but we all know having 7-8 different coding styles within a project is a bit nuts and most of us are asked to fall in line, so it makes more sense to make your test reflect real life rather than having a big gaping "how do they want me to do this" question. Rather than asking your candidates to come up with code then judge them based on their structure, why don't you publish some code yourself, and let them work from that? Ask them to make a change and see how they tackle that. You're much more likely to get interesting results and you'll be able to have less time consuming questions. 
Yeah, you are a dud.
It may or may not be relevant, but is there a time limit for the task? If so, what is the time limit? Do you allow candidates to consult other resources (namely StackOverflow and/or their blog/forum/etc of choice)?
I would just say ajax in the future. XHR sounds like you require that it speak in XML, which is annoying to use and is an old format. That, and I haven't used the XMLHttpRequest function since college so I completely forgot what it did. And it's really not important that I remember it as I wouldn't use it again outside of doing this test. Also, I could have done this test right out of college, it's definitely too simple for mid/senior level. I might see this test and think the company barely knows what they're doing if they're asking something so simple. Or that I'm over qualified. Also, if the person has no published code, ask for something they've already written. It's probably better than forcing them to dedicate time when they are already busy job hunting.
&gt; All authors and their total book and genre counts. Do not use COUNT(DISTINCT ...). &gt; &gt; * Did they pull off the third query without resorting to doing a loop in PHP? (Never) I don't really understand the point of this question. The obvious answer is something like `SELECT author_name, COUNT(book_id) AS book_count, COUNT(DISTINCT genre_id) AS genre_count FROM authors LEFT JOIN books ON books.author = author_id LEFT JOIN genres ON genres.genre_id = books.book_id`. Why would you force me into not using `DISTINCT`?
&gt;In this test, OO is a trap. The task is so dead simple that invoking any sort of object is going to be a hugely un-needed level of complexity. And yet you check to see if they wrote *unit tests* for a *pre-interview* coding test?
This site piqued my interest of Revel, the Go framework. I've not done any Go but it seems the language is picking up some steam. Revel looked like a pretty cool framework too.
*everyone* thinks their interview/hiring practice is awesome, and can give seemingly "good" reasons for it.
Honestly, I think they're just primadonna's. Instead of worrying about why your test is bad, start worrying about why your lead generation is finding so many people who aren't willing to write code for an interview. 
1) ok 2) fine 3) Screw you If you want me to program for you, hire me for a short term so that I am not wasting my time. Why don't you ask if they have code samples for you to check out? A lot of time when hiring developers, I'm not as concerned about how deeply they understand the language but understand the reasons for making decisions. I also want guys with personalities that can talk to the group, and hopefully also become part of the group. Nothing makes a team tighter, and personally more effective, than being able to socialize together in some way. All too often I've found the solution to some of my biggest challenges during a few drinks with coworkers. Anyway, their coding methodology will need to be reigned in by your company's best practices anyway. So unless you are hiring some SR developer, who should have a few code samples laying around, this exercise is just wasting people's time.
If I was going for that job, I feel that if I made that response(about the test being too much), it would make me come off as arrogant, instantly bombing my chance for the job. I'm betting other people are getting that feeling too and it's probably the reason they're not saying it.
Yeah, seriously. I got bored just reading the assignment. Oh and I can't use libraries except the dude's favorites? Does that include pdo? Phpunit? Yeah, no, I don't want to work for you.
I would disagree. Our company is somewhat in the same situation. Our technical interview consists of a slightly more complicated test: we provide a simple sample code and ask you to attach an SplObserver to it. It's pretty basic stuff, really. You get your Google, you get your php manual and you get your php manual comments where everything is laid out if you're up for a little read. This is what we ask of you. We ask that when you are required to perform a task you might be unfamiliar with - you find the information, you read it, understand the subject and complete (or at least partially, because we'll still see if your though process was adequate) We're looking for **quality** developers. We offer fantastic opportunities to learn and grow. We offer a *very* competitive salary. You'll definitely like it if you're willing to take the time. Basically, if you're not that kind of person - then **we simply don't need you** and you can go and do shit work any other company you like. We value quality. We're better off without you. 
JavaScript, because it perfectly pars on with PHP ;) but since you want desktop application (which is no demand) go with C++/Qt
I'm with you. A lot of the bigger companies (and many of the devs here) seem to be of the opinion that software development needs to essentially "be your life". People brag about working for companies that provide three free meals a day, have workout areas in the building, etc... This all shocks me - why would I want a job that requires me to be there for all three meals? Why would I want to spend my down time (working out), at the office? Don't these people have lives away from work?
I went to an interview got offered a job first interview, then I went to another one quickly before accepting and had to go through something like this - They had me there two days, doing code test for a hour and half at one day and a total of around 5 hours or more between the two days. In the end I was declined due to no OO experience (even though I clearly stated many times I had none) so to be honest I think: For the company: sure do this sort of thing to get the ideal developer. For the developer - fuck this I wasted two days on this for nothing when my first interview accepted me on the dot I took the job straight after they declined me - only to be bombarded with daily interview offers from companies every single day for a month and every odd day for 2 months afterwards! There's sooooo many opportunities for developers (in uk anyway) and I dropped out of university so I don't even have that going for me. I'd definitely say fuck this to a code test now unless it was a company I really wanted to work for. At the same time, your task doesn't sound too difficult for an entry level developer to at least get some done and most certainly for a senior to complete.
Reddit seems to me, at least, to be a bastion for entitled developers. Perhaps it is due to where I work (small town, ~50k/yr), but every thread like this turns into a dick measuring contest where each dev talks about how they wouldn't change jobs for "less than 150k/yr" and "I have 10 companies a day offering me six figures", blah blah blah. Developers aren't God's gift to humanity, but reading these threads would sure give you the impression that we *think* we are.
I just shared what works for us. I'm not saying that other ways are wrong, or that ours is the best. This just works for us, and so I thought I'd share my viewpoint. Sorry if it came off too "preachy"...
This is what contract-to-hire is for (in the US, don't know if they have that in Germany.) Better to see how someone functions in the actual job you want them to hire into than to have them lone-wolf it for a weekend and make your desicion on a homework project. If you find out the candidate won't work out, you just terminate or decline to renew the contract. 
I'd probably do the same, but bristle at calling this 'free labor' - they're certainly not getting anything of productive value of out the sample code you provide (they're not running it in production, for example). To the extent that it's saving them some interview time later, yes, it's labor saving for them, but that's not what you're driving at. Calling any sort of coding/thinking work 'labor', and expecting to sell it by the hour... not always the best way to think about it, but one which of us have been conditioned to. You're a salesman, selling yourself. Right now, some of us having multiple people wanting to buy from our limited pool of time/focus, but it's not always like that, nor does every salesman make a sale on every call. Calling a drive out to a client, a sales pitch, then not getting a sale 'free labor' is ... not at all what it is. Dev interviews are similar.
Also getting totals without using COUNT or DISTINCT. Those are just arbitrary limitations that are forcing you to go against proper standards just for the sake of making the problem harder. Good programmers won't try to re-invent the wheel to solve their problems, but here they want to hire good programmers by forcing them to do exactly that.
In my last series of interviews for a LAMP dev, I put one question in front of the interviewee for each interview and was shocked that 90% of our candidates failed it. The test was "is there anything that you would change in this query to make it faster and/or more secure?": SELECT * FROM `table` WHERE `id` = $_POST['id']
I would not call the task itself excessive, I can solve this easily. HOWEVER: 2 hours to complete it? It will take 4-6 based on the amount of code I'd have to type, then at least 1-2 for some proper testing.
I'm not going to take a test to prove that I can program. I know I can, and you should be able to figure it out without wasting 2 hours of my life. YOU are the one recruiting, look at my past code, if you don't like it, pick someone else. Just like an artist has previous work that they've done, so does a programmer. Excluding the huge difference between those two job markets, it's useless to hire a programmer who doesn't even have a simple application developed. Just to comment on the good things, your questions are good, but you should only have to look at their previous code in order to figure most of them out. The only questions I might have a problem with are these: &gt; Did they achieve Third Normal Form? (Usually) I've never even heard of this before and I'm a seasoned programmer working with SQL databases for everything and anything that needs data stored. After reading it through it seems like an okay practice for smaller databases, but completely unrealistic if you are working with hundreds of tables. There's no need for doubling if not tripling the number of tables you have just to account for logical inconsistencies that you should be checking in your code rather than the DB. &gt; Did they use foreign keys? (Almost never) The opportunity for foreign keys to speed up your transactions is similar to the opportunity for them to be slowing them down. This is not a telltale sign of anything except preference. &gt; What's their PHP look like? You'll have to be more clear on what you mean by this. Are you referring to PSR? There's a difference between not knowing PSR and not being able to create readable code. &gt; Did they separate business logic from display logic? (Usually) You're asking them to demonstrate MVC (or at least the VC part). This is good, but not when you tell them: Don't use any MVC framework. You're forcing them to create their own MVC implementation and I can almost guarantee that it's not even going to come close to the public ones out there already in terms of quality and is just a waste of time. &gt; What's their commenting style? I believe that commenting is mostly a waste of time unless you are doing documentation for an API or something similar. Your code should be self explanatory and *that* readable. Ever read someone else's code without any documentation? If you could follow along without too much trouble and no comments, you know what I mean. &gt; Did they create unit tests? (Someone did this once!) Unless you're using a framework, this is just wasted time and effort for a small two hour project. If you're looking for this, then they should already have created a sizable application that implements it in some way if this matters (which it does for any sizable application).
The answer is that while your test is a little anal, most of the people answering questions here are acting like assholes who don't show any indication of working well on a team that works on refactoring an old code base. Many of the answers make me think that these folks either haven't worked on an enterprise level project, or haven't started working on one in the middle of it. While they may also be talented developers, and to some degree their attitudes may be exaggerated by the anonymity of the Internet, you don't want people on your team who act like anything they don't want to do is an offense to their existence. What I've learned as I've gone from developer to manager to business owner is that all developers (including myself) think they are worth way more than they are. All managers (including myself) think all developers are worth less than they are. It is weird to know that you can fall prey to both of these errors at the same time, but you can, and I think it speaks to the strange nature of the relationship. That being said, we do ask for code samples up front, but we do not test for code. We take our short list and contract out a real project or component of a project to the applicants on a 1099 basis and pay a higher hourly rate for this small project than we would otherwise pay. This way we avoid insulting the good developers by asking them to do free trivial work, but we still get to learn what it is like to work with them and get a real world code sample. Even if we don't choose that person, they still got paid a higher than market rate for the work. If we do choose them, they get to see what it is like to work for us ( albeit they can do the 1099 job whenever wherever, and working for us is actually working in our office). I hope this helps in some fashion!
Bro, you need a problem solver, not a walking textbook.
Sir, I read this last night 20 mins after you posted it when there were only a few comments... wanted to respond then but I didn't want to type it all on my phone. This doesn't seem like a complicated code test to me, assuming you are supplying the data. If you expect someone to collect all the data on books for you, that's just wrong. But I could totally make that app in a week... and I totally understand not wanting them to use frameworks. You just want a legible code example, right? Doesn't seem too bad. This is the type of shit I do all of the time though ;D
We probably wouldn't get to the stage where we talk about salary for that to be the reason I sit and take your quiz. That said, it sounds to me like you have an effective strategy for finding young, hungry developers so I am glad it works for you. But honestly, we have had to let go a tiny fraction of the developers we've hired, the overwhelming majority of people assimilate into our culture and produce great software. It's really freaking hard to hire only rockstars in the current market conditions, but as it turns out you don't actually have to. You can grow them as well.
It hasn’t until very recently, so recently that most LAMP stuff doesn’t use them.
It's definitely 1999 if all you know is PHP.
http://blog.infertux.com/2013/01/12/why-i-hate-java/
True and true. You have to risk a couple of hours of your time, sure, but to me it's what finding good things is all about. If you don't wager, you don't win. That just my though on the process we have. Our two year(-ish) plan is to hire low-level or mediocre people and coach them, we've done this in the past and we have a few people that grew in our environment, knowing close to zero when they attended our organized "school". The strategy I've mentioned earlier is currently applied mainly because, we're trying to fill the senior dev positions. And we did as of late, so it does work pretty good for us. :)
I just wouldn't have the time, unless the job you're giving me is the sexiest thing in the universe. As an applicant, I still have a job to work, and sure, some code samples would be ok, but I would consider your company short-sighted and silly to foist this test on potential developers. There are questions you can ask that illustrate thought process better and more thoroughly than the judgements a programmer is going to make about code he/she didn't write. We HATE code we didn't write, almost as an absolute rule.
I'd charge you my hourly rate for the job. Paid in advance.5 not take the job, because expecting free work is ridiculous. I don't have any portfolio pieces because my work was always for internal clients and was protected by NDA. Probably people aren't honest because even if you're a crazy ass, it's not professional or helpful to a career in an area to point that out.
You'd be better off asking them to write a wiz-bang app on a whiteboard, and maybe a 10 question standardized (probably multi-choice and short answer) test.
&gt; If you want me to program for you, hire me for a short term so that I am not wasting my time. Most people don't want short term (2 weeks? 1 month?) employment. You're not going to quit your current job for a month to 'try out' this new place, then get let go if they don't like you. The people that do this are contractors/freelancers. And many companies don't want to bring those people in - they prefer some sense of longevity to their workers. Whether that's prudent or misplaced, I couldn't say entirely; it's really up to the culture of the company. I do think many companies miss out on getting stuff done while waiting for the 'perfect fit' candidate and/or hiring long term C-list devs as opposed to bringing in better-producing contractors for shorter terms to have a better base to build on. But, if you deliver a strong documented base using advanced tools that the next people still can't figure out, perhaps you're no further ahead? &gt; Why don't you ask if they have code samples for you to check out? The OP *does* ask for code samples/repos, and apparently only gives the test to people who don't have something public to review.
It's hard to say what you might be asked since it can vary so much from employer to employer. Here are some general tips, though, from someone who's routinely on the other side of the table. * Be confident. Own what you know and don't put yourself down. * OTOH, own what you don't know. Be honest and don't try to BS an answer to a question. Instead, explain how you would find the answer. * Be positive. A big part of interviews is gauging how you'd fit in to the existing organization, and no one likes working with angry people. * Show genuine interest in the company you're interviewing with. * Ask questions about the team, the work hours, the culture. It shows interest, and these are things you should know before you ever accept a position.
So you're really trying to find out if this person is willing to work two jobs worth of hours for your company. Very sneaky
Companies always hire devs and expect them to also thoroughly do the job of testing their own code. Instead of hiring testers.
Yes, I'm in seattle. The market its really heating up and you need to understand that; But only for the top people, and only for the type of people who could pass that interview. There are a lot of more jr or less experienced people out there you can get for cheaper but if you are a top person, have at least 15 years of experience, and know what software craftsmanship is you are going to be expecting the top offers.. and that is what you are looking for from the look of it.
It's crappy, so i take your test and the job. Then it gets better, and i quit.
Some people can't even produce working code using step-by-step wizards and IDEs, so you're at least one step ahead.
And the attitude of taking advantage of people because things are bad economically is abusive
can i presume you were looking for prepared statements and/or PDO/binding? Yes, you can make it more secure with prepared statements and/or proper escaping/filtering. I don't think there's much you can do to make it measurably *faster*, save checking that you have appropriate indexes (maybe even partitioning) but that's not anything to do with the query text itself.
It's the same for companies who demand perfect syntax during interviews. As a good Dev, I'm smart enough to know where to look for answers without memorizing idiosyncrasies
Heres some standard backend questions that tend to be asked to jrs... * Whats the difference between public,private, protected, and static keywords mean when applied to properties/methods. * What the difference between and abstract class and an interface * know some basic design patters (sadly singleton... which is somewhat an anti-pattern is the most commonly asked). * know some of PHP's qurks eg. http://php.net/manual/en/language.operators.comparison.php I assume there using mysql? I would guess they could ask basic sql questions on doing queries... make sure you know the different joins.. and the major keywords like where/limit/order/group by/having ect. 
Company takes your code, thanks you for stopping by. It's like the assholes who expect the requirements and design process to be free, and then take that work to someone else to do cheaper
&gt; There's no need for doubling if not tripling the number of tables you have just to account for logical inconsistencies that you should be checking in your code rather than the DB. I think I thought this way about 10 years ago. It's been a bit of a struggle to shake that thinking, but it's happened. Actually, I default to 3NF in many cases anyway, but this "check the data in code" attitude only gets you so far. If you are developing something which more than one app will end up having access to, having at least minimal constraints in the database helps everyone. I'm not much of a fan of in-database logic (sprocs, etc) but depending on the situation, they may be a requirement. "Just check the data in the app, don't enforce stuff in the database tables!" comes across as at least a tad naive in most cases. 
Thank you for posting. I am a junior dev and I'm going to try this just to improve my skills.
You could use bit.ly or a another shortner service which offers tracking on links. You could use a service like Mandrill (of Mailchimp fame) or Sendgrid which will tie seamlessly into your emails and provide better deliverability, read and opens rates, and link tracking like you want. http://mandrill.com/ (I use this) http://sendgrid.com/ These services cost money, but they are really simple to integrate. Probably simpler than rolling your own link tracking. That said, here's how I track links for WineLog.net using a homegrown solution: * I have a database table for "linkouts" that stores the the URL, and random code, and some other information I want to track on the link (in my case wine price and merchant name, etc) * Frontend tool to add a link and generate the random code, giving me a link like http://www.winelog.net/link/buy/1031096/ * In .htaccess I have a rewrite rule to direct /link/buy/.*/? to linkout.php?l=$1 * linkout.php looks up the code in our DB table, find the URL and redirects there via a javascript redirect. * linkout.php also stores a visit, increments a counter in our DB, loads Google Analytics JS for tracking, etc. For tracking "reads" of emails (important for calculating click through rates), you an embed an image in the email. Use a rewrite to send /images/tracker.gif?e=idofemail to a PHP script that increments a read count for that email. Hope this helps.
Any of the above, with the inclusion of selecting individually the columns required instead of the whole row. The glaringly obvious issue is the potential for SQL injection which was shockingly only picked up by 40% of interview candidates. 
That can very much depend on the size of the product, though. Google has whole divisions dedicated entirely to QA for their major products, and with good reason.
7 years (since 2006) is "recently"?
...so? Ircmaxwell's is well reasoned and informative. What's your point here? "Everyone can make a point, so no points are worth considering just because"?
As what I would consider a shitty programmer myself, I could complete your task easily enough, but I think I'd fall pretty hard on the actual evaluation of the code. I'd make it work, but not efficiently or clearly! I think it may be a tad excessive. I'd at least throw out the limitations against using frameworks, about not using jQuery, about not using Count(Distinct...). I guess it does depend on the kind of work you're doing though. If you're hoping to hire a senior developer, maybe all that is in order.
While I understand what you are saying, I think there are levels here. If we use an ad agency analogy, even a well established firm would bend over backwards (golf, pitch books, mock ups, etc) to land Apple. But they wouldn't do more than a phone call to set up Joe's Pizza, if they were even willing to take on such a client. If I hear "we use php 5.0 for our jangy crm, and pay low-market rates" it better not be followed up with "now pitch us like you would apple!" 
yes, specific columns vs select * can be faster if you have specific use cases for just particular columns, granted. For me, the overhead - especially with smaller tables - is generally not enough to make me switch from select * *unless* I've got binary data blobs in the table as well (not often, but sometimes). It would depend on the sample base as to whether I'd be shocked by 40% or not. 40% of people claiming to be 'senior devs' - yes, I'd be shocked. 40% of the general dev population? nope.
agreed, but the 'free labor' thing still really isn't free labor *unless* the pitched company ends up using the creative without paying for it. Other than than, the 'labor' expense is carried by the regular overhead the firm charges for everything else. It's a 'cost of doing business', is pitching clients. Individuals don't think of things in this manner as much, and companies don't tend to want to engage most potential employees in this manner either, but, in reality, you are your own business, and it helps to think of yourself as such. Charging enough such that the 'cost' of doing interviews is already baked in to your rates/salary should be top of anyone's list. That is all relative of course, but if someone's considering offering, say, $110k plus good benefits, yes, I'll be more inclined to take time to do extra hoop jumping. If they're offering $60k, I won't. 15 years ago, I would have (and did). But we all go through different stages in our careers and lives, so what works for you isn't for everyone, and won't be for you later on most likely. 
However, this would be the User's first time on the Payed-Site. There will not be anything to look up in the DB. Also, what is the source code to get this done? I'm convinced it's very easy. 
Yep, if you can do well on that homework, you don't need to put up with that bullshit.
I don't touch PHP for 2 months but that doesn't seem really hard, a quick run and I think the only one I would fail is the 6th question: Didnt notice the lack of ; in the 2nd and in the 3rd I though the double single quotes were one double quote. How people fail that? :D
*Planning* on refactoring very critical code since 2006? There may be *other* reasons why no one is finishing your test.
If they ask you to get up and write code on the board: don't worry about the syntax, the semicolons, any parser stuff, they're looking for the algorithm. Don't mention salary (the number) first.
If you're just tracking link clicks, and have Google Analytics on your site then you can use Google Analytics campaign tracking. https://support.google.com/analytics/answer/1033867?hl=en-GB
You can use both prototype and JQuery. You just have to use the 'JQuery' instead of '$'. That's why plugins have: (function ( $ ) { // plugin code here }( jQuery )); But even better, JQuery has a no conflict function. var $j = jQuery.noConflict(); [JQuery noConflict() Documentation](http://api.jquery.com/jQuery.noConflict/) Also, I'm not looking right now, but if you PM me your linkedIn info, I'll add you. Doesn't hurt to have options in the future, for either one of us.
1 and 2 don't sound unreasonable at all; I just started PHP and databases 2 weeks ago and I could do this. I wouldn't be able to tell you how I would go about optimizing the schema for the *kinds* of queries in (2), but I've already had to read about normalization and foreign keys to start a project I've been working on. I think the bit about using Prototype over jQuery is too much, though. That can be picked up quickly enough by a savvy developer. If the applicant knows, and I mean s/he has taken the time to thoroughly learn jQuery and doesn't just use it as a quick means to an end, I think you can trust they will pick up Prototype with only a few syntax hiccups every now and then. You of course will have to know jQuery well enough yourself to be able to see that expertise from the code alone.
I feel ya. We're using mootools, but slowly transitioning over to jQuery. That's just where all the development is now. 
I have to say while you may be a grizzled industry veteran who has used many databases, you should know what normalisation and FKs are and understand that it's mostly a good thing and no you should not be writing more code to mitigate the fact you're doing the database layer wrong. Trust me, the guy who wrote the database implimtation of this are probably doing it better and faster than you can in PHP. Sometimes you might want to bend the rules of normalisation because of performance implications or and sometimes you want don't want that FK because the data isn't really the same, it just appears to be from a superficial level, but for the most part you should be doing both right up until the point that you hit a gotcha that makes you realise it wasn't worth it and you should be teaching your juniors to do the same until they know better. I'm not going to make any judgement calls on you, because it's entirly possible that you still logically understand good database driven design and development, but your comments could be coming from one of the many projects I've picked up in my time that has a database design that makes me want to stab the author in the neck because despite the fact they've managed to muster all the latests buzzwords on their CV and they don't know the basics.
How often are your developers actually writing new code? Studies say that, as a profession on the whole, we spend at least two-thirds of our time in maintenance. 
We actually pay people for their time when giving the outside-interview coding test. So should everyone. 
I won't iterate what others have said in regards to screening process. I personaly ask questions related to certain aspects of whatever project is invoved (do you know whats X, can you tell me more if yes; how would you do this or that...etc..not even looking for specific answers, even abstraction is enough. I watch behavior and I know if someone knows or if he is bullshiting. Easy to spot if someone is making out on the spot...) But anyway.... 2 hours?? Senior developer was rigtht there, you want well structured code , without using frameworks and libraries and only 2 hours? sure, for quick and dirty solution. I mean, just looking at your question and complains &gt;Did they achieve Third Normal Form? (Usually) &gt;Did they use foreign keys? (Almost never) &gt;Did they separate business logic from display logic? (Usually) &gt;Did they use OO or did they keep it procedural? (Usually procedural, sometimes OO) &gt;If they used OO, did they do it for the sake of OO, or did they do it because the application demanded it? (50/50 useful vs OO-wankery) You know why they didn't? who will enter all that relational data? Did you provide a list? Even if yes sure you think it will take five minutes to add the data, add relatonships, etc.. but in reality it will take minimum of 15-20 minutes add to that your schema design and its already half (or 3/8) of your time.....Granted, queries can be written in 10 minutes.. oh wait, you want proper OO design and no libraries.... so a databse layer we have to put in place...now lets create some abstract class for all that fetching, and throw few methods...oh shit, what about output, json, html, do we create an outpout class......oh ist XHR so let check for headers and cater for both,..............oh shit, time is up...and I didn't even touch the front end
If they are good devs they will most likely have code samples for you. I would almost consider it a deal breaker for a mid level dev to not have code samples available. for a sr dev, no way.
What exactly is your workspace here? It's really hard to understand exactly what you're looking for.
I'm going to buck the trend and recommend C#. Why? Because it's a language I enjoy, and you can also do just about *anything* with it.
I've used technical interviews to identify developers who didn't actually know anything and were trying to fake their way through the process by taking credit for someone else's work.
Know exactly what happens once you submit a form or enter a url in your browser. From the header to the POST to parsing the parameters of that post right down to the database interaction (if any). Definitely know some sql and form security against XSS and injections. Know singletons and basic object oriented stuff. Know about globals and why they might be bad. (register global) They MIGHT ask magic methods but I've only been asked this in senior roles.
All my jobs in last 10 years were internal applications or applications that you cannot see unless you purchase the service, etc.. Sure i wrote tons of libraries but I could never put them on github or show you my code. Couple of websites Ii did on the side , really doesn't show my skill and I don;t have time (nor idea) for some elaborate PHP project. If I had i would start my own busniess. Sometimes I get asked "can you show us stuff you have done". Sure, here are the links and pay 60$ a month to see it in action, or acquire IP to look at the code.
In the same boat - I have years of code that I could realistically never release to anyone because it is closed source.
&gt; Learn some interview skills OP should pay more attention to this advice rather than anything else. I can spot bullshiter miles away and person that knows stuff, has interest, passion, etc by asking right questions and watching the behavior..
Coding tests annoy me, both as the interviewee and the interviewer. As the interviewee I've just about walked out interviews that have asked me to write code (much less asked me to write code before the interview), not because I can't solve the problem, but because I don't want to work at a company that places that much emphasis on coding details rather than on problem solving, which honestly is the more important skill. Languages, paradigms, standards... those can all be picked up rather quickly and easily (and refined in the development process)... knowing how to approach a problem, that's the skill worth hiring. On the other hand (and on the other side of the table) as the person conducting the interview I'm more interested in how a person thinks and how they approach a problem rather than their coding skills / styles, and determining that can be more easily done in person with a good conversation and possibly a whiteboard. I'm not saying that coding skills aren't important, they are, but coding questions are more appropriately asked to Google than to an interviewee. I would rather hire a person who can see all the angles in a problem and is an average programmer over a person who can write beautiful code, but only code to well defined spec. With all that being said, the actual questions you're asking your candidates to solve aren't bad, but I would propose having them solve them during the actual in person interview: * Have them draw the schema up on the whiteboard * Ask them questions about it, such as how they would then leverage, modify or optimize the schema to get such and such a result (such as your queries). * Have them draw up the class hierarchy for the web app, ask them questions about it too. * So on, so forth... This way you can see how the candidate thinks, you get the answers to about 95% of your questions and the candidate didn't didn't have to write a single line of code. You don't want to leave the candidate with the impression that they just gave you two hours of work for free, you want them to leave with a smile on their face and wanting to work at your company. This is as much an interview of your company for them as it is an interview of a new employee for you. Remember, code is the expression of a solution; the solution itself, that's the important bit.
I disagree that it's a "loser", but I understand that that is a common opinion amongst PHP developers lately.
The OSL is one thing that is keeping me from continuing using it. I really don't agree with or even understand why EllisLab is managing CI the way that they are (or aren't, I should say...).
TIL interviewing as a LAMP developer is kind of like this: [Good Will Hunting Interview](http://www.youtube.com/watch?feature=player_detailpage&amp;v=5hWIr9_noRo#t=12s) 
This isn't hard. This is a simple full-stack implementation, and I'm a little worried about all the people in this thread saying it's excessive. How many of the people who've answered this are still teenagers? Any real developers in here? That said, I would definitely give them more time, though...especially if you ask them to input data and create an html/javascript UI. Also, just let them use whatever 3rd party stuff they want. Most people will just use jquery for the ajax and UI anyways because it's ubiquitous and easy to get solid functionality (which is the point, after all). You'll have to train them on your internal APIs anyways. I think this is easy enough for a software developer who has at least 2 years under their belt. Just don't ask them to do anything weird...because weird problems have weird solutions and you might not like what you see.
If I was allowed to do it quickly (using a framework or an ORM) then it wouldn't be a big deal. I lost all desire to hand-write mysql queries in PHP code when mysqli got popular. If you want outdated and non-secure code, I'd be happy to do it quickly, but it's just too much time to write something original that does everything an ORM does for me already.
That's the point of this discussion: To find out what works and why.
I would raise a red flag and possibly not want to work for you if I heard this in an interview
&gt; Or if you are still adamant that you need to see their code before you hire them just make published code a REQUIREMENT. &gt;&gt; I really want to be able to do this, but so far only two or three candidates have bothered. So because I work for a company that doesn't open source its codebase I'm disqualified? Can I see all of *your* company's source code before I accept the job? 
&gt; Company takes your code... And the copyrights?
But even you have code examples from previous similar tests to provide. All other jobs expect to know what you do or examples of you work to be provided. Programmers shouldn't be different.
OSL is similar to the GPL with a few caveats. The only thing that makes me itchy is this: &gt; If You distribute or communicate copies of the Original Work or a Derivative Work, You must make a reasonable effort under the circumstances to obtain the express assent of recipients to the terms of this License. Translating it I think it means that if you distribute the application then you must get a consensus by other people to agree to it as well?
&gt; Also, what is the source code to get this done? Ah, so that's what you're here for.
&gt;I am going to tell you, as a business owner myself, inspect yourself and make sure you are being fair Well that's pretty much *the thing*. I *thought* I was being fair. All the other places I hang out in where I've raised this problem also said I was being fair. Said other places are also well-known for being full of (fellow) code snobs. Popular opinion here is that I'm probably not being fair. I still think that it's a good test, I still place value in it, but clearly there's a disconnect here. I'm just going to have to readjust what I consider important and see how it works out.
To see if the candidate can use GROUP BY with aggregate functions, I expect.
But, even without a third party library, this is a very simple AJAX request using an xmlhttprequest I agree that it's important to be able to learn new libraries and apply them, but in my experience, it's the programmers who don't know how to do anything without the library of their choice (because they don't understand basic javascript) that are the problem. While libraries are nice to speed up development, especially in a team environment, I'm always bothered by programmers who can't troubleshoot code because it's not using the library they're used to.
That was my thought shortly after posting this comment, but regardless of the order in which you group genres and books, grouping authors will require you to do a distinct count for the subgroups, won't it? I'm getting confused; I should put this into an actual database and play with it.
But whose tongue? And whose cheek?
Having a portfolio and samples of your workflow and code is an advantage to avoid this kind of questioning and "tests". So, when you arrive at an "interview", you get to be the one making questions, because you've been the one who got it done in the past. 
Not an impossible task, but an insulting hoop to jump through. I would simply walk and say no thank you. How you treat candidates reflects on how you treat employees. Interviews should be technical enough to verify that i haven't lied on my resume, and to verify that we mutually get along well enough to work side by side. If you want a code sample, ask for one but let candidates provide code they have already written.
[How to write a nice, simple, cross-browser XHR abstraction](https://github.com/jquery/jquery/blob/1.8-stable/src/ajax/xhr.js)
I'm not sure what OO-wankery means either. Probably means using OO in a way that complicates the code design. But sometimes complicated is better. Properly implemented OO code is much more extendible and changeable.
While nobody's bombed the "what's SQL injection" question we give, we've been *shocked* at how few devs are aware of other security exploits. We had one candidate confuse CSRF with the same-origin policy...
So it's an assembly compiler that compiles to "chicken" written in PHP. I think a certain OP has way to much time on his/her hands.
At least the API is consistent. May be a refreshing change of pace for us PHP developers.
SELECT A.AU_ID, COUNT(B.BOOK_ID), COUNT(G.GENRE_ID) FROM AUTHORS A LEFT OUTER JOIN BOOKS B ON A.AU_ID = B.AU_ID LEFT OUTER JOIN GENRES G ON B.BOOK_ID = G.BOOK_ID GROUP BY A.AU_ID I think that does it, but haven't tried it. In the classic PUBS DB, they had a case of a book with no author, so FULL joins instead of LEFT joins, which will pick up authors with no books. 
Reddiquette also says not to complain about downvoting. Just sayin.
&gt; Create a small PHP application to display the results of the three queries, with users switching between them using XHR. Do not use any third party code (frameworks, libraries, etc) other than something to do the XHR, with a preference towards Prototype instead of jQuery. Who wants to build everything from scratch. I've been doing PHP for ~8 years ... I've never written XHR requests from scratch. I *have* used jQuery to perform ajax calls. I have used Drupal's Ajax Framework to make callbacks. If you're testing thoroughness and understanding simply ask for a basic custom HTML Form with some validation. If its supposed to take 1-2 hours -- dont expect the zillion bullet points questions to be in code or asked; your initial spec said nothing about Foreign keys. If you want all that BS in bullet points its not a 1-2 hour project "from scratch". Using any framework/CMS I could that in &lt; 2 hours. From scratch probably longer because I'd have to be more careful and remember some basic underlying principles. 
Very interesting, thank you. Took it for the entertainment value. Is there any way to do a fixed font for the code? That multiple-choice syntax error one was an annoyance. After looking at other comments here, I'm beginning to doubt some single-quote / double-quotes...
Correct. I've updated my post to eliminate the ambiguity.
Your points are fair, and I've addressed them elsewhere. The tl;dr on the OO thing is that it's a trap and anyone using OO to solve this problem is doing it wrong, but it's an expected mistake at certain experience levels. Seriously, it's turning three SQL queries into three HTML tables, anyone that overcomplicates that is gonna have issues.
There's a certain learning curve to it... enough that I think it might take more time to adjust to it than to do a task using it. We've sent all of our changes to it back upstream, and it's actually published on github, we just don't really advertise it because it doesn't do anything that others don't do *much* better. We were playing with some bits of ZF1 a while ago and ended up writing an adapter so Zend_Db could use it as a backend, so we could use that instead without breaking the rest of our code. That was an interesting experiment.
Very interesting. I love the author/publisher integration. I presume this is to allow self-publishing to be easily represented? 
I wouldn't do this. It may sound like a 'simple' task, and according to your own quote, you told them you expect it to take 2 hours? If you want some really shitty code thrown together without any planning you might be able to get it in 2 hours. At which point you'd think 'oh man look at this crappy rushed code.' You are essentially asking the applicant to build an entire (small) project. This would entail the whole lifecycle like designing the database, implementing the database, desiging the code, writing the code. Then, of course they'd probably want to show off so they would add all kinds of bells and whistles and when would you say 'It's complete.' I totally wouldn't do this because it would take a lot of time. EDIT: You're much better off taking the pieces that you are really interested in and creating a small test they can do in person along with a set of questions you can ask them. You can usually get a good idea for someones abilities just by asking questions. Instead of 'go do me a project' how about asking things like 'how would you store so-and-so in a database?' 'Describe the process of an XHR request and how it works' ETC 
Yes, you could assign a party as the author and the same party as the publisher.
To be frank, in this day and age, if you as a job seeker haven't made samples of *your* best code available, then something is wrong. We've been shocked at how often this has happened in this hiring round. We have had people ask to see some of the code before, during the interview. We usually pop open the *worst* code we have, as to demonstrate the worst case scenario. We haven't scared anyone off using that technique ... yet.
We say "Here, do this. It should take you about two hours, give or take. Please get it back to us by " . `date('Y-m-d', strtotime('+7 days'))`
&gt; If you want a code sample, ask for one but let candidates provide code they have already written. That's the crux of the issue. We've only been issuing this task to people that *don't have* code samples that demonstrate their abilities. (Seeing tutorial-grade stuff from a "senior" level dev is an embarrassment.) We're no longer going to be considering them as candidates.
My boss recently interviewed a guy looking for his first development job. From the stuff he said to me afterward, I'd say this (a couple of these are repeating others' answers, but that just shows they are important): 1. If they have you do sample code during the interview, don't worry at all about proper syntax. Just write pseudo-code and most importantly, talk through what you are doing. 2. If you don't know the answer to a question, don't worry about it. But talk through how you might figure it out. 3. Don't request a high salary. Just say something like "I'll gladly look at any offer." If you want to negotiate, wait until you get an offer before trying. 4. If you can do small talk about something they like, that's good. The real goal of an interview is to get the interviewer to like you, and to believe you are competent. (Note: You should actually BE competent, of course.)
The goal of the test isn't to check your knowledge in a random CMS, or in a random framework, though. Also, please re-read the XHR thing. XHR libraries are expressly permitted because, as you've pointed out, who the hell ever does XHR from scratch? The entire rest of the task is turning three SQL queries into three HTML tables. You don't need a framework for that.
It works fine, because you're probably using pseudo namespaces. 
I don't think this is a fair requirement. I have worked years as a PHP dev on some really large projects. I have probably 50 projects under my belt but almost all of them come with NDA which also means I'm not publishing source code. 
I spotted a few people saying "This is insulting", but if it was a Fortune 100 company or a high-rolling startup you'd be a fucking idiot to refuse a technical test, and they'd be a fucking idiot to hire you without one, so the concept of tests is something you as a developer need to be ok with. It might take me 3 hours if I have to fuck around with Prototype, but its no major feat.
Why the fuck would you create your own? * https://packagist.org/search/?q=router * https://packagist.org/search/?q=routing
There's also a huge difference between side projects and code samples that you create *because you're looking for work*. We don't expect people to live and breathe their work, and we don't expect people to be ubergeeks at home. I have two toddlers, goodness knows I don't have the time for a side project!
I'm a huge Yii fan, I've found it to be a joy to develop with. Getting it set up on Heroku (or another cloud host) has been a bit of a trick, but I've gotten it mostly sorted. I highly recommend it for your next project. check http://aaronfrancis.com/blog/?tag=Yii for some Yii/Heroku thoughts.
I gave a similar assignment between the phone screen and the real interview. I also gave them a week to do it so they could work around their schedule. It worked out well and I was able to quickly detect the flakes and fakes. And that's the goal. If you scare away a good developer that sucks, but highering a bad one is downright dangerous. I will say one thing though, I didn't put as many restrictions on it. They were allowed to use any technology they wanted. I was looking for their ability to think, not their skill in a particular language.
This is true... but mandatory code review is a great way to mitigate it. We do this anyway, not just for new people. It's real fun having junior do code review on seniors. Great education and training chances...
Their time is only worth $80 if someone is willing to pay them $80 for the time they would otherwise be in the interview. And if that's the case, why are they looking for a job?
Give me three hours and I can teach any college kid how to BS his way through your questions.
It shouldn't be hard, the stress of the interview is hard enough. 
&gt; I'm not going to take a test to prove that I can program. I know I can, and you should be able to figure it out without wasting 2 hours of my life. I have met several people with that attitude, and all of them turned out to be horrible at writing code. They were really good at bluffing their way into team lead positions, but that's about it. 
Especially since this is *before* the interview. It would probably take 2 or 3 hours to do this, and who's going to do all that when they know they're up against a dozen or so other people? 
So you would rather work for a company that didn't screen its hires and was thus filled with a bunch of slack jawed idiots? 
&gt; To be honest, if people are having that response, I really wish they'd say it to our face instead of making silly excuses. Seeing as no company will ever tell you to your face that they're not hiring you, I think the sentiment is mutual. &gt;How else would you propose that I allow someone to prove that they aren't incompetent? Have a conversation with them. Ask what they've done, what they're working on, what kind of technologies they've used. If you can't tell if a person knows what they're talking about from a conversation, you may want to pull some developers into the interview with you so you know they aren't bullshitting you. You're giving people a 2 or 3 hour task to do when they know they've only got a 5-10% chance at getting the job. It makes it seem like you have unreasonable expectations of your developers. I don't blame them for not bothering to complete it. I wouldn't.
You won't know which questions I'll ask. if you were to cover the full spectrum, that college kid might actually wind up knowing something.
That set of questions is way too strict. You're going to rule out almost all developers, even the good ones. PHP isn't rocket science. You don't need a CS degree to code in it. I've been at this for over 15 years, and I've never even gotten in the *realm* of O(log N). (there's enough built in php functions that you shouldn't even be worrying about that). There's no web developer ever where that kind of thing is going to be necessary to know... or why floor((0.1+0.7)*10) equals 7. 
Sorry, we adopted that term in-house to describe a pattern we noticed. A lot of later junior devs and early mid level devs begin using objects *everywhere*, without thought to the task that they're solving. After all, all those nifty modern new frameworks use classes *everywhere*, so it must be the right thing to do, right? OO is a way to manage complexity. If the task you're doing isn't complex, you probably don't need OO. If the thing you're trying to model isn't complex, you might not need OO. If you're going to try using a unit testing framework, chances are that you're going to need OO to keep the tests sane and small. The task as given is database schema design, running three queries, and building a few HTML tables from the query results. This is not complex, so we don't ask for OO. We don't ask for unit testing. We don't even ask for MVC. Yet some developers will choose to over-complicate things because they think it's the best thing to do. We've come to expect this, and it always makes for good follow-up interview questions.
&gt;Honestly I do not see anything to difficult in your code request. Time-wise, this is going to take a developer 2-3 hours (or more since you know someone is going to scrutinize your code). That is *way* too much to ask of someone who hasn't even had an interview, yet. Would you take 4 hours out of your day to program something for a job you only had a 5% chance of getting, or would you move on to another company that *didn't* have unrealistic expectations of developers.
I don't think there's any sane employer that would ever ask for code that's been written for someone else. If you're actually looking for work actively, and you don't have code samples available, that's probably a bad thing. 
&gt; because no self-respecting PHP developer actually thinks PHP is a good language. This statement is *very* short-sighted. It depends how high in the ranks you are, and what makes it a "good language." Newbies love PHP because it's easy and has a small learning curve. To them it's a "good language" because they can learn it fast and have code up and running in a few hours. Seasoned programmers dislike it because it's too dynamic and unstructured. They think it's a "bad language" because it's inconsistent and allows you to program in ways that are less-than-best-practice. Senior level developers, project managers, CIOs, etc. love it because the fact that it's easy and free means we have lots of potential developers to choose from, and many really good ones we can hire. It's a "good language" because it's accessible, free, and popular. If you're the owner of a company or website, you also think PHP is a good language mainly because development times are so fast. Right now I'm a programmer for an organization that uses Oracle/Plsql. It takes 4 to 5 times as long to crank out web applications because of how convoluted and strict everything is. So if all you care about is the technical things about the language, sure it's not very good. If you actually care about making a good product and having a successful company, it's a very good language.
$ php artisan serv That should do the trick (no mysql tho, just install it local once)
It's also doable using subqueries.
Well if you can do that, then it's evidence that the person is qualified. Whats the problem? I wrote that my statement was not static. Also I'm not an employer, I simply just stated that employers probably want some evidence of your abilities. 
Yeah, two hours is not enough to write this comfortably, not if you want a hacky solution. And your phrasing gives a somewhat negative impression of your expectations in general. i.e. "Oh shit, will I always have to write stuff without having some time to step back and actually think about it?"
As I've written before, if you read, my statement is not static. There must be some way you can prove yourself? It may be almost anything, describing stuff, telling your story or view on stuff, being recommended. But if there is absolutely nothing you can say or show me, well how do I know you can code?
We give them a week, and don't expressly restrict them from using any outside resources.
Honestly, I think this a completely fair test. Any LAMP stack developer worth *paying* should be able to create a simple normal relational database with proper keys, relations, indexes, etc. The only thing I'd change is expecting Prototype vs. jQuery. jQuery is more popular and likely to be known by the prospective dev. It's a relatively easy task to learn a new framework (or even language) for a new job
I recommend learning C++ and/or Haskell. For the former, make sure you are actually learning C++ and not C-with-classes. The former because it is a language with application in an area that has only small overlap with PHP, while at the same time being a not-so-bad language (much unlike Java for example). The latter because functional programming will likely change your view on and approach to various problems. Most probably you will not be programing Haskell in practice, it will just change your programming in other languages. I do not recommend learning Python at this point (as it's very close to PHP) and also not Java (because it's also close to PHP and a really bad language besides).
No need for that. I just ask them to explain their code during the interview. It is pretty easy to tell which people didn't actually write their own code because they don't understand it. And if they do fool me, cool. Understanding is more important to me than who actually wrote it.
The questions only get you in the door, they don't keep you there. If it takes you a year to realize he's not producing, you can guess where the fault is.
&gt;That set of questions is way too strict. You're going to rule out almost all developers, even the good ones. The only people who think this are the ones who couldn't readily provide basic answers. I don't look for a dissertation - I'm just looking for a glimmer of understanding. &gt;There's no web developer ever where that kind of thing is going to be necessary to know... or why floor((0.1+0.7)*10) equals 7. If someone doesn't know why that is, I don't want them *anywhere near anything that deals with money. Ever.* Part of the issue here I suspect is that many people reading this list don't know why some of this stuff is important. You should know why it's important. All of you should.
So you're saying I should have personal projects as examples of code for employers?
That's ridiculous. You wouldn't let someone build a shopping cart if they don't know what floor((0.1+0.7)*10) does? How much do you pay your junior devs? Can you *even hire* a junior dev? You're ruling out potentially good candidates because they don't know specific, somewhat obscure, and unimportant things. This is PHP. The likelihood that's going to come up is really rare, and you want to send away otherwise good developers because they don't know the extremely advanced stuff? That's really bad for a company in the long run. I've been at this for 15 years and I'd never have that as a requirement. That's a ridiculous requirement for a php developer.
This. I've done a few code tests in my day. The enforced time line immediately forces people to work and function in a non-standard way, and all normal methodologists and processes go out the window. That's great if you want to test their ability to quickly throw together a temporary fix to a problem, but to measure and look for the things you are talking about, kill the time limit and make them comfortable. Give them way more time than they need, even be ambigous ('get us back to us in a couple of days') and see how they do. Pay attention to how quickly they turn it around, but don't dictate it. If you want a time controlled test to try to ensure their work is theirs, or any other reason, hand them buggy code and an ambiguous list of problems in it to fix. Bonus points if they find the vulnerabilities/problems you didn't mention in the description.
I disagree. It's true that you don't need OO for something small like this that will never change. However, in reality, projects always end up changing, and so it makes sense to design things properly from the start. I've found through experience that thinking about the design of a system from the beginning pays massive dividends later on. I have systems that are a couple of years old now that are still very easy to maintain and expand upon, because I put some decent thought into how they were designed at the start. Or you could just have the "fuck it, just get it working approach", where you get a fast success early on and then it falls to pieces later.
I could write something that does what you want in 2 hours, but it would be hell to maintain, and i certainly won't write that for an interview unless i was really desperate (hint: you don't want the ones that are desperate). Part of the experience of being a dev is knowing that projects will get bigger, and that you should account for that in the code you write now, and avoid taking the kind of shortcuts you apparently want your candidates to take.
They don't have to be *projects*... just enough code to demonstrate what you believe your abilities to be. Then again, depending on your skill level, there might not be a difference!
I would do it with a cursor just to piss people off. I guess a common table expression could work, but even thinking about it hurts my brain.
Exactly.
Code you write for another company is their code. Not yours. It's unreasonable to ask anyone to, firstly, break those terms, or secondly, spend their free personal time reproducing the work they do all day in a personal environment just in case another employer wants to see it. There'll be plenty of other employers out there with much more reasonable terms. 
&gt; Do not use any third party code (frameworks, libraries, etc) other than something to do the XHR, with a preference towards Prototype instead of jQuery. Basically, you are asking devs to re-create the wheel; thus, costing the company money.
Unless you state any of your grading criterias in the requirements, I wouldn't use any of those. No libraries/frameworks, yet you want me to use OOP; ok, so will I have to write my router, dispatcher, controller, view renderer; because otherwise you'll say "it doesn't use proper object oriented design". &gt; Did they think about the fact that a book can have multiple authors and genres? No, because it was not stated. &gt; Better yet, did they ask about that oversight in the spec? No. because I'd think you can be clear about what you want. &gt; Did they use foreign keys? Did you specify InnoDB usage (assuming MySQL is at play here), &gt; Did they pull off the third query without resorting to doing a loop in PHP? I'd use an aggregate table here. &gt; Did they pick something other than jQuery to do XHR? jQuery is faster to get running with, in terms of developer knowledge. I don't know people who want to invest time into a technology just for an interview. &gt; What's their commenting style? There shouldn't even be any comments for such code, it's all trivial crud. &gt; Did they create unit tests? Did you ask for unit tests. My opinion is that you run your hiring tests very differently from other companies I've interviewed for. Usually the coding test is in place just to weed out people that don't know how to code, while the true "get to know the developer" would be through discussion about past work, and the probation period. But hey, hiring developers isn't a science, so nobody has the best formula for hiring yet.
&gt; If you have a development environment where they can screw it up without breaking the production environment, then it's an expected part of the learning process. In the last place I worked, you weren't *really* accepted until you brought down production. It was like a rite of passage. It's inevitable, everyone's going to do it multiple times over the course of their career, but the first time you do it, roll back your changes, fix it, then push it out again... it means something to you. It's where you learn that it's serious business but it's also not the end of the world, you're not immortal, you're going to break things, but it's ok. It really establishes a comfort level with the environment as well as with the team. When I did it, I did it big. It was over 10 years ago, but I still remember what happens when you use .htaccess to redirect a script to itself. At 3:30 in the morning, the server goes down and your boss calls you to fix it.
The issue here is you think they're petty, they really aren't. It's interesting, because people only seem to have a problem with this stuff when it's *PHP*. Other communities don't seem to have a problem with it. &gt;If floor() is necessary for the current project, it literally takes 30 seconds to explain what it does. Except the problem isn't with floor(). floor() is doing exactly what it should be doing. &gt;Specifics like that are bad in the long run. It's more important that someone knows how to program. Yes, problem solving is important. However, if you can't take in to account how your solution will act that's a problem. Too many people "solve" problems only to have it come back and bite them in the ass later because they didn't account for other factors. &gt;You can memorize syntax all you want, it doesn't make you a good programmer. Who said anything about regurgitating code? Who said anything about syntax? In fact, not *once* did I say I was asking for code. I'm looking for *explanations*. I want to see that you understand certain things which are often *overlooked* by self-educated programmers. 
You ask for a database of a *personal collection*, i.e. owned books, not books available on the market. Hopefully you are concerned with only one publisher per book.
If you set up the problem correctly I believe you should be able to differentiate between those who hacked their change in and those who actually understood your abstractions and made the changes in a way you'd deem acceptable. This would obviously require a lot more thinking on your part setting up the problem, but hopefully you'd get better candidates with less time spent. Being able to understand code, and modify code is actually a more difficult problem than writing anew in my opinion. But that's just my opinion. Good luck in your search. 
You'd *totally* get bonus points for cursors.
Ok. That's fair enough and 2 hours is plenty. If OO is a trap why you listed that as something you looked at. I mean technicly and as you said what you are asking here are js sql skills. Php use here is minimal. No way you ok find good php guy using this method.
Slack jawed idiots?! That's ridiculous. Perhaps a company that doesn't demand my time outside of an interview to play their games. I'm a contractor and my hours are billable. If the company wants to pay me for them, then by all means I'll do it, otherwise take a hike.
For Jr level, this is expecting too much. For Sr level, this is pretty much what I would expect to do to prove that I deserved a Sr position. I would simply revise your interview test to reflect both Jr and Sr development positions. 
You mentioned you like the idea of writing desktop apps (what I quoted) - Python would be good for this, things like PyGTK http://www.pygtk.org/
Who uses a mouse?
Not going to get hugely into it, but a few things I've noticed : 1. Redundancies (checking both that a value is set *and* that it is set to what you want? a simple check to see if it is set to what you want should be sufficient, since if it's not set, it's obviously not going to be set to what you want, and if it's set to what you want, it's obviously going to be set). 2. Did I miss something, or is this completely lacking a relational schema? I would have expected at the very least a table for the books, a table for the authors, a table for the genres, and a table for the publishers. By /u/McGlockenshire 's secret criteria, these should also be all foreign key relational tables so that you can link multiple authors/genres/publishers/publishing dates to the books themselves (which, while I can understand why candidates taking the test would have missed this, being that you knew in advance of his secret criteria, you should have included it!). Probably the biggest thing going for you is the fact that you decided to give it a shot, despite there being little actual point to doing so :) I actually contemplated it last night, buuuut decided it was a colossal waste of time (I'm currently in the midst of an eComm coding project), but I had the sneaking suspicion *someone* would give it a shot ;)
It's the same thing here where I'd been told many times 'everyone gets one major production screw up, so make it count'. The only developer remaining more senior than me had his before the company was using any version control software. His screw up was deleting public_html on our main [e-commerce] site.
&gt; checking both that a value is set and that it is set to what you want? Where is that? Checking isset before accessing an element in an array is necessary if you want to avoid notices everywhere.
This is interesting, but why would you do this in PHP without threading? I'm ignorant here so please indulge my curiosity
When he references $_GET['page'] in the gist - if(isset($_GET['page']) &amp;&amp; $_GET['page'] == 1) { } Would produce no different result than if($_GET['page'] == 1) { } It's not going to throw a notice if $_GET['page'] isn't set, it's just going to return false. In the updated code he at least made it a bit more relevant, but not hugely. Plus, notices aren't 'evil', they let you know when something has gone horribly wrong with your server. IE - if the url is *?page=1&amp;type=html* , and $_GET['page'] returns false, I'd like to see a notice about that, rather than trying to figure out why the hell it's not doing anything.
That your statement is not static allows for the possibility that asking for free work is sometimes ok.
Hate to be the jerk here, but since you are the one asking us to pay for your bike ride, hotels, food, and the cost of putting on this biking event so that you can go biking I think it is only fair to ask how much of that money will actually go to the cause. Because even the organization is unwilling to give a percentage amount for last year. I know it's possible to dig up, but since you are asking people for money, it seems like something that you should do as part of your research. The problem with many of these things is that the host organization many times ends up with so many expenses, that actually helping the cause ends up being under 10% of the total amount. Not saying that is the case with these people, but they never actually did say what the percentage was... I know this sounds jerkish, but I only bring it up since I was actually going to pitch in, but then couldn't find this info anywhere. 
Good luck enforcing them if it's you vs them. It's much better to not give away work than to attempt to fight someone to get it back
I always get undefined index errors if i skip the isset
My one friend swears by it. He has a keyboard that has only arrow keys and no home/end/page up/down keys. I have no fucking idea how he can code reaching for the mouse to constantly select text. Almost as confusing as watching some hunt and peck when they type.
&gt; I've got 15 years experience building a shitload of different systems in PHP, but I had to look up what XHR was, because as it happens nothing I've worked on so far has used it. I've heard of it before of course, but the test would take me longer than 2 hours if I've also got to learn some new technology that I've never used. That said, the OP claims (s)he gave applicants a week to complete the test, so you could have spent a day or two learning XHR, and thus have gained a valuable skill regardless of whether or not you got the job.
Fair enough, I was more referring to original comment when you said that you won't hire anyone that doesn't have something on a side. I am almost 10 years in a field, I had side projects 7-10 years ago when I was student and had part time jobs, or working for small agencies building websites (Jesus when i recall I started with PHP 4, hardly something to show off today. ) As I grew older, and had more responsibilities (both work wise and non work wise) I really don't have time for side projects and if I do it is usually some new technologies or languages (be that java script frameworks, ruby or java/android.) s Sure I have tons of references, from CTOs, CEOs , other develpers, etc together with the fact that i am familiar with other languages (not to mention my server skills or bash scripting) is enough confidence about my skills without having to look at my code 
This library needs more global-scope functions
Maybe I just don't fit the bill because I already do have code samples, but this type of test for an interview is overkill. You're asking me to take my time to do all of this without any pay. That's just not going to happen, not unless you're offering better than market rate pay. The fact that you just want some half-assed hacked together solution doesn't appeal to me either. The senior dev is right, this project would take more than two hours if done correctly. What you *want*, as opposed to what you're really asking for, could easily be found out by just asking questions and giving the candidate a white board. I'd have no problem drawing out some tables, their relationships, and some sql queries to show how I'd do it all... but I'm not going to take a whole week to create a mini project for you. Like I said though, I'm the type of dev that does have some sample code on codeplex/github, so I'm not the best to answer this maybe.
This. So much this. I like to think I've conducted my fair share of interviews so far, and share a lot of your observations. There have been plenty of times I've been really impressed with someone in an interview, and then really disappointed with their work in that first 30 days. Conversely, I've had people I was really lukewarm about in interviews turn out to be AMAZING. To me, when hiring technical people, the fit with the team is the most important thing to get right. I also want to see a motivation to learn and improve, and someone who clearly cares about their work and what they put their name on. My favourite interview question is "Tell me about the project you've worked on that you're most proud of". It doesn't have to be fancy, or big, or high profile. I just want to see your passion for this job come out. We always try people out for 30 days. You really can't make an informed decision without that trial period.
I want to know how I did it.
Hmm, looking at that test I think I would have passed the majority of that, I always used to think I was a poor programmer but now maybe I think I might start applying for a few php jobs.
Subqueries was my next thought, but aren't those more hateful than `DISTINCT` as far as performance is concerned?
So... Much... Whitespace...
/r/lolphp 
Thank you everyone for the replies so far, the kind words and the well-intentioned criticism. I do want to point out again that I am somewhere between beginner and entry level, this project as McGlockenshire said was aimed towards junior and senior devs. In hindsight, as you can see from the gist and the repo, I put more emphasis on getting the job done in a short amount of time, with follow up thoughts on how it should be structured. In this case at least, I was trying to see what I could get done in a set amount of time. Give me a couple more hours and I would of separated all the DB logic out into it's own model class, moved the html/xml/json into a view class, it still wouldn't be senior level code of course. I can see how lots of the code as it sits in the repo could be considered embarrassing! I took on this project because right now I eat, drink and code. Learning this stuff right is one of my only goals right now. I have my sights set on understanding the enterprise-level web application, I have a bunch of the puzzle pieces on the table and am still mentally putting them together. I don't know any developers and rely on the internet and my successes and failures to teach me the way. I have another project on github which is just a rearranged version of the Slim framework built with composer with slim extras/twig &amp; Eloquent, I called it MrSlim for lack of a better name, I'm using it on my personal dev machine as a foundation to make some learning projects with. https://github.com/Ron916/MrSlim I'd welcome some thoughts on this one as well from anyone who's got the time and inclination :P
Whenever I use if ($_GET['a'] == 'something) {} It always gives me an error if $_GET['a'] isn't set, for example, if I'm using a different $_GET to access a different part of the script, so I started using isset() as well. (2) I copied the questions into the top of my index.php file, and although I did read through his post, I kinda went at it as if I hadn't. I personally (likely due to inexperience) didn't see any need to separate those particular fields into tables. I could see it if there was extended information about an author, where I could store bio's and birth dates etc, but it seemed that since we're only working with the basic book info, that a single table would suffice? Thanks for your time! 
If you're talking about the gist, I apologize for molesting your eyes :( My PHPStorm trial ran out so I can't use the fancy code reformatter... I'm not even sure if Notepad++ is using 4 spaces (per PSR-1/2 spec?) or if it's using tabs. 
Sometimes MySQL takes a subquery and decides that it really needs to be [correlated](http://en.wikipedia.org/wiki/Correlated_subquery), which can get very abusive performance-wise. They query planner changes in 5.5 and 5.6 apparently fix a lot of this. We have a few Big Fat Queries of Doom that are architected in a specific way, just to work around broken query planning.
I think you just need to remove the semi colon in front of the directive enabling xDebug. If you search the php.ini and you can't find anything related to X debug then I think a quick Google search for WAMP xDebug should give you detailed instructions. 
stand by.
nope. I am either missing something obvious or just not used to jumping through hoops for a pretty simple task (debugging). For such a core function it should be easier. :/
I'm just a stickler for whitespace. 
I think the OP said he gives them a week to do the task but he told the guy it shouldn't take him more than 2 hours to accomplish. If the OP honestly thinks that, then he must not be a PHP developer. On top of that, the fact that 'no one' has passed that test (including the OP) shows me that the whole company probably has incompetent developers. If the guy doing the hiring can't even pass the test, and doesn't know why it's a crappy test, I probably wouldn't want to work there TBH.
Try Netbeans
If you have someone footing the bill for .NET or you don't mind spending money on software, just go back from where you came. The .NET stack is a 1,000,000 times better than php, especially if you're using a windows machine. After I switched from php to C# I have a hard time going back to a dynamicly weakly typed language.
I'm going to second this. It's far different from Php but once you get used to it it's a real treat to use.
Then you're stuck with some crappy Windows server... and ain't nobody got time for that noise.
The fact that you're even trying this after everyone decried it as a waste of time makes me smile. The fact that you're opening yourself up to criticism is even better. I would have looked at a more OO approach personally, but you're admittedly a newer developer so I'm just assuming that this is part of your skillset that you have yet to fully develop. The fact that you use PDO, forced emulated prepares off, turned exception mode on are good things. However you didn't set the character set in the DSN, you should always do this! Where are your database indexes? I don't see them. Where is your charset declaration in your database schema? Why are you not ~~implicitly~~ explicitly defining the engine to use? For small tables this stuff won't matter. For large ones, you're going to see a noticeable impact. Why is your database not properly normalized? This should definitely not be a single table. Learn about [cardinality](http://en.wikipedia.org/wiki/Cardinality_\(data_modeling\)). You have four pivotal pieces of information: a publisher, an author, a book, and a genre. A publisher *has many* books. A book *has one* publisher. An author *has many* books. A book *has many* authors. A book *has many* genres. This is deceptively more complicated than it seems when you break it down: * table books - unique book belongs to a single publisher, links publisher_id * table genres - each unique genre * table genre_relationships - a genre belongs to one or more books - links book_id, genre_id * table publishers - each unique publisher * table authors - each unique author * table author_relationships - a book is written by one or more authors - links author_id, book_id I would have given you extra points for using DOMDocument, but the fact that you're using an XML parser at all is a good thing. An argument could be made that JSON would be a better encoding for the information, but XML works. I like the fact that you have error handling on your mind, but I don't at all like how you error handle, it's somewhat pointless. If all you're going to do with the exception is echo the message, you may as well not catch the exception and let it halt execution. The backtrace is probably worth more to you from a debugging point of view since it indicates where the error occured and the execution path leading up to it. If you want a global exception handler for unhandled exceptions, that's fine, but [do it in the handler](http://php.net/manual/en/function.set-exception-handler.php). This is useful for when you want to do/display something user-friendly, but you want to log the unhandled exception backtrace at the same time. Only catch exceptions if you have some way of properly handling them. You're getting there, but you're still missing some arguably critical stuff. Keep working at it, and keep up with your current attitude - it'll take you a long way.
Your posts made me realize I need to read up more on floating point numbers. 
You would be amazed at the Linux stuff you can use in windows servers Edit: I take it a lot of people haven't worked on or have had to work with Windows servers for companies before...
It's a waste of time to folks who've done the footwork already I guess? Someone like me has a lot to prove still, and every down-vote is a kick in the shin, but that's how it goes. I have to admit that since I was working on a "tight schedule" I removed all the SQL you are referring to (charset/engine) because it was causing errors from the SQL side and I didn't give myself time to troubleshoot that part. Good job noticing :P Can I get extra points for using UNSIGNED integers for book year and ID? Error handling is something I'm not quite up to par with yet, I imagine custom error logging is a biggie in this area. Oh you know I did have "charset=utf8;" at the end of the dsn at one point too not sure why I took it out. This was good practice and all the feedback is making it even more valuable. Thank you.
It can be done very easily in codeigniter, it gives you a nice MVC pattern to build upon and with Active Record the queries you build are database agnostic. It fits perfectly for the job. I believe you use frameworks in a daily basis, so why not ask the developers problems they will actually face on the job instead of giving them so many constraints? It's somewhat the difference between school and a job. Even if you have a perfect GPA, it does not guarantee you will do a perfect job.
The coding tests comes after the callback, at least in my company. I don't think it's ridiculous. Nothing speaks better for you than your code. We use those small "task programs" in interviews, to ask questions. And not questions like "what is a class", but stuff like "why did you implement it that way?". It's not critizizing, it's more like checking if the applicant can explain what he did and show us his approach to the problem. This tests more the soft skills, than the hard skills. That happens normally at the regular interview.
The company i'm working for does not do any twitter like stuff :) It's usually a task from a different field, and nobody expects you to write a real framework. Stealing code from applicants is not only douchebaggery, but also very dumb. If you'd rather take the code from your applicants, than from your own staff, you have problems. 
Totally agree with you. I moved away from .NET and went to PHP and was completely lost without a debugger. After several years it has made me a much better programmer. var_dump() ,print_r() and die() handle everything i need now. At first i hated it but now it doesn't bother me at all. Then again i work in frameworks like Zend. I might take back what i just said if i was stuck in Wordpress code or something else equally as awful.
The big issue I have with .NET for web development is the slow edit-build-run loop. In PHP, you can quickly change code and refresh your browser to see the results immediately. In ASP.NET, you can't do that so you must rely on the debugger more. 
&gt; It's a waste of time to folks who've done the footwork already I guess? Someone like me has a lot to prove still, and every down-vote is a kick in the shin, but that's how it goes. It wasn't so much that it is or isn't a waste of time - you did it just for the sake of doing it. I don't write stuff for the sake of doing it so much anymore, but I remember what that was like. Some people write code all the time and never stop. Some people do it enough at work that they don't really want to do it at home too. For me, it's a bit of nostalgia when I see someone testing their limits by doing something just because you can. &gt;Can I get extra points for using UNSIGNED integers for book year and ID? unsigned int for the ID would make sense, but given the range for the year, I might have gone with an [unsigned smallint](http://dev.mysql.com/doc/refman/5.0/en/integer-types.html) or even a [year type](http://dev.mysql.com/doc/refman/5.0/en/year.html). Ultimately it doesn't make that much difference, except from the anal-optimization point of view. &gt;This was good practice and all the feedback is making it even more valuable. Thank you. No problem.
Doing this is very common in [UML](http://en.wikipedia.org/wiki/Unified_Modeling_Language). Only instead of just modeling the classes and method stubs, you also model the relationships. Some UML software will actually spit out a bunch of classes with empty methods and attribute declarations at the end too. Doing UML of course would be a bit of overkill for a project this small, but you could proceed with the same notion that you start with the classes which model your data, then you stub all the methods which allow that particular class to have specific responsibilities which relate to it.
You should grab 'easy xdebug' extension for chrome to ensure you're getting that side of it correct.
I've made the same observation as well. But its only apparent here in r/php compared to other subs like r/dotnet. 
/r/dotnet
PHPStorm + Xdebug will give you what you are after. Don't give up - get it working!
You are completely wrong
Okok I know I was downvoted for coming across as lazy for relying on an IDE to make sure my code is clean, I totally deserve that, but I don't make it a habit, I swear on the precious. I don't remember why, but I downloaded Netbeans some months ago and didn't like it. So on your recommendation I just tried it again, yeahhh it's definitely better than Notepadd++... I feel so, so ashamed to of not tried it again.
Would need to see some code. With this limited information I'm guessing it's likely waiting for input of some kind, or is locking while trying to write to something. Are you watching what is being written to the STDERR pipe?
Use NetBeans. It'll work straight up. I tried once with PHP Storm and could never get it to work. I don't think it does. Just use NetBeans, it works.
Interesting..
Append the xdebug dll file name to the path. This is a bug in their wizard, i'm about to file a bug report.. EDIT: Filed this bug in the XDebug issue tracker: http://bugs.xdebug.org/view.php?id=957
Yessir. A skeleton class is always a good way to go. Plotting out the class, if nothing else, makes you think in advance what you want to achieve. I've fallen into the excited-code-trap many times. Just want to write it and write it quickly and it ends up spaghetti style. When I take the time to write skeleton classes my code is much more modular and easier to test.
Each to their own. Whatever works for you is none of anybody elses business. I've been coding forever in a text editor (currently Sublime Text) and my boss, who has another 5 years of coding on me, recently switched from Textmate to PHPStorm. He has a lot of experience, has written a lot of code and now (for the first time since his Java days at least) is using an IDE.
Thanks for introducing Laravel to me. Is that a stable framework? or yet under development? What about the learing curve for a Yii and Codeigniter developer? Thank you friends.
I heart Sublime Text as an editor (so fast, great features, no bloat). Literally the only thing it's missing is debugger integration. That being said, it's not really designed to have a debugger plugged in. I'd love xdebug itself to have a built-in CLI, but I guess it won't happen. FWIW, I use PHPStorm for debugging and Sublime Text 2 for editing. I use SilverStripe and Drupal primarily, and I have no issues with PHPStorm and xdebug integration. I've never used the Sublime Text xdebug plugin, and if I ever find some free time, I'll try and hack on it if its close-but-not-quite-there, but I don't really think it's a good fit for Sublime Text.
I think I might have a crack at this too, no real reason to but after having dealt with heavy frameworks for so long, it'd be interesting to know how much native PHP I actually know these days. The whole 'use Prototype not jQuery' seems arbitrary (I see why it works for their business though), so if I end up doing it I'll look at using no frameworks at all. 
&gt; Why are you not implicitly defining the engine to use? I bet you meant "explicitly". ??
How about Lua with Nginx (or OpenResty). Or Go.
Agreed - 3hrs would be the upper limit while learning Prototype (haven't touched it myself in years). It does sound like something where OOP would suffer badly though - it's simple CRUD. Even I'd be tempted to go procedural with a switch statement as a router... You could shape that by making the test app have a requirement for long term use - you'd get more bites on stuff that assists maintenance. It's a straightforward task with well known properties. The catch is that you're being tested on various other practices. OOP, testing, customer knowledge (you're not a moron for asking questions to clarify the requirements but may be if you don't and just guess), etc. Not a bad test, but the time input needed will vary from person to person.
Hello again thanks for all the feedback it's been awesome! I just got done with a bunch of structure updates if anyone wants to check em out, I've updated the repo. Lots of empty methods still but ya'll can see where I'm headed. https://github.com/Ron916/McGlock Here's a link to the repo commit prior the big change above, if anyone is curious about the previous bundle of confusion: https://github.com/Ron916/McGlock/tree/cb19a5e3906a086dd41f0f7f4ffbb77027c99949
Yeah I just threw my code in front of 20k subscribers (and probably a lot of bots), it's pretty frightening, enough so for me to take my Github profile photo down before posting :P Thanks for your thoughts!
I can back this up with recent experience too, I tried using Eloquent the other day and while I got some of it going, it took a bit. Lots of tutorials are outdated for Laravel/Eloquent now because 4 just came out, Eloquent itself had enough changes to make any tutorials partially obsolete. I need to get to the point where I can open up a library and figure out what I need to do to make it work... I think I'm getting close
It's just as bad in /r/webdev
You can use SUM(1) as an equivalent for COUNT(*), not that you ever should though.
This is big issue for me too. 
I have done 1-4, will double check today.
That would be bold. I may try it.
Yeah, that makes perfect sense. It's a good idea to have someone do a little FizzBuzz at the interview. OP is requiring multiple hours of work just to get an interview though. Oddly enough I tried to get an interview at a company doing PHP years ago and I declined when they asked for something similar. Maybe it's something about the language- too many amateurs doing PHP?
i rewrote the script several times ... it seems to be working now transporting chessboard positions from gnuchess to inside a video game for processing by the internal script engine . i will post the script for others to make use of (extreemly basic) &lt;?php $descriptorspec = array( 0 =&gt; array("pipe", "r"), 1 =&gt; array("pipe", "w"), 2 =&gt; array("file", "/tmp/error-output.txt", "a") ); $cwd = '/tmp'; $process = proc_open('gnuchess', $descriptorspec, $pipes, $cwd); if (is_resource($process)) { //send a chess move and end of line char fwrite($pipes[0], 'e2e4'. PHP_EOL ) ; fwrite($pipes[0], 'exit') ; fclose($pipes[0]) ; echo stream_get_contents($pipes[1]); fclose($pipes[1]); $return_value = proc_close($process); echo "command returned $return_value\n"; } ?&gt;
Your company doesn't seem cool enough for me to try very hard. I think that doing a task during interview would help you a lot (at least in getting people in). It's not even an interesting problem to solve. The company I currently work for asked for a streaming XML parser that downloads files from FTP and deletes them after successful parsing. That's at least something I've never done before. Maybe your job offer ads aren't exciting enough?
By the way, you list: &gt;Did they use foreign keys? (Almost never) Is it your expectation that the sql creation code is written by hand, or do you let people use a designer that generates the code for them? Like MySQL Workbench. Also, Prototype for in-house use? I'd make it mandatory then. If they then also have never used jQuery, that'd be a dead cert no-go for me. I myself have never used Prototype, because of jQuery's popularity. But I'll be trying to make this assignment with Prototype, simply because it'll be different.
Very cool, quick, interesting and timed for extra adrenaline :)
In your code, it might be easier to approach it like this. if (empty($_GET['page'])) { //error out or die return; } //rest of the code with the assumption that page is set $page = (int) $_GET['page']; switch ($page) { //I prefer switches when you have a longish if / else chain case 1: //code break; case 2: //code break; case 3: default: //code break; }
Wouldn't it make more sense for it to return `null` instead of `false`? Seeing as the value is not actually set?
I bet you're right.
Maybe I am wrong but isn't this effectively an event loop. ReactPHP is very much the same solution, except it can work with libuv and libev. I cannot understand why I would use this over ReactPHP other then maybe some more built in libraries, like a built in Database which is reference as "Library" and FTP. XPSPL and ReactPHP both were first released in April 2012, so same maturity.
oh duh, I see what I did wrong on 7. So used to properly indented code...
Thanks for the tips! I just had the interview and I tried to use these suggestions.
Thanks for the response! They ended up mostly just asking me about my experience and asked me to write a couple mysql queries.
the name for this is typically 'rack application', like a rack of servers
You are correct this is an event loop but that only a part of what it really does. ReactPHP does provide similar functionality in terms of I/O but are on two separate levels in terms of how they are built and what they really can do. From my understanding React provides just Non-Blocking I/O, am I wrong?. XPSPL provides an entire event ecosystem, allowing you to perform Non-Blocking I/O operations but also much more complex operations such as interrupts, complex event processing, timers, cron jobs, FTP etc ... and although I have not seen benchmarks of ReactPHP, XPSPL runs at very very low microsecond timing ... almost nanosecond ... without the help of C level libraries. In terms of maturity XPSPL had its first public release on April 2011 .. not 2012 and React was first initially released in July of 2012 that is around 16 months of an age difference.
I don't agree. If you're writing anything even remotely complex having a debugger where you can step through the code, analyse variables and eval stuff is invaluable. I wrote a state machine for parsing a particular file format recently and it would have taken far longer without a decent debugger.
Is there threading in PHP i am unaware of? Forgot to mention that pthreads does exist but unfortunately this was only an experiment...
It's really, really nice to be able to play with values directly instead of waiting for a page load. Python's pdb is amazingly useful when combined with a local development server. The problem is that folks in php land aren't used to using REPLs.
There are plenty of strongly-typed languages other than c#.
I thought about that often. I think this is a problem really specific to PHP, yes. It is a downside of PHP being easy to learn, and being useful for the now "standard" task which is creating your own website. In addition to that, PHP 5 is still young. That's why sites like phptherightway.com are needed. Most people just never learned modern PHP. In addition to that, a lot of people have a totally wrong image about their own skills and the work you have to do as a software developer. The problem finding good developers does not completely focus on dev skills though, the real problem is the social component (believe it or not). There are a lot of people who cannot cope with critique and get quite aggressive, or are of the infamous species of "i can't" coders. Coders who say "i can't" often mean "i don't want", and lack the ability to give solid arguments about why they think they can't do a specific task. In short, they are more destructive than constructive and i don't want to work with destructive people. That doesn't mean i only like optimists, i like people which see problems as problems and not as godzilla'esque threats. Talking about sample code helps us / me to find out if the applicant does fulfill the mentioned criteria. And most talks actually turn out very fun and quite nice, if the people are the right ones. But you are right, the code sample doesn't have to be that huge to do this. It just has to cover everything which is important.
Just like php needs more MVC frameworks ... the global-scope functions are to simplify access to the processor and they are global because PHP namespaces suck. That said an entirely OOP interface is accesible if you prefer.
Perhaps I didn’t formulate my thoughts correctly. Having functions sitting in the global *namespace* is a design pattern. However, there is absolutely no effort done to minimize conflicts; none have a prefix of any kind. Seriously, those functions, among others, are defined: * after/before * clean * import * process * sig/signal You really think no other library would like to use those names ?
The old school way was to use something like [XAMPP](http://www.apachefriends.org/en/xampp-windows.html) or [MAMP](http://mamp.info/en/index.html) to get a PHP stack up and running. The new way is to install Virtualbox and Vagrant and configure a virtual machine to host the code. That lets you use the new cloud hosting services easier and you have a full web server on your desktop. [PuPHPet](https://puphpet.com/) has made the new way a **lot** easier than it used to be.
If you're getting back into PHP you should know that a lot has changed over the past couple of years. You're coming from rails, so you're used to using frameworks. There are plenty to choose from, I like Silex but can't claim to have tried them all. But you'll definitely want to use one. [Composer](http://getcomposer.org/) and [Packagist](https://packagist.org/) have finally given PHP the package manager that it deserves. This is the PHP equivalent of gems. [PHP: The Right Way](http://www.phptherightway.com/) has a lot of things that are hallmarks of high quality code. If you do things the right way I think you'll be surprised at how robust PHP is.
... wow. Keep on going, this should be interesting. Finish your procedural thing first. Keep building on that gist. The two hour guideline was intended for senior devs.
Add the php repo for your Linux distro to /etc/apt/sources.list || /etc/yum.repos.d, then: apt || yum install php ...or you could use the WebPI from Microsoft to install each version &amp; switch with IIS &amp; PHP Manager... or use XAMPP... the PHP installer also works...
When most everyone gets to report awesome results, there is no discussion going on about what doesn't work and why.
Everyone who has ever spoken about the interview process they helped design has the opinion that it's good for X, Y, and Z reasons. It's akin to everyone's baby being smarter than the average child. And ircmaxwell's work in the PHP community doesn't have a damned thing to do with their skill at hiring people. We may as well say he's awesome in bed because he's awesome in PHP. The conclusion doesn't follow the premise. 
You got me there. I'd much rather work with Apache on a linux server than work with IIS on some Windows machine. Just getting started in a position as a Java dev... so far I'm not a big fan of Tomcat, but I'm starting to warm up to it.
Zend Server.
 apt-get install apache2 apt-get install mysql-client mysql-server php5 php5-mysql /etc/init.d/apache2 restart OR yum -y install httpd php mysql mysql-server php-mysql
Personally I don't like running PHP on my local machine - running a webservice tends to bog the box down a bit when you're not developing. Also, higher end sites you tend to need to tweak settings so you end up with a bit of a frankenstein install that is harder to deploy. I think the best solution is something like [TurnKey](http://www.turnkeylinux.org/lampstack). When you spin up a new project, download the latest version of whatever your target is, and run the development server in a VM. If you have a really fat pipe, you can drop the image on dropbox, and sync to all your workstations. This way you can have multiple projects on the go at once in their own neat little package (without messing around with virtual hosts), deployment can be as simple as uploading a file, and you're not pointing at 127.0.0.1 which *can* allow some weird bugs to show up.
That's neat, but PHP only makes for sad pandas - Looks like Turnkey are doing something similar: http://www.turnkeylinux.org/blog/12.1-amd64-maintenance-release
To be honest, while I would have agreed with you at one point, with PHP these days such things are better handled by test-driven development, IMHO. If you don't write any code until you've first written a failing test for it, and do this in only small increments, the need for a debugger should be minimal. The unit testing framework itself becomes your main debugger, as you should be able to capture and make assertions about any meaningful value or operation that you might otherwise inspect in a debugger. As an added advantage, you now have a full suite of regression tests too.
I said he was well reasoned and informative, not that he was authoritative and had a good reputation. Stop putting points in my mouth that I've never made. If it matters to you, there are plenty of his opinions I've disagreed upon in the past despite his position in the community, but I happen to agree here. Take your strawmans of argument from authority elsewhere.
Randomly generated headlines that are crazy enough to be real.
I didn't say that debuggers don't have merit (the more tools the better) but they aren't strictly necessary. In PHP, you can take advantage of the stateless nature of the web to re-run code over and over and make modifications between runs to determine how code is running, analyze variables, and eval stuff. It's not the best solution for all problems but it is quite valuable. 
Twig is fantastic. There is also a javascript parser for it (twig.js) if you want to do client side processing using the same views.
Don't use smarty, it's ancient. Twig is much newer and has incorporated all the lessons learn from older template engines such as smarty. With regards to ORMs my personal preference is Doctrine2, however it definitely doesn't implement the active record pattern. Doctrine is undoubtedly the most powerful php orm but I will leave others to comment on suitable php active record implementations as I have little experience with them. Both Twig and Doctrine2 are php 5.3 compatible
Twig is the one. Smarty was shit even in it's heyday. Doctrine seems to be the ORM of choice in the PHP world. It is the only one I've used, but I have no issues with it. BTW Doctrine 1 and most of the other PHP ORMs are active record based, Doctrine 2 is a data mapper. They should all work fine on PHP 5.3.3.
https://puphpet.com/
Doctrine is a full ORM, and I'm not sure why anyone should be using pdo instead of an ORM these days.
This is stupid. Use xdebug and proper debugging. Saying having no debugger is a good thing is stupid.
This project is open source so feedback is welcome and will help the project grow into something more usable for the entire community, if you have suggestions on how it should be done than please file a bug report in Github. Quite honestly I choose those generic names because it made the library easier to use for me and it made it easier for everyone else to understand the library ... maybe it is a mishap in the design and I should append xpspl_* to all functions ... or throw them in the XPSPL namespace so they could be referenced as xpspl\* .... 
This is such a stupid comment. The solution is to get xdebug working, not to code without it.
Or... You can use both and do it properly.
PHP has an awesome Template engine which is called PHP. PHP has all features PHP has. Jokes aside: I would not use any template engine other than PHP itself, because the Vendor-lock-in factor of template engine is extremely high and the benefit gained by using one is comparably low. It also has nothing to do with "separation of concerns", a template in pure php is as clean as a template made with twig or smarty. And if somebody really wants he can do fuck up with either of the two. Additionally, you have to learn a new syntax and you are artificially locked by restrictions of the engine. Updating template engines is very difficult and switching template engines is essentially a complete rewrite of all your templates. Not to mention Major version updates + PHP updates which cause an engine update which may not be backwards compatible. They create infinite amounts of pain. I have made the worst experiences with Template engines, so i do not recommend to use one, neither i see it essential to use one at all. As for an ORM: Do you really really need one? If you say "yes, the ORM overhead is justified", than i would suggest using propel2. But be aware, that an ORM is a big thing and should be considered carefully. The database is and will be always your #1 bottleneck, and an ORM _can_ make that worse. (but not has to)
I don't know if I'm mistaken or not in this, but isn't the full Symfony2 framework compatible with PHP 5.3?. After all, it uses Doctrine2 as ORM and Twig as templating engine Maybe OP could take a look into it and save some time configuring the Template engine + ORM, and with Symfony s/he would also have the front controller configured, plus a **LOT** of other nice stuff.
&gt; On the plus side, your screening test is far more practical than codility.com tests - I had my confidence knocked 5 ways from sunday after running in to one of those. Holy crap, I just tried a few of those. Are they *all* focused on algorithms, mathematics, graph theory, etc? Whoever sent you there for *PHP* testing is insane. &gt; You've only had one candidate have published code samples? Out of curiosity, were those code samples good enough for you, or were you going to ask for more later? We've actually had three now, with two coming after I posted this. We've yet to receive the third, the second was a set of beginner's tutorial exercises and thus useless at the candidate's claimed senior level, and the first was acceptable. &gt; Are you open to remote? Maybe. I'm still trying to convince the boss that it's doable.
I'm 36
Heyo that gist was just a snapshot after the 2 hours, I've put some more time into it since then and it's hosted in the repo linked up top, I think it's much cleaner now. I've renamed it into "The McGlockenshire Enigma" just for fun too, hope you don't mind! It's become a challenge I've been needing for a while.
I know that Doctrine is a full ORM. There's a subset of it that is useful on its own, as well. As for why anyone should be using PDO (or even DBAL) ... in some environments, it's a better choice than an ORM. Not many, but some.
With such a seemingly arcane rule, I'd fear that the logic behind an ORM might not be fully compatible with your other requirements. But, I hope I'm wrong on that count. :)
Jony Ive..?
I use xdebug all the time, every day. It's worth using frequently and often. If you're using var_dump() all the time, you're wasting your time.
Nice to see some sanity here. PHP *is* a templating engine and quite often ORM is an antipattern (http://seldo.com/weblog/2011/08/11/orm_is_an_antipattern) or a quagmire (http://www.codinghorror.com/blog/2006/06/object-relational-mapping-is-the-vietnam-of-computer-science.html).
The irony here is the very first line is "We increased the legibility and concise style of our badge solution". The fuck they did. They made one of those badges a retinator. If Jony Ive ever made a design decision like that with the intention of making text "legible and concise" I'd be first in line to give him a color wheel and call him an idiot.
I made my experiences with propel. Sometimes it's absolutely awesome, sometimes it isn't. The latter cases are the cases you usually start writing queries directly because they just perform better / are more efficient without bothering the orm. The problem here is that, in this cases, you violate your system and circumvent the ORM, which is not the purpose of having an ORM in the first place. So in short: Yes i too may be tempted to call ORM an anti-pattern, too. I am reluctant to use too many abstractions, because abstractions seem to make things easier at first, but really make things more complex and take control from you. A lot of people use complex stuff in big systems very casually nowadays, which is a development i don't like to see. small rant here: Especially those "I'm new to PHP, which framework should i use?" stuff drives me crazy. It's just like "i just started with climbing, please tell me the cheapest flight route to mt. everest". Frameworks are complex system which even experienced devs often don't understand completely, don't use anything which you don't completely understand.
Since most of Symfony components make use of namespace, PHP 5.3 is more than compatible, it's a requirement (and 5.3.3 is the minimum version required by the composer file). So yes, Symfony might be a smart choice for an integrated solution of those components (or Silex+Twig, but that's about the same spirit). Plus, if OP's normal toolset is something like Rails, the tools and structure might be a bit more familiar than "raw" PHP.
This sub makes me feel like a broken record some days. Template engines that implement a DSL (twig, smarty) are a complete waste of time. Get a template engine that offers features, but directly supports PHP. There is absolutely nothing wrong with using the PHP template system, and features like caching, helpers, etc can be added via a template rendering class.
&gt; A lot of people use complex stuff in big systems very casually nowadays, which is a development i don't like to see. I think this is mainly because there's a competitive drive to get things out the door faster. Sure, you could invent your own framework, but that takes time that you could be using to impress the people throwing money at you. I completely agree with the lack of understanding though. If you're going to use a framework, you would be well served to know how it works. On the other hand, there's some debate about how much you really do need to know - the argument could be taken all the way to the php module level, or even the C libraries that those modules use. You need to think about a cutoff at some point. Most people simply aren't experts in *everything*, and there aren't enough days in the year to become intimately familiar with every library you use. I agree with the sentiment that the ridiculous number of "what framework should I use?" and "what's a good editor with syntax highlighting?" questions are irritating as hell. However, I find them irritating more because they're lowest common denominator posts. They don't start or end in any kind of interesting conversation, they just degenerate in to circle jerks where every novice with a keyboard feels the need to add their $0.02 because they can't participate in any meaningful discussion about writing software. /r/php is at its best when we're actually talking about PHP, not rehashing tool preference over and over. 
Googeling is an important tool for any developer. No, you can't work remotely. Then I might as well use someone in India for half the price :-)
This is why I'm loving Laravel 4. By choosing to use it you already have the vendor lock-in of Laravel so why not use the (very good) blade template engine that comes with it? It also gives you a choice of ORM or query builder, so if you notice a bottleneck you can just switch out the implementation.
I've never tried Twig, but I found this article which compares it with Smarty: http://umumble.com/blogs/php/249/ I would say Smarty's syntax seems better, has that changed since the article was written?
I used to agree with you until I used twig. It really is superior and makes more sense as a template engine. [Fabien Potencier puts it best](http://fabien.potencier.org/article/34/templating-engines-in-php). Having said all of this, I realise that I'm unlikely to change your mind. 
1. PHP is essentially a templating engine. [Enable short tags](http://stackoverflow.com/questions/2185320/how-to-enable-php-short-tags) and make use of the [alternative syntax for control structures](http://php.net/manual/en/control-structures.alternative-syntax.php) Making up my own lame templating language... let's compare: &lt;div&gt; {foreach: users as u} &lt;span&gt;{u.username}&lt;/span&gt; &lt;span&gt;{u.first} {u.last}&lt;/span&gt; {/foreach} &lt;/div&gt; Versus native PHP: &lt;div&gt; &lt;? foreach($users as $u):?&gt; &lt;span&gt;&lt;?= $u-&gt;username?&gt;&lt;/span&gt; &lt;span&gt;&lt;?= $u-&gt;first?&gt; &lt;?= $u-&gt;last?&gt;&lt;/span&gt; &lt;? endforeach?&gt; &lt;/div&gt; Is it really that more complicated? The advantages you gain by a) having direct access to the variables (should you need to toss them into a user-defined, or native function) and b) not wasting CPU cycles on parsing the template far oughtweigh the few characters you save with the former syntax. When I was a PHP beginner, I used to swear by using template engines... now I see them as backwards-thinking. The designers you're working with will hate you for 2 hours, then they will be over it. And they will have learned something valuable and can add PHP to "Things I Know But Suck At" column on their resumes. 2. I'm a CodeIgniter user, so I can only recommend DataMapper ORM. It kicks all the ass.
 foreach ($users as $user) { echo $user['name']; } if (empty($users)) { echo 'No users have been found'; }
I believe he meant the "else". 
Yeah thats basically what I do now. I just feel the foreach(){}else{} means cleaner code and better visibility. Sort of how the finally keyword was introduced, although you could easily do the same thing without it.
Thanks for the feedback :-)
[Twig](http://twig.sensiolabs.org/) is awesome. [Laravel](http://www.laravel.com)'s [Query Builder](http://laravel.com/docs/queries) &amp; [ORM](http://laravel.com/docs/eloquent) are awesome as well. I would advise you to use [Laravel](http://www.laravel.com/) + [TwigBridge](https://github.com/rcrowe/TwigBridge) for your project. It is what I use for all my PHP projects nowadays. Both are very well coded and documented. And performance-wise, they're really not bad either.
1. This isn't something which is particularly common. You'll find that this feature is lacking in most languages as well. 2. The syntax you're proposing won't make it more readable if it's being used in a template. This is what it should look like per de facto standard: &lt;?php foreach($users as $user): ?&gt; &lt;?= $user["name"] ?&gt; &lt;?php endforeach; ?&gt; &lt;?php if (empty($users)): ?&gt; No users have been found &lt;?php endif; ?&gt; This way you can more clearly see where the control structures start and end.
&gt; Holy crap, I just tried a few of those. Are they all focused on algorithms, mathematics, graph theory, etc? Whoever sent you there for PHP testing is insane. They seem to be. I had 3 questions in 90 minutes - was told I don't have to do all 3 - doing just 1 very well is better than doing 2-3 but not very well. However, you can't know what #2 and #3 are without 'submitting' #1 first, and you can't go back, so that didn't help. The company didn't do me the courtesy of emailing me back to let me know I failed, or what my scores were - even an automated email would have been fine. I know I didn't 'pass' them all. I got one right as far as I know - was pretty certain, but I don't know how fast (it also judges how fast your code runs). That was... #2. #1 was functioning, but I wasn't confident I understood the question 100%. #3... came close to finishing but ran out of time. Actually, it *worked* at first, but not with their sample data, because it was relying on floating point rounding behaviour which didn't seem to function the same in PHP as in some other languages (was truncating/rounding earlier than they expected). I wrote them what felt like a nasty email afterwards, indicating I figured I hadn't passed, but asked if the majority of their projects worked this way: ambiguous specs with no ability to ask anyone for clarification. In my almost 20 years of doing this, that's never been the case. Ambiguous specs? Sure. No ability to clarify from a stakeholder? Never. To be sure, the whole thing is 'test driven' in a sense, but they only give you generally *one* set of sample data, which doesn't really help all that much. Getting, say, 5 sets of sample data would help expose a lot more stuff (and is generally the 'agile' way - write test, make it fail, fix it, rerun, move on). re: my email - I apologized the next day, and the screener said "oh that's *nothing* - we get some real nasty replies about this - yours didn't even register as negative" (something to that effect). So, I've had my confidence knocked back a bit, but every colleague I've shown this to has said "that's crazy". One said it was crazy, but he did one of the tests OK - passed, not a perfect score, but passed, in about 20 minutes.
I'm not sure I understand the problem, so let me just write this up as I understand it and tell me what part I'm not understanding: 1. Customer sends SMS at 20:50 Monday 1. Program looks up whether that time is within the work time: It is 1. Program then looks up whether the parking period would end during the work time: It doesn't 1. Program calculates how much time is used to reach the end of the end of the current work period, then finds the next period and tacks on the rest of the parking time to the beginning of that work period. Or were you just asking whether you should use DATETIME or TIME?
Some suggestions: * You need to have written examples/documentation - a video tutorial isn't so nice to understand the concept of it * why is the example index.php just plain html.. show how to access variables, create urls and so on * when it is the fastest, you have to proof it * config: SITE_URL I think you can get this from $_SERVER * why do you need a database for the mvc pattern? * follow the php-standards like uppercase class names * why just one model per controller? The more I look inside it, the more I think this post is more about you learning to program.
Thank you I discovered pthreads, which seems to me the most interesting solution (multi-platform, true threading, simple and practical API, …). A bit of syntax highlighting in the article would be welcome though
I believe this stuff has already been brought up in the internals mailing list. I personally would love to see this, but adding new language feature in PHP is close to the most difficult thing in the world right now. A big part of the php devs are reluctant to this kind of stuff. Why fix what's not broken right?
&gt; World's Fastest PHP MVC System ARE YOU KIDDING ME? Get out of your cave man! What kind of statement is that. Just http://phalconphp.com/ for example... I'm all for open source projects, constructive criticism and all, but seriously.
Here is one more example: If a user sends an SMS at Saturday, 13:50, the SMS should be valid until 07:50, Monday, because Sunday isn't a "work day". SMS is valid for one hour, during the work days and work times.
Haven't had one of these claims in a while, should be fun. :)
User can define our SITE_URL. Database? Because I think everyone will love using PDO. There is no just one model per controller
++redbeanphp
Can't you just use datetime to add the hour, make a check to make sure it is not outside the your configured times. If it is find out the next day with configured times and put the remaining time on that day, your vehicle registration would have start_datetime and end_datetime. 
When working with 6k+ lines of mashed procedural PHP &amp; HTML every day, Xdebug is a godsend.
And the fact they both work so well together makes working with databases a breeze. I actually discover new features every week. The last one was how well the case of "multiple databases for a single project" is handled in Eloquent...Great tools :)
I don't see why there is so much hate against ORM. Yes sometimes is anti-pattern and you can be better off, but if correctly implemented (in MVC sense) you simply avoid those instances and create native custom queries that fit your pattern and that you would do anyway if you are not using ORMs. Basically you use best of two worlds. I never use ORM for complex selects and what nots for all other simple stuff ORM is a saver; 
i'll try it, and get back to you, thanks =)
While ya'll are still here :) For my next project, I want to make a composer or framework service, hoping for suggestions. Here's my list of wants: * User accounts * User access levels * Customer database and some related tables built off the customer tables. * 100% RESTful type API service using JSON? * JS/JQuery front end (utilizing the API) to make it pretty and user-friendly. I think I explained that all right. Anyone want to give me suggestions on what tools I should use? (framework, composer packages, etc).
Is Laravel 4 5.3.3 compliant? And is there an advantage to swapping Blade for Twig?
I'm sorry, I didn't understand you, that piece of code I have, already... I'll show you how it's done currently: &lt;?php include("db_config.php"); mysql_query("SET NAMES 'utf8'"); $username = $_GET['username']; $password = $_GET['password']; $phone = $_GET['phone']; $text = $_GET['text']; $msgid = $_GET['msgid']; $vazi_od = date('Y-m-d H:i:s'); $vazi_do = date('Y-m-d H:i:s', strtotime('+1 hour')); $nadoveziqry = ("SELECT `reg_oznaka`, `vazi_od` AS `vaziod`, `vazi_do` AS `vazido` FROM `sms` WHERE `reg_oznaka` = '$text' AND `zona` = '1' AND NOW() &lt; `vazi_do` UNION SELECT `reg_oznaka`, `vazi_od` AS `vaziod`, `vazi_do` AS `vazido` FROM `papirne_karte` WHERE `reg_oznaka` IN ('$text') AND `zona` = '1' AND NOW() &lt; `vazi_do` UNION SELECT `reg_oznaka`, `vazi_od` AS `vaziod`, `vazi_do` AS `vazido` FROM `trafika_karte` WHERE `reg_oznaka` IN ('$text') AND `zona` = '1' AND NOW() &lt; `vazi_do` ORDER BY `vazido` DESC LIMIT 1"); $nadovezi = mysql_query($nadoveziqry); - this is the check if vehicle already has payments if(mysql_num_rows($nadovezi)== 0){ - if it doesn't $sms = mysql_query("INSERT INTO `sms`(`id`, `reg_oznaka`, `zona`, `vazi_od`, `vazi_do`, `broj`, `cena`, `ts`, `msgid`, `type`) VALUES (NULL,'$text','1','$vazi_od','$vazi_do','$phone', '45.00', NULL,'$msgid', 'zeleno')"); $id = mysql_insert_id(); $vrati = mysql_query("SELECT `id`, `reg_oznaka`, `zona`, Date_Format(`vazi_do`,'%H:%i') AS `vazidodat`, Date_Format(`vazi_do`,'%d.%m.%Y') AS `datum` FROM `sms` WHERE `id` = '$id'"); while ($row = mysql_fetch_assoc($vrati)){ $regsms = $row['reg_oznaka']; $vazidosms = $row['vazidodat']; $datumsms = $row['datum']; $brojkartesms = $row['id']; } } else{ - if it does while ($row = mysql_fetch_assoc($nadovezi)){ $vaziodnovo = $row['vazido']; $timestamp = strtotime($vaziodnovo) + 60*60; $vazidonovo = date('Y-m-d H:i:s', $timestamp); $sms2 = mysql_query("INSERT INTO `sms`(`id`, `reg_oznaka`, `zona`, `vazi_od`, `vazi_do`, `broj`, `cena`, `ts`, `msgid`, `type`) VALUES (NULL,'$text','1','$vaziodnovo','$vazidonovo','$phone','45.00', NULL,'$msgid', 'zeleno')"); $idn = mysql_insert_id(); $vrati2 = mysql_query("SELECT `id`, `reg_oznaka`, `zona`, Date_Format(`vazi_do`,'%H:%i') AS `vazidodat`, Date_Format(`vazi_do`,'%d.%m.%Y') AS `datum` FROM `sms` WHERE `id` = '$idn'"); while ($row2 = mysql_fetch_assoc($vrati2)){ $regsms2 = $row2['reg_oznaka']; $vazidosms2 = $row2['vazidodat']; $datumsms2 = $row2['datum']; $brojkartesms2 = $row2['id']; } } } ?&gt;
Having the site URL in some form of configuration is useful when console scripts come into the fray. At that point in time, a lot of the $_SERVER variables will no longer be available.
The fact that some people think it's not broken is what's broken...
Woops! Should have mentioned that it's a windows machine.
I'm fairly certain almost every ORM developer will tell you to use raw SQL when it makes sense. You're not supposed to rely 100% on the ORM, it's just a tool to make common SQL a little easier.
ah I see, we're going to pretend your response had nothing to do with his activity in the PHP community. Great!
Thanks for the reply.
Paste into pastebin or something similar, you have many syntax issues so I can't reformat the code nicely. Also [mysql_query is depreciated](http://php.net/manual/en/function.mysql-query.php) and you are not validating any input and are vulnerable to SQL injection. To be honest I think you have bitten off more than you can chew and you should learn modern PHP industry standards before agreeing to work like this, the system has to be good quality and there might be an off the shelf solution to get you by for now.
java :)
I use Nginx 1.4 and PHP 5.5 myself, but [Winginx](http://winginx.com/) is an easy option, as is [Uniform Server](http://www.uniformserver.com/). Both offer a portable all-in-one server/php/db installation; combining this with SublimeText or Netbeans makes for an easy setup for PHP dev.
I have been using [PHP Active Record](http://www.phpactiverecord.org/) and it works really well, downside is it hasn't been updated in 3 years.
Better explained by Robert C Martin (Uncle Bob) here: http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html
There are other ways within the existent syntax to achieve this exact same thing as other have pointed out, why complicate things with more syntax when there is no performance related advantages?
Templating engine: none, PHP is great enough templating engine, lookup PHP shorthand notation so you don't have curly brackets all throughout the templates. Doctrine is my favorite ORM, I also use ActiveRecord but I find doctrine to be a little more intuitive.
 if ($users) foreach ($users as $user) { echo $user['name']; } else { echo 'No users have been found'; }
Fabien is right on a lot of things, he isn't right about this. Not even remotely. He makes points that are flat out *incorrect*. &gt;And a template language is something that helps you to write templates that respects this separation of concerns. Separation of concerns is a *programmer's responsibility*. I mean seriously, if you have to rely on a crutch like twig to keep your presentation and business concerns separate to the point where you have to neuter the language, you have *bigger problems*. &gt;A template language should find a good balance between giving enough features to ease implementing the presentation logic, and restricting the advanced features to avoid the business logic to cripple your templates. Twig doesn't actually make presentation logic easier in any appreciable way. You may type slightly less in some situations but doesn't necessarily make something easier to understand or easier to read. &gt;Why do people still think PHP is a templating engine? Gee Fabien, probably because it is part templating language and has been since the very beginning. &gt;And as a matter of fact, PHP doesn't support many features modern template languages should have nowadays. What utter tripe. He's saying PHP doesn't support modern template engine features, but twig is **written in PHP**. There is no feature of modern template engines which can't be had in a PHP template. &gt;The PHP language is verbose. You need no less than 14 characters just to output a simple variable (and no, using the more compact &lt;?= shortcut is not an option) Yes, it's a bit verbose. That isn't an issue, especially when the alternative means you output something that is far less readable and requires you to learn an entirely new language. And what? &lt;?= is not an option? Is he on glue? Not only is it an option, the newest versions of PHP make it so you can't turn it off. What's that you say? What about older PHP versions? Every webserver worth noting supports .htaccess now. You can force short_tags on in there. It's \[*template inheritance*\] elegant, easy to understand, and really powerful. It's so powerful that many template engines now support this feature out of the box. Template inheritance can be implemented directly in php. The only way template inheritance differs from the more traditional method of inclusion is *where the inclusion is defined*. &gt;&lt;?php echo htmlspecialchars($var, ENT_QUOTES, 'UTF-8') ?&gt; &gt; &gt;Of course, you can create your own function to make it shorter, but that's not my point: &gt;&lt;?php echo e($var) ?&gt; Yes fabien, that **is** your point. And it's the only point that remains consistently valid in any of your arguments. &gt;For me, security should be enabled by default This was the attitude that brought us magic_quotes_gpc, and magic_quotes_runtime. It didn't work then, it doesn't work now. &gt;Of course, I'm well aware of the automatic output escaping problems. You still need to take care of escaping variables in JavaScript tags correctly, but that's much easier to remember than just having to escape everything by hand. No Fabien, it's much better to escape when you need to, because there will be more times when you *don't* want to escape as opposed to when you *do* want to escape. Contrary to popular belief, magic_quotes_gpc could have been fixed so that it didn't impart a false sense of security. However it would still wind up causing more problems than it solves. He then goes on to benchmark template engines, but at no point does he even bother to try to benchmark against PHP templates itself! What hypocrisy. He's saying "template rendering speed matters", but he's not willing to put twig up against an engine which would certainly beat the pants off it. I wrote my comments to this article as I was reading the article, and I have steadily lost any vestige of respect for this man on this subject. His arguments are largely preference driven, and mostly untrue *except* in the context of his preference. People need to **stop** hanging off of Fabien's words like they're gospel. They really aren't. Yes, Symphony 2 has come a long way, and is a mature framework that is worth using. However, that is largely because of all the other people contributing who saw what an utter piece of dogshit symphony 1 was. Attitudes outside of Fabien's little world forced him to adapt or die.
It's only good in templating engine.
Don't use PHP 5.3.3 For one 5.3 is being deprecated. Second, all and only the servers we have running 5.3.3 (due to CentOS's repo's) were rooted a couple weeks ago. Luckily the data wasn't too important.
If you are using Codeigniter I recommend http://datamapper.wanwizard.eu/ It is a nice ORM that uses active record, despite its name.
i agree, his points are fixable in php in minutes. even template inheritance can be solved with includes, ive been doing it for years.
VM's all the way. PuPHPet is awesome for getting started. I'm more fond of Chef personally, but PuPHPet will help you get up and running in no time.
Although I'm inclined to agree that it's quite a challenge, I would do my best to write some decent code for submission. I don't think working under pressure in an interview would be very pleasant though, they are stressful enough! I was asked to complete the following test for a PHP job once: Write a PHP program that generates an XML file containing every 30th of June since the Unix Epoch, at 1pm GMT, similar to the one attached. &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;timestamps&gt; &lt;timestamp time="1246406400" text="2009-06-30 13:00:00" /&gt; &lt;/timestamps&gt; The program must also parse the generated XML file and generate a second XML file sorted by timestamp in descending order, excluding years that are prime numbers. The timestamps generated should be at 1pm PST. We must be able to run these steps separately. Remember, you need to solve the problem but also show us your knowledge of professional PHP coding and OOP. The code must be written to production standard - the kind of thing you'd expect from anyone you work with. And it has to run first time! http://www.3ev.com/journal/#/3ev-life/coding-test/ I worked on it in a git repository and sent them a github link, hoping to score some extra points. When I went for a face to face interview they did not seem very interested and I never even got to talk with the senior dev about the test project. https://github.com/gezpage/XMLTest I was pretty gutted and after the effort I made I thought they could have had the decency to talk to me about it. 
@SkepticalMartian No reason to be abusively! We are developers and not designers! We know that we need help with design, that's why we have this job description running! http://versioneye.wordpress.com/2013/07/05/versioneye-is-looking-for-an-ux-design-expert/ If you think you can do the dependency badges better, than go for it. I will even pay you for your work!
Man I love Germans. Good cars, good beer, and *common, practical, sense*.
Wow, the list is exhaustive. I'll hit the highlights. * dev environments are portable. This means if you want to switch machines, you copy the VM * dev environments can be configured to mirror production. This means that there are no surprises when you go to deploy to live. You've already installed the exact same libraries and versions of software in your VM that exist on your production box. * you can have multiple dev environments. This means that you can literally have an environment for each individual project if you want. Different project requirements and dependencies don't clobber each other. * you can simulate multiple systems which need to talk to each other, even if they're radically different. Have a website that talks to an auth box, but the auth box is configured differently? No problem. Run more than one VM and you can simulate whole networks. * your new devs have zero setup time. This means that they just get a copy of the VM you're using, and it's already preconfigured to just work. * directory mirroring means you don't have to give up your tools. This means that even if you use windows, it doesn't mean you have to give up your windows based editors which have no linux ports. Vagrant can synchronize a directory which is sitting outside of the VM so that it is available inside the VM making it easy to edit and update files. There are many more advantages, but this should give you an idea of the power we're talking about here.
You didn't read the OP did you? Its a strict legal requirement due to a contract that was signed without my input. This we cant change the version of PHP.. because GoDaddy (Thier host) is refusing to upgrade the PHP version anyway.
&gt; Laravel was my first choice but it doesn't work on the PHP Version we are contractually obligated to use (5.3.3) (Not my idea!) 
"custom, savable report from tables" could mean a lot of different things. It could mean graphs, it could mean a stylesheet, it could mean a PDF with numbers randomly injected between marketroid buzzwords. You need to be more specific.
COUNT ... GROUP BY I don't really trust DISTINCT for a general reporting query on multiple fields.
&gt; ... could mean a lot of different things. By definition, reporting engines are typically capable of being a lot of "different things". That's kind of the point. ;) One admin may want a report of his users who have logged in over a specific time frame. Another user may want a report of purchase history for his users. Another may want to calculate the air-speed velocity of all unladen swallows in his geographic zone. We do have some of these reports built in, but we currently have over 70 admins in our system (and growing) and we don't have the time or resources to custom build every conceivable report they would all want. We're looking for something that would allow them (within reason) to build their own reports, save them, and share them with other admins. I have read a lot of good things about Reportico (http://sourceforge.net/projects/reportico) and am currently researching it.
That's great! I was just reading about this today. Found "stuff" that wasn't too helpful.
ahh, okay. Thanks!
"A great Drupal developer" Lol ok
If a lot of data is moving around in the company it might be worth being familiar with the core concepts of nosql which is the most fashionable approach for handling "Big Data": http://vimeo.com/66052102 Perhaps a look at how to deal with high load/high concurrency systems with respect to PHP - object caching (redis, memcache, apc) , opcode caching (apc, php 5.5 cache), reverse proxy caching (varnish, squid), queuing (redis, gearman, rabbitmq).
More like "World's Smallest PHP MVC System"... Looks like a beginner-project? 
We're not opposed to a reporting engine that sits to the side of our application and responds to API requests, but our first choice would be something we can integrate more tightly. I'll definitely check this out, though.
Another model you may want to consider is distributed processing to achieve your goal. It breaks the process up into finite components that can be a little easier to manage, track, log, scale, and recover. The gist of it is that you have a client application that needs some work done; this can be a user facing site, a cron that runs a script, a web service end point, etc. the client submits jobs to a queue, and that queue feeds a number of workers that do the work described in the job, and that's it. The really nice thing about using a distributed model like this is the ability to integrate pretty much anything anywhere along the line. Your PHP workers aren't cutting it? Ask a friend to write you a worker in Java and nothing else needs to change on the line. Want to start inserting jobs from another site or some other data source? No problem, just insert those jobs into the queue to be worked. This model also scales exceedingly well. If you notice jobs sitting in the queue for too long just add more workers. The client can submit jobs asynchronously and then poll another system for updates; decoupling client from worker like this reduces lengthy load times for users and gives them a more responsive experience as well. Check out Gearman, it's one of my favorite tools for this kind of work, and there's also Beanstalkd and a few others you can find.
I agree, this is a much better model for tackling concurrency in PHP. Pthreads should be the last desperate choice (see my comment in this thread for more info).
Well, I work on a project where we have to gather data from two MySQL databases. I knew Laravel could work with more than 1 connection, but had never looked into it, since it's not a very common use-case (at least for me). Sure enough, it can be done, and sure enough, it's easy to do : 1. Declare the 2 DBs hosts, names, users and passwords. Each connections has an alias 2. Add "public $connection = '&lt;your-connection-alias&gt;';" to your model. Done and works great. This doesn't mean it's a good idea to have more than 1 database...but at least it's not a mess anymore to handle this use-case.
Twig has an amazing documentation, has block inheritance features (pure gold) and macros. On top of that, it is easy to extend with your own filters and functions. I was using Twig before I started using Laravel. And when I did, discovering Blade's syntax made me want to puke several times. Plus my editor didn't have syntax colouring for Blade, and at this time I didn't feel like fixing that, out of pure lazyness. So since I had tons of template parts I could reuse (macros mostly), and I don't like to puke, I looked for a Laravel4 adapter for Twig. Turns out there are several, and [TwigBridge](https://github.com/rcrowe/TwigBridge) is the one I like best.
Damn. can't you update? Laravel needs 5.3.7, it's 4 minor versions! 
I was recently asked, in a similar interview, how I would speed up database transactions and how I would identify bottlenecks and monitor performance. Mostly situational stuff, like, how would you react if this happens? What is your thought process?
What I do is produce all of the report work in json using php. The I develop the views separate. The view could be excel, HTML, XML, whatever. Makes life fairly simple. We have about 2k reports on site using this method. The benefit is that json is flexible enough to support whatever you decide to move to in the future. Plus we got the users out of the database. They are stuck using our json datasources. Either json or XML can be used with most anything including birt. 
I agree with you 100% on templating languages. Here is an analogy I love using: I always thought it was like stacking a car on top of another car, and claiming it somehow makes the car prettier. The car sitting above the the other car is of course less functional, it requires the car underneath to do the actual moving around. Claiming the car on top is fast, which it's wheels can never touch the ground, it's using the car beneath it to work the speed, but how can it be fast if it carries the weight of the other car? Claiming the car on top is better looking... maybe it is, by itself, but after you step back and look at what the entire thing is doing, it's an ugly stack of two cars. Also who cares how pretty it looks if it gets you to point A to point B in a efficient manner? You have to learn how to drive two different cars at the same time. You still need to jump down to the bottom car to actually move, or to do anything you can't do on the top car... more efficient if you just stayed in the bottom car.
Pthreads sounds promising for simple task multitasking. Definitely can't be anything too complex, since its ability to share resources is non-existent. But at version 0.4 beta, hard to include it on anything important. But looks like fun to experiment with. 
&gt; a 1,000,000 times better than php That may be, but this is more for learning. I do .net for money and the two jobs in my area are either .net or php. 
Wow, sounds very intriguing. I'll definitely look into this.
Codeignitor, Laravel, Zend Framework, and even the WP API to some degree are frameworks roughly equivalent to .Net, Rails, Django, etc. They are built on top of their respective languages but are not necessarily a good intro to the language and, in many ways, are their own animal. If you're wanting to understand PHP faster, I'd recommend holding off on the framework till you feel a little more at home in vanilla PHP. It may seem frustratingly slow, but PHP by itself is pretty user-friendly and can be a quick learn. I would recommend using PDO for your database calls cause it can save you some time and protect your db. I'm inclined to feel that way about things like Vagrant as well; they are great tools for deployment and a consistent workflow, but they solve a problem you don't yet know you have. I think the folks below covered that pretty well. Try a vanilla install of Apache/PHP/MySQL first, just to learn, and graduate to better tools, frameworks and packages as you start to actually need them. You'll learn the basics way faster and then you'll only need to learn your framework.
This is a very broad question, but hopefully people can throw you some ideas instead of downvoting you. A good project is a project that you will stick with. For starters, you could build a website that allows for you to teach yourself some basic PHP functionality such as array sorting, mailing, image uploading and storage, basic database integration using something like MySQL, the basics of password encryption and storage, learn the basics of Object Oriented Programming with PHP, etc. Perhaps a very bare-bones "My Profile" type of website. The more you toy around with stuff, the more concepts you learn, and the more ideas you'll come up with. Good luck!
That seems like a good place to start, thanks for being a nice guy about it.
If it's not something that has some relevance to you, it won't be a very good learning project. I could say design a blog, or design a guestbook, or some other generic thing, but in the end only you know what is important to you. I'll leave [this here](http://phptherightway.com) though, as it contains some important things you'll need to know.
* Symfony 2 * Doctrine 2 * Twig These three here are a trifecta, honestly possibly best in web development. Doctrine 2 is not activerecord it's datamapper, it's better, once you use you will see why. There is a learning curve here but these tool are best in show.
What about it? You don't need a DSL to do that. EDIT: on closer inspection, it's obvious this is a troll account.
Not trolling now bro, I am probs a better developer than you.
Why not the [McGlockenshire challenge](http://www.reddit.com/r/PHP/comments/1hjnb9/trying_to_hire_lamp_devs_and_theyre_all_flaking/)? The best part is if you win you can get hired by McGlockenshire, which may or may not be a good thing. To be perfectly honest (b/c I was being sarcastic before) I would suggest the McGlockenshire challenge *but* do it *with* third party libraries. Third party libraries (good ones anyway) will teach how to do things best in show, in short you will learn more doing things the way people who have far more experience than you think you should do things. Personally I am a Symfony2 guy but that is maybe over your head so try the challenge in Silex or Laravel and use Doctrine because you should learn datamapper. Here are your resources: * http://php.net/manual/en/getting-started.php * http://www.phptherightway.com/ * http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1 * http://silex.sensiolabs.org/ * http://docs.doctrine-project.org/en/latest/index.html Now you are ready for the challenge, bro.
And the ability to *pick* what libraries should go into a project. Need an http client? Should you use Guzzle or Buzz? There's something to be said about a candidate who can look at them and make the right decision for your application.
I agree that if you're using var_dump() all the time you're wasting your time. But if you're using xdebug all the time every day you're also wasting a lot of time. I can't imagine why anyone would need a debugger so much. Even in .NET, an exception pops me in the debugger but rarely do I do more than stop debugging, edit the code, and restart. 
That's a very nice resource, and some good advice. Thanks.
Since I'm the one that made the response, I can *definitively* tell you that it had *nothing* to do with reputation. I agreed with it purely on an intellectual level.
I didn't say that specifically, but I definitely think that any software shop needs to have a good master at the ring to say *NO* to new code \*as well as\* new dependencies on libraries. Assuming you're hiring a "junior" developer, I wouldn't expect them to be making those decisions authoratively straight away, but that could also depend on the experience you're hiring them with, etc. 
I wouldn't trust a web developer to know how to design a database no more than I'd trust a DBA to build a website. Just my 2 cents.
anyone else have other accurate methods of getting ip info?
Learn frameworks that may be used in your career and read open source php code and possibly contribute to an open source project.
Contribute to open source projects. Learn to build unit testing for those projects. Cannot recommend enough. Maybe learn a CMS system like Drupal if it'd help? Using a framework is good but not as good as understanding how Symfony works in the backend.
Reduce your memory limit to 16kb and try to create more and more complex applications. This limit will force you to acknowledge performance, which is often the last thing a web dev ~~concerns~~ considers.
Pick a framework, I prefer Symfony2, and work through every chapter in the documentation writing out all code. Also, learn an ORM (like Propel, Eloquent or Doctrine). Nothing beats practice, and while you won't memorize everything you go over in the documentation, you'll hopefully remember that something is possible, and know where to look. Also, check meetup.com for PHP/development meetups in your area. I go to as many as I can for any language. Next, host your own meetup and spend 45 minutes going over something you learned. You'll teach someone else, and probably learn something in the process.
you mean 16mb right? also.. usually memory and performance are a tradeoff. 
Additionally, check out lynda.com (and others). I watch tutorials while I'm at the gym doing cardio, and while I don't remember how to build the things they go over, you retain some knowledge. A couple anecdotes: * I was trained at SensioLabs in Paris for Symfony2 in a 4 day course. Our instructor constantly had to look stuff up. It made me realize very few people memorize and know everything. As long as you know where to look. I couldn't start a new project from scratch without docs or code completion. Some say that's bad, but at the end of the day, I realize that I have skills in a variety of different areas, including networking, administration, project management, sandwich making and making love. You can't be a master at everything though. Since starting my real career only 3 years ago or so, I'm already a senior dev leading a team of 5. I started professional development in 1999 however, but didn't get how these things clicked until recently. I sometimes think I'm a fraud, but then I remember this, * My dad always tells me about a German saying: 'everybody boils water the same way'. When you start a new job, don't be afraid that you will be exposed as being incompetent or anything. Be humble, and realize everybody else does things the same as you. Sorry for the wall of text, but I just went through your conundrum within the past 3 years as well. I've got lots more to say, but I've had some beer, so I'll wait till someone asks.
What's an LMS?
A debugger is just a tool. Saying you always need any tool is, in fact, stupid. Use them only when appropriate (which, in the case of a debugger in PHP, turns out to be very seldom bordering on never, personally).
Learning Management System (e.g Moodle)
its overkill and overall a sloppy way to attract talent. i get nagged at least twice a day by recruiters for $40-60/hr jobs, and here you are presenting them with a 'pop quiz' that should take around 2-4 hours if they take it seriously. in my eyes- i would rather sleep in and never respond to your emails, because you don't value my time... or you don't value the $120-$240 im burning taking your quiz for a job i might not even get. have you not prequalified your applicants at all by this point? 
&gt; This limit will force you to acknowledge performance, which is often the last thing a web dev concerns considers. And for good reason. This is absolutely useless real-life advice.
A lot of people are arguing frameworks and contributing to open source projects. When I was still doing raw SQL queries and includes spread around everywhere, I found full-stack frameworks really hard to wrap my head around, and correctly thought that I wasn't at the level to contribute to important open source projects yet. Instead, I'd argue first learning a micro-framework like Slim, which provides really useful features but also lets you write fairly normal PHP. At this point you should also be making an effort to use PDO, make sure your source files are neatly separated and so on. You should also try to learn to use Composer for your dependency management - it's really useful. As time goes on you can try to add ORM libraries such as Doctrine or Eloquent to replace PDO. At this point you will have a good grasp of how MVC actually works and you're ready to move on to a full-stack framework such as Laravel, which will basically change the way you do everything. Another thing in high demand in today's market is theme and plugin development. Being capable of writing the code for a Wordpress theme can be enough to get you a job many places, and learning how to do it is actually pretty easy, but I'd recommend you not get stuck doing this all your career.
Well, for me a ORM is a design choice, not a tool. If i design an application, i choose which components i use and they become standard. If i choose to use an ORM, all database related stuff is handled by the ORM. It's not about writing queries on your own, most ORMs allow you to do that seemlessly. It's about cases where you have to use arrays and plain sql because the workflow of your orm is too slow or too inefficient for a case. That's a hack then.
Here is what I do. I read as much as possible online. I read hacker news, reddit.com/r/php, and a variety of other sites which talk about general concepts in web development. I come accross code-bases which I find to be intriguing and I star or fork them on my github account so later on I can come back to them. This is just loading me up with information for later on. Second, I would look into composer, how it does things, and if you can find them, all the automated deployment processes for php apps. Fabian(Symfony) guy has written or been behind a bunch of amazing libraries. Learn them. Read about them, play with them. Look into code using queueing systems, this helps with scalability. Look into rabbitMQ, activeMQ, gearman. Look into websockets w/ php. look into silex framework, symfony2, look into everything. Look at the libraries hosted on packagist.com Play with phalcon C extension for PHP5, the compiled MVC framework. Just keep learning. Keep reading. Always stay humble and learn more. Look at all the new features from php 5.2, 5.3, 5.4, 5.5, play with them, implement them. Learn about all your array_* methods, especially array_(walk, map, reduce, flip) and more. Learn about how to use regex w/ preg_match, preg_replace. The list goes on, it's up to you to find out what else to fill it with. Keep reading peoples code and it will help you do the rest.
I've never really quite understood Vagrant. I get that it saves a bit of time setting up the server but doesn't a lot of that time get taken up by writing the config file? I set up servers manually all the time and I actually prefer to do it myself so I know exactly what I've done. Is it for people who aren't intrepid Linux users?
For the ORM, I'd not use anything that implements active record, I'm much more satisfied with the ones following the data mapper pattern, as it let's you separate your models from the orm completely. I have a [few articles about Doctrine2](http://ihaveabackup.net/tag/doctrine2/), take a look if you are interested (Doctrine2 follows data mapper).
I collected some information a while ago in a post: [a more recent reading list](http://www.reddit.com/r/PHP/comments/1fc6xf/a_more_recent_php_reading_list/) Wrt frameworks, I'd say let them come naturally, I'm not always a big fan of heavy-weight (our way or the highway) frameworks. I'm happier with lighter, more flexible libraries with a more "take only what you need" approach. It also gives me the (perhaps false) idea that I'm never locked into a single framework. Lately I've been experimenting with [Aura PHP](http://auraphp.com/), and I plan to look into [Propel](http://propelorm.org/) as well. Programming techniques like efficient refactoring, mastering PHPUnit, setting up XDebug, using design patterns when they're useful are also some ways to improve both your skill *and* code.
yes, but this one you don't have to configure anything special, you just use the library. Many of the MQ implementations are tricky to setup, especially with php
I know you ask about PHP but how about learning more about Object Oriented design and patterns, and try to apply those in your current work?
You actually can do it manually if that's your poison. It's pretty much just a headless linux box, but there's no reason you can't do your own vagrant VM from the ground up, and then save the image so your own build is always there and sharable if you so choose. Vagrant isn't just a time saver for programmers - the sysadmin types can benefit too because it allows them to put the box together with the OS and packages they want people using, and then the devs all pull from the same image.
You can always try to find a project you are interested in contributing to it. i.e [SourceForge](http://sourceforge.net/directory/language:php/freshness:recently-updated/) or even [Google Project](https://code.google.com/hosting/search?q=label%3aPHP)
&gt; Really nice, Could be nicer to have access to admin demo to play with things a bit. http://comet.kami-design.com/features/ just use the login info
I'm inspired by your sexy ass admin panel. 
Looks like a nice start. You probably ought to look into converting your tables to the utf8_general_ci charset, though, before you get any users that aren't english speaking pounding on your door.
Sorry that this is a bit unrelated but I definitely recognise that admin design from somewhere, is it a public theme or just inspired by something? It's really bothering me that I can't remember where it's from :D
I made it myself so it's not a public theme or anything like that, I post regulary on deviant art so maybe you saw it there
Thanks!
It's hard to say this. You should try to do enough planning to feel like you covered most of the potential risk and issues, but this applies to your entire application, not the database. You also don't want to pre-plan too much, because requirements _will_ change, you will learn new things you didn't know before, so you should be flexible in changing your plan and liberally throw out stuff and re-write it for the better.
The Illuminate Router can be dropped into any application without needing to use Laravel itself. It builds on top of the Symfony router for now, and I hear 4.1 drops that dependency while maintaining the same API, so it's definitely worth looking into.
Check out Kris Wallsmith's [Spork](https://github.com/kriswallsmith/spork) library for a nice way to manage forks. Edit: that said, for many tasks a queue makes more sense, as stated elsewhere here. [PHP-Resque](https://github.com/chrisboulton/php-resque) (or [PHP-Resque-ex](https://github.com/kamisama/php-resque-ex)) is pretty straightforward, but there are lots of other good choices too. Beanstalkd, talking STOMP/AMQP to activemq/rabbitmq, etc. Queues let you distribute discrete tasks across multiple cores and servers, so they can be more flexible than forks/threads, and are a better choice to keeping a user's request running.
Thats a fair question to ask, but the tone of "so that you can go biking" is a little off. This is hardly a walk in the park and im giving up a shitload of my time for training. Anyway, based on my experience with similar events in the past the rooms will be small (usually a hostel) and shared with 2 or 3 other guys. The food will be minimal as we wont be riding on full stomachs, and sponsors provide much of what is there. Most of the people helping out with support driving, checkpoints, etc are volunteers, and are doing so for free - often after doing fundraising of their own. The fund-raising minimum is $3,500 which is why I set my goal at $7,000. With the help of so many tech folks I knew I could get a decent wedge of cash, and it means that even if somehow everything I listed above comes to $1,000 per person then they're still going to get $6,000 out of this from me. If you are concerned that your money is not going to be put to good use, then absolutely keep hold of it and put that money somewhere you are more comfortable giving, but Housing Works is a non-profit, and all of their [annual reports](http://www.housingworks.org/about/annual-reports/) are available online. Unlike Oxfam they don't have an entire section on their Wikipedia called [Criticism](https://en.wikipedia.org/wiki/Oxfam#Criticism), and every friend I have asked who has heard of the charity has only good things to say about their work. 
Raintpl and RedBean for Server Side. Precompiled Handlebars and Backbone for Client Side. Slim Framework to put it all together. I've even made a PHP Class which automatically compiles the Handlebars Templates on modification. [HandlebarsCompile Class](https://gist.github.com/zulfajuniadi/5935950) 
Your landing page is very well designed, the administrator control panel is very well designed, the demo deployment design is ugly... it just looks like someone crapped bootstrap with a metro theme onto the page and added a bit of filler content. If you can make the default frontend theme of the CMS as good as your backend / landing page, people would fall over themselves to use this. Edit: after playing with the admin them it's very good, have you considered selling it via [wrapbootstrap.com](https://wrapbootstrap.com/) or [themeforest](http://themeforest.net)? People go crazy for well designed admin themes, people are make tens of thousands off a good theme like yours!
Its an exercise suggestion not long term advice. 
The only thing that won't work is the Hashing. If you bind another hashing implementation to the IoC container the rest of the framework will work fine on 5.3.3.
Yea, me too. It reminds me of a theme I have seen on http://wrapbootstrap.com Very nice! 
Run spell check on your website please :|
Thanx for that. But I guess my problem isn't so much with vanilla PHP. I learned the language probably in one of the worst ways.. I simply grabbed a bunch of highly rated guides of Amazon and 'head down powered my way through'. As a result I would say at this point my theoretical knowledge is good -- I understand MVC architecture, I grok OOP, I know how to get SQL tables to 3rd normal form, etc, but my practical 'in the field' knowledge lacks. It's more with issues of deployment, installation, architecture, and configuration where I fall down. And that's stuff that doesn't really get addressed in the books too much. And PHP is my first server language so I don't have anything to compare to. So .. for example.. I have *no* idea what is involved with having 2 versions of PHP running.. or when I am using command line on a MAMP project, is my command line using my system's PHP or MAMP's, or what is is 'technically' that Vagrant is doing? Stuff like that. I guess I just have to get this stuff through trial and error though. I'm also trying to dig a bit more into UNIX, which I guess is part and parcel of understanding the whole LAMP stack.
Yeah I considered a lot of options, maybe even put the cms on codecanyon and create a html theme of admincenter but that's not my priority now. Frontend theme of cms is just a placeholder, real theme will be made after I'm done with system/backend.
&gt; oscommerce http://imgur.com/c6Rb1Lm Wow, the index.php has typecasted arguments into sql and html output *before* the final includes. Yup this is the new low
Since I'm tending to use Laravel 4 and Backbone, creating my own API might be a bit overkill isn't it?
Very nice. One note: on the http://comet.kami-design.com/ site, you may want to change esport to e-sport. I spent a good several minutes thinking it was pronounced "ess-port" and wondering what that meant. Of course, it's early and I'm a little hungover. Edit: clarity. 
Damn. Why is everybody so good at design here.
I can tell. Looks really good.
Don't really have time to write a personalized answer right now, but have a look at [this post](http://www.reddit.com/r/PHPhelp/comments/1hi3j8/exporting_csv_want_to_combine_2_columns_into_one/caw2r8b). It's an answer for another user that has a similar problem.
Oh nice. Thank you for that code. fputcsv looks like a useful method. Plus I did not know you could write to php memory using fopen.
same. both accounts.
Or [GitHub](https://github.com/languages/PHP)
It looks like a paid bootstrap theme
No problem. I really should have been a little more explanatory, and the comment was a little abrasive. My apologies.
well since you've said so out loud in a retort, there's no way you could have done so originally, that's not how the internet works.
http://www.phptherightway.com/
The problem with PThreads is you need a certain kind of PHP. The one I have (from Ubuntu package) doesn't allow me to install PThreads: **checking checking for ZTS... configure: error: pthreads requires ZTS, please re-compile PHP with ZTS enabled** Re-compiling PHP for many people might be too much effort. Nevertheless thank you for this article. 
http://deltaepsilon.github.io/bootstrap-square-ui/
I agree, it looks good but live demo is missing. 
It's traditionally either eSports or e-Sports.
c12's solution is exactly what you want. I don't understand why your devs aren't suggesting this. Before sending out an email, your script transforms each link into a trackable link (IE transforming http://www.google.com into http://yoursite.com/newsletter.php?user=1234&amp;campaign=56789&amp;url=222). When a user clicks a link, they will be sent to newsletter.php, which will log the click for the user. Generate reports. This is fairly straight-forward and is a function of most mailing software.
Are the forums under development still? I tried to post on one with no luck
I say if you are just wanting to get into it, XAMPP or WAMP will be the easiest and fastest way with no headaches. If you are on Linux, LAMP is even easier.
Ah, okay. Its pretty nice. Your admin login panel seems to be, messed up. Not sure if you are aware of that.
If you move to doctrine 2 and the data mapper pattern as your ORM (which you should because its superior to ActiveRecord in design) I think you will find that it really forces you to think out a logical, well normalized model. Use Laravel sure but I would recommend forgetting eloquent and go about using doctrine as the ORM in that framework. Not to mention doctrine has migrations so you can keep the data in your SQL db intact but change the arhictecture of your model and tables progressively as you move forward in the project and when you make adjustments then commit how the SQL db should be altered in *php* in your git repo. Want to move the project from mysql to posgres, mssql or even nosql mongodb? Doctrine has you covered there too.
&gt; but didn't get how these things clicked until recently What was the trigger?
did you use any javascript frameworks or just straight javascript?
Varnish is a pain in the ass to integrate ... but the results are worth it.
Being that you are on Windows I would personally be spinning up a VM using VirtualBox and Ubuntu/similar distro for the task. Personally I use Ubuntu exclusively (desktop/server) with nginx/PHP-FPM built from source. PHP 5.5 in dev at the moment and PHP 5.4.(latest) on production boxes - with a move to 5.5 soon.. I'm totally not a fan of the Windows file system and NTFS, so you want to be aware of the possible issues (and limitations) if moving projects from dev into a production situation on a Linux filesystem.
&gt; utf8_unicode_ci FTFY
powerful*
i prefer using SplFileInfo instead of f*csv to mess with csv files.
It sounds a really great solution yet I'm afraid time is not by my side on this project, It might be bit too late for me to start learning and using Doctrine. I will read more about it and maybe will manage to implement it in my project instead of Eloquent. 
I knew the database would change during development, yet I wanted to get bit of a clue on how much should I plan the DB before diving into coding, You are surely gave me a nice peek to things to come.
Lets also not forget that PHP is not a domain specific language. something like twig is. PHP may have once started out this way, but it has since evolved into an animal much stronger than it's original intention. TWIG is domain specific to templates. PHP has moved beyond this concept, it supports it, as did JSP, but all major code deployments these days are done using some external template language / DSL for templates.
Congratulations! It looks crisp and easy to use.
Or you just check the log file without disclosing system detail information to your visitors.
Here we are not disclosing the error details to visitors, but by caching it we can display custom messages to the visitors. Also in development stage we can directly display kind of cached errors on browsers.
So out of all the variety of things you could have discussed here, you chose to pick apart the spelling? Why do you bother to comment?
The biggest problem with the "white screen" isn't actually the white screen. It's that a lot of programmers simply don't understand anything about how php and the webserver communicate. There is no need for this if you actually log stderr to a file. By default, the webserver will catch this output. You should not be throwing this output away for something basic and worthless as what is being described here. The webserver should throw a 5xx response, and if you want to do something friendly for the user, do it there using the webserver's ability to configure error pages. In production, the display_errors directive should *always* be off. The error_reporting level should be set to -1 (all on).
I think you mean 'catching', caching is something very different. Unfortunately it's now worthless to you because you're trapping it and throwing most of the useful information away that might help you solve the problem. Also: # Making error reporting on error_reporting(0); I don't think error_reporting(0) means what you think it means.
Thank you for this, I fix it.
I'm using jQuery for backend
Where do you go? Easy. Where you want to go. Start investigating which language(s) have features which would complement your existing projects. Learn languages that have practical application to your work.
There's [myDBR](http://mydbr.com/) but it's standalone, I don't think you can integrate it into your own app and besides, it's not really end-user friendly as you design your reports in SQL (not only data modelling, the whole design is done in SQL). 
Muphry's Law clearly in action here.
Perhaps a thesaurus dump or WordNet?
Laravel does exactly what you described for DB migrations, too. 
DOH! Right you are. We don't use MySQL heavily anymore so I'm a bit rusty.
I believe sphinx, the search engine does this. 
GoLang :D 
I was looking at [this](http://blog.jcole.us/2007/11/24/on-efficiently-geo-referencing-ips-with-maxmind-geoip-and-mysql-gis/) a little white ago. Got some very fast, but less accurate results using the update 1 method.
If you want to learn PHP, don't learn A Framework... If you truly want to learn more about PHP I would suggest that you make your own framework or your own library. Make a blog, forum, poll, billing system, CMS, etc... from scratch without any framework. Look up how others did it, how you could improve it or do it differently. Look up the latest PHP version new functionalities and how you could use them. What you will make might not be as good as others but you will learn a great deal by trying to reinvent the wheel. I wouldnt do this professionally though, this is for side projects that just might go no where in the end. But their great learning experience :}
This thread on solr might get you started: http://stackoverflow.com/questions/9498022/solr-did-you-mean-spell-check-component
you should xpost this to /r/datasets suggestions databases are out there, but if you look at http://www.nametumbler.com/ it appears to just string a list of adjectives (or other predefined words) to your keywords. 
not a problem. here is the search page. which displays the results on the results page just fine.. &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt; &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt; &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt; &lt;title&gt;Search Aldershot Customers&lt;/title&gt; &lt;style type="text/css"&gt; &lt;!-- body { font: 100%/1.4 Verdana, Arial, Helvetica, sans-serif; background-color: #000000; margin: 0; padding: 0; color: #000; } /* ~~ Element/tag selectors ~~ */ ul, ol, dl { /* Due to variations between browsers, it's best practices to zero padding and margin on lists. For consistency, you can either specify the amounts you want here, or on the list items (LI, DT, DD) they contain. Remember that what you do here will cascade to the .nav list unless you write a more specific selector. */ padding: 0; margin: 0; } h1, h2, h3, h4, h5, h6, p { margin-top: 0; /* removing the top margin gets around an issue where margins can escape from their containing div. The remaining bottom margin will hold it away from any elements that follow. */ padding-right: 15px; padding-left: 15px; /* adding the padding to the sides of the elements within the divs, instead of the divs themselves, gets rid of any box model math. A nested div with side padding can also be used as an alternate method. */ text-align: center; } a img { /* this selector removes the default blue border displayed in some browsers around an image when it is surrounded by a link */ border: none; } /* ~~ Styling for your site's links must remain in this order - including the group of selectors that create the hover effect. ~~ */ a:link { color: #42413C; text-decoration: underline; /* unless you style your links to look extremely unique, it's best to provide underlines for quick visual identification */ } a:visited { color: #6E6C64; text-decoration: underline; } a:hover, a:active, a:focus { /* this group of selectors will give a keyboard navigator the same hover experience as the person using a mouse. */ text-decoration: none; } /* ~~ this fixed width container surrounds all other elements ~~ */ .container { width: 960px; background-color: #FFF; margin: 0 auto; /* the auto value on the sides, coupled with the width, centers the layout */ } /* ~~ This is the layout information. ~~ 1) Padding is only placed on the top and/or bottom of the div. The elements within this div have padding on their sides. This saves you from any "box model math". Keep in mind, if you add any side padding or border to the div itself, it will be added to the width you define to create the *total* width. You may also choose to remove the padding on the element in the div and place a second div within it with no width and the padding necessary for your design. */ .content { padding: 10px 0; } /* ~~ miscellaneous float/clear classes ~~ */ .fltrt { /* this class can be used to float an element right in your page. The floated element must precede the element it should be next to on the page. */ float: right; margin-left: 8px; } .fltlft { /* this class can be used to float an element left in your page. The floated element must precede the element it should be next to on the page. */ float: left; margin-right: 8px; } .clearfloat { /* this class can be placed on a &lt;br /&gt; or empty div as the final element following the last floated div (within the #container) if the overflow:hidden on the .container is removed */ clear:both; height:0; font-size: 1px; line-height: 0px; } --&gt; &lt;/style&gt;&lt;/head&gt; &lt;body&gt; &lt;table width="100%" border="0" cellspacing="0" cellpadding="0"&gt; &lt;tr&gt; &lt;td align="center" valign="middle"&gt;&lt;a href="Search_Aldershot_Customers.php"&gt;&lt;img src="siteButtons/index/index_Aldershot_Customers.fw.png" alt="Search Aldershot Customers" width="152" height="152" /&gt;&lt;/a&gt;&lt;/td&gt; &lt;td align="center" valign="middle"&gt;&lt;a href="Bulford_Customers.php"&gt;&lt;img src="siteButtons/index/index_Bulford_Customers.fw.png" alt="Search Bulford Customers" width="152" height="152" /&gt;&lt;/a&gt;&lt;/td&gt; &lt;td align="center" valign="middle"&gt;&lt;a href="Calenders.php"&gt;&lt;img src="siteButtons/index/index_Calender_Work.fw.png" alt="Go to Calenders" width="152" height="152" /&gt;&lt;/a&gt; &lt;/td&gt; &lt;td align="center" valign="middle"&gt;&lt;a href="Reports_Main.php"&gt;&lt;img src="siteButtons/index/index_Reports.fw.png" alt="Go to Reports" width="152" height="152" /&gt;&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;form action="Results_Aldershot_Customers.php" method="post" name="search_form" target="_parent" id="search_form"&gt; &lt;p&gt; &lt;input name="search_textboxID" type="text" id="search_textboxID" value="Search ID" size="40" /&gt; &lt;/p&gt; &lt;p&gt; &lt;input name="search_textboxSurname" type="text" id="search_textboxSurname" value="Search Surname" size="40" /&gt; &lt;/p&gt; &lt;p&gt; &lt;input name="search_textboxMobile" type="text" id="search_textboxMobile" value="Search Mobile Phone" size="40" /&gt; &lt;/p&gt; &lt;p&gt; &lt;input name="search_textboxHome" type="text" id="search_textboxHome" value="Search Home Phone" size="40" /&gt; &lt;/p&gt; &lt;p&gt; &lt;input name="search_textboxWork" type="text" id="search_textboxWork" value="Search Work Phone" size="40" /&gt; &lt;/p&gt; &lt;p&gt; &lt;input type="submit" name="search_button" id="search_button" value="Search" /&gt; &lt;/p&gt; &lt;/form&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;
and then the code for the results page: &lt;?php require_once('Connections/GloverRiding.php'); ?&gt; &lt;?php if (!function_exists("GetSQLValueString")) { function GetSQLValueString($theValue, $theType, $theDefinedValue = "", $theNotDefinedValue = "") { if (PHP_VERSION &lt; 6) { $theValue = get_magic_quotes_gpc() ? stripslashes($theValue) : $theValue; } $theValue = function_exists("mysql_real_escape_string") ? mysql_real_escape_string($theValue) : mysql_escape_string($theValue); switch ($theType) { case "text": $theValue = ($theValue != "") ? "'" . $theValue . "'" : "NULL"; break; case "long": case "int": $theValue = ($theValue != "") ? intval($theValue) : "NULL"; break; case "double": $theValue = ($theValue != "") ? doubleval($theValue) : "NULL"; break; case "date": $theValue = ($theValue != "") ? "'" . $theValue . "'" : "NULL"; break; case "defined": $theValue = ($theValue != "") ? $theDefinedValue : $theNotDefinedValue; break; } return $theValue; } } $searchID_SearchResults = "-1"; if (isset($_POST["search_textboxID"])) { $searchID_SearchResults = $_POST["search_textboxID"]; } $searchSurname_SearchResults = "%"; if (isset( $_POST["search_textboxSurname"])) { $searchSurname_SearchResults = $_POST["search_textboxSurname"]; } $searchMobile_SearchResults = "%"; if (isset($_POST['search_textboxMobile'])) { $searchMobile_SearchResults = $_POST['search_textboxMobile']; } $searchHome_SearchResults = "%"; if (isset($_POST['search_textboxHome'])) { $searchHome_SearchResults = $_POST['search_textboxHome']; } $searchWork_SearchResults = "%"; if (isset($_POST['search_textboxWork'])) { $searchWork_SearchResults = $_POST['search_textboxWork']; } mysql_select_db($database_GloverRiding, $GloverRiding); $query_SearchResults = sprintf("SELECT Aldershot_Customers.CustomerID, Aldershot_Customers.Surname, Aldershot_Customers.Initials, Aldershot_Customers.`Prefix`, Aldershot_Customers.MobilePhone, Aldershot_Customers.HomePhone, Aldershot_Customers.WorkPhone FROM Aldershot_Customers WHERE Aldershot_Customers.CustomerID = %s OR Aldershot_Customers.Surname = %s OR Aldershot_Customers.MobilePhone = %s OR Aldershot_Customers.HomePhone = %s OR Aldershot_Customers.WorkPhone = %s", GetSQLValueString($searchID_SearchResults, "int"),GetSQLValueString($searchSurname_SearchResults, "text"),GetSQLValueString($searchMobile_SearchResults, "text"),GetSQLValueString($searchHome_SearchResults, "text"),GetSQLValueString($searchWork_SearchResults, "text")); $SearchResults = mysql_query($query_SearchResults, $GloverRiding) or die(mysql_error()); $row_SearchResults = mysql_fetch_assoc($SearchResults); $totalRows_SearchResults = mysql_num_rows($SearchResults); ?&gt; &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt; &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt; &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt; &lt;title&gt;Search Results&lt;/title&gt; &lt;style type="text/css"&gt; &lt;!-- body { font: 100%/1.4 Verdana, Arial, Helvetica, sans-serif; background-color: #000000; margin: 0; padding: 0; color: #000; } /* ~~ Element/tag selectors ~~ */ ul, ol, dl { /* Due to variations between browsers, it's best practices to zero padding and margin on lists. For consistency, you can either specify the amounts you want here, or on the list items (LI, DT, DD) they contain. Remember that what you do here will cascade to the .nav list unless you write a more specific selector. */ padding: 0; margin: 0; } h1, h2, h3, h4, h5, h6, p { margin-top: 0; /* removing the top margin gets around an issue where margins can escape from their containing div. The remaining bottom margin will hold it away from any elements that follow. */ padding-right: 15px; padding-left: 15px; /* adding the padding to the sides of the elements within the divs, instead of the divs themselves, gets rid of any box model math. A nested div with side padding can also be used as an alternate method. */ } a img { /* this selector removes the default blue border displayed in some browsers around an image when it is surrounded by a link */ border: none; } /* ~~ Styling for your site's links must remain in this order - including the group of selectors that create the hover effect. ~~ */ a:link { color: #42413C; text-decoration: underline; /* unless you style your links to look extremely unique, it's best to provide underlines for quick visual identification */ } a:visited { color: #6E6C64; text-decoration: underline; } a:hover, a:active, a:focus { /* this group of selectors will give a keyboard navigator the same hover experience as the person using a mouse. */ text-decoration: none; } /* ~~ this fixed width container surrounds all other elements ~~ */ .container { width: 960px; background-color: #FFF; margin: 0 auto; /* the auto value on the sides, coupled with the width, centers the layout */ } /* ~~ This is the layout information. ~~ 1) Padding is only placed on the top and/or bottom of the div. The elements within this div have padding on their sides. This saves you from any "box model math". Keep in mind, if you add any side padding or border to the div itself, it will be added to the width you define to create the *total* width. You may also choose to remove the padding on the element in the div and place a second div within it with no width and the padding necessary for your design. */ .content { padding: 10px 0; } /* ~~ miscellaneous float/clear classes ~~ */ .fltrt { /* this class can be used to float an element right in your page. The floated element must precede the element it should be next to on the page. */ float: right; margin-left: 8px; } .fltlft { /* this class can be used to float an element left in your page. The floated element must precede the element it should be next to on the page. */ float: left; margin-right: 8px; } .clearfloat { /* this class can be placed on a &lt;br /&gt; or empty div as the final element following the last floated div (within the #container) if the overflow:hidden on the .container is removed */ clear:both; height:0; font-size: 1px; line-height: 0px; } body,td,th { color: #FFF; text-align: center; } --&gt; &lt;/style&gt;&lt;/head&gt; &lt;body&gt; &lt;body&gt; &lt;table width="100%" border="0" cellspacing="0" cellpadding="0"&gt; &lt;tr&gt; &lt;td align="center" valign="middle"&gt;&lt;a href="Search_Aldershot_Customers.php"&gt;&lt;img src="siteButtons/index/index_Aldershot_Customers.fw.png" alt="Search Aldershot Customers" width="152" height="152" /&gt;&lt;/a&gt;&lt;/td&gt; &lt;td align="center" valign="middle"&gt;&lt;a href="Bulford_Customers.php"&gt;&lt;img src="siteButtons/index/index_Bulford_Customers.fw.png" alt="Search Bulford Customers" width="152" height="152" /&gt;&lt;/a&gt;&lt;/td&gt; &lt;td align="center" valign="middle"&gt;&lt;a href="Calenders.php"&gt;&lt;img src="siteButtons/index/index_Calender_Work.fw.png" alt="Go to Calenders" width="152" height="152" /&gt;&lt;/a&gt;&lt;/td&gt; &lt;td align="center" valign="middle"&gt;&lt;a href="Reports_Main.php"&gt;&lt;img src="siteButtons/index/index_Reports.fw.png" alt="Go to Reports" width="152" height="152" /&gt;&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;table width="100%" border="0"&gt; &lt;tr&gt; &lt;td&gt;CustomerID&lt;/td&gt; &lt;td&gt;Surname&lt;/td&gt; &lt;td&gt;Initials&lt;/td&gt; &lt;td&gt;Prefix&lt;/td&gt; &lt;td&gt;MobilePhone&lt;/td&gt; &lt;td&gt;HomePhone&lt;/td&gt; &lt;td&gt;WorkPhone&lt;/td&gt; &lt;/tr&gt; &lt;?php do { ?&gt; &lt;tr&gt; &lt;td&gt;&lt;form id="CustomerID" name="CustomerID" method="get" action="Aldershot_Customers.php"&gt; &lt;a href="Aldershot_Customers.php"&gt;&lt;?php echo $row_SearchResults['CustomerID']; ?&gt;&lt;/a&gt; &lt;/form&gt;&lt;/td&gt; &lt;td&gt;&lt;?php echo $row_SearchResults['Surname']; ?&gt;&lt;/td&gt; &lt;td&gt;&lt;?php echo $row_SearchResults['Initials']; ?&gt;&lt;/td&gt; &lt;td&gt;&lt;?php echo $row_SearchResults['Prefix']; ?&gt;&lt;/td&gt; &lt;td&gt;&lt;?php echo $row_SearchResults['MobilePhone']; ?&gt;&lt;/td&gt; &lt;td&gt;&lt;?php echo $row_SearchResults['HomePhone']; ?&gt;&lt;/td&gt; &lt;td&gt;&lt;?php echo $row_SearchResults['WorkPhone']; ?&gt;&lt;/td&gt; &lt;/tr&gt; &lt;?php } while ($row_SearchResults = mysql_fetch_assoc($SearchResults)); ?&gt; &lt;/table&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;form id="form_Go" name="form_Go" method="post" action="Aldershot_Customers.php"&gt; &lt;label for="textbox_IDGO"&gt;Go to Customer ID: &lt;/label&gt; &lt;input type="text" name="textbox_IDGO" id="textbox_IDGO" /&gt; &lt;input type="submit" name="button_GO" id="button_GO" value="Go" /&gt; &lt;/form&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; 
and then the customers form &lt;?php require_once('Connections/GloverRiding.php'); ?&gt; &lt;?php if (!function_exists("GetSQLValueString")) { function GetSQLValueString($theValue, $theType, $theDefinedValue = "", $theNotDefinedValue = "") { if (PHP_VERSION &lt; 6) { $theValue = get_magic_quotes_gpc() ? stripslashes($theValue) : $theValue; } $theValue = function_exists("mysql_real_escape_string") ? mysql_real_escape_string($theValue) : mysql_escape_string($theValue); switch ($theType) { case "text": $theValue = ($theValue != "") ? "'" . $theValue . "'" : "NULL"; break; case "long": case "int": $theValue = ($theValue != "") ? intval($theValue) : "NULL"; break; case "double": $theValue = ($theValue != "") ? doubleval($theValue) : "NULL"; break; case "date": $theValue = ($theValue != "") ? "'" . $theValue . "'" : "NULL"; break; case "defined": $theValue = ($theValue != "") ? $theDefinedValue : $theNotDefinedValue; break; } return $theValue; } } mysql_select_db($database_GloverRiding, $GloverRiding); $query_Recordset1 = sprintf("SELECT * FROM Aldershot_Customers WHERE CustomerID = %s", GetSQLValueString($colname_Recordset1, "int")); $Recordset1 = mysql_query($query_Recordset1, $GloverRiding) or die(mysql_error()); $row_Recordset1 = mysql_fetch_assoc($Recordset1); $totalRows_Recordset1 = "-1"; if (isset($_GET['CustomerID'])) { $totalRows_Recordset1 = $_GET['CustomerID']; } ?&gt; &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1- transitional.dtd"&gt; &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt; &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt; &lt;title&gt;Aldershot Customers&lt;/title&gt; &lt;style type="text/css"&gt; &lt;!-- body { font: 100%/1.4 Verdana, Arial, Helvetica, sans-serif; background-color: #000000; margin: 0; padding: 0; color: #000; } /* ~~ Element/tag selectors ~~ */ ul, ol, dl { /* Due to variations between browsers, it's best practices to zero padding and margin on lists. For consistency, you can either specify the amounts you want here, or on the list items (LI, DT, DD) they contain. Remember that what you do here will cascade to the .nav list unless you write a more specific selector. */ padding: 0; margin: 0; } h1, h2, h3, h4, h5, h6, p { margin-top: 0; /* removing the top margin gets around an issue where margins can escape from their containing div. The remaining bottom margin will hold it away from any elements that follow. */ padding-right: 15px; padding-left: 15px; /* adding the padding to the sides of the elements within the divs, instead of the divs themselves, gets rid of any box model math. A nested div with side padding can also be used as an alternate method. */ } a img { /* this selector removes the default blue border displayed in some browsers around an image when it is surrounded by a link */ border: none; } /* ~~ Styling for your site's links must remain in this order - including the group of selectors that create the hover effect. ~~ */ a:link { color: #42413C; text-decoration: underline; /* unless you style your links to look extremely unique, it's best to provide underlines for quick visual identification */ } a:visited { color: #6E6C64; text-decoration: underline; } a:hover, a:active, a:focus { /* this group of selectors will give a keyboard navigator the same hover experience as the person using a mouse. */ text-decoration: none; } /* ~~ this fixed width container surrounds all other elements ~~ */ .container { width: 960px; background-color: #FFF; margin: 0 auto; /* the auto value on the sides, coupled with the width, centers the layout */ } /* ~~ This is the layout information. ~~ 1) Padding is only placed on the top and/or bottom of the div. The elements within this div have padding on their sides. This saves you from any "box model math". Keep in mind, if you add any side padding or border to the div itself, it will be added to the width you define to create the *total* width. You may also choose to remove the padding on the element in the div and place a second div within it with no width and the padding necessary for your design. */ .content { padding: 10px 0; } /* ~~ miscellaneous float/clear classes ~~ */ .fltrt { /* this class can be used to float an element right in your page. The floated element must precede the element it should be next to on the page. */ float: right; margin-left: 8px; } .fltlft { /* this class can be used to float an element left in your page. The floated element must precede the element it should be next to on the page. */ float: left; margin-right: 8px; } .clearfloat { /* this class can be placed on a &lt;br /&gt; or empty div as the final element following the last floated div (within the #container) if the overflow:hidden on the .container is removed */ clear:both; height:0; font-size: 1px; line-height: 0px; } body,td,th { color: #FFF; } --&gt; &lt;/style&gt;&lt;/head&gt; &lt;body&gt; &lt;table width="100%" border="0" cellspacing="0" cellpadding="0"&gt; &lt;tr&gt; &lt;td align="center" valign="middle"&gt;&lt;a href="Search_Aldershot_Customers.php"&gt;&lt;img src="siteButtons/index/index_Aldershot_Customers.fw.png" alt="Search Aldershot Customers" width="152" height="152" /&gt;&lt;/a&gt;&lt;/td&gt; &lt;td align="center" valign="middle"&gt;&lt;a href="Bulford_Customers.php"&gt;&lt;img src="siteButtons/index/index_Bulford_Customers.fw.png" alt="Search Bulford Customers" width="152" height="152" /&gt;&lt;/a&gt;&lt;/td&gt; &lt;td align="center" valign="middle"&gt;&lt;a href="Calenders.php"&gt;&lt;img src="siteButtons/index/index_Calender_Work.fw.png" alt="Go to Calenders" width="152" height="152" /&gt;&lt;/a&gt; &lt;/td&gt; &lt;td align="center" valign="middle"&gt;&lt;a href="Reports_Main.php"&gt;&lt;img src="siteButtons/index/index_Reports.fw.png" alt="Go to Reports" width="152" height="152" /&gt;&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;?php $CustomerID = $_GET['CustomerID']; ?&gt; &lt;form id="form1" name="form1" method="post" action=""&gt; &lt;table width="100%" border="0" cellspacing="0" cellpadding="0"&gt; &lt;tr&gt; &lt;td&gt;&lt;label for="textbox_CustomerID_AC"&gt;CustomerID: &lt;/label&gt;&lt;/td&gt; &lt;td&gt;&lt;input name="textbox_CustomerID_AC" type="text" id="textbox_CustomerID_AC" value="&lt;?php echo $row_Recordset1['CustomerID']; ?&gt;" size="40" readonly="readonly" /&gt;&lt;/td&gt; &lt;td&gt;&lt;label for="textbox_Mobile_AC"&gt;Mobile Phone: &lt;/label&gt;&lt;/td&gt; &lt;td&gt;&lt;input value="&lt;?php echo $row_Recordset1['MobilePhone']; ?&gt;" name="textbox_Mobile_AC" type="text" id="textbox_Mobile_AC" size="40" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;label for="textbox_Surname_AC"&gt;Surname: &lt;/label&gt;&lt;/td&gt; &lt;td&gt;&lt;input name="textbox_Surname_AC" type="text" id="textbox_Surname_AC" value="&lt;?php echo $row_Recordset1['Surname']; ?&gt;" size="40" /&gt;&lt;/td&gt; &lt;td&gt;&lt;label for="textbox_Home_AC"&gt;Home Phone: &lt;/label&gt;&lt;/td&gt; &lt;td&gt;&lt;input value="&lt;?php echo $row_Recordset1['HomePhone']; ?&gt;" name="textbox_Home_AC" type="text" id="textbox_Home_AC" size="40" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;label for="textbox_Initials_AC"&gt;Initials: &lt;/label&gt;&lt;/td&gt; &lt;td&gt;&lt;input value="&lt;?php echo $row_Recordset1['Initials']; ?&gt;" name="textbox_Initials_AC" type="text" id="textbox_Initials_AC" size="40" /&gt;&lt;/td&gt; &lt;td&gt;&lt;label for="textbox_Work_AC"&gt;Work Phone&lt;/label&gt;&lt;/td&gt; &lt;td&gt;&lt;input value="&lt;?php echo $row_Recordset1['WorkPhone']; ?&gt;" name="textbox_Work_AC" type="text" id="textbox_Work_AC" size="40" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;label for="textbox_Prefix_AC"&gt;Prefix: &lt;/label&gt;&lt;/td&gt; &lt;td&gt;&lt;input value="&lt;?php echo $row_Recordset1['Prefix']; ?&gt;" name="textbox_Prefix_AC" type="text" id="textbox_Prefix_AC" size="40" /&gt;&lt;/td&gt; &lt;td&gt;E-Mail: &lt;/td&gt; &lt;td&gt;&lt;input value="&lt;?php echo $row_Recordset1['Email']; ?&gt;" name="textbox_Email_AC" type="text" id="textbox_Email_AC" size="40" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Address: &lt;/td&gt; &lt;td&gt;&lt;textarea name="textbox_Address_AC" cols="40" rows="5" id="textbox_Address_AC"&gt;&lt;?php echo $row_Recordset1['Address']; ?&gt; &lt;/textarea&gt;&lt;/td&gt; &lt;td&gt;&lt;label for="checkbox_Account_AC"&gt;Account: &lt;/label&gt;&lt;/td&gt; &lt;td&gt;&lt;input &lt;?php if (!(strcmp($row_Recordset1['Account'],1))) {echo "checked=\"checked\"";} ?&gt; type="checkbox" name="checkbox_Account_AC" id="checkbox_Account_AC" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; 
&gt; On the customers page, I have created a recordset that has a filter on CustomerID which I set to get the information from URL #CustomerID. but its not working. Are you getting the correct CustomerID from the URL? maybe do an echo?
Where does the $colname_Recordset1 variable get it's value from?
thats dreamweaver creating stuff whereever it likes when I cant make a recordset work first time. I'll ammend that now 
you could try the openoffice/libre office thesaurus. it looks to be some kind of plain-text format. on my Windows machine the filename is called LibreOffice 3.5\share\extensions\dict-en\th_en_US_v2.dat i'm not sure about copyright license issues though.
Don't EVER use dreamweaver generated php. Ever. It's messy, old, and a huge security risk. Dreamweaver as an editor is fine, it's generated php is not.
Sphinx does and uses words already in your database to pull from. So it doesn't try to suggest unrelated words. Here is the code I've used in the past that might help you get started http://codepad.org/1eXHENTi The main things are the buildstops, buildfreqs, and trigrams. Just let me know if you have any questions about this.
I've been coding PHP for over 12 years now and one thing that bothers me ever since PDO became widespread is many shortcomings. I've written this implementation to cover most of the things that I miss in http://php.net/manual/en/book.pdo.php implementation. I am looking for feedback Reddit!
Django admin have everything you need. You don't even need to code any html, you just have to setup the model. https://www.djangoproject.com/
You need to write tests. There are plenty of well tested DBAL implementations at this point so there's really no reason to use something that doesn't have unit tests. Also, the formatting is inconsistent and you may want to consider doc blocs. https://github.com/gajus/pdo/blob/master/pdo_statement.class.php As far as the code. You mention this. $db -&gt;prepare("SELECT 1 FROM `foo` WHERE `bar_id` = i:bar_id AND `baz` = s:baz;") -&gt;execute(['bar_id' =&gt; 1, 'baz' =&gt; 'qux']) -&gt;fetch(PDO::FETCH_ASSOC); Why not: $db-&gt;fetchAssoc("SELECT 1 FROM `foo` WHERE `bar_id` = ? AND `baz` = ?", [1, 'qux']); Zend has been doing this for awhile.
Out of interest, where did you learn to use the `mysql_*` functions? You clearly learned it recently, and we need to stamp that shit out at the source. 
very recently. its a combination of google and dreamweavers auto coding. which is apparently bad
https://github.com/j4mie/idiorm I really like this library. Fluent interface that sticks to sql.
This is one area where Java beats PHP, unfortunately. JasperSoft is pretty good. 
 What is wrong with [Doctrine DBAL](http://www.doctrine-project.org/projects/dbal.html)? Seems to me your library is doing mostly the same as DBAL. Also, since this is supposed to be a library, please follow the various PSR's... You are violating PSR-0, PSR-1, PSR-2 and PSR-3 at the moment. Yes, they are recommendations, but since your code is supposed to be a library that is included with other code, you should follow them.
Good call. OP, WordNet is a big database of synonyms. Don't forget the Canadianism "Parkade"!
Files ending in ".class.php" ? Hello 2006. 
ay\PDO is direct extension of PDO. DBAL (as their description says) is "PDO-like API". Though, my exposure to DBAL is very limited. Will definitely give it a second look.
* Good point about the SQL formatter. That's a rather development leftover. * I am using tabs consistently. Not aware of any code that would use spaces. Regarding the last point, it isn't a development oversight per se. The deferred class is dedicated entirely for production, while debug is used only for development. I don't see ever the two being used together.
Just use namespaces, and a hierarchy of folders. This way users would only need to configure their autoloader, and never worry about the path to your classes again. 
Curses! Anyway, you're escaping input, which is good. The whole "is PHP version less than 6" is pretty pointless (the script will break long before then because the mysql_* functions will be dropped from PHP 5.7). The biggest things are separating your code from the HTML (or at least move it to the top where you can keep an eye on it), switching to `mysqli` or `pdo` because they're safer, and maybe putting your code into a [gist](http://gist.github.com) so we can have a proper look at it and submit improvements. A GitHub repository would be even better, but that's a bit more complicated and it sounds like you're just starting out. Edit: derp, can't believe I didn't mention output escaping too. Where you have `&lt;input value="&lt;?php echo $blah; ?&gt;"` you really need to make that output safe, eg with `&lt;input value="&lt;?php echo htmlspecialchars($blah, ENT_COMPAT); ?&gt;"`. 
Aside from view files (.phtml, .html.php, ...), what other files do you have?
It's still a pdo wrapper. 
I haven't used Zend, but how do you use parameters that are used more than once in the query? E.g. WHERE col_a &gt;= :val AND col_b &lt;= :val In a case like this I like it that you can reuse the same parameter without having to pass it twice
I'm not sure what the point of this... other comments covered some of the faults in the code, additional thoughts are below: Why would I want to run preg_replace_callback against all queries if I can simply hint the type when binding (if I need to). Also things like this are wrong: if (strpos(trim($query), 'INSERT') === 0) { return $this-&gt;lastInsertId(); } Why are you assuming I want to retrieve last id back if I'm inserting something? That's up to me not the wrapper. Also there is no reason to add 'logging' to PDO using your own logger. I think logging of queries has more code behind it than your wrapper. There are way better loggers out there. 
Usually with a key-based array/dict: $db-&gt;fetchAssoc("SELECT * FROM tbl WHERE id = ? AND name LIKE :val", [ 123, "val" =&gt; 42 ]); Bonus points if you can allow positional and named arguments (I don't think PDO does). PDO also requires your keys to begin with a colon, which never seemed obvious to me.
Unless you are making thousands of queries, the few Regular Expressions won't hurt. The tradeoff is ease of development/readability vs performance. Do you mind sharing the logger you are talking about?
Yup. The other benefit is that you can pass as many parameters as you want to "execute" method and only those with binded placeholders will be used. Native PDO implementation would thrown an Exception. Use cases vary, though mostly relate to dynamic query building.
I'm not sure how to respond to your first statement, running regex against every query is kind of hacky especially if the only thing you are doing is checking type hinting. Not to mention the performance does not really depend on X * Time, it depends on X * L * Time. The longer the query is the longer the scan time is. To me readability is simpler with (int) $int since it's part of a language .vs i$int or something like that in a middle of a query. i$int or s$string is not part of a language and if you have time to type i$int in query you surely have time to do (int) $int in binding. There are plenty of logging solutions out there that take care of a lot of things and are plug-n-play. 
oAuth, and a custom app.
I forgot to mention something with planning. Never spend so much time that you could have written the code that you are talking about doing. If I am trying to decide between the post content of a table to be called "data", "content", "postMessage" or something else, I go with what I originally thought of it as, in this case "content". Otherwise you will waste so much time on the little details you lose yourself
I built one for Facebook a while ago. You can setup Facebook to post content at certain times, (queue posts) and so I would run this script once a day with a cron task and times for each piece of content to display. You would need developer accounts on Facebook and Twitter that I know of. I am not sure about tumblr, but I would assume that it is the same. I would make three class files that post to each service, and then write a wrapper that sends the data to each class to post, and setup a crontab to run that wrapper. If you are looking for something more specific, send me a message.
Its insert/update/delete convenience methods are great timesavers. Worth a look. 
Raw criticism without any arguments isn't of any value. However, no need to expect to get everything wrapped in a gift-paper. I appreciate the feedback as it is. In fact, I rather disapprove people who cannot take criticism. :-) Feels like home. Good to know that nothing changed in the last decade. 
The part about "(int) $int" doesn't make sense. It doesn't fit anyway in the context of parameter binding and using prepared statements. Now these is big difference between "SELECT 1 WHERE `id` = i:id" and the same plus "-&gt;bindValue('id', 1 PDO::PARAM_INT);".
Viewing the source on GitHub shows either a mix of tabs and spaces, or mixing of tab levels. See: https://github.com/gajus/pdo/blob/master/pdo.class.php Everything but `exec()` has varying tab levels.
[ifttt.com](https://ifttt.com/)
i'm not understanding? do you want me to post in /r/PHPhelp or do you want me or read it? because i've already been through it many times looking for help on this. 
It seems like this is the way GitHub interprets the source code. It doesn't look this way if you look at it using Coda.
You're right, pdo won't allow both indices and keys, this might even be a restriction on driver level.
You should check out Zend, and [Doctrine](http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/data-retrieval-and-manipulation.html). Maybe something like Propel as well. Re: your question. I would pass the variable in the array twice.
&gt; ".phtml" is uh. Lets just say it would take a lot of time to get used to it, not to mention that it isn't a defacto valid PHP extension. http://stackoverflow.com/questions/11859015/what-is-phtml-and-when-should-i-use-a-phtml-extension-rather-than-php .phtml has been the standard for naming views in PHP for some time now. phtml files are automatically recognized by PHP.
It doesn't matter how it looks in an editor, the problem is that it is inconsistent and dependent on editor configuration.
&gt; PDO became widespread is many shortcomings Such as?
"Look" is the operative word, those lines are clearly using tabs + four spaces that most code editors will display as a tab. [The raw version is the same.](https://raw.github.com/gajus/pdo/master/pdo.class.php)
And with DBAL you have the (almost) same QueryBuilder as the ORM (although the doc is sparse on the subject). I like using it, especially when constructing a query with optional parts. Also I'm not sure \ay handles transactions ?
That is more akin to word/levenshtein distance
So is DBAL if you are using one of the PDO drivers: - [Doctrine\DBAL\Driver\PDOConnection](https://github.com/doctrine/dbal/blob/master/lib/Doctrine/DBAL/Driver/PDOConnection.php) - [Doctrine\DBAL\Driver\PDOStatement](https://github.com/doctrine/dbal/blob/2.3/lib/Doctrine/DBAL/Driver/PDOStatement.php)
cool thanks for the help.
Spacing on "dependencies" is bigger for "up-to-date" - they should all be the same. The status text is hard to read.
I was curious about this as well.
Worth reading article anyway. : ) Thanks.
I read it back in 2006 and I didn't agree (and still don't) with his opinion. Most ORM frameworks have tools that allow you to query efficiently (DQL for Doctrine, HQL for Hibernate, LINQ to Entities for Microsoft Entity Framework) and the big ones on each platform allow you to either go schema-first (create your mapping files and objects from an existing database schema) or object-model first (create your mapping files and database schema from your existing objects). The problem with ORMs is that some developers assume they don't have to optimize their code anymore as they think the ORM will do it all for them. Not really. You have to think about your fetching strategy on a situation to situation basis just like you do with just plain SQL. Also, you really shouldn't be using an ORM for a small project.
You can do something like that from scratch with http://php.net/manual/en/function.levenshtein.php but I'd recommend plugging in to a search engine like Solr or Spynx. 
If doctrine 2 let's you *effectively* go schema-first, they're hiding that documentation in a cave. Their docs basically say "this is a terrible idea and doesn't work in Doctrine 2", which is *quite* the proof of the ORM-is-Vietnam argument.
It took me 15 minutes to set it up too but my trouble was configuring it for static assets like images and scripts. I use memcached and redis for caching output. I never actually figured it out so that I could use it in production but my initial results were really impressive. Getting the hit ratio just right and being able to cache specific requests but skip other ajax requests ... all that stuff starts to get really complicated.
&gt; I sometimes think I'm a fraud, but then I remember this, http://en.wikipedia.org/wiki/Impostor_syndrome
&gt; It doesn't look this way if you look at it using Coda Coda hides a ton of that detail from you. Some folks in my shop use it and constantly push mixed tabs and spaces.
Why this instead of silex?
Not sure why you are getting down voted to oblivion. You're right on both counts.
Hey man, great job with this! There is certainly room for constructive criticism, and yours is a young project with room to grow, but most of the comments I've read here are pretty ridiculous. PSR compatibility? Abandoning class.php? What exactly is the substantive benefit of stuff like this, beyond making purists feel good about themselves? Some people seem to think you *must* use composer *always* for *everything*, it seems. The 2006 approach works just fine for me, thank you very much! I'm developing my own PHP/MySQL library called [MeekroDB](https://github.com/SergeyTsalkov/meekrodb) and will definitely be looking to your code for inspiration in the future! I'd suggest making your documentation more comprehensive, and including some kind of unit tests. Doesn't have to be one of those monster PHP testing frameworks -- just something you can run automatically to make sure you didn't break anything in the last commit! :)
Yep, let's stop forward progress because 2006 is *good enough*.
Check out http://bufferapp.com/ - it lets you post to multiple twitter and Facebook pages at the same time. You can also schedule posts, you can edit exactly how the post will look like, and it even checks your page analytics to determine which times you have the most views and activity. Edit: Wrong site (buffer -&gt; bufferapp)
lol ... PSR. If it's mandatory and built into the language then it's fine, otherwise it's just some unknown group who called themselves "PHP Standards Group"
Don't be a dick.
I have a feeling OP somehow believes that the connection layer of an SQL connection is somehow supposed to be doing a lot more than it is, which is incredibly stupid. I've been using PDO for a long time and have never said to myself, "man this thing lacks feature ______". PDO provides a great connector between PHP and MySQL/PGSQL/MSSQL and that's all it should be doing.
That's because you do have some spaces in there, and GitHub uses a different number of spaces per tab than you've got Coda set up to do.
+1 Django alike, (yes I am bias) Few features missing, * Content negotiation * Multiple serialization formats * Auto pagination? 
I agree. Nobody cares which you decide to use, but be consistent or go home.
Nobody said anything about PSR-0. Don't invent arguments to make against people. Using ".class.php" is pointless, whatever autoloader standard you decide to follow.
We're not unknown, and we're called the "PHP Framework Interoperability Group". [Read this](http://www.php-fig.org/faq/).
You shouldn't potentially override `ATTR_EMULATE_PREPARES` in the constructor. There can be rare situations where people purposely want to enable that. At least make it known with a notice if you're going to overwrite it. ----- You may already be aware of this, but since you're extending, be *very* careful about the [LSP](https://en.wikipedia.org/wiki/Liskov_substitution_principle). It would be extremely counter-intuitive to a user of your class if he was using a `\PDO` that was actually your `PDO` and the behavior of your `PDO` differed from `\PDO` in a meaningful way. (Your `PDO` class does not currently violate it, but I'm afraid you're headed in that direction. [I haven't looked at the statement class.]) ------ Lastly: name your class something than `PDO`. With namespaces, there isn't a guaranteed problem, but you're just asking for trouble using a name like `PDO`.
Regarding the implicit LastInserID() on execute() and detecting if query starts with 'insert': You should change it to be explicit. Add a $returnLastId boolean argument or name the method executeWithId() or something. And get rid of the 'insert' detection logic. Why? A few reasons. First, not all tables have identity columns. Second, retrieving the last identity value is it not always needed/desired. Third, a query beginning with 'insert' doesn't necessarily mean that's the only statement in the query. 
A few of the PSRs are "recommendations" ie not compulsory ie tabs vs spaces and other useless crap. Don't forget it.
In other words the people with "voting rights" are just a bunch of people from frameworks I don't even like or use.
Thanks for the hint. I noticed that, too. Our current designer will improve it today. 
I can do all of yours with one line of code using my PDO wrapper: $rowsUpdated = $db-&gt;update($query, $params); or $results = $db-&gt;select($query, $params); I pass an array of named parameters into the method. Results returned are a complete array of data I can iterate through. Maybe you can do the same with yours so you don't need the separate execute and fetch statements tacked on for each query. Good on you for writing your own though. You'll find it much more lightweight and 10x faster than some heavyweight stuff like Doctrine.
Nginx has a very useful GeoIP module as well: http://nginx.org/en/docs/http/ngx_http_geoip_module.html Puts variables into $_SERVER array.
&gt; Firstly, does a service like this already exist? Yes! [Path: "Stay here, post anywhere. Send your Path moments to **Facebook, Twitter,** Foursquare, and **Tumblr**."](https://path.com/)
&gt; In other words the people with "voting rights" are just a bunch of people from frameworks I don't even like or use. You're completely free to use or not-use any of this stuff. That's the point. This anti-PSR attitude just reeks of insecurity. Nobody's forcing you to use it, or even pay much attention.
&gt; You're completely free to use or not-use any of this stuff. Yeah, but if you don't implement at least PSR-0 I'm not touching your libs unless I have no other choice. It really is a beautiful system, particularly if combines with composer and packagist.
But they're just self elected people telling people what to do and calling themselves a standards group. Is there even a single person who develops the core PHP code base in it? None of the community had any say in who got voting rights into the thing. That's why the docs have stupid stuff in them like forcing you to use spaces for indentation, instead of the correct way which is tabs for indentation and spaces for alignment. Completely idiotic.
Euh... [25.5. Reverse Engineering](http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/tools.html#reverse-engineering) And yes, it won't do 100% of the work for you... However it takes less than 10 minutes after to get everything working as wanted... A far cry from the 19 years it took for the Vietnam war.
And yet FineWolf above (and by extension everyone who upvoted their comment) is implying every project MUST follow EVERY PSR, which is absolute bullshit.
&gt; Nobody's forcing you to use it Except the [comment thread you are replying to](http://www.reddit.com/r/PHP/comments/1ht7dz/php_pdo_wrapper_that_doesnt_suck/caxpqeh) said the exact opposite.
Because, right or wrong, his post contains nothing useful or constructive. He's just being negative, and that === downvote.
No, what I said is that since this code is supposed to be included alone code from other people, it would be better for interoperability between code bases that this library follows the PSRs. If you do your own thing in your own little corner of the universe and your code will never be included in anyone's work, have at it your way. However the standards are important to ensure that **shared code** follow the same structure to avoid conflicts and to ensure uniformity. 
Lack of a feature isn't "stopping forward progress." Even if it's a good feature. Remember that the spirit of PHP is *getting shit done*, as expressed by most of the community leaders. You'd be hard-pressed to find anyone in the PHP FIG taking the sort of "it sucks if it doesn't use PSR-X" type attitude redditors here like to take. Constructive criticism is fine, but don't forget the constructive part, and check the attitude at the door please.
&gt; instead of the correct way which is tabs for indentation and spaces for alignment I always smile when I see people arguing for tabs for indentation and space for alignments. Open a file formatted that way in Github and it ends up looking [like this](https://github.com/gajus/pdo/blob/0807f7252ec0d19b343f62e0e4ea673601f363ac/pdo.class.php). Really, spaces only is the only sure method (without having everyone fiddling with their IDE settings to change the tab width) to ensure that your file is indented properly in any environment. It's not like there is a performance difference between spaces and tabs and there are tons of cons for using a mix of both (completely dependent on IDE settings, etc.)...
The people who vote on the standards and recommendations that are suggested to be used by member projects, are voted on by member projects. Anything else would clearly be madness.
Some tooltips would be nice for the icons on the left, not really sure what I'm clicking on in some cases.
[Aura.Sql](https://github.com/auraphp/Aura.Sql) from the Aura PHP framwework (a modular framework) offers a clean and standards-compliant PDO wrapper as well. I've used it in my projects and was very happy with the result.
Well that's a problem with GitHub then isn't it. How do different developers cater for different indentation widths in projects using spaces? 
&gt;ay\PDO will return false in case of a failure and instance of the PDOStatement otherwise. This is horrible way to make a chaining interface. If you're going to make a chaining interface, you need to return a consistent interface in order to maintain safe chaining. If any one of those methods return false, You'll get a fatal error about trying to call a method from a non object. Really you have two choices to fix this: 1) always throw an exception on failure so that it can jump out of the chain and be caught and handled. 2) return something like an Option type that can be mapped to those other methods.
Not really. [The tab character is supposed to represent spacing to the closest multiple of 8 spaces.](http://www.w3.org/TR/CSS2/text.html#white-space-model) Github is simply following that standard. It is you guys who are modifying what a tab is supposed to be.
If you'll note, [I feel like I did give constructive criticism](http://www.reddit.com/r/PHP/comments/1ht7dz/php_pdo_wrapper_that_doesnt_suck/caxpbb5)-- perhaps a bit terse but that's criticism for you. I do completely agree with you there: we, as developers, have our heads so far up our ass sometimes that we have a hard time seeing straight. However, it isn't just us "PSR supporters": Meekro is doing exactly the same thing only opposite, completely disregarding modern changes to the PHP ecosystem because "how I do it is good enough". That's fine, but we *are* moving forward and anyone who wants to hang out in 2006 is going to get left behind. 
Yes, you are unknown. You just belong to an "official-sounding" group called "PHP Framework Interoperability Group". **If it's not in the language spec or not standardized on the official PHP.NET's website then it's nothing**. Your so called group is only name-seeking org. Nobody needs to follow your standard unless it's official, mmmkay! There's no need for ASP.NET or PHP Framework Interoperability Group. It should already be in the language spec or the official homepage. You are not part of PHP's official team.
PHP-FIG is **not part of PHP's official team**. It's a self-proclaimed PHP police language group. We don't need that. most of php devs don't even know basic data structures and algorithm anyway.
In one interview I had, I was required to WRITE with pen and paper PHP code. No copy paste, no typing, nothing. After I finished what I could, they pointed out stuff like lack of tab indentation, syntax errors, etc. I kept telling them I couldn't test any of it. Why the hell would they want to test someone and not have them test their own code before handing it in? I'm glad I didn't get that job.
I've never used a Template Engine not baked directly into a framework, but in terms of PHP ORMs, I think Doctrine is definitely the way to go.
I might be wrong..but I believe the google app engine does this with PHP now?
The value of celery to me is in the library itself and the data structures and convenient methods that it provides. Yes I did mention Pheanstalk (library that talks to Beanstalk) but as I said they are the bare bones of the task queue. What I'm looking for is one level of abstraction above something like Beanstalk that will provide "task-oriented" capabilities. That's what Celery does. 
Either you have misunderstood me or I'm not understanding you. Could you provide more information as to what you are referring to?
Thanks that was interesting. I'm specifically looking for libraries that build **on top** of the transport mechanism. I don't care if the underlying thing uses Redis or RabbitMQ. Although it is good to have a choice there as Celery provides. Celery provides one level of abstraction above the transport mechanism which Beanstalk and Gearman are not particularly concerned with. If you have basic tasks Gearman and Beanstalk out of the box are great. You just add a key to represent a task, suppose "resize_image". And that will be associated to a simple function that will be called each time the task is supposed to run. If you are building things that heavily rely on tasks, you need a better abstraction on top of the simple "key" =&gt; function mapping. For example you'd need a "Task" class, then you'd want to be able to define how that task should be run, how often, at what rate, how many retries on failure, what happens if it fails?, what happens if it's successful?, where does the data of each task go? You may want to run tasks at particular intervals (e.g. every hour, ever monday morning, etc..) - which "Celery beat" provides very nicely. Then you may have a group of similar tasks, so you'd ideally want some inheritance from a 'base task' to share some characteristics between the tasks that are similar but slightly different. Also a task might depend on other tasks, and it may need to launch other tasks within itself. The logic for the things mentioned above is what Celery provides very nicely. Gearman and Beanstalk are not concerned with that level of detail.
Related: http://nikic.github.io/2012/12/22/Cooperative-multitasking-using-coroutines-in-PHP.html This seems to implement something very similar.
1. there is no "official team", there are only those with git access.. and that doesnt mean that implementers of RFC proposals are either the original writers nor authorities on PHP application development. Very few people listen to rasmus on application development, despite his status as the author of PHP. 2. Application development skill in php is completely orthogonal to VM knowledge. 2. Any sources on "self-proclaimed police group"? ... *framework* interop. group is exactly that: common standards for open source php frameworks that are part of, or subscribe to, the group. 3. ... &gt;most of php devs don't even know basic data structures and algorithm anyway. PHP developers are bad therefore they shouldnt follow standards? If PHP developers arent very good, surely that's the perfect refutation of "we don't need that". 
After seeing this, just submitted my own implementation of basically the same thing: https://github.com/nikic/iter There is one thing I don't like about your implementation, namely the requirement to pass `Iterator`s. One of the nice things about generators is that you can use `foreach` loops in the body, which allows you to work with *any* kind of iterable. Typehinting against `Iterator` looses this (in my eyes) pretty big advantage. Furthermore, something that is always worth mentioning in the context of generators: They are not rewindable. A lot of stuff requires rewinds though, in which case you can use workarounds like this one: https://github.com/nikic/iter/blob/master/src/iter.rewindable.php
I'm confused. What is the use case for your code? My two super-lazy functions are: function executeSql($conn, $sql, $values = Array()) { $sth = $conn-&gt;prepare($sql); return $sth-&gt;execute($values); } function querySql($conn, $sql, $values = Array()) { $sth = $conn-&gt;prepare($sql); $sth-&gt;execute($values); return $sth-&gt;fetchAll(); } 
Your implementation looks good. It is true that generators are not rewindable. I think having a library like this encourages the use of many short-lived iterators, so I'm not sure that will be a huge problem. If it turns out to be, I may consider doing something similar to your rewindable generator. The reason I chose to require iterators is really for consistency. There is one function, zip, that requires the ability to iterate two sequences at the same time, something that I could not work out how to do without either recursion (bad idea in this context - it's quite likely you'll get a nesting error) or the extra control that having the full iterator interface available gives you.
then PHP's official team should have it in the language. PHP-FIG is not an official PHP, despite the name. Just some people looking to put some police badge on their profile/company/organization. We don't need that and we will never follow PSR. If it's a standard then it **must** be in php.net's official website. Not some self-elected PHP police language group. Looks lame to those who know but since most php-devs are sheep and don't know anything anyway so they'll follow you. It sounds "official" but it's not. If there's a standard then it must be on the official PHP's website, got it? We don't need some wannabe PHP police saying things like "awhh it's so 2006" to other devs no matter how bad his code is. And yes, that ".class" comment of yours is silly and childish. You're being condescending to that guy and you look lame, you're a wannabe. That was unnecessary no matter how bad/good that guy's code is, you don't need to do that to him. And yes, I've read some sources from your github repo, you're just a wannabe. Now how does that feel to you when I said that? A standard like FIG won't hide the fact that most php devs don't understand basic algorithm &amp; data structure. Lipstick on a pig.
**Your code is PDO while this is [MySQLi](http://www.php.net/manual/en/book.mysqli.php).** It's a bit more complicated with prepared statements in MySQLi :)
&gt; Now how does that feel to you when I said that? lol... the whole reactionary thing looks a lot more desperate and pseduo-intellectual than an off-hand comment about the needlessness of a file extension and the history of a language. If you knew anything about PHP's culture, you'd know that php.net will never adopt or promote development standards. The community is far too diverse for php.net to define paradigms or standards of development. However if you're going to write OO code and ask for feedback on it, you're going to get the major open source design consensus. Many major frameworks and OO open source tools are advocating composer as the principle install/distribution mechanism and almost all the major ones are on the FIG voting block. It just seems like your dissenting from it because you can; you have yet to offer any critique of any FIG standards nor why one should prefer "one's pet conventions" over the community consensus. Without a meaningful critique of the standards nor any better alternative proposed, why are you suggesting to someone that they "do as they wish" when this harms the adoption of their project, it's ability to integrate into the now standard open source workflow (composer, etc.), and limits their exposure to and understanding of this consensus. You have yet to offer anything of value and all of your comments just seem desperately reactionary, using rhetoric rather than justification and grossly mischaracterizing both the comments here and elsewhere. 
PHP-FIG **is** just a pet conventions. You can't argue with that. If you're mature enough not to attack others with comment like "it's so 2006" then I wouldn't have even come and defended the guy. Nobody appointed you to be PHP police. Also this PHP-FIG standard isn't being adopted as the official one so stop pushing it to others and stop belittling the guy, okay. Your code on Github isn't any better than his.
Agreed - that article looks like a similar concept. Probably more flexible but also more complicated. My implementation works purely on the concept of promises. However, it suffers from the same 'nesting' problem that you implemented 'stackedCoroutine' to overcome, in that only those generators directly yielding to an 'AsyncAction' can benefit from the additional functionality.
Yes, it's a "pet convention". All conventions are "pet conventions". They become standards when a consensus forms around them... like FIG. &gt; If you're mature enough not to attack others with comment like "it's so 2006" then I wouldn't have even come and defended the guy. Well his post title was arrogant, I didnt feel like being extremely gentle. "PDO Wrapper that doesnt suck"... with pre-FIG, pre-Zend, etc. era PHP conventions.. NB. I dont peg my ability to write code, or evidence of my ability to write code, to my github page. Im not a open source contributor and my github is largely just bits of random crap that were larger than a paste bin file that i needed to save. My last PHP sub was two years ago.. 
Related: http://taskjs.org I have a similar proof of concept lying around somewhere. Glad to see someone else pick this up. This has the potential to make evented code way more maintainable. FWIW, here's a gist of what I did, based on @nikic's blog post: https://gist.github.com/igorw/5950673
Actually, PSR-1 and PSR-2 does have a few points for interoperability: - UTF-8 encoded files without BOM (biggy for interoperability) - No short tags (other than short echo which you do not need short-tags to be enabled to use them since PHP 5.4) - Section 2.3 on side-effects (PSR-1) If you are accepting a logging mechanism (which the library above does), PSR-3 has a huge impact on interoperability.
Yep, that post was good, constructive criticism, but the one I responded to was not. While there *are* substantial benefits for PSR compliance, composer use, etc. (which Meekro doesn't apparently understand or agree with), it doesn't make code that doesn't make use of it inferior, or even deficient in a general sense. That's just a really elitist point of view. I guess what I'm saying is that it's much better for the community as a whole if we limit ourselves to wooing devs into using these kinds of things by touting the benefits, rather than considering them inferior and/or berating them for not using them.
It might not be official, or baked into the language, but the group has made a standard for the group to use, and the group is enjoying using it. As a fun side-product lots of other developers are enjoying using it, and that's great for them and for us. If you don't want to use it then dont, but shouting at people with bold-caps on Reddit is not going to help anyone. The "PHP" at the start is there because we're talking about PHP. If we were talking about JS we'd be the "JS Interoperability Group". Simple as that. Read the aim of our group which is right on the homepage. &gt; The idea behind the group is for project representatives to talk about the commonalities between our projects and find ways we can work together. Our main audience is each other, but we’re very aware that the rest of the PHP community is watching. If other folks want to adopt what we’re doing they are welcome to do so, but that is not the aim. Ok? We're not coming to take your tabs away, do what you like, and do it without all of the complaining. 
&gt; There is one function, zip, that requires the ability to iterate two sequences at the same time Yep, that one requires real iterators. But it's not really hard to convert an iterable to a real iterator :)
So to summarize: * Adding a composer.json would make installation much easier. * DocBlocks are nice. * Method chaining interfaces should not have random false responses in some cases. Exceptions would help. * Implicit INSERT return ID assumes ONLY INSERT queries are being used in this batch. * Implicit INSERT return ID assumes you have an auto increment ID to return. * Overriding ATTR_EMULATE_PREPARES is no good for folks who want to set this themselves. * ".class.php" is some ghetto old-school approach, and makes this incompatible with most modern autoloaders. PSR-0 would of course be nice, but a basic general convention is "File name = Class name". * Some sort of standard should be used. It's [super inconsistent](http://d.pr/i/arHe) with itself. PSR-1 or PSR-2 would be nice, but really pick anything and stick with it. * defferedConstruct() looks scary. You'd be better off picking a project name for this and making a new tool, instead of trying to wrap the exact API with different default behavior. With all of that said, this doesn't do anything that I haven't seen been done better, with more documentation and more unit testing by at least 10 other packages. Unless this is just an education experiment I'd strongly suggest spending your time on something else.
Agree. And if you use a Mac, it's really easy to install xdebug trough homebrew. Got it up and working very fast :)
This isnt an abuse of yield; generators are one of the ways of implementing concurrency. 
**OO-wankery - AWESOME** I see too many of them on StackOverflow. *Objectualize everything!* Regarding your test, if you asked me how I'd do it... I'd tell you. Would I do it? For a 5-digit mo. salary... maybe ;) **PS**: *This task is not demanding at all. It's actually not a bad test for some mid-level stuff. But you won't get a senior to bother with this in writing.*
I decided to remove the requirement for iterators. All functions now accept any traversable object, i.e. an array or anything that implements \Traversable. :-)
That title was a bit tongue-in-cheek... ;-) Of course, the primary use-case of generators as implemented in PHP is iterators...
&gt; It might not be official, or baked into the language, but the group has made a standard for the group to use, and the group is enjoying using it. So stop making it sound like official. If Rasmus Lerdorf had appointed you to be the police in PHP world and if your standard is the official one as in PHP.NET's official website, then it's a different matter. If mjburgess hadn't called the author of this thread "so 2006" over some file name ending with ".class.php" I wouldn't have even posted any reply defending the author. No need to insult the other guy, and especially not over tab or whitespace. Most of PHP devs don't even know basic data structure &amp; algorithm and some pet convention standard ain't gonna fix it. It's like putting a lipstick on a pig. It's nice to follow the convention and make code more "readable and standard" but no need to insult him. This ain't Python and if it's not baked in the standard and his code is working then it's fine. I don't care about PHP-FIG's PSR **unless it's official from PHP** and it's mandated by PHP. Until then, it's nothing but a pet convention.
Aaaand I'm out.
Great Job! I am beginning to work on some small projects on the side so this is inspiring. How long has it taken you to develop your CMS up to this point? Why did you chose CodeIgniter? 
I started and stopped a multiple times but after I got the foundation it was like 3-4 months. Probably could have been less but I'm lazy student. I chose Codeigniter because it was my framework of choice 2-3 years ago and I knew it the best. Today I'd probably use something else but I like it the way it is for now.
Too simple, needs to be more complicated.
Reading material for OP: http://php.net/manual/en/language.exceptions.php
It's slightly higher-level, that's all. 
Nope - no threading library. It uses cooperative multi-tasking, so this is not a fudge but by design. Note that it is designed to be asynchronous, not parallel, and should be used with some non-blocking I/O library like React.
What kind of application are you talking about? TCP itself has error checking and delivery validation. You could just build on top of TCP.
You need to be more specific as to what your application needs to achieve, data volume, and what your restrictions are. 
Oh, that make a ton of sense. Thanks! Is PDO built in, or do I need to install it?
What version of PHP and what value are you calling the function with that causes the behavior? I just tested this on an Amazon EC2 micro instance running PHP CLI 5.4.15, and after 3 minutes `memory_get_usage()` called right after `gc_collect_cycles()` still only reports ~ 250 MB. I tested with `calcExp(gmp_init('99999999999999999999999999999'))`
a) How many iterations is the for loop on line 8? b) How many iterations is the while loops on line 13? Could it be that memory is being entirely consumed during lines 13-17 before clearing? I haven't personally had to trace memory leaks in PHP, and unfortunately do not know any tools that would aid in doing so other than possibly xdebug's profiler... I hate to be the one to say it, but wouldn't this kind of task be better suited to a language such as C?
a) the for loop is where the main work is done, it could be iterating trillions+ times depending on the number being worked on. b) this while loop runs very few times and may not run at all depending on the input number being worked on, basically this loop tests if the number divides evenly (with no remainder) by the for loop iterator, and if so, it loops and continues to test for an even division until the divided number reaches 1 or no longer divides evenly. It probably is more suited for C, but I am working a lot with PHP lately and wanted to see if it could be done.
Is Celery like gearman?
It's build in but you might need to enable it in your php.ini.
&gt;wouldn't this kind of task be better suited to a language such as C? This was my first thought as well, though it shouldn't really matter here since all the actual work is delegated to GMP's native (C) library via the wrapped PHP interface. It's 4 AM and I'm probably overlooking something, but I don't see any potentially problematic looped string concatenation or anything to exhaust the heap. There's a `gmp_add()` call in the for loop's update expression, but that is essentially `$i++` so... I did see some references to a memory leak related to GMP in a build of PHP 5.2, so I'm curious to know what version of PHP OP has installed.
ok, just added a print statement to the loop to print out the collected cycles and it is consistently 0 for every loop iteration... but the function is still taking up all available memory with this loop.. hmm.
I second that. [The ISS](http://en.wikipedia.org/wiki/International_Space_Station) now has a quite reliable internet access thanks to (among other things) TCP features. So your app, no matter which conditions it runs under, should work just fine.
From seeing other peoples comments, I would assume its down to the version of PHP that Slashmonkey is using.
yup, I'm aware of that issue, all instances of gmp_cmp() in my code are using gmp number resources for both arguments, so this shouldn't be an issue.
&gt; gmp_cmp($gmpModVal, "0") Isn't the "0" a literal string? Just trying to understand myself ;) 
Cool :) I hope you're right! I'm sorry if I came off as too apologetic. (JOKE! I swear!) 
its mainly some research im doing for a class projects on networks so its mainly theoretical approaches . so anything goes its mainly its about providing high availability for sensors used in an early warning system. and the sensors stream data to some servers which analyse it. im looking for the best way to optimaly have these interconnected with unnecessary chatter as much as possible. 
actually it turned out to be a memory leak originating from gmp_cmp().
Why not hire a guy who contributes to open-source ? :-)
Do you want a framework or a cms? anyways checkout this if you want a light framework http://silex.sensiolabs.org/
Yes and no. Celery has a focus on giving you the logic and tools for **running the jobs/tasks**. It gives you pre-made tools that you can use to build systems that have hundreds of different types of tasks. Gearman is focused on managing the storage/queue side but doesn't care what you do once you get the job out of it. Most examples out there are overly simplistic and therefore do not highlight this difference. For example in the case of a simple "add(a, b)" function, Gearman and Celery look very similar. In both cases you put something like this in them, "add", "2", "2" Then when the worker waits for jobs, and sees this: "add", "2", "2" Now it knows it should call the "add" function and pass those two parameters to it. So it does, add(2,2) =&gt; 4 But when you have many complex tasks the difference starts to show. Celery will guide you through the whole process of taking the job out, running it, putting its result somewhere. That's why I call it "task-oriented". Because it gives you base classes, helper methods and data structures that define how the job should be executed, what happens if they fail, how many times it should be retried, where its output will go and all this stuff. 
beanstalkd, Beanstalk is something else
As of PHP 5.6 you can also write your code as follows (though I have no idea what it actually does, so this is a blind translation): //$gmpC input must be a gmp number function calcExp ($gmpC) { $gmpSquareC = gmp_sqrt($gmpC); //search for integer val that evenly divides product of equation for base C for ($gmpNum = gmp_init(2); $gmpSquareC &gt; $gmpNum; ++$gmpNum) { $expC = 0; $gmpTempC = $gmpC; $gmpModVal = $gmpTempC % $gmpNum; while ($gmpModVal == 0 &amp;&amp; $gmpTempC &gt; 1) { // is the order of these lines right? $gmpTempC = $gmpTempC / $gmpNum; $gmpModVal = $gmpTempC % $gmpNum; $expC++; } $gmpCheckC = gmp_pow($gmpNum, $expC); if ($gmpCheckC == $gmpC) { $baseC = gmp_strval($gmpNum); return array('base' =&gt; $baseC, 'exp' =&gt; $expC); } } return false; } As a nice extra, there also are no more leaks in GMP and it will run faster :) Further reading: https://wiki.php.net/rfc/operator_overloading_gmp
Thanks I will check it out. We desperately need something like Celery in PHP. We knew we needed it even before we knew Celery existed. So I was about to write something myself but soon I found out it's too much work to get right. Once I saw Celery I was re-assured about that decision. There are too many things you can get wrong so it's not really worth rolling your own just to use it for something else. 
Yes good question! I think if I could find a CMS that has a logical and tidy system for developers to add custom code then that would be best. I think if the project was big enough to warrant using a framework I can probably justify the cost of a .Net server and use my normal tools. 
&gt; I figured that since it was only "0" that it would have no impact when I put it in [/r/lolphp](http://reddit.com/r/lolphp)?
It sounds like MQTT is what you're looking for. 
That is a problem with php cmses. You either have a really good cms but crappy and complex code like drupal or wordpress or you have a cms with crappy functionality and not that many features but with good code. The sad part is that it takes the same amount of time to really learn drupal, to build your own cms system.
&gt; I last had to work with it professionally 12 years ago &gt; I tried Wordpress So yeah, PHP has changed *a lot* since that. Coming from .Net, you'll feel more confortable with "modern" frameworks like Symfony 2, Zend Framework 2 or Laravel 4. But these are not "light frameworks" though. As suggested, Silex is a reference as a micro-framework today (but I doubt anyone built a CMS on top of that). The thing is these are just frameworks for building a website from scratch. If you are looking for a CMS, I highly recommend that you seek a CMS built on top of these frameworks (there are some, I can't remember their names right now). That will guarantee you: * clean/understandable code * extensibility for plugging in your own code * compatibility with most PHP code/libraries developed nowadays (e.g. libraries distributed through Composer)
Ok thanks for the feedback - I'll have a good google around those names and see what I can find.
https://github.com/bcosca/fatfree
You might be interested in the Content Management *Framework* being developed on top of Symfony 2: http://cmf.symfony.com/
I've heard it said that Laravel 4 took a lot of inspiration from .NET. Its creator Taylor Otwell came from a .NET background and supposedly built in a lot of features that he thought was missing from other PHP frameworks. I've never been a .NET programmer, so I can't personally verify all that, but I can say that Laravel 4 is pretty damn great. The only CMS that I'm aware of for Laravel 4 is PongoCMS. However, if you have time to wait, PyroCMS is also working on a Laravel 4 implementation, and that ought to be good too.
Yes - this looks exactly what I was looking for! I never thought to call it a content management framework, although that is exactly what I use in .NET at the moment.
we're currently in the process of tweaking this to allow for continuous testing, but currently: - Developers code and test on the Dev server - When code is pushed back to git repo - script is run to tell prod server to pull git repo, making changes live If you push to master in this system, you're writing off that you want your code in production. Each dev is responsible for testing their own code and is responsible for issues that arise in prod. Mostly what I do if I'm working on something non-trivial is use a branch until I'm absolutely ready for prod, Master is considered production only. my flow is to pull from git using git bash to my local windows machine, code in phpstorm with project set to automatically upload to dev server. test in browser and phpunit on dev server. push to prod from local machine using git bash. others use git/vim directly on the dev server. We're looking into putting a test server between dev and prod, but I and another guy hired 2 months before me were the first to utilize TDD and unit tests so it was never considered previously.
Yeah, like no other language has a memory leak in an out-of-the-ordinary extension.
Submitted a [bug report](https://bugs.php.net/bug.php?id=65227) for it. Edit: Apparently might already be [fixed](https://github.com/php/php-src/commit/7713b8c2ac2d8fbacaf897ff0c0a202a7b7abf49#ext/gmp/gmp.c). It was probably related to the prior version of gmp_cmp not freeing temp_b (derived from the second parameter).
Started migrating our code repos to GIT, but in SVN we had various branches setup for the various environments and SVN hooks that dealt with deploying to the various sites.
As I have done more and more programming, I find that I enjoy things like these more than the actual coding. Maybe it's just because it's a new frontier, and new things to learn. This is what we currently do. 1. Programmers code against a working copy of a SVN repo on a subdomain on a shared DEV server. Each programmer has their own subdomain. We will likely be switching to Vagrant at some point for this aspect. Code is frequently committed to SVN at this stage. 2. When code is ready for promotion, one or more commits, comprising working on a ticket, gets merged into a Review working copy, which just resides on our file system. The post-commit hooks triggers a ReviewBoard code review. 3. When the review is completed, the code is merged to a working copy of a Test branch on our local file system. Someone then updates the Test server's working copy. It's frequently the same programmer, but not everyone has this access. 4. Once testing is finished (sometimes by the programmer, sometimes by the stakeholder) it is merged to a local working copy of production. The real working copy of production is updated by someone with access rights. Our old process was just to BeyondCompare code over when we felt like it. That was a big mess. The new ways has its advantages, it's easy to go back when things don't go well, and it's easy enough to merge code to the next branch, even if you didn't make the changes, or if it's been a long time. The old way was impossible to tell what changes were apart of what ticket. But the downside is it's kind of time intensive. It's several repetitive steps to promote code.
We do all our coding on the production server, I lost my job today because the company is run by total morons. Happy coding!
We use git with branches for test and stage that we merge up to master. Once in master we generate a tag which we use as a release version to production through Jenkins. Jenkins also builds into the test/stage environments from their respective branches. We could in the future (should the team become larger) lock down things further and require pull requests to act as a gateway for code reviews.
My team's process is based on the ideas below. We use git. * Master branch can be deployed at any time by ranking devs (there are three of us on the 10 person team) * Nobody can push directly to master. All work must be done in a separate branch, then peer-reviewed (via pull request) before being merged into master by a ranking dev. * We then have a script that SSHes into each of our main servers (hosted on Amazon EC2) and essentially just runs git pull to pull the latest master * We use Github for tracking commits, branches, and pull requests. * We have a staging server for testing things with live DB data. For instance, if you need to check out a bug that is difficult to reproduce locally, then we can SSH into staging and check it out there. * We have other temporary servers that allow for group testing of individual branches. If I make a branch that has a photo gallery generator, then we can spin up a temporary server and everyone on the team can use the same server for testing. This is especially helpful for our QA team who might not necessarily be coders. * On our main project, we have a script that resets the database into a predetermined state, so that if any of us want to reproduce a bug or run a test, we can guarantee that we're using the same information. It's a very small database at this level, so it's really fast to set up and reset. It does present its problems though (the reset state isn't very complex, while our main web app can have very complex data) * In our newer projects, we're using virtual machines to handle the predetermined state for us. We can spin up a VM in minutes to have the entire environment set up exactly the same for each of us, and this environment mirrors production exactly. I highly recommend coming up with a set of conventions for your source control (and I recommend git), and I also highly recommend the use of VMs to ensure that your environments are all identical, even if you're on different machines or physical locations. The staging servers are optional, though I personally find them to be incredibly useful. Hope that helps. 
If this one has been fixed, this same script has caused me to find another bug in gmp, after I fixed the memory leak issue: if you iterate a loop more than 2147483647 times and create a gmp number in each iteration, it causes an integer overflow on the gmp number resource IDs setting the last one to -2147483648, causing a PHP Warning and inability to find the gmp number. This can be reproduced with the following code: function calcExp ($gmpC) { $gmpMax = gmp_init("3000000000"); $gmpOverflow = gmp_init("2147493600"); $gmpOne = gmp_init(1); for ($gmpNum = gmp_init(10000); gmp_cmp($gmpMax, $gmpNum) &gt; 0; $gmpNum = gmp_add($gmpNum, $gmpOne)) { $gmpTest= gmp_pow($gmpNum, 2); if (gmp_cmp($gmpNum, $gmpOverflow) &gt; 0) { $test = gmp_strval($gmpNum); print $test . " = "; print $gmpTest . "\n"; } } return false; } $num = gmp_init('1094189891312342345461854'); print "\n"; calcExp($num); Note that this code took approx. 12 minutes to run on my machine before the overflow occurs.
Do you happen to have time to compile git-master and try your script? I might do it myself if you don't, but if you could check whether the issues are resolved in git-master, that'd be very helpful. Chances are, we'll just merge nikic's fixes into 5.4.18, since it eliminates a number of issues, but knowing that they are indeed eliminated by the change goes a long way in a cost/benefit analysis.
yeah I can do that. I'll report back with my findings.
I have to disagree for new CMS's based on Symfony. That's starting from a good codebase. The only problem with those is that they are young, so maybe not feature-rich.
You should consider having your production environment run on tags and once a tag is updated, you never update it you always create a new tag. Then you can be certain that accidental updates/git pulls do not occur and break your production environment.
git + capistrano
What do you do for DB updates? Is that just a manual run?
Git. Each developer has a branch, there is also a dev branch (vhosts for each dev). And when we push to master we have a hook that deploys the code to the production web server. We're a small team, anyone can push to master, we don't really utilize peer review as much as we could but we all "know what we're doing". For my personal at home projects I pretty much do the same thing except I use bitbucket because I can have free private repo (You pay to add more users, rather than git that allows many users and pay for private)
Is there any Symfony2 based CMS - even a simple one - that you would recommend? We're going to be migrating a sizeable amount of code to Symfony2, or potentially Silex, from a custom framework (built in the days when there weren't any good framework options - don't hate me!). These are web apps, but they occasionally have light needs in terms of forward facing content. I've done some looking around, but the sheer number of partially done projects is a little difficult to sift through, especially for someone just getting familiar with the framework.
Yeah manual. We're using postgres so I have PGAdmin3 that connects to both my test db and the production db. When I'm emailed from the dev, it will contain the sql if necessary. I'll review the sql, run it on my local dev when I pull the code and test locally. If all is well, I'll execute that code on the live db before i pull the code to production.
y no reply over this great wrapper? after skim over the api, im pretty darn sure its really great wrapper..i need to replace my wrapper with this one..
&gt;I lost my job today because the company is run by total morons Surely there's a story to be told here?
Have you looked into sing Capistrano for deployments? I've been using it (well, capifony) for Silex deployments and it's great for things like multiple servers and deploying via specific branches to different environments. 
Ok, I did some testing and I have some good news, and some bad news.. The good news is that my most recently discovered bug (reproduceable with the code above your comment) seems to be fixed in the latest 5.6.0-dev build of PHP, since gmp numbers are no longer referenced from a resource ID with an overflowable integer attached. This bug still exists in all other versions of PHP including the latest 5.5 stable release. ~~The bad news, is really bad. The original memory leak that I first made this post about does exist in 5.6.0-dev, but not only does it exist for literal string values as the second argument of gmp_cmp(), but the memory leaks just as bad using the gmp numbers, so 5.6.0-dev is even more broken in this respect then all other PHP versions.~~
Thanks for doing the legwork. Would you mind commenting the same (with a bit of additional context) on the bug report I linked above? I'll poke nikic the next time I see him, to mention that he introduced a regression with his changes.
Capistrano is great. We have a custom solution that is just a really simple script that we can run without having to install anything or require any dependencies. In short, we just don't need Capistrano, but it really is a good tool if you don't have anything set up now or don't know much about deployments.
Actually you can scratch that last bit about the bug being reintroduced, turns out it's a completely different bug causing another memory leak. I reduced the code to make sure that it was in fact related to gmp_cmp, and it turns out what is actually happening with 5.6.0-dev, is that if you assign a gmp number in a regular for loop and call gc_collect_cycles(); in the same loop, it causes a memory leak. Having either gc_collect_cycles() or assigning a gmp number on its own in a loop does not cause a leak to happen, but for some strange reason having both these things happen in a loop will cause a leak. You can reproduce with the code below: function calcExp ($gmpC) { //make sure gc is on gc_enable(); for ($i=0; $i&lt;2000000000; $i++) { $gmpTempC = $gmpC; gc_collect_cycles(); } return false; } $num = gmp_init('1094189891312342345461854'); print "\n"; calcExp($num);
Wait. I think I've worked where you were working. Was your boss Australian by any chance?
 Wait. I think I've worked where you were working. Was your boss Australian by any chance? &amp;#12494;( &amp;#94;_&amp;#94;&amp;#12494;) -------------------- Let me fix that for you (automated comment unflipper) [FAQ](http://www.reddit.com/r/FIXES_YOUR_COMMENT/wiki)
&gt; Magento &gt; $6/month shared GoDaddy hosting Bloody hell. Magento is a beast at the best of times, that must have been what, one or two concurrent users max?
Relevant: http://www.meetup.com/Front-Range-PHP-User-Group/messages/boards/thread/36043752
For really simple stuff like GET requests where I just need to know if it worked (200) or not (404) I just use file_get_contents and check for FALSE. If have to do multiple HTTP requests in my code I'll wrap libcurl calls a function and deal with return codes in a single place. I can't think of a case where I've had status codes scattered around my code. 
I usually browse sites like dribbble and behance with hopes to come up with an awesome design idea, then after two or three hours of despair and depression I give up and get drunk. But seriously, I try to keep it simple and follow basic typography rules, IMHO having a simple site which is easy on the eyes is enough (for a start).
Not to sure what you exactly mean with "high latency low bandwidth" but usually, like you already mentioned, you decouple your application and build it around a message bus. I strongly suggest RabbitMQ over ActiveMQ. By implementing your application around a message bus you're in a position to decouple your web-tier from your business tier which can greatly improve the scalability of your architecture. You also might want to have a look at ZeroMQ, which isn't a message bus, at least not in the Enterprise sense of the meaning.
A whiteboard
Capistrano if it's a complicated and mission critical site. Manually with git if it doesn't matter if the site occasionally spits out an error or two while I'm updating.
^ + git-flow
Paper then Balsamiq
Not only that, but foreach is easier to read and maintain. Unless you are iterating millions of items often, or doing very complex things with the values in this array, the real difference between either FOR/FOREACH/WHILE won't have an impact... i.e., don't prematurely optimize.
agree. coding a mockup seems to be overkill
&gt; shared DEV server No thanks.
I second Balsamiq, especially the Google Drive version.
I totally understand where you're coming from. For the first year out of uni I did c# web development and then I moved cities and have been doing php ever since. The most frustrating thing about c# is the cost of the stack. PHP is nice and all but I do miss c#. Honestly, I would consider looking at python with django or something similar. That way you can get a micro instance from amazon for cheap as anything and still manage the server yourself. The other advantage is you might start using python along side your c# for little worker scripts. It might pay to learn how to manage a linux server too. It might not boost you professionally but it might be useful if you ever want to get away from MS. 
As I said we are switching to a bunch of VMs but its not as bad as it sounds. We all have our own working copies and no one shares source files. The only downside is the single point of failure. If the dev server is having issues productivity is basically zero. 
&gt; You should consider having your production environment run on tags and once a tag is updated, you never update it you always create a new tag I like to use branches. So if you're deploying version 2.0, then... $ git checkout -b v2.0 $ git push -u origin v2.0 And then pull in the `v2.0` branch to the production server. Same idea. Git probably treats them the same (everything is a commit). 
I miss understood what you meant. I thought you were all coding on the one server. I think I need some sleep hahaha
Looks to be quite useful! Thanks!
Simply rule that works fine 99% of the time: If you can use foreach, it's probably foreach. See [this answer on StackOverflow](http://stackoverflow.com/a/13654298) for more info. But really, this isn't worth investing effort in unless you profiled your application and found a bottleneck in loop overhead (rather than the actual code inside the loop). While I'm sure that there's workloads like that, they aren't quite common.
You can still do branches, just for staging and development. Tag it, with v2.0.1, v2.0.2, v2.0.3 for production.
I've recently discovered Gumby, which I've found I quite prefer over Bootstrap, although not entirely sure why, maybe it's because it's not as widely used
At Etsy, we use continuous deployment, with a tool we built called deployinator: https://github.com/etsy/deployinator
&gt; Balsamiq Neat, found something called [Pencil](http://pencil.evolus.vn/) which iirc a free alternative.
Awesome app called pen and paper. Comes with a stylus with built-in haptic feedback. You can use the stylus on literally any surface, but you can only save your work to a document if you are using the surface that comes with the app. The app's visual design is highly skeuomorphic, but I find the skeuomorphism doesn't get in the way too much.
I'm not even sure what I would use CI for. I am a bit biased since I mainly use Yii. Sounds like EllisLab doesn't want to stick more money into CI.
Was going to post the same thing, I took a very brief look at the first video last night and I thought it was pretty well done.
The predecessor to async/await in C# actually did something very similar.
The answer is that the answer is too complicated to give. No, one is not more performent or memory efficient in **all** cases. Each will be "more" efficient in a certain realm. Also, notice that they are not doing the same thing. One is destructively iterating **backwards** over the array, and the other is simply iterating forwards. If I could give you one piece of advice, it would be to avoid optimization in cases like this. In fact, avoid it in most cases. My thoughts on optimization: [On my blog](http://blog.ircmaxell.com/2011/08/on-optimization-in-php.html). Just use what's more readable (the foreach), and be done with it. It's not worth your time, or anyone else's to worry about the performance of this...
Hipster
Nooo, I just started using it. It's going to turn into aspdotnetstorefront under Vortex, I just know it.
Yii: the framework where literally everything is a model, the autoloader takes 5 hours to fully understand and where caching doesn't exist.
[Caching in Yii](http://www.yiiframework.com/doc/guide/1.1/en/caching.overview) and [Understanding the Autoloader](http://www.yiiframework.com/wiki/165/understanding-autoloading-helper-classes-and-helper-functions/). I hope this helps with your understanding of Yii!
sigh ... guess I'll be using Symfony or Laravel moving forward now. 
Uhh, I was referring to caching DB results. Since the main feature of Yii is the abstraction of SQL away from the programmer, there is zero caching built in. Everything is direct access to the DB. Also, I understand the autoloader, I was being facetious. The autoloader is a monster and way too complicated. This is what an autoloader should look like: spl_autoload_register( function($name) { require(str_replace(['\\', '_'], '/', $name) . '.php'); }, true ); The result of Yii's awful autoloader: you need a class map, pointing certain file names to their proper directories. That's a terrible and very unintuitive design. Not only that, but you cannot name a class file after the class itself. Lets say I have a class called `foo_exception`, I cannot put it in a file like this: `foo/exception.php` because Yii's autoloader looks at the final part of the filename `exception` and checks to see if any classes by that name exist already, if it does, the file is not loaded. Since `exception` is an existing class in PHP, the file is not loaded. So the only way to have this exception, is to name if FooException, and throw it into a giant folder full of random classes that have nothing in common with each other. Yuck. Awful design.
Where should CodeIgniter go other than the scrapheep? I could see releasing a CodeIgniter 3.0 perhaps but why? There's already PHP frameworks that do what I imagine that 3.0 release would aim to strive for. There's definitely a brand name there with caché. I'm not even trying to be facetious, can anyone suggest a strategy of where the project should go?
&gt;I also think it’s a good time to put CI to rest. I guess the devloper came to terms that turning it into a modern framework would require a LOT of rewriting at this point. Independant of the new owner I don’t think there’s going to be much new coming to CI anymore. This sums it up, really. CodeIgniter was designed for the bad old days of PHP4, and it hasn't grown up too much since. There are tons and tons of alternatives. What interests me is EllisLab's plans for their other products. Isn't their ExpressionEngine CMS built on CodeIgniter? If they're abandoning CI, I suppose that means it's going to get a rewrite with something more modern soon?
If I'm not mistaken, ExpressionEngine runs a very modified version of CodeIgniter. I've been told by EE devs that it is so modified it might as well not be called "CodeIgniter".
OOP is difficult for self starters like us. Your best bet, is to find the closes code school and apply. 
While I like reading all of your complaints, I'd rather read about what framework you use and why.
CodeIgniter 3.0 has been ready for about a year but has not been released, mostly because EllisLab would not dedicate their designers time to finish designing the documentation they merged prematurely without consulting the reactor team. With that said, 3.0 does not make it a modern framework, that would require a total recode, which would be entirely pointless.
I agree. Bringing CodeIgniter up to snuff would require a complete and total re-write and a complete, fundamental re-think of the architecture. It wouldn't even remotely resemble CodeIgniter in its current form, and there are lots of really good frameworks that are doing that work now. FuelPHP is pretty much technically CodeIgniter 3 anyway depending on who you ask. There's no shame in letting CodeIgniter retire. It did good work for a long time. 
https://github.com/neoform/PHP-Neoform I use it because... I wrote it. But more specifically because every framework I've ever looked at was terrible in some aspect or another. Disclaimer: I don't expect anyone else to use this code base. I wrote it for my own needs, and the documentation is nowhere near complete. I put it on github for the off chance that it might be useful to someone else. Edit: Why am I being downvoted for merely replying to his question?
I've despised Ellis Labs ever since an Expression Engine project fell on my lap a few years ago.. really, really don't like it.. and I've never wasted my time with CI.. I remember this dev I sat next to was raging about removing dozens of ini_set('display_errors', 0) .. funny stuff..
I feel the same way. I created a site for my app using CI based on an old coworker's recommendation. I guess this post is telling me what my next step is going to be. What are some alternatives to CI? I've heard of Laravel and Symphony. Are there other, "better", alternatives out there? Which is considered a better "general" framework to work with that also has a slight learning curve? Edit: The post mentions some alternatives, "Slim, Yii, CakePHP, Zend, and Laravel" 
From what I head on this subreddit, Laravel seems to be a popular item nowadays. I personally cannot give an opinion of it, since I have never touched it. Depending on where CI goes, my company might have to port our entire system over to Laravel or something else. I hope whoever ends up with CI will continue to support it though.
You don't have to use a framework you know. There is no "law" which says "Thou shall use a full stack framework for every tiny thing you do". Personally, i tend to avoid using frameworks as much as possible because i can't answer for a vendor-lock-in for my projects.
True, but it does suck to constantly be rewriting the same code when creating a new site.
no class declarations in controllers? looks like wordpress to me ;P
So contact EllisLab and tell them that.
Why on earth would you port your entire system from one framework to another purely because the development of new versions is in the hands of a different company? That's f**king insane.
&gt; Why it's a good idea to have actionHello() where hello is part of the URL? Why should a segment of a URL be used to decide what functions in a class get executed? What do you do when you want to translate the URL to another language? Instead of hello you want the french version of the site to say bonjour. What then? It's an easy way to map a URL to a controller and action. I'm not saying it's the only way to do it or the best way, but it's not wrong. It should be trivial to add in i8n support in any modern framework for url mappings if it doesn't exist. &gt;Why it's a good idea to be restricted to URLs that make use of only controller/action? What if I want something/something/controller/action? This suddenly throws the methodology right out the window, which is inconsistent. Different frameworks use different methodologies. If you don't like how one or any works you can either submit patch to add in the features you want and if there's enough people that feel like you do then your changes will be accepted or you can make your own framework (you opted for this route). It doesn't appear this is an issue many people have. &gt; Why you should group a bunch of actions together in one file by controller just because they share a common parent directory? There will never be an instance where they all get executed in a given page load, so why group them that way? You structure your code like that because it's the sane way to do it. I haven't seen how you handle your actions, but why wouldn't you want to group them together? Wouldn't things just get confusing after a while or when you bring someone new on?
I'm unclear on what their "main flywheel" is then, Expression Engine? Is that something people use?
1) 2) Well with CI and URI routing you can setup custom routes and is achieved easily. &gt; There will never be an instance where they all get executed in a given page load, so why group them that way? Why would you split things up by page load. You would have tons of files or I'm not quite understanding what you mean. &gt; I've never heard a compelling argument for doing it the way so many frameworks do it (with a Controller class and a bunch of actionBlah() functions in it) Why not? What difference does it make? controller class user function login function logout function register website.com/user/login, ect. It's simple. It's easy to read. It may even be seo friendly.
You answered your own question by already stating that it is not best practice. If you know you can optimize your code, then do it. Don't get in the habit of doing things you know could be done better. Really, it's not going to harm your performance enough to really notice (unless you have a huge site and are doing it *everywhere*). But it's more difficult to read and maintain. Even your "better" example could be optimized further by only echoing the appropriate PHP variable. &lt;script name="Current_XP"&gt; var Current_XP = &lt;?php echo $XP; ?&gt;; &lt;/script&gt; The goal should be to separate as much logic from the displayed output as you can. That gets easier to understand as you start to use frameworks and/or template libraries, so check those out for examples. And in the future, this would be better in /r/phphelp ;)
i'm a codeigniter oldie and looking for a new alternative. any suggestions?
CI is a pretty good framework. I never had the ini_set issue with it. 
&gt; I suppose that means it's going to get a rewrite with something more modern soon? I'm actually a little surprised at how often I've seen this assumption bandied about. It's all PHP, so the code base will move forward as is. Why would it need to be rewritten on a different framework?
Because everyone always just refers to them by number. I mean I know what 404, 302, 200, 500 all mean but I don't know what their names are. 
Laravel or Symfony. I enjoy them both, and they are similar enough that if you use one, you can pick up the other by just referencing the documentation. Many others I have seen represent Yii as well.
I don't do much new sites. I'm working in long running SaaS projects, so when i do something new i won't use any framework because the project would be stuck with it. I don't care if i have to rewrite the same code again and again, it has to run and i cannot afford having to tell my superiors stuff like "Oh the new Version of ZF / CI / Yii is out, we need one week to update, because they fix Vulnerability X / Bug Y". Besides, most frameworks are horribly bloated and i would not recommend them for (potentially) huge projects. I have my own Toolchain which is very simple, flexible, uncoupled and easy to change for each project and even if i don't use the code directly, the core architecture is in my head and takes 4 - 5 hours to write. 
+1 as long as the framework does what you need for your current app/site and there's no security problems (if there is, documented and hot fixes released).. that's pointless. That's about as insane as getting rid of your perfectly running vehicle, going backwards into debt because it's 3 years old.. such a waste of resources... Or you know, divorcing because you don't have anything new to learn about your s/o, leaving your kids in the middle.. even though your s/o is still perfectly good for you, doesn't cheat on you and puts out and does what you tell em.. Like making good sammich's etc.
Check out kohana or phpixie, they are similar to ci
This is somewhat an old post (it is about Doctrine 2.0), but nonetheless an interesting read. Part 2 of the conversation is here: http://php.vrana.cz/doctrine-lead-developer-explains-my-wtfs-part-2.php
Don't sigh. Laravel is fun, and results in apps that are very easy to maintain. Go forward with a smile. 
I love Laravel so much I want to take it behind a middle school and get it pregnant.
The main problem i see with the while/array_pop method is that you destroy the original array in the process.
Sorry, but definitely disagree there. There are lots of reasons for wanting maintenance and new version development to be handled by a reputable company. Especially if support contracts are on the table. It's just a reality in some business realms. And to say it's insane is very short sighted. However, what **is** insane is coupling your codebase to a particular framework or tool so deeply that you literally need to port it to move off of it.
I'm glad things have changed, that was the case when I was still on the team and the grapevine didn't tell me any differently.
Yes. They have a whole bunch of users. You couldn't buy a more faithful community if you tried.
&gt; This is absurd: you don't compare a PDO wrapper and an ORM! I don't think one should read the article as a comparison between ORM and not ORM. It raises up some technical aspects about Doctrine itself and ORMs in general. I think those are good points to acknowledge. Also, I think NotORM is a bit more than just a PDO wrapper ;)
&gt; I don't do much new sites. [...] I don't care if i have to rewrite the same code again and again As someone who has built many many websites, this simply does not work for me. &gt;Besides, most frameworks are horribly bloated and i would not recommend them for (potentially) huge projects. I agree. That's why I wrote my own. Suits my needs perfectly. 
I recently moved from CI to Laravel, and even if CI was upgraded I'd not move away from Laravel now, it's too good.
I haven't used CI in a while, but IIRC you just need to change error reporting in your config... you shouldn't have to use ini_set anywhere.
What about for the people who's corporate policy requires them to have support contracts in place? Like ones that [Ellis Lab Provides](http://ellislab.com/support#pricing). Is that so crazy? And is it so crazy to change because policy dictates that you need comercial support? 
I see. I have only come across one person that used it and they were a design firm using it for their portfolio and I assumed for their clients. I have not ever actually seen it in a professional environment: which means very little, based off my sample size.
All right. They are now all aligned and the yellow is more dark: https://github.com/olivierlacan/shields/issues/35
Do those support licenses even cover CI? 
&gt; I don't feel like that is correct. They just run a very old version of CodeIgniter (2.0.) not the latest 2.1. or 3.0-dev. We do run an older version of CodeIgniter, but we have all of the security patches that modern CodeIgniter releases have and we've made additions and changes for ExpressionEngine's sake (e.g. IPv6 changes). It's not completely different, but it's essentially a fork.
Learn Symfony2. It is Object Oriented and it will show you many good coding techniques. 
Great up-to-date article on MVC patterns.
I can think of an easier way to read a private variable: add a getter method. I get the feeling the author does not understand the purpose of private.
IMO it's not you, [it's a glaring omission in PHP](http://www.reddit.com/r/PHP/comments/1am1yc/rfc_requests_api/c8z4jsx). PHP was created for the sole purpose of generating web pages, and the lack of a fundamental HTTP API results in every framework and project re-creating the wheel from scratch. In other words, it's going to be doing _a lot_ of request handling and response generation. Why there is not a better way to interact with the HTTP protocol is beyond me.
I just sent them an email. I am currently building up a company that focus on building re-usable packages to build web softwares that scales well in traffic (QPS), functionalities (easy to maintain) and platforms. I really believe in making CI a next-generation platform and I believe this begins with a complete re-write. Symfony did it in the past (1.4 to 2) and it worked very well for them. CI has a very strong brand, but its code base is no longer up-to-date. I believe that the next generation of CI should divide its interfaces from its implementations. For this reason, I would create packages that holds interfaces, then create packages that depends on these interfaces. The programmer would then decide which implementation to use in a DependencyInjection declaration that would be done in json. A classic example of this would be to have a normalized database system that have interfaces packages, then have packages that implements those interfaces, to build a RedisNormalized package. Then, if we want to support a messaging component (like RabbitMQ), we would simply have to create another package, that implements again the interfaces and create the RabbitMQNormalized package. Then, the programmer would decide whether he uses Redis or RabbitMQ by adding the right classes in its DependencyInjection definition. That way, we could remove all the hooks inside the CI system, while having the possibility to extends the core features of the new CI code base. I would also make it very easy to support database sharding by creating packages on top of this normalized database system, and use ZooKeeper to support proper sharding. At last, I would also make it very easy to build multiple platforms and share business logic between the platform. Let's say someone needs to create a project where he has to build: * 2 mobile applications (iOS and Android) * 1 TV application (Samsung TV) * 2 webites (mobile and PC) * 1 video game that uses some data of the application (like the User &amp; Roles/Permissions) I would make it very easy to build RESTful API's inside CI, and build the proper tools to track the API usage for each platform. I would then make it very easy to build the website applications inside CI and share (or not) the controllers between the web applications. Since CI would be composed of a ton of very small projects, it would be very easy to use only a part of CI, or the full project. By supporting sharding directly in CI, it would also make it very easy to scale in terms of data growth and QPS on the application.
As an alternative, I'd probably do: const TPL_SCRIPT_XP = &lt;&lt;&lt;'HTML' &lt;script name="Current_XP"&gt; var Current_XP = %s; &lt;/script&gt; HTML; // some code later... printf(static::TPL_SCRIPT_XP, json_encode($XP)); At least this way it's a constant, and the entire string won't be re-parsed every time you use it. It's also in a good form to easily move to a separate template file if you want.
When working with a developer who has mostly programmed PHP procedurally, after they have a decent understanding of OOP features, this is the next topic of discussion. What makes good OOP!
You might not be the author of the library. Might even be a package installed trough composer that even if you add the getter it would be overwritten on next build. I definitely don't see it as a good practise but it has its usages.
You are trying to hard.
I'm sorry.. who cares?
Really? Cross posting?
We have Jenkins handle everything, it polls for SVN commits, and when it finds one, it kicks off all the unit &amp; system (DB) tests. If those pass, it moves it down the pipeline and runs some integration &amp; acceptance tests (along with some other automated tests, like Twist), and if all's well there it's packaged up as an artifact. At that point, anyone can login to Jenkins and have a build pushed to whichever server they wish with a single click.
Why are you saying that? I believe that the goal of a framework is to speed up the development of an application while making sure the application you develop is not coupled together with a framework. By making it the way I explained above, it is really easy to only depend on interfaces inside our application and only couple the framework with the application we build inside the DependencyInjection definition. So, it makes it very easy to change our external dependencies, such as our database system. Why are you saying this means "trying too hard"?
There are some valid use-cases for this, e.g. unit-testing. While I support writing testable code, I also don't agree with adding code or complexity simply to aid in testing if there's a viable work-around. Depends a lot on the situation, though.
In situations where that is not ideal, this gives us a very reliable option.
You're wrong. Yii does have data caching built in, e.g. User::model()-&gt;cache(60)-&gt;findAll(); Yii's auto loader doesn't require a class map. It is a different approach to PSR-0 because it pre dates it by several years, but integration with other autoloaders is easy and namespaces are supported. What you are proposing about 'foo/exception.php' is not supported by PSR-0 either and is in fact an awful idea. Additionally, not everything is a model, in fact only the models are models. You should do your research before ranting away, every single point you make is incorrect and now you look foolish.
No. His heritage was Asshole-American.
you're being downvoted because the code you posted shows that you are in no position to be technically critiquing other frameworks.
&gt; Yii's auto loader doesn't require a class map. http://www.yiiframework.com/doc/guide/1.1/en/basics.namespace &gt;Starting from version 1.1.5, Yii allows user classes to be pre-imported via a class mapping mechanism that is also used by core Yii classes. Pre-imported classes can be used anywhere in a Yii application without being explicitly imported or included. This feature is most useful for a framework or library that is built on top of Yii. Just what we needed, a bunch of files that might not be used, getting preloaded into memory... FYI: here's the built in class map: https://github.com/yiisoft/yii/blob/2ea61271cda7356cb1374fcccb49f30e3c142203/framework/YiiBase.php#L636-L857 &gt;User::model()-&gt;cache(60)-&gt;findAll(); Amazing, Yii has the bare minimum possible caching... 'query caching', where all they do is md5 the query and cache it for x seconds. Which almost guaranties you will be serving dirty cache. You're better off turning on MySQL's built in cache, it'll be more efficient and wont serve dirty cache. Forms are models, classes are models, litterally everything you write in Yii ends up being a "model". &gt;What you are proposing about 'foo/exception.php' is not supported by PSR-0 either and is in fact an awful idea. This is the exact method used by Zend framework as well as many other sane frameworks out there. The autoloader I showed fully supports namespaces. &gt;You should do your research before ranting away, every single point you make is incorrect and now you look foolish. Considering how wrong you are about everything you posted, it seems you're the one that needs to do some research.
I recommend reading as much as you can, both online and also get yourself a good book (a book will be more thorough). At the same time, choose a simple MVC framework (I used CodeIgniter) and build something. Try and understand the code within the framework. The basic concepts of OO are really not as hard as they first appear to be. I'm still getting to grips with the more advanced stuff though. 
You said the class map was optional, it is not. It's built in. It's there. I linked to it. &gt;Edit - I'm not continuing this conversation with you. You don't know what you're talking about, if you read the code you'll see that you're wrong and it is simply undeniable. Statements like "classes are models!" make no sense. You are currently experiencing http://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect Right. I wrote a full stack framework singlehandedly, but I don't know what I'm talking about. I've also worked extensively with Yii and many other frameworks. I've been working for major PHP shops that you've heard of for many years.... But because you disagree with me, I must be clueless...
you don't need to use a class map in your application, yii internally makes use of a class map to speed up LAZY autoloading of core classes, it's one of the reasons it's one of the faster fully featured php frameworks. it doesn't increase memory footprint. you can overload it. you don't need to use one yourself. explain to me why it's bad?
Rewriting it would send users running. All you can really aim to do is make a series of major updates, through 3.1, 3.2, 3.3, etc which are a two months or more apart, which tackle large items at a time. 1. Composer obviously. 2. Remove the clunky old router and implement any of the existing packages which exist on packagist. 3. Namespace core code, so models, controllers, libraries, etc don't conflict. 4. Deprecate the DBForge and use something that actually works outside of MySQL. These would be priorities, but if you just scratch it and start again it would effectively destroy the community, uptake would be insanely slow and upgrades would be minimal.
Some frameworks or library need to access private properties. On top of my head: ORM, form builders… It's not meant to be used in userland.
it's dishonest to edit your posts after the fact. Also you're a hypocrite, since your own framework not only makes similarly arbitrary (and in my opinion, revealingly misguided, foolish) decisions about where things should go and what they should be called but also throws interoperability out of the window by completely ignoring PSR-0, the only PSR that should be an actual law. 
TR/DR: &gt; Ultimately, the only conclusion that can be drawn from the ranking differences is that it seems to be difficult to establish a reliable set of data using largely automated processes. kthxbye
&gt; [...] Alex knows his shit [...] &gt; Posted by Phil Sturgeon &amp; ... I knew it! ;)
&gt; it's dishonest to edit your posts after the fact. I added stuff to my replies, how is that dishonest? You did the same above, and I replied to your edit. &gt;Also you're a hypocrite, since your own framework not only makes similarly arbitrary (and in my opinion, revealingly misguided, foolish) decisions about where things should go and what they should be called but also throws interoperability out of the window by completely ignoring PSR-0, the only PSR that should be an actual law. Is that it? You're only complaint is that I don't capitalize my class names? Wow... that's something. I write 50,000 lines of code, and you're ONLY complaint is that I don't capitalize my class names. I guess I should take that as a compliment. http://framework.zend.com/manual/1.12/en/zend.loader.autoloader.html These guys wrote PHP. I think they know what they're talking about a lot more than the guy who wrote Yii. PSR-0 is a guideline, not a law. Class names in PHP are not case sensitive. Just because a bunch of random people voted that they should be capitalized, in no way means that's the way it *has* to be done. There is literally no downside to doing it the way I did it. None. Half the classes in PHP are all lower case, others are camel case, I chose the former over the latter. Get over it.
&gt; I went with a fairly standard Entity/Repository approach I am curious as how you did that. It seems to me you would need an ORM to map your entity to a database?
Woops sorry, I read you wrong. I definitely agree with you them ;)
Is the PHP ecosystem really so fucked up that people can't rely on **extensions bundled with the runtime** any more? &gt; [No external libraries are needed to build this extension.](http://php.net/manual/en/mbstring.requirements.php)
My company also codes on the production server, and they update / change configs on the production environments with hundreds of live sites and don't bother to notify customers when we do this. No one seems to care because all they know is FTP and try to remember to download/save backups after deployments onto a local network drive. Granted, they mostly deal with low-volume WordPress sites. But every time a hiccup occurs during a deployment or collaboration, i'm the one that says "we should be using VC". My workflow: * I use phpStorm to keep a local history of my files. * I deploy to a staging environment for testing. * Once approved i deploy the changed files to the production environment. 
Why you no Composer?
https://github.com/danielgsims/lever/issues/2 :D
assembla for non tech savy projects // small startups, also tested beanstalk phing for bigger projects 
&gt;You don't use namespaces. A new features of PHP, not used by many, and providing no clear advantage for using them, yeah, not seeing a big issue here. Oh wait, Yii doesn't use namespaces in its core either. \*sad face\* &gt;You have a non standard, weird folder structure. Trite comment with nothing backing it, no response needed. &gt;You use static methods basically everywhere. This is a problem, why? I started writing this framework years ago, well before namespaces existed in PHP, using classes to namespace a group of related static functions, is not only valid, it's a good practice. &gt;You shun interoperability. Another trite commentary with nothing backing it, no response needed. &gt; You have clearly never deployed to linux. I work almost exclusively with Ubuntu. Class names are not case sensitive at all in PHP regardless of platform. &gt;This is your lack of domain experience talking. How do you tell if foo is a class or a function? Lol, is that a serious question? You want to create a file and put a global function in it... and how does this file get loaded? Hahahahahahahahahahaha, wow. You're a pro. Clearly it is *i* who is inexperienced because I'm not putting single global functions in files.... \*slow clap\* &gt;Show me an example of a lower case or snake case class name in PHP core? http://www.php.net/manual/en/class.pdo.php Woops, that class is *all* upper case.. not following PSR-0.. \*sad face\*
oh yay, another php framework
I was about to tell you to use a dependency manager - in PHP, [Composer](http://getcomposer.org/) is the best, and everybody uses it. However, you do need a CLI in order to install your dependencies in Composer. Why exactly can't you use a CLI? What will your project be about? Can you give us more details?
Well, you probably haven't spent time to read just what the library was meant for. Here are some reasons to point you to "why people ~~cant~~ should not rely on installed extensions..." 1. The library explains it why: http://pageconfig.com/post/portable-utf8#why 2. mbstring is not enabled by default. http://www.php.net/manual/en/mbstring.installation.php 3. mbstring and iconv are general purpose, while Portable UTF-8 is UTF8 specific and provides much more than what mbstring does. If you still find some features missing in this library, should'nt you contribute your efforts there?
Lol
Graph paper
Nice rebuttal. The really sad thing about you, is you think your personal preferences are how everyone should code. You must be a terrible programmer to work with.
Why do all this when you could just use something like Laravel, which already does it?
This isn't any different than modifying private members using reflection, and there is plenty of material on that. Tools are meant to be used, and perhaps a bit more commentary and "publicity" will help people understand. We shouldn't hide or cover up the "dirty bits" of our tools because they are dangerous. We should instead teach people how to use them properly. Granted, maybe this article isn't very clear about the dangers but the whole premise is to improve Reflection hacks-- which are already hacks.
&gt; This customer hve 2 billion page views on its platform. His platform was created by various junior developers that did not communicate well together. So, the whole platform was composed of procedural PHP scripts. There is no unit test and the whole platform is coupled together. I even saw some PHP scripts that are executing some other PHP scripts before its execution to work properly. So, these procedural scripts also have states, which were not documented anywhere. &gt; On top of this nightmare, the platform is very unstable. From time to time, some servers are going down for no reason, and since everything is coupled together, the whole platform is crashing when this happens. Sounds like most adult video (aka porn) companies to me.
My customer is an advertisement network. They got success very quickly and were not able to scale their platform properly, obviously.
I second Laravel, it is great.
I didn't take it as a criticism neither... I just can't give too much details about who the customer is... but you are not very far from reality.
Why you no shell access?
[Nice indentation](https://github.com/phpnode/YiiRedis/blob/master/ARedisSortedSet.php#L132-L135). You are aware that PSR-2 is very clear about tabs, right? https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md &gt;Code MUST use 4 spaces for indenting, not tabs. You use tabs everywhere. Tsk tsk tsk. I guess you only follow PSR-2 when it's convenient to you... hypocrite.
you are so right! He could simply do: &lt;?php function doEverything() { // put all your code here } and that's it! Simple, right! Why complicate yourself with an extendable, testable, maintenable code.
This looks ambitious, I'd love to see the results of that. Are you going to use Github? If yes, any link to a project?
Yeah, after the hype of node.js, rails, typescript and co is over the programmers are going back to what they know. Mostly PHP. Not the reason they wrote.
Thanks, that code was written before PSR-2, that project is written for Yii so it uses Yii coding conventions. Keep looking, I'm sure you'll find some more horrors in there, I'd particularly recommend this one for very scary reading - https://github.com/phpnode/yiijs
Collections are different than HashMaps. HashMaps are key =&gt; values, where values is an object, in my project. Collections are lists of objects. In my project, Collections can be: SimpleList, Set, SortedSet. The main different is that a SimpleList is a list of objects, that can have multiple time the same object. Sets are the same as SimpleLists but can only contain each object once (objects are unique). SortedSets are Sets that are sorted by a score as their index. I really believe these must be in different classes and typed properly in applications, to make applications that depends on them easy to maintain. Here is the difference between the classes in code: * [SimpleList](https://github.com/inormalized/AbstractCollections/blob/master/AbstractCollections/Infrastructure/Objects/AbstractList.php) * [Set](https://github.com/inormalized/AbstractCollections/blob/master/AbstractCollections/Infrastructure/Objects/AbstractSet.php) * [SortedSet](https://github.com/inormalized/AbstractCollections/blob/master/AbstractCollections/Infrastructure/Objects/AbstractSortedSet.php) Like you can see, these classes are abstract, so when someone wants to create a UserSet, for example, we will simply have to create code like this: interface UserSet extends Set {} final class ConcreteUserSet extends AbstractSet implements UserSet { public function __construct(UserList $list) { parent::__construct($list); } } Obviously, a UserList would also need to be created. Anyway, things will be a lot clearer when the project will be moved properlyin the next few days. Ill post again better examples then, with tutorials and unit tests that explain how things works. **EDIT:** Also note that Collection objects must contain only objects of the same type. HashMaps can have any kind of objects associated to keynames.
&gt;Thanks, that code was written before PSR-2 PSR-2 has been out for a year now. Unless you completely stopped coding last year and haven't touched any of your code since then, you aren't compliant. &gt; it uses Yii coding conventions. Isn't that convenient. You lecture me that I'm not strictly obeying PSR-0, even though it's a mere guideline for devs, and you don't even follow it yourself. &gt;I'd particularly recommend this one for very scary reading - https://github.com/phpnode/yiijs Dude, you're a Yii fanboy, what do you expect me to say? You've clearly never worked with anything else, you've never worked on any large projects, nor have you worked in a big company with many other devs (nice linkedin page Pick), the only stuff you've ever done is consulting, building cookie cutter sites that never get any traffic.... so you think it's the greatest thing ever. It's a very mediocre framework with many problems. It lacks flexibility and tools for making high performance websites. Why should your little mods and plugins for Yii interest me in any way? Try actually writing a framework of your own if you have the skill to do so, then you'll be in a position to criticize others for their code. But I suspect you don't have the ability to do so.
Feels like the code I was writing in 1999-2002. Actually, I was mixing html with php inside my functions. I'm glad those days are over. Thanks for the laugh though :)
Maybe try reading about Controller Routes and Routers, and you'll learn why people do things the way they do. To be honest, your point of views are so far from "the norm" I don't know where to start. In your comments and framework readme, you say "this isn't wordpress", yet your idea of a controller is exactly the same as how controllers are implemented in wordpress. It's funny that it seems like you don't care about what you don't know, then it's someone else's responsibility to explain things to you. 
&gt; The problem is this open source project is aimed for starters in PHP My guess is that the above sentence is why he doesn't want to use cli. Starters in PHP may not have the experience of using CLI or might be running on shared hosting.
Many shared hosting companies do not allow shell access on their servers. I know that's the policy at the company I work for, in those cases the clients have no way to run commands. This is probably one reason why you don't see applications built on frameworks like Symfony distributed as widely as something like wordpress. They don't work in the most common (and inexpensive) hosting environments.
I've been using Symfony2 for a while, and I really like it. If you want something more "CI-ish", there's [Kohana](http://kohanaframework.org/) and [FuelPHP](http://fuelphp.com/).
Composer is a development tool. You should not use it on the production server. A proper way to deploy would be to build the application and its dependency, on your dev or stage machine, then push the code using a tool like Jenkins or simply upload the content in a zip file, to your production server. Of course, I highly value the use of Jenkins for deployment. Composer should never be used in a production environment.
you should look into the difference between PSR-0 and PSR-2, they are not the same thing, PSR-2 is divisive nonsense, PSR-0 makes sense from an interoperability point of view. If you notice, I haven't commented on your coding style, only on things that make an actual difference when working with other libraries. Regarding coding standards, I'm not some kind of authoritarian, imposing my conventions on others, but these things make a difference when you're working in teams. It's great that you've written a framework, it's something almost everyone does as part of a process of improving themselves as a developer, and I don't mean to discourage you, but when you come into a thread making completely inaccurate statements about other frameworks, then show off your own toy framework as something better, you're only going to come out of it looking bad. It is simply a different ball game. Writing this framework is not going to be the pinnacle of your career, you will come back to this thread years from now and laugh - it's a milestone on the road to becoming a better developer, not a destination. I'm not a Yii fanboy, it's just a tool that I have been using for a long time, that I know inside out, that has made me a lot of money. It has plenty of flaws, but for me it makes the right trade-offs for productivity and performance. Since I've worked with it for a long time, I've released a lot of open source code for it. I release it and people use it if they find it useful. That's it. I'm not trying to get your interest, I don't care. Regarding my experience - I've worked on projects large and small, with a lot of different technologies, lots of different languages. I don't list these things on my linkedin, nor do I actually maintain my linkedin profile. It's unpleasant to get personal though, if we're playing that game I'll bet you can't even mix, and if you can, you're scared of the mic.
Interesting to have a helper provide the interface. I just throw a `return $this;` at the end of every method I want to be fluent. Something like: &lt;?php class CandyBuilder { private $flavor; private $color; private $type; public function setFlavor($flavor) { // ... return $this; } public function setColor($color) { // ... return $this; } public function setType($type) { // ... return $this; } public function getCandy() { // ... } } $builder = new CandyBuilder(); $candy = $builder-&gt;setFlavor('watermelon') -&gt;setColor('orange') -&gt;setType('sucker') -&gt;getCandy();
[It's on github](https://github.com/irestful)
&gt;you should look into the difference between PSR-0 and PSR-2, they are not the same thing, PSR-2 is divisive nonsense, PSR-0 makes sense from an interoperability point of view. Right. Because you just decided this to be the case. PSR-0, PSR-1, PSR-2 are all 'nice to haves' and nothing more. They have zero effect on the code and only make it easier to work with other people's code. Using camel case or snake case is **100% PURE PREFERENCE**, nothing more. There is literally no advantage to one or the other, zero. Just because you like PSR-0 and want to use it, in no way means I'm wrong for naming my classes in snake case. &gt;If you notice, I haven't commented on your coding style, only on things that make an actual difference when working with other libraries. You've made no such commentary. Not once have you mentioned *anything* about interoperability, other than "your code isn't interoperable" (great comment, A+). Zero explanation given. &gt;Regarding coding standards, I'm not some kind of authoritarian, imposing my conventions on others, but these things make a difference when you're working in teams. Not really, no. The kind of thing that causes problems when working with others is when you have tabs and spaces mixed; mixing camel case and snake case has zero downsides other than offending members of either fan club. PHP is a total mashup of camel and snake case already. Get over it. &gt;It's great that you've written a framework, it's something almost everyone does as part of a process of improving themselves as a developer Where's yours? No, not everyone has written a full stack framework. That's a bunch of garbage. &gt;when you come into a thread making completely inaccurate statements about other frameworks Everything I've stated about Yii is based on fact and experience, not once have you disproved anything I've said. Yii's only abilities lie in the ability to rapidly fire out websites that can handle small loads. They would crumble instantly under anything over that due to the huge dependence on the DB and complete lack of a proper caching engine. &gt;then show off your own toy framework as something better, you're only going to come out of it looking bad He asked what I used, I showed it. I would not have shown it otherwise. Why is this a problem? and yes, my framework is vastly superior to Yii in many ways. Your only criticism to date has been about code formatting, you've made no other legitimate complaints. &gt;It's unpleasant to get personal though You started this, not me. I put my code out there at someone else's request. You then proceeded to launch a number of toothless attacks on me as if I didn't know what I was doing. And to make yourself feel better, you went and downvoted every comment I've made in this submission. I've been coding much longer than you, and know exactly what I'm doing. &gt;I'll bet you can't even mix Right. I've only been DJing for 15 years, but yeah, no clue how to do it.
ahhhh, what a waste of time. I should have stuck to my word and stopped, but you're such an irresistible troll! For the record, you wilfully misunderstood or ignored every single one of my technical rebuttals. If your framework is better, prove it by getting tens of thousands of people to use it. Otherwise, fuck off.
Excuse me if these are stupid questions. What do you plan to do with the existing data. Can you use it as it is now, or do you plan to restructure it also? If you do, how are you planning to convert existing data to new format. How will you make sure it is logically consistent with the old data. What all profiling tools will you be using and how frequently will you be doing the profiling? With so much OOP going, how much logic do you plan to put in your queries? If all logic is implemented in PHP using entitiy objects, then how much do you think it will effect your scalability?
Yes, I thought in Composer, but you need a CLI, which a lot of new PHP user doesn't know how to use, or some shared hosting doesn't provide.
Wait why did we downvote this one and upvote the other one.. guys? ... Guys??
&gt;If your framework is better, prove it by getting tens of thousands of people to use it. They do. I get millions of visitors on my websites, all of which use it. :) &gt;you wilfully misunderstood or ignored every single one of my technical rebuttals Did you read a single one of the comments *you* made? Not once did you explain in any detail anything you said. Let me summarize everything you've said in this thread: &gt;you're being downvoted because the code you posted shows that you are in no position to be technically critiquing other frameworks. Nothing of note here... &gt;What you are proposing about 'foo/exception.php' is not supported by PSR-0 either and is in fact an awful idea. No explanation as to *how* this violates PSR-0, nor why it's a bad idea. And that's it. Go review every comment in this thread. There is literally *zero* actual criticisms of my framework. None.
I don't hate it, but I do dislike it. Its a great server-side kind of code, but when it comes down to scripting the main interface of something, it gets tricky and irritating. One of the reasons I am a strict JavaScripter and Pythoner 
this will most likely be unpopular but what i did that REALLY opened up my eyes was learned Java, a true OOP language. I wanted to create an Android app. Now that i have gone through that exercise i feel like i have a WAY better grasp on OOP. Those core concepts i've learned will transfer to any OO language. Although you can still write procedural style code with objects in Java it makes you understand how useful OOP is. Android provided me a framework playground to learn in and as a result i learned how OOP works.
The argument hasn't been about *your* framework, special flower. No one thus far has cared to look at your code, you haven't done a good job explaining why people should care about it, rather you've made subjective, unsubstantiated "vastly superior" style claims. No one will look because it looks amateurish, there are no comments, there are no docs, there is no rationale behind the unusual design choices. No one will give it the time of day unless you improve those aspects, they expect more in 2013. I'm not going to waste time critiquing it because I just don't care - I know you'll take that personally, but don't, there's just so much interesting tech out there that you have to work extra hard to convince me that *your* project is worthy of attention. Rather, this discussion started because of your ignorant comments about Yii. They were ignorant because you clearly have absolutely no professional experience with it. If you did, you'd know that you were spouting absolute nonsense. There are legitimate criticisms of Yii, the ones you made are not amongst them. 
Interesting, thanks for the tip. I would have assumed putting it before the function keyword, not after. Good to know! **Edit:** When I originally researched this, I tried to look for an instance of this type of usage and couldn't find one. On the page you linked. Here on my iPad I still can't. 
And yet he says nothing of interest. What use is that?
i know the author, he quite well understand it :)
It's in a link off the page I originally linked to under "[returning references](http://php.net/manual/en/language.references.return.php)". There is no specific example that deals with anonymous functions, but it pretty much acts the same as a regular function would.
Keep making updates please, this is very interesting. 
COBOL isn't even dead yet. You still find it lurking in many places. You can get paid pretty ridiculous amounts of money to maintain COBOL or FORTRAN systems. Of course, all that money won't change the fact that you're writing in something that will eventually suck your entire soul out of your body and feed it to Beelzebub.
The modern three frameworks: * Symfony2 * Laravel * Zend 2 *plus* the Composer dependency manager along with packagist.org is making PHP a very excellent, feature rich ecosystem to be developing web applications in nowadays. 
Just to get the obvious out of the way: I genuinely think trying to "recode" CodeIgniter would be a massive waste of everyones time when compared with the handfuls of modern alternatives around. Doing so would be mostly either to keep the brand alive or try to maintain the community, but recoding would kill off the community the quickest anyhow so it would be a silly idea. Iterative improvements to CI based off of the existing 3.0-dev codebase however would be nice to see. Here are some things I suggested on a comment in another thread: * Composer obviously. * Remove the clunky old router and implement any of the existing packages which exist on packagist. * Namespace core code, so models, controllers, libraries, etc don't conflict. * Deprecate the DBForge and use something that actually works outside of MySQL. Also: * A command line utility, so migrations and other utilities can be run * Hash based migrations, not the auto incrementing ones I implemented (needs CLI to do that) * Replace all UTF-8 logic with the Patchwork UTF-8 package * Remove the "driver" system and implement * Deprecate the janky Hooks and implement a proper Events system * Reverse Routing * Kill the loader * Kill the JavaScript class * Kill the shopping cart * Replace as much internal Encryption class logic with Composer packages as possible * Make the parser driver based. The internal logic is next to useless, and any app that really wants to use it needs Twig/Dwoo/Lex/Smarty/Something instead. * Return responses instead of relying on echo and output buffering I could go on, but everything I'm describing has been implemented in FuelPHP or Laravel 4, so I'd really suggest not bothering.
Much better :)
I deploy using Jenkins and use Git to version code.
&gt; ConcreteIntegerSimpleListBuilderFactory Readable might be a goal to strive for as well
Was about to post this and scold OP for not reading the stream...
why the apple-like nomenclature?
Not sure why you got down voted, since you are totally right. Weird.
I just took names that were relevant, that the domain were not registered and looked nice. I plan to make 1 site per sub-project, with its documentation, so branding and easy to remember was important. It has nothing to do with Apple.
I haven't looked at your entire project, so I have no idea if it's an appropriate name or not. I'm just pointing out there's some middle ground between doSomething() and the snippet that /u/Xeoncross posted earlier.
you're focusing too much on the marketing for this, better get something done and if it works it'll gain traction on its own. you shouldn't have so much fragmentation either, use ONE name and ONE domain for the set or people won't know what they'll be looking for, it's ONE project after all. ps: the iSomething is for apple and nobody will ever think about anything else.
Crisis averted?
You are totally wrong with this. To build up a community while creating an open source project, its better/easier to keep people updated with what I'm doing while I'm working on it. This will build up an elite community around the project and when it will be stable, some developers will already like to contribute to it, if the project is good enough. There is various books related to that topic including the [100$ startup](http://www.amazon.ca/100-Startup-Reinvent-Living-Create/dp/0307951529/ref=sr_1_1?ie=UTF8&amp;qid=1373507425&amp;sr=8-1&amp;keywords=100%24+startup). Also, this project is separated in multiple projects because they are multiple projects. For example, it will be possible to use the sharding project without using everything else. Same goes for each of these 5 sub-projects. By fragmenting the big project in smaller one, it makes each part easy to use separately, which make the code highly re-usable, scalable and maintainable. Symfony2 and Doctrine also tries to separate packages. For example, I used the [Annotation package](https://github.com/doctrine/annotations) of Doctrine inside my own project. This was possible because they made it a separate package at first. Hope this makes sense.
As a french canadian, I didn't know about the word [sharted](http://www.urbandictionary.com/define.php?term=sharted) until now. This might put a smile on the face of couple developers while they stumble upon my projects :D
This screams of being over-engineered and a little gimmicky with the names. It seems like you are trying to create a company or startup around something with no traction yet. I'd suggest launching your idea with good documentation and getting feedback before over thinking this too much. The most popular frameworks/tools are not neccessarily the most engineered. Good documentation and traction are the most important things. Although it's beginning to change in PHP, for years the tools/frameworks that were the easiest to use beat out the frameworks that were strict on design patterns etc and pure engineering principles. Although this point is becoming irrelevant since the best frameworks today do all of the above.
&gt; Laravel Just curious... why did they reinvent callbacks: 'class@method' and not: array('class', 'method') or even: 'class::method' or is this some sort of php voodoo that i never heard of?? example: http://laravel.com/docs/quick#routing
Look at my history
&gt; The current data will be ported to the new system after the re-write is created. Are you making sure the relations in current data is consistent. If the system is as bad as you say, then there are already inconsistencies in the way data is stored it due to incremental changes. There is probably existing code somewhere to deal with this. Have you taken this into consideration. edit: By inconsistency, I mean, data upto a certain point connected in a certain way, and data after that was 'rewired' to fix some bug or make it fast or stable, existing code may be dealing with this at some sections and not in others. In a complex system, these kind of issues wont always manifest always. My point is even if your new code is 100% bug free, you can still have problems due to these kinds of inconstancy. And in 5TB data, such things are hard to find, if you dont know where to look. So before you start any work, I think you have to make sure all the assumptions you made about the data is 100% consistent. Also make lot of tests to cover the major/complex sections to make sure your new code yields the same results on the new/converted data as the old code in old data (for every entity if possible). 
Node is worth it for threading and since most PHP coders know JavaScript anyway I feel like it's a nice addition to any LAMP architecture.
It's just the way Laraval does it. It's completely arbitrary and has nothing to do with the way you do it manually without a framework as in: http://www.php.net/manual/en/function.call-user-func.php
For threading? JS is single-threaded. A badly written loop for function can still block everything.
Yeah should be the same.
Don't misuse the word, then. Node only executes one thing at a time. It can *wait* on I/o and do something else in the interim, (and if that thing takes longer than the I/o, you just have to wait more). That is not multi threading.
PHP seems to be on the right course. There have been many positive changes over the past few years. Many of the aspects of the language that give it a bad name still need to be fixed, but a solid foundation has been laid to make them easier to fix in the near future.
You can also do this pretty cleanly with DateTime. $endOfDay = new DateTime(); $endOfDay-&gt;setTime(23, 59, 59); $now = new DateTime(); $diffInterval = $endOfDay-&gt;diff($now); echo $diffInterval-&gt;format('%h:%i:%s');
DateTime makes working with dates so much easier. Derick Rethans, who maintains that extensions, also wrote the book on it: http://www.phparch.com/books/phparchitects-guide-to-date-and-time-programming/
 &lt;h1 style="color: red; font-size: 1.4em"&gt;&lt;?php echo $variable; ?&gt;&lt;/h1&gt; Also, in the future please take a look at the sidebar :) &gt;/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC
If you need to run a daemon or other long lived process in php... you *probably* chose the wrong language to do it with. 
"Event-based" may be a better word to gun for
The best part about this comment (on EL's blog) is that it's obviously written by /u/dracony.
I write plenty of daemons in php - never had any issue hitting months of uptime and never seen one leak memory 
so true, me too it works like a charm in production for months. People keep using this poor argument without even trying it. Big news: IT WORKS
I have a very computationally intensive PHP daemon that has had nonstop uptime of nearly 15 months now. The daemon won't die before the hardware does.
"marketing" (or communication) is an extremely important part of every project, commercial or open source. There are *lots* of open source projects that nobody has never heard of, and which are awesome. (and that's unfortunate)
IIRC Kohana, at it's roots, is a CodeIgniter fork. 
I think the backbone behind all new modern development is composer period. It is the new deployment process behind modern PHP development. All new frameworks are falling in lock-step with it and are using it for everything. It's even being used to deploy pear code which had their own process / script for doing the same. Thanks Fabian.
I like using the status code rather than a reason constant. It's concise, portable and unambiguous ([the "reason phrase" can be more or less anything](http://tools.ietf.org/html/rfc2616#section-6.1.1)). If you need a quick reference, then: http://httpstatus.es
Thank you for the feedback. I think I understand what you mean - I've written a generic class to handle all of the basic API operations, but then I'm still stuck with writing the adapter for the e-commerce framework.
this was fun! The issue is that you are so wrong, about so many things, that explaining them to you would take forever. Let's take that class map example. It exists so that you can override and replace completely core classes in Yii should you need to. If there was no class map, that would be a more expensive operation. The reason a class map exists at all is that they have taken the position that, pre namespaces, it's nicer to have names like CFilter than Yii_Web_Filter_Base or whatever. That is their preference and mine too. Tell me, how would you solve this problem given these constraints, and how do you override core classes in your toy framework? If you can't tell me why it's wrong to use static methods everwhere, let me ask you this - I want to change cli_model::color_text() to add support for different colours. how do I do that without changing the existing implementation or updating all my code to use a new method? For that matter, why do you have something that is obviously related to presentation in a model? Remember, I still haven't *read* your code. I've *glanced* at it, thrown up a little in my mouth and spotted some obvious flaws. It's funny that you don't recognise the difference.
Calls to a controller or routing is done with the @ while model accesses is done using double colons :) I find it easier to read code when there's that distinction
FWIW, I don't really mind the binary nature of the protocol. To me that makes things harder, but not unreasonably so. What I care about (and what drives me up the wall about HTTP/2.0) is the shear complexity of it. You can write a working HTTP/1.1 client in as little as 10 to 20 lines of code (at the network level, not using a lib). From what I've read of HTTP/2.0, you'd be looking at several thousand lines. Why? Because you're forced to worry about things like out-of-order frame reception, multiplexing, multiple sessions (at multiple layers), etc. Not to mention that I think it's solving the problem at the wrong layer. HTTP is an application level protocol that's tunneled over TCP. Why not create a new multiplexing middle protocol that tunnels over TCP, which you tunnel HTTP over? Create a new protocol that handles the negotiation and TCP session overhead, and allows you to tunnel an arbitrary application level protocol. I mean imagine being able to pipeline different protocols. Run HTTP and FTP and RSYNC and &lt;INSERT PROTO HERE&gt; all to the same server over a single TCP connection. That's what SPDY and HTTP/2.0 are trying to do, but instead of making it a separate useful protocol, they are baking it into the original one. Which boggles me as short-sighted and a premature optimization for 99.999% of the internet.
Sorry, this article is not relevant to /r/PHP, try r/programming
Problem being, google's web servers are like literally the 1% that are different from anyone elses, [for example] in that they'll save millions of dollars by improving their performance by 1%.
That is correct, there is a development, production and testing I think options for the engine in the config 
Error reporting/logging in CI is a complete mess. There are at least 4 different options which don't work well together.
Interesting to note that the 4 languages on top of it in that list are not really what most people would think of using for web scripting purposes... and Ruby is way down - below Python in fact.
&gt; It exists so that you can override and replace completely core classes in Yii should you need to. That's what include paths are for. Learn about them. My framework does the same thing without a class map. &gt;If there was no class map, that would be a more expensive operation. Nope. Include paths. &gt;The reason a class map exists at all is that they have taken the position that, pre namespaces, it's nicer to have names like CFilter than Yii_Web_Filter_Base or whatever. Read that again dude, total jibberish. &gt;Tell me, how would you solve this problem given these constraints, and how do you override core classes in your toy framework? Include paths. I already said that. Also, "Toy framework", how cute. &gt;I want to change cli_model::color_text() to add support for different colours. how do I do that without changing the existing implementation or updating all my code to use a new method? You can't. Linux command line does not support more colors. Jesus, you really don't know a lot about programming, do you... &gt;For that matter, why do you have something that is obviously related to presentation in a model? Lol. Coming from the guy who uses Yii. This comment is hilarious. Why would form validation be done by a "yii form model"? Hmmm? &gt;I've glanced at it, thrown up a little in my mouth and spotted some obvious flaws. You're hilarious dude. You can't find a single valid thing wrong with it, so you insult it and make a bunch of garbage complaints about it. What a tool.
What's your name?
So your solution is an enormous include path? I'm sure that's fantastic for performance, since you'll have so many pointless directory traversals. Manipulating include path can also result in APC contamination, because it's possible for APC to retrieve the wrong class if your include path changes between requests. This isn't possibly if you're explicit about which file you're loading - e.g. you include the real path to the file. &gt;You can't. Linux command line does not support more colors. Jesus, you really don't know a lot about programming, do you... Way to ignore my question, I obviously took a particular contrived example. Answer it in the general sense. Edit: Sorry, I forgot one thing. The validation rules are in Yii models because they validate the data in the model, they don't deal with presentation or user input at all.
&gt; No clear advantage to using them...yeah because autoloading and avoiding library namespace collisions Namespace collisions are only an issue if you have no idea how to name your classes. Not a single library in PHP uses namespaces. How is it then, that there are no collisions? &gt;mocking for testing are fucking useless what does that even mean? &gt;Except for very rare cases statics are a bad thing, Statics allows you to modify global state in non-reproducible ways, they also make unit testing a complete nightmare, using statics everywhere most definetly is not a good practice, its a fucking antipattern. You're clearly confusing static variables and static functions. You're also telling me that singletons are "bad because testing", which is total garbage. &gt;You do shun interoperability, like it or not PSR0 is a reality and it is on the whole a good thing, interoperability and the ease of using existing code to build new stuff is a major win and something PHP was sorely lacking. Right, so because I don't use camel case for my class names, somehow that affects interoperability... what a load of shit. This is the exact reason `spl_autoload_register()` has a 'prepend' option allowing you to stack autloaders. &gt;You know enough to be really dangerous but not as much as you think you do, I've read your threads with great hilarity. I clearly know enough to know more than you. &gt;Developers like you have paid my mortgage for the last decade. Hahahahahahahahahahahahahahahahahahahhahahaa. Yeah, converting all those class names to camel case paid your mortgage. What a joke. &gt;tldr: You may be the best troll I've ever seen in /r/PHP I really can't tell. Yes, because when someone disagrees with you, THEY MUST BE A TROLL! I guess by that logic, you're a troll.
Was up until version 2.x Kohana v3 is a complete rewrite from scratch.
Just released this edition for the 11th July. We've added in a jobs section so are welcoming people to post jobs to us. All the best
The #1 goal is to make a working system for my customer. I am not trying to build up a company, I am trying to make a project for my customer, that will work for him, and can be used by the community after. What exactly is the problem with sharing my process while I execute the work? With the amount of up votes this post got, I assume most people liked the post. This project needs to be highly maintainable and must scale well. I am sorry, but I am not going to take any example in most open source projects because most of them are hard to maintain and scale very badly.
&gt; So your solution is an enormous include path? I'm sure that's fantastic for performance, since you'll have so many pointless directory traversals. And your solution is to have a bigass array with path's sitting in memory that gets loaded and reloaded and reloaded and reloaded on every single page load? What an idiotic idea. Include paths get used **EVERYWHERE** in the operating system. By default PHP already has somewhere between 3-5 paths in its config, I added one more. MY GOD! THE PERFORMANCE WILL BE HORRIBLE! (except it's a system level lookup, and is actually very fast). But, what am I saying, I'm arguing with a guy who thinks it's faster to have a big array with all the path names stored in it... hahahaha. &gt;Manipulating include path can also result in APC contamination, because it's possible for APC to retrieve the wrong class if your include path changes between requests. Uhhh, no. That's a load of shit. &gt;This isn't possibly if you're explicit about which file you're loading - e.g. you include the real path to the file. You include with full pathnames, good for you bro. I can see why you've never used a useful tool that everyone else uses called include paths. &gt;Way to ignore my question, I obviously took a particular contrived example. Answer it in the general sense. You asked a shitty question, highlighting your own ignorance to how PHP and linux works, then you get mad at me for not answering the "spirit" of your question? Here's the answer: since it's not possible to have more colors, I don't see any need to add any functionality to override or add additional colors. This is what sane people do, they don't plan for impossible things, they plan for things that can actually happen. God, you're a terrible developer. &gt;The validation rules are in Yii models because they validate the data in the model, they don't deal with presentation or user input at all. I wasn't talking about the rules, I was talking about the "yii form model", I even put it in quotes in my first comment. How did you misunderstand me?
First of all, ust because there is an "i" at the beginning of the name doesn't mean I am an apple fanboy. I also conjugate the word next to the "I"... so it sounds like you are doing an action. You need to use a normalized database system? "I Normalized!". Also, each site will have its documentation. I really have no idea why you complain about this. The [Twig](http://twig.sensiolabs.org/) site is not at the same url as the [Symfony](http://symfony.com/) site. I mean, I'm not the only one that separate his big projects into smaller projects.
Steve Rodrigue?
Yup. Why? :)
Oh.
I would like to know if OP has done many successful projects with so much abstractions. If not I would like to suggest to try this sort of 'High maintainability' coding with a smaller, less risky project. 
Hardly. People developing on those languages are frequently doing things PHP is really not designed for. PHP can assemble a web page and then go away. It's really horrible for long-running processes or anything that doesn't fit the basic web mould. Ruby or Python can do a lot more.
The wiki article covers it pretty well also... http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)
I have always thought the naming of [::](http://docs.php.net/manual/en/language.oop5.paamayim-nekudotayim.php) was odd.
you don't get it, it doesn't matter what your intentions are you're using a pattern that is CLEARLY associated with apple, no matter what you say it'll look like apple.
That one? http://www.chuckprice.org/archives/9 https://drupal.org/node/196265#comment-644443 https://drupal.org/node/196647
In less than 1 week the first alpha will be started. I just need to move code around and separate packages, then add unit/functional tests to the packages. **EDIT** I find it funny that you believe I made a ton of marketing and no real work on the project. I worked a total of around 3 hours to get the articles up and to answer the questions... believe me, I worked a lot more on the actual code so far. This project did not receive a ton of marketing so far :P
&gt;I do use APC, and I use my framework on many websites, and this problem doesn't exist It does exist, you don't experience it because you can change the framework code. Your toy isn't flexible enough to have the need for this requirement. Yii is. &gt; Yes, because the year is 2013, people use absolute path names to include files. Lol. Amazing logic. Re-read what I said. They use autoloaders. How do you think those autoloaders auto load their files? by including them using the full path to the file, not by relying on the include path, because that would be totally insane. &gt; Are you serious? You simply extend it and use the extended class? Do you not understand how class overloading works? This is the problem, you haven't worked in big / complicated enough projects to have run into these issues yet. Let's say there's a class in your framework called Thing that has a static method called wat(). Your framework has calls to Thing::wat() all over the place. When implementing your application on top of the framework, you realise that Thing::wat() doesn't do exactly what you want and you need to change the behavior. You decide to create a new class called AnotherThing that extends Thing and has its own wat() method, so in your application code you can now use AnotherThing::wat() and everything is great. The problem is that the framework still calls Thing::wat() everywhere. How do you resolve this without touching the framework? You can't. &gt; Presentation? No it doesn't. It's a user input class. http://www.yiiframework.com/doc/guide/1.1/en/form.model Absolutely nothing in this document talks about the presentation layer. Err, yeah. that's what I said. Models have nothing to do with presentation or user input. Read that document. Models describe their data and have methods for manipulating their data. They don't deal with presentation or user input. And yes, I'm trolling you with facts. It's funny to see how utterly incapable you are of responding to the actual issues at hand. &gt; You're talking about yourself, right? I'm worried that I might actually be arguing with a 13 year old at this point...
Yes I created quite a lot of successful projects with this kind of abstraction in my career so far. All of them were commercial though. I know this project will succeed. Stay tuned.
&gt; use Primitives\Domain\Primitives\Numeric\NumericPrimitive; Why are there 2 namespaces called Primitives?
I did my tech editor thing. It's in German. https://phpmagazin.de/news/iRESTful-verbindet-Datenbank-Infrastrukturen-mit-REST-APIs
Agreed that it's mostly to do with Composer, but AFAIK Fabian isn't responsible for it. I would more so be thanking Nils and Jordi.
Funny enough, I *have* tried it. While the experience was fun and the resulting process* was stable, I had to prematurely scale before it even launched. Seemed like a lot of work for something better accomplished with another language more suited for it. \* I believe I used a PECL package to daemonize my script. 
aww, that first one is evil :D
Nope. I never worked on Drupal and/or joomla before. I also never worked with this guy. I am Steve Rodrigue. My company's name is 9282-0810 Quebec Inc. If you continue to google my name, you will find that I did fraud 10 years ago, when I was 19. Here is the article... http://fr.canoe.ca/techno/nouvelles/archives/2003/11/20031127-070200.html Here is the translated version: http://translate.google.ca/translate?sl=fr&amp;tl=en&amp;prev=_t&amp;hl=en&amp;ie=UTF-8&amp;u=http://fr.canoe.ca/techno/nouvelles/archives/2003/11/20031127-070200.html My employers already know these stories. I do not hide anything. I no longer have this kind of life, otherwise I wouldn't be pushing an open source project. Have a great day :)
Oh wow, the first article around my projects. Thanks! :)
The package name is called "Primitives", then I grouped together the "Primitives" interfaces under: Primitives\Domain\Primitives. For example, the main exception class of this package, which is abstract, is under: Primitives\Domain\Exceptions
don't get me wrong, I like your idea and you're perfectly fine developing it the way you chose to. in my opinion you should've had more content before doing everything you're doing now, you mention that you'll START the alpha in a week, I would've done this announcement a month AFTER having started working on the project, preferabily after having something to actually show but that's just me so best of luck (again).
thanks! this thing has been totally hilarious, I thought he might be trolling but no, he's really this misguided
You have misunderstood the point of my comment so I will attempt to clarify. You are splitting your application into many different projects and you used symfony2 and doctrine as examples. Well symfony2 and doctrine use subproject names such as: Doctrine Common for collections and generic shared libraries, Symfony Request &amp; Response for http abstraction and Symfony Console for console utilities and tools. They are not using names like iAwesomeConsoler, they cleary denote the separate and decoupled components that you may use one of or all if you choose. They also have excellent documentation and you can get a good understanding on how to use them within minutes. From the code you have posted, I would spend more time typing out your namespaces and class names then actual code. I am not attacking your development skill or project, I am providing feedback based on real world experience and what would get me interested in your project if that is the route you wanted to go. Since you are so interested in the customer, you should value thoughts like these.
My friend is getting his MIS undergraduate degree at OSU and there's a whole class on COBOL ;)
Not surprising to me - with so many legacy systems still running it there has to be a strong demand for people who can write code in it.
First of all, Symfony is a very mature project. Same goes with Doctrine. Mine is new. My documentation will follow and I plan to put a lot of energy in it. Second, you won't have to type my class names anywhere. Actually, people will type my interface names in their code, which are very clear short names. I will then create a CLI tool that will scan your project and will ask you which class to use based on the interface names you used. This tool will then build your dependency injection file and dependency file (composer.json). In other words, you, most likely, will never have to use my class names in your project. However, you will do have to type my interface names. Hopefully, people will use a real IDE that will scan your project and will provide a proper intelli-sense to get the namespace for yourself. I am using Netbeans and I never type a full namespace by hand. Thanks for your feedback though. I just believe it is too early to even comment on the code right now, since I am restructuring it as we speak. The github repositories have been posted because someone else mentioned them. There is a reason why they were not posted in my submitted articles. I am sure that everything will make sense once the first version of the application is released. Stay tuned :) **EDIT** I really believe your points are totally valid though. My project needs to be easy to use in order to be used by other developers. I'll make sure it is. By the way, my mother language is french, so it is possible that my replies seems hard when I answer comments/posts. It was really not my intention. My english vocabulary is just not as large as my french vocabulary.
I don't know, Drupalistas are pretty faithful too..
&gt; Neat, found something called Pencil[1] which iirc a free alternative. just a warning pencil does not offer transparency in images
Most folks are faithful to a product sure, but Drupal is making leaps and bounds in code quality, EE has done nothing for years and what it has done was late and buggy. Still, people stick by the product and support EL. It's madness.
&gt;I will then create a CLI tool that will scan your project and will ask you which class to use based on the interface names you used. This tool will then build your dependency injection file and dependency file (composer.json). Why? I have gone thrugh your blog and I still don't understand the problem you are trying to solve with this library. Can you explain with a simple example. If you add it to your blog, then it would be great.
As the project evolve, it will make things a lot clearer. I am creating an interface package every time I need to create a specific type of objects. Example: NormalizedDatabase Then, if I want to to use Redis as a normalized database, I will create another package that use the NormalizedDatabase as a dependency, and will use the interfaces declared in NormalizedDatabase. Then, I will name this new package: RedisNormalizedDatabase. After a while, if I need to support Cassandra, I will simply create a new package called CassandraNormalizedDatabase that will implements again the NormalizedDatabase interfaces. Now, in the code you write, you will always type your variables using the interfaces inside the NormalizedDatabase package. In your dependency injection file, you will decide if you want to use Redis or Cassandra... and use the right dependency, then inject the right classes. That way, your code can be adapted using any kind of database library, without depending on any specific ones. Moving from Redis to Cassandra doesn't request you to change your own code, which makes the whole project a lot easier to maintain, for both the people that create the projects and the ones using them. As soon as the first version of the code is released, I'll make sure to write a lot of documentation around this topic.
Why the fuck does that matter? It's not PHP syntax.
Fabien is only a contributor, say thanks to Jordi and Nils.
Most PHP developers don't know JavaScript? Oh.
Ok. I get the 'Code to an interface' point. But what real life problem are you trying to solve? What kind of scenario will benefit from the use of your library? Or Is this just a set of interfaces?
can you tell me why? 
Looks like the guy in question was trying to do something exactly like this, only with CMS systems... From the post.. "My name is Steve. I'm currently working on an API to develop plugins under Drupal, Joomla, Mamboservers, Typo3 &amp; Wordpress. Basically, plugins could be developped using this wrapper's API, then you could load your plugin in any of the CMS above."
I know everyone's all gung-ho for mod_pagespeed, but it just seems like such a terrible idea. Many of the features are things you should fix once, rather than patch over and over again in the web server. And the other things are just further increasing lock-in - now you'll never be able to switch away from apache, whether you want to or not. Not to mention the issues with having more third-party code running in apache's memory space. Because I love segfaults in my webserver. 
This is what I keep thinking too. In a way I think mod_pagespeed is awesome, because, well, not all developers do things right and this will help correct that. But, on the flip side, this almost encourages poor programming practices.
A callable callback makes sense: call_user_func('Foo::test'); call_user_func(array('Foo', 'test')); This does not: call_user_func('Foo@test'); 
is this like mod_makemysitegofaster? edit: oh it is.
EDIT: http://pastie.org/8132592 Sorry Phil! I was on a train and couldn't see that the formatting was borked.
Try again.
Looks like he was developing Facades for CMS systems, yeah. Beside the keyword "API", I fail to understand the similarities between our projects? By the way, that post was 5 years ago.
about the lock-in: there exists mod_pagespeed for nginx also.. I like pagespeed because I don't have to use a framework for js-merging and html-minification and so on.. so in the end I feel a bit more free because I just design my webpage as it should look like and can do the optimization of the content with another tool in another step
When I write "modern" PHP, I always feel a little dirty for making classes and controllers for a simple CRUD app. This is like how I imagine my code looks to people who ask "why not just put some sql strings in it and call it a day?". That, and it makes me wonder if this didn't all come out of some late-night UML tool usage.
It's all about convention and being predictable. If this get() method accepts a function: Route::get('users', function() { return 'Users!'; }); What the fuck is this?? Route::get('users', 'UserController@getIndex'); 
Because I'm not that familiar with striping or REST. In my job my product doesn't get hit that much so I'm not forced to build around speed. The blog posts are easy to read and the content is there. Why not ask for updates?
Complexity or not, it does encourage further usage of SSL, which I can only see as a good thing.
Being consistent with what? The point im trying to make is its not call_user_func, its a Router. It's whatever it wants to be. "Pass it a callback or a string, oh ok". Why array('foo', 'bar') would magically be any better I don't know. Anyway, what does this have to do with TIOBE? And who cares about TIOBE?
Seriously: { "require": { }, "autoload": { } } Upgraded to 5.3 like last week at work. I can't wait to fill this bad boy up.
I'm not looking for boyfriends, just giving my opinion. I think you're thinking way too much about something that doesn't matter at all. It's not reinventing anything, its just picking a delimiter to explode on. :: is two things, @ is one, and as I've said who cares. "Reinventing callable syntax to non-callable delimited string does not make this framework more usable." It doesn't make it less usable either. Because its completely irrelevant. 
no, you dont parse "class::method" thats *callable syntax*. read the manual... As of PHP 5.2.3, it is also possible to pass 'ClassName::methodName'. so this: $foobar = 'foo::bar'; is the same as: $foobar = foo::bar(); when passed as a callback to functions like usort() or call_user_func() http://php.net/manual/en/language.types.callable.php And Laravel only supports PHP &gt;= 5.3.7 so why did it invent its own syntax? That's all i was asking. 
I didn't even think to look for something like that. If there's nothing that allows similar generic access to the more popular carts like Magento, etc then I'd probably go down the Active Merchant route - at least Shopify has been requested a few times. Thank you very much for the feedback!
Subscribed. 
Baby steps... running code built for 4. :) Probably jumping to 5.5+ and Zend Optimizer.
 { "require": { "phpunit/phpunit": "3.7.*", "pimple/pimple": "1.0.*", "slim/slim": "2.2.*", "slim/extras": "2.0.*", "vrana/notorm": "dev-master#bd5db460207245ccb0cdea86feb8dd9ed25afbe4" }, "autoload": { "classmap": [ "vendor/vrana/notorm/", "include/" ] } } 
The only thing I really like about it is on the fly WebP suport. Whitespace minification is a bit useful, but the rest are best practices anyway. IMO it makes it easy to continue to do bad things.
If you wrote your code right you would only have to modify your database wrapper ;) 
I was asking about why you find it interesting. Not about asking for updates part. Sorry ) . I ask because I am not getting what it is trying to solve, from reading the blog. 
Yup, I agree. But were talking about a site that was cobbled together in 2004 and exploded in popularity through sheer chance more than anything (with constant feature development since). So there's a formal way to engineer software when its expected to succeed, and then there's the practicality of just bashing things together as a punt. And this is why Im in the situation I am now :)
&gt; I want to save Entity objects in normalized databases So, Like an ORM? If not how is this different? &gt; On top of that, I want to be able to handle an unlimited amount of traffic simply by adding new servers to the sharding farm. I also want to support an unlimited amount of data, simply by adding new servers. But doesn't almost all NoSQL software outthere like Cassandra already do this. &gt;I also want to make the system very fast. For this reason, I use data storage that access data in memory, such as Redis and Zookeeper. So this can only be used in projects that use Redis and Zookeeper? 
What frameworks would you recommend?
Win Grep (http://www.wingrep.com/) will be your best friend. I've had to do similar things multiple times in the last year, I took over for a very inexperienced programmer, and had to change around a LOT of bad coding practices. I would agree with alekseykorzun though, moving forward, create a wrapper and replace the mysql_* with that rather than straight PDO
Hi, Thanks for the reply I kinda do already use a very simple procedural wrapper, but its designed to just accept a string literal query and returns an array of rows/fields $a = sqlArray("select * from table where field1 = '{$escaped_field}'"); var_dump($a) etc etc Clearly this isn't really compatible with parameterised queries, so its not that I have mysql_connect(), mysql_query() scattered everywhere, its more a case that Im wondering how best to abstract my existing wrapper and convert these awful literal queries into parameterised ones 
It may a long work if the codebase is big, but what's wrong with simple grep? Search for all instances of sqlArray and replace them with sqlNewArray or something, painstakingly change all parameters to the new style.
Have started rolling out PHP 5.5.0 across my production servers I manage with great success, dropping APC cache in the process. Everything has been going great - so decided to update my existing build notes, which I had posted to Reddit in the past.
&gt; cobbled together in 2004 &gt; exploded in popularity Nice try, Mr. Zuckerberg.
Just what is composer and what does it do? I've read the website but I don't see how it helps. If my project depends on something I've already gone out and downloaded the dependency before I even integrated it into my project thus creating the dependency in the first place. 
You know of any reading that shows the best practice for creating a database wrapper?
But SSL is pretty useless the way it works now. How is this a good thing?
I agree. It's heavily overengineered and i feel the old UNIX / C spirit is slowly but surely leaving this world. They should keep every base technology as simplistic as possible.
If you want to take the parameter as as 1:1 "I must find something callable" then sure, maybe, but thats just not how it works. You can pass a function, nice. Or you can pass an array to do some advance stuff (so array('class', 'method') is out), or you can pass a string. Seeing as its NOT doing the same thing as call_user_func(), trying to pretend that it is by emulating the syntax of SOME of the expected input is more damaging than it is helpful. 1. It doesn't need to be call_user_func() approved. 2. It's not that hard to work out what is happening. 3. You're the first person I've heard of complain about this, and I've been using Laravel 4 actively for a year. 4. It's not slower, or more confusing, or problematic in any way. 5. I've read the manual. What is the end solution here? You want Laravel to switch from @ to ::? You want to fork it? You want Taylor Otwell to admit he was wrong all along? None of that is happening, so lets just get on with using this syntax, or use a different framework.