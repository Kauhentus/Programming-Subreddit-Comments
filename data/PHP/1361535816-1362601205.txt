Ah, makes sense now, don't know why I didn't see it.
&gt;Yes, static methods have their place. There is nothing wrong with calls such as[...] ... until you want to test your code. Then static methods are PITA.
I should point out that back then I really agreed with everything I wrote. It's only today when I see people shy away from if at all times that I regret going so hard on it. I literally see people try to avoid if where it's not possible and then have to have several people tell them it's okay to use an if...
I think you're thinking of singletons?
How do you do the file sharing between windows and the vagrant vm? I tried it out and i coundn't get the website to load in less that 8 sec.
No, but singletons share the same problem because they're static. http://kore-nordmann.de/blog/0103_static_considered_harmful.html
Only reason I can really say is Eclipse is slow when compared with PhpStorm. Especially in large projects (like any Symfony or Zend Framework project), symbol lookup and intellisense are much less responsive in Eclipse.
When unit testing static methods this presents a problem especially if the application is constructed with a lot of them. They create tightly coupled code thats difficultly (if not impossible) to test in isolation. You will find lots of (religious) arguments about static methods online. Personally I take a more pragmatic approach. For very small utility methods I find them handy otherwise use dependency injection.
ADODB is what we use here, and the MSSQL native driver for PHP, about 90% of our clients are using PHP+MSSQL like this, with only a handful using mysql and Oracle.
...OK, but in the case of this particular `gcd` function (and its sibling, `NumberBasic::lcm`), they're completely closed â€“ the only values they work from are those given by parameters. How does that negatively affect testing?
The vagrant folder will automatically be set up as a shared folder. Point your server software to /vagrant/... and it should work fine. I get pretty great performance on Windows 7 with Ubuntu VMs serving from the shared directory with nginx/php-fpm. NOTE: You need to disable nginx's sendfile support if you're serving from a shared folder, otherwise you'll get very strange errors (files will be served with random bytes or be truncated). Edit: When I say "pretty great performance", I got the loading time for an API endpoint down to 6ms with heavy APC user caching or 8ms when the opcode needs regenerating. That seems to indicate to me that the shared FS has minimal overhead in my setup.
As long as the methods are pure, which I'd expect most of numbers.php's are, then there isn't an issue. The problem is with non-pure static methods. Although this is fixed in other languages such as Java, using ClassLoaders, which allows you to have the same class loaded multiple times (and so there is no issue with static fields).
Static methods without side effects are just namespaced functions. There's no problem unit testing those. But it may be harder to replace them later, as they're hard-coded in other parts of your code.
I have no such problems. Are you developing on a potato?
https://www.blitz.io/
Write the use cases for the CMS. TDD the use cases. Attach a well known cms to the core of your system using model view presenter pattern. Source: [Robert Martin's Clean Code series episode 7](http://cleancoders.com/codecast/clean-code-episode-7/show)
Working Effectively With Legacy Code by Michael Feathers. http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052
Honestly, the PSR-0/composer comments on every code showcase are rather annoying. It's like.. I have nothing constructive to add to the discussion let me go view the code real quick and make a generic reply mentioning PSR/composer. 
I think a question like this misses the point of frameworks entirely. It would be fair to say something like CakePHP is too heavy if comparing it to laravel, however if a rails dev is new to PHP and performance isn't a top consideration (which realistically it usually shouldn't be) Cake might be a great choice. A much better question would be what frameworks don't fit for project X. For example slim is way more lightweight than Zend but that doesn't make it better if I need to make a full blown MVC webapp.
Honestly I think many of the better known, modern (this is key), PHP frameworks are pretty solid. You could do good work with most of them. The real issues come with knowing which ones are comfortable to you (I don't like using Cake, for instance, others love it) and which ones are best suited for which task. For instance you wouldn't use Symphony to create a brochure style site for a company but you might find Slim or Silex (Silex is an example of a framework that I actually do not like but that others, particularly Symphony users, do like) perfectly suited to such a task. If you want a much larger minefield of bad options look at PHP content management systems. There you have a far less than even shot at finding something decent. Practically every one I've used is so geared toward non-programmers that doing anything in them becomes a nightmare.
This is a really vague question so here's a really vague answer: Install MAMP or something. Pick a PHP to Serial library (like https://code.google.com/p/php-serial/). Write some PHP code. Connect arduino to machine. Execute code.
Sources for CakePHP is bloated and slow? I used CI for two years before switching to Cake and will not go back. The community for Cake is a lot bigger, overall I like their code structure, and baking apps is a great time saver for an initial base. Right now we have around six production apps running off Cake communicating with everything from SQL Server to MySQL to Oracle databases with no issues. Of the six two are high volume apps that we haven't heard of any slowness issues from end users. Not doubting what you say, I would just like to read up on it.
&gt; Sources for CakePHP is bloated and slow? Nothing specific, just reddit comments on these type of posts. Like I said, I haven't used it so maybe that is wrong.
Yes Symphony 2. It wasn't that the documentation was bad, more that I didn't like the structure and the code. Other opinions are available.
Gotcha. Wasn't trying to dog on you or anything. We are encouraging other departments to use the framework and I would hate to be suggesting a "bad" framework, ha. Usually if there is articles/data to back up a claim I take it rather seriously... I take what is said on reddit about php and framework with a grain of salt most the time.
A better question would be which frameworks start you off on the wrong path as far as code style, structure and convention go? Like if you took a handful of different sized projects from every framework, all following the frameworks "best practices", which would make you cringe and facepalm most?
Why not let Google Analytics do the dirty work, and you use the api to build your reports?
yeah don't write something yourself (from scratch), either leverage something like google analytics or use something like http://www.openwebanalytics.com/ and hack it to make it work the way you want
Apache Benchmark is pretty good at finding out how many requests/second your website can do. [ab](http://httpd.apache.org/docs/2.2/programs/ab.html)
In this case - the PHP application is purely a web service that's being used to power a mobile application across several platforms. We're not working with pageviews, or any of the normal web terminology - so I'm not sure if an off-the-shelf analytics package would support what I'm looking to accomplish. Or will it? Edit - in this case, it's something similar to Foursquare. We would need to track when a use checks into a specific area, and then report back on which areas users have been to, how many times they've visited, and what traffic have related locations seen grouped together... Edit 2 - Originally I was going to just handle this trough incrementing usage counts, but I've been told they want to be able to view data historically. So, how many people visited on X day... 
Just use what is suggested in the examples: call_user_func_array(array($obj, $method_name), $params); `array($obj, $method_name)` here is a method callback and can be used anywhere in the engine where callbacks are allowed.
php-serial is the way to go -- one of the problems I ran into that not many people talk about is the fact that most arduinos [ not sure about teensy ] auto-restart themselves on a serial-open if you're connecting via usb. so if you **are** using usb then put a sleep(5) after your '$serial-&gt;deviceOpen();' if you're using GPIO pins then nevermind me :)
Are you using Centos/Redhat? I'm getting the same error.
Also in the pipeline for Vagrant is VMWare support: http://vimeo.com/58059557
Oh. Ha. I misread something and thought the whole call_user_* family were deprecated. My bad, and thanks! Deleting!
i would suggest fiddler2. Its preety easy. And with xdebug on your localhost u can check what functions takes the longest time to execute.
I wrote an article on how to use Blitz.io. Pretty awesome system and can really test your programming when lots of clients hit your website. http://vpsstats.com/load-test-your-website-for-free-with-blitz-io/
Checkout [siege](http://linux.die.net/man/1/siege) You can put togeather a text file of URLs, then have siege simulate actual traffic as opposed to hitting a single URL a bunch of times. Gives you a better idea of how your application will actually run.
Until the code is ready for production use it shouldn't be on packagist anyway imo. It's not hard to clone a repo to play around with. I think there's a way to add a git repo in a composer.json file though instead of registering with packagist, but even then, it gives the impression that it's ready to use. And half the time you're actually getting a copy of the master branch, instead of a stable one, so it could be in the middle of active updates.
 public static function sum($array) { if (!is_array($array)) { throw new \Exception('Input must be of type Array'); Any reason you're not using [type hinting](http://php.net/manual/en/language.oop5.typehinting.php) instead of all this boilerplate? Just do this instead: public static function sum(array $array) If you're worried about being able to catch it, you can use [ErrorException](http://docs.php.net/ErrorException) to help with that. 
Additionally, are the any that work inside of authenticated pieces of a site. Also that would work on a LAN as opposed to being web only?
Of course it will be slow. However, if you're doing serious complex math on large data sets, you probably won't use php to being with. I think this is a great addition to the PHP toolbox all the same.
bcmath or GMP, e.g. define `BCMATH_AVAIL` as `function_exists('bcadd');` and `GMP_AVAIL` as `function_exists('gmp_init');` and use either when available. gmp has built in functions for determining if a number is probably prime, which could be used before falling back to php computation in `prime.php` (the miller rabin algo).
That's not a bad idea for turning it on, but I was refering more to the point that BC/GMP operations are orders of magnitude slower than their native operator counterparts. That extra precision comes at a cost, and there might be times when you don't need it.
"Rebuild it" it's a temptation (the best choice)...but we choose to refactory it because we need an evolving CMS (we can't stop working on this CMS to make another CMS): the boss hate the word "rebuild"...it sounds like "lost a lot of money" (but we know the truth).
What? It's the responsibility of the user of a library to determine whether he/she should and wants to use it in their project. One can't just go to packagist, search for something and use it.
I know, but it would be nice if you could at least tag packages as stable or otherwise. Or if more people used a stable branch as the tree they had on packagist instead of the master branch (or treat master as stable and push to a dev branch). You know, like having a version number versus the trunk build, where the numbered version was more stable and trunk was for ongoing changes that needed to be tested. I was thinking rubygems and cpan were more vetted but I just checked at least rubygems seems to be pretty much a place you can dump whatever too.
Ah I see. Well at least with simple constants you could also step in and change it to false as well. I've only used bcmath when I needed it for working on an OpenID provider.
Thanks everyone for their input. After all of the suggestions about using an external resource - I started digging around MixPanel.com. Basically, it'll allow me to submit "events", have those events recorded, and then report on those actions in several ways. Waiting to get some additional info about functions that it does or does not support - but it's looking like a winner. Thanks again, everyone!!
You should look at clicky.com http://clicky.com/stats/?site_id=32020#/stats/visitors-actions?site_id=32020&amp;date=2013-02-22&amp;session_id=887059058
php 5.4.x is twice as performant in my experience. i love apc but have only used DSO as my php handler, and memcache as my key/val sql cache.. i think ill give fcgi another chance. do you use apache too or just pure nginx?
I've used both apache and nginx, but currently prefer nginx + php-fpm.
Since you seem to have some heavy involvement in the Nginx project (great!) - can you see a better way of doing something like this without an if()? To me, it's always seemed things like this (multiple condition checks) really need a combo of boolean flags/if()'s... https://gist.github.com/magnetikonline/4303186/raw/d39d5a92034d2e83007d954780c5b8d557a01add/forwardslash.conf
Yeah that one looks good too
Anything. Source code is a great indicator of talent. When screening junior PHP devs, it's more important to me that your code be correct than the overall app idea. I don't mind if you reinvent the wheel; as long as your source is commented and indented, you show an understanding of OOP, MVC... if I can see that you're comfortable, consistent and organised code-wise, you're pretty much hired. Well, unless you smell funny and/or are a douche. 
Due to the query string requirement then no. Though I'm not sure why the query string condition is there as nginx generally don't care about them beyond passing them on to a backend. location /foo { try_files $uri @foo_missing; } location @foo_missing { rewrite [^/]$ $scheme://$host$request_uri/ permanent; rewrite ^ /bar # For when trailing slash isn't missing. Can do whatever instead. } The above would satisfy the no direct file requests and would maintain query arguments, which should work as well from an nginx point of view, if your backend cannot handle this then you need an if. location @foo_missing { if ($args = "") { rewrite [^/]$ $scheme://$host$request_uri/ permanent; } ... }
&gt; Though I'm not sure why the query string condition is there as nginx generally don't care about them beyond passing them on to a backend. Now I think about this again - I think you are right. This is rather smart what you have above. The only issue I would see there is if a direct asset (e.g. http://domain.com/myfile.jpg) is called and is not found (via try_files) it's going to be rewritten to http://domain.com/myfile.jpg/ - which is probably what I was trying to avoid when I wrote those rules moons ago. But a **if ($request_filename !~ "\.[a-z\d]{2,4}$") {** check in @foo_missing would solve that.... As for the querystring components, I think you are right - I have totally over-engineered that. Will have to play around with this some more..... Cheers!
Google Analytics supports [events](https://developers.google.com/analytics/devguides/collection/gajs/eventTrackerGuide) and [conversion tracking](https://developers.google.com/analytics/devguides/collection/gajs/gaTrackingEcommerce).
Seconded. People who have a proclivity for "let's rewrite this from scratch", for no other reason than that they think they can do better, are really showing a bad trait, rather than an achievement. I want to see programmers who have produced an elegant solution to an inelegant problem. Any idiot can make something more complex. It takes true skill to make something more simple. Find something that's never been done before, even if it's absolutely irrelevant to 99% of what you're likely to encounter in the real world, and tackle it. My own biggest portfolio pieces are binary format encoder/decoder libraries, SDKs for various web service APIs, and generally things which demonstrate a sophisticated understanding of the language, rather than the ability to write a lot of code. I also want to see open source contributions to existing projects. It's quite difficult to really showcase your work for clients or previous employers, because much of what we do is never, ever supposed to be seen by anyone outside of the company itself. Contributing to an open-source project gives you an opportunity to demonstrate that you can contribute effectively to something that has real-world uses. These sorts of contributions don't even need to be code. Contributing to project documentation is one way to really show that you have a good understanding of what you're working on. It's also one of the most under-contributed aspects of any given project.
&gt;Much more than $20/hour plus a lot of hand-holding, and it's a no-go for me That's a laughable rate, even for a junior developer.
Regarding your question of making direct connections, check out [sockets](http://php.net/sockets).
A general tip is make sure your text editor/IDE can search the entire contents of all files in the project, so when you come to OO-ise it and replace functions, you can easily locate any instances of functions being used, and replace them with the new stuff. Break the system down into a nested set of subsystems, and approach them one at a time. So, I'll assume the CMS has a front end display of content, and a backend admin area to admin this content - split these up first, and create a nice OO structure to encapsulate the difference between a front end visitor and a backend admin. Silo all code in to these structures. Does the backend login have multiple pages for handling the separate aspects? Say, one page for add/edit/remove of articles, one to add/edit/remove navigation menus, etc etc? Attack the way the CMS handles these separate admin pages next, and put an OO structure in place that represents "an admin page", and silo the code for each page in one of these. You'll then have a much easier time refactoring the rest, as it's been broken down.
People who type "w/" instead of "with" need their heads examining.
lol you're a bit late to the party here. His argument is solved by documentation and an editor that has code completion. The reason I used the example I did is because his argument applies equally well to that, it's just that he knows how `array_map($array, callback)` acts already, if he knew also `some_func($array, callback)` his argument would likewise evaporate.
Didn't notice the post dates!
&gt;ll leave it to you to go find the picture, Iâ€™n not going to give them the google juice of a link. Iâ€™ll just say THIS IS WHY WE CANâ€™T HAVE NICE THINGS! What the hell is this article about? There is absolutely no information presented to the reader. What does the shirt look like? Why is it considered offensive? Posting "Some people did something bad and now I AM MAD!" on a blog is meaningless.
My thought too. This is not so much about sexism, as it is about closed communities. You'll be mad if you knew! But if you don't already know, then you are not *one of us*. Edit: The T-Shirt basically says "Enhance your PHP-ness", because you know, it sounds a bit like "penis" and girls are not allowed to joke about stuff like that. [photos](http://storify.com/elazar/sexism-and-php) Whether you consider this sexist, I guess depends on what kind of culture you are used to dealing with. Not having come across blatant sexism myself in the PHP world, and not being on the side that has had to battle against it (being a man with a penis and all that), it is all kind of over my head, so welcome anyone that can shine a little more light on this issue.
Wow .. &gt;and girls are not allowed to joke about stuff like that. You hit the nail on the head there. To somehow assume that the female gender consists of delicate flowers unable to make or handle dick jokes is the only sexist behavior I see in this whole ordeal. edit: God dammit. The more I think about it, the more pissed I get at that guy. Actual gender issues exist. Stereotyping, unfair wages etc. To lob this "issue" in with the others cheapens the whole cause. It's the exact reason that makes feminism the butt of so many jokes. To quote Mr. Evans himself: "THIS IS WHY WE CANâ€™T HAVE NICE THINGS!"
I feel we do also need to be sensitive to the past and the experience of different people. To me a dick joke is, yeah whatever, and I move on. To others it may be the thin end of the wedge, taking them back to times they have had to struggle hard. What I really don't agree with, is the "no tolerance" attitude in many of the discussions and Twitter feeds about this, that equates to not being able to talk about it, and so in the end there is less understanding and less education. I think "no tolerance" is more an ideology, which has a set of beliefs - right or wrong - at its core. I would personally like to see more evidence and hear more personal opinions based on experience, than to just jump in blind, condemning people left, right and centre. The T-Shirts aren't out yet for the [PHPNE Conference](http://conference.phpne.org.uk/) in a few weeks, which I am really looking forward to. Will be interesting to see which way those go ;-)
&gt;I feel we do also need to be sensitive to the past and the experience of different people. I can see it as a social issue and it should be something a company like that thinks about before showing it as some sort of representation of themselves: Is this representative of us? Do I want children exposed to this? Can it be offensive or hurtful? That said, a case of sexism? A case of sexism in "the PHP community"? No dice.
is it live? Use a monitor like newrelic.com is it in development? try siege or blitz, when you find trouble spots, hit them xdebug to narrow down the cause, run apache benchmark to get before/after benchmarks, then repeat the cycle until satisfied.
Yes, I figure there is something fundamentally odd about this approach, but I am giving it a go anyway (all part of the learning curve). Basically the idea is that instead of having a class for [most] tables you can define the easy ones upfront and have them managed by the framework without any additional help - most web apps are very similar: they have a multi column table displayed as a list, and you can edit records in them. At the start of the app (during setup via admin control) you generate the create script for the database based on the above code : function ShowCreateScript() { // builds a create script (used once at the start of app installation) echo 'CREATE TABLE '.$this-&gt;tblName.' (&lt;BR&gt;'; foreach ($this-&gt;arrColumns as $col) { echo $col['colName'].' '. $col['colType'].' ,&lt;BR&gt; '; } echo 'PRIMARY KEY (`id`) ) ;&lt;BR&gt;&lt;BR&gt; --- End of Create Script&lt;BR&gt;&lt;BR&gt;'; } Then, when the app runs the dataFactory creates the SQL needed to extract from the database: function SelectRows($cols = NULL, $filter = "1=1") { $sql = 'SELECT '; if($cols == NULL) { $sql .= '*, '; } else { foreach ($cols as $col) { $sql .= $col.', '; } } $sql .= ' 1 as rowcount FROM '.$this-&gt;tblName. ' WHERE '.$filter; echo $sql.'&lt;BR&gt;&lt;BR&gt;'; // next - call the DB class to return a recordset } The intention is that you wont need a separate model file for each table unless there are non standard functions it needs to do (in which case they can be extended) The controller will use this to extract the data required and send it to the view. So, that's what I am trying to accomplish - I have a couple of weeks leave at the moment and am working on this full time, and so far it appears it should work - but flames /suggestions welcome :) Thanks
This is what the minimum stability option is for in composer
I have second you view on the phpclasses site.
Since php is more of a web language, the easiest way might be to get the arduino to connect to your php webserver and upload data with get or post requests.
not you again
That's a bullshit justification and you know it. First and foremost, I've seen your stuff, and it's not top notch. It's mediocre at best. Secondly, it is not difficult to find *free* mentoring in PHP (see [PHP Mentoring](http://phpmentoring.org)). I never went to college, and yet I had no problem finding work that paid me a reasonable wage. I think most people who frequent /r/PHP can agree, it's getting tedious seeing you self-promoting all of the time. Please stop that shit.
You're making the incorrect assumption that a model is nothing more than a database layer. That shouldn't be the case.
I felt the same way starting Symfony. However, I don't want this subreddit to degenerate into memes, so I downvoted you.
I felt the same way, and I have over 6 years experience with symfony 1.x. Basically all your deep knowledge and experience count for nothing. The good news is that the techniques you learn to use Symfony2 (dependency injection, single responsibility principle, etc), are much more generically applicable to all coding and hugely improve the readability, reusability and testability of everything you write from then on (apart from the whole annotations-based shortcut magic, but that's easy to understand and optional). It also helps that the components are making their way into all kinds of other PHP projects and frameworks, so learning them one at a time is easy and helps you understand the whole, as well as work with other projects. Now that we have Composer, I'm using way more third party code than I ever did before, and having an easier time of it too. Have a look at [silex](http://silex-project.org), and read Fabien's blog series on [building a framework with the symfony components](http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1), both of which make Symfony2 make a whole lot more sense. 
more like using symfony to make anything. ZF and symfomy are so fucking dumb its like learning c++
Agree on communication, but making your own CMS or framework is a great way to learn as long as you're not precious about dropping it once you've learned from it. I avoid people who make their own framework then cling to it, refusing to accept that other solutions might be better; that's bad in a senior coder, but worse in a junior. I see it a bit like Jedis making their own lightsabers - they almost certainly don't need to, and they can probably get a better one from a master artisan, but it's a great way to understand the tools they'll be working with. :) What I look for from a junior is curiosity, interest and ability to learn. Actual skill is nice too, but not at all necessary. 
I can respect that
Silex is definitely white-screening
Clever way to offset the down vote! :)
That's why it is prohibited, as per the Community Posting Guidelines (see the FAQ in the sidebar).
It may feel this way at first, but you have to believe that it does actually make things much easier once you understand how all the pieces click. I had a friend who knew it that was able to help me a bit, and he promised me the same. Now that I use it, I am very happy I learned it. I know it feels like a long time with little reward while learning it, but it does have some really helpful features.
chill. he's a zend certified php5 **engineer** and a mysql certified dba. i'm sure he knows what he's doing.
Let's keep it civil. Yes, his program seems laughable, but I'd like this not to devolve into an attack on his person.
&gt;The T-Shirt basically says "Enhance your PHP-ness", because you know, it sounds a bit like "penis" Jesus fuck, that's all? How the heck is this sexist?
Not at all, it depends where the dev lives, and if (s)he pays or avoids taxes.
That actually seems like an interesting way to learn PHP and MySQL. Almost makes me want to find it irl just for the novelty
... and you people thought knowing php would hinder your sex life.
sure... the "novelty"
As someone who does the hiring, and is hiring, I would be impressed by pull requests that have been pulled into someone else's repo. Even if it is just 1 line of code. It shows you can review, understand and analyze other people's code. More importantly, that you contributed something that your peers accepted. I think a StackOverflow profile adds a lot of value. I would also like to see and a example of consuming a third party API, even if it is fairly simple implementation. I put a lot of value in practical examples, not examples of truly object oriented solutions. For example, there is no practical reason a basic REST client should be more than 1 file.
Boy. That escalated quickly.
The fact that this submission is getting upvotes makes me weep for the species.
asyncronous threads.
as others have said ... ab, siege. you can simulate simple "login a user on some page" with AB. For more advanced user workflow scenarious you might want to look at JMeter or The Grinder, but are java based. But the grinder supports jython as a scripting language for workers. .... i've muddled with the grinder to test a drupal site.
Or it's possible that those upvoting get what it's in reference to, and find the topical humour funny.
I can't really get behind that. I come here to try to help people become better programmers, and to pick up on new php ideas. I don't come here to advocate toilet humor. There are other subreddits for that.
None of the reviews are about the contents of the book.
as well as the ongoing battle of sexism within the industry. this is just dumb.
From the guidelines. &gt;Please be professional. This is a technical subreddit, so the level of decorum is higher. and: &gt;Jokes are fine, but they should be relevant and in good taste. This submission is hardly professional, and as a joke it's completely tasteless.
This in an Internet forum. It's entertainment. Relax.
&gt; ASIN: B00B5WS1Y4
http://www.amazon.com/Poor-Little-Bitch-Jackie-Collins/dp/B005GNKIDA
To learn or test new techniques. Nothing like learning OOP/MVC PHP practices by hacking something together
I would think it would fall under the following: &gt;"Meme posts are prohibited. This includes things such as Advice Animals, Rage Comics and similar content."
AFAIK, there are no MVC frameworks for PHP. The frameworks that advertise as "MVC frameworks" are actually badly made Rails clones (which as never intended to be an MVC framework to begin with). They all violate the basic separation of concerns, and instead of pretend that views in MVC are just templates and model (instead of being contained layer, just like presentation layer) is just an active record object. They all contain bad practices, poor quality code and are powered by communities where majority of participants have never actually researched MVC or OOP. So .. **stop calling them "mvc frameworks"**. If you want to call those frameworks based on patterns the implement, a much better fit would be "singleton frameworks". As for you the reasons why build something your own: IMHO, it was pretty well explained in this article - http://blog.ircmaxell.com/2012/08/reinvent-wheel.html 
That's a good article - I guess I really meant did you build your own library/framework and use that instead of the existing packages that are around. By framework, it doesnt have to mean MVC in its current flavour - can be anything: a code generation library, templating system, framework, utility package.
or we just leave it that way because everybody in the industry knows what you mean. 
learning OOP practice from popular PHP frameworks would be the worst possible idea 
Ignorance and hubris. Not that I did not learn a lot, but the learning fell mostly in the "how not to do it" category. Now I am learning Symfony2, coding a project as I learn, and I can definitely see the error of my old ways. Still the experience is invaluable, because as I am learning good practices in Symfony, I can more easily see how the well thought-out solutions differ from my own.
thanks. but I am talking about building something by yourself, from scratch. And building something from scratch is always the best way to learn how things work. I don't understand why you posted your comment in reply to mine
I'm the one who instituted that guideline. It doesn't disallow any image involving a joke. It's intended to keep image macros out.
wow, I didn't know that this was going to cause such a controversy, as someone that is usually neck deep in php code, I thought this was a nice departure from the usual discussions and introduced a bit of levity. If there was a php_funny sub I would post it there, but in my experience PHP jokes are few and far between. It certainly wasn't meant as an offense to women. If it was a parody of the bodice rippers books geared towards women with Fabio on the cover would that make it more acceptable? My photoshop skills aren't that good but I'm sure it wouldn't be that hard. It would be easy enough to write some sexy code on the bottom. So in the name of gender equality if someone does want create that fake book, you'll get my upvote.
Just saying I would have interpreted it as an image macro, that's all. 
I do understand where you're coming from, believe me. Another one of the mods already removed the post earlier after I had approved it. It's a contentious issue, but the issue people are complaining about is not that it's an image, but rather the content of the image. If you're not aware, there has recently been an issue arising out of a PHP UK conference involving an unfortunately-sloganed t-shirt ("Enhance your PHPness") that has a lot of people bent out of shape, and a few key players in the PHP community and conference cycle in protest (Matthew Turland (Elazar), Cal Evans, Ligaya Turmelle, and others). My interpretation of the post is that it's topical humour related to that event - it's satirical. And like it or not, this event is going to need some satire to help people have the conversation that needs to be had. These are the sorts of posts that this debate is going to surround, and it's not our place (as mods) to censor posts for the benefit of those mildly offended, and the detriment of those wanting to have the conversation.
I know it's 'fun' but it still niggles me when it's something like if($Fontaine != "satiated") Why would the variable that represents the person be a string of an arbitrary adjective of the person? if(!$Fontaine-&gt;satiated) // or if PHP 4&lt; if(!$Fontaine['satiated']) // or at least if(!$Fontaine['status'] != "satiated") Bleh. The whole example code is logically nonsense.
&gt;If you're not aware, there has recently been an issue arising out of a PHP UK conference involving an unfortunately-sloganed t-shirt ("Enhance your PHPness") that has a lot of people bent out of shape, and a few key players in the PHP community and conference cycle in protest (Matthew Turland (Elazar), Cal Evans, Ligaya Turmelle, and others). I am. Frankly, that whole situation is ridiculous. It takes a leap from going from the intended interpretation (that is, 'PHP-ness' being used much like the word 'awesomeness' is) to their interpretation of the shirt ('penis'), and then to label it sexist. 
We agree again. However, that's not a decision that us mods get to make, for better or worse. And you'd probably find us mods disagreeing on the matter rather passionately. I see this becoming the equivalent of the "elevatorgate" escapade that happened in the skeptic community a while back. A small incident gets blown out of proportion by a few people looking to scapegoat *someone* or *something* in order to get what they want. In this case, what's desired on their part is a new hypersensitivity towards *possibly perceived* slights against certain groups. But, that's just my personal opinion on the matter.
Don't think I'll ever try to do this, because designing a good core isn't easy. It's easier to extend any of the frameworks (except Symfony maybe, dunno) that to make your own.
I know that with [SilverStripe](http://www.silverstripe.org/) for instance (and many others) you can use the framework without the CMS, but I'm not aware of anything that provides a CMS without a framework.
&gt;We agree again. However, that's not a decision that us mods get to make, for better or worse. I agree with you. My only objection was that this particular submission was rather similar to an image macro, and that's it. It doesn't have anything to do with the sexism discussion. &gt;I see this becoming the equivalent of the "elevatorgate" escapade that happened in the skeptic community a while back. Heh, that's what I thought as well. 
You have to remember, there are people who strive for perfection and those who follow the herd. I have worked on a personal mvc framework for years. One that I know every nook and cranny. I started my project as a "learning" procedure, a year later it was stable, and a year after that it was running my personal website. Then came the day I got wind of these groups of "coders" that bash every guy that tries to "re-invent the wheel". I fell victim to their nonsense and gave many of the top frameworks a shot. They all had their problems, their strengths. Seriously though, it occurred to me, if these "top-dogs" were so perfect, why is there more than one? My point is, start your project to learn, continue your project to use and tell anyone who says you're "wasting your time" to get back in line with the other sheep. PS. Knowing the other frameworks helps land the jobs though, but no one ever said there is only one tool and one way to do things.
Because I don't trust other peoples shitty php frameworks. Even rails just had severe vulnerabilities unearthed in its serialization capacity, and that code was audited endlessly from the beginning. I use my own framework because I keep it simple, which prevents me from sacrificing my users security. 
&gt; They all contain bad practices, poor quality code and are powered by communities where majority of participants have never actually researched MVC or OOP. This is disingenuous at best. I work with Symfony and its internals regularly, and this is patently untrue. Certainly no code is perfect, but casting such a blanket statement is both rude and ignorant. &gt; stop calling them "mvc frameworks" These frameworks are called MVC frameworks because they emulate MVC. Classical MVC is not possible across a stateless channel like HTTP, so this is the next best thing. &gt;They all violate the basic separation of concerns, and instead of pretend that views in MVC are just templates and model (instead of being contained layer, just like presentation layer) is just an active record object. How so? Most frameworks I've worked with keep to SOLID design principles. While they do often pretend that view are just templates (though Laravel does not), no MVC framework that I know of thinks of models as just ActiveRecord objects. Can you give an example where this is the case?
http://www.sexyphp.net/toc.html o_O
Note that those were revealed, even if it took a while. Yours won't be (and don't tell me you don't have any, I don't believe it).
This. It's not a concept that you can just read some articles about and say "well, I've been a fool writing all this unstructured code, I'll just go use MVC now." Using a framework as a black box that just makes things magically work is unsatisfying for probably the majority of programmers. The best way to understand it is to go read through the source of other frameworks, write your own, to figure it out. You get the benefit of understanding how all the requests are processed, how each piece works, etc. A lot of new concepts are still being developed, or at least imported into PHP from other languages as PHP itself is improving enough to accommodate even more ways of doing things. Also I have no formal education in any of this (do any schools even teach web programming?), so my learning process is basically read code, edit other people's code, make something similar, read RFCs and specs, etc.
leaps are what we do as humans. making the leap from awesomeness to phpness as a word, and not seeing what it really meant.....that is a leap man. mental gymnastics to not deal with reality
Did you have anything to contribute, or are you just here to troll?
Your only security in comparison to Rails is closed source. But it doesn't mean you don't have any vulnerabilities.
Couldn't agree more with this. I also went down the route of a bespoke framework, and now using Symfony 2 I can see why they take so much work to put together.
I haven't used anything in production, only just-for-fun apps and prototypes. I just recently started doing things like this, a few months back. So I guess this is a little different then actually releasing a framework.
Ubuntu. I gave up. I really needed that module and didn't have time to figure it out what was happening so I reinstalled Ubuntu, Apache and PHP, installed Gnupg first and it worked. I think it was some sort of conflict with the modules already installed.
Tell us more about your diety-like ability to single-handedly write code more secure than the richest tech companies in the world with dedicated security research divisions can produce.
If only those core rails devs had been as smart as you, huh?
[Elizabeth M. Smith](http://elizabethmariesmith.com/) once said every developer builds 2.5 frameworks in their time. The 1st framework is filled with mistakes and is ugly, the 2nd makes improvements, and the 2.5th framework starts out being built with the absolute latest and greatest techniques... until you find out an existing framework looks 95% like what you were planning to do anyways. This anecdote holds personally true to me (1st framework: shitty, 2nd framework: better but still based on the ideals of the 1st framework, 2.5th framework: turns out I was reinventing Zend Framework 1.4 so I just decided to use that). **Do** write your own framework as an experiment to learn the fundamentals of PHP development, **Don't** write your own framework out of the misguided belief that "using existing projects is for suckers" or "it'll be more secure than X". The mark of a mature, skilled developer is one that knows when and when not to reinvent the wheel, you only have a finite amount of time: spend it where it will net you the highest return on investment, not on scaffolding crap.
Because we've got certain requirements that weren't fully supported (not out of the box, at any rate) by the frameworks available at the time.
You know when you buy a work truck or a commuter car, you don't care for all the bells and whistles it has to offer? As long as it's reliable, you could go without the leather seats, sunroof, Bose sound system, etc. I build mine because it makes maintenance extremely easy and lets me customize every aspect of it (not just the visitor side of things via theming).
Everything is mapped 1 to 1 in my framework. There is no magic to it. Everything is done via prepared statements/stored procedures. All application variables are static, and there is no dynamic generation of data outside table data retrieval. I was very cautious when I built this, and I should state that I do this for a living. 
Bloat.
So say I build an RSS feed reader with your framework. Am I protected against [XML Entity Expansion](http://framework.zend.com/security/advisory/ZF2012-02)? If I was up to date on Zend Framework I would be... But you know better because you do this for a living.
Oh my word, that is perfect.
Build an MVC for use with my previous employer who had 300+ WordPress and Joomla 1.0 websites that needed fairly complex applications integrated with the CMS and needed to these applications to be deployable across both CMSes. My experience with a lot of PHP frameworks is that they aren't really designed around the idea of being a sub-module on a CMS but rather want to be in control of everything. I found it was easier to create my own MVC framework that I could just drop into a directory in Joomla/WordPress and load as a module for both, giving me a nice framework that could quickly while letting me generally ignore the CMS.
The NFS suggestion is a weird one - have used it before for a central content repos (images/media) for a simple implement of load balancing of web servers where modifying web apps to suit wasn't time/cost effective. But never for the actual application code. Apart from what you have outlined, you also loose any form of filesystem locking if that's your thing and I'm pretty sure it would play major havoc with PHP-APC/Optimizer+ too. But, I'm still a fan of Rsync for my release processes - the code access issue doesn't really matter since APC is running without file stats, so a full flush of web server APC cache(s) is/are needed before the new release is picked up.
Knowing every nook and cranny is fine for you, but there are definite advantages to "following the herd". Plugability, community support, "free" upgrades, documentation, maintainability, ease of introducing new programmers and career value. Having to explain to a new dev all about your own framework is painful on both sides. You don't want to have to sink time into educating them, and they sure as heck don't want to learn some proprietary guff, when they could be shipping code. Essentially, bespoke frameworks are fine when you're pairing or solo, but if you ever need to expand your team or replace people who've quit then that's when the real value becomes apparent.
You can't just use a "break" statement after insertpenis() or removepenis(). (That makes men wince.)
The company I work for have much of their code based on Zend Framework. It was a good fit to start with. We used MySQL for storage and memcached for cache; the site we had built was mostly just basic CRUD stuff and everything was fine. It did a whole bunch of stuff that we really didn't need but that didn't bother us too much. Then we built more sites. Over time we started to find things that we had to implement ourselves because Zend didn't provide them. That's fine; we couldn't possibly expect them to think of everything. We tried our best to work in the "Zend way" to keep things sane. Then we started to find things that didn't *quite* do what we needed. We'd extend bits and pieces to get what we wanted, still sticking to the "Zend way". On some occasions it would probably have been easier to just implement things from scratch, but we figured it was worth keeping things consistent; and hey, why start from scratch when you've got something that does *nearly* what you want? Then we needed more performance. We had a big event coming up and needed to be able to cope with a lot of traffic. We'd already maxed out all the hardware we could get our hands on and we still weren't fast enough - so we started profiling. We took out some low-hanging fruit here and there; removed unneeded API calls we were making and that kind of thing. Once we'd done that we started to see Zend's own functions appearing at the top of xhprof reports. We re-implemented some of the slow bits, skipping the stuff we never used. What we eventually ended up with is a codebase that appears to be built on Zend FW, but with very few of the advantages. We're really highly coupled to this *thing* that we're not really getting much out of. We almost certainly can't upgrade to a newer version of Zend FW without a *lot* of work. New starters who know Zend FW can be tripped up by thinking that they know how something works when we've actually had to change it subtly in the past. Sure it might have meant getting our first site out of the door quicker, but I can say with certainty that over the past few years the decision to use Zend FW has cost us more time than it bought us. As an aside: it's worth mentioning that there's a bunch of stuff that I personally don't like about Zend FW that I've tried to avoid raising because you asked about frameworks in general; but there will almost always be things that you don't like about a framework. A few months ago we started a new project and got permission to start a new codebase for it. Our lead developers spent a week or so finding out what people did and didn't like about the existing codebase and then put together a "framework" for the new project. It didn't take long at all to get what we needed: a router, a logger, an autoloader... A few other bits and pieces and then everything else could start. Progress has been very good since then. The general consensus from the developers is that they much prefer working with the new codebase. It's well suited to our platform and our industry, has the things we need and has nothing that we don't. There's no "clutter" in the core and much less needless abstraction which makes the system much easier to reason about. The lack of generification in our new code makes everything much cleaner and much more performant. I can't stress that last point enough. We've managed close to an order of magnitude improvement in performance for simple pages where the bootstrap etc is a lot of what happens. If you're building something that isn't going to be maintained past bug fixes and the occasional minor feature then a pre-built framework is probably a good fit. If you're building sites for clients at an agency then a pre-built framework is probably a good idea. If you're building something with only common features (basic CRUD and eCommerce type things for example) then a pre-built framework will save you a lot of time. If you're only going to handle 100,000 or so visitors per day then yep, a pre-built framework is OK. If you've got a constantly updated codebase that needs to work well at scale and fit your requirements exactly (especially if you're in an industry that's not just selling widgets): just take the time to build/assemble what you need. That is not to say that you should go full-on NIH; if there are components that do what you need that exist already (a logger or an autoloader for example) then use them. Just don't get coupled to a bulky framework that will ultimately only get in your way and leave its imprint in everything you write. After all: the people who write your framework of choice might stop maintaining it; then you've inherited a whopping great big chunk of code that *you* have to maintain. As a closing thought: here's a reminder that [this is still MVC](https://gist.github.com/TomNomNom/2948470).
Was easier to gradually refactor my own existing mess of non-OO-attempt-at-making-a-framework-that-worked-for-the-initial-project-ten-years-ago-but-didn't-transition-to-the-subsequent-sequence-of-a-dozen-or-so-other-projects-so-well code into (firstly OO, then MVC-esque) tidier forms, than attempt to start from scratch with something pre-rolled and with many new concepts to grapple with at once.
Does the whole PSR side of things lend a happy compromise, sort of? Roll your own but at least keep it PSR compliant so others can at least port modules into it?
You wouldn't be doing that, because it's my framework. I use it for things that I build, not things that you build. It's safer because I built it, and I know where things could go wrong and avoid them at all cost. 
Any good guides on building your own MVC? Where should I start with building it?
Lack of transition to PHP 5 by major players in the framework world. 
Obscurity isn't security...
He's just *that* good. Don't question it.
I cannot disagree with this statement. I also don't see how it is relevant to the fact that 0-day hacks against a known framework will not directly affect mine as it would if I had used that framework.
With a known framework you have the benefit of many more people working to solve the problem. I came across someone 'homebrewed' framework as a code example the other day, the first file I opened, there was an sql injection hole on the first 5 line. This would of been picked up on a larger project.
I will concede that more eyes on a project have a better chance of picking up things people missed... Regardless, my project(s) do not have publicly published reports that looks like this: http://www.cvedetails.com/vulnerability-list/vendor_id-2337/product_id-4096/Wordpress-Wordpress.html The original point of my thread was that I started a framework from scratch to learn. That framework finally matured, and while it may not be 100% airtight (is anything ever really?), at least the holes in it are not publicly announced as they are with larger projects. That was the only point I tried to make, and like it or not, it is a valid one. 100 shitty developers all working on a project doesn't necessarily mean it's better or doesn't have holes, and it's publicity by nature make the holes that are found more pronounced... It's a trade off... Feel safer using massively produced frameworks? use em! 
The main reasons I *did* 'roll my own' was nothing else existed at the time. Would very likely not do that today in 2013. In 1999/2000 there weren't any widespread PHP/MVC options.
Much wisdom comes from experience.
Does your statement apply to all the people who wrote the major popular PHP frameworks? After all, they wrote their own too.
&gt; By framework, it doesnt have to mean MVC in its current flavour - can be anything: a code generation library, templating system, framework, utility package. In that case, you're misusing the term "MVC" which refers to a model-view-controller structure.
TL;DR, but overall brutal approach.
Learning, primarily. Frameworks can be insulating. A big part of the why of using a framework is that it takes care of a number of tasks for you and creates a foundation for the rest of the code. Building my own framework meant that, for the first time, I had to grapple with those problems that all frameworks take care of, one way or another. Even if I only ever use other frameworks at work, I'll still carry the lessons of having built my own into whatever code that I write. The other big reason is simply one of style. Frameworks are opinionated. Good libraries aren't and slot neatly into whatever code-base is using the library, but frameworks tend to dictate how everything fits together. For my own projects, I prefer to do things my way, not the way that some other framework dictates. Edit: And for as much as I am able, I'm trying to make my own personal framework as much like a good library as is possible and dictate as little as possible to the client code-base.
What does bloat have to do with plug n play? They are wholly distinct influences in my mind.
Because I started my own about 7 years ago and never open sourced it. It was a horrible POS, and I am ashamed that it still runs the system of a fortune 500 company. However, as I became more of a front end architect, I became enamored with the idea of tying PHP and JS together into a more seamless union. Now, I think it's pretty cool, but still think it's a POS in some regards. I work on it in my spare time, because it's fun, and I can test out my own ideas, since I know how the whole thing works. I finally decided my Model layer sucked entirely, and ripped it out and replaced it with Doctrine.
kinda reminds me of ringworm, though :-/
I ran into this problem as well. [This](http://docs.vagrantup.com/v1/docs/nfs.html) is the solution.
Simplicity and history for me. Sure there are many "light" MVC frameworks out there now, but they simply did not exist 8-10 years ago. At the first company i worked at we collaborated on our own framework, and in all the jobs ive had since then it has followed me around with it (especially since i have worked with many of the same people through various jobs since then).
All the existing implementations did something that I didn't like, particularly surrounding the overuse of auto loading and just whacky folder structures. Also, I just wanted to see if I could do it.
My understanding with psr is that it's a code and directory format, not a functionality spec. So technically you could have two modules work together without the variables or files clashing; buy that certainly doesn't mean they'd be integrated.
You make little sense.
You're being obtuse. alekseykorzun means that the functional core of most modern frameworks is sleek and optimized (probably to a higher standard than you would do yourself; I've seen horrible hobbyist autoloaders before), and that the entire rest of the framework (say, everything but the DI container in Symfony2) is optional (and so shouldn't be considered bloat). Make sense now?
I was using FPDF library it was working pretty good http://www.fpdf.org/
&gt; This is disingenuous at best. I work with Symfony and its internals regularly, and this is patently untrue. Certainly no code is perfect, but casting such a blanket statement is both rude and ignorant. Since when SF2.x has become and MVC framework? Last time I checked, it was explicitly stated that SF was **not** an MVC framework. &gt; These frameworks are called MVC frameworks because they emulate MVC. Classical MVC is not possible across a stateless channel like HTTP, so this is the next best thing. YEs, you cannot implement classical MVC pattern for web. But MVC as such has changed since the early 80s. For web we have MVP, Model2 and MVVM patterns. The reason why frameworks, that advertise themselves as "mvc frameworks", are full of s*it is following: - the have no separation between presentation and model layers - they have no separation between user interface creation and handling of user's interaction &gt; How so? Most frameworks I've worked with keep to SOLID design principles. While they do often pretend that view are just templates (though Laravel does not), no MVC framework that I know of thinks of models as just ActiveRecord objects. Can you give an example where this is the case? For the reasons given above ... Also, almost every framework that talks about to "models" instead of "model" in the documentation. Few examples: CakePHP, Codeigniters, Yii, Laravel 3 (and older), FuelPHP, Lithium. Absent from this list is Laravel 4.x, because that one seems to have documentation that encourages implementation of proper model layer, and ZF, which has never been advertised as "mvc framework" and where community has been advocating against people who keep trying to extend `Zend_Db_Table` (.. or what was the name of that class). The bottom line is this: every framework which talks about "models" (plural) is not implementing MVC. 
If you got server access, check out wkhtmltopdf at https://code.google.com/p/wkhtmltopdf/ , works much better than FPDF or TCPDF.
I'm guessing you're developing with some permissive settings and/or without xdebug active; I got a couple of undefined variable errors(I'll send you a fix for those soon). Besides that, super nice, good work!
I do have server access, currently experimenting with it on my dev machine. It looks like it might be the way to go so far. My only hesitation is I've got to deploy eventually to Linux, Windows and OSX eventually - it's a bit more work than a simple PHP library in this regard. 
I had an issue where I could easily get my code to interact with the arduino but only if I opened the serial through the Arduino software first. I didn't get to a solution as I haven't finished the project.
You should know most of this stuff as a minimum: http://programmers.stackexchange.com/questions/46716/what-should-every-programmer-know-about-web-development Be able to talk about design patterns, software architecture, scalability etc. Let us know how it goes.
The upside is that you do not have to mess with tables to get your PDF to display correctly.
NFS issues are very real, especially when used in combination with APC. Seriously, get yourself a $7/month github account and start using some decent version control.
For a case like this I would tend to use some kind of in_array validator.
I have never interviewed directly for a dev job but am in the process of hiring for a Symfony 2 dev at the moment. I'm not so much interested in the detail of code - we all Google everything and I don't want some walking rulebook type stinking up my office. Instead I want someone with experience in various development situations. Can you give me an example of a problem that wasn't easily solved by a simple Google, and how did you eventually resolve that problem? What did you learn from that experience and how has it helped you with future problems (not just in programming). What side projects do you work on? What has been your most enjoyable project to date / why ? Remember the interviewer is probably looking for a nice guy who won't disrupt the current environment, and will add value. You don't need to know everything, just be willing to accept that you don't know everything but are eager to learn and help grow their company / dept. 
I would expect questions regarding your version control, release processes, agile development, team management/working. Questions also would be asked to determine if you're keeping your finger on the pulse as PHP has stepped up a pretty big gear in the last 18 months.
Do you plan on adding some sort of permissions system? Right now I'm using MediaWiki with a [custom plugin](https://github.com/jacobgreenleaf/gatekeeper) to basically divide articles easily into "public" or "private." Since I use my wiki for public job-related things too, I don't want to be sharing everything I write on it to the world. Your system looks perfect if you could just implement this kind of public/private system (or guest system.) 
I read that topic before I made this. There's only really about 3 different options discussed there, which are also discussed (along with others) in the stackoverflow link I have up the top. I'm just trying to find as much information on the topic as possible. 
It's not really on the immediate agenda, but I have been thinking of adding authentication support. Since I only use it on my local machine(s) and sync my library using Dropbox, it's not really a prioritary item. Besides, this would mean working with some sort of database, and I really want to avoid that, I want to keep everything as simple as possible. Perhaps using HTTP authentication for everything in the library directory except a subdirectory named "public" or something...
You could probably do it with a few rules inside a VirtualHost declaration.
And if a Symfony 2 dev comes forward claiming years of experience then you know they're full of it!! I'm in a similar situation and keen to get a new Dev in for SF2, but I'm expecting to find someone who has used frameworks that is keen to learn and adapt. Good questions, maybe the OP could answer them here for some feedback.
Exactly that. And to be honest, if I started today, I'm not sure which framework I would choose. It's not that none of them are good, just that all of them are kind of bloated and offer way too many unnecessary things IMO.
Nice work.
Having just attended PHP UK Conference in London, one of the most prevalent messages was that writing your own framework was an unnecessary exercise that a lot of PHP devs actually do. I'm sure there are legitimate reasons that would suit a larger organisation with well defined ideals, but I would say 90% of the devs who do roll their own, do not fit this catgegory!
I also have only positive experience with navicat. Got in touch at work and since than it is my favourite GUI for MySQL DB. And it can handle more then MySQL !
&gt; Since when SF2.x has become and MVC framework? It's always been one. At least, it's been this same 'non-classical' MVC that other frameworks have been. Seems Fabien Potencier doesn't want to call it MVC because he get's that it's not 'classical MVC', which is fine by me. &gt; the have no separation between presentation and model layers Really? Every framework you've listed does this. Some better than others, but I don't see how that makes them 'full of shit'. They call themselves what is *now* known as MVC. &gt;Also, almost every framework that talks about to "models" instead of "model" in the documentation. Cake, and Laravel talk about the 'Model layer' and 'Models'. As for the rest, you are right - they don't talk about a model layer. Disappointing. Seems to me, though, that this is the natural evolution of MVC in a stateless protocol. Statelessness means the natural boundary between model layer and the controller layer blurs. On the web, it often blurs enough that the only thing people use the model layer as is a crude data access layer - hence why you'll see models referred to as such. At the same time, I don't think yelling *stop calling it MVC* is helpful. Classical MVC is dead on the web (though hopefully not forever), so people tend to understand what you mean when you say the phrase. Saying everyone is writing shit code because it's not true MVC is silly.
I don't expect senior developers to be the worlds foremost expert on a language. I expect them to be well-rounded, know how to troubleshoot, be a good team leader, and know how to get answers. I also expect that they will be able to interface well with various other parts of the business.
* Do you fundamentally agree with ALL of the decisions made by the original developers? * Do they allow code contributions? * Fo they allow those contributions to be made over GitHub? * Have they released a new version in the last year? * Do they respond to security holes quickly? * Do they have TOO MANY security holes? * Are they more dedicated to backwards compatability than to adding new features? * Do they hate the command line, even though you love the command line? * Is the documentation terrible, but you know the features are mostly good? * Is the leader of the community an elitist asshole? * Do you like the components, but feel there is too much boilerplate for easy usage by new developers on your team to understand? * Is the codebase entirely untestable? * Is the website for your favorite framework ugly as sin, or rocking a forum full of spam? There are a million reasons why a specific framework might need a fork. Diversity is fundamental to progress and evolution, and without it we are missing out on new ideas.
Yeah, it's actually wasn't a bug, it was my fault... I had compiled PHP from *i don't even know what* branch... What about bugs, it seems there's not so much of them, the only problem here, of course ZTS and rarely used OSs.
This is exactly how I'd do it if it was still 2001.
Nice work, I love it, but I don't understand how this can be considered a Wiki right now. A wiki is defined by the fact that you can edit pages in you web browser. Right now it's more like a framework to render .md files.
Then you're comparing an abacus to a Macbook. These frameworks are designed to handle a large variety of development goals - yours likely can only handle limited tasks. That's fine, and you likely don't need the added complexity that a full-scale framework needs, but calling these frameworks shitty because of it is quite stupid.
Thank you for the clarification. I was not being obtuse, he just lacks clarity and evidently skipped words or misspelled in his latest response.
&gt; PHP has stepped up a pretty big gear in the last 18 months Can you tell us more about this, please?
You sir must be a delight to hang out with, in parties :)
http://jspdf.com/ is coming along and is stricly a javascript implementation. Probably not what you're looking for, but felt it was worth noting on here.
In reality, different companies define 'senior' differently or have different approaches to determining if a candidate is 'senior' enough for them. Given this reality, it is prudent and pro-active for phpdonkey to look for as many perspectives as possible in order to prepare. Frankly, his username has php in it, so that is probably more than enough proof of his seniority.
Seems like it blocks most (if not all) of the harmful filehandling commands. Sad thing is it runs on PHP 5.2 from what I seen via phpinfo. It really should be on atleast 5.4.
He is likely refering to the change happening with PHPs recent package manager (http://getcomposer.org) and package repo (http://packagist.org) this combined with the spread of http://phptherightway.com. Unfortunately not all companies are there yet. These tools bring PHP closer to Rails and Node. Frameworks like Symfony 2, Laravel 4, PyroCMS 3.0 etc. This is the future of PHP development, and will be necessary knowledge in the coming years as smallers teams push this type of development forward. Rails and Node have been doing it this way for a while, about time for PHP.
http://www.writecodeonline.com/php/ &lt;-- Also good.
Sorry guys, it's actually down for the moment. Some good dude, guitarnerd, showed me a few vulnerabilities. I'm going to attempt to fix it again tonight and see if you all can crack it tomorrow. Also, for the record, it is sandboxed lol, so I'm not running totally blind.
Might I recommend [Ace](http://ace.ajax.org) over CodeMirror? I've recently replaced CodeMirror in our production CMS and so far it's been more flexible, more responsive and just as easy to implement. It's almost (stress on the almost) a decent replacement for a proper code editor.
Just make sure you know your shit as it relates to what was on your resume and don't bullshit them if you don't know something.
Might want to fix these whilst you are at it! $handle = call_user_func('f'.'open', 'c:/php5/php.ini', 'r'); var_dump($handle); var_dump(call_user_func('f'.'gets', $handle)); echo "&lt;script&gt;alert('xss too /facepalm');&lt;/script&gt;";
Last time I did an interview I got asked how to validate an email address with regular expressions. I forgot to practice my regex and ended up making a fool of myself. I don't want to make those mistakes again!
You lack knowledge as a developer to understand me, stop posting bullshit and go write some code.
Still XSS and variable functions evade any checks.
Got an example by chance cs278? By message preferably :) 
This.
Have you researched the company fully? Looked at their products and business domain? Have you prepared questions to ask them. Can't tell you how many people I've rejected at interview stage as they knew nothing about our business.
what is the difference between single quotes and double quotes in PHP, and why use either one. SHOCKING how many people just don't know that. that's usually where my quesionting starts. may seem trivial, but if I am hiring a SENIOR person, you better know your stuff
You should have told them that it's a trick question and you refuse to answer it on principle.
&lt;sigh&gt; Once again, understood. You are making the assumption I can't catch my own security holes. What you are essentially saying is everyone else can and I can't... Well FUCK that noise, good sir. Jump on your bandwagon and ride the hell out.
You may have some trouble finding something like this, since real estate agents usually pay money for that access. Maybe zillow or similar has an api?
I'm currently working on a project that utilizes the Zillow API. You should be able to use that to get what you want. Also look into the Trulia API. I would post the link to my project but the domain name needs changed and the project is far from finished. Not even beta enough to show you guys. :-/
You know, I've actually tried Ace first. I've used CodeMiror in [another small project](http://dbv.vizuina.com/) of mine, so I wanted to try an alternative, and I ended up with Ace. I wanted to host it myself of course, and I downloaded a custom theme. I had placed the required code just like in their example, and the editor still tried to load the default theme and it 404'd. Since the editor is still in read-only mode for the moment I didn't feel like trying to figure out what the problem was, so I simply used CodeMirror instead. I will, however, give Ace another go for sure, because I've heard a lot of good things about it.
The code editor is currently in read-only mode, but I will implement page creation and updating inside the actual interface (I even mentioned this in the roadmap section of the homepage). I've chosen to focus more on the way I currently use it, but still wanted to call it a wiki because I plan on turning it into one in the future :)
I'm a Symfony 2 dev and I can't speak for Laravel because I have not touched it. However I do think that composer is a godsend for PHP - SF2 leverages Composer very successfully without issues like what you refer to in Laravel.
Really depends on the country - each country has their own "MLS" (multiple listing services).
How did you try to load it? I had similar problems loading with requirejs. In the end I downloaded this folder: https://github.com/ajaxorg/ace-builds/tree/master/src-min-noconflict And then included ace.js before my init code. The builds worked first time.
Wow... I wish I had this 2-3 years ago... super useful... I love developing WordPress Themes and plugins. I have a lot of "snippets" that are basically a small library of wp theme functionality. Wikitten would be nice to keep all these snippets and manage them.
&gt; and why use either one That's really an iffy question. While I suppose the 'correct' answer is to always use single quotes for strings that should not be parsed, in practice this amounts to splitting hairs and is at the very bottom of the list of meaningful performance improvements...
Be prepared to answer stupid 'puzzles' that do not translate to real world of software development. I had interview once (I have close to a decade of experience keep in mind) and guy who interviewed me was fresh out of college with a mathematical degree and one year of real world experience. He asked me how to do x.y.z and I solved it in about 0.5 seconds using PHP.. then he asked me if I can do that in PHP (explode without delimiter) I said yes you can and then he told me he is looking for a more mathematical approach. I'm not 'horrible' at math but that was just retarded. He also spend 5 minutes talking about how the company worked extra hard to create something I could have probably made my self in a week. 
I think a searchfunction for headlines would also be a useful feature for this great software.
I would expect a junior PHP developer to know this.
Michael Peacock did a wonderful talk at the recent PHP UK conference on refactoring using Symfony 2 components. I have done similar myself to a legacy project, though not as thoroughly as he did. The video of the talk will be uploaded soon, but you can check out the slides here http://joind.in/talk/view/8046
All updates should be complete. Any more quality hacks?
By the way I really like the look of dbv. Might have a play around with it tomorrow.
Very good work! There was a project I've always wanted to do is a wiki whose content is in Markdown files that are *in* the repository with the code (sort of a mix like github pages, phpdoc and your wiki). The wiki would allow to show the documentation online nicely, while always keeping up to date with the content of the repository. That is coming close to this I like it!
Whilst it's not a true Wiki in that sense, having all your code snippets/tips under version control is the way to go. Hence why I'm currently using GitHub Gists for pretty much all my new notes/tips and configuration guides/etc. either public/private. Nice project - will suit quite a few users out there for sure.
yes, the why question comes down to preference, but there is a readability/maintenance benefit to having code like this: echo 'The value of foo:'.$foo.' and bar: '.$bar' and elements: '.$array[0].', '.$array[1].' are listed.'; vs echo "The value of foo: $foo and bar: $bar and elements: {$array[0]}, {$array[1]} are listed."; edit: I should also note, with our interview style (esp. on topics like this) there are no *right* answers, you just better be able to defend your decision. like if I am going to echo out a whole lot of HTML with double quotes in it, I will switch to a single quote string with concatenation so I don't have to escape every single HTML double quote. 
Fuzzy autocomplete would be tremendously useful when PHP's mixture of noun/verb, underscore and array_prefixed naming conventions mean you can't remember exactly what you're searching for.
php.net/functionname kind of already does this
Meh. http://voke.fm/memcache http://php.net/memcache Tell me which one is more relevant. 
I know... right now it just has functions. Adding that stuff would have taken longer and I wasn't sure about the best way to do it. I figured it'd be best to just see how people like it as is (it has a basic search feature, btw). edit: added a bunch of extra functions, including memcache ones.
and the correct answer is: google.
Ok, thanks, I'll think about adding that. edit: added
Very cool. Type ahead would be great. e.g. I can never remember that strreplace is str_replace. If I search for the former then I get nothing.
I'm totally going to be using this for the order of arguments, like strpos, in_array, etc. :) Merci beaucoup!
Kcachegrind and xdebug for profiling... Anyone started with an answer like that would be doing well in my book.
Silly question imo. I forget regex all the time. I use cheat sheets and reggy, a program that helps you build them. If I was asked to do this in an interview, I'd pull my phone out in full view and google it right in front of them. Why not? You can use google at work, so why not here? If they told me not to I'd tell them this is an example of me solving a problem I don't know the answer to. If they didn't like that, I'd know they were not the company or me. I don't want o work with unreasonable people.
Variable functions/variables is still a problem, see the code below. You might bandaid that by scanning for something like /\$\s\*\$/' and /\$\s\*[\w\s]\*?(/, but there are several other cases which also needs to be covered - on top of my head I can think of create\_function() and unserialize/\_\_wakeup() - I'm sure there's others. Handling this with mere regexes is going to be very hard if not impossible. A slightly better approach would be to use PHPs tokenizer on the supplied source code and walk through the token list. This will at least allow you to beat simple obfuscation techniques. // $f = 'file_get_contents' $f = chr(102).chr(105).chr(108).chr(101).chr(95).chr(103). chr(101).chr(116).chr(95).chr(99).chr(111).chr(110). chr(116).chr(101).chr(110).chr(116).chr(115); // $s = '_SERVER'. Could also have used get_defined_vars(). $s = "\x5f\x53\x45\x52\x56\x45\x52"; $s = $$s; // Displays source code of script echo '&lt;code&gt;'.nl2br(htmlentities($f($s['SCRIPT_FILENAME']))); 
Or you just add the php.net search box as a keyword in FF and then just type "php is_array" in your location box.
I prefer this - gives me direct links, with auto complete in my browser bar. https://chrome.google.com/webstore/detail/php-documentation-phpnet/kfiahljocaflpaiopilgpiochncgdnhd
Pretty sure I wrote the smallest PHP wiki engine ever some years ago. It handled bracketed links and used HTML for formatting and that's about it. I don't remember if I had it handle camel case. People seem to have forgotten what makes a Wiki a Wiki. It's not esoteric formatting languages. Not at all. What makes a Wiki a Wiki is rapid creation of pages. "Wiki", after all, is the Hawaiian word for "quick".
Very nice, thanks!
I was trying to remove the need for a model file unless something different needed to be done in it, e.g. not CRUD or search etc. So instead of having 20 model files which all contain mostly the same code, you would only extend the base model class when a specific need was there. I would guess that at least 80% of tables used in website tables are the same thing, and this was what I was looking at. 
I think you should consider widening the box on the page. I think a safe base resolution that many websites assume is 1024x768, meaning you can make the box as wide as 1000 pixels. If you want to be extra safe, or have phones scale less, you can still up it another 200 pixels on what you currently have to be 800 pixels wide. There seems to be quite a lot of horizontal scrolling for some of the search results that really takes away from what I feel would be a helpful tool.
Ah yes - that is exactly the term I was asking about. So I guess if this is a feature in MCV frameworks or is it the defauly way it is done. (I ask because most of the discussions / blogs I've read all point to making new models for each table) 
It ends up leading to questions revealing whether or not people understand the language and how it works. Generally, it is never ONLY questions like that, but like I said, it is shocking how many people are applying for a senior developer position that don't understand that there even IS a difference, let alone what a closure is.
or you could just add this as a bookmark and use it.
I have been playing around with the layout a lot. If you make your browser window less wide, it will transition to a tablet/smartphone view. I thought about making that the standard view, but it would feel weird having all the words on the left on a big screen. edit: Ok, I shifted things around a bit. 70px wider and moved up a bit on the page.
Ah, yes. I just saw your master hack in the db. :) I'm using regex and denying functions in my php5.ini. Thank you for white hacking me. I have corrected it.
/functionname does searches, not autocomplete (unless you mean my browser may suggest some results before I navigate). OP probably isn't looking for feedback about somebody else's website anyway :)
it does fuzzy searching is what I mean, you can completely boch the name and php.net usually still figures it out.
You can also add a [search plugin](https://addons.mozilla.org/en-US/firefox/addon/php-manual).
it would be nice to have a liquid layout
&gt; Some guys refuse to use SVN altogether I think the crux of your problem is right there. These "ninja edits" never go well, ever - for anyone. There is zero history of the change, no ability of roleback and no way of documenting why changes have been made. Your code repository (SVN/Git/whatever) needs to be king in this whole process. If you are even considering hiring developers that are going to engage in a team environment (e.g. your small web dev company) but refuse the use of version control - do not hire them would be my advice. &gt; Since I have a hard time with some coders who keep making "ninja edits", I was toying with the idea of trying to implement version control "backwards"; e.g. no matter who or how a change is made, the server would push the new files up to the repository on change. Whilst this could somehow work, it still won't stop changes getting overwritten between "ninja saves" - and the SCM is going to have a hard, if not impossible time managing the changesets for any form of branching/merging. But I get the impression that at the moment the ideas of branching/feature branches is outside your team's scope - with everyone basically fighting on a poor-man's "trunk/master".
Some tips: 1) **Use a VCS**. Whether it's git or subversion or whatever doesn't matter. Get *all* of your developers on board. Period. Any developer refusing to use version control is not a developer you want to keep around. I can't possibly emphasize this enough. 2) **Stop using FTP.** Use your VCS for pushing and pulling code. Using FTP to get code to a staging server which then puts the code in VCS is *backwards* (to say nothing of being a misuse of the term staging). Your developers should be committing their changes *directly* to the VCS and *nowhere else*. 3) **Stop using a staging server as a development server.** Staging should replicate production as closely as possible. Code should never change directly on a staging server. It should be changed on developers' working copies, and committed to VCS, which is then deployed to staging for testing and final deployment to production when testing produces no more unacceptable issues. 4) **Use [PHP_CodeSniffer](http://pear.php.net/package/PHP_CodeSniffer)** or some other code quality control to prevent IDE disparity chaos. There are sniffs already that reject trailing whitespace, tab characters, non-Unix EOLs, and enforce any number of different configurable coding standards that may be violated by developers' differing tastes in editors and platforms (or the developers themselves). Once you've decided on your standards of choice, write [pre-commit hooks](http://pear.php.net/manual/en/package.php.php-codesniffer.svn-pre-commit.php) that reject commits which violate these standards. These are standard professional development practices. I wouldn't even consider a position at a company which didn't enforce most, if not all, of these.
If you will forgive a stupid question: Say you and I are both developing on the same site, at the same time. We both pull the code out the repository. When I'm on my own, no worries. I commit my changes, up to the VCS, and then on to the staging server. What I have a hard time wrapping my head around is this- how do I see your changes and vice versa? How do two developers use VCS to work on the same site without getting in each other's way?
Check out [Snappy](https://github.com/KnpLabs/snappy) -- it helps make using wkhtmltopdf a bit easier.
Check out the "Centralized Workflow" section at: http://git-scm.com/book/en/Distributed-Git-Distributed-Workflows "This means that if two developers clone from the hub and both make changes, the first developer to push their changes back up can do so with no problems. The second developer must merge in the first oneâ€™s work before pushing changes up, so as not to overwrite the first developerâ€™s changes..." I favor the "Dictator and Lieutenants Workflow" model myself, but the page should at least get you thinking about how source control could work for you.
Good stuff!
These guy's who are not using version control, they either get with the program or they get out. Every professional developer / dev house worth their weight in salt should be using revision control of some kind. Cowboy editing files without first being versioned is a surefire way to disaster. If I ever found out a dev I work with was making changes to non-versioned files, I would give them a piece of my mind plus possibly kick them in the ass.
Or let the user select which version of PHP to use.
Here are some questions I have lined up for interviews when we're not interviewing junior guys. ------------- Describe what late binding is and how it works in PHP. When would you use a destructor? When would you define an interface instead of a class? echo (0x00+2); = 4 . What could have caused that bug? *This was a bug in PHP core that was fixed early last year. This is more to gauge their troubleshooting process and I do not expect them to get the answer correct.* How do sessions work internally? What are some ways to find a missing number in an array of 1 to 100? How do you explicitly cast an object to another type of object with the same parent class? How do you create a function that can work with different types of an object that share a parent class? What.s the difference between a class and an object? What.s the difference between XOR and OR?
Thanks - yeah, I noticed that, I'll fix it. edit: fixed now in all cases.
&gt;People seem to have forgotten what makes a Wiki a Wiki. It's not esoteric formatting languages. Not at all. What makes a Wiki a Wiki is rapid creation of pages. "Wiki", after all, is the Hawaiian word for "quick". I've replied to a similar comment in this thread before, so I will just paste the same reply if you don't mind: &gt;The code editor is currently in read-only mode, but I will implement page creation and updating inside the actual interface (I even mentioned this in the roadmap section of the homepage). I've chosen to focus more on the way I currently use it, but still wanted to call it a wiki because I plan on turning it into one in the future :)
I hear this argument a lot and while it's perfectly valid, I never seem to have a problem remembering this stuff.
Surely the 13 sort functions cause you some trouble? :) Do they modify in-place or return a copy? Are they stable sorts? Which ones clobber keys? Which ones are case sensitive? They give me nightmares.
This is a horrible solution which shouldn't be used at all, since it doesn't actually protect you against injecting HTML tags. There are many other injection vectors available. See: https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet http://www.xssed.com/
There's also [HTML Purifier](http://htmlpurifier.org/) for when you need to allow *some* things but still protect yourself.
It's probably a matter of degrees of use.
Thank you very much
That's a great question which I will probably steal for upcoming interviews! However I just know that if I was asked it I would fumble an answer, despite having a good knowledge / experience of your suggested answers....
Christ! I misread the first sentence and thought those were your junior questions - I was about to slit my wrists!!
Well I can't speak for other companies but my experience is that this is the way things work. The very fact that you are keen to break into SF2 will be beneficial if you go for a job in it - companies love a broad background of technologies. There is always certification as well if you prefer the education route. I am fully aware that picking up SF2 from scratch can be a headache.
most of the string functions have a note on them which indicates if it is binary safe, e.g. [this one](http://www.php.net/manual/en/function.strrchr.php) and many others say "Note: This function is binary-safe."
PHP 5.4.8 &gt;Fatal error: Call to undefined function finfo_open() Attempt to install fileinfo: &gt;WARNING: "pear/Fileinfo" is deprecated As of PHP &gt;= 5.3.11 and &gt;= 5.4.1 the magic datababase format has changed. :(
Fileinfo is part of PHP as of 5.3, you shouldn't need to install it. The PECL extension has been discontinued. Are you on Windows? Because if you are, you have to make sure that the extension is actually enabled in your php.ini file: http://www.php.net/manual/en/fileinfo.installation.php
Try [Bootstrap scaffolding](http://twitter.github.com/bootstrap/scaffolding.html) for layout. Provides a fluid layout on both mobile and desktop.
I wouldn't call it "instant" if you have to type a full function name and press Enter. Why not add suggestions as you type. If I type "str" I'd expect to see some of the most popular string functions (strpos, str_replace etc).
Nice app. I actually use the offline documentation, the .chm one. Instant results, shows functions as you type, etc.
I went through this at a previous job. The environment did not change, so my employment there did.
Well, next time just tell them about this : http://ex-parrot.com/~pdw/Mail-RFC822-Address.html
I agree that in a perfect world, only one person is fooling with a given file at the same time. However, we have several new guys on the team, working remotely, and sometimes the best way to explain something is to make a quick code edit and say- look at line 106. Waiting for everything to push up to the VCS can be annoying in these cases, but I suppose it remains the best option. 
Are you serious? Don't post this stuff here.
Yup :)
On the commandline: tail -n +2 filename.csv Will skip the first line. Take care to use temporary files and not overwrite the input directly. In PHP just use the `file()` function and `array_shift()` to plop off the first line.
There is no way php is the best tool for this job, in any stretch of the imagination. The 'linux command' solution: sed -i '1 s/^.*$/yournewfirstlinehere/' yourfile.csv `-i` says to modify the file in-place rather than dumping to the screen. The `1` says to replace the first line. Be sure to make a backup of your files before you go mucking with them!
I just want to throw my hat in here and say you really need to start using git I think you should ignore svn. Secondly turn off ftp access. Only you should deploy. (in an ideal world you would of course have automated deployments with automated testing but..) Any developer who is modifying code live is just asking for trouble. There is never ever a good reason to do this. We have dealt with all kind of weird employees and contractors over the years. From those who thought they were geniuses who would not use anyone else's code, coders that would just continually submit work without tests, a coder that would just keep his var and method names so short his code was totally unreadable and so on and so on. After a few weeks of help, training, advice, guidelines, etc.. then if they have not changed then its best to let them go.
What kind of bandwidth limitations are your devs working with? Usually, only an initial checkout should take the most time, after that updates only transmit changes in files. I think you need to slow down a bit and have a bit of patience. Once your used to the new workflow it shouldn't slow you down at all. Plus, teaching new developers to work with a VCS from the beginning and always working that way will emphasize "that is how we work here".
I've built http://phpixie.com after using Kohana for a few years for my websites, here is why: * I thought that I could achieve same features in a more effcient manner * I thought there were features that should be left out as they provide unnecessary overhead * I decided that a framework must only do what it can do in the best way possible, covering the most generic things that everyone uses, while leaving out the developer to decide what he want to do * I disliked code generation that a lot of frameworks require you to run * I believed that programming should be fun so tailoring everything o be enterprisy reducec innovations
Agreed. This is a nice little tool but without a search autocomplete it's not very useful, IMO.
It sounds to me like you should invest in GoTo Meeting or some other collaboration tool if this is a common scenario. "Waiting for everything to push up to VCS" doesn't sound right to me. If you're talking about small to moderate changes to less than a dozen files at a time, VCS commits are virtually instantaneous. If that's not been your experience, there is probably a hardware or network problem at play.
I don't know anyone deploying with phar, how popular is that? Most people I know would deploy via git using Capistrano, use rsync or go full out and create Debian packages. Your other advice I totally agree with though.
I wish I could show this one of my previous coworkers who used arrays-in-arrays for everything, because creating objects is expensive. He also had another (incorrect) belief, that "large" objects (he considered the image resources that the gd functions use as large) should be explicitly unset(), and refused to believe me when I told him that they will be cleaned up anyway at the end of the current scope.
This seems like it would be the right answer. Luckily what will be written will always be less than what was there. So by reading the first line and padding the replacement with whitespace to the amount of bytes the first line took up it will write over the first line. Does this sound right?
[Even better](https://addons.mozilla.org/en-US/firefox/addon/add-to-search-bar/).
Yeah, that makes it only a lot less convenient than any of the other options. I should totally do something that is less useful. :P
Why won't it work in 5.5?
Yes that seems like a fine solution then :)
hard to argue with people with preconceived notions like that, even with pure evidence. Simply do a free check, run a php script, then do another free check - look! the process isn't running, and all the memory is given back! w00t! Some people still wouldn't believe evidence that plain.
I would use http auth over ssl. The user can be the username/id and the password the api key. That way, pretty much anything can consume the api. Using custom parameters makes everyone's life more difficult.
&gt; (Note: This only applies to PHP 5.4 or newer.)
+1. On the GD image object use - whilst you are of course correct (GC will clean up on exit) - if your script if creating a tonne of GC objects (e.g. in a process/loop) I would be actively destroying those objects after use in the run loop(s) - but using **imagedestroy()**, not **unset()** :)
He may not have been wrong, others are saying this applies only to php 5.4 or newer.
&gt; you should deploy using PHAR or at least zip files, so you don't have to send 10000 files across the network. Is that usually a problem anyway? File sync/diff algorithms (like Rsync) eat this stuff for breakfast, unless of course 10,000 files actually change on the target in a release cycle. &gt; you should setup environment variables on the systems, such as DEV, TEST, STAGE, PROD, and use getenv() to see which system you are on Big fan of this - I have a config file/key loader class that does exactly this and loads in different config file stacks based on environment keys.
Note that this apparently only applies to classes and not `$foo = (object) array( 'blah' );` aka `stdClass`. &gt; Note though that in the above I have been considering objects with declared properties. PHP also allows "dynamic" properties (e.g. what stdClass lives off). In this case there is no way around using a hashtable (stored in zend_object.properties). So don't rush to `(object)` everything in the interest of saving memory I guess.
I'm missing a good starter theme. The default theme is to put it frankly sub-standard. There's all kind of stuff looking weird at any resolution, especially when you scale down to mobile sizes. imho, it should be your top priority to improve the theme so it looks good by default and is easy to customize. (think Twenty Twelve in WP) Congrats on shipping 1.0!
Check out emergence, it's a real-time VCS for the web that enables the magic you're looking for: http://emr.ge Feel free to PM me if you get lost, the site isn't comprehensive beyond its install guide
This looks promising. Tell me, do I have to use your views template system? Am I free to use my own MVC framework?
I doubt you will even reach the "plop" with a large input file!! Since file() reads an *entire* file into an array.
Now, before I get slammed over the head because this class uses a lone eval command, please understand that the code is extensively parsed, validated and overwhelmingly antagonistic to the sandboxed code before it allows it to run. The purpose of this class is to provide a tightly controlled sandbox for limited amounts of input code, not to run Wordpress, and for those situations in which you want to present the opportunity for end users to run well-defined code. Before the code runs, PHPParser reads the entire input code. If it fails parsing an exception is thrown. Then it checks for dynamically-defined function names, variable variables, etc. and throws an exception if anything is not identified by a simple string. Then it checks every function call, class, constant, global, superglobal, magic constant, keyword, and even operator against user-defined whitelists and blacklists. Essentially, if you don't want the code to use it, you can lock it down. On the other hand, you are free to define and create a sandboxed environment for the code free from any outside functions, classes, variables, etc. By default, the class doesn't allow access to any functions or classes you don't allow it to use, disallows eval, \_\_halt\_compiler, declare, include, die and exit, doesn't allow function, constant or class declarations, rewrites the superglobals and magic constants to return empty values, and if you allow access to get\_defined\_* or get\_declared\_* it will only return the values the sandbox allows the end user to use. All this being said, this sandbox doesn't require the use of any advanced pcntl_* functions, or changing the PHP or server environment, or really any more work from you than to define your whitelist and blacklist rules intelligently to fit your needs. This is a pure PHP attempt at solving a long-standing need in the PHP community, and relies on parsing in the same manner that the PHP interpreter itself uses in parsing code, providing for very accurate results. Please feel free to comment if you have any questions, this project is still in heavy development, and since it is open sourced under the BSD license I hope we can all work to improve it!
I can see this as being useful for allowing non-admin users to enter limited PHP code in certain scenarios.
Very nice, I might have a use for this. How does it handle things like dynamic function calls? $func='evil'.'function'; $func(); Or some of the other dynamic ways to run functions/create classes available on php
From reading this it sounds like you have an idea for what you want to do but no concept. You need to go to the drawing board and create mockups. Usually I draw mine on paper, or you can use a service such as https://moqups.com/ Create mockups for every page, starting with the first page. The mockups should show which elements are present on every page and where these elements should be positioned. Notes should describe each elements meaning and possible interaction with the visitor. This process will take a while, but after it's done it will be much easier to convert the mockups to a real web site using HTML/PHP. Let me know if you have any questions! 
While it may not be true for &lt;5.4, saying that objects are expensive is still a hyperbole.
Just to show you something I did take a look at http://phpixie.com/blog/database-migration-module/ I think it's superior to most mainstream ones because: * You can create migrations database agnosticly using arrays * The down() is not needed as it can guess what to do based on your up() migration (e.g rename columns/tables back to what they were, recreate deleted columns etc) * You can automatically generate database schema from migrations
Awesome! I'll definitely take a look at that, sounds much more advanced that what I did :)
Have you been to rpol.net? The interface is ugly but well-conceived, and it has the most important thing for a successful roleplay site - a great community. It's great fun to re-invent something, but your motivation should probably be to have fun doing so rather than attempting to launch yet another online RP group.
When you're the author of the framework you're advocating, and it's all you ever talk about in each and every comment you make in this subreddit, it's kind of hard to not take your comments as extremely biased. If you want people to take you seriously, then you might want to take it down a notch, and understand that your framework cannot be the best in every category. Just saying. Oh, and by the way, the link doesn't load. 
I think its great that you have a project like this that also lets you expand your PHP/Web development skills. That said, here's some advice: 1) Look at using an established framework or even a micro-framework. You'll learn how to work with a known framework, which is a good skill to have. It'll be easier to pull in new contributors too, everyone can focus on the features you want to build instead of learning your framework and inevitable fixing bugs in it. 2) Use composer and packagist.org to use components that the rest of the PHP community has already built. Resist the temptation to rebuild the wheel, as it were, so that you have time to focus on features specific to this. For example, there are numerous authentication bundles that can take care of that aspect for you. 3) Create mockups as zapt0 advices, so you know what you are going to build. This will also help you start to think about how to organize page elements/blocks into reusable modules. 4) Don't worry about whitespace in your HTML. You'll be the only one who looks at it, although 99% of the time you'll be looking at a nicely formatted DOM tree in Chrome's or Firefox's Inspector. If you really want the HTML source to be pretty, you can run in through HTMLTidy before sending it to the browser. But that'll be a performance hit, and IMO not worth it. Its cool that you care about it, but redirect that energy to making sure your PHP source adheres to coding standard instead.
Great summary, thanks for adding this and not just dropping the link. And I wouldn't worry about the eval -- this seems like one of the legitimate uses. I'm curious to see if I can break out of the sandbox though... I'll have to try it later! What was your motivation for this? Seems like it could be leveraged in some sort of [online interpreter](http://codepad.viper-7.com/)...? &gt; this project is still in heavy development, and since it is open sourced under the BSD license I hope we can all work to improve it! Agreed, seeing that PHPSandbox.php is almost 3k lines long, lol.
I am! I'm a student finishing up my AAS degree in computer programming, so I'm still relatively new to PHP. I'm looking forward to seeing some great presentations and meeting others in the field.
Not books but a great bunch of online reading and resources: https://gist.github.com/ziadoz/1677679#resources 
I have to otherwise I think the organizer will be pissed if I don't show up.
perl -e "s/&lt;search-regex&gt;/&lt;replace-text-with-regex-replacement-string&gt;/g" -pi.save $(find)
I'll be there!
me too!
No, not really. I'm going to design the user interface last, but I know exactly what features I want and what pages to put the features on. Right now I want to design the underlying framework and whatnot. I'd really like to design this in such a way that mobile apps can be made, have a public API, and all of that - hence buying the PHP eBook on the subject from O'Reilly - but I'm a complete newb at anything more complex than 'grab from database, send to database, hard-code everything procedurally'.
I hadn't run into rpol before. I've used MU*s, Second Life, forums of all sorts, and looked at Roleplay Gateway. It appears rpol is more geared towards tabletop roleplaying like D&amp;D, right? I'm wanting to step away from that (there are PLENTY of D&amp;D style rp sites), and go towards the free-form creative writing aspect. No dice, just imagination. Also, I agree with the community aspect. Community is ABSOLUTELY KEY. That's why I've crafted my website the way I have. I could go in more detail but I have a slight headache right now and am waiting for my food to finish cooking. May edit this later, or simply expand on it elsewhere.
I'm sure it's fine for something where everything lives in the global namespace, like Wordpress. If you're working with a non-trivial codebase, though, it'll quickly fall apart.
If you're serious about using Visual Studio to work with PHP, you really should use [VS.Php](https://www.jcxsoftware.com/jcx/vsphp/home). It's worth the $100 fee, except that PhpStorm is better.
From what I see on Product Information&gt;Editions, it's not for VS2012. I'm playing around with the trial version of PhpStorm but I can't really tell yet why it would be better. I'm leaning to code at school and the only IDE I've used is VS.
RPOL works with any and all systems - the only supported game mechanic is the die roller, which you don't have to use. The other features are all abstractions of what people need to do when playing a game with others. I know a lot of folk use it for freeform, as well as rule-based systems. In any case, I certainly encourage your efforts as a learning process. To gain a good community footing, you'll need features which either are not offered by the big few (see also MythWeavers, ObsidianPortal), or are better implemented. Focussing on that limited feature set could be a good starting point in terms of what to build first.
For an amateur, PhpStorm won't be better than VS won't be better than Netbeans won't be better than Zend Studio. You just need to type. Maybe use something very light-weight like Sublime Text or Notepad++ until you get the hang of things.
oh god that audio explanation on your website. dear god :| 
I think I'll leave you right where you're at.
The feature set I've outlined in the database code: * Nearly universal permissions system * Allows so that people can given permission to use anything in a certain way, if the creator of the object allows them to. Examples further down. * Friend management in groups * Similar to Google+ circles, allows people to basically 'categorize' other people. Other people won't see these categories. * Clubs * Forum-like system where users basically create their own small OOC forums to talk in. They can use this for finding people of similar interests, talking about a specific roleplay or set of roleplays, and other things. Note that the users are the moderators for their own clubs, similar to Reddit. * Character management * Create pages for your various characters, with a description and a tag system (for searches), and even image upload. Owners of characters can grant individual people various permissions on how to use the characters, as well as give permission to a club - so that clubs can own characters in a way. **Edit:** Also, you can list what characters are used in a post. This will let you distinguish between descriptions of, say, the setting, and what your characters are doing. It also allows you to post as multiple characters without some weird system of switching accounts. * Universe management * Create and manage entire Universes in which to place roleplays. This way the description of the setting can be re-used for multiple individual roleplays (similar to characters). Not implemented yet, but it will have similar permissions to characters so that other users and clubs can be allowed to use them. * Roleplay management * Not only do users get to create their own roleplays, but they are the moderators as well. They can control who joins and who doesn't, or they can open the roleplay to the public so anyone can join. They can set up a 'join request list' so that prospective roleplayers can ask to join in an organized fashion (instead of sending private messages and whatnot). **Edit:** You can also mark a post as 'OOC' (out of character), and you can toggle showing or hiding OOC posts. * Ratings * Not things like 'five stars!' and so forth, but like, PG, PG-13, etc. I realize some people might want to.. Use this in a NSFW manner, so it uses the person's purported birthday and lets users give their items (roleplays, characters, universes) an age rating. People under that age (or have that rating disabled in preferences) won't see the content and it won't show up in searches. * Tags * The search system works similarly to 'Booru' websites, except that instead of returning all results that match all tags, it shows results that match all on top, then results that match all but one, then results that match all but two, etc. I have actually already developed the query, [here](https://github.com/Tynach/Unite/blob/dimentions/database/queries.mysql) (ignore the comment at the top, that was left for my MySQL instructor when this was just a final project for the class). * Private messaging * Of course. Edit: Added to 'Characters' and 'Roleplays'.
Fwiw we mostly use sublime at our company 
You'll be hard pressed to find a web app IDE that has a form building gui. You shouldn't use those anyway for the web. HTML is not like a hard coded gui form with x,y's for everything. This is (part of) why ASP.NET WebForms is no longer really used (outside of legacy maintenance of course) by any forward thinking web developers.
Forms really have more to do with HTML/CSS than with the backend, since the backend doesn't care how the data is sent to it, other than _GET or _POST. If you want a drag/drop for forms, there's plenty of them on the net that don't come in a downloadable app.
In the define('LIBRARY', __DIR__ . DIRECTORY_SEPARATOR . 'library'); I can use the folder I want? For example "F:\folder\Google Drive"
Fair enough. I don't exactly operate in the enterprise crowd so my opinion is close to worthless. I guess I had just hoped WebForms would die... ;)
I'd second the wkhtmltopdf solution, it's by far the best option I've been able to find so far. The only downside is if you're using form elements the resulting PDF won't print the values stored in any elements. It's a [known](http://code.google.com/p/wkhtmltopdf/issues/detail?id=594) issue but so far there isn't a fix
Awesome, I'm hoping this makes it into 5.5. 
My motivation was to be able to allow client-side code to be utilized by clients working in a RAD IDE I've been developing without worrying as much about them overwriting or mangling code either accidentally or intentionally. I would be very interested if you can find any way to break out of the sandbox in its default configuration. If you can get eval to run I would of course love to know how :)
My preference would've been delaying it until 5.6, so as to give us more time to assess ZO+'s stability with any modifications we need to make, and to give it wider adoption prior to bundling (through PECL, if that makes any sense). I voted for integrating into 5.5 *only* if it's not going to delay 5.5 shipping.
For Sunday: [Don't be STUPID, Grasp SOLID](http://www.midwestphp.com/sessions/Don't_be_STUPID,_Grasp_SOLID) [Symfony2 Internals](http://www.midwestphp.com/sessions/Symfony2_internals) [Caching and Tuning fun for high scalability](http://www.midwestphp.com/sessions/Caching_and_Tuning_fun_for_high_scalability) [Building Testable PHP Applications](http://www.midwestphp.com/sessions/Building_Testable_PHP_Applications)
I use a combination of phpdesigner8 and sublime 2 for my php dev. I find sublime simple enough for most needs and phpdesigner8 as much of a complex ide as I need.
Well I had some other ones recorded but they were too blend, I'll try to find some middle ground)
Absolutely :) I figured that some people might want to use a custom location for their files (I keep mine on Dropbox), so I made sure to make the path a configurable option.
Not trying to be a dick, I love your site, very professional very easy on the eyes and intriguing! 
Thats awesome you are doing the polar plunge. Great way to raise money for charities. We will see you on Sunday.
Id rather it was open sourced *before* PHP team even considered integrating into PHP. How many of the dev team voting YES have even studied the internals? It could be a shitheap 
I think I didn't get hired somewhere because I'm proficient in C# MVC but I've never used Webforms.
It *is* [open-sourced](https://github.com/zend-dev/ZendOptimizerPlus/) already. That being said, it's not been thoroughly reviewed, I don't think. The biggest problem is that we don't yet have an integration plan, so the second option in this vote is very ambiguous as to what might be considered a delay. I've no real issue with ZO+ being bundled if it's sensible, but we need time to really make that determination, and the timeline for 5.5 seems like it won't offer enough time to do that. So basically, the vote is flawed in that it says that the integration either must happen, or must not, with the only distinction for a "yes" vote being whether we rush it in or not.
Rather embarassing. Now who can fix?
The built-in webserver is explicitly *not* supposed to be used in production. It's supposed to be a very, very basic webserver used for development, so you don't necessarily have to set up a full-stack webserver for developing an application. As for the bundling of ZO+, you might be misunderstanding what bundling means. It does not mean that it becomes part of the core, or that you cannot use XCache or APC if you so desire. It simply means that ZO+ will be maintained alongside the PHP engine itself, as part of the PHP project, and will be distributed with PHP's releases. It can still be disabled in your configuration, or even disabled at compile-time.
I've tried using a full IDE for PHP work; namely Eclipse, as I use Eclipse for both Python and Java. But somehow it just... Felt awkward. I've fallen back to Kate, my text editor of choice, for PHP.
I did of course
Wait, those got declined? Aw, hell. I was really looking forward to those.
I really like the VS2012 layout/colors, may have to give this a try.
Okay, so the bug has been reported, so what's the purpose of posting about it here? 
Caching an AST is less efficient than caching opcodes. An AST still need to be compiled, which, depending on the level of optimization, can be a significant performance hit.
Ah, if they want to make it optional that still raises another problem: PHP team concentrating on things that arent realy concerning PHP. E.g. I'd rather if some other team took care of the optimizer, while we would get more updates in terms of better unicode support and getting rid of 9000 functions in favour of classes etc
&gt; It is open-sourced[1] already Ok, I didn't realise. I was basing it on the article itself which claimed "Presently, Optimizer+ is a closed-source, yet free-for-use component"
There is no "PHP team" as such. PHP is an open-source, effectively-crowdsourced meritocratic project. Features and fixes happen when someone's interested enough to make them happen. There are a few people who are respected and entrenched enough to make yes/no decisions in some regards, but we have no BDFL or "core group" who get assigned tasks. Someone's interested in making ZO+ bundled with PHP, and others are interested enough to help. The RFC is just a formalization of that process, and a means by which we can document if and how it'll happen.
At the time of writing it was. The RFC for a feature tends to evolve as it gets fleshed out. Open-sourcing ZO+ was part of the feature process, and that stage has been completed.
Because of only four votes, it got declined.
People work on what they want. &gt; while we would get more updates in terms of better unicode support and getting rid of 9000 functions in favour of classes etc You're the problem here. PHP is opensource, you have the power to fix this, but you aren't even trying. Instead you're just complaining that the people who choose to spend their free time to work on PHP should build what you want. [What are you waiting for!?](http://php.net/git.php)
&gt;My issue is getting Mongo support working. What do you mean? AFAIK there is nothing in symfony itself which has anything to do with MongoDB. Are you referring to the Doctrine bundle, perchance? 
Yes, that is what I mean I guess. I went to packagist and got all the recommended packages and updated everything through composer. What I can't do is get mongo as an option in the database config page. Will it (mongo) show up there? Again, sorry for my confusion on this, this is all very new to me.
Php weekly is like a week in review of /r/php, the good parts.
Start here: http://symfony.com/doc/2.0/bundles/DoctrineMongoDBBundle/index.html http://docs.doctrine-project.org/projects/doctrine-mongodb-odm/en/latest/
 &gt;Voting ends not before Wednesday, January 23rd 2013. The PHP language is expanded, so a **2/3 majority is required**. &gt; Accept PHP Accessors for **5.5**? &gt;Final result: 34 (yes) 22 (no) And for anyone able to do their math: 22/34 (~64.7%) &lt; 2/3 (~67%)
So... the project should discard its processes because some people want a feature? That is an astonishingly silly thing to say. That feature changes the language in a significant way. That vote isn't just saying "Yes, this feature is a good idea". It's saying that "This is exactly how the feature will be implemented in the language". I can see several issues with the way that the feature is implemented per the RFC, which make it useless for several popular patterns.
The vote declined the specific implementation design that the RFC describes, for PHP 5.5.0. The feature can be, and probably will be, put forward again in a future version, potentially with some modifications.
Ofc it is (=
nikic, love ur writings, but could you also add all your writings to your blog, so when needed its easy to find again :) - your writings are so scattered around
This is incredibly useful, but... ...every time I read the internals, I feel a bit like a character from an H. P. Lovecraft story who didn't listen when everyone tells him not to look upon the Abyss.
what's his blog link?
Kevin Skoglund's PHP videos on Lynda.com are gold. 
I think it is http://nikic.github.com/
Should be correct echo '&lt;table width="100%" border="0"&gt; &lt;th scope="col"&gt;Activity&lt;/th&gt; &lt;th scope="col"&gt;Day&lt;/th&gt; &lt;th scope="col"&gt;Date&lt;/th&gt; &lt;th scope="col"&gt;Time&lt;/th&gt; &lt;th scope="col"&gt;Session&lt;/th&gt;'; if ($EventScheduleRows) { while ($EventScheduleRow = @mysqli_fetch_assoc($getEventScheduleResult)){ echo '&lt;tr&gt; &lt;td&gt;' . $EventScheduleRow['calEventActivity'] . '&lt;/td&gt; &lt;td&gt;' . $EventScheduleRow['ScheduleDay'] . '&lt;/td&gt; &lt;td&gt;' . $EventScheduleRow['ScheduleDate'] . '&lt;/td&gt;'; if (!empty($EventScheduleRow['ScheduleEndTime'])) { echo '&lt;td&gt;' . strtolower($EventScheduleRow['ScheduleBeginTime']) . ' - ' . strtolower($EventScheduleRow['ScheduleEndTime']) . '&lt;/td&gt;'; } else { echo '&lt;td&gt;' . strtolower($EventScheduleRow['ScheduleBeginTime']) . '&lt;/td&gt;'; } echo '&lt;td&gt;' . $EventScheduleRow['calItem'] . '&lt;/td&gt; &lt;/tr&gt;'; } } echo '&lt;/table&gt;';
You can actually do this fairly easily. We had hundreds of behavioral tests that would run through our site, asserting things. Look at Behat, Mink and its Selenium driver to help you out.
I had no idea this even existed...and I only live an hour from St. Paul. If I can scrape together some last-minute cash...I will make an attempt to go. Cool stuff! Edit: Apparently there are only 6 tickets left. Probably gonna have to wait until next year. Are there any other conventions like this that happen in the Twin Cities...or a location where I could find out about such events?
Hey, thanks i'll check some of these out! So there's no native methods or libraries in PHP or Python, or web languages in general to do this? you have to use external tools and kind of link them into the PHP runtime to get everything working correctly?
That was an interesting read. Thanks for sharing. It's a shame all this interesting PHP info is spread out all over web in blog posts and SO answers.
Well you could do that with javascript, have a hidden field, and update its value on submit using the proper select Or you can add names to both buttons (button name gets submitted with the form too), and check on the server which button got clicked
Hm perhaps you could use FirePHP to show you messages in console ?
The depth of knowledge some people possess is R-E-M-A-R-K-A-B-L-E.
It does look pretty nice. I'd change the colors but I mean the words its selecting, it seems to even have different variable highlighting for superglobals. I've been waiting for an excuse to try the new KDE office... and QT is very mature and nice on Windows.... off to download KDE for Windows. I have linux on my laptop but I have no qt libraries installed and nothing KDE, just Openbox and mostly toolkit-agnostic programs, I do most everything from command line or the web browser.. It's a netbook so it's no place to be coding anyway, too small keyboard. Takes 3 keys pressed to make a {brace}.
"I've got over 5 years of PHP Development experience and developed some big sized projects." "What is it called, Unit Testing, or what?" I have a feeling you have no idea what you're doing at all. Also, what you want is xdebug. You can set conditional break points which echo back to your IDE.
I've got a few scripts that break xcache. It's nice, but it is still a bit buggy. Happened with something to do with `parent::offsetExists` in a class that was extending `ArrayObject`. With xcache on, every time I edit the file and reload, it works once, and on subsequent reloads, fails with a class not found message, unless the file is edited again, so it seems to be to do with the bytecode cache. I do like its ability to cache variables though. I wish Zend optimizer had that feature, because it would mean as hosts upgraded their PHP installations it would be more acceptable to rely on without building extra fallback options like filesystem storage.
 &lt;select data-bind-target="select-save" /&gt; &lt;button data-bind-to="select-save" /&gt; &lt;select data-bind-target="select-import" /&gt; &lt;button data-bind-to="select-import" /&gt; &lt;script&gt; $('button').click( var targetSelect = $(this).data('bind-to'); var data = $('select[data-bind-target=' + targetSelect + ']').val(); // do the stuff you need ); &lt;/script&gt; Hope you get the idea
What you are describing is unit testing, and while it will save you from spamming f5 in the browser, you will have to spam the command line, to run the tests. There is no solution that will just tell you about the errors, without you explicitly doing something to run tests. Keep in mind that writing unit tests, especially as a beginner, takes a lot of determination, because depending on how the code is written, it may be easy, or hard to write tests for it. Generally, code written adhering to best practices, like SOLID, loose coupling, and so on, are easy to test, while code with tight coupling, hidden dependencies, etc., is extremely hard, and discouraging to test. I have a hunch your code falls into the latter category. I don't get what you mean on the "I do NOT want to do this" part. You obviously don't have to put your testing code in the same files as the production code, they can (and should be) separate. Also, be prepared that you are going to write a ton more than 2 lines of testing code. The defacto standard for unit testing in PHP is [PHPUnit](http://www.phpunit.de/manual/3.8/en/index.html). There is an [example](http://www.phpunit.de/manual/3.8/en/test-driven-development.html#test-driven-development.bankaccount-example) on writing tests, but it may feel a bit convoluted at this point, it may be better to look at different tutorials at the beginning. Writing tests is a very good idea, and it is something that will definitely pay off in the long run, usually by multiple orders of magnitude, but you will probably need a mentality shift on how to write code, before you will be able to write tests for it. You will need to brush up on what the best practices regarding OOP are, at minimum. Also, regarding interviews, it may be better to not mention that you have 5 years of experience.
[Relevant Discussion](https://groups.google.com/forum/?fromgroups=#!topic/php-fig/PlRDNJlX1Y8)
http://phpstyleguide.com/ - a very nice alternative standard =))
It's just your feeling. I know what I'm doing. I just don't know fancy things that will help me in long term. This is one of my projects (http://www.sobafire.com/__v2/) that I started 2 years ago. An e-sports platform. Has around 60.000 lines of backend source. Fully oo(p) and runs on a mvc framework fully written by me. Mostly CRUD work, but it is integrated with few API's. I believe this is a medium/big sized website. The problem is, the website is getting older and bigger. I no longer code like 2 years ago. Things needs to be rewritten, so I'm learning from my past mistakes and trying write things as best practise as possible. I can still maintain it since it's only me who worked on the project, but I want to code it like coding an open source software.
Sad to see. Just because of a bunch of whingers whining about tabs and spaces. It's a ratified RECOMMENDATION, if you don't like it - don' use it! Isn't it better that we're all writing compatible and readable code? Just look at what PSR0 has done in this short period of time with composer. IMHO FIG was the start of the PHP Renaissance and it's sad to see it's founding member leave.
No, but it can be used by retarded and work nevertheless. (I don't know whether it's pro or con)
&gt; I have better things to do with my time, things I want to create, software I want to support, hobbies and interests I want to pursue. Debating brace placement, tabs vs spaces (for the umpteenth time), or whether or not annotations have a place in programming in a dynamic language? Not so much. Then why create PSR-2 in the first place? The entirety of that "standard" should simply be replaced with the rule, "be consistent".
As the PHP-FIG was producing code in the form of interfaces, they needed a more in-depth standard for this code to adhere to. Also, given that the FIG is the Framework Interoperability Group and designed to increase consistency between different frameworks, there needs to be something to be consistent against.
Jesus christ I had no idea it was that bad. No wonder the guy got pissed off with it. Some of this stuff is just bizarre. &gt;@eddieajau Why is the PSR-2 set to stone? Change from "you must use spaces" to "you can use either spaces or tabs not both" is obviously not a BC break. All PSR-2 compatible projects would stay PSR-2 compatible. Even better why not make all recomendations optional then all projects would be PSR2 compliant.
At brief look, it seems to be possible to execute dynamic functions created using "non-alpha" technique: http://www.thespanner.co.uk/2011/09/22/non-alphanumeric-code-in-php/ For example, declaring a function like $_+=$_+=$_=(++$_)+(++$_)... and so on, it is possible to execute log() function. More about creating log() function: http://insert-script.blogspot.fi/2012/12/php-non-alpha-numeric-76-chars.html This requires one must whitelist function "_" and enable closure declaration. I don't see this as a direct security issue, but nonetheless I think it is good to acknowledge.
Haha is that a job interview question? I had one like that. The answer is the second paramter in _fopen_ string fread ( resource $handle , int $length ) If you specify the _$length_ you don't have to read the whole file. 
Holy shit, that submitter is actually crazy: &gt; I'm not saying we are. I'm saying using spaces is stupid and mainly selfish. &gt; I agree that removing the section will be fine. And later he says: &gt; I don't care, if the code looks same for everyone, I wanna be able to setup the indentation how **I** like it. And that's possible only with tabs. (that I is actually bold in his comment too!)
I disagree that he "will have to spam the command line, to run the tests.". Running a single command to go through your full test suite of potentially thousands and thousands of tests in seconds is not what spamming is. In TDD *maybe* that would fit, but code-level testing is always going to be much more specific than hitting the F5 button anyway.
For those that don't know, mwop is the lead on the Zend Framework project.
It might be a good idea for running bug trackers, personal blogs just for fun etc. I'll have you know that the VPS I currently use runs 15 websites that receive ~20k daily visitors ( ~130k pageviews) while having 700Mhz CPU and 256 MB RAM
Well sure =) It's just one more proof that PHP is much lessource needy than say .net =)
" (they're recommendations people; they're not requirements)" Except... they were requirements for contributing to certain projects, and that base of projects requiring these standards looked (at one point) to be increasing. At least, that was my reading of the situation a few months back. Trying to codify tabs-v-spaces for a single project - I get it. But codifying it in to a standard that multiple already-established projects then adopt is simply going to piss of a large number of people on both sides, and really... it seems to solve very little vs other things that could be achieved. 
Not sure what the surprise is. A server can run off of a potato, and actually respond to requests from the internet.
Alternative to PSR-1/2. Keep in mind that the original intent of PSR was to present implementation standards similar to PSR-0; the reason style guides made it in (and made it in so early) were so that future standards could defined in a stylistically consistent manner.
that's why I said "one more", though If I were him I would use mysql rather than sqlite
I had no idea what to expect when I googled: potato web server [Spud](http://d116.com/spud/)
SQLite is really only limiting on writes.
Where would be better? I think SO is about as good as it gets; it's certainly better than reddit for information archival.
To be fair, that blog contains links to other accounts, so in a way they are there.
No. It was for converting headers in CSVs from Salesforce to match the schema of a new platform. 
After looking through some of the comments on this I think he should have left sooner. Anyone in programming who has passionate feelings for tabs vs spaces needs to give up coding. You're done. 
Well not really, check out some benchmarks. E.g. a file still has to opened and read on each request, while in mysql the data is persistent, so at least the file pointers dont have to be opened on every request
It's ironic that core members of PHP-FIG groups have the shittiest and most outdated (code wise) products on the market. No? 
You should use a testing framework, the best-known one, and considered as standard is PHPUnit. A good write-up about using it can be found here: http://phpmaster.com/getting-started-with-phpunit/
Er. I probably should've read the page, huh? ;)
Yeah, aside from [Sara Golemon's book](http://books.google.com/books/about/Extending_And_Embedding_PHP.html?id=zMbGvK17_tYC) (which is now very old, but I hear is still full of good information) there really aren't any I don't think. On the positive side, php.net has some good resources that IMO are in a better format than a book: * https://wiki.php.net/internals * http://php.net/manual/en/internals2.php You've probably already seen those, though.
Just be sure to use a light weight setup like nginx + php-fpm.
Sara is a saint for writing that book. I'd love to see her update it though. So much has changed in PHP since it's release. Still a great book though.
Why do you need to "learn a style guide" for each project? If you are editing some code you can see the style right there, just follow that.
Then why is he worried about a standard?
I've looked at micro frameworks, they look interesting. I'm not so sure about things like getcomposer; do they work if all you have is a folder on free shared hosting? One goal of my site is that, initially, I'll probably just have it on a free host like x10 or whatever. I won't be able to control much as far as things installed. Most of the work I've done has gone into the database, and I've been paranoidly asking people how it looks throughout the whole thing. I'm fairly comfortable with how normalized it is, but of course I don't mind an extra pair of eyes looking at it. It is... Quite large :s CSS was one of the very first things I learned in web development, back in grade school. I've used it a lot, and I am more than confident with it. I know how to look at a design and re-create it in HTML/CSS with minimal and correct code that validates. My problem is that I am not artistic, and I can't come up with those layouts MYSELF. I can create layouts given to me, but I suck at the design and artistic skills needed to create layouts. No framework or code assistance will do me any good here. It's really nice if the validator can say, "Line 4" and you know exactly where that is in your output HTML. If it's one big long line with no whitespace, it might say "Line 1 char 3789" and that's just HELL to go through to find the context of the error, especially with repetitive code where the thing they show indicating where the error took place looks like a million different parts of the same page. Clean HTML also ensures that you aren't needlessly cluttering your page. I dunno. Maybe it's because I'm mostly from an HTML/CSS background, and thinking in terms of 'minimize whitespace' just makes my head explode.
Learning to understand other people's code is invaluable. In the short run, its easier to code something quick by yourself. If you're going to be doing this professionally, you're going to spend a lot more time reading and fixing other people's code.
You're developing locally right and then deploying to your host provider? You'll just need composer on your local machine, then SFTP/RSYNC/whatever to deploy it up. I've found CSS frameworks help in giving you a structured approach to creating layouts. For example, if you have a two column layout using a 960 grid, and you want the first column to be 1/2 wide as the other, you do somethine like: &lt;div id="col1" class="grid-4"&gt;FIRST&lt;/div&gt; &lt;div id="col2" class="grid-8"&gt;SECOND&lt;/div&gt; No need to futz as much with floats, positions, widths, etc... On HTML, I wasn't advocating putting it all on one line, just don't waste time making sure its perfectly indented, etc. Check out the HTML source for my personal project http://soccerblogs.net/. That's what I find good enough.
WTF man functions are the best
Alright. I'll go through and make some mockups when I have time; I go to school in a bit.
Where would you recommend I start?
Pick a library you use (can be PHP, JavaScript or CSS framework) that is available on Github. Improve it and send the author a pull request. :)
Alright, I'll look into it. First of all, I don't like pixel layouts. I like liquid, or at the very least, elastic layouts defined in ems. I already know how to think in terms of structured layout, but I always end up with the same basic thing; CSS3 rounded corners with a drop shadow, or flat background with borders between panels. Neither one is very pretty. CSS3 one looks fancy, but is pretty generic and lacks taste in my opinion; I simply don't have the artistic skills to make it any other way. Well, alright, I can understand that. Just most of the arguments I've heard is for mobile devices and minimizing the size of the whitespace. I've already got something that outputs perfect HTML, my defense is in keeping what's already out there. I don't have to work at it anymore, since it's already there.
I'll... Try. I'm not sure I can improve anything that's already out there :s But I'll see if I can find any open bugs that nobody's paying attention to. Thanks :)
Part of the point of PSR-2 was to split the controversial elements out of PSR-1, so that people can use the VERY useful PSR-1 and optionally use PSR-2 if they want. If they dont care, they dont have to. Laravel uses PSR-1 and not PSR-2. Great. If nothing else, having PSR-2 so that PSR-3 and other shared interfaces can have a consistent style is useful. Remember, nobody in the FIG said anybody else in the FIG HAD to use PSR-2 for their projects, and we're not trying to force the whole internet to do anything. People can use their own standards, but we're using our own standard for our own PSR's. Seems fair, right?
Yes it was a joke made by a guy who got SUPER annoyed about tabs v spaces. For the amount we all say we dont want to talk about it, we all seem to talk about it a lot &gt;.&lt;
I feel that things like this happen so often in open source communities and forums, but I'm not going to drop the typical ego and social inexperience bomb like most people do. (Yes, that's part of it, but for a reason.) I think two major things are at play: * A lot of developers (particularly in very accessible areas with low barrier to entry) will get a certain amount of experience and then suddenly think they are more of an expert than they actually are. This was actually the subject of a nobel prize winning study, now known as the [Dunning-Kruger effect](http://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect). As a manager of many developers over the years, some very "successful," my god have I seen this a lot. I also attribute this to the overuse of No-Sql and some other trendy things. * When participating in discussions on the internet, the person you're speaking with could be a 50 year grizzled veteran that's seen it all, or a 14 year old with a post-pubescent unshaven mustache. In both cases, their posts carry the same amount of weight in a discussion. This is opposed to, say for example a conference, where the 14 year old would be asked politely to leave if he misbehaved. On the subject at hand (Tabs vs. Spaces for indentation... my god what a nerd fight) I would slightly prefer tabs, but frankly it doesn't matter that much to me because my tools manage it and thank god I don't have to care about indentation as much as these people. I would generally say go with whatever something like C or Python prefer and call it a day. I don't even know what they use and I am in both languages daily. I'm being totally serial. So these people are thinking their experience is worth more than it is and have no idea how much actual knowledge there is above their current level. Top it off with arguing on the internet and lack of IRL repercussions and you have a recipe for disaster. Edit: Looks like most standards (including Python) are spaces. I prefer tabs, but whatever, I never really put any thought into it and it looks like spaces win. Any IDE (and hell, some VCS tools) will convert it for you transparently so who cares. I read some of the arguments about "&lt;whine&gt; I have to adjust my tools and settings for each project &lt;whine whine&gt;." Guess someone never heard about "auto detection," or "get over it you have bigger problems to worry about"...
Even submitting bugs is useful. You'll likely see that you can fix some of them on the way. I'm very new to Github myself but you get into reading and improving other peoples code and it's awesome!
At first glance, I thought this couldn't be right. However, after looking at the example, I can't see any other way around it. Since it would be nonsense to think you could assign a value to !$a. Still, it sure feels weird to have something so strict as operator precedence having a special case. I wonder if it would be better to throw out this special case and throw a parser error instead (force the usage of parentheses in this case). **Edit1**: The more I think about this, the more I really don't like this idea of special cases on something as core as operator precedence. I think it's the lesser evil to force the usage of parenthesis here. **Edit2**: After the discussions below, I see it's more about the start and end of an expression. Since this passes the common sense test (the code operates as you think it would), after this discussion I believe the status quo is indeed best. 
Perhaps my sarcasm wasn't obvious. I don't think any of this stuff should be optional or it completely defeats the point of a standard.
CodeIgniter is popular, relatively well-documented, and a good implementation of MVC, so start with that.
&gt;This is code that my boss has written. Uh, okay.. so why doesn't he fix it? &gt; It is also code that we have tested and implement daily. Did you miss the part where it doesn't work, and there's an error on **every single line**? That's code that you couldn't possibly have "tested and implemented daily".
The reason PHP-FIG became such an issue and why so many people feel it is a "must do" is, because PHP was suggesting to have their autoloader comply with the PSR's standards. This bugged the shit out of people and blew up the PHP-FIG group. The standard doesn't have to be followed... except the autoloader.
There's another event coming up in April along the same lines as this one. 
Yii
No, it's not very strange at all. PHP is intelligently doing you a favor by making this exception. If it were to act as retarded as you're asking it to be !$a = foo(); would *always* result in an error due to you trying to assign to a boolean.
Cool. Is there any information availble or is it put on by the same people?
No, it has nothing to do with saving you from anything. It's a language feature designed to make assignment in expressions a little easier. 
Ok, that's a good way of looking at it. I was coming from the other angle. Excellent point. 
This isn't exclusive to PHP. Many languages support assignment as a condition, passing the assigned value to the rest of the statement.
It is definitely possible to break out of the sandbox if the user doesn't carefully consider his settings for the sandbox. However, one of the features of the sandbox is that the user can redefine functions like "_" and check their input before allowing the user to use them. I also have added code that will test all dynamically-named functions names before they are executed in the sandbox, to prevent the following: $evil = 'eval'; $evil('bad code'); The sandbox will rewrite this code to: $evil = 'eval'; $_Sandbox-&gt;check_func($evil) ? $evil() : null; When the sandbox tests the value of $evil and discovers it is the invalid function name "eval" it will throw an exception and refuse to run the code past that point. And this assumes the user has even set the "allow_closures" flag to true of course. But thanks for the heads up on that particular attack vector!
Sure it's nonsense, so why would PHP not report it as such?
Take a look at some frameworks. Most of them also include a good explaination of MVC. Once you have mastered MVC, it shouldn't be too hard to switch between frameworks. (most of them will have other method names and stuff ofcourse). My personal favourite is Laravel, but take a look at Symfony and Kohana and all the others and see if you like any of them in particular
If you look at it more from the angle of what defines the start and end of an expression. See wvenable's comment for good detail on this: http://www.reddit.com/r/PHP/comments/19epmk/although_has_a_lower_precedence_than_other/c8neohp
For really minimizing the amount data you're transferring in CSS/HTML, you'd enable mod_deflate on apache, to send it all compressed and let the browser uncompress it locally. Other web servers have similar functionality.
This post shouldn't get downvoted. You're detailing exactly why *your* project doesn't follow the PSRs, which is **perfectly ok**. The PSRs are not meant to be a take it or leave it deal, no one is forcing anyone else to do it[1]. These frameworks and projects simply joined so developers could easily move between projects, and libraries for one would easily work for any other. That said, I've adopted PSR so closely and fully that it would bother me a little to work on a project that does not implement them. Which leads to my note: [1] - On my team, we've adopted PSR. All of them. There's no room for discussion - if you program with us, you conform, or your code is rejected. I am positive there are more private, for-profit teams like mine that do this very thing, because it takes these decisions out of the hands of the team and puts them into a vetted process.
Not even that. You could run one script and it does your whole build process with unit testing being just one step, so you aren't even doing one action specifically for the tests.
&gt;Maybe you are the one who needs to go back and look at how to program. You've just proved that you're either a dumbass, or a troll. The snipped pasted is wholly invalid. Do I need to write an essay for you and break down why every single line of the code is wrong? &gt;This segment is taken out from a page that is full operational, If it's "fully operational", why the fuck are you asking for help? You've already told us IN YOUR POST that there's a syntax error, so clearly it can't be operational. 
Don't know if it's the same people but here's the [link](http://minnewebcon.org/)
And there's a perfect example of the real problem. "My preference is the one true way and everybody else is a heretic." The argument is stupid because these standards don't automatically apply to every developer and every project out there. If you want to create your own standard for your project, go ahead. You can even base it on PSR and change the space requirement to tabs if you prefer. I could see the outrage if the PHP runtime refused to parse any file which wasn't compliant with a certain coding standard, but it doesn't. The PSRs were established by a group of project maintainers to standardize their own code bases. It's another form of reuse. Why create 10 coding standards when they could share a standard one? Even the member projects sometimes fork the PSRs, but they at least have a decent starting point to do so now. The community can use them as well. Or not. What's the fuss?
How the hell do people not get this? Seriously, I don't understand it. The level of vitriol in the community surrounding PHP-FIG is unreal.
Because in the instance of tabs vs spaces, my editor doesn't show that. If the project is using spaces and I submit a patch with tabs, it won't follow the style guide. 
That's a little different. I don't know many people complaining about the PSR-0 standard other than truly trivial things like "Waah, if I name two classes in my package Foo_Bar and Foo\Bar then they try to load the same file!". Ok, so don't do that. Other than THAT PSR-0 makes a lot of sense, and the number of people using it for their autoloading code is obviously rather large. Symfony, Zend, Laravel, Kohana, Drupal, etc ALL support the PSR-0 autoloader, and more power to them for doing so. Many other languages support the same idea. You can include a gem, and it'll know where to look - you don't have to include a whole "this is how gems work" file to get that going. I was never part of the FIG when they suggested doing this, but I don't see a problem with them giving it a try. "Oh no, I have a really powerful autoloader build into the core of my favourite programming language, which I don't have to use if I don't want to." How terrible. That still doesn't mean you have to worry about tabs v spaces, or any of the other stuff that people complain about in PSR-1 or PSR-2.
I'd recommend you to start looking into [CodeIgniter](http://ellislab.com/codeigniter), a PHP framework with a very low learning curve. It will teach you the basics of MVC and you can take a look at the libraries included, and also expand them following the documentation. [Yii](http://www.yiiframework.com/) could be the next option. [Symfony](http://symfony.com/) is a very complex but complete framework, which worths a look later after checking those two IMHO.
Nonono, only one of them is correct. We have to keep talking about it over and over again so that we can try to work out which one - AND ONLY ONE - we should all use for everything.
Where would we release this "internal document"? Should all of the projects sign up for a Basecamp account? Do we make Drupal or Symfony pay for it, or does PyroCMS have to? This is the VERY FIRST paragraph on the PHP-FIG website: &gt; The idea behind the group is for project representatives to talk about the commonalities between our projects and find ways we can work together. Our main audience is each other, but weâ€™re very aware that the rest of the PHP community is watching. If other folks want to adopt what weâ€™re doing they are welcome to do so, but that is not the aim.
I like the syntax of Java and JavaScript, but for server-side I like PHP's way of doing things as apposed to something like Node.js or however you use Java for web server-side. 
Yeah, Drupal are ignoring PSR-2 and just look at what people are saying about them now! Nothing. Absolutely nothing.
But projects already have coding standards in order to contribute to them. Surely it's better for a number of project representatives to come together to think of a standard they can agree on instead of having multiple differing standards!
Thats a personal preference. You might like men or women, you might be a vegetarian, believe the moon landing was a hoax, be a big fan of Justin Bieber or hate his guts. The reason we aren't talking about any of these other personal opinions is because we aren't friends and I don't want to hear about it - neither does anybody else.
How do you feel about PSR-3?
"Follow the style" is an easy thing to say. To me, it is an easy thing to do, and it is hard to understand why nobody else seems to be able to see the patterns and follow them. But really, many people can't, and they seem to be in the majority.
Thanks. I figured I should give some project-specific context since that's the focus of the blog (and we are 2/4 for PSR support :). But also wanted to share what I hoped would be constructive thoughts on the PR issues the FIG group are facing, since I think the group can do a lot of good for the PHP community. And I'm with you 100% on teams agreeing to a standard. Ours only differs slightly from the PSRs, but enough that we just use our own coding standards doc.
Do people not get that PHP-FIG = "PHP Framework Interop Group"? You don't have to participate and use their standards. You don't have to even adopt the PSRs if you're a member of PHP-FIG. "No. Becoming a voting member on the PHP-FIG in no way forces a member or project to implement every - or any - accepted PSRs. Projects have to consider backwards- compatibility issues when upgrading and make the changes at the right time, so it is assumed most projects will eventually adopt, but it is not a requirement."
I don't understand how there's even an argument for that anymore. Any non bullshit text editor will automatically convert tabs into spaces for you, or vice-versa.
/r/shittyprogramming beckons. How the hell do you assign to a negated variable? The fact is there is no such thing... You can't, for example, try to do (2*$x)=4 and result with $x==2. You can only assign to a variable, not an expression including one. What if you did if (!2 = 9) ... I don't know what would happen, because it's nonsensical. 
That when I have an idea, I can bring it to life. That when I have a problem, someone else has usually already had and solved it. The low barrier to entry means I can teach the kids I volunteer with how to get started in programming, and they can see some cool results very quickly.
I don't think you're dampening my enthusiasm; truth be told I've been sorta battling depression on and off for several years now, so I sorta go through phases where I can get myself to work on this sort of thing and when I can't. By posting on here and getting feedback I'm just trying to get myself moving again; but that's all internally. I would REALLY like for everything in the project to be 100% original, but I realize that's not realistic or best - especially with authentication, where a LOT of things can go wrong (heck, right now I'm using SHA1 and no salt; talk about horrible security). I find I sometimes learn things best when I set an unrealistic goal and try to achieve it, and I suppose that's what I'm trying to do. On the other side, this is something I WANT to succeed. With the simple blog site I did for my final, it didn't really matter much. Just an assignment, and there are PLENTY of blog solutions out there. One more dosen't matter. This is something I'd actually use, and others might want to use too... I feel like I need to do this right from the start, so I'm being very careful. So really, ANY advice - even advice I don't want to hear - is good. I'll look into the things you've suggested, and of course I'll do more reading and digging. I know someone who lives in the same city as me who wrote their own professional PHP framework (and it's REALLY professional - I met them through a coincidence on Google+) who I can ask as well. At this point, I just want to make sure I'm doing things right before I do things at all.
Alright.
Alright :) I'll keep my eyes peeled! Metaphorically.
o_O Code is not a car wheel... it doesn't wear down....
Functions allow you to keep code concise, secure (if using classes) and maintainable. I would tell this person to leave web development now... just go!
Truth. Also, the very first paragraph on the [PHP-FIG](php-fig.org) website: &gt; What is FIG? &gt; The idea behind the group is for project representatives to talk about the commonalities between our projects and find ways we can work together. Our main audience is each other, but weâ€™re very aware that the rest of the PHP community is watching. If other folks want to adopt what weâ€™re doing they are welcome to do so, but that is not the aim. If people paid more attention to this, and less attention to arguing about irrelevant stuff and blaming us for it, then people wouldn't complain about this irrelevant conversation being ignored.
I love the way arrays and strings work in PHP. For newcomers, they can seem like the most frustrating part of the implementation. Once you learn how to use them the right way, you find yourself trying to do it in other languages.
it *can* be, but it can also upset people. Changing coding standards on a project that you've worked on - with already established coding standards - can be difficult to deal with.
i love how it takes me 1 line of code to echo a string as opposed to 5 in java: public class reddit { public static void main(String[] args) { System.out.println("some string"); } } 
gotta love &lt;?=$var?&gt;
The point is that you don't have to create a class in PHP to do this, you can easily write one line of code, put it in a PHP file and load that (from the command line or web-server) and see the string... 
 $string = 'HELLO' ; $theLetterEGoesInHere = $string[1] ; I like how that there 'E' goes in there like that all easy and simple-like.
I like hash arrays and PHP's close integration with the web stack. Arrays and hashes are conceptually the same: an aggregate type with each member element accessible by an index. In some languages there are important differences between them, but its mostly its a matter of implementation, not concepts. Languages like Perl, Python, and even JavaScript that force a distinction between arrays and hashes are exposing the lower level details to the programmer, but the whole point of modern dynamic languages is to abstract implementation details and make programming easier! Combining arrays and hashes greatly lowers the barrier for new programmers. There aren't any other mainstream languages that I know of that come remotely close to integrating with the web stack as intimately and flexible as PHP does. You can read incoming data directly from $_GET/$_POST/etc., and functionality for working with sessions and headers is baked right in. Languages like Java, Ruby, etc. all need special frameworks or libraries to do such things and still leave the programmer with a modicum of sanity. Detractors can complain all they want about PHP, but I don't really see another language displacing it any time soon unless it can integrate as smoothly.
echo "dat string";
Yes, I would not elect to argue with spergs on the debate of tabs vs spaces, not even if I were to be paid handsomely.
It's a shorthand open/echo. Some might also call it a short open tag, but that's something of a misnomer since &lt;? (short open tag) and &lt;?= (shorthand open/echo) are not treated the same by the [short_open_tag directive](http://www.php.net/manual/en/ini.core.php#ini.short-open-tag) since php 5.4.0.
Be careful with that, it doesn't work on all servers. Had a coworker go from dev to production and had no idea what was wrong... 
&lt;?=$var?&gt; is the equivalent to &lt;?php echo $var; ?&gt; it just saves you some time writing a full echo statement and it also looks cleaner IMO EDIT: to use it without changing the ini file you need to have php 5.4 (most servers allow you to change it in cpanel)
php is nowhere near unpopular
yes, you can change the version with an apache handler inside the .htaccess , something like this AddHandler application/x-httpd-php54 .php you need to define them with apache, this is also the way of making apache process some extensions like .css or .html as php
you could even employ the odbc generic functions should you have trouble with the MSSQL-specific routines.
Changing this in cpanel restarts your web-server process (i.e. Apache), so be aware of this in a production capacity. This might not be the case if you have multiple PHP versions running simultaneously, but this would require running it under CGI, or some "other" type of web-server AFAIK
Are you running PHP/webserver on a linux server? I got a PHP-&gt;MSSQL connection working once with FreeTDS drivers and IIRC it was using PDO as well. If you google around there are a few tutorials on using these drivers. If I still have the config on the machine I did it on I can share it, but I might have gotten rid of it because I ended up just using MySQL. If you are looking at moving to open source fully you could start dumping tables out of SQL to flat files, then loading them into MySQL. SSIS and some linux scripting (or even php/cron) knowledge may allow you to automate and schedule some of this. I am sure you will run into differences in schema design and such but I am by no means a database expert so I am not sure if it is really practical or feasible.
Well, are you looking for frameworks or libraries? Everyone is giving you frameworks... so here are some libraries that are fun to play around with: [NotORM](https://github.com/vrana/notorm) [pChart](http://www.pchart.net) [PHPExcel](http://phpexcel.codeplex.com) [Facebook PHP SDK](https://github.com/facebook/facebook-php-sdk) [Composer](http://getcomposer.org/) [React](https://github.com/reactphp/react) [Faker](https://github.com/fzaninotto/Faker) 
changing the php version on the servers i manage works by changing the apache handler inside an .htaccess, no restart needed, i think they run both php versions at the same time and the handler decides where to send the request, you can even have a folder with php 5.3 and another one with 5.4
Yes, these must be running PHP under CGI. This seems to be the preferred way to run PHP (just based on some brief research) unfortunately the production servers I work with were setup before my time and some run more then one product :( I'm sure I'm not alone with that issue...
That's not the short tag they are talking about. &lt;? Is discouraged, &lt;?= is always supported. 
On a different note, what colour should we paint the bikeshed? My vote's for green.
I believe PDO handles MSSQL just fine. If not, I previously used ADODB as a DB abstraction layer (there are others). No real issues other than some of the SQL is slightly different if you don't use something like ADODB to handle it.
My first thought was "this isn't /r/lolphp" ..then I read the other comments. Eh.
"... as opposed to...". "Apposed" is a verb meaning "to place something in proximity to something else".
too bad i can't use this for compatibility :'(
I have the opposite problem... IRL I tend to always think people know what they're talking about when they speak confidently. For example, I once (reluctantly because he wouldn't let it go and threw away my beautiful 3nf schema and got through a week of programming before I realized it) let a former myspace senior architect convince me to denormalize a schema and do the 'join' on the app servers. Hey - he knew about scalability, right? Obviously he was a retard, and he made this painfully obvious in so many other ways, but this just illustrates how severely I tend to give people too much credit. It also goes to show how you can be an imbecile, think you're a genius, and make well over $100k.
What do you use for load balancing? Also, do you have a MySQL backend? Is it clustered/load balanced somehow? HA is very interesting to me, but nothing I have done requires it (purely internal projects to make the IT teams' lives easier)
Nginx runs the load balancer. MySQL is just a basic master/ multi slave setup. Php basically rolls a die to pick which slave to use. It's nothing fancy but it does the job as long as you keep your indexes in order. 
Many languages actually don't allow what this article is discussing specifically. Javascript, python, and perl will error if you try to do !a = 'foo'. Ruby will begrudgingly do it only after complaining. Javascript: !a = 1; ReferenceError: Invalid left-hand side in assignment Python: !a = 1 Line 1 !a = 1 ^ SyntaxError: invalid syntax Ruby: !a = 1 t.rb:1: warning: found = in conditional, should be == Perl: !$a = 1; Can't modify not in scalar assignment at line 1, at EOF Execution aborted due to compilation errors. Now, I don't have a problem with PHP's behavior, but it isn't specifically discussing assignment as a condition. It's discussing the operator precedence and how php bends the rules a bit.
One of these [slow] days at work I want to setup something like that. We will see how that goes... I am completely self/google taught but I am pretty good at reading the logs to figure out why crap isn't working :)
 while ($row = $pdo_stmt-&gt;fetch()) Yep, pure unreadability right there. We'd better all give up and use Lisp.
postgres is godly too :P
The schadenfreude.
I wish, just learned of it now and looks sold out. On the waiting list..
Things get a lot easier if you just use a flat file database with established interfaces and standards, such as [sqlite](http://php.net/sqlite). Or better yet, use [pdo](http://php.net/pdo) which has sqlite drivers so that if you ever feel the need to step up to mysql or something similar, it's not a whole lot of work.
The string handling is better than any more serious programming language I use. I suppose C# isn't bad, but Obj-C's NSString is overly involved, and plain C is very powerful but sometimes I just want to use == on strings, damnit!
Its very flexible!
I second the CodeIgnitor suggestion, also take a look at Composer witch is a dependency manager and can help you install and manage other packages. I've also enjoyed using Symfony which is a PHP framework. 
I can think of something, and have a basic skeleton in next to no time. I don't have to worry about pointers. Fuckton of built in functions, clean sane c api for writing extensions. Can write my entire project procedurally*. Finally syntax is simple and fun to use. *mysqli returns an object, that I have to converted into arrays so I can use it. So that's the only case of it.
I love new Console things! 
There should be an option on GitHub where you can ignore pull requests from a certain submitter if they've pushed a certain number of requests that got denied. Or something like that.
I love it that deprecated calls show up in the debug toolbar, good idea.
That's the one.
I found this one a while ago: $tmp = true and false; $tmp here is true but $tmp = (true and false); $tmp here is false basically use &amp;&amp; and ||
Facebook is a bad example. They don't use PHP to actually serve each request, only in development. Wikipedia would be a better example, although apparently their code is pretty atrocious...
I see where you're coming from. I've never actually used `!$a=foo()` (didn't realise you could to be honest) but it seems like using a comparator would be much better, e.g. `($a=foo()) === false`.
I'm not upgrading until minimum stability = dev. Hopefully not long. Love Symfony2!
yes, I meant disliked. it reminds me of the hate Visual Basic got back in the day but how many programmers got their first start on VB6? I know I did, I still remember the rush I got as a 10 year old when I ran my own Windows application with a button that popped up a Msgbox when clicked. I swear there's a group of programmers out there who don't like languages that are too easy!
Would that me similar to or an alternative to memcached? Have never used either but since its read only Friday maybe I'll play with my dev VM...
[mongoose](https://github.com/valenok/mongoose)!! I cant say enough good things about mongoose. I use it on Windows and Linux for development, it only supports PHP-CGI but xcache does work including bytecode caching. It's very standards compliant and very fast, its designed for embedded or lightweight development usage. Also has lua and sqlite built in (optional on Linux), compiles to a single executable... its config options are pretty limited but it can do some basic url rewriting and supports built in logging, ssl, htpasswd, threading support, directory listing, and acccess control lists. It's under constant development and I recommend it to anyone as a lightweight development server or for hosting smaller things. I have not had any issues running large frameworks and complex programs in it, and anything I have written works just as well on apache as it did on mongoose. The only caveat I can think of is that it doesn't handle much more advanced things like caching, etags, mime type detection, etc, but that is all possible from PHP and is implemented in most any framework as well.
I love the money with PHP. I love how all my variables have dollar signs and every hour I'm writing PHP (with Yii) there will be more dollars in my bank account.
I agree, arrays are quite amazing in PHP - I tend to use them all the time when I code. Other great things are: * A very large default API. There is very little need for using external libraries. * PHP.NET with user contributions * An amazing community * Implementation and deployment speed * Free * Stable and mature * Never any strange random errors that other environments suffer from Etc...
I agree, despite having only a few built in data structures (and just one if you don't count SPL), arrays in PHP are the nicest of any language I know, and very flexible.
Right, im one of the first to recommend people should use a composer.json because it helps me install the code and track updates without me having to go and check their website for updates. That code could be PSR-0, classmaped or use any autoloader it likes, that doesn't mean anybody is forcing PSR-2 down their throat. Please don't confuse the two.
The PHP-FIG was initially rather hidden. It was just a github repo and we all knew where it was, and a mailing list that we all subscribed to. Then we were harassed for not making it more open and obvious, and rumours started about what we were doing. So, we made a website and I put together an FAQ to answer all these questions. Now you're saying the group should go back into hiding? I don't see how this is helpful. We're being VERY open and honest about what we're doing and people are choosing to ignore the statements on the website and complain about our actions anyway.
If the data is CSV or you can coax it into a CSV format, you might be able to parse it with [fgetcsv](http://php.net/manual/en/function.fgetcsv.php) E.g. if it looks like this: header1, header2, header3, header4 data1, data2, data3, data4 data1, data2, data3, data4 and so on. It doesn't necessarily have to be a comma separator as you can define the delimiter to use tabs, spaces, whatever. If you can get it into an n-dimensional array, you can do whatever you want with it. There are [some other tools](http://phptrends.com/?q=csv) to help managing CSV files so you don't necessarily have to use a database if you want to be editing it by hand, but using sqlite instead would make it much easier, and there are tons of tools to make managing sqlite data easy as well. Could you paste some example data? It's much easier to understand exactly how the parsing would be done just by seeing some example.
If you look at the 2nd answer given, it has: $a = $b or $c ====&gt; ($a = $b) or $c So for your example it'd be: ($tmp = true) and false; But yes, I agree about avoiding `and` and `or`... I actually consider them code smells for PHP. 
No, I didn't say the group should go back into hiding. The open process is important and commendable. And there will always be trolls that try to cause trouble. But I was only saying that I felt things would have gone smoother if PSR1 and 2 were not placed on par with PSR0 and 3. Larry Masters' suggestion on the mailing list echos the spirit of what I was saying: "rename PSR-2 to PSS-0 or whatever and make it recommended practice but not specific to PSR which should only be about interop" That doesn't mean anything has to be hidden... just separate. 
You have a point, but I think you're reading too much into the intentions of the code. Your example is not how it's typically used... it's more like: if (!$result = someFunction()) ... The assignment is just syntactic sugar to avoid assigning the result and making the comparison on separate lines: $result = someFunction(); if (!$result) ... For clarity, this is the intention: if (!($result = someFunction())) ... But that forces you to use superfluous parens; superfluous, because as you point out, the other way of interpreting the expression is non-sensical.
I see your point, am I right in thinking you don't see any merit for PSR-2 being helpful to "interop", so it should be considered an internal style guide that we ourselves only use to style interface-based PSR's? That's a valid point - and not one that I've really heard much. People usually just scream about how style guides don't matter without really taking my earlier points into consideration. The merit of keeping it in there is that if a component is being built collaboratively by two PHP-FIG members then at least we don't have to fight over tabs or spaces internally. I don't mind working with the Drupal guys to make some cool component that we both want to use, but if our editors are constantly rewriting tabs to spaces, or if we don't notice certain rules (because the code doesn't have any existing examples of this) then we're going to have an argument. Again, nobody is saying you have to use ANY PSRs, so for us FIG types wanting to build stuff together PSR-2 has as much merit as PSR-1. Therefore hiding it away is rather pointless, wouldn't you say?
I hope you continue this tutorial. I feel like there are 20x blogs that cover how to install and run basic tests in PHPUnit, but for more advanced concepts I find myself just browsing questions on stackoverflow.
Second part will be out later today. edit: http://jtreminio.com/2013/03/unit-testing-tutorial-part-2-assertions-writing-a-useful-test-and-dataprovider
&gt;I'd recommend you to start looking into CodeIgniter, a PHP framework with a very low learning curve. I used to use CI, but there are a lot of far better entry-level frameworks out there these days, FuelPHP and Laravel come to mind.
I'd go one step further. I think in order to make your code read like a book, you'd want to do this: if (!UpdateFoo()) { .... }
Fixing the sub-requests and hostname routing is awesome news. 
**It gets my money like a good little hooker.** In all seriousness... I was a broke grill cook before I learned PHP and have earned nearly a million bucks in the last roughly 13 years since then. PHP changed my life.
Finally they implemented choices feature into the console dialog :)
this
I'm going to try to follow development on github. If you want to improve your authentication at the moment, check out this post I wrote: http://oscarm.org/2012/6/using-bcrypt-store-passwords 
Agreed. In particular, how you can do $arr['key1']['key2']['key3'] = 5 and it will work even if key2, key1, and/or $arr don't exist.
usually its /var/www, check your apache configuration for the document root. If you're running multiple domains via VirtualHost directives, each one can specify their own document root. 
Correct, I don't see much merit to PSR-1/2 from an interoperability standpoint. But that doesn't mean they're not worthwhile from a workflow and presentation standpoint. That also seems to be the consensus coming from the current poll on the list, although the majority of the respondents are non-voting. I agree with you that nobody has to use any PSR if they don't want to, but the fact is they're publicly available and labelled "Standard". It's understandable that people will jump to conclusions without understanding their purpose and rationale. And to some extent, PSRs are promoted for use by the community; not by the group itself no, but other resources yes. For example, remove yourself from the FIG mindset for a moment and read this except from [PHP: The Right Way](http://www.phptherightway.com/#code_style_guide) with regard to coding style: &gt;The Framework Interop Group (formerly known as the â€˜PHP Standards Groupâ€™) has proposed and approved a series of style recommendations, known as PSR-0, PSR-1, PSR-2 and PSR-3. Donâ€™t let the funny names confuse you, these recommendations are merely a set of rules that some projects like Drupal, Zend, Symfony, CakePHP, phpBB, AWS SDK, FuelPHP, Lithium, etc are starting to adopt. You can use them for your own projects, or continue to use your own personal style. &gt; &gt; Ideally you should **write PHP code that adheres to one or more of these standards** so that other developers can easily read and work with your code, and applications that implement the components can have consistency even when working with lots of third-party code. The first few recommendations are designed to be a super-set of the previous recommendation. &gt; &gt; Read about PSR-0 &gt; &gt; Read about PSR-1 &gt; &gt; Read about PSR-2 &gt; &gt; Read about PSR-3 &gt; &gt;You can use PHP_CodeSniffer to check code against these recommendations. Use Fabien Potencierâ€™s PHP Coding Standards Fixer to automatically modify your code syntax **so that it conforms with these standards**, saving you from fixing each problem by hand. I've highlighted a few points for emphasis. We're told that these standards are for member projects, but then the point is swept under the rug with "write code that adheres to one or more of these standards" and to use the sniffer to "conform with these standards." PSRs are the only ones mentioned (there's no mention of other coding standards like Zend or Pecl for balance). Is the intent of the text to say "thou shalt use PSRs!" No. Is it understandable how someone could easily mis-read and come away with that impression? Certainly. The goal of the group is X, and the process is Y, but the community thinks it's goal Z. FIG needs to realize it's not just about member projects anymore-- they may want it to be, and that might be the goal, but that's not the community perception. It'll be interesting to see how the group handles this and if any changes come about because of it. I've learned that sometimes reality is not perceived as reality, so you have to manipulate reality so it appears as reality. Will the group find the need to adapt to minimize issues so the group can stay on track? Exactly what, and how that happens is for the group to decide. But if they don't try to shape perception better then we might as well stick a fork in it, because FIG is done.
Do most folks find going through slides without the associated video worthwhile? I admit that I've never given them much chance, as it seems that you really miss a lot without having any context.
Very interesting, but I'm having a hard time figuring out what you did with the salt. It looks quite a bit like voodoo :s Could you explain it, please?
Oh, there's a bunch of good videos from Symfony conference on youtube! I'm not on my computer now, but you can search youtube channel with 'symfony conference'
Ok, I don't want more people jumping to conclusions. I initially left coding standards like PEAR and Zend out for the following reasons: * Nobody is using PEAR * Zend was switching to PSR-2 Your first bolded point comes after: &gt; You can use them for your own projects, or continue to use your own personal style. This was meant to explain that these are optional, but I can see that the point after is stronger. Your seconded bolded point is not so valid as it's just saying "once you've picked a standard, you can use a tool to help you implement it". Just highlighting those words is unfair to the rest of the sentence. But overall you do have a point, this text to somebody who has never heard of either - or looked into the FIG website - is misleading. I've updated PHP The Right Way to reflect your suggestions: https://github.com/codeguy/php-the-right-way/commit/e7fadf48f5d59693fb360453143d87f17ae46a9c I've also asked Paul D to merge my pull request for the PHP-FIG FAQ, which should be happening shortly. https://github.com/php-fig/php-fig.github.com/pull/65/files Between the two im sure we'll have a little less confusion all around. If you have any more feedback please send it over. Remember, the PHP-FIG and PHP The Right Way are _nothing_ to do with each other, I just happen to be part of both.
Thanks, Phil... for both amending the Right Way site and for a great discussion. :)
PHP-FPM!
Right, that sounds terrible. Don't do that. I'm doing that for PyroCMS and it _is_ terrible, but PHP CodeSniffer-Fixer does most of the work.
symfony seems interesting, i've never really used a framework this big before, seems a bit intimidating, how did you guys started with it, any tips?
There are no problems using SQL Server, i have worked with it some time ago but the documentation was hard to find, there was a lot of documentation for asp and i used that instead. BTW i made a small class for ADODB and mdb databases if you need them i could share it with you.
That is not a good practice, the best method in my opinion is to save images on the filesystem and locations in the database. That way: 1) you won't have trouble ever migrating your db 2) you can serve images in a static way
wow i need help formating my topic :(
Didn't even think of that! Here is the SensioLabs channel http://www.youtube.com/user/SensioLabs/videos?flow=grid&amp;view=1 it has videos from Symfony Live!
5 years later and i'm glad we are smarter now. cool kids don't save images in the database.
There's nothing technically incorrect with the code. As you mentioned there are optimization, security and code formatting issues, nothing major though. Along those lines I can't tell where the $time variable comes from, too fuzzy. If you are going to be constructive and help your friend with better coding practices you might recommend mysqli over PDO. If you are only using MySQL, mysqli is now recommended over PDO. edit: mysqi is recommend by [MySQL](http://php.net/manual/en/mysqli.overview.php) (we use PDO for everything) Also worth noting, PDO cannot connect to MySQL 5.6 databases unless you update some user settings to use old passwords (not just old_passwords=1 in the my.cnf file).
why not try: http://www.turnkeylinux.org/prestashop
thanks, i'll do it tonight 
well i fixed it by removing the second line `-`
Unsalted MD5 passwords are fun... if you're a hacker. This is how you write code when you finish your first PHP tutorial.
&gt;Unsalted MD5 passwords are fun... if you're a hacker. The fact that it's unsalted is not the issue here. 
If you posted that in /r/php you would give rise to more than hackles. A literal bloodfest would ensue.
This is reddit... you found one... I never use PDO. I always use mysqli. I hate PDO. It might be because I prefer old school sprintf and SQL queries . :) In addition, almost all of my projects will run on php 5.0.x+ in a shared hosting environment.
I had to triple check, but... we are on /r/php right now.
I like to live life on the edge. 
oh lol... yeah... it's 6:56pm here and I have been coding since 5:45am. Just took a break so I could eat something... while I browse reddit. Goddamn it... I thought I was on /r/webdev lol
"Escaping" the password before hashing it -- essentially changing the password's value and making it different from the user input -- is totally best practices.
you remain friends with this guy?
Is your friend from India? I have seen an awful lot of code written by Indian or Filipino developers that looks almost exactly like that. 
His posts, such as this one, make me feel much better about myself. 
Nope, he's from rainy England. 
Dude should be using prepared statements/stored procedures. Also, that code makes my eyes hurt.
Better !== easy to learn. Depending on the OP's PHP background, Laravel may be a bit much if the goal is to learn the language, not just use the tool.
I apologize on behalf of my developer peers for their down votes.
Great, my code sucks cause of where I'm from.
I don' remember saying all developers from India have bad code... should I copy and paste some for you?
Confession bear?
So let me get this straight - ircmaxell gets shit on for posting from his own blog, but it's ok when the mods do it?
Code is either four spaces on the left or wrapped in `s (Grave). 
Meh, was more of a tongue in cheek statement. Sorry that it wasn't that clear.
Just wanted to add that everything appears to be completely non-indented. Either this person writes all their code without leading whitespace, or there is no containing function/class-method, which seems like a bad idea for a login process. It's hard to say much more with the limitations of the picture.
Well, that does a real good job of answering OP's question. PHP does it the way it does because doing it the other way is logically invalid.
It seems to me that PHP should simply make plain that when assignment is involved, precedence only takes effect on the right hand side. As an example, something like 5 &gt;&gt; 2 + $foo = 9 would seem to require that ($foo=9) be performed before everything else, otherwise it would make no sense, whereas $foo = 5 &gt;&gt; 2 + 9 will do the assignment *after* everything else. Hmm. If you run: $foo=1;var_dump(9+$foo=3); var_dump($foo);' you get: &gt; int(12) &gt; int(3) So the operator precedence page is simply full of it. (FTR, I ran that in PHP 5.4.8 (cli) (built: Oct 16 2012 22:30:23).)
Salting passwords makes it tricker, but md5 passwords are never a good idea. Sha1 is marginally better, but still not a good idea. Use bcrypt or something. http://blog.ircmaxell.com/2012/11/slides-for-cryptography-presentation-at.html Skip to about slide 43 for more information.
Those Brits are just the worst.
If IDEs are having that much trouble loading your project, the problem is probably with your project, not with the IDE. I would expect there are cyclical dependencies or something that are causing the problem.
I never really put this together in my head before, but Drupal 8 is essentially doing this. 
Apologies if the animated gif in the README kills your browser. It was a bit of an experiment since you can't embed videos in GitHub README files.
The cause of an error 500 is listed in Apache's error_log file, just look there.
It's better to (attempt to) show that Java is more verbose than PHP using a metaprogramming example or some other practical scenario. For example, PHP's variable variables let you do some very complex things very concisely. Writing a string and then exiting isn't a particularly convincing application for a programming language.
Cdn will save you a lot of money
Me too, and I especially dislike try/catch blocks versus old-fashioned checking. Decided the switch had to be made, so I found a happy medium by leaving PDO on ERRMODE_SILENT (except when debugging) and using prepare/execute on (almost) every statement that needs a variable. 
haha this is true. I really miss the framework we use to use at my old job, which was basically homebrewed.
I use Laravel and love it. http://www.laravel.com/docs
The BEST framework is one you've written and fine-tuned yourself. If that's a modification of CodeIgniter or it's own thing so be it. 
I was looking at this earlier and it looks very promising. I'm sure I could run your ear off about what you like about it, but what about it pisses you off?
I don't like it. All the static stuff drives me nuts. 
My vote is for Yii.
why would you even think of doing that? Talk about not using best practices.
Yeah, agreed, I'll have a look at offering a pear install option. It was recently updated to work with composer, but that's more for project-local installations.
works fine
This looks great! I always end up writing a whole bunch of little test scripts because PHP's interactive mode sucks so much. I'm going to test drive this immediately :-)
Same. At my old company, we used Yii as the base for all web and mobile sites and built custom extensions for everything Yii didn't support out of the box.
If it can be a library, be it a library (just functions and/or classes made with PHP or preferebly as extensions). If you really need framework, keep it absolutely minimum. That's how they stay out of your way. That is what I'm trying to follow. I know that there are benefits with (monolithic/plugin-based) full-stack approaches, but my opinion is that the drawbacks are even bigger.
I'm just glad you're not my friend.
Great question. Have an upvote. I always love to hear what people who love a certain framework think are it's weakest points.
Kohana 3.3
You can just add it to $PATH and it'll become system-wide :)
What's up with all the Stack Overflow (and other Stack site) links lately? Don't we want to foster discussion on this subreddit rather than link to offsite conversations? I guess we can talk about the answer that's been linked, but that seems a little silly.
Unfortunately the PHP version that ships with OSX doesn't include the pcntl extension. Maybe try install PHP with homebrew? eg http://moffe42.blogspot.com.au/2012/06/installing-pcntl-for-php-on-osx-lion.html
we recently did a project with laravel 3 and it went pretty neat. i'm working on a private laravel 4 project currently and it just got better. 
&gt; eg http://moffe42.blogspot.com.au/2012/06/installing-pcntl-for-php-on-osx-lion.html It's not about installing PHP with brew, it's about installing autoconf. As far as I know, homebrew doesn't provide any php installations (at least I couldn't find it). I use [macports](http://www.macports.org/) instead
CakePHP has been my favourite so far. Have tried Zend and Yii but Cake really stood out. The documentation is quite extensive and the community overall is very helpful. Sometimes hang out on the IRC and ask/answer questions. Upgrades and changes are usually explained in detail. Wouldn't want anything else.
Use to be Kohana, now moved onto Silex. I still use Kohana in a corporate environment because it's what I know and I can do things fast in it. However, I'm using Silex for my personal projects and will slowly transition. I don't bother with Symfony2 because it's very opinionated about how things are done.
Yii is currently my favourite for PHP-based apps. It's definitely not the most "hip" but it's bloody useful, quick to pick up and gives you plenty of functionality with minimal encumbrance.
Symfony2 is pretty awesome, because it encourages you to do clean, professional development. They took some cool ideas from Frameworks of other languages and implemented a lot of best practices from other Software. If you don't need a full stack framework, Silex does an awesome job and is based on some Symfony2 components.
Currently, Laravel. EDIT: Been looking at Symfony for a larger project but after reading some of the comments here, I might need to give Yii a second look.
Right now CI because of ease of use. The controller method routing is stupid easy.
I've been using composer for systemwide too.
Me too, see no reason to download it again and again for each project.
It really depends on the project. If it's for something where Symfony won't have any problems with it (requiring APC, PHP 5.3, etc. that some shared hosts don't do) then I would pick Symfony as my favorite. If it's light and perhaps shared hosting, then CakePHP. While I've ran into issues, it's definitely helped make certain things quicker to do in my CMS. For a small project though and not shared hosting, I'd pick Silex. It uses exactly what you need it to - so more lightweight than Symfony and quicker to setup a project with it.
Small project? I'd probably use Silex with the Symfony components i'd need. Composer for the win!
Great, thanks, your PR has now been merged.
Absolutely, using MD5 at all for passwords is a completely terrible idea. I'm not disagreeing with you, but salting them adds a tiny extra level of improvement. Not enough that you wont get hacked, but it's better. It's like sticking another lock on your thin-ass thin wooden door instead of replacing it with a steel door.
PHP formulae for homebrew: https://github.com/josegonzalez/homebrew-php
I would appreciate if PHP would throw out these "alternative" syntax versions of basic stuff, because it doesn't help anybody and it's terribly buggy. But somehow - with a glance at php 5.5 - some of the PHP core guys don't want to learn and constantly build new stuff which comes in x different versions. These things really bug me about PHP, no matter how much i like it.
Mostly because I'd have to change the Ajax scripts that pull the data from the DB. It can be done, but it's also alot of work.
Hey, thanks for mentioning Assetic, didnÂ´t know this one :/ I just needed something not too fancy that could compress the static files of a project automatically with a configuration file where youÂ´re able to define the compressor and filesets.
That's about _creating_ a framework. Not _working with_ symfony 2. You might try these instead: - http://tutorial.symblog.co.uk/ - http://www.ens.ro/2012/03/21/jobeet-tutorial-with-symfony2/
This is amazing. I did not know about the @dataProvider feature, and I've written my fair share of tests. I blame myself obviously for not looking into the documentation as in depth as I should have, but I find phpUnit documentation to be a little hard to understand. Keep it up EDIT: I notice you have a Spanish name, where are you from, if you don't mind me asking?
Great, looking forward to it. Saludos desde Argentina
You're welcome :)
This looks nice, I will definitely check it out. So far I have just been doing my own make files, but it has its limitations and can be a pain to keep updated/configured. 
mod_pagespeed actually does all this on auto and better =)
Yo pense que era mexicano/chicano por que vive en dallas. Falta documentacion de php en espaÃ±ol de calidad.
I'm not sure how I'm supposed to integrate this with any of my PHP projects as I don't plan on manually running the tool and then updating all the links to the CSS/JS in my source code. Usually I'd either use an asset manager within a framework or use URL rewrites in nginx to achieve this automatically, i.e.: http://static.site.com/assets/css/styles.12345.css =&gt; www/assets/css/styles.min.css.gz
Cuando termine la serie tal vez lo traduzca en espaÃ±ol. No serÃ­a mal idea.
Tu fuiste el que me enseÃ±o para que sirve xdebug, me gustan mucho tus articulos. Preferiria sacrificar el espaÃ±ol por mas articulos tuyos en ingles. Empeze a traducir tu articulo de VM/Debian y voy por la mitad. Talvez te pueda ayudar (o varios) a hacer un poco mejor php en espaÃ±ol
Hey thanks for your comment! ItÂ´s not designed to be integrated, itÂ´s rather meant to be something you create a [Git Client Hook](http://git-scm.com/book/en/Customizing-Git-Git-Hooks) for and that runs automatically with *every* push (if a static file has changed). A few weeks ago I was also wondering how to handle automation regarding updating the URLs in template files. I guess a placeholder/identifier in the template would be sufficient, but nothingÂ´s sure yet. Maybe Statika should also support some kind of a 'post-compress' event where this stuff can be addressed? Well, since itÂ´s on GitHub everyone can throw in their ideas and improve it :)
thanks!
Who is making a global standard?
Homebrew is good. It doesn't duplicate existing OS X functionality like the older package management systems did (they're quite strict about that in the main repository). It also installs its packages cleanly into /usr/local/Cellar, so they're not littered across your system.
This is the single best reason that you should prevent PHP execution on your user upload directories. This way, even if they can upload their PHP script disguised as a JPG, they can't execute it. I'm surprised he didn't mention this in his article. Otherwise, very good information.
Symfony 2 syntax is too verbose
I don't get how I can use it though, because every time I deploy to production, the physical files will get new names, yet my code isn't going to be aware of these new file names, so it's still going to link to the unminified versions, unless there is a way to have it generate a predictable file name and then it can be integrated with the app and use the httpd to rewrite the requests to their minified counterparts and obtain a new filename based on the mtime or on every deploy to production.
CodeIgniter. Other than the fact that it doesn't support the 5.3+ features, the inability to use the `new` constructor when building models and libraries. Well you could still use it obviously, but you lose a lot of CI support on using and managing the object. 
You should give Silex a go. It's based on Symfony components, but much smaller. It's easy to study the code and understand how it all fits together.
I could argue apache 2.4 (the new one) being better than nginx, but that's hijacking a thread)
Good point - I guess I missed that part of your article. As developers and administrators, we have to take every step possible to make sure that this doesn't happen to our customers -- I really appreciate your post because it does illustrate some good methods for finding exploits like this. The only other thing I can think of off the top of my head is systems that use a plugin architecture (Like vBulletin) - In that case, through an exploit, they can actually insert a new PHP plugin into your database that is executed on pageload, so even grepping your files won't help you out.
Thanks for reminding about the database one, I wrote the whole thing today and I did make space for it under the "Where else could malicious code be hiding?" header but then I forgot to actually write it...I will make an amendment tomorrow.
Are you referring to the auto_prepend_file directive? If so, the other methods in the article would detect this file. I didn't want to include web server specific techniques because not everyone uses apache for example. However, every little bit helps.
In addition, the JSON_PRETTY_PRINT flag was added to [json_encode](http://au1.php.net/manual/en/function.json-encode.php) as of 5.4.0.
I guarantee that code is not object oriented. Just because you are using objects, doesn't mean you are writing object oriented code. The fact that you refer to changing one function and breaking loads of different things implies your code is not object oriented.
Code igniter has the same problem. I don't like the custom error logging and how it fails to log fatals. 
Sorry to be dumb here but isn't this just: print_r(json_decode($json)); 
I once saw that behavior(conditional redirection based on referral) in a Joomla compromised website. At first my thought was *"...why the hell did they make it do this???"* immediately followed by: *"This is absolute genius!"*. Tip of my hat to the 1st hacker who thought of that.
I'd always thought of Java's "public static void main" syntax as a massive pain, but I spent a lot of time last week hunting down an errant line of code in an inherited library that shouldn't have been running. Suddenly, I have a lot of appreciation for that firewall that keeps code contained.
That was exactly my thought process as well. You've got to admire the creativity behind some of these exploits.
All good points, my personal opinion is that no directory level configuration should be enabled for web servers. I use nginx but this applies to apache as well. If you have the option, it's better to set this all in the web server config which is not writable. This isn't ideal for shared hosts, but very doable if you have a VPS or better. I really like the diff option for this reason, there isn't many reasons why you couldn't get a clean copy of whatever is running in your production. This is my preferred way of doing integrity checks too. If you are using apache however, it's trivial to use the find command and find all .htaccess files in your site directory to quickly identify suspicious stuff. find . -type f -name '\.htaccess' | xargs grep -i auto_prepend_file find . -type f -name '\.htaccess' | xargs grep -i redirect Find all matches in all .htaccess files that contain http, should match redirect urls find . -type f -name '\.htaccess' | xargs grep -i http update: I added a small section mentioning this.
This is an excellent point. My company has a mini utility file which looks like the config files for statika. Anywhere in our code base we reference "css('about.css')" it gets treated different depending on if you are in development mode or production mode. In dev mode, it'll look up the config file, and include each of the individual "about.css" files one by one. If in production mode, it'll include the generated about.min.css file (from the CDN at that too). This lets our developers not fuss about with miniying everything all the time (which, for a large project can begin to take a great deal of time) and yet we get all the power of the compression when we move to prod. We haven't yet hooked into a compress-at-commit system (damnit, github!) but it's on our radar.
Check out [Concrete5](http://www.concrete5.org/), I've had to use it before and it's not bad, and has a few fans here. I had to work on a site that looked almost exactly as you describe, and it was simple enough. I think most CMS would have a way to embed a certain feed into a sidebar.
What print_r() returns isn't valid json, unfortunately. Would've been nice if it was, though, and about as useful as what print_r *does* return.
I use drupal almost exclusively at this point, with ups and downs. Ultimately things like "Taxonomy" are great, nice and necessary but stuff like not being scalable to 20,000k+ terms sucks. The same is true for many Drupal sub-systems ... for authenticated heavy sites, caching is not an option. So from a framework standpoint its reallllly flexible with Hooks and overriding nearly whatever. But, some of the current underlying decisions make it slow if you do things wrong ....
https://addons.mozilla.org/EN-us/firefox/addon/jsonview/ https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc?hl=en 
He doesn't need to even escape the password since he is encrypting it...
Maybe we should create a php script that automatically scans the server for these kind of things?
i am shocked and quite pleased to see them using a fossil repo instead of github.
Yay for wildcard MySQL searching, great idea on a high traffic site! Not. For those are you who want a high performance search engine that you can call from PHP, why not try http://sphinxsearch.com or http://www.elasticsearch.org - both are great!
I've managed to get a PHP powered platform (Zend Framework) serving around 40 requests per second fairly easily. How do you think people hosted forums before the advent of hexa core machines? The Pi is great for serving content. Just setup Nginx with some PHP-FPM wizardry and you're good to go.
Thanks! Looks like there are less and less excuses left, to put off diving into phpunit. :-)
How can you not start using it?
I had a similar problem when I first looked at it, it's overwhelmingly configurable.
I received a question about searching for common system functions such as passthru or exec, you can use this command to search for all instances of those functions: find . -type f -name '*.php' | xargs egrep -i "(mail|fsockopen|pfsockopen|stream_socket_client|exec|system|passthru) *\(" --color note: reddit seems to remove backslashes, the above requires some of the characters in the regex to be escaped, the proper code is on article. You can easily add a function by adding another | character and the name of the function into the brackets inside the regular expression.
Lol.. I didn't figure it out until way late either. Pretty slick though.
Are they uploaded through php? Save the filename as something else on your drive, and let them download it through a php script. So file.php is saved as 20130303154930aaaaaaa. The name script.php is saved in the db and it is served as mime type for download. 
And there is no rigth way to do anything. Its like here is this play dough. 
Kohana here. The bigger "wart" with that framework is that the documentation is very lacking. You want to know how something works? Look at the source code. The code itself is very well documented though and well formatted so reading it is relatively easy which kinda offsets the bad parts of it.
That's a good one. 
I would add eval() and base64_decode() to that list. A lot of PHP remote shell exploits will use something like: &lt;?php eval(base64_decode("hjkdfyt4875yhfdyt84 ... ")); ?&gt;
I would take a close look at [ProcessWire](http://ProcessWire.com). It's fairly lightweight (relative to Joomla or Drupal) and simple to use/implement, but will give you a lot more flexibility than WordPress. I mention this because you said an existing layout has to be maintained, and ProcessWire makes no assumptions about layout, markup, etc., so it may be one of the most straightforward solutions in this case.
Section specific sidebars are super-easy with [PyroCMS](https://www.pyrocms.com/). Each page can have its own Page Layout, which includes a different "Widget Area". Then you can shove any widgets you like in there drag and drop style, with navigation, links, text, forms, whatever.
Quality stuff, jtreminio... keep it up!
This is actually one of the best tutorials on PHPUnit I've read so far. One note: Why do you want to test protected/private methods directly? You should be able to test them (they should have some effect showing on the outside) externally right? If not, then why are your methods there anyway?
I've got a good example using a framework that I will eventually showcase. Great that you're enjoying the series!
PyroCMS - good CMS with a good community. Stay away from crap like Drupal and Wordpress, they really are all hype in my experience.
I found that using this container made me write my objects differently than I would without it which became an issue for me, take a look at this benchmark looking at some other containers and their methods, http://happyaccidents.me/blog/benchmarking-dependency-injection-containers
Yet another scribble in the great book of micro-optimizations. 
I use and swear by Pimple. I've recently extended it to enable returning objects not defined, and to provide a common interface for constructor parameters. Will soon share the code.
I actually wrote a small library for circumventing access restrictions called [Liberator](https://github.com/eloquent/liberator). Instead of having to instantiate reflectors and set methods to accessible, you simply 'liberate' them and then use them as if they were public. It's extremely simple to use too: use Eloquent\Liberator\Liberator; $object = Liberator::liberate(new SomeObject); echo $object-&gt;privateMethodFoo(); // outputs result of SomeObject::privateMethodFoo() echo $object-&gt;protectedMethodBar(); // outputs result of SomeObject::protectedMethodBar() 
Cool, I made something similar but with a slightly different approach: https://github.com/jtreminio/TestExtensions
Drupal. You can have it ready before work tomorrow. 
thread-hijack: It's suggested that you not write dependencies into your tests. But what if the class you're testing has dependent functions? I've got several tests with dependencies because the various methods are parts of a lifecycle where if one method fails, none of the rest of the tests can be done. I suppose I could use mocks, but I'd have to bug-compatibly implement mocks for a big binary program I'm using. Surely this is a case where dependencies make sense.
As a former Drupal user and a current Pyro user I'd be hard pressed to go back to Drupal and I'll tell you why. Pyro allows me to control exactly how my site is rendered and the actions that my user would take. I'm not forced to work within a defined set of parameters when defining my user's experience. With Pyro being built on CI I am also able to leverage a large amount of resources to quickly accomplish tasks without having to reinvent things. Now I know that my experience is purely subjective and your mileage may very however I would urge you to take a day and build a proof of concept site in both Drupal and Pyro to see how each work and which suits you better. Every camp has their groupies, in the end it comes down to which one enables you to build a site in a way that makes you happy, allows you to produce the best end product and helps make you money by saving you time. So to answer your question as to which is the best CMS, it's the one that best fits your thought process and workflow; and you'll have to evaluate them on your own to know which that is.
Yep, and just like every other "apples to oranges" comparison, this one just doesn't have the big picture in mind. For instance, you would normally compile your Symfony container into a file to immensely speed up the otherwise slow operation. Doing this might not seem "fair", but then again these comparisons were never really fair to begin with.
Part of me wishes SF2 controllers had a pre-dispatch method 'built-in'. 
Speed. At least on my machine it's far more responsive. 
Yes both of the larger containers offer compilation as an option but that's not what I was looking at, the point was to achieve the same task in the same way to find a container that has the features I want without loss of performance and I posted the results for no other reason than that I found them interesting
Sounds like your client is paying very little for the code to be written by Indian developers, then paying you a higher rate to fix the problems in their code. This is a viable practice. Sure, the code's not great, but it does the job and the client has minimised their expenses by doing it this way. If you approach your client with the suggestion of ceasing work with the Indian developers and writing the code yourself, they'll likely reject it because it will cost them more (I assume you have a higher rate then the Indian developers). If you want to go down this route then you need to present something to your client that shows they are better off this way. For example, the risk of getting sued for an error in the Indian's code might be relatively high, so continuing this way could result in them losing a lot of money. Or if you write it yourself, you can implement features faster and increase the client's productivity (and therefore money) sooner. My point is, money drives the world and your client will not go with any suggestion you have unless they believe they will end up with more money in their pocket afterwards. On the other hand, if you simply want to not be liable for any problems in the code, talk to your client about this. Suggest they sign an agreement saying you're not liable for the code. It won't cost them anything, and if it means you'll continue to fix code happily then I don't see any reason why they wouldn't sign such an agreement.
Thank you.. I've been thinking something roughly similar. There whole business model does seem to work for now. Your point about getting some things in writing seems to be the most sound advice. Gym and lawyer up is always tue defacto answer.. get it in writing is a close third.
I would go for Concrete5. It's one of the most underrated CMS platforms these days. Dead easy to setup and use. You can acheive what you're looking for a few ways: * Create a page type for each section (Students, Faculty etc) * Create User Groups for Students, Faculty etc, and show a different sidebar based on which group the current user is in * If need each section to look completely different you can even create 3 themes and then assign the correct one to each section. Concrete5 has a lot to offer and of the best features that our clients love is the inline editing. You can go on any page of the site, click "Edit" and change the content right there. Each page is divided into Areas e.g. Header, Content, Footer, Sidebar, and in each Area you can add Blocks. Concrete5 comes with a bunch of useful blocks which cover most common content, e.g. Content, Navigation. Google Map, Form etc.
i've used laravel for a couple of recent projects and i must say that i'm disappointed in the documentation's complete lack of depth. eloquent isn't very... eloquent, at least not for my use-case. requiring an id for a pivot table? weird. doctrine2 integrates nicely though. overall, the framework gives me the feeling that it's meant to solve easy problems that lack complexity. and debugging anything within a blade template is an absolute nightmare. i certainly hope v4 is more mature.
Where can I find this code when you have shared it?
Let's be fair, facebook compiles PHP to C.
Looks really awesome. Looking forward to use it.
Awesome tutorial by Paul.
Thank you :) I'm the developer, if you have any questions at all, you can reach me on anirudh@razorflow.com
Came here looking for ways of automating claiming back money from my bank, left disappointed.
While on the one hand I have tested methods like that before I generally try and avoid it. The problem is you end up coupling your tests to the class implementation rather than its responsibility/function. I belive this type of testing would fall under the term "bittle" as any implementation change may affect the testing even if the end result generated by the class is the same. Feeling you need to be able to test a restricted method directly usually points to a missing abstraction (and by association that that class is doing too much). For example say you had a class that serialises objects using a private method - that sounds like a great candidate for a test but perahps it'd be better to break it out into a serialiser class and test that instead. This is perhaps the most SOLID approach to the problem because it recognises the serialiser responsibility as distinct. That being said it will increase the complexity of the system and as such may not be the most progamatic approach. 
Great read! Thanks Paul!
This actually looks pretty useful. I think pondering the idea of writing a system for displaying info on large format displays (i.e. office TVs) but this looks like it would work for that really well.
Lithium (li3) It's realky awesome and plays well with libraries, the problem is the lack of a stable 1.0 version and related ecosystem. Not having a 1.0 release makes it hard to sell to your manager, even if the framework is quite capable/complete.
Hi, I am the developer of RazorFlow. Yes, we have some very exciting features planned for displaying dashboards on large TVs. For instance, on a TV, there's no possibility of someone scrolling down, so you can activate a "Kiosk/TV Mode" where the dashboard scrolls automatically so dashboards with any number of components are very usable and functional. We also scale out dynamically to any screen size while preserving layout and readability. You can vote for this idea to be automatically notified when it's implemented: http://support.razorflow.com/forums/195839-feedback/suggestions/3712915-tv-kiosk-mode-for-dashboards
I thought Reddit loves CodeIgniter
Looks nice... but the license says that I can only use it for evaluation purposes... which means that I won't be spending any time developing anything with it.
Any support for CRUD operations, or is the data read only? 
Sorry, the dashboards are read-only. The UI and APIs are designed to only display information.
So, as someone who hasn't heard of this before, how good is this, and how much history does it have? Is this 'a' PHP analyzer, or 'THE' PHP analyzer?
You should be transparent from the beginning. For anyone considering using this, even for beta purposes, legal questions remain and I shouldn't have to email you to get more information. Your licensing should be clearly communicated, and pricing should be in the open. I won't be using it until then, I'm sorry.
You are absolutely correct. We should have been transparent about the licensing issues right from the beginning. We will update the information as soon as possible.
This is a specific version focused on the PHPUnit tool for writting unit tests. Totally independent from the other book.
Redditor for 3 hours, same as OP.
The first book shows you how to build code that is testable; this second book is for teaching you how to actually test code.
I understand the irony, but we're a small team of just two developers, and we chose not to to make the documentation fully responsive as of now. Since we use bootstrap for the entire website, we originally made it responsive, but there were some issues on mobile, so we removed responsiveness temporarily. I admit it's a mistake on our part, but I hope you can look past it while we work towards fixing it.
Is that a joke or are you serious?
Thanks for share this! I'll give a try.
Agreed, milliseconds are nothing and I wasn't trying to discourage people from using any of the subjects, I just found the results interesting and decided to share
This could be the thing that saves me a lot of time at work (*Community College*). I'll be watching :)
This is fantastic. Any documentation on how extensible it is? There are several checks I might want to add/alter similar to PHPMD/PHPCS.
Looks very cool.. What will licenses actually cost? Would suck to develop in the eval, get locked in, and then find out its out of our budget.
It's the only one I know that does type inference in PHP and respects the doc blocks properly from my limited use. There are one's like phantm (scala, not very well maintained) and pfff from Facebook (OCaml, still in development).
Completely understandable, and I get why you decided to not compile the containers; it would make the benchmarks even more apples to oranges. By the way, I wasn't trying to detract from the effort or information you've shared, I just wanted to point out the difficulty that any comparison like this runs into.
After reading the source, I see I would have to make my own [PassConfig](https://github.com/scrutinizer-ci/php-analyzer/blob/master/src/Scrutinizer/PhpAnalyzer/PassConfig.php) and pass into [Analyzer::create](https://github.com/scrutinizer-ci/php-analyzer/blob/master/src/Scrutinizer/PhpAnalyzer/Analyzer.php#L49) since [the runner](https://github.com/scrutinizer-ci/php-analyzer/blob/master/src/Scrutinizer/PhpAnalyzer/Command/RunCommand.php#L65) doesn't do it normally. I can't find a way to externally provide checks/passes.
alexsey, please stop with your nasty posts on this tutorial link. I am not posting as other people, I go by the username 'dragoonis' which is my surname. A few of the PPI community came here and left comments, which is why you see the reference to 'Paul'. All comments and votes here are legit, so please find something else to do if you're not interested in PPI Framework. Thanks.
So /r/php is now an acceptable advertising medium for commercial products and services? Don't get me wrong, I like to hear which books the community recommends, reviews on books, or even links to **free** books... but this is none of that. Just a link to the _BUY ME!_ page and nothing else. If this is acceptable, but linking to your own quality content is not, then we're in a sad state of affairs.
We have not released pricing information yet. We hope that everyone finds the pricing reasonable when it's made available. Yes, your concern is valid. We put developers interests first while building and improving the product, and it won't change when we make it available commercially.
kenman, thank you for your comment, I will discuss this with the rest of the mod team. I would like to restate that the mod team at /r/php has had nothing to do with the banning of users like /u/jasonrobertfox and /u/irxmaxell. I even petitioned the admins to unban them and to ease up on their banning of our users who post their own content. Again - we had nothing to do and in fact wanted to opposite of what happened to these and other users.
As you can see, this is my github account: http://github.com/drgomesp, and this is dragoonis' account: http://github.com/dragoonis. Totally different accounts for totally different people. And yeah, go find something else to do.
And both of you are friends.
As you can see in Reddit's rules, it is OK to share reddit links with friends. http://www.reddit.com/rules/ The vote was my decision.
"NOT OK: Sharing links with your friends or coworkers and asking them to vote." I'm sure your 'vote' was your decision, that's why you registered and voted 1 minute after this went up. Don't play stupid.
eh, half and half. If notepad++ would just tell me when I left out a semi-colon it would be as much of an IDE as I need. eclipse and phpstorm are good but, for most projects I don't need a huge IDE.
I'd use the relational approach. We've done this at work where we abstracted things like flyers, e-cards, contracts, etc. out as simply "documents." Each document in the documents table has fields defined in the documentsFields table, and each document field has its data in the documentsData table. Lots of rows shouldn't be too much of a problem with anything approaching modern hardware.
for this you can use php -l which will just run a syntactic check on the file
I thought there were good opinions on the podcast. Personally I think this was blown right out proportion. What irked me the most was the fact that people thought these girls were stupid booth babes, like the idea that they could be PHP developers wasn't a rational thought. Isn't that sexism? Laugh a little.
That is specifically mentioned in my blog post, which you apparently didn't read before commenting...
Wow, this looks awesome. Great job!
I'm reading into your use case, but I suspect it will also involve reporting and quantifying this data. With a relational database table model you could go so far to define all of the question and answer types as well as common answers, and build all of the foreign key relationships to tie it all together. Then you have a form and questions table to go with it. Store the answers in tables with id fields to identify fields the answers go with and summarized reporting can be easy. I've done this before, it's a lot of work, and can work well, but it can also lead to trying to drive square pegs into round holes as new scenarios come about. I would suggest a simpler approach, with a searchable document object store database (such as mongodb) if you have that as an option. You could still define the forms/questions in one table/collection and use that information to generate the forms to be filled out (or the search/report pages to see the information), but you can store all of the data in a document object - which is like the serialized data field you mentioned, except that each field remains searchable and sortable. In any solution I wouldn't suggest changing existing forms, just copy/create new ones, so the original answers can always be tied back to the original questions. The data storage for the form definitions will likely be small compared to the answers. As with most programming questions there are many solutions. Also, I haven't looked by this type of thing seems like there would be plugins or other tools out there to use. Only you will be able to identify your best options.
what exactly did you not find in the documentation?
Saw this before - assumed it meant voting for Optimizer+ included into PHP 5.5 was denied for now - but looking at the vote results so far, seems it's going to make it in? https://wiki.php.net/rfc/optimizerplus
Except for students, WebStorm is half the price of PHPStorm. On their site, the main "features" page for PHPStorm is the list of ones only it has, then it links to the html/javascript features that many of their IDEs share, including WebStorm. 
Exactly. My Bad.
I feel like it's misleading though.
Anyone see any reviews of this? I'm curious about the subject, but $29 is a fair chunk to lay down on an ebook. Are this author's other books (if any) any good?
I don't think so. They put all the WebStorm features in their IDEs for server side languages like PHP. WebStorm itself seems to be directed at front end developers and maybe designer. (Just a guess.) Also as TransFattyAcid pointed out: The commercial license differs substantially in price.
Fabien is slowly taking all the great things about Silex (namely, that it's not Symfony) and eliminating them.
Documented here: http://nl1.php.net/manual/en/language.operators.array.php
Hi, before you get the ioncube running, is PHP running fine? Can you see the info from phpinfo() ? If so, can you see if Ion Cube Extension is loaded... and also, check your error logs from php to see why the extension is not loading... I've installed it for apache, and it was pretty straightforward... It was running 5.2 and Ioncube on a windows machine (although with apache).
you're right, misread the price.
I suffer from rtfm
Run away from that plugin and don't look back.
ROFL.
If you want PHPStorm for free just get [the Early Access Program](http://confluence.jetbrains.com/display/WI/Web+IDE+EAP) version. Someone on here tipped me off to it, and I've been using it for about 40 days I guess because it expired once and I had to download new binaries, but my settings were kept. Just submit usage and crash data so it helps them improve the product. Unless of course you don't want to use a beta because it can be less stable.
That is sort of the point of my comment; while I don't know the exact situation around /u/jasonrobertfox, I do know that /u/ircmaxwell was an active member of /r/php who participated in many discussions, not to mention he submitted many high-quality (and well-received) articles from [his own blog](http://blog.ircmaxell.com/) -- which, to this day, is 100% ad-free -- so he certainly wasn't monetizing. Further, he's a karma-holding member of the PHP team who, for example, [recently contributed the addition of `password_hash()`](https://wiki.php.net/rfc/password_hash) all the way from RFC to implementation. So we had one of the best PHP resources available actively participating in /r/PHP, and yet since a majority of his submissions were from his own blog he got banned without any consideration from the community. This is what jtreminio is aluding to I believe by _'in fact wanted to opposite of what happened to these and other users'_. The prevailing theory is that a certain toxic user (who shall remain nameless here) with an axe to grind with ircmaxwell took the issue straight to the admins.
Union concatenation is a useful feature of PHP but obviously don't use that $_GET + $_POST code. A good example of union concat is $a = array('a', 'b', 'c'); $a += array('d', 'e', 'f'); Please email the author asking them to fix that stuff asap.
PHPStorm strained my marriage: http://youtrack.jetbrains.com/issue/WI-17004
I bought PHPStorm and Webstorm during the end of the world sale not knowing that they were the same. When I installed them I realized that they were identical with the exception that PHPStorm could handle PHP. They kindly refunded Webstorm for me. PHPStorm is definitely worth the money paid for. tl;dr: PHPStorm is awesome and it has all of webstorms features. "definitely a buy"
I have been using phpstorm for the past 2 weeks. If I hadn't have got it in the Xmas sale I wouldn't have got it at all. It has a number of issues reading my projects flagging non-existent issues. You need to give it a kick for it to understand codeigniter. It often incorrectly flags duplicate css rules. I could go on...
 What happens when you execute this code? I assume you get an error right as you haven't made a connection to the database? Start by googling how to do that. Next you want to use mysql_real_escape_string to prevent sql injection. You then want to validate the data. So check if get var is an integer and check the day exists. Like 31 of Feb is invalid. There is a function to do this. Find it. You then need to loop through results. Tizag has an example how to do this. Then make the html. Tbh I would start with the html then switch our the dynamic parts later. Also, you would be better using pdo or mysqli for database work. The mysql_ functions are old and good programmers avoid them.
Also, correct me if I'm wrong, but this doesn't work well on nested arrays.
hello, here is my idea: table: **table_manager** * id * name table: **table_manager_fields** * id * table_id * field_name * field_type table: **table_manager_data** * id * table_id * field_id * data * user_id * mdate tables and table fields are manageable in **table_manager** and **table_manager_fields** data's are added on **table_manager_data** with reference to which table and table_field it belongs. for additional feature, you can add the logs table **table_manager_data_logs** * id * mdate * user_id * table_id * field_id * old_value * new_value * action -- (add/edit/delete)
Read the manual for mysql. like for instance example 2 from [this](http://www.php.net/manual/en/function.mysql-query.php) becomes: echo $_GET["day"]; $query = "SELECT * FROM grocerylist.items WHERE status = '".$_GET["day"]."';"; echo $query; $result = mysql_query($query); if (!$result) { $message = 'Invalid query: ' . mysql_error() . "\n"; $message .= 'Whole query: ' . $query; die($message); } while ($row = mysql_fetch_assoc($result)) { echo "Item Number: " . $row['itemnum']. " "; echo "Food Name: " . $row['foodname']; echo "&lt;br&gt;"; } mysql_free_result($result); this should echo the mysql fields itemnum and foodname for each entry in the database where status = whatever is in $_GET['day'] of course in the real world, you would handle what to do if nothing is found or the GET var is empty and you would make sure no extra junk is passed in your GET variable (google 'sql injection php' for more on that)
thanks for the response! i am not as incompetent in php as the post made me seem, so i do know how to connect to the database and the html is all generated, when i execute the code i have it set up so it echos out my query, echo $query; , and my query that it is echoing is $query = "SELECT * FROM `grocerylist`.`items` WHERE status = '".$_GET["day"]."';"; when load the page the query echos out and day is equal to 1. i understand all of this up to here and the problem that i am having is that i don't know how to make is to it just echos out all of the items that are set to status 1 in my database. I will check out your recommendations thought. thanks! 
this worked! thanks for the help!
More importantly use guzzle http://guzzlephp.org/guide/plugins.html#async-plugin
The string is an array if you can imagine that.. I started off with C and Java and couldn't believe this when I saw it for the first time.
Fuckin-A right man. That story is familiar, although you're a little farther along than I am. How far have you ventured out ( as far as programming languages go ) in your professional career since you broke into the field?
Look forward to possibly trying it out once I know if it is in budget. 
I feel like that wouldn't make sense but it's too late in the evening for me to think.. anyone care to argue or agree with Boye?
Sweet, mostly review but hell it's good brain food. Crosswords? Sudoku? Naw, Codecademy. B-)
Now if codecademy wasn't so finicky on how the code was written. For example, putting the php code on a new-line rather than on the same line with the html. How am I going to know what I'm doing wrong when I get the correct answer but it doesn't get accepted as being correct?
&gt; Bottom Line, USE WHATS APPROPRIATE FOR THE APPLICATION! [...] &gt; Being a good engineer / developer means you can pick up any framework with docs and make it work. That is the exact reason I asked this question. I use many different frameworks (ZF1, CakePHP, Silex, some Sf2). It's pretty easy to get an idea of what the strengths of a framework are. But every framework has downsides that you only run into when building more complex applications in it. I'd like to have an idea of those before I pick a framework for an application.
Why? There's nothing wrong with this feature. This is a good way of merging two arrays without overwriting existing indexes, which is useful if you wish to tack on default values, for example.
Maybe it's just me, but having a "sexy voiceover" makes me think a bit less about your entire project. Don't overdo the 'pixies' gimmick.
Yes, `+` performs an array merge, but not the same as `array_merge`. The former will *not* overwrite keys when merging (this also applies to numeric keys), whereas the latter will. That's why for most applications `array_merge` is what you want. One thing that `+` is useful for is as a "default operator": $options += array( 'opt1' =&gt; 'default1', 'opt2' =&gt; 'default2', // ... ); Here the "no-overwrite" behavior is exactly what you want. I.e. keep the key if it is supplied, default it otherwise.
Yeah, I mean it makes perfect sense. I just didn't realize it would be this simple.
Maybe anyone checked it already?
Listen to him!
I'm just trying to keep it fun =)
Lesson 1: Click here to learn Python instead. 
Vim has [syntastic](https://github.com/scrooloose/syntastic), so I imagine someone's written something similar for sublime2 (that appears to be what all the cool kids are using these days). Or you can just use vim.
Linting generally only covers syntax checking and basic style issues, while static analysis tools do deeper coverage. For instance, this particular one [can figure out when you don't use a variable](https://scrutinizer-ci.com/docs/tools/php/php-analyzer/checks/dead_assignments_detection), and [a static analyzer for a statically-typed language](http://clang-analyzer.llvm.org/) can do even cooler stuff. It's a good way to find bugs and dead code in a program without having to read the entire codebase yourself.
He does something I don't do, he's obviously a terrible coder!
Heyy, it is PHP subreddit. You risk to be downvoted :-)
Yeah, I'm only "trolling" anyway.
You still need to fix this $_GET['day'] business. $day = mysql_real_escape_string($_GET['day']); $query = "SELECT * FROM grocerylist.items WHERE status = '".$day."';"; Even if this is just a nonsense project for some college course you should be trying to at least attain the minimum standard of security. My answer above answered your question. http://www.tizag.com/mysqlTutorial/mysqlfetcharray.php - fetch array while in loop
This is almost exactly the situation I'm in. Obviously I'm nowhere near /u/ircmaxwell's level, but I also have a blog, and when I post something PHP related I like to post it also here, and every time I have a feeling that I'm doing something bad. The blog is 100% ad free, the only reason I'm also posting here is to get a bit feedback (it's pretty unknown, so I don't get any visitors apart from random google searches). If you were to look at my posting history in r/php, it's pretty much only my own content (once per two months though), apart from the occasional comment here and there.
Thank you! Question: if you were to delete a field - would you also delete all data associated with it? Because wouldn't the data be useless without the field?
It is usefult to learn it! From my own research it seems like Doctrine is the defacto standard ORM library for php.
I'd argue that the structure of the course could be improved. There's no point distinguishing between if/else and switch. It should be labelled conditionals, and also include the ternary operator.
That was sort of my feeling, even if I didn't end up converting fully over to ORM on this project, learning to use one would be useful regardless. I lurk here quite often and have seen the discussions regarding Doctrine etc and I'll give it a shot along with any others I find :) Thanks for the feedback, definitely appreciated. 
Which is perfectly fine. However, if you overdo it, people will think you're not serious about your framework. And they're less likely to adopt your framework for a long-term project if they don't feel it's here to stay for the long term. 
There is no defacto standard ORM library for PHP. You can use Doctrine, Eloquent, Fluent, etc. It's up to you. They all have their ups and downs.
"Everything should be made as simple as possible, but no simpler." - Albert Einstein Does ORM make it as simple as possible? Probably not.
I mostly stick with php/mysql/javascript/jquery now but I have 10 apps on the Android market (they have only earned under a couple of thousand dollars) and also did some work for a company called Steelcase which required JSP. I also worked at a couple of companies in the late 90s that did ASP (not .NET). I have hacked some Perl on occasion but I wouldn't consider myself anything but a complete Perl noob.
No, he combines $_POST and $_GET without validation. The method of array joining isn't the issue here.
Why do you want do do that?
It seems that Doctrine is the only popular ORM that follows the Data Mapper pattern, the rest use a sort of ActiveRecord variant. Does anyone know of any other good mapper type ORMs for PHP?
Lots of people are going to tell you that using an ORM is a bad idea, they'll call it slow, complicated, a waste of time and effort, or one of the many other [misconceptions](http://philsturgeon.co.uk/blog/2011/06/misconceptions-about-orms) people like to band around. You can use the wonderful Eloquent from Laravel 4 anywhere you like, I even put together an article explaining how it can stand on its own in any framework or project you are using thanks to Composer and a nice little wrapper package called Capsule: http://www.12devsofxmas.co.uk/post/2012-12-29-day-4-mixing-and-matching-php-components-with-composer Give that a go. The documentation is here: http://four.laravel.com/docs/eloquent I've been using this to switch from a LOT of complicated horrible SQL joiny shite to simple ORM methods and its been a dream to do.
The AWS API is a REST API and you use it to perform a bunch of CRUD operations. Why do you think it's not acceptable?
Normally if you want to support create, read, update, delete as a restful api you would map these to post, get, put, delete. To note browsers dont support method="put" or method="delete" in forms so you cant use them If you want to go down the api centric route and support a full restful api then you will need to handle the api calls in js. With this you can completely separate out your html/js code from your php server code. But for a small admin interface this approach is probably overkill.
I think I'm hesitant because RESTful routes are not native to CI. The library in my original post (seemingly) caters more for external requests as a traditional API would. Whilst I could latch on and use the functionality for allocating methods to HTTP request types, my concern is that its a messy way of dealing with CRUD?
I've been looking around at ways of handling CRUD. Previously in my CMS's - I have just split my classes out the methods into create/read/update/delete methods (IE users/create, users/read, etc). But looking at videos such as http://www.youtube.com/watch?v=TTZ9F69XtZc&amp;feature=player_embedded I see that people are suggesting RESTful routes as a way of setting out a CRUD class. I'm working with CodeIgniter at the minute, but switching to Laravel once 4 is out and stable. That being said, I've setup composer and I'm bringing in Eloquent to use as my ORM - which should help ease the transition later on.
I reckon I've asked my question wrong - I'm wondering whether the RESTful API library I was looking at above is suitable for a generic CRUD practice - or a little too far outside my scope.
Using REST does not necessarily imply constructing an API. You can have one without the other. Now, is the question based on a misunderstanding, or are you actually looking to construct an API, and, if so, why?
Thanks for the links Phil definitely something I will check out
The question is a mess due to my lack of understanding to RESTful routign! Sorry that for that, I've added some clarification to the OP. I'm not looking to develop an API but rather standardise some CRUD methods to be used in ardound 30-40 instances in a CMS I am developing for a client. I have accomplished this previously creating standardised methods that cater for general CRUD with stuff like sorting, filtering, pagination, etc as well as generating forms for create/update and also a standardised way of deleting. I'm looking at ways of improving and optimising this system and stumbled across RESTful routing which seems to take a make a big appearance in Laravel 4 which I will be switching to as my base-framework once i've got my head fully around Composer and PSR.
&gt;Normally if you want to support create, read, update, delete as a restful api you would map these to post, get, put, delete POST, PUT and DELETE should also have tokens to prevent CSRF. &gt;If you want to go down the api centric route and support a full restful api then you will need to handle the api calls in js. Not necessarily. You can handle things with a regular POST request as well. All you need is an identifier for recognizing that you've switched request mode (e.g. a hidden input). &gt;With this you can completely separate out your html/js code from your php server code. I fail to see how that's relevant. Normally, you would create a separation between your business logic and your views anyway. 
We run a php api but it serves no html or js. This whole setup provides a good interactive user experience and easier code for us to manage. You can use post for put and delete by using an identifier but that defeats the point of a restful interface.
There is a use case for each design and architectural decision. What you are thinking is an API-centric application. You need to consider the ups and downs of it. And please, don't give too much attention to those Laravel fans. They pretty much don't know what they are talking about.
&gt;We run a php api but it serves no html or js. That's implied, seeing as it's an API. APIs don't normally serve markup and scripts, they provide data serialized in various formats, e.g. XML or JSON. &gt;This whole setup provides a good interactive user experience I fail how the API is in any way involved with the UI. It's merely a data transport layer. &gt;and easier code for us to manage. I wouldn't necessarily say it's easier, but probably more extendable, as the data is separated from the presentation. There are different routes you can go here. You could build a web API, which your site reads from (and apps or whatever), but you could also build your website using MVVM, which allows you to provide different types of presenters, which would allow you to consume content via apps as well. Of course, these two approaches aren't mutually exclusive with each-other either, so... &gt;You can use post for put and delete by using an identifier but that defeats the point of a restful interface. No, it doesn't. Naturally, you provide the RESTful interface as normal, but supply the identifier as a **fallback**. This is how Kohana does it, IIRC. 
ADOdb
The three-table approach is really the only way to go. Or even more tables, if you want to split numeric and text fields into separate tables for performance/space-efficiency/searching/data-integrity purposes. It seems like a hassle in the beginning, but after the second day when you've abstracted it back into looking like one big table, you'll see how much easier life is.
Yes the data associated with it will be useless but to avoid problem, lets say accidential deletion, dont allow deletion of a field. Just make it invisible. So you must add additional column **visible* on table_manager_fields
Just add **invisible** column on table_manager_fields in case the user needs it again.
Ah I see, do you see any drawbacks to working with CRUD via REST?
Really? There's tons of hate on ORMs. The only complaint Phil missed was bad query generation.
I'm on New York time friend! Methods.. heheh. It's been a while since I've called it that. Are you a java guy?
Sorry I should have been a little more specific, I meant the CRUD interfaces in a CMS, not the framework behind the actual CRUD itself - although in reality it's probably a redundant question. How about this question instead, when building an administrative interface for a micro-CMS you were developing for a client, would you be running with RESTful controllers from the beginning? 
If your ORM is building bad queries then its either a bad ORM or you're using it wrong. With eager-loading and lazy-loading you have pretty solid control over what gets chunked in with what, so n+1 should never be an issue (as it often can be with lazy devs building out foreach loops for their data) and you dont need to process your joined data because the ORM is doing that for you. What other issues have you experienced as far as "bad queries" go?
I'm going to go ahead and mention/recommend [Idiorm](https://github.com/j4mie/idiorm). It's a really lightweight ORM, good for lightweight stuff. It's simple to use and does pretty much all you need from it: chaining methods, uses PDO behind the doors, etc. It's my go-to ORM for small projects. Do you want to throw some models in there? Check out his bro [Paris](https://github.com/j4mie/paris). 
Care to elaborate on the Laravel hate?
No I started out as a self-taught php-programmer, then went to school where I was thaught oop through java and later c#.net. Right after school I got a job as php/frontend dev. In my books, "methods" are for oop, and functions are for 'regular' (non-oop) php.
You can go either way. It kind of depends on what your design goals are. 
&gt; this makes about as much sense as turning to men just because you ended up with one fat girl. They aren't all that heavy, and they aren't all that ugly. In these dark times, it is always nice to run across a poet that wields the English language with such effortless grace as you, Phil. :-)
For browsers we use this http://emberjs.com/guides/models/the-rest-adapter/ identifiers in hidden fields would not work.
 [**@MisfitGeek**](http://twitter.com/MisfitGeek): &gt;[2013-03-05 16:26](https://twitter.com/MisfitGeek/status/308976926171742211) &gt;NODE.JS - If you choose it for a project WHY (especially instead of PHP) ? If you evlauated and decided against it, why? Email Joe@Zend.com ---- This comment was posted by a bot. [[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/19poux%0A%0APlease leave above link unaltered.) [[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [[Translate]](http://translate.google.com/#auto/en/NODE.JS%20-%20If%20you%20choose%20it%20for%20a%20project%20WHY%20%28especially%20instead%20of%20PHP%29%20%3F%20If%20you%20evlauated%20and%20decided%20against%20it%2C%20why%3F%20Email%20Joe%40Zend.com) [[FAQ]](http://www.reddit.com/r/TweetPoster/comments/13relk/) [[Statistics]](https://www.stathat.com/decks/PJSe8OF5J44Y) 
It has issues with most frameworks, but that's mostly because there's so much magic while the PHPDoc is often sorely lacking.
Am I the only one here thinks the word Epub sounds like slang for an Irish man skypeing with his bartender
If you are already using the Eloquent ORM then why not use Laravel instead of CodeIgniter? CI is a great framework but it really wasn't made to do RESTful APIs. Phil's implementation is solid but who knows how long he will support it for. You should check out Laravel or SlimPHP or something like that that does RESTful routing out of the box. 
&gt;mysql_query() &gt;not 1998 wat
&gt;But this approach is not viable Uh... yes it is. &gt;it is not even necessary It's necessary if you wish to support browsers which do not support PUT and DELETE requests. &gt; To be clear that "fallback" is not part of kohana (https://github.com/kohana/core/blob/3.3/master/classes/Kohana/Request.php) Why in the world are you linking to the request object? That makes no sense, considering that it would be in the REST controller. &gt;and I highly doubt anyone uses that approach. Well, considering that I found out that people here on reddit use that technique, they do. Edit: Here's even the suggestion on stackoverflow: http://stackoverflow.com/questions/5177595/why-dont-the-modern-browsers-support-put-and-delete-form-methods Laravel does it too: https://github.com/laravel/laravel/blob/master/laravel/request.php#L94 And Symfony: https://github.com/symfony/HttpFoundation/blob/master/Request.php#L1088 Now stop being an asshole.
Except adding this feature changes absolutely nothing in the silex code base, not a single line of code. Nevertheless, I'm amused.
Some thoughts on various ORMs posted in this topic: * RedBean, which you suggested: This doesn't suit your application IMHO. RedBean is great when you start off on a clean slate but it's hard to make it work in an existing database schema. * Doctrine ORM: Better suited to work with an existing schema, though far from ideal. Also, if you have never used an ORM you're in for a steep learning curve. * Idiorm/Paris: Very easy to use and works great with existing database schemas. Personally I use Idiorm/Paris for refactoring old applications or small projects, and Doctrine for larger projects.
Sorry but you are comparing the X-HTTP-METHOD-OVERRIDE header check in a symfony library, which is absolutely correct, to $_POST['request_method'], seriously wtf. And I am sure X-HTTP-METHOD-OVERRIDE check is in every major framework including kohana. You say you use kohana but do not know what the Request object does. You are comparing js restful adapters which is what we use to form posts with your stackoverflow link. You do not understand we are using a js restful adapter client in the browser we are not using html forms.
This post was caught in our spam filter and/or was reported enough times to get removed from general display. I am approving it simply because it made me take a step back and ask the meaning of life.
I'm a bit confused about this all. I totally understand using Eloquent and CodeIgniter (I'm doing this in PyroCMS while I port it over to Laravel, as its the most difficult part of a Laravel conversion) but if you're doing this as REST then I don't understand. 1.) If you are making RESTful requests to the same codebase, then this is probably a waste of time as going via HTTP for data on your same server is a little silly. 2.) If you want to use Eloquent and are already re-writing your data interaction, then why not make a new codebase on the same server which is entirely Laravel, then you don't even need my CodeIgniter-REST Controller. 3.) If all of your data interaction is done via a RESTful API, why use CodeIgniter for the interface at all? You could very easily use EmberJS or something similar to take care of the interface and have the REST API do all the heavy lifting. I guess I'm asking: Why are you trying to use a RESTful API for this? It's REALLY good to build an API, but are you doing this for the sake of it? And if you aren't doing it for the sake of it, don't try and cram it all into the same codebase.
I wrote an article about SlimpPHP and Eloquent which seems quite relevant: http://12devsofxmas.co.uk/post/2012-12-29-day-4-mixing-and-matching-php-components-with-composer
"random security check" ?
I was drawn to the idea of perhaps moving to an ORM simply because the raw SQL that exists currently in the application isn't overly complicated and there isn't a huge volume of data going into the db via the application itself. I was also looking at still using raw SQL but re-writing the queries so they use prepared statements in order to protect against SQL injection attacks. 
You either interview really well, or they're really desperate. Grats on the new job.
I work primarily with ci and it's docs are really good. Read through the user guide before the videos. If you're familiar with mvc, you should be okay. 
Here is our blogpost about attending and the slides of some of our favorite talks: http://blog.dotcloud.com/midwestphp
&gt;Sorry but you are comparing the X-HTTP-METHOD-OVERRIDE header check in a symfony library, which is absolutely correct, to $_POST['request_method'], seriously wtf. No, I'm not. &gt;You say you use kohana but do not know what the Request object does. I have absolutely never said that. I do not use Kohana. I haven't even spoken of the Request object. You're the one who brought that up. &gt;You are comparing js restful adapters which is what we use to form posts with your stackoverflow link. No, I am not. &gt;You do not understand we are using a js restful adapter client in the browser we are not using html forms. **I don't care**. I have not been commenting on what *you* do, I have been commenting on what OP has been asking about. He *wants* forms. Seriously, I'm not sure if you're trolling, or if you've got severe reading problems here. What I have said is that despite there being browsers which do not support PUT and DELETE, it does not prohibit you from using REST on your website, and that you can provide a fallback by using POST together with a hidden input field which would inform the server-side which request method you actually want to use, while you can still use the real request methods for things like apps, javascript etc. Honestly, I don't know what your problem is.
Or perhaps it's possible to know more than one programming language and use the right one for the job? Imagine that.
&gt;Sorry but you are comparing the X-HTTP-METHOD-OVERRIDE header check in a symfony library, which is absolutely correct, to $_POST['request_method'], seriously wtf. And I am sure X-HTTP-METHOD-OVERRIDE check is in every major framework including kohana. Um.. what? Clearly you've only read half of the line that has X-HTTP-METHOD-OVERRIDE. The second parameter of HeadersBag::get() accepts a default parameter. This means that if no X-HTTP-METHOD-OVERRIDE is specified, it will fallback to $_POST['_method']. If $_POST['_method'] isnt set, it will fallback to POST. --------------------------- **EDIT:** It was pointed out that I was incorrect and missed a crucial step in the algorithm. 1. Checks headers for X-HTTP-METHOD-OVERRIDE 2. checks request for _method 3. checks query string for _method 4. returns 'POST' --------------------------- It is also included into Kohana as of version 3.1 and does not exist in **every** major framework. &gt; [...] but do not know what the Request object does. If this is the case, then Kohana [doesn't understand the Request object either](https://github.com/kohana/core/blob/3.1/master/classes/kohana/controller/rest.php#L58). &gt; You are comparing js restful adapters which is what we use to form posts with your stackoverflow link. You do not understand we are using a js restful adapter client in the browser we are not using html forms. The post was showing the _method parameter override to make HTML forms simulate other methods than GET and POST. This can even be easily added to your Kohana project with 3-5 lines of code by overriding a method in one class.
There are no right or wrongs here. It depends entirely on what you want to accomplish. For instance, if you want to display customized error messages for each one, or want it to continue to the next one if one fails, then you'd want the second example. If a generalized error message is fine, and you want it to stop once an exception is met, then the former. tl;dr: depends on what you want to do.
Haven't done much with CI so can't really help there. For IDE though check out [PHPStorm](http://www.jetbrains.com/phpstorm/index.html).
I'm mostly trying to package some solid learning into a client project. The client will require an API to the platform shortly, I'm looking to move them as a whole to a Laravel codebase later in the year. Whilst exploring RESTful resources, as part of the prep for an API, I started looking at the way I have been handling CRUD via a CMS for them and started thinking about my tedious methods. How stable do you think the laravel/framework is at this present moment? I know Taylor's penned May for a release but I can't afford to waste much dev time at the minute. Most of my dev nowadays is geared towards in make the most out of my codeigniter by looking to intergrate the tools I know will be available to me when I switch.
Not my issues, I love ORMs. I've seen people tweet about it before.
Slim/Eloquent looks like a great combination. Fuck it, installing L4.
If money isn't a big issue, I would run off to https://tutsplus.com/ and check out some of the php courses, they have one specifically for codeigniter. I find the fee a small price to pay as the video screencast style of learning really suits me. I like to see things in action. Haven't signed up for along time now either, only needed a month, and in that time I downloaded so many courses it'll be months before I need to resubscribe. Additionally, easily the best screencaster I have ever seen ( heard? watched? experience? ) haha dunno the word, but basically Jeffery Way is usually the one who does php related screencasts and he is fantastic. Always really well prepared. 
If your exceptions are verbose enough I would go with the first option. It would certainly look cleaner than option two if you had multiple exception types that have catch phrases. ...Option two is trying too hard!
No matter what you're doing you should ALWAYS check the MySQL slow logs.
Albert Einstein, respected PHP developer.
well now I do
An ORM is a good idea, but mostly because it'll take your database code out of functions spread across multiple files and put them into one place that's easy to manage and easy to mock for testing. That's the bigger advantage. You can do that with your existing MDB2 or PDO really. Refactor your app first, then changing the data layer will be easier. Oh, and ditch the functions where you're `print`ing HTML and replace them with a template language while you're mucking about. :)
Oh god. I have 3 tips: 1) [use the manual](http://www.php.net/manual/en/index.php) - php has a great manual and google is full of shit answers from 8 years ago. stack overflow is one of the few sites you'll find good info on as well. 2) do not use mysql_ functions. do not even think about it. Use PDO, use mysqli, use ODBC, I don't care. Don't use mysql\_. (Note, MySQL is fine, but PHP's mysql\_ extension is deprecated). 3) [read](http://www.phptherightway.com/) and [read](http://phpbestpractices.org/)
IMO, start with Netbeans Beta, if you find that doesn't suit you after a month or two, try PHP Storm. I use Netbeans, personally. Look over http://www.phptherightway.com for a quick primer of current best practices.
javascript is confusing and the js community is full of hipsters and weird frameworks. half kidding. I like JS and use it plenty (and jquery) for client side stuff but I don't particularly enjoy programming in it like I do with PHP. It has a very obtuse object model. It is not very syntactically different from PHP so it kind of feels the same, but it's not.
Sublime text2, netbeans or eclipse . If you have to refactor/rewrite take a look for phpunit. 
If you have a php user group nearby, join it.
CI is a good MVC framework that can help you get back up to speed. If you have a box running php then CI setup is fairly easy (comparatively VERY easy) and the documentation is good. Before you start on the existing project consider a fresh CI install to a sandbox so you can kick the tires see how things work. Any text editor with PHP syntax highlighting should work. I don't have a Mac but I use Quanta+ on my Ubuntu box. http://sourceforge.net/projects/quanta/ I've also used Sublime Text 2 which might be a good cross-platform option, but requires that purchase a license. http://www.sublimetext.com/2
Can anybody recommend a good way to structure and reuse theme/graphic elements in CI?
Foremost that you will have to make heavy use of javascript. Forms dont do PUT and DELETE so prepare to use some ajax lib. Most CMS vendors just use GET and POST because HTTP REST (mapping HTTP actions to CRUD) is problematic. Both in terms of Forms and standardization. Poor users will have to write up custom code to interact with a true HTTP REST system and libraries are notoriously inconsistent in supporting PUT and DELETE. If you visit Facebook, Instagram, Twitter, Pintrest, etc etc etc it's all GET and POST. Your transports used by Amazon (like Hessian) are all tied into just POST or GET and POST. REST is a methodology and there is no HTTP REST specification or practice that has become pervasively used. 
Thanks for the feedback, I'll definitely refactor first before changing the data layer. One of the many reasons I decided to dust the cobwebs off this particular project was to do exactly what you mentioned which is to consolidate and remove all those functions spread out in multiple files. I laughed when I saw your comment regarding ditching the print HTML functions as that was something already on the roadmap while sketching out and planning the code refactoring because I look at that code and I shudder and really say outloud to myself "what the fuck were you thinking?"
I still use ADOdb, but mostly out of habit, not because it is a good idea. ADOdb is not a full ORM like many of the other options posted here. It's just another database abstraction library, like PDO.
&gt; I personally found CI to be a fantastic MVC framework when I used it, however I haven't used it for my last few projects and I don't think I'll be going back. Totally agree. If there's a possibility to rewrite it to another FW, it would better be done
Hiring a novice programmer is fine. One that works on a cart... fuck me... 1) Someone should be auditing every line of code you write. 2) Your company should have a defined way of making updates live. If 1 and 2 don't exist.. I wouldn't write any code until I knew what I was doing. You could introduce a security problem. You could expose clients details. You could break authentication. If your just doing template stuff then you are far less likely to fuck up. In that case go crazy but someone should still be checking your work.
Part 2 is available: http://www.gregfreeman.org/2013/steps-to-take-when-you-know-your-php-site-has-been-hacked/
I do not want you to feel as if we are jumping on you, since you most likely don't realize what you have stepped into. eCommerce is hard. Not just the code, but PCI compliance is difficult, and if done incorrectly could cost your company several tens of thousands of dollars. I do not believe eCommerce is something that a junior developer should touch, and a mid only with guidance and thorough reviews of a senior.
I really appreciate your feedback, I can't say I am feeling confidence in myself doing well, but I have every intention to make it work and prove myself worthy. I know I have a lot to learn and that I may have taken on a little more than I can handle. BUT, as long as someone in willing to take the time and teach me (because I told him I'm new to PHP) why the hell not? ** phone comment, sorry for typos and formating 
I second Coda! Coda2 takes a bit to get used to, but if you can still find the old version, it's really easy to use. Also, download [MAMP](http://www.mamp.info/en/index.html) so you can easily test/run everything on your mac.
Try "Select * from db.table limit 1" I haven't messed with this problem in many moons, but that should work. You can skip the use statements that way.
Tutsplus is great. Don't forget about Lynda.com too. Their introduction to Php/MySQL videos and OOP gave me a great foundation a few years ago.
That directly didn't do it but you set me upon the right path SELECT * FROM [dbName].[dbo].[table] did it
If I wanted to pass URL params into the post I would echo them into hidden inputs in the form on the previous page. example: &lt;input type="hidden" name="url_email" value="&lt;?=$_GET['url_email']; ?&gt;" /&gt; 
&gt;Foremost that you will have to make heavy use of javascript Not if you do it the way I demonstrated just two posts up. 
make sure you escape that input first with htmlspecialchars
why would it be invalid to validate after the operation? joining 2 arrays is not inherently bad or dangerous... $a = $_GET + $_POST validate_input($a); // now you are only having to deal with 1 array instead of 2. big deal. 
No, Laravel 4 is still in development, there are still constant changes to the project, including total breaking changes, checkout the commit times and changelog here: https://github.com/laravel/framework
would be interested to know why you are adding get + post, while technically it can be done, it isn't something that is done very regularly. The problem being that usually POST is reserved for write operations, and GET reserved for read operations. Mixing the 2 arrays takes away the ability to know where and why you received the input. Just cause you can doesn't mean you should I guess is the short of it. It is a pretty cool feature though, really handy for other parts of code.
You can use it in production, sure. We are about to launch a product with it. But keep in mind it's not *stable*, so in order to use it in production you'll have to keep up to date with all the changes and have tests for nearly everything.
What advantage are you hoping to get by using REST on top of your CRUD layer? In my opinion, as long as you have a good clean API, using REST on top of it adds absolutely nothing. For example, how is: POST /api/foo **Edited to change PUT to POST for an insert. attr1=a attr2=b any better than POST /api/ resource=foo method=insert attr1=a attr2=b I actually think the non-REST version is much clearer because it's explicit about what it's calling. To each his own. If you have a solid CRUD foundation and a clean way to call those functions, I would honestly just stick with that. I've built a couple REST APIs and didn't like any of them. Edit: I know this goes against the hivemind of the web community, so just take a step back and decide what works for you. Building REST onto your API will help you learn something about it, and you might just have to do that to realize whether or not you like it. 
I'm using it for 3 productions site so far. One update broke the site, it was something related to the bootstrapper. Keep in mind that this was one of the first releases. My 2 latest projects hasn't been broken by any updates yet. Just be careful before running composer update. Of course, always do it in your dev machine before doing it live. If you program it the good way, you can just run tests after it has updated to make sure everything works. 
There has been nothing in the last month that has broken my app that couldnt be resolved by "git pull git://github.com/laravel/laravel.git develop", which took me the grand total of about 30 seconds.
Escaping it in the form I mean, so you avoid XSS.
"Hack" protection? There's no protection here at all.
did you just combine 2 statements of my comment and merged them into another one i never said? nice. 1. there is a huge chance that you can't just "composer update" your whole site from beta 4 to release 2. **Worst case** is you will never go with the release version or have to rewrite a huge bunch of code i think it is a honest answer, i love l4 and we did a l3 project for a big company recently, as i said you can build solid websites with l4 as it is now, from a professional point of view i would consider it as a risk to use beta software for production - no matter how good it is.
How about creating a php class called "onclickFunctions" and add the public functions that you would call based on an event?
This is my first web app and I would love some feedback.
Could you give me an example of this?
&gt;How do you go about doing onclick functions? There are no onClick functions. ASP.NET Web Forms is a nasty hack on-top of HTTP to introduce state. It works by wrapping the whole page in a form and keeping hidden input fields, one with the encrypted data of the viewstate, and the other for determining which button triggered a submit event (which is populated via JavaScript). You handle a submit action in PHP the same way you would in, say, ASP.NET MVC: You check the request data. That is, you check the posted data, make sure the fields exist, are populated and valid as per your requirements, and then you handle that case. http://www.php.net/manual/en/tutorial.forms.php http://www.php.net/manual/en/language.variables.external.php http://www.php.net/manual/en/reserved.variables.post.php
What if it breaks once you fall asleep? What if you get hundreds of sales every 15 minutes? That's thousands of lost sales and tens of thousands of dollars lost. Okay maybe not, but what if this app really is supposed to be always online and very important? You can still get screwed in many other ways. What if the fix hasn't been implemented yet, too?