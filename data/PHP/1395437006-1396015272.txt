Fundementally Email never gives any guarantee or proof that any email will be delivered, so that's a bit of a fallacy. At least with a contact form, there's the ability for a developer to include other functionality, like saving a form to a database. So that even if Email fails, the message can still be received.
Yeah I was just wondering if there was any way to use this to allow runtime variations on the dependencies or not. It's an interesting approach for IoC, but I see a lack of being able to provide different implementations of an object at runtime being a limitation. 
Eliminate your `global` habits, sir. ;-) Because you have a single script, you can pass the variables around as needed. The `help()` method can easily take `$stdio` and `$usage` params. Likewise, `debug()` can `$stdio` and `$debug` params. Finally, the anonymous function can `use ($stdio, $background, $padding, $debug)` and they'll be available inside the closure. In addition to building good habits, this will make it easier if/when you convert to a class. Think of the `use` statement in particular *as if* it is a series of constructor parameters.
I'm really torn on using Exceptions for flow control. For development purposes, it actually makes debugging and testing VERY explicit. GIve a method bad input, and you can test for an explicit exception to be thrown or not. Fail to handle that bad input and throw an exception early, and the app screams at you that you've provided bad input that you need to handle. Though I do get that Exceptions are just that: exceptions. If someone fills out a login form but provides an invalid email address, part of that flow is anticipating this and handling it. But on the other hand, invalid email address is bad input, and throwing an InvalidInputException seems acceptable to me. One way I look at handling flow regarding user input is how a statically typed language would react if you tried to pass the wrong input type to it. It would blow up.
came here to say this. if you have "php-only" requirements, zend_lucene will get you there. You *should* be able to reuse that lucene index in something else like SOLR if you ever decided to move up/away from "php-only" scenarios (but i'm not 100% sure on that).
Tired of this Facebook FUD. 
You could roll your own - but quality of results are going to be nothing like Sphinx/ElasticSearch could offer. Something like I wrote many (many) moons ago - be careful, here (might) be dragons in this code: http://magnetikonline.com/phpmysqlsearch/ Probably not the best idea in 2014 with Sphinx and ElasticSearch easily available. Or you could look at MySQL full text indexes - they are now supported in InnoDB tables to as of MySQL 5.6.
It's not unwarranted FUD and it's not FUD about Facebook at all. Betting the farm on a brand new language that is stewarded by one single company (no matter who) is a risky bet. That is the point I got from the article. If it has legs and is around for long enough that it develops a community to support it then that risk level will go down. None of this has anything to do with Facebook specifically. Hell for me, having them on it is a plus -- they have done amazing things with PHP. But it's not time to start porting code yet, if you still want to enjoy the benefits that PHP is known for.
That's not *entirely* true. You can use PDO as a DBAL provided that you either stick to SQL-92 (which is pretty crippling), *or* you only use drivers for vendors that share whatever SQL extension syntax you happen to be using in your queries (which isn't so bad for simpler apps).
That's nice you figured it out and all but where are the instructions? 
Contact forms can be useful if you don't want to publish your e-mail address for some reason, or as a way to enforce that each message contains all the information you need it to (e.g. if it's a bug report, you can have drop-downs for version number and so on). But I agree that they're overused and a simple mailto link would sometimes be better. On my contact forms I usually include an option for the sender to CC themselves. That gives the record that you're looking for.
&gt; Where's the FirebirdSQL, Oracle and MSSQL support? Wherever you put it after you write it. You *do* contribute to the open source projects that you have complaints about, right? *Right?* ;-)
I'm upset that it's tied to Facebook as well, but it's not as if it's a bad thing that it exists. If it sticks around it will be a great thing for the PHP community, especially if they let it branch off and become truly free software.
Oh come on. Please don't be so dramatic. No one tried to say that they know everything. There is a service locator pattern. Just look it up.
I'm having a little trouble understanding exactly what it does, but from the comments I think I have an idea. It sounds like it would be a very useful project - I'd love to see it.
Most code has implicit expectations. Any time those expectations are broken, and the current context is not capable of recovering and continuing logically, **throw an exception.** If you have a repository method `UserRepository::findById()`, and you try to look up ID 12345 and it doesn't exist, *this is not an error!* Simply return `null`. However, if that method has a database connection dependency and that connection fails while lookup up the user, *that is an error!* Throw an exception. Just be vigilant about proper classification of errors, and always use exceptions only for errors. If you find yourself considering exceptions for flow control to solve some problem, you need to refactor your design.
It's a good question, but I think you should prepare for the possibility that no such thing exists. Searching lots of text content is a problem that is inherently not really something you can do cheaply *(edit: I mean cheaply in terms of time/memory, not moneys)*. Whatever solution you end up with, will probably either be quite slow/CPU intensive, take up a lot of memory/disk space because of indexing and caching, or both. Companies like Amazon and Google do this exact thing very well, so it looks easy when they do it. But they have a LOT of memory and a LOT of disk space, and some of the best engineers in the world twiddling the knobs. Sorry to be a bummer here and not be constructive, I know that can be annoying if you're looking for a solution to a problem. But it's a point I don't see anyone else making and I think you need to consider it in coming to a decision on which solution you're going to go for.
Thanks for the tip!
It'd be great if PHP took some of the things from HHVM, like it's speed and brought it into the PHP core and managed it from then themselves. That way we wouldn't have to worry about HHVM going away...
Is "A Fractal of Bad Design" just a cop-out for people who can't make their own point? Let's write "Every language: Fractals of shitty ideas." * Python: Disconnecting the version 2 and 3 ABIs. What version to use!? * JavaScript: No block scope? Prototypal inheritance? Crazy type coercion rules? * CSS: No possibility of DRY. * SQL: Inefficient query plans!? Come on now. PHP has come a long way of its own accord, and it's possible to write *great* software with it. Edit: I don't disagree with the article, I'm just tired of seeing the "Fractal of Bad Design" article everywhere.
That doesn't mean camus2's statement is not entirely true. You're helping yourself by writing SQL-92. PDO doesn't ask or help you to write SQL-92.
I don't think he wanted to go into detail about all the bad points so he just linked something that highlights people's complaints.
How is this not dependency injection? You are INJECTING a DEPENDENCY from outside the class that needs it. It is no more complicated than that. The UserController needs a UserRepository in order to function - it is a dependency. In this case it's a PDO UserRepository. In a different case, it might be an Eloquent repository, or perhaps a Doctrine Repository. Whatever it is, you define that in your container, and inject it into the UserController. That ***is***, unequivocably, dependency injection. (For the record, it's implied that the UserController is expecting a UserRepositoryInterface, and you are providing it with an implementation of that interface... I left this out for brevity) All the container does is save you from this hassle every time you want to use the UserRepository somewhere: new UserRepository(new UserMapper(new PDOConnection), new UserFactory)
Perhaps, but he's pandering to the PHP haters. Basically acknowledging that PHP developers are fully aware that PHP has its faults, but we really don't care.
I am injecting them though. Every one of those Pimple wirings is injecting an externally constructed object into a class as an argument/parameter. This: $container['RegistrationController'] = function($container) { return new RegistrationController($container['UserRepository'], $container['RegistrationFormValidator']); } ... // all other wirings Is 100% identical to this: $PDOConnection = new PDOConnection(...); $UserMapper = new UserMapper($PDOConnection); $UserFactory = new UserFactory; $UserRepository = new UserRepository($UserMapper, $UserFactory); $Input = new Input; $RegistrationFormValidator = new RegistrationFormValidator($Input); $RegistrationController = new RegistrationController($UserRepository, $RegistrationFormValidator); You are simply using closures to 1. Lazy load only what you need 2. Easily assemble an object's dependencies when needed so you don't have to repeat yourself To be clear, it's implied that these dependencies are implementations of interfaces... And by "First example" I mean the very post I made in this topic, the long list of Pimple wirings.
&gt; However, your UserController needs UserRepository, not a container It's not getting the container though. It is getting a UserRepository This line here: return new UserController($container['UserRepository'], $container['ProfileFormValidator']); What do you think $container['UserRepository'] resolves out to be? It's an instance of UserRepository. &gt; You should do Yes, it's implied that is what my classes look like, but I didn't show the class code for the sake of simplicity. All I showed was what was happening OUTSIDE of the class: how the DI Container was assembling and injecting dependencies.
It is getting the container *first* then you're asking UserRepository to the container. 
The only special thing about nullables is that Hack will yell at you if you try calling methods on it or passing it to a method that doesn't take a nullable type T unless you explicitly check that the value isn't null. One way to do it is to have a method function foo&lt;T&gt;(?T $bar): T { if ($bar === null) { throw new SomeException('Hey! This is bad!'); } return $bar; } And then using it as $x = doSomethingWithNullable(foo($bar)); Of course, if throwing an exception isn't appropriate just check for the null value and branch the code as necessary. 
Settings&gt;project settings&gt;directory settings&gt;
If your definition of high-quality software is a bad CSS rule you should probably rethink your definition.
@broketm is right. All you need to do to fix an error in Hack is follow the error parts - they will point you as close to the problem as possible. I've found Hack errors very helpful as opposed to other languages (say C++) which don't do as good of a job of telling you _why_ they consider some piece of code to be wrong.
Just a note here that .hh is also used for C++ header files (rarely, yes) which can cause problems.
I saw the announcement, then look at the site and then I wanted to punch baby's in the face. Why you might ask, this is why: const int MyConst = 0; &lt;-- Ok - I can live with that, since it's more like C. public function increment(int $x): int { ... } &lt;-- WTF is with ": int"? Why not: public function int increment(int x) { ... } or: public int function increment(int x) { ... } 
$container is a variable, that is all it is. $number = 1; new UserController($number); // Variable containing object $Repository = new UserRepository; new UserController($Repository); // Array variable containing object $array['Repository'] = new UserRepository; new UserController($array['Repository']); // Object behaving like an array using ArrayAccess (like Pimple) $array['Repository'] = function() { return new UserRepository }; new UserController($array['Repository']); All of those are the same thing. UserController has no knowledge of where UserRepository comes from, or how it's constructed / instantiated. It doesn't know the difference between: $Repository = new UserRepository; or $array['Repository'] = new UserRepository; or $array['Repository'] = function() { return new UserRepository };
I'm not trying to say you're not doing DI. You're clearly doing DI. What I want to say is that the way you use your container in your controller is how you do with a service locator. I know the fact that it won't be a problem because your controller is an entry point of your application, but it doesn't change the fact that you're using an IoC container like a service locator in your controller. You're clearly doing DI for other classes. That's all I wanted to point out.
Most modern PHP frameworks have auto-wiring DI Containers to make your life easier, but even then, if everything is depending on abstractions/interfaces, you still have to configure your container to tell it which implementations of those abstractions should actually be given to the various objects. So in **theory**, if 100% of your classes were programmed to an interface, then you would have 100% manually wire your container with the appropriate implementations of their dependencies, and auto-resolving wouldn't ever really benefit you. But in practice... that's a different story :P
But I'm not using my container in my controller. My controller never gets an instance of the container at all. Only in **[this post](http://www.reddit.com/r/PHP/comments/20xxnr/full_working_example_of_a_di_container_in_action/cg87y6g)** do I show an example of passing the actual container into the controller, but I state that is service location and not DI. If you're referring to this bit of code: require_once "injections.php"; $router = new Router; $router-&gt;get('/user/{id}/profile', function($route) use ($container) { return $container['UserController']-&gt;showProfile($route-&gt;parameters['id']); } That's not service location in this context, because there are no dependencies involved at this point yet. This is still a flat configuration file, and $container['UserController'] is no different from $array['UserController'] = new UserController(...); Remember, service location is an anti-pattern ***ONLY*** when it's passed into a client object, because it makes that object harder to test, and still hard-couples an object's dependencies. But a flat config file isn't an object, and the concept of dependencies doesn't exit yet at this level. $router-&gt;get() is just storing a configuration in a registry. Router is not actively dependent on the $container. In fact, $container never makes it into the Router because it's a Closure. All you're doing is storing a reference to a closure in Router, and when that reference is called, closure gets resolved, and the **contents of** $container['UserController'] (e.g. UserController) gets passed in. No object ever receives $container as an injection. 
At this point, it's such a little problem. I think I was a little bit picky one this method. May be I'm missing something. Isn't $container an instance of 'Pimple'? I haven't used Pimple, so I can't be certain..but isn't Pimple a container?
&gt; Unlike HHVM, adopting Hack is a huge risk. I wonder. Without spending much time looking at Hack in depth, it looks like a superset of PHP, the kind which could be turned into PHP largely by stripping the bits that aren't PHP-ish enough. &gt; it adds optional static typing, generics, and a bunch of other enhancements and conveniences to PHP Descriptions like that remind me of TypeScript, a superset of JavaScript that compiles into JavaScript, with things like types and generics melting away in the process. So.. if I'm anywhere near correct, I predict someone will soon write a Hack-to-PHP transpiler that will allow Hack codebases to run on non-HHVM environments, and adopting Hack is nowhere near the risk portrayed here. 
so when you use a framework that provides an IoC, for example Laravel or Symfony, the framework behind is using service location? for example if you have a controller that has a dependency that is injected by the framework, somewhere in the code has to have something like $controller = $container-&gt;get('somecontroller'), and that is service location right?
Yes, I agree that's how I would do it as well. Still, you have to manually wire something up though. 
Yes, it's an instance of Pimple, but Pimple is nothing more than a fancy array (literally, that's all it is). If you check out what Pimple does, it's a registry pattern with array access. But even still, Pimple never gets injected into any other object. Its scope lives ONLY in injections.php
Fucking lol'd at 'expert sexchange' joke, that brings me back
also don't forget the myths PHP: It isn't a real programming language, it's just a script! JS: No OOP
Apparently that syntax for type specification is common in functional programming languages, which FB makes use of. I asked [similar questions](http://www.reddit.com/r/programming/comments/20wuuo/facebook_introduces_hack_a_new_programming/cg7m8ng) in /r/programming and received a few responses.
Upvoted for Expert Sexchange.
It does actually mean something, especially when it's in response to "PHP isn't good!" Well, actually, look at all the great things it does. That's why we bring it up: because the people who say otherwise are wrong, and there is no other way to respond. Your analogy is flawed. The difference would be more like using dry wall or wood paneling. It's just different but accomplishes the same thing with the same amount of effort.
&gt;It's just different but accomplishes the same thing with the same amount of effort. PHP is just a bad language. Trying to avoid this fact using cop outs like "*different*" is disingenuous and not persuasive at all. PHP has a lot of traction, that's its only redeeming quality, but that's a property of the culture/ecosystem/environment, not of the language.
Like Marco I am a programmer, writer, podcaster, geek, and coffee enthusiast. But I disagree with this article. I work on a large-scale, enterprise-d class web application (the flagship app of my company I might add) and we have encountered nothing but coding bliss since migrating our entire codebase to Hack. Hack is great for PHP, it lets you just *do*, and do well. The Pros of Hack: * Flexible * Maintainable * Agile * Robust * Intuitive * Solid Testing * Clear Syntax * Heavy-duty * Has a supercab * Dependable * Can tow heavy loads * More than just a pick up
You can't really just "bring" the speed of HHVM to PHP core. They go about things two totally different ways.
PHP has had two RFCs for type-hinting return types; both have failed. Want to guess what syntax they used? Yep, this one: &gt; public function int increment(int x) { ... } The other one you propose seems more odd than the `: int` syntax which exists on other languages.
1. That still doesn't make it as dependency injection. 2. Just because you access it as if it was an array doesn't change the fact that your controller (a class) has to ask/locate for its own dependencies. It's not *inverted* That's all I want to point out. Please don't misunderstand me. I'm not saying this is terribly bad since your controller is already tightly coupled to a framework and it is an entry point of your application. It's just that saying your controller is using DI is not true.
I don't know what to tell you man :P My controller (the UserController) isn't asking for its own dependencies at all. I don't know how you can interpret that from the code I posted. It is 100% inverted. Here is what my UserController looks like: class UserController { protected $UserRepository; public function __construct(UserRepositoryInterface $UserRepository) { $this-&gt;UserController = $UserController; } /..... methods ..... / } And here is what effectively is my index.php file looks like: $container = //container with all wirings $route = new Router(); $route-&gt;add('/user/{id}/profile', function() use ($container) { return $container['UserController']; } UserController is not, in any way shape or form, asking for its own dependencies. I am GIVING it the dependencies I want it to have. EDIT: Yay, thanks for the gold :D
Which languages use the ": type"? I personally haven't seem them.
Good point. I tried it and HHVM seems to be able to run my suites just fine. Impressive. :)
There is little difference between an @inject annotation and a `needs` function. Both are declarative. 
* C++: Templates!? * C#: Two different ways to write LINQ!? * C: Dereferencing a null pointer is allowed!? * Ruby: Why so slow!? Better?
It's all a pissing contest, anyway. &gt; PHP IS BAD &gt; PHP IS GOOD &gt; PHP IS BAD AND YOU SMELL &gt; PHP IS GOOD AND TELL US WHY WE SMELL &gt; PHP IS BAD AND PHP PROGRAMMERS WEAR DIAPERS &gt; PHP IS GOOD AND NO WE DON'T &gt; PHP IS BAD AND YOU'RE WRONG &gt; PHP IS GOOD AND WHY ARE WE WRONG? &gt; PHP IS BAD repeat.
Haha oh shit yeah. I said in that post where that code was that it was service location, not DI. Sorry if that got interpreted as dependency injection. I was using that as an example to illustrate the difference between service location and DI but I can see how that was not very clear at all :P So yes 100% agreed, that code example is definitely NOT DI.
[We fear change.](https://www.youtube.com/watch?v=1TtGQnyPZ6g)
Yea, a green shed is clearly wrong, it should be blue like the neighbor's.
http://www.reddit.com/r/programming/comments/20wuuo/facebook_introduces_hack_a_new_programming/cg7pl19 &gt; Also, ':' or '::' has been used in dozens of languages for type ascription dating back to the 70's. It's not a new syntactic invention by any means. Check out e.g. SML, OCaml, Haskell, Scala, F#, Clean, Miranda, etc.
Yes, now write 50 for each language as you could for PHP. :P
I'm sure I could come up with 50 ways developers use each of those languages incorrectly, which is what people usually bitch about regarding PHP.
&gt; PHP is just a bad language. There's no evidence of that.
The "Fractal of Bad Design" rant has always been subjective characterization. Outspoken developers (hackers) seem to really have a tough time understanding the cult of personality and opinions are not facts. 
So in your opinion PHP has features that are misused, rather than gaping design flaws?
That, and I feel every language has design flaws.
Have you seen Facebook's old index.php? It was just as craptastic. People complain about PHP for a reason: a lot of existing PHP code is like that. Not everyone cares about PSR-2 and SOLID. 
The faults are worth the ease of use
https://www.sqlite.org/fts3.html - it exists... it's not a terrible idea esp. for sites intended for one or a few users.
I built a quick command line app, [Urly](https://github.com/dsawardekar/urly) to illustrate DI in Encase. Also wrote a [blog post](http://pressing-matters.io/encase-a-lightweight-ioc-container-for-php/) to highlight some of the differences between Encase and other DI containers. Let me know if you have any questions.
I try to follow the same pattern as PHP itself and return false to indicate any error that shouldn't halt the program. Any errors that would be considered "compile-time" due to incorrect code, I throw an exception. Whenever possible I like to work with all errors translated into exceptions, so I don't use `trigger_error` or PHP errors at all. *Sometimes* I use `assert` instead, where I've been able to set up an assert callback that throws exceptions. Interesting thing - since 5.4.8, there is a 2nd parameter to `assert` - description, so you can have a nice message about why it failed.
I'm not sure why you got down voted, these are all perfectly valid points. It has its faults, but it's not going to stop me coding In it. 
I noticed this thread alongside my Encase post. Encase is the IOC Container I released earlier. I wrote a simple command line application to illustrate the usage of Encase. It's called `Urly` and the code is on GitHub. - [Urly](https://github.com/dsawardekar/urly) - [Blog post comparing Encase with other DI containers](http://pressing-matters.io/encase-a-lightweight-ioc-container-for-php/) To answer your question about bootstrapping, Here's how Urly bootstraps in it's constructor function. function __construct() { $this-&gt;container = new Container(); $this-&gt;container -&gt;object('options', new Options()) -&gt;object('bitly_api_key', getenv('BITLY_API_KEY')) -&gt;object('bitly_login', getenv('BITLY_LOGIN')) -&gt;factory('url_shortener', 'Urly\BitlyShortener') -&gt;factory('url_expander', 'Urly\LongurlExpander'); } The `BitlyShortener` has dependencies that are declared with the needs function. function needs() { return array('bitly_api_key', 'bitly_login'); } Hope that helps, ping me if you have any questions. 
Encase does indeed do dependency injection. Without DI the library would be kind of meaningless. ;-) Anything you declare as a `need` is injected into the `object`. In the example `logger` is injected into `Worker`. If a `TaskRunner` declared `Worker` as a dependency it would also be injected when you lookup the `TaskRunner` object.
I was here for this event, and impressed with the new features of behat. They are definitely going to make make the developers job easier. Particularly impressive features were: Steps going from green to red inside scenario outline examples. Being able to remove modules from the code ( i.e the formatters ) and still see behat work. I'd love further discussion around what we can do to make adoption business wide of behat / gherkin easier. Things like allowing the business to review/edit/comment on stories and have this tracked against the feature, I think would be an excellent next step forward.
'A Fractal of Bad Design' is a joke and should be re-title 'A Fractal of My Miserable Self'. I can barely trudge through the author's litany of projections, elitism, judgments, and evident lack of creativity in his or her work. Advice, get some therapy before you take on a career of isolation. 
No no no! Using a trait is implementation detail, you should not look in to that. Traits can be used to implement an interface, but in itself it is not a contract and you can at any point decide to dump the trait and instead implement an interface directly or with another trait. There is nothing wrong in implementing an interface and using a trait that is basically just an implementation of that interface and nothing else. I use traits a lot as a way to both implement an interface and bring in the support code needed - eg. a LoggerAwareInterface is implemented by a LoggingTrait that actually provides the code/helpers for logging, too.
What, SOLID is new? 
&gt; I'd love further discussion around what we can do to make adoption business wide of behat / gherkin easier. Better documentation for one. The one for Behat 2 is virtually non existent. Hopefully this will change with version 3, considering how many people are using it now.
The PSRs are. I feel bad admitting I don't know what SOLID is. 
Or even mod_cache. I have a site with this exact issue and I actually do both - I set cache headers, which are respected by mod_cache/Varnish and I also do my own caching with a hash of the query params. The reason I use my own caching is, that the query might have the parameters in a different order, so I (well, fabpot) normalize them before generating the hash. I also have never actually done any measuring, whether this is of any help at all, so my advice is to measure this or at least collect data before implementation - I wish I had done that :) 
PSR-2 will be 2 year old this April/May as well. Wouldn't call it brand spanking new.
A community driven documentation would indeed be great, and mostly because of what you say: the documentation didn't go into detail at all. The same thing can be said about phpSpec as well, though. Since its 2.0 release was a couple of days ago, I hope we'll see some change there too.
&gt; Facebook’s HHVM is one of the best things that has ever happened to PHP. Still laughing at this ridiculous assertion.
To be fair, this looks like a nasty, hacky solution in Ruby as well. What it looks like to me (I'm not super well versed in Ruby) is that you're creating dynamic methods to a class. One way to accomplish this is to use [PHP's magic methods](http://www.php.net/manual/en/language.oop5.overloading.php#object.call) similar to Ruby's `method_missing`.
Compared to a lot of PHP codebases, it is. I mean that's the main reason a lot of the actual design flaws in PHP are still around. It's not like the core devs are unaware of these things but as we see clearly with Python there are a LOT of environments, usually in businesses, where something depends on one of those flaws and for whatever reason is either unmaintained or unmaintainable. If a new version doesn't support their ancient shit, they'll just keep using the old one forever. If you don't support it yourself someone else might. See Red Hat for the biggest example, a whole company doing work all over the open source world, funded by those who think software is best when it's vintage. Backwards compatibility is a massive double-edged sword. It helps you grow a userbase but it means a lot of bad decisions made "in simpler times" are set in stone.
Downvoted for explaining why you downvoted. This is a general rule for reddit because it adds nothing to the discussion. 
Except 80% of the points from 'fractal' are invalid. Edit: some of the reasons listed here from below comment: https://news.ycombinator.com/item?id=4177516
this example was taken from the book Rails AntiPatterns and it's not considered a bad refactoring in the book
It is comparatively. You're not going to use it on a legacy program with ZF1. And of course it takes a while for those things to catch on. 
Didn't VB.net do this? Been a while since I touched that nightmare of language.
I'm so sick of seeing that "Fractal" article linked. He gives the following preemptive "I'm right and you're wrong" argument warning: &gt;Do not tell me that “good developers can write good code in any language”, or bad developers blah blah. **That doesn’t mean anything**. Literally 4 paragraphs later: &gt;Do not tell me that Facebook and Wikipedia are built in PHP. I’m aware! They could also be written in Brainfuck, but as long as there are smart enough people wrangling the things, they can overcome problems with the platform.
For the love of god, please fix that sql injection vulnerability. http://bobby-tables.com/ Make sure you have the error-reporting value cranked all the way up. Do some var_dumps to check your assumptions.
It's obviously a matter of opinion but there's quite a bit of debate around Ruby's preference for "magic" code like this. Sure it looks cool and it's "clever" but in a large-scale project, the more of this kind of code you have, the more difficult it can be to debug problems or trace issues to their source. When a lot of the business logic gets resolved at runtime (especially through these kinds of dynamically defined code blocks), you prevent things like IDEs or static code analysis tools from doing their jobs and pointing out potential issues during development. I'm not saying this is hacky or "wrong", but every approach or technique has potential trade-offs, and the project itself will usually dictate which ones are acceptable and which ones are not. I would use this kind of approach in a smaller script or sparsely (and well isolated) in a larger project, otherwise I would go with something more verbose and explicit, that might require a bit more typing and more lines of code, but would be easier to understand and/or debug (especially months/years later if you have to support it).
As an example of this, a modification of the example I submitted elsewhere in this thread: class Role { protected $_types = [ "admin", "editor", "writer", "guest" ]; public function exists($role) { return in_array($role,$this-&gt;_types); } /* * * Rest of your class here... * */ } This accomplishes the same result, except you would call `$role-&gt;exists('admin')` instead of `$role-&gt;admin_exists` to do your check. It's basically the same thing, but (arguably) this is much clearer code, and an IDE or code sniffer would have no trouble understanding it. 
Citation needed
That's a pretty significant *cultural* difference between the languages. In a lot of langauges, including PHP, somelike like that is possible but it would be considered bad form. 
&gt; Betting the farm on a brand new language that is stewarded by one single company (no matter who) is a risky bet Like microsoft?
https://news.ycombinator.com/item?id=4177516
sure, that's what I'm saying that in ruby world is not a bad practice, or a hacky solution like edwardly said
They could also license it such that it's not controlled by FB.
Much appreciated
&gt; All the current IDEs for PHP are very basic. PHPStorm is not basic. &gt; If a function that I'm calling can throw an exception but I don't have a try-catch block, I want my editor to tell me. Is that really so much to ask? Yes, checked exceptions are idiotic. The point of exceptions is that you don't have to check for errors at every function call, only at points where recovery is possible. Embrace the fact that every function can potentially throw an exception and you'll understand how it's supposed to work. Although PHP looks a bit like Java, it's not Java. 
Conceptually similar? Yes. Semantically similar? No.
It doesn't matter if it is a cart or a bwm car. A poor driver is still a poor driver, if you know what I mean. 
&gt; PHPStorm is not basic. Yes it is. What intelligence does it have? Auto-complete is not intelligence. &gt; Yes, checked exceptions are idiotic. No, the fact that an unchecked exception will result in your code exiting and dumping a half rendering page to output is idiotic. The fact that you can call a function without supplying any of the parameters and it will still execute is idiotic. The fact that fatal errors just write a message and don't actually affect execution is idiotic. PHP runs code when it shouldn't and dies when it should. If the library I'm using tries to connect to an RSS feed but fails, throwing a CouldntGetFeedException wouldn't be unreasonable. What would be unreasonable is my code dying because the exception wasn't checked. Are you suggesting I wrap my entire code in a massive try-catch block? Why don't any large projects use exceptions like that? Java gets a fair amount of criticism, but PHP isn't even on the same level where you could compare it to Java to make the same criticisms. PHP is a template language. The OOP functionality is crap because it's not even meant to be there and they can't develop it fully without breaking compatibility with what PHP is really meant to do which is templates. If you want to effectively use the hacked on OOP parts of PHP, you need a more intelligent IDE to pick up the slack where PHP fundamentally fails. So far, none exist.
It's ok, reddit is full of [double standards](http://www.reddit.com/r/PHP/comments/2113wt/hack_isnt_php/cg8s23k) so I don't really care one way or the other
There is no question that this kind of practice is *common* in the ruby world, but I would argue that in general it's still probably a bad practice more often than not.. The mood in the Ruby world is changing around this stuff (now that some frameworks and apps have been around for 5+ years and need to be updated/maintained, etc)... Also, the Rails Antipatterns book is 4+ years old now.. Don't immediately accept something as a good practice just because it's in a book.. Times change and new lessons are learned.. 
It's already possible via bots.
POST gigabombelliot.php title=%27%29%3B+DROP+TABLE+%60posts%60%3B+--
Lolololol
Sanitize your post variables! Better yet use PDO.
I don't know if that is a good argument. The best books on design are far more old than this one, and this example is more related to ruby than rails. It's a showcase of how you need to be able to use the syntax that your language offers you in some specific contexts. Also the books mentions several times that this type of code is usually weird for people comming from other languages like php. But what would be a good objective argument for saying that this is a bad practice in ruby? keeping in mind that professional ruby developers are going to look or maintain your code? you can't limit your coding because inexperienced programmers or your IDE don't understand it. I understand why this could be considered a bad practice in java or .NET, but not in a lean framework like rails.
That's why I suggested it; if someone just needs persistence without a major backend DB system then sqlite is sufficient.
I actually have, what did you see in their index that was so bad? As far as I remember that file was useless, just referenced bunch of files that you can't seen.
Again promotion for unfinished work, sadly i see this quite often. No negative feedback? Plase keep from writing these kinds of posts, theres no need to promote that kind of work in here. If the book is good people will pay for it. Biased reviews really are more as a antipromotion in my eyes.
I don't know Ruby. Could somebody explain what this code is even doing? I can't for the life of me figure it out.
Interesting read. Gotta say, I'm sold on Sublime... pretty much perfect, at least for my needs doing a ton of PHP / JS / template type work.
That's true, if the book is good people will pay for it. I just wanted to put this on reddit, since I hadn't seen any posts about it and Phil gave me a copy to read since I kept bugging him about it. I did actually have "negative" things to say. I don't feel comfortable saying "this chapter sucks balls", because nothing in the book is downright awful. However, as I mentioned in my short post, I felt that a few chapters did lack content. There's a lot more to the book than I mentioned here or in the post, though. Most of the small posts I've written so far are about things I've found useful, and this is yet another thing I consider to **be** useful. Personally, I feel that the PHP world is slowly coming to maturity and embracing the right way to do things, and I think that this is a good resource for people. I definitely did not intend for this to come across as a "promotion", hence the text post and me asking for others' experience writing APIs, not necessarily their thoughts on my post or the book. *edit*: FYI, I didn't downvote you, gave you an upvote. Nothing wrong with trying to keep this subreddit clean.
I built an API around a year or so ago for one of my services and it was okay. I spent about a month or so working on it. It's an API for a forum service in PHP that uses json. The style isn't RESTful at all and uses nonstandard methods (didn't really know about REST at the time, and guides for "how to write an API" are all over the place). I ended up not even releasing it. Why? I just... hate it, I know it could be so much better and didn't want to deal with having to maintain two APIs in a sloppy way because the first one sucked. I will be checking out this book when it's finished.
We've all been there. RESTful services aren't the end-all. You don't *need* to build an API for everything you ever build out. That's not to say that the practices in building a good API can't be used towards building anything else. It's all about planning things out logically, and making it maintainable. Do you have your project on GitHub or BitBucket?
Im sorry if my comment came in too aggressive, im happy you promote PHP stuff, and im most def. going to read phils book. Still, theres too many times i see blogposts or articles about books or products that are not free to the community, and are promoted in a biased way. 
yes, I get that. It doesn't mean that there is no such thing as a service locator. As far as I concern, you need a service locator to do service location. Just like you need a container to do dependency injection.
I roll with Vim. I certainly see the point of IDEs like PHPStorm, but I haven't been in a situation yet where I felt lost. And I'm saying that while doing projects with Symfony/Laravel. IMO these frameworks are well structured, if you have to look something up it's relatively easy. Of course you're project also needs structure, but that's a given.
We've been careful to call Hack a "dialect" of PHP, since it's neither a subset nor a superset. We removed things such as extract and $$var that are impossible to statically analyze. But we added much more than just the type system -- things which are much more difficult to cleanly remove, such as collections and short lambdas. I'm sure it would be *possible* to write a Hack-to-PHP converter, but it's much more complicated than just erasing a bunch of type annotations. This also ignores thorny issues around actually integrating such a converter into your development and release workflow. Enough that I don't think such a tool, even if written, would get wide adoption. (Though it would not be a bad state of affairs if I were proven wrong here :))
I knew what the answer was before I even opened the link. I've never enjoyed using any of the competitors to PHPStorm. IntelliJ is such a good platform compared to Eclipse and Netbeans.
Yeah, that's why I said I'd want to see it as entirely free software before I'd jump on that train.
It would be a little simpler to just do class Role { protected $_types = array("admin", "editor", "writer", "guest"); public function __get($var) { return in_array($var, $this-&gt;_types); } } Then you'd just call $this-&gt;admin or $this-&gt;editor.
You either have the wrong password, or that user doesn't have permissions for what you're trying to do.
This article is pretty well and I totally respect all the opinions stated within the post. Personally I'm on PHPStorm, too, and I don't see myself changing anytime soon. This is due to me basically never leaving the IDE for work-purposes, all DB, FTP, GIT, Testing is done within the IDE. Browser wise I'm leaving the IDE, but that's it. Most surprisingly to me to be honest was that Dreamweaver actually still exists :D I used that one decades ago doing some nice Table-Layout-Websites using HTML only xD
No need to be sorry, really. I'm perfectly fine with calling out things that promoted in a biased way - especially given that reddit's being used by companies already to promote games, movies, etc by means of paying off users or just creating fake accounts. I'm not comfortable with that either. At any rate, I think Phil's given a lot away for free: tons of FOSS code, tons of articles, "PHP the Right Way"...I don't think there's anything wrong with charging for great advice when it's substantial. It's not as if I don't charge for my time when it comes to clients. :)
The Dreamweaver guy's explanation is confounding. DW's "check-in/check-out" system is actually a `$filename.lock` file that's uploaded to the server that the thing then checks to see if it exists for any file you open. If it does, it tells you the file is currently being edited. This shouldn't be happening in professional development environments in 2014.
I'd enjoy PHPStorm a lot more if I only wrote PHP. I don't feel the necessity for a "true" IDE with Ag and YouCompleteMe (for vim, obviously).
Nice. Exactly in the order I would have expected. I've fallen for PHPStorm, before hand it was Netbeans (and Zend Studio before that). My only gripe with this: people insistence on calling Sublime Text, Notepad++, and Vim an IDE; they are _editors_--big difference. While I think you may be able to make Vim an IDE, the rest are stuck as just what they are: editors. PS: Dreamweaver? Really DW? People still use that? And for PHP no less?! Ouch. If a PHP Developer told me they used DW during an interview, I would immediately toss out that resume. At least Aptana, originally built for HTML/CSS editing, can have a PHP plugin installed.
It'd be nice if Sublime Text had a settings dialog like PHPStorm or even one as simple as Notepad++. It seems rather lazy that that aspect has been neglected.
git, is simple and easy. It should not really take more than a week to be master 99% of the features that you need. And it takes under an hour to figure it out. 
Well I'm not saying be just like another language, but some consistency from the way I see it. Where you put the type.
but you're still using the same arguments. Metaprogramming is a big part of ruby. This type of code is hardly considered "clever" in the ruby community, in PHP the thing is different for obvious reasons. But my point is that any good ruby programmer is not going to have trouble understanding this type of code, because like a said it's a common practice. But I understand your point, I think that if you abuse metaprogramming your going to have maintainability issues. There are safe cases when using it's a win though, specially if you're using TDD.
It kinda scared me when I saw Dreamweaver.
Sf2 user here. Why do I need/want setting dialogue? Serious question. 
I don't have the project itself on github or bitbucket since it's in PHP but it's closed source SaaS with no plans on putting it out there - so an API is of much appeal to my customers. The one I have is still maintainable to a degree and consistent but it takes some learning, I also think it's not conventional either. Here's an example bit that would register a user from a site's registration form: $register_result = $API-&gt;register_member(array( 'username' =&gt; "{$_POST['username_first']} {$_POST['username_last']}", 'password' =&gt; $_POST['passwordreg'], 'email' =&gt; $_POST['emailreg'], 'mgroup' =&gt; 'member', 'ip_address' =&gt; $_SERVER['REMOTE_ADDR'], )); // Failure if($register_result['RESPONSE'] == false) { echo($register_result['RESPONSE_TEXT']); } // Success if($register_result['RESPONSE'] == true) { echo($register_result['RESPONSE_TEXT']); } It's understandable... but is that really the best it can be? There's also annoying factors such as re-querying over and over for the same data for a logged in session, I'm wondering if the book addresses ways to write an API for doing "login-with" properly for your app. About when do you think this book will be done? Do you know?
I think it's just how people call it. I personally think we should only use IoC container though. When people use 'DI container', they mean that they're doing dependency injection with an IoC container. Keep it mind though..an IoC container can be used as a service locator. Update 1: http://martinfowler.com/articles/injection.html
I'm not so sure I understand the ruby code, but this could be related, using Closure::bind(). &lt;?php class Role { protected $types = ['admin', 'editor', 'writer', 'guest']; public function __construct($roles) { $types = $this-&gt;types; foreach ($types as $type) { $this-&gt;types[$type] = Closure::bind(function () use ($roles, $type) { return in_array($type, $roles); }, $this, get_class()); } } public function __call($type, $args) { if (!isset($this-&gt;types[$type])) throw new RuntimeException("Role is invalid"); return call_user_func($this-&gt;types[$type]); } } class MyAppRoles extends Role { protected $types = ['superadmin', 'supereditor', 'superwriter', 'superguest']; } $access = new MyAppRoles(['admin', 'editor']); var_dump($access-&gt;superadmin()); var_dump($access-&gt;supereditor()); var_dump($access-&gt;superwriter()); var_dump($access-&gt;superguest()); 
The last two chapters will be done within the next few weeks. I want to expand the authentication chapter to show "user-context" data as this is certainly something people need to know how to do. `/me` for example is really handy. 
Sublime is an editor, and certainly is a fantastic editor, but even with a lot of plugins it's not an IDE.
Mainly because editing the config files directly gets a little old. I like it, but can see why some people don't. 
As Phil mentioned, it should be done pretty soon. I think one thing you're going to run into there is that it appears that you're actually writing all of your API as one large class. I would not recommend doing that. Are you using a framework? It doesn't appear so, but I could be wrong. Obviously, frameworks are not mandated, but they *do* help you keep your code clean and separated by having well-thought-out blueprints for what an application should look like. Additionally, *IMO*, you should not be echo'ing/returning things like that. I'd have to see a bit more of what you're actually doing in order to give you real, solid advice. --- All of that aside, the book has a section on authentication - but this is really from the standpoint of an API developers will call out to remotely. For instance, setting up an OAuth 2 server, using tokens to auth a call, etc. More than happy to correspond over email if you'd prefer to keep your code off reddit.
All of it has been written as one large class with no separation, which is terrible. The code I showed you I just ripped from a personal project's test file, I don't echo things like that but it was just meant to show how it worked. Gives true or false on success with different response_text. I'm not using any frameworks beyond the one already in the forum software, which is rather old at this point and nothing like the fancy frameworks available today... which I'm not experienced with. I'm too embarrassed to post what I'm working with here so I'll consider that offer. 
Why the down votes? VIM isn't a IDE but it is a valid editor.
Though it's more expensive, you can buy IntelliJ and get all the JetBrains languages (PHP, Ruby, Python, etc.) as plugins.
I work with a developer that uses Dreamweaver as his IDE of choice. Boggles the mind, but some people don't like change
all of my wut
[This article](http://martinfowler.com/bliki/InversionOfControl.html) gives and idea about the concept of Inversion of control. The point is, IoC is a concept that appear in different contexts. In the context of managing dependencies, it appears in the form of Dependency Injection. Dependency injection are mainly 2 types. Constructor injection and Setter injection. In constructor injection, an object will accept the dependencies via constructor arguments. By using this, Any dependency that an object might have is apparent from the arguments in the constructor. Second type is setter injection, where an object accepts its dependencies via setter methods. As you can see, these are not mutually exclusive, and can be combined if you choose to do so. As for dependency injection containers, there are mainly two kinds of them. In the first one, you have to manually do the dependency injection. Pimple is an example of this type of container. In these, the container does not do any injection, but it provides a common location from where you can do any type of injection. The second type of containers, like php-di, are mainly for doing constructor injection. This will actually read the dependencies off the constructor arguments and inject the dependencies. If those dependencies have any further dependencies, they are resolved the same way, recursively. This process is also known as auto-wiring. There is another concept called 'Service Location', where objects resolve their dependencies through a container that is injected into it. Even though you are technically doing dependency injection, ie you are injecting the dependency, ie the container, this is not generally advised. You still decouple the dependency from their concrete implementations, but it hides the real dependencies of your objects behind the container and makes it difficult to manage them. It may also make testing harder. I am not sure I can think of any situation where using service location may be advisable. The general idea is that it is an anti pattern and you should never use it.
No worries. Happy to chat with you, just send me an email, sent in PM.
IntelliJ is the Rolls Royce of Java IDEs, in my opinion, and PHPStorm is equally great (and Webstorm, for that matter). I'm looking forward to seeing Jetbrain's [upcoming C++ IDE](http://www.jetbrains.com/objc/features/cpp.html). 
A lot of times it's because they've never been exposed to something or they may not understand how it works and have a hard time asking someone for help explaining it to them. I've definitely experienced the Dreamweaver mind-boggle and all I could end up doing was just talk about the ways other tools handled problems and it eventually created interest. I can understand not liking change though, this is a pretty competitive industry.
Ya know, I was a nay-sayer for a while. I really love Netbeans, the idea behind it, the time and effort that has gone into making that IDE really shine, and it is an amazing IDE if you are generally working on one language alone. But if you need to work with multiple languages you have to load it up with tons of plugins and addons and even though 90% of them work really well, the lack of polish compared to Intellij is pretty compelling when you've been fighting with your tools for a week to get something done. I really love working with Intellij now for Java, PHP, Ruby, etc...
Ah no, once you try to branch &amp; merge with SVN it all falls apart in a heap. Git speed also floors SVN. 
I use Komodo Edit. I'm surprised neither it or Komodo IDE is on there.
Much nicer having all conf files as JSON blocks IMHO. Easy to version control (think dotfiles) and copy configs between systems/unify settings. Also works out better for ST plugin authors - don't have a faff around building UI settings for their work. 
Do you use exuberant c tags? 
i use the komodo ide to, though not edit which is the open source variant i think? i use the normal komodo ide, i think pretty much nearly 10 years now. my teammates use php storm (but they realy mainly focus on php only) for me komodo is just perfekt
I actually use the excellent IdeaVim plugin inside PhpStorm and RubyMine for the best of both worlds. Just so you know, it's a very easy install. 
In much the same way a squirt gun and a 357 "do the same job"
Yeah, I'm a big fan of Komodo Edit... and I don't know why more people don't try it, given that it's free and fairly awesome.
Pretty common, actually. In a more secure environment, your webservers will be firewalled so they can't make outbound requests, but merely respond to 80/443 connections instead.
enums
Coda isn't on the list but Dreamweaver is?
Regarding Dreamweaver: Back in the late 90s, there were two main HTML editors. One was called HoTMetaL, and the other was HomeSite. HomeSite, at the time, was a fantastic way to manage HTML projects - it did syntax highlighting, push-button deployment, snippet management, etc. it was great. I have fond memories of it; one of the few editors that never pissed me off. Then, HomeSite got bought out by a company that was later bought out by Macromedia, resulting in the birth of DreamWeaver. Many of the HomeSite features were incorporated into DreamWeaver, and possibly improved over time. If there's still a bit of the old HomeSite spirit left in DreamWeaver, that could explain the respondent's affinity for DW. Personally, I split my time between PHPStorm and Vim these days :)
&gt; Is a missing form field or incorrect date format worthy of an exception? A missing form field? Possibly, it's a sign of malformed input - maybe someone's trying to probe your system for vulnerabilities by feeding it crap, maybe the submission got truncated (e.g. [`max_input_vars`](http://www.php.net/manual/en/info.configuration.php) in extreme cases), etc. An incorrect date/email format? No. Generally you validate the entire form and collect all input errors into either model properties or some other storage, so the presentation layer can display them *all* back to the user in the right context. The validation process should just populate the error storage, once you have processed all the validation rules you can skip further input processing and display the form again with all user input and errors. **Edit**: However, in a larger application where you have layers between the controller and the input processor, you may choose to use an `InvalidInputException` to abandon input processing and propagate the issue along with all user input and all errors back to the controller.
Although I love git, find its branching model preferable to mercurial, the staging area is great, and use it every day, I cannot in good conscience call it "simple and easy".
For what it does it is simple and easy (compared to other solutions, as it avoids a lot of issues later on). You do not really have to use all of those feature from the get go. The great thing about git, is that getting started is simple. After you get comfortable with the basics, then you can go into the more advanced stuff. 
Netbeans is amazing, I have nothing but good things to say about that IDE. I have never used PhpStorm and recently I started trying Sublime. I like Sublime too but I am yet to explore it. Also used Eclipse when I was learning Php but it was a memory hog, maybe it has improved? Aptana is for rich kids, I am not one :(
Yep, I use it too. Great little editor.
No mention of Atom.io yet? I got my invite last night but I've yet to try it. I guess it's not a *true* IDE but it's quite exciting. I really like the sound of the Firepad integration. It would be brilliant loading up my normal IDE and being able to instantly collaborate with another dev on my team on the same file.
What do you mean "consider this your last warning"? I've never been informed of this before. I apologise if I'm disobeying your regulations, perhaps if the authorities were more polite then this place would have a much better community and might have more success.
I'll reiterate, Sublime is a text editor, not an IDE. So is vim. Text editors generally go in conjunction with IDEs, but they certainly aren't replacement for IDEs.
Seriously, can people learn the difference between an IDE and editor already? Sublime, Notepad++ and Vim are editors. Not IDEs.
I like GelRC for php, java, html, css. Its not continued and may be outdated for the language compatibility, but I really like the interface, thr size (3mb) and configurarion.
As far as I know, there's no way to dynamically add methods to an object - however you can override __call to do the same sort of thing: class Role { protected $types = ['admin', 'editor', 'writer', 'guest']; public $type; use MetaMethods; public function __construct() { // Register hasAdmin, hasEditor, etc. foreach ($this-&gt;types as $roleType) { $this-&gt;register('has' . ucfirst($roleType), function() use($roleType) { return $this-&gt;role == $roleType; }); } } } trait MetaMethods { protected $methods = []; public function register($name, callable $fn) { $this-&gt;methods[$name] = $fn; } public function __call($name, array $args) { if (isset($this-&gt;methods[$name])) { return call_user_func_array($this-&gt;methods[$name], $args); } } } $role = new Role; $role-&gt;type = 'admin'; $role-&gt;hasAdmin(); // =&gt; true $role-&gt;hasGuest(); // =&gt; false
An incorrectly completed form field tends not to be something you need yo bail out of. It is something that is totally expected and part of the normal flow of getting a pesky human to fill out a form. There is no need to use exceptions here, as a fundamental way of handling one or more form fields that fail validation. Validation is expected to pass or fail the form items. Neither case is an exception. Now, if to validate, a database connection was needed, and that was found to have disappeared, then that would be an exception, as there is no way to continue sensibly. 
Yes there's a big difference between an IDE and text editor, but they often accomplish the same task and the editors mentioned are so customizable you can add many features of a traditional IDE. My Sublime install is setup with a linter and compiler for numerous languages, as I'm sure many other's here are.
Can't second that. Been working with both for two years. GIT &gt;&gt; SVN
ლ(ಠ益ಠლ) But at what cost?
For someone new to VCSs and the kind that are distributed, like GIT, I think you are being a little bit unrealistic.
&gt; I understand there are some new features in Git that some people find useful, but how is it all of a sudden, SVN, which has been "great" suddenly "falls apart?" SVN as a single branch forward only commit model is fine - sans the fact you need to be constant contact with your SVN server - working remote/offline just isn't possible - (another win to Git). But when it comes to branching/merging it just doesn't work nowhere near as good as Git, nadda - fail, back to zero. Having seen development move over the years to agile methodologies you need this ability to branch, complete a feature independently, then merge back when done. If this isn't a reliable process, then you entire team workflow falls apart. Git isn't the only (better) way to handle branch/merge - Mercurial is another good choice - but I would never touch SVN in a team environment, have tried it before and it would always end in pain - to the point developers would just forget branching and commit mainline and hope for the best, and/or rack up huge amounts of uncommitted work knowing that they had to commit all in one massive change set - it's terrible. &gt; I've been in programming long enough and this is an unproductive trend that I see over and over again. If you are saying that Git is the like the "latest fad" on the developer bandwagon - then I really can't agree.
If they acknowledge that difference, their list becomes smaller and they come across as people with inadequate knowledge. Surely there can't be any other sane reason why people continue to consider editors as IDEs
SVN has never been great. It's been at best an improvement over the unbearable CVS (which was in itself an improvement over the horrible RCS), and a mediocre one at that. For any mid-sized project and above, SVN is a royal pain in the ass and a very real risk. It's one of those things (exactly like RCS and CVS) that you should ditch as soon as something better becomes available. 
For anyone who doesn't know what he's referring to, in git, you can be working on lots of branches locally on your machine. You can commit a bunch of your changes locally and then switch branch to work on something else all before pushing anything to a remote git server. In SVN, if you wanted to work on a bunch of local branches, you'd have to check them out into separate directories.
I used NetBeans for years, switched to Sublime Text 2 soon after it came out and have not even bothered looking at another editor since. The combination of the excellent packages and its speed mean it blows everything else out of the park. Netbeans began taking minutes to launch after a while, that's what you get with Java IDEs I guess. Not to mention it performed horribly on my OS X machine. I've gotten an invite to Atom and will be checking that out soon, it's probably going to be the only viable competitor to ST. Edit: and to all the people saying a text editor isn't an IDE, my question would be, why do you need an IDE for PHP development? Sublime offers code completion, linting etc through packages
In case it helps - you can have multiple windows. There's the option to close &amp; replace the current one *or* to open in a new window - [source](http://www.jetbrains.com/phpstorm/webhelp/opening-multiple-projects.html)
Well not quite - SVN you can branch, there is the convention (but not inforced of /trunk, /branches and /tags and you can "svn co" different "paths" of the SVN tree to your working copy - this bit does work (albeit slowly - updating the working copy isn't great with SVN). This is different to Git where branches are considered first class citizens. The issue will be when merging said branch/path into your mainline/trunk path - the merging strategies used by SVN will more often than not result in merge conflicts - Git merging just always seems to work so much smoother. With SVN you end up fearing the branch - once you move to Git as a seasoned SVN user it takes some time to ween yourself off this and learn to love branching once more :)
Actually that part of the language isn't too bad (although "end function" is quite verbose). There is plenty of crap elsewhere in the language though.
Seems like a stubborn solution.
Don't get vim people going on what "vim can't do" and calling it just a text editor
Yep - just gave a presentation on IDEs to our PHP group recently, and jetbrains' breadth of offerings came up. I made the point that they've not chosen to compete with Visual Studio, but do the plugin route instead.
I used Komodo Edit for a long time before switching to Sublime Text, I just found Sublime to be a much quicker and easier tool to use, some of the extra features just had me in awe when I first used it and I've never looked back since switching. Credit where it's due though, Komodo is a good little editer, especially with Edit being free.
Thing is, there is no "compilation" of PHP that an IDE could do. So what else would an IDE do? Sublime et al have many additional features like FTP, command line, etc. At what point does something stop being a text editor and become an IDE?
I've actually never come across this problem before, it shouldn't be trying to go to `index.php/images/logo.jpg` in any case. Unless you are using some kind of rewrite rule or something. Can we see your code?
Replacing a text file with dozens of checkboxes gets pretty bad pretty quickly. Notepad++'s UI is one of the worst out there
I use Netbeans primarily but from my experience with Sublime Text, it seems almost as flexible as Vim and seems like with the right plugins it can be turned into a pretty good (and very lightweight) IDE with linting, compilation (useful but not relevant to PHP), version control, project/task management, etc.. It's just that, as with Vim, you need to put some time into configuring it. I've used Notepad++ more than Sublime Text but have not found the same to be true. Npp really is just a text editor, albeit a fairly powerful one for what it is.
Thanks, I added it to the main post. 
The first paragraph is just a barrier so that people would actually talk about the content of the blog post rather than "lol PHP is bad." 
I wrote this as a comment on [an earlier thread](http://www.reddit.com/r/PHP/comments/1tgoy4/dependency_injection_service_location_and/): Inversion of control isn't just for the controller. When you define your own service you can use IoC for that service. If you choose to pass in the entire container ([like in this SO answer](http://stackoverflow.com/a/12057057/138106)) you can access other services in your class: class MyService { function __construct(Container $container){ $this-&gt;container = $container } function mailSomething($thing){ $this-&gt;container-&gt;get('mailer')-&gt;sendMail($thing); } } This is *service location* (the container is locating the service for MyService), and considered less-than-great practice. This is what the standard Symfony controller does (with a convenience method for get()). On the other hand, if you configure symfony to pass in individual services into your class ([as the Symfony DI docs show](http://symfony.com/doc/current/components/dependency_injection/types.html)) then you pass in only those services that your class/service needs: class MyService { function __construct(MailerServiceInterface $mailer_service){ $this-&gt;mailer = $mailer_service } function mailSomething($thing){ $this-&gt;mailer-&gt;sendMail($thing); } } This is *dependency injection* (the mailer service is injected into MyService) and considered better practice. It takes a little more time to setup as you need to inject each dependency (as opposed to passing in the whole container), but it's (generally considered to be) worth it. And here's what the code would look like without any IoC: class MyService { function __construct(){} function mailSomething($thing){ $mailService = new MailService('hostname', 'user', 'pass'); $mailService-&gt;sendMail($thing); } } This is considered bad practice as MailService is not a dependency that can be changed at run time. This makes it difficult to unit test and makes MyService less portable (if you try to use it in an application that doesn't use the MailService class for mail you can't easily replace it). It also requires you to do the initialization of the class within the service. This could be made a little better with DEFINE'd parameters or a factory method, but it's still not as flexible as IoC.
Kill me for this, but Ive worked with vs back in 08, and I thought it was great
Why not use: /stuff/images/logo.jpg An as an extra exercise, try writing a query that will get only those records where month = x ;) Edit: What you actually should do is create a virtual website in Apache and make it listen to 'stuff', then create an entry in your host file that points 'stuff' to 127.0.0.1 That way you can access your website as such: http://stuff 
It may work if OP decides to use that kind of path, but it makes it difficult to move the site around that way. Using true relative paths would be best if we can figure out why it's doing this... &gt;_&lt;
I'm a Komodo-to-Sublime-switcherer myself, and although Komodo Edit has a ton of cool features, the ones that Sublime lacks are offset by the ones Sublime has that Komodo doesn't IMO. Also, Komodo Edit is really sluggish and big and bloated compared to Sublime. Having said that, I agree that Komodo Edit is great considering it's free!
fetch merge pull status diff log commit clone That should be it right?
Does Sublime Text have a plugin that lets me click on a function used somewhere in the codebase, and it would open the file where it was declared? Like ctrl click on Eclipse.
Also, if you need a "check-in/check-out system" you might consider entertaining the notion that you're doing something wrong. The company I work for recently converted from Visual Source Safe to Git, and I for one thoroughly enjoy being able to work without having to check anything in or out. I am blessed to work with decent PHP developers and since all three of us know what we're doing, we rarely get merge conflicts, and if we do, they're small and easy to resolve.
I'm on appache 2.2.22 (through Wampserver 2.2) I did a search for the .htaccess on my server, but didn't find one for apache. (there are 3 in different subdirs of phpmyadmin but I don't think those are the ones used by apache) Pear22's solution worked for me, though it's not ideal I guess. Since it's just a test environment I can live with it. It seems I'm having a bug, not a problem with misunderstanding basic html.
No love for PhpEd ? I find it pretty solid, with a lot of features.
A worthy cost.
Of course. I never said there were no safe cases, or that you should never do this.. What I said is that they are way fewer "safe" cases than people believed a few years back when metaprogramming was super trendy (because now we are seeing the drawbacks to those approaches in large codebases and projects that are in maintenance and bugfix mode, or projects that need to be refactored etc).. If you're going to lean heavily on metaprogramming today in new code, you should think carefully about the trade-offs (again depending on the project - for your own personal stuff go ahead and do whatever you want). This, again, has nothing to do with the language you are choosing. You also keep bringing up the quality of the developer(s) in your argument, and that means I'm guessing you've never worked on a really large codebase or as part of a medium sized team (or bigger) if that's a big part of your argument.. Good programmers are much less important than good tooling, and therefore programming approaches that hinder good tooling will usually be forbidden by the tech lead or rejected during code reviews. But I don't think we're going to see eye to eye on that one, and you'll have to learn that lesson the hard way probably (like most of us did heh).. 
I am a vimmer, and proud of it.
yeah but then you don't know what that variable really does (without looking back in the code).. In the ruby example the code was using the common ruby semantic of the question mark suffix on the method name to imply a boolean check.. so `role.admin?` Since we can't do this in PHP, I added "_exists" to the variable name to be similarly clear that the variable is a boolean check and not some other structure that represents the admin role itself etc.. Your example may be "simpler" at face value but it is more difficult to comprehend at a glance when you come across it elsewhere in code. And since we're dealing with magic methods, you won't have any IDE hinting showing you the method signature on mouseover, or allowing you to quickly jump to the method declaration in your codebase to see what it does.
Good for you man :), I appreciate that Vim is a fantastic editor, just not for me.
Yeah, seems like it. Maybe it's because you're running it on Windows, there are a fair few subtle differences, or perhaps just how wampserver set's up the environment. You could, if you felt compelled to, try a different solution to that like easyphp for example.
Rebase, but it usually takes some time to grok it. 
Whiskey Tango Foxtrot
Well, thanks. Post again when the book is available? :)
I don't care if they have mouse overs, a pie chart with more this many options is just horrible. They should use a chart of horizontal lines.
Indeed. Right click, navigate to definition (I think). I believe thats native. You can also install the ctags plugin FTW. 
Well, [GIT history is a bunch of lies.](http://steveko.wordpress.com/2012/02/24/10-things-i-hate-about-git)
You're putting a trailing slash after index.php in your links. Don't. Right: index.php?x=y Wrong: index.php/?x=y
It's for writing code, I can handle looking at a conf file. Just open it up in sublime text!
I've worked with Dreamweaver since it was a Macromedia product and while I have not used it for PHP much. I personally always felt that PHP support in Dreamweaver was a second thought, and it never really worked out and so it was not enhanced and kind of left to wither.
I used to use Homesite in the late 90s as well. Used it to build many sites from 1997-1999.
do do. [hehehe](http://i.imgur.com/wjANVCD.jpg).
I wasn't bragging, just suggesting that I'd prefer to be a "vimmer" than a "vim person" :)
When it starts reading the code and suggesting things that a text editor can't. Sublime has a lot of plugins that can do similar things, but it's not the same. For example, in PHPStorm, I have a keyboard shortcut that will jump to the declaration of anything that my cursor is on. And it doesn't matter if the declaration is in an autoloaded namespace or just included. So if I'm working on some legacy code and I'm not sure exactly what some random "get_info()" function does, I just stick my cursor on it, CTRL-B, and I'm there. Same with Symfony2 projects, it knows how things in Symfony2 work, so it'll auto-suggest namespaces and class names as I type them. On big projects with lots of bundles and even more classes, this is really helpful.
Unfortunately, from what I've heard, Intellij with the plugins isn't the same as the native application for each language. They rework the core software a fair bit to make it nicer for the target language.
I'd be sitting here all day listing the differences between a text editor and an IDE. The main difference is the IDE part - a text editor is just a means to edit a file where an IDE has all the tools in front of you. I'm not anti-editor one bit - but saying something like sublime is an IDE is silly. Sometimes a just need to quickly edit something - that's when I use sublime. When I need to step thru and debug a script - that's IDE time. 
The book is available. :)
Hehe, it is a better name than "Vim person", I didn't think you were.
The correct way is `@param Type... $name`, which is the syntax PHP uses and as such also the syntax phpdoc must follow. Though I doubt any tooling supports it yet.
I didn't read over all your code, but I instantly saw you used: type="/text/css" It's not a path, it should read: type="text/css"
&gt; which is the syntax PHP uses Isn't that still an RFC or has it been ratified? In any case, variadic arguments have long since been supported using `func_get_args`, and the original phpDoc supported using `$var,...` for variadic functions, but per the link I posted, phpDoc2 does not. To work around this, I've decided to use Unicode ellipses since they happen to be allowed in identifiers.
I'm pretty sure Sublime's 'go to anything' feature does that.
Go to anything does it via plain text search, while an IDE does it through understanding the code. Go to anything is alright, but if I have similar classes, it takes work to figure out which one I want. Additionally, it might not always be explicitly obvious which class out of the entire application "new Textbook()" refers to if there are a few scattered among different modules.
Yes that is true, and I guess that is the specific difference between a text editor and IDE - the IDE actually understands the code and structure. In practice, however, I personally have not seen the advantage. The 'lightweightedness' and cleanliness of Sublime outweighs the 2 seconds longer it takes to find a function, for me.
That fixed it. Thanks!
That was a little mistake I made during the troubleshooting. It was not there before. Well spotted anyway. I fixed it.
&gt; If you have a repository method UserRepository::findById(), and you try to look up ID 12345 and it doesn't exist, this is not an error! Simply return null. That could be an error. I prefer to have both possibilities: UserRepository::optionalFindById() // Can return null UserRepository::findById() // throws exception if not found I'd probably use better naming than that, but you get the idea. 
Excellent. Glad to be of service. :)
For an HTML WYSIWYG editor. I'm sure Dreamweaver has its place (esp. now that I see it's still in development -- I thought it was dropped years ago!). However, for an IDE, they're better off with something that isn't primarily focused on WYSIWYG editing. Especially with PHP's current direction: PHP isn't an HTML language anymore. It's its very own back end capable programming language, with the ability to generate HTML pages.
Admittedly, I was unaware it's still in development. Just checked the site. Wow. I thought it died the way of old school CS2. Well, at least it's not in the FrontPage bucket ... yet.
Little known. Admittedly, I've heard of it, but never actually looked at it. Looks interesting. Although, It'll be hard to pull me away from PHPStorm these days. Netbeans was hard to pull away from, until I found PHPStorm... 
&gt; HomeSite Oh, you forgot about TopStyle. Made by the same guy after HomeSite was purchased. I was right there, apart of the community, when all that went down. TopStyle is an amazing HTML / CSS editor. And looks like it's still in development, too: http://topstyle4.com/ 
Little known? Mac only? I forgot about Coda. But I hadn't touched used a Mac for active development for several years (damn work always give me PC laptops. ugh!)
vim users don't call it an IDE. My IDE is vim + shell + vagrant + vcs
Push? Surprised you have pull but not that lol. 
I use buffers and mini buffer explorer. Plus I use a fuzzy file finder (ctrl-p) and NERDTree if things get really hary. All that said, I never open more than 10 files at once, that would be too much to keep track in any editor/IDE. 
&gt;They don't accomplish the same task. How do you figure? Many people use text editors as code editors, and often with feature-parity.
Thank you!
I am a Vim people. I love it, and I recommend that everyone learn how to use it. I tried for a good 6 months to use Vim as an IDE (for PHP development). The experience was "neat," but I don't think I was more productive than I was with Netbeans and a Vim plugin for it. Many things were downright miserable to use. I gave up on using Vim as my IDE. I now use PHPStorm and Visual Studio, both with a Vim plugin. The experience is awesome. I have all the editing features of Vim with all the robust IDE features of actual IDEs. Edit: You can call us Vim people as long as this is our theme song. https://www.youtube.com/watch?v=tV5wmDhzgY8#t=7
Well that isn't entirely true. You can run individual PHP scripts through many IDEs, which is effectively compiling them. Many IDEs also have code recommendations which alter your code. A text editor doesn't stop being a text editor. It's a text editor. Plugins can provide these features, but they are not the text editor.
And this is another reason text editors aren't IDEs. You don't have to do this with an IDE because that's the purpose of the IDE and it already works.
This is a pretty shoddy analysis. A lot of enterprise projects are written in PHP, because they started as smaller PHP projects and have just grown. They're not interesting in discarding their entire code-base and starting from scratch.
IDEs, out of the box, contain all the features people plug into text editors. The text editors often require tedious and specific configurations to play nicely, and there are sometimes conflicts between plugins. I will concede that a text editor + plugins can be similar to an IDE.
Finding 0 matching results for a search is not an error case, because it's an expected outcome when your criteria doesn't match any of the data. Instead, you should be keeping that expectation where it belongs - in the calling context: if (($user = $userRepo-&gt;findById($id)) === null) { throw new UserNotFoundException(); } Throwing an exception *inside* the search method is enforcing higher-level expectations in completely unrelated lower-level code. A very subtle mistake, but a mistake nonetheless.
[PHP @ Firehose Scale](https://www.youtube.com/watch?v=90EkomYUq9Y) @12:00 -- "We process everything through PHP, PHP can totally do Firehose scale processing!" @13:00 -- "Lol, just kidding we're totally using C++ and C to keep up with the data stream" Ugh, lies. He goes on to talk about C code and GPU processing later too. PHP is NOT all they use and PHP can not even come close to processing data at "fire hose" scales. (I was super hopeful for this because I've recently rewritten a piece of PHP code that was doing streaming data processing into GO. PHP: 24 minutes to process 147k records. Go? 24 seconds. :P
It's already all there in the built-in PHP plugin. No need to do it either, only if you add new languages. As a highlight, you can use this same thing to make any color scheme work with any language.
Upvotes for HomeSite! That was my absolute favorite editor when I first started web development in the late 90s. I loved its find and replace functionality. I also remember it made client side image maps a breeze by allowing you to specify an image, draw a region on the image and it would generate the html img tag with correct coords for the image map. I used ctrl+enter to insert the br tag. Wow. You just brought back some memories.
Lol, I did not mean for "vim people" to be derogatory. I have no idea what to call them, vimmers, vimians, vimites? More of lazy "people who use vim" -&gt; "vim people" But if I am to be called out for hating on vim, I will say this is how I picture [vim people/vimmers/vimians/vimites/people who use vim](http://www.blogcdn.com/wow.joystiq.com/media/2013/02/wow-nerd-south-park-580.jpg) Personally I believe the best IDE is the one $you enjoy the most. When $you=$me that IDE is phpstorm :)
Would you consider being a vimian or vimite? We could have [vimites and anti-vimites](https://www.youtube.com/watch?v=ythrdCsOFJU)
I know it wasn't derogatory, I'm not offended at all. I look more like a tall skinny biker than the typical WoW player. ;)
I just implemented sphinx in a project that will contain millions of records. Easy to do and the results are very fast.
Some of the slides can be find here: http://joind.in/event/view/1585
I don't think you have hhvm running in the webserver example. hhvm is actually a web server (well, it includes a web server). You can put it behind nginx or apache using FastCGI http://hhvm.com/blog/1817/fastercgi-with-hhvm or alternatively you can proxy to it. https://github.com/facebook/hhvm/wiki/using-nginx-as-front-server-to-hiphop
__What is Composer?__ Composer is a dependency management tool. Instead of installing dependencies globally (like with PEAR) you can use dependencies on a per-project basis. __What libraries are must have?__ There are _no_ must-have libraries. None at all. The point is that you don't have to reinvent the wheel (or keep rewriting code). Code reuse is the key. And that brings us to you next question: __Where do I look for these libraries?__ The main repository of PHP libraries that use Composer is [Packagist](http://packagist.org). It provides a simple search functionality with keywords. __How do I get started?__ Read [this](http://code.tutsplus.com/tutorials/easy-package-management-with-composer--net-25530). It's a really well written piece by /u/philsturgeon. The main thing of "learning" how to use it is just using it!
It's actually pretty funny. Something doesn't work and he instantly blames the program. I would be surprised if it worked after taking those steps. Besides that, I run HHVM on my server (behind NGINX) and it's a lot faster than PHP 5.5 in my case. I really love it.
Your lts servers are on 5.3 so its hard to jump to 5.5
&gt; whereas other languages (like PHP, Ruby and Python) run in an interpreter. &gt; You also probably know that interpreted languages are inherently slower than languages which produce byte code which is specifically optimized for the virtual machines they run on. &gt; ... JVM Correct me if I'm wrong, but PHP, Ruby, and Python all have JIT compilers which compile the opcodes for their respective VMs. If they didn't have JIT compilers, then the code would all be compiled at once to opcodes for their respective VMs. The abstract between "interpreting" and "running" is that "compiled languages" are compiled to op or byte codes before runtime, while interpreted languages are compiled during. Given a sufficient VM, non-"compiled languages" will be no faster or slower than "compiled languages," if we forget about automatic memory management (garbage collection). I added the "... JVM" part because the impression I get from the opening paragraphs is that the author only knows about the Java VM. There are many many others.
But `findById` isn't a search -- it's a lookup by primary key. I have difficulty imagining a situation where a failure to return an instance by ID would not be an error. Obviously, for real searches by name or title having zero rows returning *might* be an expected result. As I said, I prefer to have both methods (a throwing and non-throwing) in an API. The .NET framework does this with `Parse` and `TryParse` and well in many places in Linq (e.g `First` and `FirstOrDefault`). Then the programmer intent becomes very clear; some operations are expected to fail or be optional or they are excepted to succeed and return a result. 
You are correct. And Node.js uses V8, which is a JIT compiler for JavaScript.
They've added syntax; they *changed* very little. The goal is that all PHP code runs on HHVM without modification. 
&gt; Correct me if I'm wrong, but PHP, Ruby, and Python all have JIT compilers which compile the opcodes for their respective VMs. That's not what a JIT does. A JIT takes the opcodes for a specific VM and turns them into machine code at runtime. In Java, you run a compiler to turn source code into opcodes which you can then run on a JVM. A JVM can interpret those byte codes (run them) or it can compile them into machine code and run them (or some combination of both). PHP compiles source code into opcodes at runtime and then interprets those bytes codes. HHVM takes it a step further an adds a JIT to machine code. 
Yes, ASP.net started out with a higher risk profile than legacy ASP and then gradually became lower as uptake grew. (But not as risky as this--it was a reasonably safe bet from the get go due to a multitude of factors.) Facebook is not in the business of selling us development tools or web servers, so I am gonna let this bake a while longer before I get port-happy with it. 
Sure but the OP is talking about if an "error was to occur within a PHP function". Sounds like the whole purpose of an Exception.
They need an excuse to go fellate themselves on the elegance of their clojure-based, highly scalable, twitter clone that nobody of any import gives half a fuck about.
PHP and Hack are interoperable, they can run and work together. They will never change old PHP syntax and will continue to add new PHP features. Hack isn't its own language.
Thanks for the link. There is also the [Dependency Management](http://www.phptherightway.com/#dependency_management) section on PHP The Right Way, and a list of [component sources](http://www.phptherightway.com/#components) all of which are of course available on Packagist. :)
&gt; A JIT takes the opcodes for a specific VM and turns them into machine code at runtime. Ah, yes. Thanks for the reminder. &gt; PHP compiles source code into opcodes at runtime and then interprets those bytes codes. HHVM takes it a step further an adds a JIT to machine code. "Interpret" here meaning it's compiled to byte code, rather than JITd?
Interpret means runs. So the PHP interpreter look at each byte code in turn and performs the operation. With a JIT, byte code would be turned into machine code and then executed directly by your CPU. 
I would contend that PHP is the nail gun from Harbor Freight that is both cost effective and sufficient--but we can just agree to disagree on that one if you like.
If they really branded this and drove it as a product, they could position it as the open source alternative to C# given the right ecosystem.
Password changes to Gmail IMAP logins are probably slightly delayed and your mail client had a chance to fetch this message before that took place.
A very interesting idea indeed. However discussing "best practices" can be dangerous, as there isn't always a definitive answer so you could end up in a situation, where nothing is going anywhere. It would be very fun and interesting though and certainly valuable. I'm sure people would come up with ridiculous abd very entertaining ideas for features ;) where do I sign up? 
&gt; it seems much of the dynamic has disappeared from hhvm's implementation ... it sure is nice to be able to put a hint on everything, but it sure isn't dynamic either ... I don't think many features of missing from hhvm except variable variables -- which are already generally considered a poor practice. And even then the reason for not including them isn't the JIT but rather the static typing. PHP is already much less dynamic than Python or Ruby and really has more in common with Java in it's execution model than any other language. Classes, interfaces, and traits are all statically defined at compile-time, for example. &gt; We simply don't deem it necessary for the vast majority of PHP's users. I agree fully. 
It's not an all or nothing. The faults should be fixed. 
&gt; The repository's job in this scenario is only to perform a search and return the results. I disagree. This isn't a search. The repository's job is return the object for the ID I specified. If it cannot do that, it's an error. You can define the job of that repository function anyway you want but my definition is no less valid than yours. If there is a function called 'findByIdIfExists` even better -- then the intention of whether or not an object should absolutely be returned is clear. 
&gt; Think about why static typing is really required, or beneficial ... in a JIT ... aaaand we're full circle Static typing is not necessary for a JIT. Some of the most famous JIT compilers (JavaScript, Lua) are dynamically typed. Even HHVM, the static typing is really for early error detection. Static typing does help with JIT compilation but even in HHVM the static typing is totally optional. &gt; but if the engine cannot infer the types by itself then you're rewinding the stack and executing interpreted code anyway, after having tried to compile it to machine code, making for an overall slow down and big wtf ... The actual statistics for JIT compiled dynamic languages shows massive performance improvements (otherwise you wouldn't be running JIT javascript right now while replying to this comment). Your "what-if" has already been mostly disproven. Determining whether or not the parameters for a machine compiled function match is a pretty quick test. And it probably wouldn't even bother compiling a method unless it's been called enough times with the same types to warrant that optimization. 
A lot of new PHP implementations cropping up lately :)
You rather have globaly scoped functions than true OO like Java, Ruby, Python, C#, and pretty much every other modern language? The global function mentality is really one of the weak points of PHP. The truly bad amateur PHP code is usually made up of globally scoped functions. Even though almost everyone agrees that it is bad it is exactly how the core of the language is set up.
Buy why? 
Quercus is not a bytecode compiler, it translates PHP into Java.
Maybe these steps will help. Do you know how to do any of these? 1. Make an HTML form 2. Add `&lt;input type="checkbox" name="" value=""&gt;` elements 3. Submit the form to a PHP script 4. Use PHP to query a database with the submitted information 5. Display the results
We'll just have to agree to disagree I guess. For what it's worth, Doctrine returns `null`: https://github.com/doctrine/doctrine2/blob/master/lib/Doctrine/ORM/EntityRepository.php#L150 ...and it uses the same definition you are, technically speaking.
With Wordpress I've been using the WP_List_table class to handle that. Sortable and selectable and oh so simple. It wouldn't be difficult to modify that to work WP-less or to even take inspiration and go from scratch.
So that's it? You don't actually have an explanation of why ST isn't an IDE but PHPStorm is? 
When you retrieve items from the database you can have them sorted for you. You could use a `&lt;select&gt;` on the form to indicate how you want it sorted. For deleting items you could add a checkbox next to the item. &lt;div&gt;&lt;input type="checkbox" name="itemsToDel[]" value="0"&gt; ItemA&lt;/div&gt; &lt;div&gt;&lt;input type="checkbox" name="itemsToDel[]" value="1"&gt; ItemB&lt;/div&gt; Then when you submit the form you could do something like this: if (isset($_POST['itemsToDel'])) { // delete item from x where id = '$_POST['itemsToDel'][0]' }
It tickles me a bit to know someone is going around doing that.
Can you expand on the challenges that drove you to this conclusion? I use vim, and I am trying to determine if my job isn't hard enough to necessitate a more sophisticated ide or if it's just personal preference/habit.
No, I don't have time in the day to explain it to somebody who is obviously incapable of telling the difference. 
Why don't they just put aliases in so that legacy code still works?
What language has been the highest rated, most dependable for 30 years running? the Hack F-Series
I seem to recall a well known company once attempted the "embrace, extend, exterminate" strategy with a certain browser - look how well that turned out for them. The only people who seem to make the argument about function names are the people who: * Won't ever use PHP in the first place * Don't know PHP so they say all the things their friends say about PHP
I've coded a shit ton in PHP and I've exposed myself to other languages and I will make that argument.
For a long time I was "against" the idea of an IDE. I liked understanding the syntax of the languages I use, I viewed it as a challenge to be proficient enough with the available ABIs without assistance from Google or an IDE, and I thought using an IDE would be too slow and bulky for me to really get things done. For whatever reason, I tried Netbeans and was surprised with how helpful it was. I could still work how I wanted, and the IDE just made things easier. So, I highly recommend using an IDE. It's worth it, no matter how easy or difficult your job is. As for Vim-as-an-IDE, I can try to fill in the details, but this was a few years ago. I can't even remember the names of the plugins I used. So, when I started, I had to research the different plugins available to Vim for installing plugins. Various other plugins has support for some of these, but not necessarily all of them. Sometimes, even when supported, plugins still didn't work, so I had to jump into them and figure out wtf was going on. It just took a long time to even get started because of all that. Finally rolling, I had a way to view a tree of files, I had a buffer manager (basically to manage "tabs" as you would in an IDE), I had PHP code completion, and a few other IDE things. 1. The tree was fine, but I found that it was severely less efficient than using a mouse to simply select the file I wanted, and to do something with it. With this tree plugin, I was limited to opening files - no refactoring options, class structure view, etc. I could also create files and directories, which was simple enough. Tab completion still worked. 2. The buffer usage and management was vastly inferior than how IDEs handle it. First off, a buffer is not a page, so you couldn't split buffers and see multiple files at once. I think I found a way to do this, but it was crazy. I don't remember. Second, I know Vim is all about the keyboard, but there were too many commands to input to open buffers and manage pages. With a mouse, it's a couple clicks. 3. The PHP code completion was not good. It basically matched any possible string that is a class, method, or variable the plugin had seen before in a file you ha(d|ve) open. No real hinting, it was a pain to use, and sometimes it was really slow. That's really all I can remember. To me, messing around with plugins to get an IDE-like experience is not the same thing as using an IDE. It's the difference between seamless and "yea sometimes my car's tires pop, but only if you back up 10 feet."
If it really bothers you *that much* you should use another language - which is what hack will be if they start changing too much. Only a fool can't see that part of PHP's continuing popularity is due to the fact that there's so much software available that runs out of the box.
Well I will say this. Hack is not PHP. While PHP will work with Hack, Hack can't work on PHP. Everything is changed in Hack. It is PHP compatible. But code written in Hack will not work on any PHP platform. We can sit down and cheer, but at the end of the day this is just a new language. 
Uh. Yes it is. How do you think you're supposed to make any progress without having a goal to work towards? Heck, how do you even build *anything* without defining what you're building is? If you're going to make something which does everything, you're going to end up with something that does nothing at all. Define what it is you're trying to build, then concentrate on doing that thing well.
I'm starting to lean towards ruby. There's a learning curve but it is so much cleaner.
&gt; Dreamweaver? Really DW? People still use that? And for PHP no less?! Yes. I'd be more concerned about the people using text editors to program. There is no error checking, no sense of actual workflow, not even FTP? How people work like that boggles my mind. &gt; If a PHP Developer told me they used DW during an interview, I would immediately toss out that resume. That's like refusing to consider a candidate for an IT supervisor because they use Windows. It doesn't matter what they use at home, or Previous Company ABC, what matters is they knowledge or willing to learn and work in a different environment. It's not like a good programmer is stuck with Dreamweaver. I ask candidates if they are familiar with the programs we use. Do they know PHPStorm? Do you know about the CakePHP framework? Did they ever use GitHub? What about their portfolio? Who cares if they use Dreamweaver if what they've built has been extremely efficient and well-coded? I hope you aren't on any interview committee, because with that attitude, your company would lose a lot of talent if you're knocking candidates out on such petty reasons.
I wouldnt call it a new language, as compared to something totally new like mozillas rust. Sure its its own thing, but not a new language per se. Its kind of s hybrid, maybe you could even call it PHP.next or something. I truly think that hack is a great thing for PHP and it really has no/very small learning curve if you know PHP. Im convinced that this is a very big thing for the entire community, and because Hack is a separate project it can evolve faster. I hope PHP will take ideas implemented in hack and add some features, similar like JS have done with CoffeeScript. Its going to be a intresting year for PHP, im very curious how things will look in 2015.
So why didn't they integrate [XHP](https://www.facebook.com/notes/facebook-engineering/xhp-a-new-way-to-write-php/294003943919) into this? **Edit:** Oh... [maybe they did](http://docs.hhvm.com/manual/en/hack.xhp.php). Although it's not totally clear if it's an extension or not.
Also, you say you want to "reach edge cases and difficult problems" - you'll probably only reach those if it's a currently used app where people try and do real things in it and suddenly find "wait, there's a problem here ...". If it's just an educational code base, I doubt you'd hit many of those. 
&gt; I really miss composer Can't PHP and Hack coexist? (So you can use a package from composer and call it from hack?)
what?? no..why?!? C# is primarily for desktop apps. PHP and Hack specifically target web application development. They can't and won't compete with C#, at least not on the desktop front, perhaps competing with ASP.NET MVC but that statement still doesn't make any sense. What do you mean "an open source alternative"? 
Hack is a new language in the same way that C++, Typescript or LESS are new languages. Also, CoffeeScript is incapable of adding anything "new". It has to be transpiled back to JS. Hack runs on HHVM which Facebook also has control over, so they can add new features to support it.
&gt; Static typing is not necessary for a JIT. Indeed, but it is beneficial, and optimal for the process of actually compiling just in time.It is syntactially optinal, but it is not optional; before code can be compiled just in time types must be inferred. &gt; Your "what-if" has already been mostly disproven. I'm not really sure that it has, we're talking about PHP now, not java or javascript, or ruby or python or lua, but PHP: In actual fact HHVM does not show magical machine code performance, HHVM has an extremely slow startup, that aside, because it's unimportant - but a fact - the kind of code we execute on the web - connecting to databases, reading network streams - is not the kind of thing that HHVM shows an improvement in, when my websites and services are made entirely of serving fibonacci sequences, HHVM becomes a candidate. It's also very immature in comparison to, for example, the JVM implementation, such that, the kinds of things that HHVM should show a considerable improvement for over PHP, it does not. Maybe that will change, but today, HHVM and the JVM are not nearly on a par.
I use the full IDEA IDE for PHP. I trialed PHPStorm first then trialed IDEA with the PHP plugin and found the two to be very similar. The parts that differ mostly revolve around configuring your project, and not hiding all the Java centric stuff. I have options that make no sense for a PHP-only project like choosing compiler output paths for example. It's probably not as simple as just buying PHPStorm, but I needed some of the multi-language capabilities and don't feel like I get a worse experience in PHP projects for buying IDEA.
I'm just providing the OP with some tools to make a decision. The advise wrt the original question really depends on further details about whst the OP is doing. 
Exactly. A comparison is C and C++ - C++ is a superset of C, and most C code should compile and work just fine with C++. However, C++ is a new language so although porting your C code to it is easy, porting back requires stripping any of the new features you used. Same with Hack. Although you now also have the problem where Hack is a very young language backed solely by Facebook, a relatively young company. If Facebook drops Hack in two years and goes a different direction, you're SOL if you wrote any Hack code.
IDE means "Integrated Development Environment", which by definition implies that it should have a deep understanding of the language including scope, syntax and workflow. Text editors can be extended to help with some of those features, but not in a fluid, complete solution. They also lack the ability to intelligently map methods and parameters for autocomplete and type hinting, or for refactoring variable or class names. 
okay, its high time... create a spec for the language.. Every one in the world is creating new implementations :-) 
Terrible article - wow.
Hi Shailpatel, I am interested, can you share it ? 
It says other build systems are bogged down by XML, but then chooses YAML for its configuration. Right.
php is waaaaaay better than (ruby or python, (haven't tried node, so cant tell about that)) . 
I guess this is what you get when Zend PHP "doesn't deliver". People are creating alternatives and workarounds - first Facebook with HHVM, now this.
Actually there is a way of extending the class function list programatically, however it is not particularly pretty. You would do so with Mixins. There is no native PHP functions to add mixins however I have cobbled it together using traits and a base Mixin class. I've taken out the classes from one of my main projects and put them in a [simple git repo](https://github.com/buggedcom/Mixins) with a very quick demo script.
Can't you make use of php comments instead? $sql = 'SELECT *'; $sql .= ' FROM table'; //$sql .= ' WHERE x=y'; $pdo-&gt;query($sql); 
Yeah these ones have been around for years. Swapping out the Zend engine for something else isn't a new idea
r/phphelp and frameworks like r/laravel r/symfony etc.
I have felt like Zend is too focused on the Zend Framework instead of making quality tools like they used too.
Thank you! Do you also know some outside Reddit?
Outside Reddit? Which subreddit is that?
Hey, as long as you salt the password in one function, MD5 it, pepper it in a different function and SHA1 it, MD5 the whole thing three times in a function called "cleanup()", and then MD5 it just before you store it in the database, it will be perfectly secure. /s
This will comment out everything after the hash though right? Or does it actually honor line breaks?
Well thats the point. I'm not looking for any subreddit, but for entirely different forum ;)
I have found with PHP that the best resource is their website, the search functionality can usually find what you're trying to do; the descriptions of the functions and methods of doing what you're doing are usually pretty good; there's a forum-type thing underneath that other people have added to, so if you don't get what the site is telling you, they will.
php.net isn't a forum, but definitely the best source for PHP info. Aside from that I'd recommend stackoverflow.com, and phpfreaks.com was good back in the day.
maybe i'm a noob but looking at the examples in that how is this any different from standard PHP i use daily? only thing i seen was explicit variable types.
How many sites have you made in ruby? You really think the best way to do things is to have thousands of global functions grouped together by whatever they have before the first underscore. Except when the guy who wrote the function decided he didn't want to use underscores. Or maybe he didn't want to prefix it with anything. Its not like it matters.
Thank you, maybe it could help ;)
Don't forget to trim() the pw ! those nasty whitespaces at the start of pws, so bad! 
I once took over a system that was implementing it's own "hashing" algorithm by substr'ing a Base encoded string.
MD5 is too resource intensive. Use MD2.
The method is bindParam, if you are using PDO.
https://twitter.com/search?q=%23php
Such ^wow such ^^^bullshit
All you guys are aware that probably these algos were invented by someone experimenting with stuff, like these people? Maybe, by trying to roll their own, they invent the next big hashing algo. **So roll your own, if you know what you're doing!** - not many of us fall under this category though.
You're probably not reading this now, but I just got a great idea how you could implement Hack ini PHPish way: &lt;html&gt; &lt;body&gt; &lt;?php echo "foo"; function bar() { $a = 10; &lt;?hack int $b = 10; ?&gt; return $a + $b; }; ?&gt; &lt;/body&gt; &lt;/html&gt; 
I suggest you thread carefully and get written consent from the people that originally wrote the emails before putting anything up, unless you want to risk getting sued for libel. 
http://kellywarnerlaw.com/netherlands-defamation-laws/
Talking about [this one](http://www.reddit.com/r/programming/comments/1yrnbo/salted_password_hashing_doing_it_right/) posted in /r/programming?
Or you could stop being an asshole here and code however you think best, and not complain how others do. Use ZENDF if you want that full OOP stack. Why bitch about something that has no importance if you know what you are doing?
try this: bind_param('placeHolder', $x, PDO::PARAM_STR); EDIT: As nonethewiser mentioned you can't use ? like that. In my example use :placeHolder. It essentially works the same. 
Head over to [this thread on /r/netsec](http://www.reddit.com/r/netsec/comments/1yw0jf/secure_salted_password_hashing_how_to_do_it/) if you want to know how to implement secure password storage without PHP 5.5.
All sorts of code analysis and refactoring magic, hinting when you're making subtle errors, and increasing your productivity and accuracy. Some will even inspect your code and see patterns in your code that you've duplicated across many files, grade which code chunks are referenced lots, and then recommend how to replace the duplicated code. I could blather for a long time but no one's gonna care. Just try a serious IDE for a week and you'll have your answer. Go and get an evaluation copy of PHPStorm which works for a month and is free, if you want to know.
I thought PHPass was pretty standard for doing this. Am I wrong?
I don't think you should compromise like that, use ROT13, twice to be sure.
That one is quite intelligent by the standards set in this other thread I'm referring to, it was somewhere on G+ though, not reddit. I stumbled upon it via Twitter but can't find it in my history now.
An open source C-style strongly typed modern language that has a high adoption rate? You do realize that the vast majority of ASP.NET/MVC apps run C# in the wild, right? And that ASP.NET/MVC are frameworks, not languages, that run within the C# runtime? It would be more like Hack + &lt;insert MVC framework here&gt; competing with C# and ASP.NET
Yes. I belive PHPass is probably still the best way to do this - the library is mature and well tested. I haven't really looked into the new `password_hash` function so I can't really say whether or not it is "production ready" hardened crypto or not.
I still can't fathom why people would use a text editor like Sublime over something much more useful like Netbeans or PHPStorm whenever possible. Some of my coworkers use Sublime exclusively, but it's painful to watch them work so slowly while they're thinking they're fast just because the editor responds snappy. Sure it's 20 seconds faster to start up than an IDE, but holy shit when I watch them make common errors over and over than a real IDE would catch, it's definitely not any faster. Just give other things a chance for a few days and see for yourself, folks. Don't stick to something blindly like a fool. Or don't - I don't care but you're the one losing out.
Wouldn't have said that: &gt; But I don’t have access to PHP 5.5! &gt; Ah, that is a problem, isn’t it? PHP 5.5′s adoption rate is fairly low right now. But you’re in luck: Anthony Ferrara has backported the native password library for earlier versions of PHP. You can check out his work on GitHub. The library requires PHP 5.3.7 and later, which is well-distributed.
You've got to be careful when an individual suggests best practices for something.
If you don't you can use this: $hash = crypt('password', '$6$rounds=5000$usesomesillystringforsalt$'); This'll do 5000 rounds of sha-512. Which should be safe enough.
Ah. &gt; That one is quite intelligent by the standards set in this other thread I'm referring to It's what makes the post I linked to so insidious. On it's face it feels intelligent, which is why it's so dangerous. You need to understand best practices to realize that article makes really bad suggestions.
An easy way you can tell that you are capable of rolling your own cryptographic hashing algorithm is to count the number of publications you have in the major cryptography journals. It should be &gt; 0.
Because an IDE will tell you issues beyond what's on your screen. That's not even remotely the only reason, but it's the most important reason. Change a PHP class name in an editor. Then change it in an IDE that catches all of the references. Why would anyone rationally choose something that doesn't do helpful things like that whenever possible? It doesn't make any sense, unless memory or processing power or some other thing is a factor. 
If you mean the actual article, he does have a big red warning with: &gt; IMPORTANT WARNING: If you are thinking of writing your own password hashing code, please don't!. It's too easy to screw up. No, that cryptography course you took in university doesn't make you exempt from this warning. This applies to everyone: DO NOT WRITE YOUR OWN CRYPTO! The problem of storing passwords has already been solved. Use either use either phpass or the source code given on this page. But maybe he added that later.
That's not the problem, that he even remotely suggests fast crypto algorithms like SHA256 means he's giving bad advice. The article, as I commented, could be shortened to a single sentence: Use bcrypt with the highest tolerable work factor until the security community agrees on something better.
I see. That's still light years ahead of recommending people to roll your own password hashing with MD5, IMHO.
The problem with md5() is that it was exploited using collisions IIRC. So in your case, that wouldn't mean anything, no matter how many times you hash it and add salts. The person who has access to your hashes, or is trying to get in, doesn't care what the real password is, just that he is able to duplicate it using a different string.
Very true, and I get the sentiment, but with all the security breaches in recent memory along with NSA revelations, "well it's better than it used to be" is an unacceptable position when it comes to password security. We, as devs, do have a responsibility to protect the users that trust us with their data, and letting articles like this slide on a "well you tried and hey it's not as bad as it used to be" is doing *them* a disservice. (I really don't mean to be ragging on you, I'm just using you as a soapbox right now)
PHPass is fine, but it's mostly only needed if you need to make your code work on older versions of PHP. You can do the same thing using the built-in crypt() function (with just a few lines of code) if you have PHP 4 or 5. Or using password_hash()/password_verify() if you have PHP 5.5+ (which does the same thing as crypt(), but generates the salt for you to make things simpler). PHPass is mostly obsolete, except for scripts that need to work on fairly old versions of PHP. If you have a modern version of PHP, all PHPass really does is generate a salt string and then call crypt(). Edit: [Here](http://www.reddit.com/r/PHP/comments/spvba/secure_php_authentication_using_bcrypt_is_a_must/c4g2yzs)'s a simple example of how to use crypt() to securely hash/verify passwords in the same way PHPass and password_hash()/password_verify() do. There isn't much to it, it's simple to do and you don't really need a special library.
Have a look here: [PhpStorm code duplicates](http://blog.jetbrains.com/webide/2011/09/search-for-code-duplicates-in-phpstorm/)
So what if you replace md5 with SHA256 and bcrypt? I (honestly) never understood why "rolling your own" is so bad when open source pre-rolled password hashing ends up boiling down to bcrypt($password . $salt)
For those who don't have 5.5 yet you can use the library below which will give you the same functionality and then remove once you can upgrade. https://github.com/Antnee/phpPasswordHashingLib
Looking at that library, it too really just uses crypt() to do the password hashing, which you can easily do yourself (see the link at the end of my comment). That library adds features like letting you change the hashing algorithm, a debug mode to report how long it takes to run, report information about the hash algorithm, etc etc. Most people don't really need any of that if they simply want to securely hash and verify passwords. 
Maybe a stupid question but: Created by a Facebook employee and faster than HHVM, so why doesn't Facebook use it?
not by facebook employee, by a facebook-sponsored project. Read http://morepypy.blogspot.com/2012/07/hello-everyone.html for more details.
Yeah, I was looking at that, and the company I work for is about to get licenses for it -- I figured after we get the licenses I'd try it. If the autocomplete works as advertised, I'll end up buying a personal license.
Basically you'll need to store your session data in a centralized repository of some variety that all your web servers can access. Popular options are Memcached, Redis, a shared directory among all your web servers or in a database. If you aren't already using a driver based Session manager that abstracts and allows you to easily swap from one type of repository to another, now is probably a good time. (I'm assuming you've already got session IDs in cookies for your clients and aren't having any issues there)
Since when is C# primarily for desktop apps? It has an absolutely massive community using it for servers and web services (via ASP.NET and similar frameworks) within Windows environments. Just because you think Windows is a terrible server OS doesn't make it so.
Just a tip to make it easier for you. You should replace the Domain of your links with a php-variable, allowing you to change it when going from development to live. It's a P.i.t.a. to find all the links you hardcoded later on. Depending on the size of the project, I like to use a $pageroot variable in a config-file or read it out of the $_SERVER variable. (Just remember to have a convention about "/" when connecting the strings again. "domain.com/" . "/folder/page" won't work out very well) 
Even JavaScript does it the right OO way. There is no positive points in having thousands of global functions grouped by underscore prefixes and in some cases nothing at all. Your grasping at straws. Calling me an asshole. Saying its not important. Pretty much saying I shouldn't care about the structure because its none of my business. At one point I was like you. But as I've grown as a programmer that I'm not married to a language and I don't need to lie to myself that the languages I use are flawless.
You are right, and let me start by saying I was incorrect. I was completely unaware DW is still in active development. The last time I used it was back during Macromedia days. I though Adobe abandoned DW after CS2 or so. Apparently I was mistaken. I had DW chalked up to the way of FrontPage. Looks like, unlike FrontPage, it's still actively moving foward. Oops. Sorry about that.
Oh my god. I've joked about this several times, and it's actually happening. I really really want this to go well so there's a feasible migration path off PHP. Edit: btw, aside from the obvious pypy, there's [topaz]( http://docs.topazruby.com/ ), so we know this sort of thing is feasible.
The benefit of using the library, is that when you upgarde to 5.5 your code will be using the 5.5 version of hashing and all you have to do is stop including the phpPasswordHashing lib files. Then, once you're on 5.5, you can mostly rely on upgrades in PHP to keep your hashing secure as well as backwards compatible, or at least provide methods to ensure backwards compatibility.
You can store your sessions in Memcache or Redis: - [Memache](http://www.php.net/manual/en/memcached.sessions.php) - [Redis](https://github.com/nicolasff/phpredis)
Ugh - I read your comment wrong, I missed the "not" use md5/sha1. I read it in reverse and that's why the rest of your post didn't make sense to me, sorry about that.
It's all good. You learned something new and got something out of it in the end.
Nice! Seems to work like a charm.
Because it's "we're faster with fewer features", which is the common case. Lots of people can make faster implementations of projects by cutting (or, ahem, not including *yet*) features.
yes, it should be an almost drop-in replacement. Some of the php.ini settings make zero sense on hippyvm and there will be new directives too (it'll also mean it's installed in a different place)
I think you forgot an MD5 in there. Remember, hackers can only brute-force 5 MD5 levels deep.
You may also find this recent discussion on HN about a PHP compiler for JVM interesting: https://news.ycombinator.com/item?id=7454427
I have the full IDEA and it's got everything that PHPStorm has. The drawback is you have to initially set up your PHP project like a java project, but that's a couple extra clicks initially when starting a project (I can't remember, it wasn't a big deal). Also the IDEA PHP module is updated independently, but so far as I've known, it's released at the same time as updates to PHPStorm. Whenever a PHPStorm update is announced, a corresponding update shows up in my IDE at the same time. Quite worth it (IMO) for $100 more if you dabble in other languages like Python and Java (Android especially) and whatever else floats your boat.
Nahh nahh, I'm not the person you replied to. I think they're saying to use MD5. I'm asking if (hypothetically) I was using bcrypt and/or SHA instead, what's the difference between rolling your own, or using an existence library. Aren't you essentially doing the same thing?
&gt; no sorry, it's not the case. Insofar as that's supposed to be reassuring, I'm fairly certain I won't be able to successfully run too many PHP Golf submissions with it. See the ternary bugs (#60169, #49269). Now that's not to say that all PHP tricks are important. We're talking about features (good and bad at a user's discretion). Without qualification there's a blanket statement "we included all the features" and I have to call BS. There has always been opportunity to remove silly/yucky bits from PHP to speed up execution, but very few have been experimenting, as if backward compatibility is a sacred calf.
If you can use bcrypt or scrypt you can safely re-implement the equivalent of PHP 5.5's password API (or the 5.3 compatibility API). There's just no reason to. Usually this advice is referring to cooking up your own mix of hashing algorithms and salting.
why don't you try? we try to be bug-to-bug compatible.
Your fantastic PHP code is going to be full of classes. No one is going to call a program littered with global functions good PHP. But that's how the built in functions are. You can see they clearly are trying to modernize things with things like the standard public library. All the new mysql PDO stuff is object based. When I first started PHP I used functions littered all over the global scope. I guess you love this style of programming so much you insult anyone who doesn't share your love of global functions prefixed with underscores. I get it. You really love PHP. Its your language. Your a pro at it. You love it. You love it so much you interpret criticism of the syntax as a personal attack. You could never find fault with your beloved PHP. As far as you are concerned its pretty much perfect.
RHEL 6.5 still has PHP 5.3.3, but [it's ok as well](https://github.com/ircmaxell/password_compat): &gt; This library requires PHP &gt;= 5.3.7 OR a version that has the $2y fix backported into it (such as RedHat provides). Note that Debian's 5.3.3 version is NOT supported.
I only insult people that have a view so narrow they think they are holly. I really am fantastic in PHP. And python. And c/c++. And Java. And Pascal/Delphi. I don't love one more than the other, I just see them as tools. There's a breed of developers however, you see them everywhere. Stackoverflow is infected with them. The developers that barely touched a tool and they think they are God's gift and can speak for that tool, or more important, for the people that use that tool. It's people like you. I see you didn't come back on your "Javascript has a fantastic OO model". It's because people like you speak without substantiating their statements. You throw something out there, and if nobody says anything it validates your ego, and if someone says something about it, well, avoid it. Did you finish college yet, or are you still in that "I know everything" phase?
You should never directly hash the output of a hash function, or you will be losing entropy. Proper iterative hashing requires that you feed entropy back in with each iteration. In layman's terms... // Bad. $hashed = md5(md5($password)); // Much better. $hashed = md5($password . md5($password));
I must say I chuckled a little at the fact that a python based interpreter doesn't have working web-server integration... Imagine that.
I made over $200,000 last year. Im not in college and I dont care if you are. Its irrelivant. You can prototype even the built in objects in JavaScript. Its very flexable. But I don't want to talk about JavaScript. Between your personal attacks, stereotyping, and name calling I haven't heard anything defending globally scoped functions grouped together by prefixes and an uderscore except when the programmer didn't want to. Explain why this is a far superior than a true OO model used by almost all other languages.
It's quite misleading to call it "python based". It is built from rpython, who's syntax is a subset of the python syntax, but it is not based on the CPython implementation or its libraries. Also, probably the most mainstream route for external webserver integration, say a FCGI thread-pooling daemon, isn't exactly a walk in the park for a new language to implement from the get go. HHVM has had the same problem.
It's sort of like, you have a set a lock for your house. Do you want to make your own lock, with mediocre experience? or get a lock from a manufacturer who is experienced and it has been tested extensively in lots of other houses? There's nothing to say that your security is not better, and honestly, go ahead and test it out and play with your own encryptions, but you better be damn confident that it's really secure when you post it in production.
The second to last paragraph is technically part of the article.
I like how he says using weak hashing is what allows a hacker to brute force their way in, making the implication that a stronger encryption would prevent this. Doesn't matter what hashing, you use, or none at all, you're checking the password against the hashing algorithm anyway. Brute force will always work. Unless of course, he's talking about someone seeing your encrypted password and trying a rainbow table type of situation. In that case, I'm guessing they have access to your DB, and access to basically all information stored there. So, why do they care about cracking someone's password if they have all the info?
&gt; I made over $200,000 last year. Lots of crappy developers make tons of money. I make a lot of money too, you don't see me advertising it. &gt; You can prototype even the built in objects in JavaScript. Horrible horrible things came out of this. You see this on A LOT of websites these days. Kids like you think they know what they are doing, they end up fucking shit up and inventing hacks over hacks just to support their initial mistakes from breaking their "framework" even more than it is. &gt; Between your personal attacks, stereotyping, and name calling I haven't heard anything defending globally scoped functions grouped together by prefixes and an uderscore except when the programmer didn't want to. I don't remember when saying i am pro or against it. I do remember attacking your attacks. It's because you don't know what you are talking about. But since you are so smart, try profiling a pure OO language against a "globally scoped functions grouped together by prefixes and an uderscore" language, and see which one performs better. For fairness, keep it to the likes of PHP/Python/Ruby. It wouldn't be fair painting it against a compiled language like c. Also, you didn't make $200k last year. That's a kid trying to paint a picture of superiority. You were doing 80k at 20 but somehow you were also doing drugs? Seriously? Plus your general posts all over the drug related posts/subs of reddit make me think you are full of shit.
sorry?
What about PHP extensions? Will the existing extensions work with HippyVM? 
From the method names, he appears to be using mysqli instead of PDO, so the `$stmnt-&gt;bind_param('s', $x);` generally would be correct for mysqli.
if you mean the C code written using Zend API, then no.
I don't know about you guys, but for the PHP Environment I am just so super hyped about apigility and how fast it's progressing. It's just so very useful and you have a running API so fast...
- Either employ session sharing between servers using a custom session handler with a database/memcached/redis backend (memcached is probably the easiest - it's baked into the PECL extension). - Setup your load balancer as "sticky", with Nginx this can be done with the following when using ngx_http_upstream_module as your load balancer frontend: http://nginx.org/en/docs/http/ngx_http_upstream_module.html#sticky 
Step one: uninstall PHP. :P
As an `Accept` purist, how do I specify the API version?
Hi I've created a new branch on the library with a solution to this problem. [an example using a simple filter](https://github.com/thephpleague/csv/blob/locale/examples/stream.php) . Following the same interface I've added a filter directly in the library to tackle the *LC_CTYPE* issue. Tell me what you think about the solution I found ?
Netbeans was a problem back in the 6.x days but it's fine now. I have an 8Gb core2 quad junker at work and it's been fine running Netbeans since 7.0 back a couple years ago. That would have been a valid gripe a few years ago, but it's probably no longer an issue. Phpstorm is even more nimble at this time than Netbeans too, the fuzzy search is orders of magnitude more accurate and meaningful that ST. It might be trivial for you to change a class name by a simple search, but in my case at this very moment I have hundreds of thousands of lines of code to go through searching for 'customer' used in hundreds of different contexts. Search and replace can find instances of what *might* be the right class, but a proper reference search does it much better and faster and more accurately. It's pretty silly for to discount the usefulness of something they haven't tried (not YOU personally, just people in general), I see it all the time around me. "Oh I don't need that" and cling to something weak like Sublime. Edit: I'll add that I don't know you, so I don't assume any full-featured IDE is right for you, but I'm pretty sure your opinion is based on lack of up-to-date information. 
It seems there's no comment of that kind yet so let me be the first: congratulations!! It doesn't look like production ready but it certainly is interesting to follow. From your blog: &gt; The pre-release is open source, but we plan to sell a commercial version in the future. We will have a model where the core language as well as core JIT technologies remain Open Source, **while some extension modules as well as the web server integration are proprietary**. I'm pasting this here because I think it's important to keep in mind and I've not seen any mention on the website.
Yeah 85k from my job and over 150k from my android app. I was living crazy. Regardless this whole thing was about true OO. Now you say the PHP needs the global function soup because its faster. Out of the languages you listed PHP is by far the slowest in all benchmarks. Google it. I'd be really surprised if you could find anything that proved otherwise. 
I would definitely look into more advanced topics, but I feel I would also need to start from the beginning so it is suitable for all types of people. I am not worried about my voice, I just wanted to know what others thought about it. If it is not liked, finding someone to do the voice overs is an option. Thanks for suggesting that. 
&gt; I love Laravel to death, but they're NOT F*CKING FACADES!!!! Okay, we got it. It doesn't need to be brought up every time something regarding Laravel is talked about. pmjones beats that dead horse enough, the community doesn't need to join him with their own sticks.
It's my workplace. We are in the process of upgrading to the latest and greatest RHEL, which has 5.3.3 (with some patches).
If I had to guess, they wanted all of the types used in the PHP documentation. On its own it isn't even that dumb. Once you have subtyping in a language it's useful to have a universal supertype, if only because it makes the metatheory simpler. What's dumb is that Hack doesn't seem to offer anything that's a step *back*, like some kind of union type. To illustrate why we'd want union types, consider: what is the return type of `fopen`? The PHP manual says it returns a `resource`, but that's wrong because it will return `false` on error. The correct type is `resource ∪ bool`, but we can't say that in Hack. We'd need to give it a return type of `mixed`, and rely on documentation to be more specific. Which… at that point the type system doesn't do anything for us.
It was just a logical connection that I found funny, considering the state of standard webserver integration for python applications... Nothing more. :)
I installed the latest stable HHVM on my server and I'm currently using it to serve my self-hosted RSS reader PHP app (Fever), and I'm seeing *5-10x* speed increases in my early testing.. It's really quite amazing that it works so well with very little tuning. I was using nginx + PHP-FPM before and I swapped in HHVM just for that one subdomain.. The only downside is that HHVM is taking up about 3x as much memory as the FPM pool that used to run that domain, although I haven't really tinkered much with any optimizations yet.. My PHP-FPM install was pretty well tuned (for performance and memory) so maybe there's work to be done there on my end.. 
Man, using Java as an example language ain't gonna fly around here. PHP developers like short, succinct code, not fifty lines of FactoryFactoryBufferedFactory crap just to read a file or output something.
I'm 65% sure the technical term is "sticky sessions" (in case OP needs something to Google)
Sublime is hugely popular amongst a great number of extremely talented developers, especially those on mac. To discount it as "weak" is really silly. None of the big IDEs as far as I know are easily modular, and that's where this tech is heading. Atom will be the next super star most likely. 
What the hell did I just read, did you write this out of anger? You must absolutely HATE ruby and gems then huh?
Heh, don't get me started on Ruby. More !!magic!!, a shinier Perl. Anyway, I was more miffed than angry, and I could have tried harder to reign in the derision. That being said, I am still interested in the opinion of the community. I'm really interested in the engineering perspective, from the folks who are doing a bit more than "get it done as quickly as possible, never mind the mess." I simply find it hard to believe that such a practice could be so prevalent and unquestioned.
Talented people aren't perfect and like anyone else, they're subject to peer pressure and making poorly informed decisions. Yes, sublime out of the box is weak compared to an IDE, its popularity is likely due to underpowered macs becoming popular and a handful of high visibility people using it in videos.
It's more the total lack of an explicit list of what the code is using. It's making comprehending framework code much more difficult. I'd rather not have to understand a framework in totality just to use it.
There can be a method to the madness :) If you work with a framework (like Yii), you are going to be pretty much stuck with whatever decisions have already been made, at least as far as using framework code goes. When you use library code instead (including your own), you are absolutely welcome to mimic the Pythonic way of putting `import`s at the top of your file - though in PHP it's a `use` construct. use \Tracy\Debugger; use \MyLibs\SomeNamespace\ClassName as cName; Debugger::dump('Using Tracy!'); cName-&gt;showStuff(); If you are consistent (i.e. if you are *able* to be consistent, depending on your chosen libs), your own files at least will have some extra self-documentation at the top. That said, it's really a poor replacement for C-style `include`s, but it's better than nothing.
We have autoloading standards [psr-0](http://www.php-fig.org/psr/psr-0/) and [psr-4](http://www.php-fig.org/psr/psr-4/), with a standard algorithm to map class names to filename paths. So this basically maps a class like MyVendor\MyPackage\MyClass (this is a [namespaced](http://www.php.net/manual/en/language.namespaces.php) class)to a file system path MyVendor/MyPackage/MyClass.php. So you can easily find the path to a class file from its fully qualified name. And you can find the fully qualified name by just looking at the top of the file, from the [namespace and 'use' declarations](http://www.php.net/manual/en/language.namespaces.php). No one writes their own autoloader these days. There is a program called [Composer](https://getcomposer.org/), which is a dependency manager for php, that will also accept one or more top level directory for your classes and will generate an autoloader for you. You just need to include it in your entry point, and you can autoload all the classes under that path. &gt;It seems like a small thing, however, to simply ignore the autoloading stuff and just use require_once anything you're using in whatever file I think this will create a dependency to the relative location of the class file relative to the current directory. You can add all the directories to the search path, but then it would cause all kinds of naming collisions. With an auto loader, it can load classes from arbitrary locations. For eg, you can specify to the composer, while creating the autoloader, something like, "hey composer, make all the classes that start with '\imakesnowflakes\stuff' load from the 'vendor/stupidclasses' directory. This will cause a class \imakesnowflakes\stuff\builders\stuffBuilder' to load from location vendor/stupidclasses/builders/stuffBuilder.php. This lets any number of libraries co-exisit with out any collision issues and makes it a breeze to use them in your code. Just specify the fully qualified name, or import the required namespaces at the top of the file using 'use' keyword, and you can use the classes. I am someone who don't like magic stuff as much as yourself. But one of the think I like the most is the ability to not worry about including the class file manually, and to use third pary libraries without having to worry about the correct location to place them and to include the correct files every time I have to use it. 
&gt; No one writes their own autoloader these days. There is a program called Composer, which is a dependency manager for php, that will also accept one or more top level directory for your classes and will generate an autoloader for you. You just need to include it in your entry point, and you can autoload all the classes under that path. Indeed, Composer is what kicked off my ... rant. Since I'd already downloaded a couple of things with it, my initial code using it was something like require '../vendor/Dwoo/dwoo.phar'; or similar. Then, after reading about Autoloading I changed it to require '../vendor/autoload.php' And got this helpful error Cannot re-declare class SomeController in C:\dev\projects\foo\src\templates\index.tpl.d20.php on line 11 Which in turn lead to my pitiful, and incomprehensible demoralization. Obviously, I'm doing something wrong. But it isn't something I would have expected I'd done wrong, considering this is the extent of my code so far: require '../vendor/autoload.php'; use Pux\Mux; use Pux\Executor; class SomeController { public function index() { $dwoo = new Dwoo\Core; $dwoo-&gt;output('templates/index.tpl', array('SITE_TITLE'=&gt;'TestSiteThing', 'PAGE_TITLE'=&gt;'Test index')); } } $mux = new Mux; $mux-&gt;any('/', ['SomeController', 'index']); $route = $mux-&gt;dispatch( $_SERVER['PATH_INFO'] ); echo Executor::execute($route); Oh well, I'll get over it, and the sooner I get this silly project over with, the better. EDIT: Formatting, grammar, etc.
The archived Reddit comment link you included in your post is exactly how I'm doing it. I don't quite understand your gripes - but I'm sure you have your reasons. Personally, the ONLY time I use a require() call in a project is exactly once, in the publicly accessible front controller/index.php script (okay and possibly in my view template generator logic with output buffering). Anything more and I know I'm doing it wrong. With PHP namespaces now part of the trade it's a real no brainer.
Does that file with the class declaration load more than once during the same request? If so, then it will attempt to redeclare the SomeController class and that's your error. If you're ever interested to know what classes have been declared when your script reaches a certain point, just do `var_dump(get_declared_classes());` and you'll get a full list of which classes have been autoloaded to that point.
It's basically 15 minutes into getting used to PHP again. Since I'm forgoing the frameworks, and it will be a cold day in hell before I write "classic" PHP (a frothy mix of HTML, PHP, and large chunks of one's sanity), I'm going to need a bootstrap script, which, this little snippet is the beginnings of. I've been too distracted by my dismay to have worked on it any more yet :) Since the file is index.php, I'm figuring it has something to do with the magic ['SomeController', 'index'] construct that is causing it to re-evaluate the file once if figures out class/method is being referred to.
It's a really early 'bootstrap' script, so that Controller shouldn't be there at all, I just threw it in there because this idiom is what Dwoo seems to favor.
Well, one problem is that you're mixing your class and your routing logic. The SomeController declaration needs to be in a SomeController.php file which the autoloader will take care of finding for you when it's needed. If I had to guess your routing logic is probably looking for a SomeController class file, and the autoloader is like "hey's it in index.php!" so it loads the file expecting it to be the class declaration by itself (and not to have already been declared) and instead it ends up trying to declare it twice.
This is probably what I'm going to do. The class filename convention doesn't seem to be too out of line with what I'd do anyway, save for the Vendor stuff. The psr things weren't exactly clear on how this works with your own code, it mostly deals with loading 3rd party packages obtained with Composer or something similar. The namespaces definitely seem to be worth their while, it's unfortunate about the syntax, but what are you going to do? If I were King of the Universe I'd enforce LF as the one true newline, / as the one true path separator, and \ is for escape sequences, nothing else. I'm still working out my plans for domination of the universe, so those with differing opinions are safe for the time being. ;) Edit: I'm definitely keen on a DIY solution. The more frameworks I get exposed to, the more bitter the taste in my mouth becomes.
2 points: Most well written classes include a list of all the classes from foreign namespaces in the form of use statements. Secondly, assuming we're talking OO/MVC here, your code shouldn't implement against particular classes, it should implement interfaces. What particular instances of classes exist for any given interface should be managed by DI containers or managers. 
That's the same conclusion I came to. The only reason they're mixed is that the file is a bare arsed demo. I was simply trying make sure the packages were working, and just threw a controller class in there. Whenever I get back to working, the entire file is changing. It's supposed to end up being the bootstrap for the rest of the app.
No, I read that they'd integrated with Composer before attempting to do anything with it. The main problem is that the code is crap thrown together to get a feel for the libraries. I'd not considered that it would try to evaluate the code twice, and I got distracted by my quest to find out more about autoload before I could fix anything.
Yes, but Topaz is a hobby project. This is being done by the guys who have successfully been doing PyPy, and are making a business out of it.
http://laravel.io/forum is the official forum for Laravel.
There have been a few attempts, but they haven't made enough progress to be production-ready. I believe these guys will actually put out something worthwhile, given their track record.
Did you forget what subreddit this was?
Same here. It's so refreshing to find a piece of software that helps you work without being a major annoyance.
http://stackoverflow.com/questions/2770630/pdofetchall-vs-pdofetch-in-a-loop
HHVM supports XHP natively, in both PHP and Hack code.
But pragmatically, once the text editor is fully setup with plugins installed and settings configured, what difference is there to an IDE? It seems like a matter of semantics ("A text editor isn't an IDE because it's not an IDE.") and not the set of features.
Pragmatically, do I want to mess around with a bunch of configurations and plugins that may or may not conflict with each other, or do I want it to just work? Pragmatically, do I want an IDE that comes with the support of a company behind it, or a bunch of disparate features whose developers may or may not be available for support? Pragmatically, why should I pay the price of an IDE for an editor and for the opportunity to mess around with configurations and plugins when I can pay the same price, sometimes a little bit more, for it all just to work?
If, for example, you create an API called Foo, Apigility will create an accept header whitelist that looks something like this: application/vnd.foo.v1+json, application/hal+json, application/json. When you increment the version of the API, you would be able to retrieve the representation for that API with the versioned Accept header, like application/vnd.foo.v2+json. By default (currently), if you pass in either application/json or application/hal+json, you'll receive version 1 of the API.
Others have made excellent comments regarding autoloading which I agree with, but I think your missing the big picture here, your new to PHP and opting to create your own framework to build your site. That is a bad idea. I wouldn't presume to know the first thing about building a Web framework in python, in fact I've tried with horrible results. Point is, check out one of the other frameworks if yii isn't to your liking, to name a few popular ones: laravel, symfony, CakePHP, zend framework Maybe one of those may be a better fit for you. 
Because many people use the same user name and password across multiple web services. Hack it out in a shitty compromised web service and then try all the others...
Just installed 8.0 and tbh I don't notice anything too different. You can run them side by side in any case (at least on Linux).
I have the same experiences on Windows. 1) Didn't notice any difference. 2) You can run them side-by-side with 7.4.
Better Twig indentation (not perfect but much better) and the full path of opened files (under the tab).
Just hash the first 14 chars of the password. If it's [good enough for Microsoft](http://en.wikipedia.org/wiki/LM_hash), it's good enough for you.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**LM hash**](http://en.wikipedia.org/wiki/LM%20hash): [](#sfw) --- &gt;__LM hash__, __LanMan__, or __LAN Manager hash__ is a compromised password [hashing function](http://en.wikipedia.org/wiki/Cryptographic_hash_function) that was the primary [hash](http://en.wikipedia.org/wiki/Cryptographic_hash_function) that [Microsoft LAN Manager](http://en.wikipedia.org/wiki/Microsoft_LAN_Manager) and [Microsoft Windows](http://en.wikipedia.org/wiki/Microsoft_Windows) versions prior to [Windows NT](http://en.wikipedia.org/wiki/Windows_NT) used to store user [passwords](http://en.wikipedia.org/wiki/Password). Support for the legacy [LAN Manager](http://en.wikipedia.org/wiki/LAN_Manager) protocol continued in later versions of Windows for [backward compatibility](http://en.wikipedia.org/wiki/Backward_compatibility), but was recommended by Microsoft to be turned off by administrators; as of Windows Vista, the protocol is disabled by default, but continues to be used by some non-Microsoft [CIFS](http://en.wikipedia.org/wiki/Server_Message_Block) implementations. &gt; --- ^Interesting: [^Ophcrack](http://en.wikipedia.org/wiki/Ophcrack) ^| [^Rainbow ^table](http://en.wikipedia.org/wiki/Rainbow_table) ^| [^Password](http://en.wikipedia.org/wiki/Password) ^| [^LAN ^Manager](http://en.wikipedia.org/wiki/LAN_Manager) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgbaq7h) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgbaq7h)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
&gt; An open source C-style strongly typed modern language that has a high adoption rate? I'm not sure it'll ever be widely adopted. The newbies won't know enough to adopt hack unless free/cheap hosting providers really start pushing it, and the hardcores will probably stick their noses up at it because it's "still PHP". &gt; You do realize that the vast majority of ASP.NET/MVC apps run C# in the wild, right? That was kind of my point..? &gt; And that ASP.NET/MVC are frameworks, not languages, that run within the C# runtime? I'm aware...what I'm not aware of us how to build a website with C# *without* ASP.NET. It's not trivial to deploy like PHP. I don't think Hack can compete with C# on any front. Hack is an improvement on PHP. C# was designed well from the start. By forcing HHVM you've taken away PHP's biggest strength, which is ease of deployment. By adding types, you're also scaring away beginners by increasing the learning curve.
I worked in a place where the main CMS didn't hash passwords at all, because the boss wanted to be able to give people their password if they forgot it, no matter how we tried to convince him it was a terrible idea.
You don't need a framework to run PHP on the web. It's built for that. All your $_GET and $_POST and header data is there for you automatically. In C#... I personally don't have a clue how to gain access to that stuff. So in some sense, PHP has a built-in framework. You're probably going to want to use some form of framework to handle at least the low-level stuff for you in C#; doesn't necessarily have to be ASP.NET, although I don't know what our other options are. Point is, it's not an apples-to-apples comparison with or without frameworks.
You're comparing EcmaScript 6 to C# now...? How'd we get there?
Now supports 5.5, no more squiggly lines under MyClass::class.
Is it much faster?
For what you require, I highly recommend Yii Framework. You may ask why? Here's why: 1. It can generate CRUD for you. With or without user interface. 2. The ORM it comes with can handle relations and moderately complex queries effeciently. For optimization, it can get out of your way completely and let you write queries à la carte. 3. Yii performs REALLY well with APC turned on right out of the box. Speaking of real world performance, Yii forms part of the self-care platform backend at a mobile operator in Africa with around 22 million customers. It works amazingly. Source: I was one of the devs at the said mobile operator driving the project.
The post almost sounds like an ad for [Modernizing Legacy Applications In PHP](https://leanpub.com/mlaphp)! Please see if this book helps.
Thanks. It really grinds my gears when people say things are good or bad without explaining why. A few years back I used to think Sitepoint was quite good but I've quickly come to the same conclusion that it's a bit basic and behind the times now.
I know this is minor, but I really like the droplines that indicate where tabs would be in whitespace before the text.
I can't find why this is a 8.0 rather than a 7.5. What's the big change to justify a major version number?
Thank you Sir.
I found it much faster than other versions, and seems that issues with xDebug when iterate DOM debuging in CLI has been fixed. But I will wait to change until JVi for NB-8.0 been released.
They track the current major version of Java.
&gt; now people care. because PHP core devs dont deliver .Things changed. Good point ..... oh wait, **no**, it's not a good point. It's **useless rhetoric**. I fail to see in what sense the php.net project fails to deliver. It's a matter of fact that these kinds of implementations have been around for years and nobody cares. You, and by you, I mean the users of reddit in general; seem to need a reminder that you are actually *talking about people*, people who, volunteer their time for absolutely nothing, except grief. They spend many many hours every single week fixing bugs, looking for things to improve, discussing the future. It's one thing to say that there are implementations on the scene using technology that cannot be integrated into PHP in a rush, nothing can, such things may not be suitable for the reference implementation in any case, or necessary. It's quite another to say that the volunteers helping you to pay your bills are failing to deliver. **They certainly are not**. Whatever happens in the *distant* future, it will only be happening because the volunteers you say are failing gave up massive amounts of time, and put in massive amounts of effort.
It is actually different when using mysqli instead of PDO, the 's' just signifies that the variable being passed is a string. You can see the details for it on: http://us.php.net/manual/en/mysqli-stmt.bind-param.php
I personally used Sublime Text for a while and i still like it. However i recently fell in love with PHPStorm and i hope this love will last forever. I am still using Sublime if i just want to just quickopen a file (without rampup time etc.)
Netbeans, but part of that is because I also do Java coding.
why do you prefer in PHPStorm that ST lacks? 
Autoloading is optional. It's commonly lauded because it makes interweaving several 3rd-party packages, (if they follow the same Autoloading standard) a great deal less of a headache. If all dependencies are present for each package, the autoloader makes sure these dependencies are loaded. The real !!MAGIC!! here is that this results in maintainability of your packages and dependencies, especially with PSR-4. Every part of every package is where you'll expect it to be, it alleviates you the developer to figure out how each package has been put together. This isn't really representative of a real world example when weaving together several packages: include &lt;iostream&gt; include "my_headerfile.h" include "more_stuff.h It would look more like: include &lt;iostream&gt; include "/lib/VendorOne/lib/some/depency/you/need/index.h" include "/lib/VendorOne/lib/html/headerfile.h" include "/src/some_other/depency/VendorTwo/uses/explicitly.h" include "/lib/VendorTwo/includes/_some_arbirtraryFile.h" With PSR-4 maintaining and organizing depencies, even without composer is a helluvalut easier. Always like so: /Vendor/Src/Ns/Class.php This, as I opened this reply with is *optional*, largely adopted but not universally. There are packages that do not depend on autoloading. Take for instance https://github.com/auraphp who's libraries are all decoupled and could be used without any autoloading. Even tho the author has written it to work with Composer autoloading and even provided package specific loaders, it is still optional.
Well in my case I always put it this way. ST is a text editor and phpstorm is an IDE. Phpstorm has xdebug support vagrant support and various other things that an IDE should have such as code completion. You don't find these by default in ST nor should you because ST is a text editor and not an IDE. I have recently began using atom for quick one off things such as editing nginx server blocks or apache virtual hosts. I'm liking it a lot more as a text editor than I did ST but that's just my opinion. 
I'm a member of the Atom beta and have one remaining invite. If you'd like it, send me a message with your e-mail address and I'll send it over.
&gt;The Future [...] &gt;Host this site over HTTPS (even though current HTTPS encryption isn't as strong as 2n-ROT13)
Aptana studio 3 for me, I really like it because I've always used eclipse for my java. 
JavaScript has it's own problems. 
PHPStorm. I've been using it since version 2.0 and never looked back to any other IDE I've used before: Eclipse, NetBeans, Aptana, etcetera.
Seems to me that ZF2 tries to target the "high-end enterprise" niche. Compared to Symfony the number of bundles/components available is very small so I would have thought the guys behind ZF2 would try to "catch up". Instead we get this tool that is not something needed by 90% of the projects. Maybe the guys in the ZF2 team realized they don't have the user base required to compete directly with Symfony and they tried this approach. From the looks of it this seems like a really great product, I have nothing against it. Time will tell if targeting this niche will prove to be a competitive advantage for ZF2. 
What I find annoying is that when Netbeans says "Your IDE is up to date", it literally means the version you have is up-to-date. It doesn't take major versions into consideration. 
before starting to use PHPStorm i had a rough start with "real IDEs": Eclipse was slow and Netbeans crashed on me. When is started using PHPStorm i fell in love
Does anyone actually use bitwise operators for anything practical? Sorry not planning to build that guy's authentication system.
PHPStorm.
I was actually trying this with Laravel. I was curious why Taylor used the loop instead of the FETCH_CLASS. I know that after getting the results in Laravel as an associative array, it does the following loop. foreach ($results as $result) { $models[] = $model = $this-&gt;model-&gt;newFromBuilder($result); $model-&gt;setConnection($connection); } Inside of the newFromBuilder method, it's just creating a new instance of the model, and then calling the following method: public function setRawAttributes(array $attributes, $sync = false) { $this-&gt;attributes = $attributes; if ($sync) $this-&gt;syncOriginal(); } So, it looks like it's just mass assigning the database results to the model, instead of being individual properties. Using the same model, but with this method I wrote, I got slower results: public static function allNew($columns = array('*')) { $instance = new static; $sql = $instance-&gt;newQuery()-&gt;toSql(); $statement = DB::getReadPdo()-&gt;prepare($sql); $statement-&gt;execute(); return new Collection($statement-&gt;fetchAll(PDO::FETCH_CLASS, get_class())); } This was a quick test, but the results surprised me. I'm sure there are other optimization techniques I could use. Anything stand out?
Why did you link this? It doesn't ask about object instantiation.
How did the C# come into question? By CS i mean CoffeeScript.
I'd say a bookmarking app would be good for this.
Obviously there has to be one overarching "goal" or "aim", e. g. a bookmarking app, but some features like "make alls the bookmarks fly around on the screen" might have very little practical use, but might consist of a very interesting CSS script. (I do realise it's a terrible example, I hope you get what I mean)
100% of the data *does* pass through a PHP layer. It's done by scaling horizontally. Just because 100% of the processing isn't done with PHP, it doesn't mean that PHP can't handle firehose scale traffic with the correct architecture (Disclosure: I work at DataSift)
I also got another invite if anyone is interested at all
I use Sublime Text 3 because my work involves opening a lot of small files in different projects, also because it has some capabilities(plugins) while keeping a small footprint. I have not tried PHPStorm but I might for my next big project.
TextMate 2. I tried to love Sublime text, but it just didn't gel Tried PHP Storm too, but it was pretty sluggish on my 2009 iMac
macvim is my favorite.
I use Sublime Text 3. Atom from Github has my interest though. I tried to use it but, there are plugins from Sublime Text that aren't out yet for Atom for me to fully try it.
It actually makes a lot of sense for authorization scoping. Scopes can get complex with their combinations and can get expensive in relational storage. Storing an integer is a lot easier/less-expensive and isn't hard to work with if you understand how bitwise operations work. Its also useful for error codes, but that depends on their use case.
I use PhpStorm. I'm working on a Magento project. So Magicento (a PhpStorm plugin) is a godsend.
VIM.
vim, spf13 distribution
Yes, it is possible to change the "default version" for in-specific or general Accept requests. On any given API's Overview page, there is a section called "Versioning" and there is a drop down to set the "default" version.
Yes - for each API, we have a setting on the "overview" page, "Current Default API Version". By default, this is "1", but you can use the dropdown to select any other version, and that will be what is used if no version is provided via Accept header (or URI, as we also support, but do not encourage, URI versioning).
&gt; Save the Vendor stuff Your own code falls under your own Vendor. This has the added benefit your code could effortlessly be deployed in any other psr-4 complaint project. 
Well, yes. The type `?τ` is effectively the type `null ∪ τ` for all non-nullable types `τ`. But that's not what we're talking about, because `fopen` doesn't return `null` on failure, it returns `false`. Yes, it would be *better* if `fopen` threw, or if it returned a `?resource`. It doesn't. This is *important*, because despite being part of the language's standard library Hack is insufficiently expressive to give it a useful type. It's not a show-stopper, since we have reified types, but it is a strange oversight.
I am a big fan of NetBeans. Has anyone found a way to fix the horrible anti-aliased font on a Mac in Java 7?
I write a lot of php for websites on my mac so I use Espresso and love it. I try to use that as much as possible over any other programming editor. 
I don't think Zend employees are even the most active PHP source contributors; it really is an open source project.
&gt; class SomeController { Always use namespace for all your classes and functions. Preferably one class in one file and nothing else. &gt; Cannot re-declare class SomeController Global namespace collision. I'm not sure how much more helpful you want this error message to be. You can make your own folders and make them separate git repositories, write a "family of" classes in each repository, and create a composer.json. Then include those repositories via composer into several projects with autoloading for you. Just remember to use namespaces. 
I use it for status columns or other generic enums. It can make for shorter URLs on filter pages. Eg: Say you have a product listing page with filters. You have a `launch_status` attribute which is defined as following: &lt;?php class Product { const STATUS_PRE_LAUNCH = 1; const STATUS_LAUNCHED = 2; const STATUS_RETIRED = 4; } ?&gt; The filter for this is a checkbox so you can show products with multiple statuses. Your query string could look something like `?launch_status=3` rather than `?launch_status[]=1&amp;launch_status[]=2`. Your handler for this would look something like: &lt;?php // ... lots of code here ... // just use your imagination if (isset($_GET['launch_status'])) { $status = (int)$_GET['launch_status']; } else { $status = 7; // or $status = Product::STATUS_PRE_LAUNCH | Product::STATUS_LAUNCHED | Product::STATUS_RETIRED; } $products = $productRepository-&gt;findWithFilters([['launch_status' , '&amp;', $status]]); 
Firstly I don't think that's the case and secondly I don't think that Apigility is something that's not needed. With AngularJS and Frontend-Frameworks becoming more and more popular, the demand for APIs will increase a lot. In fact I think being the first one to deliver such an awesome product has been a really, really good deal for Zend.
I understand what you're trying to get at, but this is probably not the best example, since pre-launch, launched, and retired are all exclusive states. You can represent them just as easily with 1, 2, and 3. Bitfields are useful when you need a way to store a bunch of booleans and space is at a premium.
I think 7 isn't a bit. Good try tho wise ass.
Many complex systems (even WordPress!) can have 50 or 100 or more discrete permissions to track. Using bits in this fashion for ACL lists limits you to 63 permissions in PHP (my installation, at least). $counter = 0; $current = 1; $highest = 0; while (true) { $counter++; $highest = $current; if ((int)$highest !== $current) { break; } echo $counter . ': ' . $current . PHP_EOL; $current = $current * 2; } // ... // 63: 4611686018427387904 
Oh, ok. Good to know. Thanks :)
Does anyone know why when i create a tab delimited file i can open it with Excel but not with any mobile apps or google drive? It seems like https://phpexcel.codeplex.com/ is a solution to this problem but i'd just like to understand why it doesn't work...
https://github.com/PHPOffice/PHPExcel This library is pretty awesome. Just started using it recently since my company deals a lot with exporting and importing spreadsheets of data. Extremely nice an Object Oriented.
Another trick is to use hexadecimals instead of integers for declaring the statuses or permissions or whatever. Just cycle through {1,2,4,8} and append another zero each time. Instead of: const STATUS_A = 1; const STATUS_B = 2; const STATUS_C = 4; const STATUS_D = 8; const STATUS_E = 16; const STATUS_F = 32; const STATUS_G = 64; const STATUS_H = 128; const STATUS_I = 256; const STATUS_J = 512; etc. you can use this notation: const STATUS_A = 0x1; const STATUS_B = 0x2; const STATUS_C = 0x4; const STATUS_D = 0x8; const STATUS_E = 0x10; const STATUS_F = 0x20; const STATUS_G = 0x40; const STATUS_H = 0x80; const STATUS_I = 0x100; const STATUS_J = 0x200; etc.
*Yawn.*
tl;dr
I've recently been through this and PHPExcel is the best library out there. 
wow, I'm also enjoying the fact that you can install it with Composer for Symfony2 projects http://stackoverflow.com/questions/16196851/use-phpexcel-with-composer-and-symfony2-2/16197243
If you're having memory problems, try working with Excel's XML format instead. I'm using it for sheets in the magnitude of 100 000+ rows.
definitely might come in handy
Don't bother with this guy. He's on a 486.
[Memcache is not recommended for session storage][1], I would easily go to [Redis][2] for that matter. You can also use *sticky session* strategy (on the Load Balancer) to send users back to the server which holds their session. [There are some problems with it][3] though, which are not big ones if you are aware of them. [1]: http://code.google.com/p/memcached/wiki/NewProgrammingFAQ#Why_is_memcached_not_recommended_for_sessions?_Everyone_does_it! [2]: http://redis.io/ [3]: http://stackoverflow.com/questions/1040025/difference-between-session-affinity-and-sticky-session
I reverse engineered a piece of hardware that had restrictions by decoding the hex it was sending in Bluetooth packets. Find a niche market. Thats all I can say. You haven't disproved any of my points. Your just saying no one should criticize php because it works good enough and you really like it.
It's too bad it flew right over his head - Jim did write a pretty good tutorial.
While a great library, I've found it rather verbose and memory intensive. Granted, the latter is mostly due to the xls/xlsx format. For anyone that doesn't know, xlsx is actually a compressed file (.zip) meaning (up to) several seconds of your request time are going to be eaten by the decompression step before reading. I'm only speculating, but the decompressed copy in RAM may or may not count against your PHP process' RAM limit. **Note: I'll admit bad practice for not bench-marking load of my Laravel App to accurately compare utilization of PHPExcel within the app. That said...** I've seen some high memory utilization (12MB for a 70KB .xlsx file). With "representative" input files, I've hit the hard limit several times on a project I was working on. We decided on other processing methods for file upload/input. Another fault of the Excel format, is persistent empty non-empty cells. E.g. 10 rows x 3 columns of data. Open in Excel, delete bottom 5 rows and save. In most cases, the file will retain a dimension of 10 x 3, with the bottom 15 cells just existing with no content. Sounds innocent, but most libraries read all cells, wasting and memory to looping over empty cells. On the plus side, PHPExcel includes many examples. Not just Hello World, but how to embed styles, functions, etc. They also contain some other nice features, such as handy calls that make it easy to log memory usage and processing time, which as mentioned above, are handy for identifying whether you need to raise memory/timeout limits. Also, as mentioned, it's a snap to include with Composer. In my latest project, I use it to open a rather simple template, saving a copy populated with additional information, and it works great. The PHPOffice team seems rather active, and I know they've talked about addressing memory efficiency, so I'm looking forward to using this library more.
This. Had to abort using PHPExcel (even with 1gb RAM for PHP) on reports over ~10k rows and switch to plain old XML saved to a temp file and then fed to the client. And yes, the XML files get large quick! (50mb+ is not uncommon)
Looking at PyPy, these guys already proven their ability to create drop-in replacement for something that's much more diverse (python has too much love for C-modules, crazy runtime hacks and metaprogramming). I don't think it will be "with fewer features" in any sense.
We use this at Facebook, it works well. 
That's a cool trick. You can also use binary notation with PHP 5.4+: const STATUS_1 = 0b1; const STATUS_2 = 0b10; const STATUS_3 = 0b100; const STATUS_4 = 0b1000; // ... const STATUS_N = 0b1000000000; // 512 Makes the whole "flags" thing really apparent, but it gets a bit cumbersome.
hi there, good read! &gt; When Yii told me to fire up Gii and !!MAGIC!! occurs, I ran. This made my day thx :D. (don't get me wrong, I have nothing against Yii) I use something very similar to the reddit post you linked [1] and have been quite happy with how simple it is and how clean my code is as a result (apart from PHP namespace separator... \ ? really? I'm used to '\' to escape too) then I can do include 'path/to/bootstrap.php'; use MeMyselfAndThem\CoolLib\BadAssClass as someclass; $hello = new someclass(); echo $hello-&gt;world(); I do not use composer but I do use packagist, some time ago I was told that downloading packages archives 'by hand' was so 2000 so I wrote a small sh script which let me download packages on packagist with a simple `packagist foo/bar` (still need to tweak it a little to get rid of unnecessary stuff in packages :)) cheers! [1] http://www.php.net/manual/en/function.spl-autoload-register.php#92514
My company is using libxl (libxl.com) with php_excel (https://github.com/iliaal/php_excel). It offers an oop api, works with xls and xlsx and gives quite decent performance. Would always suggest... But I didn't test phpexcel so I can't compare.
I understand Facebook needing Hack as they have a huge php codebase they are stuck with, like it or not. However for people starting new projects, if you need static/strong typing and are happy with the verboseness of Hack, why not just use Java?
Yes, CSV seems like the best option by far when you need big data and don't care about formatting. We endorse it's use by calling it our "Fast Export".
If anyone has problems viewing this. Here is a link to the original without edits https://gist.github.com/griggsk/720484 Thanks.
my advice: start with the 3 lines that matter, and build out your variables from there: mysql_connect() mysql_query() mysql_num_rows() 
The Collection doesn't do the loop. The Collection constructor just sets an array of elements (in this case, models) to it's "items" property. The flow is, when you call Eloquent::all() it creates a new Eloquent Builder class. The model calls the "get" method on the builder. The "get" method calls the "getModels" method (again, on the Eloquent Builder). The "getModels" method calls to the database connection to retrieve the results. It then loops through the results and creates a new Model with values of a row. I was wondering why getting all rows, looping through, creating a new model, then assigning them to a collection was quicker than using PDO's FETCH_CLASS to do the class creation and assigning for you instead of using a loop.
That's a cool trick. You can also use bit shifts with PHP 5.6+: const STATUS_0 = 1 &lt;&lt; 0; const STATUS_1 = 1 &lt;&lt; 1; const STATUS_2 = 1 &lt;&lt; 2; const STATUS_3 = 1 &lt;&lt; 3; const STATUS_4 = 1 &lt;&lt; 4; // ... const STATUS_N = 1 &lt;&lt; N; 
Well, when using that many permissions there will probably exist some logical groupings. Just break it into groups and store separate values for each. It will probably give you a nice growth potential as well. 
I just discovered PHP_XLSXWriter. Its an exceptionally lightweight and simple to use library if all you are looking for is to export data without any fancy formatting. https://github.com/mk-j/PHP_XLSXWriter 
One other trick we do, when just needing raw data, is to generate an HTML table and send that as the data with an excel content type. Excel complains abotu the format upon opening, but it still opens fine.
You can convert bitmaps to PDF if you learn a little about COBOL, but that doesn't make it a good idea. I'm not saying HTML/XML-&gt;PDF via XSLT is bad, per se, I'm just saying that your comment would be more helpful if you elaborated on *why* OP might find XSLT to be a good fit. That said, I'm not sure this is entirely accurate, since learning "a little bit about XSLT" is the easy part here—the amount one would have to learn about PDF for this project would be non-trivial, and indeed more than "a little bit."
I've used this library for a long time. it really is very good.
First of all, you must have all resulting columns defined in the class you're instantiating (so it will eat less memory than FETCH_ASSOC method). Second, it's better to use (if possible) `fetch()` to get rows one by one instead of creating [probably huge] array with `fetchAll()`. &gt; I would expect the FETCH_CLASS to be faster As for this one - not necessarily faster, but neither much slower. And again, it will at least eat less memory. **upd:** [apparently](http://lxr.php.net/xref/PHP_5_4/ext/pdo/pdo_stmt.c#do_fetch) FETCH_ARRAY does way less than FETCH_CLASS :) but still it's not a reason to not use FETCH_CLASS :)
What do you mean "everything in PHP blocks?", that's simply not true. If you need to avoid explicit blocking, fork/thread your problem. 
If I need to resort forking etc. then what is the point of async in the first place? I thought it would work like a goroutine or something so when you kick off any function/method marked as async it would just wrap that whole call in it's own process and let me get on with doing other stuff. Instead it appears to do... pretty much nothing. It just delays execution of a function until you call join(). So really my question is - am I just not even remotely understanding what async is for, or is it just not that useful?
My whole point was that although it has weaknesses, a good developer works around them. No worries about the app. I was just curious :) Good luck. Sorry I was a dick, but on the internet nobody knows you're a dog.
At that point, wouldn't you want to switch over to a database?
I used to be the same way. I had someone ask me at an interview what are things you don't like about PHP. I couldn't think of anything. I told him nothing. He went on to point out a bunch of things like the things we discussed here. From that point on I realized that being able to objectively compare languages and not being married to one way of doing things is a mark of an experienced developer. Later I had a mentor who loved ruby but would use Drupal and other PHP apps if it was the right tool for the job. If its plugins were going to save weeks of development then its does not matter how the functions are named. The only way you can make decisions like that is knowing the strengths and weaknesses of the languages at your disposal.
Yup. This or CSVs are my go-to methods.
The part with &gt; //return both instantly with an Awaitable as the response is - I think - wrong: those assignments actually wait for the function to complete. You need to wrap those in async again. Not that this really depends on if file_get_contents() can be used in parallel -&gt; more and more APIs (DB, I/O) will follow I guess. async function getPage($uri) : \Awaitable&lt;string&gt; { // async = we *try* to do this in parallel return file_get_contents($uri); } async function getAllMyPages(): array&lt;string&gt; { // async = we *try* to do this in parallel return await [ getPage("http://127.0.0.1/sleep.php"), getPage("http://127.0.0.1/sleep.php"), ]; } $result = getAllMyPages(); // Blocks until everything is completed It is important to realize, that you have no real control over what is done in parallel and what not - at least in the current implementation. async before method = HHVM, **try** to do the method body in parallel await before statement = HHVM, whatever you are doing in parallel, before you go on, finish that statement.
"Await blocks until everything is completed" Yes, PHP blocks when everything is completed does normally even without this `await`. So I don't understand what makes `await` special in row 12.
Great introduction article to the topic - very easy to follow along with.
That's cute - like it.
Oh wait, I think I get it now. So you can assign all sorts of stuff with async function calls that all leave "async" values that will eventually turn into real values no matter where you assign those values further, and with the `await` keyword you can block PHP if there are any unresolved async values and wait until they all get assigned? (Or alternatively async values are never resolved even if the async calls are finished, until `await` is called?)
But HHVM not in an asynchronous context. There you can have asynchronous operations. You are right, row 12 does not need an await (*fixed* in original). You are on the right track: you can have async w/o await, but not the other way around.
Right! Look at the example: async function getPage($url) { $fp = fopen($url, 'r'); // This is parallel write_my_log(); // This is parallel await $fp; // No mather if we do $fp or writing the log first, we need $fp *after* that point return stream_get_contents($fp); // This is parallel again } $pages = await [ getPage(‘http://php.net’), getPage(‘http://example.com’), getPage(‘http://hhvm.com’), ]; // No mather what order, we need those 3 method calls *finished* at _this_ very point asigned to $pages // (all opened a file, wrote a log and got the files content, maybe opening the file and writing the log // in different order, but all did the same, just with different uri) However, I know not enough about HHVM to say something about the &gt; async values are never resolved even if the async calls are finished I would *think* that at the end of one request, all Awaitables are resolved and all async blocks execute until they return or end.
I promise I know what I'm talking about, I have worked on Hack for the last 6 months :) The typechecker would reject it, but you never ran the code through the typechecker :) The runtime "accepts" a lot of stuff even in Hack mode that the typechecker will reject. See http://docs.hhvm.com/manual/en/install.hack.bootstrapping.php -- and wrap it all in a function, we don't typecheck stuff in pseudomain in any capacity. (Add `&lt;?hh // strict` to enforce this -- the default mode, partial, admits some extra stuff to ease conversion, such as code in pseudomain. See http://docs.hhvm.com/manual/en/hack.modes.php.)
We've been using the [PEAR Spreadsheet Writer](http://pear.php.net/package/Spreadsheet_Excel_Writer/docs). It's an old library and isn't maintained anymore, but we just use it to export moderate amounts of data out of web systems so it's sufficient.
Excellent, thanks for the information. I was under the impression these constructs were completely removed from HHVM, so that explains why what was happening there.
I really appreciated your detailed response but almost everything you've written I would use an reasoning *against* checked exceptions instead of for them. For starters: &gt; Yes, you don't have the type information anymore but that's a good thing. You're working with the abstracted interface, which as you said, doesn't care about the implementation. Therefore you shouldn't care if it's a FileNotFoundException or a SocketException, your only concern is that an IOException has occurred. I don't see the point! `IOException` is so generic that it's the base class for all socket errors and file not found (and thousands of other things). What's the value of knowing this? This method could have a network timeout or a file a missing or maybe some zip file as a bad checksum? If you declare more specific exceptions, you end up leaking implementation details. Also if you declare more specific exceptions you end up having to declare *a lot* of exceptions. In any non-trivial component, the number of useful exception declarations would be insane. So I argue that declaring `IOException` is not any more useful than just declaring the method as just throwing `Exception`. And furthermore since *every* method could potentially throw an exception (e.g. `NullPointerException`) you could tag every method as throwing `Exception`. At that point, you might as well just not have checked exceptions at all -- since that's just equivalent to declaring every method as throwing `Exception`. &gt; and my IDE will tell me Unhandled exception type IOException. But this pointless. You agreed previously that most programs probably only need one exception handler. I'd say most programs only need exception handlers in a few critical junctions. So your IDE will auto generate catches you don't need or warn you about exceptions you don't care about. Your IDE can't help you from having to make a decision about what exceptions to catch and where to catch them -- it's so dumb about it, it makes you handle them all everywhere! And forcing you to declare exceptions means your method exception definitions are all vague or generic. &gt; try { &gt; echo $user-&gt;getLuckyNumber(); &gt; } catch (Exception $e) { &gt; // Do nothing, because I don't really care if some lucky numbers gets shown or not. &gt; } So you're going to swallow every exception? What if the programmer introduced a bug during the last commit or getLuckyNumber() uses a counter that is now overflowing on every call. You'll never know you have a serious bug. If your dashboard is so important it should survive accessing any property -- there are ways of writing that which is more stable, predictable, and future-proof that wrapping individual random properties in try/catch blocks. &gt; The problem is, in PHP you can't know what's going to happen. Every method in PHP or Java could potentially throw an exception. Just make that assumption because it's the correct one. Even if you can guarantee it's bug free and will not throw today, it might not be that way tomorrow. &gt; You either have to manically put boilerplate exception handling around every single function call But see, that's where it's all wrong. Throw often and catch as infrequently as possible. Put exception handlers in the critical points and if you have special requirements handle those as necessary. But checked exceptions gives you no real help in this regard. It might even make you choose the worst most fragile solution (like your getLuckyNumbers() example above). 
Thanks for this. When I tried it with the FETCH_CLASS, I let the built in __get with Eloquent set the properties as values in an array. I'm sure this added some time to the whole thing.
Bwahaha. Well, it *looks* like a hash, right?
Good point, but that would be a benchmark more of PHP double quote string parsing - this was purely centred around string concat techniques.
&gt;it would just wrap that whole call in it's own process and let me get on with doing other stuff What do you think forking is?
I spend 50% of my time writing reports in Excel and PDF using TCPDF and PHPExcel
It depends on how the site is done, but I would look into [cURL](https://php.net/curl). 1. Get the content of the first page 2. Download the image 3. Find the link of the next page in the page's content (is there a common 'class' or 'style' or pattern in the URL maybe?) 4. Get the content of the next URL 5. Go to #2
I rarely upvote, but for making known the memory issues with this library deserves such a response. I struggled way too long trying to get a decent excel output for generic db tables and it crapped out at some point based on width and length of the table. I still haven't come up with a good way to do this.
&gt; We use this as Facebook, it works well. Interesting, I hadn't considered using an Excel library as a social networking platform. Can you tell us more about how that works? Do all your friends have to install PHPExcel on their phones?
Along with that I'd like to see a comparison of sprintf() with the above methods. In the same vein, another useless micro-optimization: [Single vs Double Quotes](http://nikic.github.io/2012/01/09/Disproving-the-Single-Quotes-Performance-Myth.html) 
Except that it becomes heinous when you are dealing with people on multiple platforms (with different line-ending standards) and you have newlines within cells.
I worked for a company. They stored *credit card numbers*. In plaintext. Needless to say I got out of there pretty damn quick.
After banging my head against "Cannot redefine class BlahBlahBlah" errors for a while I ended up with a micro-framework called the Fat Free Framework. It's pretty much an integrated Template/Router setup with a lot of flexibility in project structure. So far I'm not a huge fan of the Template component, but otherwise it's pretty good so far. Actually, I'm still confused by the class redefinition issue. The semantic reason for the error makes sense. The file was included twice, causing the compiler to complain about duplicate definitions, and rightfully so. I suppose the real problem is that I'm thinking about the result of includes and require behaving more like it would in C. Before a single line is compiled it goes through and concatenates every single #include directive together, and then compiles. You can run into including the same file twice quite easily, and a simple #ifdef guard clears it up. So far as I can tell, PHP will dutifully load, and then insert, whatever file you specify with include, or require. But then, somewhere deep in the guts of some library code there's voodoo, and suddenly it's loading and inserting the same file again, ignoring the original copy that was already require'd. require_once seems to only apply to subsequent require calls for the same file. Whatever exactly that is causing the error apparently uses a different mechanism and so in goes the file again. Obviously I'm missing something about the way PHP processes a source file. Even though it bugs me, as long as I know how to avoid it I'll be happy. So far it's seemed capricious, like some kind of imp manifesting periodically to poke my eyeballs with a luke-warm poker. 
Obviously I meant "at", I'll edit my post. That's what I get for writing it on my phone :P But yeah, I work in an ads team at Facebook and our product (Power Editor) relies on spreadsheet import/export for doing things in bulk. Currently, actual import/exports are done client-side via JavaScript (in fact, most of the app is offline at the moment), but there's some things done with PHPExcel like generation of a template file with cell validation and notes.
http://us3.php.net/manual/en/filesystem.configuration.php#ini.auto-detect-line-endings The standard is total dogshit, though: http://tools.ietf.org/html/rfc4180#section-2 &gt;If double-quotes are used to enclose fields, then a double-quote appearing inside a field must be escaped by preceding it with another double quote. But it can be made to work. I have a fairly primitive delimiter detection function floating around somewhere.
That's a cool trick.
a bit off topic but... Why is it the facebook ads platform always broken? I've seen everything from stats that vary so widely its impossible user behavior changed that much to raw PHP errors being displayed. And a lot of the times the ad reps are clueless. Are ads just a low priority, or is there some unique challenge facebook faces here that I'm not catching?
There is already /r/hacklang (/r/hack is for something else)
How long can we expect to wait until a semi-complete documentation is available? This seem very promising to one of my projects.
I second this one as well. For a project I had to test various implementations and PHPExcel was the most complete and usable of the bunch. And as long as you use it in moderation (as in not countless concurrent generations at once), the higher memory footprint is acceptable.
"How many sites have you made in ruby?" &lt;-- the question should be, "Does anyone uses ruby for new projects? and the answer for that is NO". "Its not like it matters." &lt;-- have you worked with any C-Family Languages before or used any library in c,C++?
Checkout https://gist.github.com/bzikarsky/9721378 for a working example. He posted that on IRC.
The empty cells is often an issue when generating CSV files. Don't just press the delete key to remove cells, as it just empties the contents. Use "delete" rows/columns from the menu. 
I've even had problems sending csv files to people with PCs set up using commas for decimal points. There us just so little context in a csv. 
I find the hack related posts here interesting even though I don't use it or plan on using it (yet). I'm fine with them.
I'm just saying that it's not the case when they try to cut corners by changing language semantics or something. Most probably these tests will be the same during all next completeness stages.
Thanks I'll look in to curl. Is there a guide you recommend?
Easy to use, but if you want a big spreadsheet, it wants a lot of memory. Also some formulas just don't work if you use Office2003 writer (Office 2003 is STILL around unfortunately), formula as simple as SUMPRODUCT doesn't work. 
PHPExcel is great, but if you need to generate a spreadsheet with thousands of rows, it just requires huge amounts of memory. The best alternative I found is [python-excel](http://www.python-excel.org). Despite the fact I never wrote in python before it was quite easy to make it work and it has no limit on spreadsheet size.
I've had no problems opening PHP generated CSV files in Google Docs, not sure if it's the tabs that it doesn't like.
Did anyone expect the implode technique to be faster? I've never seen anyone use that and cite performance.
Forking is not the only solution for this.
Question, if you are using it just for data export why use excel, why not use something smaller? like CSV files.
Oh yes I get you man. We have talked. Sorry for not recalling. 
Slightly off topic, but if you enjoy (slightly pointless) benchmarks then I have a repository that me and a colleague add to whenever we're bored. Mainly just to satisfy our curiosity of PHP's inner workings https://github.com/jameshalsall/php-benchmarks
I found Ember to be a little more approachable and a lot less opinionated than angular, but I have only dabbled in each.
cake is moving to 3.0 and any 2.x cakeapp will need a lot of refactoring to be functional in 3.x. (ORM!) [migration from 2.x to 3.0](http://book.cakephp.org/3.0/en/appendices/3-0-migration-guide.html) dont go for a new app in cake right now...
I can't quite agree with meandthebean. While I see the attractiveness of Symfony and/or Laravel, I still think CakePHP is a very nice framework that works quite well. The main thing with Cake is to get in the "Convention before configuration" mindset. If you name your tables, your columns, your models and your controllers as Cake expects them, there is soooo much happening automagically without you having to lift a finger. Also, it gets you started superquick with the abillity to bake basic models, controllers and views from your table structure. If of course you sit on your legacy shit table and say "no, we can't change the index field name to 'id', it has to be 'flawarble'", well, then you are in for a world of hurt. On Angular: The learning curve is steep, but by far not as steep as for example Ember.js. The main problem with angular is that the original documentation sucks donkey balls because it expects you to already know the stuff you are looking for. Work through one or two tutorials, take a day off and watch most of the videos on https://egghead.io/lessons and you are well on your way. Yes, you will do things wrong in the beginning. Yes, you will try to change the DOM with jQuery and Angular will slap you on the hand and tell you "That's not how we do things around here!". Yes, you will probably refactor quite a bit of code six to eight weeks after you started. I did, too. And when I did I could reduce my linecount by 30%, make the whole thing smarter, better working and easier to understand for others. Again, it's a mindset thing. Embrace the magic, embrace the two-way binding, embrace ng-class and ng-animate and that you can write your own directives and suddenly you will find that you don't need a jQuery plugin to sort your table, you can just tell angular to sort your stupid data by your stupid field name and be done with it. Long story short: don't be so timid and embrace the change. You are in for a wild ride, but it's gonna be fun if you let it be.
Angular is more approachable then ember, if only because it has a bigger acceptance and thus more online documentation in form of blogs and video tutorials. My main "problem" with angular is, that they are not shy to break functionality between versions. Not sure if it is actually a problem...
Agreed on CakePHP, but I disagree somewhat about AngularJS. &gt; because Angular just wants to take over too much of the DOM manipulation, to the point where it's really difficult to use, for instance, an existing JQuery UI component along with it. That's the point I think: it's a framework, and everything should begin and end within the framework itself. It's meant to be a replacement for things like jQueryUI, which is a paragon of ye olde JS UI methods. Many of the same arguments you make against CakePHP (million interdependencies, structure that really hinders your ability to customize, etc.) can also be levelled against legacy UI frameworks like jQueryUI. For better or worse, the AngularJS way to create reusable UI components is to encapsulate everything inside directives. &gt; You end up having to fight the framework rather than using it alongside existing components. Yes, if you don't play by their rules (directives, for example), then the road is very bumpy, but that's not saying it's a bad road per se, just that the paradigms are so far removed that they're incompatible. An analogy might be trying to use "PHP classes" (from that horrid site) in your Laravel/Symfony/Zend app; of course you're going to be fighting the framework, but it's not necessarily because the framework is doing something wrong. Rather, it's moved forward and doesn't care to cater to the antiquated way of doing things. &gt; Also, the learning curve is insane, like, Matterhorn steep. Somewhat, yes... I think the learning curve is about 50% AngularJS, and 50% the new paradigms. If you have experience with EmberJS, or even KnockoutJS, then AngularJS is going to be much more natural to you than if you've only be using jQueryUI + spaghetti jQuery all over the place. With that said, AngularJS does ramp up quite fast once you begin to do some non-trivial interactions. There are some things that require rethinking the problem and attacking it from a different angle, and often you can't find much help on it because the domain is so new, but in the end, I feel like the result is much cleaner than hacking everything together with just jQuery/UI.
Stop dismissing it as "magic" and try and understand what problem autoloading is trying to fix, and how, and you'll get a lot further. Autoloading is simply automatic loading of files. It's a simple principle. If a class is called and hasn't been included yet, it needs to be included. A series of "register" functions can tell PHP where to potentially find the file. This means that given a basic amount of convention, files can be found quite simply. Mapping namespacing to directory structure means that finding the file should be trivial. For example, the Confirmation class in the \Projects\Reviews\Approval\ namespace will be in /Project/Reviews/Approval/Confirmation.php. Having an established pattern like that allows translation back and forth without any issues. Some comments on things you said: &gt; Hi all, I'm relatively new to (modern) PHP, being stuck using it for reasons beyond my immediate control. This here is the actual problem. It has nothing to do with flaws in the language (which there are many) and everything to do with your shitty attitude. You acknowledge your noobishness, and then simply claim that you know better and everyone else is dumb. Even PHP's most skilled programmers, who have created the frameworks that have become commonplace in modern PHP are simply too stupid to know what you figured out as a new/returning programmer. Everything you've written here reeks of superiority and a stark unwillingness to put aside your prejudices and humbly actually learn. &gt; Add a bunch of packages, download them, use autoload to !!MAGIC!! and then wonder why things are breaking in mysterious ways later down the line because some package maintainer wrote crap autoload code or some other wonderful reason. This is, as far as I can tell, horse shit. I'm not saying definitively that it's horse shit. I'm just saying that as I read that I got the vague whiff of horse manure. The package maintainer doesn't write autoload code. They merely conform to the standard format. It's composer itself that handles the autoloading, and it does a damn good job of it, if you just leave it alone and let it do it. &gt; The basic defense is that it makes things easier. You don't have to type all those imports (or require, in PHP). No, this is a straw man. It has nothing to do with "typing" and everything to do with reducing the maintenance burden caused by having long lists of `require_once`. This is code that doesn't need to be there. This is actually code that can get very, very long, on a large codebase. Not to mention, an included file can include other files, and includes can be scattered anywhere through the codebase. It's code that needs to be constantly maintained - new functionality and new files need to be added to the list. When using autoload you do not need to do so - merely create the file and use it straight away. &gt; You don't have to think about what your code is doing except when the autoload mechanism breaks. If the autoload mechanism breaks it's because you're doing everything wrong. This is a well tested and established system used by literally thousands of applications. Follow a convention (or even several) and good practises (such as namespacing your code) and autoloading is a trivial issue that will **never** break. &gt; It makes PHP perform better, because silly people aren't just blasting every possible required package on every single page. You dismiss this, but it's actually a completely valid argument. If you have 1000 classes, a given call, to an API or something, might only use 100 of them, or 20. Or 10. Why should it have to load up 990 class files it's simply never going to use. This **is** a performance improvement. And it can be a significant one in certain cases. &gt; In other words, doing things in a maintainable way is hard, autoload makes the !!MAGIC!! happen, who cares about the poor slob that has to comprehend my code. You say "maintainable" like having a long list of `require_once` that has to be constantly added to and curated is somehow more maintainable than using an established convention and doing away with that file altogether. It's just not. And as for some "poor slob". Yes, I **do** expect that the next person working on my code understands basic PHP that has been standard practise for nearly a **decade**. I think that's reasonable. This is not "!!MAGIC!!" as you derisively term it. It's the fundamental concept of "convention above configuration". &gt; As an aside, magic was the reason I passed over the various frameworks. I'm going to be blunt here: "Magic" is just your way of saying "I don't understand, and can't be bothered learning". There's no magic. It's all just code. It's learnable. It's comprehensible. If you tried to learn it instead of sticking your fingers in your ears and going "la la la" you might make more progress and become a better programmer. Grumping about how "back in my day we didn't need all this fancy stuff, and we don't need it now" is asinine.
That your response after 15 minutes back into a new language is to rant instead of learn... speaks very poorly of you.
Well, if you're truly stuck with these decisions I'll say some nice things about these frameworks to try to lessen the blow :) CakePHP is easy to learn. By using it, I started to grasp MVC, which I couldn't wrap my head around very well before. It also, for better or worse, does a lot of auto-magic, which means there's less code to write for doing common things like pagination, forms, etc. (though god help you if you want to customize these very much). All in all, it depends on how large the project is and how customizable you need it. If this is an Angular app, maybe you're only using the backend as a glorified data REST API? In that case you might be OK. As for Angular, I'll admit that the problem I had with it might just boil down to me not understanding the finer points of how I should be doing something The Angular Way, as I'm still just a bit above a novice at it. (That's not the case with Cake, though. I know that framework inside-out by now and I feel confident in pointing out its flaws as actual flaws). Also, once you get over the learning curve, it *is* as wonderful as most people say because it's very easy and quick to write code that links up your data to the visual presentation. The problem I had in Angular was trying to bring in a jQuery UI component into an app, but I have a feeling that, in the end, the easier route would have been to just re-implement the functionality in pure Angular.
Before I begin, have you tried checking out something like SlimPHP + popular php projects to handle ORM, logging, etc.? Seems like that would be an easier move than going to a full-stack framework. Just saying, in case it hasn't been considered. I think choosing a framework has a lot to do with how opinionated you want your framework to be. If it is very opinionated and your opinions on things differ, then it can be quite annoying to use the framework. --- Disclaimer: I am a CakePHP core developer and thus a bit biased towards it. My day job is not writing CakePHP code, but rather doing Android development and operations related work. I've also been writing SF code for the past four years - as have my co-workers, one of whom is @zackkitzmiller, ex-CI core dev and now a laravel fanatic - so barring freelance, I think I have enough experience to talk about frameworks at large. I'm also aware that /r/PHP has an insane amount of hate for CakePHP, so I don't expect to get any upvotes for this. A few years ago, CakePHP was in the 1.x line, which I'll agree holds not a candle against current existing frameworks. It's a quite a bit different from 2.x, and the same holds for the upcoming 3.x. Feel free to pester me about any of this. For modern CakePHP applications, you can use the Datamapper pattern just fine using the CakeEntity plugin, and the 3.x ORM is pretty similar to any ORM in other PHP frameworks. I've also seen people use Doctrine's MongoDB layer within CakePHP just fine with no real BC issues - in fact, a few CakePHP core developers were working on that project - so I do not see how using a different ORM would be an issue. I've not had any problem using something like Monolog or external dependency management via Composer with CakePHP applications. Here is the [composer project template](https://github.com/FriendsOfCake/app-template) I base any freelance work on. I also use the [crud plugin](https://github.com/FriendsOfCake/crud) to quickly create apis. That's one strength CakePHP has always had that other frameworks are now catching up to - it's scaffolding layer has always been pretty top-notch. In the interest of having a balanced discourse, here are things I think CakePHP can do better (and could/will do better in 3.x): - The ORM isn't really an ORM. Like I said, CakeEntity fixes that, and this is solved completely in 3.x, but it's still an annoyance. - Our documentation is sometimes a bit difficult to navigate. There is *quite* a bit of official documentation - moreso than almost all other PHP frameworks (Symfony excluded) - but sometimes it can be difficult to find what you need. - The routing layer can be a mess for multi-tenant applications. It's not difficult, just annoying. SF 1.x got this correct (I haven't used SF2 enough to have an opinion on it yet) and CakePHP hasn't really tackled this problem. - Our view layer is a bit different from other frameworks. Others have a tendency to just add functions to the global scope, which makes it easier to use, which there is a bit more configuration than I'd like for CakePHP. I use a helper autoloader, but not everyone does. - Composer adoption is hit or miss. All the major plugins and contributors have adopted it within our community, but not all 2.x plugins use Composer just yet. - No dependency injection in the core. I think we've stayed away from containers because they are hard for new developers to understand, but it's definitely something on our radar. - No built-in queuing library. There are a ton of plugins for this, but CakePHP hasn't had a hard opinion on this. The 3.x line might include an official package recommendation, which is nice, but I definitely think pushing this out to the community would help. Many PHP developers seem to think cron is an adequate solution here, and it's really not. If you are having specific issues with CakePHP, *please* PM me so I can help your team work them out. Also, hop onto our IRC channel on freenode (I'm @savant there) or Google Groups. --- I personally use BackboneJS - though it's quite opinionated about things - though our new JS guys have been using ReactJS for our [main application map page](http://seatgeek.com/orioles-at-yankees-tickets/4-8-2014-bronx-new-york-yankee-stadium/mlb/1893671/) and they seem to like it. The datamodel is a bit too weird for me, but performance seems excellent for the amount of data we through at it.
edit: tried the slash, refreshed. still nothing. [Here](http://imgur.com/yVXYkm6) is my folder, detail.php is the file I'm currently working on. and the upload is in the same folder. 
Oh, check us out in /r/CakePHP! We won't bite and hopefully there is some interesting content, should you choose CakePHP as your PHP framework. Regardless, good luck with whatever framework you end up using!
Really? That's oddly opposite to what I've heard! I'm interested to give Angular a look.
Yeah, I think you're right. Ember is still a bit of a moving target, and doesn't really have the base Angular has. A lot of the documentation, tutorials, etc, are a bit out of date.
Bafta la recrutare!
It's not, but it's an exact description of what he mentioned. Wrapping a section of code in its own process space.
We only allow remote positions in /r/PHP.
Thanks so much for the information, mnapoli! I've added two more hooks (C_HOOK_PARAMETER_LOGIC and C_HOOK_ROUTE_VALIDATION) that allow you to control the validation and retrieval of a callable entity. With these, you can now change the logic dispatch logic via C_HOOK_DISPATCH to control class instantiation. I've also updated the code to return routes with more than 2 items. /** * Return the route entity * @return mixed */ protected function hookRouteLogic() { // Get the raw route $route = $this-&gt;getRoute(); // If the route contains two items and is a callable class method if (is_array($route) &amp;&amp; count($route) == 2 &amp;&amp; method_exists($route[0], $route[1])) { // Return a usable array for static and non-static methods return array(new $route[0], $route[1]); } // Else just return the item else // ...
I agree fully with your comment on cakephp. It's a terrible framework to pick in ***2014***. Who ever made that decision made it out of ignorance.
http://i.imgur.com/Os0s5vO.jpg
The apps I developed with Cake were new apps and I feel I followed Cake convention, (even (ugh) pluralized table names). My problem was when going beyond a simple app and trying to implement my own form field types, using the Model library for more complex queries (joins in Cake are a headache), and doing more complicated views (more modular templates). Cake has some real problems with extending functionality. For the custom form field I ended up needing to copy-paste large parts of the Cake core and tell Cake to use that code instead so that I could customize a part of it. With better dependency management that should have been much easier. &gt; you will find that you don't need a jQuery plugin to sort your table, you can just tell angular to sort your stupid data by your stupid field name and be done with it. OP said they are porting a jQuery project over to angular. I wanted to point out that porting existing jQuery libraries, like jQuery UI, can be difficult and it's important to keep that in mind. Edit: For the record, I didn't downvote you. People need to realize downvotes are for comments that don't add to the discussion, which you did, not for opinions they don't agree with.
What part of these frameworks makes them too heavy/slow for writing api's in?
You could use [Klein][klein-v2] for that. Klein comes with a DataCollection class that it internally uses for GET/POST/Cookie/etc variable collections and has the following abilities: - [Default values][default-vals]: `$params-&gt;get('remember_me', false); // Default to false if not provided` - [Attribute masking][attribute-masking]: `$params-&gt;all(['name', 'type']); // Only get the name and type` - [Validations][validation]: `$service-&gt;validateParam('key', 'The key was invalid')-&gt;isHex()-&gt;isLen(32);` Klein itself is an HTTP routing/middleware library, but its composer installable and you can easily just use the collections/validation classes without using the actual routing library. :) [klein-v2]: https://github.com/chriso/klein.php [default-vals]: https://github.com/chriso/klein.php/blob/376fd62813eb2008f3644e206d03002a3250122a/src/Klein/DataCollection/DataCollection.php#L150-L167 [attribute-masking]: https://github.com/chriso/klein.php/blob/376fd62813eb2008f3644e206d03002a3250122a/src/Klein/DataCollection/DataCollection.php#L107-L148 [validation]: https://github.com/chriso/klein.php/blob/376fd62813eb2008f3644e206d03002a3250122a/src/Klein/Validator.php
thanks, I'll check it out
Oh I know that 3.0 is still in beta. I also think that most issues with the 2.x line are either non-issues or can easily be overcome. In fact, I regularly blog about the 2.x line. I agree that other frameworks may natively implement some feature or another - who could live without a smiley helper! - which can be a great boon to developers. My current best example is laravel's Queue abstraction. It's a great idea for new developers and those not used to *real* web development[1]. Dependency Injection is another - I pointed this one out - that could be useful for some developers. I think the reason why the CakePHP project hasn't included some of these things is because our framework is quite old and we've been afraid of BC breakage. That's a shitty excuse, I know, but it's the reason why we don't have 24135 features. We also have a very opinionated framework, which irks some people, but it's based on our experience writing applications. Same for other frameworks. Otwell has certain ideas about how to write apps, and that's how he's written laravel. Same for Fabien, and it's the same for us. I'm of the opinion that any limitations in a framework are usually perceived ones caused by a developer's lack of knowledge. For instance, I don't like React because I don't really understand the model with which one should pass data in. Doesn't mean it's a terrible framework. [1] I wish Laravel used a community project and not something custom, but you can't win them all.
Great read! "How do I “think in AngularJS” if I have a jQuery background?" http://stackoverflow.com/questions/14994391/how-do-i-think-in-angularjs-if-i-have-a-jquery-background
To answer these in order: 1. I don't know very much about Doctrine and I've never used anything Doctrine so I can't really comment. I guess you could say it's not really supposed to be better than Doctrine as much as an alternative for those who prefer it for whatever reason - or maybe even just a fun project that I had fun building and figured someone else could make use of. When I developed this I wasn't aware of Doctrine's Cache Component and only found out that it even existed when you linked to it just now. Originally this was developed as part of something else for a friend. They were trying to embed a news feed into their site from a site that didn't support RSS, so I wrote a bit of code that cached the fetched news stories on disk as JSON then I scratched that and rewrote it as this because I wasn't sure if they had APC or MySQL available or whatever. A good use case for this is when I'm developing on windows and deploying on linux. Windows doesn't have APC available but linux does so the APCAdapter checks to see if APC is available and if not falls back to the next one on the list - hence you may not know exactly what adapter you're going to get and to be honest you don't really have to care. You just specify an array of adapters and it uses the first one it can. 1. AdapterManager returns the first "working" adapter because for various reasons some of them might not be "working". For example, you could try to use the MySQL adapter but your MySQL server might be down or not configured on the server you're running the application on at that point, or you might setup APC caching and have that on your production server but not on your development server so it will fall back to the first one that's available. Currently there are a few issues with this such as the MySQL adapter always says it's available even it can't connect to MySQL. I plan to rectify this at some point so that it will try to connect to MySQL and then return false on failure so that AdapterManager can fail over quietly to another adapter (or DummyAdapter if none of the others are available). The ``getPriority()`` method on the adapters is used to determine the priority to load the adapters in. For example, you want to try APC before file based caching or DummyCaching because it's faster, therefore the adapters are ordered by the integer returned by the static ``getPriority()`` method. EDIT: It does actually say in the docs what ``getPriority()`` does :) I refer you to this: &gt;Description: Returns an integer denoting priorty of the adapter in question. This determines the order in which adapters are loaded and used. 1. I absolutely agree with you on this. It totally could. The site you saw is a github pages site I threw together to get something down from README.md. It could do with more docs and better docs. I'm thinking of ripping it out and building a new one with better docs but I'm quite busy at the moment. 1. Another excellent point - unit tests are also on the roadmap if/when I have time.
Sorry very new to all this and appericate any help I can get, I checked it again clicking the 6. this was the [orginal panel](http://imgur.com/bftZaYD). And I saw that the URL was missing the www5 directory. I added that in at the img tag and tried [again](http://imgur.com/w4fZPPH). But that is where all the uploaded images [are](http://imgur.com/bYf9PUT)
[Phinx is open source](https://github.com/robmorgan/phinx). Why not make a PR?
As a former CakePHP cheerleader and user my advice would be to go with Symfony instead.
The full path is http://localhost/LenderTemp/www5/uploads/ChromeConsole.PNG The file extension is stored in the database as well [database, file extension](http://imgur.com/0Qnpb0e)
thank you!
Looks interesting. Seems you can create the schema yourself using raw SQL (`AbstractMigration::execute()`), but it does seem a small oversight not to have an interface for that. Only other complaint I'd have after glancing over the docs is the automatic primary key creation. I don't see a global way to disable that. I would prefer to have control over my primary keys without manually disabling the automatic creation for every table creation. Probably not something I'd switch to over Doctrine migrations right now, but it is a project I'll add to my watch list.
&gt; The full path is http://localhost/LenderTemp/www5/uploads/ChromeConsole.PNG Is that the right path? Does the image load when accessed directly at that path? &gt;The file extension is stored in the database as well database, file extension I'm not asking where you are getting the info from. I'm asking if the files themselves have the appropriate extension. I've seen plenty of php upload scripts where all files are renamed to .jpg even if they are a png or gif. Others don't use an extension at all if its not specified properly. 
- Read point 4 on [this](http://www.reddit.com/r/PHP/comments/21f8xl/release_universal_caching_library_for_php_feel/cgchbjj) comment - What is composer and why does this project need it? - What is PSR-0? Ninja Edit: If you could you open that as an issue on the repo for me so that I can have it to hand and therefore "close" it as and when I do those unit tests that would be awesome.
&gt;Is that the right path? Does the image load when accessed directly at that path? It won't open in the browser,saying Object not found. Why would it say that, when I can see it myself in that folder [C:\xampp\htdocs\LenderTemp\www5\uploads](http://imgur.com/yVXYkm6) I'm currenlty working on the detail.php page. The script I used to upload is this. To my knowledge I didn't change the file type or the extension with the upload. Just the directory where it is stored. &lt;?php session_start(); $username = $_SESSION['username']; //$lastid = $_SESSION['lastid']; $first_name = $_SESSION['first_name']; //$lastid = mysql_insert_id(); $con = mysql_connect("localhost","root"); if(!$con){ die("Can not connect: " . mysql_error()); } $image1 = $_FILES['image1']['name']; $image2 = $_FILES['image2']['name']; $image3 = $_FILES['image3']['name']; $image4 = $_FILES['image4']['name']; $image5 = $_FILES['image5']['name']; $tmp_name_1 = $_FILES['image1']['tmp_name']; $tmp_name_2 = $_FILES['image2']['tmp_name']; $tmp_name_3 = $_FILES['image3']['tmp_name']; $tmp_name_4 = $_FILES['image4']['tmp_name']; $tmp_name_5 = $_FILES['image5']['tmp_name']; $location = 'uploads/ '; move_uploaded_file($tmp_name_1, $location.$image1); move_uploaded_file($tmp_name_2, $location.$image2); move_uploaded_file($tmp_name_3, $location.$image3); move_uploaded_file($tmp_name_4, $location.$image4); move_uploaded_file($tmp_name_5, $location.$image5); if(isset($_POST['submit'])){ mysql_select_db("lenders",$con); $sql = "INSERT INTO class (username, main_section, category, heading, text, rental_fee, deposit, delivery, location, image1, image2, image3, image4, image5, youtube, keywords , name, phone) values ('$username','$_POST[main_section]','$_POST[category]','$_POST[heading]','$_POST[text]','$_POST[rental_fee]','$_POST[deposit]','$_POST[delivery]','$_POST[location]','$image1','$image2','$image3','$image4','$image5','$_POST[youtube]','$_POST[keywords]','$_POST[name]','$_POST[phone]')"; if (!mysql_query($sql, $con)) { die('Error: ' . mysql_error()); } } 
&gt;Resource interpreted as Image but transferred with MIME type text/html What is on line 175 of detail.php? What web server are you using? If you put the URL of the image into the browser directly does it show the image?
Nothing to much, its the [start](http://imgur.com/HHJTfw2) of the html. I'm using xammp, Yeah once I put the URL in it is saying object not found, but I can see it in my uploads folder. &gt;Resource interpreted as Image but transferred with MIME type text/html just goggling that now, see what is coming up. 
Im just going by the numerous throughput benchmarks there are out there as well as my own personal experience with Laravel. They are just heavy frameworks. A clean install of Laravel with with a simple Hello World route has a memory footprint of about ~12mb. Throw a couple basic Eloquent queries in there and it's 18mb. For comparison, Wordpress is 5mb, while a micro framework is ~1mb. Symfony and Zend are even heavier than Laravel. I couldn't imagine a public API (or any super large site) that could potentially be getting 1000s of requests/minute being run off of those three frameworks without ballooning the hosting costs. Memory optimized AWS servers aren't cheap... EDIT: also, Cake is also very heavy. Heavier than Laravel actually.
No tests? No composer? No autoloader? No PSR? Those are pretty standard now a days, and libraries are pretty useless without them. Take a look at the following libraries for guidance. https://github.com/titon/cache https://github.com/doctrine/cache
Thanks for that. I know the concept, just didn't get the PR acronym. In short, I'll give it a go
Thanks for the response! My mistake on #2-- ~~I looked at the implementations and not the interface~~ I cannot read docs, apparently! :) As for not caring about which adapter you get, that's a good point, one I had not considered. And if you use a generator to recreate the data, you could basically have failover caching should something go wrong with one cache.
PSR-0 and composer are related. They are a standardized way to organize and distribute PHP libraries, so that when someone's working on a project they just edit their composer.json file to say "I want THIS version of THIS library" Composer will then figure out where the library lives, download it, and keep track of it. Note that the version doesn't have to be constant, it can be set the the latest release tag on GItHub, so when you make a new release, everyone that uses your library will get automatically updated when they run the "composer update" command. When you're using a dozen libraries in a project (PDF generation, Caching, anything else), manually updating all of these with every release would be tedious, so with Composer, a developer can just run the update, then focus on actually fixing any bugs that arise insetad of trying to track down all the repositories individualy. PSR-0 is a standard for organizing the files and classes in your project so that many individual libraries can work together without interfering. So in PSR-0, the files for a library are stored in a structure similar to /vendor/DEVELOPER/LIBRARY/&lt;files&gt; So even if I have two libraries named "awesome-caching", when I go to use one, as a developer, I can be explicit and say $CacheEngine = new \lenswipe\AwesomeCaching\Engine(); This ties in with Composer. When I'm using Composer to manage libraries, it comes with what's called an Autoloader. The autoloader is a file that composer generates in my project that I can include at the top of any PHP script. And as long as that file is included, every single class from every library becomes *automatically* avaialble to me. So in the future when I want a new Excel generation library, I add it to my composer.json, run "compsoer update" to download it. And immedaitely, from anywhere in my project I can type new \developer\ExcelLib\App(); and get access to that library.
&gt; uploads directory all right the file extensions. Just humor me and turn on the file extensions so you can actually see them. The screenshot you sent still has no extensions. Its really kinda silly (in my opinion) to hide extensions from yourself when developing anything.
&gt;When you get Memcached worked in it will probably be much more viable for a lot more people That's coming. &gt;does it have the ability to fall back onto an alternate caching method if the primary become unavailable? Sort of, yes. The idea is when you create an instance of the Cache() class, you pass it's constructor an array of one or more caching methods with the array key being the name of the adapter you want to use. It will then go through each one until it finds one that's "available". So essentially, yes. Except there is no "primary adapter" you just pass in an array of adapters you want to use and it will go through them until it finds one that it can use. If it can't find any, it will just silently fall back to DummyAdapter so that you don't get any exceptions.
With PHP you'll be limited by the number of CPU's on your machine - or the number of fastcgi/fpm procs you can run - not the amount of memory. Even on EC2, memory is cheap in comparison to CPU overhead. And the memory costs for using one framework over no framework is essentially null in comparison to the development cost of essentially writing a custom framework.
In my experience none stand above the rest and all have their drawbacks, especially when you just need to getting something slightly custom up and running. We most recently used CS Cart and it was not terrible. http://www.cs-cart.com/
&gt;Thanks for the response! My mistake on #2-- I looked at the implementations and not the interface I cannot read docs, apparently! :) haha, no problem &gt; And if you use a generator to recreate the data, you could basically have failover caching should something go wrong with one cache. Well sort of - in this case if an adapter isn't available it just returns false for ``isUsable()`` or whatever the method is called (I forget now). until it bubbles down to DummyAdapter which is **always** available/usable. DummyAdapter then returns false for every cache hit which would then just call the generator (if you supplied one).
If you can't access the image file directly in your browser then your Apache web server is not working right. PHP is probably not the issue. Try restarting it from the XAMMP Control Panel. If you have *Svc* checked try unchecking it.
I have used cs cart and it has been terrible :P *edit: Try updating it from a few versions behind, it can take an awful long time and it's a painful experience. Some areas are "blocks" which is markup stored in the database, would rather it just be a separate file tbh, Uses some weird templating system, backend is awful &amp; slow, Isn't it built on top of X-cart? Which really is the worst thing ever.
NP. Hmm. I may be out of ideas to try without actual access. So when you visit http://localhost/LenderTemp/www5/trailer.jpeg you get a 404 but when you visit http://localhost/LenderTemp/www5/detail.php you get a valid document? Anything odd in your .htaccess file? 
Excuse my ignorance but what is Svc and how do I check it? Goggling is comign up nothing in regards, Apaches and Svc? going to restart the whole laptop, been in heribnate mode for quite sometime. 
What about PhalconPHP? It boasts about how fast it is in comparison to those you've suggested. Maybe too new, though I'd like to try it for sure: http://phalconphp.com/en/
Great! I'll have a closer look at this later.
[XAMPP](http://www.apachefriends.org/index.html) installs the [Apache](https://httpd.apache.org/) web server. If you open the XAMPP Control Panel you will see Apache under Modules and a start and stop button. There is also a checkbox that says *Svc* which means to run it as a service. You can try running it with and without that checked.
Looks good! Your code is very clean and everything is well tested. I like it :)
&gt; no wen I visit http://localhost/LenderTemp/www5/uploads/trailer.jpeg I get a 404. yeah. that was a typo on my part. Just as a test... Id try making a new folder called test_images or something in the www5 folder and putting trailer.jpeg in there. then visit http://localhost/LenderTemp/www5/test_images/trailer.jpeg and see what you get. If all the above info is correct and there is no .htaccess file rewriting anything... maybe there is something in your config that is disallowing access to that uploads directory. Other than that, I'm all out of guesses.
Prevouisly it was had a red x, Stopped it and ticked it, started it up again. refreshed page still the same. Svc I presume is this on my [control panel](http://imgur.com/3u4kfzC)
since the restart I have been messing around, I can now get the photo onto localhost, if I click the file and open with chrome, then change the htdocs to localhost. but for some reason there is "20%" in front of the file name. why is that? would the file have been altered in someway with the upload? [screen shot.](http://imgur.com/h3GZ0pv) 
Thanks, buddy :)
:) if you do run into issues, open them in the "issues" section of the repo, rather than posting them on here - because that's where I would normally look for that kind of stuff that needs fixing.
True. I opted for this approach to maximise testability and portability; it can be stored in a dependency injection container in another project and swapped with a mock when it comes to testing. If it relied on static methods then it cannot be mocked.
Ads are pretty high priority given they're how Facebook makes most of its money. The ads system is VERY complex, especially with some of the newer features like website custom audiences, and I don't pretend to understand all of it. A lot of the targeting options are unprecedented in an advertising system (at least with the granularity you can get with Facebook targeting). I'm a frontend developer mainly dealing with JavaScript so I don't know too much about how the lower-level backend code works. There's PHP code for some stuff but also C++ code for some of the actual ad ranking logic. I don't think it's fair to say that all reps are clueless. It probably varies from person to person, like any company you can get people that know the product very intimately and are aware of every little detail, while others may be new to the product or not have such a broad depth of knowledge. 
Look over the first 10ish pages of /r/entrepreneur I'm on my phone and can't find the right post, but there was one recently where people were discussing a lot of different platforms. Even if you can't find that thread, there are pots of ecommerce posts in there that can help.
WooCommerce has been pretty good if you're on WordPress. Actually similar to Magento. Oh, Magento. Magento does *a lot* out of the bag but you are correct about the admin. You might look at Magento GO. It's their hosted version. Ecwid is an interesting solution. It's embedded via JS and you have the entire admin/processing on their side. Looking at their pricing it seems to have gone up. You used to get 100 products for free. [Cart32](http://www.cart32.com/) is another option. Looks very robust and customizable.
looks like you have a space before the filename. **edit:** yep.. $location = 'uploads/ '; is the culprit. it should be $location = 'uploads/'; when you move the file to its final location it is inserting a space in the filename. 
**Since you know where all others fail and you obviously know very well what you need, why not roll your own?** Hire a developer and build your dream platform. Much better than the one size fits all solutions out there.
Prestashop just released the 1.6 version with brand new desirable themes.
Will do.
http://en.wikipedia.org/wiki/Singleton_pattern &gt; 
=)
AngularJS isn't a drop-in replacement for jQuery. They can ultimately do the same things, but they come at it from fundamentally different starting points. Is your application a "single page app"? If not, Angular is probably the wrong choice. I'm currently working on an AngularJS application that also uses jQuery, for example. There is some overlap, but for the most part they are designed for different things. If it IS a single page app, and it's just a nightmare of jQuery AJAX callbacks and heavy DOM manipulation, then Angular will be a god send. Like others said, the learning curve is pretty steep, but ultimately the framework is pretty simple once you understand what it does and doesn't do. I used to use and quite enjoy CakePHP a lot back in the 1.x days. It was a big step up compared to most PHP frameworks of the time. I couldn't recommend it today, however. Even with the 2.x version. ESPECIALLY if you're trying to refactor an existing application. Cake is kind of an all or nothing proposition for the most part. A lot of it is pretty tightly coupled, so it'd be extremely difficult to start adding Cake components to an existing custom framework. I'd argue the only reason to be using CakePHP these days is because it's quite easy to learn, is generally well documented, there are lots of good examples to work from, and you get almost everything you need "out of the box". CakePHP doesn't ask you to make many architecture decisions, so it's very easy to get up and running quickly. That said, for your uses, something more slim and modular like Silex (a subset of Symfony) would be much easier/logical to start with. I'd basically just start with the routing and controllers, and add in more Symfony components and 3rd party libs as appropriate over time. You'd also be able to more easily plop in something like Doctrine or Propel and gradually refactor your data access over to repository classes that then gradually swap (what I presume are) raw queries over to prepared statements. If you were to refactor an existing app with CakePHP, you'd basically have to re-write the entire thing.
I'm aware of the singleton pattern, but it's also considered an anti-pattern that should be used sparingly. Personally, I didn't see it necessary to design my class to the singleton. Also, by utilising a good dependency inject container like [Pimple](https://github.com/fabpot/Pimple), you can create a single, globally accessible instance of the class, while still maximising testability, rendering the singleton pattern redundant. As for putting the functions in a class; you make a valid point and I suppose all the code could just exist inside of a namespace without the class. But then it would lose the ability to be mocked and tested. I opted for the class to keep it contained and try to adhere to modern coding standards.
Starred! I do a lot of text to speech with telephony and this will certainly come in handy.
Like a thread. Which is what one could understand `async` do (simple multithreading).
I'll second this; woocommerce with WP has been fantastic, especially since you get the flexibility wordpress offers and an awesome cart that support plugins like UPS shipping calculators etc..
Yes. I haven't used it in awhile. It used to say Svc but they changed it to Service.
Thanks sir/ma'am, I shall have a gander!
Sylius actually looks very promising, it looks nicely customisable. If you had some devs that knew PHP then you'd be set.
Because I don't have enough time to dedicate to a very delicate and complex system which is very time consuming &amp; open to liability. I'm looking for a system that's already set up, which myself (and other developers on my team) can work around, refer to docs, speak to an existing community.
I would suggest looking into [Aura.Web](https://github.com/auraphp/Aura.Web) . While not as *famous* as Symfony HTTP Foundation, this library is totally decoupled and can be used anywhere without making any assumptions on how to use it.
Thanks for your input but I'm looking for a self-hosted, one off cost solution.
I figured it out in another comment, the upload is adding a space at the beginning and it looks like the browser is picking up on that, but the outputs aren't. so I have to remove the white spaces at the insert and it should work. Thank you for help, really appreciate it. 
Hah, we do have php devs, just not all are fully comfortable with MVC. Saying that it's hard to commit to something like this because you don't know if you're going to run into a problem that nobody has experienced before. It's nice to know that if you want to do something specifically custom you can chat to the company who made it, create a ticket, and resolve your problem. It looks brilliant, though it's hard to tell on the surface (without installing it) how easy it is to mess around with the templates because the docs don't exist yet! Looks like some of it is in twig too so maybe that mean's it'll be ok but I am yet to dig around!
Thats fine, but not everyone writes a rest api for everything. Most sites aren't single-page javascript apps either. Thats where a larger framework is most useful, as you end up rewriting the bits that you otherwise would get for free. At the end of the day though, use what works, so if that approach works for you, cool :)
A simple space is to blame. Haha. Glad to hear you got it working.
but that won't solve the problem full stop will it? I need to strip the white spaces at the upload and insert, would be a better way to solve, wouldn't it?
Thanks :)
Hmmm, maybe you'd need some more experienced devs to pull off using something like this then. I can't judge your employees without knowing anything about them! GL in any case. Twig would be very nice. Just my opinion too, but, Wordpress is one of those things where, it's a jack of all trades, but a master of none. 
implement what? implement the new PSR in my caching class or implement the new PSR?
Prestashop is self hosted
Writes *Memcached* all the time, but use the *Memcache* class. Please write a little better code to illustrate good examples for your readers: Everything in global namespace, not even functions or classes. Echo directly instead of returning a value from a function/class. Remember to escape data: echo 'First Name - ' . $member['first_name'] . '&lt;br/&gt;'; echo 'Last Name - ' . $member['last_name'] . '&lt;br/&gt;'; echo 'Email - ' . $member['email'] . '&lt;br/&gt;'; A Secure Password Generator, which generates passwords worse than the input: thedomain/passwords/ This should be burned with fire. A logger which might block other requests from writing logs if you have multiple requests in the same minute (Y-m-d): thedomain/a-better-approach-to-log-errors-in-php/
Magento is fine if you know what you are doing.
Was referring to being clueless specifically with what is going on with PHP errors showing up occasionally, etc. Not overall, they are (usually) helpful with general issues and questions on the marketing / targeting side, etc. The one thing that threw me off though - the errors being displayed. I do recognize the scaling issues, especially targeting at that scale and I'm impressed that its been pulled off :) Anyways, was just curious. Not meaning to be too anti-facebook, we still do ads and build stuff for your platform all the time.
Awesome! Funnily enough I was actually looking for something like this the other day. I'll certainly be including this in my project :) 
Oh shit, for some reason I always thought this was both their hosting &amp; a cost per year. I thought I found a page that said it was like $2000 a year. This actually might be the winner. Thanks for pointing out I was wrong :)
Yeah I did try set it up locally earlier, it was even slow in the back end on a MAMP3 macbook i7 lol.
I haven't seen any PHP errors myself. I have seen a lot of strange and unhelpful errors though. Power Editor exposes some API errors to the user, and these messages were designed to be helpful to developers, not to end users. We've got some very ambitious plans this year around totally revamping Power Editor, including more helpful error messages. Lots of stuff that'll make the platform much friendlier :)
It would be best for you to strip out any invalid characters on upload. I usually do something like renaming to the timestamp or md5 hash of the file. (or both timestamp_md5hash.jpg) that way you dont have to worry about removing spaces or other inappropriate characters. untested example using your code: &lt;?php session_start(); $username = $_SESSION['username']; //$lastid = $_SESSION['lastid']; $first_name = $_SESSION['first_name']; //$lastid = mysql_insert_id(); $con = mysql_connect("localhost","root"); if(!$con){ die("Can not connect: " . mysql_error()); } $location = 'uploads/'; $count = 1; while($count &lt;= 5){ $ext = end(explode(".", $_FILES['image'.$count]['name'])); $new_image = time().'_'.md5($_FILES['image'.$count]['name']).'.'.$ext; move_uploaded_file($_FILES['image'.$count]['tmp_name'], $location.$new_image); $image = 'image'.$count; $$image = $new_image; // only needed for the sql insert below. $count++; } if(isset($_POST['submit'])){ mysql_select_db("lenders",$con); $sql = "INSERT INTO class (username, main_section, category, heading, text, rental_fee, deposit, delivery, location, image1, image2, image3, image4, image5, youtube, keywords , name, phone) values ('$username','$_POST[main_section]','$_POST[category]','$_POST[heading]','$_POST[text]','$_POST[rental_fee]','$_POST[deposit]','$_POST[delivery]','$_POST[location]','$image1','$image2','$image3','$image4','$image5','$_POST[youtube]','$_POST[keywords]','$_POST[name]','$_POST[phone]')"; if (!mysql_query($sql, $con)) { die('Error: ' . mysql_error()); } } That feels really hacky to me but I wanted to rewrite as little of your code as possible.
Just FYI. the space issue is not at your insert into the DB... its when you move the file into uploads. It is renamed with the space in the filename. 
Prestashop uses the Smarty template engine. That is the new syntax you are seeing.
We don't know anything about your project or team, so take our advice with a grain of salt. What I gather from your disliking Wordpress and Magento (bloatware), you're faced with the compromise that you either stick with Magento, playing it safe and relying on the huge community for support. Or you take a chance with something small, lean, and new like Sylius. I would mention that while Sylius doesn't have much documentation and community behind it - Symphony (which it's built upon) does have a large user and support base. Make sure what you choose is the right fit for your team as well. Ultimately, your development team is going to be responsible for building and maintaining the codebase (whether you've written 20% of it or 80% of it yourselves).
Wait.. what? "New syntax" and "Smarty" in one sentence?
I find your point quite sound, but your tone reads to me as a bit strong. You're making a very good point in this and the ensuing discussion, but if you're trying to convince someone of something you generally can get further if you come across as more measured and gentle and less abrupt and confrontational. I realize it's a bit of a tangent, and I've done the same thing 10,000 times myself so "splinter in your neighbors eye, plank in your own", but I felt compelled to suggest it. Whether you do it with the classic "compliment, concern, compliment" approach or some other way, explicitly trying to help people people come around to your idea can help in this kind of discussion. Hopefully my tone or point don't feel aggressive; I can see how they might. Conversations about tone are so rare that they feel hard to start and hard to participate in. If you read my whole tangent, thanks!
I am yet to work with it so I'm not really sure yet. From various sources (and this thread being no exception) It appears to be very slow/clunky and has a bad/confusing interface in the backend. I tried running a clean install earlier locally and it was very slow (2013 macbook i7). I'm looking for something that is fine, but if you don't know what you're doing (to an extent).
I think you need to chill out.
PSR-6 Cache Interface The group PHP-FIG is doing a lot to standardize things in PHP, though PSR-6 is still only in the draft at the moment, and voting will end 27th August, so there is some time. But why not adapt to this propasal, then you are covered :) Here you can read the [PSR-6 meta document](https://github.com/Crell/fig-standards/blob/Cache/proposed/cache.md)
lol I do actually think I saw this on a website I worked on which had to be 10 years old +
Ah, thank you! Was curious if maybe Prestashop had made their own.
90% of my Prestashop work is still done with php. Smarty is really easy. [Smarty](http://www.smarty.net)
I do know Smarty. I've used it a _lot_, but it isn't exactly 'modern', and it's weird to see it being touted as "new", when there are much more capable alternatives around. Like Twig. 
I already forked it, but well its kind of a complete rewrite. There is something I really dont understand with your library - I dont understand why you load all the adapters, instead of just injecting the one cache adapter you want. Something like this $settings = array('host' =&gt; ..., ...); $adapter = new Cache\Mysql($settings); $cache = new Cache($adapter); Or $adpater = new Cache\Dummy(); $cache = new Cache($adapter); With yours, the user actually dont know which cache adapter there are used $settings = array( 'DiskAdapter' =&gt; array( 'filename' =&gt; 'foo' ), 'MySQLAdapter' =&gt; array( 'host' =&gt; 'localhost', //The hostname of your database server 'port' =&gt; 3306 //The port of your database server, if you're not sure then 3306 is usually a good idea. 'username' =&gt; 'root', //Your database username. This is the username you use to connect to MySQL 'password' =&gt; '', //This is the password for your database user 'database' =&gt; '', //This is the name of the database where your cache table is 'table' =&gt; 'cache' //This is the name of your cache table. ), 'APCAdapter' =&gt; array( 'prefix' =&gt; 'MyCache' //This is the prefix you want to use to prevent your cache objects from conflicting with other objects in the cache. This is particularly good on shared hosting. ), 'SharedMemoryAdapter' =&gt; array(), //Not yet implemented 'MemcachedAdapter' =&gt; array(), //Not yet implemented 'RedisAdapter' =&gt; array() //Not yet implemented ); Which adapter does the engine really use? - They need to look into the code to find the getPriority() in each adapter. Hope you can see what I mean
Sweet!
The clean installation with proper caching setup should not be slow at all on your machine. We run our installations in Vagrant and there are no performance issues with dataset and extension set that greatly exceeds that of a clean installation. I would look into Shopify (I know it's not PHP) or seriously explore Magento.
Prestashop also falls short in some of the same areas as Magento. Slow queries on large catalogs. But after rewriting a few of the queries it is way faster and the CPU load has improved greatly.
Twig isn't new either, but it's fantastic! Horizontal reuse? Yes, please!
Opencart is terrible. You can write extensions, but you can actually extend anything. You have to use vQmod to actually get anything done, and that's a huge fucking hack. You create XML files that execute code replacements on core files in order to get things done (as well as any other files).
Well, can't really talk about your app. I've not had such problems with Cake so far and I've done both small and medium sized projects in it. I have to admit that the last project I did in Cake has been almost a year ago, so I'm probably not up to snuff what does and doesn't go at the moment. One point I also forgot to mention is, that the Cake community is so unbelievable friendly, that it's almost as if they had never heard how to behave on the internet. I asked many a stupid question in the beginning and no bad word was ever uttered. I've yet to find another community that acts this way. &gt; OP said they are porting a jQuery project over to angular. I wanted to point out that porting existing jQuery libraries, like jQuery UI, can be difficult and it's important to keep that in mind. True - but it should be rather easy to replace jQuery UI. There are tons of prewritten directives out there that bring all ~~the boys to the yard~~ the functionality you need. Examples, you say? Okay, have a look at http://angular-ui.github.io/bootstrap/ - brings quite a few directives for common things like carousels, accordions, buttons, alerts, modals etc. etc., with bootstrapping goodness to boot. Anything else can probably be found by googling "angular &lt;name of effect I want to simulate&gt;". Honestly, it's not as bad as it sounds. &gt; For the record, I didn't downvote you. Meh, I don't care either way. As long as I can't turn my karma into money what are a few downvotes to me?
&gt; The most promising thing I could find was called "Sylius" (http://sylius.org/) which looks fantastic, BUT, it's newish, and there are no docs, it's not being supported by a company, it's only being held up by the community. You can get support for Sylius from [KNP Labs](http://sylius.com/services)
Would appreciate functionality for tagging cache items like ZF1's caching library does (and ZF2's caching library forgot for some reason). Also, I also would wait for PSR-6 to come out first.
I haven't used Drupal in a few years, I do remember trying to get Ubercart going and it being a right pain. I'm also kind of against using Drupal because the backend appears too confusing to clients.
I think you've missed the point of the library. Read through the comments, it doesn't matter what adapter the library uses. You configure a set of adapters and the library uses the first one that it can. Why does the user care which one is used? The idea is you load all the adapters **that you want to use**. The example you give is documentation showing what settings to pass to each adapter(as I believe I've repeatedly explained in this thread and in the documentation). So for example, you might not have APC available in development(particularly if you're on windows running XAMPP), so you might want to use MySQL caching instead on windows but still keep APC caching in place for hosts that can support it. The way the library is designed is to try each adapter until it finds one that it can use and then use that. Why would the user care which adapter is actually used under the hood?
&gt; Would appreciate functionality for tagging cache items like ZF1's caching library does 1. Could you be more specific? 1. Could you file an issue against the library for this? Thanks. EDIT: What do you mean by "Also, I would wait for PSR-6 to come out first." ?
Prestashop. Modules are plenty, themes are plenty, admin interface is easy, development is a breeze and theming is a non-issue. Documentation is also better than most. 
Right ok, thanks for letting me know. Maybe fork them on github and commit those improvements! :)
It certainly looks like the best option at the moment for sure!
Very nice! I did something similar years ago, was a fun exercise. I'd suggest adding currency/monetary support, as well as not limiting the max to quintillion (because why not?). https://github.com/milesj/numword
Routers should have no knowledge of controllers. They should simply return the matched route and call nothing.
Well that's the final point in the README.md - it doesn't really matter :) And good note about the PHP version - I'll add it to the repo (was using 5.5.10 for the tests).
IF you know ;) I've done some hacking on magento for work and it's just terrible. They don't follow their own standards within the core which makes it incredibly difficult to reverse engineer stuff, which you need to because the existing docs are either appalling or non existent. I've waisted so much time looking trough bad code that I really can't recommend magento. The theming system is confusing and unintuitive, although quite powerful once you get the hang of it, but then try to explain that to your designers. Magento is powerful but outdated and doesn't embrace all the advancement in the php world, nor does it feel very open (they try to sell their courses everywhere). Needless to say, I'd stay away ;)
I have some trouble using it with PostgreSQL. It won't create any tables. This was my up function, public function up() { $table = $this-&gt;table('country'); $table-&gt;addColumn('id','integer') -&gt;addColumn('name', 'string', array('limit' =&gt; 100)); $table = $this-&gt;table('post'); $table-&gt;addColumn('id','integer') -&gt;addColumn('title', 'string', array('limit' =&gt; 100)) -&gt;addColumn('user_id', 'integer'); $table-&gt;addForeignKey('user_id', 'user', 'id'); $table = $this-&gt;table('user'); $table-&gt;addColumn('id','integer') -&gt;addColumn('name', 'string', array('limit' =&gt; 100)) -&gt;addColumn('country_id', 'integer'); $table-&gt;addForeignKey('country_id', 'country', 'id'); } 
Well I might implement PSR-6 in the next breaking change version.
&gt; I do cringe when we get Wordpress sites through the door as they're often setup really badly I'd still give it a shot though. Wordpress has the unfortunate reputation of being a badly set up system. And indeed, without the right knowledge, you can really kludge it up. It is pretty clunky at times though (mostly due to all the legacy code clogging it up) but it's pretty sleek these days when set up properly. The last few versions have really smoothed out a lot of little quirks with the layout and functionality. WooCommerce is an extremely nice e-commerce solution. It would be a shame not to at least investigate it. I'd almost go so far as to suggest that it could rival Magento in some respects (with the addition of a few premium add-ons) without all the code overhead.
I've been specializing in cs-cart for 3 years now. If your updates fail or have problems it is almost always because you modified core files. You need to stick to the addons function and you'll be fine. I've authored over 50 addons and countless custom code for cs-cart. The platform is solid. Its about as powerful as Magento without all the suck that is Magento.
I'll never understand this massive stigma against WordPress. I think people (including developers) are really ignorant towards it.
It's because they've seen its insides.
I was more on about it taking half a day to go through several particular versions. And CS Cart even had to login to fix it on a couple of occasions. The backend in my opinion is clunky &amp; confusing to clients. I would hardly say it's solid.
We had several very capable developers look at Magento. Even hired a former Magento dev, and when presented with Prestashop as an alternative the decision was easy to make. Presta is not perfect, but was way better than Magento.
Former Cake, now Laravel dev checking in. I'd echo these sentiments. Laravel's "hype" is pretty well deserved - especially if you compare to cake. It is a much more productive framework and avoids a lot of Cake's "magic". The syntax is also much nicer (Cake's array soup of an ORM is nightmarish).
I could be completely wrong, but my concern is that I presume it's more for somebody that doesn't really code &amp; with it being a Wordpress plugin I presume it's taken parts of Wordpress's core. I also presume it is not going to be object orientated? I'll certainly take a look at it nevertheless, a lot of people have suggested it.
That's a cool trick. You can also use numberwang with PHP 5.7+: const STATUS_0 = 43.1 § 9; const STATUS_1 = sqrt(INF) § 0; const STATUS_2 = M_PI § -1; const STATUS_3 = 2.2 § 2.2; const STATUS_4 = 0xFFFF § log(7); // ... const STATUS_N = 1 § N;
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 6. [**Numbers**](http://en.wikipedia.org/wiki/ISO_31-0#Numbers) of article [**ISO 31-0**](http://en.wikipedia.org/wiki/ISO%2031-0): [](#sfw) --- &gt; &gt;See Sect. 3.3 of the Standard text. &gt; &gt;* Numbers should be printed in upright ([roman](http://en.wikipedia.org/wiki/Roman_type)) type. &gt;* ISO 31-0 (after Amendment 2) specifies that "the decimal sign is either the comma on the line or the point on the line". This follows [resolution 10](http://www.bipm.org/en/CGPM/db/22/10/) of the 22nd [CGPM](http://en.wikipedia.org/wiki/General_Conference_on_Weights_and_Measures), 2003; there is a brief reference to the history of this in &gt;* Numbers consisting of long sequences of digits can be made more readable by separating them into groups, preferably groups of three, separated by a small space. For this reason, ISO 31-0 specifies that such groups of digits should never be separated by a comma or point, as these are reserved for use as the decimal sign. &gt;* For numbers whose magnitude is less than 1, the decimal sign should be preceded by a zero. &gt;* The multiplication sign is either a cross or a half-height dot, though the latter should not be used when the dot is the decimal separator. &gt; --- ^Interesting: [^ISO ^31](http://en.wikipedia.org/wiki/ISO_31) ^| [^ISO ^31-4](http://en.wikipedia.org/wiki/ISO_31-4) ^| [^Dimension ^\(metadata)](http://en.wikipedia.org/wiki/Dimension_\(metadata\)) ^| [^ISO ^8601](http://en.wikipedia.org/wiki/ISO_8601) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgcrxiq) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgcrxiq)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Well, it "hooks" into Wordpress' core in the same way that all plugins do (i.e. in a way that keeps it completely seperate from the actual WP core code) I believe it's OO-based (although I couldn't say anything about the actual quality of the code - seems well enough constructed though) It's possible to do a lot of custom coding with it, as with Wordpress itself. It offers up a lot of hookable events/actions which can be customised, and all the individual woocommerce template/layout can be overridden within the website's own theme folder (although it's not the greatest when it comes to customising layout, I find it far better than Magento) - so basically plenty of opportunity to modify the output/appearance of the plugin without needing to modify any core files.
I just looked at that Zend link - what's the purpose of the cache tagging?
That's what is nice about the SurfStack Router. You can use the dispatch() method to actually call the controllers or just the map() method and then getRoute() which returns a raw matched route. Exactly what you'd want!
The choice of CakePHP seems weird - considering most of your AngularJS app will be backed by REST API endpoints, something like Slim is probably going to be a better (easier) fit. You need for templating and stuff like that is (should) be minimal.
Ok well I would certainly say Wordpress backend is better for clients than those examples, though functionality wise I would disagree. There are other CMSs other than those too which provide more flexibility dependant on what a clients wants to do. Typically we use Concrete5 (check it out), a client can log in, visit a web page and then click on the actual content they want to edit. Great for small websites. For medium to large we would use a channel based CMS, for example ExpressionEngine or Craft. I would say Wordpress is good for a Blog, but not much more. What happens when you want to add hundreds of entries for multiple sections to your website? With differing field types? With decent image uploading &amp; relationships? What's your template going to look like then? I can take a guess that it aint going to look pretty.
Ok well I shall take a look hopefully it isn't as bad as Wordpress!
We use OpenCart. It isn't terrible and it isn't great. I find it easy to work with once you buy into their MVC implementation.
That's fair enough Kev, what ever works for you! I haven't got the miles that you have in it, though I do have a few :P My colleagues may certainly have a similar amount of hours to yourself and often voice their distasteful opinions about it.
I've developed and run (as the only developer) a multi-million revenue site with 20,000+ grouped SKUs and heavy front and back end customization and integrations on Magento. It is possible, but it is an enormous pain in the ass. I'd say that if you're sticking to simple (out of the box) functionality and a small product set, Magento is a viable choice, but if you want to deviate from that you'll need experienced (and patient) developers to make it happen. That said, no matter what platform you choose, I'd advise you to get the best developer(s) you can afford to implement it. E-Com is real easy to get wrong if you don't know what you're doing. 
I think I'm going to have no choice but to learn Magento anyway, the amount of bloody websites that exist! I am a developer myself, I'm just trying to find a better alternative to some of the more popular systems like Magento, WooCommerce, Shopify &amp; other more recently popular hosted solutions. It's certianly reassuring to know how many sites use Magento, though I often hear reports of it being a pain/slow etc (plus I've seen the backend).
The DummyCache is there as a fallback for when no adapters are available. It's so that say you deploy to a linux box and set up APC caching. Then you git pull to your windows machine that doesn't have APC installed...well that's gonna throw a shit ton of exceptions.... ...except it wont because it will fall back to the DummyCache (unless you specify MySQL or File based caching as well). :) With regard the object cache - that looks/sounds a lot like opcode caching....which I believe is offered by APC as well as being natively offered by PHP 5.5
We're using Magento at my office. We recently tried an experiment of running Magento on HHVM. Pages that would take 2-3 seconds to fully load on Apache/Nginx started loading in well under half a second with HHVM. So far we haven't noticed any problems.
Indeed, so you're suggesting I implement my own opcode cache? Have I grasped that right?
I'd be interested to see this comparison documented, if you have it (or a reference). Not too familiar with CS Cart.
I didn't know that about the HHVM group. Yes, under 15 was a typo. Well, not a typo. I was typing and talking at the same time.
Take a look at Drupal Commerce? I find it a lot less confusing than Ubercart and it's got a decent amount of documentation.
They don't compile to a "safe" location???
Figured. I'm really excited for HHVM. I wonder how long before the concept of deployments in interpreted languages start to look like compiled libraries.
Opencart. 
Except how would it be good as a fallback option? I'm not saying you're wrong, I'm just not understanding the architecture. This caching library is more like the user cache part of APC. Also - if you wanted to cache an object with this cache, you could just send it to the cache as normal...
Also - Could you post this as an issue in the repo?
You mentioned cart32 and I thought I would recommend you check out cart66 cloud. I took a gamble on it, and it turned out pretty awesome.
FWIW, [`tedivm/stash`](https://github.com/tedivm/Stash) implements the bulk of the PSR already. It's a production-quality caching library that I've used in a bunch of my projects.
Based on what? Context please.
What versions have you used? Core looks OK right now, it's the plug-ins/extensions that are lacking standards, thank god we avoid third-party software. Yes template system could take a while to get used to, but again if you are looking for a simple click and buy shop, you can use Shopify. For 'monsters' Magento got you covered as you scale up. P.S Look at Magento 2, it's still in development but looks promising. 
Duuude. I wrote my own shopping cart system slowly over the last few years. Nothing I have found felt worthy of using, nothing had the features I wanted, everything was so complicated, and looked plain ugly. So I was writing my own to give me the features I wanted, in a way that I wanted. I just checked out Prestashop at your suggestion and I am pretty much sold into abandoning my existing system in favor of this. I'm surprised I have never heard of it. Everyone seems to suggest Zencart or OSCommerce still. EDIT: And after installing Prestashop.... I see that it can't give me even some of the most basic features I put into my cart software. Pity. It had everything else I wanted.
More recently I've implemented custom E-com stacks on Symfony (along with some bundles) and been very happy with that, but they were more one-off customized for very specific product types.
If you want to use the class as a singleton, wrap the damn thing in your own static class and be done with it. You can turn an instance into a singleton. You can't turn a singleton into a nonstatic instance though!
What happens when you need to do anything for a website? You code the functionality into it. I don't understand what you're trying to ask here. Decent image uploading? Have you *used* WordPress? You can make multiple templates and assign them to as many pages as you want. Come on. Honestly you come off like every other person who hates WordPress; you're just jumping onto the hate bandwagon and don't know anything about it otherwise you wouldn't have just asked those questions. You obviously don't know much about the functionality of it.
The vQmod's do compile, but still. That is not the proper way to extend a platform..
Magento can be optimized to run extremely fast. I've personally optimized several sites to have &lt; 1 second load times. Like any enterprise solution it needs to be run on enterprise grade hardware. It was not developed to be ran on shared hosting.
I think there's room (and precedent) for this when strictly implemented as part of an Aspect-Oriented architecture implementation. An alternative might be traits. • [Typo3's FLOW Framework uses this kind of composition-effected AOP](http://docs.typo3.org/flow/TYPO3FlowDocumentation/TheDefinitiveGuide/PartIII/AspectOrientedProgramming.html) • Magento2 provides for composition as a last resort when the DI architecture doesn't allow for customization exactly where it's needed. If only PHP had multiple inheritance.
This sounds exactly what everyone says about PHP not being a real language yet it manages to do everything you need effectively...I wonder what would you code with if it wasnt PHP... let me guess Ruby?
I was skeptical about using wordpress at the shop I work at; after 5 months working there I have to say that you can manipulate almost anything in wordpress and its actually not that slow. and some of the plugins are just out of control useful, ACF comes to mind.
Just because wordpress has a very low barrier to entry doesn't mean you can't produce some great stuff with it. Your logic is a bit ... broken IMO. What is object php? Do you mean object oriented?
I never developed very much for Magento so I may have some stuff wrong, but here is some of our thinking. The overall package is smaller, letting you pick and choose what you want to use, localization, modules etc. Just start moving it around, Mag is HUGE. DB footprint is smaller. My team was impressed with the overall architecture and how it would mesh well with our current git habits. We keep the theme, overrides, modules in their own git repos, making upgrading of the core and disaster recovery easier. Almost anything that you want to change will not effect the core if done properly. Side by side comparisons using out of the box installs and portions of our catalog showed Presta to have better performance and potential scalability. Our catalog is 500K unique rows and under full automation, so we needed a ton of customization. It basically came down to cost, and we decided that we would be able to launch cheaper and faster with Presta.
The code base is very amateur and dated, stay far away from it. Also the lead developer is a prick. I have a couple of extensions on the marketplace I continue to maintain but have moved to WooCommerce and a custom cart I put together.
1) If you're using Drupal and you need e-commerce, use [Commerce](https://drupal.org/project/commerce), not Ubercart. Ubercart hasn't seen a stable release in over a year. Commerce put out version 7.x-1.9 earlier this month. 2) If all you're doing is e-commerce, don't install Drupal and the whole Commerce stack just for that. You'd be better off with a dedicated shopping cart solution.
This comment makes no sense. WordPress is an MVC/templating cms and you are throughout this thread saying over and over that it and its major plugins are not 'object' (I assume you mean utilizing oop?). Its just hard to understand how you can reach this conclusion without the tiniest bit of research.
ITT: some guy throws every suggestion under the bus for poorly argued, or just plain incorrect, points of contest.
No, sorry. No joke. Every ecommerce solution I touched is terrible. And Magento is hell.
I'd go with the biggest names in eCommerce for PHP. That will give you the most leverage. We run our own ecommerce software and when your missing a community, features, and market share, it will be a ruff battle selling customers on your solution who are aware of software like Magento. I will say that it looks like you want something with little investment, and any thing eCommerce will take a lot of time. In the Python world there is Satchless, which gives you the tools for a cart system, without any framework dependencies. http://satchless.com/ not sure there is something like this for PHP
My first choice would be Sylius. However, if you want a mature solution, you can't go wrong with Magento 1.8. I've taken it far out of the bounds it was designed for and it has been working like a champ. However, it takes work and familiarity to get it there. This is why, for a new project, I would select Sylius. It will be easier to figure out than Mage for someone that never dealt with it and especially so if they are familiar with current PHP development paradigms. 
Magento Community Edition can easily get ~1.2 sec load times on shared hosting with a proper full-page caching solution for which there are free modules. Anyone running a serious shop will not be running on shared hosting anyway.
Can't wait for Mage2.0 to come. Mage1 is fantastic if you stick through its learning curve as its very powerful. But it is certainly starting to show its age. 
Sounds like you built a theme for Magento and were frustrated that they separated the theme logic from the design aspects. Where Magento really shines is with complex stores where there's a lot of automation and integration required in the backend. The stuff we do with Mage with our very small budget and its amazing community support simply wouldn't have been possible on any other platform.
It "can" compete. It's a perfectly capable language. I'd love to talk my co-workers into using it, but we've still got a bunch of extracts and aliases in there which I don't think I can get rid...not without a ton of refactoring. Their compatibility page said laravel is hovering around 98-100%... if that hits a solid 100% I might consider it for a personal project. So...yeah. I'm excited about it, I'm just not convinced non-PHPers will be. I guess time will tell.
Well how am I supposed to know what you mean? C# uses the .cs extension. Your statement makes a lot more sense now. But yeah... ES6 is adding a bunch of sugar, which not everyone is happy about. "classes" aren't real (polymorphic) classes, which could cause confusion amongst beginners, for example. Anyway..my point is that you can do all the stuff that CoffeeScript can do in vanilla JS, it just might take a lot more code. Which is fine, of course, saving lines of code and aiding readability is definitely a good thing.. I'm just saying you can't introduce radically different things, whereas Hack, and C++ can..... 
True story. You can get less than that if you add in varnish and move to nginx.
Basically magento is open source in that it's code is public, but it doesn't embrace the spirit of open source. You can't make pull requests or feature requests, it doesn't really encourage community contribution (it only takes contributions from its employees) 
What are your "most basic features" ?
Ability to define if an item must be shipped separately, or if it can be shipped with specific items, or if it can ship with all items. Ability to pre-order an item due on specific date (and keep track of quantity), ability to special order item non stocked, with specification of lead time. (Basically the ability to have items spilt into different packages with different ship dates.) Those were things I started to look for right after installing. It's simple to setup on the cart I've wrote thus far.
vQmod is terrible. I second that. I abhor it. But you can otherwise extend opencart imo.
&gt; It's not like companies spend 6 or 7 digit numbers on Magento solutions for no reason. Yes, companies always have good reasons. {sarcasm}
Sweet. You're example has given me ideas on how to tidy it up and take it further. Thanks!
Thanks for the suggestion. That's the general direction it's heading in; support for more locales.
I toyed with this a while ago and came to the following: * Drop www from all URLs (pointless). * All URLs end with a trailing slash, unless they are a file. Was able to implement all this directly in Nginx conf's - avoid redirection hits in PHP land/router (save CPU cycles) - snippets are here: https://gist.github.com/magnetikonline/4303186 forwardslash.conf, multislashremove.conf and removewww.conf are the ones of note. End of the day no one is right or wrong - I guess consistency in your web app space is the key.
That's for your comment, interesting to know. Yeah I do want to try it, will let you know if I get around to it.
I'm a fan of open cart for bashing decent eCommerce sites out, there are some really great cheap templates on http://themeforest.net/ as well, for like $20 you can get a pretty good eCom site done nice and quick.
Nice! You can also do something like that with the NumberFormatter from php-intl: $fmt = new NumberFormatter('en_US', NumberFormatter::SPELLOUT); echo $fmt-&gt;format(1142) . PHP_EOL; &gt; one thousand one hundred forty-two
Use dwoo. Dwoo &gt; Smarty.
Not strictly on topic, but instead of having rules for .git, .htaccess etc., why don't you just restrict access to all 'dot files' instead? https://github.com/h5bp/server-configs-nginx/blob/master/h5bp/location/protect-system-files.conf
I guess I *might* want to access a dotfile - but you raise a valid point.
I've heard that Magento is very well written and can be used as a guide to learn how to architecture software. What's so bad about it?
&gt; The new versions of Rails coming out and the thousands of gems *germs*
&gt; You can't make pull requests or feature requests This statement may have been partially correct (Magento always accepted contributions, but access to Jira was by approval), but it is *far* from accurate now. For example, Magento organized an international hackathon in March 2013 to allow community members to work directly with core devs and product managers, and we were given write access to a public repo. This repo then became a honeypot for subsequent requests. Ref [the merge history](https://github.com/magento/bugathon_march_2013/pulls?direction=desc&amp;page=1&amp;sort=created&amp;state=closed). In the current 1.8 version Magento has included several well-known community contributions. Magento 2 has been an entirely different experience for the community from Magento 1, with fairly regular releases to GitHub and access via core developers to the product backlog and [to contribute to the core](https://github.com/magento/magento2/pulls?direction=desc&amp;page=1&amp;sort=created&amp;state=closed). Were you aware of these developments from the past year or so? Magento has always struggled with "getting the message out there".
Maybe that was the case in 1999.
Just in case you stumble up Oxid. Don't use it. It is horrible.
Magento is by far the best solution in my opinion. It takes a little while to learn your way around the millions of files, but after that it's capable of anything.
Thank you!! 
haha, thanks for the heads up :)
I just want to say, don't overuse Javascript in your standard interfaces. Angular is for web **applications** for the vast majority of sites the postback model with a few small asynchronous calls is absolutely fine. In fact I would go so far as to say it's preferable. It makes everything simpler, which leads to better stability.
There's one in development by [Cartalyst](https://cartalyst.com/) which is in fairly early stages. Not a big fan of their site though, they should do something about it.
I've had the same experience. Very confusing code layout and don't even think about getting actual support unless you want to pay them, or their former employees who started a company fixing/customizing CS Cart because they knew it was shitty and fixing it as a 3rd part would be more profitable.
You might try this: https://github.com/speckcommerce It's built on Zend Framework 2. If I recall, Evan Coury built a complete e-commerce platform using ZF Commons Modules with ZF2. This module being one of them. You'll probably need zfc-user to get user stuff as well.
In which case, it'd be better to whitelist the dotfiles that are accessible instead of using a blacklist.
You might want to take a look at the Prestashop [addons market](http://addons.prestashop.com/en/). If you can think of it, it has most likely already been done there. Sounds like you can search for "pre-order" and find what you're looking for.
I'm really not understanding why I'm implementing opcode caching in something thats not meant for that... also the current class as-is, is capable of caching objects...
Prestashop is easier. That's not the same as better. You have to define what you think makes something good or bad first. For some people, good quality code and ease of extensibility are important. For others, getting something up and running quickly is important. [Here was my comparison in 2012 of the top PHP e-commerce platforms](http://www.addedbytes.com/blog/open-source-php-e-commerce-platforms/). 
The docs could be a lot better, sure, but the code is high quality, and the theming and extensions systems are dead simple if you take a few minutes to understand how they've been put together. Sure, if you're looking for something with more hand-holding and so on, then Magento isn't for you, but if you're looking for something to power any decent-sized online shop, it's one of the best choices available.
Unfortunately I think that the amount of effort required to get Magento to the point where it's simply "OK" is vastly disproportionate to the benefits of using it. There are hosting companies out there that provide "Magento-optimised" packages. This is doing stuff like cache files held in RAM, etc, quite customised stuff - it's sort of insane to me that anyone would need it. That it's so non-trivial that selling a hosting package customised to Magento is a unique selling point. About templates - how long would it take for an average developer to get up to speed with them enough to properly customise a site? It's also not just about how they work, it was the customisations that always seemed to break between upgrades. The number of times I've seen either an upgrade been put off, or a template hurriedly rewritten, because of an update, is crazy. Also the phrase "for templating there are extensions..." - isn't that a bit of a warning sign? Yes, you can get it working, and yes, it's *possible* to use for multimillion dollar businesses, but, I would never start down that road again if I ever had a choice. Again, I'm sorry for the strong opinions. I just really don't like Magento.
Find an open source wiki u like ... fork it and modify it to your spec.
I did extensively.
I find myself coming down on the opposite site of these recommendations. 'www' is not pointless; a domain could be a large system in which www is one of many web accessible components (port 80 is not unique in this regard). The domain root and the 'www' service need not be the same machine. Do you count directory indexes as satisfying the 'resource must be a file' clause? It's could be consumed as a resource, but I wouldn't call it a file. Is a 403 to that directory a "file"? If every resource has a canonical name, why then redirect requests for index.htm to root, just to pull index.htm again? The resource is hidden behind a permanently fake name -- just give them the requested resource.
That comes down to ROI, if you don't need most of Magento features then use something else otherwise you will be spending most of your time building features that something else is lacking but Magento had. Long term companies will need pretty much /everything/ Magento offers in terms of administration. YMMV
I've been using Drupal in different project for 5 years now. Drupal Commerce is less confusing, than Ubercart, but it still took me a while to figure their "product is not a node" philosophy. And its features are quite limited, you'll sure have to write your own modules if you need to do anything complex. I don't have much experience with other e-commerce system, but developing for a very poor-written site on pure PHP with custom partial MVC-implementation is easier than making same things work for Drupal Commerce.
It's best to read some security articles imo. I've read quite a few regarding on how you should store passwords, how you best check whether the visitor is already logged in and make sure basic bots don't work on your website. But be very serious about this since you only have once chance to do it right. If you would search "Storing passwords using PHP", you will be given tons of results mostly from blogs and Stackoverflow. But they're all incomplete and/or insecure. The way to store passwords very safe is to do the following: * Once the user registers, create a totally random salt and use that in the [PHP's crypt function](http://www.php.net/manual/en/function.crypt.php). * Store that hash in the database. * Once the user tries to login, use the hash stored in the database as a salt of the function again. If the function returns the salt, then that was the password that was hashed, if not then the password is incorrect. I'm not security expert in any way, but am serious about this as everyone should be. You can look up more information about how this works. The basic principal this method relies on is that when a hash from a string is used as a salt on the same string, the hash outcome will be the salt.
I personally use WordPress with the : WP Knowledge Base theme.
Thanks for sharing that. Unfortunately it only seems to support the US locale. I'm in the process of adding more locales to my library opening it up to more languages.
That's true about www, I updated the proposed solution so www points to its own web root. You also make a good point with the directory indexes. There may be a need to see all the files in a directory. That could be the job of the dynamic content. If the dynamic content did not exist, it could throw a 403 or a 404. And I've updated the proposed solution so /index.php actually returns /index.php. That was a typo on my part. Thanks for the input!
you're missing $table-&gt;create() 
I thought that the first listing that comes up under pre-order seemed to fit what you were describing. But if you need any help with Prestashop, I do happen to be a developer that works pretty much exclusively on Prestashop and Magento with good rates and free estimates.
Sort of. Yes. But it doesn't address splitting pre-orders up into separate packages based on availability date for accurate shipping estimation. I also would need to integrate Prestashop into my existing framework (phpBB3)... but all the phpBB code I've seen makes Prestashop the master and phpBB the slave. I can't do it that way. I'd have to abandon a lot. Now I'm looking at Wordpress / phpBB integration with Woocommerce.
On OSX holding the command key while hovering the cursor over the method allows you to see a signature for the method.
With an Nginx server instance along with a redis cache, full page cache, and sessions server instance, I get ~600ms load times. Can't do that on shared hosting however.
No problem! It's nice to see how similar our code bases were.
Splitting into separate packages based on estimated/actual availability date is going to require an edit to the cart class or to the individual shipping module that you are using. The latter is easier, but either way it's not a big job to make the software do that with the shipping quotes. I'm guessing that when you say integration with phpBB, you mean SSO (Single Sign-On). If so, I'd go with an auto-login option when going from phpBB to the store. You should also reroute the login failures of the store to then run phpBB's login check function to see if they are logging in with their phpBB details. And if they are, you could then let them in. Woocommerce is OK, but I think you're going to find it's got a lot more missing that you need than you will with Prestashop. 
Writing something like this with vanilla PHP is a daunting task. I would look into at least using composer and incorporating several packages that already do a lot of this stuff if you aren't going to utilize a modern framework. Validation, routing, database, parsing/templating, error handling/logging, and authentication would be the very basics you would need to consider doing a stand alone project like this. Again, most modern frameworks have these built into it, along with other tools/utilities that you may find you need along the way.
Cool beans, just saying that you can already pass it and object for caching.
class_uses is the name to get existing traits on a class. get_declared_traits() is all declared traits. 
This is great, I've recently been working with the official library and share some of your frustration. It uses a ton of method overloading and class extending, making it very difficult to see what methods are actually available on any particular object. I look forward to seeing how this library develops! Keep up what already looks like some great work.
Yes, Thankyou!
great, hope full coverage isn't a problem
If you're interested in writing an extension that takes login information from phpBB, I'd be glad to buy a license from you. I want it to be where if you're logged into phpBB, you're logged into the cart. And at no time are you asked to login / logout via the cart. Just phpBB. Same thing with the pre-orders, special orders and multiple packages. If you make it, they will come. I know I'm not the only one looking for these functions, many others such as Woocommerce seem to have them built in as standard.
I must have made a typo with specifying the locale when I tried it. Well damn. This actually renders most of my code redundant. Before I started writing it I tried to see it something like it existed but Google never showed me the NumberFormatter class. I guess that's the way the cookie crumbles.
That looks pretty nice. I love Stripe's API for its simplicity, but I get the feeling that if you want to do anything more advanced, or go balls deep with testing more complex apps, the static nature of it is quite a pain in the arse. Would you advocate use of this over the default Stripe API if you just wanted to make charges? If you want this to be taken seriously by serious devs, one important thing you should add is Token support... because without that your unit tests are dead in the water.
The typechecker will error the first time you use `extract`. Furthermore since it has no idea about the variables created by it, it of course can't check them and will yell about undefined variables too. You can use `// UNSAFE` (http://docs.hhvm.com/manual/en/hack.modes.unsafe.php), but then you're dramatically limiting the typechecker's ability to help you out -- a lot of the value is that it can check everything and yell about stuff like this. But in general, even in PHP code, I'd very strongly recommend against using `extract`! In my experience, every single usage of it has been a maintenance nightmare. The programmer is going to have just as hard of a time figuring out what variables are named, where they came from, and what they are as the typechecker does!
How about instead of bitching about what's not there you either open an issue on the git repo (nobody else seems to have bothered but still continue to bitch on here about it), or you fork the library and implement it yourself or contact me directly to claim a full refund for the money you spent on this library. TL;DR: Stop bitching about it, if you don't like it then either fork it and fix it yourself or open an issue. That's (normally) how open source stuff works. PS: &gt; "No composer support ? that's a joke right?" &gt; "Sorry but try harder." Until I posted this thread I hadn't even heard of Composer and neither had anyone I knew. It's the first library I've ever properly release so ~~shut the fuck up,~~ don't be so ungrateful and give a guy a break.
Token's are the next thing I'm going to be working on. Just today I've added Invoices and Accounts. Working Invoice Items currently, and doing tokens after that. Although I may do token's first, since it's a relatively easy thing to do. And yes, I would totally recommend this over the Stripe's official PHP API. It makes it much more explicit and no statics. The only advantage the official api has now over this (well, after we have full api coverage) is that it's featured in the docs, so when people click "PHP" in their docs, that's what they see. That won't last long though - this implementation will have full documentation as well. Maybe stripe will even adopt it? Who knows. :)
&gt; Could you clarify? https://github.com/robertmain/UniformCache/blob/master/Cache.php#L17 https://github.com/robertmain/UniformCache/blob/master/adapters/MySQLAdapter.php#L41 (as well as lines 55, 78, 129, 158, 165) &gt; you mean that a user could call mysql_connect() or whatever somewhere else and that will screw with the connection established by the lib? Yes. &gt; file an issue or fork it and improve it yourself I wrote down my thoughts here. You decide whether to take them into consideration or not. I'm not interested enough in your lib to write GH issues or to fork it. pS. Composer + PSR-0/PSR-4 is a must nowadays.
What is Stripe API?
I'm about to dive in with Laravel's cashier. Would it be a better idea to use OP's instead? The payment functionality I need is to take a yearly payment of *x* amount from a club member, then pay that money to the club administrator (minus an admin fee, which I keep). I don't think I can implement cashier for this particular use case, as it seems more of an interface for set subscription plans.
Woah...I would never want to touch that code. I think anything related to payments should be handled by third parties such as Paypal. By that I mean using their code. 
I really don't care. You don't like it? Don't fucking use it.
And this is why PayPal, with all it's flaws, horrible outdated API and terrible customer service, will stay around for too damn long. 
Stripe is PCI compliant and stuff and quite a bit more fun to work with than PP api. 
Might look at Balance Payments if you're thinking multitenant store. 
Well, Paypal is a real company. 
Thanks a ton for the tip off yuri, saved me a bunch of time. Thought I smelled something funny, and this confirmed it. And man look at that sarcasm from Taso! Geez.
Also, anyone considering applying should know they accept only 3% of applicants. 
But is it secure? Does it have a good reputation? I mean, do they have an interface that will give the buyer the confidence to put their credit card info?
If it is critical for the business to function, then it must be prioritized as such. Don't kick the can down the road if it's a vital component. If you want to avoid the possibility of conflicts upon implementation later, then do it now and disable it for now. Whether you do it now or later, you're still covering the costs of development and making such a critical component function properly early on alleviates the technical debt you may incur doing so later.
So's Stripe. Just because you live in a development bubble doesn't mean there aren't viable, trustable alternatives. 
I think you can build the payment decoupled from the rest of the system. But build any user plans or types or memberships and integrate the logic for any different processing based on plans or user membership now. Later you can add code to accept payments and just switch the user to a different plan or member ship based on the payments, or if you have a simple requirements, most of the payment gateways will provide recurring billing and you can just use the payment notifications sent by the gateway to switch user plans or memberships. 
My concern is to give costumers the confidence of a serious platform. I am not saying this one is bad, I am just saying give the fact that I am not aware of its reputation I would not include it in a project. 
I can appreciate this, and I expect I might have to end up doing this. I'm trying to see if I can start with the fundamentals of a framework design and security and work from that. Otherwise I'm taking someone else's project and run blindly (which may end up having the security issues I'm trying to avoid.) But as I said, good advice, I may end up having to do this anyway on some level.
PHP has built in password hashing and verifying functions. You should no longer create your own.
Good advice here, So yeah I'm considering taking an established wiki and modifying it, but part of what I want to get out of this experience is learning what security risks and other details to consider when doing anything resembling "writing a php server" in general. I really don't want to write a **parser**, so yeah, I'm looking at just using Markdown. As for **performance**, I do have an idea on some outputs I can cache, generally I feel confident in this area. The **user input** was definitely eye opening-- again thanks for this.
You know it's funny, I really wasn't sure how php apps did authentication without storing passwords; I figured hashing would be part of it-- but that's definitely a great step by step. I really appreciate it, thanks!
Yeah, I definitely agree this is daunting, I definitely want to try this though for the learning experience at least. Thanks for the topics to consider, I'll definitely keep those in mind.
Yes and yes. Besides the fact that anything using PayPal gets tainted with an amateurish image, Many consumers already actively distrust Paypal, with good reason. They're known to freeze people's accounts, being extremely uncooperative and flat out stealing people's balance if "their system suspects unusual activity". Stripe is a well known (albeit fairly new compared to PayPal) payment processor that I, as a developer as well as a consumer, trust a hell of a lot more than PayPal. Plus, having an actual CC form on your site looks professional.
The website I'm currently working on looks like it will be moving to work internationally, but currently we only support paypal, and we look to be getting our local bank support for CC payments. How do I convince my boss that using one of these international services is much better than implementing payments for each country they move into?
OK I was reading and it looks like Stripe is promising. https://memberful.com/blog/stripe-vs-paypal/ So, I will keep my eye on it.
This decision should depend on other factors you haven't mentioned. Are you time limited? How complex is the application? Depending on your answers, assuming you are trying to get to market as soon as possible (who isn't?), I'd focus on what is important for you to gain traction. Spending effort where it isn't yet needed (payments) can be a killer if you are time limited and you ditch something more important in the short term, like polishing or unit testing. I might add that unit testing would likely help you out if you are worried about conflicts / issues later.
What basic features do you think are missing? To my knowledge the only thing it doesn't have baked in is a blog.
Some people are going to say: "Just Open Source it", by which they mean "Dump it on Github and you're done". I would like to emphasise that if you'd actually like people to use it, you'll need to do more than that. If it's just a bunch of code with no documentation it'll be virtually useless, and you can be sure that no-one is going to pick it up. If you choose to open source it, you should stick around for a while, answering questions, explaining stuff, helping people get into the code. Then, when (and if) somebody steps up to take over the lead, you can let it go. If you're not willing to do this, "open sourcing" will not be very useful. 
Are there any other regions you could move to that still don't have it? May not be an option for you bit it's an option.
It's possible - but the problem with call tracking platforms is that the only thing stopping other people from joining the party is having access to numbers and a carrier. Not always easy to do, but not hard enough to stop someone who is serious about entering the market (unfortunately I learnt this lesson too late). The irony is that I introduced call tracking to this market, pitched a global company (who loved it) and then their due diligence found a large competitor in another region, who of course said "yes, we can help you with that". Clearly they saw the opportunity beyond this single client and they have come to town. 
I'd like to keep "ownership" of the project, and if someone were to use it, it would be good if they were required to mention it was powered by "Project X". It would also be ok for people to sell the service generated by the project, as long as they're not selling the code. I don't have too much experience with this, so any advice you could give would be great.
Software-as-a-Service it?
This does a good job explaining licenses http://blog.codinghorror.com/pick-a-license-any-license/
Well you're still not getting a boolean true\false answer, you have to firtst get the object class, then get a list of class traits and then look for the required trait in that, not elegant at all. Also you cant specify a trait as a type hint
Try packaging it using some sort of PHP obfuscation library, then license it for other people to use. With the right internet marketing you should be able to make some of your money back from there.
Paypal sucks and is an absolute inccubus, but not for the reasons you're saying. &gt; Besides the fact that anything using PayPal gets tainted with an amateurish image I know plenty of both consumers and business owners that won't use online payments unless Paypal is an option. &gt; as a developer as well as a consumer, trust a hell of a lot more than PayPal. Yes, most developers easily trust and favor Stripe over Paypal. But unless your target audience is developers, it doesn't really matter. &gt; Plus, having an actual CC form on your site looks professional. You can have a real CC form on your website with Paypal.
Please explain what points exactly are poorly argued or incorrect? *Edit: That statement is wrong anyway, Prestashop doesn't look terrible, hopefully it wont suck. I mentioned that in the thread elsewhere. I'm trying to find a system that is good because everything I have tried (apart from lemonstand) is terrible. I have tried a lot, I've been a pro dev for a few years &amp; everything I have seen points to magento, it looks like it has good/bad points and I was curious if there was anything better. SORRY for trying to find a solution to my problem.
This, and a nice website, is very important. But I could think about a "community" version and pro version with support and more modules? (if you are open sourcing it anyway) if not, don´t even think about a pro and community edition. too much stress and too less income. The pro version would be just a "nice to get some money thing"
While a major competitor may have a product ready for market - there are a few areas I'd look into before open-sourcing or dropping a project. Is their product dated? Does your product offer new features that they don't? Is your interface more user-friendly? Do you have better reporting capabilities? Etcetera.. Have you considered approaching the competitor and pitching your product to them? Many companies may have market-ready products, but in my experience - often is the case that new development is stunted or halted in favour of increasing market share, either by weighing development down with bespoking projects or endless bugfixing as a result. Have you considered approaching the competitor and pitching your product to them? If I had a product that was close to market that was unlikely to survive as a startup but had potential - this is what I'd do..
Don't let this take you down, there's a lot of stuff your library can that NumberFormatter can't. Keep at it! :)
If you're worried about competing with this company when it's your (unfinished) product against theirs, why not open source the code and pivot your company into support, services, customisation and possibly specialist hosting of it. That way, the product becomes commodity and your business model is adding value via expertise. Sure, it's not as sexy as developing a product, selling a shitload of it and going for a rich exit but it's a solid and proven approach based on value you provide to customers, rather than gambling on a product in a hard market.
Thanks man :) It looks like the NumberFormatter can't spell out ordinals, it can only do cardinals. So I got that going for me. I'll keep at it. At least as a learning exercise.
Honestly you just got to get your ass out there and sell your product in person. Undercut their prices and offer better support. 
Think about the interface the payment system would implement. Design the interface, then build a simple 'mock' that implements the interface and returns hardcoded values your program will require. Then when the time comes, you can replace the 'mock' with the implementation. As long as it's still returning all the same values, your existing code won't (and shouldn't) care how it's getting those return values. 
True, but I strongly believe the platform that has been built is worth every cent.
The good news is that my background is marketing &amp; design (10+ years) so presentation and spreading awareness hopeful won't be an issue. I think the idea of addons is a good one, and perhaps there is money to be made in custom addons and implementations like you suggest.
magento is fine depending on what you need, it might be "too big" for you, but if its not its good, of course as it is big it needs a lot of training to understand it, but then its VERY robust, i know quite some shops that use it in all kinds of areas, with or without affiliate models, with or without subscription models etc, some have their own 10+ man dev team, some dont even have a designer, all are happy with it.
Unfortunately they have my current feature set presented in a very modern design - the worst competitor possible moved into the marketplace in this instance!
This gives me hope, thank you!
Thanks - out of interest, do you have any useful resources on the legalities of open sourcing? E.g. what happens if someone pays my company to maintain and install the opensource software and it is then hacked. Would my company or the opensource platform be liable?
Price is something I've been toying with for a while now - going to both extremes. Interestingly, whenever I met with potential clients, price was never the issue. For larger companies, they were concerned with where the data would be stored, for smaller companies they were concerned about how using different numbers would effect their customers (for exmaple). 
Any recommendations on a library to use?
If you believe in it then why are you giving up the idea of competing? Rage, rage against the dying of the light.
target a different region? sit on the code base and monitor people's complaints about the major competitor's offering. then offer your's as an option? yes, you could open source it but i wonder if there's any way to turn this loss around.
It's how red hat operates, and lots of other smaller open source projects. Not sure of any books on the subject though.
If your .git directory is in your web root, you've done something horribly wrong.
A significant amount of investment will be required to get it to the same point as the competition. I believe what has been built is fantastic, and to a very high level but the competition just has more to offer with everything else be equal. In order to compete, I need to adapt my business model, and the advice I've been receiving in this thread is fantastic. I'm not giving up yet, but I just wasn't sure how to continue - as a sole founder, sometimes it's tricky to be objective.
Well I really hope you find the happy medium in which to continue. You sound enthusiastic about your product, and that alone will help you spades.
ioncube or zend
Examples of this: * https://www.gitlab.com/, competitor to github * http://owncloud.com/ - http://owncloud.org/, competitor to dropbox * http://www.acquia.com/, company behind https://drupal.org/ * http://sensiolabs.com/en, company behind http://symfony.com/
You can have shit readability in other languages, too. In fact I would argue that PHP syntax is one of the cleanest / lightest, most straight-forward there is.
Ruby frameworks are simple and CodeIgniter is bloated? Cya, I'm going to get in my boat car and fly to work on the moon.