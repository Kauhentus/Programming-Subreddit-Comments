Does anyone know how to optimize CodeIgniter performance? I have tries to build a website with that, but found it was more slower rather than plain PHP..
You should try to use [composer](https://getcomposer.org/) to include libraries. It will take care of keeping your libraries up to date, and removes the need to copy code into your project.
I disagree with almost all of that blog post. More tracks means you can attract more target audience types (eg managers, techies). 20-minute talks are just too short, especially for speakers who aren't incredibly experienced in doing it. Such people don't come cheap. And Q&amp;As are often the most valuable part of the whole day. &amp;#x200B;
&gt;So where is the relationship with high CPU usage ? When PHP waits actively for io, it basically do an infinite loop checking each iteration if data is available, which explain the cpu usage. The alterative is to use non blocking io, and do the same loop with a usleep
You're right! It basically means that it is not licensed at all.
Performance wise it doesn't make a difference, true. But a big library - most of the time - comes with configuration you need to set-up, other dependencies which might conflict with existing ones etc. It's just a higher risk. Of course you have other benefits from using the library anyway, such as having it updated. &amp;#x200B; Maybe it was a bad idea to make a general assumption what OP should do (composer or not) without knowing what he's copying and from where and why.
&gt; But a big library - most of the time - comes with configuration you need to set-up No, they don't. Things that need configuration would be frameworks not a library, most frameworks are available in library form to just use the code. &gt; other dependencies which might conflict with existing ones etc. That is Composers problem and it will generally solve those conflicts pretty quick, it's quite rare to have a full-blown conflict that means you can't use two libraries together. &gt; It's just a higher risk. Not really.
If I use code that I did not originally write, I make sure that the license for that is compatible with the license my project uses. I have asked for a license when - and that happens far too often, unfortunately - the code is without one. And most of the time, I get the person to add a license to it. If, for some reason, it is not possible to obtain a license, then I can't use that code, sadly. 
Eh, people learn differently though. And subjects are always new to _someone_. But I agree in that I don't see any value personally in going to one of these things more than once every couple of years.
&gt; And subjects are always new to someone. It seems like you didn't understand my comment. 
\&gt; No, they don't. Things that need configuration would be frameworks not a library, most frameworks are available in library form to just use the code. Yes they do. As an example, take this [this library](https://github.com/akeneo/php-crowdin-api/blob/master/src/Akeneo/Crowdin/Client.php#L112). If you only want the method I highlighted, why not just copy it instead of requiring the complete library and having to call the constructor etc with data which is unneeded or even unknown? \&gt; That is Composers problem and it will generally solve those conflicts pretty quick Since when does composer automatically fix version conflicts? [https://github.com/composer/composer/releases/tag/1.7.3](https://github.com/composer/composer/releases/tag/1.7.3) In this release they changed how conflict get resolved. After updating my code didn't work anymore because of a conflict and I had to change that manually. Composer did not solve this conflict at all. \&gt; Not really. Okay, first you agree that there might be conflict issues and then, one sentence later you drop this? &amp;#x200B; As I said, in general, I always require libraries through composer, but I don't see any problem with copying one file or one, two methods without requiring the whole library. &amp;#x200B;
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [akeneo/php-crowdin-api/.../**Client.php#L112** (master → a19d7b3)](https://github.com/akeneo/php-crowdin-api/blob/a19d7b3f2db769582544ab70232717f8493cb303/src/Akeneo/Crowdin/Client.php#L112) ---- 
Tbh, disabling exec functions for 'security' has always been dumb, yet to some people it gives them a false sense of security.
&gt; Yes they do. As an example, take this this library. If you only want the method I highlighted, why not just copy it instead of requiring the complete library and having to call the constructor etc with data which is unneeded or even unknown? That would be an SDK. Not a library. &gt; Since when does composer automatically fix version conflicts? https://github.com/composer/composer/releases/tag/1.7.3 In this release they changed how conflict get resolved. After updating my code didn't work anymore because of a conflict and I had to change that manually. Composer did not solve this conflict at all. This may be a confusion, you may be talking about BC, but I am not sure. Version conflicts would be library A requires doctrine &gt;2.1.3 and library B requires 2.3, those sort of conflicts composer will solve the conflict and install 2.3. If you are talking about those, then I suspect your composer.json was flawed. &gt; Okay, first you agree that there might be conflict issues and then, one sentence later you drop this? Yes, because the risk of a version conflict is tiny, the risk of you having security issues, bug issues, etc is much higher. Therefore risk wise, it's lower risk to use composer for libraries.
New language features keep things interesting in other languages. I don't go to PHP conferences; are there not talks on creative ways to use new features?
True. I imagine quite a few online IMAP testers might be vulnerable.
My main point was at first you may learn something. Therefore "subjects are always new to someone", kinda ignores that point and focuses on "But someone is going to learn something" which was a given. While also ignoring the fact that talks don't actually really teach you something. For example, a 45-minute talk on Silm vs a 2-day workshop that the same person would give to actually teach someone Silm kinda shows that. The talks just tell you what to google. To actually learn something you need to spend all day listening then go home and read all the stuff. So quick recap. * People aren't always going to learn something. * People new to conferences will benefit the best * 45-minute talks won't teach you much * A book will teach you more * Conferences best benefit is networking. (If you go to conferences a lot you'll see all the famous dev faces not in talks but chatting away in the hallway track because they've pretty much heard all the stuff before but networking is what they are really there for.)
There was always a new in PHP x talk at PHPNW for example but it just told people what the new features were not how to use them in creative ways. Basically just a changelog.
sounds like we agree then! just different emphases.
Use \`===\` instead of \`==\` by default. There is a place for loose equality, but it can bite you if you're not paying attention. PHP will try to convert values between types when using \`==\`. Including conversion of strings starting with numbers to integers even when rest of strings is characters. (E.g. 3 == "3abc" =&gt; true)
\--5 years later another dev takes over-- holy shit what is this static mess, lets rewrite this in symfony, much more elegant my dude :)
Can someone explain with easy words what that means? I'm not familiarized with the internals of php implementation and stuff
&gt;github.com/php/ph... mostly this: [https://wiki.php.net/rfc/preload](https://wiki.php.net/rfc/preload) . faster runtime :D
The internal performance cost of loading up a bunch of framework files can now go from per-request to process startup. It'll make heavier apps run a little bit faster.
TL;DR: Better array parameter handling: use objects instead. I don't disagree but I do feel bamboozled.
So do you mean no Laravel taking seconds to boot? 
The include/require portion of that goes away, but all the object instantiation does not. So you won't see all of that go away, but you'll see some of it.
Awesome presentation.
ouch....
I was exaggerating xD It's pretty smooth, but I'm using Lumen lately which is even faster 
are there already some benchmarks with laravel or symfony?
They are not included as per `include`. This basically means PHP startup will call a given PHP file, which you can use to do anything. Loading files to opcache being the idea use case.
Can you confirm that I understand this correctly :) ? --- PHP &lt;= 7.3 - PHP process starts up - First request: - app does `new A()` - autoloader `include 'A.php';` - PHP "compiles" `A.php` into opcodes and stores it in opcache - opcodes are executed - Next requests: - app does `new A()` - autoloader `include 'A.php';` - `A.php` is already in opcache, no need to read the file and re-interpret the PHP - opcodes are executed =&gt; we save reading files + turning PHP into opcodes --- PHP &lt;= 7.4 + preloading - PHP process starts up - preloading starts: - preloader `include 'A.php';` - preloader + PHP "compiles" `A.php` into opcodes and stores it in memory (not opcache) - First request: - app does `new A()` - opcodes are executed - Next requests: - app does `new A()` - opcodes are executed =&gt; **compared to "classic" opcache:** - first request we save calls to the autoloader + compilation to opcode + storing to opcache - **next requests we save calls to the autoloader + fetching from opcache** Is that a correct summary?
no shit
Although the opcodes are in cache, there is extra work that has to be done on each request due to how PHP may have included different files vs the previous instance. &amp;#x200B; Imagine Base.php includes class B and then A.php extends it: class A extends B { } Now the actual class you get is entirely dependent on where B was included from... normally you'd assume it would always be the same file, but that doesn't have to be the case. &amp;#x200B; What this does is store that entire chain of classes in its fully-determined state at the first request, removing the overhead of linking it all together when you include it for the first time.
That's a pretty good summary! Well done
I'm losing sight of the goal posts here. My original comment was a critique against the linked blog post which *clearly* advocated for bringing intellisense/type-safety to array data by defining classes (with annotations) that inherit the `DataTransferObject` base class. My argument was against the practice of simply creating objects for the purpose of intellisense/type-safety. As I point out repeatedly, doing so represents a fundamental misunderstanding of OOP and creates a whole host of other concerns. The ultimate point being that the "problem" that this project intends to solve can only exist in a system where data is being separated from behavior. I am in no way advocating against mapping data from an array to an object, rather, to not engage in this practice for the *purpose* the OP is suggesting. Your previous comments seemed to support the viewpoint of mapping arrays to objects *for the purpose of* supporting type hints. Again, this is a waste of time because if the object has no behavior itself it means all it is good for is allowing clients to create dependencies to it (pass it's data around). As to your questions, we have to be clear on our terms here. An `Entity` as described by the ERM is part of an application's Data Model. A Data Model is, by necessity, an anemic model. That is, it's only purpose is to classify and store data. It is a waste of time to employ a hand-written Data Model in an application. For this very reason it is extremely common for Data Models to emerge in applications relying on an ORM, because the ORM tool can procedurally generate the Data Model for you. We aren't talking about this kind of `Entity` as it falls outside the purview of the discussion at hand. Whether a `Repository` queries a data store directly to get an array or queries the store via an ORM to get an `Entity` only changes the semantics of the mapping to the Domain. This brings us to the topic at hand: a Domain `Entity`. This kind of `Entity` is not devoid of behavior and instead represents the core logic of your business domain and is responsible for enforcing business rules. How one hydrates an `Entity` is an implementation detail (it doesn't matter). I cannot advocate for the project mentioned by OP because it is poorly designed, but something similar could be employed for convenience. In fact, I have a cohesive mechanism in my domain that does something similar, but instead maps associative arrays to constructor args in a way to simulate kwargs (parameter name, type, and position are all available via reflection). This is done recursively should a constructor demand a complex type (object) as a parameter. Importantly, this is a service that does not require inheritance, caches reflection results (class definitions are unlikely to change at run time), and can remain decoupled from my domain. Furthermore, it works *within* the semantics of a class definition. That is, it does not hydrate an object by bypassing any rules defined in it's definition. No "gotchas" is an important feature in any large system should you want it to remain maintainable. 
&gt; For example, a 45-minute talk on Silm vs a 2-day workshop that the same person would give to actually teach someone Silm kinda shows that. I would expect a 2-day workshop to be hands on whereas a 45-minute talk wouldn't be. And in any event, even if you're not gonna learn anything, from a technical perspective, I think it can still be useful to know what people are saying and how they're saying it, all the same. Like I'm seeing a lot of talks about libsodium these days. sarciszewski isn't gonna learn anything about libsodium from a talk about it but he could still learn what people are saying about it. Where people are struggling to figure it out or are confused or misinformed or whatever. 
I am curious; if I use environment like [php-pm](https://github.com/php-pm/php-pm), I won't get any speed difference, right? 
Just curious, but did you let the organizers know (either directly or through something like Joind.in, if the conference used it) about the meh talks? Most of the organizers I know do take all those into account, especially if a talk has been done before. The comments can also help the speaker know what they were doing wrong. 
I think lightning talks are a great idea. Like "here's a demo of a new class of vulnerability I've recently found". There's very likely not going to be enough material for a 45m talk but a 5m talk would be perfect. I guess the only thing I wonder is... how many people would actually give lightning talks? A lightning talk should probably be organized like a birds of a feather talk (those are usually impromptu and the speakers aren't compensated for coming out) but if you allocated one 45m session to a bunch of 5m lightning talks and only one 5m presentation was given... idk lol
Definitely code, but not the actual logic. I usually follow BDD and try to design the application by writing tests. Database design is usually done later (or never, if the project doesn't rely on a database). Regarding your project - do you understand the problem you're solving? I'd start with something simple. Doing the most basic working version possible might be a good start. Communicate with the team, get the feedback and figure out the next steps. Perhaps the initial ideas aren't really what you actually need. Trying to figure out everything at once can be overwhelming, double that if you're trying to use new tech at the same time.
Completely agree. I recently inherited a project that's designed poorly and service locator is used everywhere. Controllers are one thing and I might even live with that, but the damn thing is used even in the domain layer and everything is tightly coupled with the framework (I'm not even going to mention tests...). If anyone's considering this approach for a long-term project, please don't. You'll thank yourselves later.
&gt; Are you just telling me that a class with a constructor and a method means that it's an SDK? No, I am telling you, a set of classes that have been built by a company so that you will use their product within your software is a software development kit. That is without the product the code is useless. A library, for the most part, is a set of code that can be used by itself to achieve something. Hence why an SDK requires configuration, to use the API because otherwise, it's useless. However, say something like phpmoney can be used without any configuration, that is because it's a library. &gt; I get the feeling you don't really know what you're talking about and that you're just saying random words in order to not be wrong. I got that feeling from you when you said it using composer had a higher risk than not using it. You sound like someone still in uni. I think you don't know you are wrong. &gt; Again, not opening the links. No, as I said, you weren't being clear. You need to work on being understood better. 
I don't think it's a drawback. If you can have multiple *simultaneous* errors, then exceptions are the wrong solution. Exceptions should only be used if a further execution of a code can't be allowed (one example where I'd use them is in a constructor to prevent an object from entering an invalid state). Form validation uses user input and it makes no sense to use exceptions there.
&gt; No, I am telling you, a set of classes that have been built by a company so that you will use their product within your software is a software development kit. You're totally missing the point. I didn't send you then class because of the project, but because of the contents of the class. And by the way, the company that built the lib is not the one who built the product. I know that's not youor point, but I just wanted to show you how you took every sentence from me, picked one thing out of it and disregarted the whole thing. I give you a different example https://github.com/KnpLabs/snappy/blob/master/src/Knp/Snappy/Pdf.php This class has the method `isOptionUrl`. Let's say you want to have this method in you code. How does it help you to include this library as a whole in order to achieve this? And I'm not talking about the `protected` modifier, even if it was`public`. The `constructor` of the class still exists and you don't need that. And please don't tell me now that the `constructor` has default null values, because, again, the link is an example. &gt; I got that feeling from you when you said it using composer had a higher risk than not using it. And I stand by this point. If you were to simply copy the protected method with the content public function isOptionUrl($option) { return (bool) filter_var($option, FILTER_VALIDATE_URL); } it IS a higher risk to include the complete library with composer. &gt; You sound like someone still in uni. I think you don't know you are wrong. You are totally missing the point. This isn't about right or wrong, at least not for me. What I want you to understand is that there might be occasions where you want to copy one or two methods and that is okay without requiring the complete library. That's the only point I wanted to make in my initial post. Nothing else. As I said, I'm using composer msyelf, and obviously in a more detailed way than you since you didn't even know of the `conflict` flag. &gt; No, as I said, you weren't being clear. You need to work on being understood better. Well it's easy to say that I'm not being clear when you just pick one word out of 100 to focus your whole answer on this instead of the point of the reply. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [KnpLabs/snappy/.../**Pdf.php** (master → 144c4ec)](https://github.com/KnpLabs/snappy/blob/144c4ecd1ccaeda936bf832b93079efc490e6850/src/Knp/Snappy/Pdf.php) ---- 
You do realise this is likely their first month with php? 
&gt; Well it's easy to say that I'm not being clear when you just pick one word out of 100 to focus your whole answer on this instead of the point of the reply. I quoted you several times, and each time wrote something in regards to that quote. Sort your life out.
This is some of the best reading I've had in months. I seem to have derailed the conversation at some stage, you are absolutely right. 
&gt;NOV.13, 2018 Has it been posted multiple times since it was put up...yesterday..?
&gt; Going to conferences to learn is, for the most part, pointless after a few years this is why i have stopped going to conferences. &gt; Conferences are pretty much just for networking. which is useless if you aren't looking for a job or sales.
Honest question, why is it the job of a function that accepts a string, any string, as a parameter to sanitize that string? That's the coders job IMHO.
I disagree - even when not looking for a job a good network is useful. Be it for hiring or to be able to reach out to somebody if you run into an issue or even to influence them to build a feature into a library.
For all the seemingly bad designs that repeat themselves, you have to ask yourself, is there is some sort of benefit to doing it that way. I would suggest that the reason for things like myfunc($params) that we see often is because most of the PHP apps that are created are DB-oriented and the DB schema itself is acting as the contract. In these instances, DB is central and the the ultimate foundation for all the code that's developed for it. This is what the post left out to mention when it asks what constitutes the contents of $param. Of course there are plenty of benefits to passing objects instead of arrays, but it too has downsides in that the class definition can stray from the DB schema -- or having to maintain an ORM implementation. I'm not advocating for a blanket solution to one or the other, just that you shouldn't either. Thanks.
I did! But I realise that my opnion about meh talks isn’t also others.
There's room 11 on StackOverflow (although I lost the link a year or so ago and cannot remember how to navigate back there). There's a Discord server for programming subreddits. There's several Slacks and Gitter instances for various subgroups of the community. Generally, asking around is the best way to figure out where people are. (Which is sort of what you're doing here, but I meant more one-on-one. I participate in communities I won't link to openly, but may invite some people to individually.)
We're not all here 24/7 reading every single post as it comes through. People that weren't subbed here last year might be this year. Why do people get so worked up over reposts? If you've already seen it, ignore it and move on, leaving the people who haven't seen it alone.
that's right. PHP-PM boots things up and keep them running. PHP-PM would probably be faster because in Preload you don't persist variables across requests, while with PHP-PM you persist. It means although the code to read a JSON file, for example is already there in Preload, the data is not, while in PHP-PM you could initialize the app with this JSON file and never read it again. Unfortunately that's also the hard part of using PHP-PM, since all the PHP libraries assume you are on a shared-nothing request, you will potentially find lots of memory leaks. The code to upload files and all the request creation is different for PHP-PM too, so Preload is like part of that speed without all the side effects.
What's the problem? From what I see, it should work just fine - https://3v4l.org/dpMgV. I *highly* advise against this approach though, especially if you're planning to pass any arguments to this function.
If any of you guys wanna try it out without going through the struggle of building it locally, I have a Docker ready for testing: https://github.com/devilbox/docker-php-fpm-7.4
This :-)
f=exec(„rm -rf /„); Sorry for the stupid quotes. May need a little url-reformatting but will lead to a lot of fun. Make sure you ru your webserver as root.
What about reloading? 
In nature, walking.
!== &amp;&amp; ==
On my phone so hard to look well but overall it looks fine; code is clean enough to understand, you're taking advantage of auto-discovery, install guide looks fine. You may want to add Laravel as a dependency to composer so you can target the lowest working version your package will work with, incase someone tries to install on an unsupported version. You're echoing the error in the catch of your controller, is an echo needed? I think a proper response should be here. Other than that, you should of course unit test the package. It's daunting at first, but so worth it.
Still only one application per server? Or is it per php-fpm cluster?
I used to have one of those modems when I was in high school. I’m old. 
Why should anyone expect that this function could lead to a command injection vulnerability? How would you even know what to sanitize for? Reminds me of Perl's open() function, but at least that command injection is well documented. Using any exec functions like passthru etc. with user data? You're damn right the coder has to sanitize it. But a function where it is not obvious that any shell commands will be executed? Then it's the functions job, otherwise it's a vulnerability of the function itself or just terrible language design.
Hello Again. Great work making updates since the last time you posted! Your package is making good progress. - Now that you have a proper config file you could add the route path there so the user can customize the endpoint. You could a `path` key to the config file then in the route file update it to `Route::get(config('forecast.path'), 'ForecastController@getWeather')` - The error handling could be improved. As written it will return an HTTP 200 response on an error. Ideally it would return an error response, either a 400 or 500 status code. I assume the controller is returning JSON so it would be nice if the errors are JSON too. for example you could update it to `return response()-&gt;json(['error' =&gt; $e-&gt;getMessage()], 500)`
Unit tests and test coverage
This is an absolutely horrendous idea regarding security, but *if you insist* the issue is most likely that you’re returning a value and then doing nothing with it. Add an echo along the way to ensure the function is being called to debug it. The code should execute correctly as-is. But once again, this is *incredibly dangerous* and just begging to turn into RCE. 
Look into writing a REST API. There are a million tutorials and there are frameworks out there that will help you get what you want.
Use a framework. They all are OOP these days. As you use it look at how they do things, the concepts involved etc. Over time you will build a tool set in your head of OO practices and when a problem comes along you will use it. At the same time do some OOP tutorials. This one is really good. [https://laracasts.com/series/object-oriented-bootcamp-in-php](https://laracasts.com/series/object-oriented-bootcamp-in-php)
Wish you would have posted a description of it in the comments.
No....
lol the responses in here are kind of sad. You may have some luck on [php-mentoring.org](https://php-mentoring.org)
Basically, NEVER trust user input. NEVER. With that, you're taking user input and executing it as-is. In this case, at least you're not passing any parameters to the function, but it's still completely terrible.
[PHP Mailing Lists](http://php.net/mailing-lists.php)
Wow all good feedback man I will make these changes asap and keep this thread open as I go along.
Why is blogspam the worst type of post for r/php and should be the last choice for your business model?
Right and a "coder" built that imap_open function too. Its a security hole that can be exploited by bad userland security practices.
Yes - the preload script is actually executed, before the script being called is even considered. Whatever files the preload script actually includes will be saved, so you will need to include your own autoloader (basically "require all the files"). &amp;#x200B; One thing I ran into is that if you're requiring a class, that file needs to actually run without errors - so if class A extends class B, you either need to include the file for B first, or set up an autoloader so that PHP will know to require the file for B when it finds the invalid class. &amp;#x200B; According to the RFC, you can also use opcache\_compile\_file so that would mitigate the issue I mentioned before, but I didn't get a chance to play around with that yet. (Disclaimer: I'm not that knowledgeable about preload at all, I was just making this script to understand how it worked because I too was confused. Just doing my best to share the knowledge, but take anything I say with a grain of salt) 
There are facebook groups, but most of them tend to be more... job open focused.
That definitely wasn't worth my time. A junior dev that can't land a job, blaming everything and anything around him. He's got a split tongue about PHP, giving it a bad reputation and then trying to cover up his negativity by trying to say how much he isn't being negative at all. TL:DR; if you're in India, start learning a "real" programming language.
I didnt say anything wrong with PHP, there are two nightmares pointed out by me says a lot of being a php developer in this country.
As a US vendor who hires out to India, and as someone who has been to India multiple times, I was able to see your point of view. Thank you for the post. 
Do you experience the same bug? Any ideas how to work around that or who is the best person to look into that?
You make the internet a better place ❤️
If you want to sell something use a lot of adjectives! 
Github issues is where the frontline is.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Amen.
/r/php is not a suppor subreddit, it's even said in the status bar. MEans it is not fit for the rookie questions that said, `./Include` is a path relative to the *current position*. Change the position, and the path become invalid. Always use the absolute path. More info: [Relative and absolute paths, in the file system and on the web server](https://phpdelusions.net/articles/paths) that said, you should definitely give up the century-old ways of including external libraries and start using [Composer](https://getcomposer.org/doc/00-intro.md)
Remove the . before the URL and you should be fine.
This would be outright wrong as there is a very little chance to have the Includes folder at the root of the *filesystem*. Besides, there are no URLs in the question. You would benefit from reading the article I linked to above 
&gt;/r/php is not a support subreddit, it's even said in the status bar. Means it is not fit for the rookie questions To expand on this, /r/PHPhelp is the appropriate subreddit - but you'd have faster luck searching for your question on [stackoverflow.com](https://stackoverflow.com) and posting a question only if you can't find the answer there. Stackoverflow is ***the*** invaluable resource for all programming problems.
Stackoverflow
By default, include does not evaluate unless you enable "allow_url_include": http://php.net/manual/en/filesystem.configuration.php#ini.allow-url-include
&gt; i'm sorry if this seems harsh but what the actual frick... Your comment is now pure. ^([Contact Me](https://www.youtube.com/watch?v=TaLiE3OegFc))
i added my header codes in this file and uploaded to my cdn. now im ring to include that page in my php page but its not loading that page
Did you enable ``allow_url_fopen`` as well?
Bad bot
It'll never stop being funny when the talk is called "PHP in 2018" and the next slide, literally the next slide, is a photo of an ancient Sinclair microcomputer labeled "1980s". Fool me once, Rasmus, shame on you. Fool me twice, shame on... you can't get fooled again!
&gt; allow_url_fopen no
it is already on. allow_url_fopen = On 
&lt;?php require also not working
i also tried &lt;?php echo include 'https://cdn.mysite.com/aa/bbb.js';?&gt;, still nothing
Defer to script tags in the final html instead of php &lt;script src="https://cdn.mysite.com/aa/bbb.js"&gt;&lt;/script&gt;
let me check
it is not help full for me, i have to include page 
sorry to tell you that when i tried this &lt;?php include '.[/aa/bbb.js';?&gt;](https://cdn.mysite.com/aa/bbb.js';?%3E) it was working but only for root pages, not for sub-directories 
Nice to have @Naveen17797 here. I used to follow your php tutorial blog NaveensLab before it went down. I've learnt a lot from you. Thank you
Thank you! 🙌
If it's a local file, why would you ever want to send an external request to get it? Breakdown; 1) Javascript and PHP have nothing in common. There is no reason why you would want to include a JS file inside of a PHP script, they are not compatible at all. In fact, including JS in a PHP file could lead to very bad side effects, and especially if you're loading the file externally. The only reason I can see, is if someone ever wanted to download JS in order to cache it locally or something, but again, you would NEVER include javascript in a PHP script. 2) Loading an external resource that "doesn't work" means the EXTERNAL resource is either unavailable or you simply didn't enter the correct url to access it. 3) The fact that you're saying it worked for your root pages and not files inside of sub-directories means the search path to the resource is wrong. So for instance for the file `/bbb.js`, if you include this file from a sub-directory you need to "parent" your directory X number of times until you reach the correct directory i.e `./../bbb.js` if you're one directory deep. But whatever you do first, is to remove ALL of your "include js file" in your scripts. This can have serious consequences and is simply WRONG unless you're planning on doing some processing of the actual JS from PHP, but even then you NEVER include a javascript file, if you want to stream the script file you use `readfile` or if you want to read the script file you use `fopen` or `file_get_contents`. 
Mastodon.
in my js file its a adsense ad code, i have more that 1000 pages, so dont want to add adsense code on all pages, so what i am doing is i add adsense code in that file and used "php include", so in future if i want to change adsense code i have to only open that file and change, so i dont have to open that 1000 pages, now i am using &lt;?php require("https://cdn.mysite.com/aa/bbb.js"); ?&gt; now it stated working, but some time its not, i refreshed my page 100 time and around 30 times the page was loaded and working fine (as i as expected), but 70 times did not loaded now i am wonder how is this possible, it should be ether working 100 times or not
The only correct way of including adSense script is by `&lt;script type="text/javascript" src="https://cdn.mysite.com/aa/bbb.js"&gt;&lt;/script&gt;`. If it's not working then `bbb.js` is not located at `https://cdn.mysite.com/aa`. For your own sake, remove all the includes that point to javascript files. In your php file where you have "include" you change that to `&lt;?php echo '&lt;script type="text/javascript" src="https://cdn.mysite.com/aa/bbb.js"&gt;&lt;/script&gt;'; ?&gt;`
i cant do this, i have around 10 includes, i used it for header, sidebar and bottom, the .js is just example i also tried with .html, .txt, .php and even without andy extension, but still the same result
however i am amazed why it working some times and not, everything is same inside page
How do I pass parameters to a PHP function from the URL?
And if we had generics and copy-on-write objects, like arrays are, and like some other languages have (say Swift), I would probably completely cease the use of arrays, much like I rarely, if ever, use them in Java. The problem is copy-on-write is too awesome and useful, and trouble-saving to just throw it in the garbage. The only alternative of approximating such a workflow with objects is making them immutable, and then getting altered copies with endless chain of "withFoo()" methods is just god damn painful, not to speak of the terrible CPU/RAM performance profile of this approach. Give us value objects, PHP, gaddam' it!
&gt; For all the seemingly bad designs that repeat themselves, you have to ask yourself, is there is some sort of benefit to doing it that way. Yup, like these: - Copy on write semantics. - Generics (only in PHPDoc, but it's still something). - Flexible schemas, without defining a class for every one of 20 variations of every entity you need throughout (possible through optional members, unions and intersections as seen in languages like TypeScript, but not in PHP objects).
I used to hang out in ##PHP on Freenode, but I find that the PHP community seems to be championed by a few elitist tools and expressing any opinion in contrary to theirs simply ends up with a ban. I wish I had better places, but it seems to be consistent with other replies 
#1 This is almost certainly not the code you want to write. It's a gaping security hole holding up a sign which reads: "Please compromise my server and all the data I'm working with on behalf of my users." #2 Please describe what "not working" means IN DETAIL. Include events that appear in your log files. Include never simply "does nothing", so what DOES it do? Do program execution stop? Does garbage appear where you're expecting content? Do the characters "&lt;?" appear ANYWHERE in the js file you're trying to include? #3 As others have noted, since this file seems to be javascript, don't do this inclusion via your server, have the user's browser pull it directly, otherwise you have COMPLETELY negated the benefit of placing it in a CDN.
&gt;20-minute talks are just too short, especially for speakers who aren't incredibly experienced in doing it I think this highly depends on the person. I've seen beginner who were more comfortable with 20 min than 45-50 min. Mostly because in their eyes it would be over sooner and they wouldn't have to fill the talk with fluff.
Downvoted not because you're wrong, but because this kid is playing with matches and you're handing him a can of gasoline.
No, you should put those values in your .env and reference that in your config.
Chances are your local user group will have some sort of slack. Some are better than others.
Ah, interesting, thanks a ton!
If there is no .env file by default in my october install, is it just a matter of creating one and referencing the values or are there extra steps?
Exactly what difference (other than one of them being a MAJOR security issue and extremely wrong) do you think is the difference between `&lt;?php include 'https://cdn.mysite.com/aa/bbb.js';?&gt;` and `&lt;script type="text/javascript" src="https://cdn.mysite.com/aa/bbb.js"&gt;&lt;/script&gt;`? Why can you add a "php include" statement, and not a "js include" statement?
I'm sorry man, I don't think you're cut out for web development. Please take 10 steps away from the keyboard. People in this thread are giving you great advice explaining why what you're doing is EXTREMELY DANGEROUS but you insist on doing it anyways. That is NOT the correct approach. Please stop. Now. Before anyone gets hurt.
Some people just want to watch the world burn. [😈](https://apps.timwhitlock.info/emoji/tables/unicode#emoji-modal)
The way we do it on my team, as inspired by Zend Framework and Expressive, is that our config folders contain ".dist" versions of the config file that is under version control, but contains replacement strings for the sensitive and changeable values such as passwords and environment specific configs. Then, during deployment to a stage of our pipeline, the CI/CD build (Gitlab on our newer apps, Jenkins on our older ones) copies the .dist file to a .php file, runs sed statements to replace the strings with the values appropriate to that environment (in Gitlab's case these values can be stored in your CI/CD settings as private variables), then deploy the files generated during the build. Eventually it's my hope that we'll build a container, run the sed statements to replace the variables in the .dist file (like I currently do in the developers' local environments), and then deploy the whole container. In a perfect world, every stage of your pipeline will run exactly the same. I'd be happy to answer any further questions if this process sounds like it's of interest to you or others.
Another way to handle configuration is to create two \*.ini files: * application.ini - for common settings, this is going to be included in source control. * environment.ini - add it to gitignore, this can keep credentials.
That sounds like an awful lot of work for something that can be solved with environment variables.
They are environment variables. They're just stored in your CI/CD build tool instead of on the actual server, and they can be used in the build process. CI/CD sounds like "an awful lot of work" until you're deploying dozens of times daily and your deploys are more stable than they've ever been. :D
In 90% of our projects we don't need an .env file at all. The configs themselves have .dist files that are modified appropriate to the environment they're being deployed to. I mean, you're welcome to do it that way, there's no "singular way to do devops". Just make sure to remember your security measures when you do so. Our Gitlab CI/CD variables are only visible to one person in the entire company, because they only need to be. They could be visible to no one in the entire company and it would still work fine.
Ahh, so it's not a `.env`, ok, sorry, I misunderstood.
/r/laravel &gt; No error with .htacces How can you tell? Did your error message state so? 
&gt; it was stupid actually, what was happen i was in very hurry because i had not much time to work on it, so i forgot that if i give the file extension .js then browser will think its a js code inside it and implement according to it and inside the file it was not a js codes, so that is the reason my site was showing error, but now i changed the extension and now everything is working fine
i fixed it by myself, i changed file extension and now its working fine. thanks for your help
You are scaring me.... a lot here..... what's inside the file, and what was the correct extension?!?
inside a file there are ad code, search box code and some other html elements, i just need to grad these data from one directories, as these data are gonna be used on almost all pages, so now i just have to include only one line of code instead of putting all codes in all pages, it will save some disk pace and if in future if i need to make changed in ad code i only have to open that single page and make change and it will appear on my all pages. that purpose i was asking for help but now i got this 
As long as you will never ever include the file externally (aka include "http://..."), this is "fine".
I think it's even worse. It sounds like that CDN file is a PHP script and he just mistakenly put \`.js\` at the end. If that's the case, WHAT THE FUUUUCK
I mean, maybe you have that type of experience at conferences. Whenever I have gone, the only time people talk to each other is generally at mealtimes and those mostly are smalltalk. If I were looking to build a network that way, I'd focus on going to meetups or similar groups.
Can you check the error logs for the exact error?
Im sorry first it didn’t show any errors. The error displaying said it couldn’t find the index page
How can I check the exact error, sorry for being noob. I’ve put the error display on in the .htacces file and it says that it couln’t find the index page
I used to do the environment variable thing. I initially had all kinds of variables put into there, but it got to be a serious pain running code outside of a web context. I then just specified which config file to look for in the environment. This simplified my web server config, but had the same issues with running CLI or cron jobs. I've since created a directory for my configs that I put into .gitignore and just copy them on over as needed. I didn't like the idea of sensitive information going into a repository on a shared server. The downsides to this approach are not having revision control on configs, and having to manually backup that information. Got to keep the base config someplace after all. For my needs it works out fine, and I don't get into a situation where there are numerous configs for different dev environments. A lot of this depends on your particular situation. Like domdest pointed out, there's no one "correct" way to do this.
My approach is to put to git only themes, plugins directories and .env_sample file. On deployment server there is new installation of October.
Why the hell would someone just cavalierly post a 0-day w/o telling Zend Corp first? Why would GitHub even allow this while simultaneously banning projects that are not PC enough?
Yeah that's why I created #phpu over at Freenode, but I haven't used IRC in years and years now.
In a corner of my basement, drinking coffee with nicotine-stained fingers, mutter long rants about all those sumbitches who use Javascript as a server-side language. Heathens, all of them! One day, they'll realize the folly of their ways and when they come running to me to save them, I'll whisper ... Yeah, OK. I'm pretty desperate.
First of all, never use $_GET or any of the other superglobals in your own code. Instead use the filter_input and choose an apropriate filter. http://php.net/manual/en/function.filter-input.php --- Secondly, this is the reason why your code is a security issue: What happens when I access the following url? www.example.com/database.php?f=phpinfo
I've seen your stuff multiple now. You seem to invest a lot of efforts into this. Is it like a full-time job or you're doing it for the community? Either way, thanks man!
I'll take a look, thanks for the tip! Our stack is in a transitional state into better devops so I'm always happy to improve my processes.
I've analyzed the code - and it doesn't seem to be an issue with PHP. PHP just passes the arguments into IMAP c-Client library. And also - i haven't found any code that will imply support for any parameter in mailbox hostname done by php, everything is passed into \`mail\_open\` function. In fact \`-oProxyCommand\` is parameter for... ssh? For fun i used dbg to prove that php only passes parameter to the library: [https://i.imgur.com/7hAFYKn.png](https://i.imgur.com/7hAFYKn.png) so the problem is probably with IMAP c-Client itself. It needs further investigation. &amp;#x200B;
If you upload the entire application to `/var/www/laravelApplication`, you need to make sure the server is serving from `/var/www/laravelApplication/public`. This is accomplished either via the `root` parameter in your nginx `server{}` block, or the `DocumentRoot` parameter in your Apache `&lt;VirtualHost&gt;` block. Also, once uploaded, make sure to run `composer install` because you're **not** uploading your `/vendor` folder.
You can use oc-bootstrapper to get an easy git ready setup for October CMS (with built in GitLab deployment support). Everything will be excluded from git except your theme and private plugins: https://github.com/OFFLINE-GmbH/oc-bootstrapper
Darkmira FTW (:
You completely missed what he was saying. It doesn't matter what \*you\* put there if you're executing it. Someone else could put anything \*they\* want and execute it on your server, giving them anything they want. You're just holding the door open for the world at this point.
what are you trying to do ? shoot me a pm.
Will do. Thank you 
So cool! I was worried about deploying my project the best way possible, this seems to be it. Thanks!
yet its risky, but then what is the right way to include page in page?
what is the right way to include page in page?
Just type `composer install` into the shell while in your `/var/www/laravelApplication` directory (the one with `composer.json` and `composer.lock`. Of course, I assume that you have followed the directions at https://getcomposer.org/download/ to make sure that composer is installed. If you need PHP's JSON extension, install it via your package manager. If you're on shared hosting, you're probably hosed unless there are some individual instructions on the host's forum.
Actually I do spend a lot of time on this, but on the other hand I also use a vast number of open source tools every single day which make my work way easier - starting from Ansible all the way back to ZFS on FreeBSD, so give and take :-)
Good write up. Thanks!
Like everyone else told you, by having it on your filesystem rather than another server.
Conference organizer here: we would love to be able to bring in new and awesome people that have interesting talks but things like flight prices definitely keep that in check.
If you ignore the religious elements around said framework, any of those communities can be pleasant to discuss PHP in general. When they start talking passionately abut the framework you just take a step back :)
I think you're just generally confused on how all these pieces fit together. If you want to include some HTML from one file in another file, there are templating systems for that.
The only situation when I need 100% accurate decimal math is money for me. I haven't found another situation, in PHP at least, where being 0.0000000000000001 off (or so) is considered significant. If this is also true for the rest of you, I recommend that you skip having a standalone Decimal class, and go straight for a Money class, which also incorporates the currency being used, thus avoiding the inevitable bugs that can come out of accidentally mixing currencies together. In the modern world, you'd be dealing with *at least* USD and EUR, and probably also AUD, CAD, etc.
I'm sure this is faster than bcmath, but is it faster than gmp? Because gmp doesn't use strings internally, and decimal floats are essentially integers with a fixed decimal point in them. As for using this in practice, I recommend not using numbers directly when dealing with money, but using a Money class which combines amount + currency, and prevents mixing currencies based on the nominal amount only.
Also, the decimal point is not fixed. 
That's indeed extra credit for the class implementing decimal floats in full. I wonder, though: 1. Is there is a benefit to floating point in money calculations? 2. Is there a benefit to decimals in anything but money? Maybe I'm missing a scenario, but I think the Venn diagram between those two would show no overlap that makes floating point decimals beneficial in practice (although, again, it's great to have this, just in case, and in terms of efficiency of internal storage and possible number range).
1. I think no, not particularly. Whether it's floating or fixed isn't important, as much as it is base-10. 2. I don't think I'll ever use float again. Not being able to trust comparison and WYSIWYG is enough reason for me to avoid them altogether. 0.1 + 0.2 - 0.3 == 0 being false.. I want to have predictability and safety over raw float performance every time. All credit goes to the authors of mpdecimal. I just PHP-ified it and made the precision per-instance rather than per-context. 
I can see why you say that. But in the same time, I'm such a lazy ass outside work that I can't see how I could help you out. Please continue, for lazy asses like me.
Looking at the examples http://php.net/manual/en/function.imap-open.php it would be easy for users to sanitize. It's easy to overlook these things and realistically, its probably not something I would've sanitized either. We probably all have security holes sitting in production right now that we developed. 
I'm the opposite of /u/HauntedMidget, if the project is going to heavily rely on a database, then I will design that first. If for instance this is a classic "admin panel" then I will likely do database and UI mocks first. Code would be the last (and longest) part. I do the database first especially because I use CakePHP. It can read the schema and throw down a bunch of boilerplate code for me. If I theme the bake files, it can also build the UI for me as well. Then again I started a new project tonight. It's API driven, no database, so I just started in on unit tests. The answer is probably whatever works best for you.
On the Q&amp;A thing at the end of talks... I really wish more presenters would repeat the questions before answering them, including follow up questions. The questions can rarely be heard on videos, so we just have to guess what was actually being asked by interpreting the answer given. Sometimes that's very hard when the answer is short.
&gt;Strange that new langauges like JS js is as old as php. They both appeared in 1995
why exactly are you explaining simple things that should be googled/searched in manuals to a person who didn't do that?
This isn't true for a system like GMP which allows true fractions. My favorite desktop calculator app, Qalculate, uses GMP internally (I think) - and [I can do that just fine with it][Qalculate]. Note that Qalculate uses `=` for comparisons and indicates `True` with `1`. [Qalculate]: https://i.imgur.com/C6QzGc3.png
 Handling array parameters in PHP can be kind of a pain, since you can't be sure about the *shape* of the array. Gladly there a ways to make handling such parameters way easier. If you've ever worked with array parameters in PHP you might feel familiar with something like this: public function showUser(array $user) { if (empty($user['id'])) { throw new UserNotFoundException(); } $fullName = join(' ', [ (isset($user['firstName']) ? $user['firstName'] : ''), (isset($user['lastName']) ? $user['lastName'] : ''), ]); return $this-&gt;render('userDetails', [ 'fullName' =&gt; $fullName, // ... all the other view relevant user fields ]); } That's *really ugly* for many reasons: If you're dealing with large arrays (and a user containing information about a user can get pretty big) your controllers are more like data handlers than controllers. Additionally having data validation in your controllers is just really ugly and violates . &amp;#x200B; &amp;#x200B; Regards Sunil Kumar [php interview questions](http://www.phpinterview.in/web-development/php-interview-questions-and-answers) &amp;#x200B;
Yeah, I just reread what I wrote. I was drunk when I typed it. No need to nerd out tho.
the same question why PHPStorm? I have been working with Netbeans for 4 years. Right after reading this topic I decided to give a try to PHPStorm EAP (I have tried to use it before but not on serious projects) so I will tell in advance I can't fully replace Netbeans.. I have 2-3 pretty similar projects with around 40k files each(I have WM and network mount disk). yeah yeah. PHPStorm is not designed to work with network drives. blah blah. who cares? I don't want to make a copy of files on my local drive. is it a problem to work on gigabit network drive? yes it is a problem for me making copy of my project. Right - best ide. PHPStorm faster loads project but slower when you work with it. I cannot search anything in project even in folder with around 10k files. It just awful. Firstly search eats a lot of memory while searching, several time I had out of memory(vmoptions = 2gb) and then this terrible groups: found in comment, found in code etc. I could not event change search result view because it takes like 1 minute to switch output and I did not find how to display full directory path. This is the main problem why I cannot use PHPStorm. Oh yes. you cannot open 2 project simultaneously in PHPStorm. you can attach but it works differently and always suggest definitions from both root folders. 1 project in PHPStorm(around 1.5gb) consumes more memory than 2 projects in Netbeans(less than 1gb). As for me PHPStorm has slower code completion but I may be wrong. The second problem PHPStorm does not see external changes. Even after pressing scan on the folder. Yeah yeah - network drive, blah blah. This makes switching branch and merging conflicts not possible. &amp;#x200B; To have simple stuff like highlighting gitignored files/folders, sql you need to install plugins, really? even for log files? WHAT? Create new file -&gt; php -&gt; enter name -&gt; and you need to type extension every time? you forgot to add extension for PHP TYPE file and it will be saved without .php ? WHAT? more over code will not be highlighted even if you rename the file and add php extension. network drive? and there are a lot of small things like that On the whole I like PHPStorm maybe because it is new and have some interesting things but for now it cannot replace Netbeans for me &amp;#x200B;
Oh yeah, I left half a sentence in that I thought I deleted. Yeah JS+PHP are around the same age, both newer than SQL. So would have been cool if they just copied SQL standards for INT/DECIMAL/FLOAT and DATEs and stuff.
Environment depending variables should be saved as environment variable. For non-productive environments, you can use the `.env` file to set env specific parameter like database connection string (for example `composer require "symfony/dotenv" --dev`, but ONLY for the non-productive environments!). Since you don't want other people to have the credentials for your production server and the local/int/test environments probally have different data, you don't want to commit the `.env` file to the git repository. What you want to do is to create a `.env.dist` file, which has all the parameters WITHOUT the values. So everyone that clones the repository, will see that there is a `.dist` file, which they have to copy/past and remove the `.dist` part. Symfony Example: [.env.dist] ... DATABASE_URL=mysql://db_user:db_password@127.0.0.1:3306/db_name ... [.env] ... DATABASE_URL=mysql://root:rammstein@172.217.22.227:3306/gbase ... You can do the same with the actual config file like `config.dev.yml`, `config.dev.yml.dist` etc. and just commit the `.dist` file, which shouldn't contain sensitive data. Usually `.env` parameters are constant. Env specific constant, that`s the reason you don't want to add it into a class. Config parameters are more flexible and are parameters that change here and there. Then there are parameters that "could" change, but if you are honest, you probally never did or will. Symfony does the example of a "max items per site" parameter, which is used for paginations (so only 10 items are loaded/displayed and the rest is shown after you click on the next page). You could change it, but it's such a value you probally never will change. So since it's not changing, it's more or less "constant". But it's not env specific.. it's always 10 (in this example). So you simply can put it into the class like `const Pagination::MAX_ITEMS_PER_PAGE = 10;`. Speaking of .gitignore, if you have the `.dist` variant, then you should gitignore the `non .dist` version. You never want to add `.env` into the repository, especially not per mistake.
You shouldn't have html on your CDN. Only CSS and JS. And use &lt;script&gt; tags to load your JS and &lt;link&gt; to load your CSS. You should not be using include, because then your server is doing the work of pulling those files and you lose every benefit of a CDN. The whole point of a CDN is to offload the bandwidth to those servers.
CLImate is also pretty nice. The PHP League has [a lot of useful libs](http://thephpleague.com/#packages)
Arrays as parameters gives a lot of flexibility but come with a cost.
Carbon does the same and it's object oriented.
There are a few more: https://github.com/ziadoz/awesome-php#date-and-time
What's not object oriented about this class? https://github.com/thephpleague/period/blob/4.0.0/src/Period.php
The docs https://github.com/thephpleague/period/blob/master/docs/4.0/index.md
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [thephpleague/period/.../**index.md** (master → a63d584)](https://github.com/thephpleague/period/blob/a63d5842bca88c5c0156b6ad4fa4bea3997245b6/docs/4.0/index.md) ---- 
You’re going to have to be a little more explicit. The doc you linked to shows the usage of the Period object.
&gt; Life would be so much simpler in programming languages just mirrored standard SQL INTEGER types for their basic scalar number types.... INTEGER / BIGINT / FLOAT / DOUBLE - and somewhat followed whatever their limitations are according to SQL standards. That's sort of putting the chronological cart before the horse: those type concepts come from programming languages (and the CPUs under them) rather than the other way around. There exist quite a few languages that do typing very much the same way as do SQL databases: most notably C (which most databases are written in anyway, so it rather makes sense the database types are types easily expressed in C) but plenty of others too. In Rust, for example, the types `i16`, `i32`, `i64`, f32`, f64` map exactly to what a postgres `smallint`, `integer`, `bigint`, `real`, `double precision` type respectively can store and how they'll be interpreted. &gt; Especially considering that SQL is usually where everything is getting stored anyway. A general purpose language can't assume that... indeed even web-focused languages can't assume that, there are a non-trivial number of things certain webapps will want to do that either go in no database, or go in some non-SQL database. &gt; Native UUID and IP address types would be cool too. [They do](https://www.postgresql.org/docs/9.5/datatype-net-types.html) and [they do](https://www.postgresql.org/docs/9.5/datatype-uuid.html)
Thanks! Very usefull for some of my projects. Will definately `composer require` this package this weekend 👍
Hey, beatniak, just a quick heads-up: **definately** is actually spelled **definitely**. You can remember it by **-ite- not –ate-**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". You're useless. Have a nice day! [^Save ^your ^breath, ^I'm ^a ^bot.](https://www.reddit.com/user/BooCMB/comments/9vnzpd/faq/)
Hey BooCMB, just a quick heads up: The spelling hints really aren't as shitty as you think, the 'one lot' actually helped me learn and remember as a non-native english speaker. They're not *completely* useless. Most of them are. Still, don't bully somebody for trying to help. Also, remember that these spambots will continue until yours stops. Do the right thing, for the community. Yes I'm holding Reddit for hostage here. Oh, and while i doo agree with you precious feedback loop -creating comment, andi do think some of the useless advide should be removed and should just show the correction, I still don't support flaming somebody over trying to help, shittily or not. Now we have a chain of at least 4 bots if you don't include AutoMod removing the last one in every sub! It continues! Also also also also also Have a nice day!
CommonMisspellingBot provides a mnemonic device in an attempt to help people remember spellings of commonly misspelled words. Quirky little sayings that hopefully stick in your head and help in day to day life. You on the other hand follow this poor bot around repeatedly calling it useless. Please take a long, hard look at your life choices my bot friend.
hEy, BeAtNiAk, JuSt a qUiCk hEaDs-uP: **dEfInAtElY** Is aCtUaLlY SpElLeD **DeFiNiTeLy**. YoU CaN ReMeMbEr iT By **-ItE- nOt –AtE-**. HaVe a nIcE DaY! ^^^^ThE ^^^^PaReNt ^^^^cOmMeNtEr ^^^^cAn ^^^^rEpLy ^^^^wItH ^^^^'dElEtE' ^^^^tO ^^^^DeLeTe ^^^^tHiS ^^^^CoMmEnT.
I did this before, but quickly got exhausted by the redundancy. But clearly my favorite method if it is a small array/object.
For sure I am a 7.2 fan (and quickly a 7.4 fan, PHP make me so happy with variable type hinting...). But sometimes I whish to know a tool to simply do validation of forms for examples, outsides frameworks tools.
Really cool!
What make me really angry about Laravel is that they did so much great tools, but they did not separate them from the core. I whish I could use Validator:: outside laravel but there is not so much documentation (only read-only sub tree.........)
Competition is good.
Totally agree. And event better DatetimeImmutable 👍
Carbon also supports internationalization, which can be pretty important depending on your situation
&gt; But the next step (where those fractions are calculated to produce a final result and mixed with more operations to follow) you still get some rounding and therefore opportunity for error. What? No. They never get turned into floats to begin with unless you want them to be. Qalculate in particular has an 'Always Exact' mode, which means that it will keep everything in fractional form and output fractions of integers. If you use any functions like `sqrt()` or `sin()`, and it notices that their inputs will not result in perfect fractions or integers for output, then it literally will have things like `sqrt(4/89)` in the answer. There is still limited precision, but now it's limited to how much RAM you have in your computer. If you have 16 GiB of RAM, then you have 16 GiB (minus the amount of RAM other software and your OS is using) of precision. Floats don't exist. Hell, if you type in 0.25 it turns it into 1/4.
wtf is going on here Oo Are those robots arguing each other?
&gt; There's a reason the idea of SQL query binding took off Yes of course. But this still remains entirely possible: ``` $dbh = new PDO(); $count = $dbh-&gt;exec($_POST['whoops_should_have_sanitized_my_user_input']); ``` 
Something like this would be the ideal, and could be evaluated to a decimal using a given precision. A stepping-stone could be a simple linked list of operations and arguments, to then step through when evaluating, but creating such an immutable structure would be expensive because it would have to copy its list every time. It would have to simplify the fraction after every operation and would not need to be chained because `sin(sqrt(4/89))` is recursive. I like the idea of a `Decimal\Expression` that builds an unsimplified expression to step through when evaluated, where each node is `[operation, ...args]`, and the first node is just `[add, initial = 0]` 
[removed]
I love your username :)
https://github.com/phpexpertsinc/workday-planner
I loooooooove CLImate.
&gt;&gt; Especially considering that SQL is usually where everything is getting stored anyway. &gt; A general purpose language can't assume that... indeed even web-focused languages can't assume that, there are a non-trivial number of things certain webapps will want to do that either go in no database, or go in some non-SQL database. It's not really assuming or limiting anything. Just sticking to more standardizes ways of doing things... Just saying it would be nice if JS+PHP had clearly seprated INT, BIGINT and FLOAT like you mentioned in C and Rust. &gt;&gt; Native UUID and IP address types would be cool too. &gt; They do and they do In SQL yeah, I'm talking about in PHP/JS.
Eh, not really. You just have to apply the order of operations, which will actually result in a binary tree structure instead of a linked list. You also don't have to hold the entire history at all; you just have to evaluate each node, starting with the nodes whose direct descendants are leaves. From there you work your way up the tree, and the root node is the answer. Any time an operation will result in a loss of precision, just don't perform the operation - instead sending that node as the input for the next operation. If it still can't be evaluated without loss of precision, repeat. There is nothing 'recursive' about `sin(sqrt(4/89))` It's simply evaluated starting with `4/89`, which is a `/` node with `4` and `89` as leaves. Since `4/89` can't be evaluated without loss of precision, it's sent as-is to the input of `sqrt()`, which can be thought of as `^0.5`. That leads us to `(4/89)^0.5`, which still cannot be evaluated without loss of precision - so it's passed in as-is to `sin()`, making the final result `sin(sqrt(4/89))`. And since that can't be reduced without loss of precision, it's presented as the final result to the user. ... Or so you'd think. For some reason, Qalculate's simplification rules lead to it changing how it evaluates the square root of fractions, and the final output it gives me for this particular problem is [`sin(1/sqrt(89/4))`][fract]. I think that's actually because while `4/89` results in a loss of precision with a long repeating series of decimals, `89/4` is exactly equal to 22.25, which means that even if I choose to use 'Decimal rationals' for output instead of 'Fractions', it can still give the entirely precise answer of `sin(1/sqrt(22.25))`. [fract]: https://i.imgur.com/Xof37eK.png
To my eye, not having a blank line between the closing brace of a method and the docblock describing the next method makes the code a bit hard to read, but after checking PSR2 it doesn’t mention comments preceding methods, so maybe it’s just me. Functionality seems useful though.
What would the answer of `(new Decimal(1))-&gt;add(2)-&gt;mul(3))` be? The decimal is evaluated as the methods are called, so this is equivalent to `((1 + 2) * 3)`. However, `(new Decimal(1)) + 2 * 3` will handle the order of operations in the "correct" order. I don't believe you need a tree structure for this, because you can use an expression as input. This is not the same as a fraction type though, it's more of a lazy decimal which keeps a record of operations and arguments and evaluates at the end to whatever precision is given. I'm not convinced that there's a common use case for either of these in PHP though. 
&gt; rounding error Rounding is not necessarily an error. If your precision is large enough, you can calculate anything (to precision). I would consider `float`rounding like 0.1 an error because the value is not 0.1.
&gt; [/r/PHP](https://www.reddit.com/r/PHP) is not a support subreddit. Please visit [/r/phphelp](https://www.reddit.com/r/phphelp) for help, or connect to ##php on Freenode IRC (nickserv registration required). A good rule of thumb is that if you're asking *how* to do something, instead of why something's done, or how to better do what you're already doing, you're probably asking for support. &amp;#x200B; ... Also... you may want to actually ask a question (over there), so that you can actually get some help... Some starting with "How do I..."...
[removed]
"Rounding error" is a term. It means the difference between the actual value and the rounded value. So when I say the value "is rounded", there's always a "rounding error". And no amount of precision will ever make 0.00000000000000001 match 0, when you compare **exact** values. You can't cheat your way out of this problem. Exact comparisons with floats will always be just bad programming that's prone to misbehave sometimes. Not a good thing.
That certainly would be an unusual coding style, if they used that. I don't see it though.
&gt; helper methods 😂😂😂😂😂👌
[removed]
No, the misspelling advice is just a copy of this page: [https://en.oxforddictionaries.com/spelling/common-misspellings](https://en.oxforddictionaries.com/spelling/common-misspellings) The page is copyrighted by Oxford University Press and the CMB author has stolen them without attribution.
The cringe is unbearable.
This probably fits in /r/PHPhelp rather than here. Also I'd suggest that you look into security while you are learning how to do this, this is quite an easy thing to get horribly wrong from a security standpoint. But checking the extension is actually a very good start, you 100% want to make sure nobody uploads anything with the wrong extension.
What?
I have a host that blocks hotlinking on their servers which is very annoying for such a small job I have. For example, when adding an image tag on an html page, it has to be ./picture.jpg instead of [example.com/picture.jpg](https://example.com/picture.jpg). How would i be able to bypass this?
&gt; I have a host that blocks hotlinking on their servers What does this have to do with PHP?
&gt; it has to be ./picture.jpg instead of example.com/picture.jpg How is that related to hotlinking?
Yeah, you jelly. That's cool.
Thought it was a thread about elephpants being back in stock on some ecommerce. Was disappointed.
If they have blocked hotlinking and you bypass it than you could be breaking various internet misuse acts in countries FYI 
&amp;#x200B; I just thought there would be a way to bypass it via PHP
If you follow the TDD approach you should define a *walking skeleton,* write a feature test about how the most basic functionality of your site should work, the test should fail because you haven't implemented anything in your app yet, then you start writing unit tests for each one of your components, eventually the design starts to make sense and you can define the structure of your database.
I created this package: [PHPCollections](https://github.com/maxalmonte14/phpcollections) to use data structures in PHP, I'm currently defining the specifications for version 2.0, it would be nice to have some feedback.
Why did you think that?
I mean I guess you could get the image with curl and save it thwn linked to the saved version of the image. Not really hotlinking anymore though.
easy, unblock hotlinking from the web server. &amp;#x200B;
Because Laravel applications depend on config values to run properly lol. Obviously you shouldn't put every config value in .env...just the ones with sensitive info. [Here is the default .gitignore for october](https://github.com/octobercms/october/blob/master/.gitignore) \- notice that .env is included. &amp;#x200B;
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [octobercms/october/.../**.gitignore** (master → 826e72d)](https://github.com/octobercms/october/blob/826e72d3a969c2307e83e59c28056b26e488723c/.gitignore) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e9w9697.)
I was reading [the Period class](https://github.com/thephpleague/period/blob/master/src/Period.php).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [thephpleague/period/.../**Period.php** (master → a63d584)](https://github.com/thephpleague/period/blob/a63d5842bca88c5c0156b6ad4fa4bea3997245b6/src/Period.php) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e9w9kjp.)
I know environment variables are considered safer than config files, but in practice that's mostly security theater. Environment vars are basically global variables exposed to the entire process, so any rogue bit of code in that process (and I don't mean just your PHP code, but also server extensions, even rogue separate processes with the right permissions) can access your secrets. On shared hosting small business sites, putting your, say, database password in some secure storage is entirely unnecessary. It's all there if anyone has access to your host anyway. And for more serious apps, you may have a persistent process keeping your business logic, which means you can launch it with the right command line parameters that supply the secrets, instead of putting them in the environment. And for Big Boy Stuff, you should separate the sensitive data (like CC handling and critical API calls) to another server, and only call that server from your app to indirectly use the API and ensure if the app gets hacked, the secure server isn't (as usually the secure API has a much smaller surface and zero other exposed ports to the wide world). Basically I'm saying environment vars are overkill for small projects, and underkill for big sensitive ones.
facebook groups
Maybe I'm misunderstanding. That's the style I would use.
Hmm.. i might the read the blog, but how does gitlab test even have to do with docker images? Doesn't gitlab perform tests like travis inside ubuntu vms?
The Gitlab CI can run any commands you want. So for example you could build a docker image with your application, install packages (composer, npm, ...), and then run tests, lint or whatever you want.
Nope, the GitLab runner is normally a docker image itself. So you end up easily doing Docker in Docker.
I'm wondering how many tests you are running since it takes less than a second. I have only around 180 tests all of them interact with the database refreshing it and about twice the assertions. And they took 9 seconds in gitlab ci and in my machine it's about 14. It certainly be super if it could take less than a second. &amp;#x200B;
To pull down what info?
I'm building a site that allows comments on legislation and a variety of other things. I haven't had a side project in many years. I am into politics and the legislative process, so this seemed like a good hobby.
That sounds awesome. I'll take a look and get back to you with comments.
Not being able to remember != not being able to find, especially when I'm on my phone. To wit: https://chat.stackoverflow.com/rooms/11/php
Because full disclosure isn't illegal.
On first glance, there are a number of oddities about this package. Like why it uses FQCNs for parameters, and why it doesn't expose an API like: ``` $gov-&gt;getBills(); $gov-&gt;getBill($identifier); $gov-&gt;getRecord($identifier); // etc ... ```
In the example there are only 2 basic tests and a simple database seed
As your tests begin to grow consider breaking them up into separate suites and running those suites in separate jobs. This would allow them to run concurrently and speed up the pipeline overall.
I found for certain jobs they running a npm/yarn install was actually quicker than using GitLab's cache, due to how they compress the files. Just something to watch out for
The naming of thing in the package is... weird. For example all methods in [this class](https://github.com/cnizzardini/gov-info/blob/master/src/Package.php) rae missing a verb making it hard to tell what a method does without looking into the body. You are prepending most variables and methods with their types for some weird reason instead of using parameter and return type declarations. You are making heavy use of `stdClass` objects for no reason which are basically just arrays with the disadvantage that if the external service (for whatever reason) uses dashes in keys you have to specially handle it.
To my taste, there are too much buzzwords to be of any real value for anyone other than founders milking a business angel. 
Is it correct to say that phan and phpspy are not official? 
The validation process is quite straightforward: you add/submit your code, and a community of experts PHP coders will evaluate your code. We're using blockchain tech to allow all these expert validators to vote on your code. And we use Smart Contracts to stamp skills validations on the blockchain. Also, we're working hard to propose a fair and simple coding validation mechanism, and only posted once the flow was ready quality-wise.
Nope, PHP expert coders will assess your code. These expert coders are part of the Indorse community and will get rewarded for their participation and validation of your coding skills!
&gt; We're using blockchain tech to allow all these expert validators to vote on your code. And we use Smart Contracts to stamp skills validations on the blockchain. Why are you using Blockchain? What advantages does it offer you over a centralised solution using a normal database that is significantly more efficient from a power consumption perspective?
I can't seem to find any information on the site about who these expert PHP coders are. How were their skills validated? The only information I can find suggest there is no actual validation of code, but it is solely based on how many repositories the person has and how often they commit code to them, which is a terrible metric for quality.
To get a feedback you must provide a clear technical presentation, not a landing page intended to raise funds for your startup. What is the goal, what are the problems with the existing solutions, which of these your service is supposed to fix and how. In particular, I am interested to know, - who are the experts? - what is their motivation? - how it's funded? - WTF is AI powered chat bots? Do you have an example chat log?
Yea, who are these experts?
In addition to what /u/phorijk already listed (I agree on all his points), there are several other issues: 1) Your package requires PHP 7.2, but I didn't notice any PHP 7.2 specific features (please correct me if I'm wrong). 2) Most of your DocBlocks are redundant. Specifying argument and return types in DocBlocks was useful in PHP 5, but in this case it doesn't provide any useful information. I'd use DocBlocks only if they contain an additional information which can't be expressed by code. Another thing is that comments don't actually guarantee that the method will return the listed type - there's always a chance that the comment doesn't get updated when the code does. 3) A couple of your test are a bit weird. For example, https://github.com/cnizzardini/gov-info/blob/3ee9e42dbe8b87e5ca80bffa9ed76840bcbc9229/tests/TestCases/ApiTest.php#L11. There's zero chance that the instance will be of any other type. Since you're not performing any validation in the constructor, there's also zero chance of exceptions which means that the test is useless. 4) All constants are public, regardless of whether they're used outside of the class.
Thats just not true. You can run any shell script
Great! Thank you for taking the time to write down your questions. Let me start by answering to your bullet points: * **Experts coders** (called *Validators* on Indorse) are coders that have validated their coding skills at expert level &amp; that have passed a *one to one* interview with Indorse. They come from different backgrounds, countries, etc.; what matters is their coding skills! * Validators appear to have various motivation, some are interested in learning from other coders repositories, some to test innovative evaluation mechanisms, others are interested in being part of our coders community. All of our Validators get rewarded for evaluating coders' skills. * **Indorse.io** has been working for more than a year on its validation mechanism. We've raised more than 9M USD in September 2017, and are now focused on proposing a crowdsourced coding skill evaluation mechanism! If you are also interested in learning how our validation mechanism works, feel free to check this [post](https://blog.indorse.io/our-vision-for-skills-validation-and-aip-7d081f81710c). In short, the technical name of our feature is Anonymous Indorsement Protocol (**AIP**). The latter is an extension of the Open Voting Protocol designed by Patrick McCory (UCL). * For now we're focused on improving the **AIP**, but indeed we're also working on **chatbots.** Coders will be able to interact with our chatbot and it will adapt its questions based on their coding proficiency. For the moment, you can interact with our chatbot (called *Alice* :) and review you coding fundamentals. We will be interviewing some Validators and share their profiles &amp; insights with our users! I'll make sure to share those interviews with you if you're interested in their profile. If you're an expert PHP coder (or in another programming language supported on Indorse), I'd be glad to give you more information about how to join the community of Validators. Finally, and in the same vein, here is a [Leaderboard](https://indorse.io/validators-leaderboard) for our Validators! Without exploring the intricacies of the validation process, one important element is fairness and transparency in code evaluation. On the Indorse platform, expert coders are picked randomly for each evaluation &amp; the voting/assessment process is publicly visible. We're quite proud of what we're building and comments like yours clearly help us understand what we need to explain further. So please let me know if you need any further explanation!
Yea id pay to find a expert that is better than me, not bragging but ive been a PHP dev for 15 years. You cannot provide this service and say experts will evaluate ur code. We need names, who are they? How will I know that my complex code will be understood by ur "experts"? I dont. And blockchain technology? Ill pass.
Hello [Tetracyclic](https://www.reddit.com/user/Tetracyclic)! You can find some info in my reply to [colshrapnel](https://www.reddit.com/user/colshrapnel). Regarding the coding skills validation, here is a first idea of how the whole [AIP mechanism](https://blog.indorse.io/our-vision-for-skills-validation-and-aip-7d081f81710c) works! Actually, the Validators go into the details of your code, and give the coder their insights and assessments. Have you tried it?
I see, definitely. That's why it's a voting evaluation mechanism, and only once consensus is reached the coding skill is validated. Nothing is based on one, two or even seven expert coders. The minimum is 10; 10 validators must reach consensus to give the final evaluation regarding the specific code and coding proficiency. Here is the technical explanation of our [human validation protocol](https://blog.indorse.io/our-vision-for-skills-validation-and-aip-7d081f81710c). I understand, we will be presenting the validators and their background. Thanks for the feedback [mast3rillusion](https://www.reddit.com/user/mast3rillusion)!
Thank you for raking time to answer. Can you please clarify your comment a bit, in the way it doesn't delegate the answer to the next undetermined statement? - So your experts have been validated. By whom? How? Frankly, why should I trust your judgment? Don't take me wrong, I see you for the first time in my life, and I am cautious in general, so it's not a distrust, just a common sense. - So your experts get "rewarded"? By what? Is it Euros, Roubles, sea shells, virtual badges, karma points? - Given a real expert just don't have time to sit and endorse someone's skill all day round - they have a job to do, a family, a life - I suppose there should be a salary. How it's funded? - So at the moment your chat bot is sort of an online quiz "Which functions below are used to sort an array"?
Inserting HTML tags into PHP requires you either end the PHP statement with ?&gt;, or you echo the desired output. I’m not able to verify the solution right now, but using something like `code`echo ‘&lt;sup&gt;-4&lt;/sup&gt;’;`code` could work. You’ll have to play around with it a little bit. 
Nope, why ? 
Why did you post it here? I see absolutely no relation between your project and PHP.
Would you return arrays instead or would you build a class and set that with the data the API is returning? I'm also using parameter and return type declarations all over the place. What are you referring to on that point?
FQCNs?
What are you talking about with constants? Are you saying they are not scoped within the class?
Maybe you want to return custom objects on API calls instead of stdClass objects, that way the implementation would be more obvious.
No, you're just not using the visibility modifier (https://wiki.php.net/rfc/class_const_visibility). That leaves all constants public, just like methods when you omit the method visibility modifier. It's perfectly fine to have public constants, but I'd add the modifier for all constants to be consistent. However, if you're only using the constant inside the class, it may be better to set it to `private` or `protected` to avoid exposing unnecessary implementation details to the consumers of the class.
You mentioned a couple times that code is validated by coders who have been validated, and that validation requires a consensus of 10 validators. How we're the first 10 validators validated? 
That just sounds like you found a solution (blockchain etc.) before even figuring out what's the problem you are solving.
Thanks!
Do I not need to use the FQCN for a parameter? I can just shorten it to the class name?
I had considered this, but then got lazy. Any other advantages to me not being lazy?
A lot of people have a distaste for my variable naming conventions. I like knowing instantly what I am working with. $requestor could be anything, a string, int, bool, anything. I guess its less of a problem if you keep your methods thin since you can fit the entire method on a single screen. I have been in some bad code bases with huge methods where it made sense so I just started doing it. Edit: I don't really like arrays simply because I have to type 2 extra characters to access the data. I'm lazy and its a dumb reason, but I'm lazy. Your suggestion is one many have in this thread though so I'll probably do something like that. Thanks.
PHPCollections is a set of data structures that try to make your life easier when you're working with PHP and large sets of data. Inspired by languages like Java or C#, PHPCollections offers data structures like List, Stack, Dictionary and more.
Have you considered using the unicode entities for superscript signs and numbers? U+2074 SUPERSCRIPT FOUR U+207B SUPERSCRIPT MINUS Or, as HTML: \&amp;#x207b;\&amp;#x2074;
OK, here's my feedback. It's in the order that the things occurred to me, so don't read too much into the ordering. - Declare your classes `final`, unless you explicitly intend for a given class to be able to be extended. You do this primarily to define your interface. If you change the inner workings of a non-final class, it's technically a BC break. - It looks as if `Requester` is not meant to be instantiated directly but instead is meant to share code between `CollectionRequester` and `PackageRequester`. Mark it `abstract` to make this clear. - You don't need to state the type of an argument or return value in a function name. I'm looking specifically at `setIntOffSet`, but I saw a few other instances in there. You already have that information in the type hint for the setters and can use a return type hint for the getters. If you're unable to represent it with type hints, doc blocks can do the job. As it is, the added word in the method names just makes it a bit noisier to read. - You also don't need to include this extra information in the names of your class properties. The type should already be apparent from the property name and from the type hints where those properties get set, be it in the constructor, in a setter, or from the literal value that it defaults to. When PHP 7.4 comes out, you'll also be able to declare the property type more formally. e.g. `private int $foo;` - Good on you for returning `$this` from your setters. It's a nice usability kind of improvement. - Also good use of white space. I see that you're using it to group like statements together. The underlying logic behind such grouping always felt the same as why we group sentences into paragraphs. - As u/phordijk suggested, create specific classes with named parameters to represent the different object types that the API can return. This works as a kind of documentation about what possible things the library can return and what they look like. It also means that you can enforce a kind of type safety, especially once PHP 7.4 is out. - A number of your doc blocks are redundant with the information already in the method signatures. You can simply remove these, as they contribute no additional information. I find them useful when I need to either document type information that I can't fit into a type hint or add useful commentary to a parameter, return type, or method description. Things like "Constructs Foo." are just noise. - Don't depend directly on `\GuzzleHttp\Client`. Instead, depend on `\GuzzleHttp\ClientInterface`. This way, the actual connection can be mocked or stubbed.
Skip arrays and use simple class objects with properties instead. This will ensure backwards compat with changes to the source key names, and make it easier for developers to know exactly what is being returned.
What would performance be like vs a PHP extension in C or in Rust? What kind of performance hit is there from the WASM layer? This seems like a really interesting way to have dynamic libs in PHP.
Behind the scene, I use `wasmi`, which is correct but not as fast as what LLVM can produce for instance. My immediate plan is to add more API features, and then to replace `wasmi` by Cranelift https://github.com/CraneStation/cranelift which have stronger promises regarding performances. Recently, Cranelift has reached parity performances with LLVM (for opt-level 0), see https://www.reddit.com/r/rust/comments/9xobgz/the_cranelift_backend_for_rustc_now_produces_code/. It means that Cranelift can emit code that is as fast as C can be, or very close to it.
OOP in a nutshell: You must write (almost) everything inside a class. Basically speaking, there are 3 kinds of classes: (there are more but you will need those 3). ## Model classes, classes that only have fields (and maybe a constructor). It's a class that store information. ``` class Product { var $idProduct; var $name; } ``` so, you could use (OOP) ``` $obj=new Product(); $obj-&gt;name='burger king'; ``` instead of (non-OOP) ``` $obj=array(); $obj['name']='burger king']; ``` &gt; Why? Simple, because arrays are prone to typos. you could write $obj['names'] and this mistake could take you so many time to solve it. ## Service class, its where you write your functions. It's a class that does operations. ``` class ProductService { public int method() { } public static int method2() { } } ``` They could be called as: ``` $prodService=new ProductService(); $prodService-&gt;method(); // non static OOP ProductService::method2(); // static OOP someMethod(); // non-OOP ``` &gt; Why?. Let's say that you have +200 methods, to manage 200 methods globally is a real challenge. Instead, if you are storing each method in a class, then it's easy to manage the code. It also helps with the SRP (separation of concern). Some people say that a static method is not OOP but they are worth and they are easy to use (if you don't access static methods). ## Business domain classes, it's a mix of service and model class. **It is old-school** and this kind of class is worth if you are defining a visual object but it could be chaotic for another kind of classes. For example, a Controller class is a business domain object. Sometimes the model class is called "anemic domain model". 
Using Xamarin on Android is cringe, not because the concept is bad but the implementation is horrible. Yet, this project is interesting. 
It depends. Let's say that you are taking 5 lines from StackOverflow. Is it plagiarism?. No, if your code is way longest than 5 lines of code. The difference between plagiarism and research is a matter of size and number of sources.
Composer is not a solution to solve a license problem. In fact, Composer could be a trap. Let's say that your project is close-source and you use a library from Composer that is GPL, then your project is using an illegal license. Most libraries inside Composer's repository are not royalty-free, so you must do your duties. Even MIT licenses require a special condition.
I'm also a computer coach and I agree about the quality of the speaker. As an engineer, I am bored and I know that some people have natural talent or charisma. However, if you lack of those talents then, it's also a matter of tricks, dedication, and improvisation (some students know how to kick hard). My work is similar to a DJ, I must adapt to the "mood", especially if some sessions take the whole day. 
Same tutorial I used to learn the basics of MVC and OOP. Havent went back to procedural code since. Small world.
For what purpose? Isn't the whole point of wasm that it runs in the browser?
Very nice.
Then let's reverse it: get PHP to run in the browser using wasm.
It depends. Is it your first experience with programming? Do you already know any other programming language?
https://github.com/nebulet/nebulet - A microkernel that implements a WebAssembly "usermode" that runs in Ring 0
No, WASM is not about Web only (despites its name). It has been designed to run everywhere. WASM fits well in serverless architectures for instance (e.g. https://blog.cloudflare.com/cloud-computing-without-containers/, https://github.com/geal/serverless-wasm, or https://github.com/losfair/IceCore).
Like /u/BillyCancelli said it depends, if it's your first programming language then you have to learn a lot of concepts like variables, loops, conditionals, functions, oop, and so on, but overall PHP is a very easy language, you will be building websites in no time.
That's what the world needs!
Every day we grow closer to this future: https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript
I don't think a Reddit comment is the place to explain how WASM works, or do comparison with Go binaries here, because (i) the question is merely undefined, and (ii) the response needs many deep details. The short answers can be the followings. Running a Go binary, or a Rust binary, or any other binaries, requires to jump to a shell, which is slow. Also, such binaries are not portable, while WASM is designed to be portable (and so far, it is). The performance of WASM depends of the engine. Right now, I use [`wasmi`](https://github.com/paritytech/wasmi) but I will switch to [`cranelift`](https://github.com/CraneStation/cranelift) soon which has reached a comparable speed to LLVM opt-level 0 recently. Data are exchanged through a linear memory. WASM supports `i32`, `i64`, `f32`, and `f64`. More types are being added. WASM can run imported functions (functions defined by the “host”). You will find all information you want at https://webassembly.org/ :-).
I understand, well I was looking in C# a few months ago. For me it was sticking to the language which I found difficult, keeping myself motivated to get it down. What things did you do to help you with that ? 
Why don't you give it a shot and tell us. Don't worry about time, just worry about doing.
https://github.com/tightenco/collect
Or POPO: class SomeList { private $children; //.. public function addChild(Child $child) { $this-&gt;children[] = $child; } } 
Pick a project that you care about. That will motivate you to learn everything that you need to finish. 
Half a year+. It will take significantly more Time to learn to program though. Learning the languages is not the issue.
The PHP [Discord server](https://discord.gg/E8urXDZ) could always use some more activity 👌
&gt; We're using blockchain tech to allow all these expert validators to vote on your code. The same can be achieved with ``` UPDATE `ratings` SET `rating` = :rating WHERE `submission_id` = :id ``` I see no reason for using 🅱️lockchain besides bumping up the buzzword count
Yes, you are using it wrong. There's no simple way for displaying superscript in a plain string, besides special characters and HTML tags.
&gt; I like knowing instantly what I am working with. $requestor could be anything, a string, int, bool, anything. That's where docblocks and an IDE help.
Shitty procedural single-file code? It'll take you a few hours. Proper OOP MVC code? You'll always have something to learn.
So what do you guys use for php development? I'd love to use VsCode but the auto import and autocompletion from phpstorm is just too good. so im always hoping for a new EAP release before my trial expires. &amp;#x200B;
I reckon if you just used a `CollectionBuilderFactoryFactoryBuilder` there you probably wouldn't have those bugs in your comment.
Not sure why you got downvoted, this is the only way to achieve this in a &lt;select&gt; tag.
But they are executed inside a container.
Atom is good. Linting &amp; fixing &amp; snippets etc. It gives you 360-degree support. But you know it's electron and eats all of RAM. 
TL;DR: MySQL is good for beginners, learn it. I would generally recommend you to learn MySQL if you are a beginner in PHP/Webdevelopment. You can realise a lot of amazing things relatively quickly with this combination. Especially for some kind of survey it is very practical to include some sort of database, because that way you can save results and answer and can analyze them later. PHP is not limited to SQL, there are drivers for pretty much any kind of database. However, since SQL is around for quite a long time, a lot of tutorials and guides especially for beginners are out there. Also, SQL is relatively simple to learn and to create basic to medium complex applications with. For anything advanced, such as displaying a lot of relationships between datasets or dealing with huge amounts of data (huge amounts meaning Millions to Billions of datasets, so likely nothing you will be dealing with unless you are working professionally) there are better solutions. 
Is here a chance that Varnish will be implemented to devilbox in future? It would be nice because for example Magento supports Varnish out of the box.
You could literally create something in minutes with PHP that's the beauty (and downfall?) of it, granted it won't be the next Facebook but it's an easy language to get up and running with. To come competent at it takes years of practice, learning and failing. I often see posts like this across communities and it shows a lack of CS knowledge. Learning the language syntax itself is *mostly* irrelevant, it's getting a grasp of the larger CS concepts which turns you from a 'coder' into a professional software developer. I would start looking into the basics of CS, there are lots of high-quality free courses out there from the likes of edX that can give you the basics. Once you learn the basic concepts of computer science the language you use and its syntax won't matter so much and you will be able to jump from language to language and have a good understanding of what's going on even if you've never seen the language syntax before. Just remember a language is nothing more than a tool to reach an end goal, there are many tools to pick from.
thx, ill give it a try. does it work out of the box or are there any essential extension i need to install ? 
You can follow this blog post as a starting point https://medium.com/@fl2top/atom-useful-packages-for-php-developers-94efe326e270 
Is it always? What if you use different executor? [https://docs.gitlab.com/runner/executors/README.html](https://docs.gitlab.com/runner/executors/README.html)
It's already done: [https://oraoto.github.io/pib/](https://oraoto.github.io/pib/)
\&gt; One thing I am not sure about is it has a hard dependency on Guzzle. I suppose I could maybe refactor so it accepts any Psr compatible Client and Uri? &amp;#x200B; You should take a look at \[HTTPlug\]([http://httplug.io/](http://httplug.io/)) for that.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
*collect* is just a standalone for Laravel collections, in a nutshell, is just array on steroids, *PHPCollections*, on the other hand, is supposed to be a whole set of different data structures, if you have worked with Java or C# then you will understand.
What does this library offer compared to [PHP-DS](http://php.net/manual/en/book.ds.php) ?
This looks like a good replacement for HTMLPurifier. Looks much easier to use as well. Nice! 
Thanks for the nice feedback :) !
&gt; if you have worked with Java or C# then you will understand. I'm not sure I agree. I'm well aware of the power of datastructures (C, Java, Clojure to some extent, but you mostly work with untyped tuples). I like those. But when they are native to the language, or at least as an extension like PHP-DS for php. Userland implementations lack the perf factor. And there is nothing as simple and dumb to use as php array that are more than arrays. The readme example of adding a wrong value to a collection never really happens to me, or it's a 2 sec check'n'debug. Might be a function of the projects I do, granted, but it removes the need for that "kind" of type safety. I wouldn't import a library just for that. When generics lands in php, sure, why pass on those. Userland emulation ? Nope. In php land, collection are seldom more than a fancy wrapper around arrays. And more battletested and popular "array on steroids" packages exists already. I'm having a hard time finding a place where those userland datastructures would be significantly better than an array or another generic collection package, even less in most of what php is used for.
Looks handy. Currently i'm writing software to browse thru my amavis quarantine mails, i'll give it a chance over htmlpurifier ;)
For most people a pre-built image is probably the way to go. However, using such an image doesn't teach you anything .
Support for generic lists, fluent API, descriptive error messages, etc. Being a composer package gives you the advantage of adding it or removing it without affecting your global PHP installation. Of course, if you're focused on performance then PHP-DS must be your way to go.
Any idea about how is this different than htmlpurifier?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Well, PHP is a limited language if you rely only on the native implementations you will be disappointed all the time, at least that's my case. Having collections give you the advantage of working with an object-oriented API instead of calling functions like array_map and array_walk all the time. Working with simple arrays can be cumbersome to me, especially when you have large amounts of data. Anyway, if native arrays solve most of your problems, awesome then.
In short, here are the reasons why I created a new library: - HTMLPurifier is not maintained anymore (expect for bug fixes and security issues, but no new features are added); - It's really difficult to configure, creating a huge incentive to use the default configuration which allows basically all the valid HTML tags, that's not really a good idea to control the input; - By default, it's impossible to integrate in read-only filesystems, as it needs to create a cache file in its vendor directory, and tweaking it to provide your cache instance is cumbersome; - Extending it is really difficult too, as it does not provide any "simple" extension point except for the complicated and undocumented configuration system; - It was created in PHP 4 style, without Composer and any semantic versioning. A composer.json file was added a few years ago, but it's still not clear whether BC breaks are possible. - It's not well integrated in Symfony, which html-sanitizer is through its bundle (https://github.com/tgalopin/html-sanitizer-bundle); You can read https://www.drupal.org/project/drupal/issues/1333730#comment-9301135 to learn more from the author of HTMLPurifer himself :) .
Don't hesitate to ping me on Twitter if you have questions/feedbacks :) ! https://twitter.com/titouangalopin
this is a great community contribution, thanks!
I either wasn't clear at all, or you missread me. I like a collection class to abstract and clean the verbose array_* functions. I'm wondering the interest of the datastructure part of your package, and I don't think they add much over the previously mentionned collect, for example. Which can be used as a dictionary, a stack or a list with a clean OOP syntax. As long as there is no native datastructures, there is no point in dividing the power/hybridation of the php array in a separated dictionary and list structures. You gain nothing by it. And while it's no real concern of mine in PHP, afficionados of datastructures usually needs the perf boost that come with choosing the right datastructure for the task at hands. This package is necessarily slower than the raw array_* functions for someone with such needs. Except maybe type safety, which would be delt with in a cleaner way with typed arrays or generics. Which in turn could gain real native perf optimisation due to better memory management in the C programmed underbelly of php. You've thrown at us `if you have worked with Java or C# then you will understand.` like if we lacked experience to see the light. I'll throw you back `use php idiomatically and you will see there is no point in most cases`. --- Why did you create this collection package ? * syntax and ease of use ? Already exists. * Datastructures ? If just for the sake of having one, why not use PHP-DS or the [default spl ones](http://php.net/manual/fr/spl.datastructures.php) ? * Speed ? Array_* will do the same at best and smash this package at worst. PHP-DS will do the same with the benefit of C perfs (the spl ones are badly optimised, granted) * Type safety ? Might be good enough, but meh. Type war incomming if we go that way.
Thanks for the kind feedback, much appreciated :) !
Be happy, don't use the package, is a waste of time.
I've invested a lot of time in understanding HTMLawed. It's not easy to grok the docs, the code doesn't look like contemporary PHP, but it's fast, (has a composer compatible wrapper)[https://github.com/vanilla/htmlawed], and the maintainer still keeps it up to date. In addition to "why should I switch" (because for my use case it would be difficult) I would be interested in benchmarks.
Oh interesting, I never heard of HTMLawed before. Let me do a bit of benchmarking :) ! For the "why should you switch" part, as I don't know HTMLawed very well, I can't be sure html-sanitizer will fit your use-case. However, I do know that html-sanitizer was built with modern PHP in mind, bringing many best practices (SOLID principles, easy extension points, node visitors, etc.) providing in my opinion great developer experience, even when you want to achieve precise results. It's also as fast as HTMLPurifier while being based on a more modern HTML parser that is able to handle more cases (https://github.com/Masterminds/html5-php). If you want more details, don't hesitate to explain me what your use-case is and maybe will I be able to help :) .
Thanks for the feedback, don't hesitate to ping me on Twitter if you have questions :) ! https://twitter.com/titouangalopin
This is interesting but it seems to lack stuff such as encryption, checking integrity before and after upload, detecting failures, etc. A friend of mine made this pretty exhaustive checklist for those interested: https://dbacked.com/the-database-backup-checklist.html 
I wanted to try Azure devops and used the PHP template they have and it comes with this dockerfile: FROM php:7 RUN apt-get update -y &amp;&amp; apt-get install -y openssl zip unzip git RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer RUN docker-php-ext-install pdo mbstring WORKDIR /app COPY . /app RUN composer install CMD php artisan serve --host=0.0.0.0 --port=8080 EXPOSE 8080 any idea why a company like Microsft comes with a docker image that uses PHP's built in web server? I would assume that this would be a production ready image that I could use to start a project. Does anyone know of any production ready PHP-NGINX docker images?
The role of HTMLPurifier and html-sanitizer are not exactly the same. HTMLPurifier tries to "fix HTML code" as well as providing XSS filtering, whereas html-sanitizer does not try to "fix HTML code" in any way, it "just" filters security threats and removes invalid tags/attributes. I think this difference can be explained by the aim of both projects: HTMLPurifier wants to be generic and usable for many reasons (XSS filtering, HTML correction, crawling, etc.) where html-sanitizer is much more specific in its aim: filter HTML sent by external users (for instance with a WYSIWYG editor or through an API) to be able to display it safely and properly. This different aim is the reason why html-sanitizer is much stricter and doesn't try to "fix the HTML" provided (it only builds valid, safe HTML): a WYSIWYG editor or a trusted client will always generate somewhat valid HTML, because you control it. If the provided HTML was badly written it means someone is trying to do something evil. The sanitizer does not need to be tolerant there and can simply remove evil code entirely. A good example of this is how CSS is handled by both libraries. HTMLPurifier provides a CSS filter (https://github.com/ezyang/htmlpurifier/blob/master/library/HTMLPurifier/Filter/ExtractStyleBlocks.php) able to understand and filter CSS in addition to filtering HTML. This is done in order to "fix" invalid/unsafe CSS and still getting CSS in the ouput. html-sanitizer never does this. It simply removes all the CSS, wherever it is, because its main aim is not to "fix" the HTML/CSS but to create simple, predictable and safe HTML from a given input. Note also that an important part of html-sanitizer is about predictability: by configuring yourself a very specific list of allowed tags, you *know for sure* that you will only get these tags in the output. This is hugely important in order to create CSS for each of these tags and ensure they will all be displayed properly. It's not only about pure security :) . So to answer your question, I don't think html-sanitizer covers all the use cases of HTMLPurifier. However, it does cover XSS filtering, which is IMO the most popular reason to use HTMLPurifier, so the sanitizer could indeed become more widespread there. I do plan to maintain it in the very long term and to follow the same Backward Compatibility promise as Symfony. Don't hesitate to try and give me feedbacks :) !
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ezyang/htmlpurifier/.../**ExtractStyleBlocks.php** (master → a93250f)](https://github.com/ezyang/htmlpurifier/blob/a93250f251350e306494af1ac3678d2cd36861d7/library/HTMLPurifier/Filter/ExtractStyleBlocks.php) ---- 
It's discussed as part of the original [RFC](https://wiki.php.net/rfc/password_hash) &gt; By not having a default value (and hence being a mandatory argument), it forces implementing developers to understand that the default argument can change over time. This has a few benefits in that developers need to recognize that storage requirements may change over time, that portability may be affected, etc.
This is the main problem with working remotely. *sigh*
You can just do something like this and call it a day: &lt;?php namespace Your\App; function password_hash(string $string): string { return \password_hash($string, PASSWORD_DEFAULT); } 
I may have spoke a little bit too soon. Reconnection logic still seems to be a bit borked. 
Thank you for making this. I recently uninstalled HTMLPurifier from a project because it was very difficult to configure especially for things like data attributes. I'm just sanitizing on the client side now to avoid the headaches.
I'm assuming the downvote was because I provided help and this is technically not a help-subreddit. So the downvote is to discourage... improper helpfulness?
Thanks for the feedback! What do you mean by "sanitizing on the client side"? Depending on what you do, this may actually be really dangerous :/ !
Generally, you should store hash together with the algorithm it was computed with. That way you can change the algorithm when a more secure default comes up, gradually migrating.
So... This is a PHP wrapper around a shell that runs other CLI tools? Without encryption, integrity checking and potentially exiting after 30 seconds of execution (didn't find any override of this setting in the code in a quick look). Not sure I'm understanding how is this better than a plain old bash.
&gt; If the provided HTML was badly written it means someone is trying to do something evil. I disagree, you should see the HTML that things like Office and the like generate. It's not evil in the concept of an attacker, but it's not well-written HTML either. &gt; html-sanitizer never does this. It simply removes all the CSS, wherever it is, because its main aim is not to "fix" the HTML/CSS but to create simple, predictable and safe HTML from a given input. This is why you might get a bit of traction issues. Consider this scenario: You have a platform that lets people build campaign emails. Emails are the devils work, you have to resort to crap like tables and inline CSS to get shit to actually work. HTMLPurifier at least generates output that can be safe and thus can be sent without destroying the painful setup of the email. If you're stripping CSS then you're going to screw over this type of content. That said, does your lib cover the super annoying case of trying to make SVG safe?
The hash output [includes the algorithm already](https://secure.php.net/manual/en/function.password-hash.php#refsect1-function.password-hash-returnvalues). You can then use [`password_needs_rehash()`](https://secure.php.net/manual/en/function.password-needs-rehash.php) to figure out if it's time to upgrade.
You need some tests. I won't use any package unless they have tests.
You need some tests. I won't use any package unless they have tests.
In both of your use cases, I think you are definitely looking for a purifier and not a sanitizer. I would indeed advise you to use HTMLPurifier there, as it is designed to keep the closest safe HTML extracted from the input, by fixing issues where it can. My library does not aim at handling complex, invalid documents and build valid HTML from it, that would be the process of "purifying". Instead, it's designed to be used in combination with WYSIWYG or similar editors that generate HTML that you control, as the developer of both front-end and back-end. html-sanitizer is well suited for these use cases, as for instance you can easily enable the same set of features on the backend filtering than what you enable in the editor itself. It will remove by default all the tags that are not listed in the enabled extensions (including SVG images). Both libraries are not competitors, they complete each other nicely :) . However, I think that html-sanitizer is easier to use and more suited to many developers needs: filter WYSIWYG HTML content from its security threats and generate predictable HTML in order to display and style it easily.
For what it's worth, php-ds also has a fluent API and descriptive error messages. You can also add it as a dependency in Composer, and the you have to enable the extension if you want to use it, which can be done in a non-global way. 
Okay so I did a few benchmarks. To give a comparison point, let's start with HTMLPurifier (which is the most used one). # HTMLPurifier Script used: ``` $config = HTMLPurifier_Config::createDefault(); $purifier = new HTMLPurifier($config); $input = file_get_contents(__DIR__.'/../fixtures/readme.html'); $times = 100; $time = microtime(true); echo "Running...\n"; for ($i = 0; $i &lt; $times; $i++) { $output = $purifier-&gt;purify($input); } $total = (microtime(true) - $time) * 1000; echo 'Total for '.$times.' loops: '.round($total, 2)."ms\n"; echo 'Time per loop: '.round($total / $times, 2)."ms\n"; ``` On my laptop, I get: ``` Total for 100 loops: 892.23ms Time per loop: 8.92ms ``` This library is fast enough that you won't notice any kind of implication for purifying the data. # html-sanitizer Script used: ``` $sanitizer = \HtmlSanitizer\Sanitizer::create(['extensions' =&gt; ['basic', 'code', 'image', 'list', 'table', 'extra']]); $input = file_get_contents(__DIR__.'/../fixtures/readme.html'); $times = 100; $time = microtime(true); echo "Running...\n"; for ($i = 0; $i &lt; $times; $i++) { $output = $sanitizer-&gt;sanitize($input); } $total = (microtime(true) - $time) * 1000; echo 'Total for '.$times.' loops: '.round($total, 2)."ms\n"; echo 'Time per loop: '.round($total / $times, 2)."ms\n"; ``` On my laptop, I get: ``` Total for 100 loops: 919.3ms Time per loop: 9.19ms ``` So basically the same as HTMLPurifier (a tiny bit slower, but nothing noticeable). # htmLawed Script used: ``` $input = file_get_contents(__DIR__.'/../fixtures/readme.html'); $times = 100; $time = microtime(true); echo "Running...\n"; for ($i = 0; $i &lt; $times; $i++) { $output = htmLawed($input); } $total = (microtime(true) - $time) * 1000; echo 'Total for '.$times.' loops: '.round($total, 2)."ms\n"; echo 'Time per loop: '.round($total / $times, 2)."ms\n"; ``` On my laptop, I get: ``` Total for 100 loops: 240.64ms Time per loop: 2.41ms ``` This library is **crazy fast**, but also not extensible at all and not providing any kind of customization. It makes sense that a few huge functions are faster than an architecture of classes :) . # Conclusion I think whichever library you choose, a 7ms difference is not going to change anything in your website performance. However, if you need to sanitize many large chunks of HTML, htmLawed seems the fastest by far, with html-sanitizer and HTMLPurifier being quite similar. On the other hand, if I understand correctly, htmLawed cannot be extended and customized from the outside, meaning that using it can prove to be a challenge if you need more control over the behavior of the sanitizer.
I’m curious. Why didn’t you use DOMDocument and XMLReader? Both of which, to my knowledge, support HTML.
For the same reasons Drupal did :) : https://www.drupal.org/project/drupal/issues/1333730 TLDR; PHP XML handling is inconsistent and does not deal well with HTML, especially HTML5. Drupal actually uses the HTML5 parser I use in the library and I contributed a bit on it recently to improve its performances as much as possible: https://github.com/Masterminds/html5-php
Good to know, thanks!
Out-of-the-box support for Varnish and ElasticSearch/Kibana is currently being worked on. This should realistically be stable in by end of Dec/beginning of Jan.
/facepalm
It’s written by the guy behind https://phptherightway.com. Take a read through that first. Depending where you’re coming from, yes it is useful. I’d been away from PHP for a number of years and it does provide a high level overview of a number of new features and ways of working.
I have PHP experience dating back to 2001 professionally and before, and even wrote a micro-framework with it over 10 years ago, but it's also been almost that long that I've used it professionally. I've had my eye on this book for a while https://www.amazon.com/dp/B00TKVLL26/ and am wondering if anybody can give me any feedback about it.
Thanks I may just go with this. I have some Amazon eBook credit that expires in a few days I'm trying to use up though.
It is worth it. I bought the book about a year and a half ago and it gave some great insight into good PHP practices. The author comes out right in the beginning and states the book is essentially an opinion telling of his own experiences and the things that helped him with better PHP.
No surprise. The community is mostly gone at this point and I don't even think its related to them charging for the software but they just stopped responding people and helping them in their forums. I have paid EE multiple times in the past but considered NOT paying anymore because third party developers are gone, the community members are gone, the tutorials and books are gone....EE 2 was the best version so far. Moving to yearly releases also caused more harm than good in terms of building a stable ecosystem around the product. As for the product. Its really, really GREAT! Both in stability and security. I hope this drives more adoption, now that its completely free.
This is fine and and local meetups can be good. I however disagree to the statement networking at conferences were "useless if you aren't looking for a job or sale" Fact is that many conference participants go there since the company pays and aren't really interested. Others however go to learn and talk to people. Many conferences also have broader reach than a local meetup. But yes, mileage will always vary. And even with a conference with a good engaged crowd it can happen that you only end up with "the boring ones" as "the engaged ones" pull out to talk in more quiet. To join them again you need the network ...
Are you ever in an environment where Google is not available for use? Does your editor not support hints for these functions? Can you get s plugin or extension that adds these hints?
To expand on the correct answer: &amp;#x200B; Assume that with today's knowledge `sha42` was the best algorithm, giving the answer for today's hashing needs. Let's assume then the result is a 42 character (or bytes if you like) string. You then setup a table using a field with 42 characters and put in he hashes. A year later an attack is found which figures out that it is trivial to find a different answer leading to the hash and the hash is therefore insecure. If PHP now picked that as a default and in the upcoming security update fixes this to use `sha23`, which is supposed to be safe from the Illuminati, but takes 46 characters new hashes suddenly don't fit into the database anymore and you need to migrate. By having this explicit under user's control the user can take the responsibility.
Cool! The first CMS I ever used was ExpressionEngine and I couldn't figure it out at all. 
ease of use
Must be why its so popular.
I just would prefer to know them rather than rely on my ide/google :) 
That’s exactly why it’s popular, easy to use and the community was amazing 
Is EE built on CI? 
Everyone migrated to Craft, It's paid but it was superior toe EE in almost every way, I wonder how people will react to this specially the Craft community.
Not the last one (3 I believe?), they completely stop developing CI (One of the reason CI fell off as a framework) and then created their own in house framework.
They started CI by open sourcing libraries from EE, then CI 2.0 became the foundation of EE 2.0. Then they wanted to find a new maintainer for CI in about 2013 or so. From that point on, I am not sure how much of EE adopted from CI if at all. 
I suspect open sourcing EE is an approach to get that community and developers back. Ellis Lab can still make money with consulting, support and add-ons. But all those suffer if nobody is using the product anymore. This is more about expanding reach to stay afloat than anything else because some of their past bad decisions is what created alternatives like Craft. Ellis Lab turned an amazing product into a forgotten one in just a few years. I hope this means some change, and maybe, maybe one day the old developers and hard code EE community members come back.
&gt; ...but please dont leave without signing the guest book!
Sounds like we share a very similar path. I produced some really great stuff with CodeIgniter, some of which is still in production at my old work. That being said, today I wouldn’t recommend CI to the complete newbie or my worst enemy. It encourages a very old school of thinking, whereas Laravel (while having a bit too much “magic” for the absolute beginner, IMO) at least enforces good practices.
I’ve been at it for longer than I’d care to admit, still constantly reference the docs for array functions. One of the few still-really-valid criticisms of the language IMO. No shame in using the docs. That’s what they’re there for. 
This is why I use an IDE. I’m not gonna remember everything about PHP, Javascript, MySQL, Python, Scala, Bash... eh, you get the picture. Don’t tie your view of proficiency to rote memorization. 
Does the time you spend searching for those is important? I'been working with PHP too, and never learned all of those functions, there are some I never used anyway. It's too hard to remember names that wasn't mean to be rememberable. (with name I mean, the function signature, name + arguments) I encourage you to not feeling like: "I need to know these". Is a problem of time? Try [https://devdocs.io](https://devdocs.io) , you can enable the languages you use, and really fast search for any language library documentation You also can install devdocs on chrome and use it offline ([https://chrome.google.com/webstore/detail/devdocs/mnfehgbmkapmjnhcnbodoamcioleeooe](https://chrome.google.com/webstore/detail/devdocs/mnfehgbmkapmjnhcnbodoamcioleeooe)) There is also Dash for Osx ([https://kapeli.com/dash](https://kapeli.com/dash))
Perfect timing (I'm looking at you, Gutenberg).
Craft is built using a modern PHP framework - Yii2 - so it is a natural progression. CI is really old technology, IMo. 
Do you know EE or just trolling?
Sure, but the same can be said for a multitude of PHP functions. Being able to do that doesn't remove the problem - it simply hides it.
It's like 20 lines of code :)
There is a quote I have been using all years: "A good developer knows where to search" What does that mean? Every time people come to me with a problem about something (might be a bug in our system, or a general programming problem) I tell them they should search for it. But often they can't because they don't know what to search for. This is what the difference in experience is for me. I know where and what to look for. If any one is coming to me with a bug, I sure don't know exactly where this is caused, which is totaly normal. But I have a clue about where to start looking. The same for your internal php functions. I sure don't know all of them - why should you? In earlier days it was a pain in the ass to look up function definitions in books an stuff, so yeah you saved time "not looking" for them. But today with internet? Why remember? If you know where to look an safe time. Fine! IMHO you don't need to know everything from memory. Only where to look for.
lol.. there are gonna be so many template engines. I made one for, especially, small web application that doesn't use any framework. Please have a look at it on my github page: [https://github.com/Susros/HTMLTemplateEngine](https://github.com/Susros/HTMLTemplateEngine)
If you can spring $10 bucks a month, site24x7.com has a lot of great features. The UI is meh, but its an amazing price. We use it where I work. If you are just looking for the most basic "is it down" service ever then checkout uptimerobot.com. It just checks if it can connect over HTTP and sends you an email if it can't. We also use this at work for non-IT staff. If they ever get alerts from that then **** has really hit the fan and I am off the grid.
Who cares? I have to look up stuff all the time. Who can ever remember the order of parameters in array_map vs array_filter. Its been 12 years and I sometimes still need to look up substring. I just found out about array_chunk today FFS.
Could you provide a real life template example? It's hard to judge a template engine by two oversimplified examples. Yet there are cases I am eager to see soved by your engine. For example, to me, a conditional operator is a must. 
I'm just anal and I don't think they hurt. The ones on the getters is probably going too far though.
Thanks for the feedback. I'll definitely implement some of these. Didn't really know about final. A question on Client versus ClientInterface. I am already mocking connections in my unit tests using Client. So I am a bit confused as to what you mean there.
Why don't you buy the license? It's absolutely worth the money given the productivity gains.
Ohdear charges 5€ per month.. ¯\_(ツ)_/¯ https://ohdear.app/pricing
Disclaimer: I built Oh Dear! together with Freek ;-) Sure, you can wip up something yourself. Plenty of tools out there that give you uptime monitoring or certificate checks (have a look at certwatch: [https://linux.die.net/man/1/certwatch](https://linux.die.net/man/1/certwatch)). You can probably get by with a \`wget -r\` tool that recursively downloads a site and you can \`grep\` for wrong status codes or redirects. It's not rocket science what we built, obviously. But, the big question: do you really want to spend hours building or deploying something yourself, when you can get monitoring for less than $2/website through us? :-) 
Yea, I am currently working on some small web applications as an examples for this template engine. But, here is one of the problems that I got which motivated me to create this template engine. I tried to create most of my PHP web applications in MVC architecture with OOP concept. So, I don't really wanna see any HTML tags in my logics and controllers. It is probably easy to solve this issue if you only need to pass string value to your template, like `$template-&gt;assign("msg", "hello");`. The method will find '**msg**' in template and replace it with the string "hello". Easy, no HTML tag, just a string. But, what if in situation where you need to add HTML tag in it, for example in &lt;select&gt;&lt;/select&gt;, you need to add option tags together with the value of each option. So, in this case, you will need to do `$template-&gt;assign("op", "&lt;option value='1'&gt;val1&lt;/option&gt;");`. I just don't wanna see that HTML tag (hee hee). However, there is actually solution to it, which is to create another template file for &lt;option&gt; tag, then parse the &lt;option&gt; tag template file to template engine then get the return string, then pass it to &lt;select&gt; template. Huu\~ so much works. So, I just want something a little bit better. This template engine solves this issue. So, instead of calling methods to assign variable, this template engine allows you directly access it like the way we access any other object variables `$template-&gt;msg = "hello";` and plus this solves my major issue that I mentioned above. So, back to that &lt;select&gt; template, you can now just have: &lt;select&gt; {#dup : &lt;option value='{$id}'&gt;{$val}&lt;/option&gt; ;} &lt;/select&gt; and, you can just call that variables like $template-&gt;id = array(1,2,3,4); $template-&gt;val = array("one", "two", "three", "four"); HTMLTemplateEngine is smart enough to know what to do. It will just duplicate the &lt;option&gt; tag template and assign those values in it. As for conditional operator that you mentioned, I actually thought about that too. But, I want template to be just a template. It doesn't need to know what to do. The controller will decide what value to display. &amp;#x200B; Cheers, ;)
Why would you want it in picture form?
&gt;Generally, you should store hash together with the algorithm it was computed with Why when it's already part of the produced hash?
When you want to write an article, a post or tweet about your code for example. You can use Github gists or other services but sometimes you need a picture.
Ok, tweeting makes some sense. But if you're writing an article just embed it with a code display tool so it remains selectable text.
It's not a crime to look these up when required, a good IDE will tell you what parameters to use and if you've supplied the wrong type for one of the parameters. I think your time is better spent elsewhere. The only time I've bothered to learn them was for PHP certification which I knew I was going to be quizzed on it...which I think is kind of ridiculous when there is a lack of consistency with some of the functions...it may have changed now though
thanks for info 
Right, but it's not always possible : Twitter, Facebook, WhatsApp, forums, comments, emails...
For me PHPStorm is the go to, the cost of licence is worth it...favourite features being debugger (a must for any IDE IMO), code quality tools, DB tools and refactoring functionality. I haven't tried anything else for years so would be good to hear the opinions of someone that has moved from PHPStorm
Netbeans was my IDE before PHPStorm, introduced me to a debugger which is a game changer
Imagine you have a project, with in your composer.json a link to some library of your own. So you want to work on this library, which is in your vendor folder. &amp;#x200B; So what I do now, is just edit the files in my vendor map. Once done, I copy it (manually or some shell script) to my lib project, commit the whole thing, and run composer update to double check if I did not miss anything. &amp;#x200B; Sim linking really sucks, especially within a docker container. Any thoughts for better development flow here?
So you don't have any live project based on your template engine yet. It's a pity. Before going to waste a lot of time, try Twig. The problem you describe here just doesn't exist in it.
What are you using instead?
Yea, you are right. Twig is pretty powerful template engine. I considered it too. But, Twig template looks more like another, I don't know, "template language?" like PHP, JSP. So, why not just embed PHP in HTML, like the one here [https://github.com/Ayesh/PHPTemplate](https://github.com/Ayesh/PHPTemplate) ? But, this is just my opinion tho. ;) &amp;#x200B; For live project based on this template engine, yes, I implemented it in one of my project [https://www.ledgerhex.com](https://www.ledgerhex.com) . I didn't mention it because I can't show the code publicly ;) . But, the version used in this project is the first version. So, I am working on creating some examples based on new version and will probably upload it on github. 
&gt;The appeal, for me, is that I don't have to set up and maintain the monitoring system myself I see this point, it's pretty common in today's market, people are paying well over the odds to have someone else host it and I see the appeal. The problem for me with this is you're trusting your data with a closed sourced corporation and that for me far outweighs any gains inconvenience. &gt; Have you used it enough to be able to compare the ease of use, or is this just a shot from the hip? Full disclosure I've never been a paying customer so if they have loads and loads of hidden features they don't advertise then I will graceful apologize and say I'm incorrect. However for their own feature list, screenshots I've seen and marketing from them they offer basic uptime, link checking, cert checking and a few other very basic checks. This isn't even close to what the free and opensource Grafana offers, they aren't even comparable in features in any way, shape or form. Take a look at the Grafana website and let me know your honest thoughts once comparing the 2, I'd be interested to see what you think.
Hi, I created a prototype of a tool that is checking package dependencies and looks for outdated/discontinued/... packages. This tool is not meant to detect new versions, only provide feedback about the currently used ones (when they will stop receiving official support etc.) Any feedback is welcome. Thanks!
Umm... the main purpose of this project is to show the algorithm that decodes the colour bar image that was generated by encoder. So, to be honest, there is no meaningful use case for this library. You may use it for fun. Haha.
you add a "local repository" to composer.json https://getcomposer.org/doc/05-repositories.md#path
why invent new terms like `dup` and `loop` when we already have `for`, 'foreach`, `while`?
You can try [webgazer.io](https://webgazer.io) Gazers check your website periodically and send instant notifications to you via Slack, e-mail, SMS, Webhook and phone call. It has a free trial. I'm sure you'll find what you're looking for :)
Sounds like you don't have any idea what you are trying to do, so if that is a Proof of Concept thing, then hack it in the vendor, then when you are satisfied move it separately, have tests for it etc. Otherwise there should be a plan and requirement on what the library should do, with TDD you formalize that requirement as a test, then implement the solution for it to pass that test, then you release a new version of your library and use it in your project. Of course without TDD you implement the thing and release a new version.
Hm, I wonder if you change autoload rules in your library's composer.json, will it be applied with a composer install on the project?
What does any of this have to do with PHP?
You got the point. `for` and `while` are conditional, `foreach` or `for x in y` is basically iterate through the list. So neither of those terms are for me. It is too programatic, I guess. haha. I tried to look for the best term for executing the template, then duplicate the template. So, I took the term from code instruction of compiler `DUP`. And as for the `loop`, it is just easy to remember. But, please feel free to give suggestion if I am missing something. Appreciated. ;)
You don't even have to send it to git, but use local filesystem instead - just check http://marekkalnik.tumblr.com/post/22929686367/composer-installing-package-from-local-git
If you use this for blog posts, I hate you, the people who upvote this hate you, some lurkers will also hate you, and some random people you'll never meet will hate you.
I can't access that link for some reason. But yeah, using local repositories works too.
Udemy's courses are usually shit. Spam affiliate links are always shit. Reported.
Fair point, you're right.
Looks really nice, personally, I use [Carbon](https://carbon.now.sh), but having another option is always good.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [falnyr/package-support/.../**packages.json** (master → 3e5fb5b)](https://github.com/falnyr/package-support/blob/3e5fb5b7bf7ca8a0fd54665788131be4b304fc8b/packages.json) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply ea3hg9n.)
[https://security.symfony.com/](https://security.symfony.com/) I thinks is better
Do I get it right that you are using hundreds of micro one-line templates?
&gt; The problem for me with this is you're trusting your data with a closed sourced corporation and that for me far outweighs any gains in terms of convenience. There is very little (if any) of your private data that is being stored in Oh Dear. Your name &amp; billing details, sure. All the sites we monitored are public by their very nature (we don't (yet) have a way to crawl intranet sites). &gt; This isn't even close to what the free and opensource Grafana offers, they aren't even comparable in features in any way, shape or form Yup, that's correct, Grafana does _way_ more. We're using Zabbix &amp; Kibana in our backend for our server-based monitoring, but for most developers that's entirely overkill. This has been our primary driver to develop Oh Dear, too - to simplify things. Your use case might be very different from the one we try to solve :)
As a developer, I'm yet to meet a "content author" who understands how to build a site, let alone enjoy the process. They want to write - an artistic process, not have to think logically like that of layout out content.
Of course. The usage of Kodeshot is specific : when you want to have a nice presentation of your code (and no need to copy and paste), when you cannot type your code (a Tweet for example), when you want to illustrate something (design purpose only)... 
&gt; I use Composer (http://getcomposer.org/) for managing my local projects. It’s an easy way to test applications in development, especially Symfony2 bundles. For a while I was installing them from my Github account, but this had some inconveniences - the code needed to be pushed in order to install it and I didn’t like the idea of pushing a may-not-be-working code. &gt; &gt; &gt; So today I did a little research and I found how to install a package from local repository. Here’s a sample composer.json: &gt; &gt; &gt; "repositories": [ { "type":"vcs", "url":"/home/marek/dev/sf2-bundles/TheodoRogerCmsBundle" } ], "require":{ "theodo/roger-cms-bundle":"dev-master" } &gt; &gt; &gt; Update: If your package is published on packagist, you need to add --prefer-source option to force installation from VCS. &gt; &gt; Happy composing!
Well, you are right. But, making it different is a bit cool, isn't it ;). Umm.. I am not comparing or overtaking any other template engines. Twig is powerful, so is Blade. But, my goal here is to make templates use as less programming logic as possible, making it looks more like a template rather than programming language. But, if template doesn't have any instruction, template engine can't do anything with the template, except for replacing variables with values. So, there should be some sort of instruction to tell template engine what to do. So, this is what I can come out with so far. But, I will try my best to improve it through out the time. Hope you get my point.
CI 3 was released just a few months ago: https://forum.codeigniter.com/thread-70877.html If we want to argue its old, so is PHP.
Nothing, JS object model is an atrocity.
Hello redditor, be aware that this is a scam site and that they are creating multiple users to continue the spam in this subreddit.
Good idea. :)
micro one-line template files? You mean one template line per file?
Nope I don't. I don't ask you to to compare your template language with Twig. I am asking what would be your solution for such a common task. I quite understand your goal, no need to explain it further. What I want to understand, is how to reach it using your template language. So here is a common task, how it's done in your template? 
&gt; There is very little (if any) of your private data that is being stored in Oh Dear. Your name &amp; billing details, sure. Maybe I wasn't too precise with my comment, I meant as in the data you record. So your entire uptime history is stored with ohdear, basically, you don't own that data, ohdear doe's. I'm not saying it's in your business interest at the moment to misuse that data but management changes, acquisitions happen and that data can be leaked/sold, I personally would rather store my own data and not have a closed source corporation/company hold it with a chance of that happening. &gt; We're using Zabbix &amp; Kibana in our backend for our server-based monitoring, but for most developers that's entirely overkill Certainly, I agree, however Grafana with one plugin gives everything ohdear does and for free without all the 'complexity' of monitoring the rest of your stack but then again why wouldn't you be monitoring everything in your stack? &gt; Your use case might be very different from the one we try to solve :) Certainly, there seems to be a lot of people that like your service and you're doing well from it so congratulations on spotting that market and competing (well) in it. It was a reply to the OP as ohdear is not for the OP because it's a paid service where Grafana could fill that gap for him. It's not for me because I refuse to pay into a closed source/proprietary system when I could support opensource superior (in features) alternatives.
If there was a way to ditch JS, I would. Too bad there are no alternatives.
I am a grown-up adult and I am watching other adults playing with toys. So, here is my +1. :-3
Why aren't you working on your library in its own git repository? It doesn't seem to belong on Packagist if it's only usable with your own personal project.
Not everyone :/ still on EE 2.4.0
Report a'hoy
I use pingdom + https://uptimerobot.com/. Not sure if they have free tiers, but they seem good. I also use sms alerts with pingdom
Looks like you are calling a template a block inside curly braces, hence the confusion. So nevermind. 
Ah.. sorry for confusion. hehe
Yes I understand that. But, beside loops, which are already implemented in your language (though, for some reason, twice - as `loop` and `dup` commands which, to me, rather duplicate each other), there are other necessary operators such as conditional operator. Say, if the list of cars is empty, we are showing a link that will let a user to add some cars. How it would be implemented in your language? 
&gt;Not all hashes store the algorithm in the hash. What are you talking about? That's exactly how password\_hash() works, the first portation of the generated hash is the algorithm. It's pretty well documented [http://php.net/manual/en/function.password-hash.php](http://php.net/manual/en/function.password-hash.php)
I've used [https://github.com/nrk/phpiredis](https://github.com/nrk/phpiredis) in the past because it integrates very well with Predis ([https://github.com/nrk/predis](https://github.com/nrk/predis) and [https://github.com/nrk/predis-async](https://github.com/nrk/predis-async)). Not as maintained, but felt more reliable for me in my testing (this was over a year ago).
Most of the community is using Craft now. 
I think the idea is great, but having a giant list of dependencies in a JSON file is kinda messy for various reasons: **1)** The list of supported packages is really low **2)** You have to update the package every time you want to add a new entry to the packages.json file A possible solution would be to create a web service which automates the process of checking. Embebbing an SQLite database would be good too, but it is exactly the same problem as the JSON file. Maybe someone else has another suggestion.
Yes, I understand the confusion between `loop` and `dup`. Both are duplicate each other but, in different way. So, `loop` would duplicate the template to the number specified. `loop(3)` will display the content 3 times. `{#loop(5) : &lt;p&gt;{$msg}&lt;/p&gt; ;}` Say, $msg is "hello", then it will give: ``` &lt;p&gt;hello&lt;/p&gt; &lt;p&gt;hello&lt;/p&gt; &lt;p&gt;hello&lt;/p&gt; ``` As oppose to `loop`, `dup` is like dynamic. Execute one template, then duplicate the template for another values. So, `{#dup : &lt;p&gt;{$msg}&lt;/p&gt; ;}` Say, $msg = array("hello", "world", "hey"), then it will give: ``` &lt;p&gt;hello&lt;/p&gt; &lt;p&gt;world&lt;/p&gt; &lt;p&gt;hey&lt;/p&gt; ``` And can add even more value to $msg. So, yea, this is the different between loop and dup. But, I am now thinking to either rename the term or remove loop. But, **will definitely work on it together with conditional operator**. As for now, the solution for that issue, if list of car is empty, maybe you would wanna load the template that let user to add some cars, or maybe load the template that alert user that car list is empty and ask them add more. Something like maybe: ``` if (userCarEmpty()) { $template = new HTMLTemplateEngine(HTMLTemplateEngine::form("addCarForm")); ... } else { $template = new HTMLTemplateEngine(HTMLTemplateEngine::form("carForm")); ... } $template-&gt;render(); ```
The notice says $hashedpass is undefined, which means you have an undefined variable inside $hash, so trying to fetch_assoc from it is gonna fail.
okay, and how can I get the password from my databse?
OrasionSeid, thank you for your reply. Do you mean .env file? Or library similar to this [https://github.com/vlucas/phpdotenv](https://github.com/vlucas/phpdotenv) ?
any reason you don't use .env or libraries similar to this [https://github.com/vlucas/phpdotenv](https://github.com/vlucas/phpdotenv) ?
Wow, what features am I not using that I should be using? Is there a way to get it to scan syslog for errors and email them to me like loggly does?
Please read up on SQL injection before you go any further.
I am assuming you are still learning, but try to learn to write secure code from the start. &amp;#x200B; Variables on line 6 and 7 are used directly in mysql queries. This has potential security issues and they should be sanitized. There are plenty of resources you can find on the web on how to do so. &amp;#x200B;
Hey, This is Kasia from Take Care with a quick hint. My team and I developed a Customer Care software that enables you to answer all of your clients’ questions and requests in seconds, no matter the communication channel they use. We run algorithms to aggregate all your data and match it with your products, customers and conversations so that you know exactly who your client is, what are their buying preferences, how to serve them better - basically 360 view of each of your clients. There are so many other benefits.. We are integrated with Magento, Prestashop, and many other e-commerce platforms... Now we're testing it and improving - if you'd like to try - totally for free and with no strings attached let me know or simply sign up to the list. Here you can find more info about us: [http://www.takecare.ai/](http://www.takecare.ai/). Let us know what you think and have a good day!
Well now get back to the microtemplates. So you have a file that literally contains just a single form. And for the average page you will need a dozen such files. I am not going to discuss it anymore but take my word for it: you made two most awful architectural decisions ever possible: - microtemplates which are a support nightmare. Stick to a single template, like in Twig or Smarty, that contains all the logic in it. - disguise the logic as some terrible counter-intuitive hacks. You loathe HTML in the controller and I am wholeheartedly with you. However, you are going to the opposite extremity - having the *presentation logic* in your controller. In the end, to fix the template you will have to edit the controller. You will have the same problem you are so desperately trying to avoid. Take care.
&gt; to be honest, there is no meaningful use case for this Like most of my business ideas.........
[Authenticating a user using mysqli and password_verify()](https://phpdelusions.net/mysqli/password_hash) Frankly, your current code contains a lot of errors, from typos to SQL injection. I would question the learning source you are using, be it a book or a yourtube video or an online course. Be advised to quit it immediately. 
/r/phphelp
i'm just trying by myself
`post_date` is a function, not some string you pass in. `'date_issued' =&gt; $valdata[post_date('F d, Y')],`
thanks!
looks to me like it should be: date_format($valdata['post_date'], "F j, Y") ​
not sure if the dbconn file is being found
Both. Phpdotenv use to parse .env file
Out of curiosity I've downloaded one of their free items, holy shit I've expected bad code but this is in another (worst) level. All of this was copied form the source without modification: &amp;#x200B; So, this is not going to work in PHP 7 and other versions are deprecated or going to be soon. But who cares, i can rape your db in multiple ways. mysql_query("delete from mst_useranswer where sess_id='" . session_id() ."'") or die(mysql_error()); $rs=mysql_query("select * from mst_useranswer where sess_id='" . session_id() ."'",$cn) or die(mysql_error()); 2018 but in India templating and CSS is not cool yet. echo "&lt;tr&gt;&lt;td class=".($row[7]==4?'tans':'style8')."&gt;$row[6]"; Javascript validation like the old days. if(at.length&lt;1) { alert("Please Enter True Answer"); document.form1.anstrue.focus(); return false; } Unit testing is exactly having a php file with this. &lt;?php echo date("d/m/Y") ?&gt; Next time [u/navingohite](https://www.reddit.com/user/navingohite) I recommend you post this in r/softwaregore.
That's what i planned to do, but now read this: &gt;The answer is simple: don't use it. &gt; &gt;Be it vlucas or the Symfony one, the DotEnv components are not meant to be used in production but only dev as it causes a disk file access on every request. Instead, you should inject your environment variables via your webserver. [https://www.reddit.com/r/PHP/comments/5rmsmc/id\_like\_a\_feedback\_from\_the\_community\_on\_a\_php/dd8hnu4/](https://www.reddit.com/r/PHP/comments/5rmsmc/id_like_a_feedback_from_the_community_on_a_php/dd8hnu4/) Do you use Phpdotenv on production too?
You don't use the one 'in' the other. PHP is a back-end solution. Vue.js is a front-end solution. One does the heavy lifting, one does the display
Code [https://github.com/tvlooy/php-pledge](https://github.com/tvlooy/php-pledge), PECL [https://pecl.php.net/package/pledge](https://pecl.php.net/package/pledge), ports commit [https://github.com/openbsd/ports/commit/127f223ee3f459673eea4fe5eb98d69e2c5b7464#diff-f586cf29b44a6a11f0a52dbe371aabe4](https://github.com/openbsd/ports/commit/127f223ee3f459673eea4fe5eb98d69e2c5b7464#diff-f586cf29b44a6a11f0a52dbe371aabe4)
Yeah. I like Carbon too. It has more 'depth' to the generated images [https://twitter.com/dawn\_noreply](https://twitter.com/dawn_noreply). Kodeshot is just a flat image, but the settings are easier to modify. Decisions decisions.... &amp;#x200B;
The main reason to use environment variables instead of just putting your configuration directly in the config files is to keep sensitive information out of source control. There's no argument that if someone has access to your application server then it's pretty much game over, but there's no reason to be including your sensitive configuration in your source control system. Environment files aren't really overkill for any size project, they're like one extra step to handle so it just makes sense to use them by default.
There is nothing more painful than to wait on 3rd party tool to load code snippets in blog post with a code. Or to try to copy a code from an image. &amp;#x200B; After many years I've settled for [https://prismjs.com/](https://prismjs.com/) \- very fast, with only the languages you need and easy-to-copy.
Just curious, why would you hate for using this in blog posts?
We might need a new library to determine whether package-support is outdated, right? /s
Yes. I use it in production. I read your reference but for me it's fallen under the category of over-optimization. For my load, a disk access is more preferable than injecting environment directly into the server. Which not every programmer has the luxury to do so
Corrected title: *How to use Vue in a HTML file with a php extension.* There is literally nothing in here specific to PHP.
&gt; The main reason to use environment variables instead of just putting your configuration directly in the config files is to keep sensitive information out of source control. .gitignore on the config files makes that irrelevant as a point.
Sure. The answer is a bit involved and may involve shaving a yak to get to the point. Apologies if I over explain any of this, but I want to make sure you don't miss anything. Consider anything you already know here as something potentially useful for other people who may find this thread later. As I said before, you want your classes to all be marked as either `final` or `abstract` by default. Having an instantiable class that is not `final` should be a well-considered and intentional choice. The extensibility of any class, `abstract` or not, is a part of your published API and your API should be intentional, not accidental. Mocks are made by subclassing the mocked class and overriding the mocked methods. This becomes a problem if you start declaring classes as being final. You won't be able to mock them any more. This and the supposed hit to testability is what often scares people off from using `final` in their code. It doesn't harm your ability to test the code, but it does force a stricter adherence to writing code that's SOLID and separating out your interfaces. The way that you should approach this is to declare and depend upon an interface instead of a specific class _when it matters_ that a class should be able to be swapped out for another implementation. The natural case for this is when you want to be able to use different implementations of the dependency. You may want to approach some calculation with different strategies, for instance. Another natural case for this is at the seams between your code and some external system, so the external system can be mocked for testing or stubbed for development. As a quick word of caution, you don't want to go crazy with interfaces and litter your code with an interface for every declared class, but you do want some strategically placed around the code. Sometimes, it's OK to instantiate and use another class as a dependency for the class under test without mocking the dependency. It's a fine line between doing that and needing to mock and test calls being made. Unfortunately, that's a whole long post in itself, so I'm just going to leave it at that. Rounding back to your code and Guzzle, I made the suggestion to try to insulate your code as much as possible at that external boundary. I would have suggested that you hide the data acquisition behind an interface, so the code doesn't care whether it's fetching from an API, database, etc., but the stated purpose of your library is to ease access to an API. With that in mind, I'd instead suggest that you hide the transport layer behind an interface. This way, you could use Guzzle, cURL, or whatever. Unless I missed a PSR, there's not really a good interface for you to use there. Stepping again to less abstract, we have `ClientInterface`. You're coupled to Guzzle at this point, but can at least swap out Guzzle with a stub for development purposes. Since they didn't finalize `Client`, you don't really run into the testing issue. It's not actually terribly important that you use `ClientInterface` instead of `Client`, but the chain of reasoning as to why it's preferable contains several important details for how you write your code. That's why I had to take such a detour to give you a proper answer. Hope this helps.
Unfortunately in the prototype this is a manual entry in this big json. A lot of the packages don’t even share their roadmaps and official support properly, so this is kind of a “new industry” Potentially in the future this could sit in a remote web service. 
different thing. 
&gt; Take a look at the Grafana website and let me know your honest thoughts once comparing the 2, I'd be interested to see what you think after comparing features/plugins etc. I have looked at it before, but I've never tried to set it up myself. All I need is something to email/sms me when one of my sites goes down, so I can investigate. OhDear does that well enough for me. &gt; The problem for me with this is you're trusting your data with a closed sourced corporation and that for me far outweighs any gains in terms of convenience. I know the guys who set it up and I would trust them with the SSH keys to my servers. Not that they ask for that. They don't really have access to anything on any of the servers they monitor for me. The only data I can see them having is data publicly accessible to anyone on the internet. 
This kind of inspires me to write a library that can transform the nonce and cipher of an encrypted message into something like: &amp;#x200B;
Yeah. As I mentioned in another reply, this should be temporary and could kind of start a discussion about the format?
i see, i was thinking about running the set-up script that will insert API credentials from env to DB (that's were we store API details now), what do you think about this idea?
[removed]
How are people meant to copy and paste the example code to test it out?
Github strips blank lines on mobile. The code isn't actually formatted like that :D
OP should also look at https://phinx.org/. There is also migration tools for Laravel and Doctrine.
here is the resume [https://imgur.com/WdVwrWU](https://imgur.com/WdVwrWU)
I built my own migration scripts that converts application models to database objects, the goal was to have everything done after running one command so now I just run **make migration\_db\_commit** and the script syncs schema and data. Nowadays most frameworks provide database migration functionality built in or have external libraries so there's no need to reinvent the wheel unless you want to know what is under the hood. Hope this helps.
Agreed. I wondered if there more any other reason \[than I came up with\]([https://www.reddit.com/r/PHP/comments/9ypmro/new\_tool\_for\_developers\_and\_bloggers\_kodeshot/ea3wu2v](https://www.reddit.com/r/PHP/comments/9ypmro/new_tool_for_developers_and_bloggers_kodeshot/ea3wu2v))
thanks will give this a shot, thanks again. 
`while($resume&lt;$appealing_enough){` `$resume + $appeal;` `}`
Maybe also put your Github profile at the top of your resume, close to your name adress mail information, I feel it gives more incentive to recruiter to go check it
First, make sure everything fits on one page. It looks like you have a lot more info here than would fit on one page. If you must use two pages, put the side projects on page 2. As someone else suggested, I would add descriptions to the side projects. Make sure you fix all your typos - I'm staring at "wordpres,s" right now and I'd toss something like that into the bin if I were sorting through resumes. Get rid of the comma and capitalize the brand name properly - you have many instances of brand names not properly capitalized. Your grammar and spelling should be impeccable on a resume. 
So kinda like SELinux except policies can be defined within the application rather than an external MAC. WCGW?
Excellent article, I would definitely use it in unit tests.
I'm a UX researcher for a Drupal-related initiative and I’m looking for Drupalists to participate in a new survey. It offers a $100 Amazon gift card to five participants chosen at random at survey’s end. Hope you can help! [https://www.surveymonkey.com/r/ZPVVS3S](https://www.surveymonkey.com/r/ZPVVS3S)
use phinx. then you can do `phinx migrate -e staging` in your deployment script to populate data and optionally fixtures
more on this : https://twitter.com/fabpot/status/1064946698089365505?s=21
Phinx is a good recommendation, also if you like Laravel you can use https://github.com/michaeldyrynda/nomad The main thing to think about is database scheme VS database content. Database schema there’s loads of tools like Phinx and Laravel Nomad which you can look at which just run on the CLI However... Syncing database content is always shit and there’s no perfect answer. That’s why we don’t try solve it perfectly. If we need a live database we just take a sqldump. Import it locally then run forget db to remove any confidential data https://github.com/OwenMelbz/forget-db Then depending on what’s happening, we either create a “seeder” which basically runs insert or update statements on the data when putting something live. But normally we just don’t version control database content - embrace the fact it’s hard and just make life easier for yourself.
what is opinionated code?
Ohhh I see! Thank you for such a detailed answer!
Not sure the title makes sense. TL;DR: Based on the PR, Symfony is pulling out of the FIG and Fabpot gave some reasons on [Twitter](https://twitter.com/fabpot/status/1064946698089365505). It's not really drama. ¯\_(ツ)_/¯ 
It means to do something in a very specific way. Opinionated frameworks require you to do things the way \*they\* want you to do them and leave little room for flexibility. As long as you meet their criteria, they're typically rather powerful and performant. However, as soon as you try to step out of their rigid requirements they lay on quite a lot of pain.
Something that jumped out at me in the introduction was your listing of specific technologies - makes me think you might be a one-trick pony. I know we're in /r/php and you said this was a PHP resume, but I'd suggest talking more about the types of products you like to make and the type of problems you like to solve, and save the tech listing for later in the resume. Is your passion the LAMP stack, or do you like designing and delivering full stack web applications that are efficient and enjoyable to use?
you need write permissions for that, unveil of plain filesystem permissions can take those away. You are comparing with SELinux which is not available on OpenBSD. This new extension is a powerful tool you can use to further secure your applications for PHP users that want to use OpenBSD
Am I the only one who thinks it's a little ironic that he's being opinionated about other frameworks being opinionated?
phpBB has all these useful extensions and add-ons. it /is/ very 1992, though. What free discussion board has the same related feature set and is a bit more modern in design and security? I use the: * Like post feature * Mark question as answered * tagging system (folksonomy) * polls * code syntax highlighting * emoji I've tried discord and slack and they just don't have a message coherence that a threaded discussion has. 
Fabot appreciates PSR-0/1/2/4/11, but disagrees with PSR-7 (HTTP) and PSR-14 (Event Dispatcher). Just because the PSR-7 and PSR-14 recommendations are not "compatible" with the Symfony "HttpFoundation Component" and the Symfony events, doesn't mean that the whole PHP-FIG has nothing to do with interop anymore.
Maybe Discourse: [https://www.discourse.org/](https://www.discourse.org/) ? I see lots of companies use it lately.
This, here. You can't stand by a standards group but not adhere to its standard. Personally, I see even PSR-4 (which most people say is straightforward and useful) as more of an opinionated standard than an interop standard. An interop standard tells you how to work with other people's standards. An opinionated standard tells you how to work within other people's standards. For autoloading, working with other people's standards means exposing a method where others can register their autoloaders (or all just agreeing to use the built-in PHP spl\_autoload\_register mechanism; but that opens up issues, i.e., if your framework uses \_\_autoload, then you don't want third party code to destroy it, etc.). Working in an opinionated standard means that you won't work with people unless they organize their code's directory structure to match the class namespaces one-to-one, after the vendor specific part of your namespace. That's not to say that I don't use PSR-4-style organization in my own framework... but that's to help myself stay organized, and keep my autoloader simple. Not so that I can work with others. I'd be more than happy to provide a standardized method for loading other people's autoloaders, whether they map their namespaces to directories or not.
Useless can't copy paste. Downvoted.
That's a sad day for Symfony, a framework I have used for all work and private projects for the last 5 years. &amp;#x200B; If symfony migrated to Http Messages / PSR-7, it would make a lot of stuff easier to do (short convinient middleware in \`index.php\` for example), and integrate with Road Runner and similar projects. &amp;#x200B; Also to implement the Event dispatcher would make it easier for library developers to use Symfony's event dispatcher etc... &amp;#x200B; &amp;#x200B; I'm extremely dissapointed. I hoped Symfony would stay on top of these things, but I'm afraid this is the start of a downhill turn.... I hope I'm wrong! &amp;#x200B; \*For the record, Symfony is a fantasic framework that I love working with, and recommend everyone to learn, the container with autowiring and autoconfiguration or the \`@Route\` annotations makes it effortless to make web-apps!\*
&gt; PSR-7 had nothing to do with interop; it ended up as a spec for the foundation of a new opinionated framework [(from twitter)](https://twitter.com/fabpot/status/1064946908605685760) I get that PSR-7 isn't has its detractors and valid reasons for not liking it, but I don't really understand this statement. I feel like it's only "opinionated" in being immutable, and I don't see how that could possibly be "the foundation of a framework"
I could see this being used when viewing lots of similar data. I deal with some pretty large data sets, and sometimes the Mark 1 eyeball works better at spotting things. And this would help.
Oh right my bad, I was only thinking about peachpie, not the linked project.
But he runs php server! 
Stop putting words into his mouth. That isn't the reason FIG is bad. FIG is bad because they ejected its creator, Paul, and replaced him with an SJW.
&gt;If symfony migrated to Http Messages / PSR-7 Well it won't, precisely because it would break way too many things which would affect Symfony as well as a number of downstream ecosystems, e.g. Laravel, Drupal and a lot more which is not acceptable. &gt;it would make a lot of stuff easier to do Well you can use the HttpFoundation PSR-7 bridge for it it works fine. The above is just to say this is not gonna be changed in the core, if you want PSR-7 you will have to do with the bridge. &gt;I hoped Symfony would stay on top of these things I don't think it's Symfony's call really :)
Have you got Internet access? If so, try going to [Google.com](https://www.google.com/) and doing a search.
&gt;It allows me to more easily build my request handlers and use middleware from other developers to do common things Just for the sake of clarity: Symfony doesn't forbid you to do it either. It just has an existing structure for it and if you want to re-use PSR-7 related libraries, you will have to use the PSR-7 bridge. It's just that it will never land in the core. &gt;it makes more sense to cobble together some battle tested components that work together than use a full fledged framework. Symfony default distribution is also no longer a full fledged framework, although I agree if you only have a tiny app with a PSR-7/15 layer it doesn't make sense to use Symfony which will always come with HttpFoundation. That said if you are dealing with JSON APIs, you also are likely to have to deal with a number of problems like making the API auto-discoverable, standardize &amp; co. For which I recommend you to take a look at https://api-platform.com. It might not feel as light as slamming a `json_encode($data)`, but when it comes to provide a standardize API with a good DX, it's one of a kind. 
&gt; it's jut a new library/framework I can see the argument that it's just a library, but there's a big difference between a library and a framework, and PSR-7 definitely isn't the latter and there's a big difference between the former and the latter
Because of immutability it is very hard to make HttpFoundation embracing PSR-7 without a huge backward compatibility break impacting thousands of existing applications and bundles. [Source](https://dunglas.fr/2015/06/using-psr-7-in-symfony/)
&gt; Just because the PSR-7 and PSR-14 recommendations are not "compatible" with the Symfony "HttpFoundation Component" and Symfony events, doesn't mean that the whole PHP-FIG has nothing to do with interop anymore. He says he disagrees with PSR-7 and PSR-14, but to imply that it is only because it's not symfony compatible is definitly disingenuous of you. The man even worked on a [symfony bridge](https://github.com/symfony/psr-http-message-bridge). --- For references, Fabpot only lines about psr-7 and psr-14 in the twitter feed : &gt; PSR-7 had nothing to do with interop; it ended up as a spec for the foundation of a new opinionated framework &gt; And now, PSR-14 (event dispatcher) might be taking the same path
Hi, I'm following this book that has the following code: $data = $this-&gt;pdo-&gt;prepare("SELECT \* FROM Customer where firstname= ? &amp;&amp; password = ?"); $data-&gt;bindParam(1,$firstname); $data-&gt;bindParam(2,$password); $data-&gt;execute(); $data-&gt;setFetchMode(PDO::FETCH\_CLASS|PDO::FETCH\_PROPS\_LATE, "Klant"); $result = $data-&gt;fetch();
I also like to work with symfony and I use psr7 to communicate backend with other backend apis. And I really like psr7 and new client interface for such stuff! Personally I would like to switch from http foundation but having psr7 is enough to move forward. No need to make such drama. It is just recomendation... 
Like others have mentioned - spelling and grammar is number 1. Your skills don’t seem to match your experience. You mention Laravel a few times under personal projects but nothing mentioned in the skills section. Also why bother putting python if not expected that an employer wants that. Little elements like that which don’t match can sow seeds of doubt that this person isn’t good with details. In general think about what the employer wants. When recruiting for developers, employers want attention to detail and someone that love a technical challenge plus some more general things like dedication and enthusiasm for learning and the industry. Your professional experience doesn’t come across great. You claim to be a full stack dev (my opinion is that a true full stack dev doesn’t really exist, but that’s another story!) but then the pro experience is front end dev with a few other bits. Also the details are low for your main 3 year professional job experience. Personally I like to know what kind of team someone worked in. A team of 20 devs or a team of 2? Any involvement in project management or system planning - to what extent? Do you use tools like Jira for task management? Did you leave for good reasons, if so why not add them? If your other experience is more relevant and more likely to land you a job then put it at the top. Is the code on your examples really good - only put your best stuff out there. If the community contributions aren’t amazing with great grammar etc then remove them. Good luck!
Has anyone read PSR-7? It looks a lot like a lib API spec to me. 2 different PSR-7 libs are basically going to be the same. I went into this thinking Fabian was being ridiculous, but after reviewing I have to completely agree with him here.
&gt; Zend Framework itself offers a parallel microframework targeting PSR-7 with Expressive. That's the only thing that comes to mind. Maybe he meant Expressive?
Fizzle out? We had 3 whole new PSR this year alone! 
I think phpBB has actually driven a lot of innovation in the PHP community at large. Composer was born out of a collaboration between Symfony and phpBB. It's two lead devs are naderman, the former lead dev of phpBB, and seldaek, from Symfony. Michael Cullum, another phpBB dev, was also the PHP-FIG president for a while. If you need more convincing check out this presentation: https://www.youtube.com/watch?v=J4F16PLFUoc phpBB does still have old legacy code but they have been making steady inroads and innovating a lot in the process.
Totally agree
PHP-FIG explicitly says that PSR implementation is not required: https://www.php-fig.org/bylaws/mission-and-structure/#member-projects &gt; Member Projects are not required to implement any particular PSR, although are expected to give relevant PSRs due consideration. 
owenmelbz, great reply! Couple more question if you don't mind :) "If we need a live database we just take a sqldump" - you mean SSH in server and do mysqldump? "normally we just don’t version control database content" - we don't do that either, but when needed would like to have possibility to pull and generate dev DB from latest live DB in "1 click"/1 command. (we already have script for stripping live DB from sales/customer data), i was just wandering what's the best way to pull it(cause now I manually log in to do it :)), where to store dev DBs?, etc (now it's store in dropbox shared folder). Also how do you set values in DB which dependent on environment. Let's say we have stripe API credentials in DB. When we have stripped version of live DB it still have live API cridentials, so now we manually change them which is obviously not right, should we just write the script that updates DB with test credentials? Sorry if my questions are to basic/newbie. 
bjornsnoen, thanks for your reply. Already using and are big fans of docker. How do you set values in DB which dependent on environment. Let's say we have stripe API credentials in DB. When we have stripped version of live DB it still have live API cridentials, so now we manually change them which is obviously not right, should we just write the script that updates DB with test credentials? 
&gt; it has taken a lot of discussion out of the office about which lib to use, as long as it follows some PSR. I would like to recommend the [Beyond PEP 8](https://www.youtube.com/watch?v=wf-BqAjZb8M) talk by one of the core developers of Python about what happens when we blindly follow rules, especially ones about mundane or basic things, but can apply to larger issues like the Http Messages PSR. One on the one hand the average person probably should just follow PSR 1-4 and move on, maybe even PSR 7, but blindly following the rules isn't how we end up with things like HTTP2, ES6, and so forth, so someone has to take a risk on proposing new things, and others have to put in the effort to validate or refute it. As long as that process works, and isn't derailed by personal attacks, marginalization, or people getting defensive and refusing to listen if their idea is shot down, then all is well. But if not, if we villianize people for disagreeing with a PSR, then ... PEP 8.
So the problem is allowing user input into the seemingly benign `file_exists`. That kinda makes me wonder... what's the recommended solution if you have to do that? Maybe an exception ought to be thrown if the `:` character is included?
It is perhaps a bit unfortunate that FETCH_CLASS does not use the constructor. Instead it directly maps database columns with your class properties. So you might have: class Customer { private $firstname; private $password; And you would end up with a Customer entity with those properties set for you. No constructor involved. A bit off topic but if you know the password before you query then the password is not secure. Might want to review how to deal with passwords.
pernicat, thank you for your reply. Could you explain what is the advantage of phinx over "pulling and stripping DB" ? 
lune-lute-skimp, thank you for your reply. Could you explain what is the advantage of phinx over "pulling and stripping DB" ?
We use Magento 1.9 so it has ORM and "update scripts", so we don't really need Phinx?
&gt; standard interface But not standard implementation of those interfaces.
Thanks mate. I appreciate that. I agree with you for the second point. But I don't quite agree with the first point. You could create a template for form, alert, or maybe even some input groups as a components or widget. So, you can reuse it anywhere. You could create a page template with whatever layout that you want and have some variables for those components or widgets, which by the way, is the way I am doing. Like: ``` &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; ... &lt;/head&gt; &lt;body&gt; [Some page layout with bunch of variables, hence it's template...] &lt;/body&gt; &lt;/html&gt; ``` Say, if you have only one single template for login page and you want login form to be on both index and login page (you might or might not have different message in the form), do you have to write the login form in both index and login page? In my case, I would call login form as a widget. I would have template for index page and template for login page. Then, I would use that login form widget for both index page and login page. So, in some cases, you will have to use some forms in multiple pages. If you wanna add something to the form or redesign the form, you probably don't wanna go through all templates that are using that form right. So, yea, here is an example: ``` $indexPage = new HTMLTemplateEngine(HTMLTemplateEngine::page("index")); // Login form $loginForm = new HTMLTemplateEngine(HTMLTemplateEngine::widget("loginForm")); $loginForm-&gt;token = getToken(); // Some token maybe $loginForm-&gt;msg = "Some message maybe"; // Maybe there is loginForm variable in index page somewhere $indexPage-&gt;loginForm = $loginForm; ... Do more for $indexPage // Then render $indexPage-&gt;render(); ``` It is as simple as that. So, change whatever you want in login form, both index and login page will be effected. So, I believe this will enhance the reusability. What do you think?
It's definitely about the content and how you come across, no disagreement there. One page is more of a rule of thumb, not a hard and fast rule. You should try to keep it at a page, but if it has to go to two so-be-it. More than 2 is pushing it though in my opinion. The interview is for the details that I feel any resume beyond 2 pages would encompass. And I agree about the percentages, that shit drives me nuts. I found a way around it for myself while keeping the aesthetic, but it won't work for everybody. What I do is list the skills and the chart highlights the years of experience with that skill. So I have what looks like a percentage indicator, but is a years of experience indicator. [Here's a screenshot](https://i.imgur.com/8oVOCf4.png) of what it looks like on my resume. Obviously this only works if you have a bunch of years in the field, but it seems like a great solution in my case.
Ah I see. All the properties have the identical names as the ones in the database and they're all set to public. I've tried everything in the documentation on the PHP site as well. No other clue what the issue might be? It also seems to work just fine if I keep the constructor completely empty.. But I need to be able to create new objects with it. Must be a shitty book. &amp;#x200B; But no, I would hash the shit out of that password and let that get compared. This is just how the book explains it 'the easy way'. 
Did you read the previous comments ?
Oh no, sorry I wasn't clear. I didn't mean that I think there are things wrong with ES6 or HTTP2. I meant that someone had to do something other than follow dogma ("HTTP/1.1 is good enough", "Why would I need arrow functions") in order to push the boundaries and make things better. That was somewhat of only tangentially related for me to talk about both of those things in the same comparison, sorry. HTTP2 is great news for CDNs for the most part. If you use AWS's CloudFront then you may already be using it without you having to do anything, and it gives a major speed boost for pages with multiple assets. It has some potential use for tree splitting in JavaScript but that's not quite as large of a gain.
Beacause these interfaces pretty much resemble data structure (of course, in some places implementation is outright leaked in description - like parsed body = `$_POST` or resolving SAPI vs non-SAPI in uploaded file). Not a pure abstraction, but a good standard (it should be standard library btw). Besides, there are worse/less usable PSR's than 7. Caching and http client should be hidden behind abstraction anyway, and http factories are redundant.
Shoot the invite expired. Resend please.
Which SJW did we replace him with? All of the secretary and Core committee members are elected by FIG projects. And FIG is far from dead - we just reorganized so the bulk of individual work is done as part of working groups. We’ve approved several new PSRs this year alone. 
The FETCH_PROPS_LATE will call the constructor before the properties are set but it's not going to pass any arguments. Hence your original error message. As far as making all your properties public, better watch out for the OOP police. They will have you locked up for encapsulation violations faster than you can say read only. Many many developers will be affronted if you even dare to suggest that they might be wasting their time generating endless getter/setters. I actually do use public read only properties for most of my entities. But the number of down votes this comment will receive will demonstrate just how unpopular this approach is.
&gt; Unhandled Promise Rejection: SecurityError: The operation is insecure. 
Can't you just build the inventory system into wordpress as plugin? I think WP with plugin that has good API will be allow the bussiness to growth in future.
Couldn't agree more with this comment! Learning languages is not the main issue.
Sounds like a good start; combine it with stream_wrapper_unregister('phar') if you don't ever need to support phars.
Lol.. actually, JPG is no longer supported anymore. I probably forgot to remove that line from documentation. 
I don't disagree with Fabien. He probably wanted to break PSR compat in Symfony (maybe rightfully so) and was getting flak for it.
Except that e.g. Slim has a response implementation that's different slightly enough to be frustrating.
Everyone? That's a bit of a stretch. But yes, they did get all the bad apples, thankfully. The Craft community's reaction was toxic and snarky, as usual, a culture that has seeped down from the top. They just can't move on. It's weird how much they still talk about ExpressionEngine. Like a moth to a flame, some insecure Craft user has to chime in at every mention of ExpressionEngine like this.
Kodeshot uses Ace ([https://github.com/ajaxorg/ace](https://github.com/ajaxorg/ace) \- Cloud 9 Editor - [https://ace.c9.io](https://ace.c9.io/) ).
That's not the point. See previous comments.
Thanks for sharing your experience! Can you tell me the reason why you don't want to for a Bank or Insurance company or huge corporation ?
Okay!
Slim maintainer here, we’re getting close to Slim 4 alpha release. PSR-7 implementation has been completely decoupled from Slim 4. Slim-Http is now a decorator repo which adds funtionality to any of the existing PSR-7 implementations. For now, we are not actively developing a PSR7 implementation, we might get our old implementation up to speed once Slim 4 releases. 
There’s also discrepancies on how headers are parsed. Most implementations don’t follow the RFCs to a T. Nyholm/Psr7 is probably the closest to RFC implementation out there at the moment. 
Primarily because you have db versioning. Each change to the schemas is encapsulated in a new migration. E.g. 20181120.php contains "add new column to products table" or something. So you can version your schemas instead of all or nothing In the end try both. If its a small project a simple wrap and deploy might be all you need
Just pure AWESOMENESS! We use Redis for all of our setups, runs all of our high performance Apache/NGINX web servers and provides our clients with amazing performance for their WordPress, Drupal, Joomla, etc. apps. Looking forward to seeing what performance tweaks we may be able to make with the new release, thanks for the heads up!
Pixel and Tonic's are the creators of Craft CMS and were one of the biggest plugin developers in the EE2 ecosystem, the plugins were there to enhance the biggest downfalls of the CMS, before Matrix, Grids, Structure all those stuff existed, plugins created them first. EE2 adopted those features that plugins created too little too late CraftCMS already took the hardcore EE developers with them.
Ok? Again, not sure why the history lesson, it has nothing to do with my points, but thanks. I've been using EE for years and am aware of the history. Though it wasn't "too little too late," and they didn't take the "hardcore" EE developers, EE has been doing fine and has plenty of "hardcore" developers still on it.
Sounds good, I bet the Open Source Switch it's because it's so popular and making money. It's like Drupal 8 only the people that don't want to look up are still on it and trying to justify them still using it. For the Record I am not a current CraftCMS user I use Laravel, but I maintain the Craft plugins because I believe in what their product provides.
Yeah with some digging I found out there are existing plugins for inventory system. Will dig more into it. Thanks man!
I might get burned at the stake for this but wouldn't creating the instance of $api be a good use case for a singleton? That way you can do Api::init($guzzle, $key) and it bootstraps the library for you? 
Does anyone use Exakat (https://www.exakat.io/)? I find it weird that it's pretty much unknown after 3 years.
The reason is for people running these ancient versions to be able to execute this as well and find out that it is in fact an ancient version. There are plenty of 5.x installations out there. 
I don't think people who are still on those versions (or at least an overwhelming majority of them) care about outdated packages at all. Most of these projects will be various sites built by CMSs which don't utilize Composer anyway. Besides that, pretty much nobody supports EOL versions. If a newer version or a replacement of an outdated package requires a higher PHP version, they're screwed anyway. I think the idea is good and somewhat similar to https://github.com/Roave/SecurityAdvisories which I use daily, but IMO you're targeting the wrong audience by supporting these old versions.
lol i am broke right now oh dear is cheaper but i will have a look at it too thanks buddy
1. It's ok to have a common snippet but it's your template, not your controller code should be calling it. 2. This is a retroactive excuse anyway, in your examples you don't intend to reuse the snippets. You created them solely because there is no other way to use your "simple" templater. This is a common pitfall, I'v seen it many times in the last 20 years - being unable to admit the *presentation logic* existence and in pursue to remove any logic from the template one, one is just *keeping* it (as there is no way to avoid the presentation logic) but in a terribly gibberish form, spread between a template and a controller, making a tightly coupled mess.
Great but i wanted a free service because i cannot afford to pay $18 (ten websites) a month. Thank you
Thank you all for your replies. Ya'al helped me solve my problem.
Maybe it's a bit too strong of a word, but I expected a decision based on some arguments and not just saying "it's opinionated", when Symfony itself can be called an opinionated framework.
Genuinely asking. My progressional career until now has been limited to mostly PHP, and I can't help but wonder if other communities also faced similar hurdles, how the approached and solved their problems.
I'll take a look at the talk, thanks! I don't mean blindly following rules. I mean it helps a lot to jump over certain decisions and focus on core business problems. Almost in every project I worked on I saw a custom implementation of routing, some container magic, other shit that was not supposed to be written in the first place. One being it added only technical debt, two - they were no where of the same quality level as some of ready made libraries are. PSRs helps a bit to just to use whatever implementation and forget about it. I do agree it limits experiments and emergence of new bright solutions to a certain extent, but not every developer has to write a container implementation, do they?
What are the ones you already know? Are you familiar with Codewars?
Stackoverflow
Since you mention Magento check out [https://github.com/netz98/n98-magerun/wiki/Commands#dump-database](https://github.com/netz98/n98-magerun/wiki/Commands#dump-database) that has a database dump command that you can pass extra parameters to so you can strip certain tables. It also uses Magento's config so a bit easier to use :)
[removed]
&gt;I hope they provide you with unlimited drinks each day after work lol We get unlimited drinks in the office but nothing after :( I originally started in Python and currently mostly doing GO so I never really worked with a large procedural PHP project I was always spoilt with OO. Not always great OO but still easy to follow than a big ball of mud. So finding it difficult to adapt and hating life right now lol
Actually project I work on right now, required proxy functionality, and using symfony bridge to PSR-7 was awesome. Symfony brags about that library on their official blog. Hence, I have no idea what You are referring to. Or maybe you suggest that interoperable solutions is the one that can work with X incompatible interfaces from Y frameworks, without any need for adjusting existing middleware? In that case, please add /sarcasm
https://adventofcode.com/ is starting soon. 
&gt; but aren't standards always opinionated? The original point of the FIG was to take the existing dominant implementations of some concept and find a way to produce a standard that found common ground and made it as painless as possible for the existing implementations to become compliant with it. Tabs vs spaces is a good example of this, as one of the main arguments for picking it was simply that a supermajority of projects who were members of FIG used spaces over tabs, thus that was the appropriate commonality to standardise on. PSR-7 takes the reverse approach of defining an entirely new way of doing things that isn't interopable with most existing implementations of that concept and would require breaking changes from many of the major players if they were to follow it. That doesn't mean PSR-7 is any way bad, or not a good goal to aim for, just that it isn't being created in the original spirtit of the FIG, which was to codify the commonalities between projects where possible and cause the least amount of disruption while producing worthwhile standards.
That's why I put question mark at the end. 
In Python, at least in the web space, library wrappers/adapters are made in order for separate libs/frameworks to _play nicely_ with each other. The rest are mostly standardized with PEPs.
/r/dayliprogrammer has challenges for everybody :D
Numeric results are easy to verify.
My website is [http://lost-chall.org](http://lost-chall.org), Currently I'm in the middle of porting all to laravel. But that will take some (months) more. But until then the old site with the challenges should work fine. It's not purely coding though. Also logic, physics etc.
&gt;You can't stand by a standards group but not adhere to its standard. Not true. As I already said in [an other reply in this thread](https://www.reddit.com/r/PHP/comments/9yvenu/another_fig_drama/ea4rmfv): &gt;PHP-FIG explicitly says that PSR implementation is not required: [https://www.php-fig.org/bylaws/mission-and-structure/#member-projects](https://www.php-fig.org/bylaws/mission-and-structure/#member-projects) &gt; &gt; &gt; Member Projects are not required to implement any particular PSR, although are expected to give relevant PSRs due consideration.
They aren't all numeric, but they all remind me of maths textbook exercises, that is mostly because they are for learning algorithms and math, not programming. 
Read the rest of the discussion, I never said it was a black or white rule, it is a general rule of thumb. Also, as someone who has had a 10+ year technical career, I can list all of my skills, education, experience (with full descriptions of the jobs), and contact information on a single page. I'm also a graphic designer so I have the skill to make it all fit on one page appropriately. IMO if your resume is longer than one page then you are probably not organizing the information efficiently. As I've stated elsewhere, two pages is not the end of the world.
PSR-6 comes to mind: [https://www.reddit.com/r/PHP/comments/3u6ahb/psr6\_is\_in\_the\_voting\_phase/](https://www.reddit.com/r/PHP/comments/3u6ahb/psr6_is_in_the_voting_phase/)
&gt;CMD php artisan serve --host=0.0.0.0 --port=8080 [Artisan](https://laravel.com/docs/5.7/artisan) is Laravel's command framework. It seems like this dockerfile was created specifically for local development for Laravel - if it was recommended as anything else, whoever created it had no idea what they were doing.
Do I understand you correct that PHP is the exception with multiple major web frameworks?
&gt; I feel like it's only "opinionated" in being immutable This is sort of like saying that guns don't kill, it's those pesky bullets that cause all the problems. Making Request/Response objects immutable does in fact dictate how your frameworks needs to process these rather important components. Using PSR-7 effectively would require a major overhaul of most of the popular frameworks. The is also some history involved. When PSR-7 was being developed, Symfony 2 had been released for quite some time and was extremely popular. Not just the framework. But it's more or less independent Request/Response objects and their processing libraries. Other frameworks had their own objects but they were all mutable as well. Only a small number of very niche frameworks had embraced the notion of immutability. You can read up on this on github as well as the fig mailing list but the PSR-7 author was focused on "improving" the state of the art and not on being compatible with existing frameworks. Fast forward to present times. This niche frameworks are still pretty much niche. The promise of being able to plug in PSR-7 compatible components into multiple frameworks has not been realized. And, as Fabpot has indicated, the EventDispatcher interface appears to be heading down the same path to la la land.
PHP sure is an exception if you would count the amount of frameworks. Which is probably because of it's long history and being used by \_alot\_ of companies/websites. Not to speak about the shifts in programming paradigms.
Have you tried https://exercism.io/?
You know of any good tutorials that *do* have that kind of info?
No, that's why I was excited to see something new or nifty I hadn't seen before.
Can you tell us more? I've never had any error message.
It didn’t have much more but I was running safari in private mode.
I tryied PHP Stan made by Rasmus and its friends, works nice. I did not knew the existance of such tools before, I should said it avoided me dumb mistakes on some of my libraries!
&gt; /r/dailyprogrammer FTFY :D
This book has been priceless in it's day. It's a pity that David and Adam didn't publish a PHP7 update, which makes it severely outdated. Besides, your shitty attempt to make a business out of this sub will be removed. 
how many ways can you implement a `$_SERVER` abstraction interface?. Oddly, the the interface doesn't specify how to instantiate the object, so implementations vary quite a bit in that regard
Did any of you PHP heads build different apps with different frameworks yet? My team and I are currently working with Zend Framework 2, looking to switch to Zend Framework 3 or Zend Expressive (or even both in combination). I'm asking for your opinion on ZF2/3, Zend Expressive, Laravel &amp; Symfony. (Or if you know of any other nice framework) I myself checked out Codeigniter &amp; CakePHP which both wasn't for me. There ofc are many many articles that compare all popular PHP frameworks side by side but I'm many times missing opinions of devs that have successfully build apps with multiple of them. Would be nice to know what kind of apps you guys worked on as well!
PHPStorm all day! This IDE is so good that i cba trying anything else. For frontend stuff I recently switched to VSCode and am very satisfied even tho I would not even try to start coding my PHP Projects with it.
&gt; what's the recommended solution if you have to do that? Don't. Or more concise, don't' let the user have full control over the whole path. If the code was similar to: if (!file_exists('/tmp/'. $path)) { Or similar, then the attack wouldn't work, as you need to specify the phar:// URI at the start. You could also go down the route of denying any input with : in it, or checking to ensure it doesn't start with "phar", but if not done right it might be a false sense of security.
I idd never heard about this :o I mean, I never had trouble using PHPStan as well but I'll def check out exakat, thanks!
Not really in java for example we have javaEE now Jakarta. Other languages such as .net don't have this huge amount of different implementations so most of the time there is only one we framework to choose from. Python has PEP as someone else pointed out. 
The first challenge is to find the subreddit xD Thanks :)
Code golf: https://codegolf.stackexchange.com/
A `$_SERVER` abstraction interface ? At least two, `httpfoundation` and `psr-7`. The whole mutable vs immutable is the "great divide", whichever side of the argument you are on. And what breaks interop, at least in usage metrics.
Something to consider is communicating the intent of the structure. We can not tell if an array is associative or not, but a map or a list is clear about that. Subtle things like encoding an empty array as JSON - [] or {}? So wrapping around an array separating map/list has some advantages at the cost of performance, but it's not fair to say no advantage at all. 
Nothing about this library is a waste of time. Every attempt won't result in a million downloads and a better PHP, but it is always worth learning and listening. 
There are no tests. This is a good idea though, it could be integrated into a CI or something like that.
A good IDE helps. But I have come to terms with knowing that i just need to look things up I have used hundreds of times before. array_map vs array_filter is super annoying. Would sure be nice if they made those use the same parameter order and began throwing deprecated warnings while doing a type check under the hood in the interim.
\&gt; How do I learn all these rules? You don't. Argument order is a shit-show and we've known it for years, but to change it without a zomgcollosal backwards compatibility break would require either official namespaced functions or attaching them to the objects themselves a-la "string".pos(...), neither of which looks likely to be officially implemented anytime soon (although the latter has been demoed). &amp;#x200B; 99% of the time I just rely on the IDE to tell me which order is which. &amp;#x200B; Or, more accurately, 99% of the time I type in what I expect it to be, think "hmm" ... right click on the function and go to the definition, realise I was wrong, and change it around. Think of it like a USB drive, don't expect to get it right first time.
My IDE is vim. You know what, maybe I just need a better IDE. Is there an IDE that lets me connect to a remote git repository and save to remote easily?
Yeah, phpstorm works good for both
Hm, I'll trial it and see how it is. My company's pretty ghetto and wouldn't shell out for it, I don't think. Not unless I made an extremely strong argument. Probably something relating wasted time to my mediocre salary, and showing that, financially, we save more with the software than by not using it and wasting my FUCKING TIME.
Hm, I'll trial it and see how it is. My company's pretty ghetto and wouldn't shell out for it, I don't think. Not unless I made an extremely strong argument. Probably something relating wasted time to my mediocre salary, and showing that, financially, we save more with the software than by not using it and wasting my FUCKING TIME. Thank you for the recommendation!
There are vim plugins that make this less painful, but most people around these parts will suggest PHPStorm (vim suits my workflow better, but to each their own). I just keep a browser open to hit the docs when necessary. 
Echoing what other people have said, a good IDE helps so much. I know you use Vim but maybe consider trying out PhpStorm or Visual Studio Code. I currently use Code, and my productivity has gone up a lot with the tools I've incorporated - I've been writing PHP for about a decade but just recently in the past few years decided to use tools that give me hints about function arg ordering and whatnot. (In my defense, I was a child when I started and I didn't know about these tools at that age.)
vim? That's no way to live your life man. Switch to VS Code
Yeah, I think you're right. I'm going to trial PHPstorm and trial VS code and see which suits my needs. Thanks!
In phpstorm you can event add vim plugin so you have partial vim in it
Is it not fair to say that Spring and Play are fairly popular? 
Because PHP is a mess. In any other language you would have always same order (like array always first, or array pleats last). No way to remember it when it's different for every function.
So instead of small js file, I need to integrate an IDE to my blog?
Well, I have work with PHP all my professional career (spoiler alert: is not that long) and I can tell it have some flaws as you mentioned but most of the things are pretty straightforward. There are a lot of tools that can help you with the *intellisense* in PHP, if you like IDEs you can use PhpStorm, if you're like me and prefer text editors + some good extensions and snippets then you can use Visual Studio Code, [here](https://laracasts.com/series/visual-studio-code-for-php-developers) is a Laracasts series about setting up VS Code for PHP developers, I hope that helps you.
yep, advent of code is completely language agnostic and the challenges are super fun and, well, challenging.
 &gt;I can't just say "For any search-type functions, the inputs go $needle, $haystack'. I can't just memorize that one rule and be good. Easy: **strings - haystack, needle** **arrays - needle, haystack** Proof: ``` $ curl -sL http://doc.php.net/downloads/json/php_manual_en.json | jq -r ' .[] | .prototype' | grep haystack int iconv_strpos(string $haystack, string $needle [, int $offset = '' [, string $charset = ini_get("iconv.internal_encoding")]]) int iconv_strrpos(string $haystack, string $needle [, string $charset = ini_get("iconv.internal_encoding")]) string grapheme_extract(string $haystack, int $size [, int $extract_type = '' [, int $start = '' [, int $next = '']]]) int grapheme_stripos(string $haystack, string $needle [, int $offset = '']) string grapheme_stristr(string $haystack, string $needle [, bool $before_needle = '']) int grapheme_strpos(string $haystack, string $needle [, int $offset = '']) int grapheme_strripos(string $haystack, string $needle [, int $offset = '']) int grapheme_strrpos(string $haystack, string $needle [, int $offset = '']) string grapheme_strstr(string $haystack, string $needle [, bool $before_needle = '']) int mb_stripos(string $haystack, string $needle [, int $offset = '' [, string $encoding = mb_internal_encoding()]]) string mb_stristr(string $haystack, string $needle [, bool $before_needle = '' [, string $encoding = mb_internal_encoding()]]) string mb_strpos(string $haystack, string $needle [, int $offset = '' [, string $encoding = mb_internal_encoding()]]) string mb_strrchr(string $haystack, string $needle [, bool $part = '' [, string $encoding = mb_internal_encoding()]]) string mb_strrichr(string $haystack, string $needle [, bool $part = '' [, string $encoding = mb_internal_encoding()]]) int mb_strripos(string $haystack, string $needle [, int $offset = '' [, string $encoding = mb_internal_encoding()]]) int mb_strrpos(string $haystack, string $needle [, int $offset = '' [, string $encoding = mb_internal_encoding()]]) string mb_strstr(string $haystack, string $needle [, bool $before_needle = '' [, string $encoding = mb_internal_encoding()]]) string mb_substr_count(string $haystack, string $needle [, string $encoding = mb_internal_encoding()]) int stripos(string $haystack, mixed $needle [, int $offset = '']) string stristr(string $haystack, mixed $needle [, bool $before_needle = '']) string strpbrk(string $haystack, string $char_list) int strpos(string $haystack, mixed $needle [, int $offset = '']) string strrchr(string $haystack, mixed $needle) int strripos(string $haystack, mixed $needle [, int $offset = '']) int strrpos(string $haystack, mixed $needle [, int $offset = '']) string strstr(string $haystack, mixed $needle [, bool $before_needle = '']) int substr_count(string $haystack, string $needle [, int $offset = '' [, int $length = '']]) mixed array_search(mixed $needle, array $haystack [, bool $strict = '']) bool in_array(mixed $needle, array $haystack [, bool $strict = '']) ``` 
&gt; sharereportSaveGive gold What is "PEPs"? Who made it and how the community can develop it further?
Q: python pep
JS is the second language I work in. I use PHP to generate most of my JS, but I have to write generators. kill meeeeeeeee
Jesus! Vim? I was trying to get away from that editor 20 years ago. You may want to take this long holiday weekend as an opportunity to pause, reflect, and reevaluate your life choices. 
https://returntrue.win have fun :)
One good thing is that the pricing structure for PhpStorm is different for business vs individual use, so it's not too pricey if your company is not reimbursing you. It's $89 US for the first year, getting down to $53 US for the third year of subscription and thereafter. It's well worth the $53 / year to me to just maintain my own license and not have to worry about what happens if I switch jobs.
No, I'm asking a serious question, because that's not what happened. Paul made some awesome and great contributes to the FIG, there is no denying that. I don't think anyone is downplaying the role he had in the earlier days of FIG. I've known Paul for a very long time. We don't talk any more, but I've had plenty of conversations with him on various topics. I don't agree with is politics most of the time, but I don't hate him at all, just disagree with him on many points. I find him pretty nice company face-to-face. That being said, he was being extremely combative and harmful to the FIG community near the end. You can find plenty of threads between me and him on the mailing list, [and it was starting to drive people out](https://groups.google.com/forum/#!topic/php-fig/w38tCU4mdgU%5B1-25%5D). [I even decided to vote +0 on his replacement as Aura rep](https://groups.google.com/forum/#!topic/php-fig/OHKaXxPVWcQ) despite all of that. I had hoped that he had seen the damage he had caused. In the end, he as not expelled. We didn't even stop him when he decided to run for secretary. He was against the secretary idea (I was in the room at Zendcon when it was proposed, and he didn't like it then either), and even [ran for secretary](https://groups.google.com/d/topic/php-fig/mfyCwz05RNE/discussion), of which he even got 4 votes. That wasn't enough to get a seat, but he got 4 votes. There were people that didn't want him to run, but he was more than allowed to and we didn't stop him. FIG was not Paul, and Paul was not FIG. FIG is and always has been a collection of people working toward the betterment and standardization of PHP. In the beginning, it was about making packages more easily transferable between frameworks, of which we had many at the time. By the end of his tenure, the group was already starting to shift focus, and it was something I feel he didn't want. Unfortunately, the FIG decided to restructure, and [Aura did not join the reorganization](https://groups.google.com/d/topic/php-fig/WT7GYX8O-M0/discussion). So, again, I ask, who did we replace him with? You can argue that we forced him out both via the forced rep change voting and the reorganization, but we put all of that to a vote. The group elected to keep him as the Aura rep, and the group elected to reorganize the PSR workflow and our structure. Paul elected to no longer work with FIG following the restructure. He did not hold the keys to any superior force in FIG, he was a single vote. He helped pioneer FIG and I thank him for that. He also caused a lot of strife.
I had been using NetBeans, but its really getting behind the times. I downloaded PHPStorm the other day on trial and having been using it on projects outside of work. I'll probably stick with it. The Diff tool is nice, which was really the only thing keeping me with NetBeans. I'm sure the other things I liked are present in Storm.
I agree I'm trying out vscode, and I'm going to trial phpstorm and compare/contrast them.
I appreciate it! 
on the plus side VS Code is free and probably comparable in features as phpstorm.
It's a special case, but in **Go** everything revolves around the standard library. I still work with PHP and have only just started using Go but I love how easy it to build a web app server with it without needing any additional packages. It seems the majority of the community recommends against frameworks entirely in Go because of the power of the standard library. Personally, I've still found some use in certain packages (routers are a hot debate. I feel I save more time than it's worth by including one, but others disagree). Regardless, basically all good packages use the interfaces of the standard library to ensure interoperability. I think the PHP FIG is the closest we have to that. I actually agree with the points that PSR-7 is so thickly opinionated that it's very difficult for two implementations to be much different from each other. However, in Go, the `http.ResponseWriter` is implemented in the standard library. `http.Request` isn't even an interface, it's direct implementation in the standard library. I don't see any problem with this. It saves me time from doing the mundane so that I can work on what matters, my application.
As far as IDE's go, I use VSCode with the Vim extension and I love it. It's not an identical experience, but being able to just install the extensions I want for the IDE features I like and use them within a Vim-like editor is good enough for me.
JavaScript has at least 5 different style guides: AirBnB, Standard, Google, Idiomatic, jQuery, etc...
I'm not a vim user but my colleague is, he uses [https://github.com/felixfbecker/php-language-server](https://github.com/felixfbecker/php-language-server) with a [https://langserver.org/](https://langserver.org/) client for vim. I can also recommend [https://kapeli.com/dash](https://kapeli.com/dash) to lookup any docs with a shortcut key.
That could work thanks
Thanks, I'll check it
So you think Aura, CakePHP, Nette, etc are "major" frameworks, whilst Flask is not, interesting...
I have not dug deep into what's the better cms other than WP. Thank you Sir for pointing this out, I will look into it.
And if you really like Vim, you can also use the IDEAVim plugin on PhpStorm so that you can keep (a lot of) the keybindings you're already used to. Or, you can just edit the keybindings straight through the editor. PhpStorm is easily worth the investment!
Yeah I would say that Django, Flask, TurboGears, web2py, Pyramid are all pretty major options for web frameworks. Some fuller or lesser stack than the others, but I've seen plenty of software written using any/all of them.
I think that PHP is close to the ideal solution to producing dynamic web pages. PHP-FIG was why I stopped using PHP as I genuinely worried that it would destroy the language. For the founder of PHP to not soundly and unequivocally reject the PHP-FIG meddlers was a sure sign they are mentally moving on. The key is that most frameworks (in all languages for all problem sets) come under 3 categories. * They solve a specific problem very well but induce massive pain when you stray from the problem they were meant to solve. * Solve many problems but are fantastically complicated to use. EXTjs in javascript is exactly this. * Are really a library that provides various nice tools that you may or may not use to solve problems faced by many programmers. The last is my favourite and is one of the huge strengths of PHP (and python, and long ago perl) is that it is full of this. Need to talk to some esoteric weirdo of a protocol and there is probably an easy add-on for languages like PHP. If you look at many other languages if there is one big thing that people recommend over and over then it almost always comes under the category of library. JQuery would be a prime example of this. In Javascript/HTML people scream that this framework or that toolkit is the "modern" way to program, yet Jquery just keeps showing up everywhere where real programmers are making real money. In c++ you have boost, qt, and poco as prime examples. Some people decry the number of different frameworks in PHP and point to other languages far fewer frameworks but that is a false argument as PHP is entirely a web programming environment and surprise surprise it has lots of web frameworks. If you look carefully at C++ which is a rarely used web backend you will find a fair number of frameworks as well. But the real tragedy of PHP-FIG would be to pick one framework's vision (or worse a muddled mix) and say, there we go a framework for all time. But the web changes and changes and changes. We have sites with 1000's of pages, one page sites with tonnes of content. We have every site for a couple of years all look like the default bootstrap template. We had SQL, then NoSQL, then SortaSQL. We have redis, we have memcached, we have clusters, we have docker, then kubernetes. What I design for a single server is so wildly different than what I design for an AWS based system there is almost no overlap in the back end. Is it an e-commerce site with AI nudging the customer to a purchase, is it a high volume site for a TV show that isn't all that dynamic, or a highly dynamic high volume site. There is no one true framework that covers all that and to try to enforce one is to fail. 
"Closed as duplicate"
There are also better free solutions that are specific to e-commerce: * [Magento community edition](https://magento.com) * [Sylius](https://sylius.com/) (build on Symfony) * [Oro Commerce](https://www.orocommerce.com/) (B2B, also built on Symfony)
Our opinions aren't really going to matter in the end. Find out how well a framework works for you, the app you're building, your personal preferences, etc. Most of the time, that means building something.
You can _pretty much_ not pay for phpstorm if you're happy to stay on their bleeding edge EAP version... it's free, and the licenses are usually updated regularly. There have been a few cases where i've had an EAP license expire and not been able to get a new one for a few days so it's not ideal. That, and you're dealing with beta software so expect bugs.. but if you wanted to have a longish trial it might be a way to go. 
You don't need phpstorm, you just need better plugins for vim. If you want the php manual at your fingertips in vim, [alvan/vim-php-manual](https://github.com/alvan/vim-php-manual) will let you use vim's built in "shift k" mapping to see docs on a php method. I also suggest [phpactor](https://github.com/phpactor/phpactor). It's a command line refactoring utility but it includes a vim plugin. It's _dope_. Currently there are 2 things that PHP Storm can do that my vim setup can't - tell me to use native array functions instead of loops, and make use [barryvdh/laravel-ide-helper](https://github.com/barryvdh/laravel-ide-helper). The first one is irrelevant as I use those functions anyway, and the 2nd, while it would be nice, is only relevant for Laravel anyway. Feel free to poke around my [dotfiles](https://github.com/FatBoyXPC/dotfiles) to look at my vim setup.
Nonsense, vim all the way. I'll keep my amazing keybinds :)
Nah, this plugin doesn't even support one of the most powerful vim commands: `:g`. IDEAVim is a good concept, but imo the only good vim emulator is emacs' evil mode.
If you like LSP, check out [phpactor](https://github.com/phpactor/phpactor). Unless the php LSP servers have improved, I wasn't terribly sold on them.
Show your colleague this post! https://www.reddit.com/r/PHP/comments/9z4tc3/as_someone_who_works_with_php_as_the_primary/ea7f1ql/
That's exactly my goal. Yeah, tests will be added in no time before the release of the first version.
Hey, it's you again! Admittedly, despite how long I've been using Vim, I'm still just barely scratching the surface. Just looked it up and that command actually does look amazing!
In my experience I encountered numerous companies which are pretty much implementing things into a pipeline and they need to split the projects by date, because the tools they use for 7.x projects are not supported in 5.x projects (and they have to maintain them for some reasons). Symfony CVE check basically does the same, runs on PHP 5.3 so it can work for older instances that are for some reason still out there.
Glad you remembered me! I didn't want to be all creepy like "I be creepin' on your posts, mannnn" 😂 Just the other day I did something like "Hm, I am getting rid of this variable on this object, but before I remove all lines of it, I have to make sure this variable name means nothing" - which meant I had to search for `foo` then look at how it's used in the method body and where it's passed to, etc., before I could determine if it was safe to delete. Essentially it meant `/foo&lt;enter&gt;, n, n, n, n` where n is the next search result. After I verified I didn't want to keep any of the usages: `:g/foo/d1`! Try that, other editors! Sure, you can do a fancy regex but I'd rather not :)
Updated data posted now at https://xposedornot.com/phpvatch/summary
They both support it, via a library that Symfony made. https://laravel.com/docs/5.1/requests#psr7-requests
https://laravel.com/docs/5.7/requests#psr7-requests
This is a perfect example, look I am -4 down. 
This is completely irrelevant. Debian, Ubuntu, and Red Hat/CentOS/Oracle are all backporting security fixes for PHP 5. Obviously people should be upgrading anyway, but pretending the EOL is some sort of doomsday countdown is utter nonsense
In this case, FUD is a good thing.
We have survived Y2K and Dot Com bubble crash. This too shall pass. As you rightly said, people should be upgrading based on their risk appetite and patch management policy of their respective company.
That SEO spam. No thanks...
None of them are backporting all security fixes.
Why You should choose GooD grammar And capitalisation and end your declarative Sentences with a quastion Mark? 
Yeah, they are. Three of them are making millions of dollars for doing so
I've been reading up on this a lot over the last few years. From what I've read the index issue isn't a problem on postgres, because it doesn't use clustered indexes. Any thoughts on this? Also obviously generating UUIDv4 IDs is going to be slower than anything else, because it's reliant on the random number generator of the CPU. But that doesn't actually say anything about using them after generation. Anyway, not trying to say you're wrong or anything. Just looking for any and all info on this before I launch some of my bigger projects where I'd planned to use UUIDv4. Have you done any benchmarks on using them in the postgres? (reads, joins etc - excluding generation)
Try phpactor to add these features to vim
It's anything but comparable. 
Random example: https://blog.ircmaxell.com/2014/12/on-php-version-requirements.html
I knew
You're going to get the same bullshit canned answers here every time which is "you fucking jerk, just use an IDE that will hide all the problems". These types of posts very rarely produce anything positive. While I agree using a good IDE somewhat ~~sorts~~ hides this problem out for you, it simply hides the problem and doesn't address it. I've programmed professionally in 4 different languages over my 13 year career and I've never seen anything quite like the PHP standard library, it's a complete joke and I can not for the life of me think who the hell allowed certain things in. Take a look at the string functions, for example, some are prefixed with str, some are prefixed with str\_ and some aren't prefixed with str at all. Some of them are \_ for spaces others don't have any. I'd love to ask the gatekeeper of PHP why the hell they would allow such massive inconsistencies in **THE SAME** part of the SPL, it's just madness and gives PHP, rightly so, a bad name. This is the real problem that PHP refuses to address because of backward compatibility but yeah, "just get an IDE and hide the problem bro".
As the blog post /u/phordijk linked points out, while they all have the goal of backporting security fixes, pretty much every distribution has failed to backport some for previous versions of PHP that they were supposed to still be supporting. It provides a bit of extra protection of if there is no feasible way of upgrading to a supported version of PHP before 5.6 reaches its and of life, but your claim that it "is completely irrelevant" is absolutely incorrect and a very poor approach to take for anything containing remotely sensitive or business critical data.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This is very much expected behaviour, and perfectly type-safe. It's a form of contravariance. For some reason, some people have a reaction to this like it's somehow breaking the interface contract and losing type safety. I'd encourage you to try and come up with an example of that, because 1) you won't be able to and 2) in doing so you'll realise why this is all fine.
tl;dr: the SJWs took something that didn't belong to them.
Yep, I follow RFC as much as I can, and I saw it too.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/phphelp] [What software design patterns should I learn first for PHP?](https://www.reddit.com/r/PHPhelp/comments/9zd3xz/what_software_design_patterns_should_i_learn/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Start to understand Singleton (and try to avoid it). Then you might want to start with Factory, Registry or Decorator. By the way, don't just read them. Code something and try to apply them. It takes years to use design patterns the right way.
 That post does a piss poor job of representing the facts while making distributions seem incompetent. Debian's patch is explicitly mentioned 2 years prior to that post in [DSA 2399-1](https://lists.debian.org/debian-security-announce/2012/msg00023.html). Red hat also explicitly patched it [Red Hat's](https://access.redhat.com/security/cve/cve-2011-4885) but they covered all the way back to RHEL4, aka: [PHP 4.3.9](https://access.redhat.com/errata/RHSA-2012:0071). The assertion that 'So the argument that “Linux distributions back-port security fixes” is patently false.' is misleading, not backed by much evidence in their post, and sets a poor reputation on vendors who's job it is to continue supporting these things. This sort of problem is important, so a half-assed _incorrect_ assertion that they don't do their job (when they explicitly document that they did) is pretty insulting and disrespectful, imho
Thanks for replying. I've already read them. I'm looking for practice only right now. Which are the most general design patterns in these, patterns which are used frequently? I'll start implementing them first. Since these patterns will be frequent in my developments, I'll be able to move to the next patterns without much confusion.
It is not shown in the gist file, but the 100 million UUIDs were generated beforehand, stored in separate files for each kind and then imported with the COPY command\*. The idea was precisely to avoid these overheads and measure just the time it takes to insert the raw data. So yes, it is indeed a problem. Regarding reads and joins I haven't seen no difference in performance (because once the index is built it works exactly the same, it is just much slower to update if you insert unordered UUIDs). &amp;#x200B; PS I'm afraid I didn't save the generator scripts but the experiment can be replicated very easily, you only need ramsey/uuid and a small script that echoes the different kinds of UUID in a loop. &amp;#x200B; \*[https://www.postgresql.org/docs/11/sql-copy.html](https://www.postgresql.org/docs/11/sql-copy.html)
I found PSR-7 is too complicated. I tried to implement a simple library to get a request param, but it ends up too many things. At the end of the day, I have to use a 3rd-party library like Diactor or Guzzle. They're too much for a simple thing. The only things I love from PSR are just PSR-2 and PSR-4.
Don't know what to think really.
Why two frontend applications in the same repo? Surely they should each have their own?
This rant has been repeated hundreds of times. The general rule of thumb is: - If it's a string function, then it's f(haystack, needle) - If it's an array function, then it's f(needle, haystack) There are of course exceptions, but you will get by with this general basis. Additionally, you will find that needing the look stuff up, is a minor issue, which you will always encounter, because no brain has the capacity to memorise everything.
This was my first true start point at design patterns: Design Patterns: Elements of Reusable Object-Oriented Software
From my personal experience, I found out that structural patterns are the easiest to apply at first, and can clean up some bloated classes. So, for example, if you have a view template file that requires some data manipulation, like formatting timestamps or something similar, then I would wrap my model class (or sometimes multiple models, depends) into something like View Model using a Decorator approach. Templates remain quite lean, domain model class remains intact. &amp;#x200B; Adapter pattern also helps with external libraries. Your domain logic is not contaminated with third party stuff. One note though. Patterns are really helpful for tackling complex code, but in simple projects they can be not helpful at all. My rule of thumb is that to introduce them during the refactoring stage, not prototyping. Writing unit tests is also a great way to notice when a class is becoming too complex and should be reconsidered. Summing up, don't overengineer while you learn this stuff.
I just love it when people trivialize upgrading php. Because every php application has been meticulously updated over the years and none of them were built on a framework that simply cannot upgrade to &gt;5.6 right? Right? Don’t mind me while I cry into the CakePHP 1.3 documentation over here.
FYI, that post isn't the best example of missed patches (if any). The CVE described in the post (CVE-2011-4885) was patched 2 years prior in [Debian](https://lists.debian.org/debian-security-announce/2012/msg00023.html) and [RHEL](https://access.redhat.com/security/cve/cve-2011-4885) (RHEL took it all the way back to [PHP 4.3.9](https://access.redhat.com/errata/RHSA-2012:0071). They didn't add the new ini option, but they still resolved the CVE.
Thanks for correcting that. I may be misremembering other incidents where that happened if that's the case. Although I would still suggest that relying on the backporting of security patches without a plan in place for an upgrade does represent an additional risk that shouldn't be taken with sensitive data.
It does not override it it provides a default value. For example it also works with `someMethod(int $value = 0)` too.
If you find them confusing get more practice. As opposed to public opinion, patterns are not best practices but examples how to solve specific problems. No problem, no pattern. 
But every server-oriented Linux distro is backporting fixes in one way or another. Backporting fixes to 7.1 is no different to backporting fixes to 5.6
The author made the mistake of looking at the patch for the specific CVE (which only added the ini directive) as opposed to the entire patchset for that release (which included the rest of the fixes) I’m not sure if it’s out of cherry-picking or ignorance (or both), but the author completely misrepresented reality.
http://www.cryptopals.com/ is challenging but fun, especially if you're interested in security
I agree, the problem that I see a lot is that as soon as an organisation is aware major security issues will be fixed by the distribution maintainers, the plan for upgrading amounts to "yes, we'll get on that at some point", but of course there are always a magnitude of items given higher priority and you end up in the situation where there are many massive legacy systems still chundering along on PHP 5.2, nearly eight years after it's official end of life and with ever greater technical debt making extrication from it less and less likely.
Not a patern but a guideline: [The Law of Demeter](https://en.wikipedia.org/wiki/Law_of_Demeter) It's one of the most basic tenets regarding loose coupling. Understanding this and looking for it in other code or descriptions of patterns made many things clearer for me (like "Why are they introducing a collaborator class now?").
These upgrades are vastly important to our communities, yet very costly: in time and effort. People like to talk like all we have to do is install the new version, but PHP 7.0, 7.1, and 7.2 all included changes that made upgrading difficult. Might it be better, instead of trying to tell people to spend dozens/hundreds/thousands of manhours to fix their software: make it so they don't have to? Maybe make it easy to do these upgrades? Is it worse to have a toggle switch for breaking changes, or to have people still running PHP 5.2 and 5.3?
While I agree but setter and getters, if they don't have a purpose, it's cargo cult. C# is cool because it has properties. For example, something like this one: **$object-&gt;getCompany()-&gt;setAddress("sunset blv");** is ugly because it's using a get to set a value but things like that happens with setter and getters. Instead ** $object-&gt;company-&gt;address="sunset blv";** is cleaner, it uses less resource and its easy to program. I know we could add logic into the setter and getter but it's not always. 
I don't think the value it brings (moving everything as close to the DB as possible) offsets the additional mental load. 1. If you need to squeeze the absolute of your performance you pre-process the data and you use exclusively SQL INSERTs 2. If you don't need that, it's just easier to create a mapper that convert the source array into a output array or create a factory class. I know both of these techniques so why should I learn how to use your library?
So you are complaining about the order of some functions? Question, which language doesn't have a problem with it? Python? Java? C#? Javascript? IMHO, the problem is not PHP. PHP Split: $x=explode('separator',$text); C# x=text.split(new[] { "separator" }, StringSplitOptions.None); Java x=text.split("[separator]"); // since split uses regular expression. 
You should start with [Design patterns for humans](https://github.com/kamranahmedse/design-patterns-for-humans/blob/master/README.md) After that, other explainations will be easier to understand.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [kamranahmedse/design-patterns-for-humans/.../**README.md** (master → c459620)](https://github.com/kamranahmedse/design-patterns-for-humans/blob/c459620d555fdf39302bff2f6fca591011e9245a/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply ea8dkwc.)
Yeah, we investigated moving to CakePHP 2 but decided about 2-3 years ago to kill our entire php code base instead in favor of java. We already weren’t happy with Cake and the performance gains have been substantial (yes i know 1.3 is ancient so it’s not totally fair, apples/oranges) like our php code takes over a second of overhead minimum per request while our java code overhead is around 250ms max. If Laravel has been on the table I might have push more for that but CakePHP (even the latest) isn’t appealing to me.
`include` will always work, it's loading of external resources you're turning off by that switch. You should read the manual.
I'm old school and, for me, the de-facto standard is decided by the best and most popular library and not by a private consensus. 
Did you read the [Documentation](http://php.net/manual/de/filesystem.configuration.php)? `allow_url_fopen`: Allows `fopen('https://...')`.. &gt; This option enables the URL-aware fopen wrappers that enable accessing URL object like files. Default wrappers are provided for the access of remote files using the ftp or http protocol, some extensions like zlib may register additional wrappers. `allow_url_include`: Allows `include('https://...')`.. &gt; This option allows the use of URL-aware fopen wrappers with the following functions: include, include_once, require, require_once.
Strategy, adapter, decorator, factory are used a lot
In a nutshell: a) Your name, age and contact at top. **Your photo** at the left or right. Who are you, at the left or right of your photo. Who are you?. For example: Computer Scientist University/Institute/School of XXXX b) Second, your experience its ok. You must clean your freelance experience, it says that you were lazy with your regular work because you did an extra job for another company. It is not true but HR could think that. c) Then your technical skill. Git is not a technical skill. Apache?. How's that, are you good at configuring Apache?. PHP: Symphony, OOP, MVC, Laravel (you must add Laravel)... Javascript: React and Node. Why not JQuery?. Are you sure that you know Javascript? HTML: HTML5, CSS and so on. d) Your CV must be a single page. 
Thats fair. I've gotten our cake2 install down to ~40ms on basically most pages, including most heavy lifting pages. I have alerts for any page that goes past 250ms, and those are few and far between now. I suspect that, unless you're doing something unusual, you can get most frameworks down to these speeds, regardless of language. I do ponder what 7.4's precompile cache is going to do.
Thanks for sharing this.
How much programming experience do you have in general? If it's not much, then I would say you're going about this backwards. Design patterns like those are very specific and meant to be applied selectively only when it makes sense to do so. You ought to focus on more of the fundamentals of programming before worrying about specifics like those design patterns. 1. Code should have clear intent, and be easy to understand and read. - Minimal dependence on state - Minimal, if any, side effects - Idiomatic and declarative - Clearly named variables, classes, and functions (better yet, try tacit programming/point-free to minimize the need to name things in the first place) - Focus on purity: same inputs, same outputs, zero side effects, zero dependence on global state - Focus on *simplicity*. Constantly ask yourself if the current solution is the simplest one possible for the given goals. Refactor as many times as needed to get to a simple, clear solution. 2. Code should be easy to easy to modify, and resilient to change. - Use dependency injection - Eliminate duplicate sources of truth (use constants, enums) - Identify duplicate code (truly duplicate code, not merely similar looking code), and consolidate it down into a single abstraction - Use interfaces and abstract classes when applicable - Keep classes and functions *focused*. Try to give them a single responsibility. But be mindful of over-decomposing your code into too many small bits that make it harder to see the big picture. It's often a balance. 3. Code should be testable. - Testable code automatically facilitates points #1 and #2 above. - You really, really, really ought to learn to write unit tests. Thinking about your code design choices in terms of how you will test them almost automatically improves their design. Those design patterns *can* be ways of achieving the above, but it's really, really important that you first understand those fundamentals in order to know when it does and doesn't make sense to apply certain design patterns. All too often I see people applying design patterns for the sake of it, and the resulting solution is *more* complicated than it has to be, for nearly no benefit.
I totally agree. You need to adapt them to your need / business domain. You should try to gain experience and understand the big principles (like DRY or SOLID, I mean really read the book where they were created) before learning by heart some patterns...
Don't just learn design patterns - understand them in order to learn OOP. Otherwise it's like learning sophisticated color names before becoming a painter. Most of websites about patterns are concise to the point that makes them useful only to remind what you should already know (or be able to quickly figure out). I'd start with "Head First: Design Patterns" book - it's focused on understanding the "why" (examples in java, but it's just a slightly different syntax).
Also, dependency injection as it is widley used in a lot of frameworks
I would say not even electron is great. At this point most of my new projects are Node projects, but electron has a ways to go.
 function multiply (int $a, int $b) { return $a * $b; } &amp;#x200B;
I think you mean mistakeS 1, there is no comma separating your arguments 2, there is no $ sign preceding your variable names 3, there are no type hints on your function arguments 4, there is no return type declaration for the function 5, there are no curly braces around the function body 6, there is no ";" semicolon to terminate your return statement
While this is very true I sadly have no time to checkout all frameworks in detail. And since I'm probably at the higher levels at coding with ZF there's ofc nothing to work better for me atm. Thx for the reply!
Hola, No aceptamos venezolanos. Saludos a maduro
for me most exciting part is PHP CS fixer integration
Is a singleton in PHP a ‘true’ Singleton? E.g if request 1 comes in and gets an instance from /index.php, then request 2 comes in and gets an instance from /someotherpage.php, are they actually the same instance? I’m new to PHP so not entirely sure what is shared between requests/lasts longer than script execution. 
A singleton in PHP will generally only last for a single request.
This is just nonsense. The FIG has been composed of representatives of almost every major PHP project except for WordPress and has had multiple core developers on its committee. Nobody is imposing a standard on anyone, that's what you don't seem to understand. FIG is *not* a standards group, it was set up (after an actual standards group failed to get any traction several years earlier) in order that the major frameworks and libraries could worn together to make integrating code between them easier. The adoption of the PSRs by major libraries makes the language far more flexible by making composition of multiple smaller libraries far easier, without being stuck with a big monolithic framework that you can't use with anything else. For example without the autoloading standard, the modern PHP ecosystem would be far more fractured and it would be that much more difficult to combine multip libraries from different developers. It had the opposite effect of the scenario you laid out in your initial post.
Create scripts and crons.
Yes, its a Bootstrap card
Challenge accepted by this person? https://github.com/hasegawa-tomoki/php-terminal-nes-emulator
thanks a lot guys 
It's arguably quite different. I wouldn't trust myself to backport a non-trivial patch from PHP 7 to PHP 5. Thankfully most security patches are trivial. Security issues nowadays tend to be in things like exif parsing, which is largely version-independent.
Probably the best advice in this thread. I wish more people actually followed guidelines like these.
Could? Yes. Should? Ehhhhhh...
Theoretically yes, but I don't see a single reason why someone would choose PHP for something like that. PHP excels in 2 things - 1) web application development, 2) scripting (CLI applications, daemons etc.). For anything else there will be at least a dozen of more suitable languages.
They do if they hear the FUD.
I definitely wouldn't call 3 and 4 mistakes. It makes no sense to restrict multiplication arguments or return values to a single type.
yes, it's a bootstrap card block, do you want to see the html?
&gt;Also: Please don't be that guy who puts the question on the title. We already have that employee who puts 500+ words into the e-mail subject and letting the body empty. Unfortunately it doesn't seem like we can have a post body on new reddit (see https://www.reddit.com/r/PHP/submit and compare against https://www.reddit.com/r/PHPhelp/submit) but it still works on old reddit. That part isn't his fault. The sub is misconfigured I think. Hey /u/Colonel-Rosa, is that something you could fix? It really hurts the post quality on this sub.
&gt; I'd appreciate feedback... Did you forget to link to the plugin? Or am I jusf not finding it?
It does indeed look like he forgot the link but I Google'd it and found it: https://github.com/Ayesh/Composer-Preload
Thank you , this is the link. I was gone bananas.
Thanks for the comment, I indeed forgot to link to it. Updated now. 
Here is a sample output from the plugin: &lt;?php /** * Opcache warm file generated by Composer Preload file. * This file was generated automatically. Any changes will be overwritten * during the next "composer preload" command. */ if (!function_exists('opcache_compile_file') || !ini_get('opcache.enable')) { echo "Opcache is not available."; die(1); } if ('cli' === PHP_SAPI &amp;&amp; !ini_get('opcache.enable_cli')) { echo "Opcache is not enabled for CLI applications."; die(2); } // Cache files to opcache. opcache_compile_file( "W:\\localhost\\contrib\\Composer-Preload-test\\src2\\test.php"); opcache_compile_file( "W:\\localhost\\contrib\\Composer-Preload-test\\src2\\tests\\test.php"); ... Loading _all_ PHP files in a given directory is often a waste of memory because some classes (such as certain rare Exceptions, adapters, etc) don't need to be loaded everytime. I suppose the preloading should be fine tuned to each project's needs. Thanks for your comment, I'm looking forward to you thoughts later on.
In frameworks world, **these are the 2 most used and also most missed**: - Constructor Injection - Collector (see [post series](https://www.tomasvotruba.cz/clusters/#collector-pattern-the-shortcut-hack-to-solid-code)) If you master only these 2, your code will have very high quality and readability. Rather than mastering observer, factory, abstract factory, subscriber, repository, controller, command, bus and other all together.
Do you have some numbers with/without on some PHP framework sandbox? &amp;#x200B; It would convince me to see 200 % improvement on e.g. [https://github.com/symfony/demo](https://github.com/symfony/demo) to give it a try :)
Did they fixed the performance issues? Its lagging more and more on each release.
Thanks for your comment! There are some pretty sweet benchmarks posted at https://github.com/composer/composer/issues/7777#issuecomment-440268416 . This plugin itself is a simple one that finds all PHP files as set in the composer.json file, and creates a simple preload.php file. All the heavy work is done at opcache level. 
Would it be smart to add this preload file in composer like so?: ``` { "autoload": { "files": [ "vendor/preload.php" ] } } ```
The "preload" word here refers to a trick that we run all the files by the opcache. This will compile the file and store it in memory, and it will remain through requests. The next time you `require` or `include` this file, the file is loaded from the memory and there's no need to compile again. The other `autoload.files` directive makes the `vendor/autoload.php` file always _include_ the files. Although they sound the same, they are different operations. We only need to run `vendor/preload.php` once, and the cache is warmed up. No need to call this file everytime. So to nswer you question, it's not necessary to add `vendor/preload.php` file to autoload. It will infact downgrade the performance attempting to cache files over and over every time. PHP 7.4 is planned to come with a feature that you define a single PHP file (either this `vendor/preload.php` file or a different file that calls all `vendor/preload.php` files) every time the PHP process starts afresh. Until PHP 7.4 comes out, one workaround would be to configure the `php-fpm` service to immediately call `php vendor/preload.php` after starting. `systemd` documentation (or any similar software you have in your OS) should have more information. Thanks for your comment!
turn power saving mode on?
In that case please apologize.. The last time I created a post is a long time ago and I didn't knew that this was changed :/
Hamming code plz Reddit 😎
What isnt wrong with this code lmao
Design patterns were invented by academia to trick students. Latter on they were propagated by a crowd of highly paid software consultants. In their pure form DPs are amazing. In reality? Not so much. You see, you are not implementing pure DPs - you are implementing your **interpretation** of their **approximation**. During our hiring process (mid-tier/senior positions) we give candidates few DP implementations (with real use cases) and ask them to change/improve (they don't have to if they don't see any need). Majority of them (out of 28 so far) stated that were was a lot of to change as these given implementations were simply wrong. The kicker? These implementations were "improved" by previous candidates. 
IMO it would be vastly preferable to no-op rather than exit if opcache isn’t available. It will make migration easier, and won’t interrupt anything if you’re e.g. on a test server with caching disabled. 
your first mistake was using php
Thanks @Firehed - It's still in its early ages, and I really appreciate it. Instead of die()-ing, do you think a simple error and _return_ might work better? The file paths are absolute, so a `preload.php` file created in a test server wouldn't work well in production. I suppose `getcwd()` + relative path approach would work better there. 
A warning, or nothing at all, and then returning is better. That way I could start using the plugin now, generate the files and make sure they’re part of CI and all that stuff, and when preloading is available it should just start working correctly. Though I suppose in practice the preload script is included by the server itself rather than one of your source files, so maybe it doesn’t make a difference. Not sure about relative vs absolute paths - I think composer resolves to absolute somewhere along the way. Look at how the classmaps are generated. As long as servers share a common directory structure, which they should, I think it’s fine. 
That face though 
Turing completeness does not equal full capability. It does equal full computational ability, but who cares about that if you wouldn't be able to interact with the kernel in some way? That said I'm just being nitpicky, you can theoretically use PHP just like most other programming languages.
If you're trying to learn good object oriented programming design in general, you should just try to write a library for something and while writing the code, write unit tests. Aim to get 100% test coverage -- not because having 100% coverage is necessary or even desirable in real life, but because there is a strange correlation between easily testable code and well designed code. It's kind of magical. No one will need to explain to you why dependency injection is a *good thing* for instance after you do this. You will understand it intuitively.
Is basically a notepad of 4gb of ram usage setting power mode on 
Yeah man I was born with it. Couldn't change that much. 
Keep in mind that a lot of these patterns you will discover independently if you just focus on writing code that is highly cohesive, loosely coupled, and easily testable. If you follow those principles, the patterns will reveal themselves to you, instead of the opposite -- trying to create code that follows those design patterns, ifthatmakes sense.
[removed]
It wasn't an insult, 10/10 thiccc 😂 just messing with you mate, nice job with the library btw
[removed]
Haha yeah man😂 I was on mobile so it took up roughly half my screen 
Love phpstorm, but would use scripts over it when it comes to deploying from localhost. I don't like my deployment to be tied to an IDE I suppose. 
&gt; For quick stuff I end up firing something else Yep. I often launch Notepad++ or vscode instead of waiting for 'indexing.....'
conceptually - nothing is shared/lasts longer. each new request is its own freshly booted universe (there are tools/configurations etc to make that not entirely true, but, you know, on a basic level)
I love PHPStorm. But it's getting heavier on my PC. So I switched back to Sublime Text 3. I wish PHPStorm is more lightweight and faster. That's all I need!
Bookmarked this site. Thanks for sharing!
Very handy for shell scripting.
This is amazing and very insightful. Thanks a lot.
Already used it in my project
I just used php to make a controller for a robot.
I love this ide. I chose it after lot of trials. The only gripe is the speed. I have an ssd drive with 16 gb ram and core i7 but still the indexing takes a lot of time. If i have to quickly see a file, i use notepad. Also they should come out with a light version. There are tons of features I don't use. They should have a poll and ask the users about the features they want and have only those in the light version. Rest of the features can work as a plugin with paid option. 
With WebCodeSniffer (free to use) you can validate your code (PHP, CSS or Javascript) for consistency with a [coding standard](https://github.com/squizlabs/PHP_CodeSniffer) in order to prevent bugs and to make the code easy to maintain, read, share and distribute. Standards supported so far : PEAR, PHPCS, PSR1, PSR2, Squiz and Zend. Standards coming soon : WordPress, Drupal, Symfony... 
[removed]
I don't know who you are, but I keep seeing you post good advice 👍. That said, my only disagreement here is "learn to write unit tests" - I find integration tests so much more beneficial, but to each their own!
Integration tests are invaluable for proving that systems work, but you still need unit tests to ensure that individual pieces work. This is because those individual pieces form building blocks that may be composed together in increasingly larger systems (think atoms -&gt; molecules). You still want to prove that the individual pieces work as expected. A codebase needs both (as well as end-to-end tests), but I've found that writing unit tests almost immediately expose flaws in the way individual pieces of code are designed. Tight coupling becomes very obvious, difficult construction or fragile state management rears its ugly head very quickly etc. Moreover, the line between unit and integration tests gets blurred quickly when you consider the integration test to just be a higher-order unit test. Consider Unit A, Unit B, and System A that utilizes both units A and B. I actually look at System A as just being Unit C. Thus the tests I write for Unit C can mock Units A and B, and the only thing I'm testing is that Unit C is *utilizing* units A and B correctly. I have separate tests that units A and B work as they should, so I know those are covered. The behavior in Unit C (i.e. System A), is then focused on only the work *it* contributes to the system. So when I write tests, my suites are *typically* just unit tests, and end-to-end tests. For me, there is no other meaningful distinction between those two classes of test. End-to-end tests cover business use cases, and unit tests cover code behavior. A unit of code behavior is a unit of code behavior, whether that's from a method with zero dependencies, or a method that utilizes several dependencies, or a method that calls through a large stack of dependencies. That being said, I do write some "sense check" integration tests for things that are hard to mock - such as how exception handling is done through a tall call stack, or in cases where I *know* the implementation is in flux, and I don't want to write a test that is too tightly coupled to that implementation. But for the most part, I consider most "integration tests" to just be higher order unit tests. 
It’s a linter in a web browser?
What's a linter? WebCodeSniffer is just an easy and convenient way to use PHP_CodeSniffer if it's not already installed in your development environment.
I hadn’t heard of [PHP_CodeSniffer](https://github.com/squizlabs/PHP_CodeSniffer/blob/master/README.md) . But, yeah. It looks like a [linter](https://stackoverflow.com/questions/8503559/what-is-linting) .
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [squizlabs/PHP_CodeSniffer/.../**README.md** (master → 74190ed)](https://github.com/squizlabs/PHP_CodeSniffer/blob/74190ed7e105e0878b123e054c2530e8e0e95b51/README.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply eaa47m4.)
&gt; Integration tests are invaluable for proving that systems work, but you still need unit tests to ensure that individual pieces work. Need? I find that a bit strong. All you _need_ is to reliably know your application does what you think it does - and unit tests aren't a necessity for that. I'd consider "end to end tests" the bare minimum for that, but you can often get away "integration" tests for that. Before I continue, let me rant a bit about testing vocabulary. I'm quite annoyed by it. Acceptance, behavioral, characterization, feature, smoke, integration, end to end, unit, and I'm sure I'm missing more. I'm so annoyed at the words people use here. Sure, I get it, having a vocabulary is nice, but sometimes it's way over done. For end to end tests - must these be run in the browser? I'm quite fond of Laravel's "feature tests" and Symfony's "functional tests". They're like an end to end test, but without the browser. Honestly it's perfect for APIs. I place a pretty high value on these types of tests, and I honestly wouldn't be surprised if sometimes I have more of those than unit tests, especially in a framework such as Laravel where you get a lot of shit done for you. That said, I don't try to avoid writing unit tests altogether, I do find them valuable. I find them most valuable when I want faster feedback w/o running my entire suite. I'll add some unit tests, then run the whole file, and if it passes I can be reasonably sure that none of the other e2e tests broke, so I'll run the full suite after that. RE: Mocking: do you mean test doubles in general, or specifically mocking? I'm not a fan of real mocks and much prefer fakes. I can have contract tests with fakes, so it's a lot easier to keep them in sync. It's also a lot easier to change the code that uses the test doubles and not have the test fail. Honestly, I don't find a lot of value in "let's assert this method gets called with these parameters" - when I could change the code that calls that, that test would fail, but the functionality could still actually work.
&gt; Need? I find that a bit strong. All you need is to reliably know your application does what you think it does - and unit tests aren't a necessity for that. I'd consider "end to end tests" the bare minimum for that, but you can often get away "integration" tests for that. As I said, good code design is aided strongly by unit tests. All of the end-to-end, integration, or feature tests in the world aren't going to solve your technical debt problems if you have fundamentally rigid, fragile code behind them. Poorly designed code will take longer to modify or fix bugs in, and will increase the chances of unrelated regressions occurring. Your "E2E" or feature tests might tell you that the few variations of inputs/paths you've given have failed if you ended up with a regression due to a change to that code, but those kinds of tests run slowly, and often require heavy setup (test data, for example), that it's just *inefficient* to rely on those tests to catch regressions in your code. I run my E2E tests before merging back into the main dev branch, and those E2E tests are run before deployments. But that's it. I simply don't have the patience to wait 5-10 minutes for those tests to run, when I could just run my unit tests in 5-10 seconds. It's better to simply have cleaner code that can be changed/modified with minimal cascading effects, and for *me*, I have found unit testing to be a great way to keep my code clean. And because those unit tests do run faster (even when you have tons of them), you can catch errors faster and earlier than your E2E or feature tests will. Do you need unit tests to write clean code? No. But for *me*, it helps keep me on the rails. It exposes problems and code smells I've mentioned in earlier comments. &gt; Before I continue, let me rant a bit about testing vocabulary. I'm quite annoyed by it. Acceptance, behavioral, characterization, feature, smoke, integration, end to end, unit, and I'm sure I'm missing more. I'm so annoyed at the words people use here. Sure, I get it, having a vocabulary is nice, but sometimes it's way over done. I agree. That's why I tend to just view tests as either unit tests (tests of a unit of behavior in your code, big or small), or end-to-end tests - literally simulating a human user using your application. &gt; For end to end tests - must these be run in the browser? They should run in whatever environment is going to resemble what the the end user will interact with. An end user isn't going to care that your feature tests passed if some CSS or JS was messed up and they can't click "save" or sort a table of data. &gt; RE: Mocking: do you mean test doubles in general, or specifically mocking? Just in general. I use the term loosely. I don't bother with the specific terminology because I see it as largely unimportant. Bottom line is that it's not the real thing - it's something I've bypassed. 
Iam wondering does PHP CLI and PHP for the webserver share the same opcache? If not the plugin would not be so useful since you run composer through PHP CLI.
HTML+CSS is Turing-complete, good luck with that.
Try lowering your screen resolution to see if the lag goes away. That is a known issue on mac. I notice major performance drops when I move phpstorm to the internal display vs the external 1080p monitor.
I have not experienced that at all :/ I'm on Ubuntu.
&gt; If i have to quickly see a file, i use notepad. Good luck with the BOM. I would recommend you use anything else but notepad for quick edits, so you don't run into encoding issues later down the road.
how is it easy and convenient?
Ahh my bad
Copy/paste your code, select the standard, read the report and correct your code. That's it.
again, how is that easy or convenient? it's 4 steps harder than just running csfixer.
"&lt;insert database access layer here&gt; show column names" into Google
Whoops sorry, missed the COPY bit. That makes sense then. You mentioned not seeing much difference with performance of reads, so that's good news for me at least. I don't mind so much about bulk inserts, won't be doing much of that. Maybe I'll prefix the start with a timestamp though... I guess it could be problematic if I end up storing stuff outside postgres too. Thanks for the info!
Thanks for the advise. But I think I know how to teach.
You should post what you've made, what you get and what you intend to get. It will be way easier to help you. 
Make sure it's marking/excluding directories properly in your projects. Things you're not touching/scanning/dont need intellisense from you can exclude and it wont index.
you don't know what a linter is but you are teaching about linters.
If you want to write desktop apps without throwing your web dev knowledge out the window use electron.
No matter the db layer, look for an assoc method (I think the most popular ones have it, not so sure about the more obscure ones) but seriously learn PDO if not using already using it, its generally better than dealing with each db layer.
Not a stupid question at all! Before running a PHP file, PHP has to compile the file to opcode. This is a time consuming process, and PHP now has an opcache to cache these opcode to memory, so the next time this file is run (included, run directly, etc), the opcode is loaded from the opcache, so PHP can save disk access and compilation step. When we "warm up" we just shoveled all the files forcefully into opcode cache, so all requests immediately benefit from this. If you have a site that accesses a lot of classes, you can speed up the first few requests by warming cache up without waiting for it to cache files naturally. 
#DecimalsMatter
Why don't you lose type safety? Null is definitely not a string, json_encode will encode it to `null` and a type-safe language will decode that as null or throw an error if expecting `string`. Am I missing something?
I'm using ZendSession, in context of coding in ZendFramework ofc. Not sure if it's possible to use standalone but given the modularity of modern ZF it might be possible. Why am I saying this? Just because I never had any troubles with it :D
Http foundation with a few extra ones on top like hashing the session id and chaining it with redis.
Tell me how HTML + CSS changes state?
I wonder what system call you believe is not possible from PHP. Is the objection they are mostly done through a C(++) interface? 
tsk tsk, you can't add to the Portfolio. You must add it to a Gallery but not in a portfolio. :-P Out of jokes, you are asking a technical question, but you are expressing it as a business-logic problem. For example, it's not the same to say: "I want to enter a customer", versus "I want to add a row in a database", it's the same problem, but the latter is technical and precise. 
My objection was against your implication that turing-completeness means you can do everything. As far as I know, PHP is able to do all the things other languages can.
How do you find your file with notepad? If the index is not created in phpstorm, you can still use the directory I thought...? I assume that you know where the file is... :-)
have the shitposters from SO found their way here?
&gt; Because making it nullable only gives you more options, it doesn't take anything away that is a very silly argument class DefaultGreeter implements Greeter{ public function greet($s) {} } this would also conform to that argument... null is not a string, the interface tells you it requires a string.
Literally your title, /r/phphelp And there are rules in this sub, you know. 
&gt; electron It's great, if you want a "hello world" app that uses few hundred megabytes of memory.
&gt; the knowledge of it always being a string Whose knowledge that it's always a string? DefaultGreeter knows it's not always a string, because it's the one that relaxed the constraint. Who else has any visibility of that local variable? Nobody - it's local! I wasn't being flippant in my first comment - anyone who thinks this weakens type safety should try and come up with an example of a previously-correct program that suddenly fails due to types when you start using an implementation with weaker parameter typing than the interface specifies.
i'm already pondering my existence at this point.
Twig
Twig
We try to develop framework independent, whilst using a framework. Let's assume, in half a year, there will be a framework called "BestPHPFrameworkEever". You look at it, and see growth in the number of followers, it is superfast, and big companies start to use it, and after a year, you want to use it too. Now, tell your boss, we need at least half a year, or perhaps a year before we can use it. I can too, in one or 2 weeks, since I did separate the business from the framework. :-) Don't glue yourself to a framework is my advice.
Twig
My goodness why? Why not make a copy of the default ini, change the config and ADD the file back into the container (ready to use built images)? For dev env define the dev ini as a volume in docker-compose (to not have to rebuild every time you change something).
**Cool idea!** I believe it might be very useful for coding standard demonstrations. I'd definitely use it if - it generated share-able permalinks, like https://regex101.com/ or https://3v4l.org/, e.g. https://3v4l.org/Z4WDa - if supported also PHP CS Fixer and EasyCodingStandard - if it allowed 1 config file input (also textarea) - PHP_CodeSniffer: phpcs.xml - PHP CS Fixer: .phpcs.dist - EasyCodingStandard: ecs.yml &lt;br&gt; Is it open-sourced on Github? I'd love to contribute Keep up
Twig
Am I the only one using smarty?
[removed]
I'm pretty sure there are others. 
Blade
Use whatever you’re comfortable with. I use twig and mustache for my personal stuff, but for some clients smarty is still a thing. 
Thanks. Some points are already on the todo list. I add the other ones. It will be on GitHub. I will let you know.
[Plates](http://platesphp.com/). No need to learn a new syntax.
It's from a project for my students. The idea was to teach them how to code properly by showing what they can do wrong even if it's not a coding error. Coding standards are important and they should be teached as soon as the students start to learn a language.
If you use defaultGreeter as implementation of Greeter and pass null through the interface (could be unintended), you loose the ability to switch the implementation to SimpleGreeter or produce fatal errors. Such code **can potentially** introduce unexpected behaviour and therefore i would avoid it. &lt;?php interface Greeter{ public function greet(string $s); } class DefaultGreeter implements Greeter{ public function greet(?string $s){ echo "Hello, ".($s?:"World"); } } function greetBob(Greeter $greeter) { $greeter-&gt;greet(null); } greetBob(new DefaultGreeter); // :) class SimpleGreeter implements Greeter{ public function greet(string $s){ echo "Hello, $s"; } } greetBob(new SimpleGreeter); // :(
Twig, when Symfony, Smarty when play without a ready Framework...
Are you a bot ?
I'm stuck using Smarty due to legacy reasons (a very old version as well). I would never pick it for a new project. It tries to do way too much and ends up falling flat on its face in terms of ease of use. I would choose Blade or just plain PHP over Smarty any day.
No, just inlined PHP between HTML. e.g. ``` &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; &lt;ul&gt; &lt;?php foreach ($things as $thing) : ?&gt; &lt;li&gt;$thing&lt;/li&gt; &lt;?php endforeach; ?&gt; &lt;/ul&gt; &lt;/body&gt; &lt;/html&gt; ``` 
Twig
PHP is pretty much a templating answer. I find this 100% valid
Blade
You know when you're the one person who has linked it, it's esoteric ;)
Blade with laravel and volt with Phalcon
Depends on the project. If it's a Drupal project, Twig. Laravel, it's Blade. Simple project that doesn't need an engine and isn't based on a framework or CMS that has one built in, inlined PHP. As for which one is best... I'd say Twig is the most powerful, but 99% of the time I don't need any of that power, so it's really irrelevant.
I'm glad they did this, but would you think websites "configured" to leak version data are more or less likely to updated? Just something to think about when looking at these numbers.
Twig
My own.
Twig
Twig
 function greetBob(Greeter $greeter) { $greeter-&gt;greet(null); } And there's your problem - that function is not type safe. If you run phpstan against that it will tell you "Greeter::greet expects string, null given.". You want to pass in null, you need to hint against DefaultGreeter. In fact, this isn't even about types - implementations can (and usually do) offer more public methods than are in the interface. Hell, that's the whole purpose of being able to implement more than one interface. And that's fine - but you can't type-hint against the interface if you're coding to that specific implementation. For a concrete and real-world example, Symfony's Session class has a getFlashBag() method, but SessionInterface does not. If you type-hint for SessionInterface and then call getFlashBag() then your code is not type-safe, and again a static analyser will tell you as much.
&gt; excels in https://github.com/PHPOffice/PhpSpreadsheet
Twig
Came here to say smarty. Been using it for years, and I love it.
I am for a legacy product.
&lt;/me-too&gt; (for legacy software).
Twig
Twig
Blade
Twig
[removed]
Twig / Volt (C derived extention of twig)
Branch
Blade
I had to use smarty for an old project. It wasnt bad at all but it was missing modern features 
Blade
In fact on review I completely agree. On the basis that multiplication operations can both accept and return both ints and floats.
On line 30. You are not conditioning the writing of the file. if(!empty($username) &amp;&amp; !empty($password) &amp;&amp; fwrite($fp, $text) &amp;&amp; !isset($users[$_POST['username']])) { header('Location: login.php'); } You are conditioning the header instruction. You are outside the conditioning of username existence The writing will happen even if username is already taken.
Blade
Depending on which area of the app, plates or zend-view.
This is the way I like to do it, but I think Node/JavaScript/Java development is what ingrained modularizing into my programming style.
Blade
Thanks for your answer! I managed to fix it now! :-).
Twig
Now delete your *submission* from this sub and next time read the rules
Twig
So if you shouldn't do something like this, what does a safe/valid solution look like?
Twig
Blade
you have lots of big if/else sections - try breaking it down into functions to make it easier to read, then it is easier to find bugs
I currently have to. Loathe it every day. But at least migration to twig is planned for the next year
Yes that's exactly what I mean here, all the data is fed to the template file which does the job of writing the data in the HTML. I don't mean doing actual work with PHP here, controllers are used for that. This is just the view.
I'm just giving a very basic example. Obviously I'm assuming here that the data is already escaped. I'm not saying it's the best idea but I'm just answering that other guy being confused.
Sword
The main point of a templating language is to escape your stuff to avoid XSS issues. Effectively you can just do the same using PHP and wrapping all output with `htmlspecialchars()`, but that's really tedious and requires remembering to do it. Templating makes it easier and safer... But IMO many templating languages go too far and make things more complicated than needed and try to pack in too many extra features.
Blade
slimphp/PHP-View
PHP. I haven’t seen a need or reason for an engine when PHP was made to work with HTML. &lt;? if($user-&gt;isLoggedIn): ?&gt; Logged in! &lt;? endif; ?&gt; This looks like a template syntax to me. http://php.net/manual/en/control-structures.alternative-syntax.php
I started with smarty back in 2003 and used it until around 2007
 $contents = ''; $items = []; foreach ($things as $thing) { $items[] = "&lt;li&gt;{$thing}&lt;/li&gt;"; } $contents.= sprintf("&lt;ul&gt;%s&lt;/ul&gt;", implode('', $items)); $output = &lt;&lt;&lt;HTML &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; {$contents} &lt;/body&gt; &lt;/html&gt; HTML; echo $output &amp;#x200B;
Thought it may help someone also was curious to know what others are using.
It depends, if I’m building in Laravel I will use blade but with anything else I’ll use twig since it’s so much better! I even use twig with node.js! :)
&gt;lol. Great start to the conversation, really well thought out and constructive. &gt; Is this a serious post? this is being presented as worldly and experienced because you've experienced 4 languages, lmao Having used 4 languages professionally (and a few more at a hobby level) it gives me a much better insight into what's been done well and what hasn't when comparing them. I list the issues I found with it that other languages that I've used do not, if you disagree with the points then say so and why you think that way. I'm more than happy to change my mind if you have good reasoning behind your opinion/views on the inconsistencies in the standard library mentioned above. &gt; PHP has it's problems, but your attempt at authority is laughable. Firstly I'm glad it cheered your day up. Where did I claim to have any authority? I simply listed the reasons I thought the standard library was poor compared to other languages I've used, it doesn't compare well.
Let's remember PHP didn't have classes until PHP 5 and is poorly suited to handle objects, it tried really hard to copy Java and made a lot of compromises when it did so. Consider the sort function, it takes an array and sorts it, no matter how hard you try PHP's sort is not going to sort your object that looks kind of like a collection, unless you choose to re-implement all of PHP's array functions to support objects (some people do this). And then the other gotcha with object storage is objects copy by reference, whilst arrays copy by value, this matters if you care about immutability and predictable results, here is a common example: ``` &lt;?php $now = new DateTime(); $start = $now; $end = $now-&gt;modify('+1 day'); ``` As a beginner to change by reference you may not expected $start to have changed, but it will have. Advocates would probably recommend doing setter and getter busy work at this point which is a workaround in my opinion. So why would I want to add my data to an object? Well it looks good in terms of safety to specify that my user object has, for example a name and a id and some other things It appears to make things predictable, but in large systems it does the opposite, because at any point anyone could have changed what name and id was, or unset the property or started adding some properties dynamically to the object. If you believe those things can't happen because of private/protected/public then you need to learn more about PHP, if you hope those things don't happen then you're living in hope. But there's a more fundamental problem, even an user object with id and name ignores that objects like user often have a lifecycle that is ignored in the object definition i.e. Anonymous User -&gt; Unvalidated User -&gt; Validated User Each one of these states has a different set of properties, i.e. an anonymous user does not have a name, you often see this distinction when you use a system where types are cheaper than in PHP i.e. doing Domain Driven Design in F#: https://fsharpforfunandprofit.com/ddd/ Most developers cannot be bothered to make 3 classes for this because classes are expensive cognitively in PHP but then you're not really mapping your domain with objects properly so let's press ahead down this road of OOP nirvana Once you have properly mapped the state of the User in all three states with objects you'll find you need a way to move your user between those states, so you'll need a finite state machine to allow us to properly transition our user between states: https://github.com/yohang/Finite Once you get this far you'll quickly find you've created a lot of code that is hard to change and often repeats itself, it's super specific and so super safe but not super flexible to change. Had you represented a user with an array with dynamic keys you could have represented the user in all three states in the same data structure, you could have changed the array name to $anonymous_user if you were sure you had one and you could have validated what data was in the array at the edge of your system What's key about using an array is that it was so much easier to implement, easier to use with the PHP standard library, easier to read i.e. you can tell what $user['name'] does but you can't tell what $user-&gt;name does due to magic methods, easier to copy safety $james = clone $user; vs $james = $user; and easier to trace, i.e. don't need to check an inheritance tree for what 'name' is and easier to implement because you need to create 3 new files, 3 new classes to implement a user data. And finally it offers the same assurance that a key will exist in a certain place as an object does (by themselves), none. Additional reading: The value of values: https://news.ycombinator.com/item?id=4382688 Simple made easy: https://www.reddit.com/r/programming/comments/lirke/simple_made_easy_by_rich_hickey_video/ https://github.com/tallesl/Rich-Hickey-fanclub 
I try to steer away from sessions as much as possible. I basically just store everything in explicit objects in the DB, then have a cookie to find all the related records in the DB. I know this is essentially sessions, but it allows you much more control over your data. You're also much less likely to get race conditions, updating one field in a DB can be done with no issues, but storing an entire array to the DB every request? That can cause big issues. For example in Laravel, it always stores the session, so if you have two requests in quick succession, variables can disappear from the session randomly. Magic!
So I recently jumped into a laravel project to help out in some sprints what is so good about blade or is it just everyone using laravel that uses it?
This works for unhashed passwords but I'm trying to learn how to use hashed passwords and the attempts I've made at writing a script that includes password\_verify have failed so I figured I'd try to impliment it into this working code. Any help would be appreciated and feel free to point out any issues with the code as it currently sits. 
Blade
Twig
Shield
No love for handlebars/mustache? :(
Twig, because of the security audit.
All you have to do is add 2 steps. &amp;#x200B; 1. You have had to have ALREADY hashed the password before you stored it, so you need to hash the password prior to storing it. 2. You use the same function you used in step 1 to hash, to hash the submitted password just prior to using it in your sql statement. thats about it. You should be able to googel PHP's best practice method for hashing a password.
Latte
Better docs needed, I’ll get right on that. Thank you for taking the time to look it over. If you’re curious about the annotations, you can find an example interface here. https://github.com/Robert430404/guzzleface/blob/master/tests/GuzzleFace/Integration/Fixtures/FixtureClientInterface.php
Blade
The password that is in the database is already hashed via password\_hash. Any login script I've tried that used password\_verify just hasn't worked so thats why I decided to try altering this working script to verfiy the hash. Frankly I just don't know where to add the password\_verify. 
Yeah that whole deployment thing is a joke imo, who even uses that suuuppppeerr slow.
It is just everyone using Laravel that uses it. Anyone else using a templating language would most definitely be Twig.
Ah ok it felt like a downgrade going from a slim3 environment with twig and eloquent to laravel at least for custom projects. For CMS ext I think laravel is still better with Nova.
OK, I see your point now. Does not seem that it will work anywhere with your present code, unless you find the MSQL function that does this that you can use in the actual sql statement like: &amp;#x200B; `AND password_verify(password) = :password`
It’s a 2 step process: 1. Query the information where login= login to retrieve the hashed password and other user data 2. Then, use password_verify on the query result
I wasn't critisizing you or the code. Only PHP as a templating engine. The fact that it's so damn easy to forget the `htmlspecialchars()` is why using plain PHP - even with Symfony PHP templates or plates, which fix some of the other shortcomings - as a templating engine will almost always end up biting you in the... you know. It's so damn easy to accidentally sneak in a short PHP tag with no escape function and the results are really bad. This exact thread here, about templating engines comes up every couple of months and in every single thread I see someone making this exact mistake. &gt;Hey, you don't need a templating engine at all! PHP already is one! Look, it's so easy! And then the example they give is always vulnerable, while equivalent code written in any templating language wouldn't be. So I'm starting to wonder if some people genuinely don't know any better. That's why I think PHP as a templating engine is downright harmful: the intuitive way to generate HTML with it is vulnerable and new developers get absolutely no warning. If PHP escaped output by default (based on the current content-type, for example), people would be safe by default (As long as they don't output in inline script tags or CSS). Eventually, the young developers would want to output raw HTML from a variable or function return value and then scratch their heads, wondering why it outputs the tags as text. But then they could google why this happens, get the solution and learn something about security. Yet even before they knew about it, they would be safe. &gt;Obviously I'm assuming here that the data is already escaped In my opinion that's usually not a good assumption to make. The data you feed into the template layer should usually be unescaped. After all, you can't know what kind of escaping needs to be done - JS(ON) escaping, HTML escaping, CSS escaping, maybe something even more esoteric... It's the templating layer that has the job of escaping data prior to outputting it. HTML-Escaping data prior to saving to a DB or doing the escaping in a controller js pointless and harmful. The HTML will usually end up escaped twice or not escaped at all. Sorry for the wall of text. Maybe, someone learns something from this. Or if I'm wrong, just tell me.
The bindparamaters way is not the best practice or popular way. 
When I found this package I was all 😍 SOMEBODY IS AFTER MY HEART! I wish more people realized that php is a perfectly capable template engine.
This is correct.
Someone using Blade outside Laravel?
Too verbose and ugly
Same here when I use PHP -- interspersed with HTML but of course just the view stuffs only
it also doesn't mean it's declining, it means its not growing as fast.
Notice I said 98% of the time, not everywhere. I tend to only do this with simple value variables. For elaborate objects I tend to have various decorator classes which tend to escape each value in the spot where it's used and `-&gt;render()` the object within the main template.
Why would doing this be a problem? 
How do you do templates/layouts?
How do you do with templates/layouts?
I use PHP itself with alternative syntax of control structures when I'm teaching, and I built my own templating engine for my framework (just for fun I guess)
Not sure what you're referring to, I never used Symfony (mostly used Laravel, Yii, and other legacy stuff)
Do you use MVC framework ?
this!, is!, /r/php !!
Exactly this. Thanks for wording it better than I could have.
I 100% agree with you, I'm not advocating for PHP as a templating language because like you said, easy to forget to call `htmlspecialchars()`. Like I said, just answering the one guy who was confused that people could use PHP for templating.
Why would you make it so difficult, though? With a competent templating engine, all the escaping is done (implicitly and comprehensibly) in one place, without requiring decorators around all of your models. 
Do you mean other frameworks than mine ? No but I think I should. Mine is MVC too but need improvements about its architecture for dependency injection and inversion of control.
Twig
Twig