You're right, I've added a small section about it.
Why is PHP closed source for you?
&gt; I am currently looking for a better ecommerce solution than opencart 2.1.0.2 that is based on PHP He also states: &gt; I'm only looking for opensource solutions Which Shopify doesn't offer. I can't imagine an ordinary shop owner who sells clothes/flowers/perfume would be coming to this subreddit asking for open sourced, PHP based solutions. &gt; building your own things is great but sometimes, lots of the time, it's unnecessary Although I agree with your viewpoint and I understand where you're coming from I have also spent the majority of my time over the past 3 years migrating people away from such closed-source platforms. As businesses grow they want control over their own hosting and trying to integrate such closed source platforms with other things such as WMS, CRM's etc is just a nightmare.
Definitely gross. You should also be getting decent benefits on top of that $100k. Health, Dental, etc.
TIL!
I think we'll agree to disagree here. If he's here, asking this kind of question it's likely he's working for clients at the steep end, it's mom and pop shops and as a developers we're engrained with this "I'll code a solution" problem or along that vain "open source is the only way" when actually the Crux of our job most of the time is to solve the problem in front of us in the most efficient and effective way and lots of the time that's handing off the heavy lifting to specialist and vendors (you don't see many people building their own metal, they just use AWS) my argument is most of the time, a vendor even of software can be a much better choice and it almost always is with regular Joe's, as I've said sites that cost in the millions could have been solves alot simpler and easier using a vendor, so of course the same is true for normal sites. Sure leaning the in and outs of an ecom site, or just want to play or have a REALLY specialist requirement then Sylius and Magento 2 are good options. Just question if they really solve the problem you want to solve in the best way. 
Ok I will
OMG! i am wondering why people hate this website
I get you. The thing is, you go a *long* way with just a persistence model, especially early in the project. As a domain model emerges from the user+system interactions, *then* you can start mapping stuff over from persistence to the domain -- and even then, only as you need to. So I wouldn't necessarily call it "lazy" -- maybe just "not expending effort until it's actually necessary." ;-)
Bhahaha. I suppose that is true :)
For me a DTO is a class with setter and getter methods. DTO example: class User { private $id private $username; public function setId($id) { $this-&gt;id = $id; } public function getId() { return $this-&gt;id; } public function getUsername() { ... } public function setUsername($username) { ... } } A simple POCO looks like this: class User { public $id; public $username; } Here is a more detailed example: https://dzone.com/articles/practical-php/practical-php-patterns-data
You can't ensure type safety with public properties and should therefore not be used.
That's not my point. It's about naming things. I'm just talking about this example code here: https://github.com/mark-gerarts/automapper-plus#example-usage 
You're right, the naming might not be 100% correct. The point was to provide an example of mapping one class to another. I got a bit lazy by giving the DTO class public properties, and omitting getters/setters. 
My company's web filter blocks this as it triggers the `sex` category. :ThinkingFaceEmoji:
If you want to go some more in depth about zvals, [this](https://nikic.github.io/2015/05/05/Internal-value-representation-in-PHP-7-part-1.html) is a really interesting read as well.
I personally haven't used Magento, but I can give you advice based on personal experiences. I think by far the most performance friendly way depend on the overhead of these calls. For example, some of the payment authentication API calls I utilize take 6 seconds to respond, which is insane. If your call completes in under a second, I don't think it'd be terrible to perform it during the page load. But in general (assuming the call takes a bit), * Establish a call that occurs on user authentication (if possible) or only when the session doesn't exist. * If the call takes awhile to complete, and performance is important, ajax calls wouldn't be a terrible way to allow the page to fully load before calling the script. But IMO, it'd be better to only call this once per session/auth if possible.
Can confirm, ran a Xenforo forum that mainly is a niche now. It's sitting around with barely any activity.
Good links recopilation, but I discovered that php frameworks are garbage and I moved to django :D 
Symfony sucks 
Where's your controller? If you are accessing register.php directly which I presume also contains your HTML output then you are not doing MVC.
The paragraph about garbage collection is AFAIK wrong. Reference counter is a pre 5.3 mechanism, and what PHP architects call "garbage collector" is the mark and swipe (AKA cycle collector) added in 5.3 to handle leaks caused by cyclic references. Furthermore, the ref counter provides deterministic destruction which occurs once the ref count reaches 0, there is no such "PHP marks that object as removable".
Still wondering why you need to detect device type. From PHP, it's never going to be anything better than an informed guess and nearly every reason to try to sniff this that I can think of is better solved in CSS by going responsive down to the smallest device you care to support. Since that doesn't actually answer your question, here's my best stab at it: Yes, just write this stuff to session. It's not going to change over the course of a session, unless the user is on a phone and traveling while accessing your shop. It really depends on how you're storing your session state, but session access is generally fast. On page load, check to see if these values are set in the session and load them in if they aren't. If JavaScript needs to know these values, you can create a `script` tag before your load your page scripts that dumps the necessary values into an object that you attach to the `window` object. Accessing these values should be cheap for the above reasons and adding them to the page adds a negligible size to the page and negates the need to wait for an AJAX call after page load. Just be sure that this intermingling of PHP and JS is limited to outputting data. _Do no logic here_, or you're already in spaghettiville. `&lt;script&gt;window.data = { deviceType: &lt;?php echo json_encode($deviceType); ?&gt;, location: &lt;?php echo json_encode($location); ?&gt; };&lt;/script&gt;`
Sorry I have a library.php and that’s what I want to POST to, where I then have a function that checks of the email is taken or not, to which it would run a PHP function on the API.php file (inside the model folder). My problem is connecting and running the function for adding the user to the database. I have all the code and it works, but in its current form it’s just a single page including all of the code. I need to split it up into the MVC model and have functions run from different root folders. 
I really appreciate the help btw!!!
&gt; Still wondering why you need to detect device type I'm assuming it may be because they just want to track users that access by device. I have literally nothing meaningful to add to your response (it was great haha), but just figured I mention that. For example, I developed a Podcast distribution system. It's difficult to grab OS/device (like you mentioned), but it tracks that precisely to get the market share between OS's.
http://php.net/manual/en/function.require.php
From your controller you can use require_once to load the model functionality - this will prevent the model from loading multiple times and conflicting with functions that have already been defined in that namespace. &lt;?php namespace controller/thing; require_once(__DIR__ . '/../model/thing.php'); $email = ($_POST['email'] ?? null; $result = \model\thing\doThing($email); $html = \view\render('thing.php', $result); echo $html; You should really look into autoloading and the PSR-4 specification - which automates somewhat the process of including files.
Piwik does it welll. I don't know why /u/evilmaus believes it's "bad practice". We use it a lot in our applications.
Come on, why bother with a link? Why not to make these *two paragraphs* a test post? 
[SOAP](http://php.net/manual/en/book.soap.php)?
Thanks a lot for the precision :)
Quite nice. Also mobile friendly would be quite nice.
thank you . Happy you like it 
Nice! I'm going to have to look at it. I think mainly because User Agents can be spoofed, so it shouldn't rely on user agents for viewport size or anything like that. But I don't see a harm in logging it for other reasons. In my case, a ton of podcast apps will just use 'Podcast' and I can't determine the device/OS from that lol. But yeah, it's not inherently bad imo.
Nice work I really like those tools. I like the way Phony mocks return values definitions are decoupled from the expectations. It allows a lot of flexibility. I like the monkey patching feature too.
I would avoid device detection during a regular request with php simply because php of http caching. That is, if you want to switch the layout and having the option to cache in future. In that case I'd prefer a slim client side solution. If you don't need the geo location asap I'd offload it to a background task aka cronjob. Otherwise I'd likely go for [3]. In both cases I wouldn't store the data in a session nor in session/local storage, but in a cookie. This way you have the information available on client and server side. If you later need to query this information you could either add it to the user (lastgeolocation/lastdevice), or another appropriate process (i.e. an order).
Just report him for spam.
In the case of useragents being spoofed, you have to decide if it's in the scope of your application to handle that correctly. Then we get in to nasty stuff like fingerprinting, which i'm personally against.
Well luckily this is mainly for tracking analytics haha. No need for extensive analysis.
evilmaus, thank you for your reply! sorry for not replying to your question on magento sub. I want to test different remarking strategies for different device types. When analyzing some of the top sites in my niche(very competitive), i digged down in their code, and was amazed by the different things they track. "Yes, just write this stuff to session. On page load, check to see if these values are set in the session and load them in if they aren't." That's exactly what seems i will do. What sessions should i use? php sessions or sessionStorage (html5)? I don't understand pros and cons of each. Which is better and when. "Accessing these values should be cheap for the above reasons and adding them to the page adds a negligible size to the page and negates the need to wait for an AJAX call after page load." My plan with AJAX is to bypass first potential delay caused by calculation/call of the values before they are written in a session. And after they are in session, than AJAX call will not happen. Will use "if ($deviceType){} else AJAX call" logic. Basically calculation of variables and writing into session will happen only once, most likely on home page, which is the most traffic page on the site, that's why i am won't too do it most performant way possible.
vladbootin, thank you for your reply. "I think by far the most performance friendly way depend on the overhead of these calls." Totally agree. I expect GeoIP2 php library to have some overhead. "Establish a call that occurs on user authentication (if possible) or only when the session doesn't exist." Could you explain why it important for session not exist while doing the calls? "But IMO, it'd be better to only call this once per session/auth if possible." So i should go to calculation needed variables only once write them in session, and than use if needed. Right? With ajax plan it will be called only once, i will use "if ($deviceType){} else AJAX call" logic. 
"I would avoid device detection during a regular request with php simply because php of http caching. That is, if you want to switch the layout and having the option to cache in future. In that case I'd prefer a slim client side solution." This device variable is not needed right way (it's not used to load specific) layout/theme. So i don't need them right a way. "I would avoid device detection during a regular request with php simply because php of http caching." You mean if they are calculated during a regular request, than they will be either cached(be same for all users which was on the first cache request), or i will have to make function dynamic(by pass cache/be called on all requests) - both equally being a very bad thing.
I meant that basically on initializing their connection/session/authenticating, just do a single call. I wasn't sure what you were doing, so I figured I'd just mention them all. Ex: * On auth, set session/cookie * On session not existing, set session/cookie As far as the last point, I'm not sure exactly what you mean, but basically yes. I'd try to keep it to a single call, as little as possible. There's no need to re-calculate their device every time a page loads.
Sure, but let me ask: you have two mail()-functions in your code - why so please? The first one mails to $to and the second to $recipient. But you only check the second one in a IF-statement.
It's not "bad practice", per se. It's that it's a common instance of the [XY problem](https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem) in that what device is being used isn't what the developer is after, but usually window size. Certain device types tend to become synonymous with certain screen sizes and distract from the actual matter at hand. I was asking OP to see if this was the case, especially since it sounds as if this information needs to be retained in the session and communicated to JS, rather than just logged. That said, it's sounding like it's more for collecting marketing data. That makes total sense. The other reason why I questioned it is because it _can_ be unreliable or spoofed. If you're trying to run anything security or UX related off of that, it's again a bad idea. Just for logging to build up a sense of who's using your app? Sounds great.
Fingerprinting sounds like a lot of effort to build a fallible system that could be better handled some other way anyway. Yuck.
Store it where it's needed. You say that you're using it for analytics. The server needs to know about it, so store it there in PHP's session. I see where you're going with the AJAX, now. It's not to inform the browser about this information, but to push off the work until it won't impact the user. That makes sense, but I'll put in a couple of things to consider: - How much time does this operation really add? It's certainly adding complexity to do it this way. Beware premature optimization. If the time added is negligible, don't bother with the AJAX call and do it on page load. Only start looking for more exotic solutions if you're getting a real slowdown from this. Unless these calls are having to contact third-party services, nothing that they're doing is all that labor-intensive. KISS things, when possible. - Doing it after page load means that there's a small chance that the call never happens. This probably isn't an issue for you, since the probability is low and the next page loaded is another opportunity to make it happen. - It's also possible to run some code _after_ the response is returned to the user, but before PHP is done executing. This isn't always easy, since most frameworks don't really consider the possibility of it. But, it's an option to think about.
Zomgnerfenigma, thank you for your reply! "I would avoid device detection during a regular request with php simply because php of http caching. That is, if you want to switch the layout and having the option to cache in future. In that case I'd prefer a slim client side solution." These device and geo variables are not needed right way - they are not used to load specific layout/theme - only for remarketing later on. "I would avoid device detection during a regular request with php simply because php of http caching." Do you mean if they are calculated during a regular request, than they will be either cached(be same value for all users which was on the first cache request), or i will have to hole punch these functions/blocks (bypass cache/be called on all requests) loosing performance boost brought by cache. "If you don't need the geo location asap I'd offload it to a background task aka cronjob" Could you explain a bit more detailed how it can be done? We use cronjob for other tasks, but i've never saw examples of it used like that.
vladbootin, thank you, you are very help full.
evilmaus, thanks, great points to consider!
Long polling is mostly a hack from before the time of websockets. IMHO websockets are easier to use.
&gt; KISS things What does it mean bu the way? googling did not bring any results. 
Hmm, interesting. Any reason like IP or content specific? 
I'm assuming he's referring to the acronym. https://en.wikipedia.org/wiki/KISS_principle You seem to be a native English speaker (just getting that based on the sentence structure). In essence, don't over-engineer.
This is not much different than serializer/hydrator which are here for a loong time. I miss why are you so attached to these DTOs though? Just use array that symfony forms works with by default and hydrate object with that.
I am not native, but live in USA for more than 12 years, never heard KISS before - thanks for explanation.
I couldn't tell you honestly. I just get a super generic 'Content blocked' page. Says the offending category is `Sex` and that's about it.
No thanks. I use DTOs to map my data and ensure the default values are set correctly. This means I can set and entity in my DTO, without mapping it, and use it elsewhere when handling the form. See https://github.com/hostnet/form-handler-bundle/wiki/Getting-Started-With-Form-Handlers Using arrays as datastructures is a bad thing to do.
No problem! You aren't doing bad by any means, but I just meant that it's a fairly common American principle so I didn't think you would get it.
For routing, I'd recommend [nikic/fast-route](https://packagist.org/packages/nikic/fast-route)
As usual "it depends", so... https://github.com/ziadoz/awesome-php :-)
&gt; "I would avoid device detection during a regular request with php simply because php of http caching." &gt; Do you mean if they are calculated during a regular request, than they will be either cached(be same value for all users which was on the first no cache request), or i will have to hole punch these functions/blocks loosing performance boost brought by cache. Well if you need device detection to switch the layout and you have caching, you cannot decide the device on server side because you may never go past the cache. &gt; Could you explain a bit more detailed how it can be done? We use cronjob for other tasks, but i've never saw examples of it used like that Create a table and write userid, user agent and ip to it. Create a cronjob that iterates over the rows and resolves user agend and ip via according service/utility. Either store it in the same table or user table or send it to 3rd parties as needed. I am slightly confused. You said that you need the information for remarketing. If you use 3rd party services for that, they really should (and likely can) do that on their own.
Thanks! :)
goatse
Forums ain't as big as they use to be. But if you want some here is a list: - Mybb - PHPBB - Vbulletin - Xerofero - ipbulletin (can't remember how it is spelled). These are the top used forums. 
This script/framework is bad that is why no one likes it. I have used it prior and got hacked. I coded my own app and didn't get hacked. But maybe they changed though. I was using v3.
I was thinking the same thing at first, but I didn't think the filter would really be that sensitive. It either registered that `goetas` has all of the same letters or was close enough maybe.
I just create a folder named releases, and I clone the current version into a folder like 1, 2, 3 etc... make a database backup and then doctrine schema update --force 
composer require *
Not sure if I should upvote because it's actually a good digest, or downvote because it's clearly marketing spam.
 - symfony/http-foundation - symfony/console - symfony/validator - symfony/process - twig/twig - swiftmailer/swiftmailer - nikic/fast-route - monolog/monolog - ezyang/htmlpurifier - geoip2/geoip2 - ramsey/uuid - aws/aws-sdk-php - stripe/stripe-php - sendgrid/sendgrid - phpoffice/phpexcel - moneyphp/money - guzzlehttp/guzzle - flip/whoops
Yup, happened to me. I kinda get it though... that's exactly what PHP did to C, and got a lot of heat for it, so now all the people who for so long took that heat, know exactly how to serve it back. One thing I heard over and over was that you should never write a parser/compiler without using YACC, but some of the language features of the Hashtag Framework (my custom compiler on top of PHP), simply don't fit into any YACC examples i've seen, so I had to do it from scratch. It works, it's fast, it solves my problems... nope, "useless because..." I am interested in seeing this used for something dynamic... right now the examples are just 1... 1+1+1+1... then entire PHP 7 language, or a single printf function that just prints a value. All of those could just be done in PHP directly, so it isn't really clear what has been gained. 
I would be interested. Utah county denizen here, as are most of my coworkers and former coworkers. So I probably could help with making some magic happen. I use laravel/lumen for newer stuff, and cakephp for legacy applications. Have also worked with phalcon and codeigniter. 
How's the job prospects for developers there? 
Weber county PHP developer here. I'm game if something is in SLC. I have a couple connections in downtown where we could possibly meet. I also have access to a co-working space in Eden. A bit of a drive but a really badass spot.
There seemed to be quite an active PHP user group there when I came down from MT for the SkiPHP conference.
As far as I know pretty good.
This would be for a monthly or bi-monthly meeting. A bit different then a conference.
Is there anything going on in Ogden/Weber as far as PHP meetups? I'd be open to shifting spots between the two counties on rotating basis.
I am considering checking you guys out in American Fork, looks like you have an active one: https://www.meetup.com/Utah-PHP-User-Group/
Anecdotal, but my employer in Lehi currently has two dev job postings -- one mid-level and one senior PHP developer. I've been able to find work around here pretty easily for the last several years, and have always had the privilege of competing offers once I seriously start looking for work. YMMV, but I love the scene here. 
Ditto, last time I was looking for a job I had my pick between 3, not to mention all the recruiter spam I get without looking.
There aren't any PHP groups in Weber that I can find. There is a JS group in Ogden that I've gone to. Kinda small, but not bad.
What reasons are there for voting against this?
5-6yrs of projects to show and skills to back it up? Don't say junior, more like mid-level 65k+
About tree fiddy.
Why not jquery? And what is the salary for jr though? 
Nothing less than 45k. jQuery is still good to know, but these days it's not what many shops/companies are pining to use. More nodejs, angular 2+, reactjs, etc. 
Also very curious about this. Such a divisive vote so far (5-4 in favor) tells me there must be something complex here I don't understand.
https://externals.io/message/100844
 Perfect! Exactly what I was looking! Thanks!
Great list, thanks!
Use whatever style you like. PSR-2 is good if you work with a team because a lot of open source projects use it.
Aaaaaand?
Foreveralone?
Tabs FTW!
I challenge you to try to add it to this page: https://en.wikipedia.org/wiki/Lumen, that would be an achievement!
what is goatse ?
Same here. I can tolerate spaces for indent, but Allman is a must for me.
Here are some of my favorites I use in my open source [projects](https://github.com/odan/prisma): Routing, Middleware, PSR-7 HTTP messages - slimphp/slim Sessions - aura/session Dependency Injection with Autowiring - php-di/php-di Template Engine - league/plates Assets Cache - odan/plates-asset-cache Database Query Builder - odan/database Migrations - cakephp/phinx Migrations Generator - odan/phinx-migrations-generator Translations - symfony/translation Logging - monolog/monolog Unit tests - phpunit/phpunit Database tests - sebastianbergmann/dbunit Directory structure - php-pds/skeleton
Shortcode for shortcodes and BBCodes: https://github.com/thunderer/Shortcode :)
Why should we? It's a recommendation, use whichever style works best for your team/project.
I did prefer Allman earlier, but nowadays I'm more comfortable with PSR-2. It's something about too much white space that makes things not as fluent when reading in my opinion.
One disadvantage to the Allman style is the length of your files increases meaning you cannot see as much code on your screen at once compared to K&amp;R/1TBS.
&gt; More nodejs, angular 2+, reactjs, etc. Nope, not Angular 2+, that's also increasingly on everyone shit list now...
your code should be refactored to have methods no more then 25 lines long. Otherwise move some block in the other method. now it fits
You can use whatever you want, but I reserve the right to laugh at the way you format your code. Kidding aside, your biggest issue with this style is that you'll find it hard to collaborate, as the vast majority of people will find it completely foreign to them. I also don't use PSR-2 strictly, as I keep opening braces always on the same line like the Java default style (i.e. even for methods, functions, classes), but that's easier to swallow and read for others (and especially as it's very easy to adjust this in your IDE formatting rules).
You realize brace style doesn't apply just to methods, but also to if branches, loops, switches... ?
I used a Allman style variant as well for decades, however, a few months ago I started to run the php-cs-fixer a couple of times a day or when I had done a lot of code changes. I didn't mind reading PSR-2 but I didn't like writing it. After about 3 or so months I was writing PSR-2 style without a second thought. Not loving it, but not caring either... 
i mean if you have trouble fitting your code for the screen you have no redactor it, no matter what braces you are using
So I have to refactor my code based on my line-spacing, font-size and screen height... I don't think you have your priorities right.
That is the most utterly ridiculous ass-random determination I've heard yet. Please keep that rule stuffed up where you pulled it from. The "methods should be x lines long" bullshit is from an era where most programming was done on 24x80 character consoles and IDEs didn't exist.
Tell it to [Martin Fowler](https://martinfowler.com/bliki/FunctionLength.html), not me
Hello mr. troll, I let you to fuck off
I'm telling it to you because you're repeating it. Martin Fowler can keep preaching irrelevant garbage while he writes in irrelevant languages like Ruby.
Trolling does not mean disagreeing with you.
Martin Fowler suggests shorter functions are better. He's smart enough not to say "25 lines" or any other specific number. Also a rule like this is dependent on language semantics, and the problem to be solved, so the best length would be highly contextual. Say, my typical method will be around 10 lines. Then I'd be writing a parser, and write a method that's 300 lines, and it'd still be quite readable and editable. Hard limits are sometimes useful, say as in Twitter's (formerly) 140 char limit. But it should be understood they're arbitrary, much more a convention than science, and therefore saying things like "your code should be refactored to have methods no more then 25 lines long" so authoritatively, as if you can pull out a peer reviewed paper arriving at this exact number objectively is quite misleading. Especially if the number you're citing is not even an industry norm (like the 80 column rule), it's just some number you personally like.
He's just a well known troll, answering him is a waste of time, no matter what he says. 
He's still correct, whether you like him or not.
It's not about "liking" or being correct. But meh, I am wasting my time explaining obvious things. Dismissed.
Good article. Please create a github account and create a module "Fast mass price update". I'm sure lots of developers will use it.
If anyone's a troll here, it's definitely you.
Hello and welcome to the Internet, newfriend.
[PHPIXIE - THE MODERN COMPONENT BASED PHP FRAMEWORK](https://phpixie.com)
tl;dr: we shouldn't be adding a function specific to one driver to PDO, which is intended to be driver-agnostic
it's already on that page or was this a joke lol
**.git/hooks/pre-commit** (make sure +x is set) ``` #!/bin/bash PHP_CS_FIXER="src/vendor/bin/php-cs-fixer" echo "Running php-cs-fixer on modified files" git status --porcelain | grep -e '^[AM]\(.*\).php$' | cut -c 3- | while read file; do $PHP_CS_FIXER fix --quiet "$file" echo " csfix: $file" git add "$file" done exit 0 ```
Man, I hate coming off as a hater, but I just can't get back into laravel :(. I've been pondering this decision for the past month and there's just a level of hidden stuff that I don't like when using a framework. I've always treated myself as a learner first and a programmer second and when you try to understand laravel through say PHPStorm, you're constantly hitting brickwalls on where shit's defined, methods that don't exist (dynamically called?), etc... and it's like if I use your framework there's a level of understanding I want to have in certain portions of your framework and laravel really makes that difficult for no reason. I shouldn't need to read every 'facade' class you have to understand one portion of your code. My time is precious /endrant
This isn’t exactly anything new....
I use blank lines for semantic separation - with Allman they become invisible (dont' like PSR-2 method/function braces btw).
This is reddit.com, not meetup.com.
bind on your editor tab = 4 spaces. Problem solved 
Having PDO support driver specific stuff would be okay - but not like this. function foo(PDO $db) { $db-&gt;openBlob(); } Is that code correct? Or will it give a 'method does not exist' error? You can't tell - you'd have to look at how the PDO object was created to be able to know if the code is going to work or not. Which defeats the point of using types. I'm actually quite busy at my job, but am drafting an RFC to clean up the existing mess and also make it sane to add new driver specific features with something like: class PDOSQLite extends PDO { public function openBlob(); // Other SQLite specific stuff goes here. } function foo(PDOSQLite $db) { $db-&gt;openBlob(); // method guaranteed to exist if the code gets here. }
The main reason for using code standards is to reduce cognitive load for developers by making code more readable and by easing cooperation. Allman style and PSR-2 are equally readable and capable and easily interchangeable. It doesn't really matter. I'm fascinated that people spend so much time discussing petty and automatable things like indentation and bracket placements, but hardly spend time thinking about the things that actually matter in software development, such as proper application architecture and domain modelling. It's really a type of bikeshedding to me. Just use a commit hook and quit caring.
deployment day in the Matrix
https://packagist.org/explore/popular
The 25 lines rule is a good general rule, but it can't always be applied reasonably.
Within a company, it doesn't matter what standard everyone uses as long as everyone uses it. The thing is though, PSR-2 is *widely* adopted. It makes sense for everyone to adopt it because 90% of libraries and stuff you use these days are going to be using PSR-2. If your team don't have to learn a new standard, the load on them is reduced.
When I read blob I instantly remember that very, very old and unresolved [bug](https://bugs.php.net/bug.php?id=40913).
PDO is already full of driver-specific functions that nobody knows about: http://php.net/manual/en/ref.pdo-sqlite.php http://php.net/manual/en/ref.pdo-pgsql.php Also this is what happens when one screws up their initial architecture. One base interface for all databases? Great. But one class for all databases? Bullshit.
I’m in Chicago and I don’t see any problem here with SLC trying to identify a need to form a meet up group there via Reddit. For me this conversation is interesting as I am scouting cities to relocate to. I am sure there are probably others reading this for the same reason. If you don’t like it, or it isn’t applicable move along.
ok... googled it... busy vomiting my lunch!
It redirects you toward falafel 
When faced with highly dynamic code, interactive debugging (step into / step over / etc.) helps a lot. I'm not defending Laravel's magical bullshit, but just saying.
That's wrong. CQRS doesn't require the Command pattern and the CommandBus patterns. It just means command methods are the responsibility of one object, and queries are the responsibility of another object (or set of objects, if you so wish). I keep seeing this "CQRS needs the Command pattern" meme thrown around and I have no idea where it's coming from. I realize many popular cargo cult implementations of CQRS go for as many buzzwords and pointless boilerplate to justify themselves, but in terms of value, there is a specific set of circumstances that necessitate using the Command Pattern, and basic CQRS is not among them.
Someone fixed it ~4 hours ago, works now.
Bad bot
As usual, a good summary article. Thanks for doing these.
👏
I'm glad you make relocation decisions based on off-topic ad-hoc posts on Reddit. It seems like the sort of thing someone who lives in the US bubble would do.
Sorry to disappoint, I don't make my decision solely based on this information. However, I do take it into account in a weighted system.
It's not necessarily separate objects. At its most basic principle it simply means that a function or method should return a value, or have side effects, but not do both.
You must be fun at parties.
You're describing CQS. And CQRS requires separate objects (which are managed independently).
https://martinfowler.com/bliki/CQRS.html It only requires a clear separations of those responsibilities, such as an interface for commands and another for queries.
A relational database doesn't expose an OOP interface to its APIs, and yet a "view" is a clearly separate entity within its own representation. So what's your point? "If it's not OOP, it may not be two objects, as it may not be even objects"?
I added the relevant text to my previous comment.
Thanks for the relevant text, but I don't think that changes anything. You can definitely mush together two separate interfaces with two separate responsibilities on one object, but that's atypical in an OOP design, and we're talking about this pattern in OOP context, as the other cited patterns are also OOP-related. What you describe is 100% CQS. Even Martin Fowler in the very link you pasted differentiates CQS from CQRS: &gt; The change that CQRS introduces is to split that conceptual model into separate models for update and display, which it refers to as Command and Query respectively following the vocabulary of CommandQuerySeparation. The "separate models" in question may be factored in any number of objects, if we want to stretch this. But the default minimum is two, an awkward atypical not-quite-OOP edge case would be one (in contrast with CQS where one is the default), and more that two is an overkill unless specific reasons exist to introduce the extra objects.
It's not even a good summary. I wonder if you even read those.
I totally agree with you... Did you read the full article? With that sentence, I meant that at that point in the post I had explained all the concepts needed for a full out implementation of CQRS. In the following sentence, just after the one you quoted, I said: &gt; CQRS can be implemented in different ways and up to different levels, maybe only the Command side, or maybe not using a Command Bus. For the sake of completion, this is a diagram that represents how I see a full CQRS implementation:
tkx again man! :)
A "full out" implementation of CQRS requires two objects. Anything further mixes-in concerns which may often go hand-in-hand with CQRS, but are *not* required for "full out" implementation of CQRS. Similarly event-sourcing is very often the cause for someone to do CQRS, and so event-sourcing and CQRS often go together. But event-sourcing is *not* required for CQRS, it's not part of CQRS, CQRS merely enables the later introduction of event-sourcing without API changes. The selection of patterns here is therefore neither a complete picture of typical CQRS systems, nor a minimal representation of what is required to call an architecture CQRS. It's somewhere in-between, however I don't see an objective reason for the particular selection.
Already took a look. This list is really awesome! Thanks
Any more suggestions?
* late static binding * closures * variadics * array unpacking * strict types * return types * scalar parameter types * nullable parameters * nullable return types tl:dr; lotsa stuff.
Oh boy. Umm, get up to date quick on composer and namespacing for one.
These are a good start and then maybe look into some of the most popular frameworks.
It depends on the position actually. They could use PHP 5.3 and want you to dig into their shitcode. Either way I would first investigate of their technology stack if possible, and also on the interview I'd confess that didn't have much exp lately but would pick up.
Well, I wouldn't use commands without a command bus and, if I'm using a command bus, then I'm at least starting to go down the path of CQRS... But again, I also think we don't necessarily need to use commands and a command bus to do CQRS. I opted to explicitly leave out ES (I've talked about it in my previous post) and eventual consistency (will talk about it in my next post) because those are concepts that I consider conceptually separate of CQRS, although they might end up working together. Also, we always should choose how far we need to go but, for that, we need to understand how far we can go, and that means we need to have some understanding of the patterns we can use to implement CQRS. I hope this makes it clear why I've structured the posts like this, and thanks for the feedback, I do appreciate it. :)
hmmmmm i dont really remember 5.1 all that well tbh, but mysql is deprecated, use pdo or mysqli now
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Most Americans are a weighted system.
# From the top of my mind: ## language features - namespaces - traits - closures - late static binding - return types - null coalescence operator - array(1,2,3) can now be written as [1,2,3] - SPL library - password_hash() and password_verify() - the PDO estension on PECL is included by default and recommended to connect to databases - PECL still exist but is not a thing anymore, composer is used to manage dependencies - composer # changes on php.ini - register_globals is false by default and is considered evil to set it to true - magic_quotes_* settings were removed, also considered evil - safe_mode is not a thing anymore and generates a fatal E_CORE_ERROR level error when enabled. - utf8 is the enconding by default and lots more that I probably missed
It seems the spacing can't be altered (hard coded in the vim source), but setting the gutter to the same background as my content pane and the font colour to something more subtle by adding these lines to my .vimrc file has helped a lot: highlight LineNr ctermfg=236 highlight LineNr ctermbg=233 
I think the difference between our interpretation comes down to defining what exactly the model is. For example we have a `UserRepository` with an `UpdatesUser` interface and a `FetchesRecentlyUpdatedUsers` interface. This same instance can be injected via either interface while not exposing the other. By abstracting the implementation with the interfaces we create what is essentially two separate models even though they share the same class.
First, have a look at the PHP change log. Second, have a look at the Composer ecosystem. But to be fair, when I'm interviewing someone, I don't really care too much about language specifics. They are easy to learn. I mainly care about deeper skills, such as their understanding of architecture models, their understanding of design patterns, their cooperative skills, and their workflows. 
What version are people using now? Is 5.6 legacy and 7.1 modern like Python2 vs Python3?
And debuggers. Use them.
There is no such thing in PHP like Python2 vs Python3. 7.1 is 99% compatible with 5.6, given you were smart enough to pay attention to deprecation warnings. It's impossible to answer "What version are people using now" - people are using anything they are stuck with, from 5.2 to 7.2. But 5.6 is near to its EOL
Uugh, I hate 5.3. I'm forced to do stuff on an ancient Centos5 box.
How much time do you have? If not a lot, you should probably just show that you understand OOP with Python.
No. This is how I do it: https://github.com/laravel/framework/blob/b74afbf25b8f2c2dfcc60994a932c81fa7a7ba1a/src/Illuminate/Foundation/Auth/AuthenticatesUsers.php
Password hashing is much easier with built-in functions now. 
So the job offer was for a php job. ? What kind of job offer is that? In general job offers usually include some shinny buzzwords like Laravel, VueJS, SPA, AWS, redis, mongodb and something like to develop another CRM, CMS, for x company.? No? If not, then looks like that people doesn't have a clue about what they need so you will be fine, just relax and try to appear confident 
Care to elaborate? We are currently using it on 5 platforms and it is a godsent for us, because of its simplicity and performance with large SPAs.
I tend to have everything one tab in other than the opening PHP tag as well. I personally find it a bit easier on the eyes when there's that gap between the gutter / like number and the code. When inserting bulk // comments before each line it also doesn't interrupt the alignment when using the IDE and.... tabs. 
Get over to laracasts and watch their php videos, they are very short so you don't get bored easily., should bring you up to speed. They cover most of composer and what else you need to know
You are probably good, you can get up to date on the job. As many told you, learn composer too. 
Obligatory http://www.phptherightway.com/
pretend you never met mysql_* functions
haha yeah right. /r/php is toxic as fuck
TL;DR - paragonie/halite does for libsodium what [defuse/php-encryption](https://github.com/defuse/php-encryption) did to mcrypt/openssl In no particular order, Halite... * Prevents developers from accidentally using a password as a cryptography key. * Prevents keys and plaintext from being leaked in stack traces if an exception occurs. * Doesn't require you to even know what a `nonce` is. It handles all of the complexity of authenticated encryption for you. Encrypting with Halite looks something like this: &lt;?php use ParagonIE\Halite\KeyFactory; use ParagonIE\Halite\Symmetric\Crypto; $key = KeyFactory::generateEncryptionKey(); // Or load it from a file, or derive it from a password and salt, etc. $ciphertext = Crypto::encrypt( new HiddenString('This is my test message'), $key ); var_dump(is_string($ciphertext)); // bool(true) By releasing it under MPL, we can ensure derivatives of our code is copyleft-protected *without* placing undue restrictions on open source projects that want to use Halite. (We also considered LGPL and decided that MPL was less painful, and if we were going to switch from GPL, we might as well not half-ass it.)
And 7.0 ending it's active support next month that.
Obligatory http://www.phpthewrongway.com/
[YOU DON'T SAY?](http://i0.kym-cdn.com/photos/images/original/001/287/128/b31)
I thought register globals was removed?
I used to indent like that, bugged the hell out of me when I made the switch but it wasn't long before I was used to it.
[Ahem](https://www.reddit.com/r/PHP/comments/77c2d4/rfc_vote_implement_openblob_feature_in_pdo_sqlite/dol37vb/).
4 collaborators 27 total issues 7 total pull requests 49 commits 846 total stars Nothing suspicious here.
Figure out what framework they might be using. Laravel is being used a lot and the guiderails that it provides, keeps php programmers on track, and is what some managers like to see. Also, familiarize yourself with thr various PSR specs. Autoloaded is widely used with namespaces. Finally, i believe its important to understand nginix, as its surpassing apache now.
Composer. This waa mentioned by someone else, know this and how packages are maintained on a deployed system. Also git.. know how to checkout, commit and push.
Is there any reason to actually use HHVM these days? PHP7 has similar perf and is not going to diverge from the actual PHP language.
yes, you are right, I will edit my reply, thanks
Thank you Scott for your tireless efforts in this field of work. It's greatly appreciated.
&gt; also, PHP 6.0.x was skipped I always thought that was odd :D
&gt; It definitely doesn't "add" anything, apart from file bloat. So why do I do it? I think it comes from my default editor being vim and wanting to keep the code an extra margin away from the gutter line numbers. I was adding extra blank lines all over the place, because Eclipse wouldn't allow me to set a more readable line-spacing. The correct solution was "switch to a decent editor that allows you to set line-spacing". So, same advice here. Not to mention that a vim user has 10x more reasons to switch away.
I agree that the magic makes it hard to know where the source code is. There is a trick to debug facades: dump(Facade::getFacadeRoot()); // Facade being Mail, DB, or any other dd(get_class_methods(Facade::getFacadeRoot())); You can also see the list of corresponding classes for each facade here: https://laravel.com/docs/5.5/facades#facade-class-reference
and thanks to your quote now I just noticed that I wrote 6.0.* and it should be 6.*, because there was no 6.1, 6.2... etc
That's actually hilarious! 
If you like Symfony, you might pick one from Shopsys, Spryker or Sylius. Here with light code quality intro: https://www.tomasvotruba.cz/blog/2017/10/02/easy-coding-standard-and-phpstan-meet-3-symfony-ecommerce-projects/
The 6.0 that was proposed a while ago had problems with Unicode implementation so they decided to make it 5.3 instead. In a way you can think that 5.3 = 6.0, 5.4 = 6.1, 5.5 = 6.2 and 5.6 = 6.3.
Mostly for fun.
I've been a dev for 12 years and still don't know anyone that I work with or in my community that does anything much different or even uses 7. I'm not bragging, I just wonder what kind of orgs out there are using the latest stuff. 
For what it’s worth I’ve landed 3 “junior” jobs in Seattle with basically same skill set all paying $80K+. I don’t want a “senior” role cause I run my own side gig and don’t need the responsibility of making architecture decisions or managing other devs. I plan to be “junior” for a looooong time.
Can you clarify, do you mean a forum to get info about PHP *or* a PHP forum for you to install and manage?
I would like to point out some disadvantages I see in using this library. 1. About mapping private props: When I have private props, I as a developer expect that I can just change the internal structure of this class without affecting anything outside. This is not the case here. 2. Especially when you are working in a bigger team, it is necessary to write easy understandable code. But here you kind of hide the mapping logic into some configurations. This makes it harder to understand and debug the code. 3. You are using ReflectionClass which is generally slow. When you use those mappings a lot, it slows down your applications performance. So I prefer to just have simple Factory/Converter classes where you clearly define the mapping from class A to B. This is more understandable and more performant.
&gt; share the same class. But your client class uses different interfaces and from this point of view it requires different objects. Yes, you can implement two interfaces in one class (ISP) and this makes sence if you are using same persistence layer for read/write operations. BUT! Repository is part of your infrastructure and only interfaces are part of model. So, again. There are two different objects of different types (from model point of view).
command bus only makes sense if you need async command handing (via workers for example). I think proof from Greg Young about command/query buss madness would be nice: http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/
That's what our argument stems from. I'm coining "object" as the literal class instance which does implement both interfaces rather than just what has been exposed by the interface.
Same skill sets as I am? How long ago was this?
2013 (company got bought out; laid off) 2014 (company went bankrupt lol) 2016 (large well-funded nonprofit; still there)
my class definitions tend to be flush against the gutter, but their contents are indented.
Yep, and we coining "objects" as something with which we are collaborating. And since we are collaborating via interfaces and we don't really care how this objects are implemented, this pretty much two different objects. p.s. OOP is not about objects/classes but more amount collaboration, messages between objects.
I work for a large global travel company and we are exclusively using 7.0 on all our servers and new projects are being developed against 7.1 :) Which is a nice change from a lot of my previous employers
What feature do you use from PHP7?
Or, you know, one can not use facades. It's ironic for /u/SaltTM/ to be complaining about the difficulty of using an entirely optional feature. Sure, docs encourage the wrong thing, but they're still optional.
Mostly: * Catching Multiple Exception Types * Nullable types * Return type declarations * Scalar type hints * Null coalescing operator * Spaceship operator It's nothing major but let's develop cleaner code then if we weren't
What's funny is that Reddit reports 18 comments, but I only see you &amp; me here. I guess I have blocked some of the right people. ;-)
I don't mind using SQLITE for local development, but I would never dare to run it in production. That's just asking for trouble
Yah, I'm familiar with nginx, Apache, git, all the general web dev stuff except really cloud deployment, I've been working with node/js and django/python, just left PHP behind in the dust because I'm honestly not a huge fan (compared to JS and Python), but hey, I'll go where the money takes me. When I left PHP, I was using Symfony, which looks like Laravel is based off, so I should have a pretty easy time.
ooh no how could you do that, indent in after &lt;?php, it's a tag and the next line is inside that tag so indent it!
I'm on my phone, so I will be terse. First, enjoy it mate. If the company is professional, you will have a great time and have opportunities to take on and learn (and by your effort, succeed). Ask questions, stay proactive in learning, take on tasks you can both handle and must learn in order to accomplish, and be confident in your abilities. You earned this job, so you've the skills. Now it's time to start learning in order to graduate beyond the Jr. position. While on your journey, explore all there is to and stay interested in learning and expanding your capabilities. Development is fun. If you think so too, embrace the play you can do at work. Congrats man, all the best.
Oh, good, now there's only 2 built in mysql libs instead of three? I'm beginning to remember why I stopped using PHP..
PDO rocks honestly, I’m pretty happy with it. Build an ORM for your app and you’re golden.
Test first, always. Triple your estimates. Master Docker and the shell UI. Learn vim.
Shut the fuck up and listen. Took me a few years to learn that. Check the docs: often there is usually a function that does whatever clever thing you're trying to do. This will reduce your WTF'S per line ratio. Learn git. And learn it well.
File 1: Bird.php &lt;?php class Bird { public function tweet() { return 'Default tweet.'; } } -- File 2: Crow.php &lt;?php require_once 'Bird.php'; class Crow extends Bird { public function tweet() { return 'Caw'; } } -- File 3: test.php &lt;?php require_once 'Crow.php'; $bird = new Crow; echo $bird-&gt;tweet();
Don't think their choice is always the right one. They make mistakes too. 
checking history book to see if I was born at that time... TBH, you're pretty much writing a different language at that time. Though, you'd be fine with good OOP python experience.
&gt; Should I always have to include the parent You could implement [spl_autoload_register](http://php.net/manual/en/language.oop5.autoload.php)
Every best practice you've learned and every expectation you have about how code makes it into production is probably not going to matter. Sometimes, things just have to go live.
I tell this to any new PHP dev. EVERY company, I don't care how good, has that portion of the code base that is absolutely terrible. The one no one wants to touch. Maybe written by a former employee that was let go for poor performance, or the CEOs brother, or is just really old and outdated but is so complex no one wants to rewrite it. Either way, expect it. Don't bitch about it. Offer insightful ways to help tackle making it better, but always stay constructive about it. Also, in my experience, a LOT of php devs are not any kind of sysadmin. They have basic command line experience, but can't debug an entire system (figuring out what's wrong with mysql, docker, apache, whatever you're using). This has helped separate me at my company. Never be afraid to learn the system outside your comfort zones, and ALWAYS try and figure it out yourself. Even if in a time crunch, ask someone else and while they're working on it don't just sit back. Don't interfere, just google and check things, but try and figure it out yourself to learn
Two things: 1. Have code to show and why you are excited about the code. 2. If you don't get the job, reply to their email asking where you can improve your skills and if they have any other advice for you. #2 will be better than any advice you can get on here.
Dats some perty code there.
Oh I know about OOP, I was a Java developer for a few years.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I'm not familiar with PHP assertions, but I know that when i've used Java, I only used assertions in unit tests. Check out unit testing. IMHO you should always use asserts in a unit test when validating the state of your unit test.
Yep, when scheduling and budget give me the flexibility to unit test I always do. The one thing that I'm lacking in that toolset though is a good continuous integration workflow. Do I have a robust set of unit tests? Sure do. Do I actually run them before merging to master and putting new code in production. Almost never. Which seems like it defeats the purpose. [So here is the PHP docs for assert](https://gist.github.com/reichwebconsulting/cc7331d8ac4c5896c85154d9b0700091) assert() is a little bit different from a unit test. But similar. PHP 7 assertions are *like* unit test assertions, in that they test some test and pass/fail based on the result. But they go inline with your code, rather than run external test suites. And they behave differently based on your PHP configuration. On your dev environment, you would configure php.ini to enable assertions. When your code encounters an assertion it will execute the boolean expression that you've passed to it, and if that expression does not resolve to true, it will through an AssertionError and halt your code. In production, you would leave assertions disabled in your PHP.ini. PHP will ignore the assertions during compilation. So in a production run you're assertions don't execute, which means a) you're production code runs more efficiently because it's not executing assertions that only matter during development, but b) you can't use assertions to validate input. [So here's an example of how I'm using assert() that I just tossed up in a gist(https://gist.github.com/reichwebconsulting/cc7331d8ac4c5896c85154d9b0700091) The problem is that I don't know if I'm using them appropriately because I've never seen them used outside of the php.net docs, and it doesn't seem to be a popular topic to cover out in the developer community. THe first class in the gist is Status.php. It's basically the PHP equivalent of an Enum, plus a method that takes an input and verifies that the input is equal to one of the constant values in the class (a workaround to the fact that PHP doesn't have the concept of "Enum".) But that method is expensive because it has to use Reflection to generate a key/value list of the class' constants. In StatusUpdateMessage in setOldStatus() and setNewStatus() I'm using an assert() to call Status::isValid() in order to verify that the status being set is a status that is valid within this particular system. The reason that I think assert() is correct in this situation is because "status" is not a value that will be generated based on user input. So i t feels appropriate to use an assert() to check the value during development, but let the compiler ignore the check in production. On the other hand if user input affected the value being passed to either method, assert() would be the wrong solution and an if() that handles bad input would be appropriate instead. That's all assuming I have a proper understanding of how assert() works :)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Your right. 25 is way too long.
I'd say it is more than just a rule of thumb. I'm open to the possibility there could be a method more than 25 lines that should not be refactored, but I am highly skeptical. Most of the time 25 lines is way too long, and it would normally be ridiculous not to think a method that long should be refactored.
When you write code, try to predict what it does before you run it. This will help you understand what you're doing so it doesn't end up being a bunch of guess work. Don't be afraid to ask questions. Be the person whom people enjoy working with (i.e. don't be dick). 
Pick up a copy of Modern PHP, and head over to http://phptherightway.com to get up to speed on modern PHP development. The biggest change is namespaces and PSR-0/PSR-4 autoloading standards, usually in conjunction with Composer's autoloader. If you're still writing `require` statements to import classes, you're doing it wrong.
Obligatory [response to PHP The Wrong Way](https://medium.com/@jon.lemaitre/a-response-to-php-the-wrong-way-fe7bb253e295)
You're good at this. Thank you. 
What i read is that you admit your CI workflow is lacking, and then you go on how to use `assert()` to mitigate this. Dont do that. If you need to fix you integration, please do so. Its not a method that replaces the good practices of your unit test ecosystem. Im not really sure what that assert in your example is supposed to do. If it can happen then you should handle it. You can make a unit test to show you handle it correctly. If it cant happen unless there is a developer error, throw an exception. Im not really sure what assert helps here. But even if there is a good usecase, you have a different problem at this stage: your intergration. Dont use assert as a fix all hammer ;)
5.6 is not EOL, it's in security fixes only. http://php.net/supported-versions.php
They converted the codebase to use UTF-16 strings internally, a massive project. Then midway the conversion came to the conclusion that it wasn't a good idea after all, so they abandoned the whole branch and went back to the PHP 5.2 codebase and iterated on that with 5.3, 5.4, etc... It's a good thing it didn't happen, because now UTF-8 is the default approach, and it is technically superior to UTF-16 (self-synchronizing, lower average memory requirements, ...) as well as being the standard for the browser client and most databases.
&gt; Shut the fuck up and listen. Pretty much this. While young guns should experiment and make their own mistakes, there is likely one person that did them all. 
Agree on the listening first part. Whenever you think you know better and want to tell everyone off, you should imagine PHP Ygritte standing next to you saying "you know nothing RiverwoodHero".
I personaly heared about a company bringing up a self learning AI in PHP, but i cant remember the company's name ...
Gourd grief!
Yup I discovered this in the discussion, it sucks. I'll be looking at fixing this is the vote goes through, but if it fails I will just give up on contributing to PHP, I don't have a lot of free time, can't afford to spend it on useless stuff.
To kill a cookie for a domain you have to set it from that domain. I don't get your problem though. Well some users still have old session cookies associated with the old domain. So what?
You missed PHP 6.
Thank you, you are right
3. Read the post again, and see OP has the job already. 
Learning is key. Don’t be afraid to spend work time learning something. Even discuss with your line manager what online course you could be following, or what time to dedicate to your skill development. This industry doesn't have accredited CPD (continued professional development), but that doesn't mean we shouldn't do it casually. 
haha misread.
Assuming the old session cookie is interfering with your site, and you're using PHP sessions, I think the easiest way to deal with it would be to use a different [session_name](http://php.net/session_name) for the new site. (This will obviously cause all users of the new site to have to log in again too)
&gt; Learn git. And learn it well. There's been a couple of times where work was accidentally deleted, but statefully recoverable because it was "staged" before it was deleted &amp; thus buried away inside git somewhere.
I work with two companies, one is a large reservation system for the recreation sector. We've migrated to 7.0 when it became stable. We haven't looked at 7.1 or 7.2 yet though :( The other company deals with WordPress websites for small to mid-sized companies. We've been using PHP7 as soon as it became available on our hosting platform. Return type declarations, type hints and the null coalescing operator are _so_ nice to have!
thanks, i'll have a read :)
are you sure you're applying for the right job?
variadic functions is a pretty big one also imo
Because it's not written in a language I can handle. That means: I can not change it's working, nor can I provide improvements.
I saw that.....but I don't think that having crap in PHP is a good argument for adding more crap.
&gt; Laravel vs Symfony ... I'm just in my early 20s ... There is always a positive vibe ... Grow.Thicker.Skin. People get religious about what brand of cereals they eat yet you expect them not to behave this way about the actual tools they use for work? Add to that the fact that most of these people are up and coming kids with too much free time on their hands trying to stand out. People have always been like this and will always be like this. It's extremely naive of you to expect otherwise and try to aim for "niceness" rather than learning how to filter through the bullshit that will forever exist in this world. It's essentially the same thing in almost any community of size. In fact, there is both a financial as well as social incentives to act this way within any given hierarchy. By ridiculing something you are in some sense elevating your own stance and hence you get both positive social feedback as well as financial gains. &gt; I'm pretty sure senior devs here would agree with me. No not really. Some frameworks are objectively shit depending on how you measure them. Here is my tip to you: No one worth their salt would waste their time arguing on twitter about Laravel vs Symfony unless they personally enjoy the argument for the sake of it. For them it is one of two things, either a) entertainment or B) they really mean it. Regardless of which it is, do yourself a favor and focus on bettering yourself and ignore this noise than means fuck all in the grand scheme of things.
https://en.wikipedia.org/wiki/Thesis,_antithesis,_synthesis
Just to get the terms straight, "session cookies" are special type of cookies that expires when users close their browser. It'd be quite pointlessly to try and erase those. You have probably set "permanent cookies" with a specific expiration time. As others say, you need to control the old domain to delete cookies on it. Do you?
What I hate from Brazil is that every job that I find wants a Senior 5+ years of experience and I'm not confident enough to try, because I only have certain experience with Android and Laravel and by certain I mean 1 year more or less with both. I really wanted get involved in some project with mentoring, my University is very good, but real world is another thing.
Think about what you are doing and then ask questions if you're not sure. Speaking as a senior dev, when I'm working with juniors I don't expect them to write clean code, but I do expect them to have at least though a little about what they're doing and either: i) Have a reason for writing the code like they did ii) Been not sure the best way and asked for help, or at least left a note of something needs be reviewed. The only time I am disappointed with juniors is when I ask why they've done (or not done) something in a particular way and their only response is "lol, dunno". Also, always be reading books - starting with this one: https://www.amazon.co.uk/Pragmatic-Programmer-Andrew-Hunt/dp/020161622X 
I can tell you're a good programmer with that level of attention to detail.
I'm french, so I kinda feel like I should know, but what is your point ? That I should apply it on my answer, or that it's a pity so many people live by it, or ...
Not really a feature per-se but a massive performance increase.
I always use assert() in mode "exception" where it throws AssertError on failing assertion. The other modes don't make much sense, and the fact the default is "warn and continue" is a bit unfortunate. In error-throwing mode it's more clear when to use runtime checks and when to use assertions: your production code shouldn't be throwing Error, and you wouldn't be catching Error (except maybe to show error screen, log, and re-throw). Think of assertions as augmenting the type system of PHP, running the kind of checks that would *very high certainty* be developer errors. Now you're right, that's not easy to define in practice, because the decisions are highly contextual. But it's also why answering your question is quite hard, as we lack context.
Why is Docker so popular? At least around here on /r/php? I've been using vagrant for the past year and a half and I've never had issues doing development on it. Can't really wrap my head around the benefits of docker. Is it going to become a fad that people will abandon in a few years or is it here to stay?
&gt; It's ironic for /u/SaltTM/ to be complaining about the difficulty of using an entirely optional feature. lol I'm not complaining about using an _entirely optional feature_, I'm complaining about how a lot of laravel is wrapped around magic methods and I can't easily goto definitions when I want to learn about something I don't understand which I clearly stated in my original post. What's ironic is you saying `I'm not defending Laravel's magical bullshit` in your other response, but in this response you're completely defending the magical bullshit by calling a majority of laravel's functionality 'optional' heh
The practice has changed somewhat. Session cookies are the same as persistent, in Chrome and Firefox at least. See https://bugs.chromium.org/p/chromium/issues/detail?id=128513#c28 (from 2012).
No, overall I'm very much not defending Laravel's magical bullshit, and I proposed that you can ease your pain through interactive debugging. But as you mentioned facades *specifically*, I'm remarking on facades *specifically* not something one has to complain about, as they're optional. I realize that's a subset of the "going crazy with __call() and friends" situations in Laravel. It's a wild ride through a maze of bad code.
You'll find that most people do __not__ indent after the opening `&lt;?php` tag nowadays - as PSR-2 is so prevalent. I used to indent, much the same as you do. But as I dropped the closing `?&gt;` tags on my php files, and moved more to _industry standard_ practises - I dropped the tag indent. Personally, I just prefer to follow whatever company standard I work with. As long as the coding style is documented, I'll follow it.
Frameworks don't offer real benefit there. You can achieve that with your own framework. This is more a code reusability issue. That is an issue with not writing code that can be used in a library easily or that is not well structured and organised. A lack of appropriate separation is on the programmer. Unless you can create additional portability on top of your framework then you're just facing the same problem on a per project basis. Still if frameworks got things right that might be a reliable benefit but many don't and you just import a weak foundation across all projects. many don't not inly because of bad coding but because of hard limits on the ability to anticipate real requirements. I have seen popular frameworks quickly go down where they neglect crucial things needed for modular interoperability. A lot of them intend to sway the programmer into writing reusable code but fail either because of oversights or because a programmer can either write reusable code or not, its not a problem in a framework's domain. Peer pressure force their use, as opposed to technical considerations. That isn't quite as bad though as the phenomena of idolising a framework. If you are stuck with on fair enough. Assuming it solves all your problems and is flawless is something else. I agree the the principle and ideal of having good solid foundations but in practice it is very rarely achieved in anything more than name.
Absolutely agreed. If we're not learning in this industry, then we're severely stagnating and not investing in future, higher positions. Chances are no one can be a junior developer in their 50s if they started in their 20s. We've got to keep learning. But that's why I love this industry, because people love being in it.
Thanks for the explanation! I guess my interpretation of how they are supposed to be used wasn't so far off after all. And I'm in total agreement about using Exception mode. When I read the docs I couldn't really see a case for using them any other way. On one of the few blog I could find about assert() there was some complaint about the fact that you have to edit php.ini to enable/configure them. Any feelings about that? My feeling is that if they really should only be used in development, then making the developer take explicit action to turn them on seems smart.
Bruh 5.1 came out 11 years ago
Well they aren't the same as session cookies have no fixed expiration time, and persistent ones do. You're right the various "restore session" and "continue where I left off" features blur the boundaries, although they shouldn't.
Ok sorry, just different terminology.
Very true about my workflow. Any thoughts on what to use to resolve that? I'm using all the separate pieces (PHPUnit, PHPCS, PHPDoc, etc.) but I haven't found the glue that best fits everything together. So explain the point of the assertions in the gist I linked. Based on what I read I was using assert as a development-time tool, which seems to be precisely its use-case. Where I used it, I used it test the accuracy of inputs. For example if my method requires a string in a list of expected values (the Status example), type hinting my method definition will not get me far enough. I need to perform some validation. But based the fact that I'm "faking" enumeration by utilizing Reflection, that validation operation is kind of expensive. So I don't necessarily want to call often. To give the code some context: it's part of a worker process that processes jobs from an AMQP queue that's filled by an API (separate C# project). This method never sees user input. Every time it's called, it's called by me, with inputs controlled by me. In other words I'm using assert to make sure that I'm not breaking a contract with myself. If a workload in the queue has a bad value for one of these parameters it's because *I put it there.* If I've done my job right, writing runtime code to perform the test would be a waste both of my time, and of processing resources in production. And I agree: assert() does not replace unit testing, but don't you think it can augment your unit testing? For example: if I were to handle this case with with runtime code I would end up writing a cookie-cutter if block: if(Status::isValid($oldStatus)) { throw new InvalidArgumentException("$oldStatus is not a valid status code"); } Once again isValid() isn't as simple as it looks, and I don't want to execute it if I don't have to. Second, If I've done my job write everywhere else, the body of that if() statement is dead code. Third, if I want to make sure that it behaves anyway, I need to write a contrived unit test that passes an input which setOldStatus() will never actually receive that and use @expectedException to catch it. Or, I can scrap all that and let assert() do the work. If I've screwed up and passed a bad value to setOldException(), so long as I have tests that hit whatever calls setOldException(), assert() is going to throw an Exception during test execution and let me know I screwed up. This is all based on the fact that this is code that does not receive user input. If that were not the case or there was potential for that to change, I would go the traditional input validation route.
Just to add some more info here. There are other cases where magic methods are used in Laravel. But the most common cases are Facades and Eloquent. Eloquent works this way: you have a model ExampleModel, when you call a static method in this model that doesn't exist, like ExampleModel::get(), it will create a new instance of this model and call newQuery(), the methods that are specific for Eloquent are on Illuminate\Database\Eloquent\Builder, the methods that are generic to any query are on Illuminate\Database\Query\Builder. You can also do it anytime: dump(get_class_methods(ExampleModel::query())); API for the mentioned classes: * https://laravel.com/api/5.5/Illuminate/Database/Eloquent/Model.html#method_newQuery * https://laravel.com/api/5.5/Illuminate/Database/Eloquent/Builder.html * https://laravel.com/api/5.5/Illuminate/Database/Query/Builder.html
The main thing that's not very noticeable at first is that objects are now passed by *reference* by default, but not in the same way. PHP 5.1: function hello($object) { $object-&gt;one = 'toe'; } $x = new stdClass(); $x-&gt;one = 'three'; hello($x); echo $x-&gt;one; // prints 'three' PHP 5.3 and up: function hello($object) { $object-&gt;one = 'toe'; } $x = new stdClass(); $x-&gt;one = 'three'; hello($x); echo $x-&gt;one; // prints 'toe' Although this is mentioned in passing the Changelog, I'd argue it's the biggest, most paradigm shifting change from PHP as a terrible scripting language into a proper programming language.
Very much this, reading someone's code that they've spent several hours coding and asking why they've made certain decisions (why did you use a loop here, what does this variable name mean?) is incredibly frustrating to get a blank face as it just shows that they either copied and pasted things or changed random things until it worked. Copying and pasting in of itself isn't such a terrible thing, but at least understand the code before trying to put it into production.
It's obviously not mine.
My shop builds against 7 as well. The speed and memory improvements alone justify it.
Solid advice. A good PHP dev will do pretty well. A good PHP dev with some basic sysadmin knowledge will have offers thrown at them left and right.
Yes, but now there are 0 awful MySQL libs instead of 1.
half of these things only in php 7.1
For the next 5 years, everyday you that you come back from office, read, read and read some more. Get the RSS from your favorite news sites. Start following the Programming Superstars, libraries on Twitter. Don't get yourself into a situation where, after 5 years, you switch companies and then you are like WTF! When did people start coding like this?!? Source: Personal experience of watching other devs from MNC's.
once I've posted the digest directly as a text post here on reddit (with no links to the source website) and it was perceived as spam as well. So I doubt which approach is better. But thanks for your feedback!
[removed]
You're not wrong, but, it's difficult to discuss the semantics of pattern implementation without discussing their implementations.
Everyone missed PHP6.
Better performance is definitely a feature in my book.
Nice write up!
Any way to use this to create a JIT parser/processor?
slowmfony
Great list. I was going to say Classes and composer were the top of my list, and PHPStorm. Also PHP Objects, Patterns, and Practice is a great book (new version for PHP 7 finally).
Yeah, and? I've been working in other languages. It's really not hard to swap back and forth between languages. Just trying to figure out what I missed.
Well things are better now, right? They figured out what unicode is?
I see this sometimes. Ctrl + A, Shift+Tab
Apply anyway. Pretty much everywhere sets the bar high to weed out the people who don't think they can do it. My job wanted 5+ years experience and a degree. 3 years experience got me it.
Yeah, definitely keep rocking it. :D
This is an excellent statement. In the ideal world, everybody pulls tasks from the backlog, discusses it in a scrum, updates in a stand-up, does a code review, follows the standard, does testing, merges it into master and deploys it. In reality, the owner of the company comes over with no idea about how long it takes to develop certain features etc. and shouts at you that something should have been ready yesterday and you push to production and hope it goes alright. Not saying this is typical, but the "ideals" don't always apply.
I would give [swagger](https://github.com/zircote/swagger-php) a look. It's easy to read and write. Definitely a good starting point. 
Mind breaking down how this works?
Very cool. I'm a fan. But just so you know... https://core.trac.wordpress.org/ticket/40548
&gt; PECL I think you mean PEAR, PECL is for manage php extensions and PEAR php packages 
These are very valid points, I think you are spot on. When considering this library (or any object mapper), these are the things you will have to give some thought. Your mentioning of performance sparked my curiosity, so I [added a benchmark](https://github.com/mark-gerarts/automapper-plus#similar-libraries) to the readme. There's definitely room for improvement. 
I would suggest to remove the feature of transferring private/protected props directly. But you can search for getter functions instead (If it doesn't exist yet). The function get_class_methods() or method_exists() will help you here. For the public props you can use get_object_vars(). So there is no need for reflections. 
 #!/bin/bash PHP_CS_FIXER="src/vendor/bin/php-cs-fixer" echo "Running php-cs-fixer on modified files" git status --porcelain | grep -e '^[AM]\(.*\).php$' | cut -c 3- | while read file; do $PHP_CS_FIXER fix --quiet "$file" echo " csfix: $file" git add "$file" done exit 0 Defines a location of your cs fixer. Outputs your [`git status` to a scriptable format](https://git-scm.com/docs/git-status#git-status---porcelainltversiongt), runs a regular expression to find the PHP files in that output, and prepares them to be looped upon. Runs your cs fixer in quiet mode on the file, then adds it to your commit index. ---- Adding this as a pre-commit hook means that it'll be run every time you try to invoke `git commit`.
Really? What makes you say that? If I recall, /u/taylorcodes had mentioned that the Laravel website ran on SQLite for quite a while without incident.
yup, we have been using swagger/[open-api](https://www.openapis.org/) for a while now
For a mostly read-only website SQLite is fine. The problem comes in with write-intensive sites. Any writes to a SQLite file requires the entire database to be locked, meaning the server can only process one request at a time. Not to say it couldn't be used, but it does not scale well if you like to do things like log the last time a user was seen online.
You are looking for the word divide: https://dev.mysql.com/doc/refman/5.7/en/arithmetic-functions.html ``` SELECT maks / tun AS division ```
'I'm starting my first Junior PHP Developer role'
And? Thankfully I’m working on a green fields product which means I’m devving against 7.1. Of course the other app only uses those applicable to 7.0 But the biggest benefits for us were the sped and memory improvements
We started with Swagger but after some time we kept YAML format (aka OpenAPI) and feed it to [ReDoc](https://rebilly.github.io/ReDoc/#section/Authentication) instead, it looks much better.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Several people mentioned swagger. An alternative can be [apidoc](http://apidocjs.com/)
Huh, that's actually super interesting. Thanks!
A few years ago I developed an API that a 3rd-party developer was simultaneously developing a mobile app to use. One thing the external devs found *extremely* helpful was that my API documentation included multiple sample requests and responses, including at least one successful response for every API endpoint, and every variety of error response our system was capable of producing, along with a changelog for every update.
I personally use RAML as it has some uses for enterprise software that I work with. It's clean and I enjoy writing it. I'd give it a look. 
Thank you!
We used RAML, then tried Swaggr, now we're on blueprint. Can't say any are significantly better than others. I've always liked a format whch can be auto-generated from your code comments, means it's usually up to date. However we currently develop by contract, meaning we spec the API first, then the front and back end teams develop according to it. Can't do that if the spec is in the code comments as the code isn't there yet. To be honest, I'd prefer to use both. Develop to contract but have the API docs auto generated from the code DSL, but that's a bit more work.
This is some great advice thank you. I'm excited but nervous
After a few months of trying to understand how it works i have managed to make this project which i actually like.I think that the code looks clean.I didn't finish yet, tests need to be written and a better configuration for the database needs to be done.
I'm assuming you want some feedback, other wise why post it. These are in no particular order: - [Don't curse in docs](https://github.com/rarslan/blog-rest/blob/dd206566dd7fbe57145eb789613eee33e96e7d7b/src/Tech387/Models/Mappers/AdminMapper.php#L15) - [Refactor nested catches](https://github.com/rarslan/blog-rest/blob/dd206566dd7fbe57145eb789613eee33e96e7d7b/src/Tech387/Bootstrap/Bootstrap.php#L57) 
I just started a new job as a Linux Engineer (kind of like if sysadmin and development had a baby, all on Linux). I'm nervous too, but I'm having a ball. Hey, you've got us at /r/phphelp, amiright? Together we're stronger seriously. 
**Here's a sneak peek of /r/PHPhelp using the [top posts](https://np.reddit.com/r/PHPhelp/top/?sort=top&amp;t=year) of the year!** \#1: [First time writing OOP can anyone check im on the right track.](https://np.reddit.com/r/PHPhelp/comments/65qzgl/first_time_writing_oop_can_anyone_check_im_on_the/) \#2: [Can someone explain what this php malware does?](https://np.reddit.com/r/PHPhelp/comments/5phn6r/can_someone_explain_what_this_php_malware_does/) \#3: [Tutorial on getting xdebug to work with phpstorm?](https://np.reddit.com/r/PHPhelp/comments/70ho0c/tutorial_on_getting_xdebug_to_work_with_phpstorm/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
&gt; Refactor nested catches hahaha yes well some thing were left over so differently will have to solve that.General taught on the code?
If (somewhatAroused == True) { echo "Awwyeah\n"; } // "Awwyeah"
Swagger here. It takes a bit to get accustomed to but its nice having everything we need in one place. 
Yea, France adopted the Hegelian dialectic into neo-marxism so the root of that kind of logic is strong in France. And it's indeed a pity... My point was, or rather, it's a piece of ancient wisdom that humans will always try to peg two opposites against each other in order to reduce the complexity of a system into 2 categorize-able groups that are relate-able. Good vs Evil, David vs Goliath, Kain vs Able, etc., Because by definition, when you are pro-something you are automatically against its opposite (or at least more so). Your post basically describes that concept and I wanted to just link to the wiki page in order to strengthen your argument by showing whoever reads this next that there is a whole lot of fun stuff you can read about why we humans behave this way. The reason you see a lot of this in modern politics for instance is that Marx and his ideas are based on this Hegelian dialectic where he poses that all conflict stems from group struggle (rich vs poor). Any time you hear a topic boiled down to that kind of logic you should either run for the hills or just accept it as inevitable. Same thing here. Either A) ignore all of this bullshit about frameworks, or B) accept it as part of human nature and cherish it for what it is... us human being stupid and simple minded :X
Use GraphQL instead
Yes pile on, first person to ever misread a title deserves it.
Not worth it. Don't do it.
I'd have to look for something that supports that kind of API, but appear.in is a really simple video conferencing website.
I mean a quick google search pulls up something called VSee and something called OpenTok
could you expand on this a little? I have a proper grasp on c# and only a little rusty with Java so picking up php won't be an issue. so what's the issue with converting html to publisher and powerpoint pages?
It's not about the language, it is about the task. It will take you many many hours to complete, and your client isn't going to pay you your worth for the time you will have to invest.
how many hours do you think it would take to build something like this then? I'm still entering the job market and haven't landed a real job in the year since I graduated. kinda between a rock and a hard. Not having a lot of programming work since graduating seems to just be making this harder and harder.
Unless you can find a library on Google, at least 20 hours for a senior developer.
I've used [Slate](https://github.com/lord/slate) in the past and love it. Here is a demo - [http://lord.github.io/slate/](http://lord.github.io/slate/)
I suggest api blueprint
Check out api-platform.com. It builds out an api playground for you.
Well I linked 1 library and so it would take me what 40 hours then? I'm graduate level I guess. 
Also the guy is a programmer himself he just doesn't have the time to do it himself apparently. 
The library you linked to says you can images, text and shapes. I wouldn't bother trying to convert HTML to PPT. However, if you can use something like phantomJS to convert a web page to an image, than insert image to a slide, that should be doable.
He sent me this "A formatted XML to convert to these is fine. E.g Input something like this &lt;XML&gt;&lt;slide&gt;content of first slide&lt;/slide&gt;&lt;slide&gt;content of second slide&lt;/slide&gt;&lt;/XML&gt; and get a power point generated. Let me know. Cheers :)" so I don't think taking a screen shot of the page to put in would work too well? And I think that's for the publisher part as I told him I don't own a copy of that software. Sorry I haven't tackled anything like this before so I'm at a bit of a loss. He will be sending me one of the web pages soon.
First, just to be clear, phantomJS is a "headless browser" that will interpret the HTML, css, etc and render a complete page image, not screen shot that might be cut off etc. Second, PPT is not that easy to write. Make yourself a simple pptx file and open it in notepad and you'll see it's not that easy. If I were you I would ask him some questions as to what he really needs. You may be misunderstanding his request and he's not asking for what you think he is.
wow thats crazy money. seniors with a ton of experience dont even earn that much in western europe, and lets not even talk about eastern europe
I'm using it but i din't use it in this project.
Which should tell you all you need to know.
he is currently working in a hospital, in my town, and is at the door to being put in a very high position. I don't know why he wants this but he wants it bad enough to pay someone else despite knowing how to program himself.
[Cost of living](https://www.payscale.com/cost-of-living-calculator/Washington-Seattle) here is pretty nuts, though. I’m happy to be employed, don’t get me wrong, but I don’t feel well off. The average salary for *all jobs* here is [close to $70K](https://www.payscale.com/research/US/Location=Seattle-WA/Salary).
The Google analytics example only outputs the analytics code if DNT is turned on...
I use [Blueprint]( https://apiblueprint.org) and verify my implementation with [Dredd](http://dredd.org/en/latest/).
We have suggested appear.in before but it redirects to their site once the conference is in progress which is not what the client wants. Vsee is another one I have suggested as I have done months of research into this but are just not getting anywhere with it.
2015 called, that want their repost back.
Good eye! Thank you for pointing it out to me! I’ve corrected the mistake immediately! Totally my fault when copying it! Much appreciated.
&gt; despite knowing how to program himself Exactly. If this task was quick and easy to get done, he'd do it himself. He's willing to pay someone because it's going to be very tricky and he can be picky with bugs and expect you to fix them ASAP. I've built some integrations from third party applications to Microsoft stack and I wouldn't want to do it again. Since your not looking for career advice but technical advice: it's all just XML. Either you can find a good library that helps you, or look into the spec and generate the XML with a decent XML library. What you absolutely should do is expectation management. Talk to your client about what feature he absolutely needs (h1 titles to some bold, large text is easier than animations, etc.) and make sure that's somehow specified.
Thank you! Is there any reason for -not- using this?
Want more fun? rewrite wordpress in [zephir](https://zephir-lang.com/) and make it a WordPress extension. though, it would require it to be full OOP
If they didn't concretely specify that it cannot be images: Convert the HTML to PDF (e.g. using https://wkhtmltopdf.org/). Then convert the PDF pages to pictures and put those in the powerpoint. Yes, it is dirty. But far less dirty and time consuming than trying to get HTML appearing correctly in Microsoft applications. You may also have luck converting the HTML to DOCX (e.g. using https://www.phpdocx.com/ - requires license), and then converting the DOCX to PPTX using a different library. Good luck on your quest. If you figure out a good solution, please share it. :)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This. Working with a team off app developers, I was the API developer, they got more use out of examples than they did my swagger documentation. I would write e2e tests of my API using Mocha, and just pipe the input/output JSON to a doc.
I seriously do not understand what's hard to learn about Laravel. Docs are clear, plenty of examples and the well-written code explains itself. Symfony's learning curve might be a bit steeper. But come on. None of these frameworks are "hard to learn". 
That's a good point. A lot of my code is legacy non-OOP stuff. As soon as you move to OOP the vast majority of code in most files is indented naturally because it's within a class.
Good luck with that license...
Microsoft: Corporation that loves proprietary formats, that only they can read and write. Open Source Community: Group that loves open formats, that everyone can write. See the problem?
From what I've heard from almost all seniors I've ever worked with. the one thing they do not like at all is junior developers focusing on the "developer" part of their job-description, not the "junior" You gotta be aware that you are there to learn and do stuff the way your boss wants you to do them. If you stay interested, learn on your own and try to soak up everything they are trying to teach you, you'll be golden. If you keep telling them how they should do stuff differently because it's better the way you want to do it, you'll find yourself in trouble fast. 
What a shallow article. I was expecting at least a short walkthrough of the type of errors that PHPStan discovered. Static code analysis always comes up with false positives.
Raml here as well!
The only reason not to use Halite is if you need interoperability with another system that doesn't use Halite (e.g. written in another language). And that's only until a cross-lang port can be written.
Why even show statistics that are not LOC normalized? Absolute numbers are completely meaningless.
`if (array_key_exists(‘HTTP_DNT’, $_SERVER) &amp;&amp; (1 === (int) $_SERVER[‘HTTP_DNT’])) {` Uhh… wow, ok. 
 if ($_SERVER['HTTP_DNT'] ?? false)
I think the intended way is to provide a custom [RepositoryFactory](https://github.com/doctrine/doctrine2/blob/master/lib/Doctrine/ORM/Repository/RepositoryFactory.php) to the [Configuration](https://github.com/doctrine/doctrine2/blob/5f3afa4c4ffb8cb49870d794cc7daf6a49406966/lib/Doctrine/ORM/Configuration.php#L789) that uses your service container to create the repository. Then, the repository that `$em-&gt;getRepository()` and `$container-&gt;get()` create will be the same. To do this, you just have to register it in a compiler pass. I actually wonder why symfony's doctrine bridge doesn't provide such a thing by default.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [doctrine/doctrine2/.../**RepositoryFactory.php** (master → 5f3afa4)](https://github.com/doctrine/doctrine2/blob/5f3afa4c4ffb8cb49870d794cc7daf6a49406966/lib/Doctrine/ORM/Repository/RepositoryFactory.php) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Or: (pre PHP7 days) if (!empty($_SERVER['HTTP_DNT'])) 
Yes, I was joking about PHP6. But I got to admit that PHP7 is awesome! Love it. The PHP core developers are doing a great job. Thank you!
spammy blog is spammy ?
Twilio
Please done encourage people to write code like this. You should be using prepared statements and not be limiting what chars someone can use for a password. Also, your pho and html is all mixed together. I didn’t see if you were echoing any user input, but it could be a source of an XSS attack. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Docker is going to be around for years, definitely learn it. It's super simple to pick up, the tools for deployment around it are great (Kubernetes or ECS/ECR on AWS). I can create a docker compose file with php, nginx, mysql, redis, memcache, elasticsearch, all working together in 30 lines. Containerized solutions are the future. They also work so well with Node, Go, Python and other languages.
What about `select t.foo from myTable t order by Max(char_len(t.foo)) limit 1`?
Probably order by length descending though? `SELECT t.foo FROM myTable t ORDER BY MAX(CHAR_LEN(t.foo)) DESC LIMIT 1;`
&gt; i have managed to make this project which i actually like. That's cute. Been there dozens of times:) 
Not really. Using a custom RepositoryFactory allows you to inject additional constructor dependencies into your repositories. No compiler pass is required to insert your own repository factory. Nothing to do with $em-&gt;getRepository() vs $container-&gt;get(). What the article is trying to do is to avoid having to explicitly define a repository using factory: ['@doctrine.orm.default_entity_manager', getRepository] and passing the entity class as a parameter. Autowire cannot handle something like that. 
&gt; Containerized solutions are the future. Where can I read (or watch) more regarding this future that you speak of?
But then you could just use [autoconfiguration](https://symfony.com/blog/new-in-symfony-3-3-service-autoconfiguration), no? 
Agree hahaha Like i wrote so much code but after some time i hate it.Looks like carp and i cant stand looking at it.But I'm okay with this one, there is still plenty to learn but I'm satisfied in which direction it goes.
&gt; SELECT t.foo FROM myTable t ORDER BY MAX(CHAR_LEN(t.foo)) DESC LIMIT 1; emm like that? SELECT table.name from table table order by max(char_len(table.name)) DESC LIMIT1; :D ? or idk like for me its not working or I did somethings wrong?
Nope. What autoconfiguration (aka autowire) does is to use reflection to examine the type hints of constructor arguments. If autowire determines that there is one and only one instance that matches the type hint then autowire will inject the instance and everything works like magic. But creating an entity repository requires executing $entityManager-&gt;getRepository($entityName). There is no realistic way that autowire can figure this out just from a type hint. Hence the need for manual configuration. The entire article examines how to work around the autowire limitation for doctrine repositories.
Alright, there is a PHP_HELP subreddit and this ISN'T EVEN PHP
okay sorry, idk I writed phpmyadmin reddit and it was first, but sorry I do my post somewhere else.
Next time you have an error, it's recommended that you show us the error or what went wrong. In this case, the cause might be that you didn't put a space between LIMIT and 1.
Which rdbms are you using and what is the exact error message?
Actually, you don't need the MAX at all there, though it'll still work. Just `SELECT t.foo FROM myTable t ORDER_BY CHAR_LEN(t.foo) DESC LIMIT 1`. ORDER BY sorts by char length, and LIMIT 1 takes the first row only, which has to be the largest. The other way to do it is `SELECT MAX(CHAR_LEN(t.foo)) FROM myTable t GROUP BY 1`. MAX is an aggregate function, so it needs to be applied to a group. By default, every row is it's own group, so we add GROUP BY 1 to force everything into the same group. At least I think so - I haven't done aggregate functions in a while, and I don't have mysql handy to test that with.
Hey, I thought about this, that's why there is link to repository in the beggining. https://github.com/TomasVotruba/shopsys-spryker-and-sylius-analysis You're [looking probably for Travis run](https://travis-ci.org/TomasVotruba/shopsys-spryker-and-sylius-analysis). Yet, the post is just raw summary of 3 projects by 2 tools and 10 levels in summary. Having 60 numbers is quite a lot. If it would describe every error in detail, it might be tl;dr; post. But if you're interested in this, I'd love to read a post about that, even it should be only PHPStan lvl 8 on 3 projects error analysis. I might update post later with that. 
&gt; SELECT t.foo FROM myTable t ORDER_BY CHAR_LEN(t.foo) DESC LIMIT 1 Not sure did i did it right but I did like this and got error: #1305 - FUNCTION otthromo_AB.CHAR_LEN does not exist ___ &lt;b&gt;SELECT t.name from TABLE t ORDER BY CHAR_LEN(t.foo) DESC LIMIT 1&lt;/b&gt; 
I was just copying from your SQL, which I think will also fail the same way. [CHAR_LEN is the wrong spelling](https://dev.mysql.com/doc/refman/5.7/en/string-functions.html).
https://resources.codeship.com/hubfs/resources_PDFs/Codeship_Why_Containers_and_Docker_are_the_Future.pdf There are tons of research, tutorials and articles about Docker out there. Amazon, Google, Microsoft and others have taken steps to utilizing and proving this technology. Take a look at: https://blog.codeship.com/using-docker-compose-for-php-development/ Seems so much simpler and lightweight than using Vagrant with Ansible or another stack to provision.
You're right, I figured that out too late when it was almost finished :(. Yet second part of the post includes LOC normalized graph and numbers. Will definitely use in every future analysis. Thanks for highlighting that
oh ty man I changed it CHAR_LENGTH and it worked :)
You're right. Sorry for wasting your time. What I overlooked was that Repositories don't know what entity uses them. And even if we created a factory service that iterated through all ClassMetadata to find out, repositores may be used by multiple entities, so those couldn't be created at all. And we'd be stuck with setter-autowiring because the constructor is fixed. Ugh.
What advantage brings such approach? Do you use it in practise?
I think you can ignore my comment, I understood the problem wrong. I understood it as "How do I inject other services into my repositories" instead of "How do I inject my repositories as services using autowiring".
I think you're thinking about MySQL - phpmyadmin is just an PHP application for easier interfacing with MySQL directly from your browser.
I see, thanks for telling me. Friend of mine understand it another un-inteded way. I see that words like "service + repository + inject" create very subjective ideas person by person.
/r/phphelp However, it's not a PHP related problem.
Try searching on Google for one of the many sites that allow you to upload an image and creates a few different files and the correct head links for them. It will make it easier to create the best icon size and type for different browsers and devices. [favicon generator](https://www.favicon-generator.org/) 
there's a similar problem with mamp. turns out that the config file was specifying an alternative icon path you can ignore it if working locally and worry about it only if you see problems in a live environment 
oh exactly :o
Actually it's for a course project and I need to put it online:(, the icon is not required tho. Locally it's not showing any icon now either after I delete the Xampp icon. I think it should be the default config as you mentioned.
That's not the same.
Why? Facebooks awesome licensing?
Why not just do a favour to all your users and not add tracking at all? It's ridiculous that DNT is off by default - who actively wants to be tracked by various shady internet companies?
oiga peton 
On mobile, so I apologise if I'm missing something, but I don't see anywhere in your code where you're trying to hash a password. However, check [this](http://php.net/manual/en/faq.passwords.php) article out for how to implement hashing in PHP. Sorry if that wasn't helpful. If you have a more specific question, please let me know and I'll try to help out from there.
There is no password hashing in there. If you want to hash then use `password_hash()` . For verifying you use `password_verify()` When saving an user you use `password_hash`. When you want to see if the provided password is correct you need to pull all users with the matching user and run `password_verify` on all of the stored hashes as `password_hash()` produces a different hash every time.
&gt; Very true about my workflow. Any thoughts on what to use to resolve that? I'm using all the separate pieces (PHPUnit, PHPCS, PHPDoc, etc.) but I haven't found the glue that best fits everything together. My solution to this is Makefiles. I take no credit for this idea, see blogs at https://www.previousnext.com.au/blog/makefile-builds-great-again &amp; http://fabien.potencier.org/symfony4-best-practices.html - however, I started using them for a new project I started six months ago, and it's been awesome. I run the entire set of those tests/validations by calling `make verify` verify: phpunit phpcs phpstan phpunit: cd webapp &amp;&amp; vendor/bin/phpunit -c $(CURDIR)/verification/phpunit.xml phpcs: cd verification &amp;&amp; ../webapp/vendor/bin/phpcs phpstan: cd webapp &amp;&amp; vendor/bin/phpstan --level=1 analyse module/ -c ../verification/phpstan.neon The nifty thing about using Makefiles is that I can use the _exact_ same commands on my CI (currently bitbucket pipelines, but would also work with Jenkins, Circle CI, or whatever). FWIW, the Makefile also has a bunch of other commands for install system packages via apt-get, configuring nginx, and so on. I should point out that the directory structure might look a bit odd because I loathe having a root directory full of files, so the webapp, verification configuration files, and so on have their own directories. Most people will just put these in the root.
As others said, use php hash method when user registers on the plain text password and save the hash in the database. When a user later authenticates, grab the hashed password from db and the plain text password supplied from user and use php verify method. You should never store plain text passwords. The hash is one way so you will never display this to user. Essentially, use the tools php natively provides and it is super straightforward. Once auth’d you can simply store that fact in the session and use that on server across multiple requests to decide what the user can see and do. If you are making a single page app with api, look into JWT and avoid session altogether 
Like others have pointed out, use `password_hash` before storing the password in the database and use `password_verify` to check if an entered password is valid to the stored password. Other than that, I would urge you to read through the following to get a better idea on how to go from plain PHP to something with more structure: http://symfony.com/doc/current/create_framework/index.html 
Tracking is useful to understand the behavior of users through your web application, so you can improve it to match its audience. Why “do not track” is off by default, you probably know why. But what’s important to understand is this browser setting has no impact on tracking software on websites. If the owner is not reading out your DNT header, and actively doing something with it, you can set this feature on as much as you want, you’ll still being tracked be all the big companies.
Only if you include advertising and analytics javascript from other websites. There are ways of tracking user behaviour without doing that.
It's been a while since I last used it, but [Sismo](https://sismo.symfony.com/) is a decent solution for single dev projects - single file, easy setup, web interface, supports most tools. Just configure it and execute it as a pre-commit hook in your VCS
True.
The DNT header can be set to "0" which means "yes, do track me please". It can also contain additional whitespace around the "0" or "1". So while you may find the code above verbose, it's actually very correct and very robust.
You made it shorter, but you changed the way it works. If DNT is set to 0 you'll disable tracking (the opposite of user's intent).
It's not the same but it's more correct than checking the header for existence. It can exist and *be set to "do track me"* if it's set to 0.
0 will evaluate to false in that statement.
`"0"` equals `false` in PHP.
One way to downsize it is not using such a big base distro as Ubuntu or Debian. Not sure if Alpine has 7.3 support but their base is a about 5 mb. 
Does Alpine also offer all the libs that you find in Debian?
If it made you wonder why Nginx doesn't support HTTP/2 server push yet here's an [answer](https://stackoverflow.com/a/42565996) I found. 
Depends on what you actually need to run PHP-FPM as a process bind to a port. perhaps check this https://hub.docker.com/r/tommymuehle/docker-alpine-php-nightly/ for inspiration?
Try to make use of the "-slim" images of Debian, they should be smaller in size. You might also want to consider a [multi-stage build](https://docs.docker.com/engine/userguide/eng-image/multistage-build/) to not end up installing all those dev packages in the final container.
multi-stage build sounds like very interesting promising. Never heard about it before. Thanks
Thanks for link. Looks like I gotta spend some more time to get to know Alpine better.
https://github.com/shopware/shopware
Vagrant is awesome for local development, and I have yet to find a superior solution. Docker really shines in production deployments. Assuming a properly provisioned host (or network of hosts) Docker makes it super simple to scale deployments to meet demand on the wing, up or down, and to deploy the right service at the right time. Containers are going everywhere, in part because of how well they align with cloud solutions, and will definitely be worth your time to learn and love. I don't see a fight Docker vs Vagrant, they are both awesome tools for different jobs.
http://uphpu.org is the Lehi group, we meet every third Thursday to talk all things PHP. However I could definitely support a sister-meetup starting in the Salt Lake area.
Some people just like to promote the latest cool thing. They're like social catalysers.
@BurtReynolds, after reading a few your comments... Don't apply :) 
You can have one try with multiple catches: try { code; } catch (Foo $e) { code; } catch (Bar $e) { code; } catch (Baz $e) { code; }
Cool thanks :D Will definitely implement it Can you do a quick code review and suggest some changes?
You can also try [minideb](https://hub.docker.com/r/bitnami/minideb/), it is only 22 MB.
Add PHP's directory to Windows' PATH.
A example pls...
&gt; Then run ´php script.php´ 
The point of pattern is basically "two objects, one for reads and one for writes" and that's it. This allows you to do all other stuff, from two interfaces and one repository on infrastructure level to command/query bus in order to build async distributed system. I don't see any reasons to discuss one or two implementations of CQRS if the idea behind this approach is mixed with tech details. Articles like that harms more than helps. I gave link on Greg Young's article about this topic below.
Where I dowload php directory?
A Path variable in Windows may have multiple directories separeted by semicolons. http://geekswithblogs.net/renso/archive/2009/10/21/how-to-set-the-windows-path-in-windows-7.aspx 
If you are using Windows you can download PHP from windows.php.net
Im asking about where i dowload php directory?
And how I active curl(php) to use on promot?
By editinh php.ini. There should be the curl extension. Enable it. And if the extension directory is not specified you shoul specify the directory of extensions. extension_dir = "C:/php/ext"
Find your php.ini, edit it and uncomment the extension line for curl. I believe it is called php_curl.dll.
Find your php.exe and add the directory it is in to your Windows PATH. 
 C:\php The best place.
Is there any page tracking the changes in 7.3 yet?
&gt; I don't know a lot of PHP &gt; so it would take me what 40 hours then You need to exponentiate the time required, not multiply. As a developer who has been using PHP for a while, I wouldn't touch this one with a ten-foot pole (unless the compensation was really, really good and not time bound to allow for the bugs that will make the last 20% of the project an absolute slog.)
Not exactly, but https://wiki.php.net/rfc#accepted is close
No. It's still master branch. 7.2 hasn't even been released as stable yet and work on 7.3 is still likely about a year out.
Thanks. Not too many exciting things.. was hoping for deprecations that would enable more optimizations and/or make it easier to compile.
Also you could try squashing build. Should reduce size of image however, whole history o build commands is truncated.
https://github.com/php/php-src/blob/master/NEWS
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [php/php-src/.../**NEWS** (master → d5127ce)](https://github.com/php/php-src/blob/d5127cec6ae020a23624a1d4e9da342a33d90cc0/NEWS) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
You need to install curl too or it works out the box?
Please don't call it 7.3 until it is actually released as 7.3.
I hope this isn't against the rules, mods let me know and I will remove this post-haste. I'm a bit over-excited for ZendCon this year, and want a forum on reddit to discuss sessions and follow everything happening. Since I couldn't find a ZendCon sub, I made one. Whether you are in person at the Hard Rock Hotel, or enjoying following along elsewhere, please visit /r/ZendCon and keep us up-to-date on your experience!
"such bets produce no economic value" That's not the point. The original question is "do you think it is really that bad"? The point of doing something to make money is to make money for yourself, not to make the world a better place. It is not "that bad". It is not inherently unethical. Perhaps they will use that money to accomplish something good? If a government chooses to make it illegal because they think it makes their country worse, fine, that is their right. But if it is legal, and you do it, you are not doing something "that bad", you are just making money for yourself. Now if you colluded with someone to make it to where you are the only place someone can buy any domain from, and you jack up the price, that would probably be inherently unethical, even if it was legal.
What makes you say that?
It says so in the article too, but for those who didn't read, note that you need your web server to support http/2 push. This component will only add the HTTP link header that the server has to pickup and push the resource. - https://http2.pro/doc/Apache ✔ - https://http2.pro/doc/nginx ❌
I agree, the last thing we need is another PHP6 situation.
Works ootb. CURL is packaged with PHP afaik - at least I never needed to install it separately to use e. g. Composer.
I think composer use file_get_contents if curl is not installed
I am unsure but I have been told it is causing users to be unable to login to the new site.
Yeah this is desirable, but for whatever reason it is failing to work. Note we are using the Silverstripe CMS so this maybe be affecting things.
Basically, this is a first step to eradicating the following two lines of code from every PHP codebase on the Internet: curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); (They should be set to `true` and `2` respectively.)
&gt;"such bets produce no economic value". That's not the point. The original question is "do you think it is really that bad?" Yes, and I (and others) place a moral judgement on whether a given profit-seeking behaviour has any actual or at least potential beneficial effect on the economy. &gt;But if it is legal, and you do it, you are not doing something "that bad", you are just making money for yourself. And that can be bad if it's being done in a manner that is a detriment to the functioning of the economy for people actually attempting to create new value or otherwise use the resources at hand. See above. 
This changed in 4 to 5, not 5.1 to 5.3 https://3v4l.org/tRq7Z in case you have any doubts.
I love the idea behind this library! I do have some concerns regarding installation, though: &gt; From Composer: &gt; &gt; composer require paragonie/certainty:dev-master &gt; Due to the nature of CA Certificates, you want to use dev-master. If a major CA gets compromised and their certificates are revoked, you don't want to continue trusting these certificates. Unlike NPM (pre whatever version added the lockfile), this will still only result in getting the latest version whenever you manually `composer update` it, which is not typically part of a build and deployment process. In my experience, it usually ends up as "commit whatever version I first installed and never bother touching it again". Maybe some people/companies are good about regularly updating their dependencies, but it's not something I'd rely on. I'd suggest doing something in which the latest bundles are explicitly fetched/checked during a build (`./vendor/bin/get_latest_certs` or `validate_cert_freshness`?), fetched and cached on first use, etc. (I also think Composer will sometimes get cranky at not using a tagged version without some other flag set, but that may be under different circumstances)
The innocence. 
This is really awesome. This seems like a much better solution than falling back to the OS or messing about with INI settings.
&gt; I'd suggest doing something in which the latest bundles are explicitly fetched/checked during a build (./vendor/bin/get_latest_certs or validate_cert_freshness?), fetched and cached on first use, etc. That's a neat feature idea. I'm not 100% sure we want to do any network communications as part of our default process (tends to fail in airgapped staging environments), but that's definitely a use-case I want to support.
With Vagrant you can create a cluster of VM's that can talk to each other [1]. If your database is ver big and you require to have a larger disk for you database VM then you can create that VM with a larger disk [2]. [1] https://www.vagrantup.com/docs/multi-machine/ [2] https://unix.stackexchange.com/questions/176687/set-storage-size-on-creation-of-vm-virtualbox 
Maybe even a simple check of the package version in `composer.lock` against e.g. `https://raw.githubusercontent.com/paragonie/certainty/master/latest.txt` by means of a highly suggested `pre-install-cmd` script could work? I'm sure there's no shortage of approaches that are worth considering, each with their own trade-offs. Avoiding any unnecessary network requests is absolutely a Good Thing, especially any ones that would run from the server running the package (contrasted to the ones doing the build). Hopefully people aren't running `composer install` directly in prod! I've seen all sorts of bizarre deployment setups so I'm happy to bounce ideas around if you'd like.
The big question is what kind of work will you do as a blockchain developer. Today one of the most popular blockchain implementation is ICO (Initial coin offering). There are a couple of platforms that provide an easy way to organize ICO without any deep tech. And there are a couple of successful blockchain projects but not a lot. As I understood blockchain development does not include such big amount of full time work as web (PHP for ex.) because it is mostly based on a big platforms (ex. Ethereum). So, as a blockchain developer you will do either very small amount of work (an adoption of already existed smart contracts) or very big and scientific amount of work (like build your own blockchain as a fork of bitcoin) So, a question is a blockchain development as interesting as web development is still open for me. Be very careful and make your own research before jumping to this new area. 
I'm glad you're asking. In my opinion, there are a couple of kind of projects where you can use the integration with already exiting blockchains like Bitcoin or Ethereum - the ICO, exchange websites, applications to manage your wallets etc. Those applications need to be maintained, developed or somebody will create new ones and in each case, you need to hire developers to do the job. Every business has different requirements and expectations. The intention of this article is to create a quick introduction path for those developers. 
Been reading up on blockhain and contracts the last couple days. Probably at this point the most important thing is to be able to explain to other people how it could be useful. Then do a test setup with a wallet and the tools and try and envision what a full solution using a blockchain would be like, with all its little moving parts. 
I'm not sure whether this is a good idea. How do you automate updates, so PIE doesn't forget about the project? What's the benefit of the additional signature? Where do you get the certificates from? Do you make any additional checks after downloading the certificates from your source that justifies an additional signature? And which certificates in OS stores are known to be broken?
In the next article I would like to explain how to setup full test network for BTC and communicate with BTC's API. The next will be dedicated for ETH. I hope that will meet your expectations. Good point for the 'how it could be useful' - I'll keep it in mind, thank you :) 
&gt; The vendor problem Or use built-in composer integration which does that automatically.. &gt; You might eg. always keep dependencies of vendors excluded, because chances are you won't be using those APIs PHPStorm caches its indexes so it will almost never index things that never change. Sure, it might take 30-50 more seconds to open but it's worth to endure that once or twice per day rather than headache when you need to debug a library that uses another library
Your attitude. To be honest, I think half of people here are wasting time. Most of your questions are answered on googles first page. You're telling us you'll go where money will lead you. Statistically PHP is not good choose (look at this: https://insights.stackoverflow.com/survey/2017#work-salary-and-experience-by-language ). What's more you have started by lollygaging about PHP state on 5.2 Well, try to remember java from ten years ago. I'm pretty sure you'll get job done but I'm not really convinced if you wanna to deal with PHP (strong) community ;) 
Bengali spam.
At Least They Took The Time To Capitalize Every Word In The Title, So You Know It Is An Important Article.
I can probably shed a little extra light on this - there's a lot more potential applications for blockchain tech that I don't think many developers have seen yet. About me - for the past 20 years I've been doing web development, starting with PHP and ColdFusion in the late 90s. Worked for non-profits, IT/consulting, the gaming industry and a tech startup. A little over a year ago I started full time on Blockchain related web development work, specifically blockchains related to content. It started with a statistics dashboard for monitoring account activity and has since sprawled into about a dozen various content system prototypes build on the blockchain. Currently I'm experimenting with a new style of forum software where all the content originates from the blockchain. My main point is this: there's a lot of work for web developers, and I would bet there will only be more in the future. Any system you might build as a web developer, particularly ones that are driven by user generated events, could potentially benefit from using a blockchain at some point in the future. Most of these ideas haven't even been thought through yet and very few have functional prototypes. The tech is rough to work with (cough, php in the 90s), the documentation sucks, the community is tiny - but there's a lot of magic in what's happening and it feels a lot like the internet did in the 90s. As web developers, we need to start thinking about blockchains like we think about database engines. Bitcoin and Ethereum are basically just SQL and MongoDB to someone building an API or front end. You don't just develop SQL, but you use SQL as part of the products you build. That's what these blockchains are - data platforms - global, incorruptible, distributed, permissionless data platforms. It's the first time in history there's been anything like it. As for how to get started, I think the best thing a web developer could do is to build a block explorer. Do it for fun in your spare time and to learn how a blockchain works. Just pick a blockchain (there's no shortage), learn its APIs, and build a website designed to explore the data within it. Share it and engage with that blockchains community, learn, and evolve into whatever crazy future this is leading us towards. 
Some frameworks register callbacks for deferring instantiating/providing services.
Take a look at array_map array_reduce functions since they implement callback functions. 
Yes, there are a lot of valid use cases, but mostly when you make your code modular/pluggable. Imagine a user register form where you have hardcoded its validation callback, but somehow, in one specific custom site, I need the password validation to be stronger: if my form is modular, I could imagine a system where the site builder add its own validation callbacks along the way, without having to modify the framework code. Actually, most event based systems are using callbacks, callables, sometime they use interfaces instead, but in most cases they are just flexible enough to allow the final developer/API user to add callbacks instead (shorter syntax to write, easy to read and understand).
Good article in general but ironically, the text doesn't look very clean itself. I am prone to this stuff myself: trying to emphasize on the important parts, you are making the code look like a Dalmatian and it becomes rather hard to read. Please rein that urge and keep only one emphasizing per section.
I'd be very interested in hearing more about using blockchain for content. I could imagine very simple use cases would be version control for editing, determining "file lock" events with "proof of work" and even smart contracts for workflow. Personally, I've found that looking at simple implementations of a blockchain has increased my understanding of them and potential usecases for them. 
Ah yes, tweaking the JVM heap size settings. How many countless hours I've spent on this placebo, almost feeling like I'm getting somewhere... before I finally figured out I just need to update my hardware. And I did, and PHPStorm ran lightning fast using default settings.
Well, not even objects or OOP as a whole are a must in reality, but - boy - it makes programming so much easier.
I'm on a 2017 MacBook pro, 3,1GHz i5 processor with 16GB RAM. Feel like that's a good enough setup to run an IDE?
I certainly hope it is, my desktop config is not too far off from yours. My laptop is a tiny MacBook Retina with 8GB RAM, and although I don't code much on it, it seems fast. I'm surprised you're experiencing performance issues on your machine, unless you tweak. Maybe I shouldn't update to High Sierra :P?
Something went wonky somewhere. I have a 2009 MacBook that runs PHPStorm fine. 
Glad you're still working on this, some new frameworks popup and disappear.
I think you mean, *PhpStorm*.
&gt; PHPStorm I think you mean, *PhpStorm*.
lol who gives a shit?
for ths such matters, PHP manual is the best book: [References Explained](http://php.net/manual/en/language.references.php) &gt;&gt; [Unsetting References](http://php.net/manual/en/language.references.unset.php)
To be even more passive-aggressive you should have written "PHP programmers".
Thanks! I'll read all of that when I get into the office
It's been a while since I did any work on this, but just incase anyone finds it useful.
Your code is somewhat abstract, non-practical. It's hard to comprehend usefulness of the feature without a real-world example.
/r/iamverysmart/
&gt; How to save a kitten by writing clean code I don't negotiate with terrorists.
In your example the call to `helloName()` is hardcoded, it's not configurable. Sometimes you want to make a sub-routine configurable. To see uses for that, just look at the various APIs in PHP that accept a callback, like usort(). Sorting based on user-supplier criteria is clear enough as a use case, right? In the abstract, it's like asking *what is the point of function arguments in PHP*. Say, why do you have `$name` as an argument in your code? You could certainly remove it and have "abc" directly in either function. But you want it to be configurable, ergo... you made it an argument. Same with functions. 
I don't have this problem any more, when started telling people that their ideas are fucking stupid. Or that I just dont have time.
Thanks. I've been working hard on a new [route matching library](https://github.com/opulencephp/route-matcher), as well as a few other libraries that will also be released in 2.0.
A lot depends on the size of the project and the number of projects open at a given moment, so YMMV with even decent specs (I assume rarely people go below 6GB RAM, SSD, double core processor). At 20k+ php files in one project and multiple projects open at the same time increasing the JVM memory helped in my case considerably.
Background Calling it a callback doesn't do it justice. Functions that take functions as parameters or return functions (aka higher order functions or HOFs) are a core concept of the function programming paradigm. PHP being a multi paradigm language supports this along with procedural and OO construct as well. Benefits By passing functions around you can leave the details of when it's called and what arguments it's given to other components. * Maybe you want to run a function over every value in an array and get the new values in a new array (array_map), * Maybe you only want to call the function if an operation is successful (php-option) * Maybe you want to sort a collection but you only need to write the function that two items and returns which one is (usort) * Maybe I'm writing async PHP and want to run a function after an expensive operation finished then free up the process for other operations (reactphp-mysql) * If I wanted an array of a fixed length containing the same value then I could use a function that returns a function that always returns a value passed into the first function (a const function, typed (a -&gt; (-&gt; a)) ) then map that over an array generated by the range function array_map(const("a"), range(1, 3)) === ["a", "a", "a"] Analogy to OO Passing a function into a another function is similar to passing an object into another object in OO for dependency injection or the strategy pattern. A function that returns a function can be seen as a type of factory. Notes Wherever I say function here I actually mean a php callable, e.g. closures, named functions, methods and invokeable objects. PHP's support for functional programming is quite weak, hopefully with the pipeline operator in the works and partial application as a future goal it may get better.
Guys, his name is Saltub. Baiting troll is baity. 
Every variable in PHP is a reference in a way. You never unset values, you always unset references. The difference is that '&amp;' references are "sticky" and point to the same value, while otherwise the value is copied for each reference when it's modified (unless it's an object, which is copied only if you explicitly use `clone`). So you always unset the variable holding a reference, never the value itself. But you can *set* the value to null, and then both references will point to null.
[Your photo](http://1.gravatar.com/avatar/74be5f48420f720ee164bd2465bf754e?s=200&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D60&amp;r=G) reminds me a bit of [Ben Shapiro](http://media.breitbart.com/media/2016/05/BenShapiroLS-638x330-640x480.jpg), haha.
&gt; How do you automate updates, so PIE doesn't forget about the project? You really don't have to worry about this one happening. Aside from the self-evident reasons of "this was enough of a problem to warrant writing a library on a Sunday afternoon to fix it", this is something we're going to be recommending to some of our clients to use, and thus have an incentive to keep up-to-date. &gt; What's the benefit of the additional signature? To assure the authenticity of the cacert bundles. If someone hacks Github and tries to silently publish a new backdoored bundle, they will require to compromise *us* first in order to steal our signing key. &gt; Where do you get the certificates from? We use https://hg.mozilla.org/releases/mozilla-beta/file/tip/security/nss/lib/ckfw/builtins/certdata.txt + https://curl.haxx.se/docs/mk-ca-bundle.html to verify [the bundles from haxx.se](https://curl.haxx.se/docs/caextract.html), and if everything checks out, use the haxx.se-provided bundles because the sha256sums will be familiar to outside developers. &gt; Do you make any additional checks after downloading the certificates from your source that justifies an additional signature? I'm not sure if "justifies" is the right word to use in a context like this. I don't need to "justify" the decision to include an authenticity check for a list of certificate authorities, because it's not a morally contentious issue. We assure the authenticity so people aren't just blindly trusting each git commit to not include a backdoor without some form of verification, but that isn't a justification, that's an engineering decision. &gt; And which certificates in OS stores are known to be broken? Are you asking "why do people set VERIFY(HOST|PEER) to false?"
I do cryptography and security work for [PIE](https://paragonie.com). In the past two years, questions that fit the formula "We have X problem, **can we use blockchain to solve it**?" have become increasingly common. If we're going to talk about "blockchain", we should also recognize [the profoundly negative social influence of that buzzword](https://tonyarcieri.com/on-the-dangers-of-a-blockchain-monoculture). When we get past that, we should ask ourselves if we [even need a blockchain to solve a given problem](https://paragonie.com/blog/2017/07/chronicle-will-make-you-question-need-for-blockchain-technology) (disclaimer: my writing), and whether or not a proposed solution [is a blockchain or not](https://gist.github.com/joepie91/e49d2bdc9dfec4adc9da8a8434fd029b). Most PHP developers will not touch cryptocurrencies without branching out into another language. Most of them will be perfectly happy with solutions that don't involve proofs of work, Merkle trees, or Koblitz curves.
In my experience SSD was by far the biggest change. Before that opening PhpStorm was unbearable, now I don't think about it at all. Also it got a bit faster and more stable when I upgraded my thinkpad from 8gb to 32gb.
I'll try it out tonight! 
You're not forced to use callbacks when you don't need to, you should never program with the thought of needing to utilize every feature. Callbacks aren't just limited to say php either. What if you wanted to provide a way to reformat the output of your hard coded greeting? You could do it via parameters or a callback. function greet($name, callable $callback = null) { if(isset($callback)) { return $callback($name); } return "Hello, {$name}"; } function helloWorld($name) { echo "Hello World!\n{$name}"; } helloWorld(greet("SaltTM", function($name) { return "{$name}, Welcome!\n"; })); helloWorld(greet("SaltTM")); https://3v4l.org/nTC3t _this is just an example_
&gt; You really don't have to worry about this one happening. Aside from the self-evident reasons of "this was enough of a problem to warrant writing a library on a Sunday afternoon to fix it" Such a library being written on a Sunday afternoon to fix such a problem is nothing that makes be feel confident about the library and updates being delivered. &gt; and thus have an incentive to keep up-to-date. But how do you notice there are updates? Do you follow the Mozilla mailing list? Do you have an automated change check? &gt; If someone hacks Github and tries to silently publish a new backdoored bundle, they will require to compromise us first in order to steal our signing key. If someone hacks GitHub, they can just replace the key used to verify the signature as well. &gt; Are you asking "why do people set VERIFY(HOST|PEER) to false?" No. But people doing that because CA certificates aren't installed properly won't use that new library either.
&gt; If someone hacks GitHub, they can just replace the key used to verify the signature as well. Sure, but that's demonstrably noisier than just adding a file and updating the JSON file. The goal is detection/verifiability, not prevention.
And my name is SaltTM, doesn't really mean much.
Built-in composer integration adds all vendors to the include path. For my setup, it works in smaller projects, but I can feel the impact in bigger projects. I actually often open other projects to view a piece of code, check something out,... Having to wait a minute feels like a while when I'm in the zone. What I find strange is that PHPStorm doesn't remember indices when re-opening a project after say, a day. Always re-indexing on startup.. 
Thanks! I can't wait to have some feedback on this project.
Another argument for callbacks is that it can hide the implementation of `helloWorld()` from whoever is writing the code that calls it. Anything that another programmer needs to know about a function should be provided in its *signature*—the parameters it accepts and the value it returns.
I have a reasonably respectable dev machine (Early 2015 13" rMBP, i7-5557U, 16GB RAM), but PhpStorm still a little too slow on the legacy code base I work on. The editor chugs on massive files that Sublime can edit without issue even when I turn off inspections. Personally I'd like JetBrains to put more effort into eeking out performance from their IDEs.
Unfortunately, Chrome itself still sucks when it comes to handling page breaks properly. Sometimes it flat-out ignores the page-break-inside properly, etc. I had to abandon it in favour of super simple html with dompdf.
Unset removes the reference; it's not the same as setting the value to null. 
&gt; MacBook lol, no
21. Hire a good designer to make your site looks like a site, not as a draft sketched on a napkin
There were some improvements in one of latest EAPs regarding big, complex files. https://blog.jetbrains.com/phpstorm/2017/10/phpstorm-2017-3-eap-173-2941-8/
instead of passing around data, you can pass around functionality
I can critique any language. Nothing's perfect. That's why there are a bazillion different languages. It makes you a better developer if you can realize the shortcomings and pitfalls of a language. Java 10 years ago was what, 1.4? The only real major jump was to 5, right? Introducing generics, autoboxing, annotations and stuff. PHP literally skipped a major version because nobody understood unicode.
Very cool. Hope to ultimately see a better implementation than PHP's LDAP extension, which I think is a total piece of crap. https://github.com/Adldap2/Adldap2 is a pretty great wrapper for it though.
Actually, there is one massive performance improvement coming, which is dead code elimination. It's mentioned here: http://talks.php.net/phpnw17#/dce
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; but I can feel the impact in bigger projects. I don't feel any problems with that. Things like "find usage" works pretty much instantly after I added vendors to exclude and used composer integration. For really large projects (for example in case of using monolith repository for your large distributed application) you could also use scopes.
I didn't try it yet but I must say Craft looks way easier to start with than something like Drupal. Is there also some workflow component available so some editor can create a post and someone else can approve it? And when the editor makes changes the admin can approve those changes again?
you may be solving a different problem, but I find [docopt](https://github.com/docopt/docopt.php) way more friendly. for me, the configuration should define all the options and arguments at top level, and then optionally add any groups and requirements. 
Do scopes have an impact on editing performance? Like the FPS you get when typing and scrolling.
Yeah, I often skim through the text to get a gist of it. Emphasis and headings help a lot with that, unless they are overused as in this case.
Another very interesting question - blockchain is not a cheap solution. Ex. you have to pay ETH in order to run a smart contract. Also it is more difficult (at first non-professional glance) to use blockchain, than a regular centralized servers. Less control. All of this make it more difficult to explain why blockchain is better than “traditional” client-server. 
You have a blog on what you're planning for 2.0?
I think the hard part is competently wrapping one's head around what the blockchain is and what it does. There are a bunch of little moving parts. Actually writing contracts, the coding, is a fairly familiar thing, it appears, define a class with a constructor and your methods. Looks like oop. However, I think having a stronger grasp of what it is actually used for is still the most important thing as a php dev, because php would be the language to build the web interface that remote parties would use at some part of this to manage the process that is determined by the blockchain. Its going to be very important for PHP devs to explain this process to clients and users competently. We have to inspire those people to pay us to make these things for them. 
I don't. I've probably figured out ~60% of the features that will be going in 2.0, but I don't want to give anything away until it's set in stone. What I _cant_ tell you is that 2.0 will bring with it a framework agnsotic route-matching library (linked above), a route dispatching library, automatic serialization/deserialization of DTOs &lt;=&gt; domain models, and a reworked HTTP library. The HTTP library aims to fix what I perceive as the shortcomings of PSR-7's HTTP request/response wrappers. It also fixes some admitted shortcomings of Opulence's current HTTP library.
Any chance you could explain exactly what those JVM options mean?
&gt; What I find strange is that PHPStorm doesn't remember indices when re-opening a project after say, a day. Always re-indexing on startup.. Never had that
This should be no problem with docker. You can simply create virtual networks and connect the containers to it as necessary. As someone who has used vagrant before, I would go with docker now, it's easier to work with, you can build your own containers if needed without too much hassle, and daily operations are just faster. But I'm no expert on docker nor vagrant so your mileage may vary.
https://github.com/paragonie/certainty/pull/6 Early design for a RemoteFetch implementation.
Yeah I've actually been reading about Docker and it seems pretty spot on with what I'll need. Vagrant seems like a lot of overhead for me to do what I'm looking to do. I may run a VM with the containers inside it at some point, but that's another endeavour. Quick question though. I can't seem to really find anything about this (Googled, 'Existing site with Docker', etc.) How do I go about moving current code into a Docker container? My concern here is really about space. Seems like all development needs to be done inside the docker container, but I'd ideally like to keep a copy outside of the container, mainly since I'm going to be new with Docker. The database has very frequent backups, so I can always pull from production for that. The files are another story currently. So TL:DR; Can I "share" my host files with Docker easily for current projects, or what would the typical process of migrating a large legacy code base into Docker? I'm going to look into this when I get home but I figured it's worth asking.
Yeah, I don't have any performance issues on my SSD. I just need a bigger SSD now. Specs: 16GB ram, 960 GPU, i7, 200GB SSD
The best way is still https://www.princexml.com/ (Unfortunately, it is also the most expensive way.) I hope some day these Rube Goldberg contraptions come close, but so far they are not. Side note: mPDF 7.0 has been Released 4 days ago: https://github.com/mpdf/mpdf/releases/tag/v7.0.0 Waiting in the lurch. 
Same. I only experience re-indexing after a PhpStorm update or the first time I open a new project folder.
What? don't you also like to **bold** and **emphasize** random **shit in your posts** too? 
phpds looks like php data structures extension
Here's [a few more](http://php.net/manual/en/ref.array.php) blog post topics for you.
Here's a shameless plug for a [JVM option tweaking guide](https://github.com/FoxxMD/intellij-jvm-options-explained) I wrote for Intellij-based IDEs. It has * A TL;DR copy-paste "good defaults" * Descriptions for many, many jvm options as well as how they affect Intellij-based IDEs * which includes all of the options recommend on intellij's support page
I did the same thing for forever but finally got fed up and wanted to know what the shit I was copy-pasting actually did, if anything. So I did the research and made a [JVM option tweaking guide for Intellij-based IDEs.](https://github.com/FoxxMD/intellij-jvm-options-explained). I already [posted this below](https://alpha.reddit.com/r/PHP/comments/78607c/improving_phpstorms_performance_with_a_few_small/dosa3qk) what's in it but I'll re-hash: * A TL;DR copy-paste "good defaults" * Descriptions for many, many jvm options as well as how they affect Intellij-based IDEs * which includes all of the options recommend on intellij's support page Your default setup is probably fine but if you want to know more its good for reference 👍
&gt; Well, not even objects or OOP as a whole are a must in reality, but - boy - it makes programming so much easier. I actually caught myself thinking once "what would happen if I go back in time and I need to program in PHP3?" Going completely procedural wouldn't be an option for me. I mean, for some code sure (the thing I'd write as static methods even today) but not as an overall frame to architect the application around. So, behold, my "OOP for PHP3" method dispatcher: &lt;?php // The "OOP method dispatch" utility. function call(&amp;$obj, $method, $args = null) { $func = $obj['__vtable__'][$method]; return $func($obj, $args); } // Defining a "class". function Circle($radius) { static $vtable = [ 'getRadius' =&gt; 'Circle_getRadius', 'setRadius' =&gt; 'Circle_setRadius', 'getCircumference' =&gt; 'Circle_getCircumference', ]; return [ '__vtable__' =&gt; $vtable, 'radius' =&gt; $radius, ]; } // Instantiating an "object" and calling "methods". function Circle_getRadius(&amp;$obj) { return $obj['radius']; } function Circle_setRadius(&amp;$obj, $args) { list($radius) = $args; $obj['radius'] = $radius; } function Circle_getCircumference(&amp;$obj) { return 2 * 3.14159265359 * $obj['radius']; } // Usage: $circle = Circle(5); echo call($circle, 'getRadius') . "\n"; // 5 echo call($circle, 'getCircumference') . "\n"; // 31.4159265359 call($circle, 'setRadius', [6]); echo call($circle, 'getRadius') . "\n"; // 6 echo call($circle, 'getCircumference') . "\n"; // 37.69911184308 No typehints and interfaces of course. I'd probably survive. But I'd rather not.
Mine is always re-indexing when I open any project, new or old. I wish I knew why. :(
Curl is an extension. You don't need extensins to fetch content from the web. PHP has build-in function called http://php.net/manual/en/function.file-get-contents.php
Download it and run it...... Just like most programs for Windows.
Username checks out. :D
Looking at that guide, I don't think you know what you're doing. You have multiple, conflicting GC flags. The JVM can only use one.
What about delay? When page after load does some additional requests? I find none of these tools solve that problem properly.
Not the author, but I’d read these as “turn on G1, turn off ParNew, turn off ConcMark” `-XX:+UseG1GC -XX:-UseParNewGC -XX:-UseConcMarkSweepGC`
Basically you add your docker containers to your current workspace. Let's say it currently exists under work/my-project, then I'd usually create a directory "src" and move the project there. Then for every container required I create a directory next to "src". So you might have "nginx", "php" and "mysql" folders. In those, you have a Dockerfile which describe the container. And then in the "my-project" root, I keep a docker-compose.yml file which basically sets up how they all tie together. In that yml file you can then set up volumes, and these will make the project you're working on available inside the containers that need them. Basically you do this for each container that needs your project files: volumes: - ./src:/var/www/ ..which mounts your src folder as /var/www in the container. So you're not as much working "in" the container as what you're doing outside of the container is shared with it. Another approach is to keep your workspace as it is and move everything docker related into "my-project/docker". It's a matter of preference, they both have their ups and downs.
I'll be the first one to admit I don't know too much about the JVM but I tried to source all the info I found (check links in each description). Also some information is better than no information. ¯\\\_(ツ)_/¯ If you see an error or something should that be clarified please do not hesitate to [submit a PR.](https://github.com/FoxxMD/intellij-jvm-options-explained/edit/master/README.md)
Arguments order, is array first or last? Is it blah2blah function or blahtoblah, or maybe blach_to_blach? God knows. Or is it array_map or map_array? Crap like that. If you use something that is actually designed and thought through like Elixir or something, you know that if there is map related function then map is the first argument, always, no exception. Callback? Always last, no exception. 
None of that is ever an issue for me, because I use an IDE. I couldn't imagine coding in any language without an IDE.
I know that, I was asking if you need to install a curl binary in windows to make that extension to work, I don't use Windows, but in Linux I install curl and then php-curl extension 
https://github.com/spatie/browsershot#set-a-network-idle-timeout
If I understand the article correctly it waits for the initial Javascript to do its thing. So there's that. Btw, with wkhtmktopdf you can specify a delay or even fire a custom event to signal the page is ready. 
Still redundant, specifying one implies disabling the others.
Would be nice to see if this doesn't have the same quirks wkhtmktopdf has. 
Well, it's a different rending engine, which is as up to date as the installed version of Chrome. I imagine it's a bit better...
Prince is so good. https://docraptor.com/ makes it a little more affordable, but not by much.
Apart from outdated webkit, I've had issues with not loading external css sheets (some times but not all the times), unpredictable scaling depending on os and x server specific errors. Those are the quirks I'd like to live without. 
symfony is fucking garbage 
Oh shit okay. That makes sense. I found people mentioning that making a directory a docker directory will hide the files currently in it, is that accurate? That's where my concern came from. 
thank you
So many downvote..eww so many mac lover
Sure, you can call a function within a function, but what if you want to allow the inner function to be changed by the outer function? Perhaps in your example, you want people using your code to be able to swap it out with a function that prints Hello in other languages, or logs the Name to the file or database. This might be silly for your own projects, but if you're writing a library, callbacks can add a lot of flexibility and extensiblility.
Guides that actually provide information on what the changes it gives you do, with references and documentation, are always 100% better than just 'Here, use these settings, and magic.' +1
Yes, it's a pitty that a Mac can't just be upgraded like a thinkpad. My gf constantly fights with the 16gb and no space left on the ssd. Though it really makes me appreciate my thinkpad it annoys the hell out of me for her that my 6 years old thnkpad still performs better than her two years old much more expensive mac.
I actually maintain a separate library that's a wrapper around the extension too: https://github.com/ldaptools/ldaptools. But I spun this up as I became frustrated with how the core extension handles controls, extended requests, paging, and searches. And I made several design decisions that I regret.
My work provided computer is a laptop haha No upgrading for me :( I want to build a home office computer soon-ish though, hoping that my work will shell out more money for me to get a larger SSD computer anyway. I mainly do fullstack development, but I started in .NET so I have all of the .NET services installed in case I need to jump on something.
It means you're a troll! You can tell who the trolls are because they always put troll in their name!
It does indeed. 32 bytes in PHP 7 per https://3v4l.org/CMCeW : &lt;?php echo memory_get_usage() . "\n"; $a = null; echo memory_get_usage();
Nothing can exist by magic. Everything uses memory, obviously.
Not exactly sure what you mean by that. If you're talking about volumes then perhaps this is about the fact that if a container has a /etc/php directory with a php.ini file in it for instance, and you then mount that directory, you won't have a php.ini any more unless you add it again. So, to clarify, a volume replaces what's in the container directory with the host directory you've mounted it to.
Ohhhhhhhhhhh okay, maybe that's what they meant. Essentially I found people asking how to create (maybe volumes) without deleting the exists files. I haven't gotten around to that yet, so I'm not sure if this is even a valid issue. I'm guessing a volume is what I want to host my source in however? 
Yea exactly..
Alright thanks. I'm almost done the tutorial now, I probably won't have my Docker fully set up until tomorrow (the database takes 5 hours or so to import). Do you care if I ask you any more questions once I've actually gone through everything? It seems pretty straightforward so far, so I doubt I'll need anything tbh. I was mostly confused from random posts online.
A better question might be, *why do you think you need to know?*
I'll help as best as I can, I'm pretty new to docker as well.
Yes but in PHP 7.3 if you don't actually use the variable anywhere, it'll get optimized out as part of DCE (Dead code elimination) via the opcache extension.
I thought it was a well written piece. Looks great on mobile too
No, that's a terrible question and that attitude is incredibly bad for any discipline requiring critical thought - be it programming, or anything else.
There are plenty of places where it makes sense to use a callback, here is a handy function we use to wrap db operations in a transaction: public function withinTransaction(callable $func) { $this-&gt;begin(); try { $return = $func($this); $this-&gt;commit(); } catch (\Exception $e) { $this-&gt;rollback(); throw $e; } return $return; } Use it like: $this-&gt;withinTransaction(function () use ($id) { $this-&gt;update($id); $this-&gt;delete($id); //if anything fails the transaction is rolled back });
Sometimes knowing the 'why' of the question can very much affect the the answer.
As a supplementary question, sure. Stifling the question, no.
I feel that graph is wrong when it comes to PHP. The typical PHP developer is paid around the $80,000 range. I guess when you aggregate data from all around the world and the sheer amount of overseas PHP developers offering development at a fraction of the cost it drives the median value down dramatically, which I'm sure we'll see more and more in the coming years for other languages.
Next up: How to rename an array
This is an excellent question, but I believe it could be phrased more positively: What does the answer empower you to accomplish?
I totally agree with you there, that first comment seemed to be unconstructively belittling. 
I'm still rocking my 6 years old w520. Though the outside is falling apart it's still humming along like a well oiled engine. I want to upgrade to p51 but find hard to justify when there's nothing I can't do with ease already. 
I am trying to submit my information to the database using the above, and I get the following error on my browser. Please help. I have no idea what the error means. "; include 'register.php'; } else {echo $tablechoice. " added !";} mysql_close($con); include 'index.php'; ?&gt;
The question is why would you create a variable without using it?
Right, so I'm not the only one. Wondering why that's possible.
Thanks for the clarification
Guess it was pretty easy to figure out. /u/mikemand do you by any chance quit PHPStorm with cmd+q ?
/r/PHPHelp
Because peopke don't write perfect code and the more you know about PHP's memory allocation, the better. Don't presume to know what is useful or not, I've debugged code that contains the most trivial errors - inagine this was part of a large loop, for instance.
Except in php 7.3 If a variable is defined in a forest of code and no function uses it, then does it make a footprint in memory? Turns out it can be optimised away.
`mysql_` is depricated. Use `mysqli_`. Also [show all errors](https://stackoverflow.com/a/21429652/233286).
It mostly affects things like "Find usage" and refactoring browser. I tried this only once year ago, so don't remember is there any issues with typing. My main problem was sloooow search.
Are strings represented by utf-8 internally now?
Just tested it. It worked out of the box as expected. Then I updated some passwords, run orbit run kickoff again, and it worked. Really nice work! I'll look forward to use it for my projects.
Why do you use a separate port for the WebSocket? You can just add it as separate route to your `$webRouter`. A `composer.json` for installing Aerys seems to be missing.
source?
Glad you like it! :)
&gt; The goal is detection/verifiability, not prevention. Your `README.md` says otherwise: &gt; This prevents sneaky additions of unauthorized CA certificates. The signature doesn't add anything, because the keys are distributed over the exact same channel as the signed content itself. You could fix that by requiring these keys to be present in the project's root `composer.json` in the `"extra"` section, so they're fixed. But how do you handle revocation then? &gt; If they're building plugins for existing CMS/framework products, and said CMS/framework products adopt the new library and then enforce a new policy on their plugin developers requiring that they don't disable certificate validation, then they will. How do they enforce something like that? They could do the same thing now and require a proper system setup.
well, it is just a useless troll comment... :)
I'm using callback only in one situation for now: unit tests with mocks when I have a complex business logic where the same method would return another result with different parameters in the same tested method. In this case, returnCallback is necessary and quite elegant actually.
There's a few what I'd consider "v1" blockchains for content right now - steem (DPoS blockchain), golos (fork of steem), and akasha (eth token + ipfs) are the most evolved. Then there is decent and muse which launched more recently. I'm sure I'm forgetting some and there's a couple more that just had ICOs recently but aren't anything more than concepts. The majority of the work I do is for steem, but I'm excited to see some competition in the space over the next few years. There's a lot happening in the space and it's hard to keep a grasp on :) 
There's an example about 3/4 the way through Rasmus' slides: http://talks.php.net/phpnw17#/dce0 I'm not sure if the PHPNW17 videos are up yet (I could have sworn they were, but I can't seem to find them again) but that should give you the explanation behind it.
Your code snippet will give you the same result even if you drop the `$a = null`. You're effectively measuring the effect of the `echo` here, not the variable assignment.
Absolutely, that's what I did at first, I gave them each their own port in a "separation of concerns" kind of logic but both are totally fine! "amphp/aerys": "\^0.6.0" is required in both pupper-example and pupper-php, correct me if I'm wrong? Thanks a lot for the time you took to look at it :)
Yes, it takes up space, but not in quite so obvious a way as suggested by other comments. If a variable is used inside a function, we create a CV (compiled variable) slot for it, which will take 16 bytes on the VM stack at runtime. However, the VM stack is allocated in larger pages, so you will not be able to observe the difference from a single call. To make this visible using memory_get_usage() you'd have to perform recursive calls of a function with the variable and without it and you would observe that in the former case, the memory usage will increase at a lower level of recursion. Regarding the mentioned DCE, it is already part of PHP 7.2 (not 7.3).
👏
Actually you're the one with the terrible attitude because you're implying it's a rhetorical question stating that you should not need to know. On the contrary, it's a question posed in earnest.
it will be deleted from here, ask in /r/phphelp
If Dog extends Animals, you don't need to duplicate the function inside the dog class. Just call `$dog-&gt;eat()` and it'll pick up the parent classes methods. As for the differences between them, :: is a static call and -&gt; is acting on an object. So if you call ::eat() inside the Dog class, it won't know anything about the state of your $dog instance. If you call -&gt;eat() inside the Dog class, you're performing this action on your instance of Dog so you'll be able to act on the data it has.
I don't like *if...else* much and I try to avoid if I can. I usually write like this: $resources = null; if(some_condition) { $resources = ... } to prevent undefined variable error. Should I use *isset* without define a null variable? Does this make a difference in *nikic level php*?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
[Already had you tagged -- no worries ;)](https://i.imgur.com/77LlaGL.png)
In your example, you would just call `$this-&gt;eat()`. If you wanted to call the Animal method `eatLikeAHorse()` from within the Dog class, since the method is overridden in the Dog class, you would have to call `parent::eatLikeAHorse()` in order to access it.
Didn't know about this! Thanks for sharing.
If you are going to load the whole thing in memory and then process it it will bite you no matter the programming language you are using.
From what I understand, if you want to be sure to always call Animal's eat method whether someone add a eat method in Dog, call it with parent::eat() elsewhere call $this-&gt;eat() 
Yeah right, I did'nt blame php for that
The name is kinda confusing with the existing php-ds org: https://github.com/php-ds which maintains the php datastructures extension http://php.net/manual/en/ds.installation.php
A point to note: Setting $a = NULL *IS* initializing it to a known value (NULL). NULL is not the same as undefined
he is not loading the whole thing in memory. he is using generators introduced in 5.5
It's good very good for the learning, but I doubt anyone would be using it - all functions are too specific or redundant. For example, native PDO interface is in fact *much cleaner* than your homemade extension. 
How does it work?
True, but NULL and Undefined take up the same amount of space, so that's kinda moot.
next time, pay attention to what i write ;)
A lot of this looks very inflexible - particularly the database stuff. As far as I can see there's no way to pass in an existing PDO connection and it forces the connection encoding to utf8 - this will cause issues for older applications using latin1 and other character sets, as well as those using utf8mb4. It also uses LIMIT / OFFSET for pagination, which while it may not cause you memory issues, will cause you performance issues on large datasets. I also didn't see any actual CSV parsing code. In my opinion, this library is trying to do too many things that really aren't related to each other. There's too many issues with the database code, and for common file formats such as CSV there are other, better developed libraries.
https://secure.php.net/manual/en/language.generators.overview.php
Yeah right but this library has advantages in memory management over PDO, for example when dataset is very large using offset,limit will do the job. This library is not PDO successor, just implement a simple API for dealing large dataset
I'm not opposed to renaming it to avoid confusion. I didn't realize there was an extension with that name when I picked it. I need to think of a new name though. 
Yeah right, I want to add those features you mentioned if library get good feedback. using limit,offset will increase operation time but it will do the job unlike using a select mysql command that maybe encounter memory exhausted error.
Come on, it doesn't have any advantages. PDO is already good with large datasets. I won't use your library any time I need a large database. I will just tell PDO not to load the dataset in memory. PROBLEM SOLVED
FYI /u/colshrapnel is the resident PDO connoisseur and database API snob and you have a legendary uphill battle if you want to convince him any of his opinions are wrong here.
would you use his lib?
Well see i don;t invent anything, PDO is heart of the library. You can use pdo + disable buffering + use generators + use limit,offset in sql command and put all of that in a loop to get a row but you can do this with this library just with $database-&gt;tables(['table_name'])-&gt;by_chunk(). take this case that you want to process all tables of databse you can just use $database-&gt;tables()-&gt;by_chunk() of course you can use pdo for that but come on it's a bit harder. for files you can do that, processing file of a directory just by $files-&gt;by_chunk(). nice eh?
1. You don't need generators with PDO. It has them implemented already. 2. Go tell me a case where I would need your by_chunk() method. 
-&gt;1. right -&gt;2. using $database-&gt;tables(['table_name'])-&gt;by_chunk() you use offset,limit benefits for large data, you can write a while loop easily to implement this but that's why libraries are built, to make operations easier. I don't expect that i surprise programming world with my new shiny library, it's just a library with simple using API.not a big deal
no, no. Give me a *use case*. Not your theoretical reasoning, but a real life task for which I would need this code. 
1.for processing a table with 30m records i used this method i did it with PDO with dozen of lines but when using this just use $database-&gt;tables(['table_name'])-&gt;by_chunk() 2.search all tables of a database for extracting any emails i can find. 3. in recent project we wanted to find admin user but number of tables was about 100 so i just use forecah($database-&gt;tables()-&gt;by_chunk() as $row) if(in_array('admin',$row)) ...do 4.finding malicious code inserted in databse after a site is hacked by searching all tables for specific code. 
Thanks
1. why would you need to load in chunks instead of using an unbuffered query?
No, I wouldn't. I would just use PDO, unless I was feeling particularly lazy, then I'd use EasyDB to automate some redundant tasks.
Examining the problem is always a good practice. Stifling knowledge is never good. If that isn't what you meant, your phrasing sure made it sound that way - as you can tell by the 30+ negative karma on the post.
Are you afraid of line breaks or something? Squishing all your code together makes it harder to read. As others have said, I think reading text files and database tables are different enough functions that the functionality should be split up into separate libraries.
&gt; 4.finding malicious code inserted in database after a site is hacked by searching all tables for specific code. Uh, no. Please reconsider for a moment. If "malicious code inserted in database" is a problem, your entire web application's design should be called into question.
You can find some Docker resources here: https://serversforhackers.com/t/containers - the course on Docker in Dev is pretty good to get you started. (There's https://serversforhackers.com/dockerized-app too which goes a bit farther with docker-compose). The course https://serversforhackers.com/shipping-docker (paid) goes into more detail on how everything works with Docker. I can give you a discount if you want to email me at this user name at gmail.
&gt; unbuffered just for memory, it's depend on size of the table, if you execute a 'select *....' command by your code or using by_entire() and get memory exhausted error just use by_chunk() and this time you probably won't get the error but the operation takes longer and i say these based on my results if you sure i'm wrong just guide me, right?
Wait, but unbuffered query already mitigates the issue? why it should get the memory exhausted? Besides, if, as you say, by_entire() doesn't help with memory, why it's in your library then?
Ah, that's good to know, no idea where I got the 5.3 idea from for that then
please dont use `and` instead of `&amp;&amp;`, they have a different precedence and you will get caught off-guard.
Wouldn't null take up slightly more space as the variable is now defined. I assume the variable name itself would end up stored somewhere in the null case but not in the undefined case. 
Oops, totally missed that I'm in `./app`, sorry about that. :-) A separate route already "separates the concerns", no?
I've been meaning to try your framework for quite some time now, hope to have a chance at it soon. Keep it up!
&gt; Processing big text files always been a problem in php and there are two major problem. Memory limitation and Using poor techniques for reading My answer was for this particular statement. Read carefully ;)
yeah, I see now.
by_entire() has a simple API to use, choosing between by_entire() or by_chunk() depends on the number of rows that will be processed
Can you show me?
I use different classes for each type but i think that just parsing files with limit operations isn't big deal to create a standalone library
guess the value of `$test`: `$test = true and false;`
you didn't answer my question. how an unbuffered query would cause the memory error? 
Please don't ruin your code readability in exchange for saving 16 bytes on a specific code path
I always use and/or in code and hadn't encounter any problem, but i get your point and use and,or,&amp;&amp; and || in the right place, thanks
Karma means nothing.
I explain it wrong to you, it doesn't produce memory problems but increase load time and load on server, if you benchmark this code for a table with millions of rows you should wait so long to get first results: $dbh-&gt;query('select * from table_name');$dbh-&gt;execute(); and while executing and after that when you want to fetch results the load on server increases as explained [here](http://php.net/manual/en/mysqlinfo.concepts.buffering.php) but if you use limit,offset command ( like by_chunk() ) you get first set of results immediately without any load increase on server or mysql server
Just for a malicious code in the database the entire architecture is wrong?are you serious? so Drupal,Wordpress and other frameworks that encounter xss problems should be redesign?I just say this a tool that can be use every where that is needed;
&gt; so Drupal,Wordpress and other frameworks that encounter xss problems should be redesign? # [YES.](https://paragonie.com/blog/2016/08/on-insecurity-popular-open-source-php-cms-platforms)
I'm sure they'll not but I'ill do improvements for my library if get useful comments.
you don't understand how LIMIT works. with its last iteration, like `LIMIT 999000, 1000` for a table with 1000000 rows, a query with limit will take EXACTLY as much time as a query without limit, as a database have to scan all the rows prior to limit. It means that by_chunk() is MUCH WORSE than just a single unbuffered query. 
&gt; Yeah right but this library has advantages in memory management over PDO, for example when dataset is very large using offset,limit will do the job. No. Just plain No. 
&gt; forecah($database-&gt;tables()-&gt;by_chunk() as $row) ... you are looping over every database table and every database row. Please tell me why the hell you would ever want to do that.
It's right that when offset increases mysql takes longer to return results but if you don't use it and use simple 'select * from table_name' or using by_entire() the initial results takes so long to return and there is more load on server, i admit that by_chunk() takes longer but on the other hand is more efficient and stable. to answer you with numbers I'ill benchmark a 30m record table with both by_chunk and by_entire and show the results to you, maybe I be wrong. Deal?
:P lol
Sure
swagggger makes me so happy as a dev.
Yes, code readability is what I consider first. 
I did a little research on what the best practice is, and it seems that while there's no consensus, there's more upsides to leaving it on the same port, I'll switch it back!
I do indeed. Leaving the last project I was working on at the time open. I take it that's now how it should be done?
Karma means people think your post is bad. If you can't understand that, you're incredibly stupid.
This was posted about yesterday: https://www.reddit.com/r/PHP/comments/783cs1/paragoniecertainty_automate_your_php_projects/
ok
Do you guys think Symfony is dying? 
&gt; if (isset($_SERVER["HTTPS"]) &amp;&amp; !empty($_SERVER["HTTPS"])) [Do you really need to check for both isset() and empty() at the same time?](https://phpdelusions.net/articles/empty) &gt; 10) Get User IP Address [How I Hacked StackOverflow ](https://blog.ircmaxell.com/2012/11/anatomy-of-attack-how-i-hacked.html) 
lol, not to mention that one should never trust an IP Address. smh
I'm going to be honest, I had no idea that PHP even supported `and`/`or`. 
So? Does that mean the PHP is OK because IDE? This is the kind of blindness I am taking about.
Do you have links to the discussions you found? Would be interesting. I guess it's often separated, because the normal HTTP server is often a different process than the WebSocket server.
Interesting. So the zend engine doesn't need to allocate a zval if a variable is only used in the current function and not passed to anything else or used in a hashtable? Or am I understanding this wrong?
This may be a bit off-topic, but how are these buffered queries implemented? On the web, I can only find how they are used. Does the DB temporarily store the result, and then sends it one by one to pdo? That would be rather slow and the server would still run out of memory if the result set was huge. Or does it internally use batching?
&gt; Do you really need to check for both isset() and empty() at the same time? It depends on how accurate you want to be, and how willing you are to let php's type coercion "figure things out". (And also, how much you care about notices) https://www.virendrachandak.com/techtalk/php-isset-vs-empty-vs-is_null/
ignorant !== misinformed
&gt; .. you are looping over every database table and every database row. Please tell me why the hell you would ever want to do that. There are cases that you want to search all tables for specific string for example extract every email in all tables or scan all tables for specific value
 function random_code($limit) { return substr(base_convert(sha1(uniqid(mt_rand())), 16, 36), 0, $limit); } Gotta use that unique id for that extra super randomness. These look like they are copied out of a ten year old cookbook.
Come on, neither your comment nor link make any sense. Better read the PHP manual than some random blogspam from Bangalore.
Where do you need clarity on that? And why the dig on Bangalore? It is literally one of the most tech-rich cities in the world, and frequently places above cities like Shenzen and Hong Kong in analytics related to tech innovation. And how is that blog spam? There are no... Oh. You're trolling. nvm.
I never seen any spam in this sub neither from Shenzen nor Hong Kong. While this sub is spammed from Bangalore shit every fucking day, with pathetic shit like from the link you posted. 
Is there any reason you'd every prefer `and` to `&amp;&amp;`?
I suppose that for the server they all the same - as soon as it has something to send - it sends. All buffering happens on the client side. So for the server it should be just streaming, reading the requested data from the disk and sending it to the socket.
tl;dr but I cannot recommend the use of things such as PHP-PM which throws away 20 years of request semantic within the Zend Engine. A PHP instance belong to a single request and many bugs and security issues have been fixed until now. In addition to be very mature, this is also a very safe model with strong request processing isolation guarantees. With PHP-PM there are so many possible vulnerabilities, both in platform side and user side. What happens if a sensible global state is not well cleared at the end of a pseudo request processing ? And the performance improvement, which is not very clearly proven (where is the public benchmark with fine tuned fpm / opcache... and a common use case ?), is anyway going to be less interesting according to PHP performance increase. 
It means that these aren't real world problems.
you just need empty(). empty() will not return a notice on an undefined index. no need for blogspam, it's spelled out in the PHP manual http://php.net/manual/en/function.empty.php &gt; No warning is generated if the variable does not exist. That means empty() is essentially the concise equivalent to !isset($var) || $var == false. so `empty()` is already using `isset()`.
no I have to agree, a lot of blogspam makes it here that is basically a copy/paste of what seems like programming books for PHP 4
10) Get User IP Address -&gt; Blindly trust a request header like "x forwarded for" is very dangerous, especially if used in critical stuffs like IP based authentication. 
It would have been useful if it was posted about 10 years ago. 2 examples: For random string, you should go for openssl_pseudo_random_int(); and build random string out of it (php 5.6), or do random_bytes() (php 7.0) now. For all date related operation, you should use \DateTime() object. 
Maybe just a little bit more code readability
that's one for /u/sam_dark maybe
You were right, when using unbuffered query mode not using limit has better performance but consider that pdo use buffered mode by default. https://github.com/hosseinmousavi/ridona/blob/master/benchmark.md
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [hosseinmousavi/ridona/.../**benchmark.md** (master → 69ad209)](https://github.com/hosseinmousavi/ridona/blob/69ad209a8317fcd8dca7d41f3875a03aea28b705/benchmark.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
I'd guess that that makes your code a whole lot less readable and standards-conforming.
Stop posting.
is that any wrong in my post?
Yes. None of your posts are really fit for this subreddit and all have been downvoted to 0 points. You may be better suited for a reddit with a less experienced userbase.
Not really though, since isset and empty return different results for a number of things, so you can't make a blanket "use empty()" statement. The truth table on the link I posted outlines that. And as I said before, it depends on how accurate you want to be. If you don't care about `isset($var)` returning true and `empty($var)` false when `$var=true` then it's a moot point... but if you care because you need to check things like that then you have to be careful about how you check for existence.
A typical hardcore redditor. Joins any discussion and an expert in every science. But scarcely have an idea what is he talking about. A pitiful sight. 
I would be very hesitant to provide a service that holds API keys for your customers' payment gateways without doing a _whole lot_ of prep work first - stuff that's on par with full-on PCI compliance. Is there no way that it could be built in such a way that you don't have to handle the API keys? That would likely be preferable (and safer) for all parties.
Payment apps are sort of my wheelhouse -- you may not be storing payment information, but are you *transmitting* payment information? Have you gone through any PCI or security audits? In my experience, the golden rule of payment integrations -- "if you build it, someone will try to exploit it". 
No I wouldn't transfer payment info. The app works by LS sending order info to my app which transmits it to square in exchange for a payment URL. The customer pays for the order on squares site then is directed back to a thank-you page on LS. 
In the process of having it tested for PCI compliance
yes but the point was that in OP's check it is just bloat and completely unnecessary
Don't take it personal - hard I know. This isn't an attack - it's a discussion of practicality and for /u/colshrapnel - this is a huge show of patience. He's just trying to show that your library holds no advantage of native PDO and unfortunately, for your library, he's right. Great job on learning and putting your code out there, but listen to the people here.
https://stackoverflow.com/a/28524997/2273553 This is the main and more compelling argument I found https://en.m.wikipedia.org/wiki/WebSocket The Wikipedia page also mentions the compatibility with ports 80 and 443 by design, and thus the advantage of not having to manage more firewall rules
Oh, that will make life much simpler -- if you are really just a redirector and never ever touch the payment information, you are probably outside of PCI scope and should focus on protecting the API keys. If you've got those secured, and are charging enough to cover your hosting costs, you might as well go ahead.
&gt; In my experience, the golden rule of payment integrations -- "if you build it, someone will try to exploit it". That's the golden rule of any online service.
2 things jumped out at me in the File class. You are using glob instead of a Directoryiterator and in byLine you are using file() which reads the whole file into an array, instead of fgets which would get 1 line from a file handle.
Well ... only nsfw links
it makes your code less readable to experienced developers
what are you talking about? XSS vulnerabilities get discovered and fixed all the time. you absolutely should not in any situation depend on scanning the database for XSS instead of fixing the application.
I think both works but yeah DirectoryItereator is better, I used fgets() in by_chunk() method it makes more sense
for anyone wondering, this is how it behaves: `($test = true) and false;` = TRUE `$test = (true &amp;&amp; false);` = FALSE 
had to use wkhtmltopdf on some pages with JS charts, I think we either used the delay or some sort of wait configuration, it works fine
No judgements here.
Jetbrains says it has somthing to do with a plugin. However, if I close PHPStorm with the "red dot" instead of cmd+q, indices are kept.
I just added a comment there. &gt; This answer provides a few invalid arguments. Cookies are never port-bound, they're sent to any port on the same host. And WebSockets are not subject to the Same-Origin-Policy, you explicitly have to check the `origin` header server-side to prevent cross-origin access.
Links to bitbucket repos for different projects I work on, logs for said projects, docs and jenkins jobs.
Wait what? This seems like voodoo. Could you elaborate more about how this would roll back the transaction?
"nikic level PHP" :)
Sure, let's say you throw an exception in your callable then the catch block in withinTransaction will catch that exception and the rollback function will be called. $this-&gt;withinTransaction(function () use ($id) { $this-&gt;update($id); throw new \Exception('Update is rolled back); });
Lots of links to references ( bulma.io, Vue.js, webpack, etc, material fonts / font awesome ). And a few tools like url encoding strings, etc. Would post them but afk. 
A live HTML renderer, regex101, php.net, and a JSON visualization tool.
Maybe a bit too simple. It would be nice to have OOP without static methods and variables, feature to have sub-timing and a full test coverage would be nice as well. Depends on what was your goal with it, if it is for local debugging and optimization then good for that, but because of the mentioned things I wouldn't consider using it in production code.
Maybe i add some features to it, thanks for mentioning
We have this one: &lt;?php class Benchmark { /** * @var array */ protected $times = array(); /** * @var array */ protected $noticeMessages = array(); /** * @var array */ protected $results = array(); /** * @return float */ protected $noticeTimeLimit = 1; /** * @param int $noticeTimeLimit */ public function setNoticeTimeLimit($noticeTimeLimit) { $this-&gt;noticeTimeLimit = max(0, (float)$noticeTimeLimit); } /** * @return float */ public function getNoticeTimeLimit() { return $this-&gt;noticeTimeLimit; } /** * @param string $key * @param string $noticeMessage */ public function startTimer($key, $noticeMessage = '') { if (empty($key)) { return; } $this-&gt;times[$key] = microtime(true); if (!empty($noticeMessage)) { $this-&gt;noticeMessages[$key] = $noticeMessage; } } /** * @param string $key * @param string $extraNoticeMessage * * @return float */ public function stopTimer($key, $extraNoticeMessage = '') { if (empty($key) &amp;&amp; empty($this-&gt;times[$key])) { return -1; } $this-&gt;results[$key] = microtime(true) - $this-&gt;times[$key]; if ($this-&gt;results[$key] &gt; $this-&gt;noticeTimeLimit) { $times = $this-&gt;results; trigger_error( 'Benchmark ' . (empty($this-&gt;noticeMessages[$key]) ? '' : '(' . $this-&gt;noticeMessages[$key] . ') ') . $key . ' @ ' . $this-&gt;results[$key] . 's (limit = ' . $this-&gt;noticeTimeLimit . 's)' . ($extraNoticeMessage ? ' ' . $extraNoticeMessage : '') . ': ' . $this-&gt;getResultsString() ); unset($times); } return $this-&gt;results[$key]; } /** * @return array */ public function getResults() { return $this-&gt;results; } /** * @return string */ public function getResultsString() { $results = array(); foreach ($this-&gt;results as $key =&gt; $time) { $results[] = "$key=$time"; } return implode(', ', $results); } } It also implements the Singleton pattern - removed from the above example, as well as comments were trimmed -, so it can be used across classes, for example we use it for measuring critical services, the whole runtime and all database and cache queries; as you can see it also alerts when things are slow.
The use of limit/offset, in addition to being worthless and inefficient, can lead to inconsistent ordering over pages. Order must be enforced with an order-by clause. This applies to PostgreSQL AFAIK (https://www.postgresql.org/docs/9.6/static/queries-limit.html).
Strings are byte arrays, but by convention they are treated as UTF-8 by default since PHP 5.6 for all things that are character set aware. E.g. strpos gives you a byte offset, mb_strpos gives you a character offset in UTF-8 (using default php.ini settings). See the default-charset ini setting for more info: http://php.net/manual/en/ini.core.php#ini.default-charset
At least in PHP 7 an undefined variable is a variable with an UNDEF value, so it's really no different from null. Of course, this only applies to statically known variables. If you're using `$$var` then there is a difference between undefined and null.
That is extremely confusing. So both functions are effectively "by line" but "by chunk" is just "by line up to n bytes"? And if your line width is grater than chunk size that data won't be read (maybe this is intended) but would still be better suited to an argument to by line. Why wouldn't fread by preferred for by_chunk? 
It took me a while to realize that the article is actually talking about PHP-PM, a ReactPHP based webserver. I at first assumed somebody failed at writing php-fpm correctly. :|
shitty reaction memes to reply on pull requests
+1 for regex101
check it! https://github.com/2amigos/yii2-usuario It's a library with functional/acceptance tests, maybe could you could use it for an inspiration
&gt;Aerys is a stand alone HTTP/2 server written in PHP why would you even?
&gt; I cannot recommend the use of things such as PHP-PM which throws away 20 years of request semantic within the Zend Engine. So, continue using old things because they're old and battle-tested... don't use/make new things because the old things work fine? "Throwing away" software is, unfortunately, inevitable. New software is made, built on the experience of the old software. [Programming Languages](https://en.wikipedia.org/wiki/Timeline_of_programming_languages) and other technologies become obsolete-- not because they're not good, but because we learn and improve from those experiences. This sort of thing may not have the testing, yet, to recommend in "production;" but I'd suggest taking another look at the reasoning: why is it bad to throw away a design if one works "better" (not just performance, either). Is it bad that we didn't continue to build on the 1950s programming languages? Should we not write new software because it may have bugs? Was PHP wrong to implement another layer of request isolation over CGI? 
CanIUse, DevDocs and the Drupal API. I use Chrome Omnibox search engines to reach them quickly (ex, typing "!ciu flexbox" will show me the "http://caniuse.com/#search=flexbox" page)
I've never said it is bad because it is new. But replacing a working model by something which brings nothing except a big step backward on possible vulnerabilities is not so good IMO. And async stuffs have nothing to do with modernity. Asynchronous it is just the overused paradigm of the moment. 
Nothing I've used in the last 5 years... 
In my opinion, if you are only a reditector you should first get yourself a team of experienced developers and white hat hackers to test your app and give you more ideas. When more people work on the same project, for sure you will see where you are wrong and how you can fix that. As stated above, every time you create a new piece of software somebody will try to exploit it, especially when dealing with API keys and payments. You can do all of that and get payed via either a monthly subscription or a percentage of the transaction.
&gt; Was it bad for PHP to implement another layer of request isolation over CGI? Yes it is very bad, because strong isolation guarantee is not achievable in user space PHP code. Any piece of global state, including: explicit global variable, static class property, static function level variable; represents a huge vulnerability risk. There is also technical issues due to the fact that PHP is designed for short CPU/vm living scripts: - memory manager performance drop - limited GC cycles handling - memory leaks in user space code - resource (other than memory) leaks in user space code 
I wouldn't call them over-used. Half of them just don't make sense. Emphasis should be on the most important parts, not random words. If you only read the emphasised words, the text should still have structure, which isn't the case here. It's just randomness. 
You may have luck with Kubernetes or Docker / Docker Swarm. They both have overlapping features but you'll be able to use both from a single server and scale up when needed. Docker on its own is a bit easier to learn in my experience and you can eventually get to Docker Swarm or just dive into Kubernetes when scaling is needed. Oh and you can use these on AWS or Google.
A microservice is just a small application exposing a small-surface API for a particular cohesive feature. In the context of PHP, it's not different than hosting any other PHP site. Hence the answer would be "just use any PHP host". &gt; Instead of rebuilding/copying I am using graphql as the access layer What's the connection between GraphQL and your need to be rebuilding/copying? GraphQL is a particular approach to interfacing with an API, that's all.
You gotta step your game up. Get the [Hush](https://chrome.google.com/webstore/detail/hush-private-bookmarking/hjmoaenjknbdehbiaeeijcppnljflkff?hl=en) extension for chrome. Personally I use it for hiding the countless diamond rings I'm researching for my significant other 👍
I don't book mark reference material. I don't dosplay the book marks bar because it wastes screen real estate. Clicking through the book marks menu tasks about as long as searching in Internet via the URI text box. I use book marks simple as data for autocompletion in the URI text box for the web sites I visit the most often.
&gt; Yes it is very bad, because strong isolation guarantee is not achievable in user space PHP code I wasn't talking about PHP code, I was talking about PHP's implementations of FastCGI, mod_php, and php-fpm. CGI provides a kernel-backed cleanup process that's very robust. Should we discourage the use of those userspace written cleanup processes when we have a perfectly good kernel-cleanup process that's more robust, more secure. and more thorough? &gt; Any piece of global state, including: explicit global variable, static class property, static function level variable; represents a huge vulnerability risk. All problems in C, C++, Rust, and any other language with static or global variables. PHP is somehow more vulnerable than those? &gt; * memory manager performance drop &gt; * limited GC cycles handling &gt; * memory leaks in user space code Source? PHP's been pretty good with long-lived scripts since around ~5.3. We have several running with alerts if the script ever goes over a certain threshold of memory usage. It seems to hold pretty [steady](https://i.imgur.com/N5zaVN9.png) (the increase last month was due to a code update) &gt; * resource (other than memory) leaks in user space code. So? Fix the userspace code. Leaking resources is a bug, and is generally considered a bug in the PHP community as well. Even then, because we run things in function/method scopes-- they're still marked for cleanup. 
&gt; I've never said it is bad because it is new. I know, and just so we're clear, here is the relevant parts I was referring to-- emphisis mine: 
I don't have any experience with Yii specifically, but generally-speaking, you should use mocks when doing functional/integration tests with external services.
It's a good step forward and to be honest, those GitHub results of libraries disabling HTTPS checks are an eye opener. I don't think many of their users even know. Is there any protection against an attacker simply tampering your plugin when it's being downloaded? Composer will only allow secure connections, but it depends on the system CA bundle. Also, have you considered distributing Phars with Phive.io? It has signature checking built in. 
&gt; I've never said it is bad because it is new. I know, correct me if I'm wrong, your positions were: * We shouldn't 'throw away' 20 years of request semantics. * There is the potential for bugs and vulnerabilities, especially regarding process isolation * PHP can not clean up variables as well as the Zend Engine can, so it introduces a new class of vulneraibility. Again, correct me if I'm wrong-- but my imrpession is even if this technology were 20 years older, proven, mature, and well-developed: you wouldn't support it. Yet, those same exact reasons apply to mod_php, fastcgi, and php-fpm. The kernel process cleanup is much more secure, more robust, and more thorough than anything that can be done in non-kernel code. Should we just go back to CGI? &gt; And async stuffs have nothing to do with modernity. Asynchronous is just the overused paradigm of the moment. I didn't mention async, that's another topic that isn't really relavant to the point I'm trying to make. The same exact arguments you're pushing against PHP-PM/ReactPHP/Amp (PHP-written), are the exact same arguments others can make against mod_php/fastcgi/php-fpm-- and even nginx/mpm_prefork/mpm_event. It doesn't make sense, to me, to apply your that reasoning at this level, but not at that one.
Because you can, etc.
You sound like someone that's never had to build anything but a to-do list 
Yes you're right, I've just forgot this is the same scheme with cgi vs fpm and other process pools. Maybe I'm just hurt by the immaturity of the current implementations. But I still dont understand the need to re-implement request processing isolation as it brings nothing. 
&gt; Source? PHP's been pretty good with long-lived scripts since around ~5.3. We have several running with alerts if the script ever goes over a certain threshold of memory usage. It seems to hold pretty steady (the increase last month was due to a code update) Sorry only my experience, e.g. op/s drop after some amount of processing, regardless memory usage.
Yes, if only for the sake of being able to confidently say "Yes, I can help you with this Drupal project" to prospective clients. It's one of the most widely used pieces of software (one of the Big Three CMS Platforms according to [W3Techs](https://w3techs.com/technologies/overview/content_management/all) that cover a third of the Internet).
&gt; All problems in C, C++, Rust, and any other language with static or global variables. PHP is somehow more vulnerable than those? My point is just until now we have a security net in PHP, why throwing it away ?
Tentatively, go ahead. Cautiously, if you don't already have a code audit in progress, getting one done *before* you launch is a good way to avoid shooting yourself in the foot. This is a little more involved than someone pointing Nessus/Acunetix/etc. at your app and running its findings through their PCI compliance requirement checklist to filter out false positives.
I don't think it's your best bet to start with. Drupal 7 and Drupal 8 are completely different frameworks, knowing one doesn't help you much with another, therefore you simply can't be named Drupal developer, can only be Drupal 8 developer if you focus on it. The current state of Drupal projects is that most of them are still Drupal 7, it takes time for businesses/people to move to Drupal 8 and because of all differences, most are reluctant in doing so.
I'm sure they'll notice themselves within the week.
&gt; But I still dont understand the need to re-implement request processing isolation as it brings nothing. They didn't. They're utilizing the isolation that the Symfony *already* provided. Should I start explaining the benefits of Symfony's HttpFoundation? The question then shifts to: do we really need two different systems providing the same level of isolation? 
The question is certainly unrelated to PHP but is a pre-optimization. How do you build a scalable solution without having the hardware infrastructure to support it? They poster wants a fixed cost on hosting, so assuming a cheap solution. They probably want a 3-tier or 5-tier architect to fit inside one single. So saying any PHP host will do isn't the right answer as I doubt GoDaddy shared hosting will work for them. 
TL;DR: 5.6 is still the most popular. (warning: opinion, somewhat controversial) This is why, IMO, I wished that 5.6 didn't gain that extra year of security patches. 7.0 will be out of security support before 5.6. It's not that difficult to move systems to 7.0. (We're doing it now on a ~500k SLoC solution). As a counterpoint, all these projects requiring 7.0+ right now are ignoring a huge percentage of their potential users. Swings and roundabouts caused by giving people an abundance of time to move to 7.
Docker through Kubernetes is the standard method. &gt; I have looked into ASW/Google Engine/Cloud but I would prefer an approach with a fixed price at least to start. Those do have fixed prices; autoscaling isn't as automatic as they like to pretend, and you can always just set it to a fixed number of instances. How large is your tech team (is it just you?)? Microservices can definitely increase operational load. At the very least, right now you've got a big project in redoing your infrastructure, and that seems like the sort of thing you shouldn't planned out *before* doing a bunch of dev work to make several microservices.
The same reasons for not using CGI?
Ha ha
You also might want to learn bare bones installation of Symfony which is the backbone to Drupal 8 now. I would also suggest looking up how composer works as it is also integrated into Drupal 8.
New projects are on D8. D7 sites will eventually migrate. 
&gt; The question is certainly unrelated to PHP and is a pre-optimization. This is /r/php/ so it's logical to assume PHP. &gt; How do you build a scalable solution without having the hardware infrastructure to support it? Modular application where each module can be eventually exported as its own microservice and invoked remotely. &gt; So saying any PHP host will do isn't the right answer as I doubt GoDaddy shared hosting will work for them. GoDaddy is probably the worst mainstream PHP host in the world, but actually even GoDaddy would work for them. "Microservices" doesn't impose any restriction and requirements in itself that GoDaddy can't meet, as "microservices" is a function of the code you write, not the hosting you run on. 
OK got it
&gt; They're utilizing the isolation that the Symfony (and some others) already provide They still have to handle some critical stuffs (like request state management - cookie, post data, headers -), HttpFoundation is just the interface which make any user script using it compatible with this scheme.
Only mentioned to say that the goal is complete isolation from each application itself ( potential clients as well as my own site(s) ). Mentioning Graphql ( entry point ) really doesnt matter just threw that in there but probably should have mentioned I am using it to accept an api key that is used to restrict data access/authentication. This is my first time trying to hook up several sites into 1 api/service that i host/manage all previous work was duplicating/loading same code up on each clients servers so I am wondering if it is harder than it sounds.
Nevertheless a big difference with cgi vs process pools is that this time the user have to worry about global state cleanup.
Most of the places I visit for work use whichever version of PHP is bundled by default in the latest LTS version of linux for any greenfield projects they start. So for example in Ubuntu 16.04, it is PHP 7.0.
It's not hard to hook up several sites into 1 api/service, but if the api/service is hosted independently you're basically multiplying your failure points. So when you have N points of failure (say a site using 3 services = 4 failure points), you need to be ready for partial failures and decide how to handle them. I.e. a service goes down, or responds slowly, or responds with garbage. So that's more work, and the question is why would you cause this upon yourself, i.e. what is the benefit of doing so. If you're merely trying to save yourself the work of deploying the same service to multiple hosts, for each site that needs it, then maybe you should look into automating and streamlining your deployment process, rather than looking into distributing the application. Or maybe it's a matter of business model, or a matter of scalability, but if you had a scalable API already I don't think you'd be asking where to host it, so it's a potential future need, not a current benefit. And the ability to move from a module to a service is in that case most important, *not* starting with a service from the very beginning. Long story short, *do* have "service-ready" modular architecture, but *do not* distribute anything unless you can reap benefits from this *today* rather than in a hypothetical future.
Drupal and WordPress are not frameworks, they are CMS. Symfony is a framework, and it's what Drupal 8 is built on. In my opinion, Drupal is a lot better than WordPress. So, if you want to make *new* sites, learn Drupal 8. If you want to *maintain old sites* (much more work there), learn Drupal 7. If you want to *migrate* sites, you'll need both.
And parts of Zend, and a boatload of other libraries. But Drupal is still Drupal, powerful if you can set your mind to letting go some of the fine grained control you have with using a framework, and keep in mind that it is most likely overkill if you just want to have a few pages and some news items. 
I don’t know where your wisdom comes from, but the only 7 projects we get offered are maintenance projects. All new projects are done on D8.3 or 8.4 in our shop. And I hear a lot of the same stories from other people I know. That whole contrib needs to catch is partly true, and for the most it’s because there are less point and click modules and more options to do things in code. Rules is nice, but in D8 you can get almost the same done by subscribing to various events in code. (And I think it’s even better to do most of that stuff in code then in a interface with all the quirks and caveats)
Not to nit pick but Drupal 8 is not built on the Symfony framework but rather uses many of the Symfony components. An important difference to understand.
Have you looked at digital ocean? Pricing is fixed per server (and very reasonable priced). You can easily fire up / remove severs as your please pricing is a fixed monthly for each. They also have a LAMP on Ubuntu 16.04 one click setup which is useful. I’ve had great success hosting services with them. If you want to shop around Linode is another similar hosting platform.
Great work! Generators are alot of fun. I recommend removing/moving the pdo execute in your Database class constructor, putting side effects in your constructors can get (messy)[http://blog.millermedeiros.com/constructors-should-not-cause-side-effects/]. Also you only use that value database_name in one method, so just fetch it before you use it and store it in a property so it's cached for if you ever call that method again.
Drupal, Wordpress, Pyro, Craft == CMS and not a "general framework" If you're looking for a general framework that's more akin to Ruby on Rails, Django and the like checkout the 2 major players: Symfony (where Separation of Concerns is king) and Laravel (R.apid A.pplication D.evelopment, much like Rails)
WordPress and Drupal are frameworks. They're also cms. 
interesting, something to hide some browser history will be cool too
framework != web framework just saying... symfony is legacy
Yea web framework right. When we're talking about PHP I just assume it's web 'cause it's pretty exclusively a web language. What's the non-deprecated version of symfony nowadays? symfony 2 or 3?
All of these are deprecated already, 3.4 dead on arrival
The point of using AWS / GCP is to scale up easily when you need it. For fixed hosting usually there's more set up involved, you can use services like: Linode, Vultr, etc that offers $5 VPS. Here's a comparison: https://joshtronic.com/2017/02/14/five-dollar-showdown-linode-vs-digitalocean-vs-lightsaild-vs-vultr/
lol
I try to use Pocket for any "reading" content and use Chrome's bookmark bar with my most frequent bookmarks reduced to favicons and a couple of development specific folders. The icons include Github, Laravel Docs, Harvest (time-tracking) and the localhost address I use for all of my projects. My "Dev Tools" folder has Mailtrap, ngrok, Vertabelo, Hurl.it, and Request Bin, and a random "Lorem ipsum" generator. 
They aren't frameworks. Laravel, symfony and Zend are frameworks. WordPress is a CMS with plugins and so is Drupal.
But with the DCE, would both recursive calls be equal?
I would recommend using the IUS repo for php on CentOS 6 and 7 https://ius.io/GettingStarted/
Why would I use this instead of using `microtime()` myself? Or, why would I use this instead of installing Blackfire?
CanIUse just frustrates me because usually the answer is “still not a good idea yet”. Things are getting better though. Having lived through the “IE7 compatibility” era, I really shouldn’t be grumbling...
There's also OVH's dirt cheap bottom-tier VPS plan, if OP isn't looking for a fully automated setup/deployment. Unfortunately, adding Cpanel more than quintuples the price of the instance, so it becomes less cost-effective than a comparable Digital Ocean droplet. Not a bad way to roll your own LAMP/LEMP box, though.
That's really nice. I'm going to try this. Can anyone recommend something similar for subversion?
Forgive my ignorance but I’ve never seen this shorthand syntax before; is there a man page to explain its use? Not sure what to google to find it!
It might be easier to just explain my thought process. I wrote every feature in a microservice or modular like manner to ease future changes/development. A lot of the sites i build contain the similar features with mainly frontend changes ( completely different "themes", mainly pick and choose features ). My goal isn't even really a "microservices" approach, I like the idea of a central API of "features" that just spits out the data I need based on the page being viewed. This way I can leverage front end frameworks ( think react ) and just plugin to the API using client API keys. Extremely basic example using php: *Client News Article Controller/Route Handler* $articles = $api-&gt;get('graphql get recent news article schema', ['key' =&gt; 'client credentials']); if (!$articles['data']) { // Return 404 } return $articles['data']; Going down this approach I was thinking the workflow could be as follows Issue API Key -&gt; Design/Host/Connect Client Frontend -&gt; Setup CDN -&gt; Manage/Load Balance Central Application/API. The big idea/part here is the flexibility of just connecting to the API. This would allow me to just design/throw up the front end with or without the additional features/pages vs dealing with custom back ends per client. Frontend would be static files covered by CDN so they would be fine. 
i think this will help, the tests/_app folder seems to contain the solution to my issues.
More Mac-only bullshit.
https://youtu.be/SsoOG6ZeyUI “I tried to go down the stairs 8 steps at a time. Was just trying to make a point.”
Couldn’t you mitigate this with short timeout and retries?
I use fish terminal for that. The skins you get for it has its build in. 
Yeah, going to install it tomorrow on my Mac-only Ubuntu bullshit...
Not sure how you got that idea. I see that it supports Linux, too.
Agreed. And much less overhead. I’ve recently started using Websockets for a few projects and I’m really enjoying it. Little tricky to get started with but once you have a base server and client implementation, it’s really nice to build off of.
Wordpress is more widely used, and far "quirkier" so knowing Wordpress inside out will likely be much more useful. But WordPress blows and Drupal is more pleasant to use and more flexible. 
&gt; One liner for Ubuntu So no it's linux as well
Timing out the whole transaction after however many seconds is one way to help avoid a slowloris attack, but what do you mean by retries?
Nice, I was using a prompt like that awhile ago (I believe it was called Agnoster). Now I'm using [this](https://i.imgur.com/Lgf3PQ2.png), it's just Oh-My-Zsh's "Bureau" theme but I modified and tweaked it to my liking.
Just install ZSH and choose out of a variety of themes. https://github.com/robbyrussell/oh-my-zsh 
Oh I jut meant that in the case of legitimate connections they would retry after receiving a “sorry, you took too long” from the server. That way, an attacker can try all day long with this sort of attack and get nowhere.
More just personal opinion. I'm not the biggest fan of Drupal. Migrating from D7 to D8 is a pain. And am assuming it will be much the same when D9 comes around. In 2015 it was great. Now not so much. Your time is probably going to be better spent learning an MVC framework. 
I use [Bullet Train](https://github.com/caiogondim/bullet-train.zsh) a theme for oh-my-zsh. (import it with zplug though so, that's cool see my [dotfiles](https://github.com/Lavoaster/dotfiles/blob/master/.zshrc))
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [Lavoaster/dotfiles/.../**.zshrc** (master → 755fbd3)](https://github.com/Lavoaster/dotfiles/blob/755fbd3bbcca66b7599e4fac00ee9f3833e67690/.zshrc) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
That's good to know as I'll be diving deep into D8 soon for work. Thanks.
Targeting 7.0 isn't advisable. You should be targeting 7.1 if you are upgrading at all. The ability to have nullable typehints/return values should be reason enough. But there are numerous reasons why. &gt; 7.0 will be out of security support before 5.6. Only by ~4 weeks. This was probably done on purpose to push people to move to 7.1 vs 7.0. And I am only interpreting that you are targeting 7.0 by your phrasing. You may very well be targeting 7.1 in your app.
The bash completion prompt bundled with git: https://github.com/git/git/blob/master/contrib/completion/git-completion.bash. Straight to the point. No whistles and bells, just exactly what I need to know. I don't care about a fancy colored line with GitHub icons.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [git/git/.../**git-completion.bash** (master → ba78f39)](https://github.com/git/git/blob/ba78f398be65e941b93276680f68a81075716472/contrib/completion/git-completion.bash) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dovtng9.)^.
Video linked by /u/twistsouth: Title|Channel|Published|Duration|Likes|Total Views :----------:|:----------:|:----------:|:----------:|:----------:|:----------: [Tabs versus Spaces](https://youtu.be/SsoOG6ZeyUI)|freakpants|2016-05-30|0:02:51|3,653+ (98%)|534,081 &gt; Silicon Valley - S03E06 --- [^Info](https://np.reddit.com/r/youtubot/wiki/index) ^| [^/u/twistsouth ^can ^delete](https://np.reddit.com/message/compose/?to=_youtubot_&amp;subject=delete\%20comment&amp;message=dovu8xt\%0A\%0AReason\%3A\%20\%2A\%2Aplease+help+us+improve\%2A\%2A) ^| ^v2.0.0
Since I'm a .NET/PHP dev, I work off a Windows machine and use Powershell for my main command prompt. Posh-git gives me everything I need: https://github.com/dahlbyk/posh-git
Hmm, can't get it to run on my Mac, even tried the .bash_profile install - do I need to remove the default git plugin?
&gt; You should be targeting 7.1 if you are upgrading at all We are, we just have to move carefully. I did look into 7.2 but there's the risk of too many changes to work out quite why code stops working. &gt; Only by ~4 weeks. Originally 5.6 was only supposed to have a year of sec support, not two, ergo 7.0 should've had 11 months and 3 days more sec support than 5.6; The fact that 5.6 gets four more weeks than 7.0 is absurd, IMO (TBH, and IMO they should've ended on the same day, but then again this wasn't up to me, possibly for good reason).
Nope
The talking bubbles would get annoying. 
I don't think it was even worth learning back in 2000.
Nope as in no job postings here? 
I use this as well. Do you ever have issues with it messing with your history? Sometimes when I press up and then back down, part of the last line is stuck there.
It's called the "null coalescing operator" and was introduced in 7.0. This: $variable ?? $default is equivalent to: isset($variable) ? $variable : $default PHP already had the `?:` operator but that one does a boolean truth check, whereas `??` does an existence/null check.
Ah that’s awesome, thanks! I use the ?: shorthand all the time but this one is pretty cool too.
i went to source tree and havent used command line git since
ahh symfony I hate to work with it :D
Honestly that is how I felt about the prompt overall. So much noise and so busy it just felt cluttered. 
Drupal 7 to Drupal 8 was a huge pain, basically a rebuild of anything but the most trivial sites. However with D9, there is a commitment to provide an upgrade path, with the 6 month release cycle now giving Drupal progressive enhancements, this should be pretty achievable. 
Recruiters, recruiters everywhere 😔
Waaaaaay too noisy for my taste.
I'm sorry if it feels like I am intruding! Not my intention. Will delete :) 
Very noisy imo. If you're after a very clean prompt then I definitely recommend Pure. Though it only supports zsh as far as I can tell. https://github.com/sindresorhus/pure
Eh, I don't like it since looks like it adds a few ms of delay for the prompt to show after running commands.
Too fat IMHO - I just use what comes out of the box with Git (this being for OS X pathing...): `` # git completion and prompt support . /usr/local/git/contrib/completion/git-completion.bash . /usr/local/git/contrib/completion/git-prompt.sh ```
Mainly for it's value as a brand name. It does also have some crossover value with Laravel (which is quickly getting big), so it's not the worst choice of CMS to clear.
Sourcetree. Or gitkraken sometimes. If there's more than one developer on a project, then there's just too much important information than can be viewed on the command line. I normally do simple pulls, commits and pushes through Sourcetree, and use the command line if I need to do rebases or other tricky stuff.
I'd like to see how fast is it? I tried something similar before but it just made the prompt slow by executing a lot of stuff in `PROMPT_COMMAND`. 
Drupal is a framework and a content management system. Symfony supports bundles and Drupal supports modules. Symfony supports Twig and Drupal supports Twig. Symfony uses the Doctrine Entity library and Drupal uses its own Entity system. Symfony has its own caching strategies and Drupal extends Symfony’s caching strategies. Symfony has a form building component and Drupal has a form building system. Symfony has a bundle for an admin panel and Drupal has its own admin panel. Symfony has a console tool and Drupal has a console tool. How is Drupal not a framework? 
I disagree. Having the knowledge of how Drupal 7 core components work and how data is structured will only benefit you going into Drupal 8. Procedural code is much easier to grasp for most people than object oriented code is. So the learning curve of Drupal 7 I believe is less than that of Drupal 8. I started working professionally with Drupal 2 years ago. Starting off with Drupal 7 gave me the understanding of the “drupalisms” that stump so many newcomers to Drupal 8. 
No one said “general framework” except you. OP said framework. 
Drupal is a content framework with a built in web based UI tier. 
Does the problem occur only when assigning to a variable without brackets around your ANDed things? I've been using AND/OR inside my if() statements for 18 years - I had no idea there were even any difference between AND/&amp;&amp;
yes, I was just showing how PHP would handle it. isn't that crazy? php &gt; print (int) (true and false); 0 php &gt; print (int) (true || false); 1 
Drupal is quite elaborate, I can't really recommend it. It will take you considerable effort to become proficient in Drupal. My experience is that you kinda need to make it your main focus. I mean, sure, you can easily set up a website with Drupal, stick a couple of plugins in it and consider it done but companies that will want to hire you to work on Drupal projects don't really need those skills, they want someone who knows the ins-and-outs of the system so that sophisticated functionality can be built on top of it. WordPress on the other hand is much easier. The architecture of WordPress is quite old and it's bashed for it a lot. I think it's a good little system (as long as you stay away from the gazillion cheap ass plugins with security holes the size of the Grand Canyon). However, if your goal is employment, WordPress sites are cheap these days and pay is low (depending on where you are in the world of course). If you want to get into the PHP ecosystem I would recommend either to focus on Symfony or Laravel. If you're coming from an enterprise background then Symfony will look very appealing to you. If you're more from an agency, built me a website, kind of background then Laravel will probably float your boat. 
I don't know of anything off the top of my head. Can I ask why you are using Subversion over Git? Not trying to be condescending. Just genuinely curious.
I would try to exploit the fact that the solution uses on binary counting and that arrays in PHP are 0 indexed and work from there. The partial final envelope is the only hiccup that needs accommodation, which can be dealt with since all numbers below 489 are possible already. function envelopes(int $n): array { $envelopes = [1, 2, 4, 8, 16, 32, 64, 128, 256]; if ($n &lt; 0 || $n &gt; 1000) { throw new Exception("Invalid Number"); } if ($n &gt; 489) { $n = $n - 489; $answer[9] = 489; } $binary = str_split(strrev(str_pad(decbin($n), 9, 0, STR_PAD_LEFT))); foreach ($envelopes as $key =&gt; $value) { if ($binary[$key]) { $answer[$key] = $value; } } return $answer; } function testEnvelopes(): bool { for ($i = 1; $i &lt;= 1000; $i++) { if (array_sum(envelopes($i)) != $i) { return false; } } return true; } echo testEnvelopes() ? "Pass" : "Fail";
Awesome! I want to take all the examples I see and benchmark them to see the performance differences.
A developer uses what the project they're on uses. :-\
I don't like git prompts in general. I use tmux, so the status of git when I last finished a command in this pane isn't necessarily accurate at all, and I'm going to do a full status and diff before running any commits or checkouts anyways. Back in oh-my-zsh's early days, I contributed [my prompt](https://cloud.githubusercontent.com/assets/1441704/6315428/ded1e6ee-ba01-11e4-8b9d-a67485476e9f.png), so it's easy for other people to try out. I built it based off a few ideas from a prompt thread on the Arch forums, and I like it because: 1. The command is always at the same place vertically, making it easy to scan through output. 1. It has the username, hostname and working directory, so I don't forget where I am (important especially since I spend much of my time on remote machines). 1. It's got a timestamp, which can give me an approximate runtime of a command that I didn't run though `time`. 1. Nothing else that I would find distracting. The best prompts, IMO, are ones that you've customized to your own personal tastes. But you can get some good ideas from other people.
http://www.phpliveregex.com/ is also nice
Well if you go to Drupal.orgs's 'about' page, it says it is 'content management software'. So 'it' doesn't seem to think it is a framework either.
I use zsh with https://github.com/Eriner/zim. It has some nice plugins and [themes](https://github.com/Eriner/zim/wiki/Themes)
This is not really a very good real world test though right? It seems to only care about single request response time, not even loading required assets. Its also not using opcache, or other type of caches. To me its not surprising WordPress takes 500-1000ms to respond. I know the article says it doesn't focus on load testing, but isn't that are more typical real world use case? 2 requests per second is really nothing. The real question is can it still respond at 1000ms at 20, 50, 100 requests per second etc. Also it would be a nice comparison to put it up against a bare metal to validate if this is due to virtualisation on DO, or simply how bad WP (without caching) is.
All heavy CMS' need caches to be somewhat fast. Not using them in tests makes it look horrible. Just look at Drupal; slow and without caching, practically all serious Drupal sites leverage caching.
Couldn't you use actual bit ops instead of string splitting etc if ($n &amp; (1 &lt;&lt; $key)) {
Thats my point. This is not a real test because they haven't used caching...
The reason to get a higher tier server is generally to handle more load. If you are only testing single hits you are going to flatten out when you reach a server capable of loading your application without hitting a bottleneck. I hope no one sees this and thinks it somehow reflects what tier cloud server to get to run... well, anything, let alone WordPress. 
Then they'd just be testing caching and not the speed of the CMS. If you have dynamic things that can't use caching then this data becomes useful.
My point as well.
&gt;If you have dynamic things that can't use caching then this data becomes useful. I beg to differ. You should still cache what you can. This test is at best useless and at worst made for the purpose of throwing shit at WordPress.
Correct. At least give us developers one place without recruiters. Thank you. 
Short answer: Yes.
The only thing this proves is that high cpu droplets are better at cpu operations that other ones... who would've though?
We just have a lot of old projects.
https://magit.vc/
 &lt;?php function test($number) { $bits = str_split(decbin($number)); return implode(' ', array_filter(array_map(function $enable, $index) { return (1 &lt;&lt; $index) * $enable; }, array_reverse($bits), array_keys($bits)))); } echo test(997) . "\n"; // outputs: "1 4 32 64 128 256 512" I tried to make it a one liner :-\
I am using [powerlevel9k](https://github.com/bhilburn/powerlevel9k) with [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh). It does all that and much more.
Too bad git prompts telling you about changed files are super slow in Windows
It's just for simple scripts you want to test not a whole application, There cases that you want to test it with a handy tool of course you can do this with microtime but this lib use microtime itself, just a wrapper for it 
It makes me panic when I hear of effective developers who don't have thousands of bookmarks like I do. What do you do when you hear about something cool, whose name you'll never remember, but don't need it right now?! For example, I just learned about PHPMD - but I already use phan. So, something to check out someday when I feel like goofing around. Then again, the having so many bookmarks *also* makes me panic. There are way too many, and many I don't ever look at again, or even remember that I have. But when I go to trim 'em I'm re-impressed "oh, wow, yeah, I forgot about that one. Gotta keep it!" Hoard much? To answer OP's question: I keep this on speed dial: http://php.net/manual/en/types.comparisons.php And this so I never forget about it: https://learnxinyminutes.com/docs/php/ And, lastly, this for revisiting: http://www.phptherightway.com/
That’s not correct though. You have exactly 10 envelopes, and exactly $1000. You must split the money into the envelopes exactly once, then divide those envelops up into sets that equal in input. So in your case `test(1000) == '8 32 64 128 256 512'`, but now you can't make `1-7` because you have used all $1000. 
No shit
Who would have thought...
I wonder how much do you get writing this stuff for cloudways. Not so much I guess. Marked as spam. Sometimes their blogspam is useful, but such hot news from a year ago...
Why did you change the order of the wording? Now it looks like you are running PHP on Wordpress. :D Anyway, while Wordpress is willing to do hundreds of SQL queries for a single page, it doesn't worth speaking about "performance", it is a benchmark application framework: tests CPU, memory and DB throughput; for every single user, for every request. :)
by_line method use php file() function and load entire file into memory and split it by line breaks that are in the file so a line in file maybe be 10 bytes or 1500 bytes but when use by_chunk method it read file by chunk_size that for default is 10000 bytes,and if line size is for example 20000 bytes in first iteration you get 15000 bytes and in the next iteration you get another 5000 bytes plus 10000 bytes of the rest, got my point?
I mean if you keep reading its talks about itself being used as an integrated digital framework. 
I'm not gonna continue reading if it defeats my argument ;)
&gt; 2 requests per second is really nothing. I wonder, I'm pretty sure 90% of the websites if not more don't even have that load tbh
Yeah would be better if it was a talking paper clip.
https://github.com/magicmonty/bash-git-prompt with the Single_Line theme
Fun puzzle, thanks. &lt;?php $dollars = 1000; $amount = $argv[1]; /* * Spread the dollars out. Start with the smallest envelope, $1, then * keep doubling the amount of dollars to put in each until the last * envelope where we put all the leftover dollars. * * Order from the largest envelope to the smallest which makes the next * step easier. */ $envelopes = []; for ($i = 1; $i &lt;= $dollars; $i &lt;&lt;= 1) { array_unshift($envelopes, min($i, $dollars - $i + 1)); } /* * Find the envelopes to use. Use the largest envelope that's still less * than the remaining amount of money, subtract the amount in that * envelope, then use the next largest envelope for the remaining amount * of money and so on until we've run out of envelopes to check. * * If the amount to check was less than the total in the envelopes then by * always using the largest envelope available the remainder will * eventually hit 0 and we'll have a list of envelopes that sum up to the * amount needed. */ $remainder = $amount; $usedEnvelopes = array_filter($envelopes, function ($envelope) use (&amp;$remainder) { if ($envelope &lt;= $remainder) { $remainder -= $envelope; return true; } return false; }); assert(array_sum($usedEnvelopes) === $amount); echo implode(', ', $usedEnvelopes) . PHP_EOL;
WordPress performs better on PHP 7.1* 
Have in mind your advice and maybe implement in the future versions. thx
Do not learn Drupal! Drupal sucks and anybody that ever worked on Drupal from his own will and doesn't regret it is a masochist or doesn't understand code quality. It's just a bunch of arrays. The forms are horrible.(I think that this last part doesn't apply to D8, as it uses Symfony's form component). If you want to start learning something good for you, go with Symfony/Laravel(Symfony is better). I'm currently working on a Drupal 7 app(because I have to), and we need to migrate to micro-services. Believe me, don't learn Drupal. The legacy code is awful(the technical debt is split between the previous developers and the Drupal-shit-show).
You probably don’t work with Drupal much. It’s okay. 
what a bullshit. reported
What the fuck? I'm sorry but did you just really compare CMS "VS" PHP Frameworks??? 
I use Windows command line. It's a pretty hipster program I doubt many of you have heard of.
[powerlevel9k oh-my-zsh](https://i.imgur.com/z0sMpwF.png)
Replacing Laravel vs Symfony and WordPress vs Joomla threads on /r/PHP will be Laravel vs WordPress threads.
I use an oh-my-zsh theme: [pic](https://i.imgur.com/xBXYpsu.png)
If it uses Symfony components it's built on the Symfony? Right?
I don' think you need microservices. Separate business logic with proper layering.
Done! Won't happen again. 
&gt; one of the Big Three CMS Platforms according to W3Techs that cover a third of the Internet Well sure, its the third most used CMS according to that page, but looking at the numbers its more "Wordpress or something else".
This looks super succinct, which I dig, but it failed when I ran it: assert(): assert(array_sum($usedEnvelopes) === $amount) failed on line 40
The key work here is "framework". The term Symfony actually applies to two distinct products. The first Symfony product is a group of more or less standalone components such as a router, yaml parser, dependency injection container etc. Many frameworks (including Laravel and Drupal 8) use some of these components. You can say that these frameworks are built with (not on) Symfony components. The second Symfony product is the Symfony Framework which is an opinionated collection of Symfony components and other vendor components with some default wiring. At it's base is a module called the FrameworkBundle. If an application uses the FrameworkBundle then you can say it is based on the Symfony framework and you will have a rough idea of how the various components are wired together. Drupal 8 does not use the Framework bundle and provides it's own wiring and application flow philosophy. And if you really want to start a nice flame war, try saying that Laravel is built on Symfony. Then stand back. 
neat, but 2-line prompts mess with my head. my brain is just not ready for that. zsh + agnoster has been my goto
Woops, I forgot to cast the argument as an integer! I thought I had assertions enabled but they were turned off. I've edited my 'submission'. Thanks for keeping me on track ;)
This. mine is https://github.com/caiogondim/bullet-train.zsh
Yes, just not after midnight :)
This is mine: # Git aware prompt - See: https://github.com/jimeh/git-aware-prompt # With colors: https://github.com/jimeh/git-aware-prompt/blob/master/colors.sh export GITAWAREPROMPT=~/code/github/jimeh/git-aware-prompt source "${GITAWAREPROMPT}/main.sh" # PROMPT PS1="\[$bldblu\][\[$txtwht\]\u\[$txtrst\]@\[$bldgrn\]\h\[$bldblu\]][\[$txtwht\]\w\[$txtblu\]]\n\[$bldblu\][\[$txtwht\]\t\[$txtblu\]]\[$txtrst\]" PS1="${PS1}\[$txtcyn\]\$git_branch\[$txtred\]\$git_dirty\[$txtrst\] " # Git aware prompt PS1="${PS1}\`if [ \$? = 0 ]; then echo \"\[$txtylw\]^_^\[$txtrst\]\"; else echo \"\[$txtred\]O_O\[$txtrst\]\"; fi\` " # Show happy face upon successful execution, angry face on fail Looks like this (with colours): [user@host][/path/to/files] [15:04:08](master)* ^_^ x x: command not found [user@host][/path/to/files] [15:04:15](master)* O_O 
Will dots as object property accessors come to PHP too? I can't wait to get confused between PHP and JS source :p 
https://github.com/ziadoz/awesome-php is like a treasure to me
I believe arrow functions is something that is being discussed on and off by the core developers, but exactly if / when it will make it into the language is pretty much anyone's guess. The best places to check for discussions on potential upcoming features are the [RFC page on the wiki](https://wiki.php.net/rfc) and the [internals mailing list](https://externals.io). Features will either target the next major version (8.0) for features with significant BC breaks. Otherwise features will target the next x.y version - currently 7.3 (as 7.2 is in the final stages of pre-release and not accepting new features). 7.3 is likely about a year out. As far as I know, nobody knows when 8.0 might be yet.
personally, i'd rather we focus on getting method overloading. Ever since typehints and such introduced in v7, I feel like it's only natural to introduce method overloading. I don't want to have to do any hack-ish stuff anymore to mimic method overloading-like behavior.
Hah! My reply was not so serious, but now that you got my attention. &gt; And if you really want to start a nice flame war, try saying that Laravel is built on Symfony. Then stand back. What? Also yes, Laravel is built on Symfony. Otwell took inspiration from framework, reuse same or similar components, and is following part of Symfony philosophy. &gt; Symfony is a set of PHP Components, a Web Application framework, a Philosophy, and a Community — all working together in harmony Therefore, Drupal IS built on Symfony (whether these are only component, or a whole framework). Symfony and parts are documented in such a way to present a brand. Yes, parent OP might be wrong since Drupal is not built on `Symfony Framework`, but it's still built on Symfony and that is exactly what I said. Next time when you want to help, try to think about not being a jerk. Also, I never said you weren't wrong, but dang, there you have it. Sources: - https://symfony.com/what-is-symfony - Asked Fabian - Ex. Symfony CT
Here's a more concrete example, lets say you have a file with lines of length 100, 50, 50, 50 $fp = fopen('file', 'r'); while(false !== ($chunk = fgets( $fp, 75 ))){ echo strlen($chunk).", "; } // output // 74, 27, 51, 51, 51, $fp = fopen('file', 'r'); do{ $chunk = fread( $fp, 75 ); echo strlen($chunk).", "; }while(!feof($fp)); // output // 75, 75, 75, 29 Your stated claim is to be able to handle giant things in a memory efficient way, so how is loading the entire file into an array memory efficient compared with: function by_line(){ while(false !== ($chunk = fgets( $this-&gt;fp() ))){ yield trim($chunk, "\n"); } } 
It seems there is enough support for the feature but people disagree on syntax, semantics, etc. Makes it difficult.
You are missing the whole point of the research. Did you even read the article? :) We didn't test the performance of website as a whole (e.g page load number in dev tools). Web performance is a very complex topic, web performance consists of a lot of metrics over many layers. Our test was focused only on the performance of PHP runtime - *"backend" performance* Why we tested? Many agencies and website owners are trying to solve WordPress *backend performance issues* (caused by themes, plugins, and WordPress architecture) by buying VPS with a large number of cores and RAM memory. After investment in VPS, they are often stuck with same or worse backend performance. Cache? Yes, a cache is a must, but you will always have that one request not hitting the cache. Always will be that significant percentage requests not hitting the cache. User experiences and satisfaction of those visitors is also very important. Solution? Optimized code whenever possible. When you reach your limit (e.g WordPress architecture) you could achieve better *backend performance* with better CPU. What's the point of the research? There is no need to spend thousands of dollars on single VPS instance with a large number of cores and RAM. If you have scalability issues, just buy a few smaller instances and put it behind LB. [https://www.youtube.com/watch?v=2u0sNRO-QKQ&amp;feature=youtu.be&amp;t=43m13s](https://www.youtube.com/watch?v=2u0sNRO-QKQ&amp;feature=youtu.be&amp;t=43m13s)
In addition - don't spend hundreds of dollars on VPS configuration which won't help you. E.g $20 droplet has better PHP runtime performance than $640 droplet.
Is there a video of this presentation? Slides are nice, but they aren't really ever quite the same as the actual presentation.
News: https://github.com/php/php-src/blob/php-7.2.0RC5/NEWS Upgrading: https://github.com/php/php-src/blob/php-7.2.0RC5/UPGRADING
All talks are recorded and videos will be uploaded on YouTube by organizers. But I don't know when. Anyway, this talk was is in French...
JS community laughs there is no proper async in PHP. With HTTP server based on event loop as is aerys, you can do exact same thing as is done in node.
What does your composer require or composer.json file look like? That error sounds like something isn't configured correctly.
added it. Thanks.
I wanted to know if anyone has a tutorial to introduce me into creating restfull API's and how do they work in PHP? Thank you so much in advance
Yeah - sure i'm gonna use same models for ORM and APIResource. 