Zend Studio 5.5 FTW
http://dev.mysql.com/downloads/tools/workbench/ 
Screenshots! 
No, *inside a function*, using an undeclared variable in an *echo* will halt the script with an *error* level event. $thevar = "stuff"; function example() { echo $thevar; // will throw undeclared variable error } This, however, will work: $thevar = "stuff"; function example() { global $thevar; echo $thevar; }
i'll just print this f** string for mysql datetime format... ;)
I don't have to try to be an asshole, that comes naturally. Are you slow? Static websites are not developed. There's nothing to develop. Static sites are ***designed***. Do I need to draw that out for you? Pumping out little promo sites using Notepad++ isn't web development, and claiming otherwise is an insult to those of us who have spent years learning complex concepts that require actual problem solving skills. The hardest part of *your* day? Fiddling with margins and padding because the text in your DIV doesn't line up correctly on the left side. You're not a developer, writing markup isn't software engineering, and software engineers fucking use version control. 
For those of us that don't like PDf's http://i.imgur.com/QUVC20Q.png
There is no easy solution. Every morning, your devs will need to check their repo's. Every night, they'll have to do their appropriate pushes/merges. It's a process problem, not a tech problem; you're essentially asking 'how do I organize multiple programmers working on multiple things in multiple places?', and the answer is: use a repository manager, like git. Oh, you wanted something to manage git for you? So do I, brother, so do I. Let me go over clause by clause your proposal: &gt; We are building or migrating a half-dozen or so projects to a new PHP framework based on the core Symfony components. So you're building a framework from a framework? Make sure that this is what you really need; that Symfony itself is not 'enough of a framework' to suit you. Don't build needless complexity- and even framework organization is complexity. &gt; { framework stack as quoted } Don't use twig. Use PHP templates. This is an opinion, but twig has done nothing but get in the way. If you are disciplined enough to not do stupid shit like define functions in views and whatnot, just use PHP. The only reason for twig is to produce templates that are aesthetically pleasing to an HTML reader (non programming web dev), or to use the twig extension mechanism to produce a templating system that limits the template writer to 'safe' functions (hence the call for discipline). &gt; We also have our own libraries, such as a 'utils' library, an API client, etc. we throw all of these together but because we are working on more than one site at a time and have a number of projects we wanted to separate this part of the stack into a separate framework. Lets call it framework1 (we have our own internal name). &gt; So we have one git repository that has all of those dependancies and a repo defined as company/framework. There is a src folder that is autoloaded which is where we put framework related code (ie. code that is common across all apps). The composer file looks something like this: &gt; We work on app code in 'src'. Here is the problem. There is no dedicated developer for 'framework' - each app developer (or teams on an app) make changes to both their respective apps and the frameworks. Lets say you want to add feature x - you go into the framework code and add a class and method calls, then go into the app - the problem is that the app can't see the new class and method calls in the framework without doing the following: And there's your problem. Everybody is editing everything. DON'T DO THAT. You will have merge problems all over. Programmer A will break Programmer B's code with a fix, which will cause Programmer B to 'fix it back', breaking Programmer A. Each application will use the frameworks in their own way, which will produce different needs, and the application programmers will change the framework to suit THEIR application, because they don't know what's going on elsewhere. How will they know changing method doX() is going to break the other app? THEY DON'T. Therefor, they will break it. You gotta understand that you're setting yourself up for failure; you're thinking that git and frameworks will separate concerns of the different teams, but since the different teams are working IN THE SAME CODE (the frameworks), they are not separate in their concerns, they are OPPOSING in their concerns. The fact that there is a nasty commit push pull loop going on is just a reflection of the shit organization that you are setting up. You need to make a framework manager for every framework made. This is a person that is the only one allowed to change Master branch for their framework piece; they review pulls/suggested changes from other people, and they are knowledgeable in all the apps that are being made utilizing the framework. Should somebody need methodX() to do whatever, they make the changes in a DIFFERENT branch and notify the framework manager. The framework manager then approves and pushes the change to master, approves the change with modifications and pushes, or rejects it. The asking programmer is using his own branch meanwhile, so he's not fucking with anybody else. Your issue isn't the tools you're using. They're fine. Your organization of the people and the teams is what is wrong. Source: a decade of managing this bullshit.
I used to use Eclipse+PDT and nothing else; I was never a fan of integrating debugging/version control (I like the context switch between coding, debugging, and project management). I think SVN was built in to PDT or Eclipse, though I never set it up personally. I've never used phpeclipse; actually I've never even heard of it. PDT is pretty decent though, it definitely rivals Zend Studio in terms of auto-completion, finding syntax errors, etc. I'd recommend allocating more RAM to Eclipse ([tutorial](http://stackoverflow.com/questions/142357/what-are-the-best-jvm-settings-for-eclipse). Basically there's an ini file with a bunch of settings, increase the heap or perm size or something, and you'll have a large performance improvement) http://eclipsecolorthemes.org/ is where I found my color themes. Other than that, ask your fellow employees, as some things that work in my situation aren't necessarily the best in that employers situation (eg. maybe they have a build system with some kind of integration, or they tightly couple PHPDoc with redmine, and have a plugin for tracking tickets, etc.)
I dont have the energy to deal with idiots like you. There are those things called "work place". Where you go and you: - draw funny images in photoshop - send the images to a guy that does HTML and shit - send the HTML to a guy that does PHP (in this example) and shit - suck dick Pick one. Great. Now, there are this things called "self employed" where you do all the above. Especialy the "suck dick" part. And suck up to clients. And if a client want's to make a webpage with forums, signups, image processing and is willing to pay - you do it. If the client want's to make a webpage with only his goatse pick and is willing to pay money you ... dont tell him to fuck himself, couse he would, but you do it. And it's a single, static page with a gapping hole in the middle. Now, are you a developer or a designer now? Do you do a brain transplant on yourself? Gee, I hope not, with your IQ it would end up with a lot of cut marks on your ass. Do you change your toolset? Sure, you could, but if you can do the page in the same IDE that you've spent the previous day codding Google Book 3.0 in yesterday, you do. I have no idea how many times more do I need to state that those are edge cases, not a "PHP rockstar daily work" but you still end up doing those. And if the IDE you spend your fucking day with has the added motherfucking bonus of beeing able to edit the shit out of a remote file and change &lt;img src="goatse.jpg" /&gt; to &lt;img src="goatse.png" /&gt; I would preffer that one, over the other one, in which I end up with a picture of a guy asshole on my drive, in the VCS or anywhere else. All I'm trying to tell you (and the other you, whaver, piss of wanker) is that there are thing that do require the use of a full blown IDE and setting up a project, there are things that do justify and call out for you to use a VCS and then there is goatse that does not. For fucks sake enough with this bullshit already.
1st - No more locking up with bigger projects. It takes a few seconds to scan projects when starting but not a big deal. 2nd - Floating windows - they work much better with PHPStorm which is important to me as I use up to four monitors when coding. In general they handle the windows (docking etc.) very well. 3rd - For some reason I had to wait a second before I could type into the NetBeans with the last update every time I switched away from the IDE. This was very, very annoying. 4th - Easy text size adjustment. I work on a laptop screen, three screens at work and four screens at home of various sizes. Being able to easily adjust the font size is a big deal for me. I'm a pretty simple developer. I have not setup the debugging (which worked great in NetBeans) yet but it is not a killer feature for me. I expect that it works just as great if I get into something complicated and I need to step through code.
Self promotion: I have a nice [library](https://github.com/chadcf/stamp) which will enable you to never have to remember or look these up again.
http://www.php.net/date
&gt; If the client want's to make a webpage with only his goatse pick and is willing to pay money you ... dont tell him to fuck himself No, I do tell him to go fuck himself. I have integrity as a professional, and would not want to be associated with garbage like that. 
You want to see what happens when I run your first example? [This.](http://hupcapstudios.com/projects/test.php) You can see my setup [here](http://hupcapstudios.com/projects/info.php)
Excuse me, you need to call the function as well. If it's still blank, that's because it is logging the error instead of printing to screen, you should be able to see it in your PHP/Apache error logs.
http://i.imgur.com/u6sGAFP.png
Agreed. I don't understand the need to reiterate what is already in the documentation.
Then it is reporting it to los instead of to the screen.
It's a quick reference that I made, so I could tape it to my desk. Glancing at a little card is a lot quicker than opening a web page in a new tab. I'm sorry that you don't find this useful.
I pull that page up every few days
Reminds me of the intranet system I'm currently working on, back when I first got it. Many ajax queries, all of them run by a single file that received the raw mysql query and returned the results. Yes, it accepted inserts, updates and deletes.
**TL;DR:** htmlspecialchars($allInputFromUsers);
PHP MyAdmin? Who uses that shit program? SQL Buddy FTW.
PHP MyAdmin is what's setup on our servers, and good luck getting my boss to change that. =/ Next time I use mySQL for a project, I'll give this a try.
You can always use your personal license at work. Made sense for me since I do some Android development in IntelliJ, so I bought just that instead (which includes all PHPStorm functionality). You could always watch out for discounts on easter and other holidays, they often do 50% discounts (though for the personal license only)
A few thoughts: 1. When you're under heavy development, there's no point to keep on bumping versions. I'd adjust your versioning strategy a bit and work with branches instead. Much easier to just specify `dev-branchname`. 2. During development, you can override package locations to local git repositories. You still need to commit, but you don't have to do the pushing. 3. I kinda agree with /user/badjuice and /user/leiven, although not half as strongly. You probably have a process problem if you're constantly making edits to your framework. You can probably do a much better job gathering requirements, making edits, writing tests, etc for your framework instead of going in every minute. If you can't fix this, I would at the very least work with seperate branches in your framework repository for the specific projects, and merge them in when you're a bit further. It may also not be a bad idea to leave the responsibility of making framework modifications to a subset of your team, and work with github issues. If you really need multiple edits in a day, try to fix this!
[PHP cheat sheet](http://www.cheatography.com/davechild/cheat-sheets/php/pdf/).
[Specifying a custom repository](http://getcomposer.org/doc/05-repositories.md) does indeed sound like a way to improve your workflow. Using a local `vcs` repo will avoid the push/pull, and you could try one of the repository types besides `vcs` if you don't want to commit before testing from your apps. I believe it's possible to avoid git entirely using the [`composer`](http://getcomposer.org/doc/05-repositories.md#composer) or [`package`](http://getcomposer.org/doc/05-repositories.md#package-2) type: each developer would be able to point their apps directly at their local working copy of the framework. They'd still have to run `composer update` whenever the framework files are changed, but git would be taken out of the equation. I haven't tried this myself so it's possible I've misstated something. If you go this route I'd be interested to know what kind of setup you end up with; please update!
I don't see any point in sending my logs to chrome. If I really need to see my logs, there are tons of other solutions for that which don't involve modifying my code.
Sequel Pro. All that you'll ever need.
Thanks for the comment. I don't want to use it, I'm forced to do it by my architect.
Not at all. I just don't see the point of changing the logging target when I can just log where I'd normally log and use a log viewer of some kind. Typically I just tail the log in a console.
Well, have a look anyway. Depending on why he wants you to use eclipse, this may work for you. afaik, it is capable of using regular eclipse plugins if there is something else you need which isn't included.
As a former Mac developer I loved this app so much. Since moving to Linux I have been running HeidiSQL in Wine. Not quite the same experience but it's pretty darn close. 
It looks like we've been doing it wrong all this time. Clearly, the way to go is to do single page "websites" in notepad++ via ftp and without version control (who wants to add a new level of complexity anyway?). God, we're so dumb - what with our "professional" setups and all...
Like I said, enjoy your websites from 1996. Can we see some examples of your webshites? I've not had a good laugh in a while - do you have anything that DOESN'T look like a 1997 geocities site?
If he's forcing you to use a specific client then why doesn't he have specifics on what/how to set your environment up? 
&gt;Where is the "close" option for a project? Top left corner. Big x. &gt;Why is there only a "delete" option? Dunno what you mean. &gt;Why do I have to open a new project before I can close an other? You don't. &gt;Why does it take so many steps to set a project url? Not sure what you mean. &gt;Why can't the "step through", "step over" and similar actions for debugging be made in to buttons I can click with my mouse? You can. 
you may want to look up 'google api php client'. it should return among the top results a google code project / php library which will help facilitate in retrieving google analytics data. :)
Sublime text is not an IDE. It's a pretty text editor.
This is just my opinion but Netbeans is a lot better than Eclipse. Seems to faster and is easier to use. Great if you want a free IDE.
Yeah, [this site with your picture on it](http://www.goatse.info/)
That's really cool. But why do I have to instance it? Why not, say, `Stamp::format("13/12/2013", time())`?
yeah, i was thinking i should have posted it somewhere else but didn't know where and figured maybe some other developer might have come across something similar. 
Go back to your sandpit little kiddy.
How bout Javascript? 
I like how their article picture is a SQL injection not a XSS.
I've always used PDT with mylyn for issue tracking and always found any vcs (git/svn) implementation to be very buggy/hard to use in eclipse, therefore I used the command line to commit. If he's a big eclipse fan then why not use something that's more put together like Aptana or even Zend Studio? I haven't really heard of a shop that forces an IDE on someone; that seems pretty silly to me. I would also like to point out that the pros/cons for eclipse has been recently talked about: http://redd.it/1crtfj. TL;DR: Eclipse sucks, PhpStorm is awesome.
Cool but AFAIK, date() does not follow locales, strftime() does. That's why I always use strftime...
Plus it's a massive security hole.
Read number 6.
I believe he meant real-time visualisation of incoming traffic, not replicating Google Analytics. 
Well that's a funny way to spell Sequel Pro.
Title made me scream. Thankfully all was not as it seemed. Well done.
I have 32Gb of RAM and run Netbeans from a SSD. The project is on a local drive (a hybrid SSD/HDD); and really the project was not that big (PHP + CodeIgniter). It had something to do with 7.3 because I didn't have the problems prior to upgrading. I find the four screens come in handy - i have two in portrait and the laptop screen - although lately I have just been using three screens with one horizontal and two vertical on each side. My setup is editor on main horizontal screen, web browser in top left, Firebug in bottom left. MySQL Workbench top right and then usually a google browser in bottom right.
Glad you like it!
I love PHPed coming from dreamweaver. I tried many IDE and found it to be the best out of the box. Haven't tried PHPStorm though yet so the question remains in my mind. PHPed vs PHPStorms. Who wins?
There are tons of php libraries that do the same and also you can implement a task scheduler
I've found this website to be pretty useful for date() formatting. http://www.b2ben.com/php/phpdate.php
Ohohohoo, shit talking over internet. So brave. Here, have an upvote.
Check out the [DateTime](http://php.net/DateTime) library.
Perhaps adding an option like as an appender for log4php would be a better option than a separate library but then I still, I would have to agree, why wouldn't I just log it to a file in that case as I normally would?
That script hasn't been updated in 2 years. In fact checking it, there is a known XSS exploit
If there's a better solution for that than vagrant, I've yet to find it. 
I don't understand #3. That seems like a pretty legitimate reason to roll your own code.
OWASP's [XSS cheat sheet](https://www.owasp.org/index.php/Abridged_XSS_Prevention_Cheat_Sheet) is a good read, as well as the other cheat sheets and articles. Every developer should have OWASP bookmarked.
Read this: http://php.net/manual/en/security.database.sql-injection.php
&gt;But neither the failure or success function runs and alerts anything. Nor should it. This isn't valid JSON. You can't have functions in JSON. You should return data, and data only. You'd want to have a flag indicating whether the query was successful instead. Additionally, your code is insecure and prone to SQL injection attacks.
It's possible that's shorter for brevity, and it's not really relevant to the question.
ah. Piwik does realtime visualization too, so my answer still stands.... partially :)
It doesn't need to. I use ssh tunneling with a firewalled mysql port. Welcome to 2010!
That wasn't really my point.
I don't think it does still stand. It sounds to me like he's looking to implement real-time visualisation of traffic on his website using his GA data. 
Piwik does do realtime visualization. If you check out the demo and go to Visitors -&gt; Real-time Map, you'll see new visitors popup... eventually (it's not exactly the most popular site on the Internet). Using his own Analytics data to implement real-time visualization is another story altogether. Google does a lot of processing on their side, and unfortunately we're not privy to that information. What we do know is it's Javascript based and it stores cookies on a user's machine (http://www.morevisibility.com/analyticsblog/from-__utma-to-__utmz-google-analytics-cookies.html) which track duration of visits, referers, search engine queries, etc. How do you get realtime statistics from this? Every request to a page sends this information back to your server. Your server (PHP based, or whatever language you desire) processes the page information such as browser user-agent, IP, referer, search engine queries, resolution, etc., collates the information according to a given period of time, then displays it. From there, simple mathematics will allow you to alter dates and times to make it look like things are realtime when there's no visitors around, or if there is visitors around, just use the latest data that you receive. And so on. If you want to visualize things on a map, simply use IP to location services/databases. I believe it's called Geocoding? If I recall, there's a multitude of databases out there with this sort of data. You simply convert the IP to whatever format is required, pump it through the database and there's the location. Plot a circle onto a map and display to the user. That's how I would guess Analytics works. Whether it's what Google does, I don't know.
&gt;OP did not ask how to use GA to implement it on their website. He did, if you're able to read in-between the lines a bit. &gt;How I can achieve Google Analytics Realtime statistics This implies that he's talking about the real-time visualisation (as there's nothing else even remotely relating to "real-time") and how to implement it. &gt; for my web? Implies that he wants to implement it on his website. &gt;I was wondering how google did that. As in, the real-time visualisation, not the data gathering.
You start by hiring someone capable to implement it for you.
My father, he got me into programming at a very early age on a Commodore-64 and introduced me to a world where I could create, develop and enjoy. 
&gt; The fact that there is a nasty commit push pull loop going on is just a reflection of the shit organization that you are setting up. Sounds like the same pains I see with subversion set-ups. They definitely should restrict master branch access a bit. There's likely a few ways to do this. The Linux project's organization is nearly unmatched &gt; So you're building a framework from a framework? Make sure that this is what you really need; that Symfony itself is not 'enough of a framework' to suit you. Don't build needless complexity- and even framework organization is complexity. [Symfony2 Components](http://symfony.com/components). Components != Framework. &gt; Don't use twig. Use PHP templates. This is an opinion, but twig has done nothing but get in the way. If you are disciplined enough to not do stupid shit like define functions in views and whatnot, just use PHP. The only reason for twig is to produce templates that are aesthetically pleasing to an HTML reader (non programming web dev), or to use the twig extension mechanism to produce a templating system that limits the template writer to 'safe' functions (hence the call for discipline). Like simpler ways to disable/enable escaping (all too often a designer will miss proper escaping), a sane way to use helper functions/filters, extendable templates, sandboxing of templates, more sophisticated whitespace control, named arguments, and a more sane include system? Up until recently, I also advocated against template systems. Most (including Smarty, until recently), don't add much logic or features. They do end up getting in the way. They do end up hurting productivity: but in a different way. I've investigated and tried implementing some of those with just PHP. But with just a handful of features, PHP-only views become rather complicated, cumbersome, and frustrating to work with. I've seen way too many theme, view, and layout systems. Nearly every project comes up with its own way to use PHP as a template. Whether it includes Zend_View, Magento's Layout, or a CMS like Joomla/Drupal. Perhaps you need to show everyone your superior ways, but most of the world hasn't seemed to caught on to making a simple and robust PHP view system and has instead chosen to implement their own. tl;dr PHP may be an almost half-ass template system, but Twig is a template engine (template/layout/theme system) that allows you to keep your view logic in the view-- where it belongs-- while the developers and designers can focus on more important things. Edit: Fix some 4am grammar.
'Security risk' only begins to describe it. The typical shared website is insecure, will get compromised, and the hacker will likely attempt to use server resources to their advantage. Disabling a handful of functions reduces their attack vector. Hell, disabling system command execution, preg_replace's /e, and eval() will stop 90% of script kiddies. 9% will try to send spam or add the server to a DDoS attack. 1% will use curl for their DDoS or some other weird reason. Once AT&amp;T calls because your network is the source of a DDoS attack (because of these 'infected' PHP websites) the admin needs to start taking appropriate precautions. As much as these companies would love to go back to a simpler time where we didn't need all of this complex security. Where we just serve your content as fast as we can, the reality of PHP application security steps in and the company needs to make sure that its massive amount of bandwidth is used responsibility, even when the website is hacked. TL;DR They have a lot of bandwidth and power. Websites get hacked way too often. Shared hosting companies have a responsibility to make sure their resources aren't abused. Disabling a few functions and securing SMTP a bit takes care of 99% of issues.
Well for me it's because PHPstorm isn't as good at editing/navigating as Sublime Text but it's stellar at debugging. So for the most part I'm using Sublime and if I just want to quickly check the properties of an object I just var_dump the object with xDebug pretty output. But then if I actually need to start debugging then I will switch over to PHPStorm because the xDebug extension for Sublime is a hack.
Your TL;DR is incorrect and misleading... If you read the 20 points you'll notice it is more complicated than one function call missing parameters that can make a huge difference.
2 is odd. Valid data may very well be an XSS vector. I'd change the rule to ESCAPE "using relevant rules for the context it’s used in." Addition: Do not forget to escape normalized attribute values before reinserting in the DOM (JS).
I view validation as an important precursor to escaping. Minor duplication later as I emphasised URL validation, for example. Making a list of points for DOM based XSS would well exceed 20 ;).
You're missing the 20 points needed to clarify how to go about that though ;).
It's an essential read. The full cheatsheets for XSS and DOM-Based XSS are pretty good.
I liked the note about [HTMLPurifier](http://htmlpurifier.org/) at the end. It's a really great library and is simple to use. I use it whenever HTML enabled user input will be displayed on the page.
Sadly I don't have a mac :(
Its just blogspam, I wouldn't really expect a quality article.
Read all the points. HTML escaping is not the PRIMARY means of escaping JS/CSS/URLs. They each have native escaping defined in their respective specifications which goes first - then HTML escaping follows depending on what context the result is in (attribute? element?).
I have used my company's training budget to purchase books and online training courses, like NetTuts+, Safari Online, and Peepcode. 
Lets dig through to 20 steps, one by one. **Never pass data from untrusted origins into output without either escaping or sanitising it.** htmlspecialchars($dataFromUntrstedOigings) **Never forget to validate data arriving from an untrusted origin using relevant rules for the context it’s used in.** htmlspecialchars()? Or do you have any example where you actually want to keep some of the HTML code? **Remember that anything not explicitly defined in source code has an untrusted origin.** okay okay you got me. htmlspecialchars($allInputFrom~~Users~~**UntrustedSources**); **Remember that htmlentities() is incompatible with XML, including HTML5′s XML serialisation – use htmlspecialchars().** Good point! **Always include ENT_QUOTES, ENT_SUBSTITUTE and a valid character encoding when calling htmlspecialchars().** ~~Why should I include ENT_QUOTES, ENT_SUBSTITUTE? Or wait.. ..do you still use mysql_query() (and) without mysql_real_esacpe_string()?~~ EDIT: +1. I realized that this is true after I read point 14. **Never use htmlspecialchars() as the primary means of escaping Javascript, CSS or URL parts.** See my other comment. **Never use json_encode() to escape Javascript strings unless using PHP 5.3 and RTFM.** True, JSON_HEX_TAG is less to write then htmlspecialchars(). **Use rawurlencode() to escape strings being inserted into URLs and then HTML escape the entire URL.** +1 **Never ever pass escaped or sanitised data from untrusted origins into a Javascript execution context: a string later executed as Javascript, e.g. setAttribute(“onclick”, “PLEASEGODNOTHERE”).** Oh, I didn't thought of that people can be that stupid. This is actually a valid point. **Validate all complete URLs if constructed from untrusted data.** Or just htmlspecialchars($allInputFromUntrustedSources). **Never validate URLs using filter_var(). It doesn’t work and allows Javascript and Data URIs through.** +1 **Never include resources loaded over unsecured HTTP on a page loaded over HTTPS.** Uhm, what has this to do with XSS? **Sanitise raw HTML from untrusted origins using HTMLPurifier before injecting it into ouput.** Or just htmlspecialchars($allInputFromUntrustedSources). (+ see my other comment) **Sanitise the output of Markdown, BBCode and other HTML replacements using HTMLPurifier before injecting it into output.** Or just use htmlspecialchars($allInputFromUntrustedSources) before you convert the Markdown / BBCode. Oh wait, I just realized why your point 5 is true. (Markdown: [lalala]_(link" onload="alert('xss')")) **Remember that HTMLPurifier is the only HTML sanitiser worth using.** ..and that you don't need it if you just used htmlspecialchars($allInputFromUntrustedSources, ENT_QUOTES). **Adopt the Content Security Policy (CSP) header and abandon the use of inline CSS and Javascript where feasible.** Or just htmlspecialchars($allInputFromUntrustedSources, ENT_QUOTES). **Always transmit, with content, a valid Content-Type header referencing a valid character encoding.** Why? Can you explain why this is important to avoiding XSS? **Ensure that cookies for use solely by the server are marked HttpOnly.** +1 **Ensure that cookies which must only be transmitted over HTTPS are marked Secure.** I don't know what the secure flag does so I don't have any comment on this. **Always review dependencies and other third party code for potential XSS vulnerabilities and vectors.** +1 **Conclusion** I should rewrite my TL;DR a bit: * htmlspecialchars($allInputFromUntrustedSources, ENT_QUOTES). * don't write stupid code like setAttribute(“onclick”, &lt;?= $userInput ?&gt;). * Don't leak cookies * Don't use librarys with security holes 
http://www.zend.com/services/certification/ sounds like a good resource to start looking at. There are online courses and there wil be centers to do it in your area. One thing i see is that a lot of PHP devs, slowly move into the project management side of things. In that case, the Prince2 certification is a good way to go.
I've taken the ZF 1 course. The instructor was excellent, and it gave a good base. Will probably take ZF2 eventually for same reasons. O'Reilly has a per month option for all of it's books (at least a few months ago it still existed). I'd suggests tons of practice, perhaps taking a shot at creating your own framework. That learning experience is worth more than any book/course/etc..
Sadly, Aptana is dying a slow and painful death. They used to have [regular releases](http://www.aptana.com/products/studio3/releasenotes) (over 1 a month), but they haven't had a single release in around 8 or 9 months now. It's been eclipsed (hah) by Sublime Text I believe. 
I don't really have anything to add to the replies except to say thank you to fourth_floor for introducting me to respect/relational, what a little gem of a library! In fact, that whole combination of components you've chosen looks really interesting, I think I might give it a try.
I used to use Netbeans with the jVi plugin, never took PHPStorm for a ride, though I've used some JetBrains products back in my .Net days. But re:IDE point, there are probably tons of "php programmers" who have never used a real debugger in their lives. In a professional team, the last thing you want is some billy B.A. who likes to code with print statements on a live server with his dinky integrated FTP client. But yes OP, dictating your dev environment is usually a red flag for incompetency.
Similarly I'll make a pitch for [php|architect's training](http://www.phparch.com/training/), which I do make money from, so full disclosure. OTOH, it has been running for some time and the course material has been developed before I took it over at the beginning of this year, and we're ramping up the schedule. Similarly we put on [Tek13](http://tek.phparch.com), which is expensive but large and varied. It depends on your employer's budget and your needs as to which conference/training solution is right for you.
A few explanations: 1. You must set the first three parameters to htmlspecialchars() - the first being the data, the second being the escaping type (ENT_QUOTES escapes single quotes otherwise they're not, ENT_SUBSTITUTE correctly replace invalid bytes) and the third to ensure the escaping is done according to your output encoding (default is UTF-8 only for PHP 5.3+). 2. Before HTML escaping Javascript, CSS or URLs, anything injected into those contexts must be natively escaped, i.e. URL encoding, CSS escaping or Javascript string literal escaping. 3. Validation is a necessary precursor to escaping. If someone injects a javascript URI they can perform XSS despite escaping. Bad validation IS an XSS vector by itself. 4. If Content-Type head with encoding is not set, IE6+ guess the encoding. Attackers can manipulate this to inject UTF-7 encoded HTML which bypasses a UTF-8 configured escaping function. 5. Content Security Policy prevents the execution of Javascript and CSS (including their URI forms). If escaping fails, a CSP can still save you on supporting browsers. This is a form of Defense In Depth which is good practice and support in browser will only increase! 6. Cookies marked secure are only transmitted over HTTPS - not HTTP. It prevent tampering by man-in-the-middle attackers. That extends to serving all resources for a HTTPS page over HTTPS too. If you allow a HTTP resource to leak into a HTTPS page, a MITM can inject an XSS exploit and gain control over the HTTPS exchange. If you think about it... That would be one way to perform XSS even though a session cookie is only served across HTTPS (i.e. HTTP is not subject to user account actions!). 7. Sanitisation is different to escaping. When sanitising our input is HTML (not markup free data) whose HTML markup MUST be preserved, e.g. comments, content from RSS feeds, etc. If we escape it, we lose the markup and get gibberish. 8. People are stupid but let's go easy on them. DOM based XSS is more complex that reflected/stored XSS since you need escape (sometimes several times and in different ways) according to how the data is moved through the DOM to its final resting place(s). 9. Under PHP 5.3, json_encode() needs almost all the new constant flags. These were not available in PHP 5.2, so anyone escaping javascript using barebones JSON escaping is both a) in contradiction with the Javascript specification and b) ignoring the need to escape characters interpreted as HTML BEFORE the javascript is interpreted. Browser parse the HTML first - Javascript and CSS second. For example, HTML entities are NEVER escaped by json_encode() in PHP 5.2. 10. I wish I had tenth point... ;)
Would you prefer a book? That's only partly a joke. I am writing a security book which is free online. http://phpsecurity.readthedocs.org/en/latest/ Next time, look before you leap to the "blog spam" conclusion...;)
Markdown and BBCode do not generate safe HTML. Their output MUST be sanitised. Do not expect those writing such libraries to actually tell you that. They almost never do. Those I checked with were completely uninterested in telling users that the output of their libraries was unsafe. Framework plugins make the same mistake - check any Symfony bundle supporting Markdown if you don't believe me and try using them to parse: &lt;script&gt;alert('ROFL');&lt;/script&gt; This goes through Markdown parsers UNCHANGED because Markdown is a superset of HTML, i.e. all HTML is valid Markdown syntax :P Check out the official Markdown syntax spec on HTML: http://daringfireball.net/projects/markdown/syntax#html
Zend is the best. I use my work license (corporate license) so it's free for me, and it's easily the best full IDE out there. I don't care what anyone says, you can't honestly believe that an IDE made by anyone other than the language creators would be better. Sorry JetBrains. If you're not into IDE based programming, and looking for just a simple extensible editor, go with Sublime Text 2/3.
7 posts, and they all link to your blog. That is pretty much the definition of spam for reddit. &gt;A widely used rule of thumb is the 9:1 ratio, i.e. only 1 out of every 10 of your submissions should be your own content. Given that you never post anything but your own content, and you don't actually comment much or contribute to the community other than by attempting to drive traffic to your site, I can safely say that your purpose here is self promotion. 
What are your main reasons for choosing to switch to MariaDB?
Mainly due to the fact that it seems to be the 'it' thing to do. Many, many companies are starting to make the switch as we speak. Not to mention it's been noted as being 'faster' than traditional MySQL. &lt;http://developers.slashdot.org/story/13/03/28/0335222/mysqls-creator-on-why-the-future-belongs-to-mariadb&gt;
&gt; Mainly due to the fact that it seems to be the 'it' thing to do. Programming isn't a popularity contest. &gt; Many, many companies are starting to make the switch as we speak. No they aren't. &gt; Not to mention it's been noted as being 'faster' than traditional MySQL. Facebook uses MySQL, you will be fine with MySQL.
How about "because Oracle is a doodypants and they'll just bungle it sooner or later."
Well, what is it you are trying to do, then? 
That's not an answer to my question. Again, what is it you're trying to accomplish?
I use some combination of the following, assuming unix like system. cd $project_root composer update cd vendor/name/ rm -rf dev_package ln -s /path/to/existing/dev_package Simple enough for me, doesn't require constant bumping and updating and PHPStorm, if youre using it, will handle the multiple git roots properly.
I would look into a Lynda.com subscription, I pay for all of my developers to have access to thousands of training videos on a huge range of topics. Or depending on what projects you work on tutsplus premium might be helpful as well.
I'm seeing Percona pop up a lot more frequently; we're using it at work and it handles very large databases no problem.
you don't really need to know more than that. I'm just trying to use sockets instead since curl is easier, and I'm trying to increase my skill level.
Source or a link, or it didn't happen. =D
&gt;you don't really need to know more than that. Yes I do. This is a typical XY problem where you are asking about your attempted solution rather than the underlying problem you are trying to solve. There are many unknowns here which needs to be answered to give you an optimal solution to your problem. For instance: 1. Is it HTTP? 2. Is it going to execute multiple requests? 3. In Parallel? 4. What's supposed to happen? etc. If you actually told me what the underlying problem you are trying to solve is, I just might be able to give you an informed answer. &gt;I'm just trying to use sockets instead since curl is easier Wat.
No, no they won't. CentOS is based on upstream Red Hat of the same version. Enterprise Linux versions have to support their packages for a very long life cycle. Red Hat will not be switching away from MySQL for quite a while, and neither will CentOS. Fedora, on the other hand, is in the process of testing packages for MariaDB in Rawhide for inclusion in Fedora 19. There are still a large number of issues to work out, so we'll have to wait and see what happens there. Yes, some of the other distros have also announced they will be moving away from MySQL to MariaDB, but it will take a couple release cycles at least to get there.
With much support from Oracle. Oracle has incorporated a number of patches from Google, Facebook, and Twitter into their code base where it makes sense. However, a lot of stuff the big guys need to change does not make sense to include in the mainline, because it's stuff 99% of the user base will never encounter (no, not bug fixes or even features, but support for very low-level and custom hardware). In these cases, forks with custom patches make a lot of sense.
Well, sorry ) Could you enlighten me a bit?
Of course Monty would say that. He has his own interests in people moving and buying support from Monty Program and its partners. the speed claims are dubious to say the least. Stuff like that is very easy to manipulate with custom builds, non-standard configurations, and edge-case testing. In truth, MySQL 5.6 outperforms MariaDB 5.5 using standard workloads. Some other less biased sources are less convinced as to some of the claims which have been made. Switching an entire critical infrastructure simply because it's "the thing to do" is... not good motivation. I swear I don't understand the cargo-cult mentality which is so pervasive in Web companies.
Honestly asking, what shenanigans? Yes, there were some issues with some other projects acquired from Sun, but MySQL has been well stewarded. the stuff with the distros has nothing to do with "douche-baggery," at least not wholly on the part of Oracle. That is a very complicated issue which involved lots of interests, and it's purely a political move, not technically-driven.
It's a mix of both things. the PHPixie\Pixie class has factory methods for instantiating core classes. So when you create a new \PHPixie\Request instance using $pixie-&gt;request it actually acts in a more DI way. I have considered full DI for a while, but it would make it very ccumbersome for the developer, as he would have to specify which parameters to pass to each constructor. Having a $pixie object (which by the way most IDEs should allow you to autocomplete properties of, unlike the cases with ArrayAccess based DI) would be much simpler for the developer, and still testable.
But it's still not really DI, it's requesting services from a container, an object (when using DI) should never ask for it's dependencies, it should be given them, the developer should have the choice to either instantiate their own dependencies or provide configuration that will pass dependencies into the object. I'm not putting it down, like I said I haven't looked through it all so I can't comment on implementation, just pointing out that this isn't dependency injection.
MariaDB also has [storage engine](https://kb.askmonty.org/en/about-sphinxse/2941/) for interfacing with [Sphinx Search](http://sphinxsearch.com/). If you do any fulltext searching on your MySQL data, you should be using Sphinx already, and this will make your life much easier.
Well you're right. I should've worded that differently =)
I will have a proper look through when I get chance though, interested to see what changes you've made
And what about all the valid quotes, angle brackets and ampersands used in the Markdown input? They get double or erroneously escaped and potentially break the markdown parser? There's a reason we sanitize/escape on output - and not on input.
You can easily use google to find out all the details, but in a nutshell, Oracle has neglected MySQL quite a bit since acquiring Sun. I won't get all hyperbolic and say they're "douchebags", because Oracle is a business and they will do what is best for them (i.e. concentrating on their own high-priced products versus a free competitor they happened to acquire along with Sun), but the end result is that we are in a transition period right now where it's like that MySQL will slowly but surely be replaced by compatible but better competitors (like MariaDB or Percona Server).. Ask yourself this: If MySQL was still really good and the best choice out there, would we need (or have) Percona Server or MariaDB, being produced by people who used to contribute directly to MySQL? 
7 self-made posts from a blog that has been running since 2004 is spamming and self-promotion? Seriously? Next time try to look at the underlying data before exposing your ignorance.
I believe you mean PHP 5.3. If you're not married to any PECL extensions then it doesn't surprise me. Also, as for the static analysis part of the slides, I've found php-analyzer to cover more than HH (but the slides are old). It's also much easier to hack on. Edit: Fixed word
MariaDB is very stable and compatible, there is really no reason to stick with MySQL.
It might be useful to shrink down the copyright notice and add some of the PHP date constants as well, with what they translate to. I use those more often than manually figuring out the format. http://www.php.net/manual/en/class.datetime.php#datetime.constants.types
IMHO Oracle had every right to sue google. Oracle required you to make implement whole Java if you want to make a JVM and say that it is Java. Google decided to implement only a subset of Java in their JVM, so it's google the one who broke the license. Java prides itself on portability between JVM devices. Now imagine if everyone started doing ehat google did, and you had some stuff on Windows JVM that wan't present on a linux one. The portability would go out the window that way in a few years. That's why Oracle had a problem with it.
Have you looked at [Jenkins](http://jenkins-ci.org)? 
Checking, Thank you.
Will your application actually BENEFIT from the switch? If so by how much? I hate when people switch to 'cool' bullshit without any idea why. Yes it's faster but under WHAT conditions? Is your application utilizing those conditions in order to benefit from it? If it outperforms MySQL while doing 50 joins in query, do you have a query with 50 joins, if not why are you bothering? The answer to this question is within your application, not anywhere on the internet. And make sure they release security patches at the same speed as MySQL does.
i've been using postgres for a year and i love it
I switched my db to mariadb. Little, to no performance gain. Some of my longer running queries did get a boost. But really you only need to switch if you plan on using the special table engines provided by mariadb. If you're question the switch, you probably don't need it. 
If they're interested in improving the per-request response time seen by the client, it's difficult to do that by throwing more hardware at the problem. That's because faster servers normally just give you the ability to service more requests simultaneously, instead of processing the individual requests faster (they tend to have more cores rather than faster cores). 
I see that claim a lot: "Oracle is neglecting MySQL." But how? Since the acquisition, the MySQL team has produced several solid releases. Performance is improving, more bugs are getting fixed, and feature sets are expanding. As to the idea that only faltering projects are forked, I'm not sure where that comes from. Many open-source projects have forks. CentOS is a successful fork of Red Hat. By your logic, Red Hat must be failing. Also, Oracle did not "happen" to acquire MySQL along with Sun. Oracle fought and made concessions specifically for MySQL. Oracle DB and MySQL don't necessarily compete, they often compliment. MySQL is in a better position to compete with SQL Server than Oracle DB. 
&gt;Programming isn't a popularity contest. Obviously, however, popular software is worked on the most, and is developed the farthest because it's popular. It may not be a contest, but in the open source world popular is equivocal to sustainability. &gt;No they aren't. Yes they are, Wikipedia, Mozilla, Arch, Slackware, Fedora, and openSUSE have all made the switch so far with many more thinking about it and/or making plans for a switch. &gt;Facebook uses MySQL, you will be fine with MySQL. Wrong, Facebook uses a _heavily_ modified version of MySQL. The entire MySQL team at Facebook have publicly stated many times that the only reason why they're still using MySQL is because it would prompt an entire base rewrite. [Read More](http://gigaom.com/2011/07/07/facebook-trapped-in-mysql-fate-worse-than-death/).
It's actually quite the opposite (from what I've read, but your situation might be unique).
Many databases in which I manage carry huge amounts of data, anywhere from 1GB to well over 100GB in size and can have as many as 350 million rows. The issue that I'm facing is general stability; once your working with databases that large, which are used as often as these are, you're forced to wonder whether or not your database engine is performing with peak efficiency.
Thank you very much for the namedrop. I'll look into it.
We're never going to back `array()` again. We were looking at Hiphop a while back, but two critical things happened: 1. We moved to PHP 5.4. 2. The compatibility information disappeared. I can't in good conscience do any sort of work towards using Hiphop if I have no idea how compatible it is with the released version of PHP, much less what (specific) version it's trying to target.
Check out phing, also, the term you may be looking for is "continuous integration" 
Careful with this logic. It's similar to saying PHP is unsafe because you can eval() unsanitized user inputs which might unlink your whole server. It's not the fault of PHP, it's just bad programming.
switched from mysql to mariadb 5.5, running various php apps with no issues whatsoever. how much of boost was it? not sure, but it works well so far. the sphinx engine came in handy once or twice.
For Facebook, HipHop may be worth the effort, but for most other projects (even really big ones), one year dev time is not worth 45% response time. And you can achieve this by other means. I mean, PHP is seldom the bottleneck, it's mostly the Database which is the bottleneck.
And it's ~~compression~~ hashing is awesome.
Percona and Maria are based off of similar forks, especially the XtraDb storage engine.
Do you already use InnoDB and switch to XtraDB? Or have some really huge myISAM tables? Use replication? If not, then the advantage of MariaDB that you are seeking is probably not performance, but you are likely to see more open (non sun) enhancements.
Because Oracle kills software.
If your response times were 500ms, maybe it'd be worth it then. They started at 30ms and went to 16ms. Unbelievably not worth it.
This question usually shows its head once a week on this sub. I would honestly say that the best IDE is the one you ***actually use.*** Suck answer? Probably, but at the end of the day, you will be most willing to use what feels the most comfortable to you. If you are developing only for the web and web technologies, (LAMP stack, remote servers, Web Services, etc.), then [PHPStorm](http://www.jetbrains.com/phpstorm/) is probably going to be your best choice as it is made specifically for that purpose. It has great Git integration, MVC framework support, automatic deployment and a host of built-in web development tools. It also has a robust plugin system that allows you to extend functionality to suit your specific needs. If you are developing PHP and other languages, (Python, Ruby, Java, etc.), then you will probably want to go more of a [Eclipse](http://www.eclipse.org/) route, as that has the ability to develop for these languages quickly without having to fire up another IDE just to develop properly in another language. Also, vim is a great tool that you should keep in your arsenal because nothing beats the ability to develop quickly on a remote server if necessary. I do NOT recommend it as your only solution though. To lose the assistance of a fully integrated development environment is short changing yourself out of a much faster application development process. 
I will say, of the ORM's I've seen, I find Eloquent gorgeous and inspiring, honestly. I've used it as an example of of what to do for some pseudo-ORM stuff I've written myself. 
There are a lot of systems which will help you do this. We use [capistrano](http://capistranorb.com/) but it certainly isn't the only option.
I've heard good things about phptek
Why would Cat ever instantiate Kitten? Pass those in. $cat-&gt;addKitten($kitten); Instantiating them inside of Cat would make it a composite, creating tight coupling between the two. 
You could use an kitten factory and pass it in the Cat constructor. In kitten() use that factory to get new instances.
But then the factory will still have to depebd on the container. Because it will face the same priblem as Cat does
What if you don't know the number of kittens beforehand? E.g cat-&gt;kitten() is called inside other class that depends on Cat
The funny thing is that tuenti is a facebook like social site.
I think in this scenario you would pass cat to your DI container, rather than the other way around. 
It's better to depend on 1 object (container) than on multiple objects (kitten, dogs, or whatever weird objects you use). Let the container handle those objects, and pass the container instance to the objects that need it, creating a single point of modification in your code (in the container) if one of your objects is changed...
You're missing the point. They also cut CPU load by 2-3x and memory used by 10x. That probably means being able to serve 3x the users on one machine, as well as all the power savings from the lowered CPU load. If the performance increases scale so that a 200ms page load goes down to nearly 100ms and a 500ms page load goes down to 250ms, then that's a huge win for capacity planning. You've just enabled yourself to save a ton of money in future and give yourself room from growth on the servers you do have. It's perhaps not that worth it for a site with only a few frontend machines, but at scale that's a huge win. Now think about Facebook, who do over a trillion pageviews a month. People say that the database is ultimately the bottleneck so being CPU-constrained isn't a problem - in the traditional LAMP stack this is often the case, but everyone knows any site worth its salt and already serving a ton of users is going to use multiple layers of caching to take the load off its databases and serve most of its reads from RAM. Google, Facebook, Twitter, Reddit, Etsy, Ebay... they all do it. Being CPU-bound is actually the ideal situation, because it's far easier to scale sideways when that's your problem. Also, the static analysis that you can do on your codebase as a result can give you further easy wins for performance and enable you to do proper type-based linting on your code and better enforce development standards. Sounds like a fairly big win to me.
PHP 5.4 has been out for a while and it's a lot faster than 5.3. They mention in the article HipHop doesn't support any features implemented since 5.3 however I believe they were running 5.4, hence the question: with the greatly improved performance of PHP 5.4, is it still worth it to write code in HipHop over standard PHP?
Due to their forking they are still using hphpc, rather than hhvm (which is even faster). Additionally, one of the goals of hhvm is to match all the php 5.4 features, which will likely not be possible with their fork. &gt; At present we support most PHP 5.4 language features, including eval, traits, exceptions, late static binding, closures, magic methods (__get, __set, etc.), typehints, autoload, nowdocs, etc. Off the top of my head, the main features missing at present are namespaces and short array syntax, which we plan to add in the coming months. Also, there was some missing functionality with closures, but we've recently fixed that and the fixes should make it to our open-source github repo soon. Source: Drew Paroski, HHVM developer - http://phoronix.com/forums/showthread.php?79635-Facebook-s-HipHop-2-0-Virtual-Machine-Is-Very-Fast&amp;p=324968#post324968 PS: For those not super familiar with HipHop, hphpc is the compiled version (php =&gt; c++ =&gt; binary) where as hhvm uses the just in time compiler (php =&gt; bytecode =&gt; machine code on the fly).
Ideally you would pass a Kitten Factory to the Cat. The Cat would then call the Factory x number of times and return the Kittens created. Or http://discuss.joelonsoftware.com/?joel.3.219431.12
What would be the performance impact of using reflection/annotations with each object instantiation ?
They are not parsed for every instantiation of objects if you use a cache: http://mnapoli.github.io/PHP-DI/doc/performances So every configuration backend (array, yaml, annotations...) have the same performances with a cache.
Netbeans is definetly more "feature" centric. Eclipse tries to be too general and is a pain to use for php de( but is faster than netbeans ). PHPStorm is really great but i still use Netbeans too.
Stopped reading this after this line: sudo apt-get install libapache2-mod-php5 It's more concerened with NuoDB and seems like and advertisement of it and not a LAMP scalability article. I'm interested in the concept of decentralized database though. Any benchmarks for us =)? 
I agree with passing the factory, but I kind of despise the joel link.
But if you depend on 1 object, its a service locator and not DI
If you plan to use Jenkins with PHP projects, I recommend [checking out this site](http://jenkins-php.org/)
This is precisely why [FIG](http://www.php-fig.org/) is important. So we can have more pieces that are easy to stitch together in to something that doesn't become an incoherent mess of unmanagable spaghetti code.
To echo your question on another topic, I'll repeat my answer: [Annotations] are not parsed for every instantiation of objects if you use a cache: http://mnapoli.github.io/PHP-DI/doc/performances So every configuration backend (array, yaml, annotations...) have the same performances with a cache. Note my answer applies for [PHP-DI](http://mnapoli.github.io/PHP-DI/)
classless controllers feel wrong =)
select * from millionrowstable limit 0, 350000000; ... and that query now freezes mysql... need to switch to something better/faster/cooler than mysql!
Thanks! ;)
Please look into [composer](http://getcomposer.org/) so that you get your PHP dependencies through a composer.json file. It is not efficient to bundle the libraries while there is an excellent package manager for PHP. Here is a sample composer.json to get you started. { "name": "taylorchu / dyvo", "require": { "twig/twig": "1.12.*@dev", "klein/klein": "dev-master", "gabordemooij/redbean": "dev-master" } } Furthermore there are package managers that can handle Javascript dependencies too but i couldn't recommend any because I haven't used them. Maybe someone else might jump in on this. 
It's all about balance surely? If you're going to use magic, you need to understand at what cost that magic comes. In the case of magic getter/setters you take a performance hit, so when using these constructs in the code, you should be making an informed decision about whether the tradeoff is worth it. The same thing is true on the frontend with the jQuery/native JS debate. Do I really need the weight and speed hit of jQuery just to grab a few elements and hide/show them? DI Containers are always going to be slower than just instantiating yourself. Of course they are, you're doing more stuff before getting an object. So ask yourself; how much do I care about testability? How hard is it going to be to mock this? How likely am I to need to swap this out in the future? Make the decision based on that. We're supposed to be software engineers. That means solving problems using knowledge and judgement, not blindly using every technology or technique you see on /r/php. That way lies madness.
all you have to do is: - authorize user - pick transaction from list to edit - display form filled with data from selected row - validate data - update record there are some tools available, but i doubt using anything for such simple task will fit 'just get it done' sentence.
If you want a more specific answer, give us a more specific example.
SQL Injection which is injecting HTML... The picture shows someone's momentary confusion over the difference between SQLi and XSS but also demonstrates that XSS can come from the database if you're not careful ;).
&gt;It's better to depend on 1 object (container) than on multiple objects (kitten, dogs, or whatever weird objects you use). No, it isn't. This transforms the DiC into a Service Locator, which, in this case, would most likely be an anti-pattern. The dependencies of a class should be explicit and without any ties to a container. 
Some rambling thoughts: If the Cat class is the class responsible for instantiating Kittens, how do you test either class in isolation? Do you 'just instantiate' the kitten yourself in the test case? But then why did you need to instantiate it within the cat in application code? Presumably because the cat holds resources that the kitten needs access to (let's call that 'milk'), or the kitten wants to hold a reference to the cat that spawned it. So, do you then duplicate all that instantiation code (that normally happens in Cat::kitten()) in the test case, just so you can obtain a kitten instance? Aren't you then writing a whole load more harness boilerplate, and less actual test code? It certainly seems so. If instantiating a type requires some co-ordinating work external to the purpose of that type, make another to do that work. It's a cleaner separation of responsibilities anyway. Writing loosely coupled OOP is kinda a distinct topic from DI; it's still a goal you should have whether you're using a DIC or not. But I find *always* considering how you're going to test each class in isolation really helps you flush out the couplings. I like [this explanation](https://www.youtube.com/watch?feature=player_detailpage&amp;v=hBVJbzAagfs#t=231s) of the relationship between testing, coupling, DI and using factories.
Fair enough, I was answering this part of the question actually: &gt; Now I've just seen someone post about making a DI container that used annotations and the like which are even slower.
Have you benchmarked your claims in a meaningful context? Mow many objects does your object graph consist of? Tens of thousands? How much time of a real web request (including database access and templating) is spent in the container? Profile. Don't jump to conclusions based on some benchmark you found on the internets without looking at the big picture. I'm pretty sure that the difference is negligible in most cases. Finally, the title of this post is misleading. Yes, ArrayAccess and annotations will add overhead. Do all DI containers use them? No. Besides, many of them actually *do* have the code generation / caching to deal with the problem.
[ ] understood difference between response time and page size (in bytes)
This is by far the best way because you can now test the Cat class in isolation by mocking its dependencies.
(Sorry for the shitty formatting.) I don't mean to be a contrarian and suffer the karmic wrath of you collected scholars, but I've got a bit of a different perspective: * "could have invested time more wisely": As a programmer, you've got your agenda. They have theirs. * re: features: this could be said for most any bleeding edge framework, programming language, or database. Lots of 0.1 features / semantics may change in 0.2, but that didn't stop you from exploring. * The remainder, agreed. I'm not an amazing coder. I've got my own two (most-time-consuming) projects that, by and large, define the general shape and size of programming for me. When I read that people are doing programming projects in Rust and Ruby, I don't think "Boy, they could have invested those hours better. I mean, learning a language to sufficiency, that's at least 10 weeks. Times two languages. Times a programmer's salary. That's at least... *a lot of money wasted*!!" It's more like "Hrm, would Rust / Ruby do the job better? Glad you're exploring that for me, 'cuz I *surely* don't have the time." I was ecstatic to read the post, and just as much to read the replies here. The divergence between them, to me, indicates the nature of what's being discussed. i.e. "If there's consensus in a community on a particular topic, it's safe to say that the topic is at a point of stasis." (IMO.) While entirely inappropriate for both projects of mine (currently), HipHop being brought to my attention is a fantastic thing, as it puts yet another perspective in my (rudimentary) toolbelt. Thanks for yours as well.
Sure do. If you cant unit test code in isolation then you have big problems. In saying that its trivially easy to mock objects.
Unless Cat is just a Factory for Kittens, then you should add the kittens in like Nicoon said. What does it mean 'you don't know the number beforehand'?
Agreed, Composer is awesome. I actually think this is a pretty exciting time for the PHP community, and that's largely because of Composer. I see a shift to building good, well tested, standalone components, as opposed to all-inclusive frameworks. Even the frameworks are going component based (ie. Laravel, Symfony, etc.). As @petsagouris suggested, you can now create your own framework with all the components you like best. So I say go ahead and "roll your own", just make sure you're taking advantage of all the excellent libraries that are available.
Markdown and BB-codes doesn't use quotes in their syntax. So it won't be any problems with using: markdown2html(htmlspecialchars($userInput, ENT_QUOTES));
I use PhpStorm myself but didn't suggest it as it isn't free.
&gt; Don't jump to conclusions based on some benchmark you found on the internets... Especially a benchmark using a 6 year old version of PHP.
Do you find any particular problems with how it's implemented on https://github.com/dracony/PHPixie-ORM/blob/master/classes/PHPixie/orm/result.php Where ORM\Result asks the locator $pixie-&gt;orm-&gt;model('model_name') for an instance. Making a separate factory seems an overkill imho.
This is one of the advantages to using 'plain old objects' for model classes. Where the model objects just holds data, and other services request the data and send it to other services to manipulate and/or present that data (like a controller). Yes, the objects that request the data ARE dependent on a service classes, but it isn't a service locator. The scope of the container ends as soon as you leave your application code (input, output, databases). The database is a service. Your Kitten and Cat are not services, although you may have a KittenService and a CatService that loads and manipulates them. Ideally, the Kitten and Cat do not need to know anything about those services. Realistically, it ends up more complicated. Some ORMs like Doctrine2 help you cheat and keep your code decoupled (it transparently creates a proxy so that your Kitten is really DoctrineAwareKitten, but all of your code just uses Kitten). You may *try* to make your container do these things, but that comes at a cost: your container is no longer static. Its bigger. It can no longer be cached as easily. Likely slower as well. The container, as it is now, is meant to be something that only changes with developers/code-- a limited scope. tl;dr; Objects have a scope. Dependency Injection is meant for application-scope (services). As soon as you 'leave' the application, you need other services to step in. 
I'm sorry but this argument does not stand in PHP ecosystem. It suffers enough from the amount of reinvented wheels (most of which are terrible, but still used by newbies that don't know any better). Even when all you're trying to achieve is to learn something, you'd be better off watching how it's already done by (most likely) smart guys of the industry and then thinking of ways to improve the work. I guess one situation when this would be a good idea is when you yourself are that smart guy of the industry and think your wheel will bring revolution to the ecosystem. OP might be that guy, which is why I'm asking the questions instead of saying "It's already been done, gtfo".
&gt;ORM\Result class get a database result cursor Uh-huh... &gt;It iterates over the result and instantiates classes e.g. Model\Kitten that extend the ORM\Model class What does the Model class provide? Sounds like something which just exists for the sake of having something named "Model" without actually bringing anything to the table. Why won't plain objects suffice? &gt;Obviously it needs to create instances of the Model at runtime, so they can't be injected. Yes it can. this is where a hydrator comes into play. You pass in a hydrator which in turn hydrates the data into objects of type X.
Apatana
ORM is actually pretty complex here. Take a look at: http://phpixie.com/tutorials/orm/
Thanks for the feedback. Very good questions, so I'll try to answer them as best as I can. &gt; How does your real dependency injection differ from what others have done? The main thing: **it's practical**! The configuration step of a container is always scary or boring (depending on your level), so with Reflection, annotations, YAML, you really end up with the simplest configuration possible. Others: - It is not tied to a specific framework, when I see how Silex, ZF2 or Symfony are tied to their own container it makes me sad because a container is really a simple thing when you use it (it's `get()` basically). So I like to have an alternative to what their container offer, and pick good ideas from each. - It supports annotations (though many others do too now) - It caches definitions (though I know ZF2 do too) - It uses proxies, but ZF2 and Symfony2 are moving on that too (thanks to @ocramius work) - I plan on integrating AOP (through either the AOP PHP extension or GO-AOP library) &gt; How exactly does it protect against falling into SL? First, through "education", i.e. the documentation ;) ZF2 and Symfony2 docs are known to "encourage" the SL pattern (though that's not really their intention). Also, there is work in progress to integrate "correctly" the container into existing framework (to prevent you to call it). &gt; While we're at it, why do you think SL is an anti-pattern? It makes your code dependent on the container. So I may be a problem at some places (e.g. your services), but OK in other places (e.g. in your controllers, if you don't plan to unit-test and reuse your controllers). It's mostly an anti-pattern because that's the thing you tend to do when you discover DI and start using it, and you think you are really doing DI (I plead guilty on that). &gt; Do you think it was wise to create yet another DIC implementation when there's already plenty on the market you could've contributed to? For me yes, for the community not really, I started it mostly to learn, and for fun. Now, merging it in/with something else is possible.
I love reinventing the wheel, and I think it's a good idea. But reinventing the wheel and trying to have others use it, it's not the same. So I think the question is valid.
Why should I have to care about how you've currently implemented it? I mean, the entire reason for you asking this question is because you're looking to replace your current implementation with something better, is it not? 
I think the word factory may cause confusion, but to me injecting your dependencies is whats important. And that class to me is great! I wish more of my guys coded like this. Injecting pixie into Results means you can now test the results class and not have to worry about pixie. In fact you don't even have to have a db connection; all you need to mock is $pixie-&gt;orm-&gt;get(model) and the results class is fully unit testable. This gives you lots of flexibility and is a fantastic way to write code.
Looking from your code, it looks as though there's too many spaces deleted.
... + memcached + redis + varnish
Injecting the container of dependencies is in many ways similar to using a static service locator. You basically give all dependencies to the subclass. The point of dependency injection is defining and isolating specific dependencies, which you don't, by passing the entire container.
I haven't used this yet, but PHP really needs a great framework-agnostic social sign-on module. Thanks cartalyst!
That ORM (among others) makes your model dependent on your database. It shouldn't matter what loads the model: an ORM, a memory cache, an object store, or even a session. The design is coupled.
What does a DI **framework** bring to a dynamically typed language that can't be done by the language itself? 
I see both sides of this. On one hand, in general we (the PHP community) has to start learning how to share code better. You just have to look at how well languages like Python and Ruby do this, and what it adds to the community. And fortunately for us, with the success of Composer, that is starting to happen in the PHP world. This is great! On the other hand, I don't think you can ever discourage someone from trying to make something that already exists better. If you have a new, unique approach to something, by all means, do it! Taylor Otwell could have used Symfony or Code Igniter (which he actually did try), but instead he decided to build his own framework...and now we have Laravel. Taylor actually [encourages developers](http://laracasts.com/video/eloquence-emerging-laravel) to "reinvent the wheel", if they feel they can make that wheel better.
Taylor Otwell case is covered by the: &gt; I guess one situation when this would be a good idea is when you yourself are that smart guy of the industry and think your wheel will bring revolution to the ecosystem I think there's 3 stages of knowledge in this context: * Reinvents the wheel because doesn't know any better * Knows better, doesn't reinvent the wheel * Reinvents the wheel because knows he can do better I propose to skip 1. and go straight to 2. and then maybe eventually even 3. if a developer feels like it. My problem with people doing 1. is that a lot of them think they're 3. Called Danning-Krueger effect or something like that. It just slows them down as developers. I'm no guru, but I'd like to think I achieved a relatively succesful career in a relatively short time. And that's exactly because I stopped reinventing the wheels early on and started extensively studying/using code of more smart/talented people instead.
What does a PHP **framework** bring to a dynamically typed language that can't be done by the language itself?
My opinion about DI Containers in general aside, all great inventions came from people who fixed stuff which wasn't broken. So reinventing the wheel is not a bad thing, nobody would accuse the writers of Laravel, Symfony or CodeIgniter of reinventing the wheel. It's always nice to have alternatives.
A lecture I would recommend: http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1 
in any given language dynamic or other wise, a framework largely consists of components that a) follows a convention, b) solves common problems. At least in the popular languages, design patterns are rarely part of the language itself. Nothing in PHP or Java, forces you to use MVC for example, but both languages have MVC frameworks to define the convention. That said, dependency injection, is painfully simple in PHP and any other dynamic language. Spring (Java), Castle (C#), Wallaroo (C++), etc, all exist, because DI is difficult in these languages, and they actually NEED these frameworks to simplify things. I am asking in earnest: 1) What does a DI framework offer to a dynamic, interpreted language? 2) Why is it worth the CPU and memory loss? 3) Why is it worth the additional complexity to your code? 4) Why is it worth the additional third party dependency? You may think I am asking this to be a dick, but these are perfectly valid questions when deciding what tools to use. 
What's the point of your question... As Phil Sturgeon said, you can do everything in vanilla PHP. The framework is here to help. For example, how do you inject with a @Inject annotation with pure PHP?
Not sure exactly. You can always put them in a div together, and float the slider left and the CTA right. &lt;div&gt; &lt;div id="nivoslider" style="float:left"&gt;Slider Content&lt;/div&gt; &lt;div id="calltoaction" style="float:right"&gt;Call To Action Content&lt;/div&gt; &lt;div style="clear:both"&gt; &lt;/div&gt;
I wouldn't, because I fail to see WHY I would do that in any dynamic language. I just don't see the point in it. I don't see it as any kind of simplification over what the language can do natively. In other words, I do not see the trade off between the complications / resource usage of a DI framework in PHP over using the DI pattern in pure PHP, so that's why I ask.
If you go on the homepage, you'll see how "classic" DI differs from DI using a container: the container takes away all the work of creating and injecting dependencies. In other words, I don't want to have to create instances and pass them around to create other instances. I only want to get "Foo" and don't care what Foo needs. I don't see how this is different in Java or C++/C#, except in PHP you don't have to write an interface (thank you duck typing) but it's still common sense to do so.
Thanks for the info. 
Are you planning on a PR on my benchmarks? If so I may do a new post as Orno\Di has also evolved a little since I first posted it
Type-hints and too many dependencies are all good things but I was looking at https://github.com/dracony/PHPixie-ORM/blob/master/classes/PHPixie/orm/result.php public function __construct($pixie, $model, $dbresult, $with = array()) One of the big advantages being: https://github.com/dracony/PHPixie-ORM/blob/master/tests/orm/resultTest.php (love me some testable code) He has injected all this dependencies via constructors. I have not studied the code $pixie, $mode, $dbresult and so on they could well be containers of dependencies or something else in your terminology (static service locators etc.. etc..) I have not studied what they are. Since your method takes time to do then it was not what I was thinking of.
Right, but DiC is generally not something that a language takes care of. Only you can answer if they are useful and worth the memory, but the fact so many exist means asking why DiC exists in general is an odd question, especially on a link to a specific project. Go ask fabpot why he made Pimple, or why Taylor wrote the L4 IoC, or why Zend have one, or... you get the idea.
$pixie shouldnt be in there. It's a service locator. It's not a real, directly used and specific dependency that is interacted with. "My" method basically says don't pass in $pixie but $pixie-&gt;orm. (Without knowing exactly how that framework works...) That immediately clarifies which dependency is really needed by the subclass. Namely $orm (that's a factory right?) and not $pixie-&gt;controller or whatever irrelevant stuff, also available through $pixie. Anyway check out Phur. 
See, it's even faster now. You were saying PSR-0 and Composer were going to slow you down! Good work on including DiC. You might look into using an existing solution: http://mnapoli.github.io/PHP-DI/
Not really. The model is load via the values() method that just accepts the array. It doesn't depend on the database. 
The purpose of Pixie being there is because the code creates instances of other class in a loop and $pixie object holds factory methods, And mocking service locators of this type is really easy. basically you just do: (object)array('db'=&gt; &lt;your_db_mock&gt;, 'html' =&gt; "HTML mock etc") so it really is very similar to having those objects as cisntructor parameters.
Actual spaces. Before and after operators, by the array keys, etc. Especially compared to the actual ORM code which does put spaces there: ORM style: $model = $model-&gt;where($model-&gt;id_field, $id)-&gt;find(); $model-&gt;values(array($model-&gt;id_field =&gt; $id)); vs Documentation Style: $model=$model-&gt;where($model-&gt;id_field,$id)-&gt;find(); $model-&gt;values(array($model-&gt;id_field=&gt;$id)); Maybe its just me, but I can see, more clearly, where symbols are used in the first style.
For others who may be wondering, "SL" above is referring to [the service locator pattern](http://en.wikipedia.org/wiki/Service_locator_pattern).
Have you considered using javascript (jQuery) and ajax requests?
/r/Wordpress 
I can appreciate that you've put a lot of hard work into this framework. I think one aspect to the negative responses you get up here, however, have more to do with the seeming constant promotion of your framework. As the code improves and people find it useful for their needs, then uptake will follow, but in the future be mindful of the fact that good frameworks don't have to promote themselves, good word of mouth does it for you. Keep improving it though.
I actually designed this to work with or without composer. In both cases, libraries go in vendor/directory.
Thanks for your feedback. You can get the entire files from http://www.phpclasses.org/package/8000-PHP-Authenticate-users-with-OAuth-based-sites.html and modify as your wish.... Cheers!
Find here for light-weight oauth wrapper class demo from http://www.reddit.com/r/PHP/comments/1czvoc/oauth_cheat_sheet_and_authentication_demo_for/ and source code available in https://github.com/kayalshri/socialmedia-oauth-login or http://www.phpclasses.org/package/8000-PHP-Authenticate-users-with-OAuth-based-sites.html Cheat sheet for END Points : http://www.cheatography.com/kayalshri/cheat-sheets/oauth-end-points/
I use PhpStorm / IntelliJ. Great feature set and fantastic development.
Reflection for detecting the constructor injection is cached too. However, when injecting, Reflection is still used for verification purposes (e.g. in order to check that the number of parameters match before calling). That's something that could be worked upon (like making it optional for production).
Yeah I forgot about it! I'll try to check everything is good today and make a PR.
https://packagist.org/packages/kayalshri/socialmedia-oauth-login
I have noticed a post : Benchmarking Dependency Injection Containers http://happyaccidents.me/blog/benchmarking-dependency-injection-containers#.UXjTtNeBvQ4 Probably you are looking for the same.
I asked this during their last big 75% off sale. The consensus seemed to be that, no, there are no downsides. Often IDEA is updated first, and those changes filter down into the other products. Sometimes, it works the opposite way. But, generally, if you own IDEA, you effectively have all of the other IDEs (except their Objective-C one).
Good stuff, I'll do an updated post this weekend
Typos aside, what you are doing here is parameter injection via prepared statements, which is immune against SQL injection. The reason for that is that the SQL you send in via the prepare() method is compiled in the DBMS, and the parameters is then bound to the compiled query. SQL injection can't happen because there are no longer any SQL to inject into. So, in the case of inserting into the database, yes, this is secure. Security, however, is context-dependent, so just because you insert your data with prepared statements does not mean that your application as a whole is secure. You need to guard yourself according to how the data is eventually going to be used.
Actually the skeleton project already has that in a similar way: https://github.com/dracony/PHPixie/blob/master/classes/app/page.php That's basically your AppController. Even more you're also encouraged to modify the $pixie container https://github.com/dracony/PHPixie/blob/master/classes/app/pixie.php Unless I misunderstood you of course.
when i need to show the data to the user, do i need to have a prepare statement as well? 
i also liked [this article](http://marcelog.github.io/articles/ci_jenkins_hudson_continuous_integration_php_phing.html)
This is one of those examples where it would make sense to wrap it with a static function since its use is very not state dependent. 
Maybe use redis or even cookies to cache last page view and check http_referrer. 
You could do it like xkcd where you have a random button linked to a URL like `/random.php`, then that redirects to a URL that shows the image. So you'd have to create pages like `/image.php?id=123` that will show each image. To speed it up you can use JS to do an AJAX request then change the image and use the HTML5 history API to update the URL.
Used Homesite for many years, then changed to TopStyle. Now changed to Mac and have been testing Komodo IDE. But testing now PHPStorm which seems quite cool. To upload files I use sitecopy. http://topstyle4.com/ http://www.manyfish.co.uk/sitecopy/
You can do it like this, or you can generate the link and have the "random" button point to the image.php?id=123 directly. Both are good options depending on what you want to accomplish. The former allows you to simply hit random.php and get a random image, while might be useful for some if, say, they want to bookmark the link or something. The latter option saves you a page request since it doesn't have to follow the link in the "Location" header to get the user to where he/she wants to go.
Some libraries don't provide PDO. OPs code kinda looks like CodeIgniter, which has it's own Active Record Database abstraction layer.
It should be enough. I usually cast it just to be sure, so I would write: if(intval($item_id)==0) return false; $qry = $this-&gt;db-&gt;query("SELECT * FROM bids WHERE item_id=".intval($item_id)); ...
It certainly can, but Composer just makes life so easy! :)
I suggest using floats as /u/Greely said. The width on .sliding-wrapper is full width, take this off or down to the right size. add float:left(also take your top margin of 38 off this div as well if you want them to line up or add the same margin to the picture on the right. add float:right to the picture div. Also, as Greely said use &lt;div style="clear:both"&gt; after both divs or you will run into some issues....
basically it's part of the configuration manager. the include() includes a file that returns an array of configuration options (e.g like in Kohana). So it's secure code =)
Cool, is that a new feature?
awesome thanks for the help. I'll try that out
Your code is very badly indented. It should be: if(!empty($file)){ $options = include($file); if (!is_array($options)) $options = array(); }else { $options = array(); $file = "some_string"; } My rearrangement is: $options = null; if (!empty($file)) $options = include($file); else $file = "some_string"; if (!is_array($options)) $options = array(); BTW: I don't know why you want to update $file to "some_string". Additional note to other replies: what is done on line #2 is permitted. Maybe not recommended practice. See [php.net](http://php.net/manual/en/function.include.php): &gt; Handling Returns: include returns FALSE on failure and raises a warning. Successful includes, unless overridden by the included file, return 1. It is possible to execute a return statement inside an included file in order to terminate processing in that file and return to the script which called it. Also, it's possible to return values from included files. You can take the value of the include call as you would for a normal function. (...)
Just to mark it as not important to the question. And you still assign twice to $options. I'm looking for some neat rick with conditional statements =)
No.
So I wanted to load it from a cache, I have to create a mock and insert it into the container (essentially service loader). Either replacing it or creating a new container just for this model? Why not just `$cat = new Cat($values);` or `$cat = Cat::load($values)`? There's not much you can do about it, its a [fundamental criticism](http://stackoverflow.com/questions/2169832/data-mapper-vs-active-record) of active record ORMs. You can reduce its dependencies and consider [facades](http://en.wikipedia.org/wiki/Facade_pattern), but the current design is dependent on the database class (you can't omit it-- but you can mock it)
Choose a framework and dive in. I'd recommend Code Igniter if you are just starting out. It's very accessible and will introduce the concepts. From here move on to another framework.
Well if you do: $cat = new Model\Cat(); $cat-&gt;values($your_data); you can load the data without touching the database. 
It does something totally different. All I need is to either load data from file, or if the file doesnt exists, create it and use empty data. (I omitted file creation etc from the case) 
I don't think this is a true 'Sandbox' and I don't know who would actually execute a potentially malicious code to with PHP parser to 'test' it. I wrote a solution to checking untrusted/third-party code (phpAudit) which (in my opinion) is definitely more secure to use and a bit more practical: https://github.com/AlekseyKorzun/php-audit Edit: I misunderstood the nature of PHPSandbox and assumed it does regular matching but while doing eval() throughout the code. So disregard this comment.
"Here is list of useless URI's that web sites use to provide authentication services with their API's, they are essentially the same but have different names" That will.. help you how? I think you are missing a point what 'cheat sheet' is. 
Well you obviously will have to mock the DB class as I mentioned before (just to get a handle for it from the service locator). You can then test Model specific methods that don't require the DB. 
You obviously didn't read the article very well; it doesn't "execute" the code at all, it parses it and analyzes the parsed representation of the sandboxed code for vulnerabilities. Because it uses PHP's own internal representation of the code it won't be fooled by attempts at using variable variables and the like to hide what the code it trying to do. In fact, your phpAudit mechanism is extremely vulnerable to that very problem: if someone wishes to execute disallowed functions like system() they would simply pass the following code to your audit and it would pass with flying colors: $x = 'sys' . 'tem'; $x("rm -rf /"); Your attempt at "auditing" the code follows the exact retarded pattern others have tried and failed ever since PHP came on the scene: basically looking for keywords that look like they're trying to do bad things. This is silliness; you don't mitigate a wide-open security hole by attempting to patch it up piecemeal, you **close** the hole and then open only as much access as you need. Not to mention the fact that, because the PHPSandbox class is working with a PHP representation of the parsed code, it is able to overwrite functions, classes, etc. by modifying the parsed code before allowing it to be executed. &gt; which (in my opinion) is definitely more secure to use and a bit more practical Your opinion is wildly misguided.
I don't think using framework will progress his PHP. There is a big difference between a 'framework monkey' and an engineer.
Never worked with code igniter, but I thought the word on the street is that code igniter uses a lot of outdated concepts, and has a strong PHP4 way of doing things. Is this wrong?
People are downvoting you but not telling you why. You should never place a user-definable variable into a SQL query directly, even if you're casting it. Use proper escaping, PDO, or whatever your framework provides. "Should be good enough" isn't good enough when there are methods that are properly vetted and actually proven.
What? Come on I expect more than that coming from you, there is a singleton accessor for the container but it's not even documented, and in code it's strongly deprecated. It's only left for migrating from V2, but I'll be removed eventually. I repeat, the container is **not** a singleton.
This is exactly what I'd do. You sound like you have the fundamentals down, so there's no point in reading more books or tutorials that teach those same fundamentals. Use the manual at php.net (downloadable versions available from: http://php.net/docs.php) as your main reference and you're good to go. You want to strengthen your knowledge too, in particular learn about security. Use PDO for database access, learn how to prevent XSS and other attacks, how to sanitize user data, etc. A good starting reference is http://www.phptherightway.com/. Once you're comfortable, as /u/alekseykorzun said, code something. Pick a project and do it. That's the best way to learn. Try grabbing a database and creating a frontend for it. For example, grab the IMDb database from http://www.imdb.com/interfaces , write a parser to parse each of the files into a database, then write a frontend that effectively duplicates IMDb's main functionality. 
When I said 'execute' it was in a context of having a PHP application evaluate malicious PHP code. That just sounded all sort of weird to me. I see your point but I'm curios how does script detects issues such the one provided in your example? My assumption was that it does the same matching that a 10 line shell script can do. I know one approach is to have RunKit and override core 'bad' functionality but I don't think it's used here. 
Nope this is true but is still a great stepping stone due to it being so accessible.
&gt; Well you obviously will have to mock the DB class as I mentioned before (just to get a handle for it from the service locator). If the model was decoupled from the database, I wouldn't have to mock anything. (I originally said the design was coupled, and you disagreed). Even `__construct(ORM\ModelLoader $modelLoader) {}` would make it less coupled-- as long as ModelLoader was an interface. Where that modelLoader implementation has all of the api-specific code. Whether its from SQL, memcached, configuration files, a chain loader, a proxy loader, or no database at all. &gt; You can then test Model specific methods that don't require the DB. There's an infinite number of ways to load the data, and your model has non-static methods that works with only one.
True, the advantage though is that you have to create only a single model class. Your solution would obviously require different loaders for different models.
I'm the developer of the library. It doesn't scan the code directly, in source form; instead, it uses the excellent PHPParser library to turn the source code into an AST representation of the original code. So this: $x = 'mail'; $x(); Becomes an array of representative objects (like this pseudo-code): [ Variable(name = 'x', value = 'mail'), FunctionCall(function_name = VariableCall(name = 'x')) ] PHPSandbox is then able to read that the variable called has a value of "mail" and check that against its whitelist of allowed functions. Since "mail" isn't in the whitelist it will throw an exception. PHPSandbox isn't simply scanning for keywords, its intelligently deconstructing the code and determining its intent. Once everything checks out, then it rewrites the AST representation so that all function calls are actually called on the internal PHPSandbox instance's call_func method, so even at runtime it can intercept what the code is trying to do and be sure that it's not trying to do anything it isn't allowed to do. So, a function call like: mail("spam"@spam.com"); becomes: $sandbox-&gt;check_func('mail') ? mail("spam@spam.com") : null; Only then is it executed.
Because it's working with a parsed structure of the code, it is able to to statically analyze the code for vulnerabilities. One glance at the line count in the library would show that's a little more involved than a 10 line shell script: the main class is over 5000 lines of code.
Correct.
Depends how he approaches it - a framework can be a great place to learn good and bad practices (if you actually explore it) -- or a segue into becoming a framework monkey if all he deals with are the convenience abstractions a framework provides. Reading code is a great way to better oneself, but in the beginning, one obviously lacks that expert intuition that can differentiate between good and bad code. To address this: focus on reading the code of legitimate projects, for example, a mainstream framework. 
Yeah I saw that while looking for an answer to my question. Since you seem to be more familiar with the project do you know how exactly it finds hidden functions like we discussed above? Is it along the lines of parsing line by line and analyzing each line against black/whitelist? So once it hits $x = 'sys' . 'tem'; it matches $x against 'system', etc? 
I've used it in some minor things. It does exactly that: once it detects that the code is attempting to make a function call using a variable name, it checks the resolved value of that variable against the pre-defined whitelists. So, while you can bypass a regular expression check for "system" by defining a variable with the value of 'sys' and then appending 'tem' to it, the library gets the final value of "system" and is able to check that against its whitelist.
Thanks for clearing up, that's a cool way to approach the problem and yes it's better than my regular expression shell script. I edited my original post to indicate that. Will play with the Sandbox once I get a chance. 
Definitely better than my hack approach of scanning files for strings :)
Yes. It would be enough. But. It is not the accepted pattern. There are a few reasons why not to do it this way that I can think of offhand: * You will have to have a different case for non numerical queries. Better to maintain a single pattern for DB queries. * Easier to forget/miss a check. For example, if you have multiple parameters, you can possibly miss one. If this is early stage of the product, I would check out some DBAL libraries or even an ORM. See doctrine. But in any case this is not the pattern you want. It will work though, and I have had to use it before in a code retrofit. 
 $this-&gt;modelLoader-&gt;findAll('cat', Criteria::where('id', '&gt;', 5)); (several ORMs have good solutions for this)
You want to have a static url for each image, then randomly select the url. 
I was thinking of Criteria::where() being a shortcut to creating a criteria object. The Criteria object being generic-- although it could also be Query(). All of this architecture comes at the sacrifice of simplicity (and more method calls). ORMs are sophisticated beasts. Tread carefully.
In addition to the other comments ("always use prepared statements") I'd also add that it is *not entirely obvious* that is_numeric is a sufficient check: Remember that is_numeric also allows floating point numbers and - even worse - hexadecimal numbers. Will the database also accept those as literals? I don't know, maybe, maybe not. I wouldn't bet on it (for hex and exotic floating points like "nan"). To be sure you'd have to carefully test this on all the database systems you are targeting. In which case it really is a lot simpler to stop thinking about this and *just use prepared statements* :)
Any relevant, free php 5.4 book?
This works right now when I'm looking at it. #branding li img { float: right; margin-top: -230px; } 
Uh. Why are you overwriting $options?
Just what I was thinking. The cache is already keyed by the format string, so I can't see how it couldn't be a static var too.
Because I need it to be an array at all times, even if the config file is broken.
This is excellent advice. Not to mention; the solutions out there could really use some competition.
You're overwriting the $options even if it is an array: if (!is_array($options)) $options = array(); }else { $options = array();
that else refers to the outer if statement =) Note the bracket =)
Jesus fuck, your coding style is a mess. Here, let me fix: if (file_exists($file)) $options = include $file; if (!is_array($options)) $options = array();
Set your caching up correctly instead of using the PHP default that forbids it.
In addition to the other advice you see here, I suggest you get involved with the community. Find your local user group and go to the meetings, most of them are on meetup, if not http://php.net/ lists upcoming events. If you can swing it, go to a conference. There are good regional conferences like LonestarPHP coming up. There are also bigger conferences like php[tek] and zendcon that are very worthwhile but more expensive (Full disclosure: my company organizes tek). Personally, the things that have helped me sharpen my skills have been 1) working on my own projects, 2) reading blogs and articles 3) going to conferences. Also, once you work up your confidence, presenting on topics you are interested in are a great way to share the knowledge with others and make yourself organize and research what you've learned. 
 $options = (empty($file)) ? array() : include($file);
Why not make a "gallery" for them so they can see all the pictures? Randomize the pictures on your page and have a link some where to see all the pictures? Seems to me like the simplest method and no worrying about the "back button" implementation that could get messy with caching, or storing information some where on who visited what.
Almost everybody is tempted to write their own CMS, and it's a great learning experience. That being said, word of wisdom: do not use that CMS for anything you'll have to maintain in the future. Use it in private, and then throw it away because in a year you'll wonder at the mistakes you made and a year after that you'll wonder why you didn't catch more mistakes, and a year after that...you get the picture.
[Doctrine](http://www.doctrine-project.org/) uses repositories, which frightens and disturbs many coming from the world of ActiveRecord-style models.
What helped me a lot was to write my own micro framework using OOP that I can now use for future websites and web applications. A framework should typically have the following functionality: **A Core Class** - Handles url parsing and routing. - Handles error and exceptions, see: [set_error_handler()](http://php.net/manual/en/function.set-error-handler.php) and [set_exception_handler()](http://php.net/manual/en/function.set-exception-handler.php) - Handles output buffering, see [ob_start()](http://php.net/manual/en/function.ob-start.php) and related functions. - Handles instantiation of your other base classes, see below. - Handles a global configuration. **Create some Base classes that is used by your core, for example:** - A database wrapper class. - A cache wrapper class. - A session wrapper class. - An email wrapper. - etc... **Create MVC Base classes** - A base class for database models. - Implement templating with something like [Mustache](http://mustache.github.io/) if you are inclined to use templating. For examples on how other micro frameworks do it take a look at the following: - [Silex](http://silex.sensiolabs.org/) - [Slim](http://www.slimframework.com/) - [Limonade](http://limonade-php.github.io/) - [Fat-Free](https://github.com/bcosca/fatfree) I don't use any of them however since I enjoy working on my own framework. 
Just to show: yes, this is actually the case. php &gt; echo is_numeric('0x123ABC') . "\n"; 1 php &gt; echo is_numeric('1.1') . "\n"; 1 This is unlikely to lead to serious security vulnerabilities by itself, but it can cause an SQL query to fail. If you dump debugging data or aren't properly handling failures (both problems in themselves) then anything can happen from that point onwards.
1. Using mysql_ functions, use MySQLi or PDO instead 2. Using mysql statements directly. Use a library. 3. Sanitize and concat sql statements. Use prepared statements instead. (Requires MySQLi or PDO)
It was there when I last used code igniter. And that was like ages ago
Ignoring all the mysql_* and adhoc sql stuff, try abstracting some of those blocks out into seperate protected methods. It will make your main block of code much more readable. Also you are updating the Account credits by selecting the existing value, adding it in PHP, and then doing an update. Just let mysql do the addition and avoid an extra roundtrip. Some of your queries are selecting * when I would guess its not necessary. Select only the fields you actually need, even if it means a more verbose query. Finally for an unset date, you are comparing it to "0000-00-00 00:00". It would be much better to allow the field to be NULL, and then check isset($PromoCode['ExpirationDate']) 
Thanks for the comments. I'll keep all of them in mind. I'm very happy you pointed out the last one (#2). I always thought about cases where I had two queries in one method but if the second failed how could I roll back the first one? This will be very helpful. Also, here's how I handle the return out of the function. I'll keep in mind making the value a more specific constant rather than a number. $Redeem = $oUser-&gt;RedeemPromotionalCode($idAccount, $PromoCode); switch($Redeem) { case -4: $errmsg = "You have already redeemed this code."; break; case -3: $errmsg = "This code has been redeemed."; break; case -2: $errmsg = "The code you entered has expired."; break; case -1; $errmsg = "The promotional code you entered is invalid."; break; case 1; $successmsg = "Promotional code redeemed!"; break; }
Quite some time ago I used to mess around with game modding. I wasn't all that great at it, but it really sparked my interest. Somewhere around a year ago I decided that I was just going to bite the bullet and just learn to code. I started with some books and whatnot, but I really didn't fully understand how all the parts came together until I started my own website project as a learning tool. The website I chose to build is a mashup (of sorts) of a few different sites currently in existence. I took the parts that I liked form each and tried to incorporate them with one another as well as add some of my own flare into the mix. I opted not to start with a current framework and try my hand at building my own. I think I've learned far more from going this route than learning to use a toolset that was pre-made. To date I've learned (to varying degrees) how to: * Write PHP * Write Javascript * Write SQL * Write HTML * Write CSS * Use JQuery * Use PDO (and even worked around a few known issues in it) * Use a mailer * Handle authentications * Implement "real-time" changes on the site * Set up, read, and write to a relational DB * Learned the basic concepts of MVC (though I'm not sure I implemented them in the best manner) * Organize my project files * Utilize a version control system Like the others, one of the best things you can do is just to start a project that solves a problem for you. You will quickly be forced to learn new skills. I have no one to bounce questions off of, so I did it all alone. I don't recommend this path. Find some kind of mentor or group if you can. The site is basically functional at this point. I have a few missing features and some bugs, but I will eventually launch this site. It may or may not be successful. The point of the project was never really to launch a successful website (though it would be nice if it is successful), it was to learn how to write a website.
You're using magic numbers instead of constants. At the top you comment what they are, but that isn't fixing the problem.
I actually have never seen an app that did both at the same time. Usually they do unit tests for everything, and just a few general integration ones. Of course you can do both, but what if you only have time for one? 
One minor thing I would add is removing 'ExpirationDate &lt;= now() as isExpired' from the query and moving the check to PHP. Reason being it's always easier to scale up web servers than databases.
I began to recode the entire class. I made it construct an object for each code and broke apart the method into smaller blocks. http://pastebin.com/2MVsYvTv
 $options = array(); if(!empty($file) &amp;&amp; file_exists($file)) { $options = file($file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES); if(!is_array($options)) { $options = array(); } $file = 'some_string'; } Not really sure what your code is supposed to do, but this is probably how I would have written it for the time being. I don't find it useful on it's own though, can be rewritten into a function. function file_to_array($file = null) { if(!empty($file) &amp;&amp; file_exists($file)) { $file = file($file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES); $options = (is_array($file)) ? $file : array(); return $options; } return false; } Not sure why you use include as I think last time I did something like that it outputted the included file. (someone please dodge me in the right direction if i'm wrong with anything)
1. No. 2. Check out this answer on SO: http://stackoverflow.com/a/6886989/176275 You can encrypt buttons like that with an API key, so users won't be able to modify them. This isn't necessary in certain cases, as you can require the payment to be confirmed via IPN before completing the order. You will obviously need to make sure the amount paid is what you expect it to be.
I wouldn't recommend that OP to one naming conversion over another. However I do think it's important to be consistent about what convention they follow. Also, OP, you should try and give your variable names more meaning as to what they are. Variables like `$r` really don't tell us much.
I wonder how they check if you payed? If I add this to my composer file it is downloaded and then what?
Why redis? Throwing arbitrary technology around is not a way to solve problems. And HTTP referrer is not reliable, it's easy to manipulate and there's no guarantee the browser will even send it.
I wanted to post a general reply to my original post, thanking everyone for their input. I am finding it very useful and motivational. Really, thanks for the effort of typing down responses! If anyone has any good resources (links, tutorials, etc) or other advice, do not hesitate to share as well. I appreciate it very much.
if you read up on PDO it's very simple to write your own. I use a SQLConnection class I wrote in all my projects and it's very little besides a wrapper to store my connection information and a couple functions to build and execute pdo statements. For example (from the above mentioned custom SQL class I use): public function DoSelectQuery($_sqlQuery,array $_params = null){ $this-&gt;sqlConnection = $this-&gt;MakeSQLConnection(); $query = $this-&gt;sqlConnection-&gt;prepare($_sqlQuery,array(\PDO::ATTR_CURSOR =&gt; \PDO::CURSOR_FWDONLY)); $results = array(); try{ if($query-&gt;execute($_params)){ while($row = $query-&gt;fetch(\PDO::FETCH_ASSOC)){ $results[]=$row; } } $this-&gt;sqlConnection = null; return $results; } catch (\PDOException $e){ throw new \Exception("SQLConnection'\DoSelectQuery Failed:".$e-&gt;getMessage); } } private function MakeSQLConnection(){ try { $dbh = new \PDO('mysql:host=$this-&gt;host;dbname=$this-&gt;db', $this-&gt;user, $this-&gt;pass); $dbh-&gt;setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION); return $dbh; } catch (PDOException $e) { throw new \Exception($e-&gt;getMessage()); } }
[Doctrine ORM](http://www.doctrine-project.org/projects/orm.html) if you want a full-blown ORM or [Doctrine DBAL](http://www.doctrine-project.org/projects/dbal.html) if you just want a basic database abstraction later. DBAL is a light wrapper around PDO.
I currently use capistrano/capifony and phing for various projects ... have you encountered a way of getting capistrano to run a full build (including running composer to retrieve packages) before uploading?
I'm using MariaDB since Oracle bought MySQL and there's no problem at all. We use in dev and prod environment and it's great. 
Not a serious answer :) $options = (array) ((@include $file) ?: null);
Well said, sir. Consider me schooled!
To add to the other suggestions, I recommend becoming a regular contributor to one or more open source projects. You'll be able to fix bugs and add features to software that many people will be using. This will give you experience working with a team toward a common goal, and you will also get a sense of accomplishment when you see a change you made being used on a website that runs that software. And it can look good on a resume as well. Edit: if you want to learn a framework, which has been suggested here, I'd suggest Symfony2, as opposed to CodeIgnitor. 
^ This answer is the most correct in answering the original question. However I would strongly advise the OP NOT to silently overwrite a $file result that isn't an array. Something is wrong here obviously, so throw an exception like InvalidConfigFileException. Then any developer can debug this in seconds.
Just a small tip: use XDebug for debugging and don't hesitate tracing through open-source third-party libraries: ORMs, frameworks etc. Learn how great things work.
I agree with you on most parts, but isn't casting to an int in fact escaping the value? Or what else did you have in mind?
Learn to use profiler, create some code and learn to benchmark, test and analyze your code. If you're using MVC, have a look at where the code is doing heavy lifting. It's always a fun challenge to make something faster and later on you will appreciate the skills. Just about any system dev will one day run into better performance requests and knowing how to benchmark, improve &amp; evaluate results will help you. Not just with PHP.
ITT: Use PDO!
Casting it as an int is validation, not sanitization. Then of course there's a big usability issue here which makes it harder to maintain. Why have the if statement at all when you can just use proper escaping (and if you want to, cast the type there as well) from the get go?
You want sockets, websockets would probably work well. 
The main thing I'm looking to protect is the return URL. If someone sees it, they can visit the download link without even having to go through PayPal. I know using IPN to verify a transaction and emailing the download link is the way to go but I'm not quite there yet.
1. He said push, not pull. 2. WebSockets is a browser technology. 3. Neither client is a browser. 
OP: this is awesome, self taught or whatever, you clearly get it. Kudos for submitting your code to strangers for review :) this attitude will help you immensely. I agree with danvasques29, your line $this-&gt;promoCodeDetails = $this-&gt;getPromoCodeDetails(); was confusing because the name hints it is a simple getter method and this _looks_ like a circular reference at first glance, it could be just initPromoCodeDetails();.
&gt;My current thought is to setup the desktop hardware as a mini-server, with an open port that takes all requests, authenticates them to make sure they came from the server, and then process the request. What other option is there?
I don't know, thats kinda why I was asking. My initial google search showed results that looked like people may have been using a database on the web server, and having the application regularly check database values, which doesn't accomplish what I am trying to do. Having an app to unlock the door up to a minute after you press the button is nowhere near as appealing as an app that unlocks the door when you push the button
You forgot terrible bracket style. 1tbs 4 life
Ah. But.. why store it in a different file?
The question was rhetorical. When the request comes in, you send a command via a socket to the client application and have it do whatever it needs to do. Additionally, you can set up the desktop application to only listen to incoming requests on a specific subnet. 
because it's an array of configuration options. They are loaded inside the Config class
Good point. This is perfect for enumerated types, but since PHP doesn't have them, you can use class constants: class PromotionCodeResponse { const SUCCESS = 0; const INVALID = -1; // Code is invalid. const EXPIRED = -2; // Code has expired. const MAXUSE = -3; // Code has reached maximum uses. const ALREADYREDEEMED = -4; // Account has already redeemed the code. } $ret = RedeemPromotionalCode(); switch($ret) { case PromotionCodeResponse::SUCCESS; ... break; case PromotionCodeResponse::EXPIRED ... break; } 
It looks like you could probably do less SQL calls also by using JOINS
I completely disagree with his advice on #2. There's no need to use a separate library when you're using PDO.
Well, I'll just talk about the things not already pointed out by others here. I think having one SQL clause per line is much tidier, and always be sure to capitalize your SQL keywords. Most of the time you don't need to call `mysql_num_rows()` (since `mysql_fetch_assoc()` gives you the same information by returning false if there was no row to fetch). Your two queries against `PromoCodeUse` don't make sense to me. They both have the exact same `WHERE` clause. The second `SELECT` against `PromoCodeUse` doesn't allow a user to redeem a code more than once (it returns -4 if it has already been redeemed) so there isn't much point in checking `MaxUses` in the previous `SELECT`. The only time `MaxUses` will really change the behaviour here is if it was set to zero. I think this is a bug and the `WHERE` clause of the previous select shouldn't have included the `AND Account_idAccount = '{$idAccount}'` section, so that it could count up uses of the promo code across all accounts. Your last couple of queries make a `SELECT` then an `UPDATE` in order to just add a value to a field. You can skip the `SELECT` altogether. With those and a couple of other tweaks I would write it like this: http://pastebin.com/PDnnrhJQ BTW, `INSERT INTO ... SET` is a MySQL extension. You shouldn't really be using it if you want to have the ability to move to another DB system in the future. `INSERT INTO table (column1, column2) VALUES (x, y)` is the SQL-standard syntax.
I'd start using something like CodeIgniter if I were you. Abstract those sql stuff away to its activerecord stuff and it generally keeps your classes neater too.
In my experience, PayPal users don't always hit the return URL, for whatever reason, so e-mail is at least good as a backup. I assume they finish the transaction and just close the window or navigate away. I even have some who manage to miss the return URL, and then don't bother checking their PayPal associated e-mail address on top of it, so they get all confused and send me e-mails (sometimes with almost no identifying info at all), asking where their activation code is. Ugh. It doesn't matter how good of instructions you put on a webpage when nobody bothers to read it, and still won't even when they have problems. I think it was a mistake making it easy to contact me. I never realized the huge volume of e-mail companies get until I went into business myself... I hardly ever e-mail businesses myself as a consumer, and just assumed everyone else was about the same; boy, was I wrong! Anyway, I wouldn't trust customers with a universal download URL that could be shared. Even if they can't see it prior to the transaction, they can afterward, then share it with others or even try to reverse the transaction. I'd probably give each customer a personalized return URL (could be as simple as a unique token as a parameter), e-mail it to them as well, then have the IPN activate that URL, and use a simple database to tie that all together. PayPal's "custom" parameter is a handy way to pass such a token from the client to PayPal, and then from PayPal to the IPN. Only catch is that they can hit the return URL a few seconds before the IPN completes, so you'll want to be aware of that and tell them to refresh the page in a few seconds if their transaction isn't found yet.
You may be able to do it using cometd - http://cometd.org/
yes, that's correct. under the hood, CodeIgniter is using the mysql specific methods to escape your values and protect you from SQL injection when you use this method.
Looks like you managed it. :)
Naming styles should be consistent no matter what. It should be * $humpCase for class members, functions and variables * CamelCase for class names * ALLCAPS for constants It just makes typing so much easier. 
For comment, not use by others. 
Seeing sql in code makes my eye twitch. Use a proc or otherwise abstract that shit out of there. 
I'm rather fond of idiorm. It's a fluent interface and the methods are naturally named around the sql operation you are doing. https://github.com/j4mie/idiorm
a quick snippet of how i've used it in a project &lt;code&gt; $events = \ORM::for_table('security')-&gt;distinct('event_time_stamp')-&gt;group_by('event_time_stamp')-&gt;where('file_type',1)-&gt;order_by_desc('event_time_stamp')-&gt;find_many(); foreach($events as $event){ if(strstr($event-&gt;filename,'captured')){ $event-&gt;filename = '/captured/'.basename($event-&gt;filename); }else{ $event-&gt;filename = '/capture/'.$event-&gt;camera.'/'.basename($event-&gt;filename); } &lt;/code&gt;
I would vote for making this easier to read and understand. My philosophy is, anyone can learn to write code for computers, but really good developers can write code that other developers can easily grok. Here's a simple example that shows how you could refactor this so that someone could, at a glance, much more easily understand what this method does: public function redeemPromotionalCode($idAccount, $PromoCode) { $idAccount = $this-&gt;Sanitize($idAccount); $PromoCode = $this-&gt;Sanitize($PromoCode); $promo_code = $this-&gt;findCode($promoCode); if (!$promo_code) { return INVALID_CODE; } if ($this-&gt;isExpired($promo_code)) { return EXPIRED_CODE; } if ($this-&gt;isMaxed($promo_code)) { return MAX_USE_CODE; } if ($this-&gt;isUsed($promo_code)) { return REDEEMED_CODE; } $this-&gt;savePromoCodeToAccount($idAccount, $promoCode); $this-&gt;saveTransaction($promoCode); $this-&gt;updateAccountCredits($promoCode); return TRUE; } This is quick and dirty and could be refactored more but is just an example of how you can rewrite the code in a way that does the same thing in the same way, but is much easier to understand. Even for a personal project I find this useful as years later if you revisit it you'll find it much easier to understand. 
Mostly, indexing is often hurt by complex joins.
Can you pm me a bit more detail? I really appreciate the help
Start learning industry tools for PHP. It will all influence your coding style, and illustrate _why_ some styles are considered best practices. 1) Start using a powerful IDE. I recommend PHPStorm. It's not cheap but it goes on sale often. You'll find a lot of people here who _hate_ IDEs and prefer an editor that "just gets out your way and lets you code." I strongly disagree. (I also don't know what they mean by an IDE "getting in their way.") The tooling provided by a good IDE provides a massive productivity boost. To truly take advantage of your new IDE, you'll have to start writing proper PHPDoc comments (which a good IDE makes super easy to do), and not pulling bullshit like writing methods that return mixed types. In short, it'll teach you the value of WELL-DEFINED INTERFACE in your code. Your IDE needs your code written that way in order to help you out, and when you're one day working on a large project in a big team, your co-workers will thank you for having acquired this skill which makes your code so easy to read and understand. 2) As others have said, learn XDebug. (If you use a good IDE like I mention above, it'll have XDebug support built right in.) I have seen PHP devs waste _hours_ trying to find a bug by putting calls to var_dump() in their code, and reloading the page over and over, when they could have found it in 5 minutes by stepping through their code with a debugger. A debugger is a basic tool for any programmer. Not using one is like taking the stairs instead of the elevator. To the 50th floor. XDebug also does profiling. When your code is slow, nimrods will swarm around you and say "Oh well that's PHP, it's just a slow language..." That is not the problem. The problem is some inefficiency in your code; it could happen in any language, and a profiler will help you find it. 3) Do not freaking use WAMP, MAMP, XAMP or any of that nonsense. What are you going to do when you're juggling several projects which need different settings? Keep switching them back and forth? What about the databases? Gonna run 'em all on the same server? Or get multiple MySQL processes running on different ports; one for each project? It breaks down real quick. Learn how to use vagrant. It lets you make quick, easy, versionable virtual machines for your projects. Google "vagrant PHP 5.4" and you'll find tons of pages explaining how. 4) Write some unit tests using PHPUnit. You don't always have to do this, but you do have to learn how to do it. You'll see the value. Learn how to write mocks and stubs for your tests. This'll make a good case for illustrating why it's _bad_ to make every method in your classes static. (I swear, I don't know why so many PHP devs do that...) 
your code which does... method() or $this-&gt;errorMethod(); should be method or new Exception("uh oh"); or.. if(!method()) new Exception("uh oh"); that way you don't need to send off the mysql error &amp; __FUNCTION__ / __LINE__ since the exception has a stacktrace that you can use. you should really consider using an IDE if you haven't already.
PHP 5.4 isn't *that* awesome. If you can stand to not use traits, the only real differences are syntax enhancements. Most projects that use PHP 5.3 (e.g., WordPress, MediaWiki, etc.) can actually run in the HHVM without *any modifications to the code*.
What license are you releasing this project under? Please don't say GPL...
Not entirely sure why you'd even need the server. If the program running on the desktop machine can open a port on the internet, your mobile device ought to be able to send a message directly to it. Skip the server middle man entirely. *With some kind of auth, of course.*
If you are still starting out, you might as well use the [PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md) coding style. It's generally what everyone is using or switching to. Not incredibly important, but if you plan on releasing your code to the wild it should be considered. You should also take the time to read PSR-0 and PSR-1 so that you are aware of them if you haven't already.
You might find the article [On Taming Repository Classes in Doctrine](http://www.whitewashing.de/2013/03/04/doctrine_repositories.html) helpful on issue #2.
bitwise operators You know? things like &amp;-and |-or ^-xor
I use bitwise operators. When storing the result in the database I just use an UINT. Some notes about them: CAST them to INT when they come out of the Database (PHP/Zend/etc generally won't do this for you, and ALWAYS cast them when you compare them - God can't save you from the result of 4 | '4') If you're using MySQL (at least) you can even run bitwise operations on the database. `UPDATE user SET permissions = permissions | 4;`
We do. It was much faster to use bitwise operators than zillions of ands.
I've used an int type field for bitwise month selection. Looking back it's overly complex. I would avoid bitwise fields unless you're really desperate for performance. Bit fields just are not that intuitive.
Thakns for answer. Can u share where you use it. Does it come in handy when theres new flag to apply on your i.e. "products" You just add this to code. Where do you use it? 
Its not troll post Im just wondering about using it in PHP &amp;&amp; MySQL.
I see bitmasks much more often than bitshifts. In PHP you'll see stuff like (From the docs) error_reporting(E_ALL ^ E_NOTICE); That said, if you ever find yourself using bitshifts for performance in PHP you're doing it wrong.
Bitwise is great when you need to track a large, programmatically defined series of true/false values. Such as permissions, notification types, etc. In essence, if you would have a lot of checkboxes (not radio buttons) that deal with the same type of thing, bitwise is incredibly useful. 
Thank you for all of the help. I was able to get the site to work correctly. You are all amazing people!
&gt; Stop using mysql_ functions, they're deprecated. Most developers use PDO or mysqli, each has its strengths. Using mysql_ should result in the source file being replaced with ""YOU ARE BAD AND SHOULD FEEL BAD".
Actually bitshifting is faster on an unsigned int than some of their other index types. We've used it with some luck, only to find that MySQL truncated blobs to bigints when bitshifting (which is bullshit!) or at least they did late into v4. Re engineering a few years back has changed things such that we haven't checked v5, but this was for web purposes.
We used it to sift through an unsigned bigint in MySQL that represented a ton of Boolean attribute data and allowed almost instantaneous filtering of huge data sets. Way faster in MySQL than anding a bunch of rows. The problem came when we tried to use it with blobs. It appears that MySQL truncated blobs to bigints for bitshifting. Of course this was in v4. Now with v5, this may not happen, and merging indexes on the fly may make this method irrelevant. When we found the truncation bug we had to find another solution, so we haven't use bitshifting in a while. It was fast as hell though. Also, fwiw, Postgres allows bitshifting on the whole blob.
I'm sorry, I can only give you my own very anecdotal and entirely immature use of SQL. We have a database of around 350000 rows. It's very boolean in nature, with lots and lots of specs that are either on or off. When we moved many columns from boolean to a single integer column, and simply used bitwise operators, the speed skyrocketed. Caveats: * No charts or graphs that I have can back this up. It's simply from our experience that this was much faster (i.e. many times faster). * Our abilities at SQL were still very formative, so... as the saying goes, your mileage may vary. My suggestion to you would be to mock up the data that you want to store, and stuff in 2000000 rows worth of junk data. Run tests both ways. :) Good luck!
Nope, never used, belongs to stuff you learn in school and never use (Ok VERY rarely :D )
That spaguetti was delicious
http://silex.sensiolabs.org/doc/providers/service_controller.html
Varnish sounds like an awesome product... but in reality it actually performs *worse* than just serving your files direct from nginx. Nginx can also support caching files in ram, what's more, you can save your files as, for example, index.htm.gz and save the overhead of compressing on every page view that is common in most webserver configurations.
Nice. I think I need to learn brainfuck. Only 8 commands!
http://www.phptherightway.com/ also, learn how to program, not just PHP, but in general... Code Complete 2nd edition: http://www.amazon.com/Code-Complete-ebook/dp/B004OR1XGK/ref=wl_it_dp_o_pC_nS_nC?ie=UTF8&amp;colid=Z909XG1KHIYW&amp;coliid=I36Y2JEAO101RM Clean Coder: http://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073 The pragmatic programmer: http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X
PDO: look it up, learn it, use it. Seriously. That would be the one biggest change to your code that I would suggest. Edit: or use MySqli - whatever floats your boat, but do use prepared statements with bind variables.
Well you can always use macros in C to make your own lingo
I would agree with the way you are handling the return codes. Use exceptions for *exceptional* circumstances. That is when something totally unexpected happens and your code needs to leap out of what it is doing and do its best to try and recover. In your case these are not exceptions: you fully expect *any* of those results to happen on any given call to this method. What may help, is giving them names. Perhaps make them constants, and put them into the class as public *const* properties. That way you can refer to them by name in other places, so it is more obvious what they mean.
I'm not sure why you do it like this, but whatever floats your boat. My configs are written with defines because they are not needed to be changed during it's run. For database and routing i have static variables.
~~If you think about it, there are very few of those keywords so most languages aren't very specific to English.~~ Actually yeah with functions and stuff there are quite a lot... Although, here's a proposal for a [British version of PHP](http://www.addedbytes.com/blog/if-php-were-british/).
Here's a good class to start you off with PDO https://leftnode.com/entry/the-last-php-pdo-library-you-will-ever-need.html
The execute() method is a bit too long. I would extract few private methods from there. E.g. : public function execute(){ if(!$this-&gt;prepared) $this-&gt;prepare(); if(isset($this-&gt;bind)) $this-&gt;setValue(); if($this-&gt;statement-&gt;execute()) $this-&gt;getResults(); } The rule of thumb is that if you need to comment a block of code, it is better to extract that block as a function and name it appropriately. Apart from that, looks good. 
We have struggled with Repository pattern designs in various projects. To be clear what you have done doesn't look remotely close to what the repository design should look like in my opinion. What we have tried to mimic would resemble this: http://martinfowler.com/eaaCatalog/repository.html A good repository pattern should provide lots of abstraction not less. If implementing a repository pattern bear in mind all the issues surrounding lazy loading. This is critical. 
Class name should suggest what is this class for. "st4t" says nothing. Commonly used coding style rules: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md 
Why not? I guess I just disagree with your statement. I expect when a user enters a promo code it's valid, otherwise they have committed an error. Also, if you compare the code I wrote above to his switch statement, I think it's much cleaner and easier to understand. As a general rule, I try not return values I don't expect or that don't relate to the immediate purpose of the function. The name of his function is RedeemPromotionalCode. The code wasn't redeemed. Exception. 
Seriously? You are posting some webpronews.com site instead of the official php.net announcement/changelog? And that for a patch release?
No, please no, PSR-2 should have died before it was "released".
Well I don't really like having any statics in PHPixie =)
Usually you need to have getter and setter methods for private attributes. In your case, "$prepared" needs a setter at least. Another trivial or non-trivial point depending on who you ask is the class naming convention. This may be helpful to read: http://framework.zend.com/manual/1.12/en/coding-standard.naming-conventions.html Your code is clean and the logic is clear. I can follow without evening reading the comments. I think you definitely have a good dev sense.
Yes, you are totally right. However, nginx + FastCGI cache is also called a reverse proxy.
Man. I hate seeing non-English variables in people's code
&gt;Let me get this right... you downvote me and say that I was wrong when I am not I downvoted you because you're being an asshole. "I have noticed that you have a habit of making mistakes like this one"? Seriously? &gt;https://github.com/pusher/pusher-java-client This isn't even relevant. Again, the desktop application is only going to be listening to local ports, and all external communication is going to be handled via PHP. PHP is going in turn to open a socket to the desktop application. WebSockets has absolutely no place in that flow. 
&gt;"a mobile app send a request to **the server**, **the server** will then **send a request** to the **desktop application to trigger the hardware**". 1. Mobile app sends request to PHP 2. PHP opens socket to desktop application 3. PHP sends request to desktop application Additionally: &gt;"My current thought is to setup the desktop hardware as a mini-server, **with an open port that takes all requests**, authenticates them to **make sure they came from the server**, and then process the request." ---- &gt;I will take my apology now. Thank you. Why? you just validated my point. *I'll* be taking that apology.
Ha ! I had the exact same question as you ! We were taught a pseudo-language back in highschool that was in Greek. Later though I understood that the languages was interpreted and just parsed down to C by the interpreter in order to run !
I disagree with having getter/setter methods all the time. For example - "$prepared" is an implementation property. Whoever is calling the class should be able to treat it like a black box and not have to keep track of whether the statement has been prepared or not. The advantage is that you can significantly change the internals, but as long as you keep the interface the same you won't have to change any other code. This is one of the core concepts of OOP: public interfaces should hide the internal implementation.
The gallery is the main point of the site. However, I have a couple of pages on the site that display some general information, which I want to spruce up by adding a random picture that links to the profile of the user that uploaded the image.
Conceptually it's not rocket science, the devil is in the details though. A hit comes in to their tracker, which stores it in a database. The real-time API server aggregates these over some period (5 seconds or whatever) and makes them available to the client. The client draws/updates the display.
I guess I could make it like so: visiting www.example.com/index.php redirects you to www.example.com/index.php?id=104, where 104 is a random value that corresponds to one of the images. Adding a 'refresh' button actually just sends you to the same page, but with a different id. The history button of the browser should understand this. Thanks! 
Best way to learn is to write code. It's also where you'll learn about your weaknesses and learn how to bypass them. Find a project or try to clone it from scratch. 
That proposal was not a serious one, it was a joke.
This would be a good entry for the FAQ. It's certainly one of the top questions.
Thanks everyone for your feedback and your answers to my question on Stack Overflow. I've literally spent the last few days thinking about how to best execute this in PHP. I've actually [answered my own question](http://stackoverflow.com/questions/16176990/proper-repository-pattern-design-in-php/16238079#16238079) to show you what I've come up with. Clearly there are many ways to solve any one problem—this is just my approach. I'd love to get your feedback. One comment: Many people have mentioned that I might be looking for an ORM/Data Mapper. To be clear I don't really think that's my issue, as I'm trying abstract my persistance layer from application. Be it a database, some type of file system storage, a web service, or even a chiseled stone. If you don't feel like reading my very long answer on Stack Overflow, here is the short version: I'm using repositories and `model objects` for **CUD** (creating, updating and deleting) and what I'm calling "Query Objects" with `value objects` for **R** (reading).
link 404s?
captain obvious much.
Not bad. Some stuff could be a little different like others said (execute(), st4t isn't very descriptive nor does it follow common conventions like using capitals at the start of a class name) but most differences I'd make are stylistic. Assuming you have no need to support PHP4 (even if you're making a script for sale or for free use by anyone, no real need to use PHP4) there's not much point in manually passing-by-reference. In PHP5 objects are automagically passed by reference and it's better to return a value for variables. I don't think it hurts specifying it's a reference but there's no need in future. Thinking about it, to make it more 'safe' from fuck ups, you could specify that the db object is of the type mysqli in your constructor by using type hinting: function __construct(mysqli &amp;$con,$query,$bind = NULL) (assuming mysqli objects are of the class type mysql. Again I'd personally change this to MySQLi or MYSQLi but that's more stylistic). All in all, not bad.
Try to build some small applications using PHP and ask where you got stuck in stackoverflow.com. Don't try to learn anything high level if you're new to PHP. Learn basics first, then learn OOP and move on to one of popular frameworks.
On that same token, if you have a class and it only has 1 method (other than the ctor), then you've defeated the entire purpose of having a class.
The ampersands in the constructors aren't necessary as objects are automatically passed by reference. http://php.net/manual/en/language.references.pass.php
[This video](http://www.youtube.com/watch?v=o9pEzgHorH0) applies exactly to what you're doing. You're writing classes for classes' sake. edit: here's a 'functionization' of it, that's probably incorrect somewhere, but gets the point across. http://pastie.org/7725597
I once made a very proper version of C using a bunch of `#define` directives. It was great fun and worked like a charm.
Best programming language name ever.
Which still cracks me up! The inclusion of `£` is a nice touch: perchance (£condition) { // Code here } otherwise { // Code here }
Why do people prefer { and }'s to be on new lines by themselves? I much prefer: if ( $sky == 'blue' ) { // this } else { // that } to if ( $sky == 'blue' ) { // this } else { // that } with proper indentation its very legible...
Very few? PHP has like 60-70 and that's just for the [keywords](http://www.php.net/manual/en/reserved.keywords.php). Consider that an overwhelming majority of the functions, constants, native classes, and config options are also English, and you have 5000+ identifiers that are strictly English.
Eh, if you're going to go to that much trouble, you might as well embody the logic to it's own class, which is much easier to document, test, use, and affords much more flexibility via the usual OO concepts than a long-winded array of anonymous functions. edit: on a positive note, I do love that PHP has the ability to do this now, if for nothing else a spot-debugging or rapid prototyping aide.
Also is good for unit testing. 
I disagree with your statement as well as with video. Classes allow for easier extendability and maintainability in the future. If your goal, on the other hand, is to reduce number of lines of code as the [guy in the video suggests](http://www.youtube.com/watch?feature=player_detailpage&amp;v=o9pEzgHorH0#t=120s), then I pity you. Additionally in op's example the class allows you to execute same query with different parameters without preparing in from scratch each time. So you can't do that with functions without global variables. 
I found that it's personal preference. There is no written rule or standard as long as you keep it constant throughout the code. On that token I also prefer first method. 
I wouldn't download the packages and upload, i'd do it after the it pulls it from version control on the remote system, and before it symlinks the version to current. Since in a live environment you may have many servers that act as deployment targets, it's best to perform this operation on the target server. If you're bent on download everything and run tests locally the command to look at is [run_locally](http://rubydoc.info/github/capistrano/capistrano/toplevel:run_locally). This will ensure that anything you fire with it is not sent to the remote servers. You can use it to fire your own secondary script to perform your build locally, run all tests and do anything else you need prior to deployment. The best place to perform this operation is during the before:deploy event.
As long as it's consistent through the project it doesn't make much difference. however IMO the first example is better suited for a style of code where the bodies of controls structures contain small amount of code, the second best suited for larger bodies. Hence you can see why OP would prefer braces on separate lines. 
You don't have to overclever it by making it unusable with base64. They are user input either way, so you would have take precautions. Check the mime type, and the file extension, throw away the request if they aren't correct, and sanitize the filename before saving. There isn't much else to do, the most damage a user can do if he forges the parameters, is that he uploads an image that will display a "broken image", instead of an actual image. You can defend against this by checking the mime type of the uploaded file, instead of checking the headers. Unless there is some other vulnerability on your site, that a malicious user could exploit, you are safe this way. If you allow arbitrary file uploads (eg. not just images), then you should disable the php interpreter in the upload directory.
i disagree with sanitizing input. if youre escaping the output youre good to go. youll never be able to 100% sanitize input.
Don't complicate stuff. Let them upload a regular image. You should be good. 
&gt;I guesses you've never heard of memoization? Or even manually handling a cache higher up? You serious? Why would you do that if you can just use an object? Keep it simple. &gt;If you completely disagree with the video To be fair the guy lost me after 3 minutes, if hes goal is to minimize lines of code, then I don't really have any use for this video. EDIT ok watched his video a bit further, and sometimes he makes sense. like with his exmple Muffing API v1 vs v2. But his example of packing API in function is inferior to v2. As with v2 api you can, for example, instantiate two object with different api keys / api urls and work with them simultaneously. But again if words like "Encapsulation" doesn't mean anything to him, well... I can see why he is opposing classes so much... &gt;then I'm guessing you're still writing class-oriented code, not object-oriented. I'm not sure what would this guess would be based on. &gt;In the end there's not much point to the former, apart from a sort of syntax-based namespacing. Well at least here I could totally agree with you. 
There's no problem with allowing them to upload binary data. In fact, I doubt using base64 is going to be any more secure since it will need to be decoded eventually. The only actual security risk created by allowing people to upload binary files is that if you have a misconfigured web server and poorly written PHP app, they could upload a ".php" file and screw up your server, or upload a ".html" file and do AJAX cross-site scripting. So whatever you do, make sure you check the MIME types, and if you're uploading the images to a directory somewhere, be careful that you only use safe extensions (.png, .jpg, .gif) and that you DON'T set the files as executable. Furthermore, configure your web server or PHP script to set the Content-Type header for these files, so that the browser knows they are supposed to be images and NOT HTML pages. Otherwise, someone might upload some file called "kitten.jpg" that is actually an HTML page. If there isn't a Content-Type header, then if someone goes to http://example.com/uploads/kitten.jpg, the browser will notice that it looks like an HTML page and try to display it. This opens you up to JavaScript attacks. However, if you have a Content-Type header that says it has the MIME type image/jpeg, then the browser will simply fail to display it since it's not a real JPEG image. If you can't change your web server configuration, you could use a simple PHP script to display the files, rather than letting them go directly, e.g. something like this might be at http://example.com/displayjpeg.php: &lt;?php header('Content-Type: image/jpeg'); echo file_get_contents('uploads/' + basename($_GET['filename'])); ?&gt; Then you'd link to http://example.com/displayjpeg.php?filename=kitten.jpg instead of to http://example.com/uploads/kitten.jpg Hope this helps!
Doh - fixed. Thanks
base64 encoding will only slow down the transfer since the encoding will take time on the client's computer, and the file will end up being bigger. It also solves nothing to do this, if someone wanted to send a malicious file, they can still do that. Apache/PHP doesn't execute instructions from the data being transmitted, so there's really no reason to do this.
Yes you are completely right. I never realised there were that many keywords, though there are still only a handful I use regularly. But I totally forgot about all the native functions and stuff. To be fair, given that there are so many they are not all memorable so it doesn't make a huge difference if you understand English, you still have to look them up (the manual is in many languages).
While I somewhat agree, they do have plenty of free/open source tools. Having packages like this where you pay is the reason why they are able to develop so many open source projects.
I feel that $prepared needs to be exposed because there might be a need for caller to set it. Otherwise, why not just define a constant since it's never meant to be changed at run time? We can probably have a lengthy discussion on the use of getters/setters, but I don't think this particular case has much to do with encapsulation.
Anybody care to compare this to client side centric type DB's like SQL light or couchDB ?? I know we are talking apples and oranges here, or are we? With the mobile boom we are living through, many people have opted to tax the connected devices processor and implement local data crunching instead of relying solely on a server side DB. Reminiscent of the days when people opted to use memory variables as temporary tables instead of full blown push pulls. (Fox Pro was big on this). My vote is for a hybrid that can process local data and prepare for the final big "push or pull" from your server side DB. Anybody know of a framework that can handle this?? 
20 year old PHP developer all self taught here, best way to learn is by simply writing code. Don't be afraid to use Google to help if you're unsure, I made that mistake at the start and just continued to get frustrated with not being able to work it out myself. 
Good point about the docs being multi-language, I suspect that considerably lowers the impact of PHP being English-based.
It's far easier to see which brace belongs to which in nested statements when they are on their own lines. Bringing this up here is stupid, and doesn't add anything useful to the conversation. It's like something people bring up just so they can have something to talk about because they can't think of anything intelligent to say.
This is correct IMO. The abstraction he's writing doesn't do anything useful, and it doesn't make anything easier or and and functionality/value.
To extend from this, you could use PHP GD to filter input images that way the original image is never used, only your parsed/filtered one. GD will not be able to handle non-image data.
You mean, like [composer](http://getcomposer.org/)?
Disregarding my half-sarcasm, yes exactly like that or the 50 million distros that have PECL in their repos already. Whoever downvoted me for providing a real answer evidently thinks everything outside of "default PHP" is dangerous and radioactive and reinvents the wheel on a regular basis. It's people like that who tend to write copypasta code like the OP, except thinking they're doing a *good* job, and then others have to maintain their mess years down the road.
VBA scripting can be localized too. Best of all, not all localized Office versions can actually understand code produced by all versions (at least that bit works fine for Excel formulas).
No, please, don't check the MIME type. You'll notice this is deprecated functionality and easily forged. In short, it's worthless security theatre and unnecessary computation. As but2002 alluded to below, you can use image functions to be increasingly sure. Just never execute anything contained inside and you'll be fine. EDIT: I also endorse FineWolf's response below.
OP's code *literally* consists of a constructor, which simply assigns properties, and one function. *By definition* that should be able to be refactored into a function with default arguments. Now maybe you like having classes that you instantiate instead of functions that you call, but at the very least the latter is going to be a wee bit faster. The major point is that the resulting object is not doing any communicating whatsoever - it's not interacting with other objects. *That* is one of the core rules of thumb that you're doing object-oriented coding correctly. edit: here's a 'functionization' of it, that's probably somewhat incorrect somewhere, but gets the point across. http://pastie.org/7725597
&gt; Bringing this up here is stupid, and doesn't add anything useful to the conversation We should both follow this advice as well. Just downvote and move on. Calling people stupid is even less constructive.
I may be wrong, but I think the point was that there really in no reason to use a web technology mostly reserved for browsers when there is no browser involved.
Inefficient and irrelevant. The first part that should be executed in your boolean short circuit should not be checking the MIME type, but the file extension (always go from most efficient to least in your sequence of tests.) For example: isValidFileExtension() &amp;&amp; isValidMime() &amp;&amp; isValidGDTest() Assuming isValidFileExtension passes, isValidMime may cause short circuit, but it's still subject to false positives (e.g. via forgery) so we still need the last isValidGDTest to be absolutely certain. Assuming we're aiming for certainty, this makes isValidMime redundant in the passing case for this control sequence. In summary, this means that in your passing case (occuring most often) you'll be doing an unnecessary test. In the rejection case, the MIME check might be faster than the GD check, but not by much, and it likely won't happen enough to where efficiency is even a consideration. Lastly, you don't want to use deprecated functions and [mime_content_type is deprecated.](http://php.net/manual/en/function.mime-content-type.php) 
Firstly, thank you all for your answers and links for further reading (very useful). I intended to reply sooner, but had some work todo. Oh and sorry if any of this is hard to read, English is not my first language so please bear with me. Ok, so as far as I got this, firstly there is discussion, if using a class for this is useful, or if the code should be refactored into a function. Regarding this, if I refactor as a function, where do I store the statement object to execute a prepared function multiple times? I guess I am plainly missing a language construct here? Or should I just store them outside of the function and supply it each time I execute it? Regarding PDO and the discussion if the abstraction/the wrapping I am doing here is neccessary; simply put, it is not. I realized that PDO exists and that what I am doing is pretty redundant, but I did so, at a point where I decided to just finish the class and see if I could get it to work. I guess I should have come up with a clearer title, specifying this fact. Regarding $prepared; as the class should only prepare the statement (and bind the arguments) on the first execution, I used $prepared to signal that preparation is not needed on subsequent runs. As it purely signals an internal state, why would I need getter/setter methods? And I can't think of a way to express it as a constant, as I change the value during the first run of execute(), or did I misunderstand constants? Regarding the execute() function being too long, I fully agree, and will pull it apart into smaller functions. I agree the class name is unclear, would "MysqliWrapper" be a decent name? I did actually plain out not know about type hinting, thank you. Also the fact that objects are always passed as reference makes sense. One last thing, some of you said, that writing a class like this, defeats the purpose of having a class. I do not know that much about the "theory" behind oo-programming, but I thought, as I have a multitude of things (queries) which all have the same properties, but with different values, a class would be the simplest way to wrap these things up in a useful way. If I would want to do, what the class does, without using it (I know I can do this easier but just for arguments sake), I would have to keep track of the statement object and pass that around as well as all the variables the arguments as well as the output is bound to. How could I simplify this without using a class? Thank you again for your answers. So far I learned quite a bit (currently watching the video "Stop Writing Classes", not quite done yet, will report back).
https://raw.github.com/zendframework/zf2/master/library/Zend/Validator/File/IsImage.php https://raw.github.com/zendframework/zf2/master/library/Zend/Validator/File/MimeType.php
but it doesn't escape the parameters, it just readies the sql statement and executes them separately.
I wrote [this](http://www.reddit.com/r/PHP/comments/1d32dr/how_to_progress_my_php_skills/c9mina0) as responce to a similiar question a few days ago. Basically I got into your position and was unsure what to do as I had tried out a few frameworks and felt like I wanted something to be "all me" instead of using already created stuff which I don't learn much through. Basically I'm building my own framework after the MVC model which puts the controller/model and view files all in the same directory to make it easier for the user to find stuff and also has a debugger which I use to track step by step what's going wrong whenever stuff.. go wrong. "I have no idea what to build" Well do what can be used for a lot of things: a blog. You need to be able to index the posts, view each post by themselves, add/edit/delete, maybe add authorisation so only logged in users can edit stuff (maybe even user levels so regular users can edit only their own stuff while an admin can edit every post). There's a lot you can do with the "blog idea" so start cracking! Think what stuff YOU would like to see (i added components/helpers so I can have easy ways to add html and such). Stuck? Check [php.net](http://php.net), [stackoverflow.com](http://stackoverflow.com) and other sites for usable information (even reddit can help you through for example /r/phphelp) I hope this helps you, now get going.
A wee bit faster? You can't be serious. That sort of optimization will never be n oticeable in the scheme of things. How would you mock your function for a test? E: also, even when I write something that really is a function I still stick it in a class as a static method because I get auto loading and lazy loading for free.
Why would you mock a function? =d
This needs more visibility. If GD fails on an image, it's likely not an image at all and can be discarded ;)
One of the best ways to see if a file is actually an image is to use GD to see if it has width and height.
Currently I don't, but I'd be interested in it as well.
Learn brainfuck they said. Only eight commands they said...
http://www.tizag.com/phpT/
In my area at least, a lot of the PHP jobs available are working with frameworks. I think it'd be a good idea for him to at least figure out what the MVC architecture is about. Currently though, it seems that he's doing this out of boredom and a framework can be very fun to learn and keep him interested.
Sublime Text 2 is my favorite. It has plugins for everything can can easily become as feature oriented as any IDE while maintaining the simplicity of a very good text editor. But for me, the snippets really throws it over the top. If you are willing to take the time to build your snippets of things you do often, eventually it will become perfectly suited to your needs without you having to deal with all the bloat or sluggishness that comes with your traditional IDE. 
Some of the Brainfuck dialects are great, too. Especially [Ook!](http://esolangs.org/wiki/Ook!).
GD checking is faster, simpler, and uses less CPU.
Just as an FYI, I immediately assume that anyone who adds unnecessary white space to functions and classes, as well as add { and } on new and separate lines, is a PHP newbie. &lt;?php if ( ! $foo ) { } Is absolutely ridiculous. &lt;?php if(!$foo){ } The difference, when dealing with 10,000+ lines is quite striking.
You wouldn't, that's the point. If you're testing code that uses this method you have to mock a whole bunch of stuff, if it was a class method, then all you need to do is mock the method.
I know I shouldn't be replying to this as my comment nor Xanza's comment is related to OP's topic but.... I will assume you don't like the use of extra white space in any language. I mainly develop in Javascript at work and there are many times throughout the day where I will add white space inside parentheses. Instead of: (not valid, just typed what came to my head) var d = new Date(), time = d.getTime(), randomTime = 814613241; model.set("time", $.format(((time + randomTime) / 1000), "hh:mm")); I would do: var d = new Date(), time = d.getTime(), randomTime = 814613241; model.set("time", $.format( ( (time + randomTime) / 1000 ), "hh:mm" )); Because that's easier on my eyes to determine correct separation between ( and ). 
I just watched the video, it is misinformation, and you would do well not to spread it. To highlight how bad it is, a few minutes in the speaker says: &gt;Seperation of Concerns, Decoupling, Encapsulation, Implementation Hiding - I haven't used these words in 15 years, anyone who uses these words is trying to pull a fast one on you, it just doesn't come up Separation of Concerns is probably the most important concept in programming. Someone who thinks it is a buzzword used by people trying to put one over you is seriously mistaken and should not be giving lectures on programming. Not even to deaf babies! The other points he brings up are easy enough to rebut as well: * The greeting class This is a trivial example, it's not real world, I can't really think of anything I've done in a similar fashion. Yes, the OP presented a class with two methods (one being a constructor), however I would separate that code into private methods, and most likely add more public methods. That is, the point is moot because the example it is based on is not real. * Empty classes They're called interfaces. I'm not familiar enough with Python OO to know the details here, but I assume that is the intention. Empty classes/interfaces can be used for type hinting and exception trapping. * Namespacing/Long names With a use statement you only ever need to type the class name, so it really doesn't matter how long the path is. And namespacing is a bonus in PHP thanks to auto loaders and lazy loading. If you group your functions into classes then they are only loaded when needed and you don't need to require anything to make sure that happens. * "Cell is a noun so I'll make a class" This is strawman. I think that might be in intro to OOP from some Sams book about a decade ago. Can't say I've ever come across a programmer that thinks classes are supposed to be based on nouns.
Learn Java or C#. It'll help teach you modern programming techniques, which will in tern help you write better PHP.
Congratulations, you can read when you want to. Now, if you could only comprehend. He's not advocating the use of ereg, he's using it because the OP is asking about it specifically.
Also, I stated it was a deprecated function and even suggested alternatives :)
&gt; A wee bit faster? You can't be serious. That sort of optimization will never be n oticeable in the scheme of things. Firstly, never say never. (At the very least, never underestimate how slow a fool can make your program...). Secondly, I *did* say 'at the very least' and 'a wee bit', because I am most definitely aware that's most likely a micro-optimization. &gt; How would you mock your function for a test? Include a testing version, instead of the real one. :S &gt; also, even when I write something that really is a function I still stick it in a class as a static method because I get auto loading and lazy loading for free. Exactly as I pointed out earlier, for you it's just turned into syntactical namespacing. I suppose it's somewhat unfortunate, that PHP only has good support for this with classes.
I've posted the exact same comment on a similar thread. Here it is: Good resource for PHP learning "the right way" http://www.phptherightway.com/ Also, learn how to program, not just PHP, but in general... These are some of the best books on programming: Code Complete 2nd edition: http://www.amazon.com/Code-Complete-ebook/dp/B004OR1XGK/ref=wl_it_dp_o_pC_nS_nC?ie=UTF8&amp;colid=Z909XG1KHIYW&amp;coliid=I36Y2JEAO101RM Clean Coder: http://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073 The pragmatic programmer: http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X 
It just astounds me how such large companies can get it so wrong. Especially seeing as migrating passwords over is not overly difficult (as users login you rehash and save their passwords using bcrypt, the prefix will tell you if it's done) and especially seeing talk of bcrypt comes up every time someone is hacked. 
I don't see anything wrong with it. Care to elaborate?
Exactly. This is not new stuff, but it seems every time this happens, the company was not using proper encryption techniques. LivingSocial was using SHA-1. LinkedIn was using SHA-1. It was hard to find, but I found [one source](http://www.informationweek.com/security/management/evernote-were-adding-two-factor-authenti/240150023) stating that Evernote was using *MD5*. MD5 and SHA-1 are not good enough. I would consider SHA-256 the *bare minimum*, but with how easy it is to use bcrypt, and for how long we've known about these deficiencies (that "how to" article I linked was from **2010**), there really is just no excuse not to use it. 
We'll (probably) add support for this in the next PHP version (the one after PHP 5.5). Currently (...)-&gt;... is limited to (new ...)-&gt;... style expressions. This will be expanded to any kind of expressions in the parentheses (same applies to (...)[...].) Also support for (...)(...) will be added. I wanted to add the first half of this already for 5.5, but only started working on it pretty late in the release cycle. It turned out there were some tricky issues regarding the use of variables and references in this case, which pushed the whole thing after the feature freeze.
Well that clears that up. Should be a cool feature to have. I can't think of a real use off the top of my head but I'd love to be able to string anonymous functions together like that... echo (function($a){ return "$a world"; })((function($b){ return $b; })('hello')); 
Was livingsocial hacked because of not good enough password hashes? AFAIK the user database got exposed, and the sensible information e.g. their personal info was in that database obviously unencrypted. I don't think attackers give a flying f*** about the passwords of the users on livingsocial, they just want the ersonal info. So here is a btter piece of advice: Don't use same password on every site, then you won't care at all about if they hash it or not. Worst case - they will get access to that particular site, and if they already hacked it into giving them your password hash, they already have everything they wanted from it
Reminder: Write better code and not have encryption be your defense. 
I inject it directly in to my models then I mock the table gateway and the appropriate query objects
People don't take security very seriously. Most people think even parametrised queries are a waste of time and resources let alone bcrypt. It's a sad state of affairs but it's a reality that I've experienced many times in organisations that should know better. Some people just don't care what the best practise is. They've been doing the same thing for the last 20 years and haven't been hacked (as far as they know) so why change? there's not time to do it. *We need to get this report finished and fix the broken contact us styling*. Clearly security would be a waste of time with these tasks hanging over us.
Firstly, password hashing is not about defending against attacks, it is about mitigation of damage *after an attack has already occurred*. Secondly, our code isn't necessarily the only point of failure. Social engineering has always been a problem, and there is little you can do in code to defend against someone willing giving out their credentials. This is why proper password hashing is important. It certainly isn't the *only* thing you should do, but it is one of the most basic. And it is very easy to implement properly.
&gt;Firstly, never say never. Popycock. It's like saying white paint makes your car faster because it absorbs less energy compared to black. Literally everything else you can do to your car will impact performance orders of magnitude greater. You are grasping at straws to prop up a weak argument. &gt;Include a testing version, instead of the real one. :S I'm intrigued by this, do you "require" files with the mocks? Does it become unweildy? Managing which files get included etc? &gt;for you it's just turned into syntactical namespacing Not at all. If something really is a function (eg add(a, b)) then it isn't a class. However I have no problem with a class that doesn't even have any methods (though I'd typically always have getters/setters) if it represents something meaningful and reusable. That is, I do not decide on what should be a class or function based on the number of properties or methods it may have, and if it really is a function, then PHP makes it easier to call as a static method so I'll create a class regardless. &gt;I suppose it's somewhat unfortunate, that PHP only has good support for this with classes. Sod off and use a "better" language? Sorry, but there is nothing intrinsically wrong with PHP. It's not the best at X and it lacks a Y but it also has a P and a couple of Q's. This can be said of all languages, and there are many factors that go into picking any one of them for a particular task. I spent 20 minutes watching the video you posted earlier, would appreciate it if you would like to discuss any of the points I raised, or alternatively, stop posting these things. They really aren't helpful to younger programmers.
Hopefully PHP's new password_hash function will help with this mentality. Though, sadly, it will still be difficult to change the minds and habits of those who *still* use either plaintext or MD5.
Would you be willing to show me how you do that in a compact pseudo code example? 
I have a different 50 char password for every account which I use. Maybe you haven't looked into password management tools lately but I use 1Password to manage and synchronise passwords across multiple devices. Whilst we, as developers, have a responsibility to look after user's data, we also have a responsibility as a user to keep our own data safe. 
&gt;MD5 and SHA-1 are not good. FTFY 
The problem with livingsocila had nothing to do with password hashes. My point is that if someone got your password hash from a social site they probably got all the other info as well from there. IMHO it's best to use facebook as a login provider. It's much easier, secure, easier for the user and protects you from spambots. Having a registration form on the site is dangerous, frustrating for the user and counterproductive.
&gt; Separation of Concerns is probably the most important concept in programming. Someone who thinks it is a buzzword used by people trying to put one over you is seriously mistaken and should not be giving lectures on programming. Not even to deaf babies! He said he hasn't heard in them, as raw concepts, in the wild, not that the concepts are non-existent. Way to straw-man what he's saying. Those things should be inherently inlaid in what you're doing to such a degree that they're transparent. &gt; This is a trivial example, it's not real world, I can't really think of anything I've done in a similar fashion. Yes, the OP presented a class with two methods (one being a constructor), however I would separate that code into private methods, and most likely add more public methods. That is, the point is moot because the example it is based on is not real. You've probably had the fortune of not having to deal with much java code before, then. Are you saying that just because you haven't seen them (I certainly have), that Jack Diederich is lying out of his ass, has never seen them before, and is completely making up a problem for shits and giggles? There are lots of dumbfoundingly stupid anti-patterns that novices construct all the time, this is one of them. &gt; They're called interfaces. I'm not familiar enough with Python OO to know the details here, but I assume that is the intention. Empty classes/interfaces can be used for type hinting and exception trapping. They're also incredibly easy to over-use, to the point of abuse. A lot of the problems he's presenting also boil down to some form of YAGNI. People creating interfaces and base classes where they *think* they'll need it, and end up just making code that never does extend, more verbose and harder to parse. &gt; This is strawman. I think that might be in intro to OOP from some Sams book about a decade ago. Can't say I've ever come across a programmer that thinks classes are supposed to be based on nouns. They're out there, fucking everywhere. Just read [the daily wtf](http://thedailywtf.com/).
Fun fact, which is tangentially related: The "normal" Mersenne Twister implementation (MT19937) has a period length of 2^19937 -1 (which is a Mersenne Prime, thus the name of the algorithm). The random numbers are generated from a state-vector of length 624 (this state vector is updated after every 624 random number fetches). If you fetch a random number, one of the values in the state-vector is taken and run through a tempering function (which does a bit of shifting, xor-ing and and-ing). The interesting thing is that this tempering function is bijective, i.e. it can be reversed. The reversal function is quite simple (though coming up with it might melt your brain :). Thus, if you *observe 624 consecutive random numbers*, you can from them recreate the state vector and then *predict all future numbers* generated by the MT instance. Without ever knowing the seed.
Jesus christ, I'm going to have to use that someday. Just because.
&gt;He said he hasn't heard in them, as raw concepts, in the wild, not that the concepts are non-existent. He says that anyone mentioning them is probably trying to con you. There is no strawman, the guy is an idiot. &gt;You've probably had the fortune of not having to deal with much java code before We're in /r/php here. Why don't you also accuse me of not being a vacuum cleaner salesman? &gt;that Jack Diederich is lying out of his ass No, just that he is an idiot. &gt;for shits and giggles Nz? Aus? Amerstralia? Mark Ellice fan? &gt;There are lots of dumbfoundingly stupid anti-patterns that novices construct all the time, this is one of them. Not sure what "this" is. Classes? &gt;They're also incredibly easy to over-use, to the point of abuse. A lot of the problems he's presenting also boil down to some form of YAGNI. People creating interfaces and base classes where they think they'll need it, and end up just making code that never does extend, more verbose and harder to parse. This is one point we agree on: less code is mostly better. However, attacking pythons classes and lack of interfaces is not the way to acheive this. You are not contributing anything here, and I think you are misunderstanding the point: base classes are useful (eg type hints, instanceof, catch, etc), and interfaces are fucking useful (they are contracts). &gt;Just read the daily wtf. Bad bricklayers/accountants/whatever are out there. You are not helping things with that "stop making classes" bullshit. You are contributing to the problem. 
I think you're just refusing to accept that one could exist in the first place :/
did you reply to the wrong comment?
Then it was for op, not him. 
I've worked at a company where passwords were stored in plaintext until I arrived. *sigh* I'm new to bcrypt though, other than in name. Right now I'm using a double iteration of sha 512 with a different salt applied on each iteration, so I doubt I would need to be concerned with any amplification of security, but can someone outline the differences of bcrypt vs. sha 512?
SHA is fast. Very fast. Which makes it great for data integrity, because you can calculate a hash for a large block of data quickly. bcrypt is slow. In fact, it had a built in work factor to force it to be slow. If an intruder were to get a hold of your data base, they could generate a rainbow table for a given user in a "relatively short" amount of time. If you were using bcrypt, the time it takes to create any given hash is so much exponentially longer, generating a rainbow table would be a waste of time. (In that, the intruder would be log dead before it was nearly completed.)
Remember: Hashing is not the same thing as encryption. Hashing is a one-way street. 
Ah, interesting. I was actually under the impression that sha 512 was decently slow. Good to know. However, I'm under the impression that a rainbow table would be utterly pointless against sufficiently salted hashes (i.e. 32+ salt characters) unless the salt to create the passwords were known. Are there any cracks in that theory that I'm not aware of?
From one of the links in then OP: &gt;Why Not {MD5, SHA1, SHA256, SHA512, SHA-3, etc}? &gt;These are all general purpose hash functions, designed to calculate a digest of huge amounts of data in as short a time as possible. This means that they are fantastic for ensuring the integrity of data and utterly rubbish for storing passwords. &gt;A modern server can calculate the MD5 hash of about 330MB every second. If your users have passwords which are lowercase, alphanumeric, and 6 characters long, you can try every single possible password of that size in around 40 seconds. &gt;And that’s without investing anything. &gt;If you’re willing to spend about 2,000 USD and a week or two picking up CUDA, you can put together your own little supercomputer cluster which will let you try around 700,000,000 passwords a second. And that rate you’ll be cracking those passwords at the rate of more than one per second. So, while rainbow tables themselves are pretty silly, a brute force attack is hardly out of the question. Hardware has just gotten so powerful that mass computation like this isn't impossible, and is in fact quite practical. With something like bcrypt, it's so damn slow, that even with beefy hardware, no one has the lifespan to wait for a brute force attack. 
Well, yes, but that still assumes the complete, utter lack of a decent salt. A brute force attack against a string of 40-55 characters, even if each test could be managed in a nano second, still has so many cycles to process that it wouldn't be practical. I understand the importance of making it so that the practicality of a brute force is nullified, but that can be done in two ways: a slow algorithm, or an algorithm that requires an astronomical number of potential solutions. A SHA 512 is quick for logging in, but reverse engineering it when it's 40+ chars is by no means a practical goal to crack. Especially since I'm iterating it twice, each time with a separate salt (part of which is unique to the username). If the only advantage is that bcrypt it slower, I wouldn't necessarily be convinced yet that it's the right choice for every site. If a login takes me +1.5 seconds on a site to gain the advantage of a 10-century crack versus an instant sha login with only a 1-century crack, I'd opt for the sha.
How do you know my goal isn't to come up with the most horrible PHP hello world example? Clearly this is not an efficient method of joining two strings. But it might be useful for something else. How do you know unless you experiment?
Could you go further into this? Perhaps you are talking about something that is on my mind, and that is : If someone was to further manipulate a hash after it is generated then doesn't this add an unknowable complexity to the value that no amount of rainbow table type attacks will be able to break (and it wouldn't matter what hash was used)? If a password is salted, then hashed, then manipulated via some formula again... then accessing this final value from an exposed database table is still going to be useless to someone trying to reverse-engineer the original password. They would require the php code that performed the final manipulation to know how to unscramble the salted hash before being able to try to brute force it, and if they have managed to get the php code then they already have more access than most people anyway, and would probably have access to the salt and hash function used as well, so if it got to that point then the site and database is totally screwed anyway.
A double sha512 is only marginally better than no hash at all.
From that same link: &gt;Salts Will Not Help You &gt;It’s important to note that salts are useless for preventing dictionary attacks or brute force attacks. You can use huge salts or many salts or hand-harvested, shade-grown, organic Himalayan pink salt. It doesn’t affect how fast an attacker can try a candidate password, given the hash and the salt from your database. &gt;Salt or no, if you’re using a general-purpose hash function designed for speed you’re well and truly effed. But hey, if you feel safe then it's all good, I'm just telling you what I've read! :)
For things I don't use KeePass for, I add a salt for most websites. Not that difficult to remember to type and extra 'Reddit' at the end of my password. And it salts my password, so if an unsalted md5 table were found, the hash wouldn't match other sites. 
yeah... hell no. are you kidding me? facebook provider? what the hell man? do you really think everybody has an facebook account? 
I'm going to need a source on that to read up on, because from what I understand of hash's right now, that's just not accurate.
&gt; given the hash and the salt from your database. Right, but I'm not talking about a salt from the database. A dump of the hashes + the existing salt would be pointless, sure. But I'm talking about a set of salts determined by algorithms in the code. &gt; Salts Will Not Help You The whole point of salts is to help you. Their *entire* purpose is literally to complicate the passphrase used for things like dictionary attacks and brute force attacks. I mean, sure, if the person is adding the salt directly to the same place you can retrieve the hash from, you're not gaining any benefit from it. But even bcrypt uses salt *precisely* because salts are critical to the defense of the has if you're not foolish about how to use them. I mean, the literal difference between bcrypt and sha 512 has nothing to do salt - they exist in both. The difference is time of cracking, which 512 at a 40+ character string is listed as millions/billions in computer hardware for a single pass crack in a year. ( Thanks to WedgeTalon for the [link](http://i.stack.imgur.com/sOMvu.png) )
Sure, fifteen years from now, when people finally stop using PHP 5.3.x.
A salt means they can't use a premade database containing hashed passwords. They could still generate passwords and toss it at the system till something works, or generate a custom database using the salt they found on your server. It does help, it just doesn't do anything for certain attack methods. And if you're using a hash method that is expensive to calculate, that salt will effectively prevent them from generating a hash for every possible password to use to crack accounts.
One of the things I took from the article was that general purpose hashing functions aren't ideal because they are subject to moore's law while hashing functions with a fixed execution time are not. So in a couple of years time your once secure database may no longer be safe from brute-force attacks whereas the fixed time hash will still be secure.
"Server pushing" and "clients listening" is the same thing. Your clients needs a continious connection to the server and listen what your server pushes. If you want a non-expiring connection, you can use sockets. If not, you can simply request to server every few seconds and expect a different response. If first option is what you're looking for, then use a web service using a language like Node.JS. 
There is no reason to check if the avatar exists before trying to delete it. The `unlink()` function will fail if the file does not exist, so that check is redundant. I also think you're worrying too much about an exception during a rollback. I don't even know what kind of condition could possibly produce an exception in this scenario (maybe a corrupt rollback segment?), but it's highly improbable, and unresolvable from PHP anyway, so just catch the exception, log it, and alert your sysadmin. You should also wrap this whole thing in a transaction callback: public function transaction(callable $callback) { try { return call_user_func($callback); } catch (Exception $e) { // roll back your database, log your exception, etc. throw $e; } } $db-&gt;transaction(function() { // your code here });
But it was not hacked because of this!!!!
I use a few different passwords. I absolutely use a unique password on all services of importance. Unimportant sites, like messageboards, facebook, etc. get mostly generic passwords of mine. I'm not concerned if any of these ones get hacked. Let me know when my bank or gmail gets hacked though.
No, but users accounts are vulnerable because of this and THAT is the issue. 
I don't work a lot with user passwords and such (.NET single sign on and what not), but I've never understood how to generate random salts. I mean, I know how to generate one, but how do I check it each time? Wouldn't I need to store that randomly generated salt in the database? Doesn't that defeat the purpose? EDIT: Just wanted to say, if I ever need to do this I'm going to use a library. Haven't looked at many of them yet, but do they automatically salt the passwords and everything?
Who cares if you have an extra 50 avatars in the folder? Do they hurt anything by being there? Consider just naming avatar files with the user's ID. Now even if you have some garbage, there are still never more avatars on the filesystem as there are total users. Open files can be deleted on Unix. Your database probably automatically does a rollback of any outstanding transactions at the end of the script anyway, so don't stress out about it too much. And if a rollback fails there isn't a damn thing you can do about it anyway. 
Your PHP code is safe from viewing when the server is secure. But, if someone has compromised your database your server is already partially insecure. They are many escalation attacks you can use to try and compromise the server once you have DB access. While far from a guarantee, it is quite common for a hacker to not gain access to your files and your database when an exploit is found. A substitution cipher is good in theory, provided you substitute the right characters. But, there are many ways to compromise it. For example, if a hacker already knows one password in the database, like say his own, it would be pretty trivial to piece together one to one substitution. Furthermore, your substitutions need to be done in such a way that they do not increase collisions, or else brute forcing logins without even finding an exploit is made more feasible. Do not get me wrong, it is great that you question and try to come up with your own crypto. That will help you to understand these tools better, which is awesome. But, it is strongly advised that you never actually implement your own crypto in a live environment, because it is so complex and almost impossible to do right.
This is damn scary. I didn't know it's that easy to perform such an attack. What if the random number comes from a range mt_rand(1,10). Is it still possible to brute force the seed?
At my previous work we did something of a similar nature. Here's a tidbit that my interest you: we did quite a bit of testing that the HTTP and authentication overhead of having our web app call the APIs via HTTP request was minimal and nearly negligible. As such, we had our web app just interact with the APIs the same our mobile app. I think it simplifies the coding of the APIs because you don't have keep in mind of being able to use the objects in two different ways.
The original idea behind salts was that they defeat rainbow tables (just a huge database of hashed character strings) so it's fine to store it along side the password as the attacker would still need to recalculate the entire rainbow table for each password so it included the salt (impractical). Unfortunately consumer grade hardware has become so much better at generating hashes (though the ridiculous parallelism of video processors that effectively have thousands of cores) that it has become practical to just brute force passwords that are hashed using a fast hashing function (md5, sha*). As such the developer should favour deliberately slow hashing functions as these will always be impractical to brute force even if tomorrow Nvidia released a card with 100,000,000 times the power of the current ones.
First of all, thanks for your reply. As for the avatars I had a simple thought. If an user has a different avatarID entry apart from the default ID in database, then it means there should be an existing avatar in uploads folder. When I need to update or delete it, I expect avatarID.jpg to be in uploads folder. I don't need to confirm it's existence, it needs to be there and I need to first delete the existing avatar before applying the new one. In this scenario: (user has default avatarID and there is a trash avatarID.jpg left on uploads folder because it couldn't be deleted before) I'll probably just attempt to move uploaded file to uploads folder and rename it as avatarID.jpg, assuming old image is successfully deleted. However, the file exists and probably PHP will fail naming it as avatarID.jpg since it's already an existent filename. In the end, user may not be able to update his avatar since there is an existing trash avatar left on system. I need to check if there is already a file exists with avatarID.jpg name. Then attempt to remove it. Then expect a true response from unlink. Then attempt to move uploaded file to uploads folder and give it a name. The bad part is, I need those checks in every function related to userAvatar then. updateUserAvatar, deleteUserAvatar, resizeUserAvatar and functions like those all has to control the same checks. ("file exists? could we delete existing file? if true, continue on" logic in every function.) In my opinion; deleteUserAvatar() should assume there is already a avatar file exists in file system and shouldn't expect a FILE_NOT_FOUND exception. updateUserAvatar() should assume there is no avatar file exists in filesystem and shouldn't expect a FILE_FOUND exception. User either had no avatar at first when he registered, or his avatar is successfully deleted by deleteUserAvatar() function. I don't know if i'm thinking weird or being very paranoid about exceptions. I don't code mission critical stuff, but I don't want my application to behave strangely after few months of use. "Hey, some users can't update their avatars, what's wrong?" and I don't want to have loads of overkill checks or loads of logs to feel safe. I don't know if this paranoia has a name in programming, but I would like to know what's the best case solutions in/before such situation. That's why I asked what's a valid check and what's an overkill check in my first post. As for the rest of your reply, I didn't knew open files could be deleted on unix and I'm not a guy who uses rollback either. Is that a bad habit, or should I execute rollbacks when I make changes to database and then something unexpected happens in the next lines? (like in the case above, avatarID updates correct but avatar fails deleting from filesystem. Do this situation needs a rollback on database?) Sorry for the long post but I wanted to explain myself very clearly.
That's great, but I can't control whether my users use a different password for every site or not. What I can do is implement a 10 minute fix to ensure that if the worst ever happened and my database was compromised, at least my user's passwords would be safe. 
In practice these problems are just never going to occur. The only reason a file won't delete is because it has had its permissions changed by someone, and you can't do anything about that. You can move a file on top of another, it doesn't cause an error and you don't have to remove the existing file first. So when a user uploads a new avatar, all you will have to do is call move_uploaded_file, you won't have to make any other calls at all to the filesystem. 
Thanks for the reply. It is helpful. &gt;because it is so complex and almost impossible to do right. That seems to be the case regardless of what you do. Even this bcrypt article mentions a bunch of ways you can still get boned using bcrypt. You can't win (frustrated / sad face). I'll have to look further into collisions as I don't implicitly understand how a substitution cipher could cause collisions, but collisions are something I only have a tentative grasp on based on educated assumptions. More reading to do... Your reply actually made me realize something I hadn't even considered, and that is someone having their own password already in the database to begin trying to reverse engineer that one known value. Somehow that had never occurred to me. I'd always thought of the process as someone trying to blindly attack a hashed (and salted and whatever more) table. The ways people can exploit a site bends my brain, and I've experienced a minor break-in on a Joomla server I take care of, and this is all relevant towards a php site of my own coding I'll be placing online in the near future. This has been fruitful and appreciated.
May be an unrelated question, but how does the unlink() function behave exactly? Do PHP call the file API of operating system, tell operating system to delete the file, and return whatver os API returns (true/false) to my script or is there any cases when unlink() returns true although the file is not deleted? Also, should I use exceptions on this situation? I usually do something like this; if($attemptToRemoveFileCondition === false) { Error::output('Existing file could not be deleted.'); return; } //Other checks, rest of the code. Should I use exceptions instead? 
Is this just how unix systems behaves or applies to windows systems too?
Just would like some opinions on how people feel about something like this: $salt = $perUserSalt . $systemSalt; $hash = $salt . $password; // Prefix the password with the salt // Hash many times, to slow down the algorithm for ( $i = 0; $i &lt; 100000; $i ++ ){ $hash = hash('sha512', $hash); } For those of us who aren't using PHP 5.3 yet, or for those who are using old code but need to upgrade incrementally... this solves the speed issue, does it not? Thanks for feedback. Edited to make the code appear properly.
I wish I knew that before... Thanks alot.
Same, except I use [KeePass](http://keepass.info/), which is handy because I can keep the file on my hard disk (in Dropbox) and can still access it when the internet goes down. Sometimes, however, I've found that sites won't accept passwords over a certain length; or passwords with special characters. I'm sure there's some reason behind this and I'm sure is ridiculous and archaic. 
Slight correction to the article: the blocking issue for openssl_random_pseudo_bytes() on Windows was not actually fixed until 5.3.7. The release notes for 5.3.4 listed the issue as fixed, but it crept back in somehow before the tag was cut. The offending code, if anyone is interested, is here: https://github.com/php/php-src/blob/php-5.3.4/ext/openssl/openssl.c#L4898-L4900 By now everyone should be past the affected versions, and I've not encountered many Windows deployments at all, but I see the 5.3.4 release cited as the source of the fix every time PHP entropy discussions come up. /nitpicking
I did some more looking, and if I'm reading [this chart](http://www.cryptopp.com/benchmarks.html) right, it looks like SHA-1 is about 60% the speed of MD5 and SHA-512 is about 65% the speed of SHA-1. Much faster than I previously thought. It's probably the advent of GPU hashing plus the ridiculous power that GPUs have these days. That's probably why PBKDF2 does between thousands to millions of iterations of it. Given that information and the ease of bcrypt, I would recommend making the switch. You can tweak the "cost" (aka slowness) of bcrypt to strike a balance between speed and security, if needed. Failing that, I would consider PBKDF2. Besides, if you are on PHP &gt;= 5.37, [password_compat](https://github.com/ircmaxell/password_compat) makes implementation super easy.
Better: use bcrypt on their current hash, then make a flag to let you know to do so for this user. When they login, convert their hashed bcrypted password to just a bcrypted password. This way, even your users who haven't logged in recently are protected. 
+1 for Kohana
Spaces, inconsistent bracing, and the stupid pressure of it being a PSR "standard" 
&gt; MD5 and SHA-1 are awful and fake attempts at doing the right thing. FTFY
Ah yes, sorry. I thought RES took care of it for me but I must've pressed on too quickly.
Dang, LinkFixerBot! You be ERRYWHERE!
Or [don't use bcrypt](http://www.unlimitednovelty.com/2012/03/dont-use-bcrypt.html).
Interesting article, though the author rather defeats himself when he says &gt; There has been considerably less research into the soundness of bcrypt [...] and simply for that reason alone bcrypt is much more of an unknown as to what future attacks may be discovered against it. and then says &gt; The second cipher to consider is scrypt. [...] While scrypt's cryptographic soundness, like bcrypt's, is poorly researched, from a pure algorithmic perspective it's superior on all fronts. So on one hand you shouldn't use bcrypt because it is poorly researched, but you should use the poorly researched scrypt. Because he likes the math better. That aside, I have heard very good things about scrypt and I'm not trying to denigrate it in any way. I think at the end of the day, any choice of bcrypt, scrypt, or PBKDF2 instead of plaintext, MD5, SHA-1, or SHA-2 is a win. I'm personally on board with the push for bcrypt because the barrier to entry for it seems so much lower for n00b devs. If we can get them to at least start hashing passwords with bcrypt, then their crappy code that allows sql injections will at least have potentially lower damage.
Haha, no worries, I like getting those red envelopes. I'm way too addicted. I've said it elsewhere and I'll say it again, I'm really no expert on security, I just stand on the shoulders of those much more knowledgeable than I. I'm not sure I followed *everything* you said. Some is probably my inexperience, and some is probably your exhaustion from doing a dog wash (shout out to /r/dogpictures!). I think the move we've been seeing to multi-factor authentication (from the likes of Google, Evernote, Steam, etc) is a good one. I don't like it as much as a user because it is annoying. But it sure beats having sensitive information stolen.
i agree with you, a strong out of database generated salt on a decent sha hash is good enough for me
another option is to generate the salt on the server algorithm, that way the attacker would need access to the server side code to know how the salt is being obtained and it would defeat a brute-force attack if the attacker only got access to the database 
Thats the problem. For every user on your site who has the common sense to follow good password practices, there will be 100 who just dont know, dont understand or dont care. Its 2013 and people are still clicking on email links and getting infected by malware. You just cannot rely on the user to have an ounce of sense.
Salts aren't secret. Salts make it so that each user's password has to be cracked individually. In other words, if you have both user1 and user2 with the password "12345", the end hash for each will be different. So when user1's password is cracked and the attacker discovers the hash for "12345", he still has to waste processing time cracking user2 because each user's password was salted. So knowing the hash of "12345" for user1 does not help the attacker know the hash for user2. So now instead of the entire database taking a year to crack, the attacker will have to spend 1,000 years.
Tell me about it. I cannot begin to tell how frustrating it is to work on a 200,000+ member site that stores passwords IN PLAIN TEXT, and to not have the client understand how this should be the absolute #1 priority right now. At least I got the go-ahead to parametrize their almost completely unprotected queries. If anyone had ever bothered to hack into the database, they'd have 200,000+ names, emails, passwords, addresses and credit card numbers. And who knows, someone might have. I enabled logging on the client's server when I started.
Kill anything else which might be using the network. Skype causes me problems for example.
I read your post history and wow.... Anyway you can get this done at guru.com. they have an escrow service that will make sure they do the work and get paid.
It uses double quotes for link titles, all characters for inline HTML (e.g. there is no Markdown for definition lists so inline HTML is used for this), angle brackets are a automatic linking shortcut, etc. Please check the Markdown syntax spec. So, basically, using htmlspecialchars BEFORE the markdown parser does break stuff.
And that is so being added to the book chapter... :P
Instead of storing a salt in the table I base a salt on something in the table that will never change e.g. id*time-registered (both integers). That way I have a salt I can always use but a hacker will never know what the salt is unless they have access to the code as well and actually go through it looking for that line.
No. Forget about what you just read there. It is just not right. In particular, see for example the top comment on https://news.ycombinator.com/item?id=3724560 for some explanations. The order of preference in terms of strength is scrypt &gt; bcrypt &gt; pbkdf2, but there are no bindings for scrypt in PHP (as it is rather new). That leaves you with bcrypt as the next best. A main reason why PKBDF2 is a worse choice for password hashing is that it's easier to run on a GPU (in particular because it requires less memory), thus giving the attacker a rather large advantage. Look at that table at the top of the blog post. A 100ms pbkdf2 hash on 8 chars costs you 18k. A bcrypt hash with similar timing 130k. That's an order of magnitude more. But be sure to understand, if you are using *any of* pbkdf2, bcrypt or scrypt, you're good. bcrypt is just the best of what is wildly available.
Error 1045, if I recall correctly, is a permissions error. Try to connect to the server with the username 'root' and no password: &gt; mysql -u root Then select the mysql database: &gt; USE mysql; Then set a new password for whatever user isn't connecting properly: &gt; UPDATE user SET Password=PASSWORD('YourPasswordGoesHere') where USER='TheUserToUpdateGoesHere'; Then grant the privileges for the user: &gt; GRANT ALL PRIVILEGES ON * . * TO TheUserToUpdateGoesHere@THE_IP_GOES_HERE IDENTIFIED by 'YourPasswordGoesHere'; I think that should be it? You might need to FLUSH PRIVILEGES too. Not sure about that. There's no point in offering $$$ for help. That goes against the spirit of this community. If someone wants to help you, they will.
I use Keepass too. First thing I do when creating a new account is inspect the password input element with a web inspector to see I they have maxlength set. If they do, the. I can set Keepass' password generator to go to that exact length. Not 100% effective sometimes but a good starting point. :)
Continuous Integration is a very important part of the development life cycle that's ensure quality and frequent release of working software chunks. If you are interested in beta testing our solution, the beta subscriptions are now open! Request an Invite and have the chance to get a free subscription as beta tester! 
```&lt;?php echo file_get_contents("file.txt") ?&gt;```
This doesn't work, i got the text file in the same folder as the html file, any ideas, thanks for getting back to me btw. &lt;article id="welcome"&gt; &lt;h2&gt;Welcome&lt;/h2&gt; &lt;p&gt; &lt;?php echo file_get_contents("file.txt") ?&gt; &lt;/p&gt; &lt;/article&gt; This is the section of my code
Nope still not working :(
include() or include_once()? It could be a security nightmare - if there's PHP in the file it will be executed - but should "work" under most circumstances. Based on the other responses, you really need to check your error reporting level and logging to find why the other perfectly good responses aren't working. Could be paths, output buffering, INI restrictions, etc.
 &lt;? $filename="file.txt"; $fp = fopen($filename,'r'); while($line=fgets($fp)) { //output text file line print $line."&lt;br&gt;"; } fclose($fp); ?&gt; I've tried this but it just displays ""; } fclose($fp); ?&gt;"
include() or file_get_contents() for a local file. curl for remote. $c = curl_init(); curl_setopt($c, CURLOPT_RETURNTRANSFER, 1); curl_setopt($c, CURLOPT_URL, "http://example.com/path/to/file.txt"); $contents = curl_exec($c); curl_close($c); echo $contents;
it's a local file, in the same folder as the html file.
then replace this: &lt;!-- TEXT FILE CODE GOES HERE--&gt; with &lt;?php include('file.txt'); ?&gt;
&lt;?php echo htmlspecialchars (file_get_contents ('file.txt'), ENT_QUOTES); ?&gt; EDIT: If the text file actually contains HTML, use: &lt;?php echo file_get_contents ('file.txt'); ?&gt;
Example #1 A simple fread() example &lt;?php // get contents of a file into a string $filename = "/usr/local/something.txt"; $handle = fopen($filename, "r"); $contents = fread($handle, filesize($filename)); fclose($handle); echo $filename; ?&gt; 
I notice you're using .html extensions. Is the file posted above a .html as well, or is it .php? Check the source of the rendered page. Is it outputting the php snippet where you expect the text file contents? By default, most web servers configure php to run only for files with the .php extension. If you're using something else, you'll need to reconfigure your web server. 
Fuck. Should be 'echo $contents;'
Make sure you're putting in the entire path from DOCROOT to your file. Also make sure whatever account PHP runs under has read permissions to the file.
 &lt;?php $filename = 'file.txt'; $file = file_get_contents($filename); echo nl2br($file); ?&gt; That should work. If it doesn't, either I shouldn't be writing code at 8 in the morning on a Sunday, or your server isn't configured properly.
Or, the middle finger to anyone trying to maintain the code later: &lt;?php echo nl2br(file_get_contents('file.txt')); ?&gt;
&gt; The order of preference in terms of strength is scrypt &gt; bcrypt &gt; pbkdf2 &gt; A main reason why PKBDF2 is a worse choice for password hashing is that it's easier to run on a GPU (in particular because it requires less memory) Both of these statements are false. Bcrypt may use more memory than PBKDF2, but it still uses a fixed memory size, since it's a modified block cipher. bcrypt is only marginally stronger than PBKDF2, to the point where it's only real advantage is that it's built into current PHP versions whereas PBKDF2 was only added recently. &gt; but there are no bindings for scrypt in PHP http://lmgtfy.com/?q=php+scrypt tl;dr - Use scrypt, not bcrypt.
&gt; So on one hand you shouldn't use bcrypt because it is poorly researched, but you should use the poorly researched scrypt. Because he likes the math better. &gt; That aside, I have heard very good things about scrypt and I'm not trying to denigrate it in any way. I think at the end of the day, any choice of bcrypt, scrypt, or PBKDF2 instead of plaintext, MD5, SHA-1, or SHA-2 is a win. &gt; I'm personally on board with the push for bcrypt because the barrier to entry for it seems so much lower for n00b devs. If we can get them to at least start hashing passwords with bcrypt, then their crappy code that allows sql injections will at least have potentially lower damage. I could not agree more. I just wish the php-scrypt extension was more popular. Then we wouldn't have to worry at all.
It's not on a server yet, just building it and trying to get it to work.
&gt; http://lmgtfy.com/?q=php+scrypt Rephrase: There are no *widely available* scrypt bindings for PHP. And yes, having to install an extension is not what I consider being wildly available. &gt; Both of these statements are false. Bcrypt may use more memory than PBKDF2, but it still uses a fixed memory size, since it's a modified block cipher. bcrypt is only marginally stronger than PBKDF2, I agree that it is not much stronger (as I said, one order of magnitude, which really isn't that much). The relation bcrypt &gt; pbkdf2 still holds though, so I'm not sure what you are disagreeing with here. &gt; to the point where it's only real advantage is that it's built into current PHP versions whereas PBKDF2 was only added recently. That's a big advantage. Really, it's the main reason why the usual recommendation is to use bcrypt. Because it is the only suitable hash that is available in PHP (not counting 5.5 and not counting extensions).
I was waiting for this. I know the guy who did the article. Brilliant bastard.
&gt; random blogger Bite your tongue. Let it bleed a bit. Because the "or dont use bcrypt" article is one of the soundest ive read for a while. Moxie is a lunatic in his own respects, and he sure as hell isnt going to win me over telling me pbfdk isnt a good thing to build auth tokens with. If bitweasil (who built CloudCrack, an ec2 $10 a block cracker) tells me? Yeah, ill listen.
Appreciate your advice! Since I started this thread, I've had a look at CakePHP and quite like it. What you suggest sounds awfully similar to how they suggest we run an API which is reassuring. Is there a particular reason that you prefer Laravel other than that it's more lightweight which I have heard. EDIT: and do you use memcached? Any thoughts on if either of them have better support for it? CHEERS
Appreciate your advice! Since I started this thread, I've had a look at CakePHP and quite like it. Is there a particular reason that you prefer Kohana. And it seems like Kohana has excellent memcached support by default. Have you used this? Does it work well? Cheers buddy
Use "include" and then include your sidebar.php file wherever you want it. Do the same with your footer and header. 
Its prolly already answered but i'd use. $myfilename = "folder/file.txt"; if(file_exists($myfilename)){ echo nl2br(file_get_contents($myfilename)); } 
Why not populate the sidebar from php? For example, you create an array of title=&gt;link in php and you build the html with your preferred template engine with a foreach or sth. In that case the template stays the same for every sidebar. 
problem is that, the items to be included in side bar comes from another object which the controller just assigns to a variable in view. The controller does not process the items from this object. your Solution will add a processing step in controller which I am trying to avoid.
Then turn on your copying machine, it's duplication time. :-) Seriously, if you do all this things in the view, then you'll have to copy and support those "branches" of view code. IMHO In MVC menu links are generated outside the view and only rendered there. 
Wow, and credit cards? You might want to let them know about the whole PCI Compliance thing.... 
This isn't a templating system. Well I mean I guess it could be the most basic of templating systems. But that's not what OP is after.
I *think* what you're asking is how can you process different things at different times to make one output, right? The way I do this is to start with one base template I will use for all output, so structure.tpl might look something like: &lt;html&gt; &lt;head&gt; [$head] &lt;/head&gt; &lt;body&gt; [$body] &lt;/body&gt; &lt;/html&gt; Where head is a header template populated with data, as is the body stuff. $head could be a string or it could be a whole new template, you just assign the output of $headerTemplate to $structure's $head. In turn templates can reference other templates and where you might have multiple entries, eg in a forum post, you'd do the same thing combining them all into one output to replace in the main template. I think that's what you mean, right?
It's *supposed* to be processed in the controller. These are pretty much your two choices: A) Process the sidebar logic in the controller to determine which link is active, what subpages are displayed if any, etc, and load that data into a single sidebar template. B) Load a different distinct view based on what page the person is on and have a bunch of sidebar templates you need to keep straight.
It looks like I wasn't clear on OP's request.
But you understand the pitfalls of such a simple system, yeah?
They're "encrypted". ...The "decryption" algo is stored in code on the same server :(
I'm not sure what your question is about? I suppose if I were worried about the template being loaded or gracefully handling params/vars, a template class/system would be in order, even before implementing something like Twig or Smarty. Like I mentioned, I mistook OP's request as being much simpler than what it is (reusing sidebar code rather than building it out dynamically). But by all means, please explain more of what you mean by "pitfalls," as I'm here to learn, too!
When I first started OOP I thought everything needed a getter and setter. Not so. In this example $prepared is private for a very good reason. It's used internally as a boolean flag that allows the execute() method to create the prepared statement object only when needed and only once. Allowing it to be set externally could have serious consequences. For example let's assume we added the method: setPrepared( $prepared ) { $this-&gt;prepared = $prepared; } $s = new st4t( $con, $sql ); $s-&gt;setPrepared( true ); $result = $s-&gt;execute( 'foo' ); When execute() reaches the line "if(!$this-&gt;statement-&gt;execute())" we're going to have real problems, because $this-&gt;statement hasn't been defined yet. You could actually remove the $prepared flag altogether and replace it with "if( is_object( $this-&gt;statement ) )", you'd be accomplishing the same thing.
"Every CS stundent around the world learns the English nomenclature." Every CS student is taught this, although that doesn't mean that they learn it. I've met quite a few CS people who do not understand a word they are programming.
That is more or less what I meant about power, extensibility etc. I too learn from comments here sometimes so that's why I asked. :-)
These numbers are really as to be expected, and doesn't change any of my "assumptions" of frameworks. I always assumed something like Zend or Symfony would be slow as hell. It would be nice to have a more complete result set, like: sustained &amp; peak memory usage, I/O, etc. It would also be nice to see these numbers in more of a real world situation. How do the frameworks hold up when they are actually doing something? How do they hold up with large, complicated database-driven applications? 
Does anyone have any experience with phalcon? What are your thoughts on it? 
Look up Template inheritance. It is superior to including files. You have a base template that defines the structure of the page. The structure consists of "blocks". In your actual views, you specify the base template, and simply "override the blocks". Works much like class inheritance where only some methods are overridden. For example, the base template has a base sidebar block. If your view needs a custom sidebar, you override that block. If it doesn't, you leave it out and the base one is rendered. No more includes hell but only clean inherited blocks. Smarty and Twig are two templating engines that support inheritance.
I personally don't, but watching the 15 minute video makes it a very compelling framework to learn how to use.
I know you didn't ask about specific implementations, but I will go ahead and ignore you and use Twig to illustrate. One of the features of Twig (and to be completely honest it's not a *unique* feature, again illustrative purposes) is [Template Inheritance](http://twig.sensiolabs.org/doc/templates.html#template-inheritance). /u/Rygu brought up inheritance in his comments so really I'm echoing his ideas. For the most part my applications have 1 or two "high level" layouts (often times either split as a logged in/not logged in layouts or a user/admin layouts. These master layouts will have "blocks" defined for main content body, sidebar body, etc (also overridable blocks for CSS and JavaScript). My individual templates "inherit" from the top level and override the body contents. Sometimes I'll override the sidebar when custom content is needed but I'll put as much common functionality in the layout to make my individual views as slim as possible.
Yet another pointless benchmark which proves nothing. Having small footprint is good of course, but it doesn't say anything about quality, functionality, extensibility, etc. And obviously Phalcon will be faster than anything else - it's C after all.
this is exactly what i am doing now. but instead of twig or smarty i use php itself for templates. I use a factory method to get views that are prebuilt. I can override indvidual blocks in this prebult view by overriding them using getData/ setData methods. This is where I ran to the problem mentioned in question.
I'm blown away by how fast the pages on their site respond.
Yes we use Kohana's caching system extensively - over 150,000 concurrent users means you can't allocate a PHP instance to each one. I'm not sure how Cake differs from Kohana, but from a prima facie look, it seems that Cake doesn't let you extend as much. What if you want to use Dwoo *or* Smarty for templates? Or both? What if you want to use a different ORM? I don't see a way to do it *easily* with Cake without breaking convention. 
You should also benchmark [YAF](http://php.net/manual/en/book.yaf.php)
Thank you so much for this! As this is such a big project, I feel whichever framework I choose will be the one I stick to forever so this really helps! :)
This is completely pointless without the corresponding source code for the benchmarks being published.
It's okay, it's all part of the learning process. Nobody started out perfect.
I'm not totally up to speed on all the new stuff in PHP 5.4 and 5.5 (particularly generators), but wouldn't the generator behaviour be lost for this `range()` function? I would think it would effectively create a new anonymous function (the generator) for each call of `range()`, and then return whatever the generator returns on first call, therefore starting from the beginning every time. Let me know if I'm wrong, of course :) Anyway, I think that even if someone can't think of an immediate use-case for this, it seems like the kind of thing that one would expect should be possible.
These benchmark posts are garbage, use the framework that works for you and ensure that you use opcode caching and cache any frequently used data into memory using memcached/redis/mongo etc or even caching proxy like varnish and you won't have a problem. You will get a far better performance bump with better hardware and caching than any PHP framework choice. At some point, optimization matters, but until your application is doing several thousand requests per second, the above advice holds true.
Seriously, they don't even talk about what it's testing. I mean, I can process thousands of requests per second if all you're doing is sending a 200.
Thank you for taking the time and explaining. After re-reading the code I realize I misunderstood what the flag is used for. And indeed, none of the attributes need getters or setters.
You're missing an $xml-&gt;loadHTML($content) call in your sample code.
I love benchmarks as much as the next guy, but people gotta put some effort into it. Some things to compare, that alone could be pointless: - SLOC - Memory usage - Page execution time - ORM efficiency (if it has one) - this is merely based on an opinion but learning curve - how long does it take to make something simple like a to-do list or a simple blog in that framework combine those with: - source code - better graphs (are higher or lower numbers better?) - specs of testing platform - Apache/PHP configs - come up with an application for all of them rather than using something that is pre-packaged
I agree, he said he used :quick start projects". What are these projects, do they use a database? Is it echo "hello world"? I would really like to see the source code myself.
Oops - incorrect copy/paste - fixed :) The code is broken on PHP 5.2, with the loadHTML call.
I agree with the general consensus here: get training. It doesn't matter so much about where you get it as long as it is reputable; conferences and certifications are great ways to improve. To add to what has been said: **focus on becoming a better developer in general; don't limit yourself to learning about PHP.** Learn about application architecture, software design patterns and common development methodologies, then apply what you've learned to your current positon.
I am interested in real world situations too. Especially because i'm very surprised about the result that Zend 2 is 3 times as slow as Zend 1. Wasn't one design goal of ZF 2 to be faster than it's predecessor?
bcrypt, scrypt or PBKDF2 (with high work factor) - everything else is not appropriate for storing passwords. As computing power increases, you increase the work factor and thereby future-proof yourself.
I get the following output on PHP 5.2.17. Warning: DOMDocument::loadHTML(): htmlParseEntityRef: no name in Entity, line: 13 in /home/user/test/test.php on line 4 Warning: DOMDocument::loadHTML(): htmlParseEntityRef: no name in Entity, line: 14 in /home/user/test/test.php on line 4 Warning: DOMDocument::loadHTML(): htmlParseEntityRef: no name in Entity, line: 15 in /home/user/test/test.php on line 4 DOMNodeList Object ( ) It's not broken, it's warning you that the HTML file contains validation errors. Particularly, this isn't valid. &lt;meta name="DC.Publisher" content="Powerfix Design &amp; Print, Melbourne Australia"&gt; &lt;meta name="Author" content="Powerfix Design &amp; Print, Melbourne Australia"&gt; &lt;meta name="DC.Creator" content="Powerfix Design &amp; Print, Melbourne Australia"&gt; The &amp; should be replaced with "&amp; a m p ;". (No spaces, had to do that to make it show up) But, the PHP code is working just fine. And the code you posted won't output "1", this would. echo $entries-&gt;length;
I just checked the docs quickly. It looks very nice, except there's no automated testing (or maybe I didn't see it?). It's a pretty big part missing for me. I will definitely check it out someday. 
Check your libxml settings so it doesn't halt on malformed markup. 
You, I like you.
don' t be facetious
&gt; I'm having a problem moving a client's PHP web app to our web server. What is the problem?
Key difference is with a template engine like smarty or twig, your page/controller only loads the actual view. It never ever needs to know about the base template. So the flow is much more separate, encapsulated and isolated: Controller -&gt; View (-&gt; smarty loads Base view) Compared to what you're doing now: Controller -&gt; Base view (-&gt; setData replacements spaghetti to build View) Try it out with a template engine. Give it 20 minutes. You'll love it. I know I'll never go back to plain php or reinventing my own damn templating engine.
I would like to address some of the important points which were raised here. First let me give you some background. I started those benchmarks out of personal curiosity and I tested only few of them. It turned out that people are interested in such a comparison so I added some more (as per requests in comments). I'm fully aware that those tests might be naive but as I said I wanted to check what is the bottom line. Yes, it was obvious that Phalcon will be the fastest but people (including myself) would like to know (roughly) how much faster. I would love to repeat all the tests in a more mature way. Give more statistics, be fully transparent about configuration and upload all code to the GitHub. There should be some rules like: * what level of caching is allowed * size of routing configuration * size of configuration I think the most important point is to have each of the frameworks setup by people experienced with them. Without it it's hard to guarantee the test will be representative. I can cover Zend1 and I can find people who can help me with Symfony2. Please let me know if you could offer your help with framework setup. I would love to hear your opinions &amp; suggestions. 
&gt;So, with the above mobile detection code in php one could detect the users mobile and optimize the view and look of the website and serve to the user accordingly **Don't do this**. What is mobile and what isn't is a blurring line, and its assignment is arbitrary. In the 80s the briefcase computers were considered mobile. Is a laptop mobile? Is a netbook mobile? Tablet? Mobile phone? Phablet? Where does the line go? Which device do we design for as our baseline? *Is* there even a line? Who's to say that what's "mobile" today will hold true tomorrow? Additionally, this leaves you with the need to manage your mobile detection script indefinitely in order to keep up with the release of new devices. What you should be doing is design your website to be responsive, adapting its layout and design to the available space on the unit, not arbitrarily assigning a device to one version of the site over the other. You deserve to get a full experience no matter what device you are on (although adapted to fit its viewing medium).
If you use yield in a closure, that closure will not be a generator, but rather a generator-factory. I.e. in order to get at the actual generator you have to do `$closure()`. This is what the above code does. It has `(function() { yield; })()`. The `function() { yield; }` by itself is a generator-factory, with the `(...)()` wrapped around it becomes a generator. This generator is returned, so range ends up being a generator (well, not "being", but returning, which is the same from a practical pov.)
Slow clap and upvote ! I agree 100% that Template inheritance is the way to go. It is actually funny how it doesn't strike people (myself included) that inheritance fits incredibly well with complex templates. But once you have started using it, you realize how bad your previous solutions to common problems with templates were...and how nicely inheritance just fixes everything. Without much performance hit, I might add. I would recommend Twig, because it is IMO the most well-thought and handy implementation. But I also worked a lot with Smarty, and it does the job as well. Laravel's Blade templating system also has template inheritance, but I really don't like the syntax and use a Twig for Laravel bundle instead.
The hack is trying to get a copy of the system file /etc/passwdfrom the filesystem. If your ajax.php script takes a Page parameter that blindly accepts a file name off the file system to display/return it is saying cd up to the root directory using ../../ then get /etc/passwd Hopefully you aren't blindly accepting the file to display :) Doesn't sound like though.
thanks for the answer. I don't think they can access... this is my ajax.php &lt;?php header('Content-Type: text/html; charset=ISO-8859-15'); define( 'BASE_DIR', "" ); require_once BASE_DIR . 'config.php'; if ( !isset( $_GET['Page'] ) OR !preg_match( '/^[a-z0-9_]+$/i', $_GET['Page'] ) OR !file_exists( 'Ajax/' . $_GET['Page'] . '.php' ) ) die( "{message:'You should not be here!'}" ); include 'Ajax/' . $_GET['Page'] . '.php'; ?&gt;
when I try to do same thing I see a error massage that I wrote. something like "you should not be here"
fwiw you can do this: `echo call_user_func(function ($foo) { return $foo; }, 'bar');`
Did you append %00 (null byte) to the end of the string you tested with?
never ever accept user input without sanitizing it. just because you prefixed the include with 'Ajax' doesn't mean i cannot go up the directory. the suffix may saved you here... include 'Ajax/../../../../whatever.php'
The preg_match would be preventing access as it doesn't allow the period/dot character. The file_exists() test is also protecting you as you are testing the filename appended with .php. If you weren't adding the .php the Page parameter would work as the file does exist. I prefer a "whitelist" approach where I list the files that can be served and check the Page parameter is in the list of files.
Attempt to access /ajax.php?Page=../../../../../../../../../../../../../../../../../etc/passwd%00 on your server. Just make sure the %00 at the end is included. For reference, this is the issue at hand: http://hakipedia.com/index.php/Poison_Null_Byte
This is called a directory traversal attack. The attacker is trying to find a vulnerability which would allow him to gain access to the password registry on the server.
You can ditch the preg_match() thingy if you're only using it to make sure no one is throwing a / or . at you and replace it with basename() - the function returns only the last part of the supplied patch.
He is sanitizing it - the preg_match line is making sure the parameter only has letters/numbers/underscores.
&gt; Looks like you have a vulnerability in your script Looks like someone believes there may be a vulnerability, so it giving it a go. Bit difference, but obviously not mutually exclusive.
I quick run through `htmlspecialchars()` wouldn't hurt though.
Do not escape content in a fashion not suited for the way you're going to use it. 
Yes it would. htmlspecialchars converts the characters `&amp;'"&lt;&gt;` but the preg_match line guarantees none of those characters are in the string.
Then you filter for those values, instead of introducing HTML entity encoded entries into something representing a filename. 
`htmlspecialchars()` is for output only -- not input. If he echos `$_GET["Page"]` out somewhere then that would make sense.
It would filter just about nothing unwanted in this case as htmlspecialchars replace &amp;, ", ', &lt; and &gt;, none of wich are a particular threat here. Beside the replacements are html entities which are totally useless and will cause issues in a path. You use htmlspecialchars when you want to display user content in an html context, not everything you use something from external sources! (My pet peeve, people who htmlspecialchars/htmlentities content before saving to database!)
He's filtering out `&amp;'"&lt;&gt;` in his preg_match by only allowing letters, numbers and underscores.
A realpath() before that wouldn't hurt.
Next time you decide to [benchmark](http://awesomegifs.com/wp-content/uploads/dead-horse.gif) a framework, look for professional (medical) help. - it is pointless to benchmark "hello world" application - when people choose a framework, they do not aim for performance - never trust a benchmark that you did not fake yourself 
This doesn't tell us how I can run the tests myself on any number of code I have laying around. Most of it is none of those frameworks so I have zero context without running my own tests.
The null byte marks the end of a string in C, so they're simply trying to bypass the extension you added to the file name. So "/etc/passwd%00.php" will ignore the ".php" suffix
you are correct, this is kinda safe. personally i wouldn't consider any superglobal "sanitized" by just running it through an if statement. 
Without the preg_match() he would be screwed. **The null byte at the end (%00) will cut of the '.php' extension.** It's called a [null byte attack](http://php.net/manual/en/security.filesystem.nullbytes.php).
 $a = array(1, 2, 3); $b = array(4, 5, 6); foreach (array_merge($a, $b) as $c) { echo $c . PHP_EOL; } $a = array('hello' =&gt; 'world'); $b = array('something' =&gt; 'peace!'); foreach ($a + $b as $c) { echo $c . PHP_EOL; }
This is usually what people want. It's not exactly the same though. If you use the keys the results are different. foreach (array_merge($a, $b) as $key =&gt; $element) { echo "$key:$element&lt;br&gt;"; } It will echo one array with keys 0 through 5 instead of two arrays with keys 0 through 2.
My issue with these solutions is that I have to use $a and $b separately later on, and my foreach is modifying them, not just reading from them. Just for the sake of printing (like my origional example), these work great.
You may be able to define an Iterator so that you can perform the required actions.
There isn't a transaction processor that can maintain that card database for you/them? 
You'll be fine then. array_merge returns a separate third array and the first two will be untouched. 
Just to clear up any misconceptions, no passwords are actually stored in `/etc/passwd` on modern systems. That is just the list of system accounts. Their passwords (hashed) are stored in `/etc/shadow`, which is normally *only* readable to the root user. This is just a test to see whether the web server has read permissions to areas outside of the document root and potentially to get usernames for future SSH brute force attacks.
When people buy a car they do not buy it based purely on the number of seconds in which it will go from 0 to 60, but knowing that metric can't hurt. It's not pointless to benchmark a hello world application, it just shouldn't be used to draw any conclusions which don't exist.
But if they are all tested on the exact same environment, then they are equally affected and this is a moot point... right?
People usually get antsy about these posts when their favorite framework is posted as one of the slowest. It's not a competition guys.
What do you think about this? I read up on exceptions and wrote part of the class and called it with an invalid code. Also tried to comment my methods correctly. http://pastebin.com/LkBAKWN2 
Not exactly. It only affects frameworks that use secure random sources. Most micro frameworks in the top 5 do not have a security layer and therefore do not generate random data from secure sources; others have it disabled by default (CodeIgniter for example).
All you are doing is running the same code inside the foreach on $a and $b. Couldn't you just : $forEachCode = function() { }; $a = array_map($forEachCode, $a); $b = array_map($forEachCode, $b); //or array_walk_recursive(array($a, $b), $forEachCode); 
Good point. Laravel and FuelPHP both do this
Thank you for pointing out the null byte attack and putting into bold. More people need to know more about this. 
It would be interested to see the source and configuration used to benchmark each framework to see exactly what affected the results.
The benchmark is the worst. Paul Jones has one that is much better: https://github.com/pmjones/php-framework-benchmarks
I've also wrote a post on this a couple of months ago: http://danielribeiro.org/yes-you-can-have-low-coupling-in-a-symfony-standard-edition-application/
ooo do I smell Closures? I try to avoid them unless I specifically need a callback. My solution ended up being just write a function for this. I suppose mine is a bit less elegant for abstracting to any number of arrays, but I find it much more readable, especially to the interns :-) . $a $b $a = foo($a); $b = foo($b); function foo($c) { foreach($c) { //do stuff to $c } return $c; }
Maybe I was unclear: I DO want the two arrays to be touched.
Class structure in PHP is very similar to other languages, whilst you shouldn't feel bad about not liking them (because its possible to get away with not using them) you will find it hard to progress as a developer without coming to the conclusion that classes are the future/past/present of any language really
Since I just woke up when I wrote that, it's probably my reading that's unclear. Okay if you want to mod the arrays, I would use array_map on both arrays then just display the results after that.
Rasmus is in your camp.
Can you be a bit more specific as to why it doesn't work? are you getting any error messages?
we have mutiple mobile devices on one account, and the server manages and correlates data between the mobile devices, and presents a web view
OOP can be confusing at first. Also, you'll see a lot of code out there that uses OOP for no reason, or the wrong reasons and it'll confuse you even if you're good with OOP.
Oh sorry, i get no errors, but it just displays blank
This displays a text area but inside it just says "&lt;?php include("./flepath/file.txt"); ?&gt;" instead of the txt file text.
He just assumed anything as 100% safe, that bothers me. 
View the source of the page in your browser and check to see if it is really blank or does it show you the php code?
I stand corrected.
sounds like there is something going on with iis. can you include more information about your setup? eidt: I realize he's using apache now, and I look foolish. 
Your code runs fine for me, although it doesn't put in a line break. I use something like this to publish from files: &lt;article id="welcome"&gt; &lt;h2&gt;Welcome&lt;/h2&gt; &lt;p&gt; &lt;?php $handle = file_get_contents('file.txt'); $handle = str_replace(',', '&lt;br&gt;', $handle); echo $handle; ?&gt; &lt;/p&gt; &lt;/article&gt; You'd have to alter this if you intend to use that exploded array you have to format it further. If you want to keep your current code you need to adjust line 11 to something like: echo $v.'&lt;br&gt;';
Erm well, i have just installed wamp on my computer, put my website files in www folder.
This just displays "', $handle); echo $handle; ?&gt;" , the rest of the php is commented out when i look at code in my browser.
What is the filename of the file you have this code in? it needs to be a .php file, if it's a .htm/.html file then your wamp installation won't work correctly.
Really depends. Firstly my assumption is that you are saying you don't like OOP rather than specifically the class construct in PHP (some would arge that you could do PHP without using classes). Anyway - If you're just building simple very cli apps or mostly static sites then there may not be any reason to create any classes. If you're doing anything more complex it probably is a bad thing that you don't like using classes. While it is true you can write good procedural PHP apps most people can't. This is for a few reasons: 1. It's much harder to keep code clean when so much of your code exists in global scope. 2. Practically every single example of a non-trivial procedural PHP application you could look at on the internet is really awful. 3. Any third party dependency you include will most likely be written in an OO fashion so ultimately you'll end up with a mish-mash of procedural and OOP whether you like it or not. I won't want to sound too judgemental but GENERALLY people who say they don't like classes just don't understand the power of OOP and shouldn't be encouraged to continue being ignorant of it.
I've tried it with both .html and .php, neither work.
Your wamp installation might not be configured properly, unlikely though. How are you accessing the file in your browser. What is the URL?
At the moment, i working offline, so i'm just opening the .html/.php file
Nevermind think i got it working, just relised i had to open the .php file threw wamp, thanks though :)
Haaa, thanks again.
Both are quite bloated but they have to be considering their target markets. I find Symfony as a framework to have a lot of "hidden magic" in that it is harder to trace the request process in the background. That being said, some of the Symfony components are an absolute pleasure to use and are quite clearly the best available. Zend is still as heavy but it is simpler to follow the entire request cycle. Methodologies used in the development of the framework seemed to change mid way through from pushing Dependency Injection to using their Service Manager which is essentially a service locator that adds a layer of complexity that is harder to test when used. In answer to your question, it depends on the job you're applying them to. With the advent of Composer and Packagist I would argue that a lighter weight option would usually be best with the inclusion of components from either framework that are best suited to the job at hand.
On the fourth thread: http://www.reddit.com/r/PHP/comments/z5hwu/what_do_you_guys_think_of_laravel_framework/ I wrote the original with another account and it definitely needs updating. Laravel (at least the 3.x version) cleaned up a lot. Just to give you an idea about the changes: * there's a lot more support now especially due to expanded usage. I can see L4 getting much more coverage and since it shares a lot with Symfony 2, it'll be easier to get help * Laravel's functions and usage has greatly improved and I never had to switch to fluent (except for database-specific stuff, I use PgSQL and the ORM doesn't have PgSQL full-text search stuff (understandably)). Good luck!
Just out of curiosity, what framework do you use? It doesn't have to be symfony or zend. 
I tend to build as needed, I've written my own routing/mvc layer that utilises my own dependency injection container and I bring in components as I need them through composer.
Well, to be fair: You can trust that preg_match will perfectly run a totally wrong regular expression. The function will work, but your expression may not. Also, Regexes can become hard to maintain as they become more complex, so i won't recommend them for security, because it's very easy to produce errors if a new developer screws something up. PHP has filter_var for most cases: http://de2.php.net/filter_var and the corresponding filters: http://de2.php.net/manual/en/filter.filters.php Otherwise, i would recommend to restrict all "path" related stuff to very specific directories with a whitelist. In short: No, it's not 100% safe in all cases (in this one it is).
Yup. I have those things on my projects all the time. Together with excessive search for wordpress related urls and holes. Try really just everything which worked somewhere.
Let's say you have an array $test = array('Hi', 'This', 'Is', 'An', 'Array'); foreach($test as $word) { echo $word; } basically loops through any data object performing an action you specify on each specific data.
my framework will beat yours in a fight ;-)
Thanks! That makes it a lot easier for me to understand
No problem, keep learning :)
Yeah, well, my dad's framework will kick your dad's framework in the face.
I totally overlooked that. So the minimum cost is $45 to use any of their code at all. It is $150 year to receive updates after the first quarter. Interesting model.
&gt; There are no *wildly available* scrypt I think you are looking for **widely** available. I'm not sure what wildly available would mean, but I immediately think of Gary Busey.
To add to RandomPerson99's response, to implement the same with a standard for() loop, you would have: $test = $test = array('Hi', 'This', 'Is', 'An', 'Array'); for ($i = 0; $i &lt; count($test); $i++) { $word = $test[i]; echo $word; } So as you can see, it saves you a few steps and makes the code a bit cleaner to work with (in most cases). Another option for the foreach() loop is the following: $test = $test = array('Hi', 'This', 'Is', 'An', 'Array'); foreach ($test as $i =&gt; $word) { echo $word . ' is at position ' . $i; } The above is helpful if you need to know the index. Keep in mind that in the particular example I gave, the $i variable with be numeric since you have a simple array. If you have an associated array, it would be the key of the array.
Hehe, good point. Fixed now :)
I don't think there is such thing as a best framework as you should use the best tool for the job. I don't think MVC is the solution to all problems. That being said and as a Zend 1.1.2 dev I would probablly go for Symfony2. While ZF2 is promising they had to release it quite quickly to compete with SF2. There is allot of innovation coming from SF2 people like Doctrine, Twig, Composer.
&gt; This is a picture of my red car. It looks fast. Is it fast? We won't be able to give you much useful information, my friend. You need profile your application to find bottlenecks. I use [Paul Reinheimer's alternative gui with xhprof](https://github.com/preinheimer/xhprof) to get an idea on what's taking the most time. You should also consider your requirements before you spend time on optimizing. It doesn't matter if 11 files per second is fast. All the matters is: Is it fast enough to at least meet your requirements?
Bloated as in it has too much stuff in it? I ought that the point of its Dependency Injection component was that lots of services get defined, but only stuff you actually use gets instantiated? Is there still too much crap going on even despite that? One of the things I instantly liked about SF2 was how much shorter the stack traces were compared to SF1.4; the stack feels "shallower", even if there's plenty of other stuff supporting it from the edges. Totally agree about the components; love em. No surprise that they're cropping up in the core of everyone from Laravel to Drupal to PHPBB.
Sugar has serious difficulty coping with lead databases in excess of 250k, even on their hosted platform. The performance hit past that point is very unimpressive. The workflow automation stuff is pretty good, but nothing you won't find in Salesforce. Beyond that, I found making changes in the Community edition to be a convoluted process and often a poorly documented one. 
Another +1 for Kohana
As an example I recently had the need to trace some calls to ZF2s TableGateway as I've been using Oracle and there are a few issues, from me calling the method with my built query to the point that I receive a result it passes through ALOT of other objects and method calls but as I said, considering they are aimed at enterprise, all options have to be considered. The request cycle is just very heavy. I find Symfony 2 is similar in that respect, it's difficult to express these points without sounding like I'm criticising them, both are fantastic frameworks that have their place, which is why I use them for certain projects. The key is knowing what tool is best for what job and not relying on one tool for everything.
Thanks for the tip!
I never said preg_match was 100% safe in all cases. I'm saying the code in the example is provably 100% safe for its purpose.
[Doxygen](http://www.stack.nl/~dimitri/doxygen/) and be done.
Most of the components in Symfony can be used independently of the framework itself. Somebody more experienced can list bundles specifically, but a number of them I know are pretty useful. EDIT: I was wrong.
Okay, so out of curiosity, if I made a function that hashed, then used usleep(500000) (.5 seconds) before returning the result, would that have a similar effect? I wouldn't use something like that, just curious though. 
I've used both recently for two large projects, and to be honest ZF2 wins for me. Developing locally (VM with mounted shares), Symfony with assetic just proved to be too slow for my needs. Even despite the lack of documentation at the time for ZF2, it was far easier and faster to get an application up and running. That said they both suffer from configuration hell... My suggestion, try both and figure out which one appeals to your style the most.
Nope, because the attacker could just omit the usleep part and still end up with an identical hash. Thus the algorithm itself has to be slow.
From their license: "Products derived from the Software must include an acknowledgment that they are derived from CodeIgniter in their documentation and/or other materials provided with the distribution." It's an advertising clause and isn't entirely uncommon in licenses, but it's certainly silly. Lots of software these days will have a section of their documentation where they list all the libraries they used. The end credits of Starcraft 2: Wings of Liberty has a few seconds of "license crawl" during their credits, for example. The requirement is that somewhere in your documentation, or where copyright notices are placed, you mention that you used this framework. Normal people won't notice or care, really. Their examples follow the usual pattern: develop for yourself == publishing not required. selling or otherwise developing for other people requires that you share your code (or offer to share) with the people who buy the software from you. Oh, and tell everyone how awesome the framework is, because... yeah. I've never really got the vanity thing. Oh well.
Replace $forEachCode with 'foo' in my examples and it's functionally equivalent... The array functions just basically allow you push the iterating out of userland. 
open_basedir as well. 
Neither. It comes down to a matter of comfort and which style you like better. **symfony2** symfony2 has more 'magic' than Zend Framework 2. By this I mean things like annotations, or the need to never really specify where things are at. Things just kind of... work. There's a lot of CLI commands through their console that help with code generation and basic tasks. The downside is that because you can do things so many different ways (annotations, XML, PHP, yaml), keeping your bundles consistent can be a pain. If you are using annotations for a bundle but can only find tutorials that use XML, it looks inconsistent. **Zend Framework 2** Config hell! Actually, it's gotten a lot better than the betas, but you still specify where a lot of things are. If you like tight control of where things are located, or being able to quickly glance at a config file to see how something is set up, it's there. There's a lot less magic in Zend Framework 2. The documentation is a bit lax in places, but overall because the system isn't so spread out between different ways to declare code it feels more consistent. You will also lose a bunch of command line helpers that symfony2 has. **tl;dr** It doesn't matter. Each has a strength and a weakness, and neither will go away. Pick one and use it, you'll be fine. 
This is a pretty nice ol' list: &lt;https://gist.github.com/ziadoz/1677679&gt;
I have come across twig on numerous occassions, but as I have some bad experience with smarty I didnt give it much thought until now.. Now, after reading your comments, I tried twig. Its looks promising, to say the least....But it was not until I started extending it. They should call it something else rather than 'extending', because extending is something you don't have to do normally in a library. Thanks for sharing this information. I hope twig was the answer I was looking for, and will solve a lot of my problems in going forward. 
You can check out [CiviCRM](http://civicrm.org/). You can use it with WordPress, Joomla, or Drupal and it's extendable. Not sure what you're trying to accomplish, but I doubt many of them are "fun".
thanks, gonna try it out now!
Thanks for the reply. It seems like there are good alternatives that have less squirrelly licenses ... taking a look now at Cake and Laravel. 
thanks for your firm and positive response
Can't stress this enough. Use the php.net manual. It's great. Just be wary of really old comments (you know, shit from 2007). Also, google. Theres a truly massive amount of helpful stuff out there for php. I've been coding PHP for around 10 years and I still regularly look stuff up on php.net or google.
 &lt;?php /** * Create an iterator over a list of arrays. */ function multi_iterator(/*...*/) { $i = new AppendIterator(); foreach (func_get_args() as $idx =&gt; $arg) { $i-&gt;append(new ArrayIterator($arg)); } return $i; } $a = array(1, 2, 3); $b = array(4, 5, 6); foreach (multi_iterator($a, $b) as $k =&gt; $v) { echo "{$k} =&gt; {$v}\n"; } Output: 0 =&gt; 1 1 =&gt; 2 2 =&gt; 3 0 =&gt; 4 1 =&gt; 5 2 =&gt; 6
As someone who used to feel that way about Symfony, I'm fairly certain that it was simply my ignorance of the framework. SF2 is insanely powerful, and while I can see why you *might*call it bloated in the sense that the full, all bundles framework has a lot of code, it isn't necessary to run the full framework, and it doesn't load *most* classes, even within the framework, until they are needed. If you really want to make SF2 be a powerhouse, learn about how to use services, how to use the components, and *architect* your project so that you separate things correctly. :) EDIT: Not specifically directed at you, BTW.
I think you mis-read my comment, by bloated I mean that each request to the full stack framework of either Zend or Symfony goes through a much larger request cycle than their lighter weight counterparts such as Laravel. This is not opinion, it's fact. It is also required that it does so considering the features that they provide. I use both frameworks and they are both fantastic as stated in earlier comments, they are just not necessarily right for everything or everyone.
That is essentially the point I was making
You can try $arrayItems_search = array(); $myDirectory = opendir($directory); while($entryName = readdir($myDirectory)) { if($entryName != '..' and $entryName != '.'){ $arrayItems_search[] = $entryName; } } // close directory closedir($myDirectory);
Zurmo looks pretty interesting. It's a CRM though not ERP.
&gt;There is allot of innovation coming from SF2 people like Doctrine, Twig, Composer. To my knowledge, neither Doctrine nor Composer are related to Symfony. 
I can't find a reason why we shouldn't. Especially I can do things like this $comments = Post::model()-&gt;findByAttributes(array('slug' =&gt; 'myslug'))-&gt;comments; It would have taken a long query if I didn't use ORM. 
What you really look for is profiling not a benchmark. Install XDEBUG and Webgrind to analise results. Is 11 fast for a "powerful dev server"? I have no idea. Generally speaking disc access is super slow. Perhaps it will be better to parse everything on a RAM drive and have a job in backgrand to move things to the harddrive once parsed. If the issue is database maybe your inserts take too long because of a heavy indexing. You might also thing about moving big tasks to a dedicated server. Then you can use Gearman to schedule tasks there.
I work on VM as well but any big project will quickly get super slow in this environment. Robust framework and big application consumes 250-350 files per request. This is a major concern in VM environment. The only solution which worked for me is to move those files to memory. You can use ram drive or better a PHP accelerator like APC. 
The code is the proof. For the purpose of sanitization... if ( preg_match( '/^[a-z0-9_]+$/i', $_GET['Page'] ) ) ...will always be true if the URL parameter 'Page' only contains letters, numbers of underscores. There is nothing more to it.
Are you serious!? You 100% sure about this? How has it gained so much popularity with that shocking finding?
I always used only one framework. Its CodeIgniter and its so far so good to me. You can use its integrated 'Active record' for database query abstraction, or use strong ORM like Doctrine with it as well.
unexpected T PAAMAYIM NEKUDOTAYIM
They are all contributed to by Fabien potencier so symfony has some influence in their design
Anyone can contribute to those projects. Doctrine and Composer certainly wasn't started by Fabien, and the fact that he's pushed some stuff to their repositories mean very little in terms of Symfony's influence on the project.
&gt; Symfony2 does not have hidden magic. To be fair, it does. Maybe not "hidden magic" but it does have quite a bit more magic going on than ZF2 or Symfony 1. Not saying Symfony 2 is bad, mind you, just that it can appear a bit magical.
One piece of advice: Learn to use [Composer](http://getcomposer.org/) It will save you an unbelievable amount of time and hassle in downloading and installing PHP libraries. Virtually every package you could want is available at https://packagist.org/ and you can install them using Composer.
[Pheanstalk](https://github.com/pda/pheanstalk) is the best for beanstalkd.
will this work by reference or by value? For example, can I use your foreach to add 1 to every value in $a and $b?
symfony1 was the same way, and that was one of the big reasons symfony1 developers gave for why it was so great. It was also the reason I switched to Zend Framework 1. Magic means I'm not 100% sure what is going on, and I didn't like that. symfony2 isn't quite so magic heavy as 1, but the mixture of CLI tools and things like annotations make it so. ZF2 is more manual in some respects, but I kind of like that since then I know exactly how something was set up.
That's a terrible idea
What's Magical? Annotations? Configuration Loading? Anything in particular?
A bit of pedantry, forgive me: *Bundles* are pretty much Symfony 2 specific -- you can get them working with other Symfony HttpKernel apps but it's kind of difficult (and at that point you might as well use Symfony TBH). The Symfony2 *Components*, on the other hand, are written to be used independently of eachother. [This is a list of all the available components with links to their documentation.](http://symfony.com/components)
Both Doctrine and Composer (and Twig, Silex, Assetic, Behat, phpspec2) were created and/or are maintained by active members of Symfony community. For Doctrine I'd say about 70% of core team are also Symfony2 developers. For Composer it's probably even more. So while you're correct saying that neither are directly related to Symfony, they are developed by "SF2 people".
Symfony2 doesn't have more magic than Symfony1 - one of the main reasons for full rebuild from ground up was to get rid of the magic... I can agree that Symfony2 has steep learning curve, but a lot of magic - no, you just don't understand the tools you're working with if you think that way.
If you need a lightweight solution the Slim framework is quite good.
ZF2 was not released quickly to compete with Symfony 2. That's just a nice myth. If you were familiar with the ZF2 development process, you'd know that Symfony had little or nothing to do with the timing. It was missing milestones, if anything, and there was a degree of centralised control weighing on its progress that led to me writing a rant or two :P. Once that was resolved, it trundled out fairly quickly.
Calm down, I'm not insulting the framework, just pointing out that as a full stack framework it is heavier than some other frameworks in bootstrap and request lifecycle... BECAUSE IT HAS TO BE. 
It's not an idea, it's an answer to a question
Yes, that's what I meant. Sorry about that. I've only used Symfony once or twice.
Doctrine - I see many familiar names here http://www.doctrine-project.org/about.html Of the actual core team 3 out of 5 are Symfony2 developers - that I know of for sure. I think other 2 are also, but I'm not 100% certain, so let's leave it at 3/5. Nils Adermann contributes behind the curtains, the whole reason he started Composer project is that he needed a simple enough tool to manage dependencies for next version of phpbb, which will be built entirely on Symfony2. I've chatted with him personally at Symfony Live events, he seemed quite passionate about Symfony2. Konstantin Kudryashov - I've worked with him in the same company (KnpLabs) for the last 1,5 years. Guess what framework we use for all our projects. I'll give you a hint: Konstantin does not like ZF2. Why is this relevant? Considering original topic is Symfony2 vs ZF2, I think knowing that Symfony2 is the framework of choice for a lot of people that bring innovation to PHP ecosystem is a very good point to take into account.
it's actually 1. class is given directory in constructor 2. get filename, break it apart to get relevant info 3. get handle on the actual file, copy it to a permanent location, insert the name and location into table A 4. if successful, insert the data from step 2 into table B 3. move the file from it's old location to a temporary archive 4. GOTO 2 I kind of have to do it in this order, as each step depends on the one previous.
So you're keeping 2 copies of the same file? That's obviously a deficiency in design, though it may be unavoidable for you. Originally, I wasn't aware that you were also copying the files -- that's most likely going to be your bottleneck. Filesystems are slow, at least if you're using spindle drives, and so working around that will likely yield the greatest improvement. If you could avoid manually moving so many files, and instead do something like a directory rename (which will effectively move the files, but not require copying the actual file data from location A to B), then that'd be a big win I think. Do you move them all, regardless? Or only if you can insert them? You could probably alter the logic to instead delete the files out of the directory that are invalid, and then rename that directory. 
Maybe bloated is the wrong word but the request cycle is bigger than most, it wouldn't have the feature set it has if it wasn't 
I'm aware of this, but this it's a much higher entry point of knowledge to do this, the OP asked which was better as a framework which I took to mean full stack, as my previous comments have stated, some of the components are quite clearly the best around and a pleasure to use but when the entire feature set is wired together there will understandably be a performance loss. The impression I'm getting here is that we essentially agree with each other, but what you're discussing is not most people's entry point to Symfony, or Zend for that matter is a lot lower. To use either of these to their potential is a steep learning curve.
Depending on the config of the server this may not be possible. Some real paths cannot be accessed directly.
Good point
Just to offer some clarification. You subscribe to get what you want; you stay subscribed for updates and support. you can subscribe quarterly ($45) or yearly ($150). you get. Full access to our private github repositories (28) All code is Open source licensed w/unlimited usage Priority support New packages, extensions, add-ons, and/or themes every quarter 1% of our proceeds will be donated to Laravel 30 day money back guarantee.
It was a struggle haha, I completely agree with your points but you can't assume other people know what you know.
For password hashing: https://packagist.org/packages/ircmaxell/password-compat For an auth system: https://packagist.org/packages/cartalyst/sentry 
&gt; So why is there a need to associate these projects with Symfony? Yes, there is some overlap between the projects, but that's true for any popular open-source project. There is a lot more overlap with Symfony2 than any other framework or project. Of the mentioned projects, [Behat](https://github.com/Behat/Behat/contributors) seems to have the lowest amount of Symfony2 developers. Even then, the top contributor is a significant user (member of FriendsOfSymfony). The next nine include a Symfony2 developer, a Symfony2 contributor, and a SensioLabs contributor and another significant Symfony2 user. The numbers are also heavily biased by users of Git and GitHub. So its not to say that other framework users/contributors/developers aren't contributing code anywhere. While looking at the top 10 contributors-- those using another framework were more rare. My longer-than-expected look at the contributors showed Symfony2 users/contributors/developers representing 26/40 of the top 10 contributors for the 4 projects you mentioned. Other frameworks counted up to 8/40... two of which were Silex developers). tl;dr Symfony2/SensioLabs are getting so much attention for those projects because they collectively appear more involved than any other project. Edit: noticed another Zend user 
Hopefully one day PHP will fall back to attempting to invoke a callable property when a method doesn't exist.
Yes, that woukd be logical. There is no reason to allow dynamic properties but restrict dynamic methods.
I have also used both, and I find myself coming back to ZF2 as well.
In reference to the "without having it pre-tagged" portion of your question... Doxygen, like all other documentation generators I know of, requires that you pre-tag the functions/variables by placing a comment just before the function/variable declaration.
With the current eval() approach a 'real' object is generated having 'real' methods and properties. Which in turn can be later mocked/stubbed and used Reflection upon. So e.g. if you have calls to method_exists in your code, the __call() aproach may not work. There's nothing dangerous about usage of eval() in this particular case though. In fact if you ever used any code generation/scaffolding tools and included those in your project, you're basically doing the same thing as Sylph does (e.g. executing generated code). 1) Well PSR-0 does require a vendor name to come first, so PHPixie is a rather good one, better than 'dracony' anyway(e.g. like symfony has all those libraries under Symfony namespace). 2) Don't like static methods. Perhaps I'll be adding some configuration options in the future (e.g. customize class names etc), and it's really best to have non-static builder for these. 3) https://packagist.org/packages/phpixie/sylph
Livemocha uses CakePHP , they have millions of users. I guess applications dont scale magically whatever framework one uses ;)
Zend and Symony are both frameworks and libraries. You should be able to use both. With Symfony there is a kind of canonic way to do things , not with Zend. I use Silex with both Zend and Symfony components ,i'm happy with both. it doesnt have to be something vs something else.
I have thought about it, do you know of any good places to learn how to use doctrine 2 and how to combine it with zf2?
For plugins (and I think themes too), they're doing it by using the function called get_file_data (wp-includes/functions.php) They have a list of possible "headers" like Plugin Name, Description and so on and they retrieve it via regex like: /^[ \t\/*#@]*Plugin Name:(.*)$/mi and so on. Take a look at that function so you can see exactly what happens. Don't be afraid to dig into WP's code, it's pretty nice. 
https://ignite.io 
For what it's worth, it took me learning a truly object oriented language, C#, before I could really understand what the heck was going on. Obviously, I'm not that smart so this may not apply to you, but I had the problem of not being able to break my habits in PHP. It took the huge paradigm shift that is learning a language on the polar opposite end of the spectrum to really open my eyes.
It's funny you should say this, because I was exactly the same. I never quite got OOPHP until I learned obj-c, then when I came back to php everything seemed so obvious to me. 
Get the following books : Patterns of Enterprise Application Architecture Design Patterns: Elements of Reusable Object-Oriented Software if you are really serious about Object oriented programming. I would say PHP is not a good language to learn OOP since you are not forced into OOP with PHP. Try Java for instance , it is much more strict and verbose , but what you'll learn in java will help you write better object systems in PHP.
&gt;Don't be afraid to dig into WP's code, it's pretty nice. the WordPress codebase reads like the dream book of teenage stoner. a patchwork of half baked ideas and limitless voids.
I benchmarked my new php framework today -- got over 8.7k requests per second! Here's my benchmark code: &lt;?php echo "Hello, " . $_GET['world']; &amp;#3232;\_&amp;#3232; 
Thank you very much! 
https://github.com/Seldaek/php-console
[Object-Oriented Thought Process, 3rd Edition](http://it-ebooks.info/book/932/) 
I actually saw this one. The downside is, it's something you have to install yourself. You can't run a hosted version for everyone to use because it does no checking for malicious code.
^^ agreed! Being able to pull in specific, high-quality, tested, supported, generic and uncoupled libraries from Symfony is an absolute godsend. Specifically, the console library is fantastic and the validation libs are good too
&gt; without creating an entire parking lot just for a single parking space &lt;?php /** * A parking space object. * * @package ParkingDemo **/ class parkingSpace { private $filled; function __construct() { $this-&gt;filled = false; } public function isFilled() { return $this-&gt;filled; } public function setFilled($arg=true) { if(!is_bool($arg)) { throw new Exception("\$arg must be a boolean."); } return ($this-&gt;filled = $arg); } } // END parkingSpace /** * A car object. * * @package ParkingDemo **/ class car { private $parked; private $moving; // ... function __construct() { $this-&gt;parked = false; $this-&gt;moving = false; } /** * Check if car is parked. * * @return bool **/ public function isParked() { return $this-&gt;parked; } /** * Park the car. * * @param parkingSpace * @return bool **/ public function parkCar($space) { // are we already parked? if($this-&gt;parked) { return false; } if(!get_class($space) == 'parkingSpace') { throw new Exception("\$space must be a valid parkingSpace object."); } // is someone already parked here? if($space-&gt;isFilled()) { return false; } // we've filled it! $this-&gt;parked = true; $space-&gt;setFilled(true); return true; } } // end car // create new parking space $space = new parkingSpace; var_dump($space-&gt;isFilled()); // create a car $car = new car; // park it in the space $car-&gt;parkCar($space); // show it worked! var_dump($space-&gt;isFilled()); output: bool(false) bool(true) You could probably have extended the car as part of parkingSpace but for the purpose of this demonstration I left them separate. The next step would be to create a parkingLot that accepts parkingSpaces. (also, I realized I was using cAmElCase for my functions/classes, it's preferred to use ProperCasing for classes and "_" for functions [e.g. ParkingSpace, and is_parked()])
Still no version with namespacing support :\
vim FTW, thank you.
Actually, doing database work in OOP is one of the toughest nuts to crack. The plain fact is, relational sets and objects don't really map well together. There is even a term for this: [Object/Relational Impedence Mismatch](http://en.wikipedia.org/wiki/Object-relational_impedance_mismatch). As I understand, there are two broad answers for this (design patterns, in OO terms): Data Mappers, and ActiveRecord (I could be wrong that these are the two broad ones). But with either of them, it's easy to find examples of logic that is easy to express in SQL but cumberson with the OO interface. There are other use cases of programming that have much more elegant OO solutions. If you look at how PHP frameworks are using OO for uses other than the database, this might be a better place to start. 
What's the advantage over running php -a from the command line?
It works by value. I wrote the example before I saw your comments in another thread that described the editing use case.
Same here (Java), but it may have just been that the class I took greatly focused on object oriented instead of the language. Most of the syntax I knew already, but it took me being taught by someone else object oriented design habits in order to really grasp it. Here's the gist of it, if op ever sees this: Imagine physical or virtual objects. For websites, that can be a sidebar, or a banner/header, or a user, or a forum post, or... Well, whatever you can consider to be a self-contained object. Now, try to keep it self-contained. Write internal functions ('methods') for that object type ('class') that manipulate and set the data for that self-contained object (as well as the internal variables ('attributes') for the class). And write some methods to grab and present that data (or return it in a format that is useful for you; that could be a full chunk of HTML, or it could be a boolean for an on/off value in a user's settings). Now you've just made some object oriented code.
&gt;WP's code, it's pretty nice. Who says this!? How!?
this has a json api that would be pretty easy to create a class for (if one doesnt already exist) http://spamcheck.postmarkapp.com/
I programmed with PHP for years and didn't know OOP, until I learned Java afterwards. Now I program PHP with OOP because it helps keep your project's code structured and organised which gives ease of mind. However with PHP, I feel that you can still code well without OOP.
MediaWiki has something similar. Vagrant is one of the most useful development tools I've used, especially for web projects when you don't want to go through the trouble of installing a web server on your local computer.
Hi, this isn't directly related to your post but your post did lead me to your step by step guide to setting up a Debian VM. Sorry for the wall of text, please bear with me. I have to get my head around administering a Debian VM as the company I work for is switching from a shared web hosting service to a VM service and I am the one who has to do the switch over / maintaining afterwards. I have some (read: very little) experience with Ubuntu, have had a couple of dual boot boxes and recently tried to set-up a home media server which I bailed on when I realised a netbook wasn't going to be powerful enough. (duh) What I wanted to ask is will working through your step-by-step guide be a good place to start with wrapping my head around administering a Debian VM. Obviously the one we get will already be setup but will this give me the feel of whats going on as well as a place to start with the learning? Many thanks in advance.
http://www.lmgtfy.com/?q=apache+and+php-fpm
Remember that OOP is not by any means the be-all and end-all. Nor is it a necessity to write good code. It's a style of programming, not a definable product or ruleset itself. It is, quite simply, the style of thinking of your program in "objects". This certainly doesn't suit all kinds of programs (and indeed I hold the controversial belief that OOP is way overused in PHP web development). I've seen colleagues slave away for weeks to write massively over-engineered OOP systems because "it's the right thing to do", when their products were never going to be used extensively or maintained in the future. I've seen guys writing "factories" for more factories, or creating abstract classes with a single line of code. Take the example posted on this very page ([here](http://www.reddit.com/r/PHP/comments/1dg2vm/need_some_help_adopting_oop_practices_need_some/c9q0p72)). Fair enough, it's quite lightweight. But you could spend ages trying to further "OOPify" it. Instead of throwing Exceptions in the objects, add an Exception handler class! Instead of checking if(isParked) in the car object, write a helper method or check it in the space object! I could go on. It's too much. Don't feel pressured into throwing away your own well-defined methods to suit the current trend. If you're writing well-structured, clean, maintainable code, you're very possibly doing just as well as any OOP-based programmer could. [KISS](http://en.wikipedia.org/wiki/KISS_principle)
You can try to pipe input into spam assassin for a score, but ultimately your markup won't hurt you as much as content and links do.
You don't need php installed to use it? Web based tools have their place - for example if you have a chromebook and need to test out a PHP function quickly.
This is helpful to me. Thanks.
If you want to go from 0 to competent, the Linode tutorials are a great place to start: http://library.linode.com/using-linux/administration-basics Also, I am probably going to edit the Debian VM tutorial to use apt-get 100% instead of compiling PHP, but otherwise it still works great.
I think it's a mistake to think of "things" and build classes to represent them, a la the car example. For example you mention a forum post and a possible method that gets a chunk of html. This is wrong because the forum post now represents two things: the raw post and a html version of it. The post should concern itself with as little as possible in order to represent the data (or object) and expose that data through an API to any consumers that want to use it (json, html, xml, search engine, etc). You can imagine if you wanted to have a slightly different html version, so your method becomes conditional on a bunch of stuff, or you add multiple methods, it soon gets rather unweildy. E: BTW I'm not saying this is flat out wrong, but it's mixing different aspects of the application (presentation/model) and separation of concerns should be the foremost goal.
Yep, that was it. Looks like you took it off the white-list pretty quickly. Didn't want to give it away to the wrong person... ssh/authorized_keys, bash_history, or git/config are all best kept safe. I'll keep looking...
While the Books are good, i think PHP is good to "learn" OOP. You don't need to be forced into OOP, sometimes it's even bad and you make classes which shouldn't be classes. An interesting read about this: http://kotaku.com/5975610/the-exceptional-beauty-of-doom-3s-source-code The Doom 3 Source code is a prime example of good programming and the balance between OOP and other concepts. And C++ and PHP are similar in not forcing you on OOP as the only concept, which makes both languages very powerful.
Yeah, I get what you're saying. I didn't mean that the same object would return both the HTML chunk and that, what I meant was that a class in general might represent a chunk of a page and thus return a chunk of HTML, or a class in general might represent something like a forum post. I'm not always the best at explaining what I mean.
Thanks, I see the common thread here. Still thinking about how to fix this without disabling a bunch more functions.
I would recommend switching to a better httpd, nginx / litestep, and if you really want to keep apache, use it to deliver static content So you would have Nginx -&gt; php-fpm = php Nginx -&gt; apache = images For example
Yea, I've found several others along the same lines... It's not easy to predict what a non-trivial machine (PHP) will do given arbitrary input (how this sandbox works). Even Java (which both verifies programs before running /and/ sandboxes them during) has frequent sandbox exploits.
I agree, and the best piece of coding advice I have ever gotten is: "It is much easier to learn many programming languages, than it is to learn just one" Its soooo true its not even funny, it should be the first sentence in every programming book. Everyone limits themselves thinking they should just 'specialize' and learn one language really well. And there is definitely merit to eventually taking that path. But to me, as I was still cutting my teeth, it was much easier to learn advanced concepts by exploring multiple languages at once.
Depending on the system he is running, a nullbyte could fuck up the include function, and it won't include anything. eg: &lt;?php $a ="index.php".chr(0); include($a.'.php'); ?&gt; Won't work 
It is nice if you want to show people how you shouldn't do things, they already made the mistakes so don't follow there examples of coding standards
Please don't copy too much from that example. It's quite bad. /** * A parking space object. Right off the bat, referring to a class declaration as an object signals a deep misunderstanding of the way PHP's object orientation works. private $moving; Completely unused. // are we already parked? if($this-&gt;parked) { return false; } if(!get_class($space) == 'parkingSpace') { throw new Exception("\$space must be a valid parkingSpace object."); } Mixing exceptions and return codes is sloppy too. Ask yourself: what's special about the invalid `$space` parameter that's worth busting the stack with an exception, compared to the "already parked error" which only warrants returning `false`? The answer is that there is no substantial difference. You generally shouldn't mix throwing exceptions and returning boolean values. It makes error handling needlessly convoluted, because you have to both inspect the return value *and* wrap the entire call in a try-catch block. if(!get_class($space) == 'parkingSpace') What kind of crazy string comparison operation is this? This is a confusing abuse of operator precedence and possibly a clinical sign of madness. &gt; it's preferred to use "_" for functions [e.g. is_parked()]) That isn't true at all. The vastly dominant method naming convention in PHP projects is camelCase. Be *extremely* careful who you learn from.
Phil, the service locator didn't replace DI in ZF2 - it's just an inverted approach using the same mechanics, i.e. DI pushes dependencies into classes whereas classes pull dependencies from a SL. They both co-exist in ZF2 and personally I never use Service Locators given their testing, DI-ignorant and other disadvantages. The differences between "light" and "heavy" frameworks has remained constant since time began and both have their advantages (and disadvantages) as their popularity split has always evidenced.
Oh I agree. I still use DI in development then build factory closures to be stored in SM which speeds up the resolution. My point about the switch of focus was aimed at the fact that documentation and the courses Zend offer, of which I have partaken in push the use of SM as a service locator which is a shame as it can be used to implement much better practices. There seems to have been a lot of misunderstanding about my comments regarding the "weight" of the frameworks. The fact is that the amount of features they offer as full stack frameworks means that they have to be heavier. They have to be able to cover all bases to be able to be considered enterprise level. This in no way detracts from how good they are.
We have been using civicrm/drupal for our sites since last spring. They are evolving, have strong user bases, are committed to accessibility, and have well defined provisions for user extensions. Recently we have had great success reimplementing a moderately complex in-house application as a drupal module. Our current major effort is integrating several databases into civicrm.
I think the only real advice that can be given here is that you need to start using some of the frameworks that are already out there. The people who wrote them have spent years coming up with good a solutions to common problems such as the ones you have, and understanding how and why they work (trying to copy them can be a great learning experience) is the only real way to ... understand.
Awesome, thanks for the recommendation. 
If you send email to users of Hotmail, Yahoo, MSN, etc., you won't be able to avoid getting blocked at some point. Especially if you send HTML emails. I have managed a double opt-in list for a local club for over 5 years that sends bi-weekly newsletters to more than 25,000 subscribers and have tried everything I can find to no avail.
Apache with phpfpm benchmarks as good as nginx with fpm. But nginx doesn't have a cpanel which my customers need.
You might want to look at swift mailer http://swiftmailer.org/docs/sending.html For advanced sending functionality and monitoring rejections. You may also want to look at outsourced smtp servers like this http://dyn.com/email/dynect-email-delivery-lite/ Part of your problem is probably that your server is unknown and untrusted by Verizon/hotmail/ etc. by passing through an email delivery service like this, you can use the trust of a larger company to help out. Just don't violate their TOS! You will still get flagged as spam, and then probably fired as a customer!
Took the repo right from under me :) been working in a fedora based LAMP Virtual environment in vagrant for the last year, and was going to post something rearding the experience. Full stack with php unit, xdebug, Jenkins for build/deploy etc. the syntax changes in v 2 of vagrant are trivial and maddening, wonder what spurred the change? Anyway I may have a look at this in depth and see if there is anywhere I can contribute...
&gt; Please don't copy too much from that example. It's quite bad. Sure, it is. &gt; Right off the bat, referring to a class declaration as an object signals a deep misunderstanding of the way PHP's object orientation works. My bad. I was typing quickly and the OP's usage of "object" was ringing in my ears. &gt; (private $moving ...) Completely unused. Yea, the "// ..." was to emphasize that you could add more variables there. &gt; Mixing exceptions and return codes is sloppy too. Well, returning "false" would be dandy, but I'd have no idea why the car failed to park in the space, especially if the space I'm parking it into is reporting back "false" for isFilled(). By tossing an exception I can let the developer (or anyone reusing this code) that they passed something the function doesn't know how to handle. &gt; What kind of crazy string comparison operation is this? This is a confusing abuse of operator precedence and possibly a clinical sign of madness. You've never heard of the "!" (NOT) operator? The following all do the same thing: /** removed **/ (!(get_class($space) == 'parkingSpace')) (get_class($space) != 'parkingSpace') (get_class($space) !== 'parkingSpace') // should also work because get_class returns a string. &gt; (on camelCasing:) That isn't true at all. The vastly dominant method naming convention in PHP projects is camelCase. Err... PSR-1 describes otherwise... https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md#1-overview 5th bullet: Class names MUST be declared in StudlyCaps. 6th: Class constants MUST be declared in all upper case with underscore separators. 7th: Method names MUST be declared in camelCase &gt; Be extremely careful who you learn from. I hope no one took my quick code snippet (which was nothing more than a rushed example of not creating an entire parking lot for a single parking space) as the defacto standard of what good PHP looks like. Here's a great resource for that: http://www.phptherightway.com/ EDIT: while I'm here, shameless plug for my favorite framework: [Laravel](http://www.laravel.com) EDIT2: removed a bit of code that was pointed out by [0110100010001110](http://www.reddit.com/r/PHP/comments/1dg2vm/need_some_help_adopting_oop_practices_need_some/c9qt314)
Why are you using get_class? Why aren't you putting type in parameter?
No, I mean why aren't you doing public function parkCar(parkingSpace $space) ?
You're right! That would've been a more elegant solution, although [type hinting](http://php.net/manual/en/language.oop5.typehinting.php) is restricted to PHP5. Either way this was circle think at its best: correcting a problem with a more convoluted solution.
I blame the outdated shared hosting plans for our lower tier clients at my job. Constantly have to make sure we're using functions and features of PHP that are either version independent between PHP4 and PHP5, or at least easy enough to rewrite. Blah! Ultimately these are things that given time and a proper code review we would've had patched up, pushed, and deployed within a few minutes.
Bookmarked and upvoted: nothing I hate more than working with dates in PHP
Awesome post. Combinations of date() and strtotime() often get hard to read. Also, this helps avoid the headache of daylight savings and leap years. At my job we've had people hard code 86400 instead of "+1 day" and their reports break during each daylight savings time.
Note that if you pass the timezone into the constructor, the timestamp accounts for the timezone, whereas if you set the timezone on the object, the timestamp does not account for the timezone.
http://codepad.viper-7.com/0qVSKp Seems to be working for me. The difference between `time()` and `new DateTime('2013-05-01')` is that time() is down to the second, but you only specified the date on the DateTime, not the time, so obviously they are different. edit: I noticed you also tested the creation of a DateTime with the second parameter of a timezone. I tried that too: http://codepad.viper-7.com/zdHJrw -- Looks to be fine as well. 
 &gt; Also, keep in mind that when using DateTime(), when passing a Unix Timestamp as a parameter requires prepending an @ to the timestamp for it be recognized as a timestamp. What?? I never knew this, where the hell is this documented? I can't tell you how many places I have: new DateTime(date([format], $timestamp)); This would have saved me so much headache working on 5.2 code when I can't call -&gt;setTimestamp() on a DateTime object. The worst part about working with DateTime on 5.2 is missing all the useful shit in 5.3. Dates, times and timezone have given me more gray hairs than I can count.
Thank you soo much for this post stymlee !!! Been working on some stuff for a logistics company where dates and times are essential but a pain in the ass to work with.. I had completely forgotten about the DateInerval class.. Been faking it by binding full SQL queries to my click events and processing all my date stuff through converts and cast statements... then displaying it again on the DOM... in other words the loooooong ass way around... Cheers
Timestamps are always in UTC. The timezone should not affect the timestamp.
Just FYI, we recommend you to use bcrypt rather than PBKDF2 for password hashing. See in particular the "Caution" in the docs: http://php.net/hash_pbkdf2 Still, this can be useful for other purposes (like, for example, deriving keys...) or if you are required to use a NIST approved algorithm.
If it has to get back to a PHP variable, you will have to make some kind of request. You can do this without reloading the page, with some JS-foo. But the easiest way would be to reload the page with the user's selection in the query string when the dropdown selection is made. 
...and then calculate the difference between Gegorian and Hijir calendars and convert to output in European format... God I so love working with dates...
You can either use forms, as a stateless solution: [PHP Tutorial on Forms](http://php.net/manual/en/tutorial.forms.php) Or, you can use AJAX to dynamically send the form data without reloading the page: [PHP Example AJAX and MySQL](http://www.w3schools.com/php/php_ajax_database.asp) Either method is perfectly valid, it just depends on how you want your UI to behave. Note: if you like the second method, I would recommend using a better method than indicated in the tutorial above. It's just there to get you started. Check out [jQuery](http://jquery.com/) if you are interested.
Your one line framework has one vulnerability in it already. ಠ_ಠ
In that case the easiest way, no JS required, would be to use a select (dropdown) in a form. Google "html form with dropdown" to find some examples. Good luck!
April 31st and November 31st, huh?
FWIW it's hinted at [here](http://php.net/manual/en/datetime.construct.php) under 'Parameters &gt; timezone' and documented [here](http://uk1.php.net/manual/en/datetime.formats.compound.php) (linked to on the DateTime::__construct page under 'Parameters &gt; time')
Nah man, that's a feature... &amp;#3232;&amp;#9603;&amp;#3232;
My bad. Not enough coffee or something. The behavior still exists on valid dates. * Dec 31st + 2 months = Mar 3rd * Mar 31st + 1 month = May 1st 
Why not make a simple function that would edit your crontab from php?
I'm trying to figure out exactly how Vagrant is as useful as everyone claims it to be. I work for a company that does web application development, and we've got more servers than I know what to do with. Setting up a new development environment on a live server is very straightforward, and we can guarantee that it has the same configuration as the production servers we'll be deploying to. Not only that, but the dev environment is web accessible to the rest of the team, many of who work remotely. How does Vagrant actually fit into any of this? From what I've read, it makes setting up a transparent local machine super easy, but that doesn't seem to help anyone other than the guy in front of the keyboard. Where's the advantage?
It does not recommend the Blowfish cipher, it recommends `CRYPT_BLOWFISH`, which is the crypt() constant for bcrypt.
How is multiple developers working on the same project handled? Does operation provide everyone their own vhost?
Who is "we"?
It also helps our devops guy tremendously when he's actually deploying the servers to Rackspace!
I've been using [Luracast Restler](http://luracast.com/products/restler/). It's simple and focused on REST, it's a lightwork framework for building REST APIs, nothing more. It's pretty easy to add a new service, output is JSON, errors are HTTP codes, etc. I'm not sure how it compares to Kohana, which everyone seems to be recommending.
&gt; I hope no one took my quick code snippet (which was nothing more than a rushed example of not creating an entire parking lot for a single parking space) as the defacto standard of what good PHP looks like. Hey man, sorry if I was a bit of a dick about your comment (I think I was). The bit I quoted is why I wrote that comment: somebody inexperienced enough to be asking for "help adopting OOP practices" might not actually know enough to pick up on that kind of thing. Newbies are quite keen to cargo cult random unintended aspects of the code written by those they learn from. I think you and I agree in the principle of our respones, and I should have framed my comment in more constructive terms, instead of bordering on a personal attack.
Try this out to see results quickly: &lt;pre&gt; &lt;?php print_r($_POST); ?&gt; &lt;/pre&gt; &lt;form method="post"&gt; &lt;select name="example"&gt; &lt;option value="foo" selected&gt;Foo&lt;/option&gt; &lt;br /&gt; &lt;input type="submit" /&gt; &lt;/select&gt; I'd recommend looking into HTTP verbs. Try out the jQuery example someone else posted and watch the Network tab of your browser's developer tools to get an idea of what's going on.
Yup, right now we've got a couple different subdomains set up for our current project, and each dev has their own FTP/shell access. We use git to periodically push changes to a staging server, and then from there to the production site.
We disagree about this, I think. My own personal backup reference is Chapter 7 of Clean Code, entitled "Error Handling". It actually makes an excellent case for abandoning return codes altogether in favour of exceptions. The idea is that return codes force clutter into the calling code because it has to do all this busywork dealing with error codes after every call, whereas exceptions allow you to remove error-handling clutter from all but the actual error-handling layer of your architecture.
You're in the php subreddit so php would be a good start. http://phptherightway.com google, look for examples I assume you're on windows, check out WAMP and design it locally
Your biggest problem is going to be the source of the email. If you are using PHP's mail() function, it's practically guaranteed that any spam filter is going to catch the email, regardless of content. Instead, you should be properly configuring your application to use a reputable SMTP relay. You can use your existing email provider's SMTP server as a relay, barring any ToU restrictions.
nikic is [one of the contributors](https://github.com/php/php-src/commits?author=nikic) to the PHP interpreter.
Bah. Thanks, I didn't recognize the name.
I would prefer not to edit crontab from a php file, as it's a rather inelegant solution, and introduces the risk of corrupting the crontab file in the case of error. It's also a potential vector for a security vulnerability for php code to randomly execute arbitrary commands on my server. See [here](http://www.reddit.com/r/PHP/comments/1dhqcd/recommendations_for_php_cronat_library/c9qne5w) for what I had in mind, assuming that I don't come across any existing libraries.
Actually on VMware Fusion... Tried both NFS and the default VMHGFS (which is buggy as hell with dynamically created files - e.g. config cache files, twig templates, all resulting in annoying $end errors). VirtualBox was definitely slower than VMware too.
It still beats the piss out of using the date(), strtotime() and weak-ass maths.
250+ files per request is a pretty big concern...
I can totally see how that would be beneficial to you as a programmer, however, when you go to ship or push code to a live environment, or send to others (collaborate) do you truncate the spaces? Or do you leave them in? My remark, albeit off topic, relates to the rage that I feel when having to debug others code where there is an amassment of unnecessary white-space. In a private setting it's whatever, I have no preference, however, when your working in a production environment you should not be using extra white-space. Or, if you do, truncate it before you let others debug or view it. That's all I meant. :)
In our environment, each engineer stages their own Vagrant instance(s) locally, on the workstation (typically a MacBook Air.) Source/branch management is via Git from the workstation, not from within the Vagrant instance. Files are shared to the VM over NFS. We host a master Jenkins server that handles build, smoke testing, and deployment tasks, and we can easily target any of our dev/test servers for release with any branch in our repos (we have about 90-100 client instances running currently, and always have upwards of 30-40 branches active at any one time). The VM contains a local Jenkins and PHPunit installation as well, so running test suites and mock-deploys is easy too. It really makes for a portable platform, given the scale, that requires no network access, except to commit changes to the repo. I can replicate an entire server environment (MariaDB multi-master replication and failover, caching, HTTP), and swap servers in/out of the total configuration at relative will. On the train. Pretty sweet. I highly recommend looking into it if you are in any kind of continuous/near continuous delivery environment.
Look into Vagrant if you're using VirtualBox, and configure your file sharing with NFS from your .vagrantfile. If your directories exceed 1000+ files, VirtualBox shared folders slow down by an exponential rate. I was about to chuck it all in, and switching to NFS saved the day, and put all of it behind me.
you're right. shame on me!
What about DateTime beeing mutable? :)
What if you set up a cron job to run a PHP script (let's call it cronthing.php) periodically, like once per hour. Then cronthing.php can consult an internal index of tasks you have scheduled, then run ones that are applicable. Then you have an API to register and de-register tasks. WordPress essentially does this with its wp-cron system. Tasks can be registered to run once or every *x* interval, and wp-cron.php kicks them off regularly.
I've never understood how... $datetime = new DateTime(); $datetime-&gt;add(new DateInterval('P6M')); echo $datetime-&gt;format('Y-m-d'); ...is better than... $datetime = new DateTime(); $datetime-&gt;modify('+6 months'); echo $datetime-&gt;format('Y-m-d'); One of them makes it blatantly obvious what we're doing. The other does not.
I don't understand why people are bitching about this being a bad benchmark. It shows the overhead of the framework at the point that you start building your application. e.g. If you choose ZF2 you're gonna be utterly fucked as far as performance is concerned from the get-go, and the only real improvements you can do is to get rid of as much ZF2 code as possible. Sure with an opcode cache you can push the 40rps that ZF2 barely squeezes out up to 120, but there are even bigger gains with other frameworks. These results mirror my experiences IRL with the handful of frameworks on that list that I've used.
&gt; especially when perfomance is an issue. Then why are you using ZF2 LOL.
What's the use case for dynamically adding tasks?
I'm aware of [unusual behaviors on dates after the 28th](http://www.reddit.com/r/PHP/comments/1dh519/working_with_dates_and_times_in_php/c9qe8rt). I can't really find any situations to make an unusual case of March 30th = x - 6 months. x - 6 months: * Sept 30th: March 30th * Oct 1st: April 1st * ~~Nov 30th: May 30th~~ * ~~Nov 31st: *June 1st*~~ * ~~Dec 1st: June 1st~~ Do you happen to remember which days you had issues on? Edit: formatting on dates (list instead of single line) Edit 2: March instead of May
The [ISO8601](https://en.wikipedia.org/wiki/ISO_8601)-like syntax in DateInterval (ISO supports fractional units, PHP does not) is meant as an **interchange format.** Basically a standard that works across platforms and languages (programmatic and human). If you're just going to use the `+[num] [units]` syntax, I'd stick with the easier to read method. If you want to store intervals in a database, a file, or provide it in an API: The ISO8601 becomes a better choice than a strtotime-based string.
Can anyone comment on the performance of running a PHP/MySQL/Apache project in vagrant (virtualbox or vmware)? I've used it successfully for smaller projects but for larger, more database intensive projects I'm concerned it might hinder rather than help.
If you are willing to use a Ruby library, I've used [whenever](https://github.com/javan/whenever), which is really nice for managing/deploying crons.
Couldn't agree more!
hmm, I haven't had to config the network in that way. You can define a bridged or DHCP network (config.vm.network :private_network, ip: "192.168.33.10"), and your NFS shares (config.vm.synced_folder "~/workspace/branch", "/srv/src/master", :nfs =&gt; "true") just by editing your vagrantfile, or you can use puppet or chef to dynamically config the vm. You shouldn't have to get your hands 'dirty' editing the global nfs configuration of the VM with sudo ever, but thats actually a simple thing IMO. Windows users have always been out of luck, as I see it. 
I have integrated various Symfony 2 components into my projects to great effect. Check this talk about doing just that http://www.youtube.com/watch?v=Aq5Hi6PasFg (if you can handle the annoying audio hiss). First thing I do with any legacy project I touch now is drop in the Symfony ClassLoader to allow properly PSR-0 namespaced classes to just work.
Well.. that's the object oriented programming for you. Big framework, complex data structures, ORM and lots of inheritance. 
I ran into this recently and have bookmarked it - might turn out useful one day. In principle PHP has allowed this - you can specify the url &amp; port where your memcache server resides. They talk a lot about the benefits. What makes me wonder is the latency that a remote memcache server would introduce. Imagine using such a server to manage session data!
**Sigh...** PBKDF2 shouldn't be used for password storage. It is a password derivation function (Password-Based Key Derivation Function 2), not a hashing algorithm. In fact, PBKDF2 was developed **precisely** for the opposite purpose: to derive a key from a given secret so you can encrypt data with the derived key **without ever storing the said key**. [**PBKDF2 was NOT approved by NIST for password hashing.**](http://www.reddit.com/r/PHP/comments/1dh41t/if_you_want_to_use_pbkdf2_for_password_hashing/c9r2821)
Looks good, nice and clean. Two small criticisms: Be opinionated and return 1 type of object on your methods. If you can't do that consider breaking the method into 2 methods. As seen [here](https://github.com/mikealmond/CoverArtArchive/blob/master/src/CoverArtArchive/CoverArtArchive.php#L82) and [here](https://github.com/mikealmond/MusicBrainz/blob/master/src/MusicBrainz/MusicBrainz.php#L303). Second, I don't fully understand the architecture yet, but saw many things calling [this](https://github.com/mikealmond/MusicBrainz/blob/master/src/MusicBrainz/Recording.php) static class, which feels like a code smell.
Thanks for the feedback! I agree with you with returning 1 type of object. I felt dirty doing it the way I did [here](https://github.com/mikealmond/CoverArtArchive/blob/master/src/CoverArtArchive/CoverArtArchive.php#L82). The second point you mentioned is a result of not fully updating the existing code base. I'll work on cleaning up that shortly.
I believe a MQ would be able to do what you want.
I think you'd probably have a nicer time using an ORM, as this is exactly what you are doing. Something like Eloquent would let you do this: // Creating an article $article = Article::create(compact('type', 'title', 'author_id')); $article-&gt;videos()-&gt;create(compact('id', 'link')); $article-&gt;commentSettings()-&gt;create($settings); $article-&gt;image(['link' =&gt; $link]); //Updating an article $article = Article::find($id); $article-&gt;videos()-&gt;create(compact('id', 'link')); $article-&gt;commentSettings()-&gt;create($settings); $article-&gt;image(['link' =&gt; $link]); //Getting some articles $articles = Article::with('tags', 'comments', 'image', 'author') -&gt;where('read', '=', $permission_mask) -&gt;whereIn('category', [2,6,8]) -&gt;where('author_id', '=', 17) -&gt;get(); Now, that is not amazing if you shove it all in your controller, but of course this can be split out, as there is no reason for your "Article::create" to worry about video creation: public function attachMedia(Video $video, Image $image) { $this-&gt;video()-&gt;save($video); $this-&gt;image()-&gt;save($video); } This will now attach an already created Video or Image object to the article, and even use type hinting to enforce the right data is coming through. Your get can be wrapped up too: $articles = Article::findByAuthorAndCategory(17, [2, 6, 8], 'read'); If I do split my models up, then it is only to have special models for queries, as they are usually doing complicated raw SQL along with pulling from memcache or redis, and not using whatever DB layer (query builder or ORM) the rest of the codebase is using.
I haven't used ZF2 aside from trying (and failing) to get the Skeleton app to work when it was in late beta. I use Symfony 2 all day, every day, and have done for the last 9 months. SF2 is nice, it will force you to become a better programmer and to get your head around OOP principles. There is a steep learning curve with the form builder, using Doctrine, security, integrating bundles (usually due to documentation by people who do not have English as their first language)... But once you get it, it does make life as a developer more simple and refined - for common, day to day tasks. When you want to do things that are more than a little out of the box though, it can feel somewhat restrictive. As, no doubt, can any framework. You are playing by someone else's rules after all, and they have to be respected. You are trying to use a generic solution for a specific problem, they cannot write code that covers every possible outcome, but they have done a damn fine job of covering about 85% of it. The best help is to be found on IRC, but it can be a touch elitist / cliquey, as can any IRC channel. I will be looking at ZF2 again after this project because that's where the money lies - more big co's stick with Zend. And they always will as it's why big co's stick with MS. So if you are learning for job prospects, go Zend. I love Symfony 2 though, its a joy to work with. 
 if (!$this-&gt;checkAllowedEntity($entity)) { throw new Excpetion('Invalid entity'); } tsk-tsk :)
Webmatrix is slow,buggy, requires a window machine with .net and dont have all the extensions sublime text has. Now it has a few bells and whistles like DB management ,but you can just download mysql workbench and have more powerfull tool to manage your database.
because Doctrine has performance issues.ZF RowTable gateway is faster.
Definitely 4, it's much better overall and updating a project from 3 to 4 isn't for the faint of heart. Source: Developed one large web app in 3 and another in 4.
EDIT: note I posted this before your apparent edit. Hmmm I may just be stuck in bad habits I guess in terms of avoiding ORMs. I fully intend to get logic out of the controllers its one of the main reasons for wanting to recode this as well as getting to know Laravel better. I responded primarily to your use of ORM before not so much on the structure. In terms of the joins yes this is not a problem, I was imagining that in my Article/Get would do these in functions such as with_permission() and with_image(). It seems that these would still be necessary in your conception but they would all go into the one big file that also catered for attaching media. I used the examples of an image and video as a common example but like I said there are 14 different things that can be attached to an article. Most of the time I only need 2 or 3 nonetheless this one class would have to have 14 functions for selecting those items and a further 14 for creating them (and possibly more for updating them) Something like this: $article-&gt;videos()-&gt;create(compact('id', 'link')); Wouldn't be optimal in my opinion as adding a video includes more than just inserting a row into a videos table, it would also need to create additional rows (I think the term would be pivots) as well as an image thumbnail, which would use the same function as adding an image but it makes sense to me to avoid: //Add the video $video = $article-&gt;videos()-&gt;create(compact('id', 'link')); //Add the thumbnail $video-&gt;add_thumbnail($img); And instead do: //Add the video Article/Update::add_video(compact('id', 'link')); This function would effectively do the first example but would know what else it needs to do besides just inserting the one row into the videos table and this logic would only exist once. Perhaps we are talking past each other here and you imagined such functions being called elsewhere, but I imagine Article/Update::add_video($id, Input::post('link')) being called from the controller following a form submission telling me to add a video and using $article-&gt;videos()-&gt;create(Input::post('link')) seems like it would be more likely to lead to trouble down the road in this situation. In terms of logic and documentation it seems to make sense to me to split it up into 3 classes and say "use this for creating an article", "use this for selecting articles" etc. You've offered a good response on how to do it without the need for 3 classes, but not why the 3 classes would be wrong per say. I've been trying to search around for some sort of PSR equivalent on how to organise MVC projects with little luck at the moment. I'd rather try and not go off and do my own thing and instead stick to community standards (or at least what's common), but i'm not sure if what i'm planning is really so terrible, or in fact not a great idea. Thanks alot for the response by the way, I find it's really difficult to talk about pseudo code in this way so if there are any crossed wires here I do apologise :)
Forgive my ignorance, but what is wrong there? Should I be throwing the exception within the checkAllowedEntity method? Is there a better exception to throw? I only ask because I'm trying to get better and learn!
In my opinion, you'd be better off creating entities which is passed to and from a data mapper, like so: interface ArticleInterface { public function getId(); public function getTitle(); public function getBody(); public function getAuthor(); //.... } interface ArticleMapperInterface { public function getById($id); public function findAll(); public function save(ArticleInterface $article); // .... } /* creating a new article */ $article = new Article(); $article-&gt;setTitle('Connections: Alternative History of Technology'); $article-&gt;setBody($body); $article-&gt;setAuthor('James Burke'); $mapper-&gt;save($article); /* updating an article */ $article = $mapper-&gt;getById(5); $article-&gt;setTitle('The Demon-Haunted World'); $article-&gt;setAuthor('Carl Sagan'); $mapper-&gt;save($article); /* retrieving all articles */ $articles = $mapper-&gt;findAll(); etc.
PBKDF2 was NIST approved for use in password hashing. Furthermore, there are no problems using it for password hashing. It just so happens that bcrypt is slightly better.
*sigh* not this shit again. PBKDF2 is *perfectly OK* for password hashing. It can be used without causing any major problems. The only difference between PBKDF2 and bcrypt is that bcrypt is marginally better at what it does. So yes, for new systems it's probably better to use bcrypt (or even better, scrypt), but that doesn't mean PBKDF2 is bad for password hashing.
Spelling. Who would have thought that'd be important in code? I just pushed a [fix](https://github.com/mikealmond/MusicBrainz/commit/f4509dfaa1c9e70f5ee4835445d0866dabf1c02c)
**FALSE**. PBKDF2 was NIST approved for **deriving keys**, not for password hashing. [SOURCE from NIST](http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf). In fact, **NIST** is quite clear in its recommendation that MKs should not be used for other purposes than **deriving keys**. &gt; **Section 4**: &gt; &gt; This Recommendation specifies a family of functions to derive cryptographic keying material from a password or a passphrase. The derived keying material is called a Master Key (MK), denoted as mk. The MK is used either 1) to generate one or more Data Protection Keys (DPKs) to protec t data, or 2) to generate an intermediate key to protect one or more existing DPKs or generated from the MK using an approved Key Derivation Function (KDF) as defined in [2]. The MK **shall not** be used for other purposes. And just in case the official documentation isn't clear enough: http://security.stackexchange.com/a/15091
Care to share?
These are potential examples: * I have a new user signup and I want to create a new process to check in 30 days if he's used the account, and if not close the account. * I generate a new batch of gift cards, and after I sell them, I want to deactivate any unused cards after a year's time. * I have CRM system for a call center I want to make sure that for each new customer interaction I send them a customer survey a day after the issue is resolved. * I have an task scheduler system, where I want to schedule on-call rotations for IT staffers. I want to send reminder text messages to remind staffers that the are now on-call. * I'm allowing my marketing team to create promotional cut-ups which become active and deactive at a set starting and ending timestamp. I therefore need something that will publish/unpublish these cut-ups at the appointed time, send out targetted promotional emails, and clear memcache and cloudflare.
That's essentially what I'm planning, although I'd probably need something a bit more granular than a hour. 
Do you mean MQ as in IBM Websphere MQ? Can you provide a link?
Sure, totally free under the MIT: https://github.com/Xeoncross/micromvc. Seems TechEmpower released the [source for the benchmarks too](https://github.com/TechEmpower/FrameworkBenchmarks).
The unix approach is fine, but it doesn't work in a complex environment where I need to programatically schedule arbitrary tasks depending on user input. I really don't want to create a separate shell script and cron entry everytime I need to schedule some task. That is both risk prone and inelegant.
good to know. this is what i was wondering edit: that said, this is a new version, so maybe some of the bugs have been worked out?
Doesn't that mostly speak for the ORM they used rather than PHP (since PHP doesn't have an ORM)?