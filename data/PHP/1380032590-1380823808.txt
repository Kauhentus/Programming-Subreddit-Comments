Going to play devil's advocate, but I don't really thing it's a bad thing to add this, just that I won't use it all that much myself. To be honest the syntax looks pretty strange and unintuitive, especially the &amp;... part. How is someone with no previous knowledge (ie someone coming from another language) going to have any clue about what this new syntax means? It is not self-explanatory at all. Short-hand array definition syntax for example is pretty self-explanatory, even if you don't know about arrays, you can tell this is "a list of numbers": [1, 2, 3]. test(...[1, 2, 3]) doesn't tell me anything, I only know what it does because I read the RFC. I have a friend that I've been teaching how to program and I sense it's going to be tough to explain this kind of thing to him.
Installing Wordpress is trivial. Importing blog data or designing a theme to match the rest of your site could take days.
&gt; How is someone with no previous knowledge (ie someone coming from &gt; another language) going to have any clue about what this new syntax &gt; means It's similar to variadics in Java.
$200 is cheap. Just pay them. The hours sound fishy but I won't even pick up the phone to listen to your problem for less than $100
Eh, I've been programming for a while and had never heard or read the word variadics before. Not a Java programmer, though.
Python, Go, C#, Java, JavaScript and Ruby all have similar variadic function syntax, and splat operators. PHP actually simplifies the Python syntax as we have one splat operator instead of splat and double-splat, so PHP will actually be _easier_ for a new developer to understand. Besides, it's not more complicated than &amp; or .=. Syntax does stuff, and you have to look that stuff up sometimes.
From the information provided it's fair to assume (s)he may doing all/some of the following. 1. Configuring the subdomain and DNS 2. Configuring the hosting 3. Installing Wordpress 4. Installing basic plugins (security, cache, SEO) 5. Installing and configuring a theme 6. Creating some pages, possibly integrating plugins (e.g. a contact form) Dependant on the above, $200 is not unreasonable. 
So `Event()` is the class to hold the data, and `EventSaver()` does the db work? Would `EventSaver()` implement a database class perhaps?
&gt; How do you type-hint the contents of an unlimited array? &gt; How do you default value the contents of an unlimited array? Well, how do you do it with this new variadics syntax?
The way OP worded this doesn't make it sound like they are quoting 13 hours of work, but more like he's assuming based on previous rates for other work that they are calculating 13 hours of work. It's possible that they are charging a flat rate for other reasons like including design work along with it or charging a minimum rate because it's not worth their time to go around setting up Wordpress blogs for $15-$30 for people.
I charge people $50 just to hang up on them.
I've not had the need to use them in Java either but I was just letting you know that the syntax is actually similar to another language's implementation. :]
$200 is expected, Australian pricing anywho.
Is your home OS windows? If so, how is IO speeds with vagrant?
You make good points. The RFC only really covers syntax, and not type hinting-- in fact, type hinting looks like it'd be rather hard with in proposal, since it values are pretty much explicitly defined (numeric, if not specified). It adds complexity of a new keyword and a new type, but no mention of type hinting, reflection, extendability, __toString functionality, etc. I agree it'd be nice, but SplEnum is probably the step in the right direction. Making a new keyword/syntax internally map to a SplEnum class sounds a lot simpler and more-refined than what the RFC proposed. From what little I know of the Zend Engine, there may need to be a few other features in there to make it syntactically nice.
Learning how to this set up was a real chore but everything it does/can do is awesome and totally worth it. Hopefully the video will get you started setting up Jenkins and illustrate where Jenkins can fit into your development process.
Seriously, they might as well work in fast food or retail. At least they'd have consistent work.
I feel like your roadmap is completely backwards. PHPDoc/Tests/Composer/Namespaces should all be done sooner, rather than later, as you'll be doing a crapton of re-work, instead of getting out ahead of it and doing things only once.
I've tried linux several times, and i wish i could use it, for the SSHFS etc. But after having tried so many times, so many hours poured into linux. I've given up and returned to windows. Constant crashed, no proper GPU driver support (AMD in my laptop). Skype didnt work for me. Browser refresh on file save and lots more.
That is how I feel about them. Every controller I write looks almost identical to every other controller. 
&gt; Big fan of point #1. Definitely agree that putting the word Interface in your interface names is shitty naming, and that the least specific name (e.g. Translator) is the one to give the interace. Shitty by virtue of being explicit. Now I've heard it all. I've seen some examples of namespaces and classnames being overly verbose but the article has nothing to do with verbosity, which is mostly subjective anyways. A suffix/prefix is just naming a thing in your code for what it actually is; an Interface, an Abstract, a Trait, etc.. Hell I'm not even against prefixing concretes with Concrete (though I don't personally do that).
Personally I think the ellipsis (...) syntax is universally understood to mean a variable number of arguments, and the syntax is widely used on php.net and by [other languages](http://www.reddit.com/r/PHP/comments/1mzjp0/variadics_rfc_has_passed/cce76e0). The reference operator (&amp;) is already being used in the exact same context, and it handles edge cases anyway, so it shouldn't create any confusion among experienced PHP devs. Your friend might have trouble understanding the difference between "by reference" and "by value", but that has nothing to do with this syntax.
Kind of agree? I don't necessarily think that "Translator" is a poorly named implementation class. &gt; It makes me wonder: what makes the Translator so special, that it has the unique right of being called Translator? "Translator" isn't "special" it just represents a concrete implementation of the TranslatorInterface. If there's only 1 implementation and it's called "Translator" that doesn't mean that Translator should become the TranslatorInterface by default or that having a separate TranslatorInterface is unnecessary. Odds are you're going to want say a MockTranslator for testing or a KlingonTranslator and whatever else at some point, maybe even a simple TranslatorFactory.
I suppose you could argue that your controller is doing something, it's triggering method calls, rendering views etc. You may want a functional test that ensures your controller action returns an expected response
Symfony2 does have the built in BrowserKit component which you can utilise in your unit tests. This also provides code coverage as it dispatches the requests internally, rather than triggering a HTTP request
Well thats not the point. I wasn't talking about developers coming from other languages that already have this and having an easy time applying that knowledge to PHP, but that will certainly be easy for them to do. I was talking about "someone with no previous knowledge" as you too were talking about. Learning a new language means you have to learn new syntax. If you're coming from nothing you'll have to learn everything. ...$foo is no more complicated for a new user than &amp;$foo or any other syntax that PHP already has.
I would suggest you guys [this](http://rubyonrails.org) if you need something carefully designed
You might want to look into [this](http://rubyonrails.org/)
Right. This is the closest I ever got to feeling like controller tests would be useful, and a HTTP request covers that nicely. Admittedly testing your guard statements with a unit test + mocking will be quicker than doing it over HTTP, but the speed of my tests has never been such as issue that I felt like trying to crowbar my controllers into unit tests.
Good tutorial....do you have a blog yet?
thanks! and no not yet. I just published that video late last night. I'm trying to gauge if there's any interest for me to create one before i spend the time to set that up. 
Work OS is Windows7 and home OS is OSX. Vagrant's IO speeds are still slow on OSX but not slow enough to cause me to not use it.
Consistency in naming is the only important factor, and I don't want to waste any of my precious time trying to think of overly clever names for interfaces. When it comes time to use a framework or library I don't want to think, "Shit, was the CastToJson, or CastsToJson, or JsonCastable?" How about "JsonInterface" and just move on with your work. I think having a library with names like "CastsToJson" and "HasTimestamp" would be a nightmare to work with.
This would require him to add a `:` before each key in `$eventData`. It woudl also require him to edit the class whenever he edited the table in the database.
 function autoloadHTML($name) { $name = preg_replace("~[^a-z0-9]~", "", strtolower($name)); eval(" class $name extends HTMLElement { protected \$startingtag = \"&lt;$name&gt;\"; protected \$closingtag = \"&lt;/$name&gt;\"; public function __construct() { call_user_func_array(array(\$this, \"__invoke\"), func_get_args()); } } "); } spl_autoload_register("autoloadHTML"); ...and I'm done here.
I've actually gotten to a point on a project now (Symfony2) where functional tests involving forms are huge memory hogs and we are moving away from functional tests for this reason. Instead we are unit testing domain logic with mocks and then using web acceptance tests for high level functionality. 
Fair. I almost always build APIs in PHP these days, so I don't have to deal with this.
I feel this is quite unnecessary; what's the point? I doubt it has a performance benefit and would look cluttered and hard to read in a real site. I also don't think it would be easier to work with for frontend designers, that's what templating engines are for. Am I missing something here?
looking at Spl Enum Type, you can do the exact same things you described. other than a cleaner looking syntax what does it offer?
&gt; This would require him to add a : before each key in $eventData. That's a common misconception. Actually PDO replaces out the : symbol internally. Or it doesn't need to. I just double checked with the following code on a pre-existing DB. try { $database = new PDO($dsn, $user, $password); } catch (PDOException $e) { echo 'Connection failed: ' . $e-&gt;getMessage(); } $sql = 'SELECT * FROM countries WHERE country = :country'; $prepare = $database-&gt;prepare($sql); $prepare-&gt;execute(array('country'=&gt;'Ireland')); $stuff = $prepare-&gt;fetchAll(); print_r($stuff); // Outputs the following (I kind of fine-tuned it) Array ( [id] =&gt; 2 [country_code] =&gt; IE [country] =&gt; Ireland [active] =&gt; 1 ) &gt; It would also require him to edit the class whenever he edited the table in the database. Well, yes. I didn't say it was a magical solution. You would still have to add the field in a few places, of course. But removing **some** change requirements while reducing the probability of causing errors is a vast improvement. 
You can't enforce a predefined list of values with class constants, because they are simple scalar values. A method may be expecting a constant value from a class, but the method has no way of knowing whether the value is one of the class constants, or some random value. Here's what I mean. Here's an example using class constants. class DaysOfTheWeek { const Monday = 0; const Tuesday = 1; const Wednesday = 2; const Thursday = 3; const Friday = 4; const Saturday = 5; const Sunday = 6; } class DisplayWeekDay { public function display($week_day) { switch($week_day) { case DaysOfTheWeek::Monday: echo "Monday"; break; case DaysOfTheWeek::Tuesday: echo "Tuesday"; break; case DaysOfTheWeek::Wednesday: echo "Wednesday"; break; case DaysOfTheWeek::Thursday: echo "Thursday"; break; case DaysOfTheWeek::Friday: echo "Friday"; break; case DaysOfTheWeek::Saturday: echo "Saturday"; break; case DaysOfTheWeek::Sunday: echo "Sunday"; break; } } } // This is perfectly valid. $displayer = new DisplayWeekDay(); $displayer-&gt;display(DaysOfTheWeek::Monday); // But so is this. $displayer = new DisplayWeekDay(); $displayer-&gt;display("Your mom wears army boots."); And the same concept using enums. enum DaysOfTheWeek { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday } class DisplayWeekDay { public function display(DaysOfTheWeek $week_day) { echo (string)$week_day; } } // This is perfectly valid. $displayer = new DisplayWeekDay(); $displayer-&gt;display(DaysOfTheWeek::Monday); // This leads to a fatal error. $displayer = new DisplayWeekDay(); $displayer-&gt;display("Your mom wears army boots."); Enums may not have made sense a few years ago when PHP didn't have type hinting, but they make perfect sense today. I'm personally tired of having the validate method arguments against a list of expected values, instead of letting the language do that for me. Edit: Oops, I see chuyskywalker basically [said the same thing](http://www.reddit.com/r/PHP/comments/1mzjp0/variadics_rfc_has_passed/ccebhdx).
I didnt know it didnt require the :, thats good to know, thanks. Personally i woudlnt have the event save itself. I would do something like. $eventSaver-&gt;saveEvent ( $event ) then have the saveEvent method dynamicaly create the insert using fields from the event. this way you dont have to edit sql whenever you change the table. The only places youd have to edit if you added a field to the table would be the event class...deleting a property.
I can't really see for sure, but it seems to me that your API is doing way too much. $api-&gt;getArtist(), for example, doesn't seem like something that should be in the api object. In fact, I don't think the api should be an object at all. I don't get where this is restful, and I don't get why you need to call the API like this. Why would you not have something like GET /artist/8 run something like $artist = new Artist($_GET['artist'], $database); echo json_encode($artist-&gt;get()); I know this is not what you're asking, but I'm really confused.
When it comes to refactoring code, and you find you want to create an interface, it becomes a bit less clear what the code is expecting. I'd rather update code to use the new interface than break code that used or extended the class. Say, we have a Parser interface, with two classes, XmlParser and JsonParser. Lets say we use SimpleXML in the XmlParser-- but run into issues with huge XML files. So we implement a libxml-based parser that's much better with memory, but slower overall. Because they have different use-cases, we make both available-- and decide to make XmlParser an interface. We end up with one new interface and two more implementations (SimpleXmlParser and LibXmlParser). Without Suffix -- Interface Name: XmlParser (the same as the old class name) Advantages: * Existing automatically uses the interface-- for better or worse (type hints, extending, method calls) * Easier to read Disadvantages: * Broken code will probably give unhelpful 'undefined method' fatal errors on implementation-specific methods. * No migration path available. The disadvantages may be fine with an internal project, but when it comes to Libraries and Frameworks, you do not want classes to suddenly become interfaces. Doing so breaks any code that extends yours-- the users of the software will probably lose a bit of trust when their code breaks. Not fun. You could work-around the problem by making some inconsistent naming pattern-- but that pretty much leads to developers not knowing whether to implement XmlParser or XmlParserInterface. With Suffix -- Interface Name: XmlParserInterface (unused, but consistent with rest of project) Advantages: * Backword Comparability can be broken when desired, instead of immediately. * Naming consistent over time (You know to always use Interface suffix, doesn't change based o n history) * Code that should use the interface is easily identifiable (searchable) * Errors from non-updated code is clearer: "Expected type XmlParser but got LibXmlParser instead" Disadvantages: * 6 characters longer-- this is a severe waste of space, developer time, and Disk IO. * Existing code doesn't automatically use the interface-- for better or worse tl;dr Suffixing interfaces helps keep consistency over time-- as code is refactored.
Just to let you know, I implemented support for included/excluded values in intervals. Also added builder. Let me know if you have some thoughts on what can be improved :)
I don't see any major problems with your approach. I assume you have to start with a raw client call somewhere: $client = new ApiClient(); $artist = $client-&gt;getArtist(5); $albums = $artist-&gt;getAlbums(); So, the client can inject itself into your entities (somewhere in getArtist, for example). My next thought would to be to think about some kind of proxy pattern for things like collections inside entities, which could lead to some slick caching stuff (so multiple calls to Artist::getAlbums() only generate a single API call). 
You're not paying by the hour. You're paying for a job to be accomplished. Sometimes this could take longer or shorter. If a server is misconfigured, it can take weeks to troubleshoot.
With suffix, create your SimpleXmlParser that extends XmlParserInterface and then... class XmlParser extends SimpleXmlParser { // No implementation details necessary, just do what SimpleXmlParser does // Alternatively, alias the class name in your autoloader } Assuming the interface doesn't change from the original class implementation (which it shouldn't) just create an alias, then you don't break any existing code. Typehints don't discriminate between a concrete and an interface. This way all the advantages you listed for "without suffix" become inherent in "with suffix". At your leisure change your typehint references from XmlParser to XmlParserInterface so that you can swap in different implementations in the future or for testing. Alternatively, also create a GiantXmlParserInterface and a SmallXmlParserInterface that just extend the XmlParserInterface and implement each of those with your LibXmlParser and SimpleXmlParser respectively. Sprinkle those throughout the code as appropriate. That way you can be as granular or general as you want. In methods where you're anticipating a giant XML file, typehint on GiantXmlParserInterface. In methods where you don't care, typehint on XmlParserInterface, on performance sensitive methods typehint SmallXmlParserInterface. This is likely over optimizing, just highlighting that your ability to maintain functionality in existing code can be achieved while still suffixing and interfacing. &gt;Broken code will probably give unhelpful 'undefined method' fatal errors on implementation-specific methods. If you're introducing new methods, you should extend the interface rather than just lumping new methods into the old one. The base XmlParserInterface shouldn't have to stray from the methods defined in the original class implementation. If it does, you're going to break things regardless of what you do and suffixing will have nothing to do with it. Also I lol'd re: 6 characters, nicely done. :)
When I first switched, learning to configure the "pools" of FPM child processes was the biggest struggle. Configuring is not as easy as prefork Apache.
&gt; As for routing code, Kohana's is probably the easiest on that list [FuelPHP 2.0 routing package](https://github.com/fuelphp/routing) seems pretty nice &amp; easy too, even though it's still alpha.
The first two questions are never really answered very well. I still don't know what a "peekaboo bug" is supposed to be. 
&gt; less bug free http://i.imgur.com/bSMFOHl.jpg
&gt; Completely disagree re: suffixing, I love suffixes and prefixes. They are explicit. Please tell me your code is also riddled with `$firstNameString` and `$ageInt` and `$muffinsArray`. Also I hope, for consistency and explicitness, that all classes are be suffixed with `Class` to match `Trait` and `Interface`. You can find a few popular open source JavaScript projects that prefix all their API functions with `fn`. Maybe that is good advice too, it's better to be explicit. 
The article seems like it was written for an intermediate level programmer who has a tendency to write spaghetti code either for lack of patience and/or ability. The overall point is valid, though the article could do with further explanation. I think it is less about a type or class of bug but rather the context. Code authors are often far removed from code maintainers. Authors ostensibly have the benefit of brain-blood memory about their "god-methods" or custom layers of abstraction where bugs often reside. Conversely code maintainers are considered to be at a complete loss, having to spelunk into the veritable "scary basement" spaghetti-code legacy nightmares. The final point being that the onus rests on authors to write maintainable code such that the effort involved in identifying and fixing bugs is minimized, especially for maintainers who are otherwise unfamiliar with it. 
&gt;Why create your own status codes? HTTP spec provides them, why would I create another thing that devs would need to go read, and more data to send over the wire? Have the spec do the work. The same reason we still have exceptions even though we have HTTP status codes. HTTP status codes are protocol level information, and these are application level. This library is not for every use case. It is specifically well adapted to websites which have complex Javascript controllers, or services which communicate exclusively via an API (such as Google Glass or AWS). In that context, having application status code space can be enormously helpful, especially since many of the statuses an application might want to communicate have no place in HTTP. That said, if you don't like them don't use them. You can build your own DataObjects and Responders that don't use statuses without much trouble at all. That's the idea really, that it comes preconfigured a particular way, but that really its a library that's aware of how to interpret and create APIs, and gives you a very simple language to talk to it in (objects). &gt;The ApiInterpreter seems like a half-HttpFoundation from Symfony, in that it's a pseudo-wrapper for request data. Why not use tested components for this? Because the HttpFoundation is about 50 times more than what the APIInterpreter is trying to do. This is for APIs, it should be as lean as possible. The HttpFoundation is simply far too much overkill for that. All this does is check for structured data in the POST or GET variables that you assign it to, and nothing else. (Although it will use the body in the future.) &gt;Specifying prefixing private/protected methods with '_' is old-hat :) Pretend they're not there. :) &gt;Don't ever write your own JSON, never ever ever. Use json_encode/json_decode, or some other method. I'm not. *roll eyes* Literally the only place that the JSONFactory "builds" its own JSON is when dealing with a single line of JSON that doesn't have a non-string value when it needs to assemble certain aspects in a particular order, and even then, the JSONFactory isn't even completely converted. &gt;Some other good tips here: http://philsturgeon.co.uk/blog/2013/07/building-a-decent-api Thanks for the link. I've already read Phil's opinions on the subject, and he's pretty much right on, and pretty much describing what I'm building, so...
Might want to check out #php-gtk on Freenode IRC. I *think* from your error message, you're missing the xulrunner package on your system. Hard to say, though.
yeah it definitely took me a lot of trial and error to get it working but hopefully i can save you some time! 
yes i'm on that path. I think i have to install "libxul-dev" but synaptic wants to uninstall so many things that i do not want to take the risk
Honestly, if you're building it from source, you will probably have a hard time on an older version of Ubuntu. The project recently moved to a newer version target of GTK+, so you might find conflicts there.
##php freenode
this is why [PCI-Compliance](http://www.pcicomplianceguide.org/pcifaqs.php) exists and there are major repercussions if you get caught not being PCI-Compliant. If at all possible, i've learned, you want to offload these security requirements to a service like [Stripe](https://stripe.com/). PCI has deterred me from some of my own ideas just because the requirements are so vague and i've never found a decent guide to become PCI-Compliant 
You could generate pdf's yourself. Just measure it out in centimeters and create the fields. It is pretty easy: http://www.fpdf.org/
It's on the sidebar: &gt; Join #phpc on Freenode! Come join us.
Totally against this kind of stuff really. Java may need this because java doesnt have anonymous functions but not PHP. I'd vote against it.
in Symfony you do INTEGRATION tests on your controllers, and that's how you should test them. You get a fake http client and send http request, assert the correct response. Unit Testing controllers is stupid and a waste of time, you are basically Unit Testing whatever framework your are using.
Fat controllers sucks because controllers should only deal with HTTP,nothing else. If one is calling PDO or even Doctrine directly in it's controller one is doing things wrong. An app should work on the command line,through a desktop GUI , and on a webpage without having to copy and paste a single line of business logic to handle different front-ends.
I've had to do this a few times to match Avery labels for mailing. I ultimately had to adjust my css positioning to print 3 columns x 10 rows or something like that and it works just fine. Good luck
If the label printer is hooked up to the server running php you can use the php printer extension! http://php.net/manual/en/book.printer.php
As someone who deals with PCI-Compliance daily, I can confirm this. The requirements are *steep*, expensive (they expect professional audits of your financial software yearly), and require many layers of security (your finance server can't be forward facing, and access to it has to be severely restricted). I'm the most senior programmer in the company, and I'm not even allowed to perform my own deployments to the live servers for those things. Everything that goes to those servers is carefully reviewed. There are many, many more requirements, and yes, they're vague. One might even go so far as to say purposefully vague, so as to make it possible to shut just about anyone down at any time on a whim. The penalties for non-compliance can potentially bankrupt a business.
Reinventing the wheel is everyone's first inclination, it's also their first mistake. What you said was well put.
Cool, at least you posted another article about it. This, however, is not correct: &gt; PDO provides us with a useful functionality: it will escape any quotes in the query, meaning that it will cause any input to be encapsulated by quotes You give an example of using prepared statements. This is not how prepared statements work at all - well, with PDO::ATTR_EMULATE_PREPARES set to false, at least, as in the example. The bound parameters aren't escaped, they're sent separately using a different protocol. As the query statement template has already been processed by that point, there's no possibility of being able to change it, hence no injection. 
Maybe this is a simplistic take on it but if the client will be printing to their own printer from inside the app, you could create a simple html view with a print stylesheet that is formatted to fit a particular label structure.
I have to agree with /u/trymuchharder and /u/TheSwissArmy, you don't want to mess with live credit card data if you don't have to. Stripe, imho, is one of your best bets for a US business who -has- to have a ecommerce site of their own code. You never see the credit card data if you use their suggested method, so you don't have to worry about the level of security and encryption and vagueness that PCI Compliance brings. Plus Stripe is amazingly easy to implement with PHP and Javascript. Secondly, if you use an ecommerce store such as Shopify (my favorite), you have the added power of an entire team of developers dedicated to improving the backend of your shop, maintaining security, and dealing with PCI Compliance for you. Plus they can integrate instantly with Stripe, either on its own, or through their own interface to stripe (which reduces your monthly cost of store). At $29 a month for the basic store its cheap too. Shopify also has a great infrastructure for addons, there are quite a few already there (including lots of great free ones), and you can build a private addon if you want (I have 3 private addons for my employers store). If this is a client, then if you go the Shopify route make sure you sign up for Shopifys partner program, and set up the shop as an affiliate/development shop and transfer to the client (there is an easy method to do that in the store back office), and you will get a 20% commission off of their store fees every month. If you insist on going with a local bank virtual term, then make sure your PCI compliance documentation is up to date, you have regular security scans of your site by an authorized scanner vendor, you encrypt any numbers that you keep (a good bank will give you a token to identify with instead of the card), and that the encryption is a Public/private encryption.. where the server can ONLY encrypt, and the part that the customer service talks to can only decrypt.. so if/when someone hacks your server, you have another layer of protection against them getting card numbers. Also, don't ever store the CVV2/CVC numbers off the back of the card. You can -use- them once, but you can't store them. Side note, if your server logs POST data, does it log the contents? i.e. credit card numbers? if so, thats another hole.. Scary stuff I admit, and thats why we stick with a third party platform, so we aren't at as much risk. Especially when you realize that some states slap fines of $10,000 or more PER persons info on the company if you get a data breach if you are not PCI compliant.
&gt; Using nouns for these names is a convention that has served programmers very well for a long time The problem is your examples use the wrong kind of nouns :P You should be using agent nouns. See Go for most consistency here - Reader, Writer, Formatter, etc - the argument being that interfaces describe *behaviour* not *things*, what an object *can do* not what it *is*, since that's all your client code is interested in, hence agent nouns. 
I'm going to be doing this exact thing for my job sometime in the next few months but for avery labels. So if someone makes it, I may buy if it saves me/my company time! :) Here's a library I found that does avery labels. http://www.fpdf.de/downloads/addons/29/ You can request avery's spreadsheet of their paper sizes and all the other parameters. I can PM it if you want it without sending them a snail mail.
i've done this in 3 ways a) as an api/olap attachment to excel b) html/css converting to pdf with tools like fop or html2pdf c) natively with pdf (nowadays i would chose fpdf for that too) once you have done c) successfully you probably wont do it anyway else again
This actually came up a few days ago in some other subs. This might help. http://www.reddit.com/r/ScriptSwap/comments/1mnzmi/script_to_create_barcodes_for_lto_tape_labels/
This sounds like an eligant solution. Does css for print have strict size definitions? Would it be possible to create a CSS for each common label layout/size?
[http://www.paymentexpress.com/](http://www.paymentexpress.com/) Thee guys provide lots of different payment processing services. If you use their hosted payment gateway then all the PCI-DSS compliance falls on them and you are exempt from the risk. This does also use cURL and XML but the difference is there is a re-direct to a page hosted on their servers for the user to input their CC data. after the payment is processed they redirect the user back to your specified success/fail page.
I am wrapping up a project this week that addresses this exact issue. We are using a service from www.paymentsgateway.com. It is their SWP Redirect service. Here is the link to their documentation page on it.http://www.paymentsgateway.com/developerDocumentation/Integration/securewebpay/redirect.aspx A bit sparce, but if you pm me, I can send you cleaned up examples of code on how I handle a clean front-end with this solution. I have a fairly simple class that feeds into my framework. To clarify how it works: You build a form and present it to the user from a url within your application. This form has a action attribute that points to a secure server that is controlled by the payment gateway that is PCI compliant (thus removing you from all pci compliant responsibilities, and no need to worry). This post request then redirect the users browser back to a specified url on your server, with $_POST data. The $_POST data contains informtion regarding the transaction (such as name, and address of customer) along with verification of if the transaction succeeded or not. (if it failed, you can update the users page to show a new form, with their non-sensitive data still filled in, and include the error in "pretty" text (something human readable). I am glad to go more in depth or answer questions, feel free to ask.
To add to /u/talisto's answer, there are functions in that library which let you paint text to coordinates. You should experiment and find the correct coordinates.
You have no responsibility here. If somebody has access to your server and changes your source code, they can do whatever they like. If somebody takes your source code and sells it to somebody else (modified) then they can do whatever they like.
I had the exact same thought. &gt; wat da faq
If the goal is to make legacy code with `mail()` calls more testable, I'd be much more apt to just create a simple wrapper class, e.g.: class Mailer { public function mail(...) { return mail(...); } } ...and inject an instance into the code that uses `mail()`. That way, you can mock `Mailer` and force `Mailer::mail()` to do whatever you want in your unit tests without messing with php.ini, rebooting your web server, and so on (this isn't very practical if you do continuous integration, by the way).
Why are you calling a static function from the object context?
Are you 100% sure your host is running 5.4? Can you dump (to yourself, not to the sub) phpinfo() to confirm?
Yes, I'm certain. I'll even go check one more time to be absolutely sure. EDIT: Yep. 5.4.19.
None of the code that's throwing errors was written by me. The first snippet is from Silex, the second from Pimple. EDIT: Oh yeah, I should probably mention that the Silex Application class extends Pimple, and Pimple is just one class.
Well fuck. Since I can't use php_flag in my .htaccess to disable that stupid thing, I guess I'm switching back to Django/FCGI.
Get a different host.
&gt; if your customer is really looking for a basic ecommerce platform why are you building one from scratch rather than using one of the dozens of pre-built solutions? Someone came to me asking for a custom e-commerce solution and I pointed them to [this](http://www.opensourcecms.com/scripts/show.php?catid=3&amp;category=eCommerce). He fell in love with the second one he saw, even though I kept telling him to look at more. The big takeaway is - you do not want to have to deal with financial data. This is actually exactly why services like paypal/google wallet exist - you pay the 2.9% fee so that they deal with all that compliance. And if they aren't compliant - then it's their, expensive, problem; not yours (granted this could lead to stuff like people stealing credit cards....but it's not directly your problem).
I've got a pretty good deal going with this place at the moment, and they've otherwise been pretty awesome to a little nobody like me. I'm not at all averse to going back to Django, I only went with PHP to avoid the deployment hassle which, obviously, ended up causing a bigger deployment hassle.
Same goes for APC (or at least it was earlier, disabled php-apc long time ago since it's not required for my projects), happens randomly, temporarily fixes when you change definition from doCall(function () { ... }); to $cb = function () { ... }; doCall($cb); and vice versa
And yet they have a version of PHP that is incompatible with closures running on their servers? At least tell them they have a severe issue with their configuration.
Of course. That should go without saying, because it's a major issue.
Eh not really, I argue that you are both being pedantic, not that I really care personally, I was just pointing out that you are ignoring the main issue I brought up (that a new programmer would find this feature unintuitive). I don't see how whether or not a more complex language such as Java has this feature implemented even matters, as I'm sure PHP does not intend to be the next Java.
I intended that statement as an example, but in reality I think both newbie programmers from other languages and total newbies are going to find this feature unintuitive, as oposed to a feature such as short-hand array syntax. It is self-evident that SH arrays represent a list of items, but it is not self-evident that "..." means "you can use an array here and it will be split up into different arguments".
I insist on my previous point: both &amp; and "..." are cryptic to a newcomer whereas things like [1, 2, 3] are self-explanatory. New doesn't have to mean cryptic.
Or you can work in a sane desktop toolkit, like pyqt.
That HTML's got a XML-like syntax, which I find quite hard to read. This feels a lot cleaner for me.
&gt; I guess I'm switching back to Django/FCGI. Or just ask your hoster to put in: php_admin_value eaccelerator.enable 0 inside of the vhost directive (assuming they are running Apache). If they are unwilling or unable to do so - it's probably an omen of bad things^TM. Even [godaddy](http://support.godaddy.com/help/article/1085/can-i-add-a-php-initialization-file-to-my-hosting-account) supports custom php.ini files.
How else do you want to create a class with a dynamic name, extending another class? I'm open for suggestions.
That's not a bad idea. I submitted the support ticket detailing the problem, so I'll ask about that when I get a response.
HAML looks quite interesting, I'll look into that. Besides that, what's with the security-risk in eval? Yes, it compiles real-time, and, yes: It compiles from a variable. But it doesn't accept user-input, so it doesn't present much risk actually.
Basically I just hate XML-syntax and HTML in perticular, so this is a workaround that works for me. Yes, it takes a little bit more memory (actually, the HTMLElementCollection is ment to serve as a array with less overhead), but it's just more pleasant for me to work with. And I did this to learn and expand my string-handling abilities.
You are thinking in the "developer" point of view, i.e. the one that write those classes. This is even more obvious given you wrote file names, not class names. Think in the "user" POV, the one that uses those classes. That guy don't give a single fuck about "AbstractTranslator" for example. And all he wants is using a Translator, he doesn't care which one will be used. He'll configure the implementation to use in a dependency injection container, and now he wants to typehint against something that is a Translator. Period.
Why do you have an interface if you have (and you plan having) only one implementation?
&gt; ...and inject an instance into the code we are talking about legacy code here! ;) Easier said than done. Anyway, another reason this solution is not so bad is that every developer can configure its machine like he wants, and it's global to every project. I've seen other developers in my team configure a smtp server so that emails work (I'm too lazy for that).
Yeah I remember just over a year ago I attempted to build my own ecommerce system and came to reddit when I had problems. Needless to say, I'm now on very good terms with OpenCart and Shopify.
A html view that works for a specific browser, with a specific font magnification, and a specific printer, and will hopefully work right when the wind blows in a specific direction. The PDF suggestions here are going to be a lot more reliable. 
Why would you do that? Just pass an argument to the HTMLElement...
Get a vps man. Linode is who I use. Full control of your environment for about $20 a month.
Thanks for this. I've been meaning to set up some CI environment for our internal product development for quite some time to make things a bit more "professional". This video gave me a great starting point for figuring this out for us.
thinking about the same career move here :) i just installed a vagrant with a boilerplate rails app. last night and started digging in the code to look around... so i'll keep you updated :) 
I think, this is very good idea.
Cross-language communication FTW. Yes, every developer should learn multiple languages; I think most PHP devs lean towards Python as their secondary language, it's a nice compliment — but Ruby and Python are feature-wise, very close. I've been doing PHP for 12 years, but I work for a company that is predominantly ruby, so I've been playing with it some — it's definitely a mental shift, and there are some very fundamental ways of thinking that have to be re-done when switching to ruby. Like the fact that defining a class is actually modifying the object that represents the class itself (which is why things like rails form/model validations can work the way they do) FWIW, I'm working on a talk that is sorta the opposite of this, for people who are still using PHP because they have to (clients, work) but have been focused on ruby for all their fun and learning, and have missed out on new things added in 5.3+ that could make them not hate PHP so much and enjoy working with it a little more :) I say go for it!
Vagrant is awesome, I so wish it was around 3 years ago :)
Money is an issue in this case, otherwise I would have a long time ago.
http://digitalocean.com is $5 a month. using shared hosting nowadays is literally ridiculous.
it goes so much further than those things too, closures (especially in 5.4), traits, and generators, and then throw in behat for BDD and ruby folks are quite surprised :) 5.6 has variadic functions and hopefully splat too
Look. Just stop. I don't need suggestions, I'm well aware of all of this. If I wanted to spend the money on a VPS, I would have done it a long time ago. Everything I make at the moment is funneled right back into expenses, and what I'm using at the moment was given to me for free. So yeah, I'm gonna use it before I start spending money, because I'd rather spend money on physical branding, which is where I need to spend money right now since I don't rely on internet sales at all, and neither is it a priority. Got it? Stop suggesting VPSes, *I don't want or need VPS suggestions.*
&gt; I don't want or need VPS suggestions. Apparently you do, because your current hosting is awful. The amount of time you've spent on this issue could have been spent working in McDonalds and you'd have paid for months and months of good quality hosting... but, your choice, if you don't value your time so be it but one day you'll discover that your most valuable asset is your time.
You should recommend Zend Opcache, http://pecl.php.net/zendopcache — will likely see some (minor) performance benefit too :)
The real answer is that managed hosting is either expensive, or bad but cheap. Unmanaged hosting is too much for most people. So what we get are bullshit excuses on how $5/month is too much (it might be if you work in a third world country I guess).
&gt; Apparently you do, ... I don't watch TV, either. That doesn't mean I need channel suggestions. I already have VPS plans, I already have a stack to deploy to it, I already have all of those details ironed out for when I need it. I'm not spending $5/mo to make *maybe* $6/mo in internet orders. I'm telling you, *I don't need it.*
The point I'm trying to make is that you have spent a non-negligible amount of time writing this post, researching the issue and testing code. That time could have been much better served working on your business, or writing code that matters, the value of that time that has been wasted far exceeds the minuscule amount of money you would spend on hosting that would never cause problems like this. If you already have your own servers, I can't understand why on earth you would choose to run a website that matters (which is demonstrated by your time being spent on it) on a free service that is clearly causing you a problem. I run websites that don't matter too, but I still pay the basic amount required to keep them running properly because if I had to spend hours debugging problems I'd be taking time away from my own projects and work. If that's what you want to do then whatever, I just cannot understand the rationale behind doing that. Your time has value, that value must be more than a few dollars. I know that the $60 I spend per year on one of the sites I run that doesn't *matter* much (just needs to be online) is worth every penny, because I know that I'm not going to spend hours debugging some dumb issue... and instead those hours can be spent working on something that will pay off long term (my websites that matter). but alas, everyone is different, if that's what makes most sense for you, so be it.
I still have to learn python.
There are some things you can do to stop this happening. But ultimately it comes down to this: stop doing this. Your local server and your live server should be as close to each other as possible, and certainly they should be **structurally** the same, or you cause yourself all manner of pain. You need to decide what actually IS the webroot. And you should be using that for both environments. It seems to me that you need to change your local environment, it's the one that you have the most control over. Change your web root to match the structure of the online, particularly with regard to the subdirectory. Ideally you should be able to change both the remote and the local so that the /kevin is not necessary.
I would like to see something like this built as an extension for PHP - and possibly included in the core...
For those that are thinking about it, resources like [PHP to Ruby](http://www.phptoruby.com/) will be helpful. Where you know the PHP function you'd use, but want the Ruby equivalent. I used in the past [PHP to Python](http://www.php2python.com/), and discovered to alternative with Ruby doing a quick search just now. Other than that, I thing a book with the language concepts/idea should be enough, right?
Well shit, looks like you're just gonna have to rewrite the entire application in another language. Trust me, doing: &gt; sudo apt-get install tasksel &gt; sudo tasksel &gt; [[•] LAMP Sever](http://www.unixmen.com/install-lamp-with-1-command-in-ubuntu-1010-maverick-meerkat/#post-1177) Isn't worth 5 dollars, nor will it save any time. Besides, it's not like you'll be able to use the VPS for other applications. 
One thing that helped me was picking up Chef for provisioning. It's very much it's own DSL and the Ruby you write is often extremely trivial, but it's helping me learn Ruby without the feeling of "I could do this so much faster in PHP...GOD DAMMIT". I'm not "forcing" myself to learn a new language, I'm learning it because it's immediately beneficial to my workflow. I try to do the same thing with Python by reading and fixing Sublime Text plugins. 
There's this: http://pragprog.com/book/ndphpr/rails-for-php-developers It's out of print, but you can probably find a second hand copy. It's also Rails 2. If memory serves, there's a website that accompanies the book, which shows equivalent PHP and Ruby code snippets.
I've encountered several issues with the Zend opcache on PHP 5.4. Works great under 5.5, though. Honestly, I've yet to find an opcache which works correctly under PHP 5.4. 
I'd pay 10-15€ for a good ebook on this. Leanpub is a platform you should look into if you're doing this.
I'd rather use nginx.
Who said anything about spending hours debugging? I didn't literally spend days Googling, man. I spent maybe half an hour total focused on this issue before it got resolved, it's not like I sat and stared at this post for nine hours. I'm not sure what I said in my post that implied that this was a huge project with a major time investment, but whatever. All I did was braindump everything I knew about the problem and went about my night. I never said this issue was serious, I just wanted to know what the deal was. Telling me to get a VPS doesn't tell me what the deal was, and neither does telling me that my environment problem is an environment problem. [This told me what the deal was.](http://www.reddit.com/r/PHP/comments/1n2wt0/5419_on_my_local_machine_and_5419_on_my_host_do/ccey57f)
except you said you would get a VPS if it was financially viable, I showed you an option that is so cheap even half an hour of menial work per month would pay for it. If what you said isn't the reality of it then whatever, no skin off my nose. Just trying to be helpful, 'cause a lot of people don't know it's dirt cheap to get a stable VPS nowadays.
no problem. Happy to share what I've learned. 
I did say that, followed by this: &gt; ...to make maybe $6/mo in internet orders. I'd be paying for a VPS to host a site so that I could pay for the VPS to host the site.
c evaluation order... i = 1; $c = function($i++); and i = 1; $c = function(++$i); first one: the function gets 1, second one: function gets 2 e: why do I get downvoted
No. I don't necessarily need to know how the things I do in PHP translate directly to PHP. What I do need is a book that approaches from the standpoint of a developer who is already experienced in programming, and web frameworks.
~~well, second one gets 3 if you actually run the script, but~~ yes this illustrates the difference between pre-inc and post-incrementing a variable.
yeah if run them like I wrote, I should edit it so it isnt confusing
I think you got me wrong. I'm not experienced on e-commerce related issues. I simply prefer the solution where credit card information never touches my system. There is no much difference between curling the virtual pos with POST data or let bank response back POST data to me. Second option is always safer because CC information doesn't touch my system. By payment gateways, do you mean middleman API's that handle transaction? Like using PayU to handle transaction, so they can handle everything themself and take a small commission from my customer? To be honest, as long as my application gets a callback with necessary information (e.g A JSON data with custom fields like product ID that wanted to be purchased) I'll be fine. I never ever want CC information to touch my application. I can't vouch for the $5/month VPS server or shared hostings, which takes the majority of my freelance works. With that said, if I use a middleman service like PayU, do I still need to keep some data for legal purposes or that's PayU's duty?
Ok, so we agree that this new syntax is no harder than any syntactical symbol in any language beyond basic operators. * 1 % 2 * foo ||= 4 * if ($foo ! $baz) Do you know what all of that does instantly? I certainly didn't, which is why I'm glad that documentation exists for languages. If you have a better syntax you left it a little late to suggest it, as this was discussed multiple times on Reddit. So, acceptance is the only answer now. :)
Haha, thank you, we will see! :)
If you two think this is such a big if, then some of the conditional statements I've seen would blow your minds.
Thanks alot for the reply. My customer's business is located in Turkey. I don't know if Stripe is supported here. As far as I know, most of the major e-commerce websites use PayU service here. 
I've just been reading this. It's a fantastic book, albeit dated. But it gets the basics over, reading up on the latest rails fills in the gaps. 
How are you getting along with the book?
You wouldn't. You would create the classes. Your auto loader is going to interfere with other registered auto loaders, and `eval()` should be avoided like the plague. It's slow, insecure, and can't be optimized by accelerators. &gt; If eval() is the answer, you're almost certainly asking the wrong question. \- Rasmus Lerdorf
Do you know HTML/CSS ? PHP is pretty dependent on those for producing results. http://www.codecademy.com/tracks/php is a starting point. And there's /r/PHPhelp subreddit if/when you get stuck.
Going really well! Just began chapter 4 (expected 10 total chapters) last night, putting the finishing touches on chapter 3 so I'll be sending out an email soon to the pre-order customers.
Doesn't the query caching in your server actually skew the results here? Every repetitious query is going to be served the same result set and never executed. You need to use the no cache flag to turn off the sql query cache. http://dev.mysql.com/doc/refman/5.1/en/query-cache-in-select.html We also need to see the schema in question before these results can be meaningful, what are the columns, what's indexed etc. 
The schema is pretty easy to deduce from the code: posts: id, title, author_id, published authors: id, name I did disable the cache during the test
These are awesome tips. Thank you! This is part of the reason why i wanted to start documenting things i'm trying out, so people can learn AND to tell me what i'm doing wrong or better ways to do things. That updatejenks.sh script is very cool. I wouldn't have ever thought to do that. I wonder how the sending of separate e-mails to individuals works. Does it use the git email address of the committer? or does it use the email it has in its own user database? If it's the latter, you'd probably need to write a PHP proxy script to queue up the builds and instead of setting up a Jenkins hook in bitbucket, you'd need to set up a POST hook to that proxy script and have it check the committer and queue up a build with that user's Jenkins API token. Something to look in to. DigitalOcean has been awesome so far. So nice to boot up a real accessible VM, try some things and if it works, keep it and if not, no sweat, just destroy it. 
They killed off the website. :( This was my go-to, gosh, six years ago when I was learning ruby. 
But I've always wanted to learn Norwegian. This would be the perfect place to start! ;)
If PHP can't load the DLL, it means that either the path you provided is wrong (I'd try an absolute path) or it was compiled with different settings (different VS version or thread-safety settings). You should make sure that the settings match. Also, I'm not sure I got this right, but it sounded like you're testing this in your production environment. Installing xdebug in production is a bad idea, because it degrades PHP performance significantly.
[composer](http://getcomposer.org/), [coveralls](https://github.com/satooshi/php-coveralls) or similar (with % of tested code coverage), [travis](https://travis-ci.org/). Im not a fan of "all in one" controller - but thats just me (Im always making controllers in Silex fx) - So maybe you should also make somekind of support for this :) 
&gt; We select a joined table of posts and their rows, then process the result with PHP to assing authors to posts ??
Pixel dimensions are as precise as you're going to get. Printer margins could be an issue but I think they are pretty consistent but like all things, properly test. There is a lot of flexibility here. You can have the user specify the type of label paper they have and you can build a stylesheet for each one your app will support. If you have different label types printing on the same type of label paper, you can also style them differently. 
Definitely will do, thanks for keeping in touch.
zend_extension = "C:\Program Files (x86)\PHP\ext\php_xdebug-2.2.3-5.3-vc9.dll" is what I put into the php.ini file getting "Failed to load" Trying with the full path and no "zend_" gives me: PHP Warning: PHP Startup: Unable to load dynamic library 'C:/Program Files (x86)/PHP/ext/php_xdebug-2.2.3-5.3-vc9.dll' - Access is denied. in Unknown on line 0 I'm using this DLL based on what I'm told from http://xdebug.org/wizard.php. If it's likely the wrong one I'll give some others a shot. Not sure if the Access denied is due to permissions on our server or simply becuase I'm not using zend_ in that particular instance. Thanks for the heads-up about loading it in production! We have the auctions ending all at the same time, so that's the point when the performance plummets, aside from them there's no more than 5-10 people using the site (internal only) and perfomance isn't to big of a deal. I'd like it so that when all the auctions are ending people can still "wait till the last second" to get that final bid in. Though it may still be a good idea for me to load up my own VM and test this locally.
You should not keep anything other than the confirmation number that is provided by your gateway. Not last 4 digits, not encrypted cc#. This is true no matter the system you use
Depends on many things, I guess (php version, apc version, os, etc). It definitely was APC, 'cause disabling it fixed the problem. And some people on the internet (maybe even bugs.php.net, don't remember) had this bug too.
Access denied likely means you have the permissions wrong (yes, windows does have the concept of permissions). The other thing you can (and should) do is download [Dependency Walker](http://www.dependencywalker.com/) and ensure that it can find all the dependencies.
What an awesome book it is! Highly recommended.
Why would you want something new if the old one still works great?
You shouldn't be writing code like this, period. Order of evaluation is often unspecified in C-like languages and C itself.
`serialize()` is built-in, so use in environments where you don't have the option to install extensions, or want to make your software compatible with those environments makes an awful lot of sense. And while it's not as compact of a format as JSON et al, it is noticeably faster than JSON.
&gt; I never suggested that there should be no documentation for advanced language features I never said you did. You should read slower. I'm pointing out that this new syntax is no more confusing than existing syntax. Simple enough, right? The documentation point was secondary, saying that ALL syntax is confusing, which is why you need to learn how it works. Third point, can you suggest something better?
When someone builds a PHP extension for the http://kentonv.github.io/capnproto/ lib (I'm doing it in another language), it'll be way faster because it forces the object creator to create into a byte array from the beginning, so it's already in serialized form. Not great for converting from regular classes, but will be nice for when you know you need to marshal certain regularly
What exatly do you mean by ?? Please check out the code if you require some explanation
Beggars can't be choosers.
Yes, I can see your point if all that was happening was the card details were being posted to their site for processing. However, I was talking about their hosted payment gateway service where all card data is captured on their secure servers. Also, saying 'your site could be hacked and redirected' is such a cop-out. There is always the possibility of ANY site being hacked, it is not an extra issue. Oh, and the payment gateway service communicates over SSL so its a little more secure than just posting the data.
&gt;Also, saying 'your site could be hacked and redirected' is such a cop-out. There is always the possibility of ANY site being hacked, it is not an extra issue. It's not just me saying that. Even with just a PayPal button, you should at least look at SAQ A and / or that whitepaper I linked to. There's a lot of misunderstanding about PCI compliance.
Just to be clear, I wasn't the down vote. But it's probably because of the "only an idiot..." bit in your edit ;)
I like it. I did something similar a few years ago when I was trying to understand what MVC was. Yours looks a lot better than mine as I wasn't namespacing, using spl_autoload, and... well there are hundreds of things I don't like about mine. I have since moved on to using production frameworks for the sole reason that you have hundreds to thousands of developers reviewing the source and finding bugs, improving the code, and adding features.
Sorry, that probably came of a little aggressive. I was agreeing with you that hacking was a risk, just meaning that it is an ever present risk and not something that can be negated by either having a payment provider or doing it all yourself. There is definitely a lot of misunderstanding around PCI-DSS compliance, I have read into it plenty in the past for work and it always leaves me with a headache.
Please read the sentence again, it makes no grammatical sense and I don't know what it means. There's little incentive to read the code if you can't explain its intent clearly. 
Not every company devs locally. The devs at mine are on one of a few shared servers. Rerouting mail on a shared server is no bueno, since it would likely interfere with other devs. Each dev could install their own PHP, but then settings and extensions can't be kept in sync very easily. Dependency injection is trivial by comparison (even legacy or procedural code). As a bonus, your legacy code will be one small step closer to being not horrible, and definitely more testable.
? It is stated on the first line of the article: "Peekaboo bugs are the worst sort of bugs, because they just pop-up randomly and are really hard to track down." ... They are seemingly random bugs. They are caused by spaghetti code.
This shows that HipHopVM can be faster or slower. I benchmarked HipHopVM, because I was disappointed with the real-life speedup that it gave. Especially since you cannot just run any script on HipHopVM. It has quite some compatibility problems.
That's because there is wrong, and there is NEVER DO THAT WHAT ARE YOU DOING The easiest way to explain it would be if someone asked about boiling an egg, and they had a problem with them cracking. But then they revealed the way they were cooking the egg was siphoning gasoline into a drip tube and feeding it directly to a pan under the cooking vessel. Oh sure, it might be heating your water now, and you might even get some eggs cooked. But the process shows such a fundamental misunderstanding of highly dangerous semantics that they need to stop what they are doing RIGHT THIS SECOND and rethink all that they know about whatever they are doing. I know this can be frustrating to newbies. But if you are on any kind of a Unix box and aren't sure why it's bad to use sudo, or it doesn't spring immediately to your head why passing user-generated data directly to a system process would be a bad idea, you have quite a bit of reading in front of you. For example, start here: https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project. For real fun, look at something like an RFC for OAuth2 security: http://tools.ietf.org/html/rfc6819. If you are writing public facing service, you should know security implications well. 
Very interesting to see I'm potentially not missing out on much 
Haven't used HHVM; but the memory usage graph looks "interesting". Is there a max heap size option for HHVM? It just seems to keep going.
&gt; BSON encoding and decoding turned out to be significantly faster than JSON encoding and decoding Okay I'm going to call you out here, if you having something that's 0.000000000000000000001 faster than something else you can't just add ten million loops to aggregate the results and claim it's **significantly** faster. A better approach is to encode larger set's of data and reduce number of loops. Just saying. 
From what I've been able to ascertain from your previous posts is you're looking for a simple and least time consuming option to get your application up and running; vps + tasksel meets that criteria. Where as installing and configuring Nginx requires more time and effort (even more for fpm), and does not meet the criteria you've seem to put forth. Therefore, I restate my original statement: &gt; Beggars can't be choosers.
[Now is a fine time to start.](http://www.stavros.io/tutorials/python/)
And what happens when it hits the limit? It looks like HHVM isn't running any garbage collection during the test, so presumably it would do so at some point. Does it do it all at once (and so stall for a few milliseconds) or does it gradually garbage collect?
Why not PHP 5.5 with Zend Optimiser? Although it's slightly interesting to see these results it also seems like a waste of opportunity to run the test against an old version of PHP. 5.4 was released 18 months ago. 5.5 was released recently, and now has the Zend Optimiser bundled in. Both 5.4 and 5.5 also have allegedly have been improved to run faster than previous versions. Also, the tests seem not particularly representative of how PHP is actually used. e.g. only test 6, had a large difference in speed between PHP and HHVM. It is running the code from [here](http://svn.php.net/viewvc/php/php-src/trunk/Zend/bench.php?view=markup&amp;pathrev=284033) a sample of which is: function nestedloop($n) { $x = 0; for ($a=0; $a&lt;$n; $a++) for ($b=0; $b&lt;$n; $b++) for ($c=0; $c&lt;$n; $c++) for ($d=0; $d&lt;$n; $d++) for ($e=0; $e&lt;$n; $e++) for ($f=0; $f&lt;$n; $f++) $x++; print "$x\n"; } nestedloop(12); This is not a realistic sample of a typical PHP server's workload. If anyone does have a realistic benchmark test, please can you share it, as I would like to test how PHP performs under a realistic workload.
&gt; you're looking for a simple and least time consuming option to get your application up and running Whose post and comments are you reading? They're definitely not mine if you came to that conclusion. That conclusion isn't even on the same planet as my question.
That's a fair point. And you said it without being a douche, so I'll upboat. :P
Hey, Xdebug is the only thing I know can help you out. I used to have trouble setting it up as well, until I discovered the magic sauce that is their wizard (which I think should be more prominent). Give it a shot: http://xdebug.org/wizard.php
Why are you benchmarking a version of PHP that is no longer supported and reached EOL as of March 2013? 
HHVM development is currently focused on PHP 5.5.x, you are testing against 5.3.x branch of PHP. Your benchmarks are also flawed, a better benchmark would be taking one of supported frameworks/applications and running in raw PHP 5.5.x .vs HHVM on 5.5.x. 
Agreed, he should be using supported frameworks and running a stress test against a web server serving them in both environments.
You should add msgpack and igbinary. 
You should be asking this question in phpbb.com's community section. This is a PHP subreddit. What you're doing here is akin to asking about specifics of a car at the hardware store rather than at the car dealer just because the car would happen to be made up of metallic parts. You'd have better luck asking questions pertaining to a specific product in a place dedicated to it.
I'm curious why RouteCollection doesn't extend Collection and make use of those methods with individual internal Collections for the filters / prefixes / etc.
I agree that there are other tests to be made. This benchmark uses stable versions, because production use is considered. That production use is not yet feasible is also confirmed by http://www.hhvm.com/blog/?p=875
PHP 5.4 is considered stable and is currently in use in production websites such as Disney.
$a = 2; $b = 4; $c = $a + $b;
PHP to Ruby is actually really good for the nitty gritty, and yes - I would say that that is half of the problem, which is actually pretty well covered. The other half would be the concepts, the gotchas and the culture in general, which is substancially less covered.
Nice way of thinking about it. Vagrant could also be a "hook" because it's an awesome tool that any PHP developer can benefit from and also uses Ruby.
I was actually more interested in Ruby in general. I know that Rails is a big selling point, but I think that a vanilla approach would also cover much of Rails while avoiding the fact that PHP has a lot of competing frameworks, so that mapping a framework to framework experience would be cumbersome. I however did not read this book - have to pick it up.
Yeah, heard good things about Leanpub.
That's exactly what I mean - most of what you read in a Ruby book you will have already known or gotten to know on your own and reading it in a book is boring. What I'd like is something that get's in to your head and pries all the hard set assumptions you have about any language because that's how it was done in PHP.
The /var/www directory points to the zf2 directory, I don't see a public directory in there. You're talking about this repo: https://github.com/zendframework/zf2
Have a look at the skeleton application. the zf2 repo lacks a front controller. https://github.com/zendframework/ZendSkeletonApplication
Most of the time, they aren't. Most of the benchmarks you'll see are dishonest and/or skewed as they don't paint an accurate picture of what's going on, or how they would be used in the real world. As I've always said, what matters isn't the language or framework you implement something in, its execution time is rarely what will make or break your website. What matters is your architecture.
I have always seen a caching layer such as Varnish as a kind of "Static Site Generator". So far as performance benchmarks go, the framework and language used in your application becomes redundant once you add a caching layer as the page performance is then limited by what caching layer you use. Also benchmarks themselves should be taken with a pinch of salt, I have an application which took almost 30 seconds to process a command on my development machine - I worried about this and began re-factoring managing to shave off 15 seconds before having to upload to our server environment for testing - just to find out that it ran in under a second on hardware that is equal in power to my desktop. In other words, there are a lot of variables to be taken in to consideration and code can and sometimes will run differently on almost identical systems.
Yea that's a weird thing I know. The Collection class takes a key value array, but it should probably also just take a value without the key. Thing is I don't actually give a filter to the routecollection, just the name of the filter. And since a route doesn't have a name, I can't use the collection class for it. I don't quite know what to do with it
Benchmarks are mostly irrelevant. At best they give you an insight of their bloatedness. But keep in mind that not everything can be cached. Fully dynamic pages are a valid use-case...and a pretty hard one to scale up, too.
If all output permutations are known and a small number the performance doesn't matter as a reverse proxy such as Varnish would quickly reach 100% hit rate. An example of this the home page of a business with the normal about/contact/jobs/products pages as the only permutations and that the content is static. But if you have something like an API with search, the number permutations is unknown since you wouldn't be able to pre-render all possible searches and the cache hit rate on searched could be low. So the lower cache hit rate on a that kind of application could require that the backend is fast. Another example is content that quickly becomes invalidated as that also reduces the cache hit rate. An example of that is Reddit. Overall, if you add three, four cache layers, there shouldn't be any problem serving any site until you reach extreme traffic numbers.
There is a difference between a static site generator, that generates pure HTML files, and caching inside a PHP framework, which *does* run PHP code. The framework still has to handle routing and checking the cache before serving the cached file. And the file is served via PHP not directly from the server.
Assuming your application respects the idempotence of certain HTTP verbs, you could also set it up so that PHP generates HTML files which are written to the WWW root which the server could hit up when receiving an idempotent request. If the request isn't idempotent, or if the page isn't cached, you could have PHP take over, giving it the opportunity to produce a [new] cache (or don't if the page's too busy).
Heck, use em both! I do and I'm a happier person for it.
Thanks! I will give it a look.
&gt; such as Disney
I think you don't understand HHVM well enough to test it, plus you are not sharing any of your configuration settings for HHVM. HHVM is JIT, running without proper warmup and doing micro benchmarks on a version of PHP (5.3) that is not currently supported; you can't expect to get accurate results when your benchmarks and your understanding of what you are testing are flawed.
&gt; if you have something like an API with search, the number permutations is unknown since you wouldn't be able to pre-render all possible searches and the cache hit rate on searched could be low. So the lower cache hit rate on a that kind of application could require that the backend is fast. However, you can and should make records of the queries being run against your API, because quite often there is a small number of queries that are run all the time, and then a vast number which are run rarely. Caching the results of very commonly-used ones can have a massive impact on performance.
i hate creating PDFs with libraries like FPDF, if i ever have to do this again i will give [snappy](https://github.com/KnpLabs/snappy) a shot
Outdated software that reached EOL is NOT stable. Just FYI.
Have you installed xdebug before? It can be kind of tricky the 1st time, but I've never _not_ been able to install it. I think that's the route you still need to pursue. Some things to keep in mind when installing xdebug: * make sure you have the correct DLL -- there's a different DLL for each version of PHP, as well as thread-safe (TS) vs. non-thread-safe (NTS). See [this SO answer](http://stackoverflow.com/a/7204804/84473) for which (TS vs. NTS) you need. * the DLL must use `zend_extension = "path\to\xdebug.dll"`, as opposed to the normal `extension = "..."` which is likely more common in your php.ini. * the DLL must be the 1st `zend_extension` loaded. Regardless, PHP/IIS freezing up a VM could be due to a number of factors, but so long as it's not something specifically with the VM (misconfigured, etc.) then it is most likely going to be a problem with one of the PHP extensions you may be running. Double-check that they're all the proper version for your OS/PHP/IIS. Since you're probably running a setup that requires thread-safety, a NTS extension could very well be the source of the problems -- the symptoms (crashing) matches the potential problem from running a NTS DLL in a threaded environment. Some other general trouble-shooting: * use the event viewer to find more info on the crashes * [capture a backtrace](https://bugs.php.net/bugs-generating-backtrace-win32.php) Lastly, I would highly advise that, as a first step, simply replace Win2k3 with Win2k8 (or even better, linux). Win2k3 is the IE6 of webservers -- it's buggy, uses tech that is well over a decade old, and generally just sucks.
Remember, kids, “premature optimization is the root of all evil”!!!
These graphs drive me nuts. Where are the axes labels?
Caching doesn't have to mean 'cache the whole page.' It is possible to cache most of the content on a page, and yet still have some dynamic content displayed.
You can actually use a CDN to cache your pages for a few minutes and use Javascript to modify content, either by removing stale content or by injecting data stored in your local browser cache or in a CDN-cached flat file to give the appearance of dynamic content. Sure, you can (and should) do server-side caching with an in-memory store like APC or Memcached or Redis, but preventing requests to your application servers altogether saves an enormous amount of money when you're working at that scale.
Thanks for the reply Kenman. I'll go through and give these all a shot. I wasn't aware win2k3 was considered the IE6 of webservers..... This particular VM is far from business critical so it certainly hasn't been given any real attention outside of this one week a year this app is used. I'll look into seeing if we can get it going with win2k8 or linux.
The IE6 jab is completely my opinion, but I think it's fairly accurate. It's 10 years old and is based on the legacy XP architecture. Hopefully it's not too much work to transition to something else, because I think ultimately that's the route you need to take -- and I'd be surprised if it didn't fix your issues. Good luck!
Varnish. You can use Edge Side Includes to cache the majority of your page, then punch through a few chunks of your layout as dynamic/non-cached content. It results in much less load on the overall system. (I think the ESI stuff was pioneered by Akamai, but Varnish takes it to a new level ...)
Ofc you don't need to cache the whole page. My comment was about "Static Site Generators taking over the future of the web".
You've given requirements ('classes should not change' and 'should be possible to configure outside class') without actually giving a valid reason why these should be requirements. The only real requirement is 'needs to be able to change configuration' with an implied 'relatively simply' (which implies knowing what your audience considers relatively simple). When you start adding these fake requirements because of your sensibilities as a developer, all you're doing is painting yourself into a corner.
12.04 is the latest (long term) stable release or do you mean something else?
Whoa. How have I not heard about ESI before!
What's the pay like? Must be local?
Hi there. We only allow remote-friendly job ads here. Thanks, Juan
Thank you for that interesting link. I will go and learn more about HHVM. I knew about the global scope and I also knew that the benchmarks are not an optimal way of testing real-world performance. Still I decided to run them unmodified. I would have ran a PHP framework if that would have worked (as also written in the post).
Again, that still results in hits to your server with some processing taking place. I'm not saying that's entirely bad, but full page cache via CDN can seriously remove entire servers from the application cluster compared to what selective caching can do alone. I've used Varnish in production and its great, but like I said, more savings are possible with minimal impact on the user.
I don't have to, you are making the claim you have the burden of proof. The fact that you are trying to do microbenchmarks on for a JIT or comparing against PHP5.3, shows that you didn't spend enough time understanding what you are trying to benchmark and the methodology you are using. Here is some reading that might be useful to you, if you decide to do this properly: - http://coderoncode.com/2013/07/24/introduction-hhvm.html - http://coderoncode.com/2013/07/27/first-steps-on-hhvm.html
Thanks for that constructive reply. I'm definitely going to read that!
Good article. I've just started embarking on this path recently. Reworking a friends ecommerce PHP site into two separate applications; a client side Angular webapp, and a supporting backend RESTful API using the Slim framework. All the things you mentioned are the benefits I wanted to gain. It's been a great experience so far and I my favorite part has to be that feeling of having client and serve side code completely decoupled and managed by their own builds and release procedures. Thanks for sharing.
Caching can be incredibly hard for a complex site. Think about how easily twitter can be cached. Or Google. *If* you have an application that's inherently cachable, then yes, you're probably not using a decent framework or application stack if you're not making use of that. That can be a big *if*, though.
I think this could turn out to be a great idea. As long as the compiled version of "Flatwhite" files are cached (i.e like rendered templates) there shouldn't be any performanc penalties :) Keep us updated!
Thanks! Yeah - it's meant as a compilation step which produces PHP files. So the performance is the same as PHP (assuming nothing crazy in terms of how it transforms the code).
Do you have a Github repo we can follow? I might even be interested in contributing :)
White space vs bracketed code reminds me of tabs v spaces. Everybody has a preference, none of it is worth arguing about. PHP using `.` as a concatenation operator I think is awesome. I'd never change `.` for an object operator. `-&gt;` vs `.`one extra character, also not worth arguing about. Part of me thinks scalar type hinting would be awesome; another part of me believes strongly in the web not being typed. I think this article aims to improve php, with out fixing any of its errors.
Cheers. I'm an 'evangelist' of sorts for API-centric development, but it's difficult to reach out as I'm restricted to my local development groups, traveling costs to bigger arenas are too high. So the only way for me to 'preach' this topic is through articles like this. For now :) There's always another debate about which type of API to build, either custom or REST and RESTful or even SOAP, while I had a stronger opinion of this a year ago (I think SOAP is way too slow and neither SOAP nor REST are easy to implement internally for hierarchic API calls), I really think today that just by making sure you build on top of your API, your code is already better to maintain and implement and already more useful as it can communicate (and it can be communicated with) other software. Glad to hear you're doing this in your projects :)
&gt; another part of me believes strongly in the web not being typed. I always hear this argument whenever scalar hinting is mentioned. As long as scalar hints are not mandatory (and let's be honest, PHP is the language where you have 10 different functions doing very-very-slightly different things; *nothing* is enforced) you can simply *not use them* if you don't want "a strongly typed web".
Article is pointless. If you want syntax similar to this there are other languages which will give it to you. As a pre-processor I'm still not interested. I don't want to have to figure out how to map errors from compiled php back to some extra pointless layer we didn't need in the first place. This is also why I refuse to use similar things for other langauges such as coffeescript. It's not really solving a problem so much as it is creating a new one.
Out of curiosity, why? I never really understood the extra characters, and not very convenient characters to type, at that.
I hate to be that guy, but... why not just use Python? Your syntax is Python without colons. Python runs rather awesomely on the web. It seems kind of silly to plaster Python syntax over PHP without using the actual language and all of its other features. Could you elaborate on this?
PHP's OOP was definitely an afterthought. The reason I don't just want to use Python is because PHP already has the widespread adoption, package manager and frameworks I love. I don't want to leave PHP. I just want to cover it in a blanket of awesome.
I've created https://github.com/formativ/flatwhite-specification as an anchor for the spec, and https://github.com/formativ/flatwhite-compiler as an anchor for the compiler.
Thanks for your thoughtful and constructive feedback. 
PHP's OOP is [bolted on](http://michaelkimsal.com/blog/php-is-not-object-oriented/) even more than Python's, so I'm not sure what difference that makes. Python is also much more object-oriented in that everything is literally an object; there just isn't the familiar syntax you expect from an "OOP" language. I honestly don't care that Python doesn't differentiate between methods and objects. I've never come across a situation where that was a problem. My point isn't to start a PHP vs Python debate. It's to inquire why the OP feels the need to build a PHP preprocessor with Python syntax when Python is readily available.
Good points. It looks clean... but that really is it. Saving a couple keystrokes with brackets and periods would be nice, but the type hinting would pretty much undo all that saved space. Unreadable code is detestable, but forcing whitespace is something I am not a fan of. Ultimately you would be adding a lot of extra steps. You are writing essentially the same thing, with a few less keystrokes, compiling, testing/error checking, then fixing and recompiling and retesting. In working with a Java developer, he is definitely jealous of the fact that I can just refresh the page and see the results, whereas he has to wait for it to compile and run before he can see results. 
&gt; why the OP feels the need to build a PHP preprocessor with Python syntax when Python is readily available Because with this kind of preprocessor you can have access modifiers, first class methods and interfaces while using a Python-like syntax. Best of both worlds (proper OO + nice syntax) if you ask me :)
I think this would make a lot more sense in the context of what elements of PHP the author will miss in a move to Python. I can't see what the point of this PHPyton language hes constructing would be other than to make a language like two other, but compatable with neither. Are there certain things in PHP that are unique, or for which Python falls so flat-on-its-face its not a good substitute?
Tooling is super important. Syntax highlighting and code suggest are easy to do though. These were all problems faced by CoffeeScript and yet it's the 13th most popular language on Github for 2013 (http://adambard.com/blog/top-github-languages-for-2013-so-far)...
I love the PHP community, tooling, frameworks and package manager. I don't want to leave any of those things behind, and with this kind of pre-processor; I wouldn't need to. All I am after is a cleaner PHP syntax. Edit: I guess it's more about what's good about both PHP and Python. IMHO this is where that is going...
Agree. You should "always" pull the data through a reverse proxy such as a CDN or Varnish and serve correct HTTP cache headers. The overall cache rate will be low, but that will make sure the individual cache rate for each resource is high.
The only thing I dislike is the whitespace/removal of {} blocks. The code really (really) looks less readable (especially methods and anonymous functions). This also makes an extra indentation for the namespace.
I guess I'm just so used to looking at Python/CoffeeScript to notice this anymore...Perhaps curly braces could be optional, but that would sort of defeat the point of significant whitespace. Maybe it calls for 1 spec with significant whitespace and another with curly braces...
I dig Python syntax; which has obviously influenced the proposed syntax. But I also dig the tools surrounding PHP. Kind of trying to have the best of both. Sort of like how Ruby was born...
Something like this? $sql = &lt;&lt;&lt;EOD SELECT u.email, oi.data FROM order o INNER JOIN user u ON o.owner = u.user INNER JOIN info oi ON o.order = oi.order WHERE u.email &lt;&gt; '' AND o.payment_state = 'payment_confirmed' GROUP BY u.email ORDER BY o.order DESC LIMIT 10 EOD;
Sublime Text has syntax highlighting for SQL queries when they're inside PHP strings (i.e. any string starting with SELECT, UPDATE etc). But it only works if the whole query is one string. I typically use your first method: $sql = "SELECT u.email, oi.data FROM order o INNER JOIN user u ON o.owner = u.user INNER JOIN info oi ON o.order = oi.order WHERE u.email &lt;&gt; '' AND o.payment_state = 'payment_confirmed' GROUP BY u.email ORDER BY o.order DESC LIMIT 10";
I know it's odd, but for me formatting it like this is much more readable... SELECT u.email, oi.data FROM order AS o INNER JOIN user AS u ON o.owner = u.user INNER JOIN info AS oi ON o.order = oi.order WHERE u.email &lt;&gt; '' AND o.payment_state = 'payment_confirmed' GROUP BY u.email ORDER BY o.order DESC LIMIT 10;
Personally, I often do: $query = " SELECT u.email, oi.data FROM order o INNER JOIN user u ON o.owner = u.user INNER JOIN info oi ON o.order = oi.order WHERE u.email &lt;&gt; '' AND o.payment_state = 'payment_confirmed' GROUP BY u.email ORDER BY o.order DESC LIMIT 10"; But then, I am strange!
I don't understand the hardon that several bloggers seem to be having for "no semi-colon". I've always found it useful to add a symbol that indicates the end of a command. Leaving it open feels lazy and unclean.
Well first of all you should consider using an ORM like active record as it simplifies and abstactifies the process of accessing your database. If you still don't want to use an ORM then I believe prepared statements is the best you can get. $stmt = $pdo-&gt;prepare('SELECT ... FROM ... JOIN ... JOIN ... WHERE ... AND abc = :abc AND def = :def'); $stmt-&gt;execute(array('abc' =&gt; 'abc value','def' =&gt; 'def value')); If you don't want to use prepared statements then strings with double quotes is your best bet, since variables in strings with double quotes don't need to be concatenated, you just quote them. Additionally you can used curled brackets {} to put php code in $query = "SELECT * FROM logintable WHERE username={$username} AND password={your_crypt_function($password)}";
I need to learn how to understand sources better, clearly. :) Most of the PHP IDE's I've come across seem to be plugin suites to bigger (generic) IDE's though. Thinking about Eclipse, Netbeans et al. Any new programming language (or pre-processor) would be wise to make itself easily adoptable. I don't think CoffeeScript is as popular as it is because it's vastly superior to JavaScript. I think it's mostly popular because of adoption. You are right - it has to be easy for people to use without changing their workflow and/or tools. I think it can be (too soon to say more than that), but that requires that tooling is a priority in the language.
Give this man/woman a gold star for proper indentation!
Tabs vs. spaces, semi-colons or not. Makes little difference. Python syntax inspired me not to use them, but there's no reason they can't be optional. Never entered into a debate about the merits of semi-colon omission, and not about to start...
I think this way to make multiline variable is deprecated or I'm wrong ? At least all the seniors I met told me never use it.
I avoid ORMs, all they do is slow me down - the advantages are heavily overwhelmed by shortcomings and at the end of the day you end up hacking and working around them to fulfill real world requirements. SQL was never intended to be object oriented and I'm ok with that - you just have to have structure, discipline and strict nomenclature. I found this format to be the most easily readable one - and along with the excellent PHPStorm db integration (autocompletion, query inspection, etc) reading/writing queries is a breeze. SELECT column1 , column2 AS alias1 , column3 -- comment FROM table1 alias2 LEFT JOIN table2 alias3 ON alias2.table1_id = table1.id AND alias3.type = ? WHERE alias2.column4 = ? AND alias2.is_deleted = FALSE GROUP BY alias2.column1 , alias2.column2
Nice, as I'm using Sublime Text and quite clear to read even if you don't have syntax highlighting. I think I will adopt something like that.
We are moving little by little the application to a Framework (Symfony) but we still need to maintain the legacy code and sometimes it still requires to write some queries and I'm looking for best practice to advocate to the team that might help us for the future refactoring.
How would write this query with PHP ? Like variable concat or one variable with multiple line ?
Here's something from my own code. Basically what /u/edmanet suggests, though I do a bit more indentation and so forth: $tags = array( /*Just some sample data. Ignore.*/ 'Tag 1', 'Tag 2', 'Tag 3', 'Tag 4' ); $query = &lt;&lt;&lt;EOD SELECT rp.rp_id AS `ID`, u.username AS `Creator`, rp.name AS `Name`, rp.created AS `Date`, COUNT(rt.tag_id) AS `Relevance`, GROUP_CONCAT( t.tag ORDER BY t.tag SEPARATOR ', ' ) AS `Tags` FROM roleplays rp LEFT JOIN rp_tags rt ON ( rp.rp_id = rt.rp_id ) LEFT JOIN tags t ON ( rt.tag_id = t.tag_id ) LEFT JOIN rating_settings rs ON ( rp.rating_id = rs.rating_id AND rs.user_id = ? ) LEFT JOIN users u ON ( rp.user_id = u.user_id ) WHERE rp.public = 'yes' AND t.tag IN ( EOD; $num_tags = count($tags); for ($i = 0; $i &lt; $num_tags; $i++) { $query .= "\t\t?"; if ($i &lt; $num_tags - 1) { $query .= ','; } $query .= "\n"; } $query .= &lt;&lt;&lt;EOD ) GROUP BY rt.rp_id ORDER BY Relevance DESC, Tags ASC, rp.rp_id DESC; EOD; Lining up the EOD wrong (has to be the first letters of the line at the end, cannot be indented) can be a pain, but I don't know why else people would say to avoid it. I'd like to hear about that as well.
My whole code would look like this: $variableLog = pg::getAll( "SELECT column1 , column2 AS alias1 , column3 -- comment FROM table1 alias2 LEFT JOIN table2 alias3 ON alias2.table1_id = table1.id AND alias3.type = ? WHERE alias2.column4 = ? AND alias2.is_deleted = FALSE GROUP BY alias2.column1 , alias2.column2", $boundValues );
I like it too, If you move the double quote with the SELECT you can see the syntax highlighting with Sublime Text.
Yuck: EOD; $num_tags = count( $tags ); for ( $i = 0; $i &lt; $num_tags; $i++ ) { $query .= "\t\t?"; if ( $i &lt; $num_tags - 1 ) { $query .= ','; } $query .= "\n"; } $query .= &lt;&lt;&lt;EOD I've written my PDO wrapper to expand and autoinject array values into appropriate prepared statement placeholders. I'm going to opensource it soon-ish.
Yes, I missed that. Usually I would actually put the double quote on the line with the select (line 2).
Ok, thanks. As you guessed, we are not using it.
I separate SQL from PHP as much as possible: $query = " SELECT u.email, oi.data FROM order o INNER JOIN user u ON o.owner = u.user INNER JOIN info oi ON o.order = oi.order WHERE u.email &lt;&gt; '' AND o.payment_state = 'payment_confirmed' GROUP BY u.email ORDER BY o.order DESC LIMIT 10 ";
I have a very close style to you. $query = " SELECT u.email, oi.data FROM order AS o INNER JOIN user AS u ON o.owner = u.user INNER JOIN info AS oi ON o.order = oi.order WHERE u.email &lt;&gt; '' AND o.payment_state = 'payment_confirmed' GROUP BY u.email ORDER BY o.order DESC LIMIT 10 ";
Ach, mein vertical space...
Just checked out your site. I'll checkout your Wave framework this weekend.
...wasted on readability like that
Why not use implode instead of a for loop?
Here's mine $query = " SELECT u.email, oi.data -- each row contains a different table FROM order AS o INNER JOIN user AS u ON o.owner = u.user INNER JOIN info AS oi ON o.order = oi.order WHERE u.email &lt;&gt; '' AND o.payment_state = 'payment_confirmed' GROUP BY u.email ORDER BY o.order DESC LIMIT 10 ;"; // small but important I've been working on a codebase where the other developer consistently does it thusly: $qry = "select u.email, oi.data from order o inner join user u on o.owner = u.user inner join info as oi on o.order = oi.order where u.email &lt;&gt; '' and o.payment_state = 'payment_confirmed' group by u.email order by o.order desc limit 10";
Good post. Recently we built an application exactly the same way - so that the GUI and the backend are totally decoupled. The GUI uses exactly the same API for accessing functionality that any API user would use. Really good experience and as OP explained it makes you think different. You really need to think about what and how to expose via API. P.S. We're from Estonia, too:)
Well proper indentation IMO would use leading tabs, but that doesn't work on reddit ;)
IIRC PHPStorm will highlight the SQL written in that fashion as well. You can also use HEREDOC
always good to point out [heredoc](http://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc) and [nowdoc](http://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.nowdoc) but i personally wouldn't use them for everyday queries. if at all i use them for larger migration files.
don't cry because of one downvote you baby :p
I would start with a blank line between each section of the query, and keeping one statement or condition per line. Even without indenting, that can improve things a lot. Or do the indenting instead of blank lines. That's two approaches that most of the examples in the comments here are taking.
I think there's a diminishing return on readability, to me this takes up needless amounts of space. "Readability" is pretty subjective, but to me you're better off starting a new line with either a new entity or a new... not sure the term. "Bit". I would break it up pretty much as OP did. Otherwise: $query = " SELECT u.email, oi.data FROM order AS o INNER JOIN user AS u ON o.owner = u.user INNER JOIN info AS oi ON o.order = oi.order WHERE u.email &lt;&gt; '' AND o.payment_state = 'payment_confirmed' GROUP BY u.email ORDER BY o.order DESC LIMIT 10 "; So much readable! Sure, the above looks absurd... but where do you draw **that** line?
Eugh! I thought I had seen the last of indenting each line to line up with something half a page in on the line about, a looong time ago. Please don't encourage this. Keep indenting of lines to structure only. You can line stuff up after that. I beg you!
So firstly I'd say your top example is much more readable, and when it comes to debugging the statement directly in a mysql client you can just grab the whole statement out if you need to without removing fiddly bits. That aside, and I realise this isn't answering your question exactly, I thought this was a neat place to show off what using a good ORM like [Eloquent for Laravel](http://laravel.com/docs/queries#raw-expressions) can look like. Let's take your query and convert it to an Eloquent statement... $results = DB::table('order as o') -&gt;select( array('u.email', 'oi.data') ) -&gt;join( 'user as u', 'o.owner', '=', 'u.user' ) -&gt;join( 'info as oi', 'o.order', '=', 'oi.order' ) -&gt;where( 'u.email', '&lt;&gt;', '' ) -&gt;where( 'o.payment_state', '=', 'payment_confirmed' ) -&gt;orderBy( 'o.order', 'DESC' ) -&gt;skip(0) //optional -&gt;take(10)-&gt;get(); Just thought it would be interesting to see the same query for a purely ORM perspective. No judgement whatsoever on which is neater/better. Thoughts? (Criticism?!) I'm sure I messed something up in there! Personally I would use NULLs instead of blanks when looking for the email, that would allow you to use whereNull('u.email') instead. Edit: Changed: -&gt;where( 'u.email', '&lt;&gt;', DB::raw('') ) to -&gt;where( 'u.email', '&lt;&gt;', '' ) but I'm unsure what the exact outcome is without testing it!
Cons * needless IO overhead on all SQL queries * maintaining a series of random files * requires specialised knowledge of location of text files FTFY
It's completely up to you whether or not you prefer raw SQL over an ORM, of course, and I won't try to convince you otherwise, but your post is complete FUD. I just wanted to warn people reading it who may not know this already. That is all.
Awesome :) A company or university or startup?
I couldn't disagree more strongly. &gt; the advantages are heavily overwhelmed by shortcomings and at the end of the day you end up hacking and working around them to fulfill real world requirements. It sounds like you've used terrible ORMs. Or, more likely, you're using them wrong, and treating them like a straight jacket instead of a suit jacket. &gt; SQL was never intended to be object oriented and I'm ok with that The SQL is not an object, but what it returns is. That's the point of an ORM. You don't get "some data". You get "A user", or "some products". Those are objects. That is the point. The benefit of an ORM is that it makes it more maintainable and consistent to access data, reduces maintenance costs for changes and makes it more obvious what you're actually trying to get.
You could make stored procedures and then simply call them in a single line in PHP.
&gt; The SQL is not an object, but what it returns is correct, and PDO can natively fill an object with the fetched values - which, I totally agree, is great. But that is not an ORM, SQL writing in object notation is just backwards and full of quirks when you need really complicated and optimized functionality. And the remaining 95% of queries are totally trivial in either case. What is by far worst with ORMs is that they enforce their way of **architecturing**^(sp?) your database. There are inevitable cases in non-trivial systems where you are forced to denormalize and hardcode for the sake of performance and prototype functionality - and ORMs just constanly stand in the way. 
I'm not a novice by far, and have worked with projects of all scopes, I'm just reporting what my experience tells me.
I don't think IO would be much of a problem as the OS would cache it pretty quickly (after being read a few times). (For the record, I don't like the idea either)
Wave is hampered a little at the moment by not having a number of tutorials finished - there are just two at the moment that give a general idea about how to build an API and a website with it though. It was shared by a Google guy earlier this year and is slowly gaining followers, despite still maturing. One of the major differences in Wave is that it does not have a RESTful API, it has custom API that works over HTTP as GET or POST parameters (or anything else really, you can send a JSON or XML string as well) and it is technically a hierarchical MVC. Reason for this was really simple: I wanted to decouple API from HTTP protocol headers and make complete set of requests possible with anything that can 'fetch' data from just a URL. Though it is entirely possible to build a RESTful API handler for it, if needed. I aim to push it more in public in the near future though, but I need to get the 3.8.0 out the door first. Then I'll focus on tutorials and how-to guides, since there's some really neat stuff that is possible with Wave. Wave has, for example, an on-demand caching. Basically you can tell every API request exactly how 'old' a cache you accept. This allows you to control cache from request-side directly and not just have one server-side cache across the system. **But what's more neat (and which is usually how I get people interested in Wave) is its completely dynamic on-demand resource loader.** For example, this is one uploaded image on the server: http://waveframework.com/w/resources/images/logo.png This was uploaded, completely unedited server-side. It may be something your user uploaded or something from your website design wise. But let's say that this is an avatar that the user uploaded. Your first instinct would be to resize this to your website avatar size, say (240x120). But you don't have to do it on upload - in fact you can simply request a proper size. Like this: http://waveframework.com/w/resources/images/240x120&amp;logo.png It cropped the image to proper size. Often not a good solution, what if you want to fit it to your requested frame? It is possible: http://waveframework.com/w/resources/images/240x120&amp;fitwithbackground&amp;logo.png What if you want to give it a background, since it is a PNG image. Doable: http://waveframework.com/w/resources/images/240x120&amp;fitwithbackground&amp;rgb(200,60,60)&amp;logo.png You can even move the image positioning on this canvas, like this: http://waveframework.com/w/resources/images/240x120&amp;top-left&amp;fitwithbackground&amp;rgb(200,60,60)&amp;logo.png There are a lot of options with a number of different parameters that can be set. These parameters can be applied to any picture file set on the server. Yes, this means that you don't have to kill your designer if they ever decide to change the size of avatars your users have. You can even do things like filters on them: http://waveframework.com/w/resources/images/240x120&amp;top-left&amp;fitwithbackground&amp;rgb(200,60,60)&amp;filter(grayscale)&amp;logo.png And of course everything is cached.
Yeah, that is whiny, I'm sorry, it's just really discouraging to see an undeserved -1. You get me, you know you do.
Slightly on topic, checkout the EAP of PHPstorm 7. It has vagrant deployment built in which I have just had a play with and highly recommend.
How do you format INSERT and UPDATES? I've always struggled being consistent with those.
Add *non-standard* to the list. No one besides OP will be able to read the code, and even when you do know that the `get_all` fetches a file, you must take extra steps to actually see its contents (i.e. navigate to the folder and open it). No IDE will allow you to open it up via *Go To Implementation* or something similar. OTOH, all of the OP's Pros are mitigated by using PHPStorm with proper language injections.
I agree with you, but I think there is better ways how to write queries and make it more please for the eyes than to have a compact line of text with comments.
Also IIRC you can reference PHP variables inside of the heredoc string
&gt; Readability is top priority (right up there with DRY) in 99% of code, vertical space is not even a measurable sacrifice. I totally agree, but my point is that "what is readable" is so highly subjective that it's not itself useful. Some things are, of course. But I think that if you go too far down certain paths (such as the one above) you actually make things **less** readable, rather than more. I actually find the above code far **less** readable than the OP's original code. So while "vertical space" is not really a big deal if it's for a benefit, I certainly see it as a significant loss if it's done for a negative reason! 
Usually I do INSERT and UPDATE statements via my ORM, so it doens't really matter. Custom SELECT queries are far more common. I expect that this is the case for most people, including the OP. Even if you're not using an ORM or framework, INSERTs and UPDATEs are almost always in the same format without anything special.
Use the language as the identifier. Good IDEs will detect it and offer syntax completion/ highlighting. Examples in PhpStorm: http://docs.vuii.co.uk/clips/2013-09-27_140726.png
By using [heredoc syntax](http://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc) and adding appropriate spaces. $query = &lt;&lt;&lt;SQL SELECT u.email , oi.data FROM `order` o JOIN `user` u ON o.owner = u.user JOIN `info` oi ON o.order = oi.order WHERE NULLIF( u.email, '' ) NOT NULL AND o.payment_state = 'payment_confirmed' GROUP BY u.email ORDER BY o.order DESC LIMIT 10 SQL; Join and Inner Join are the same thing, so I leave off the "Inner" to make my query look nicer. Each column in the SELECT gets its own line with the comma in front. If I wanted to remove a column to test something, I could easily just add a "--" in front of that row without disrupting the entire query. I tab over (2 spaces) the joins listed under the FROM to better see them and do the same with my ANDs and ORs with the WHERE clause. I also name my HEREDOC "SQL" so it's obvious what the string is being used for, you can name it whatever you like as long as it has an ending string of the same name to show where it ends. **EDIT** I would also updated the `u.email` to pass through the NULLIF function to check for null instead of an empty string.
If 95% of queries are totally trivial, all this talk of enforcing architecture and what not is not going to matter. The benefit of ORMs extends to all levels of utilizing a database. For small, or how you said it, "trivial" systems you still get the two major benefits; 1) you are interacting with the database in the language you are already writing, and 2) your code is compatible with most conceivable backends. In my work, it is always inevitable, that I need to break down my queries to smaller chunks. It is very rare that I am writing a complicated query as a single string, and even if I am, there is no downside to using a well formed API. If anything it just makes code clearer and easier to read.
The best trick I ever figured out was "commas first". I don't see it used very often on other's code, but I think it makes things much more readable, and less likely to create errors when rearranging columns in the select clause, because the line never ends with a trailing comma. SELECT u.email , oi.data , oi.foo , oi.bar , u.baz FROM order o 
I hate newlines in the query log, and I use statement based replication and sometimes need to inspect binlogs to troubleshoot a hairy issue - newlines in the query make it way harder. I don't see my method posted yet: $query = sprintf( "SELECT ". "u.email, oi.data ". "FROM ". "order o ". "INNER JOIN ". "user u ". "ON ". "o.owner = u.user ". "INNER JOIN ". "info oi ". "USING ". "( order ) ". "WHERE ". "u.email != '' AND ". "o.payment_state = '%s' ". "GROUP BY ". "u.email ". "ORDER BY ". "o.order DESC ". "LIMIT 10 ", mysql_real_escape_string( "payment_confirmed" ) ); It seems like a pain to write, but I've been in the habit so long it's very simple - you don't have to deal with newlines and it's very readable.
Pay is 45-70/hr w2 depending on experience and location. Yes, you must sit in either Austin or Cupertino. 
&gt; 1) you are interacting with the database in the language you are already writing not really a point, if you use an ORM you know SQL inside out either way (at least I very much hope so). &gt; 2) your code is compatible with most conceivable backends. You know very damn well you will never, *ever*, need this. No one in their right mind would port a working project verbatim to a different DB. &gt; In my work, it is always inevitable, that I need to break down my queries to smaller chunks. It is very rare that I am writing a complicated query as a single string how is that so? Genuinely interested. 
&gt; almost always
I absolutely love "commas first". It makes it so much easier to comment out one column if you needed to for testing or whatever.
&gt; Join and Inner Join are the same thing, so I leave off the "Inner" a comma achieves the same too and I personally prefer that &gt; WHERE NULLIF( u.email, '' ) NOT NULL that's a really weird way to write `u.email &lt;&gt; ''` 
I have to say, I'm not a fan. I never felt like being descriptive with object variables was something that needed fixing. It's not like this is something that can't be done right now in a more verbose way. It really feels like solving a problem that never existed 
That does look awesome. 
http://docs.vuii.co.uk/clips/2013-09-27_144512.png Really? Is there a config option I need to enable for it?
I'm always accidentally touching the voting buttons on my touch devices. Don't worry too much about it. 
&gt; a comma achieves the same too and I personally prefer that What? How do you replace an "Inner Join" with a comma? Was the quote not correct? **EDIT** I get what you mean now and it's not the same thing. You're not joining on 2 columns in each table by just including the table with a comma, so it's not the same thing at all. &gt; that's a really weird way to write u.email &lt;&gt; '' But what if `u.email` is actually null? From the experience I have had, just checking if it was an empty string would not catch it if `u.email` was NULL, whereas if you convert it to NULL if it's an empty string then you can catch it to make sure `u.email` is not null or an empty string.
&gt; Yes. That is the *best* thing about an ORM. Like any framework, an ORM enforces a specific structure and is full of expectations and opinions. And in my view, they are right. Not if you know what you're doing. And I'm under the impression you definitely do. Why have something in your way if you'd do the same in a similar amount of time, but with full control over every aspect? &gt; You do some really weird shit with your database. I do what business requires, *weird shit* is an inevitable part of that. Business does not tolerate their weird shit being slow either.
No one has bought up [SQL Formatter](http://www.dpriver.com/pp/sqlformat.htm) yet. This is a great program. just copy/paste your sql there and it'll generate a formatted code for you. It pretty much looks like what digitalend posted, you can put a mess of a 100 line sql in it and it'll beautify it for you.
Settings -&gt; project settings -&gt; SQL dialect You also have to have the appropriate built in plugins enabled, but they are by default. Once you do that, do yourself another favor and connect to your database via the *gasp* database tool window. You'll have table and column completion, usage search and other awesome features. That is, unless, you use an ORM :)
Reddit News for android is the shit.
wow thanks for that link 10/10 will use
 SELECT u.email, oi.data FROM order o INNER JOIN user u ON o.owner = u.user INNER JOIN info oi ON o.order = oi.order WHERE u.email &lt;&gt; '' AND o.payment_state = 'payment_confirmed' GROUP BY u.email ORDER BY o.order DESC LIMIT 10 
I'm using it sometimes, to make legacy queries more readable and debug the wrong part. But I don't bother, even if I should, to paste the formatted query :(
 INNER JOIN info oi USING (order) When the column names are identical, this is often easier. 
&gt; well, NULL and '' are two completely separate concepts and used in different contexts. If they are equivalent in your usage, at the very least it's a code smell. Right, `u.email &lt;&gt; ''` would not catch NULL values. What if you had a `u.email` that was `NULL`?
&gt;not really a point, if you use an ORM you know SQL inside out either way (at least I very much hope so). That isn't really the point either. I do a lot of OOP and I'm always thinking in terms of objects. Using model objects makes your queries cleaner, easier to modify, and fix, particularly if you have e.g. a class dedicated to a manipulating a specific app function; compiling the query or queries often gets spread across the methods. &gt;You know very damn well you will never, ever, need this. No one in their right mind would port a working project verbatim to a different DB. When talking about projects as a whole, no, but most of my code is **modular** and **reusable**, and I am not using those words just because they are pretty. It is how I think and write my code, no matter where it is; the app logic is separated from the UI logic, the back end is separated from the logic, etc. Everything is modular and separable, as much as possible anyway. Maybe this is because I've always worked on a lot of libraries and frameworks but at least in my line of work, this is how it has to be done, and hard coded sql strings is the absolute last thing you will catch me doing. &gt;In my work, it is always inevitable, that I need to break down my queries to smaller chunks. It is very rare that I am writing a complicated query as a single string
Jesus christ, 8 years of programming and I have never heard of or came across this. This is great.
I don't get what you're saying, sorry. If `NULL` and `''` mean the same in your system - and especially if there's a chance it can contain either value - consider marking the column as `Not Null`.
&gt; I do a lot of OOP and I'm always thinking in terms of objects. SQL is a fundamentally different concept from OOP. If the two were **compatible**, SQL language would have an official OOP API and there would be an end-all ORM. They, however, are not, and there is no reason to discuss this. It's a subject of a myriad of academic papers by people much smarter that we both are. To use an ORM at least remotely efficiently you always have to think from an SQL perspective, I just don't see the reason for the extra step which you even skip when there's some difficulty involved. I can't see rationality in that no matter how much I've tried to. &gt; code is modular and reusable Modularity - albeit true and incredibly important has nothing to do with using an ORM or not - and reusability is, I'm sorry, but just a pretty word. If you make something reusable, you create a public-facing API via interfaces and methods and not concern the end user with any inner workings. No connection with ORM usage whatsoever. I'd just like to ask to not let this conversation heat up, this is not a discussion to prove something, we're just offering a different perspective on the tools and methodologies we use. Both of us should gain something from this, not become aggravated. I for one, am entirely enjoying this whole thread - even though I should probably get back to work :)
I will stop discussing this because I've said all that I can say about it, but you should rethink this. In time you'll thank my what-you-now-see-as-arrogance.
If you do this it should extend to all methods, not just constructors.
but... but... sql injections!!!
He's not imploding the values of the array, he's putting a ? placeholder for every entry in the array, one of the nastier edge cases of prepared statements. If you really want to implode though, you could replace the loop with $query.="(".implode(",",array_fill(0,count($num_tags),"?")).")"; (man, I'm getting soft, I had to triple check the parentheses since reddit doesn't syntax highlight for me :D )
I never saw it as arrogance, it was a discussion. The last reply, however, seemed a bit arrogant.
I use this site on a daily basis, I have to look at other peoples queries all the time, I've gone through most of our SPROCs and reformatted them with this. Some people are horrible formatters....
I dunno about this one. Initialization lists are fine in C++, but the syntax looks rather dirty in PHP.
I like this purpose, another syntactic sugar that avoids a lot of boilerplate code.
I'd argue the opposite, it looks contrived, and hides what's actually happening.
This would make sense. It's not something horribly needed, but as long as it doesn't break anything and has no drawbacks I don't see why not.
What happens here? public function __construct(&amp;...$this-&gt;x);
IMO... If we keep adding some stuff in PHP like that, I'm telling you, PHP will be a really confused language. 
Im ok with setting two variables in my constructors. if i have so many variables in my constructors that this becomes useful then im doing constructors wrong.
Will be?
It's a stuck up function for 1%-ers!
The trouble with that is that the first character in the query is no longer an S, which means that MySQL will bypass the query cache: http://www.mysqlperformanceblog.com/2006/07/27/mysql-query-cache/
Yes, i also found out that solution while reading about ruby on rails, where you can just send one json parameter right away. Also another benefit is that you can see the parameter name while calling the function. You can do in PHP something like function("{param:value}") then just do extract(json_decode())
You phrased it wrong. PSR is not about adoption in larger projects it is about being nice to majority of other developers who edit your code. If you have external contributors and you plan to have more of them — it is a good idea to switch to the common standard. Regarding compatibility — well, that's what major versions are about. You can do it as soon as you are ready to push other big stuff.
&gt;SQL is a fundamentally different concept from OOP. Yes I know, it is why I find ORMs so useful. It is why I said using an ORM allows me write every aspect of my application in the same language. For me personally, this is one of the things that it comes down to. Not sure what you meant by an end-all ORM; isn't the nature of software that there is no end-all? Someone is always producing something that is better and faster. Anyway, maybe you are right, better not indulge too much in that. Leave it to those who enjoy digesting such academic subjects. &gt;If you make something reusable, you create a public-facing API via interfaces and methods and not concern the end user with any inner workings. This is precisely how I do it. Usually my first version is a bit messy and has more attachments than I'd like, but by second version I've usually cleaned it all out, and the app can be ported anywhere that uses the same principle framework. My "OCD" literally demands it. If I don't clean my code up, it'll bug me until the end of time. So again no, not just pretty words for me. &gt; I can't see rationality in that no matter how much I've tried to. That's fine. If that is your preference, each to our own. I do think there are plenty of benefits to using ORMs though, many which I rather not ignore. They certainly have made my work a lot better. &gt; I'd just like to ask to not let this conversation heat up, this is not a discussion to prove something, we're just offering a different perspective on the tools and methodologies we use. Both of us should gain something from this, not become aggravated. I for one, am entirely enjoying this whole thread - even though I should probably get back to work :) Ohh don't worry, I'm well adjusted. I'm actually off and it is friday, so I can go all night ;) Though we probably shouldn't. Think we have exhausted the facts of the case by now and just offering preferences at this point. Which is fine but when you feel like you are beginning to repeat yourself, it's time to let the subject go and let others take over :)
I can sense you are not a fan of PHP, so please use whatever language you like. I happen to think pissing on a programming language you don't like is as pointless as removing delimiters, but maybe that's just me.
I am not a "fan" of PHP anymore than I'm a "fan" of hammers. I use it as it is frequently the most convenient tool for solving a problem. Believe it or not, you can use and even like using something while admitting that it is imperfect or even deeply flawed. Regardless of how big of a "fan" of php you are, the language has a number of glaring issues which are largely the result of maintaining backwards compatibility. Once you're willing to throw out this backwards compatibility you can start fixing inconsistencies and anachronistic design decisions. Arbitrarily changing the syntax breaks backwards compatibility without actually fixing any real problems. see: [Bike Shed](https://en.wikipedia.org/wiki/Bike_shed)
I like the direction PHP has been going lately but there have been a few unnecessary suggestions and this definitely falls in that category. Is this really a problem that needs to be solved? 
Because I was tired when I wrote that.
&gt; I've had some interest in Ruby and Python, but have dropped the idea quickly - I can't take their "hipster" style seriously. What? You can't take two excellent programming languages seriously because you think it's for hipsters? I highly recommend actually trying them before passing a judgment like that. &gt; ever since I moved to curly brace languages I've overcome my depression and overall been more successful at life ?? What does this have to do with convenience and consistency of a language? 
It's not bad, but is it good enough? Syntactic sugar is not free. The first time using it, you'd have to learn about the alternative syntax and its behavior, and carefully devise the code using the alternative syntax and run a quick test to be convinced that it works right. Even once familiar with it, you'd still have to wonder about which idiom is preferred in the particular code base and whether it's compatible with the PHP versions you need to support. So, any new syntax had better do something properly useful to justify the overhead of implementing and learning it. You often need to put validation code in the constructor anyway. If it's only for constructors I think it's not a big enough time saver to be worth introducing strange new syntax. What might make it worth it is if you enable it for all methods, like setters. Now those are something I do find 'tedious', especially as one is often encouraged to make getters and setters preemptively in case they're ever needed later. E.g.: function setName($this-&gt;name); instead of: function setName($name) { $this-&gt;name = $name; }
This is will be pretty useful when you use dependency injection and you write loads of constructors only to inject dependencies (object properties).
`$this-&gt;x` will be a reference to an array of variadic parameters. Simple, really. It's not really any different to `&amp;...$x`
Yeah, it will hopefully result in less code bloat, and better programmer productivity, which can only be a good thing :)
It's not that rare to have +5-6 variables in a constructor if you do dependency injection actually. 
&gt; Why have something in your way if you'd do the same in a similar amount of time, but with full control over every aspect? a. It's not the same amount of time b. It's less maintainable. I've been down this road. I'm ON this road. I'm currently doing maintenance on a large codebase containing dozens if not hundreds of manually created queries. Most of them are copy pastas of the same basic structures. Same joins with different criteria. Same tables with different orders. This is the opposite of DRY. I've RY all over the place. And every time I make a new field in the database, because of what "business requires"? It's a fucking nightmare. I have to go through and add it to all of the select statements. I have to make sure that all of them have that field. I have to make sure that the insert query includes that field too. Except I miss one. Just one. Now the field doesn't save. It looks like it's there, but the update doesn't work. Only on an update. Insert is fine, but update is broken. Oops. Now I look like an ass. &gt; I do what business requires, No. Business doesn't determine your database structure. You've never in your life been given business requirements that say you need a union. You've decided that is the best way to meet the requirements, but that's different. Business demands specific information, but doesn't dictate how you get that. &gt; Business does not tolerate their weird shit being slow either. This is a mistaken assumption about ORMs. Business cares that their shit is slow, yes. But business cares more that you're able to get things done faster because you don't have to make changes in 12 different places because you changed a field. Business cares that you're about to get more done and make more of their dreams come true because you know how to use the right tools regardless of whether you have "full control over every aspect". Business cares that when you quit the next guy can look at the code and understand it instantly, or that the mid-level dev you hire can get up to speed in a week instead of 6 months. Seriously, the last place I worked used a maze of custom SQL in a complex and weirdly abstracted system. Sure, yeah, it had "full control". And after nearly a year there I still don't get the database structure, and we were still ironing out SQL join issues.
I tend to use PostgreSQL. Seems a shame that MySQL won't trim the string first? Thanks for letting me know. 
I'm opposite, I despise comas first. Especially since most code formaters will just put them at the end of the previous line. But it also seems to make me loose place in something I am reading. IF the first character of each line is the same, it makes it hard for me to differentiate the lines. 
You've now added in the requirements of supporting a package management system, and following 'standard OOP practices' (why?). You've also engaged in a false choice in claiming that upgrading is somehow harder with a text file containing a programming language format vs a text file containing a different format (ini, xml?). The only real requirement is being able to 'configure the app'. That's it. We have no more information. The only way you can even *attempt* to try and argue with my original point (that it depends on the audience) is by making up requirements that have never been explicitly stated by anyone. You're not all for breaking convention, it's a phrase you've used to try and make yourself seem a bit more moderate than you actually are (and to imply that my suggestion was actually breaking convention). It's like saying "I'm not trying to be a dick, but you're a cocksucking asshole" ... yeah, you are trying to be a dick, despite you saying otherwise. There is no convention on how to configure your app. I could just as easily claim that convention is to save the configuration in a key/value table in a DB somewhere, but not doing so isn't 'breaking convention', it's developing against different constraints, and for a different audience. And then you follow it up with a FUD filled statement implying that you must do the things you're pushing in order to have a quality library. A robust piece of software with shitty code will be considered great quality by the users, but not necessarily the developers. See, that pesky audience issue again. Funny how that keeps cropping up.
Why?
even setting 5-6 variables in your constructor takes 30 seconds. If i have any more than 4 ill usually do somethign like this public function __construct(array $config = array()) { $defaults = array( 'path' =&gt; Libraries::get(true, 'resources') . '/tmp/logs', 'timestamp' =&gt; 'Y-m-d H:i:s', 'file' =&gt; function($data, $config) { return "{$data['priority']}.log"; }, 'format' =&gt; "{:timestamp} {:message}\n" ); $this-&gt;config = $config + $defaults; }
/u/mardix came out and [said](http://www.reddit.com/r/PHP/comments/1n8var/rfc_automatic_property_initialization/ccggh7f) more-or-less what I was implying... it's _easy_ for me and you and the rest of us that keep up-to-date with RFC's and language changes on a level where we're debating RFC's that haven't even been voted on yet. However... how discoverable/similar to other languages is the demonstrated construct? In other words, how easy will it be to learn and digest for the other 99% of the PHP community that excludes those of us here?
Not sure how initialization lists are related here. The RFC is about saving some duplication, which is not really what C++ initializer lists are about. Directly translating the C++ syntax to PHP would give you one of the following: public function __construct($x, $y) : $x($x), $y($y) {} public function __construct($x, $y) : $this-&gt;x($x), $this-&gt;y($y) {} Which about the same amount of duplication as directly assigning the properties in the constructor. C++ initializer lists have a very specific purpose, namely they allow you to initialize constant members, references, members without default ctors and base classes. None of that is relevant in PHP, so I don't really see the connection.
The same thing that happens here, presumably: public function __construct(&amp;...$x) { $this-&gt;x = $x; }
I don't think it'll be hard. `$this-&gt;x` is easy to grasp. `...$this` perhaps a bit harder, but people will quickly find out what it means. If you know both, the meaning of the combination would be obvious.
 function setProperty($property){ $this-&gt;property = $property; } becomes function setProperty($this-&gt;property); If the whole point of this RFC is to remove some boilerplate, you might as well remove it everywhere.
The proposed syntax in itself is fine, and I'm not suggesting we borrow syntax from C++. My point is that a bunch of `$this-&gt;` inside the arguments list looks ugly. Especially when combined with standard and variadic arguments. public function __construct($x, $this-&gt;y, $this-&gt;z = "foo", ...$params) The proposed alternate syntax looks nicer, but I have some reservations with that too. &gt; None of that is relevant in PHP, so I don't really see the connection. Both of these examples, the first in C++ and the second in PHP, accomplish the same thing. class Baz { private: std::string foo; public: Baz(std::string f) : foo(f) {} }; class Baz { private $foo; public function __construct($this-&gt;foo) {} } Both could have just as easy been written this way. class Baz { private: std::string foo; public: Baz(std::string f) { this-&gt;foo = f; } }; class Baz { private $foo; public function __construct($foo) { $this-&gt;foo = $foo; } } While not specifically mentioned in the RFC, I would assume that like C++, the properties are being initialized before the constructor is called. So I wouldn't go so far as to say there's no connection. They both share a common purpose, even if the PHP feature lacks some of the purpose of C++ initializer lists.
I picked up this format from a guy I used to work with and love it: $query = &lt;&lt;&lt;EOSQL SELECT u.email, oi.data FROM order o INNER JOIN user u ON o.owner = u.user INNER JOIN info oi ON o.order = oi.order WHERE u.email &lt;&gt; '' AND o.payment_state = 'payment_confirmed' GROUP BY u.email ORDER BY o.order DESC LIMIT 10"; EOSQL; Main SQL keywords on their own line with the space after them lined up. It makes it really to see what's going on. Edit: in case he's reading /r/PHP, we still call this "Drew-style SQL"
A class troll.
Yeah - debugging is an issue with these. Not so much for CoffeeScript because of source maps. I guess if the generated PHP is really clear/close to the Flatwhite syntax then it might be less of a problem; but still there...
I would easily add this to a list of "do not ever do" items at my works coding style document 
Wow. Facebook is really pushing their version php forward. Too bad some of these new Hack features aren't / can't be committed back to php. I really like function return types, closures, generics and their strict style in general.
I wonder how many employees at Facebook have reinvented PHP in some or other way by now. If only all this effort went with public consensus and discussion instead of engineers implementing their own vision of what PHP should be on their own every time, well, that'd be great.
Sorry, but this sort of "query builder" approach is **not** the point of an ORM. The point of something like eloquent is to be able to do something like this: $orders = Order::paymentMade()-&gt;user-&gt;hasEmail()-&gt;orderBy('order')-&gt;take(10)-&gt;get(); I'm not hugely experienced with Eloquent so my syntax might be wrong, but I do know that what you've done with DB::table() is **not** the point of an ORM, but a crutch for edge cases. The point of an ORM is to pre-declare relationships and have them managed internally, while returning the objects in a usable and useful state.
Yeah, if they want to be a fork that end it up becoming the master (as hinted on irc), it sure needs some control and direction. If it doesn't have that, i'd rather stick with what we have now anyway.
dreamweaver
I'm going to get downvoted for this, but fuck it. This thread is a fucking horror show. I can't believe all of the obscure and bizarre ways people try to find in order to write a fucking string. It's SQL for christ sake. There are so many "clever" solutions people have, bizarrely contrived confusions that people say are "more readable" or fix some non-issue. There are various ways to write this particular string, and that's fine. But seriously... it's just a fucking text string.
I store it as Markdown text and parse on display. If you're worried about processing, you could always cache the output as HTML and expire it on change. Storing a Markdown and HTML version sounds like it would be more trouble than it's worth. 
Pretty much. Unless you know you're using an INNER JOIN or OUTER JOIN and then you just indent 10 spaces. (**Not tabs**! Even if you use tabs, this is alignment and should be indented with spaces from the tabs used for $query!)
Of course, I was just restructuring his query in Fluent. 
I'm now convinced that /u/nikic is some kind of freaky, code-generating robot. I also like this sugar (but only the `$this-&gt;` variant, and only for ctors).
Honestly, the only thing that truly matters if consistency. While I like this article, I think it is just arguing over rules that we will never all agree upon. The only person to whom your naming convention matters is you and your team of coders; as long as they are followed and make even little bit of sense. Everything else is just perspective and preference. Lets face it, EVERYONE thinks that their rules are the best rules.
I don't see why they shouldn't? They are implementing features they want to use in their own parser. They're actively trying to give back features as often as possible, but what they want is often different to what the core team want. If they want to write code for them on their servers with their syntax and their features then they should crack on. :)
Well, I'll probably go ahead and learn about caching then, because I'm sure it's worth learning. Realistically though, should I be worried about processing?
Probably not. Lots of factors though, host,load, page complexity. Just to be clear, I'm talking about file caching.
I started messing with dart not too long ago. And it is pretty nice to be able to make constructors that way.
They should really have their own version of Phalcon by now instead of beating around the bush.
Okay, good to know. Hey, thank you!
mmm, strict type hinting.
&gt; you just need to learn how not to do derpy things This is a big problem among php "devs."
A lot of "syntactic sugar" comments here suggesting that this enhancement could add a bit of sweetness to the language. Too much sugar makes you fat. I'd like to know what pushing off any work directly to the input stage of a method and skipping the method body itself accomplishes. Granted some languages have method decorators or attributes, and even parameter attributes, but this idea seems to go beyond that simply because PHP doesn't even have any support for attributes to begin with at all.
Well they haven't made any big change in language specification. I don't think community would reject the addition of type support and additional features that came along with it, for example people are wanting scalar type hinting for a long time. Some features are already implemented in mainstream PHP e.g generator, traits. But you can't say that for sure if it were another dynamic language. For example imagine what will be reaction of ruby community when they see type support implemented in the language :) I also think that if Facebook was written in ruby they would strip the feature of modifying object properties anywhere which Rails is heavily dependent on.
I like it. But you could always start the query on a new, single indented line. 
I didn't read absolutely everything but don't see bottlenecks mentioned. Even in cases where you cannot use a cache to avoid executing a framework request, it is highly likely that the framework will **not** be the performance bottleneck. That is to say, executing even a slow framework is trivial when compared to disk i/o or a db connection and loads of queries. Performance metrics on frameworks are pretty much meaningless. You should choose the framework that best fits your development flow and enables easiest coding and maintenance.
If they get some of the major frameworks working I bet a lot more will start looking more seriously at this. Even if (when) it starts heading in a different direction than PHP and becomes more of a separate language. I hope they implement better UTF-8 support than PHP. 
&gt;If you must write unit tests because otherwise you'd have to test each part of your software all over every time you change something, you're doing something horribly wrong. You don't have to test your software, sure. But you would want to do so. And if there's some tool that allows me to test every bit of it in mere seconds - thank you, yes, I'll take that! On the other hand, of course, you might just be the one exceptional programming talent who writes bugfree software from scratch and never forgets about a dependency or at least has every bit of code documented so well that neither you nor your successor needs to ever worry about a thing. There could be that. Other than that you'll really want to have everything tested. Even if it's only to have a way of proof that you didn't break something. But I guess, you just don't break your code, cause, well - you just don't do that, right? &gt;Yes and the time it usually takes to fix one of these bugs is *minimal*. If not you re-factor that part of the code. Did you break something else while re-factoring? Well then, I'd say your code is starting to look like spaghetti at this point and you'll need to re-think some of the main components and/or architecture before it gets worse. Do you have any idea of what the architecture is in the first place? Maybe that's the problem. I'd like to think anyway that my code quality has improved from when I first started programming. &gt;Yes it's because I forgot to correctly sanitize the user input, not because my unit test was missing. How vague are the problems in your software that the user cannot even describe them, at which point or on what screen it happened, a log cannot be retrieved, and you cannot ask the proper questions to have the issue described in enough detail? So you're basically telling me, you live in a programmer's utopia where every piece of code is perfectly structured, users report errors with full-blown reports and you are the only one working on your code for which you had loads of to time to conceptualize and where dependencies never change, yadda, yadda? Can I come too? &gt;You could have easily clicked on my nickname to find that out. What qualifies as mission-critical software? You mean all software, where the developers are trying to earn paychecks and raises to support their families and quality of living? The mission is you my friend. I'm sorry, but no, that's not the mission. There are programmers who earn their paycheck by writing awe-inspiringly bad code for a living by the dozen. These people are not ill-intended, oh no. They fail because they either don't know it better cause nobody told them or because they just are too confident in their skills and just don't test their code properly or because their only mission is to earn their paycheck. So, no, earning your paycheck is not the mission. To clear things up, one would call software "mission critical" when the correct functioning of it is critical to a mission. That mission could be as silly as getting your news to your audience or as important as providing life-support to a patient through a machine. I really, really hope, you never get to program the latter kind of software with that attitude towards your job. &gt;Please do not let your ignorance be an argument against educating yourself. Just because you don't understand it, doesn't mean it's bad. I'll just leave that right there then, I guess.
Apparently more information on Hack will be available in the coming weeks according to people in #hhvm on freenode.
you accidentally a conjugation.
Don't put SQL in your PHP scripts. Instead, put each script in a separate file and load them into PREPARE'd forms with an update/migration script; even something simple like this: foreach(glob("s/*.sql") as $s) { $n=basename($s,".sql"); $a=mysqli_real_escape_string($x, file_get_contents($s)); mysqli_query($x, "PREPARE $n FROM '$a';"); } You can then use a query function that creates the EXECUTE statements you need; mine lets me call it like this: $a = db("get_comments_for_post", $postid); Benefits: 1. More security: Your web user can then be GRANT'd EXECUTE access, which allows it to only do operations you've already allowed. 2. More security: You're immune to injection attacks 3. More security: You can even make "login" set the `@webuser` variable to bury permission-checking in all your SQL statements- makes a great belt-and-suspenders approach to app security. 4. Cleaner code: All your SQL is in separate files, and database-calls are clearly marked. 5. Performance: My db() can be configured to preload a bunch of results in a single SQL call so you have very low latency throughout your program. One SQL statement per page load, without any weird contortions. 6. Performance: You can modify db() to instrument queries using the template-name instead of the query. This makes tracking (and identifying) performance problems easy. 
Which also has been proposed for PHP a la C# : [Property Accessors Syntax](https://wiki.php.net/rfc/propertygetsetsyntax-v1.2)
That's the cons if people are using the technique naively. In my usage, all the SQLs are cached in memory (using APC) and the SQLs are matched one-on-one with the controller (when using MVC framework).
Then say that, not &gt; I thought this was a neat place to show off what using a good ORM like Eloquent for Laravel can look like That's **not Eloquent for Laravel**..
FYI - closures have existed since PHP 5.3 and generics since 5.4.
Apologies to OP and other posters, I got carried away.
I always use https://code.google.com/p/wkhtmltopdf/ for generating ready-to-print PDFs. What could be easier than just writing some HTML, styling it with CSS, and rendering it with server-side webkit? Tweak the design right in your browser and then save the HTML to a temp file, turn it into a pdf with wkhtmltopdf, and dump that PDF out or copy it to wherever you need. I recommend using their static binaries as it can be tricky to get the best rendering quality out of it when compiling yourself. Another potential gotcha is that any CSS must be embedded in the html or linked in with an absolute URL. Print media queries and CSS attributes will be used just as if you had used the print feature in a webkit browser.
 $squareOfTwo = (function ($x) { return $x * $x; })(2); The anonymous function is defined and called inline. In contrast to: $square = function ($x) { return $x*$x; }; $squareOfTwo = $square(2);
Here is a flow chart Composer/PEAR/PECL -&gt; Ruby Gems &amp; Bundler PHPUnit -&gt; Riot/Minitest/Test::Unit/RSpec &lt;Your Framework&gt; -&gt; Ruby on Rails
Correct, I should have said Fluent not Eloquent. However all of the different elements that make up that query are useful when using Eloquent to query your different Models, whether you use them directly in queries or as part of your relations within the model.
a small typo in one of the article titles: &gt;PHP 5.**4**.4 Released
Have to say I was disappointed that the Codecademy track didn't touch on MySQL, given that's what a lot of people would want to do with PHP. This is handy: www.phptherightway.com
Yeah I kept waiting for it to appear.. should have read ahead and realised it didn't cover it. I shall cast my eye across this though, cheers!
Hmm, seems interesting. I will watch it next week :)
what for?
link?
Go on...?
It's stuff like this that makes it easy to make fun of PHP...
I wonder why they needed to expose the function?
Of course it is, it's binary, not JSON.
Being 'binary' only guarantees that it'll take less space to store, but as for the actual speed that depends on the implementation and usage, e.g. if you were to parse BSON client-side via Javascript that'd be definitively slower than the native JSON.parse().
It looks like it is part of some MongoDB extension; I heard mongo uses bson internally, so I suppose you can somehow extract raw bson with the extension and hence the functions. Just a guess though, I never used mongodb or the extension.
http://www.reddit.com/r/PHP/comments/1n47wp/benchmarking_bson_json_and_native_serializing_in/
Using *this* implementation of BSON is probably a mistake, though. Poor documentation and seems to be only for internal use.
Why is it a mistake? If you're using the native MongoDB driver and you want to test the data size (or whatever else) before the data is entered into the MongoDB store, why not use this? I'd argue that using the SAME implementation is more valuable as it predicts the same behavior as the driver.
This sounds like a sound bit of advice, thank you.
&gt;A little offtopic but, will I need to login on FB to download their PHP fork? Don't be silly. That would be redundant, they already know who you are. ;) 
Great info in this article, once you get past the bit about Drupal being more of a framework than a CMS. It's a content management framework, and its very opinionated. If it fits your use case, great. Otherwise, you'll be swimming against it. Too many times, Drupal devs want to use it when other tools are better fits, like WordPress for a simple blog, or custom built apps when you need to iterate and refine. Edit: autocorrect
Use [Parameterized Queries](http://www.php.net/manual/en/pdostatement.bindvalue.php) from the start. Data should **never** be concatenated into a database query string. 
I usually recommend against using WordPress for just a "simple blog," but that's because projects like that tend to grow over time. When you're used to using Drupal for most projects, setting up a blog using Views and other common modules is very easy, and it avoids future problems where we want to add a new feature or expand the site in a way that would be easy with Drupal but not with a smaller, less flexible platform. That said, this works for us because of the types of projects and clients we have. I'm sure plenty of other situations would not be able to use this approach.
Firstly, don't use the mysql_* family of functions. They're deprecated, and you should be using PDO or the mqsqli_* family. Secondly, you're concatenating user input directly into your SQL query, which is a massive security hole.
Interesting read. This mirrors my own experiences of making dozens of modules modifying the workflow of other modules, leading to "hook hell". Another issue I have faced is not knowing where core ends and where custom modules begin. Having 50+ modules on a site isn't uncommon and they all hook into the same admin dialogues. Educating new Drupal developers on this takes forever. Unlike RobbStart in the comments I **would** recommend Wordpress for simple blogs, purely because it has a vastly superior user interface out of the box, which many people feel comfortable with and enjoy to use.
To expand on the regular reply. You need to do something like this prior to trying anything else. This will prevent sql injection: $searchterm = mysqli_real_escape_string($_GET['searchterm']); 
I believe the difference is that array_udiff_assoc uses a user-defined function to compare the values and tests keys for equality, while array_diff_uassoc checks values for equality and uses a user-defined function to compare keys. In both cases, the returned array is the set of distinct key-value pairs present is array 1 but not in an of the other arguments.
Make sure the table in the database has a full text index setup. The php and query maybe fine but without the proper index the match() against() may fail. Best of luck and let us know what happens.
Here is a quick demo of the difference between the two functions: https://gist.github.com/jmc734/6749235
Thank you! Ill see if I can wrap my head around that. 
For the final project in my PHP class, I decided to create a blog system from scratch. Does that count as a simple blog?
Yeah, I'm aware. That is why I put "wat".
@yuriyb Please reconsider the fixed sidebar on your blog, as this isn't viewable on 800x600 screens. This is easily tested.
I think you'll find the correct answer is ALWAYS! (JK, Sorry couldn't help myself)
My thoughts exactly.
How can you tell he's using $_POST??? Surely we need to see the &lt;form&gt; tags to decide that!
Why would you not *compress* them and unpack after transferring the zip-file? Especially when dealing with many small files, it's more trouble than it's worth. This would save you a lot of time and errors.
Keeping the connection open would most likely help, and zipping the files, and then unzipping them afterwards would be way faster, if you have a way to do it.
What Nod32 said. And if that's not possible then take a look at the FTP server logs and see what happens there. 
Yeah, basically the syntax actively discourages people from doing parameter validation. I don't like it at all. Syntactic candy shouldn't encourage bad programming. It's not a problem in need of solving--even in regards to tedium. When writing constructors is tiresome, you're probably creating too many classes. 
The five `u` variants: * array_diff_uassoc - compare keys with custom comparison functions and values with default comparison function * array_diff_ukey - compare keys with custom comparison function, don't compare values * array_udiff - compare values with custom comparison function, don't compare keys * array_udiff_assoc - compare values with custom comparison function and keys with default comparison function * array_udiff_uassoc - compare both keys and values with a custom comparison function Same applies to `array_intersect`.
Without massive load on the server it really should not be a problem, but try it out; see how much difference it makes. Do not prematurely optimize code.
Hardcore Drupal dev here. Drupal is not right for: * Long running processes - try node.js or Go instead. * When you need very high performance. Unless you are prepared to deep-dive on caching. This is most important if you need high performance for logged-in users. * When you have a highly dynamic UI; at its core Drupal stores some content and regurgitates it in page-sized units. You can have smaller units, but you have to know what you are doing, and you don't get a lot of help at the frontend. * If you don't need, or don't enjoy working with a framework, or if the Drupal framework doesn't include the basic functionality you need. * If you favour polished UI over functionality. Drupal *can* look great, but it can be a lot of work to get there. 
Output $searchterm and check that it's what you expect it to be.
Do you prefer any cms's?
Here is a readability tip: **stop aliasing every table name.** The aliasing should be used to make code less ambiguous instead of obfuscation.
Well, you're going to need AJAX to make a request to PHP unless you want your security to be absolutely laughable. Then to change the layout of the logged in page, you're going to need to either use a lot of Javascript (bad), frames (worse - and it's sort of a refresh anyway) or more AJAX (bad for SEO unless you make it gracefully degrading). All in all, it's not something you do in 5 minutes - or have explained to you in 5 minutes. For most people that refresh is by far the best solution.
1. Switch to SFTP over SSH if at all possible 2. Compress the files into a single file then send. With FTP, and it also sounds like you're not encrypting any of the files, everything you send is readable to anybody you can pick it up. Your username and password are sent in plain text and the files you're sending sounds like they may be easily usable to whoever can pick it up. The transfer process is a bit nicer with SFTP over SSH as well. 
He doesn't even need to worry about unzipping them. Just zip them, upload them. It should be generic enough that whoever is on the other end can unzip the files themselves.
It's early, so pardon me if I'm wrong in this, but are you parsing the JSON in your JavaScript code before trying to use it? I assume that in function tree(nodes), nodes is the JSON echo'd by the PHP script right? Try adding something like var nodeById = {}; nodes = JSON.parse(nodes); 
You need to give us a bit more info than that, as it's not clear what you're asking. "Re-rig" which code? Which part of the process isn't working? Example of your json output?
thnx I updated my post hope it makes more sense.
Thanks I updated my post hope it makes more sense now. Also including my json output.
The issue in this case isn't the *width* but the *height*, and please consider accessibility.
Are you asking how to access the json from the js script? If that's the case you need to do an ajax call.
Ah, I see, I think I get what you're trying to do now. Is the PHP code that's echoing that JSON output on the same page that you're trying to parse it, or are you trying to do this via AJAX?
This guy kind of has it right. Kind of. Saying you will either need to use Javascript or AJAX to change the elements on the page. AJAX is javascript in my book, and you probably wouldn't need to send a request to a backend script to update the interface. You should use something like Jquery's .get() or .post() (other frameworks are available if you don't like jquery) to do the ajax bit of sending the request to a PHP script which will verify the data (check it against your user table in db) then set up the users session to effectively log them in. Then you will need to use Javascript / Jquery to switch out all of the elements you had previously block as the user wasn't logged in. Best to start by making it work without the javascript, then garnish it with the slickness.
At the highest level, I'm going to assume you're using PHP sessions for your authentication, and that you intend to store the session token in a cookie. If that's all the case, then an AJAX call with the login data will work fine--you can totally set a browser cookie with an AJAX response, provided the domain for the page and for the AJAX endpoint are the same. If you need to re-render the page with the new content after having logged in, then I question your desire to do a refreshless login in the first place.
In my experience, project estimates are more accurate with mvc frameworks. I've seen some drupal projects end up at 200% budget because an add-on needed to be re-written, and there wasn't time in the proposal for that
When you use AJAX for login you usually just switch the "login" link with account management/profile link along with a logout link, I don't see how it affects SEO at all. 
I'll update again I guess I'm not wording this correctly.
updated my post again, hope it makes sense this time. This is the big problem with learning new things, it's not necessarily the not knowing what I'm doing (which I don't) but more not knowing how to explain it properly so I can find the solution in google.
I want it all to be in the same page ideally. so before it echo's the JSON convert it from flat into a tree.
&gt; bad for SEO User-dependent content (which appears/changes after login) is for users, not for google bot ;)
This is where it's confusing. SQL refers to it as hierarchy. for the sake of php/javascript it's referred to as a tree. I'll keep digging and thanks for the link :)
Unless it's a single-page web app, there'll always be a refresh. And for single-page web apps there's usually still a virtual refresh anyway.
Sure, that's smart. 
If you aren't already, consider using a library of some kind. A single persistent connection is better, of course. You should still trap any errors and retry as needed though. I don't have any direct experience with FTP libraries but this one looks decent. https://github.com/rjkip/ftp-php
For additional info ... Wikipedia: [Nested Set Model](http://en.wikipedia.org/wiki/Nested_set_model) :)
I sense... sarcasm
1. Use SFTP 2. Compress all files into one zip/tar file 3. Optionally, in your script, SSH into the server, unzip the uploaded file
Drupal: not even once. What a convoluted mess theyve created with that heap of spaghetti. The semantics are the worst. Even navigating the ui is a mess. Taxonomies? Fuck you. Let's abstract the abstraction layer again, shall we? "But let's call it something stupid and 'big wordy' that way it will sound like we know what we're doing!"
wish there was a vim plug in that had this functionality 
It really pisses me off that this one got voted down. I spend entirely too much time writing getters and setters and having to do $object-&gt;getAttribute () and $object-&gt;setAttribute ($value) everywhere is fucking obnoxious. Being able to do things like $object-&gt;attribute without exposing my class to bad inputs (because there's no such thing as a read-only member) or resorting to __get () and __set () (which are slow, break IDE completion, and fast turn into giant unmaintainable WTFs if you use it to filter lots of variables) would be a godsend. This and loading arbitrary data (JSON, CSV, etc) into model classes are probably the two most tedious things I do in PHP.
You do not want to set a session cookie with Javascript (or with a XmlHttpResponse). Why not? You want to have HttpOnly enabled for your session cookies, and you can't do that with Javascript or an XmlHttpResponse. HttpOnly is a cookie flag that prevents it from being read or written by Javascript, thus preventing session hijacking using XSS. [Moar info.](https://www.owasp.org/index.php/HttpOnly)
thank you then :) Alas it's the pessimist in me. 
the database is already structured for hierarcy and I get get the results, the problem is it doesn't display it in a tree function to be easily consumed by d3js :( so essentially I want to take my flat mssql query and then put it into a tree chart. problem is, mssql queries don't have the same syntax at all.
This code looks kind of weird: $validate-&gt;field('secret_token') -&gt;rule('filled') //Yes, it supports callbacks -&gt;rule('callback',function($token){ //validate token, return true if valid }) -&gt;throw_on_error("Someone is trying to hack us"); Shouldn't throw_on_error() take an Exception as an argument? I can see wanting to accept a string for the simple case but I also imagine wanting to be able to catch some Exceptions. The way it's set up right now you'd need to do something like this: try { $validate-&gt;valid(); } catch (\Exception $e) { if ("A recoverable error" == $e-&gt;getMessage()) { // recover from the validation error and continue on } else { throw $e; } instead of this: try { $validate-&gt;valid(); } catch (\MyNS\Recoverable $e) { // recover from the validation error and continue on }
cool I'm going to work with this and give it a shot!
Good idea, I'll think about it. I wanted to go the simplicity route. Actually its super easy to override any behaviour here, just extend the Rule class and add anything you want to it. Maybe I should better make exception type a configuable option? OR make a \PHPixie\Exception\Validate that would be thrown, which is imho the best idea. The other things is that there is no reason to throw recoverable errors, you could just check the errors() array to see if they occured.
ok so: Drupal is the wrong choice if... * You want to process anything. * You want high performance. * You want any kind of dynamic UI. * You want any functionality that Drupal doesn't have. * You want something that looks good.
Man, lots of Drupal haters here... I gotta say, I worked with both Wordpress and Django/Yii, and Drupal certainly has its niche. My guess is that the people who hate Drupal either didn't bother to learn it (and I agree, it's unnecessarily complicated), or used it for the wrong purpose. But I say, best tool for the job. When you have a site that's basically a collection of various kinds of pages (composed of all kinds of fields), and several lists of content of varying complexity, Drupal can't be beat. I use the following rules of thumb: 1. If it could be described as a "web app", rather than a "website" with "content"? Drupal simply won't give you anything there. Use a framework. 2. If it has unique and complex requirements from the content creation interface/workflow, that are simply not the same as Drupal's (as is in this case)? Drupal is very flexible, but still has its own logic. The more you go against it, the less it's worth it. Use a framework. 3. It's a blog? For the love of God, use Wordpress. Drupal could be used to build a blog, but why would you bother? Other people mentioned performance, and it's true, Drupal is a beast. But it's not as impossible as it sounds. For static sites (that is, without user management beyond the admin), just use Boost and it works like magic. For sites with users, you have a host of cache modules. Of course, at some point, you'd rather go with a framework that gives you fine-grained control over caching, but for many sites, this moment simply never comes. Of all the sites I've built, I have only one or two sites where it's a problem, and both violate my aforementioned rules of thumb.
Earlier I said that I like this idea but with further thoughts, one thing that I will miss with it, it's the fact that I'm going to loose the context of the query. In the state of the actual application, the context is quite important to quickly fix a bug. Or at least it's what I'm feeling.
Generally agreed, but two notes: * The current version of Drupal works with *entity*-sized units. Older Drupals work on *node*-sized unites. And an "entity" (as well as a "node", if you use the CCK module) is simply a collection of fields, quite close to the "model" in the MVC paradigm. It doesn't have to be a page at all. * The Drupal 7 UI is quite polished compared to 99% of home-brewed content-management UIs I've seen. Only Wordpress is better, IMHO. Drupal 8 is going to be even better, with in-place editing, and a mobile-ready admin UI. The real question here is: do you need a *custom-made* admin UI? If so, then Drupal, and any other CMS, are pretty much useless, since the main thing they give you is their admin UI. Also, I love Drupal, but the "Drupal framework" is a sad joke. It's slowly getting better, now that it's melding with the Symphony framework (kinda like Jeff Goldblum in the Fly... well, at least the beginning) but it's still far more complex and weird than, say, Django, Rails, Laravel etc.
I'm very interested to see if [Ghost](http://ghost.org) will change that. WordPress has it's share of craptacularness and it really seems *old.* This is the era of snappy asynchronous web apps, while WordPress crawls. If Ghost can deliver a fast and modern blogging solution, I just might move my blogs onto it (the ones that don't register new post types, that is). Plus, Markdown.
The reason for wanting to do a refresh less login is because only one thing will be rendered and one thing will be taken away. The login form with disappear, and hi, name will appear on top. 
Something like that shouldn't even be polled.
Chiming in with userx9 here: is there a more flexible CMS that you're thinking of, or do you simply build your sites from scratch (with some framework)? Because in my experience, building content-management interfaces are a boring waste of time, and Drupal, for all its very real flaws, is the most flexible CMS I've seen. Then again, I usually build relatively "normal" sites. What you do might simply not be a good fit for Drupal.
No, that's the thing. Your solutions were fine. You had a string. You were asking for slightly different ways to format or implement that string. But some of the solutions I've seen here are fucking idiotic. They seem to be desperately trying to make things as hard as possible. So many programmers seem desperate to find the "clever" solution so simple problems.
To be fair, it's not 2005 either. You can't simply design for 960 and assume it will look ok for most people. You have all kinds of screens now, from 320x420 phones to super-high-res retina screens. And it's only going to get worse (or better, depending on your pov :).
Wordpress also calls it taxonomies... It's a weird word, but I don't know a better general term for both "categories" and "tags". If anything, I have more of an issue with "nodes" (nothing to do with graph theory nodes) or "views" (*not* the MVC views, but closer to the Controller). 
Ah ok, I was just wondering if there are better solutions. I found a few small things that will help me and the team to make simpler for us to understand a query. And like you there are some, and I don't like critic, but very exotic way to write queries :-)
What do you mean by "context"?
That counts as excellent experience, and something every student should be doing. I must have gone through a dozen custom-written (ie. from the index.php up) CMS' prior to touching Drupal &amp; Wordpress for the first time, and that experience was *very* helpful.
Educated guess based on the way inputs are dominantly used, the sophistication of the code, description of the issue, failure to return results, and no mention of common troubleshooting methods like var_dumps and confirming the expected results of the query. I'm sure he could be using something more advanced like AJAX but it seems more likely a simple beginner's mistake to me. I had plenty of those myself.
good idea =) I'll add it as soon as I have some more free time =)
Rsync is what you need. 
&gt; @yuriyb Please reconsider the fixed sidebar on your blog, as this isn't viewable on 800x600 screens. This is easily tested. Good catch. I did setup basic responsive functionality from the get-go, but have to admit, only tested with horizontal resizing, as my browser is never smaller than the full-height of the monitor. Reason number 928 why I prefer backend development. :) Will address this! // edit - added basic vertical responsiveness (sidebar will now be displayed at the top)
You can always try Netbeans - it's free and it really has the same features. There's lots of plugins for integration with a lot of services, has support for all versioning systems (svn, hg, git), PHP 5.5 syntax and it worked pretty good for me for years.
Holy cow, I might switch from ST3. I really like speed but those features are tempting!
If some Drupal devs show up, I have some questions. Chiefly, is configuration still stored in the database? Can you develop offline and then push changes, including new modules and their configuration live to an already running site? Because if not, that's a *huge* reason not to use Drupal, whatever its other strengths may be. One of my friends mentioned Drush unfortunately after the last time I had to do anything in Drupal; it'd just come out and might address this issue. It might also not be an issue at all, hence my question :)
By context I mean that I need to know what is the code before and after the query. Like that I can understand what was in the mind of the developer and what we wanted to reach with it. But, if I had to make a new application without Framework, I will definitely go for a solution you propose
Where is the documentation?!
I love this IDE but cannot understand how its debugger works. I cannot make it behave like Visual Studio where when a page open and a response it sent back (to another page) i want it to continue the debugging session. Any help would be greatly appreciated!
Good points!
Uh, no. Nowhere near the same features.
I used Netbeans for like 2 years and it really was dead slow. If PhpStorm is like that I don't think it's worth it. I'll test when 7 is finally released.
AJAX is performed using JavaScript. JavaScript is not AJAX. Many people see AJAX as just "fancy stuff on the page using JavaScript", but it's not. AJAX specifically involves interaction with the server without a page refresh.
Does anyone know if/how Phpstorm works with their TeamCity source management system?
I don't understand what you mean by you open a page and a response is sent back to another page, could you clarify?
Hmm, that's how it works for me... Once I start a session, I can navigate around the site and any breakpoints I trip over will halt execution and bring PHPStorm to the forefront. This should be the default behavior. If not for you, maybe file a ticket with JetBrains?
PHPStorm was much faster than NetBeans, at least back when I compared them.
Both of those products should be a lot faster now. I now in particular Netbeans' file indexing functionality was a real resource hog which been cleaned up some time ago.
You could just buy it now, it's worth it, or you could make do with netbeans for a few months and hope jetbrains will offer a discount around cristmas which might save you around 30-40 $. Anyway, once you're hooked you'll probably keep upgrading at a yearly fee. That's what happened to me.
Do you want anyone else to show up or in your example just number 6?
No thats just an example, Im going to add more places for about 15 to 20 people to show up on a map at a time. Im just been testing it with two accounts in it at once. The 6 was just an example. So even If my user ID was 23 it would only show a user ID thats higher then me if they are on. But If the user ID is below mine they don't show up. I feel like its how I am calling my database. But Im not entirely sure. 
Line 20. You close php and open with an and in between. 
there's some vids on http://www.youtube.com/user/JetBrainsTV some things looks overcomplicated but I guess you get used to it after a few weeks
Well, that's ... quite a mess... As you're mixing php with html with SQL with javascript willynilly, it's hard to make head or tail of what you're trying to do. If I had to hazard a guess, I'd say look at `$whereclause`. I have no idea what's in it, because it's not set anywhere in the code. Same for $user. Presumably set in your include? Before continuing with this, I'd highly recommend re-organizing your code to make it more readable and manageable. Separate out all your view logic to begin with. Put all the html into a sepatate template file. Create a separate controller that can process input, create the values needed for the template, then render the template. That will be a start. Also since you already have jquery loaded, why not use its methods for those ajax calls instead of rolling your own? Also do you really need separate php scripts for moveup.php, movedown.php, etc, vs just one script called with different direction parameters? You could probably consolidate all those js functions into one move function with direction parameters as well. That would simplify things mightily. 
Could you post your code to pastebin so I can reference line numbers? It will make it easier. Do you have multiple zones for users? You have a couple references in your querys to uZone = 1. Also you have a $whereclause variable set in the second query, but I don't see where that is set anywhere.
Didn't realize the and in their but that was just showing users current cords. I deleted them off and still no change.
I would assume team city would work in their tasks manager by default. 
I was told about consolidating the jquery. I know nothing about jquery at all So I set it up that way just to try and get it all to work then go from there. I took off the $whereclause, I was using it in the attack page and forgot to take it off when I moved it over to create this one. 
http://pastebin.com/bkcX7fmr
Whenever you write code that is so tangled that you can't even figure out its logic yourself when bug hunting - nevermind anyone else - that's a sure sign that it's time to stop and redesign from first principles. This will save you a lot of pain in the long run. 
Phpstorm is faster.
This module has the weirdest API... why are all the operations passed as strings to a single method? Why this: //Password is required, must have at least 8 characters $validate-&gt;field('password') -&gt;rule('filled') -&gt;rule('min_length', 8); instead of this: //Password is required, must have at least 8 characters $validate-&gt;field('password') -&gt;filled(); -&gt;minLength(8); 
What might not be a good fit for Drupal? Anything. Drupal is so touch and go I don't want to deal with it anymore. I do have my own set of php scripts to handle the usual registration, login, and logout BS, Drupal to me just gets in the way. I think it's going to die as a platform within the next two years. I do write code for completely custom back-end systems, but when I'm doing the full-stack so to speak Drupal is the last system I'd use.
The new version v0.8.8 is now released. Enjoy it, cheer:)
Thank you! I'll read that carefully.
This guy is right. You can't ignore his advice, because even if he was to solve your database problem, another one will take its place, and then another. You must to reorganize your code. It's not just about getting it working, it's about making it maintainable as it grows.
What if you have included some includes you wish to debug within the same debug session? Do you need to set breakpoints for them as well? I wish maybe you can outline the major steps you take to make this work. Thank you!
See the docs here: http://www.jetbrains.com/phpstorm/webhelp/debugging-with-a-php-web-application-debug-configuration.html I can't describe it any better than that. If you're having trouble getting your actual app to work, try making a new project with a single php file, set you breakpoints in that somewhere, and see if a simplified project works any better.
Be sure to set a break point on actual code that does something, and not on something like a comment or class/function definition.
Thanks for the effort. My suggestion: Add some unit tests and some comments to the code. One last and honest question, what advantages offers this framework in comparison with the existing ones?
Light usually means it doesn't have all the nice features I want. 
I finally managed to convert two of my collegues to PhpStorm from Netbeans and they now say that PhpStorm is better than Netbeans. I personally didn't use Netbeans, PhpStorm was my first serious IDE.
By default, configuration and sometimes even code is stored in database and it's very hard to prevent your less experienced teammates from doing this because it's so convenient. There is Features module, which provides hooks for other modules to define their configuration in code, since it's contrib module, not everyone is required to use it... As drush, Features is an after-thought and it shows -- from time to time you'd hit a corner case where it fails. But overall Features and drush made Drupal manageable for me.
You can use `pwd` to get the current location. Assign it to a variable at the beginning of the script and then just `cd` back to it later.
Main reason being that I wanted to separate validation logic from actual implementation of the rules. That's why the Field class doesnt know which rules are available. Of course I could implement this using __call() though
Hear, hear. That is NOT in the documentation and is non-obvious - I spent ages being screwed over by that, and by trying to put a stop on a blank line (which is not even possible - I thought I had set up the debugger wrong, as the controls don't provide any feedback on this at all)
There do share some common and basic features, but I definitely would disagree that they "really have the same features". PhpStorm is far and away more feature rich.
I've never had trouble with adding a new field. I have a decent PDO wrapper and I never write manual `INSERT`/`UPDATE` queries, and all of the non-generic selects are each separated by model, so if a table changes, all of the code concerning it is in one place. &gt; This is a mistaken assumption about ORMs. I don't assume ORMs slow things down, I'm just saying they don't let you optimize queries to your liking. Anyways, thank you for the interesting discussion, let's just leave it at that :)
Given modern hardware, it seems odd that application execution speed would still be a limiting factor? Unless for reasons beyond your control one is still stuck on some single core 2GB RAM machine from the 90s...
Can we please, please, PLEASE finally see the [jumping tabs bug](http://youtrack.jetbrains.com/issue/IDEA-22546) resolved? It's been open since 2009, should be simple to resolve, and is SOOOOOO annoying! It makes it impossible to use spatial relationships to keep track of which file editor tab is where when there is more than one row of tabs open!
I've moved very similar to you from Ultraedit (which is a great text editor), via Eclipse to Aptana Studio to finally PHPStorm. Let me tell you one thing - I AM NEVER EVER GOING BACK!!! And you will take my PHPStorm from me only over my dead body. And even then I might be inclined to come back from the dead to keep you from doing that. It is really THAT good! 
Composer support?
Frankly, I don't see the point. This library doesn't do any abstraction, instead it just presents a way to write the exact same queries with a different syntax. I doesn't accelerate development because in essence you are still writing the same query.
I just been looking at the code for this, and there's 1 bit that I'm not entirely sure why it's there... if(isset($this-&gt;port)&amp;&amp;is_int($this-&gt;port*1)){ I completely understand the isset($this-&gt;port) part, but the second part, the is_int() will not strictly check if port is integer, it will also check if it's a string. meaning, I could pass my port as 'fjdksjf' and it'd return true. In replacement to this check, I would check if ($this-&gt;port &gt; 0) That will perform the casting of $this-&gt;port to an integer, if $this-&gt;port is a number (just in string format), it will convert it to that number, and check it accordingly. If it's not a valid number, it'll compare if 0 &gt; 0 and therefore fail. I'm also not entirely sure why it's minified, since as far as I'm aware, there's no real benefit to this in PHP, and it just makes it more difficult for the end user to see what methods are available within the class (without referring to your online documentation, which is not always possible). Edit: Correct me if I'm wrong about the benefits to minifying PHP)
The way you've named the methods, its not clear what's returning what. Does the rule return the field? Does $condition return a *different* field? What does error return? //The sate field is required... $validate-&gt;field('state') -&gt;rule('filled') -&gt;rule('in', $us_states) //...only if the 'country' field is 'US' -&gt;condition('country') -&gt;rule('filled') -&gt;rule('equals', 'US'); I imagine something like Doctrine's expression builder would be much clearer here. They could extend your expression builder if they like or build their own. IMHO, It would make it simple/clear to chain rules together, while reducing the number of parameters each method needs. Here's a quick, rough example, based on the rules you already provided. Note, I did not required filled_in when another rule already provides the functionality. &lt;?php $v = ... $e = $v-&gt;expr(); // validations may be in groups, so that only one error is displayed per group // notice, on the validator object, only nouns return new objects $v-&gt;group() -&gt;on('username'); // this helps the view associates this error with its display element -&gt;show('Invalid Username') // if you're feeling lazy and want a generic error message -&gt;require($e-&gt;length('username', 8)) -&gt;require($e-&gt;alphanum('username')); // can provide a message directly with the requirements $v-&gt;group() -&gt;on('password') -&gt;require($e-&gt;filled_in('password'), 'Password is required') -&gt;require($e-&gt;same_as('password', 'password_confirm'), 'Passwords did not match'); // it isn't clear in the examples provided if country is required or not // I have added it as a requirement, here $v-&gt;group() -&gt;on('country') -&gt;require($e-&gt;filled_in('country'), 'Country is required'); $v-&gt;group() -&gt;on('state') -&gt;when($e-&gt;eq('country', 'US')) -&gt;require($e-&gt;in('state', $us_states), 'Invalid U.S. state'); $v-&gt;group() -&gt;on('city') -&gt;when($e-&gt;neq('country', 'US')) // or $e-&gt;not($e-&gt;eq('country', 'US')) -&gt;require($e-&gt;filled('city'), 'City is required'); // callbacks aren't anything special // they provide an entire form/validator object to work with, not just one value, // so that it may work with multiple fields, if desired $v-&gt;group() -&gt;on('parent_id') -&gt;show('Parent does not exist') -&gt;require(function($form) use ($parent) { $parent = ... //Get the parent model return $parent-&gt;loaded(); }); // just an extra example, using a custom set of rules // as well as demonstrating nested groups. $phoneRules = ... $phoneGroup = $v-&gt;group() -&gt;on('phone') -&gt;show('Invalid Phone Number') -&gt;require($e-&gt;in('country', ['US', 'CA', UK']), 'Sorry, service not eligible in your country, yet'); $phoneGroup-&gt;group() -&gt;when($e-&gt;country('US')) -&gt;require($phoneRules-&gt;us_number('phone')); $phoneGroup-&gt;group() -&gt;when($e-&gt;country('CA')) -&gt;require($phoneRules-&gt;ca_number('phone')) $phoneGroup-&gt;group() -&gt;when($e-&gt;country('UK')) -&gt;require($phoneRules-&gt;uk_number('phone')); Ultimately, you need to be *really* clear on your chain API on what object returns what, as it can be hard to read if you different methods return different objects. Edit: fix alignment a bit-- 2nd edit fixed up botched phone group example.
To each his own, I guess. I make mostly-static content-managed sites, about 2-3 a month, and for this purpose it works great. It gives me a quick, polished admin UI out of the box (or rather, with my usual set of modules installed ;), as well as lots of SEO/social features, and most importantly, a well as a well-known structure I could always go back to later, without thinking "how the hell did I build this site". If you had the pleasure of working on other people's Wordpress or custom-built-CMS sites, you know that it usually devolves into a horrifying mess. It happens much less with Drupal. Then again, I can't deny it's a huge time investment to learn its crazy architecture (with the views, themes, fields, and so on), that tends to change every major release. And that includes knowing which third-party modules you absolutely *must* install - which is, unfortunately, way too many. If you make a *lot* of Drupal-niche sites, there's an economy of scale there, and I'd say check it out. If you make a few very large sites every now and then, or make lots of non-Drupal-niche sites, it's a waste of time.
SSD, i7, 32GB ram. Think I need an upgrade just to use NetBeans.
Let's see... it gives you a login system; it deals with routing; it has a cache system which is easily employed; it has a database abstraction layer to let you use MySQL, MariaDB, Oracle, SQLServer, Postgres or some key value store and using it properly stops SQL injection attacks; it has a host of add-on integration services; it provides various template engines and allows you to add more; it has a kitchen sink. You can build anything you want that's custom - see the list of modules that are available. I often build out using the framework, independent of the Drupal UI to provide some specific service. The 'you are full of shit' bit comes off as someone who doesn't know what they are talking about, but looking back through your comment history makes me think you forgot to be polite.
Depends on how likely your simple blog is to grow, really. But Drupal+contrib is much trickier, IMO, to update modules and core over time. Plus, with WP you can stick them on an inexpensive WP hosting service and be done. 
"Annihilates" is a strong word, but in this case it is accurate. I've been writing PHP since 3.0, and I have tried everything. Nothing even remotely comes close to PHPStorm. If I had a dollar for every time I plugged a JetBrains product on Reddit, I'd have like 10 bucks.
There are no benefits to minifying PHP.
No not exactly. Processing: there are at least 3 ways of processing things, but each of them chunk the processing... remember it's a web server model, running PHP, so the PHP engine usually has a processing time limit. You can queue items and process them in the background, but each unit of work must be less than the compute time allowed by PHP. This is the same for any PHP system. You can choose to trigger off of a request, or in the background as requests come in, or on cron, but these are all request-triggered because it's a webserver-based system. So if you want a very long-running connection then Drupal is the wrong choice because PHP is the wrong choice. Or a very long processing time (say a scientific computing problem) then the same applies. High performance: No not exactly. Some of the top websites by traffic run on Drupal. But they have spent a lot of time scaling out MySQL, optimising queries, installing and tuning memcache and/or Vanish, ensuring that they have no O(n^2) or similar stupidity in whatever it is they are trying to serve. If you design a site for speed, then it's fine. The commonest problem is sites that deliver personalised content because that involves at least one db hit (cache) and probably many hits to construct the page. Standard Drupal stores most stuff in the database and depends on db caching, but this is not sufficient when load is heavy and you need other caching strategies. Also remember, at the base is PHP, which is a semi-interpreted language. Dynamic UI. No, not exactly. There's lots of help available, and D has ajax built in. It has jquery but it's not as easy as it could be. It's optimised to providing pages of content. If you were building an online kaleidoscope, while the parts would be content, the db layer could help, and the authorisation system, Drupal as a whole would not be a huge benefit. That's what I mean by dynamic. In terms of things like dynamic forms - it's ok. Not awesome compared to what you could do with a custom-coded form, but faster to develop and more likely to be robust for many (most?) coders. Any kind of functionality that Drupal doesn't have. Kind of. But that's the case for anything which doesn't have anything. However, there are 21,000+ modules of 'things', and many problems have been solved before. Something that looks good. No. Drupal can look as good as anything out there. There are lots of examples of that. But in D7 it has a templating system that is lagging the leaders. It's incredibly flexible, but is more developer-facing than designer-facing imo. That's changing in D8. There *are* more pre-built Wordpress themes than Drupal themes. However there are a bunch of themes to help you build responsive, mobile-friendly sites.
In this case, "light" means "doesn't have features at all".
Try something that requires pagination. It's for returning lengthy result sets from a database where you only show the first X amount on the page and then the rest continue on the next pages. Build it yourself first, and then go look over at something like codeigniter and see the pre-built pagination class. I'd always say to learn how to do it yourself so you understand it, but then take advantage of a framework to do it more efficiently.
It's definitely a side-effect of my situation. We have a shared hosting account with Rackspace that we use for 90% of our projects, so inexpensive hosting is not a benefit. And since we're already using Drupal for a few dozen other, much larger projects it makes sense to stick with what we know, and the overhead for maintenance and upgrades is not significantly increased by a couple more small, blog-only Drupal sites.
There are some ideas for small programs to build here: http://codekata.pragprog.com/ http://codingdojo.org/cgi-bin/wiki.pl?KataCatalogue This is a list of problems that you can write small programs to solve: http://projecteuler.net/problems A further list of problems used to teach programming techniques: http://www.spoj.com/problems/classical/ 
If you want to visualize it via webpage why not just make it an unordered list via php function? Or perhaps, i misunderstood your 'visualize whats in the db'?
A blog or simple forum would be my recommendations, especially since it'll also teach you about database access in PHP. Don't try and do anything too fancy though. Keep it simple and you'll learn a lot.
Other than (I guess) making it more labour intensive work to modify it.
Continued debugging across multiple pages is the behaviour I see when I'm debugging with PHPstorm. The debugging session continues over many requests until I manually stop debugging. Obviously it's hard to figure out what you're doing wrong, but these are the php.ini settings I use to allow debugging. zend_extension=xdebug.so xdebug.remote_enable=1 xdebug.remote_connect_back=1 xdebug.remote_port=9000 Those settings should: * Work better that trying to set the debugging machines settings manually for a single developer. * May cause problems if multiple developers try to debug the same machine at once. * Are a massive security hole and shouldn't be used on any server that is accessible to the internet. After those are setup, and PHPstorm is configured to start debugging through a "PHP web application" run type, it all just works for me. i.e. I don't specify which page I wish to debug. The debugging session just calls the root url of the webserver, and I then either navigate to the page I wish to debug, or just refresh it if it's already open in another browser tab. About the only obvious thing you may be doing wrong is not hitting 'Run' after doing your debugging. Pretty obviously if you're either hitting stop or leaving the debugger stopped, then PHP won't run.
Well my hat goes off to you for the fine and in depth explanation of all of my anecdotal points. To summarize: The real issues with Drupal are that of any software that runs on PHP and queries a DB. The "soft" issues are if you want to work with it or not.
I don't understand why the remote php unit function can't just use SSH. Does anyone know a way around it?
todo list. lets start simple, add 'buy milk'. to list confirm list contains 'buy milk' add 'buy bread'. confirm list contains 'buy milk', 'buy bread' mark 'buy milk' as done. confirm list contains 'buy milk' marked as done, 'buy bread' confirm list contains '1 of 2 tasks completed'. delete 'buy bread' from list confirm list contains 'buy milk' marked as done confirm list contains '1 of 1 tasks completed'. add 'complete homework' to list --- now you have a working todo list. add support for multiple todo lists.. you will probably want to be using a database by now. --- lets get a little more advanced... mark 'complete homework' as 'started'. confirm list contains 'completed homework' started at (time). mark 'complete homework' as 'completed'. confirm list contains 'task "do homework" completed in (x) hour(s) (x) minute(s)'. ---- now you have a working todo list that supports multiple states for list items. perhaps it is time for you to introduce multiple users, with the ability to share todo lists. once you have multiple users sharing multiple todo lists maybe you should stand back and realise that your little todo list is now the basis for a business taskboard. your next task is to generate a report for the manager and tell them who is completing all the tasks. Bonus points if you can include a sexy graph because nothing turns middle-management on like graphs. oh and don't forget to email a copy as a PDF to Human resources so they can fire the laziest employee. because HR love PDF only slightly less than they like disciplining people. -- the end -- 
You should really learn how to use phpDoc
Believe the current one is phppass : http://www.openwall.com/phpass/ I thought php-login.net was using it. Last I checked UserCake was not. 
Crawl Etsy for programming related keywords. I punched in "PHP" and found this which is pretty cool. http://www.etsy.com/listing/93550714/keep-calm-and-program-on-11x14-tux-the?ref=sr_gallery_8&amp;ga_search_query=php&amp;ga_view_type=gallery&amp;ga_ship_to=US&amp;ga_search_type=all
There's usually lots of free posters at conferences. Plus you might learn a thing or two.
Noted. I have phpDoc installed in the project, and will update once I'm out of work. Thanks for the feedback.
Why deal with authentication urself? Why not just use openid, google, facebook login, twitter, etc. 
This appears to require a separate framework, such as Larval. This is something I don't use and don't fancy implementing, just for a basic login script. 
Thanks for finally replying 6 days later champ. I'm glad we could talk about unit tests - having anything but praise for them is reddit taboo after all (and thanks for affirming that!) I do live in a programmer's utopia where I get to choose the projects that I work on, but we don't need to discuss that... Unit tests give you confidence in your code. But why don't you have confidence in your code? It either sucks or someone else is making it suck. Bad code is to be expected when you're dealing with fresh meat, so in this case it might make sense for the team to unit test. Otherwise, if you're spending 15-35% of your development time writing unit tests on a team of highly skilled developers, you need to take a look at your process and consider working with more *responsible* developers, or take a lead position to keep your team on track according to your goals. Some developers take a highly creative/re-iterative approach to development. They might try and scrap several ideas or methods before settling on a certain one. They might re-write their function two more times once they have a proof of concept prototype, so it's easier to grasp and shape into something nice. Unit tests (or more appropriately, TDD) *will slow you down.* &gt;"Good unit tests reduce bugs. But so does good production code." &gt;"Unit tests are mediocre for anything database-driven, where often the only way to verify correctness is to use production data and verify the results" &gt;"It's a kind of crutch because it reduces the amount of thinking you have to do—or at least codifies the thinking." &gt;"The problem is that the unit tests are written by the same programmer who wrote the function, to the same set of assumptions and with the same level of skill." &gt;"Unit tests only prove that the code works for the specific inputs/outputs that the programmer has already considered. For experienced developers, virtually all bugs occur in the edge cases that aren't covered by unit tests." &gt;"A test is only as good as the person that wrote it." &gt;"For my company, time constraints and "just get it done" attitude are the biggest deterrents for doing unit testing. Also, the places where our systems fail tend to be more at the integration level (services, database accesses, complex queries that require specific data for testing), not the unit level." &gt;"Junior developers have relatively low chances to have such influence, though. Thus, whether a company is a proponent of the unit testing depends on whether they have a senior developer or architect that is an advocate of unit testing." &gt;"If you are writing prototype software, that has an uncertain commercial future, then there is a pay off to be had between having code quickly, now, that works sufficiently well versus having unit tested code in 2 weeks that works better." &gt;"Unit tests do nothing to expose architectural flaws, which are the most expensive ones to actually fix (assuming the requirements are correctly defined)." &gt;"I think unit tests ought to revolve around the complexity of a task, as well as whether they're going to pay off. There's no sense in writing extra code that isn't going to get used." and perhaps the most logical of all quotes... &gt;Having said that, if they help someone write code more efficiently/accurately, then I would not by any means try to steer that person *against* unit testing." * [NO BEST PRACTICES](http://www.satisfice.com/blog/archives/27) (James Bach, professional software tester and teacher) * [I Pity the Fool Who Doesn't Write Unit Tests](http://www.codinghorror.com/blog/2006/07/i-pity-the-fool-who-doesnt-write-unit-tests.html) (Jeff Atwood, read comments for good discussion on unit tests)
There was a double-post on the homepage. I let Chris know and he deleted one of them, so I guess the OP linked to whichever one Chris deleted.
There's some motivational and software based posters etc at http://www.startupvitamins.com
http://www.proprofs.com/quiz-school/story.php?title=pro-developer-survey
It could depend on multiple factors. You can try adding error_reporting(-1); to the top of your script, which is the most verbose debugging output. It could be curl isn't configured properly on the IIS server, or a security setting. Also, /r/phphelp is probably a better place for this.
There are some plugins that could do this, but never seen something so fancy ;)
yep, all fixed now...sorry for the trouble!
Thanks for that - my apologies for not posting directly in the first place 
I added the error_reporting line but it didn't offer anything new. I also have curl installed so unless there is additional configuration necessary for IIS servers I don't think that's a problem. Do you know why type of security setting would need to be changed? Thanks for the link to /r/phphelp i'll ask there too. 
I got it working a minute ago. Total noob mistake...I didn't have all of the columns together in a FullText index. Thanks though! 
Have you checked that $twitter-&gt;setGetfield... is returning something correctly? If what it is returning is not json_decode-able, you'll have this failure. 
I'm not sure how to check what it is returning but the exact same script works on a local MAMP server. 
You could switch: $string = json_decode($twitter-&gt;setGetfield($getfield) -&gt;buildOauth($url, $requestMethod) -&gt;performRequest(),$assoc = TRUE); to: $json_string = $twitter-&gt;setGetfield($getfield) -&gt;buildOauth($url, $requestMethod) -&gt;performRequest(); var_dump($json_string); $string = json_decode($json_string, true); That'd print out what is returned before you are attempting the JSON decode.
That is, however, how a debugger works in nearly every other language.
&gt;Thanks for finally replying 6 days later champ. I'm glad we could talk about unit tests - having anything but praise for them is reddit taboo after all (and thanks for affirming that!) You're welcome, champ! However, don't get too excited, I might just take a little time for the next reply again, also I neither know nor care about reddit's attitude towards unit tests, what I give you is only my personal view on that topic. &gt;&gt;I do live in a programmer's utopia where I get to choose the projects that I work on, but we don't need to discuss that... You are right, we don't. Congrats on that, though. &gt;&gt;Unit tests give you confidence in your code. But why don't you have confidence in your code? It either sucks or someone else is making it suck. Bad code is to be expected when you're dealing with fresh meat, so in this case it might make sense for the team to unit test. Otherwise, if you're spending 15-35% of your development time writing unit tests on a team of highly skilled developers, you need to take a look at your process and consider working with more *responsible* developers, or take a lead position to keep your team on track according to your goals. I think, I covered the issue of confidence and over-confidence in my last reply. Anyhow, on the question of why I would want my code to be covered by tests instead of relying on my or my colleagues' confidence in their skills, the real reason lies within the fact that even the highest skilled programmer tends to make an error once in a while, which can be caught way earlier within a test covered environment. Also, it forces you to consider the possible points of failure, thus aiding the uncovering of edge cases. &gt;&gt;Some developers take a highly creative/re-iterative approach to development. They might try and scrap several ideas or methods before settling on a certain one. They might re-write their function two more times once they have a proof of concept prototype, so it's easier to grasp and shape into something nice. Unit tests (or more appropriately, TDD) *will slow you down.* This is highly correct, but does not serve your cause, since nobody would develop prototypes or proofs-of-concept with TDD. You use testing, when you know what your final goal is, not while evaluating the goal. &gt;&gt;"Unit tests are mediocre for anything database-driven, where often the only way to verify correctness is to use production data and verify the results" While this is true, it does not make unit tests obsolete for the rest of the software. Usually there will be a bit more to a piece of software than reading data from a database, and anything beyond that can be tested. Also tests allow you to find the tripwires of production data faster, since you might don't even have to debug anymore to find the cause of failure. &gt;&gt;"It's a kind of crutch because it reduces the amount of thinking you have to do—or at least codifies the thinking." While it surely is an approach that slows you down, I rather believe the thinking process gets improved by thinking about what you need to test within your software. Also practice makes you better, so the basic tests tend to cost less time over time, leaving you in a test-oriented set of mind, allowing you to test better for edge cases. &gt;&gt;"The problem is that the unit tests are written by the same programmer who wrote the function, to the same set of assumptions and with the same level of skill." Not necessarily. You could do pair programming or introduce a review process or even let one dev write the tests, another one the code. This is true though in most real-life settings, hence the actual need for a review process. &gt;&gt;"Unit tests only prove that the code works for the specific inputs/outputs that the programmer has already considered. For experienced developers, virtually all bugs occur in the edge cases that aren't covered by unit tests." See my comment on the quote before the last. &gt;&gt;"A test is only as good as the person that wrote it." True, while more testing improves your test writing skills. &gt;&gt;"For my company, time constraints and "just get it done" attitude are the biggest deterrents for doing unit testing. Also, the places where our systems fail tend to be more at the integration level (services, database accesses, complex queries that require specific data for testing), not the unit level." To address the two points separately - if your company does that, they clearly have not understood the value of not letting your customers be your beta-testers. On databases, again: Databases can be mocked, also see my earlier reply concerning the easier uncovering of issues with production data. &gt;&gt;"Junior developers have relatively low chances to have such influence, though. Thus, whether a company is a proponent of the unit testing depends on whether they have a senior developer or architect that is an advocate of unit testing." True, but does not help your argument. &gt;&gt;"If you are writing prototype software, that has an uncertain commercial future, then there is a pay off to be had between having code quickly, now, that works sufficiently well versus having unit tested code in 2 weeks that works better." See my earlier comment on prototyping. &gt;&gt;"Unit tests do nothing to expose architectural flaws, which are the most expensive ones to actually fix (assuming the requirements are correctly defined)." Also true, so what? Don't remove one point of failure just because there's another one? &gt;&gt;"I think unit tests ought to revolve around the complexity of a task, as well as whether they're going to pay off. There's no sense in writing extra code that isn't going to get used." Surely true, if you don't use your unit tests in further development cycles. False, if you do. &gt;and perhaps the most logical of all quotes... &gt;&gt;Having said that, if they help someone write code more efficiently/accurately, then I would not by any means try to steer that person *against* unit testing." Can't argue with that. &gt;* [NO BEST PRACTICES](http://www.satisfice.com/blog/archives/27) (James Bach, professional software tester and teacher) * [I Pity the Fool Who Doesn't Write Unit Tests](http://www.codinghorror.com/blog/2006/07/i-pity-the-fool-who-doesnt-write-unit-tests.html) (Jeff Atwood, read comments for good discussion on unit tests) Thanks for the read. However, to maybe settle this dispute, I must say, it seems as if we agree to disagree. Nevertheless I am quite sure that your working conditions are a major contributor to your dismissive attitude towards unit tests and I still stand by my words. Unit tests and TDD in general help in the not-so-utopian world of codependant development, letting you and others having means of continuous proof of stability while developing new features for an already stable product. Have a good day, champ!
A blog or a TODO app is a great way to learn, it will require you to work with a data store, which will most likely be MySQL depending on the environment you're in. Other than that, make sure to look at other peoples code, like at GitHub or some of the big frameworks source files. To end it off, make sure to bookmark www.php.net and learn to use the documentation to look up functions, most of the time there will be a function to do your task. Also try to pick a few functions and make a little program around that function to get a feeling of how it works and what you can do with it.
Not posters, but I made this: http://elephpant.spreadshirt.com/ They're 100% at cost, and I don't make a penny.
Learn SQL and do a project that requires it, or benefits from it. A simple blog/cms style thing is a good choice. It's very common for people to try to skip learning SQL. They end up trying to implement their own database using flat files only to end up needing to do all of the things we use a database for anyways, except doing them badly. The kicker is that SQL is not hard at all. While it can get pretty complicated, the stuff you'll be using for a blog type app(and really most simpler web apps) is incredibly easy to learn and understand. By avoiding learning SQL, you're making your problems harder not easier. One last note, in looking for documentation/tutorials, look for tutorials that use PDO for their database connection. If you see any function beginning with "mysql_" ignore that tutorial completely.
Double clawed hammer 
Ask on /r/cringepics.
The issue is somewhere in here. $string = json_decode($twitter-&gt;setGetfield($getfield) -&gt;buildOauth($url, $requestMethod) -&gt;performRequest(),$assoc = TRUE); This is the issue with doing so many things chained like this. Can be a bit of a bitch to check. I don't really know the twitter api but you need to simplify this down. In one line you're assigning the value to a variable, decoding it, getting the field, authenticating, etc. You need to be able to do all of the above. For a start, I'd remove the json_decode and see what $string is. Or I'd do that in a separate step. $response = $twitter-&gt;setGetfield($getfield)-&gt;buildOauth($url, $requestMethod)-&gt;performRequest(); var_dump($response); if($response){ $responseArray = json_decode($response); } Just probably mention that you've called a variable $string when in fact it can't possibly be.
I think the docs should explain what you mean by "compressing". Are you just re-encoding, leading to a fuzzy image? Or could this be a replacement for timthumb.php?
That's a great suggestion, thanks. For personal satisfaction, it's being compressed using PHP's imagejpeg with the default quality being set to 90%.
Agreed. I whined most mightily in the bug report I filed! Wasted way too much of my time on that... However, overall I still would recommend PhpStorm to anybody - it's a great IDE.
Interesting. I have PhpStorm on a regular HD with 8GB of RAM and an Intel i5, running Mint 14 and Oracle's JVM. Mine runs like lightning. Couldn't say about Netbeans tho as I (obviously) am not using it.
Why?
Uh. Pass.
&gt; Fuck PSR-2.
&gt; Oh, well, I'm moving to Python Well, this thread went downhill quickly.
yea, I'm pretty sure we're all software engineers in here.
I think that Composer and mostly its autoloader could really be part of the core. Problem with PHPUnit is that it is pretty badly written :D I know it works, but still - the code itself is ugly as hell, and still not even using namespaces :D
Not necessarily. You could easily interpret it 'email is NULL' as meaning "we don't know what the user's e-mail is", 'email is a zero-length string' as meaning "we know the user does not have an e-mail address", and 'email is one-or-more char in length" as "we know the user's e-mail address". Perhaps clearer if you think about "first_name"/"middle_name"/"last_name" columns -- what does a NULL middle_name mean? User does not have a middle name, or we didn't bother to collect the user's middle name, or ...?
How did you first gain a job in programming/software without the education to 'back it up'? Did you craft a portfolio? If so, was it from Freelance work, or did you just include examples of what you can do?
This isn't really the place for basic help, but you upgraded WordPress to a version that requires php newer than the one you have installed. Speaking of which, you should tell your host to update your php version. That's some old, unsupported stuff you've got there.
I called up the host and they told me the main owner of the domain needs to do it through the VDS manager. I think I might just downgrade my WordPress version for now.
I initially started as a freelancer of GAF. you can prob find the reviews from back in the day. I was willing to say yes to any job that was simple enough and i also did not take any money in the first few contracts i had. "i will work for review". after the first 6 months, i had prob around a dozen reviews, with does i started being more bold and taking on projects i was unsure for good price points. (1-2 projects i was never able to finish cause i bit more then i can chew) eventually after the 1st year, i found a few "project managers" ppl who themselves could not code, but went and found php jobs on GAF and re contracted it out to us real programmers. this was touch and go at first, i eventually partnered up with Anissa, a U.S based designer that can make static designs. By this point i was pretty damn good and making websites using wordpress and joomla, whenever i could not find an addon i simply made it or hack someone elses. i did this for about 2 years from home, I also found a 2nd project manager in my home town. This 2nd person eventually became my partner, he was the front of the company while i was in the back of the company. we did this for a few years and hired a staff of about 6 ppl. We mostly did what i call business card websites. And most of the sales came from word of mouth from our own city. This was my partners side of the work. We eventually got a few big projects, the first 2 were disasters, nothing i had learnt so far prepared me for the unknown unknowns. By this time, we were not touching any prebuilt cms, it simply took to much time to hack addons to make it work the way we wanted it to. Eventually near the end we had a few major contracts 1 of them being from a startup company that had loads of backing, with the experience i had we were able to grow there business and scale with the traffic they were getting, about 6 months after launch and there business was booming, i was offered partnership in there company. i sadly sold my share to my old partner and moved on at that point. this was almost 3 years ago, we now have over 10 devs/sysadmins that take care of the system.
Given that composer is a portable self-contained thing, there's no reason that it *has* to be bundled. Besides, do you *really* want the people in charge of php-internals touching composer and PHPUnit? 
Why? Why put something into core if it can just as well live outside of it? Syntax changes go into core because that's the only place you can make them. That's not true for Composer and PHPUnit. Really, I'd much rather prefer to throw out a lot of the extensions that php currently bundles. A lot of the stuff is likely used by just three people in the whole world (pspell, really?)
This is a common misconception and it demonstrates a basic misunderstanding of what's happening under the hood in both libraries. Guzzle can synchronously retrieve a specific pre-defined set of requests at the same time, yes. Artax does this as well. But Artax also provides real parallel execution via an event-driven API. What happens here is that Guzzle's call to the underlying `curl_multi_exec()` is synchronous. Is it technically retrieving the requests in parallel? Yes, but because the multiple retrieval will block program execution until it completes you can't (short of still more blocking callbacks) do other things until all the individual requests complete. This behavior is *"parallel"* in the same way that my Mini Cooper is a Ferrari because they're both automobiles.
How do you think Composer has changed the PHP landscape and how do think it will progress? Do you have any dependency injection best practices to share? How do manage and organise your unit tests? How do handle errors, logging and reporting in your software? Do you have any large scale application architecture tips to share? How do you deploy new code and how do you manage versioning? What tools do you use for documentation? 
Thanks! This ended up being the problem.
5.2.2 Released: 03 May 2007 Seriously. Really time to fix that. 
You are thinking in the wrong direction, I am afraid. If something becomes part of the PHP core, it has to be written in C, obviously, and it has to go through some kind of approval process. If Composer would become part of the core PHP, it will be taken over by PHP developers, rewritten, its release process completely changed (if necessary) and only THEN it would be integrated into PHP. Same with autoloader. Also, you would still be able to replace autoloader with your own, why wouldn't you? Don't be so negative! There is always a way, if there is a will :)
Well that's silly -- why not just even out the prices and make a little bit per sale? Don't work for free!
Because I don't need to make the money off of the tshirts. I do well enough as is.
Yep, that is a fair call.
&gt; we did not go with github simply because there is no reason for dev machines to have the entire repo on there machine Um. I don't think github/git work the way you think they do. 
ya sorry, let me reiterate. We dont use github because everybody needs to always work off the same source code , we also have the repo on our local svn server so all logs and history is locally there. Also before hiring all the employees i was most comfortable with svn, and we have not found any advantages to making the switch.
You may want to add in a filesize check of the resulting file, as a jpeg compressed at 90% compression level may well result in a larger filesize than the source file.
Yeah, i'm all up for upgrading it. Just gotta let the main man in charge know.
This could be cool, but all i can see are syntax errors :( http://www.etsy.com/uk/listing/81223479/coded-pin-wearing-pin-makes-you-awesome
Why wouldn't you use simple xml instead of all that string concatenation? http://us1.php.net/manual/en/book.simplexml.php 
I don't think you understand how git works.
I think when someone just goes "Well, I'm moving to Python" people tend to respond fairly negatively. Also, I'm just not sure that the above is a particularly good contribution to discussion.
XSLT? I don't think so.
Am i really going to sit here and try to explain my decision to stick with svn for centralized vs distributed code for my scenario, not really.I will only quickly say I do get the advantages of git, but they both have there pros and cons. I also have a github account and cant think of doing the work i do using git with others on a svn platform like source forge. For our business with in house team, dedicated svn server, secured sections of code in folders and for many more reasons, svn does the job properly. 
I didn't actually downvote. I rarely do. I'm just pointing out that a comment like "I want this, but fuck you all, I'm going to Python" doesn't really have a lot of discussion that could reasonably follow. It's sort of... a terminus.
Sorry, but I think you're missing the point. Not that many people downvoted you. You're on 0, which means maybe you got ONE downvote. Or maybe 5 upvotes and 6 down. Also, I think people didn't respond well because... well, you didn't actually try and start a conversation. You didn't provide any real information. You just said "I want this" and then "Meh, I'm going to Python". People are open to discussion. Many people have outright disagreed that Composer or PHPUnit actually belong in the core. I would take that view myself. Also, PSR-2 has no place in the core, it's a style, and the language shouldn't dictate the style. There is the potential for discussion on these things, but you sure as hell didn't start one. There is a place for discussion and debate. There really is. But sometimes you have to spark debate, create discussion. You don't just put down a list of demands, say you're taking your bat and ball and going home, and **then** make another thread to complain that the kids were mean. "Toxic Kindergarden" indeed.
Your idea is bad and you should feel bad. Just kidding. There's an experience barrier that is hard to define. Sometimes people get shot down because the issue is so vast it can't always be tweaked. There's so the issue with the millions of users all feeling like their ideas are the best idea. 
Hi mardix. You were not down-voted because this is a toxic kindergarden where discussion is not allowed. You were down-voted because people did not like your idea - that is the point of Reddit. If you disagree, you can down-vote. This lets you get a consensus of what people think of your ideas. I can't speak for anyone else on why they didn't like your ideas, but here are my concerns: 1.) You are essentially side-lining new features which a lot of people are looking forward to seeing. Variadic functions and argument unpacking, use functions, and lots of other recent RFCs represent some great work which is moving PHP forwards as a language. Calling this syntactic sugar is patronising and belittles the hard work being done by the RFC authors, namely [/u/nikic](http://www.reddit.com/user/nikic) who commented on your post, and got several up-votes for his fair points - which I will get to. 2.) You're assuming that everyone wants to use PSR-2. This leads to several sub-points. a.) The reason PSR-2 exists was thanks to a decision to split it from PSR-1, as it was obviously controversial. This allows people to use PSR-1 (which is VERY useful) and ignore PSR-2 if they want to. b.) Not all of the frameworks in the FIG want to use PSR-2, and I'm very happy they don't have to (as a member of the FIG myself). c.) PSR-2 has currently not even been implemented correctly in CodeSniffer ([read](https://groups.google.com/forum/?fromgroups=#!topic/php-fig/-7iArK7WZA0)) due to some unfortunately vague wording. How could it be rolled into PHP perfectly? More importantly than any of these points: why should it be rolled into the core? We can recommend it as a useful style guide to anyone who does not have a useful style guide, but forcing it down peoples throats does not benefit anyone. 3.) The job of language development is not purely about rolling things into the core. When I was a kid my dad used to read me this book called [Mrs Armitage on Wheels](http://www.amazon.co.uk/Mrs-Armitage-Wheels-Quentin-Blake/dp/0099400529). I can't remember it exactly and im not going to buy a copy, but she kept saying "What this bike really needs is..." and she'd add a sail to go faster. But then she couldnt stop so she added an anchor. But then it was too heavy and... bla bla bla. Just shoving shit into a language doesn't make it better. * If its working perfectly well out there in the eco-system, why shove it into the core? * The reason these new tools are new is because they were built to fill a need. Needs change. * PHPUnit is not the only unit-testing tool. 4.) Your response to the reaction from the channel did not improve the situation because let me be clear: nobody gives a shit if you move to Python. 5.) As nikic said: &gt; Syntax changes go into core because that's the only place you can make them. That's not true for Composer and PHPUnit. They currently exist. They currently work. PHP The Right Way says they're good and you should look into using them. That seems like a pretty fair situation. Why go further? As you said: &gt; We act like little kindergartners. We want, but we don't want. Unfortunately in this case you're acting like a kindergartener. People didn't agree with you so you're throwing your toys out of the pram and storming off in a sulk. You don't need to do that. I actually find Reddit to be an incredibly useful source of feedback. Every time I post something up here I get a HUGE range of responses. Sometimes its trolling, sometimes its truly bizarre but sometimes its amazingly constructive and new ideas come to light. None of that happened in this instance. You posted something that everyone thought was shit, and they reacted as I would expect them to. **Edit:** This also has literally nothing to do with ircmaxell's post, and it is demeaning to him and his valid concerns that you would draw a comparison to your suggestions that "rolling things into the core might be nice or something".
Oh great, now we have two of these. And still the OP makes no effort at all to explain *why* he wants these things included in core. So there is no basis for discussion at all. 
No offense man, but switching to another language because of a few down votes on Reddit sounds childish.
Best I've found is [StartUp Vitamins](http://www.startupvitamins.com/). Most of the posters are related to design.
 $xml .= '&lt;url&gt;'; $xml .= '&lt;loc&gt;http://www.domain.com&lt;/loc&gt;'; $xml .= '&lt;lastmod&gt;2013-09-30&lt;/lastmod&gt;'; I have no idea where this style comes from, but this is a terrible way to append multiple lines to a variable. (Sorry I'm a little bitter because I recently had to clean up the code from someone else who did this this same thing all through the code.) You're basically doing a lot of extra work, and so is PHP which has to re-fetch, append, then re-save the variable with each line like this. The proper way to do this (if you really need to separate it into multiple lines for clarity): $xml .= '&lt;url&gt;' . '&lt;loc&gt;http://www.domain.com&lt;/loc&gt;' . '&lt;lastmod&gt;2013-09-30&lt;/lastmod&gt;'; Much simpler, easier to write, and faster to execute.
[Think Geek](http://www.thinkgeek.com/) is always a good option.
I understand it's much faster but this tutorial is for the beginners. The sole purpose is to show them how to do stuff. Since you have mentioned this, I will add this suggestion to the tutorial.
Faster execution is a micro-optimization at best, the real answer here is to not deal with strings at all. Build everything with simple xml and then output to the browser with a single method call.
Sir, you are no ircmaxell. Who cares if you're moving to Python? Was it pertinent to the thread you posted? philsturgeon basically laid out exactly what was wrong with your post, and what's wrong with you.
[Got my blog up and running!](http://programmingarehard.com/2013/09/26/zero-to-jenkins.html)
Christ, this is childish. 
&gt;Old tutorial are still leading on the web. And to write yet another one is not the answer. Go to the [official source instead.](http://php.net/)
&gt; Much simpler, easier to write, totally subjective &gt; and faster to execute. really? micro optimization, it doesn't mean anything &gt; The proper way to do this says you
&gt; beautifully styled I'm sorry, how is the XML "beautifully styled"?
That much vertical space makes me want to murder people. Especially when working on a small laptop screen (1280x800).
Thank you, that was quite informative :) I'm taking the "Just go for it and if you can't manage it, cross that bridge when it comes" vibe from that.
Get an extension display something like a 30" should work
awesome! This sounds like something I can do, starting off easy and getting more advanced. Thanks a ton for spending the time to suggest this!
I will admit, I have been pretty intimidated by jumping into SQL. I do know that databases are where all the power comes from anyway. I'm just gonna jump in, thanks!
Fair point. Well made :-)
because apparently its a tutorial for beginners... and you know, we should always begin by showing how not to do something and then go on to show them how to do it the right way... ;)
Symfony + Doctrine. Write my entities, which I have to do anyway for database definition, run doctrine:generate:entities and doctrine:generate:crud. Write a twig template for the layout, put the crud behind an auth, then I have perhaps four controller actions left for a completely fully featured cms with tags, comments, users, etc. I can do that in under a day. If I have the design assets when I start, the entire "custom" site can take less than 15 hours of work and will be insanely easy to add features to in the future. I no longer personally see any benefit to working with Drupal, Joomla, etc. Anyone that needs something too small for the process I just outlined needs WordPress, not a developer. EDIT: phone typos
infinite scroll is one of the biggest ux horrors on earth, only 1% or so does it right...
thats bad for scaling your application
Save it as html and markdown, everything else is bad for scaling your application.
Hmm, I never worked with Symfony. What if the entities change? Does it have something akin to Django's admin or Rails' ActiveAdmin, or is it more like scaffolding, where you have to either manually add the changes to the crud code (boo!) or regenerate the scaffolds and lose all the custom you might've added there (even booer!)... or is it something else completely?
"some" it's just a matter of time when we all will need to get google/facebook/twitter acc in order to download/watch/read something online ...
I know next to nothing about CI, continuous integration and am a little lost. Jenkins "makes it easier for users to obtain a fresh build". What does this mean? What is considered a build? I work with Symfony and deploy with Capistrano (well, Capifony, a Symfony flavored Capistrano). Would a build be a complete set of files, including vendor folder and installed assets? In what situations would Jenkins be a recommended tool? 
Drupal made me cry and quit a job. Never again.
Wow. Gold mine. This actually fills in a lot of blanks for me that I have been digging for one by one. Thanks!
Basically a "build" is whatever set of tasks you want automated for development purposes, so yes to your 2nd to last question. This confused me at first too. So for my php projects, a "build" would entail cloning my repo, creating directories for certain things, getting composer to install dependencies, running unit tests, generating API documentation, code coverage reports, and project stat reports. If you watch the the second video on the page, i go through some of what the build process generates. 
hmm thanks for the heads up
That would be a feature in the new version 7. A built in SSH console and arbitrary SSH Remote Tools. Read about them in the original link above, plus the (linked from there) blog post about them.
Think of Jenkins as the manager of your project overall. It will help you automate every repetitive task within your project as it evolves: * FTP uploads * Generate specific reports about the code changes * API docs generators * Source control dependencies * Environment management * ...and any other repetitive task that you do when code is pushed to your project. All those particular tasks and more can be achieved by installing and configuring specific plugins that Jenkins supports. OP's walk through helps installing plugins for source code reports and coverage, for people interested in the statistical aspect of how the code evolves. To plug capistrano to your Jenkins job you can do so by configuring a "Build step" that triggers the cap command. It can be with Ant, Maven or directly with a shell script. I personally have it with Ant in another Jenkins job that does the entire deployment process with the dbdeploy, css/js/html compression and several other in-house tasks needed. It is a process and probably you won't achieve the ideal deployment setup immediately but OP offers a good starting point and CI is the right approach to development. edit: readability.
Those look awesome!
I don't see any use case for that
Generics in PHP?
I've been using PHP for 5+ years, and have yet to ever use `clone`... I've just never seen the need, much less for a _deep_ clone.
I don't think webgrind is a profiling tool -- it's just a profile analysis tool. Xdebug does the actual profiling, it's just that the results aren't very human-friendly. That's where [kcachegrind](http://kcachegrind.sourceforge.net/html/Home.html) (and it's Windows port, [wincachegrind](http://sourceforge.net/projects/wincachegrind/), and it's web-based offshot, webgrind) come into play. For what it's worth, wincachegrind is quite a bit better than webgrind IMO. This article is demonstrating how to profile with a non-Xdebug method.
Example: You have a module to create and display forms on a CMS. Each form contains fields, documentation, actions… If you want to offer the possibility to the user to "copy" a form and its sub-objects, using `clone` will be very complex, especially if you use some type of ORM like Doctrine to save these objects to a database. For example, if a form and its fields have a bidirectional association, then `clone` will only clone the Form, and a basic recursive copy will clone you Form object twice... --- I agree that it's a specific use case, but we met this problem at work, and we decided that we might as well share a clean extensible solution to the community.
Still, when there are is no advantage to doing something, and several small disadvantages, that still makes it a bad idea. Style matters in programming, and it's worth paying attention to even the small details.
&gt; we decided that we might as well share a clean extensible solution to the community Thanks! We might actually use this at work as well.
It's more like scaffolding, but you don't have to lose your work and you don't need to make manual changes to the crud really either. Doctrine is a very powerful ORM + DBAL, and Symfony adds console commands for Doctrine to perform certain tasks like updating the schema in the database or creating CRUD controllers.
same here for 8 years flof experience
if you have such a problem, the problem lies deeper
1 thing is certain, nobody at the start will hire a person with no experience so you really have no choice but to sale yourself on top of being a programmer. after 2 years of freelancing this should be more then enough to be able to beat ppl coming out of school with very little knowledge but have a degree. I have found over the years of hiring ppl, the ones that are self thought and self motivated to learn are my best coders and thinkers. they eat breath programming as a passion and these are great quality's to have in our team.
&gt; It's more like scaffolding, but you don't have to lose your work and you don't need to make manual changes to the crud really either Interesting... how does it do that? I mean, let's say I pimped my entity edit form with some javascript controls and extra html, and now I want to, say, add a few fields there. How can I do it without it overwriting my changes? Is there some kind of layered approach there? 
You'd do that by using a template that the edit form would extend (and override in parts) then creating javascript and styles off of the whole layout. To update the form you'd copy one line, delete the file, regenerate it, and add the line back in. This is because Symfony uses [Twig](http://twig.sensiolabs.org/) for templating by default.
That's weird, I don't remember writing this post that illustrates all my thoughts exactly.
I would have to study your whole db and uml's
the world needs more people like you.
Awesome tutorial, thanks!
The official source is there yet you still see the same mistakes everywhere. Wouldn't you agree that if most tutorial on the web were using the new functions it will solve the problem?
Go ahead, put it in git. There is still vast number of applications being written without ORM -- for smaller applications with much better simplicity and debuggability. I guess, it will be useful for such users.
No, I wouldn't. It takes more than simply using new functions. People need to be informed on how to use them, and if they also write tutorials, then they need to keep those up-to-date with current best practices. I don't trust people to do that. 
you have never gone deep into date calculations using DateTime objects...Have you?
One of the best lifecycle how tos I've seen in a while. Nice work OP.
You have a function that returns a database query object partially built for a specific type of query. You need to execute that query twice with slightly different conditions. You can call the function twice to get two different objects, or you can call it once and duplicate the returned object. End result is the same, but one is slightly more performant. Another example: PHP passes objects by reference. You want to pass an object to a function, but need to ensure that it does not make modifications to your object. You can pass a clone of that object instead.
As a more general note: If you do a post of type "I want ..." without any additional explanation of the reasoning, it's pretty natural that the responses will contain just as little reasoning, like "Uh, Pass!" or a downvote (which is basically "I disagree" without wasting a comment on saying just that). If you want a constructive response it's always a good start to make the starting post constructive too.
I am currently building a login and registration system. Fun, involved and has useful info about security.
This definetly something that should be taken seriously. Down voting move stuff off the page, even though they can be great ideas. Calling an idea shitty just because you don't agree with it does not help anyone. 
I'm not sure this particular application will ever get to the point where I need to really worry about scaling, but there's no reason to not use best practices from the get-go. I'll do it this way then. Thanks, man.
&gt; Down voting move stuff off the page, even though they can be great ideas. Generally speaking, sure. However it has been my experience that ideas worthy of regard, good or bad, are generally put forth with some demonstration of thought and consideration; e.g. - words. For context here, the post in question contained very little of any of that, it was just a title. To call it an "idea" would be a little premature.
Features is not perfect, and in the cases where it does not work, it is a real pain. It works great with ctools exportables like views and panels. I agree that it is an after-thought solution. That is why, CMI is all set to change that in the upcoming version of Drupal 8. On the other hand, drush is great and does not feel like an after-thought solution at all. It integrates very well with Drupal. It is a huge time saver in regular development operations and support for drush scripts is invaluable for many operations that would otherwise need custom modules. And code in database is definitely a no-no in Drupal and is actively discouraged. It is all set to be removed and the only reason it is not yet out is due to BC.
OTOH, I don't have a problem with the word taxonomy at all, neither with views. Taxonomy seems like a perfect fit to describe the concept that takes it even beyond categories and tags. And views, I guess, was named after a database view, not MVC view, and it is almost perfect in that sense too (except until recently when views started supporting other data sources, but that doesn't break the meaning). I can get on-board with you on nodes but I don't have a huge problem with it. It is almost never called node in the front-end and that is what matters when I have to train a client to use it.
You were lucky to have an instructor like that. For my final project, I built a CMS with a push/pull service (to make it kind of distributed), support for multiple themes, admin defined rules for automatic publishing of pulled content, and lots of things I don't remember now. I led a 6 member team to do this and the instructor only appeared on the day of examination and gave me the lowest marks among all my team-mates. I am not holding a grudge. I am just saying that this is the kind of education system here (at least in most institutions).
He is indeed a great instructor, and one of the only ones who I've had who let us choose a final project that'd be meaningful for us. When I took his MySQL class, my final project ended up being the database for my roleplaying website. Requirements? 5-10 tables. Me? I think at the time I had around 30 - 40 tables. I'm currently approaching 50. He relaxed the requirement to have dummy data in every table for me, thankfully. Though this was a lone project, no teams or groups. This is, though, because it was a hybrid online/in-person class; we met only once or twice a week (can't remember which for that class), so a lot of it was an online class. Also, I've learned it's sometimes a good thing for you to grade yourself, as well as let the teacher grade you.. Because sometimes we know our own mistakes better than others do.
I agree with you except when the "simple blog" is always going to be a simple blog for very obvious reasons. If not, then I would recommend Drupal too. I have stopped working with WordPress ever since I got deep into Drupal. WordPress is a pain to develop with now, but that is just a developer's perspective. I find Drupal much more cleaner and consistent, as much as PHP can be. I have not really had an unreasonable number of Drupalisms to fight as many say, not more than any other CMS or framework would put up. I am not saying Drupal is perfect, but it is working towards an even better codebase with Drupal 8. Another reason is to keep the clients in-house. More than anything, my clients did not want to deal with multiple vendors. Since I have stopped working with WordPress, I inform them about this and let them take a decision on using Drupal. Ultimately, it is the solution that matters to them and they don't care which platform is used, as long as I can work with it. And I have not had a problem with Drupal in this department.
How would you say "very" opinionated? I have not had a problem making it work exactly to my needs and in a very clean and reasonable way. I understand that there are situations when the workflow isn't applicable at all, but I think that those situations are covered in the OP. Further, some of those things are getting more generic in the upcoming version. There are better fits, and a developer must recognize that when proposing a solution. It is just a matter of proper training and education, not just Drupal but general computer science. That is the stem of most of the arguments here against Drupal anyway.
I agree, especially about the community. I think the linear debug processes you mention are no longer applicable anywhere in modern software development. If you have a problem with this in Drupal, you are likely to face this problem in any competent CMS/framework. In my experience, the people who do not like Drupal are people who don't like the code layout or people who prefer much more control. I agree with them too. After all, there was a time I developed exclusively on WordPress and before that, I wrote native PHP for everything and built a huge collection of scripts. Of course, I didn't better myself much during those times. Drupal, both the code-base and community have pushed me leaps ahead in a small time and I am looking forward to improving further.
There is so much more information needed to answer this question, I don't know where to start. I suppose this would actually be the most helpful answer I can provide: If your entire business/purpose is driven around a website, invest in a person who can do this part of it expertly. Your servers are not a bunch of computer connected to the internet, they are the entire foundation of everything you do.
Ya I'm looking into gaining a partner or two. But basically I want a server that I can host on and store videos with decent quality on. And price is a factor so the cheaper the better. I just want one to start the prototype of my website on
For that you probably want Amazon Web Services or Azure. Cloud hosting is excellent for prototyping where cost is an issue but your needed technologies are unknown.
I didn't do anything to help but you are welcome. Sometimes I wonder how people would get by were I not to exist.
In my opinion the approach posted tries to accomplish way too much in the model. If you take the model as an object representation of a row in the corresponding table, then the concern you should be trying to address during a save is whether or not the model is valid for saving to the database in its current state. This is similar but different and should be treated separately from form validation. As an example, as far as the model is concerned (User) the password should be a 64 character string (i think that's the hash size, can't recall off the top of my head). The model will never / should never have to worry about whether the password has been confirmed or not. For example, let's say you wanted to export and import your user database. You'd still want to validate the imported data, but obviously there would never be a password_confirmation and nor should there be. Using the posted approach you really couldn't do this via the User model. You'd be left to create a separate ImportUser model or something of that sort. I keep meaning to comment on this but it would be no use without some code so here is an alternative approach, hopefully the source is self explanatory, it's not that long. http://paste.laravel.com/VSX This is the method I personally subscribe to and like iknowifail already mentioned accessors / mutators are great for things like hashing passwords. I'm not even entirely happy with this approach but it takes all the validation crap out of my model and puts it somewhere else that I can leverage for extending for form validation and things like that. EDIT: Changed a property on the linked code from $model to $user. And again because I was still reference $this-&gt;model in a couple of places.
Yea I know thats an option, but I kind of want to put it on my own hardware and I've been saving up the money. 
Are you worried that Amazon will look on your servers and steal your idea?
Not necessarily, I would just prefer to use my own.
Related question: a year or so ago, I implemented APC on a server hosting several domains. There were all sorts of issues, including blank screens. I found numerous articles explaining that opcode caches, or at least APC off memory, can have issues supporting caches for different domains. Anyone come across the same?
&gt; If you simply take a moment to stop, think and examine your reasons for downvoting, rather than doing so out of an emotional reaction, you will ensure that your downvotes are given for good reasons. Also, I think CakePHP should be in the core.
we are still using delphi 7 :((
ajax is just javascript interacting with the dom. asynchron javascript and xhtml...
If price is a factor, you should decide whether or not you need to do any encoding -- if not, you should look into [S3](http://aws.amazon.com/s3/) for uploading and storing videos. Fast, cheap, and works well. 
It also allows you to then use the "order" column in select/where clauses without getting the "which 'order' column do you mean? dur hur" error.
You're right, you will -- and *should* -- get downvoted for that opinion because it's absurd. Sure, how you format your SQL doesn't make a damn bit of difference to the SQL engine\*, but it does makes a **huge** difference to other people that have to come figure out the query 3 months from now. How utterly ridiculous would this statement be: &gt; I can't believe all of the obscure and bizarre ways people try to find in order to write a fucking string. It's PHP code for christ sake. **Most of the time, for example did you know that at one point having a space in your SQL before the select would cause mysql to skip the query cache? Weird, but happened.*
Bah, just turn your screen sideways. Right?
&gt; PDO is 100% in your face all the time on this sub.
space is so cheap nowadays that its the best way to do
Can we have a Deletes_Mysql_Text_Bot too?
You're looking at spending &lt; $10 a month initially, compared to $500-$1000. AWS is a great sandbox tool, plus it grows with you. But if you're really set on buying your own hardware, just price out a cheap standalone pc that has a large hdd and a decent processor and ram, that's all you need for a media server / web server.
nysql_to_mysqli_Bot?
Ummm. Do you mean ORMs? I'm just confused by there being a plural of PDO, is all. 
I tried the ssh console, but I wasn't able to use them with the integrated phpunit support. Maybe I could trick it by mounting the server and substituting the phpunit executable for a shell script that pipes to ssh...
True, but I've long since stopped assuming people mean the possessive when they write 's. That battle seems to be long lost. :(
Your not alone, theres still people who haven't forgotten grammars importance.
http://hetzner.de/en/ has the best prices for dedicated servers
This is something that NEEDS to be fixed. I'm glad you're bringing more attention to this issue.
You're. Or was that the joke?
People did not like the idea because it was not acceptable. As I have highlighted, it had no merit, no base for conversation, nothing of any use whatsoever. So yeah, thats the point of reddit.
It's not emotional to say something is completely useless. That is my basis for down-voting you again. And again.
Sure, but if the idea is legitimately shitty then using that down arrow is the right call.
there's (technically there're), grammar's... I assume that's the joke...
I learnt web development starting with PHP, at the time it was pretty obscure but it led to a lot of different areas incuding linux administration, mysql as well as other languages and databases. PHP introduced me to coding (my polytech education was terrible), but I spend a lot of time mastering other aspects of web development, as soon as you decide to do something in PHP then things start falling into place, there mere fact you can understand pdo as the superior database connection class tells me you have a decent head on your sholders. I have been in the game for over 10 years and have used a variety of languages, there is something about PHP and its community that sets it apart, the hacker attitude possibly, anyway keep it up.
Next you'll want to take a raw slab of rubber and turn it into a round, rolling apparatus for easily transporting objects from one place to another. CMS is a solved problem, and it's been solved in lots of different ways. Rather than reinventing WordPress or Drupal or any of the other ones, pick one and learn to work inside it, to customize it to what you want. You'll learn just as much CMS theory, with much less fumbling in the dark.
Well, the most straightforward way is to learn one CMS. By using it for some kind of real or demo project. After you get accustomed to it you will discover what parts are working well, what parts are a pita to work with, what are the still missing features, what are the pitfalls, etc. This knowledge can act as a solid building foundation. You have to accept the fact that one cannot write Facebook / reddit / wordpress as a starter project.
The same way [PyroCMS](https://www.pyrocms.com/) did it: one thing at a time. * Admin login * Crud for Pages * Crud for Blogs * Display that stuff * User logins * Navigation system I guess * Permissions * Whatever the client at the time asks for next
The reason behind it is because I have a couple of ideas I wish to develop, however no existing project fits my needs, regardless how many hours I've spent researching. I haven't got the slightest idea on how to actually create what I want, hence why I'm asking how I can develop a CMS type platform so that I can add the features that I want. And i_am_not_excited, as I said I don't want to develop Facebook/Reddit/WordPress, as I know there's hundreds of developers involved, but I was trying to paint the picture of the kind of system I want in place rather than the GeoCities style web pages I tend to regurgitate.
My understanding, unless anyone can correct me, is that APC doesn't distinguish. If you had different users set up for different websites, then you might possible have an issue, but I personally haven't had any problems doing that. The only serious issues I've seen with APC are when I've recompiled or upgraded it it but not ensured that Apache is fully restarted. Often a graceful Apache restart is not enough.
I'm glad they are making such concessions to make sure the PSRs are as logical and consistent as possible. This gives them even more credibility.
Looks like a difficult decision but makes complete sense. Well done to Phil for having the guts to go ahead and do that. Hopefully any difficulties can be ironed out and then this will get approved at a later date.
PHP currently has some great decision makers at the wheel. I truly think PHP is growing up :).
I think for PHP it is the low barrier to entry that allows it to thrive. That does not mean you can't do some pretty clever stuff with well-written and robust code, but it does mean there is a very wide spread of skills, experience, ages and applications.
This happens depending on how PHP is configured to run. You shouldn't have trouble if PHP processes run per-user.
Very good. These PSR's have to be treated with all the care their permanence dictates.
Also remembering to: - Test as you go - Abstract components correctly ** - If you are focussed on SEO to incorporate that - Make sure you commit regularly - Break tasks into small sprints for yourself otherwise your head will explode trying to solve all things at once ;) ** Like recently, I discovered the Repository design pattern. Brilliant abstraction for model/ORM level
In addition to what /u/philsturgeon and /u/etbal are suggesting, go find a couple of open source CMS' and look at the source code. You'll be able to glean a lot of insight from those who have gone before you. When I first started coding in MVC frameworks I didn't fundamentally understand how certain aspects of them worked. So I started to build my own to develop an understanding. I would delve into the core of a popular framework for insight or inspiration if I got really stuck.
I'm not sure where you're starting from, but I'd first get a good understanding of the MVC design pattern and object-oriented programming in general, and pick a framework.
Damn, no Laravel support, no sublime test style multi editing mode.
Absolutely. As Composer is the de facto dependency manager for PHP, it is important to have such a problem fixed. Hopefully work on this issue gains more traction now and Composer devs prioritized this issue higher.
You know what this word doesn't need? Yet another CMS written by someone that doesn't know what they're doing. What about picking a CMS that is somewhat close to what you're looking for and writing a plug in or module for that? It would be considerably easier and allow you to learn the internals of how the CMS works.
There shouldn't be an issue with this, but what could be an issue is security — there's none built into APC, which mean any user can access the cache of any other. What this sounds like, is a segfault in APC, which does happen, particularly with anonymous functions and some other PHP 5.4 stuff, on occasion. I've encountered these segfaults with every opcache at one time or another. Right now, Zend OpCache has the most folks behind it, and as it's a product for Zend, that's unlikely to change in the near future.
&lt;3
lol thanks mate :)
It is far easier to implement a missing feature in an otherwise complete package, then to write the whole thing from zero. Pick a popular CMS, add some test content to it, and try to implement your ideas in the form of a plugin / extension / hack / anything. This way you only have to worry about your addition to the codebase (&lt;1%), and you can be sure that the other part is working well. I am a self-taught script-kiddy, I wouldn't even call myself a developer, I am hacking and patching an oscommerce based store for a few years now. It serves 100k visitors in a month, which is not a lot, but the revenue is fine. I see its flaws (and trust me, it has many) and I constantly drool over modern php frameworks but I don't even think about starting the whole project from zero, because I don't think I could do it alone. Extending the codebase is just that much easier. My point is: I can do anything regarding small-scale operations, but designing and implementing a system is far more complex than spitting out some formatted data from mysql. I'm not saying that you can't or shouldn't do it. I'm saying that others have already done the hard part, why don't you focus on your part only? (missing features)?
Thanks, its great fun and I love it learning it. 
Hmm, okay. I was just guessing the syntax from the description of the change. Do you happen to have a better example?
I'm not really clear at what you're asking. Are the php scripts being dynamically created ( e.g. photos.php and gunsntoads.php in your examples )? Or are you asking how to use a user slug as a segment in the URIs of your app ( fetching the user object based on that segment and displaying the user specific content )?
Huh? PHP != PHP-FIG.
Using user1 and user2 in your URLs suggests you want dynamic URL's, which is done using URL rewriting. Apache used mod_rewrite https://httpd.apache.org/docs/current/mod/mod_rewrite.html Nginx uses HttpRewriteModule http://wiki.nginx.org/HttpRewriteModule Although if you're using url rewriting I don't know why you'd add .php to the end of the URL. At that point it would be somewhat unnecessary. 
I'd rather explain my downvote: I don't think this article brings anything new except being a link to the official site.
I love Composer. I love the idea of Packagist. But if you are deploying software and being dependent on Packagist you are being almost criminally negligent. The MITM attack is not the only security issue in Packagist, in fact it's probably not even the worst (which is the behaviour of 'replace'). Luckily the guys that wrote Composer/Packagist also allow you to run your own version of Satis (the software that powers Packagist), and then you are far less vulnerable to attacks like these, as well as not being dependent on either Github or Packagist being available to deploy software. I have a shitty implementation here: https://github.com/Danack/IntahwebzRepo What it does is: * Download tagged zipballs of packages directly from Github. * Modify the downloaded zipfile to include the version tag. * Runs Satis to generate all the info Composer needs. * Runs a webserver to respond to Composer requests. If you are using Composer and _aren't_ doing something equivalent then I think you may have some very awkward questions to answer if/when someone injects a bad package into your server. 
As long as they don't release that CMS to the world or force clients/employers to use it then building one is a wonderful idea. http://blog.ircmaxell.com/2012/08/reinvent-wheel.html
If somebody is unsure how to build the basic components of a CMS I very much doubt they are ready to start unit testing every aspect of that code. These things happen at different stages of a developers career, and all too often somebody at stage C tries to jam these ideas down a stage A developers throat. It either doesn't work at all, or at the very least doesn't go well. You've obviously been reading a lot of the Laravel 4, unit-test, IoC, repository articles on NetTuts. They're good, in some instances, but not for everyone.
updated my OP sorry
Your system should be database driven. You don't want users having access to files directly on your server. Never trust user input. You wouldn't want a literal folder structure on your server. You should have a page object which is owned by the user and store text ( in the db ) and image assets ( in a public folder somewhere ) that are associated with the page object so they can change the content of those pages via forms. This is the essence of a content management system or CMS. In your example you'd have a skeleton if you want of the template that the user chooses and use the template as a field in your page object. So really simply, as a rough example: template1.php &lt;head&gt; &lt;!-- template1 specific assets, css, js, whatever --&gt; &lt;/head&gt; &lt;body&gt; &lt;div class = "content"&gt; &lt;?php foreach($user_defined_page_assets as $value){ ?&gt; &lt;div class = "page_asset"&gt;&lt;?php echo $value;?&gt;&lt;/div&gt; &lt;?php } ?&gt; &lt;/div&gt; &lt;/body&gt; If you want two-column layout, or specific asset containers, the user defined stuff would be tagged by container in the DB. 
I know you really want your own hardware, but it's complete overkill for what you are trying to accomplish. You can get a "tiny" size instance on AWS for free for a year, which is effectively the same thing as: 1. Buying your server. 2. Installing your software stack (PHP, MySQL, etc) 3. Finding a co-location web host. 4. Shipping your server to them. 5. Once they plug it in for you, now finally you're ready to actually code on your idea. Ooooor.... 1. Sign up with AWS 2. Turn on instance 3. Install LAMP if not already 4. Code your idea. I beseech you to go with AWS, or even a vanilla web host that provides the LAMP stack for you. If you are not already a sysadmin or at least somewhat technically inclined, don't go jumping into this end of the pool right away. The rabbit holes are numerous and large.
i see xxx and all i see is a porn site. 
Not to mention that when you're using Packagist, the entire thing pretty much falls apart whenever Github goes down. Satis is rather annoying to work with for small-scale mirror use. I'd love something simple that can keep "composer install" working for as long as my servers stay up.
Stuff like this is the reason why ratifying a standard should be a slightly [long and drawn out process](http://www.reddit.com/r/PHP/comments/1mo15j/psr4_autoloading_acceptance_vote/ccbijqm). Learn as you go, right? The FIG guys/gals seem to have a good head on their shoulders, and these lessons will be folded into their organizational framework.
Satis can store archives of packages now.
How about something simpler * Backup often (if you use repo's, good for you, but not needed at this time) * Work on a piece at a time * Look for existing solutions to problems you have. You aren't the first, nor the last * If you find something that is close, it's a solution, you just need to know how to modify it. (And in turn, you will learn how others do similar things)
You're right. I was just using Packagist and then I realized what a security hole it was so I rewrote my own version of it and hosted it on a private server. Then I rewrote all the packages Packagist has with my own versions that have no security holes. Now my workflow is: * find the package I want on Packagist * rewrite it myself without security holes * upload it to my custom packagist repository * use composer to remotely download my custom repository to my application Now my applications have no security holes because I write all my dependencies myself. Tbh I think if you *aren't* doing something equivalent you will have a lot of awkward questions to ask yourself about your workflow.
Do you know PHP?
Sadly.
My personal opinion here, but I think it would be more wise to explore a framework that's a bit more traditional and where the framework itself exists as PHP in project. The reason being, while learning, I found it useful to be able to dive right into the framework's PHP code to learn how it's processing the data, what parameter's it accepts, and what it returns. For example, I worked a lot with Zend a couple years ago and found myself multiple times digging through the actual PHP Framework in the project. It let me dive in and truly understand the internals, set breakpoints, add var_dumps() and fiddle with the framework itself. These changes were never saved or actually used, but it provided a deeper understanding of what the framework was actually doing. Don't get me wrong, I use Phalcon and think it's one hell of a framework in terms of speed and performance, I just don't think it's the best for learning some of these concepts. Right now the two frameworks I primarily use are Phalcon and [Laravel](http://laravel.com), maybe give Laravel a shot.
That is the wrong way to look at things. You don't know if you need to scale, and most likely you never will. Building something to scale means that it takes longer and is more difficult. Saving both just because it is easier 'to scale' is play silly. Imagine if a post changes, then you have to go through and rebuild the html field. You are still using the same processing power. One is just on save, one is just on load. On load allows you to have a simpler structure and workflow, and then if you need to start scaling, you can look at caching html which will be faster and better than saving both.
Im so sorry!! I know how that feels. 
never ever cache html... and doing things right doesbt take longer, your method would take longer. You would have to create a caching method if you want it to use the same cpu as the db one
Considering it's deprecated in 5.5, it's reasonable to hate mysql_*
What's the commands to tell it to do that? 
It was a good discussion and I appreciate you taking the time to point out the pros while I point out the cons. This info would be pretty useful to others if my first comment hadn't been down-voted below the threshold.
I don't know exactly why they pulled support, doesn't say anything in the changelogs. Better question is, why would an open source project use a proprietary file format to begin with? They may have gotten shit from MS for using it. That said, Microsoft does offer what they're calling a web installer [here](http://www.microsoft.com/web/platform/phponwindows.aspx) that looks to be just double click and go, looks like it only works on IIS though. Question, why not just use a virtual machine with *nix on it? It is much closer to the typical PHP work environment you'd encounter out in the wild.
One of the normal solutions to this problem is package signing. Each release has an archive file, the archive file is checksummed, then the file and the checksum are signed with the private half of a key pair. The tool that retrieves the archive also gets the checksum and the signature, verifies the signature against the public key, then verifies the checksum. As long as the initial request to get the signature isn't MITM'd, shouldn't that be fine? This can be done completely within PHP as long as the OpenSSL extension is available.
http://getcomposer.org/doc/articles/handling-private-packages-with-satis.md#downloads
Take a look at str_getcsv. In your case the enclosure is a pipe.
You are going to be surrounded by some good brains for the coming week to thrash some ideas out. Best of luck :-) 
I second this. I have been using Phalcon lately and while I love it, I'd definitely recommend Laravel for learning.
i thought this too, then tried it and for some reason str_getcsv doesnt process the rows correctly. So i looked through the comments on the function and found this http://www.php.net/manual/en/function.str-getcsv.php#101888
I've detected a hexadecimal color code in your comment. Please allow me to provide visual representation. [#101888](http://color.re/101888.png) *** [^^Learn ^^more ^^about ^^me](http://color.re) ^^| ^^Don't ^^want ^^me ^^replying ^^on ^^your ^^comments ^^again? ^^Respond ^^to ^^this ^^comment ^^with: ^^'colorcodebot ^^leave ^^me ^^alone' 
If you google for "php mysql tutorial" the top results all teach using mysql in a way that guarantee SQL injection. As such it is a major problem among newer PHP developers. The endless harping on PDO and prepared statements is necessary and will not go away until the widespread bad information finally vanishes from google.
I'm pretty sure it's meant to parse a single row, not an entire csv document in a string. &gt; Parses a string input for **fields** in CSV format
still kind of ambiguous, but yes, it will only do a single row.
Check out the even more obscure NATURAL JOIN, e.g.: NATURAL JOIN info oi 
Which version of PHP do you need in MSI installer format? I'll whip one up. __EDIT:__ Because you didn't reply, I just did the most stable version and wen't with PHP 5.5.4. The MSI 'installs' both the x86 and x64 binaries in `%appdata%/PHP5.5.4/` Because with the software that I have there is no way to determine which setup type you need, you'll still have to edit your PATH variable to include the bit type that you need. Instructions are included in the installer README.txt. Additionally the product registers with Windows Installer to be more secure, so you'll see a PHP entry in your add or remove programs section and a nice shortcut on your desktop leading to the %appdata% folder. [Image for dramatic effect](http://i.imgur.com/pON9gPU.png). [At the very least it's a working MSI installer.](https://mega.co.nz/#!lxt1XTBS!TwyfLUBEWr-6SNSxc34_-3UAhtJbjIyUxkX0RhYptVk) Let me know if it's what you needed or not. __EDIT:__ To whomever gave the gold, thanks! To everyone else, thanks for the kind comments. Glad to know the work was appreciated.
* [Proposed PSR-4](https://github.com/php-fig/fig-standards/blob/master/proposed/psr-4-autoloader/psr-4-autoloader.md) * [PSR-4 Meta Document](https://github.com/php-fig/fig-standards/blob/master/proposed/psr-4-autoloader/psr-4-autoloader-meta.md)
Thanks - although that's nice and does remove the dependency on Github being available, it doesn't prevent the requirement on Packagist being available. It also still involves downloading (and trusting) the data from Packagist.org. Running Satis yourself, with a whole load of zipballs that you've downloaded yourself from Github removes that dependency.
Do you need to keep the pipes? I would str_replace the pipes with double quotes, then parse it as a normal csv.
Just because you wrote all the dependencies yourself doesn't mean there are no security holes. There is always something vulnerable that you haven't thought about. Security is a never ending process.
I guess I should have included a &lt;/sarcasm&gt; tag. Edit: I mean do you really think you as a lone developer or even your development team is going to able to capture and close more security holes then an entire online community partially composed of some extremely talented developers? Developers probably far more talented than you or anyone on your team? Get real!
Shit, now that I re-read your comment, I realise I totally fell for that haha. I love a good bit of sarcasm :).
[Propel](http://propelorm.org/)? However you'll find it harder then necessary to install outside symfony.
Best feedback. Would downvote again. At least, throw some information back why it doesn't fit your criteria. I've let already pass the fact that your question is lacking any details. And that it contains the keyword "best".
Its not active record. The arguable reference implementation of AR (the one that is most used and sets the pace) is the ruby on rails one. So the one most like that would be what we are looking for. Propel is a clone of Hibernate. Note the existence of "Describing Your Database as XML Schema" in its documentation. A totally pointless activity if ever there was one. Everything in that xml file can be gotten by querying the database, which is what active record does. An excellent first razor whenever deciding if a library is worth using is the absence of the use of XML in any way.
I'm not the OP, and I have no need whatsoever but I appreciate the effort you put into this for a total stranger.
It is a pretty crappy situation all around, given that PHP.net doesn't provide an installer and the Microsoft installer is two minor versions behind now. I don't really want to wade through the third-party installers to find one that only installs things I want. Thankfully, I've found it relatively easy to set up without and installer. Download the zip file and extract it... somewhere. You really only then need to edit php.ini to set the extension path to "ext" and edit your environment variables to add PHP to the path. &gt; Control Panel &gt; System &gt; Advanced &gt; Environment Variables &gt; Find and Edit "Path" and add ";&lt;pathtophp&gt;" at the end 
It is definitely better to grab something like Vagrant and use that for development, if you're deploying to a *nix environment. If production is Windows, then your better off developing on Windows as well. And, really, if you're deploying to Windows, you should install PHP on your dev machine however it was installed on production. Third party installers, like Zend Server, do their own config that won't come with other installers.
Progress through iteration. As is traditional. 
Phil's being a PHPtator. :(
Most people want to see things like this done right. This has been done for the right reasons. It's not an ideal outcome, but it's not like it's been rejected or anything either. It's a moderate delay for a better result. We can pretend to lose our shit if it makes you happy? :)
I know an upvote would do, but I want to second this. As well as being a very nice ORM, using Eloquent is a nice step towards using Laravel, which IMO is a good plan.
I know jack shit about Propel, but I'm sort of inclined to agree on the XML thing. Pretty much nothing new/current seems to use XML to handle setup/config, so anything that does strikes me as a bit out of date. I'm not saying that's a dealbreaker, but it's certainly a red flag.
"/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC"
No, its not. Its a data mapper library. There's a difference. And, seriously, writing the schema.xml is a colossal waste of developer resources. Rails active record requires no such nonsense. There's a perfectly good meta model in the database. Its busy work.
Serious question, what do current libraries/frameworks use for setup and configuration? Annotations? YAML?
Just PHP Arrays. What's wrong with that? If you really want to, use YAML.
Just having a quick pass over the [documentation](http://four.laravel.com/docs/eloquent) for this and it looks really good. Especially if it's just something you can include in your project with composer and use out the box. Thanks :).
Oops, it was the first search result that came up in Google. Never used Laravel before so I wasn't sure. Thanks for the correction.
i just use the web platform installer from microsoft, it usaly sets up everything just fine.
I think XML configuration is fine, providing they give you an alternative like YAML or plain PHP. XML has it's benefits though (e.g. a schema)
cast to string to get lexical instead of numeric sorting. "Select cast(hour(fulldate),string) as hour ....
Is there any documentation on how to do this, I couldn't find any when I looked into it.
If fulldate would be a scalar (unix timestamp?) you might quite easily create an artifical "hour of the year" variable (or lets say daynumber * 24 + hour) that you'd use only for sorting, not for output. Then, the algorithm would be wrong max. once a year. 
How about 22, 23, 0, 1 then?
also ought to work
Why crawl the html if you can freely download the database? http://en.wikipedia.org/wiki/Wikipedia:Database_download
&gt; Its not active record I don't know what "alternative" definition you use for it, but it's most certainly an active record implementation. Find me the definition of the pattern and show me it's non-conformance; hint, you can't. &gt; An excellent first razor whenever deciding if a library is worth using is the absence of the use of XML in any way. That is not an argument, that's a fashion statement. &gt; Everything in that xml file can be gotten by querying the database No, stop the ignorance. The schema file is fundamental to many parts of the Propel ORM. 1. A cross-database way to define the tables with relationships, the spec for the generated object model (from column mapping, to specific behaviour, naming, etc), using behaviours (which is a big part of the benefit in using Propel). 2. Because of this schema definition, migrations can be generated easily by comparing the XML definition with the table structure. The alternative for these cases would be more configuration files, maybe in YAML, JSON or other "flavour" of the day "description language". And also usage of highly dynamic things, as custom annotations.
Does [ORDER BY FIELD](http://techtalk.virendrachandak.com/mysql-ordering-results-by-specific-field-values/) help at all? Since there are only 24 hours in a day, it's not too much hassle to enumerate their order.
There's a Media Wiki API also: http://www.mediawiki.org/wiki/API:Main_page
JSON, usually. It's highly readable and portable by PHP natively. Or PHP arrays as meenie said.
Been there, done that. Then I downloaded the database and it was much more efficient and friendly to this free educational service.
they are part of the whole "PHP" world even though they are not "the" PHP, and all in all I believe they are helping the PHP world to grow up
Damn, I missed that. Anyway, yes, I was trying to be funny, but a bit too hard it seems.
I think this is the easiest answer
Some of it is certainly in there. The new max_input_vars setting defaults to 1000 and is similar to a setting that suhosin had. That bit me when I upgraded. PHP with the security fixes has to be better than PHP without it. 
could you explain how to use cast? $query = "SELECT cast(hour(fulldate),string) as `hour`, DAY(fulldate) AS `day`, COUNT(username) AS `count` FROM log WHERE fulldate &gt; DATE_SUB(CURDATE(), INTERVAL 1 DAY) GROUP BY `hour` ORDER BY fulldate ASC"; this gives a sql error You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'string) as `hour`, DAY(fulldate) AS `day`, COUNT(username) AS `count` FROM log W' at line 1 
i got fulldate has this date format: 2013-10-01 15:57:16
Then go use Ruby. If you don't want to/can't use PHP's implementations, then use the "right" tool for the job.
$search = array('[1]', '[2]', '[3]', '[4]', '[5]', '[6]', '[7]', '[8]', '[9]', '[10]'); No. Ranges, Regex, Iteration. These are the basics developers should be learning about. 
PHP 5.3 will still receive critical security fixes until one year after the EOL. It just doesn't get any regular bugfix releases anymore. But in any case: The semi-official position of PHP has been the same for quite some time already: Don't use the suhosin patch. If you look through the [feature list](http://www.hardened-php.net/hphp/a_feature_list.html), you'll find that most of the stuff in there (apart from the "engine protections" at the top) is already in PHP in any case.
I have been using Red Bean for PHP for about 3 maybe 4 years now. http://redbeanphp.com/ Prior to this I only have only used PHP Adodb but that wasnt that great. Redbean offers some fantastic stuff. One of my favourite features is "deep duplication". Which allows you to copy say the a "user" record with a new id and any other records relating to this in one line. I find the code really terse and even when things get tough with many to many relationship redbean still stays very simple. From my initial investigation I looked at everything else and it just didn't seem as simple as this ( this most likely has changed ) but have a look anyway. John. 
alot of features have made its way into php by now. its also an extension. so you could build it against the 5.4 headers if you want.
Thanks, that would certainly be a problem for me too when I upgrade. I will keep an eye open for that option.
yay for new functions in php I guess - http://codepad.viper-7.com/mmuijI
There also seems to be some kind of dogged hope that learning a DI pattern will solve most people's code architecture problems... yeah good luck with that.
It seems like people trying to do that, but doesn't seems to be supported [Ticket: PHP 5.4 compability](https://github.com/stefanesser/suhosin/issues/5) on github reported 2 years ago. Which makes Suhosin to be in a very sad state. For me, as a dev using php, not a php-dev. And lost track in the small details of the updates of PHP 5.4/5.5, it seems much like it's impossible to use 5.3 in production. And then it gets EOL'd.
activerecord is a general software pattern, nothing inherently specific to ruby whatsoever.
That's a syntax error related to the cast romulusnr told you. http://dev.mysql.com/doc/refman/5.0/en/cast-functions.html#function_cast It should be cast(hour(fulldate) as string) but I don't think there's a "as string" cast, I think he meant a "as unsigned" cast. Then you could "ORDER BY 1" 
Fluent and Eloquent are really nice. Though there are still missing supported var types in fluent, for example double and char. Hopefully, down the road, featureset will expand. 
Looks awesome. Jeffrey Way is by far my favourite person to learn from. My only gripe is I recently purchased a Net tuts premium account which I'd of expected these to feature on. 
That's much simpler, thanks.
Sigh. You're 100% wrong about Propel. Please Google the relevant data patterns. Data mapper pattern uses *data mappers* to map data objects to data sources. It only takes 5 seconds on Propel's website to see that it uses no data mappers. The data objects save themselves (e.g. `$book-&gt;save()`). When data objects comprise their own persistence logic, it's active record. Your rant about XML, schema, etc. is completely orthogonal to what design pattern is being used.
I just think it's pretty absurd to suggest that the "**absence of the use of XML in any way**" is an "excellent first razor" of the quality or worthiness of any given library. Given library A and library B which both describe themselves as doing essentially the same thing, to see an XML file in library A and dismiss it or immediately form some bias that library B is probably better because it uses some newer config file format is just... well it makes no sense to me. Most good libraries I've used are configuration agnostic anyways, they can read and write config from whatever format you want. But more to the point, to quote what /u/criticalbone already said... &gt;That is not an argument, that's a fashion statement.
A lot of the popular ones are less opinionated and agnostic or easily extendable. You can load the config in from whatever format you want. Even ZF1 has a Zend_Config wrapper that accepts an array, you can just create that config array from whatever method you want or one of the built-in loaders. Some general links for reference (and btw I'm not trying to advocate that anyone actually use ZF1, just something I've worked with that was relevant) http://framework.zend.com/manual/1.12/en/zend.config.html http://framework.zend.com/manual/2.2/en/modules/zend.config.reader.html http://docs.doctrine-project.org/en/latest/ &lt; See the "Mapping objects on to a database" section for "drivers" 
thank you, this sort of information should really be within the laravel docs :)
If we signed up yesterday can we still get a copy? :x
does ORDER BY UNIX_TIMESTAMP(full_date) work for you? After I started using epoch dates i never looked back.
Are there any sample vids?
Cake is arrays all the way down, buddy. Sorry for your loss.
I don't, that is why I use others frameworks.
Whoops. Sorry, just saw this. We try, but sometimes they still slip through. Thanks for letting us know
PS. I would have posted this in /r/cakephp but it's a barren wasteland over there! What did I get myself into?
It's not a fashion statement, it's a heuristic, and a good one. Use of XML confit shows lazy and or dated thinking. Curiously neither phpactiverecord, nor rails, nor most everything else lusted requires you to detail your database schema in XML. Why? Because it's a waste of time if the database exists. It viates DRY massively. The other frameworks manage to require all of 4 lines to configure the db connection and you're done. The rest is convention over rideable with declarations in the model. Or not. I don't have the time or patience to document my 300 table db in some stupid unreadable schema.xml file. It's monkey work. &gt;The alternative... Is convention over configuration. Each post you completely ignore the fact that everything in schema.xml can be gotten by asking the database for it. It's all there. You. Don't. Need. The. Configuration. File. FWIW I also consider code generation to be the second deal killing anti pattern in any framework and I believe the database is the right place to represent the meta model. Not XML.
The trouble was time, it was lack of input followed by members thinking "well I'd rather have it as it is than not have it". There is no time criteria to it. It can take as little as 6 weeks or 10 years, but if people don't express concerns then +1 the votes we have a PSR people don't actually like all that much. More time does theoretically give people a bigger chance to review the text, but only if they actually put in the effort to go and read the text. I'm asking about potentially modifying the workflow to increase the review period to a month, but as I said, I don't think this will change much.
You fucking ignored when I told you what other purpose the XML schema has. Your bias leaks, badly. You can get the schema generated from your database model, from a single command invocation. But obviously you can't see beyond the fact that "omg, it's XML". &gt; I believe the database is the right place to represent the meta model. Not XML Sure, instead of using a markup language to define the database model, let's go with something completely out of scope, just because it's the new "way of thinking". You keep throwing around rails, but an implementation is not a specification. You may consider that model bad, fine, I accept your point; but that is not a fact and that is the problem I have with your XML bashing in this context. It's just an opinion, and you stress it out as a fact.
$9 is a steal, especially as I've been meaning to buy his book for a while too.
&gt; How do you OOPHP folks play nicely with Cake? when presented a choice, we leave it for the misfortunate and the talentless hacks and get a proper framework.
It sounds like to me your issue is not actually the framework rather the MVC design pattern. You probably need to take a step back and read about OOP and ORM, because otherwise you will find that you won't find transitioning between frameworks easily because the base is very similar to all of them but you won't have learn't the theory behind it.
I guess I'm making the point that a standard should never take 6 weeks to create. There should almost be a 6 month minimum built into the process. There has to be a happy medium between "OMG this is taking so damn long!" and "This was so quick that I don't trust it." &gt; "well I'd rather have it as it is than not have it" I'm glad you recognized the fault in that logic. Making a standard isn't like picking out a new TV. "Well fuck it, I've been researching for 2 weeks and I'm tired. Just give me any TV."
You know I think your right, I do get the concepts at a basic level, but probably need to dig a bit deeper, anyone have any recommended reading.
I've done the same thing, I get started, download the framework, get it all installed, sit down try to write something, think "This is a lot of files for what I'm going to write" and go back to simple PHP. I ended up writing an MVC "framework" of my own just to figure out how MVC worked. I say "framework" because it could at best be described as a database abstraction layer. This won't help you, but I'm in the same boat as you.
It does help, in that it's comforting to know I'm not the only one.
The thing to take away from using various frameworks are their ability to help you develop faster and more intelligent applications. How much experience do you have with PHP? How much experience with software engineering as a whole? Don't get discouraged either if you struggle with some things. I'm a bit of a slower learner myself. I can tell you though, if you've developed a few apps in straight PHP and then move to a current-gen framework like Laravel, you're going to always want to use it. I realize that we all have limited time available to us and we want to see immediate feedback that our learning is progressing. If you can find the time, I'd suggest working on a very small app to learn. One of my favorite software engineering quotes stolen from a UI/UX blog describes laravel (and many php frameworks and libraries these days) quite well. It goes something like "it's magic when the software generates a disproportionately meaningful output from minimized input." If you decide to go the Laravel route (and I'd wholly suggest it), their IRC channel is always very willing to help. /r/laravel is also slowly gaining some momentum.
in other words: enter these commands into a command line and have your code generated for you.
This lesson will be perfect for you, and the author is Jeffrey Way. In the lesson he compares some frameworks and uses Laravel 4 on his explanations. [The MVC Mindset](https://tutsplus.com/course/the-mvc-mindset-2/)
&gt; You can get the schema generated from your database model Then its redundant and now you have the same information represented in two places. Brilliant. Now I get to maintain two versions. I wonder what happens when they don't agree for some reason? &gt;let's go with something completely out of scope Scope? I *have* a database. I don't give a rat's ass about database independence. I don't want code generation. I don't want to have to add an attribute to an object every time I add a field to a table. I don't want to run a build process running around making redundant copies of information for no reason. The database is THE SOURCE OF RECORD FOR OUR BUSINESS. We should use THAT. Sorry I philosophically disagree with the people who wrote your favorite toy. I have my own philosophy forged over a dozen languages and 25 years of development. I'm going with it. I'll sum it up for you. The database is the source of record. DRY XML config files (or YAML, JSON, etc….but XML is a really good warning flag that the developers don't "get it") that re-state the database schema are cargo cultism and unnecessary. (adios Propel - did we learn nothing from Hibernate?) Need to be able to add fields to the db without modifying the PHP model object. (sorry doctrine) Good support for all the usual relationship types. (phpactiverecord is getting good but has some holes here) Convention over configuration. Rails style migrations. Sensible nomenclature (sorry RedBean - 'dispense'? Wot's wrong with new?). Eager loading of relationships. Easy JSON serialization. Support for use of raw (or nearly raw) SQL. Solid user/developer base behind it (FuelPHP/ORM looks interesting but seems to lack maturity). Looking like Eloquent is the likely winner FWIW.
As other users have said, the problem is not frameworks, it's your understanding of MVC and OOP. Most people who have gotten good with at least one MVC framework can sit down and get up and running with a new framework in 1-2 days. I learned MVC in C# and then picked up PHP frameworks very easily based on that knowledge, so it doesn't even need to be the same language. As for *too many files* - separating things into their own file improves your ability to search for what you need rather than 2-3 giant files. 
&gt; "This is a lot of files for what I'm going to write" You say that as if that's a bad thing. Why exactly? If you were working on an HTML site with a bit of styling and some javascript, would you not have the html, css and javascript in separate files? Once you work on a project with any level of complexity, you'll start appreciating why 'separation of concerns' is a good design principle. 
Codeigniter, although outdated, have a awesome and well-written documentation. It helped me to truly grasp MVC.
Thanks for the links they look like they could help, I don't really think it's apples and oranges, more Braeburns and Cox's pippins. But I am determined to get over this hump and start using frameworks.
Was trying to check out the free movies, with Chromium on Linux Mint 14, user agent below: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/28.0.1500.71 Chrome/28.0.1500.71 Safari/537.36 They don't load, because of insecure content going to vimeo: The page at https://laracasts.com/lessons/laravel-installation-for-newbs displayed insecure content from http://pdl.vimeocdn.com/62698/881/190795981.mp4?token2=x&amp;aksessionid=x. The page at https://laracasts.com/lessons/laravel-installation-for-newbs displayed insecure content from http://pdl.vimeocdn.com/24600/323/190795979.mp4?token2=x&amp;aksessionid=x. The page at https://laracasts.com/lessons/laravel-installation-for-newbs displayed insecure content from http://pdl.vimeocdn.com/51150/723/190795983.mp4?token2=x&amp;aksessionid=x. FireFox doesn't care. Thought you may want to know.
How can this be an issue of MVC design pattern, if **none of mentioned PHP frameworks implements MVC** ?
My condolences. Especially since CodeIgniter is not even remotely related to MVC design pattern. Instead it tries to redefine the pattern, to make it easier for advertising that abomination to newbies.
I wouldn't get hung up on the number of files. This Laravel4 project I'm working on right now (including all assets) is 35 MB. That's including all of the dev/tests/etc for each package I'm using. I get your argument below about saving CPU cycles however keep in mind that if those files aren't used during the request, then PHP isn't going to do anything with them. Laravel 4 also offers it's own "optimize" command to roll common classes into a single file which helps reduce file I/O. Couple that with an OpCode cache (which are trivially simple to setup now), and you should see your App perform swimmingly.
Space is really not a concern with cost of storage today. And there is no correlation between number of files and performance. Frameworks like Laravel load the files they need during script processing - not every single file you downloaded. If the number of files is still a deal breaker, there are frameworks out there like Slim that may make you happy. I'm not saying you should use a framework for every single project you're working on - but don't ditch a framework that may be very useful for a project just because it has a large number of files.
If you are willing to work with Ruby, try out this [Rails Tutorial by Michael Hartl](http://ruby.railstutorial.org/ruby-on-rails-tutorial-book). It is considered the best tutorial out there for Rails, and does a great job at explaining the whole MVC thing. Edit: It's also 100% free and current!
You can just keep doing flat PHP. Until you hit that moment where you think "damn my project code becomes unmanagable". Good time to start looking into frameworks.
holy shit that social media integration. why
MVC - The most overrated and misunderstood pattern in web development. I've been much happier and more productive since abandoning it.
How different it is to the MVC design pattern? I learned from CI and my transition to other frameworks like symfony2 or laravel was pretty smooth.
not sure why you got downvoted for your opinion. However I think both your approach and OP's approach miss the mark. Here's a very simple use case that always gets overlooked when you attempt to abstract out your validation: updating a users password. You have a user account with tons of fields(email address, phone number, address, etc) and you want a page to allow the creation of this record, so you want to ask all these questions at once, so you'll have an extensive set of validation rules here. Next you'll want a user update form, but you don't want them to update their email address here, so now you have similar rules, but you have to ignore the previous required and valid email rule on your email address field... some sites may wish to leave the password changing out of here, so those are two more fields to ignore. next you have your password reset page. it only needs a password and confirmation, and possibly some kind of token that was emailed(assuming the token isn't in the url already). for these cases you want to only save 1 field but have rules for 3, one of which doesn't exist in the other forms, not to mention you now don't need any rules for email, address, phone, etc. My approach? handle all validation in the controller. You may think to yourself, "that's not DRY". sure it is, the actual validation logic is handled by a class provided by laravel, i'm just calling that class which is handling every bit of validation logic i need. Next you may think, what if my validation rules change? Yes that may happen, but in all honesty how often do we change the validation rules on a form field, and a simple grep of the code base can show us everywhere else those rules exist for a simple update. Comparatively, the amount of extra logic and confusion in trying to call the same validate class for many different forms that deal with the same data can get pretty ridiculous.
Aha! Here is the guardian of the MVC codex! But c'mon.. it's hard to say that CodeIgniter is "NOT EVEN REMOTELY RELATED" to MVC. It *is* related, a little bit. Wordpress is not remotely related to MVC. CodeIgniter is kind of related to MVC. And I even think that it is a useful "baby step" to start thinking in terms of separation of concerns. But sure.. from an academic standpoint, it is useful to know that what many web-frameworks label as MVC is not technically MVC per it's classical definition. (By the way.. the only reason I'm even aware of the difference is through your StackOverflow posts.. so thank you!) 
Here is the issue: MVC is about [Separation of Concerns](https://en.wikipedia.org/wiki/Separation_of_concerns). It separates model layer from presentation layer and in the presentation layer there is a strict divide between handling the input and producing the output. The problem with PHP frameworks is that there is no such separation. The model layer gets replaced by a collection of active records (that already merges the domain and storage logic in single entity), which in turn forces the application logic (that would normally be part of model layer) into "controllers". At the same time, all of the UI logic (acquiring data from model layer, choosing which templates and/or headers to send, etc.) gets merged into the "controllers". And bunch of dumb templates get stamped with title "view" .. which they clearly are NOT. Basically you end up with "ORM-Teplate-Logic" pattern. It has nothing to do with MVC. 
&gt; MVC - The most overrated and misunderstood pattern in web development. Mind explaining how it's misunderstood? &gt; I've been much happier and more productive since abandoning it. Could you share how you seperate your project then? I don't mean to start debates or the like, simple curiosity on my part, hoping to learn a little.
I think it's most useful when you are working as part of a team. At that point having a common reference and shared understanding of the architecture of a project will speed things up.
See [this response](http://www.reddit.com/r/PHP/comments/1nno0q/frameworks_is_the_learning_curve_too_steep/cckcrtc) above, which explains WHY I am saying that CodeIgniter does not implement anything resembling MVC. 
I've been quite fond of CodeIgniter and I've used Cake a bit. Right now I'm trying to get my head around Symfony2. I've discovered a great resource from it's creator Fabien Potencier. It goes into creating your own framework using components from Symfony2. Starting from just a bare bones custom "skeleton", each step adds a bit of functionality and he explains the advantages that you get from using a framework. Since Symfony2 components are also used in Laravel4, as well as Silex (of course) and Drupal8 I think it's worthwhile thing to get familiar with. [Check out the series he did](http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1). Even just a readthough should give you at least a few "aha!" moments.