A few points. * php's ssh2 functions are client features. * The article is about an SSH server. * Client != server. 
ah. clever, but i found that using php to write daemons is more for fun than work.
Variable-variables are pretty unused, but variable properties and variable methods/functions are used a lot: $this-&gt;$var = '5' $this-&gt;$method('hello world'); They make meta-programming a lot less verbose. 
All it really takes is any old crappy, lowest-end machine. You could probably build a complete home server with ~$150. And as long as your ISP doesn't block port 80, you set up an automated mechanism to handle a dynamic IP address with your domain registrar if yours isn't static, you have decent upstream speeds, you block all ranges from China and Russia, and your home site isn't posted on Reddit, you'd have a decent host.
Consider following the link? Because not everyone just throws numbers out there. hint: It's in the link.
Not having port 80 blocked can be costly.
You need to take a closer look. Those benchmarks measure computional-intensive algorithms. Drawing the conclusion that the entire language is 100x slower (and always) because of e.g. binary tree traversal and floating point performance isn't a good idea. For its actual use cases (circling around strings and hashmaps) PHP can compete quite well with C++. There are measurable performance differences; I can tell you that without doing any benchmarks, but they are not as significant as those synthetic computation graphs make one believe.
Agree. There are a lot if situations where I use these, and even the -&gt;{} syntax. Its only variable variables that I have a problem with.
Can and should are two entirely different questions.
Once you get started its not too bad, not as daunting as you think. Its a bit hard to piece together a comprehensive list of options for saving calendar events, also, the class structure for dealing with google services is incredibly convoluted imo. http://devzone.zend.com/article/178 http://blog.josedasilva.net/zend-framework-how-to-interact-with-google-calendar-part-1/ http://framework.zend.com/manual/en/zend.gdata.calendar.html
put the curl_init() call inside the constructor and it should work just fine class Object1 { private $url = "www.example.com"; private $curlResource; public function __construct() { $this-&gt;curlResource = curl_init(); curl_setopt($this-&gt;curlResource, CURLOPT_URL, $this-&gt;url); curl_exec($this-&gt;curlResource); curl_close($this-&gt;curlResource); }
thanks so much. is there a simple explanation for why I can't use the function to declare a variable outside of the methods.
no, this wasn't my code at all, just a very basic version of it, so it was just a typo.
From php.net Class member variables are called "properties". You may also see them referred to using other terms such as "attributes" or "fields", but for the purposes of this reference we will use "properties". They are defined by using one of the keywords public, protected, or private, followed by a normal variable declaration. This declaration may include an initialization, but this initialization must be a constant value--that is, it must be able to be evaluated at compile time and must not depend on run-time information in order to be evaluated.
http://wurfl.sourceforge.net/ - AMA, I actually have a bit of experience with mobile sites.
Or use `&lt;link rel=stylesheet media=handheld&gt;`.
Seriously, use WURFL, it's a lot better than a single regex.
touch√©
Yeah, there is a surprising amount of info you get about the phone being used. Also the phone library gets updated regularly...
I prefer sending mobiles to m.example.com. quite often just a modified CSS isn't enough. 
Why not just alter the view shown?
Well, I wouldn't want to waste bandwidth on delivering content that I just then hide with CSS, for one. Frontpages e.g. also have a lot (often too much) content to scale down for handhelds. (IMHO, of course)
Why not a different view, not just css
Or for that matter why not employ a more reasonable style globally? What more does a person really need to see on a desktop browser?
There are a couple plugins for integrating the Kohana 3 framework with a Wordpress site.
Be warned: isset() returns false if the key exists but its value is null.
Nice work on UI and design, I like default theme and admin panel. Had quick play with it and few things are confusing or don't work. I can't see the way for content to show up automatically, have to add it by hand to navigation, even if I create page as child to home. Images in gallery does not show up at all. After adding file folder I have error: Fatal error: Cannot use object of type stdClass as array in D:\webroot\test-site\pyrocms\system\pyrocms\modules\files\models\file_folders_m.php on line 126 Another thing, app feels quite sluggish on localhost. Also, you could consider support for SQLite, performs better on low traffic websites and is way simpler to maintain.
That is a problem because most people haven't got the slightest idea as to what XSS is, let alone how to prevent it. Some PHP noob will find this, use it, and put it on his site and then his site will get hacked. Or he'll put it in some open source software and other people's sites will get hacked. Don't teach people to write insecure code. This is one of the reasons PHP has such a bad reputation for bad coders.
I'm cringing at the suggestions of w3schools/tizag/other random outdated sites that teach bad insecure outdated coding practices. The best way to learn, and the way I learned, is to look at other peoples code. Preferably good code (learn from the best) and open source so there's no issue with you copying some or modifying. Pick a framework (like Symfony) and create some basic applications with it. Symfony has some really great tutorials to go with it. Go digging through the source and see how they do things. Find something interesting and see if you can recreate it. Use the PHP manual (http://php.net) to look up functions, classes, syntax type stuff. Just keep in mind that a lot of these sites people are suggesting have really old really outdated and often insecure coding tutorials that date back to PHP4.
I agree with franktank that Zend's FW feels convoluted. They're trying too hard to adapt everything to one pattern, which IMO isn't right. I've been working on my own gCal 2.0 API library, but it's in its infancy stages. Their API reflects the CalDAV protocol, not their user interface, so re-mapping it is challenging. Any way, I've found Googles documentation on Zend's gData Calendar API better than Zend's , here's the link: http://code.google.com/apis/calendar/data/1.0/developers_guide_php.html
Thanks for that! Might save some headache soon.
People only can if you give them access to the repo / svn directory...
Views typically have nothing to do with the information that is processed and retrieved for them.
Came here (on my phone) to say similar. Still doesn't avoid unnecessary downloads of large content, but lets the browser do what it was *designed* to do... And render as-appropriate for the device on which it is running. Then again, I think we stand a better chance of hell freezing over before we get people to stop coding for individual browsers or environments, much less using javascript for page styles and layouts (all of which are in the top of the list of bad coding/design practices).
The setting `upload_max_filesize` overflows at 2GB (2^31), even on 64-bit builds. I haven't checked 5.3 yet, but I think I read somewhere that this will only be properly fixed in 6.0. To get around this 2GB upload limitation I used a Java upload applet that sends the file with a PUT request instead, thus bypassing PHP's POST upload mechanism. This also has the benefit that I can stream the file directly from the client to the storage server, without having a temporary copy on the webserver.
 var_export($GLOBALS); PHP Fatal error: Nesting level too deep - recursive dependency? It... just dies?
I don't like your **Security** blurb on the front page. I wouldn't call password hashing a security feature at all; without it I would just call an app broken.
In object oriented programming your class is set up using the constructor. Basically, when you say: $object = new object(); PHP runs the constructor which then initializes all of your variables. It's like this because objects can't do anything to their variables by themselves, they must be manipulated through a method (function) of the class. Code cannot be ran outside of a method but variables can be declared.
And for the same page you're typically retrieving and processing the same information
The point jonr is trying to make is that a mobile client will likely see something completely different and need less information than a desktop client.
Hmm, the interface looks nice in the screenshot but a demo would be great. I've tried to search the forum but I got an error. It's disappointing to see this type of error message displayed on a live site, on a project that brags about his security: A PHP Error was encountered Severity: Notice Message: Trying to get property of non-object Filename: controllers/search.php Line Number: 139 A Database Error Occurred Error Number: 1048 Column 'user_id' cannot be null INSERT INTO forum_searches (user_id, criteria, created_on) VALUES (NULL, 's:4:\"demo\";', 1290845001) Filename: /home/philsturgeon/domains/pyrocms.com/www/core/MY_Model.php Line Number: 218 
Yep, Google's docs are great, but not very comprehensive.
On your landing or home page, have a link to a mobile version of your site, that would be residing on a different subdomian for example: m.sitedomain.com Make sure the link is one of the 1st link on your page, and that is top left. This way it would be easy to get to, if someone is using a limited browser on a screen-limited phone. Some people (who have larger screened phones*) might want to stay on the desktop version even if they are using a mobile phone. So it is a good idea to leave that option. *My phones have had a larger screen that my 1st desktop since 2005. This is more true today as this is a standard even with mid-range and some lower-end units. 
I had a hell of a time configuring my mail server and using mail(). You can get it to work but in my experience but not too reliably. Any outgoing mail was always getting flagged as spam. Not quite sure why. I took a different approach, signed up for google apps account and configured the mx records to use their service. I don't have to worry about any mail stuff on my box, then I used [php mailer](http://phpmailer.worxware.com) to actually send mail in my scripts. you can configure it to use google's smtp server. It was easy to do
In the CSS specifications "handheld" is for small, monochrome and very limited devices.
That's exactly what I say in my article. I would prefer all that comments on my site to keeps them with the content, but thanks for your votes and comments!
From my experience that isn't true. 
I did not read the actual article, as I was browsing via my phone and did not want to open extra pages. I just read, liked some of the ideas. :)
Then use "min-resolution: 120dpi".
Haha, OK, moreover my blog does not have a mobile style! :-p
If you plan on getting better with php, this would be a pretty good project to get into some frameworks like Zend-Framework or symfony etc. if you never used them until now. It's probably overkill for this task, but also a lot of fun.
Those would be quite overkill. I'd probably suggest CodeIgniter/Kohana for a simple framework to get rolling on something like this.
For web developers that want a framework, framework is the way to go. cakephp, codeigniter, symfony or zend.
build it in joomla. with a little customization and some community/comments extensions installed, you'd be all set. install joomla find or code a joomla template (not sure of your expertise) install jcomments ( http://extensions.joomla.org/extensions/contacts-and-feedback/articles-comments/9985 ) maybe even install community builder ( http://extensions.joomla.org/extensions/clients-a-communities/communities/210 ) for better user profiles and etc. all the programs are free, and they are great bases to start customizing for your own site. If you are a decent coder, you should be able to take all that above and modify it perfectly for your needs
I feel even the frameworks listed below would be overkill. These features are all pretty easy to build and for basic navigation you can just use a directory structure w/ text files or a simple mySQL database, hell even SQLite would suffice if you write a script to generate static pages from the DB structure. Anyway, PHP w/o frameworks has everything you'd need to build this, if you want to make it more complicated and obscure the actual core process of building this you can use all of the shit listed below.
I do nothing but Joomla sites, and I'm not sure that "building it" in Joomla is the right term. Unless you're writing your own components/modules, you aren't doing anything but install/customize third party stuff. In that case, jump over to JED and look for a comic system.
sure it is, your taking different components and integrating there features into the site. Why write a comments plugin when I can edit an existing one? Basically using joomla code as a base
I didn't know about this. It seems fairly useful...might have to try using it somewhere...
If you want a pure-PHP SSH client (as opposed to an SSH server) try [phpseclib](http://phpseclib.sourceforge.net/). Unlike the magicaltux.net SSH server phpseclib has been actively maintained and supported for several years.
I like this one. Should've been this way from the start. Best of all worlds: optional enforcing of argument types, optional auto-casting of arguments, or optional accepting arguments of any type. New problem: it's too late to redefine 'type hinting' as either 'type enforcement' or 'auto casting'. They've already given us a catchable fatal error if the argument doesn't match the declared class or array.
&gt; The problem is that PHP is meant to be mostly typeless Which is why type hinting is purely optional. &gt; But PHP developers might not be too keen on that. Rightfully so, since "type hinting" in PHP has already long been established as being type enforcement, not type laziness. I don't even know what auto-casting arguments has to do with any of this.
Just playing devil's advocate... &gt; operator overloading You can mostly overload quite a few operators however you like when working with overloaded properties and juggling magic methods. The object itself, not so much. I guess it's something. * Using arrayaccess interface, you can (at least pretend to) overload `[]` on objects * Using `__invoke()`, you can sort of overload `()`on the object itself * Obviously, using `__set()`, you can overload `=` on assigning properties, or `__get()` on an object property when assigning its value to some other place * Paring `__get()` and `__set()` in objects, you can finagle overloading `+=`, `-=`, `*=`, `.=`, and `/=` on object properties * You can dictate what happens whenever an object itself is called in the context of a string using `__toString()`. IE, the `.` or `.=` operators on the object itself. Sure it's complicated, but you could easily delete a database any time any random overloaded property is incremented by one... if that's what you want. Edit: I promise this is the last edit I'll make to this comment.
Who the hell type-casts in a function declaration?
Also on operator overloading, just taking one look at the typical "hello world" examples of C++ I already know I'm in for a world of hurt. C'mon, why hijacking the bit operators for this?
Others might say it's great needing to define only one function, rather than several to account for all possible argument types and variable argument sets some other code might call for. Edit: But yes, using type enforcement means means you can no longer define functions as in your examples if you personally choose to go that route. So then, make functions with different names and parameters.
Which is why they should allow both. // requires a string argument public function saySomething(string $text) { echo $text; } // doesn't care what kind of argument you pass it public function saySomething($text) { echo $text; } They'd have to do it this way, anyway, for backwards-compatibility.
Joomla is a lot more complicated than what this guy needs. Wordpress is even overkill, but at least he will only be one plugin away (few different options) from having what he needs.
&gt; backwards-compatibility What with? PHP isn't going to suddenly become a strongly typed language. Type hinting is strictly optional. Only new code after this update will contain any sort of scalar type hinting if the coder adds it on their own.
Also, I could be going out on a limb here, but why would you _want_ to be forced to define multiple function signatures to account for all possible argument types some other area in code may call in a non-strongly typed language? Isn't that kind of self-defeating and going against the purpose? Isn't it kind of the point to being able to define only a single function to account for all possible variables?
Your code contains [SQL injection](http://en.wikipedia.org/wiki/SQL_injection) vulnerabilities, unused uninitialized variables and mixes together business logic and HTML in an unsafe and unmaintainable way. I wouldn't be surprised to find a [cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting) vulnerability in there also. Nobody should use this code, ever. Please read up on a modern database layer, like [PDO](http://us2.php.net/manual/en/book.pdo.php), and the critical concept of separation of business logic and presentation logic. Further, you have developed this without turning PHP warnings all the way up.
&gt; Always check PHP_INT_MAX Always good nowadays regardless. &gt; This means that if you use bitmasks for, say, a permission system [coming from someone not _completely_ familiar with the 32 vs 64-bit leap] Even on 64-bit systems, it's still max 777 for permissions on standard Linux, right? What purpose does having more than a set of 31 unique permissions for any given file object have? Can't this be overcome with a standard set of common "read, write, read/write, ..." permissions, while having a database referencing unique objects if for some ungodly reason even more uniqueness is needed in PHP? I mean, there's only "read/write/execute" base permissions, right? Same with groups. For group management in any case with PHP, even with running a PHP-based FTP server, there's 2 ^ 31 possible groups and 2 ^ 31 possible unique users on 32-bit, because likely you will go with a database solution over a filesystem solution. Even more possible entities if you bring in BC. 
ew tables
PHP is a weakly typed language. If you have a string that contains an integer, you can operate on it as if the type was an integer. This is actually somewhat reasonable for web programming language since all your data comes in as strings. A type-hint indicating a function should accept an integer parameter should allow you to call it with a string containing an integer. It should also fail on anything that isn't an integer value irregardless of type. I don't see how that's unreasonable. 
Type hinting != strict typing. This is something the PHP community, particularly the dev team, need to learn. All type hinting would be doing is ensuring your methods that the arguments being passed in are something you can actually operate on. This is most crucial for objects, since PHP's primitive types can already convert between themselves as needed (basically a half-assed polymorphism implementation that they like to call _dynamic typing_). If they could add this, and build their duck-typing system into a more polymorphism-type system, PHP would be a lot more enjoyable to program in. These changes would NOT make PHP a strictly typed language, by any means, as you can freely cast variables to any other type, declarations are not necessary, and a variable can be assigned a new type whenever you wish. EDIT: Also, if the devs' definition of dynamic typing is true, functions like is_string, is_object shouldn't even exist.
Not really. You would want to define multiple signatures so that you KNOW what type of data you are getting in each method declaration, instead of doing a bunch of instanceof, is_string, is_int, is_object, etc. checks.
&gt; instead of doing a bunch of instanceof, is_string, is_int, is_object, etc. checks It's a tradeoff that evens out in the end when comparing strongly typed to PHP's loosely typed language. Hell, `is_int() || is_float()` saves two function declarations right there when compared to something like say VB.Net. Also, all those instacesof and is_something checks by design will let you know exactly what type of argument was passed and balk at the user if you problematically don't agree with them. Same as declaring multiple signatures in other languages, except you get to handle every possible variance in a single spot.
&gt; Type hinting != strict typing Semantics... Ok fine, likely some PHP dev is beating him/herself up over this one. Hindsight, 20x20. Should've been called "type enforcement" right at the beginning. At least it's a catchable error. &gt; enjoyment If you don't enjoy the language you program in, you're doing it wrong. Edit: &gt; Edit [re "is_something()" functions] That's how you bring a language back from the brink of chaos and insanity: clearly defining what a variable _is_. A language would otherwise be pure gibberish, either in the programming world or human spoken/written. Context is essential, but at least with the "is_something" functions or multiple function signatures, the coder gets to decide the context. But handling variances is at the programmer's discretion depending on limitations of the language used: Defining several functions to handle variable argument types or handling variable argument types in a single function - same end result, but with non-strict languages, less lines. 
You don't need a framework, use straight PHP with a file structure under it. If you do something like: category sub_category pic1.jpg pic3.jpg pic2.jpg Use underscores for spaces and keep it all lowercase. The rest can be done in straight php using the [Filesystem](http://www.php.net/manual/en/ref.filesystem.php) and [String](http://php.net/manual/en/ref.strings.php) functions. If you want comments you're going to need a database and the whole thing becomes way more complicated. Really unless you're doing this just to "do it" don't reinvent the wheel. Use Wordpress and call it a day.
There's no need to call me names. How would I hurt the site? First, I'd try looking for common column names. uniqueid=123456' OR id = '123457 If that works, then I can do this, because most users have all privs on all tables. uniqueid=123456' OR id IN( ( DELETE FROM randomass_table_name ) ) OR id = ' Why would this work? Because [`DELETE` returns the number of rows deleted](http://dev.mysql.com/doc/refman/5.1/en/delete.html). I probably wouldn't be able to delete from the table being selected from, but I could easily delete other tables. If the system was more complicated, I could probably find and target the "users" table, preventing the site admin from adminning things (given that there's also an admin UI somewhere). It might take a bit to find the table name, not knowing anything else about the site setup. Or, even better, because you're constantly spewing the mysql_error out to the user, it would be trivial to find what's going on given the error messages. [There are automated tools designed to find and exploit SQL injection](http://sqlmap.sourceforge.net/), meaning I wouldn't need to spend the time doing it by hand. "Starting point" code should not be sloppy. Quite the opposite, in fact. It should be clear, it should be concise, it should be a *best possible example* for people to build from. The code you wrote is horrible. The fact that you became so ruthlessly defensive about it also tells me that you have zero interest whatsoever in correcting that horribleness. You might want to think twice about attaching your real name to both that code and your attitude.
Before deploying this code, it would be wise make it injection proof. An easy fix is to add a [mysql_real_escape_string()](http://php.net/manual/en/function.mysql-real-escape-string.php) call on every query. Also, the solution for selecting a random row may not work, as the unique ID's may not be sequential. You could use rand() like so: SELECT * FROM `table_name` ORDER BY rand() LIMIT 1
&gt; It should also fail on anything that isn't an integer value irregardless of type. I don't see how that's unreasonable. I was interpreting your earlier comments as wanting to automatically cast the argument. IE... function test(int $int) {} ... will automatically cast `$int` to integer wherever it's called elsewhere in code, rather than crashing. IE `test("1asdf")` should act like nothing happened and continue on within the `test` function as if the argument passed was `1`. If you actually mean it to crash if a true `int` isn't initially passed here in a call to this function (IE `test(1)`), then you are being perfectly reasonable and complying to the globally accepted standard of how to declare a function in most accepted languages. However, if you mean `test("1asdf")` to immediately cast the string `"1asdf"` as an `int` (IE ===`1`) and then continue on in the function as if nothing odd just happened, then at this point shit is just being made up. Again, who the hell type-casts rather than type-enforces in a function declaration?
&gt; PHP's type casting rules are too loose to be useful when combined with type hinting I still don't understand what you're trying to say. Type hinting, then and now, is purely optional. If strict is the route PHP devs want to go, then it's either an `int` or `string`, or ect or it isn't, and it's up to the PHP user to care or not. It's therefore at the PHP user's discretion to enforce whatever level of strictness they see fit within their own website/application.
&gt; Oh, and I didn't even mess with mentioning character replacing, escaping MySQL strings, etc. BECAUSE THAT WOULD BE OVERKILL FOR SOMETHING LIKE THIS. Escaping SQL input is overkill? Look, let's talk straight for just a moment here. A brief look at your comments here tells me that you think you know everything. You're throwing around accusations of code snobbery and CSS snobbery and insults and "Hahaha. Oh geez." before providing some pretty sketchy and horribly not-forward-thinking data validation code. (What happens to your code when the identifier becomes seven characters in length? Did you know that the string "5.0E+10" passes the `is_numeric` check? Did you know that Infinity and NaN also pass `is_numeric`?) While you think you know everything, in reality, Scott Carmichael, you don't know everything. You're just another cookie-cutter learned-from-bad-tutorials PHP "developer" that gives the rest of us a bad name. No serious PHP developer has used the mysql extension as the first solution in years. mysqli surpassed it in PHP4, *released in the year 2000*. PDO, a cross-database solution for simple, sane, object-based database access has been available in *every PHP version released since 2005.*^1 The fact that you're still using the mysql extension in new code, even for a limited example, tells me that you are stuck back in 2000, and *have not attempted to improve your skills since then.* Your comment elsewhere about "CSS snob"bery is also revealing. CSS is brain-dead easy, and there is no reason in this day and age, when we are surrounded by browsers that understand basic CSS, to pull out that old canard. That kind of thing was said, again, ten years ago, when CSS was this hot new thing and browsers understood it poorly, and real, legitimate CSS snobs were living in their own little worlds. Call me a code snob, call me an ass, call me what you will. The simple fact remains: Your code is written in a style that came out of the worst practices of ten years ago. If you don't recognize this and improve your skills, you are going to be left behind. In fact, if you aren't being told this at work (blindly assuming you do this for a living), **it's time to find another job, where you can work along side your fellow developers and get that chip off your shoulder by realizing how little you really know about modern PHP and web application development.** ---- 1: Some Linux distros took to packaging PDO separately from PHP, so it could be properly bundled with database drivers. As an unfortunate result, it might not be immediately available in the vanilla PHP version installed by some web hosting providers. Any competent host will have corrected this. If you find your host's version of PHP lacks PDO, take comfort in their idiocy and find someone that knows what they're doing.
There are two common ways to store bitfield-based permissions. First, you can store a permission bitfield with every entity that consumes the permissions. For example, a user group could have a single bitfield, each bit in the field being an on/off state for a specific permission. Second, you can store a permission bitfield with every permission. For example, the "can open this attachment" permission in forum software could have a single bitfield, each bit in the field being an on/off state for a specific group. When stored and used in this specific way, the number of bits available in a bitfield limits the number of things you can track. &gt; there's 2 ^ 31 possible groups and 2 ^ 31 possible unique users on 32-bit This is correct when you're using the integer to represent a number instead of a bitfield.
But then your API doesn't reflect what types of arguments your method expects, unless it parses comments for that information (and to my knowledge, there's no official comment syntax for differing signatures on the same method). The advantage to defining the method multiple times is that you don't need to look at the method's implementation to determine what you can and can't pass into it (it can be used as a "black box").
&gt; But then your API doesn't reflect what types of arguments your method expects then you're doing it wrong. &gt; unless it parses comments for that information (and to my knowledge, there's no official comment syntax for differing signatures on the same method). That's fine. Just throw an exception or intentionally cause an error. You can set up an error handler function if you want. In fact, right now, if you try and pass anything but an array to a function with definition `function bla (array $something) `, you can try/catch it. You can `catch` it, coerce the variable to an array, then call your function again, and everything will then work as expected. Or, within your function, if some buffoon tried to pass an string when your function expects to work with an int, just throw an exception or something. Die if you want. Delete the database if you want if you think it's a hack attempt. It's not that hard to do whatever you want here. The PHP parser engine is not a mind reader, but it'll do pretty much whatever you tell it. Is there some catch you can tell us, some hidden feature of PHP, some broken implementation which screws everything and the entire world up, or some example with this new problem that can't be solved with PHP and an already built-in function or implementation? Edit: you can extend the Exception class if you want. You can make it download the entire contents of Google if an `int` wans't passed here if you want. Seriously, what the hell do you want from PHP? To do you god damn taxes or something? It can also do that if you want. But can it tell complainers to STFU? No, and that's where the ultimate flaw lies.
Is there not a decent open source comic software out there yet? Curious because I've been looking for a new hobby project for a while now.
I'm replying to my own comment because the original code posted was deleted. To the original author: I felt your code was a good effort, and all comments made about code cleanliness, efficiency, and modern practice shouldn't be taken as personal attacks. I would recommend taking any and all code suggestions as a starting point for your own research on how to be a better programmer. The effort you put into your original post is appreciated, and I think you should expect and welcome criticism from other programmers for the sake of the end user.
&gt; then you're doing it wrong. Explain? &gt; In fact, right now, if you try and pass anything but an array to a function with definition function bla (array $something), you can try/catch it. You can catch it, coerce the variable to an array, then call your function again, and everything will then work as expected. Why would you do that instead of just calling with an array initially? A method signature conflict isn't something you should be try/catching with exceptions. Exceptions are intended to be used as graceful recovery from unavoidable or unforeseeable errors (like filesystem/database read/write errors, FileNotFound, or any other failure of an outside system).
&gt; Explain See next... &gt; Why would you do that instead of just calling with an array initially Expected/forced courtesy when calling an API function of any sort. API of any kind typically issues a "GTFO" error if incorrect parameters were given. See SOAP, where it's all about trying to catch and rethrow whatever exceptions it tosses your way because you were being too nice with your types and values. Not the fault of PHP (which is off on it's own little world over there probably saving the world or whatever it typically does), but your fault for failure to properly convert values to what the API expects. Conversion functions and methods are there, so use them or fail on your own. In PHP, you have the user's input value in your hand, so do something with it. Otherwise, it's your own fault that the API rejected you for trying to pass a bad type. 
&gt; I was interpreting your earlier comments as wanting to automatically cast the argument. No, I don't think that would be ideal. In most languages, casting to the argument type is what is done (and is an error if the cast isn't possible). PHP is just too forgiving with casts. &gt; Again, who the hell type-casts rather than type-enforces in a function declaration? C, for example, casts ints to floats to doubles on function calls. In C++, you can have objects auto-convert to scalar types on function calls too. 
&gt; If strict is the route PHP devs want to go, then it's either an int or string, or ect or it isn't, and it's up to the PHP user to care or not. The problem with strict is if you've got an string and your function accepts a integer, what do you do? You cast. And you know the kinds of problems that causes. Neither no type checking nor strict type checking are great options. And given only those two options, a PHP user does not have a lot of discretion to enforce whatever level of strictness they want. 
&gt; The problem with strict is if you've got an string and your function accepts a integer, what do you do? Throw new exception or trigger_error? Keep in mind `exception` can be extended to virtually tell the client to GTFO in any way if desired, and user-level error handling can be altered to do whatever you want. You're not forced to accept what you're given in PHP, and I think that very fact is the cause of all this "disconnect".
I'm the author of this tool =) hope it's useful to some people. 
[Link](http://twitter.com/scttc) for anyone else who's curious.
* I create a lib/ or library/ directory, where all classes are (java style). * Classnames map to filenames (MyApp_Controller is always in MyApp/Controller.php) * Or use namespaces for this, if you target &gt; 5.3 Besides that, I usually have a 'webroot' or 'public' directory. This is the only directory exposed to the webserver. From there, there's a rewriterule that maps everything non-existant to index.php. All the images, css, etc are in that folder too. Then I usually have a conf/ or config/ directory where all settings are stored.
I don't find that in CSS rules.
[Learn.](https://developer.mozilla.org/En/CSS/Media_queries)
That's pure gold, thank you. This is the first time in *literally* years that anyone has reacted so violently when I point out their code is flawed. ---- e: I so rarely report posts that I forgot that they become invisible, so I'm unable to reply to whatever he wrote in reply to me here. Needless to say, the abuse has also continued in private. I doubt that the mods will do anything, but whatever. I've been called much worse things by far more mature people. Oh, and he hid his Twitter feed. I should follow him over there, just to fuck with him... but then I'd just be trolling for real. (I'm sure I'll get another profanity-laced message in private any time now.)
It depends on the job, but the thing I find myself coming back to most often is a .htaccess that routes all urls to the same file.
http://framework.zend.com/manual/en/zend.controller.quickstart.html
I nearly always use a framework (homegrown; MVC-style) so I end up with the fairly typical layout: - application - Application - Controller - Model - Mapper - View - library - public - index.php Couple of things about my framework - it's completely module based. So you'd have a default module in application/Application (would've been default but it's a reserved word) and all your other modules there too. Extensive use of namespaces so I add application/ and library/ to include_path and just use `$path = str_replace(array("\\", "_"), "/", $name) . ".php";` in my autoloader.
&gt; Classnames map to filenames (MyApp_Controller is always in MyApp/Controller.php) Many PHP projects have adopted this naming scheme. The other year, a group came together to develop a single standard for this scheme and some common autoloader code. It's called [PSR-0](http://groups.google.com/group/php-standards/web/psr-0-final-proposal).
I only use functions and keep everything in one giant index file and name all my functions "f_#" where the number is according to their row in a spreadsheet I keep for their documentation. Seriously though, the best option is to find a small framework you're comfortable with and learn how to use it. You can whip out sites much faster that way by just copying their default layout... Kohona is a good one for instance. 
I use symfony as a framework to manage my php projects. Neet and clean. Recently came across cakephp, looks pretty decent as well.
The best advice you'll receive in this thread: *use an existing framework* To some extent it doesn't even matter which one you choose as long as you start off with a framework and learn its customs and conventions, preferably one with a Model, View, Controller structure. Some that spring to mind: # Joomla 1.5/1.6 * MVC Structure * Documentation available online both for development and for site admins using the CMS capabilities * Widely used with many extensions (albeit of varying quality) readily available #Code Igniter * MVC structure * Just a framework - not a CMS platform like Joomla (which can be both good and bad depending on your project or preferences) * Compatible with many different server setups * Lots of documentation and community support available #Kohana * MVC structure * Just a framework * More forward-thinking that Code igniter using (and requiring) some of the latest available technology * Lighter and faster than the other two mentioned * Still little documentation available, but the source code is easily understandable and well-written 
Frameworks are great indeed. One that is also particularly worth looking at in my opinion is Zend Framework, although you might want to hold off that one a bit as they're working on version 2.0, so a lot is bound to change (e.g. the switch to PHP 5.3).
For a moment there I thought you were a core OS Commerce developer.
this is the basis for the custombuilt framework we use where I work. It uses htaccess to route everything to a dispatcher file. The dispatcher reads in the routes.php, and tries to match the URL to the routes list, to send it off to the right controller/action. If no route matches, it then looks for an actual file at that path. Then, it throws a custom 404 after that.
Would you mind sharing your autoloader code?
You misunderstand me. I'm not talking about failure conditions but times when the developer would logically want/expect the operation to succeed. &gt; You're not forced to accept what you're given in PHP, and I think that very fact is the cause of all this "disconnect". We're talking about the usefulness of this feature; whether or not your forced to accept it isn't really relevant to that discussion. That being said, I don't think we disagree that much. 
Why hit the filesystem at all?
In case you have static pages. Not all our sites run everything through a controller.
That said, if you're experienced, it might be worth writing your own framework (obviously if you're experienced, you'll have done a few already). In this way you can keep it nice and clean, have it work the way you work, and keep it more mature than things like Kohana, which I understand changes often.
You can check for this from the htaccess with mod_rewrite. # Pass existing files, symlinks, directories through like normal RewriteCond %{REQUEST_FILENAME} -f [OR] RewriteCond %{REQUEST_FILENAME} -l [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^.*$ - [NC,L] # Pass everything else to the application RewriteRule ^.*$ application.php [NC,L]
Zend is also a bit heavy for what most people need.
I check if a static file exists or not, then route to the php file.
On the other hand, if you typically do a certain type of project, you may be able to create a framework that is lighter and facilitates even faster development than the general-purpose ones.
&gt; More forward-thinking that Code igniter using (and requiring) some of the latest available technology Frameworks that require versions of PHP that aren't in typical distributions (e.g, Debian, RHEL) are shooting themselves in the foot. Many shops won't use them because they don't want to mess with custom builds or off-brand packages.
haha, see also HORDE ;)
I respectfully disagree. If you're making a small site then you'll definitely want to use something that's going to work on a standard (mostly outdated whilst stable) CentOS LAMP stack, but if you are going to be creating a high-traffic site dedicated to a single purpose, such as imgur, then you'll want to use the best technology that's reasonably stable and easy to implement correctly without having to worry if it will still work when the client decides to move their site from Hostgator to Godaddy. Every tool has a purpose.
 // application/bootstrap.php define("ROOT", realpath(dirname(__FILE__) . "/..")); define("APPLICATION", ROOT . "/application"); define("DOCROOT", ROOT . "/public"); define("LIBRARY", ROOT . "/library"); set_include_path(get_include_path() . PATH_SEPARATOR . implode(PATH_SEPARATOR, array( APPLICATION, // modules LIBRARY // libraries ))); // @todo error reporting/trapping function __autoload($name) { $path = str_replace(array("\\", "_"), "/", $name) . ".php"; require_once $path; } I intend to do something like Zend_Load in the future to handle errors (or more likely something to override PHP's error output).
 i still think it would be faster to do a basic blank install of joomla and disable all unessential components and plugins. then add code any way you need, to the template, components, etc, and bam the site is done. I dont know why everyone hates joomla. is it really that hard? I know i could build a lightweight site customized just for myself in only a few hours using joomla as a base. joomla is a great cms/framework 
I disagree. One of the biggest advantage of frameworks is that anyone who knows the framework can come in and help/take over the project. I've never taken over a project from some developers crazy 'special' framework which wasn't a fucking retarded pile of shit. I think framework writing is a worthwhile practice exercise, so you can understand how a framework works, but I'd never deploy a project with one. I don't think there is much chance that anyone's pet-project framework is going to be more mature/stable/featured/not-retarded than Kohana/Rails/Django/CodeIgniter/Cake/Zend etc. 
I get what you're saying, I did a whole bunch of sites for estate agents, but I built the system I made on-top of an existing framework.
Lol, it's funny that you post that, since that's nearly identical to my code... if (isset($_SERVER['CORE_ENVIRONMENT_NAME'])) { define('APP_ENV_NAME', $_SERVER['CORE_ENVIRONMENT_NAME']); } else { die('Config Error: Environment name not set.'); } if (isset($_SERVER['CORE_PHP_EXT'])) { define('EXT', $_SERVER['CORE_PHP_EXT']); } else { die('Config Error: PHP file extension not set.'); } if (isset($_SERVER['CORE_APP_ROOT'])) { define('APP_ROOT', $_SERVER['CORE_APP_ROOT']); } else { die('Config Error: Application root not set.'); } if (isset($_SERVER['CORE_LIB_ROOT'])) { define('LIB_ROOT', $_SERVER['CORE_LIB_ROOT']); } else { die('Config Error: Library root not set.'); } if (isset($_SERVER['CORE_LOG_DIR'])) { define('LOG_DIR', $_SERVER['CORE_LOG_DIR']); } else { die('Config Error: Log dir not set.'); } set_include_path(get_include_path() . PATH_SEPARATOR . LIB_ROOT . PATH_SEPARATOR . APP_ROOT); function __autoload($name) { require_once(str_replace(array('\\', '_'), '/', strtolower($name)) . '.' . EXT); }
+1 for symfony.
I do see your point, and the maintainability aspect is a massive advantage. Though I would offer the interesting counterpoint that most developers that are likely to have experience with the framework you choose, are also more likely to be able to skim through your own framework and work it out pretty quickly.
What is the purpose of the first 5 lines of code? Looks redundant from here.
I guess the best analogy I could come up with is wanting vanilla ice cream with brownies mixed in. The wordpress solution would be to start with the vanilla ice cream (nice and simple) and then add the brownies (plugin) whereas the joomla solution would be to to start off with neapolitan ice cream (joomla) and removing the strawberry and chocolate ice cream, and then adding the brownies (plugin) after. Afterward you realize that the neapolitan included hydrogenated oils (extra crap in the database structure as well as extra code) which you can't really remove.
Or, code like a man and make your own framework.
In my vhost file I set the environment variables that the index.php picks up and uses. This way I can deploy from SVN into whatever environment I want and don't have to change any configurations. :)
Make sure not to use APC.
Ah, I rather a post deployment config generation system myself, it allows changing your configuration as part of your deployment mechanism (and tracks those changes in your VCS). I have a JSON file that contains the config details for each environment and the post-deploy script generates a php file from it.
Symfony is an enterprise level framework. OP doesn't even know where to put his classes let alone having a CLI do the lifting for him. That said, I can't wait for Symfony 2.0. :)
That works too. I prefer this since it means I don't actually need a deployment script for local dev. :)
I don't understand what you're disagreeing with. Mainly it seems like you're disagreeing with yourself. In which part of your statement are you advocating using bleeding-edge versions not commonly supported? The small site targeting Centos, or the large site that may be moving from Hostgator to Godaddy?
&gt; The amount of time it would take a person to develop the functionality frameworks are meant to help with would be very significant if done correctly. Yep, since about 1997 in my case. But it sure do fly!
The large site that may rent a VPS and install whatever stuff it needs.
The [amazing](https://github.com/symfony/symfony-sandbox) thing is, you don't have to :) 
Thanks for making this available! I made a start with enabling SabreDAV in my webapp (for syncing calendar info between the app and iCal/iPhone/iPad) a few weeks ago, but was a little disappointed when I found out it stores the calendar data in one big chunk of XML. I think this might be exactly what I need :-) 
Wow, you had me there for a second! Funny dude.
Generally speaking, I'm not a big fan of re-inventing the wheel, if the wheel is good, but sometimes we need different wheels, too. And sometimes I will just look at something, no matter how well received it may be, and get this little nagging voice that says "I can make it better!" Better is, I'm sure, often subjective, but I don't think that tendency is at all a bad thing if one is willing to put the time and effort into actually doing it properly; follow through, get creative, be innovative, be objective, learn something new, and turn out some great code while growing as a developer. I've got a small MVC framework that I've written and I use for most things. It's not always the right fit, and when it's not, I have no problems going with a different solution. However, it's light, flexible, and I know it inside and out. I've put a lot of time into developing and refining it over the past couple of years. Was it a waste of time, when I could be using an existing framework? I guess that's a matter of opinion. To me, it wasn't. It does exactly what I need it to do, exactly the way I want to do it, with code that's structured and written exactly as I like. It's gone through many iterations since it began, each time getting better, faster, more secure, and teaching me something new. I'm competent with several other frameworks, and I find that, for me, mine is significantly faster and easier, and more enjoyable to use. Is it "better"? Technically speaking, probably not (though I feel confident in saying it is at least on par in terms of security and performance). Does it offer a lot of functionality that other frameworks don't? Some, but overall, not really. What it does do, though is make my life easier, so for me, it was worth the time.
ivosaurus: Those blurbs are aimed at people who are not PHP-smart. In comparison to other CI CMS options our approach to encrypting the passwords is far more advanced thanks to our salting approach, while other CI CMS' just do md5(pass). iamas: The forums are broken on search, that is noted and I'll be fixing that tomorrow, but I don't see this as being a security concern. Strange-Stranger: Why would you want content to show up automatically? That would make navigation menu's cluttered quickly, and forcing a user to go in and delete a link each time they insert a page would be a massive P.I.T.A. We try not to do too much "automagic" and let people manage their content as they wish. The gallery error has been fixed. On the whole v1.0 is pretty stable.
Plug for Lithium ... it's great.
Start looking into frameworks. I highly recommend CodeIgniter.
Which is edited via FTP on the live server.
I was actually trying to look this up recently but couldn't find any info on how to do it. A framework I use could benefit from it.
Just pop a few lines into your vhost like this: SetEnv CORE_ENVIRONMENT_NAME "production"
Why are people using the PHP4 OO syntax in this day and age? Replace those `var` property declarations with [the visibility keywords](http://us2.php.net/manual/en/language.oop5.visibility.php) for modern happy goodness.
We wrote our own PHP framework called Hub at TwitPic. It's a bit inspired by Kohana, which I recommend, but is a bit less bloated and geared more towards efficiency. It's a model-view-controller (MVC) framework, which really helps to keep the source code clean.
http://framework.zend.com
PHP Wax is what I use after having tried my hand unsuccessfully at learning ZF(too much for a novice-intermediate PHP'er). It's like a more basic simpler ZF as far as MVC goes.
I rent a bunch of dedicated servers and I don't bother with custom builds anymore. The marginal performance improvement isn't worth the substantially greater administration burden. 
Detailed and in PDF format with more parts to come soon.
FTP is for newbs, telnet FTW.
This.. doesn't cover inheritance at all! At most it gives a really simple introduction to how to create a class in PHP.
I wrote this client, I hope it's useful to someone!
next article will be about visibility keywords, this is just an intro
Please stop abusing the phrase "controller" that way. 
There is more than one version of php.ini, usually one for apache one for the command line. Are you sure you're looking at the right one? I don't know where it's located on a windows server, but on my linux system the command line file is /etc/php5/cli/php.ini and the one for apache is /etc/php5/apache2/php.ini
Yes. Completely sure. Like I said, the memory limit is even reported correctly by ini_get, a few lines before it runs out at the much lower limit of 260kb (!?). I even tried using ini_set, and the command line option for setting the memory limit. No luck, still runs out at 260k (ish)
That isn't PHP's out of memory error. PHP's out of memory error is &gt; Fatal error: Allowed memory size of 123456 bytes exhausted (tried to allocate 789 bytes) in /ex/am/ple.php Search for "memory limit" in your script.
Sorry, my use of quotation marks was misleading. I get the standard PHP out of memory error.
Did you search the script for something like ini_set('memory_limit', '256K')? AFAIK there are three possibilities to set the memory limit: php.ini, .htaccess and ini_set(). And for the command line you're down to two. If you don't find anything, try using ini_set('memory_limit', '1024M') at the beginnning of the script.
uhm.. &gt;I even tried using ini_set, and the command line option for setting the memory limit. And yeah, I can't see any other ini set in there :( This is a real bizarre problem.
Uh... if ini_get() is giving you a value more than what the error says, then it sounds like something else is overriding it.... try doing ini_set('post_max_size', '1024M'); and other such limits to see if that does the trick.
Hm, strange. Try running ``findstr /S memory_limit *`` in the root of your source tree to see if there's a ``ini_set`` somewhere overriding the memory limit. Is you script perhaps spawning other PHP processes via exec() et. al.? Those wouldn't see whatever memory_limit you set in the parent script. And, of course, make sure you have enabled all error messages (might wanna check if there's any suppressed (via '@') calls as well).
sorry, didn't see that. Did you really check all included scripts (see elsand's post)? There has to be something you've missed. If it still doesntt work, try running it on a different server to check if it's a configuration or script issue. I can't think of anything else that could cause your problem.
Yeah, really did. Quite a big script but I did go through all includes, step by step.. I'm trying it on a different server now..
I'm trying to understand what Boxcar is.. Some kind of notification network for iDevices?
What about horde? I'm looking to integrate a wiki into a project and it has a wiki in there that works with pear diff. Would it be as good as others like Kohana for the basics as well?
I don't think you should introduce outdated methodology, even for a complete beginner's tutorial, since it will only confuse them. What most (read: almost all) books/teachers/tutorials do is they use things that they know are out of the read of their target audience, just so they become used to seeing it. An example would be to declare your class variables as either public, protected or private (not as var), as well as your methods. Nitpicking, except for the var thing.
It's like a PHP blog from 1998.
Yeah it's a good quick fix but for a solid solution you'd want something that generated a static thumbnail of an image saved locally so as to not generate these on the fly with every page load. Ideally you'd just generate a thumbnail when the image is uploaded. Could do that with this script. Save the image somewhere then check the image string vs existing thumbnails before generating the image. 'course doing that every time is also a bit of a cpu waste.
via Starbucks wifi
What are the performance considerations here? I quickly set this up, but don't have time to analyze if I did something stupid. Will come back to later with more time. Initial results were: Total time using $var: 6.0881179985013 Average time using $var: 6.0881179985013E-7 Total time using ${'var'}: 0.037761999988545 Average time using ${'var'}: 3.7761999988545E-9 Making ${'var'} significantly faster...right? &lt;?php $var = 0; $count = 10000000; $total = 0; for( $i = 0; $i &lt; $count; $i++ ) { $start = microtime(); $var = 1; $total += microtime() - $start; } print( "Total time using \$var: " . $total . "\n" ); print( "Average time using \$var: " . $total/$count . "\n" ); $total = 0; for( $i = 0; $i &lt; $count; $i++ ) { $start = microtime(); ${'var'} = 1; $total += microtime() - $start; } print( "Total time using \${'var'}: " . $total . "\n" ); print( "Average time using \${'var'}: " . $total/$count . "\n" ); ?&gt; 
I know, I know... just found it and didn't know this could be done so just submitted it. What you're saying is something like this: http://net.tutsplus.com/articles/news/how-to-dynamically-create-thumbnails/
Nice article to get the basic principles. But if you want to save the hassle id suggest [phpthumb](http://phpthumb.sourceforge.net/). Lot of options: zoom/crop, several image formats supported etc.
I have my site setup with some rewrite rules that does basically this, but removes the need for file checking once the thumb is there. Basically like this: RewriteCond %{REQUEST_FILENAME} ! -f RewriteRule ^images/thumbs/(.*) /thumbs.php?path=$1 [QSA,L] Then generate the thumb with thumbs.php and save it to images/thumbs. All future requests will go straight through Apache.
Don't get me wrong the article is great, it shows how quickly it can be done with just a few lines of code without having to break out a lot of extra bs that doesn't fit the 'quick' aspect. This is how I learned probably 98.8% of my PHP is just taking small things like this and teaching myself to add features. Edit: Incidentally this is also the reason that many python/ruby evangelists hate php. It's so easy to make something that just '*gets the job done*' but bypasses the '*getting the job done right*' thing. A lot of lazy coders would take this and use it in a production site without giving any thought to the overhead it'd produce. 
That is a very neat trick. Thanks :)
maybe this will help: http://php.net/manual/en/function.get-object-vars.php 
I don't think that helps. I have the structure of the object, as you can see above. I just need to know how to select the first and only object in the object. 
Update: So I had to do this: $likes = $json-&gt;{'http://www.tokillamockingbirdcharacters.com/atticus'}-&gt;fan_count; But I think there's probably a better way.
Oh, you know the name of the "inner" object... Then your soultion below is I think easiest one. 
That is the best way to do it, for now.
Was going to post that solution, and no, I don't think there's a better way since you're using slashes and colons.
You're using an object like an array, so you should probably just have this be an array of objects, not an object of objects.
I didn't make the object. It's returned through an API call. 
Normally I wouldn't post on something like this but for some reason this angers me. Your code had some major holes in it and McGlockenshire corrected them. Period. Why you decided to not take this and learn from it is beyond me. Instead you take offense and blow up. You can't take coding criticism personally or else you will never learn. I for one am proud of how the reddit community handles situations like this.
what about something like how it's done in these blog posts? (i'm not sure what you're trying to do, but it seems similiar) * [http://kovshenin.com/archives/how-to-count-facebook-fans-in-php/](http://kovshenin.com/archives/how-to-count-facebook-fans-in-php/) * [http://kovshenin.com/archives/counting-facebook-fans-in-php-the-graph-api-way/](http://kovshenin.com/archives/counting-facebook-fans-in-php-the-graph-api-way/) * [http://www.hongkiat.com/blog/how-to-display-facebook-fan-count-in-text/](http://www.hongkiat.com/blog/how-to-display-facebook-fan-count-in-text/) I haven't tested it, but what about even something like $oneObj = $request[0]; $likes = $oneObj-&gt;fan_count; 
Here's code to select the first and only object. Objects behave just like arrays for things like foreach() &lt;?php foreach ($object as $key =&gt; $o) { $first = $o; break; } ?&gt;
Not bad but what you really want to do is have the script make a thumb on upload using GD. This method will eat a lot of memory if you get a lot of hits on the site. Storing them after 1st generation also has it's own set of issues like thumbs not getting regenerated if the picture is overwritten.
I'm probably wrong but would this not work? (like what petrichor8 has written) $likes = $json[0]-&gt;fan_count;
No, I tried that, but $json isn't an array, so it doesn't work. 
There's a limit to what you should put on your resume without actually knowing *a single thing about it* &amp;#3232;\_&amp;#3232; 
*Fuck* your friend.
Ah I see, it might be possible with some casting tricks, but yeah I think the solution you have looks cleaner anyway. Having the URL there is almost like an inline comment :)
[Line 76 of boxcar_api.php](https://github.com/ukd1/Boxcar/blob/master/boxcar_api.php#L76) instance is clearly meant to be a static function, you'll want to change the definition to `public static function instance(...)` otherwise you'll be throwing errors and warnings all over the place. Using a method as either an instance or a static method is carried over from PHP4 and is considered deprecated. Also since `instance` is acting as a factory rather than a singleton, you may want to consider renaming it to `public static function factory(...)` to be more clear. Finally, contemplate adding an if block to the top of your code checking for CURL and throwing a fatal error just in case (I'm OCD about this but when I provide third party libraries with external extension dependencies like CURL I like to throw fatal error quickly and early so errors aren't discovered at an awkward time). Something like: if( !function_exists('curl_init') ) trigger_error('CURL must be enabled for boxcar_api to function', E_USER_ERROR); (I'm being pedantic, I know).
Seriously, this kind of shit needs to not happen. All this guy is doing is wasting people's time. If he gets the job, it'll only be because of HR's incompetence and his co-workers will hate him.
A long shot, but check how much free memory you have before running the script. Just because PHP is allowed to use 1024MB doesn't mean that Windows has 1024MB to give it.
You can always cast an object as an array: $someArray = (array) $myObject;
I've yet to find my ideal IDE. Netbeans is probably the best I've seen so far (but it starts slowing to a crawl after a while... could just be that the project I'm working on is of an ungodly size). I keep telling myself to spend some time getting to know vim though. I really like the idea of vim+svn/git/mer+screen/byobu as a full development environment that has mostly everything you need, without all the fuss of having a GUI.
It exists physically in the semiconductor circuits of the memory. &lt;/melvin&gt;
 $array = json_decode($json, true);
I re-wrote it quickly in an annoyed rush, so yah I missed some of those. Pushed the changes. Enjoy.
Pretty much. They provide an API and a free iPhone app (with an option to remove ads, which I assume is how they hope to make the money). Seems fast and stable so far. Though I've only been testing for a day or so.
What does he plan to do when they start asking him coding specific qeustions? Text you? Even if he happened to luck into the position, as others said, he will be hated for actually lacking the knowledge to do the job. If he did get it, I give him a month and that is severely pushing the limits.
To all the haters: If you know how to learn, you know how to use Google, and you have a good work ethic, you'll be fine. I've started most of the jobs I've had without knowing all of the technologies in use there. If you're comfortable, you're moving too slow. I wouldn't hire a guy who knows nothing about PHP to write a complex web application, but he should be just fine if he just needs to write some basic stuff.
The problem with doing it on upload, is that you cannot easily change the sizes, or add new thumbnail sizes at a later time, since all the thumbnails have been created in the old size(s). Best done as needed IMO, but *do* cache the results. Edit: doing *some* images on upload does make them instantly available in, for example, GUI editors that present an image browser.
I role out phpthumb on many websites, generating the thumbnails in many different ways. It never fails to get the job done simply, easily and effectively.
Not anymore.
Do use it with care though - make sure thumbs.php is given limits on the paths that can be passed into it, and other parameters (such as the sizes, whether to crop or fit etc. You don't want to give a hacker full rein to cover your site with as many thumbnails as he likes, or even worse.
Why wouldn't you just create all needed sizes at upload? I've never ran across a site that didn't have the thumb sizes predefined. I personally would rather have it build all of them at once instead of making a script that tries to check for a newer version, then checks the cache, then builds a new one every time. 
or you could just use PHP's native URL parsing functions
There's a bit of a difference between someone that knows programming but not, say, php and someone who doesn't know the difference between markup and scripting languages.
I like the way you think man ;). I need to read something on that.
Your way works but when you start working on sites that get 1000+ hits a day you'll begin to see how expensive real time thumbs are. Memory spikes, images begin to "peel down" instead of pop in due to the extra workload on the server. Really the only time you would want this would be if you needed thumbnails that were different sizes. Even then you'd still probably want to resize them using a bounding box method so your layout doesn't get all jacked up.
It's okay. Any company that would hire someone like that means they have HR doing all of the hiring and are doomed to fail anyways.
I agree with you in principle. I'm not a great developer, but I do it in my job. If something can't be done, I just Google it. I did a friend's Python homework in 45 minutes without ever having seen Python before. However, you need a foundation of understanding, I think, before you can do that kind of thing. He wouldn't know what to Google. I got some more of the chat (including what he put on his resume verbatim) that I'll post later.
Relax everyone. This guy's going to be a doctor. I think it's interviews for med school, not a development job. He just wants to seem multi-talented. 
In addition, there's a huge difference between hiring someone with a solid understanding of programming, but a lack of knowledge in a particular area, and hiring someone who has absolutely no clue about computers.
Yeah, I *totally* know how to do open-heart surgery. Trust me...
&gt;Relax everyone. This guy's going to be a doctor. &gt;explain his own BS. Count me out of being relaxed if a doctor is bullshitting on a resume.
&gt; I don't think we disagree that much. Coming back to this discussion - the disagreement is in the usefulness of weather PHP's current feature of type hinting should remain something akin to argument type enforcement, or if it should completely change into an augment auto-casting feature. Thinking on this problem more, I think some sort of arrangement bringing in _both_ features would be good here and satisfy both camps at the same time. Originally here, I was misunderstanding and being narrow-minded (there's a pun in there somewhere) about any precedence to auto-casting (IE - in some languages narrowing or expanding compatible or related types or crashing if converting down to the named type fails). I was wrong. Personally I now think PHP could definitely improve with going both ways at the same time: (ie strict (1 === 1 &amp;&amp; 1 !== "1") or loose (1 == "1")). I'd hope for something like McGlockenshire's example above, where at the user's discretion, an argument is casted inline and crashes if conversion fails, or it's strict enough in that particular function to forbid a string being passed when an int is expected. Regardless of where this will end up, I think it's about time in the lifespan of PHP that some concerned group of users come in and forks it.
No
A recruitment company rang me the other day wondering if I would be interested in a "PH developer" role. I said that I didn't work in alkalies or acids anymore to which she replied "okay, well if you ever move back into that sphere, give us a call". I just burst out laughing and hung up.
deb http://ftp.hu.debian.org/debian/ testing main non-free contrib Symfony 2 (or anything that requires PHP 5.3.2+) is perfect, because Debian Squeeze is being released, probably as you're reading this, and it's shipping with PHP 5.3.3. And when you'll release your application Symfony2 will have been already production ready. Besides 5.3 is [old](http://www.php.net/archive/2009.php#id2009-11-19-1), and sysadmins should keep their systems up to date, and if your application is suffering from backwards compatibility break then just use fcgi with a version of PHP which you know that works. (And hope that it'll have security fixes for some time to come.) 5.3 is faster, has a ton of handy features, etc. So it it's not unnecessary administration for nothing.
I have absolutely no problem with a future doctor lying about web development experience on his resume/cv. He clearly needs a differentiating factor and this is it. As long as he is a studious and competent practitioner of medical science, I don't care one bit about using this as a means.
I'd go for 2.0 straight ahead. Documentation is a bit sparse at the moment, but the code is beautiful and [Fabien](http://www.slideshare.net/fabpot) has some great material about his ideas, and of course, he implements [them](https://github.com/fabpot/symfony/commits/master) right into Symfony.
I bet they would have paid you a fortune. 
I can understand with messing around with him, while he's trying to BS in a job interview, but I got a little frustrated, just remember how confusing it was when I first started trying to teach myself a little web programming, and no one really felt like explaining the mechanics of it.
FWIW, the API call is probably using [`json_decode`](http://us2.php.net/manual/en/function.json-decode.php), the second argument to which can be set to `true` to return an associative array instead of a set of objects. If you're using third-party code, you probably shouldn't modify it.
I actually know this stuff and how to use it. I STILL can't even find a job. Yeah i mad. Fuck your friend.
## 
I know how that goes, trust me :)
&gt; Personally I now think PHP could definitely improve with going both ways at the same time I don't like the idea of having two ways to do it. I think it over-complicates the language. PHP already suffers from too many ways to do things (many of which end up deprecated anyway). &gt; Where at the user's discretion, an argument is casted inline and crashes if conversion fails, or it's strict enough in that particular function to forbid a string being passed when an int is expected. With either strict or loose type hinting, the function being called always gets the data in the format it expects. With an integer type hint, for example, the function body is never going to have to deal with a string or an array or even a float. During the call the parameter is either an integer (strict) or casted to one (loose). But if you have both options, the *caller* now has something more to deal with: for every function, the programmer would have to know whether each argument is strict or not. That seems like a disaster to me. I'd rather have it one way or the other, even if the ultimate choice is not my ideal option. 
I kind of have a problem with a future doctor lying in a professional sense. Then again not everyone finishes first in their class. There are a bunch of doctors out there who were last in their class which might be equally terrifying having a c- student being in charge of your health.
You left it sitting too close to your firewall.
You better stay online if he lands the job.
I cried. Nearly. It was late and I did... mkdir boxcar cd boxcar git init mv ../example.php ../boxcar_api.php ...note the missing ./ from the end of the mv. ARRRRRRRRGGGH!!!
somebody might recognize you or him
This guy is obviously management material.
Argh... I hate working with folks like this because it usually ends up with me (and other competent individuals) picking up the slack.
Argh... it's dicks like this who are getting the Jobs I want. you're an enabler.
&gt;should be just fine if your definition of "fine" is full of security holes and impossible to debug.
How can i comment on this blog? I want to flame him for the post where he enables PHP to be run on documents with .html or .css as the extention. RAGE
&gt;[Morph the screen into something cool](http://thedailywtf.com/Articles/Could-You-Explain-Programming-Please.aspx "I think of this frequently.")
It's not about whether he does, or doesn't know any web development. I don't care if he can or cannot write 2 lines of PHP. What I care about is the fact that he IS lying, and attempting to learn a small amount more about his lie so he can keep it up convincingly. If you really aren't multi-talented, don't act like you are. If you can't be a good judge of my health problems, don't act like you can. This behaviour pattern really doesn't make me feel comfortable.
Are you running insanely large DB queries or using other large resources with your script? I've seen PHP die with memory limit errors that were far below what we had set in php.ini. It turns out that SQL Server queries using FreeTDS allocate the entire result set worth of memory on any select queries you run even before you begin to fetch the data. PHP dies from OOM and the numbers it reports don't line up with what's really going on.
Aha.. now we're getting somewhere. Yes, yes I am.. massive massive data operations.. Any suggestions where I'd look? This is probably what it is, thanks!
Please don't let this dude be in the Boston area. 
My dreams have finally come true.
Were you applying for a job at the same time?
I was not. Because of the context, it totally makes sense to let him stew in his own juices, I'm just uncomfortable with seeing people mess with a guy who's trying to learn, even if he's only trying to learn enough to bluff.
My company made an habit of hiring people like that. They end up being managers because they can't produce anything.
Eh, the first sentence turned me off... &gt;After recently attending the MongoUK conference in London, it is clear that MongoDB is fast finding application amongst cutting-edge web developers. Not really. It's gaining popularity amongst developers who are interested in new technologies, but there are very few production installs where MongoDB is the main database. Then... &gt;As a relatively new concept for persistence, NoSQL (Not Only SQL) I know it's not written in stone, but I've *never* heard NoSQL referred to as "Not Only SQL"-- it wouldn't make any sense, since SQL is the *language*, not the database. Hell, "NoSQL" doesn't make sense to begin with, since a lot of NoSQL DBs *use SQL*, and is generally agreed upon to mean "Not a Relational Database" (NoREL). Other than that, good article. For some other interesting reads related to MongoDB, check out [these](http://codeascraft.etsy.com/2010/05/19/mongodb-at-etsy/) two [posts](http://codeascraft.etsy.com/2010/07/03/mongodb-at-etsy-part-2/) at Etsy. **edit:** I should say that MongoDB has come a *long* way in just a couple of months, and is an extremely viable database solution for read-heavy, dynamic applications.
FFFFFUUUUUUUUUUUUUUU!
Maybe I'm oldschool, but I vastly prefer doing my wireframes on graph paper with some [good erasable pens](http://www.jetpens.com/product_info.php/products_id/3687).
I have a problem with anyone lying. Uncool.
Well.. Here's my first suggestion: double or quadruple your max in php.ini and run it again. See if it fails. If it doesn't, use memory\_get\_usage() and memory\_get\_peak\_usage() at the end of the successful script run to see how much memory you were _really_ using. That's how we determined why our scripts were bombing out with errors relating to much less memory than our actual limit. If you can't get the script to run at any size, try limiting the data selection to 1/2, 1/4, 1/10, etc and multiply to estimate your actual usage.
&gt; Seriously, you spend more than $100 on Starbucks (or whatever corporate coffee swill you‚Äôre into) a month, and I spend more than that on hookers and blow in a single week. This statement saddens me, I am a freelancer with a small client base and honestly having to craiglist most of my clients. I still have standards (you pay a deposit, or I thank you for your time) but I don't have the portfolio or networking contacts to afford to spend 100 bucks at starbucks.
/design or /webdesign please
I know this isn't really the answer you are looking for, but given that this is a command line script, is it possible for you to wrap the massive data operations to run in intervals? Pseudo Code Example: &lt;?php $count = SELECT COUNT FROM table WHERE blah $interval = 1000; $times = ceil($count/$interval); for ($x=0;$x&lt;$times;$x++) { $limit_start = $times*$interval; $data = SELECT * FROM table WHERE blah LIMIT $limit_start,$interval //do stuff with data here } ?&gt; You said it is a rather large script so this may not be possible. However, you can get a lot of mileage by managing large data dumps this way. If you want to take it to the next level figure out how to fragment it out (i.e. Run a date range as each individual day) and pipe it to something like Gearman.
&gt;This also allows the system to implement a dynamic schema, which means that each item has its own schema. The advantages of this design are that each document can be slightly different, drastically different or completely the same, there are no restrictions. Yikes. I'm not seeing too many advantages here, but perhaps many more exceptions that need to be handled.
Easy is a reusable class with methods for generating img src URLs and then generating the appropriate output for them. Smart is using a cache layer to reduce CPU burn on your servers. One page with a dozen dynamically resized images is going to be noticeably slower to even a single user.
I made a small image hosting site that gets decent traffic (heavy days are around 20k hits). On upload all images over 150px wide are created with thumbnails. It does cause a slight bump in the server's usage but I have it handled concurrently during the rest of the processing and has never been significant. It depends though a lot on what you're being hosted on and how much power you have available to you. My site is hosted on a dedicated server with a core i5 and a few gigs of ram. Resizing images on it happens in milliseconds. If you're in a shared environment with a straddled CPU your results are going to be wildly varied. 
It's actually really easy to go back and change all thumb nails so long as you still have the originals. You just have to create a small app that will loop through all your images, run your new thumbnailer across them and output them over the old ones. I've had to do this a number of times. Creating new sized images works the same way. 
This example is actually pretty bad. There is no reason to create a blank image and get all of the sizing data. This is the code from [imgthis.com](http://imgthis.com) (my site) for converting images to thumbnails during upload: $thumb_size = 150; if(in_array($ext, $web_friendly)){ $command='-thumbnail '.$thumb_size; $thumb_name = $name."-thumb.".$ext; $convert='/usr/local/bin/convert '.$command.' /file's_path/'.$new_file_name.' /thumb's_path/'.$thumb_name; exec ($convert); } (I know, more lines then needed, I split it up for readability right now) This uses ImageMagick which has a built in thumbnailer that you simply pass the location of the original file, the thumb size (you don't have to give it both height and width, but can if that's desired) and the output location. The nicest thing about this is it keeps the original format, works with animated gifs and can even covert from psd's to png's or some other format on the fly (that's a separate routine, but is very very similar). I can't say that going through those steps every time an image is called that needs a thumbnail would be worth it either. It takes ImgThis about 30 lines of PHP to generate an entire page full of thumbnails. The amount of work it'd take to create each thumbnail every time would be incredible. The CPU over head alone would make this method terrible. Granted that the article isn't talking about using it on an image hosting site. But even if you had to only generate 20 thumbnails, unless you're never going to use them again I still see this as a really bad method that would just bog a system down. It's only cool use would be for a one time thumb that was never needed again. Even then it's more steps then really needed. You could simply thumb an image and then unlink it at the end of a session.
Very cool, thanks for sharing.
Is writing a query really that hard....?
You can always cast an object to an array in PHP. $json = (array)$json; var_dump($json['http://www.tokillamockingbirdcharacters.com/atticus']); To get the first, independent of the key: $json = array_values((array)$json); var_dump($json[0]); Alternatively, you can iterate over an object's properties without casting it. foreach ($json as $key =&gt; $value) { var_dump($value); }
One of the advantages of query builders is that they can take care of vendor-specific syntax and escaping rules. When done correctly, this means that cross-platform support is as easy as swapping out the database driver, at the cost of building the query as a string every single time. In this case, it looks like Idiorm is using PDO, which supports the majority of popular databases.
Another advantage is query builders is that you can pass them to functions that build on the query. 
Why not jumping into the PHP 5.3 wagon?
Because, quite simply, it's still not supported by the majority of hosts. One of the intended use cases for Idiorm is to clean up database access in legacy PHP apps, so requiring PHP 5.3 would be a big problem. The only real benefit to using PHP 5.3 in Paris would be the ability to do: $models = MyModel::factory()-&gt;find_many(); rather than: $models = Model::factory('MyModel')-&gt;find_many(); While this would be a slight improvement, the API is so simple anyway that I don't think it's massively important. It would be nice to use namespaces, but Idiorm and Paris together only define 3 classes in total (and so don't pollute the global namespace much), so again it wouldn't be a huge gain.
Interesting, how does it handle things like relationships, speed wise. IE if you were to grab an instance of a model with a foreign key, how many queries would it use to get all the foreign objects? O(1) or O(N)?
If you do ACID compliant queries and use PDO by itself, the same thing is achieved... Side note, how often do people really switch from one DBMA to another...? I'm not sure programming with an edge-case in mind is a good practice..
Getting related objects is a single query (per relationship). In the case of one-to-many or one-to-one, Paris will build a simple SELECT query with a WHERE clause restricting the foreign key on the related table to the ID of the original model instance. If the case of a many-to-many, Paris will build a query with the correct JOINs. Take a look at the code, it's not too complicated: https://github.com/j4mie/paris/blob/master/paris.php#L241
&gt; how often do people really switch from one DBMA to another While people rarely switch from database to database, having support for multiple backends in a commercial product can increase the number of people that can run your software, which can bring in more sales. (Or in the case of free or open source software, it can increase your popularity.)
[/r/wordpress is over here.](http://www.reddit.com/r/wordpress)
I have a larger site, but i use some variation of this for most of my other projects as well. It isn't perfect, but it makes development and creating builds wonderful. [root] - the domain name, e.g. ytmnd.com cache - programatically generated file store, not used much config - config files, global configs, subdomain specific configs, sapi configs services - m4 config files, server ip lists, etc. apache cron lighttpd mysql php sphinx cron - cron scripts docs - documentation. includes - all reusable code libraries. class_sub_dirs - when logical grouping is necessary, classes can have their own subdirs e.g. db.php, db/mysqli.php, db/mysqli/result.php misc - miscellanous services/code/tools that I want under version control. templates email www generic_messages - text templates, think localization, no html. themes [theme name] admin [other subdomains, etc.] tools - command line tools cleanup data_dump maintenance moderation misc web (web facing stuff by subdomain) admin api shared - stuff that can be shared/symlinked across subdomains (robots.txt, favicons, crossdomain.xml, etc) static - remotely synced subdomain. served by servers tuned for static content. assets js css flash images jquery mixed pdf sound store [other subdomains, etc.] www - php responsible for displaying actual pages. users some_page.php items other_page.php 
I was freelancing an inventory system and a first year engineering student interrupts me and goes "oh, HTML!" to which I replied "no, PHP" which he followed up with "same thing". Not appreciating such ignorance (his tone bothered me) I said to him, "I wouldn't expect an art student to understand the difference". He got my point and left.
Lol. Stop using database wrappers. They do miserable, awful things.
Write a wrapper class. I have some I can share.. &lt;? class FacebookUser { function __construct($shiz_from_api) { // blah }; function get() { return json_decode($this-&gt;shiz_from_api); } function set_fields() { // return your custom field array } # along these lines.. mine classes are much more mature.. 
Fuck yea they would, get me some contact dox
Propel simple query: $user = UserQuery::create()-&gt;findOneByUsername('j4mie'); $user-&gt;setUsername('Jamie'); $user-&gt;save(); And joins: $tweets = TweetQuery::create() -&gt;useUserQuery() -&gt;filterByUsername('Jamie') -&gt;endUse() -&gt;find(); p.s. just wanted to share some Propel love in here
but is it [web scale?](http://nosql.mypopescu.com/post/1016320617/mongodb-is-web-scale).
Even if that flexibility comes at the cost of performance?
For some applications, squeezing every last millisecond of performance doesn't matter. For others, there are ways to mitigate the string building performance hit, if benchmarking and profiling reveals it to be a major cause of slowness. It's not a perfect solution, it's simply a good one for a certain audience.
I'm not sure what the exact scope of your paper is, but what about PEAR/PECL and PHP frameworks/CMSes. They've had a tremendous impact in making PHP popular.
You might also touch on the way PHP interfaces with webservers and how it differs from standalone php (say in a CLI or cron job)
That's a really good suggestion. Think I should go with any specific one in particular? CakePHP, Zend, CodeIgniter.. etc? 
I keep noticing syntax errors :( &lt;?php include('essay-data.inc'); echo $thesis_statement; foreach($topic_sentences as $paragraph =&gt; $topic_sentence){ echo $topic_sentence; for($i=(1*$paragraph)-1;$i&lt;3*($paragraph+1);$i++){ echo $evidence[$i]; } } ?&gt;
Some of the differences in PHPs functionality vs other languages - A good starting point is PHP ability to do [recursion](http://www.google.co.uk/search?q=recursion) or it's lack of support for polymorphism.
Define your audience and tell us how they would expect to use the paper. Perhaps then we might be able to tell you what should and shouldn't be in your paper. Right now, your paper sounds very broad and that means you're not likely to provide anything of value to the reader. 
xdebug
Mention them, define why people use them, talk about Rasmus' view of them.
&gt; how it interfaces with MySQL And Postgres, and MSSQL, and Oracle, and SQLite, and Firebird, and a partridge in a pear tree. If you're singling out the "mysql" extension, I will hunt you down. One of the powerful and sometimes annoying parts of PHP is how relatively easy it is to take external libraries and interface with them. [There are nearly 200 official extensions, actually](http://www.php.net/manual/en/extensions.membership.php). It's powerful because there are so many available options. It's annoying because a few dozen of them are included by default and most of them are stuck in the global namespace, which makes what other languages would call the "standard library" a messy hodgepodge of horrors.
Nice! Thanks for the suggestions!
The paper is for an undergraduate programming languages course (which most juniors/seniors take). It will be read by my T.A. who is a graduate student. Throughout the course we have learned about parsing, looked @ different programming paradigms, learned about Pascal, Java, Scheme, LISP, Prolog. Then we had a week of presentations where everyone presented their specific language they had to research. This is part of that final assignment. I've already written the rough draft and given the presentation, so this is the final paper. I feel like PHP is so huge and awesome that I don't want to miss any important concepts. It should be read from the point of view of someone who has had some programming experience, and could easily get up to speed with the general language after having read it.
You might want to google "worse is better" in understanding PHPs success.
SALSA
You can add comparison with other languages, usage in different ways/extensions (for example [HipHop](https://github.com/facebook/hiphop-php/wiki/) or [SourceGuardian](http://www.sourceguardian.com/ixeds/how_to_install_ixed.html)), it's connection with Apache HTTP Server, [security](http://phpsec.org/) ([Suhosin patch](http://www.hardened-php.net/suhosin/)), [OOP](http://php.net/manual/en/language.oop5.php) capabilities, you can talk about [frameworks](http://www.phpframeworks.com/), future plans or [tools](http://www.smashingmagazine.com/2009/01/20/50-extremely-useful-php-tools/) (editors, code analysis tools, utilities).
If you want to score a good job it should be zero. I've had plenty of luck so far with interviews but I'm too lazy to look for a new job once I've settled into one.
You can talk about the inconsistent function naming. That shows it's roots more than anything. You have a set of functions named exactly as they are in stdc lib. You have a bunch of functions from other languages. You have new functions named completely differently. Some people criticize it, but coming from another language (like C), it just made me feel more at home right off the bat.
Yeah talk about PDO, new features (namespaces, closures, anonymous functions, fluent interfacing, etc), the way things "should" be done. Perhaps elaborate on some design patterns that are used with sites often (singleton bleh, MVC, Factory, Container, Dependency Injection)
Yeah talk about PDO, new features (namespaces, closures, anonymous functions, fluent interfacing, etc), the way things "should" be done. Perhaps elaborate on some design patterns that are used with sites often (singleton bleh, MVC, Factory, Container, Dependency Injection)
Use basecamp for client interaction. Much better. Personally, id love to see drupal disseappear completely. In my ~10 years of web programming, ive never come across a more frusterating and bug filled system. I spend more time trying to work out bugs on things that should just work than i do actually developing the website. 
Variable variables - http://php.net/manual/en/language.variables.variable.php Something I wish I could use in every language.
Oh, trust me I know. The decision to use Drupal was made long before they brought me into the project. My last month working on it has all been trying to ungunk the gunk the last guy did to make it even more of a clusterfuck than Drupal is normally. Unfortunately so much time and effort has been put into the Drupal site the client wants to keep it. FML indeed.
I had to laugh out loud... Drupal project = FML as well :) so much effort for so little return. To answer your question, i havent seen anything, but find basecamp to be a fantastic service for approvals/submissions etc.
You need to be clear on what your process is, but can be as straightforward or as complicated as you want. Essentially, you setup a structure to manage access to nodes through role and content type permissions, then build different report for different users and/or roles (e.g. author, graphics, code, copy editor, proofreader, translator, managing editor). You can create all kinds of custom workflows using permissions (on your own), or check out the Rules and/or Workflow modules, (I've also use Taxonomy Access for this). Alternatively, Organic Groups may provide some of the functionality you need (you didn't specify anything about your editorial process so it doesn't make sense to speculate too much). Adding in basecamp on top of this means a whole extra layer of crap that people have to wade through...but it's one way to handle it I guess. (I prefer redmine over Basecamp: much easier to track time and effort, and if you have your own server, very easy to install/setup.) 
I guess I can't comment on the site (PHPAdvent is great, but I wish I could leave comments), but with regards to the first article on localization, why is gettext never mentioned? It's so goddamn easy. Hell, I even wrote a .po file parser to send your translations to Google so you can translate your site quickly. https://github.com/leftnode/ProspectVista/blob/master/services/translate.php In action: http://leftnode.com http://www.prospectvista.com Look into gettext, it's awesome.
And why is he [reinventing the wheel](http://php.net/http_negotiate_language)? That article's just bad all around.
_Those who do not learn from bad API design are doomed to repeat it._ The premise of the article was quite nice. But really, text arrays with mnemonic keys?
&gt;And Postgres, and MSSQL, and Oracle, and SQLite, and Firebird, and a partridge in a pear tree. And ODBC. Which means a partridge in a pear tree, and everything else as well.
Since you've stated in the comments this is for a programming class, I would be sure to mention the scripting language / bytecode aspect. I would also talk about the way PHP embeds into HTML documents which contributes to its lower barrier of entry. I would also suggest swapping out MySQL for damn-near-anything, since it has built in support for half a dozen databases plus the almighty, ever-compatible ODBC. But it doesn't hurt to mention that PHP is commonly associated with MySQL, and the free multi-platform availability of both probably has something to do with its success as a widely deployed platform. I'm not sure how any of my suggestions will help you reduce your 21 page paper, however. How about a smaller font?
[mondongo](http://mondongo.es/) rocks!
&gt; why is gettext never mentioned? It's so goddamn easy. It's [broken by default on Apache due to use of per-process environment variables](http://us3.php.net/manual/en/gettext.requirements.php) and [not included by default](http://us3.php.net/manual/en/gettext.installation.php), therefore is unsuitable to use unless you control the server configuration. In other words, it effectively can't be used on shared hosting, the target audience of many PHP projects.
&gt; http_negotiate_language &gt; &gt; (PECL pecl_http &gt;= 0.1.0) That function is part of PECL's HTTP extension, thus not included by default.
It's become hard when you start adding conditional join and where to the query and end up repeating the same logic again and again. if (condition) { $wheres[] = 'uid = ?'; $arguments[] = $user-&gt;uid; } $sql .= implode(' AND ', $wheres); ........ this is where you start appreciating some help with something like:- $query = db_select('u', array('name', 'status')-&gt;from('users', 'u'); if (condition) { $query-&gt;where('uid = ?', array($user-&gt;uid)); }
Thank you! I was just going to post asking for this website because my boss just sent out 24 ways to everyone so i was going to reply with this
The gettext extension can't be, but there are plenty of pure PHP gettext parsers. [php-gettext](https://launchpad.net/php-gettext/) and [Pomo](http://trac.glotpress.org/browser/trunk/pomo) are two that come to mind. For example, WordPress uses Pomo, so it's definitely usable on shared hosting.
We currently use Drupal at my work and my fellow developers and I can hardly stand the hassle we go through trying to get it to do what we want. What have you transitioned to?
Don't forget anonymous functions. Classes are also underrated, as are the built-in interfaces (SPL) that allow you to mimic the behavior of any generic type and add language behavior customizations on the fly. Classes themselves are what allows for building in most design patterns. It also has all the handy set of filesystem, stream, socket, and XML functions and classes, making file management and information exchange between any two systems simple using any protocol (even one you just made up). Also, the COM class, which lets you work with several WIN system resources and components, including most MS Office products and some .Net objects. Also, don't forget it comes with a (mostly) complete manual in 10 languages: http://www.php.net/docs.php. _Usually_, solving any problem boils down to just reading the manual. All in all, it's an extremely versatile, portable, and controversial scripting language. Then again, so are many others, so you may want to hint at what areas PHP specifically excels or lacks in over other common scripting languages, including why it's [frequently one of the slowest of the popular languages in benchmarks](http://shootout.alioth.debian.org/). And, touch on [similarities PHP has with other popular languages](http://en.wikipedia.org/wiki/Comparison_of_programming_languages) in areas other than control structures, as this would help your audience relate from their own language niches and become more involved. But with only 20 pages, triple-spaced, 16 font, or however it is you kids are forced to do nowadays, good luck fitting it all in.
Those are annoying, but they're usually a fringe case and would likely make nice use a of a simple lib to build queries... *hrug*
 &gt; $row_object = mysql_fetch_object($results, Foo); FYI, this is not strict compliant. It should be: $row_object = mysql_fetch_object($results, 'Foo'); It works anyway because unquoted strings are implicitly treated as constants, but it's a bit sloppy. You can also pass constructor arguments ($params). And PDO supports this as well, in [PDOStatement::fetchObject](http://php.net/pdostatement.fetchobject) and [PDOStatement::fetchAll](http://php.net/pdostatement.fetchall), so you don't have to use mysql_* functions like it's 1999. ;-)
Wow, what a train wreck. I hope I never have to maintain anything you write. No thanks, I'll be instantiating my classes clearly and explicitly, and not relying on the object-instantiating equivalent of "register globals" to do implicit "magic" that nobody but the original author remembers enabling.
Are you out of your god damned *mind*? It has nothing to do with register globals. All it's doing is instantiating an object and applying public properties to that object with the same keys as the result-set fields. If that is magic to you then you need to get your head out of your ass and stop pretending you know enough about programming to harass other people about coding styles. This is simply syntactic sugar to abstract away often unnecessary lines of code. Is this magic to you? $users = new Users(); $username = $_POST["username"]; $password = $_POST["password"]; $user = null; if ($users-&gt;findUser($username, $password, $user)) { $this-&gt;set("user", $user); $this-&gt;redirectTo($this-&gt;getReferrer()); return 200; } return 401;
Stop using mysql_. But on another note, whilst this seems like a good idea, it doesn't seem flexible enough except for the most simple of objects. Add any relation in and its kinda pointless. I much prefer to have a mapper, so I can create objects from arrays I design, in ways that I want. Sure, it's more code, but it means you can do a single join query and have an object form, with other objects (of relations) formed with ease. Example: https://github.com/radiosilence/trouble/blob/master/trouble/kill.php
Not that you aren't right, but there are many better ways to handle this now.
I wish I was the beast with billion upvotes. mysql_ (and the rest) should die. At least use PDO.
True; but a lot of the audience of PHP Advent (since it's supposed to be advanced PHP) probably have more control over their hosting situations. Still, it should at least mentioned.
I think he has a point though, if you saw this: $row = mysql_fetch_object($results,'Foo'); You might not know that there's now an instance of class Foo in $row. You do because you read this post, but like the OP said, most people have no clue about this, and writing code most people wouldn't understand is not a good idea IMO. It's similar to register_globals in that a bunch of variables are being set behind the scenes, but doesn't really share the same set of problems. I'm not sure what your code has to do with all this though, as it doesn't use this function but rather some sort of ORM. In any case, mysql_fetch_object might be useful if you have to code something in five minutes, but for real world projects, it's outdated. Use PDO or an ORM.
The mysql_ extension, continuing to prove some programmers stop bothering to learn once they think they know something.
&gt; A lot of people have asked about mysql_fetch_object() vs the other mysql_fetch methods, and a lot of other people have responded with the same lame explanation that entirely misses the point. Who? Where? Please provide links to these comments as I would like to have an example of that which you are referring. Thanks.
While I understand the usage for CMSes and MVC Frameworks I prefer to do things in a different method. Because it is usually only me working on the the website and they are small I tend to have my layout in a file, my database connection stuff in another and commonly used functions in another file. Then I just write a straight .php file and include what I need to.
No, it's not possible. You'll need to do something like this: public function timestamp($month = null) { if ($month === null) $month = date("n"); } 
That's what I thought, thanks!
Good points. Regardless of whether or not you think this is a good idea, I'm glad I now know this so I'll know what's going on if I ever see someone else do it.
Nope. The PHP manual states "The default value must be a constant expression, **not** (for example) a variable, a class member or a **function call**.". http://www.php.net/manual/en/functions.arguments.php#functions.arguments.default
[Google it?](http://lmgtfy.com/?q=mysql_fetch_object+vs+)
He's right that the 'webapp' that goes along with it is a hack :) It looks quite handy, though it's not very generic at the moment. I'm playing around with it to try and get it a bit more generic for what I want to use it with (git support is a must for me), if I get anywhere I'll update again. 
To quote myself (emphasis added): &gt;Here's a *very rudimentary* example:
Thanks, honestly
No problem, hope I was helpful.
Thanks for the heads up. Like I said, it was a rudimentary example. And you're right, I should be using PDO.
Does anyone know the reason why this technical limitation exists?
Yes, I realize, now, that I shouldn't be using mysql_ functions at all. I used them because that's what I saw others using. I'm a novice, self-taught PHP coder, and I'm honestly just now dipping my feet into OOP. I thought that mysql functions were the only way. Maybe that was a bad assumption, but that's what I saw at the time. I didn't know about PDO. I probably should have framed my post as a question, rather than a demand, I'll give you that.
Presumably because it is resolved before execution actually begins.
The first thing I thought of was: function example($useless = example()) { echo "Enjoy figuring this out compiler :D"; }
Lol, that could be fun.
I feel [this](http://stackoverflow.com/questions/13569/mysqli-or-pdo-what-are-the-pros-and-cons) is relevant to this comment. As an extension, to explain exactly *why* one should stop using PHP::MySQL and PHP::MySQLI.
If you really wanted to highlight ease-of-use and performance, Codeigniter would be my vote. The documentation is amazing as well. It's snappy to learn and [a lot faster](http://avnetlabs.com/php/php-framework-comparison-benchmarks) than most of the other large/popular frameworks out there.
Demons flying out of your nose is almost never fun.
The way OP words his rant leads me to believe that this is a relatively recent occurrence and possibly happened on Reddit. I'm just interested in what triggered his rant. His recent Edit has answered my question, but thanks anyway
You mad?
Yeah, I didn't mean "people on Reddit," in particular. Maybe I should have just titled this post "Sometimes people give bad advice on the internet."
Aah, ok. Fair play. :)
*Furious*. No, not really. Just new to the game. Defensive but humble.
Exactly this.
symphony is the most interesting framework (I know of) in terms of what is going on under the hood. Definitely worth a look. http://symfony-reloaded.org/
&gt; Look real hard at the mysql_fetch_object() parameters Look at the changelog; those parameters were added in PHP5 yet the function has existed since PHP3. While you are currently now correct, for the vast majority of PHP's existence mysql_fetch_object() was nearly identical to mysql_fetch_array() with the result casted to an stdClass object. By the time those extra parameters came into existence, nobody cared anymore. 
As long as you don't have to talk to other web servers, just remember to set UTF-8 everywhere. Database, Content-Type header encoding, `&lt;meta charset="UTF-8"&gt;` is enough most of the time.
Yeah, an Internet that doesn't talk to other web servers. That'll catch on.
A bit touchy, aren't we? There are, however, many many programmers who don't have the excuse of being self-taught to fall back on. Programmers who have been using PHP for a decade and still use outdated methods. It was less a comment to YOU then about my thought to every post I see about the extension in general. The fact it touched a nerve in you, however, does make me wonder a bit. I've lost track of the number of posts on stackoverflow from 'professionals' who give examples with mysql_, filled with fun stuff like SQL Injection vulnerabilities. 
[In Russian, they're called "Kryakozyabri"](http://ru.wikipedia.org/wiki/%D0%9A%D1%80%D0%B0%D0%BA%D0%BE%D0%B7%D1%8F%D0%B1%D1%80%D1%8B)
[is_null()](http://ca3.php.net/is_null)
Of course if you're doing server-to-server, presumably you're smart enough to... look at their content-type header. But only if it's another PHP server. Every other modern language defaults to UTF-8 :)
missing one:http://certifiedtorock.com/
At the top: &lt;?php ob_start(); ?&gt; At the bottom: &lt;?php echo filter_var(ob_get_clean(), FILTER_SANITIZE_STRING, FILTER_FLAG_ENCODE_HIGH); *What does this do?* It takes the script output and encodes only the 'high' characters. What are the 'high' characters? They characters are identified by their character ID number as being above all the other ones (namely all characters above 127), and -- interestingly -- only accented (and other non-latin, eg: Japanese, Russian, etc) characters get encoded properly. Read up on what the [output buffering](http://ca.php.net/manual/en/book.outcontrol.php) and [filtering](http://ca3.php.net/manual/en/book.filter.php) PHP extensions are and how to use them properly.
The only thing this post is missing are the costs of taking the exams and/or classes. How many tens of thousands are we talking about here?
It's an issue in a lot of other situations, like exchange and conversion of data. Like someone uploading text, adding to it in a form various encodings getting mixed up ... joy is endless and if *I* get it wrong customers won't pay.
People still consider certs important?
Off topic but I tried in R: example &lt;- function(x=example()) { return(x) } &gt; example() Error: evaluation nested too deeply: infinite recursion / options(expressions=)? Error during wrapup: evaluation nested too deeply: infinite recursion / options(expressions=)?
I am also self taught in the ways of PHP, the book I bought to help me used the mysql_ extension in it's examples, it took me many years before I eventually stumbled on PDO in the documentation, and gained enlightenment.
That still doesn't help when all of your string functions don't work properly with high range characters.
Certs are the biggest joke in the industry. People who work a trade go out and get certified. Anyone these days can go get a PHP certificate and call themselves a programer. If you see programming as a profession not a trade then these certificates are bogus.
I've used FPDF, which uses X,Y as you describe, but it only took half a day or so to make an invoice template and integrate it. I was surprised at how quick and simple it ended up being.
Sorry, I definitely read it as more of a personal attack. My bad. Yeah, it's a little baffling, I realize now, how many people are using something that's so outdated at this point. Here's the thing that gets me: *Dreamweaver* lets you set up database connections, run queries, etc., with a few clicks of a mouse. And behind the scenes? It's a horrible mess, with lots of mysql_fetch_assoc(). We don't need to get started on Dreamweaver gripes (I have many...), but I'm a little astonished that Adobe of all people would be using ‚Äì like you said ‚Äì such outdated methods. In fact, when I was first learning how to access DBs with PHP, I thought "well, I'll take a look at what's going on behind the scenes in Dreamweaver. Adobe probably knows what they're doing." I guess not.
Try [WKHtmlToPDF](http://code.google.com/p/wkhtmltopdf/). It's open source, and it renders PDF files from standard HTML+CSS webpages. So it's as easy as running: wkhtmltopdf www.google.com google_homepage.pdf wkhtmltopdf bill_of_lading.html bill_of_lading.pdf You just generate your output HTML, write it to a file (it's easier than using pipes), render it with wkhtmltopdf: &lt;?php $tpl_vars = $_POST; // ... somewhere around here you should do some user-input checking for safety :-) $output = &lt;&lt;&lt;EOF &lt;html&gt; &lt;head&gt; &lt;style type="text/css"&gt; html,body { margin:0 } body { font: normal 13px 'Arial' } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; Hello {$tpl_vars-&gt;firstname} &lt;/body&gt; &lt;/html&gt; EOF; file_put_contents('/tmp/output.html', $output); exec('/usr/local/bin/wkhtmltopdf /tmp/output.html /tmp/output.pdf'); ?&gt; AFAIK there are Mac, Linux and Windows binaries available on their Google code page. I've tried most of the other PDF libraries. Most require you to design your PDF files with complex PHP commands: $pdf-&gt;drawRectangle(0,0,0, new ColorRbAlpha(255,255,0) or something, vs: &lt;div style="border:1px solid red"&gt;&lt;/div&gt; With WkHtmlToPDF, testing your designs is as easy as viewing your template in a WebKit based browser (Safari/Chrome), using custom fonts is as easy as a stylesheet with the @font-face tag. And you can use all the rounded corners/box-shadow stuff that comes with CSS3 as well. EDIT: Not sure if my post was clear on the fact that the 'WK' part of WKHtmlToPDF stands for WebKit, which is the HTML/CSS rendering engine that powers Apple Safari and Google Chrome. So don't be fooled by it's lower-than-one version number, it's not some experimental home-brewed PHP4 library that hasn't been updated for a while and will give you a headache when you're on a deadline. EDIT2: bugfixes :-)
1. Yes actually. 2. I'm aware of that (I was making an analogy). 3. Your code sample here doesn't appear to be related to the original post, but yes, the OPs method is (yet another) example of magic PHP anti-pattern crapola.
Check out the [Bush hid the facts bug](http://en.wikipedia.org/wiki/Bush_hid_the_facts). Relevant, and will make you laugh.
I hate MacRoman encoding, thats the kind of stuff Steve... Do we need cool looking " , or ' ? No we are good with a standard set. A black diamond with a ? in the middle sure puts me in a bad mood.
dompdf is dead simple. Are you using "page-break-after:always" to fix your pagebreak problem?
I have no real problems with your example. It does demonstrate the language feature quite well. The problem I have is with the language feature itself. I speak from experience when I say that things like this, these "shortcuts", are just a bad idea. They result in unclear/non-obvious code that is hard for other developers to maintain. Bugs can be introduced by other developers that will make people really scratch their heads. What happens when a more experienced developer swings by, notices that you forgot to declare your fields, so he adds explicit field declarations, but makes them private instead of public? No IDE is going to be able to help you refactor code like this. What happens if some developer does a "find references" of a field (or uses the IDEs build in "rename" refactoring), then renames the field, fixing all the explicit references? Oops, your implicit reference wasn't fixed. You end up with a bunch of classes with publicly settable/exposed fields, which is a bad practice in its own right, especially if those fields were never declared (e.g. like in your example). You are much better of with more code that is explicitly expressed and can be groked by other developers with those developers needing to be aware of specific PHP-isms such as this. Generally speaking, you should always err on the side of being explicit in your programming, actively avoiding shortcuts that might result in implicit (a.k.a. magic) behavior. When you do use magic behavior, you should comment your code very clearly every time, which, you will find, is much more time consuming than not using the magic to begin with.
That would have been an exceptionally apt title indeed.
PHP is not lazy: http://en.wikipedia.org/wiki/Lazy_evaluation
Browsers post formdata in the same charset as the page the form is on, afaik
why downvote this? Does the downvoter have some insight on the matter, or just personal preference?
PDFlib.com german = good the free version should do what you need, but if you don't like doing x:y, look into their blocks functionality, you can basically draw squares in acrobat that you can fill in later. i am working with a server license, and once you get going you can generate some amazing PDfs. I have a project that i am putting 3D objects into a PDF, pretty fun stuff
personal preference? [http://php.net/manual/en/language.types.null.php](http://php.net/manual/en/language.types.null.php) says that is_null is 30x slower than === null. yea, yea premature optimization but i don't see the benefit. it's arguably marginally more readable.
If you're going to do mySQL interaction, learn PDO, or at least mysqli_. Learn about prepared statements. Learn what SQL injection is. Don't ever use addslashes() to sanitize data. By the way, if like fetching data as an object, PDO has a neat feature - when grabbing a row into a custom object, you can [specify to either have the properties assigned BEFORE _construct is called (default) or after _construct is called](http://stackoverflow.com/questions/2862279/php-pdo-fetching-data-as-objects-properties-assigned-before-construct-is-cal/2862712#2862712)
You can, however, pass a function as an argument in php5.3 (just not as its default value)
Are you using v2 or v3?
The best I've used is the [xhtmlrenderer project](https://xhtmlrenderer.dev.java.net/), which is java based, but quite reliably transforms most css2 and css3 based HTML to PDF. I've got an implementation of it that's used in SilverStripe at http://github.com/nyeholt/silverstripe-pdfrendition, but you should be able to get an idea of what's necessary. 
As I stated in the blog: I don't consider certifications myself all that useful, but it WILL establish a communication level between either boss-employee or company-customer. Having a driving license doesn't make you a good driver BUT you it does mean you have the necessary skills in becoming one. That A) doesn't mean you can't be a good programmer without certs en B) doesn't mean you are a good programmer when you have them. As for costs: everybody I know always brag about how good they are in X or Y, yet they all want to take the classroom studies. Yes, they are very expensive but taking the MySQL certifications only costs 150euro per exam, 50 euro for the book and maybe 5 or 6 evenings doing the quizes and browsing the book.. In total I've spend somewhere between 1000-1500 euro's on total on exams, books, parking-fee's, gas. Which of course is a joke for companies if that mean they can convince a customer to do business. I really wish to see better certifications out there.. They should be harder and they should be more practical. Then, and only then we actually can say that certification means mastering your skills. But alas, it wont generate enough money for the examination companies so don't see those certs coming very soon... 
That is because I have no real idea on those costs. Tens of thousands are actually a safe bet. Considering zend php5 will go for around 2500 euro's for a 2/3day course, mysql dbe/dba even more I think. 
the === check will check if the TYPES of the value are equal. Which is a very fast check without even caring what's inside the vars (php internal zval's). The is_null() generates additional bytecode which has to be parsed, an additional function which has to be called, and in the end (without looking in the php source codes), i bet it does the same type of check as the === does. 
I'm actually so impressed by reddit's ability to suppress incompetence (such as my own) that I might just start a post about it. And I mean that in all honesty. :)
All I can say is that this has been a very insightful experience. 1. Make a cocky statement on Reddit, thinking you know what you're talking about. 2. Reddit dudes tell you that you're wrong, show you a better way. 3. Become a better programmer. 4. Thank you, Reddit. And I mean that honestly.
You are part of the problem
How about iText or FOP (http://xmlgraphics.apache.org/fop/) ? You could potentially use XSL to transform your HTML into XSLFO and then to PDF (using FOP). Both of these are free BTW (FOP is OSS). 
I also wanted to suggest wkhtmltopdf. It's so much easier to use than all of the other alternatives I've tried. 
+1 to this. It's DEAD easy to make it work. We were using fpdf to generate a report, but it was so hard to maintain and change the output. Switched to this method and no more problems.
PDFlib is the best of the bunch by a serious margin, but the license is expensive (way more than your "couple hundred bucks", unfortunately). Whether it's worth it (or whether you can get away with the free license) depends on your situation.
&gt; Every other modern language defaults to UTF-8 The HTTP standard specifies that the default encoding is iso-8859-1.
Perhaps you can use [livedocx](http://www.livedocx.com/) - It has [php bindings](http://www.phplivedocx.org/articles/brief-introduction-to-phplivedocx/). (I have no real experience with the product, but I heard good things)
To me, a certification demonstrates that someone was having trouble finding work based on their actual skills and therefore has resorted to a different approach. I specifically avoid hiring people who play them up on their CVs, and so far, that's worked very well for me. Of course, some people have them because it was required by a previous employer, so I wouldn't refuse to hire someone just because they had the stink of certification on them. But if they actually go out of their way to tell me they have one? Alarm bells.
Thanks for this - I have an item on my project plan listed as "replace FPDF with something that will take HTML+CSS as input and spit me out a PDF." So much easier to maintain.
cool, looks like the consensus is wkhtmltopdf. i had good luck with htmldoc. it's another binary or have to buy or compile yourself. it's so-so with css, but can handle large files quickly. 
HTTP isn't a programming language.
2 more options: 1. LaTeX 2. CutePDF writer -- print anything to PDF 
&gt; The execution time difference between ===NULL and is_null is less than 250 nanoseconds. From http://ca3.php.net/is_null
So at least we can all agree it IS slower? But I agree on the fact that you can better spend your time optimizing other things...
I didn't disagree that it was slower, but I think the amount of downvotes was unwarranted.
Algorithm-wise, it'd be more efficient to make a SplHeap and binary-search that than either of those two, which are both linear searches.
Are you sure? I don't think isset is actually doing a search, it's just a check to see if a variable exists or not basically. That's why you can't do it on array values, just keys.
not necessarily, especially if that charset is not fully supported by the client machine - or something, at least I've seen it not working.
It still has to look up that array and its key in the symbol table. The source isn't easy to read (I'm not sure I was even looking at the right isset code) but it doesn't look like it's doing a hash lookup for it.
talk about the upcoming [traits](http://simas.posterous.com/new-to-php-54-traits) in 5.4
That would be an absolutely ancient browser. Even IE5 supports unicode.
This style is rather odd and arbitrary, but whatever works for you.
That sounds like nonsense. Either embrace PHP or go to a different language. Get yourself a working USB keyboard while you're at it.
[http://code.google.com/apis/finance/](http://code.google.com/apis/finance/)
There is no specific PHP protocol for this type of data... if that's what you're asking.
Nobody should be using phpBB2. I hope he's not using phpBB2.
Actually, most sites backend DOESN'T talk to other web servers. Sites that DO talk to other web servers are a minority... And, no, ad networks and analytics don't count --99% of the time they don't happen in the backend.
You're using a date as a primary key field (if I'm following you correctly), which is highly wrong. Primary keys should be unique in every instance, an auto-incrementing integer value would work fine. If you need to order by query date, you can append 'ORDER BY [date_column]' in your SQL query.
or you can use webmaster tools ..
Not sure if this is what you are after: [Help with creating a dynamic HTML table in PHP](http://www.reddit.com/r/PHP/comments/dropc/help_with_create_a_dynamic_html_table_in_php/)
just put it in a loop for the amount of times you need to iterate through the items in the database table and tie that to your html table output
well I used the date as primary key because all the update queries I'm going to have over the curse of the day will only affect that particular date. It should be one row per day. Should I still use an id field as primary key?
Yes, it's bad design to use dates as keys as they're not unique.
sorry... I'm n00b here... how come dates are not unique?
Keys are used to differentiate each entry in a database. Since it's possible to have multiple entries for the same date, it's a bad idea to use a date as a key.
OK, I understand. I thought that since the rest of the fields would be updating all the time I could just use the date as the main key. Each new input would add to the last one, so I guess I should code something to first query and find out the input and then update with the field I got back from the query plus the new user input
I use to do this back when I was using phpbb as a very basic CMS for our department. We did so because while I could get the IT department to let me run php they wouldn't install mysql so phpbb was the only thing out that supported mssql. I learned enough to know that I will NEVER use phpbb for such a thing ever again. The things they do to the data that goes in to the database is annoying. I moved to [SimpleMachine Forums](http://www.simplemachines.org/) and haven't looked back. Their [ssi](http://www.simplemachines.org/community/ssi_examples.php) system makes it fairly easy to pull the information you want in an array and do what you want with it afterwords. 
I hadn't even got that far. I was accessing it directly through the class interface and it wasn't taking most of the CSS. I changed it to inline styles and tables like I would if it were an email and it appears to be working ok now.
I clicked thinking this was another "My girlfriend caught me [verb]ing two [noun]s. Now what?" thread. Imagine my surprise when I had to use my brain instead! In the example on doctrine-project, they show have $this-&gt;hasMany(), not $this-&gt;hasOne(). What does that change do? 
Use the NestedSet Behavior: http://www.doctrine-project.org/projects/orm/1.2/docs/manual/behaviors/nl#core-behaviors:nestedset More info: http://www.doctrine-project.org/documentation/manual/1_2/nl/hierarchical-data 
hasMany works, hasOne does not - but I don't see any changes via phpMyAdmin, and I can't access it via -&gt;Parent or -&gt;Children, so I'm guessing it's not working.
Thanks, will take a look!
For ease of editing for the management types, I wrote a system that accepts Word XML on a socket (XML so you can do template-editing), writes it out to a file, launches Word with the file, prints to a PS File printer, then returns the PS output back to the same socket. You can then use the PS to convert easily to PDF. It's a bit of a hack, but it works. I wrote it one day thinking "yeah this may get used occasionally", it's now processed over 90,000 files..
That sounds pretty cool!
I love CutePDF, but can they do it on the fly with a mouse click rather than on the client side?
Happy Birthday! Or am I too late? Anyway, I'll look into it. 
I'll check it out! It looks promising!
Yeah, the company can spring a few hundred for a product we might use a few times a year (for various products), but several thousand? Probably not a wise investment at this time. Thanks though!
Looks promising, thanks!
Unfortunately none of our hosted servers runs tomcat. That's the extent of my knowledge of Java (other than applets) so It is probably beyond my current skill set. Thanks for the tip though! 
I don't mind x,y stuff, just not budgeted for it and the boss is pushing for a faster solution... Thanks for idea though, might come in handy later. 
Looks great! I'll look into it. Got a 'hack' job with table layouts and dompdf going pretty quickly but this looks very nice. Obviously I probably won't switch gears at this point, but I'll probably push this on the next project for sure! Even a personal one. 
Yeah, I spent several hours doing research and wasting time trying to get FPDF working on my local server. Worked fine on the webserver though. Unfortunately budgeted time was wasted and the boss suggested we try something else... even though I had an extended class ready to go at that point... Someday I'll have a huge database in my head of this stuff and won't waste a bunch of time looking for solutions (and be better at BSing the boss, haha). Thanks for the reply! 
Doesn't need tomcat, just the java binaries installed on the host. The git project I linked uses it from PHP to do the transformations (via calls to the commandline)
First I've come across this, it looks interesting. I've only just skimmed their manual, and from what I can tell it doesn't do headers and footers using CSS3 stuff, but requires specifying external files that are composed in at PDF generation time? Looks to be the same for ToC. Or am I missing something? 
Edit: I just had a good laugh at myself since I was about to tell you "yeah, go ahead, using the unix timestamp is a-OK" since it's an integer and lets you do "one record per day". Then I remembered the problem of _hours_, _minutes_, and _seconds_. I think I'm getting careless.
You should be able to get away with having a unique key set of `(SMALLINT) year_ID`, `(TINYINT) month_ID`, `(TINYINT) day_ID` with each representing the numerical value of the date part _IF_ all application data dealing with that day can be represented by only a single record. In fact, this means Tuesday, January 19th, 2038 will be hell of a lot easier for you to deal with. Edit: just be sure to programatically validate date values before you insert records. For example, ensure `month_ID` is a value between 1-12, and `day_ID` is a value between 1-_number\_of\_days\_in\_the\_month_ and accounting for leap-years. The _day_ part is the catch, because it could easily cause records to overlap during the first week of months if you're not accounting for the exact number of days during that calendar month (ie `2/31/2010 === 3/3/2010` according to some date functions). Also, I say year_*ID* etc as the field names because "year", "month", and "day" are sometimes the names of functions.
Sorry to distract from the topic at hand, but what's this Doctrine PHP library I keep hearing about? What kind of issues (either typical, special or obscure one-off) does it solve, or what kind of problem-solving theory is it based on? When is it good or _not_ good to bring into play?
I'm learning how to use CodeIgniter. This helped me immerse myself very quickly: http://www.phpandstuff.com/articles/codeigniter-doctrine-from-scratch-day-1-install-and-setup Basically it allows me to do some neat things with databases. Here's one way of inserting new data into the database: $u2 = new Affiliate_Model; $u2-&gt;username = 'testuser'; $u2-&gt;password = 'mypass'; $u2-&gt;email = 'testuser@homeceuconnection.com'; $u2-&gt;ref_string = Affiliate_Model::createRefString();; $u2-&gt;referred = ''; $u2-&gt;save(); Affiliate_Model is a class containing information about that table: $this-&gt;hasColumn('username', 'string', 255, array('unique' =&gt; 'true')); $this-&gt;hasColumn('password', 'string', 255); $this-&gt;hasColumn('email', 'string', 255, array('unique' =&gt; 'true')); Which also contains relationship information: $this-&gt;hasMany('Affiliate_Sales_Model as Sales', array( 'local' =&gt; 'id', 'foreign' =&gt; 'affiliate_id' )); which means if I instantiate an Affiliate_Model object, I can access Sales by doing: $affiliate = Doctrine::getTable('Affiliate_Model')-&gt;findOneByUsername($id); foreach ($affiliate-&gt;Sales as $sale){...} You'll want to read through this page: http://www.phpandstuff.com/articles/codeigniter-doctrine-day-6-models-relationships And this one: http://www.phpandstuff.com/articles/codeigniter-doctrine-scratch-day-7-fixtures-forum-list For a better explanation, since I'm horrible at this explanation stuff. Long story short, I am falling in love with Doctrine and its' ease of use.
Personally, I learn better by reading code. Your code examples all make sense and explain it pretty well (in fact mirror what I'm trying to create from scratch if I can just get past this bout of writer's block). 
I'm glad you liked my articles :) I haven't done the Parent/Children thing yet myself, but have you tried NOT setting the 'equal' option? I believe that has a slightly different purpose. Otherwise I don't see why your code shouldn't work.
one of the most useful things doctrine does is to take a JOIN and give you objects, so you could query your customers table, join it with orders and payments. Then you get back an array of customers, each customer has an array of orders and each orders has an array of payments. You can update, add and delete things from this big array of arrays and then hit -&gt;save() and it all works. It's like magic. Once you get over the steep learning curve and memorize all the syntax it delivers a lot of cool.
Are you using Doctrine 2? What you want is described in detail here: http://www.doctrine-project.org/documentation/manual/2_0/pl/association-mapping:one-to-many,-self-referencing Basically, you want a self referencing one to many with a JoinColumn (foreign key).
The problem here, of course, is that you're using some ridiculous foundation library that does nothing of value. create table example(id integer, referrer integer, foreign key(referrer) references example(id)); insert into example(id,referrer) values(1,null), (2,null), (3,1), (4,null), (5,1), (6,2), (7,null), (8,1); select * from example where referrer=1; But hey, have fun with your ORM, which I'm sure you justify in terms of how easy it makes everything, that you have to go to Reddit for help with a simple foreign key. Pro tip: the reason no ORM is dominant is that not one of them offers real value over raw SQL or DB abstraction libraries like PDO. Stop wasting your time. 'Cause clearly, you don't want the strong correctness guarantees a foreign key offers, and instead want to type the phrase "one to many" a lot. 
Actually, he just wants a foreign key. The side count of its relationship is completely beside the point, and is a bunch of noise that's keeping him from seeing the actual defect in his code. (It also is besides the point that it's self referencing. You might as well point out that it's an integer, or that it's got unary cardinality, or other stuff that just doesn't matter here.) One of the many problems with ORMs is that the novices who use them get bogged down in repeating magic phrases that aren't actually part of the problem.
&gt; what's this Doctrine PHP library I keep hearing about? It's yet another ridiculous abstraction library which pretends to make everything easy by attaching a bunch of buzzwords to glue, and brags about how much time it saves you by having you write out a bunch of POD that takes five times the space than the SQL that you're writing does, and offers much less flexibility and much softer correctness guarantees. Like CakePHP, CodeIgniter and other pretend-time-savers, the second someone mentions it for any reason other than "I was forced to use" or "My job was to remove/replace," you know to never to hire that person.
 create table users(id integer auto_increment primary key not null, referrer integer, username varchar(255) not null unique, password varchar(255) not null, email varchar(255) not null unique, foreign key(referrer) references users(id)); Yeah, I can see how you'd want all that miserable glue and its lack of correctness guarantees, just to get a few getters and setters written for you, so that you can have the much less correct data model that isn't defined from that ORM instead of the one above. *cough* And then have to ask Reddit for help setting up a simple primary key. Fix your priorities, sir. Libraries like these are a fucking albatross.
Please don't. There are literally hundreds of ORMs and DB abstractions out there. The reason none of them are common or popular, let alone dominant, is that they do not add actual value. The problem of dealing with SQL dialects is, in an ugly way, tied up by PDO. ORMs are a waste of time.
The person you're asking, from his answer, obviously has no idea. Which shows that ORM users don't even begin to consider the relationships they're making, as they haven't even learned their libraries well enough to pull the correct member function. If he were writing this in SQL, which takes less space, gives much stronger guarantees and would force him to think about his work, he wouldn't have this problem. There's a reason you've never seen a high quality codebase built on the back of an ORM. Prove me wrong by naming one, if you like, but I'm not holding my breath. ORMs are a gigantic red flag of novice developers.
You're choosing data accessors in terms of what you've seen working? Dude, you need to put down the ORM bong and figure out your data model. This is ridiculous. ORMs will make you retarded. Look what's happening to you right now. Seriously, think about this for a second before you spastically downvote and walk away angry. "What's the difference between hasMany and hasOne?" "This one works and that doesn't, so I'm guessing it's not working." Yeah, that's the kind of design understanding which should underlie a referral system. You aren't walking into a legal trainwreck, or anything. No sir. Nob'dy's going to sue you for the referral payments that your system forgot to write down, which you still owe them.
Not going to downvote you. Will actually give your words (all of them) serious thought. Thanks.
Ahh! Im in too deep at this point lol! But thanks though. I'll definitely check this out for the next site I make. 
That's okay. Someone else who doesn't know what downvote means did it for you, and you didn't upvote for the help you received.
After reading through this thread, I get the feeling that an ORM murdered your parents. If that is the case, I'm sorry for your loss.
He came here for help solving a problem, and there's nothing wrong with being a novice. It is uncalled for to be so rude about someone who is trying to learn.
You're being downvoted for being rude. You should consider the tone of your messages. You are coming across as hostile and obnoxious in this thread. We get it, you don't like the library OP is trying to learn to use. Opinion noted.
Sheesh man, just lay off. I get that you might hate ORM (I'm not a fan or something myself), as you've furiously tried to prove in this thread. But the fact is that the side count *is* important. The fact that it is self referencing *is* important. Even if you model the database yourself and write the queries yourself, the results will differ if you don't consider those facts.
It just seems like you're under the impression that I don't know anything about working with databases. I understand if you don't like the tool I'm learning, and you did bring up some valid points, even if they didn't have anything to do with my original question.
He's not saying he doesn't like that particular library. He's saying that the fundamental approach taken by all these libraries is a waste of time.
You should downvote him, actually. He didn't help you at all with the question and instead he insulted you quite a few times.
I loved your articles - and apparently so does the rest of the internet because it's consistently pointed to as one of the first things someone familiar with PHP but not CI should read. Really good job! Now do something similar for Kohana haha
That's pretty much my impression, yes.
Why is the side count important? "The fact that" doesn't make it a fact. Why is self referentiality important? Where would the queries vary? Easy to make claims. Hard to show them to be correct. Luckily the proggit sheep agree blindly with you, allowing you to feel correct without having shown yourself to be correct, simply by saying you're right.
That's not what the downvote button is for. Pointing out why you're abusing the system doesn't change that you're abusing the system.
Thank you.
I'm not actually being rude, if you stop reading into what I said things that aren't there. Besides, that isn't what downvote is for. And you know it.
It's unfortunate that I get downvoted for showing example code, explaining how to do this safely, faster and easier, with stronger data protection, and you get upvoted for a nasty remark that isn't particularly funny. Welcome to why proggit doesn't have any non-sheep help.
I actually haven't downvoted you at all, but I'm assuming the only reason you are getting buried is your tone. None of your information is wrong, you are just presenting it in a pretty confrontational way and that isn't how most people like to be corrected/taught. Anyway, not really looking to get into an argument about it, but if you do really want to help people I would try sounding less condescending. If you are looking for more serious discussion I would recommend [/r/coding](http://www.reddit.com/r/coding/), or one of the other programming reddits that aren't flooded with "help me learn" threads.
I'm currently using [html2pdf](http://www.tufat.com/s_html2ps_html2pdf.htm). It generates a PDF based on HTML/CSS, and it is all PHP (not command-line). It does require some PHP plugins and GhostScript installed, but I think most servers should be ready to go out-of-the-box. I've had good luck with it so far. 
The "to" in your title should be "too." Learn how to haugh tew right Engwrish werds. Grammar Patrol out.
Thanks for the advice! I checked this out today at your suggestion, and because of the high regards I have for Webkit and Qt. This thing rocks! For those who don't know, it generates the PDF with text anywhere your HTML contains it. This saves a ton on the file size and allows for copy / paste in the reader. It also turns any hyperlinks in the HTML document into hyperlinks in the PDF. The binaries are statically compiled - there are no other libraries or external dependencies you need to run it. This is a very nice utility to have!
Not only are you being rude, you're not contributing to the discussion. Which, as much as you don't like it, was about a database access and logic issue using the Doctrine library. Your first post MIGHT have been of value if you didn't surround it with insults. Yes, there are alternatives to Doctrine that could potentially work better for the OP. Instead of offering advice in that context, you called OP retarded, said he "obviously has no idea", told him to "put down the ORM bong". You told him the tool he's trying to use is "ridiculous", twice. Three separate posters in this thread alone have told you to chill out with the ORM bashing. You may as well tell him to use Ruby instead for how helpful you've been to the actual question posed. That IS what the downvote button is for.
We actually wrote our own port of ActiveRecord at TwitPic that we use as a part of the PHP framework we also wrote. Both will be open-source eventually (hopefully soon). For what it's worth, I love using our port of ActiveRecord, and I'm sure that one is good as well.
I use the Active Record included in CodeIgniter sometimes.
ORMs are great and all, but, god damn it, hand written SQL IS NOT A CHORE.
I've always found Zend_Pdf good enough for whatever I've wanted to do. It's part of Zend Framework, but the framework is pretty loosely coupled, and I can't think of there being any dependency issues if you were to just take the component.
You just won't stop will you? 
I'm not going to down vote you but I am going to say that you are one gigantic douche. I've read this whole thread and you just get worse and worse. Someone piss in your cornflakes this morning? 
I use [ADOdb](http://adodb.sourceforge.net/) for all my PHP ActiveRecord (and database) needs, you also do not need to use any code generators nor maintain mapping files for your tables.
CodeIgniter is what brought AR to my attention, and I have to say I actually lovely it, though at first (just like codeigniter) I thought it was stupid.
No, it isn't I love writing a good snippet of SQL and in my personal projects I still do, but work-wise I've found it's easier to document and have less questions to answer when I use Active Record....I hate questions.
[Doctrine2](http://www.doctrine-project.org/projects/orm/2.0/docs/en) is amazing. 
That's just part of the IEEE floating point spec. You can also have negative infinity. http://en.wikipedia.org/wiki/IEEE_754-2008
The single best reason for ORMs: Automated testing becomes a *lot* easier.
No, but that isn't where the value is. Say you have a bunch of customers with orders and each order has some payments. Selecting and joining the tables together is easy. Digging the data out into meaningful objects is where the ORM helps.
Mirror, mirror. Edit: this was downvoted within two minutes of being posted, on a 36 hour old post with 5 points that isn't getting read by anybody. You're clearly lying. Rule 5. http://www.reddit.com/help/reddiquette
One, I have helped with the question. Two, I haven't insulted him. Three, that isn't what downvote is for. Four, all you've done is complain and ask questions that the manual covers. Fix your own behavior before that of other people. You've posted more often than have I, contributed less, insulted more and abused the basic rules more. Please don't tell other people to abuse reddit's rules anymore. You might try reading them; you're violating half a dozen here. This post alone, #4, 5, 6, 20, 21 and 25. http://www.reddit.com/help/reddiquette I am not interested in your opinion that I am rude. Please keep it to yourself from here on in. 
But what he wants are not nested sets either conceptually or functionally. Nested sets are a (naive and low performance) model of trees; they're what C++/Java people call edge painting. Nested sets do a huge amount of unnecessary extra work, and will give incorrect results as soon as he has two children with equivalence, by removing them. This is not hierarchical data. This is a single depth single direction relationship. This answer is incorrect as well as inefficient. Unfortunately the reddit punishment squad has busted out the downvotes, so my ability to warn OP is diminished.
A handful of people use PHP ActiveRecord, yes. Never for very long, though. If you absolutely need a DB abstraction layer, use ADOdb. That said, the reason none of these libraries have traction or dominance is that they all end up being more work and defects than they save. I will of course get downvoted by people who [don't know what downvote is for](http://www.reddit.com/help/reddiquette) (rule 5!), and think it means disagree. That said, look: just find one large application built on an abstraction library which doesn't constantly switch, looking for one that doesn't cause problems. The only layers you'll ever find in use are ADOdb and PDO, and you're going to find that four times in five, even those two get ripped out after not terribly long. In the long run, it is *much* easier, faster in development time, and faster in server time to write portable SQL than to manage a portability layer, let alone an ORM.
The reason I'm getting buried is because Proggit refuses to accept that [downvote doesn't mean disagree or angry](http://www.reddit.com/help/reddiquette). Notably, original poster said thank you, and recognized the value of the advice they were getting, while the downvoters complained about how I had added nothing. The downvotes are coming from people who are butt-hurt by proxy, and violating rules 4,5,6,20,21,25 in the process. The Cancer That's Killing Proggit (tm). Any time someone with experience wants to say something unpopular, they can't post anywhere on reddit for a day or two, while all the novices use downvote to show how important and smart they are, instead of making valid technical arguments with factual bases. Or they just complain a lot, make personal accusations in public, lambast for the behavior they want, and say "hey you, go to this other reddit". (sigh) That's nice. Go play outside.
It can become tedious.
If you want to debug PHP you need xdebug and the good news that you can integrate it with an IDE (like Eclipse). [Introduction to xdebug + integration with Eclipse](http://devzone.zend.com/article/2803-Introducing-xdebug). Even though it's a bit dated, it introduces you to what you want. [Eclipse with PHP](http://www.eclipse.org/pdt/). Php Development tools for Eclipse. What Tortoise are you using exactly? There are different versions for different d/scm: tortoiseSVN, tortoiseGIT .. etc ... Could you detail exactly what's not working with Tortoise? I personally use it and I never had an issue with it before.
I'm using [Netbeans IDE](http://netbeans.org/) with [xdebug](http://www.xdebug.org/) for step-by-step debugging on a MacBook running OSX's built in apache2 server and PHP 5.3 as my personal development environment. We've got a MacMini as secure office-internal development server hosting SVN repositories. I've tried quite a lot of different tools over the past and finally settled with Netbeans IDE. It's got everything you need: Project explorer, nice syntax highlighting, PHPdocs, autocomplete, MYSQL database browser, native SVN support, native xdebug support - basically everything you will ever need on a low scale PHP development process.
Thank you for the info on xdebug and Eclipse, that is my next project to try and set up. The Tortoise is TortoiseSVN, and I just never have been able to roll back to a previous version in any way. Only upload and download code, so moving the current code around. Also I get conflicts fairly frequently (even though I am the only developer here) and seem to be unable to resolve them without deleting all my new changes. Those yellow exclamation points? I don't know what I am doing wrong, and I'm sure it is my fault, but I just am not getting the hang of it. I will go to "Clean up Directory" and it just doesn't seem to work for me. I think I need something more user-friendly, there must be something out there for dumb people that just easily works...
Hello, I have been trying to get XDebug working, but am running into issues, I believe because I have Zend Extension Manager and Zend Optimizer installed already. Do I need to delete these things in order to run xdebug? When I turn on both xdebug and the optimizer, apache won't start, and when I turn off all the other zend stuff except xdebug I get this: 2sfsKu+¬™√´‚Ä∫$√â‚ÄögmU√¥√£G√µNe¬°√Ñs¬µ‚Ç¨≈†√∑√ç√æ¬¥√∂‚Ä∞8¬¥√ï¬©(√ïF¬µY√ë √ó¬®~√¥6≈Ω^√ïX¬∫‚Äô‚Ç¨¬´JeZ&gt;¬¥‚Ä†m‚Äú_Q¬•¬¢4J√Ü≈æ√õÀÜ√Æ‚Äö{ÔøΩU}%h√ì√ñ¬¨94√º√ª√Æn&gt;5OD/`m¬∏√â¬¨‚Äö¬∏F√çpihw¬™e√™*¬∏1√´C~t≈ì¬©¬•V√ÉH√´C¬≤/¬™6¬∑≈ì¬πW¬≥√åa &lt;+√ü√Å√¥e∆í√É√∑xH‚ÄöÔøΩ√¥'iN√ñ√É¬£√ß√øfNg√†√â¬ê¬πk¬ΩÀÜt]√á≈Ω3¬∂ t¬µ ≈æQSg&amp;√ò9h¬¶√Äa‚Ä¶~y√∞ √Ä‚Äòag1√¥|¬™‚Ä∞ )√±¬º/√â√ü≈∏?¬ªS]√¢_?‚ÄôC¬¢;√ö| v¬æ -U√è2√∞√±√∏√±T¬±9√∂√ºM C√£s√£i\s√¥a¬´‚Äù¬≥¬™nz√†√ã=‚Äô√ÉC¬≤9‚Äû≈Ω√™√≠&amp;%√æL‚Ä¶l√ö≈Ωml√Ü3$¬∂√∏‚Ñ¢ ¬ê√ß√è√æA &lt;√út$ 5JP [Edit, okay I did have to disable all Zend stuff and xDebug works, but Apache crashes every three seconds because of the xdebug dll.] [Edit 2, in case there are any other people following along, I had to download the exactly correct dll of xdebug and the only hope of finding this out is cutting and pasting the results of phpinfo into the form on xdebug.org]
Don't claim to be an expert, but this is how we do it: What we find indispensable is [trac](http://trac.edgewall.org/). Redmine is a PHP alternative. Any bugs or change requests have to be requested through a ticket. Trac integrates with Subversion, and is fantastic with mylyn in Eclipse when focusing on tasks. (Only the task *context* is shown, i.e. the files specific to that task. Eclipse will even remember what tabs you had open when you switch back to a task.) Production Server is always the HEAD revision (tagged, for example 'v.1.1'). We spec the features for the next version in the trac Wiki, and then create a milestone 'v.1.2'. Then we create tickets for all tasks to be completed to achieve that milestone. If the boss/client keeps [creeping the scope](http://en.wikipedia.org/wiki/Scope_creep), you have to decide whether the desired change/feature is going to make it into the next release, but at the risk of pushing the launch date back. If a bug turns up in the HEAD revision (on the Production Server), fix it in the HEAD revision, check in the code, and merge with your development branch. When v.1.2 is tested and ready to be deployed, it is exported into a new folder next to the v.1.1 release. Switching to the new version is then as easy as changing the Apache document root (or changing a symlink). All variable assets (user-uploaded media, whatever) are kept outside of actual release folder (maybe under their own subdomain), so they are not affected.
Why use === instead of == ? I never understood this about PHP 
&gt; Redmine is a **Ruby on Rails** alternative FTFY Edit: now that I think about it, it'd be great to have a Redmine clone in PHP. It's great software and all the alternatives are too convoluted or just are not up to the task.
If Apache crashes try using the thread-safe Xdebug DLL.
I needed to download the exactly correct version of xdebug, I edited the post above to put that in there. Any others and it absolutely would not work. 
nginx has an [inbuilt proxy](http://wiki.nginx.org/HttpProxyModule) and this is how You would do it at nginx.conf: location /subfolder/ { proxy_pass http://hightraffic/; } 
I got xdebug working, but my same issue still happens, which is that the smallest php error, such as a forgotten semi-colon causes it to display a blank white screen which makes finding this small error almost impossible. Is there any fix for this problem?
I wish I'd seen Doctrine a few years ago when I had to write an internal tool to pull data from two separate ticketing tools, one on mySQL and the other on MS SQL. The syntax for SQL queries was similar for each, but just a wee bit different so I had to do all manner of tiny things twice. I ended up cobbling together my own query wrappers to simplify the work, but this would have saved me so much time.
Right. This is all awesome advice, and is how I do it... Aside from using hg instead of SVN. OP: I'm genuinely curious - how did you get hired? Did you lie about your qualifications, or are you working so cheaply they are willing to deal with this?
For the most part, you shouldn't get conflicts if you are the only developer -- but then, you're not actually resolving the conflicts you have so they might be piling up. If you've got a file with the yellow exclamation points, open the file and find the conflicts inside and fix them. A conflict is just a place where there have been changes to code you're working on in both branches. SVN can't intelligently decide which to use, so it's asking you to merge those changes yourself. The file will contain both sets of code (you can't miss it) and you edit it together. Once you've fixed the problem, right-click on the file and select "Resolved" and move onto the next file. 
haproxy
Thank you, however it is not so much an issue of knowing the conflict resolution process but that I can't seem get it to work with Tortoise. With other code repository systems it has worked very well for me. 
Regardless of what repository system I've used, I find branches indispensable for new development work. I create a new branch for my work, and nothing gets merged down until it passes QA and it is prod-ready. That way I can always create a clean branch from the trunk to fix something minor that comes up in the middle. Yes, there can be a lot of updating and merging, but at least you have the option to switch to another branch and work on something else if priorities change. And if they hire another developer in the future you can work separately without ruining each others work too often. :) As for an IDE, I'm pretty set in my ways using just [Editplus](http://www.editplus.com/) on PC or BBEdit on Mac (If I have to. I prefer PCs). I end up referring to online documentation a lot more but it works for me. I've tried eclipse a few times but since I do primarily frontend work with a dash backend, it feels too heavy for my needs. If you find TortoiseSVN limiting, you may be able to supplement it with some [command line SVN](http://www.addedbytes.com/cheat-sheets/subversion-cheat-sheet/). I love the GUI tool, but there's some things that are challenging to sort out in the interface when you can just type a few things to handle it.
What other code repository systems have you used in the past? 
You could sign up with a [content delivery network](http://en.wikipedia.org/wiki/Content_delivery_network) (CDN) for high-traffic sections of your site, and only use it when traffic is overwhelming you. Or use it all the times for the heavier page items like images.
Well I can't think of any names without referring to my resume, so there is none that I am super proficient in, but I just thought there would be something available for purchase that was considered more user-friendly than the free TortoiseSVN. But maybe the answer is I just have to figure out how to use TortoiseSVN.
Sounds like your PHP output is being gzipped. Try turning that off for debugging purposes.
Read the error log. *Use* the error log.
We have Akamai. The problem is that we have to point a subdomain to it and 301 to that subdomain when there's high traffic expected, such as for a new album release. 
gedit + sometimes vi when sshing terminal window We use git and a dev, staging, and production server. That way we can do dev on a local copy push it to the repo which auto pulls to dev. Then when it's time to move to prod we send it to stage and test it again then to prod. Supposing we missed a bug in prod we can then send it back to stage, fix and put it back up, all of this is handled with bash scripts and the sites get their database info (3 versions of that too) and any specific file paths or api keys we need from an .ini file based on the url (so dev.example.com gets one set of config opts, stage.example.com gets another...) All code changes are pushed up through git+ssh then a post commit hook pulls those files into the correct dev server area. I like this setup and it seems to work well for us.
If you're using Apache, there's also [mod_proxy's ProxyPass](http://httpd.apache.org/docs/2.0/mod/mod_proxy.html#proxypass). mod_proxy should be available in your installation by default.
I love making thumbnails automagically like this, but I admit I overuse it. :) Caching the images and only running the script if the image doesn't already have a thumbnail just needs a quick check for the file at the beginning. if (file_exists($thumbnail) &amp;&amp; !$forceNewThumbnail) { $fileout = $thumbnail; } else { $fileout = makethumbnail($mainimage, $width, $height); } header ("Content-type: image/gif"); readfile($fileout);
I think this has been what I have been doing so far, except I can't work the repository. May I ask you, so when you are trying to write PHP and you have got one small thing wrong like a missing semi-colon, then you go to test it by pulling up the web page, does it just display a blank page for you also? And how do you work around/with that? Thanks! 
Do you know where the error log would be located? [Edit: I think I found it C:\xampp\apache\logs\error.log ] [Edit2: That doesn't seem to be it to find the php error anyway ]
This sounds like an issue I had with eclipse once or twice. I ran into conflicts after trying to refactor files with eclipse.
Wherever your config file sets `error_log` to.
We use SVN at my company, although most of the developers use the command-line interface for day-to-day coding. I'm not aware of any SVN client that is better than Tortoise -- free or otherwise. Even though I'm very comfortable and proficient with the command-line I still find myself using Tortoise for things like reverse-merging and branching. That said, SVN itself is known for being difficult to branch and reverse-merge, which seem to be your main complaints. Have you looked into other version control systems like git or hg?
It sounds like your server is configured to not display PHP errors. You should change the php.ini configuration so display_errors is enabled. This can be done server-wide or you can use an .htaccess file (on apache) on specific folders.
I have a php.ini file that puts all the errors up on the screen, and into a single file. The downside is that you need to drop it into every directory you want to debug, so I wrote a little tool with a directory walker that just finds subfolders with php files in them and drops the php.ini there, then can remove them when I'm done. But the upside is that you can use this method on servers where you have almost no permissions. Since I do a lot of work on client sites that are hosted on shared servers that was the important part for me. It's not perfect, but it does the job. This is what I have in it: ; Show all errors, except for notices error_reporting = E_ALL &amp; ~E_NOTICE ; Print out errors (as a part of the output) display_errors = On ; Log errors into a log file (server-specific log, stderr, or error_log (below)) log_errors = On; ; Log errors to specified file. error_log = /home/myuser/logs/php_errors.log; Since you have access to the server you could update the server options to spit out errors to a file, or you might find it quicker to create a debugging include for the entire site that detects which environment and spits errors out only on DEV/STAG and hides them on prod: if ($myEnv == 'PROD') { // Hide all errors on PROD error_reporting(0); } else { // Report all PHP errors error_reporting(E_ALL); } What do you mean you when you say you can't work the repository? Is there a certain task that is failing or you're still sorting out the whole SVN business? I found SVN's versioning system a little hairier to deal with, I believe it tags the entire repo as version instead of the files changed. It makes going back to a specific version of the whole a system easier, but a version of a file a bit harder. It can be done, but I'm an SVN amateur myself so I'd have to dig through a doc to get a good answer for you. :)
Agreed. Data Mapper &gt; Active Record (IMO)
Well my display_errors is On, although I still just get a blank page when there is an error. Also (and likely related) the log_errors is also on and yet there is no phperror.log in the logs area. Any ideas on why that might happen? I looked at the htaccess file in there and it doesn't have anything about errors that I can see. I am using xampp/apache
I don't think I am going to be comfortable using SVN via command-line anytime soon. Hmm if Tortoise is the best I should maybe try a re-install or an updated version. I am on Windows 7 so maybe that has to do with it. 
We use akamai where I work too. The way they have it set up is akamai serves the www.domain.com, and the production server actually uses origin.www.domain.com instead. But we use akamai all the time. I don't know if this method would work for just sometimes because the DNS would have to repropagate to update it.
Well I guess I will have to get more detailed issues to folks about my TortoiseSVN issues. I think I kind of gave up on it a while ago and can't really remember what they are except I had deemed it useless for anything but moving code around. 
This is a great tool. Last time I checked though (ages ago), webkit didn't support some page-breaks e.g., inside tables, so at the time had to go with a headless firefox solution via xvfb. EDIT: it appears it is still an [issue](https://bugs.webkit.org/show_bug.cgi?id=48523)
My php.ini looks very similar to that, and has though for this entire time so I don't really understand why errors are not displaying for me. I thought everyone gets a blank screen unless you go through the trouble of installing Eclipse! ; server, your database schema or other information. display_errors = On log_errors = On ; Set maximum length of log_errors. In error_log information about the source is ; added. The default is 1024 and 0 allows to not apply any maximum length at all. log_errors_max_len = 1024 ; Do not log repeated messages. Repeated errors must occur in same file on same ; line until ignore_repeated_source is set true. ignore_repeated_errors = Off ; Ignore source of message when ignoring repeated messages. When this setting ; is On you will not log errors with repeated messages from different files or ; sourcelines. ignore_repeated_source = Off ; If this parameter is set to Off, then memory leaks will not be shown (on ; stdout or in the log). This has only effect in a debug compile, and if ; error reporting includes E_WARNING in the allowed list report_memleaks = On ; Store the last error/warning message in $php_errormsg (boolean). track_errors = Off ; Disable the inclusion of HTML tags in error messages. ; Note: Never use this feature for production boxes. ;html_errors = Off ; Log errors to specified file. error_log = "C:\xampp\apache\logs\phperror.log" 
Your IDE of choice should pick up that error at development time before you launch a browser and test your code. Either Eclipse or NetBeans should help you in that regard. 
Ah thank you. I have identified the major problem here which is that there is no error log being created, even though the php.ini is set to log errors. Nor display of errors on the screen. 
Do you have a section with this line? ; Show all errors, except for notices error_reporting = E_ALL &amp; ~E_NOTICE That's the part that tells it what errors to report. Perhaps the default is to report no errors?
What exactly are you trying to accomplish? For a browser, it's only going to speak to the server(s) associated with that domain. So, something has to process the request to figure out what to do with it. Using your "low volume" server to figure out the redirects to the high volume server seems counter productive. Maybe do it in the reverse? Make the main list of IP's to be your CDN, and have the CDN redirect a single sub dir to your application server. That way high volume content always gets served before bothering your low demand server. edit: or redirect individual pages instead of a sub-dir.
So you get a completely blank page when you have a structural error in your php code and just work around it with the IDE tools?
Yes I do have that line in my php.ini error_reporting = E_ALL &amp; ~E_NOTICE That must be the default option...
When you have a structural error (syntax error) in your php code, the ide you are using will highlight the error for you so you know what you did wrong (missed ; or ) .. etc ..)
Honestly it sounds like you just need to brush up on the process behind reverse-merging and branching in SVN, and not even specifically to Tortoise (though it's so ubiquitous that it doesn't matter). FWIW I'm running the latest version on 64-bit W7 right now but I can't remember any significant changes or improvements to the UI in the last few years or as compared to other machines. (I've been using TortoiseSVN every day for 3+ years on a progression of XP, Vista and 7 machines.)
The reason I asked is because different version control systems have different underlying concepts and I wanted to know what you were used to using. Subversion, and especially TortoiseSVN, is one of the easiest and most user-friendly version control systems. That being said, it sounds like you've really been thrown into thick of it. You might want to read the manual: http://tortoisesvn.net/docs/release/TortoiseSVN_en/index.html And specifically the chapter on conflicts: http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-dug-conflicts.html There's also the subversion manual -- the beginning few chapters might help with the basic concepts: http://svnbook.red-bean.com/en/1.5/index.html
You can ask on IRC, too.
Can you recommend a helpful room for this sort of thing? That would be really useful to me.
If you're seeing a blank page, it's possible you have display_errors set to off in your php.ini (correct for production, a matter of choice for development) and you're encountering a fatal error (resulting in nothing being output to the browser).
Huh I didn't know that, I thought they basically all worked the same. Thank you!
Thank you for sending me in the right direction here. I really appreciate the time you took to help me today. I haven't figured it all out yet but I feel a lot better about things then I have in a long time. 
`#php` on irc.freenode.net is great.
Zend Studio is also an excellent alternative. I'd highly recommend either that or Netbeans, both are good. Don't stress, all the problems you are having are surmountable. Come into irc, ask questions. I can guarantee that there is a much easier way to do everything you are having problems with; it might take you a couple of days to get it all set up smoothly, but it's certainly doable.
While where at it, we can create all sorts of wrappers for comparisons, such as is_zero(), is_one(), is_true(), is_false()... It would go GREAT with PHPs already cluttered namespace. I kid, I kid. I love PHP and use it daily.
1 === "1" returns false 1 == "1" returns true === makes sure the variables are of the same type and value, == cares only about value.
Also, PM me your IM username if you like, I am available to chat.
&gt; &gt; Redmine is **a wiki and issue tracking package that runs on** Ruby on Rails &gt; &gt; FTFY FTFFY 
I work off of FTP, I have one server setup for dev. That way, no moving things around. Our company is also setup this way, everyone works off of FTP. We use virtual servers for different servers. Everyone works off of FTP, which is committed to HG. We have a custom deployment app for moving from dev to state/update/production. I personally use VS.PHP for my PHP editing
Thats funny, because I'm a C++/Java people and I've never heard of that. Let me get this straight, you're saying that MPTT/NestedSet is naive and low performance? Can you show me a more efficient way of storing trees in a database? I would love to be proven wrong. EDIT: Oh I get it. You're a troll. You seem to be trolling this entire thread. There is no tree algorithm that lets me pull any part of a tree with less than 1 query. Your argument is invalid, but still... I will send you a case of beer if you can show me a more efficient algorithm for storing heirarchy's in a database than Modified Preorder Tree Traversal. 
Hrm. Does your .htaccess file set a 500 error document that doesn't exist perhaps? Or you might not have permission to create files in 'C:\xampp\apache\logs\'. Try creating a blank phperror.log file and see if it starts to fill up then.
Did you restart Apache?
try #php, like aeontech said. #x where x is any language.
[Geany](http://www.geany.org/) + [Mercurial](http://mercurial.selenic.com/) + [Bitbucket](http://bitbucket.org/) + [Linode](http://www.linode.com/)
FTP is incredibly insecure... Please tell me that you all at least use SFTP?
I'm sure that I have been black in quite a few of my past lives. If a man who cannot count finds a four-leaf clover, is he lucky?
I use a dev server, staging server, and production server. The dev server is on my local machine. I use xdebug for debugging/profiling. I use Git for source control - Two branches (at least) - master and dev. Current work goes in dev branch and after it's all good on the dev server, it gets merged into the master The staging server auto-pulls from the master whenever an update is pushed to it. The staging server is mostly a formality, a more public test-bed for remote developers, other users, clients, beta-testers, etc. to hammer on the system. From the production server I can manually pull from the master whenever we want to. For editing, I use gEdit, with several [quite useful plug-ins](https://github.com/gmate/gmate) to make it not suck. As for process, I subscribe to "commit early, commit often" probably to an almost OCD extent. If I'm making changes and want to save something and test a script, I'll commit the code. Add a new feature? Commit. Fix a bug? Commit. As to when to merge those with the master branch and push them to staging, that depends-usually after I've finished whatever single feature, or bug, or functionality I'm working on, but I may wait and push several at once if they're minor (like cleaning up typos at the end of a project). 50% of the time, I work alone on entire projects and the other 50% it's with a friend. When we're working together, he does back end, I do front-end design and UI templates that aren't tied into the functional app. So the process doesn't change much, except I don't fool with the production server. I'll test locally, push to staging and we'll go over the UI together. Once we get the look and front-end code finalized, I merge it to the master (it is its own repo, separate from the production code he's working on) and he'll pull it from my repo. 
&gt; What we find indispensable is trac (which is a python CGI). Redmine is a ~~PHP~~ alternative (which runs on Ruby). Any bugs or change requests have to be requested through a ticket. Perhaps a bit closer to what you meant?
Ah, good, now that you have given thanks and feel all nice and positive towards me, my English degree can finally be put to some good use: &gt; ...but I feel a lot better about things **than** I have in a long time.
ok now I feel worse again j/k
php.ini: error_reporting E_ALL display_errors 1 in xdebug.ini there's an option for stack traces and extended dumps on error, enable them. restart Apache. posting from my phone, don't know the xdebug.ini syntax offhand sorry. send me a message if you need help. 
&gt;sliaR no ybuR no snur taht egakcap gnikcart eussi dna ikiw a si enimdeR RTFY
Get off of SVN if you want to do truly effective branching and merging.
=== compares with strict typing. == will cast one of the compared values if necessary to compare them. if (1==true) becomes bool(1) 
No, it's really not.
Internally we use FTP (though you are free to use SSH, as I do - some engineers still use the old Zend Studio which only supports FTP editing). Outside of that, yes, SSH/SCP. We are in the process of migrating into the "cloud" for many of our products, were our only access is SSH (and why we have a custom deployment application, which I've written). For my private projects, yes, I use SFTP. I find working off of an FTP server is the easiest, if I want to quickly look at something at work or have to patch something, I can FTP into my dev environment, fix it, and then do the commits/updates through the command line. No need to setup everything 2x/3x in xampp or wampp. Becomes a nightmare tracking database changes across all the different instances.
&gt; **GIT** off of SVN if you want to do truly effective branching and merging. FTFY
However painful, I still use ZendFramework 5.5.1 for its convenient debugging and because I still cannot appreciate Eclipse. It's a bad combination, but still the best that I have tried. I have saved myself lots of pain by closely mirroring my workstation and server environments. It is definitely possible to develop PHP on a Mac or Window platform, but PHP is very integrated to Linux standards and there are so many issues that can develop by bending your code to your workstation environment. I use Ubuntu (Debian or really any other Linux distro works fine) on my servers and workstation and the same setup scripts. It's not always possible but I try to make sure the same applications, libraries and versions are installed and use the same path strategy (i.e. where I install everything). The staging server is already a great step, but for back and forths like that it would save you much to try to allow your boss to see what's on your workstation. It should be easy to setup with simple changes to the hosts file, so that any URL you want would point to your workstation. Even with clear specs, it's quite frequent so it's best to make it part of your setup, rather than working around it constantly. On Mac OS X there is an awesome SVN client called SmartSVN. But it does pay to get down and dirty and learn to use it on the command line. What happens when you try to rollback? Also AFAIK SVN does not really allow to roll back as we'd like it to to be. It allows to update to a prior revision, as a starting point from which you can decide where to continue. From what I heard GIT handles rollbacks in a much better way. It's worth checking out if you're not too far invested in Subversion. 
Versions.app, Cornerstone.app are two off the top of my head from a year ago using SVN on Mac OS X. edit: And Coda has at least some integration for SVN built in. TextMate, of course is fine there too. And there's the PHPStorm IDE from Jetbrians that does SVN just fine.
Or you simply have white space at the beginning of a php file.
The best, most robust, and most stable svn client is (surprise) the command line svn client that comes with subversion. Everything else is just a wrapper that supports some or most of the features, but typically not all. It's ok doze-boy. The CLI wont hurt you. It's your friend ;-) 
TortoiseSVN is a Windows-only program, and Cornerstone and Versions are both Mac-only programs. I don't think either one counts as a "better" replacement for Tortoise in this context.
Yes I did restart Apache quite frequently. 
TortoiseSVN - it is only the [Windows] tool for getting at the repository, and one of many you could use. It is not the repository itself. That would be a subversion server.
maybe it's small enough that you don't need an ORM?
I'm trying to avoid writing SQL statements. I don't see any reason to abandon MVC just because the project is small. I suppose I could always use a microframework or something.
Kind of funny how in 3 days there've been 3 ORM posts :) Use CodeIgniter + Doctrine if you want, or simply use CI's DB class which is good as well!
In your opinion, would it still make sense to include an ORM so that one can quickly fire off typical CRUD and data gathering functions (if only for saving a few characters and readability of code). Then, still write by hand more complicated SQL instead of trying to hack at the table model. Or would including the ORM contribute too much of a performance loss for the gain of readability?
Maybe [php.activerecord](http://www.phpactiverecord.org/) would work for you? And for a small site framework I was just in the process of checking out [toro](http://toroweb.org/).
Toro looks like it might do exactly what I want. Thanks!
&gt; Thats funny, because I'm a C++/Java people and I've never heard of that. Well, maybe you should read an algorithms book. (shrugs) That's what it's called in Knuth, Celko, and CLRS. &gt; Let me get this straight, you're saying that MPTT/NestedSet is naive and low performance? Generally. There are exceptions. It's the best choice for read-only trees which are very deep and very narrow. That's an extremely uncommon situation in datastores, though. It's also the best choice when you have almost no storage and need very fast traversal, but in that situation, you shouldn't be using SQL in the first place. &gt; Can you show me a more efficient way of storing trees in a database? Bill Karwin's Closure Trees are usually the best choice. They tend to be a little more space intensive, but they give constant time insert, constant time delete, constant time update, o(n) subtree fetch, o(n lg n) subtree move and o(lg n) sidebound traversal. Start on page 68. There's also a beginners' explanation of why nested sets are bad. http://www.slideshare.net/billkarwin/sql-antipatterns-strike-back &gt; I would love to be proven wrong. We'll see about that. &gt; Oh I get it. You're a troll. No, I'm not. I had a specific technical opinion, and I'm able to back it up. I'm also correct. Next time you're skeptical, give someone a chance to answer before "discovering" that they're a troll. You're being really quite transparent. &gt; You seem to be trolling this entire thread. It's not trolling. It's experience that's getting barked at by amateurs who don't realize they're amateurs, and are emboldened by seeing one another. &gt; There is no tree algorithm that lets me pull any part of a tree with less than 1 query. Efficiency isn't measured by counting queries, sir. &gt; Your argument is invalid It's quite telling that you said this before you even knew what my argument was. &gt; I will send you a case of beer if you can show me a more efficient algorithm for storing heirarchy's in a database than Modified Preorder Tree Traversal. The problem with saying things like this is that when you're done discovering that Wikipedia and random PHP scripts aren't an appropriate place to learn computer science (don't bother denying it, as if you knew what MPTT meant, you'd notice that the M doesn't apply here,) you're going to look even worse, because you *can't* *mail* *beer*. I would, however, accept an apology. I've been polite, and despite the insults, the public accusations and the judgements, I gave you the answer that first you asked for, then declared did not exist. Is Bill Karwin's slideshow enough, or do I need to go into more detail? I'm happy to if you become polite and apologize. Closure trees are a radically better choice than that thing that isn't actually MPTT. Incidentally, neither of these are algorithms.
#php on freenode is a disgrace to the php community. Every time I go in there it's filled with people giving bad advice and making fun of the people trying to correct them. It is the last place I'd send any developer looking for php advice.
No sweat - FYI, it doesn't have ORM in it, toro is just a framework for requests. I haven't played with php.activerecord yet for ORM but toro was simple to setup. The only primary downside I've found so far that would be nice to have in it is full controller/action mapping capability. Currently it seems more designed for a "controller" per request type. For smaller projects without much hierarchy this would be fine however.
I see no explaination of why Nested Sets are "bad". I do see a comparison between types of trees. It looks like Closure Tree's are a very good alternative. I wouldnt say i've been proven "wrong" but I have learned something. Let me return the favor and teach you something now: You can still be helpful without being a pompous egotistical condescending fuck-tard who enjoys bloviating about how much larger his proverbial technological penis is and then whining about how you get downvoted by "sheep". People downvote you because you are the worst kind of self-important shithead, not because they hate that you're right. 
I felt this deserved another point. I was kind of glib, and whereas I stand behind what I said, it feels like I should be clearer. &gt; &gt; There is no tree algorithm that lets me pull any part of a tree with less than 1 query. &gt; Efficiency isn't measured by counting queries, sir. So. Let's give you a concrete example of how your measurement method - that it's only one query - actually holds up in the real world. Consider the case of the Netflix prize. Remember that? Million dollars if you can take a shitload of real world ratings and squeeze a better answer out of it than their pros had? One of the relatively common approaches to tackling the netflix prize was to normalize the ratings before action. In the context of SQL, that basically means getting the arithmetic mean of the ratings for a given flick, and adjusting the ratings by said mean so that a typically rated movie will rate a 0. So, the norm for The Godfather is -4.26 (on a scale of 1..5,) and that American Idol movie has a norm of -1.26. Huge surprises both, rite? So. The problem here is that you actually want to store the data in its original format, because 1..5 is an integer that can be stored in a byte, rather than whatever 32-bit float you get post-normalization. The Netflix Prize was about coping with large volumes of data; they were getting people to cut their teeth on a record set of just over a hundred million rows, sparsely spanning 17k films and 450k users with the expected sparsity variations (more people have seen Superman than some obscure Brazilian art film, and certain people rate quite a few more films than others, etc etc.) So. You argue for trying to find something in fewer queries. Awesome. You can get the normalized rating from the un-normalized table (I don't say denormalized because it means something radically different - clash of math and sql terminology, sorry) in a single query, like so: select userrating - avrg.rat from (select avg(rating) as rat from ratings where filmid=Foo) as avrg where filmid=Foo and userid=Bar; Obviously, this is a terrible idea, but it's legitimate, and it neatly bulls-eyes your criterion of fewest possible queries. Now, the way *most* people do it is to create an entire second table, then to populate said table with the averages for the films, then to join said table to the base ratings table to fetch an average. And of course, proggit wisdom is that all joins are poison, and this should go in mongo, because mongo is web scale. But, of course, if you profile, you'll find that the extra table, join and populate turn a several hour query into a several millisecond query. Granted, it's eight queries in the most sensible implementation, rather than one. It is all the same quite a bit more efficient. In other news, I can name eleven fundamental approaches to storing trees in SQL. Parent pointers/adjacency lists are the only one that's less desirable as a general rule than nested sets. A path matrix is smart. Farey fractions, expanded rational representation and continued fractions are all interesting. (Continued fractions are essentially a math way of doing what programmers call "version numbers," like 3.32.06.6, except you can't call it beta, ever.) Closure trees and closure tables are interesting, but they cannot express abstract graphs; transitive closure tables (as written about by Dong and Zhirnov) can, fairly efficiently. Binary fractions are wicked fast, but the size problems can creep up pretty quickly, so you need to know some stuff about the size of the tree beforehand, and you can't be wrong. Static heirarchies are very similar but without the size problems; their problem is that whereas their order of growth features are excellent, their base time is very slow, so they don't become a good choice until you're dealing with enormous volumes of data. And of course, anything that's appropriate for a generalized graph can be used to model trees. Not always the most efficient way, but pretty much always more efficient than nested sets, where you have to move half the fucking table to insert (think of them in the way the C++ part of you thinks of vectors, then consider insert, and you'll start to see the problem.) So you could do edge tables, or descendant tables (which are essentially a variant of closure tables), or 2ary speed tables, or Prufer Codes. I've also seen an interesting implementation of what amounted to a prefix trie as used to store paths, but I don't remember what it's called, so I can't point you to it. And of course, lots of RDBMSes implement "connect by" these days, though that's a dick thing to use. So, you know, whatever. The point is, yes, almost every tree solution is better than nested sets, for almost every situation. So let's see how you react, since you claimed you'd love to be proven wrong, and would offer a case of beer. Maybe you'll pretend I failed.
&gt; I see no explaination of why Nested Sets are "bad". You're not looking very hard. Discussion of their problems - and I already pointed out the serious one to you, so you're also not reading what I say very carefully, or perhaps simply don't understand it - begins on page 65. Look very carefully at that second bullet point, and think about it in the context of scaling. This is also towards what my example of the C++ vector&lt;&gt;.insert() was meant to inform. &gt; I wouldnt say i've been proven "wrong" That's unfortunate. You have been, and you're making the person who helped you after you mouthed off to them not want to help you anymore. Think carefully about this. &gt; Let me return the favor and teach you something now: &gt; You can still be helpful without being a pompous egotistical condescending fuck-tard Do you really believe that you're talking to someone other than yourself, sir? &gt; People downvote you because you are the worst kind of self-important shithead You're welcome for the answer. It's unfortunate that this is how you have reacted. This sort of temper tantrum is not only unwarranted by the things you're reacting to, but is indeed far worse than what you're reacting to, and guarantees that you will not receive help from me again. With respect, sir, when you drive away the people who are willing to teach you the things every college freshman knows, you will remain exactly at your current skill level. I'm sure you don't recognize that to be a warning, as you [appear to be having difficulty coping with your actual knowledge level](http://people.psych.cornell.edu/~dunning/publications/pdf/unskilledandunaware.pdf) . Sadly, it seems unlikely that you will understand that this reaction of yours is precisely what you're pretending to criticize in someone else. Voltaire would be delighted. Have a nice day; I'm about done being yelled at by amateurs.
In my opinion, that same readability can be achieved with simple local functions. If one's choice was ORM or raw inline SQL, then it'd be harder, but that is not one's choice. I have never seen a good use for ORM. Maybe they're out there. I wouldn't even begin to know what one is. I appreciate your being civil, given the tone of the rest of this thread. Upboated.
Are you arguing with me? Or the entirety of proggit? I never suggested Nested Set as a solution to the Netflix prize problem. I suggested it as a solution to storing the type of tree's the OP was trying to store. I'll agree that closure tables looks like a less cumbersome way to do these types of trees. Hell, i will probably use it. Otherwise, so far you've written two helpful sentences, and about 1000 words of "look at me! im smart! you guys are n00bs l2p!" We get it, you think you're smart. 
&gt; Are you arguing with me? Or the entirety of proggit? Neither. I'm answering the question that you said you'd love to have answered, then responded to with a bunch of insults and swearing. &gt; I never suggested Nested Set as a solution to the Netflix prize problem. Nobody said you did. You pretty much didn't read what I wrote at all, did you? &gt; Otherwise, so far you've written two helpful sentences Uh huh. I made the mistake of believing you when you acted like you actually wanted an explanation. So, I gave you a concrete one. You tried to turn that into an insult. I will not burden you any longer with the things you explicitly request from me. Keep your beer.
&gt; Have a nice day; I'm about done being yelled at by amateurs. Wow, you just broke format and forgot to whine about being downvoted by all the proggit sheep like you do here: http://www.reddit.com/user/StoneCypher I'm pretty sure I just did more to solve OP's problem than you did. You sure made yourself feel special though. 
Thanks for bringing some common sense back to the table. I find that every so often I will become infatuated with a certain project, practice, method, library, framework, etc.. and forget that these magic time savers can wall you into issues. Would be better to look at frameworks and libraries as common practices or methodologies and not a static solution. Because of course, once you start hacking at the core of anything like that, the community around it freaks out. Your comments are much more of a discussion than the rest of the quick statements in here, much appreciated as well.
&gt; I'm pretty sure I just did more to solve OP's problem than you did. OP has stated otherwise in public. Are you done? I'm still not actually interested.
I agree with this solution, letting DA handle the uploading makes it easer on your end. You won't have to provide a user friendly backend for your site and could rather just whip a script that scrapes DA.
These are offhanded comments. Take a look at the answer I gave to thatmofofred; whereas it's sad the way he reacted, it gives better information than the other things I've said. http://www.reddit.com/r/PHP/comments/eh9k0/doctrine_one_to_many_relationship_problem/c18czty Honestly, proggit was much better when it was a polite place. Sometimes it's hard to justify giving advice, when I know eight times in ten I'm just going to get a slap in the face instead, and enough downvotes to keep me from participating in the reddit communities which retain their basic behavioral skills. It's unfortunate that so few people take the opportunity to stand up for one another like crackanape did. Edit: Sorry, meant to give this link instead. http://www.reddit.com/r/PHP/comments/eh9k0/doctrine_one_to_many_relationship_problem/c18d3sa
I use Flourish: http://flourishlib.com/
[Propel](http://www.propelorm.org/) is fast and awesome. Fasome.
For someone who is crying out about rediquette being broken in this thread, you sure do break 15 a lot. 
Doctrine 2. Very easy to setup, no requirements to extend or implement an interface, scales well. It's in beta but I have been using it for about 6 months and have not had any issues. doctrine-project.org (make sure you check the 2.0 docs).
Ok, if you say so... I haven't had any problems, but I'm not in there often, nor am I asking newbie questions, so maybe it's gotten worse. Is there a better php channel on any other net? EFnet used to be good, but haven't been there in years, no idea what it's like now.
Zend Studio &gt; 5.5 is terrible slow and buggy, I do not recomend it.
Git! Find a git workflow that works for you. You can easily work on projects and commit your changes but not merge them into your trunk until your ready this lets you work on bugs with out merging unfinished features.
I've only ever experienced Redmine as an enduser. For some reason I thought it was PHP. Should have done more fact checking. I actually prefer trac, although redmine does offer better multi-project support. 
Zend studio 5 and 6 was homegrown zend effort, zend studio 7 and up is basically eclipse with php pdt and a bunch of zend-specific extensions. I've been using 7 and now 8 for months with no problems.
I know, I know. But everything's working as it is, and I can't be bothered with the hassle of migrating all the repos to GIT.
You can put an .htaccess in the directory with 'php_flag display_errors 1' to show all errors at runtime.
oscommerce max 2.5
Ooh, do Python next!
NETBEANS!!!!!!!!
As long as they don't have captchas or anything similar, it can be done. Have a look at [cURL](http://php.net/manual/en/book.curl.php). Edit: I forgot to mention [Fiddler2](http://www.fiddler2.com/fiddler2/). You can use this to find the correct URLs for logging in to DA and posting to DA. If they use cookies you'll need to store them with *CURLOPT_COOKIEJAR* and re-use them with *CURLOPT_COOKIEFILE*. Feel free to PM me if you need any help.
At first I was like "what the ffff..." Then I was like "wow, that's pretty neat!" And installed it.
Wow this looks great! Hopefully this should be a solid replacement for FirePHP :D
Never worked with WP but this seems to answer both of your questions.. unfortunately I'm unable to test it myself. http://codex.wordpress.org/Template_Tags/wp_list_categories
http://www.fabriclondon.com/dsadsaj43h24k
This looks good. So far, I've been using Firephp. Is there a way to use this in conjunction with the firephp class so I don't have to rewrite all the logging statements in my code?
I'm complaining about breaking the rules. Legitimate downvotes I say nothing about. However, you have a point.
title_li ... set that to whatever you want (in the function parameters)
http://redbeanphp.com/ is fun, I haven't used it for anything serious though.
&gt; I don't see any reason to abandon MVC just because the project is small. Unless I'm mistaken, ORM != MVC. You can write SQL and still have a clean application architecture. Please forgive me if I misunderstood what you wrote.
You picked an interesting time to jump back in with the (fairly) recent addition of Namespaces and Closures the language is shaping up. Currently in trunk the 2 biggest things I can think of (due out in PHP 5.4) would be array dereferencing and the new addition of traits. All and all your only looking at a day of reading (at the very most) to get completely caught up. Welcome back to the dark side.
I'm learning C++ so I've got a fair handle on Namespaces, I'd imagine the implementation can't be too different.. right? Thanks for the info, it's really handy.
Came here to see if this had been mentioned. It is kinda loosely coupled, but making sure the ZF is in your include path and other things can be a touch tricky. I've had good success using it, though.
Namespaces are Namespaces are Namespaces. The only real consideration with namespacing in PHP comes when you use an autoloader, or when referencing classes outside of your current namespace. Other then that its all extremely simple. You shouldn't have any trouble.
thanks for the ideas, will give it a shot!
I will keep this as my backup option, I was hoping to set it up so I could automatically showcase her work via several sites (deviantart, picassa, flickr, twitter, facebook, etc). I have successfully done the linking with the other sites, DA was just where I got stuck.... thanks for the ideas!
I know it doesn't. But I prefer models to bare SQL by a wide margin.
How would I get this to work in a framework like Codeigniter or Kohana?
As always, stuff that other languages have already had for 12 years, like array dereferencing. **edit** sorry, YAY array dereferencing, that sounds so futuristic, I bet Ruby, Python, Java, Perl, JavaScript *definitely* haven't had this fundamental feature for the last decade.
Oh and a class that has a function with the same name, is no longer loaded as if it where the _contruct function. 
I ended up writing a custom wrapper for FirePHP through PEAR Log. There's one out there already, but it sucks horribly and didn't even use the actual error/warning/notice levels in Firebug correctly.
[Yii Framework](http://yiiframework.com) is lightweight, fast and very well thought out. 
I'm just saying that models can use bare SQL. You don't need an ORM to use models.
I think you missed the part where I don't want to write bare SQL at all and much prefer models. Bare SQL is just a huge waste of time.
I have to agree with you. Certification is for anything are for personal enrichment.
In Kohana3, put the chromephp class definition in a directory (relative to bootstrap.php) and include it into there.
I didn't actually miss that, I was just confused as it sounded like you thought models were to be used in combination with ORMs only. I'm sorry if I have irritated you.
Bleh, I'd just woke up and I tend to get touchy in the morning about some things. My apologies.
Array dereferencing and namespaces. (that is if you are developing on a platform with 5.4) For those that are wondering, array dereferencing allows you to do things like: &lt;php function blah() { return Array('foo'=&gt;100,'bar'=&gt;200); } $foo_count = blah()['foo']; $bar_count = blah()['bar']; ?&gt;
Reverse proxy.
no
To elaborate, floating point numbers have a separate sign bit (the binary representation of the number) to represent positive or negative. Integer numbers use [Two's complement](http://en.wikipedia.org/wiki/Two%27s_complement) which doesn't have a separate sign bit. It is not unique to PHP. You will find that this is the case in most programming languages.
As ever, the change logs have the full story for [5.3.4](http://us3.php.net/ChangeLog-5.php#5.3.4) and [5.2.15](http://us3.php.net/ChangeLog-5.php#5.2.15), but broadly, I'd describe these as fairly routine point releases. One thing that is important, though, is that 5.2.15 is now officially end of lifed. Obviously that won't directly affect updates for distribution packages, but if you're running 5.2 I'd be at least thinking about starting a migration plan to move to 5.3.
Awesome I'm definitely playing with this one at work tomorrow.
There's a few new frameworks out; Kohana is one I've been hearing a lot of good things about (started as a fork of CodeIgniter, gone through a complete rewrite now though). There's also Doctrine if you don't need a whole framwork, but want some kind of an ORM layer. * http://kohanaframework.org/ * http://www.doctrine-project.org/
Only if you define the class in a namespace, or if you define a __construct() method in the class (or one of it's parents).
Alright, compiling night!
is it the SQL you're avoiding or do you just want the auto-conversion of result sets to objects (and vice-versa)?
And I had just recompiled PHP 5.3.3 yesterday...
I write the following http://azure.ironie.org/480-switch-style-in-javascript with a Javascript switch and cookie. That's the final method I use.
Why my hosting uses PHP 5.2.5? Edit: It was released on November 7, 2007.
apisnetworks.com gives 5.3.3 to shared accounts. I keep plugging them because they're one of the very few hosts that do this.
Because they are either using the version provided by their OS vendor, or the version provided by their web hosting control panel suite vendor, or they are clueless. It's sometimes hard to tell the difference...
Blind paranoia. I get the same bullshit trying to upgrade intranet stuff at work - "uhh we can't update this cause it'll break everything", when the server in question is only running one webapp which I've been the sole developer on for two years, juggling stupid fucking back-compat problems because I'm using the oldest 5.x my workstation's package manager still acknowledges the existence of while they insist on 5.(x-2) or even worse.
By the way this is not the author of the extension, author is Craig: http://www.craigiam.com/
get a cookbooks book, and don't look at the implementation until you are done? i find it hardest to learn a language without having a goal, or project. cookbooks _can_ be good for that. you're basically looking for a math textbook that you can look up the answers in the back?
The paranoia used to be justified. The amount of random shit that broke from minor release to minor release used to be completely out of control. I produced consumer software back in the 3.x and 4.x days, and we had a pretty strict list of supported and unsupported versions because of random broken crap. They finally got that problem straightened out in the 5.0.x releases, but the damage was done. Now you can generally be sure that things will only break during .x releases, not .x.y releases. 
I want a hard problem that I can see the answer too in the end and how it can be coded the best once I complete it. I want a multiple day/week project.
tizag.com seriously learned almost everything from their basic tutorial. Everything else past that is things you should specifically look for examples of by googling.
I cxan give you a project if you like...... I need a user interface with the ability to upload/edit/delete images that are can be grouped to categories created by the admin. Of course the admin can also edit and delete these images. Then once you have that created i need an interface that allows users to rate the images and be able to filter by category and the images current rating. GOGOGOGOOGOGOGOOGOGOGOGOGOGOGOGoooooo....... point is if you want to learn programing first think of a site you want to create that you think will be fun. Mine was Ratemyreefer.com (no longer up) but it was a hot or not site for images of marijuana and basically did everything i just listed above. Took a month to create and was the first working php based project i had completed. Also make it simple as FUCK! everyone knows how to spell fuck, even the ignorant.
http://projecteuler.net/ not specifically php but fun none the less. Pay attention to the should only take a minute to complete, if its taking longer than that you are doing it wrong.
I always like their examples when I am trying to understand a new function.
Know of any good ones online? Not even php specific.
http://www.google.com/search?q=20+PHP+IN+ZAR Problem?
["php to rand"](http://www.google.com/search?q=php+rand#sclient=psy&amp;hl=en&amp;source=hp&amp;q=php+to+rand&amp;aq=f&amp;aqi=&amp;aql=&amp;oq=&amp;gs_rfai=&amp;pbx=1&amp;fp=87dedf703ab49d09)
Yes that is still broken in webkit. I forgot about it already since it was easy enough to "fix" with jQuery. Something like $('tr').each(function(){ if ($(this).offsetTop % PAPERSIZE_HEIGHT &lt; PAGE_MARGIN) { $(this).parent().after( $('&lt;table&gt;'); $(this).nextAll().appendTo( $(this).parent() ); } } worked for me. All those years working around browser bugs finally starts to pay off :-) 
Google stealing my back button focus is actually really fucking annoying.
Why dont you post your question? I bet you get a lot of good advice and answers.
Good idea! Sorry, its a little early for me.
What exactly can't you figure out?
Check the main post, I added my problem.
From what it appears at a quick look, go down to this part of your code: &lt;div id="cu3er-container" style="background-image:url(images/banner3.png)"&gt;&lt;div style="width:400px; height:220px; padding-top:175px; padding-left:20px; padding-bottom:399px;"&gt; That starts off creating the two boxes and then creates a div for the left side with a table inside. I think if you replicate the &lt;div style="width:400px; height:220px; padding-top:175px; padding-left:20px; padding-bottom:399px;"&gt; straight after &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;/div&gt; and change it you should be able to position it to the right of the current div Sorry I work all in tables, never got my head around divs of why I should use them over tables. I would probably extend the div to cover both, create a table with 3 columns covering both of them (middle column for the gap), put the current table in the left cell, and then put another table in the right hand cell...something like that That help at all? Bit vague sorry, late at night and I not really in a coding mood lol
Mind if I PM you real quick?
 $bar_count = blah()['bar']; Are there any languages which haven't been able to do this for the last 10 years?
Yeah, and I am terrible with coding. :(
This would be pretty easy with Drupal. You create a content type for each asset you are managing with cck that would provide the fields you'd need. The status for each item can be a taxonomy. Reporting can be achieved with views. Check out http://dc2009.drupalcon.org/session/business-analytics-drupal-views
Thanks, unn! :D
I had no idea Drupal was that flexible.
Couldn't you code this in just php/mysql in like 4 hours max?
I could, but when it comes time to hand off support to someone else in the organization, it's better to hand off a Drupal site than a custom built PHP/Mysql app. **Edit:** Yeesh. Don't know why I'm getting downvoted. At my organization, we already have Drupal doing several jobs, and people want a 'Drupal' site, not a 'php/MySql' site. I know, everyone's a super elite php haXor, and can bust this out in a few hours. But we already have a Ruby on Rails site that nobody can troubleshoot or support because our organization has nobody that has the knowledge of the platform or is willing to devote the time to learn it. So people don't want to be in that situation again. Sooner or later I'm going to hand off this site, and not want to be bothered with it ever again, and there's a better chance of that if it's Drupal.
Upvote for using workflow module instead of taxonomy for tracking a workflow...
micro-framework: http://www.limonade-php.net/ ps. generally good idea to actually write your own SQL statements for performance reasons. just keep your SQL in your models and reference those from your controller.
Even if there is a Drupal way to sort-of do it, it's not necessarily the best idea. Drupal content types are meant to contain *content* and that's what they're good at. Trying to fit a database application into a CMS might end up being a headache in the long run.
Both of those have been around for over two years
I'd actually recommend using [Workflow](http://drupal.org/project/workflow) and [Rules](http://drupal.org/project/rules) to manage the different states/phases rather than taxonomy. Rules has a lot of flexibility and will help in reporting and automation. I also like to use [Views Bulk Operations](http://drupal.org/project/views_bulk_operations), which makes creating powerful admin interfaces based on lists and tables quite simple.
I agree that Drupal may not be the 'best' solution but one of its strengths is flexibility with the same tools and basic modules. Long-term maintenance and familiarity is an often under-rated aspect of how to build web projects. In my industry of marketing/advertising, working as a web developer means creating and maintaining 100+ projects between a few people. If I was working on a single project, or even just a handful, for a single company, my approach to individual projects would probably differ.
Sounds almost *too* intuitive...
Because drupal IS a mysql/php site, and whatever you add to drupal will be custom, and thus will still need php support. 
Modules are custom? Or, you're saying I can't do this with out-of-the-box functionality from modules? That I have to build my own modules?
No, I didn't say anything about modules, I just don't know why its harder to support something custom built, versus using a third party plugin (teach someone to use the drupal plugins or using a custom app would be the same. In fact why would there be any difference functionally or visually except for the fact one is wrapped in drupal)
Because to support something custom built, they have to 1. know php, and 2. rely on the developer for questions. If they support something based on modules, they don't have to know php; they just have to ask the large drupal community about that module. 
So your saying you have a support department that is not actually support, but someone who is a proxy to real support? Meaning your support department cant support a product unless they can go ask someone else on the drupal forums? 
I'm not saying we have a support department. Actually, let me say we have **no** support deparment. We are a charity of about 10-12 core volunteers, giving up their free time to keep things running. Everybody is at different levels and places with technology. There's a good chance that after I'm gone, we'll have no one who's a php person. But we have several people who are already Drupal people, because we're using that.
Here's the CSS path to the search button, it should help you find the place to add your button: html body div.main div.blok_header div.cu3er_resize div#cu3er-container div form#searchform table tbody tr td img#search_button [This](http://dylanstestserver.com/share/reddit_help.png) is how i found it. Try using [firebug](http://getfirebug.com/) with [Firefox](http://www.mozilla.com/en-US/products/download.html).
Transmit + Vim + (Codeigniter || CakePHP );
Yes......PHP ;-)
this would take like 10 min to do in cake. pm me if you want help
Hi StinkyWeezie. It's been a while, and I was just wondering if you were able to find a solution to this problem.
Maybe you should describe what you're trying to accomplish. A lot of programmers want help implementing a solution that is entirely wrong for the problem they are trying to solve. This sounds like one of those. 
Agreed, as: &gt;I need to write some javascript that will also write a value to the database ...this is an unwise approach. To streetwalker, PHP is server-side and Javascript is client-side, the two can never accurately be aware of one another's state, and you can never trust the client, *especially* when it comes to SQL. But as wvenable mentioned, if you can describe your situation a bit more in depth (without anything confidential, obviously) you may get some better suggestions.
You could probably use AJAX.
I think I did. I am adding functionality to an open source db system, and I can rewrite the php code to do what I want no problem, but I need to distribute what is essentially a javascript overlay with minimal disruption the the php pages. I don't want to have to support any php changes in the future, but only my overlay. So the base question I think are understandable: what happens with respect to page reloading when a form submits to the same php page, and it echos back without apparently changing the page's url? And might there be some way of catching that activity with javascript? 
 I can write the functionality I am trying to accomplish into php, so I don't need help there. I just need to know what is possible with javascript detecting that. So perhaps I am posting to the wrong forum. Thanks for helping me to clarify that!
&gt; When a form posts to the same php page, is a new page generated or not? It doesn't look like it does ( the page does not redraw.) Yes, of course it does. You send the POST request to the webserver and it sends you a new page generated for that request. The webserver dosn't know that you've posted to the same page (unless you tel it so with http-referer header) so it can't really decide that there is no need to resend the page. So no, the only bullet-proof way is to add the PHP writing code to the confirmation page.
They want to know what problem the functionality you're trying to accomplish solves - regardless of whether or not you need help with it. This is because they believe you may be trying to solve the initial problem inefficiently. They did this because they are more polite than I, and didn't want to blankly tell you that what you've loosely proposed here is a terrible plan.
OH, come on. AJAX has no problem sending data to php. Are you saying it is unwise to use AJAX?
The questions are not about *how* to write to the database with javascript. That part is easy - yes use AJAX. The questions are about what happens as far as what the browser does when a form is posted to the same php page, and it echos something back without apparently loading a new URL. What happens to the browser? So far, I see some assumptions about my level knowledge and what i am trying to do, rather than attempting to answer that question. 
No, I'm not.
I still am not clear on your original question, but when the users POSTs a form, the proper behavior is to handle the form input and then redirect (via a header() call) to a GET URL, such that a user who clicks reload or hits F5 doesn't resubmit the form unintentionally.
oh, bullshit. this sits on a an open source system with updates coming out all the time, and is injected into it via templates. The more I can remove my functionality from the underlying php base system, the less I will have to support in the future. So the design problem requires as much processing to be handled by javascript as possible. There is absolutely nothing about that strategy that is bad. In point of fact it is a good plan.
I've built a similar application in Drupal at a client's request. That one managed the workflow of a printing company, including work that was outsourced to other shops. On the surface, it sounds simple. You have a few CCK types and a couple views, maybe a custom admin page with links to the entry &amp; reporting screens. And, as long as you're a small non-profit with a small staff, that might work out for you. It's especially helpful that your staff is tech-savvy and can understand the limits of the underlying technology. What we encountered were requests for functionality that led outside "simple" territory. (I can't remember the specifics, but here's a made up example) "Hey, this is great. But every time the work order is owned by someone in senior management, could you replace the price with a picture of the CEO's terrier?" Ok, so we make a custom template for that field in the view that took the user's name from the output, pulled up their user record, checked if they had the "Senior management" role, and replaced the output with an &lt;img&gt; tag referencing said terrier when appropriate. "When we sort by name, the terriers don't all sort to the top" Of course not. The field still contains their actual name. You're sorting by name. "Oh, we want it to display their name but sort by position. And terriers should always sort to the top regardless of whether is an ascending or descending sort." See, this is where building an app in Drupal gets hard. You've leveraged the power of Drupal and its community plugins to quickly build a site. You probably came in at budget or under. But you've given up the power to get completely arbitrary. I've been experimenting with the Views API in my current job, and there are ways to make it do whatever you want. But it requires conforming to Views' way of doing things. And you're writing a bunch of code, even though you built the app in Drupal to avoid doing just that. And in a lot of cases it would have been easier to build the app in a framework where you can run whatever SQL you want and render the results however you need.
great, that helps! Yes, I had the code added in php, but as I write, I am trying to minimize my systems footprint. it is just going to much easier to support.
I don't think you are explaining yourself well. Whenever a form is submitted, the page will reload. You can use Javascript to prevent the form from submitting, and instead send an HTTP POST request to another (or the same) page. You would then either modify the page content or submit the form depending on what was returned via AJAX.
you're convinced the strategy is sound, yet were unaware that a post request returns new data? are you sure you have enough knowledge about this stuff to make that sort of assessment? I'm not trying to be mean here, just suggesting that you perhaps be a bit more open to people trying to help you work through a problem.
The point of ajax though is that it sends the request to another page that would be written in php. Either way your not getting rid of php. Now if you need help with ajax, that os different than JavaScript by itself. We are all just trying to be helpful.
No, I think he is saying that he is part of a small organization and that using code that has been well written, extensively tested and is open source will make sense in the long run. This is an eminently sensible approach compared to "Right, I have a web app I need, Step 1 - Write assembler to use to write operating system". 
&gt; what happens with respect to page reloading when a form submits to the same php page Nothing special. The browser gets a new page, and treats it as a new page, and that is about it. Whether the URL of the page changes or not, makes not a jot of difference. What you do need to be careful about is when people press the reload button on their browser - requesting the same page with the same POST parameters can happen multiple times. I'm not sure this is a PHP issue that you are trying to tackle? Just a thought: are you trying to implement something similar to Google Analytics, simply recording on the server things that happen at the client end?
I'd advise using jQuery to perform a simple .get call from the confirmation to another PHP page that performs this function. It's an AJAXy solution, but not actualyl AJAX. So on the confirmation page, have something similar to this "echoed" out: &gt; &lt;script type="text/javascript"&gt; &gt;$(function(){ &gt; $.get("url-of-the-db-insert-php.php"); &gt;}); &gt;&lt;/script&gt; You can add some code to handle the return code from the server if you wish. http://api.jquery.com/jQuery.get/
php.net/curl
And why cant your own code be well written and extensively tested. I mean the program he described is simple, it either works or it doesn't, just simple queries. He should use drupal because 1) its for volunteer, 2) someone who is not a web developer is going to maintain the site for no cost, meaning he cant pay for support. But either way, I think this program could be written in under 1000 lines of code, and its not that complicated to test all the functions. I would always be happier writing my own program that does exactly what I want. And if I was a drupal developer, I would write the drupal plugin myself, which would still mean it's pretty much unsupported.
I'm rather fond of caching in memory, then falling back to memcache, then falling back to the db.
Isn't memcache caching in memory, or do you mean directly in the memory on the webserver and not a memcache server?
Memory meaning a static variable in PHP for when you request the variable multiple times in a row (in the same script).
Thanks for the info. I found [this](http://devcentral.f5.com/weblogs/macvittie/archive/2008/09/26/httpfox-the-firefox-add-on-you-cant-live-without.aspx). 
&gt; The questions are about what happens as far as what the browser does when a form is posted to the same php page, and it echos something back without apparently loading a new URL. What happens to the browser? Nothing. PHP just sends HTML and the browser just interprets it. When a form is submitted, PHP may write different HTML out then the first time around (if submitted to the same URL). It's also common to perform a redirect after a POST to an entirely new page to prevent refresh-resubmission problems. As to what your particular open source project does in this instance, we wouldn't know. &gt; So far, I see some assumptions about my level knowledge and what i am trying to do, rather than attempting to answer that question. Based on your proposed "solution" to this problem and your questions, there are some assumptions to make. Using JavaScript for this is way out on a limb in terms of reasonableness and maintainability. You might be better off just writing your own PHP code to handle this after the database write and allowing the version control system to handle merges of changes from the open source project. It's highly unlikely and changes directly in your area will happen very frequently (or at all). Making the changes in PHP would be less buggy and less effort overall. 
You can use AJAX to write to the DB, but have your PHP return whatever message you want to display and then have the callback handler of your AJAX function write that to the page, or have it loaded from the beginning inside a display: hidden; container and use JS to change the hidden to block/inline/whatever.
Are you sure that's actually going to be a problem? It's unlikely the area you're working on is going to change that much (if at all) and your source code control system will be able to handle merging in your changes. 
The usage of *static* within a function is so wrong that it hurts‚Ä¶ but it works so why not.
Interesting but what does this have to do with php?
This really depends on what information you're talking about and the scale of your architecture. If some of your servers have cached different information internally than others you'd see issues. Memcached avoids this because it is distributed.
Captcha was the best way forward... the only blacklists these guys were on yielded far too many false positives. I managed to identify the domains based on the number of submissions (they were all more or less the same per domain).
Normally you'd use classes and you can use the exact same method, but using a class property instead of a static variable. This works really well for long-lived classes and singletons.
That's why I wouldn't use APC caching, I'm talking about a static variable that exists only during the life of a given script's execution.
I might be missing here something, but *static* functionality comes from C language that is functional all around. So why is this wrong?
I must have not indicated this in the original article but I don't think there is a clear winner here. All mentioned methods have their advantages and disadvantages. * The static cache serves a very specific set of functionality and can't be directly compared to APC/Memcached solution. Static data can only be cached shortly and is actually duplicated between php/mod_php processes. * APC is faster than Memcached but might get you in trouble if you have multiple server setup. * Memcached is slower than APC but utilizes memory better in multiple server setup. You can also set-up a dedicated cache server this way. I would say APC should be used for small data caches that you can afford to be duplicated and Memcached for larger sets. I believe Facebook is running a combo of APC/Memcached solution and doing just that. 
[A similar article](http://www.rooftopsolutions.nl/blog/107) with a bit more code.
I'm sure FB uses APC for stuff that doesn't change much, such as a user's friends list or your mini-feed.
This is quite thorough. upvoted.
Learn PHP here or there You can learn it most anywhere Learn PHP with a mouse Learn PHP from your house Learn PHP on your box Learn PHP with FireFox Not so much in a car That might be going a touch to far Or with a goat, or in a tree Just with a book and your PC Any problems and you can bet the answer's on the internet
PHP programmers usually use static variables in the same manner as global variables. If you've ever handled old PHP code (or new, if you like Wordpress, Drupal, or self-inflicted torture) you would understand that global variables are *very bad* for everybody involved -- except of course the person writing it in the first place (if that person never has to look at that code again after writing it).
Good call, but I think Rules/Workflow might be overkill unless you need triggers to fire when you move things. For instance, if you want Drupal to fire off an email to so-and-so when you push it to the next phase, then that's a rules things. Fair warning -- rules is one of the more complicated and abstract modules that you can delve into. There are a few good tutorials around, so perhaps check them out. Use WebEnabled if you'd like to spin up some quick drupal instances to test out modules and configs. Get Putty if you're on windows, or regular command prompt if you're on mac/linux. SSH into the ip that Webenabled will show you on your dashboard (along with a randomly-generated password that it will generate on setup). Drush is pre-installed on server, so it's as easy as this: * Sign up for WebEnabled. * Create new Drupal site (application) * SSH in with provided info * Use "drush dl &lt;module1&gt; &lt;module2&gt; &lt;module3...&gt;" to download all the modules you need, then "drush en &lt;module1..&gt;" to enable * Congrats! Drupal site ready for playing around! Cheers, and good luck!
It is. I'm total fan-girl for it. :) Trust me, it can do waaaaay more! I'm in the process of setting up a system of hosting a competition for high school students that involves a written scantron test, and it allows me to upload spreadsheets of the graded data into database tables, display those tables in a custom format, and students can register online, view their own results, and teachers can view all their student results, and all past result history is graphed over time using Google Chart API, and... Oh, and I've barely written any custom code! Hooray! Anyhow, I could rant about other site features, but just trust me -- Drupal is superhuman :)
You can always start with the basics and add later: use Workflow to manage states, but only enable/use Rules when you need the functionality. If you start building with a different method, it would be difficult to transition. I'd never heard of WebEnabled... interesting concept. Thanks for the tip!
Not shur what you're trying to accomplish.. like the man said, it sounds like a job for cURL, but if you want to watch your headers, there is also [liveheaders](http://livehttpheaders.mozdev.org/), which I use.
Good point. For the record, I think you can theoretically do this with [more conventional modules, using CCK, Rules and Content Access](http://nodeone.se/blogg/proof-of-concept-workflow-built-on-cck-rules-and-content-access) (instead of workflow/rules), but it's probably best to keep it simple when just jumping in :) Oh, but if you did use that link, since traditional access modules lead to confusing conflicts, you could use Page Manager to handle access control instead (again, advanced stuff though, lawpoop). ([merlinofchaos mentioned it once at one point](http://drupal.org/node/969560#comment-3712248), and I'm finding it works really well) Ugh. The worst part about Drupal is that there are a billion ways to do anything. It's sometimes paralyzing, but just keep with the simple Workflow/Rules, and you should be fine for your needs :)
open source orm libraries for PHP http://www.findbestopensource.com/tagged/orm-php
I commit them all to memory and then individually approve each one.
If you're running PHP 5.3 (and if you're not, you might want to think about it), I'd just go with [crypt()](http://au2.php.net/crypt) these days in Blowfish, SHA-256 or SHA-512 mode with a random salt. On 5.2: [hash()](http://au2.php.net/hash), one of the aforementioned algorithms, and a salt; you'll just have to append the salt to the password yourself.
I store the IP address users sign up from and hash their passwords as `hash_hmac('sha256', $password, $original_ip)`. I do a similar thing for my own passwords, though in practice I usually have to truncate them because far too many sites are run by idiots who enforce a maximum password length. 
hash_hmac, sha512 with a salt defined as a constant in a file, outside of the htdoc root.
I use hash() with sha512, a 32 char salt, and 1000 iteration stretching.
Does using a salt help even if the web server is hacked and the salt string is found in the source code by the attacker? I understand that a salt does help if the database alone is hacked, but does it have some value if the attacker get access to the salt string itself?
It helps a bit, as they would need (most likely) to generate a rainbow table for that specific salt which takes a while. If every salt is different, it makes it very very hard to crack many passwords quickly.
You have to assume the hacker got a hold on all your code/data. A salt is used so that 'normal' rainbow tables can't be used, but a custom rainbow table can be made for any known salt. This takes time, yes, but once done, the hacker has all the passwords. Using a random salt forces the attacker to hack the passwords one at a time.
A constant salt makes it vulnerable to a custom rainbow table.
Agreed, but I didn't know better until I read this dicussion. Also, while not touting it as a good thing - the constant salt is 32 characters long, randomly generated string with symbols.
Unique salt for each user, and hash it more than once. Something like this is what I use: $globalSalt; //set somewhere where your hash function can access it - I have it set in my user auth object $salt = randomSaltGen(50); //returns 50 pseudo random char string of a-z0-9!@#$%^&amp;*()-_=+[{]}|:;"'&lt;./? for($i = 0; $i &lt; 1000; $i++) { $salt = substr($salt, 1, strlen($salt)).$salt{0}; $password = hash('sha512', $password.$salt.$globalSalt.$i); } Password hashing **should not be fast**. (And yes I know there are much slower alogrithms than sha512) This is a great read on rainbow tables and what you should be doing to protect your passwords: http://chargen.matasano.com/chargen/2007/9/7/enough-with-the-rainbow-tables-what-you-need-to-know-about-s.html *Edit*: While showering I remembered I used a rotating salt and a global/site wide salt *Edit 2*: Thought I'd explain what's going on with the code - &gt; for($i = 0; $i &lt; 1000; $i++) This is done to increase the time it takes to create the final hash. This would mean the attacker would have to spend approximately the same increase in time percentage on each hash they generated that you did. What's nice is in the future as hardware gets faster you can just tack a zero on there. &gt; $salt = substr($salt, 1, strlen($salt)).$salt{0}; Slows it down a bit, but mostly just makes it so now we have x different salts (x being the length of the string). So in this example the attacker would have to generate 50 different rainbow tables and not just one. &gt; $password = hash('sha512', $password.$salt.$globalSalt.$i); We append a global salt, which is stored separately from the user's unique salt, and the iteration count for good measure and hash it up. After the first iteration the password becomes 64 characters long which means huge rainbow tables need to be generated to find a match from. 
I really hope you're being serious!
My biggest complaint are those who log in late at night. I have the password confirmation script tied to my alarm clock, but it's a pain to wake up every few minutes to confirm a username and password.
If you are considering toro take a look at slim http://www.slimframework.com/ It's much simpler and robust. I'm using [idiorm](http://j4mie.github.com/idiormandparis/) which is a one file ORM, take a look at it too.
HMAC
I use [PBKDF2](http://en.wikipedia.org/wiki/PBKDF2) ([here](http://www.itnewb.com/v/Encrypting-Passwords-with-PHP-for-Storage-Using-the-RSA-PBKDF2-Standard) is some more information and [here](http://www.ietf.org/rfc/rfc2898.txt) is the RFC thingy) Basically what it does is it takes your key and runs it through a hashing machine a lot. I use 8000 which takes about 100-150ms on my machine. This is fine for single logins/registrations but will make brute forcing very hard - which is the point. Even a 6 a-z password would take over a year to brute force with this approach. Feel like using 8 letters (A-Za-z0-9)? About 422219 years.
nice try, 4chan.
I use whirlpool, and concating twice a custom 16 to 32 length salt with the username and the password.
 $password = sha256($password.$salt); if(sha($in_pass.$salt)==$password){ echo "was that really so hard?"; }
You can run whatever SQL you want in Drupal as well and replace the view by custom code if you need. Or, indeed, fill one of those gargantuan data arrays and implement handlers until your brain falls out.
That wouldn't be so swell on a production machine where lots of people are logging in.
SHA-256 + per-user salt. Why per-user? Well, now instead of one rainbow table for all accounts you need one *per* account. I just use a "random" string generated at account creation.
So how do you link that random unique salt to the user?
So what happens if they try to login from a different IP?
It gets stored in the table with the rest of the user info. (Also, I forgot a couple other things in my op and it's been updated)
or limit you to alpha-numeric chars (damn you iTunes!)
notepad ++ with ftp extension
&gt; I understand that a salt does help if the database alone is hacked, but does it have some value if the attacker get access to the salt string itself? Yes, because they still have to individually break each hash. That can take a lot of time if you use a strong hashing algorithm. Saving unsalted password hashes is pretty close to just storing them in plaintext, for the majority of your users who will invariably choose common passwords. Salting them, even with a publicly-known string, still adds a lot of rigor. Of course, using a different salt for each one is much better still, because otherwise an attacker can focus his efforts on the most common hashes and maximize his return for investment in brute forcing.
&gt; I store the IP address users sign up from That's what. op doesn't use their current, just the users old, original one from the db. 
He stores the original IP in the database.
How long will it take you to prepare a custom rainbow table for my SHA-512 password database?
I usually start by figuring out what [if any] database tables I need, I draw them out paper, drawing relationships etc. Then I start working on the "classes" I'm going to use.. more time is spent on naming these than coding them I'd wager! After the database tables I just jump right into coding a class [usually starting with database interactions] then I just go from there, adding and changing what I need. I think once you get a good "base" your set! Plus keep everything as Object Orientated as possible and making changes you didn't think of later is usually pretty easy! 
As others have already mentioned, we have no idea what you are trying to accomplish so you should definitely go into greater detail. That being said, you are going to want to use AJAX (I prefer jQuery to simplify this) to make the server-side request. This still requires you to use php to interact with your database. Also it is important that you understand that JavaScript is client-side only and thus can't interact with a database. This is why you need to use it to call on php for your server-side operations.
I look at websites and try to emulate features. This started when I was a young teenager browsing [GameFAQs](http://www.gamefaqs.com/boards) and I had a certain disdain for some moderators arbitrary deletion of posts. The site administrators opinion on the subject of unpopular moderators was something along the lines of 'If they don't like you, you must be doing something right.' That isn't to say all moderators were of poor quality, some were very helpful and often had large collections of FAQs and contributed well to the message boards. This lead some groups of people to band together and write message board systems from scratch. Naturally they were of poor design (both in functionality and security), but -- after a couple years and various people producing their own code and revising existing code -- security and functionality improved greatly. There were various cases where some source code contained innocuous security issues (storing usernames and passwords in cookies, rampant SQL injection issues), this was a time before SQL injection became widely known (a solid decade ago). All in all it was a wonderful learning experience.
I'm going to confess to be pretty clueless, but very eager to learn when it comes to most of this stuff. Would one of your mind offering up a small tutorial on hash+salt as well as user table structures to make this all work. I will gift one internet for this.
What's the benefit of hash_hmac() vs hash() ?
Okay.
Thanks for sharing. It's the Christmas season after all.
[HMAC](http://en.wikipedia.org/wiki/HMAC) is just a standardised way of salting the input.
I spend a lot of time sketching relations and figuring out the basic functionality I want. Then I start coding, first creating a skeleton program and slowly extending it and adding functionality. I feel that (at least for my personal projects) a "code first" mentality helps me actually keep interest in what I'm doing. Otherwise I'm burnt out by the time I get to coding.
md5($password.$fourtyCharacterSalt) -- We have a single site-wide salt. We only have about 500 accounts, all of which belong to business partners. All employee logins are bounced off of AD via LDAP.
https://gist.github.com/739134 That's the basics of how I do it.
Uhh, you're doing it wrong. You should never be storing the plaintext value of $password in your first line.
Second this. In a nutshell: I start by defining what *entities* will be needed. Then I define *must-haves* and *can-haves*. For example: A blog post. Must have: title, date, an author. Can have: a category, some content, some tags. It's also important to define what an entity won't have, especially if the work is for a paying, or even worse non-paying, client. (Client, just before launch: "But all blogs have a comment system?!", you:"comment system?!") Check out [MoSCow](http://en.wikipedia.org/wiki/MoSCoW_Method). This then generally leads on to more entity definitions, in this case, *author*, *category*, *tag*. This is the beginning of the technical spec, and will eventually provide the basis for the data model (i.e. database tables). The tech spec. is then filled out with methods ('author must be able to publish / delete / edit post'), which generally develops the data model ('blog post can have edited timestamp, must have "is published" boolean flag'). Then create the database, create the Models (ORM) with any custom methods required. (If you've got a large enough budget and the project is complex enough, create unit tests for all model methods. I've *never* been able to persuade a client to pay for unit-testing. Clients always underestimate the complexity, and will always want exceptions that bloat the scope: 'Blog post B should only be available to set of users A!', you: 'user groups?!') Then we define the Controllers and Actions, and their URL mapping. e.g. `http://blog.com/post/1/edit/` Implement Controllers to get/manipulate models; build views to pass said models to. Test on development server, deploy to staging. QS. Get release from client. Deploy to production. Monitor logs generating by nifty custom error and exception handling. Create bug tickets. Fix bugs. Re-deploy. Repeat until software is stable.
sweet juices.
I have my client sitting over my shoulder constantly asking me what I've done. Really annoying :|.
Work is awesome. But maybe that's because I compare it to working in the defense contracting industry. Bureaucracy, red tape, waterfall method of software development. I now come into work, log into our issue tracker and see whats assigned to me. Maybe some PHP, maybe some C#. Maybe a bug, maybe an improvement. There is no public to interact with and generally the people you work with are like you. My fiance works as a nurse, she comes home and tells me about her day, then asks about mine. The only response I have after listening to her horror stories is, "Good". Leaving my engineering job in the defense industry for a web dev gig is everything I had hoped for and more. My recommendation to you is build up a portfolio and run your portfolio of clients as a business.
1) Single global sitewide salt - 64 bytes of binary nonsense 2) User specific salt - 8 bytes of binary nonsense effectively... $hash = $username . $siteSalt . $userSalt . $password; for($i = 0; $i &lt; 1000; $i++) { $hash = hash('sha512', $hash); $hash = hash('whirlpool', $hash); $hash = hash('snefru256', $hash); } With this setup, even if the hacker has full root access to the server, it'll take him YEARS to bruteforce any password (unless he gets lucky enough to guess). sidenote: you can use [this](http://paste2.org/p/1140122) code snippet to find out which hash algorithms are the slowest on your system and use one (or more) of them. 
Are you freelancing? or working at a company? 
I thought hash_hmac/hash/sha1/etc ... was a good password hashing option, but it's not. Please tread carefully. hash_hmac is fast and thus can be brute forced at a much faster rate than crypt (depending on the algorithm). http://uk2.php.net/manual/en/function.crypt.php crypt allows you to specify the number of rounds (cost) per each password generation. So if you've gone from 1 microsecond to 1 millisecond you've increased the time by a thousand. This isn't notable to your users, but it really affects any brute forcing attacks if the worst comes to the worst. Normally I generate my passwords with something like this: $salt = bin2hex(openssl_random_pseudo_bytes (8 ,$strong)); crypt('password', '$6$rounds=100000$'.$salt.'$'); The advantage is, when computing power increases, you can change the number of rounds on your users passwords easily. 
What you describe sounds fantastic. I am Jacks salivating jealousy. &gt;My recommendation to you is build up a portfolio and run your portfolio of clients as a business. Is this what got you the job? Also how did you go about getting a portfolio? Craigslist?wordofmouth? I'm wary about freelance websites, though only because I'm unfamiliar. 
I've done both. Right now I'm freelancing so I work directly with the client. When I was part of a web development company the client was more up my bosses ass then mine. It's just something you get used to I guess. I love web development though! :)
At the company did someone just drop a set of daily/weekly tasks on you? also what was the most common task?
Why don't you use crypt? It does exactly what you want, but at the PHP level.
Uhhh yes and no. Like for the majority of the time you know what you need to be doing (as stated in the project requirements) and once your team leader has assigned you work you pretty much have a set amount of time to work on it. Once completed usually your team leader will give you some other part of the project to work on. Some team leaders like to set goals (like mine) and he would say lets get this part of the website going or can we finish this page by this time, but that totally depends on the person.
Hmm some advice would be to try and stick to open source tools when you can, read about design, color theory. I got started with books because I think it was easier to digest and more comfortable to learn some fundamentals that way - although they can be found online. Try to tie in design / user interface design and photoshop as much as you can because they will blend together a lot. Also, don't always take the easiest way to do something because that's not how you learn and it will make your life easier in the future. Learn about php frameworks as well and mvc, all that cool stuff. Good luck. I've worked in companies and at home - really a good job that I feel grateful to have. And have a passion for it! Try to be the best at whatever you do.
I can't remember the PHP code offhand, but the formula was $salt = first 5 digits of user password, so that: $encryptedPassword = encrypt($salt . $password . $salt); Stored in database as $encrypted password, with full table including the following core fields (of course have others like say, email_address and whatnot, but the required ones as follows): username ip_Address timestamp encryptedpassword
I don't have photoshop right now, but I'm competent with html/css. I feel like I could take a psd file and turn it into a site. Color theory is not something I'd considered yet, so I'll googling for some good tuts. For frameworks I feel like I should learn Zend and Drupal. Also wordpress(although from what I read that is not necessarily a framework). Right now I'm working my way through php slowly. To learn hands on I'm trying to develop a website for a band, I'm coding the event calender now. Not sure if I'm doing it right but I figure I'll throw it up here or /r/phphelp when I'm done. Thanks again for the advice!
I write them all on Post-it notes and cascade them around the bezel of my monitor.
I don't think drupal would be considered a framework. I was thinking more along the lines of symfony, codeigniter, cakephp. Oh forgot about jQuery - must know that. Extremely useful. Also in firefox, firebug is great tool for web dev that I use every day :)
I just imagined some kind of incredible Rube Goldberg machine linking the notification to you waking up.
FWIW, iTunes U uses this type of system. /itunes u administrator at a university
Nah, I had to scrap it after the hamster got full and stopped running up the trackpad to get his peanut.
Good Security: Layers of an onion.
Nice. I hadn't pictured a hamster in the setup.
If you have a million users, it would take a million times less than if you had used random salts.
Ah, I have far to go. Drupal seems not to be a framework, though I'd be lying if I said I understood why it isn't. Just found an article about it [here](http://www.mattfarina.com/2009/02/03/is-drupal-a-web-application-framework-or-just-a-content-management-system) for the curious.
Originally because of this: &gt;The standard DES-based crypt() returns the salt as the first two characters of the output. It also only uses the first eight characters of str, so longer strings that start with the same eight characters will generate the same result (when the same salt is used). The sha256 and 512 support were just added as of 5.3.2, I didn't have access to blowfish, and I didn't think the des implementations are secure enough. (not sure you could even really call them secure)
One salt and md5? Ouch... 
Doesnt that defeat the purpose of the hash then?
md5(Random text string set in site config + password + timestamp of registration). Passwords are generally 30 characters long before I hash them.
No, the purpose of the salt is to make sure the hash isn't a known predictable value. For instance, the md5 hash of "secret" is "5ebe2294ecd0e0f08eab7690d2a6ee69". This, and millions of others, can be found in databases that are freely available on the web for download (which, if you have broadband, is a lot faster than calculating them yourself). If you salt the password with some other text before hashing it, then the hash you end up with is very unlikely to be on these precomputed lists. Therefore the attacker needs to brute-force that individual hash, which is computationally expensive. This is true even if the salt is known - that only reduces the search space by a small amount. It will be no worse than having no salt, and better by some margin.
Craiglist is a good tool. But im sure that varies by location. I was lucky to have a friend in the business who was a year or two into starting his own web dev shop. As crappy as it might initially sound, doing some volunteer stuff for non-profits and such is a good way to build up a portfolio.
And if I walked around wearing 8-foot-thick kevlar armor, you DEFINITELY couldn't stab me in the chest with a pocketknife.
Thanks for the nice outline. You should also save that salt in an obscure way in the database.
This is how salting should be done
You could also prepend the salt, which is itself a hash, to the salted hash. [Like this](http://phpsec.org/articles/2005/password-hashing.html)
I've used this -&gt; http://phpsec.org/articles/2005/password-hashing.html. The tutorial might be good to read through. The part about Making it Better near the bottom is a general outline of what I've used (you probably don't want to use SHA1). Your random salt will then always be prepended to your password. 
good documentation.. zend.. upvote for comedy. (for those unfamiliar, i'm not talking about the PHP manual which is maintained by the community.. zend framework's docs are the worst i've ever seen)
**bcrypt** It has multiple possible outputs for the same input, not attack-able by rainbow tables... More importantly, it has **scalable security**. `sha1`, `md5` and other hashing algorithms are too fast to be secure, regardless of salting or not. With `bcrypt`, simply up the number of iterations when increasing your computing power. And yes, `phpass` is the way to go... It uses `bcrypt` when not in portable mode.
Care to enlighten me? Not sure how else to check the password with a regex otherwise.
I do $salt = md5(microtime().$_SERVER['REMOTE_IP']); $password = md5($password.$salt); I store the md5()'d $salt and $password with the user's data. After reading through this thread, though, I will look at hash_hmac().
What about cakes? Cakes have layers.
Straight MD5 is a joke as there are already pre-computed tables of values for it, same goes for any unsalted hash. `crypt()` as is the case here just hashes 5000 times by default, that's a known value so it's easy to build tables for that too. Salting every password by concatenating an identical string to each one is more secure, but still crackable with enough time and resources. A string specific to each user is a lot more secure as it renders any precomputed table useless. HMAC is more secure than concatenating strings as it's a less common method. Same applies to less commonly-used algorithms. Using an algorithm because it's obscure and unoptimised isn't a good idea though; just because the default implementation is slow doesn't mean someone determined enough can't optimise it to run much faster. Basically you just have to make cracking your password hashes slow enough that nobody will care. "Slow enough" depends on what those passwords are protecting.
Salting, 30 stretches through SHA2-256, a bcrypt run, a pepper, then SHA2-256 HMAC between the client and server.
Thanks for the link!
[Doctrine](http://www.doctrine-project.org/) 
Wouldn't hashing the password multiple times theoretically increase the chance of a hash collision?
Thanks for that explanation, up to now I didn't understand the need for per password salts.
I'm a financial systems analyst. Basically, I run the Cognos/TM1 software, ensure validity of the numbers, write custom turbo integrator processes, etc. It has nothing to do with PHP.
Nearly everyday schedule... wake up drink cup of coffee and reddit do a few hours of work put on pants and go get lunch back home to work more smoke weed go to sleep rinse and repeat
I work for a telco in north america doing bug fixes and system enhancements using php, perl, and ror to some of the company's external properties. i also do some admin work on the sun solaris servers that host the websites. work is not too bad; all my tasks come from the different business departments within the company.
Where do you store this per-user salt?
I work building web apps that suck in data from our users. That's the primary job description. However, I also manage our infrastructure (web and email), write content, manage static sites, act as QA/QC, design layouts, do graphics work, and help assist with our core mission (writing academic peer reviewed literature). It's not as interesting as it once was. Once you've solved a program twice, it grows boring. Im here for the paycheck, looking to transition out into my startup soon.
Same place as the hashed password: the user table.
I don't care what everyone else likes! Good Security is not like cakes. 
just test it out and see what suits your needs (or intended interpretation :) the best. use every 35th, average 35 points, show more than one point (two? three? all different points?) vertically (to get a sense of the deviation), use highest of 35, use lowest of 35, ... that's the magic of charts, you can make it look like anything you want :)
Create your own crypt function for more security: http://is.php.net/manual/en/function.crypt.php#94176 &lt;?php $password = 'somepass'; $user_input = 'somepass'; echo "--- crypt ---\n"; $crypted = crypt($password); // let the salt be automatically generated echo 'Crypted pass:' . $crypt . "\n"; if (crypt($user_input, $password) == $password) { echo "Password verified!\n"; } echo "--- mycrypt ---\n"; function mycrypt($clear, $hashed = NULL) { $salt_len = 100; if (empty($hashed)) for($salt = '', $x = 0; $x++ &lt; $salt_len; $salt .= bin2hex(chr(mt_rand(0,255)))); // make a new salt else $salt = substr($hashed, 0, $salt_len*2); // extract existing salt return $salt . hash('whirlpool', $salt . $clear); } $mycrypted = mycrypt($password); echo 'Crypted pass:' . $password . "\n"; if (mycrypt($user_input, $password) == $password) { echo "Password verified!\n"; } ?&gt; 
out is something like: $ php hash.php Crypted pass:$1$Wgvd.le1$olGwCrJGtL4JJoOO1aqK.0 Password verified! ---- Crypted: pass:ebf2727bc59c44bc47f567d9365a8f54456d0d4b5d560efb30502eb254bb46e33e1acb285914c8a30d3143a39016ba7bd8f39a9f2802c9c6a8433c73f00b853ad631597176f2cc4f85049c9b5c0493bf73bd127586c2b56d1353528f4a93a7ca94d0cc7e072dfc0095e87df30be3693bb94e7f7ced2ddd2f2c874bb3d718cfa549ddc4ff92a3c5c6e5d0d8de265703a198d210ae4bc6ed7d8f12a0b51706a4b770b57785 Password verified! 
You should be using crypt() with something like blowfish or SHA-512. Make that salt long and random for each password being inserted. DO NOT use a single salt or 2 way encryption. If someone gets the salt and access to your database you are very screwed. With crypt the salt will be included in the hash, don't worry about this. Since it's 1 way the password has to be hashed then checked against the hashed password in the DB. The only way to get that password is to brute force the pass by running a list against the value. The more encryption the more time consuming. You may also want to double crypt your values, and use different kinds of encryption for each pass. Forcing users to use strong passwords or passwords that are 12 characters or longer also greatly increases the time required to brute force the passwords. With the speed of current computers 8 char passwords for anything important is kind of stupid idea. You can have the best hashing in the world and if your user uses "password" as their pass they're still screwed. Force strong passwords and encrypt with a long, random salt for every new password every time. [PHP Crypt() Man Page](http://php.net/manual/en/function.crypt.php)
Shouldn't you should use a server salt additionally, which is in the config somehow? If they get the db, they just have to recreate your hashing algorithm to brute it but tack the salt onto hashed text? I additionally use a server unique salt that is stored in configs. If you wanted to be really secure, I guess you could run an authorisation daemon on a different server that is the only thing that has access to the user table, and is only accessible. It adds POF.
&gt; which is computationally expensive And getting less so, day by day. user salt + server salt + original password This gives your hashing algorithm two points of failure rather than one.
Well security through obscurity is dumb, you should be secure even if they can look at your sourcecode.
&gt;And if I walked around wearing 8-foot-thick kevlar armor False analogy. Eight feet of kevlar would be quite expensive and extremely impractical to wear. Per-user salting is cheap and easy.
Your code snippet implies that $password contains the plaintext value on line one, since you salt and hash it before comparing it to the salted and hashed $in\_pass on line two. When you store passwords, you should be storing the hash of password+salt. Then when the user logs in, the only salting and hashing you do is to the plaintext password they provided. It should match what you have stored -- not some computation on top of what you have stored. Also, you're not using regex in that snippet.
PBKDF2 is an amazing standard and I *really* need to start using it more.
Hey, we keep a list of the usernames and passwords on a network drive. If data gets compromised, it's not the hashed values I'm worried about..
Substitute $password for $_POST['password'] and put some regex in there. It's an example, not a snippet...
I absolutely love my job. I am a software/systems engineer for TwitPic who started back in May of this year. One of my favorite things about the company is that we like to keep a startup-like atmosphere and we're all around the same age. I'm the youngest at 21 years old, and my boss, Noah, is 27. We're super-lax about working time, but we all enjoy what we do so much that we usually end up working overtime anyways. Currently we all work from home, but we are in the process of buying offices downtown Charleston, SC. I've been doing web development for 6 or 7 years now, but I've definitely learned the most since I started with this job. Learning to work with real, large-scale, systems is always a trial-by-fire, and it's a challenge I enjoyed. At my last job, we had 2 dedicated servers, and I thought that was pretty sweet. Now, at TwitPic, we have 35 (or was it 36?) dedicated servers and we have to handle around 3000 requests/second. Compared to some sites, this is still a small number, but it was a huge jump for me. I got the job almost by luck... I saw an article in the Charleston magazine with an interview with Noah, and I emailed TwitPic out of the blue asking if they were still hiring. I sent in my resume, and met up with Noah for an interview, and one thing led to another and I got the job. So really, spend some time to really get into web development, then when you think you are ready, start putting yourself out there. Maybe start with a smaller job first, but don't be afraid to contact some of the bigger sites or startups. At TwitPic, we primarily deal with PHP. I also did pretty much all of the Javascript for the site, and I do a lot of HTML/CSS as well. We wrote our own PHP framework (that we plan to open-source soon) and we run FreeBSD on our servers (which I had never touched before the job, by the way).
Drupal development and research. Not gonna lie, very rewarding, exp when I can get my hands down and dirty with php.
can you provide a sample data point?
I don't think so. How do you think it might?
can I stop in and see just for the hell of it. Next semester I will be in Moncks Corner, SC
Haha that's awesome. Unfortunately we won't have the offices until early next year sometime though :(
boo! The position I got is a really awesome position. Not the internship style I was looking for, but am REALLY excited for it.
If you can't convince your boss otherwise, and will be unable to perform the new job, I'd suggest the best option would be to start looking for employment elsewhere. You have to ask yourself if it is really worthwhile working for an employer that doesn't value your opinions, or even yourself as an employee.
&gt; it's not something I can "Pick Up" in a few weeks. Why not? Things aren't going to happen overnight. By changing all your systems over to ASP, are we talking about rewriting code? That could take months, years, eons. You've got nothing but time. 
If your php code wasn't MVC, here's your opportunty. You may as well just learn the language on your bosses dime, since it's his idea. It shouldn't be that bad. Both languages use C like syntax.. a model is still a model, a controller is a controller.. a view is but a view. Just remember to use . instead of -&gt; and &lt;% instead of &lt;? and you're on your way.. 
&gt; So ...any advice out there to help me keep my job? Why would you want to do that? edit: what was his reason for switching btw?
I want to keep my job, so that I dont have to look for a new one..and it's rather close to home. And the reason is stupid really. He was convinced by his brother in law that it was better because it's not free is the basic reasoning behind it..
Yeah that is what I am thinking. Just curious to see how long that will last for though. I mean he is going to be spending ALOT of money on the change over. He is planning on hosting everything locally aswell...sigh.
Wow. No chance you can change his mind? That's beyond retarded.
Have already tried. Unfortunately it's out of my hands.
You reduce your potential sequence values to a uniform space, and considering there are examples of [2 sequences with only 6 differences sharing the same md5 hash](http://www.mscs.dal.ca/~selinger/md5collision/), you run the risk that 2 passwords initial hashes are close enough that a hash of *their* hashes results in a collision. You're better off using `sleep();` than continually rehashing the password, destroying any uniqueness the hash had in the first place.
Start looking for a new job and GTFO at the first best opportunity. If your boss will pull the rug out from under you and dip his hands in systems that are supposed to be your domain without consulting you, he clearly does not respect any technical decisions you make and does not support you (and will not in the future), especially once he gets tired of paying for every single little thing (ASP can be a bitch on a budget). That being said, don't be a dick, learn ASP.NET MVC. Spend time using LINQ to SQL or NHibernate, whatever floats your boat and has the best tutorials. Document your code, follow established guidelines and coding techniques, go "by the book" as possible and leave something at least workable behind for whatever poor sod your boss hires when you're gone.
That sir is very good advice.
I just wait 9 months!
I once took a job that involved doing ASP development. I didn't last a year. After PHP it was a really miserable environment to be in - primarily because the online ASP community is a raging pack of assholes. That, and you have to shell out $$ for every little add-on and utility object because Microsoft provides very little and there's no open-source ecosystem to speak of. You don't know how good you have it with PHP until it's too late! But as others say, the real reason to start looking for another job is because your non-technical boss is making technical decisions for you without your consultation. That is a really bad omen.
Are you going to have to manage the hosting too? Say goodbye to sleep and weekends.
No, I'm not willing to do that especially for the money I get paid..no thanks!
I'm not sure if it has been mentioned yet, but one method I'd like to try on my next site is to not only embed the (per user) salt inside the hashed password in the database, but also make the length of the salt dependent on the length of the password. Ie: 8 character password = first 8 characters are the salt. 10 character password = first 10 characters are the salt. And of course the salt is also hex (not just any random characters), so that it is indistinguishable from the rest of the hashed password. This way, even if a hacker gets hold of both the database and your source code (to see how hashed passwords are stored), it should be still quite tricky to create a rainbow table. The downside of this method (the way I explained it anyways) is that you have to impose both a minimum and maximum password length. Minimum length shouldn't be an issue, but the maximum password length should be well below the total hash length (for sha1(), that's well below 32 characters, ie: 20~28 characters max).
Good to hear that you have it under control. Aren't those script kiddies the best?
Why isn't ASP something you can pick up in a few weeks? Hell you should be able to churn out something simple in a week tops. Then build on top of that.
Can you fake it by configuring your webserver to treat .asp/.aspx files as PHP files? :)
I hope you didn't mean the sleep(); part seriously. While he would indeed be better off because rehashing is silly, using sleep(); does not address the reason why password hashing should be slow. The theory is that when your user database is stolen the time it takes to crack a users password is directly proportional to how fast of a hashing function you used. Therefore a slower hashing function is desired as that would significantly slow down the rate of passwords being cracked. sleep(); would certainly slow down the time it would take to login, but the actual hashing algorithm speed would not change.
Wow ... Ask him to name a couple of "big sites", calmly point out all of the free software they employ. E.g. this was posted in r/opensource earlier http://blogs.computerworlduk.com/open-enterprise/2010/12/netflix-opens-up-about-open-source/index.htm?cmpid=sbredditschapman Alternatively, look on the bright side that you will get paid to learn a new skill set (or is he planning on getting rid of you?)
I felt the same way about the ASP community, you nailed it. 
I look at the problem, think up a basic solution and then start coding until I have an unholy mess that works. Then I test it a bit, work out all the bugs I can find. Finally I rewrite it with better structure, commenting, better efficiency etc. Really finally I test it again because there are probably some bugs I missed, then it goes away for QA.
When the form is submitted the PHP is aware of this fact as it must write to the database. Get the PHP to create a hidden input at the end of the page when it writes to the database. Get your Javascript function to run once the page is loaded and only if the hidden input is present.
I spend a while thinking about the problem and try to break it down into mini projects that I have seen and done before. For example, users logging in and seeing a profile page. That is something we do in each project. CRUD for whatever the user is interested in (purchases, orders, friends, pictures, whatever) History for everything - so the D of crud becomes something different (maybe just a 'deleted' flag in the table) The database is going to be a few intersecting tree (hierarchies) e.g. users - orders - products ..and.. town - building - shelves - products. Think about how to 'delete' a product, rename a product? Etc. After 10 or 20 projects you get a feel for how *you* do the bare bones and you'll get that up and running with little documentation or planning. Keep a multi level todo list. Get releases out weekly - just to keep you focused. One click release (phing) testing (selenium) are both nice little mini projects for when you need a quiet day reading stackoverflow (with a hangover)...
Yeah, I am quite happy to learn a new skill set, infact that will be quite benificial. ASP developers get paid a bucketload more than PHP, but the problem is, I reckon he will pull the rug out from under me when he realises how much it will cost him to keep me on
Best idea I've seen so far.
You aren't really defining what sort of problems you want. I used to think this advice was silly/difficult to follow, but reading other peoples code is actually a great learning tool. There are so many ways to do things, and no guarantee that any one is better than another given a context. If you want to learn more about algorithms/math/etc then as uksheep suggested, project euler is fantastic. If you want to learn more about getting stuff done, then doing stuff is about all you get. Code something, recode it, grab a framework and recode it, code a simple framework to recode it in ...
Tell your boss to start conducting all business from now on in Russian. Many people get a lot of business done in Russian, and I'm sure he can pick it up in a few weeks. It's not like it does anything different than English. Of course, *he* is the boss, dhoh!
Yeah win boxes give me a feeling of revulsion also. Unless I really had a strong reason to stay with the company, I'd boot. Programming jobs are not that hard to find if you are reasonably knowledgeable and have some kind of work ethic. I got my last gig from a rant I posted on craigslist about how stupid the ads were for 'web designers'. I'm just trying to say relax and breath man.. it's just life. It will change around on you sometimes. Consider it a growth curve, something not many of us pursue, but things that just come to you. You will be okay. We all help each other out.
Actual ASP or ASP.NET? .NET is amazing. ASP sucks a fat one.
I agree on maybe starting to look elsewhere but you could also use this as a good opportunity to learn another language, make yourself more employable and raise your potential salary in another job further on down the line. It can be daunting to jump into a new language after being very familiar with another but if you have a grasp of OO principles C#.NET is a cool language to learn.
Wow. It bothers me no end when people won't trust OS software just because it's free. The internet is built almost entirely on free software.
If your looking at learning PHP. The BEST method is good old "dive then sink or swim) Think of something of interest to YOU. build a website based on that. Once you got a website. Then start thinking, hmm, it be cool if this could happen. Such as allowing people to add comments, add stories, add pictures ect. I built a website to learn HTM / PHP about a disability I have, it was mainly for my interest on learning HTM. its now one of the biggest information sites for said disability. Started as a basic HTM site, then added Email stories, changed to DB, auto upload (with admin) now its got a forum, stories section, comments section, image section.
- Tell him you will leave if he will not take your huge list of arguments for why PHP is a perfectly good option (you should be able to find millions in no-time) - Tell him the cons you've already come across, and that you know PHP's ins and outs. - Tell him also about the risks involved (Microsoft software is targeted even more, you need updates, which means downtime, you'll need to consult with Microsoft if there's a real problem) - Tell him the costs of converting the whole environment to a windows server 2008 system, and any other licenses for things that you would have to buy to do the job, instead of installing it from an opensource package. - Tell him that you're bummed that he does this without consulting you, and that you think that you're doing a perfectly fine job with the environment you're in And on top of that tell him 'my brother in law told me' is the most stupid reason i ever heard to change a working system. (you can quote me on that) Footnote: My opinion is that any self respecting programmer should be able to switch programming language within a matter of weeks. And should, every now and then, just to keep him sharp. But in this thread, i give the advice above based on the 'my brother in law' reason... [edit] Possible complicating variable: Is your boss' brother in law a Microsoft Employee, or a salesman? 
On windows side :the firebird driver enabled (for pdo too) but only for the Visual C++ 9 builds (If you use Apache on Windows you should check if it‚Äôs build with VC9 before using the new builds , VC6 build driver is not available for the moment) ps: apache lounge does have VC9 builds for Apache but i didn‚Äôt tested it yet
&gt;your non-technical boss is making technical decisions for you without your consultation Kind of like the CEO of an airline trying to tell the pilot how to fly the plane. The CEO tells the pilot where to fly but not how to fly there.
Sounds like a great way to write insecure code
Then what purpose does $in\_pass possibly represent? In any case, your code implies there are two plaintext passwords that need comparison.. and that's a strong indicator something is wrong. I also don't see any point in using regex on login. Whatever they provide, salt it and store the hash. They can be supplying binary for all I care. All this talk brings me back to your original question...
I think if my directors mandated we use ASP over PHP, I would laugh first then walk. We have a consultant who hates PHP but loves perl, it was an interesting few months when I first started to convince her i wasn't just writing crap in PHP.
As someone who will be learning PHP in the new year I hope I learn to read PHP as not just a bunch of jibberish some day, haha.
Oh comeon now, I learned php in about 3 weeks while writing an application for my employer at the time. I then spent about 5 months ensuring it was secure and perfect, but the core of the application was working within 2-3 weeks.
Quit. Now.
It is an important distinction. I started with ASP 3.0 then moved on to PHP and they're very similar. ASP.net is a totally different beast and I've never had enough time to sit down and learn it completely, I've tried jumping in a couple times and it's not that simple.
Man up. If you are going to make a living in computer technology, get used to learning new things.
First, you need to make sure that you switch to the right version of ASP. You absolutely must go with ASP.NET MVC. Then you must make sure that you use the correct server side language. Choose C#. I would even go so far to choose a different view engine than the Microsoft defaults. I chose to use the StringTemplate View Engine. Whatever you do, do not scrimp on the developer tools. You need the full version of Visual Studio for all developers. If you are also switching to SQL Server for your database, try to get the latest version, 2008. It has a lot of very useful features that will save you time, especially if you write a lot of code in stored procedures. In my experience Visual Studio and the SQL Server database and tools provide a much better experience than anything I have ever used for developing PHP. The C# language is very awesome in my opinion. You end up doing a lot of things and wondering why PHP doesn't do things like that (of course, there will be some times where you'll see the opposite). I've been watching the PHP internals mailing list, and the resistance to adding features that make C# a joy to use is astounding. Anyway, back to you original question. If you set up the environment with ASP.NET MVC with the StringTemplate View Engine and use C#, I think you could definitely pick it up in a few weeks. If you have used any of the template engines in PHP, StringTemplate should be simple to pick up. If you have done MVC programming in PHP, then the pattern in ASP.NET MVC should be simple to understand. And it shouldn't take to much to understand how to use C# coming from PHP. Lastly, I speak from experience. I was a PHP developer when I moved into my current position. The only advantage I had over you was an existing code base to build from, however ugly it was, I had a starting point.
Indeed, Propel is awesome. But only starting with their 1.5 release. Before that I hated it's query syntax with all my heart.
Switching to COMPLETELY different systems without consultation of their chief developer? Consider for a moment that this may be a dick way making you leave. I'm totally serious about this.
Is your boss a tech person or just your boss ? (My boss was a Programmer)
I recently had to go through a similar change myself, but at my own discretion. Every application at my company was .NET-based and our public website was PHP based. As I wanted to move on to other things, I rewrote the upgraded the site using ASP.NET MVC. I was already familiar with the MVC pattern and frequently used frameworks like Kohana and CI. The change wasn't that painful, and if you are comfortable with OOP, C# is quite easy to learn and nice. The bigger hurdle is acquainting yourself with the .NET framework itself and other things like LINQ, EF, WCF, etc. and IIS if you have to deal with that. I used to hate (what is now called) ASP.NET webforms, but I really enjoy working with ASP.NET MVC and the Visual Studio IDE itself. Also, the major releases of ASP.NET MVC are much, much more frequent than PHP. MVC2 just came out 7 months ago; next month MVC3 is being released and it is a significant upgrade. I still enjoy PHP, but it is nice to work with a technology a big company throws bathtubs of money toward.
If his boss can tell the difference then there is a permissions problem.
Well, you _were_ on PHP which we've had running for years on a linux server without any downtime or reboots. Too bad your boss wants to move to Microsoft just as he wants to bring hosting in-house.