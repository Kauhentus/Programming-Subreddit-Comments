My current solution stores the files on S3, as /vendor/package/tag/. Handling the files after they are generated has proven to be harder than you'd think, though.
cache, cache, cache and more cache
I stopped reading as soon as I saw autoloading. More convenient that "a long list of needed includes at the beginning of each script"? Yes. "Performance improvement"? No, quite the opposite. I use autoloading, but at least I'm aware it is slow.
I read it as your physical performance is improving, because you don't have to maintain the includes and worry about a ton of needless includes.
Been playing around with it and like it so far... The problem is that I'm using a webserver on localhost... but I also need the option to "put/upload" and "get/download" files from an online server... I already set up the FTP connection, but if I set this as default, it would always upload to the online server when I save? I don't see a button anywhere to just upload 1 file via ftp to an online server.
Sorry but we really want someone to work next to us on this to build our business and give an employee great career prospects.
Awesome! I'll drop you a PM in a minute. Glad to see other people consider it a good idea (and are already working on it).
That was my general idea, yeah. I was also considering aliasing the vendor directory to a subdomain, so you could alternatively access: vendor.apidocs.domain/project/tag Which would give you a convenient URL for the root vendor, vendor.apidocs.domain, and see all their projects listed under a single page.
At a million users, no language is going to save you from yourself (e.g. bad architecture, bad database design, etc). At that kind of scale, the language and technology stack becomes less important. The important things are: how easily does your app scale horizontally to new servers, how well does your caching layer work, how easily can you handle downtime of some servers, etc. These are all solvable using any language, including PHP. Remember, PHP is a shared-nothing language, so all PHP threads are identical. If you need more PHP processing power, spin up more servers. If built correctly, PHP is actually quite adept at handling scale. Also, if you hit a million users, hopefully you'll have some money to burn hiring help to put out the fires.
I live in Livingston, presumably you know where this is, but if not it's about a 20 minute train ride away from waverly or haymarket. I actually look on gumtree for work, but there are several reasons I probably wouldn't want your job, no offense intended. #1 - Traveling in isn't that fun. The vast majority of the country is on your west, but most of the offices I've been to interview are on the east. That's fine if you live in the city, but Edinburgh is a real pain in the backside to get into with a car and even if you're willing to spend the time, parking can be an expensive joke. If you're walking distance from the train stations, you don't have that problem of course. #2 - You're offering below market rate for anyone other than a junior developer straight out of uni. I understand theres a lot of disrespect when it comes to being a PHP dev, apparently some companies see them as cheap and cheeful, but £25k isn't enough for a good / experienced developer. Jump on CWJobs and you'll see contractors with Symfony experience getting offered rates between £250 and £350 a day, occasionally going higher than that. I understand being a small new firm and wanting a full time employee, you're not going to match the day rate with contractors, but at a almost bare minimum you need to be paying £30 but £35k a year. You need to remember, someone actually up to standard in PHP will be able to train themselves in the likes of Java or .Net in a few months, so theres no incentive to work for what you're offering. This is not meant to be disrepectful, just a note that you either need to up your price or understand the chances of getting an experienced british national is slim and you're going to need to shop for kids, non-brits or folks who aren't good. Also, Edinburgh is one of the most expensive parts of the UK and the most expensive city in Scotland, so it's a particularly weird place to look for cheap employees. :p 
Glad to see this talked about more and more... I've been following the project for awhile and would love to use Codeception but I use Laravel 3 and (thus far) haven't been able to get it successfully up and running.
Obama had the finest people from Silicon Valley working on the fundraising platform. I've read an article a few months ago about this and they also talked about the figures of higher donation conversions after they reduced loading times. I can't find the article now... Just type "obama campaign tech team" into google and you will see a few interesting articles. And about Mozilla... I'm sure they do A/B testing. Everybody does A/B testing. If they want to change the placement of a button they serve the new one to 50% of the visitors and the old one to the other 50%. Then they observe. It's super easy to measure and applicable to all areas. And of course you have data to prove which decision is better. And data is better then the gut feeling of the designer.
I'm interested in this as well but I'm primarily curious because it's running a daemonized PHP process to handle the queue. This isn't really PHP's bread and butter and many PHP devs smarter than myself seem to speak out against using it for long running tasks. It's possible special care has been taken in the case of PHP-Resque. I do agree, it looks terribly easy to setup and begin using.
Thanks for your response. I realise that Edinburgh is not a cheap city to live in, or is it particularly easy to drive around for people commuting into the city. I use to commute on a daily basis to Fife and seeing some of the traffic going into Edinburgh was not a pretty sight! While I realise that £25k is not a lot to someone with a lot of experience, I think that it should be enough to attract someone who is reasonably fresh out of university or perhaps someone with a couple of years experience who is excited at the prospect of joining a small and fast growing company and what that has to offer. We are in a situation where we are a relatively new company and we can only offer what we can afford at this stage. We are not trying to be stingy, it is just the reality of it. As we grow as a business we will reward our staff appropriately. Thanks again for the honest response!
About question #9, this is from the [answers page](http://timoh6.github.io/WebAppSecQuiz/answers.html): &gt; Redirects and even completely closing the non-secure port will not help when client makes an initial (non-secure) HTTP request. If Strict-Transport-Security is in "effect", no non-secure HTTP requests will be made by the client (the browser automatically translates requests for port 80 to port 443, before the request hits the wire). That is why I put "by design" in the question (the client must support HSTS and it must be "in effect"). But by design, it is better than closing port 80. Thanks for the feedback!
The language doesn't matter. It's the code quality that matters. Use the language that your developers know best. 
That,I cannot answer. However, if you Google it or ask on the user forums you'll more than likely get an answer one way or the other as that doesn't sound like that unusual a situation to me. Of course, the answer might be "use an FTP program to upload when you need it", though :)
Just for the record, you know how agencies work, right? They get your job specs, post them up, and then spam the relevant uk job sites. Occasionally they may have access to people who aren't checking jobsites, but realstically if I'm not looking at jobsites, I'm happy in my role and will have little interest in talking to an agency unless they're talking about a lot more money (or maybe a really interesting project, which 99% of projects aren't). They'll then read all the CVs, match the buzzwords and then call the applicants asking them things like "do you have LAMP experience" despite the fact their CV says Linux, Apache, MySQL, PHP and filterning anyone who answers those questions as no, despite a lot of those candidates being decent (Ok, if they say no to LAMP they probably aren't, but if they say no to Symfony but have several other frameworks on their CV, they should be worth talking to). Point being, your paying potentially several thousand for something that probably your cheapest member of technical staff would do a much better job at, and while that staff won't like filtering through the trash, the good candidates will like the fact they can talk to you directly.
This looks nice :) May have to take a look at that for a next project.
I feel conflicted about the usefulness of Bolt in comparison to WP and Drupal. On the one side, it streamlines a lot of the issues with building Wordpress/Drupal themes. With Bolt you're doing almost all of the configuration and templating inside the browser. However, because you're writing a lot of code it's unlikely to appeal to a larger, non-coding demographic. (People who use CCK and Views in Drupal, and Advanced Custom Fields in WP) If you are making a site for a client, the UI for adding content is not as well-done from a UX perspective as WP/Drupal, so you're bound to use more time in educating your clients. The default theme is bad. [Here is an example](http://i.imgur.com/C93tSJH.png). Imho, it needs to be redone in Bootstrap or Foundation 4. I have built a couple of personal sites in Bolt and it has worked out well. I like Bolt, I really do, but I think it can never become a large CMS due to the points described above. Lastly, congratulations on shipping!
Thanks guys for all the replays! I am also curious about how long it would take for a professional to build a back-end like one in CCS. I know it depends on many variables, but I am a bit afraid to hire someone (I pretty much have been working alone most of the time) while not being unable to tell if they are doing a good job or just ripping me off. Personally I feel it that the best case scenario would be no more than 3 months but maybe I am just getting ahead of myself. Sorry if my questions are somewhat... naive? I wanted to have some bases covered before I jump into it.
I wondered why I hadn't heard of this header before during normal conversation with colleagues, had to look it up. It seems that no version of IE supports this header. So an interesting question and answer but also completely impractical and inadvisable for general implementation.
Maybe you're right about Mozilla doing an A/B testing but ... is it worth it doing an A/B test on speed of page download? If you can optimise it to be faster - more power to you, keep it that way, it surly wont HURT to have a faster webpage. Anyhow, as I said, the article in itself is a great read, its just those quotes that look ... odd and forced to me.
In terms of composer I would recommend restricted shared hosting users compile locally and then upload the resulting file structure. Unfortunately that doesn't help with database CLI scripts or cache cleanup scripts. Whether you chose to replicate all CLI scripts as web interfaces is up to you depending on your target audience.
&gt; 6 The session ID must be renewed after... || A client logs in || Any privilege level change Why? Explain the exploitation scenario, because I can only think of session fixation, which at login' time regenerates the session For **11.** also no explanation, or reference link; why is the answer Yes?. Also **13.** and **14.**, no explanation again.
&gt; With Bolt you're doing almost all of the configuration and templating inside the browser. Well, that's a preference. I usually edit all of the .yml and .twig files in a proper editor, and I use the browser-based editing only as a fallback. &gt; If you are making a site for a client, the UI for adding content is not as well-done from a UX perspective as WP/Drupal, so you're bound to use more time in educating your clients. So far, we've only heard from people (read: "our clients") that adding content in Bolt is pretty straightforward. If your contenttypes are defined in a sensible matter, people pick it up real quickly. For them, it quickly becomes evident what contenttype / record they need to add or edit to do what they want, and if the contenttype contains less unneeded fields, they'll know how to use it. A lot of people think WP is really easy to work with, but I know very few editors/clients who think Drupal is nice to work with. I'm not saying you're wrong, but I _am_ curious to know how you think we could improve the UI/UX. &gt; The default theme is bad. Here is an example[1] . Imho, it needs to be redone in Bootstrap or Foundation 4. It's actually foundation 3.something now. We'll have to get a new one, and additional ones as well. A 'marketplace' for themes and extensions is planned for version 1.2. &gt; I have built a couple of personal sites in Bolt and it has worked out well. I like Bolt, I really do, but I think it can never become a large CMS due to the points described above. I'm not really aspiring to create something as big as Drupal or WP, but I am quite confident that there's a niche somewhere between the functionality of those two, where Bolt will fit in really nicely. About your points: We know there's definite room for improvement. I started less than one year ago, and IMHO we're improving pretty quickly. Not only because of code we write ourselves, but also because of constructive feedback, and pull requests on our Git repository. That said: If you think you could make a better default template for example: We can always use the extra help, and contributions are very welcome. &gt; Lastly, congratulations on shipping! Thanks! 1.2 will be less extensive, and won't take as long. 
See the answers page: http://timoh6.github.io/WebAppSecQuiz/answers.html
It is true that the support for Strict-Transport-Security is not (yet, I suppose) as broad as it should be. But using it is no harm either (defense-in-depth).
I'm not quite sure I understand why one would divide the composer audience in groups based on their financial strength? My impression of Composer was that it was an attempt to have a default package management system available to everyone. But that wasn't really within the scope of my question. I don't wish to rule potential users out, just because my application is built upon composer packages. As already mentioned, one could bundle the application with the packages. It's just not as 'nifty'.
There isn't a built in modal function for arrays, but you could do something like: $values = array_count_values($array); $mode = array_search(max($values), $values); $values returns an array of values and the number of times they appear `array("val1" =&gt; 2, "val2" =&gt; 1, ...);` so you can just return the array key of the maximum of $values.
Sounds great, I'll take a look. How that hierarchical content support coming? Easily managing subpages of content is still a fairly big detail to me. :)
Its not really about financial backgound, its more about target audience. My target audience is developers who write code for a living. If your paid even $10/hr as a developer the money spent for you to figure out how to make a $5/month host work could have been spent much better using a proper host, freeing up the developer to actually develop things instead of fighting with a shared host. 
Thanks! Please do. :-)
Thanks! 
if you do a facebook game with a high number of concurrent users (lets say 10k &gt; and more) you need to know a lot about what you are doing, the language of your choice will be as good as any other. as for php, as long as you know how to handle memcache, message queues, COMET, you're fine, there where some also your webservers should be able to handle a high number of quick requests, usually apache is not the best choice for that, we use nginx in that case in essence its always knowing about the common bottlenecks, for concurrent gaming sessions, this is mostly database reads/write (Which can be buffered with nosql methods like memcache), for some kind of games you also can easily hit bandwith bottlenecks in your network operation center, this is much harder to work around, but rarely happens if you dont transmit whole maps, images etc.
There are plenty of non-php job queues which have php clients so you don't have to write server software in php while still being able to write the actual tasks in php. It's not so much that you don't care if a job finishes, it's that you don't care if a job finishes *right now*. There are any number of ways to handle a possible job failure but the goal is not to keep the user waiting in a locked browser while this happens. Additionally we don't want to tie up httpd processes so that requests from other browsers still have a chance to use them while the current job is happening. When I say a locked browser, I mean we don't want an open, hanging connection. You could still poll the job queue and display something to the user to let them know the job is happening, and collect a response from the job when it finishes.
Overall: Godo quiz. Good that you have the anwser page with comments. #10, #13 was new to me. &gt; Your web page includes advertising JavaScript from a third-party service. Is it safe to assume that problems like XSS, caused by this third-party JavaScript, is not technically possible on your web page? &gt; Yes, if you validate the JavaScript before you deploy it on your page If you valid the third-party JS code against a SHA512 checksum you can be sure that the JS code hasn't changed. So technically it's possible. &gt; You concatenate and hash two inputs, input1 and input2, with SHA-256 algorithm. Is it possible that the order of the inputs fed to the SHA-256 function may have a direct effect regarding security of the hashing? sha256(input1 . input2) vs. sha256(input2 . input1) Why would it be more/less secure to `sha256("ab")` than `sha256("ba")`? I don't get it. &gt; You use a 104-bit, cryptographically strong, random number as your password on a web site which stores passwords as plain MD5 hashes: md5(password). Is it safe to assume your password will be safe if the user database leaks? 104-bit random number = 13 random numbers? That is not strong enough. My computer can crack that in less then 30 minutes. 
Care to explain further?
Create an installer. Create a packaging script to zip the latest release and installer together as an archive. Provide archive as a download. That's the most customer friendly solution. You could try and download composer.phar in php and run it from the installer script using exec()s. But I don't think those hosts you're talking about are the kind that will support exec().
There are tons of ways to upload and download files from remote servers in PHPStorm. You can easily map the "upload this current file" to a key command. There's also great comparing and syncing of remote files.
Historically when you saw PHP running as a daemon you would run into iffy practices with regards to freeing RAM, resulting in a forever growing processes. If there are people working on this kind of stuff, it's entirely possible this advice is out of date, which is common theme with a language like PHP.
I did just that thank you.
You want to do application-only authentication rather than user-level authentication. Check out the codebird library [here](https://github.com/mynetx/codebird-php) and give that a shot. Section 1.1 in the readme shows how to do app-only oauth.
If facebook uses apache, why would it not be a good choice?
Checkout the book **[PHP Objects, Patterns and Practice](http://www.amazon.com/Objects-Patterns-Practice-Experts-Source/dp/143022925X) by Matt Zandstra**, it helped me dive right into OOP after years of procedural programming.
&gt; "Performance improvement"? No, quite the opposite. Depends on your server setup and the code implementation. Such a blanket statement is unwise. Let's assume for the sake of argument that it is indeed slower - it's going to make close to no performance hit because it's such a micro-optimisation, but will save hours of development and maintenance time which will make a difference. Hardware is cheap, developer time is not ;)
I think the majority of shared hosting just isn't setup to accommodate the type of thing you're trying to do but it's only a matter of time. There are already better (and even FREE) solutions for hosting. User (developer) education is probably the biggest hurdle. For what it's worth, you could setup your app as a public (or private) quick start on something like PagodaBox.com and have your users deploy it with 1-click from there. PB can handle composer and command line configuration and the like during deployment plus there is a free tier. I am a PagodaBox customer but I also use Amazon on the like, PB makes it super easy to setup this type of thing.
I use php-resque in conjunction with [Monit](http://mmonit.com/monit/documentation/), and it's been nothing but solid. In general, the worker process is stable as it does very little but poll, as it spawns a new process to work on the job, but monit gives you that extra assurance.
PhpBrowser is your choice :) Selenium and PHPBrowser modules should work great for any kind of web applications.
Start reading up on design patterns and looking through the source code to other projects. Also, try to use a different framework than CodeIgniter. You're right about it still being procedural stuff within an OO environment. To draw an analogy from databases, each table in a database represents a 'thing'. To find a well-normalized schema, you go through and start naming things, pulling concepts apart into their own tables. You do the same thing with OOP. Start naming things and pulling them out into their own classes. Since PHP-based sites tend to be broad and shallow, you don't see OOP coming into play as much as you would with, say, a desktop application. You're mostly writing glue code between a database and the UI. Still, you're dealing with nouns. Each of those tables in your database should have an associated class in your code. Find a good ORM to play around with to explore this and then start writing some true MVC code. And no, CodeIgniter's "models" aren't actually models, but something else. You'll find that your views are little more than HTML with some PHP tags embedded into them, your controllers are thin little bits of glue to shuttle information between the UI and your models, and your models start to pick up the bulk of your application logic.
Stop looking at OOP as being "PHP OOP and Other language OOP". OOP is just concepts, and they're not tied to any specific language. The very best books on OO style are generally not written specifically for PHP. An often referenced book is [Design Patterns: Elements of Reusable Object-Oriented Software](http://en.wikipedia.org/wiki/Design_Patterns) which is quite good.
Wordpress isn't really the best way to learn PHP. The thing you see in your code is probably an efect of "refactoring" - there must have been more code between while / endwhile at some point, and whoever removed it left the structure like that. 
Yes - it would work fine without closing and reopening the tags. Generally it's done this way for two reasons: 1. the developer might want to wrap the_content() with another div or something - and now he/she can do that rather easily. 2. makes the "view source" of the page more readable since the line breaks will be included. But there is no real performance reason to do this or not do this - really just a workflow/organizational pattern.
When PHP first came into existence, HTML ruled the web. It was a dark time, and people didn't fully grasp the power that PHP could bring to the table. So, they decided it would be good enough to mix and match PHP and HTML; the PHP would be interpreted server-side &amp; output snippets of HTML that were inserted in its place, before the entire HTML result was sent to the user's web browser. People took this and ran with it, and it resulted in some extremely ugly and unmaintainable code. Dark times, indeed. What you're seeing is a preference that evolved from these dark times. The [PHP "alternative syntax"](http://php.net/manual/en/control-structures.alternative-syntax.php) is intended for mix-and-match PHP+HTML templates, and it emphasizes a clear separation of HTML and PHP - the tags open and close on each line as if to say "this line is PHP" and "this line is HTML", theoretically making it easier to maintain files in the future. One helpful tool for working with this file format/coding style is a text editor that understands the difference between HTML and PHP; this way, it can provide a different background colour for each language, helping you to quickly identify which is which.
Having the tags on separate lines doesn't really make a difference. This particular example could be rewritten like this and have the same effect: &lt;div id="content"&gt; &lt;?php while ( have_posts() ) : the_post(); the_content(); endwhile; ?&gt; &lt;/div&gt;&lt;!-- #content --&gt;
That's kinda what I thought. Thanks.
&gt;What you're seeing is a preference that evolved from these dark times. The [1] PHP "alternative syntax" is intended for mix-and-match PHP+HTML templates, and it emphasizes a clear separation of HTML and PHP - the tags open and close on each line as if to say "this line is PHP" and "this line is HTML", theoretically making it easier to maintain files in the future. Ah, see that makes some sense. I just couldn't figure out why you would open and close the tags all the time for multiple lines. Seemed like it would be just as much of a pain to code as escaped HTML would be. But to use it basically as a flag I can understand. &gt;One helpful tool for working with this file format/coding style is a text editor that understands the difference between HTML and PHP; this way, it can provide a different background colour for each language, helping you to quickly identify which is which. Currently using UltraEdit, though I'm not sure if it will change background color of lines, it does color code the code. Thanks for the info!! :)
&gt;Wordpress isn't really the best way to learn PHP. Agreed. Luckily it isn't my first taste of it. I took a PHP class as part of an associates degree program (web development), and I spent a few months writing a few modules for a customized fork of PHP-Nuke for work. (A pretty strong deviation, but it kept a lot of the same file structure.) However, most of that didn't go so far as to use templating or mixing HTML and PHP in this particular way. (I was escaping HTML instead.) But given that very limited experience, I wasn't really understanding the style of WP. &gt;The thing you see in your code is probably an efect of "refactoring" - there must have been more code between while / endwhile at some point, and whoever removed it left the structure like that. Actually, as I continued along the tutorial, other things were put in between those lines of code (so, not so much removed as not added in yet). However, I have seen even finished themes by pro theme houses that use that particular style, so I was still curious and let my question stand. Thanks!
Both solid reasons that I didn't take into account. My limited experience with PHP involved mostly escaping my HTML (wrong, I now know), so I wasn't really understanding this style. Thanks for the help. :)
It seems to have the best reputation, and we're definitely ready to start using some more sophisticated tools. My supervisor was hoping to find something which included a wysiwyg for html. Currently I am hitting ctrl-s and then refreshing my browser to see changes in real time. Does PHPStorm have a wysiwyg html editor, or is there an add-on which includes one? 
WYSIWYG? Not to be an elitist prick, but you aren't ready for PHPStorm. Try MS Frontpage maybe. 
He did state that in his requirements, so you are just being an elitist prick. &gt;We would like a simple wysiwyg editor for html work.
FYI, jetbrains offers sales throughout the year (50% off last xmas, something over arbor day) and discounts when renewing your yearly license. If you don't pay to renew, all you miss out on is future updates.
No offense taken!! We do very light development here and don't consider ourselves software engineers, and yet we are trying to step up to provide some basic server side processing for some web forms that benefit some of our coworkers. Basically we really like the WYSIWYG aspects of Dreamweaver, which really my supervisor is the only person to use a lot. These help her to arrange form fields and she has grown accustomed to using it to format web pages. I do all of the php coding now using notepad++. We are looking for something simple that can handle A) the version control that dreamweaver offers (but apparently not well?) B) wysiwyg html editing c) nice coding environment for php (highlighting and color coding, debugging which we don't really have now, and anything that a couple of noobs like us might not even know we are missing. Our database structure is becoming more complex and our file structure on our web server is growing and growing, so we would really like to start using some version control- we've already stepped on each others' feet a couple of times. I detect that you are suggesting Frontpage ironically, but maybe we will look into it. EDIT: sorry, replied to the wrong post.
Is he confusing sessions and cookies? Why a 4096 byte limit on session data? Also, is there really a need to encrypt session data (if the session data storage area is already secured, e.g. not in /tmp on a shared host)?
Fair enough. I guess the division of labor we have coupled with our crippling lack of experience make it more difficult for me to even know what to ask. We would like to work in the same environment, looking at the same file structure on our web server with version control while I do lot's of php coding and some light html and css and she does a lot of front end stuff and form creation. I love coding in notepad++ and hate dreamweaver, she likes the wysiwyg aspects of dreamweaver and hates it's version control. We have extra money in our budget to blow and thought there might be some low hanging fruit we didn't know about that would make our lives easier. We are total noobs and I don't mind being told so.
Sublime text or even Komodo free or text mate on Mac have been nice. Even using something like net beans can be really nice even for small projects with code hints and stuff. 
Also you'll be better off in the long run not relying on wysiwyg for code editing. Browser refresh is not a big deal , you can even out in a meta refresh tag so it does it on intervals if you want. 
&gt;Does PHPStorm have a wysiwyg html editor, No, not to my knowledge. It's a coding editor. The problem with wysiwyg is 1) you only test the code in whatever embedded browser the editor has, but you really want to test your work against the browsers that people actually use. 2) the editor auto generates code which means your code depends on whatever the developers of the editor were thinking which may be outdated or just different from what you want. Essentilally the developers of the editor are not likely to be designers...
Sounds like you've got a case of the bad boss blues. Here's the problem: WYSIWYG editors produce shitty code that you don't want to have to maintain. It sounds like your boss needs to nut-up and learn html. PHPStorm is going to blow your fucking mind, and not necessarily in good ways. It offers tons of functionality and is a pretty complex piece of software. If notepad++ is a high school freshman, phpstorm is a nobel winning physicist teaching classes to maintain his tenure. You'll spend weeks just learning to use phpstorm, all for syntax highlighting. Some of the front-end guys I work with have been using Sublime Text. It's a lot more straight-forward, but still very powerful. I think it requires a plugin for version control though. It sounds like you guys are transitioning up to the big leagues. Feel free to PM me if you have any more questions about workflow. I've spent a lot of time researching and using different strategies. 
cause facebook knows WHERE to use apache ... if you look closeley you will see that actually facebook uses a lot of nginx, especially on all their php-hiphop backend servers, facebook is very open about their architecture, check https://github.com/facebook/hiphop-php/wiki/Using-nginx-as-front-server-to-HipHop 
Yikes! Don't go WYSIWYG. If you want to use an IDE with everything all there for you already PHPStorm is pretty good.
&gt; what classes, functions, and $this was in regards to OO PHP Classes are blueprints for creating objects ~~Functions~~ Methods do things with objects $this is the current object I've found the best way to learn is by deconstructing projects- PyroCMS would be a good reference for CI.
 &lt;div id="content"&gt; &lt;?php while (have_posts()) { the_post(); the_content(); } ?&gt; &lt;/div&gt;&lt;!-- #content --&gt; Although there's no functional difference using brackets it's more conventional and IDEs work better with them, often times auto-completing statements using brackets anyway. Though in the original example where the PHP is broken up into different blocks, then using 'endwhile' would tend to be more readable. Personal preference, but worth the post.
If you're not mapping the class name and namespace to a directory structure, then yes, it will be horribly slow If you're using a static class map, like the one composer generates, it'll be extremely fast, certainly faster than putting a ton of include_once calls in every file.
When you're creating a Wordpress theme, you're really just making HTML templates--the PHP is there to facilitate that. Doing the tags this way makes it much easier to read *as an HTML template*, especially when you add more HTML markup than what's seen here. Compare the following: &lt;?php foreach($items as $item): ?&gt; &lt;li&gt; &lt;a href="&lt;?php echo $item['link']; ?&gt;"&gt; &lt;?php echo $item['name']; ?&gt; &lt;/a&gt; &lt;/li&gt; &lt;?php endforeach; ?&gt; with &lt;?php foreach($items as $item) { echo "&lt;li&gt;&lt;a href=".$item['link']."&gt;".$item['name']."&lt;/a&gt;&lt;/li&gt;"; } ?&gt; The first looks much more at home in an HTML template. IMHO it's more readable and easier to edit.
Fuck you already fixed it, didn't realise when I posted. I deleted it cos I really need to learn to read. My reply didn't even make sense when I reread your post
First off, download and try sublime text 2, 'cus its free.
I think the best way is to find a tutorial to something done with OOP, but one that you already know how to do with procedural programming. I think this is the best way to learn OOP. They don't have to be massively big but something you can wrap your head around. This may sound crazy, but try to look for those tutorials, in which the author expects you to know something about OOP and doesn't think you know nothing about it. Object oriented programming is really easy, but I think when someone tries to explain you something simple in good detail and giving many examples then your mind starts to think that it is something complicated, 'or else why would anyone give so much detail for it'. Look for tutorials in which the author is like ' Ok so lets create our class' or 'lets make this variable private because we are not going to use it outside of this function, and just move on..' I'm just saying and may be its just me, but I think there is some truth in what I said. I hope you find this useful because really basic (or most important) OOP principles are not complicated at all. 
You may also want to look into Visual Studio 2012 (or maybe even 2010) - I know they have a PHP extension (sadly it's pay, but it's apparently excellent), and they have WYSIWYG capabilities (you might want to look into some reviews of that first though - I've never personally used it.
First PHP project was a news aggregator before RSS news was big. Was able to pull in relevant thumbnails etc. Specialized in football (soccer).
Does your name start with a J? Sounds very familiar to what a friend of mine did.
If it feels like you were doing procedural coding inside an OO framework, you probably were, but it's fantastic that you recognize this because many people never do.
Adam (my username is a big hint at who I am :) ) 
But they would have needed to make those changees before submitting it to an A/B testing group :D
sorry, 3 year old reports in this type of topic are antique! 
Here is the book that I liked for getting my head more around things (knew the basic concepts of OOP and such, and know PHP advanced, just never used OOP much with it) [PHP Master: Write Cutting Edge Code ](http://www.amazon.com/dp/0987090879)
I have coded in PHP for about 14 years now, so to say I was waste deep in procedural code is an understatement. To be honest I could just not grasp OOP. It wouldn't click. When it did, I instantly understood it. What got it to click? I can tell you it was no book or tutorial... He'll it wasn't PHP. I picked up Java, and immediately understood OOP and became a much better PHP coder overnight. For whatever reason the (more) strict environment of Java opened me to grasping OOP, while the ability of PHP to just kinda always work and allow anything to go really hindered my ability to pick up the ideas behind objects. 
phpinfo() should show the location of the found php.ini file used - being Windows the locations are a little rusty to me, it's probably where the PHP install/SAPI is, and possibly C:\WINDOWS will be checked too. Once you have that established/loaded - ensure the mysql.dll PHP module is being included/loaded in said php.ini. Finally, back to my dark days of Windows I remember that the libmysql.dll lib provided by Windows PHP builds needs to be found/loaded as well for the mysql.dll module - otherwise mysql support will silently fail on startup - it's spoken about briefly here - http://php.net/manual/en/mysql.installation.php. That could also be your issue.
+1 PHPStorm. Although for light sites notepad/netbeans/sublime would be fine. 
I love Bobby McFerrin! But that's not quite what I was discussing. The post talks about using rudimentary statistical analysis on existing melodies to create new melodies. By the way, if anyone is interested [I tossed some code up on GitHub](https://github.com/tboronczyk/MusicComposer).
I used Dreamweaver for about six years (code view only) then decided to check out other editors. I tried InType, Notepad2, Notepad++, Eclipse, Aptana, Geany, and Komodo Edit. Komodo blew them all out of the water, and I can no longer imagine life without it. I have converted my whole office to it as well; everyone loves it.
Yep, that led me in the right direction.. thanks! Turns out that the mysql dll was corrupted and I reloaded from php installer. You're a godsend
Oh, this is your work? Very well done! With or without the use of preexisting melodies, our ears tend to want to hear the next thing though. Rules of counterpoint, which have been practiced for the past 300 or so years, have sort of chiseled what our ideas of western music should be. I'm absolutely positive that you could create similar patterns without having to rely on other melodic material, but give instructions for things like neighbor tones and suspensions or what to do to resolve secondary dominants. 
It's called a fatal error because you didn't write `$i;` :D
&gt;Note: the order is stupid. This footnote is on all PHP functions.
The general feeling of "*I need to do X. Oh, there's already a function called `do_X()`*".
one from docblock is here http://apigen.juzna.cz/
Damn it, i've gotten used to the C++ syntax, so i keep forgetting those $$$$$$$$$$
I do know that agencies are all pretty dire, and if it was down to me we wouldn't be using them at all. I think the rationale amongst management though is that it saves us from having to wade through the hundreds of CVs that we'd otherwise receive.
bower, grunt and yo are awesome, try 'em out. node.js is just javascript for developing with. Stop treating it like a second-party language!
i'd prefer to be able to use composer or another php based software to manage front end assets also. BUT.. as soon as you go into LESS/SASS land .. you're already requiring some other software to manage your assets. The PHP implementations of those are not quite baked yet.
vim
Right, but using it and advertising/thinking this solved all problems *is* a problem.
Why not use Git?
It seems *right* to me, even if there are other tools out to do the same thing. In the Grails framework, there is a dependency management DSL for pulling in libraries and plugins, and almost everything is a plugin - jQuery and Twitter Bootstrap are packages as Grails plugins, for example. Having one tool/dsl instead of multiple makes more sense. (http://grails.org/plugins)
Nope, don't know you then, lol. I had a friend in middle school who did the exact same thing. We played an MMO called Outwar and he wanted to make his own. It failed miserably.
Have you tried Assetic? 
Why should they? xD The guide is written by Certified Magento Developer Plus who spent time and effort on it and now wants to get returns on his investments
It's a combined [bitwise-OR](http://www.php.net/manual/en/language.operators.bitwise.php) with [assignement](http://www.php.net/manual/en/language.operators.assignment.php). It's equivalent to: $this-&gt;_filterArgs[$fieldName]['flags'] = $this-&gt;_filterArgs[$fieldName]['flags'] | FILTER_FLAG_ALLOW_FRACTION; It basically turns on the FILTER_FLAG_ALLOW_FRACTION on the flags value.
This is a valid point, and especifically with API endpoints, it is the best thing to do to close port 80. But also, the HSTS is meant to solve a different problem (you won't be typing your API calls constantly, like you do while you are browsing the web with a browser). 
What's new in 3? I'm using Sublime Text 2.
I think it's because the answer could be an article in itself. 
ircmaxell was *not* banned here. His account was banned reddit-wide, automatically, and was not unbanned after contacting the admins.
I'll 2nd this book, my only concern is that it uses wrong PHP functions/names for things. This doesn't change that the book holds your hand through several patterns and explains it in ways that are easy to understand
Sure, I didn't mean here as in /r/php, I meant here as in reddit. Should have been more clear.
The advice of "just use a library" is counterproductive, in my opinion. Even if you're using libraries, the fact is you have to know what you're doing. You have to make an effort of understanding what algorithms are touching your data, why they work the way they work, and what they achieve. One cryptographic function is not the same as the next, and you have to know what's appropriate for each situation. You have to know the differences between hashing, block ciphers, and public key cryptography. You have to know the different considerations for checksums versus password encryption, what block cipher chaining mode is appropriate in your situation, how to model your key setup, etc. For password hashing, you need to know how many rounds are appropriate for your hardware and use case. And, of course, if you're doing work for the U.S. government, you aren't allowed to use bcrypt, so what do you use instead? (Hint: probably SHA2+PBKDF2, which the standard PHP password API doesn't support). The library doesn't make these decisions for you; you still have to know what you're doing. There's also the fact that there are a lot of terrible libraries out there. Just because something got popular doesn't necessarily mean it's good or that the creator is some cryptographic genius. Most cryptographic libraries out there were written by average or slightly-above-average programmers who happen to dabble in cryptography (you know, doing stuff themselves instead of just using a library). One would hope that high exposure and peer review would iron out any issues in these libraries, yet a quick look at some extremely popular website platforms reveals all kinds of poor, misunderstood, and outdated security practices. 
Along with what the other commenters have said, it's also called the "Confuse junior programmers to the point where you're better off writing it the long way to begin with" operator.
Still missing a ;!
http://dev.digitalnature.eu/php-ref/tests/
Laravel 4 just launched a few weeks ago. I don't think there's a full fledged CMS existing yet, I didn't find any and I searched. 
Right now, the best practice is to use composer for your PHP packages and bower for your front-end packages. Here are my opinionated suggestions: + Learn bower. It will make you a better programmer exposing you to other package eco-systems. + Don't run composer or bower on your production servers. Run them only on your local machines and use rsync (or a deploy script) to deploy. + Learn Yeoman (yo) and Grunt too. They are good at what they do. 
I agree. My attitude is usually this: "I'm going to try doing it by myself and expect to not use anything I'm doing except understand the fundamental of this type of task." Then I look for a library that seems to align with what I learned and use that in a conscientious way.
done $encrypted = implode('',array_reverse(str_split($password)));
You are not alone. :-)
I'm the author of the 300+ vote answer and I'm not banned here.
Why do you advise against composer on production servers?
You're killing me man!
If you mean deploying code changes to remote servers, try out deployhq or deploy.do Both are very handy. 
Thanks, will check those out! I need to set something up here...this current process is terrible.
I see what you did there. 
jQuery: https://github.com/jquery/jquery Bootstrap: https://github.com/twitter/bootstrap You can set them up as submodules inside your project. See [here](http://git-scm.com/book/) if you are new to submodules and/or Git itself. Personally I wouldn't use something like jQuery as a submodule though. It's hard to miss the various announcements that a new jQuery is out (reddit, Twitter, etc) and you should decide on a per-update basis whether you are able to update instantly or if you need to make any changes to your code.
Take that back! This is a joke free zone.
I know, I just felt like saying it. I am sending you a mental high five.
It's a shame that Composer leaves a whole bunch of local paths floating around. It's usually not a problem but I've experienced some odd deploy-time breakage when building the package on a Windows machine with the project 10+ directories deep.
WTF is this? I think you were looking for the `strrev` function ;)
Why was he banned from reddit? Shame, since he's one of the most helpful members of the PHP community.
You're right; maybe trollish wasn't the right word, since I'm sure he was being 100% serious. "Unhelpful and insulting" is more what I was aiming for. I'm just tired of the negativity, that's all.
Well, i use for my own projects and i introduced into my company "phing" for deployments into staging/production. By deployments i mean the whole stack, from checking syntax, building css from sass &amp; compressing js and the generated css to rsyncing the files and restarting the apc along a dozens of more tasks that compone our deployment process. Give it a try!!. It's written in php so you can easily extend it and add your own tasks (if you need it)
Also just a note, any [arithmetic operator](http://www.php.net/manual/en/language.operators.arithmetic.php), [bitwise operator](http://www.php.net/manual/en/language.operators.bitwise.php) and [string operators](http://www.php.net/manual/en/language.operators.string.php) can be combined with the [assignment operator](http://www.php.net/manual/en/language.operators.assignment.php) in the same way. So these are all the same $test = $test + 1; $test += 1; $test = $test . 'test'; $test .= 'test'; $test = $test &amp; 1; $test &amp;= 1;
original comment poster (OCP) doesn't know what he's doing - to beat NSA super computers you need to ROT13 THREE times! Doesn't anyone do their homework anymore?
Would you be available sometime for me to speak with about this? I'm interested to learn a bit more of your setup.
Well Sublime text 3 is still in beta, you can see the full list of new features here http://www.sublimetext.com/blog/articles/sublime-text-3-beta or watch this video by Jeffrey Way http://youtu.be/tCEcT8H2LAw.
The guy who runs /r/GamePhysics got autobanned recently too and claims to not know why. I get the feeling too much blind trust is placed in this automated system.
It seems every time I want to do something I get given a long list of "must know" technologies. I'm actually a little bit too time poor to sit and spend a whole lot of time learning new things that haven't really proven their need to me yet. I don't have time to just "try 'em out". I've looked into bower, it actually seems like what I should be doing, but yo offers me not a damn thing and I don't even understand what Grunt is supposed to do. So... no :)
Yeah, I'm a bit new to git, so your solution scares me a little. I think I'm going to go with Bower.
&gt; if you're doing work for the U.S. government, you aren't allowed to use bcrypt Citation needed. &gt; probably SHA2+PBKDF2, which the standard PHP password API doesn't support 5.5 adds [`hash_pbkdf2`](http://php.net/hash_pbkdf2) to complement the password API. Both it and the password API are thanks to ircmaxell, whose answer is in the linked SO post.
I've seen this course before I believe, and it seemed *extremely* shallow and used some very odd comparatives (Ex: I believe at one point the speaker compares an 'array' to a 'calendar with pockets', which although may make sense if you really think about it, it doesn't seem like a very concise comparison for someone who is possibly new to PHP or programming in general.) If you have no experience whatsoever, this might be worth considering.
For our deployment we use mainly Capifony and Capistrano. It gives great ways to do different things with app, like having shared configs, do rollback, running migrations, assets generations, etc. Capifony integration with Composer makes deployment even more pleasant. Before that we were using rsync tool for uploading code to production, but it was super simple and did not have any of the options that Capifony and Capistrano can offer. It might take you couple of days to figure everything out, but as soon you get the idea of what it does and how it works, you will be amazed by those tools :)
It's a design smell used in languages that lack topicalizers.
No,no,no. 2x 4x 6x... and so on are clearly more secure.
Not necessarily. For starters the CDN landscape is quite fragmented now with Google's CDN, Microsoft's and also code.jquery.com. There was a post recently that suggested only a tiny number of users have a particular jQuery version cached. Personally I serve mine locally because I add some common plugins into it as well.
It's nothing new or clever. It's ugly and bad.
Its not new or clever, it is however widely used in several frameworks.
Yeah, seems to be really hurting the JavaScript community. /s
It's like a human centipede that passes objects ass to mouth 
Honestly, if you're looking for "one of the good ones" you're better off practicing your networking skills. The chances of finding the combination of interesting+able to work (remote vs in-office)+what you're expecting in pay go up dramatically when you have friends that know of opportunities in their companies or in others. One of the best things you can do for your career is get into whatever developer communities are around you and start asking questions. Unfortunately, "job posts" in the major boards are 95% posted by bad recruiters that barely read your resume ("Needed Immediately: .NET Developer...") and are mostly in it for the quick win. There's very few that I've found out there that actually care about the people they're placing and that they'll be happy there.
Chaining allows me to continue to call methods on a given object. These simply use "return $this;" to keep the chain alive. In this example i load an object, set some data, and save. With chaining: $object-&gt;load(10) -&gt;setData('key', 'value') -&gt;save(); And without chaining: $object-&gt;load(10); $object-&gt;setData('key', 'value'); $object-&gt;save(); 
How so?
To clarify, this post was meant to educate, hence the link.
(The “/s” at the end of the post can be taken to denote sarcasm.)
Because you alter program functionality for syntax sugar. Ruby is notorious for syntax sugar, but it's really really bad style. A set or add method should return nothing OR the value you just altered, nothing else. And you can give him as many downvotes as you may like, but he's totally correct on that.
You want to eliminate as many dependencies as possible on your production server. What happens, for example, if packagist.org has an outage right in the middle of your deployment? That is just an inconvenience on your local development box. But it could be a serious problem if it happens on a production server. Of course this is just a best practice. If it is not practical for your current project, just move towards this setup on your next project.
I don't know, isn't the notion that *"A set or add method should return nothing OR the value you just altered, nothing else."* just as much an opinion as *"A set or add method should return the object instance for chaining"* would be? I see your point and don't really disagree with it either - I'm fairly neutral on the subject - but I'm still not convinced why it's objectively bad to chain methods. It's maintainable, fairly readable (maybe even more readable than many of the alternatives) and, as far as I know, isn't a bottleneck performance-wise. Where's the problem? I'm not going to downvote for an opinion, by the way.
Yup. Wrote that on my phone while laying in bed this morning.
&gt; "No offense, but there is another feature you might have heard ofy: it's called the Search Function." I really hate ass-hats like this.
How could I be so stupid!? The math checks out...you are right!
I hate that you're being downvoted because you're pretty right. 
Your client/s need not be concerned about what VCS you use. Their machines do not require any extra software. People are dumb. They mess up all the time. You guys copy/paste folders instead of using versioning. It has worked for you so far, that's fine. You'll eventually mess up though, because you're dumb. "cheeeeeeeeeeeeese" was working on this awesome new feature that he demoed to us, but he quit and in a fit of blind rage deleted the folder from his machine. Now no one has a copy. We should hire some guy in a hut to rebuild it from scratch. vs "cheeeeeeeeeeeeese" quit and deleted his repo and branches. That's ok though, because we're cool and use git and all of us have a local copy of his magnificent work. Let's hire some guy in a hut to finish it off. There's also the matter of working on the same file/s with several different people. I need to implement this super special button but that guy "cheeeeeeeeeeeeese" is *still* working on foo.php adding unicorns. So I'll just sit here twiddling my thumbs until he finishes his work. vs $ git pull origin $ git checkout -b awesome-button $ HACK HACK HACK $ git commit -am 'SUPER AWESOME BUTTON' $ git checkout master $ git merge awesome-button $ git push origin $ sudo make me a sandwich How about when "cheeeeeeeeeeeeese" implements an awesome new feature that has a terrible bug that isn't noticed until several... "revisions" later? Thing is, you don't know at what particular point the bug was introduced. What do you do? Copy/paste the folders to your web directory and test each one individually until you find the problem. Then you go and fix the problem in the current code. Now all your coworkers download the newest changes. But what about the folder "awesome-button" and "add-unicorns" folders? You'll have to manually add in the update to each feature folder (unless you're just working directly off of a single main folder???). Each of your coworkers will have to do the same. It's error prone, and it's dumb. vs Use git to go back through your commits until you stumble on what caused it. You can either revert that specific commit, or do the changes manually in master then commit it, and then a simple `$ git merge` will update the branch you switch to. If you call yourself anything other than a junior developer, a VCS is *required* for most non-shitty jobs. Some poor schlobs are still stuck a decade in the past using svn (me included, for now). Others are using git. A few are drunk and use hg. They all use something, though, and you don't.
That seems contradictory to functional programming techniques. I'd love to read up more on what led you to form this opinion, if you know of any public resources I could poke through.
Until that first 'oh shit' moment it saves you from, you cant really understand why you need. Just use it, you'll wonder why you waited so long
You will know the reason to use VCS - right AFTER problem.
I tend to agree. The only positive I've I can see about it is the reduced amount of chars in order to achieve something, which in my mind is not a good argument for using it when there are several serious downsides.
I finally just got Bamboo CI set up. So excited! 
It's used to very good effect in libraries like d3.js. Obviously it's not PHP, but it's a great example of where the default interface is a wreck. If you really want to see ugly, create an SVG tree diagram using namespace aware DOM methods.
You can look into Components. Many popular frontend resources are already ported to Composer and available via Packagist: https://packagist.org/packages/components/ Bootstrap and jQuery are there along with quite a few others. It is still a work in progress but so far it works pretty nicely. You can see the Composer Component Installer here: https://github.com/RobLoach/component-installer I'm using it to install packages for several static sites I manage. For a live example of it being used, you can see a few components (bootstrap, jquery, highlightjs, font-awesome) being installed here: https://github.com/stackphp/stackphp.com/blob/master/composer.json
You say that you "store local backups". This is already a rudimentary form of version control. You already know why you need VC; what you're considering is using a more robust tool for it. What do you do when you need to delete code? Have you ever deleted it and then ended up needing it again later, but had to rewrite it from scratch? Or are you afraid of that happening, so you comment it out instead of deleting it? A VCS will save you from both of those things. You can delete it now *and* get it back later. Have you ever come across a line of code and not known why it was there? With a VCS, you can look up which of your team members wrote it, and read the reason they gave for it at the time. I'll be honest: version control is a trade-off, not an unmitigated good. Writing commit messages and waiting for transactions to complete can slow you down. You will spend some non-trivial amount of time wrestling with bugs or unexpected behavior in whatever VCS you choose. What you'll gain in exchange is better/more complete history, documentation, and accountability. When a client says "we need you to restore that content that we took down four years ago and promised we would never need again" or "can you tell me what changes we made to this file on January 5th", you'll be able to say "no problem". Also: as jtreminio says, you won't have to install anything on your clients' servers. You won't commit changes to, or pull updates from, their servers. You'll commit and update from your own repository that's maintained at/by your agency. (The exact mechanics of this process will differ depending on whether you use a centralized tool [e.g. Subversion] or a decentralized one [e.g. git].) Then you'll upload the changed files to their servers, the same way you do now.
&gt;Citation needed. "Approved cryptographic techniques are required for all assertion protocols used at Level 2 and above." - NIST SP 800-63-1 (Electronic Authentication Guideline) "Approved" is defined in that document as "Federal Information Processing Standard (FIPS) approved or NIST recommended. An algorithm or technique that is either 1) specified in a FIPS or NIST Recommendation, or 2) adopted in a FIPS or NIST Recommendation." NIST/FIPS-approved algorithms include SHA2 and PBKDF2, but there is no NIST/FIPS publication approving the use of bcrypt for any purpose. &gt;5.5 adds hash_pbkdf2[1] to complement the password API. Both it and the password API are thanks to ircmaxell, whose answer is in the linked SO post. I'm well aware. I also know that ircmaxell likes bcrypt and has never liked SHA2/PBKDF2 for password storage. He's free to have his opinions, and maybe bcrypt is *technically* the slightly better option, but regulations are regulations. The fact is that PHP's standard password_hash and password_verify functions don't support anything I can use on projects for federal agencies or any other organizations that adhere to federal guidelines, so just "using a library" doesn't take care of all of my decisions. I still have to know something about cryptography and how to combine algorithms and package data myself. EDIT: Changed citation to a more relevant document.
Your response rocks, but we just build wordpress and magento sites. Hot fixes are rare, "phase 2" iterations happen every so often, but most sites get deployed and that's it. Insurance against quitting (unlikely in this group) is smart thinking, but we all use the same "local" source; a local webserver drive. So we all have the same local code. It requires communications during co-oping a build, but thats even more rare. The bug protection scenario is more or less just fix the code as it exists instead of reverting to last stable iteration. Noob question: I understand the pull + fix + merge + push, but how would that get the code onto the live web folder?
So every time i make a change to a site, ill have to upload the affected files separately? I use smartGIT which checks my local repo files for changes, and when im ready to commit, i type in a message and push. It would be really nice to have it commit local changes to our main repo and deploy the changed files to whatever server(s) i choose. 
You need to change the for loop to something like: foreach($cells as $cell) { echo $cell-&gt;plaintext . '&lt;br/&gt;'; $pre_edit .= $cell-&gt;plaintext . '&lt;br/&gt;'; }
you just git clone on your live server, the same way you would check out on dev. You should look up some git tutorials and just make a repo. Thats the best way to learn. How comfortable are you with command line? I have people in my office who are the same way about not trusting vcs and we have this same discussion. What i figured out is it basically comes down to getting out of their comfort zone and hesitancy of learning something new. And in webdev, if you feel like your in your comfort zone, that should be a signal to lear something new, or your gonna get left behind.
Im not hesitant, im eager. But i cant sell the other devs on something i dont have all the answers to. I dont have SSH access on all servers, maybe 1/2 of all servers. I could scp to the remote server but thats insane for just adding 1 line of CSS. From sublime text, i can just save/upload a single file or entire directory right to the remote server.
At my organization, committing and uploading are separate processes, yes. It would be convenient to have them combined, but I don't know of any way to do it (short of writing a script for it yourself). Besides, you might not always want to. Sometimes I'll commit in the middle of a job, or I'll commit because I'm finished working, but the changes can't go live yet because they're time-sensitive or the client needs to review them first. If you're using SmartGit already then it sounds like you're further along in your VC adoption than I thought.
I laughed, you can have an upvote
Every time the foreach loop iterates, it replaces the value of $pre_edit with a new one, so your check which lives outside the loop only looks at the last value. You could run the check within the loop like so, to check every value: $string_found = false; foreach($cells as $cell) { $pre_edit = $cell-&gt;plaintext . '&lt;br/&gt;'; echo $pre_edit; if (strpos($pre_edit, "Tennis") !== false) { $string_found = true; } } if ($string_found) { echo "string found!"; } else { echo "string not found"; } Another tip here is to perform strict checking (!== false as opposed to == true) on result of strpos, because sometimes it may return 0 for a found result. 0 == true evaluates as false, while 0 !== false evaluates as true.
Yeah as mentioned above. Here's the code header('Content-Type: text/html; charset=utf-8'); include 'simple_dom.php'; $html = file_get_html('http://www.wettpoint.com/results/soccer/uefa/uefa-cup-final.html'); $cells = $html-&gt;find('table[class=gen] tr'); $pre_edit = ''; foreach($cells as $cell) { $pre_edit .= $cell-&gt;plaintext . '&lt;br/&gt;'; } echo $pre_edit; if (strpos($pre_edit, "Tennis")) { echo "string found!"; } else { echo "string not found"; }
I use git for my own projects and for [beta] Magento extensions i build and share. The goal is to deploy a commit (or series of commits) to a staging/dev/live server to preview in a working environment. Lemme ask you this, i dont understand tagging. Say i have an existing project, i checkout the code onto my local machine, i make a tag "savepoint" and i make my changes and commit/push to the dev branch. Then later, when ive tested these changes, i merge all changes made with the "savepoint" tag can be merged to master? If this is true, i would later want to copy only those files from the master repo to the live server. That would be something i *need* to know how to do.
Thank you for the citation. I knew that bcrypt wasn't NIST-approved, but it didn't quite click for me that NIST was, well, the US freaking government and could set standards by which the government could operate.
I get the worst heartburn when i have to delete files that are now "depreciated", i dont trust my ftp client to not bug out and delete the wrong directory. VC would keep my acid down, no doubt. This thread is full of great talking points in favor of vc and thats exactly what i was looking for. That article was awesome btw. Shared it with the other senior dev.
This. I became so stressed when i was updating files to live for this reason. Now its like commit &gt; update, done. Eventually it should be Test&gt; commit &gt; update staging &gt; test &gt; update live &gt; test test test test test..... Baby steps
Thanks for the feedback!
The euphoric feeling is actually the poison from your CodeIgniter install affecting your brain. You'll soon be under your desk in fetal position, with uncontrollable convulsions which may cause you to loose your bowels unexpectedly. Doctor recommendation is to treat the affected areas with Laravel, Symfony or Silex, or some other much more modern framework.
I'm...I'm...oh.....ahhh..... CODING!!!
Yeah, and not because of any phony devs blessing, but because of my own intelligence.
More when I think about the possibilities that can be created using code, yes get that feeling occasionally.
Just wait till you discover Laravel :D
Check out http://ftploy.com if you don't have SSH access, this watches either a Bitbucket or Github repo, and after committing to a selected branch will deploy the changes via FTP to the specified directory.
No... just slightly depressed most of the time.
I think the Laravel prescription is still in clinical trials.. The overuse of facade ugliness and hiding OO behind procedural static interfaces still needs to be proven to not kill projects outright after large doses.
Nice! Thanks
So what do you keep in your git repo? Do you push your whole project to git (i.e. including the vendor directory)? Maybe my question is really: where/how do you build? Currently I use composer directly on my production server and build right there. Why do you consider that undesirable?
There is most likely an issue with the SQL syntax for MSSQL. Can you post the SQL?
No problem! Happy cakeday!
Just one *minor* point of clarification (seriously, most of what you wrote is fine and there, I just wanted to state why my opinion is what it is based on my interpretations): The NIST approval for PBKDF2 is very specific in that it indicates that it's approved for key derivation. There is no approval for the storage of the derived key (as would be the case in a password hash). Instead, the approval is specifically around the use-case of deriving a password (or similar low-entropy input) into a secret key (to be used for encryption, message authentication, etc). Now that's not to say that your point is non-existant. It's just that it isn't as strong as it seems on the surface. Mainly because there's NO recommendation around password storage from the NIST... With that said, the fact that PBKDF2 is approved for *something* would mean that there's certain weight added to that point... And to be clear, it's not that I "never liked SHA2/PBKDF2". It's that bcrypt is measurably stronger. It's harder to parallelize and the math that it uses makes it more resistent to some forms of attacks over SHA2/PBKDF2. If you're using PBKDF2, I'm not going to tell you "you're doing it wrong". But since bcrypt is measurably stronger, we should go with that. To be clear: the primary reason that hash_password() does not support *either* PBKDF2 or scrypt, is that there is no crypt(3) style format for it. I'm not going to invent a new format. But if the community and/or the maintainers of libcrypt decide to add support for a PBKDF2 derivation AND/OR a scrypt derivation, the very next release of PHP will have full support for it in crypt() and in password_hash(). But as of now, it's just not there... So while yes, "regulations are regulations", there are no regulations around the storage of passwords. They simply don't exist (and no, while key derivation is similar and can often be used in the same places, it's not the same). So in the absence of clear guidance, I'd personally error on the *technically* stronger option, even if it's *slightly* further from "regulation" (because neither is actually compliant)... Just my $0.02... (Oh, and I'm back!)
Typo? $global['dbnumber'] = sqlsrv_get_feild($global, 0);
There was an article floating around the other day that likened certain states of programming to cocaine use. Programming is a hell of a drug.
Sure, whenever I get a few hours to put my head phones on and actually code. And then its replaced by rage when some jack ass technical manager says something like "you'll need to scrap that and use *some specific pattern* because I just read about it in a blog post"
[sample code](http://pastebin.com/qtgwe8Fc)
Sure, just not coding PHP. 
i get it 
"HEY GUYS, DO YOU EVER FEEL GOOD ABOUT DOING SOMETHING YOU LIKE TO DO?" ....seriously? It's like the posts here get dumber by the second.
From NIST SP 800-118 (Guide to Enterprise Password Management), as one of the methods to store passwords for authentication: &gt;* Storing one-way cryptographic hashes for passwords instead of storing the passwords themselves. The use of such hashes allows the authentication system to verify during authentication attempts that the correct password has been entered without storing the actual password. &gt; &gt;[...] &gt; &gt;Federal agencies must protect passwords using FIPS-approved cryptographic algorithm implementations. We "must" use FIPS-approved cryptographic algorithms. From the [NIST policy page on hash algorithms](http://csrc.nist.gov/groups/ST/hash/policy.html), we shouldn't use SHA-1, we may use SHA-2, and we may also use SHA-3 once it becomes available. Those are our options for one-way hashing algorithms. Since PBKDF2 is also NIST-endorsed, we can also apply that on top of one of the endorsed hashing algorithms, although NIST doesn't have any specific recommendation for that use. But it's clear that bcrypt isn't an option for these applications, and we know that SHA-2 alone isn't strong enough for password hashes due to its susceptibility to brute forcing. Applying PBKDF2 to strengthen the hash at least appears to comply with the guidelines, even if it isn't specifically endorsed. bcrypt simply doesn't comply. Regarding the crypt format, you wouldn't have to invent your own. There are other projects that have made similar extensions, although it would be nice for the crypt project to formally adopt one. Here's an [example from the Python passlib](http://pythonhosted.org/passlib/lib/passlib.hash.pbkdf2_digest.html#passlib.hash.pbkdf2_sha256): $pbkdf2-sha256$6400$.6UI/S.nXIk8jcbdHx3Fhg$98jZicV16ODfEsEZeYPGHU3kbrUrvUEXOPimVSQDD44
Yeah, sure. But I think it's more of a thing when you're still learning a new language and it still seems exciting and new. I don't think I could get euphoric when dealing with something like PHP.
FWIW - [strpos](http://php.net/manual/en/function.strpos.php) never returns true.
Holy crap, has it been 4 years already!?
The interesting question: what are the performance implications? Because typing $object multiple times is not a major hardship.
&gt; Unless each of the chained methods throw different kinds of exceptions that need to handled very differently That doesn't seem like a very far-fetched possibility. In fact, i have a hard time imagining situations where it's *not* the case.
The typical problem where developers of php won't fix just to maintain backward compatibility.
hmm in a nutshell I currently am using Drupal 7 alot. I have a build.sh script I wrote. It keeps my custom modules and themes alongside a Drush Makefile, and a custom Drupal Install profile. Drush + the DrushMakefiles/Install profile build the whole website from scratch from a recipe list of libraries + version dependencies. My Dev git repository stores only the build code and build scripts. The site is built into a /dist directory. A snapshot of the /dist directory goes to a new git repo called "webapp-Releases" and stores the fully built project prior to push to a Staging server and then to a Production as a git Tagged released. Changes can come back downstream from the live production server as needed -- the Staging server is there for testing and debugging and QA. * my build process via Drush Make allows me to include sources from Git repos, drupal module releases, apply remote patches etc ... even include 3rd party non-drupal libraries via drush make (I use Swiftmailer and CkEditor for example).
In my in-house Symfony CMS, I've used [Gedmo Nested Tree](https://github.com/l3pp4rd/DoctrineExtensions/blob/master/doc/tree.md) with great success for managing any hiearchical content (pages, categories, etc). It's quite easy to add into a system with a bit of work.
 &gt; To be clear: the primary reason that hash_password() does not support either PBKDF2 or scrypt, is that there is no crypt(3) style format for it. That's exactly the issue I ran into when I wanted to implement PBKDF2 into my own library. I ended up using the same format used by the [Python PassLib](http://pythonhosted.org/passlib/lib/passlib.hash.pbkdf2_digest.html). It would be very nice to get a "blessed" crypt format for it, though. It doesn't make sense to build it into password_hash() until it does, if ever. I imagine 5.5's hash_pbkdf2() will get abused to create non-portable password hashes. &gt; Just my $0.02... (Oh, and I'm back!) Welcome back! 
Perhaps calling it "This is what method chaining is?" would have avoided some confusion and possible "witty" comments.
~~If you only compare with `==` it does, since type juggling any integer that is not `0` to boolean equals true.~~ ~~http://php.net/bool#language.types.boolean.casting~~ ~~http://php.net/manual/en/language.types.type-juggling.php~~ ~~http://php.net/manual/en/language.operators.comparison.php~~ --- ~~*Edit: And to add to that '== true' is actually redundant. These two if statements execute the same behavior:*~~ *Edit 2: Flussence is right*
Well, the first code example is more readable in my opinion. Not by a lot, but still, quicker to glance at and get the point. That, however, is an opinion and not something we should debate about. About the project changing: Yes, sometimes you have to change what a class or method does completely. Many times you are required to do major overhauls due to the customer's requirements, and you can't plan completely against that. That's true. **However:** I still don't see how a fluent class requires you to do more changes than a non-fluent one in such a case. Different changes, yes, and if you start counting changed characters, then yeah, the fluent one's changes may be a bit bigger. But isn't that also something IDEs are good at? To ease refactoring by a lot. This debate, however, basically boils down to being an opinion and/or a thing that should be decided per project with the team. I don't have any other major arguments for fluent classes than I've presented here, so I'll leave it at this.
I was thinking more of the example someone provided above: $obj-&gt;load(10) -&gt;set_val('fnurk', -3) -&gt;save(); A failure in each of these methods could have different implications and need to be handled in a different way. If anything, a DOM element builder is kind of an exception since it's basically just repeating minor variations on the same process.
Right, yeah, I can see the problem with that. Good point, thanks.
It's easy to forget.
Like I said strpos, the function, never, ever returns true. What you do with the return value is a whole different ballgame 
Need more information, what issues are you encountering when you try to view it in firefox? Edit: Also why did you decide to use Abyss Web Server over something more mainstream like XAMPP?
In terms of the Firefox it is just pulling up a blank screen when I direct it to the localhost. With Abyss, I picked up a book today "PHP &amp; MySQL in easy steps" and I'm following its directions. Anything else you need to know?
Try replacing your index.php in your document root with just a &lt;?php phpinfo(); ?&gt; to rule out any problems in your code. What do the logs for your web server say? Honestly, if you just want to quickly get started with PHP then you are going to be miles better off with XAMPP as it comes with everything setup for PHP+MySQL out of the box, no idea why that book would recommend you use some obscure web server.
I know it doesn't help with this particular problem, but I 100% agree that XAMPP is incredibly easier to install and work with. 
Screenpops for someone I do some contracting work for - existing in-house CRM system, just needed a small chunk of code to take input from the PBX, link it to phone =&gt; CRM account number, and call the CRM with that account number in the link. Took me an hour as a noob, the Russians who built the CRM would have charged for at least four at a much higher rate than what I make. 
Try using Querypath instead of simple html dom.
Sure, I like the idea. But please put some more effort in to describing the different links, because that's one of the reason I first take a look through your newsletter than just browsing around for all the articles. I like the way you've structured it, but again some more details on every link wouldn't hurt, i.e. "Dispatch: Dispatch is a minimal PHP framework." - Like I care? Why should I use it? Please tell something that makes it stand out of the market! Make the links more interesting. Out of all i.e. 20-30 links or whatever I find the interest to click on 4. That's a pretty good start. 
&gt; returning those instances to a variable Just a note FYI: // this one wrapped by memory_get_usage() = 3088 bytes : $mapper = function ($val) { return $val * 2; }; $mapped = [1, 2, 3, 4, 5, 6, 7]; $x = array_map($mapper, $mapped); // and this one = 1408 bytes : $x = array_map( function ($val) { return $val * 2; }, [1, 2, 3, 4, 5, 6, 7] ); So if there's a pretty big object returned, and it's only used to call that chained method - it *might* be better to leave it as is. 
Please, forget about micro optimizations.
I need a website built similar to twitter, except where people pay for membership. It's gunna be huge! Would you be interested in working on that? I can't pay you, but it'll look great on your resume!
Saw that the other day, can't wait :D What % is it at?
I would say about 80%... After the book releases, I will see what kind of feedback I get in terms of if anything is missing, etc. and add additional chapters as needed.
I make around $80kish and I am hired as a junior php developer.. Not located in america tho.
What I hate is that, he has a point (You could google that stuff) but he puts it like he's talking to someone who doesn't even deserve any respect whatsoever.
i didnt consider that!
Wow u are really ignorant. 
I'm in a similar situation. My company has an existing webapp written with a Java REST backend that serves Backbone.js for the front-end. While that has some advantages, I'm proposing a complete switch to Laravel, as I've had good results with Laravel in the past. A book on advanced usage would be very helpful.
Every damn book I've read, some piece of code is always broken. Test all your code after formatting and you'll have one of the best books.
Would be nice to see Table of contents.
That's the exact opposite of what 80% as a status means.
That would mean you have to prove it. It's the same reason that defense contracts require software be proven secure. The assumption is that it has bugs making it insecure, and for good reason.
The burden of proof (Latin: onus probandi) is the obligation resting on a party in a trial to produce the evidence that will shift the conclusion away from the default position to one's own position. Default position - code is buggy and insecure.
Consider having a look at http://saltstack.com/
Probably another couple of weeks.
So far: http://d.pr/i/69UG
I think it was meant as a joke. The first 90% of a software project is hard. The second 90% is even harder.
I read it more as, "he just said it's got 80% left, so it'll be out when that's completed," with a wink as a hint they should have read the other comment. Then again, subtlety in tone is completely lost on the internet, and I could have easily misunderstood the intent.
i like assembla.com or beanstalk, if you dont like paying for stuff developing own scripts centered around Rsync is perfect, there are a lot of tools like the mentioned capistrano, phing, etc
Do you think it's a conflict of interest to be in charge of the public documentation and then also have a pay book that clarifies the complex sections of the framework?
It would be really great if you spent a bit of time discussing your thought process, how, and why you got started. Especially, how you went about putting together version 1. It must have been quite challenging, what resources did you use, books, online etc. At any rate I love your framework, commend your work, and look forward to your upcoming book.
+1 for codebird
&gt; that all but forces people to buy the book. Uhh, no, they can just go and use any one of the other 20 PHP frameworks around, or heck, move onto another language. Ain't nobody forcing anything on anyone, here.
I'm 80% sure he used it as a joke since the joke above is well known amongst software communities.
PHP's image processing library is GD, look into it.
Yup, for this kind of job, [GD](http://php.net/manual/en/book.image.php) will be enough. I'm not so sure about the "PSD template" ... you will need to turn this into a normal images without the fillings.
You can customize larvel bundles to work like this. I too hate mvc being scattered around diff folders. We have our own framework that has the model/view/controller in the same folder. Plug and play style. 
Yep, GD and PNG for the template/image rendering are going to be your best bet.
Yeah, I'll probably end up converting/remaking it, that shouldn't be a big issue since it's relatively simple.
Checkout out [Voodoo](https://github.com/mardix/Voodoo) . It fills out all of your requirements. Just so you know, I created Voodoo, and I'm happy to see a need for modular framework. Also, the site VoodooPHP.org is down for the moment, I'm writing the documentation, it should be online by Monday. :) Feedback will highly be appreciated.
PHPixie doesn't impose any predefined directoey structure, so you could use it =)
symfony2
imagick is available as a PEAR extension. There is also a PECL extension which is a shade faster (supposedly). The imagick extension works with the imagemagick package which is much like any other package which is source code that is compiled for your system and bundled with an installation plan that minimizes installation complication by putting the files in particular places and setting many configurations to safe defaults for you. Alternatively, you may compile all this stuff yourself and make the necessary installation configurations. I put the steps I use to install the PECL imagick beta version for Debian Wheezy in a Github gist. https://gist.github.com/bradchesney79/4686426#file-initial-notes-L717
You are going to need to run bitcoind. And there are no bitcoind implementations written in PHP. So you will need to either run bitcoind (written in C++) or use a 3rd party bitcoin wallet service with an API. If you have bitcoind running, you can make calls to it using an XML-RPC protocol. See https://github.com/mikegogulski/bitcoin-php as an example project of how to make these calls. See https://en.bitcoin.it/wiki/PHP_developer_intro for a bit more information. 
Taylor has contributed so much to the PHP community by creating and maintaining Laravel. Supporting him by purchasing this book is a great thing and helps everyone.
I'm working on an MVC which has everything inside the VIEW folder. Inside VIEW you add each part of the site into it's respective folder ex. "pages" and in there you put your files as follow: _controller.php _model.php _form.php home.php contact.php You can work with it without a controller or model file, it will then just load the respective file for the page you are entering. /pages/home loads home.php for example. 
I use Coinbase.com for accepting BTC payments, it's really easy to get up and running. There are also a few others but their names escape me right now.
Yii has the ability to put it in the /extensions or /modules directory, it's actually pretty easy http://www.yiiframework.com/doc/guide/1.1/en/basics.module#creating-module
If it is written in C++... couldn't you wrap it as an PHP extension and then compile it in? At least in theory... and if you actually have that skill set.
Does anyone know if this works with a live stream from ffmpeg? 
Not to be a downer, but I tried php-qb last week to crop some images, and found it to be 3x slower than using plain ol' GD. It's very possible I wasn't using php-qb in the most efficient way possible, but the documentation is rather sparse at the moment.
Wanna go into that a bit more? If it's a daemon, you obviously can't wrap the primary code, but there should be libs in the src that should be wrappable. http://devzone.zend.com/1435/wrapping-c-classes-in-a-php-extension/
Kohana is indeed perfect for this kind of thing, with its cascading file system that mirrors directory structure at every level. You can define routes within the module's init.php file. 
It's not designed for that. I suppose it's possible. Not a scenario I've tested.
Great idea!
You should also look into [WideImage](http://wideimage.sourceforge.net/) - it's basically a well structured wrapper for the GD library and makes creating, saving and generating composites very easy. I used it recently to create a 'swatch' of fabrics of different widths based on how many images were to be included.
Should probably include a note that something like this is best combined with a work queue. 
Okay, I tested the extension reading from the live stream from ISS and was able to grab a picture. The only snag is that mms:// has to be changed to mmsh:// first. This appears to be an issue with FFmpeg. In theory, rtmp should work as well, but I was unable to find a working feed to test with after spending an hour googling. 
Read all twelve parts: http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1
There's significant overhead in converting pixels from int to float and back again. If you're doing nothing more than copy pixels, the overhead is not worth it.
Pretty poor attempt at self-promotion...If you want our attention, tell us what's great about your framework and the features it offers rather than bombarding everyone with numbers that prove nothing.
"I want to learn more, but I don't need to learn more, so how can I learn more?" The first thing to do is get out of that circular reasoning. There are umpteen books or tutorials on OOP or Clean Coding you could just spend your time absorbing, and many are recommended here every day in threads just like this. But I think my best tip for you is: forget trying to improve your current site, for now. This is obviously locking you in to the mindset that produced it, and you can't see beyond that. Learn by starting a completely new project, some toy project if you don't have a pressing need for something specific. Maybe write a console app or two in PHP - you can do this on any machine, don't even need a server, just call the php executable. Write a tool to organize your music collection, or make a console RSS reader. Forget the web for now. This discipline will also help you to separate presentation from other concerns. In the end, thinking about architecture in different layers and their boundaries is more important than just learning about how to use objects (that's actually the easy stuff, getting them to work together properly is the real challenge). As a completely separate project, create a web UI with just jQuery and html, and forget about PHP. Again, you don't need a server for this - just a browser and an editor and a refresh button. You can learn a great deal about presentation just playing like this. Then later, you can start putting the different projects together via ajax and an actual server. 
Theres some really easy frameworks out there. Codeigniter can be learned in like 15 minutes. When it comes to OOP don't think of objects as function holders or just wrappers for similar functions. They are actual objects. Instantiate one for each picture or whatever object corresponds to it. Have the methods manipulate that individual object - not passing an instance of the object to it.
If you want raw speed, don't use PHP.
Without knowing more I'd be hesitant to suggest that this extension would somehow solve your problem. In the end, FFmpeg is doing the encoding. The only special thing that AV does is that it automatically moves the metadata of a MP4 movie from the end of a file to the beginning. That's the trick that makes a video play on IE9. A lot of people apparently are unaware of this. 
I would recommend learning Symfony over CodeIgniter. Doctrine is worth learning. If your current site aint broke, don't fix it. Start a new project from the ground up with a new frame work to learn it. It doesn't even need to be anything special. Just *something*. Push your boundaries on what you know. Try out nodejs/socketio/jquery and get really good at javascript. I know this doesn't make sense if you're trying to become a PHP master, but you will see how other languages that don't have OOP work and I think it strengthens the point on how OOP is useful. The nice thing about OOP is you can build your application into layers or libraries. You work with MySQL a lot? You can use the exact same set of libraries on all of your projects. So you need to only write/master it once. Learning a MVC framework/design pattern helps give you structure also. Check out this guy's tutorials on youtube: http://www.youtube.com/user/thenewboston He goes over all sorts of stuff php/mysql/javascript/java/c/c++ you name it. Nice and easy tutorials that give you just enough to crew on and process at a time when you're learning. When you go through all of them, look for more...there is so much information out there, you just need to dig. I would also recommend learning Linux and server basics...it will really help you along the way. Setup virtualbox or vm workstation and you can spin up ubuntu vm's running a Lamp stack pretty fast. This will also open the whole world of tweaking apache/nginx to do stuff that PHP by itself can't, that makes for the whole 'web2.0' experience. 
Maybe you could check out Jenkins. It's pretty easy to set up on Amazon's EC2 (nginx) + there's a Github plugin available. You would be able to do things like set Jenkins to poll your Github repository and when a change is detected automatically create a build of your app, run tests, shell scripts and other custom tasks. You could then use Capistrano to auto-deploy the app under certain circumstances.
Doing the benchmarks on Windows 7 home on an i3 is not exactly the type of real world benchmarks people are looking for 
Eh, I don't have the energy to get into a flame war but "it's fast" isn't a good enough reason for anyone to switch. If I was that fussy about speed, I wouldn't be using PHP. As for the numbers, benchmarking on a desktop PC running Windows 7 isn't reliable at all. Try some real world benchmarking.
A little story about code igniter here: About a month and a half ago, I completed my first simple mail for using php. It was really exciting to learn something new. As of today, I'm in my 4th week of learning code igniter, and I'm considered the "go to guy" for php at my work. edit: which is silly because there's so much still to learn...but I just feel smarter because I can help other who are learning.
Learn to to write your code according to Object Oriented Programming OOP.
You mention design patterns, so I want to throw this link out there: http://en.wikipedia.org/wiki/Software_design_pattern Also related: http://en.wikipedia.org/wiki/Anti-pattern#Software_engineering It wasn't until I started reading about software design patterns that I began to realize that I had been using some of them in my coding all along. They're quite useful to know, especially if you have a whole bunch of components that you want to write, and aren't sure how to best organize the class hierarchy. 
if you want to built apps which have a high amount of concurrent users, CACHE a lot (maybe everything) i cache a) every record from database in memcache, and usually query only ids b) every loaded record in a static scriptcache, so its not loaded twice from either db or memcache c) html fragments of often used components (i.e. latest 10 posts etc) d) often used queries, especially if involves pagination which i try to prevent e) built your site to support CDN, i.e. from the beginning load your assets (images, js, css) from a subdomain like assets.yourdomain.com, it make it A LOT easier to switch to a CDN once you hit bandwith bottlenecks, often CDNs are far cheaper than investing into more servers to cope with traffic caching is the bread &amp; butter of high performance sites.
Firstly, it's not a MVC framework as there is no 'real' concept of a View or a Model in it. call it for what it is: a router with additional features. Now, obviously it will outperform other frmeworks, because it hs only 1 purpose( routing) and has about 200 lines of code. It doesn't provide even a DI container that's really useful. Class naming is hideous, WTF does the class 'IModelXfer' do? How do I even pronounce it? Now the whole idea of how MVC should work is also kinda broken here, for example the method applyModelToView should never exist ina an MVC architecture.
Every once in a while I've slightly considered switching to Sublime simply for this feature. I love it because it gives me a much better "feeling" about where all my code is in each file, and it's easy to jump straight to a certain section with a single mouse click rather than dragging the scroll bar. Works really well, only issue I have is that it ignores your color scheme and uses a white background. Using your colors is on the feature requests list there on Github, but looks like there hasn't been any updates in 2 years. This plugin is not specific to PhpStorm, it also works in the other "Idea" IDEs too.
Yeah fair enough. I've had a bit of a play with Sublime, I really like how and quickly you can do everything. So I should probably give it another look for smaller stuff that I currently use Notepad++ for. But for my larger projects, I use a lot of full-fledged IDE features.
Nothing wrong with preferring an IDE, but there's so much more to sublime than a silly preview pane.
Any plugins to get sublime-like multi-line editing support? I saw a bug report and they are adding it but I really miss that feature.
if there is any whitespace after the closing tag then yes it can cause the infamous white screen of death in certain cases. Nowadays almost everybody leaves the closing tag off except in php templates
Thanks for your answer! But I guess this doesn't really apply to CLI scripts? (It's an [IRC](http://en.wikipedia.org/wiki/Internet_Relay_Chat) bot) I will keep it in mind for the next php website I will work on though :)
I'm not super familiar with sublime but middle click+drag gives me multi editing in phpstorm. Does sublime do something different?
To be honest, I don't know if the newline char thing would affect CLI scripts - logical deduction would say that it wouldn't. I would omit them anyway as they add no function :p
See what others have said about GD, as that's all valid. What I'd probably do (depending a bit on how much you need to change), is look at the image in Photoshop, and make a note of the coordinates of the rectangles you need to fill with custom information. Then you can simply use the GD calls to write in text, or copy in parts of other images into these destination rectangles. Not sure if that will help you or not, but there's my 2¢
http://php.net/manual/en/migration53.incompatible.php
If I were to remove everything which adds no function my code would just be 1 line, no tab indent, no descriptive var/function names. Just code which works perfectly but gives headaches.. 
You might know this one already, but jetbrains supports zen coding too. Try typing some of these and pressing 'tab' after html:5 -will layout an html5 document li*5&gt;p -will create 5 &lt;li&gt; elements with &lt;p&gt; tags inside See http://docs.emmet.io/abbreviations/syntax/ for more
It doesn't even have to be a real problem - just something that you can solve. Force yourself to write it OOP if that's really something you want to learn. Personally, I did that not long ago. My "problem" was something that could solve a sudoku. I worked on it off and on for probably a couple years (mostly off rather than on; when I'd start feeling stagnant, I'd give it another go). My first few tries were mostly functional, then it kinda clicked how it would work better OOP - make the puzzle part of the object, if I needed to guess at the answer to a square just clone the object and proceed until the puzzle was either solved or unsolvable. Once I got the solving part squared away, I made it pull puzzles from an online sudoku site and solve them. I still need to go back and put in a web frontend. If sudoku doesn't blow your skirt up, maybe try some other sort of game. A poker-playing bot. Blackjack card counter. RPG random character creator. Crossword generator.
Kind of agree. 
I prefer holding ctrl+alt then dragging. Same thing. 
There is also https://bitpay.com/
First of all, great job on Laravel 4, and good luck on the book :) Even though the ToC answers that question, I'd like to ask it to you anyway : What kind of developers are you targeting, with that book ? *Edit: You should cross-post that to /r/Laravel*
You can avoid the conversion overhead by declaring the image to be uint8[][][4] or uint32[][]. QB will then treat the pixels as four 8-bit integer or a single 32-bit integer. It's not as convenient as using floats, but if the code only involves moving pixels around, 32-bit pixels make better sense than 128-bit ones. Please submit a ticket about the problem you ran into. This is on Linux or OSX?
Could someone post a picture of what it looks like when you use this or describe what it actually does? I don't want to go through the hassle of installing it if I don't actually want it.
Just a side note: You don't have to specify ?&gt; at the end of each .php file. It's kind of "good practice" referring to many coding guidelines.
X is a member of the Something() object which X itself is also an object with its own set of members and methods. Y() is a method inside the X object 
Look up method chaining.
[Here's a screenshot.](http://plugins.jetbrains.com/oldimg/screenshots/Code_Outline_413.png) I didn't make it. Was just happy when I found it, and thought others might want it. Yeah pity in hasn't been updated for so long. Would be much easier to see with my dark theme. Hopefully another Java coder comes along to contribute, especially seeing it works in IntelliJ etc as well.
I feel like I should pay you for the opportunity to work on an idea so awesome.
&gt; Just a side note: You don't have to specify ?&gt; at the end of each .php file. It's kind of "good practice" referring to many coding guidelines. [Its not only good practice.](http://stackoverflow.com/questions/4410704/why-would-one-omit-the-close-tag) &gt; I've noticed you're using braces around else when you only have one line of code in there, you can just go else dosomething(); without the braces to save lines. Don't do that. This will lead to errors if you believe it or not. Also it is against the [PSR-2 Standard](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md#51-if-elseif-else) &gt; Don't make functions like getInstance, it slows the process down in isn't needed. Just allow direct access to the $_instance variable. Why would you do that, allowing access to a private variable breaks a principle rule of OOP [Encapsulation](http://en.wikipedia.org/wiki/Encapsulation_%28object-oriented_programming%29) &gt; You should be using a custom regex and a strlen check for validate email, FILTER_VALIDATE_EMAIL returns some false positives. Validating email is hard because there are so many valid formats like: name+tag@google.com. I tend to follow [this advice](http://davidcel.is/blog/2012/09/06/stop-validating-email-addresses-with-regex/) &gt;You shouldn't be making functions for things like outputSuccess, there is just no need for it. Why is there no need for it? It he wants to log to a file instead he only needs to change this function later. General advice: Put .DS_STORE in the [global gitignore](https://help.github.com/articles/ignoring-files#global-gitignore) 
Its fast, and that's great. But it hasn't solved a problem that that needs to be solved. Developers cost money; hardware is cheap. Its easier to add another server behind the load balancer ( unless you're Facebook or something equally monolithic ) then to lose productivity using a reduced feature-set framework for development. Frameworks exist for several reasons, and one of which is productivity. If its fast but doesn't include all the extras that make doing the job easier and faster then its not a tool I'll consider. If I do have a product that's at a point where speed is an overwhelming consideration, I'm not terribly likely to be working with PHP.
 class Something { public $x = null; // store object here public function __construct() { $this-&gt;x = new SomethingElse(); } } class SomethingElse() { public function y() { echo "foobar"; } } $example = new Something(); echo $example-&gt;x-&gt;y(); Resultant output: "foobar" class Something { private $x = null; // store object here public function __construct() { $this-&gt;x = new SomethingElse(); } public function z() { return $this-&gt;x; } } class SomethingElse() { public function y() { echo "foobar"; } } $example = new Something(); echo $example-&gt;z()-&gt;y(); Resultant output: "foobar"
Just a small thing I noticed: Your configuration for the database is in services/modules/base/base.class.php. I think it would be cleaner if you centralized such configuration in another file.
Nothing will beat joining an existing project and trying to contribute, start small first - file bugs, find easy looking bugs to fix, contribute back as a pull request/patch. In addition, there are non-programming things to do that will make you a better programmer: 1) Present at your local PHP user group or web dev group. Having to teach/explain something will also help you learn it better. 2) Attend conferences/camps/hackathons. Especially hackathons, you can quickly bounce ideas and solutions off of other participants 3) Blog/write about the solutions you find. Similar to #1, but you'll also build up a store of solutions that you will inevitably find yourself using again.
On point 2, "save lines"? What?
Logic errors, if you ever extend the else statement to be more than one line.
Coder errors.
makes it harder for readability, which could lead to errors down the road.
Sadly, the first item isn't a method it is a property of the class. So method chaining isn't what is going on here. However method chaining is a good subject to understand, but perhaps a bit too complex for the OP based on the question that was asked. Counter-point: He could have just typoed it, and really did mean method chaining. Up votes all around!
&gt;if nobody reads your code why does it matter if you write it to the standard? this is never the case. 
Sure, in Python there aren't curly bracers at all. However, indents are a vastly more important thing in that language, which they aren't in PHP. When people use different text editors, whitespace/indents can appear different and confusing. Readability becomes quite important in such circumstances.
Because people are human and forget shit like that. It's basically the sole reason it's recommended against.
It's been recommended against ever since C came out man, it's an issue to all C-style languages. Nothing unique to PSR-2.
I noticed in the services/modules/rating/rating.class.php class inside of the ratingAdd() method, you use a docblock for leaving a comment inside of the method, which isn't good practice. Docblock comments (/** ... */) are different to multi-line comments (/* .. */). Notice the docblock's opening tag starts with 2 asterisks. The docblock serves the purpose of documenting your code and should be used to document files, classes, methods and properties. Docblocks are used by documentation generators and coding IDE's to display the documentation for your code. The instance where you used it, it would have been better to use a regular comment rather than a docblock.
Try to get a *temporary* password from them. If they still send you their real password then I guess they don't really care much...?
Occasionally? I'm probably stating the obvious, or the already-thought-of, but here goes: Does it really need to have an automated solution? Would it be easier and more secure to ask for ftp server info in email, then ask them to text you the password? 
And trying to find that one character of white space that's screwing everything up? Hours and hours of your life you'll never get back. Do yourself a favour and setup a code sniff for it!
At the start, no it doesn't need to be automated. But I'd really like to have something that's scalable.
Call it temporary or real, I still need the actual password that delivers access to the resources. I have no problem if the client changes the password before sharing with me - that'd be even better from a security standpoint. I'd like to do some education on passwords, show them Keepass etc. I still need to get the passwords from them though :)
&gt; Know a guy who insists on reformatting any code to 'proper' indentention before he starts adding/modifying the code I do that. Sublime is pretty good at converting indentation to / from tabs / spaces.
It's only a conflict of interest if he's the only one able to provide documentation. It's pretty common to see authors of popular open source projects create books, training guides, etc to monetize them.
Yeah, like I said, it's a contrived example. The example I chose to use does, unfortunately, contain some flaws like you've pointed out. With a little more thought I probably could have come up with a better one. My only goal was to illustrate how the point of OOP is passing around little self-contained objects with a defined _interface_ so that other people will be able to make use of. (In reality, of course, you yourself are also making use of the interface on the classes you create. But I chose to use the multi-person team as an example because I feel it illustrates the usefulness of the paradigm even more effectively.)
“The distance between insanity and genius is measured only by success.” -- Bruce Feirstein
Your question leaves a lot to the imagination :P Posts like that come across as lazy, folks don't take kindly to those who don't help themselves. Only paying customers, bosses and grandma gets to ask questions like that. However... The path of your quest lies down the road yonder, the sign says "Runescape API". The great Wizard Google may be able to help you on your quest. Now make haste, brave warrior! 
I use phone calls for communicating most passwords. Simple, quick, and you can test it while on the phone to make sure it works. 
If nobody ever reads your code you should not give other people advise on how to write good code!
In my experience, it saves many headaches when extending and debugging the code, to leave all block braces it. I count it as very necessary if it helps make the code more reliable and easier to maintain. 
Just get into a good practice, and you won't piss other developers off when you touch their code. Stop making excuses for laziness. 
If you are talking about bad practices you follow, solely because nobody looks at your code, then why are you even getting involved in this discussion about good practices in collaborative programming? 
What were you expecting array_unique to do?
Hilarious. Do you write code for a living? Did you ever stop to think that maybe these 'randoms' might be far more talented programmers than you or me or anyone else in this reddit thread? I mean [look at the list of voting members](http://www.php-fig.org/) of the group who wrote the PSR - those are some of the most respected, well written PHP applications and frameworks in the world.
There is loads of programming jobs in Sweden. But most of them doesn't pay that good if you're a junior. It is nice, but got hired internally kind of. So I worked my way up. :)
I haven't got masses of time here, but one thing I noticed right away - in your base class you're using public member variables - you should almost never set member variables to public. What you want to do is set them to private, or to protected if you need access to them in subclasses. This is due to one of the many advantages of encapsulation or data hiding - you basically want to expose as little as you possibly can about your objects to the outside world. Also, you're just sticking loads of random stuff in there - this will get messy and unorganised very fast. Instead of putting loads of random stuff into your classes, you should focus on just having a smaller number of very focused classes. So your validateEmail method doesn't belong there at all - that should be in its own class. Zend framework actually has a validation type which then has a bunch of sub types for validating emails and such, for example. See here: http://framework.zend.com/manual/1.12/en/zend.validate.set.html Notice how they have different classes for each type of validation? You'll also find they have an interface for validation which contains the method "isValid()". The reason for this is because it means all validation classes can be validated by calling "isValid". This type of organisation is what makes polymorphism possible - this is the idea that I can have say an array of validation objects, perhaps containing an email validator, say a credit card validator and so on, and I can do a loop calling isValid() on each item in the array... Basically what I'm saying is try to really focus the intent of your objects and classes, don't just stick everything into one big base class, because that will get ugly fast.
Not a PHP thing, but you can avoid submitting .DS_Store files with a [global git ignore](https://help.github.com/articles/ignoring-files).
Consider the difficulty of saying a password vs getting a client to use PGP encrypted email. 
I would say that let them store password in some program like passwordsafe.sourceforge.net and send the database with the temporary "safe combination" for you. The safe comination can be told over phone. Seems like easiest solution with added bonus of introducing them to Password Safe. 
So they are going to concatenate a bunch of files into one file or am I missing something?
use Erlang
Implying those are the only two options.
I don't offer solutions for things I have no experience with. I have experience with trying to offer passwords over the phone, and it's usually frustrating for both parties and I don't ever really feel comfortable with it. 
No, you don't need to go. You just need a great portfolio, willingness to work, and a good attitude. 
Thanks for the reply, To be honest, it's quite a relief with the university fees being as high as they are here in the UK at the moment.
No, not at all.. Just be open minded, prepared to hammer out repetative code and have willing to realise everything you thought was right wasn't. I dont mean that in a bad way at all... (I am self taught, the first six months in this job felt like learning everything I thought I understood again, but in a different way).x
I understand. I went to a university and got a degree that I am not even going to use, and now I am in debt because of it. You can learn enough to become employable by using reddit, google, and other online information sources. Find out what you need to know, and then put in hard work until it becomes intuitive. It seems portfolios are steadily becoming the more important asset, specially in the computer science field.
I have not been following it. Thanks. And i hear symfony is hard 
i think learning about cache is a important way to improve your php skills, i.e. maybe he has never workes with memcache then now he has a reason to start :) 
Oh right, well if this subreddit has taught me anything it's that there is always a better way to do something than the way I have done it. Thanks for the reply, it's good to know that you yourself made it with being self taught :)
Hey Mike, I'm 19 in the UK and was in a very similar position to you at your age. I know you're not asking so I assume you're going to college, and I would just like to say that is a good idea. At 16 I got a job working in a DIY store part time where I worked for 2 years while going through college, this helped me save some money and gave me good experience of dealing with customers/clients and all the things that go with jobs! In my spare time I developed different things, using different technologies so that when the time came I would have a decent portfolio along with experience. After doing some freelance stuff at 18, I ended up stumbling across an interview with a big marketing company which happened to be based in my local town. The interview went well after they could see I knew what I was talking about and was confident for a fairly young person. Previously they had only hired graduates there, however since joining I have updated old workflows/procedures, came up with creative campaign ideas and even managed small projects. I think they are happy, but me also to have that flexibility. To get back to the question at hand, never over-estimate yourself and continue to strive to get better, this only has positive benefits. The piece of paper mainly just gets your foot through the door, if you think you can do that without and prove your ability/experience, which graduates may not have, then sure you can! Hope this long ramble helps in some way.
Absolutely - the error tells you where the problem is.
No, not always, it depends on where/how the file is being used. In my case a dev had "?&gt; " in a config file...
Ah right, at the moment I haven't go much in the portfolio side however I suppose I maintain a couple of small e-commerce sites for my part time job but they aren't much to brag about. Thanks a lot for your help, I am trying to learn more everyday and I don't plan on stopping any time soon!
There is always a better way.. Doesn't mean it is the way you should do it though. I think that is part of learning... I have been doing this for four years now and... Well... I'm still learning things... And its the thing that still keeps it fresh and fun. 
This is exactly what I was looking for in a reply, I just hope I am as lucky to stumble over a job like you did, but then again from all the job posts I have read on the web the demand for programmers is out there. Honestly I think that is my mind made up, I mean trust me I don't think I am any good at all at the moment in comparison to every other person, but I do really want to become that good and I am going to keep learning and progressing as much as I can. Thanks again for the reply :)
Eh, you live and learn. Although this is a classic case where the manual would save you a lot of hair-pulling. One of the few undisputed advantages to PHP is its incredibly detailed manual.
I think that is why I enjoy it so much, there is always another way of doing something you may not of thought of and it motivates me to go out and find those other ways!
Here's a few passwords *like* ones I'd use (these are not *actual* passwords I use) &gt; xR4Afa;v6-D&amp;%0% c &gt; &gt; qm!D=?#XM-KF(1E5g &gt; &gt; }9NK,i&lt;&amp;yO+[C&gt;LS} I really wouldn't like to be getting these over the phone. Even something as simple as this could be a nightmare: &gt; mNyibpb
I like this one - I could actually create a safe combination and ask them to use that. (One of the reasons this is a difficult problem is because I can't set any of these passwords - these are passwords to 3rd party services)
That is a warning. Warnings are often silenced in PHP, this would give you a WSOD.
I don't mind doing public key crypto at all, I think it's the right way to go. For me, it does need to be one of the following solutions: 1. An off the shelf, plug and play script, or 1. a custom script from a good developer, but which fits the budget for this project, or 1. something very easy for me to code without introducing potential vulnerabilities at every step. 
That's good! Yeah I was very lucky, but keep your ears and eyes open and there may be many opportunities which turn into something bigger. The web isn't getting any smaller so there will always be something out there. At my job they've actually offered to pay for my degree which will benefit both of us in the long run, and I guess if you show enough willingness to learn this is something many would do. It's good that you don't think you're good, I never have and probably never will think I am, and it just means I'll continue to strive to improve. We sound very similar! Feel free to message me if you want to chat further, or if you ever need advice or someone to listen. 
Thanks a lot, and I might just take you up on that offer :)
I'd just spell out the characters one at a time using their Unicode names. &gt; CODEPOINT ZERO THREE ALPHA NINE GREEK CAPITAL LETTER OMEGA WITH COMBINING DIARESIS CODEPOINT ZERO THREE ZERO EIGHT COMBINING DIAERESIS CODEPOINT ZERO THREE TWO BRAVO COMBINING CATFACE BELOW CODEPOINT TWO FIVE DELTA FIVE WANING GIBBOUS PIZZA [...]
Laravel is getting some good publicity lately and it fits your needs perfectly. It's quite beautiful, go ahead, try it.
I'd recommend Laravel. It's rightfully got many excited and easily meets the things you're looking for. Any search will show you people giving it praise.
i'm a high school dropout and senior developer. i also have no debt.
People seem to be recommending Laravel everywhere. I was looking into the docs already and wow, it looks like this is exactly what I need. Thank u!
&gt;Leaving those closing ?&gt; tags off... will protect you from sending accidental output and causing a difficult to find error. I learned this the hard way... While working on my Drupal theme I couldn't get a region to render content- all variables were sent properly, no errors thrown, region was visible in blocks, but it just wouldn't render! Searching for help was no help -*"Just clear your cache"*-thx, not the problem... ... solved by simply removing the closing "?&gt;" from the .tpl files. 
Ah of course, I didn't think of that. Cheers :)
Sounds like you're living the dream to me :)
* i prefer to separate the controllers from the models and *autoload* the module classes * configuration file(s) should be autoloaded as well, and maybe use an alternate format. * as previously mentioned, dont end files with "?&gt;" (to avoid passing whitespace before headers are sent) * the module classes seem redundant without an abstract class -- i look for abstract classes to tell me more about what is expected from the module in order to extend it
&gt; methods and technology that is five or more years behind the current trends ಠ_ಠ I think you misunderstand the theory behind most CS and Engineering degrees.
[F3](http://fatfreeframework.com/home) 
I fucking wish I did, but I've tried to hire these graduates. From a lot of schools they come out with some dabbling in Java or C# and a whole bunch of book sense on algorithms and architectural design and not one iota of practical application. The common thread of the few that actually understood programming as a discipline was that they did it as a hobby that coincided with their school interests, with the vast majority of their skills acquired outside of their studies. As for obsolete methodologies, I'm still shuddering over the "computer science" grads I've interviewed who told be their primary language was . . .Visual Basic. *For Windows 95.* *In 2013*.
If you're getting a white screen warning and it takes you hours to turn errors back on, you're doing something wrong.
I'm 20, did my A Levels two years ago. I didn't go to uni but am doing an Open Uni degree for the hell of it. I'm employed as a PHP developer by a financial firm. I also have several certifications behind me, but I have something which many others coming out of uni don't: experience Experience is what counts. You can learn all you want at uni but it is useless unless you can apply it to your work, in a way that is meaningful. Everyone at my work are graduates however I am noted for my agility, pace of work and general high quality and efficient coding. I've taken on part roles included with project management and I work in a very agile environment, practising Scrum (some will hate this). What differentiated me from others at interview was that I didn't go to uni but was apparently obviously as capable as someone who had. Show the enthusiasm you have about solving problems and it can be rewarding. They liked that I wasn't a kitchen sink of sorts but a specialist in a field that was very pertinent. 
It depends if you want to become a PHP developer or a real developer. The things Uni teaches you are the fundamentals. Stuff you won't learn on the job. How file systems and databases are designed. The advantages of different sort algorithms. How different ecryption systems work. Pre-Labour it would be a no-brainer... go to Uni. Now Uni is a massive rip-off. The staggering debt students leave with is frightening. However what is the alternative? You don't want to end up a code monkey in an increasingly commoditised profession competing with $5/hour Indian labour. You have two options. The first is you become a salesman. People want somebody they can trust. Get a couple of freelance designers, leverage popular frameworks such as Wordpress or Laravel, and be the glue that pulls it all together. It's intensively competitive but if you concentrate on a niche or physical locale you can make it work. Just being moderately competent puts you ahead of 90% of the freelancers out there. The second is to teach yourself whilst employed as a php programmer. Honestly this is unlikely to work. Some of the concepts are hard to grasp without a good teacher. Another idea: leave and go to a more civilised country. Nearly everywhere else Uni is free, and now we are all EU you can just enroll anywhere you want. You will have to learn a foreign language though, which will take several months (so no summer holidays). Best of luck, Phillip.
I agree with you 100%. The problem with CS degrees is that the tech knowledge they promise to graduates can't keep pace with the exponential growth of the field. It can take years and lots of red tape to get new classes approved and by the time the curriculum gets the "thumbs up", the class isn't even relevant anymore. That's why a lot of students leave uni with a ton of knowledge about algorithms [not a lot of change in that field] but no practical experience. &gt;The common thread of the few that actually understood programming as a discipline was that they did it as a hobby that coincided with their school interests, with the vast majority of their skills acquired outside of their studies. This is what makes great programmers. The degree may help get an individual's foot in the door, but the passion to study and learn outside of the classroom makes all the difference.
Short answer no. Long answer yes. It comes down to "can you prove you can do what you say you can do?" A degree is just a way to show you have dedication and can see something trough to the end. But after a few years I was never asked for my degree, they just want to see that I have the skills needed for the job
Of course this is true. I'm not arguing that. It's just the reason that people don't see that specific error. I've also seen PHP devs struggle with that exact issue before. It's just best practice to leave the closing ?&gt; off. 
[Swiftlet](https://github.com/ElbertF/Swiftlet) Edit: No ORM, but super easy to integrate
I guess packing it into a Phar file archive? Not sure either...
I wasn't disagreeing with your statement, just that if you think college will give people practical application, you are going to have a bad time. College is about jumping through hoops, you get your knowledge from your internships and among other things from getting involved with professors/faculty/clubs. It is a sad truth, but a truth none the less. eg: &gt; few that actually understood programming as a discipline was that they did it as a hobby that coincided with their school interests
I did my final project using Laravel and i loved it, it has a great community and a very good support. My opinion is kind of unbalanced tough, cos is the only php framework I used. For my project I used this kit https://github.com/andrew13/Laravel-4-Bootstrap-Starter-Site it may be bit outdated now, but the packet it has, specially Confide, Entrust and Bassets. really make your work easier.
Instead of this: public function validEmail($emailAddress) { if (filter_var($emailAddress, FILTER_VALIDATE_EMAIL)) { return true; } else { return false; } } Do this: public function validEmail($emailAddress) { return filter_var($emailAddress, FILTER_VALIDATE_EMAIL); } Just a quick KISS/DRY tip.
I run a php-based company and I'm far more interested in your portfolio than in your uni results. That being said, the uni students tend to have better portfolios simply because they've had the opportunity to work with lecturers, get feedback, etc and have been forced to sit with other budding developers and have their preciousness knocked out of them. They've done nothing but study for years surrounded by their peers, experimenting and creating in an environment that actively demands you do it to a schedule. I'd suggest that anybody weighing up uni vs freestyling it take that into consideration.
Short answer: No. Long answer: It wouldn't hurt.
Just adding a recommendation for Laravel.
This isn't wrong, but it's slightly inaccurate. Sometimes those "obsolete" skills can be far more prudent and applicable than the up-and-coming hot-shit technologies. Other times, they can be a hindrance (**HELLO, WATERFALL, I AM TALKING TO YOU.**) But higher education teaches you other skills that generally can't become obsolete: Mathematics. Physics. Communication skills. Deadline management. Business theory. Statistical analysis. And most importantly for some - **how** to learn. If you do end up attending, look into a co-operative education option. They can help you gain valuable on-the-job experience that looks good on your resume/CV.
Not but it will only help. Unless the tuition costs a prohibitive :/
Master of music here. However, I do php and JavaScript pretty much all day. It's awesome! As long as you try to make what you do better and have a fire in you to keep learning, you'll be fine. 
I went to university and got a degree in 20th Century International Political History. Today I'm the senior PHP developer at my company with 5 coders reporting to me. Now, I did luck into a previous job in the halcyon days of the Internet (97-03) where I had a boss who encouraged me to learn and expand my knowledge. As I learned more the projects he gave me increased in scope and complexity. My advice, if you want to become a professional PHP developer, learn to code with OOP constructs. Knowing a framework is good, but I`d suggest brewing your own as a way to practice and develop. That way, whatever framework you end up using later won`t seem like black magic.
I'm actually building a system to do this as a startup. If you're interested I can add you to the beta, but it may not suit what you want because it's a hosted SaaS solution, not something you have of your own. 
Go to Uni. Really, just go. Speaking from the work force it is obvious the difference between those that can program php and those that were educated in comp sci. So even if all you want to do is program PHP websites you will be better off, but you are 16, so you will probably progress way the hell past php code monkey by the time you graduate. Think software engineer, or systems architect or something. Think of the guys at facebook that are building php to c compilers so the php monkeys don't have to do anything hard. Good luck with whatever you choose though.
You don't need university to be a PHP developer, but you will likely still be happy in ten years that you attended university. There's a lot of stuff you learn at uni that doesn't translate directly to your career, but will make you a more educated, more informed person in general. Maybe you'll find out that you're actually interested in art history or something. You can get a degree in that and still have a career as a PHP dev. Maybe you can even start a career as a PHP dev WHILE you get a degree in art history. Maybe your interest in art history (or whatever) along with your PHP skills will lead you to start a novel company that will change the world. Or possibly you'll study business and start a path towards one day being the CTO of someone else's company. You might come to a place, later in life, where you want to do more than just hack at WordPress themes and with a university education a transition might be easier. And since as I understand it in England it costs you nothing to go to uni but time, it seems like an easy choice. Workaday sucks (even for a job as cool as a software developer), why cheat yourself out of delaying it for a few more years? 
I have been developing with PHP since 12 years old and I finished my first year of university back in April. I'm going to say it right here: get a degree. You say uni is expensive? I landed a summer development internship that pays enough to cover all of my living expenses and university expenses for 12 months. If I do this every summer, I leave university with some money in my pocket. You think uni will put you behind the pack when you graduate / that not as many jobs will be available? Unless you are a superstar, most big companies won't hire without a degree. You think you're a competent programmer? There is so much you will learn in university that you would never learn at a job. So many things that will make you a better, more efficient, more effective programmer. University will give you some of the best experiences of your life -- especially if you take the opportunity to live in dorms. You will have an amazing amount of fun, learn a bunch and, most of all, open up an entire new world of networks and connections that will only help you get ahead later in life. This is coming from somebody who is only 25% done -- I can't wait to see what the next three years have in store for me.
Although self taught myself back in the '90s I tend to agree with Ulter. I freelance exclusively and most of the projects I'm involved with on a collaborative basis have a high proportion of graduates attached. If your incredibly talented or you have loads of experience you don't need the degree to fall back on - if your in the other 90% I would say it really helps. The other thing to remember is you only have to start paying your student loan off once you start work and if you meet the salary threshold. In my mind its still worth it even if its only to teach you that its not what you want to do in life. 
Can you give me links to websites you have done in the past to decide if what you're charging is worth it or not.
$210 per hour in Norway. Down to $160 abroad. 
I couldn't understand about how you will judge our development skills by viewing the site. For example we have developed complex e-learning systems with lot of complex features for these two clients/sites. http://gorlet.com/ http://freenursetutor.com/ Note that we focus on web development using php, not on web design. It is very difficult to understand the development skills just by viewing these sites . For example, we had implemented complex ip/library/user based login systems for gorlet. And, you can view our own site at http://thequotes.net/ . Still you can't see the admin side screens. And, you can see one of our own products at http://qualitypointtech.net/timesheetdemo/index.php 
Are you able to get clients continuously for this price? 
oh. Great. If possible share your tips/suggestions for getting such projects.
You do everything thro' online?, or any direct client visit required?. I am just thinking whether it is possible from here (India) also, or it is applicable for Norway only? And, I would like to know whether you have any other skills (e.g knowledge in some language other than English) apart from php knowledge for getting those projects?
We were charging this until recently. Now about £75/hour.
Willingness to pay increases when you're working on core products for your customers. In most cases, a corporate website is not a core product, it's just another marketing tool. Working on SaaS products or other software which your client is selling to their customers is the key to making a steady profit. It is basically the last place a client skimp on the resources.
&gt; The second is to teach yourself whilst employed as a php programmer. Honestly this is unlikely to work. Some of the concepts are hard to grasp without a good teacher. As someone who has taken this path and is 6 years in the game, I totally agree with you, take another route!
ok. Thanks for the details. You may refer my [linkedin profile](http://www.linkedin.com/in/qualitypoint) if you or your friends are planning to outsource any excessive software testing or php dev work. Personally I am having good experience in software testing , and I worked in big projects of HP, BNY and citigroup before starting my web dev startup.
I'm a freelancer in the UK, and charge £25 to £35/hr for PHP work, mostly small startup e-commerce websites and small-to-medium-sized web apps like CRMs and survey tools. I am very busy at this rate and have minimal overheads. Agencies I work for charge me out at around £45 - £60/hr. I also charge between £40 and £50/hr for Flash/Actionscript work. But that is less frequently required, as would be expected. I've no idea what the agencies I work for charge out for my Flash work. One agency I freelance for, with whom I have closest contact, I know that when they outsource development work to India and China, they look to pay around £15/hr. But that is a very small sample, I don't know what the commonly expected rate is. Your rate $8 is just over £5. This does seem very low still, with all this and the other comments in mind. 
I am taking financial risk. First, I quit the high-paying job from citigroup for starting my company. And, We develop our own products and portals also. 
It seems you are having some wrong perception about Indian programmers. You should note that corporates like HP, IBM, Oracle, Citigroup and Microsoft are able to find thousands of good programmers in India every year without any issue.
US freelancer here, usually $45-$70 depending on the relationship I develop with the customer. Determining how much to charge the client comes down to how the client handles aspects of the project like giving me feedback or additional information when requested, as well as their general attitude. TL;DR: If you're a dick/lazy I'm going to charge you more.
Minimum wage depends on the state. In Arizona, minimum wage is $7.80. I know because I just got my first job (not really, sorta, first normal job) working at Safeway, and that's how much I'm paid per hour.
Trying to find a bug in a PHP application where everything is formatted like this. I'm about 2 minutes away from starting to bang my head against the wall. Is there a reason for this, or is it just a weird habit from the previous dev? 
Agreed - if the person in question is a good programmer you can overlook a lot. However, they won't seem like very good programmer if requirements are often misunderstood, or if a dialog about problems/requirements/etc with them is very difficult to have.
I'll be perfectly honest, I'd never outsource work overseas for the simple fact that it's scuttling my own country's economy. It's like standing on a raft and selling the wood piece by piece.
Here is a point of view of an Indian developer, I think most of the guys offshoring their product developments are fools. Don't get agitated. I consult for a UK based agency time to time. I have a full time job but I still consult. The director of agency found me on Reddit when I was defending a certain framework. He verified my credentials before giving me work. Very few do this. They simply want "Facebook clone" for peanuts. Pay peanuts and you get monkeys to work for you. I have lost projects where another Indian bid for 5US$ when the amount of work was not less than 100US$. Good, cheap and fast, choose only two. I am not defending Indian programmers. I recently did a cleaning job for one of Indian colleague. Have done similar cleaning job for my American and English counterparts. It's easy to find a developer but its not easy to find a good developer. Then on top of it, most of the people offshoring their work do not pay for QA or don't even know the importance of QA. A developer, regardless of what kind of methodology he/she follows, is never a good QA.
It's important to think about what the actual value of the money you make is. I mean obviously, if you earn $1 a day, but a Ferrari costs $0.10, then you're making a fortune. So it would be good for you to get some numbers from others working in the same sort of area as yourself as it'll mean more to you (or just work it out against the exchange rate as a rough guide I guess, but that doesn't account for living expenses/inflation etc.) I work full time anyway, and then do little bits aside from that which means I don't need to charge quite so much to get by as it's extra. Plus, most of the jobs I do are local, smaller jobs because I can't actively advertise myself due to being in full time employment. That said, I used to charge around £20 per hour, though I would often prefer to price for the job as opposed to sending an invoice at the end. It helped me to avoid scope creep, and it meant I had a clear estimate of what I was going to make from a job. I have been known to undercharge for my work in years gone by, which is something I've since changed and believe me, I haven't looked back for it and you're much more respected by potential clients because they see you as being more trustworthy. I mean, if I did offer to sell you a Ferrari for $0.10 you'd be a little suspicious, right? (bad example, because for that price you'd be more than willing to find out!)
Fair point. I'm not judging people who do, I'm just stating my own preference, recalled from personal experience; a customer once asked me why I didn't take on jobs in the UK, outsource them abroad and pocket the price difference as a project manager. I told him, apart from the reasons above, it'd be farming out the job I enjoy and am good at for a hellish nightmare of guaranteeing the work of a company that I didn't know, whose code I didn't necessarily follow. Spend the time coding PHP, deciphering someone else's? No contest.
I charge anywhere from $75 to $150 an hour. Not surprisingly, most of my major projects are refactoring failed development efforts from teams in India. Last year I recreated an entire ecommerce system from a team of developers overseas that was completely broken, to the point that the company CEO sued them to recoup his investment. "Insourcing" is the business model that keeps me going. 
$175/hr or $1200/day in the US.
http://gorlet.com/ - uses tables for layouts. You are committing a sin! http://freenursetutor.com/ - Its a Joomla! theme, nothing special. http://thequotes.net/ - Please check your website in Firefox, it fails. And I prescribe eye bleach to anyone who has visited the website. http://qualitypointtech.net/timesheetdemo - uses tables for layouts!!! Your JS code is not good. Why not use a toolkit? And then you say &gt; It is very difficult to understand the development skills just by viewing these sites . For example, we had implemented complex ip/library/user based login systems for gorlet. I doubt your claims. And I am an Indian.
I am drooling!!! How do I make you send some work^(&amp; money) to me? 
You could live comfortably charging around $80 as a freelancer in Norway. Our rate is not a freelance rate however, we're a company with ~20 employees with a track record no-one can match in the market we're in.
Have $180 as a starting point. If the customer disagrees with your budget, it is better to give them a discount if you're comfortable with a lower rate.
Not only that but they can charge $50/gr and not $8. That is just ridiculous and hurts everyone. 
https://github.com/fabpot/PHP-CS-Fixer
PHPStorm has a terrific code formatter tool, if I can't read something - php/html/xml etc, I just paste it in the editor and voila.
Raise your rates. You are doing yourself and other developers in your country a huge disservice. 
What the hell is wrong with you US developers charging $30-50 an hour? Do you enjoy being broke? Christ there is no reason to ever charge under $80. Sincerely, Someone who was stupid and charged $50 and now charges $125 with no problem. 
As I mentioned previously, we do development using PHP. Most of the clients (including gorlet and nursetutor) provided their own screen design. Regarding thequotes.net, can you give more details about the issues in firefox so that we can fix them? 
Yeah. I'm totally not questioning your rate; when I was fresh out of university, I had visions of undercutting the greedy agencies with their pointless middle management. Now if anything I think client management don't get *enough* money. Anything that keeps a buffer between me and the end client and has the authority to say "no" or "I'll check with the developer" is completely earning their salary.
Its great but Ctrl + Alt + L locks my system, sigh.
$100/hr
I am an NY based developer with 10 years of experience. I charge $20/hr. it is really upsetting, I don't know how to find clients that will pay more and since I charge so little I am not in a position to turn down the work. 
I'd probably add an additional flag to the database table (or simply check the format of the password itself) to discern whether the password has been updated to the new hashing scheme. If they haven't, I'd update the record with a newly generated hash using the new hashing scheme upon the next login. I'd then keep this system for X number of months, and once that period is coming to an end, I'd send an email to the ones which haven't signed in. If they still haven't signed in once the period comes to an end, I'd delete those accounts as they're not really in use anymore. 
Looks like Lisp or something similar to it :-)
When it comes to code, it shouldn't be formatted in this manner. When it comes to template files, however, you should, as it becomes easier to match the open and closing brackets.
I am finding hard to find the clients who are willing to pay $8/hr. You may inform [me](http://www.linkedin.com/in/qualitypoint) to get clients who are willing to pay around $8/hr
Your argument is fallacious in nature: https://en.wikipedia.org/wiki/Argument_from_authority
Thanks for confirming my first thoughts.
Hi. I'm 28 now, living in South-East England and I had the same concern as you just before I finished my A-Levels. I didn't have enough experience or confidence before Uni to go it alone, so I did my degree. Do I regret it? I'm probably 50/50 on that! Do you absolutely have to have a degree? No. Does it make life easier? Possibly. It's definitely easier to get a junior role with a degree, but for any decent company you still need to prove you have the knowledge they need before you begin. There are of course plenty of places that will interview you without a degree as long as you can either demonstrate good skills or a portfolio in your CV. For this, you need a website or a github (or similar) account and some half decent code. What you absolutely have to do is make those 3-4 years count where you're working and your peers are getting their degrees. You need to be moving out of a junior role, if possible, when those peers are just getting their junior roles out of Uni. If you think you can do that, then you're good. This will depend on where you live, who you know, how easily you can learn by yourself and how confident you are. Good luck!
Ok. But how to get high-paying projects/clients. Let [me](https://twitter.com/rajamanickam_a) know if you know any such clients. 
So you're saying I shouldn't put every possible page on the same page and hide/show using CSS?
It doesn't work for me. CTRL+ALT+L does literally nothing at all. Everything remains as it was. I've checked the settings, it is set to that shortcut. I've reset to defaults, but it just doesn't work. So much for that trail run... I went straight back to Netbeans.
Or, you know, you could use the menu item.. Code -&gt; Reformat code PHPStorm will let you remap everything anyway so you can use a different shortcut.
Hi Mike, I think a good option would be a part time uni course in the evening, while working as developer in daytime. That way you get mix of experience and formal study. I am currently studying for a part time degree in computing (and working as php dev full time) and personally, even though at times I feel some modules don't progress fast enough, I find the knowledge I have gained has totally been worth it. Firstly, you will probably learn a stricter language such as Java, which will help to drill in the programming fundamentals, and set you up better for the future should you decide to work with another language. Secondly, to fully utilise PHP, I think it helps to have a broader understanding of how computers / databases etc work. Thirdly, you'll probably study some computing related maths, which is definitely important for programming. Finally, from studying for a degree you will learn 'soft skills' such as team work, that really are important. Hope this helps and good luck with whatever you decide!
Broke? Bloody hell, these prices are unbelievable, I think I need to learn PHP.
It's not language-dependent. If you're good you can justify obscene rates. I've seen $400/hr .NET consultants who are booked for months out. PHP actually has quite a bit of downward price pressure because of people like the OP offering sub par (but probably passable) code for $8/hr. If all you want is to program and be paid well for it, master either Java or .NET and work for a Fortune 50. Or consult in one of those. 
Don't mistake my bluntness for rudeness, but you can't charge what I can. Regardless of code quality (which I haven't seen but judging from others here it isn't very good), you're not fluent in English. It's conversational at best. If I'm paying $8/hr I expect bad but working code and nothing else. If I'm paying $125 or $175 or $250/hr I'm expecting elegant code, precise documentation, and thoughtful written and oral communication during business hours in my time zone. I don't expect to read things like "But how to get high-paying projects/clients."
To answer the question "Why would one format code like this?" My best attempt at an answer is it makes matching braces very obvious. To answer the question "Why would you format your code like this?" I would not.
I spend so long reading/parsing each line that I have trouble reading what the entire if-statement is talking about.
Well if you develop code that generates a ton of warnings because you develop with only E_ERROR thats a bigger problem. People who do that write code like checking to see if an array key is set by seeing if it is equal to an empty string. 
It just looks like an even spread of wallpaper to me. I just cannot see any structure at a simple glance. Don't ever make me look at anything like that again - I'm still under therapy after having to work on OSCommerce.
because you hate your life
Job security. Good luck finding someone who wants to work on my mission critical code!
Because Meth.
Oh god. OSCommerce. my condolences. I had to work on "Gambio", a commercial fork from xtCommerce, which itself is a commercial fork of osCommerce. Every fork has added a new layer of horror to the code. The more you got to the core, the more you would find osCommerce code. horrible, horrible stuff
Everything online, some customers want meetings (those are also the customers who has backed out before even having the meeting...). I don't really need a much higher hourly rate as I get mostly the clients I need, even though some months are really slow, and then some months are super busy. May is very busy. As I'm just 18 years old and getting rent paid by parents + "scholarship(i get free money)", I don't need the money to pay rent and stuff like that, but it's helping very much. And I can afford a lot of nice things.
I'm in this period where I don't really want to take on more work, but for $110-180 per hour I'll do it. It's nice to have money. Also, I don't do discounts. I could say $XX for this project, or how many hours I think it will take.
I think this is probably what I am going to do if I'm honest, from the responses I have got it seems that lots of people are like it's not necessary but the things you learn from it help you to further your career. Thanks a lot for your advice :)
To torture the poor sod who comes in after you.
Thanks for the reply, I think my main thought process after posting this, is that I am going to try and get a junior role once I finish my A-levels and try and study for a degree as part time. All of this depending on whether or not I can actually get a junior role as I live in a small town called Chesterfield in the North of England so work may involve commuting.
I do not buy your argument of &gt; we do development using PHP PHP has been my bread and butter. But no one just "develop" in PHP. You got to be kidding me when you say you can not do markup correctly. Moreover if you are into web development you should be aware of the fact developers stopped using tables for layouts at least a decade ago. &gt;Most of the clients (including gorlet and nursetutor) provided their own screen design. If you get screenshots/JPEG mockups and then translate those to markup you are doing it wrong. And if your client gives you this markup and you do not complain or at least correct them you are again wrong.
I started grinning, then laughing when reading your post until I read you actually had to go through that. I'm sorry to hear that, man. Ninja-edit: Typo
Add shit to make shit less shitty?
gross
lots of self-loathing?
$50/hr is probably more than 80% of Americans make. Hell I'm living really comfortably for ~$25/hr. Not an independent dev however.
Meth, not even once.
They are clearly drunk.
&gt; Develop any applicaton as if the person who is going to maintain it is a psychopath who knows where you lives OP, I suggest you find out where the person who wrote that snippet lives, working on that code will turn any person into a psychopath so you're already halfway there
It has somewhere, a setting to set shortcuts to netbeans shortcuts. This is what I did when started with phpstorm. The reformat shortcut is then Alt+Shift+F
Which goes to my entire philosophy: Don't do crack, kids.
Woah. Is the rest of the NY market simply at the same level? After 10 years on the tools you surly know a few other local devs well enough to enquire. Seriously, something else is not right with this. No offence, I'm sure you have but I have to ask: Have you actually handed a proposal to a (new) client based on $50/60 an hour or more? For a big project, even think about not exposing your hourly rate at all. Write a proposal with line item totals based on it. I've seen and heard it many times in my 10 years. Some people are so worried about losing clients by overcharging that they undervaluing and overworking themselves. That may or may not be happening here. I don't know you or your market. All I can say is with 10 years experience, you should be charging 3 or 4 times what you are. 
I will message you later when I get home. 
ok. Thanks.
None of that was accurate in any way.
Buy? Startssl.com will do one for free. 
I don't know many freelancers to compare rates with, so my rates are just set to keep the work flowing. I've charged more, and worked less, in the past. I'm often dealing with first-time website owners, businesses who're only getting websites because they feel old-fashioned without them, or indeed businesses who want internal systems to streamline their outdated billing processes (or whatever) but are having as hard a time as anyone in the current climate. This means I'm up against bedroom designer/developers and hobbyists who are already significantly undercutting all of us, and the client can't really tell the difference until we've had a face-to-face. No disrespect meant to those devs just starting out though, you got to start somewhere ya noobs. A better criticism might be that I'm setting my sights a bit low in general. But first-time-website-owners with little to spend is a massive market at the moment. Plus, I love seeing projects go from start to finish. I've been a contractor working on much larger projects, and always feel like an under-appreciated cog in the machine. The way I work I meet clients, advise designers, write all the code (usually), and launch the sites. Every day is full of different puzzles. I really enjoy my job. 
UK contractor, £40+ per hour, depending on location. 
You're coding in a terminal, in an editor that doesn't word-wrap and that terminal is 20 characters wide? :)
&gt;Stuff you won't learn on the job. How file systems and databases are designed. The advantages of different sort algorithms. How different ecryption systems work. Where do I learn these things if I don't want to go back to school? Anyone recommend any books?
Get the head first design patterns book and read it. It's readable, and it will take you forward. Also, YouTube is your friend. Plenty of great tutorials on there for when you get stuck, which you will, but thats all part of the fun. 
80% of Americans aren't professional developers. Your rate should reflect the value you bring to clients. Charging $5,000 an hour is totally reasonable if every hour of your work will bring a company $25,000 in profit. What the average American makes is inconsequential. 
It's a warning to other developers not to fuck with that person's code, because they are sociopathic and lack restraint.
Although starting your own business creates a lot of overhead on its own.
So remap it.
best take this to /r/shittyprogramming
Because you hate people. 
Maybe this person is used to lisp or scheme? Those languages use a shit load of parens to a point where they become so hard to discern what is happening if you try and count or match parens. According to my CS 101 professor you will eventually have the Matrix or Zen moment where you just stop seeing the parens. At that point the indentation and whitespace are far more important to see at a glance what the code is trying to do. Not to say it's a good idea to format PHP like this, but it could be very readable this way coming from either of those enviornments.
If you're the only person who can figure out the [spaghetti code](https://en.wikipedia.org/wiki/Spaghetti_code) you're probably the most valuable person there.
endif, i knew we had coders that started their career by learning basic and working with it in a productive environment!
Okay, I'll try to be the devil's advocate here, and I also have a point. You see, I consider writing code very similar to writing any other piece of information. Infographics, books, articles, poems, research papers, essays, and the list goes on. As we have different styles of writing different texts, we shouldn't coerce our "developers", or code writers, to write in only one format or way. There is a plethora of coding styles out there, most of them are pretty much the same, and yet when you see a code like the one displayed above, you see something completely and utterly different. You see the punctuation marks being aggregated in such a way that the words are separated in a pretty clear and humanly understandable way. Look at the code as a shopping list: if supermarket buy milk eggs bread return empty beer/milk bottles else if clothing shop buy pants shirts ... Maybe it's not instantly recognizable and understandable for you to read right away, but considering the fact that we've all been raised thinking there is only *One True Way* of writing code, that is understandable. I experiment with my code a lot, and the above example is very similar to what I've been trying to develop myself as a form of writing code. Maybe you don't consider it pretty, but once you understand the logic behind it, and although it's a short example, it seems pretty consistent, than you can start "Reading" the code as it was meant to be read. I've prepared my downvotes umbrella.
They've certainly made a meth of the code.
the answer is: you wouldn't... you would not. no.
Yeah. Sure. It's **probably** all my fault. I **probably** did something wrong. Can't have anyone having valid criticism of something you like, now can we?
&gt;I think most of the guys offshoring their product developments are fools Yes, and that's why we won't hire them any more. Because they think we're stupid and they can write really bad code and they think we just won't notice, but we do notice. Which is why not one of them has lasted beyond their initial 1 month evaluation period. In fact, not one as lasted longer than 2 weeks without getting fired.
you win 
Right, but you're thinking from the perspective of someone who only works for themselves. I'm thinking from the perspective of a person who has to worry about the jobs of 20 other people, some of whom have been working there for 10 years and depend on that income.
PICNIC problems are more common than software/hardware problems.
Direct link to result spreadsheet: https://docs.google.com/spreadsheet/pub?key=0AhePUdRMAppIdHIzd2d3YU9oVE55MnctaGc3NTVvcVE&amp;single=true&amp;gid=0&amp;output=html (I realize that graphs on Tumblr look super small)
There's a good couple. http://tutorial.symblog.co.uk/ is a good start, I think it was based on 2.1 so there may be some simple deprecation warnings you may see in dev mode.
Not arguing here, I completely understand your situation. I'm not proselytizing, I'm just telling it from my own perspective. I wouldn't presume to tell you or anyone how to run their business.
Does this happen? Sounds like a terrible idea.
Oh, you are the one who select text, then go to edit-&gt;copy aren't you? I heard stories that there is still someone out there that doesn't use ctrl+c. 
I also had broken shortcuts in PHPStorm. It was caused by another program taking precedence. Once I corrected the problem, the shortcut keys worked. If you're unable/unwilling to fix problems in your development environment, I shudder to think what your code must look like. 
I once reviewed some contract code that had stuff like this at the top: const ONE = 1; const TWO = 2; [...] The only explanation we could come up with is the contractor charged by the line.
http://i.imgur.com/cKco8la.gif
Hey, I'm on the tram currently and haven't read all comments BUT I can give you my personal experience on this. I went to university for two years and its a great experience and you do learn a lot of principles and logic behind programming which comes in extremely handy. HOWEVER on my second year (2 months ago) I dropped out and became a php developer, my employer told me they don't even look at people's degrees (this'll be different in much larger companies I'm sure like virgin media). To me I found this extremely surprising, I thought no degree would definitely equal no job however there seems to be an extremely large amount of web developer jobs around for no degrees (I got contacted by over 50 companies since I took this job, this was my first interview) It depends what your after at the end of the day but there's no shortage of developer jobs without degrees.
Virtually any project will be appropriate. Pick one with basic CRUD functions, authentication and authorization. Any tutorial you go through will just scratch the surface. This is fine, but you are going to want to go deeper. Since they are both so modular, I suggest picking a module and begin replicating its basic functionality. For example, I once wanted to implement a custom authentication method in a ZF2 project, so I picked apart ZfcUser, learned how they did it and made something similar. It walked me through much of the framework's design. If you really want to have fun, learn how to set up each for unit testing. That should score some points.
This is what I got from the article as the tl;dr. 1. Don't use PRedis as a key value caching library, use PHPRedis(the C extension). 2. There's no compelling reason to switch from Memcache to PRedis if you're using it exclusively as a key value store. 3. You should be using Memcached over Memcache pecl extensions.
Fantastic breakdown, thanks for taking the time to write this all out. What you're referring to as the interface is something I just call an API, because I that's basically what it is, even though it may not be externally exposed as a JSON/SOAP service, for example. It provides a great metaphor and baseline for comparison when you do actually compare it to isolated (but interconnected) web-based API's, since each service (or class) you're calling serves a specific purpose and even though your code or their code may change internally, the concept here is that externally at this "interface" there is a sort of contract via this API which is typically not broken and thus stays fairly consistent. 
Not downvoting, because you should always question everything and try to find advantages for all alternatives...so, good on you! That said, programming languages are, in fact, languages. On top of mere syntax they have their own idioms, vernacular, and more to the point, their own colloquialisms. Some things just don't translate well because the language simply doesn't have the mechanics to support them. In javascript, for example, its recommended that you never put your opening brace on the next line. Because javascript inserts semicolons at the end of statements (seemingly, on a whim) you might get some unexpected results if you code it the way you'd code C# (where VS practically forces you to have opening braces on the next line). You need to speak the language you're speaking...otherwise you might sound like my eastern european grandfather who mixes english and his native language when speaking to others. Yes, he's saying what he means, but no one ever understands him. When it comes to writing code, translating design patterns is okay but translating language-specific idioms is not. 
And PHP C extensions are much faster then native PHP code. No information on if the author used APC or a opcode caching library which may speed up PRedis.
Perhaps that the code sample's author used a format tool with strange/incorrect settings?
In regular class files: if (something) { //code here } in template files: &lt;?php if (something): ?&gt; html here &lt;?php endif; ?&gt;
Here's as series of articles for you: http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1
It is one thing to write beautifully formatted and well designed code. But you are elite when you can do that and can also work with shit like this.
problem: not even you can read your own code.
My guess is its someone who never took a real programming class, and taught themselves PHP, and decided this "worked better for them"
Thanks for reminding me that alt+shift+f is not the code formatting shortcut. That's the first thing I change on a fresh install.
PHPStorm has defaults for PEAR, Zend, Drupal, Symphony2 and of course PSR1/PSR2 standards. 
Protip, CTRL+`, change keymap, Eclipse. Saved my life.
I'm thinking that where $script is, there's normally a multiline array or script, in which case this is a pretty good way of keeping things clear.
Reminds me of ADLDAP library filter syntax.
Yeah, I know you understand - it's more for the benefit of others who may be reading to clarify the difference in stances. There's nothing wrong with how you see it, it's just a different circumstance.
I assumed he was a freelancer/contractor.
:-(
Did you use predis with phpiredis(hiredis bindings) or just the standalone predis library? 
+1 to know how APC affects the results.
Create a database flag that indicates the type of encryption being used and/or the php version that the row was added using. When creating the account, test if the PHP version is &gt;= 5.3.7. If yes, use password_compat. If no, use PHPass. When the user needs to log in (assuming that's the use case), use whatever encryption type the database says. This way, if the user updates their PHP install, old users will use PHPass and new users will use password_compat.
my eyes are bleeding, this code is just so awful, why would they do this
Ok, so first off, **please** use the appropriate terminology. Hashing is one-way, encryption is two-way. We want to store passwords in a one-way format, therefore we want to use Hashing. Don't call it encryption (it just confuses the matter). Ok, now with that out of the way, let's look at your actual question. There are really two questions here that I see. The first is how to deal with supporting PHP &lt; 5.3.7, and the other is what to do with systems already deployed. Let me deal with them in that order: **Dealing With Old Versions** Well, in short, upgrade. Seriously, upgrade. There are enough vulnerabilities and bugs against &lt; 5.3.7 that you're going to want to upgrade anyway. Ok, with that out of the way, if you're still reading, what I would suggest is using [phpass](http://www.openwall.com/phpass/). If you're supporting 5.3+, use it with compatibility mode off (which will use an older form of bcrypt). And if you're supporting older builds, run it with compatibility mode on. That will generate a fairly strong hash. Much stronger than `md5($pass + $salt)`. But it's still weaker than bcrypt. Here's my [review of the algorithm](http://stackoverflow.com/questions/16042128/is-this-a-good-hashing-password-function-in-php-if-not-why-not/16044003#16044003). In short, if you don't have a choice, use that. If you do, use bcrypt... **Migrating Old Systems** The answer to the second question is: yes, you want to migrate. Get off the old md5+salt system, and upgrade. I wrote [a bit on this](http://stackoverflow.com/questions/8841719/update-old-stored-md5-passwords-in-php-to-increase-security/8842142#8842142) as well. But basically, the concept is: 1. Run the current md5 hash that you're storing through your new algorithm (phpass or bcrypt). 2. Take the result, and prepend an identifier to it. Then, when verifying a hash, check to see if the identifier exists, and if so run the legacy hashing algorithm on it first before feeding it into your new algorithm. **Important** if it matches, update the hash to be a new-style. Over time, your active users will be migrated. But your inactive ones will still be reasonably protected. Which is what we want! Yay for the best of all worlds!!! **Would you leave an old and knowingly bad MD5 + Salt system in place?** Absolutely not...
*beginning
I don't drink my coffee through a straw, so damnit, you'd better have menu items available for my shortcuts.
You know, it's actually easy to read, but yeah, screw that noise.
I simply think that the topic is too advanced given his previous experience with the language (after all "There are only two hard things in Computer Science: cache invalidation and naming things") and of too limited application for the types of projects I would expect him to progress onto in the short to medium term. Oddly I'd say that if you were talking about frontend technologies then sudying asset caching instead would be a great idea; careful application of a few (relatively) simple techniques will give significant gains in terms of responsiveness &amp; will have meaningful impact irrespective of your scale.
Any IDE will reformat with little to no effort on your part.
NetBeans does the same.
Parkinson's disease in your enter-finger?
I started building websites at 11 years old arsing around with things like phpBB, Postnuke and later went on to actually learn PHP building things from scratch. By the age of about 15/16 I was being paid to develop relative tricky websites with social networking elements and all that jazz. I later went to college to study HND Computing in the UK (now called a Foundation Degree for some bullshit political reason) and we spent a LOT of time on irrelevant shit. They taught me that tables and frames were excellent, tried making us all use Perl, spent a lot of time with msSQL, normalize everything to the Nth degree (genders does NOT need its own fucking table) and all sorts of other malarky that these days is pretty detrimental to web development. The web unit was weak. Even after getting them to let me use PHP instead the job was pretty much "make a 5 page website with a header and footer wrapped around it, which uses ?page=foo to display different content." This is all so old school it makes me sound like I am 40, but this shit was being taught only 6 years ago. In my experience (and in the experience of plenty of other developers I have spoken too) higher education is a massive waste of time for learning programming. Now, Computer Science is a bit different. They can teach you all about binary, memory management, vector clocks and all sorts of mad shit, but that is very little to do with PHP, and the sort of course where PHP is going to be taught is not usually the same course as hardcore computer science concepts. PHP is best learned with CodeAcademy, a book on OOP and a hobby site to cut your teeth on. You can then use personal experience to build out websites and grow your skills over time. Computer Science is more useful if you're going into iOS/app development, sysops, etc.
I've actually gone back to old code and thought "what the hell was I trying to do there?" I'm an awful developer, and proud.
A good way to measure your own improvement is to count the number of times when you react to your own old code with "what dumb piece of shit wrote this garbage?"
The polyfill library requires 5.3.7.
There will always be some poor sucker who takes a job not knowing what the code looks like behind the scenes. All you do is cost the company a couple of hours of time spent reformatting and everyone will think you're completely incompetent. 
+1 for sublime text &gt;_&lt;
Mental illness.
[crack is whack](http://graphics8.nytimes.com/images/2007/09/05/nyregion/05haring.span.jpg)
I could see someone doing this to make it easier to generate diffs in source control. Still not good though.
Hold on... You're back? I thought you were permanently banned from reddit.
That's actually an interesting way to look at it. Granted, I'm still a student, but I had never considered that. And those are some great pointers that you're giving. Thanks!
Ah. Right you are. But really, he should seriously upgrade. Anyway, if he still needs to support such old versions of PHP, I suppose PHPass would do the trick.
Get rid of that attitude. People try to debug a defect for you, they try to volontarily help you out with your problem. NO ONE told you that it's your fault. Relax.
No, they're not trying to debug a defect. They're smugly pointing out they know something I don't. If you read the original post, the poster started as follows: &gt;Or, you know, you could... Addressing someone like that is a thinly veiled insult. This person insinuates that this should be common knowledge. It implies impatience at the other person not already having done so and it also implies stupidity. The other person wrote: &gt;You probably have another program interfering with the shortcuts. You did yourself a disservice by giving up so easily. If any program is interfering, I must have set it up. Only I can be to blame then. Are you honestly going to use the argument that they didn't type the actual word, to claim they therefor didn't intend it? There simply is no other option than it being my fault, if it is another program interfering. So why then is that not what they're implying? It can only be that, for there is no alternative. Also, I did myself a disservice by giving up. This from the PHP programmers community, which is always complaining about how IDEs don't implement all their features and about how an IDE should be simple. But when someone says it about PHPStorm, ooooh, he must be a quitter then. Any other IDE is fair ground but don't point out problems with PHPStorm you might be having, oh no.
You are right. I should encrypt the code with Zend Guard and make sure only I have the license file. Thanks for the advice buddy.
I'm guessing that would add very little to the results (if anything) - since the benchmarks would be (I hope) running in a PHP loop for timings, not hitting a PHP script/page over and over - which would skew the results dramatically with startup/shutdown times of the process(es). Ideally tests like this are probably best run/crafted to run from the CLI, not from within a web server.
Now THAT would be impressive, and possibly illegal, but definitely impressive.
More like why even write code like that to begin with, why not just initialize your variables as array() at the beginning without all that conditional code.
Was this contractor [Wally?](http://dilbert.com/dyn/str_strip/000000000/00000000/0000000/000000/20000/1000/100/21164/21164.strip.zoom.gif)
I still wonder why people insist this{ } is the standard, instead of this { } But this is ridiculous, in comparison.
&gt;: &gt;\- &gt;( FTFY
at one time developers used the number of lines of source code as a way of showing how hard or complex their code was... I hate dealing with that.
You made me cringe, quite literally. I am taking over a new project that I haven't seen any of the code yet... and am a little worried.
That smile at 0:44.
Might be interesting to see these results with Nginx/PHP-FPM
That's what I initially thought as well but looking at the source it works via an index.php file that gets the test type memcached/redis etc via GET parameters. The article as well refers to using Apache as part of the test setup and running tests a different levels of concurrency. I didn't see anything in the source code about threading or forking to make concurrency work so I assumed it was via Apache. If that's the case then there would be some overhead of parsing/loading the many PHP files of PRedis. Whether the overhead is meaningful or not is another question.
On a morphine dip?
&gt; I just handle user input, make necessary queries on database and render an output. What else do you want to do? Is the framework making it "too easy for you?". If so, read through the internals for more insight. This series will probably provide man insights into some great oop practices. http://fabien.potencier.org/article/69/packing-a-symfony-full-stack-framework-application-in-one-file-introduction
Please note that this is a bit old. He uses the mysql extension in PHP a few times. Do not ever use the mysql extension. Use MySQLi or PDO. Preferably PDO (not just as a matter of my preference).
And this is why people say you should always comment your code. And why comments should always contain information as to "why this is happening" rather "what is happening" in the code.
Nope. That's not how it works. Code shouldn't require familiarity with a writer's specific whims. There are certain conventions. Defy them and you objectively (in terms of being subjectively to all but one person) make your code less readable.
Just looking through your modules directory you seem to have stuff like venue.class.php and venue.controller.php I may just be unfamiliar with whatever methodology you are using but I would structure my classes a bit different venue.class.php should just create an object based on the entity requirements and not do the data storage or anything. class venue extends base{ private $venueName; getVenueName(){ return $this-&gt;venueName; } setVenueName($name) { $this-&gt;venueName = $name; } } I would then make another class to handle database work class venueDAO{ getVenueByID($id){ //Create new venue object //Pull data from database //Return the actual object } saveVenue($venueObj){ $this-&gt;db-&gt;insert('venue_name', $venueObj-&gt;getVenueName()); } } Then a controller class would be what receives data and prepares it into an object before sending it to the DAO I just like the idea of separating concerns as much as possible so if your venue class has 10 database queries, you would only have to change the DAO once to sort out all those queries if there was a bug. Some people might disagree with me though. And classes should be representative of an entity rather than just a way of grouping different functions. 
Try some TDD. This is a good place to start and directly related to laravel: http://net.tutsplus.com/tutorials/php/testing-laravel-controllers/ To answer your question though, yes, that is pretty much all there is to CRUD apps and most apps are of the CRUD variety. The best you can do is make your code as bulletproof and decoupled as possible. 
[Code is Art](http://camendesign.com/blog/worthing-digital)
That is dead on accurate for the project I am working now. That's why I love r/php. Others share my pain and liver damage caused by said pain. 
If you find yourself doing something slightly complex, perhaps ask yourself if it would be useful as a standalone library. Then the OOP principles can come into play quite a bit.
Granted. I haven't had the time to investigate Laravel (we use Code Igniter at work and I use Silex for my personal projects). Generally, I would say 90% of web work these days comes down to writing controllers. . . as you've found out. But, if you do want to go beyond here's my advice: Build libraries and refactor! If you really want to start both learning a lot about OOP patterns and the places where they can be really useful, look over the code that you've written for the last few projects and ask yourself: what code is being repeated and can be abstracted into a separate classes so you don't have to write it again? I generally believe that if I have to do something twice, that's once too many. If you want to start looking at interfaces look through you're team code and find places where a standardized sequence of public methods would save you time from having to go back and figure out what the public methods were called at a latter date. My team had a bunch of models with method names like getPerson(), getDog() whereas they could have just called everything get() and saved us all the time of having to figure out what the get method was going to be called this time. Enforcing an interface quickly got everything into a more standard convention.
Love the effort in trying to educate. Can I ask why you have opted for submodules over composer? Predis is most certainly on packagist https://packagist.org/packages/predis/predis
Seems neat. Are these puppet scripts good enough for production use, or are they vagrant / dev only?
I haven't looked into them enough to say yea or nay on that, especially since production naturally has quirks that dev does not (security constraints, tailing log files, scheduled updates, etc). They might be OK as a baseline to experiment with, though, especially on smaller projects.
Oh nevermind, I see my mistake there. The amount of whitespace confused me. :D
Consider the following: $c = null; if ($a&gt; somefunction(rand())) { $c = new ClassA(); } else { $c = new ClassB(); } var_dump($c); $c can be ClassA or ClassB. It is non-deterministic. While doing an include with autoload, until the function is eval'ed with a non-deterministic function, autoload wouldn't know which file to include/require. Assume, on your first run, you get ClassA() and the entire include-set definition is cached at opcode level (because php has execute everything in the file procedurally when you include). On the second run you hit the else condition, what happens? Do you get a class not defined? Segfault? I don't know the answer. But from the looks, it doesn't fit my mind. What I would do (and did for the last 10 years): properly manage your requires AND use opcache. If you like to mix it up a little, consider adding the following condition to the set above: Assume ClassA and ClassB extends ClassBase which defines static stuff in it. just a thought.
&gt; Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live. 
Yeah that was really easy, definitely had time for that, 1 minute.
More civilized countries (like germany) have apprenticeship systems where you also learn architectural stuff - depending on the company. You won't need a lot of stuff you learn in University later on, and a lot of stuff is outright outdated or never ever used in the wild. It also depends heavily on the job you're learning, i got a great deal of education in architecture of multiple systems which are running to this day. I would state i am better at web architecture as 90% of university graduates i've met. I've met bad coders with all backgrounds, so in the end it doesn't matter which education you have. Let's face it: Uni is good to get an good overview and learn a broad base of basic techniques, but the real skills come from the practical experience. Practical experience in the real world (e.g. a company) cannot be replaced by any school or university. So, at least in germany: It does not matter if you want to do more technical work than leadership work. For leadership work it gets harder without university, but for actual development jobs it doesn't matter.
I am curious if you really think moving to Europe is a viable career path. I am 25 year old American here, working and trying to study PHP in my time off. I have only briefly looked at the legal requirements to move to Europe, but what I saw was that you basically had to either have a work visa, or start a business.
So, I had used php for some very basic html manipulation and when I decided to start learning php properly (about 2 months ago) I just decided to go straight into building a full-blown CMS/ecommerce framework. think I'm about halfway done. Have redone parts of it several times after learning better ways to do stuff. Nothing like diving in over your head to learn how to swim.
I'm interning at a place right now where most if not all the developers run on ubuntu. All the interns and new guys who are training in magento are put in the "incubator" on a virtual machine. The VMs are super annoying to use and the quirks are slightly different with each machine. I will tell them about this to see if it may help. 
So does Netbeans (alt + shift + f) which is free. You can customise how it's formatted it the menus. I don't get all the PHPstorm mentions around here... /r/hailcorporate I guess.
Write your own micro framework!!!
You're right in one thing: the idea behind is similar. Instead of coding many things by hand (authentication for example), you get libraries which are designed to play nice with each other. How much the 'tiles' are tied together? It depends on the framework's design. Some of them are loosely coupled (take one thing without the whole bundle), some of them are tightly coupled (use whole framework). It's up to your taste. However, *please* don't dive into frameworks without prior experience with PHP and/or programming as such. It might spawn a lot of "Why so?" questions, to which answers would've been obvious if you knew properties of PHP.
&gt; You're saying that Ee is acceptable because what he did is art, and the OPs example is not acceptable because it's not art, but instead it should be treated as a scientific document. No, I'm saying there are times for creativity, and there are times for function. This isn't a time for creativity. &gt; What I'm trying to convey is that when you judge all code as scientific documents, &gt; most of the code out there would be rejected because it rarely conforms to the standards, YES. Damn straight. That's why there are standards. That's why code is rejected on the basis of those standards. &gt; but once you start treating code as an art form, as I claim it should be treated, you lose all grounds for arguments about specific code styling. This is the most pretentious bit of wankery I've read in a long time. Code isn't art. It's functional. &gt; On top of that, most of the code out there is maintained by a single developer, so once you start writing code, and you're the one in charge of maintaining and developing it further, Code managed by a single developer is able to become more idiosyncratic, but most code written by a single developer is not routinely updated. Anyone who works in a team has a responsibility to code as part of a team. That means coding to standards. &gt; you start experimenting, like the example OP provided. The OP clearly had to work on this code. Therefore your argument is rendered utterly invalid. &gt; This is a very hurtful remark, but I'll ignore it because I'm pretty sure that I'm making in a month what you're making in a year. And yea, I'm a developer. It's right about here you went from being someone I have a philosophical difference with to being an absolute twat. Seriously. What a knob. You know nothing about my job, my career or my life and even if you did that would have absolutely no bearing on anything. Your pay grade doesn't make you right. I know people on millions (also developers) that I wouldn't trust to tie their shoes without going over budget. I've known, and worked for, people whose "personal style" made development harder, more time consuming, and less enjoyable for everyone around them. People who waft through their career thinking they're god's gift and their code is poetry, while everyone around rolls their eyes and reformats and refactors their shitty work as soon as they're gone. You can sit drinking your beer. I hope you do it well away from any team that has to put up with either your shitty "poetry" code or your smug attitude.
I'd better go with `"predis/predis": "v0.8.3"` in composer.json instead of git submodule :)
I've avoided CakePHP purely because some framework benchmarks I saw here or in /r/webdev had it listed as dead last by a mile in almost every performance metric. If anyone can back this up or refute I'd love to hear from you, it seems like a popular enough framework but I don't want to waste time on it if my impression of it is correct.
If you feel comfortable with it you could try to combine them: Make various categories of pictures and let users vote on them.. Something you should definitely do: Get some good code and try to understand and modify it. An example could be a variety of frameworks (there are always some posts about frameworks in /r/php. Some comments come with quite good explanations what is good/bad about that particular piece of code). Afterwards (or before if you wish) you can try to build your own little framework. It could include: Classes for handling Database-objects, Users (login, registration, change password etc.), maybe a small template class. I myself started out with browser games. First I just played and then I wanted my own, so I downloaded an open source project and tried to fix bugs (there were a LOT of them :D) and implement features I wanted. I also did a lot of random things I wanted (like your #2). Afterwards I started developing a web Desktop which is my latest project. It involves a lot of OOP and "web 2.0"-stuff which helped me understand a lot about how things work. I hope I gave you some ideas and if you have any questions feel free to respond to/PM me. Have a nice day
Wix is not a framework in the way that coders refer to frameworks. Wix is more of a 'builder'. To use your calculator example, Wix is to web development as a simple calculator is to simple math. a framework like cake is to php development as an HP-35 is to financial calculations. You need to know what you're trying to accomplish and how it works, you need to "speak the language", before you can properly use the tool. Or else you run the risk of being one of those people who "knows the framework, not the language" type of developers. We interview a lot of people at my job who claim to be "good at php" or "design experts" who are really "quick at setting up wordpress themes" or "twitter bootstrap experts". Do yourself a favor and build a few small projects in vanilla php before letting frameworks fuck with your understanding of things.
PHPStorm is heaps and bounds better than any other PHP editor/IDE around. No one's to blame you can't afford it.
I wouldn't use this for production, since they're probably missing some firewalls and settings that I know nothing about.
Good career path yes. Simple as an American, no. The EU makes you jump through a few hoops to get residency. Each country has its own set of rules. Language will start as a social barrier but most IT firms standardise on English internally. The main shock you will have is how few hours you work. In France people start 9am, have 2 hrs for lunch, and leave on time at 6pm. Despite this competancy is on a par with the US. Once you get over the bumbling beaurocracy you will enjoy a very good quality of life. Most of my American friends ended up staying by hooking up with a local. A civil marriage can be enough to kick off residency proceedings. European women are insanely hot compared to American. Your 9 is our 5. You'll go down well over here, and if somebody looks dubious when you open your mouth pretend you are Canadian. My advice would be to book a month holiday on a tourist visa, have interviews lined up for when you arrive, and wing it when you arrive. Prepare to be stubborn, and invest in an ereader for the hours you will wait to see petty government officials. No matter what happens, if you throw youself into the local scene it will be a trip you never forget. Europe is incredibly diverse. The hard part will be choosing a country. Best of luck, Phillip.
NFS synced folders actually don't work on windows; vagrant just silently falls back on virtualbox's shared folders. [1] Also, if you plan on building many sites with this setup in Windows, take a look at Acrylic DNS Proxy [2]. It'll enable you to configure a wildcard zone, e.g., *.dev, so you don't have to keep adding static entries to your hosts file. Combine all this with Apache's mod_vhost_alias in your guest VM, and you're approaching a zero-config dev setup. [1] http://docs.vagrantup.com/v2/synced-folders/nfs.html [2] http://mayakron.altervista.org/wikibase/show.php?id=AcrylicHome
I make note of Windows users needing to use the default option on puphpet.com. You also setup wildcard DNS on Linux and OS X: https://groups.drupal.org/node/16862
I've bought https://leanpub.com/laravel-testing-decoded e-book yesterday and will start reading soon. Also, we're pretty familiar with TDD. We usually use Codeception/Selenium for acceptance tests. (We also know about Travis CI but never tried unit testing yet.)
I follow Fabian Potencier's blog on daily basis. Also, I don't complain about frameworks making things easy for me. I feel like developing controller logic makes me not be able to use all the oop tricks I want to use.
Yup. I got unbanned (under a few conditions) on Monday... So I'm back!
im not trying to be a smartass, but https://www.google.ie/search?q=books+about+file+systems
Now who's making assumptions? I didn't say that I'm supporting "Code as poetry" when it comes to working in teams, I'm just saying that I think it's acceptable way of writing code. Unlike you, I do consider code an art form, and yes, I know nothing about you, besides the fact that you're closed to certain ideas and ideologies and can't produce anything original, only that what you've been taught to produce. You seem pretty knowledgable about refactoring shitty code, I'm assuming that is the kind of responsibility that someone like you might get, at most. You don't sound like someone who would have been hired for their creativity, open mindness, or even basic tolerance to something other than yourself. I'm the twat for expressing my views? Really? Or are you the twat for trying to suppress anything that doesn't conform to your shallow and boxed world view? (rhetorical questions, please refrain from responding or replying) Over and out...
For project 3, what method did you use for storing/"encrypting" the passwords?
I'm curious about #2 the json method. Care to post example code?
Take a look at this project: http://genghisapp.com/. Really impressive code there. HTML, CSS, PHP, JS in one file. This is basically what Fabien is going after.
That goes against the saying "Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live."
[Here's a thread from a week ago that should give you some ideas.](http://www.reddit.com/r/PHP/comments/1g41ma/what_was_your_first_php_project/)
Welcome back! What were the conditions, if I may ask?
not really a site like JSBooks but I found this http://moeamine.com/7-free-php-books-to-improve-your-skills and the links are good (they do go through an intermediary site though)
A university degree should teach you to think. I'd recommend a developer get a strong broad base with elements of communication, arts, business and humanities. The most employable developers are fast becoming those who can synthesize across disciplines and not just build widgets. 
CRUD is CRUD no matter what you're using, framework or not. In your example paste, your controller is pretty fat. What I mean is you have logic in there that shouldn't necessarily be in there. Why not delegate all of your 'Reference' creation logic into a factory class? Then in your controller, you simply map the input to the ReferenceFactory-&gt;create method and let it do it's job. This makes the controller responsible only for dealing with input and delegating to the proper helper class, keeping it nice and thin.
Thanks, i watched like 15 minutes of it before I realized that all this was about to boil down to.
Ok, let's overanalyze this, shall we. &gt; pointing out they know something I don't. I consult stackoverflow, reddit, newsgroups, IRC and colleagues every day in the hope they point something out that I don't know, yet. Yes, it is actually obvious that a shortcut probably has a corresponding menu entry somewhere. So, someone points that out. We all have slow days, and it's ok. we still like you. Your ego tries to parse humour and fun as smugness and insult. You don't need to do that. *You* are not your skills. *You* are not your brain. There is no attack going on. &gt; Also, I did myself a disservice by giving up. Coding and debugging is hard. Most of our jobs look like [this](http://knowyourmeme.com/photos/415209-computer-reaction-faces). All that hours only for the volatile break-through moment of glory, where you begin to understand, which feels amazing and makes all the work worth it. Giving up early is a habit better unlearned in our profession. It's understandable that at times, this can be quite dull, and resorting to cynism and dark humour seems to comfort some of us. Never take this personally. &gt; when someone says it about PHPStorm, ooooh, he must be a quitter then Heh, that's because it seems to be the best around, these days. Not only would it allow you solve your original problem by a menu entry (Code-&gt;Reformat) or shortcut (Ctrl+Alt+L); it allows you to redefine the shortcut (Open Settings, enter "keymap") or just open the Ctrl+Shift+A feature search box, enter "reformat" there, and just press enter. That's not something you just figure out by accident, and we're glad to help, because most of us love giving back to the community. &gt; If any program is interfering, I must have set it up. Actually, no; you could have tried out an esoteric window manager in a even more esoteric linux distro. Or your the sysadmin of your office decided to install 3rd-party software which listens to system shortcuts. How would you know? Even *if* you've set it up yourself by accident, so what? Why shouldn't we try to find a solution together? You're ok. I'm ok. Let's spend life energy on deeper things than that. And in all seriousness, maybe come visit /r/meditation some day.
Malt Blue is a great resource for tutorials and help with Zend Framework 2: http://www.maltblue.com/ Aside from that, I try to keep up with most of the core ZF2 developers' blogs, which also have a great wealth of information on important concepts in the framework: [Matthew Weier O'Phinney](http://www.mwop.net/blog.html) [Evan Coury](http://blog.evan.pro/) [Rob Allen](http://akrabat.com/) [Gary Hockin](http://spabby.github.io/)
[this is an awesome idea](http://24.media.tumblr.com/tumblr_m5fh9gW7a71r18swjo1_250.gif)
&gt;I consult stackoverflow, reddit, newsgroups, IRC and colleagues every day in the hope they point something out that I don't know, yet. You conveniently left out the "smugly" part. You should be a lawyer. I'm all for learning new things and being taught better ways to do things I already know, but not with "dark sarcasm in the classroom", to quote Pink Floyd. &gt;Actually, no; you could have tried out an esoteric window manager in a even more esoteric linux distro. No, I'm running this on my Debian7 VM and I know what's installed on there: my AMP stack and PHPstorm(well it used to be). That's it. Htop tells me nothing else is running.
It seems really great, why is it limited to ubuntu though? (Debian is my distribution of choice). I haven't tried it yet so maybe it's easy to change and my question is irrelevant.
I know how to use google. I just tend to value personal recommendations more than search rankings. 
After it was announced that Google Reader was going to get the axe, I decided to roll my own replacement using Zend Framework 2. An RSS reader tailored to you would be a good project to take on.
It is easy to change. Right now it's only using Ubuntu because those are the only official Vagrant distros available. We're in the processes of adding Debian to the list, though, and eventually CentOS.
Alright! Very, very nice job. 
Great job!
Try taking a look at http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html
there exists also [gitstats](http://gitstats.sourceforge.net/) which seems to support more visualizations.
Bcrypt 
Yeah that is definitely the best way to learn. Sometimes I will read through chapters of an intermediate PHP book just to get some ideas to dive into another project.
Fantastic. Sounds like you're getting the right handle on things. :) When I started with PHP, advice I was given at the time was to base64_encode passwords. Seriously.
I saw a post asking about projects that people did to learn PHP and it made me think of this projet from a few years ago. I had realized that a forum I frequented would let me use my own hosted image, which got me thinking "What is the most creative thing I can do within the confines of an image?" You can read more here: http://blog.classicalcode.com/2009/04/refresh-hero-avatar-game/ I've done a few more of these, which you can see in this category on my blog: http://blog.classicalcode.com/tag/avatar/
Ok, back to topic: VMWare grabs Ctrl+Alt (Mouse escape). Could that be the root cause here? Do other shortcuts with Ctrl+Alt work? What happens if you remap that shortcut to Ctrl+L or Meta+Alt+L? Edit: Found something relevant here: http://www.electrictoolbox.com/vmware-ctrl-alt-f1/ &gt; in order to send a regular Ctrl+Alt keyboard combination to the &gt; guest you need to press Ctrl+Alt+Space, then release the spacebar &gt; while still holding down the Ctrl+Alt keys, and then pressing the &gt; extra key. So to drop to a console I needed to Ctrl+Alt+Space, &gt; release the space, keep holding down Ctrl+Alt and then press the &gt; F1 key. I guess either your host operating system or VMWare eats the Ctrl+Alt+* hotkeys, doesn't find any event handlers for them, and simply does nothing. Easiest solution would be to install PHPStorm on the host system, I guess. Is that an option for you?
I highly recommend checking out Fabien Potencier's 'Create your own framework' tutorial. http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1
I learned PHP in its 4.2 days as my first language. Back then I would write login and simple data registration system on flat file database. I then found a game script named Kill Monster which I did a total convertion on it. That helped me understand some SQL, loops and how to model database tables. I then created my own game project (but still using flat file as I don't like SQL) it used Xajax for Ajax and helped me learn some basic JavaScript. The game was basic, you select where you want to go from a drop down and then the game would random a monster from that area and generate a battle log. You also can trade gold and use gold to buy skills levels (bad design choice I think) or do a PvP which run by the same system as PvE but using that player's stat as monster's. They also get a notification. I also did SMF modification (stuff like recommended topic voting, up voting with list of people up voted and add to their karma, adding Facebook like, karma based user color which had a high impact on my forum, profile comments) and then another game with Drupal API (not a module, but a script that bootstrap Drupal and then run to my game code without Drupal URL routing or theming) Drupal taught me a lot of things like array_unique and its zen-like code style with short function body and "don't touch the core" motto. Later on I moved to Python and found SQLObject before I stop worrying and love the SQL. I still write PHP from time to time, I wrote my own framework (which is also a bad decision because I then found that my security features are subpar to Django) so I could modify anything. For bigger stuff I just use Django. (My largest project is still in PHP that use my framework.)
Thanks
When you use file get contents on reddit it returns json. It returns a very neat and nice multidimensional array where you can access the correct URL for each post in a subteddit. 
Im currently doing Computer Science. And it's crap... It does teach some things that you wont learn on your own, but its mostly crap.
Virtualbox. VM stands for Virtual Machine.
Generally there is /r/PHPHelp for this kind of thing. I'd assume something is amiss with your Apache config. You may need to check mod_rewrite is enabled, and that .htaccess loading is also enabled. If you're not using Apache then it will be again (I imagine) a similar issue with your web server's respective rewrite configuration. Hope that helps.
Create a javscript plugin that implements PGP, encripts the message to your key and tada.
wait a second, that code looks awfully familiar https://github.com/Jh3a3Msr/facebook-clone
Pick a major CMS (doesn't matter which one) and tear it apart. Read the docs. Download multiple modules for the CMS that accomplish the same task and tear those apart. Then write your own module. Then write a better module... Keep doing this until you know PHP and the CMS framework inside &amp; out. Then apply for a job. 
 /* Please forgive this next line, I had no choice */
&gt;I'm looking for something different, rather than "read this book". &gt;I've really had enough. &gt;Could someone hold my hand &gt;I'd want a job doing back-end PHP / MySQL &gt;no arrays, no classes (the two areas I lack knowledge in). Unfortunately, you are caving at a really bad spot. Im sure you could get a job with a shitty shop doing shitty work on shitty websites, but you wont make any realistic livable wage without knowing what arrays are. You could get by without classes, but arrays are a basic fucking part of the deal. You want to get better? You need to tell yourself and really understand this when i write it: You don't know shit, and you are dumb as fuck. You have a lot to learn. The good news is that you can fix this in about a week. The bad news is your ability to recognize your own insufficiency is severely limited, which means your ability to learn on your own will be bottlenecked around that. To me idk if you are lazy or delusional. A decent developer can recognize problems and fix them, nature of the game. If you cant do that...perhaps pick a different field.
Following an online course like treehouse and then just set yourself a series of projects like a simple Facebook clone or a pizza delivery ecommerce site. These sort of projects will involve a huge range of techniques and will give you an opportunity to learn a lot to create certain features. Doing these projects is the best way to learn, otherwise it's all just theory you are learning. Plus it gives you something better than brochureware sites to put in your portfolio when you apply for a job.
1. Go to [MIT Open Courseware](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-spring-2008/index.htm) and start reading up data structures and algorithms. The important thing is not to learn the language but to learn the underlying concepts. It might be difficult, but it WILL help you. 2. Go open source. Create a Sourceforge, Github, and Google Code accounts and start contributing to projects. This could range from simple bug reports to contributing code. Either way, it will look good on your portfolio. 3. Go read other people's code. To that end, I think step 1 and 2 are going to give you a leg up on your competition. The thing is, a lot of employers will hire you to work on *existing* code and applications. 
**Confidence in your work 101:** **1) Work on stuff that interests you.** **2) Work on stuff that *doesn't* interest you but solves a problem for someone else (this is usually called WORKING, but being a benevolent fuck on the internet can be surprisingly rewarding).** **3) After producing enough of your own shit and other people's shit, confidence will come naturally.**
Tough love.
david power's OOP PHP would help with your PHP They'll ask you question like what vulnerabilities would you get from a database? SQL-injection How do you solve it in PHP? Prepared Statement How do you do that? PDO For javascript. I didn't have to learn javascript when I started out, just learn jQuery. and look up listener, event bubbling, and ajax. It seems like you're doing much more than me (project wise) and I'm a senior PHP (of course senior is arbitary and means differently to people, really. haha). You should also know a MVC framework popular one is CodeIgniter. Just google. Understand how to construct a database and tables. One to One, One to Many, Many to Many, Joins, foreign keys, etc.. http://net.tutsplus.com/tutorials/php/the-best-way-to-learn-php/ I'm moving to Ruby on Rails because it's a better community, there are tons of good resources to learn Rails btw. The PHP labor pool is crap right now, no offense, but lots of non CS major and self taught people are going into PHP. Which is good but it's drives the wage down and A LOT of them are really bad. I went into an interview pass everything with flying color and they ask for how much I'm looking for. 80k, pretty reasonable that's mid level. Their response was we can hire two programmers with that. You mind as well fucking outsource it to China, India, and whatever then. I managed a team of self taught programmers at my last job. It wasn't pretty. But if you have the passion to always improve you'll be good. You can gauge your skill at meetup and talking to those people there. Good luck! edit: no arrays no classes, yeah that's pretty bad. You're missing the fundamental with arrays and you're missing OOP with classes. You should pick up a book.
how u want to become skill developer if u dont want to read book? come on bro, skill dosent come in 1 days...u need a programmer mind set p/s:php is always easy, the hardest things is the database part, complex query will drive u insane pretty fast
From the [Frequently Asked Questions](http://www.reddit.com/r/PHP/wiki/index): [Which PHP framework should I use?](http://www.reddit.com/r/PHP/comments/f39ff/php_frameworks_which_one_do_you_prefer_and_why/) [What are some examples of good code to study?](http://www.reddit.com/r/PHP/comments/a9mio/lets_compile_a_list_of_really_good_oo_php_5_code/) [What are some good sites covering advanced PHP usage?](http://www.reddit.com/r/PHP/comments/a2l4o/i_want_to_be_a_better_programmer_what_are_your/) [What are some good PHP "tricks"?](http://www.reddit.com/r/PHP/comments/9az9f/askphp_what_are_your_favorite_cleancode_tips_and/) I'm not trying to be an ass here. I'm no super-coder or something myself. I'm just trying to point out that there have been similar discussions, and that nobody can really hold your hand. It's a big god damned Internet out there. Go play in it. Get messy. Come back when you want to get clean. Refine your experiences into your skills. It seems like you can't do that right now, and that's why I'm worried for you, not angry at you.
The lack of knowledge of arrays does seem especially odd, given the survey site example. Anyway, there's no need for a "list of really comprehensive websites/free books/online courses" in this case, just 15 minutes absorbing this and trying the examples: http://php.net/manual/en/language.types.array.php
Didn't you read the variables sent through POST with $_POST , which is in itself an array? Or when you fetched info from the database, it can return arrays / objects. So, you did use them.
Don't apply for jobs with clueless HR. What web company has an HR department that doesn't know anything about devs? Huge corporations that's who, you really want to be doing web work for them!?
Good luck ! take the time to take algorithm classes , UML classes and db modelling classes and , very important , read other people's code ! you will learn a lot just by doing that. Using a cms ? read the code. Using a library ? read the code. Try to understand it , extend it , etc ... I'm self taught , and everything i know is because i read other people's code and PHP is fairly easy to read with a good IDE.
I won't hold your hand, but I'll tell you a few things: 1) Just keep programming. You'll do stupid things, but having to do those things should become annoying. This will motivate you to find out how others have solved that problem. 2) Read other people's code. One can argue that since github became a thing, the world is a different place. It's just so painless now to click around and look at code written by more experienced developers. Of course you could always do this, but you'd have to download a tarball from somewhere, open it up, and root around. These days, you can click through stuff in a browser, and then go back in time and see individual changes, which can provide huge insights. 2.5) Following #2, try to start using other people's code, and keep reading it. At your level, find something on the simpler end. You could pick a CMS (wordpress or drupal might be a good place to start*), or a framework (I've heard nice things about laravel), or just a single-purpose library (SwiftMailer comes to mind). Being able to re-use other people's code is hugely important, but when you get deep into it, you need to be able to read that code to use it effectively. 3) Keep programming. Don't get intimidated by stuff you read but don't understand. Don't worry too much about doing it the "right" way. Pick modest goals, and write stuff. Brand-new ideas are always the most exciting, but don't let the absence of a new problem stop you. If you can't think of something new to write, go back and re-write an old client project to apply new lessons learned. Look at fun-related stuff ... if you're a gamer, look at what APIs might be available relating to some game you like, and try to come up with an idea for a neat tool using those. (*) Wordpress and Drupal are both kind of ugly code-bases. But if you're afraid of arrays and basic OOP, they are a viable first-step, that will have some peripheral benefits -- they're very widely used, and people hire based on experience with those particular stacks all the time.
Yep PDO or if you are lazy fire Doctrine DBAL . With the query builder one has to write very little SQL.
register_globals ;-) */shudder*
For some reason I was instantly reminded of this [South Park video.](https://www.youtube.com/watch?v=WW4ZGO_Hi_8&amp;feature=youtu.be&amp;t=6s) 
I know you've said in the OP that you don't need any books but you should really read one from cover to cover. You'll thank yourself later.
sounds like you should get an internship in a company with enterprise level php coders ideally working in some agile environment
I'm mostly a ZF2 guy, and while I'm familiar with S2, and am sure most all of this advice carries over, well... disclaimed. &gt; What I wanted to ask is, what kind of projects to you recommend doing where one of those frameworks could be helpful. It is a bit tricky. I spend most of my time coding a ZF2 project, and I think Symfony2 is rather similar. These frameworks really shine when you have big sets of problems to solve at once. So, doing simple projects with them makes them look stupid, if you've had experience using less-ambitious frameworks like CodeIgniter, Cake, or even something like Laravel (I think, I don't know much about that one in particular). That said, you can learn the essential stuff by doing dumb projects. Build a blog (the essential framework demo project), or a basic CMS. Try to figure out what bits of the framework the developers intended you to use for each task. Then make the application multilingual. Then figure out a way to use the asset-manager to automagically optimize all your javascript and CSS. As you go, you'll find the need to actually read the code of the framework itself. At least for ZF2 and Symfony, it's well worth it. They're both very well engineered. Look at issues and pull-requests on github relating to whatever components you're using -- they provide valuable insight into why things are done the way they are. &gt; What are some good sites to read about zend and symfony besides there own documentation and what is a good way to start into these frameworks? Others have listed a few good resources, but unfortunately, there aren't too many. Symfony and ZF are kind of the 'big boy' frameworks. They are very general purpose, and contain less magic than others. I think that makes it hard for people to write general-purpose, tutorial-type stuff. You're stuck relying on fairly dry official docs, a few blogs that demonstrate some specific features in more details, and reading the code itself. Read whatever you can find, but you'll find the best path towards competency is to just to write stuff, ask specific questions on IRC/StackOverflow/Reddit, and don't get discouraged. Pick a small project that has only a few requirements and do it. Then maybe do it again, except, for example, this time use Doctrine2 instead of ZF2's TableGateway stuff. Finally, don't get too distracted by the size of the frameworks. The big things, in rough top-down order, are: 1. How the framework handles the HTTP request lifecycle. (At least in ZF2, it's actually rather hard to find comprehensive, high-resolution, docs on this) 2. The inversion-of-control mechanisms (Dependency Injection, Service Managers, etc). 3. How the event system works (both frameworks rely on this heavily internally) 4. The sort of stuff controllers do (how to get access to input, the plugin system, etc) 5. How views work. 6. How to talk to a database. 7. How forms work, particularly how the framework helps you move data from forms to/from models. If you have a decent understanding of those things, the rest is pretty basic. You learn about the caching library, or how to do fancy shit in views (helpers, partials), how to break stuff up into reusable modules (or bundles, in Symfony-land).
They need to make a Gordon Ramsey's Web Development Nightmares and have you on it. [Harvard Building Dynamic Websites online class](http://cs75.tv/2010/fall/#l=lectures&amp;r=about&amp;v=lectures/1/lecture1) [Stanford Web Application Development](http://openclassroom.stanford.edu/MainFolder/CoursePage.php?course=WebApplications) You're welcome. But it also sounds like you need confidence, motivation, guidance. I would recommend getting into some general self-help material like Tony Robbins or other goal-setting / motivational / personal development material. Sounds like you're trying to use web dev to get you out of a personal jam, which is not going to be successful. Web dev isn't going to solve your problems in life, it's just a career for those who happen to find pleasure and satisfaction in doing it.
Have you any other ideas about what you might want to do with your career?
I have been a programmer for 7/8 years (nothing) and I think I have a better understanding of OOP than a large majority of the programmers. And even now my code is still fucking horrible. There are very few things I'm proud of.
Not so sure if that is the best idea.. All major CMS's i've worked with have very ugly code, and if you learn by following their example, you will also end up writing ugly bad-quality code.
&gt; Could someone hold my hand and guide me through a list of really comprehensive websites/free books/online courses that'll make me really confident to the point where I won't be nervous and under-estimating myself when I go for an interview as a junior developer? Over-estimating yourself is *what you're doing* (you think you're good enough to work as a programmer even though you're too stupid to fix your own problems), but in your statement you're worried about *under-estimating* yourself. You shouldn't even be considering a career in programming at this point. You don't even have the base skills for a junior position. You know, base skills like reading the language manual which explains things like arrays. As lampdev points out, you can't even see your own shortcomings. You'd get less negative feedback if the post was "I want to learn more about PHP" instead of "I want to learn just enough PHP to seem like I know what I'm doing to worm my way in to someone's business and make the lives of experienced programmers hell".
Give up on coding. Find a better field that you can easily pick up. It sounds like you are struggling some time now. Giving a bs advice won't do any good if you still can't grasp basic concepts like arrays and OO.
If I understand correctly, you didn't make much money with your current business. I would say that you already needed to learn all this stuff. Having the knowledge yourself and not outsourcing is a great way to keep the profits to yourself. Not having the knowledge is the reason why your business is failing! Don't be lazy, learn your stuff and showcase your knowledge. That way you might even turn your business around.
While some things are always useful, those books were published as far back as 2001.
I know; you could've as well run a VM image in vmware. But still, that doesn't do anything to the problem at hand (and the proposed solution to run PHPStorm in your host OS) Chances are, the key combo doesn't get propagated through any virtualization software, be it vmware or virtualbox. Obviously, we have found the problem.
If your finding yourself competing with the worst in the business you need to look at yourself, not them.
This is terrible advice. /u/raddat, stick to your guns, don't be afraid to step out of your comfort zone. Read, read and read some more. Use frameworks! most of the code has been written for you.
You'll need to know far more than the "bare basics" to land an actual programming job.
&gt; So that involved a login system, database, tracking the credits/survey completion, etc. It was poorly programmed, no arrays, no classes (the two areas I lack knowledge in). You made of the mistake of nothing thinking for yourself, which programmers generally hate, instead you just begged and rambled about the industry. Fact is if you are any good you should not have a problem finding work. Also we know you have made stuff for clients that one day one of us will have to fix, well rewrite.
It baffles the mind that someone could be in web-development for 2 years, and not uses arrays or know what they are. 2 years, and they didn't run into this, or think to look into it and find out more. Then wonder why people aren't flocking to do business with you. How could you be so ignorant with 2 years experience, or learn so little in 2 years. 2 years.
Awesome (=
What's wrong with reading a book?
It's the fact that you had been using these things for so long, and hadn't bothered to look these things up. Is it really so hard to google "php array" (obviously you've heard of them, but you didn't bother to investigate it further), get this page: http://php.net/manual/en/language.types.array.php , read the definitions and try the examples. Within 15 minutes of reading and experimenting, you would understand this most basic of concepts. And this didn't occur to you in the 2 years you had been working? The world of computing moves incredibly quickly and you will need to learn how to research and learn by yourself (seriously, the php manual is comprehensive and google is your best friend), because no one is going to hold your hand and point to all the things you need to do (everyone else is trying to keep up too, or trying to get work done). You need to get your shit together before you start competing for a job. People in a workplace are going to expect you to be self sufficient, and from what you've said, you can't get that far (as indicated by your outsourcing), you should be able to do all the basic areas like design, html, css otherwise you won't be able to spot poor quality code and fix it when inevitably comes in. Seriously: go to this page http://www.php.net/manual/en/langref.php read through all the links. It may take you a few weeks to get through to run all the examples and make sure you understand it. But doing this will make sure that you know everything you need to know. So you don't end up slapping a few other features together to achieve something that's already done.
unescaped / in a character string maybe? concat with DIRECTORY_SEPERATOR instead?
Do view the part on tablenames and SQL keywords around the 30 min mark.
New feature: [PHP is now usable in Turkey](https://bugs.php.net/bug.php?id=18556), after eleven hard years of work by the developers. Congratulations.
No need for that closing tag, buddy.
What in particular do you consider retarded? \ and / are valid directory separators in Windows. The dirname algorithm just uses DEFAULT_SLASH when fixing up strings and doesn't concern itself with what directory separator you used elsewhere. If you are wondering about why the trailing '\' instead of returning just 'c:'; The latter is the current working directory on drive C, the trailing slash is required to point to the root directory on C. (See also https://github.com/php/php-src/blob/master/Zend/zend_compile.c#L7156 ) (edit: spelling, words)
 &lt;depends&gt;&lt;?php echo 'Yay!'; ?&gt;&lt;/depends&gt;
Why did it take so long?
 &lt;shortTags&gt;&lt;?="were made for echo's"?&gt;&lt;/shortTags&gt;
Finally! (pun totally intended)
You are right. ..forgive me for I have been living in a sea of javascript lately...
Mainly the fact that it not consistent. If dirname('c:/Temp/x') would've returnded 'c:\Temp' i'd still find it annoying, but then it would at least be consistent with the first example. 
Well, I run my own servers and for clients - so I'll probably be doing "make install" in a few weeks across that stack. Haven't touched shared hosting in years...
There are a few different options ofcourse for it, but mostly they are quite ugly and I haven't found any realtime generating self hosted ones.
Short echo tags are enabled by default since PHP 5.4, but good point on XML headers.
&gt; See how I can handle the error and notify the user of it separately? Except that code in a finally gets run whether or not an exception was thrown. Your example isn't a super valid use case. You'd use finally do something like clean up an open resource or close a db connection -- something that needs to happen on a successful result or if an error was thrown. [From the docs](http://php.net/manual/en/language.exceptions.php): &gt; Code within the finally block will always be executed after the try and catch blocks, regardless of whether an exception has been thrown, and before normal execution resumes. 
PHP 5.6: named parameters (a man can dream).
Forgive my ignorance but what's the difference between putting code in the "else" block, and putting what would have been in the "else" block in the try block below whatever code would have triggered the exception? is it just a code clarity thing?
~~FYI this is not a final release, it's PHP 5.5-RC3 and is not yet ready for production.~~ EDIT: My mistake I guess, this is the final.. I just checked the php.net website and it wasn't announced on there, and I ass-umed.. ;-)
http://git.php.net/?p=php-src.git;a=tag;h=2d8b190d9b63187d38b5b4115c3986d0b8b5e007 
Agreed on all points. The code he cited is poor practice and unintuitive, that is, to have a function named displayerror in the unconditional flow of that script. In other words, consider analyzing this as another programmer tracing the successful case - he has to stop and think why Is an error being displayed? Then he has to dig deeper to see the logic within displayerror contains some hidden conditional that just returns on a null argument. ...and this is how hacky unmaintainable code is written. Lots of little gimmicks like this create real problems later.
It makes it look like the practice of returning error codes instead of throwing exceptions.
I guess the only difference is that in the else block, the code is out of the try scope, so exceptions there would be unhandled or need another handler. Doesn't sound very useful. 
&gt; Added array_column function which returns a column in a multidimensional array. One of these days I'd like to see a native table type with true tabular constraints and multiple indexing and sorting. Using associative arrays as makeshift tables has always felt a little wonky to me.
That's what I heard, but they are not enabled by default on windows installation... Just checked now (on my windows installation, and they were NOT enabled by default) although as far as I can remember, they are were enabled by default on my VM setup that I use for development... a bug maybe? I am using PHP 5.4.16 on my windows machine (without apache, just for some CLI stuff now and then) and the same version on VM Centos. Edit: STUPID ME.... you said Short echo tags, which of course my brain read as: Short open tags... Sorry :)
Sorting multi-dimensional associative arrays can be infuriating sometimes. I'm with you there.
wow, it does sound a lot better than abusing IDEs' hinting and skipping through kilometers of null parameters. Thanks for clearing that out!
What would this structure look like? And what kind of API would it have? Could you prototype something in PHP using objects (which then could be proposed)?
To be fair, it was fixed once and resurfaced in 2006.
There is more to PHP than just Wordpress and Joomla sites. Not everybody has to code for PHP 5.1/2 to run on GoGator/HostDaddy ;-) AWS eventually decided to support PHP 5.4 before Christmas and it's been in most distros for about a year now. Also &lt;?= 'short echo tag' ?&gt; cannot conflict with an XML tag because to the parser &lt;?= and &lt;?xml are distinct, unlike &lt;?xml and &lt;?XML_CONSTANT_HERE when using short open tags.
It runs before the finally. It also isn't part of what we're checking for exceptions, though, or else you could put it in the try. 
&gt;As for obsolete methodologies, I'm still shuddering over the "computer science" grads I've interviewed who told be their primary language was . . .Visual Basic. For Windows 95. In 2013. What kind of crap school do you get your candidates from? A good CS school teach you algorithm, database, data structure...etc.
I think someone just needs to come up with an idea that works... every time I see someone showing an example of how this would work in PHP, wouldn't actually work.. like chrisguitarguy's example below couldn't actually work.
IMO the best thing out of all this is the `::class` for getting class names. Nowadays, between Doctrine and DI containers, that will be so much better: $em-&gt;getRepository('A\Long\Namespace\Entity'); becomes: use A\Long\Namespace\Entity; $em-&gt;getRepository(MyEntity::class); That will enable much more reliable refactoring, auto-completion, and of course, lines will be much shorter!
Replying to myself here, but according to the Python website that documents the "else" construct there, it says: &gt;The use of the else clause is better than adding additional code to the try clause because it avoids accidentally catching an exception that wasn’t raised by the code being protected by the try/except statement. This makes good sense AND provides better code clarity.
And somehow I doubt you are using short tags anyway. You are just like to argue ;-)
So, I might be an ignorant here, but why use functions with many parameters if you can create an object, pass parameters as fields and then fire up a run() method? (I know this design pattern was called something, but I don't remember what)
it kind of depends on the parser, implementation, I would think. IIRC the current implementation of PHP parser isn't as flexible as one would think. especially with using bare words and tokens that are already in use. = wouldn't work well for sure. : might work, or maybe even reuse =&gt; But I'd be more woried about the bar words that you have there... and variables clearly make little sense in this context. And there would probably be a big change in how function arguments are handled at call time. Right now any expression would work there. But you'd still have to handle certain situations which might not be easy. $x = name: expression ... $x should get the value of the expression there? or should it work like: name: $x = expression I am a very huge noob with how PHP works internally. But i'd imagine that at compile time these things would have to be reordered correctly.
I do deployment with Capistrano, but you should also look into Jenkins and/or Phing. I'm discovering it myself too. Deployment on multiple servers is a breeze, once you set it up; easy as "[one](http://i.imgur.com/pmsMzIX.png)" in "one, two, three".
&gt; Windows XP and 2003 support dropped "no longer works", or "you're on your own" which is it? 
Fluent Interface
It is 1. The `finally` block always takes precedence.
I will try out Phing, and I have just installed Jenkins on my development server, so I will try to warm up to that as well. Thanks! If you do not mind me asking, how do you actually deploy your files to your server? As I've said, I currently manually FTP it, but if I were to write a Phing build or Jenkins buildscript, how would I go about automatically deploying my files?
&gt; foo($help=false); They couldn't actually use that notation because it would break existing scripts. That's valid notation to assign a value to a variable and then also pass that value to a function. (Most coders would avoid doing that for style reasons, but it's valid code, and occasionally it's actually a useful technique that's arguably worth using.)
Couldn't you do that just by passing an associative array? I do that occasionally when the function parameters are flexible or not clearly defined. Some would say it isn't as clean looking as whatever notation might be used for actual named parameters, but I think it's easy to use and doesn't require adding any new notation or complexities to the language. 
No longer compiles, I believe.
foo(:help = false) foo(help: = false) etc If the powers that be wanted to, a suitable syntax could be accommodated.
but then your function/method needs to just accept an array, and parse it out on its own. specific type hinting, for example, goes out the window then.
How bout: func($item =&gt; $something); That's almost like an array declaration or foreach construct, where the left part stands for a key. I think it suits this "key-named" paramters feature.
Static methods ... call chaining ... concurrency-safeness ... many reasons.
This is 2013.... Time to upgrade at least... you are holding us back...
Do I have this correct? &lt;? echo 'This is a short open tag'; ?&gt; &lt;?='This is a short echo tag' ?&gt; I've just installed php5-fpm on linux and the latter was not enabled by default.
You cannot call *return* twice in the same function.
Can we get a TL;DR on what's new?
Capistrano (or in my case Capifony) generates a deploy.rb configuration, that holds all the info it needs to: 1. Log into the server(s) via SSH (and do all the steps below) 1. Forward my public key it needs to clone the project from its repository (which is on Github) 1. Clone the project in a new directory 1. Do all the required tasks (update composer dependencies, compile assets, generate classmap, clear cache; you can define your own tasks) 1. Create symlinks to all the shared directories (user uploads, logs, application configuration, etc.) 1. If everything goes with absolutely zero errors, it symlinks the newly generated project directory to the live directory, so you get zero downtime 1. Optionally, deletes old releases This is something that you could probably configure Jenkins to do after it runs the tests, since it's literally one command that does all the things above, once you configure it properly.
Actual arrays have fixed size, though? You can't resize an array after you've defined it - you can only create a new one and append.
This is a very good idea. I am thinking of using Capistrano for something similar, the exceptions being that I cannot do much on the production server (shared web host). The only thing I can really do is a `git push`, so I definitely need to do all testing, compiling assets, etc. on my development server.
tl;dr: http://php.net/archive/2013.php#id2013-06-20-1 Very long; should read: http://php.net/migration55
Great write up. I especially enjoyed the conclusion.
Yes you are correct. But what version exactly? I think the short echo tags were enabled 5.4+
I completely agree. Though, I think your example has a typo. The code should read: use A\Long\Namespace\Entity; $em-&gt;getRepository(Entity::class);
I guess they can stop rioting then.
Pick one and stick with it , that's all ,they are both great. I prefer Symfony because i'm used to it. The symfony doc is awesome by the way.
Set defaults to skip the "else" when you can. Rather than if ( $admin ) { $admin_user = $true; } else { $admin_user = $false; } write: $admin_user = $false; if ( $admin ) { $admin_user = $true; } That way if someone extends the logic block later on with elseif stuff and they forget to set the $admin_user variable, nothing will break. Also try and fail safe, in this case making the default admin_user status set to false.
You can use any database engine that supports in-memory tables. Though if you need the functionality of a db table in your application then you should probably use a db table directly. A table datatype would be more of an abstraction. At its core its just a two dimensional array, but it can moonlight as a columnar table, a pivot table, a simple grid, a math matrix, a bitmap, a bitmask, whatever. It would come with some general-purpose constraining, transformation, aggregation, sorting, etc methods built-in. But the real power for the developer comes from extending it and specializing it. 
Man, that would be nice. I can imagine having an accounting bundle on composer, with automated tests, and framework agnostic. I unfortunately have 0 accounting knowledge - but I would love to help develop it with you. 
I'll mark you down with the other 3 devs who have expressed interest in real life :)
Here: http://php.net/manual/en/book.opcache.php It's odd not to see much made of it in the release notes, though. 
Ahhh cheers - +1 to you - was actually staring me in the face on my URL above - but zero description/comment after it so it was missed by my eyes. :) EDIT: did a compile from source all works great - one thing in the documents, you don't need to pass **--enable-opcache** when configuring your build, it's enabled by default in the PHP 5.5 final. What you do need to do is add the following line to your php.ini to include the compiled Zend extension itself (and of course tweak any other opcode related settings from defaults if needed). Flavour to suit, but this is where the *.so was placed under a build on Ubuntu 12.04LTS. &gt; zend_extension = "/usr/local/lib/php/extensions/no-debug-non-zts-20121212/opcache.so" 
That's pretty much what I do now thanks to the short-hand array notation []: func([$item =&gt; $something]);
That's correct. In our case we have asset compilation (among other things) happen at time of actual deployment into the production environment.
There's a somewhat easier/more useful way of achieving similar functionality. function foo($params) { } Where $params is a key/value pair array. You can then do useful things like checking the length of the argument list, true type checking, etc.
Just want to remind everyone that bcrypt is now built into php using the new [password_hash](http://us2.php.net/manual/en/function.password-hash.php) function. The function also has built in compatibility for future superior hashing algorithms. Also included are [password_verify](http://us2.php.net/manual/en/function.password-verify.php) and [password_needs_rehash](http://us2.php.net/manual/en/function.password-needs-rehash.php). With these function, since PASSWORD_DEFAULT will be updated to use the currently implemented best hash algorithm, you could do a little something like this to keep your password table updated: if(password_verify($userPass,$userPassHash)){ if(password_needs_rehash($userPassHash,PASSWORD_DEFAULT)){ $newHash = password_hash($userPass,PASSWORD_DEFAULT); updateUserPassword($user,$newHash); } doLogin(); }else{ echo "Invalid username/password"; } There's also a [password_compat library](https://github.com/ircmaxell/password_compat) that provides this functionality to PHP &gt;= 5.3.7 OR a version that has the $2y fix backported into it (such as RedHat provides).
Seems strange to me that it would even be *reached* after a return statement in the "try" section. Not saying I don't believe you, just saying that's pretty neat.
The chances someone has been to Google or another site that has referenced code.jquery.com or Microsoft's CDN are a lot higher than the chances that you're the very first website they hit. The only time not using a well-known CDN for public libraries like jQuery makes sense is for intranet applications or you've made custom modifications to the core files.
Bcrypt forces you to use a 22 char salt.
Constant dereferencing will be nice for things like $url = "http://google.com/"; $protocol = explode("://", $url)[0]; And it'll be even more fun when using regex matching with `preg_match()` and friends.
Cheers evert. And keep kicking arse with the sabredav library!
There wasn't any now. But it's a possible mistake to make. In fact it's a very common one. There is no **benefit** to the end ?&gt;, and there's a potential harm. So why use it? "have some knowledge about PHP" is a silly way to suggest people should be literally able to see at a glance that there's a new line character after ?&gt;. It's hardly an intuitive issue, and one that can be easily avoided. That's why it's a best-practice, and that's why it's a code standard, and a requirement in PSR-2. 
That DateTimeImmutable seems to be weird solution to the problem. Wouldn't be better if they added new methods similar to existing ones? Example: for modify() it could be modified() or modifyClone() or modifyNew(). This kind of solutions exists in Ruby or QT and for me seems to be much nicer that introducing whole new class.
Here's a crazy idea; Someplace in the image source, you should use PHP coding to echo the variable in order to display an image that's corresponding to it.
The images need to be dynamically generated.
This has been available since PHP 5.4, the feature added in 5.5 is specifically for **constant** dereferencing, so on things like strings or array literals like he showed in the example.
Which is a shame he deleted the comment because it was hilarious when he told OP to go wash dishes. I lol'd.
Oh damn I didn't realized PHP didn't have class resolution. I'm looking forward to generators!
No support == you're on your own, isn't it ? Don't think they put some `if (WINDOWS_XP_OR_2003) { exit(); }` in sources..
That's the whole point of `finally`: That it is always reached, regardless of the code you have in try and catch. Exceptions: Fatal errors, `die()`, interrupts.
Haha - classic! :D I was a little too quick out of the gates. It's sooo nice to be able to compile both PHP and an opcode cache out of the gates at once - it's the little things :D Keen to give it a good run on a busy site I manage when I get the time to recompile things on the prod server.
It's the single best conclusion I've ever seen.
It looks like www.webzash.org is what you're looking to do? However like the SF Conservancy website mentions, it might not be geared towards Non-Profits. With that in mind it might be better to fork or contribute to make it Non-Profit-friendly if that were the case? It uses PHP &amp; CodeIgniter &amp; is on github @ https://github.com/prashants/webzash 
So it doesn't compile on XP, but it runs on it?
How about commenting only when you know and not guessing? Nothing bad in not knowing, but if you are not sure, just don't. There is no need to escape slashes in strings.
We use Jenkins among other little utilities to test and build before running a little rsync script to push files out to servers. This is a really helpful plugin to visualise your deployment workflow in Jenkins: [https://wiki.jenkins-ci.org/display/JENKINS/Build+Pipeline+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Build+Pipeline+Plugin) This also makes rollingback to a previous release a 1 click job. Although in 18 months I think we've managed rolledback once. Mainly due to the fact it's so quick and easy to do write a quick fix and just push it out again :) Our final job in the pipeline is a simple bash script which automatically takes half of our webnodes out of the load balance loop, updates them and reinstates them before moving onto the second half of servers; ensuring that we only have 1 codebase live at a time as we don't use stick sessions. Hope that's of use/interest :)
You are on your own.
You are correct, /* Strip slashes which came before the file name */ while (end &gt;= path &amp;&amp; IS_SLASH_P(end)) { end--; } if (end &lt; path) { path[0] = DEFAULT_SLASH; // &lt;--- here you go path[1] = '\0'; return 1 + len_adjust; } Note the win32 ifdef earlier in the function where it skips over '[alpha]:' so path[0] is the next char.
Not using your current MD5 hashes. What you need to do is create a new password column. When a user attempts to login check them against this new column using your new algorithm, if it passes let them in. If it does not check if they have a password in the old column. If they do check if it passes against that column using the old algorithm. If it does you now have a copy of their password in plaintext, use this to update the new password column using the new algorithm. Delete the old password and let the user in. After a while your active users will all be using your new secure algorithm, inactive users will be on the old one. How you deal with this depends on what your business model / website is doing. I would give the inactive users random secure passwords and flag their account. Next time they attempt to login notify them their password was changed for security reasons and they need to recover their password (which should allow them to choose a new password).
Use the md5 as input for the new scheme, but flag the pwd. When a user logs in, check the flag and, if set, md5 the user's password before passing it to the new scheme and comparison. If the user provided the correct pwd, use the raw pwd in the new scheme and update the hash. Don't forget to remove the flag. Many systems use a prefix on the hash to indicate its type (search for portable hashes). edit: added omitted 'if set' clause on flag use.
Aw thanks man :)
There are a few ways of doing this, sure. One way is to either keep a flag in your database table, or simply look at the password hash's format to discern what hashing mechanism is used for it. Upon login you then re-hash the password using the new hashing mechanism. After a while, you seed out the old hashing mechanism completely and simply delete the accounts which haven't logged in within that time period, as the accounts wouldn't be active anyway. This allows you to organically rehash your database. The other way is to simply use your existing hash and then re-hash it using the new hashing mechanism. This means that you'll have to loop through all the records in your database table and update all of them. You need to be smart when doing this, though, otherwise you might potentially create service disruptions for some users. If you're simply switching over to the new system and start converting the database, then during that conversion period, the users which haven't yet had their password converted to work with the new hashing system won't be able to access their accounts. Again, you could leverage both hashing methods to get around this issue.
generator is rock. Do not forget about the note: *"A generator cannot return a value: doing so will result in a compile error. An empty return statement is valid syntax within a generator and it will terminate the generator."*
Or more simply: some_func('foo', , 'bar');
I recommend you switch from APC to Memcache: http://memcached.org The PHP API is pretty good too: http://php.net/manual/en/book.memcache.php (of course, it is even better if you use a wrapper such as ZF Memcache component). It is a dedicated daemon which means you can share the cache between scripts, can be cleaned much easily and has some damn good performance.
This is a false dichotomy. You can still ~~upgrade~~ protect their passwords with the new scheme with only a little bit more work. This also closes the ~~update~~ vulnerability window in your proposal. See http://www.reddit.com/r/PHP/comments/1gsaz4/used_md5_but_now_is_it_possible_to_rehash_in_any/canazkv for an approach.
Yup. It seems like such a simple concept but so many people don't really get it. The existance of the key word "interface" (as it exists in PHP, C#, Java, and probably others I'm forgetting) should really hammer home what an integral part of any OOP language this is.
This is definitely the right thing to do in some situations, however there are a couple of disadvantages with this suggestion compared with named parameters: 1. You have to have planned on having $params be an array from the start. It's easy to create a method that you think will only ever need one or two parameters and then later, after the code is in production need to add more. Named parameters make it easier without a big refactor. 2. What if you are using a 3rd party library or native PHP function that wasn't written to use an array in this way? Named parameters would still work. 3. Named parameters will be friendlier to use with PHP DockBlocks and resulting auto-generated documentation / IDE type hinting 4. Less boiler plate needed for each method. Compare these two examples: With named parameters: class Square { /** * @param int $height height of square. * @param int $width width of square. * @param string $color color of square. * @param int $opacity opacity of the square * @param int $borderWidth width of square's border. * @param string $borderColor color of squares border. */ public function __constructor($height, $width, $color='#fff', $opacity=1, $borderWidth=null, $borderColor='#000') { // Do something with parameters } } $s = new Square(100, 100, borderWidth=&gt;1); Same functionality, but using arrays to simulated named parameters: class Square { /** * * @param mixed $params parameters for building a square: * =&gt; height (int) height of square. * =&gt; width (int) width of square. * =&gt; color (string) color of square. * =&gt; opacity (int) opacity of square. * =&gt; borderWidth (int ) width of square's border. * =&gt; borderColor (string) color of squares border. */ public function __constructor($userParams) { if (!isset($userParams['height'])) { throw new Exception('Hieght is a required parameter'); } if (!isset($userParams['width'])) { throw new Exception('Width is a required parameter'); } $availibleParams = array('height', 'width', 'color', 'opacity', 'borderWidth', 'borderColor'); for ($key, $val in $userParams) { if (!in_array($key, $availibleParams)) { throw new Exception('Unexpected parameter ' . $key . ' passed to this method'); } } $params = array('color' =&gt; '#fff', 'borderWidth' =&gt; null, 'opacity' =&gt; '1', 'borderColor' =&gt; '#000'); array_merge($params, $userParams); // Do something with parameters } } $s = new Square(array('height' =&gt; 100, 'width' =&gt; 100, 'borderWidth'=&gt;1)); As you can see, a lot more code just to get to the same place. Additionally, in the second example, if I wanted to change the name of a parameter such as "width" or "opacity" I'd have to be sure to change it both places in the code.
Please note that APCu is still in beta for now.
5.5 features looks nice. PHP may start losing it's image as the bastard child of programming languages.
Other than that why switch to memcache? APC seems to get half assed updates. Last 'stable' release was 3.1.9 in May 2011. Last 'beta' release was a solid 9 months ago. IMO it's stable enough at version .13 but WTF is going on with that extension?
Sure, that's a good solution. What happens when you need to do it again, and then again? How many algorithms you going to end up running over a password just to check if it's valid or not? What do you do when libraries change and become deprecated but you still have to support every algorithm? I'm not suggesting my solution is perfect, rather that there are pro's and con's to whichever way you do it so the choice may simply be a personal preference.
No. The last major commit before that was something like 6 months. I'm guessing there's a "public" repo and an internal repo. Or something silly like that. There are some pretty nifty features in M2, so I'd be very, *very* surprised if they tanked the project.
Eh, APC is effectively dead. The opcache is built in to the language and there are better options for user land cache. I doubt we'll see any further updates to it.
please dont use md5 for passwords, look into bcrypt, its (technically) easy to just check whether either bcrypt of given password or bcrypt of the md5 of given password matches, so transition shouldnt be too bother some
You should use [APCu](http://pecl.php.net/package/APCu) which is just the user cache part of APC (and is API-compatible with APC itself). The switch from APC to opcache+APCu should be seamless. The recommendation by other people here to switch to memcache may sometimes be reasonable, but be sure to understand that memcache and APC have completely different usage scenarios and are not in the least interchangeable. To characterize them concisely: APC is fast, whereas memcache is distributed.
+1 and YAC todo list is: &gt; Windows support &gt; &gt; Test in real life applications So I guess YAC is out *for now* too
I can understand why people wouldn't work on an extension that was doomed to die for PHP 5.5
&gt; Memcache is much more efficient Not necessarily. Depending on your scalability needs, distributed and user land caching both have important uses in your software stack. Once you get around 50-100,000 concurrent users, you will start to run out of sockets when employing a memcache cluster if you are storing global key/vals. Since every/most requests need to fetch that certain global key(s), one or more of your memcache servers will become "hot" due to the fact that the hash is stored on one or a couple of your servers. This can be solved by employing user land caching via something like apc/xcache in front of your memcache request, and microcaching the key for under 5 seconds or so. You'd then only get one hit to memcache per application server every few seconds. 
And this is why you store Memcache on each node, not centralized. The idea is to minimize the network traffic, not to multiply it.
One good reason to develop for memcache rather than a memory cache like APCu is that APCu isn't shared between servers. Granted, if you know your app will never get sharded, theres no issue.
Not sure. Any suggestions? I like this list of potential projects: http://www.dreamincode.net/forums/topic/78802-martyr2s-mega-project-ideas-list/
The sharing of cache between servers is not always a good idea - it depends very much on the use case. Often it is more costly to have more network traffic than to store the cache on each server. However, having the cache stored in a different application from your PHP script can have a lot of advantages when it comes to benchmarks (and stability in case of memory issues - memory leaks for example). There are also some very cool toys to see the performance of Memcache (memory used, Hit &amp; Miss Rate and so on) - check out phpMemcachedAdmin for example. Of course, there is always the disadvantage that you need a separate application to run, but seriously, do you find this hard: chkconfig memcached on; service memcached start?
Hey, thanks for your input. Really gives me an idea now. So will this be good? When users login, I can check if it's in the new column. If not, I can use their plain text and hash it in the database (update the existing password column). It sounds decent to me, what do you think? And upvoted :) thanks again
Wow, didn't think of it. Thanks HiddenIncome! :)
Thanks, will consider this! :)
Yeah, didn't know it before when I implemented. Thankfully, the site isn't online for a while, so it's all good so I can make the changes :)
I don't know a lot of CRM tools, apart from SugarCRM, but as I work at a French Web and Open source agency (TALCOD), I do know well CiviCRM. Customers are quite satisfied with the management tools we build and base on it, so it could be a great tool to suggest you. 
You'll actually see many hashing output formats include identifiers to say what the hash is. For instance, with PHP, a proper bcrypt hash will start with `$2y$`. So as long as your password column is long enough to hold either hash, you can query the password column and see if it starts with `$2y$`; if not, check against the md5, and then redo the hash in bcrypt.
You bring up a fair point and one I completely agree with. At work we use both local cache via APC (php 5.4) and memcached. And both for different use cases. Also, we do use phpMemcachedAdmin, but at this point we aren't even close to needing to worry about it's performance. We need to implement caching more widely first. We also use Redis for queues right now, though were looking at making a switch to something like ZeroMQ
There is absolutely no need to do what others are suggesting and wait for users to log in to the site to update their password security. Otherwise you are keeping a bunch of insecure hashes in the database. Just the the md5 hash as the new "password" and bcrypt it. So when a user registers, you simply do (pseusocode) `bcrypt(md5($password))` and store that in a new column. Then you can delete the old md5 column. When users log in, you simply md5 the password then pass that to the bcrypting function to test it against the hash in the database.
Like I said, I usually have other plugins so I bundle the jQuery with that to avoid extra HTTP requests. Plus no extra DNS lookups required. And I don't think the chances of a specific version of jQuery being cached on the user's machine are that much higher. IIRC the article I read said 1.2.7 and 1.4.2 were the most common versions cached by users.
Love that I get weekly topics of interest in my inbox. One suggestion though: More depth. For example, the "Create Your Own Captcha in PHP" link this week is a copy-and-paste article. If I'm on a project that needs CAPTCHA ASAP, copy-and-paste is fine, but I assumed this newsletter would be a way to improve skills and learn. I just searched for "creating captcha in php" in Google, and while that link is on the first page, every other link explains what their code does or how a CAPTCHA works.
do not use md5. rainbow tables make it useless. sha1 also has a major flaw. you can hash passwords with the password() function of mysql, or use some of the new php hash functions, that got implemented in php 5.5 :) also, do not store just hashed passwords. always salt them with random salts to add some "weight" to them. (basically, the hacker has to crack a long word rather than a small password)
Not quite. You would still need to verify it against the md5 hash. Otherwise someone could come in and take over accounts by hoping they haven't logged in since you added the new column. Verify the new column is blank. Verify the plain text hashed equal the existing md5. Hash the plain text and store in new secure column.
I think memcache is only appropriate if you have multiple app servers that ideally share cache. Otherwise apc is simpler to implement and I believe faster. Zend framework cache backend/adapter (depending on ZF version) allows you to switch between file system, apc, memcached, database and others. http://framework.zend.com/manual/1.12/en/zend.cache.backends.html and http://framework.zend.com/manual/2.2/en/modules/zend.cache.storage.adapter.html So you can start out with apc and switch to memcached if you need to. Also there are some redis (my personal favorite!) modules around too: http://framework.zend.com/wiki/display/ZFPROP/Zend_Cache_Backend_Redis 
Also it's the Kernighan and Ritchie C standard. Functions, however, are defined with the { on the next line.
As far as I know (and I'm not a Windows guy, so grain of salt time), 5.5 won't compile or run, as it depends on functions that aren't available pre-Vista.
encrypting != hashing
What type of accounting do you want to do? GL, or something more esoteric? I have no formal accounting experience, but have implemented and designed accounting modules from spec several times, and could probably help in this regard...
you're right. i will correct that.
I thought php-fpm could share APC cache across the server pool ? ... is that not possible with APCu ?
Try putting your settings in environment variables
If it can I've never seen the configuration for it.
Or you could just use a Linux VM like a true programmer :)
Both. By dropping support they just don't run the tests or worry about fixing anything that could break support. I'd say it probably wont work, but it could be definitely.
I do something similar. I made a migration that will bcrypt(md5_password) so they're all bcrypt now, but when I log in it has to do two checks. if (bcrypt(password)) { login() } else bcrypt(md5(password)) { update_password(password); login(); } Then over time my database is getting closer and closer to having all secure passwords which only need one conversion. I don't want to be md5()ing everything forever, but either do the trick.
finally is guaranteed to be executed after everything in the try and catch blocks. If an exception is thrown that's not explicitly caught, finally will still execute... basically.
At my prior employment I spent almost 2 years doing codeigniter development &amp; refuse to go back to it if I have a choice.
Looking through this I might be able to use some of the principles &amp; the demo to help understand some of the accounting principles, thanks!
"As some of you may know, I’m crazy about speed." well you might not want to use Php then... sorry but the plateform is one of the slowest ever , especially when used with a framework http://www.techempower.com/benchmarks/ And frankly , is there a big different between big bloated stuffs like Symfony or Zend and Java Entreprise frameworks that will be 100% faster ? i dont think so. If you can run Symfony in production on Amazon or a VPS you can run any Java Solution as well. 
Nothing wrong with programming on Windows. MS poured a lot of work into getting PHP to be simple to use on newer versions of Window. PHP + IIS 7.5+ are an accepted way to develop (*AMP stacks like WAMP and XAMPP suck though). 
Go through the docs , Symfony has awesome docs, I dont really understand what your problem is. Did you read the doc and finish Symfony 2 basic tutorial in the docs ? then you should have a fully working project. It is not about being for big projects or small projects ,it is about setting a lot of conventions you need to learn in order to make the framework work. If you cant take the time to learn all these conventions , dont bother , go with a Microframework like Slim or Silex for instance ,where you can put all your code in just 1 file. That's not really the point of Symfony or Zend. With these frameworks you'll have to learn a big api , and a lot of conventions. Furthermore the only file you should have in your public folder is the "index" file. all the rest should be in non public folders.
I have been using it in 5.3 thanks to the backport: https://github.com/ircmaxell/password_compat . What I like is that if you use the PASSWORD_DEFAULT option, you can make you app proactive and on user login check the if the password needs a new hash (if the PASSWORD_DEFAULT algo has changed) by using password_needs_rehash(). 
/u/ircmaxell, the implementer of the API, explained the history of that in this comment: http://www.reddit.com/r/PHP/comments/zrprk/the_new_secure_password_hashing_api_in_php_55/c677yu2
*Probably* can't submit his articles anymore. It's against the rules to submit your own content. See [Don't Spam](http://www.reddit.com/rules) "NOT OK: Submitting only links to your blog or personal website."
For a smaller project, you *could* be better off without Laravel or Symfony. Try a micro-framework, like [Silex](http://silex.sensiolabs.org/). There is nothing preventing you from using them in a small project, and I'm sure any problem you stumble upon can be fixed. So there are not only for big projects. But a micro framework can be more appropriate for a small project.
The features are so nice though. At least the database, routing, and HMVC design all are. My main concern is that by using a lighter framework *now*, I'll be limiting myself in the future. The client I'm working for right now has a lot of bigger projects coming up, but for now has smaller ones he needs done - so I'm torn. Anyways, I'll take a look. Thanks for the suggestions (You, and the others who replied)
If you think it is going to expand go ahead and use laravel. Even if it doesn't it will still be fun to do and work well. Remember, while some may say laravel isn't lightweight - its only 25 or 30 mb at install, it's not going to slow anything down.
The best example I've seen is from [nikic](http://nikic.github.io/2012/07/10/What-PHP-5-5-might-look-like.html): function randomBool() { return [false, true][mt_rand(0, 1)]; } Though I suppose this will be useful any time you end up creating a one-off array that's only used when it's dereferenced in the next line, e.g. $planets = ['Mercury', 'Venus', 'Earth', 'Mars']; echo $planets[$p_no]; becomes echo ['Mercury', 'Venus', 'Earth', 'Mars'][$p_no]; It won't unlock any super powers, but it's a win for clarity, conciseness, and consistency.
That looks cool, it's not default Capistrano right? Is any of the code shareable? 
You need to setup a build server and have it handle your deployments for you. When you deploy from the build server you get the advantage of a failing build never making it out to production. * Setup a build (Jenkins) machine and have it listen to changes on a remote repository. When you push to Github, Jenkins will notice and run PHPUnit for you, I like to create a few jobs in Jenkins * **Stable build** Runs the tests from the develop branch, if they pass then it pushes the code to a stable branch * **Deploy to staging** - Checkout the stable branch and push it to the staging server, this could be via Cap, Phing or generating artefacts (ie, a zip). Steps 5 onwards in your post would be deployment problems. I've been a developer for a number of years and setting up a build server is no easy task. My advice would be to download the software and have a play with it. PS. I'd checkout Teamcity (it'll be free) as an alternative to Jenkins. It's got a better interface and might be easier to pickup.
I'm curious as to why you'd want to shift from Redis to ZeroMQ. I'm currently using Redis as a counter and queueing system and I like the fact that there's a persistence layer in Redis. What benefits would ZeroMQ bring to the table?
I've done exactly this. Then for your production values it's $_ENV['mysql_user'] or whatever.
It shares across php worker processes on the same machine, but not across different machines in the cluster.
Well put - APC(u) and Memcached are inline with regards to them both being a persistent key/value store - from that point in their appropriate usage is going to vary depending on your applications requirements. Memcached certainly isn't a "drop in" replacement to existing APC(u) PHP code. Having said that if I was building something new that requires key/value caching/storage I would be looking to either Redis/Memcached over APC (more likely Redis). If both PHP/Redis processes are going to live on the same box in production you can use Redis over a socket (rather than TCP - memcached from what I know can run over a Unix socket too) which will reduce some communication overhead.
I'm not saying it's wrong to develop on Windows. I'm saying it's wrong to test your code in an environment and then use that code in a totally different one. It's acceptable to develop on Windows (if you prefer it), but the environments in which you test the code and in which you'll use it should be the same, hence using a Virtual Machine with (probably) Linux if the production environment is that.
This depends on a lot of things, first and foremost portability should be a business decision and not a "wild card" decision from a cowboy developer to get extra cookie points from the product managers. Why would you invest resources to support a platform when you know for sure the code won't be used on that platform ever? Secondly, a many of us developers forgot (or not even know in the first place) what is like to be a programmer. A lot of devs. are fixated on frameworks, like it's the holy grail of PHP programming. Well, it's not and it shouldn't be. A PHP application shouldn't be about model-view-controllers, symfony, zend, laravel, etc. It should be, well you guessed it, about the application. If you're making you architectural and software decisions based on a framework, then you're doing it wrong from the get-go. An application should be about the problem it's solving. So if you're developing an application for helping sick puppies, then you're code-base should be talking about those poor little fellows, and NOT about how to pass data from the model to the view. Let the lower layers of your app. worry about those stuff. 
Can you post a link to where this is being used?
That's really easy to find reading the server name he connects its database. Let me give you an advice installgentoonet, whenever you post production code, be sure to remove any references to your site, and any sensitive data as passwords and usernames. The simple act of posting this code here is telling everybody a lot of critical information of your database. Don't do this. NEVER.
The code is only 23 lines long. Other than the two things you are excluding in your post description, it leaves a couple of IF statements and die statements. I'm not sure why you would present code with only these bad practices and then tell us to ignore them. What I'm saying is, those if and die statements are unexploitable. It's the user data -&gt; DB problem I'd be worried about.
PHP accepts `'` in emails with `FILTER_VALIDATE_EMAIL`. It's very likely that SQL injection is possible when you insert an unquoted email. PDO and prepared statements are not a miracle solution against SQL injection, but they are a excellent first step. It seems PHP's ext/mssql doesn't have a function for prepared statements, and even no quoting function! So the only secure way with mssql seems to be: use a stored procedure for each query with user input. Not very realistic, better use PDO.
Try phpstorm. It's the best php IDE.
According to the GAE issue, at least 137 people use Phalcon (single "n") and want to see it deployed on an environment as colossal as GAE. The API and demo documentation is excellent, albeit grammatically incorrect at times - this is something the part of the community with native and near native English are working on.
I stand corrected. The last time I checked out Phalcon the docs were very bad but now they seem to be much improved. I must admit that it is surprising how many people are starring this issue on gae, perhaps I should take another look at this extension
I've used it extensively in two very large commercial projects that are nearing completion, and I honestly can't see myself going back to any other framework. After years of professional Zend work, Phalcon is a refreshment both performance and development-wise. You really should give it another go.
You are welcome to come to my office and setup linux with my 4 screens :) (have tried so many times, still no luck) &gt; it's wrong to test your code in an environment and then use that code in a totally different one. Have you ever heard of Continuous integration, integration environments, test environment? I'm not pushing in production directly from my windows machine...
I love your sense of priorities :) How about "Test in real life applications"? Not a problem for you?
 preg_replace("/[^a-zA-Z\d ]/", "", $_POST['password']) != $_POST['password'] (line 10) Limiting password characters and combinations is **a very bad thing to do**. You probably want every possible character that can be typed in with a keyboard to be valid in a password. I'd not even check passwords for chars you don't want, since it isn't important what people use. Other than that, I'd use some form of password encryption (there is a thread on reddit pointing to [this](http://www.jcurcio.com/posts/creating-and-verifying-hashes-in-php-the-easy-way/) site that may help, otherwise google for 'php password hashing'), and, if you don't want to use PDO as suggested here already, I'd use [mysql_real_escape_string](http://php.net/mysql_real_escape_string) at the very least to prevent SQL-injection.
My issue is more with the fact that the *AMP stack apps seem to always have weird issues that don't crop when running straight apache or on Linux. Good code should run anywhere though.
Your comment though said that OP should use a Linux VM like a real programmer. You are correct in that testing should happen on machines that are similar, but dev work should be able to be done anywhere.
Never reply when you are angry, no need for insults :) caknuckle realized he spoke out of turn before checking it out, and corrected himself later on. Most people who try Phalcon won't be going back, it's just a matter of spreading the word now.
At least make sure your knowledge of something is up to date before deriding it.
I tried getting in to Phalcon, but at version 1.1.0 just having been released, the tutorials had not been updated since 0.6.0 As a result, the toolkit generation commands presented things that were no longer what the tutorial described you should be getting. And the English verbal and grammar errors in the documentation are preventing me from fully understanding what exactly it is they mean by certain things.
If you're using Pagodabox, they have built in environment variables for database connections. http://help.pagodabox.com/customer/portal/articles/175470-environment-variables#auto-created_environment_variables
While this is very good advice, I think it never hurts to reject control characters. 
Exactly, always check what a FILTER_* actually filters out.
While control characters are something you'd normally not find in a password (because it's kind of hard to type them in a text/password field), I wouldn't do this either. If you handle your data well, meaning you use proper hashing and storing of variables, there is no need to reject anything. While stored as a string, even control characters are just some bytes in your memory; problems only arise when you 'execute' these bytes (in these terms, running them in your SQL-query, or even worse: using them inside some eval statement or as variable variable (the $$ thingies)). Since hashing replaces control characters with 'normal' characters, it shouldn't be a problem (proper hashing is done as a binary operation, therefore it's safe to do on any data). I guess the bottom-line is you can strip control characters out, but when handling your variables properly it doesn't really matter. It's not something I would do, but it's not necessarily bad either since normal people don't use control characters in their passwords.
Wow, never heard of Phalcon. I'm Surprised it ( or atleast the concept of extension based frameworks ) isn't more popular. Will have to check it out. 
Is it exclusively for PHP, because I do PHP, HTML, CSS, JS, XML, and .htaccess work all the time, and Komodo Edit handles them all flawlessly. It also handles .ini and other config files really well. I'll still check it out, but it needs to handle those well.
The issue with extension-based frameworks is that they need to be installed as part of the server, and many providers won't install them. That means that only people who can install and manage the server will be able to use it. 
Just ignore database.php and have something like database.php.default doesn't undermine any development work flow. I am not a fan of using $_ENV because I feel like you're abusing the purpose of it doing it that way but if that works for you so be it. None of the major frameworks that I am aware of touch $_ENV for storing configuration variables like this either.
I'd like to hear from folks for whom a PECL framework fills a practical vs. perceived/arbitrary performance need, i.e. you optimized all you could and found that the non-native framework was what was holding you back most. I love the concept of a PECL framework in the same way I love the concept of a $200,000 sports car - awesome benchmarks, unparalleled performance in its class, but hard to argue practicality/necessity. Most of the slowness many apps encounter is related to external resources: DB, web services calls, etc. and caching is much lower hanging fruit to pick. So who's using this, and is it because you needed it, or just had a single-minded goal of speed? In any case, I voted yes, options are always good. 
I have an old laptop I do some development work on. I certainly don't use windows anything for production!
As someone in the UK who got his first job as a PHP developer at 15... No, you 100% do not need a degree to be a PHP developer. Just become one. Start charging people. Use itjobswatch.co.uk and look at contract rates to figure out how much you should charge people. But I DID decide to go to university (at 18, I'm now 21), because I think it's a really important life experience, and the social side is something not to miss out on. And I love it. People that say that university are the best years of your life are not fucking around, it really is. So keep that in mind, it's not a one-or-the-other choice.
http://www.phptherightway.com/#code_style_guide
Great link! Thanks!
Agree with the above. https://github.com/php-fig/fig-standards/tree/master/accepted Same thing really but just another resource. 
For APC being so widely adopted and touted as an absolute must to run in your PHP app stack, this abandonment worries me. EDIT: So are there no stable opcode cache options for 5.4? Or is Zend Opcache what 5.4 users should be on?
The fig standard is now the way to go. Until recently, many projects and companies used the PEAR standard http://pear.php.net/manual/en/standards.php
http://www.learnpython.org/
Noobs won't know you're being sarcastic. Replies like this just perpetuate the problem.
ask you question on stackoverflow.com
We don't know what's `$ftp_directory` is, but `$ftp_username` probably doesn't have permission to view it.
I would hazard a guess that the ftp user has been 'jailed' by chroot in the ftp configuration. [chroot on Wikipedia](https://en.wikipedia.org/wiki/Chroot) [chroot man](http://unixhelp.ed.ac.uk/CGI/man-cgi?chroot+2) [ftp config](https://security.appspot.com/vsftpd/vsftpd_conf.html)
I haven't used the FTP extension in a while, but if the result of `var_dump(ftp_chdir(....))` is false, then it's likely it means that the FTP user you're logged in as doesn't have permission to read that directory (on the FTP site). Also, given that /r/php is mainly for news and discussion you might consider that there are less subscribers to /r/phphelp because they don't want to see questions. Please see the sidebar as well. You're better off using a proper q+a site for non-open-ended questions like these - i.e. [StackOverflow](http://stackoverflow.com)
This is 238% unhelpful and you are definitely in the wrong subreddit. 
instead of poluting that subreddit you should have posted your question at the appropriate place. Which is definetly not here.
It should be noted that this is the guy who was surprised people still use Vim with all the 'modern alternatives.' With that said, I love me some Python as much as the next guy, but you need some filters on the stuff you post. Did it ever occur to you that people may get work done in PHP AND Python and just want to know what the standards are for each? 
I don't own "iPlayWarZ", it was just a placeholder.
Huh. I've always put my opening brace on the same line as a declaration. Putting it on a new line just feels wrong.
Although I agree with PSR-0 and PSR-1, I don't understand how they can require utterly retarded shit like spaces instead of tabs and newlines for braces in PSR-2, that shit should be 100% programmer or company specific.
Aren't you confusing it with Yaf's(Yet another framework) docs?(also a php extension/compiled framework) I remember those as being in "chinglish" as you put it. 
Yeah, some guy was posting code here a few months ago in /r/PHP that was awful. He got chastised for it. But it also clearly indicated where it was hosted. I saw the site the next day and there was a announcement claiming they had been hacked the previous day and reset all their passwords. I'm guessing someone from Reddit that saw the post did it.