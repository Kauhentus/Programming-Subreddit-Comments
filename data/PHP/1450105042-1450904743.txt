WUT?
WTF? LOL… move along kids, you won't learn anything from this.
http://php.net/manual/en/function.password-needs-rehash.php &gt; As mentioned on the Password Hashing Predefined Constants and password_hash pages, the algorithm used by PASSWORD_DEFAULT is subject to change as different versions of PHP are released. &gt; Additionally password_needs_rehash would be used if you have changed the optional cost or static salt (DO NOT USE A STATIC SALT) requirements of your password_hash options.
Maybe we could have both, FSRs and PSRs … the FSRs for interop where the same goal is to be reached with same requirements and it's just a matter of API design, while there may be room for different approaches for different needs. And the PSRs for general ubiquitous standards (like e.g. PSR-0, PSR-3, PSR-4, future security related PSRs, ...) and interfaces which are really generally applicable (like the logger). That would make much clearer what the target audience is and how the PSRs are expected to be used. 
Did you mean to submit this to /r/programmerhumor?
Not asking for FIG member opinions in this thread, only those of non-voting members. Have updated the topic with that in mind.
`array_key_exists($word, $wordsFound) ?` Does the `$word` exist in `$wordsFound`? (it even has a question mark indicating this is a question/conditional. `$wordsFound[$word] += count($matches)` If it does, ADD the matches. Also self explanatory `: $wordsFound[$word] = count($matches);` If not, then initialize the counter for this specific word. I don't see how simple ternary statements can't be read like a normal sentence. Outside of nesting. `Question?ThenAnswer:ElseOtherAnswer` seems fairly straightforward. Plus reading it like a sentence is easier for me to absorb than Condition {chunk of whitespace or bracketing} ThenAnswer {bracketing} else {bracketing} OtherAnswer {bracketing} It's like reading a novel where there is a random newline every few words. Not to say that means to remove all verbose coding, else it'd be like reading a novel as a run-on sentence. But I still feel that a ternary statement can in fact be easily readable, and offers a more concise way to say the same thing. Using it with a hint of common sense, rather than "cleverness". I wouldn't attempt, if it was possible, to stuff multi-line statements in a single ternary. Nor would I advise nested ternary statements. But for simple questions with simple answers, like the example, it should be clear and easy to use and understand.
Nohow.
Are there any examples of high traffic sites built with laravel which deals with a lot of database usage (um grabbing &amp; using lots of data on individual pages for example themeforest.net lots of data gets pulled)?
Your `password_needs_rehash` call is missing the `PASSWORD_DEFAULT` argument.
That's just disappointing, though I imagine it's specifically mentioned on the curriculum for that class. 2 years ago I still had to do html on paper by hand for an exam because the exam requires it. 
I don't do CS I do mediadevelopment in the netherlands but yeah I get your point :/ Tbh I learn more by learning things in my own time
Don't start a new project using Php. in 2015. Refer /r/lolphp for thousands of reasons.
It's against "ideal practice" not against "best practice" since you can always create your own queuing system. Create a job queue table that stores the queued jobs. The job processors will cycle through the table processing what needs to be processed. You need to handle how to address race conditions as well as stalled/terminated processors so some form of observer is required to handle that. I had to deal with this recently myself and was additionally restricted to 5.2 so what I eventually did was build a daemon that would fork off child workers to process their relevant jobs via [pcntl](http://php.net/pcntl_fork). If a child process died unexpectedly, it would wait a period of time and retry the worker. If the child process succeeded, that child process would clean up the relevant queue parts itself. The parent process would manage all PIDs and make sure nothing stalled and handle processing timings. Since it's so easy to lock up a parent when using pcntl, I used an alarm clock child process that would only sleep a specific time period then exit to make sure everything would properly cycle regularly. Regardless of what you eventually decide doing, try to avoid using lock files as a means of race-condition avoidance; it's almost all bad news when you're using lock files because you'll eventually have to manually clean them up at some point after wondering for a long time why something stopped working.
Has anyone successfully done anything with PSR-7 yet? Open source example(s) of working apps/usage. Quite curious.
Are you seriously telling me that you think it is a good thing to show a blank page or worse, your stacktrace to the user because "php is good at handling errors"? Unless you do something to handle your exception, it goes to the user in php. "Unhandled exceptions" it calls it. So here is what you'll do for a website (which is what? 95% of php usage): you have one access point, usually some index.php or bootstrap.php or whatever your framework uses. This is like your main function in C. In this file you'll do a try which will catch different type of errors to handle the different problems. Database down =&gt; show a cached version of the page. Filesystem down? Send a 500 error. Die gracefully instead of insulting your user and losing a good percentage. I don't know what the fuck you're used to code with but it sure must be bad. Do you just crash your C app when a fopen fails? Or just let your java app die sending a full stacktrace? Always a good user experience.
that code sucks. why not just use if, elseif, else 
Noted.
I just recently got back into PHP after a several year hiatus, so maybe I'm missing something. But I've been toying with [PSR7-Middlewares](https://github.com/oscarotero/psr7-middlewares) and [Slim Framework V3](http://www.slimframework.com/). It's disgustingly easy to get working! &lt;?php require_once("config.php"); require_once(__DIR__ . '/../vendor/autoload.php'); use Psr7Middlewares\Middleware; $c = new \Slim\Container(); $app = new \Slim\App($c); /* add middleware */ $app-&gt;add(Middleware::responseTime()); $app-&gt;add(Middleware::TrailingSlash()); $app-&gt;add(Middleware::BasicAuthentication()-&gt;users([ 'test' =&gt; '0000', ])); /* define routes */ $app-&gt;run(); ?&gt;
Just to add to the confusion, licence is a noun and license is a verb. 
Indeed, providing a salt is now deprecated in 7.0. I'll change the manual wording to match that.
I'm happy to talk to the teacher to get them to not do that anymore. If you can put me in contact with them. 
You again think in blunt patterns and thus confuse matters :) The day I encounter a PHP user who can tell "uncaught" from "unhandled" will be the greatest day in my life. But it seems I'll never enjoy such a feast. Just like I said, you never had an idea how to handle errors in PHP, and now torturing honest exceptions with misuse. &gt; Filesystem down? Send a 500 error. Dude, you'll never catch a filesystem error with your imaginable chain of catches. This. Is. The point. Learn how to handle filesystem errors (or even parse errors) first. And when you will make it work you will see that you need no stupid catch for PDO either. 
This is something that I've been doing forever without realising it was a "thing". I guess I'd recommend it, but I'm sure it's not news or particularly cunning to most people around here!
I use feature flags a bit - but I find it's necessary to remove them once the feature is rolled out everywhere and no longer optional - else your code/templates become a mess of if statements....
I think it is pretty clear that variants are a "new publication" for the sake of copyright law. I mean, I don't have a caselaw source and I am not a lawyer, but I think it is sort of self-evident?
I think you misunderstood him. He's saying the same thing you're saying: they're never going to update it again (in this case, he's going to remove it and not worry about it, while you want it to just have a single date). 
Yes, $Day_Job is still using PHP 5.2 and we therefore can't use composer/"new packages" .... They also dislike having a 'network' dependency on installing the app so we generally need to include the code in the main repo....
"...and kills the chef" ;)
For the record - you inspired me to see if I could get it working - I could not so I just booted up redis. Maybe take a look at that. EDIT: I also managed to painstakingly get the php_redis.dll extension compiled.
me and some friends are already complaining about some things we are learning that are just bullshit and most of the teachers are kind of understanding but I hate how they don't do a lot about it :/
&gt; I'm currently building a website which will only have the need for a single user login, no visitors can sign in. So a high-availability single-user app, or personal website? &gt; This won't be connected to a database as there is no need for one. Thanks in advance. If there is no need for a database, and it's single users, simply give the user a vagrant box to store on a USB key; that contains the software &amp; stack, which can be used to upload content to the website. It means you can be pretty assured that backups alone will stop any complex hacking attacks, and there is little need for any further security than making sure the box it lives on is reasonably secure. As for SSL side-note; It costs virtually nothing, provides a basic level of quality (if you implement someone cannot clone your website without the private key) install SSL *ALWAYS*!
I Love PHP, but language hopping, unless you have a compelling reason to learn PHP is probably not a great idea unless you are willing to forget / abandon many rails patterns. I Know Ruby, but would classify myself as not proficient in rails professionally. From what I have seen, I don't want to know rails that well either. There is too much I'd be out of control of, too many decisions made for you. Some PHP is like this too, it's probably at least half the devs spend most of their time re-inventing frameworks which are easy to get something basic in, and make a right pigs ear out of complex projects. Now we have Composer (which initially I must admit I was not a fan of); we can make lists of libraries and components to reuse very easily in PHP; it's improved the ability to "do complex things" greatly. As for shared hosting, PaaS etc, use a vagrant box with hostsupdater plugin (it's Ruby), then use whichever stack you like. When you need to host professionally have the funds to do it well and not rely on shared host having low traffic at this hour... * http://www.w3schools.com * http://www.codeacademy.com * http://www.teamtreehouse.com * http://www.phptherightway.com 
I am personally really sick and tired of how the PHP-FIG seems to permeate every single aspect of the PHP community now a days. Not because of the PSR's themselves, I think some are great while others really suck big time. But the problem is that the PHP-FIG (IMHO) is a two-faced organization (not in the evil way). The PHP-FIG makes a big deal about saying that their standards are for themselves, but at the same time several members of the PHP-FIG works tireless in their effort to make the PSR's a standard for everyone. As someone else wrote "when in reality people get harassed for not following the FIG 'standards'", which I agree 100% with. If we observe the actions of some of the members of PHP-FIG we can clearly see (in their books, websites, and chats) that they are trying really hard to be a standards body for the entire PHP community, rather than 'just' helping frameworks and projects to work together. PHP-FIG gets made synonym to "Modern PHP" and hence everyone who does it otherwise is backwards. At the same time there is a MAJOR different between creating standards about how implementations should work, without limiting people to a specific structure and setup, and actually telling people how to code their implementations, as the PSR-6 is a good example of. If the PHP-FIG would really like to become some kind of standard group for the PHP community, they need to be represented by the community, not just a bunch of frameworks and CMS. MANY more people needs to be able to participate (without just getting brushed aside when they disagree) AND vote! Also some of the real developers of PHP itself would be very nice to have on board as well since they are actually the people developing the language. I personally would not mind one bit if Rasmus Lerdorf himself was on board as I know he would rip all the crap apart! The "two faced" part are limited to certain members and not everyone!
Yeah and my degree won't even matter a lot if the people I talk to on a slack channel are right as almost all of them are self-tought. I try to show teachers new better things I find out about and they like it and stuff but they don't bring it over it over to the class Almost eveything gets tought via pdf fes we can download from the school website which almost never gets updated(I LEARN ASP. NET USING A READER THAT WAS LAST UPDATED IN 2008) and the teachers just explain some of the stuff people have trouble with. I do have one cool teacher who also manages the webserver every media development student gets a vhost on but he also likes to explain things we don't learn but should like git(yup we really don't learn that), a bit of bash and how to debug(I know..) I think that's all I have to rant for now
spl_autoload() is just tech, not a standard for using it in a way that makes interoperability seamless and easy. The fact that it's been around since 5.1.2 (about 2005), but we didn't get actual "import-like" behavior and clean interoperability until PSR-0 standardized the conventions that the spl_autoloader() should follow (2010-ish?) tells me that it probably wouldn't have. The tech was there, but the standards for its usage were not. Arguably it was Composer that really made it standardized, since everyone would have been re-inventing the wheel with their own autoloaders which may or may not have worked very well. Now I just do `composer init` and require its autoloader, and any composer packages I use, I pretty much don't have to think about the fact that PHP still uses gnarly `require` statements under the hood. On the surface, it behaves like any other language that does namespace or lib imports.
Really? There has got to be some way to allow website playback of mp3 but block user download of the file.
I wonder what Joomla does, that can make the User-Agent an injection vector. Could someone explain the hows and whys?
This is your regular reminder that you should never, ever pass user-controller data to unserialize(). If you do that, you *will* get pwned, sooner or later.
so, acl?
I believe I have used this before to make an image rotation system for forum avatars. Could be wrong though, let me check to see if I have the code laying around. EDIT: Looks like I do not have the code anymore. Bummer.
[ELI5 Composer](https://github.com/CipherPixelnet/tutorialsiwouldhavewanted/blob/master/tutorials/composer/Understanding%20Composer.md#understanding-composer) Not the greatest or most accurate description, but hopefully a brief read through will help you see what composer does and how you can leverage it.
Does the thought of downloading code in the form of zip files make your skin crawl? The utter insanity of having to put a zip file in your downloads folder, and then having to browse to the destination folder where you want to extract it (sometimes dozens of folders deep)? The fact that the zip file will still be there, years later, polluting your HDD with its irrelevance? Do you own a smart phone? Do you love how painless and easy it is to install a new app on it? You know how you just browse a very uniform app library, find what you want, and install it with absolutely no mess or cleanup? And it's pretty much guaranteed to just work? That's what Composer does for PHP. Its awesomeness is on par with going to a strip club where strippers stuff money down *your* pants just for showing up.
Just as an explanation, remember GET requests wind up in your log file as they are just tacked onto the path. So by doing authentication in a GET you wind up storing the username and passwords in plain text anyway. 
That's why there is a VERY CLEAR list of [documented known limitations](https://github.com/Ocramius/PSR7Session/blob/e1655378c44799c398ee77312b081c512152ab08/docs/limitations.md) (you know, the "RTFM" stuff ;-) ) In general, avoid storing sensitive information also in your normal sessions, as they are (by default) unencrypted plain-text files, and they may be accessed by other processes.
Well if your faulty code contains this: // @todo remove code I'm guessing someone knew it was broken.
I think you're mixing up spl_autoload() and spl_autoload_register(). spl_autoload() is an autoloader that is actually pretty close to psr-0, iirc the only significant difference is spl_autoload() makes everything lower case when it hits the fs so NameSpace\MyClass is the same as NAMESPACE\MYCLASS and namespace\myclass they all map to src/namespace/myclass.php in the file system. PSR-0/4 force case sensitivity on you whereas php itself doesnt actually support case sensitive namespaces/classes so you get to make sure your case is proper but you cant actually have both NameSpace\MyClass and NAMESPACE\MYCLASS exist at the same time. spl_autoload itself is a standard way of doing "import-like" behavior, arguably it is the official php standard (check it out its documented here http://php.net/manual/en/function.spl-autoload.php on the php website) PSR-0/4 just won out because it picked up steam, not because it had more consistently defined behavior.
Then don't listen to to fanbois who says php7. It is BOUND to contain php level lol's and gotchas. At least use a version where some of lol's and gotchas are known and documented by multitudes of poor tormented developers who didn't have a choice.
&gt; I don't think you know what you are talking about there. Have talked to the guy. Can confirm. 
That array_rand returns a key instead of a value is ridiculous. It makes the by far most common case where you only want a random value at least two lines of code (three if you don't have the array already). I have never wanted just the key. Returning the key also makes for more cognitive load since you need to remember this non-obvious detail about a seldom used function. array_rand could have returned the value without much fuss. If I wanted a random key it would be a simple `array_rand(array_keys($array))` away. Things like this is why I don't like PHP. A language should help you reason on a more abstract level, being as natural as possible, not load you down with strange behavior you need to remember.
Everyone started somewhere. Can't blame them trying to help, even if they didn't grasp a specific concept yet. It's like fighting Poodle with a new certificate. You need to understand things first, which is absolutely fine. 
Don't know how I could have made that mistake! Thanks!
Quite contrary, there is no way to allow website playback of mp3 without downloading the file.
Sorry for not making the question more clear: I mean running *only* on PHP7. Thanks for the reply.
Can't tell if trolling or serious 
I believe you should continue support [current versions](http://php.net/supported-versions.php) of PHP with bugfixes. That is, versions that have not reached end of support yet. That way webmasters can plan according to the PHP release schedule. A lot of people have conservative upgrade schedules. We run Debian Stable on most of our machines, which means we have PHP 5.6 since the Jessie release in April this year. That also means that we ran 5.4 up until five months before the end of support of PHP 5.4 (which was this September). Running Debian Stable means a lot less headaches with broken or insecure software, and we don't have to go through our configuration that often, but it also means running software close to their end of life and getting the latest software ... late. There are systems with even more conservative upgrade schedules. Ubuntu 12.04 LTS ships with PHP 5.3. That Ubuntu release reaches end of life in the fall of 2017! But that is many years after the end of support for PHP 5.3 itself so I don't believe you should cater to those people too much if they don't make up a huge percentage of your userbase. There is a time where people running old versions have to take responsibility for their own choices! But still-supported PHP versions are not considered "old" in my book.
I, *personally*, think its much more readable this way. 
With a quick skim it looks there is no mention about "cookie replay" in the docs. I'd mention it as in some cases it may be critical that the end-user can't send same payload twice (or more). I have been working with "somewhat similar" project [TCrypto](https://github.com/timoh6/TCrypto) last few years (similar in that cookie can be used as data storage backend).
what benefit do you see in switching from an IDE to an slightly enhanced editor?
Is the diff available somewhere? I couldn't find diffs in their security announcements.
I'm not OP, but here's my answer: I see the distinction between "IDE" &amp; "Editor" as a unhelpful labeling of things. What does either mean anyway? That sounds wishy washy but bear with me .... For me it's important to list the features you actually really use and then see what software matches. For instance, PHPStorm has DB access and data editing features I think - I never use them. So the fact that PHPStorm has that and Atom doesn't is meaningless to me. Autocomplete on the other hand - good autocomplete is essential for me. So I look for software that matches that, and I don't care what it's labeled.
Not familiar with replay attacks - can you check the known limitations and see if maybe we need to document it better there? (I think that's documented under "race conditions") [EDIT] no, never mind - this is already mitigated by the fact that the package uses (by default) HTTP-only Secure cookies (HTTPS only). If HTTPS traffic can be intercepted, then you have bigger problems than just cookies.
Eh. This particular vulnerability (passing user-controlled data to unserializers which are not specifically designed to support it) has a long history across many languages. I've seen it happen pretty much everywhere a couple of times. I specifically remember RoR having some massive issues with this rather recently -- they were quite literally just passing a request body to a YAML parser, you didn't even have to exploit anything clever. And a bunch of followup security bugs of the same vein. Regardless of which language you're working with, don't pass user data to unserializers unless they are specifically documented to be safe for this purpose. Also don't make conclusions based on the name. While a YAML unserializer is going to be pretty universally unsafe, a JSON decoder may or may not be safe. IIRC Ruby has two separate methods for parsing JSON and only one of them can be used on untrusted input (and the method names don't tell you which one is which). To get back to your original snarky comment, I doubt, or at least have not seen evidence in favor of, PHP being less secure than competing languages if used by developers of equal competence. I do not doubt that PHP applications have higher average number of security defects, but this is likely correlated to there being a higher than average number of under-educated PHP developers rather than intrinsic qualities of the language as it nowadays is. If you happen to know studies which correct vulnerability statistics for this and other biases, I'd be very interested in seeing them.
So the year means nothing. Leave it it, change it, remove them all, remove them as you change stuff - I guess if they are ALL meaningless, then they are ALL equally the worst idea so far.
Why are you even here? 
Replayed cookies by the "honest end-user" is the issue which I'm referring. Something like the end-user replaying cookie which has "attempts" variable stored in and you decrease this value under some conditions, now by replaying the old cookie the user has more "attempts" left than there is in the most recent cookie set by the app. I'd make a new paragraph for the replaying issue. I described the issue here a bit more here: https://websec.io/2012/08/29/TCrypto-Encrypted-Data-Storage-for-PHP.html (at quite end of the page) and there's TCrypto's shorter mention of the issue https://github.com/timoh6/TCrypto#cookies-as-a-storage-backend Maybe something along those lines. Feel free to borrow those if you see they fit.
[removed]
I've been doing things just fine in PHP for almost 10 years, but thanks for your uneducated input. Judging by your post history that's the only contributions you're capable of. If you walked into the real world of programming with that attitude you'd be thrown out in a second. I'm guessing you're still a few years from entering the workforce though
That is not the case. This must be something custom Joomla is doing.
Don't take it personal pal. I have only sympathy for poor souls who are trapped in this pit of stupidity, even though they don't see it themselves. 
Thanks, but I have to admit that /u/ScuzzyAyanami came up with a better one-liner, see [this comment](https://www.reddit.com/r/PHP/comments/3wu5ly/just_discovered_array_rand/cxz7rp5). $array[ array_rand($array = ['Hello', 'Greetings', 'Welcome', 'Hey']) ]; 
Why do you need the underscore at all? Surely `@param $myParam The description` is not ambiguous? You can see the second 'token' is the variable, so the type has been omitted.
No problem. I opened an issue https://github.com/Ocramius/PSR7Session/issues/38
As someone who frequently uses both Atom and PHPStorm, and tried to like using PHP on Atom, it's still too immature. As posted in another comment, there's https://atom.io/packages/atom-autocomplete-php. This is the best package at the moment but it's still underwhelming, most notably the go-to-declaration is very finicky, which is something that I use a lot. Plus, there is currently no autocomplete support for Laravel, which is a dealbreaker for me (although there is a plugin for Symfony2 support if you're in that camp). I wish I could tell you to use Atom for PHP but I don't think you'll find that it meets your needs. You may have better luck with Sublime Text, it has a more mature set of plugins for PHP. (It's faster too, according to most people.) Perhaps try Atom again in 6 months to a year, and maybe the PHP plugins will have improved by then.
All systems have bugs. http://securitycafe.ro/2015/01/05/understanding-php-object-injection/
Do you know if deserializing XML in C# has these issues? I can't seem to find anything on Google.
&gt; It takes about 30 seconds to boot up phpStorm Maybe you should try Eclipse then?
That code makes about 20 times more sense if you add a new line after the ? and :. It took me about 2 minutes to understand because I couldn't find the terminators.
I'm serious. Why? Am I wrong? Explain, pls.
what does it mean? an editor is to edit files. and IDE provides a full set of tools required for development, i don't see how that is "wishy washy"
A thousand times "yes" to "Design Patterns: Elements of Resusable Object-Oriented Software". That book is like an OO bible. It's a good bed-side book, as it's read in small chunks, non-linearly, and involves lots of pondering. OP, don't get discouraged if a lot of them don't make sense at first. They will. Couple of notes: - Start with "Strategy", as it's an easy one to get started with and likely the one that you'll get the most mileage out of. - The thing to do with "Singleton" is to know about it and (almost) never use it. If you find yourself reaching for it, you're probably doing something wrong. Almost every prospective singleton I've looked at has turned out to be better served by not being a singleton. Avoiding it helps to keep your code SOLID. - Keep an eye out also for "Command", "Adapter", and "Template". They are good patterns with wide use. There's a lot more to learn than even what colshrapnel listed, but start there. Pay particular attention to your relational database design. I see far too much bad DB design and that, more than anything else, ripples into making complex and buggy application code.
Yes, I should have emphasized the relational design and database normalization even more. Indeed bad designs without any normalization is one of developers' childhood diseases. 
Pythons pickle module have an optional filter, that can be used to remove unsafe objects while unpacking. But if that isn't used, and the input is from an untrusted source, you'll be pwdned much harder than in this case.
What happens if you load up the command line PHP REPL and paste in your query? and tweaking the query a bit. I find REPLs super useful in debugging behaviour like this.
I'm not sure what app/framework you might be using, but is there any chance that you're running something like get_row instead of get_results?
Hi there. PHP developer at your service. What others have said is mostly correct. You need to further your knowledge of basic programming constructs. Maybe even do the PHP section on Code Academy. Just depends on where you are - you may be past that already. Another reading suggestion: [PHP The Right Way](http://www.phptherightway.com/). Code Igniter is done. But there are a few others to choose from. My personal top picks would by Symfony and Laravel. 
Same behavior with it returning the same same exact row. Thanks for the suggestion!
GitHub always has the diffs: https://github.com/joomla/joomla-cms/compare/3.4.5...3.4.6
That's a fair assessment.
Nice, thank you. Glad to see this conversation being had. It was obviously gonna come up at some point, and they're off to a good start weighing up the options. Good FIG. :) 
It's ambiguous for some reason that I don't recall with parameters, and it's more obvious with `@return`: /* * @return Order to modify */ public function getOrder() : CustomerOrder Is `Order` a type-hint or a word? But it's all discussed at length in the thread I linked.
The exploit code was in the user agent string (meaning that a "normal firefox windows 7 user agent" could not be part of an attack), so that would be a good place to start. But the solution I think you're talking about is definitely not a perfect solution (too many false positives). There's a pretty distinctive pattern in the exploit user agents that wouldn't be hard to block (and maybe add something like fail2ban to ban requests that definitely were using the exploit).
I'd like to see an example of what you mean. Everyday is a chance to learn more so go ahead, dispense your knowledge please. At least point to some good examples.
Really trying to understand how different frameworks work under the hood has helped me learn a lot. Maybe try extending Code Igniter will lead to a better understanding of how it works.
&gt; "yes, you will install McAfee antivirus on your Mac, even though the few obscure Mac viruses are less likely to cause damage than the AV itself" The perception that macs don't need antivirus software [isn't](http://www.digitaltrends.com/computing/can-macs-get-viruses/) [especially](http://www.theguardian.com/technology/2015/aug/04/mac-viruses-strike-secure-thunderstrike-2) [accurate](http://www.kaspersky.com/internet-security-center/threats/mac).
If you mean what codeigniter calls Active Record, it's not an orm, it's a query builder
Anyone know why Symfony deprecated $deep option on their parameter bag with 2.8 and removed it in 3.0?
I would suggest taking a look at Laravel for your new project. It has the ease of CI while exposing you to new concepts. Along with that I would suggest watching the tutorials over at https://laracasts.com -- Jeffrey Way is a fantastic teacher and his tutorials will walk you through complex subjects step by step. Edit: I love how I'm getting down voted for suggesting the current most popular php framework and arguably the best video tutorial site for programming.
I agree. First run of PHPStorm after boot takes 9 seconds here. Also, once it's open.. why close it? Dev machines should have enough memory :)
gonna be an echo chamber and say the same thing: check out other high profile frameworks. Where my echo responds a little different: I went from CI to Symfony, and haven't looked back since. Hell, Laravel is powered by a great deal of Symfony components, and Sensio (the guys behind Symfony) also have a cute little guide setup designed around teching you how to make your own framework using their components. In my opinion it's worth it to go this direction, if anything but to get exposure to how the individual Symfony components work, and how to use them yourself in other projects that arent powered by modern frameworks. It's invaluable information if you ask me. Just my 2c. Good luck with whatever you do! Also if you havent yet done so, look into PHPStorm. It by itself is an amazing teaching tool for modern php practices, regardless of which framework you go with next
No questions about PostgreSQL? Totally empty content-free article.
Take a look at propel.
To eliminate misunderstanding, let's define goals you want to see achieved by this example. Say, do you want to have a PDO error logged on a live server, with custom error page with 50x status shown to the user, while on a dev server error have to be shown on-screen, accompanied with stack trace? Is it ok? Do you require any other options? 
I don't care, to be honest.
I made an implementation of it: https://github.com/dave1010/php-fig-psr-8 Who's the fool now? Edit: never mind, guess it's me.
I didn't touch that for a long time, but I remember buffered and unbuffered queries. It could be interesting to take a look at that. On the mysql side, be careful with sockets buffers, they can hang (overall if the db server) in on a windows machine) The mysql client you execute from can be the cause. Sql Workbench and php can use different ones. php uses native drivers you can try mysqlnd. (mysql native driver for php) https://dev.mysql.com/downloads/connector/php-mysqlnd/ However, My bet is on a issue with characterset (collation) or locale. Without more information (the sql), it's hard to be more definite...
/me lmfao
I don't have an answer for all the questions because I'm just getting started and working on simple WP sites But, yes, it's normal to be worried that you're not smart enough. Once you get comfortable with the language it'll be easier, but you shouldn't be stressed about it. You're probably at the same level as most people in your class. Just try to make websites outside of class, make personal projects, even the smallest/simplest thing will teach you something.
Maybe ask your web host! Could be server-side caching?
Other posts below spell it out. But basically the exploit took advantage of Joomla adding data unsanitized to the session and PHP unserializing session data to trigger it. At worst, one could blame PHP for allowing data to be unserialized :-P
You could start with this http://route.thephpleague.com/getting-started/ This is another good router https://symfony.com/doc/current/components/routing/introduction.html
[**@mwop**](https://twitter.com/mwop/) &gt; [2015-12-15 20:11 UTC](https://twitter.com/mwop/status/676857012131532800) &gt; TIL reading the FIG mailing list: \#psr7 package (psr/http-message) has had over 1.4 million installs already! /ht @Crell ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
Repeat after me: you don't need it, you don't want it. You don't need it. You don't want it. Don't use containers as service locators. Don't put containers in your domain code. Architect things properly and use a good injector in your **bootstrapping** only. **Edit:** I wrote a blog post about ~~service locators~~ factories: http://shadowhand.me/using-auryn-to-write-factories/
I would look at how others do it: https://github.com/search?l=PHP&amp;o=desc&amp;q=routing&amp;s=updated&amp;type=Repositories&amp;utf8=%E2%9C%93
`array_search` is for finding (the key for) values in an array. Since "Alabama" isn't a value in your array (it's a key), array_search will be returning `null`. If you want to find by key, just use: `$code = $states[$state];` You can check if a given key exists using `array_key_exists($key, $array)`
&gt; 'cuase the docs are fucking shit. Any examples of how they are fucking shit? If you want the full api spec then look at the api spec. http://laravel.com/api/5.1/ If you want to be guided through a typical application the docs work just fine.
You should .gitignore them yes, those files should not be committed.
To extend from this, there's a lot of legacy stuff around written in PHP, and that's a huge contributing factor. Some people are still also stuck in that same mindset, I've worked on more crappy projects than good projects, but the good ones are really good - and there are more and more of them coming around now because more and more people are becoming aware of modern practices and standards. Modern frameworks also help a lot!
Think there might be some confusion, I meant me saying this was "unhelpful labeling" was "wishy washy", not your comment. But in reference to your original question: "what benefit do you see in switching from an IDE to an slightly enhanced editor?" My point simply is that you should be guided by what features you personally find useful/essential and whether the software has those features, and not what the software happens to be labelled.
I did not realize how bad it could really get. No source control, working on production server, no backups, no dependency management, no OOP. It was the most stressful and uninspiring job I've ever had; I quit in 8 months. This isn't an issue with PHP per se, I just see it more often with PHP shops since it's easy to be REALLY bad at PHP. I will never have a job where I work with PHP and haven't used it on my own time in 2+ years. That being said, it's a fine language to know and learn programming basics with. Other comments have touched on other points.
Because originally your post said to use get instead of post!
When I try to use the plugin in PHPStorm 7.1 I get the following error: http://imgur.com/mhUWL5A - any idea how to fix this? Or a way to get the color schemes without the plugin?
Also see [Toggle](http://www.sitepoint.com/feature-toggling-explained-with-qandidates-toggle).
Yep, you are correct.
Highly recommend ready the PHP docs thoroughly when you encounter something you're unfamiliar with. The [page on Arrays](http://php.net/manual/en/language.types.array.php) is chock full of useful things, including information on accessing array items (what you're doing here).
These guys make it sound really bad. If youre at a reasonably competent company, its pretty much smooth sailing most of the time. Best decision I have ever made, getting into this profession. The feeling of not being as competent as your peers will always be there - if you didnt have it, youd be arrogant and fooling yourself. Nobody knows everything, but thats why you work in a team - someone will know the answer. Be prepared to unlearn a lot of what your classes taught you. Your first few years will probably be stressful at times, as you become more proficient. Eventually itll be second nature and nothing much will faze you. Keep at it.
That's exactly what's happening
Welcome to almost every dev job ever.
It's telling that most of the comments in this thread are "oh no you might work at a terrible company and have to touch bad code," which doesn't actually answer anything you asked... &gt; what is it like? Best company I've ever worked for with the best job I've ever had. &gt; Is it stressful? No. For a lot of reasons - ninety percent of what you are working on isn't mission critical, it's all online and if you make a mistake; oops, it'll probably get caught in staging but at the end of the day you're not shipping a physical product that will break or format a user's computer. You won't smash someone's fingers in an assembly machine. No one will die if your code sucks, a power plant won't melt down. &gt; Do you enjoy it? Yes. &gt; What are typical everyday tasks in the workforce? Write code. Explain the code you are writing. A couple meetings. Solve problems. &gt; What is it like working in a team? If your project is well-structured pretty good so long as your team mates are good. You're rarely screwing someone over because each class is a self-contained file. &gt; What tips would you give for someone who wants to become a PHP web developer? Build your own web application. From scratch. Finish it. Pick up Symfony. Write your own web application. Finish it. Think about what was actually useful. Don't program in a certain way just because a blog told you to or some anonymous person from the internet did. Question everything. Learn databases, javascript, html, css. Realize you will spend the rest of your life learning. &gt; What are job interviews like? Easy if you know your stuff, are passionate, and shower before showing up. You won't be asked to code a sorting algorithm you barely remember on a whiteboad for a PHP job out of the blue. You will be asked PHP basics, and may be asked to show you understand large apps and some trivia about MVC because "ask about MVC" is written on the top ten results for "what questions should I ask a PHP developer during an interview," on google. &gt; Would you encourage others to do this line of work? Yes. If you're in the right city, this is where the big money is.
its going to be a spaghetti with code party
Any idea why these would have different behavior going through PHP vs MySQL client?
Tough.
Sorry should have mentioned this is on my local dev machine but I am experiencing the same issue with the remote server which I have full access to.
thats the API docs. Thats for deeper reading. drop the `/api` from the url for `/docs`. try http://laravel.com/docs/5.1 The api docs are there for reference (but why not look at the source?!) the docs are much more informative.
Have a look [here](https://www.reddit.com/r/webdev/comments/3we48y/web_app_ideas_for_the_growing_web_developer/) for some ideas of web apps that you could test/practice your knowledge with!
Apologies if you've already been down this route: is it worth trying to simplify the query bit by bit, removing complexity and re-running it? That way, at some point either the problem will go away, which might help isolate the cause; or you'll be left with a simpler, malfunctioning query, which will at least help eliminate a few factors?
&gt; if you're lucky enough to be able to design something from scratch, you can make something truly beautiful. [Maybe](https://lh3.googleusercontent.com/-L9iOxlJBchU/UTQe2_LXRDI/AAAAAAAAGWE/SJ-_oArPj3I/w800-h800/funny-software-engineer-comic.jpg)
&gt; YAGNI: "You Aren't Gonna Need It" (For anyone else who didn't know what that was off the top of their head.) For some reason, I have a feeling that there's a use case for when initial bootstrapping needs to happen that can still be shared, and not necessarily specific to an application. However, I can't think of anything to substantiate that. I do think you bring up a good point / message, though. I'd love to hear from others, perhaps even the container interop people who can provide more context as to why they're developing this standard.
(admittedly for v4) I was pretty deep in those very docs and spent many an hour with my head in my hands not knowing what was wrong, nor having any examples of how "right" was supposed to look. Or rather I usually had exactly one no-context example of "right" which was failing silently. Let's try google! Here is a tutorial that says something completely different! It's not working either!
I like and use Laravel. But it's not the only option. /r/php seems to be more like an overflow of /r/laravel most of the time. If you want decent docs and long term support, Laravel is a terrible option. If you want to quickly pick up some MVC basics, then move onto something more suitable, it's a good stepping stone.
Everything you hear and see on Stack Overflow about clean code and best practices? You know those polished *Medium* articles on how to do PHP properly? Those trendy guides by hipster startups? Yeah, now throw those out the window. Welcome to the agency life, where we're continually several years behind the rest of the pack on everything. Grunt? RabbitMQ? LESS? SASS? No no, we don't need those. Hell, even Git is a luxury item for a lot of projects. That's not to say there aren't dev shops that don't keep up with the latest technologies. It just depends on where you work and what role you and PHP play within the company. If you're an "application developer", you'll likely work with a consistent codebase with access to newer toys. However, if you get hired as a "web developer" in a digital agency working with CMS like Wordpress, then you'll likely be working on multiple projects for various clients with each implementing PHP in their own looney way. And most of all, you'll likely wrangle with code you simply won't have time to fix or implement properly. You see, this industry has been fucked to all hell with sales/marketing teams, whose sole job appears to be making your job as pleasurable as sharpening rusted nails across your eyeballs. From promising features that were never discussed with you to having you inherit client code that is one error from imploding, YOU get to fix it! But wait! You won't have time! ^^i ^^need ^^a ^^drink 
What CMS should I use?
https://github.com/symfony/symfony/issues/14039
https://github.com/FluentDOM/FluentDOM Whoops, my bad, this is for traversing DOMDocument, not creating html
#3 I don't like/agree with all decisions. But having an agreed set of common patterns is a blessing for teamwork to make it click. Frictions are reduced which in turn results in more productivity and enjoyment. So, in all seriousness: thanks for that and your dedicated and maybe unpaid work!
Pretty much what JSDoc does, except they use curly braces. @param {string} myProp My property description...
I'll check it out.
I work on a large scale application using PHP and Zend Framework. The team lead is very good so the codebase is clean, sensible and object oriented. I really enjoy programming in modern PHP. I would prefer to use a modem framework as we're still on version 1. Laravel would be my choice right now. If you are working on a good codebase then I would recommend it.
There are certain use-cases where using classes to model the DOM is helpful, specifically when there's relatively complex behavior associated with them. Form Builders and Widgets come to mind. In my experience, however, there's little gain from using PHP to model/imitate the DOM when it's already so effective as a templating language. I prototyped a package that aimed to leverage OO principles to render forms, so I could do things like: &lt;?php $form = FormFactory::horizontal($action, $method, $formHtmlAttrs)-&gt;defaultLayout(2, 4, 8)-&gt;setErrors($arrayOfErrors); ?&gt; &lt;?= $form-&gt;numberGroup('zip', $genericAttrs)-&gt;required()-&gt;layout(2, 2)-&gt;placeholder('#####'); ?&gt; &lt;?= $form-&gt;textGroup('first_name', [ 'required', 'placeholder' =&gt; 'Your First Name', ])-&gt;layout(2, 3); ?&gt; &lt;?php $form-&gt;close('Submit Button Text'); ?&gt; After working on it on and off for a few months and using it on a few internal projects, the additional complexity wasn't worth it. Templating languages like Blade and Trig can do very similar things through template inheritance, defaults, etc. It just didn't save me any time, and the fluent interface that made it as terse as it was came with it's own set of gotchas. In the end I went back to IDE-based macros making good use of whatever template engine I was using.
Can we see the php code?
It's interesting if you have the *time* to actually fix it up. I've worked in a few environments where the dominating attitude is "the client needs this feature with 8 hours budget, we don't have time to fix this SQLi vulnerability or upgrade to 5.4". I feel like some companies can get enslaved by PHP's rapid speed of development and get stuck building and maintaining perpetual prototype applications.
Check angularjs approach: &lt;ul class="friends-list"&gt; &lt;li ng-repeat="person in friends"&gt;{{ person.firstName}} {{ person.lastName }}&lt;/li&gt; &lt;/ul&gt; Then we just get DOM, finds all directives and bindings and filling in it with current data state. In UI architecture this approach calls MVVM, where bindings responsible to fill current state of your model. In our PHP templates we have pretty the same concept, but since our model can't change multiple time in context of a single request, there is no need for bindings. Personally I don't see any profit of your approach, since I have frontend developer who writes all the templates. And I don't want to see that they touching PHP. Also all this MVC stuff isnt about templates and separating HTML from PHP, it's about separating view logic from data processing logic, separating UI from application, making application independent from UI. So I don't see any bad things in templating systems if templates doesn't have access to application itself, and only to exposed data.
I feel the same. We currently don't have a front end team as two people left and I've had to go in there and look around and there is tens of thousands of lines of vanilla js with no framework and just ad-hoc jQuery. I'm spending my spare time researching how to implement modern front end development (modular ES6, TypeScript, gulp), mainly because it pains me to know how fragile the code is. I don't want to do the work, but I'm compulsively obsessed with it. If anyone has any tips let me know 
&gt; In class, it was nerve wrecking because I'm always worried that I am not smart enough lol. Is that normal? For one, it's "nerve-racking", but that's not a big deal ;) Psychologically speaking it's normal to have self-doubt over things, and it's far better to have a touch of that than to think you're a genius (take it from someone who works with someone who is both in the latter camp, and mistaken in that belief). Nobody here can tell you if you're smart enough or not though, but I guess just compare yourself to your classmates. You should be aware who the smart ones are, how far off them do you feel? Been doing PHP professionally since 2000. My perspective is: don't listen to me or anyone here on what it's "like", insofar as broad brush stroke answers like "it's shit! crap code! legacy!" "it's great! my firm's really professional!". There's going to be such a wide variety of answers from such a wide variety of people, that you'll get nothing of value. You can't tell the ability level of the people posting, you can't tell their experience, so you can't properly frame their comments. *They* don't know what the job market's like in your area and what opportunities there are, so can't relate what they've experienced to what you're likely to. &gt; what is it like? What are typical everyday tasks in the workforce? That said: you know when you code PHP in your class? It's like that. Different firms will have different development environments built up around it. At my old place, we used SVN for version control and just FTPd stuff up to live servers. At my current, we're git with redundant VMs and use a suite of open source linux tools to manage deployments and so on. It varies a lot. There may be a daily morning meeting to "kick off" what everyone's doing that day, and there may be daily "wrap up" ones too. Some places will encourage you to adopt methodologies like pair programming or TDD, whilst others won't care. Some *might* want to see thorough plans for the design of new projects, while most will probably expect you to just get stuck in. Some will have layers and layers of strict hierarchy whilst some will be (ostensibly, of course) flat. Estimating timescales for things will be the hardest part, but when you're new there'll probably be other people responsible for doing that for you, or at least supervising you. Protip, give yourself more time than you think you'll need. &gt; Is it stressful? Most of the time no. Then sometimes your new app build gets rejected by Apple for something they've not moaned about at all during the last year+ of releases, and you have to hastily plan together a new backend support system. Your first job will probably be stressful, just because it'll be your first. If you're a decent coder, you'll handle it. &gt; What are job interviews like? Depends a lot on the place you're applying to, but expect to be asked to code something, or provide sample of something you've already coded. I always like asking candidates a handful of obscure questions about the language, to test out what experience they've had in weirder situations, but then I'm usually after high level guys. Be prepared to talk about personal projects and things you've taught yourself in your own time. Some places (my first did) will do a practical test of general data manipulation techniques. In general, when faced with a question you can't answer, admitting you're not sure but explaining what you'd do to find out, is a lot better than making something up or guessing. Research the place you're applying to, and know their business before speaking to them, so you can tell them some things you like about what they do, or improvements you'd make, things like that (probably of more significance at smaller firms). &gt; What tips would you give for someone who wants to become a PHP web developer? I'm only going to do one because it's late: don't get hung up on frameworks. Laravel and Symphony and blah blah blah are all well and good but if they're all you know, you're working yourself in to a dead end. I had a guy join us a couple years ago, seemed good at interview but turned out *all* he knew was framework components. Couldn't write stuff himself to save his life. There's a project of his that's pure class-spaghetti that I still refuse to touch. So: make sure you know PHP, not just whatever framework /r/php is swooning over this month ;).\* Oh actually here's another: aim to be the guy that's best able to translate between the nerds and the non-nerd management. That's a very useful skill if you want to move up in the coding world. &gt; Would you encourage others to do this line of work? If they enjoy it, yes. \*Which, of course, is not to say they don't have value, but you *need* core PHP skills first.
I did use something along the line of this at one point. It is pretty easy to do: https://gist.github.com/Petah/47f9b8429b29857d869f
&gt; pricing_parameters%5D%5B1%5D=2 That didn't seem to work : / Still don't quite understand it... Agh
Wordpress 1.2 (Response given randomly because it's a too generic question)
What city are you in?
Imagine you worked in the field where all apps were 12 factor, developers could spin up environments just to test a thing, and your team was agile like the actual definition of agile. You write apps in C#, C, Go, Ruby, and Python. Your template front end was PHP because that's PHPs sweet spot. Then you take a job closer to home because who wants that commute, writing an app in Laravel. Fucking Laravel. Remember that meme where the dinosaur screams guys guys guys wings in my back legs? Yeah that's Laravel. A site that makes 100 million a year in sales, riddled with bugs because hey let's put all of our business logic in a bunch of Laravel service containers. This is where the ten million monkeys typing come into play. QA hammers on the site uncovering clusterfuckery all around. I feel like I'm being paid to stab myself in the face repeatedly with a small bag of cat shit. I'll probably be banned from this sub for saying this. OP, just run. Run away and preserve your sanity.
frameworks? ain't got time for that. budget? don't got that. clean code? who cares as long as it works. At least that's my experience.
This combined with sometimes unreasonable deadlines.
Laravel is almost certainly to blame here, but I have little experience with it. PHP itself will not influence the query results, nor will PDO by itself. How are you achieving the randomization and what is the size of the total dataset? A sideways solution might be to do the full query, cache that (in memcache or similar), and select a random row from that at runtime.
I'm not sure how you are doing this but I assume that in your script, you are building the query with values being calculated by PHP and in the mysql console, you are hardcoding these values? So they are not exactly the same? Would help if you post the code.
I like laravel because it can be as simple or as complex as you need it to be. You can go from writing responses via clousures right in the routes.php file to doing Domain driven apps with full event/message queue backends. IMO it gets a lot of shit because some people don't like that it abstracted some symfony classes away but for 99% of the use cases thats just fine. Once you hit a pain point you can always drop down to the lower level classes.
You know, the sum of these answers is kinda terrifying for someone like me, also about to get into PHP.
this used to be common practice in various frameworks in the 2004-2008 period. I haven't seen it so much lately though. I don't remember any of their names off the top of my head though.
for me it's just natural to have a conditional branch with a default case explicit. it's kind of a bad because he ends execution of the function in a branch body. if there was no return there and later needed to do something else, i'm sure it would re factoring.
True example: Some part of the organization just decided that "the way" to specially-designate certain customer entries for an acquired company... is by changing the customer's language field in the database to pick "Malaysian" and writing special logic to do something different whenever a "Malaysian" entry comes up. ... I mean, what the fuck, businessdudes? There's technical debt, and then there's idiocy...
&gt; My biggest question is. Has this been done? I think you might learn a bunch from tilting at that windmill, but I wouldn't get your hopes up too high about making something everyone will adopt. Whether you're dealing with JS or PHP, each of them have use cases for "render a big page in one pass" versus "gradual mutation of an existing page", and those cases tend to demand different tools and styles. &gt; You could &lt;include&gt; your template page and start your content at a certain element or start at the &lt;head&gt; or &lt;body&gt; tag. Side-story: Several years ago, I worked at a startup whose flagship product (a "customer-customizable platform") used their own scripting-language on top of PHP. The execution engine would regex to detect embedded code-blocks, regex to tweak those blocks into PHPish code, `eval()` the blocks, and repeat indefinitely until the string stopped changing. Arbitrary code/markup-injection wasn't just a severe security vulnerability, it was a core feature for how the whole thing operated. Ugh. 
Fortran lets you pick awesome jobs all over the world.
If your career deals with PHP: what is it like? &gt; Fucking awesome. Is it stressful? &gt; Sometimes. Today sucked, one of the production servers decided that it no longer wants to do Curl requests. No fucking idea why. It works on local/dev/staging but whoever configured the server didnt know what the fuck they were doing. (This is my least favorate part of the job.) I didnt write the code, I didnt install/provision the server. I don't use Nginx very often and this server has tons of nginx mods installed on it. The code itself is fine the server is broken and fixing it can be really annoying. Do you enjoy it? &gt; I do but some projects are better than others. I like working with newer frameworks. Lately I have been into Laravel however some projects are running wordpress/drupal and it can super annoying working with them. What are typical everyday tasks in the workforce? &gt; On the best days I get to actually just write code. I love database design and how data is handled so setting that up is always fun. The worst days are fixing other peoples bugs, which can be a nightmare because as I work I want to pull my hair out and ask why anyone would build something like this. What is it like working in a team? &gt; For me personally. Most projects are a Project Manager who deals with the client. And one or two front-end people. They are usually doing pixel perfect stuff. Client usually provides designs or they are done in house but by another team. Usually I am tasked with providing skeleton sites and the front-end guy styles it. What tips would you give for someone who wants to become a PHP web developer? &gt; Dont start with a framework. Learn to do it Vanilla. Build a portfolio site for yourself. Then start to build with frameworks. You should always be using frameworks but its important to understand whats happening in the background. What are job interviews like? &gt; The last few I have been pretty mild. One I had to build an imgur clone with no framework/sql library. Another I was asked to build a web scrapper, a recursive function, and some advanced parsing. You need to have an idea of what the fuck you are talking about. and lastly, Would you encourage others to do this line of work? &gt; Yes and no. Its not for everyone. Some people are not made to sit at a desk all day. I am learning PHP in class and I graduate this week. In class, it was nerve wrecking because I'm always worried that I am not smart enough lol. Is that normal? &gt; Yeah first jobs can be nervous. Enter as a junior and make sure you till the manager you are here to learn. My first job was doing overnight system monitoring I was in as a system admin. I had been trying to get into game development and build a bunch of games in the time. Finally after about 8 months I couldnt stand the nights anymore. I decided to make the job to PHP. I freelanced (this was the worst) for while finally landed a a full time position. I have had a few jobs since then and each one has been better than the last. I think I am getting better at picking companies lol. Thank you for your response and time. &gt; No problem good luck with your interviews. 
&gt; ... you configure the container in your bootstrapping and it works everywhere . Everywhere in **your** application. At best, if you're using a framework, you might get help of some sort of integration package (Symfony Bundles, for example, are mostly about configuring your application's container). At worst, everyone will have to wire up their own containers, by hand, every time, exactly the same way, for every application. The goal behind this project is that you can create a package that other people can use in any supported container without having to wire up the container themselves. You won't have to get AwesomeImages plus the Symfony-specific AwesomeImagesBundle to wire up Symfony's container anymore. You'd just get AwesomeImages. It would ship with container definitions that can be used to automatically configure your Symfony container. Or your Aura container. Or your Zend container. &gt; Your bootstrapping code is already unique to your application. Unless you have no external dependencies it is highly likely that healthy chunks of your project's container wiring is exactly the same as many other projects.
Yup... This isn't even remotely specific to PHP.
If author wanted to be clever. He could have wrote that ternary operator using binary operators, with the needed help of a group of parenthesis to allow the or condition to run. (isset($x) &amp;&amp; $variable=$y) || $variable=null; is more clever than $variable = isset($x) ? $y : null; is more clever than if(isset($x)){ $variable = $y; } else { $variable = null; }
&gt; wire up their own containers, by hand Why would anyone "wire up" dependency injection? A decent container doesn't need wiring, it infers everything it can from type hints. &gt; without having to wire up the container themselves Again, why would I need this? &gt; Unless you have no external dependencies Of course I do. But I don't have to "wire" them. The type hints do it for me. And anything that isn't an object type hint would almost certainly be unique to my application and therefore require **bootstrapping** configuration. Again, I state that `container-interop` is an excuse for bad architecture. If your DIC is so bad that it can't automatically infer how to wire up *most* of your application automatically, there is something wrong with the DIC or your application architecture.
It's a battle between the terrible legacy ways of doing things and the less terrible modern ways. It's a losing battle.
Does a while loop like that just make PHP just go nuts on CPU? Shouldn't there be a sleep for like 10ms or something for each loop? Please correct me if I'm wrong. 
Here is the form tag &lt;form action="form.php" method="post"&gt;
how do I format my copy paste code in reddit comment so I can put the whole code?
I don't know where you work, but I have an arsenal of tools to use whenever, wherever. How can you not have time to use Git or VCS? That's bs.
Because some clients have their own hosting workflows and solutions. It's...it's a mess.
A really good foundation to use is Laravel. There is a service out there called laracasts that will not only get you going with php but teach you how to use Laravel. There's also videos on that site that go over react and other front end tips. My favorite site for introduction to php is teamtreehouse. A good beginner project is to create your own site using Laravel and set up a blog maybe with admin and user access. That'll get you into the framework and get you started with databases. Good luck!
What are the advantages of beanstalkd over rabbitmq work queues? 
This provides a fairly concise overview: https://www.quora.com/What-are-the-advantages-and-disadvantages-of-Beanstalkd-as-a-work-queue
Ah, right. That's awesome.
I had the same query. Can you explain how/why this doesn't run away and consume a whole core, or worse? Also, in the interest of fully utilising multicore processors, do you have any knowledge of how to set up (say) six parallel image processing workers? Thanks!
Oh yeah. That's the tip of the iceberg. 
This is a good question and one I am unable to answer. beanstalkd is accessible via telnet, and that is what pheanstalk uses. The method `$pheanstalk-&gt;reserve()` has the following signature: public function reserve($timeout = null) and description: * A timeout value of 0 will cause the server to immediately return either a * response or TIMED_OUT. A positive value of timeout will limit the amount of * time the client will block on the reserve request until a job becomes * available. I am unable to say *why* so little resources are taken up since with a $timeout of null the whole process is immediately attempted again. You can set a `$timeout` value of 5 and this will force the `reserve()` method to wait 5 seconds while it waits for a job to come in, before attempting once again. Alternatively you can add a `sleep` to pause it yourself. As for your multicore question, I am also unsure of how this works with php-cli. I believe since each process would be an actual separate process it would fall back to however your OS handles separate processes. Even if multiple processes are listening on the same queue, it would still scale well.
&gt; The goal of container-interop and more specifically definition-interop is to help developers write modules that can work in any framework. This doesn't sound right. A module should be given dependencies, it shouldn't automatically pollute its dependencies into some global container. The container-interop interface is already borderline a bad idea and this is crossing the line into encouraging poor architecture that leads to dependency spaghetti. Unfortunately many people don't understand the purpose and goals behind Inversion of Control and keep reverting back to pseudo-$GLOBALS-style object registries, and this seems to be pushing things in that direction as well. Inversion of Control means that the modules *neither get dependencies from the environment, nor they set dependencies on the environment*. Instead the person wiring up an application made out of modules is the one doing it. A container given to a module should only contain modules for that module, so writing back would mean the module is writing dependencies from itself to itself, which is nonsense. I could see some limited cases for the existing container-interop, i.e. *fetching* dependencies in a standard way (if used carefully). But that's it. For the rest, just be honest to yourself about what you're doing and write to $GLOBALS. That's the interop way of messing up your project.
&gt; I am learning PHP in class and I graduate this week. In class, it was nerve wrecking because I'm &gt; always worried that I am not smart enough lol. Is that normal? https://en.wikipedia.org/wiki/Impostor_syndrome
Most queue workers will have a sleep option in them. At work we have 18 workers that run with a 7 second sleep on all of them. At any given time only 2-3 should be checking per second and then sleep if there are no jobs ready.
Definitely very similar to my experience all around. The one thing I'd reiterate is that there are great days where you solve problems and write a bunch of awesome code that you're proud of; and then there are days where you just bang your head against a wall and can't break through anywhere. Just be prepared for the bad ones and it makes the good ones so much sweeter.
Haha, very true.
"[The Clean Architecture in PHP](https://leanpub.com/cleanphp)" is a great book also! It should give you a good quick overview of everything. &gt; concepts of SOLID design, various design patterns, and a look at various architectures
Most people around here would recommend Drupal 8 and stray away from Joomla.
I keep thinking I'm firing up Photoshop...
league/route is alright, but I prefer fastroute itself. 
Thank you for the share!
Thank you! A friend mentioned I should learn Laravel, but would it make more sense to gain a solid foundation in PHP before learning Laravel--or would you recommend learning both in tandem?
That's up to you. It'll take time but it's always best to have the basics like loops, boolean, ifs, functions, classes, and namespaces down before you get going with a framework. Next you'll want to get into OOP or object-oriented programming. Here's the starter videos on laracasts: https://laracasts.com/series/object-oriented-bootcamp-in-php. The neat thing about laracasts, and it's recommended, is that you can re-watch the videos over and over again if you are having trouble grasping something.
Here's a talk by Justin Carmony about Workers released just a couple of days ago: https://youtu.be/bTcyuzJkxIg
You meant ircmaxell. Didn't know old Anthony is lurking here too 
Got better things to care about and in a month you will not notice anymore.
Ive found that using this patterns works very well with php; I manage a couple of production sites that operate like this. The only difference is that I generally use php for creating jobs and creating markup and Go workers for doing the heavy lifting. Here's a simple Go library that I wrote for building job queues with beanstalkd: https://github.com/eramus/worker This type of functionality is a perfect low barrier of entry for learning a new technology/language
Yep, our mind often play such tricks to us. I often confuse things the similar way myself. That's a payoff for fast learning. We "tag" various entities that seems similar to us, to save time on researching them through. Most of time it helps but occasionally it leads to confusion. One such confusion I discovered recently right here in /r/PHP - it turned out that PHP users desperately confuse exception handling with exception catching.
That looks like the [nullsafe calls](https://wiki.php.net/rfc/nullsafe_calls) RFC.
Why don't you comment on our blog may be he will reply your answer
Oh please... I moved to Berlin a while back and have worked for 3 companies so far. One of which is a multi-million dollar business. You might be lucky to have found a good place to work, but it is my experience that those places are not very common. I am moving to London in 9 days because I am fucking done with this place. The tech-literacy here is seriously insanely lacking. All the tech meetups are filled with Nth iteration copy-cats and pretty much 0 new ideas. Germany (or I should say Berlin) has been the worst place - tech wise - that I have ever been to. Add to all of that the fact that English literacy here is garbage. For foreign workers this place is a nightmare. But all of that aside, I am genuinely interested to know how much money your company pay its employees (seniors)? and in what city is it located? I am merely asking because my experience might have been a Berlin thing and you might be living somewhere else! 
Well, Berlin might be bad, because everybody wants to go to Berlin (I honestly don't know why), so companies get away with paying less just because they are sitting in Berlin. We are sitting in a small town near Frankfurt am Main. Also, we do porn, so there is an upfront hurdle for some people (which I also don't understand, but it's astounding how many people seem to have a problem with porn). My company usually pays in the 50k to 70k € per year, depending on your knowledge level and the position you apply for (dev, senior dev, project lead). Biggest problem for my colleagues is that we have a relatively flat hierarchy, so here is not much room to "move upwards". Not a problem for me, because I like it where I am and have no ambition to become a team lead or something like that.
Wow what a small world. When i came in the office today i was told to implement some browser language detection (dont ask) for a client site because the client employees obviously cant figure out that the site displaying english text is actually in english and not in their native language, so now everyone from with their native language should always get send to the local version. The thing is, the local version is not a translated version but has its own special content. My first question was "So you want me to make it that no one from country x can ever visit the global site?" .....
I use [php bindings](https://github.com/tarantool-php/queue) for [Tarantool Queue](https://github.com/tarantool/queue). It's written and used by one of the largest Russian Internet companies, Mail.Ru Group.
Thanks, So this has confirmed now that I am 100% putting the exact same query through both the PHP side and the client itself but getting different behavior. I will try and simplify the query and see at what point I can still replicate behavior and post it here. EDIT: Because it was such a large query I did not see at the very end it had injected DESC on the order by... Time to get some coffee.. Lets change that above to "99% putting the exact same query"...
If you are using the laravel table-based queue, which constantly polls the table, then yes. Other systems use a blocking wait that does not poll (or, in a way that uses heavy resources) and have that problem.
&gt; Also, we do porn, so there is an upfront hurdle for some people (which I also don't understand, but it's astounding how many people seem to have a problem with porn). emmm, that sounds like a wonderful place to be xD &gt; My company usually pays in the 50k to 70k € per year Well that is what I meant by low. That's the same as Berlin level salaries. In the US juniors make that much in some cases. Seniors most certainly make double that amount. So in relative terms, Europe is unfortunately in bad shape :/ &gt; iggest problem for my colleagues is that we have a relatively flat hierarchy, so here is not much room to "move upwards". That's exactly the same feeling I got. It is also the same in Sweden. It is so demotivating to work-hard and get nowhere. I myself would like to keep moving onward with my career but the opportunities are so lacking because of this. Not sure if I am just weird or there is a legit shortage of demand for seniors! 
If this us the laravel database driver, then it can be heavy on resources - it eats up 4-5% on one of our servers just waiting for jobs to arrive. Nothing else running on that server, so not a big problem, but we would use a blocking queue if the server was busier.
Fixed.... See my edit above. Thanks! *hides under the desk*
yes, indeed. thanks.
I currently use RabbitMQ to perform logging of data (in the context of a conversation tracker). Playing with queues and offloading into a separate worker has so many benefits including easier error handling when the process breaks down. 
Laravel uses Symfony components... hopefully that will help you out some
This is my issue. I have PyCharm and PHPStorm together on a toolbar near each other. I either have to take time to figure out which icon is the right one or flip the coin. It doesn't help that updating PHPStorm means uninstalling and reinstalling requiring me to make a new shortcut each time. 
I can already see it failing silently everywhere... While the idea is interesting at first glance, I assume people would abuse it more than actually designing things correctly upfront. Basically, I think that it's syntactic sugar for a rare case where an object may or may not exist. I know HHVM implements this, but I'm also not sure about the popularity (and how much of it is an abuse) of the operator.
composer require &lt;package&gt; is managing your dependencies. "composer create-project &lt;package&gt; &lt;projectname&gt;" as an installer for your end product is using it as an installer and wrong. that should only be done to initialize new projects - however I've seen a lot of people do that.
What the fuck is this fucking **_** for??? Also I'd like to have the drugs they had while designing it... Anyways... here is an icon which more phpstormish: http://defenestr8me.deviantart.com/art/Yosemite-PhpStorm-icon-489731778
Amazing! Thanks. That definitely gives me Google fodder for more learning.
Why use array_key_exists() unless you will use a potential null value somehow? If a null value is not valid for your code use isset(). If you are going to echo it as a string use isset(). 
18 all doing the same thing? Is this to utilise multicore stuff? If so, how do you set that up, or do you just let php/the OS take care of it and assume it'll split them between the cores?
1. /r/phphelp 2. http://php.net/foreach and I *hope* that you are using `itemID` as array index.
Don't have any examples for you but high-read is an easy situation to optimise for. You can cache data into memcached or whatever, you can cache your whole page behind a CDN or something like Varnish. If your ORM is slowing you down you can replace it with read queries that will be faster (this is easy to do on the read end because you don't need that much behaviour beyond getting at the data). I don't think Laravel is likely to be too much of a problem for you here.
&gt; table-based queue Oh boy... 
Easy fix for Mac users. [Here's the old icon](http://demo.ovh.eu/en/01b158fd2543ad193ca4071080d7c14a/). Browse to your Applications folder, right click on PhpStorm and 'Get Info'. In the new window there's a small icon at the top left, drag the original PhpStorm icon onto this to replace it. If you ever want to revert to the new icon, click the little icon and hit the backspace key.
Welcome to drupal. Where the clients saw something on linked on facebook and assume it's cheap, and ask us to install a module expecting it to be 2 hours to install some new functionality. God forbid you actually have to code something to get functionality and it takes a day. Clients are the worst part of php imo. If you are in a good shop that follows best practices you can have a pretty good developer experience without loosing too much hair.
You just describe exactly what I do at work. Clients don't have time and money for big scale projects, so we're using Wordpress for 95% of them with no version control whatsoever. The job has to be done quickly, so no time for this...
No I can't :-P This sysadmin stuff is a whole other field I try not to get too far into. I did years ago, when it was simpler, but technologies and tools are moving so fast now that it is hard to keep up as something to do *alongside* development. However, once you get a single worker set up on a queue, expanding sideways, to bring in further workers, is probably the easy bit. Some queuing systems are more suited to running on one server, others are more gears towards multi-server setups, so before you make a choice, decide where you ultimately need to be.
Its actually a very good idea since it can prevent a lot of accidental mistakes. E.g. using $i in a for loop in both global scope and the callback.
If I'm correct, isn't this less necessary in PHP than in other languages because of how `empty` and `isset` work? For example, in Javascript I would love to have this operator, because something like `if (thing.item.property)` would throw an error if `thing.item` doesn't exist, but in PHP, `isset($thing-&gt;item-&gt;property)` returns `false` with no warnings if `$thing` or `$thing-&gt;item` or `$thing-&gt;item-&gt;property` don't exist. According to the documentation, `empty()` works similarly.
&gt; what is it like? you will grow intensively and very fast. you will be able to work with one of the most modern technologies out there because php and javascript (and you will do a lot of javascript as well) communities are fantastically developed. &gt; Is it stressful? it very depends on where you will be working and what you will be doing. any company with any language can bring both positive and negative experience. &gt; Do you enjoy it? I definitely do. &gt; What are typical everyday tasks in the workforce? usually php is being chosen as it's something easy to start with, it has one of the best tools to help you render html in the browser, it's easy to build an api for clients, and it has a solid base of object oriented programming for complex parts too. that helps to get the product far enough on all fronts with pure php. the type of work you will be doing most of the times therefore will be full-stack development, where you are heavily involved in backend as well as frontend. &gt; What is it like working in a team? same as with any other language. usually you will have a version control repository, where you and your team members will commit their code. it might be easier than with other languages, since once you got changes from your peers, you see them after pressing cmd+r (or should I say f5?). &gt; What tips would you give for someone who wants to become a PHP web developer? learn basics of oop first with the focus on how it's done in php. get to know with the community and tools around the language, and start using them. http://www.phptherightway.com/ might help you to get an overview of "modern" php. and enjoy the time you will spend with the language. :) &gt; What are job interviews like? again, depends a lot on the company that interviews you. most of the time you will be asked about basic php knowledge as well as the right way of doing php (see the link above). big number of companies are built on top of popular frameworks and libraries, so having a good knowledge at least of the most popular ones will be handy. most probably you won't be asked about data structures and algorithms, as companies that need them would not choose php in the first place. &gt; Would you encourage others to do this line of work? as to a novice developer who has an interest of doing web - definitely! however, keep in mind, that usually in the companies with large engineering teams and/or complex products, php might not be enough. think about couple of other languages to add to your portfolio as well. not necessarily right now, you will feel that moment. though nodejs might also be a good technology to learn in parallel, since you will be doing the same javascript as you will be doing on frontend, so you won't get into language barrier problems.
You mean something like this: www.sirius.ro/php/sirius/html/ ? Disclaimer: I am the author
These are unrelated concepts, all functions have a scope. Basically you need a way to disambiguate, "these are local variables", and "these are from the parent scope". Most languages require a local variable is declared before it's used. PHP doesn't, which is what makes use() necessary. Their scopes work the same otherwise (well not quite, variables are passed in by copy or reference in PHP but that's another topic). Also note that closures don't need to access global variables, in most cases this is about accessing parent scope variables, typically in the method the closure is defined it. A closure is just a block of code, when implemented well, so just like you can access a variable inside an "if () {}" block that was defined outside it, it should ideally be accessible in the same way in closures. PHP has a bit of a piece-meal approach to it all, as we've accustomed. It's unfortunate, and it is inconvenient and cumbersome, but it's how it is.
Nah, talking about work. We don't have desktops here, just laptops, and I grabbed a co-worker's Air just after he left. It was better than the Book Pro that I had before in terms of carrying around, but the Book had better specs. As for screen real estate, the Air isn't but (but as you said it's not great), luckily I'm almost always hooked up to a 2nd monitor.
I know that Laravel is based on Symfony, but I just wanted to get someone's opinion on whether they prefer one or the other.
Curly braces are probably better, on the off-chance PHP gets generics at some point in the future.
&gt; Well that is what I meant by low. Where are you comparing this to?
Yikes. I guess I should just stop writing entirely if I botched it so badly that you weren't sure about the explicitly stated take-away. Sorry about that.
Thanks. I never used queues but is a interesting example, but it seems like the images are uploaded anyways at the same time and you are passing the image temp path to the work queue task, another thing the in the php script using beanstalkd (the consumer) what you should to handle the resize: fork that task in a new process ? use async ? handle one by one ? other thing?
Laracasts is a great resource not just for Laravel, but PHP, JavaScript and really the entire development process in general, including important stuff like version control and some cool tips about Forge/Vagrant/Sublime/PhpStorm and other nifty services/tools/etc. Jeffrey (owner/creator) has (IMO) a "Morgan Freeman" kinda voice and he does a very good job explaining things using real-world, practical examples. Honestly, sometimes I play a video in the background and just listen to the content at the start of my day, I feel it helps get my brain into "development mode". For $120/year (which in your case is an expense, woo!) it is in my opinion, some of the best money I've spent to improve and refine my skill set, and I've been writing PHP for 15 years! The community over there is also nice and helpful and given the broad range of ability that Laravel attracts you shouldn't be worried about asking any questions you may have. Another helpful resource is [Php: The Right Way](http://www.phptherightway.com/) There are a lot of good books on [LeanPub](https://leanpub.com/), too.
Why not use Docker Toolbox ? Does 80% of the job for you, as for DNS, we use a real domain name pointing to the IP of the boot2docker VM (much less portable I can conced
 &gt; and error-prone That's exactly what I found to be NOT the case: the `use` statement saved me loads of times from accessing stuff that I shouldn't have access to in first place (mutable state, mostly).
I just don't think a generic "question them" is the promised rethinking of well-known security trade-offs. How do you avoid the trade-off between surveillance and security, for example? Or the trade-off between convenience and secure N-factor sign-in with strong keys? Questions are plenty, answers are lacking.
&gt; I just don't think a generic "question them" is the promised rethinking of well-known security trade-offs. Sure it is, because most developers ***don't***. They happily assume that making something secure is necessarily a performance degradation. Even Telegram made the same assumption. If you aren't objectively measuring the supposed cost of security, you're probably over-estimating your sacrifices for it. (And if perchance you aren't like most developers who assume security means slow, then you didn't need this article anyway.)
That was my first thought, too.
 $i?-&gt;dont()?-&gt;know()?-&gt;what()?-&gt;youre()?-&gt;talking()?-&gt;about()
If it's a good thing, then why is PHP the only language that does this? I also write Java, C# and Javascript code, they dont require you to write a use statement to import local variables or member properties into closures. I also know the basics of Python, Ruby, and Swift, and as far as I know they dont do it this way either. PHP is the only well-known programming language that has this cumbersomeness that you have to write a use statement following closure declaration. Are you saying that all the other languages are doing the wrong thing, and PHP is doing the right thing? If it really is a good practice, why isnt new programming languages like Swift following this 'good practice', and instead went with the 'bad practice'? 
&gt; what is it like? Can be great one day and hell the next. Depends largely on the codebase you work with. &gt; Is it stressful? No. Often I find it quite hilarious to find those omg wtf bqq moments in your ancient code base. &gt; Do you enjoy it? Yes. &gt; What are typical everyday tasks in the workforce? Writing reports, pushing out that new version of the system you are working on &gt; What tips would you give for someone who wants to become a PHP web developer? Know what composer is and how to use it. Contribute to open source projects. Learn at least one UI framework, learn at least one ORM, learn at least one SQL DB. Know Git. Know how to PR and merge. &gt; What are job interviews like? Prepare for a code test or in some cases multiple tests. Companies look for people who fit with their teams not for the "best" programmer. &gt; Would you encourage others to do this line of work? Oh heck yes.
http://php.net/manual/en/language.operators.array.php "The + operator returns the right-hand array appended to the left-hand array; for keys that exist in both arrays, the elements from the left-hand array will be used, and the matching elements from the right-hand array will be ignored." In your example it's calling the parent class constructor which returns an array and its performing a union with the $result array. They are just building an array of configuration options.
PHP's closures don't keep the parent scope alive like JS does. Rather, they simply capture specific variables from the parent scope when the closure is made. There have been proposals to automatically capture, but if you wanted to be able to change variables in the parent scope you'd have to capture by-reference by default, which would mean things like creating closures in loops would be a pain. That's one reason I like PHP's approach: ever had to create closures in a loop in JS? It's messy because you can't just use the loop variable (e.g. `$i`) as the parent scope is kept alive and it'll just end up being whatever the length of the array was (`$10`) in all your closures, rather than the position in the loop when you made the closure, which isn't what you want. In PHP you can just capture the variable by value. Is this why closures work the way they do in PHP? I have no idea, but it might be an influence. Edit: Reading [the closures RFC](https://wiki.php.net/rfc/closures) is helpful. Apparently we didn't do automatic capture because it wouldn't work with $$ and we don't inherit scope for global functions (you have to use `global`). And they mention the loop index issue, too.
I'd like to take a second to point out that if we merged the symbol tables we wouldn't need to do this `use function` type stuff, nor have "function autoloading". When all we have left are symbols we no longer have to specify the type - it would all just work. It would be a BC break and would require a lot of planning and community outreach, but I think it is doable. I'm dropping the comment here to get your feedback on it. Edit: Just a reminder that downvotes are for content that does not contribute to any discussion, and not because you simply disagree.
Trivial for Windows users too. Convert it to .ico, edit the link in your Start Menu.
Recognisability &gt; fashion
&gt; The container-interop interface is already borderline a bad idea Can you elaborate on why you think this? Is it because it encourages people to depend on the existence of a container in a place where there should be no dependency on a container? It seems like these interops are really only useful if you want your *application* (not package or module) to not be dependent on a single container, but rather an interfaced standard. This would allow me to develop my own framework of sorts, and only ensure I'm using an interop-supporting containers rather than locking myself into one specific container. My service providers and accessing of the container would all be abstracted through these. 
In general it sounds awesome. BUT: Wouldn't this mean discarding the fall trough behaviour for functions and constants in namespaced code? While probably somewhat desirable for the opcache optimiser and static analysis, that would probably make it the mother of all BC breaks. 
&gt; In general it sounds awesome. BUT: Wouldn't this mean discarding the fall trough behaviour for functions and constants in namespaced code? I do not think so. Can you give an example where you think it would change the namespace fall-through behavior?
I didn't think about just handling it in an xml/json document object and then just doing an HTML serialization in the end. This is good resource. Thank you!
Honestly? Strong dislike. They look and feel too much like Adobe (that is *not* a good thing), but most importantly do not identify the products. "PS"? "IJ"? No. For one, "PS" is already taken by something far more recognizable. So is "PC" and probably most of the rest. An application icon should be unique and identifiable. In the case of trade tools like coding tools or graphics programs, the icon should be as unique and clear as possible, and not reduced to two letters. At the very least they should have come up with a central JetBrains theme, perhaps even the very one they have, but then stuck the full language name in there rather than their program name. It's still short (mostly), but I'd be happy with the exact same icons reading php&gt; _ and "web&gt;", "java&gt;", "python&gt;", "ruby&gt;", and so on. I'd also be quite happy with the full name of the product spelled out in the icon, much like they've done for their own company logo (I would link it, but it's all SVG). php storm _ *^I ^hearby ^freely ^release ^these ^product ^identification ^schemes ^for ^the ^use ^of ^JetBrains ^s.r.o. ^with ^no ^compensation ^required, ^for ^the ^good ^of ^the ^community. ^Although ^a ^lifetime ^toolbox ^subscription ^for ^my ^children ^and ^I ^would ^be ^appreciated ^as ^I ^try ^to ^turn ^them ^into ^geeks.* 
I added &lt;?php endwhile; else: ? &lt;div class=no-results&gt;nothing found&lt;/div&gt; &lt;?php endif ?&gt; at the end of my result div like you did and it gave me [errors](http://i.imgur.com/r8ieirN.png)
 if (empty($r-&gt;movies)) { echo "No results found"; } else { echo "$r-&gt;movies; } Where would I add this? What would it replace? When I say I'm a complete noob I literally mean "I followed YouTube tutorials to make this"
A different concern. Constants are (mostly) case sensitive, functions and classes are not. Would this involve making comments case insensitive? That sounds like it would make things even worse than they are now with regards to case sensitivity.
You can specify in your crontab/service file the [cpu affinity for each task](http://linux.die.net/man/1/taskset), if that's what you're after.
A framework should not depend on a container. A container is a bootstrapping detail only. Everything else that requires some kind of service location (eg: URL routing determines the controller) should be done using factories. These factories could make use of a container, but it would be an implementation detail. Having `container-interop` does not make that easier or harder.
On a previous project I was stuck on MySQL 5.1 running SF2. The read lock wasn't working as expected - I'm not sure if the term 'race condition' applies here but it sure felt like it. One worker would pick up a row but another worker would sometimes also pick it up before the row had been locked. As in, within a few milliseconds of the original. I'm sure this is exactly what read locks are designed to prevent but it was not working for me at all.
How much work needs done is completely up to you. A good idea would be to have multiple workers listening to this single queue, so you can have multiple images being processed at the same time.
Pretty much, this is exactly the way to decouple systems. Sending a serialized closure to a queue is rife with security implications. Do yourself a favor and just say no to that.
Ah, cool. I was on the bog with my phone, so didn't see all that further detail lower down.
Ah, I see now. I don't think this would have to change initially but to build new features on top of it we would probably want it to. This further shows how we have way too many behaviors and duplication in our symbols. Everything would be drastically simplified if these were unified.
&gt; We all work on Macbooks Why is this? One of the benefits to using docker, or just vagrant, is the freedom to use any OS. Is it just for social status? If you like the shell, why not just use Linux. If you like having access to more apps, then why not Windows? If OSX is better because of third party tool like brew, then why not just use Chocolatey for Windows? I know this is a tangent but I have been trying to wrap my head around this.
I'm like a ninja! Disregard my original comment then :) confusion settled!
I'm curious, have you developed on a Mac / Windows / Linux?
&gt; Are you saying that all the other languages are doing the wrong thing, I would and Doug Crockford probably would as well: &gt; Forms that can hide defects are considered defective. &gt; If a feature is sometimes problematic, and a more reliable feature exists, use it! Automatically importing variables is the right thing most of the time, but sometimes it hides errors. Yes, typing out the `use ($param)` syntax means you need to spend an extra 5 seconds writing the code, but this makes the code way more explicit, and stops it from doing the 'wrong' thing in the rare cases when the value is modified in the parent scope. &gt;If it really is a good practice, why isnt new programming languages like Swift following this 'good practice',.... Probably because it's cool to make syntax be as brief as possible, and that helps people who like trying new language to try it out. But a language being easy to pickup is completely orthogonal to whether it is a good choice to writing bug free code in that language.
Sorry for not giving absolute numbers, but how it's used in FB's codebase: - it's used extremely frequently - I just grepped for it over ssh, that was definitely a mistake. - abuse has never been enough of a problem for us to add it to a linter, or code review/code smell documentation Length of chains: irb(main):008:0&gt; counts.each { |k,v| printf("%d: %.1f%%\n", k, (v / total.to_f) * 100) } 1: 94.0% 2: 5.3% 3: 0.6% 4: 0.1% Nothing with 5 or more Edit: more details on chain length
How would you abstract service location to factories for all the various aspects of an application? What if I need to automatically resolve a service and its dependencies for a console command? What does that mean for things like service providers? I understand the overall sentiment that containers can/should be an implementation detail. It just seems difficult to achieve in practice, requiring quite a bit more overhead. That's the part I'm trying to grasp. Any code examples would be swell if you happen to know of any.
Just because the client doesn't use version control, it doesn't prevent you from using version control in your local environment. What stops you from downloading your client's files, run: $ git init . $ git add $ git commit -am "Initial Commit" $ git checkout -b my_branch_whatever It takes like 30 seconds tops. 
Currently, a Lenovo with Windows 10 running Vagrant and Puppet. A year ago it was a 13" MacBook. 2008-2010 it was Gentoo and then Ubuntu. I have spent the least amount of time on a Mac but I will admit it was also my least enjoyable experience. I also spent a bunch of time creating a brew script to get new hire's local environments up and running only to have it brick with Yosemite. That is when I devoted my time to Vagrant. I tested that on my MacBook and a Lenovo to make sure it worked before sending committing it at work for other devs. That is when I decided to jump ship to this Lenovo since I had no strong ties to Macs and I am trying to figure out if there are any objective reasons I should be aware of. Other developers I work with seem to give a more aesthetic or subjective response. Edit: Longer elaboration on why I was not enjoying the MacBook. We have 3, 27" monitors at work so we got docking stations for the laptops. The thunderbolt docking station could only support two of the three monitors so I had to chain a Diamond Multimedia USB display link as well. However this made the laptop never remember the order the monitors were in so anytime I re-docked I needed to open up my display properties to reorder my screens. Sometimes docking or undocking caused my machine to crash. I felt it broken to need to use brew or mamp when apache and php came installed by default but the abstraction layer made me not feel at home like I would on Linux. I had access to less apps than my developers on Windows and they seemed to have less problems. Furthermore I am an avid gamer and gaming lunch breaks with my colleagues limited what we all could play with fellow Mac users.
&gt; seemed good at interview but turned out all he knew was framework components. In order to write framework components, you need to know PHP. Symfony/Laravel did not invented their own language. Can you elaborate how this guy didn't know any other stuff? I find it hard to believe. 
I couldn't care less. I'm not looking at it when I am in the IDE and it doesn't get in my way.
Yeah it still in use for pretty much anything scientific and engineering.
Well, yeah, but I don't even work in local. I just update everything live, most of the time on a dev site before transfering to the real domain. I know how git works and I use it myself for my own projects, but I just don't use it at work, my boss doesn't know what it it.
Symfony has a whole lot more features off-the-box, and is less opinionated than Laravel. Symfony has one of the best documentations I've ever seen in all the frameworks I've ever used. Symfony has an actual release cycle, that you can take a look at any time and you know exactly when each version of Symfony will not be supported anymore, and how can you update your installation of Symfony. Symfony has an incredibly security system, that at first can be a little daunting, but once it is understood it is incredibly robust and flexible. Symfony has an amazing debug bar if you're doing front-end work, where you can take a look at how your code is run, which parts of the code are slow, and how much memory your code is taking, and in which parts of your code are the biggest performance bottlenecks. If you're running queries against the database, you can take a look at which queries were run, how long it took to run such queries, which params were passed into the query, etc. If you're making AJAX calls, the debug bar can intercept those AJAX requests and profile them and/or replay them. And I could go on, and on, and on on how Symfony is technically superior to Laravel in every single way, but one: Development time. To develop and release a Symfony app takes much longer than doing it Laravel, so that's why a lot of developers shy away from powerful frameworks like Symfony and prefer things like Laravel. Sometimes you want to make something fast, and it makes sense to use Laravel for that. But if time is not a *huge* concern, then Symfony is usually the right call. By the way, whenever someone tells you that time is *always* a concern that's because that person works in a sweatshop.
I don't think it can be fixed by composer. If I make use function admin\application\user; $user = user(); echo $user-&gt;name; It will throw an error that the function is not defined at line 3. I might catch the error and load the function but then I can't continue to line 4.
I'm a designer by education and did programming later so I like to sit on the fence between the dev-design world. More suited to smaller companies but it's going to be different in every work place/for every person. One of my first roles was for an agency and it was basically writing unit tests and working through support tickets. Current place is smaller so I'm exposed to everything but some things I do miss though: + Experienced Developers that teach you a lot! + Code Reviews. They might turn your face red but you never make the same mistake twice. + Evenings after work/night life/company parties etc + Perks + Free Food + Time off every other friday for personal development.
Also, to be clear, an injector that automatically resolves things will let you do this: $injector-&gt;alias(SomeInterface::class, SomeConcretion::class); Which is often all a service provider is doing.
i dont understand why people post links like this with absolutely nothing else. no text, no description, no explanation, no reason why anyone should use this over something more well-known like [puphpet](https://www.puphpet.com/)
Was this a one-off script? For one-off scripts curl suffices, I agree. Although, I would have probably used Guzzle as well. I think the main issue with him is that he wasn't an experienced developer. Here's why: 1. Spending a week to figure whatever the problem was is ridiculous. The one problem I had with guzzle was because the server where I was deploying the script to didn't support curl_multi_exec, and it took me like 10 minutes to work around that. 2. Loading **symfony** components is super easy, and autoloading is not convoluted, it's pretty straight forward and it shouldn't be more than a dozen lines of code or so. However, I do see a lot of entry level php developers depending too much on frameworks to do things like Routing. You don't _need_ a framework for routing. It's useful if you want to build an API that supports all the HTTP verbs, but if you're only doing GET requests for AJAX calls. Just write your own Routing from scratch!
Yeah, not in standard PHP :(
I prefer Macbooks because of the beautiful screen, half-decent keyboard, and great trackpad. As far as on the software side I prefer having a shell, but also having apps such as Tower for GIT, Transmit for SFTP, Kaleidoscope for diff, BBEdit for ridiculously large files (sublime has crashed on 2gb files), and the way it handles virtual desktops. 
If we're talking community at large, most developers know next to nothing about security concepts, let alone their implications. Of those that are left, most are far more concerned with time-to-market vs. security, or backwards compatibility vs. security. Performance vs. security just isn't something that comes up for most developers.
Those 18 all watch the same tubes but are on different machines (spread across 6 web servers currently, 3 per machine). They watch 12 tubes currently with priority on certain things. Those servers are 4 cores so there is always at least one core open for web traffic.
&gt; Just write your own Routing from scratch! Exactly! And nope this wasn't (supposedly) an entry level guy, and wasn't for an entry level position. Autoloading as a concept is fantastic and I use it all the time, but *his* specific problem was trying to get the pattern of autoloading as used by Symphony and whatever else it was he was merging in, to work together.
The vbox files are only for local testing. Puppet has all the details stored in manifest files and we use this to deploy new servers for QA, Staging, and Production on Amazon. I left the mount points to default to let vagrant decide on the method which if I remember correctly is the recommended method. Symbolic links work as long as the VM and the mount points are both under the users home dir since the owner and permissions will be identical. You just cannot do logic in the script to ensure directory since a symbolic link is not a directory. The code for each vhost is under git control and is checked out in provisioning but, again, it is handled by Puppet. All deployments are CI from master on our GIT projects so between that and Puppet it really frees us up on the Vagrant side.
&gt; In the US juniors make that much in some cases. Say what now o.O. I am working remote as mid level php developer and get around 25k. I need to re-evaluate my life :D. And maybe change the company. Any suggestions :) ?
This is something I really liked when I first started in .NET. But after some thought I prefer PHP's method to be honest. I much prefer having a clear template containing all the HTML, rather than some HTML in one place and programming code in another place, determining the rest of the HTML. In other words, a .NET style system is too far removed from the final HTML that's output. The solution to your issue of too much PHP/Twig code in your templates is to better structure the data that you pass to your template. And use nested views where appropriate.
The problem is they tried to copy Adobe's style without being anywhere near ubiquitous and iconic enough. Why even abbreviate it to "PS"? There are literally no advantages that I can think of. "PHP Storm" fits perfectly fine on the icon.
&gt; Or the trade-off between convenience and secure N-factor sign-in with strong keys? Doesn't even need to be a trade-off on the development side if you let the user make the choice between convenience and security..
Whichever **LTS** distro you are most comfortable with will work fine. It's more important that you understand the OS environment. You're already building new code, so it won't make a lot of sense to also burden yourself with working in an unfamiliar environment. There are PHP7 builds available from trusted sources for just about everything now, so you shouldn't need to compile it yourself. I can't say that HTTP2 support will be just as easy, though...
Yep. That's the first thing that it made me think of.
&gt; What the fuck is this fucking _ for??? That's the console cursor.
Several years ago I started a framework of sorts, if you could even call it that, that had plugins that would fill data into certain parts of the page/template. Everything was xml based and the plugins had to return DOMNodes (iirc). So, they could do that by building up the DOM or by building a string and turning it into a DOM structure. It was a pain :)
You might be interested in http://php.net/manual/en/book.dom.php
I'm genuinely curious to hear from people that have gone linux -&gt; windows in php development, don't suppose you could explain why?
We've looked at docker, and it's nice, and it's the way that things will eventually probably go, but right now it seems kind of like an all-in-one tool that doesn't *really* solve any problems and instead just links together a bunch of services that already solve problems. The biggest question that I haven't found an answer for is: How do you deal with stateful applications or application components? Docker is great for running microservices and stateless applications. But that's a small portion of our architecture. Great. I can containerize the application logic, but what about Redis? MySQL? I can already manage everything I need in the application logic with artifact-based deploying, in addition to managing all of the server configuration, through Chef. Should I use Docker basically to create the artifact? What does that provide over other tools like Hashicorp's Packer (where I can create a full AWS Image using my build and spin one of those up instantly as I need to scale)? 
&gt; Don't use containers as service locators Really? You saw "container-interop" in the URL and you didn't bother reading past it? This has nothing to do with service location…
I've read the whole document multiple times. If people weren't addicted to writing container configuration by hand, we wouldn't need this. Service location is just one of the things I mentioned.
Quicken, TurboTax,Netflix, and my massive video game library. That is the short answer. Furthermore, if Blizzard released an official version of Heroes of the Storm and Overwatch I could probably live with that and what is on Steam for Linux. Long answer is Microsoft has offered SFU (Services For Unix) for years, allowing or grep, kill, vi, ls, etc as well as NFS mount-points. This makes dealing with linux and unix servers from a windows box a lot easier. Furthermore the amount of software and tools on Windows is incredible as well as the Web Platform Installer to handle MySQL, Python, Ruby, PHP, etc all by the click of a button and supported by Microsoft. Also, I spend a few years as a Software Engineer in C# so creating tools and/or having access to Visual Studio is very nice if I want to screw around on some random C++ or C# projects. Everything I currently use for PHP works fine on windows: PhpStorm, SourceTree, Workbench, Node, Grunt, Vagrant, Slack, Atom, VS Code, all modern web browsers, Skype, Office products, etc. I do not feel like I really sacrificed anything for development but gained a bunch more functionality. That being said, there is a lot that pisses me off. Not being able to chose my mount points for Windows, AppData, Users, Program Files. CMD is still default rather than PowerShell or some native Bash or alternative. Don't even get me started on services.msc.... but I digress. Once I can use Quicken, watch NetFlix, and play my Blizzard games on Linux, I will probably switch and never look back.
We use beanstalkd for a few things, but our thumbnail generation is on-demand instead of in-advance. Since the HTTP requests come in in parallel anyways, it's all taken care of. I know this isn't about thumbnails, but work queues. However, maybe it's not the best use example. Or perhaps it IS a good example because you can mention alternatives as well. Just thinking out loud really, not sure if I'm making a point...
Rasmus created a Vagrant image that allows you to easily switch between many PHP versions and builds (24 at the moment) within the same VM instance. The build also includes debug tools, apache/nginx, mysql, and other useful goodies. It's quite nice, I'd give it a look. https://github.com/rlerdorf/php7dev Switching is as easy as running the following command $ newphp 55 debug zts Activating PHP 5.5.22-dev and restarting php-fpm
I corrected one bug in my example by editing the above (one missing "&gt;").
Awesome! Thank you so much for your detailed reply.
Thank you.
You can use stateful volumes, but it was never intended to. It's like NodeJS: Just because you can run Javascript on the server doesn't mean it's a good idea. Once you reach that point where you're using network aware volumes to run it, it's just easier (and cheaper) to run it in RDS and automate the infrastructure with something like Terraform. It solves the problem of stateful applications by creating more problems. Seems like so much more effort than just using something else. And that isn't to say I don't like the idea of containerized applications, but it doesn't really fit the 95% of what I make nowadays and trying to make it do so just means more things to maintain. 
I've had multiple issues with puphpet on both Linux and Windows hosts. There are quite a few issues and workarounds on the github page for the project too. Bottom line, there's nothing wrong with having options.
Where I worked we've replaced Vagrant/XAMPP entirely with Docker, including database persistence. I wrote a tool to replace `docker-compose` for the specific use-case of local PHP web-dev that handles data-volume containers for you; no more losing your DB or having to remember to load an SQL file every time you start the DB container up :D https://github.com/girvo/dup
This is an interesting wrapper but I'm not sure I really understand what it does. Can you explain to me how this is different then just using `docker-compose`? At the end of the day all it looks like it's doing is running docker run commands and maintaining it's own state file. 
This sounds like a project that was developed without any understanding of writing maintainable code and that QA were brought in far too late in the process. *It happens.* That said, I've been involved with performant and scalable apps in PHP, because they'd been written with that in mind. *This also happens.* I've worked on a PHP project like this, where the business took the decision to rewrite (albeit this was a 7 year old legacy application) as well as a Java application where the decision was to re-architect and refactor. Neither are fun on "*live*" projects and I can feel your pain, but I would lay some blame at the management and developers as well as the tools.
Thank you so much! This was truly insightful and helpful!
wow, that is interesting. Thank you for sharing
&gt; SSH Key: ~/.vagrant.d/insecure_private_key (this may be different depending on your environment) This no longer works. Vagrant generates a new key for each VM unless you set the `config.ssh.insert_key` flag.
Remote in the US or in Europe? In my experience remote workers make less (generally speaking). But regardless, if you have any experience what so ever, 25k is not something you should be happy with. Everything is a function of experience and skill-set. Try to stick out from the crowd by learning about design patterns, data structures, API design best practices, etc. Having the theoretical knowledge alone sometimes gives you an edge when negotiating a salary! 
No worries! Sure it was opinionated and I waffled on a bit too much..! Good luck with your job search, are there any type of positions in particular that you're interested in?
ya
I'll pm you on here. 
The state file is going away, heh. It's only used as a marker for initialising the volume-only container. The main reason for it was that docker compose does not handle volume-only containers properly: using a volume only container is the nicest way of getting database data to persist across container instances, and docker-compose can and will recreate the volume-only container if you're not very careful. Dup is deliberately much simpler and much less flexible than docker-compose, which I've been using since it was still called Fig. By focusing on a single use-case, which is replacing Vagrant with Docker for local web development, I hope to provide a better developer experience for those new to Docker. It's still got a while to go yet, but we use it every day here at work with no issues. Combine it with a local nginx-proxy container and you've got a damned nice setup! EDIT: Oh, and I forgot to mention, it was initially just a set of bash scripts. I only turned it into an actual CLI because I wanted an excuse to play with the Nim language on a real project :D
&gt;You sound like you are searching for some universal truth. Yes, maybe :) 
&gt; Have you tried Puphpet recently on your system? yes
There's nothing wrong with having options, relax guys. X, X and X already has a box (might as well mention homestead while we're at it) and that's fine, but if you don't plan to use this box then there's nothing really to add to the discussion. No need to hijack the thread.
The essential difference here is the check is implicit with the fetching of the value.
you can do all that stuff without writing workers in Go and still be decoupled. 
Volume-only container: done. You're not limited to "send a dockerfile" when it comes to this sort of thing.
I definitely like this a lot then what I was doing before. I think I'll use it. Thanks!
That's an awful suggestion, on par with the @ operator. Calls like that scream bad design as well as make debugging harder. Scripts should return or fail early. [This story](http://thecodelesscode.com/case/60) comes to mind.
Again, you are not same demographic as the person who wrote asking for help.
puphpet doesnt support mysql 5.6 nor 5.7, so OPs link might be interesting
&gt; this may be different depending on your environment 
Aah! That's nice, /u/adam2222! I used to use Pen &amp; Paper. But had to switch to a tool so that I can easily inform my team mates about my thought processes. How about you? How do you tackle that?
My dev box has VSCode, Git and MySysGit (Bash) installed. That's it. Everything I code runs inside VMs I have setup on local Hyper-V (W8.1). I once tried Vagrant (with Hyper-V), but soon got rid of it (along with Ruby).
Cache invalidation via Varnish is possible and done properly it's very effective but it is VERY HARD to implement correctly
I always start with the UI prototype (I recommend Balsamiq.com for this, btw). This way I can get a general feel of how the application is going to work and I can show the client something easy to understand. Then I design the Relational data model to get a better understanding of how the data structures are going to work. Then I put some tasks in Trello and I'm ready to start coding. 
guys dont mix, file reads everything and fgets lets you read file by line without loading whole file to memory
Very good talk, thx for sharing!
Balsamiq is great! I already use it for the same purpose, /u/nandopedrosa. :) Just curious to know, how do you inform your team about your progress? Are all of your team members on Trello as well?
It's usually a bulleted list of required features first. Then if it's simpler a webpage, I usually make the HTML / CSS part first, with placeholder data, then convert it to a sort of template and populate it from the backend. If it's a more complex project, with parts that I don't see through first, then I begin with dividing it to parts. Then I write standalone tech-demo-likes for the most difficult parts, so I can see that they're feasible. Then reuse those for the real thing.
First I figure out features and how the program will work and then I like to create flow charts for the program, or specific features, before programming. The tools I use are a basic tablet to take notes and then the web app Lucid Chart for creating the flow charts. I did a lot of searching and so far it is the easiest way to create flow charts for programming. Edit: Woops, I thought this was /r/learnprogramming. My web development process is simple creating a list of features and then figuring out how those features will be accessed. I still use flow charts in laying out features but only to diagram button presses and figure out what a user may want to do at certain steps that I had not thought of before. I like to create flow charts, in both development processes, because they help in seeing through the eyes of a user. A flow chart makes you think in logical steps that a user might might take when trying to complete an action. Flow charts force questions because you need information to fill the chart. You get to the end of one feature list in a flow chart and can constantly ask "now what?" and you are done when the task is completed or you create an endless loop for the user to guide them elsewhere. In both processes the flowchart then serves as the guide for creating features starting with the most important features first. The flowcharts I create also usually start with the most important feature first. 
Whiteboard and temp markers... 
My ideas usually start on graph paper with a pencil. When it is time to move that idea into reality I will plan out the tables and controllers/views in Google Docs. I do the programming alone, and my business partner usually handles all the customer communications. We live together(married) so any extra tools to share and distribute tasks would be superfluous. I track my time in an android app called aTimeLogger, but I also track everything I do in that program. I do make a checklist for each project to help me remember all the requirements for each set of MVC's. Wouldn't want to forget to add routing, permissions, special requirements, etcetera.
This plus a rubber duck helps iron out a good plan. 
Good ol' UML. Still useful for large, complicated projects. 
So awesome to read this /u/bradstone. Thanks for sharing this. :)
What makes you say that? 
I don't work in a team but I if I did work in a team I would still likely use Lucid Chart as I am pretty sure it has team sharing capabilities, for a higher cost. Of course this is since I already like Lucid Chart as a solo user. I don't know if there are other team sharing flow chart tools.
It happens automatically.
Do you share the parts that you've divided with your team members, /u/karon000atwork?
That's one way to handle it, but guess which way users will choose predominantly. And you'll still be at fault for offering a less secure part of the spectrum.
Let me get this straight: I put a string with serialized data in a session variable. When the session is unpacked, I do not get the string containing the serialized data back, but rather the result of unserializing said string? Is that what you're saying, or did I state my question in an unclear way?
Cheap videos seldom do any good.
In the above scenarios, I don't. In another project, I'm part of a bigger team, and we use SVN, Jira, Confluence and Skype to aid teamwork.
I use mind mapping software to make out relations and structures, mindmeister is typically what I reach for. 
So this is not really a Joomla vulnerability, but rather a genuine PHP bug, just waiting to hit the unsuspecting sod, that store unwashed string data in a session. What a fun injection vector.
The USA company has hired you for the purpose of paying less than a USA developer, but also not wanting to go so far down the line to outsource to some place like India. At some point, you should look into renegotiating with them if you believe they are happy with your services. You can still fall below USA level of pay and get yourself a significant pay increase, so they company should be happy. Try looking up the average wage for developer in the USA city the company is based in. I'd say 40k shouldn't be unreasonable for you.
The bug in PHP was just fixed https://bugs.php.net/bug.php?id=70219 . Silent truncation on inserts is a Joomla problem. Truncation elsewhere in their code base may also be exploitable without the php bug. 
You can't afford me as a reviewer.
Oh! Mindmaps are so helpful in the planning phase. How do you share your plan with your team? Do you just collaborate your team members on mindmeister? It also isn't very friendly to note your personal tasks, right?
Is python much better suited than PHP for multiprocessing?
No, they must be manually unserializing something. The bug you linked is just one out of the many unserialize security bugs, it will not magically cause raw strings in your session to be unserialized. Joomla must still do some unserialize call to trigger it. It's a bug you would use to inject shellcode if you couldn't find an application-level behavior to exploit (as here, nobody bothers with shellcode injection if you can just use some handy Joomla class).
&gt; This site contains binary versions of Flow (Flowtype), the Javascript type-checker What the fuck? /r/php
Please don't spam in this sub.
I was planning to do that, but I can start renegotiating when the current contract expires (it is 1 year contract, so 3 more months). If they offer me new contract I will try to negotiate. It is a good job, and company in general is good, and at the moment I am happy with my position (plus the pay check is never late :) ). I am using my time in this company to gain experience in real world team work and real company (before this I was solo freelancer). Generally I love working from remote (I tend to travel quite a bit, and for remote work all I need is my laptop, internet and after 16h of work electricity :D ), and I would like to keep working remotely, especially for USA company. Maybe in year, or two I will start searching from something better, but for now I am happy with where I am :) 
Not unlike all the other answers here. I try to leave coding off as long as possible. In a recent project I used a text file to jot down features and processes. I included it in the repo and you can see it on the github project page. https://github.com/meigwilym/aelodaeth2/blob/master/dev-notes-models.txt I'm not sure what you can take from it (I haven't worked on it in a while) but it may serve to illustrate. 
Eh. I mean, sure, it's pretty meh. It doesn't look that nice and it just feels weird. But how much time do I spend staring at the icon? Almost none. Hell, I open my IDE with Super + 2, so I don't even look at the icon to click on it.
I like the icon. What do you think about changing the orange wave into a lightning bolt? Moar storm.
The easiest way I invalidate my varnish cache is by issuing a PURGE request via curl to the correct resource. It can be done via config and other such stuff but since my rest endpoints that deal with the changes are also very coupled with the get endpoints they take care of their own invalidations via events to my varnish module. I try to keep it super simple.
What Joomla does wrong is session data silently truncates on write. session_decode runs on a chosen result string. To quote from the issue: &gt; [2015-08-12 10:06 UTC] taoguangchen at icloud dot com &gt; i think that if the previous deserialized session data is invalid, should not continue to follow &gt; deserialized because it may produce unexpected session data. so i update a new patch for this bug. 
That makes more sense. I think the safest way to handle that is to validate/filter each data point at the time you put it into the database, making sure it's the type/format of data you are looking for, and then make sure it is escaped properly when outputting it somewhere else.
&gt; While probably somewhat desirable for the opcache optimiser and static analysis [...] Right now these symbols and behaviors are so fragmented that it is difficult for *humans* to work with. It would also enable more features in the future to unify them. The fact that it would make it easier for tools to work with (including the interpreter itself) is a secondary effect.
AFAICS, the "solution" by the Joomla team consists of removing the useragent from the session and filter_var validation of the forwarded_for / remote_addr headers. This could mean Joomla is still vulnerable to exploits via other variables stored in sessions.
&gt; Can you elaborate on why you think this? Is it because it encourages people to depend on the existence of a container in a place where there should be no dependency on a container? It comes back to global mutable shared state. This is never good in any context, because it causes every component to think about everything. Conflicts may arise, difficulty in configuration and so on. When one component wants service "a", "b", "c" and another also wants "a", "b", "c" it doesn't mean they want literally the same objects. Having the same purpose, having the same name, and having same type are three different things, many people confuse these. They think, "oh I'll only ever need one of {something}". Famous last words, and why singletons aren't as popular as they used to be. People are learning. If my invoicing module wants a database of invoices, and my blog module wants a database of blogs, it doesn't mean I can just throw some SQL connection at them and stop thinking about it. It's same type, but not same intent and purpose. Think honestly to yourself how is a shared container with named objects different then fetching and writing to $GLOBALS. How is it better? How is it different? Then you can see what the problem is. You already know why $GLOBALS are bad. A shared container of mutable named variables is the same exact thing written with different letters. See beyond the syntax, see beyond brackets and arrows. See architecture, see interactions and dependencies. You ideally want dependency identifiers to be meaningful between two parties only: configurator and component. Not between N components talking to N components. The former is a whole lot more flexible, and easy to maintain, because it's scoped. Its not global. Therefore if you need to refactor something you have at most two parties to change, instead of a tangled mess of N parties. If you think I'm missing something and you need this for your framework, give an example of a problem and I'll give a solution. Discussing in the overly abstract is rarely useful.
&gt; Fixed bug #70831 (Compile fails on system with 160 CPUs). Some people...
How do you deal with 2 instances of the same class? For example, 2 database connections.
Because cache invalidation is hard. It's best to not have to do it
Slightly offtopic: Is there a header to say "Don't bother sending a bounce notice if something goes wrong"?
Exactly. Remember to take hepta-core systems into consideration as a special case, that can turn up as a negative number. Not unlike the number of people that understand irony in this subreddit.
Kind of unrelated, but does Laravel run without problems on php 7.0?
I laughed at that bug, but it's a fair problem; a compile-time dependency hadn't been flagged. I suspect one might find more of these if they used a compile farm. That said, 160 cores in one box, now that's a first-world problem I'd like to have :)
&gt; "There are only two hard things in Computer Science: cache invalidation, naming things, *and off by one errors.*" /fixored. Actually though, I consider cache invalidation to be a subset of the 'naming things' problem, aka see my [previous answer](https://en.reddit.com/r/PHP/comments/3x7294/how_do_you_guys_deal_with_remote_content_and/cy2a9av) 
This made my day.
Quick, someone call Facebook before they launch!
For personal projects I use graph paper and a spreadsheet. The graph paper is used to sketch out high-level architecture and/or UI layouts, and the spreadsheet is used to keep track of individual tasks. The personal projects are just for fun, so there's no client/team interaction. At work we use JIRA, which works pretty well. JIRA seems to work great if the devs/pms break their work out into several tickets. There are some devs who only like to create one ticket for a project/task that's going to take them 2+ weeks to complete. This seems less than ideal because the lone ticket sits in an "In Progress" state for weeks on end, and the pms/clients have to interrupt the developer if they want to get an idea of the current progress that's been made. If you break your tasks out into several tickets, it gives others an easy way to track your progress - without having to interrupt your flow - and it's also pretty damn satisfying dragging a task from In Progress to Ready for Review. Not only that, but seeing that you're making progress can be a great motivator and can ward burnout.
You repeat yourself. You know when your data change. That's when you invalidate the cache. If you don't know *when* your data change, you set a TTL accordingly. If neither is possible, your downstream client is better off going directly to the source.
I've been testing one of my Laravel sites in 7.0. No problems so far. YMMV
That sounds awesome. I'm also in Europe and looking to do a similar thing. I've been freelancing for 3 years and want to settle down with a company and gain experience with a real team and real company. Hoping to start looking seriously in the new year. Do you have to work odd hours for them or are they happy to coordinate with you for just a few hours when your work days overlap?
Yes. I only change my tone if voice, when I mock in a patronising way. And in that case, it's really an insult.
&gt; Kind of unrelated, but does Laravel run without problems on php 7.0? https://travis-ci.org/laravel/framework tl;dr yes
The problem is much easier to solve if you don't need two *global* databases. If you only need a global database, and another database for a single thing, then it is much easier. In my experience, assuming that most things can be auto-wired and using explicit configuration when they can't is **much** more productive than writing all configuration by hand.
&gt; I use my container to store the menu of my application ... This is something you just cannot do with autowired containers. Because **you shouldn't do this** with a dependency injection container. You're abusing the container to act as a global key/value store. If you can't do something with auto-wiring, it probably means that you shouldn't. If you want to use a global registry for stuff, that's fine, but stop calling it a dependency injection container, because it's not.
#### Stage 1: Bullet points #### Stage 2: Diagrams #### Stage 3: Tests #### Stage 4: Code . I have the added headache of trying to be paperless... it's as much of a pain as it sounds, but everything is easier to find as there is not an army of napkins, or walls plastered un-beautiful mind-style (mainly Ideas are not that beautiful)
I use Linux as my work OS, mostly use it at home too. I like Xubuntu. With that said, I don't (yet) see the relevance of using Linux over Windows purely for PHP development. I have never missed anything on Windows when it comes to PHP dev work. Python is a different case altogether, I feel like I need Linux before I can get anything done, I remember the days when pip wasn't readily available in Windows, and that was just clunky to be productive with. The only thing that I can't stand in Linux is the bugs. Especially the ones related to graphics cards. Sometimes I just can't get any distro to work with a machine, sometimes the OS will just not cooperate with a 4 monitor setup. Sometimes I have hard graphical issues while operating with particular software. Random crashes on certain machines... List goes on. Sometimes it all works perfectly though. I've been contemplating a Mac as well - The power of the terminal on a stable OS that gives me access to software I often miss (Photoshop comes to mind). 
OP should explaind his use case more. 
Bounce messages are mandated by various RFCs, and you'd be well served by setting your `Return-Path` to an address that's set up exclusively to handle bounces and other errors.
A tool? Care to share which one?
What you want is inspection of "User Agent" $_SERVER['HTTP_USER_AGENT'] http://www.useragentstring.com/pages/Consolelist/
vagrant all the way
Mostly it is the $_SERVER[‘HTTP_USER_AGENT’] server variable that will hold the user agent but it isn't a easy to read. It is usually a long string. So what you need is a list of possible console browser user agents, check for those in that variable, and then you'll know which browser they are using or console they are using. http://thewebdevelopertimes.com/how-to-detect-mobile-devices-with-php/ http://www.useragentstring.com/pages/Consolelist/ Good luck!
&gt; In class, it was nerve wrecking because I'm always worried that I am not smart enough lol. Is that normal? https://en.wikipedia.org/wiki/Impostor_syndrome
I was looking for an issue in a SQL dump. It was a serialization issue :/
&gt; If you only need a global database, and another database for a single thing, then it is much easier. Please explain why? How will the container know which database to inject where? Another example: multiple Guzzle client instances, one to hit GitHub's API, one to hit another API (so different base URL, different config, etc.). How do you deal with that with autowiring only? And no extending `Guzzle\Client` multiple times with a empty classes just to satisfy some container's constraint is plain nonsense.
I can understand it from a dev-ops standpoint; if everyone is using the same OS, it makes internal support much more manageable and streamlined (think environment setup). That said, I would be highly annoyed if I was forced to use Mac.
And I switched from Windows because it's not awesome for (internals) PHP development.
I can understand the dev ops environment setup approach, but any good setup I've had has been a setup where I installed from scratch. The way I see it is that I'm hired for my knowledge and expertise. A large chunk of that is knowing how to do my job. If a company isn't going to use the skills they hired me for, then I'll probably take another contract instead. I wouldn't turn down or quit a contract over the OS I'm given, but it's certainly something I'll weigh up when choosing to accept or extend. It's just a general indication of how they see and treat their programmers. On the other hand, I worked at a Fujitsu branch once, and wanted to wipe and reinstall my pc. DevOps said they'll be around the next week and we're shocked when I said I could just do it myself if they give me the image. Apparently I was the only programmer there that knew how to use ghost. Go figure
&gt; multiple Guzzle client instances, one to hit GitHub's API, one to hit another API In that scenario you wouldn't be using global instances at all, so you would have something like this with Auryn: https://gist.github.com/shadowhand/61903816f5edaac51b4d
Slim provides a DiC. You simply just have to write the factory functions for them. It's rather trivial but not currently documented well at all. 
A notebook with graph paper to get the scope, requirements, basic user stories etc. Then I use Dia to plot some UML. After that I get to actually writing code. If its my own project I usually skip the UML, but with a team it is extremely helpful.
/u/LeviMorrison could explain it best, he was the author of the RFC and patch. Basically, it's a big technical headache to do, because PHP classes can be defined out-of-order, sometimes in the same file, sometimes in different files, sometimes conditionally at runtime, there's autoloading, etc.
So long as you're not still on 4.2 then it should be fine.
Thank you very much for your kind words. Signed A-paid-shill :) 
Yep love their products, hate the new branding. Reminds me of the London 2012 [logo](http://image.guardian.co.uk/sys-images/Arts/Arts_/Pictures/2007/06/05/olympics460.jpg)
Can be pretty slow if you aren't using a reasonably decent laptop. Even on my laptop that can handle a full VM pretty alright I'm still happier without; leaves me much more RAM for caching things and thus snappier. Also if you use Linux you can use something like systemD containers like you would use VMs, but they're extremely lightweight in comparison. 
&gt; why did PHP 7 decide to go with invariant? It was hard to implement. And by hard....possibly impossible without changing other stuff that needs deeper thought: http://www.serverphorums.com/read.php?7,1173061
&gt; I don't know how to use Ghost or even what it is and I have no intention of finding out. I care about learning about being a better developer and rather spend my efforts on that than learning how to use tooling that is for what is IT support work. I'm genuinely curious (and trying my best to be friendly), but how do you expect to become a better developer by not being inquisitive? If I didn't know what (Norton) Ghost (or general disk imaging) was, I would sure as hell google it to find out. It might not be relevant for something I'm working on right now, or ever, but it might also pop back up in my head in a few years time when I'm trying to do something similar. Close-mindedness and/or narrow-sightedness are not the traits of a great programmer, IMO. Being inquisitive is a trait of the pragmatic programmer, but I guess being adaptable to other workflows might also be one, so maybe we're just having different outlooks on the same goal. 
Yes, hooray for containers! Also, the workflow in Linux may be entirely different, so it's down to individual preferences. I would loathe having to work in Windows and just deploy/test code using a Linux VM - I want the full experience, and a huge VM with X inside Windows just isn't gonna cut it.
Sure, its reasonable to expect that it can be offloaded to DevOps, but I believe it's also reasonable to say that if a job doesn't let me choose my own OS then I'm much less inclined to work for them. Since I get to pick my contacts, I can just choose to work for someone who does allow me to use the tools I deem necessary for my job. As for not knowing how to use and having practical experience in the tools used for things outside of my job, such as setting up my environment and setting up server environments or knowing how to do SysAdmin and Networking, that knowledge has often helped me to contribute in ways that weren't initially thought of when my job was started. And that's the other chunk of knowledge and expertise I'm hired for: A bunch of tangentially related things that may or may not come in useful, but often haven't been forseen yet
And the Netbeans guys. And VSCode. And Sublime. Honourable mentions: Notepad++, nano, vim, Eclipse
I think specifically OP wants to know how to test Slim's not unique, but different take on Di to say using an interface hint in the function name. I think it's stronger to use interfaces than Slim's method, but it might be that I don't understand something under-the-hood. It seems https://github.com/geggleto/slim-pimple-bridge/blob/master/tests/SlimPimpleBridgeTest.php might be a good place to look?
if you changed the example to $app = new \Slim\App(); $app-&gt;get('/foo', function ($req, $res, $args) use ($container) { $myService = $container-&gt;get("myService"); } you'd have slightly more pure DI... but would it be better to do $app = new \Slim\App(); $myService = $container-&gt;get("myService"); $app-&gt;get('/foo', function ($req, $res, $args) use ($myService) { ... } ?
How do people here handle deployment when using task runners like Gulp? I set up a bare git repo on my server with a post-receive hook as in [this article](http://toroid.org/git-website-howto). But this only copies the code, it does not copy the static files generated via Gulp. Do you install npm/gulp/composer on your server and run the tasks there? Or do you use some other deployment method?
There are two subtle differences: 1. PHP-DI requires you to know the order of parameters in order to define them. Auryn matches the name of the argument, not the position. 2. All of your container values are being "named" instead of relying on the interface name. This is dangerous because it hides potential misconfiguration. Auryn only allows interface names. That said, of course there is no difference. It doesn't matter, because this configuration is going to be specific to your application. Container-interop has zero impact on this either way.
I usually would agree with this....but come on. That one was just so obvious. 
&gt; PHP-DI requires you to know the order of parameters in order to define them. Auryn matches the name of the argument, not the position. It's possible too: -&gt;constructorParameter('client', get('github_http_client')) &gt; All of your container values are being "named" instead of relying on the interface name. This is dangerous because it hides potential misconfiguration. Auryn only allows interface names. You are not forced to name all your container values: API::class =&gt; object() -&gt;constructor( object(Guzzle::class)-&gt;constructor(/* options */) ), I just went with the simplest example. &gt; Container-interop has zero impact on this either way. Again, container-interop has nothing to do with the problem here which is container configuration. The goal of definition-interop is to have standard definitions that every container can read to avoid having as many bundles/modules as there are frameworks.
The other responses give a good historical context, but here are some more technical specifics. Consider this specific case: class A { function foo(): B { return new B(); } } class B extends A { function foo(): C { return new C(); } } class C extends B {} The way we did our passes at the time (and I still believe this is the case even on master) meant that trying to verify that `C` is a subclass of `B` (which is required for seeing if `B::foo(): C` is compatible with `A::foo(): B`) would trigger the autoloader. We currently do not have any code that exists that *requires* you to use an autoloader (meaning you can always re-order things and include things in a different order and get around it) so I was very unhappy with that solution. The alternative and better option is to first register all the classes and their inheritance hierarchies then in another pass verify them for correctness. This would prevent the autoloader from triggering in the above case. I expect when we add covariant return types we will take this approach. 
 new Container(include "container.config.php") [WTF?](https://i.imgur.com/q3iCWqE.gif)
I do this at the beginning of every class http://i.imgur.com/L4KeHxA.png
Yes, it should be `require` :D
Probably going to be downvoted to hell for this... I enjoy programming in other languages much more than PHP. PHP seems to be behind the times when it comes to some of the default features in languages (such as Ruby, Java, etc...). I am much more productive in say Ruby than PHP, but anything I build must be maintainable by the rest of the developers at my company. That being said, PHP is what puts food on the table. And with the advent of composer and Laravel style MVC(P) frameworks, and phpunit (any unit testing really) I am seeing better and better PHP code lately. 
You could use browscap to know the capabilities of the devices. https://github.com/browscap/browscap-php Browscap can give you the capabilities of a browser just by looking at the user agent string. Try it out at http://browscap.org/ua-lookup For example, lookup the PS4 user agent string Mozilla/5.0 (PlayStation 4 1.52) AppleWebKit/536.26 (KHTML, like Gecko)
Because they're fucking idiots who wrote bad PHP years ago and didn't notice that was a) their fault and b) the language improved astronomically. I have had people shit on me for years about PHP then I mention I also wrote Go and RoR and I watch their brains melt. Ignore them. They're daft.
&gt; when we add covariant return types When? :\^)
yes. I am running my laravel app on php7 on production.
Working hours are not set - you work when you have time. Because the company employs people from the whole work, from time to time you need to coordinate with the rest of the team. Team leader gives you tasks which you need to finish an off the way you go. In the most cases team leader will be from your or near your time zone, so no problems there :)
I regularly poke holes in proprietary Java/C# apps for fun, only to be told by Java/C# developers that PHP is inherently insecure.
Yes, I believe it is more of a matter of "when" than "if".
hmm, it would have been nice if PHP can inject dependencies into closures via use statement. $f = function ($req, $res, $args) use(MyService $myService) {}; $f-&gt;bindTo($this)-&gt;inject(new MyService)-&gt;__invoke($req, $res, $args);
This bug was really crimping my PHP supercomputing.
I've had bad experiences with Windows + Vagrant. I like having my code repository on my host computer for a couple of reasons: - Being able to access the files even when the box is down - Being able to share it to multiple box at the same time (instead of each box having its own copy) - No more network read/write. It's faster to open files, edit files, search files. With Mac, I share the repo from the host computer to the vagrant box by using NFS. With Windows, I can't use NFS.. so I'm forced to use SMB shares.. which really sucks. It takes a while until the box realize the file has been modified. For sane developing environment on Windows, I'm forced to host the files on the vagrant box and share them to the host computer.. which isn't really optimal. Most of the time, it works, but a lot of the times, it just hangs. 
Wouldn't it be equally useful to have `$foo?-&gt;bar?-&gt;baz`?
For this, if they do, its their fault so it does not concern me much. However I have to say I did think of that. :)
A bad worker blames his tools. I don't give shit what language people use. Heck, I was pushing for a RoR API layer because it seemed more fit for purpose than PHP. If a PHP code base has problems, look at the developers.
Funny thing is it powers a lot of Facebook and also Wikipedia. Yahoo also uses it extensively. So big sites are using it. 
Sir let me escort you to [/r/forhire](https://www.reddit.com/r/forhire). ( ͡° ʖ ̯ ͡°)
Net beans is years behind PHPStorm 
You're right about keeping code on the host computer. This used to be a huge pain point. But Windows has had an NFS Vagrant extension for a while now so it is not a concern anymore.
I may not be an authority when it comes to DI, but I didn't think it was as subtle as type-hinting. My understanding of DI is when the dependency is injected into the constructor. class SomeClass { $dependency; public function __construct(Dependency $dependency) { $this-&gt;dependency = $dependency; } } EDIT: I'm here to learn. Be gentle.
To everybody who posted here: I love you guys! :)
Fuckin +1 for nano bitchessssssssss
&gt; standard definitions that every container can read The current `definition-interop` is so bad that statement makes no sense. The only way to effectively configure a container is with actual code, not arrays or (god forbid) YAML. I think the root point here is: container-interop solves a problem that doesn't need to be solved, because anything specific to your application is going to be configured anyway and having a standard "container definition" (whatever that is) doesn't help anything.
My development server at work only has 32 cores, now I feel like I should ask for an upgrade :P
etsy, mailchimp, flickr, slack to name a few more.
Yes, you can handle any HTTP request verb. As for long running php scripts serving http - of course you can do it. You need to write your own web server in PHP though and there are some options. Non blocking server like react.php or threaded server. Non blocking paradigm needs all libraries to work with callbacks or promises and most php libs don't. Threaded server would not be much different from PHP-FPM. Also you will lose the main strength of PHP - isolated context. Threading is rearly used because php devs tend to use queues and separate process workers for long tasks. 
This comment made my day! Thanks
&gt; Why do people insist on saying that pulling dependencies from within a method is dependency injection?! The page, technically, does only say the container is injected, not the dependencies within the container. So, technically, it's right.
How do we know they are real CPUs? Can't you just make up the number of CPUs you have by splitting up time slices of your real CPUs?
&gt; My first knee-jerk reaction is to use PHP's threads to emulate what's amazing about Node.js node.js doesn't have threading, it uses event loop (for php you can use amphp or reactphp). Event-loop is perfect for interacting with non-blocking I/O. With threads you will have to deal with locking and context switching, so performance will be never as good as with event loop. Golang's goroutines for example is threaded event loop (excually threaded corooutines). If you want to get best performance, then I recommend you to see [amphp](http://amphp.org) project. Also there is [php-pm](https://github.com/php-pm/php-pm). 
I'm going to admit, doing programming for money sounds horrible. I hate the moments when I'm banging my head against a brick wall and I do this for fun. I can't imagine how frustrating it must be for people who *don't* enjoy this
Both examples (yours and /u/rodrigo-silveira 's first) are injecting dependencies correctly. The difference is that yours assigns that new Object to a property of that class so that it can be used by other methods. The first example just uses the Object to return a value. Of what I've seen, injecting dependencies into anything other than class constructors is not incorrect, but is rather discouraged. I personally would do as you've illustrated, but if the class only has one method then injecting and discarding (I assume) is perfectly ok. But yeah, that's just like, my o[pinio](https://www.youtube.com/watch?v=XVCtkzIXYzQ "The Big Lebowski")n, man. I'm not an expert and I'd welcome any remarks. 
Good, work, retard.
I completely agree! But on the other hand, I've met a few people who seem to like it, but they don't have it as a hobby (and/or don't really seem that eager to spend time learning new things). I'm pretty sure that works, but compared to someone who lives and breathes it, you're bound to just be...average.
Static typing does not correlate to a better language but w/e.
THE Phil Sturgeon?!
wow that's awesome. I didn't know there were companies that worked like that. I've seen adverts with "we have people all over the world" but didn't expect them to be so organised like that. Hope I can find something like that in the new year.
PHP isn't used for a lot of major services on popular websites, just as much as it is used. PHP is very effective if you need something like a login form or any dynamicly static content from a server. It isn't as useful if you need something that acts as a server on its own, such as node.js. Languages like Ruby are easier to work with, and have some cool capabilities, but rarely are those abilities needed, and the technology for it is not nearly as popular or 'well-solved'. PHP gets the job done, does it well, and is easy to work with. Most people base PHP on V 4 and below, but thats just not how it is anymore.
I have been using it on php symfony2 projects and also small C projects. I see issues in both types of projects.
Just be persistent, and don't quit on the first failure. I had more then 20 interviews before I got this job.
Ah I think I understand what it is you're trying to say. In my opinion then, people should use Hack where it's relevant, for scalable multi-platform projects (such as Facebook), and PHP where relevant within those platforms. Arguing which is better when either is arguably better depending on the implementation isn't really worth it. 
&gt;if your server has 16 CPUs, and you have 16 simultaneous users, you are already using all your CPUs, there is little benefit in using threads compared to the increase in complexity it would bring. You're ignoring the time your CPU is waiting on other resources, such as disk or network. I've not done any multithreading in php as the last time I looked into it you could only spawn new threads via cmd line instantiation of php and not from web requests (has this changed?), but with Java I can usually run about 5x the number of threads as there are cores before I stop seeing performance gains.
The writing is too small. All they need is the same logo but instead of "PS" and a random underline, it says PHP Storm
am I the only one who thought I'd installed Photoshop by accident after upgrading?
"Just because no one got paid to make a post doesn't make it any less of an advertisement if it acts just the same as an advertisement." /r/HailCorporate 
In all honesty it's not an improvement (sorry, I know that probably sounds pretty dickish but there's really no way of saying it without coming across as an ass).
I have higher res if you want
agreed, and that's why I made this new one. I'm still wanting to explore this more. 
BTW I failed to mention, this is for the app's icon. I was tired of seeing Photoshop and PHPStorm both reading "PS". Here's the one new one next to the Photoshop icon: https://www.dropbox.com/s/nms9jr9gtq0rb1o/Screenshot%202015-12-18%2008.13.14.png?dl=0
Nah you won't get downvoted *to hell* with this. This is your sole opinion on using PHP, and you are less productive with it. It's not a blind assumption that PHP is not for PRODUCTION.
The main reason I use single quotes is to tell the reader that there is no interpolation in a string.
&gt; Why do people insist on saying that pulling dependencies from within a method is dependency injection?! I wonder if it's a confusion of the term "inversion of control." IOC can be accomplished by injecting dependencies, or by using a service locator. Cf. http://www.martinfowler.com/articles/injection.html
+1 for PhpStorm. With the introduction of proprietary licenses as well as slashed upgrade price (+2nd year free) works out I'm paying £20/year and at the end of 2018 I get a full copy... Can't compain with that! 
The Real Phil Sturgeon! :)
I'm tired of arguing about this. Neither of your points make any sense because configuration is, by definition, unique to an application. If it is generic configuration of a module/package, it is the library defaults. That is the simplest and most effective pre-configuration available. Anything else is going to be in the realm of the application, which means that container-interop and definition-interop are pointless exercises.
&gt; The resources consumed by the creation and execution of a Thread in PHP are comparable to the resources consumed by a process: PHP is shared nothing, so that each thread requires it's own interpreter, along with a copy of everything, including all user code. depending on what you want to achieve, this might be completely acceptable. As he sais "like node" i can see someone using one of the non-blocking frameworks and implement a database solution for those based on pthreads, which would be beneficial to the solution he needs, no matter the higher resource usage. 
For anyone that thinks .Net is more secure because it's "enterprise grade" get yourself on an email list for a hosting company where they let you know what they've had to patch. I get at least one email a week for one of my client's servers letting me know they patched a mile long list of security vulnerabilities. To call IIS/.Net swiss cheese would be generous.
Pornhub runs on the Symfony framework, IIRC.
&gt; I've not done any multithreading in php as the last time I looked into it you could only spawn new threads via cmd line instantiation of php and not from web requests (has this changed?) If you're using something like PHP-FPM then you can configure how many processes it spawns. You could do some testing and find the right number of processes that make optimal use of your system's resources. Of course, this doesn't make your application multi-threaded, but it does allow multiple PHP processes to run in parallel, meaning multi-core systems can handle a lot more requests.
For less than $100 I'll buy it every time since it's how I earn my living.
Nice one, G.
As a dev you should know how much it means to hear positive feedback from people who use your software 
To add to this: Many people know how to develop a user authentication module that seems to work, but is actually very insecure. Some examples: * Poorly implemented "remember me" checkboxes that serve as a universal backdoor * Poorly implemented password reset features that allow an attacker to reset anyone's password * In increasingly rare instances, they store passwords in plaintext and write code vulnerable to SQL injection If you're looking for cheap, you'll get cheap. And by that second cheap, I mean probably "0wned".
Agreed. When I was taking place in a security competition I chose to rewrite the provided web application. I easily spent 10-15 hours just doing enough research to be confident in my very basic authentication/authorization system. But I'm sure for every person that does their research and carefully implements their findings there are hundreds who say: &gt; I got this breh. \*appends the word 'salt' to the password\*
PhpStorm is way over what I've been expecting from an IDE. Adding all the great integrations such as Gerrit, VCS (git) and even less common tasks management services such as Pivotal tracker. It made my life as a developer way easier than I imagined.
I can confirm this. They should call it .Ch
+1
I'm pretty sure being inquisitive is not something you can choose to be, or be it selectively. We all have finite amounts of time.
I found the balance is that I don't laden enough of everything to be proficient in it, just enough to know how to become very quickly. I consider myself very good I'm PHP, and Database Design, with some good knowledge in Served Admin and Front End. I don't know CSS well, and my JS was middling, but I knew enough to pick up from the front end devs job in the three weeks notice he gave. I know Python a bit, but not well. I know it well enough that when told to quickly prototype something in Python I know where to go to learn it. I know a tad of e2e testing, not enough to use but enough to quickly research on it and being able to dig deep very quickly. I find the largest chunk of time in learning goes to the basics, so I get a passing knowledge on basics so I can skip that later. It leaves enough time to really expertise in one area while giving enough knowledge not to become jack of all trades, but to say I could become useful in that area quickly. But it's not just programming for me. As a contractor I have enough varied work experience that in almost all situations I have an anecdote from the past about what previous people did right or wrong and how to avoid that in the future. That's valuable in itself
It's a "professional" tool, so either your employer pays the bill, or your a contractor who can easily afford it and depends on their tools for income. I know what you mean though, it is frustrating when you want to just play around outside of paid work and can't justify committing to a license (I go through that every time I want to learn a new language)
Have you ever felt that if you edit your container config in a bigger app you can't instantly tell which parts of your project will break? That things break that came out totally out of the blue, completely unrelated to the intended change. You start to kind of fear making changes, because you can't even anticipate what might happen as a result? Things really seem locked together? You find yourself writing similar code over and over because large chunks of it seem hard to configure and reuse flexibly across projects without editing its source? If you always have a solid grip on your projects, refactor confidently and without unexpected side-effects, and avoid unwanted duplication, I guess you don't have a problem and I'm just an asshole talking down to people. But I have yet to see a project manage to juggle unbounded mutable shared state without the above problems.
Our production server has npm installed. We setup composer the same way we would if we were using Heroku, which means: * composer install * composer compile (custom script which will run npm install and gulp) We plan to use some kind of PaaS in the near future.
Here are 2747 examples: http://knpbundles.com/
&gt; I guess you don't have a problem and I'm just an asshole talking down to people. I never said you were an asshole :) I'm just hoping to consume this information in a different way than you're able to provide it. A learning disconnect is all. I still appreciate your time.
They probably mean as a backend. Even Facebook does not use PHP for their backend services as far as I know. Yahoo only uses PHP for their frontend and they are switching their frontend to node.
Looks like your where logic is off: select * from table where `date_field` &gt;= $date and `date_field` &lt;= $date or `field1` like '%search%' or `field2` like '%search%' or `field3` like '%search%' This is making the date optional because your logic reads as the date should be between this and this or search should be like this field etc. It should be like: select * from table where `date_field` &gt;= $date and `date_field` &lt;= $date and (`field1` like '%search%' or `field2` like '%search%' or `field3` like '%search%') ~~EDIT: Also mysql offers `between` which would make that date query read a little better.~~ I have a goldfish memory and forgot you were building this with CI's Active Record. 
That depends on what you mean by 'backend services' :) We definitely have PHP and Hack in a lot of places that aren't frontend - but a lot of other languages too, especially Java, C++, and Python.
Awesome to hear this project is moving! &gt; If you use Monolog a lot and have thoughts on what should change in the design, please open an issue! How about [PSR-3 kind of middlewares](https://github.com/Seldaek/monolog/issues/705)?
well you found some crap so surely all of it must be like this…
Most importantly, it has nothing to do with dependency injection.
By that logic [Monolog and PHPUnit](https://packagist.org/explore/popular) must be perfect examples of clean code.
Depending on what you mean by linting: it's typesafe - eg it will warn you if you pass '2.4' to an int (we found this to be fairly common for 'size' attributes) Sanitizing: safe **by default**. `|escape` or `|e` is very easy to forget; it is intentionally hard to include non-escaped strings in XHP - though possible intentionally: https://docs.hhvm.com/hack/XHP/interfaces#advanced-interfaces__xhpunsaferenderable Async support: https://docs.hhvm.com/hack/XHP/extending#async Extensible - custom XHP components are much nicer to work with than any other 'sub-template' system that I've ever worked with. For example, the breadcrumb links at the top of https://docs.hhvm.com/hack/reference/function/HH.autoload_set_paths/ are rendered with: &lt;ui:breadcrumbs parents={[ 'Hack' =&gt; '/hack/', ...] } currentPage="HH\autoload_set_paths" /&gt; Code here: https://github.com/hhvm/user-documentation/blob/master/src/site/xhp/ui-breadcrumbs.php
I start with database design, business workflow... but try to get a working primitive prototype of the logic together very soon... so by playing around with the prototype I get ideas what I missed and where I was wrong or what was impractical or badly designed. Only when I have a feeling that I'm beginning to know what I'm doing and why I'll try to implement one piece of "final" code. As long as I'm in doubt with a certain detail, I stop to code that feature and continue elsewhere. If you will, I work ADHS style :)) Somewhere in the back of my mind, my brain will find a solution for the stuff where I was unsure. Difficult to explain.. but hey, after 20 years of software development.. I try to write as little resulting code as possible (read: poetry) but have no problem with changing code 20 times... to really cut down to the bones. Not because I want to win a prize but because of less code, less maintenance cost. I know what it's good for but I still don't like the OOP patterns.. much too much code IMHO.. wrappers and getters and setters, useless empty objects thrown around.. I agree these may be my personal limits but I'm doing fine. The rest is refactoring.. Last month, I had to modify my own code of 6 years ago, used in several sites over the world (pharma, validated code..) and had no problem with it - because everything was open in plan sight.. I'm sure someone else could have done it but I might still be faster :) What also helps a lot is that the employer lets me add my ideas and somewhat question everything before the function spec is written (or I insist). Sometimes we convince the customer to take another approach which usually solves a problem the customer has not even been aware of. 
&gt; One typical example of this would be [Symfony2 bundles](https://github.com/nelmio/NelmioCorsBundle/tree/fa14a81) that follow the best practices layout of having all sources at the root of the repo. What? Why and since when is that a best practice? Or is that something Symfony-specific?
~~Anyone know why PHP 7 would throw this error:~~ &gt; ~~Warning: Constants may only evaluate to scalar values in /var/www/source/paths.php on line 7~~ ~~`define('PATHS', [1,2,3]);`~~ Edit: vagrant box issue, had to provision 
Also it's quicker to type.
Its convenient, but a yearly subscription for a piece of software that I'm not making money with doesn't make much sense. I'm fine with proving the project is opensource and deserves some recognition, but the price to meet their qualifications for a free license is the cost of the license itself already.
&gt; twig also have escaping by default. Ah, sorry - that's not what the front page of twig.sensiolabs.org implies; it seems that it's only on... if you turn it on with `{% autoescape true %}`, so not by default? &gt; It doesn't require async template inclusion/extension since all templates already compiled to fast functions. So... that's subtemplates. XHP gives you a clean way to say "this subcomponent needs this data", and to load it efficiently - you don't need to care about the data that your subtemplates need. That change makes async very relevant, and tends to lead to cleaner code. Async doesn't make your actual code any faster, it allows you to interleave IO and PHP - 'compiled to fast functions' isn't relevant to it. Not replying to the other stuff as that seems like mostly a matter of preference which I'm happy to just disagree with :)
Yes, but *when*.
A majority of good programmers don't have the time to tune into discussions like this, the downvoters probably don't want to admit that PHP is a different use case than node.js, or that Ruby is no where near as popular. If we could all do Ruby, that'd be cool, but its just not had the history for it yet, which doesn't mean we shouldn't use it, but the same goes for PHP.
&gt; Automatic escaping is only supported if the escaper extension has been enabled (which is the default). &gt; What you talked about is usefull when you have some special requirements for escaping for part of template. &gt; So yes, twig does have escaping by default. Did a bit more digging as supported by default !== enabled by default: &gt; Twig supports both, automatic escaping is enabled by default. (http://twig.sensiolabs.org/doc/templates.html) So yep, you're right :) I'll find out their favorite way to receive feedback, the front page of the site strongly implies that it isn't: both the examples at the top, and "can be enabled" in the "secure section".
First, stop time travelling. If it's happening in a CLI script, run it through valgrind. That usually picks up segfaults reasonably well. If it's not happening in CLI, or valgrind doesn't pickup the problem, how about POSTING THE FRICKING ERROR MESSAGE RATHER THAN SAYING "i get something about a truncated file". You also might want to post whether you're running it as an Apache process or what the environment is.
I don't like that practice much myself since it makes the GitHub frontpage rather long. It also means that finding the important meta-stuff (makefiles, config files, READMEs, license info) is harder amidst all the source files.
So what you mean is you have the PHP master branch checked out. 7.1.0-dev is a standard placeholder name. There's no official branch, nor any alpha/beta/RC release.
Yes. I have the master branch.
This also happens on the 7.0.1 release, I just got the master branch to compile with debug enabled.
I have tried to think about how to report this to the bugs page on php, but since I can't get it down to less than the project its in (Li3 framework), I don't really know what I can do. I've tried everything i can think of to get debug information to maybe wittle it down, but i've got very little so far.
7.0.0 and 7.0.1. Not on 5.6.14.
Is it in the unit tests for the app? If so I'd just report it like that, so long as the source is available online. 
Yes it is. Okay, i'll give it a go then. Edit. https://bugs.php.net/bug.php?id=71163
Fair point, but "PS" is far worse IMO for several reasons. (And having text on there has little to do with scalability, it's a short name.) The icon should be clear and easily distinguishable, which the old logo was. They should have made a modern version of that with the same PHP purple.
&gt; Or is that something Symfony-specific? Symfony specific. Lots of bundles [have their sources at the root](https://github.com/FriendsOfSymfony/FOSUserBundle), but you can [just do it "normally"](https://github.com/chrisguitarguy/RequestIdBundle) if you like.
As it turns out, neither of those projects have any sort of container or configuration-specific classes. I'd say they are better than most Symfony bundles in that regard.
Were we supposed to be waiting?
https://i.imgur.com/0C1lBMu.gif, that's a great conversation starter.
Good to know. Are there any relatively new services (Backend) that were built in PHP or are those PHP backend just legacy backend services that were built when Facebook just got started? At the Facebook's scale, what are the advantages of building a backend in PHP when there are other better languages for *BACKEND*, especially Facebook has enough resources?
Sure, I was saying you don't want to start a Thread for a single database operation. Dispatching many operations to another Thread might be a good idea, because you are reusing the expensive context.
Literally none of that is "magic", or even unique to PHP.
'Service' is probably the wrong way to think of it; I guess the best way to describe it is: if the problem is 'I need to do &lt;a&gt;' with a straightforward definition of a*, it's probably not PHP. If it's "I need to combine &lt;a&gt;, &lt;b&gt;, &lt;c&gt; to produce &lt;d&gt;" it probably is PHP - because the frontend is PHP, everything has a supported PHP interface. Otherwise you end up with services along the lines of: $a = make_http_call_to_php(); $b = make_another_http_call_to_php($a); $c = make_yet_another_http_call_to_php($a, $b); ... and this makes no sense, both from a reliability and performance point of view. This applies to both real-time services and cronjobs etc. * straightforward definition means simple to describe the goal, not that the problem or solution is actually simple
 list($result, $error) = validateString($str); if($error){ // Do something. } Isn't that what exceptions are for ?
*Here's the Urban Dictionary definition of* [***quent***](http://www.urbandictionary.com/define.php?term=quent) : --- &gt;A gentlemanly way of saying cunt! --- _Example Usage: "I kindly ask you to refrain from using my wife's ass in that impertinent manner, you quent!"._ --- [^(about)](http://www.reddit.com/r/autourbanbot/wiki/index) ^| [^(flag for glitch)](http://www.reddit.com/message/compose?to=/r/autourbanbot&amp;subject=bot%20glitch&amp;message=%0Acontext:https://www.reddit.com/r/PHP/comments/3xfprz/some_magical_cool_things_of_php/cy4bfb0) ^| ^(**Summon**: urbanbot, what is something?)
Also it is just an illusion. You are just returning an array. You could do the same in C++ with a few extra lines.
Then you missed the [Silex service provider](https://github.com/silexphp/Silex-Providers/blob/master/MonologServiceProvider.php), the [Symfony bundle](https://github.com/symfony/monolog-bundle/blob/master/Resources/config/monolog.xml), the [ZF module](https://github.com/enlitepro/enlite-monolog/blob/master/src/EnliteMonolog/Service/MonologServiceFactory.php), the [PPI module](https://github.com/ppi/ppi-monolog-module/blob/master/ServiceManager/MonologConfig.php)…
I own http://www.gamerlaunch.com/ and we built our product for people like you all. We have a tournament system or you can embed another and we have far more regular social networking style functionality beyond that. We are the official clan hosting site of SMITE and we are working to support all eSports so any feedback is welcome whether we work for your needs or not!
Yup, which is why I only interview for jobs that fit the skills in which I consider myself very good at. The other knowledge just comes in handy for unforeseen things later
Haha. I love to watch the rising frequency of the term "fuck" in the comments of a post who is very liked and uses "fuck", too. Humans.. Gotta love 'em.
I also use it with a custom framework, and it works fantastically. Can you please expand on what it doesn't handle, and what Eclipse does better?
I get into issues when trying to run a game on one screen and have another one active. That's pretty much the limit of my 13". But normal working is no issue at all. I'm sure I could add a second monitor like you do. 
It looks like it's fixed now?
I've just tested with the latest EAP, my problems seem to be gone. At least the biggest ones. But I still have at least one problem. The problem I had with phpStorm 9 is that it couldn't find the classes I was calling (and so their methods), nor most of my constants : - No autocompletion of any sort - IDE was throwing me errors that weren't errors - Etc... I'll give you one simple example of the problem I still see config/paths.php &gt;&lt;?php &gt;define('PATH_CONFIG', '../config/'); config/routes.php &gt;&lt;?php &gt;$array_main_routes = [an array with the routes]; htdocs/index.php &gt;&lt;?php &gt;require_once('../config/paths.php'); &gt;require_once(PATH_CONFIG . 'routes.php'); &gt;[code that sets the autoloading] &gt;Frmwrk\Controller::setArrayRoutes($array_main_routes); The IDE is telling me that $array_main_routes isn't set.
Having recently done some work with Google's API: The free version is limited to 1,000 requests a day (or maybe it was 10k? Can't remember now!). It also rate limits to ~5 requests a second. A license is quite expensive, as well! However, google's api is *extremely* accurate, fast to respond, and has many addresses that other apis don't!
[**@taylorotwell**](https://twitter.com/taylorotwell): &gt;[2015-12-19 14:39:57 UTC](https://twitter.com/taylorotwell/status/678223244940345344) &gt;Uncle Bob is an anti\-pattern. ---- [^[Mistake?]](/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=/3xh1wz%0A%0APlease leave above link unaltered.) [^[Suggestion]](/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
Huh.. Well, autocompletion for included globals isn't really on my personal wish list. Just a tip for you, then: You can return things from files when you include them, so this would work (and give you autocompletion): config/routes.php: &lt;?php return array(/* Array with the routes */); htdocs/index.php: &lt;?php ... $array_main_routes = require(PATH_CONFIG . 'routes.php');
So basically you're saying none of the problems I mentioned speak to you? I can't provide a code sample for a problem that only occurs once a project reaches a certain size, it's just not how it works. I'll need to define the project, its needs and goals, outline the architecture, then explain how it was materialized as code, and only then I can talk about the resulting problems in specifics if there's a shared container in the middle of it. Demo code doesn't need a container.
&gt; ... random statements like that. Bombastic, insulting and void of any specifics or insights. ... &gt; Twitter 
Well, what were the things you found interesting? Most of that stuff is subjective. If I were you, I would suggest trying out Docker, or that you try to learn a language you don't already know (and how they do things differently).
It wasn't an insult, it was a joke. He was arguing with folks about dev UX vs. "proper" design again. Context FTW.
If they're paying the bill, I do
Can someone pretend that I have no idea what’s going on and explain this, because I don’t?
Hi, I suggest you take a look at our Skeleton project! https://github.com/slimphp/Slim-Skeleton If you still have any questions there's usually someone lurking around in our IRC Channel that can further help you out!
Taylor Otwell is one of the few people who keep this job fun for me. If you pay any attention to anything he says, you'll find the man has a great deal of humility. This is a joke. Everything is a joke. SRP
I disagree with this approach because you have created an instance just to provide to the router. If the route goes somewhere else then the instance goes unused and you waste CPU/memory/etc. The slim router will instantiate the class for you before it calls it, using the DI container as the parameter. The other dependencies should be fetched from the container IMHO.
Dependencies should always be injected. And not through a container because then you're lying about what you need.
Automate all your tools. Unless you've done this already, getting everything set up to do CI integration testing either with Jenkins (or something good), being able to do database migrations on deployment, and being able to do deployments with either a single button push or command line script is both an awesome thing to learn how to do, and saves so much time over the course of a project. Failing that, look at a [powerful Dependency Injector](http://www.github.com/rdlowrey/auryn) library and let it change how you write code. 
My point still stands. What are the topics you find interesting? I could tell you about a bunch of stuff I'd recommend people learn, but you're asking for personalized advice - so tell us what you already know and what you find interesting. Without it, even my best advice is a shot in the dark. EDIT: In other words, when asking "*what should I learn?*", also give an answer for "*well, what do you already know?*".
Learn how PSR-7 middleware works. It's going to be the next important thing in PHP web development. Here's some links: - http://relayphp.com/ - https://github.com/relayphp/Relay.Middleware - https://github.com/oscarotero/psr7-middlewares - https://github.com/zendframework/zend-expressive
To everyone checking out the link, let me know what you think anytime! :)
bash scripts, bash scripts for everything you do more than 5 times a day... Or even simple bash aliases save me tons of typing each day...
Maybe learn about the SOLID principles ?
&gt; A Worker persists until it is explicitly shutdown. Wait, are you telling me that a Worker has an arbitrarily long-lifetime and it's NOT the lifetime of the script? I was operating under the assumption that Workers died upon the script terminating. If this is true, this changes everything. Also, you're understanding of PHP threads is amazing! Edit: Okay, I just checked the PHP manual. They *do* die when a script goes out of scope. But all I have to do is create a persistent-reference to the Worker. I can just create a PHP script that can run indefinitely which references the Worker. But how would I implement this well? Do I turn the PHP script into a server and listen on a port for incoming Threads? I could process requests by pushing the passed-in Thread to the Worker. Basically, I'd have to write a mini-server in PHP, right?
This affects your integrity as an expert. You need to not just be a code-monkey churning out lines because some suit wants you to
I think you should learn stuff that apparently has nothing to do with programming but will make you smarter, I recommend Math and Philosophy.
I must echo this as well. PHPStorm has actually helped make me a more disciplined programmer. I can't really explain why.
To take a another approach (which also benefits both you and the client) - and maybe make your job easier in the feature with the client. What if you client want X feature, would you need to rewrite a bunch of the code? Could you change the code so it would be easier for you to implement X. Thats how I learn(ed) my self SOLID. An example from my world - I made a product import for a client, which get attributes from many 3rd party sources. In the beginning it was simple reorganizing a database structure into a webshop. Later the client wanted some data from a 3rd party integrated - but it needed to get the data from the client source first, so event management was now developed into the project.
Maybe they're friends and it's a joke?
Read about PHP internals. Learn Hack.
2 &amp; 3 can be done with commit hooks. 
very recent books are still going to be valid because a lot of PHP 5.x is still valid in PHP7. If you still want to wait, you can use http://phptherightway.com/
&gt; Node.js does have threading. Not out of the box. And my point is that event loop is more efficient way to handle I/O. Especially if you have several processes (like nginx does).
They wouldn't need to calculate all scores since they can say with reasonable accuracy that two people would never work just by distance. After restricting the set of possible matches to those nearby I would pick a few randomly and calculate the scores. Once I find one that's close enough I would go find the set of people that matched that user pretty well since they are also likely to have a good score with my target user. And I'd only do this until I get enough people to populate the UI. Once you get close to exhausting that set I'd follow a similar pattern to give you more people. Just a guess, but the general idea is that scores probably form clusters of similar people and the calculation can be performed lazily.
Can you explain how you get this pricing? As a generalist, I like phpstorm, but my coding is infrequent enough that I make do with atom, currently. 
Ignoring the actual discussion of whether the general idea is a good one or not for another time.... public function delegate($spec, callable $using); This ought to be not a callable but instead either a callable or a `['className', 'methodName']` where the method is _not_ static. Being able to delegate to interfaces/class methods is awesome, as it allows you to use far more powerful bootstrapping techniques, rather than having to tie everything together by hand. Even though it's in the DIC I use, I don't like this bit: public function make($spec, array $args = []); The short version is that how the args are used can lead to very surprising situations. A very simple example is $injector-&gt;share('foo'); $foo1 = $injector-&gt;make('foo', $args1); $foo2 = $injector-&gt;make('foo', $args2); //Args 2 are not used. Probably Without looking _very_ carefully at the code, it is not possible tell which args will be used in all scenarios. 
I agree but the is is how the router calls things in slim. For myself the container is the only used up to this stage.. I use direct di from then on, but I don't get how else the framework/router is going to inject this? Maybe I'm just missing something but this is how slim is supposed to work, right?
This, or also NodeJS will so the same thing and works pretty well. I'm a bash affictionado but started doing a lot of what I used to do now in Node, plus you gain a lot of nice tools that you can grab off NPM on top of it.
Spend the time learning how to market yourself. Telling someone your level of knowledge will not make them hire you, telling someone how you can improve something for them will.
Interesting. Never heard of that one. I've subscribe to their channel. Thanks 
I like NetBeans. Great tips man, thanks 
Hardly anything in Node.js is done out of the box. But that's kind of the point. Node.js is like the Arch Linux of web development.
If you haven't taken a look at Laravel, there are a lot of really good concepts the framework teaches such as dependency injection and IoC.
So OKCupid rates you on a series of different dimensions, I think something like 11 (consider: humour, politics, intelligence, etc). So they're never comparing your answers to anyone else, they're comparing your ratings in these 11 dimensions, which aggregate all the questions you've answered (let's ignore "mandatory" answers for now). By default it offers to scope your searches to the people around you, in those screens you're only comparing yourself against the people of your chosen gender within a radius. So you're searching across thousands of people, not millions, and can probably filter out anyone with very different answers effectively (if you're an 89 in the humour dimension, you're best match didn't score a 3). There's fun math things you can do like [dimensional reduction](https://en.wikipedia.org/wiki/Dimensionality_reduction) to help reduce the number of dimensions, and thus the number of comparisons you need to make. Most of the founders were like MIT math grads. There's also plenty of ways for them to help themselves: * pre-calculate your matches when you login rather than waiting for you to ask for them * pre-calculate global matches in batches * scores can be re-calculated against matches in a pool if questions have been answered more recently than the cache was generated. * map people to given zones of the n-dimensional space, and start searches with people in that zone (easy index)
They more than likely use a statistically based model that returns a score. Then they compare scores between a range against different profiles. Only have to score the users the first time then if there are any changes. Then just compare scores using simple comparison logic or queries. Would be faster. Source worked on statistically based calculations in business systems.
You're passing a string to mysql_connect, not your variable.
OK Cupid was started by a few math majors who met at Harvard. They wrote a web server from scratch in C++ so that each request could perform all of these calculations on the fly. Things are probably a lot different now, but I always thought that their approach was insane. I know a guy who does devops for them, but never asked about the specifics, he might know more. I will inquire. 
omfg *facepalm*.. I am following a tutorial and that is how they were doing it.. It fixed the first die(); But now it wont find database. Thanks for reply btw.
the mysql extension, which is different from mysql the database type, has long been deprecated and is fully removed in php7. Use PDO for your database interaction https://secure.php.net/manual/en/book.pdo.php The @ in front of the lines of code suppress errors, which is bad practice. Fix errors, don't hide them.
Thank you so much. I am a game programmer with only exp. in c++ and c# but have a possible web dev internship comming up and am trying to learn as much as I can before then. It's working! Cheers Mate.
oh yeah this is 2012.. I do like using phpmyadmin and xampp though.
Welcome to PHP :)
I'd do the reverse. Read up on the backwards incompatible changes. Those topics are what you should learn first. Then you can pick up a 5.x book if you want. Now you know how to program PHP 7.x.
I would not recommend using the `classname:method`approach to binding your routes. Instead, you can use the 'servicename' approach where 'servicename' is a named thing your DI container provides. In this case, it can provide a factory. class IndexController { public function __invoke(Request $request, Response $response){ return $response-&gt;write('Hello Wold'); } } class IndexFactory { public function __invoke(Container $container){ return new IndexController; } } $app = new App(); $container = $app-&gt;getContainer(); $container['index_controller'] = new IndexFactory; $app-&gt;get('/', 'index_controller'); Why this method over the `classname:method`? When you start needing dependencies in your controller (like for persistence) you'll probably need to get dependencies from the DI container. It's better do the logic of extracting dependencies from the container in the factory and then injecting your dependencies into the controller. For instance: class IndexController { private $postsService; private $twig; public function __construct(PostService $postService, Twig $twig){ $this-&gt;postService = $postService; $this-&gt;twig = $twig; } public function __invoke(Request $request, Response $response){ return $response-&gt;write( $this-&gt;twig-&gt;render('template.html', [ 'posts' =&gt; $this-&gt;postService-&gt;getPosts() ]) ); } } class IndexFactory { public function __invoke(Container $container){ $twig = $container-&gt;get('twig'); $service = $container-&gt;get('post_service'); return new IndexController($service, $twig); } } Why is this better? Well for one you will be able to unit test your index controller much easier. You wont have to mock (or instantiate) a DI container to return service mocks. Instead you only have to mock the services directly. Second, is you've separated two very distinct concerns, providing instances/dependencies, and controller logic. For instance, the example above doesn't address edge cases of what if the DI container doesn't have the necessary services? class IndexFactory { public function __invoke(Container $container){ if(!$container-&gt;has('twig')){ throw new \RuntimeException("DI container does not provide `twig`"); } $twig = $container-&gt;get('twig'); if(!$container-&gt;has('post_service')){ throw new \RuntimeException("DI container does not provide `post_service`"); } $service = $container-&gt;get('post_service'); return new IndexController($service, $twig); } } Now this example addresses a likely scenario (dependency not in DI container [perhaps because of a config issue]). And these additional conditional branches do complicate the code (albeit very little in this contrived scenario) but they aren't essential to the core of what the controller logic. So it is better that is resides in the factory rather than the controller. This lets us keep the business essential components of the code clean and tidy by sweeping the dirty house keeping bits into factories. 
In addition to what has been mentioned already, their list doesn't really do a proper ranking - a higher score can still appear lower down the list. This means they can get away with scoring only a sample of potential matches at the first page load, and only score more as the user scrolls down. 
We had problems with MySQL performance so I have read the book "High Performance MySQL".
I will tattoo this post on my butt and each time a rookie goes crazy with php threading I am going to show him my butt!
they do have 30 day licenses to 'play' with. and the monthly cost would mean... hey, perhaps you're out $9 for 2 months of 'playing around'. 
&gt; Because they're fucking idiots Was enough to upvote
In regards to the second part of your question: you typically wouldn't want to erase the data from your DB. Instead, you could have an extra "expiration" column, then when you're querying, you'd only select rows that have not yet expired.
Do "PDO for crypto" first. The mcrypt deprecation and bundling of libsodium can build on top of that. Sodium is cool and all, but the real world needs to interact with everyone out there using AES, and last I checked, sodium only did it in GCM mode (which is awesome, but not a common case). Not needing to worry about the irritating differences between mcrypt and openssl will be a huge way to get people *off* of mcrypt.
Let us tackle this question in a generic sense. In that sense it applies to a broad category of services. For instance, how does google return results so quickly after searching for billions of sites? The answer is that they are never looking for all of the answers but the top X answers. As long as they find that many the process stops. Ever tried searching on google and checking the 1000th result on page 100? Try it and you will surprise yourself. Also make note of time it takes as you move from one page to next.
I just have my module declare an interface that provides the dependencies it needs as a set of simple getFoo() or newFoo() depending on whether I need multiple instances. So I have to say, this whole discussion about reusable interfaces is... what's the problem solved here? Dependencies are specific to every component, so every component needs a specific interface. PHP already provides the required interop. What's missing?
Per an ex-employee of OkCupid - they're largely just pulled out of thin air, with very little analytics performed to produce them. 
&gt; oh yeah this is 2012.. PDO has been around, and been the better solution, since 2004. 
The length of a tweet is not an excuse for being a jerk. If you can't say something in 140 characters, link to it.
Here, have this list of talks https://github.com/phptodayorg/php-must-watch
Yeah I just had written this once on the documentation... Fixed. Thanks!
Firstly, if you are not already doing so you should use parameterised queries when running SQL. In general you shouldn't "sanitise" HTML when adding it to a database. You would add whatever the user sends, then escape it *when outputting it to the browser*, using the `htmlspecialchars()` function. However, if users are regularly submitting HTML you may want to use `strip_tags()` before adding to the database, just so users don't see HTML when you output the content.
The readme would benefit from an example integration or two. I see what the API is, but no context as to what it can be used for.
The Reddit code itself is hosted on Github. I know it's not PHP but it can't hurt as a reference. 
Redditor for 2 hours, 'script of reddit' in r/php. Elance or Odesk is leaking. 
I actually think in this instance what Taylor did is art. It's without context for a reason. Its designed to get people who overreact to things to overreact without looking for more context, and without thinking things through and exploring all the options. Tweets are not singular thoughts or ideas that stand alone. They are in most cases snippets of personality, inside jokes and culture you will just not fully understand by looking at a single one. If you do not actually follow twitter or Taylor, someone linking this could easily be seen as a direct attack on a deity of some description in the programming world. If you actually follow Taylor, you know that that kind of comment coming from him is an obvious joke statement. It's purposefully without supporting arguments, is short even for twitter low standards, a classic role reversal, and has direct pop culture references. People need to chill the fuck out on what people say on the internet. Are you his mommy? Do you want to put him in timeout every time he does a no-no? You are not going to agree with what everyone says on the internet. &gt; The length of a tweet is not an excuse for being a jerk. If you can't say something in 140 characters, link to it. He was not being a jerk, you are inferring your own meaning from a lack of contextual understanding. I hate to break it to you but twitter is a shit show. Twitter is a place where people make short 2 sentence quips at each other without general context because that's how twitter gets page views. Twitter rewards the exact kind of tweet your complaining about. That's the real joke here. Some people take this very seriously, and some could not care less. You are the one butting into his world and demanding things, demanding he conform to your expectations. That's is not how things work in the real world I am afraid. Especially when the context you require to understand what else might be going on is right there on his twitter profile, pages and pages of him tweeting, and conversations around his tweets if you want to see them. If you don't like the guy, that's fine. He thinks that's fine too, not everyone will like him and frankly trying to cater to everyone means everyone he caters to gets a less substantial version of him. But trying to tell a grown, successful, adult what to do with their time on this earth rarely ever gets you what you want.
It's like PSR-3, a standard interface that libraries can use so you can pick and choose what components to use. If 3 different libraries implemented `InjectorInterface` you could use any of the libraries without having to change your definitions.
&gt; His tests created additional problems Can you expand on this? Other than your mock testings failing what other additional problems do you see that would cause issuses (Im being curious not confrontational here. )
Preach the Word, my brother.
You don't need to google. There is a link at the bottom of this page.
You don't need to google. There is a link at the bottom of this page.
Mocking creates problems in that, in an ideal world, you should be able to refactor your code or change how it works without having to update your tests. If you have to change the tests, you're not really testing anything but a specific internal implementation "this method must call this, that receives that, then passes onto this" I highly recommend listening to the podcast that I linked. Taylor Otwell who created Laravel framework talks about why mocking your not really testing much at all but using PHP as a "spell checker". As for the downvoters, I'm not surprised really because this whole mocking vs acceptance tests really splits opinions. I'm a professional coder and have inherited many legacy apps and any those that have heavy mocked unit tests have been a nightmare to refactor and change. The tests didn't really help but just re-iterate how the implementation was done. It would be much easier to have more functional and acceptance-based tests that are simple and don't care about the internal implementation but the end result. 
It's funny that that you think *I* overreact. You wrote a little book in here spinning a shitty tweet as art.
Line-by-line translation always ends in pain.
You're being downvoted and I can't understand why. I think you are correct (for the most part). Dependency Injection is nice, and having a service container to inject dependencies into your objects is also nice. However, testing doesn't have to be so academic all the time. It's ok if your tests hits a database, or the filesystem. If you're writing a framework or library, ok maybe a different story - write some pure unit tests and ensure you have 100% code coverage. If you're building an _application_, it's ok for your tests to hit depended on components. I'll listen to the talk (both the one from the OP and yours), but I expand my thoughts out further here http://viccherubini.com/2015/11/unit-testing-your-service-layer-is-a-waste-of-time/
You're not wrong, but your view on the subject is limiting. You can look at tests on a [spectrum from isolation to integration](http://christopherdavis.me/blog/the-test-spectrum.html). Somewhere on that spectrum are the most useful tests for your application. Different parts of the application will fall different places on the spectrum. Some things will benefit the most from isolated tests, with test doubles, etc. If you find yourself writing a ton of setup code for each test, that's likely a code smell indicating too many dependencies -- only a more isolated test will show that to you. On the other hand, other parts of the application will require more integrated tests all the way up to full end-to-end tests. Everything has it's place; there is no one true way. The more you write tests, the better you get at finding the sweet spot of really useful tests for the context in which you're working.
I confess I begin to lean toward /u/CQRS here. Having written the Aura suite of libraries over several years, including a DI container, and then having written non-Aura libraries with their own custom containers, it may be reasonable to think that generic DI containers are better-used at the "system-as-a-whole" level than at the library level.
/u/Shadowhand: why `make()` and not `newInstance()`? The latter is more clear, more obvious, and has precedent at the language level (cf. the Reflection classes, et. al).
I don't agree that it is more clear or more obvious. I think the former is shorter and equally obvious. I wouldn't consider PHP to be the ideal when it comes to precedent, considering how many oddities there are in the language. To my knowledge, no other classes in PHP besides reflection use `newInstance` and very few vendors besides Aura use it. To me, it seems like a holdover from Java. Also, as a final note... `make` may return a shared instance, in which case it would not be a "new instance".
~~Actually, as per my goals for defining the **configuration** and not the actual injection itself, the `make` method doesn't need to exist.~~ Edit: this is not true. Some complex configurations will require `make` to be called during a `prepare`.
I've updated the interfaces based on your suggestions. See `$using -&gt; $invokable` and the new signature for `make`.
I'm really referring to stuff like this in the [cartalyst sentry package](https://github.com/cartalyst/sentry/blob/2.1/tests/EloquentUserTest.php) all those mocks just because don't want to hit the db. It makes it harder to refactor, tests more complicated, and could give a failing test even if it is technically working after making some internal changes.
The number of people who match your search on other criteria (geographic area, age and age preferences, orientation and orientation preferences, whatever else other filters you've set) is fairly small and it would be pretty reasonable to calculate match scores for the filtered set at search time. Not having seen the OkCupid code base, I cannot say for certain they do this, but I can say that I've seen numerous other businesses with search ranking needs apply the same strategy successfully.
What happens if you call the method that is supposed to return a shared instance, but nothing has been shared? Would having a single `instance` method be sufficient, without any assumptions about whether it is new or shared?
1. Host on your local machine while playing around and building websites. It's safer and easier. 2. I'm not sure, but YouTube will surely have plenty of resources. 3. Bootstrap ui (a javascript/css library) is something I always found easy to use for the design illiterate. 4. Start small, don't try to do everything at once...at least in your situation. *Never* trust user input; use PDO. Keep the ui, business logic, and database calls separate (like a classic MVC). Comment your code.
1. Yeah that's the plan. But eventually it needs to be hosted, and I don't really understand how that works.
You'd want to start locally before even thinking about putting new code in production, especially in your case where you plan to host other applications/information on your domain. In theory you can completely finish your website locally and then start figuring out how to get it online...but most people, myself included, prefer to have a "hello world" to make sure the vcs and hosting is all working
&gt; What happens if you call the method that is supposed to return a shared instance, but nothing has been shared? Calling `getSharedInstance('foo')` (or the equivalent) when 'foo' has not been defined has at least two valid alternatives. - Throw an exception (or raise an error) - Create it at that moment (perhaps via `newInstance()`) and then retain it for sharing. As one example, in Aura.Di, the `getSharedInstance()` equivalent is `get()` (for getting a named service that has previously been `set()`). When not present, it throws an exception. &gt; Would having a single instance method be sufficient, without any assumptions about whether it is new or shared? I don't imagine so; I find it easy to believe that a consumer will want to specify that it wants a shared instance versus a new one.
Regarding user input: Insert data into the database via PDO. Whilst PDO is stated to be SQLi proof, I have found that it's not XSS-Proof. Here is a rough example - My head isn't straight at the moment. &lt;?php //Forms etc etc $input_form = "&lt;b&gt;Hello World&lt;/b&gt;"; $input_form = htmlentities($input_form); // Turn &lt;b&gt; into &amp;lt;b&amp;gt; //Already connected to the DB via PDO $db = $db-&gt;prepare($sql); $db-&gt;bindparam($input_form,PDO::PARAM_STR); //Etc ?&gt; Then when retrieving from the DB ` $from_db = html_entity_decode($result['body']);` 
Yeh, I much prefer source living under `src/` like the league's packages
Typically the convention is newInstance is always new, and getInstance can vary (may always be the same, or sometimes the same). There are situations where you need both. My SQL Pool class has these two methods: getConnection($name) &lt;-- returns same instance *for the same name*. newConnection() &lt;-- always new instance. This already can't be expressed though make(), which demonstrates how limited such shared "object making thing" interfaces can be. 
&gt; It's funny that that you think _I_ overreact. You wrote a little book in here... I'm sorry you think "People need to chill the fuck out on what people say on the internet." applies to everyone but you. You posted in here 4 times now and no one is agreeing with you. You can claim "shitty tweet" (like that is somehow not the norm), and him being a jerk all day. People generally use more then a thought-limited blurt platform to form opinions on other people. Maybe you would like to [listen to](https://www.youtube.com/watch?v=qI49j5lGPmw) [one of](https://www.youtube.com/watch?v=YKWHQnXcEB4) [his talks](https://www.youtube.com/watch?v=PRFO4YlHHQU), [where he says more then one sentence at a time](https://www.youtube.com/watch?v=xKefsl_UiM0). You seem plenty content on shitting on someone for an obvious one sentence joke you take personal for almost no reason. So don't be surprised when you get the same treatment for your tweet style quips here in this thread. There is inherit value in saying more then 2-3 sentences at a time.
Sort of. There are some subtle but very specific differences. Here's a short list: 1. `definition-interop` defines a bunch of interfaces that have to be implemented for interop. Using those interfaces requires a separate library that implements those interfaces. So in order to use agnostic configuration you have tie yourself to a specific implementation of the generator. This makes no sense to me. 2. `definition-interop` claims to get around these limitations by having a "compiler" that generates containers from YAML(?) definitions. Which just adds another step and also forces me to use a flat file to write out my dependency graphs. Seems like Java beans all over again. 3. `definition-interop` requires that all entries are named with an "ID" which is no the interface name. This implicitly makes it easier to poison the configuration by identifying a class that does not actually work. Such poisoning would not be visible until the code was executed. Always uses interface names prevents this, as the injector can verify that the instance implements the requested interface.
You're comparing injector-interop with definition-interop, but the problem is I see no purpose for either one of them. Such purpose hasn't been identified yet. I'm sure you and the other author have one, but it hasn't been explained well, aside from as a workaround to poorly designed frameworks that don't allow people to create their own objects.
It seems like you haven't written very much framework code. Injection within an app is fairly trivial, because as the creator/consumer of the code, you know exactly what libraries you want to use to satisfy a particular implementation. You can easily write a fully inverted stack when you know ALL of the implementations that will be used. Writing library/framework code with dependency inversion is significantly harder. The consumers will demand the ability to replace or extend classes at will. In order to satisfy this demand, it is necessary to provide some method by which the user can customize the classes in use. This is how we achieve the [LSP](https://en.wikipedia.org/wiki/Liskov_substitution_principle) part of SOLID. As we see with PSR-7, the more often we use interfaces the easier it becomes to exchange implementations, which is what [DIP](https://en.wikipedia.org/wiki/Dependency_inversion_principle) part of SOLID is all about. So instead of writing: function __construct(PdoUserRepository $repo) { ... } We write: function __construct(UserRepositoryInterface $repo) { ... } And then we let the user decide how to implement it. You probably get all of this already. The problem is that a lot of frameworks then struggle have a sane way to allow the user to define what implementation of `UserRepositoryInterface` should be used. Some frameworks currently do this via convoluted DI configuration (like Pimple) where you have to define every last thing by hand. Other frameworks do this via flat files that are loaded info configuration at runtime. I find neither approach attractive. This is where injector-interop becomes useful: it allows the user to specify exactly what implementations to use **at the highest level of their application**. The framework might provide some simple defaults and the user can overload those defaults quickly by executing an implementation of `ConfigurationInterface`. Configurations should be explicitly loaded by the user depending on what components they want to use. They can choose to use a vendor-supplied configuration or their own.
In the first version of the framework, I had Controllers and I introduced View Models. The Controllers were responsible for updating the Model (Domain Model and View Model), and View Models were an abstraction of the Domain Model for the View. View Models contained application state (i.e. current user id being edited, active search filters, etc.) along with the methods requesting the Domain Model. While that worked out nice as I eliminated the view data binding between Controller and View, I found it a little too tedious to create the Controller/View Model pair but more particularly the code needed for the Controller to update the View Model with the application state. In this new version I merged them back together and called them Action Models. I named those Action Models because they can be seen as an abstraction of the domain model, containing the application state that has been initialized by the result of an (controller) action. A basic example illustrating the difference between Controller/View Model pair and Action Model: Let's say there is an incoming request to view a user profile by id, 1. Controller gets the id from the route param (this is what I call application state, in this case the current id of the user that needs to be shown), 2. sanitizes/validates the param, 3. sets the id to the View Model (the View Model needs to be aware of the id because it will provide the method for fetching the user for the View), 4. View can now fetch the user data from the View Model. With Action Models, I avoid the part where the Controller needs to initialize the View Model with the application state (step 3) and by experience, it reduces quite a lot of (uninteresting) code for me, as I no longer need to create View Model classes and their methods used for the Controllers to set the application state. More about [Controllers](http://gobline.com/docs/concepts/mvc/controller), [View Models](http://gobline.com/docs/concepts/mvc/view), [Action Models](http://gobline.com/docs/concepts/mvc/action-models)
&gt; In most frameworks, it is the controller that has to bind data to the view It actually exposes (not binds) data to the view. There is no MVC pattern implementation on the backend (MVC is useless in context of request/response model). Most of the frameworks uses MVA (Model-View-Adapter) pattern to isolate presentation logic from application logic. For example, controller (adapter) fetches current state and exposes DTO to the view. In this case our application layer (model) doesn't know anything about view, and view doesn't know anything about model. The problem is that most of developers exposes model to the view... and this breaks all the beauty of encapsulation.
&gt; It seems like you haven't written very much framework code. Injection within an app is fairly trivial [...] Writing library/framework code with dependency inversion is significantly harder. I've written plenty of framework code, but aside from certain poor practices that will be eliminated by the next wave of PHP frameworks (remember when every framework came with their own singleton Registry?), I see nothing specific about frameworks in general that make object configuration and creation *harder*. It's harder only if the framework authors have made it harder out of ignorance, or the childish desire to build walled gardens where the framework insists on reinventing everything in PHP their own way, including basic object construction. &gt; The problem is that a lot of frameworks then struggle have a sane way to allow the user to define what implementation of UserRepositoryInterface should be used. Here's the solution to this struggle: function getSomething() { return $this-&gt;something ?: $this-&gt;something = new Something($this-&gt;getUserRepo()); } This can actually be shortened a bit, but you know, in the interest of zero-dependency-root-factory example. &gt; Some frameworks currently do this via convoluted DI configuration (like Pimple) where you have to define every last thing by hand. That's a very strange attitude. You don't want to configure it by hand? You care to write tens of thousands of lines of application code and you then balk at the idea of writing down by hand a hundred or two lines of code that actually define how that application comes together? I don't find this rational. Just because one can poorly automate a task, doesn't mean they have to. The time you'll waste debugging problems that come out of wrong autowiring and "the struggle", as you defined it, to put the right repository into the right constructor hole, will be much greater than just putting your proverbial man pants on and writing down your app wiring in hard code. And if you actually compare the amount of code it takes to write "automatic" configuration versus "by hand", quite often, hilariously, the "automatic" one is longer than the one written "by hand". &gt; This is where injector-interop becomes useful: it allows the user to specify exactly what implementations to use at the highest level of their application. You can do this with a factory at the top level of your application, that looks pretty much like my sample method above. No interop needed. Simpler, faster, better. I wonder how many layers of bullshit we'll pile upon this container mess before we see the light. Have you ever pondered this cognitive dissonance of "framework DI is easier, but harder" before? How come you think both? *Why is the easier thing harder*? How is that logically possible. **tl;dr** You're trying to solve a problem for an architecture that's a dead end, and people are slowly realizing this. DI is extremely trivial when done right.
Your dissatisfaction with MVC, as generally (mis-)interpreted in an HTTP environment, is shared. If you have not done so already, you may wish to read my [Action-Domain-Responder](http://pmjones.io/adr) paper. Also, I'm glad that [Relay](http://relayphp.com) serves your needs here. :-)
break it down into small parts and go from there &gt;it's going to be a relatively simple website .. proceeds to list several complex functions without any solid information of how they should work .. sounds like one of my clients.
&gt; Where does $this-&gt;something come from? It's coming from the same exact method. I realize the short syntax can be weird on first read. It's a habit of mine. It's just a private member of the factory that caches an instance. I'm demonstrating serving a shared instance (i.e. "singleton") in a one-line method, nothing more. &gt; What if you don't want every library to leak it's dependencies via getFoo methods? This is not a library. This is your composition root, realized via factory methods. The context was "allows the user to specify exactly what implementations to use at the highest level of their application". So this does exactly that. It's your app root, where you define the implementations of your dependencies and their dependencies. If you want to ship sample configuration factories though, then you can declare non-public getFoo() methods as... non-public. PHP had that for 10 years. &gt; There was none. You read in wrong. Yeah, well this leaves me puzzled. It isn't easy, isn't flexible. ... Why are you doing it?
Because it is mostly the truth. PHP isn't designed, it's "hacked" together and with each release more and more crap gets added to the language rather than fixed correctly. If you really need to understand this issue, you need to look into the core of PHP. http://phpsadness.com/ just take a look at #44 on that page. Try making the same mistake in any other language. The language has improved as Phils mentions, but the rest of his rant only shows how ignorant he is about the issue and real trouble with PHP. Try learning about how Go was designed and be prepared to be amazed.
I'm not familiar with command handlers/command bus/etc. A quick search led me to CQRS, I will delve myself into it to learn more. So I can't really respond. Action Models are **invokable** classes that contain the application state, interact with the Domain Model and give an abstraction of the Domain for the View. *__invoke($request, $param1, $param2, ...)* contains a minimum code to initialize the application state (that's the controller action part). The View has then access to the Action Model. See it as a Controller and View Model merged. Routes stay very simple, they point to the correct action and view template.
An ORM is typically passed as a dependency to the Action Model. For instance Doctrine's Entity Manager and/or Repository. I will make this more clear, thank you.
&gt; So every time you go change the order some parameters or choose to inject a new object, you have to go modify the factory? I'd rather not. Just think about what you're saying. You're saying that if you update a component, through Composer, say, and it has a new parameter, you're fine with the container just passing *some* instance of the requested type from what's rolling around on the floor in all your configuration, no matter which one...? Without even giving you the chance to check the documentation and see what this parameter should be configured like, type is not everything, do you realize this? One "PDO" opening my SQLite cache is not another "PDO" linking to my users MySQL database. What would you do, "UserPDO extends PDO {}"? Is this a proper use of types you think? And then you say it's hard to configure such containers. Do you know why? Because of such penny-wise pound-stupid "optimizations", like "I don't want to update my instantiation code when the instantiation component *changes its instantiation contract*, I just want my container to *guess*". WTF is this? Hope Oriented Programming? I'm not even talking about the fact that well written components don't just change their constructor signatures and interfaces randomly all the time. Public APIs should be stable, and changing them should be well thought out, and a major version bump. The change should be contained *within* a component in most iterations, otherwise it's just a shitty public API. Get a new architect. What happened to sanity in development? I guess "smart containers" happened to it. Nothing more than glorified $GLOBALS, just like Registry was. Give it another 5 years I guess, you'll see what I mean.
&gt; you're fine with the container just passing some instance of the requested type from what's rolling around on the floor, no matter which one...? I expect it would be injected with whatever is available **or** the instance that I specified **in my configuration** that is shared throughout the app. What results in less change: adding a new parameter with a type hint that is automatically injected, or doing that *plus* manually registering in your giant application registry? The answer is obvious. I would argue that your giant factory class is more like `$GLOBALS` than my system.
You're completely ignoring that the dependencies (in both systems) are *inverted* and type hinted and can be tested. It's obviously not the same. Your system requires that every obvious type hint needs to be explicitly defined instead of inferred.
It'd be good to be able to see beyond syntax, and see interactions and logic. The latter is inversion of control, *unless* there's a system that automatically connects that signature "Foo $foo" to a pool of shared singletons, like autowiring DI containers do, which makes it an emulation of $GLOBALS. If you don't see this, it's only your loss. You said yourself that the component expects to be able to randomly change its constructor signature without breaking anything, as long as the types are in the container. This *expectation* means the component is refactoring itself by being *aware of the container* creating it. The component uses its constructor signature in the exact same way, as you would a "global $foo" import: - If it's in $GLOBALS, you can import it. - If it's in the container, you can put it in the constructor. The component is not supposed to know about the container. But it does, so it's more prone to ask for things it doesn't need that much, but in a rush to a deadline, you'll see developers spuriously asking for lots of things in their components, as their wishes are automatically satisfied, so the friction is none to adding more dependencies. This creates tightly coupled, brittle systems.
View Models contain application state (e.g. id of the user to be shown), and methods like getUser() fetching the user from e.g. a Doctrine repository . The view calls $viewModel-&gt;getUser()-&gt;getFirstName(). Thus the controller didn't have to give view data to the view, it only had to pass the application state (requested user id) to the view model and the view model has a method for the view that fetches the user from the Domain Model. The view model abstracts away the Domain Model for the view. That's how I avoid controllers to pass view data to the view. Now in Gobline, controller and view model are merged into action models. Yes, there is an example on the site, last menu item. I will watch Uncle Bob's keynote thank you.
&gt; This expectation means the component is refactoring itself by being aware of the container creating it. That statements makes absolutely no sense. I can't take you seriously at this point. 
Why do you not pass data using the constructor? There are cases where this would leave objects in invalid states (database objects) and it also makes every class mutable even when it doesn't need to be.
PHP lacks features to fully support a mainstream paradigm out there, e.g. functional, object-oriented, concurrent, event-driven, contract, declarive, data-oriented, static typing, dynamic typing. There seems to be no will to actually finish any of the paradigms to a modern, usable state. That's why PHP should not be used as the core of any large system. An example of a mainstream corporate language which has its act together is C#. 
&gt; SMS-based Two-Factor It's already fairly easy to integrate with one or two providers; it would be interesting if there were something more generic, eg configurable for either: - supports SMS/$messaging_app/push notifications/voice calls - supports Google Authenticator, u2f, yubikey, or other 'enter a code' technologies At the moment, the only thing I'm aware of that offers all of this is Duo Security, but it'd be nice to not be tied to a specific vendor.
For no arguably good reason, I like to split up object instantiation and initialization. In almost all cases the init() is called on the very next line of code after instantiation, but for whatever reason I like to have the freedom to choose exactly when the actual initialization happens. Again, for no arguably good reason :/
giving downstream the ability to choose where initialization happens is giving them the opportunity to forget to initialize. has this practice ever given you a specific benefit you can state?
There's lots of companies that will offer super cheap hosting and let you upload your files once your done writing them. Since you're using php probably any WordPress supporting platform will support you You can also put it on AWS for 1 year for free if you know how to use it.
I've used both Yii1 and Yii2 lot in work. Its pretty simple framework compared frameworks like Symfony2. I've have not yet seen person that could not get easily to Yii with some guidance. Symfony 2 has lot of documentation because its more complex/sophiscated in my opinion. Yii documentation is not so extensive but since the basic architechture is pretty simple I dont see where you need it. Its really runs basically on controller-model-view and components like gridview are just optional if you want to use things out of the box and need speed. Nothing in framework actually requires to use them. Currently I'm doing a form for my employer and there I use Activeform only because I can generate fields automatically from the model with validation rules. Keeps things neat and tidy. And I build it top of Mongo with RBAC because Yii is very modular so you can plug in it third party libraries. It really does not care to deep down what you use in front end or in back end as a database. I would not say its a best framework. But I have not found any big problems so far with it. Its flexible and you should not find yourself cursing why it does things certain way because you should be able to modify almost anything. Lot of people pass it by, but in my experiense its has been pretty solid and working framework so far. 
Right, but none of those integrate with Signal. That's specifically what I'm going to build.
I'm not too worried about the forgetting to initialize part, my code fails pretty loudly. Has it ever given me benefit? Yes, there was at least one instance where this approach got me out of a corner I had coded myself into. It was so long ago I can't recall the specifics, but it was probably the odor of a _really_ bad code smell I was too young and inexperienced to detect at the time. After that, it became a vestigial appendage that has lingered in my code's architecture ever since. Like our appendix, cutting it out probably wouldn't break anything given the way we code in 2015, but leaving it in hasn't caused any harm either. It could also be a leftover symptom from years of playing Magic the Gathering. Magic is broken up into phases (untap, upkeep, etc.), and I like to think of instantiation and initialization as two separate phases. If that's not an arguably good reason, then I don't know what is :P
Tap two islands: Counterspell
&gt; people who say that php has improved are fucking idiots who cannot see beneath the merely cosmetic modifications. Ok, firstly you need to take that tone on a long hike. While you're doing that, please consider these few changes in PHP 7.0: - https://wiki.php.net/rfc/context_sensitive_lexer - https://wiki.php.net/rfc/phpng - https://wiki.php.net/rfc/abstract_syntax_tree - https://wiki.php.net/rfc/uniform_variable_syntax - https://wiki.php.net/rfc/engine_exceptions_for_php7 - https://wiki.php.net/rfc/internal_constructor_behaviour Literally none of those are cosmetic, so you're wrong there. All of them provide stability and consistency to the language, which sounds like an improvement, so you're wrong there too. Aaaaand this is why I say that people who pretend PHP has not improved are idiots. I could be more polite and just say they are ignorant, but ignoring CHANGELOGs and news articles and RFCs and still continuing to spread opinions based on a lack of knowledge is extremely idiotic. Don't do that. :)
It looks great. I used to work in a PHP shop where we used Jenkins and static analysis tools (many found here: http://phpqatools.org/). I've wondered a lot about coding standards in a company. I have a bunch of questions that are related to this. What are the benefits of having developers adhere to a coding standard? Should coding standards be casually enforced by a coding standards document that people agree to but might not always follow? Should static analysis tools just warn developers when they break a coding standard or should it be a strict gate that prevents code from being pushed/deployed before violations are fixed?
PHP doesn't *really* do MVC, it emulates it. PHP scripts are built up and torn down on every page request, while a long-running Java app would maintain persistent Models. But it's basically: * You have a router, such a Toro. * Your router will invoke **exactly one** controller method per HTTP request. * Your controller will instantiate the models it needs, which will take care of any database interaction (your controller doesn't know what a database does) * Your controller will pass data between the Model and the View to get a rendered HTTP response (e.g. HTML output) * Your controller passes the HTTP response back to the user. * Everything is destroyed and has to be rebuilt on the next HTTP request. Most MVC implementations in PHP are a slight variation of the above description.
so much energy wasted on coding standards if you can read and understand code, the way it's written shouldn't matter (the compiler doesn't care) 
Because "echo" is not actually a function, see http://php.net/manual/en/function.echo.php It is a language construct, like include/require. Which also work with, and without parenthesis.
Let's say it took them - random estimate - a lengthy 2 man hours to write a specific standard for the automated checker. For example, ordering imports alphabetically. Now, imagine a team, where every day 60 seconds are wasted cumulatively on unsorted imports. Maybe it's 6 people each wasting 10 seconds searching a list for an import, or one person importing a redundant class and having it complain. The idea is, only a minute a day is wasted on this problem. After 24 weeks - half a year - that coding standard pays for itself. And that's just raw reward from implementation. The rewards come much faster with large teams where the majority of users don't know if import XYZ is in module ABC without looking through 20 imports. Maybe the cumulative time waste is 2 minutes a day for that team. Worst case scenario, you waste couple man hour of work and have a prettier and more enjoyable code base that withstands longevity and the future. Best case, you save time money and headaches.
You make all those valid points about time, then end up with "prettier code", there you have it, big waste of energy.
&gt; Should static analysis tools ~~just warn~~ inform developers when they break a coding standard ~~or~~ and should it be a strict gate that prevents code from being pushed/deployed before violations are fixed? Yes. It can be a pain, but is for the greater good.
Be great if I could just `composer require` this.
I actually did this a few months ago. I think i am going to get into github next, i take on as much work as possible to ensure i can pay bills ( freelancer ) so i know i am a bit late on the bandwagon with this. 
I actually have and have used this book :)
I'm not sure if this is the *most* relevant so I'm sure I'll get downvoted to heck for this but I don't like the idea of PHP as a MVC. I've been using Ampersand.js for a little bit now and it's honestly amazing. Models and Views makes a lot more sense based on pure front-end abstractions that you can handle in Javascript. It's amazing the way you can separate state from the image of the state and it's for that reason that I'd recommend looking into something like Ampersand.js and browserify which takes Node.js code and compiles it to browser-executable Javascript. I'm in the firm belief that Javascript belongs on the front-end and Ampersand is a great way of managing models and views. PHP does indeed emulate the functionality but for truly complex user-interfaces, you will need Javascript and ways of managing the complexity in Javascript. But that's just, like, my opinion, man. I still enjoy writing PHP on the back-end though. Edit: But the most important thing I can say is, keep logic away from your Views like it's the plague. Your Views should only do things like re-render HTML and do things like manage DOM-bindings. Your Views shouldn't be doing any sort of "logical" calculations. It's important to separate the logic from the image of it.
My point was, the absolute worst possible case is just a better product. If you're are doing short scrims to release a shoddy product in the shortest possible time, you might have a valid argument that pretty code is worthless. If you expect any sort of longevity for the code, then even prettier code is not a waste. But we're talking about a range between "small but potentially large benefit" to "large benefit" ... why wouldn't you worry about code consistency?
&gt; The rewards come much faster with large teams where the majority of users don't know if import XYZ is in module ABC without looking through 20 imports. If the IDE can't figure it out with a keypress, you've got bigger problem that 'code consistency' probably can't solve. I'm not 100% against the idea, but imo the value's much lower on the totem pole than, say, having working unit tests and documentation. When all those ducks are in a row, I start caring about the coding standards angle. Partially, also, because I can't control 100% of the code on a project - I'm going to be digging in to 3rd party libraries on occasion, and they won't always follow the team's standards. Devs need to have the ability to jump in to someone else's code and be proficient, even if the coding style/conventions aren't always 100% exactly what you want.
I really dig the Yoda sniff. Thanks for sharing this with the community.
That it lets you do anything isn't proof of it's awfulness. A great argument I once heard against this exact complaint was that a good programmer utilizes this as a strength, and a bad programmer gets lost in the ways you can incorrectly use it. Which might be what you meant in your third paragraph. I just think it's very harsh of you to say that PHP being a first-language makes someone useless. Maybe it's not quite what you meant, but it's very common for people wanting to learn back-end web design.
Yeah, but that's really the point that needs to be made. PHP and Python can fill a lot of similar roles, but only when it comes to website backend. PHP was never meant for anything. Python is more versatile, to the point that the Blender project was done I think in a combination of C++ and Python. PHP would never have done as good a job, I don't think.
I always try and say "web scripting" when referring to how I use JS and PHP. Because I have to admit there's much less "science" in what I'm doing.
A sniffer to *remove* Yoda conditions? Given PHP has the same assignment-as-an-expression (mis)feature as C, I'd like one to *enforce* it instead.
&gt; I'm also not sure what generality means. How well the language can adapt itself to the whole gamut of fields in practical programming. GUI programming, data analysis, web applications, education, system daemons, embedded fields, hardware interaction, realtime systems , general scripting and tooling, game development, research and development, etc. If it can do any of those moderately well, it's said to be a general language. Otherwise it might be an &lt;x&gt; language, where &lt;x&gt; is some niche, like scripting, or web, or systems, or networking, etc. Python is pretty good at all of those things, and has ok-to-great, but usually mature, libraries for all of them. Granted you could mostly pick any one and find a specific other language better suited to the task. PHP as you said far and away has a niche in web development and doesn't really focus at all at being decent, or having library support for, most other tasks. Being general isn't inherently advantageous though; being so general gives Python a tough time arguing it's the absolute best in any one field. If you absolutely love web applications there is no big need to learn another more general language, apart from maybe for pure experience as a programmer.
i have used it, but problem was performance, 8H+ work without restart it's pain in the ass. Maybe i go mainstream but i choose PhpStrom over all opensource free software, because it's fast, intuitive and smart.
UndersTand you can tHis complicated more hOEwER IT IS ISNt IT oR nOt?
Imo the biggest advantage of coding standards is that it makes code reviews so much more efficient. Getting that out of the way allows to focus on the more important aspects. Maybe it helps that I'm doing a lot of python nowadays and that there's a commonly accepted coding standard there (being pep8)
MVC is a simple idea. Imagine that you are building calculator. You have model: class Calculator { private $result; public function init($n); public function add($n); public function sub($n); public function mul($n); public function div($n); public function clear(); } This is basically the thing, that encapsulates data and data processing logic. It doesn't know anything about UI. Let's build one. We will have a form with input for $n and a bunch of buttons. Each button is submit button with it's own name so we can check on the backend which button was clicked. To make our `Calculator` UI independent, we should add intermediate layer between model and view: controller. It should receive *user actions*, maybe validates user input and asks model to change state (this is very important - *only asks* via methods, not changes anything directly). In web application all user actions are HTTP requests. To know what action user has performed we should have some kind of router. It could be in front-controller, which is decides what action we should handle. switch($request-&gt;get['_submit']) { case 'add': $controller-&gt;onAdd($request); break; // ... case 'div': $controller-&gt;onDiv($request); break; } This is very abstract example. In our controller we can do something like that class CalculatorController { public function onAdd(HttpRequest $request) { // handling HTTP request if (!$request-&gt;has('n')) { throw new HttpBadRequestException('Please provide a number'); } // asking model to change state $this-&gt;calculator-&gt;add((int) $request-&gt;get('n')); return $this-&gt;view('calculator.tpl', [ // just a snapshot of current model state. Maybe it is array, maybe DTO 'result' =&gt; $this-&gt;calculator-&gt;getResult() ]); } } View... this is just a separate layer which has responsibility of drawing UI. On the backend UI is HTTP, so we are making HTTP response with some data in some format (in case of HTML we also have templating system for example). But if all that we have is templating system - we can't say that we have MVC. MVC is not about templates but about segregation of concerns. Even if we have models, views and controllers - we could break encapsulation of models, expose them to the view and we will get smartui antipattern. Also, our UI doesn't care how data is stored on the backend. Data persistence is detail of our model implementation. Model can be more that one object, it could also has layers and so on, but since all this things are details of model, controller just doesn't know anything about. It working with model that it have and nothing more. Actually what I have described here is not an MVC but MVA (model-view-adapter). You'll cant find any MVC implementations on the backend since it just doesn't make any sense in context of request/response model.
I like this feature. Every time I come across a Yoda expression, it feels like reading *there* instead of *their*. I don't know why, but it just kind of jars me to the point of potentially missing other bugs in the expression. But I won't argue the point beyond that - it'll be like tabs vs spaces.
What are you guys using for PSR7 implementations? Is Zend diactoros the http foundation of PSR7 or are you using something else?
I think it would start to cause harm if you ever need to write code with/expose your code to people unfamiliar with this style. It doesn't make much sense from an outsider's perspective as you're really just replicating the functionality of a constructor with a differently named method, this will mean you have to increase the amount of boilerplate you write and the dependencies will simply be less explicit than if they are declared in the constructor. Besides, from a purely logic stand-point it just makes sense that you aren't able to instantiate an object unless you provide objects that it depends upon. Another point to consider is that the natural progression from implementing dependency injection is to use a service/IoC container. A lot of these containers will automatically instantiate objects using reflection and this will check the constructor parameters to determine the required objects, it won't know that it should be checking an additional init() method. You obviously don't need to use this feature, you can declare your instantiation explicitly but it is very useful. Ultimately, if this is code that only you are working on then do it however you like. If it's something you have other people working on or might have other people working on in the future, it will be a lot easier for everyone involved to follow conventions.
Micro-frameworks such as [Lumen](https://lumen.laravel.com) or [Slim](http://www.slimframework.com/) will quickly provide you with a REST API you can consume with ReactJS .
No that's not the reason. It's because there are certain tools lined up with being definitively good or smart and specifically PHP is lined up with being definitively bad. I know this is how people feel because they tell me. Learning more languages is definitely great and you should do it, but that's not what I was talking about. :)
If an object requires specific dependencies in order to work you should not be able to create that object without providing those dependencies. Saying "I'll just do that later" leaves your code wide open to being in a broken state.
One good thing I like is the i18n support of the router. Good work on it. I may want to look other components when I get more time :-) .
It's not. It a tool that's being desperately pushed by trend following newbies in an attempt to seem ahead of the curve. Docker is a fantastic tool for the job, but not a replacement for Vagrant. In fact, many people use Docker ON their Vagrant VMs. The simple fact is that Docker adds a lot of overhead to your setup if all you're doing is building single-server apps, monolithic apps, traditional apps / blogs / CMS / whatever, etc and *don't want to pollute your host OS with additional tools that have no place there*. Docker helps separate big apps into smaller containers, each of which then powers a specific aspect of a project, but this is in most cases overkill. When needed, however, it can be used with Vagrant just the same. Even better, since Vagrant will likely be running a linux environment similar to your server, you automatically get development / production parity and still run your dockerized services on the same software stack you'll use in production. So not using Vagrant at all just makes no sense - it's a godsend for 95% of the projects you'll work on (I do a lot of demos and prototypes, so it's perfect for spinning up to 50 or so new instances per week) and when you need more power in regards to your app's modularity, you just add Docker into the mix (yes, it can be added into the mix after the fact). So while learning about Docker won't do you any harm, learning about Vagrant first if you're new to virtualization will always be more beneficial.
The reason it requires more work than just adding a dependency is that the sniffs are very customisable. But you can use one of the ruleset.xml samples in the README or look at integrations in a few projects I already did ([1](https://github.com/slevomat/zbozi-api-php-library/commit/99c3f812153a7776c6d8a6128109df39d83f7823), [2](https://github.com/ondrejmirtes/mocktainer/commit/e9d48dccca38ddc430752deed3d7741c04d509a9)).
I always found this a particularly good read. [Web MVC - Oliver Steele](http://blog.osteele.com/posts/2004/08/web-mvc/)
Consider to build alternative to [testlink](http://testlink.org/) for example. This would be useful not only for PHP community but more for QA community. There is no other open source alternatives...
Facebook is small right?
It's PhpStorm.
Had this discussion the other day. If you can remember to use Yoda conditions you can remember to use `==`. A better sniff would be one that ensures when you use `=` you are also comparing it to something, i.e. `if (($line=fgets($fp)) !== false)`
Ah true. Deleted
That is nice. Will a feature of signing PDF files also be available in near future?
I have a contrary experience. - I work with a company, where I meet nice people every day. - The company is small, means it's energetic and no bureaucratic, everything on the move. - No nigh shifts, just 8-hour workday, so I can take my gf to listen to my favorite rockabilly band tonight. - Our stack is based on the Symfony framework, and when I am stuck, I can always ask a question on Stack Overflow with a fat bounty on it, and have it answered (though that bounty timeout is really stupid thing). May be all you need is to get a regular office job. 
I've tried for years - I wasn't good enough and then eventually said I'd go on my own. I do love working for myself but it's pretty strenuous. Your situation sounds very nice though!
A guy, who joined at the same time with me, told me that he worked for many years like you, but finally decided to quit own business and to work as employee - for the very reasons you told here. He just wanted a rest. Though I understand the feeling. A friend of mine who once run a successful company of his own, aways say he will never work as a subordinate, for the feeling of freedom he used to. 
Why php do not want to break bc ? Most of the old code that I saw is still using php4 on apache2. So they could easy clean up api and language inconsistent things 
If you're needing to scale your logging then I'd suggest you look into a message queue. Something like RabbitMQ, Kafka, or 0MQ. Once you have your messages in a queue you can attach something like splunk or graylog. This way you keep horizontal scaling by scaling your message queue. Edit. In fact monolog already comes with an adapter for just a situation. https://github.com/Seldaek/monolog/blob/master/src/Monolog/Handler/AmqpHandler.php
I use monolog to send my errors to an instance of graylog2 running on another server which is local to my webserver. It works great and you can log all kinds of things!
Does php old school programmers are responsible of making the internet more insecure? Cause I got on my server the classic bot requests looking for insecure php practices, even if is not a php page. And I don't see any bot request probing python/ruby etc. &gt; GET http://51.254.206.142/httptest.php HTTP/1.1" 404 141 "-" "-" This is new: I think this is how jomla got hacked. &gt;"0k2^\xB9\xFAY\xBDJ\x03`\x07\xBC\x83\xD6CX\xE6i\xC3.S\x83?'\xE89\xE9\xA23$\xAC#\xAF\xBF%7\xFA\x0Fb\x18\xAF\xA2\xDA\x8E\xB8\x889" 400 172 "-" "-" &gt; "GET http://testp2.czar.bielawa.pl/testproxy.php HTTP/1.1" 404 141 "-" &gt;"HEAD /redirect.php HTTP/1.0" &gt; "GET //pma/scripts/setup.php HTTP/1.1" 404 141 "-" "-" &gt;"GET //phpmyadmin/scripts/setup.php HTTP/1.1" 404 141 "-" "-" &gt;"GET //myadmin/scripts/setup.php HTTP/1.1" 404 141 "-" "-" 
why the /r/php suscribers numbers declined from &gt;40.000 to 39.330? month ago someone created a post to celebrate 40.000 suscribers
Sub contract. Then you won't need to raise prices, but instead lowers the work load while you deal with the clients and skim a little off the top. 
what kind of php tutorial is creating a circle of insecurity? those of auth system in plain php? those of symfony/laravel auth that do not cover all things? 
If you work in the NA timezones, you should totally pop on IRC. I chat all day while at work. It's how I keep from being lonely.
Incidentally, I wrote a [white paper about secure data encryption in PHP](https://paragonie.com/white-paper/2015-secure-php-data-encryption). &gt; Now i have to encrypt the data to ensure not everybody with a qr-code reader can read the data. This sounds like you're trying to reinvent [Digital Restrictions Management](https://www.fsf.org/campaigns/drm.html). This is foolhardy [**at best**](https://eprint.iacr.org/2015/753) (the linked research paper is *highly* recommended). &gt; I am worried about the encryption key storage. I think i have to hardocde it on the mobile app as well as on the php app. But i am worried about managing the keys. what if they have to change and all. If you store it on the mobile device, all it will take is one clever person reverse-engineering your app to discover the key. &gt; Am i overthinking it? Is there a better way out? You're overthinking the wrong aspect of it, for sure. What is your threat model? 1. What are you trying to protect? 2. Who are you trying to protect it *from*? You said "i have to encrypt the data to ensure not everybody with a qr-code reader can read the data", but why is that even a problem? What happens if you implement your AES wrapper and I steal the key? You're back to square one. If that's an acceptable risk, then to save on processing power, you might as well just `base64_encode()` the data and call it a day. It would save you the embarrassment when your app falls prey to [chosen-ciphertext attacks](https://paragonie.com/blog/2015/05/using-encryption-and-authentication-correctly). But whatever you do, please *do* use TLS!
I was in the same boat. After about a year and a half, I found that I had become good enough. I now make more money than I did working alone, have great benefits, and don't have to worry about whether a client is going to pay on time or where the next project is coming from. I know a few people who have great contracts and make a great living on their own, but I find it to be a pretty rare situation in this field where it's better to be self employed. Most people just can't land the kind of clients who will pay enough to make it worth it. Those clients typically would rather deal with an agency or at least a group. 
Being an owner/operator is hard, and every minute you spend working on a project is a minute you're not spending selling yourself to prospective clients, so you're basically on a treadmill, and if you stop, you feel like the treadmill is going to keep running and you're going to fall on your face. If you are tired of working by yourself find a local shared space, or coffee shop. Find local clients, find local business networking events. Being a php developer isn't about working yourself to the bone, and there are plenty of 9-5 jobs or startups with longer hours if you prefer to stay "hardcore". If your work is having this negative an effect on your life and relationships, you need to reevaluate how you work.
You have no passion. Passion is what drives you to solve those stressful and tough situations that by the time you have solved them you see ecstatic and high from the experience. Passion is what makes each day fly by as you code new solutions, find new technologies and ideas to solve existing issues. You're just a code monkey struggling to turn the wheel. Passion turns you into a marathon running man who lives for the job. I dream of code. I love PHP for its idiocy and it's genius. I love to code, to find new solutions and experiment with new technologies. I also work from home, I get lonely too. But it's the code. The problems. The research and ability to come up with whole solutions that help solve problems that excites me.
I know the feeling, I've been running https://www.carve.io for nearly three years now and man I've had these lows. Do you know what recently dragged me out of it though, it was, despite the fear of doing so: * Raised my rates from £300 a day to £500, if I lose even a third of work as a result, that's fine, at least I have more time to chill now. * Only take on clients that I feel are a really good fit. If I get the slightest feeling that the client could be troublesome, I tend to end the relationship there and then. * Fire existing clients that stress me out. You may think you can't here, but I nearly got taken to court for bowing out of a client relationship and yes that was stressful, but knowing I don't have to work with that client anymore was a real breath of fresh air. * Read "Double Your Freelance Rate" by Brennan Dunn. It's incredibly helpful for learning about the best way to approach managing this sort of business and how to deal with clients. * Look after yourself. That time away from the computer, make it so, don't have emails on your phone, disable notifications on your phone and live away from the digital world when you're chilling out. Notifications and interruptions like that are external stressors that can be controlled. * Meditation: I'm not some hippy dude, I promise, but daily meditation using http://www.headspace.com has helped me completely remove the day-to-day anxiety and stress I used to feel. I hope this helps, if you have any questions what-so-ever I would love to help. Please just message me, I know how hard this stuff can be, especially in the early stages like I guess we both are, I'll do my uttermost best to help as much as I can!
Two completely different use cases, and you really don't understand virtualisation if you think it only covers Vagrant.
 Should elaborate more, I am building an asset management app. I am generating a qr-code containing information about each asset and the qr-code is going to be printed out/ stickied to the device. Hence publicly available I am trying to protect the data regards the asset which is embedded in the qr-code. I am protecting it from anyone with a qr-code scanner but who shouldn't have access. I am encrypting the data before encoding into the qr-code and decrypting after reading from the qr-code. Is that the right approach? 
What would you use Vagrant for that you wouldn't use Docker? The link posted was Vagrant only
I wasn't asking for an explanation of what cosmetic means, I was giving you evidence of core rewrites to the engine, parser and tokenizer. Not entirely sure why you're adamantly sticking to being an asshole instead of listening to that.
Sorry, what?
How old are you? Because I don't usually see lots of grown ups being very enthusiastic about fixing shit code to provide for their families.
Creating additional methods to mutate an object's state makes your code harder to reason about. The constructor's purpose is to set the state of the object, and it should (ideally) be the only thing that handles that responsibility. This is one of the driving principles behind React.js and it works very well in practice.
Doctrine is your best bet. Anything else is simply not worth talking about. just me 2c.
It doesn't sound like your job is killing you, it sounds like you are killing you. I'm not trying to kick a man while he's down, but you need some perspective. 1. If you are having daily bouts of loneliness, then you need to be around people more. I understand you work nights, but you need to learn how to do that and have a life too. Isolation is terrible for people, and is likely the cause, but definitely a contributing factor to your depression. The worst part is it becomes a cyclical problem. You're depressed because you're lonely, and lonely because you're depressed and no one wants to be around you because of that. As a veteran, I can tell you this is a dangerous path, and I have lost a few friends to it. You need to make time to get out and be around people. There is no point in working at job that make you miserable. 2. Programming is not super stressful, you just need to step back and get look at the bigger picture. No one's life is hanging in the balance of your job. No one is going to suffer the lose of sight, hearing or limb if you fuck up a line of code. Is sounds like, at the end of the day, the only thing that is going to be hurt is you pride and self-esteem, which can be painful, but isn't terminal. Failure is all about how you look at it. If you think it's the end to the world, then it kind of is. However, if you view it as a learning opportunity, then it tends to have less of a negative impact. And more importantly, you will be less likely to do it again. Something that will also help is building a network of coding professionals you can ask for advice from. I have several friend that I can contact if I run into a problem I can't seem to figure out or need a second opinion on, and sometimes they're the ones hitting me up. It you want some help, feel free to pm me and I will give you my contact information. 3. Getting use to working nights sucks. I had to do it several times in my life and it is never easy. If you are having a really difficult time with this my only recommendation is to see a doctor. 4. A strangers relationship problems are a little bit out of my comfort zone, because I have no point of reference. My guess is what I mentioned in point 1. All the stress and depression likely became toxic. Now that you are reconnected, try to be different and fix the issues that caused the problem last time. If not, you'll end up with the same result. Also, don't worry to much about being on the "fence about everything". One of the worst things you can do to a relationship is push things and go to fast. Learn to let go a little and let things happen at their own pace. 5. This one is the easiest. TAKE A VACATION. There is no point in being successful if you can't enjoy your success. I understand you might have some on going obligations, like maintenance on a project, but you need time off. This is also where having some friends in the profession helps. I have a friend you runs his own business, and when he takes some time off he will call up myself and a few others and ask us to cover his stuff. Also, if you can financially, you should think about hiring some one else. 
Doctrine for a *lightweight* ORM is the best trolling I have seen here so far %)
1. Are there any YAML parsing libraries to say parse math expressions eg.: `cookie_length: (60 * 60 * 24 * 7)` where this would convert into an actual value? 2. I'm experimenting with auryn/slim 3 for a new project and wonder if someone can give me a code review on my base app so far https://github.com/exts/app 3. I feel like the years of me messing with laravel since back during 4.X days (and still maintaining a project from then that version, I'm now currently rewriting) I've completely got used to fat controllers, basic models and in one of the recent projects I tried doctrine2, but organizing entities/repositories seems to be a bit more complex than what I was used to so I'm wondering if anyone has any good reading material for dealing with data. 4. When did PHPStorm support pimple data correctly? Kind of random, but I took a break from phpstorm because I worked with silex on most of my projects and I started working with slim 3 recently and noticed that pimple arrays work correctly now with auto complete and everything. Wondering when they fixed that. 5. Why can't I find any articles/talks that talks about caching in PHP, the do's the dont's. 6. How come there's all these talks about SOLID in PHP, but it's hard to come by real world examples applying it to applications. Back in 06 when I first got started writing PHP there were real world applications tutorials start you off 'write a blog', 'lets create a basic cms', 'creating a basic forum', etc... and there's not many using SOLID and if they are they're only using it partially. Like I've been writing PHP for 8 years and I'm still learning shit, I never tested before 2015, I never did dependency injection before 2014. Never used composer before the middle of 2014. I just feel like there's a lot of talks, but none of them lead by example.
was waiting for this. thanks!
Wait so unless a language enforces One True Way™ onto its developers then it's shitty?
That wasn't a rant. :) Want to see a rant? https://philsturgeon.uk/php/2013/09/09/t-paamayim-nekudotayim-v-sanity/
Great, thanks!
Your point? Doctrine works pretty well for any size project.
Just store a [UUID](https://paragonie.com/blog/2015/07/common-uses-for-csprngs-cryptographically-secure-pseudo-random-number-generators#uuid-v4) for each asset in the QR code. Anyone who scans it will not get any meaningful information or context out of it. If you must encrypt it, use [defuse/php-encryption](https://github.com/defuse/php-encryption) and don't roll your own. Just know that anyone who obtains your app can steal the key and then decrypt all QR codes and ***there is nothing you can do to prevent this***.
Not OP but Doctrine is in the realm of heavyweight, not lightweight. Does Doctrine work? Yeah. But not every project needs magical method calls full of reference and caching of every little thing with logging to the debug level.
This entire post reeks of burnout. You need to get away from your job and do it soon before you don't want to look at it anymore. I had a run in with this same problem a year ago. I ended up quitting my job and working small jobs for previous customers working 10-20 hours per week. I burned through most of my savings but I got to spend time with my family over the 10 months I was working for myself. I started with a company a few months ago and I'm in a much better state of mind now. The new job is slower paced and much better for my mental state. Best of luck figuring things out.
27, been doing this for the last 10 years, and yes I went to college for this. Every day I am learning, every day I am working my job, finding new solutions and ideas and coming up with awesome ways to solve tough problems. Now they might not always work, it does get frustrating but it's that "one more problem before bed" that excites me. That new framework in JavaScript or pooh or what ever language that lets me explore new ideas and experiement. Programming isn't about "ugh this client wants this solved and its soooooooo hard" it's about "this is a tough problem to solve, what if I tried x? No? Y? Excellent it works" I also don't like "hacking solutions together" do you hack a cake together? Do you hack a house together? No you take the time and put effort into it. Passion is what gets me through. Now you old timers out there might say, wait 10-20 years and you'll be miserable. I don't think so, because I am always learning, always experimenting and always excited about what's around the bend
Thanks, This is a much better approach
Or if you really need to log some debugging data in production, only do it on a few of your servers, while also lowering the amount of load/traffic those servers get.
'Therapy' is not a dirty word. Mental health is just like physical health, you must take care of it or it will slowly cause more and more problems, ie stress management. *edit: your comment was spot on, thank you!
I'm not really sure how could more income fight my depression.
I use NetBeans, it has all the required features, is easy to use and is also free.
http://fatfreeframework.com/databases
Quit the job and find a better source of happiness. I did this as well. I saved enough cash to last me 3-4 months and simply walked out on the spot. Your health is more important than the uptime of a Wordpress site.
&gt; You must be trolling? I hope. Sorry no. Downloaded it and tried it out. It's not $100 worth of IDE. Also it's really telling of the maturity level of this subreddit when anyone who so much as mentions another IDE is downvoted. I expect downvotes for saying "PhpStorm is trash", but what did OP do? What is wrong with his post other than it promoting an IDE other than the holy PhpStorm?
The closest thing to hibernate in the PHP world is Doctrine 2. Most people don't consider it lightweight due to all of the ceremony involved in setting it up and having to learn a DSL to use it, but performance wise it's definitely one of the faster and more well-tested options out there. Eloquent will probably get mentioned here a bunch, but beware it is ActiveRecord and comes with all the pitfalls of it. Truthfully, if I wasn't going to use a full fledged MVC framework and I wasn't unit testing the app, I might consider just using a simple DB abstraction library (such as Zend\Db or Doctrine\DBAL) and simple serializable classes. 
Any thoughts on Silex or DooPHP? (more unrelated to reactJS integration, but in terms of a comparison to Slim or Lumen)
A little advice from an elderly coder. We spend more time working than at home so be sure you love what you do. I love my job but that's cause my job is something I chose to do and gives me great gratification. If you dread going to work you should be looking for a new job. Being an entrepreneur is hard work and not everybody is suited to it. Consider making changes in your life, work shouldn't be a burden. It should be hard but gratifying, it should be full of challenges and the occasional slacking off. You are in a mess you made, fix it!
I went to community college for programming and have had issues landing a job for the past couple of years. I need to move to a bigger city as it's harder to find time to attend interviews hours away while holding down a full-time job. It's also difficult to work on portfolio projects and study theory (for tests and general skills) with limited free time. I may still succeed if I keep at it. That being said, I got a job as a janitor a few years ago and while the job will likely not last forever (privatization), I'm happier than I've ever been. I'm glad that you posted this, as I could be where you are now at some point in the future. I'm not saying that you should quit; I'm just saying that I'm a similar guy that thought about starting my own business like you did, but didn't and I'm happy. I bought a motorcycle and I'm enjoying my life while I decide what I want to do for the rest of my life. I'm 29 now, so time is going fast and I want to make sure that I enjoy it. Maybe you can find a path that still allows you to program professionally but with less stress.
I work remotely as part of a team and it's changed my thought process around. Your post used to describe me, but when you're working with other people the stress is reduced. You'll still have the social issue, but I see that as a separate problem to work around in my spare time. Keep your spirits up and find that positive state again - it will all start to turn around!
mate i was having same attitude, but when i switched into next level of skills i start to search for tool that can do for me basic stuff and trust me it's hard to find one. I was scared of new IDE but when i try out PS i was so happy, it's adorable how PS manage your daily work. My ide flow was notepad++ =&gt; eclipse =&gt; netbeans=&gt; PhpStorm. This post is not commercial, it's my personal opinion.
I work night shift at a hotel and I hate it. I have been programming PHP/Java/C# for years and I haven't gotten a job yet. I recently made a contact with a local hosting company and am getting some freelance work which is awesome. I am very smart but I have learned in isolation so I have missed out on the usual interaction based learning that helps developers grow. Anyways, the isolation can be brutal. My only solace is hoping that eventually I will get real programming work that I can live on. For sleep I use discipline and melatonin. Discipline because I force myself to go to bed when I need to. Melatonin helps me sleep better so if I am only going to get a couple hours then at least it is a good couple hours. The toughest part is coming home as the sun comes up and wanting to do stuff. But I'm too dopey. If I stay up then my time will be unproductive. I also don't have a girlfriend so that helps with the stress. I want to be financially stable and mentally stable when I get one. Now I am pushing forward and don't have the time or energy to do a proper healthy relationship. It sounds like you are burnt out. Can you approach the company and work together on a solution. Maybe the projects can be structured better to deal with common issues. Maybe you need to delegate more instead of shouldering everything. A company isn't going to know you are breaking unless you tell them. Maybe you need some time off. Maybe hire a cheap dev on odesk to do some of the menial stuff. You'll make less but it may give you time to recoup. I find that my productivity is directly related to my health. Staying healthy is important. Drink lots of water. Don't overdo the simple carbs or you will crash. Go for a walk when the sun is up. Soak it up since you spend most of your time in the dark. Maybe a sun lamp could help. The lowest I ever got was when I had been doing night shift for a few months I would go to sleep in the dark and wake up in the dark. After a bit everyone would be going to sleep and I would feel wrecked. I don't know if I got used to it but I feel ok now. I am very isolated but I am happy as long as I keep learning new stuff. When I encounter a problem that I don't think I can work through, then I start to feel it but when things are moving a long, I'm happy. Maybe do some research on dealing with night shift. Might find something useful. Good luck. 
I've used Propel for a number of years, and have enjoyed using it. It isn't however "cool". There's a nice video thingy on the front page of http://propelorm.org/ which might give you an idea what the syntax looks like...
I'm with you on this one. I've had to fix too many assignment in conditions typos to do without them. I prefer it aesthetically at this point too. Whatever constant value I'm using is virtually always shorter than whatever variable/function call I'm comparing it to. When I'm in a condition I can usually guess what's going to be checked, seeing the value first is quicker uptake for me, espeically in if/elseif/else blocks that I might need to scan a couple of times. // Check number if (100 === $this-&gt;getNumber()) { v this is where I can basically skip ahead } elseif (150 === $this-&gt;getNumber()) { } elseif ($this-&gt;getNumber() === 200)) { // vs needing to do the whole line } .... Non-equals comparisons are much harder to comprehend with yodas though, those I do not do unless it's in specific cases. 100 &lt; $variable // Easier to mix up in your head to $variable &lt; 100 $variable &gt; 100 // Less prone to mistakes reading it 0 &lt;= $variable &amp;&amp; $variable &lt;= 100 // Only time I use it, to emulate 0&lt;= $variable &lt;= 100 $variable &gt;= 0 &amp;&amp; $variable &lt;= 100 // still easy to ready, but the range intention isn't as explicit That case makes the range intention of the comparison much clearer IMO. I really miss the ability to just write the shorter, explicit range checks like you can in Python.
Try Rob Allen - https://19ft.com/ / https://akrabat.com
Is your HTML code saved in a .php file? If not, it might not be handled (ie put through the php interpreter) at runtime. What's the output like? You should enable display of errors in php.ini. You could also put this at the top of your script: error_reporting(E_ALL); ini_set('display_errors', 'On); and see all errors that occur while processing your script within the html page. 
It is saved as a PHP file. I will do that to see errors, where will it display them?
Yeah, or even better add a __toArray
True, but i will probably mostly use the week mode anyway. Personally I don't have a use case for the strict mode. but I haven't used PHP 7 yet, so time will tell. EDIT: wording
Define "heavy weight". Where is the distinction? As far as I am concerned - if you go to the trouble of using ORM might as well use a proper one. There sure are lot "orm" projects - but very few are actually good. Even fewer are properly tested, documented and actively developed.
You did put the code within &lt;?php ?&gt; tags? And you have index.php (with the first html code block) and menu.php (with the menu html block) in the same directory? And more importantly, tell us what you actually do see on the page (or in the page source). For further help, I would also advice you to move your question to [/r/phphelp](https://reddit.com/r/phphelp)
how have i never seen this? thank you!
I've been using https://github.com/terrafrost/phpseclib/tree/cms to sign PDF's in a manner conforming to the requirements of CAdES-BES / the EU Electronic Signatures Directive. fwiw.
It's a domino effect. More money per job, less jobs, more time off to relax, money to hire someone to help you out, money to take a vacation... Money doesn't buy happiness, but it can buy a less stressful experience.
Awesome I will correct that when I get home thanks. 
I've been using (and helped refine) this theme that matches the code listings on the Symfony and Doctrine docs https://github.com/cordoval/Symfony2Colors
Doctrine ORM is the closest thing I know of to Hibernate. There aren't any other released ORMs I know of that will allow you to write POPO classes and map them. Propel is planning on moving to data mapper but it isn't released yet. Doctrine can generate the schema for you, so you don't have to do it manually ([docs](http://doctrine-orm.readthedocs.org/projects/doctrine-orm/en/latest/reference/tools.html#database-schema-generation)). There are a lot of other helpers too. If you are using Laravel check out [laravel-doctrine](http://www.laraveldoctrine.org/). 
More consistent sleep, more dreaming solutions, less head bashing against walls for unproductive hours. If you can get up at dawn and get rid of the night work stuff might work better.
How does redbean handle migrations of db's with lots of preexisting data?
I like [Paris](https://github.com/j4mie/paris) -- a very lightweight ORM that utilizes the also-lightweight [Idiorm](https://github.com/j4mie/idiorm) query builder. Some basic example code: http://j4mie.github.io/idiormandparis/
you bastard. i have zero free cycles right now and just spent an hour fiddling with vdebug. and it's awesome. you get my vote for winning the internet today.
Can I ask, are you on any medications? Adderall, paxil, etc.? My life began spiraling when I was on adderall. I got an inhuman amount of work completed, but it took a huge toll on all of my personal relationships.
This was pretty eye opening for me. I found my "therapy" was going to therapy and venting about various things to a therapist and them volleying back to me with insights. It can be an expensive form of occupational therapy, but once you found someone you can talk to, it's brilliantly helpful. My wife and I are best friends. I choose not to drag her down with my insecurities and takes on various parts of my work. Therapy, whatever it may be for you, helps.
I'm using this one https://github.com/ChrisRM/material-theme-jetbrains you can choose between darker, lighter and default theme.
So &gt; I wasn't good enough and yet &gt; go on my own I'm puzzled as to why you're surprised it's killing you? If you weren't good enough to make it in a firm with other devs around to *work with and learn from*, what on Earth possessed you to try to go it alone? If you're shit at something you don't... you don't *set up a business doing that same thing*. That said though: &gt; I have daily bouts of loneliness and I think I am slowly spiralling towards depression See a specialist. Your local doctor should be able to refer you to someone. **This is important**.
yeah - pretty sure Rob Allen doesn't do sidejobs. ok. yeah.
I feel similarly, (though office politics and one too many workplace sociopaths has all but ruined day jobs for me) and am in a similar sounding situation with one huge job recently (that I should actually be finishing off right this second actually) that pretty much crushed me, and affected all my other clients work as well... I'm not quite sure of the answers, I'm still looking for them myself, but if you need someone to chat to I'm happy to lend an ear if I can 
First, I have a feeling that you value yourself VERY much less than you're worth. You shouldn't be working by the hour, yet you should estimate how many hour each project takes you, pay yourself $35+ per hour, and TRIPLE the number of hours in your estimate before billing someone. You'll lose probably 75% of your business-- and you need to. Next, you take pride in yourself and your work. Think of yourself as one of the best people your customers could possibly get: Not because you're the most skilled, but because you are skilled enough, you care enough, and you take your work personally. Then, take some of that extra cash and hire an assistant to do the mediocre work and to do things while you're on vacation. They will appreciate the work and you'll appreciate the break. 
I'm into that. Or even a just a slack channel.
Thanks, we'll check it out.
I just might be into that, thanks for the offer :) I'll try and contact you this week!
&gt; I prefer it aesthetically at this point too. Whatever constant value I'm using is virtually always shorter than whatever variable/function call I'm comparing it to. When I'm in a condition I can usually guess what's going to be checked, seeing the value first is quicker uptake for me, espeically in if/elseif/else blocks that I might need to scan a couple of times. Same here. It also adds clarity if there's a lot of brackets. &gt; That case makes the range intention of the comparison much clearer IMO. I really miss the ability to just write the shorter, explicit range checks like you can in Python. We could actually add that to PHP! Unlike Java or C, we didn't make the mistake of specifying associativity for the comparison operators, so currently they're just a syntax error. That means we could make `0 &lt;= $a &lt;= $100` work in future, if we wanted it to. It's something I'd like to add eventually.
It sounds fairly plausible for it to take 10 minutes to initially boot up... *if you're including provisioning*; which is of course the beauty of Docker. Everything required is contained in the image, whereas everything required for a new virtual machine has to be pulled down, installed and configured. Subsequent boots should be pretty quick. I'm not sure how you could manage infrastructure via Docker. My current workflow has been to write up simple Vagrant files, hook in automated provisioning with Ansible and then use a custom provider to initialise a *proper* VPS on the likes of Digital Ocean. i.e So I can run `vagrant up` and have a VPS with DigitalOcean created, booted up, provisioned, and my code (inc. containers) loaded on to it. Similarly, I'm not sure how you could emulate a distributed/scalable set-up using Docker (i.e where you have *x* machines with *y* running on some, and *z* on another) - as that's at the machine level again. To use the above example, it means I can initialise entire clusters with one command. Similarly, as far as I know you can't use Docker without a virtualisation layer in teams where there are different operating systems, `boot2docker` is essentially a very simplistic version of Vagrant - a wrapper around VirtualBox's API (`VBoxManage`). That said, the infrastructure use cases above are *really specific* and you may not care too much about them - they're definitely pretty cool though! I'd definitely give it another look depending upon what you do, and there's also [Otto](https://ottoproject.io/), from the guys behind Vagrant.. but I don't have a clue about it.
Either I'm fixing legacy code or more frequently I'm not too sure how to do something and then am stuck in figuring it out. This is sometimes related to PHP and sometimes to JS. I'm still learning. I do feel relief when finding a solution though but it sometimes comes at a big cost :)
aw come on I can't be this much of a textbook case :) when he started evaluating the checklist it's as if he started describing me. No friends, gf left, health deteriorating, but I do have hope... Thanks for this, the advice you gave me is pretty solid. I'll watch the other video as well :) I hear you about being reliable and consistent - I love the job but feel like I took on too much work and am having trouble meeting deadlines.. Also I did try and surround myself with likeminded people but it didn't work too well.. for now at least.
Not me :) A lot of people are going through this I believe..
sometimes i feel like a cranky old man. "in my day the operating system *was* the ide, and our refactoring tool was this thing called 'sed'... and we *liked it*."
I need to check the footprint of Monolog. That package alone could be bigger than the micro framework I'm using for my API. We're using Beanstalkd with 5 consumers. I guess I'll create another tube and attach some consumers just for logging.
Just checked their site for a minute before the bed. The UI seems pretty slick and stuff like alert conditions could really be helpful. Will do a more indepth analysis tomorrow. Probably pipelining the log messages -&gt; creating a queue on app.shutdown event and passing the messages -&gt; creating a seperate Beanstalkd tube and adding few consumers to process queues -&gt; pushing log messages to Graylog. Something like this will hopefully work. :)
No real friends. I have some, but I don't feel like I could share this with them. Friends I could have confided into left just recently. Brutal year. Conferences are cool though... the one thing about that is I feel I'm working at conferences and not resting.
Burnout is exactly what it is. Not solely from the job but from everything. I'm tired :( Good to hear you managed to sort things out!
I had a menial job before and learned in parallel to working that job. That was pretty hard. Good to hear you've figured things out at least for now. Watch the road :)
Not currently but in the future it would.
I have a folder on my computer with both of the PHP files in it. It won't work like that?
How old are you and where in the world are you?
One day I quit my full time web development job to strike it out solo, finding a golden opportunity to have a constant stream of work coming my way. Much of what you felt, is exactly how I felt. Except, and not to rub it in, my gf stuck by me as my biggest support. It got so bad, that I ended up quitting working solo and went back to my old job with my tail between my legs. I'll never do it again either. The hours are brutal, the pay is terrible, and client expectations for some reason cannot be managed well enough to let you actually commit to doing the work without worrying about devoting some time to the 4 or 5 other projects on your commitment list. It gets to a point where you don't even have the time to seek help from other people. I know im bad at time management, but Im just never going to do that again, it was brutal. If i ever DO do it again, im going in with a partner or two. 
i don't suppose you guys need a junior dev by any chance?
Genius! Let's start a Skype group like /r/sensation_ said
Works for me!
Cool idea. Count me in too. I work remotely and don't really interact with coworkers much. It'd be nice to be in a group that bounces ideas and stuff off each other.
There seems to be those shit job dues that developers sometimes have to pay. It seems you've reached the end or near the end of that phase in your career so overall I think you should remain optimistic. You have xp to level up amigo. And don't let the Google thing keep you down. Everyone does it. 
Disagree. I was stuck in the same situation and I found that just merely getting out and meeting people helped overwhelmingly. It also brought me some new opportunities and the confidence to pursue them.
Mmm, back in the day when I was building on ZF1, I thought it was a pretty decent framework. I mean, I've seen people do horrible things with it, but that's because they didn't bother learning the framework before diving head first in and writing code (ie. Not using zend_application etc).
Are down migrations ever actually used? Do you even bother making them?
if you jump on freenode, there's a channel called #phpc that might be helpful.
I stand corrected lol!
Good advice, but I have a quibble with: &gt; As a rule, use get only for methods with constant time complexity; for anything more complex select a more descriptive verb. For example, if we write a method that uses arithmetic operations to calculate the return value, prefer the verb calculate. I think a better rule is to not make assumptions about the complexity of `getX()` methods. You are breaking encapsulation. The complexity of the operation that returns a piece of data can change over time or across implementations. In some cases–e.g. lazy loading–the same implementation can be complex one call and constant-time the next.
How old are you and how long have you been coding in php? What other languages do you know? And at what level?
I understand the point of it, but I think the damage to overall readability (it is helpful when the code reads like prose) far outweighs the one-in-a-thousand chance of catching an unintentional assignment. I would much rather a linter that flags an assignment in a condition as a warning.
I have a side project like this. I forked phpMyAdmin at version 3.3.10 and have been working on refactoring it to use classes and what not. I have to say, it is a pile of poo. I absolutely love refactoring and modernizing legacy applications. :)
This. I'm a one man web dev shop. It can be a real grind sometimes. But you have to make the good times outweigh the bad. Isn't that why most of us setup shop ourselves? Knowing its going to be hard, but having the ability to say no and live a more self controlled lifestyle? Don't be a slave to anyone. Client's should have a mutual respect, if not fire them. Listen to your closest friends, ask them if you seem a little different and why. Slow down, get some perspective if you can. If you can make enough $ while allowing yourself to take on less, I'd do that for a while and the re-evaluate in a couple of months. Free free to PM me. I've been through the good and the bad over the few years I've been flying solo.
what is the best php online community to be a part of? The "it" place?
Before web development I was a carpenter/contractor. Although I had a similar experience. Running your own business, wearing all the hats, doing all the work, and on top of that dealing with clients is stressful. It is very easy to burn out. You need to take on less work. If that means you are not making enough, you need to charge more. If you can't get enough work in that case, then you should reconsider running your own thing and instead be working for somebody else. I work for somebody else now and my life is so much better. The salary is less, but I have paid time off and benefits, AND if you calculate the hourly rate of my salary at 40 hours per week , it's not actually even that bad compared to if you calculate it compared to the hours of running your own business and working (or thinking/stressing about work) every waking moment.
After 10 years... put a ring on it or move on ;) 
is ethic implement this on your code? something like if user country or user age then send a 451. wtf. The normal is ISP restricting access to for example ThePirateBay. Also porn sites check age before to let you in, with javascript. 
It sounds silly but starting a regular exercise plan made the biggest change to my burnout. Straighten out your schedule and add some exercise.
You have to run a web server. Your browser can't run PHP code by itself.
The use case for it is more protest than anything else. As /u/Jonny_Axehandle mentioned, Reddit is legally required to block some subreddits in Germany. They comply with the law but can give a tiny middle finger by returning 451 (a reference to *Fahrenheit 451*)
In the case of running a controller method from the CLI, it is very easy with Auryn: $output = $injector-&gt;execute('Acme\Something\Controller::createUser', [ ':username' =&gt; $username, ':password' =&gt; $password, ]); In case you missed it, the *routing* for the controllers is placed in the bootstrap file. The execution chain would always happen starting from that point. There's really very little magic happening here.
You guys should use a slack room. 
I like Eloquent too, but it doesn't scale very well. I've had to rip out a lot of loops over big Eloquent collections (even with chunk) because they just ran way too damn slowly. I also hate the leaky abstractions in Eloquent, like events not firing on some functions (E.g. App\Model::where('blah','=','this')-&gt;update(['something' =&gt; 'new']); doesn't fire a 'saved' event) and you're just supposed to know, duh, that's not really an Eloquent call. However, with all those annoyances, I still use it and like it quite a lot. It's just definitely not a be all/end all solutions.
If one really wanted to see this kind of blocked content couldn't they just set their IP to be from a country with a less restrictive view on freedom of speech. The whole thing is kind of pointless, it will only keep the people who don't care out.
Here it is: https://join.skype.com/ihSbLTYhywdP Edit: [here](https://www.reddit.com/r/PHP/comments/3xsnwf/since_we_all_want_to_fight_our_postcoding/) is the visibility post
Ahh. I assumed it was just like JavaScript. Thanks. 
Anyone reading this should know: &gt;Available as of PHP 7.
Consumers of your code always need to know the performance implications of it. That's not information leaking; it's just a fact of life for software engineering. Using naming conventions to give hints to the consumers about those implications is a good practice, as the author suggests. Making assumptions about those implications based on naming conventions is fine, with obvious caveats. You have to strike your own balance between safety and pragmatism here. In any case, there's no reason not to use the naming conventions on the *providing* side of an interface, even if you don't subscribe to the assumptions on the *consuming* side.
I can see it now - "PHP: A Fractal of Bad Careers"
I'm using this one and love it. Very easy on the eyes and the font is nice and big so I'm not straining to see.
Why skype?
Yes we dislike Laravel but it is for the opposite reason. Symfony is simpler than Laravel, instead of having migrations and model class(light years apart in directories) and still need to create the database yourself. In Symfony it's all in the model class(annotations) and Symfony creates and updates the database. And if you like making your life harder, you also have that option. The Symfony form class is much more intuitive, and if you can't bother writing it, Symfony will write it for you! Error reporting is also much more accurate and makes debugging much more simple than Laravel. The more I use Laravel, the more backwards it seems to me, and it has very basic features, where are the embedded forms, the translation plugins, the annotation routing and the advanced code generators?... it's really one step above Codeigniter and nothing more. But yes, every person should use whatever framework they like. Just don't cry to us when Laravel breaks backwards compatibility and your code needs to be rewritten, it's only fair. Edit: To be fair, my problems with Laravel surface because my company is doing very large scale applications and using Laravel. And just going by the standard architecture the apps grew too messy, everything is hard to find. You have to travel directories far apart to create a new migration, update your model class, update your controller and then update your views. The hardest part is actually navigating to these different parts. And handling translation and complex relationship has not been too kind either. So I guess people doing normal sized projects may not feel so strongly negatively as I do.
1. /r/phphelp 2. If it's really a query execution that is failed, be sure you set PDO::ATTR_ERRMODE to PDO::ERRMODE_EXCEPTION, and have error reporting on. 3. This code is **awfully WET**. Are you sure you want to write everything twice? Here is how it should be $pdo-&gt;setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION ); if(isset($_POST['submit-tarikh'])){ $sdate = $_POST['start-date']; $edate = $_POST['end-date']; } else { $sdate = date("Y-m-d"); $edate = date("Y-m-d"); } $stmt = $pdo-&gt;prepare("SELECT * FROM aduan_form WHERE deleted=0 AND tarikh BETWEEN ? AND ?"); $stmt-&gt;execute([$sdate,$edate]); $results_view = $stmt_view-&gt;FetchAll(PDO::FETCH_OBJ); if there is still no error then your query returned no rows. thus check the input data 
I joined, a group like this seems like a great initiative.
Regarding 2; There may be free books, but you probably don't need a book. There are plenty of free resources online. Despite displaying many bad practices, w3schools (and the like) is accessible to everyone and may be a good place to learn the basics.
Because everyone hates it universally so it gives people something to moan about. Also because of the amazing Linux support.
I've updated my original comment: https://www.reddit.com/r/PHP/comments/3xp62q/rant_this_job_is_killing_me/cy6knx5 With links to the slack group and skype group.
https://devsupportgroup.slack.com Invite: http://iamdez.com/wp-login.php?action=slack-invitation
I've added a slack group: https://devsupportgroup.slack.com Auto Invite here: http://iamdez.com/wp-login.php?action=slack-invitation this goes along with the skype group that /u/sensation_ created.
I disagree, it's like teaching your pet dog to crap in another room to achieve resolution to &gt; "help my dog keeps crapping in the lounge". You'll have to revisit issues from the "fix" / "implementation", if we can even call it that; although if you absolutely do not get something, it can be acceptable to get something rather than nothing, but it will hurt in the long-run.
I'm using the built in monokai scheme but I've changed some color based on Sublime Text for the better readability.
Is post coding depression a thing? A quick Google doesn't turn up much. Can anyone give any more information?
Sorry for my ignorance but what is the point of MessagePack? is it created to serialize messages across platforms/projects/languages? 
Cool thanks! 
Yeah there's lots out there for depression among devs, which is really good. It's more the term "post-coding" that I'm querying. It's not a term I've come across with this stuff is all. Or am I just being dumb?
I use the base16 chalk dark theme myself -- there's a cool preview of each set here: http://chriskempson.github.io/base16/ and the phpstorm-compatible files are here if anyone's interested: https://github.com/adilosa/base16-idea 
Hey! 72 of the reddit php community are already on our gitter channel - it runs in the browser and you can download the app - https://gitter.im/reddit-php/chat - see some of you there!
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/lolphp] [Php is depressing : PHP](https://np.reddit.com/r/lolphp/comments/3xu26s/php_is_depressing_php/) - [/r/programming] [PHP: A Fractal of Bad Careers](https://np.reddit.com/r/programming/comments/3xutrk/php_a_fractal_of_bad_careers/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
I'm just pointing out the largest memorization burden is the standard library, not the syntax and such imo. Syntax and such is generally relatively easy [for me] but maintaining the 3-4 standard libraries of the languages I use on a regular basis is really, really hard due to the scale.
Maybe a play on postpartum?
&gt; I'm processing a ton of human language for relevance and sentiment analysis. Hopefully going to make a really smart ML algorithm, which Graphlab Create promises to have so I'm tempted to just write the whole thing in Python. Python sounds like a good tool for this job honestly. I have a hard time picturing the advantages PHP would provide you with in that particular context. JAVA is also an option here. &gt; Trust me I love learning new things, but I know there's a tradeoff. I could be really efficient with building in PHP but if it's no the right tool for the job it could be a facade of efficency (Ha design pattern pun). haha you get a thumbs up for that pun! Well that's my point so shazaaaaa! 
Not to be a downer, but I'm not sure coding depression is a thing.are you sure you either A) have the passion for the job or B) are not burnt out? Don't hate me with your down votes, I'm just curious.
I really like elequent from laravel - active record is gawd
I'd read or watch videos and articles from Facebook, the seem to have scaled hp to there needs
What would you use this for?
+1 I'm not about to install Skype or sign up for Slack, but I'm on IRC all day on Freenode.
I'd be interested in a Freenode group. I can't keep track of other networks easily, irccloud or otherwise.
An euphemism for lack of work-life balance, self-esteem, personal boundaries, realistic limitations/expectations, etc. Symptoms include Skype groups, IRC channels, self-diagnosis and tendency to avoid all forms of personal accountability.
All modern JIT compilers optimize to very fast machine code if the type within the function does not change. V8 does this. In fact, as long as the types don't change (pipe dream, I know), V8 can get the speed of JavaScript to within 2-3x of highly optimized C. Unfortunately, typing is very dynamic in JavaScript and the V8 engine has to routinely de-optimize to a slower byte code format. At any rate, if PHP got a JIT, then it could optimize code. Of course, the level of speed increase will depend on the quality of the JIT and how well the code is written (i.e. doesn't change types of a variable within a function).
Does PhpStorm have any advanced feature which is not in NetBeans?
It's a platform agnostic binary interchange format. Think of it as a more space efficient JSON format.
It's a message format, akin to JSON but obviously more compact and quicker to parse because it's binary.
I'm imagining back-tracing, refactoring, or debugging those tss files in a large project. Fuck that. Thanks, though.
if python has the libs that will do the really heavy work for you it's almost assuredly faster to fight your way up the short learning curve to take advantage of that. using pre-existing, mature libs in a new language is almost always faster than building from scratch in the language you already know. having said that, php has pthreads. in fact, if you look around, there's almost always a way to "punch through" to the c beneath php for whatever you want to access.
Basically git integration it's on the whole new level, plus git blame, terminal in ps, but rarely used, a lot of auto code read like 'this variable can be unassigned' etc. Rest it's hard to tell after almost a year of using php storm. But mainly after switch I was like : wow such wow ☺
NetBeans also support git, I have never used it. Please read https://netbeans.org/kb/docs/ide/git.html
Any stressful job can bring you a depression, I don't know why programming couldn't do that as it can be pretty stressful sometimes.
Why don't you develop a standalone python app which runs as a daemon that accepts a payload? It accepts the payload and then generates the data and send's it out again. The benefit to this, is that all the python advantages you describe. Continuous processing, threads, etc is all available. PHP gets downgraded to only needing to send the payload and then receive it back and do whatever it needs to do with the information. You have various methods with PHP + Python to pass around data. Some sort of MQ or add in NodeJS and use websockets and have real-time updates on say processing the data. Leverage the strong points of each language. That's what I would do.
We do a lot of "big data" work. ML, NLP, web scraping, stuff like that. We started out as a Laravel app, and tried to do things in php. Fast forward 18 months, and the platform/api is still written in php/laravel. But the entire data processing side is in python, with a splash of Java (in the form of nutch/hadoop) thrown in. Data processing side of things does lots of work and sticks the data in elasticsearch for the platform/api to query.
there is no such thing as flawless, but lets stop kidding ourselves that it is even okay to learn flawed techniques in 2015/2016 that are from the 90's
Sausage sausage sausage sausage sausage sausage sausage sausage mushroom mushroom!!
That's exactly what I'm thinking is going to happen to us. I wrote this entire module that retrieve the data in PHP from different sources and APIs. Did you rewrite your data gathering into Python too or just analysis? What have you learned about big data storage/retrieval?
Yes it is, it is called "taste" ... 
Yes I use them quite a lot when building the initial tables. It's easier to rollback and add one field to the definition than create a ton of migrations adding one field at a time.
Makes way more sense
Two recent discussions on this: [here](https://www.reddit.com/r/PHP/comments/3vq4kx/php_weekly_discussion_07122015/cxry4wv) and [here](https://www.reddit.com/r/PHP/comments/3xmf84/slevomat_coding_standard/cy6cb80)
For Q&amp;A, Stack Overflow without a doubt. For discussion, /r/PHP is my favourite. If you like a specific framework (e.g. Laravel) most of them have forums. I was a member of PHPfreaks forums back in the day, but no idea what it's like there now.
Yeah PHP runs 80% of the web, while the other languages are just a few percent each. So people target PHP more than anything else. It's the same reason why nearly all viruses are for Windows.
I think it's good advice. An API in dev-master ought not be assumed to be stable so if you're using dev-master you're risking a BC break just because the author of the dependency changed the API up.
I'd say Slim + Twig is a combination that won't get on your way, but it doesn't mean there's some sort of integration. The experiments I've seen in symfony.fi are just POC. For the time being the only production level ways are rendering server side with node, or client side using babel to transpile to ES5 where needed. 
We generally put an `info` level log any time someone accesses a route, so we can track where users are in the application lifecycle (this is useful for our internal help desk to help users who call in with issues), a `notice` level log for expected user errors like incorrect login information or failed form validation, a `warning` if they access a route that gives a 404 (this usually, though not always, indicates broken links or images), and an `error` any time an uncaught exception occurs (through a global exception handler). Some others have said that you shouldn't put debug logs in production, and this is probably correct--if "debug log" refers to e.g. dumping a variable so you can try to figure out what's broken in your application. However, it is good to keep logs as mentioned above, and log certain data with your production logs, e.g. the user's IP address, user agent, route they visited, data entered into form fields (*excluding passwords* for obvious reasons), currently authenticated username (if applicable), HTTP status code returned, etc.
Immediately reminded of [this](https://en.wikipedia.org/wiki/Therac-25). That said, this looks awesome!
Good article. I mostly agree, except for the parameters section. Even in languages that support overloading you can't differentiate between, say, `userId` and `roleId`, they are integers in both cases. So you will often need to use `getByUserId` as well as `getByRoleId`.
Well, because Skype and Slack are two things that are used in work. Everything else is just unnecessary for work, and keeping an XChat online proved to be meaningless and I completely forgot about it in 10 mins and never used it again :) The tool should be used for something besides just idling in some obscure channel where nobody writes in ages :) Otherwise you just not use it at all and become "always away".
We already handle all exceptions on Bugsnag and automatically append environment/request/meta data. It does everything you mentioned. (except we don't report 404, validation exceptions and alike) But it doesn't cover cases like this: An user complains why we cannot fetch his website. In this case, application logs like this are very helpful to tell him what is going on. It could be this: // If we cannot connect user's website Trying to fetch site {url}... Task timed out after 30 seconds. No response from target server. or this: // If we can connect user's site but he has no content Trying to fetch site {url}... Fetch successful. There are no enough content for categorizing this website. Skipping. or this: // If we can connect user's site, he has content but has adult content Trying to fetch site {url}... Fetch successful. There are 15 content for categorizing this website. It is enough! Content seems to be related to adult. We don't allow adult content. Skipping. or anything else really. So when I get the following bug report from management "We have an issue with x.com. His content seems fine but we cannot fetch it. Can you check it out if it's a bug?" I usually end up doing this :/Trying to fetch site x.com... on Vim and reading thru the logs. That is what I mean by logs. Just a history of what happened on our application. That would be awesome if I could show those on a GUI so my management could check log history themself, or search for certain keywords on our logs. 
Just use a commit hash lock? Example: "knplabs/gaufrette": "dev-master#2633721877cae79ad461f3ca06f3f77fb4fce02e" 
Nice - I didn't know you could do that!
Curious: what's the motivation behind hiding the seed from crash dumps if the project is explicitly meant not to be used in security contexts?
You can do that if you absolutely *have* to but people should really be creating tagged release versions for people to use and you shouldn't have to rely on dev-master.
If you have a chance I would learn Python, never hurts to know more things. You will probably write better PHP, and decouple your thinking from PHP. However, a big code smell for me is when a code base is filled with a kitchen sink of languages/tools and they aren't fully used. I would advocate for diving deeper into PHP before using Python in a existing PHP environment (you could always be the one to write the extension that becomes the standard)
No. I Highly doubt it. When you are burnt out you get tired, you need a break. You don't have the will to work on that again. Depression is much more then a simple burn out. People get burnt out all the time on various things, that does not mean they are depressed.
This is a really interesting project. each bullet could be its own project.
Wtf yall, I'm surprised by your cynicism. PHP is super easy and more bankable than ever. If you get strong at a MVC type of build, developing software becomes quick. JS/CSS is more problematic than PHP.
Same. My freshman year intro to engineering class had us do a report on an engineering failure and my group was assigned Therac-25. I've never forgotten that one. These days my VoIP job somehow managed to morph to the point where once or twice a month I'm working with X-Ray machines, and though I know it's nothing like a radiation therapy machine I still find myself treating them with a lot more caution than the staff tend to.
What I mean by "not meant to be used in security contexts": It's not a replacement for `random_bytes()`. **Use `random_bytes()`**. (And `random_int()`!) It is, however, better than `srand()` + `rand()`, especially if the seed is a strong random value. So I try to be as secure as possible and prevent unnecessary leakage... but I make no security guarantees. If you need security, use something designed to be secure that can guarantee security. If your OS is secure, `random_bytes()` and `random_int()` are too.
Github made tagging so easy it hurts (even if you don't know how to properly do it via cmd line), there's no reason to not tag a release version.
We use PSR-7 and Diactoros for [spark](https://spark.readthedocs.org/en/latest/).
Thanks )
on the same note: does httpfoundation plan to upgrade to psr7 at all? or will it stay the same for the sake of compatibility and new projects will be recommended to use diactoros?
Blade is pure PHP, i imagine it will be catched by the op cache from php...
What?
Yes I know same process will be use for Yii2 too. If find any problem you can contact me.
Couldn't find it on packagist. Have you registered the package?
Currently building a project using Zend Expressive, using it because it's lightweight and mostly out of the way.
No, that's not what I mean by caching. Say my home page makes lots of different queries, some rather expensive. I want all of that computation and rendering to be cached say, every 5 minutes, except for the very top where the user has logged in (which is an inexpensive query that doesn't need to be cached). The only way to do that right now is to build a rather complex service that individually caches or retrieves the cached version of each of the queries on the page, then gives that data to blade. Blade meanwhile still has to loop through the data and construct the page, rather than returning pre-rendered HTML. With Smarty, I can just enable caching for that page, and in the template specify which parts should remain dynamic. It's like 3 lines of code, and I don't have to manually set up any caching logic for the queries and data I'm asking for, AND I get pre-rendered HTML for 99% of the page. Blade really very much needs render caching w/dynamic block support. It would save so much development time.
Really great analogy with the plane and walking. I'm going to use that.
I tend use HTTP Foundation &amp; Symfony's full stack framework for two reasons: 1. I'm productive with Symfony. 2. I (try to) write applications in such a way that the integration with whatever framework is super thin (service objects, command bus, very thin controllers) so there's nothing really tying me to the framework or HTTP Foundation itself. I don't really have strong feelings about PSR-7 either way, I just haven't found an occasion where PSR-7 made sense to use yet.
Why was this flagged NSFW?
why is this tagged nsfw?
So the new laravel release is NSFW? lmao
Some people get really insecure when Laravel has new releases.
Exactly! Moreover, their learning will be much harder as for a popular framework they can google *a lot* but for a local one they have but source code and incomplete docs. 
Something in between? http://inkwell.dotink.org/core
I have to disagree a bit here. There are a **lot** of really good, really well tested, really well documented 3rd party components out there. [The PHP League](http://thephpleague.com/) for example. There is a wide range of between "no framework, made it all myself" and "no framework, I use a lot of components". Building an airplane from a kit might actually be way more nimble and powerful than the one you were sold that looks shiny but you can't explain.
Confusing at first glance, but pretty damn useful.
Frameworks come and go. 5-6 years ago everyone was using and talking codeigniter.... how about now.... the project's owners just dumped it. laravel and any other framework is also the same. if it is an open source project, there is a chance that the group may screw things up or key people just have to move on due to various reasons. if its a privately owned framework, there is a chance that the company will dump it due to a million reasons - profitability, not having enough resources, changing focus, just selling the company and many more. PHP is here to stay. Frameworks live on top of PHP. You have to know and code php well. A custom framework or codebase is not bad. it gives some edge to a small company; because the codebase is designed to exactly meet the needs of the company, it saves the company time and resources in many things ranging from server performance to debugging. On the other hand, there is no need to constantly develop the custom codebase for things the company doesnt need or run. something new, a new product, service, can be prototyped and run faster with a framework. some even with wordpress, even if its too far from being a framework. If it takes off, you can move it to custom-developed code or a different framework to meet its particular expectations, if necessary. there is no reason for not doing both, one as the base one on the side. 
If you're lost at this point, I would suggest just using WordPress. You should be able to find a plugin which offers what you need. If you really want to start coding this application, Symfony and Laravel are a couple popular Frameworks. There are some compatible PayPal classes on GitHub. btw, use Stripe not PayPal. 
Will COBOL last another 20 years?
Symfony provides you generalized solutions for common problems. Not for all problems but for most of them. All this solutions is just an infrastructure of your application. And I don't think that it limits you in any way.
It depends on what you mean by 'ready for production'. You want to know when the community is going to consider it stable? Because its first stable release was deployed on December 3th, and its first minor patch was released on December 17th. Now, if you want to know when most packages will be compatible and when some extensions (like pdo_dblib) will be available... I'm afraid there is no answer. I'm already using PHP 7 on production with some minor personal non-important projects (built with Symfony 3), and it has been great so far. Most Symfony bundles have already been updated.
A release implies production readiness. Any future bugs and problems are bugs and problems as part of a programming language's typical lifecycle.
Use a framework, but use a flexible one. I think Zend Framework and Symfony are great choices. But the most important thing is: **Write your business logic independent of the framework.** A good way to do that is by having your business logic in a separate repository that has no dependencies on any framework. That way you can switch frameworks at basically any time with managable effort.
ok
Short answer: Now. Slightly longer answer: Now, if your dependencies support it. I'll have to wait a little since [doctrine/mongodb doesn't support it yet](https://github.com/doctrine/mongodb/issues/239).
Yes.
COBOL is deeply ingrained in the financial industry and being very difficult to replace.
http://sockpuppet.org/blog/2014/02/25/safely-generate-random-numbers/ &gt; [A kernel CSPRNG] can promise not to share the same state between applications. Since this is designed for state to be shared, this can never be a CSPRNG.
I'm still not exactly sure why but I named myself after the thing I hated most about PHP. Now it is gone... sniff... now I can actually get a proper stacktrace...
It'll be ready for production when the application you're building is ready for PHP 7. I have one server that was updated to PHP 7 a few days after release because the one app that is on that server was PHP 7 compatible and didn't need any type of special extensions to make it work. Another server sits on PHP 5 because it has several applications that require updates to run on PHP 7. I trust the RM's and version numbering. It wasn't released as a 0.y.z package nor with a alpha/beta/RC tag. Looks like it's stable and production ready to me.
Whoops, for instance. https://github.com/franzliedke/whoops-middleware
That's a pretty arbitrary line you're drawing, why build your own framework but not your own components?
Here is my two cents: I worked for a firm which had no framework and had a few coding principles and code styling. At some point, the senior devs decided to write their own framework, for whatever reason. I as a junior developer found many questionable standards and nuances used to the point where code was untestable. Now, we've looked at several frameworks and we've made our code a bit framework agnostic to the point that the framework in use should be easily swappable: it has proper dependency management, and importantly is written so that it is not entirely dependent on a framework. We're most likely going to go with symfony as the supporting framework as we believe a framework shouldn't entirely be the application but provide the supporting structure around it, more encapsulation of the code (something we deemed Lavarel was not able to provide (especially with facades and its ORM). Building our framework was a step in the direction to write newer styles code, but I am not convinced that it was the wisest choice at the time. 
I had to switch industries because PHP broke me. If there's any way to make PHP less painful, I haven't seen it, except to move on to greener pa$ture$.
Easily. Python's worked itself into a grave schism and we're only a couple of years away from people complaining about python programmers the way folks complain about ruby programmers today. Meanwhile, the real programmers, who actually get stuff done and finish projects, will continue to be plucking away while others who don't really like programming but kind of think the culture of programming is cool will continue to write navel-gazing polemics about how terrible a language they've never professionally used is.
Do you run only one server and can't roll your environment easy and have to hand-install the new version on your years old linux install? No. Do you run a number of instances, have a proper staging environment, can seamlessly roll out new installs, your code is highly decoupled from the physical machines and can tee your traffic for on production verification? Then yes, it's ready.
Okay, so this may sound like a silly question, but how do you even get started with Lumen? I am currently working on a project with Laravel, and everything is working fine, but upon working with Lumen I can't get even the files that are already there working. I can't get so much as the default welcome page to run, only a 404 message. Any ideas why that may be? I understand it was probably something I did wrong, but I am not sure.
Even then, I'd argue that using frameworks and components will help you advance because it exposes you to things you wouldn't necessarily find on your own. I started doing PHP without a framework in the late 90s, and worked in places where everything was homegrown. I never had a use for other people's frameworks because I wasn't going to get to use them in my daily job anyway. Later in my career, I got a job at a consulting company where we work on a variety of projects... Wordpress, Joomla, Drupal, Zend, Laravel, Symfony, other people's homegrown systems, etc. Learning and working with each one of those frameworks has strengthened my PHP skills (even if it's just what NOT to do). So even if your aspirations are to work in something beyond the frameworks, learning them and using them will help the majority of developers who aren't surrounded by world-class devs.
Doesn't that assume you're using a framework that can use middelware with that signature? That, for example, wouldn't work with Laravel, would it? https://laravel.com/docs/master/middleware
I've seen this question many times, and I pondered it myself before I started with a framework. What I've come to realise is that you can't afford not to use a framework. A framework will take care of the things that always need to be coded for every project, like your HTTP layer, routing, authentication, encryption, and even your database layer. There's absolutely no point trying to tackle these things yourself every time or maintaining your package. It wastes time, and means you are responsible for the ongoing maintenance and security of these parts of your applications. What a framework won't, or shouldn't, do is write your application for you. You still need to use your knowledge and experience as a developer to create well crafted applications, you just get to start that part of the process much faster. Laravel, for example, still gives you full freedom to write the domain layer of your application however you see fit. If you're concerned about magic happening under the hood that you don't understand, you can always look at the source code to understand it. Why not look at something built by some of the best PHP developers, or at least different developers, and learn from it rather than taking pride in understanding something that you built yourself (or with help from your team). If you're an experienced PHP dev you could pick up the basics of Laravel in afternoon. There's always new tricks to learn but I think you'll be amazed at how quick you can build your app prototype and how fun it is.
There's a huge difference between the homegrown framework the OP uses and your unnamed custom framework which glues together components. So i guess i could have said: &gt; That's the only benefit you get from not using components. You got to learn how to do things yourself. Which is awesome for you, if you are learning. But it is a bad idea for the employer and becomes unmaintainable
What do you think about having a PSR for an email sending interface. This way we could just plugin in an implementation to any library that sends emails. Libraries like ecommerce, debugging/error reporting, contact forms, etc. It should have standard methods like `setTo`, `setFrom`, etc but not care about how the emails actually get sent (SMTP, `mail`, etc). That way I could setup blackhole implementations for test, or whitelists, or add BCC's etc
then how you will define this please explain me
Like 1 index file that has a giant switch statement for each route. Use of `mysql` functions everywhere, and using arrays as results. And relying on magic quotes! 