The image is retrieved from a directory and served up by PHP. You can do this by rewriting the header. [Example on retrieving an image stored in a database as binary data](http://forum.codecall.net/php-tutorials/7663-tutorial-storing-images-mysql-php-part-ii-display-your-images.html) The important part is rewriting the header and outputting the image.... header('Content-type: image/jpg'); echo $content; To read it from a directory instead of a database you would use [fread](http://php.net/manual/en/function.fread.php). $filename = "c:\\files\\somepic.gif"; $handle = fopen($filename, "rb"); $content = fread($handle, filesize($filename)); fclose($handle); Ask if you need further clarification. How you want to store the images is up to you and there are pros and cons to each. **edit:** As 1137 pointed out in a reply don't use .htaccess but store them outside of the web root. 
Store them outside the webroot and don't use htaccess it's slow.
Ah, good point. I'll edit it out to avoid confusion.
Another thing point out: For example if the url is this: http://i.imgur.com/leKRh.jpg The image can internally be stored like this: /images/l/e/K/R/h.jpg That prevents having too many files/folders directly under a single folder. Otherwise it can slow down file access.
Wouldn't it make more sense to use a static class instead of assert_X functions, i.e. assert::is_true() assert::key_not_missing() I know it doesn't make that much difference because you're using namespaces, but it's tidier imo.
In that very simplistic example of course, but I was only using that to highlight what I meant. In real-life you are likely to do have to perform a lot more actions between conditionals. Something you would not be able to do _(easily, or at least not in a way that is readable)_ by placing it all on one line. Such as: if foo == True: bar = baz.objects.filter(baz=x)\ .filter(qux=y)\ .filter(corge=z)\ .order_by("?") if bar.exists(): o = MyObject() o.spam = 1 o.ham = 2 o.eggs = 3 if o.save(): str = bar[0].name[:5] if str == 'Monty': p = Parrot.objects.get(state='Dead') p.state = 'Stunned' return p.save() return False
Let's assume you've got 3 SANs and want to distribute the load evenly between them and that you're using a decimal number to identify the files. The SANs are mounted on your web servers on /img/0, /img/1 and /img/2. Then the code can look like this: $san_id = $img_id % 3; $path = "/img/{$san_id}/{$img_id}.{$img_ext}"; The same method can be used to balance the front web servers.
Thanks. I just pushed new commits to the repo which add a bunch of new features and also implement your suggestion. Feel kind of bad for mixing casings in class names `class Group` and `class assert`, but I'll survive. 
Why not just use _Assert_? The class naming convention wasn't the point of pies' suggestion... so if you already have one, you might as well stick to it.
Her major complaint about Kohana seems to be its lack of backwards-compatibility between major versions (1.x to 2.x). Personally, I see this is a positive thing. If you're going to be dropping deprecated code, refactoring, and changing interfaces, major versions are the time to do this. This is one of the main problems plaguing PHP in general-- they developed 5.x to be (almost) completely backwards-compatible with 4.x, making adoption of new versions slow and tedious, because it tells developers they don't need to learn anything about PHP5 in order to develop applications for it. Then of course, when it comes time to upgrade to PHP6, they'll wonder why their PHP5 code (which is actually PHP 4 code) is suddenly breaking. If you develop an application with Kohana 1.x, you shouldn't expect to be able to upgrade in 30 seconds to 2.x. Just keep using 1.x; if it ain't broke, don't fix it. Write new applications with the latest language/framework, and leave old applications on the platform they written for. _Disclaimer: This is assuming the developers continue to support and fix bugs in previous versions of the software, until a good amount of time has passed (Kohana claims they will support old versions for 3 years) or until 2+ newer major releases are available._
I would rather keep the public API consistent. So you don't have to mix `\Spec\describe` or worse `\Spec\Assert::is_true`. I reckon things look much more consistent if everything is lowercase after the `\`. It's a small price to pay and conventions don't always have to rule your code.
&gt; conventions don't always have to rule your code But they should ;) In fact, I hereby declare a convention in which your code must always follow conventions.
Pop in #tinyspec on FreeNode if you feel too strongly about this. Conventions are cool and I try my best to make sure my code follows them. Every now and then you have to make a decision to stray away from 'em, though. I am an outlaw !
I guess this is where I am confused and will have to do more reading on what some of you guys suggest. Right now when I play with scripts in php the url typically follows the directory structure of where those files live. [domain]/[directory]/[script.php]. So my followup is how does the web application intercept urls that are typed directly into the address bar if the are rendered in the way you describe? I can see how it could render such a script itself but once that session is over how does it know to interpret requests in the same way as it creates it? Is this the work of your web server in this case the mod_rewrite or php code somewhere else?
I've used both as well, and I must say that CI IMO is more intuitive and stable in my experience. The documentation is also fantastic, which makes it a lot easier when a new guy walks in and needs to know what's up. Kohana is good, and i know this subreddit has a lovefest over it, but in my experience Code Igniter just works better.
Typically, this would be a couple step process. You would use .htaccess to send the requests to a routing script. Then you would use that script to parse the url and serve the file. That script would: 1. Break down the url - so you are left with lekRh.jpg 2. Put the extension in a variable, so you can use it to verify against request. 3. Now you are left with lekRh, just do your file request and insert the file separator '/' between each letter. Using a router makes it easy to create friendly urls. You simply create your own system to handle the requests instead of using $_GET.
Good stuff! Biggest props for choosing MIT Licence! 
Is StackOverflow becoming more of a discussion forum, a reddit-type site? Edit: N/m, I see that others there voiced concerns along those lines.
&gt; I guess I'll just post to reddit. Should have done that in the first place.
Okay that makes more sense to me. I haven't played with .htaccess before so that is something I will want to read more about. To be sure I understand.. If a site were setup that way any url that would be clicked or linked to would be routed to the site. .htaccess would pick up the request and instead of getting a 404 or some similar message the request is routed to a script that parses the trailing url string. If it's valid it's sent to the server to retrieve the file and if it's not then it's processed out as some kind of error. Is that about right? If I googled around for routing script and php would I be able to find similar material or would I be plagued with cisco router forums instead? Are there any other keywords that are specific to php on this one that I could use to read more? Thanks again.
Just hang around /r/programming or elsewhere on Reddit and wait for the anti-PHP comments.
Yeha, I want a consolidated up-to-date list so I can just point to it.
 RewriteEngine on RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule !\.(js|ico|gif|jpg|png|css)$ /index.php This is sample code for htaccess, though realize you must have mod_rewrite enabled with apache for it to work. Note this snippet is sending anything not specified as .js, .ico, .gif etc. to index.php. So if you were doing this with image files, you would have to create another rule for those. Just as an example, in my framework it goes like this. 1. Someone visits mysite.com/message/read/152/ 2. htaccess sends them to index.php, which opens routing class. 3. first argument (message) is a module. 4. router opens message_module class. 5. 2nd argument (read) is my action. 6. message_module class calls function called read_action. 7. if the correct module or action are not found, then we send them to 404.php 8. read_action function takes the remaining argument (152), and opens that message id (assuming the right user is trying to access) Of course in production, it can get a little more complicated with a lot of arguments. EDIT: #6 should have underscores for class and function name, but they aren't showing up.
I see what you mean I believe. Is this best worked out in what I've seen people referring to as an MVC framework? One last thing I was wondering about is how this works for other servers besides apache. Is there an equivalent for nginx, cherokee, etc? I can probably Google the last bit but just wondered if you knew off the top what it might be. Thanks for all of the help.
I'm working on a kohana app right now (not by choice). I can't stand it. Don't like it at all. Why? I can't really tell you, I just don't like it, and the docs really suck. I haven't used CodeIgniter at all so whatever. I do like Zend Framework so extrapolate whatever you will from that.
Every popular PHP myth is true, at least to a point. It's easier to explain why they exist than to battle against them. [This is the acceptance phase](http://en.wikipedia.org/wiki/K%C3%BCbler-Ross_model), by the way. Once you reach it, you will feel much better about how much PHP sucks even though you still use it every single day. - register_globals. Removed from PHP trunk ([5.4](http://marc.info/?l=php-internals&amp;m=128152220805887&amp;w=2), probably minus the bizarre type hint implementation), dead, gone. Unfortunately we still have [extract](http://php.net/extract), but at least extract has a use case. - The PHP internals team intentionally rejects language features that "could confuse new users" or, hilariously, create inconsistent behavior, even when the new behavior is an improvement or [simple syntax changes](http://wiki.php.net/rfc/shortsyntaxforarrays). Their justification is that it should be "easy" for new users to learn PHP. It takes kicking and screaming to get new language features put in. We just got closures/anonymous functions last year, and it looks like we'll be getting traits/grafts in 5.4. - The needle/haystack problem. There are actually only a few examples of this, but let's pick on [strpos](http://us.php.net/manual/en/function.strpos.php)(haystack, needle) and [in_array](http://us.php.net/manual/en/function.in-array.php)(needle, haystack). Another thing the PHP internals team is terrified of is breaking backwards comparability. Honestly, I'll take that any day over the horror stories of back-compat breaking 4.x releases. - Schizophrenic function naming patterns and delightful function names like mysql\_**real**\_escape\_string. What's the excuse? Most PHP extensions started out as (and still are) thin wrappers over an underlying library. The C MySQL library's escape function itself is actually called mysql\_real\_escape\_string. This is also a major contributing factor to the needle/haystack problem. - It's easy to write insecure code. Let's pick on SQL injection. There are three main problems here: - Every single database extension does it differently, and some do it worse than others. Has anyone here ever worked with MySQLi's placeholder binding after working with, say, PDO? They're radically different and MySQLi is many times more complex by default. Further, some databases have different placeholder rules. PostgreSQL wants $1, $2, $3, MySQLi wants question marks, PDO can take question marks or named params, etc. - There are thousands of PHP "tutorials" from the early 2000s that were built on top of the old mysql extension which does not have support for placeholders. These tutorials always follow the same pattern and teach new coders the wrong way to do things. Only coders with experience in another language will know that they'll want placeholders and eventually get pointed towards better things like PDO. - Everyone is terrified of PDO for some reason. Yeah, it's no Perl DBI, but it gets the job done very well. - It's easy to write insecure code. Let's pick on XSS. Actually, let's not: it's easy to write code vulnerable to XSS in any language. - PHP doesn't "scale." Facebook? Digg? Wikipedia? Okay, that one's worth debunking. The real problem is that most common PHP applications aren't designed to scale to high amounts of traffic. The bottleneck is usually the database, not the PHP code. There are dozens of solutions to this problem, and with the exception of HiPHoP or whatever the proper capitalization is, they don't involve changing PHP itself. - Nothing enterprisy is written in PHP. This is true to a point, but that's mostly because most enterprisy things tend to be over-architected N-tier TLA-driven clusterfucks that are better off in Java to begin with. - PHP is inherently inferior to language X / platform Y on language X. Unless we're talking about INTERCAL or Mumps here, they're probably right in at least a few ways. PHP sucks, but language X and platform Y also suck. They just suck in totally different ways. PHP grew *organically* and the design was driven by amateurs, not language designers. The installed base is now so large that they can't break backwards compat, therefore PHP will almost certainly always suck. - PHP careers are dead ends. There is some truth to this, but it's complicated: - Because PHP is "easy", it's often the first solution for "easy" low-end work. - Because PHP sucks, when a project gets complicated it's easy to say "oh, we'll just do it in language X instead," without realizing that language X sucks as well, just in totally different ways. Thus, high-end PHP jobs are rare. - PHP OO sucks in comparison to language X. Yes, yes it does. This is complicated by a complete lack of metaprogramming options. - You need to pass arrays and objects by reference... in PHP 4. As of PHP 5, arrays and objects are always passed by reference. Arrays are copy-on-write. - Single quoted strings are *not* faster than double quoted in modern PHP versions.
I haven't really confronted many myths. Most of the criticisms I hear are unfortunately true. But all languages have their shortcomings and I don't fault PHP's too harshly. And the good thing is, the language is evolving constantly. Perhaps faster than any other.
I think the main problem with programmer social isolation is not how you write your code but how you may not get any exposure to various tools. For example, the solitary programmer may not use a version control system. You may be unfamiliar with unit testing. Your documentation may be poor. There are a number of collaboration tools that you'll never use until you get a new job; error reporting systems, project management systems, timesheet and billing systems, etc. It may hurt you on the job market if you are completely clueless about unit testing or version control.
&gt; PHP doesn't "scale." Facebook? Digg? Wikipedia? Okay, that one's worth debunking. The real problem is that most common PHP applications aren't designed to scale to high amounts of traffic. The bottleneck is usually the database, not the PHP code. There are dozens of solutions to this problem, and with the exception of HiPHoP or whatever the proper capitalization is, they don't involve changing PHP itself. This one, to some degree, is true. In facebook's case they now use HipHop. In all other cases (and facebook as well) PHP has been delegated to being nothing much more than a frontend templating language. This is fine and ultimately it doesn't matter, but all the heavy lifting at everywhere you mentioned and most other large PHP driven sites is done outside of PHP - usually in Java. Just look at Hadoop's presence in the PHP world for evidence of this or how prevalent that Lucene has become (All three of your examples extensively use both).
Re: Learning PHP bad for your career. In my personal experience of one, that has been very far from the truth. I got saddled on this horrid, stinking donkey of a language when I took a contract and they mandated PHP, I said ok, it would be my 8th language no biggie. I hate that I cannot use '.' dot to access member variables and methods, and that it's used to concat strings. I hate the dollar sign with great depth of.... feeling. That said PHP5 is OK, it has all the constructs that I feel like I need, with some crappy omissions, closures, acting on returned types and such. I also really miss pythons rich basic data types, ''.split() list.pop, and so on. 
I like PHP's OO. It's simple and does the job just fine. Interfaces work well and I like how I can call the parents constructor wherever I want in __construct. The only issue I have ever had to work around was late static binding, but that was added in 5.3.
PHP has a fair amount of shortcomings and McGlockenshire covers a good amount of them, but the vast majority of them are easy to code around once you know they exist and end up causing little to no problems in the end.
Yeah, it's one way to do an MVC - like setup. It does help with good separation of code and maintainability. As far as the server question, I'm pretty sure you could do the same stuff, but not really sure how. I really haven't wandered outside of Apache, except to serve video or flash.
My company's web apps run in nearly every school in the country, all written in PHP and scales beautifully.
Lucene is so prevalent because it's *awesome* and every PHP port I've seen ([like Zend\_Search\_Lucene](http://framework.zend.com/manual/en/zend.search.lucene.overview.html)) has severe performance issues.
What heavy lifting does your webapp do?
PHP OO lacks [multiple dispatch](http://en.wikipedia.org/wiki/Multiple_dispatch). The Internals folks say adding it would create a major performance issue on any method call. A fair enough and certainly true argument, but it hurts class design. PHP OO lacks multiple inheritance. Most people consider this a good thing, but there's very little else to make up for the problem. Interfaces help, but when two interfaces want you to implement the same method with a different signature, that's when the lack of multiple dispatch becomes painful. PHP OO lacks modern (Ruby/Perl-like) OO features. There are highly experimental extensions like [runkit](http://us.php.net/manual/en/book.runkit.php), but it can only go so far. [Reflection](http://us.php.net/manual/en/book.reflection.php) is present, but is pretty much read-only information, not actual manipulation of classes or instances. There's also traits/grafts, but there [a few different RFCs for them](http://wiki.php.net/rfc) and I don't know which one is the one that ended up being accepted into 5.4. The current way PHP does getters and setters is a horrible mess. There's a [proposal to add C#-like getters and setters](http://wiki.php.net/rfc/propertygetsetsyntax), but it doesn't appear to be going anywhere. Closures/anonymous functions in PHP 5.3 can't work in the context of an object. This is being [fixed in 5.4](http://wiki.php.net/rfc/closures/object-extension#status_as_of_august_10_2010). Really, the problem isn't that PHP OO doesn't do the job, or that it's broken, it's merely that it isn't featureful enough to make PHP interesting or useful *looking* in comparison with other languages. Therefore, it sucks.
Yes, this is true and having spent a lot of time poking at and patching Lucene, I don't know that it would be possible to port without incurring these performance problems, because so much of it is written to take advantage of the things the JVM does well. As far as its awesomeness, it's relatively unparalleled in FOSS and I'm known to tell people that, if they want a project that does *everything* right, go to Lucene.
Saving student notes, encyclopedia articles/citations they've saved. Customized content based on their interests, and different user types, customized content for students/teachers.. I can PM you a product link if you'd like, but it's an entire suite of products which all run on PHP/MySQL. Another product tracks students scores/goals/evaluations, assessments, etc, by the class, and parents can also view that data, so profile-data and custom content galore. Definitely alot more than the standard web app. Just goes to show if it's engineered properly, then PHP does an awesome job. We usually have two application servers (west and east coast), and then two DB shards which have master/slave each. The apps themselves are a mix of MVC, but very in the use of objects/reusable components. Memcache is used as well The only thing that runs on Java is search, which is moving to Solr.
The myth that it's easy. I've been using it for close to 8 years, and every time I try to do anything significant I'm constantly, painfully reminded that this language is built from layers of ad-hoc features piled on top of PHP3. This whole language is rotten to the core.
Funny how one man's dream is another man curse ;)
That's the beauty of having oceans of choice.
There is a balance though, throwing in every conceivable programming paradigm doesn't make a language better. I think the way C# handles interfaces is the better solution as what happens if two interfaces have the same function name and parameter types but perform different actions. Multiple dispatch wouldn't solve that. I wouldn't say it hurts class design all that much, there is no reason you couldn't just have a if (a instanceof y &amp;&amp; b instanceof x) { do this instead; } within the one function, sure it's not as pretty, but it performs the same function. While I have used reflection plenty of times in C#, when it comes to making web apps, I really see no need for it at all. I suppose PHP is not just for web apps, but that is what it's best at. In a run once to end situation, modifying classes is pretty useless. You could come up with some elaborate use for them, but then most likely your app is needlessly complex. C# style getters and setters would be a nice addition as using \_\_get and \_\_set to simulate them is quite awful. Closures are certainly useful in PHP because of its many function that take callbacks and I am happy to see them added.
OP asked for _myths_.
Man, I'm pulling in a solid six figures and I'm not even a lead role doing nothing but PHP here in Dallas, TX, where there is no state income tax. PHP is NOT a career deadend and yoru comment is heavily irrationally based against it.
I wrote a Concert/Event ticket PHP application that successfully scaled for flash traffic in excess of 500,000 unique visitors/hour and over 20,000 unique orders an hour, and that was all in PHP5 with APC and Memcache and 4 MySQL servers. Don't tell me PHP 5 when done right can't scale, damnit.
Lucky bastard... most jobs around me for it offer about 50-60k. 
&gt; Just hang around anywhere there are programmers who have used something other than PHP and wait for the anti-PHP comments. FTFY
I've done a dozen or so small web-sites in CI and I really like how intuitive it is but hate how slowly they repair bugs--if at all--and how slow they are to release new versions. I tried a 2.x of Kohana it was too poorly documented and unstable for me. I went back to CI and got so tired of slow or no bug fixes and the need to write my own user and roles and responsibilities modules--my time is too valuable to waste time on all that. So although it went against my grain, I tried Zend and found it clunky and ended up with Symfony. Never thought I'd choose French engineering over German, but I found the learning curve on Symfony much shorter than the cost to debug CI or write modules that should come with any real-world framework.
PHP is hackable/insecure It turns out if you hire crappy programmers they'll write crappy code no matter what the language is!
&gt; yoru comment is heavily irrationally based against it. Is it? I said there's *some* truth to it, not that it was actually a legitimate problem. 
My mistake, it only applies to pre-compiled Windows binaries.
Just to give a perspective from an somebody on the periphery of the "Internals folks" (put it this way: if you've filed a bug this year, I've at least looked at it): &gt;PHP OO lacks multiple dispatch. The Internals folks say adding it would create a major performance issue on any method call. A fair enough and certainly true argument, but it hurts class design. I'm not going to lie. I don't think that one's a huge problem in a dynamically typed language. If strict scalar type hints make it in down the track, it might be worth revisiting. (Extra thought in a quick ninja edit: named parameters would probably help here. Again: patches welcome.) &gt;PHP OO lacks multiple inheritance. Most people consider this a good thing, but there's very little else to make up for the problem. Interfaces help, but when two interfaces want you to implement the same method with a different signature, that's when the lack of multiple dispatch becomes painful. Traits are going to deal with most of the use cases there in 5.4 -- it's not real multiple inheritance, but for the sorts of things people seem to want it for, multiple interfaces and traits should be good enough. (My day job is mostly writing Python, and the cases where I use mixins there would certainly be covered by traits.) &gt;There's also traits/grafts, but there a few different RFCs for them and I don't know which one is the one that ended up being accepted into 5.4. Without double checking the actual implementation that got committed, I believe it was solely the traits section of [this RFC](http://wiki.php.net/rfc/horizontalreuse). Grafts are out at present. &gt;There's a proposal to add C#-like getters and setters, but it doesn't appear to be going anywhere. I believe that's firmly in the "patches welcome" category. :) It's probably getting a bit late for 5.4, but I think we'd welcome a patch to spark some discussion on the Internals list there. &gt;Closures/anonymous functions in PHP 5.3 can't work in the context of an object. This is being fixed in 5.4. I know you're probably aware of this already, but the background there was that there were multiple options without much consensus when 5.3 was being developed -- rather than taking the usual PHP option and ripping the whole feature out, it was simply decided that closures were too useful even without object-specific functionality not to go in.
And if you go a few layers down, you'll see that what's really rotten is the medium... PHP is designed to work with 40+ year old protocols, and many of its shortcomings derive from stuff like HTTP.
A basic categorization of arguments against PHP I've heard over the years is: 1) Arguments that originate from poor understanding of the language. These come mostly from (other) language developers that have spent less than 6 months working with PHP. 2) Arguments that are against the environment. Scalability has more to do with the web server and the database than with the language itself. These come mostly from developers that are accustomed to work with development frameworks (J2EE, .net). 3) Arguments from academics. Not worth anyone's time. 4) Arguments from junior PHP developers. These are mostly noob frustration. 5) Arguments from seasoned PHP developers. And these are the only ones I've considered valid enough to discuss. To answer the op's question, the most type 5 arguments I've had were about the object model. Seasoned (10+) PHP developers had their "golden years" in the late PHP4 / very early PHP5 period and they just don't get it. 
Messy. Best wait till 5.4 methinks.
That's my conclusion exactly!
what website would you recommend?
You picked one bullet point out of all of those? That was just one single point. Are you honestly disagreeing with the rest of his points?
die works really well when you're writing a cron job and need it to output if something goes wrong. That is really the only time I justify using die. If you're making an app the error should always be handled.
So you remove the ability to instantiate: private function __construct() {} Turns that trick.
You should be using: $c = count($people); for ($i = 0; $i &lt; $c; ++$i) { // blah } To avoid calling the count() function count() number of times.
I've been working with Kohana3 on a recent project, and I like it a lot more. The one this this article, or any of the comments below have failed to mention is the much larger amount of features that are included in KI3. So far, templating, being able to call controllers in controllers, and the ORM module have all been huge time savers for me.
If thou wisheth to know when thou might sacrifice thyself thusly, look no further than [w3schools.com](http://www.w3schools.com/php/default.asp)! mysql_connect() or die(); ftp_connect() or die(); fopen() or die(); Damn, it's a pretty ruthless philosophy to live by. Exceptions would at least give thee a second chance!
Exactly. I usually prefer the singleton pattern to that though. (e.g. using a single public static getInstance() method, a private contructor, and normal public instance methods to satisfy whatever interface you are implementing.
look at my code again, count() will only be called once :)
Isn't storing images in a database a bad thing? Esp. in regards to MySQL?
&gt;But that thunder is going to get crushed in the coming years by better alternatives written in other languages. I sincerely doubt that.
In the case of simply reading the entire contents of a file, [file\_get\_contents](http://www.php.net/manual/en/function.file-get-contents.php) is much cleaner than a fopen/fread/fclose trio. You can even eliminate the echo if you use [readfile](http://www.php.net/manual/en/function.readfile.php).
Of course. Many, many times. But who cares? You're being contracted to do what the client wants. They are paying you. If you hired someone to cut and style your hair and they thought you'd look better with a mohawk, you'd be wildly pissed, right? You want you hair the way YOU want you hair. Same with clients. As long as the end result works, even if it's kludgy, you've done your job.
You've made me feel better about my current project. I'm taking bits and pieces from other projects and just lumping them all together because I know it'll save me a few weeks of further development. I spent a day or two getting all the pieces to work together. It's just that I'm just not proud of the code, that's all. It's for a small business though, so I should wing it. 
Brew a pot of coffee and order a faster server...
There is a certain type of project where you stop trying to do the best job possible and just start to do whatever the client asks, simply because doing the best job will result in an unhappy client, and doing whatever crap the client asks will result in a pile of crap but a happy client.
Absolutely. The client doesn't generally give a shit what the code looks like, as long as it works. Not that I approve of this attitude towards projects in general, but if you do wind up with an unmaintainable mess, don't worry about it as long as it meets the specs.
I *loathe* this pattern and cringe every time I see it in real code. I wish they'd deprecate the 'or' construct.
Learn Django.
Oh, I see what you're saying. I thought you meant that the client wanted to do some stupid, fucked up thing and you went along with it. Ah. Ok, with that in mind, the ONLY thing that matters is that the customer is happy. If you can do that by duct tape and baling wire, you still win. Just make sure you don't screw yourself later when they want changes and you forgot to document.
Yeah, I disagree with virtually every one. The reason I say "virtually" is that, while I can't think of one I don't, it's been 20 hours since I read them and don't want to sort through them all just to be able to honestly "every".
&gt;The client doesn't generally give a shit what the code looks like, as long as it works this is ALWAYS the case, period. unless your clients happen to be software engineers themselves. this is why developers are always viewed as the mechanics at the bottom of the barrel in most agencies. typical client/designer/principle stance: "i dont give a shit how it works, as long as it works."
I kind of have a "system". I won't call it a framework because it doesn't deserve the title. But I write everything with a style that I stick to, so it's usually pretty easy for me to make changes later on. It's organized... but disorganized, if you know what I mean.
Yea. They want the project I'm doing done asap, so I'm basically lumping in pieces of code from other projects and then gluing them together.
This is every project that is not your own.
Haha. Nice. GL.
Sometimes, when a client changes their mind daily/weekly, and feature creep sets in.
I don't see how you can disagree with facts. Yes, there are some opinions in his post, but the majority of them are facts about the language itself. Mixing up needle and haystack, having 3000 global functions, etc are not opinions. Just out of curiosity, what other languages do you know (more than one year exp with it)?
Sounds like a Joomla project.
And we wonder why PHP programmers get such a bad rap.
I don't think this is PHP-specific.
Ya. Most of the time it's the client's fault it's fugly on the backend anyway assuming you're a competent developer (which I do because if you were a moron you wouldn't feel bad about committing ugly code). I inherited a fairly big code base at my current job and part of it is an invoice generator that I can just see how the client modified the rules as the project evolved to create this unbelievable monster of an if statement. I avoid touching it because it burns the eyes to look at, but if I do have to modify it I do it totally outside of that logic for fear of disturbing the sleeping giant. You might call that ugly, but I call it a sanity saver.
And then there are those of us doing in-house development, who inherit an unmaintainable mess due to a poor executive decision, and trying to fix it. Yet the execs still want everything done yesterday leading to an even less maintainable mess that becomes our own to maintain. I'm going to go cry myself to sleep now.
I think I inherited one of these projects at my new job.
I see it more with PHP than python.
For those of us on shitty web hosts some of them give unlimited size to the DB but limit you to very little disk space. It's good to know in order to get around constraints :) It's bad performance wise though.
Probably the same reason there's more malware and virii for windows than OSX/Linux/whatever. The install base is larger and easier to exploit(code).
Good point. PHP was designed to be easy to take up, as was python. Although their were stricter styles enforced on python code making it less likely really horrible code is produced, but not impossible. It's good to think outside of the box, but sometimes a general direction on things such as flow control, OOP, good design, etc is necessary. This had a point when I started, but there are so many things I want to say. Perhaps someone can elaborate on my point a bit more.
The problem with this is when someone like me is contracted to work on your project. Because you decided to jam everything together I am stuck wasting my time doing it the right way. If you have the power to control the code base please make it maintainable for the next developer hired by them to make changes.
Sounds like a PHP project.
I'd like to clarify that I'm not saying PHP is easier to learn and maintain than Python, just that it's easier to get ahold of for the non-technical user. It's not easy to find a host that doesn't support PHP by default. That said it's not so much the language but what you code with it. I make this challenge, anything you can code in Python/PHP I can code worse in PHP/Python.
My mind is a bit jumbled atm and full of miscellaneous distractions, so thanks for the clarification.
Sounds like a web site.
Oh yes, I've had that type of client. They do in the end go to someone else who apparently makes their lives easier by just agreeing to everything they request, and then delivering a pile of shit that *just* meets some part of their needs.
Think about it: *please spend extra time making it easier for someone else to make money off my work*. I try to do things properly because my aim is that *I* will be the next person to work on it. Doesn't always work, but that's how it goes. It is different in a larger organisation where you get paid more for longer hours to follow the conventions and in-house styles.
Fuck that. I've received messy piles of shit code that needed a feature added and it drove me up the fucking wall having to work with that steaming pile of shit. I want to shave the creator's face off with a cheese-grater because he thought it was fine to make a shiny turd and pass it off as something of high quality.
Code like the next person to maintain your project is a psychotic killer that knows where you and your family live.
I've recently had a project scoped for 2 days but now going 2+ weeks and it's getting uglier by the day. Why? because the client is a fucking moron. "I didn't mean this,can you make it think, also I MUST have this". And the PM just can't say no.
In order of acquisition: 1. BASIC - 1 year (when I was 9) 1. Visual Basic 3-6 - 6 years (10-15) 3. Perl - 5 years (13-18) 2. Pascal - 2 years (14-15) 3. C++ - 12 years (15-26) 4. PHP - 13 years (16-29) 4. Java - 4 years (18-21 (college)) 5. Python - 1 year (27) Yeah... My oldest app is [eWordSearch](http://web.archive.org/web/20030413174146/http://www.wakeup-people.com/eWordSearch.php3), which I've ported to * Visual Basic 4, 5, 6 * Visual C++ MFC * Delphi * C++ w/ Qt * C++ w/ wxWidgets * Perl/Tk * PHP-GTK * Java My first really popular open source project was [PHP-Egg](http://sourceforge.net/projects/phpegg/), an irc bot w/ eggdrop-compatible commands. This was quite hard to do in PHP 3!! My most popular app was the cross-arch/platform C++ port of eMule: xMule. My oldest still-existing commercial website was the my first commercial one: http://flyfood.arl.arizona.edu/, mind the copyright date ;-) OK, what's your resumé like?
Most around here, too. I'm in the top 0.5 percentile of paygrades. the point is, get great and you can get paid well.
Holy shit, settle down buddy. Put your epeen away. I was basically asking if you have used any modern langauges aside from PHP. The only people I've met who think PHP, on the language level, is a good language are people who have only used other sloppy languages. You've at least used python, but I still don't get how you can't see the faults in PHP. Ignorance is bliss, I suppose.
Almost every damn time... Clients always think they know better and are never shy on "suggestions", the kind they absolutely want to see. Unless the client actually knows what they are talking about. But that does not happen often...
Which is ironic because it's by not giving a shit about how it works that most software is buggy as hell and degrades over time. Is there a word for short-sightedness as applied not to vision itself but rather to planning, managing or ideas?
I'd love to hear more about Doxygen versus PHPdoc or whatever other documentation systems people use with PHP. 
I agree that two "or" operators is confusing (especially when their precedence is different), but I like that pattern because it's cleaner. For instance, this: if(!defined('BLAH')) { define('BLAH', 'yadda'); } Becomes: defined('BLAH') or define('BLAH', 'yadda'); And you could just as well use || instead of or anyway. 
That is one of the weirdest and best explanations of the process I have ever seen.
I understand where you're coming from, and I've been there, too. In general I don't gel with the idea of "whatever works, works" .. but after months of feature-creep, specs that change on a whim, etc. there are occasionally times when I feel it's okay to dump a fucking load of spaghetti on a client as long as it does what they wanted it to do. That said, I hope you've not had to clean up after any of my spaghetti dumps. I do my best to create robust, documented code as often as possible.
&lt;nelson&gt;HA HA&lt;/nelson&gt; Y'all n*gs replyin' to a troll post.
&gt; I hope you've not had to clean up after any of my spaghetti dumps I doubt I've worked on your code. The project(s) I'm referring to is cluster-fucks from the days of PHP4, global variables and (now) unnecessary reference-assignment all over the place. My apologies if my message seemed to indicate I've worked on your code.
Yes, it's [shortsightedness](http://www.merriam-webster.com/dictionary/shortsightedness).
But the term is too applied to vision. Plus more often than not it's not really about not being about to see far ahead but rather insisting that what we think we see is what we see. There has to be a better word as applied to cognitive prediction. Oh well...
APC supports this built-in, no need for an additional extension.
... hires former British empire slaves to do the work! ;)
Or just use PHP-FPM, a modern FastCGI process manager.
They previously built everything in Perl, and made some pretty [nifty contributions to CPAN](http://search.cpan.org/~bbc/). It will be interesting if they continue releasing their framework code after the PHP switch. It is somewhat irksome to me personally that they've chosen to build on Zend's commercial product line. Maybe they've made some improvements since I last used it, but it ended up depositing parts of itself all over the test system in a very rude manner.
Interesting, the new iPlayer site style is horrible though. :(
Agreed, you can't do this simple thing: show me all the programs on a particular channel that are available to watch online. This basic functionality from the original iPlayer is still missing. 
You're ridiculous. Instead of addressing my point you're attempting to attack my credibility. I try to avoid making turd sandwiches. Sometimes it might seem like the code you've inherited with was created exactly with being shitty in mind, and that's when you're working with a turd sandwich. In all likelihood, it was probably created in a rush, or it was previously created in a rush and made into a pile of shit because features needed to be added *in a rush*.
Zend's commercial stuff has improved, but that's more akin to being excited that the people who are taking shits on your porch have started eating more fiber.
When it comes to class name capitalization it's more important to make sure the casing matches the file name casing. When using autoloading functions on case-sensitive filesystems this quickly bites you in the ass. Beyond that as long as one is consisten I've seen both Class_Db as well as Class_DB. I know systems that do class name normalization for autoloading prefer Db because it's easier to ucfirst than mix and match. Personally I prefer Class_DB.
I dont see where they mentioned they are using Zend's commercial product line! They are using Zend Framework.. Which is free, open source and pretty stable in my opinion..
Awesome seeing large corporations (or whatever the BBC is considered) switch to PHP. So much for it being a language that's going nowhere.
Well, to start with, it's not made in PHP, so wrong subreddit. The number of requests would increase, as you would now have one request for the page and a separate Ajax request for the content. You might be able to save some bandwidth by reducing duplication in the HTML or whatever, but this would be insignificant in relation to the overheard associated with a new HTTP request. The server-side load would most likely increase due to the multiple requests requiring the framework, etc., to be loaded twice (once for each page, then again for the content).
Server processing: not much. You're still doing the same work as before, collecting relevant data and outputting it. The only difference is that now you're outputting as JSON and not HTML. Bandwidth: depends on the page. Say if you're loading the next page of /r/php, you'll not have to send the header, sidebar or footer again - just the articles. A different subreddit and you'd need to load a different sidebar. I believe this is similar to what facebook does.
Yes you most probably would, but how much exactly, would be depending on your case, a page with a header and footer which counted cart-items, rendered many templates and so on would be heavy on server load. Also if you cached and minified your libraries. Included your initial page content in your first page (meaning no additional Ajax request) and made sure you used GET instead of POST whenever possible, you'd go a way towards saving.
Perhaps that is true, but their "Zend" link goes to zend.com, not framework.zend.com
Writing PHP and shoveling shit are sometimes (mentally) one and the same.
Coffee. The list is missing Coffee.
Unless you consider companies like Facebook or Yahoo as tiny and cute, PHP already has a footing in large corporations. 
Servers and bandwidth are in most cases much cheaper than developers.
Of course, but I've heard frequently PHP is dead and no one would consider it for new development, Facebook and Yahoo included.
Nice to see the old [BBC Micro](http://beebwiki.jonripley.com/BBC_Micro) owl logo on their internet blog.
Depends on th equery really. You can have 81 queries doing simple stuff or out can have 5 doing some heavy duty computation. Usually I also try to keep the query count under 10. But try not to overoptimize - optimizing things that arn't broken will only result in more trouble. If the site is runing slow and you're sure it's the DB fault check if you're using proper indexes and stuff (EXPLAIN a query). Remember that if every subpage of your site uses similiar queries most of them will end up in cache so that's not the problem.
I don't think the count is all that relevant, although you should try and limit it to as few as possible. I find that what type of query and the number of records are the most important factors. That and having the right keys. I think many sites these days will produce many more than 10 queries per page view. But many will probably be cached in MySQL's query cache.
I would worry less about arbitrary limits and worry more about page load times. If you can run 20 queries and still keep the page load time around 1 second or under, you're good. If 5 queries is skyrocketing your page load time then it's time to start trimming the fat. **edit** Because I thought it went without saying, load test and benchmark. A single execution of under 1 second is nice. Hundreds to Thousands of simultaneous requests with average load times under a second is nicer. My point still remains, the number of queries run is an arbitrary number that is meaningless without benchmarks.
I've had complex pages doing 200 queries, but still ran quickly. Once I had a slow query that I split into two queries that each ran quickly, but found out that while that improved load speed for a few users it didn't scale as well with hundreds of users on the page. The answer is there is no answer. What is far more interesting is methods that people use to improve database performance. MySQL tuning can really help. Proper database design is very important. Having one or more auxiliary data storage layers is usually necessary for a large and complex site. At minimum you should setup Memcached so you have a place to cache data. I have a database object that takes params for automatically handling cache, including simultaneous updates of database and memcached so I have data that updates a lot, but I rarely need to access from the database (also, memcachedb would be good for that). I also use Redis for data that doesn't fit well into memcached (like lists that need to be sorted dynamically). What I'm getting at is that MySQL should probably not be your only place to store data and that a large part of performance optimization is getting data out of a database.
1 second?! That's an eternity. Shoot for page-render times in the microsecond range, and then you're talking. Ideally, you'll have zero queries - if you've anything you can cache, cache it. Memcached is trivially easy to set up, and, so long as your code isn't a procedural, knotted mess, easy to implement.
I webshop I once built used anything between 100 queries for a page with acontact form to 400 for a webshop product overview page. Page generation typically never got 800 millisecs. The multilingual stuff I put in worked great but putting EVERY single piece of text, even for the CMS, in a MySQL DB without any caching might have been overkill/dumb.
It depends. For a public-facing site, faster is better and one second is indeed an eternity. Google now includes site response time to help rank sites. For a private site, or a site for which Google doesn't matter too much, you can get away with *infrequent* slow pages. If your code is slow, [profile it](http://www.xdebug.org/). If your queries are slow, use EXPLAIN to figure out why. 
[XHProf](http://pecl.php.net/package/xhprof) beats the daylights out of xdebug for profiling.
it basically comes down to response times: 10-200ms feels snapping fast 200-300ms feels pretty fast. 300-500ms feels ok fast 500-1000ms - oh god will it open? ...f. yeaaaah, it opened 8-) 1000ms+ - slow
I certainly wish that were true, but I can assure you that's not the case. 
If you're not ever going to incur much traffic then it doesn't really matter. Everyone's requirements are different, so maybe several hundred are required, but that does come with a penalty. For general web stuff, less is usually better. Query optimization is also exceptionally important. (100 good queries may be better than 1 crappy query, and a fast query is better still.) For public sites that expect reasonable numbers of visitors, you'd want to have the page scale reasonably well, so aim for 0 queries. For example, the front page of a web page that gets several hits per second should have everything cached, so should require at most a small handful of optimized queries (logged in user, shopping cart, etc.), a couple queries if the cache is cold, and 0 in the ideal case where the page's data is cached and no user data is required. Since PHP executes queries one at a time, each query incurs a round-trip to the SQL server. At 81 queries, you're probably getting up to a good fraction of a second only from queries, let alone the time taken to process their results. 81 is too many for me. IMO, each query should be used to pull one distinct piece of data; with proper database design and code layout, an average page's query count should be below 10 exceeding that only for complex pages.
100 queries for a contact form? What, I don't even.. Help me with this please * 5x queries for stats * 5x queries for language * 5x queries for permissions * 5x queries for page footer * 5x queries for page header * 10x queries for left side, right side * 5x queries for breadcumb * 50x queries for random stuff it still leaves 25 unused queries. Be so kind &amp; illuminate me (if you are allowed to) on what can possibly take 100 queries? (Any page on my websites, if uncached, takes about ~9-10 queries. Thats why the interest)
Every piece of text fetched from the translation table is one query, and the menustructure was stored in the DB.
Yeah but if you're getting 100 requests a second, that's 8100 queries that are nailing your db server. Every second. Keep script execution below 0.01 or so. Whilst a second might seem ok for now, if you get more requests it is going to destroy you.
While the number of SQL queries is not a very useful metric, 81 queries on a simple blog page do seem to indicate bad design. But it's user experience and cost that really counts.
Not sure if you're looking to discuss code, but an alternative approach could be to treat each page as a template, use {varname} for each piece of text, use preg\_match to generate a list of variables, hit the database once using IN, then loop through the result set and use str\_replace.
81 queries to build a page with one kitten on and nothing else: yes. 81 queries to build a complex ecommerce application: of course not. It depends on your case. Either way, use the database caching of your framework.
I compare the query count of a page before and after caching as a measure of "success". Using your AndroidPolice example, how many of those 81 queries really need to be made live? I would think a lot of content could be retrieved from the db and then cached until/unless there's an edit.
He probably didn't have a lot of traffic. Who cares at that point, most of us are in the bottom 95% :). I'd still avoid it though, just for best practice sake.
I don't know why you're getting downvoted. Unless it's a search page, a second IS an eternity in page rendering time. Usually when you reach over a second it's because of your queries. Slow queries are a HUGE burden on disk IO and CPU. Fully taxing the disk and CPU for one second just to serve one page will never scale.
I wouldn't put translation tables in a database, or if I had to, use heavy caching on that so it doesn't even hit the database for all those queries (only hits the DB once and stores the results in APC/Memcache or a flat file, with a very long expire time)
800 milliseconds is a lot. Most of my pages are under 50 milliseconds... (that's including session auth and other queries).
Search should be microsecond range too - nice bit of Solr or Lucene, and you're flying along. Just irks me when people use the wrong tools for the wrong job. MySQL is jack of all trades, master of few - perfectly good, sound, RDBMS, and we use it for important persistent data - but our application barely touches it, except for builds from scratch. Which we haven't done in, uh, 2 years. Also, because this is r/PHP, where people tend to prefer shitty advice, rather than advice from people who, y'know, maintain billions of page-views a week.
That's a load. There is one of two things happening here: 1. /tmp is mounted noexec making PECL fail to execute GCC from there 2. your user has compilers disabled (most shared hosts do this) What problems did you have with cpanel's support?
http://php.net/manual/en/language.exceptions.php
[PEAR Log](http://pear.php.net/package/Log/redirected)
To be more specific, you could throw an Exception on any error. Then, use [set\_exception\_handler](http://www.php.net/manual/en/function.set-exception-handler.php) with your own function that: - Logs the exception (using file functions or whatever you wish) - Exits the application gracefully
`passthru( 'echo "'. $errmsg . '" &gt;&gt; logfile.txt');` Just kidding do not do this.
This is the right answer, it works great.
I quite like Zend_Log nowadays.
Isn't a millionth of a second a little bit short time to create a webpage? Don't you mean millisecond?
If you want to learn about logging (I.e. not use a pre-built library) write a log function that writes to your desired output (e.g. log (severity, message)) and write custom handlers for set-error-handler and set-exception-handler. However there are some good libraries already out there if you need something more.
1 µs would be, yes, but I said µs range - 100 µs = 1 ms, and anything under 1ms is great. The faster you can turn requests around, the better, although the majority of your time is going to just be transit between the client and yourself. 500 µs is perfectly achievable, so long as basically everything you need is memory resident/cached.
Whether people like Zend or find it bloated, it still pays to at least explore how these frameworks handle exceptions and logging.
 ini_set('error_log', DIR_LOGS.'/'.date('ymd').'_error.log'); ini_set('log_errors', 1); ini_set('log_errors_max_len', 1024); 
http://www.php.net/manual/en/function.set-error-handler.php and write your own error-handling function. I wrote one for my own website and used trigger_error to create notices all along the script. That way it is great for debugging purposes too.
For very simple, just make new table on database with couple of fields: ID,timestamp and message. Then create function that you can use to dump messages to database. Easy and wont take long.
PEAR Log does the job well, especially the composite system. Composites make it relatively easy to log different severity levels to different logging methods. It's pretty easy to write custom log adapters that can do pretty much anything else, including filtering based on log message content.
True. Also interesting to know that symfony2 uses Zend_Log as well.
My host doesn't let me set php data in .htaccess files, and requires a php.ini file in each directory I want to log php errors. I made a directory walker that will find all the folders and subfolder with php files in them and deposit my debug php.ini or my production php.ini in all those folder. I use the same settings for all folders so it's pretty simple. the php.ini files are built from templates where the paths are tokenized, so I can drop my walker into any of my sites and it works great. I'm planning to release it as a wordpress plugin and a standalone tool eventually, but if you'd like a copy to try out PM me.
Set up your arrays before populating them. `$this-&gt;data = array();` 
This looks very useful, great work!
yes put this into a method and type cast the argument as an array: class Foobar { protected $data; public function doSomething() { $this-&gt;data = $this-&gt;doLoop($this-&gt;data); } protected function doLoop(Array $data) { foreach ($data as $key =&gt; $value) { $data[$key] = $key.': '.$value; } return $data } } Or, just don't put that if at all. Why do you need it? If it's not an array, an error will be raised and you can fix it. Unit testing can automate.
If you plan to abort the function in the *else* clause of that if statement, you can get rid of that extra layer of indentation with this: if(!is_array($this-&gt;data)) { return false; } foreach($this-&gt;data as $row) { //... }
If you're capable of setting that up, get a new host and stop working with one that has such a specifically difficult environment. GJ dealing tho.
Excellent advice - thanks. It is in a method, so I will type cast properly.
What you have is as about as neat as you can get without getting overly complicated. If all you're trying to do is prevent an error being thrown when you try to foreach over a scalar, you can optionally you can do a: &lt;?php foreach((array)$this-&gt;data as $row) //do something... PHP's behavior is such that if you cast a scalar as an array, you will get a single-item array with said scalar as the only item.
This is one of my indispensable shorthand functions. (Useful for checking $_POST as well.) ` function check_array(&amp;$array) { return (isset($array) &amp;&amp; is_array($array) &amp;&amp; count($array)) ? TRUE : FALSE; } //Example Usage if (check_array($arrayVar)) { foreach ($arrayVar as $var) { //Do something here. } } if (check_array($_POST)) { //Form posted. } ` Why is this better than just doing your example? Because it doesn't make assumptions. Is the variable set? Is it an array? Does it have a count of 1 or greater? Those things should always be checked prior to iteration.
That's a bad way to approach it, especially when dealing with a dynamically typed language. The idea is to build a robust system that can gracefully handle errors. In some code yes we want an error to bubble up, but in other code (for example if his $this-&gt;data is being populated from an external source) he needs to handle the error gracefully rather than dropping everything and failing. Type-hinting mismatches as well as giving a scalar to a foreach loop do not raise exceptions, they trigger errors. Without an error handler that packages up errors and throws them as exceptions, one can't just catch and handle errors.
Instead of checking, why not just cast it as an array to make sure? foreach( (array) $this-&gt;data as $row)
&gt; Why is this better than just doing your example? Because it doesn't make assumptions. Not even the assumption that boolean logic operators return boolean values?
At worse it makes fewer assumptions. :)
Ah, yes, I see you are correct. Does having something legible count? I can see where this would catch a ton of beginning-to-moderate guys for days on end. I just read it too fast, of course. ;)
Me too. I don't think I've ever privatized a constructor when I wasn't implementing the singleton pattern. I don't think 'static classes' are a good idea at all.
Yes and no. There is the argument that the public API should never encounter these errors to begin with, which can be handled through unit testing. I suppose it depends on context, because I don't believe that you pollute your code with numerous if statements all over the place just to check for type, while allowing an error to bubble up will be fine (especially if that error should never, ever happen to begin with).
you can create a class with a wrapping magic method that ensures an array is always returned regardless of type or whether it exists or not: class ArrayWrapper { protected $data; public function __construct($obj) { $this-&gt;data = $obj; } public function __get($name) { if (!isset($this-&gt;data-&gt;$name)) return array(); else return (array)$this-&gt;data-&gt;$name; } } // test it $o = (object)array( 'good' =&gt; array(1,2,3), 'bad' =&gt; "hello" ); // none of these will throw notices,warnings,errors $wrap = new ArrayWrapper($o); foreach ($wrap-&gt;good as $i) echo "$i\n"; echo "\n"; foreach ($wrap-&gt;bad as $i) echo "$i\n"; echo "\n"; foreach ($wrap-&gt;noexist as $i) echo "$i\n";
I think this is what you're looking for: foreach((array)$this-&gt;data as $row) { However, as haywire said, you should really be setting up your variables properly with: $this-&gt;data = array()
This looks utterly useless. Modern PHP versions have built-in timezone handling. This doesn't "adjust all PHP date/time functions" at all, the instructions clearly show that you have to use the object. It's probably just a wrapper around [DateTime](http://us2.php.net/manual/en/book.datetime.php) and [DateTimeZone](http://us2.php.net/manual/en/datetimezone.construct.php) and is certainly not worth the $7 that they want.
I'm the author of the article and library/framework. Would love to hear some feedback and opinions.
Yep and this is just astroturf from the Loyen user who posted immediately after it was submitted. This has no place on /r/PHP
There is no sane argument that a public API should never encounter malformed data. It is a fact of life for an application that accepts outside input. The argument/question is where are the sanity checks performed, at the time of consumption like the OP was doing or at the time you receive said input. But you're always running sanity checks. Plus the other argument is how gracefully should your application fail, should it be an immediate error that kills the rest of the execution or is it an exception that's logged then ignored? That depends on what specifically the programmer is trying to accomplish. But the argument is never "should this method encounter bad data", that's a given. The argument is "how should this method react to bad data". Finally I feel you keep falling back to Unit Tests as a crutch. Unit Tests are meaningless if you aren't testing error conditions. If your unit tests aren't also feeding your methods malformed data and checking to make sure they respond as desired, I don't care what your code coverage report says your unit tests mean next to nothing about the stability and reliability of your application.
I do this a lot just in general rather than use an else clause. Much easier to read than a big if/else block and it makes you create functions that are small and just do one thing which makes reuse and debugging easier.
count() is a really expensive operation.
If $this-&gt;data should be an array, then encapsulate it in your object so that you can be sure that it actually is an array (by making the property protected or private, initializing the value and making all access to the property go through your getter and setter methods).
TIL than not only you can cast (int), etc, but you can also cast arrays like this. 
The only thing I don't like about this is it's allocating space for something that may never need it. Like if you're querying a user's customizations from the db and it returns nothing for example. That's why I like unanimous's abort approach below better. At the end of the day, it's probably more of a stylistic difference than anything that would really impact performance one way or another, but it's interesting to consider.
Ouch! I personally hate that coding style. If I call $fetch-&gt;sandwich('tomato'), I expect a sandwich and not false. /** * @param array|IngredientCollection $ingredients * @throws InvalidArgumentException If $ingredient is not an array or an IngredientCollection object. */ public function sandwich($ingredients) { if($ingredients instanceof IngredientCollection) { $ingredients = $ingredients-&gt;toArray(); } elseif(is_string($ingredients)) { $ingredients = array($ingredients); } if(!is_array($ingredient)) { throw new InvalidArgumentException(__METHOD__ . '() expects an array.'); } foreach($ingredients as $ingredient) { } } Here, the method is taking responsibility for making sure the parameter is usable, or let's the developer of the calling code know why it's not usable. Returning false just offloads the problem throughout the app: $sandwich = $fetch-&gt;sandwich('tomato'); if(!$sandwich) { // Well this is annoying...I don't really want to look at xyz's code to // figure out why I can't just get a sandwich. } return $sandwich; instead of: return $fetch-&gt;sandwich('tomato'); // which will throw an exception telling you exactly how to fix it. Edit: I apologies if I came off sounding rude...I just lost 30 mins tracing a minor front end bug to a return false statement. I suppose the return false statement did suppress the error, but it broke the end-user experience, which is probably why it wasn't noticed all these months. 
By far and away Bug Genie. http://www.thebuggenie.com/ So much better than anything i've ever used, and in PHP 5.
It all depends on the function though; sometimes returning false is fine. His point is to exit early. You can still cast exceptions. 
By far and away Bug Genie. http://www.thebuggenie.com/ So much better than anything i've ever used, and in PHP 5.
I actually installed that one awhile ago to test it. It looks very pretty, but I think I was overwhelmed by the plethora of options. I will definitely give it another look though. Thanks.
This is basically my beef (no sandwich pun intended). The vast majority of the php I do is based on a framework that queries the db and will return an array on success, or false on failure (or no results). Hence my search for a neat foreachif().
You can also cast an array to an object in the same manner.
The thing to remember with this method is that if $this-&gt;data is an object, it won't simply cast it as array($this-&gt;data), but rather will create an associative array of the object's properties. EDIT: If you don't want this behavior with objects, you can write a function to "arrayize" objects and variables in a similar manner. function arrayize($var) { if(is_array($var)) { return $var; } else { return is_object($var) ? array($var) : ((array) $var); } } Then... foreach(arrayize($this-&gt;data) as $row) { // blah-de-blah }
Or if(!is_array($this-&gt;data)) $this-&gt;data = array($this-&gt;data); foreach(...)
Aye, but if you're going to be using $this-&gt;blah, then it is a property that should really be specified as part of the class definition anyway.
oh, how about adding all your queries into their own layer that always returns an array. UserDao { public function findAll() { ... return is_array($results) ? $results : array(); } } $userDao = new UserDao(); $users = $userDao-&gt;find(); foreach($users as $user) { ... } lol, you're still going to have that if statement though :) &lt;?php if(count($this-&gt;users)) == 0) { ?&gt; &lt;p&gt;Nothing to show&lt;/p&gt; &lt;?php } else { ?&gt; &lt;ul&gt; &lt;?php foreach($this-&gt;users as $user) { ?&gt; &lt;li&gt;&lt;?= $user-&gt;getFullName() ?&gt;&lt;/li&gt; &lt;?php } ?&gt; &lt;/ul&gt; &lt;?php } ?&gt; 
Looks good. I would have used SimpleXML: $xml = simplexml_load_file(...); foreach($xml-&gt;countries-&gt;country as $country) { echo "&lt;option value='{$country[id]}'&gt;{$country}&lt;/option&gt; } It's cleaner than the DOMDocument. Also, you can probably cache the XML object one parsed, instead of reading that XML file from disk every time. Either that, or cache using the parameters: $name = 'select_'.implode(func_get_args()); $select_text = Cache::read($name); if($select_text === false) { // generate the select box $select_text = ...; Cache::write($name, $select_text); } return $select_text; 
Thanks. Will my own custom Exceptions be logged this way? edit: I tried it. It works with my exceptions!
Just to weigh in--my approach is that any external data (keyboard, web service, etc) should be sanitized upon entry and handled quite gracefully. Code to code request should just barf as hard and as soon as possible when called incorrectly....yes hard errors can be embarrassing, but so are flaky apps that pretend to work when they do not. Besides the OP, is talking about his SQL statements sometimes returning and array and sometimes false.
What's an alternative to: &lt;?php if(!count($this-&gt;users)) { ?&gt; &lt;p&gt;Nothing to show.&lt;/p&gt; &lt;?php } else { foreach... ?&gt; key($this-&gt;users) != NULL ?
An object? No. Well, kinda. You can cast an array using "(object)", but that just turns it into a stdClass. Not too useful. You can't cast an array into a specific class, nor can you cast an object as another object.
if (!$this-&gt;users)
Arrays aren't the only things foreach operates on. Some PHP internal objects implement the internals-only [Traversable interface](http://us2.php.net/manual/en/class.traversable.php). User-defined classes can implement [Iterator](http://us2.php.net/manual/en/class.iterator.php) or [IteratorAggregate](http://us2.php.net/manual/en/class.iteratoraggregate.php) instead. This makes your check look more like: if(is_array($x) || (is_object($x) &amp;&amp; ($x instanceof Traversable || $x instanceof Iterator || $x instanceof IteratorAggregate))
I haven't looked at the code, so let me ask a lazy question or two. It looks like you're using docblocks to store metadata. This [implies that you're using Reflection](http://us2.php.net/manual/en/reflectionclass.getdoccomment.php). If this is the case, why do you require all properties be public, when you can work with them properly via reflection? &gt; Models also support two date formats: MySQL's DATE and DATETIME fields. Is your code MySQL-specific? Related, I would love to be able to transform things like DATE/DATETIMEs into PHP DateTime objects automatically. Consider that a feature request, though it introduces a complexity when taken beyond just DateTime transformation. (It's also troublesome because MySQL's DATETIME does not store timezone information, while other databases have types that also include timezones. Storing the timezone with the DATETIME in MySQL can often require other columns. Then there's also SQLite, which has no DATETIME type to begin with...)
Looks interesting. I actually wrote a class which works almost identically to your first code example, but I used `static::` constants for the table/pk fields. That thing you've done with comments really impressed me too. Up until now I couldn't think of any practical use for reflection.
At work, each of our web servers has a cron job that every minute, it detects new errors in /var/log/apache2/error-*.log and pushes them to a central server. If this server goes down, the cron job automatically knows which was the last error pushed, so it will keep trying. All php errors, fatal, critical debug, and notices (undefined index..) are logged to apache's error log which goes to like /var/log/apache2/error-myapp.log. This way, we have a centralized way of viewing errors, and with a 1 minute lag. This allows us to view fatal errors easily. It only took about 3 hours to implement and push live.
Thanks for the insight, you make some great points. For now, yeah, it's just MySQL DATE/DATETIME fields. I have plans to extend it to work with multiple databases since I use PDO for everything else. I am using Reflection, and the reason they're public is because of how PHP works with namespaces and private members. If I remember correctly, by making them private, they are members of the extended classes namespace and not the DataModeler namespace. I'll have to go back and review my code, but I believe this caused some issues. It works with Sqlite too, as you can update the test suite in bootstrap.php to work with sqlite or mysql. 
Disclaimer: I am not recommending you do this. I just like to come up with unusual solutions. If you're lucky enough to be running PHP 5.3 I guess you *could* do this: &lt;?php $data = array( 'one' =&gt; 1, 'two' =&gt; 2, 'three' =&gt; 3, 'four' =&gt; 4 ); function iterate($data, $fn){ if (is_array($data)){ foreach ($data as $key =&gt; $value){ if ($fn($key, $value) === false) break; } } } iterate($data, function($key, $value){ echo "{$key} -&gt; {$value}\n"; }); People will likely look at you funny, though.
Well, given that we're discussing (object)$array, it's not like you can really expect much more out of it. It has some novel uses. 
Oh yeah....pretty obvious when you put it like that ;) going forward,my ways have changed.
You can also use if (isset($arr[0])) { ... } This is faster than is_array(). It will also validate a string, so be sure that your variable types don't vary too wildly.
When I have a function return false, it isn't an error condition. It just says the action failed or we didn't get anything back. But that doesn't imply that anything went unexpectedly. For something like bad arguments as you listed, that absolutely makes sense. Something went wrong so you throw an exception. What I don't like is this pattern which I see in a codebase I maintain try { $my_account = $account-&gt;init($id); } catch(NoAccountException e) { $my_account = $account-&gt;create($id); } Seems so much simpler to just go if(!($my_account = $account-&gt;init($id))) $my_account-&gt;create($id); 
Using exceptions is a little more clean. However php is already filled with functions that return a value on success and false on a failure. It is an accepted coding style. I wish php all round used exceptions like java in everything that it does... the fact is that PHP doesnt, I personally just find it easier to try and mimic the original developrs coding style when making my own code... just for all around consistency. That way I don't have to switch between catching exceptions or checking for false. The primary advantage of returning false, is it CAN make the bottom line coding simpler. A major ideal in php is that you should be able to convert between different datatypes with relative ease. Returning false is about the same as returning an empty array. The advantage here is that I can use === to see if it's truly an empty array or a failed function if I need to know the difference, if I don't need to know the difference then I can carry on... when you use exceptions you HAVE to check for exceptions even if the exception doesnt matter... leaving the code tattered with empty catch{} statements.
 $i=1; $dates = Array(); while(array_key_exists('date' . $i, $_POST)) { $dates[] = $_POST['date' . $i]; ++$i; } You should end up with a $dates array containing all of the dates provided.
Thanks I'll give that a shot. I think I found another way to do it as well, I had an error in my syntax that wasn't throwing an exception but wasn't doing anything.
You can also name the all fields date[], which will yield the following result in $_POST: array(1) { ["date"]=&gt; array(3) { [0]=&gt; string(3) "sff" [1]=&gt; string(6) "sdfsfs" [2]=&gt; string(7) "sdfsdsd" } } Then you just... foreach ($_POST['date'] as $date) { something(); } After proper sanitization, of course.
Thank you very much. Is /r/php a good place to learn? I don't want to ask stupid questions if the subreddit is full of professionals.
I just got around to subbing to r/php today, but I imagine it's fine. It's ok in r/python.
Good because I'm a nub.
Actually, I was gonna post in r/mentors this week about PHP/Python/Perl, if you want someone you can bombard with questions. EDIT: Oh, here, just noticed the sidebar. There's an [r/phphelp](http://reddit.com/r/phphelp).
What about changing the JS to name them `date[]` ? Then it will automatically be parsed as an array by PHP.
I came here to post the same thing. I had a similar problem with forms that had portions of them switched on and off, $_POST arrays work best.
I ended up doing it without the array for now. I'm still a bit inexperienced, my original thought process was sound, my syntax was not. Thanks!
This assumes the numbering of the fields is contiguous. Any gaps will break out of the loop.
the 'php way' to do things is definitley b :) then deal with people asking why there are both E_ALL and E_EVERYTHING "all isn't everything but everything is all, since it includes strict"
for structured relational databses like mysql it is slow for kv or doc databases like mongodb, redis or raik it is fast and allows you to distribute the data set across machines easily
this is the 'more correct' solution change the js that generates the fields to name them all 'date[]' (or any other var name). you will then get a nice array on the server side instead of having to loop through the database and checking if the key exists. eg. &lt;input type="text" name="date[]" value="1" /&gt; &lt;input type="text" name="date[]" value="whatever" /&gt;
feel free and ask, it is a good place - lots of solid php devs populate these boards stackoverflow is a good forum/qa site, although you tend to get a long of wrong early answers there from users looking to earn points
can't agree with this enough. of the 4/5 different ways to handle errors in php, the dirty 'false' is the worst way throw/catch with your own exception objects (defining the severity of an error etc.) are the best/cleanest way and will save you a lot of time 
So true, unfortunately.
yeah, you're right, it's not particularly legible. I wish it was a more common pattern though, as it's nice and concise. Also, while it's not as legible as a standard for, the consequences of misreading it aren't great.
Use some of the nicer, newer libraries as much as possible. Like PDO and DateTime.
wrap them: function html_special_chars() { return htmlspecialchars(); } and, yes, blah blah inefficient blah blah....
This is a common complaint, along with confusing parameter ordering: strstr($haystack, $needle); in_array($needle, $haystack); The naming convention issues are usually because the PHP function names follow the underlying API's naming conventions (like libmysqlclient). Like others have said, though, this shows why using a framework/library of some kind is pretty crucial to keeping your sanity in PHP.
I remember these I use often, and for the rest, php manual is 5 seconds away. I have Opera search added (another feature why Opera is so awesome), so I just type "p strpos" in address bar and it takes me to function manual page. But I still wonder why it isn't fixed. Like in a version which breaks backward compatibility, or by aliases or static classes like str::upper(), str::escape(), arr::keys() and so on. This is one of main arguments why php is being hated by 'elitists' and would be one weapon less in their arsenal.
Sorry for not knowing that. :/ I'm still pretty new to PHP.
You can also set this up on Firefox by adding http://php.net/%s as a bookmark and setting the keyword to php (or p).
don't forget about strcasecmp() to do a case-insensitive string comparison, and strcmp() for a case sensitive comparison.
I forget - what's the benefit of doing ++$i rather than $i++?
Well, in DateTime there is also plain old functions, I use them, :-):
almost all other str\* function that have a case-insensitive version uses stri\*, I wonder why this one 'case' instead of 'i'... PHP is a mess, but I kinda like it anyway ^^.
I like PHP like I like a hammer. It's a tool I use daily. It's not perfect, but it works.
Or use Duck Duck Go as your default search engine and bang-syntax: "!php in_array"
It's to weed-out the weaker of the herd.
Who said anything about catching the errors :) The sooner errors can bubble up to the surface, the sooner they can be fixed. It's not hard to write a general exception/error handler that presents a friendly Opps-we-fucked-up page.
Yes, this. I think the haystack-needle ordering is less common than needle-haystack, but it's still something I'm constantly looking up.
I'll call the waaaaambulannce for you. break;
ew no
The reason it's doing this is because the constructor is executed within the scope of the `A` class, even though it extends from `B`. It does this because it's declared on `A`. To drive this point home, try removing the `$foo` declaration from `A` and then doing `new B`. Even though `$foo` exists in `B`, the constructor can't see it because it's private to `B`, and the constructor resides in `A`. If you want to achieve this kind of overriding behavior, change both variable types to `protected` (or `public` as you discovered). `Protected` works like `private` except all classes in the inheritance chain can access them (`A` can access `B`'s `protected` variables and vice versa).
If you used a modern editor like netbeans you only need to remember part of the name and it can autocomplete the rest. No more paramater guessing, either.
I like php because I'm primarily a perl and C dev. This makes php an easy transition for me. I try to avoid the really ugly bits. 
Oh I see. Thanks for the detailed answer.
You do it in Chrome too, via the _Search Engines_ dialog (under _Options → Basics_). The syntax is the same as Firefox.
 &lt;?php class A { private $_foo = 'bar'; function __construct(){ echo $this-&gt;_foo; } } class B extends A { private $_foo = 'baz'; function __construct(){ echo $this-&gt;_foo; } } new A; new B; As mentioned above, though, class B does NOT inheret class A's $_foo variable. It simply creates its' own.
And what's the deal with airport food? Amirite?
You might find [this](http://en.wikipedia.org/wiki/Comparison\_of\_Internet\_forum\_software#Unread\_message\_tracking) useful.
I was (mistakenly) under the impression that everything got inherited, whether it was public or private. My background is mostly python so this public/private stuff is not very clear to me. I guess I should read more about it. I think what I was looking for was `protected` (what the others pointed out).
I use textmate which has a PHP bundle that will do autocompletion when I start typing a function name. It'll also look up the PHP manual page for any word that I highlight and hit Ctrl+H on. Pretty handy when I need to lookup the function params. I think Eclipse also has a lot of this kind of stuff on the PC side.
don't wrap them, hack the source so they have the correct names.
better yet, deal with crappy names.
no, no, you should be using Ruby/Python/go/C#/scheme/lisp/as
And there goes your portability.
We're replying to a moronic post from a drunk guy. Come on. Get with the moronic answers.
the only real solution to the problem!
I'm learning OOP in PHP right now, so that's the only reason I was able to answer this! public = variable/function can be access anywhere in your script - be it inside a different class (class::method) or anything else. protected = variable/function can only be access within same class, or child classes. Use getters/setters to access variable. Prevents changing values willy nilly. private = only accessible within own class, not inherited.
Derp?
protip: for string functions, haystack is first. for array functions, needle is first. Not that that makes a whole lot of sense, but that's the way it is.
If by optimal, you mean less db overhead, then yes. If by optimal, you mean working 100% of the time, probably not, though most people do have cookies enabled.
NetBeans is awesome for PHP editing. I migrated from Dreamweaver &amp; Eclipse, and I finally feel like I found home. Pro tip: ctrl+enter does the already mentioned magical auto-complete.
A BC change that large would kill that version of PHP. Look at Python: v3 changes how strings work (everything is unicode) so most people have not transitioned off of 2.6 yet. I personally don't think it's that big of a deal as the PHP manual is stellar.
How cute, people still use mysql_ functions...
I [blogged](http://blog.roshambo.org/20-possible-reasons-why-php-function-names-and-parameters-are-weird/) about this once, which raises a few decent points as to why. There's a standard now, but there wasn't [a strict one] in the 90's. And there's a [faq](http://php.net/manual/en/faq.using.php#faq.using.parameterorder) that explains the consistent array versus string prototypes, but someone already mentioned the difference earlier.
Thanks, I would like that (1) it works for both logged in and not logged in visitors and (2) it doesn't put too much load on the db.
Please move away from the inconsistent, procedural style of PHP. Cheers, from anyone that has to maintain your code.
My biggest complaint is the dollar signs and the arrow object method/member invocation! 
this will allow you to chunk large files into smaller portions, then rejoin them on the server: [plupload](http://www.plupload.com/) though, the best route is to figure out how to ssh into your account. command line access will more than likely be needed down the road for something else anyway...
Wait... Python doesn't have public/private/protected? :o
Option-F1 in Textmate will show a tooltip of the function's syntax. Control H will open the PHP manual entry in a help window.
Option-F1 also shows a syntax tooltip.
You might need to restart your http daemon for the changes to come into effect if PHP is loaded as a module on the web server, i.e. Apache + mod_php
this is the sole reason I need code-completion in my IDE. I can never seem to remember when they use underscores, or what comes first, the needle or the haystack.
I think the best idea would be to use the db to make sure you accurately track logged in users. This way if two users use the same computer to access their accounts, their data is always valid. Then use cookies if they are not logged in. It will work most of the time and will keep the db table more reasonable. For logged-in users: you'll need to make a table for tracking. id, user_id, post_id, visit_date. I would forget cookies, because you are going to have to access the db anyway to create/update the value. When a user views a post, you grab their visit_date. If there is no visit date, then you do an INSERT with their info. If you find a visit_date for that user, then you update that with the new visit_time. What I mean regarding cookies, is that in this scenario, you will still have to update the visit_date field in the db. To do so, you will have to check if it exists, so you can either update it or insert a new row. So for a logged in user, the cookie doesn't save us any db requests. For users not logged in: This is more difficult, and cookies would be a big help here. Best way to reliably get back information. It would work most of the time without the database, and you may not want to even try tracking guests in your db. I'm not an expert on tracking anonymous users, but if you did try tracking anonymous users in the db, a reasonable thing might be to save a hash of the ip address and the user-agent - basically this field would replace user_id in the above table. (I think if I did this I would make two tables, one for the logged in users and one for guests). The thing is, I don't really know how you would tell the difference if two guests visited the site from the same computer, in the same browser. If this is what you want to do, I'd make that a post here in itself, as it is an interesting topic on its own.
In PHP 5 there are three types of visibility as seen here: http://www.php.net/manual/en/language.oop5.visibility.php In PHP, *private* allows the function to be accessed only from within its own class, *protected* from within its own or inherited classes and *public* (which is default in PHP) allows access from anywhere included at run time. In your example you would need to use "protected" as class B extends A
just a niggling note, replace '/' with DIRECTORY_SEPARATOR, so that your code is cross-platform: ini_set('error_log', DIR_LOGS. DIRECTORY_SEPARATOR . date('ymd').'_error.log'); in my projects, I usually shortcut both DIRECTORY_SEPARATOR and PATH_SEPARATOR as DS and PS: define('DS', DIRECTORY_SEPARATOR); define('PS', PATH_SEPARATOR);
Steel cotton, anybody? What's all that about?
http://bits.netbeans.org/netbeans/trunk/nightly/latest/ latest nightly build - usually good. Just this from today I think is broken (first time ever - since two years - I've had a problem with latest nightly)
why don't you use ini_set() error_reporting() and error_log() ? ini_set() can set (and get, with ini_get()) almost any config variable. error_reporting and error_log can set the logging level and/or log an error at runtime what you are doing is a bit archaic. 
syslog does all of this, no need to reinvent it with your own cron job. (man syslog) (syslog is client/server software, it just happens that by default both client and server are usually the localhost. it is easy to configure your host to log to a syslog server on another host)
Oh man, you haven't seen the namespace separator yet. Seriously, backslashes?
Tried that, uploaded to my php host and nothing worked.
This is why I created my own String and Hash objects (based on the Java API) keeps things consistant. I am in the process of writing them as a PHP extension to make them faster, but the speed of the native types is good
&gt; The only thing I don't like about this is it's allocating space for something that may never need it Smells like premature optimization. I say it's better to have cleaner code than to worry about wasting a few bytes you're not even going to notice.
its quicker to just type php.net/&lt;function name&gt; in your address bar eg. http://php.net/in_array http://php.net/str (to show all str* functions)
Eh? They accomplish the same thing, and mine is fewer characters...
Do you want to display only the new comments, and hide the already viewed comments? That's something you can do with a WHERE clause on an indexed column. Or do you want to display all comments, and only "mark" the new comments using a different color or other visual cues? If so, you don't need to write a different query, since the styling can be performed in the template layer (or even on the client side, using JS). This will usually be much faster since the query can be cached. As for storing the last-visited timestamp, $\_SESSION is your friend. Works for all users, logged in or logged out, cookies enabled or not.
thanks
Assuming these fields: forum\_posts : forum\_post\_id auto\_increment forum\_threads : forum\_thread\_id auto\_increment forum_last_read_posts { user_id int REFERENCES users(user_id), forum_post_id int REFERENCES forum_posts(forum_post_id), forum_thread_id int REFERENCES forum_threads(forum_thread_id) PRIMARY KEY (user_id, forum_thread_id) } When you paint the forum thread (call it $thread) for a user (call it $user), you have to do: $stmt = $pdo-&gt;prepare("SELECT IFNULL(forum_post_id, '0') AS lastRead FROM forum_last_read_posts WHERE forum_thread_id=:thread AND user_id=:user"); $stmt-&gt;execute(array('thread' =&gt; $thread, 'user' =&gt; $user)); $lastRead = $stmt-&gt;fetch(PDO::FETCH_OBJ)-&gt;lastRead; and then, as you pain the results: foreach($posts as $post) { ?&gt; &lt;div class="forum_post &lt;?php echo ($post-&gt;id &gt; $lastRead ? 'unread' : ''); ?&gt;"&gt; &lt;/div&gt; &lt;?php } ?&gt; And then, when a user reads a thread, grab the last post ID on the page and push it into forum_last_read_posts (pretty easy to do) and that's it. ========== The way this works is very, very painfully simple. By keeping the forum_last_read_posts up to date, you take advantage of the auto increment attribute of your forum posts, enabling you to have accurate last read totals requiring only 2 more (fast) queries per thread page.
Many hosting companies disable ini_set, especially on shared or reseller hosting, but php.ini files are almost universally supported. This solution has so far worked everywhere I've used it, shared and dedicated servers alike. I see nothing archaic about a solution that works where the alternatives fail. This also allows me to add debugging without modifying a single line of code, which is great when I'm asked to debug code I haven't written or to find out why someone's CMS install with eighty-five billion extensions is giving a fatal error "somewhere". When I'm done debugging I can leave some neat and simple error logging in place.
How about telling us what we should use?
Does netbeans auto complete custom classes?
Well yes, I have not experienced those yet. It is ugly.
Here is the solution: http://pastebin.com/Q5mgJpQF I just chopped it up based on old code I have (the query is the main part: select author, comment, dcreated, IF(timediff(from_unixtime(%d), dcreated) &gt; 0, false, true) as unread from `comment`.comments order by dcreated desc; it gives you a field that marks the message 'read' or 'unread' based on %d which is the timestamp since last visit. the rest of the code is just off the top of my head in ~5 minutes and doesn't include best practices, but use that query (I don't use mysql anymore, but I remember this being the fastest way to do what you are seeking).
The auto_increment trick would work well for forums where posts are displayed sequentially, which most old-fashioned forums tend to be. Things get a little trickier on websites such as Reddit, where comments are highly threaded, and some comment-threads can even be viewed as detached from other threads. Throw in pagination and other gimmicks, and it becomes a total mess! Timestamps would work much better. In most cases they work just like auto-incrementing ID's -- they never go backwards. The comments table probably already has a datetime column, which should be indexed. It's trivial to store the last time a visitor viewed a thread, and with timestamps you can also play interesting tricks such as highlighting posts that have been "edited" since last visit.
Yes. It can even correctly infer the return types of methods by reading the docblock above the method.
you should get a vhost at linode or slicehost - they start at $20 (IIRC) and are a full server. it will save you a lot of this pain (and you can learn a lot as well)
well maybe not quicker, but universal/quick etc.
I don't steel cotton, I buy my own! /s(illy)
Hi, thanks, saving last post id is better idea than timestamp.
Hi, no we just have one page with hierarchical comments per thread, so both id or timestamps are ok. I think with pagination neither id or timestamps will work. It's probably why they don't have this feature on reddit.
It doesn't fit my needs, because this solution only tracks the global last visit time, not the last visit to each page
$_SESSION can store only one timestamp, not a separate timestamp for every thread, that's why I was thinking of one-per-page cookies
If the forum is threaded, I see no reason why posts wouldn't be incremental. Why would this not work? (Numbers are primary auto_increment values): 4 5 7 6 11 14 9 12 10 13 All you'd need is "parent_id" column in your posts database. This is all, of course, assuming a reasonably well normalized database. If you've denormalized, or not thought through your schema entirely, that won't work. That said, throw in pagination of comments (which is something I've NEVER seen done right on threaded comments and i'm not sure it _can_ be done correctly) and you've tossed the thing out the window and timestamps are a better solution. The reason I suggested post ID is because it's already indexed (or should be!) and IME most people use mysql DATETIME data types for their date information and the comparison between an int is modestly faster.
I think this is the best way, both cookies and db
&gt; If the forum is threaded, I see no reason why posts wouldn't be incremental. Absolutely. Actually we have autoincremened ids, timestamps and left/right values for storing hierarchy. Ids will do the job. &gt; That said, throw in pagination of comments (which is something I've NEVER seen done right on threaded comments and i'm not sure it can be done correctly) and you've tossed the thing out the window and timestamps are a better solution I don't see how you can implement the "new" mark with pagination? You have to store a separate last visit time by page of comments? Well, maybe this will work if your comments don't move from page to page, like here on reddit. 
just change any instance of : $_SESSION['last_access'] with $_SESSION[$_SERVER['REQUEST_URI']]['last_access'] replace the REQUEST_URI being used with any other unique page ID if you have one. The main thing is the sql query I pointed out, it is fast and efficient, and gives you an 'unread' field - build/roll-your-own solution around that also if you want to experiment further, you can do 'unread' counts based on a select statement (as a sub-query in the IF) - that would be the best way to store each users 'mark as unread', if you want to implement that feature. That problem (having each user being able to mark any thread or post as read/unread) actually has a design pattern as a solution, known as Entity-Attribute-Value (its a db schema for implementing a sparse matrix). see: http://en.wikipedia.org/wiki/Entity-attribute-value_model
Is this optimal? Suppose a user visits 50 threads per day, very quickly his $_SESSION variable will explode.
mysqli, preferably object oriented http://www.php.net/manual/en/class.mysqli.php
you have to store it somewhere, and it is better than storing 'hits' in a relational database and doing a join (as above) it is especially fast if you deploy a session handler that stores the session info in-memory (either using memcached or reddis etc.)[1][2] either way for each user you have to store their last visit time for each page. having the session in memory and pulling out that time as a timestamp, then plugging it into that single sql query, is the fastest way you can do it sessions can be garbage handled, while with storing the hits in a db table, you end up with a very very large table that will slow down over time. [1] http://www.dotdeb.org/2008/08/25/storing-your-php-sessions-using-memcached/ [2] http://kevin.vanzonneveld.net/techblog/article/enhance_php_session_management/
I needed to generate barcodes in mass quantity once (I don't recall which code I needed). So I went to one of the barcode generator sites, found out how THEY were telling their server to generate the data, then just created an HTML file that would submit them all to that server when you opened it and display the pics. The script was command line and took in a csv of the text you needed barcodified. You could send that HTML file to people, they just needed internet access to open it since it would have to access that remote server once you opened it. I probably generated a few hundred barcodes with that thing, and as far as I know, it is still occasionally used at my previous company. They used it to barcode locations (like racks) in machine rooms for inventory purposes. **EDIT:** In retrospect, I think I wrote the script in bash, so it's probably not appropriate for this subreddit... but your submission reminded me of that :)
Did you try out PEAR? http://pear.php.net/manual/en/package.images.image-barcode.using.php
Why not use PDO, which is already a standardized interface for multiple database types including postgresql?
Or [zend framework](http://framework.zend.com/manual/en/zend.barcode.objects.html#zend.barcode.objects.details.code39)
$\_SESSION can definitely store more than one timestamp. Just use a multi-dimensional array with thread ID's as keys. $_SESSION['last_visit'][123] = $timestamp1; $_SESSION['last_visit'][456] = $timestamp2; Obviously, if you do this a lot, you're going to get pretty large arrays. But since the overhead of a few short array elements is very small, I don't think it will have a noticeable impact on performance unless each visitor views 1000+ threads per visit (which is unlikely). In many cases it's probably going to be faster than updating the DB with every page view.
Good to know, but **a)** I'd rather not bring in PEAR, and **b)** mine outputs pure HTML/CSS, granting a little more display flexibility.
Followed shortly by the database going down, and the great endless cycle of logging to a database that you can't connect to, which requires that you log the invalid connection attempt to a database that you can't connect to..
rsyslog has a (I believe) better system of handling remote logging. But a good suggestion all around: why sync everything every $x minutes and have to handle errors and backlog detection when you have something that can do it already for you?
As they say, languages don't scale, architectures do!
No I won't. Procedural style works for me.
HTML/CSS? Slacker! Do it in Canvas. I mean, HTML5. Get with the times, buddy! 
What you've suggested still won't work on shared hosts that have those disabled. And that is where many of my clients are because they're small businesses. If your website isn't much more than a business card for your site why pay for an entire server? YOU should get an account on a shared host and learn how to work within limitations imposed by someone else. You may find you learn more that way than when you can do whatever you want, however you want. 
PG has a few features that PDO doesn't take into account. For example, there's the [bytea](http://www.postgresql.org/docs/8.4/static/datatype-binary.html) type. In order to send binary data for a bytea, you have to [properly escape it using a specific method](http://us3.php.net/manual/en/function.pg-escape-bytea.php). Another example is [NOTIFY/LISTEN](http://www.postgresql.org/docs/8.4/static/libpq-notify.html), which require [specific functions](http://us3.php.net/manual/en/function.pg-get-notify.php) be used. Neither of these pieces of functionality are present in PDO, and you'll find yourself in trouble if you need them but are using PDO. There's a manual workaround for the bytea escaping issue, but I'm not sure about one for LISTEN/NOTIFY. At work, we use a database abstraction library we originally wrote to allow us to seamlessly switch between mysql and mysqli. We've since extended it to use PDO, and now pg. Technically it's released under LGPL and forked from an open source project that our former lead dev runs, but they diverged pretty radically and the code is pretty awful in places...
Needs more python styled functions. $string = 'lowercase'; echo $string-&gt;toUpper(); # 'LOWERCASE' $array = array(1, 2, 3); $array-&gt;contains(1); # true TOO HARD?
Wouldn't most barcodes need to be output as an image at some point? I'm not saying it doesn't have its uses as HTML, but most barcodes I have seen end up being printed on labels or transferred to printer that cannot cope with HTML.
OOP is far better to maintain for most systems with more than one developer.
I have set people up with simple brochureware websites. I either batch them together on one of my servers, or suggest to them to just get a virtual server. The time you spend working around shitty shared hosts is well worth the extra $ you spend on a better server. Besides, most of them end up asking to do more (ie. we need a blog, we want a forum, we want CRM, we want our own webmail etc. etc.) The other alternative is one of the cloud providers, like Rackspace Cloud - it's like a shared host except sane
 ▄▄▄▄▄▄▄ ▄ ▄ ▄ ▄ ▄▄▄ ▄▄▄▄▄▄▄ █ ▄▄▄ █ ▄██▀▀▄ █ ▄▄ █ ▄▄▄ █ █ ███ █ █▀▀▄██▄▄▄▀ █ █ ███ █ █▄▄▄▄▄█ ▄ █▀▄ █ █▀█▀▄ █▄▄▄▄▄█ ▄▄▄▄ ▄ ▄ █▄█▄▀ ███▀ ▄ ▄▄▄ ▄ ▄▀▀▀█▀▄█ ▄█▄██ ▀▄█▀▀ ▀█▀ ▄▀▀ ▀█ █▄▄█ ██ ▄ ▄▄▀▄ ▀█▀ ▀▀ ▄▀▀ ▀████▄ ▄▀ █▀▄▀▀ ▀▄▄ ▄▀▄ ███ █ █▄▄▀▄ █▀▀▀▄ ██ ▄ ▀▄█▀ ▄█ ▄▀▄▄▄█▄ ▄▀ ▄█▄ ▄ ▄▄ ▀▄▄█ ▄██▄█▄▀▀▀ ▀ ██ ▄█▄▄▄▄▄█▄▀█▀ ▄▄▄▄▄▄▄ ▀ █ ▄ ▄██▄█ ▄ ██▄▄ █ ▄▄▄ █ ▄ █▀▀▀▄ ▄ █▄▄▄█ ▄ █ ███ █ █▄▀▀▄▀▄▀▀ █ █ ▀▀█ █ █▄▄▄▄▄█ ██ ▄▀▀ ▄ ▄██▄ ▀▀ █ http://www.asciiqr.com/ [Source](http://www.asciiqr.com/source.txt)
Your implementation of "controllers" is what I use in my framework with different names. Apache is the controller, conceptually, with your mini-controllers/commands doing the appropriate handling. I also have an allowance for custom delimiters for people who like-this-approach.html to seo on a command by command basis. Did you link to the framework? Naturally I think ChipperMVC fits. I wonder if YA-MVC (yet another mvc) is taken. If there is one already, it's self-referentially clever imo.
&gt; Did you link to the framework? I do have a public SVN on my own server that I can link to, but my idea was to release it on github under the new name. I thought of ChiperMVC, but that just sounds so... conceited. YA-MVC could work, but it doesn't exactly roll off the tongue, yah know? :) I remember a few years back somebody did a comedy bit about how all the successful websites have goofy names. Google, Twitter, Flikr. It's funny, but it's also true.
In a similar vein, I wrote [PDFB](http://chir.ag/projects/pdfb/) a while ago that lets you put barcodes on PDF files using PHP.
Tell me why you consider PHP a procedural language.
Well it's certainly not event driven, there's no execution loop involved in a web request, just linear code. That's not to say PHP can't be used in an event loop, I've seen implementations for data sockets and such where it continually runs as a process that reacts to data received, but when used as a web backend the code is executed procedurally. **edit** After looking up the wikipedia article on procedural programming I think I see where my use of the word may be a bit confusing. I'm not suggesting that PHP is not an OOP language, I use objects all throughout the framework. I just don't think it's proper to modularize your main execution logic when it's always going to be executing in a linear fashion.
I stopped using an IDE. I figured out that after a couple of years using one, i was starting to have trouble writing code in situations where i didn't have an IDE, like directly in a server (fast fix for something). So now I use gedit with a couple of plugins. I believe it's made me a better programmer since I don't rely on an IDE to tell me if there's errors, nor autocomplete functions.
I don't understand how it could make you better. You aren't a better programmer if you memorize ($needle, $haystack). What happens if you need to learn a new framework or library? Are you going to tell me me using netbeans to look up some method name in Symfony is slower than you having to browse api docs? I don't think so.
&gt; Needs more python styled functions. ...you mean methods?
This is ridiculous. No escaping of shell arguments, and using a hard coded temp file name. (What if two scripts write to the same file at the same time?) Somebody please implement this so I can hack the hell out of your site! Well, at least it uses mysql\_real\_escape\_string().
How do people that prefer emacs, vim, or textmate prefer to write code? more programmers don't care if when they **know** what they are doing. For something as big as a new framework, I will then use an IDE. I don't worry about that though, I am not having to learn a new framework. For smaller projects, i will use their api docs, instead of autocomplete. This helps me read the api docs better and make less mistakes.
Valid, but I didn't need software for a label printer. It's being displayed on desktops and mobile devices on our work order tracking system.
Springboard Only thing tech related that comes up is some iPhone app. Really interested in seeing the framework, be sure to update when it is released!
I know it is an IDE but are you able to open it up and create and edit a single PHP file or do you have to mess around with creating projects and setting up folders?
I love it, but unfortunately [it's trademarked](http://tess2.uspto.gov/bin/showfield?f=doc&amp;state=4008:o39r8q.3.2), and the trademark wording could be applied to this use. Also, Springboard isn't just "some" iPhone app, it's the entire iPhone launching GUI and a core component of iOS.
Zend_Barcode is good sauce. I use it in one of my projects in a generated PDF form.
DIY-MVC BYO-MVC (Build-Your-Own) Basis TailorMVC
ooo, Basis, I like that. Trademark: [Hardware device and software that provide web-based access to applications and services through a web operating system or portal interface for the purpose of personal health monitoring](http://tess2.uspto.gov/bin/showfield?f=doc&amp;state=4002:v1fha1.4.4) Hmm, I might be able to get around that.
I love gedit. Anything else seems like too much. 
MDB2 (PEAR) does this for pretty much all database types as well.
Well, database is good for debugging problems on the app, not on the database connections... Just dump invalid database connections to logfile.
Each time a user visits your site, send a "last visit timestamp" cookie. When a comment is created, record its creation timestamp. When displaying (or querying) messages, compare the creation timestamp from the comment with the last visit timestamp form the incoming cookie (if present).
You can find lot of free PHP codes in this [Forum!](http://qualitypointtech.net/forum/index.php)
Can you use phpThumb? Just pass it some parameters and it will spit out your image. This may not be a project that can use open source libraries, but just mentioning it in case you can.
Well it's definitely better suited for projects, but it still works just fine as a quick-and-easy editor. There is a project browser and a simple directory browser, and you can choose to open individual files instead of projects.
How did you do the blue text???
ChipperMVC
Get the fuck out of here, seriously.
I love stuff like this. Than you for posting.
Sorry for asking a question to learn something :) I'll exit the room now, and I'll take that stick that's shoved up your ass with me.
how can I save that to a file?
That's interesting, but why would a barcode need to display on a screen?
Pie.
Well, I actually use ``return (!empty($array)) ? TRUE : FALSE;`` on my production servers, but that wasn't the point of the response. It seemed like he was looking for help with best-practices.
PHPit after Reddit PHP.
Already taken by several graphing libraries.
thanks a bunch... I didn't use php thumb because I had to created 3 different image sizes... and I didn't wanted to use a different class just for the thumb
In markdown you make a heading by prefacing the line with a pound sign (#). Two pounds gives you an H2, which is styled as bold blue text. #One Pound ##Two Pounds ###Three Pounds Three and up are all styled the same. 
Hmm, pronounced like peach-pit? I like it, but that seems awfully presumptuous of me to take the subreddit's name.
I read this a couple of years ago and thought it was a great place to start [Beginning Database Design](http://www.amazon.com/Beginning-Database-Design-Novice-Professional/dp/1590597699/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1284049471&amp;sr=8-1) EDIT: I posted this link assuming you were referring too learning RDMS concepts not language specific features. If you aren't familiar with how to build a data model, relationships, inheritance, etc. I suggest the above. 
The postgresql online manual is a surprisingly good resource. One piece of advice: if you really want to learn database (not just php with some db backend) stay far away from mysql. I'm not saying that mysql is bad (it's good for what it's usually used for) but it's non-standard in so many ways and it's manual is an absolute mess. If it works in mysql it may be you code is right or it may be that mysql has some non-standard peculiarities that happen to allow your code to run even it's wrong. Use postgres. Basically if you do something in postgres and it doesn't work it's because what you do is wrong, if it works it's because it's right. And postgres is a pleasure to work with. One caveat though it can at times be a bit of a bitch to set up initially so be sure to write down everything you do to make it work the first time. It'll save you a ton of time in the future. 
Was a bit of a joke - "not cake"
1) warnings. Everything should be thrown as an exception, I shouldn't be forced to use '@' but I am. 2) Can't type hint callbacks forcing lots of is_callable() nonsense. Though, you can with anonymous functions. 3) Namespace syntax is fucking retarded, the way they came up with it is even more fucking retarded (read the chat log, it's absolutely fucking retarded). 4) PHP may be fast, but it's not exactly memory friendly. 5) Did I mention how fucking retarded namespaces are in PHP 5.3? 
Second that. PostgreSQL online manual is even better than a lot of books out there. When it tells you to do something in a certain way, it usually also tells you why it's better. Also, you won't get spoiled by all the non-standard stuff that MySQL books try to make you get used to. Learn best practices by using PostgreSQL, then move back to MySQL if you need to.
You're going to make a lousy entrepreneur at this rate.
Make a website that generates great website ideas for students struggling to come up with ambitious projects.
Here's an idea that I wanted to do but lack the time to do it, keep in mind it's not very well formed so don't mind the rambling: Make a trouble ticket type of system for people to submit problems such as trash in parks or parking lots (or whatever other jobs) within your city or area. Then allow people and groups to sign-up and clean up areas for points or something. Try to get your city involved, include Google Maps API to mark the troubled areas so people can look for nearby work. You can also tie in postal/zip codes and whatever else. So it should give you a good run-down of a lot of tools and concepts. If all goes well you might also improve your community. I'm sure this idea could be hammered out a lot neater with some thought. Hope that helps.
Clearly best-practices would dictate the way you can get the best performance as well as code cleanliness. Downvoting me isn't going to change how fast or slow count() is or if you should use it or not.
You're right about that. Mild confusion and an 'aha' moment are not terrible consequences, I'd think.
Make a website where people can submit links to stuff on the internet, along with a forum where those links can be commented. In addition, add the possibility of rating every post so people can know whether they can be read or not.
Design a simple CMS with versioned documents and page tree, i.e. with the ability to publish and un-publish a set of changes. For extra credit make the system so that it can handle multiple websites at once.
I didn't downvote you. Edit: For the record, I don't downvote people for disagreeing with me or for having a different opinion than I do. I downvote people for irrelevant comments or comments that are inflammatory / rude.
Alrighty. Why would you use empty() to see if an array has values or not?
My thoughts are because it performs the same function as isset() and count() (checking for at least one) with a lot less overhead.
Add a little escrow payment thing, so people can put money down to have a ticket handled, and you can turn your cool volunteer school project into a business model, too.
Yes, I'm almost OCD about optimization in general so I'm sure some of it is premature. A lot of that effort leads to less total lines of code though which to me seems cleaner.
My university will own this project, so I can't make any money off it. So I plan to create something that is "beneficial to mankind" and then just release the code.
That really is an excellent idea. Thank you. If I do this, I'll make sure to release it for free, so that other people in other communities and countries can make use of it too.
try Symfony :)
Here's an idea, that the university would need to maintain when you're gone. A project that tracks packages installed on each OS version, namely of the *nix variety. For example, which version of autoconf comes standard with Ubuntu 10.4? Which version of PHP with CentOS 5.4? It'd keep track of this by using manpower and automated techniques. Your job would be both, which includes helping promote the idea of the different OS venders to provide web services with this information. This is useful for OS projects. For example, the PHP project is having a difficult time moving away from autoconf 2.13. Ideally, at least for PHP, every [moderately recent] OS would have at least autoconf 2.64, but they don't. At least, we don't think so. I've not searched too hard for this but variants of this idea exist, but none with the purpose stated above. For example, distrowatch has [packages](http://distrowatch.com/packages.php) and some (but not all, like autoconf) per [distribution](http://distrowatch.com/table.php?distribution=ubuntu). 
http://www.startupideagenerator.com/
That's bullshit of your university to "own" it. I'd still take the idea and make money off of it. Are they paying you for it? Are you getting compensated some other way monetarily? Hell you are paying THEM for tuition, so even if the compensation is a passing grade in the course, it's not enough to qualify them owning your idea. 
Here's an idea I had a while back but never implemented. Figure out a way to bring random people together to accomplish tasks and reach a goal. There are a lot of these sites out there in the form of donation sites (you can set up a cause and enlist people to donate), but there aren't a lot out there (as far as I know) that allow you to manage manpower. A use case might be reddit island (if you're new here, this is a real thing). We want to get a bunch of redditors together to buy an island other redditors can vacation at. So we have a bunch of disjointed connections and no way to get ahold of the project and manage tasks and roles for people. Your application should allow people to sign up for roles, assign each other tasks and projects, measure and report on progress, vote on solutions, etc., all from a bottom-up approach. For added difficulty, have the ability to detect and merge similar projects/goals if the participants wish, integrate with other sites, and create an API so that people can build applications on your platform. Get going.
In this industry, the one thing you should never be is OCD about optimization. If you really cared this much about optimizing for memory and performance, you wouldn't be using PHP in the first place. 
Check out my [zip code range class](http://www.phpclasses.org/package/3156-PHP-Get-zip-codes-within-a-range-from-a-given-zip-code.html). You'll only need a MySQL table with zips, latitudes and longitudes. It's a modification of the original by Scott Mattocks, with better precision.
It's not bullshit, it's standard practice that the university owns the copyright to your final year project or dissertation. You can normally opt out though, as I did, all you have to do is write a letter to them.
Make an application that dissuades as many people as possible from using PHP.
I like the pronunciation of that too. Theirs your logo as well...
That's definitely on the top of the list. Perhaps for the logo I could play with the text sizes, like PH**P**it.
In what ways would this differ from a wiki?
You won't be able to write good software unless you either have a good spec or intimate personal experience with the problem domain. What do YOU know? Write software to make THAT better.
[Heh](http://imgur.com/SSQNv.png)
PHPClasses? Really? Ugh... GitHub, or something. *Anything* but PHPClasses.org!
In 2006 there was no such thing as GitHub, youngun.
I had an idea a few years ago to make a site where users can register, select what instruments they play and what styles of music the like, and where they live, and then they can be matched up with other people so they can form bands and jam together or share music and show dates and such. Never got around to it though.
Two Words ... Porn Aggregator 
It's gonna be hard... [takes off sunglasses] Because it's an adult site.
:)
* 2cents * FreshMVC * MintPHP
It's fairly normal practice.
Google reader already does this. The recommender engine even finds you the weird stuff.
Here's to hoping this ad gets some... [*sunglasses*] Stiff competition.
I have a GREAT PHP/MySQL project, but I am a lazy bastard. I can code it too, but then again, I am a lazy bastard. I just get overwhelmed about the work to do. I need someone as a team member to force me to code and meet deadlines, THEN we can make some money.
Weak. Not my university.
Brilliant idea! You can call it, I dunno, diggitupon or something.
Sounds like a fun gig.
You have no idea how much I wish I was a talented php dev right now :) Alas, I'm nowhere near good enough for this.
create a website that keeps track of sports people that fake fouls/injuries... in other words. step 1... define your demographic step 2... define their needs step 3... find a need that is as yet unaccounted for online step 4... whine about it for a bit. step 5... complain to your professor that it is impossible step 6... don't finish it.
A website for quick lists. You can create a list of books, a list of tv shows to watch when you get time, a list of dvds you want to buy. Then maybe some cool stats generated on common lists.
Self-hosting? Sourceforge? Plenty of options. And I ain't that young ;)
http://www.listable.org/
You should spend you last year alive doing more than making a website.
The internet is getting too damn good.
This already exists, almost word for word what you are saying... heard about it on NPR awhile back, but strangely cannot find the site anymore. Hmm, since they do such a bad job of promoting themselves, maybe this is a good project after all.
Sounds about right.
Local events aggregator. A good one, the few I've seen kind of suck... Let people add sources and customize their own aggregation. I guess it depends on your area, but where I'm from (Tacoma), there isn't jack that I've found, anyway.
Is anyone else a little put off by OP's username?
Then this probably isn't the job for you :)
Ask any PhD from any university who owns the dissertation. 
Wish I was a better PHP dev. :(
Design a language with a syntax similar (or identical) to PHP, for creating PHP C extensions, and implement a compiler for it using FLEX/BISON/LLVM.
It's a single PHP class which was a modification of one that I found on PHPClasses anyway. It gets more exposure on that website than it could get on my own, and SourceForge is better suited for entire projects (of which I now have 2 on SF). To be quite honest, because of origination and simplicity, I chose PHPClasses for very good reason. Don't knock it unless you know the underlying reasoning behind a decision.
Ahhh - if it wasn't full-time I'd apply (5+ years experience and I work in very high traffic/load apps).
I look at fantastically naked women 8 hours a day. What do they offer?
Interested to see how this works out. I've wanted to post positions in /r/jobs as well, but it seems rather dead.
Nothing that great! Just not in a position to switch FT jobs right now. But, if you guys have anything part time or contract based in the future, I can shoot you my resume to keep me in mind, if the availability planets align?
Excellent filtering technique. :) Speaking of, if you ever consider [paid] interns and *my* username doesn't put *you* off, gimme a buzz. (I say "intern" because I have lots of tech experience, but not lots of programming experience... yet)
Hey competitor 8-) Good luck with your search!
The job itself seems really cool I'd be interested if the hours weren't so demanding...,.. just to throw in a couple pennies here... I think the reason you are getting so few applicants is because your offer doesn't really work for someone who wishes to be full time nor someone who wishes to telecommute. If I telecommute, I'm going to want to make my own hours. Maybe have an occasional live meeting, but i would expect most of the communication to be via email, and maybe some IM if we're on at the same time. The notion of "full time" or "part time" is really irrelevant, I just want to make a contract stating the price and the deadline. If I'm going to be showing up at a set time everyday and plan my day around it, it's more like an in office full time job..... but with a full time job I'm going to want the benefits that come with being a full time employee. It's not really worth it to work on a contract basis as a full time employee.
You're right; and legally as a contract worker we can't even ask you to work certain hours. All we really demand is that you have to be there for the morning meeting. If you can check in with me periodically as you're working, that is fine. I know what you're saying about working hours and that is part of the benefit of being a telecommuter. I don't really care when you work as long as you are somewhat available to exchange information. I tend to start at 6 am and stop in the afternoon; one of the other devs starts around noon and finishes late at night, etc. Thanks for noting that I wasn't very clear with that in the post.
Never in my life have I ever wanted more desperately to be a better developer.
For sure; send it if we're not already talking.
0 applicants after 2 weeks vs. 4 resumes in a few hours. /r/php wins. I wonder what the response would be from /r/programming but I think it might get downvoted.
You have no idea how much I wish I was confident in my PHP skills right now. Sigh... I need a Prozac.
Thanks! We should swap logins :)
Ut-oh, a childe at a porn site... This could get... [takes off sunglasses] Hairy^Hless.
Might toss my hat into that ring as well; I've done adult before (built [this shit](http://www.allofem.com/scanner.php) among other things like 5 years ago). Currently a fulltime SQL DBA, but wouldn't mind a side project or two if you have them open from time to time.
If you have experience with high-traffic MySQL replication and DB optimization, please do hit me up with an email. Right now we've got memcached cranking so well that our db load is almost nothing but once we roll out more code, we may need a real DBA.
Send in some sample code; let me judge :)
LOL@^H
As the Mod of /r/PHP I Approve of this.
Cool. MySQL, yes; MySQL optimization (indexing, my.cnf param tuning, etc.) yes; MySQL replication no. I'm a PHP/MySQL developer who was fortunate enough to land in a SQL Server DBA spot thanks to some convenient employee departures and my knowledge of SQL in general. My only clustering and replication experience has come from the SQL Server world. But I may hit you up with an email anyway. I just need to put together a resume, as I haven't done that in 5 years ... :)
I've got 10 years of PHP under my belt, but I'm about 90% Python these days, outside of a few small CakePHP-based projects that I'm doing at the moment. I'm not sure I have anything at the moment that would display any skills other than cleanliness in my coding style. Unless, of course, you guys are amazed by quick blogs thrown together in under an hour. I started building a forum with CakePHP tonight. I could probably send you pieces of that in a day or so. It should be done before the weekend is over.
What we do is relatively simple CRUD stuff but with such insane traffic, we have to do it very carefully and efficiently. So amazing PHP code won't blow me away as much as someone who is very clean, orderly, and pays extreme attention to security best practices. (If you can describe to me what CSRF is and how you'd prevent it, you're already ahead of 95% of the others.) We use our own framework as the popular ones available are too bloated for the traffic.
Thank you. Pre-qualifying someone as a redditor is cutting out a huge amount of Craigslist bullshit I'd have to otherwise weed through.
You may recognize our networks: CB, RR, SIC &amp; VIP (rip the last two :( )
I've gotten spoiled when it comes to CSRF. I always let frameworks handle it for me. I know how they do it, though! Reddit comments aren't really the best place for an almost-pre-interview style conversation like this, so expect a PM tomorrow.
Glad somebody got it. :)
 array_walk(&amp;$array, $funcname) array_filter($array, $callback) array_map($callback, $array) `array_filter` and `array_map` both accept callbacks but flip their arguments. `array_walk` is an in-place version of `array_map` but takes a string function name, not a callback. Again, the parameters are flipped. 
Excellent; I look forward to it. I think the last time I did phone interviews from CL applicants, not one person could accurately describe CSRF and necessary prevention methods. I have plenty of other questions but if you're OK with that one, get in contact with me.
I'm 35... but that only makes it worse: I'd only be fit for Japan. :( hehe
And even at that, only if you found a really sharp razor!
The isset() is wrong, but apparently not for the reasons I though, but I did a little test. Looks like PHP completely messes up when it comes to undefined variables and references. References to undefined variables and array keys will *define* the variable with a value of null. &lt;?php error_reporting(E_ALL | E_STRICT); dump_reference($foo); function dump_reference(&amp;$value) { var_dump($value); } This produces 'null' with no warnings. If you convert the parameter from reference to pass-by-value then you get the warning. This works with plain old references too. &lt;?php error_reporting(E_ALL | E_STRICT); var_dump($foo); // Notice: undefined variable $bar = &amp;$foo; var_dump($bar); // Outputs 'null' var_dump($foo); // Outputs 'null' When the hell did $foo get defined? If the assignment is changed to $bar = $foo then I get extra notices on line 3 and 4. It gets worse though. Look what happens what I use your function on an array. It actually creates the value you are checking for. Ouch! &lt;?php error_reporting(E_ALL | E_STRICT); $foo = array(); check_array($foo['bar']); var_dump($foo); // array('bar' =&gt; null) Using 5.2.11 here, not sure if this has changed.
If this was part time I'd be all over it. Just finished a long term part time and need a replacement. I won't give up my 8-4 though, too cushy. Let me know if you change your mind and hire two or three part time contracts, I know I'd be a good match.
Just hire the three of us part time and high five yourself for kicking so much ass. ( same boat as these blokes )
Sent in my resume, but feel like a complete noob :P
If the job is still available, I'd love to apply for it. I currently work in the adult site business with a fairly reputable company and have been doing freelance with them for another a year and a half. I've been building websites for 12 years, with 10 years of PHP knowledge. 4 years of memcached knowledge (managing sites with 500,000k uniqs/day). I also go to school a couple days a week (one day is completely full). Other than that, I'm usually always working in my free time. If you're interested, let me know and I'll shoot you my resume and previous work experience.
That is really a nice thing to say about redditors. Also a redditor can benefit from this I figure it is a good thing.
http://www.citysourced.com/ ?
&gt; I’m a PHP newb I think we are done here. Honestly The one thing PHP does really well is documentation, why does every Joe coder think he needs to blog some mundane snippet? Whatever.
I've had more qualified resumes come in from reddit in the past few hours than I did from days and days of Craigslist postings in multiple cities. I already have a few very qualified people to choose from. Thanks again.
Awesome! I need to give out my ideas more often, when people find they already exist it's like getting all the benefits without any of the work.
 ^ Well, there is your guy OP
try to relax
don is on the shortlist; looking forward to the resume.
Good example of more parameter ordering insanity, but I think you're mistaken about `array_walk`. It doesn't require you to pass a string for `$funcname`: $arr = array('one', 'two', 'three'); array_walk($arr, function (&amp;$item) { $item = ucfirst($item); }); echo join(' ', $arr); // One Two Three 
Ext JS is better
Doesn't most of the security world refer to it as XSRF? I always have ...
I don't see the comparison between this and ExtJS. Ext is a full featured JavaScript library and framework, like Prototype or jQuery. This is just a PHP wrapper for a bunch of JavaScript UI controls. Downvoting because this stinks of marketing.
You're right. I could have sworn I saw the parameter list on PHP.net said string when I wrote my comment. Either way, $funcname is a poor choice of name for the parameter.
[Imagick::thumbnailImage](http://php.net/imagick-thumbnailimage) should do it. Note: Imagick is a PECL extension (requires root privileges to install).
I also had this idea.
wait, what? 8-4 is PART time?!
Export your subscriptions NOW!
I'd like to see where my URLs occure in google/bing for various searches. See a history of their movements over a year. I want to submit 1,000 URLs and 50 keyphrases and pay $0.01 per check per URL. I want total control of my data, export and import and stuff.
Do it in Postgres, expand your knowledge. I too am on the lookout for ideas for a final year project, I'll probably be doing mine in Python (Twisted or some sort of WSGI app).
Make a site that is a cross between eBay (great for buying little items for more than $10) and freecycle (great for big items for under $50) User defined forms, upload images of items, show items like ebay/amazon (structured) make it searchable. Make it geolocation aware. Modorators. Anonymous. Reputation. Facebook/twitter/flickr/reddit hooks. I am already on the internet, I have an online reputation, use this in your site. $5 to post an advert. Free to comment. All adverts are creative commons so I can re-mix an advert (if I see someone selling a bike, I can cut-paste-edit-post)
I imagine a user defined form (like wiki syntax) would look like this: picture item|text price|number description|lots-of-text You have 3 modes: - create form, freestyle text box. - edit advert/post see as it as an actual HTML form with a save button - view, see the data as a table. allow people to comment, reply, thread comments. Allow forms and adverts as replies. How can I promote cheap tickets to see a band? A church book sale. Pub quiz night. Sell all used baby clothes. Sell use garden furnature. Sell a boat.
Allow random cars driving around to pick up and drop off parcels. Route parcels like TCP traffic. Give me $1 a parcel I take. Use drive through warehouses so I drive in, you open my trunk/boot take out parcels and put others in. Warehouses are like routers. I make money driving to work and back, going shopping and back.
And one with a likely XSS hole in it as well.
I'm probably qualified for this, have sent an e-mail, but I'm at uni and in the UK so it probably wouldn't work out that well. 
Why? Are google planning to change their rss feed smut policy?
jQuery UI + YUI kicks ass :)
Yeah, I've never understood the inherent aversion to PHPClasses.org. :S
Ditto. I can't risk a non permanent job switch right now:/ Also, while I know php well I don't have tons of experience with high traffic, so I prob wouldn't ne in the running anyway:(
You might be thinking of XSS? 
No, I prefer to work 70 hour weeks, 40 hours FT and 20-30 PT on hobby, side projects, or contract work.
 ini_set("memory_limit", "50M"); ini_set("upload_max_filesize", "50M"); ini_set("post_max_size", "50M"); ini_set("max_execution_time", "90"); Add that to the top of your script. That should override the php.ini file. 
No, No. I'm for reals. I wanted to start up my personal PHP project (to someday make some pocket change) and I did a Google search for PHP controls, and KoolPHP came up as a result. I checked out the examples and they were really cool. I had done some research and discovered Ext JS almost a year ago. You know how personal projects start out... they never get finished. So, I had the urge to begin where I left off. I got stuck with Ext JS because I could never get it to accept my JSON results. I have it setup great, but with all of Ext JS documentation there just isn't good enough examples with JSON, just the basic examples. I have a PHP web service page that returns JSON results and I try to add it to the control but the data just doesn't get rendedered. When I manually create a JSON dataset that it's fine. So, I was just wondering if KoolPHP was easier to work with.
OK, it's better, but why? I've been tearing my hair out with getting Ext JS to accept my JSON dataset. I've done all my double, triple, and quadruple checking and JSON validation and I still can't get Ext JS to interpret my JSON dataset.
Why YUI over Ext JS? I know Ext JS was a fork of YUI.
I agree with ChiperSoft, Ext JS and KoolPHP are different. If you build a very rich interface i suggest you to use Ext JS, else i suggest you to use jQuery UI.
I'm not building a full Rich Client, but a web site that will have to manage lots of personal datasets. I'm planning on building it completely with all my mistakes and then phase 2 would be to re-code it and solve all of my coding / architecture / framework problems to make it cleaner, easier to maintain, and extendable. I don't think jQuery UI has any data controls? Am I looking at it right?
I love that PHP gives the ability to do that.
Give these a go. http://adodb.sourceforge.net/ http://pear.php.net/package/MDB2 http://code.google.com/p/digg/wiki/PDB
Sorry man, no joy :( [php info](http://losingisfun.com/info.php) That's after running the above script, then adding your code to the new php.ini file, below the opening PHP header.
those lines go in the script itself not in the ini file.
Er, now I can't access my site at all. Instead of simply looking in my root, it seems now to be looking in the cgi-bin folder, which is no longer there. nothing I do seems to be able to alter this. Help!! The requested URL /cgi-bin/dispatch.fcgi/index.php was not found on this server.
The lines need to go in the script that you are trying to modify the php.ini for. If you placed them in your cgi-bin delete those lines. 
To get that last error, I'd deleted the cgi-bin folder, because the script from the OP writes a new one. I've now deleted the script from my root and restored a previous cgi-bin folder, and now I no longer get the 404 error, but it now times out and I get Internal Server Error The server encountered an internal error or misconfiguration and was unable to complete your request. Am i screwed?
the script from verboseone writes nothing, it is a temporary over ride of the ini settings while your script executes. http://php.net/manual/en/function.ini-set.php &gt; Sets the value of the given configuration option. The configuration option will keep this new value during the script's execution, and will be restored at the script's ending. you shouldnt have to touch your ini file if you're using ini_set, nor should you delete the ini file or delete any folders for that matter...
After I added those lines to the script in my original post I got the 404 error with the wrong directory. I'm assuming it stopped the script running properly and something has gone wrong. I understand those lines themselves write nothing, but I still now have no site, a fact which is waaay more important to me than my upload limits. If I gave ftp access, would someone please have a look around and see if anything seems out of place? Ftp still works. So that's something. Kinda.
Well the original ini file is still somewhere above my root where I can't touch it. All that script does is create the cgi-bin folder, add a custom ini and read from that. I don't understand it myself, but there we go... There was no cgi-bin folder before and as far as I've seen that's the only change to my directory. I don't get why it isn't working now.
XSRF and CSRF both mean Cross-site request forgery.
are you saying this: `ini_set("memory_limit", "50M");` `ini_set("upload_max_filesize", "50M");` `ini_set("post_max_size", "50M");` `ini_set("max_execution_time", "90");` creates the cgi-bin folder? coz thats not right...
No no no lol. In my original post, there's a link to a script which installs a custom php.ini file in the cgi-bin folder. It works fine, by increasing that size to 20mb. I wanted 50mb, so I was asking if it could be changed. Through my own misunderstanding, I added those lines to the script I posted. It didn't run properly and now my site has disappeared. Does that clear things up? Cos I'm still shafted :)
Same here.
sorry i'm being an idiot.
Yeah? You're not the one who's just fked his site. :)
Non-profit Paypal comes to mind. 
When we start spelling it Xross, I'll start using XSRF. Errrr I guess we have to use XSS due to CSS being taken.
The most tempting part of this is that I'd be able to say "I was hired by someone named NotYourMothersDildo".
http://sxi.sabrextreme.com/forum/viewtopic.php?pid=942 not sure if that is related to your issue but this seems like you have some kind of php as cgi issue
CL is still better than Dice and Monster... I'm job hunting right now and those places are completely overrun with shady job agencies that apparently just want to harvest resumes and information. Not looking for contract work though, sorry ;)
XSS and XSRF are two different things.
Dude, awesome. I added a blank .htaccess file and deleted the cgi-bin folder and my site is now back.
Why, yes, they are! I was just pointing out that they both use 'X' for Cross... I would call XSS CSS except that the acronym is already used.
Now that my site is working again, please clarify by which script you mean. If my site uses a separate flash uploader for that particular component, do you mean in there?
Not to totally ride coattails here, but I too have had a PHP Developer position open myself for a little while and we're still early in the looking process. Our stream of applications has been slow because we're requiring people to apply via git repo. The CL post is [here](http://boulder.craigslist.org/eng/1920900903.html) and the git repo to clone and fork is here: git://github.com/sparkfun/hacker-application.git NotYourMothersDildo - I hope our geography separates us enough that I don't poach any of your applicants!
http://www.developersdex.com/asp/message.asp?p=2978&amp;r=6929579&amp;Page=1
Is 100% telecommute an option? Is part-time an option? 
Put it at the top of whatever script the upload is being submitted to.
Feel free; I've received over a dozen reddit resumes now so there is a wealth of contractor talent here. Nice application method!
No and no. There's a pretty big emphasis on physically being here (and here tends to be a fun place to be).
Brownie?
o.O I don't see it... can you explain your thought process?
Too bad: http://php.it/ that would have been fun.
And phpit.com is already being squatted on. :/
Very interesting. veeeeery interesting. So, you have enough to work with forms? Do you use any special jQuery UI controls that I should know about?
I'm glad your site is back. You need to add that code to the script that uploads the files. Put it before the upload script.
We have a page that does more 600 queries, its not that slow, but I'm really worried what will happen when we go live with this project. We use Zend Framework, is that normal for zend or did we just design a monster?
really true :(
It depends. With procedural style you end up more easily with spaghetti-code. With oop you end up more easily with ravioli-code. I like spaghetti more than ravioli. And with PHP's shared nothing approach ravioli clearly is not the way to go. I think that if the code and the functionality is well designed i.e. it separates the concerns and loosely couples components, it's not that much about programming approach. You can do it as well with OOP and procedural. But this is just another flame war with our subjective opinions fighting each other. Both of us think that we have seen the light, we really haven't, but let's continue exploring.
I'll agree to disagree, there's no true right way, and it is subjective :)
MDB2 is not really PHP 5.3 + E_STRICT compatible. It tends to create instances like: $driver &amp;= new Driver(); which E_STRICT considers a crime. 
You were doing so good until that last sentence. It's 2010, can you tell me what you think sitting next to someone allows that netmeetings or conference calls can't? I mean, you're free to offer your low paying job to students in KS but I just don get why people want a body in a chair so bad.
Yeah, sorry, it's not really up to me. More of a company-wide policy. I would absolutely love to spend 10 - 20 hours working from home myself (and I think I would get a lot more done), but as of right now my impression is that it's not something they're open to. Developers don't get to make the rules all the time, sadly. I just have to try and find the best person for this job with the constraints that I'm given. I have gotten a few very promising responses from the /r/jobs post that I am going to present to my boss and HR and see what they say, maybe this is a catalyst that will allow us to start considering allowing telecommute work.
Its open source, and the code is trivial. I'm sure it can be patched.
Write a new AJAX based replacement for phpMyAdmin :)
I'm currently leaving my position (lead developer at an e-commerce site) to start my own company, and have been looking for a part-time job to do just so I'm not working alone 24/7. But I always telecommute. If you can remove that criteria, I'd apply.
[You've convinced me.](http://www.reddit.com/r/PHP/comments/dcm90/three_days_ago_i_asked_rphp_for_help_picking_a/) Thanks for the help, I credited you for it in the readme file.
If the data is something that is not an array your code is either a jQuery-like wrapper or you are doing something terribly wrong. In normal cases you would either get an empty array or something null-ish/falsy so using empty() should be enough. If you have a newer PHP version you could implement a similar syntax with closure: function each(&amp;$a,$f) { if (!empty($a) { foreach($a as &amp;$r) { $f($r); } } }; And invoke it like this $foo = array(1,2,3); $sum = 0; each($bar,function($item) use(&amp;$sum) { $sum+=$item; }); Not as elegant as foreach and maybe a little too JavaScriptish but saves a little duplication. Note: I'd really wish that I didn't have to use the "use" keyword.
Awesome, let us know about development. I've developed a few frameworks, and get a lot of flack for "why build a new one when there are tons out there". I say goof riddance to that, the more the better. Look at it as a good opportunity to learn some new technologies. Keep us posted!
If you're using APC does that mean you're using Apache/mod_php too?
Your test controller is wide open on a default install. You're also using PHP5-only syntax but using the PHP4 mysql extension instead of mysqli.
 function check_array(&amp;$array) { return (isset($array) &amp;&amp; is_array($array) &amp;&amp; count($array)); } Would this not do what he is trying to achieve? Also, another question: could you (or anyone feeling helpful) explain the purpose of using the ampersand reference character in the scope of that function? 
&gt; Your test controller is wide open on a default install. I literally *just* changed that. &gt; You're also using PHP5-only syntax but using the PHP4 mysql extension instead of mysqli. [Correct](http://af-design.com/blog/2009/01/30/php-mysql-vs-mysqli-database-access-metrics/) :) The nice thing is, the Database class makes my calls completely engine agnostic. I can write a new version of the class for a different DB engine and swap it out as needed. I've been planning to do this to add SQLite for months, I've just yet to get around to it. I may in the future rewrite DBRecord to use PDO, but at this time it's not something I personally have a need for as DBRecord already sanitizes input and I personally haven't needed the kinds of optimizations that PDO provides.
Peach Pit, like the restaurant in Beverly Hills 90210? :/
Or [the publishing company](http://www.peachpit.com/index.aspx). Thankfully it's spelled differently.
The speed difference is negligible, I'd be more concerned by the loss of new functionality in the mysqli extension.
Can you point me to some examples? I've never run into any limitations with the old system, so I'm curious what I'm missing besides prepared statements.
The `&amp;` will shut it up if `$array` doesn't actually exist.
There was an ad on my local CL recently... 30-40 hours a week was considered a "part time starting point". They also wanted somebody fresh out of school that could go full time eventually... Did I mention this was "a really amazing opportunity"? _\*Sigh\*_
Dude, that looks really awesome! Too bad I can't relocate now (wifey just started school). If not I would definitely apply, love cycling too so Boulder would be perfect. Good luck with the search :)
Typically, search engines that search _other_ sites separate the scraping and the searching. You would have a background process periodically scrape the target websites and store the results in a local database, then your users would just search that database. Doing it any other way will be _very_ slow.
Sounds like you already found a solution in phpThumb, so I won't bother digging up any code or trying to debug this, but I can assure you 'ImageCopyResampled' certainly supports this. I've written this same code before.
I never could remember either, but it's all started to stick pretty solid since I got a 9-5 working with PHP though. Using it for eight hours a day five days a week does wonders for your memory :)
You should be reading the API docs at least once anyway. AutoComplete won't tell you about the potential pitfalls, restrictions and side effects of the method you're about to call - which could bite you in the ass with some edge case later.
Hi! I take it you're here as part of the recent emigration from digg! Welcome! Just so you know, people here are (generally) pretty good at spotting jokes - including sarcasm and puns, and don't typically mark them with things like "/s". You can feel free to just put the sarcasm straight into your post!
Try looking up memcache, I'm not a hugely advanced programmer myself but it seems to work fine for that exact quandry. It'll let you cache any type of data for easy recalling later, you just need to set and call with a single key.
OmgIknorite! Had never used namespaces in PHP. Decided to read up on them as I want to use them in a project I'm starting... Fucking near vomited all over my keyboard when I saw they used backslashes. Backslashes are like profanities - you can't just *use* them all willy-nilly. The invoke a different path through the brain. I worry every time I type a namespace or full class name that I'm breaking something - it's so ingrained that BACKSLASH = SPECIAL BEHAVIOUR.
I also like the consistency with return values. One function returns 'null' on failure, one false, one -1... (They're generally consistent within a 'class' of functions - I think most string functions are the same, but as soon as you move into something else... Who knows.)
Memcache (as T3hPuff0rx mentioned) is a good idea, might also consider simply sending the results to the client and using a combination of HTML5 and JavaScript to store the data locally and manipulate it there.
Wow. I wasn't aware that log was available online. You are indeed correct, sir. "fucking retarded" is really the only way to describe it. Oh, and the rest of your points are completely correct as well. Upboat for you.
&gt;cannot be a 100% telecommute grrr, dammit!
Rather than re-invent the wheel, might I suggest you use an already-existing, robust, feature-rich web crawler, namely [nutch](http://nutch.apache.org)?
In the example you gave, you would just use javascript to sort the fields. If you want to do more than just re-order the results, can you give an example of the data, size and how long you want it stored for?
Why not keep the data directly inside $_SESSION?
You talk about saving data from webscrape, and THEN about saving the searches people do... well which is it? Those are two totally different things. For saving search engine data, I recommend a real search engine such as SOLR/Lucene and the like. For saving searches, I would just use memecached or sqlite on a ramdisk and cache whatever you need. 
This does not work well with paged results (e.g. displaying only the first 20 results), and with Javascript being disabled.
Depending on how much data we're talking, javascript is still not totally out of the question for performing pagination. If however, there's a very large amount of data and javascript is not an option I'd be storing it in the db using a key stored on the session and a timeout noted in the db table.. Run an hourly cron to clear out old data. If performance becomes an issue, then start to focus on a memory tradeoff solution but there's a pretty good chance the db solution will be sufficient unless the site starts to see huge traffic numbers.
It's actually not that bad of any idea, just use a MEMORY table rather than a MyISAM or InnoDB. Or locally in a sqlite database. If it's tons of data, use a key/value store like memcache that others have mentioned.
Forums are something of the past decade. Go to stackoverflow for decent problem solving. This subreddit is intended for news relating to PHP, try r/PHPhelp for code problems.
Forums are great for learning. Places like SO are more for question/answer. The best solution wins. Forums are still widely used.
You'll hardly find forums in any programming community except PHP. It's sad really but it's one of the things that keep me using it. I like the sense of community and other languages think mailing-lists are the solution for everything.
Use IRC.
stack overflow is great if you need a quick and direct answer. But it can be great to read and or participate in programming conversations. You can usually get more fruitful answers in a forum as people participate out of interest, people in a forum tend to get familiar with eachother and actually want to help eachother. Members of places like reddit or SO just want to quickly spit out the answer so they can prove they know everything and start calling other people noobs.. it's all for the karma baby.
Nothing wrong with karma if it is helping someone. That's the real power of StackOverflow.
I still use forums, and the ones I'm a part of are still very actively used (the community areas, *and* the Q&amp;A areas).
I'm biased toward forums as I own devnetwork. That being said I think forums need to evolve. SO is not that evolution, merely a question and answer site that had big names behind it. Not to say it isn't useful, just not unique or special.
Bad idea. Depending on how you're handling sessions this will cause massive slowdowns, data loss when the browser is closed, or the same data duplicated in countless sessions.
Thanks for the assumptions, but you're wrong. I've been a Redditor more than twice as long as you have. Just so you know.
I heard that cookie will be stored somewhere temporarily also, and this function won't delete it. But I am not sure about. If anyone know more details about this [temporary cookie](http://qualitypoint.blogspot.com/2009/07/deleting-session-cookie-in-webbrowser.html) you can share. 
Can you elaborate on this? I don't mind that the data is lost during a browser close.
data would be a field for price, manufacturer name, product name and well thats it. for amount of data i don't see more than 50 rows occurring.
imo the best way to do what you want is client side. You're only pushing a small amount of data plus the javascript code itself. [Tablesorter](http://tablesorter.com/docs/) does both the column sorting and the pagination, rolled into one small jquery library. No temporary tables, messy cron jobs or bloating of the session data. The only downside is the requirement of javascript which isn't a big ask for a modern web application.
I value my sight.
i was literally just looking at that. thanks for the advice! 
From the description it seems their salary range is for jr developers.
I know I'm going to be buried into oblivion, but seriously PHP does not need dependency injection. You are over-engineering. Go back to Java. PHP is NOT java.
This looks like a neat project, but I'd love to hear your objections to having one. Is it because PHP is a dynamically typed language and you can just pass anything into an object?
Yup. Give us a use case for the framework.
reason i wrote this is because i wanted a nice way to pass dependencies into my classes. i didnt want those dependencies to exist in a global state (inside the class) because of testing,etc. i figured this provides a nice simple syntax of maintaining dependencies within classes.
Hmm. If someone is unwilling to pay $20/hr for entry level, they should consider outsourcing and all the horrors that entails.
I totally agree.
Why don't you want the dependencies to exist in a global state?
dependencies need to exist in somewhat of a global state (by this i mean they need to exist somewhere: a container/locator/whatever). however, they should not exists in a global state within the classes. in other words, classes should not have direct access to dependencies. see inversion of control. reason for this is: 1) makes testing pretty hard/nearly impossible 2) tightly coupled classes 3) potential for code to get messy quickly, refactoring becomes harder. 
I agree. Things you learn with Java or C# rarely fit well with PHP. Adding layers of indirection in a throw away PHP scripts doesn't feel right. Think PHP as a batch files. Do you see purism or layers of indirection in batch files, do you care? It's all about gluing things together. Sometimes you glue totally different things, but it works.
php is much more powerful than 'batch files'. it can be used like batch files, sure, but so can any other language. php can also be used as an OO language to run high functioning webapps/services. things you learn in java or c#? i think by this you mean oop design patterns/ideas. these can (and do!) fit nicely into php since it is a oop language. tldr: you can use php for simple scripts, but you can also use it to write a pretty nice high level application.
This is the first time I've heard of depency injection and it seems like something that would make a lot of sense in almost any app or language. I always pull the database access into it's own layer w/ separate connect info for multiple environments (dev/qa/prod) which accomplishes a similar goal, but I like the idea of having a control class that decides what objects can access what resources. Taking it a step further, I like the idea of extending that Container class for each environment to setup everything in it on a per-environment basis. Part of the app I'm currently working on relies on the twitter API, so for a testing environment, it'd be nice to just return dummy data rather than relying on twitter. I mostly utilize static classes like extendable namespaces for everything I do, so I don't know how it would work in that scenario (maybe have Container::initBook() hooked to a Book::init() method that's fired whenever Book is autoloaded?). Anyway, I always enjoy seeing how other folks approach problems like this, so thanks for sharing.
You can serialize an object into session, and then unserialize it later. Session works well here. $obj = new Person; $obj-&gt;name = 'Foozy Barzee'; $_SESSION['pObj'] = serialize($obj); // Later, in a different request $obj = (Person)unserialize($_SESSION['pObj']); And by casting the unserialized object back to the Person class, you've got the same object you had before. You can use the __sleep and __wakeup functions to add behavior the object should implement when it is put to sleep or woken up in this manner. Persistent objects have already been thought through in PHP, at least to this somewhat limited degree. http://php.net/manual/en/language.oop5.magic.php
You should check out what the guys at flow3.org are building
I'd be interested to see how well this performs in the wild. Having to reflectively parse comments every request cannot possibly be efficient and I wonder if you've done any sort of caching to prevent this from happening over and over, especially given how hilariously slow PHP's reflection is. I am, of course, assuming you're reflectively getting the comment blocks that you're using to emulate annotations. If you're getting them some other way, I'd be glad to hear what that is, too :) And all of the haters that see abstraction and run the other way, crying indirection and "get back to java!!!11!!one!!", you can just ignore them. It's that mindset - a purposeful and conscious rejection of accepted software architecture practices (either that or the people fighting abstraction are doing it as a defense mechanism in their ignorance of these practices and their unwillingness to better themselves) -that is one of the biggest reasons PHP developers and PHP itself get so much hate outside of the PHP community. Inb4 downvotes for brutal honesty.
You're on the right track; the idea is that you externalize the way you wire objects together. It actually makes more sense in other languages. Especially long-running stateful ones like Java or C# where DI is common best practice and the norm, really. Settings are stored in configuration files and then your various environments can configure your application as they need. The problem with PHP is that it is stateless. Request comes in, gets processed, done. PHP really wants quickies.. get in, get off, get out.. fast. The layer of indirection that DI adds includes quite a bit of overhead. And overhead is PHP biggest enemy. There's a fine line between developer performance (clean, readable, testable code) and application run-time peformance. Some of it can be improved by adding heavy caching, so you configure your object graph and then serialize it to disk. In languages like Java, where you have heavy JBoss applications (for example) that need a minute to bootstrap themselves via DI, it makes more sense. Once they're running, the objects are in memory and keep accepting requests and working them off. But with PHP you'd have the bootstrap overhead for each request. That all said, I'm a fan of Inversion of Control and Dependency Injection and use it in my Zend Framework based applications with a generous helping of intelligent caching.
thank you. with regards to reflection. yeah, i use php reflection and yes, it is lol funny how slow php is. ive got this framework running in the wild on some small sites (~2k uniques/day), and its fine with no noticeable preform issues. this framework has the ability to use configurations arrays, which are ugly, but are much much faster compared to reflection. if people show interest in this, i will make something that uses reflection at first, and then somehow caches the doc blocks into arrays for future runs. that is the next logical step i think. when i first posted this, i was really shocked at how much 'php is not java' feedback i got. your comments were reassuring to me. i also agree 100% with everything you said in the last paragraph. 
Have you profiled your applications to see what percentage of time the DI takes? Can you generate something like this, for me, perhaps? :D Server: 1x Xeon x5660, 2.8ghz, 12GB RAM Average Request Time: 500ms % Time spent in DI: 10% DI time: 50ms Or something similar? If you can't, I'll get around to doing it myself at some point, but it'll be at least two weeks before I have enough free time to pursue such a venture. As far as caching goes, that definitely seems like the next step, however it raises some other issues, namely the tendency and expectancy of changes in code to be immediately reflected without requiring any sort of build process. IMO, You could either force a build process or use file mtimes in your cache - both have their own (dis)advantages, so you might need to experiment. As far as a serialization format, json is probably the fastest that's built in, but you could do way faster if you built your own (which implies a C extension). Honestly, if performance turns out to be a big consideration, your next step after the caching would probably be to port to C and look to get it included in PECL, IMO.`
yah, i will start profiling this and see how long it takes. caching, with a build processes, kind of removes the simplicity / 'you only need a docblock'. i'll do that next, see how much of an improvement we get, and then try to simplify it. file mtimes makes sense, lets just hope it can be accomplished quickly. the more and more i think about this, the better a php extension starts to sound. 
Really? A DI Framework? I mean, look at this. DI essentially is: class foo { private $deps; function __constructor($deps){ $this-&gt;deps = $deps; } } It's just a fancy pattern and people feel strangely fanatical about it. I agree that it can make certain test cases easier, but then again the tiny benefit is shadowed by the obfuscated code, and containers? - they just add unnecessary complexity. I'll have global registry or getInstance over DI any time. Furthermore - environments where apps are running multi threaded is where DI make sense. PHP - single threaded. It's like trying to fill a car with an aircraft fuel, because *"it's better"* **tl;dr - DI is unnecessary in PHP. You get more spaghetti code, then the testing benefits. ** That being said - i'd absolutely love to be proved wrong or convinced that I too should use DI.
&gt; That being said - i'd absolutely love to be proved wrong or convinced that I too should use DI. I am not trying to be mean, but the following is going to tear your post apart. I am hoping it will convince you why DI is good. If I come off as cold, please note its nothing personal. &gt; It's just a fancy pattern and people feel strangely fanatical about it. Why do you think that is? Does DI possess some magical power that makes people go 'ohhh and ahhh', or, is it because DI is really useful and beneficial to the programmer? Think about that. &gt; the tiny benefit is shadowed by the obfuscated code, and containers? - they just add unnecessary complexity. I'll have global registry or getInstance over DI any time. Actually, this is exactly what global registries (aka getInstances) do, they add complexity. DI removes complexity. Read up more on 'inversion of control'. &gt; Furthermore - environments where apps are running multi threaded is where DI make sense. PHP - single threaded. It's like trying to fill a car with an aircraft fuel, because "it's better" This just does not make any sense. DI has nothing to do with threading. Stop making stuff up. &gt; DI is unnecessary in PHP. DI has nothing to do with PHP, nothing to do with Java, or any other language. It has EVERYTHING to do with OO programming. Since PHP supports OOP, then DI has a place in PHP &gt; You get more spaghetti code Again, the complete opposite happens. You get spaghetti code when objects start creating objects, pulling their own dependencies out of registries, etc. DI/inversion of control aims to remove all that so classes become LESS tangled.
My main thought here is, how does this really benefit a project? It doesn't really solve the "dependency" issue, you still need a "config" file (the dependency injection library you made) Now instead of having dependencies coupling issues at the "Book" level, it's at the "Container" level. Having a singleton/container sort of class is a good idea on a web project. Though all you really need is a public static factory function in the singleton to produce the "Book" object. 
The strength of DI is building objects from parts but in a feasable way. Take a class that holds news items and images for example. Both may need to have an HTML representation and a feature that allows tagging. However, news items might have a heading and a text data field while an image might have a path reference to the file. Of course this can be solved by creating interfaces for every function block you need on an object. But it will complicate the code as you probably will have to update the existing structure to check for this new dependancy. DI has nothing to do with multi threading. It has to do with creating complex objects from simple single elements of functions. Extending the news object to be capable to comment or to have an author on the news item as well as an author for the image, for example. With the proper classes set up you would just add an @-Tag and have the methods for that available. (in other DI capable PHP frameworks you would just configure the object in an XML file) You will get even less spaghetti code as simple features are capsulated more strictly. I don't get where your problem is? Would you rather call a database and create the HTML output in the same file because it gets more obfuscated if the HTML is put in a template and the data retrieval is unknown to the controller that is creating the output from both?
Your solution is a meta-framework that relies on reflection. &lt;sarcasm&gt; Clearly a superior solution. &lt;/sarcasm&gt; &gt; Why do you think that is? Does DI possess some magical power that makes people go 'ohhh and ahhh', or, is it because DI is really useful and beneficial to the programmer? Think about that. Clearly you haven't been around for the Cargo Cults of "Agile," "Everything is a platform," "Everything needs a singleton factory," "NoSQL," etc. Young programmers do things because they think that they are cool. You cite inversion of control, however I don't think you understand how it applies to object oriented programming. The dependency inversion principle is a farce. &gt; You get spaghetti code when objects start creating objects, I smell some "every class needs a singleton factory" Kool-aid on your breath.
&gt; My main thought here is, how does this really benefit a project? quick answer. inversion of control. it makes the classes much easier to test. when unit testing, it will ensure that you are just testing the unit, and not how the unit relies on the dependency. 
Lets hunt down that Rasmus jerk and beat him with socks full of nails! No...seriously....
I agree!
The OO interface to mysqli is crap. Reminds me of 90's era Perl. Edit: I still upvoted you because mysqli can actually bind parameters, whereas the mysql functions can't.
I think that's why we have namespaces now. We can actually get a "str" namespace.
Completely fucking retarded.
i am not arguing for reflection, we've already stated before it was slow. i am just trying to defend di here. hell, i am not even trying to defend di here... i am just trying to say 'hey, di could/can work in php guys!'... yes, many of these terms are over hyped buzz words pieces of shit. di has be around a lot longer then all your examples. but of course, as with any term, you can argue the buzz word battle and probably win. everything has its place, nothing is a silver bullet. 
I like it, because when i am developing stuff thats 5.3 specific, and if it gets deployed in a 5.2 environment. its easy to install the PEAR packages. it's handy nonetheless. 
It depends entirely on the target environment. When you control the servers your application runs on, PEAR is pretty awesome (if sparse compared to, say, CPAN), and there are some invaluable PECL extensions. When you're building an application designed to run on shared hosting, you're out of luck. As you've pointed out, you basically have to bundle PEAR classes with your own app, as you can't guarantee they'll be present and meet a minimum version requirement. Relying on any PECL extension is unwise, I don't know a single shared host that is willing to install anything that would make the configuration of one server not match the configuration of any other.
When I worked at an agency, where we had complete control over all client environments, I used PEAR a lot. Like, A LOT a lot. Packages like Cache and HTML_QuickForm really made development quick and help with the pain. That said though, once I left the agency I quickly ran into issues where the host was missing a package which made deployment complicated. Now, I don't use PEAR at all just to avoid having to explain, again, how to install PEAR modules. I know you can include the classes manually but for something as simple as a contact form with fancy validation logic it seemed like overkill IMHO. 
It doesn't seem worth the trouble to me.
I use PECL a lot but PEAR is full of horrifically poorly coded packages.
If you're using sessions to store the data, then have 10 users search for the same thing you end up with 10 copies of the same data in session memory. Plus if you're writing sessions to disk, you now have 10x the disk overhead which slows things down, especially under heavy load. Your best bet is to use Memcache to store the search results, and then use a hash of the search URL as the record name. Something like: $searchRecordHash = sha1("http://www.google.ca/search?q=bacon"); $searchCache = $memcache-&gt;get($searchRecordHash); if(!is_bool($searchCache)) { // $searchRecordHash exists, and it's data is now contained in $searchCache }else{ // The $searchRecordHash doesn't exist, fetch the search data and store it } That way you are only caching a single instance of a search, in a single location that can be shared by multiple user sessions with minimal overhead. If you'd like to use memcache, but give every user their own personal cache, you could change $searchRecordHash to: $searchRecordHash = sha1($_SESSION["userGUID"] ."http://www.google.ca/search?q=bacon"); One thing you should also consider when using Memcache is how long you want the data to stick around for. Memcache can be told to keep records indefinitely (they will be kept until Memcache is restarted, or until it runs out of memory and starts deleting oldest records first), or you can set a expiration time. $memcache-&gt;add(&lt;record name&gt;, &lt;data to store&gt;, &lt;compress flag&gt;, &lt;expiration&gt;); Hope this helps, and if you need more information on Memcache you can find it here on the [PHP Site](http://php.net/memcache). And if you still really, really want to store your data in user sessions, at least use Memcache as [your session storage engine](http://www.dotdeb.org/2008/08/25/storing-your-php-sessions-using-memcached/).
Thanks for the info on Java /JBoss. I haven't worked with Java-based server programming before, so I didn't realize Java didn't tear down on every request, so the basis for the "php isn't java" comments makes more sense to me now. That being said, I don't know if I quite understand the overhead issue in general. Ya how ryanto's framework does it currently, reflection via the source comments, will add a lot of overhead, but if instead you hardcoded the info inside of your container ie: //Container.class.php class Container { public static function initBook() { Book::$db = DB::getDb(); } } //book.class.php class Book { public static $db; public static function init() { Container::initBook(); } } that really doesn't seem like much of a burden is it? Unless you were instantiating separate db connections for each object (which would be crazy to begin with).
I think the main advantage is now instead of having each class decide how to get at resources, you have one gatekeeper container that controls everything. In an app I'm working on, we access 2 different databases. At some point they'll likely merge into one, so when that happens, I'll have to update all my references to "PDB2::query()" to "PDB1::query()". If I'd utilized this concept, I'd just have one place in the container file where I needed to change PDB2 to PDB1 and I'd be set.
Love it! Great logo, great play on the reddit php forum. Hopefully the r/PHP community will accept it as well. I'm CodeIgniter guy myself but tomorrow I'll give your framework a try! 
:D Let me know if there's anything you're confused about so I can focus on it while writing documentation. I tried to put as much info as possible into comments and phpdoc entries, but it's hard to know what's missing when you work with it all the time. I have a background script that throws up a growl notification whenever someone sends me a message, so just send me a PM or reply to here.
Your #2 really bothered me as well. With PHP 5.3 I was able to [create a solution](http://snipt.net/cboden/typecast-callback?key=c1b373f051f6ddefdec3430f719e3bcc). 
Thanks, for the help. I'm interested in seeing how it works it comparison to CI. What frameworks have you been working with? Did you base phPit off a particular framework? 
That's a nice trick. I forgot about __invoke(). Thanks for this. The magic of PHP I find is one of its benefits (though many might disagree due to testability, but testability doesn't always mean elegance), and this is a clear example of that power. I will be sure to keep this around in my lib :P
Parts of it are based on ideas I saw in other frameworks and sites, but all the code is my own creation (except where otherwise noted). DBrecord spawned when I learned about ArrayAccess; right around the same time I was working on a site that we got from another developer who had created a very similar object for his DB access, but using getter and setter functions to manage an internal array. Adding ArrayAccess to it was a natural extension, but his implementation had some serious flaws. I knew I could do better. The Page class found its genesis in the same site. He had a template structure that did the same thing, but using includes for the start and stop. I realized the entire thing would be much more useful as a class, where you could subclass it and add layers of page content. The clean url engine came about when I was experimenting with CakePHP. I saw how they were doing it and knew I could create something more flexible. I know Cake wasn't the first system to do clean urls, but that was the first time I had seen the code for how it was done.
the zf autoloader has nothing to do it with dependency injection, it is an autoloader.
This is neat, TIL, thanks! 
Same here. Also the documentation of most PEAR packages is completely useless. PECL on the other hand contains lot of useful stuff, like DB drivers.
I guess "hardcoded" is the red flag for me. If you hardcode it in the container, why not just directly in the Book class. I suppose you could provide different containers, but now the environment has to pull in different files that each are called "Container", since Container is also hardcoded in your Book class. I find that limiting and potentially confusing when it comes to setup. I also avoid static methods and properties. They have their place, like a factory method, but I prefer to encapsulate state within each instance. And indeed, separate database connections wouldn't make too much sense, although it can happen. I like the way Zend Framework tackles this with their [Zend\_Db\_Table class](http://framework.zend.com/manual/en/zend.db.table.html); you can statically set a default adapter, which each new table instance will use unless you pass the connection in directly. Another technique is relying on a registry, although I'm not too fond of that as you need to keep track which parts of your app have dependencies on it. It also depends on what you're trying to configure. I find that Log facilities and database connections change more often than how my model layer is wired together. I'll often do something like this: /** * Accounts Table */ class App_Table_Accounts extends Zend_Db_Table_Abstract { protected $_name = 'accounts'; } class App_Service_Account { /** * @var App_Table_Accounts The Accounts Table */ protected $_table; /** * Get the Accounts table; * * Will instantiate as needed * * @return App_Table_Accounts */ public function getTable() { if (!$this-&gt;_table) { $this-&gt;_table = new App_Table_Accounts(); } return $this-&gt;_table; } /** * Set the Accounts table * * Allows unit tests to inject * * @param App_Table_Accounts $table * @return App_Service_Account provides fluent interface */ public function setTable($table) { $this-&gt;_table = $table; return $this; } /** * Find a user by their username * * @param $username * @return array|false The user */ public function findByUsername($username) { return $this-&gt;getTable()-&gt;findByUsername($username); } } So you have an accounts table that is used by the service layer (which is used by a controller). Essentially I'm hardcoding the table, but I'm providing getters and setters to allow injecting it for unit tests. The example is kind of silly because findByUsername() is so simple, but typically the service layer also has logging, an ACL, a user, caching, and whatever else, all of which can be mocked and injected for unit testing, but the "sane defaults" let it run out of the box. It seems like a good compromise between totally hardcoding everything or injecting an entire object graph worth of state all the way from the bootstrap. I hook in the various resources that [Zend_Application](http://framework.zend.com/manual/en/zend.application.quick-start.html) provides per the configuration and that's kind of it.
whos voting this shit up?
You could simply apply the Registry pattern to the problem. Which is some aspects overlaps with the DI. Registry::add('database', $database); And in the constructor public function __construct() { $this-&gt;$database = Registry::get('database'); } Although you could easily pass the database object in the constructor. Anyway, I hope you got the idea.
[Take a look yourself :)](http://code.reddit.com/)
WTF does it mean to "scape"?
scrape
ah ...
Roll your own template system ... [here is one](http://www.codewalkers.com/c/a/Display-Tutorials/Writing-a-Template-System-in-PHP/) that I use.
A few things after looking at the guide: * Kinda sad to see all the `Pie_*` classes when we have namespaces in 5.3 to clean all that up * Using JSON for config data seems like an odd choice (`APP_DIR/config/app.json`), since using native PHP would allow you to add logic if needed, and would allow APC/XCache to have the file pre-parsed for every request. You could work around this by caching the data from parsing the JSON file, but again you lose the ability to add any logic. * Lots of static methods! It seems like this always causes headaches later on down the road, especially when it comes to writing tests. Pie_Response::addStylesheet('css/foo.js'); Pie_Response::addScript('js/foo.js'); Pie_Html::pushThemeUrl(Pie_Request::baseUrl()); Pie_Config::set('foo', 'bar', $new_value); * The event system seems very limiting, based on the [docs](http://phponpie.com/guide/events): &gt; When an event named `foo/bar/baz` is fired, PIE attempts to find the corresponding event handler, by looking for a file called `handlers/foo/bar/baz.php` and expecting it to look something like this: &gt; &gt; &lt;?php &gt; &gt; function foo_bar_baz($params) { &gt; // $params is the array of parameters passed to the event &gt; } A good alternative might be something closer to a PubSub system like http://github.com/weierophinney/phly/tree/master/Phly_PubSub/. This is just a cursory glance, though. My thoughts could be completely bunk. (Edit: formatting)
Use a layout, i.e. flip it round, so rather than include a header/footer, include the main content... // Header stuff &lt;?php include_once 'content.php'; ?&gt; // Footer stuff Where content.php is created dynamically depending on where in the site you are...look at layouts in most of the major frameworks for more info..
Gosh it looks awesome.
The only way to securely encrypt something on the server is to require the user to enter a shared password when viewing. If you store the decryption keys on the same server as the data and don't require a password for the keys, that means anyone with access to the box can decrypt the data. If you are using symmetric key encryption, the user would need to know the password to read to write entries. With asymmetric encryption you could encrypt with the public key and then have the private key stored on the server with a passphrase. The user would have to enter the passphrase to decrypt the data, but not to encrypt it. You might think of taking a master symmetric-key password and encrypting it for each user using their password. You could then decrypt the master password with the user's password for each session, however this requires that the master password be stored in the clear so it can be encrypted when users sign up. Any sort of scheme to separate the password and the data would cause you to venture into the land of not just data security, but system security.
Exactly. I'm specifically using memcache to store session data, which includes the plain-text password from the user. This way it never sees the disk, but I have it for the duration of the session. I then use the password to encrypt another key, which I then use to encrypt data, this way I only need to re-encrypt one thing if the password changes.
SELECT column_name name, column_key keyspec, extra FROM information_schema.columns WHERE table_schema = '{$dbName}' AND TABLE_NAME = '{$tablename}' That gives you pretty much everything you want to know about the columns in the table. Is this what you were looking for?
I don't understand. Dependency Injection is a useful technique regardless of the language. It makes code more testable. How does that change from Java to PHP? Unless you meant DI *frameworks*. In that case, I agree, they are unnecessary. DI isn't a hard enough concept to need abstraction.
if you can't figure this one out, please don't pretend you're a good PHP coder. preg_match() is what you're looking for.
I am definitely burned out by noob questions on /r/php today.
 $new = str_replace(array("\n","\t"), array('\n','\t'), $old);
The best way to secure something like that is remove it from the internet.
err I guess, I just used that (thx btw) but the string is still outputting line breaks where there is no "\n". I mean, is there no way to output a string where it can just output special breaks as characters?
preg_match to remove the extras. You can also use explode and then remove the empty elements in the array.
Is it possible that there are carriage returns ("\r") in your input too? Those could be causing your newlines even if all newlines were replaced.
You got it, thx very much man. I've solved the problem: it was erroneous carriage returns. I rewrote the file with them replaced: &lt;form action="" method="get"&gt; file: &lt;input name="file" type="text"/&gt; &lt;input type="submit" /&gt; &lt;/form&gt; &lt;? if (!empty($_GET['file'])) { $file = $_GET['file']; $file_contents = file_get_contents($file); $fh = fopen($file, "w"); $file_contents = str_replace("\r",'',$file_contents); fwrite($fh, $file_contents); fclose($fh); } ?&gt; I guess I was hoping to learn something today like how to read a file or string with these special breaks formatted as characters where perhaps I learned that in the future I will have to look for them specifically with preg_match or str_replace or what have you. Either way much thanks.
-.-
github
I've been working on something similar for my website - a completely file-based system where the pages are markdown text files. It maps uris to files, caches full pages and provides a navigation helper that builds a multi-level nav based off the directory structure for pages. Well, I had been working on it. I was in the process of rebuilding my prototype (at http://rossmasters.com) and hilariously managed to `rm` the source. Of course I had no backups. I cried. However I'm re-rebuilding it on Sundays with some other ideas in mind. You're using Smarty which probably overrules this problem but the main thing I wanted was that the user only had to edit a single HTML file to theme the site and maybe edit an ini file to add extra links. But yeah, keep working on this - I've no idea if there's demand for it but we obviously have similar ideas so that's two users :) Edit: Hello there person who's trying to hack the [countdown script](http://rossmasters.com/countdowns)! Yes I escape queries and html entities, hope you can find something else :)
It depends on how often and who accesses them - I was working on a journal system which would optionally encrypt entries with a user password that had to be entered on each login (it wasn't stored, thus anyone on the server wouldn't be able to decrypt them without capturing it by other means). If possible you want to enter the keys "on demand" (when you want to read the entries), however I don't know what you're building so it might not be possible.
gitorious Supporting FOSS by letting you have their code. SF and Github are posers.
&gt; and hilariously managed to rm the source. *...Dear God!*
Yea! That sounds like exactly what I'm doing. There is a base template file. I have a config file, but right now the only values in there is site name and version number. In the future, I want to impliment database features, ftp features, etc. I like the layout of your site! One of the appealing things about my system is that the theme will be fully customizable, but in the future maybe different themes can be installed and you just have to edit the config file? Just something I am brainstorming. You can see the work in progress I am doing of redesigning my site using the system: [pintsoft.com/redesign](http://www.pintsoft.com/redesign) The last two pages are broken, some directories are open and a hacker could get access to them, etc. There are still some things I need to tweak before I upload it.
I thought I was rm-ing a symlink. When I realised I should have been ulink-ing it I instantly facepalmed.
&gt; I like the layout of your site! Thanks, I really should get around to porting it to be presentable in more than just Webkit though (and get rid of the stray HTML5 tags) :) Configuration for themes sounds like a good plan, I try to minimise configuration where possible as I tend to get carried away with an onslaught of options :)
Now, now, there's nothing stopping one from using both Github and Gitorious. SF can fuck right off though.
it's not sad since namespaces in PHP are fucking retarded json is odd, but so is native php. just use INI files. Light weight, easy to read, parse it with Zend_Config_ini and store that into APC. The static methods defeats the purpose of the framework altogether it would seem. It removes any sense of flexibility whatsoever.
Add to pros: * Will make technology swappable - ability to change RDBMS, caching layers, etc. easily &gt;i don't like taking logic out of the code, hence I don't like annotations (at least for something like this) personal prejudice &gt; isn't the dependency injection a depency of its own? yeah, so? You can abstract out the DI if you want and inject that, but there's no point. &gt; won't DI and AOP make it harder to trace code? Not if you have at least decent error handling. A stack trace will certainly tell you where the error is and the idea is that your injected components should have pretty close to complete code coverage so you can rely on their stability.
I haven't worked with DI that much but your asked for input. &gt; is [it] worth trading new Foo for Foo\Bar::createInstance('Foo') or whatever How is that dependency injection? That looks like a factory to me. &gt; i don't like taking logic out of the code, hence I don't like annotations (at least for something like this) I don't see annotations being a problem if they are declarative. If you really don't like doc comments then could you use type hinting instead? E.g. class PDODatabase implements Database {...} DI::register('Database', 'PDODatabase'); function __construct(Database $db) {...} &gt; isn't the dependency injection a depency of its own? won't DI and AOP make it harder to trace code? How I imagine DI being most effective is if it wraps your code and passes dependancies in through constructors. That way all the injection really happens before your code is executed. I wouldn't like to have to reference the DI framework in my business logic. I imagine components would pass along dependencies to newly created classes. E.g. // TableManager is initialized by DI at application start up. class TableManager { function __construct(Database $db, Log $log) {...} function getTable($name) { return new Table($this-&gt;db); } } // Table is constructed by TableManager, no DI necessary. class Table { function __construct(Database $db) {...} function createModel() { return new Model($this-&gt;db); } } TableManager would be initialised by your DI framework and passed to your application. Your code interacts the TableManager/Factory rather than directly with the DI framework. The factory manually passes along dependencies when you need to create a table or model, rather than relying on injection. This way, you can rewrite the initialisation code to replace or remove the DI framework without having to change business code. The DI framework is now used to glue together *unrelated* components, rather than code which is tightly bound. It seems to me that to do DI right you should: * Have no public static methods. * Not initialize new object (using the `new` keyword) outside of factories. Symfony have open-sourced [their DI framework](http://components.symfony-project.org/dependency-injection/) if you are interested.
Smarty is horribly inefficient. There are much better options, including just using PHP as your "template" engine (as that [s]is[/s]was what it is to begin with).
Smarty is way too bloated. You should check out [Twig](http://www.twig-project.org/).
Check out [Lithium](http://lithify.me/) for a great AOP framework. It also has a "dependency injection" framework built into the base object (`lithium\core\Object`) that works pretty damn well. On annotations, there is an [RFC](http://wiki.php.net/rfc/annotations) up right now so I'm hoping we'll see that in a PHP release at some point. Doctrine has pretty a [good generic annotation handler](http://github.com/doctrine/common/tree/master/lib/Doctrine/Common/Annotations/) currently, but it's in user-land code.
How is it inefficient?
It's very slow compared to other things, such as [Twig](http://www.twig-project.org/).
I second this- twig compiles into raw php and is very fast because of it.
Have you taken a gander at the source code ever? And it's more than just the slowness, the syntax is retarded. You might as well use straight PHP with short-tags (or a stream wrapper that replaces short-tags with `&lt;?php echo some_xss_filter($msg);`, which I use now).
I'll look into Twig. Thanks for the idea! I didnt want to start a framework fight here, it was just an idea I had.
Technically so does Smarty. Smarty just doesn't produce the best raw PHP that it could and it's compiler is regex based (horribly inefficient). Though I won't use it, Smarty 3 looks like they wised up and moved to a lexer.
I certainly didn't mean to get into a framework fight either (I thought this was very civil, lol), I'm just lett you know that Twig is damn fast.
I've got my doubts about whether that RFC's going to get up, to be honest. It's a bit of a mess, and the fact it can be done (albeit slowly) in userspace isn't helping the argument for it.
&gt;json is odd, but so is native php. just use INI files. Light weight, easy to read, parse it with Zend\_Config\_ini and store that into APC. Better yet, skip the middle man and use [parse\_ini\_file()](http://php.net/parse_ini_file). No framework required.
I can't stress Twig enough. It's the end-all PHP template framework. In fact, I'm in love with it. [Read this](http://fabien.potencier.org/article/34/templating-engines-in-php).
Zend_Config_ini requires very very little from the framework and is a great enhancement to parse_ini_file(). Zend_Config_ini is one of the very few things I use from that framework (maybe the only thing?).
&gt;How is that dependency injection? That looks like a factory to me. Typically speaking when you utilize dependency injection you start calling factory methods in your code more, as those methods themselves are what initializes and injects the code into the new object.
Strong nay. I work for a fortune 30 company as a Java/PHP software engineer on our flagship product. The code base is old, massive, and consists of several languages (probably about 80% Java, 15% PHP, 4% Python, and 1% perl. For the Java side of things, one of our ex-architects decided to use AOP and dependency injection in the unit test framework. Complete fucking train wreck (along with every other project we touched). I don't know how AOP works in PHP, but in Java it seems to cause a great deal of pain (e.g. JVM crashes, IDE crashes, unexplainable weirdness). And best of all, none of the problems can be easily debugged because run-time debuggers totally trip over the AOP crap. Fuck that shit.
I personally don't feel any of the AOP stuff for PHP is worthwhile, so I'm going to focus on the DI stuff. &gt;the (arguable) fun in this is worth trading new Foo for Foo\Bar::createInstance('Foo') or whatever Yup. &gt;it will actually help create clean and stable code Yup. &gt;it will perform alright Yup. &gt;i don't like taking logic out of the code, hence I don't like annotations (at least for something like this) Me too. &gt;isn't the dependency injection a depency of its own? Yes, but that isn't the point. If you make it so the dependencies are created outside of the class then you can create instances of that class using different dependencies. As an example, I built a caching library that uses multiple backends- file based, sqlite, apc, xcache and so on. It also allows for all sorts of custom behavior. By utilizing dependency injection- where I place the dependent objects, in this particular case the storage engines, into place- I allow the developers who use this library to not only pick their own engines but even create their own without having to tweak my code. At the same time different engines have different options- a memcache engine is going to need a server, a filesystem engine needs a path, etc etc. This isn't unique to this caching library- while the class itself should be very similar (and I recommend using interfaces to define how those dependencies should look) they may need different pieces of information to actual perform their job. If you were to try and handle that internally to the class you'd end up with a ton of switch statements and some dirty looking code. So this may mean creating a few more factory functions, but each of those functions can now create objects that suite my needs much more closely without having to write extra code. &gt;won't DI and AOP make it harder to trace code? AOP probably will, especially as the most stable php libraries for it actually make you go through a different compilation step. As I said before, I just don't think it's worth it for php at the moment, and I probably won't until it's actually built into the core (which I don't see happening any time soon). DI, on the other hand, makes things much easier in my opinion. If there's a problem with a dependency it's easier to figure out because you'll only encounter errors with that particular dependency, and you can easily create "test" classes to dump in their place. If you're probably utilizing exceptions things get even easier. It's pretty late, and I'm pretty tired, but I love seeing conversations like this start up on this little subreddit of ours, so please feel free to poke me with thoughts or questions.
I will look into it. I kind of checked it out and it seems a lot like Smarty, so I don't think I will have any problems transitioning to it.
I've got my doubts about a lot of things happening with PHP; the recent argument over scalar type-hinting was horrendous. That's one of the reasons I stopped reading internals as of late.
Smarty is fine. I have a site serving 500k pageviews every day using smarty and no problems for the past few years. Sure others may be faster, but smarty is plenty fast enough if you like using it.
what file system? there is a good chance you can undelete
Most experienced PHP developers usually have their own framework that they have developed over time that they use to bootstrap projects. I know I have. Release your code, no need to make a formal project around it, just throw it up on Github or a similar site. I usually check out these types of projects and then incorporate any good ideas into my own framework. In my own framework, I have 30+ different classes as well as standard objects (String, Hash, Container for DI etc.). The key is to make your classes loosely coupled so that other devs can take parts of it and incorporate it into their own work. You should also document the source code and include unit tests. I think you should post your code somewhere, and I will consider doing the same as well.
&gt; However I'm re-rebuilding it on Sundays It happened what must be weeks ago, yeah right you can undelete. Unless he hasn't used that computer since.
To do this simply create the function, and execute your query using your standard database calls (mysql\_connect, mysql\_query) but, what you want to return is called [mysql\_fetch_array\(\);](http://php.net/manual/en/function.mysql-fetch-array.php) I guess ill give a example function getData($sql) { $con = mysql\_connect($server,$user,$password); $result = mysql\_query($sql); return mysql\_fetch\_array($result); } This will return a array for you to use (if you want to see what the array looks like I recommend the function print_r($array); If you have a multi dimensional array, you will need to loop through the result set and append them all to one big array, then return that. If you need help with that just ask :P Edit: heres how to store all the rows into one array while($row = mysql\_fetch\_array($result)) { $array[] = $row; } return $array; 
Beautiful. Thanks so much! It didn't occur to me to put the mysql_fetch_array right in the return statement. Thanks again!
Couldn't I do something like: foreach ($array as $row) { $data[] = $row; }
why would you want to move data to a new array ($data[]) when you already have it available in the $array array? Yes, you can do that, but there is no point in doing that
close, but with the mysql\_fetch\_array it only returns one result at a time, so instead we use while($row = mysql\_fetch\_array($result)) { $array[] = $row; } return $array; this will loop through until all of the data from the database has been added
you should use something like array_push($data,$row) as in array_push($stack, "1","2","3");
Well, I thought I'd need to do a foreach since there are multiple rows being returned... so I can output each row?
Somewhere along the way, I got hit on the head and started to prefer working with objects rather than arrays. If you're the same way, you'll be happy to hear that there is also the mysql_fetch_object, which works as you'd expect too. There are also a couple other fetches as well, so find the one that's right for you!
it all depends on the filesystem in use. ext2 will unlink it, ext3 will zero it, FAT32 will unlink it and not overwrite it until other data writes reach the end of the partition, NTFS will unlink it from the journal, XFS depends on the implementation (most will not zero immediately, but will allocate those blocks to reuse right away) etc. etc. quickest way to find the blocks is to grep your disk for a known string that you had in the code you deleted. something like: grep --binary-files=text -A 100 "&lt;?php" /dev/hdaX where X in hdaX is your parition (or replace with the partition) try foremost : http://foremost.sourceforge.net/
I worked with Smarty on 1 project. IMO, it added an unnecessary level of complexity, made all of the developers learn something new with no added benefit, and removed a useful functionality. If I remember correctly, at the time, Smarty didn't even support while loops, so we had to create a workaround. Also, most editors/IDEs don't have syntax highlighting for Smarty by default, so more work needs to be done on that front as well. The choice was made to use Smarty because it would theoretically be easier for designers/themers to work with Smarty that PHP templates, keep in mind we already had an MVC in place to separate content from functionality. The problem is we didn't have any designers or themers working on the project at the time, or any time in the future. It only made it more difficult for us developers.
For those of you downvoting me, I meant (assuming there is physical security for the machine) put the database on a machine that doesn't have access to the internet and can only be accessed through a VLAN by servers in a DMZ and block off all unnecessary ports. 
I love that reasoning. The syntax for Smarty is just as challenging for a developer as straight PHP syntax. Granted you cannot sandbox the designer in as easily.
mysql fetch array returns an array of 1 row. So you do that within a while and store all data to a new array if you need to return all of it.
This is my function for getting the full result in an array. I have a few similar functions for returning rows, columns etc. Prerequisites: define('DB_ORDERED',1); define('DB_ASSOC',2); $db = mysqli_connect($host,$user,$password,$dbname) function db_getAll($db,$sql,$fetch_mode=DB_ORDERED) { $res = mysqli_query($db,$sql); if($res) { if($fetch_mode==DB_ORDERED){ while($row = mysqli_fetch_row($res)) { $aRes[] = $row; } } if($fetch_mode==DB_ASSOC){ while($row = mysqli_fetch_assoc($res)) { $aRes[] = $row; } } } if(isset($aRes)) { return $aRes; { return false; }
&gt;SF can fuck right off though What's wrong with SF?
I really, really recommend you a marvellous book about DI, you will have a really deep understanding of what is DI and why it should (or not be used). Without some decent background knowledge it is impossible to make a good decision, based only on few short (but still sometimes valuable) tips. http://www.manning.com/prasanna/
Or Blitz, which is its own zend_extension http://alexeyrybak.com/blitz/blitz_en.html Blitz has all the pros of twig, is almost 3x as old (more stable), actively developed, and is **faster than raw PHP templates**.
Personally, I like grabbing all the data in one pass and then processing it separately. This means using something similar to what others have said: while( $row = mysql_fetch_assoc($rs) ) { $results[]=$row; } ... foreach( $results as $item ) { ... } This may be less efficient than processing the rows in place, but it keeps data retrieval separate from data presentation. Most of the time, all my data retrieval and updates are in their own functions (I usually don't mess with classes.) I haven't done it much yet, but I also like the idea of having a query function that is as database agnostic as possible. I know it's not completely possible with different SQL syntax and capabilities of databases, but it would be nice to be able to switch from mysql to postgresql, for example, without having to search and replace dozens of files. It's also less of a headache typing this a thousand times: $foo = query("SELECT * FROM bar"); instead of something like $foo = Array(); $rs = mysql_query("SELECT * FROM bar"); while( $row = mysql_fetch_assoc($rs) ) { $foo[] = $row; }
Shared hosting that let's you have a shell usually supports PEAR pretty well. I've used it on bluehost for instance. I BELIEVE I have used it on 1and1.com and dreamhost as well but not positive. But I agree that when your customer has some random host it's sometimes hard. However, it's really not that difficult to zip up your dev pear environment and deploy it into /"websiteroot"/lib for instance in your codebase and call it a day. Your exact module versions should probably be in your code repo anyways. We are spoiled with easy deployment on php so even that feels like too great a step for some. 
At some point learn PDO or another database abstraction object. http://php.net/manual/en/book.pdo.php It's the preferred way to do things now (along with prepared statements). 
I still don't understand why anyone would use the native mysql php functions in 2010.
TWNMPHPF: the world needs more PHP frameworks.
A serious question. &gt;The core principle behind it is that the user is expected to fork the framework as a starting point (a boiler plate, if you will) for their site and tailor the framework files for their needs. This isn't something like Joomla or Drupal where your files are kept separate and you can upgrade the backend later on – once you fork it, you're responsible for merging updates yourself. Why is that better that separating the core from the application specific data?
I think I'm on ext3 but it could be ext4 :) I did try to use foremost but couldn't figure it out. I also have a strange number of sda*n*'s and spent an hour trying to figure out which was used to do what. Eventually just accepted the loss.
I'm afraid I don't have a strong answer for you on that regard. I can think of a few weak answers: - Fewer layers of abstraction means marginally better performance. - It encourages the user to learn the in-and-outs of the framework and be intimate with just what is happening when a request is made, thereby increasing there skillset. - If there is a function of the underlying structure that doesn't work for you, it's a simple matter to change it. If the abstraction of the larger frameworks is something that you're looking for, then this probably isn't a good choice for you. On the flip-side of that, the framework itself consists of so few files that updating to later revisions is pretty easy.
What are native mysql php functions? Have they not been deprecated yet? :P
mysql\_fetch\_object* FYI: \\\_test\\\_ = \_ not _italic_
Why would anyone use this crapfest when good solutions already exists (I'm looking at you Zend_Paginator)?
Thank for this advice. I will host it and just see what happens. Like I said, the project is more for people making basic static HTML sites more than PHP enhanced sites.
Dang. I never realized there was so much hate for Smarty
I guess it's all just in how you implement it.
Coming soon to a DailyWTF article near you!
If you can't figure out how to do pagination on your own you probably shouldn't be developing. It's one of the easiest problems to solve. Also, crappy. edit: and yeah, this is a horrible implementation.
mvc is crappy? framework crappy?
this class has calls to $_GET[], wtf? this thing is really quite buggy. Zend_Paginator is a great example on paginating. 
1) Zend Framework components are loosely coupled and don't necessarily have to be used together. I have myself used Zend Paginator in a project with no other Zend code whatsoever. 2) Understanding != reinventing the wheel. Come to grips with this reality and you will become a better developer. 3) If you are doing this for a living, as I do, then you'll understand that the learning curve for reusable and recyclable code components - oh, like, ZF components - is usually smaller than rolling your own and you only have to learn to implement them once. 4) This implementation is crap tastic, primarily because there's absolutely no separation of concerns (frontend display code is actually *inside the class* (WTF!) - on top of which it uses pretty bad markup - and it's tied to a single data source, mysql), it's using the ancient mysql extension that shouldn't ever be used any more, several wheels are reinvented (ever heard of http_build_query()?), you use mutable public members that violate all rules of encapsulation, etc. etc. etc. If you want a serious analysis of exactly how bad it is, I can gladly provide that, but I get the impression it's going to fall on deaf, butthurt ears. 5) MVC is not a crappy design pattern; it may be overused and abused, but it's not crappy. What it does have, however, is a forced separation of concerns, which from your code sounds like something you really should look into.
Dude, you don't even understand what all the red lines appearing under the words you're posting mean. Why the hell would anyone use *code* you wrote?! Oh, and keep your snarky private-message insults to yourself, loser.
&gt; hummm, so I did insult you? I don't think so. [Let's see what the audience thinks, shall we?](http://i.imgur.com/2X5S1.png) &gt; But you did. Damn right I did. Get bent, spammer.
Wow, that is way too much code to do what they need to do. Have they ever heard of limit or passing the last rec id through get/session? God damn that's a mess.
Muahahaha, you've been coding for 17 years but it takes you over 100 lines for pagination and you have html in your class. Maybe you should quit being such a pompous asshole and listen to your piers. One other thing, buddy, when you post crap don't expect everyone to give you glowing praise. This code sucks, get over it.
If you're going to post shitty code keep it to yourself. **EDIT** Oh, don't PM me either asshole if you can't take the heat. Your message to me: &gt; another useless meanningless and inconsequent comment. I read your comments and well, it's not surprising. Your shitty code, for someone who claims to have 17 years experience, is very surprising.
Y'know, I was going to report you for spamming, but I'm not going to now. Because someone else did 5 days ago.
AOP in PHP is mostly academic and not practical imho
Oooh, ooooh, insult me too for barfing when I saw this code! Oh, and you've got 17 years development experience? So do I, but my code doesn't still look like that of a developer with just a couple months under his belt. Pay attention to what oorza is saying; it'll do you very well, and hopefully put a little umph behind your 17 years experience, because otherwise, most people would look at you with a blank stare thinking, "Seventeen years, and this is what he produces? Holy fuck. Next!"
&gt; I believe to be quite good at what I do - You have created a pseudo-generic pagination mechanism, but tied it to MySQL. - You didn't just tie it to MySQL, you tied it to the awful mysql extension. PDO. Know it, learn it, love it. - You are manipulating the query blindly. What if there's already a LIMIT clause? - Your sniffing of the $_GET paramater effectively hard-codes a name format. There's no reason for that, the name of the parameter -- no, screw that, the *value* of the parameter -- should be passed into the constructor. - Wait. What constructor? - You're inspecting $\_SERVER['QUERY\_STRING'] and using $\_SERVER['PHP\_SELF'] directly. Both can become bogus thanks to mod\_rewrite and can not be trusted. - Pagination is not always done via the query string. Sometimes it's done as part of the path. mod_rewrite. - rebuildquerystring is parsing a query string manually rather than using [parse\_str](http://php.net/parse_str). See also [parse\_url](http://php.net/parse_url) and [http\_build\_query](http://php.net/http_build_query) (which is not part of the HTTP extension, despite the name). - rebuildquerystring does not properly URL encode anything. At all. I'm pretty sure I could XSS the crap out of those links with a moderate amount of effort. - The results of rebuildquerystring are not run through [htmlspecialchars](http://php.net/htmlspecialchars). Again with the XSS. - Honestly, your best bet for putting page numbers in the URL would be to accept a string suitable to passing to sprintf, with format placeholders in the right locations. This makes both URL encoding and htmlspecialchars the user's problem, not yours. - Your function names are difficult to read because words in them are neither delimited by underscores nor camelcase. So are your variable and property names. The greater PHP community seems to have standardized on lowerCamelCase method names and underscore\_divided property and variable names. - You're emitting a table when just the links and appropriate CSS classes will work. - You're emitting error messages to the user that the user could not make sense out of. This is what exceptions or error codes are for. - Why are all of the property names of the paginator class prefixed with the word paginator? - You've declared your properties as public, but did not declare any of your functions public. While functions are public by default, this is poor style. Consistency. - Inconsistent indenting. - Inconsistent spacing. $foo=bar in some places, $foo = bar in others. Pick one and stick with it. - Property "paginatorbigjumps" takes a limited set of values. Because this code is intended for public release and reuse, it would be more appropriate to create an accessor method for this property so you can validate it. - The code comments are section delimiters, and fail to explain the reasoning behind any of the logic decisions made by the code. Some of these are minor things. Some of these are major things. But let's make it worse: - This is wheel re-invention. - It is overly complex for a simple inline solution. - It is not complex enough for a real drop-in works-every-time-for-everyone solution. - Your attitude sucks. You may be "quite good," but if so, this was a horrible example of your talent. The XSS bugs are unforgivable. 
They have banned certain countries to comply to US law, what some people don't like as it's not in the spirit of FOSS. [Link](http://en.wikipedia.org/wiki/SourceForge#Banned_countries_and_controversy)
I don't see anything wrong with using PECL in released code, as long as there's at least a readme file to say which extensions it's been built using.
Namespaces. I've always hated the ghetto-namespacing (underscores) that we had to use before and nearly all of my projects are running on 5.3 with 5.3 specific libraries now (Doctrine 2 and Lithium mainly).
I hate the implementation, but having concrete syntax that maps to a filesystem tree is useful, considering my ever-growing pile of classes...
I use both. Namespaces for PHP 5.3 and no underscores for those w/o. To see how I do it, see my answer at http://stackoverflow.com/questions/1836387/strategy-for-developing-namespaced-and-non-namespaced-versions-of-same-php-code/3641849#3641849
I admit, it's some of the worst code I've seen in a long time, and I deal w/ crap code on a *daily* basis. I feel sorry for the PHP community after seeing this ;(
Wow! IM me your paypal address and I'll give you a buck for such an *awesome* post!
I have the luxury of not working in other peoples environments so I *always* use namespaces, makes autoloading so easy and quick.
Also, the class demonstrates * an absolute lack of knowledge of encapsulation (e.g. public properties), * an absolute lack of knowledge of the benefits of code separation I would feel a lot better if the guy had said, "I'm a first year developer." If I ever find out he's making more than $60,000/yr, I'll cry.
Underscores, since I have to support 5.2.
Disregard money, acquire karma!
&gt; an absolute lack of knowledge of the benefits of code separation This is the worse of the two. Look, the class builds HTML. It's presentational. It has absolutely no business whatsoever running queries *directly*. By the time it's been run, earlier code should already have gathered the total number of results and the current, limited subset of them. In this particular case, the code running the queries and the code generating the HTML are not tightly intertwined, so it could be easy to fix. But the fact that it happened is disheartening. The fact that davidc2p nuked his account is also telling. He's more willing to run away than take criticism and fix his broken code. e: Oh, I just noticed it's actually his site. I wonder if he uses his own code. Time to go bug hunting! e2: I see no query strings here. I do see [SQL injection](http://www.webrickco.com/article.php?cat=450%20or%20cat%20=%2047%20or%201%20=%201) though. Yup, sloppy. I'm not going to try and break it any more than causing a hugeass select statement and a script timeout, I'm sure more enterprising and malicious individuals can have a ball. e3: I lied. "Hey, you got XSS in my SQL injection!" "No, you got SQL injection in my XSS!" /article.php?cat=448 /* " &lt;script&gt;alert(document.cookie)&lt;/script&gt; */ 
This, coupled with having class names that are 5, 6 words long in invocations are terrible: Vender_Module_ClassType_SubModule_Parent_Class::myStatic(). Glad that namespaces exist and PHP can step forward into the 20th century.
Search Engine Optimization Optimized. I like it.
I one-up the regular SEO ;-)
It seems like it is similar syntax. I'll play around with it tonight.
So `Foo\Bar::createInstance('Foo')` is not the DI itself but a factory which will internally make use of the DI framework? Would it not be better to pass along factories rather than making them static methods: `$barFactory-&gt;createFoo()`? It seems silly to implement DI and then hard code factory classes into application code.
ah gotcha, thanks dude!
Honestly, I can't say I've ever had a use for either.
It's tricky. It seems that all authorities try to stifle freedom in all kinds of ways at one time or another. I would like to fight it it just doesn't seem so straight forward but I sure think one should avoid organisations who help censorship.
i thing you say memcache. Example : http://haydarkulekci.blogspot.com/2010/07/session-memcache-bir-deneme.html Now WebSQL is being used and will be used.
I don't really see the difference, except in one case you're creating an extra object. The main reason I put things behind functions like this is that most of the time you're going to be injecting the same dependencies, and if you're calling a class more than once you don't want to continually repeat that code. Dependency injection is great for libraries that you're going to be using across applications- one application may use some dependencies while others use different ones.
&gt;I mean: It's clear how to do it, if the dependency is injected on instantiation but how would I inject "on demand", when a method is called. Can you explain what you mean a little bit more? You should be injecting these things on creation of the object, not when you're calling the method itself.
Are you basing everything off of that one example? A bad implementation of anything will suck, so I'm wondering if you've ever had a chance to see a good one.
Unfortunately I can only comment on my experience, and my experience is as described. Hope my comment wasn't misleading. In our case, our problem was that the product was not originally architected to be easily unit testable, and the AOP stuff was a really nasty workaround for the not-easily-testable bits (to insert mocks, etc...). For this specific scenario, I think its pretty safe to conclude that AOP is not the way to go (wrong tool for the job).
I wish you had said that in your first comment, rather than discarding an entire methodology based off of a single bad experience. Every time I see a programmer do that it tends to keep them back- I've seen people disparage OOP (just look at the drupal guys), source control (because they couldn't figure out how to properly merge), and so many other things. It's like giving up meat because someone burned your burger.
Consider studying or using [Zend\_Db\_Select](http://framework.zend.com/manual/en/zend.db.select.html), as it does pretty much exactly what you're trying to do.
Certain native extensions do things PDO can't, or things PDO does poorly. For example, PostgreSQL's bytea column type requires special escaping. The pg extension has a function for this, but there's no equivalent in PDO.
Holy god, the namespaces in PHP are bad. I no longer work with PHP, but if I did, I would move towards the namespaces, but they just look wrong. They make the code look bad and like you don't know what you are doing. That being said, I know why they did it the way they did. I would have preferred though that they had just moved to ver 6 and given normal namespaces, with the addition of closures etc, I believe moving right to 6 would have been fair.
You only have to prefix the `\` if you are inside of a namespace. * [Example without namespace](http://dev.girsbrain.org/php5-namespaces/index.php) * [Example with namespace](http://dev.girsbrain.org/php5-namespaces/index-namespace.php)
&gt; I mean: It's clear how to do it, if the dependency is injected on instantiation but how would I inject "on demand", when a method is called. Something like [this](http://gist.github.com/581927). I use a class property to define the default classes so they are easy to modify, but that's the general idea. edit: The unified constructor isn't necessary, of course, it's just how I do things.
While they did look a little wrong in the beginning, once you are over the point where you go like "wtf, backslash. Really?", Then it actually starts to look fine. 
&gt; Glad that namespaces exist and PHP can step forward into the 20th century. Now now, let's be fair; not many other languages had namespaces in the 1800s either.
I've switched over entirely to namespaces, except for a few projects that were written for PHP &lt; 5.3 that I do maintenance on. A lot of people say they dislike the backslash character because "it's already used for escaping", which is a stupid reason. That's like saying "we shouldn't use commas to separate arguments, since they're already used to indicate a pause in speech". The contexts in which they're used are completely different. The _only_ situation where backslashes cause a conflict is when you are storing the name of a class in a string, but the final component is a variable. In this case, you need to escape the final backslash to prevent it from simply escaping the closing quote. Example: $controllerClass = 'SomeCoolFramework\Controller\\'.Request::getControllerName(); $controller = new $controllerClass; Of course, if you're using double quotes, you'll need to escape backslashes all the time-- but you shouldn't be using double quotes unless you need to escape something in the first place.
I didn't like the way they looked at first either, but I quickly forgot all about it. I never did understand *why* I didn't like the backslash choice, other than the unconventional nature of it. I'm not sure why you say it makes your code look like you don't know what you're doing, though. Is there some weird backslash connotation here that I'm not seeing?
One idea that I picked up from the Lithium framework's coding standards is that you should utilize the `use` statement to avoid clutter in your code. The only time I use the fully-qualified class name is when I'm importing it with `use` or when it's in the `class Foo extends \blah\Bar implements \blah\Stuff` line. So: use foo\Bar; class Blah extends \foo\Stuff { public function __construct() { $a = new Bar(); } } Instead of: class Blah extends \foo\Stuff { public function __construct() { $a = new \foo\Bar(); } } See the very end of http://rad-dev.org/lithium/wiki/standards/coding for more info.
I don't really use either. I prefer to just use static classes instead. You get the same encapsulation benefits and it seems like less hassle and easier syntax. Maybe I'm just missing the boat though. The only time I can really see it mattering is if you were trying to work with a library or something and it would conflict with a class you already had. In that case, yes namespaces make sense, but for most projects this doesn't seem like it'd be an issue
[DataTables](http://www.datatables.net/)
Yes, PDO is horrible, there are far better abstraction libraries out there.
That's why when I start a new project, the first thing I do is create a version control repository. If it's not under version control it doesn't exist.
Static classes have absolutely nothing to do with namespaces and underscore-based autoloading.
Why the downvotes? Do you not think it's possible? lol
Sure, you can use them in or outside the context of namespaces or whatever autoloading mechanism you employ, but if the goal of a namespace is to keep all the functions and variables for a given resource/action/whatever in one place, then you can use a static class to do that too. I'm not talking like a standard class that you would generally use like $foo = new Foo(); Think like a class with a bunch of helper methods in it: class HelperBase { public static function redirect($url) {...} public static function formatDate($date) {...} ... } With proper autoloading, you now can just use: $date = HelperBase::formatDate($date); Wherever you need to access the Helper methods and since they are in there own class, they aren't polluting the global namespace. And a bonus to this approach is you can extend these classes and it's basically like extending a namespace. For example, HelperBase is never referenced on it's own. Rather, I have a Helper class that each client of the app would put their customizations into ie: class Helper extends HelperBase { public static function formatDate($date) { //uk client, so use D/M/Y, etc. } } I just have all of my classes in one folder, so I guess if you wanted to be able to organize that folder better I'd need namespaces to help out autoload, but for me it hasn't been a concern.
Pd_Make::name() is just a shortcut for a bunch of other calls. Think of it like 'new'. I guess the answer is yes, you need to use it. If you only want setter injection or constructor injection, there are classes available for that. Look in the Pd/Make/ folder to see. I rarely use Pd_Make::name(), just a few times. Anytime I need a new class, its wired/created by the PdInject command. For example, say your controller needs a new book. Instead of using Pd_Make::name('book), just have PdInject control the injection. This makes testing super super super easy. Controller { /** * @PdInject new:Book */ setBook($book) { $this-&gt;_book = $book; } } 
also, excellent comments on the array builder. I will add an 'oo' sort of way of doing it. 
Grouping together global functions in a static class makes sense. I agree on that. But using inheritance solely to group together related classes is just wrong. If I'm grouping together a bunch of classes that deal with PDF creation, there could be many different types of classes under that namespace. Renderers, formatters, etc. There isn't any one common subclass they could all have.
See my comment. It's possible to have *both*.
Not worth the effort.
There's [Zend\_Server](http://framework.zend.com/manual/en/zend.server.reflection.html), but the documentation is very sparse. You might be able to use that to make things simply automatically figure out what methods are available, so you don't have to build it all manually. e: A-ha! [Zend\_Json\_Server](http://framework.zend.com/manual/en/zend.json.server.html) seems to be where you might want to start, if you're going the automation route. /e But for the rest of your concerns, your framework of choice probably won't matter. Advice from a frequent consumer of RESTful web services: - Offer JSON and XML data formats. JSON converts well into native data structures in dynamic languages. XML will please those *weirdos* that prefer Java. To hell with SOAP, forget XML-RPC, avoid WDDX. - Implement errors as a proper HTTP error code first, and a descriptive body second. In XML, the root element could be, say, 'error', while JSON could be a one element object, also keyed 'error.' - For authentication, HTTP auth can be fine if the login is exclusively for the API, but consider using an API key instead. If the login belongs to a user, you probably want to use OAuth instead. The ZF OAuth implementation works well. Don't forget permissions / ACLs. - Binary data? POSTing normal form data works well. PUT might be more proper depending on what you're doing, but not all HTTP interfaces in all languages make things other than GET/POST easy. - Use HTTP response codes by default, but also allow the requester to fake a status. [The way Imgur handles it](http://api.imgur.com/error_handling) is pretty awesome. Again, not all HTTP interfaces react well to non-200 codes, like PHP streams which refuses to return the body of any non-200 reply. - Human readable documentation is a thousand times more useful than a WSDL file.
Perhaps [oauth](http://code.google.com/p/oauth2-php/) can be of use (for the security part)? Regarding responses, [proper](http://benramsey.com/archives/http-status-100-continue/) http status codes would be very useful.
Not worth the effort.
I use Aptana: * FTP Client - built in (called Connections - they're project-specific.) * HTML, CSS, and JavaScript editors built-in, as well as support for several JS libraries. If you don't like them, you can replace them with another Eclipse project.
If you must, use Netbeans, because it supports all of your requirements. Zend Studio is trash from my experience. It crashes constantly on large projects, had awful VCS support, and was generally very slow. Their debugging support was nice I will admit. But really, just use phpStorm. It's quite new and very robust. I had been using Netbeans for 3 years before converting, and I couldn't be happier. It does all of the things you requested, is much faster, and uses a lot less ram. Plus, the debugging support for php is excellent. http://www.jetbrains.com/phpstorm/
Eclipse definitely has something for all your needs. It's too bloated for me. I've seen an FTP plugin for Aptana, an I know it can do HTML/CSS, Komodo IDE (not free, Komodo Edit is but is probably missing some other PHP features you'd need) can also do all of these.
Seconded, I also use Netbeans but I've used the other IDEs you mentioned. A nice feature that Netbeans offers is DOM element id/class completion in your CSS documents. 
1. Install Eclipse, vanilla. 1. Install Zend Studio as a plugin. 2. Install the remote systems explorer plugin and learn to use it; you may have to install the FTP connectors separately... just look for it in the Eclipse marketplace. 3. Install Aptana Studio as an Eclipse plugin. In my experience, people who hate on Eclipse don't know how to use it properly, if they've ever used it at all.
&gt; uses a lot less ram. Who cares? Unused RAM is wasted RAM. Thanks for the downvotes guys, what I said was clearly false, inflammatory and didn't add to the discussion. Or, you don't like hearing truth to your misconceived notions. Either way, I appreciate it.
I have noticed that sometimes Zend won't show me what arguments a method will take, or in what order. It gets fairly annoying after a while. Also, finding pre-made syntax coloring for Zend was a huge PITA. I finally found a great one in Aptana (and in fact like their new default dark one even better) and ported it over to Zend, line by line. I'll take a look at phpStorm, and also read up on some more documentation for Netbeans to find this FTP support you mentioned.
I made a comprehensive guide. I'll rip it from the wiki for my PHP course (PHP: From Beginner to Pro) and make it available to the public... http://www.phpexperts.pro/a_good_php_ide/wiki.phpexperts.pro/PHPBook_Get_a_Good_IDE.html
Give PhpEd a shot - dosn't allow you to group the FTP connections but you can hide/show them as needed, and they're kept tree form, not dropdown so not that much clutter.
Is there a reason people want FTP access integrated into text editors so badly? Maybe I'm making assumptions about how you work, but if I'm understanding it correctly, this is a really dangerous practice, and not an advisable way to develop. Here's how I work. It may sound complicated, but once it's all set up, each new project takes only 2-3 minutes to set up, and the ability to instantly refresh and see changes, etc, is great. Also, it's strongly advisable to have a separate development environment from your hosting server, just in case you let an infinite loop or other bad code go astray during one of your 3am coding sessions. We all have them, and we all make mistakes. - Install [XAMPP](http://www.apachefriends.org/en/xampp.html) (windows) or [MAMP](http://www.mamp.info/en/index.html) (mac) - Set up virtual hosts for each project, using something like: projectname.localhost - pointing that in my hosts file to 127.0.0.1 - Edit with my editor of choice, usually Notepad++ because it's so lightweight - Now I can refresh / see changes instantly, no FTP shenanigans required I also use Subversion, and the Windows client, [TortoiseSVN](http://tortoisesvn.tigris.org/) for version control on my local development. I never FTP anything up to the server to test it for the first time. I always test it on my local server first, and I never overwrite what may be an active file with a brand new one. I only FTP up when I'm happy with the current "build"... I use Filezilla for that, but of course anything will do.
If you want to edit the files live on the server, use Netbeans or Aptana... Zend and Eclipse have clunky interfaces when working on live files on a remote server. Also, you really should be using sftp and not ftp. Aptana's free version didn't support sftp (only ftp) for more than 30 days.. not sure if they changed that yet or not. Netbeans you have to add the sftp key to your trusted keystore or it bugs you about connecting to a self-signed key every time, but it works great after that. That said, consider using a source control... with that in mind I use Eclipse and subsclipse for SVN integration but I'm even thinking about moving to netbeans still since they also have repository integration. 
I do the same thing, only I use Eclipse to do my editing. Editing on the production server is a stupid idea.
With DW, you have local copies saved to your HDD that mirror the structure of the live copies. So, I work with the offline copies, and tab over to FF that's looking at the local copy with XAMPP. If I am satisfied, I right-click on the file in DW and upload it and ta-da! Bonus points since I have 3 monitors, so no tabbing is done other than to focus and hit F5. The big advantage to having everything integrated in one place is I don't have to follow along in my separate FTP client to my current working directory. And in DW I can switch between sites and file the file I want to work with in seconds. It's a small thing but it keeps my mind at ease. Thanks for the input, though.
So you're saying the FTP features of these IDEs won't let me work directly with offline copies, and upload when I wish? I'm not too sure about editing live files!
Well, once nice feature of filezilla is that if you choose "edit" within Filezilla on a local file, it'll sit there and "watch" to see if you save it. Next time you tab back to Filezilla, it'll say "hey, this file has been modified! do you want to upload it?"... and you can choose to. I get that this may not be your ideal solution, just throwing it out there. EDIT: Also, you should really still consider using a version control system if you don't already!
I found that Aptana SUCKS for php for some reason. (tried it a couple years ago) It kept crashing constantly and doing weird things like turning all black, and the cursor would quit matching up with the line i was on when highlighting. However, I use it for doing adobe AIR, it's great for that.
Try [Komodo Edit](http://www.activestate.com/komodo-edit). It does all of that but is much more lightweight. I like the fact that it has code completion for php (like most do) but also has code completion and syntax checking for javascript, including frameworks like jQuery and Dojo
Komodo Edit is free, but it's not missing anything important, unless you use SVN some other versioning system or require debugging built into the IDE.
Zend Studio is Eclipse, it's essentially an Eclipse plugin for a pre-configured Eclipse install. It also has HTML/CSS/Javascript editors built in with syntax highlighting and all that. It's what I use. I don't like it all that much, it's definitely bloated with all the Eclipse stuff, but it does get the job done and has CVS and SVN integration which is convenient.
&gt; In my experience, people who hate on Eclipse don't know how to use it properly, if they've ever used it at all. I've heard people say the same thing about art programs, other IDE's, programming languages, etc. It may be true in Eclipse's case, but typically it's just a superiority complex of users.
Vim supports HTML, CSS and Javascript quite well. It lets you edit whatever you like without creating projects or anything. It has built-in FTP. It won't list them all in the interface all the time.
Better yet; use vim over ssh and develop on dev servers and then release to prod servers.
I understand that and I was skeptical of writing it, but the fact of the matter is that it isn't always a superiority complex. Have you ever heard people talking shit about about Photoshop? Does anyone seriously think Photoshop is a crappy application? It's the same thing. There are valid complaints about Eclipse - and I'm not claiming it's perfect - but the arguments that it's "too bloated and slow" or "doesn't work right" or other meaningless claims that I see all the time are usually indicative of people that don't know how to use it. Properly configured and used, Eclipse is no more of a resource hog than any other IDE or a modern web browser (or even iTunes Q_Q), and yet those same people use all of the above. If someone was going to bitch about Eclipse and brought things up like the fact that there is so much screen estate wasted or too many plugins are enabled by default or the default heap size is too small or other substantial claims, I wouldn't say that they didn't know what they were doing, but claims like "resource hog" or "VCS support sucks!" (it doesn't) are just indicative of inexperience and/or prejudice.
Yeah I noticed that odd function parameter issue too. Sometimes it would come up right, and other times it would not (when the functions are in the same scope as well) I think you should absolutely give phpstorm a shot. The remote support for uploading files is pretty damn good and the syntax highlighting works nicely as well but I don't really have too much preference when it comes to what colors they appear as. Best of luck, dude! 
&gt; Zend and Eclipse have clunky interfaces when working on live files on a remote server. No, this is false. A remote project (except for the latency, which exists in every editor) is virtually identical to a local project, you just don't / didn't know how to set it up correctly, so don't make expansive and wide claims about the application when you clearly and demonstratably are not in a position of authority on the matter.
Aptana actually quit developing their PHP IDE and gave all their code to PDT, as far as I know, so it's a pretty moot point.
True, but less ram usage means that I have more available space for my environment. Having 3+ browsers open at the same time (chrome, firefox, IE and sometimes Opera/Safari) with a bunch of tabs in each so I can quickly test my sites can be a bit memory hungry so it's nice to have a powerful, yet lightweight IDE.
Outside ofthe IDE, how do you do debugging? I wasn't aware of any way to use breakpoints and step-through debugging without an IDE...
Zend Studio (for Eclipse) **does** have HTML support: [http://imgur.com/QDilQ](http://imgur.com/QDilQ?full)
Fair enough
How much RAM is the box you're developing on equipped with? I'm going to guess 2GB, since anything less is abysmally small for modern PCs. Although, 2GB for a primary development box is pretty damn tiny anyway. Assuming that you haven't had ietester/firefox/chrome/safari/opera open for ages, the five of them together shouldn't exceed 1GB. And if they do, restart the browser(s)! Chrome starts with ~100MB of RAM, firefox with ~75MB of RAM, Safari with ~50MB, IETester with all tabs ~40MB, Opera with 60MB. So a grand total of: ~400MB of RAM to use all browsers at once, so 1GB is an extremely generous estimate. Eclipse has a maximum heap size of 256MB and permgen size of 256MB out of the box, so it can only use up to 512MB. ZS sets that +256MB higher, so 768MB. Give yourself 256-512 for IRC/IM/music and you're right at 2GB, no need to swap. I don't see why people are so upset with their IDE using up to 1GB of RAM when they have plenty that just sits idle, being wasted. Having free RAM does not make your system anywhat faster, except maybe for being used as a cache and even then, the gain is only ever marginal for a desktop workload.
Just stating my experience. For instance when I tried to import a large project through both Eclipse and Netbeans 2 months ago using the latest stable versions... Netbeans: 10 minutes Eclipse: Crashed after 2 hours.
Sorry, that's what I was implying. They all use local copies for editing and only upload when directed. 
Remote Systems Explorer -&gt; create connection -&gt; browse to remote folder -&gt; right click -&gt; create remote folder. PHP perspective -&gt; remote project -&gt; right click -&gt; configuration -&gt; add PHP support. Sometimes, depending on the number of files and the speed and ping of the connection, it can be a cunt to work with, but that'll go with any browser. I do all of my PHP devleopment inside various virtual boxes with SFTP remote projects from my desktop into the virtual machine and I can never notice anything different between a local project and a remote one, if any exists.
Wait... so does it not create local copies if you do that? If so, do the function/object lookup features still work since it doesn't have the local objects to build an index from? 
Is there a joomla or wordpress certification? 
Not feasible with huge projects/multiple developers. I keep a development area on a server, which gets commits. Then gets committed to production. I did dev on a local server for a long time, to me it's easier to work off of a remote server
I would try out VS.PHP. I've been using it for 4+ years now, I've tried to switch to Eclipse/Aptana/Netbeans and always switched back. It's not free, but not too expensive. I installed Visual Studio Professional (if you're a student you can get it for free), which comes with a great HTML editor. VS.PHP doesn't require any Visual Studio though (it includes a shell edition), and it also includes html/javascript editing. Also has remote projects which is what you're looking for (edit remotely via FTP/SFTP/SSH). I also loaded the IronPython plugin for the Python stuff I have to do. And the priceless [metascroll plugin](http://visualstudiogallery.msdn.microsoft.com/en-us/3a50c69b-9b35-4eb2-b06a-328758afcaa2) It also has built-in debugging if that suits your fancy. I'd check it out at least
If I ever see a joomla or wordpress cert. I'd quit IT.
I just don't like little things in Eclipse, just the behavior. It's hard to explain. I'm too used to Visual Studio's behavior as an IDE.
It's coming back: http://www.aptana.com/products/php/
Are you sure that's why you're getting passed up and not because there is a big pool of PHP developers that are likely to require less pay than you?
I use Aptana 1.5 with the old PHP plugin. I can just hit ctrl+shift+U to directly upload the file I am working on. Also you can sync entire folders. I would like to know if one of the better IDE's can do the same, since this one doesn't support PHP 5.3, and has a few annoying bugs with CSS parsing.
In my experience, certifications in general are only useful if those that hire you are non-technical, so if you're contracting then yes it will probably help make you seem more professional and whatever. 
In other news I'd like to announce my new wordpress certificate! PM me for details, only $2000 and you get a shiny paper with your name on it! 
@nodren: You're much better off to start spending your time working on open-source projects, IMO. The Zend Certification gives you a little bit, but not as much as contributing to projects does. You mentioned that you're familiar with the Kohana framework, try expanding your horizons. Done anything with Zend Framework? They have bug hunt days once a month I think. Give that a try. Maybe web facing things are more your style, I know Joind.in is always looking for people with time and interest. That helps open-source and you have a site that you can show people that you help. Want something more esoteric? There's always Phergie (the source code for the IRC bot that hangs out in #phpc) that could use new plugins. Yes, the ZC might help you in the door, but it doesn't sound like that's your problem. Spend some time broadening your horizons. Participate in some open source, maybe pick up another language, release some of your own code (got any jQuery plugins you could dust off, write up some documentation for and release?). That time will pay back 10-fold versus the Zend Certificate, imo.
oh, I don't know... I was just saying, if you need debugging in the IDE, you have to pay, I wasn't saying there was another option. My bad.
For starters: http://www.expertrating.com/certifications/Wordpress-Test.asp
Thank you for the pointers I will definately try that!
Funny you mentioned contracting as im currently freelancing which involves lots of clients who are not to terribly tech savvy 
Its possible though I know compared to other php devs my rates are relatively low
&gt; Offer JSON and XML data formats. JSON converts well into native data structures in dynamic languages. XML will please those weirdos that prefer Java. To hell with SOAP, forget XML-RPC, avoid WDDX. Done. Sometimes Zend Framework is a real pain in the ass. &gt; Implement errors as a proper HTTP error code first, and a descriptive body second. In XML, the root element could be, say, 'error', while JSON could be a one element object, also keyed 'error.' Done. I edited my original post above to include most of the PHP code--care to comment? 
If you haven't already discovered it: http://clientsfromhell.net/ ;)
I mainly read reddit but that site is one of the few remaining on my rss feed right next to http://notalwaysright.com
I won't get paid for implementing oauth, however implementing proper http status codes is starting to look like a very good idea. I added some PHP code to the original post if you care to comment.
PHPDesigner does everything you ask for, the downsides are that it's windows only and not free, if that's not killing problems then it's highly recommended. http://www.mpsoftware.dk/
It uses the remote files to create a local index, so no local copies of the files but all the features that a local project has. The one project I had that this fell over on was a weird hybrid of Magento, Zend Framework components and ezPublish and it just made Eclipse shit bricks because there were like 15000 classes, but I doubt many (if any) other IDEs could deal with it, either.
Strange, are there any other details? Are they just including PDT or continuing their own development again?
Interesting, will give that a try then. 
If you like vim, then there is a vim like plug-in for Netbeans and it works great.
Repost from http://www.reddit.com/r/PHP/comments/cosoq/has_anyone_here_gotten_their_zend_certification/ &gt; Full Disclosure: I'm a co-author of php|architects Zend PHP 5 Certification Study Guide (yeah, go buy it, kthx) &gt; &gt; First: If your employer is offering to pay, DO IT. It's good for them to get some validation on their choice of employee and it's good for them to see you applying yourself to learning (even if your current experience means you don't need to learn more to pass the cert) &gt; &gt; The certification isn't hard, but it can be a little tricky, and will be easier for someone who uses PHP day-to-day in a professional capacity. &gt; &gt; The current iteration of the exam (as opposed to the first one) is less "remember function arguments" and more "how to do things properly". &gt; &gt; As someone who interviews PHP developers on a regular basis, as well as someone who took both of the exams (PHP 4 and PHP 5) and as a co-author on the study guide, I can say that passing the exam doesn't impress me, it does however give me a very good baseline point from which to start. &gt; &gt; People with ZCE go towards the top of the pile when deciding who to interview. &gt; &gt; On a final note, Zend is currently about to start beta testing a PHP 5.3 Certification, and I can't comment (yet) on how that exam compares to the current PHP 5 cert, so you might want to wait a couple months :) The PHP 5.3 cert should be out any time soon, so I'd wait on that, for sure.
The Zend Cert test is a silly test that doesn't _at all_ test your ability to program well. Most of the questions on the test are syntax- or memorization-based, and can be answered with a quick test script or Google query (memorizing stuff like this is _not_ what makes you a good programmer). I personally would never give one candidate the advantage over another for having obtained Zend Cert. That being said, I wouldn't hold it against them either, since I can see why they'd logically want to obtain it (some employers want it). Open source contribution is probably the best way to demonstrate your ability, as it shows you are able to work in groups and use things like bug trackers and VCSs, and usually indicates you are _genuinely interested_ in programming. If the guy who's considering hiring you is a programmer as well, particularly if he has a degree, it can help to have read some solid literature on patterns and practice (Programming Pearls, Design Patterns by Gang of Four, etc.). If he's not an idiot, he'll value this over any silly Zend cert. EDIT: Here's a page with some [example questions for the Zend Cert test](http://shiflett.org/blog/2005/apr/zend-certification-self-test). Albeit, it's from 2005, but the newer tests aren't any more involved.
Holy crap, I forgot how verbose ZF is. I had to remind myself about how action helpers worked. Your code looks fine. In fact, I was quite surprised at how well the magic works. Amazing things, these newfangled frameworks. Now I'm curious how other frameworks would approach the same tasks.
I'm a ZCE for php4 and php5. I can tell you much the same that's already been said: it does not represent your ability to program. It will get you in the door for interviews in some instances, but no one is going to hire you strictly because you have it. Portfolio, code samples, documentation samples, etc are what's important. In my opinion, getting a ZCE means you know php, and might not have to go to php.net every time you need a refresher on the order of parameters for a specific function.
Looks like it's their own. You can download the beta. It definitely feels different than PDT.
Installing all that on top a vanilla Eclipse is not killing it? It's slow by itself, I can imagine it with all that things on top of it. I use Eclipse with PHPEclipse and an SVN connector. That´s all, and still slow for me. Right now Eclipse is my main IDE for PHPXHTMLJS. Has all I need and has many bad things, but it also has a lot of good stuff on it.
A debugger is a pretty essential thing if you want to do serious development. The same goes for unit testing and static analysis. * Install XDebug and use an IDE that hooks into it (Netbeans, Zend Studio, etc) * Use PHPUnit * Run RIPS (http://sourceforge.net/projects/rips-scanner/). It's good at sniffing out security vulnerabilities and some code inefficiencies. If you have control over the prod environment, definitely use PHP 5.3.x. It runs faster and has better enterprise-ish support in the form of namespaces and inline functions and such.
Okay, thanks. I was already planning on using PHPUnit, (it's already installed), and I really like the test driven development ideals. I've already installed PHP 5.3.3 on all my machines, so all set there.
1) Eclipse shouldn't be slow unless you're on an ancient computer, so what's your specs? 2) Disable all plugins that run by default that you're not currently using. This usually just means closing the tabs that they've created. 3) Give Eclipse a larger heapsize in eclipse.ini. This is the ini file I use; it allows up to 1.5GB of memory in use by Eclipse, I can shrink that if you want to. This will also make startup VERY FUCKING SLOW (which doesn't bother me because I never close eclipse) but it will run faster after a few minutes (giving Java's JIT some time to run and compile, this configuration forces all compiling to be done upfront): -startup plugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar --launcher.library plugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.1.0.v20100503 -product org.eclipse.epp.package.jee.product --launcher.defaultAction openFile --launcher.XXMaxPermSize 256M -showsplash org.eclipse.platform --launcher.XXMaxPermSize 256m --launcher.defaultAction openFile -vm C:\Program Files\Java\jdk1.6.0_21 -vmargs -server -XX:+AggressiveOpts -XX:+BackgroundCompilation -XX:-DontCompileHugeMethods -XX:+UseFastAccessorMethods -XX:UseSSE=2 -Dosgi.requiredJavaVersion=1.5 -XX:PermSize=256M -XX:MaxPermSize=500M -Xms40m -Xmx1000m -Xcomp -XX:+UseStringCache -XX:+EstimateArgEscape -XX:+DoEscapeAnalysis -XX:+AlwaysCompileLoopMethods -XX:MaxInlineSize=128 -XX:PerMethodRecompilationCutoff=-1 -XX:PerBytecodeRecompilationCutoff=-1 -XX:+UseVectoredExceptions -XX:+RewriteBytecodes -XX:+RewriteFrequentPairs -XX:FreqInlineSize=1024 -XX:+TieredCompilation -XX:+UseCompressedOops -XX:+ScavengeBeforeFullGC 
Interesting, I'm gonna try that on monday (at home I use a Mac and I don't do much coding here, so no Eclipse). I don't use a very new computer, but is good enough I think. 3GB DDR2, Core2Duo 2.3 if I remember well. Is a laptop, running on Ubuntu. Thanks!
print_r and echo will only get you so far. If you need to run test cases against your code I would recommend using a debugger.
In ASP, no less!
I'm a ZCE and I still have to go to php.net every time I need a refresher on the order of parameters for a specific function...
I have over 10 years in the business (most of that with PHP). I have never *needed* a debugger. I've played with a few, and the main utility I found in them was for exploring unfamiliar code. However, once I am up to speed on a project, I rarely invoke the debugger again. In the real world, good logging, print_r, echo, etc... is the way to go. Also, having good unit tests also helps prevent having deeply buried bugs that you have a hard time drilling into. In the end ... sure, debuggers have their (limited IMHO) utility, but it can become a crutch and you'll be in a jam some day when you run into a problem and don't have your debugging environment to fall back on.
What about PHPStorm? It is $100 but does EVERYTHING you want. It has built in FTP. It does all of the languages you need it to with code assist/completion. You can work with projects OR single files. It is pretty fast and has served me extremely well so far. I like that it does not force you to work a certain way, and lets you choose the best way for YOU to work. 
Yea once they stopped with PHP support and decided to go all in on RoR, a LOT of people lost interest. Of course, they are adding it back in, but all the other IDE's seem to be way ahead of it now. 
PHPStorm is AMAZIING. I forgot to mention in a previous comment about the debugger in phpStorm. It is so easy to get setup. I've always had issues setting up a debugger with a new IDE and phpStorm was the only IDE that made it easy to set up, and if I remember correctly, it does not lock you into one or the other. 
PHPDesigner is a GREAT program. 
No.
You want to swap out the VM. Use JRockit and your memory problems are GREATLY reduced by GC'ing at sane intervals (like 50% instead of 90% memory usage) and dynamically managing the tiers.
As oorza states, Aptana did switch to PDT for 2.0, but is switching back to their own editor for 3.0. I've tried both (3.0 is in beta), and can assure you that the issues that you describe no longer exist. About the only issues I have had with it are it's chunkiness/slowness (which I expect out of any Eclipse IDE...), but it doesn't bother me much on faster computers (I develop on three different windows machines - Aptana works fine on both desktops, not so fine on my laptop.)
Raise your prices, that'll get you the jobs. 
While I like Eclipse an awful lot, the latest version is very slow on my work computer. It's an iMac Core i5 w/ either 6 or 8GB of RAM (I don't have access to it at the moment). Typing PHP is like typing on a 1200 baud modem. I don't know if it's the syntax highlighting or some sort of automatic type checking or what -- haven't had time to track it down -- but it is pretty bad. It's easy to make it fast again, just put a ?&gt; immediately after the &lt;?php while entering code.
certifications aren't worth getting unless a specific employer is specifically asking for a specific certification for the job.
I do upload directly to my testing server via ftp, and the integrated ftp client of notepad++ has make things very easy.
How do you turn on linewrap? It's driving me nuts
http://stackoverflow.com/questions/97663/how-can-i-get-word-wrap-to-work-in-eclipse-pdt-for-php-files It's a(n arguably) valid complaint that support is missing in Eclipse so you have to install a plugin to accomplish such a thing, although it's pretty non-standard in IDEs and most code purists would shudder at such a thought, like using a variable width font D:
Had the same experience. Learned to use NetBeans. Not thinking about going back any time soon.
Sounds like Coda (www.panic.com/coda) would suit you perfectly. It does have a few pretty annoying things missing (i.e. a basic like code folding) but it does pretty much suit a web-workflow perfectly. You'll find most people using eclipse are ex-java programmers, or people who work on 1 or 2 single large projects, internally, in a business, where everything is committed via SVN and it's then up to the deployment team to deal with. Unfortunately in the 'real' web world, especially when dealing with front-end issues as well, not every project is a nice clean PHP library, that is located in an environment perfectly setup for your IDE.
This. I can't remember last time I wrote class="". NetBeans: ctrl+space, arrow down, enter. Almost like a cheat code.
I use Eclipse with PHPEclipse and a few other plugins. Does everything you mentioned (though figuring out the "how" might be a bit of effort).
I took the Zend PHP 5 certification, and got a job because my boss thought it was the Zend *framework* certification. :)
&gt;This regular expression doesn’t set a maximum number of allowed characters Honest question. Why do some websites set a maximum number of allowed characters if they're going to hash said password anyway?
I've heard that php has an inbuilt function that automatically rotates the order of *$needle*s and *$haystack*s on April 1st of every year&lt;/s&gt;
I'm very surprised you have trouble finding a job with 6 years under your belt. ZCE might help you a bit, but I wonder if there's an underlying issue. Where are you trying to find a job?
I haven't got a clue why they would do that, that's why I left it out..
Because the "remind me what my password is" feature (you know, the one that emails it to you) easily breaks if too many characters are in it.
Actually my local market isn't competitive so im looking at freelance work until I move to the bay area
What would you charge for long term full time contract work if you had my experience 
IMO if a user wants to use a shitty password, unless its for a Bank, by all means, let them use a shitty password.
Shouldn't the user be asked to reset their password instead? I mean, I lose trust in sites that send me back my password in clear text.
Well, there has to be some sort of trade-off between security and usability. 
If they can send it back clear-text then they didn't hash it any way, so yeah, immediately lose all trust.
The problem with using this method is that you have no error handling granularity, you only know if the password matches or doesn't. If a user fails to fulfil the requirements you cannot tell said user "Hey buddy, you need a special character in there!" Development wise it's a quick and compact solution, but I'd rather do the checks separately so that I give better error messages.
I agree unless it affects me in some way.
Lately I have been putting a little (java)script in the registration-forms that I make that indicate password strength and warning the user against it of the password is too simple. I just though of this: maybe it's a good idea to put this password-strength-index in the database and require users with more rights to have a more complex password...
Good idea. If a user if a moderator, then their password should be strong. If the user is a site-wide admin, then the password should be as strong as possible.
Even worse are the ones that you register for and they immediately email you your password. "Oh, thank you for sending me the password I JUST USED TO REGISTER in plain text, otherwise I might not be able to login"
I had users email me (because they knew I was the admin) asking me for their password. This was just a small site and I hadn't bothered to create a reset password function because it was a spare-time kind of thing. They were completely baffled when I told them that not even I could tell them their password.
Might be worth it then =) If you're in a better market I doubt getting certified helps you. My current employer forces all employees to get it, but I could care less. MySQL cert is more interesting.
Looks like you have too many indexes. Is the table primarily read-only? because all those indexes will have to be rebuilt on each insert or column update, that's a lot of overhead. 
You're going to have a problem with filtering, for instance if you want a person that is at least 180cm tall who weighs 70kg and have blonde hair. You're filtering based on 3 columns here, but MySQL will not use 3 indices, it'll use 1 which it feels has the best coverage. In this case it'll be height_cm index. That's not enough to satisfy the search, though, so it'll have to check the table for the rest of the data. It's a bit complicated to explain it entirely but this system will be very heavy on database queries, the larger the amount of missing persons the slower it will be. There is a solution, however. Sphinx is a search daemon that's perfectly suited to handle cases like these, it would allow you to do arbitrary filtering at no speed penalty. Down side is that I have never heard of any shared hosting with Sphinx available, so if you want it to be usable on shared hosting you'd have to create some form of plugin structure that will use Sphinx if it's available.
Do some tests first. If you expect hundreds or rows you probably won't need any index. Specific to the indexes: * Use indexes based on what's being searched on. There's probably a low chance somebody will look *just* for eye colors, so include and fields that you'll always search in every index. * gender_index, eyecolor,haircolor indexes won't do much for you. For instance, there's only 2 genders so it will just split the table in two. Just get rid of these. * Searching on names will be important, but fulltext is not really sufficient. It only indexes words longer than 3 characters by default, so people named 'lee' are out. Stopwords are also filtered out, so if names match stopwords they will also be ignored. * The lat/lng indexes won't help as much as you think. Since there will never be an exact latitude match (high precision) the longitude parts of the index will never be used. Test first with lots of records. If you find out what's slow it will be a much better startingpoint. This is a prime example of premature optimization.
30-50 an hour. I'm in michigan. 
Having the strength next to the hashed passwords would make brute-forcing easier since you can probably deduct which passwords use lowercase letters only. But then again.. you shouldn't get your hashes stolen anyway
I think they do that for helping you remember your password at a later time, probably if a month later you see that email and want to go back to the site.
It really does not matter why they do it. It is a BAD practice and let's me know I can't trust them to be reasonable about securit.
I had a feeling that MySQL wouldn't use all of my indexes. Hence the reason I posted it here. Something didn't sit right with me. I kind of want to iron the kinks out (in regards to the DB) before I begin coding. In regards to Sphinx. I might go ahead with it. To be honest, I don't want every Tom, Dick and Harry using this system. It's mostly targeted towards charity groups, law enforcement and social bodies. If they're serious about this field, they'll most likely take the time and money to hire out a dedicated server. Or am I wrong about this?
Only the admin will be able to add to this table. There will be a submit-a-missing-person option available to front-end users, but I intend to stick all of those submissions in another table until the details have been reviewed by an admin.
Is there a way to change the default for Fulltext so that it will take into account names such as "Lee"? I never thought of it that way. Maybe I should just index the most important columns, such as sex, racial appearance etc?
AES\_ENCRYPT in MySQL is reversable with AES\_DECRYPT..
Sorry for the crappy formatting of my last comment. But yea, index on queries you often perform, not on columns. EXPLAIN SELECT helps, and it would be a good idea to read up on how BTREE indexes work and the significance of the order you place the fields in the index, if these things are new to you, you really should take a second to learn. I can't tell you how and what to index unless I see the queries you'll actually be using. EDIT: yes you can change the fulltext index, but you might make it very slow as a result. Read the manual on fulltext indexes. 
Thanks. At least I know what I'm getting myself into. Hopefully, it'll pay off.