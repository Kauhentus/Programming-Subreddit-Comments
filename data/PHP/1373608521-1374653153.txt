It can resolve more complex dependency issues than just "my software uses X, include it in my project". What if your software uses X, which uses Y, which Z? What if your software also uses A, which also uses Y?
Hehe. I actually care about privacy Curse my stupid lack of business acumen :((((
Congratulations! You already covered the biggest challenge by understanding those 2 points. I think OOP is a means to an end, and not an end itself. The end being, building independent (or with managed dependencies) components ( let it be classes, objects or even functions) that can be assembled together to form bigger and more complex things. A analogy i usually use is that of an electronic circuit. You can build a complex circuit in two ways. 1. You can start by connecting the smallest components like transistors, resistors and diodes, and when you are done completing the complex circuit, it will be a complete mess. 2. You can identify the key components that can be assembled to make your circuit. you can make those into boxes with an input and output. You can connect those boxes and get your required functionality. Please note these boxes can be in turn built by assembling smaller, simpler boxes. This immediately makes possible some of the things that could not be done easily with the first method. they are.. a. If the circuit stops functioning, you can test the individual boxes and see if they are maintaining their input/output relationships. b. you can swap one box with another with same input/output relationship but more efficient/robust internal implementation. c. Can use one box from an older circuit to make a newer circuit that require the box's functionality. d. Use a box as a part of a bigger box that extends the boxes functionality. e. Come back at a later time and see clearly how the circuit is organized. These are some of the things that OOP enables us to do. 
Can you recommend a good PDO wrapper? PDO is a wrapper in itself, but still quite a long winded one. For the most part I'm fetching either a single value ($int = GetSingleField($query)) from a single row, or a flat 2d array of rows/fields ($rows = sqlArray($query)). I found a few PDO helper wrappers kicking around on github, but Im wary of committing to anything that someone isn't using already using in production
Well, for procedural what I do is to just convert everything to strings. Sql is happy to treat an integer as a string. For a more complicated datatype, such as dates, I have a wrapper class that basically has a __toString to sql format, and use that everywhere. Or you could use instanceof for the datatypes you want. No need to pass them as parameters.
Oh, I want to hire a company that can't even follow simple guidelines for this subreddit. I'm sure they don't ignore rules/guidelines for other things...
&gt;Based on Agile methodology so success of the project is assured Oh really? Ever heard of comma or period( Full stop)..? These guys don't even care to proof read their site. I cant imagine the quality of their code...Companies like these give a bad name for Indian software development. Take your marketing bullshit elsewhere...
&gt;But were talking about a site that was cobbled together in 2004 and exploded in popularity Honestly, it sounds like it might be best to simply rewrite the code completely using best practices. If the code is as you describe, then I'm sure there are quite a few security considerations to look at. 
Just started a new project "require": { "laravel/framework": "4.0.*", "twitter/bootstrap": "dev-3.0.0-wip", "cartalyst/sentry": "v2.0.0-RC1" }, "require-dev": { "dg/mysql-dump": "dev-master", "loic-sharma/profiler": "1.1.*", "way/generators": "dev-master" } I'm using phing to compile bootstrap for me. It works pretty well so far. MySQL dump is a PHP mysql-dump tool, I'm using it to backup user data before I run my update SQL scripts on staging and production and I've made a phing task to restore them as well in case something catastrophic happens. Profiler is a profiling toolbar for laravel, a very handy little plugin. Generators are the laravel generators for scaffolding and well... generating code, easier than manually creating resources.
Glad to hear it :-)
https://packagist.org/ Search through this library of packages. Find one you like and include it in your composer.json, it will automatically sort out any dependencies that class has and setup the autoloading for it. It's also useful to manage versions, for instance I'm using bootstrap 3, which is a work in progress, when the version updates I can change the version string and run `composer update` and `phing make-bootstrap` to compile it. It's all about automation son, it makes your applications more robust and while the inital time investment is a PITA it vastly improves your workflow. &gt; If my project depends on something I've already gone out and downloaded the dependency before I even integrated it into my project thus creating the dependency in the first place. As with anything, it's going to be harder to integrate with an existing project, in order to get the most value out of it you need to make use of their autoloader which may not be so easy in legacy applications.
I understand why you might say that, but its not necessary. It IS possible to write secure code even using adhoc queries (although its bad style these days). Im well versed on injection and security, so Im confident my code is currently secure, thats not the issue. I'm more looking for the path of least resistance to migrate it to PDO.
&gt; It IS possible to write secure code even using adhoc queries It's not, and there's a perfectly good reason: we're all human. No one is perfect, not I, nor you, and if you rely on yourself to make sure *every* database interaction is free from injection, that *every* output has been sanitised, that you *never* trust user input as it traces its way throughout the entire application, you *will* make a mistake. Taking a *systematic* approach to security is by far and away a better approach [e.g: a wrapper which only ever allows input to enter the database through parameter binding, so escaping is not even necessary], because then you rely on a *system* to keep your code secure, not yourself.
Oh? * Do you currently hash your users passwords using a vetted password hashing algorithm, such as bcrypt? * Do you regenerate the session upon login? * Do you switch over to HTTPS for authenticated requests? * Have your set your sessions to HTTPOnly and Secure? * Do you use a hidden hash for actions which changes the state? * Are you have sufficient entropy in your PNRG? * Are you properly sanitizing your outputs? I'm merely scraping the surface here.
Yes to all. As I said, I'm pretty well versed in security But you seem to be coming from the angle that Im arguing adhoc queries are good. Clearly they aren't, and thats why I'm trying to migrate. I'm asking for useful advice, not trying to argue that my current codebase is awesome.
Not really, sorry. This is why Im posting. Best practices dictate you use bound params, whether that is via PDO or mysqli is not so important. Any helper wrappers around PDO or mysqli are not really covered by 'best practices', so long as the escaping and bound params are still being utilised
This is pretty smart. I should do something like this. 
 { "dependencies":{ "express":"x", "mongoose":"x", "pain": "0" } } Yes , i switched to Node too that's why ...
Removing the security aspects of the comments here - what should happen when/if a bug is discovered in PDO and we all have to move from PDO to XYZ? You'll have another massive pile on your plate to chew through once again while you migrate all your code. It's not just for security, it's for ease of maintenance too. I say spend that little bit of extra time now and build a database layer. It'll save headaches later.
Useless? It definitely requires more time and research than most people put into it, but it's not useless. 
&gt; So, Like an ORM? If not how is this different? ORM's doesn't save normalized data. They save denormalized data. ORM's normally produce a lot of queries on the database while reading. Mine only request 1 query on the database system, when retrieving data, because it retrieves normalized data. Normsally, ORM's doesn't scale well with traffic. &gt; But doesn't almost all NoSQL software outthere like Cassandra already do this. Cassandra and ElasticSearch supports sharding. The sharding system I am creating will make it possible to shard any kind of database systems. Also, Cassandra's best usage is when your application has more write requests than read requests. My application needs to support a lot more reads than writes. For this reason, I use Redis instead of Cassandra. &gt; So this can only be used in projects that use Redis and Zookeeper? Nope. 
Neither. Use a framework. Especially if you want to grow the site in the future. Never used it but maybe Laravel would be a good framework for a beginner. A framework has lots of ready to use functionality baked in that will save you a lot of time. Don't use Wordpress, it's just a crappy CMS, for building blogs. 
It's used to prevent Cross-Site Request Forgeries (CSRF, pronounced "sea surf"), which is a malicious exploit whereby a request is triggered to a website where the user is authenticated (or otherwise trusted). The most classical example is the following: 1. Alice signs in on bank.com. 2. Mallory sends Alice a link to evil.com. 3. evil.com contains the following markup: &lt;img src="http://bank.com/transfer.cgi?to=mallory&amp;amount=9999" /&gt; "Well, won't that be solved by switching over to POST?" you ask. No, not really, since you could easily have a form submitted just as easily via either JS or clickjacking. &lt;iframe id="hidden_frame"&gt;&lt;/iframe&gt; &lt;form id="evil_form" action="post" action="http://bank.com/transfer.cgi" target="hidden_iframe"&gt; &lt;input type="hidden" name="to" value="mallory" /&gt; &lt;input type="hidden" name="amount" value="9999" /&gt; &lt;/form&gt; &lt;script&gt;$(function(){$("#evil_form").submit();});&lt;/script&gt; So, how do we prevent something like this? Well, while Mallory can certainly trigger requests to bank.com via Alice, Mallory can't read from bank.com due to the Same-Origin Policy, a security mechanism only allowing you to read data originating from the same domain (unless overridden by CORS) . Therefore, we generate a random hash which is then stored in a session and also outputted to a hidden input field in the form on bank.com. This will allow us to validate the request against the stored hash upon the next POST. If the submitted hash and the stored hash match, we have a valid request. A form request originating from bank.com will contain the hash since the form generated will contain it. However, since evil.com has no ability to scrape that hash from bank.com's markup due to SOP, a form request from evil.com would therefore be invalid.
I really wish people would quit pointing people at Frameworks out of reflex. From an experienced users point of view a framework is a great way to go but if he has no PHP experience throwing him at a framework will confuse the hell out of him and then teach him *that* frameworks way of doing things. If at some point in the future that framework goes away or is no longer supported he's got no way to fall back and has to hit the ground running with a new framework. Without doing things the '*old*' way, he'll have no reason or experience to know why things are done the way they are with the majority of frameworks and that knowledge is important. His site idea is simple enough that building it from the ground up at least once without messing with the heavy burden of learning a framework on top of a new language, will help him get a better understanding of the core concepts behind PHP development. He'll miss out on valuable knowledge such as how to properly handle allowing a vote once system or calculating the averages himself. He needs to build it himself, he has to have a good understanding of vanilla PHP or he'll never be a well rounded developer. /soapbox
A few years ago, WordPress got some of those _feature_ things everyone talks about. It's actually a lot more than blogging software these days. As an option for a non-programmer, it's going to be cheaper and smarter.
Yes I understand now, Thank You. But what is preventing Mallory from loading the banks form in a hidden iframe(at evil page) and triggering the transfer event there (by invoking the click event on the submit button in the iframe's window)
&gt;Yes to all. As I said, I'm pretty well versed in security Cool beans. You should still be wary of the security issues which I *haven't* mentioned, though. Like said, this is just the tip of the iceberg, and security isn't something which you do once then forget about. &gt;But you seem to be coming from the angle that Im arguing adhoc queries are good. Not at all. I just don't have much trust that websites written in 2004 will be up to date with current practices. &gt;I'm asking for useful advice, not trying to argue that my current codebase is awesome. And I'm giving advice here. The security aspect isn't the only reason why you should consider a rewrite, if, as you say, the site was essentially just thrown together. Maintenance would also be a big reason. If the site was written using SOLID principles, you'd quite easily be able to swap out that mysql layer of yours without touching your application's business logic. 
Like said, Same-Origin Policy. You don't have access to the content loaded in an iframe if it belongs to a different domain, so Mallory cannot submit the form.
Thanks Zushiba, I feel bad you wrote all that. I gave you an upvote anyway! Thanks again for the advice, would you say Wordpress would be more advantageous than a custom PHP? 
Cheers. Whilst Vagrant / Puppet are the new hotness right now (rightfully so) I like being able to compile from source and have the latest release nginx/php. Plus Ubuntu server, regardless of what people think of the desktop is pretty damm good on the server, and makes this whole process rather simple. And its good experience regardless to know how these things fit together. Working on a new web app at the moment - going to have to roll out quite a few front end servers - so thinking about possibly rolling up this guide into an automated bash script in the future. 
Purely my opinion, of course, but someone specializing strictly in WordPress implementations might be cheaper, but the end result of the site may be less flexible as it grows. Someone providing you a purely custom content management system will be better in the long run, but probably more expensive.
Even though my job has me working with WordPress quite often, I still feel as though it's not the solution for everything. It's come a long way, but it's still a blog a heart. It has many features that allow it to function as more than a blog, but that does not change the core. What you end up with is a mutation of a simple object, with like 8 heads and 5 arms. That being said, if all you need is for people to be able to use a 5-star rating system and maybe comment on the post, it would work fine. Make it much more complicated (which is always a possibility in the future if it is successful), and it starts to creep into the realm of "WP can do that, but I've gotta make some weird workaround" 
ok..what if he can mask the original content, and trick Alice into clicking the submit button?
Depends on the programmer you hire. If he's good, plain PHP will be much better than the clusterfuck wordpress' architecture is. If he's bad, wordpress' bad software-design might still be better than what he'd producie with plain PHP on his own. In principle I'd go with the programmer, who proposes Laravel4, Symfony2, ZendFramework 2, Silex, or similiar when presented with the problem.
Doctrine is OK.
You can host your own (private) http://getcomposer.org/doc/05-repositories.md#hosting-your-own You should push to your private git hosting, either GitHub, Bitbucket or something else. Their package is designed to leverage VCS to host the code, if your hosting provides private repo, then it is private, else it is public. 
I was compiling from the source as well in my Chef cookbooks, but opted to go for [ondrej's experimental PPA](https://launchpad.net/~ondrej/+archive/php5-experimental) instead. It's much faster (important when you're exterminating a lot in a VM) but I do miss the control.
Look for the words "Symfony" or "Laravel". Anything else and you're getting a date and difficult to maintain product.
Wordpress has great features. Anybody who says otherwise either stupid or a liar. But Wordpress code is just horrible, and old php compatibility is not an excuse for some of the horrible patterns in WP. 
I would recommend Symfony2
meh, I just really never found the need for one. I mean single field fetch these days are just $int = $stmt-&gt;fetch(PDO::FETCH_NUM)[0]; or a 2D list of rows is just $rows = $stmt-&gt;fetchAll(PDO::FETCH_ASSOC); Really think the next step up from PDO you're looking at an ORM or AR type pattern, not really a wrapper.
You realize you can provision a Vagrant-controlled VM with bash scripts, if you're so inclined?
If you are hiring someone, then I would have a custom PHP system built. It will be faster and as easy to maintain than wordpress. Having pushed a few clients to Wordpress before, I can honestly say now, its not worth it. Wordpress is really for those that don't want to try and think about it and have someone else try and do all the work for them. **Pro's to having a custom PHP site** * You can build features you weren't expecting * Site "should" be faster (if you hire someone bad a PHP, then you see the problem) * You can customize your site endlessly **Con's to having a custom PHP site** * Longer initial development time (this isn't always true. Depending on your requirements, this could actually go the other way as wordpress you may have to write your own plugin for something but this is more of a general rule) * You code is only as good as your developer **Pro's to Wordpress** * Easy installation/get up and going * Find people to work with Wordpress is going to be a lot easier. (But in my experience, they will not be as good of developers as someone who write's their own code) * Theme's to install/try (You can have you own theme for a custom PHP site, but it isn't as easy as clicking a button and then having a new theme installed and applied) **Con's to Wordpress** * Dealing with cluttered code * Not as customizable without delving deep into Wordpress * Limited Plugins means you have to choose between something that is "close" to what you need or making your own
You can indeed scroll the iframe and have it line up so to trick Alice to click the submit button. In the above scenario, it wouldn't do much good, as we also need the receiver's account and the amount to send with, but in a different case, yes definitely. There are ways of defending against this, too: 1. Send a X-Frame-Options header. The three options for it are: * DENY - The page can't be displayed in a frame at all. * SAMEORIGIN - The page can only be displayed in a frame of the same origin as the page itself. * ALLOW-FROM *uri* - The page can only be displayed in a frame from the specified uri. 2. Send a framebuster, that is, a piece of JavaScript which ensures that the page is the top-most level, and breaks it out if it isn't. Obviously, the first option is preferable, as the latter option wouldn't work without JavaScript, but clickjacking would still be possible by positioning the entire frame with CSS and simply hiding the parts which you do not want shown by positioning elements over them.
you are telling, even if I use mysql only, using your library can make all this happen?
&gt; https://packagist.org/ Search through this library of packages. Oh...Seems I have even reinvented a few wheels. How have I never heard of this website before? In the past my dependencies have been found using google and most of the time I download something only to look at the code, see how badly it is done and just code it myself. Composer or not how have I never heard of this website? Guess I have an incentive to try composer. Already found a few projects I want to try out. Trying to google for a bbcode parser has been a huge hassle and I ended up failing to rip it out of phpbb3.0 forum's codebase. One search on that site gives me 2 pages of results for bbcode. Another search for PDF yields similar results. Found some markdown and wiki parsers. Oh wow, a direct to Dropbox backup project. Why didn't you show me this place before. There goes my weekend. Haha.
Can we provision a Vagrant controlled VM from install files saved to the local filesystem instead of downloading every time.
But then I cannot use provisoning files created by services like your Puphpet..or even someone elses shared provisioning file. right?
I absolutely agree with your thoughts on WordPress, but I have to disagree with the OP's premise that custom PHP is the only other alternative. Whoever programmer takes this job almost certainly should *not* be starting from scratch. Even using WordPress could be better than starting from scratch. This project sounds like an application to me (albeit a smallish one), so a framework would probably be the best starting point. It could be Symfony or Zend or Laravel or Cake or CI or whatever, but definitely start with a framework. **tl;dr** For this project, framework &gt; WP &gt; from scratch.
I understand this might seem dickish, but nonetheless, this is my gut reaction, after reading the problem and all the comments in this thread: iVaporWare But good luck. Shit sounds hard as hell, complicated as fuck. You got all my best wishes. You're ninja-as-hell if you pull it off.
Two ways I've done / seen this done before: 1. At the start of the process output the start of an HTML page with a container with an id (div, textarea, etc). Then for each line you want to show output a pair of script tags containing some code to append the data to the container using it's id. 2. Use AJAX to start the process. Have the process output to a text file. Then use another AJAX call to periodically query the contents of the text file. You could of course also update a database with this information if it needs to be more structured.
I hadn't thought of simplifying the problem in that way :) Thank you.
Not really a waste of time. I enjoyed reading this thread. :-)
Oh c'mon dude give it up already. 
This is what output buffering is made for. http://php.net/ob_flush I've used output buffering for several scripts that behave exactly as you describe. The trick though is getting the browser to scroll with the output. I use JavaScript for that.
I had the daunting task of rewriting a library written for mysql_ and migrating it to mysqli_, I found no decent tools that would do this for me so I had to do it manually. In my case everything was wrapped in calls to the library so I basically wrote tests for 100% coverage, ran that test suite on the original code then one by one updated all the necessary places to mysqli and reran the test suite after each mysql to mysqli migration. If you weren't lucky enough to have db calls abstracted away you'll be doing a lot of search/replace unfortunately. The good news again that most of this would theoretically be replacing mysql with mysqli except for the god damn procedural functions that reverse the database handle (mysql_query vs. mysqli_query). For future goals I would suggest using PDO, as your example eludes to the lack of the named parameters for prepared statements was a no go. I would also stick to PDO with the added benefit that you could technically switch to a different database while keeping the same code. While you may be heavily ingrained in MySQL the fact that you could just change the DSN and start working with a different DB is well worth it. A decent example of this would be in testing where you set your DB to be SQLite vs your actual MySQL Server.
don't let anyone judge you by that past. You're building something great and I'm quite interested in this project. At first glance the abstraction is quite a bit but I'm gonna look at it more closely this weekend. very interesting project.
Why not store the output in DB under an id of the "run" and have later a list of of these runs presented to a user? A user can trigger a start of the run, optionally get an email when the run ends, and/or display a status/popup on the webpage (as user continues to browse other admin pages) when run ends.
Oh man, that code is an absolute mess. DO NOT USE THIS if you value security: https://github.com/loadedcommerce/loaded7/blob/master/catalog/includes/classes/database.php#L382
Maybe you can add a column to the email table that is a boolean "duplicate" then on your insert you can use ON DUPLICATE KEY UPDATE to switch that column if it is a dupe: [](http://dev.mysql.com/doc/refman/5.0/en/insert-on-duplicate.html)
Looking at the github. This project is at the oldest 6 months. mysql_* functions are depreciated as of 5.5, and have been in soft depereciation since 5.4.0 was released. For the love of FSM why are you not using prepared statements in your mysqli database connector and why are you using mysql at all. Furthermore, it appears you are storing credit card numbers, I've not finished looking but so far I see no attempt at any PCI compliance at all. Use of this software is fast becoming a litigation nightmare if there isn't accounting for PCI compliance.
We will be moving to PDO to support multiple database types, and also we do not ship with any payment modules that handle card data in the cart. We will be removing all card data handling code from the core. Thanks for for the feedback. I have asked our CTO to respond as well. He will have more insightful responses. 
I wrote something, it doesn't do a console like output but it is useful for replacing print_r($var) during debugging. It is still a work in progress but grab the code from github.com and instead of using print_r() use print_a(). There is no need to start with an echo '&lt;pre&gt;'; just take the array you wish to see and view it. https://github.com/MikeGarde/smarter-js/blob/master/dev/php/debug.php edit: the output is much cleaner then the standard print_r() for example it is color coded using Google Prettify, dates are printed but hover over them to see more, html that is within the array is viewed as code (not rendered html), and long strings are truncated giving you the option to view more.
I wish our framework supported 5.5. One day.
&gt; - for Apache, for nginx, for Cherokee, for Lighttpd, etc. It should be implemented once. But where would you put this? In the framework: then I can also give you a list.. especially this must be done over various programming languages, while most webservers are written in c/c++. Also you have much less webservers than frameworks.. I'm not sure.. but my guess would be, that the nginx-pagespeed team shares lots of functionality with the apache-pagespeed team.. in the best case, they only need to change their wrapper. Also I agree with you, that high frequency sites require more and more optimizations where such a pagespeed module might not be suitable anymore.. but this would then most probably be less a problem of html or download speed but more a problem of serverload
Edit: This is in response to [this](http://www.reddit.com/r/PHP/comments/1i5nc3/loaded_7_now_in_beta_a_new_php_based_shopping/cb1aecz). In the meantime, it's pretty-well guaranteed that your code is not PCI compliant, given that you're using ext/mysql. ext/mysql offers no viable way of preventing SQL injection vulnerabilities in all database-related code that involves user input. I would strongly recommend making the switch to PDO your mission-critical everyone-on-board do-it-right-now and-do-it-right business goal. Until you're off ext/mysql, I would strongly recommend that all users of your solution migrate away. Ecommerce *demands* security, and your system is inherently insecure.
The cart does not do any credit card validation nor do we ship any modules that are not PCI compliant. What you more than likely saw was the old Credit Cards section in admin that was previously used for CC validation. This is not the case anymore. The code there is only used for allowed types. We have a task open to update the code and remove the confusing regular expressions and unused variables that lead you to think the cart is not PCI compliant. As for MySQL, we have plans already in the works to use PDO which will allow us to connect to many other databases other than MySQL. Thanks again for your feedback. It is appreciated.
What you have is correct and should work. I tested it on my system with Apache 2.2.22 on Ubuntu 12.04 Server 64-bit. Remember that a 301 is a *permanent* redirect and will be cached by your browser. It is possible that you put in the /about-us redirect and tested it before you put in the /about-us/our-team redirect, and your browser is using the cached 301 value. Try it in an incognito window (Chrome) or a private window (Firefox) to check without the cache.
Ah, I forgot about the cache. Also I think I figured out my problem. In my htaccess file I had the two lines reversed. So it was overriding it. 
&gt; they really are band-aids I would like to have an explanation why you think so your next argument sounds like your latest technology which you grasped but not like a counterargument against this pagespeed module. &gt; better handled with a proper build/deploy process to real static documents So you want to tell me, that the future of the web is all sites static compiled? So why do you still use PHP pages? I'm also not sure if you are aware, that the pagespeed module is a lot more than just gzip. While I'm not completely sure how the HttpGzipStaticModule works my guess is, that it will just rewrite incoming requests for a resource to the .gz resource. So how do you think does the cache from the pagespeed module work in a different way? 
It's been rewrote like 3 times. From 2.x to 3.x and that made perfect sense. They wanted to make a clean break and between major version numbers is the place to do it. Now, they did it again between minor version numbers in the 3.x lifespan. Whoever thought that was a good idea needs to be taken out of decision making roles. If you don't mind being stuck on a minor version number or face a partial rewrite then Kohana is for you.
I'm a little sceptical of your experience just based on the fact that you don't know the difference between the MySQL DBMS and ext/mysql. ext/mysql is the PHP extension which provides the mysql_* functions. It is inherently insecure, has been soft deprecated for years, is hard deprecated in PHP 5.5, and will be removed in PHP 5.next. &gt;You prevent SQL injection vulnerabilities by validating and typecasting all user input. This is completely false. You prevent SQL injection vulnerabilities by negotiating with the database what portions of your SQL input are not syntax. If we're pulling out credentials, I'm a mod here in /r/PHP, I'm one of the founders of the PHP Mentoring project, which serves to teach best practises to new programmers, I'm part of the PHP documentation team, and I've done *tons* of ecommerce work. I hate appeals to authority, but between the two of us, I'm definitely the one with more of it. :) Your system is insecure, and your unwillingness to accept that fact from every qualified programmer in this thread is reason enough for everyone who might be using your software to *run away quickly*.
Yes, mod_alias finds the first match and quits, so you should always start with more specific and go to less specific. That was my first thought, but I figured you had the same order in your .htaccess file. Glad you got it figured out!
Is one faster or more efficient then the other? 
Yes. You'll need Zookeeper to keep track of your "Entity objects" =&gt; "database pools" mapping + mysql servers.
I plan to release its first version shortly after the week end. I'll make another post when I'm ready for its first release. &gt; don't let anyone judge you by that past. You're building something great and I'm quite interested in this project. Thanks a lot. This is very nice of you.
How fluent are you in regex? If you're lucky you can change the 100 redirects to 20.
There are roughly the same performance-wise. You do not need mod_rewrite to use Redirects, but RewriteRule lets you do pattern-matching to redirect entire classes of URLs. However, [there are times when you should not use mod_rewrite.](http://httpd.apache.org/docs/trunk/rewrite/avoid.html)
Please note that Loaded 7 is a project based on OSCommerce 3 alpha 5 code. We are working to bring this code base up to par on many levels. We absolutely are open to all feedback, and appreciate the honest feedback so far. This is a renovation and fork project. if stuff looks old, that's because it stuff we have not gotten to yet. 
http://xkcd.com/386/
If it was based off of OSCommerce, were are the copyright notices? The portions of the code base I saw seemed to be only copyright Loaded Commerce only. While the OSC is BSD licensed and you can use it pretty much as you will, it still requires the attribution.
You can definitely put them in private repos and just throw the repo information into your composer.json.
One other issue, there seems to be no license file at all on your github source code. This means no one can actually use your software because standard copyright applies.
I explicitly warn about using this approach in real world scenarios. I myself will only use it in very internal and very performance sensitive components of Doctrine ORM and Zend\Stdlib. For the rest, reflection is explicit enough (and more readable, since you know immediately what is going on).
How is he limiting the input to 5 characters? If it's server-side, disable the check using a debugger like firebug, and then phpinfo() 
He uses substr in the code, it's not client-sided.
Basically you are going to want to use some kind of recursive method and the following php functions. function getTimes($path) which then gets the directory listing with scandir http://php.net/manual/en/function.scandir.php then goes over each with a foreach (remember to remove . and ..), if the entry is a directory, call getTimes($entry) http://php.net/manual/en/function.is-dir.php if its a file, http://php.net/manual/en/function.is-file.php get the atime, and put it into a return array or something http://php.net/manual/en/function.fileatime.php then return what you have. That should get you most of the way there.
find /path/to/whatever/|xargs stat -c "%n %x"
That IRC maxwell guy is the bomb.
Backticking strikes me as the best avenue of attack, but the length is an issue. `rm *` Five seems pretty safe to be honest. The above might be cause for alarm. But since you need two characters to backtick, that only leaves three to do any damage. It's hard to do any damage in bash with only three characters. You could call ps and get process ids but that doesn't get you very far. You might be able to do something crazy like calling `ed &amp;` a jillion times and slowing down the server with a bunch of useless processes. To call any php function would require a function name to only have three characters because you also need the parentheses. Passing in a parameter will be impossible because you'd need at least two characters to refer to a variable, or two to delimit a string. The following php functions have three characters: * abs * chr * cos * die * dir * dl * end * exp * key * log * max * md5 * min * ord * pi * pos * pow * sin * tan Nothing here can do any damage. Most do nothing if passed no parameter. I don't think your friend's calculator has much capacity to do harm, but it is an almost useless calculator.
Because you are terminating a statement when you use ";". echo "&lt;title&gt;"; . $title . "&lt;/title&gt;"; Should be: echo "&lt;title&gt;",$title,"&lt;/title&gt;";
Well, at a quick glance you have a semicolon after the first opening title tag. Which would return an error. Surprised that PHP didn't return an error message. You might want to turn them on (&lt;?php error_reporting(1); ?&gt;). Also, I wouldn't recommend echoing out every HTML tag like that. You should only echo out variables and relevant data. Especially if its a template etc. E.G. &lt;p&gt;&lt;?php echo $myVar; ?&gt;&lt;/p&gt; I'd write more. But I'm on my phone. Message me if you need extra help. In the mean time. Check out PHP.net and stackoverflow.com :)
Heh, thought the same thing. The worst I could think of is `vi`
TIL you can use commas to concatenate
Post a link here and let us see what damage we can do.
Please! haha
Fair enough. But JS has a very similar syntax. Especially with semicolons and concatenation of strings etc. it's not much of a leap to PHP. Try and stick at it :). Otherwise if your are focused only on JS try out NodeJS for server side JS! :)
You can't :) In practice it concatenates the strings but what you are actually doing is supplying arguments to the echo statement.
PAID SITE =&gt; i believe reddit offers advertising.
I believe there is something called HADOOP ... but good luck with that.
The rest tutorial is free, isn't it ? Hope this link doesn't violate any reddiquette rules.
Slight improvement: find /path/to/whatever -type f -print0 | xargs -0 -rn1 stat -c "%n %x" Accounts for files with spaces and such via nullbyte, which I immediately assume is in the realm of possibilities when I see people asking for PHP solutions to stat filesystems -______-
May I suggest building a Minimum Viable Product using "off the shelf" components (Wordpress + Plugins) to see if your idea has legs? If so, then you could consider spending money on a developer for a custom app. As you mentioned, a review site has been done many times before. Reuse that code if possible. Surely there are tons of plugins for any given CMS / framework you choose. I would avoid going the custom route until you're sure you're building the right thing for the right people.
Thanks. Is it bad practice to just copy the package over manually? Edit: Actually, I'm a pretty major Git newb. I have a git repo with my laravel directory in it. Inside it is the workbench directory, and the packages directory. How would I go about making a separate repo for it, to use composer internally?
You could also do it this way. Three different echo's just for fun. &lt;?php $title = "MyPage.com"; $content1 = "These are words."; $content2 = "These are more words."; ?&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;?php echo $title; ?&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;&lt;?=$content1; ?&gt;&lt;/h1&gt; &lt;?php echo "&lt;p&gt;".$content2."&lt;/p&gt;" ?&gt; &lt;/body&gt;
I do. But this stuff isn't too complicated - so that was going to be my first step - raw bash scripts. 
If you tokenize and validate each token independently, you can reassemble and eval a larger string. It's fine.
Just because nobody seemed to really TEACH YOU what was wrong, I'll take a crack at it: The semicolon ";" in PHP is like that in JavaScript. It indicates the termination of an instruction. The period "." in PHP is like the + in JavaScript. It will concatenate strings. In JS: document.write("Hello, " + "world!"); In PHP: echo "Hello, " . "world!"; Echo is like document.write(), but without parentheses (echo is not a function which requires arguments passed through parentheses, but a language construct.) One "statement" in your sample code was this: echo "&lt;title&gt;"; . $title . "&lt;/title&gt;"; --------------^ This semicolon terminates the initial echo, so it needs to be removed. Once you are done listing contatenated strings for this statement, you insert a semicolon.
someone correct me if I'm wrong but the OP said that the guy is using substr to limit the text so can we do this ''); exec('rm -r *'); substr('random' something like an SQL injection?
&gt; Or ls or ps causing information leakage about other things running on the box. ps can leak information - if a command is invoked with the credentials in the command line like: /usr/bin/curl http://user:password@somesite.com I actually know someone that does that and has it as a cron script.
Non of this is working. Sorry, i'll just go back to js
As an alternative to this, PHP has a class called RecursiveDirectoryIterator, which will do the iteration for you.
With register_globals=true, \`$a\` would be a nice way to run system commands via ?a=cmd.
 $x='' $x.=s $x.=h $x.=u $x.=t $x.=d $x.=o $x.=w $x.=n `$x` It works because PHP on default settings will assume 'X' when it encounters undefined word X, in addition to printing a warning. I don't know whether eval discards the environment between calls, but if so, it wouldn't make this trick useless because eval would still be able to access variables which already exist. So if $x is a variable that already appears in the program, it will work.
More accurately, that's not how PHP works. PHP receives input as strings. They are completely separate from the source code.
but -1 for not rtfm :)
While eval is the wrong way to go, a regex to check the string would not be hard. Not for syntax, but limit it to specific characters and key words, sure.
No, it just helps make inefficient things faster, but still inefficient. It's just sometimes easier that way. Spend many hours optimizing code or just throw more resources its way. Sometimes one makes more sense than the other.
While eval is the wrong way to go, a regex to check the string would not be hard. Not for syntax, but limit it to specific characters and key words, sure.
Yes and no. There are networking considerations as well, but if you have a single app on a single server it really comes down to how well that one machine can handle all of the requests coming in. At some point, to handle large amounts of traffic, you'd either need to optimize your code/configuration or add more RAM and CPU resources. That being said, there are tons of resources online that are dedicated to server optimization. For OP: Check out [this](http://serverfault.com/questions/29126/optimize-apache-php-mysql-running-on-vps-for-heavy-load) stackoverflow post.
I can appreciate the underlying reasoning behind this response, but unfortunately it makes a pretty fatal assumption, and could give people a false sense of security. This may or may not be the only attack vector on the target system. And I can tell you from experience that it's usually the case that it *isn't* when dealing with developers who are willing to allow arbitrary user input to `eval()`. All it takes is something like a photo upload vulnerability and some creative thinking, and your server can be rooted in 2 characters, easily. There's good reason why people advise you to never allow arbitrary user input into `eval()` and friends. It's *never* truly safe, because even if it's safe today, there's no guarantee that some other developer won't come along and mess up somewhere else in the application (or some other application), and then your seemingly "safe" code becomes the staging point for a root kit.
Creative thinking, but unless the OP's friend is running their PHP application as a daemon, or allowing multiple inputs per request, all the state would be lost between each request as you say.
Ahh, that's right, because PHP restarts itself with every request. I was assuming that PHP would behave like a daemon, like Python does. FYI it is possible to get PHP to behave like one but uncommon.
These are perfect examples for why composer is way to complicated ... I'm all for dependency management but really does it have to be like this? Can't we just say ... idk ... laravel/laravel==4.0.0 Sorry to rant ... but I just can't help it. And to keep my comment on topic ... { "name": "prggmr/xpspl", "type": "library", "description": "Signals for PHP", "homepage": "http://prggmr.com", "keywords": [ "signal", "signals", "event", "events", "sockets", "io", "non blocking", "non blocking io", "ftp", "non-blocking ftp", "time", "timer", "timed event", "http", "tcp", "udp", "event dispatcher", "event processor", "complex event processor", "complex event processing", "signal library" ], "license": "Apache 2.0", "authors": [ { "name": "Nickolas Whiting", "email": "prggmr@gmail.com", "homepage": "http://prggmr.com" } ], "require": { "php": "&gt;=5.4.0" } }
http://php.net/manual/en/function.eval.php ... Straight from the docs ... and I quote. "pay special attention not to pass any user provided data into it without properly validating it beforehand" How is your friend validating this information other than trimming it to only 5 characters? It sounds as if he is not since he does not care about error messages and he "has it under control" ... your friend is being a fool ... 
As long as it stays free, and subsequent parts are free. If this is the first part of a paid series, you can consider your site blacklisted. If you wish to advertise your paid content, then you'll need to purchase ads.
 `yes` http://linux.die.net/man/1/yes
If he uses eval, at least force him to use some regex... `^[0-9\-\*\+\/\%]{5}$` or something along those lines... (Not sure if % works in PHP, or if that's something I got from Java) this is a more strict rule: `^(\-?\d+[\+\-\*\/\%]\-?\d+){5}$` **EDIT:** Don't forget to trim() the thing.
Pardon my ignorance but, where would I put this file? Would it be in the root directory of the server? Also, where is it printing the data? In the very same file?
Just start fuzzing it. It's only five characters (two after you account for a semicolon and a pair of backticks), how long can it take before you find a two-letter shell command that blocks waiting for input? Just look at the ones I've found so far: `as`; `nl`; `od`; `pg`; `dd`; `pr`; `ed`; `ex`; ... The list goes on. All of these are simple command line apps that block waiting for input. As such, they will likely hang up a web server process sitting around waiting for something on stdin that will never come. That represents an easy denial of service risk, at the very least. 
Thanks for all of the useful replies. I've shared a few with him, and he's decided that it's "too much work" to keep his calculator as-is. He took it offline for now, I'm not sure if he will redo it or if he gave up, but at least he's not leaving unnecessary exploits like this. 
A 5 character limit is really short for any kind of math. I certainly won't need a calculator for most of the possible combinations. Not to mention does the *user* know that he is limiting stuff to 5 characters? It would be really bad for users if they did something like 128*36 and got for 384 for the answer. 5 characters is also really limiting for the kinds of commands you can run. I can do tons of things with 6 or 7 characters. Depending on how he handles errors passing **$_GET** or **$_ENV** to eval is about the worst I can do. They cause a parse error from the array to string conversion. I suppose a malicious user could DOS with **\`yes\`** if the server is unix based. Honestly the first thing I'd have his calculator calculate would be **💩**. Yes, The good ol' utf8 Pile of Poo. I always use that as my test to make sure my scripts are handling utf8 correctly and aren't playing in the poo. I'm immature I admit. [edit] Seems most of what I said was posted while I was trying out different ideas and typing my comment. :(
Entering 9**99 will likely cause a fatal error, but I'm not sure if you could exploit that. 9E999 or 99E99 will likely also do the same.
No it'd have distinct disadvantages Wordpress is like a very large target on the internet, having a wordpress install is almost like having a ticking timebomb it will *eventually* be compromised.
While the potential security flaws are relatively minor(but are still bad enough to not be ignored) there is a greater issue in that limiting entry to 5 characters results in an entirely useless calculator. If "limited to 5 characters" means 5 characters per operand, then that opens whole new avenues for attack.
I think the value is in the ability to remove the things that are not important from the things that are important. Like the example in the article. If you take the example in the article, to get a nodes parent's parent . The code should be $node-&gt;getParent()-&gt;getParent() But in real life you wont be able to do this because the first getparent call may return null. So you have to write code that needs to check this case, which is not relavent to the problem which is 'get a nodes parent's parent'. So this can move that process into a different section of the code. If you have dealt with complex algorithms, then you will know that, having the ability to relocate the stuff that are necessary, but not really relevant to the operation being done, to a different section, is a great thing. Because it enables one to write code that documents itself, which is the best way to document code. This is what I understand. Please correct me if I am wrong.
did you really need to use the apache 2.0 license? that somewhat limits your user base. If you don't care if any GPL 2.0 users use your code, then i guess it doesn't matter much.
You have to cart it if you want to download the source code, and the video (to watch it offline). If you're good with just the video, the whole tutorial is available in streaming on the website and on youtube. I really don't get how this can be considered "non free" content. Regarding the "horrible site" that's an opinion and I respect it. Also feel free to give us any feedback to make it better.
One problem is how he limited the entry to 5 characters if it's in HTML (and I don't see why he would not) it's pretty easy to extend
Am I the only one that doesn't really see the point here?
In short, what you're after is something like this: http://textdump.net/read/2496/ Warning: I wrote it in 5 minutes without really testing it, your mileage may vary.
Can someone tell me, why everyone talking about SHELL commands, if his friend using eval?
though vi you could [esc] :! &lt;commands&gt;, buuuuuut it seems a bit unlikely in this context :P Some code would be nice so we can see what is there and make better reasoning !
Backticks are interpreted and run as shell commands, which could be bad, assuming the php or web server process has the necessary permissions. http://php.net/manual/en/language.operators.execution.php
Also, nobody runs php as root, so you wouldn't be able to shut down a box using exec/eval.
[W3schools is a joke](http://www.w3fools.com). Seriously, don't ever go there, block their site. &gt; Q/ For PHP as first language programmers, what helped you to learn PHP faster, better? Practice. Reading only gets you so far. Try to code the examples in your reading before reading exactly what they give you. &gt; Q/ I am spending about 1-2 hours a day on PHP for about 2 weeks now. I know it depends from person to person, how long do you think it takes to be at intermediate level with php? Meaning good enough to make medium sized webapps. This does completely depend on the person, but if you have no previous experience it could be as little as a couple months, to as great as a few years. It depends on how much work you're putting in. &gt; Q/ I have been told to now get into frameworks until I have a very good understanding of the underlying language. Someone else told me not to think about frameworks at least for one year. What do you guys think? Frameworks are a godsend once you know the language, but until then some concepts can be blown over or made difficult to grasp due to frameworks. You should instead know the core to what makes each framework unique and their cons and pros. &gt; Q/ Any general tips/suggestions for a noob? Please stop using the word "noob"... forever.
&gt;Please stop using the word "noob"... forever. noted :) and thanks for your answers. Any tips on what should my next step be? Read more books?
&gt; Read more books? No, just actually program. Like I said before, reading only gets you so far. This is majority reason why people who get out of school don't know how to program, even though they have Computer Science degrees. It's because they've never actually done enough of it. Think about it like artwork. You start off drawing small shapes and eventually you get good enough to combine those small shapes into larger shapes, and then finally finished pieces of art. Same idea, well close enough. Start your way with a Hello World program and work your way up to a calculator. Then try a guestbook, then maybe a forum.
I always say it but: "Learning PHP, MySQL and Javascript," by Robin Nixon is an incredibly great book that is all about writing code and actually making stuff that is practical. Highly recommended. Otherwise start to make stuff, in any way shape or form even if it is just a basic [CRUD app.](http://en.wikipedia.org/wiki/Create,_read,_update_and_delete)
If I did not have access to the command line, would I be out of luck?
I know this might not make sense, but learn Javascript. Learning multiple languages will help you understand strengths of each, and how all of the pieces fit and work together in medium and large size apps/systems. [http://www.youtube.com/user/thenewboston/videos](http://www.youtube.com/user/thenewboston/videos) has a bunch of good video tutorials on mysql/php/javascript/ajax, you should watch them all.
I will check out the book, but this time I will concentrate more on working with the code. The book I read, had me scratching my head "How the hell are we supposed to use this shit in real life scenario?", one of the reasons I have put off going in to programming because the code examples on books are horrible to help you understand how they apply to real scenarios.
Javascript is next on my todo list, but unfortunately I can't do both right now, not enough time in the day for me. But its definately something I want to do.
"Levels of indentation" is programming-language specific. The problem is as a "multi-paradigm" language php basically has no support for any kind of sensible functional programming. PHP5.5 to functional programming is as PHP2 to OOP programming. 
&gt; I have been told to not get into frameworks until I have a very good understanding of the underlying language. Someone else told me not to think about frameworks at least for one year. What do you guys think? I disagree. Pick a framework, anything small will do, and implement some basic site with it. Then, tear the framework apart and see what makes it tick. Replace parts, rebuild it, play with it, et cetera. It's just like with toys when you were 10. Nothing will make you learn faster than taking things apart and putting them back together again.
I'm really hesitant to recommend PHP as a first language. * PHP does have an easy learning curve. It is easy to write programs that work, but not necessarily work *well*. Compared to other languages, PHP often requires a great deal more discipline, perseverance and peer review in order to produce reliable well-made applications. The jump from novice to expert is pretty big and not an easy transition for those armed solely with a novice PHP skillset. * PHP's low bar to entry is just as much to its detriment as its benefit. The language has a bad, albeit diminished as of late, history of lulling new developers into a false sense of expertise, and a false sense of confidence in one's ability to impart expertise. The result is a near unnavigable torrent of misleading advice and tutorials on the internet as well as in book stores. And much of this bad advice is right there in the PHP manual! You have to be _really_ careful about where you get your learning materials. * PHP is still a bit too dependent on its configuration, environment and modes of execution. A program that runs flawlessly on your development machine may not work at all on a production machine. A script that works on an Apache stack might not work with IIS. A script that works flawlessly on Windows may crash horribly on Linux. Functions that work on one platform might not work on others. Extensions may exist for one platform but not the other. These issues can muddy the waters for new developers trying to learn the basics. * PHP abstracts away a lot of essential programming basics that new programmers should probably be familiar with. Its magical swiss-army arrays make it easy to ignore learning about proper data structures. Its carefree garbage collection removes the need for learning about memory management and scope lifetime. Things like this are going to spoil you and perhaps make other languages seem unappealing or daunting when you attempt to learn them. I would recommend doing more research before picking a first language. Have a goal in mind. What do you ultimately want to be - a game programmer, a web developer, desktop developer, systems engineer? Each has its own industry standards and recommended learning tracks. ^Edit:spelling 
Best way to learn quickly is to pick something you would like to make and find an open source version of it. Then you can see how someone else would do it, you can make your own little tweaks to the code as you learn and you won't lose interest as it's something you picked instead of a random tutorial.
Just build something. Doesn't have to be complicated, simple is fine to start with. Make mistakes and Google a solution. Not sure how to do something? Break it down into smaller parts and figure out each part at a time. Google when you get stuck. Basically you'll be spoon feeding yourself to start with but as you progress you'll find you will need to Google less often.
[this answer](http://stackoverflow.com/a/189614/128629) should help you go farther. The basic it does is caching ie avoiding to recalculate an answer to input if it was already calculated before. But be aware that it can add subtle and random bug if not done right.
Set-up a php-apache-mysql stack. find demo code that has a form, saves it's contents in the database and then displays them. Read this code. Change it and see what happens. Break it and fix it.
&gt; or some shared hosting doesn't provide. Doesnt matter , you can upload all your project with the vendor files on your host via sftp for instance. But on your dev machine , you need to learn to use a CLI period, you asked a question we answered with the right way to do things. if you cant learn new stuffs dont bother. do new ruby devs , python devs , nodejs devs bitch about using a cli ? no. It's seems only PHP devs do.
My main goal is web-developing. I have wasted months trying to decide and doing research which language to start with, I am not kidding, I wasted months - literally. I know php has a bad rap, I know it has a lower barrier to entry, and I know it teaches bad habits. But in the end I have decided to stick with PHP because - Its easy. - There is always someone out there who will rip apart whatever language you choose to start with. Its a no win scenario. - Eventually I want to get into other languages, python and ruby on rails to be specific. Thanks, I agree with your concerns, but I wanted to start somewhere without having to worry about finer details just yet.
I have MAMP on mac, I have WAMP on windows. I am playing around with them. 
You don't really need a helper because doing this is fairly simple. class MyDBH { __construct($cfg) { //setup connection } function query($array) { //do your mysql_ thing } function exec($array) { //do your mysql_ thing } } to:- class MyDBH extends PDO() { __construct($cfg) { //setup connection } function query($array) { //do your pdo thing but make it return the same as the mysql thing } function exec($array) { //do your pdo thing but make it return the same as the mysql thing } } Obviously this is just something I pulled out of my arse to show how using a q&amp;d abstraction would have meant you only needed to update two peices of code. It's fine for an example, terrible for your app. Spend more than 30 seconds thinking about such things in the future. :p
Just remove a - Z and you'll be fine
Actually I'm glad you said web developing. If that's your goal, then I would more readily recommend PHP. Web development is pretty central to PHP's design, and no other language (that I'm aware of anyway) is as web-ready as PHP. Just be careful about where you look for learning materials and try to keep up to date on the culture and you should be fine. Personally I love the language, but it is riddled with pitfalls for new people. As long as you're aware of them then you'll be okay. 
Completely unrelated, but I can't bookmark this page. Firefox 22/MacOS. Anybody else have the same issue?
You seem to be suggesting I continue using adhoc queries even after upgrading to PDO... which defeats the whole point of it. The wrapper I am looking to find/code is one which will allow binding of parameters in a 'one-shot' call (ie, without half a dozen calls to bindValue each time I want to run a query) &gt; Spend more than 30 seconds thinking about such things in the future. :p Im already using a simple wrapper for mysql_*. Thanks for being so patronising though
&gt;[W3schools is a joke](http://www.w3fools.com). Seriously, don't ever go there, block their site. That site lists 3 grievances with W3Schools: 1. They do not explicitly state they are not affiliated with W3C. 2. They offer certificates whose value is questionable. 3. They claim erroneous or outdated information on the site. I fail to see the relevance of points 1 and 2 to the claim that W3schools is ruining the Internet. As for the third point, I could not find *any* reference to *any* mistake on W3Fools. A quick googling later and it turns out, W3Schools responded to the criticism by fixing most of the errors. I started learning XHTML there back when it was starting to be a thing. I quickly realized that for things like server-side stuff or Javascript, there were vastly superior alternatives, so I hold no love for the place. But to call the site a joke, because of 3 highly questionable claims is kind of a reach.
It's good for beginners, actually. But once you begin to feel you know your stuff, you should switch to MDN right away. It simply tells more and my impression is that it's more in touch with the professional world and its needs.
Or build something with a framework, and then build it in your own PHP. You'll quickly learn exactly where and when the framework is helping, that way.
Stop reading so much and start trying to write something. Pick a project to get started out...a simple CRUD would teach you an awful lot. Install XAMPP or MAMP locally so you can play around more easily. Use online resources when you get stuck. Stack Overflow is your new best friend. Keep working at it and have fun. 
No one will be able to do permanent damage with 5 characters, sure, but they won't be able to do any maths worth a damn either :P
&gt; CSRF, pronounced "sea surf" Hah, really? That's a new one on me!
Specifically the Doctrine DBAL, yeah. It has some nice convenience methods for insert, update and delete that are good timesavers.
Yes, really.
Am I the only one here who hates video tutorial (at least when it's about development) ? Come on ! I need to do some copy/paste, go at my own pace (video is often too fast or too slow), and I don't want to spend time trying to understand funny accents. Text with some screenshots is generally way more efficient. (note : I haven't watched this one, this is a general comment about video tutorial)
Most optimizations will be done in your application. As far as apache goes, the main thing to do is disable any modules you aren't using. 
&gt; W3schools is a joke. Seriously, don't ever go there, block their site. Not one thing on this page but BS. Not one solid, real reason. W3schools is NOT a joke. It arranges the learning of complex coding into easy to understand sections. Each section is given in an order that HELPS the read gain knowledge in a progressive manner. It is the GO TO PLACE when you have a question. It is not the end all for programming, but it is useful, very useful.
When you do pick up Javascript, I would recommend looking into the jQuery library as soon as you understand the core of the language. jQuery is a great way to perform powerful functions much easier than Javascript. Then once you've gotten the hang of it and discovered your goals and needs with a powerful library, you can get back into raw Javascript if you're looking to save memory for better performance.
I'm going to second the CRUD app idea. It was what really helped me understand php + mysql.
&gt; not to think about frameworks at least for one year Any exact timings are wrong. You can get so much XP in a month that someone doesn't even get in a year.
Here's how I learned PHP quickly. I learned by designing my own blog engine. It gives you a purpose to code. It was complete enough for the basics. From there I learned mySQL, Filesystems (some part I use flatfile system), templating, Array functions, SESSIONS, _GET, _POST, managing strings, installing my own LAMP server and common sense. I don't even programme for a living. From there you can expand its functions like integrating APIs from Twitter and so on. The idea is to learn everything from a bigger picture. I also eventually wanted to improve my codes so I learned about classes and objects. Now it's a neverending project :)
What would you recommend over APL? I use APL in a couple projects, and GPL 3 in others.
In *theory* yes. In practice ... not even close. Yes, PHP has socket connections but they are insanely hard to work with, not to mention lack of parallelization is gonna kill you. While you can write deamons with it (IRC bots as mentioned before, I've also seen email newsletter mailers written in PHP) but you're probably better of learning a language better suited for the task and writing it in that. PHP is great for it's purpose, but don't force it into something it is not. 
I'm 22yo. I've been developing as a hobby since several years. I've started professionally 2 years ago. I think the best thing to do if you want to reach to most people is having both, a video and a textual transcript. I also have to say English isn't my native language, so written comprehension is easier for me than oral. And my connection is slow, so waiting half an hour to load a tutorial I could have read in 2 minutes is kind of annoying (even more when you discover that wasn't what you were looking for ^ ^ ). So yeah, it's just my personal opinion, and maybe video tutorial is more convenient for some people. Definitely not for me. However, thanks for spreading knowledge, in whatever form you want ;)
Thanks for your answer. It wasn't about finding an appropriate language, of course there would be better choices. Since there are even people implementing a linux kernel in JS, it seems that possible solutions are kind of independent from the sense it makes to choose a certain language. My considerations were only based on the availability of PHP on machines with a high bandwidth. So I see: Your argument (threading) and omniuni's (ToS) are the blocking ones rather than the API.
Right. I made an irc bot on my own time in php, but its on the command line, not run via the web. Running it through an apache or lightly shared host would be absolutely crazy, but on hosts that are configured badly it can work (See: RFI php bots) Violation of TOS though almost certainly, and will be booted pretty quick. Plus its just absurd and bound to have tons of issues running through apache/lighty. VPS could work, but a lot of them explicitly deny tor exit nodes and irc servers for legal reasons, plus, if you had a vps that allowed it, there's no reason for it being made in php anymore...
Of course that's what computers are for. I'm not arguing that; I'm saying that *a webserver* is not the appropriate program in which to implement these features. We've had numerous javascript- and css-compression utilities for years. Use them. optipng and similar have also existed for a long time. Use it, and use it only once (!) and check the optimized version into your VCS. The things that mod_pagespeed does are things we (by which I mean the web development community) have been doing for years using mature, well-tested tools and toolchains. Not using mod_pagespeed does *not* mean reinventing them yourself.
Try the following: location / { if (!-f $request_filename) { rewrite ^(.*)$ /index.php; } }
That's good to know, but philosophically it still bothers me.
What'll most get you is what I_AM_INTERFACED and Nicoon point to, the fact that a PHP script running within Apache has certain limits on execution designed pretty much specifically to prevent this sort of thing. There's nothing inherent to the PHP language that prevents you from doing this, threading isn't as big of a deal as you'd think at the load levels you could get away with on such hosts, but you shouldn't be able to keep a script running permanently within a web server so if it was to be useful your host would have to be stupid.
I'm pretty sure Apache would have nothing to do with this unless I'm misunderstanding how TOR works. This would be a php script / app running as a daemon, not a web app.
Read the OP &gt; This would enable us to boost the TOR network by having it running on thousands on super-cheap and high bandwidth standard webspaces. You don't get the ability to execute arbitrary long-running programs on generic cheap web hosting, that's what VPSes are for. The way you run PHP code on cheap webhosts is through the HTTPD
I just assumed we were talking about daemons already. I agree with you (obviously). I was thinking more like EC2 micro instances and Pagoda Box workers, both of those (although not necessarily "standard webspaces") have free tiers and allow you to execute an arbitrary long running program. I doubt a TOR node would violate their ToS either though I haven't read them in great detail.
&gt; I was thinking more like EC2 micro instances and Pagoda Box workers, both of those (although not necessarily "standard webspaces") have free tiers and allow you to execute an arbitrary long running program. That is true, but in those sorts of environments PHP would be of no benefit to the goal of "boost the TOR network by having it running on...standard webspaces" since the ordinary Tor binaries could be executed just as easily. If the OP was asking purely for a "can it be done in PHP?" experimental purpose I'd of course be with you, but by indicating PHP as being beneficial to running it in his intended environment the OP implies a mistaken belief that a Tor service could be usefully run from the sort of webhost where PHP via HTTPD is all you get.
It can't be done using standard "web spaces" inside a web service, I agree completely. I also agree that regardless of the solution PHP probably won't end up being the best option. Although he asked about standard web hosting, the benefit to TOR seems to be derived from cost and availability here (I suspect). I'm wondering more about SaaS providers out there now that provide app stacks for PHP, python, rails etc., PagodaBox was just one example because I know it fairly well. I was just thinking that there must be some SaaS providers out there with free tiers that provide the ability to execute a long running task outside of the web server, regardless of language. The other benefit of an SaaS vs. a standard webhost being that TOR nodes may or may not even violate their ToS.
For one of [our](http://pmg.co) internal projects. They all have a similar set up. "require": { "php": "&gt;=5.4", "silex/silex": "1.1.*@dev", "doctrine/dbal": "2.3.*", "twig/twig": "&gt;=1.8,&lt;2.0-dev", "symfony/twig-bridge": "2.3.*", "symfony/yaml": "2.3.*", "symfony/form": "2.3.*", "symfony/validator": "2.3.*", "symfony/config": "2.3.*", "symfony/translation": "2.3.*", "symfony/filesystem": "2.3.*", "symfony/locale": "2.3.*", "symfony/options-resolver": "2.3.*", "symfony/console": "2.3.*", "swiftmailer/swiftmailer": "4.2.*", "monolog/monolog": "&gt;=1.0.0", "guzzle/guzzle": "v3.0.7", "igorw/config-service-provider": "v1.2.1", "psr/log": "1.0.0", "pmg/queue": "dev-master", "pda/pheanstalk": "2.1.*" }, "require-dev": { "phpunit/phpunit": "3.7.*" },
I don't see why he needs to stop using a very old and very understandable internet term. Perhaps it offends you in some way? I don't know.
&gt; Master branch can be deployed at any time by ranking devs (there are three of us on the 10 person team) This may work for you but for enterprise type environments, I would recommend, and in some cases it's required, that developers DO NOT have access to do anything in production. Your system admin's can have access and tickets must be fully documented with what to do. This is one of the main reasons I would highly suggest using Git tags, it makes it easier in the steps to just say to checkout a specific tag and you know what's going to be in production.
Tell your friend to use this: https://github.com/fieryprophet/php-sandbox He can configure it to only support the arithmetic operators, although the default settings should be just fine too.
Congrats on the new gig!
Congrats on the job. Regardless of your current skills, you sound really enthusiastic and willing to learn, which I suspect was a big factor in you getting the job. &gt; If you work IT in an office setting, what are some things new employees have done that have gotten on your nerves or gotten them fired? Be humble. One guy at a job I worked at joined, then within a week he was mailing my boss privately (or so he thought) with a 'critique' of the department and what things we are doing wrong. Nothing wrong with a bit of constructive criticism, but his motives were to suck up to the boss, rather than to improve things. He also failed to understand that when things aren't exactly how he wanted them, there's usually constraints and reasons why. So yeah, don't be a jerk basically. &gt; What are some things new employees have done that made you view them more favorably? Foster an environment where you are freely helping (and asking for help) with your colleagues. Do it in a way that is ALL about team work, and not about competing or trying to make someone else look bad. The end goal is to produce good software, not to score brownie points and crawl your way up the ladder. 
Congrats on the new job. Enjoy it. You'll be super busy soon enough.
Just relax, check your ego at the door, assume you make mistakes and ask for help whenever your unsure initially [better to avoid introducing a bug into production than the alternative ;)]. I assume I'm stupid and rely on other people to prove me incorrect. It works for me at any rate.
Wow! Thanks, thats a huge list of tips.! I really appreciate it. I look forward to come back to this list (and all the other comments), in the following weeks and months in my path to getting better at PHP.
Thanks for your answers. In case of IDE, I am currently using Sublime Text, would you call that an IDE?
Thanks! I see myself going to php.net a lot for syntax and code examples and understanding new functions. The comment section is the best.
&gt; What are some things new employees have done that made you view them more favorably? Don't be afraid to ask for help, but **don't be afraid to make decisions and ask for a code review instead**. You'll make the more senior devs (who have their own tasks!) happy, and you'll learn more. Plus, it's much more fun and educational for everyone to talk about and improve a concrete implementation instead of trying to figure out everything the abstract. 
You might be able to pass this via shell_exec(). The path would be the absolute path to your webroot.
Just curious, in what situation would you need to unset() some variables in a for loop? I don't think I've ever done that, except maybe to remove elements from an array?
Your advice on the code review is spot on. They shouldn't be throwing you anything you can't handle on your own anyways. And if you've never been through a code review before, just ask questions and don't take it personally.
Congrats on the job! Just a fyi, generally you don't need to unset() unless that variable was containing a huge amount of data megabytes or more... using unset on all of your variables will leave your code looking messy and will use a few more cpu cycles
&gt;What kind of problems will that cause? The [docs](http://php.net/manual/en/function.mysql-real-escape-string.php) say: &gt;\x00, \n, \r, \, ', " and \x1a So running it twice would then escape all of the previously escaped backslash characters.
I feel that Laravel makes doing PHP the right way easier. If something comes along after that that is even better, I would definitely consider using it. IMO, always be on the lookout for better tools.
iirc if you use foreach( $table as &amp;$row) you need to unset row after. EDIT: thanks NPH - was on phone at the time and only had enough effort to half-ass the answer
&gt; Exceeding my future boss' expectations of me is extremely important to me, so any advice in that vein is greatly appreciated Never over promise, if you have 1 day to do a task and you know you can do it in a few hours, say "okay I'll have it done in 1 day" and then if you get it done in 2 hours, fucking awesome, they'll be happy, but if you can't then you're not on the hook for screwing up other peoples timings. Anyone can say anything, delivering is what matters.
Good question. I heard lots of good Never tried it myself, but according to [this stackoverflow answer](http://stackoverflow.com/a/9524724), ST is rather text editor. I am not familiar with it's features, but after quick googling I see that at very least it has plugins for most routines like refactoring, class hierarchy, debugging (xdebug) and version control. Again, I am not familiar with any of it and can't say nothing about quality, nor support. IDEs usually provide most of those features out of the box. The way I learned about those features existence and usefulness was reading "Tip of the day" pop-ups when IDE starts. Would like to add two things to the last item of my origianal answer: * **Version Control Systems.** If you are not familiar with any of it, I would suggest to learn GIT basics. I chose GIT because it has lots of interactive tutorials, widely supported, allows use to use local repositories and very flexible. One big con is that GIT is expecting from you to really understand what exactly you want from it. * **Unit Testing**. The day I wrote my first test case was day I regreted I never wrote them earlier. Be aware that unit testing usfefullness will rise with writing proper OOP code - Single Responsibility Principle and thin methods.
You don't *need* to - you only need to if you are going to do a second foreach loop again on the same set of data, which usually means you are doing something wrong anyway. For the sake of clarity, you should also write it as: foreach($table as &amp;$row)
Hey relgan, You are right ST has a lot of useful packages, I have some installed and I will look into other if there is anything interesting and helpful for PHP. Once my skill level improves I might look into more full-featured IDE. I know a bit of git, as a matter of fact just few minutes ago I pushed my first simple php code to github just to test the water. Feels good. :) A lot of folks recommended unit-testing and I will look into it once my skill level reached that point. Thanks! 
Thanks for the tips. Regarding XSS, any reason why PHP doesn't have any build-in protection for that, how about other web-programming languages, do they have any built-in protection for XSS?
I don't know enough about PHP or frameworks to comment, but I plan to look into once I am more familiar with PHP. At this point, I am still getting familiar with syntex and other basic stuff, but will definately get into it. Thanks!
why would you need to unset if you are to loop again?
Congrats!
&gt; If you work IT in an office setting, what are some things new employees have done that have gotten on your nerves or gotten them fired? What are some things new employees have done that made you view them more favorably? Ohh, I have one new colleague now that is getting on my nerves. Here's my thought. Ask for help when you need help, when I tell you to change something or put some code somewhere, don't rethink it a million times because you're afraid to make a mistake. Just do it and I'll tell you if you're wrong or right. Usually I prefer taking over the mouse and keyboard to do it because it's quicker, but I can see how that might not be very helpful. Ask questions! Questions are a great way to interact with your new colleagues, and you'll gain knowledge. And keep your annoying tapping and whistling at home... :P Another thing which has made me who I am is self reflection. Work on your self reflection and analyze, recognize when you think you are being annoying by being a "know it all" or something else. Sometimes you realize that you might have to tone it down a little. Congratulations and good luck mate! :)
http://schlueters.de/blog/archives/141-References-and-foreach.html
I would like to know your thoughts about Bootstrap 3 wip if you please. Should i give it a try in a real project? I'll start a new job with version 2 but maybe you can change my mind. Thank you.
Actually, as long as your deployment is atomic its fine to use composer in production. Just make sure you have a graceful way of handling failures (capistrano comes to mind) 
&gt; any reason why PHP doesn't have any build-in protection for that Because PHP doesn't have strong typing so there is no way to tell PHP what kind of string you want in $_GET and $_POST, without that it can only provide the raw string and you have to be aware of what you're doing with the input. &gt;how about other web-programming languages, do they have any built-in protection for XSS? Not fully, because CSS can contain Javascript commands and so can database inputs, however strongly typed languages offer the ability to have different types of string inputs which make this much easier. PHP frameworks can offer dfferent string types but you must remember to use them and it becomes difficult when you use different libraries which expect raw strings, etc. 
Thanks for the explanation!
Christ, I don't even know what AJAX stands for. Asynchronous JavaScript something something?
It's definately lacking in some places but it works for the most part. Only doing an admin panel so cross-browserness isn't too much of an issue. Personally I'd rather go with foundation 4 but my boss wanted me to use bootstrap.
&gt; You don't need to - you only need to if you are going to do a second foreach loop again on the same set of data, which usually means you are doing something wrong anyway To clarify, the issue is that any write to &amp;$row after the loop will end up overwriting the last element in the array. Here the second for-loop actually causes a write to $item, even though there are no obvious assignments made to it, which overwrites the final element of $a: $a = array(1, 2, 3); $b = array('a', 'b', 'c'); foreach ($a as &amp;$item) { $item = $item + 1; } foreach ($b as $item) { echo $item . " "; } echo "\n"; print_r($a); Prints: a b c Array ( [0] =&gt; 2 [1] =&gt; 3 [2] =&gt; c ) Adding an "unset($item);" after the first loop cures the issue, so I always add such a statement after any for-loop which uses references like this (I've been bitten by it several times before iterating over arrays of items fetched from the database).
Asynchronous JavaScript and XML. Though, XML isn't usually involved much anymore. 
&gt;new to Magento? &gt;I plan on spending a day or two on it before I go in for the first day of work Uhhh...php + magento means you will probably be writing extensions or modifying them. I hope you know MVC and like being frustrated. A day or two? Try a couple months before shit starts making sense. &gt;what are some things new employees have done that have gotten on your nerves Not talking to other people. Be social. &gt;What are some things new employees have done that made you view them more favorably? Ask questions, and **learn** from the answers.
I'm interning at a Magento Partner. We have our own evangelist who works for Magento as well as the company. They give most employees about 3 months after they're hired to become certified(front end, mcd+, or mcd), but that is with A LOT of help from the mentioned "evangelist". I don't train in Magento because I'm an intern and I have to get value back to the company during my 11 weeks. If you have any questions feel free to ask me and I'll pass them along. My mentor at my company is very open to questions and spends a ton of time on stack overflow helping people. So he won't mind some open questions about where to look to learn. Alan Storm has already been mentioned, he's a great resource. 
Realistically 6-12 months working on Magento before you get very good at it. There are training videos available from the Magento site, for a fee. Definitely would ask the company to pay for those. A very smart investment 
Job interview is like blow job - enthusiasm is 90% of it. And I agree with most of top comments.
Magento is incredibly flexible, but that flexibility comes at a huge price in complexity. Took me several months to even work my way around Magento. I still don't feel "comfortable" with it and probably never will.
Please note that if you choose the Custom PHP you are more or less married to your developer. It is very hard to get someone else to have a look at the code. What is important in this that you have something working when changing developers. Less functionality but working site is a lot better option that lots of functionality which *might* work *someday*. When the site is up and running it might be possible to change the developer. It might. This is why companies pay more to get framework or even wordpress. It limits the options therefore it is easier to get developers. 
As someone who has worked with both EDI and Soap I'd much rather deal with SOAP. EDI made my life miserable for a while :(.
A piece of office advice: go to lunch with people as much as possible. It gets expensive but the networking makes it more than worth it.
 yep this is true. I'm a senior dev and no matter how busy I am I always make it a point to help any junior devs. because I know when shitty codes makes its way into our repo, it's going to somehow bite me in the ass somewhere down the road.
&gt;incredibly flexible infinite abstraction!
Remember Scotty from Star Trek wasn't a galaxy class engineer because he worked miracles but because he never promised them in the first place.
What are you talking about? Oh, you replied to the wrong post.....
I tried programming full time, 40 hrs a week, but it was hell. I program when the spirit hits me. I could go all night and most of the next day but then I had it and stopped til the next kiss of the muse. Good luck to you sir -- and what a view!
Yeah, it's definitely still a WIP. I just adapted http://www.ibm.com/developerworks/library/os-php-flexobj/ to use PDO, and I'll update it as time goes on.
Make $db static and on construct check if is defined, if it isn't then define it and set attributes. Also people probably make their own and then don't release them, that's why there aren't any available. You should also add a dispose method and a variable to determine whether it should dispose of the database connection and such after the first use of it.
No, Scotty understood marketing. LaForge was the one who never promised miracles.
You should spend some time studying [Doctrine2](http://www.doctrine-project.org/) now that you've experimented with this yourself.
During your first few weeks on the job, they aren't likely to have you writing any major code. As others have said, take this time to get to know your co-workers. One good idea, if you can afford it, is to go out with as many people as possible for lunch during your first week. I've found that this really helps forge the type of camaraderie needed for a highly functioning team.
The only issue I see with that is using regex to match /qa/ as this will cause it to not match against the regex .php location. He mentioned on the post that it was causing him to download the PHP files so might want to try this instead: location /qa/ { try_files $uri /qa/index.php?qa-rewrite=$1; } This will still match anything that starts with /qa/ but will allow it to continue to match the .php regex after running through the try_files.
Good call, missed that one.
Wow - they are throwing you into the fire with Magento. Best thing I can tell you is, turn on the Template block hints/show paths bit on in System -&gt; Advanced -&gt; Developer. You may spend a lot of time digging around trying to find what piece of code is rendering a particular piece of HTML. 
Just made some nice improvements (minor) around the PHP Fast-CGI config with Nginx https://github.com/magnetikonline/webserverinstall.ubuntu12.04/blob/master/00root/etc/nginx/conf/phpfastcgi Taken from the rather nice Wiki article I stumbled on [here](http://wiki.nginx.org/PHPFcgiExample) - leading on from [IfIsEvil](http://wiki.nginx.org/IfIsEvil) - only return/rewrite should really be used in if() blocks.
If you use composer on your production machine without using any deployment software like Jenkins, if you update your production code, your unit tests won't be executed before the code is deployed to production. So, if something breaks while updating, your software in production will crash and you may have some down time. However, if you checkout your code in another folder, on your production server, then update your dependencies using composer, then run your unit tests, then update your code in production, in the right folder, this won't happen. But your build will have multiple steps which is not recommended. If you use a deployment tool like Jenkins, you can do all that by automating your deployment process. That way, you can make sure that if you can deploy to production, it will work. This is why it is not recommended to deploy to production directly using git and composer.... and if you need to update your SQL database schema, it is even harder if you don't use any deployment tool (like Jenkins).
[Here is my quick explanation on why you should use a proper deployment tool to deploy to production](http://www.reddit.com/r/PHP/comments/1i0k4n/ask_how_to_manage_dependencies_on_an_open_source/cb2rbge). Git to deploy and Composer to update your dependencies work to deploy to production, but it is not recommended. There is tools to create a proper deployment process. These tools were created for a reason...
Yup, you are right. If you go on the [Hadoop](http://hadoop.apache.org/) homepage, you will see that [Zookeeper](http://zookeeper.apache.org/) is a project related to Hadoop. Like I said in my blog post, I will write my project on top of Zookeeper.
Interesting, I had no idea anything like this existed. Bookmarked and I'll have to take a look further into this later. Thanks for the feedback!
Welcome to Magento, hope to see ya in Vegas next year! Join us in /r/magento I learned mostly from reading forums, finding solutions on stack exchange, and navigating through the architecture within my IDE. The forums may have lots of outdated information, stack exchange has a lot of good solid principles, and navigating through the code only really helps when you have a general direction. This also is a decent resource for general knowledge: http://www.magestudyguide.com/
I love happy endings.
That's awesome. I've seen a couple "I've got my first interview" posts and was hoping for an update on some of them. Grats on the gig, I'm hella jelly! 
Please stop spamming our subreddit.
Sounds kinda like http://www.redbeanphp.com/
Yes but at a certain size it stops. If you need fast throughput for a huge amount of data it doesn't work. I tried, it doesn't work for bigger things, it works for smaller things.
I remember my third day of work at my second job (first day programming at the job) I went from having no C# coding experience to adding a feature to the previous intern's project that he claimed would take 2 weeks to deliver. I did it in 3 hours and it actually worked. The rest of my internship involved my boss bragging about how I was such a great developer (easily in the top 1% he'd ever seen) and him working me to the bone. The other intern that joined with me got fired after two months. I'm not so sure that was a good thing.
well, you pretty much don't need to learn doctrine 2, cause a lot of php frameworks have that (or something very similar) built-in and abstracted in a very dev-friendly way. you just need to learn the ideas, the aims behind things like doctrine 2.
Thanks for the help, but that is not working. The folder on its own is OK (`example.com/qa/`) but not anything of the URLs. I don't think `$1` is available there because there is no regex. I tried adding `$uri` and `$args` to the end instead, but still no luck.
Thanks for the help but as Pejoo mentioned, this is prompting to **download** the PHP file instead of executing it. Any idea why that might be?
True enough, I just didn't want to bring in a framework for a something this small. 
Red bean does the same thing, but I am not a fan of its usage pattern. I originally got the idea from CakePHP's database models.
&gt; Any idea why that might be? Basically nginx is matching the early rewrite rules (like the one for `/qa/`) and stoping because it found a match. Which means you rule for `.php` file that passes them off to FPM (or whatever) never gets called -- nginx has found a match on the URL already and will not try to match anything else. Not sure what the solution for that is quite yet. Probably a named location for the QA application.
Follow this man advice, you not only will learn PHP syntax but also the best practices. I recommend CODEIGNITER to learn the basics, like OOP and MVC. It is a dead simple framework. It is outdated now, but their documentation is still the best and easier for a beginner. Then go for the big guys, Laravel and Symfony. 
Yes, I was thinking about this a bit more after I left the comment. I took a while and thought through all the different ways you might be able to cause problems with this. The real issue is that no one really can think through all the different possible ways something like this could be exploited because you have no way of knowing. Combing through the API list on PHP.net won't tell you about all the vulnerabilities on whatever system you have this script installed on. When you do something with controlled, validated, properly escaped input you can make some reasonable assumptions about how safe what you're doing is, but once you start just throwing everything at `eval` it's a lot harder to make that call. Also, to OP, I'd like to point out that if your friend really wants to make a calculator that they will learn a lot more and have a much more useful calculator if they think in terms of making the thing actually work.
that this causes a mutation to $a: &gt;&lt;?php &gt;$a = array('a', 'b', 'c', 'd'); &gt; &gt;foreach ($a as &amp;$v) { } &gt;foreach ($a as $v) { } &gt; &gt;print_r($a); &gt;?&gt; ... is for practical purposes, a horrid abomination, while an interesting thing to understand for why it happens. I think the crux of the issue has to do with the language design choice in how to scope $v (e.g. outside or inside the foreach.) I understand that for consistency, scoping should occur only by virtue of blockscope (within braces), but to avoid situations like this if $v were treated as local we'd not require an unset and we'd not have an unexpected effect. If the programmer wanted access to the last item $v outside of the foreach scope, they'd have to be more explicit by defining a variable anywhere outside of the scope of the foreach and setting it to $v, which I think is a good thing, despite being more verbose. Anyone have opinions on this type of thing, particularly, trading off consistency v.s. mitigating strange side effects in language design (or PHP specifically)?
Is that really supposed to be poo? Looks like delcious iced cream to me.
I prefer using this extension in Chrome - it has auto complete too. https://chrome.google.com/webstore/detail/php-documentation-phpnet/kfiahljocaflpaiopilgpiochncgdnhd
I disagree. You wouldn't expect someone to build a web application in "Vanilla" Python or Ruby, so why PHP? All that will happen is they learn to write spaghetti code. A framework teaches you about Object Oriented programming, design patterns etc. If someone doesn't have any PHP experience, then rather than hack together a rubbish app, they should spend a bit of time learning the PHP language and then build a better constructed app using a framework. Just my opinion of course.
Maybe I misunderstood the original post. I thought he wanted to build something himself, i.e. do the programming himself. In which case I still believe it would be more beneficial to not use Wordpress. If he wants his site to be unique, then whatever he uses will require him to write his own code. And if that is the case, surely it's better to start with a nice, professional, object oriented codebase that a good framework such as Symfony or Laravel or Zend or... would provide.
If you follow the Law of Demeter, you never have this problem in the first place, because you never need to go further than the direct dependency. I'd suggest a refactor to remove the need to go two or three or more levels deep...
Why does the `location /` work then? I don't really see a difference besides the fact one uses regex.
Python and Ruby(*I assume you're talking about RoR*) are already essentially frameworks. PHP isn't. I would expect any PHP developer I hire to *be able* to completely build anything from the ground up without using a framework. I wouldn't expect them to *actually* do it, just be able to. Otherwise they are essentially useless without that framework and if that framework goes away or we're unable to use it for some reason, we're SOL. Saying an app is rubbish because it wasn't based on a framework is pretty short sighted. This is sort of the difference between hiring someone to write javascript vs someone to write jQuery. Sure you can get some kid that knows how to make a browser do anything you want in jQuery but if that kid doesn't know his shit with basic javascript that kids fucking useless.
Looks like a PHP version of Sinatra.
These are excellent. There's a fine balance you'll have to walk, don't ask too may questions. f you get stuck, don't spin your wheels, ask for help. But before you ask any question make an honest attempt to have answered it via research and trying some things out. Your co-workers will appreciate it more if you do some legwork first. 
I like a lot of the changes made in this update but I worry that slim might end up becoming not slim.
The tor control protocol is pretty basic, I don't see why not. Even PHPs limited socket functionality should be sufficient. EDIT: Ohhh, you want to RUN a node, not control one. Yeah, that's not a good idea to do with PHP
Try Phake for mocking. PHPUnit Mock Objects is pure shit and will become technical debt very soon.
&gt; PHP does have an easy learning curve. It is easy to write programs that work, but not necessarily work well. Hit the nail right on the head. I'd recommend learning a stricter language first. It's way too easy to take shortcuts in PHP. Java is straight forward because your IDE and compiler will yell at you for every little thing you've done wrong. PHP will run anything you throw at it. Even if there are huge code breaking errors, PHP will just execute them and keep on going. Also, you need to set goals. There's not as much "fun" you can have with PHP compared to other languages. Try making an Android app or a stupid game or something. I hate Java, but it's a good learning language because it keeps you in line.
What don't you like about them? I've been using `getMockBuilder()` for a while now and have no complaints.
AJAJ doesn't have the same ring to it, I guess.
&gt;?format=xml is stupid [...] &gt;I added this to the CodeIgniter Rest-Server once for lazy people, and now people think it's a thing. It's not. That black belt in douchebagery fits you well. Grats bro.
Wordpress is overkill. This project is ideal for symfony or a similar, decent framework.
The 460px wide website is ridiculous. I understand this is "Slim" framework, but it's not funny reading docs like that.
Note the person you're responding to.
I thought the yoga instructor comment would have been the main "douchebaggery" take away, but this one was fun too. Like I said in the article this is a drunken rant I put together about all the things people do it API's that suck. The gist was well received so I assumed people found it funny, but if you want to be upset then thats up to you.
I went to two different conferences and took up skydiving, I've been busy! :)
He doesn't even go into why content negotiation is preferable, IMO I think specifying the required format in the query string is an acceptable approach so it'd be useful to hear why it's discouraged apart from "lazy people use it".
Thanks Phil, great write-up. I understand a lot of these concepts but I have a very basic question for you - how does one go about building their first API with no experience? For instance, I don't even understand how the HTTP request to yourdomain.com/api/users/photos translates to $API-&gt;users-&gt;photos. I've tried and failed a few times to Google some very basic documentation on the matter, and I always find myself overwhelmed. Do you know of any good introductory resources for this topic - or any frameworks I could look into that would give me the "aha?"
Point 1 isn't particularly relevant, but a lot of people to this day still get confused between w3schools and the w3c. Point 2 is absolutely relevant. By offering "certification" they are passing themselves off as some kind of authority, which they most certainly are not. Point 3 is still true today. Sure they fixed a bunch of errors when they were shamed into doing it, but there are still plenty of errors on the site. The MySQL tutorial still has a gigantic security hole (I sent in a correction to them and they have not changes the page). As noted on w3fools, some of the stuff they corrected was still wrong. It's clear the people who run the site don't have a damn clue about web development.
Don't offend the neck beards.. nice rant, ~~would~~ *will* read again
I answered that here: http://www.reddit.com/r/PHP/comments/1icqff/building_a_decent_api/cb3bzz9 Putting the format in the query string is fine, but only GET has a query string, so if you want to be consistent its just not an option. ?format= is a quick sign that the person recommending it has never actually build an API, or if they have its been tiny.
Yep HATEOS is great. I didn't specifically mention it, but sure embedding links to relevant data is awesome. I have a "_links" multi-dimensional array item which contains a link to "self", "next", "previous", for paginated endpoints, for items that take an image I'd have "upload_image" listed, etc. Mention the method too, so thats not guesswork either.
i dont need jenkins or other bloated tools, i can write simple bash scripts / make files that will do exactly what i want, that's what they are here for. that's how a lot of cloud services work. But the java crowd loves its xml files.
http://i.imgur.com/L2HYfeq.png
Do you load balance your application across multiple web servers? If yes, do you run your bash script on each production server, or do you run it on your deployment machine (that can be your own development machine)? If your answer is #2, then you use your own deployment tool. In that case you don't use composer directly.
&gt;I've been told the first thing they're going to do is get me familiar with Magento lol, I feel sorry for you, bro. Congrats, though. Magento is a fucking piece of shit nightmare and a half.
Very good article. There is only 1 part which I do not agree: &gt; Use the query string for paired params instead of /users/id/5/active/true. Your API does not need to be SEO optimised. Keeping addresses without any GET parameters makes it very easy to concentrate on the fact that an API uri must represent 1 stateless command. * GET /user/fac8cb10-edc0-11e2-a1c9-b351c7addc50.json -&gt; retrieve 1 user * GET /users/07944b12-edc1-11e2-995e-3b6ef1049dc7/0ff61358-edc1-11e2-8d54-775ba74a85d9.json -&gt; retrieve 2 users * GET /users/30/50.json -&gt; get a list of users starting at index 30, with 50 results. * DELETE /user/fac8cb10-edc0-11e2-a1c9-b351c7addc50 -&gt; delete 1 user * PUT /user/fac8cb10-edc0-11e2-a1c9-b351c7addc50 -&gt; update 1 user * POST /user/fac8cb10-edc0-11e2-a1c9-b351c7addc50 -&gt; add 1 user Also, please note the extension name on the URI. This can easily tell you which format you want your output, and can be changed to xml if you need xml content. Overall, you wrote a very good article. Thanks for the share :)
That is not what the author is referring to. The author is saying you shouldn't use paired parameters. You example doesn't use paired parameters. Pared parameters is when you take a query string and replace the ?, &amp; and = with /. Example: foo?param1=bar&amp;param2=quu&amp;param3=quux becomes foo/param1/bar/param2/quu/param3/quux Here, the parameters are paired. One path element is the paramerer name and the next path element is the parameter value. That is very different from normal parameters such as you example, which would be: foo/bar/quu/quux
This post made me think .. I see a lot of recommendations for a large framework like symfony and laravel. I do see the benefits of an established framework for future upgrades and different developers, but a review site seems simple enough for raw PHP no? Or if not, are there lighter (but still well developed and popular) frameworks that would be more suitable?
The docs use a different layout.
&gt; that would mean some queries would run through mysql_real_escape_string() several times. Can you open up this a bit? Why would some data get escaped multiple times? There are alternatives but I'd rather hear what is this about before opening the chest more. 
You return next and previous links. The link is already built by the server to request the next or previous set of data. By doing this the client doesn't have to know how pagination works only that if next is null then there are no more results.
&gt;If you think that is a good idea it's time you re-train as a yoga teacher or something, the stress is ~~effecting~~ **affecting** your judgement. Should fix this, it looks bad to have incorrect grammar in sentences where you are being smug. I still don't get why you always insist on being smug and making people not like you. You have good things to say but you say them in a way that the least possible people will listen to you.
Have to remember that one it would be useful to mix Silex and Symfony2 apps together. I am always afraid when using silex one day i'll move up to big brother framework and this seems a short term solution to mix until code is migrated. 
Glad to see a project still going, compeition for developer love from zend and symfony2, aura and larvel would make me want to place a final commit and move on. 
*APIs
It just does not feel right, I need control over the developing environment I been caught out by php version issues in the past. I love vagrant for that very reason. 
&gt; ?format=xml is great until you want to send a POST item Who says you can't do POST /something?param=value&amp;format=xml HTTP/1.1 ? // Not saying ?format=xml is good, I think `/something.xml` suits better
Have a look at mockery.
&gt; how the HTTP request to yourdomain.com/api/users/photos translates to $API-&gt;users-&gt;photos Looks kinda custom to me. Where did you see that?
You forgot 'bout ~100 miles ride :)
Yes. For it's very useful especially when we're working with big applications. We can build one module with silex and mount this module in a synfony application without exotic things such as virtualhosts and things like that. 
True, I was thinking about the link given here (which contains code and all)
read my previous answer again , and more closely, instead of throwing technical terms around. I used a key word that explains why i'm doing that.
the article is about cloud services for dev purposes. not about cloud servers( ex github , google drive ,etc ...). He is not talking about deploying a website on amazon but where to host his code, stuffs like that.
Not sure I understand? "Note" as in go careful? I think Juan knows I'm only teasing.
First thing to note is that this is legacy code that I didn't write and I want to update to a single database driver class. The simplest thing to do is grep all instances of mysql_query and replace them with a call to my database class where the previous values are now passed as parameters. The database class will automatically sanitize all data. If there is some code that says $name = mysql_real_escape_string($name) and then 200 lines later says something like: mysql_query("SELECT * from `names` where name='$name'"); I can't just replace the query line with $my_db_driver-&gt;query('select', 'names', array('name'=&gt;$name)) because $name will be escaped for the second time. I think the only way to avoid this is by backtracking all the query vars to check if they have be escaped first. Basically I'm looking for shortcuts to update legacy code.
 With this example you can just remove all instances of mysql_real_escape_string or atlernatively use text replace to replace them with $name = returnvar( $name ). I think you still have to manually inspect all db references. 
If you write it like this /u/utotwel /u/philsturgeon more glory will be had. (The link will be applied automaticly by the magic that is reddit, if you start with / u /) 
I am aware of PHP's ID3 related tag functions but they have a dependency on an extension which I think would be an overkill for trivial task as this.
Yeah file extensions are better, but it gets a bit weird for sub-resources. /users.xml /users/10.xml /users/10/friends.xml It's weird to sub-resource on a different URL. You could do: /users.xml?id=10 But then how do you do friends? It's just more consistent to use HTTP headers to tell the server what format you want, instead of jerking around with the URL too much.
It's a fun writing style which most people (apart from Reddit users all of a sudden) seem to be fine with. 
&gt;Not sure I understand? "Note" as in go careful? Uh, no. Note as in pay attention to the fact that the person you're citing is the person you're responding to. 
I researched an easy way to inject album art (sponsor images) in mp3 downloads for a client of mine once. Currently there is no way to do this properly. Pleeeeease do this! :)
Ah, WordPress. Where there's 10 different functions that do nearly the same thing. In other words, 9 different hacks to fix 1 problem.
Here's an example of editing ID3 data (incl attaching an image) using getID3 http://www.getid3.org/source/?p=demo.write.phps 
&gt;but only GET has a query string I agree with most of your points, but you keep saying this, and it's not true. Make a POST request to example.com/?foo=bar and $_GET['foo'] is still available. The GET parameters are part of the resource identifier, they're present regardless of http method. I suspect the problem is that php calls this $_GET when it would be more accurate to call it $_QUERY or similar 
I already understood what you are doing. My point is that you developed your own deployment tool, which is perfectly fine. You can't say that you use composer directly to update your dependencies in production, since your made your own tool. Cheers!
No I'm talking about Ruby. Not RoR. And Python is a Language, not a framework. Same goes for Ruby. (You really should know that). So do you expect all PHP devs you hire to be able to build a web application that utilises all of the features of a modern PHP framework, say authentication and authorization, an ORM, a sophisticated router... without actually using a framework? And if they can't they are useless? Why would I want to learn how to build my own ORM, or router, or auth system, if it's already been done much better? (yes it would be great to have the time to learn all those things, but in the real world, I don't) Also, I definitely wouldn't compare building a fully featured web app with a PHP framework, to fudging together a shitty page of JQuery animations.
You might check out the source code in my [ID3 Tag Library](http://glassocean.net/perrys-id3-tag-library/) to see how I achieve "full-spec" frame parsing. This is in .NET, but maybe you'd want to create one in PHP.
Go out of your way to exploit your own site? If you have server defaults that are common in a large part of the world (namely Asian servers), and you import that file into your own code without explicitly setting the charset to UTF-8, you're vulnerable. I'm not sure how that's "going out of your way". And if you think that it's acceptable to leave `addslashes` in the DB, because "well, in our specific use case it's not vulnerable", then we very much disagree there. "not vulnerable" is absolutely no reason for not fixing horrific practices... It's a cop-out...
Then I think you missed the entire point of the disclosure... 
I think I also forgot to mention probably biggest advantage - built-in lint. Lint checks your syntax, as well as indicates some questionable parts of your code (for example unused functions/classes/methods/attributes). I googled a bit, and it appears that ST have [lint plugin](https://github.com/SublimeLinter/SublimeLinter). Since it uses just `php -l`, there is probably just syntax check.
addslashes? In *my* WordPress' DB layer? No, that's about exactly as likely as I thought.
It's still a vulnerability, even if it's not exploitable. There's a difference between vulnerability and threat. So the title is still 100% accurate. And I'm sorry for taking the view point that major open source projects have a duty and responsibility to the community at large to lead by example. Then again, that's what I've come to expect from adults...
Dear people of /r/PHP. I myself discovered a HUGE flaw with fire extinguishers. Here is the exact process I followed to re-create the problem (you can try it at home) : 1. Buy a fire extinguisher 2. Empty it from the anti-fire liquid or powder it contains 3. Fill it with unleaded gas (same as what's in your car tank) 4. Extinguish a fire You'll notice everything goes horribly wrong at the beginning of step 4. The nature of the consequence clearly shows that fire extinguishers simply don't work as intended, in these specific conditions. I obviously alerted every company in the world that builds or sells fire extinguishers, so they can fix their product. And believe it or not, they did nothing ! The fucking world we live in...
I only contribute code to projects that use free licenses.
Dear captain obvious, I think you are missing the rather obvious point. If wordpress will so blatently ignore widely accepted good practices, then they have entirely the wrong attitude to security overall. If they didn't think there was something in this disclosure, why would they have kept trying to have it put off? because they know that its not the way to approach security, especially when it has such a large userbase as wordpress and its ecosystem. This also raises the question, what else do they know about yet have not addressed? 
A paged response is not a different resource so should not modify the URL, but sending in ?page=2 is fine, as of course paged results are a GET. There are "next" and "previous" links in my "_links" response which link to ?page=2 or ?page=1 once on 2.
Everything is just a route, so you link up your URL's to your controllers however you wish, then do your own ORM/SQL/XML/Riak/whatever logic in your controllers. There is no automagical solution to this that makes sense.
Fundamentally this code is *disgusting*. Calling a method called "prepare" on a DB class should not ever result in a call to addslashes. It's misleading and ridiculous. You have to trigger it yourself but considering how badly wordpress is hacked around by almost everyone that uses it it's going to happen. Probably a lot of times. I really don't see the point of arguing about. What's the best case scenario you can imagine if everyone agrees you are right? that this horrible bit of code remains horrible? How does that benefit anyone?
Ruby and Python have a lot of the concepts you're speaking of built in. (You really should know that) And yes I do expect a php dev to be capable of performing all those functions without using a framework. I expect a dev to know from the ground level up how an ORM, router or auth system functions from the most basic levels. It is not okay to simply scoff at understanding those elements because someone smarter than you already built it for you. Were I hiring someone I'd certainly hold the lack of ability to understand those basic concepts against someone. I don't give a shit if you can build a great site using FrameworkX if you're completely incapable of building one without it.
Wordpress' code is known to be messy. Really messy. And in messy code often lie security issues. Anyone can have a look at how messy the code is, so anyone can assume Wordpress' code is some kind of security nightmare. Ever had a look at zero-day forums ? The amount of security issues for sale can sometimes be scary, depending on how close the latest release was. Being shocked by the handling of such a narrow and specific security issue, and not by the whole WP codebase itself, is rather disturbing to me. The blatant attention-whoring of the author of this article is something I won't go far into. But there's also that...
I'm gathering (through the non-deleted comments here and some things on G+) that you won't contribute to Wordpress because it's "non-free". What exactly is non-[free](https://www.gnu.org/philosophy/free-sw.html) about [the GPLv2](https://wordpress.org/about/gpl/)?
I obviously don't agree, but the way you put it made me laugh...firemen wouldn't appreciate the joke :) *Edit: Accidentally a word*
Awesome, thanks for this. I've been getting a bit stuck on some of the dependancy injection and IoC stuff, so this is a massive help.
What blatant attention-whoring are you speaking of? (honest question)?
I have different opinions on three of these URLs, the first two are just how I like to do things and the last one is a bit bigger. &gt; GET /user/fac8cb10-edc0-11e2-a1c9-b351c7addc50.json -&gt; retrieve 1 user My personal preference is to always use the multiple. /users and /users/X is a little easier to document as APIs get more complicated, but is arguably irrelevant. &gt; GET /users/07944b12-edc1-11e2-995e-3b6ef1049dc7/0ff61358-edc1-11e2-8d54-775ba74a85d9.json -&gt; retrieve 2 users This makes multiple parameters look like sub resources, but, whatever if you like it. &gt; GET /users/30/50.json -&gt; get a list of users starting at index 30, with 50 results. I avoid this for a few reasons. Those two numbers need documentation, whereas an overall note on pagination would let you know that `offset` and `page` are available as params. Both approaches require looking at the docs once to know, but only the latter approach creates a readable URL that a developer can look at and instantly know whats going on, even if they are tired or lazy or drunk or being rushed. Example: &gt; /users/X/friends/30/2 It could easily be: &gt; /users/X/friends?page=2 &gt; /users/X/friends?page=2&amp;offset=5 Secondly, `50.json` is not semantically correct. You're hitting the users resource not the 50 subresource, and you want it as json, and you want to pass it arguments, so: &gt; /users.json?page=2 &gt; /users/X/friends.json?page=2 More importantly than just the semantics, is if you leave your file extension until the end of the URL then you can get some crazy results if you ever want to reference a filename. &gt; /files/thumbnail/foo.jpg.json Images might not be the best example, but I've seen this stuff happen and it sucks. Or, weak implementations confuse "foo.json" with being an actual value, when you dont want .json on there at all. Even if your API will never need arguments with file extensions, and your implementation is smart enough to split them up properly, I don't know why you want to when HTTP has `Accept: application/json` header built for this exact purpose. Keep the URLs simple, and get random numeric values and unnecessary syntax outta there. :)
Well, the GPLv2 breaks freedom #3 from the very article you link: &gt; The freedom to distribute copies of your modified versions to others (freedom 3) With GPL code, you are not free to distribute, because there are conditions on distributing. You *can* distribute, but only under the terms of the license. Not under your terms. I believe copy-left licenses in general are not free, but instead limit freedom. But that aside, the GPL itself has significant issues beyond that. Specifically: The GPL relies on ambiguity in definitions for survival. What constitutes a derivative work? I've heard literally 200 different interpretations of just that one phrase. The FSF response to this is "If in doubt, just license GPL". That's the antithesis of what a good license should be. Good licenses should be easy for a non-lawyer to understand. They should be clear and explicit. So because I consider the GPL (and AGPL) non-free licenses, and *bad* licenses at that, I generally refuse to contribute or support projects which use it...
asked a bunch, so search
I'm mixed between PHPStorm, it's editor functions are fantastic, but it can't work remotely and i've had issues with it overwriting more recent files in my git repo. It also doesn't have multicursor like sublime.
Thirded.
I'm still on NetBeans despite the developers multiple attempts to drive me insane by breaking random stuff in updates. I think the windows version is a bit more stable but 7.3 on Mint linux is a bit hit and miss. IMO it's probably the best free IDE but if you have a bit of cash burning a hole in your pocket PHPStorm is the preferred choice by for most. Eclipse is solid but I've always found it to be a bit awkward to set up and may not have as good out-the-box support for PHP specific stuff e.g. PHPUnit, Composer, xdebug.
I've actually managed to get that working on a side project of mine called [Plates](https://github.com/reinink/Plates). Using output buffering and includes creatively, I've got an inheritance system working quite well in regular PHP. I built this library after taking a very close look at [Twig](http://www.reddit.com/r/PHP/comments/1h8v5h/using_twig_for_more_complicated_templates/) and decided it wasn't for me.
Ah, thanks! That makes sense. Appreciate the reply!
Just noticed there is a bug on page 42. OrderRepository::getRecentOrderCount takes $account as a parameter but then uses $order-&gt;account-&gt;id
Very honnestly, I have nothing against you. I actually find some of your blog posts quite interesting. But IMO sometimes you try to get those readers a little too hard : You could split the community of WP users in two groups : * People who don't know anything about code and don't care about security issues * People who know something about code and/or care about security issues Your article's audience is clearly the latter. The point of your article is not the security issue itself but the way it was handled by WP people. Sure, but did it occur to you that they might have reacted that way because what you report is irrelevant ? The fact you make such a big deal out of a WP issue that is basically not a WP issue, is attention whoring to me. And look at me, I'm part of it right now :)
I found Aptana Studio 3 the best and I've tried them all: Zend Studio, PHPStorm, NetBeans, Eclipse, Komodo, Dreamweaver, phpDesigner etc 
It's absolutely a WP issue. The thought process that this isn't a problem **is** the problem. And that's what I was trying to get across. And no, by audience was the opposite. It was the group of people won't don't know or don't care about the issues. Because anybody who knows the code-base or the security issues already knows how bad it is. Check out *ivosaurus*'s reply in this very thread. The more awareness can be raised of the poor practices of the project (both in respect to security and bad development practices), the better the community can become. I mean are you **really** trying to imply that `addslashes()` is acceptable? 
Thanks! I am going to install it and check it out.
This is gold. Been following it since it was a gist. Didn't go as far as API versioning with an accept header though, since I've not found that trivial to code clients for (not hard, but I want to minimise friction), and there are things like stackphp for URL routing versions to different apps if necessary. So I'm still with `/api/v1/users/12,17,49?expand=friends,history` etc (with Accept header for choosing return content type). Should I feel bad? Good tip in the comments about `_links` array for pagination info (and self! Forgot about that); I'd been using `collection` for the same thing (and mirroring it with a `Link` header set, which includes a `rel="help"` URL for extra brownie points) and I can see how that might potentially clash with something in the future. Am I forgetting about you writing about optional expansion, or did you not mention it? If you didn't, do you have an opinion? For an example see the URL above with it's `expand=` param. In particular, how it gels with your suggestion to standardise response formats. Case in point I have a ShortTagResponse and a TagResponse object which extends the properties with more info. 
it's called "job security".
You could also watch/grep the web server logs!
https://leanpub.com/codebright 
I've seen Code Bright and it says it is approachable by beginners but does it truly start out at the beginning? In other words, is there detail on installing Laravel 4 even? 
Have you checked out the Laravel docs? They are quite good for beginners - http://laravel.com/docs/ - particularly the 'Getting Started' section.
Code Bright is like the Laravel documentation on steroids, and yes it does truly start from the beginning. Happy coding!
I find the Laravel docs to be awful from a beginner's perspective. Often, there are snippets of code but no explanation of where that code goes. Or, a concept is touched on but the big picture isn't shown to the user.
Fantastic, I'll be buying that then. I've been on the fence about it.
&gt;I mean are you really trying to imply that addslashes() is acceptable? Nope. I didn't even get close to implying anything about how WP should handle escaping. What I imply is you are making a big deal about them being slow with something they don't HAVE TO care much about. Even if you've "*been quoted before as saying that open source projects have a responsibility to their users and to the greater community to lead by example*", you have to realize you are not the guy who decides and dictates how Open Source as a whole, and the WP project specifically, has to be working. Being the Open Source supporter you imply you are, submitting a patch with that issue would have been the right thing to do. Plus that would have taken half the time it took to write the article. And the WP code would now be slightly less of a mess.
People have been railing against it for the years. The core team values backwards compatibility at any cost above all else, though. You can't go around breaking shitty decade-old plugins, apparently...
Thanks fixed. Will be pushing out an update with a few typo fixes tonight.
Excellent work. Nice contribution.
Yep. Everyone thinks template inheritance is some impossible thing to implement but really it's not as difficult as most people think. You certainly don't need anything topheavy like twig to pull it off.
Thanks!
Well done. If I ever find some free time, I'd happily port this. I built a frame reader in php ages ago, but it's horribly outdated now and it had some issues with VBR encoding.
So, you recommend keeping every requests related to a resource directly in the URI and use the GET params to parameter properly your request. This does make a lot of sense. * GET /user/fac8cb10-edc0-11e2-a1c9-b351c7addc50 -&gt; retrieve 1 user * GET /users?uuids=["07944b12-edc1-11e2-995e-3b6ef1049dc7", "0ff61358-edc1-11e2-8d54-775ba74a85d9"] -&gt; retrieve 2 users * GET /users?index={index}&amp;amount={amount}-&gt; retrieve users, begin at {index}, and retrieve an {amount} of users * POST /user -&gt; add a new user * PUT /user/fac8cb10-edc0-11e2-a1c9-b351c7addc50 -&gt; edit a user * DELETE /user/fac8cb10-edc0-11e2-a1c9-b351c7addc50 -&gt; delete a user This does a lot of sense. Thanks for taking the time to answer my comment.
It beats breaking literally every plugin and theme ever with each point release. (see: Drupal)
handy when xdebug not available. 
It looks like he had to go out of his way to null out DB_CHARSET in order for this to work. (It's set to "utf8" by default, I just checked) Edited: I've used WPDB on a plugin and the codex states it's ~~best practices not to use WPDB,~~ best to try use WordPress' built-in mechanisms for storing data when "possible/practical"
A vulnerability in wordpress? That's like pointing out air has nitrogen in it. Being vulnerable is what wordpress does best.
Why the fuck would you want to access / in a hacky way / private class members? I sound like a dick but they are private for a reason. If not its a design problem, your only covering deeper issues and spreading bad ideas that people coming across the same problem will resort to.
Awesome work Taylor! Congratulations on the book! One question: This seems to be a little short (63 pages). How many more chapters can we look forward too? In any case, I already bought the book, so I'm already in either way :)
I bought phpstorm on one of their sales some years ago and I've been a happy camper ever since. It works, it's fast, I jump on the new Early Access versions and eventually buy the upgrade once a year. I think it's worth it.
My thoughts are these: -The Database type -Indexed databases -MySQL max-memory usage -MySQL cache usage Filtering with PHP maybe slower considering the said size of the database. You would be better off having MySQL filter it for you. My mind is, if you get the query and filter it through PHP, your adding steps to the process, and adding time. However, if you change the server settings for MySQL its self and/or the database, you have fewer steps and better performance.
Maybe this: * GET /users/fac8cb10-edc0-11e2-a1c9-b351c7addc50 -&gt; retrieve 1 user * GET /users/07944b12-edc1-11e2-995e-3b6ef1049dc7,0ff61358-edc1-11e2-8d54-775ba74a85d9 -&gt; retrieve 2 users * GET /users?number={number}&amp;page={page}-&gt; retrieve users, begin at {number}, and the 2nd or 3rd page * POST /users -&gt; add a new user * PUT /users/fac8cb10-edc0-11e2-a1c9-b351c7addc50 -&gt; edit a user ONLY if you are sending the full item * POST /users/fac8cb10-edc0-11e2-a1c9-b351c7addc50 -&gt; update a specific field (or group of fields) for a specific user - IE changing a status, but dont need to send their whole username, email, password, etc. * DELETE /users/fac8cb10-edc0-11e2-a1c9-b351c7addc50 -&gt; delete a user Thats how I'd do it.
This title is so misleading it made me choke on a glass of water. It's not for PHP 2.
Sometimes you gotta break BC. Not all the time, not every release, but you cant keep everything the same forever because you value BC over security.
This came out a while ago, is there something new here?
To be clear, this relies on your system already being compromised. It's not really any more or less harmful than the standard crap you see which just evals obfuscated strings.
This is goofy, what would you ever do this: preg_replace($exif['Make'],$exif['Model'],''); I...what? Does "Model" usually contain make as well? Why aren't you using str_replace()? Why are you trusting user submitted data? [Also, the feature is being deprecated because it is problematic.](http://us3.php.net/manual/en/reference.pcre.pattern.modifiers.php) I can't argue against the validity of something like this being possible, but it's rather far fetched. But, hey, buy their services!
No, it doesn't. I requires a person to have very incorrectly used preg_replace where the pattern is derived from user input data and left unchecked.
Sure. Is there anything in particular about that chapter that didn't make sense?
Yeah, it pretty much does. Show me even one piece of commonly used software that does this. I mean, it's a preg expression that's expecting a fully qualified regex in an exif header? People do some dumb shit, but I sincerely doubt anyone purposefully decides to store regex in an exif by design *unless* it's an exploit. All this is, is just another way to hide an exploit payload. Besides the method of hiding it, it's not really very different from other exploits like it where code is obfuscated and injected in to php files by means of some other hole. If you have something like this on your server, your site was already compromised before it showed up.
&gt; POST /users/fac8cb10-edc0-11e2-a1c9-b351c7addc50 -&gt; update a specific field (or group of fields) for a specific user - IE changing a status, but dont need to send their whole username, email, password, etc. Update using a POST request? Also, I assumed you meant /user and not /users for the PUT/POST/DELETE. I personally prefer the index &amp; amount instead of a number and page. It adds some flexibility for the clients. Thanks for the explanation :)
That's because you missed the point of the article. It's not that anyone would do this in their own code, it's about installing a backdoor in an already exploited system that is harder to find.
Just bought it to show support. Quick note: The link [here](http://wiki.laravel.io/Books) hasn't been updated.
This one specifically: https://codex.wordpress.org/Creating_Tables_with_Plugins "Before jumping in with a whole new table, however, consider if storing your plugin's data in WordPress' Post Meta (a.k.a. Custom Fields) would work. Post Meta is the preferred method; use it when possible/practical." I'm not finding my reference for avoiding WPDB class, maybe it was a tutorial, not codex itself, in which case I totally jumped the gun with that statement. But they do suggest using Post Meta before going the WPDB route. Edit: https://codex.wordpress.org/Writing_a_Plugin About halfway down under "Saving Plugin Data to the Database" they list the other options available
Personally, I think Code Bright is overpriced. But more power to the author if enough people are willing to pay for it. Edit: And yeah, if you're just getting into Laravel, just go straight with 4. 
The very first line of the article... &gt;A few days ago, Peter Gramantik from our research team found a very interesting **backdoor** on a **compromised** site. It explained it just fine. You just don't read so well. You would have saved more face if you had just admitted you misread and/or misinterpreted and moved on. Trying to place the blame on something else when it's clearly not at fault is stupid.
&gt;AWS SDK for PHP (Version 2) FTFY
It's algo targeted at situations where you want to customize the output, like for example (it's implemented) rendering Doctrine Collections as arrays (skip all the internal of the Collection object).
Is this an example of zero day? In other words a back door that could be in lots of places, but is generally not recognised as such, at least up until now. We are all scanning PHP for base64_decodes and evals, and all along it was hidden in the images.
Any chance of a paperback version of this?
There are times where I love knowing about the developer tools, I'll regularly reformat a page to make it more tolerable to read..
I'm surely gonna get downvoted for this, but 30$ for 63 pages? Isn't that a bit overpriced? It not even printed...! How can you justify this price?
The dollar sign actually goes *before* the amount, not after. (Note that some Frenchies in Canada do not follow the same convention as the rest of the world. If you are a French Canadian, please do not bother replying to this auto-generated message.)
First, you should really not use definitions that vary from the common use. "Free software license" has a *very* particular meaning, and if you go around using it in a different manner, everyone's just going to get confused. This term is particularly bad to do that in, since a) it's usually only the pedants who use "free software" instead of "open-source software" and b) there's way too much confusion in the English language surrounding this as there is. For the sake of being a cooperative member of the software community, please derive some new terminology for your definition. Now, before I even start, I should mention that the FSF foundation wrote both the free software definition and the GPL. Whether you agree with their viewpoints, they are very smart people, and have some legal training as well. Stating that the license they created doesn't match the definition they say it does seems like a fruitless endeavor. &gt; With GPL code, you are not free to distribute, because there are conditions on distributing. You can distribute, but only under the terms of the license. Not under your terms. You're mucking about with definitions, which is territory that's been handled many, *many* times before. It's not worth debating, and hasn't been for about 20 years. &gt; I believe copy-left licenses in general are not free, but instead limit freedom. Right, you're in favor of *permissive* licenses (which give greater rights to developers) instead of *copy-left* licenses (which give greater rights to end-users). Again, we have terminology to describe these; please use it. &gt; But that aside, the GPL itself has significant issues beyond that. I agree. &gt; The GPL relies on ambiguity in definitions for survival. What constitutes a derivative work? I've heard literally 200 different interpretations of just that one phrase. The FSF response to this is "If in doubt, just license GPL". You may have heard 200 different interpretations, but many of them are (legally) provably incorrect. There is still a lot of ambiguity, particularly when it comes to scripting languages, but I don't think those keep the GPL going. In my experience, people who license under the GPL do it for a) ethical reasons, b) business reasons, or c) because it's the one they've heard of. The FSF likes to claim developers will put their alterations under the GPL when they don't really want to if the source requires it, while most of the time it just means the project gets rewritten under a permissive license (and becomes far more active due to less politicking). You are actually arguing the FSF's point that we *should* copy-left our work. :) &gt; That's the antithesis of what a good license should be. Good licenses should be easy for a non-lawyer to understand. They should be clear and explicit. Explicitness leads to length, and length leads to difficulty to read. The reason the MIT license is so short is because it gives away (almost) all of your rights as a developer; if you want to, say, have some protection against patent trolls, things start to get longer (Apache 2.0). &gt; So because I consider the GPL (and AGPL) non-free licenses Correction: you prefer permissive licenses. &gt; I generally refuse to contribute or support projects which use it... That's fine. Just say what you mean, please. ---- For the record, I license the vast majority of my projects under the WTFPL, so I'm definitely in the permissive license camp. I just don't think it's helpful to go around calling the GPL a non-free license.
If the objects you're trying to serialize have a unique identifier or need to be identified separately of other object instances, then I would say it should be an Entity. In Doctrine, the Entity (which is also the same as I described above) is used to create separation from a persistence layer. For instance, in an application I am writing, I use an Entity to define objects that my application will use. Then I have a Mapper class that I pass a Repository (holds my SQL calls for instance) and call $mapper-&gt;save(Entity) to save the entity to a persistence. Also, for "atomic", this is the resource you're looking for: http://en.wikipedia.org/wiki/Atomicity_(programming) As for your last question, an Entity does not need to be saved to a persistence. It can also be retrieved and still require an identity. An Entity without an identity however would be a Value Object: http://en.wikipedia.org/wiki/Value_object 
Good news ! Oh, and you should cross-post that to /r/laravel btw :)
By "Entity should be atomic" I think they mean "Operations on entities should be atomic". 
do you have any suggestions for guides on starting with L4? They don't need to be for beginner programers, just beginner L4.
I'd like to add: if you're gonna be using XML, support ALL valid XML. Looking at you Recurly, not accepting CDATA tags...
Okaaay. Good luck with that!
If you are a French Canadian, **please do not bother replying to this auto-generated message.**
Yes. Code Bright is so thorough and well thought out, if you can't get up and running with it, you probably need help putting pants on in the morning. The Laravel docs, particularly for L4, are tough for beginners. I blame Composer. Dayle Rees fixes that for you by filling in any and all gaps in your knowledge. After reading that book, I wished I could have unlearned everything I had learned before the book came out and then promptly relearn it from Dayle. My car broke down on the side of the road after reading Code Bright and within 2 minutes, Dayle showed up and gave me a brand new Lexus, just for reading his book. 
[Vagrant](http://www.vagrantup.com/) and [Chef](http://www.opscode.com/chef/). That is all.
Your bot is useless dude.
Not sure I am following you. The themes can be straight php if you prefer. But some type of view is required unless you add some API controllers for returning the content. 
Hey nice job on that! First time I see that thing with "modifiers". So you parse the code where the call was made? Clever, not clean, but clever :)
Looks awesome, great work! The only thing I notice is the rendering of code block in the docs: the font is not fixed-width, and no syntax highlighting. Given your target audience, you should work on those code blocks so that they look amazing :)
Well, I parse the code to get the name of the variable or expression that was passed anyway, so modifiers were just a next logical step. It also features keyboard and advanced mouse navigation (implemented in vanilla js), backtrace display, themes, customizable links to IDE (to the place where the dump call was made) and many more tiny features that make the best possible experience for debugging variables. It's a huge labor of love for many years for me.
This is a great write up! Thanks!
[PuPHPet](https://puphpet.com) :)
Using `preg_replace` with `/e` is a fairly "standard" approach to obfuscate malicious code. A few more examples of this are mentioned in the RFC deprecating this modifier: https://wiki.php.net/rfc/remove_preg_replace_eval_modifier#use_as_obfuscation_in_exploit_scripts The new thing here is that the payload does not appear literally (or rather, base64 encoded) in the code and instead is loaded from an image.
Good idea. I will get those fixed up soon. 
Yes that shouldn't be to difficult. I would think you would just need some JS to import the image into the editor if you want them inline. Right now it only supports images via drag/drop into the editor. Basically like github comments. 
I don't. Books don't get automatic updates or edits.
Thank you!
Using Chef on local development could be a pain in the ass unless you are deploying to dozens of machines. You setup your VM once and work on it, no need for Chef.
I'm not saying digital copies don't have their advantages, but I like books, it feels more natural to me and I can concentrate for longer periods of time. I'd even pay a little more to cover the publishing costs if I could.
Over the last couple weeks I've dove into Vagrant + Puppet (Via PuPHPet, thanks!) and I've got to say that it is far superior to manually configured virtual machines for these reasons: * Got co-workers? All they need is the Vagrantfile. `vagrant up` and 15 minutes later they have an exact replica of the machine. No need to transfer a multi-gig virtual machine file. * Oops, I accidentally `sudo rm -rf /` my server (just an example, no I have never done this). Sure, I could have created a snap shot and reverted, but its easier to just `vagrant destroy &amp;&amp; vagrant up` and I'm back in business. * Ready to deploy to the world? Use the Vagrant AWS provider and your server gets created in Amazon's cloud. I highly recommend giving Vagrant a shot with either Puppet or Chef. Try [http://www.puphpet.com/](http://www.puphpet.com/) if you haven't already. Super worth it!
is there any similar project like wardrobe (laravel4, php, blog)?
That's fine, what I'm saying is if you are using VM for your own development you don't need to use Puppet/Chef to maintain software since you are the only one using it.
Looks similar to http://anchorcms.com/ 
Biased or not, listen to this guy if you either like Puppet or have no opinion on provisioning software. I wake up in cold sweats because of Chef but I just couldn't deal with another fucking DSL. That's just me though. You want to start doing some real DevOps, start with PuPHPet. Juan is a hero.
Of course I have looked into that ;), the idea here is to extend this by providing generic extension points: why limit yourself to doctrine
On page 26, you say "For now, let’s put our Eloquent classes at the root of the QuickBill directory." Is there anything further you do with the models? I still put all of the relationships in the models themselves, right? I've not had time to get much further in the book than the Application Structure chapter, so please forgive me if you go into detail on this later. This is probably all stems from my lack of familiarity with the repository pattern. I read through the Laravel Testing book and set myself up with repositories and interfaces for all of my Eloquent models, but, beyond testing, I still struggle with what to put in a model and what to put in the repository. Thanks for all the hard work you put in to the framework and into this book. I've been using Laravel for a year now, and I'm loving every bit of it. 
Are you aware of stories of people who made the switch to MariaDB and are happy about it ? I don't have any production experience with MariaDB. So far I didn't read much about people switching, and the two people I know who switched are not too happy about it : One reverted to MySQL after a couple weeks and the other cries every time I ask him about it (and I'm almost not kidding about this).
Or use Chef-Solo which has the same architecture as Puppet.
What do you do when your computer gets lost or stolen? What if it breaks? What about when you want to try your software out on a different OS? All of those answers involve you spending a lot more time rebuilding a box, that you'd never have to do instead of using Chef or Puppet. It's an extra thing to learn, but there are no excuses for not doing it.
... back-ups? Why would I want to try my deployment on another OS? It's not an extra thing to learn, it's an extra thing to maintain. If you are well versed in setting up software your self there is no point of using such scripts for your own development machine unless you want to be 'fancy'. For companies on other hand, if you have IT/DevOps that can manage all this shit for you then go ahead and use it it's a great tool but don't tell me there are 'no issues' of any sort with those scripts because you are wrong.
Funny...I never had a problem with MariaDB. 
A lot of people like Laravel, and if you're one of them then by all means feel free to use it! But it's just another framework -- nothing revolutionary in an already crowded sea of PHP frameworks. I see projects with a more unique purpose like PPI or Composer having greater potential to impact the "ecosystem".
Yes and probably loads of others that are similar. I think creating a minimal blogging app is fairly common. 
Laravel does not really change the ecosystem. It hasn't introduced any new concepts that I'm aware of, unlike other projects like composer, fig, Symfony 2, etc.
He's basically asking for some json or XML feed of the content objects in some format so he can render his data completely apart from anything your CMS provides.
Sure you can have a bunch of huge backup images sitting around and hope that the backups are fine, or fire off a command that builds you a perfect environment in minutes, on any OS, upgrade, downgrade, switch around, etc. If you develop distributed software this is extremely useful for testing. Even if you dont you will certainly at some point come to a case when a client wants to move host, and they have a different Linux distro. Switching without testing is just negligent, and you will of course want to change your local environment even if you live-test it and things go well. Chef/Puppet abstracts the setup instead of you having to "convert" your install.sh file to match all the new package names and installation paths of this new distro. People aren't using these tools for the sake of using tools, and you don't need a "devops guy" to do it for you. That's the point.
Personally if I wanted a minimal blogging solution then I'd not bother with a dynamic website and just use a static site generator. I currently use Octopress but I'm sure there are many other similar tools including ones written in PHP. You can get some quite amazing performance serving static pages with nginx even on low spec machines. The only downside is, for Octopress at least, they are not as user friendly compared to something you can manage in your web browser.
It doesn't change the ecosystem, but it does do its job ackowledging the ecosystem is changing - which many other frameworks have not yet got around to doing completely. I did a silly little un-conference talk with no planning time last November at TrueNorthPHP: http://blip.tv/nerdy-adventures-of-phil-sturgeon/why-i-3-laravel-4-6425684 I've done a few similar since but they have not been recorded. Basically Laravel 4: * Re-uses Composer components from other projects * Lets beginners build testable applications * Simple and Efficient ORM * Better migrations than CI, FuelPHP or Kohana * Flexible logging (thanks to monolog) Not only that but there is a quick pace of development, and is actually supported by companies (some donate 25% of income to the framework for no apparent reason other than supporting the framework) instead of having being owned by a company that tries to reduce progress to keep BC the same for 8 years.
So... As long as nobody here commented on the slowness of shared folders... Is it only me? I have a symfony 2 app and it loads usually in 15secs. The problem is obvious, but I don't know how to solve it. My host machine is Win7 and the guest is Debian. I have already tried NFS, it gave me 5secs for every page (that's 3 times faster) but it still sucks and Symfony2 had some really weird issues with warming up the cache on the NFS mount (it just said it can't create directory, I think something happened with NFS server because of how many files were created in a short period of time while warming up the cache), that's why I now stuck with VirtualBox shares.
You are reaching way too far, yes I have back-ups of the data that go up to cloud daily. And you as developer should have that too. As long you are switching to same LAMP with same extensions you should be fine, matter of fact in most cases (if you are talking about consulting work) you deliver the code and list of required software/etc. I don't know how many clients you work with that will take a your Chef/Puppet scripts and know what are you babbling about, nobody will provision your code on their own infrastructure. I also love your bullshit about how not cross testing on different Linux distros is negligent. You going to claim that you cross test your PHP code across different Linux platforms with every commit? Let's play a game 'Who has never consulted for anything in their life'? I pick you.
In that case yes. I am using laravel as the framework and you would just need to edit the controllers to return the object. It will then be valid json that you can use. Here is an example from the api I use with the backbone code: https://github.com/ericbarnes/wardrobe/blob/master/app/controllers/api/PostController.php#L38 
Yeah I tried those those. But it just never felt right for me. I didn't like writing then going through git, etc. Most PHP versions that I have seen aren't quite the same as Octopress, Jekyll, etc. They tend to still be dynamic. But yeah I agree use what makes you happy and suits your workflow. I started this based on my own needs/wants so I know it will not suit everyone. 
I'd make sure that: * you are running at least PHP 5.4 * set AllowOverride to None, don't use .htaccess files to alter the configuration, do that in your apache.conf file or virtual host configuration. * depending on how much memory you have, if you are using prefork+mod_php, you'll want to tweak the MaxClients setting so that you don't take on too many connections and end up swapping memory. * disable any apache modules you don't need. * experiment with allowing persistent connections, but set the timeout to 3 seconds or less. May have an impact, it may not. * If you have enough CPU, look at enabling mod_deflate to compress html/css/js sent to the client. After that, most bottlenecks should be your application.
Fairly sure you'd lose that game.
I use samba file sharing with symfony2 and OSX and it seems to hold up very well.
Serious question as a laravel newbie - where are your models????? and why???
Biased much?
I don't think so. I'm fairly familiar with Phil's body of work, which is pretty extensive.
That's awesome. Let me know how his clients run his own provisioning scripts on their own infrastructures that probably have their own provisioning scripts already in place and any DevOp's guy will laugh at the notion of running consultants provisioning scripts or spend time figuring out what they need to implement and what is already implemented. Or how he ships the code with provisional scripts and clients don't go 'what is this shit and why are you giving this to me?' Or how he is so awesome that he tests his code extensively on multiple Linux distributions every time it goes out. Tell him he forgot about Unix, must cover everything right or it's just 'negligent'.
If we're playing that game, lets ask 100 consultants what they think about developers programming on one OS and putting it on another. Want to take guesses how they'll answer? I spent several years as a consultant for various development studios, before settling as Lead Engineer for a company out in New York. Every company I have trained to use Chef and Puppet has been extremely grateful. You might be doing a fine job in your scenario, but I've been trying to explain why many scenarios will benefit from this. Your attitude towards Chef/Puppet for dev is its nothing but wankery, while you're basically only one step up from (W|X|MAMP).
Are you sure that socket.close(); is not being called in your javascript code? Perhaps you attached that to the wrong event. 
I have used Chef extensively at team environment with 15+ team members. It's not 'perfect' and requires assistance when things go broken. What I'm saying is, you do not /need/ to use Chef/Puppet for your own local development machine IF you are comfortable with managing it your self. If I need a solid LAMP install, I will fire up the machine and install LAMP. I don't need anything else from that point on. The only argument there is.. I have to back up 1+ gig of VM .vs few scripts but you will still have to back-up/re-download your base box. If you do screw up something by installing a PHP extension.. sure you have a valid point but still that's an overkill to erase and reprovision over something silly like that. rm -rf / ? There is vagrant export for that... once your LAMP is up and configured cut an image and you are all set from future rm -rf / mistakes. Etc. It's not rocket science you don't need to use such scripts for your own home instance you do some PHP work on for your own web sites/consulting/etc. Provisioning is great for teams that need to keep software in sync and can benefit from same provisions on production/staging/qa/development machines. Otherwise it's your preference but just because, running scripts to build out your own machine at home is something you do, that does not mean that's a more productive approach for everybody.
I'm pretty sure that close() is only being called by one particular event handler, and I even tried commenting out the contents of that callback function. Still no joy - socket.close() shouldn't be being called anywhere but it still happens straight away.
Hey Eric, I see Taylor Otwell has thrown a couple commits in, does that mean the application structure has his blessing? I'm very new to Laravel so I'm browsing through the repo to learn how to throw it all together, I like the db migration files. Incidentally enough I'm one of your twitter followers, not that I use twitter much :P
Very quick and general feedback: * Consider rewriting the project object oriented. * It's a very good idea to separate logic and presentation, at least by using templating. * Maybe try using a framework, Laravel is recommended often. * You should be using prepared statements with mysqli.
It's the class project of every school/technical course.
&gt; Consider rewriting the project object oriented. Issue #3, the lowest-number open issue. :D &gt; It's a very good idea to separate logic and presentation, at least by using templating. I assume, by this, you mean building out a "shell" page (probably at index.php) and using outside files to build the actual content of it. I've (kinda) done that already. How much farther should I take it? &gt; Framework It's a point of pride, on this project (because it's a learning experience) to not use a framework, any addons, outside templates, etc. This is being written in (as close as I can manage) to 'pure' PHP, Javascript, and HTML. When I get this to "production" level, I'll probably fork it and play with some frameworks, so I can learn the templates and how to migrate to them. &gt; You should be using prepared statements with mysqli. Issue #27, and mentioned in the OP. I'm taking this as "... instead of PDO", though, so thanks for the advice. Any reason why?
sometimes the VM gets lost, it's happened to me about 4 times in the past 2 weeks, so based on that chef/puppet are indeed worth it :)
I don't honestly think Laravel is aimed at you. If you're already using Symfony you're getting the best bits of Laravel plus a high quality and extensible framework. It IS aimed at me. I don't use a framework at all. I've always found them a pain in the ass to work with and either write bespoke code or reuse some basic ActiveRecord system I've implemented previously. Looking at Laravel, which I've started to learn now, has been the first time I can clearly see the benefit outweigh the time investment. I'm **enjoying** learning Laravel. I did not enjoy trying to learn Cake, or Zend, or... tbh... Symfony. If you're using Symfony 2, Laravel has little to offer. But for thickos like me it's a real improvement.
Yes, I bought Taylor's book last night. Read the start of it. Got confused as all hell. (I'm really very thick.) So then I bought Code Bright as well, and would highly recommend it. Taylor's book starts at Dependency Injection and Inversion of Control Containers. Code Bright starts at "how 2 php", describes installing Laravel in detail (which is super easy, by the way), and uses Game of Thrones characters to explain how Namespaces work. Short of explaining it in a catchy song, with animated characters, I don't think it could be done much simpler. Which is good for a muppet like me.
I'm not going to have dick-swinging compeition about the size of our companies, but yes we're funded. I'm also not trying to push that its a must, you're pushing the idea its useless. I've tried explaining scenarios in which its useful but you're dead-set on never using it for anything. How long do you think it takes to re-provision? How long does it take to set up MySQL, Nginx, FPM, APC, Redis and whatever the hell else manually? How long does it take you to transfer that image to your new hire? How long does it take you to set it up once every other year on the offchance they do upgrade? If you're JUST using LAMP then all of those answers are "very quick", but the fact that I can replicate identical software requirements for multiple computers, multiple nodes, spawn staging boxes, switch OS if I need to and get a freelancer up and running in an hour means its all working out quite nicely. You can do some of that banding about multi-gig images, but it becomes a nightmare. Developers either need to be notified about new software requirements and run commands to update their images or they get issues, or they need to wipe and re-use some "master image" every now and then (and there is no telling if thats soon enough). If we had Chef or Puppet when I worked for a 650-man financial sector company with 60 developers and 15 sysadmins we would have been laughing. It would have been useful then, it was useful while I was freelancing and it has been useful in a 6-man company. I have friends using it for companies of every size in between. But, if you're just using a bog-standard LAMP stack for everything you can probably skip it. If you'd mentioned that was the level of dev box you're talking about then it wouldn't have been such a conversation. Anyone who needs a little more software, which requires configuration and integration, 0-100% in 20 minutes is ideal.
If you are interested in really diving deep into Laravel I recommend Taylor's new book: https://leanpub.com/laravel To quote two excerpts from the book: &gt; The word “model” has become so ambiguous that it has no meaning. By developing with a more specific vocabulary, it will be easier to separate our application into smaller, cleaner classes with a clearly defined responsibility. &gt; There is a better way to structure applications. We need to wash our minds clean of all we have been taught about models. In fact, let’s just delete the model directory and start fresh! But my data structure is inside app/Wardrobe and by browsing this you can see how I set everything up. Originally I had plans to allow different storage providers. One being the DB as the default and then also allow for things like flat file storage. I didn't have time and it hasn't been a priority for me to actually code these others but it should be fairly straightforward once someone wants it. I hope this helps. 
There is a whole long series by Jeffrey Way that introduces features of Laravel 4. https://tutsplus.com/course/whats-new-in-laravel-4/ I should clarify these are about upgrades from 3 to 4, they're perfectly followable regardless of knowledge of 3. I had barely heard of Laravel before I watched them, and certainly had never used it. It's a good introduction to how "stuff" in Laravel works. Also, the video about the Generators he's built is amazing, and I highly recommend using them, because they are powered by wizardry and unicorns. 
I'm an Australian. The bot is entirely accurate about local conditions. It's still fucking pointless.
&gt; Should not be using straight MD5 to hash passwords, consider using bcrypt, the built in PHP Password Hashing feature in 5.5. I wish! I'm stuck at PHP 5.3 (NearlyFreeSpeech.net is the host) &gt; Or at the very least consider using a SALT I know the principle, but not the practice. Can you suggest a good resource for me to learn from? &gt; You have a bug in registered.php It outputs "Please tell us about " . $desiredChar . "..."; " on the page itself. (other bugs too) Thanks! I hadn't created a new character in a while! And I was certain I fixed that in whoishere.php...
Just by looking at the code. Should probably hash that Auth code as well. But basing it a username is an odd choice, why not make it a state stored on the user and as a result stored in the database. ie isGM = 1 as a field/value in the DB against the user/character. Might also want to look at stripping/escaping HTML code entered in the inputs as well. One huge piece of advice: never ever ever trust the user. A good resource regarding salt's and hashing is as always the PHP Manual: http://php.net/manual/en/faq.passwords.php
Seems promising, but we really don't have enough information about the features and how everything works to want to sign up to anything. Even if free, we are talking about a major effort because it's about your whole server/deployment architecture. Before launching into that, I'd rather know what to expect.
Note that you can also read Code Bright for free online as of today... if you like it support Dayle and buy a copy! http://codebright.daylerees.com/
Cut it and back it up.... restore it faster.
Okay then don't bring up your position at your company. I'm not sure why you are discussing new hires... we are talking about local development machine you use at home for your own stuff. Not company wide. I never disagreed with you on using these scripts in company environment. You came in here to defend your decision by saying using 'consulting' (again not a company environment) and claiming you pass your consulting clients.. provision scripts... and even test your code on multiple OSes using those scripts (please!). That was the subject, never have I disagreed that on company level using these scripts is a bad idea, read the conversation. Your local development machine for consulting/bullshit projects does not require re-provisions, etc that a company might require. That's YOUR personal preference to use the scripts, I'm simply suggesting that might be an over kill. Again read the topic we are discussing and your defense on using it in 'consulting' environment that made little sense to me based on some ridiculous 'pros' you posted. To sum it up: - Use within company with development teams, I agreed on it from the get go. - Use for local machine at home for development and other stuff, you don't /need/ to setup chef/puppet. Setup your env, cut VM and upload the image with all the software setup. And you are done, no need to deal with anything else. Rm -rf / ? Get the VM you cut with all software and export and vagrant up, done. You are confusing me with going to 'consulting/personal work' to 'company', completely different usage that we are not discussing.
This looks easier than: error_log("TEST!!!"); dosomething(); error_log("TEST2!!!);
The author of this article says that people ask questions that are too specific and then goes on to suggest questions that are very specific and tell very little about a candidate's programming ability. I usually prefer to see a more language neutral set of questions that addresses the problem solving ability of the individual. Knowing how a candidate would attack a problem is more valuable to me than what they can memorize.
Excellent, will try. :)
Is this for Sublime Text 2 or 3?
I don't want to spam /r/php, so I'll just leave this as a comment here. Anyways, as an update to this, I've made a meme generator that builds meme generators. You can see the result here: http://www.jackmeme.com/blog.php?id=2
I would be highly suspicious of this service: &gt; Built by security experts so you don't need to be one. I always raise an eyebrow for anyone who claims to be an expert, let alone a statement that has no obvious backing. Who are these "experts"? Have they actually used Linux before? I understand it's all marketing to entice managers but it only makes me trust the service even less.
&gt; Is it possible to create a function that returns numbers from 1 to infinity that you could iterate over? You're not going to find a lot of people knowing about generators yet; they're quite new.
Both
There are always iterators that the function could return. So therr is a workaround
What version do you have? I was able to get Laravel running fine on &lt;5.3.7 simply by changing the hashing method to sha256 in the config files.
Why make this one... ?
This article tries to cover few things and fails at covering anything. It's all over the place. It's basicly a half-ass iteration of stuff that has been available for years now: https://help.github.com/articles/set-up-git With a mix-in of a shitty (in my opinion) suggestion of using an online IDE... NOPE.
Thanks Eric, I've bought Dayle's book and have seen Taylors book but it looked a little advanced for me at the moment so its currently on my wish list until I've got a bit more knowledge under my belt (I'm a newbie when it comes to php not just laravel) 
Totally agree, this doesn't look good unless there is some backing up.
TLDR: Better to see sample code from personal projects than ask language specific questions I feel like a lot of these questions are "look how big my balls are because I know obscure PHP functionality" - (does not apply to all questions, people should know caching). The interviewer trying to massage his own ego more than finding out if someone can make decent code. Its like reading articles about optimizing the order you do short hand ternaries in. Really? Your PHP is so efficient in all other areas that shaving off 200 microseconds by optimizing an if condition is going to make that big of a difference? How about removing those nested loops first? Knowing uncommon language functionality is not as important as good common sense. Ask the person to share code from a personal project. If they give you a link to a github repo, bam, three things you already know 1. They at least knows how to commit to git 2. They have enough passion for coding to do something outside of work, which usually indicates someone who grows as a coder 3. You actually see their code We had a middleware person on our team that knew all sorts of crazy things in python. We made the mistake of not having anyone check his code since he was the only middleware person on our team. It wasn't till after he left did that we saw stuff like error suppression, catching fatal errors and then just telling the process to continue, and other monstrosities. Some of the most horrendous code that you just scratch your head and think "What the f**k was he thinking?". Oh, and he asked everyone to call him a Python ninja. He spent all his time on Python boards and spent tons of time reading deep Python articles. This same guy wrote 26 try/catch blocks one after another to read in line by line a config file (oh, did i mention that if there was a fatal exception he told the app to keep going?)
At Imgur we used HTML5 canvas mainly because something like imagemagick would be so expensive to do at a large scale. Even discarding previews, doing as little computation as possible on the PHP side is optimal. Once you render the text using Canvas methods it's as simple as [getting the base64 data string](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-canvas-todataurl). Two issues we ran in to: 1. [Same-origin policy](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#security-with-canvas-elements) applies to resources loaded into a canvas, so if you want to support loading external images, you'll need to download it. 2. The impact font typically used isn't available on all computers, so you need to license it if you want consistency. I think we put a bit of creativity in to our meme generator such as including a few of the more popular instances of it — giving a good "canonical" meme so people know how to use it. We also provided a filter bar to quickly find the meme you're looking for, and will be making the set of default memes a rolling selection of the most trending memes so that as a meme becomes popular, more people can easily make their own. 
Actually apart from the generators question I dont find those obsccure at all. Any developer with any experience should have no trouble describing Xcache, Apache or new PHP 5.4 features. Which questions did you find confusing?
For me it´s standard marketing bla bla. 
How does DBG compare to XDebug? Because, at least in PHPStorm XDebug is amazing.
###Why using Laravel? It is fast in development and runtime (not as fast as micro frameworks tho). It is easy extensible (composer, IoC and such) and you can easly replace build in classes without touching the framework code. Eventho it uses facades you dont have to use them. It has inbuild Aliases so you dont have to use your namespaces all the time. I like Eloquent more than Doctrine (way cleaner syntax). Why Laravel over Symfony? Symfony is pretty much slow: http://systemsarchitect.net/performance-benchmark-of-popular-php-frameworks/ its too big and not that fast in development, I mean even Cake is faster than that and everyone knows cake is the java of php. ###Artisan Is just genius. It simplifies your workflow so heavly (exp. when working in groups). 
people still blog?
I would probably go with Percona Server with XtraDB before MariaDB if I was to venture out from MySQL 5.5/5.6 - which I still think is pretty damm good, Oracle running the show and all.
A minimal blogging application behind the great (and big) Laravel application. Perhaps a micro framework would be a better purpose here; or am I missing the point?
From reading their web page, it does look like an admin panel and some scripts to do server maintenance. How did you conclude otherwise? To me this sort of thing is extremely scary. How do I know it won't leave my server wide open? Because they say so?
Well The questions states "like XCache or APC" so you'd understand it =) The approach I tried to take was asking questions that would indicate experience rather than knowledge, I am sure that there are new PHP developers, but it's trather easy to come up with questions to ask junior level developers, e.g OOP, basic patterns etc You can find heaps of those on the internet. The problem comes when you interview people that have been doing some freelancing work for let's say 2-3 years and can't show you any of their code due to NDA agreements. Asking for github profiles is always a good idea but not everyone does opensource. So these questions were designed to fit that niche. Actually some of the "Senior" level developers I know wouldnt be able to find a good way of solving the posts-&gt;tags task and would resolve to use multiple queries.
Wikimedia seems happy with it.
why not just App::make('auth'); ?
Why? What does the framework have to do with it? I used Laravel because I like it and the community. Also hosting is cheap nowadays. Having a what you call "big" framework shouldn't be an issue. Another reason is that I like that Laravel has plenty of features that I can grow into. 
As did I
haha that's hard core. :) 
We're looking for contributors at the moment so please get in touch :)
I made this one because I was never happy with all the others I had tried. I felt like I could build it to suit my needs and then people may also want to use it. Plus I am a product engineer. I build products for work and hobby. So this is enjoyment for me. 
Ah, good to know. I'm on 5.3.3. But it's about time I moved on from 10.04 anyway.
As someone who has found the Laravel framework infinitely useful, I have no problem paying Taylor for his effort on this book. Any money I feel I overpaid on the book can be explained away as supporting his work on the Laravel project itself. But I don't disagree with you at all. The current size of the book compared to the price is a bit much... but seeing the quality of code Taylor puts out there, I'm interested to read just how his brain ticks when faced with common development problems. That knowledge is just as important to me as the framework itself.
I'm bored of this. Since learning chef and puppet they have helped with creating solutions to various problems at various different levels of work. Freelancing, consulting and company work has all been very useful, regardless of the size of the company. &gt; I'm not sure why you are discussing new hires... we are talking about local development machine you use at home for your own stuff. Nobody said "home", we said "dev box", which can be for me or 10 other people. What if its my dev box I use on personal projects and I ask a friend to help out, or grab a freelancer? Thats the same as a new hire, so dont get weird and picky. I didn't say I always passed my clients the chef recipes, you did. If they had a tech guy I'd give it to them, and it would take about 10 minutes to hand off an exact environment to them which they could tweak - instead of having a magic image which they dont know what goes into it - but if they didn't want it I wouldn't give it to them. I've spent days trying to magically recreate a working environment for convoluted Rails applications with crappy outdated installation instructions in the past after taking over from another freelancer. Sure would have been nice to have a recipe/manifest instead. They're all pretty much the same usage, and your main reason against it has been "its another thing to learn". Once you learn how to use it you wont want to not use it, because of the time it saves in all scenarios, especially with something like https://puphpet.com/ at your disposal (which wasnt the case when I had to learn it). You started getting specific about "home" and "consulting", but "dev boxes" in general benefit greatly from being provisioned. That's all I have on that.
Well I am building a CMS and I want users to be able to create pages and then upload images that will be associated with that page. When they return to a specific page they should be able to browse thumbnails that were uploaded to that page and then select an file to be used as the featured image (while also having the option to upload additional images)...much like WordPress.
Work on your local machine using a copy of the site and whatever tools/server setup you want (though ideally a replica of live). Problem solved. A whole bunch of other problems solved too...
Well, if it's a a plugin to TinyMCE you're asking for, which I think it is you're asking, then you're kind of in the wrong place. I'd advice you to ask the question over at TinyMCE's forums.
Good point. Thanks for your input.
Yes. MoxieManager is can be used in conjunction with TinyMCE., but my question has nothing to do with TinyMCE. I'm not talking about inserting images into some kind of text editor. I simply want to keep track of images based on the page they were uploaded to....much like WordPress.
I don't understand the need, is this supposed to be like some sort of cpanel alternative except you give control to their servers to control.. your servers?
If you're building a CMS where this functionality is supposed to be tied to the pages themselves, then you're going to have to code it yourself. &gt;much like WordPress. Well, that just raises the question: If you keep repeating that your CMS should be *like wordpress*, why can't you simply use wordpress? Also, not to be rude or anything, but are you sure that you're qualified to write a CMS? Your [previous submission to r/phphelp](http://www.reddit.com/r/PHPhelp/comments/1iib3j/unable_to_use_variable_in_php_mysql_query/) leads me to think that you might want to acquire some more experience before attempting such an endeavour. 
I'm about to write a Reddit bot the espouses to the virtues of Vagrant and Chef/Puppet/Whatever any time it detects a comment about someone working either A.) On a remote machine or B.) Directly on their machine. VMs people! Gah.
We tried to use Moxicode at work to cut dev time but the plugin itself turned out to just a big hack. I'd stay away from it.
&gt; Well, that just raises the question: If you keep repeating that your CMS should be like wordpress, why can't you simply use wordpress? It's not really a CMS like WordPress, but I'm just the term "CMS" as a shorthand instead of going into an elevator-pitch about the project. &gt; Also, not to be rude or anything, but are you sure that you're qualified to write a CMS? Your previous submission to r/phphelp leads me to think that you might want to acquire some more experience before attempting such an endeavor. Qualified to write a CMS? I don't need permission to build software. And I never even suggested that I am a professional. I have a patchwork understanding of PHP and I'm trying to figure out stuff as I go along.
I didn't even read the features page but it does make some more sense after reading it. However I should know exactly what it is on the home page. To your second point you just have to inherently trust them, I'm sure you could under NDA get some sort of document that states their security practices and policies. 
couldn't static variables also do this? sorry if nub question.
We're on 5.3.3 at work as well thanks to Debian 6 :( Still, Laravel seems to work fine.
Not really. The idea is to have this: function infinite(){ //..... } foreach(infinite() as $n){ if($n&gt;1000) break; } Would print number 1..1000 and exit
I have no problem with the VirtualBox shared folders. Win7 host, Ubuntu guest. Can't speak to other types of sharing though, this works and so I've never fooled with it any other way. The only weirdness I've had to sort out was setting "EnableSendfile off" in Apache ("sendfile off" in Nginx). Otherwise you wouldn't be able to refresh certain css/js files that you'd be working on. (Bug report: https://www.virtualbox.org/ticket/9069) Back to the point though: no problems here, wish I had some advice for you.
&gt;Qualified to write a CMS? I don't need permission to build software. And I never even suggested that I am a professional. I have a patchwork understanding of PHP and I'm trying to figure out stuff as I go along. Relax, don't get so defensive. I meant it in the sense of having sufficient understanding and experience in the language before attempting such a large task. Content Management Systems are rather complex, and it'd probably do you good to be able to walk before you try to run. The issue with the code posted in your r/PHPHelp thread is that it is vulnerable to SQL injection, meaning that your database can quite easily be hacked simply by injecting things into your query strings. The thing to remember is, when a website it's hacked, it's not just you that have been compromised, but your users as well. Since users are trusting us with their data, I think that we as web developers have a responsibility to make an effort to keep their data safe and not betray that trust. Another issue with the code, which does appear to be real-world code and not something academic, is that it is not abstracted at all. The code would be a lot more maintainable if you did your database interaction via entities, data mappers and repositories, and you'll thank yourself in the long run if you did. However, as it stands today, it appears that you're rather fresh off the boat, and it'll probably be a while before you achieve that level of code. I believe it would do you good to try something simpler and build up your knowledge before attempting something of this scale. Maybe even work together with other developers, and be mentored - There's a lot that you can learn from other developers and open source projects. I know that it might be tempting for you to jump in at the deep end of the pool straight away, but the problem is that you might end up drowning or lose valuable experience and knowledge which you would otherwise have picked up along the way. 
where are the tests?!?
It doesn't have any. To be completely honest I don't see the point in testing the php side of this app. All it's doing is saving and returning. The js/coffee side for the backend does need a few but I haven't had time to implement any yet. 
Use the password_compat library by ircmaxell. I'm on php5.3 and I use it to hash my passwords. https://github.com/ircmaxell/password_compat
update: Debian and Digital Ocean support have been added.
...yep. The control panel is hosted by them, with a client that runs on your server.
Hi everyone! As pointed out below, I'm one of the founders. **First, thanks for the feedback!** This incarnation of our website is new and although we didn't think it was perfect, you guys have made it quite clear that we still need to articulate a lot more to our visitors. We're going to spend a few hours this morning putting up more information on the site. I'll post back here when done. In the meantime, let me explain a little more about ServerPilot here. **What is ServerPilot?** A centralized *hosting* control panel for **php** apps. Popular hosting control panels have you install the whole application on each of your servers. 10 servers, 10 control panels. Regardless of how many servers you connect or applications you manage with ServerPilot, you'll have one interface at https://serverpilot.io. It's very much a SaaS model. **How do I connect a server to ServerPilot?** * Have a fresh Ubuntu 12.04 server, * click *Connect Server* in ServerPilot, * give us a name for the server you're connecting, * run the installer command on your server. [Here's a short tutorial that uses *git* to deploy WordPress on a Ubuntu 12.04 server](https://serverpilot.io/community/articles/install-wordpress-on-ubuntu.html) with pictures of the interface. **Security** My co-founder, Justin Samuel, has more experience with Security Engineering than I do. http://www.eecs.berkeley.edu/~jsamuel/ To save you the trouble, here are some of his papers: * [Survivable Key Compromise in Software Update Systems (CCS 2010)](http://justinsamuel.com/papers/survivable-key-compromise-ccs2010.pdf) * [RequestPolicy: Increasing Web Browsing Privacy through Control of Cross-Site Requests (PETS 2009)](http://justinsamuel.com/papers/requestpolicy-pets2009.pdf) * [A Look In the Mirror: Attacks on Package Managers (CCS 2008)](http://justinsamuel.com/papers/package-managers-ccs2008.pdf) * [Package Managers Still Vulnerable: How to Protect Your Systems. Justin Samuel and Justin Cappos ;login:, Feb 2009.](http://justinsamuel.com/papers/package-managers-login-feb09.pdf) He's also author of a great Firefox security plugin, [RequestPolicy](https://www.requestpolicy.com/). https://addons.mozilla.org/en-us/firefox/addon/requestpolicy/ Building a secure hosting control panel is very important to us and we can do a better job articulating exactly how we're accomplishing that. **All of this feedback is great, thank you. I'll be back later today when we've posted more information to the site.** edits: typos, rewording an instruction.
Hah, that's funny. A me and a few friends were talking about this exact application of the new yield functionality just last week. 
I think the part I originally didn't take into account was the desire to "iterate over" which I now get. Couldn't this be done (in a more convoluted method) by infinite returning a custom arrayiterator class?
Is the presentation from 2011? (first slide)
It is from 2012.
Virtualbox or Vagrant + your favorite flavor of Linux. I use windows as my main desktop environment and it's fine but for dev work it's crap. I tend to use a Mint VM on virtualbox at present which is great.
Some of these are really terrible questions... I mean: "What new features were introduced to PHP in version 5.4? How about 5.5?" Do you really need to know that? if you've been working on a legacy project for the last 3 years and you couldn't upgrade to the newest PHP version there's a chance you don't know the answer. But it would take you only a couple hours to learn the differences and apply them in your new job. And to be fair I know a bunch of people who could answer these questions accurately but wouldn't know how to write a sorting script...
Great read. Makes you wonder about your own code
[VirtualBox](http://www.virtualbox.org) + [Vagrant](http://www.vagrantup.com) + [Puppet](http://docs.puppetlabs.com/puppet/) You can then install any windows-based SQL client to connect to your VM, e.g., [MySQL Workbench](http://www.mysql.com/products/workbench/), [SQLYog](https://www.webyog.com/product/sqlyog), or [HeidiSQL](http://www.heidisql.com/). I prefer Heidi as it's simple and loads pretty quick. I'd also throw [AcrylicDNS](http://mayakron.altervista.org/wikibase/show.php?id=AcrylicHome) into the mix to give you quick and simple DNS wildcards, i.e., point *.dev to the IP of your host-only VM, so you don't have to touch your HOSTS file.
www.easyphp.org EZ-PHP easy to use, easy to install. Has a load of tools. Advice: Do NOT install in Programs directory. Install in c:/php or something.
To be fair, most people skim blogs, paying more attention to lists, captions, and images.
So it's basically a centrally hosted Softaculous for just PHP apps (without the cpanel crap)?
30.000 concurrent users doesn't mean much. It could only be a few hundreds of requests per second, if your users are not very active while using your website. All in all, you should provide your readers with a number of requests per second, which is the standard KPI for that kind of tests.
CDNs and caching. Got it.
Is there any reason you are doing this in PHP? I created www.insto.co.uk which is a hosted websocket service - it lets you do this stuff really easy, and it's free! I'm looking to get some realworld testing on this thing, so feel free to have a go and bug me with questions. Can I also ask what your use case is?
I have used this a lot and found it is overly complex for the results you get and one minor change can screw up a whole document. A much easier solution if you're creating the original document in HTML then converting it to PDF is to use [wkhtmltopdf](https://code.google.com/p/wkhtmltopdf/)
Very interesting and highly educational, however I can't help but think that perhaps none of them were the logical solution to the problem they started out with and it's hard to think of many things that would be worse than the first two options. Possible candidates being MySQL/variants, MongoDB, Apache Solr, Amazon Cloudsearch, Sphinx, SQLite, an intern on IRC with an encyclopedia...
I don't know your situation or experience level, but would advise you for the sake of your sanity and education to either find a job where management cares, or improve your persuasion skills so you can make a difference where you are. You will learn a lot about the wrong side of development by going along with your current setup, but stay there too long and you'll turn into those folk who can't see the error of their ways ;) 
Nice job using your sockpuppet to make it seem like there is support for you [u/hopeseekr](http://www.reddit.com/user/hopeseekr). Are you going to use your other sockpuppets like [u/zidium](http://www.reddit.com/user/zidium) and [u/phpexperts_pro](http://www.reddit.com/user/phpexperts_pro)? There's no trolling and you NEVER posted any good content. All you posted was your shit code through which you attempted to scam people. You're a liar and a thief.
SELECT schoolName FROM schools WHERE state='TX' and schoolName LIKE 'blah%'; Index it on state, and you got yourself a stew going, baby. 45k records would be nothing for an indexed table.
How does this compare to pear or RO&amp;S?
IIRC that php WebSocket library is from 2010 which only supports the old Hixie-75/76 protocol. Browsers are using RFC6455 these days. 
Kind of neat actually. I'd be curious to see something long lived in action. Also in performance information. 
Agreed, .15 seconds still seems terribly slow. Especially for a relatively small dataset.
Redis.
I've experimented with this extension a few months ago ... I was impressed for the most part ... that being said it was unstable and had a few bugs. It did provide predictable performance when dealing with array object properties at a very large scale. If you've ever tried it array object properties begin to slow down at an exponential rate when they get to be very large ... 
I agree, author needs to define what he means by concurrent users. You would need about 30-40GB of ram and a lot of multi core cpus to truly handle 20 or 30 thousand requests a second using nginx and php-fpm, depending on what happens on each request it could even be more. I believe he means "active connections", however he needs to define how much time passes before he considers a connection to be inactive. I would guess the 30000 concurrent users he is talking about is more like 500 requests a second over a minute period.
more like: TL;DR: Extremely boring and mostly irrelevant history lesson. You'd think the father of PHP would have something more interesting to say. Most people don't really care where PHP came from - they care about where it's actually going.
TL;DR: yes, yes it does. If you don't understand algorithms, it becomes very difficult to pick optimization methods when something does start to get slow.
Any bugs in specific? Just curious.
This article is the perfect answer to anyone who thinks whatever their doing is "too small" for a database. When you try to use flat files, you just end up badly re-implementing database features. While the underlying idea that Big-O complexity matters is correct, the whole premise is flawed making this article [not even wrong](http://en.wikipedia.org/wiki/Not_even_wrong).
I said I'd be back! :) Here is some of the new content we put up thanks to your guys' feedback: * [Team](https://serverpilot.io/team.html) * [How It Works](https://serverpilot.io/how.html) * [Security](https://serverpilot.io/security.html) We haven't tweaked anything on the landing page *yet*, but that's because it usually ends up being a time suck tweaking things. edits: typo
No, I wouldn't say that. We don't bundle open source applications for deployment. We have and are working on server-level features: server health monitoring, management of databases, auto security updates, firewall configuration and more. 
That's fair and it's certainly good to have such a healthy suspicion. Yours and others' comments prompted us to put up a security page: https://serverpilot.io/security.html.
crackanape, comments like yours made us realize what a poor job we were doing. Thanks for coming here to say something – if no one had said anything, we would've thought everything was great! So, we now have this page: https://serverpilot.io/security.html. No NDA necessary. ;) Still, it's very easy to set up a test box with VirtualBox or Vagrant and give ServerPilot a test run. Like I said to mnapoli, I love talking to users and would be more than happy to personally get you set up and walk you through.
A couple of small comments: &gt; Many developers mistakenly assume that programmatic communication over HTTPS is always secure. Technically it is - that's why HTTPS is called HTTP Secure. The reason why people avoid self-signed certificate signing is that you can't verify the validity of the certificate. SSL does NOT validate that you are talking to the right server - it just validates that the certificate it presents has been signed by a CA that your computer trusts (the whole point is that you trust, well the industry trusts, that the CA won't sign a certificate for some random Joe who claims to own your domain). I personally think this is a weakness of SSL but I digress. There has actually been a number of cases where people have gotten certificates signed for domains they don't own. For the firewall section - it might be worthy to post a sample iptables dump so that you can at least establish you know what it is. &gt; We do not enable insecure FTP on your servers. I think this is a fallacy. FTP can be secure for what it's worth - [FTPS](http://en.wikipedia.org/wiki/FTPS). Oh and linking to random PDFs in this day and age probably won't buy you any trust points. Please don't see this as attacking your page - I actually like it. It's simple and to the point and I understand what you are saying - you didn't just slap a bunch of buzzwords up there and call it a day (like some companies). There are a number of fortune 500 companies where their entire webpage is just filled with marketing buzzwords and there is nothing to suggest what their product actually does - it's just that it will solve problem X and your life will be so much better! If I understand your product it actually sounds pretty cool and if I had any purchasing/decision power where I work I would certainly test it out. One last thing - I think it would earn you some brownie points if you noted any open source software that accomplished a feature you offer. Like automatic updates - that could easily be a cron script. You may be like "well won't that take away potential sales?". It might, but what you offer is a solution in a box - using open source software means that a person has to use duct tape and bubble gum to create a solution similar to yours. My two cents.
&gt;not even wrong Big O is essentially just a way to rate an algorithms speed. Might as well call the article "slow is bad ... mmmk". Also, WTF, if he just used one of the multitude of db engines out there those numbers would be 2 orders of magnitude smaller!
Btw: PHP 2 never existed. It was called PHP/FI. I doubt anybody would write anything targeting that language nowadays :-) http://php.net/manual/phpfi2.php
I use a combination of FPDF and wkhtmltopdf. For any pages that just have standard tables full of data, I find it's slightly better to use FPDF since with wkhtmltopdf there are always issues with the tables cutting off in awkward places between pages even when using CSS page-break-after. For all other pages I use wkhtmltopdf to render it exactly as shown on screen.
[tFPDF](http://www.fpdf.org/en/script/script92.php) adds UTF-8 support! I use it a while now and it's great.
Can you explain how you'd efficiently do this with Redis? I tried to Google if this was possible before my above post, but I've never known anybody use Redis for full-text search and all the implementations I found seemed incredibly overly-complicated and somewhat hacky. 
I agree. Would like to know if he is still against using frameworks now we have more mature ones like SF2 and ZF2.
Great work. Something that may help users new to Laravel could be to create a tutorial something along the lines of Symfony's Jobeet (or perhaps something slightly more complicated), using the principles illustrated in this book.
Previous discussion on this: http://www.reddit.com/r/PHP/comments/1huzud/async_package_for_php_abusing_the_new_yield/
i dont really understand his chart &amp; images, it seems that php natives array() is always faster, yet the authore seems to ignore that or state otherwise, what am i missing? my conclusion would be, while judy seems to be more memory efficient, its always slower? 
Thanks for the link to my previous post on this. The updated library is a significant evolution on the version I originally posted about - it previously only worked with yielding React promises. The updated version allows for things like nested yielding (i.e. yielding another generator task from within a generator task), and should be more flexible.
I use [TCPDF](http://www.tcpdf.org). I've never used FPDF but i'll give it a shot.
Awesome - I would love to get someone like yourself building a real-time game using Insto. Just to give you a bit more information - the reason I created Insto is that I know setting up a Node.js environment, and getting it hosted somewhere reliable is a tricky endeavour, as you have found out. Insto itself is a Node.js app that is hosted by me, and allows you to use some simple APIs and libraries to do your websocket business. This means there is no infrastructure for you, no software to install, or anything like that - the idea is to make it as simple as possible. Let me know if you need any help :)
At PHP UK 2012 he expressed a few times his dislike for OO programming in PHP and sometimes wished things were still like the old days.
Go with Illuminate\Eloquent, easy to use and dev friendly.
I did it the other way around. Used FPDF first and then switched to TCPDF. In my opinion MUCH better. More people should know.
Stop acting like you already knew, or read it elsewhere please :)
There's a few ways you could implement this in Redis. One would be to have key/value pairs, where the key would be something like "project-stateToSchool-TX" and the value would be...oh, something like his serialized array of schools in TX. Another would be nearly identical, except the value would be a Redis set, and you'd essentially get back an array of all the set objects. I can't think of any more right now, but it would work. For the US, with either of those options, you'd only have ~50 keys (more if you include territories), and would only need to search for a specific key, which is pretty darn fast - as fast, I'd say, as a properly indexed SQL table. But, you'd still need to compare the school names in code to find those that matched for your auto-complete, so I'd still say SQL is a better bet. In Redis, you could make the key names something like "project-stateToSchool-TX-school name" (values probably wouldn't matter; all the relevant data is in the key name). You'd then do a KEYS operation to look for "project-stateToSchool-TX-sch*" and get back a list of keys that match your search term. Probably faster than doing the comparison in code, but not as fast as SQL. I really like Redis, but for a project like this, I'd stick with SQL. Heck, even sqlite would probably be faster than a CSV.
 it's complex for a reason. I personally love it. Just write wrapper classes if it's too complex.
Column names should have back ticks rather than the single quote marks. Also, you shouldn't be using the mysql_*() functions anymore. Switch to MySQLi or PDO.
Not really a PHP issue. Change 'username' to \`username\`and 'id' to \`id\` ... you've got single quotes around a field name which makes it a string. Table/field names should be backticks.
Um.. I state that Array() is faster for straight iteration/access and Judy is more memory efficient but 'slower' when compared to Array() which is not really a surprise. It's all about what you need out of your storage.
[Tutorial](http://phpmaster.com/migrate-from-the-mysql-extension-to-pdo/).
Thanks, solved it. I forgot that you use ` instead of '. The UPDATE `users` part was copied from another file so.... Thank you.
Interesting library ... Have you done any performance testing? Since you are now controlling a secondary tick beyond that of PHP's own internal mechanism what kind of performance impact does this incur? Also how well does this scale ... into the 10's or 100's of thousands?
Strongly recommend this one. Used in the past and loved it. Clean and precise documentation. No special server side libs needed, upload, include and you are set to go. 
Sadly this article is severely lacking. Where's the actual discussion around asymptotic notation? It's mentioned in the title and then in the intro paragraph, and that's it... on top of that, there isn't even any code samples to justify the numbers given.
I've not done any performance testing as of yet. This is purely a proof of concept at present.
That is the heart of the "PHP lacks vision" argument. The "father of PHP" is all about all procedural all the time, which is not how the majority of PHP users do things these days.
Does APC cache specific queries/values from the database and memcache cache a page's HTML?
Do any of these open source php pdf libraries have the ability to work with dynamic blocks of a pdf file like PDFLib can do? That would be so cool. My first job in php programming was actually with PDFLib and generating Direct Marketing PDF's while really taking advantage of the Dynamic Blocks PDFLib could do. The marketers would input data into this web application for each block of a PDF template (plus some logic). Then the web app would generate these PDF's to send off to the printer. Now, the code I was working with was legacy and _horribly_ written and everyday was a pain to fix issues or add new features. Regardless, working with PDFLib was pretty neat and it was challenging. Can't help but wonder how I would re-write that application today. There's so many pieces of tech today that didn't really exist then that would help make it a really powerful web app. Sorry for the unrelated post but had to ask.
I recommend checking out [PHP Mentoring](http://phpmentoring.org/) (specifically its IRC channel) for help. You're less likely to get entry-level help here. ;)
www.puphpet.com is your friend.
I had to send in the MacBook for repair so had to use my backup Windows machine. Luckily I'd just finished converting my dev environment to Vagrant. Getting up and running on Windows was trivially easy. Now, getting Vagrant running my dev stack took a week of messing with, but now any time in the future I get a new machine, I don't even have to think about what is needed to get it up and running. Just download PHPStorm, git, Vagrant, check out my repo, vagrant up, wait 15 minutes, and I'm back in business. A+++ would recommend.
I signed up to watch the last talk. Phil Sturgeon had a great presentation about laravel. This is definitely an awesome group and everyone should join 
The "product manager for App Engine" didn't anticipate that one of the most popular web language out there is used a lot ? This is some horribly fake PR "this is really great that we have found an unexpected need !!!". That, or he is horribly stupid.
Do you have to pay to watch each one?
Thanks. I kinda want to understand server-side more a little more, seems like a whole new language to me. Can mixing Php and Js be possible with HTML as well? 
After being immersed in setting up servers this past week, "User group" really confused me 
We have a "we'll try it in live" approach to testing (which sounds bad but it works very well for us). Anyway, as someone who uses xdebug, [this one]( https://gist.github.com/timsweb/5956573) is really useful. 
I'm really hoping this makes it in 5.6, along with some way of autoloading functions.
Personally I'm a bit torn on it. I think it's a great idea for someone that's living out in the boondocks and would have to drive 1h+ to a meetup. Anyone else, I think, should just try to start their own. I organize the Buffalo, NY PHP meetup and Buffalo (Western New York in general) is not exactly the mecca of PHP development but we still have a decent sized user group. The argument that "Well there just aren't that many PHP developers around" I don't buy. Even if there's only one other person that's enough. Go grab a coffee and talk shop, that's all it takes.
ALSO Do I absolutely HAVE TO have Php on my page, or can I use something different for the server? 
Yeah you do. But it's only 10 bucks, so it's doable if you're really interested. And, php seems to be changing faster than ever imo. If programming is how you pay your bills, it should almost be required of us devs to tune in. 
[Changelog](http://www.php.net/ChangeLog-5.php#5.5.1)
You have to pay to be a member of the community ... ? Guess this works for some ... I see no reason this couldn't be community driven ... as in ... you know ... free
Taylor, it would be great, for the purpose of further research, if you added the resources you used in writing the book. 
APC can, but a proxy cache like Varnish would be better for caching an entire html page. (that is if you don't have any session specific content on the page).
The speakers are compensated, some of them, like Rob Allen, stayed up till like 3am to speak. These talks take a lot of time and effort to prepare and I don't think compensation is unreasonable... It's more like meetup membership dues, and if you don't like the topic for a given month, you don't pay a penny... can't get fairer than that in my opinion. Full Disclosure: I'll be speaking at a Nomad PHP meeting later this year. And my company sponsors it. But I was a fan before any of that!
I imagine this could help alleviate the "mess of functions" programming style (ala wordpress) but it seems...backwards to encourage "slightly less messy mess of functions".
Yeah, PJ. Awesome to hear you're doing stuff with Engine Yard! Unfortunately, I've tried to start a meetup group here twice. Someone else has tried also, and even reached out for help from me — I offered to help with no response. It gets a little old trying over and over to jump start something that goes nowhere — and now I have a kid, so he gets all my spare time. There is quite a thriving tech community here, it's just mostly .NET — we even have an Asterisk PBX UG!
Awesome. The thing is, it does things locally on every commit, not externally on every push. So if you write bullshit: * you know it as soon as you commit (with a very nice desktop notification if you set it up properly), which makes it far easier to find the bug, because your memory is fresh (provided you commit often); * after you fix, you can amend your commit; * your colleagues never know about it, which means that to them, you never break the test suite, and they never spend time trying to fix things you did. 
Didn't know about this function, I always use regular break point. This hook could be nice so for what I use often (like var_dump()).
The proposal was designed with function autoloading in mind. It's the logical next step.
I know it's beyond the scope of the RFC, but how do you envision function autoloading working? One function per file? Creating a map of function names to the files in which they reside?
On a technical level it would work just like class autoloading works. The engine provides an extension point for autoloading. You register a callback. When an undefined function is encountered, the list of registered autoloaders is traversed. It's up to the community to figure out how to organise the functions. Personally, I think classmap or namespace-per-file ("module") makes a lot of sense. But I don't think core should mandate anything at this point. Side note: An actual "module" concept like python has would be kind of neat. But that's a much larger change. Maybe someday.
Certainly not. Lots of servers run lots of different server-side languages. You could use ASP, C#, Python...you name it.
Kudos for that valuable feedback, you are totally right. The funny thing is: my PHP development server doesn't issue the expected warning. I should probably look into that. Please check http://www.wardt.info/nested-objects-arrays-and-variable-variables-in-php/ for some additional kudos. :)
Awesome, wondering how Python would work. :)
Knock knock... Hello who's there ... ... ... ... ... CakePhp
Umm.. this is a shell script that simply wraps around wget/git clone or apt-get install. You can pretty much replace this script with: #!/bin/sh apt-get install php5 &amp;&amp; apt-get install php5-something &amp;&amp; apt-get install php5-somethingelse Pretty ridiculous.
Php's adoption of a more OOP design, doesn't mean stop using functions. I think a good example of this is [password-compat](https://github.com/ircmaxell/password_compat). The library is tested there's no real reason to have it object oriented. 
Awesome post. Really hope it's useful for some people. 
&gt; Jenkins (Java based) wasn't an ideal solution, and is also a bit bloated for our simple needs So they made one that relies on MongoDB? I don't imagine mongo is "bloated" per se, but for the simple purposes of tracking test runs, etc, wouldn't something less dependant have worked fine, like [SQLite](http://www.php.net/manual/en/book.sqlite3.php)?
Nobody is saying functions are good or bad, especially not the core. This if anything just makes their usage more consistent and less clunky.
If I had known then, what I know now, I would of likely used Laravel. But once you build a CMS with a framework, there isn't much going back. The amount of hate I see cakePHP get is a little over the top though.
Pretty much purely because the free account allows you to have private repositories, with private wikis and issue trackers. I also use it to host several projects that I don't want to make public (or are not in a fit state...!).
I use tFPDF which is an official port of FPDF which just adds utf-8 support. Its ok, but even on smallish documents (one 50k image + 2 pages of text) performance can be poor and the memory footprint becomes a major issue 
Thanks for the feedback. We chose Silex due to the simplicity, it's not meant to be a huge system with lots of features. The original version was also cli only, with new web ui so we thought by extending to add a ui it should be something widely adopted, but not too complex to configure/maintain.
I agree, MongoDB is a bit bloated and memory intensive and SQLite would have been more ideal for simplicity. However, since this started as a personal project for our own use we don't keep MongoDB on the same server as the Criterion application. This way we can have a centralised datastore for all of our projects but may different installations of Criterion with different environments. Different PHP versions, extensions etc and a disposal virtual machine. The reason we went with MongoDB over MySQL (or other data store) was mainly due to the offerings such as MongoHQ and MongoLab. If people wish to follow the same route and store the data elsewhere, these services offer a very simple interface and free tiers to get up and running.
FYI, it appears you've been [hell-banned](http://www.reddit.com/user/scottymeuk)
Feels like they're going pretty fast.. What will happen to 5.3/5.4..?
&gt; This way we can have a centralised datastore for all of our projects but may different installations of Criterion with different environments. Different PHP versions, extensions etc and a disposal virtual machine. But... Jenkins was a bit bloated? And that's the 'simple' architecture you run instead? 
Windows ME has way more hard work put in it. Should everybody be banned from commenting on it? Makes no sense. Maybe you should expand on 'does a lot more than just' line and make your comment more productive and perhaps tell me where I was wrong? Because I don't see any need for a script that wraps an OS package manager and stores URLs for your for Javascript libraries/etc/, if anything it's less secure, requires more maintenance and hides alot of stuff behind it's own layer that people /might/ want to see when dealing with software. 
What are "tools"?
"Get off my lawn you damn kids"
Right, I did one of these and it takes time to prepare. A LOT of time if you want to make it good. You speak at a conference, you get a free ticket, speakers dinner, a hotel room and hopefully some travel. Those are all nice little benefits in return for your work, as you'll hopefully enjoy being at the conference in general. Here, you just get a bit of money as a thanks. But because im "awesome" I asked Cal to donate it all to [charity](http://fundraising.housingworks.org/index.cfm?fuseaction=donordrive.participant&amp;participantID=1212).
Immediacy? A specific set talk at a specific time, with one authoritative developer giving a planned talk on a specific topic for a set period of time. With audio. Get that on IRC.
5.3 is already in an "End Of Life" cycle as of March 2013 and receiving only critical bug fixes - you should already be looking to migrate off it if you're on it. 5.4 will get bug fixes for a while yet, I haven't seen an announced EOL date.
I can't think of a single situation in PHP where I'd be so in need of a "better" random number that I'd be willing to make a HTTP request to get one.
Im forced to use it at work (Management decided), but we are forcing them to use Laravel atm. CakePHP is just the Java of the PHP world
That looks very prommising! Especially the built-in git features.
The difference lies in the cross OS streamlining. Especially for Debian 6, it currently has a lot of custom installations for installing things that are within the repos of Ubuntu 13.04. Furthermore, it explicitly builds specific projects over installing them through the package manager, as packages like node are unstable in the ubuntu repos. The big idea is that it differs from something like puppet, but tries to achieve similar goals. The reason I did not invest time in puppet is because I want this to install both physical and virtual servers. After installation, the same command may be called once more to let all installations run an upgrade, so serverplop may both function as installation and upgrade process. I know it is mainly wrapping a lot around package managers and git cloning, but it saves a lot of time. If I were to run all installation logic that comes with frontend-developer by hand, It would take me a day, whereas serverplop will do it all for me and notify me when I have to enter a root password or accept a Java license.
I must agree the name is too non-descriptive, but I haven't come up with a decent alternative. Currently it installs the following: - clusterssh - screen - tmux - imagemagick - git completion rules for bash - z (jump to a directory based on visit behaviour) - smith (show the git repo and branch in your terminal title / tab)
Whenever it can, Serverplop will make use of your package manager, so all those packages will be trackable through dpkg, but for those who are built from a git repo or come with cpanminus or pear or the likes: running the same serverplop command again will upgrade those who are already installed. In the next version, serverplop will keep track of the installation rules that were installed and add in a `make update` so you can run an update against anything you have installed, without remembering which rules you used to get there. As I said in another comment: serverplop tries to achieve similar goals as puppet, which is what I've been shot down with a lot now, but the main difference being the ability to run this on both physical and virtual servers. That makes this interesting for physical front-end and developer servers.
no errors and no results DB=costmanager-table=current- 
I see. Couldn't you list those the same way you list what LAMP consists of? Also, the links to the different parts of the page don't seem to work.
Sure, but will people update..? With PHP (I don't know other langs) it takes forever for hosting providers to move on to the newer version.
&gt; #!/bin/sh &gt; apt-get install php5 php5-something php5-somethingelse FTFY
Um... PHP 5 is used by 97% of all the websites who use PHP. PHP 4 is used by 2.9% and PHP 3 is used by less than 0.1%. Source: [W3Techs](http://w3techs.com/technologies/details/pl-php/all/all) On a side note, who uses hosting providers that don't let you update their own PHP versions? Every shared host I've been with has let me update it when ever I feel like it, to what ever version I want. Production level websites don't use shared hosting, they have complete control over their servers and their sys admins update things regularly.
Yep. I meant more 5.3 vs. PHP 5.4/5.5 Ex.: GoDaddy. ;-)
The fact that 5.3 is reaching EOL means most people will be updating to which ever version is the most stable. Feel sorry for anyone using GoDaddy as a web host or for anything at all.
:-)
"COUNT \*" is wrong, it should be COUNT(\*). Apart from that, add some error checking to the line so you can tell if MySQL is rejecting it: $textcount = mysqli_query($con,"SELECT COUNT(*) FROM `current` WHERE `Line_Number` LIKE '$id' AND `Call_Type_Description` LIKE 'text message'") or die(mysqli_error($con));
I have not found any broken links, workiel. They all point to a section of the page, a part of the github repo or a download link. All work fine. Your suggestion is actually a great one indeed. I will simply list the tools like the LAMP example. The difference being that all those lists are lists of different make rules of which the parent make rule exists. You could do `make apache2` but you cannot do `make clusterssh` which makes it a bit confusing. I will think about a proper way to visualize the difference
You are getting an error, because that query has a syntax error in it. So you might want to check the mysql errors `mysqli_error($con)`...
What is a hellban? Sounds much worse then a shadow ban 
Just wanted to add a positive comment, so the only comment in here is not a negative one that doesn't even relate to the actual work. The API looks clean, the code well-commented, structured and tests are also there. Nice work! Someone will find it useful.
Without a wildcard of % or _, like just operates like =
Indeed. If true randomness were so important to me, I'd put the servers under my control and instead hook up some environmental sensors to generate that randomness for me. 
You're trying to mix the `mysqli` and `mysql` libraries. That won't work.
Well that's cool and all but you can just do it once. Cut an image and clone it across the servers if doing same thing across several servers is a big issue. I don't know how many servers you managed but usually they are of the same distribution. I have no seen somebody run multiple Linux flavors on their machines. That just screams incompetence.. maintaining security and updates on those machines would take a small army of dev ops. Just saying, cool script but I don't find it useful.
Sorry, my mistake - it's only the Lamp link on the top that wasn't working.
Alternative approach: [vfsStream](https://packagist.org/packages/mikey179/vfsStream).
Definitely useful, I'll probably use this instead of my current method to generate api secrets for clients.
I can see where you're coming from but yes this is very simple architecture for us. We already use MongoDB in our stack and everything is PHP or Python, no Java. In terms of memory usage Jenkins uses a lot more compared to these lightweight php test runs. We currently run 512mb instances with multiple tests running at the same time on the same machine. Our server builds are also scripted via Fabric, so running one machine or 100 machines makes no difference since it's all automated. Again, the huge advantage is we can share the data between multiple installs. I've not used Jenkins for anything outside testing my local builds at work, but I don't think storing all test data and history in one central place while lots of tests run from many machines at the same time is possible. Please correct me if I'm wrong on this.
More thoughts: 1. class_exists() second argument should be false to avoid conflict with other autoloaders (i deal with this a lot). 2. I dont really see the point of having an autoloader for this library, or custom logging (but it makes sense for the tests) 3. im having trouble understanding the need for storage/db??
Move to a better provider - note that most of the servers I have to fixup/correct with CPanel are stuck in 5.3 land too - not cool, first step it to rebuild the server *without* CPanel and shiny new PHP 5.5 ;)
I know the time and effort required to present ... but I do it out of the love of what I'm presenting. Being charged 10 for every video is a bit steep in my opinion. From reading the website the intention is good but it feels like I'm being profited off of for wanting to be a part of a community I cant otherwise be a part of.
Here you go: https://puphpet.com/
Take a look at their managed app environment, Elastic Beanstalk. It's a nice little hands-off web server as a service. Not super customizable, but very low learning curve. 
i forked myself a copy and will play around with it. id like to load it up in my IDE to see where things go and maybe then i could have some better suggestions.
&gt;Would you advise against using WAMP and why? Would advice against: 1. Performance. I haven't used Windows for production hosting of PHP apps since 2009, so performance may become better since then. 2. Maintenance. There is package managers in modern linux distros. You can update all your server software by running single command. That saves much time on keeping your server safe. 3. Features support. If you want to install some popular extension, someone probably already packaged it, so you just need to install that package. Or even better, someone could possible already made a repo/PPA (package source) so you can keep it up to date. From my experience, even compiling something from sources less painful under linux. &gt;Does one need to do a good deal of manual configuration with an AWS instance, or do their tools assist you with config, updates, etc to an extend where not much skill is needed? Really not sure about that. But, when choosing AMI to create your instance from, you can choose one with pre-installed [Webmin](http://www.webmin.com/). As someone who usually prefers to do everythig from CLI, I was quite sceptical about it until I have actually tried it. Now I have it installed on every server I manage. It covers all of the routines. If you want to host more than one website per instance, you will probably want to install [Virtualmin](http://www.virtualmin.com/) too.
I don't mind paying $10 to listen to a good speaker. My only gripe would be I have to stay up too late - July talk starts at 8PM CDT which is 3AM in Croatia.
Awesome!
Are you serious or ironic? You'd just "hook up some environmental sensors" to your server, and BING, TRUE random numbers.
Online poker for example [How We Learned to Cheat at Online Poker: A Study in Software Security](http://www.developer.com/tech/article.php/616221/How-We-Learned-to-Cheat-at-Online-Poker-A-Study-in-Software-Security.htm) Just because you don't see a situation doesn't mean it doesn't exist.
I would recommend against it unless perhaps you are using the simplest of 3rd party modules. Compiling them is a pain and some just are not supported in windows. In most cases you manage your servers with a public/private key. View this as a learning experience... 
Yep, thanks. Looks like I need to add this to Readme.
Actually, I think he's talkink about one of these: [Quantis PCI express](http://www.idquantique.com/component/content/article.html?id=97) You can just insert them, and they'll provide "true" random numbers, at least in the sense that the numbers coming from these device pass all randomness tests. That said, the whole field of randomness is of course highly debateable. For servers though, as we are talking about 1U, 2U, etc... I think the USB is their only product usable, except you have 3U, 4U space, but I could be wrong. Just speculating.
What if you cache up some random numbers coming from Random.org or other sources, does that break the randomness of these numbers? ps. Please know what you are talking about before answering, the field of randomness is as complex as cryptography. So please, know your subject if you can answer this.
I would strongly advise against Wamp. If you are after scalability and ease of use you're better off with a PaaS provider. With a default Wamp setup you'll be stuck with everything on one box. If you truly want scalability you should be considering a scale out approach (add more servers vs. add more memory / cpu to a single server) which means you'll need a load balancer, multiple web servers and a separate database instance with replication and scaling etc.. Setting up that kind of environment at Amazon (or anywhere really) from scratch is non-trivial at best. Doing it properly requires an ops team or a services contract with a 3rd party. Take a look at their Elastic Beanstalk and Ops Works products, they are pretty good but hardly ideal. I'm speaking about hosting for web applications specifically, there are many reasons that Amazon is ideal for applications that encompass far more than just "web". As it relates to web though, IMO there are better options, look into HeroKu, AppFog, PagodaBox or some other PaaS provider. You'll get the scalability you want but much, MUCH easier to use and deploy. They mask all the complexity behind the environment like the load balancers etc.. I like to focus my time on developing and leave the Infrastructure end of things up to somebody else who knows better than I do.
But be careful - from random.org: You can only generate 1 million bits per IP. After that you pay. "Wait for your allowance to be topped up automatically. You get a free top-up of up to 200,000 bits every day (just after midnight UTC) until you reach the default allowance of 1,000,000 bits. If the server is lightly loaded, you may get a free top-up earlier, but don't count on it." [Source](http://www.random.org/quota/) But useful and great library anyway. It's very well written, I just reviewed the source code. Good code overall, and well documented.
You can't get true random numbers cheaply. You can't generate random numbers from a predictable source. Most random numbers used everywhere in the computer field are generated using predictable sources. You have are going to have to rely on outside source for these numbers. If you can give me a solution, that generates true random numbers without an outside source (that being a service or an device), I would thank you a million times, because I need it. [Mersenne Twister](http://en.wikipedia.org/wiki/Mersenne_twister) is good enough, but it's still a pseudo random number generator. The "mt" in the [mt_rand](http://www.php.net/manual/en/function.mt-rand.php) function in PHP stands for Mersenne Twister if you didn't know that already. It doesn't provide true random numbers. Edit: Grammar.
Thank you for the feedback! ) I have so many ideas to share, but my English is not so good. Due to this each article is a serious work for me and without a feedback I have a feeling that my topic wasn't interesting for readers ( But your comment give me a good sign that my article was interesting. Thank you one more time!
http://www.entropykey.co.uk/ Hardware RNG for £36 and under, if they come back in stock. I suspect you can find many alternatives for similarly low prices. However, as it turns out, you pretty much never need true random numbers. You just need random numbers with certain properties, which is a different thing entirely, and something cryptographers have pretty much solved.
You misunderstood what I was saying. There are other ways to generate better random numbers without getting someone else to do the generation. If randomness is that important to me, I'm not going to trust an offsite service to do it for me - and I'm **certainly not** going to use http as the communication method. It just introduces another possible point of failure that I can easily avoid.
&gt; AWS's cost structure being the same for an instance running either OS Care to explain? I thought linux was much cheaper no? I don't have the expertise to advise against WAMP. I have been running linux instances for 18 months though. I learnt everything by simply goggling what I need done. "linux create user", "set up a lamp stack", "linux add repo". You'll get tons of articles to follow. It is however a lot of learning but I found it deeply rewarding. I'd suggest simply trying it out for a day or two, fire up a micro debian spot request, connect and try set up a few things, it will cost near nothing and you'll get a taste of what needs done.
Still there are lots of issues, that will be fixed soon. Now it mostly works on simple cases, but I hope to test it on different frameworks and get it stable.
I agree with you on most of it, but you don't _want_ to map closely to the DB. The API has nothing to do with the DB, and suggesting it does is just dangerous and confusing. Renaming fields = boom. Limit and Offset is very SQL orientated, and when you start switching bits of your data out to Cassandra/Riak/whatever you're going to care less about SQL terminology. `page` and `number` gives the developer all they need to do, without forcing them to do maths. The "dont make me do maths" thing is the most important, but there is no reason to use SQL terms if its not SQL :)
It's optional. For performance you can have proxy creation, but alternative this can be patched in realtime with php-filters. 
Actually I was sort of wrong on that, the default Amazon Linux is cheaper (not sure exactly what distro it is), SUSE is the same price as Windows, and Red Hat Enterprise is more expensive. When I posted this I was focused on SUSE. [pricing here](http://aws.amazon.com/ec2/pricing/)
Don't cache them?
I will be using Imagemagick and I have read that getting that to work on WAMP can be pain. That was another concern of mine with going the Windows route. 
Ah yes, forgot about that, I think it's to do with licences. I use Debian.
I've had suggested this kind of stuff (annotations for "tagging" methods to which apply aspects) to other php devs at some event and got almost called "heretic" :). I'm always surprised to see so many php devs rejecting annotations (for example), whereas in other languages like Java those are widely used concepts (I've used AspectJ to do exactly that: I had a `@Cacheable` annotation to mark methods to cache). So it's good to see people continue to push stuff like that (annotations, aspect), I'm sure in the end it will spread widely, it has already come a long way with Doctrine, Symfony &amp; co. So keep on! You may not see results today but I firmly believe your work on this is shaping a part of PHP's future.
I would recommend something like pagodabox/heroku/appfog 
You best be trolling
I agree that's a useful hook. Maybe it could be adapted to use a personal "phrases" file where you could put terms that you don't want committed. Might try this myself actually :)
&gt;EDIT: *The default Amazon Linux is cheaper, SUSE is the same price as Windows, and Red Hat Enterprise is more expensive. If you're using micro instances, maybe. However, you probably shouldn't be using micro instances due to the limitations they impose. You would instead want to use small instances, in which case it's RHEL &gt; Windows &gt; SUSE &gt; Linux. &gt;Would you advise against using WAMP and why? Ignoring the differences between WAMP and LAMP overhead, I would stick with Linux simply for the fact many of the best management tools for AWS are Linux-based. &gt;Does one need to do a good deal of manual configuration with an AWS instance, or do their tools assist you with config, updates, etc to an extend where not much skill is needed? Once you have your AMIs setup you don't really need any additional configuration. The whole idea of AWS is that the structures are temporary and can be replaced easily. So, if there is an update you simply update your primary AMI, test it out on a development deployment of your application, then once it's verified working, do a cutover of your instances so you just stop using the older AMIs. My advice / insight is to simply get familiar with administrating a Linux environment. It's pretty easy in this context.
The "default" Linux option is either the Amazon Linux setup (basically it has everything you could want for a development environment) or Ubuntu (various versions, 12.04 LTS/13.04). There are also community AMIs which include basically anything else you can imagine.
These are all server admin things that you'll mostly do a handful of times and, hopefully, not have to think about too much afterward. Even the hosting companies just drop a preset image on to their servers. I honestly wouldn't bother with multiple versions of PHP unless you have to migrate up a major version (i.e. version 5 to version 6), it'll only be a distraction. All that aside, PHP is a precompiled or interpreted language which is why your code doesn't need compilation every time you make a change; you just refresh your browser to see the changes. So, during your server setup you're either compiling the language or installing an already compiled package. Other languages, like C and C++, need to be compiled after coding but before execution. A ton of modern languages, like Java or the .Net stuff, are a mix of the two and use an interpreter to execute the program in a system native format. Now, I might be biased, but I find the installation/configuration *much* simpler on Linux/Unix. Apache, PHP, and MySQL all install as packages in seconds and configuration is pretty quick with ample documentation on the web. Setting up virtual sites on Apache used to be kinda time consuming, but it's ridiculously easy now with 2 commands and a config file. It also means your dev environment already has a lot in common with your production environment.
Oh, yeah ) I have presented an AOP for several times on conferences and every time "traditional" OOP developers ask me about reasons to use it instead of decorators, mediators and so one. But they can not give me the reasons why should I write thousands of LOC to implement cross-cutting concerns in OO decisions. I have ported Spring AOP component to the PHP and internally it uses aopalliance interfaces, so it's really interesting AOP engine for PHP. BTW, my Warlock framework will have unique features that are not available in PHP now. Stay tuned ) And thank you for support!
Kids are always the acceptable excuse. Though I have kids and I'm running WNYRuby and helping at GDI Buffalo. See you tomorrow night shawncplus
lamp. i dont even deviate from apache.. fpm is awesome and can keep up with nginx all day. the only deviation would be percona, its an easy and stable drop-in replacement for mysql. as far as hosting goes, why AWS? you may find in-memory caching to be a bit more work with AWS, i prefer CDNs for static assets, then my app server can run as fast as it wants. maybe a dedicated box with DB on its own disk.
&lt;pedantry&gt;Aren't AppFog etc PaaS services as opposed to SaaS services?&lt;/pedantry&gt;
Yes. :) (edited)
Awesome, thanks. :)
What is the time on page? What is your app CPU time per request? 30,000 concurrent isn't much if you're talking users browsing. You need to break down the to actual hardware usage per request. For example: * Target = 30K concurrent users (per analytics) * PPM = 2:00 (per analytics, avg time on page) * RPM = 15K (requests per minute) * RPS = 250 * App response time = 200ms. * Capacity per Core: 5req/s * Cores per server (c1.xlarge): 8 * Capacity per server: 40req/s * Servers you need: ~6.25 (target RPS/server capacity RPS) I've had to do a fair bit of capacity planning including surviving the "reddit ddos". You can implement strategy to mitigate the costs of running so many servers (you can solve most problems with more hardware). A 5s microcache for users who aren't logged in meant I can push 1000 requests per core serving up static pages from nginx. With a time on page of 5min in my instance for example, it's 300,000 people hitting the same article. NewRelic showed me being network bound per server before I was cpu bound so I opted for dual core boxes since there was no point in going to more cores. If you're talking scale, to the point where requests/sec matters do not use apache. Use nginx+microcache+php-fpm+opcodecache. Or... if you're feeling experimental, try [G-WAN](http://gwan.com/benchmark). 
Yep already starred warlock ;) About a year ago I wanted to [try integrating DI &amp; aspects](https://github.com/mnapoli/PHP-DI/issues/29) (didn't know about Go then) but I lacked time. So I'll definitely stay tuned on this :)
&gt; you write bindings for an API/piece of hardware that generates better random numbers for you and that's not outsourcing? Just like you use a reliable hash function and not one that you invented yourself, that is perfectly valid to outsource random numbers generation to a specialized service. Of course you need to have a secure link to that service, but if that's a show-stopper, then so is any other server/service on the planet...
It being an offsite service is probably the least of the concern here. The latency from waiting for a random number via HTTP requests would completely murder any website. And before someone suggests that you could cache the numbers, that'd defeat the purpose of random numbers. 
Note, the above echoes: &gt;Foo! &gt;Foo! &gt;Foo! &gt;Foo!
&gt; It being an offsite service is probably the least of the concern here. Actually it's a big concern to me, because I don't want to encounter a situation where their servers going offline take that functionality with it. It's just silly to make that kind of dependency for something like random numbers.
&gt; **Question 2: When I developed my first application in Ruby on Rails, I was impressed by it's dry principles.** .. Can we do a similar approach in PHP? (Probably could be use of globals but they'll look messy.) It looks like it's just a before() method, which has been common in many frameworks (PHP and otherwise) for a long, long time. before() is just a method that gets called before every action method executes. Typically there's an after() method as well. The data is normally stored in the Controller context, not globally.
&gt; **Question 3:** In javascript, we sometimes pass things like e, event, xhr etc. into closures; but, we can also specify what we would like to call ourself, for example when we receive data from server and appoint it to a variable that saves it. This is outside the scope of this subreddit. But look into Javascript "call" and "apply" methods. http://odetocode.com/blogs/scott/archive/2007/07/05/function-apply-and-function-call-in-javascript.aspx
&gt; Question 4: How do you unit test a method which checks for valid e-mail syntax and returns true/false depending on given parameter? Your example seems specific to PHPUnit, which isn't a part of the core language (just thought you should know since you didn't specify). I assume the proper way to do it would be: $this-&gt;assertEquals(TRUE, filter_var($email, FILTER_VALIDATE_EMAIL)); Assuming you trust PHP's native email validation: http://php.net/manual/en/filter.examples.validation.php
I'm inclined to agree with you. I'm not saying that these things aren't of concern, but that there are a lot of other issues with it as well apart from that which would render it a show-stopper.
The above *works*, and yes, notices are disabled. My assumption would be that Laravel disables notices by default.
It was a very basic question, that's why I asked it here. :) I'll read the article now.
&gt; http://laravel.com/docs/routing#route-model-binding Ah, you're looking for a Laravel-specific solution. I'm not as familiar with that framework. Implementing something like this would be trivial in say, Kohana. 
I don't know if I can trust a service like this… How do I know that you don't keep the data on your server(s)?
I'm not sure what unit testing your email validation regex gets ya really, but it might be a non-issue if you can assert it works once. Here's a great old article on how to help you decide how in-depth your unit testing needs to be / what needs to be unit-tested: http://blog.stevensanderson.com/2009/08/24/writing-great-unit-tests-best-and-worst-practises/
If you're posting private/secure data to a public web service you're an idiot.
It's for use in PHP. This generates the code not the output of the array. The data should be replaced by variables.
I'm not looking for Laravel specific solution. Basically, any little PHP code example will get me going. I don't know how Kohana supports this. Would read it's source code but they're too damn huge.
I find the array stuff useful to make something like this with a lot less work than normal $data = array ( 'message' =&gt; $model-&gt;message, 'author' =&gt; array ( 'name' =&gt; $model-&gt;author-&gt;name, 'email' =&gt; $model-&gt;author-&gt;email, 'date' =&gt; $model-&gt;author-&gt;date ), 'parents' =&gt; $model-&gt;parents(), 'tree' =&gt; $model-&gt;tree ); Request::factory('/api/')-&gt;data($data)-&gt;execute(); The whole middle section was just copied from the site and changed to suit my models. 
You mean like var_export(json_decode($return)); ?
I found HeidiSQL and it is now my favorite MySQL management tool. Never used phpmyadmin anymore!
Interesting. . .
Since my comments are moderated on the site, I feel the need to post all the issues I found in the article: * In the first section about traits, I will admit that I know little about traits and have never personally used them. That said, I think it is quite silly how the first example is used. When defining a trait, I would imagine it creates a lot of flexibility and promotes code reuse, but "Reversible" is a very broad definition on how to reverse something and it is very limited to PHP arrays with this implementation. I would find it better to write an interface "Reversible" with a method "reverse" and use the trait to define a re-usable way of reversing arrays inside classes. * In the next section about private declarations, I was quite surprised to test this and have it work. The evaluate function seems to work as long as the class is being passed to another instance of the same class (or an instance of a child class with the method being inherited). It fails as expected if the class is not related to the class running "evaluate", ie. if a child class of Storage implements "evaluate" differently or using a class that is not a child of Storage. * In the section regarding abstract classes and members, using the "abstract" keyword in the class definition and method definition are both legal and useful. You cannot define a class with an abstract method without defining the class abstract. It is possible, however, to define a class as "abstract" so it can never be instantiated directly, and to define an abstract class's methods "abstract" to make the function declarations act similar to PHP interface method definitions. Also a copy/paste of my original comment in the article: &gt;In “Type Hints Don’t Autoload” segment, there is incorrect information. Specifically with: &gt;&gt;“The class name in the catch clause is actually a type hint, but since we didn't indicate that the Exception class was in the top-level namespace, PHP thinks we mean \MyNamespace\Exception which doesn't exist. The missing class doesn't raise an error, but our exception now misses the catch clause. You might expect that we’d see a missing \MyNamespace\Exception message, but instead we get the unspeakably ugly “Uncaught Exception” error:” &gt;The reason why it is not caught is because “Exception” defined in the contained namespace resolves to “\MyNamespace\Exception”. When attempting to catch “MyException”, resolving as “\MyNamespace\MyException”, the catch block sees that the given Exception (or parent of the Exception) does not match the cached Exception type, resolved as “\MyNamespace\Exception”. Described above is the reason why “\Exception”, “\MyNamespace\MyException”, and “MyException” all work correctly when attempting to catch a thrown exception. A better example to give about how typecasting does not automatically invoke the autoloader is giving an example like: https://gist.github.com/JoelLarson/6059225 &gt;It is also not mentioned that it is possible to make the PHP interpreter auto-load undefined arguments that are type-hinted. This is done by using register_shutdown_function alongside an auto-loader. Laravel 4's IoC container / Exception component is a good example of this.
Just to address your first comment about unfamiliarity with traits. Traits are pretty simple. A trait is similar to (but not the same as) a ruby mixin/module. It just defines a group of methods which are included inside one or more classes without using inheritance. The main advantage of this is that you can reuse the same methods without having all those classes extend from the same superclass, and without defining those methods over and over for each individual class. It helps to promote common interfaces and behaviors in objects of different types, since any class that uses that trait is expected to have somewhat similar qualities. It also allows us to get around the fact that PHP doesn't support multiple inheritance which you may or may not agree with - MI is a touchy subject with some groups. I think you're being a little over-zealous about the "Reversible" trait - it's clearly an example. Possibly it could have been named better but the point was to show how a trait works which it manages to achieve. I agree with your second point. I think this is pretty much bad design in PHP. If something is private, it should remain private to the object unless you specifically define a getter and/or setter. However, it is a valid behavior in PHP and as such it's good to have some knowledge of these things even if you might consider actively avoiding their usage in that way. I agree with your third and fourth points entirely.
Except it's not defining a getter. It's literally pulling the private property directly without accessing a getter method. 
It is common knowledge to manipulate the internal variables of an instantiated object at runtime with getters/setters (as an example). However, I did not realize that it was possible to retrieve a member's private variables from inside another (different) instantiated object by passing it in as a function parameter. I believe the reason why this is possible is because the object knows the properties about it's own definition.
Ah thanks. I do see the usefulness of code reuse using traits (and did actually know about the multi-inheritence argument with it). I just think the example is just a nit-pick at this point. haha.
I didn't notice what was quite going on at first in the OP. Seems to be type hinting that can be read up on [here](http://php.net/manual/en/language.oop5.typehinting.php). I assume something like this would even work for nested private functions which I may try tomorrow. Edit- formatting -phone issues
Fix me if I'm wrong please. It's not in realtime actually. It rewrites code during import. Real dynamic rewrite would require extension
Why static methods only? This is probably the occasion to offer an OO wrapper for strings. There could be some use cases where you'd like to type-hint for a String object, and then chain-call some methods on it.
Of course if your solution is to hit the webservice inside the HTTP request for a web page of your site, the latency is a problem... You can also have background workers and pre-fetch random rumbers.
Except that's how hardware random generators work. Now stop being so fucking condescending.
&gt; Inheritance for Interfaces and Traits http://www.php.net/manual/en/language.oop5.interfaces.php http://www.php.net/manual/en/language.oop5.traits.php &gt; How Private is a Private Property? http://www.php.net/manual/en/language.oop5.visibility.php &gt;What Does an Abstract Class Look Like? http://www.php.net/manual/en/language.oop5.abstract.php &gt; Type Hints Don’t Autoload Who said they do? It's a usual class name usage, just like `new SomeClass()`, why would it work different? &gt; And Finally http://www.php.net/manual/en/language.exceptions.php You learn the language - you read the docs. You read the docs - you know everything that's written in the article.
The best way to think about traits is copypaste. This is quite literally what PHP does when compiling the code.
Just be realistic, how many PHP devs host their app on a physical server on which they can add hardware?
That's why I said *if* true number generation was so important to me (which it isn't), I'd put the servers under my own control (i.e. self-hosting). Now, I'm sick and tired of your condescending tone and your downvotes. You can go bugger off for all care.
Thank you! What process did you use to compile the arrays? I was in a similar situation last year, and ended up painstakingly combing through alphabets on Wikipedia, and mapping them by hand. Is your source any more reliable?
I got the alphabet from the open source CMS http://www.impresspages.org it's used by sites from all over the world, and anyone can contribute, so I'm quite confident the list is fairly reliable.
Use a passed-in parameter instead of `NOW()`.
 * No more use of the &lt;?php tag. * Autoloading of single functions, not just classes. * Revise the array and string functions so there are clear mutable and immutable versions, and change their names to clearer names. * Alternative syntax for functions: function factorial($x): .. endfunction; * The extension xdebug built in.
&gt; No more use of the &lt;?php tag What would you use instead? PHP files being parsed entirely as PHP, regardless of actual content? What about inline code?
Named parameters.
We'll just use .html for files that have interwoven HTML and PHP, and .php for pure script files. Something like this has been proposed already through RFC.
I really like point #2. The separate notice/warning/error system and exception system really badly needs to be unified. I'll create a list of the best ideas in the description in a few hours.
Ah, I see where you're coming from. If we do that, though, we'll also have to allow HTML files to contain JSP code, ASP code, C# code, etc. Maybe PHP files contain just PHP code, and PHP (like JSP, ASP) contains HTML/PHP? Just another idea.
This is a nice set of methods but here is some feedback: * Take a look at [Patchwork UTF-8](https://github.com/nicolas-grekas/Patchwork-UTF8) and maybe use it for the underbelly of the translation logic instead of hand-built arrays * Another vote for less statics. `S::create($str)-&gt;truncate(5);` * `$encoding = $encoding ?: mb_internal_encoding();` feels a little repetitive, maybe `S::create($str, 'encoding')-&gt;truncate(5);` * PSR-0 = good, next maybe PSR-1? Get that `?&gt;` outta there. I think this could really be awesome though. If you take care of that feedback I'd love for you to come and join the [League of Extraordinary Packages](https://github.com/php-loep), so when we launch it you can get a shitload more publicity.
PSP? Good idea. Or else, give pure php files their own extension like .phpp for PHP Program. EDIT .phtml sounds the best I think.
Making strings objects would be quite useful, e.g: $foo = "bar"; echo $foo-&gt;toUpper(); It would also provide a way to use UTF-8 strings instead of the mb_* methods. Also scalar type hinting would be another useful feature.
The one annoying thing that seems to come up more often than anything else: the lack of a get_full_uri() or $_SERVER['REQUEST_FULL_URI']. Every time you have to dig around in the $_SERVER variables available on that particular server and patch together something to give you the full uri the page was accessed from.
What's wrong with this? $this-&gt;doStuff(null, "", $customer, false, $condition, $offset) /s
Polymorphism It would be quite nice to have the ability to declare a second version of a function with just slightly different parameters
The only thing I can think of is types, I really like how strict C# is with types and I'd love it if you could define numbers with types, strings with types, etc then you could restrict the type you accept in functions. And yes I know you could just create a class for it but I don't want to go: int $i = new int(0);
Couldn't you accomplish the same with `$StringArray = explode(" ", $String)`? **EDIT** Not that I like the name `explode` at all.
Isn't that the [explode](http://php.net/manual/en/function.explode.php) function?
Could you elaborate on your coding background (if any) so that responses could be better tailored? Coding academy is a great resource to get down your basic logic, if/else, while &amp; for loops. You would be surprised how much you can do with a small set of syntax.
As dirty as it makes the language, I'm a huge fan of the fact that PHP has always been mostly backwards compatible. So, while most of your ideas are good, I would not be for them. Named parameters would be awesome though. Scalar type hinting is a no brainer and odd that it's not already done. Strings as objects would be super. I'm curious, what would the advantage of the FULL_URI be? 
Damnit, changed it to a different one now. Completely forgot about explode.
T_PAAMAYIM_NEKUDOTAYIM is descriptive... if you read Hebrew. It means double colon. The accessors thing would be awesome. Edit: // wrong word.
Off the top of my head: * Clean up the global namespace now that we have namespaces * Unicode strings by default, byte strings as an option * make function arguments and names consistent (eg haystack, needle) * remove pointless aliases (join/implode) * Hugely reduce the number of built-in extensions. E.g. for databases, keep PDO and drop everything else. * Built in PSR-0 autoloader. You should be able to use something else if you want, but this is becoming a defacto standard and encourages good practice. * Built in standardised mockable HTTP request and response classes (like the Symfony HTTP foundation). * Exceptions not errors, consistently throughout PHP. * Proper namespaces, not just for classes. Functions too. More like Python's packages. * Right now I can use a Traversable/Iterable instead of an array on some, but not all array functions. Clean that shit up. Make it proper duck-typing. * named parameters please. * Kill the superglobal arrays ($_POST, etc) and insist on `filter_input` because using `FILTER_UNSAFE_RAW` should be a conscious choice not an accident. Perl's tainting is an alternative, I'm not fussy. * Primitive types as objects would be nice too. "Lorem ipsum"-&gt;length or something, especially if strings etc were duck-typeable like arrays are(ish). * make the environment consistent. Scripts should run the same regardless of `php.ini`. 
 function doStuff($one=default, $two=default,$three=default,$four=default,$five=default) {} The problem is that I want the defaults for 3 and 4. If I pass in null, thats going to break things. Usually I get around this by putting in some if ($four == null) {$four = default} code, but its annoying when I could just name each of them.
Yeah I think PSP sounds neat :) The reason I like .php as the extension for pure PHP files instead of .phpp or .phtml (as you suggested) is that those files should contain *just* PHP -- if we're following good design principles. To recap: * PSP - short for PHP Server Page - For PHP *and* HTML * PHP - short for PHP: Hypertext Preprocessor - For PHP only PHP files should never contain HTML, and vice-versa.
Unless I missunderstand you, explode() is what you want. http://php.net/manual/en/function.explode.php 
I think that worthy of mention in this article should be the dreaded "CURLOPT_FOLLOWLOCATION cannot be activated when in safe_mode or an open_basedir is set" error. The only solution to this if you can't change those ini settings is to do the redirect manually. A recursive example is on the docs here: http://www.php.net/manual/en/function.curl-setopt.php#95027 
I would state that internal C errors would not be acceptable, under any circumstances, even if you are using a function totally incorrectly. All errors must be seen as being 'PHP errors'. I'd also build in a system where if an error occurred on a page, the whole page is lost, and just the error gets returned, with a full stack trace. Like PHP Error, or XDebug.
5.4 does exactly what you want (see: http://php.net/manual/en/language.types.array.php) The following is now valid PHP: function get_array() { return [1, 2, 3]; } get_array()[1]; 
You mean parametric polymorphism. PHP has subtype polymorphism
You can do array dereferencing since 5.4.0 (I think that is what it is called): http://3v4l.org/0Ulc5#tabs
My workaround is to pass a single associative array parameter to any non-trivial function that needs (or will likely need in the future) multiple values. $this-&gt;doStuff(array( 'person' =&gt; $customer, 'filter' =&gt; $condition, // 'limit' =&gt; 1, &lt;-- see how easy it is to add/remove parameters? 'offset' =&gt; 2, )); function doStuff($options = array()) { // assign default values $options = array_merge(array( 'person' =&gt; null, 'includeDeleted' =&gt; false, 'filter' =&gt; null, 'limit' =&gt; 10, 'offset' =&gt; 0, ), $options); ... }
Do it for the children!
Damn, wish my hosting site would update their PHP version. Editing my main post now.
Yes to most of that, but f**k annotations. This was [my write-up](http://philsturgeon.co.uk/blog/2013/01/php-6-pissing-in-the-wind) of strings and UTF-8 improvements. Return typing would be nice too. I'm not actually all that against errors, notices, warnings and deprecation warnings, mostly because whenever they happen it's telling YOU the developer that YOU are doing something wrong. That file doesn't exist. That class doesn't exist. Duh, you should have checked first. But, if we went exception heavy I wouldn't be against it either, I just think people hate on errors/notices too hard when really they should just focus on handling guarding from them, or converting them to ErrorExceptions if they're really interested in all exceptions all the time.
Issue with this is you then lose a powerful feature in IDEs: parameter intellisense.
It sounds like you have what I call the HTML/PHP experience, which is simply mixing PHP in with HTML to make things a little more dynamic. This is effectively what Wordpress does, and it works well enough. Unfortunately, this kind of thing doesn't scale very well, so most companies use a PHP-centric framework to do the heavy lifting. It sounds like your company is using an MVC (or similar) framework. I'd start by reading up on those, then download a copy of CodeIgniter or Laravel or some other MVC framework and do a "Hello World" style app. Once you see how all the pieces of those frameworks fit together, then it makes the whole thing a lot easier to understand. Each of the major PHP MVC frameworks will have a Getting Started tutorial, so I'd just do that. Of course, your best option would be to get a coworker to walk you through everything. I'd be honest with your boss and say "Look, I've never done anything like this before. Can someone walk me through it?" If you're honest, show initiative and willingness to learn, and then actually follow through on learning how to use it, he should have no problem getting someone to help you out. Good luck. :)
Property accessors. That is all I want. Please for the love of all that is holy... property accessors. **Jazz Hands**
Imports. Seriously. Instead of doing this: require("./classes/mainClass.php"); require("./classes/text/textClass.php"); require("./classes/fonts/fontsClass.php"); Let's just do this: // Set the directory where we will import from set_import_root("./classes/"); import mainClass, textClass, fontsClass; 
This is pretty much the same as using class autoloading and using the `use` keyword.
Add pluralize and singularize to the to-do list. Useful when specifying quantities of items.
Well PSR-X autoloader, whatever. :)
Kind of going off bl_nk's answer, here's kind of how I'd do it. PastDueInvoice.php pastDue30() pastDue90() ... Since you're using Laravel 4, I'd suggest adding in some artisan scripts that a cron job can easily call (`php artisan application:pastdueinvoices`) which could call each of those methods to detect and send emails for past due invoices. Basically, your methods should be calling a method to get the current time, maybe called `currentTime()`. By default it should just return `time()`. While that may seem stupid, this will allow you to use Mockery to mock the `currentTime()` method and return whatever time you wish. That way your tests could look like this: public function testPastDue30Email() { Mockery::mock('PastDueInvoice[currentTime]')-&gt; shouldReceive('currentTime')-&gt; andReturn($someRandomTimestamp); Mail::shouldReceive('send')-&gt;andReturn(true); // If your test data has 5 past due invoices past the // $someRandomTimestamp and returns the number // of past due invoices $this-&gt;assertEquals(5, $pastDueInvoice-&gt;pastDue30()); } Because `pastDue30()` will now call the mocked `currentTime()` method it will return your `$someRandomTimestamp` which you can change to be whatever you want depending what your test data looks like. That test is rather stupid, but the only important thing is mocking the `currentTime` method. Your assertions should be whatever you want, the `Mail` mocked object should expect `send()` N times, etc.
But it's *reliably* horrible! ;)
&gt;Get rid of error suppression and error suppression operator No. There are times when this is actually needed due to how library interactions occur. If you choose to abuse it, that's pretty much your problem. &gt;Get rid of notices/warnings/errors and use exceptions instead No. Notices and warnings are not exceptional, and should never fire exceptions. The only error types in php I would consider using exceptions for are fatal errors. &gt;Get rid of the global keyword No. While abuse of globals is actively discouraged, access to the global scope is something nearly every modern language has. &gt;Add annotations system No real need. You can already annotate in comments. There are reasonably well known formats for this, and plenty of tools to read them. I'm not really convinced that runtime annotations would be all that useful. &gt;Fix parameter order, mutability, and naming of standard library functions People need to stop worrying so much about this. Yes, we know it's not optimal, but it's not as big a deal as it is made out to be. &gt;Make strings objects so string functions can be called with the arrow This goes against the entire design of php in that you'd start to run in to situations where you'd have non-strings that you wanted to treat as strings. One of the things that could be considered a major strength of php (or perhaps a major weakness depending on how you want to look at it) is the typecasting system. Suddenly you wind up in situations where you have integers or floats where you want to treat them as a string but they don't have any string methods. You're going to wind up in situations where you're perpetually doing $something-&gt;to_string()-&gt;some_string_method(); &gt;Add a REQUEST_FULL_URI field to $_SERVER This is trivial for you to do yourself. &gt;Add function overloading based on different parameters The fact that PHP makes it difficult to do this could be considered a good thing. Code becomes harder to read, trace, and understand every time you encourage magical behaviours like this. overall, it sounds a lot like you'd be happier writing in Java, or some other language that is more strict in how it operates. This is simply not what PHP is aiming to be.
Happy day! Now to get 5.4 on production servers.
You lose nothing if you properly document the methods. Any IDE worth its salt can pick up on that.
If you're passing that many parameters, you're probably missing the point of OOP.
Actually, if you have that much conditional data to pass along you probably have too much responsibility in a single method.
For me, it would be getting rid of warnings/notices and going to a pure exception based standard library. Outside of that, __toInteger(), __toFloat(), etc. would be a close second.
If they're using classes (hopefully?) over just requiring files an IDE can be really helpful to let you drill back and forth and follow the program flow. If this is basically an Apache SSI site written in PHP, then my condolences.
Threading, really good and fast threading!
An annotations system lets comments be attached to specific elements like a statement, a definition, and so on, rather than the subject of the note being inferred from a documentation engine. Nimrod Language does this with enforced comment rules.
Just once, I'd like to have a conversation about PHP that doesn't include someone extending to me their deepest sympathies.
Oh, good, I'm not alone. It's good to know this is common enough that you've even named it. Yeah, it is MVC. Good, thanks for pointing me in the right direction. The thing is, there are 2 other IT workers at this very small company, one of whom is the IT Director. We're all flying fairly blind.
I don't think thats such a good idea even then. Not everything needs to be built in, especially if it can be enabled with one line of code.
If you make a class out of json are you not just adding another layer of maintenance? If you use json decode you already have an object to pass around. 
I've found this very annoying as well. I've worked around this by using reflections and examining the methods and then passing associated arrays and looping through the available parameters and matching them to the array.
Is this not horrendously slow? Benchmarks would be interesting.
Awesome. Glad I could help. There are a TON of resources about MVC patterns, so you shouldn't have too much trouble getting started. :)
I would have notices abort processing when display_errors is off. In development, you see them and the code aborts as expected. In production, the code continues executing and brings a whole new world of weird bugs and behaviours, it's so annoying! 
That's a good question. I've never actually investigated that as I've only used that for low traffic projects. I'll have to look into it.
 $bro-&gt;apply($ointment, $sick_burn);
Actually this time it's definitely not a PHP issue. You're describing a coding technique that I've personally seen replicated in JSP, Perl, and Python. I'm actually really psyched about the current state of PHP development. There's a lot of good code and libraries. 
Yes, something similar. But part of the core, and with better data structures for communicating between threads/processes.
An OO wrapping would make so muck sense! The repeated $encoding should give some hints to this :)
Static wrapping around an OOP underbelly would be nice. OOP wrapping around a static underbelly sounds horrible.
Happy cakeday.
does clean() trim line breaks?
Use a variable for the timestamp eg function getInvoicesDue($timestamp) { // build query/criteria ie. where timestamp &lt;= $timestamp // retrieve and return rows from the db } .. then instead of doing `$timestamp = time();` .. you can do `$timestamp = strtotime('August 30 2013');` 
I will acknowledge I have been misinformed about Puppet. After a closer inspection, I, however, still see benefits for using Serverplop, even in conjuction with puppet. Serverplop is meant for initial installation and staying up-to-date while trying to enforce the same installations across different distributions. However, that being said, it cannot force your current distribution to downgrade to a specific package, to ensure the same environment. Frankly, I feel that unit tests across different versions of your language should be enough to cover that. I would strongly recommend against using serverplop across 200 servers, unless they are all of the same OS and version, or just one version apart. The focus lies mostly on priming a development-environment and coincidentally, it should have the logic to prime a production server. And with priming I actually fail to include configuration. This is because serverplop was developed and is tested against in-house servers and we prevented ourselves from including server configurations in there. However, that being said, we are thinking about implementing puppet as part of the installation, after which there should be a really easy solution to enter a central puppet server and select an environment (e.g. development, production, staging, etc.) after which serverplop will download appropriate puppet configurations and apply them. This, however, is an open milestone. We need to do a lot of research, as we haven't really dipped into puppet as of yet. Our situation differs where you have to manage a tenfold of the amount of servers we manage. In this respect, our approach is more likely pointed towards smaller scale deployment and only a couple of servers sharing the same state and configuration. I hope to have helped the people who try to outweigh the pros and cons. If you want to give it a try, I suggest installing a bare Debian 6 or Ubuntu 13.04 installation (Debian 7 support is planned for a release ASAP). I encourage people adding other distributions, if they so desire.
Oh? Well I feel stupid :/ considering I wrote an autoloader...ugh. A case of RTFM I guess
Yes....don't mind my OP :/ 
I've been at this question myself a few times (ignoring the fact I'm not smart enough to fix all that stuff). In the end I realized: I would want to change so many things it ain't PHP anymore. In my case, it turned out to be Ruby. I'm now using each where I can/need. But the most: I miss the elegance of Ruby. When I map/filter arrays with my anonymous functions, it looks like a desaster in PHP. 
&gt; like how strict C# is with types Dynamic typing is one of the basic mechanisms of the language, it won't change. Because if it would - it'd be a whole new language, not PHP.
Don't you mean "overloading"? http://en.wikipedia.org/wiki/Function_overloading 
I'll just say that the new version would have a ton of BC breaks.
At no point did I say not to use exceptions. What I said was that not all errors are exceptional.
looks like you've edited your comment and made everybody who replied look insane :D
It might be silly but I always remember what it does. array_merge vs. array_combine took me a while to keep straight.
Yeah, my formulation is backwards, your example with: `S::create($str)-&gt;truncate(5);` is what I'd prefer. Especially if that implies I could do `S::create($str, 'UTF-8')-&gt;truncate(5)-&gt;titleize();`.
FWIW ... C# works the same way for private members. They are private to the **class**, not the instance. 
Yes but this is what *you would* change, I would change that. Whether changing that makes it nothing like PHP is or not is irrelevant.
I think the general community of php-dev should get behind possibly a native namespace like std, or stdlib; or something and fix all the previously incorrectly defined parameterization, such that new old devs no longer can complain about weird parameter orders and such. Most particularly with all the string, array methods, and more. example &lt;?php use STDLib; $var = array_map($args, function($vals){return $vals['stuff'];}); or STDLib\array_map($args, $function); that way all these methods are redefined with the updated parameterization done, no more complaining. but this would be built in. and follow the correct order that the public generally thinks it should follow.
"A society grows great when old men plant trees whose shade they know they shall never sit in."
It uses some really ambiguous names to perform some fairly unambiguous operations. That makes for a confusing time for the programmer. Clean vs tidy, standardize, etc. Function/method names should *at least* give you some kind of hint as to what it is that they do. One might expect clean() to do a lot more than collapses whitespace. The ASCII specific methods make no mention of ASCII. You'd expect truncate() to truncate to any length. Etc. Other than that, looks good.
&gt; It would also provide a way to use UTF-8 strings instead of the mb_* methods. How would it do that? The heavy lifting for true transparent UTF8 compatibility isn't in function naming.
Haha, that wasn't my intention, just every time I came up with something I realized I'd either forgot about something existing or was told about it being a feature in new versions of PHP.
That's more like it. :P What IDE would you recommend to follow the flow of the different php files easier? I've been using NetBeans. It's good for basic error checking in some of the smaller and more simple internal web applications. 
That's very definitely not automatic completion support and is not the feature they're referring to. 
Type-hints for scalar values. Function overloading java style (where you can have two functions with different parameter definitions).
Oh god, this. I also think it should be done as a bunch of static classes. String::replace() FTW. Or PHP\String::replace() if need be.
Dude, don't reply like a condescending ass if you don't understand what is being discussed.
You don't need it if it's relaying the parameter documentation. Listen, I realize you want to be as lazy as humanly possible but it's not really a big deal to read a description - particularly if it's *parsing it out* for you.
I spoke to one of the core devs of PHP a few months back, she said they wont ever be doing that. :(
I understand perfectly what is being discussed - the *problem* is people are not understanding the replies.
I second this. CodeIgniter is a really friendly MVC framework, pretty well-documented, and [there's some decent tutorials](http://ellislab.com/codeigniter/user-guide/tutorial/) to help you get a glimpse of how it all works. I actually really like CodeIgniter, but most of the cool kids are using [Laravel](http://laravel.com/) + [Composer](http://four.laravel.com/) to build out apps these days, and there's a plethora of tutorials in that realm also (starting with [their docs](http://laravel.com/docs/quick), and then just search "laravel composer tutorial", or search this sub for "laravel"). And don't miss out on the video stuff, you can find a lot of excellent tutorials on youtube for most of the major frameworks. If you can get your head around one or both of those, I think you'll be in great shape to start diving into the code that drives your company's CRM. PHP is so much more than just a language that augments HTML (although indeed, that's where it has its roots). There's some really fine things happening these days in the world of PHP, in terms of creating robust frameworks that cleanly separate logic, content, and presentation. Good luck man, your knowledge will only be limited by the amount of time you can spend googling &amp; reading, all the info you need is right there.
I use Eclipse and it's pretty decent. I know a lot of people swear by PHPStorm, though. 
Either this already exists by another name, or there is presumably some good reason why this hasn't yet been implemented. Oh wise ones?
Pretty cool. I've been looking around for a good CI system for a while and am keen to stay away from Jenkins as much as possible :).
Thanks for providing the gist! I think I'll refer to your coverage as well as that located at https://github.com/nicolas-grekas/Patchwork-UTF8/blob/master/class/Patchwork/Utf8/data/translit_extra.ser as a reference for a revised method.
I had actually started with method chaining originally, but switched after getting some input and reading a bit of hate on the subject. This comment thread has just about convinced me that I should redesign it. Thanks for the input!
Too many directory layers. Mandatory use of a folder named vendor, which must be in my project root, and ncessary uppercase letters in my file paths.
Callback shorthand: `$names = array_map($people, $person =&gt; $person-&gt;name);` Edit: Also, primitive objects -- $someString-&gt;toUpperCase();
You're right - some of them are a bit ambiguous. I suppose I take for granted that I already had exposure to libraries like http://stringjs.com/ (truncate) and https://github.com/epeli/underscore.string (clean, tidy) and http://mootools.net/docs/more/Types/String.Extras (standardize) and so the names already had some meaning to me. I just didn't want to deviate from what I thought was the norm. But it's possible that a lot of these function names are more typical just among the Rails and JS communities.
Not really, I just figured some people wouldn't get *why* you were marking it as sarcasm. I mean, this is php. People create methods that take a zillion parameters all the time and think it's good design.
I understand you. Don't give up hope! I don't even use an IDE so I don't care about this whole thread anyways. But a nicely formatted docblock is nice to see.
Thanks for the reply! To address your points: - I agree that hand-built arrays aren't exactly ideal. I'm a little reluctant to rely on another library to handle it though, as I was aiming for something pretty light-weight. - Seems like everyone wants method chaining, so I'll likely work on implementing that sometime in the next few days. I'm unsure as to how to handle versioning after breaking compatibility with the current library though. I haven't tag'ed a 1.0.0 release (either with git or composer), nor did I list it as stable. In all likelihood, nobody's using it aside from myself anyway, so it might not be a big deal. - I agree that it's repetitive, and that'll likely be solved with OO. I'm not sure what you mean by the second part of this point though. - I'll implement PSR-1, and I'm pretty sure my biggest violation of PSR-2 is not using curly braces on a separate lines for classes/functions.
I think it's brilliant. You google it and you get the right answer the first time every time. I'm a little more hesitant to google double colon. 
Actually the first time I encountered it was kinda pre-google. I mean, they were a company but they weren't a search powerhouse yet. I probably had to use web crawler or something primitive like that.
Ding Ding Ding! We have a winner!
Annotations ftl
You can do #1 and #2 yourself in PHP code. They even provide the handy ErrorException internal class for it. I would prefer they got rid of almost all fatal errors since for most it seems like your code could continue. 
Yes, you are right. It parses code on "include". And constructs new class hierarchy from proxies: A extends B transforms to: A* extends A extends B* extends B. Sorry for taking too long to answer. I had to ask this the author of Go AOP. 
PSR-0 doesn't require the mandatory use of the folder named vendor and the file paths case matches the class case. 
&gt; I think this is pretty much bad design in PHP. If something is private, it should remain private to the object unless you specifically define a getter and/or setter. This is pretty common (C++ works the same way) and allows you write code that is otherwise impossible. The data and code marked `private` isn't private to the *instance* it's private to the **class**. If you had a class like this, it makes implementing the `equals` method possible: class example { private $data; function __construct($data) { $this-&gt;data = $data; } function run() { ... }; function equals(example $other) { return $this-&gt;data == $other-&gt;data; } } 
Better garbage collection. You know, the chestnut where if one instance of a class creates an instance of another class, and the first instance is disposed of (or simply falls out of scope), the second instance is retained in memory until the process ends.
+1 million. 5.5 should have been held off until this was ready.
While it's important that you learn language, it's more important that you understand the application itself. CRM is a pretty general term and I wouldn't be surprised if the application has functions outside of the traditional scope of a CRM system. If there's any documentation, definitely take a look at that. However, I think finding someone who can walk you through the app and give you a run through of it's functionality will make your life much easier. If you already know how the app works from a business point of view, then you should be able to see how the overall structure (folders/files/classes) of the application relates to its use. In short, not knowing PHP can be overcome by reading, trying out examples, them applying what you learned by writing code specific to your needs. Also figure out what framework they are using (if any) and I found [this resource](http://symfony.com/doc/current/book/from_flat_php_to_symfony2.html) to be useful for understanding MVC. It uses symfony2 as an example, but most other MVC frameworks adapt the patterns explained there.
whoops! Fixed it.
It's not about what I do in *my* code, it's about what other people do with *their* code. There are mountains of code out there where people do insane things like trying to access array items for keys that don't exist, or try to append to an array that doesn't exist. $x[] = "jello"; `$x` hasn't been declared before, and many people see that code as perfectly fine -- I think it's dangerously inconsiderate. Don't even get me started on the pass-by-reference operator.
The [PSR proposal](https://github.com/phpDocumentor/phpDocumentor2/blob/develop/docs/PSR.md#examples-12) actually includes that feature via "inline PHPDoc". I don't think any IDE implements it as of yet, though.
People are going to use something to approximate annotations one way or another for library stuff like ORMs which need to directly inspect the object, and they're a better option than reflection. Better to give a good solution than leave people with something astonishingly crappy (parsing comments? Really?) or nothing at all.
settype($var, 'float') and' integer works fine. So does $var = (float)$var. 
Try adding the encoding parameter to the htmlentities() call? Per [the php.net page](http://us2.php.net/htmlentities): &gt; If omitted, the default value for this argument is ISO-8859-1 in versions of PHP prior to 5.4.0, and UTF-8 from PHP 5.4.0 onwards. Your web host seems to be using 5.2.*, so it may be worth a shot. Also, I feel your pain. Character encoding bugs are simply evil.
Phpstorm and Zend studio do. 
Wow, that is one hell of a polite exchange. Hey, Linus, look! You *can* disagree without chewing someone out!
If you want people to believe that, perhaps instead of | No. Notices and warnings are not exceptional, and should never fire exceptions. The only error types in php I would consider using exceptions for are fatal errors. You could instead say something like No. Php may misuse errors for exceptional circumstances in the stdlib, but these individual instances should be fixed, not the whole system binned. One way encourages conversation, the other is more like a stern priest wagging his finger and saying "dont do that". As they say, you catch more bees with poison honey.
I'm just tired of the rampant ignorance. Too many people don't want to learn anything - they want to be confirmed. This is why this community has a hard time hanging on to truly knowledgeable people. You can only take so much of it before you just go looking for another place to be where it's not a constant uphill battle to educate people.
What? Why? I could only really find this write up: http://nikic.github.io/2012/03/06/Scalar-type-hinting-is-harder-than-you-think.html but I strongly disagree that the first option isn't acceptable. Not only is it acceptable, it's what should be done. It fits with the fact that you can demand an array or any kind of object (or it's descendants). Honestly, if I write a function/method that demands an int, you **must** provide an int. Period. That's the whole fucking point of type hinting. I mean, if you don't want to use strict hinting, don't use it. Otherwise, just wait till your next major semantic version and add in your hints. Congrats, your library will be more reliable, you'll reduce your test cases and the world will be a happier place. What I hate: public function addToAccountBalance($amount) { if (!if_float($amount)) { throw new InvalidArgument('$amount must be a float'); } $this-&gt;amount += $amount; } over and over and over again with the same bolier plate type checks when I could just say: public function addToAccountBalance(float $amount) { $this-&gt;amount += $amount; } Magic! IDE's will understand it, run time errors will be easily caught, you not longer have to write tests which toss random different types at your function to be sure that it's never modified to suddenly start accepting arrays. &gt; One of PHP’s greatest strengths is being a weakly typed language and this proposal would turn it into a strictly typed one. This is just false. Strong type hinting would not stop PHP from acting the way it does with non-typed parameters, but it would allow applications developers to create libraries and code which can achieve a much higher level of quality. All of the proposals which involve type-casting should be immediately tossed out. Type casting is a nasty business in PHP and we should not be trying to extend its reach. Don't get me wrong, I like it and use it when applicable, but PHP's looseyness leads to a mass of confusion for many people and type hinting ought be removing vagueness, not incur more. --- That all said... --- The last proposal in that article is interesting because it leads down the path of "all things are objects" which is somewhere I'd *love* to see PHP go towards. Imagine: $partial = $username-&gt;substr(0,5); It would be glorious.
He probably means that providing a new way to use string functions is also a good opportunity to make them handle unicode
She said Rasmus said it wasn't going to happen. He doesn't want to do it. (not sure why I was downvoted above)
You can be lightweight and still rely on a class. Most Laravel users already have this dependency, as do PyroCMS users, and plenty of other PHP applications. Even without that you can be lightweight and less effective, or a little heavier and do it REALLY well. I'd pick "heavy". Like semantic versioning says, anything pre 1.0.0 is subject to change, so API breaking is a non-issue. The "second part to the point" means that once you are doing it OOP style you can pass 'UTF-8' as a string to the object creation (constructor, or factory method) like so: `S::create($str, 'encoding')-&gt;truncate(5);`. It's not about method chaining, its about using OOP to make a better API. PSR-1 would be awesome, PSR-2 is a "meh" for me as it just tells you how to write your code. If its PSR-2ish then I'm all happy. How do you feel about joining the League? I can send over a list of requirements, it'll be a very awesome group very soon :)
Just mail it to them, they'll be happy to connect it for you :)
&gt; Too many directory layers. One, maybe two. Unless you're using Composer, which can add a lot of folders - but that is nothing to do with PSR-0 so... thats not a thing. &gt; Mandatory use of a folder named vendor, which must be in my project root Point to me where in the PSR-0 spec it says that. You're talking about Composer again, but even then its configurable and not mandatory. &gt; and ncessary uppercase letters in my file paths. Correct. Just like Zend and PEAR before it. Hardly a killer issue.
You need truly random numbers in the gaming industry, just an example. Not just because it's fair, but because if you are using predictable "random" numbers, the games can be more easily exploited, although I am not saying that it's easy. There is a link up there somewhere, that explains a flawed shuffle algorithm, I did read this one few years ago, didn't click it now, but basicly, they cheated on online poker because of a failure to provide truly random numbers, if I remember it correctly.
Yes, but making a request every single time you need them is not good... I was thinking it this way: Get 2GB of random numbers, keep them secure, and every time I use it I throw it away, when there is only 500mb left, I would do a "refill" back to 2GB. I just wanted to know, how exactly that would affect the randomness, and [SkepticalMartian](http://www.reddit.com/r/PHP/comments/1iqev6/composercompatible_lib_for_randomorg/cb84dw6) did provide a really good answer to that question. Anyway, the whole subject of randomness is interesting. 
All good advice I would recommend looking into locking library that prevent parallel runs. I made this mistake once and had jobs that overlap on occasion and it was hard to debug as each jobs tests would pass. 
So basicly, If I keep them secure, and do not let anything look at them ahead of time, never reuse them, I am safe? ps. This is starting to look a little bit like some quantum observation theory, reminded me of [Schrödinger's cat](http://en.wikipedia.org/wiki/Schr%C3%B6dinger%27s_cat) :) Edit: Grammar
To which I say: *rable rable rable*
I'll summarize the top level comments so far for everyone's convenience: * Named parameters * First-class Unicode with a separate binary type * Types, type hinting, return types, gradual typing, strict typing, duck typing, type inference, type pattern-matching * Threads * Methods on primitive scalar types * Operator overloading, function overloading/polymorphism * Accessors, however you want them * Structured error handling and consistent error messages * Semantically well-defined annotations with distinct syntax * Sane function names, parameter ordering, core functions in their own namespace * Messy syntax and functions cleaned up, fixed or removed * Backward compatibility with the majority of legacy code * Clearly defined mutability/immutability for functions * Shorthand function syntax * Debugging without needing a C compiler * Autoloading available by default (Do let me know if I missed anything major while typing this up.) Now having said that, let's be realistic for a minute. PHP 6 is going to go one of three ways: 1. An incremental update that goes to ridiculous lengths to avoid breaking old code, with the result that most new features feel weird to use and are wedged into the already-fragile lexer, like most of the PHP 5 point releases have done. 2. A radically different language for which you'll have to do a lot of relearning (and unlearning of bad paradigms), but drops all the technical debt and kludges and does everything you could ever hope for without feeling too foreign. 3. PHP 6 doesn't happen at all because the devs are too busy screaming at each other on mailing lists to get anything done. For the record, this is how previous PHP 6 attempts have ended. \#2 seems to be by far what everyone in this thread is collectively asking for. But if that's what you really want in a language, it [already exists](http://perl6.org). That long list of what people have asked for in this thread - that's a feature checklist. Those are all *real things* that are happening *right now*. Just not here. If that revelation makes you feel uncomfortable then, by all means, ignore it and keep waiting for PHP 6. It's years overdue, and it'll take years more of work. Hold out long enough and maybe 5-10 years from now you might get what you wanted today. There's absolutely zero indication that Zend is even *considering* PHP 6 at this point.
I don't think you understand what the purpose of `__toFloat()` would be. It would be a magic class method (like `__toString()`) that would allow an object to be intelligently and dynamically cast to a `float`. Try this simple example: &lt;?php class Foo { public $bar = 12; } var_dump((float)new Foo()); // float(1) and a PHP Notice: Object of class Foo could not be converted to double Compared to this: &lt;?php class Foo { public $bar = 12; public function __toFloat() { return (float)$this-&gt;bar; } } var_dump((float)new Foo()); // float(12)
&gt; I strongly disagree that the first option isn't acceptable. Not only is it acceptable, it's what should be done. It fits with the fact that you can demand an array or any kind of object (or it's descendants). I disagree; PHP is weakly typed therefore it should convert to the requested argument type if possible. But for some reason, the correct choice is not one of nikic's choices. Strict weak type hinting is almost right except that the resulting variable should be cast to the correct type. So you'd get this: function foo(int $i) { var_dump($i); } foo(1); // int(1) foo(1.0); // int(1) foo("1"); // int(1) foo(1.5); // fatal error: int expected, float given foo(array()); // fatal error: int expected, array given foo("hi"); // fatal error: int expected, string given 
I don't what jellyislovely had in mind, but in my opinion unicode strings should be an entirely new type incompatible with regular PHP strings. Then unicode could be introduced and improved without having to rewrite the entire engine and all the libraries at once (an impossible task that doomed PHP6). With string-objects, you can get a consistent API for these different types. So for example: $binarystring = "Hello World" strlen($binarystring); // 11 $binarystring-&gt;length(); // 11 $unicodestring = u"Hello World"; strlen($unicodestring); // Error; not a string $uncodestring-&gt;length(); // 11 
Totally understandable. We get used to the way other languages do things and we bring that comfort zone with us when we migrate. Finding the right name for something can be time consuming, and striking the right balance between names like doStuff() and overlyLengthyAndVerboseMethodName() isn't always easy.
The following example demonstrates the use of an "Inline PHPDoc" to document an option array with 2 elements: 'required' and 'label'. /** * Initializes this class with the given options. * * @param string[] $options { * @type boolean $required Whether this element is required * @type string $label The display name for this element * } */ public function __construct(array $options = array()) { &lt;...&gt; }
I was reading this https://puphpet.com/#vagrant and noticed jtreminio got digital ocean in there, so i google them and found this blogpost. Is this blog post still true? 
Make a some tweaks so it can compile for android ndk without a bunch of modifications
Yeah, I was going to post the same answer, it's just a difference between character encoding issues as mentioned above. In my code, I just use a wrapper that utilizes the `htmlentities()` function and always passes that UTF-8 argument so the functionality is consistent.
Digital Ocean has a ways to go to catch up with Linode on the uptime and stability front, not to mention the tech support, so only use them if the cost savings are more important than the site being extremely consistent.
We have a winner!
I've never seen annotations used for anything other than convenience. Even Doctrine ORM gives several other alternatives to the docblock annotations if it's not your cup of tea. You make it sound like they're some kind of necessity...
&gt; You need truly random numbers in the gaming industry, just an example. Not just because it's fair, but because if you are using predictable "random" numbers, the games can be more easily exploited Ah, no. What you need is a random number generator which has the property that it is very close to impossible to discover the next number it outputs based on a history of numbers that it has output. There's ways to do that which don't involve true random numbers. Any cryptographically secure RNG algorithm covers this - Fortuna, for example. If CSPRNGs didn't have these properties, pretty much the entire of cryptography would go down the drain quite quickly. Most of the cryptographic world depends on that property of their algorithms. Of course, you can still muck up on exactly what you do with those random numbers. That is what the link that was posted earlier shows - not that the RNG itself was flawed, but that the shuffling algorithm was flawed.
It's done this way because, while the server knows all the URI components, it doesn't know how it necessarily looks in your browser. This is particularly true of port numbers. The server doesn't know if you explicitly requested port 443 (ie. *https://server.name:443/path/to/file*) or if the browser implicitly used that port because it is the default. The reason for this is that when a browser requests a URL over HTTP, it doesn't (usually) request a fully-formed URL. Instead, it forms a connection to the host and *then* requests the path: GET /path/to/file HTTP/1.1 Host: server.name
Almost every other OO language works like this :)
Looks to me like a case of rtfm. You might not have had this problem in the first place if you knew something more about character encoding and different character sets. Also, you might want to look into PHP's mb_* functions.
Digital Ocean is good for a cheap VPS, can't beat it if you just want something to puts around on. Linode is nice in the fact you can get additional IP addresses. I see that Linode has the snapshot feature, is that free or do you have to purchase the backup service for that?
I saw Digital Ocean has a very nice API to use for their droplets. I'm not sure if Linode has one, but I haven't paid for either service anyways.
Perhaps PHP6's named parameter/argument support could use something like chewitt's syntax, but as a first class syntax to enable intellisense and typo/type checking. While Perl 6 is still incredibly slow and unfinished 13 years after it was started, it's presumably a good source of ideas and prior discussion about plausible PHP6 features.. It was because I recognized chewitt's syntax as something like Perl 6 syntax that I decided to post this comment. I think Perl 6 equivalents of this stuff could be something like: $this.doStuff( person =&gt; $customer, filter =&gt; $condition, // limit =&gt; 1, &lt;-- see how easy it is to add/remove parameters? offset =&gt; 2, ); method doStuff( :$person, :$includeDeleted = False, :$filter, :$limit = 10, :$offset = 0, ) I find the P6 spec docs to be pretty inpenetrable even though I'm really interested in P6, so I won't even link them, but [this comment in /r/programming about named arguments](http://www.reddit.com/r/programming/comments/1gedgy/late_night_idea_a_strongly_named_language/cajneri) should be helpful for anyone curious about what Perl 6 did about named arguments and the thread its in covers some related topics too, mostly from a python perspective.
I'm happy to help. A little off topic, but I've also researched automatic encoding detection A LOT. It's almost impossible to differentiate UTF-8 from say, Russian, encoding with full certainty, but there are ways to do that fairly reliably if you have a handful of possible encodings that your string may be in, you can see my approach here: https://github.com/raveren/kint/blob/master/parsers/parser.class.php#L501 And this is another one that comes close: https://github.com/raveren/kint/blob/master/parsers/parser.class.php#L501 I just thought you'd be interested. Happy hacking :)
Objects should be able to be declared like JavaScript. $Object = {}; Associative Arrays have won me over MyApp = {}; MyApp.Data = []; MyApp.DownloadData = function() {};
Learn a new language, definitely. Knowing more languages opens more doors which previously would have remained closed. Don't be a "PHP developer". Be a programmer. People who stick only with PHP tend to get stagnant over time since the PHP community is often very slow to catch on to new ideas.
yes it's still true. linode has superior customer support and uptime. (I can't comment on the ram issue mentioned. that was likely a transient issue.) Perhaps in the future it won't be the case, but for now it is.