I can read ASP as well, I'm usually left thinking wtf is this shit
Try http://j4mie.github.com/idiormandparis/
&gt; That, and you have to shell out $$ for every little add-on and utility object because Microsoft provides very little Eh, thats a bit ignorant. The .NET library is pretty diverse, and provides far more basic functionality than the default PHP libraries do. Plus there is a huge set of controls and libraries that comes with ASP.NET as well. I would say Microsoft provides quite a lot in that regard.
Yeah, sleep is pointless for why we want this to run slower. The attacker could just leave that out of their code. It's not to slow down users from logging in, but to slow down the process of creating the hashes anywhere. As far as multiple hashings, it's not silly. It's called key stretching or strengthening: http://en.wikipedia.org/wiki/Key_strengthening. Also keep in mind it's using a rotating salt which makes things substantially more difficult. 
If you don't see a point in a regex, you're answering your own question.
If its ASP classic, I am so, so sorry. If its ASP.NET, you should be able to pick it up just fine. I went from developing websites exclusively in PHP, to developing a full-fledged e-commerce system in ASP.NET, and was working on the system within a week of starting to learn ASP.NET. No problem. Things are much more strict in ASP.NET, because its a strongly-typed environment with a much more rigid framework, so its best to go with the flow, and implement things the way they were meant to be implemented, instead of how you used to do them in PHP. You need to adapt to the framework, instead of adapting the framework to you. Also, if you have any choice in language, use C#, and not Visual Basic. VB is the scourge of programming languages, and will only make your life a living hell. C# is also closer in syntax to PHP than VB, IIRC.
MySQL should be replaced with "Databases" in the headline. Other than that, good article.
&gt; The .NET library is pretty diverse, and provides far more basic functionality than the default PHP libraries do. Examples of things you can do with free parts from Microsoft that you can't do with stuff documented on php.net? And if you are talking about objects to interface with Word/Excel/etc., I think that's missing the point. I'm genuinely curious. To be honest, my experience with the platform ended in 1999; it was so awful I've never been interested in returning.
My gut says what you're saying is wrong, but I can't really explain why beyond that I'm not using md5. Let me do some research/think about it some more and get back to you. As far as using sleep, see my reply to ensiferous: http://www.reddit.com/r/PHP/comments/ekyzz/with_recent_gawker_hack_in_mind_how_do_you/c191bm1
Quick question for people that know about ASP.NET: Seeing as there is a high level of interop in .NET, couldn't I just use C# for application code and ASP.NET for templating?
I work for a mid-sized manufacturing company. I inherited a boat-load of existing intranet (employee only) and extranet (business partner only) websites and applications. I spend most of my day maintaining existing code by fixing bugs, adding features or writing new applications. Often, some department manager sees an opportunity to change or enhance a business process and we go through a number of meetings to figure out what problems they are trying to solve. Eventually I hand them a document stating what they have requested and what features I intend to provide with the application. Some time later, I show them a demo, they use it, provide feedback and suggested changes. I email them another document with the intended changes and go back to work. We repeat this process until the application meets their needs, and then we go live with it. My job in a nut shell.
We looked at that and decided not to use it. As far as I can tell, that functionality is not offered as a webservice or through any defined API. Google could change the structure behind that HTML at any time without any notice, and our app would be bust. It's also not useful when you are trying to figure out what the exchange rate was three weeks ago at the time of some transaction you are trying to process.
I think what he was refering to was the fact that the .NET Standard Library also includes everything you need for a wide variety of other programming tasks such as desktop apps, console games, and a whole bunch of other things. None of this actually makes .NET any better than PHP, especially at developing web sites and web apps. I think the moral of the story here is that both (ASP.NET and PHP) are fairly good at developing web sites and web apps and if you take the time to learn either one you will be more than capable of getting your job done. PS. .NET was released in 2002, so I think it's probably a little unfair to be comparing the platform 3 years before it's release to PHP 5, kinda like comparing Rasmus's original Perl scripts to .NET 4... just saying
So for 5 months it had potential security holes in it?
&gt; I think it's probably a little unfair to be comparing the platform 3 years before it's release to PHP 5 The original discussion was about "ASP", which is what the thing I was using in 1999 was called. What it's evolved to I can't say, but like I said, if the community is as bad now as it was then - or anything else near it - I'd call it a non-starter for me at least.
Technically ASP.NET and the associated languages are free. It's the tools, web server, and database software that is not. Open source isn't always the solution. Proprietary software is not always the solution. However, when it comes to the web, it's fairly clear to me that open source is leading in innovation, momentum, and adoption. Even Microsoft themselves officially support PHP: http://php.iis.net Open source frameworks like Ruby on Rails, Django, and PHP frameworks like CakePHP, Lithium, CI, etc have set the web development community on fire. ASP.NET MVC came out in response to the uptake of open source MVC frameworks (and people being sick of their sites looking like garbage with HTML they couldn't fully control in the first few versions of ASP.NET). Therefore I personally consider ASP.NET to be a follower, not a leader of trends in web technology. It doesn't make it a bad platform, and if your organization is severely entrenched in Microsoft infrastructure (Windows Server, SQL Server, Sharepoint, etc), you're not going to have much of a choice in the matter anyway. If it were me, and I were building a web company, I'd be looking at open source all the way... and I'm far from being what you'd call an open source zealot. I run Windows and OSX on my computers, I pay for Photoshop, etc. Use the best tools for the job. Basing fundamental company decisions on whether or not something cost money is utterly foolish and irresponsible.
Hmm. I notice that article has one comment so far: &gt;How to emulate transactions in PHP: &gt; &gt;alter table purchase add is_valid boolean default 0; &gt; &gt;Have your PHP code set it to 1 when you are satisfied that all the transactionâ€™s dependencies are met. &gt; &gt;Treat entries with a 0 in that column as invalid. Periodically prune them, study them to find problems in your code, or whatever. &gt; &gt;Presto, article headline undermined. What a maroon. 
I never found any, it's not like when learning a new language you forget all the best practices you've learned (sanitize inputs, two factor authentication, etc). For approximately the first month it wasn't as stable as I wanted it, but it was rolled out slowly, so for that first month only myself and 2 other people had access to it. I would say that the OP could switch it over to ASP in &lt; 1 month (maybe a LITTLE over) if that's all he has to do at his job. (when I did this, I was also 1/2 of a tech support team for ~500 users)
The entire ASP.NET framework is something that Microsoft provides that is already more than is contained in PHP. It provides a pre-built framework for quickly creating websites. With PHP, you are left to either find a third party framework, or go your own route in creating some semblance of a framework. ASP.NET also provides a set of "controls" such as the DataGrid control for example, which you can bind to a datasource in your database, and output the contents of a database table into a UI with custom formatting, all just by initializing and configuring a couple of objects. ASP.NET is not just a language and library for creating websites, it is a framework too. PHP is not a framework.
ASP != .NET There are frameworks for PHP that provide these things. More than one, in fact. Choice and all that.
&gt; I think what he was refering to was the fact that the .NET Standard Library also includes everything you need for a wide variety of other programming tasks such as desktop apps, console games, and a whole bunch of other things. No, not at all. Desktop App functionality is part of the **Windows Forms** library, not .NET. Game functionality (both windows and console) is part of the **XNA** library, not .NET. And of course, web development functionality is part of the **ASP.NET** library, not .NET. The functionality I am referring to, is just basic functionality, like XML processing, authentication, file IO, etc, etc. The library docs are [here](http://msdn.microsoft.com/en-us/library/gg145045.aspx). Yes, PHP has much of the same functionality, but I feel that the .NET library is far better fleshed out, and has a far better interface than the default PHP libraries. I agree with your statement that both PHP and ASP.NET are good for developing websites, but would like to add that they both take completely different approaches to creating a website, and require a different way of thinking to get the same result.
I am not discussing the third party frameworks available for PHP. I am discussing the out of the box functionality of ASP.NET vs PHP. And you cannot compare .NET to PHP, because they are not comparable. To attempt such a comparison would not be fair. .NET is not microsoft's product for deploying websites, ASP.NET is.
I still have to use that shit.
jlogsdon is right. The salt is not a secret, it is merely meant to slow down the cracking, not prevent it.
what did you spend 5 months doing then?
Thats what i think the article was about.. at the end all i got was, transactions are good use them, but WHY with code, HOW with reason, WHEN with errors
ahem, did anyone really think it coud be done in the first place? edit: oh, this article is an answer to people who really thought transactions aren't necessary... my, oh, my. sometimes I realize why php developers have such a bad rep. it's things like these...
Moving from PHP to ASP means you won't get nearly as much sleep or free time. Life is too short to deal with that mess.
It's even worse in the Oracle community. You literally have to *blow* people to find out your code won't run because of an undocumented bug. 
I like that, ASP *classic*. 
Don't forget to put in some delays in processing. 
IOW, you fired your developer and you need help hacking his code?
Technically, with any.net built com class library, you can use C# for application code, and still use PHP for templating.
Why in the world has he chosen asp over asp.net?!
How long have you been a developer? How long have you worked at this place?
Okay, well, PHP is not Zend's product for deploying websites, Zend Framework is. Anyway, this is now a stupid argument over a semantic quibble that I barely care about. I hereby yield.
&gt; ahem, did anyone really think it could be done in the first place? I can't find where any comment tries to argue this.
You can use the string: resource like so: $smarty-&gt;assign('foo','value'); $template_string = 'display {$foo} here'; $smarty-&gt;display('string:'.$template_string); Just get the right stuff into the right variables, but you get the idea.
I don't want to nitpick here as I think we are both really driving at the same point, but both Windows Forms and ASP.NET are in fact part of the .NET framework. You are correct that XNA is not technically part of the .NET Framework but I included it anyways because it is a freely available set of libraries distributed by Microsoft which is what he asked about.
does http://domain 301 to www.domain?
The process is using sha512 and not md5, so it's highly unlikely a collision is going to occur...assuming no flaws are found of course. I'd like to think it be more likely to happen with just one iteration than multiple iterations with a changing and unique salt. I'm not sure what you mean by "reduce your potential sequence values to a uniform space". Are you talking about after the first hashing password will always be the same length?
That's slick, I like it!
Yes, but I think you could serve both without the 301 with the right configuration. My akamai skills are not elite enough to tell you how though.
Hmm, I suppose you could say that. I consider them all separate libraries, which are just shipped together. But I suppose Microsoft does just call the whole package ".NET".
You could always learn it, and take it as some experience, broaden your horizons, blah blah. You are getting paid after all. Better to be a paid ASP developer than an unemployed PHP one. Doesn't matter which one you like in your own time - do your own PHP programming at home and just toe the line at work - pretty much what everyone else does.
If I use the "string:" resource will it cache it? becuase I was told that cacheing won't work with a string
You don't want to keep your job. ASP is not fast. It's not flexible. It's not easy to change. Everything that was easy in PHP will be hard in ASP.
Literally?
ASP.NET is not a programming language, it is a framework. A huge, dark, complicated and underdocumented framework with a lot of quirks and pitfalls. He could pick up C# and "code behind" files in a few hours, but that's not exactly ASP.
&gt; sometimes I realize why php developers have such a bad rep. it's things like these... And because when someone tries to do it in Java, it's no one seeks to question the Enterprise Certified Java Manager leading the push.
My friend, My heart goes out to you. I have been working in an ASP Classic shop for nearly four years. ASP Classic is most hideous. I've risen to the tasks of a system administrator and the effect that ASP Classic has on servers is a terrible force that is as relentless as it is ambiguous. Nowhere do you have the documentation like we enjoy in PHP land. No explaination of OPCODES or other impacts on server performance. Every statement is a closed Pandora's Box. Good luck my friend. God be with you.
Good article. Can we have one on how to properly deal with deadlocks and timeouts next? I'd like to know if I'm doing it properly.
That's true, but the only real way to learn it is to use it. You can pull as many books off the shelf as you can but it's only going to get you started. He might as well start from day one. 
Speaking from experience, I would rather know no ASP and more about PHP than both pieces of software.
http://www.smarty.net/docsv2/en/template.resources Scroll down for a DB resource plugin. I assume by caching you mean saving a compiled version. I doubt if `string:` saves a compiled version, but this should be easy enough to check. Smarty has no way of knowing if the string has changed (it has no way of checking a modified date), and so has to assume that it should be recompiled.
Yes. It's eval: that will remain uncached. (This is for Smarty 3, which you *really* should be using :) ) 
code?
good point.
thanks that's exactly what i'm looking for :) I guess the old url was smarty.net/...../template.from.anywhere wich I found on several forums but that just 404'd anyway... thanks
I worry more about how to teach my grandchildren to code, but reddit does that reasonably well. 
This is an misunderstanding limited to PHP developers, is it?
Except the first?
You *can* emulate database transactions to a useful degree using PHP and some extra storage. Getting the behaviour *correct* is a different matter entirely. The above quoted user's method doesn't come close to achieving either though.
If you have SSH access, use that. Otherwise use PHP's built-in FTP functions.
Do you mean ssh2_exec? With keys to allow for login perhaps? Sorry like I said I'm not extremely familiar with the possibilities and best practices of PHP. I'm just now learning OOP. Is it easy to to open and read/edit remote files using SSH/PHP or would I have to learn bash scripting for that and use "command line" functions within PHP?
I know with innoDB vs myISAM you can use foreign keys. I am pretty sure that the DB deals with locked data itself, rather than the PHP programmer worrying. If a query tries to access blocked data it will try again. But I could be wrong as I have only taken one or two classes on databases. 
you are pitty that i am too lazy to create 50 accounts. so now instead of 51 upvotes from me, you have just one. 
Is there any actual reason why the files on B need to be modified through a PHP script on A? Are you going to be the only one using this control panel on A? If you simply need a way for you to change files on B, and having a fancy web-browser interface isn't important, then just SSH to B and do whatever you need through command line directly on B.
There are about a million ways you can accomplish this. Depending on exactly what you want to do, you may want to set up something on server B to accept web service calls from server A (could be simple REST calls). If you come up with a simple public key / private key system that passes a token along with each message to authenticate the request, along with an IP validation, with all communication happening over SSL, I'd consider that a fairly secure and flexible setup.
No unfortunately doing it through console isn't an option, I wouldn't be asking if it was. :P There will be users accessing it as well as executing some of the file modifications on B from A. I'll obviously be hiding as much information as possible but I want as many layers of protection as I can get, as the code being executed on B could be fatal to the server if in the wrong hands with the right knowledge.
That was what I was thinking of in my head but REST and private keys didn't even come to mind. This is exactly the type of info I was looking for someone to bring up. Now I'll do some research on this and see if it'll be suitable for my needs. Thanks! :)
If it's classic ASP then quit. If it's asp.NET then congratulations.. you now have to develop in a real programming language.
i hope that it isn't classic asp. asp and php are so close but everything will need a rewrite anyways. Might as well start from a clean clean and use something modern like .NET
Do those attempt run on read only credentials?
Uh oh, too much information?
You should use something like [PDO](http://www.php.net/PDO) instead.
It would be good to know if there's any overhead for the programmer. I want to convince my colleagues at our next programmer meeting that the defaults for MySQL configs should be innoDB with UTF-8 charsets, rather than myisam and latin-1 as we have at the moment. The easiest selling point will be "there's no overhead to the programmer and we can build more robust packages".
Well... using PHP the last 7 or so years I have never needed to deal with over head such as locked tables. I could be totally wrong and if I am I would love to learn the correct way, but I am fairly confident in saying that there's no current overhead. As for UTF-8 vs latin-1 I am pretty sure that is a straight forward argument. 
MySQL didn't have transactions for a long time -- many web developers (not limited to PHP) got by without them. I still have a few sites that are very old that use MyISAM tables for storage. 
Well we're bringing in UTF-8 as our default charset in our headers and code, however it hasn't been discussed with what to do in our databases - which given a modicum of thought, will cause a problem down the line.
The question I have is: Why? It looks like just a generic DB class where as using mysqli is a mysql specific class. That's the only difference I could come up with.
Actually, to be honest with you I went and did some googling on the subject. I did start learning PHP in grade 9 and now I am 22. So even though I could code as a kid I didn't really know much about anything. I went and looked at UTF-8 vs latin-1. Obviously the former allows more characters to be used which seems like "great! Let's us it!". But I couldn't find any pros and cons on using either or. I just found a lot of pages on how to convert latin-1 to UTF-8 which looks like a giant headache. 
It's abstracted. Which is useful in the case that your RDBMS changes dramatically (I'm just saying, it shouldn't ever happen, but it could). Plus it offers scrolling/cursors which I can't remember fi they're in MySQLi or not... I don't really know, I just prefer using PDO to MySQLi, especially when working on something that will be run by different people in different environments...
Most of my projects are only touched by me so I am not too worried about others working on it. It's probably the reason why I'll still write procedural code and will rarely touch OOP, unless it's in a prebuilt class or an MVC. **edit** Really? I am getting downvoted for this? I didn't say which is the best method. But in my own private projects that I make for myself, I am pretty sure I can write the code how I want to.
Fair enough. I was just trying to offer alternatives really.
Nothing negative. You may use transactions, which you should. Oh, and go ahead and use utf-8. Just remember that UTF8_unicode is slower then specialized collations but it sorts everything right (which is useful in multilanguage setups). PDO is pretty good if you aren't using it already. 
Another advantage is that it's a bit slower (or potentially a lot slower, depending on native support for what you're doing). You'll have to use guesswork to figure out when. This gives your application and its users more time to stop and smell the roses.
No, thank you. I am still glad to learn about it. 
In before PDO fanatics.
mysqli functions are faster than mysql functions. fetch_array(MYSQL_BOTH) is a waste of resources. And fetch_row / fetch_assoc are less typing.
http://www.php.net/mysqli Learn it, love it. Why? It's fast, easy to use, provides far more functionality than the basic functions you posted above, and supports prepared statements. Although there is one annoying thing about mysqli, which is that if you use prepared statements there is no function to automatically create an associative array from the result set in a $key =&gt; $value format. To do that you'll need a custom function, something along these lines: function stmt_bind_assoc (&amp;$stmt, &amp;$out) { $data = mysqli_stmt_result_metadata($stmt); $fields = array(); $out = array(); $fields[0] = $stmt; $count = 1; while($field = mysqli_fetch_field($data)) { $fields[$count] = &amp;$out[$field-&gt;name]; $count++; } call_user_func_array(mysqli_stmt_bind_result, $fields); } 
If you don't need the features of PDO, or ever foresee the need to work with another SQL database, then the only "wrong way" to query a MySQL database is to not sanitize your user input or to allow for arbitrary or malformed SQL statements. Most "database" libraries just do the exact same operations you listed in an abstracted way.
Why #2: Besides having more general functionality, the big selling point of MySQLi vs the old mysql extension is prepared statements. But... To use a MySQLi prepared statement, you must prepare, then bind every argument *one at a time*, then execute. The binding is done *by reference*, looping over an array becomes perilous. To use a PDO prepared statement, you must prepare, then *either* bind every argument one at a time (which is done by value, not by reference) or *pass an array when calling execute*. MySQLi prepared statements will make you hate your life. PDO makes them painless. PDO is superior for most cases, and you won't need to relearn the API to work with other databases. (There are still things that db-specific APIs do better than PDO. For example, PDO handles PostgreSQL `bytea` fields in an insane manner.)
PDO is superior! RABBLE RABBLE RABBLE!
Double quotes are nice because you can lay out template within it echo "'My $noun is very $adjective' said {$friend[1]}. \n {$friend[0]} touched {$friend[1]}'s $noun. \n 'Yes it is' said {$friend[0]}.";
If this is something for you to just play with, the mysqli_* functions work fine and are easy to read. If you're using it for real software, then use either PDO or another abstraction layer. 
Nothing like some good old SSH(and scp for transfer)
Because its very easy to switch database types. A PERFECT reason why you would want to do this would be a situation where the website moves to a location where the MySQL version is wrong, or there's no MySQL even available. Just use the SQLite driver (for small to medium websites) and the database just becomes on on disk file. Presto, no need to change any code (other than maybe your driver URI).
Adding features and refining functionality. I created the core necessary functionality within the first couple weeks and added other functions along the way while constantly testing and bug fixing (most bugs being stuff to the effect of "When I click this button it goes to the wrong place" or "This isn't formatted correctly" etc) I don't think I touched the core code for most of the first 4 months, though I did end up rewriting right before I left for speed purposes. It's now used to schedule, maintain and track ~200 owned and leased vehicles with &gt;1000 users. No hiccups and I haven't been working there since September.
I try to use single quotes wherever possible. They are a bit quicker because they aren't parsed for variables.
Oh god please not this argument again. Even Rasmus Lerdorf says that the gain is almost none.
If you need to change database type then you seriously fail at planning to the point of needing to be fired for that blunder. This is *not* a good reason, there are far, far better reasons to promote PDO.
Check out the comments here: http://stackoverflow.com/questions/20148/myisam-versus-innodb There are performance differences. InnoDB locks on a row level, whereas myisam (the default type) locks the whole table. So you can't easily perform parallel writes in MyISAM. I think Innodb used to be a little slower, but looking at recent comparisons, it seems to actually be faster. And MyISAM tanks at certain loads. OTOH, I think innodb is "owned" by Oracle and they're just letting you use it. I don't like Oracle, so anything they own has to be a little concerning (NB i'm just spreading rumors in this paragraph).
You don't hand row locking any different than you handle table locking in myisam, it just waits until it can obtain a lock or the lock is releases. Transactions are the main benefit but row locking allows inserts and other updates to be performs concurrently to the table
How about because everyone in this thread instantly recommended it? Perhaps a silly reason, but it's not just everyone in this thread, it's become the defacto standard in PHP. If you really want to be different then you should at least evaluate both seriously before concluding that everyone else is wrong.
I realize that the gain is almost nothing. For me it's a best practice though. If I embed some HTML in a string, if I use double-quotes, I either have to escape the attributes or use single-quotes in the html attributes.
You missed the joke, but I'm pretty sure you can do currency conversions (even historically) with the Google Finance API.
Hell
This can take up to 2 times longer than single quotes. Granted it's a minuscule difference, but I still follow it.
&gt; This can take up to 2 times longer than single quotes Benchmark or GTFO. (Many double-vs-single performance differences were squished in 5.0 and 5.1.)
In fact, sometimes double quotes can be (slightly) faster. Also, it depends on how exactly you are using it ($x vs {$x} vs ${x}). Still, the gains/losses are extremely small.
&gt; (Many double-vs-single performance differences were squished in 5.0 and 5.1.) Didn't know that. Does that still hold true with interpolation? I can't find the benchmark I last saw on that, I admit it's been some time.
I write code that gets reused on lots of different projects (think CMS). I often don't have a choice in the hosting environment for a given project - usually they want it hosted on Linux/MySQL, but occasionally they want it hosted on Windows/MS SQL [pdo_sqlsrv 2.0], and often Sqlite is convenient for a development environment. Of course, PDO doesn't solve all of these problems since for example, SQL dialects differ subtly, as do available features (e.g. TIL Sqlite doesn't support SQRT()), but it's a nice start. So, I disagree - this abstraction is a good reason to promote PDO.
Because you neither benchmarked nor GTFO'd, let's do a benchmark using 5.3.3: [mcg@mcg-workstation ~]$ php --interactive Interactive shell php &gt; $a="a";$b="b";$c="c"; php &gt; $start = microtime(true); $times = 1000000; while($times--) { $d = $a.$b.$c.$a.$b.$c.$a.$b.$c; } printf("Took %.3f seconds.", microtime(true) - $start); Took 0.829 seconds. I ran it another ten or so times, hitting between .786 and .843 seconds. Then I changed the assignment to `$d = "$a$b$c$a$b$c$a$b$c";`, yielding runs between .570 and .613 seconds. Then I changed the assignment to `$d = "{$a}{$b}{$c}{$a}{$b}{$c}{$a}{$b}{$c}"`, yielding runs between .570 and .656 seconds. Conclusion: In this microbenchmark, concatenation alone can generally take longer than double-quoted interpolation. Outer-curlies make a negligible performance difference. YMMV given that I used tiny strings and one million cycles. Will edit with longer strings in a moment. ---- php &gt; $a = str_repeat('x', 1024); php &gt; $b = str_repeat($a, 10); php &gt; $c = str_repeat($b, 10); php &gt; $d = str_repeat($c, 10); php &gt; echo strlen($d); 1024000 I cut down the number of cycles for each method to 10,000 from one million, to keep running times sane. Concatenation took 4.928 to 4.990 seconds. Interpolation took 2.632 to 2.665 seconds. Curlies took 2.622 to 2.657 seconds. **Conclusion: Concatenation is slower than double-quoted interpolation** for PHP 5.3.3. Performance varies from 25-30% slower for trivial strings to nearly twice as slow for strings approaching three megs in size. This doesn't mean you should rip out all your concats and replace them with interpolation. Benchmark and profile your code!
Yes that is in fact how I found out about it. I tried to output line-break using "\r\n" in plain text on a webpage. Single quotes can't handle \r\n and variables without escaping.
mysqli_ is an stop-gap API. While it provides additional and MySQL-specific features, it's just an intermediate extension. PDO is the new de-facto standard for interfacing with databases from PHP. In all likelihood the old mysql_query() functions will for compatiblity reasons still be there in ten years. Whereas mysqli becomes an optional extension again due to not being in use as widely.
TIL differences between single and double quotes come as christmas revelations to some.
By using multiple algorithms like that you have created a very unique hash function, and I like the entire idea behind your method. However, using algorithms that are slow on your system will not really help, as an attacker can always just use a faster implementation. It is better to use algorithms that are designed to be slow in all cases and that have been shown to be the most cryptographically secure.
MyISAM is great if you do full text search or do many reads from tables. If the searching part is delegated to another service/application (like Solr or any other NoSQL server) and the amount of read/writes is pretty proportionate there is no reason to stick with MyISAM. And let's not forget about transactions, foreign keys,...
If your application is strictly in English nobody forces you to use anything else thatn latin-1. But as soon as you will touch i18n you will understand why people use UTF-8.
Concatenation is actually about 30% slower than interpolation in PHP 5.3. I have benchmarks if you are interested.
Or perhaps too little?
This is your friend print &lt;&lt;&lt;end &lt;img src="blah.jpg"&gt; end; The only thing to watch out for is that the "end;" is on it's own line with no indentation and no spaces after it. In fact, if using end; freaks you out you can do this too: print &lt;&lt;&lt;foo &lt;img src="blah.jpg"&gt; foo; Additionally you can assign blocks of text to variables like this: $bar = &lt;&lt;&lt;foo &lt;img src="blah.jpg"&gt; foo; print $bar; Also, if you are working on newer versions of PHP (i.e. 5.3) single quote concatenation is actually much slower than interpolation. 
And while PDO has its problems with PostgreSQL it sucks with SQLite3 too. PDO is something that cannot be trusted as much as DB specific libraries. Shit like this: http://news.php.net/php.internals/31935
I think you will find that mysql is fully owned by oracle. Just goto mysql.com to see the oracle logo
Arriving late every day at work. Having constant debates about proper development methodologies. Browsing reddit. Complaining about client requests. Refactoring code when the team leader is not around. Tracking missing emails. Handling tickets. Removing and adding bugs to the application. Reviewing the code written by my team mates. Many smoke breaks.
THAT's what I kept trying to remember. FULLTEXT is something that I use a lot, which is why I tend to stick with Myisam. Thanks for helping me remember that!
Right, mysql is owned by Oracle after the latter bought Sun. I'm addressing the ownership of the intellectual property of the InnoDB engine. It's actually licensed to Oracle/Sun/MySQL (http://www.innodb.com/wp/products/innodb/license/). I had heard rumors that Oracle was going to turn new versions proprietary, but based on the link above, it seems innodb is gpl'd and thus will remain FOSS forever. But yea, I didn't mean to imply oracle didn't own all of mysql, was just talking about innodb and its specific license.
We use two methods; one for distributing files - implemented through the ssh2-extension by SCP-ing files around with private/public keys, or for other services we use a simple REST-based API with requests signed with an API-key and a HMAC (use hash_hmac). HMACs require a shared key between the systems which you'll provide as a configuration value. These requests are never visible to the frontend users.
Most of the features I implement or change are pretty straigh-forward thus no special need of my "cool programming knowledge". But on several occasions I am entitled to solve harder problems and this is the way I use to solve them: * Sketch the problem in my notebook * Discuss the problem with the team, also research the problem if it has been solved by others * Browse reddit, take a walk, smoke break, listen to music and relax... Basically anything not related to programming until the solution pops right up. * Implement the solution (once known this is the easiest part)
www.phpexercises.com
That sounds perfect, actually. Would you happen to have any **good** resources discussing those implementations? I'm sure I can google-fu tons of info but I want to make sure I'm learning good practices as well. I'll start looking further into it tonight.
I always use single quotes because it's more readable and my overloaded active record style classes return values as a function call so that kills using double quotes. .. eg class User { public $fields = array('id', 'first', 'last'); private $me = array(); # constructor stuff sets $this-&gt;me['field'] from query __call($k, $args = array()) { return $this-&gt;me[$k]; } } $u = new User($db, 1); # id print $u-&gt;last().', '. $u-&gt;first()."\n"; Have been coding like this for years.. .. about the only time i use double quotes is in a query or to append the line break for formatted text. Occasionally use {$foo} but, heredoc won't handle the function call.. I guess I could use $this-&gt;me['first'] in heredoc, but only inside a class render method or something. I'm willing to trade off a touch of performance for this level of granularity and readability in my strings. Just sayin
I wrap the database connection in a class and call methods on it from the outside.. $db = new MySQL(array('user' =&gt; 'blah', 'pass' =&gt; 'blah')); $db-&gt;query("select * from foo"); I can give you a model for it.. i have them for postgres, mysql, sqlite3 
No FULLTEXT &amp; MATCH() queries
I still don't get it :( What's "RAND" ?
Or you distribute software that you want your customers to be able to actually use with a bit of platform independence. 
 class PhpWinAspEmu { function __construct($page_name) { ob_start(); self::winbox(); self::asp(); require('header.php'); self::asp(); require($page_name); self::asp(); require('footer.php'); self::win(); ob_end_flush(); } public static function winbox($lethargy = '2000000') { return usleep($lethargy); } public static function asp($apathy = '500000000') { return time_nanosleep(0,$apathy); } } Take it away!! [GPL](http://www.gnu.org/licenses/gpl.html) --- log: fixed typo in r1;
 http://us3.php.net/rand http://en.wikipedia.org/wiki/South_African_rand the joke is that someone was trying to look up the PHP function "rand" but instead got a nifty little conversion form.
You notice how I didn't come here to say I was right? If you've read my comments you would have noticed I am here to learn and expand what I already know about PHP. There's no one single person in the world who doesn't have something to learn about PHP. 
I didn't notice that. Not that it really matters since it looks the same as the functions in the php manual. I definitely was planning to try PDO. But it sure can't hurt to know mysql, mysqli and PDO. 
Sure, didn't mean to sound condescending or anything.
I wrote a class to do it (if you want to see entire class, msg me). It is similar to some of the code you have posted. Basically take a password, concat a random 32 char salt to it (unique per user), and run it through hash() 1000 times (I use sha512). I store the hash, encrypted salt (aes_encrypt built into mysql so I can decrypt it... although it doesn't really matter if salt is encrypted at all in the DB, plaintext is fine). I also use aes_encrypt for usernames (because most of the time they are email addresses in the systems we build). Here is a [webservice](http://www.elementalblend.com/dynamic/webservice/safePassword.php) I wrote a while back to help me get a hash/salt if I were to manually add someone directly to the DB. 
doesn't PDO use mysqli_ internally to do the actual talking to mysql DBs? 
That's why I chose the three I have: sha512 - secure and (pretty) slow, but well known. whirlpool - secure, no known useful attack vectors, and not well known. Not exactly fast, either. snefru - who the fuck has heard of this? No one is going to have a fast implementation unless they write one specifically to fuck with me. And if someone is that skilled and dedicated, if it's not with password hashing, they'll get me some other way.
I'm a co-founder at Chart.io. We help you visualize your database really easily. So in essence, we take care of the queries and let you do drag-and-drop graphs (and create a dashboard which updates with the latest data in real time). Please email me at dbeyer@chart.io if you'd like me to walk you through a setup.
&gt;$chars = str_split($stsp); Don't do that. Just look up characters directly from the string like $stsp[rand(0, 61)]. [mt_rand](http://php.net/mt_rand) is better too. For the set of valid key characters I'd go with: acefghjkpqrstwxyz23456789 It excludes mixed case so there is no confusion if a key is spoken out loud, as well as any characters that could be confused if written down in sloppy and/or unfamiliar handwriting. That's exactly what you want from a URL shortener, though it does mean keys will get used up faster, needing longer keys sooner.
True. Which probably reflects on why they just set innodb as the default engine in their latest mysql 5.5 release. I prefer innodb anyway
Agreed. But there are still servers out there that don't have the latest version of PHP and as we all know how difficult non-programmers can be. To get them to change that is a hassle. I tried this evening both mysqli and PDO on one persons server and neither work. So if I were to do work on it I would be required to use mysql_real_escape_string(). So there are still uses for these dated tutorials. 
Thanks for your suggestions. Appreciated, and applied. :) One thing though, I'm using md5 hash to randomize it so the mixed case isn't excluded even if I use that set of characters.
I hadn't noticed that was how it was used. $rsalt = gen_str(10); $thash = str_shuffle(md5(md5($url) . $rsalt . md5($rsalt)) . $rsalt); $hash = substr($thash, rand(0,31 - $len), $len); But that extra "randomization" achieves nothing. If anything it makes the result less random by using up entropy faster. Just use gen_str as the short URL key.
alright, done. Thanks
Better method: convert a base 10 number to base 36. If you're not worried about private urls you can just use your link ID. You can start the serial at 1,000 or something so your shortened urls don't start one character long.
Since I'm in a good mood. Here you can just return the preg_match result. `return preg_match ...` if (preg_match("#((http|https|ftp)://(\S*?\.\S*?))(\s|\;|\)|\]|\[|\{|\}|,|\"|'|:|\&lt;|$|\.\s)#ie", $url)) return true; else return false; Put your functions into a class. Having `mysql_close($mcon);` and other variables and functions in the global scope isn't good practice. Take a look at this good OOP wiki: [http://www.tuxradar.com/practicalphp/6/0/0](http://www.tuxradar.com/practicalphp/6/0/0) Please have a look at escaping your SQL queries. A quick fix would be to wrap your variables in `mysql_real_escape_string`, but for future reference take a look at [PDO](http://php.net/manual/en/book.pdo.php) and [mysqli prepared statements](http://php.net/manual/en/mysqli.prepare.php). mysql_query("INSERT INTO rshort (url, hash) VALUES('" . $url . "', '" . $hash . "') ", $mcon) Try to better document your code too `// Function to generate a random string.` I can get that from the function name. Try explaining why it returns a random key or zero. Your database schema is a bit puzzling. Why are you storing the URL? If you stored the hash only, then the script would be portable (you could have it on any domain and it wouldn't matter). Not a bad start, althought a lot of improvements are needed. Have fun :-)
Still a bad situation. When you write an application that's cross database you get the restrictions of both world and only the shared benefits. You cannot take advantage of platform specific features as then it'll no longer work on other platforms. If you've done your market analyse and figured that there's no way your target audience will use predominately a specific database (and they're not big enough that getting a server just for that database) then from a performance point of view you're better off with multiple versions of the same query so that you can take advantage of the platform specific features.
Thank you so much this is exactly what I needed.
Do yourself a favor and download MAMP: http://www.mamp.info/ MAMP makes it super easy to develop PHP sites locally on a Mac.
Wrap it in (some) functions. Also, using "real" SQL is AOK for "select"s. For insert/update/delete you should use procedural interfaces. It works the best. As for why - I could've written a short essay, but I won't bother. You'll see it for yourself, it's easy to see, actually.
Don't use MAMP is the worst php/mysql/apache package possible. Seriously it fucking sucks the cock. Like __WHALES__ on the cock! You have to run their stupid GUI closed source server controller, which you cannot close. If you manage to close the mother fucker it shuts the servers down and if you want to get rid of the mother fucker, you have to buy the fucking thing. If you're running snow leopard you already have apache/php just grab mysql. You may need to edit the http.conf to enable PHP though which isn't hard. But seriously don't use MAMP, they are just trying to profit off free software that they never help develop.
You will have to provide a smarty wrapper and overload the display() function to query your database for the template name. Then do parent::display('template_name') to display like normal.
Is whales a noun here or a verb? I wanna know if I should be picturing a whale penis being sucked or a normal cock being aggressively sucked. Neither of which is a pleasant image but at least the whale cock would add comedy.
PHP has a **very** cool feature called [streams](http://php.net/manual/en/intro.stream.php) (too bad not every PHP dev knows about it). You can use the [ssh2 stream wrapper](http://lv.php.net/manual/en/wrappers.ssh2.php). Streams allow you to use the same old file functions (fopen, file_get|set_contents, etc.) with many protocols (https, sftp, etc.). An example from the docs: $session = ssh2_connect('example.com', 22); ssh2_auth_pubkey_file($session, 'username', '/home/username/.ssh/id_rsa.pub', '/home/username/.ssh/id_rsa', 'secret'); $stream = fopen("ssh2.tunnel://$session/remote.example.com:1234", 'r'); Note that you can even combine the wrappers e.g. `compress.bzip2://ftp://ftp.example.com/file.bz2` and define your own stream filters e.g. to replace strings on the fly.
you could just use [uniqid](http://de2.php.net/manual/en/function.uniqid.php) Also, think about enabling lowercase/uppercase, which gives you almost twice as many possibilities.
I don't care for this advice. Why risk core systems when learning how to config http or mysql? It's better to use a LAMP stack package; if you break something beyond repair, no harm done. Just reinstall, replace your dev folders (that you back up often!) and you're off and running. MAMP/XAMPP are great for learning. 
I'm sorry if you're a PHP develop and cannot open a text file then uncomment a single line, you have more problems than this guy asking for beginner help.
Thank you very much. The problem ended up being that I was trying to use TextEdit, where as I needed something like TextWrangler to actually browse the hidden folders in the hard drive. Everything is working!
For something as simple as this would probably be overkill to create triggers. Doing it in PHP makes it nice and simple to do error handling and whatnot.
&gt;(it has a # at the start which reddit turns into underline for the whole line, wtf): Put a backslack before any special characters to escape them. Eg, &gt;\\#LoadModule php5_module libexec/apache2/libphp5.so becomes &gt;\#LoadModule php5_module libexec/apache2/libphp5.so `(The one exception is the new carat ^ superscript markup)`
Is PHP-FPM (in the official release still marked 'experimental' or is it production quality? I really need a fastcgi process manager for PHP but don't want to use a patched version.
&gt; $result = mysql_query("SELECT * FROM rshort WHERE hash = '" . $hash . "'", $mcon); what if you go to `hash.php?hash=' OR '1'='1` ? You should be using prepared statements to execute SQL, otherwise you leave yourself vulnerable to SQL injection attacks. The insert statements are also vulnerable. Also, if you only expect to retrieve one row, stick a LIMIT 1 on there, just for clarity if nothing else. I also agree with jlogsdon; use base_convert to generate a b36 string from the row id.
Why are you posting this here, in a thread asking about mysql best practice? Why don't you delete this reply and make a post in an appropriate subreddit asking for feedback on chart.io. Starting out by spamming doesn't look good.
No I meant actual SSH access through putty. PHP offers FTP functions: http://de2.php.net/manual/en/ftp.examples-basic.php It's actually really easy once you get a hold of it. Or you could use some random ftp class, that would make it easier.
I'm look for ways to add more syntactic sugar. i.e avoiding nested arrays, or wrapper functions to make code make more sense.
&gt; ...something like ~~TextWrangler~~ TextMate to... FTFY :)
Sorry, no. They're both in-house implementations. First we distribute our public keys to the destination servers and check that we can log in using our private keys (-i to ssh if I remember correctly). We then set up a session using the ssh2 module in PHP with our private key (ssh2_auth_pubkey_file), before issuing [ssh2_scp_send](http://no.php.net/manual/en/function.ssh2-scp-send.php)-requests to upload the files in question. Our simple API accepts requests signed by using [hash_hmac](http://no2.php.net/hash_hmac). The secret is simply distributed as a part of the application configuration.
I have a few rather disjointed observations for you. Consider throwing it in a namespace, or a class, or both. I'm not just being a nit-picker; PHP's global namespace is polluted as it is, and if you want people to use your library you need to make collisions as unlikely as possible and easy to fix when they do happen. I.e. changing a namespace or class name is a lot easier than changing the names of a whole bunch of functions. Consider using PDO/prepared statements. It'll handle all the escaping an quoting for you. It also means you could make this work across multiple RDBMSs. The idea of an abstraction layer should be to hide the complexities of something from a user. In your insert function you end up with things like: "id"=&gt;"'$id'" The need to put the single quotes in there means your abstraction is leaky - the user of your library needs to understand the underlying database's quoting rules in order to use it. It also means that it is difficult for you to escape the values being given to the insert function - which I notice you are not doing. I'm not sure using JSON strings adds to the readability of the code - especially when you consider that people using your library will probably have syntax highlighting that understands native PHP arrays, but not JSON in strings. Why the "COMMIT"? I don't see a "START TRANSACTION" anywhere... How would one get the last insert ID? sql_query always returns a truthy value (but never an actual boolean?) how would one detect a failed query? Why do some functions call sql_query to run a query and one calls mysql_query instead? I haven't actually run the code, but those are a few of the things that leap out at me. If you want more criticism I'm sure I could be persuaded. I hope I've been at least a little constructive. 
I would definitely not create triggers. It over-complicates it and makes it a nightmare for anyone else who may end up working on the project... or even for you in the future if you forget about it or change something.
&gt;mt_rand â€” Generate a better random value Well then why even have rand if there's a better one?
enum 1 - 99
i'll look into putting it into a class and use pdo, the commit is a left over from trying to test wheter a query returned a resultset or not. and sql_query is just to have a function that can be referenced from the library itself. Thanks for the input.
So, it turned out that 5.2.15 had a rather major issue which rendered open_basedir more or less useless. As a result, 5.2.16 has made an appearance with a fix for that and a crash in the PDO PostgreSQL driver. This really should be the last 5.2 release. Honest. Hopefully.
this +1
Since I only develop MVC apps these days I tend to make the data models first, and this kind of thing would go in the set*Field*($val) method. Triggers would be overkill for this though, I don't use constraints for this kind of thing either.
It was expanding on your comment, not contradicting it.
i've adding namespacing and i replace sql_ in the funtion names with \gaz\. like the following. \gaz\connect('host','user','pass','db'); it will probably be a be redundant once i learn pdo.
You validate data on models? I've always done this in the controllers, any reason why you do it in models?
I love how both 5.2.15 and 5.2.16 say verbatim &gt;This release marks the end of support for PHP 5.2. All users of PHP 5.2 are encouraged to upgrade to PHP 5.3. If this were /r/fffffffuuuuuuuuuuuu I would insert a poker face here right now. 
Those bastards! Continuing to update their software for the benefit of their users after they explicitly said they wouldn't... we should protest in the streets!
So the rest of your code can't make a mistake either. I find validation in the models can catch a lot of errors in the code that doesn't come directly from user input.
This has happened a few times before. PHP releases 5.2.x (where x is usually an odd number), it has serious problems, so 5.2.x+1 comes along a few days later. These days I never bother with PHP 5.2.x where x is an odd number.
You're missing the point.
so do you have a validate() function and call that in the controller? 
isn't enum like an array and not a given range?
what mvc frame do you use ?
good to know. I'm reading a book on database design and it is recommending to use check triggers. Just wanted to know what you guys use
In a way, yes, although it's a bit more complicated than that. The validation rules in the model are used to generate both client-side (JavaScript) and server-side validation for the forms. This is what generates the nice error messages to user, etc. Those same validation rules are also used to ensure the model is always valid. So, taking the example given by the OP. If you tried to assign 102 to the Quantity field in the model, it would immediately raise an out-of-range exception. 
The problem with using only PHP is that the http://en.wikipedia.org/wiki/Business_logic is now de-coupled from the database, meaning you no longer have any safe guards if you manually run queries on the database (outside of your app). For most this is not a problem. Just a good thing to keep in mind.
The point is that the PHP development team has some serious issues. Check out some of the mailing lists and discussions sometime, they're full of drama. If 5.2.15 had been tested properly, then they wouldn't of had such a massive bug to fix.
These things happen in *all* projects and these problems don't even seem particularly major.
i had to create a user login system for a client a while back. What i did, was when a user created an account, i salted their password with a timestamp of when account was created, their username, and the stored email, combined that with their entered password and ran it through md5. Logging in sucessfully meant the db stored the timestamp of account creation, and their signed up email, combined with their password. If password was diff, md5 didnt match, and they didnt get logged in. If they forgot password, id generate new one. Close enough.
I like how they removed support for firebird from the installer in 5.3, really makes it user friendly.
For my workflow I keep a "library" folder containing some commonly used libraries and templates, and inside that I have a "skeleton" folder which contains my starting point for a project which consists of a scss stylesheet, an index.php (which simply routes pages and has a basic HTML5 template), and then a home.html which by default is included into index.php. If I want to add more pages I just add another html file and it can be accessed straight away. Pretty basic but it gets me off the ground real quick. Edit: I guess my point is, put a little effort into making a small skeleton for your projects, because it will quickly pay off if you're prototyping stuff often.
i keep putting this off, probably a good idea in any case. i could use some directory sniffing to automagic some links when i create new files
`open_basedir` not working on a language used by nearly every single shared hosting provider on the web seems pretty major to me. The fact that they don't run their own test suite (or even worse, don't have a test for such a core function) is even more alarming.
&gt; ...something like ~~TextWrangler~~ ~~TextMate~~ vi to... FTFYT ;)
Sounds like you need an new in-house CMS to get these kind of sites done in 1-2 days.
so have you done a site like this in 2 days? 
It uses libmysql directly or PHPs internal mysqlnd as backend AFAIK.
This is a surefire way to turn people off. It's widely agreed that the namespace syntax is shit. Use function name prefixes or put it into a class. Also: PHP5.3 has currently a real-world saturation of 4%. http://phpadvent.org/2010/usage-statistics-by-ilia-alshanetsky So it's a little early to use fancy cargo cult syntax yet. Next year maybe.
sure, it's easy with a cms. slice up the layout and create the html templates, configure the admin panels on the back end, the rest comes for free.
I agree with this, if you're doing these sites in large numbers it could be worth investing time in a CMS, whether custom or premade - either way it would likely save you time over the long run.
Oh, you're right. It appears I was confusing PDO with AdoDB. 
It's not as simple as it appears for a number of reasons. It can be this fast but is not really likely to be unless a number of conditions can be met. Firstly, the designers need to be aware of the limitations and available features of the CMS. If they aren't, they will design things that require customisations to the platform and then you're back to taking over a week. Secondly, your company needs to pass any specs for new sites via someone familiar with the CMS from a technical standpoint before the client sees or signs anything. If they don't you end up also having to crowbar stuff in that goes against the grain of the system you've adopted because at the end of the day it's in the contract and you're the programmer, right? (it should only take 5 minutes, no?) If you're a one man band then keeping all this in check is easy. If you work in a company (like yourself) and you're in a position of authority and others listen to your opinion then you shouldn't have any issues. If nobody gives a monkeys whether it's your area of expertise or not and will do what they want regardless (read: Your development team is run by a Project Manager) then you're unlikely to see any benefit for a long, long time. I know these problems because I have to live with them every fucking day and it drives me insane. A year after trying to standardise things so we can speed things up and I may as well still be writing custom CMS' for each site because it would be faster than trying to pass the square peg through the round hole.
I've used Zend Framework but tend to use my own home-grown one (which is quite similar in style but tends to fill in some of the framework-y bits that Zend doesn't (i.e. ORM base classes, and custom view components are next).
Sounds like you need a better CMS. If you have to compromise your design or requirements to fit your tool, you're using the wrong tool.
I do everything except the design and the content writing... So for a project like I described above, how long would it take for you to make it? 
Drupal: 2 days. To clarify, with a robust CMS (there are lots of great ones, I just love my Drupal) this becomes a simple CSS/HTML site since all that functionality is baked in (or easily enabled by flipping on a few modules). 
You shouldn't be hand-coding these routine sites. There are so many CMS products out there that give you all this functionality out of the box (or with the right combination of modules). My firm happens to get a lot of milage out of Drupal. There's definitely a learning curve, but once mastered, you can churn out extremely functional and easy to maintain content managed sites quickly. Simple sites can easily be whipped up in a few days. 
As others have said, you need to find a better way to work. Looking at your comment history, you've done at least one site with Drupal, which others have suggested. Have you been using Drupal since, if not, why? Also from your comment history, it seems like your boss is being kind of silly. A month ago he didn't want to try new stuff, now he thinks you're too slow. If you're doing a bunch of very similar sites, find toolset that makes it fast and easy. Drupal, Wordpress, or something you roll yourself (with or without the help of an open-source framework). Figure out what you like the best, and then keep working it for 3-5 projects. That 5th project will take less than half the time the first did (probably) 
At my place, we tend not to completely destroy all traces of the code after making a website, so that we don't have to redo 80% of the effort for the next one.
Is your OS a bad tool because it won't let my app install 3rd party libraries without user intervention? Its a functional issue but if I design my app to use custom styled uac visuals or design it is the os suddenly bad? Design decisions can impact function. There has to be awareness of what can be achieved. No matter what software you build it will have constraints. Should we rewrite it because it's a bad tool because the designer has a new fetish this week? Actually that's a poor example. This one is better - you are Apple and you've released IOS. Designers are busy making skins for apps and the system and everything is great. One of the app designers designs an app that requires multi tasking - oh no your software doesn't do this! Now while undoubedtly it can be made to multi task, should you spend the next 6 months doing nothing but creating this feature or do you tell him to design within the constraints? It's like designing your own super fantastic power plug - great, but it doesn't fit in the power outlet? You want me to go around everywhere and change it? What about when we try to use other, normal sockets? The difference between functional design and skin design is a solid, pre defined spec and as I mentioned - unless you can guarantee that, you're going to hit issues when your designers start altering the functional spec in ways in which your software was never designed to work. So now you either have to rewrite your entire platform because you didn't plan or you have to hack the shit out of it in order to keep everyone happy because nobody took the constraints into consideration. You may be a designer for shipping containers. Knock your self out on the aesthetics, but don't change the size of the damn container otherwise it's not going to stack and end up taking the space of two containers. This is the best real world example I can think of to illustrate my point. Power outlets, UAC and shipping container storage are not bad because you can't do absolutely anything you want to it design wise.
i have used drupal on one project but it took the same time. it was my first time though so i wasn't able to do it in 2 days.
3 or 4 days. We use [Concrete5](http://www.concrete5.org/) which is probably the most functional and user friendly CMS I've ever seen. The documentation sucks but the idea/platform is great.
These are all poor, inapplicable examples. If you can write the site by hand using raw HTML/CSS/JS/PHP, then there's no reason that cannot be implemented in a CMS. If your CMS is so rigid and makes so many poor assumptions that it is actively preventing what can be done outside a CMS, then your CMS is getting in your way and preventing you from doing your job. If it's possible in a browser, it should be possible to implement in a CMS - period.
Bosses always think things take too long. Time = Money and they will attempt to shave the time to increase the money, all while paying you the same thing. I say ignore him, keep working at your best and eventually you'll get faster, naturally. To answer your question, one week for a website is minimal if you want it to be a thoughtful, intelligent design. Too many people think you can get stellar work in 2 days. In my opinion and experience, they can get a website, just not a great website. Personally I push for quality, but then again, I have integrity and pride in my work.
CMS frameworks are really great for this sort of thing. Drupal is nice, but if your going to end up learning it to the point where your going to want to customize, bite the bullet and try Django/Python.
is that 3 to 4 days a timeframe for a team?
I, uh, think you misreddited.
&gt;It's even worse in the Oracle community. You literally have to blow people to find out your code won't run. I think I'll join the Oracle community and pretend I know the answers, but at said price.
In theory, yes. In practice, not so much. I did specifically this: Got to my job, realized that 98% of the sites we do could be solved with the same code, write an in-house CMS. Wrote the code to cover 98% of cases. Unfortunately, everyone loves it so much they HAVE to use it on those 2% of other sites, and I end up having to hack on things that should never have been offered to clients, or should have been offered as a separate product. Thinking about it, I guess it just comes down to a sliding scale: On one end, we've got a CMS that requires no configuration or modification, but is stuck in its set of features. On the other end, we've got... Well, basically stock PHP. As you go more towards one end, you're reducing the amount of work in the majority of cases. As you go more towards the other, you're making it more easily customized, but requiring more work in the majority of cases. I opted very heavily towards the 'little customization and custom code' side of the scale, which greatly reduces my work in 98% of cases, but is a fucking pain in the ass in the other 2%.
Or stick with PHP if you want to be able to run the site on the majority of servers...
Sounds like you're working for a website mill where they don't care about the quality as much as pumping these sites out to maximize profits. If he's paying you under $60K to deal with this kind of stress you need to find a better job. Pumping out a shitty site every 2 days is going to do nothing but destroy your love for what you do. If you have to make the skin, code the JS, check SEO, check browser compatibly and enter 10 to 20 pages of content 40 hours is fine. If it takes longer than a week you might want to adjust what you're doing, but a week for sites like these seems fine to me. Revisions always add time. He doesn't want additional time? Well then he needs to hand you a project that's been finalized. If your boss wants to be a prick about it start pumping out shit that barely works in 2 days. IE compatibly? Fuck that. SEO, a CMS that the client can use, image optimization, all of that shit, ignore it. Pump them out as fast as you can and when he gets pissed look right at him and tell him that this is what you get when you have no respect for quality. I'm sure his clients will notice this garbage as well. Do the graphic designers have a week to make the layout? Well then you should get equal time to make it work properly in every major browser to the specs that he's selling to the clients.
Never ever share your tools with management. use them in 98% of cases and reddit for 4 days every once in a while you might have a week or two straight of work. 
I keep most of my tools to myself. I shared this tool with management because it means I can push 95% of my work off on to other (less qualified) employees and give the company time to take on much more interesting projects for me to do. Instead of doing content entry on websites or something and browsing Reddit for the other 4 days, I'm writing web apps and proof of concept apps and browsing reddit for the other 4 days. Hell, the newest project we're looking at involves a lot of pictures of very hot, very scantily clad women! Plus the CMS is a great marketing tool.
I reuse code if that's what you mean and even so it takes me at least 5 days
Personally I would use php for that in the app. I only use validation in the DB if it's something you can't know until the actual statement executes. Unique values, something that refers to another DB record, etc. If you have multiple interfaces to your DB it may make sense in the DB engine itself though.
I basically do the same thing you do, and my timeframe is about the same. 3-4 days (content and design complexity depending), and then a period of evaluation that usually lasts about a week (we typically factor this into the timeline). This is with just me working alone, once the design is handed off to me. All my sites are built in an in-house framework, and I reuse a LOT of code, but my CMS is always custom tailored for the site and built to match the site design. I guess I'm the odd-man out here in that I don't think switching to a CMS package like Drupal is necessary to be quick and efficient. Sure, you might eventually be able to crank out sites in 2 days doing that, but how long will it take you to learn the new system to where that's possible, how much shit will your boss give you in the mean time, and how happy will you be with the results once you're doing that. Will you be able to look at your work and be proud of the sites you've made? I don't think I would be. 
You know how long it takes me to set up a site by reusing many thousands of hours of saved WordPress code? About ten minutes. You may or may not find WordPress suitable (the choice of CMS for is not my point here), but you get the idea. For a simple brochure site the task becomes a design/stylesheets/content/configuration job, with no more than a few lines of coding. That is not to say that some sites do not take some time to put together, but if they are "consistently churned out" and contain essentially the same features every time, then *as a stating point* you take a CMS that has all these things in right from the start. Disable what you don't need, rather than go to the effort of pulling in what you *do* need. Even then you will still be extending and adding to your basic CMS toolset with each site you develop. It's a never ending task, but the duplicated stuff really needs to be something that you start with for free.
I'm sure that hand logo has been ripped off from something else.
I started free lancing doing these exact same sorts of projects in March. Designer hands me the HTML, usually the site will have some special content requirements for the Home page, perhaps some javascript to slide through images etc. An image gallery, contact page with google map and form, testimonials/news sections (it doesn't really matter which or how many of those) and a basic site structure of about 10 pages. It takes about 8-10 hrs but sometimes it takes 3-4 depending. That is minus the content, I create the pages but let someone else populate them with content, set titles and onpage seo etc. Creating content is very quick though using the CMS (SIlverStripe).
I don't understand which part is taking you that long? Someone else is doing the design. 1.) Slicing PSD layout and converting it to HTML/CSS - This can be done in Photoshop/Dreamweaver in a matter of minutes. 2.) Setting up mod_rewrite for friendly URLs. Really after doing this once or twice, one should be fairly quick at it. Plus, this should be reusable to an extent. 3.) PHP for Dynamic sections - you'd have to elaborate on this part because most of the this should be reusable code that you've created before. 4.) Javascript - again reusable code should take care of this in a few minutes. 5.) Plugging in content - if the content is already written, this is copy/paste pretty much. 6.) Optimizing images - Do you mean adding title and alt tags to help with SEO? There's not much of a science in image SEO. 7.) Internal/External Linking - I imagine this takes a while in some cases but could be accomplished with a script of some sort. Crosslinking based on certain words and such could help it along. 8.) Check for broken links and revisions - One thing that sticks out on this is that it sounds like you are building a lot of static pages based on the design. What about using a template engine and making the content dynamic and database driven, like any CMS system would use. Like others have suggested, an internal CMS system of some kind would help reduce the time. If I knew that I would be doing a lot of sites that have similar structure, I would find ways to automate the tasks that would be repeated. If these sites are all pretty much the same, why should it take 5 to 7 days to write? Honestly, when I worked for a company (I'm self-employed now), I spent a lot of time reading Reddit and other things that weren't work related. I'm not saying that I spent all day doing those things. I'm just saying that I could have better managed my time. When you start working for yourself, you really start noticing those small break more. I spend more hours per week actually working now than I did before. I'm not saying that you aren't being efficient, but perhaps deep down inside you really don't care how fast you get those sites done because you get paid the same either way. It's just a thought, not an accusation.
This is true. I love python - it's just looks so good syntactically (whereas PHP is ugly in comparison!), but most of the jobs we're tasked with are to build PHP sites simply because PHP is far more prevalent, and so that's what I spend the majority of my time doing. Now if the hosts could start installing PHP 5.3.x instead of PHP 5.2.x then at least I'd have some nice new language features to play with :P
&gt;but most of the jobs we're tasked with are to build PHP sites simply because PHP is far more prevalent, and so that's what I spend the majority of my time doing. Also because PHP is far more suited as a web language since you can: A) run it without a problem (securely) on a shared server B) can update the site's scripts without having to restart the webserver
Also, [DumbledORM](https://github.com/jasonmoo/DumbledORM) but PHP 5.3+
&gt; run it without a problem (securely) on a shared server Could you elaborate? (What do you mean by this, and why couldn't you do this with Django/Python?) 
Agreed. I've given estimates of 6 weeks for larger projects and been told that it was too long and was only given 2. Then when it's not done 2 weeks later I get yelled at "But you said it would only take two weeks!" Umm... no, you said that, and I said you were wrong.
first of all... forget about mysql_connect and that type of functions, use mysqli from now on
I totally wanna see that class
Your CMS should let you operate at any level of the sliding scale. Drupal is a good example. Don't like the way something works? Write something that does. You have the benefits of pre-rolled functionality, plus the unprecedented interoperability of modules, and the ability to change the output of literally ANYTHING... I honestly have not run into a single website that I haven't been able to easily implement into Drupal. I've made complex JS-powered effect driven site features fully content managed. I've integrated with hundreds of different systems with exposed APIs. Never hacked the system, never have had to say "the tool can't do that" to a feature or design element. Before I discovered Drupal I would have agreed 100% with you. Being used to rigid CMS systems with enforced "page" metaphors and no abstract concept of content make building anything more than a basic "here is a sitemap with some pages in it" type site FAR more difficult than it should be. Even more infuriating is having to use some crap over-priced proprietary CMS where you can't even hack it if you wanted to. Ever had to use Sharepoint? You'd be saying "no" to the client all day long. We have a motto around the office here. If our tools force us to say "no" to clients, then we're using the wrong tools. I should also mention that I'm not trying to shove Drupal down anyone's throat. It works great for complex content management requirements, but isn't appropriate for, say, complex web application development. Again, choose the tools that work best for the specific project. I'm sure you'd hear a lot of votes for ModX, Plone, Expression Engine, and Concrete 5 as well.
Ive followed this debate, very interesting. Is it actually worth it to write a costum CMS? Considering the other 2% that fuckit up? Couldnt you have something like your own framework, like django, and get any kind of sites ready in 1-2 days? 
Reminds me of gnome.
B) What? Do you mean you need to restart the webserver if you run django? No. 
I think it depends on what you are compromising. If the designer/developer and the client all want the site done faster, the designer needs to take into consideration what the CMS can do out of the box. Any CMS can be customized to look however you want, but the trick is to know how the CMS works, and design with that in mind.
Spam
Spam
And restarting the server takes all of what 2 seconds? Who cares.
Your boss is paying the one person to do HTML/CSS/PHP/JS/SEO/QA? He may want to look into hiring another person (or three) if he wants to speed up production. 
If your shop is charging 1500-2000 (conservative estimate based on a $25/hrly) for a 20 page site, I'd say you're on target, if not below. Your boss is like all bosses: overly concerned w/ the bottom line.
&gt; Disable what you don't need, rather than go to &gt; the effort of pulling in what you do need. There are always at least two sides in things (usually more). The problem with "disable what you don't need" is that it isn't fun. It sucks to fight the platform that YOU haven't coded. Some *sshole made these choices on behalf of me, and now I have to live with it. But if you are fine with the platform or you can adjust to platform and even change the requirements because of platform, then it's safe to just disable things that you don't need. CMS makes more choices on behalf of you than a Full Stack MVC Framework. Full Stack MVC makes more choices on behalf of you than Micro Framework...
The OP isn't a developer, is he. He's a beginner and he's going to break things. Unless he's a fucking genius, like you. Why risk systems when you do not have to? Also, having all of the LAMP files in a single dir will make wrapping his head around the stack all the easier. 
Drupal is powerful, but with its power comes complexity. We get clients coming to us in droves because their previous designer/developer tried to give them Drupal/Joomla/etc. They're usually sold as soon as we show them our CMS and how easy it makes it for them. If you abstract the interface to the point where it's possible to do everything, it's going to have to be more complex than an interface that is locked down to specific actions. We could write the CMS in such a way that it supported every level of the sliding scale, but due to both a combination of some poor design decisions (the core of the app was started before I got here and the timeline was tight) and a requirement for the absolute of simplicity in the interface, it doesn't. The other issue we run in to, is that we like to keep the codebase the same on every site and provide extra functionality through options, configuration, and (in some ugly cases) templates. We like to keep the same codebase so that when we fix a bug or add a feature, we can roll it out to any site without any risk of it breaking. The previous developer had spent most of his time fixing the same bugs over and over on various different sites - I wanted to stop that atrocious waste of time. If we need some extra functionality in the photo gallery, we'd rather try and add it to the current iteration rather than write an entirely new one - one less copy of the software to maintain. So yes, in the case of a developer I will agree that Drupal or something with more abstraction is a better option. When it's primarily the clients using the system, though, you're better off with the simplicity provided by the enforced page metaphor. Or not. Just means we can come along and steal your clients. :)
I did something similar, except I abstracted everything out far enough that it would work on Sql Server, MySQL, and Postgres instead of having separate models for each. I don't use it anymore, but it was pretty slick back when I did.
I work with python and dont need to restart the server. My development cycle is, modify ctrl+s followed by F5 in browser. You must be doing something seriously wrong if you require a restart of a web-server just to execute a scripted language...
[warbaby.us/baby.tar.gz](http://warbaby.us/baby.tar.gz) .. take a look There is a lot more to this. I just stripped out some site-specific stuff and tarred up what I used daily. I'll get a demo site up when I get a minute. Edit: The MyDB model his should be converted to use mysqli. Oh, and forgot the posgres one.. I'll get it posted later. 
amen to that
Python/Django require a "dedicated" web server for each install
I've moved from Drupal to modx. Great system
No I don't, but I was saying if I did it doesn't take very long at all.
A properly implemented Drupal site should be as easy to administer as clicking "Content &gt; Add" and choosing from the list of content types implemented in the CMS. It doesn't get much simpler than that... Very few websites are served well by the "page" metaphor. A big, useless WYSIWYG box is not a suitable way to manage a product catalogue, for instance. Comparing Drupal to Joomla simply highlights your ignorance on the subject. Joomla suffers the same "slap a big WYSIWYG box on the page and call it easy to use" problem as most CMSes. It doesn't matter how you rearrange the UI - if your CMS enforces a page metaphor and defines content as "Title + Body", it's not an easy to use CMS.
If he does manage to break something, all he has to do is copy over his back up configuration file and try again, the binaries never actually change.
No matter what CMS you can possibly dream up and create it will always be built to a certain set of parameters, whatever they may be. If you design subsequent sites to fit within those parameters and philosophy then there will be no issues. If it was possible to write one all encompassing piece of software we would not have different applications on our computers and we would all just use this magic piece of software. I wouldn't listen to jmking because he obviously has no idea about software development and strikes me as one of the individuals I am referring to that think they are qualified to make decisions on issues of which they know very little about. If jmwking was correct there would not be blogs, CMS, forums or any diversity in software. There would just be some type of magical web software that did everything and could work without performance issues or in any combination of business logic required in any situation and we would all use that because there would be no need for anything else.
Double post :/
There is a distinct difference between what I am talking about and what you are talking about. I am talking about designing sites and functionality to work within an existing platform. You are talking about building bespoke CMS' for each site using something more lower level. It's possible to make Concrete do anything you describe in Drupal but there is no efficiency in building a bespoke CMS for each client. Your MS Word isn't compiled to work specifically for you - you can open up MS Word on almost any computer and it will work exactly the same.
For backward compatibility reasons i guess.
&gt; ...something like ~~TextWrangler~~ ~~TextMate~~ ~~vi~~ vim to... FTFYTITS o_O
Python web apps are meant to be used in dedicated scenarios where they're the only site on the server... php can work with many websites on the same server..
Using mod_python or wsgi requires you restart it, unless you don't have script caching active, which would severely reduce your server's performance..
That requires the site be dedicated, and all devs need root access to the machine... not ideal.
This is also true.
Thats funny, I pulled those same lines from that comment in the docs this morning
Nope.
I could do it in 3 days using my library of previously written extensions and Joomla CMS
1) proper slicing takes longer then a few minutes, Most people measure and slice by hand and do not use the photoshop utility. Although I pretty much agree with the rest.
I have several different Django sites co-existing alongside PHP apps on a couple of servers (WSGI / FCGI). It takes a tiny bit more config in apache, and an init.d sort of script to control the django sites, but it's not that hard to set up. I can't believe that some hosts don't offer solutions for their customers to do this on shared hosting (without googling, my hunch is that such hosts almost certainly exist) Anyway - it was more the "(secure)" bit I was wondering about - I've not got any particular evidence either way, but my natural insticts wouldn't be to say that PHP is more secure than python/django :o)
Ne - you don't need to run the django/python backend as root - you can have that running as a normal user, have apache running as root (with the two talking over FCGI/WSGI). I need to restart the django WSGI daemon whenever I made changes (code - not CSS / static), but that doesn't need root access - I don't need to restart apache.
It's been a while since I've actually done any django work, but... When I'm developing, Django is running using its inbuilt test server. I don't need to restart anything - just save a file, and it detects the change and reloads itself. When I've deployed on a live server, I'll deploy it as FCGI/WSGI (and leave apache serving the static files) which does need a restart of the Django instance (but not the webserver) if I make changes to the python code.
I've built an in house base-build cms for my company. It's fairly simple but has stuff like the ability to create pseudo-static pages, user creatable pages(news section etc), an event calendar, a gallery, a contact page, an auto generated sitemap etc It also has a CMS admin area for the user, and a superadmin area for me to configure it built into it. Given all relevant content and a psd thats ready to go, I can get a small site up in a few hours and something 10-20 pages or more in a day or so now. Obviously the more complicated the design/features the longer it takes but each time it gets used I modularise any new features and merge them back into the base build so it grows and gets larger but simpler all the time. However, I'd like to point out that although this is IMO a fairly smart/efficient way to work, it's only good for basic/staple sites, anything that requires any quality should be thought out more and loved as its built. This sort of thing just lets you satisfy clients with less budget and make your life a bit easier for the more boring work.
&gt;have apache running as root That's generally considered a very bad idea.... if someone finds and exploit in apache, they get access to everything on your machine.
Are you running those different sites under different users, or are they all the same user? PHP lets you sandbox a vhost to a base directory, from which any scripts inside cannot access anything outside the dir.. Don't get me wrong, python is great, but for webdev, it still lacks features that php has...
Actually nothing will happen because your SQL injection code won't pass the regular expression check on `$hash` checked prior to the query,
Each under different users. Sandboxing = PHP's safe mode? &gt; This feature has been DEPRECATED as of PHP 5.3.0. Relying on this feature is highly discouraged. 
I should elaborate - Apache *needs* to run as root to be able to bind port 80 (which is a privileged port [&lt; 1024]). However, as soon as it's done that important stuff it gives up those rights and switches down to a less privileged user/group - usually something like www-data/www-data. So... to restart apache I'd still need root privilege (but no, exploiting apache wouldn't get you root)
...and how many people do you know that LIKE using MS Word?
Real quality at a glance: [vim](http://www.vim.org/)
alternate title: "Zend's QA methods at a glance" 
question- a lot of people recommend vim.. i've never used it. is there a way to get context-aware completion for php? (with addons or otherwise) i found [this](http://stackoverflow.com/questions/1654753/does-vim-provide-tiered-intellisense-support-through-phpdoc), but the post is about 1.5 years old. _(what i mean:)_ if the phpDoc for a method indicates that it returns a specific *someclass* of object, IDEs like Netbeans or Eclipse will allow you to take advantage of dereferencing and get completion for that class's available public methods/properties. beyond dereferencing, it remembers that the variable you assigned is of type *someclass* for further use.
I work as a software developer at a mid-sized social network enterprise company doing PHP building social networks for big companies like NBA, Nascar, eBay, etc. A few months back I got moved to a sister company trying to bring a 15 year old webhosting company and domain registrar back to life and into the 21st century and profitable again. It's still a challenge, but I've gotten put as lead to do it all and I'm working my ass off around 50-55 hours a week with no overtime to try to do accomplish it because of potential benefits. I'm hoping to eventually do some Reddit coupons or something if there's interest, but I don't want to come off spammy though.
That's pretty awesome. I've seen you around /r/php before and had no idea you worked at Twitpic. The company I work for also has the relaxed startup feel too and I enjoy it a lot. No business casual for me.. unless I work with clients, casual all the way.
I just asked a similar question over [here](http://www.reddit.com/r/PHP/comments/eo1v1/zend_studio_80_quality_at_a_glance/c19kkvd). There's a lot of advocating for VIM, and as far as I see it there are only two possibilities: * it's possible to get that sort of functionality/behavior in VIM * people using VIM as their primary development environment could be more productive than they are edit: third possibility.. * they are always working with a codebase that they are either intimately familiar with, or is small enough to not require this sort of help.
Wait, did you seriously just pay $300 for Eclipse? WTF is wrong with you?
lol.. no, checking out the evaluation. that said, i'd pay &gt;$300 for a no-glaring-bugs version of eclipse with PDT + JSDT + SVN. which is basically what Zend was aiming for, i guess, but missed the no-bugs part. _(somewhat relevant amusement:)_ if i leave javascript builder in the project's builders, it crashes out with a stack overflow trying to validate minified jquery.)
I've ran Eclipse+PDT+CFEclipse+Flex Builder on several versions of Windows with no issues. Are you trying to run it on a Mac? I had MAJOR issues with it on OSX.
They have some more sophisticated plugins for vim. Most people who use vim together will also use tools like ack to search their code-base for instances of function calls and be able to quickly identify the files they need to work with / on. they also have some drop down features ctags i believe they are called to index code-bases for function, variable &amp; constants but they are not smart enough to help with objects, at least not what I've seen.
It's because VIM has a hopelessly steep learning curve. I say curve but I really mean cliff. It takes a long time before someone can be productive in that environment.
That's a big ass class man! Thanks, learnt a lot from it!
I don't know what sort of development environment you're in, but personally, I find TextMate really good for things like this. In Linux, I use gMate: https://github.com/gmate/gmate/ 
I suppose there is probably something for that, but I specifically don't use any docblock type comments in my code. They're bad.
Yeah, if it were me, I would do both. learn as much as I could while I was there and take it as an opportunity pick up a new skill while earning a paycheck, and then also look for a way out, due to the lack of respect.
I'd advise you to check out PhpStorm. I've [written a *little* something about it](http://elis.ws/phpstorm-the-code-editor-ive-been-searching-for-a-long-time/).
I work in windows + cygwin for some of the stuff (a console really is the only way to use Git). I've always heard great comments about TextMate, but never had the chance to use it - I don't think there are windows ports for it. Lately I've been using NetBeans, because it does most of the things I need well and is free. I have also worked with Nusphere's PhpED, it's a great IDE.
Do you have a moment to explain your view on docblocks? I've never heard anyone say they are bad. If I didn't use docblocks, I wouldn't have a job. Ps. Sorry people downvote for the wrong reason. Have an upvote.
If you use strictly triggers, it could mean your PHP is then married to your database. Often it seems hosting service providers refuse to give enough DB permissions to even create triggers, so porting your PHP code over there will leave your project full of holes. Another point against if using both is if you change your permitted type or range of values, you have to update 1) your PHP code; 2) the db schema; 3) the triggers. A point for is if some other user connects to the db via some completely different application. What records they add, edit or delete is not controlled by what rules you had laid out in your PHP code.
I think you mean set the field type to TINYINT(1), but even then, the range is only limited to 1-127. Actually Decimal(2) w/ 0 decimals should do it. But it won't be so much as a forceful, error generating constraint rather than a silent cap at 99.
&gt; I don't think there are windows ports for it. There is (kinda). Have a look at [e texteditor](http://www.e-texteditor.com/). I haven't used it for a while now, but when I did it had support for all the textmate themes and addons. It uses cygwin to deal with any compatability issues running textmate addons. The only downside is it's pretty expensive. IMHO, I'd just stick with netbeans. It's a solid IDE and usually the most recommended one.
I also use netbeans, i think it's probably the best IDE for php.
that's a position that's unfamiliar to me, but that aside.. does it "know" about objects' classes, in the completion sense? &gt;$o = new someClass(); &gt; &gt;$o-&gt;someMetho&lt;suggestion-hotkey&gt; 
Windows 7 x64 Have you tried adding zend framework and jquery to a project w/ builders and validation at their default settings? Also, do you use a repo-based version control? If SVN..Subclipse or Subversive? 
i actually downloaded the trial of it but have neglected to give it a proper try. i'm partial to eclipse-based solutions because of the plugin ecosystem (which is surely a big part of the instability, by nature) on that note.. can i have your color scheme? :) i'm going to give it a shot
Usually utf-8 is just the safer bet. It is pretty much universally supported (in php you have the MB extension, and you wouldn't even need that if you deal mainly with straight English text), and most software is moving towards it. One of the great things about utf-8 is that you know for sure that you will be able to handle all the data you are likely to ever come across - you never know when you might have a client with accented name (eg, FranÃ§ois).
x (minor version numbers) being odd or even here means nothing, and the results you mention are completely random.
I haven't used any JQuery or Zend environments yet. I should get one for JQuery since I'm using that more and more. I'd like to check out Zend but that requires me getting a project or coming up with something that will let me apply it. PDT has served me well for PHP stuff so far. Haven't tried SVN yet, I know that's bad. I'm usually the only person working on the code side of things so I haven't really seen a need yet, but I am seeing more jobs that want knowledge of this so it's probably time. I'm running Vista 64 so there shouldn't be too much of a difference there.
Hmm, you may find [Cream](http://cream.sourceforge.net/featurelist.html) useful. Looking at it now, actually, I think I might give it a go again, myself. I haven't used it since its very early alpha days.
Mightn't I suggest you stop being a colorschemefag and just code?
don't use mamp, mamp sucks, get yourself Zend Community Server, much better environment.
I don't know if i would say de-coupled, maybe your php code &amp; database will lose parity, which in turn means that in essence your app allows one thing while your db another and turns out it's impossible for you to save a record no matter what you do.
This code needs to be more modular, turn it into a class and it has no business inserting anything into mysql. All your script had to do is generate a completely unique hash, and maybe doing a sql select lookup for hash collisions.
if you are going to insert single record values without doing multi-inserts such as INSERT INTO TABLENAME (COL1,COL2,COL3) VALUES (VAL1,VAL2,VAL3), (VAL1,VAL2,VAL3) I'd use instead.. INSERT INTO TABLENAME SET col1='val1', col2='val2', col3='val3' because it's more self-documenting as inserts go. also, stop using strait up mysql_* calls or even mysqli, i use PDO on almost all my projects as it has a very clean interface for prepared statements.
if the object is named, you could always just do; while($out = mysqli_fetch_field($data)) $records[] = get_object_vars($out); This might be a bit faster.
You could always just use a shadow myisam table and use a trigger to update your table with new/updated records. then let your primary table be innodb.
I'd pay $300 for a version of eclipse that wasn't sluggish on a macpro with 8GB ram.
I like skinny controllers and fat models.
This is how I do it. I have a MyISAM index table with a foreign key column one text column. The index cronjob pulls rows that need reindexing, concatenates the data, strips out [stop words](http://dev.mysql.com/doc/refman/5.5/en/fulltext-stopwords.html), and updates of corresponding row in the index.
Ah, the good old "wait, what, it compiles!?". Always fun when that happens ;)
Netbeans ? [here](http://netbeans.org/downloads/start.html?platform=windows&amp;lang=en&amp;option=php)
Cool story, bro.
Niiiiiiiiiiice
For the love of god listen to this man. PhpStorm is much, much better than Zend (or any other editor out right now imo) Also, you should release that theme, mate. I tried my own to duplicate JetBrains' RubyMine Railscasts theme but there's still a few things that aren't right with it. Your theme looks almost perfect :)
Manipulating a color theme to your liking can put less strain on your eyes while coding. This is extremely helpful when coding for longer periods of time. Perhaps you should try it out before dismissing those who understand it's importance.
You're the 10th or so person that asks me for the theme after I posted that article. Will do latter on this week. Thanks for the warm words :)
Those hidden bugs are the worst! ;-)
Nginx, haproxy, or varnish. I personally prefer varnish.
Yeah, I know why they're used and I was a sucker too once, but jeez, people make such a big deal about that crap.
Do you work for [Dove](http://www.fugly.com/media/IMAGES/WTF/fat-dove-model.jpg)?
Thanks! Yeah my opinion isn't popular around here because PHPer's *love* their docblocks. The book that changed my mind about them is [Clean Code](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) by Uncle Bob Martin. The book is simply amazing, a quick read, and tells you what you already know, but in an articulate way. Two things in there that really shake up a lot of Java/PHP programmers is his view on method length and docblocks. Regarding method lengths, he maintains that a class method should be no longer than 4-5 lines. Any longer and it needs to be split into another method because it's probably doing more than one thing (a method should do one thing only). I find this one the hardest to comply with because it requires a great deal of discipline. But boy, when you do comply with it, your code is so much easier and cleaner to read. Obviously, this goes for programmers working on systems where resources are virtually unlimited (99.99% of all PHP programmers). An embedded programmer probably has to watch how many methods/functions are pushed onto the stack, but programmers making web apps don't need to (as much) because resources aren't as tightly controlled. Regarding docblocks, he says they're entirely useless, and I agree completely. For example, this is useless: /** * The ID of the user. * * @type integer */ private $user_id = 0; Why is that docblock completely useless? Because it's told me nothing about the variable, and nothing that couldn't be gleaned by looking at it's definition: * It's name is user_id so the description is useless. If it holds something other than the ID of the user, then you're really in trouble. * By it's default value, 0, we can tell it's an integer. So now you've wasted 5 lines of code (not that they're a precious resource or anything, they just clutter up the rest of your code) to describe a variable that's obvious from it's name and default value. If you need a docblock to describe a method, that's just as bad because it means you can't deduce what the method does by it's name and arguments. Taking the only PHP project on the front of Github, let's pick a random file and pick it apart (sorry CakePHP, don't take this personally): https://github.com/cakephp/cakephp/blob/master/cake/libs/i18n.php Look at the method translate(). It should be pretty obvious what the translate() method does in an i18n class. Picking apart the docblock: * The fact it can be used statically or through an instantiation is another issue that should be remedied. * Any decent editor can pick up the argument list just from looking at the definition (and re: the $count variable, that's a bad name because it's not very descriptive at all. $pluralFormCount would've been better, more descriptive and now doesn't require the description, however, it uses a magic number (6?) and that's another issue) * We know it's public because it's not described as private * We know it returns a translated string (again, if it doesn't, you have bigger problems) Next, look at the clear() method. The docblock is longer than the entire method and it tells me nothing useful. clear() is a poor name because it doesn't describe what it clears. clearBuffer() or clearTranslations() would've been a much better choice. It says it's useful for testing, but not why, so that's a useless comment, and it doesn't @return void, it returns nothing, so that's a misleading docblock. Which brings me to another point: updating docblocks. It takes a lot of discipline to do so. I'd much rather concentrate my discipline on writing clean and clear code, unit testing, and writing good documentation outside of my code than keeping a bunch of docblocks up to date. Thus, in summary: docblocks cloud your code and make it harder to read while adding nothing.
Just make sure you catch notices, too. Congrats. :)
I love it when this happens (wich it does way to seldom). Have an internet highfive!
awesome++ I once coded a site in excel and notepad. By which I mean, I mocked up the db structure in excel and wrote the PHP code in notepad because I didn't have access to a server (days of dial-up and I had no net connection to get a wamp server going locally). It didn't work "first time" but as I remember it only took about half an hour of correcting silly syntax errors etc the next day to get it massaged into a working site. edit: sorry, should have been `$awesome++;`
I use this, I find it very useful. http://www.anyexample.com/programming/php/5_useful_php_functions_for_mysql_data_fetching.xml
You could, you know, use an editor that alerts you of parse errors as you write.
In the early days of programming we didn't have all the fancy debugging tools people have now, so we took extra care as we were writing to make sure it worked right the first time. Even today when I code, it's more unusual for there to be a parse error. I think if a lot of the fancy debugging were taken away from modern programmers, there would end up being better program designs.
With PHP being a scripting language, this step actually is further along the chain. It's more like "hey, it gives the regular output". Still not proper unit &amp; integration testing (nearish to that though), but a small step up ;-)
Oh, which one? I use notepad++
Yeah I usually worry more when no errors show up.
Eclipse, Zend Studio, PHPStorm, Komodo, Netbeans, Visual Studio... there's a bunch, just google for "PHP IDE"
 ini_set("display_errors",1); ini_set("error_reporting",E_ALL); error_reporting(E_ALL); //just for the hell of it.
Dude. You're a whole 0.0.1 behind, that's dangerous as hell!
Pitching a no-hitter is rare, but when it does its a phenomenal feel... and you'll ride the joy and fame for years to come for something that was a little skill and a little luck. So while I want to congratulate you, I just want to say now - don't become one of those guys who now kicks back and relaxes and tells everyone you're better than them because one time early in your career you threw a no-hitter. tl;dr AWESOMEEEE!! :D
Without much context, I think your boss is dead on: this is too long. 5 revisions is giving the client too much room to run. Revisions elongate the project and make it less billable. You should work revisions into your contract, we default to two sets of revisions. It forces the client to give us a list to work through, and also keeps them on a leash. Perhaps your process needs to change. The very first part of a project at our company is going through a Discovery phase; where the project leads meet with key shareholders of the project. Through this period, we're able to work with the client to focus the project on their needs and define exactly what they're expecting. In doing so, we're locking the clients down to a specific set of deliverables, and also reducing chance for revisions because the team knows exactly what the client wants. Regardless of project or company, the general construction of a project will generally be the same, but be sure to mind the supporting tasks that do not directly involve construction.
:3
Not all errors are parse errors.
USE A GOD DAMN PACKAGE.
Yeah, but use one from Debian's testing/experimental repository, because the others are vulnerable (or old as the mountains), also don't forget to check for updates (since apt won't update from testing/experimental, because you haven't added it to sources.list - you haven't, right?). But why bother at all? Even upstream is [vulnerable](http://security-tracker.debian.org/tracker/CVE-2009-5016) since ages. (Or just the tracker is broken.)
Definitely a solid opinion. It seems like the core problem you're describing is that having docblocks allows a developer to be lazier with her naming conventions. However, docblocks don't solve the problem since you can be equally lazy with the docblocks - and now you have dirty code to boot. Where I work we have a very large development team (100+). There are developers of all disciplines. Sometimes, the .net guys get low on work and dive into some PHP. Without a standardized commenting system, they would be lost in our code very quickly. They are generally in there to fix some small bugs or make some small adjustments. The docblocks make the obvious to a seasoned PHP developer, obvious to a .net developer. Basically, it makes the code easy to understand for a new guy. If a new guy can't understand your code quickly (be it, new to PHP, or new to your workplace), then you've wasted as much time as you've saved by excluding docblocks. I can't really think of another useful case for docblocks. Edit: I can see how our arguments are facing the same direction. If a new guy needs docblocks to understand the code then the code isn't self documenting enough. However, the point here being that it removes the need to be able to read PHP quickly and puts it back on needing to read english. 
Even if it's not throwing an error, I usually find bugs later. What the hell was I thinking?
Cool, I can dig that. I've never worked in a place with more than 10 developers on a codebase, so any questions could just be resolved by talking to the original programmer. My dirty little secret: I'll usually put a docblock at the top of each class describing what it does, the authors, and some other meta information. Appreciate the reply.
That one has been fixed for a year, on Sept 17 2009. See http://sirdarckcat.blogspot.com/2009/10/couple-of-unicode-issues-on-php-and.html under the heading 3.
Happens to me all the time...
Rule #24 of programming. If it works, there is a bug.
I used to have a programming prof. who would get more excited when it didn't compile.
Personally, I like to leave these on even though documentation says to turn them off. To me, a properly programmed website should never throw an error, or it should handle all errors in the code. Any sort of compilation error just exposes my own programming weaknesses. Others might differ in this opinion.
I suggest Komodo Edit if you've never used an IDE or anything other than Notepad++ to develop in.
Yeah! And what about the SVN repo!
Thanks, I'll have a look.
I agree. The point is to handle errors gracefully.. not ignore them.
Pfft, that's not on the edge at all. Running the tests can kill a machine. I remember running them and having an output buffer test cause my box to run OOM. Be a daredevil and do it ;-)
It is an awful abomination of horrors that deserves to be obliterated from orbit, just to be sure.
do you code for a living?
yeah, it's really two totally different experiences using a small codebase vs a large one (bringing in Zend Framework to the sourcepath, for example..) Adding ZF brings out everything that's wrong with PDT, and adding jQuery brings out everything that's wrong with JSDT. Adding both is a nice little perfect storm. Also, using SVN with a development cycle where you're committing frequently (to a dev environment to test changes) really exposes these issues because you're triggering the project builders over and over.
I installed [homebrew php](https://github.com/ampt/homebrew/raw/php/Library/Formula/php.rb) from http://notfornoone.com/2010/07/install-php53-homebrew-snow-leopard/ currently on the latest 5.3.4
Awesome man, thanks :)
...and this is putting it mildly :P
In the early days of avation we didnt have all the fancy wind tunnels people have now, so we took extra care as we were flying to make sure it worked right the first time. Even today when I fly, it's more unusual for a wing to fall off the plane. I think if a lot of the fancy wind tunnels were taken away from modern aircraft engineers, there would end up being better airplane designs.
Bah, apt-get sucks. Move to ArchLinux or even Slackware.
i appreciate that, and understand. i have 0 coding experience and installed the site with a self installer provided by my hosting. they no longer support it and my forums are having weird issues. i have 4 years of posts i dont want to lose. what do i do?
[http://us2.php.net/money_format](http://us2.php.net/money_format)
That's flawed logic. Just because you display errors does not mean you see all of them, for instance what if an error happens to a normal user, do you honestly think they'll report it? No, they'll just be confused about what they did wrong. Turn off display errors, turn on error logging and set up automatic log watching.
Find another forum which have an importer. SMF, for example, has a PHP Nuke converter: http://download.simplemachines.org/?converters;software=phpnuke
No. I let my user know that there's an error (so that they know that what they're seeing isn't normal, and not to 100% trust the data onscreen), and log it. I don't expect my users to contact me.
I'm using Arch at home, but I'm not convinced it's the best option for servers. (Though I'm finding Debian's lack of real progress more and more inconvenient.) Oh, and pacman also sucks. (They're sadly unwilling to move from a myriad file based metadata repository to a compact sqlite-or-something-based one.)
Thanks, I didn't know about the severity of these bugs.
I don't like PhpStorm. It won't work out for me for any larger projects we have on FTP at work - it always wants to download everything; which would end up being 10+ gb for one product. Until it can work directly on FTP, I'll avoid it
ill take a look see
That's exception/error handling, though, not PHP notices and such. Completely separate thing.
What about CRUX? That would be me next choice, but I would look into CentOS aswell. Just an idea. 
PHP Nuke was great 5 years ago, there are far better alternatives now.
Looks interesting, but I still prefer using Phing, though I might play around with this to see what it can do
Needed a specific version for a quick check; didn't want to install into the default path.
It's all downhill from here!
Haha yes, crazy small world!
It is recommended to add testing/experimental to your sources.list(.d), but then use pinning, like 200, so that updates get installed, but normal packages won't get upgraded.
5.3.4 has been released 10 days ago, why bother with 5.3.3?
I always suspected that might be possible, though never investigated. Thanks, I'll check it.
Never heard of CRUX before. [_disappears into wikipedia_]
Try: # cat /etc/apt/preferences.d/debian-unstable Package: * Pin: release a=unstable Pin-Priority: 200 Also see `man 5 apt_preferences`, there is a table with the meaning of priorities.
It was long time ago I heard about it, so I was on wikipedia too and saw Wolvenix, its apparantly a Slackware-derived distribution which has something called slapt-get. 
yea, doenst really help with these issues. mostly it has to do with new posts not showing as new and then they go ignored
http://www.databasedesign-resource.com/mysql-triggers.html
&gt; So then, when I want to deploy an updated code base from version control, that fresh code of course would not have the user-uploaded files in it. I don't understand. How would user-uploaded files be "in" or "not in" the code that's under version control? References to user data should be hydrated from the database, while the hard data is sequestered in some specific folder (akin to a /home/userA, /home/userB...) not somehow hard-integrated into the code. The type of "user-data" that you're referring to, doesn't make any sense to me as I've never seen such a thing.
Open/SuSE doesn't come with FreeTDS / db-lib packages. Scream on.
Check / Optimize / Clean dbtables may help
turn on your damn error handling, look at your error log
I have a question. I'm running Ubuntu Hardy on a VPS with nginx. I heard that one of the newer PHP releases has php-fpm built in. How hard would it be to upgrade the PHP package, since I assume the latest isn't in the Hardy apt repository? I've compiled some things from scratch before, but I don't know if I want to go through it with PHP.
It works, and it doesn't break my server setup. That's my definition of not sucking.
Bad analogy. A more apropos analogy would be, hey, let's build the fuselage first, then the engine, and after the fact, see if the engine will fit in the plane. If not then we'll mash it in there somehow with some extra bits and pieces. All these development tools have not resulted in more efficient applications or better design. Modern programmers use bloated libraries and development environments, and often spend more time learning the tools than the system on which the app is meant to run. Look at the most successful piece of code in the modern era: Linux. Not object oriented. Well designed and well-planned. 
if you are using git you can add to the .gitignore file in a directory. so you would have uploads/* as a line in the gitignore so all files in there it wouldn't care about. after a redeploy it doesn't touch any of those files. but i would highly suggest only using the local folder as a temporary storage and uploading user avatars, docs, etc to something like amazon s3 for safekeeping. this will also make your app a bit faster as those calls dont have to hit your server.
where would i find that? is it something in myphp? or part of the admin controls inside nuke?
ok, they all came back "ok" but the last line said this... flurbexc_nuke1.nuke_wiw_m analyze note The storage engine for the table doesn't support a... it cut off and i couldnt read it past that looks like its one of my modules and its like 25mb or mib?
You don't have to compile it. Just wget the packages from ubuntu's testing repository (or even debian's), then install them with "dpkg -i *.deb". [1](https://launchpad.net/ubuntu/natty/amd64/php5-fpm) [2](http://packages.debian.org/source/unstable/php5) [3](http://www.dotdeb.org/category/php/) - dotdeb provides fairly recent PHP and MySQL packages. [Here](https://launchpad.net/~blueyed/+archive/ppa)'s a PPA with a lot of recent stuff. 
I use Ubuntu at home, but personally, I do like CentOS for servers.
For things which will always follow the code (like profile images) I make a webroot/thumbs dir and check it in. For stuff i'm just caching I just link a cache dir to somewhere in /var then I *don't* check that in (to save on repos size), but I can tar it up and move it to another server if need be. I get some pretty complex cache trees going and don't see a reason to have them version controlled. User pictures and such are pretty much an integral part of most apps and it's nice to have them available to checkout. 
Once that's done, go buy "head first: php mysql". Once you're done with that and getting how it all fits together, buy a real PHP book
Absolutely check out Capistrano! Although it works best with Rails, you can also modify your deploy script for a php site. By default it creates a "system" directory that stays static but is symlinked from the release directory on deploy, so you don't overwrite your uploaded data on deploy. Cap also has great git integration for your source control needs. Seriously, after using cap I wouldn't even consider anything else. It even has support for ssh gateway tunneling, multiple deploy targets/types, callbacks, sudo, etc. It's a ruby program but you only need it locally, it does everything else via ssh.
you guys don't use any source control? i haven't tried PhpStorm's FTP support. but in virtually every IDE i've ever used the workflow for [SVN/CVS/whatever] was the focus and working off a remote [S]FTP was an afterthought, it seemed.
i'm on an 8-way 3.4ghz (i7) with 12gb of ram :( (sadface is because eclipse is still clunky on it)
This (using something like s3) sounds like the best solution to me. Then your deploy is only a matter of uploading the latest codebase.
&gt;I'd like some advice on how to update my web app without losing user-uploaded files. The files will be in a subdirectory of my domain, and I don't want these to be deleted when I update; what is the best way to achieve this? &gt;I'm installing my app for multiple clients on multiple virtual hosts. I've read that some web apps use a "one-click install" and/or a "one-click-update". How important is this, and what are the best practices? FTFY
&gt; **What are some alternatives to Google AdSense?** &gt; My website violated the AdSense Terms of Service (as my site is about marijuana), so I'm looking for an AdSense alternative. What do you suggest? FTFY
[Grumble, grumble.](http://lmgtfy.com/?q=adsense+alternatives)
&gt; "A properly implemented Drupal site should be as easy to administer as clicking "Content &gt; Add" and choosing from the list of content types implemented in the CMS. It doesn't get much simpler than that..." Apparently it does. As I mentioned, we get a lot of clients coming to us from other companies. A lot of them specifically **asking** about our CMS! We get feedback from new clients quite frequently along the lines of "Oh, wow! This is so much easier than the Drupal/Joomla thing I was using before!". This isn't just rhetoric - this has been my life 40 hours a week for the past couple of years. Hell, just for fun I just went and tried a Drupal demo. It has basically *nothing* installed, and it's already more confusing than it has to be! I hit "Create Content" and get two options: *Page* and *Story*. &gt; "A page, similar in form to a story, is a simple method for creating and displaying information that rarely changes, such as an "About us" section of a website. By default, a page entry does not allow visitor comments and is not featured on the site's initial home page" &gt; "A story, similar in form to a page, is ideal for creating and displaying content that informs or engages website visitors. Press releases, site announcements, and informal blog-like entries may all be created with a story entry. By default, a story entry is automatically featured on the site's initial home page, and provides the ability to post comments." I had to re-read those about 4 times before I actually knew what was going on. Hell, each one uses the other term in its definition! Then, once I get through that mess, how do I go back and edit it? Well, we've got "My account" - nope. "Create Content" - nope, that was those confusing descriptions. "Administer" - Well, the only other option's "Log Out", so it must be this. Site Building? User management? Site configuration? Reports? Oh, hey - Content Management. Fuck. Comments, Content, Content types, Post settings, RSS publishing or taxonomy? Content, maybe? Oh, great. A big giant table of all the shit on my site. All that to go fix the damn typo I noticed. [Here's a screenshot](http://upload.nucleardog.com/408) from our CMS. Nice big menu at the top (that doesn't actually hug the top of the page, my eee pc just has a tiny screen). What do you want to work on? Add, edit, or organize pages? Edit which page? K, here go. Oh, and for entertainment purposes, here's [what it takes to make a page](http://upload.nucleardog.com/409). (Bonus points if you can guess from the last screenshot how I got to that page!) &gt; "Very few websites are served well by the "page" metaphor. A big, useless WYSIWYG box is not a suitable way to manage a product catalogue, for instance." We went with a hybrid. We use pages for display and unstructured information, and a separate system for any structured data. So in the case of your product catalogue, you'd be able to edit any surrounding content and extraneous data through the page editor, and there's a [completely separate menu option](http://upload.nucleardog.com/410) that will list all of your products and allow you to CRUD. &gt; "Comparing Drupal to Joomla simply highlights your ignorance on the subject. Joomla suffers the same "slap a big WYSIWYG box on the page and call it easy to use" problem as most CMSes." Oh, shit! You caught me! :) No, I'm not a heavy user of Drupal or Joomla, but it seems to have paid off well - whatever the hell it is that we've built, it's apparently something that works and that real, non-techy people love - and they're the ones that write the cheques.
I use Eclipse PDT (PHP Development Toolkit) and it's pretty nice. Syntax checking, SVN support, etc.
I personally recommend Eclipse. Learning curve is a little steep, but it's a complete development environment. If and when you get to know it well enough, there is quite literally *nothing* else you need to have installed - no LAMP stack, no PHP install, no VCS client, nothing - and it's 100% portable. You can copy your workspace and your eclipse directory onto a thumb drive and take it from PC to PC and never have to worry about not having the time or anything to install what you need to get to work.
IDEs catch most errors, even those that aren't parse errors, if they're configured correctly.
It's things like this that really lower the quality of this subreddit...
use the down arrow
That's the first thing I did.
&gt;25mb or mib? The difference is one takes binary into consideration. 25 million bytes is not exactly the same as 26 214 400 bytes, but it's near as damnit.
Thanks, [but that's not the concept I was looking for](/http://www.kalzumeus.com/2010/12/12/staging-servers-source-control-deploy-workflows-and-other-stuff-nobody-teaches-you/). (Skip down to "Most people..." )
hahah they changed the price to $8.75 to fix the problem. 
&gt; How would user-uploaded files be "in" or "not in" the code that's under version control? Code base is written. Version 101 gets deployed to live user site. End-user uses site, creates database data, uploads files. Programmers update codebase to version 150. User does not have access to source control, nor does the web app ( and nor should they!) so the base base has no user-generated files in it. &gt; The type of "user-data" that you're referring to, doesn't make any sense to me as I've never seen such a thing. You've never had a user upload a pdf or a web image? It's the difference between the wiki code base and the images that have actually been uploaded to it. When I download the wikimedia code, I don't also get all the images that people have uploaded to it.
We do, we use mercurial. We work on products which have huge data sets, and it's impractical to have everyone download a copy of the entire datatree onto their machine, and it would be a nightmare to keep everyone's copy in sync, since development is so fast. SC is used for "checkpoint" check-ins, and for deploying things to different environments. Everyone works off of SFTP, that way the content team keeps their stuff upto date, and engineering as well. We have the 4 traditional environments as well. I use the VS.PHP editor, it works great for those purposes, it syncs file-by-file as you work on them.
Was doing a quick investigation into a problem I was having with 5.3.4 but not 5.3.3; turned out to be my imagination. 
ok well i deleted that module anyway. ill see if the site shows new posts now that i ran a check and optimization.
The price goes up depending on the number of users there are.
I've done this sort of thing and wrote a blog post about it ([PHP Deployment](http://mathew-davies.co.uk/2009/10/28/php-deployment.html) quite a while ago. I'll give you a little run down. I use git and capistrano to deal with my code deployments. You should be using a git repository on your server to push to, this is where capistrano will be pulling the code from for each deployment. Capistrano has shared directories. These directories are stored as a sibling to the releases and latest directories. A visualization for you. - releases - current - shared **releases** contains timestamped directories of each code deployment and **current** is just a symlink to the latest release, this makes it incredibly easy to rollback to a previous version. **shared** contains files/directories which don't change per deployment, so this will be logs, uploads, etc ... So when you deploy, all you need to do is symlink the directories from your latest release to the related shared directory. Updating your website becomes very trivial then as it all it becomes is: cap staging deploy or cap staging deploy:rollback if you broke it :-)
Drupal is not a turnkey solution. This is why it's such a powerful tool. Drupal does nothing out of the box - that's kind of the point.
 RewriteEngine On RewriteRule ^blog/(.*).php$ http://blog.domain.com/$1.html [R=301,L] e: This will do a 301 (Permanent) redirect, which I assume is correct as it looks like you're moving your blog.
Redirect /OldDir/old.php http://site.com/NewDir/new.html note the location of .htaccess will determine the locator argument path.
&gt; End-user uses site, creates database data, uploads files &gt; User does not have access to source control, nor does the web app ( and nor should they!) so the base base has no user-generated files in it. You lost me again. User 21 (users table id) uploads file 36 (file table id) Users' files are not in a versioned directory so they aren't wiped out on deploy (nor is the database). Your CMS continues to access the db and serve the files using the DB references. I still have never seen this "problem". If you stop using the word "user" and start using the word "developer", it makes a lot more sense. If you need sample data or want "real" data, that can be called a "fixture" (see google) or "data migration". Fixture is a little more appropriate where we have an associated binary to the data. Again, we're not talking about your typical User, but a developer not having access to the fixture. In this case, there is usually a schema migration strategy, but should always have a fixture migration strategy as well. I prefer all-in-one schema and fixture dump-and-load to incrementals. It saves a lot of time and headache. You can develop incremental migrations later in a project, but it is rarely as useful as it is cool. It's a lot easier to say "r231 had these fixtures and this schema, for sure, at this point" than trying to tag the migrations or trace back to the latest when the migration increments inevitably have problems.
http://www.reddit.com/r/phphelp
for a light loads, you can also use a [L,P] instead of [R=301,L] to serve these requests internally without redirection (via the mod_proxy/http_proxy)
Thanks. This helped greatly.
If he's moving his blog from example.com/blog to blog.example.com then its much better to do a 301 redirect so the rest of the web can know that it was actually moved.
I got the evaluation copy of this, it looks nice and has some handy features but it crawls in comparison to my usual method of dragging files from Perforce into Gedit.
False is still a value, and count is counting it.
I understand the logic they chose to go with and it's fine, but with examples like $foo = "10.0 pigs " + 1; // $foo is float (11) I would expect *count(false)* or *count(0)* to return 0.
And my point was that even doing 'nothing', it was still overly complicated.
Why wouldn't it be 11 in the example? The string ("10.0 pigs ") is cast to numeric value, in this example a float, and 1 is added to it. Yes, that is one of the advantages/disadvantages of weak typing.
A loosely typed language will do that to you... I got burned on a switch statement a while back. Took me much longer than I care to admit to figure out. 
Any time I think PHP can't get any quirkier something like this crawls out of the code. :-/ (Not as bad as (bool)"0" being false though. Turned out every if statement checking for an empty string I ever wrote was borked.)
Was it something like this? $x = 0; ... switch ($x) { case 'foo': thisWillRun(); break; case 'bar': somethingElse(); break; } Happens to everyone at some point.
and how is that? PHP is mainly made up of hobby programmers. Most hobby programmers make their money from CPC....
seeing as how i mainly dabble in SEO this keyword does nothing for me. :/ Looking for personal experiences.
I didn't say it shouldn't, I like string to numeric casting. 
This is another one of those things that won't sneak up on you unless there's a serious logic error somewhere in your design.
[citation needed]
That's true, I was checking array count if it had at least one element, functioned returned *false* and that's how I discovered it. Changed *count()* with *empty()* check (which I used in most cases anyway).
dont really think that needs citation. I guess i am quickly learning that this PHP subreddit is full of douche nerds who hold PHP like they would their first pussy. I hope this isnt true, i really hope this isnt true. (citation is this post.)
Non-empty non-numeric strings are true. Non-empty numeric strings are turned into numbers before checking truthyness. Numeric zero is false. Both Perl and PHP consider string zero to be false. Python and Javascript consider string zero to be true. It's not a quirk, it's by design. As a general rule, if you're expecting a number, check that it's a number and within a sane range rather than just checking for truth.
DON'T USE A PACKAGE IF YOU'RE DOING ANYTHING MORE COMPLICATED THAN A SIMPLE WEBSITE.
Clearly I'm a douche nerd who holds PHP like I would my first pussy. Clearly.
I would have to agree with you no-cake. I am glad bundy can see it also. =D
Unsubscribe then! We're volunteers helping out beginners. no-cake *still* hasn't specified why using Google won't work. I pointed him in the right direction, and got downvoted (not blaming him, just saying). If I'm a douche nerd who holds PHP like I would my first pussy, then you're an ignorant brat who thinks that r/PHP is his personal business consultant. Indian Jesus.
&gt;Non-empty numeric strings are turned into numbers before checking truthyness. That's not correct. They are not turned into numbers. It's only the exact strings "0" and "" that are considered false: var_dump((bool)"0"); // false var_dump((bool)0); // false var_dump((bool)"0.0"); // true var_dump((bool)0.0); // false Even if it was planned that doesn't make it not a quirk. There are good reasons to expect "0" to be true, for instance: 1. It's faster and simpler if ($string) is the same as if (strlen($string)). 2. (string)true is "1" and (string)false is "". 3. If (bool)"0" is false, why leave (bool)"false" as true? If you're going to look at the string content why not do it fully, same as for (int)" 10.0 pigs " = 10. (Because automatically looking at the string content at all for truth tests is unhelpful, that's why.) It's a stupid quirk is what it is.
&gt; `var_dump((bool)"0.0"); // true` AAAAAAAAAAahahahahaha. n/m, fuck PHP. e: Perl does that also. Probably where it inherited the behavior from.
false !== 0 !== null which is why count(null) returns 0 **edit** having said that the manual says "count() may return 0 for a variable that isn't set, but it may also return 0 for a variable that has been initialized with an empty array."...fml.
Why would you want to count false? If you're expecting an array but might have false you should probably be doing if($x===false){... error handling..}else if{is_array($x)){count($x);}else{ ..more error handling ?...}
So here's a use case: for each item in array x, add an element to array y indicating whether predicate function z is true. So you end up with an array that looks like: [true, false, false, true, false] You'd like that to return 5 as the count, rather than two, yes?
just reversed... x was a string and the first case was zero. 
count() operates on arrays and objects, everything else is cast to array. That means any non-null value will produce a single element array containing the value. An empty array is evaluated when casting null. &gt;&lt;?php &gt; &gt;$string = 'string'; &gt; &gt;var\_dump((array) $string); &gt; &gt;echo count($string); //1 &gt; &gt; &gt; &gt;$zero = 0; &gt; &gt;var\_dump((array) $zero); &gt; &gt;echo count($zero); //1; &gt; &gt; &gt; &gt;$false = false; &gt; &gt;var\_dump((array) $false); &gt; &gt;echo count($string); //1; &gt; &gt; &gt; &gt;$null = null; &gt; &gt;var\_dump((array) $null); &gt; &gt;echo count(); //0 
Of course count() on an empty array returns zero. It's an empty array, there are zero elements in the array. count was basically designed to count elements in an array, or any object with the countable interface, so if it's not an array it just returns 1 except for in the special case of null...which I guess kind of makes sense because null is nothing.
You must have some weird code if you somehow ended up thinking a boolean was an array. Don't forget about is_array($var) if you ever really need to make sure you're working with an array.
Good reason not to use this check on a function that returns an array OR false.
An array with 5 booleans will still return 5 when you count() it, no matter what booleans you stick in the array. This must have been the case of an unexpected return value. He thought he was working with an array, but wasn't.
Yes, but why `count("test") === 1` but `$asdf = "test"; $asdf[3] === "t"`?
should be `switch ((string) $x) {..}`. Luckily, `(string) 0 != "bla"`. Just my opinion - a string should've always loosely equaled or castable to integer `1` from the very beginning of PHP, not `0`. It actually adds to the confusion when a non-empty string equals `true` when cast to boolean, and that means `1` when recast to integer.
"test" is not an array, so like every non-array that is evaluated by count() except for null, it returns 1 when you do $asdf = "test"; $asdf[3] === "t", $asdf is just being temporarily typecast into an array because PHP is a loosely-typed language and is cool like that. Either of those bits of code are just examples of how forgiving PHP is and really don't serve much of a purpose.
`var_dump((bool)"0.0"); // false` would be asking for a bit too much, expecting PHP to first recognize this string as a float, then cast it to boolean. But, yeah, the fact that it recognizes `"0"` as an int prior to casting to boolean is a bit confusing and not really consistent.
You kidding me? Well I suppose with Borkz analogy... But really?
error_reporting(-1) shows all
&gt; when you do $asdf = "test"; $asdf[3] === "t", $asdf is just being temporarily typecast into an array No it's not. At least, not on the PHP level. Perhaps it's acting like C/++ in this case by just treating it like an array of characters, but in no sense in terms of PHP is it being cast to an array (which would leave it at an array with a single element). The `[]` operator is shared with strings and arrays. In strings, it is used to get the character at the stated offset. All I was pointing out is that the loose treatment of types crisscrosses arbitrarily often.
$8.83 now. Sadly overvalued for a service like this by $8.82.
touche, I guess all I was trying to say is that count(null) === 0 and count($somestring) === 1 makes sense to me
Did you read the docs? "If var is not an array or an object with implemented Countable interface, 1 will be returned. There is one exception, if var is NULL, 0 will be returned. "
 $x = (array) false; echo count($x); // 1, because $x is array(false). echo count(false); // 1, obviously (implicit cast) $x = (array) null; echo count($x); // 0, because $x is null (I find this hard to swallow but whatever). echo count(null); // 0, obviously (same as above but with implicit cast). Remember: false !== null
an empty array is falsey, You don't need to use empty, just if ($value)
`count($somestring) === 1` makes sense to me too. It's just one value. But, with all the type juggling and sharing of operators once thought reserved for specific types, and same behaviors between arrays and objects having a certain interface, it can get very confusing. Take `(int) (bool) "something" !== (bool) (int) "something"` for instance. Sure you'll likely double-cast only once in your lifetime, but it does demonstrate the fogginess of how types are treated and interchanged.
&gt;Understand that code is read far more than it is written, so simplifying code is important. Whenever you define a named function, your reader attempts to put that function name in his or her brain cache, which needlessly complicates the reader's understanding of the program. If a function is to be a once-and-done operation, use a lambda and simply your code. The problem is when this rule isn't followed and lambdas are being passed left right and centre. I've had this problem trying to work out how some JavaScript code works that gave me a serious meta headache.
Agree - After 20years of coding, simpler code is better. The above leaves too much room for bad coding practice and confusion and debugging becomes a nightmare. 
Can anybody explain how using these can make me a better developer. No sarcasm, I am just curious, because I don't get it.
Thanks captain hindsight :)
That's why I created this thread, I didn't know that *count(false)* returns 1, I've read the docs and thought I would share, hence "TIL".
Nuke... Where is it made?
I do see an advantage to this technique sometimes. I see it as quite similar to the same programming methods used in JQuery and such. &gt;"And why is the lambda version better?" you might ask? Let me explain. Keep in mind that the non-lambda version defines a function that is only used in one place. Understand that code is read far more than it is written, so simplifying code is important. Whenever you define a named function, your reader attempts to put that function name in his or her brain cache, which needlessly complicates the reader's understanding of the program. If a function is to be a once-and-done operation, use a lambda and simply your code. So basically, if you know you're only going to use a function once, why give it a name? Just run the code, instead of giving it a name. If you give it a name, then the next developer reading your code might think, "Oh, I wonder where else this function is called". Using the above method, everyone knows the function is only called once. I'm not saying this is a fundamental change to the way I program PHP, but I can certainly see how it could be useful sometimes.
I agree as well. It may be my poor understanding of anonymous functions. I can understand the use of a callback, but why should the call back be an inline function. The call back could simply call an named function. The whole idea seems to be counter-intuitive to productive programming. I've always hated the over-use of anonymous functions in Javascript. It would be useful if the function was to only be called once, sure. However, the main reason for creating a function in the first place is to promote code reuse. I can see how the occasional use of a lambda would come in handy, but from what I've seen in Javascript, they are used much too often.
Knowing about such options is good, but frankly if you use them more than a few times in a program then you're doing it wrong. It's like a java person making every damn thing a fucking singleton. It's great that you know what it is, but there's no sense in using it just because you can.
You can also make an object implement Countable. But that sadly won't allow count() to return complex values, all you get is a notice at best, and the aforementioned 1.
What's with IBM and "leveraging" stuff. 
...because it's not a CMS out of the box. It's a tool set. It's up to the person implementing to make it an easy to use tool. It's easy to use when it's built around the content the site will host. A properly configured Drupal site (or CMS with similar content handling to Drupal) will always be "easier to use" than a generic WYSIWYG box. It's not even an argument. We replace useless "Title + Body" WYSIWYG CMSes every day because no one can actually DO anything with them and just end up with ugly, broken sites because of them. Managing a website should be like managing a database of content. The moment you force the end-user to make "pages" and design layouts in a WYSIWYG for effective presentation of the content your CMS fails.
They're trying to synergise their core competencies.
I don't know if I can really explain my thought process with code at all, I just think count() returning 1 for all non-arrays except for null makes sense. If I hadn't read the manual for that function, I would probably assume that's how it worked anyway.
beats me
without testing it, it looks like when you do substr( $message, 0, strpos($message, ' ', $position) ) if the message is &lt; 256, that strpos() will return FALSE, since it can't find a space after the last character in the string. so you're technically doing substr( $message, 0, FALSE /*or 0*/ ) which isn't going to return much
 $length1 = strlen($message); //find the length of the message if ($length1 &lt; 256) {$position = strlen($message);} //if the length is less than 256 set position as the length of message $post = substr($message, 0, strpos($message, ' ', $position)); //create a substring of the length of the next space after the message string offset. if ($img == 'none'){$display = "display:none;";} //if there is no image display nothing. Correct? 
should it not be if($length1 &lt; $position){ $post = $message; }else{ $offset = strpos($message, ' ', $position); echo $offset; //would imagine this will be about 260 $post = substr($message, 0,$offset); } 
So the main reason to use a lambda is because the author thinks they are easier to read?
There's a decent [video tutorial](http://net.tutsplus.com/tutorials/php/how-to-create-blog-excerpts-with-php/) over at nettuts that explains a good way of creating text excerpts. 
 public static function getObjects(array $input) { return array_map( 'PropelModelPeer::retrieveByPK', array_map( function($v) { return ceil($v/2); }, array_filter($input, function($v) { return is_numeric($v); }) ) ); } So you don't like my code?
And RAM their Hard Drive into a Mainframe.
Sorting: $a=some heterogeneous data, in an array $result = usort($a,function($u,$v) { return $u-&gt;x - $v-&gt;y; }); It saves a bunch of time to drop in anonymous functions. You'll have to wait for your hosting provider to get out of 5.2, though, or your site will break in hilarious ways.
yeah. this is what i caught, too.. if ($length1 &lt; 256) {$position = strlen($message);} $post = substr($message, 0, strpos($message, ' ', $position)); why not instead, do the following? if ($length1 &lt;= 256) { $position = strlen($message); // i left this set in case you use it elsewhere $post = $message; } else { $post = substr($message, 0, strpos($message, ' ', $position)); } also: 1. i changed your &lt; 256 to &lt;= 256. 2. be careful to take note that substr's positions start counting from 0. while strlen is counting from 1, of course 
&gt; punchline_needed hmm..... just don't forget to closure brackets! 
Thats its, thanks! Your solution seems so obvious now. and the tips are very helpful!!
Words at IBM are meaningless gabber designed to confuse people away from asking what exactly they are planning to do... which usually involves taking away your motivation and coffee after purchasing your company and giving you 1984ish promotions where your job title changes and you get more work but no raise. 
&gt; I can understand the use of a callback, but why should the call back be an inline function. The call back could simply call an named function. Because the named function is *somewhere else*. If you working inside of a function that is responsible for operation 'A' and your callback is small and meaningful for operation 'A' then it's pretty straight-forward to put that code right there inside of that function. Sometimes using an anonymous function is the simpler and easier to understand way to go. Sometimes it's not. It's just like how you can replace a switch() with a series of if/else statements and vice-versa -- sometimes one is more appropriate than the other. 
Functions still aren't truly first-class in PHP..
&gt; "It's up to the person implementing to make it an easy to use tool. It's easy to use when it's built around the content the site will host." Unless you completely re-do the backend for every site you create with Drupal, it's not going to be easy to use without a significant amount of training for each client. [This](http://upload.nucleardog.com/412/drupal.png) is not an easy to use interface (for the clients that can even manage to find it). The client doesn't care if you say it's easy to use. The client doesn't care if it's powerful, extendable or modular. The layout on that page is piss-poor for usability. &gt; "Managing a website should be like managing a database of content. The moment you force the end-user to make "pages" and design layouts in a WYSIWYG for effective presentation of the content your CMS fails." Well, we force the end-user to make pages, but they don't have to do any layout in WYSIWYG editors... Any structured data is handled through the other interface I tossed up a screenshot of. So do we only 50% fail? &gt; "We replace useless "Title + Body" WYSIWYG CMSes every day because no one can actually DO anything with them and just end up with ugly, broken sites because of them." We do projects for universities, the provincial government, the federal government, political parties (local and remote), utility companies, energy companies (big oil!), and several other companies that do well over $100m/yr business as well as little mom and pop shops and charities. We have well over a hundred 'active' clients (that I know of - I do more development and less site-specific stuff) and many more that just come to us for periodic updates. We support all these high-demand clients with a staff of 6 (which is almost 1/2 administrative (two full time, one part time dev/part time admin)) because the clients are doing most of the work themselves - we only get the occasional phone call when they want something new. And their monthly payments for hosting + CMS. Most of our clients already have a site when they come to us, and they've almost always heard of us completely by word of mouth (we don't advertise). A lot of the bigger ones walk in asking specifically for our CMS. For instance, we just had a big-oil sponsored organization in this morning asking for a demo of our useless "title + body" CMS because they heard it was "easy to use" and their current one is, (and I quote), a "nightmare". They have to go back to their web developers for all of their updates because no one can figure out what the hell is going on. Clients do not care about the concepts. They do not care about the code. The only thing they care about is whether they can get *their* job done, or whether your product gets in their way. That said, the concept behind Drupal is fine (quite good, actually), but the interface is not usable for clients. If I've not managed to convince you of that so far, then you either have much more technically literate clients in your part of the world or need to pull your head out of the sand. The page metaphor is not perfect, but used appropriately is a useful abstraction to increase usability - which is ultimately what matters.
I use vim to work on a ~500 KLOC codebase where the main design pattern in use is big ball of mud. I've tried IDEs with clever auto-complete systems a few times and I often find that I rely on such features so much that I don't really get to know the code that well. ("What was that method signature again? Oh, my IDE will tell me - I don't need to remember it.") vim does have primitive code-completion built in (&lt;C-n&gt;) provided the text you want is in an open buffer, and you can augment that with ctags. I find that my editing is fast enough in vim that it's quicker (for me) compared to an IDE. I can get a lot of functionality from the tight shell integration and the vast collection of plugins available. E.g. if I want to reformat some XML: an IDE might give me that option but in vim I can just pipe it out through xmllint --format and get the job done that way. It is the unix way; small tools that do one job very well. Vim is a fantastic editor - use other tools to augment its functionality to get what you need. 
A lot of times errors can occur through no programmer error. Server half parses the file, database server has some error, whatever. I run into sites fairly frequently that give me errors that should not be shown to the user. Yesterday on the Razer Naga site downloads were spitting out the mysql query for saving the users' session, if you don't hide the errors sooner or later a user will see one. Log the error, do your best to give a friendly error message and you'll be a lot happier in the end.
&gt; most successful piece of code in the modern era: Linux We have very different definitions of "Successful"
@mysql_query() or die("Mom, Mom, Mom, Mamma, Mamma, Ma, Ma, Ma... why you no say 'WHAT!'?");
Exactly.
this is the only correct response in the entire thread
Ofcourse you actually MEANT nano ;)
Why not just use Left(testimonial, 256) in the query?
You should clean up your variables, most of them you don't need. For example why define $img as $row['userfile'] if you're not going to do anything with it. Of course you maybe be using $img separately from $row['userfile'] further down the page but I thought I would mention... Same goes for $idnum, $link, $message, $approve. If you really want to expand the variables in to different names you should look up [extract()](http://php.net/manual/en/function.extract.php). Also, you're doing strlen($message); twice.
Unique? Social networking site? The best of twitter, reddit and facebook?
Best features... Further explanation: Twitter is nice but has limited functionality (mainly "status updates") Facebook has too much confusion/ads/zynga s#it. Kinda lacks a more global sense of social networking. Reddit is awesome however its mainly "social bookmarking". It would be nice to have one site that combines them all in new ways. That was the goal of this project and it was mostly accomplished. Granted its features are no where near as polished (you cant except much from one developer vs. multi million dollar corporations (unless its minecraft) ). 
Anyone with a pulse can make a better site than Facebook, it's convincing people your site is better that's the hard part. You have to compete with peer pressure from 200m people.
feel free to make an account. if not account name = reddit password = 12345. Im on there as landtax.
I would disagree. While facebook is not desirable in some aspects it is not what I would consider a bad website. It has 200 Million Users. It must be doing something right. Im not looking to compete with other social networking websites. I'm kinda looking to make something a bit different and more intuitive. Kinda like the Walmart of social websites (except not evil), has a bit of everything while not having alot of one thing. 
Also note that there are still some bugs on the new interface that we did not have time to work out. If this project gains interest they will be worked out. 
The fact that it is using mysql, not PDO or even mysqli is a pretty shit start.
TIL that PHP Data Objects is faster, cleaner, and cross database capable. But it's not really the end of the world using mysql or mysqli and it's generally not worth switching if you already have a fair amount of code written.
I like the look of it.
Thanks
I've been working on a social network for my college for a 3-term long school project this year. I've been doing PHP development for a long time, so I thought I would give some tips for ways to potentially improve the site: 1. Use Redis for storing wall messages and any type of site stream. It will greatly improve the speed and robustness of the site, without the risk of losing data like volatile in-memory storage systems would have. The gist of it would be: // adding a post to the stream // assume $r is an instantiated Predis (PHP Redis library) object $num = $r-&gt;lpush("user:wall:$username", serialize($stream_data)); // getting user wall posts $posts = $r-&gt;lrange("user:wall:$username", 0, $num_posts); $posts = unserialize($posts); 2. Use memcached to cache retrieved database data. This has the potential to greatly speed up the site, but also adds the potential of caching data too long and causing site inconsistencies. Tread with caution. 3. Look into using [FlockDB](https://github.com/twitter/flockdb) for the friend graph. It was made by Twitter and it currently stores their massive friend graph. It can be a real PITA to setup, but once it's running, it works beautifully. If you can't get it to work, I wrote this post about [storing a friend graph fully in Redis](http://blog.meltingice.net/programming/implementing-social-graph-redis/) that you may find useful. 4. I'm not sure what your stack is like now, but if you're running Apache, I would highly recommend looking into using the Nginx + PHP-FPM combination. You'll find it will be much faster and will be able to handle more concurrent connections than Apache. Hope you find at least a bit or two of this information useful, and good luck!
Server is running on IIS with a MySQL backend. Pretty much everything dynamic stored inside the SQL DB. Would there be any advantage to using Predis or Flock over an SQL DB? MySQL DB is an absolute breeze. Very easy to code for and very fast (especially when you use indexes properly). With the use of indexes the DB back end should never really slow down (as it gets bigger). It will just slow down under high load (and thats why there is server replication). Also, just in case you were wondering... Friend relationships work like this (in my design). 3 columns - User (stores their ID), friend (stores friends ID) and pending (stores weather its a request or confirmed). When a friend is requested the appropriate values are loaded into the database. When a friend is confirmed the pending is set to 0 and an inverse relationship (where the users ID and the friends ID are swapped in their respected columns) is inserted. That way a user is friends with his friend and the friend is friends with the user (dont think about it too hard). When it comes time to bring up a list of the users friends all that you have to search for is the users ID in the database where the pending is set to 0. With an index this becomes very fast. I would love to take a look at your project if you have it running. Looks like your coding is deviating away from what I would consider the easy simple way of doing things. 
Because he wants to break on a word not a character.
Yeah, my project was built with massive scaleability in mind. I work for TwitPic now, so I guess my brain is kinda tuned to expect and work with massive amounts of data and users. FlockDB actually does use MySQL as the backend, but it uses a technique called *sharding* to split up the data into multiple tables. Since a friend graph is a two-way directed graph, you have both forward and backward edges (which you mentioned with the "inverse relationship" stuff). It does some client-side hashing to determine which "shard", or MySQL table, to store and select the relationship from. In your defense however, I used the same method you did for a different site and it's been working just fine for tens of thousands of users. FlockDB does provide a really nice and advanced interface for managing friend graph data, but it's something you can probably do just fine without. Redis has an advantage over MySQL because it is super fast due to the fact that it stores *all* data fully in RAM. You can also do some really cool stuff with Redis since it's technically a "data structures storage" system. It has lists as a built-in type, and sets are really useful too. For instance, on my site, I track who has voted up/down on comments with Redis sets, and it's really fast. Here are some screenshots of my project, named Campustream: [Main Page \(if not logged in\)](http://cl.ly/1c3Z2H2k2n0V3W0E2t0H) [Main Page (if logged in)](http://cl.ly/401q2h3i1n1b2V272M1v) [Collaboration Questions](http://cl.ly/0b1D3j0f2i00120g0a1F) [Question Page](http://cl.ly/3n2K2h2l2W1g3E1z162U) [Users I Follow](http://cl.ly/3A2K1A222X0T421Q3i0a) 
Oh god, where to start? First if you're going to try and recruit a programmer to do this I hope you have some cash. Every web dev has been hit with the "make me the next Facebook" crap, and no one will take it unless you've got at least $10k to pay the dev. I personally would not take on a project like this unless I knew there was compensation and I was paid a portion in advance. Second if you want to do something like this you need to make a concept, get some funding, then start a team. All of the code you've produced so far will need to be thrown away unless you want to end up with something like Reddit when you get done (the Reddit devs have admitted that there's a lot of shoestring code on the back of this site that they never had a chance to fix). Code from someone with no knowledge of programming should never be used for production, and will only slow it down and lead to major headaches down the road. Finally I don't know who's working on this with you but bevel edges, rounded corners, gradients and drop shadows like you've got rocking here look very early 0's. This also shouldn't be this wide, 1024px max. The page is cut off in my normal size window and there's no horizontal scroll to let me see the rest of the page. Doesn't matter much anyways since horizontal scroll should never, ever, ever come up in a design.
I don't use zend, but with mvc in general I would use a new controller for each unrelated bit of functionality. You CAN put everything in one, but using separate controllers helps organization and reusability of your code. And if you're using source control it keeps your changes localized to relevant files.
Okay, first let's remember [what MVC is](http://en.wikipedia.org/wiki/Model%E2%80%93View%E2%80%93Controller). Controllers are glue between the business logic and database-backed storage that should be contained entirely in your "model," and the HTML &amp; JS that are contained in your "view." They should contain nothing but code needed to make that level of interaction possible. Simple stuff. As a general practice, you'd want to group together actions that are related into a controller. None of those actions seem related in the slightest. You probably want different controllers for each of those actions, as they seem to be dealing with separate, unrelated sets of data (and thus underlying model objects).
REST/ROA can help you here. [RESTful Web Services](http://oreilly.com/catalog/9780596529260) has a process to help you describe your resources (nouns) and build a URI scheme, that or .. use that search engine with the colorful logo. ROA (Resource Oriented Architecture) in a nutshell: * define your resources, or nouns * define the uri for each resource * verbs are 'get', 'post', 'put' and 'delete' - actually, just 'get' and overloaded 'post' This will tell you what the controllers should be. Each resource typically gets its own controller. eg: get site.ext/customers # customers controller - get list get site.ext/customer/1 # customer controller - get 1 post site.ext/customer/2 # customer controller - create 2 You can use mod_rewrite to point customer.php?customer_id=1 at /customer/1 Personally, I just leave the extension off the controller, which can freak our your syntax highlighting, but there is a way to do that also. If you do this your site will be an API, and your AJAX controllers can be more or less done at the same time. So, that's good. Let me know if you need any help.
I learned MVC with Rails, so I tend to stick to the Rails way of structuring things (REST) when working in PHP as well. As such, my controllers typically have 7 standard actions: index, view, new, create, edit, update, destroy (or I will ditch create and update and overload new and edit). Sometimes more custom actions are needed. Typically it works out to each table/section roughly having its own controller. I mean, you wouldn't have separate controllers for tables used for linking, secondary data, defining relationships, etc.... I'm not sure I'm articulating this well. For example, a simple blog that had categories of posts and allowed users to log in and comment on those posts would have the following controllers: main (probably, just as a catch-all for any misc.), categories, posts, comments, users, sessions
Ya, you are missing something. The normal way to work it out is something like this: Model: User Controller: User Actions: viewAction(), createAction() (for sign up - will be a form + code to update DB), updateAction() URLs: http://example.com/user/create/, http://example.com/user/view/35, http://example.com/user/update/35 Model: Advertiser Controller: Advertiser Actions: viewAction(), createAction() (adding an advertiser), updateAction() etc etc etc. You should end up with something close to a 1:1 relationship between models and controllers, if the model needs some sort of CRUD interface (which most do).
But this is starting to sound like we're creating a controller for every method or for just a few..
They control different data, in different areas of your site. They should be different controllers, even if they're tiny. Check out the top-level comments from warbaby-baby and fireisland. You might have a conceptual gap.
If you really want to build this site and make it into a viable product that people will actually use, then you need to consider what you have as nothing more than a proof of concept, hire a developer and a designer who both have experience, and start over. No way I would take on a project of this magnitude unless there was a good, guaranteed paycheck in it. I do think there's still room for niche social network sites to be successful, depending largely on your definition of success, but for broad-sweeping, appeals to everyone social networking, that ship, I'm afraid, has sailed, unless maybe you have millions in funding and a large team for rapid development, and a big marketing budget and sales team.
Upvote if you use Vim/Emacs/anything else
vim
Upvote if you use Reddit.
Dude, this has been done before. The future of PHP is Lithium. Get on that bandwagon NOW. In your view you just have something like: &lt;?=$this-&gt;form-&gt;create($user); ?&gt; // this binds the form to your User model, making DB interaction soooo easy ... just one line of code to validate and save &lt;?=$this-&gt;form-&gt;field('description', array( 'type' =&gt; 'textarea', 'label' =&gt; 'Describe yourself in a few sentences', 'rows' =&gt; 6 )); ?&gt; &lt;?=$this-&gt;form-&gt;submit('Next'); ?&gt; &lt;?=$this-&gt;form-&gt;end(); ?&gt; I have NEVER used a better framework for building webapps in my life. Not only that but the devs are really helpful, and easily accessible in #li3 on irc.freenode.net. The question you ask above, I was asking 10 years ago. Many people have tried similar things. The Lithium people have got it right.
I'm a vim man but I upvoted anyway. Truth be told I mostly use gedit for php under x systems.
&gt;You can use mod_rewrite to point I've not actually used Zend, but I'd imagine any framework worth it's salt would provide a router/front controller thus decoupling URI (or API if you prefer) from code structure.
I use Joe
WTF is Reddit? Never heard of it.
I use Aptana and Coda.
* Microsoft Word for all my webcoding :)
Oh, and Microsoft Front Page to create the Fly-By bar of text... (my word can't do that)
I downvoted because I use Aptana.
To answer your question: **What is wrong with this code?** * Bad/ugly routes. The correct approach (for a PHP project) would be to use rewriting that translated all urls to a single php-file. That file than calls the correct php-template. It should also contain utility functions for constructing urls. At least, if you separate that part of the code out (constructing urls), you can easily switch to pretty (SEO friendly, and not customer-headachache-inducing) routes later. It's 2010, "index.php?guts-are-showing=ugly" just isn't ok anymore. * Inline CSS, where it is not needed. You are just being lazy. Apart from the display line, you should be using proper CSS classes, or better yet, relative css classes, like: .testimonials li { height: 318px; } Not to menton the fact you are going to need browser specific hacks, from time to times. Setting up a conditional stylesheet (or conditional body class) means, that when that day comes, your code quality isn't going to suffer. * It's not formatted properly If you don't format it properly, how are you ever gonna be sure that you are producing valid HTML _all_ the time? Forgetting to close a tag is something that different browsers will 'fix' differently. At least make an actual effort to not mess that up, by using proper indentation. * You are not escaping the data you get from the database. Even if you trust the person filling in the testimonials, they better not use any characters that are special in HTML. If you can't trust the person, you are setting yourself up for a big XSS attack. * It should error if there is no $row['testimonial'] It may or may not be a mandatory field. You may even change this behavior later, and have to update the view. * It doesn't do what you want it to do if there are no spaces Here's a generic pattern, that also uses shorter code: $message = $row['testimonial'] || ''; $position = min(256, strlen( $message) ); $position = strpos( $message, ' ', $position ) || $position $post = substr( $message, 0, $position ); And put logic like this in a function. You may need it more than once, and, that way, it's easy to do some testing with the function. You can make a separate test page, that just asserts the behavior of all your utility functions. **TL;TR** What is wrong? Everything. This the kind of code that gives PHP it's horrible reputation. Come on. I'm not a code-quality-nazi, but you aren't even trying. You don't even make an honest effort. PS. Just subscribed to r/PHP. Perhaps i'm over-reacting. This is a place to learn after all. But the issue here, is that he writes unreadable, unmaintainable, unsafe code with no thought about the structure and design. The bug is just a side-effect of the larger problem. A symptom of the decease. 
Why is this guy voted down? He's on the money.
Oh wow. Yes, he should clean up his variables. Actually, most of them are supposed to be methods on his model-class. Unscoped variables? --&gt; Rewrite to function. As to using extract. Let's not, ever do that. For security's sake. If you write code like the OP, you know he's going to use extract over a post-array or something, and have a huge security hole. He better not yet, ever learn of that function. 
You know, I really really really just hate Magento. Nothing personal mind you.
&gt; if you already have a fair amount of code written If that code looks anything like the OP, then yes, by all means, delete all your code and start again. You are assuming, I hope, that the 'fair amount of code written' that is using the traditional mysql interface, is properly escaping his sql-arguments. I honestly doubt that is the case. I mean, the code above, isn't even escaping the HTML entities. Also, even if you have a large amount of code that uses the traditional mysql interface. You aren't putting random sql queries all throught out your code, are you? They are either all in a single include, or split out over model-classes, right? So, switching to a different database interface, wouldn't touch more than, say, 1% of your code? Right? Because, if it did. Then by all means, rewrite. Throw it all away. Kill it with fire. For the love of god, do not put crap like that in production. 
I read that 'imaginary framework' and thought.. wow, *that* sounds cool. I like ZendCache okay.. the rest of it.. overblown.. I'm not really into the whole straightjacket program and I hate CamelCaps. I did use some of their ideas for my framework tho. Back on topic, I don't let frameworks rewrite my uri(s) because I prefer to do it myself as part of that 'i am totally in control of everything' thing that I like. 
Yes, this is the wheel. I reinvented it myself, but I prefer to pass args in as an array. $form = new Babyform(array('method' =&gt; 'post', 'name' =&gt; 'form')); $form-&gt;add_input(array('type' =&gt; 'hidden', 'name' =&gt; 'action')); $form-&gt;add_input(array(type' =&gt; 'submit', 'value' =&gt; 'send')); $form-&gt;render(); What is the point of assigning all the vars individually on the outside of the class. I never really understood why that. 
&gt; The future of PHP is Lithium The future of PHP has nothing to do with a framework.
Describe
Also check out how Zend Form http://framework.zend.com/manual/en/zend.form.html does this. Grab the code and take a look at how the decorators are used in the form object. I started, like you, with a form object (which was a form + table) then added items to it (which inside the form object became TR TD and other tags) then I implemented the toString() which squirted out HTML. Zend Framework uses the decorator pattern to remove the table, tr, td from the code. http://framework.zend.com/manual/en/zend.form.standardDecorators.html I'm not sure if I really like how they have made the decorators, nor how you have to pass in 30 arrays of arrays to build them. But I think that may be a limitation of PHP (no method/parameter overloading) rather than ZF. With regards to your code, have Textbox extend \html\tag and release it on github :) I think I'd use it. My IDE can autocomplete classes, but it has no idea what is going on with ZF decorators - damn those array parameters.
Fair enough, I was just being dramatic. Lithium is awesome though.
Wow. I get voted down. Maybe I should just report this whole subreddit to the daily WTF?
Close! But switch from Eclipse to Netbeans, and drop SVN for Mercurial (HG).. or git. I'd say just trust me and do it, but I really don't care. Enjoy!
I didn't downvote you anyway, since you're a PHP programmer.
Who on earth uses Eclipse anyway?
Sure, but as novelty_string mentioned, most frameworks let you route however you want. Check out the way Kohana does it, seems pretty slick. You end up with total control.
I use git (msysgit version).
So why is Lithium better than Cake, for example. p.s. I don't know my arse from my elbow when it comes to this, so yeah, this is a genuine question... but I do program in PHP.
lots of people I belive, well in my last two developement jobs the developers where using Eclipse anyway.
Been ther done that (client insisted). Only way to do this is to put the page in a frame (one frame for page another one for a HTML containing the music object).
well I realise that Eclipse runs in lots of OS's but the tutorial shows you how to setup SVN with XAMPP which is a windows bundle of apache, mysql blabla.
Two things: A) Why would you want to generate HTML programatically? It's a markup language, and a very simple one at that.. doing the above example will only cause your site to be significantly slower, less flexible and.. without any real gain. B) You should not use short-tags in PHP, it's bad form.
Sounds cool to me. thanks for sharing!
Fair questions ... A) One could easily argue that the main use of PHP is to generate HTML programatically. These tags are aimed to be used with an HTML template (the V of MVC). The form is bound to your model, so all the validation, prefilling in values etc. is handled by lithium. The content of the form is dynamic, and so it makes sense to do this. Also, if want an accessible representation of your form in PHP, then if you also write it in HTML you are doing the work twice. B) These are not actually PHP short tags ... in Lithium the contents of the tags are actually parsed by the framework. I have PHP short tags turned off on my server. I'm not sure why they chose to use &lt;?= ?&gt; but I guess it's because it's well understood, and it's a delimiter that they can be fairly sure won't interfere with anything else (as long as php short tags are disabled).
Slight update, XAMPP works under MAC aswell
Actually I think Lithium is written by the same guys as Cake was. I've used several frameworks from PEAR to Zend Framework. I have also rolled more than one framework myself over the years. The reason I like lithium so much is: * it is really well organised. They really "get" MVC. It's also very easy to use compared to something like ZF. * you really don't have to write very much code at all. In no other framework have I ever had to write less code. * with a plugin (li3_doc) it will autogenerate documentation for you, much nicer than say phpdoc. Also its own documentation is built in so whatever version you are running you have the docs at /doc (locally, not live of course, unless you configure it that way) * it has a built in test framework at /test (again only when in development), and the framework itself has a complete suite of tests. The test framework is much nicer than, say, phpunit. * I hang around often in the IRC room, and the developers actually will spend a good amount of time explaining the framework, MVC etc. to newbies. When I have had questions I have always found the people in IRC to be helpful, on 90% of occasions I get input from the two main guys (who I think were the cake guys). * It is the only framework I know that is written in php 5.3 for php 5.3. They use namespaces (correctly), they use closures (when closures should be used) and so on. * Finally, the biggest one for me ... I have been developing in PHP for 12 years. Lithium has made it fun again.
I use TortoiseSVN as client and CollabNet Subversion Server on a win2k3 server for the repository.
I used to be with SVN, but then I met Git. SVN and I divorced, and I am now living in sin with Git. Never looked back ... just glad SVN and I never had kids or bought a house together.
I was thinking about trying to make a project in CodeIgniter. I know in theory all about MVCs but never actually used one successfully. I used Kohana once but just put everything into the controller. Would you suggest Lithium over CodeIgniter?
Why shouldn't you use short tags? I ask that genuinely as I would like to learn. I often use short tags in my views as I try and limit the PHP in there. So I will have already preprocessed the variable and then when it is time to output it in the middle of the HTML I will just go &lt;?=$myvar?&gt;
Sounds like Woof. But what's your question?
Lithium makes use of the new features in PHP 5.3 - stuff like namespaces, closures, lambda functions. These are things that PHP has been sorely missing for many years and open up a ton of possibilities. Lithium is like an extremely clean, more elegantly constructed version of Cake. It's very familiar, but isn't held back by PHP4. It builds on all the lessons learned from developing Cake as well. That said, if you can't use PHP 5.3 for whatever reason, Cake 1.3 is still quite good. Also tintub is right - Lithium is built by some of the former leads of the Cake project. Lithium was originally slated to be CakePHP 3.0 (with a transitional 2.0 version of Cake to act as a bridge between Cake 1.x and 3.x). The Lithium guys split from the Cake project due to differences of some form or another and decided to continue Cake 3.0 as Lithium.
I downvoted because nowittyname
This. However, I think it would be even clearer if it only counted arrays. Using scalar type hints (5.4) you could do this yourself. 
Thanks for this insight. It's very interesting indeed.
Oh, tons of people use Eclipse. I did on a 9-5 basis - for over 5 years (counting a year or 2 with Aptana). Same with CVS -&gt; SVN. Again, save yourself the not-inconsiderable trouble and switch now.
I know what you mean about trying to make it fun. It's hard sometimes. From the sounds of it though, based on both your comment and jmking below, I imagine if I have familiarity with Cake I'd be able to understand Lithium fairly easily, and have the advantage of leveraging the extra functionality you mentioned. Thank you for such a comprehensive answer. I always insist it's easier to learn something by talking to people who know it rather than reading articles or books. Thanks for your excellent detail.
&gt; Why would you want to generate HTML programatically? It's a markup language, and a very simple one at that.. doing the above example will only cause your site to be significantly slower, less flexible and.. without any real gain. Generating HTML programmatically is the whole point of using PHP. You can compress pages of typing into something that just takes a few lines, is guaranteed to be consistent, and can be adjusted consistently by making changes in just one place. If you're concerned about performance, cache.
One thing I've always really wanted from PHP is named parameters to function calls. Arrays are a workable substitute but it looks uglier to me and surely takes more processing.
Well, sometimes you'll have to host your code on a server that you can't configure. &lt;?php echo $myvar;?&gt; is fail-safe and more portable. If you have full control over all your deploy environments, and your code is well commented, it might not be such a problem.
CodeIgniter will certainly get the job done, but there are far better frameworks out there (CakePHP and Lithium being two of them). If you have the ability to run PHP 5.3 (not all shared hosting providers run it yet), I say go Lithium - otherwise go Cake 1.3
Also check out how Drupal does this: http://api.drupal.org/api/drupal/developer--topics--forms_api_reference.html/6 Click "27 functions call system_settings_form()" on [this page](http://api.drupal.org/api/drupal/modules--system--system.module/function/system_settings_form/6) for example forms. system_settings_form() is used to manufacture submit buttons and a submit handler that saves all fields to Drupal variables (stored in a db table) for run of the mill settings forms.
The technology has changed. The bad practices didn't.
Please don't follow the instructions of this person. This is not the correct way to do this. You are never suppossed to change anything in the app/code/core directory. That directory is reserved for the core code and keeps you open for core updates. The correct way is to rewrite the block in a local module, extend the original object and override the appropriate method. I couldn't find a good tutorial in a quick search, but this is a good start: http://www.magentocommerce.com/boards/viewthread/12757/ If anyone actually is interested, I can followup with a better tutorial.
I felt proficient in a week. Looking back I feel I was proficient after a year and a half. Still have been learning constantly since then but that was maybe my last "holy shit, why the hell have I been doing it that way?" moment. (excluding major language changes) Have now been using PHP for 6 years.
Can't you add a custom HTML module that appears on every page but doesn't have any visible contents?
No, the music should keep playing as you navigate the site - if you would place an object directly in the page HTML it would stop when navigating away and load again when new page loads. Even if you would somehow (state cookie etc) keep the current position there would be a pause in the music when the page changes.
Ah, hadn't considered that. In my defense, it's a stupid thing to do in the first place! ;)
If you already wrote your lib then why would you not use it? Seems like working backwards to me. Maybe it was redundant but if you keep with it you could eventually have yourself a lib that has everything you need and can work with it quickly.
You are an idiot, because this is a simple module that is built into a content management system. Nothing you said is relevant, your just an asshole. The testimonials are submitted via frontend by users and backend, and all have to be approved in the back end, so there will be no empty testimonials. Inline CSS because the module will be put into a CMS and a seperate ecomerce store. and SEO links are converted automatically so go fuck yourself.
because if img = none, then it changes another variable from an empty string to css code that makes the img tag disappear. 
Took me a few years to be able to write without having to look at the php.net manual. But I took a break in between.
if you've ever made money before, you know that some clients have existing websites, and they want a new module added, not there whole mysql changed to something else. So the fact that you dont know how the business world works is a pretty shit start 
haters gotta hate
But really, Joomla is still awesome!
1. After a month, I felt like "Hell Yeah, I now know PHP" 2. After half a year, you make your first CMS, work for a client "Hell Yea, NOW I know PHP" 3. Two years later, you actually start to use OOP correctly and go "Wow, I was wrong - only now I know PHP!" 4. Four years later you discover MVC and Design Patterns, and realize that you are sorry for whoever has to maintain Your previous productions. And now, while extremely proficient, I'm sure I don't "know" PHP.
I started programming in Perl in 1994 at age 12 and PHP/FI 2.0 in 1996. Like this poster, I've gone through the same methods. You think you're proficient after a year and a half, but all you do is get arrogant and write the same shit that maybe sort of works half the time and is an **absolute maintenance nightmare** for all of your predecessors, and you, too, probably. It takes at least 6 years and several "OMG, I was *so* stupid before!"s before you even have a shot. in fact, the vast majority of people who think they're good PHP coders are laughed at by the vast majority of other coders because they don't even know simple stuff like how to debug using breakpoints (seriously, how many **senior** PHP coders don't know this?!) and design patterns.
You're only really proficient when you start using things not PHP with PHP. Also before people froth at the mouth, this is not a slight against PHP, this is acknowledging that the most awesome aspect of PHP is how well it integrates with services such as Memcached, Sphinx etc. All the tools which allow us to make fast websites.
In Zend you can do routes like this in the Bootstrap file class Bootstrap extends Zend_Application_Bootstrap_Bootstrap{ protected function _initRouter(){ $frontController = Zend_Controller_Front::getInstance(); $router = $frontController-&gt;getRouter(); $route = new Zend_Controller_Router_Route( 'login', array( 'controller' =&gt; 'Auth', 'action' =&gt; 'login', ) ); $router-&gt;addRoute('login', $route); } } Which would map a url like www.example.com/login to the Auth Controller and login Action, you can also add variables in there with defaults, check the docs if you decide to use it.
&gt;Generating HTML programmatically is the whole point of using PHP. No, creating dymanic output is... how you do it is not.
This is true. **NO ONE** can claim to be proficient until they have **mastered** APC and PDO, if nothing else.
If/when you move your code elsewhere, you might run in to the problem that the server is not configured for short tags.. Also, if ever you share your code with others, it's standardized.
Have to toss my agreement hat into this ring. I've been programming for around 15 years through probably half a dozen different languages (heavily) and another dozen that I've dabbled in. I've been writing PHP professionally for several years now. Gone through the same or similar stages, and at every stage of the game, I've thought I was 'proficient'. Then I've hit the next stage and realized how wrong I was, yet still arrogantly thought I was now 'proficient'. You're never completely proficient... There's always some other pattern or model you can learn. There's always some function in PHP you don't know about that will completely change the way you do some task. And if you do somehow manage to learn everything, there's usually some huge game-changing thing coming in the next iteration of PHP. There's always more to learn, and if you ever stop learning, you've failed as a developer. &gt; "in fact, the vast majority of people who think they're good PHP coders are laughed at by the vast majority of other coders because they don't even know simple stuff like how to debug using breakpoints and design patterns" Yep. The amount of horrible, atrocious, amateur code that gets churned out by 'senior' PHP developers is ridiculous. I think this is actually a good argument for certifications. O_O
Why are these better? I actually want to learn
You're post is very insightful and correct. You must realize that the *vast* majority of PHP coders in general and on /r/php in particular think they are awesome and don't even know what SQL injection or prepared statements are! (This coder is a case in point!) If you ever tell them this, you get downmodded to hell, but in the last month, I've made interviewees cry when I break crap code like this in front of them and explain that knowing this stuff is just a small part of what separates the noobs from the pros.
WOw! You should be *ashamed* of yourself! PUtting this in production code?! I was giving you the benefit of the doubt and thinking you just coded it on the fly in the reddit submission box (as I have been prone to do) and that this only resembled "live code" by a very small amount. Give me the URL to this content management system; I won't even need an account if it's coded like this. Just the URL.
I not only had to add music to a site, but it had to be "in the style of Jimmy Buffett," you know, to show it is SUMMERY!!!!! I died a little that day.
What about short code like &lt;?php endwhile; ?&gt;
Hey man, I'm sorry for my attitude. I just assumed you thought you were a senior dev, but if you admit you're a junior one, we can help you get better. 
No. The code you are writing is setting up any website and any app your hand touches up for complete subjugation by any even remotely interested hacker. I am *not* a hacker but I could undoubtedly own any system you've coded like that in just under thirty seconds. How? For username, use any valid username... I bet you use "admin" as one, so try that. For the password try one of these: ') OR 1=1; ' OR 1=1; " OR 1=1; This is not a joke and I'm not trying to be mean. The chances are one of these, if not another, will work, and any even unmotivated hacker could own your sites in a matter of seconds, trivially. I could probably register with a username of &lt;script&gt;window.location='http://path/to/a/virus&lt;/script&gt; and any time your admin users view my account, their computers could get infected w/ that virus. This is *serious* shit, and you have to swallow your ego, realize you're a noob, learn how to fix it, *fix it immediately*, and then figure out what else you don't know, which is undoubtedly a *whole* lot. you're probably 4-6 years away, experience and knowledge-wise, from being a pro, so stop calling yourself one.
Setting up a fairly complex website won't take a lot of effort. Setting up a fairly complex website _well_ is another matter all together. You can't get to the second part without making multiple attempts at the first. For me, I would say it took a couple of years to become proficient. Even now there are so many more things I could do to improve my code, it just keeps getting better year after year.
Can I make a animated, spinning email .gif with GD?
Cuz the mob here thinks that if you mention PDO you're being a pretentious dick. Why? Because they don't know PDO ;-) It's a vicious cycle.
A year an a half, was doing it as a hobby.
Give them a tutorial on how easy it is to pwn the sites. Usually, they change their priorities really quickly after a brief 5 minute demo.
We use a "form manager" class in our shop so we can do a few extra things (or I guess I should say do things in an easier way): * Add extra attributes like "required" * Pre-populate values on forms (using e.g. $form-&gt;set_field_value("foo","bar") * Pass in arrays of options to selects ($form-&gt;input_select("foo", $values)) At least for forms, PHP handling the html is awesome
PDO is overrated. It is inconsistent and lacking in support for features across the different database drivers. A nice DB wrapper (PDO or otherwise) trumps mastery of native PDO function calls. Besides, there is so much more improvement to gain from knowing your SQL database inside and out and using it to your full advantage.
They are going to be deprecated in PHP 6. Annoying, to say the least...
What program do you enjoy coding in?
I'll definitely give you that. But the point is that no one should still be using mysql*_ functions in 2011, and legacy code should be in the process of being refactored out. And if you're still escaping (or worse! not!) your queries (as opposed to prepared statements), you're doing it *way* wrong.
My HTML class is a simple tool that saves time when generating certain parts of a form. It's also static, and has methods like html::drawSelect('nameAttribute',$optionsArray,$optionalDefault) Its only job is to reduce repetitive typing and looping in places where using native HTML is noticeably more painful. I don't use it to draw standard inputs, but to generate lists of radios, checkboxes and selects it's great.
This sort of thing kills the concept of separating HTML from code, which in turns makes it less flexible. If you want to do templating you pretty much can't.
and you assume inputs arent sanitized because why? your're also an idiot.
Relevant - [Four stages of programming competence](http://devthought.com/blog/general/2009/02/the-four-stages-of-programming-competence/) Seems to be down, [cached version](http://webcache.googleusercontent.com/search?q=cache:GGAUXUha4p0J:devthought.com/blog/general/2009/02/the-four-stages-of-programming-competence/+stages+of+programer+competancy&amp;cd=3&amp;hl=en&amp;ct=clnk&amp;gl=lt)
I like php. I've been forced over the past 4 years to use Classic ASP and vbscript. Been doing some c# for ftp interfaces in the new windows servers, that's fun.
You should be ashamed for being so ignorant. Its built in Joomla CMS for the inputs, good luck getting past Joomlas sanitation. The code above is for a module in zencart, and it has no inputs!! How many noobs are out here? Thinking they know everything but dont know shit. I'll give you a link to the same program on my dev server and lets see how far you get. fucking noobs 
Ive been doing this for 4 years and my roots started in hacking. If you can successfully provide a process to hack this code I would really like to see it. or stop talking shit.
There is one website that I have been to that has (or had) amazing background music. It was http://realultimatepower.net The background music was a midi of Big Pimpin by Jay Z in a loop. Fuckin' hilarious.
lol just reading this again makes me laugh. I gotta swallow my ego, realize im a newb? lol what ego, and i guarantee you can not create a username like that. this is stupid shit because it is not relevant, not true and just plain stupid lol. stupid. im gonna say it again one more time, stupid. Dont assume, stupid, you are bad at assuming. Stupid. I got paid for this shit by the way. lol
 Everyone knows about sql injection. Of course you cannot inject sql into my code, and you have no proof what so ever that you could. If so please simply explain yourself, and I will tell you why you are wrong. How are you going to inject using that code? Downvoted until some real facts come about not just some old man pissed i do shit differently. 
To everyone who thinks they are php masters and talking shit: There is nothing wrong with using this code. -I came here for help because my code was failing to produce an output. I wanted to know why the output failed, not your bullshit info, save it for your own clients. -Some douchebag keeps talking shit because he says my code is hackable, when he only saw this module. If you look at this and think you can hack it, then by all means lets find out. Post the injection, i dont even know how you would accomplish that 
I think question all depends on your definition of "proficient" in terms of what you are trying to accomplish. One could feel like they know PHP pretty well because all they do is create Email form scripts and don't need to use PHP for anything else. Put them in front of some Zend framework code and they'll shit their pants. EDIT: also, forgot to mention, wait for your first (hopefully last) 'Turkish Hakorz p0wn U!' hijack. that will make you feel like quitting for a day or 2.
Who said I was proficient?
literally every point you made is just plain false. bad ugly routes = hey thats not true seo plugin works just fine inline css= hey this shits going on multiple sites, a store site and cms site. i could make a css file and hardcode the link, or just do it inline, you know because that's what you use inline for. It's not formatted properly = got me here, but mostly its only safari not smart enough to pick up on a closing &lt;/p&gt; tag. Because thats the worse that can happen. I should probably fix that You are not escaping the data you get from the database = just wrong, all information is sanitized It should error if there is no $row['testimonial'] = Only approved testimonials appear in the testimonial box bud. and why do you assume that the field would be empty or that it isnt validated? are you stupid? i think so. 
Judging by the up-votes there are many time-travelers from 1999 on this thread now. so "Welcome To the World of Tomorrow!"
I wouldn't consider not having to look up functions in the manual to be a flag for "this guy is good"... but knowing *where* to look does raise that flag.
6-7 years, then I gave up.
The first thing I ever made was a CMS and even after that I felt like I was completely lost and not proficient. It doesnt help that I've overseen large scale development as a Product Manager and know theres a whole world out there far more complex than my stupid comics CMS.
&gt; I started programming in PHP in 1994. typo? 1994? i'm assuming you're buddies with rasmus lerdorf then. php/fi v1.0 became publicly available only in june 1995.
agreed. i seem for forget functions and parameters whenever coming back to php after doing other languages for more than a week.
Half the people at my company do. Probably about 150 people.
I sense sarcasm.
I think the better question is not about how long it takes to become proficient with PHP, but how long it takes to become a good developer. Once you understand and know how to program, the language is, for the most part, just semantics. If you already know how to write good code, you can learn the ins and outs of any language in a relatively short time period, given enough dedication and exposure. It's knowing how to write secure, efficient, good code in the first place that takes the most time.
where is the printer? hooked up to the user's machine, or the webserver itself? 
I am extremely amused by the fact that he wrote "You're" instead of "Your" in the first word of his post, and you wrote "your" instead of "you're" in your second word. Is it THAT hard to try and write proper English when trying to look smarts in teh internets?
Whats wrong with Joomla? Its a great CMS for the client who wants to manage the site themself, and I can write programs they can update from the backend BAM !!! $1200, for coding a custom template, setting up pages, coding custom application, integrate application with back end. Maybe 5-7 days work and 20-30 hours max. So, yes I love Joomla, now if I could only get a steady stream of clients....
in some machine in the lan where the webserver is. in other projects i did this sometimes generating a direct txt output on the browser,and adjusting to the specific printer. sometimes i been told to use some java class who helps to do this. This is a classic topic to php developers. i wonder if in all these years somebody has managed to find the best practice on this. Maybe there is a php class somewhere, maybe some report server (like jasperserver) has solved this. or we are doomed to do custom scripts for every specific printer ?? 
con of the century, proper english = you are smart. oops i didnt capitalize i must be an idiot. 
The animated gif is the puzzle then. yes?
check this out: http://www.sitecrafting.com/blog/printing-dialog/
You may also want to work on your reading comprehension, as that's not what I said.
PHP does seem to be the bastion of self-taught "programmers" who seem more interested in confirmation bias as opposed to actually becoming proficient programmers. EDIT: Not to imply anything is wrong with being self-taught. But if your idea of being self-taught is learning one language (PHP) then ignoring all else, you're not a self-taught programmer. You are a PHP code monkey.
I haven't use codeigniter, but taking a brief look at it the docs, yes I would (for instance I looked at the way they do validation, and they define it for each form, but in lithium it's defined on the model (although you can override / add to that), which means even if you have several forms, it's only defined once, and also if you edit an object by any other means, it's validated. Also their docs don't seem easily browsable. The 'table of contents' has no links, and the search is just a google search of their docs). I reckon that with Lithium it is really clear how to do MVC correctly ... I think that using it will give you a much better handle on MVC (I guess if you've had trouble with it before, just remember to look over your controller code from time to time, asking yourself if you can move any bits to the model?). Any framework is kind of hard to get started, but once you do get started, Lithium is very easy. I think I could take an average programmer, show him around Lithium, and have him building a site in it in an hour or two. Obviously on your own you don't have someone to help you, so it will take a bit longer before you really get going ... but once you're up and away you'll find it is a very fast way to develop. If you download the framework, it has a skeleton app all ready to go, so it's very easy to get going straight away. If you want me to help you get started I'm happy to answer any questions you have.
I started programming PHP when it was on vinyl.
The fact that PHP is inconsistent about naming and the order of parameters doesn't help :(
Why would you ever ever ever allow PHP or any language in your database? Huge security issue there... Either way, to answer your question, you have your parent string wrapped in double quotes, which means any variables inside, php will parse. try... $the_content = '&lt;?php $uniqueASSPid = "' . $uniqueID . '"'; Pretty much the reverse of what you had, single then double. But again, you should re-think your script... injecting this stuff into a database is only asking for trouble.
Amateur! I received it on SW radio in 1942.
I'm not the best programmer in the world but I had a hunch what I was doing was not considered best practice and even dangerous. I assume the best method would be to have classes handle the raw data to build the html, I think I will start over with that in mind. Thanks a lot for your help and also for the heads up.
Zend core code is written in PHP?
Oh my lord. Insulting people makes you so big and clever. Unfortunately I will never be as clever as you because I actually prefer to have working code and easy to maintain styling.
You can foreach over a class by having it implement the Iterator interface.
You know you're a really good programmer when the prospect of dealing with PHP makes you sob quietly.
Its pathetic, its like some sort of ignorant elitism. he made 5 bullet points of speculation and conjecture, none of which was true. He came here to be a dick, and nothing else. I am satisfied with my simple working code. But you fail to see that i have working code and easy to maintain styling. You act as if this is beyond my technical reach because I posted one piece of code. Its really sad I have to resort to insults because people will flat out lie or continue to spew ignorance. 
I would have thought splitting up tables (into shards) is a really bad idea. In theory it does sound good if you take a traditional look at the data and realize that in order to populate a list of your friends it has to look at every row. With indexes this is most certainly not the case. Its first able to query the index, which returns the location of the users friends, and then can look just at those rows to see who their friends are. If you want a really good article on how indexes work Ill send you the link. In theory it does not matter if the table is 1e6 rows or 1e100 rows - it will take roughly (very very small increase as the DB gets larger) the same amount of time to query it for specific data. With redis, what happens if the server/servers are turned off? Hopefully it backs up. MySQL does have a RAM based table type. Im not too sure how it handles backups... I use a mysql table to track voting on my site. When a user votes on an article the vote is stored as such: (userID, articleID). Before they vote it makes sure they have not already voted on the article. Now you would think this table would be very very very huge after a while and very slow, but indexes speeds it up alot. The whole point of all the Databasing software today is so you dont have to build your own from scratch. Chances are, unless you spend the rest of your life coding your own DB, you wont be able to make something "better" then they do. There is improper ways to use the databasing software (when you factor in huge scalability). If there was no index on the table storing votes, and lets say 1e6 rows, it would have to look at every row in the database. This would be slow and a bad use of the software. 
Im not intending this website to become a fully viable product. I was offering this more as a project just to work on for experience / portfolio building / something constructive to do. Maybe even get lucky and have it catch on.
TLDR; Interested in helping in develop this website I made as more of a "learning experience / something to do / whatever you make of it" type project?
Color schemes don't matter when you're simply glancing over the shoulder of your developer friends while he tries to explain complex algorithms in terms you can understand.
about 8 years. //started in 98 ////still learning
lambdas and closure : as you lurk in this subreddit, maybe you read this before maybe not but i found [this post](http://www.reddit.com/r/PHP/comments/ep548/leveraging_php_53s_lambdas_and_closures_becoming/) quite interesting. 
You have to resort to insults, thus you ARE wrong. Everything you wrote now means nothing to me if you cannot be remotely respectful of someone who offers help to you when you ask for it. If you really didn't like what he wrote, then you could of ignored it. On the other hand his comments were reasoned and professional and well in line with my experience of programming. Good luck getting a more help from this community.
The verbose form of variable interpolation `"{$...}"` isn't actually variable interpolation. It's eval. Things like `"{$a = b()}"` will work. Which means it's invoking the PHP parser every time you do that. So if speed matters, don't.
no i meant Zend php framework
I carved my first PHP script in polonium halos at the dawn of time. 
It doesn't look like there is anything in the code to indicate that, but that makes sense. That's why I use Smarty. They have a nice handy built in function for this http://www.smarty.net/docs/en/language.modifier.truncate.tpl Also, you know, separation of content and code logic.
Temporarily change line 35 to: $q = mysql_query($query); echo mysql_error(); return $q; ..and MySQL should tell you what the problem is.
I will never be proficient at PHP, I will continue to suck slightly less at PHP for a long time. 
I suspect your problem lies here: $query = mysql_real_escape_string($query_string); You should be escaping the inputs in a query not the whole query itself. Have a look at the docs for [`mysql_real_escape_string`](http://php.net/manual/en/function.mysql-real-escape-string.php) to see what I mean
Zend engine (and the rest of PHP itself) is written in C which is compiled (via assembly) to native machine code, Zend Framework is written in PHP.
You should check out some of the other available templating engines. Smarty is one of the worst options (in my opinion, of course). * [Twig](http://www.twig-project.org/) - Based on django templates. Pretty nice setup, and its sponsored by Sensio Labs who develop Symfony. * [Savant](http://phpsavant.com/) - Embraces PHP as a templating engine! * [Lithium](http://lithify.me/docs/lithium/template) - Yes this is a framework, but it also has a very powerful templating engine. It uses the same basic concept as Savant (PHP is the templating engine) but takes it a few steps further in my opinion.
[Variable Variables](http://php.net/manual/en/language.variables.variable.php) Although finding a successful use case for this is pretty tricky!
Closure looks like a really bad idea.
I wrote the Continuum prior to this. I thought it into existence with no editor, and interpreted it mentally. You were my first bug, Satan.
I'll check those out. What, may I ask, is your complaints about Smarty? I've been using it for years and rarely run into a problem. Edit: I've started looking into Zend Framework as well. I'm kinda interested in that system.
&gt; How long did it take you to become proficient at PHP? About twelve years. I started seven years ago.
Thanks for the tip, that was the error. :)
Thanks for the tip, that showed that the post below was the error. :)
Loyen, don't delete &gt;=[
This. Its worth checking out all the [Predefined Interfaces](http://www.php.net/manual/en/reserved.interfaces.php), they are pretty helpful sometimes.
Also use it as an array with ArrayAccess and Countable (for count()) interfaces
No, he did not offer any help whatsoever. The person who solved the problem is at the top of the comments. Downvote for you
&gt; No one *should still be using mysql_* functions This is true. But sometimes you can't help it. Currently I am stuck developing for a client running PHP 4.3 and refuses to upgrade. I can't use mysqli_* let alone PDO.
Use single quotes, double quotes allow to embed variables directly into the string: $a = "123"; $b = "000$a"; $c = '000$a'; echo $b; // Outputs "000123" echo $c; // Outputs "000$a"
How are they not?
With a couple of lines of PHP you can assign all the built in functions to variables of the same name allowing you to do things like `"{$time()}` Example: https://github.com/ZaneA/Misc-Hacks/blob/master/phphacks/interpcall.php And a couple of other silly tricks: You can use a scalar value in a foreach loop by casting to an array, such as foreach ((array)$values as $value) { } And you can cast an array as an (object), which means you can access keys as `$arr-&gt;key` There's a shortened ternary operator that seems to go unused which can be useful for assigning variables like so $port = $url-&gt;port ?: '6667'; I tried to use as many "tricks" in my prototyping PHP IRC framework as I could, but probably went a bit overboard in some cases. Regardless it might be interesting to some, https://github.com/ZaneA/ProtoIRC/blob/master/protoirc.php
Wow, this is good to know. What's 'best practice' for putting a variable in a string?
Sorry, why? No idea how to reverse now though.
It's not eval at all and the parsing is done entirely at compile time. Also, your example doesn't parse on my PHP build.
And it's looking like with traits in php, you can easily make a class implement any of those features with just a couple phrases -- something like `uses myArrayInterface`, and then just name the class' array the standard name you used in your trait.
The most annoying thing in the world is when you're stuck on a problem and you google it and the only results that come back are people who've asked the same thing you're asking and you see "nevermind, I figured it out myself" with on explanation of what they did. Deleting your post is worse because then it doesn't even get indexed.
Try assigning a class method to a variable. You can't do it, because it still isn't quite first class.
All of my history with Smarty is with versions 1 and 2. I just looked at the site and they have apparently rewritten it for version 3, so all of my issues may be moot at this point. My main issues with it in the past were it's * Speed. It was noticeably slower than many of the engines I played with. * Syntax. I'm not a fan of curly braces for syntax, especially when its the *same* syntax as PHP plus curly braces. * The code base. It was written in the early days of PHP 4 and up until now had never been rewritten. I like to know how the libraries I'm using work and navigating through the old Smarty code was not fun. * Caching. It "worked", but I never really got it. On top of that, the caching mechanism was not as malleable as I would have liked (block caching instead of whole page was difficult).
I don't have the code with me at this moment, but I wrote a method a few years back that would accept an array of remote files (think images on another server) and would use multi-threaded cURL to download up to 15 files concurrently. I used variable variable names on that one and it worked like a charm (used because you never knew how many cURL threads you had to instantiate, so I did something like $curl$x)
Like, no they really aren't.
The [ternary operator](/http://php.net/manual/en/language.operators.comparison.php): `$action = (empty($_POST['action'])) ? 'default' : $_POST['action'];` `echo "This value is " . ( is_green($var) ? "green" : "blue" ) . ". So there.";`
Four years to learn MVC? Seriously?
Very insightful.
why ?
I remember a post here explaining why sometimes the needle was first, and sometimes the haystack was first ... I can't quite remember it now, though.
Ignore the douche bags, stop being a douche yourself. Problem solved. Also your code is pretty bad, but I wouldn't call it hackable. Who puts HTML directly in PHP when using a CMS these days? Note that I don't mean PHP scripts *at all*, but you're using a CMS. So... use it!
I may be missing the point, but it looks like basically the same thing as just using global. In one the examples from the linked article it shows this: $tx = array_filter($states, function($v) use($st) {return $v==$st;}); Why not just pass $st into the function? 
Because securing mysql_* functions against sql injection is impossible and all...
Most likely because people are *assuming* the inputs aren't sanitized just because he's using the mysql_* functions. Not every project *needs* the complexity added by PDO (albeit not much, but its there).
not really PHP, but simulating a goto: do { if ($test1 == "") { echo 'Test 1 fail!'; break; } if ($test2 == "") { echo 'test 1 was ok, but test 2 failed!'; break; } echo "Everything's OK!"; commitData(); } while (false); 
Try it as `${$a = b()}`. I know it works on 5.3, but I haven't got it installed anywhere to test this with.
php 5.3 has actual goto
If you're using APC, everything I said above is probably pointless. Having said that, I prefer writing things as bare as possible, i.e. `"$a $b[c]"`, or avoiding it entirely and stuffing everything in `[v]sprintf`.
What's APC?
Oh.. right.. Sorry about that. :/
[This](http://www.php.net/manual/en/intro.apc.php). Probably a better idea than micro-optimising code in any case.
I used to use nano, but then on larger projects I realised that I spent a ridiculous amount of time at the command line CDing and LSing around to find the files I wanted to edit. Now I'm using aptana (where I can just click the files I want from the project view). I still use nano for smaller stuff tho', so you can have half an upboat.
I once made a really nice site in Joomla. The client came back telling me I didnt deliver on the "easy to manage, easy to update articles" requirement. The editor is not a WYSIWYG. Linking is a bitch. Just learn php or python and make a web-site in hours, or web-app in a day or two by reusing your code. Then you know exactly how it works and what to change, not having to drill throu obfuscated php in gazillions of extensions just to make a nice site. 
I completely 100% agree with you. I just looked at some code of prepared statements today, and I like it. I'm still learning. This however is just a tiny mod to display testimonials in a scrolling module, that can be placed in the side bar of a cms and zencart store. It links back to a fully secure and compliant cms component. This module was made to read from the database, not insert anything. 
I use Joomla specifically because I can make a website in a matter of hours... Well I have a process where I install a blank installation of joomla with certain components disabled, a blank template, and various third party plugins. The whole process takes 5 mins, and I have a very good set of "reuseable code". I can usually have joomla installed and the template coded from psd in 1-2 hours. I also have "blank component" coded and ready, I can just start coding custom applications immediately. 
You code after you make the template and intstall all the plugins/extensions? Then you must really know Joomla, and the plugins/extensions. Thats great. I just dont have time to learn that, last time I needed to make a change to a photo gallery extensions it was a pure hell, someone called the functions wrong, like getAlbum would return the titles instead on purpose, and there was more code that never executed than did. They did it just to fuck around or prevent anyone from "stealin" their code, there is no other explanation for such bad code. PhocaGallery. 
Lemme guess, you feel your "closures look like a bad idea" was pure insight? Closures are a fundamental backbone in object oriented languages like Javascript, and have many great uses in PHP. Your above comment reeks of amateurism.
Every bit as insightful as the comment it replied to.
I have a feeling that a single array would've been a better solution than umpteen $curl$x vars.
Joomla is a great RAD tool, but it's also a MVC framework. This lets me setup Joomla websites in very little time for clients on a budget, but it also gives me a platform for bigger clients. I've had a couple of entreprise-level Joomla! based websites that took **years** to build.
I like to do `"... {$array['index']} ..."` to simulate interpolation -- I find it more aesthetically pleasing. Should I be closing the quote and concatenating instead?
I suspect you'll spend just long enough learning PHP to learn why you might want to use other languages, like I did. PHP is a wonderful templating language that's been abused to do many things beyond that scope.
Depends if it looks better that way or not. I posted somewhere else in the thread how I usually do it.
Javascript isn't OO. Actionscript and Java are.
&gt; For example, I recently figured out that PHP reads through array keys much faster than array values. This isn't completely obvious how? Its a hash table. Of course you can look things up by key faster. You know why? Precisely _because_ "PHP" doesn't need to "read through" them. lol Where were PHP programmers when God was handing out common sense?
&gt;Javascript isn't OO. Lol. Virtually everything in JS is an object.
I went through this cycle in roughly 2 years. Exactly as you outlined it.
Sounds like one of those decisions made to make things easier for those who write the language rather than the end users of the language. Other languages figure out a way to be consistent :P 
read more usernames
If you do it full time (40+ hrs a week) AND work with people who already know it well that you can learn with/from AND you make it a point to learn (read books, websites, the docs etc.) ~1.5 years
no kidding. we are using COM objects on a couple projects, both home-grown (matlab) and commercial. Automating PowerPoint with PHP is a riot. i also use it as a command line programming language to script file-renames or other things i can't be bothered to learn the windows command shell for
Ah yes, I call this the [Once-In-A-While](http://thedailywtf.com/Comments/Masquerading-as-a-Loop.aspx) fuckup. It's not pretty and can usually be rewritten more cleanly. Also, here's [using a switch](http://forums.thedailywtf.com/forums/p/8156/153204.aspx) for this which only works in PHP afaict.
Meh.
Yup, they even made a helpful function array_flip(). Too bad PHP doesn't expose a fast string hashing function, though.
Top link on Google search for "PHP IPP": http://www.nongnu.org/phpprintipp/ Looks useful.
That compiles to an assignment followed by returning the value of a variable variable. Weird but good to know.
The problem comes around when you ask the question, "Is friend X friends with friend Y" because this requires a lot of table seeking. While the table may be properly indexed, if you have a million followers, you're going to have to seek through a potentially massive table to find the rows you need, indexed or not. By splitting this up into multiple tables/shards, you can seek to find the data you need significantly faster. Redis is a persistent storage system. It saves data to disk in a variety of different ways. The asynchronous snapshot method takes snapshots of the in-memory data and saves it to disk. This is the most efficient way but has the risk of losing a *small* amount of data if the server crashes/goes down. There's also the append-only save mode that appends every write operation to a file on disk, which ensures 100% data durability, but is obviously less efficient. Anyways, like I said before, the site I'm working on is built with *high scaleability* in mind. I honestly doubt that it would ever need these high-performance optimizations anytime soon, but I like to prepare and I like messing around with them anyways for personal enjoyment. Using properly indexed MySQL tables would probably work just fine for me for quite awhile, but if this project does well, I would like to see if I can do a more widespread launch in the future and I like to be prepared. 1 million rows is really nothing for MySQL, I agree. Of course, this depends on whether you are always retrieving data via an index or by a more complicated query, possibly with joins. In defense of MySQL, I wrote a forum system that is now in use on a site with tens of thousands of users and MySQL did just fine for awhile. I added memcache for database query caching later on and it greatly improved the speed of the site, but it really did function just fine with MySQL alone for a long time.
PHP is 16 years old. Using MVC in PHP didn't become commonplace till about 3-4 years ago. Given that OP did not state when he first started working in the language, it's perfectly plausible that he didn't learn of MVC practices for that length of time, especially if he was self-taught.
Wouldn't that be 12 years?
I believe many of those functions were lifted directly from the underlying C API
I went through that minus step 2, never learned CMS. But I did it in 2 years. But then I would scour the full time job boards to see what skills employers are looking for and study and use them.
This is not being developed at a commercial level. This was developed as a group project for a class at college. Im not looking to have this professionally developed. Its going to be more of an "open-source" type project where people work on it, dont get paid, and the site does not profit. I dont want to do "make me the next facebook crap". I was seeing if there was interest to work on this as more of a recreational project. Clearly you did not fully read the my description. This may be partially my fault for not making a TLDR. Please do not look at me as one of those idiotic business speculators wanting to cash in on the social networking craze. I thought this subreddit would be more "friendly" towards users. Clearly I was mistaken and I am glad I have not pursued the field of programming as most programmers I have spoken to seem bitter. As for the web design, that was done solely by my partner. He designed it to run around his computers browser (2009 MBP running at native rez). Clearly he had missed lessons about cross browser /resolutions compatibility. This will probably be the last thread in this section of reddit I will start. PS. Im not bitter, just kinda frustrated. 
&gt;bad ugly routes = hey thats not true seo plugin works just fine They are hard-coded. You really don't understand what's wrong with that? &gt;nline css= hey this shits going on multiple sites, a store site and cms site. i could make a css file and hardcode the link, or just do it inline, you know because that's what you use inline for. In other words, some day some idiot is going to change the joombla theme and this part is going to look out of place. &gt;It's not formatted properly = got me here, but mostly its only safari not smart enough to pick up on a closing &lt;/p&gt; tag. Because thats the worse that can happen. I should probably fix that Safari/Chrome/Android/iPhone/iPad .. they all use different versions of Webkit. They behave slightly differently. And that's just Webkit. &gt;You are not escaping the data you get from the database = just wrong, all information is sanitized No, it's not. Unless you are storing HTML in the database, which would be a semantic crime, it's not sanatized: http://www.w3schools.com/tags/ref_entities.asp http://php.net/manual/en/function.htmlentities.php &gt;Only approved testimonials appear in the testimonial box bud. and why do you assume that the field would be empty or that it isnt validated? I am not assuming it is empty. I am assuming it can be NULL. In general, it's considered good practice to make sure all your views still work with null fields. This way you can update your model, without having to update your viewers. &gt;are you stupid? i think so Could there be a correlation between your social skills and your programming skills?
Ill have to look into this table seeking further. From my understanding an index holds a presorted version of the table (alpha-numeric sorting done on the indexed values). When the index is referenced, rather then reading and comparing each row, a search algorithm is used to find the appropriate location in the index. The only limitation to the speed of the table is the speed at which the search algorithm can operate. What im not sure is what type of algorithm is being used by MySQL but im sure its optimized. Im good friends with a senior oracle admin and he explained to me that a query should never be slow if the database is set up correctly and the appropriate columns are indexed (regardless of the size of the database).
This is interesting. So if I have a header navigation links such as: &lt;ul id="main-nav" class="horizontal-nav"&gt; &lt;li&gt;&lt;a href="index"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="about"&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="../contest/contest-sign-up"&gt;Contests Sign Up&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="calendar"&gt;Calendar&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="contact"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="../idividual/profile-sign-up"&gt;Profile Sign Up&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="../advertiser/advertiser-sign-up"&gt;Advertiser Sign Up&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="../winner/featured-winners"&gt;Featured Winners&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="news-press"&gt;News/Press&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; I would write to the code you wrote above just substitute the controller and actions? And if I wanted to include query-string parameters, how would I implement this? Like this:?? array( 'controller' =&gt; 'Auth', 'action' =&gt; 'login', 'params' =&gt; array('id' =&gt; 1337) ) ??
I see.. this makes sense.
Never is a strong word ;)
Dude. The code above is open to cross-site-scripting attacks. Because you aren't converting the database output to valid HTML characters. Imagine you would get this testimonal: Hello, jeff &lt;script language='javascript'&gt; for(var i=0;i&lt;999;i++) alert('you need to tone it down a notch, kid!); &lt;/script&gt; The javascript code is actually executed everytime somebody sees this testimonial. And considering your code-quality, chances are, it will happen straight in the administrations of your client(s). And those kind of exploits are likely everywhere in your code. The only, and proper way, to make sure you never forget to escape things, is by factoring that code out into a set of functions that you re-use.
The code above is open to cross site scripting. Joombla CMS, likely takes care of escaping it's database-queries. They likely also do proper html-encoding when presenting the data to the user. But you are presenting the data to the user now. And you are not doing it properly. &gt;fucking noobs Noobs? Seriously? You're not in a Call of Duty playing against (other) twelve year olds. You are, appearently, being payed by a confused individual as a programmer. If you don't have the skills, learn. But for the love of god, please, start acting like a professional. Change your tone of voice. If confused about how to act, ask yourself this: "how would a mature person respond?"
Perl in 1994, PHP in 1996.
True. I emailed my friend to get his official take on the matter (not to sound pompous but this question is kinda making me wonder). Ill let you know what his verdict is. Your site design was very nice and elegant. Is it live yet? Also, why 3 semesters (Assuming a term is considered a semester) Masters Thesis / Project? If then, I can see why you opted to build your own data structures (much more impressive then using a relational DB). On an aside, do you hash your users passwords? Whats a good script to accomplish that. I know you can hash in php, but wouldnt it make more sense to have the hash done in java-script (if thats even possible) before it is sent out. Assuming no SSL, hashing server side seems kinda pointless and a waste of CPU (I read about that whole gawker thing so I can understand it from that point of view). Assuming SSL, then hashing seems kinda irrelevant except for the fact that you get an extra layer of security. Just wanting to know what your take on the matter is.
I started in 1996 w/ PHP 2.0.
&gt; he made 5 bullet points of speculation and conjecture, none of which was true. Ehm. No. sorry. All five points are still spot on. &gt;He came here to be a dick, and nothing else No, i came here to point out, that your problem was trivial, and I did actually solve your problem. Then I tried to give you a steam-course in how to keep your code clean and safe, so trivial bugs like this, are trivial to solve. Take a look for example at: &gt;And put logic like this in a function. You may need it more than once, and, that way, it's easy to do some testing with the function. You can make a separate test page, that just asserts the behavior of all your utility functions. That's not me being a dick. That's me being very patient giving you software development 101. &gt;I am satisfied with my simple working code It wasn't working. That's why you were here on Reddit. You did something complicated, to achieve something simple. It didn't work, you asked for help. It wasn't a complicated bug at all. You could have written a unit-test in the same time as posting this on Reddit. And look at the benefits that would have given you: you could re-use your truncate-on-word logic. You could have a simple test, that made it easy to debug. &gt; Its really sad I have to resort to insults because [excuses] You don't have to resort to insults. Think about it. Really, you don't. You can stop being like this, any time. Just try it. Trust me. It's possible. 
How long to be proficient was about 8. I've been doing it for 12 off and on.
&gt; There's a shortened ternary operator that seems to go unused It's [PHP 5.3 only](http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary), which is why it's not widely used.
`&lt;audio src="song.mp3" autoplay="autoplay"&gt;&lt;/audio&gt;` Now with HTML5!
I wasn't assuming that. I was assuming, however, that the people that still use mysql-queries directly, put those queries all over his views, models, and controllers. If that is the case, it's really easy to miss just one place. Somewhere. But as soon as your mind goes to 'hey, i should put all my database access in the same place, and abstract this stuff away' .. then it becomes very easy to switch. Actually, your next thought should be .. 'this is so obvious, there are likely some ready solutions out there' 
For a lot of sites, WordPress is probably a better option. The admin panel is much friendlier for clients, and with the introduction of some newer advanced CMS features (custom taxonomies and post types) you can build pretty much any sort of content site with it.
&gt;, i dont even know how you would accomplish that Yet you talk shit. Here is the most simple example, I could come up with: Hello, Jeff Every time I &lt;p&gt; i think of you. Guess what? This testimonal, that you client will likely approve, will break your site. Because '&lt;' and '&gt;' are characters that should be escaped. I'm not even messing with javascript or unicode here. 
When creating a file that only contains a class or is otherwise all php (no html), always leave off the final ?&gt; tag. The interpreter interprets that php has ended with the end of the file, and you'll never get a "Warning: Cannot modify header information" error because of a trailing line break in one of many include files.
&gt; 'this is so obvious, there are likely some ready solutions out there' I can agree with this 100%. Use Doctrine or Propel or whatever your framework provides, don't reinvent a wheel that has been reinvented and refined over the last decade (just throwing that number out but it's gotta be at least that long). edit: Also I didn't mean you when I said that, I was generally speaking as far as the comments in this post have gone :)
ArrayAccess is one of my favorite PHP features.
Yeah, sort of. Here's an example, but the docs are pretty good too Say we want our url www.example.com/gabba/gerba/herp/234/jerp/678 to look like www.example.com/derp/234/678 we would do this: $route = new Zend_Controller_Router_Route( 'derp/:herp/:jerp', # variables prepend with : array( 'controller' =&gt; 'gabba', 'action' =&gt; 'gerba', 'herp' =&gt; 0, #default 'jerp' =&gt; 0 #default ), array('herp' =&gt; '\d+') # validator - says herp has to be at least one digit, no constraint for jerp ); $router-&gt;addRoute('blerpdeperp', $route); # 'blerpdeperp' is this route's unique label (must be different for each route) Then to access herp or jerp from the url in the controller you do $herp = $this-&gt;_request-&gt;getParam('herp'); $jerp = $this-&gt;_request-&gt;getParam('jerp'); So a url like www.example.com/derp/234/678 would be the same as the zend url: www.example.com/gabba/gerba/herp/234/jerp/678 or as a traditinoal php url: www.example.com?controller=gabba&amp;action=gerba&amp;herp=234&amp;derp=678
This is an awesome example. I will need some time for it to sink. Thanks!
Using constants for configuration? Easily set some defaults! !defined('OPTION') or define('OPTION', 'default value');
Such a simple thing, but so damn handy, especially in views.
and so we use setParam to set herp to 234 and derp to 678? 
Right, I think the reason it seems a little confusing to you at the moment is that you are essentially only doing a couple of the actions right now. Think "CRUD" - Create, Read, Update, Delete. You want to do almost all of these types of actions for each database object right? Add an advertiser via a form, update it, delete it, view (read) it? The same for news items? The same for calendar items? The same for users? These types of things should be the basis for your models and controllers. You have have more or less on each side, but it will be something like this.
you just put them in the url however you like. I've never used a method called setParam if there is one, I just put the vars in the url when constructing it whether just echoing them straight into the href or with the url view helper.
So if I'm reading this correctly 'derp' is like the alias for the controller, action and query string variables thus: www.example.com/derp/234/678 representing: www.example.com/gabba/gerba/herp/234/jerp/678 correct?
Yes absolutely. I should have put what the route was describing. I like the route implementation in zend. 
I just edited it for formatting and to make it more clear.
Nice! Are you a guy or a girl- I almost said 'really nice Bro!' but I did not want to offend anyone.. Nonetheless, this is really cool I understand it. I'm developing a web application where there will be profile created like facebook and this url routing will make more sense of it. I guess the next step would be tying it with a database to get the appropriate url such as www.domainname.com/coke/number-1-contest Nonetheless. Thanks!!!!!!
derp is just an arbitrary word you want your url to look like, it will cause problems if you have a controller called derp and use this example.
Good to know. One more question, where do I put this code? In the bootstrap? 
Here's an example of it in a bootstrap (as set up with the zend tool) http://www.reddit.com/r/PHP/comments/epr97/when_to_use_a_new_controller/c19zo3h
I was looking at some your questions. I was once dating a Swiss girl and what they wanted from the US are things that are like themed. Elvis, famous highway Route 66, Baywatch- apparently they still show it a lot over there, movie related paraphernalia.. Germany is pretty advanced so it would have to be US culture related. Oh man, the beer is awesome! the best i've had- real beergarten!
Thanks! I'm going to apply this now.
Either that or [escape everything](http://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.double)... 
Does it handle form processing and validation, or just drawing?
haha that thing with the turkish hackers happened to me last month... Learn PHP and use an existing framework (Drupal, CodeIgniter, etc). Don't start from scratch. Why reinvent the wheel. Just try to understand what others have done. Dig in their code. You can build immediately, and work toward understanding as you go.
Nope wrong again, you would not be able to enter any javascript it would get stripped, that's a no brainer. You have no idea
once again that is wrong and you have no proof. *sigh*
Ah okay good to know, thank you :)
I feel like I could fix tht in 5-10 mins, but you make it sound like the code is completely unusable and I disagree. Everyone admits to a learning process and mine just got shat on by redditt. I turn 21 next month, I have all the time in the world to practice, experiment and learn, while being paid for it. I plan on keepin' on.
[There is **no significant performance difference** between using curlies and not using curlies](http://www.reddit.com/r/PHP/comments/emcvg/til_php_treats_double_quoted_string_and_single/c197e0u). Link to post containing a benchmark I performed last week when someone made another "I heard that..." performance claim about string concats. **Never** trust someone on the internet when they say a particular method is slow. Test it yourself to make sure.
To really grok closures, you should probably look through JQuery's source, or some other sufficiently interesting JavaScript code. They are indeed quite useful. Also, they have nothing to do with globals. You just looked at some bad example usages, which is easy to do with PHP, unfortunately.
Yes, but even if you have a fast enought response time you would still notice a 200ms+ pause in the music while the new page loads: &gt; It's not perfect, there is a short gap
LOL! You could have just told me it was prototype-based instead of class. Everyone I've talked to says it's functional. 
Oh no, a downvote. That must make you really important, in addition to your talent for insulting people. I think I'm done on this thread.
This isn't college out here, dude. The majority of us code for $$ and have heard "hey let's make another social network" so many times we never want to hear it again unless you have a fat wad of cash. I don't see anything original or worth anyones time when it comes to this project, paid or unpaid. Also don't take your frustrations out on me. I gave you an honest opinion of your project. If you don't like my opinion counter back with something that isn't condescending or ignore it. Insulting my intelligence with things like the TL:DR comment don't make you look like the kind of person I'd ever want to work for or with. We're not friendly in here? We're bitter? This is your first post in here and you've already got some kind of attitude. I've gotten advice and given advice on this Reddit for awhile (another account) and I've met mainly friendly, smart programmers here. Read the reddit before you post next time, this is more of a help/tricks kind of place. I hope this is your last post in here if you're going to be a dick about not getting what you want.
Why is God handing out common sense? Thought that was Santa's job.
I'm a fan of [array concatenation](http://www.google.com/search?q=php+array+concatenation): function my_function(array $settings = array()) { $settings += array( 'do_that' =&gt; true, 'lets_not_do_that' =&gt; true, 'do_dance' =&gt; false, ); // Or $settings = $settings + array(); } my_function(array('do_dance' =&gt; true)); This will copy the key/ value pairs from `array 2` into `array 1`, but won't merge. So if a key exists in `array 1`, `array 2`'s will be ignored. It's like a simpler and cleaner `array_merge()` (though not a real replacement, since it doesn't actually *merge*).
no problem, glad i could help.
You know, I really really really just hate Magento. Nothing personal mind you.
This speaks to my heart.
&gt;Everyone I've talked to says it's functional. People talk to
Well, our office is on the second floor a good distance from the canteen *and* we have solid double glazing and good heavy wooden doors. Even still, I've *never* used goto since my ZX Spectrum BASIC days. Even the BBC Micro had procedures.
May I ask why? Also, do you know any alternatives that are on par with Magento?
Yeah I agree. It's lolfunctionality, may as well be in an esoteric language. Might come in if you are stuck applying duct tape fixes to some 6 year old app that barely works though...
[The streams API](http://www.reddit.com/r/PHP/comments/em7xe/most_secure_way_of_performing_functions_mostly/c199tjp).
I used to hate it, I really like it now, it's a little overly fragmented but the system on the whole is quite well architected, compared to CubeCart and stuff like that. I think its the 'least bad' option anyhow. Robin
I was frustrated that I had to repeat myself about the purpose so many times when it was in my description. I did not like being seen as the idiotic entrepreneur that wants to start a social network website b/c he sees it as a get rich quick skeam. I thought this place would be more open to community projects. Sorry to come off sounding like dick but I have two finals today and I was kinda tired last night. I'm not upset over the non-interest. I'm a hobbyist programmer and I thought I would find others here. I can see now that this is the wrong forum as its mostly commercial programmers giving each other tips. Maybe you could point me in a better direction. And.... I just realized your account name "Live2Troll". 
I got a response from my DB admin friend. "Such is the way Google tries to resolve search results in that they have large numbers of database servers with each one either with specific pieces of the whole table or the data is evenly distributed across all. Either way, if you are doing this you are normally trying to solve massively large problems NOT trying figure out what trades haven't been cleared. Unless the person you were discussing this with works for Google or another such employer then its not a practical nor performance improving technique when dealing with 99.9999999% of the environments out there. Those who would advocate it for all environments are those that can't optimize a query for their life, as I can easily outperform any purported boost in performance using sharding with properly looking up data." From my view - It looks like sharding does have a purpose when it comes to physically large sets of data. If a table was lets say, 500 TB (storeing images?), then sharding would be much more practical then server replication, as that would get extremely costly (to have multiple servers, each with 500TB of storage). For something like a friends table, I don't really see it becoming that big. Even if it was a couple of GB's for a place like twitter, that would surprise me. It would also make me wonder what they are doing wrong.
Everything you wrote means nothing to me
&gt;Things like "{$a = b()}" will work. Um, no they don't.
pico and nano are crutches and not quite ubiquitous. Vi/m is always available, so it's worth learning.
Simple Boolean attribution: $a = ($c &gt; $b &amp;&amp; $d === 'foo');
&gt; a file that only contains a class or is otherwise all php Why? It works if it has html, too.
PHP was my 7th language, and I was proficient in a week. However you need to realize that it's not just php you need to learn, but HTML/CSS Javascript, SQL and various programming concepts needed to do web programming. 
I find I have more control and capability to customize joomla. Wordpress is good for blogs that's it. 
I posted this in a comment on the post as well as the submission on magento this user submitted yesterday here. Please don't follow the instructions in this post! You will break your upgrade path by editing anything in app/code/core. It's not hard to do this the correct way by setting up a module in app/code/local and rewriting the core module to your local version that extends the original core class. Here's more info on how to do it: http://www.magentocommerce.com/knowledge-base/entry/magento-for-dev-part-1-introduction-to-magento
The site is live, but registration is currently restricted to students at my college. It's actually an undergraduate project we have at my college called the Major Qualifying Project (MQP). Every senior has to do a large project in their major that does research or work in relatively new territory. We're actually on the quarter system, so 3 terms = 3/4 of a school year. Right now I just sha1() the passwords. For my purposes, it should be safe, but if you really want to make sure the passwords are secure, I would look into how Wordpress does it since they do a great job of securing them. Hashing the password in Javascript is an *awful* idea (no offense). You should never, ever, ever do anything security related in Javascript. JS is client-side, which means it can always be tampered with or circumvented. Hashing algorithms are really fast anyways, so it's not like you're wasting precious CPU time doing it in PHP. Doing it in PHP also hides which hashing algorithm is used, which makes it more difficult for hackers in the event that they're able to extract some info from your database. At TwitPic, we even md5 photos that are uploaded to see if the user has uploaded a duplicate photo, and that's a pretty fast operation. SSL is important for sending the non-hashed passwords to the server because it prevents middleman attacks, and hashing is important for storing the passwords for future logins. If you don't hash the passwords, then you're making a hackers job way too easy.
What if this site gets popular? You will need money to rent new servers and stuff. I mean, I want you to think how "non-profit" (really) you think this project can be. However I think it is a great opportunity for programmers to add something to their portfolio. 
 defined('OPTION') or define('OPTION', 'default value'); FTFY
indeed, here is an other exemple : http://php.net/manual/en/functions.anonymous.php
Oops! Thanks for catching it.
I love this stuff! $html = include('template://view.html'); Runs 'view.html' through my templating engine :D
Note that === is a type-strict comparator.
Common sense was destroyed in the big bang.
I love this, except it was confusing at the beginning. A + B is like array_merge(b, a)
It certainly also works for files with html. I am just in the habit of not doing it in files with html because if there's html, you're going to have output that would cause the header error before the trailing white space anyways. Also, I find that view files with php and html are tidier with all ending tags in place since my brain is in html context when editing and will be confused with the php syntax errors if I start from the end of the file.
Most complaints Ive seen about Joomla come from one of two types of people, clients who had a joomla site built very poorly, or junior developers who aren't really proficient programmers. The clients complain the site is difficult to use, because the developer did a poor job preparing the site. Or, the developer complains because he cant do something right out of the box, but noob cms 2.0 does it all on one page with big shiny buttons. The junior developers do not realize how easy it is to customize, and how quickly you can build a library of reusable code (blank templates, blank components, etc) 
Closures are a bad idea right now because there is a bug in the hash table used to store references. You can't rely on "use" by reference to maintain it's reference. Wait until this bug is fixed before using or you might get craaaazy results!
Forgot link: http://bugs.php.net/search.php?cmd=display&amp;search_for=Reference+closure&amp;x=2&amp;y=5
That's just alternative syntax and is always supported.
thanks.
I did not do the front end. I will be redoing it over time. It was made to fit at a certain screen rez.
Thanks for the info.
"# why should I have to use a template engine # combining the tables (temporary tables)" You have to explain these to me. Combining the tables sounds like a bad idea. If you need source code I can send you some of mine. Its really really really poorly coded. I was kinda thinking like a BASIC programmer when i wrote it. It was my first time doing any serious development in any language. If you just want specific suggestions / code snippits ill gladly answer any questions. You seemed to have attracted all of the trolls on your reddit post too. Shoot me an email - landtax@gmail.com 
No, concatenating is slower.
Array_merge() is **not** the same thing. Array merge will take two arrays and append them to each other. Adding two arrays (A+B) will simply fill the missing slots with values from array B.
foreach(explode(' ', 'first_name last_name address city zip country') as $field) $$field = trim($_POST[$field]); That catches a bunch of form fields and sets variables for them.
ah, your talking about joins. Not really what I would consider a temporary table (they kinda teach it that way though). I thought you might have been using CREATE table statments, loading it up with data, querying it, and then deleting it. That would just be insane. Im IT that likes php, not even close to a professional programmer. 
And it's about as secure as having a big textbox on your site that is then eval()'d, along with full FTP and MySQL credentials and a &lt;h1&gt;'d, &lt;blink&gt;'d block of text that says hack me if you dare ;)
Magento is horribly over-engineered. Things are way way too complex. Simple changes, like the one linked, require you to edit multiple files in many deeply-nested directories and reverse engineer API documentation. It's just a terrible mess of spaghetti code and slowness.
Magento is great when looking at the features and developing it, but in production it is bloated. It is slow and resource hungry. Two of the biggest strikes against it are a proper admin user access system (only available in the paid version) and it lacks a non-javascript checkout (technology shouldn't be a limiting factor in getting more business). Prestashop is lighter and better (it also lacks a non-javascript checkout). There are some cases where Magento is a good solution, like running multiple stores but for most users there are better solutions. If you are a small-large corporate business, you should look at IBM WebSphere (paid) or Apache Ofbiz (open source). Small businesses should look at the various hosted options, Prestashop, or Ubercart. Spree Commerce is another promising solution, but I haven't used it enough to say anything about it. If you have a good developer Interchange (icdevgroup) is another good option. Everyone should say no to the mess that is osCommerce.
You can't compare an ecommerce system to something like CubeCart. Take a look at some of the other ecommerce systems out there and you will be pleasantly surprised.
To be honest I've only tried Zen Cart and OSCommerce and both where crappy, but maybe they're better now.
First thing you should do is buy a domain name. Next, any cheap or mostly free service would be best while you're selling the idea around. Although it's occasionally just fine hosting the website out of any old, rickety PC stored in your basement (which I'm guessing is the current case), it would be a better idea still to rent a hosting service - but only if they provide for at least Mysql 5.1+ and PHP5.3.3+ (yeah I know even PHP5.2+ is asking for a lot from a host most of the time). As is, your current ISP seems uncooperative and would be the worst spot to serve through: your server is unreachable, and since you're not serving through port 80, I'm guessing they block all incoming traffic to any http port. Your code link is down. You should throw it all on a repository service, like google code or github.
Ruby helped me a lot with understanding closures. 
This is only slightly better than register globals. Please don't do this. 
Yeah? How would you abuse this, exactly?
I'm guessing the other way would be to do $first_name = trim($_POST['first_name']); $last_name = trim($_POST['last_name']); $address = trim($_POST['address']); $city = trim($_POST['city']); $zip = trim($_POST['zip']); $country = trim($_POST['country']); But IMO there is no real difference here.. except this is longer. What better/safer ways are there to set form values to variables?
Currently hosted on a dell laptop using win 2k3 and IIS. I have a real server (dual CPU xenon w/ 2 gig of ram) but its way too power hungry. It would be more effective for me to buy hosting then to host it myself. I have not tried port 80, but i heard cable-vision blocks that. I plan on getting an actual domain name and possibly hosting through go-daddy. They are fairly cheep. The tinyurl link should be working fine. If not http://24.184.112.63:5690 . Unfortunately my ip is dynamic but it only changes when the modem resets due to a power outage. Before I post the code i need to clean it up alot. Kinda embarrassingly messy. It will eventually go on a repository. 
I've put a lot of hard work into this and, while I'm sure it's not perfect, am glad to hear you're interested and actually hope people find bugs so they can be fixed allowing the script to get better over time.
No problem, we were all there once :) I'm not sure what your script does but yes you should have classes or whatever you wish to handle the logic of your script.... if you needs any more help, feel free to message me.
When clicking on the left side of a full size pic I was expecting going back to the previous pic, not forward. You know, clicking left side of pic is back, right side of pic is forward. Just an initial thought I had when trying out the demo.
Works well, looks nice, very good job.
I considered that myself, but I'm using [Colorbox](http://colorpowered.com/colorbox/) to power the popup images, so I'm at their mercy unless I want to change things (and I'm not THAT good with Javascript/jQuery). Definitely something I'll keep in mind for future releases though.
That's kinda what I thought after looking at this more. Really closure is more or less deals with scope for functions. It's actually something I use all the time in JS/jQuery I just always call them anonymous functions. I should have been more specific, the use of the "use" function looks like a bad idea.
[WP Vote](http://wpvote.com/) and [CSS Remix](http://cssremix.com/) disagree with you. They're both WordPress sites.
A quick glance through their stock examples doesn't seem to include this kind of functionality, but Colorbox is actually quite easy to manipulate and style. It shouldn't be that difficult to adjust the CSS so the "next" and "previous" links cover 50% of the image -- or, if necessary, create your own controls and use some extra jQuery to add the necessary event bindings.
I see. Arrow keys worked though! Firefox/mac. Overall, I like it -- felt snappy and light.
Okay but whats the point? They are doing it backwards, like me trying to customize joomla for blogging. Same with what they are doing, customizing blog software to use it as a cms. But you dont have to customize joomla to use it as a cms, just a template.
Not going to lie, I looked at every picture in the demo. 
If someone sent false POST info they could literally change/create any variable they wanted.
...and Linux, and Solaris.
Latest version of OpenSUSE 11.3 here, neither pico nor nano are installed by default. SUSE has been this way for as long as I can remember..
I think that Netbeans has complete support for Symfony and a plugin that supports a vim syntax and code completion. I use Symfony, Propel, Netbeans and Vim quite often for my projects. In my opinion you don't need to compromise at all.
Nice and clean. It's definitely hard to find easy, clean, and non-cluttered photo galleries out there these days. Code looks clean too, nice use of OOP. Good job!
I'm not going to argue with you on the slowness, but I don't think it's spaghetti code once you've figured it out. The best comparison is that it's architected like a java framework with copious amounts of xml configuration and loads of modularity. If you have strong opinions against that, I'm not going to argue with you there either. Oh, and it doesn't help that the documentation SUCKS. I've been working on some notes for training other devs I work with and have been contemplating making a blog out of it. If there's anyone with a troubling topic that wants me to write a tutorial, let me know and I'll see what I can do.
[Yep](http://www.php.net/ldap_bind "Google is your friend")
Thanks! Clean and simple were my goal. It does have some flexibility to it, too.
Decentralized version control is where it's at. Git FTW.
"...and output standards complaint XHTML markup..." Yeah, XHTML can be a real pain like that.
LDAP in PHP is fairly easy to work with. Others have provided links to use. When querying AD with PHP, some attributes are dynamically generated, so they won't be available to PHP, such as the canonicalName attribute. Conversions using the distinguishedName attribute can be done. I work for a company that does AD synchronizations with various information systems (Oracle, Peoplesoft, Powerschool, etc.). We use a software called [UMRA](http://www.tools4ever.com/products/user-management-resource-administrator/). It has some nice features and can be easy to work with. The pricing is based on a per-user license for an OU or domain (or multiple). I don't plug my company's software all the time, so please don't think I'm trying to make any sales. It just does what you want and might make your job easier.
I don't follow... how is it a pain?
Did you steal facebook's loading icon? Prob not a good idea.
I'm not on Facebook, so I wouldn't know, but I got it from [here](http://ajaxload.info/).
Well closures aren't just anonymous functions. The "use" keyword is kinda the whole point. I actually like that explicit list a bit more than the JavaScript closure implementation that uses all in-scope variables by default.
Yes, but also, setting up a complex website that in 2 years you can come back to it and it's maintainable.
I'd say! Zend Engine looks like jibberish to me :P Most C code is extremely obfuscated to the none C Coder, C++ is even worse with some people taking operator overloading to the extreme. Zend Framework is not really difficult, it just takes a bit if time. If you are not an already experienced programmer and have some fundamental understanding of polymorphism then you will find Zend Framework extremely difficult to grasp.
... "complaint" Just making light of a spelling error on your homepage, line 70, column 93.
My company has a few dozen isolated databases containing same employee information. Cross communication on any level between any of these databases is absolutely prohibited without a Director's signoff. I've been yelled at a few times for making my own bridge between a few of them. I mean hey, do they really want that guy that's just been fired to be called up at home six months down the road in the middle of the night to approve a major production order? I guess so.
What do you think an exception is? Essentially a Goto statement.
I think Magento is the best php / open source ecommerce available at the moment. You can easily set up a small store. I run three of them on a cheap dedicated server and with memcached, opcode cache and propre mysql configuration you have very good perfomance. What I like the most is the solid administration (design and usability), Prestashop is a joke on this side. Otherwise it's true that it's fragmented. The installation sucks a bit (why trying to create 320 tables in one script ??). The Wiki sucks for the large part, the community is ok. But remember it's free and open source ! For the amount of money they ask for the commercial editions, I must say that I would look at others solutions if I decided to take this route. Oh and why you can't delete an order is beyond me. It makes me kill kittens.
Do you mean if when the variables in `use` are themselves references, that when `used` their reference state is then destroyed in current scope? I'm not sure I understand the bug.
if you have &lt;?= ?&gt; in your code and it works, php short tags is turned on period. lithium does not manually parse these and if it does will substantially slow down your code, it might check to see if short tags are enabled and might actually replace all &lt;?= with &lt;?php echo and then run an eval which is scary as all hell to do.
Uh, no, the only thing it does is set variables for those posted fields I'm checking for (first_name etc). It's not exactly an extract($_POST); - that would do what you said.
Nope, you're wrong ... http://lithify.me/docs/lithium/template
&gt;Actually I think Lithium is written by the same guys as Cake was. You think??? You've made a god damn powerpoint slide to promote it and you don't even know it is actually cake3? Also, other frameworks will pop up for 5.3 (e.g. Symfony2), it just takes time (there are still people that are scared to move from php4 /sigh)
Nice clean code, Just got to watch spelling. * UberGallery.php line 78. "plase" * UberGallery.php line 121. "cahe" and "plase". * Comment on UberGallery.php line 350. "thumnail" Also why have a destructor method if it is not needed/used? 
&gt; Also, other frameworks will pop up for 5.3 You think??? Yes it does take time, but Lithium is here now, and it's not a 5.2 (or earlier) framework that has been update to 5.3, it's been written from the ground up for 5.3. As for making a "powerpoint slide to promote it" ... obviously if I don't even know it's cake 3, then I am not likely to be some guy who has a vested interest or is out to promote it for any other reason than I think it's awesome. Stevenmc asked me a question and I did my best to answer it. That's what reddit is supposed to be about. But look, why don't you tell me about your favourite framework, and how it is better than Lithium. I am genuinely interested.
I never really had to learn too much of the vim syntax, because I mostly develop on windows. I really needed it only when sshing to our production servers. Where is it that you find Vim to be of the most use in your work?
Ah sorry, nevermind. Personally though, I would do $form['first_name'] and such instead of $first_name.
good job! this is great if one needed to throw a gallery up without spending a lot of time.
I love it, nice gallery dude
Nice clean OOP code. Looks good! On small thing.. I installed it on my local machine and dumped 1664 images into the gallery-images directory and got this Fatal error: Maximum execution time of 60 seconds exceeded Which I can understand. Generating that many thumbnails is going to take a while. Why not compare the cache directory and the images directory and if the thumbnail generation is going to take a while present a message to the user. You could generate the thumbnails in batches of 5 (for example) and update the page while generation is happening with AJAX. Another technique you could use: With an .htaccess rule. If /resources/cache/100-my_image.png is requested and exists then return the thumbnail. If the file doesn't exist then create the thumbnail and put it in that location. Also, you could try to unslugify the image file names for the alt tags so "my_cute_kitten.png" has an alt tag of "My Cute Kitten". As I said above, this looks really good and I can't wait to see what you do with it. I'm now watching this project on GitHub. (Ps. Love the way you crop and scale images rather than just scale them.)
 &gt; great 5 years ago That's far too generous.
That can be hard to work with if the management doesn't understand the benefits of having a streamlined system. One thing about using consultants rather than employees is the consulting company will still be there after the job is finished. We are used as the sole developers for many companies and school districts synchronizations. The customer either doesn't have the time or the desire to do what we do. Other times our customers want to know how to built their own scripts, so we teach them. The good thing is that even if the customer builds a very complex script, it's easy for me to see what it's doing. As for those special systems that the director protects, we would often ask for a view to be generated by the DBA, then we would create a staging database to synchronize with (if we needed to). If the view doesn't contain OU mappings for things like job roles or locations, then we might create a table in our own database for mappings. We also create logging tables. This might be the case for hosted systems (Powerschool hosted) or finance systems. Sometimes it can take 6 months to get the proper permission.
Is it the one that says facebook (bottom one)? :P Probably doesn't matter anyway.
can users rate or sort the pictures?
[complaint](http://www.google.com/search?q=complaint+&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a) seems right to me.
EXACTLY! No need to fuddle with a database and very simple to configure.
Thanks! Glad you like it.
Good job, forking on github to add some features, watch for my pull request.
Rating and sorting by the user is not a feature. In the future users being able to sort the images might be useful, but I don't want to complicate the gallery with something like a rating system. Not to mention how difficult/convoluted that could get without a database.
Thanks for the spelling corrections (I'm not the greatest speller). And I was going to use the destructor method at one point but never did, so I should probably just toss it as it is unnecessary.
HA, yeah! Now that you mention it I see that it does say Facebook on hover.
Awesome! I &lt;3 Github!
Seems like background-color is only set for the body element, not the html. This causes a white background in some browsers where the body ends, such as in Chromium. 
Thank you, this is the kind of bug reports I like to see. I will definitely be doing something about this with an update. &gt; Love the way you crop and scale images rather than just scale them I hate programs that don't keep aspect ratio of cropped images.
Odd. That's not the way a browser is supposed to behave, but I understand what you mean. Will fix this with the next release.
That's the word complaint, you want compliant.
Ah, yes. Suddenly it all makes sense. Thanks.
Just use phpMyAdmin.
I work as a web developer. I rarely use mysql command line. Work smarter, not harder. That said. Have you tried visiting the path to the executable? /Applications/XAMPP/xamppfiles/bin/mysql -u root -p
Never used MySQL cli on windows, mysql administrator is a pretty good app for interacting with MySQL, as well as mysql query browser. http://dev.mysql.com/doc/administrator/en/ http://dev.mysql.com/doc/query-browser/en/index.html
I've not used it on osx but for windows and linux/bsd I just type: mysql -uUSERNAME -p 
Can you read? please just read this and tell me why I'm wrong: **bad ugly routes** - cms handles seo, seo links change, hardcoded links always work and url is converted by cms automatically. if i hardcode the seo link, the seo link will need to be updated on all sites if the link were to change. but using the ugly link, it will never change. The cms will always route it to the proper component and **convert the link to seo url**. **inline css inside module** - not much different then linking to a css sheet, not that big of an issue. I am a CSS expert, I don't need help with doing it properly. **The inline css used will not affect the template at all**. The module is not supposed to change size, and all inline css are contained inside the module **Error if there is no testimonies** - it will just echo a blank space not an error. If the field in the table is empty and i echo the result then it will simply what is in the field will appear - nothing. The system is designed so that the testimonial field must be filled out to enter, this couldn't feasibly happen **format** It is formatted correctly, you cannot determine the format from the code above. **It wont do what I want to do if there is no spaces **- It also wont work if i save the code as a jpg file, whats your point? nobody would type sentences without spaces, I'm not worried about it. Your just bringing up whatever point you can bullshit and sound smart. Its socially acceptable to be angry after repeating myself many many times. You are wrong
I've work as a web-dev for several years too, but do a lot of work on the terminal. For anything moderately complex I use mysql workbench though.
When I'm running OSX, I use [this](http://www.sequelpro.com). I've got one of the designers I work with using it and he's using XAMPP, I think. You can run SQL statements directly from inside it as well.
I'm not sure which one - but one of these has a menu option (under tools?) to launch the command line tool. Having said that, I find phpmyadmin to meet most if not all of my needs.
...and [add the path to your PATH environment variable](http://www.sweeting.org/mark/blog/2008/05/26/mac-os-x-tip-setting-path-environment-variables) so you don't need to type the whole thing.
**bady ugly routes** You don't hardcode the SEO link either. You don't hardcode the link in your viewer. Ever. You put the logic that creates the url _out of the viewer_. Imagine you want to have the testimonals be part of another view. Wouldn't it be great if that kind of view would work? With this setup you have copy &amp; paste. What if you want to separate testimonals per product group. It shouldn't change the viewer. A viewer is a think that takes a model and displays it. It doesn't fetch the model from the database itself. It doesn't create it's own urls. Otherwise you can't even re-use it. Not even in the same project. **inline css inside module** &gt; I am a CSS expert, I don't need help with doing it properly. I don't know how you check for compatibility with IE6, IE7, IE8, IE9, Firefox3, Firefox4, Opera, Android, iPhone, Safari. But I can tell you this much. The height of each testimonal will be different in certain browsers. Not just that, but people can do control+plus and change the font-size, many older people do, because they can't see that good anymore. There you go with your fixed size height. Some browser zoom everything, some just the text. Some mobile phones zoom down by default. the iPad zooms up by default, because of the high DPI. So, you being an CSS expert and all. Tell me: why are you using a fixed size height, for content that isn't fixed in height? I'm not an expert. There are very few CSS experts out there. Getting it completely right, for all browsers, and fall-down correctly for older browsers, is _hard_. Making sure people with disabilities can still use your site; it's hard. That goes quite beyond just knowing the difference between the box-model in IE6 and more modern browsers. (just for your information, in IE6 the paddings are assumed to be part of the height, not so in IE7, IE8, Firefox, Safari, etc. which may also break your inline-height code). Finally, i would like to mention it _is_ very easy to break this using the theme template. "body { font-size: 200% }" should prove my point. &gt;Error if there is no testimonies - it will just echo a blank space not an error. Sure. But it hurts re-usability. Unless you consider control+c control+v re-usability. It's good practice (like I said before; oh dear, i am repeating myself!) to make sure your viewer never breaks. This way you can make changes to your model, and not have to worry about debugging the viewer again. **format** &gt;format It is formatted correctly, you cannot determine the format from the code above. Well, i assumed you copied &amp; paste your code. I mean, you didn't type it over, right? Oh, and you forgot to close a tag. **It wont do what I want to do if there is no spaces** &gt;It also wont work if i save the code as a jpg file, whats your point? This was about the actual bug you had. The one you wanted help with. The one many people here fixed for you. Didn't you fix this bug? So, how come, when I describe your bug, you didn't recognize it as such? Did you just copied &amp; paste code from somebody else here? Without any conceptual understanding? :-) Hey, it works now! Wonder why? **How to properly maintain yourself** &gt;Its socially acceptable to be angry after repeating myself many many times. You are wrong First of all you are confusing being angry, with being mean and immature. You also didn't repeat yourself many many times, before you started to act mean. You are not angry because you repeated yourself. You were asking for help. I didn't rape you or anything. Your emotions are not about you 'having to explain yourself over and over again'. They are about your ego. Come on, be honest. Finally, if what you say is true, why am I still patient? Why am I still talking to you? What do I care? Perhaps, and this may be something to think about, getting really skilled in something, requires patience. You may want to work on that. As for me trying to be smart. The masses have moved on. It's just you and me now. And to prove that I mean it all well: Try to look into, one of the most used design patterns in web development. The model-viewer-controller: http://en.wikipedia.org/wiki/Model%E2%80%93View%E2%80%93Controller You may notice that, hey-that's-many-of-the-projects are structured. Not all of them, and definately not in the PHP world, because well, there are a lot of junior php programmers. These design patterns are not always perfects fits. But they are the result of years of experience, and they make your code organisation predictable. That means, you it's easy to collaborate and work on code in teams. Here's a good CSS article that does a helicopter view about the design choices these days, when dealing with all these different devices, with different resolutions: http://www.smashingmagazine.com/2009/06/02/fixed-vs-fluid-vs-elastic-layout-whats-the-right-one-for-you/ Many clients may not even consider it, but their site likely sucks on an iPhone. Perhaps even an iPad. Some of them will be understanding, knowing it's hard to support everything. Others will just get angry. We can't all mature off course. What they really need from you, is that you guide them through these choices. And for that to be possible, you have to know all these choices. You have to be willing to learn. I still learn knew things every day. This whole i'm-an-expert-mentality, at your age. That mentality is actually preventing you from becoming an actual expert at what you do. If you just keep your head low, assume you don't know everything. Keep learning. Some day you'll look back and think 'maybe I was an expert back then'. 