The code snippet OP included in the post shows a (poorly implemented) DDD repository that uses the Doctrine EM as its data storage mechanism.
Because (1) I typically uppercase globals, and (2) you only have to type them once.
I don't feel like learning several different codebases for software I don't really use. 
Endless loop; segfault; out of memory. 
Mostly for being too busy working on closed source stuff. My own personal project, and stuff that people are paying me money to do on the side, and stuff for work.
Communities make or break an OSS project. I stopped contributing to projects a few years back for two reasons: - Good programmers can be poor leaders. It's very easy for a community to go toxic, either from the personalities of the developers or because of a laissez faire attitude toward conflict management. - The user base of a project, especially when it trends more toward non-developers, can be downright ungrateful and demanding. I don't know how many times I've seen a user pull some variation of "the customer is always right" and threaten to go to some other project if they didn't get some (usually niche) feature developed.
Fear.
You can always describe your desired solution and ask if it would be even considered
Gd luck with the project but with 0 tests I'll have to stick with twig.js for now.
http://www.tonymarston.net/php-mysql/index.html of course
&gt; Uncertainty if significant work will actually be accepted &gt; Have you considered raising an issue to begin a discussion before attempting to work on something?
You should consider contributing to software you do really use.
Regarding your first point, I would go so far as to say at least 50%, but probably more, of maintainers of popular projects I've contributed to are insufferable assholes so contemptible as to be unrelatable. I regret to hear I'm not the only one to have experienced this. However, I've also discovered people I love working with. Even the maintainers I love will sometimes reject my work, but it's important to learn to love that, too, knowing they do so in good faith. Regarding your second point, I've not really encountered that behaviour, but such demands can simply be ignored by not concerning yourself with it.
Honestly, have no clue how. I've seen tutorials, but I'd really only be interested in helping with their graphics and maybe documentation*. Which aren't touched upon many places. *Documentation that assumes the knowledge is pointless, but I have no experience writing documentation.
http://phpdeveloper.org, http://planet-php.net, and http://www.phparch.com
This seems to start clearing things for me. As far as I have learned about callbacks is just you pass the functions name as a string to some other function. That is called a callback. I don't know anything more than this about callback. Please bear with me if I am sounding noob but I promise I will learn these things. So how do will this work in the given context. Like where the other package creator should add the callbacks. In a class that extends some of my package's class? I mean how do I get all the callbacks executed in my class and how would the process would identify which callback is realted to this package and which not? Sorry if it sounds completely opposite and thanks as well. Would appreciate if you will let me know my mistakes and understand it better sorry :(
Because of the fear of assholes, and lack of time.
I contribute to the Mozilla's projects as they're Open Source because I love their mission and I love working with tons of people that care for the same things as I do. Actually Mozilla is rethinking the community and trying to get it better as many of us know community can go toxic very easy so maintaining a healthy community is a tough job for Community Managers. 
/u/alexbarrett It is a Laravel package. I posted it here coz I need to learn how actually PHP would work for me. Basically a route is hit that is pointed to a controller method in that the report is built as an array and passed to the view. Typical MVC pattern. Since the controller will live in the vendor/my name/my package name/src/controllers directory of Laravel . And other packages will be in the same vendor/other provider's name/his package name/........ And the same structure. I want to keep the process of adding new stats in the report same for both, an other package developer as well as for the Laravel app dev who will install this report package in his app. Basically a way to add new stats in key value pair at the end of already generating report. So whenever my controller method is called through route it will prepare the same array it prepares now and then check if any other packages installed(of course they will need my package as a dependency while developing their package in the require part of their composer json file afaik) want to add their stats as well or the app developer himself wants to add anything more or not. If yes add the elements at the end of the array or maybe create a new array and pass it to the view otherwise nothing.
[Sounds more like "Twee"](https://translate.google.com/#es/en/twig) ([or something I have no idea what](https://translate.google.com/#es/en/Tweeg))
if it takes like max 2h to write a contribution - i do :)
Although it's probably cool that you can do this in Laravel, and from a "dev" perspective I understand (but don't aprove) the "just tell me when it's a problem and we'll fix it" mentality. But for me monitoring is so much more than reacting to alerts. It's trying to pro-actively prevent the alerts from triggering in the first place. One of the most important things I disagree with, is "We don’t need graphs of historical data or a lot of checks". If your diskspace monitor check gives an alert, the first think you want to know if it's something that has been gradually increasing (regular datagrowth of a project), or just started 15 minutes ago after deploying a new version of the codebase. Even if you have the numbers (not clear if you keep history), a graph can tell you a lot of usefull things just by looking at it even for just a few seconds. Trends and anomalies, that's what it's all about. Also, these will help you make predictions, things that you will find more and more useful when your projects start to grow. At the current rate, when will I need to upgrade the CPU or memory of this server? You can look at the current load, but that's just one moment on a rainy monday evening and might not represent the resources needed in peak-hours. As a (mainly) "ops" person, I can only advise you to use proper monitoring tools. Zabbix isn't really that hard to setup, a simple munin can probably also get you a long way. Just invest a little time in it, it's well worth it. 
[removed]
Silly puppy. You should be stopping once you reach the timeout threshold.
I know you're being sarcastic but I've always enjoyed reading his stuff about all the enterprise things he's worked on over the years.
Why are you "obviously female"? Maybe don't bring it up?
I can relate to your experience, and made a [similar comment](https://www.reddit.com/r/PHP/comments/5xtzwj/why_dont_you_contribute_to_open_source_projects/dekxmbh/) already. I don't know the specifics of your experience, including whether or not you've been a maintainer before, but I invite you to consider the view of the maintainer for a moment. Understand that once you've added code to an open-source project you are off the hook once it gets merged. The maintainers, however, have to support it for the rest of their lives on the project. A trivial feature in your eyes can be a big burden in the maintainer's eye. It is often paramount to them that the implementation is bulletproof. Sometimes when the maintainer says your code is not OK, it's really not OK, and sometimes we have to live with that decision despite how much we oppose it.
I'm not sure if you realise how valuable such contributions would be. Programmers are [notoriously bad at graphics](http://web.archive.org/web/19980114062246/http://php.iquest.net/logos.phtml), on the whole, and many projects lack either good or complete documentation. Where do you get stuck at in the process of contributing? Do you have basic Git competency?
That's why God gave us weekends.
&gt; Why are you "obviously female"? How ironic, right? As a contributor, I wanted to point her out some things but just when I saw this I backed off. If it's a troll, then it's a good one. Anyway, I work in a large company with females around as a (great) developers, designers, both in 3D and Unity development and also backend web-development, etc. and they are so chill nobody cares. It's just, if I'm having a fun with her or him for that matter, then why should I look at it different? I can't understand these people.
&gt; Fear of catching a metric ton of shit or having your PRs rejected because you're obviously female. This industry is still deeply sexist and there is a risk and a cost involved with being too visible, or too opinionated, while being a woman. You're not alone. Several people I've collaborated with on various projects (including some open source folks and security researchers) have emphatically requested that I not disclose their gender for fear of career penalties. And although I'm respectful of these requests, it makes me sad every time I receive one. We should be better than this.
There's a difference between rejection without comment or "That's not how i'd do it /close" and "Ok I see what's going on here, /this /this and /this is how I'd like it done before Ill merge it" or "This isn't a feature I plan to support in this project, sorry, though thanks for the interest" What I find interesting, is that a lot of projects in the OSS space like Github, are basically wanting to just be a private repo, but don't want to pay the dollars and cents to make that happen, forgoing things like Bitbucket because they DO WANT their project to be seen, just not contributed too. 
Yeah, that's right, I should just change my name to John. /s FFS my handle here is neutral because I'm afraid of catching sexist shit, but I can't hide the fact that I'm a woman in every professional context. And it can be used against me in a way that being a man wouldn't be. Don't blame me for being afraid of that.
Maybe they want to put their real name and/or photo on their Github profile for career advancement purposes. There's nothing wrong with that, why shouldn't women be allowed to do that without fear of negative consequences from assholes? See also, [chilling effects](https://en.wikipedia.org/wiki/Chilling_effect). Most technologists I've met view free speech as our main political value. Why not extend this value towards mitigating the chilling effect that dampens the creative potential and participation of half of our population? We don't need to get into identity politics and the drama that beckons to recognize that what I said is only fair.
I'm sort of obligated. Without open-source, I definitely wouldn't be where I am currently. I did not go to school that earned me a diploma regarding the IT (just a little bit, mostly math), and did not finish university. Why? Because since I can remember myself, I've been browsing SVN repos here and there, and zipped source files from planetsourcecode, investigating every bit of line. Why? Because I loved it and got hooked to it. And I appreciated someone somewhere published that code without charge, so I could learn from it. And I did. And still do. So why not give back? I will. 
That's interesting because I've never encountered a project that is "soft-closed" to contributions. Do you have any examples?
Perhaps Generate PHP classes from Java Classes for code completion? 
Agreed, we should have tests. They will come, alright.. For now I focus on actually making it work. ;-)
I can't pay rent with personal growth 
Statistics? Uber? Wait, I though we were speaking about OSC. Which in that matter is totally opposite. Again, to rephrase myself: I don't only contribute to open-source project, I also get contributions from other hackers (whether they are male or female, it doesn't matter). Also, why do you think developers outside of your company (or my company) are different in any matter? Yes, they might be some users who flame or act arrogant on issues board but their account is dust, and you are not obligated to take these personas seriously. Even lets say there are stalkers, don't you think your Reddit account of 4 years wouldn't get a bigger attention then your GitHub account? Also, thank you for being honest then. And I'm sorry you are having trouble with joining the osc for such a reason or industry understanding. Think about creating a pseudonym (username) that is not tied to you in any matter that you could use to contribute to opensource. Your contributions is valuable as all others are. You can even include these repositories/account in your resume if we are looking at it from other side.
[removed]
&gt; Our industry is the easiest for women to find jobs [citation needed]
Time. 8-6(or more) I sit in front of a PC and write code or in meetings. 6-9 I don't want to any more. I don't want to think about hard stuff, my head hurts from dealing with people at work who want complex solutions to simple problems. Or problems that require complex solutions on short time lines. My kids have stuff to do (basketball, softball, football). That's 5 nights a week between the 2 of them. I need time to eat/sleep/relax. I need time to be Dad/Husband. I need away from a screen. Shit even when I'm relaxing I've still got that annoying bug or great idea or horrible imposer syndrome or guilt for taking that horrible shortcut to meet a deadline - running through my head. 
If the project is still active you should be able to rekindle that fire if that is really what you want.
I don't need you to apologize for something you can't control, man. But thanks for caring enough to say it. I'm speaking about the tech industry as a whole, more or less. The thing is, I know rationally that most people are good. I know that most programmers are okay and I'm glad to know them. I still come here every day, and yeah, I've had a Reddit account for a long time. I've been pretty lucky, all things considered. But I'm still on the same Internet where women get rape and death threats for having an opinion, in a profession where I'm most likely to converse with people with in-depth knowledge of how to hack into online accounts or compromise websites. It only takes one angry asshole to label me as the Enemy and try to ruin my life. Shit, look at the response I got here just for saying "hey the industry is still hella sexist and it makes women scared". Instant push back. But no one cares that I said I'm afraid the open source community is filled with drama llamas. I knew that's what would happen because that's usually how it goes. But I still thought it was worth saying because I know the regular posters here are mostly good people. If I truly believed that /r/php was a worthless sexist shithole - if I thought the industry was irredeemably sexist - I wouldn't be here or have said anything at all.
I know right? Goddamn but it makes me neurotic as hell. You can't logic your way out of it either.
...yeah, I don't know how to reply to someone who uses the term 'feminazi' un-ironically. Or who uses the term 'retard' in any colloquial context, because that shit's offensive.
Did not work :( 
Well, what's homepage.php contain? Do you have errors displayed? Changed `include` to `require` so that it errors out if it's not found.
I do not think that it has errors inside because if I include it directly inside index.php, it works perfectly. Require also displays nothing.
LOL. Reading his blog I always think it was written 5 years ago.
To be honest, I simply have no interest in doing so. I do enough programming in my daily job as it is. I do have some personal projects but almost all of them are private and will probably stay that way.
There's a [PHP7 Compatibility Checker](https://github.com/sstalle/php7cc) you can use to help the process.
You were a spy once. Now you split your time evenly between shitposting on Reddit and maintaining a framework nobody uses. How did your life get reduced to this?
You're defining an instance method but calling a static one. What happens to the $link param?
https://blog.jetbrains.com/phpstorm/category/php-annotated-monthly/
Thanks. I had realized I've been rewriting my site in 5, and don't want to need to dramatically change my code if possible since I think my host offers the options of using either.
[removed]
[removed]
None? If I want to take all day to write it that is.
When you complain about "sexism" in our industry, it sounds just as ridiculous... so I'll go with the lizard theory.
Back in a days I was a junior dev that was a first interview question that I've failed. I was told that late static binding is super important but honestly, in my last five years, I can't remember any use cases for it. Maybe I'm just not getting good use of static classes.
Could be usefully for sending an alert to non-technical folks (ex. Marketing or Sales Departments) Otherwise, New Relic all the way for me.
[removed]
[removed]
&gt; I know very talented women in the industry and they are sometimes generalized as other mediocre retards who are only where they are because they have a vagina. We should work hard to keep mediocre people from the industry. I know very talented men in the industry and they are sometimes generalized as the other mediocre redards who are only where they are because they have a dick and we live with the legacy of a patriarchal society. See? It works the other way around. Also on a side note, the number of developers double every 5 years. That means every 5 years, half the of developers have less than 5 years of experience. We should work harder to help people to progress instead of mocking their mediocrity or inexperience. You've got to start somewhere. Now get real, if you think women are coming in this industry just to abuse the system, you're greatly mistaking and really think to highly of either yourself or the men. &gt;It's how some men discuss things. If you're uncomfortable with it, kindly fuck off. It's how jerks (not necessarily men btw), discuss.
Yep :) Also, it allows for more consistent collaborative development :) So if other devs you collaborate with use this same docker image, you'll know for sure the application will run the same way on their computers :) And since it uses (hopefully) the same services as your deployment server, you'll know it'll run the same way there too, as long as the deployment server is configured the same, basically only means same php extensions, and the same Nginx configuration. I'll probably be writing about this, might even have to create a blog for these kind of things, since this happens often to me, I create something and publish it on reddit, but I should be documenting things like this better and turn it into a tutorial :p 
Ugh... that was bad and you should feel bad. Just because I don't want to empower random women doesn't mean I implied I did it all by myself. Do you even understand basic logic? You should try to understand why I don't want people like you in our industry just because you are a woman. And I can see why people think the way they do of you... and I can assure you it's definitely not because you're a woman. I mean some people are smarter in other ways... maybe you should try to find what you are smart at. Anyways, random people didn't come to my aid. My family and friends suported me... and I support them back. I'll not "empower" some random people just because they have a vagina. I think women are just as capable of getting support from their loved ones.
Personally I use this system: * config.whatever &lt;= main config file whith settings across all environments. You can commit it to source if that's important for your project. Don't put private keys or other credentials here. * config_local.whatever &lt;= config which differs for each environment. Put it in the .gitignore. You can put sensitive stuff here. Any keys in this config extend or overwrite corresponding keys the main config. And of course, if these are in a non-php format, they should never be placed in the webroot. Unless you deny access via your web server config. And that still makes my palms sweat. I also like using some kind of multi-level data format such as yaml, json, or php arrays. This way you can have organized, nested config, and also pass around only one section of the config if needed. Bolt CMS makes good use of these practices.
Very cool! I like this
I do contribute from time to time, but the thing that holds me back the most is finding a project I want to help out, and identifying issues that are REAL issues and not tech support issues, that aren't already being worked on, and that actually have potential of being approved/merged if I spend the time working on it. Honestly, just finding an issue to work on takes hours and hours and even then I may never find anything to do, or worth doing at least. One thing I hate i seeing a repo with hundreds of issues and hundreds of PR's - it's a sign to me that there is a whole lot of work to be done, but the maintainers aren't managing the load very well. Who knows if some problem you go about trying to fix doesn't already have 5 open PR's that failed before you.
Any help /u/alexbarrett ?
&gt;See? It works the other way around. Thumbs down. Doesn't work as well... to be honest, doesn't work at all. &gt;We should work harder to help people to progress instead of mocking their mediocrity or inexperience. Who is "we"? I'm not going to help some random people just because they have a vagina. You are free to do that. I help my talented subordinates as a part of my job. &gt;You've got to start somewhere. No I don't have to do anything. &gt;Now get real, if you think women are coming in this industry just to abuse the system, you're greatly mistaking and really think to highly of either yourself or the men. No I don't think highly of most men... but they don't get hired without having a much rigorous process compared to women, so they are more likely to be talented. If everyone was judged fairly, I wouldn't think like that. &gt;It's how jerks (not necessarily men btw), discuss. Ok thanks, I didn't know that. Now fuck off!
I'm not familiar enough with Laravel to give you advice on the best way to structure packages for it, sorry. The general principals we discussed earlier still apply though.
The major difficulty can be working in an organisation where doing such a thing is considered unacceptable.
&gt; Since young developers and others are switching to prove that, and we can start the conversation
I'm not convinced there is (or ever has been) a shortage of any type of developers in the USA. What we do have is a shortage of companies willing to pay developers commensurate with experience and requirements.
Please keep the database out of this container, follow docker good practices!
I think every region of the US has a different developer economy. I think there is a shortage where I live but that just means they get paid what other devs get paid.
&gt; Just because I don't want to empower random women doesn't mean I implied I did it all by myself. Also, your words were literally, "No I won't empower anyone." That is literally what you said. It was a complete sentence at [the beginning of your reply to me upthread](http://archive.is/sD3jr). You won't empower **anyone**, you said. Emphasis mine. The one who made a logical error here is you. In your most recent reply, "Just because I don't want to empower random women doesn't mean I implied I did it all by myself." But you didn't say you don't want to empower *random women*. You said you don't want to empower *anyone*. Go back to troll kindergarten (or is it called the Hitlerjungen these days?).
Interesting, I've been working on a different approach of an example/template project, which integrates Docker, phpunit, composer, and Phpstorm... The focus being on command-line unit-testing for code which would otherwise be a library. The part I'm dealing with now is how to smoothly integrate with all the Phpstorm bells and whistles.
Maybe stating the obvious, but I've noticed that projects overseen by devs at companies with a culture of inclusion tend to be much more civilised, in general, than ad-hoc projects. [Etsy's GitHub repo](https://github.com/etsy) is a great example.
Because I get paid to write private code and I have better things to do in my spare time.
I'm paid to work on a proprietary system. Can't put that in open source. By the time I get home, the last thing I want to do is deal with more PHP.
Everyone was a mediocre developer at one point, fuckstick. Not just women.
To everyone else in the thread: It's not worth debating a troll.
Abstract crap in my comment referred to anything that contains the words 'pattern' or 'design'. Basically how many people took the time to read through the online documentation describing the language. Because I feel that people only learn about programming principles, which is nice, but can not discuss "low-level" workings of the language at all. I am not saying any side is bad or good, just wondering how many people go beyond the school and into the language itself.
&gt;The one who made a logical error here is you. &gt;But you didn't say you don't want to empower *random women*. You said you don't want to empower *anyone*. If I don't empower anyone, doesn't it include "random women"? Basic maths. It's not that difficult. 
[removed]
Didn't you [already recommend this solution to someone before this link has been posted here](https://www.reddit.com/r/CRM/comments/5wpm8c/crm_suggestions/dely404/)? The course of your actions seems a bit illogical, no?
Good info, I liked it alot. 
If it were possible, I would. PHPStorm just doesn't support Docker Compose yet, if it did, i'd be using that to allow for the Docker mentality (same on local as on remote)
[removed]
[Clown anemonefish](http://animals.nationalgeographic.com/animals/fish/clown-anemonefish/) beg to differ...
Just to add, I added CoreNLP to the test suite (a basic example here http://docs.soluble.io/soluble-japha/language_recipes/#corenlp) and compiled a list of ready to use java libs (https://github.com/belgattitude/php-java-bridge/blob/master/init-scripts/README.md) But I'm still looking for a better use case... as far as I've seen, the PHP ecosystem looks quite great already, so I'll probably have to search for something very specific (Android, Machine learning...). Please comment if you think about something. Thanks 
I do contribute to OSS, and I'm lucky enough to work at a company where this is encouraged and we have some time to maintain some little projects under the company's GitHub org. Then, it saddens me to read here that there are other companies where not only it's discouraged, but it's even used as a cause of termination. Sure, it's up to them to decide, but (especially if they use OSS software to produce their work, which I bet they are) it's kinda of a dick move. Please, give back to the community that gave you the work tools that you use every day!
[removed]
This reddit and newsletter from www.phpweekly.com.
Could be Mysql Query Cache
1. check the server request and make sure the page isn't cached. See the response header for stuff like Date, Expires, ETAG. Try a hard refresh and see if the response is different. Try adding dummy GET parameteres. `/reports.php` turns into `/response.php?1231321` 2. try doing the sql select with `SQL_NO_CACHE`. Where you have `SELECT id, name FROM ....`, this turns into `SELECT SQL_NO_CACHE id, name FROM ...`.
It feels like there is a lot of hostility towards the out-crowd when it comes to contributing to and participating in open source projects. Sometimes there is a serious ego game going on. Also, due to lack of documentation, it's often hard to get into the software design philosophy of certain projects. But it also has to do with time. I develop full-time for a living, I need some rest.
I would buy the Dell XPS 13 Developer edition with Ubuntu preinstalled. Specs can be found here: http://www.dell.com/us/business/p/xps-13-9360-laptop/pd?3x_nav=OS_BRAND%3DUBUNT&amp;3x_page=1&amp;filterCollapsed=true I've run debian before and liked that but I think Ubuntu is my favorite distro. My primary purpose in purchasing this machine is for LAMP development and PHP Storm is the IDE I will use. If it's not supported at a higher resolution I will buy a computer with a lower resolution monitor.
I knew PHPStorm *had* rendering issues on linux, based on which JDK was used (openjdk vs official one). Don't know if that's the case any more, but it really annoyed me. Any news about this would be appreciated.
That has nothing to do with what what I said and it seems like you're still missing my point. This setup is a bad idea and ignores why docker exists. No one should be using xdebug on a production server for reasons you can search for yourself, and It will only get worse if you add a database to the container, which entirely defeats docker's separation of concerns concept. To address your point, if your IDE is resulting you in doing things bad ways it's time to work outside of the IDE.
Well Reddit knows you're female now, so good on you for that. Watch out for the onslaught of sexist bullshit.
Debian was upgraded from 7 to 8 to be able to install PHP7. Possibly MySQL was forgotten to update.. I think I gotta check that with our server admin.
[They (he/she) resort to personally attacking other developers projects.](https://www.reddit.com/r/PHP/comments/5wy19n/announcement_new_strongly_typed_enumerable_type/degelmk/)
I'm not missing the point, i'm working around the limitations of an IDE that has just started supporting Docker... And this is meant as a local development server, not a production server. 
My attempt on Pimple configuration. Feedback needed https://github.com/f3ath/pimple-config
I do
Is it only unacceptable on company time or is it also unacceptable on your own time?
Both. In certain enterprises, "open source" is literally terrorism.
MySQL 5.0 was really old in Debian 7. It was old in Debian 6 as well. Please note that you cannot simply upgrade MySQL when jumping versions. You have to do a logical upgrade by dumping data, install, import and run mysql_upgrade.
I suppose that that doorway links are automatically considered as spam?
Would be a good idea to do that, but many people just hope for seamless integration, that when they press debug, the right things are booted, currently it kills and reboots the whole stack.
If you work in an open environment, there's a chance, however small, that someone will feel inclined to work with you to help finish it.
I guess the ugly but working thing would be to have the base `myAutoloadedMethod` method to be a variadic, and only do the type checks before defering to some `_solublejapha_int_string_myAutoloadedMethod` method. Would do the trick (might have overlooked something), but ugly as hell I guess. And if someone as some strange method name conventions, you might have collisions... But screw them, or in your config, allow to change the prefix.
FYI, MySQL 5.0.12 was released in September 2005. 
It's also possible (and easy to rule out) that the delay is caused by MySQL's host resolution, if its DNS check takes a long time for some reason. See [http://ftp.nchu.edu.tw/MySQL/doc/refman/5.0/en/dns.html](http://ftp.nchu.edu.tw/MySQL/doc/refman/5.0/en/dns.html)
Well done you can copy and paste the original news release post 2 MONTHS AGO! Spam you're blog crap else where please, zero effort has gone into you copy and pasting this content 
Yeah I would deferentially get that checked, the stable version in the Jessie repos is version 5.5.54, you seem to be miles behind 
&gt; Can we said that there is a shortage of PHP developers? Your mistake is presuming a developer would label them selves as a "PHP developer". A genuine developer/engineer would label them selves as so and not tie them selves to a specific language (not just PHP but any language). You will find anyone who labels them selves as a "PHP Developer" probably has very little knowledge of programming in general outside of the PHP ecosystem.
I accidentally looked at the mysqlnd version in the phpinfo(), the mysql version is indeed 5.5.54, my sysadmin is not to blame..
&gt; It's useless for any Javascript development, in the client Wat.
Oh I didn't see that you wrote "this" container. I thought you said "the" container. I've heard somewhere someone saying you shouldn't have databases in containers at all, because containers are meant to be stateless whereas having stateful databases go against the Docker style. If you were advocating the same, I would have asked for your thoughts about the matter.
hehe happens to us all
Don't even want to think about it ;)
&gt; cucktard https://www.youtube.com/watch?v=SE6jy78tV78 &gt; To be clear, I'm all for companies doing whatever they want. In fact, I think they should be able to discriminate in all possible ways, including gender, race or sexual orientation. This is precisely the sort of attitude that is not welcome in most of the PHP community.
I understand now! The container is stateless, but it can have a statefull volume where the database is actually stored.
one of our writers wrote this if its a copy paste i want to know send a link to the original post
yes, but seeing the project has quite some activity going on I have good hope these will at some point be fixed. This sentiment I do not have for the Smarty project, which I why I would be worried.
https://laravel-news.com/laravel-5-4
Use the AST to **find** backwards incompatible changes in PHP-current and **replace** them with code generated from transformed AST to work on PHP-next. I've created toys for this, but most options that try to do this end up creating sniffs or other solutions that don't leverage the AST to fullest. /slight-troll-but-one-can-wish
&gt; I'll happily empower sexists if I feel like it. &gt; It's a disease. She needs to see a psychiatrist. Nope. You're done.
Ubuntu, 1440 HP Omen 32", looks great. Most WM I've used handle it great (unity, gnome, bspwm, pantheon).
Woah. IDE's are simply a collection of tools in a single interface, to increase productivity. Atom or Sublime aren't cutting it vs an IDE like PhpStorm 
If anyone wants I'll post the fix I've used for the non-reparenting issue, which is probably what you're talking about (solid grey useless window).
I have this laptop and Jetbrains added HiDPI (which is what I think you meant) support into their IDE. The worst thing I had to do was adjust the editor font size to what I like - I thought it was too large by default.
&gt;And this is meant as a local development server, not a production server. You are missing my point. Anyway, I've tried. Good luck.
I'm not missing your point.... But good luck to you too! 
Do you have some instructions on how we might utilize this for Docker beginners?
Have you tried infinality?
It wouldn't change your mind. How about what is IMO one of the best MS DOS demos of all time instead? https://www.youtube.com/watch?v=b3GUfM7qkCw
Building your own authentication comes with a ton of important security risks, is hard to get right, and isn't typically very scalable or portable. If you do want to host your own user database, I would recommend using something that has already been developed and has popular support. Check out packagist.org and see what other people are using for user authentication. If you DO want to build your own setup, make sure you go through the OWASP website and account for the tons of potential security holes and best practices.
Haven't tried php storm on Linux in a few years. Will check it out, thank you!!
Not perfect, but usable. Can only scale up to 2x. @283DPI: http://i.imgur.com/zmc31iD.png
A little of both.. PHP seems to be a language everyone has learnt at some stage... and people tend to think just because they learnt it as part of schooling they can just step into a high paid job without experience.
Thats in $AUD 
[removed]
[removed]
Yo dawg, I herd u like facades...
I would start studying an MVC framework like Cakephp.
 $pwdmd5 = md5($password); $qry = "Select name, email from $this-&gt;tablename ". " where username='$username' and password='$pwdmd5' ". " and confirmcode='y'"; $result = mysql_query($qry,$this-&gt;connection); ಠ_ಠ
What kind of response is this? I could be misinterpreting your intent but I'm going to make a conscious choice to avoid giving you the benefit of the doubt here because you've struck upon a topic about which I feel strongly. Your other responses in this thread also take a tone of subtle condescension if someone admits a lack of contributions to open projects. This kind of "what could possibly be more important than coding and breathing?" is not toxic in and of itself, but it becomes so when people like you expect others, who call themselves programmers, to feel and act the same way you do, invoking a "no true Scotsman" fallacy in spades. Believe it or not, there is a wide, beautiful world out there and I hold the opinion that the broader one's knowledge and experience, the wiser one becomes and the richer and deeper one's personality becomes. Since you technically asked a question, I will answer with a list of things that I would rather do in my free time than code. I have been maintaining this list for years and don't accomplish near as many of these things as I'd like. * Spend time with my young, shapely, attractive girl. This includes, but is not limited to, the following: * Talk and listen * Drink together at home * Play Unreal Tournament * Watch Star Trek, Gordon Ramsay, Mushi-Shi, and myriad other TV shows and movies * Go out to eat * Eat her cooking (which is really good) * Go on a day trip * Sex. Like animals. * And the list goes on for days. Like her legs. Really, she's actually six feet tall. * Play games on my purpose-built PC * Work on Arma 3 aircraft mods * Hire a vocal coach so I can hold a tune worth a damn * Buy a recurve bow and practice archery * Learn music * Piano * Cello * Contrabassoon * Erhu * Set up a Beowulf cluster with a swarm of Raspberry Pi * Learn to brew and age my own alcohol at home * whisky * mead * Compile a genealogy chart of my ancestry * Work on getting my dual citizenship with France * Learn to ride a horse * Learn to ride a camel * Earn my solo skydiving qualification * Get qualified to use a wingsuit * Earn my fixed-wing private pilot certification * Instrument cert * Multi-engine cert * Earn my rotary-wing private pilot cert * Purchase HAM radio and get certified * Earn SCUBA dive cert * Attend offensive and advanced driving school * Take up fencing * Take up jujitsu * Attend training for advanced weapons handling and marksmanship * Rifle * Pistol * Build my own rifle * Set up a workshop for woodworking * Build my own furniture * Learn to perform my own automobile repairs and maintenance * Buy, restore, and maintain a classic/old car * Travel * Ski in the Rockies * Take my girl to Europe. I've been there many times, she has not. * Return to Germany to get some goddamn proper Black Forest cake. American cake is the worst. * Visit Japan * Take a tour of Scotch whisky distilleries, starting with the Islay region * Visit my mother's home town in Alaska * Resume my original profession of photography, this time with a fine art focus * Read more books, especially the timeless greats and classics. * Buy a nice telescope and study astronomy I have much more. This good enough for you?
 &gt; It would make more sense installing those dependencies phpunit / phpmd etc as project dependencies too btw then it doesn't matter if your project uses phpunit 5 or 6. Having them available doesn't stop anyone for installing specific versions per project, so it isn't really a downside to it. &gt; no docker file? This. One of the worst things is to rely on an environment that cannot be reproduced.
Continue.
Anyone out there up for a job? Please send me a message here or on mail! I think it's a nice addition to the php-community but it needs some care! And I'm already balls deep in a few too many things :( 
Great answer. OP, I hate to say it, but if this is the question you're asking, you are almost certainly not ready for the project. Start smaller and I'd suggest you start reading other projects' codebases.
I never initialised the composer-package properly. Thus zero installs.
Or, y'know, `Refactor` → `Extract Method` in PhpStorm. :) Edit: Ah, sorry, I missed this bit: &gt; Knowing all the manual steps that are necessary for extract method is a great benefit even if you are using PHPStorm's powerful automated Extract Method functionality in the end. Just understanding each step helps you selecting the best code blocks for refactoring, something that PHPStorm cannot do for you.
Good edit. :-)
&gt; Then anyone who only knows PHP has very little knowledge of programming in general? It's not 1:1 but in general yes, in most CS degrees you are exposed to at least 3 different languages (mine covered C, Java and PHP). When out in real world job market its rare to find software engineer jobs back to back in the same language 
Some better tutorials that were written this century: * [How to safely store your users' passwords](https://paragonie.com/blog/2016/02/how-safely-store-password-in-2016) * [How to prevent SQL injection](https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide) * [User authentication (with "remember me" cookies) deep dive](https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence) As a rule, if you see `mysql_query()` in a tutorial, you can safely discard it.
I agree with Khronickal. You have implemented routing as part of the application layer. In its current implementation it somehow mixes the responsibilities of a web framework, MVC as well as your domain logic. It is either an unfinished product and should for instance become part of something like a routing loader for Symfony, to make that somehow easier than it currently is, or it needs to at least separate concerns way more than it does. Even the simplest dynamic monolithic application requires a more solid approach and therefore I suggest you either rethink the router and learn from that once more or jettison the project, because a maintainer for it has no application for its current state and is likely to refactor it so much that only the name will remain as identifiable piece of legacy.
Depending on your site's size / purpose, you could probably use OAuth so your users don't have to make a separate account on your site. 🙂
Probably most people. Anyone who has used static methods and inheritance would be familiar with the concept, enough so that that the documentation isn't going to offer anything new. 
Fortunately there is a terminal in Storm so you can run it from CLI in phpstorm
[removed]
I can never grasp my head around this. For login surely the following makes it secure enough? Take user email and password from form, get the password for the user based on the email supplied (query using doctrine orm query builder &amp; set parameter), and then use `password_verify()` to check the password, at which point you set a session?
So your argument now is that I am younger than you... hmm maybe so. But since all older people are conservatives and are beyond retarded tropes used by libtards to brainwash using childish "comedy shows", I have a hard time believing you. You can't be that old and still be retarded. Arguments should stand on themselves, not be based on touchy feely moronic brainwashing designed to appeal to emotionally charged young idiots. When you grow old and when hormones run out of steam, you're likely to see the more rational side of things... which is why basically everyone turns into conservatives. Anyways, when I grow older, I hope I will have better things to do than tell people on the internet what words they should not type.
Please give an example where I berated someone for not contributing.
1440p at 32", are you running that display scaled or native?
https://imgur.com/a/xHI9A No?
1440p at 27" (108 ppi, which is what I got on my Eizo monitors) isn't that much smaller in my eyes from a more typical 1920x1200 at 24" (94 ppi). Without scaling I can read size 9 Meslo from around 70cm away(very rough estimate based on that I have to lean forward to touch the monitors).
Native
Enjoy your new relationship.
This sub isn't for general phphelp, you should take that to /r/PHPhelp. 
None that would make sense to anyone but me and my neurosis.
Works fine on my XPS 13.
The problem is that someone asking this question is not likely to know what Doctrine is, how to install it, or how to configure a web server for security. Also, minor nitpick - Isn't it better to take the email and password, hash the latter, and then perform a single query with both the email and hash as parameters?
Please do not give people bad advice.
True. I suppose you could compare both the email and the hashed password in a query, and log the user in if it returns results. I tend to get the stored hash and use the verify method to compare it to the one submitted. Not sure what's technically better, but either way is good I think? 
You can setup a link pretty simply if I remember well, it would of course be much easier if PhpStorm supported docker-compose of course.
You should definitely check out /r/phpsec and listen to anything written by /u/sarciszewski. Best of luck!
[You certainly *have* berated people *for* contributing, however.](https://www.reddit.com/r/PHP/comments/5x5uzt/what_do_people_want_in_a_findreplace_refactoring/delaxiv/)
&gt; Sure, PHPStorm might be OK if you're working on a mega project TIL I learned only beginners work on mega projects. Or are you saying people who work on mega projects use beginner tools? Either way, I'm pretty sure all the features that exist for mega projects work just fine for advanced developers who know how to read a stack trace but want faster access to things they know how to do. PS: GUI text editors like Sublime Text and vim are for beginners who can't code using `echo` and `cat`. You should reassess your own skill if you think not using helpful tools make you more experienced.
 Here is a little bit of info to help you on your way (note wherever below I suggest you google something please limit your google results to the last 12 months only usng the google Search tools option): - whenever you enter fields in a form (like a login form or any form) at a site on the internet they are sent to the web-server in plain text format. The IP packets with your name and password in plain text jump through many other servers before they reach your own web server - therefore they are very hackable. To prevent this you must use SSL on your web server (google SSL certificates) so the web client then connects using https (google https). - when using SSL the data is encrypted and sent to your web server where you typically will be looking up the information in a database. You still want to sanity check the input data on the server (google filter_var) to make sure a hacker is not trying to input data harmful to your back-end code or database. If you are using plain SQL in the back-end, make sure you use PDO and bound statements. - when you originally stored the login and password in the database (probably when you added a user or changed their password) you should have hashed their password using a seed value and stored the hash. This is in case the hacker gets access to your database - we dont want the hacker seeing all your passwords (or any sensitive personal info), so we hash/encrypt certain fields. So hopefully your database has hashed values at least in the password column (maybe others). - now to lookup the user on the server, you need to take the sanitized input data (name and password, or email and password) and using the same seed create a hash and see if that hash is equivalent to the hash stored in the database. Google php password hashing for this. - If the hash lookup/comparison succeeds, you will send data back to the client to let the user login, but possibly you will also send a token that can be used for subsequent calls and also set up a session for limited time authentication. You may store a footprint about the client using other data you have been sent to make sure subsequent requests with the authentication token come from the same client (such as the IP address - note this can be quite unreliable for any reasons). If you are processing a server to server request, you may use an app ID to verify if this is a known server who is allowed to access your site, often checking the domain it come from against a lookup for that app ID to see it is an approved domain. Google OWASP and OAUTH for how some of this works. - If the request fails, you have to decide if to blacklist this client or user - you probably want to set a max number of requests within a certain time period otherwise our hacker might just try to hit you with a dictionary attack, where they try to login many many times in a short period trying common login/password combinations. - why send a token back, well any subsequent requests might be from a man in the middle attack or even from a different client or server. By having time limited authentication tokens you can stop a hacker (or timeout) from tracking the login data and then coming back at a later time using it to hack your system. So why all this looks super complicated its not really and there are lots of online resources to help. Its well worth learning how all this works just to make you a better coder. On the other hand, I agree with many people who say don't re-invent the wheel and just use some existing proven technology (either a library or a framework) but even then you want to understand what is going on and why. 
Awesome and you structure it all like? 
There is a shortage of good developers, although there are lots of young developers (presumably with ADHD) who can develop shallowly in 15 different things, but have no clue how to architect and design/build a complete system. This is very true in the LAMP stack in general - the barrier to entry is low and combined with some of the offshore labor (not all of it - some offshore guys are very smart) we just generally have a quality problem. 
I agree with him. PHPStorm is a really nice IDE but I would suggest to avoid to bundle the database even if the install process is just a bit longer, you should not break good practice because of an IDE.
 * 2x 27" Benq 1440p montiors * Arch/i3 Works beautifully, not quite as clear as my retina MBP but pretty darn close and compared to 1080p so much more space. Easily allows me to have an editor/terminal open in one window with lots of space to spare.
If you're more of an Amiga fanboy, I've always been partial to JCMX. It's probably the best showcase of the 68040's 3D capabilities that doesn't require any 3D accelerators to be bolted on. https://www.youtube.com/watch?v=g6nRHNDY2Kw
[removed]
Some people prefer the Commodore 64 scene. I loved Comaland. Admittedly it's a bit poorly paced at times, but the wide variety of showy effects more than make up for it. https://www.youtube.com/watch?v=9SRRTgo-LWA
male, female and deformity
An Atari 8 bit fan then? I'll tolerate a lot, but those dreaded machines are where I draw the line. I can't continue talking. Hit me up when you get a *real* computer.
As much as I love PhpStorm, it sometimes makes strange decisions wenn extracting a method. So often so many unnecessary return points...
Helpful content, PHP inspections which is a Static Code Analysis tool for PHP. It covers: * architecture related issues (e.g. design pattern violations) * weak types control and possible code construct simplifications * performance issues * non-optimal, duplicate and suspicious "if" conditions * validation of magic methods usage 
It's not a bug. It's actually in accordance with W3C. &lt;div&gt; isn't valid markup. Not even a self closing tag `&lt;div/&gt; is valid You even get a 'Self-closing syntax (/&gt;) used on a non-void HTML element.' warning if using a validator with a recommendation of using the &lt;/div&gt; tag. 
What alternatives are to FTP for cpanel websites?
That explains why I wasn't able to find a bug report of this issue! So there's no way to avoid this? It's a major annoyance because JS code spills onto the web page text. I understand that it's invalid markup but libxml does such a great job dealing with other invalid syntax that I found weird they decided to fix this error this way.
PHP does not bundle libxml, it links against the system-provided libxml. You can update it using the usual methods your distribution provides.
Do you mean that php is calling the libxml installed on my system? Isn't it compiled with the php core? Does this mean that I could theoretically update libxml by simply updating the binary on my system? 
I'm not the one who asked the question first. Why don't you stop being an insufferable cunt for a change?
- The thread title is written in a confrontational way right off the bat. - Nearly all of your comments reek of a "holier-than-thou" attitude, yet you haven't justified yourself by showing what you've done. - https://www.reddit.com/r/PHP/comments/5xtzwj/why_dont_you_contribute_to_open_source_projects/del34v6/ - https://www.reddit.com/r/PHP/comments/5xtzwj/why_dont_you_contribute_to_open_source_projects/del2ilv/ - https://www.reddit.com/r/PHP/comments/5xtzwj/why_dont_you_contribute_to_open_source_projects/dekxjpn/
Of course, especially considering I never said nor implied that. You must be really good at reading my mind.
Yeah, plus you can often localize the error better if two or three of the failing tests have a correlated cause. (Fairly often the case, IME.) I've been wanting something like this for quite a while, for CLI usage. PHPStorm/IntelliJ uses the `--teamcity` flag to give incremental progress, so I normally use that, but they were a bit slow adapting for PHPUnit 6 which was annoying.
Closing tag is not optional. It must be there. So HTML5 `&lt;body&gt;&lt;div&gt;&lt;/body&gt;` is not valid, nor is `&lt;div /&gt;`, but `&lt;div&gt;&lt;/div&gt;` is. https://html.spec.whatwg.org/multipage/semantics.html#the-div-element 
Pipelines is Bitbucket CI. I think /u/askageek means integration testing with the DB, not unit testing.
Read the top answer, there are several listed that are not libxml-based.
It does. The performance issue raised by this thread is simply not applicable.
I think your approach is fine especially if it works well for you. The Symfony link you posted is really more of a suggestion than a hard and fast rule. The link suggests using constants because constants can be used anywhere. Well, quite a few developers think globals should be avoided when possible. Defining your data as parameters and injecting it where needed is a cleaner solution even if the data is not subject to change.
The use of data grid seems a strange one, makes for a very ugly interface as well. The end results looks like a 1998 spreadsheet so seems a pretty pointless choice and because you're hooking into a libary you're not actually learning much PHP either.
It seems to me that interpretation exists exclusively in the eye of the beholder. For what it's worth, I can tell you that is not what I am conveying. However, I will concede the title is a deliberate attention-grab. My intention is only to spark interesting discussion. If you can attract over 150 comments in a 24 hour period without such a topic, please tell me how.
Interesting!
&gt;If you can attract over 150 comments [Stopped reading there.](https://www.reddit.com/r/PHP/comments/5vktl1/phpuk_2017_a_recap/de3896p/) It's the internet, buddy. [How 12 are you, exactly?](https://www.reddit.com/r/PHP/comments/5x6m7z/random_thoughts_on_the_state_of_php_mvc/dej6kyr/)
What I think is happening is, the XML parser doesn't "understand" JS. How would it know the `&lt;/script&gt;&lt;/div&gt;` is a string inside JS? Compare this: &lt;html&gt;&lt;body&gt;&lt;div&gt; &lt;p&gt; var test='&lt;/p&gt;'; &lt;/body&gt;&lt;/html&gt; The `innerHTML` of the `&lt;p&gt;` element is `var test='`. The same could be happening to the `&lt;script&gt;` element.
I tend to use unit testing for the combination of unit testing and integration testing. I really shouldn't do that but I do. It's not just bitbucket's CI, a good number of providers are going that way including gitlab for example. They don't support docker-compose so you need to have all your services in a single bucket bucket. At the end of the day it is a good idea in theory to have separate containers for each service (not each process) because it allows you to reuse the containers. In reality I haven't really found that I actually reuse containers. They all seem to have to have a slightly different config but I'm sure others have different experiences.
Uhmmm... If it's not bundled in PHP, why I have to recompile it in order to change the version? Im sorry but I can't understand why I can't simply update the binary, if PHP is just calling an external resource. Why I would have to recompile if PHP is using somehting external?
&gt; I presume in relation to brute force, you could just ban the IP after a certain number of failed logins Possible but anything above a very basic DDOS attack will be using a global network of servers/computers/webcams/routers etc all of which have different IP's. The best thing to do is have a captcha of some sort this will protect against a lot of DDOS attempts (they look for easy targets) apart from some of the more sophisticated ones. Also limit the input of the password length, if someone copies and pastes a couple of hundred thousands lines of a book and sends it to your PHP code to hash the password the server will be on its knees in seconds. &gt; XSS Most login forms will send some sort of feedback to the user if credentials are incorrect, so ensure anything you send back (including the username/password) is filtered before it's passed back http://php.net/manual/en/book.filter.php 
Thanks guys - I found some really good sites here :)
Ask more open ended questions that allow them to elaborate. Yes/no type questions are fine, but avoid too many in a row and try to have a followup if you do. For example, ask "Why are singletons considered an anti-pattern?" rather than "Are singletons considered an anti-pattern?". The first question gives them the opportunity to elaborate and also allows them to disagree with you (gives you insight into the type of coworker the person might be) - - just an example, not sure many people would argue they're not an anti-pattern. ;) The interview should be more of a conversation, not a quickfire question session. You're not only getting a feel for their technical skillset, but also the type of person you're going to be spending at least 8 hours a day with.
Is there anything you could do in the code to stop a high capacity DDOS, or would that be reliant on the host?
Make a stat interface. This has something like methods getName and getValue. The user passes their implementing stat object to your package and the package does something with it. This is the genera idea. You don't scan their class to look for methods, you tell them what methods they must have. That's how this works.
its not the same and not even close. go find yourself NSFW stuff and leave our blog
I think you should vendor-prefix your bundle name and use `mapudo_guzzle` instead of simply `guzzle` :) BTW, since you’re using a Compiler Pass to find tagged services, can I hear your thoughts on [nassau/registry-compiler](https://github.com/mlebkowski/registry-compiler)? 
That's on the host to migrate the traffic but attacks are becoming that large even the biggest network carriers have started struggling, unfortunately it's just a fact of internet usage now
You might be able to get around this by using HTML_PARSE_NOIMPLIED $html-&gt;loadHTML($content, LIBXML_HTML_NOIMPLIED | HTML_PARSE_NOIMPLIED); There are some other constants that might be worth checking out as well: http://www.php.net/manual/en/libxml.constants.php 
why wordpress?
&gt; I think you should vendor-prefix your bundle name and use mapudo_guzzle instead of simply guzzle :) I kinda agree, that I could use `mapudo_guzzle` instead of `guzzle` but I didn't want to force a user of the bundle to add the vendor name to it's config. IMO only the package name should be in the config, I just didn't want to force our company into someone's code. But I thought about it, and there's a valid reason to use `mapudo_guzzle` instead of `guzzle`, because at some point there could be an official `guzzle` library which uses the `guzzle` as the config and therefore would overlap with our implementation. &gt; BTW, since you’re using a Compiler Pass to find tagged services, can I hear your thoughts on nassau/registry-compiler? I think the difference here is that while we go through every tagged service, if you look at the `EventListenerFilter` and/or `MiddlewareFilter`, you can see, that we are filtering the tagged services. So we aren't using every tag. Is that possible with your bundle? It's kinda hard to tell from far away if code is good or bad. I mean, you get an idea but you don't know until you tried out. Best example is the SonataAdminBundle, looks pretty cool, but, well....
Thy might want to develop one more Wordfence.
Because It's a product for SMBs having business and e-commerce sites running on CMSs. Guess which CMS is the most popular? :)
Thanks for the explanation :)
HTML_PARSE_NOIMPLIED does not exist. Tried loading the HTML with LIBXML_HTML_NOIMPLIED and still got the same issue :( 
Lol, I just checked your post history and the link to the agency is in the email on the website :P
Have you ever tried font subpixed subrendering? Looks nice on *buntu. But other distros fonts are ugly, like fedora opensuse, etc. You cleary don't have an idea so you might need to educate yourself first. old post of mine. https://www.reddit.com/r/linux/comments/4iy3mg/why_ubuntu_is_the_only_worried_about_font/ 
This is true. With my bundle you have the issue that you can either register your Middleware/Event handlers for all clients or one. I think it's a good idea you provided that you can add multiple middleware/event dispatchers for multiple clients.
You know you're out of your element when the "simple sample usage" is beyond your understanding.
I regret to inform you this project currently does not support PHPUnit 6, either. However, someone has [raised an issue](https://github.com/ScriptFUSION/PHPUnit-Immediate-Exception-Printer/issues/2) and may be working on it. I hope it will be supported shortly.
Mainly because running php on windows is just pure nastyness. Especially when you're trying to use phpcs and phpmd ;)
Do you mean this: use Phpml\Classification\KNearestNeighbors; $samples = [[1, 3], [1, 4], [2, 4], [3, 1], [4, 1], [4, 2]]; $labels = ['a', 'a', 'a', 'b', 'b', 'b']; $classifier = new KNearestNeighbors(); $classifier-&gt;train($samples, $labels); $classifier-&gt;predict([3, 2]); // return 'b' If so, here's a quick explanation to help you understand: The `$samples` array is a list of inputs to a system. The `$labels` array is a list of correct outputs. A very simplified real world example (I'm not sure whether PHP-ML would accept it) might be something like $samples = [['4 wheels','4 seats','engine'],['2 wheels','1 seat','no engine'], ['2 wheels','1 seat','engine'], ... ] $labels = ['car','bicycle','motorbike', ...]; Together, they provide a training set. You then choose which algorithm to use - `KNearestNeighbors` in this case, and tell the system to train itself on your example samples and labels. Once it has trained, you can call the predict function to see what it says. With the real world example of vehicles, I might pick something that wasn't in the training set, say $classifier-&gt;predict(['4 wheels','2 seats','engine']); and if there were enough samples to train the system well, it should return 'car' for this example. Clearly there need to be many more inputs to be able to determine the difference between 'car','sports car','van','truck' etc. etc., and I'm not saying the above samples would work, but hopefully it helps you understand what it does!
So the different parts of the sample work like this: For clarity we'll say that what we're doing is trying to classify police officers into two groups: group "a" and group "b". Group "a" are officers you trust and group "b" are officers you don't. You only personally know six of the officers, but you want some way to guess whether or not you trust *any* officer. For the six known officers, you collect some numerical data about them. You don't know how or even if this numerical data can be correlated to your "trust" grouping, but it's all the data you have. In the $samples, each sub-array represents a set of qualities. In this case there are two, but there could be more. The first number might represent "number of traffic tickets issued per month" and the second number might represent "number of traffic warnings per month". You start the program, you give it the numerical data for the six officers you've already grouped, and their grouping. It builds an algorithm that transforms the input numbers into an output of either "a" or "b". Now you can feed it another officers values for these two numbers and it will output what the computer thinks their grouping will be. If "traffic tickets" and "traffic warnings" are highly related to your "do I trust them" values, then you'll get good predictions. If they are not, then you won't get great predictions. The simple example is for a categorization machine learning program. It's the same kind that Google builds to decide whether something is a picture of a dog or a bird, for example. There are other kinds of machine learning, like neural networks, in which their goal is to output at least one other number.
I'm parsing HTML Im using Dom document to parse text from newspapers so I can't modify the html or sanitize it beforehand 
ARX means citadel in latin ;)
Thank you so much for the guidance :)
You don't *have* to use it, but thing is you inadvertently start embedding declarative behavior in more complex config, when you can't supply behavior. And it's still much less flexible than behavior. It also depends what you're putting in your config, so... I won't speculate, given I've seen no large config files from your apps.
I think some context is missed here.
The idea that you can't refactor if your tests are "isolated" has to be explained in more detail, and supported with logic and examples, because it doesn't pass the sniff test. If you factor your code in well isolated components, as you should, then most of your tests will also test those isolated components. And you can still refactor. 
What it took me a long time to realise is that there's actually two completely different methodologies to unit testing, and one of the methodologies (Classic TDD/Chicago school) aligns with what Adam says here, but the other methodology (mockist/ London school) completely disagrees. This is why you get people like this making statements like this (use real collaborators, test at a higher level) and at the same time you have tools like phpspec which was purposely built to force to mock every collaborator; these two things directly contradict each other. It all makes perfect sense when you realise there are two conflicting different schools of testing, and then over time you gradually work out which school you lean towards. Sadly, the difference between the two never seems to get explained when starting out learning TDD (at least it wasn't for me), and then you get things like this post where people state things as fact, when it isn't fact at all (it's just an opinion from sometime who strongly leans to one of the two schools). No wonder people find it hard to get into testing...
This is pretty damn cool. I'm curious how the speed of, say, the neural network module compares to more native and mature machine learning libraries (e.g tensorflow through python).
Laravel 5.4 removes function that added a lot of unnecessary complexity and always indicates a code smell when needed. FTFY.
I'm trying to be as genuine as I can when I say this, but &gt;Wordpress developers and &gt; and understand security concepts. Are directly contradictory to each other. There are a lot of Wordpress users that just want to hear about plugins they can use and I think the business will do very well - but it won't do well amongst skilled developers.
I think the argument is if your tests have too much knowledge about the implementation, it makes refactoring difficult. Any change in implementation will break the tests even if the behaviour remains the same. Unfortunately naieve isolation often looks like this....
Whoever it was appears to have deleted their comment.
Because it was sent as a PR, and sometimes accepted PRs aren't worth it in hindsight. Your response from 20 days ago is as stupid now as it was then.
Well it says "unit testing is incompatible with TDD" and the title says "Isolation isn't TDD". Neither unit tests require knowledge of the implementation, nor isolation requires knowledge of the implementation. In fact, most materials on writing good unit tests always recommend *against* coupling tests against implementation details. I'm afraid we're guessing, because OP posted one image... If they post the actual presentation we'll know better.
That's cool and all, but what the heck does that have to do with the Demoscene?
Heh, time to use google spreadsheets as a database (if load time isn't a preference) 
Uh, that's not the argument he's making. It probably is a stupid thing to do and a code smell and all that, but it existed in Laravel and people made use of it. He's complaining that you're playing fast and loose with backwards compatibility in a way that Symfony, arguably the other big popular framework in PHPland, never would. At least argue against what he's actually saying, c'mon.
They are all just a wrapper, performance difference is very insignificant here. Especially when you are comparing with python. The strong point of python, is that it has so many high quality data processing libraries already. (stuff like numpy, opencv, etc). Machine learning code is just the tip of the iceberg, data cleansing process is (usually) the main part of the project. 
So you're saying you've made a mistake and accepted a subpar PR. *It happens.* Instead of taking responsibility and phasing the feature out responsibly, you've made a second mistake by removing it irresponsibly. *It happens.* And now you're making a third mistake by giving excuses which directly insult the motivations and knowledge of the PR author, and all Laravel users who've become dependent on a feature officially sanctioned by you. *It happens.* It kinda happens a lot though. 
It's clear you have a pretty strong bias against Laravel. It's not your cup of tea. That's OK.
Then why are you getting your back up about this? Why are you getting into a pissing match over it instead of just saying 'hey, this is how we do things and why, sorry it's not going to change'? If you've got good reason for doing this kind of thing then you can just say so. Keep it written out somewhere and repost it every six months when someone complains, I don't know. You've got nothing to prove here.
I'd be interested to see the presentation when it's available. Got a link? 
Stop using that fucking bullshit framework; problem solved!
If you need a gigantic number of "thumbs up" in order to follow common sense in maintaining a popular project, we have a problem, Taylor.
2edgy4me
Wow, it's like people have known the mysql_* functions have been shit and they deprecated them in 5.5 and totally removed them in 7.0, in a new version, not a release. Everyone expects releases not to break their code when they upgrade.
Oh it must not be an issue because at least 50% of the Laravel community didn't post in that one github issue. Can you also show me where the other 99.92% of your Twitter followers say it's totally fine and reasonable?
Seemed okay for the hour or so I played around with the pre-installed OS, I then installed Mint 17.3 + Cinnamon on it. The only issue I had was needing to use a usb-&gt;cat5 dongle during the reinstall. After the install and update the wifi worked fine. There are a few quirks with hiDPI (docky popup menus are tiny, the sonicwall netextender client is tiny, and a few other small things) but mostly everything is fine, no issues with phpStorm.
Not sure you had to delete this post, although it's your call. I firmly believe that if Laravel keeps handling their releases like this, it'll eventually errode trust in the project and it'll start losing users. Keeping it hush hush does Laravel disservice, even if Taylor Otwell doesn't seem to acknowledge this at the moment.
Videos should be published in a day or two according to the announcement afterwards.
The idea is not to keep the functionality in there forever. Just long enough so people have a reasonable chance to refactor their code that depends on it, while allowing them to continue upgrading the framework safely. 
&gt; data cleansing process is (usually) the main part of the project. Holy shit is this true. I spend 80% of my time scrubbing data. 
You don't have to update the day it comes out. Take a month. Take two months.
I don't disagree with you or the materials. 
&gt; data cleansing process is (usually) the main part of the project. is there a bit of a catch-22 here? how can you clean data before you've categorized what the data is? I'm currently trying to parse street addresses from "dirty" data. Which requires cleaning and parsing.. The cleaning part is hard because I don't even know if it's valid. The parsing part is hard, because see #1. Would a a project like phpml, help me determine whether or not a string is a street address? Which I'm doing right now through a series of regexs.
Address data is not a ML problem, it may help you with some format improvements, but it's not good enough. I.e., 221b Baker Street exist. 222b Baker Street may not exist at all, if you teach someone 221b is valid, without going there, they just cannot tell you if 222b is valid or not. Address data validation is really hard, you'd probably better up with one of those address data processing services. I.e. Google map API. They purchase quality data from multiple vendors per period of time, clean it themselves, and provide you the service. 
Hey, thanks very much. I do try to put some thought into my replies but know how subjective technology is, and how clicky group members can be nowadays. It used to be everyone helped each other, nowadays it seems to be a lot of criticising the other idiot for using the wrong framework/language etc. or even posting in the wrong place. But if I can help 1 person, its all good.... 
switch($_GET['action']) every day
Thank you for giving it a try =) Yes, that's exactly what meant by "quick fixes". I also believe it's not fair just to complain about issues, and started to add quick-fixes last year. Many of inspections have them already: https://github.com/kalessil/phpinspectionsea/blob/master/RULES.md There are several tools which worth checking as well (especially helping to harden CI): * Exakat (https://www.exakat.io/) * PHP CS Fixer (https://github.com/FriendsOfPHP/PHP-CS-Fixer)
Great, welcome to the community! Within 6 months it will save lot of your time and nerve cells)
You hit the nail on the head. Scaffold with a framework but keep your business logic in plain old php classes. 
Majority of good project, that I have worked on, have been written in "vanilla PHP", supplemented with various stand-alone packages from composer. And coincidentally all project, that have use some framework, have been a raging garbage fire. Too many people think, that they can use a framework as a crutch, in order to compensate for the lack of knowledge.
Good to see little shout-outs like this thread. Good reminder that I'm not done :-)
Well, I do agree. But we can't ignore the fact that ~25% of the sites are running on Wordpress. Website owners (businesses) should protect their online resources and know how it can be mis-used by third-parties. I just had a discussion on monday with finns (F-Secure) about the overall lack of website security and the ease of deploying a shitty site which gives attackers a very cheap/ unlimited source of proxy servers for hosting phishing sites, malware etc. We have a good plan (tested) to work this out, but we need some experienced and motivated WP (and later magento etc..) devs to team. 
Huge symfony user here, my background coming from the early php3 era of writing websites. I do still write vanilla php. Lots of it in fact. Usually tools of the cli and cron variety though. But nonetheless for little sites with not much going on, I tend to stick with vanilla, not even micros like silex. Composer has been so wonderful though, and I'm guilty of using it in pretty much all of my projects. Stress level zero. 
``` (new $_GET['controller'])-&gt;{$_GET['action']}(); ```
This hardly seems convincing. First, you're not saying why, you're sort of stating this as though it's a written law that all developers shall use frameworks. Second, all anyone needs is a single counterexample to disprove your claim.
From what I can see in the readme and perusing the code there is absolutely no value to this library. The only thing it provides is a less readable interface to an associative array. Compare this: $yourArray = array(); $dotArray = DotArray::init($yourArray); $mercedes = $dotArray-&gt;open('cars.mercedes'); $mercedes-&gt;write([ 'model' =&gt; 'S-class', 'origin' =&gt; 'germany' ]); $mercedes-&gt;append(['passengers' =&gt; 4]); $mercedes-&gt;write('colour', 'blue'); $mercedes-&gt;delete('origin'); var_dump($dotArray-&gt;read('cars.mercedes')); // Now contains model, passengers, colour to this: //assuming $cars['mercedes'] was defined as an associative array $mercedes = $cars['mercedes']; $mercedes['model'] = 'S-class'; $mercedes['origin'] = 'germany'; $mercedes['passengers'] = 4; $mercedes['colour'] = 'blue'; unset($mercedes['origin']); Sell me on how the first code fragment is more readable, more desirable, easier to work with, or has any benefits over the second.
As soon as you make your own router and reuse it, you are already using framework. It's just that its your own and its small. I would bet anything no one here starts every project by building a new implementation of i.e router or validator. Frameworks are just collection of prebuilt stuff. Or do you actually charge your clients creating everything from scratch? I was never able to sell that to clients 
Outside my day job (which is an proprietary ball of mud) I try to keep those "frameworks" around just for the presentation/HTTP/DI layer of things, and may involve me making a separate "integration" library. The core model stuff, however, needs to be relatively plain PHP that runs the same as normal in a PHPUnit command-line.
This is what I was gonna say. Separate your domain code (written in pure PHP) from your infrastructure code (using frameworks, libraries, etc.). You might want to look up hexagonal architecture as a way to realise this separation, but of course there are other methods as well. This way your business logic isn't coupled to the framework. If at some point in the future your framework of choice doesn't meet your needs anymore, it should be a bit easier to swap it out for another one. At the same time you save yourself a lot of work by letting the framework handle all the controller/routing/etc. stuff instead of inventing it yourself. Note that some frameworks make it easier for you than others to accomplish this.
I don't see the benefit over using an ArrayObject, which I can see as the only feature, since you may be able to reduce memory consumption if used properly. I also mistook it for the dot container package. https://packagist.org/packages/xmarcos/dot-container
There are a lot of new things on that list. Each of those has their own importance. It is absolutely okay to not use most of those things, but some are just a little far away. Using docker is far less important than using composer. * Having tests is nothing wrong. Call it TDD or anything, but please write tests. Michael Feathers in his book defines any code without unit tests as legacy code. * You can bundle your own utilities as composer package with their own tests and use it. While docker makes you a server infrastructure kind of effort, composer is just a way to keep things clean. There is no reason not to use composer. Putting both in the same category can be misleading. * A lot of us have learned PHP without using frameworks and it feels easy enough. However, weigh the pros and cons of using a framework. Most modern frameworks remove big bottlenecks which you might have missed in your own framework. There is hardly any performance overhead in using frameworks anymore. At the end, it is a personal choice. I always go for one of these micro-services to get up and running with small projects.
If one puts this data in an object and passes it to code from which you can expect heavy modifications on its structure, then using an object will result in way less copies of the array in memory, depending on the nature of operations that occur. However, that is why the ArrayObject was invented by PHP.
That's an approach I've never heard of. How do you handle migrations? What advantage do you see keeping the SQL it of code? 
I also tend to ask them open ended questions. I find it useful to let them see code they wrote recently and discuss their approach and ask questions about why they made certain decisions. I.e.: why is the visibility here private? Would you consider breaking up some parts into several packages and why or why not? Did you try to use industry standards and use packages already out there to the best of your ability or did you want to reinvent the wheel here for some reason? What was the reason you started writing this project? Etc. I know certain companies will do a code review with the prospective team members and see how well they react on feedback. However, that's probably more suited after an initial interview.
Can only speak for symfony, but that is the only intention of a framework. But imagine yourself being in a junior position, good luck with that.
 disable_functions='' Some men just want to watch the world burn. I'm actually temped to set up a honeypot to see what people do with it.
Speaking for myself, not using necessarily the same approach, I flat out don't handle migrations. My boss is the DBA for the company and if migrations are going to occur it will happen via her with SQL, and I then adjust my own code to fit. Not everything needs to fit the modern paradigm, and I'm quite happy letting her handle the that aspect of it. Out of work, I use migrations regularly for their convenience, but I wouldn't really trust them at work with Sybase and it's idiosyncracies anyway.
here's the link: https://www.stevefenton.co.uk/2013/05/My-Unit-Testing-Epiphany/
Thanks for posting it. I was so busy with framework stuff that I forgot about reddit :)
That is one creepy banner.
build a command line application something like a 4chan downloader, where you call `php -f 4chandownloader.php http://boards.4chan.org/g/thread/59315273` and it loops over the page and saves all the images into a folder for you then make it have a nice help file, learn about the command pattern, try learning about the symfony console component, then try and write your own to mimic the symfony one, learn about bash scripts, shebangs/hashbangs, try making it have a progress bar that moves, rate limit it, create different options for configuring how fast/slow it works, maybe some file renaming etc there's a good project that should take a few days :)
What's the benefits vs [JMS Serializer](http://jmsyst.com/libs/serializer) and [Symfony Serializer](http://symfony.com/doc/current/components/serializer.html)?
ragezone? nsfw nudes? dont think u linked the right one
True, RageZone is a forum, sorry tho. https://discord.gg/quJWed9 there we go 
That's funny, I just started a project that uses google spreadsheet as some sort of config file. It's kinda weird, but why not
Only reasonable use-cases for frameworks are projects (quick marketing projects, business-card sites and POC prototypes), which you don't ever intend to maintain.
Thanks for the write up. I need to try the popular ones, regardless, to stay knowledgeable.
Ugh, why are forums always the worst code?
For the context of open source web developers on Patreon (and shameless self-promotion of my site), here are stats on other developers' Patreon campaigns: * [Evan You (Vue.js)](https://graphtreon.com/creator/evanyou) * [Taylor Otwell (Laravel)](https://graphtreon.com/creator/taylorotwell) * [And here is Alexander's (Yii)](https://graphtreon.com/creator/samdark) * EDIT: [Sebastian (PHP Unit)](https://graphtreon.com/creator/s_bergmann) And tangentially related: [Team Cemu](https://graphtreon.com/creator/cemu) is having a lot of success recently with their Patreon (they are developing a Wii U emulator).
Extended for Enterprise Applications
Because experienced developers know better than to write yet another forum framework.
As long as your "vanilla PHP" is not a single index.php with HTML, SQL and PHP intermixed then it's all good.
Thank you!
Doing purely vanilla php without any common code is a bit too verbose in my opinion. Even back in the old pre-framework PHP days (15 years ago) you'd use a sort of bespoke framework which consisted of a collection of php files that contained common functions: db.php, logger.php, ... You'd use apache as a router, and include/require these files at the top of every php request handler. What happened is that many projects became big projects and for big projects you need a big architecture to keep them manageable, so we got big frameworks. But if you're doing a small project, the big framework is definitely overkill and I find it frustrating that there's so little out there to help build small things cleanly. Even the micro frameworks for PHP are huge. You may be interested in this experiment of mine, which is a miniature blog on top of a nano framework meant to reduce the code base to the absolute minimum of architecture. https://github.com/jsebrech/fiftyblog 
It uses phpDoc to determine the correct types for properties.
It comes down to what the definition of a framework is. As soon as you start reusing common code (routing, rendering, forms etc) across multiple apps then you are, by definition, using a framework. If each app happens to have it's own completely unique code base then okay, no framework. 
Laravel's stats are kind of odd. 3 patrons giving an average of $1000. Is this typical?
they could be businesses giving back. 
Most likely, but it seems like a direct transfer would be better in this case, rather than cutting Patreon in. 
The thing is, donation style support isn't just about the flat dollar amount. You're publicly showing you are willing to support this cause and hope to encourage others to do the same.
This is really on point. I'm not going to rewrite a request/response library, I'm going to grab symfony/http-foundation. Not going to write my own router, I'll grab something like fast-route. I'm going to need a proven db abstraction, installing doctrine/dbal. Don't want to worry about all the gotchas of html sanitizing, so I pull in twig. But after that, all my other files are plain old php classes (controllers/services/models/forms/etc)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
What is this concept of pure PHP? I write pure PHP all the time. I didn't know there was a concept on non pure PHP. Sarcasm aside, just because you use a framework, or a library, doesn't make it "non pure"
&gt; If you discover any security related issues, please email security@mapudo.com instead of using the issue tracker. Uh ..... wtf why?
There's a python lib called usaddress that will take a given string and create an address object out of it. If it fails you can assume the format is invalid. Edit: we used it to batch convert text blob addresses into a valid schema, it worked as well as could be expected with what people enter in when they're given unlimited choice.
People like this fuckwad are one of the reason I do not contribute.
Correct if me if I'm wrong but this can be prevented by name spacing your controllers and prefixing the user supplied "controller" parameter with the given name space it's limited to, right?
&gt; This industry is still deeply sexist and there is a risk and a cost involved with being too visible, or too opinionated, while being a woman I don't see this. I see more and more females contributing and being accepted.
&gt; why shouldn't women be allowed to do that without fear of negative consequences from assholes? I feel like theres a troll or a victim here. Not to be a complete douche. but sex doesn't matter as much as you would think any more in this industry. Yes there are assholes, but theres always assholes in any community. I say bite the bullet and contribute if you want or don't, but don't use your sex as an exscuse not to. Thats like me saying " Because im gay I cant be a software developer" Its the dumbest reason and dumbest exscuse.
I have encountered some sexist people yes, but a lot of the javascript and PHP based open source and even the now "famous" rust is extremly accepting of any one ... regarldess of sex.
This is one of the reasons a lot of frameworks are becoming less monolithic and moving towards being a collection of component libraries. There are a lot of useful components in Symfony and Zendframework that you can leverage in your business code now without having to couple it to the MVC core. I would recommend aiming somewhere in the middle between hitching your wagon to a monolithic framework like ZF1 and rolling your own hydrators, validators, DI, etc
Nice project. How often stats are updated?
&gt;I have been working with PHP regularly since 2005. I started with PHP and HTML pages and wrote a couple decent applications. I built on it and eventually started using objects. I then started trying to grasp frameworks and couldn't, so I wrote my own to help. It sucked, but it worked. Soooo much spaghetti code to get stuff done. This is exactly the position I'm in right now, I followed a remarkably similar path. I'm struggling to pick a framework to throw my weight behind, and understanding all the concepts and construction principles is a bit daunting. So, I rolled my own and, while it works and it's not *too* spaghetti-laden, I'm certain it's not anywhere near as mature or capable as any of the community developed frameworks out there. I'm very much a "learn by doing" kind of person, which is why I did it this way. How did you get past this step? 
Good luck man
Bit is language agnostic by design, and works with any language with a specific driver (see bit-js: https://github.com/teambit/bit-js). Anyone wanna help design / build / give tips for the PHP driver?
Daily. More specifically, they start updating at 12AM EST. Getting data from everything takes 8-ish hours, but i do the bigger campaigns first, so they get done quite quickly.
I would prefer dual booting Windows and Ubuntu, as long as there is no incompatibilities on my hardware with linux... Ubuntu for daily computing and development. Windows for gaming, msoffice...
This might be different for you but I only worked with one target server cluster per env type per project. I guess if you have multiple targets (e. g. multiple clients that get the same version?) You may need to further cluster your config. Again native php files help you with that. I don't know if/how to include another env file in an env file. In php it's just a require statement.
Thank you for the info &amp; suggestion about dual booting, didn't had that in mind :)
I prefer Windows, and I tried almost all that: * natively installed nginx + php-cgi and mysql service in background. I didn't like it, but I have no idea why. * Linux in VirtualBox. Used it for dunno how long. Was happy. * Vagrant - like the previous option, but easy to destroy and rebuild guest OS. Used for small amount of time, because see next option * DockerMachine running Docker locally - I'm currently trying this way of running and so far I like it. Also I tried to use "native" Windows Linux :D but I'm not ready to use it. For me it's a bit unpredictable. Also I know a guy who runs Linux in VirtualBox &amp;&amp; runs IDE in that virtualbox guest &amp;&amp; makes GUI been proxied into Windows = works in windows in that IDE running in the virtualbox linux. He's happy, but I would not recommend to repeat that at home without parents. 
Docker with Mac or Linux would be my choice. Reasons Not many use windows in a production environment Try to run something that mimics production The command line is very powerful, Mac and Linux are very similar, windows is not Apache and nginx over IIS
What does it actually look like? I've yet to find a MySQL app that's as simple as phpMyAdmin (which itself isn't all that simple sometimes, and often buggy).
Lots of counter arguments, but Windows and Mac are the OS's I would choose for a laptop. Ubuntu/Debian/etc on a server is a no-brainer. Compiling stuff on Windows is a pain in the arse (say, you want to compile some PHP extension), and the precompiled DLLs are scarce. Other than that, Windows is _an OK_ choice to develop upon PHP. I know Docker/Vagrant would have make things better and portable, but for me, here is my stack: - Apache 2.4.25 from ApacheHaus. - PHP 5.6 and 7.1 swappable, 64 bit w/ thread-safety (because Apache mod_php) - MariaDB - HeidiSQL - Node. - Console2/Cmder - Composer installed, global bin path added PATH envvar. - SMTP4dev to trap emails. - PHPUnit, drush, psysh globally installed. - xdebug installed (precompiled DLLs) for both 5.6 and 7.1. - mostly POSIX environment with git-bundled mingw. I find full cygwin an overkill. - Self-signed certificate added to Windows/Firefox root certs list. - curl and a bunch of other tools installed/managed through chocolatey. I also have a router setup that gives my laptop a static IP within the local network, and do some rerouting so I can test sites on my phone and toaster. 
I've built my last two projects with Phalcon including a very heavily used application. I looked at it very early on and was concerned about not being able to read the framework code when trying to understand what was happening and not being able to fix framework bugs being that it's an extension. I looked at it again once it hit v3. I too have found the framework very easy to follow, it's easy enough to work around a bug in the framework (if any) by subclassing the component and I refer to the zephir code and framework reference when I need to understand how a component works. Even when you factor in zephir, the learning curve is much smaller that Laravel/Symfony IMHO. I'd still use it even if performance wasn't a consideration as I like that that the framework is simple and lightweight and that my vendor directory only has a few speciality packages. I've installed the framework on linux, mac and windows and it was as easy as installing any other PHP extension.
Nice article. Sometimes it's good to challenge conventional wisdom. I'm actually guilty of wishing PHP supported multiple inheritance. In a way it's strange that any language that supports OOP wouldn't support multi-inheritance. I'm pretty sure Alan Kay and the other geniuses at Xerox PARC likened objects to living cells and drew a lot of comparisons with biological systems. Seeing as how so many biological organisms inherit from TWO parents, you'd expect multi-inheritance to be a core feature of any OOP language. Sure, there are organisms that can self-reproduce, but given how natural it is in biology to think of having two parents from which a child inherits, I'd expect the same to be true for OO classes. Sadly, this is not the case...
Yup
So what? Are there a lot of web servers based on ARM?
These switches/conditions/branches are unavoidable, and having them in the right place (factory) actually simplifies testing.
Is it always a safe assumption that $SomeThing is always populated? Another thought: your php.ini value changed, now making you aware of the issue (via the error_reporting directive). Is it possible that prior to switching to fpm, suPHP was suppressing a warning or notice? 
Hmm. Really interesting.
Arm server with 96 cores. https://system76.com/servers/starling
The discussion presents a false dilemma, I think. The alternative to monolithic frameworks is not "vanilla PHP", you still have the entirety of Packagist to mine for components, and do 90% of what a framework would do for you through 3rd party code.
That's pretty much my reusable API controller, except the implied security comedy doesn't happen, because it's: $api = new ApiRoot(); foreach ($urlPathSegments as $seg) { $api = $apiRoot-&gt;{$seg}; } $api-&gt;{$action}($request-&gt;post() ? $request-&gt;post() : $request-&gt;get()); That's kind of overly simplified for the example, of course.
I'm beginning to suspect you might not actually be interested in the Demoscene after all. Did you even watch any of those badass demo videos I linked?
Plus, isn't one of the biggest used for ARM servers right now in the serving of websites?
Seems like HHVM is still faster especially in Repo mode: https://github.com/facebook/hhvm/issues/7723#issuecomment-285182317 
GCE just launched a permanently free tier (today I think) that includes one of the $5/mo VMs. You could use that if you're comfortable installing MySQL on the same host. 
Fuck. Yes. This is what I've been waiting for before migrating my applications from AWS.
Thanks. Somehow they do not really sync with distraction free mode - sort of. I had those settings but they didn't apply to distraction free originally, I changed it by right clicking in the left gutter - in distraction free, I had to do it every time I entered into it but now they appear to stick. &gt; Right margin Nice trick :)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
With 4GB of RAM dual-boot would be best. These days 4GB is a bit too low for proper development, slapping any kind of virtual machine (including Docker) on that amount of RAM is going to lead to heavy swap usage and performance issues (says the guy who had a 6GB RAM machine - now I have 16GB and sometimes even with this I almost hit full usage)
Yes decided after reading most of the suggestions finally decided to go with a Linux distro :)
Been using the same stack for 2 years but with wamp! Thinking to switch to dual boot &amp; use Ubuntu &amp; windows! Any thoughts?
&gt;I keep both of the additional monitors set to a very dark grey background so that they basically appear to be turned off when I am not using them. This keep all of the pixels from becoming overwhelming. Um...ok
While HHVM has added some features, many of those (or equivalents) are now available in PHP 7.x. Additionally, HHVM is NOT compatible with PHP (even 5.x) - it has what they call in the link on their homepage "minor incompatibilities" - [more than 250 of them found and not fixed](https://github.com/facebook/hhvm/issues?page=1&amp;q=is%3Aopen+is%3Aissue+label%3A%22php5+incompatibility%22) to date. These "minor" incompatibilities include: * [DateTime: Losing microseconds from timestamp inputs](https://github.com/facebook/hhvm/issues/7394) * [Error Handlers: Failing to execute multiple handlers](https://github.com/facebook/hhvm/issues/7303) * Issues with timezone handling: [1](https://github.com/facebook/hhvm/issues/7270) [2](https://github.com/facebook/hhvm/issues/7237) [3](https://github.com/facebook/hhvm/issues/7142) * Serialization failures [1](https://github.com/facebook/hhvm/issues/7258) [2](https://github.com/facebook/hhvm/issues/7253) * [PDO error mode handling](https://github.com/facebook/hhvm/issues/7134) * [Fatal Error on ini_get('display_errors') if it's off](https://github.com/facebook/hhvm/issues/6967) * [Fatal errors not being logged](https://github.com/facebook/hhvm/issues/6963) This is just a small selection of the more serious issues from the first 2 pages I could find. Any single one of these alone prevents me from using HHVM as they are serious issues that I know will break code I have currently running in production. Your application may run faster than with PHP 7.1 - but it'll probably break in really horrible ways too. PHP isn't perfect by a long shot, but in my opinion, in its current state, HHVM does little more than pile even more serious problems on top and is not a viable "drop-in" replacement for PHP.
I'll have to remind this protip when I have 3 huge monitors.
&gt; Are there a lot of web servers based on ARM? Yes one of Europe's biggest cloud providers (Scaleway) was exclusively ARM until recently. The worlds second largest web host (OVH) has ARM servers and is rolling out new lines of ARM only servers across its range.
Ohk, will follow this process, thanks bro :)
He's sitting in it for 8hrs a day. Most companies I've worked for have spent similar money on chairs for staff. Also, not "your" money once you give it to him. Becomes his and he can spend it on whatever he wants. 
Noted! Thanks bro :)
You clearly have never worked at a desk all day.
It's your call. Almost every php-related tool/software works in Windows, albeit a bit painful to setup at first. You can fix the Windows suckyness with Git mingw, and Cmder. Combined gives you a much nicer terminal to work with, and almost every POSIX command working well with Windows. 
27 with 2 21's here. It does put off a lot of light. I don't need to turn on any lights. Also bright screens cause eye fatigue. I come home everyday with my eyes bloodshot and hurting from mine at work. 
Steel case leap is a damn good chair if you are sitting at a keyboard all day. 
&gt; In that graph, it's gone from an average response time of 610ms (for both feeds) to 280 ms. That's a 200% speed improvement over PHP 5.6! I find this hard to believe if you was using opcaching on both the 5.6 test and 7.1 test
OPCache was enabled on both versions Keep in mind though, this is WordPress, meaning lots (and lots!) of global variables, function calls, ... all areas that've seen massive improvements in the 7.x branches. A big Laravel app probably won't see such big improvements, as the code is already optimized for PHP 5.6 or higher.
The office chair I'm sat on at work right now (not electrical) was bought new for about £550, in the UK. We have about 20 of them in the office. This shit's important, and I'll do the same at home ASAP.
You don't know much about chairs.
My office has 60 SteelCase Leap V2 chairs. We paid $800 or so a piece for them. After 3 days of using it, I promptly ordered one for my house. Separately I find it hard to believe that you can be unaware of the standard tech chair, the Herman Miller Aeron, which is right in that price range as well. 
Remove phpDocumentor from composer and use the phar. Problem solved.
Really? Have you never actually looked at office furniture before? 
It still works on 5.2. They *recommend* 5.6 but **REQUIRE** 5.2.4. EDIT: Now they recommend 7, which is nice, but bumping up the *required* number would be even better. A lot of good things came with each minor version.
I deliberately set my brightness low on my work monitors. White looks grayish. Additionally, there are a lot of windows surrounding me so the background is as bright as the screen. No eye fatigue by the end of the day. Ofcourse, if I needed to do design work the turn-it-down solution would be out of the window.
2-3x improvement for Wordpress when going from PHP 5 to PHP 7 is normal. Only 25% improvement is certainly on the low end of things -- of course, this depends on how I/O bound the code is.
It's quite boring, look up the Decorator pattern. It's essentially runtime inheritance, where at runtime you specify who the "parent object" is. As long as the parent object and the decorator object implement the same interface, the Liskov Substitution Principle is intact: the decorator can stand in for the parent. The decorator can also augment and override parent methods. One difference is that composition doesn't potentially break the encapsulation of the parent. This makes it safer than classical inheritance. I.e. in classical inheritance, you can for example forget to call a parent constructor in your constructor, and this will break the object. In decorators you can't make the parent constructor not run. The situation is similar when "overriding methods".
I mean I've been sitting in it for three years now. That's less than $1 / day.
Strange, in my own projects the 2x rule of thumb is pretty close to reality. Where is your source of what "most companies have reported"?
Ask for Trello. It saved my sanity. The benefit of it is that the manager cannot clutter it in any way. It's just simple and it works no matter how much you try to over complicate things
I agree. This feels like a cry for attention. Almost click bait.
Have you tried Flux? It's great, and once you have it you can't go back. 
Yea, but I can't install on my work computer unfortunately.
Indeed that bit was not clear. Fixed. Thanks for suggestion.
Oh! I love Elite since first versions for Sinclair and ZX Spectrum :) btw., worth adding your projects to http://yiipowered.com/en. Would result both in more traffic for you and a great good for the Yii community growth in general.
Thanks! We're not so sure about using TRello because of the all Atlassian thing.
A hello world on a framework or a wordpress install then maybe 2x is possible. From my own code basis 25% improvement is pretty much the normal, this is still a significant increase of course but no way near the crazy numbers seen on hello world examples 
I reckon GH is not preciselly a project management tool (And also it's rather bare when it comes to it) but with such a small team, we don't need much more, and with the things it has out of the box we're more than happy. We're currently testing Asana, and I'm a little worried that we kind of lost sight of PR there. We had to deal them by hand, compraed to GH that has them embedded completely (what's obvious).
... I'll pay you $1.00/day for it
&gt; Taylor hate Where? That seems dumb. I guess anyone that becomes relatively well know will have detractors.
https://www.atlassian.com/software/jira
I can't be bothered going back over pages of reddit posts to get links but here is a recent one I recalled with hard facts: https://www.goivvy.com/blog/magento-2-php7-25-performance-increase This is just a default store as well with no modifications. Add in a store with heavy modifications and custom code and the 25% improvement wont be as much. Don't get me wrong..... even if it was just a 20% increase for nothing (just upgrading) is amazing but I'm sceptical of people claiming 100%, 200% increase. If this is the case it can only lead me to believe there was either: * A mis-configuration in the previous PHP set-up * Poor code quality in the code base (globals, excessive function calls, lack of good caching practices) * Poor infrastructure set-up Sure if I write a hello world programme or use something with a poor architecture I *might* get 100-200% on a single server without properly caching HTTP and the application its self, but everything I've seen out in the really world will not get more than a 50% speed increase, memory usage is usually 5-10% better and requests per second will get an increase but this again depends completely on your server proxying and how many application servers you're running.
That makes much more sense :) I can throw $5 a month your way to keep up this work
A lot of people give Taylor flack for not building Laravel their ideal way, but the way he wants his framework to work.
How you like it? I have no real stores local to me where I can test these chairs out and I'm hesitant on paying that much for a chair. Although my co-worker has what he compares to herman miller as almost as good, paid $300 for it online and loved it so much that he bought one more for his office and one for his dad. I'm gonna give it a try when I head up to Minneapolis to spend the week working out of his office and if I like it pick one up too.
&gt; Leap is you can often find them used for 30% of their retail price This is a good tip, I suppose I've never had reason to look as chairs I've used in the £100~ range have always been great for me
That doesn't stop them from hating on him for it.
&gt; You're skeptical based on one product Nope I'm basing it on hard facts and figures from what others have posted and from large scale custom e-commerce systems (of global companies) our team have been working on (currently 7 we have upgraded from 5.3-5.6 up to 7.0), the results are pretty consistent. 
I'm usually skeptical when the claim is made but the verifiable benchmark is missing. Just the other day I saw someone claiming 60x improvement but when presenting the benchmark had to revise down to 4x...
[Is that you, Linus?](https://s-media-cache-ak0.pinimg.com/600x315/33/b9/b9/33b9b9055c03aa4faed486fe2d91b70e.jpg)
It's so much easier to complain about things, though 
I saw a ~5x speedup on a script between php5.6 and php7. The script was fetching stuff from mysql, doing some computations, then saving them back in db. On php5.6 it was taking around 1 minute, on php7 it took &lt;20s. And this wasn't a synthetic test, the script was solving a real life problem, and existed way before php7.
Nothing changed. They said nothing will change.
Yes. There is a docker image here as well: https://hub.docker.com/r/hachque/phabricator/ The previous company I worked with used that image for their installation.
I own the same chair, yes it's a lot of money but IMO it's worth it. Many people wouldn't have a huge issue paying that much for a mattress because you 'spend a third of your life on it,' well another ~third can be spent in your chair while working. Also these chairs have a lot more to them than a standard computer chair. Adjustments like: Arm rest height, arm rest angle(/ \\), arm rest distance from center, recline distance, seat position forward/backward, seat stilt, lumbar, etc. etc. If you've never used a chair like this for an extended period then I don't blame you for not getting it. I didn't realize how big a difference a chair can make until I got a job where I had a SteelCase Centurion. Though it's worth noting I got my chair vastly discounted from a business furniture supply warehouse. You can get stuff like that chair for $200-300. I also got a big ass SteelCase desk for $100. 
There's a lot of bullshit there. "Automattic doesn't own .org they own .com" except the core WP devs all answer to Matt Mullenweg, Automattic's CEO. So the distinction here isn't very meaningful in practice, it's more of a legal formaliy. That the name of the company (Auto**matt**ic) contains the CEO's first name reeks of narcissism to an outside observer. Mullenweg's ambition is to get WordPress to power 100% of websites. He'll cut down any security initiative that impedes on adoption rates (which he frames as a "usability problem"), especially for the percentage of users still on PHP 5.2. So, as long as they can get more users by supporting PHP 5.2, backwards compatibility is sacred. Don't expect that to change until there is literally zero risk to their adoption rates.
Thanks!
I'm pretty sure he's ~6'4" so I doubt it.
That is 100% non-sense. I reckon the only projects where you shouldn't use a framework are small command line scripts, or really big enterprise stuff where you want absolute control of every piece of code.
I imagine it's not so much about the framework than him being a loud voice in the PHP community. It's all politics...
Are there any stats about what percentage of WordPress installations are on which version of PHP?
Nothing that a couple of poorly constructed plugins can't correct.
This is very true I do not have a degree in chairs but I know value when I see it
&gt; PHP has a "trait" feature of course, but they have some major drawbacks, particularly the inability to determine if a given object implements the trait. We've since abandoned the use of the trait-detection mechanism in our projects, [but we've previously used reflection](http://php.net/manual/en/reflectionclass.gettraitnames.php).
I would just use the default terminal emulator. I use Xubuntu so that would be the xfce4-terminal. Changing your shell is done via the `chsh` command.
It's actually a good note, I appreciated it.
Taylor disliker here. He doesn't seem very responsive to legitimate bugs and concerns if they don't fit within his agenda. He also doesn't seem to have very much concern for backwards compatibility. He will tweak the framework however he sees fit without regard to how much pain it will cause people to upgrade.
&gt; OPCache was enabled on both versions That does not mean you are running an identical OPCache configuration directives.
Try asking in /r/phphelp
I will 
Still same number of insecurity and bloat, though 
Yes, but now it can be penetrated 200% faster!
&gt; This won't show in the GUI [php warnings...] Since I have no interest in maintaining plugins and lack the time to learn how SVN works again to submit a PR or patch, I simply disabled warnings in PHP. I don't understand this. If you don't care about them why disable the warnings? Now if something really breaks you've lost one of the best sources of information about it. It's really that hard to ignore or filter a file while waiting for the author to fix it? And you don't need to learn SVN or create a PR, an issue is more than enough to reproduce and fix most PHP version problems.
When I started working, I got a tip to use the most uncomfortable chair I can find (not the worst quality one, just uncomfortable). The main reason for this was it will make me stand up and take a short break/walk quite frequently. Sitting a lot in one go can be very bad for whole body, so a short walk every 45 minutes to an hour is a good thing. But, I am getting older, and I think my body would be very happy if I got one of those chairs. But on the other hand, that would make me sit a lot longer in one go... 
In other news Wordpress' code base is still a big pile of shite. 
Because why not? And Sublime has tools for debugging.
I have dual booted Ubuntu &amp; windows 10 an hour ago. What should I install for local dev? Xamp or separate stuff like an actual VPS and point that to a fake domain &amp; change my hosts file?
Can you provide a legitimate bug you would like to see fixed? I would be glad to take a look.
Yeah, I will admit it is sometimes hard to refrain from responding to random complaints on Twitter. When you work on something for years and put a lot of late nights into it, its hard not to respond *particularly* if you feel like the comment is trolly or unwarranted. I felt like Anthony's particularly comment was phrased in a pretty trolly and dismissive way, and gave him a trolly response in return. In hindsight, I think it's better to just not respond at all. If people want to improve things, they can jump in and participate or even email me directly (which I almost always respond to). I think being an open source maintainer is a fine between being patient and gracious and at the same time not letting people walk over you (because they will definitely try to).
It really depends on who is making the criticism and what tone they are doing it in. I think if you talk to me in person you will find that I am pretty open to hearing about what we need to improve, and even have asked on Twitter several times for people to tell me the worst thing about Laravel so I can look at improving it. I basically do this every release cycle. However, sometimes it is hard to refrain from responding to somewhat trolly or dismissive comments online when you have poured a lot of time into something. At the end of the day, it doesn't really matter... if Laravel died tomorrow then I had a great experience, met a lot of interesting people, and saved enough money to retire early. But, it's still hard to not let things get under your skin. I think being an open source maintainer is a fine line between being patient and understanding and not let people walk all over you. Hopefully I can find a nice balance and improve your impression of me in the future.
Hey, from your other thread I should have mentioned that you need to use the `zsh` shell to use the `oh-my-zsh` plugins. 
Oh okay! That means I need to change my shell? Also what exactly is the shell? Some examples that can clear it's definition of what exactly is it?
Download vagrant/virtual box and get it working. Then look at something like ansible to be able to provision your dev and live environments to be exactly the same.
My machine has just 4 gigs of RAM, so are the VMs still good to go with?
That sounds scary to me tbh and you are going to use a lot of swap. I have 16gb and still run into memory issues.
Dual-booting windows and Ubuntu will be your best bet with 4gb or ram. 
https://www.digitalocean.com/community/search?q=ubuntu
The shell is basically an application that lets you interact with the kernel and other aspects of the system. The `BASH` shell is the default shell in a lot of cases - just like Ubuntu. You have to install `zsh`, which is a different shell than `BASH`, and then change which shell your user uses. [I found this to help you out.](https://richardtape.com/2014/08/03/installing-oh-my-zsh-on-ubuntu/) Edit* Note that this is for a VPS running Ubuntu, skip everything up to the "Installing on Ubuntu" part.
It's always the "SEO" plugin.
Yes, you would of course see major improvements with opcache properly configured. 
Real time code analysis has immensely improved my productivity. It's prevented numerous hours of debugging and the occasional "why does PHPStorm think this is wrong?" has led to learning knew things about PHP and best practices.
Using sublime instead of something like phpstorm explains all the magic. I finally understand :)
Trolls are going to troll. This is the message for reference. https://twitter.com/ircmaxell/status/632422970636419072?lang=en
Thinking outside the box here. Maybe get a raspberry pi and throw Ubuntu on it. I use Vagrant, but you said that you only have 4gb of RAM which will be tight. Anther option would be to just buy a cheap VPS from Digitalocean or Linode (tons of options for providers) and play around with it. 
Out of interest, where do you work? Or at least what kind of size organisation is it? I'm wondering how it is culture/revenue wise because while we have decent-ish chairs there's no way they would spend that kind of money and I'm getting a little sick of settling for "ok". 
Doesn't mean you are running the same version of PHP in both instances either.
The company I was working for when we got the chairs was acquired by another company at the end of last year. When we got the chairs we had 2 offices, and about 20 members of staff. They were a web development agency, mainly specialising in enterprise CMS builds, and hybrid mobile applications. The company that acquired is is quite similar, but much larger. I think we must have been doing pretty damn well off though, especially for such a small company, as the office I work in is still owned by the person who was MD of the company I worked for. We had enough money to get a proper leased line too for example, and had the office newly renovated. To be honest, in general, I think I'm incredibly lucky to be where I'm working now, because in fact where I'm working now has a few pretty well known people from the open source PHP community in it - and it's a fantastic environment to be working in.
Try https://serversforhackers.com Has a lot of good info I would suggest picking a terminal editor, vi or vim is my choice but emacs is up there. Start a dotfile for your preferences Yes the GUI is nice but the command line is a must, try to learn how to do something from the command line first
&gt; He seems like a good dude He's not.
good ole emacs.
[removed]
&gt; From my own code basis 25% improvement is pretty much the normal If you do too many db queries it is quite possible. On my projects (symfony apps) I see 2X+ improvement.
&gt; finally decided to switch to Ubuntu [...] So to be as close as possible to live env My advice is **NOT** to do this. Your developer-desktop machine has a very different set of needs than the application-hosting machine. Trying to combine them in one place eventually leads to frustration and annoyance, especially if you ever need to develop in more than one version of PHP. Instead, use your desktop as a *host* for either full Virtual Machines or Docker containers. All the important mysql+apache+php stuff should be in there. Merely share the PHP *files*, so that your desktop can edit them on your with your favorite tools, but they can be *run* inside the VM/container. Currently I'm toying with this project: [docker-php-library-demo](https://github.com/DHager/docker-php-library-demo) . It purposely doesn't go as far as having a webserver or database (yet), but that way the basics of setting up a separate docker environment (on either Windows or Linux) are easier to see and learn.
Pick any. 
I guess that tells you how absolutely terrible WordPress is.
3 landscape but one swivels to portrait when I want. All 3 same type of monitor so they look very much alike. However I am looking to switch to an ultra wide and possibly 1 portrait. 
And a Commodore 64 can have an IPv6 capable OS with a web browser run in 64k of RAM. Technology sure is amazing on all fronts, ain't it?
Uhh... You can configure custom 404s in your web server configuration... Why would you use a plugin for it? 
Do you have any numbers for PHP 7.0 vs 7.1?
can you explain in detail how this images get corrupted.
His original comment was unhelpful and trolly, though I don't expect you to agree since you are a pretty consistent troll yourself here on /r/php.
I feel sorry for you. I guess you have nothing better to do than spread hate. 
Thank you guys, will give a read :)
I manage 20 WordPress sites for a client. We moved to php7 couple of months back and all the sites saw &gt;200% response time improvements. Some even went from 2 seconds to 500ms.
Yeah other redditers also said the same 4 gigs , dual booted already , chrome &amp; code editor you already may not have space left to run VMs :(
A lot of the 404 plugins parse the url and try to link keywords to relevant posts or possibly the correct post. Mostly in an attempt to increase user engagement. 
Thank you Bruno for sharing the correct resource :) Seems a good amount of money when converted to my National currency also I don't earn yet, so have to wait to get it! None the less, thank you for writing such an awesome resource :)
Noted! Thank you so much :)
Ah okay! Will keep this in mind. Thank you so much bro for the info :)
lol, stay classy WordPress.
My pleasure, [here's](https://www.sitepoint.com/re-introducing-vagrant-right-way-start-php/) a good free resource as a starter, and two free chapters from the book itself [here](https://www.sitepoint.com/php-application-environment/) and [here](https://hostadvice.com/blog/anatomy-web-requests-php-perspective/). Sorry, all I'm allowed to share :/ For a cheaper solution you can get it [on Amazon](https://www.amazon.com/Jump-Start-PHP-Environment-Language/dp/0994182643).
echo $_SESSION["hello"];
It shows nothing when before defining `$_SESSION["hello"]` It shows 1 after defining `$_SESSION["hello"]` I thought `$_SESSION` variables are supposed to stay until browser close. They aren't.
Arguably none of these are really forgotten. Just coding constructs which are used infrequently or not at all (and mostly for good reason).
Phpstorm has a built in server to dynamically serve multiple php projects without having to swap the contents of www/html. Php can be a time vampire. When your code isnt behaving properly, features such as code hints and autocorrect may come to the rescue. Aside from that you'll save tons of time. 
Oh, session_start must be called before HTML tags... Didn't know that
Come on guys Ok, you're all banned on Google, but what about making a break for at least a week before asking *this* question again? Yes, framework is a must. Laravel is the most user friendly out if modern frameworks. Go for it
If you're doing _serious_ work, you will need it since you can skip a lot of steps. Though, depends on how knowledgeable of PHP you are now. It's good to know basics and how to do things without frameworks.
Please search for similar question both here and Google. Its been asked way too much.. Simply put, when you know the parts of the car, you dont want to rebuild it just to get going. Espesially when you can get top notch free from the factory. Frameworks lets you start coding your core business logic straight away.
This was very informative, thank you bro :)
In all cultures, including animal cultures of social animals, two gender roles are well differentiated and they correspond to their gender at birth.
The only thing I offer is truth.
You would know.
Torrent it.... Knowledge should always be free!
This is what teenagers actually think.
Maybe we can do the same to Laravel 🤔
Translation (via Google): "After a formal notice, I removed the tutorials that concern Symfony from the Site. There will be no future videos about the Framework." And in another tweet, he quotes (apparently Sensio saying): "Your activity competes with our training center" I've been a Symfony user since the early versions (1.1 or 1.2) and really like it. If this is true, that Sensio want to monetize their training and hurt the community around Symfony, then this is a big red flag. For what it's worth, Symfony is heavily influenced by Spring. If you enjoy using Symfony, try Spring Boot! It's a joy to use Spring Boot + Java 8 + Project Lombok. If Sensio don't want you, Spring/Pivotal do!
If this is true, I'm no longer the fan of SensioLabs that I was.
Maybe SensioLabs allow tutorials of any form that *doesn't* requires to pay. Maybe GraphikArt didn't respect this rule. (Not verified) I personnally hate Symfony, both versions.
Why did he delete the videos is what I want to know??? Sensio have NO legal grounds to have a takedown notice (DMCA) issued on those videos. In fact, I would go as far as what they are doing is a violation of Anti-competitive laws if they specifically stated "Your activity competes with our training center" in their takedown letter. I'll send an email to my companies lawyer see what input he has on this.
We know... PHP used wordpress to show off "how much faster php7" is, and guess what, 1 year ago wordpress was 200% faster then php5.6 what a low quality post tbh.
Yeah, All we need is google to make the switch to ARM.
To be fair (not to say WordPress is safe) this particular vulnerability is due to the w3 caching plugin, not WordPress itself.
The videos weren't published by me, and available for free on youtube. But my website sells "premium" subscrbtion to access source code. The main problem I think was the search engine giving me a good position on keywords like "Formation Symfony" (Symfony courses in French) 
After reading through everything I could find about this I came to the conclusion that from now on I won't be using the Symfony framework anymore to create anything. Plenty of great frameworks to go around. For me it comes down to SensioLabs acting like a big faceless bully. They could have easily come to a solution without having to remove the videos. This is a big blow to this site and business. @Grafikart_fr does mention a youtube playlist by Devandclick that remains on youtube: https://www.youtube.com/watch?v=2ngvCQd-l74&amp;list=PLzPK7Fy3SN2cvLglujdweDKNMNQhHDbTT
That's the worst* solution IMHO, you are acting as transgressor and limiting the reach of the videos instead of taking action against something that is clearly unfair.
(:
I may be misconstruing your comment, but IANAL so I guess they are not forcing their content.
If you own a trademark you are actually required to enforce it or you can lose it particularly if it's a case of blurring or tarnishment, etc. Not sure if that was the case here since I can't see the videos but I doubt it.
Ah thanks Taylor. You'd know more about that than I would...
AFAIK Laravel doesn't use the name symfony or their logo, so they should be fine...
Surprise, a profitable open-source company has a business plan where some things aren't free.
You wouldn't ask people to take down Laravel tutorials though right? Or am I missing something?
I said clear cases of blurring or tarnishment. I didn't mean crawl the internet for every usage of your trademark. Sorry if I was not clear.
Not normally. It depends entirely on if they are trying to mislead or are trying to maliciously appear like an "official" Laravel source. If it's clearly a user / community production then it's fine with me... :)
Can't image why anyone would do differently
That doesn't seem terribly unreasonable to want to maintain a quality network of training materials via branding, but at the same time... it seems restrictive for open source and kinda helps me in making my decision about what framework I'm ^^^not going to choose for an upcoming project. 
looks like fabpot had no part in this decision, good on him for personally investigating the situation.
I've always admired and looked up to fabpot, so I was hoping it was just over zealous lawyers or something. So I agree and hope this can be resolved. 
Yep noted! Thank you :)
:D
This has nothing to do with the tutorials itself... It has to do with the way in which it is using a trademark to promote the content. Change the wording, remove the logo, and this is all resolved. Good job on creating more drama then was needed.
IANAL, but you are correct in some cases: Loss of Rights Due to Naked Licensing or Failure to Police “Naked licensing” is the term used when a mark owner licenses the use of a mark without maintaining any control over its use. Trademark law “places an affirmative duty upon a licensor of a registered trademark to take reasonable measures to detect and prevent misleading uses of his mark by his licensees or suffer cancellation of his federal registration” Dawn Donut Co. v. Hart’s Food Stores, Inc. 267 F.2d 358, 366 (2d Cir. 1959). By granting someone the right to use a mark and then failing to control their use of the mark, one will essentially be abandoning the mark and risk losing the exclusive right to use the mark. Example: Bill grants Frank a license to use the mark “Mooncorp” is association with Frank’s new shoe wholesaling business. A month after being granted the license, Frank decides to change the way he does business. Rather than wholesaling the quality shoes he has manufactured in the past, Frank realizes he can make more money with less effort if he imports cheap foreign-made shoes, affixes the Mooncorp label, and sells those to shoe stores. If the license included no provisions for quality control, or if Bill fails to reasonably inspect the quality of the merchandise bearing his mark, a court might find that the naked license results in abandonment. See Poole v. Kit Mfg. Co., 184 U.S.P.Q. 302 (ND Tex 1974); Engineered Mechanical Services, Inc. v. Applied Mechanical Technology, Inc., 584 F. Supp. 1149 (1984). See http://nationalparalegal.edu/public_documents/courseware_asp_files/patents/Trademarks2/Loss.asp 
&gt; ERR_CONNECTION_RESET and if you try another browser, does the problem remains?
The issue seems to have been resolved amicably: https://twitter.com/fabpot/status/840613262118985728 
Reminds me of... if my neighbor takes feet of my land and i dont contest it... after a certain point it becomes theirs
Ah, didn't know sessions were linked to headers I don't know much about headers; just redirecting and what they are, not what they do
Man, I have no idea what could that be. Sorry.
its the mod security in Godaddy which is blocking the image for some reason. I asked them if they could turn it off or work a way around, they keep on denying and told me to review the file. 
You can make that image the background of your advertisement container using https://developer.mozilla.org/en/docs/Web/CSS/background-image Don't forget to set the display, width and height properties of that container. However, you are correct in assuming that this really isn't the place to be asking this. If you want a quick intro to web design, I advise you to take a look at CSS Tricks.
FYI, the word "Symfony" can be used in the title of any tutorial video specifically about the framework. It's considered fair use and completely legal. 
**1.** Any class property that you do not explicitly set a value will be `null`. I'm not going too into the opcode, but both versions are practically the same. I personally prefer to set default values for class properties if I know them before hand. **2.** A return type is not allowed in the constructor because a constructor doesn't *return* anything. The whole purpose of the constructor is to instantiate the class (i.e create a new instance of the class). If you are looking to create a singleton design, you can restrict the access to `__construct` with `private` or `protected` access modifier, and create your own static method that returns anything you wanted the constructor to return. Judging by your code, I'd recommend taking a look at late static bindings, and why composition is preferred over inheritance. The classic vehicle-&gt;car example is often frowned upon in modern OOP world. 
There is a difference. When you give a value to distance upon declaration ( private $distance = 0; ), $distance will be 0 if statically accessed (Car::$distance). In the other case ($this-&gt;distance = 0) $distance will have value 0 only if you instantiate the class. Note that you should declare class properties as static (private static $distance = 0;) **if** you want to access them statically, however in my experience PHP will (sadly) let you statically access class properties and methods even if they are not declared/implemented with the static keyword.
In `private $foo = VALUE`, the value should be a constant (null, bool, int, float, string, array of those). It can't be an object, or an anon function etc. I'd suggest initialize the value directly via the property declaration, if the value is a it's a constant. If it's not, initialize it in the constructor. &gt; Also, why it is not allowed to set up return type of the __construct function? Because the implicit return type of a Car's constructor is always an object of type Car. You don't have to type "return $this" nor set a return type. 
I'll tell you this: We upgraded our hosting environment from PHP 5.2 to PHP 5.6 a while back and lost ~40% of customers in a month. It was a major financial hit, and one I could see a lot of companies not wanting to take.
What do his farts smell like?
If it doesn't return anything, why it doesn't allow you to set up void return type?
You work at a hosting company? Shouldn't you have offered multi-php capability and allowed customers to choose a specific php version per domain?
Thanks for the comment. Let me know if you have questions.
&gt; can't figure out what is (if there any) difference From the OO point of view there is no difference. You should look at objects from client point of view (code which will interact with object). Interfaces of objects is important. (do not confuse it with `interface` keyword, this is just a way of describe interface without implementation). Classes are just a way of describing objects, you shouldn't really care about them. You could imagine objects as simple computer units with it's own isolated memory. They allows you to send messages between the objects (calling methods) and so on. If you want to see truly OO language - take a look at Erlang. It doesn't have classes so it much better to show concept of actor model which OO is all about. &gt; Also, why it is not allowed to set up return type of the Constructor isn't object's behaviour. This is kinda hook which is called to initialize object. So basicly it can't return anything (unleas you are in javascript where constuctors can return value but in JS constructor is just a function).
Thanks for the feedback and your time listening to my talk, I really appreciate it. I missed first 10-20 minutes of Magento Contribution Day but yeah, it was fun and exciting to work on Magento 2 bugs :).
:)
&gt; https://3v4l.org/OUV66 Constructor isn't allowed to declare a return type. &gt; https://3v4l.org/TXNav Turns out the constructor _can_ return anything, but still its ignored and the variable you assign it to still gets an object of that class. 
I'm offended.
um... no? https://3v4l.org/3Guv8 You can't access any class property statically unless you declare them so. AFAIK, that is how PHP worked for all the versions.
Unless they have a US trademark and wish to protect it.
Can't beat that :D
If I'm not mistaken, this screenshot is from cpanel: http://i.imgur.com/AVE4jZi.png On that server it offers php 5.3 through 7.0.x At one of my old shared hosts they e-mailed me personally to find out if any of my more complex php sites absolutely needed to stay on an older php version in which case they'd leave me on the current hardware my account was on while migrating all other users (up-to-date wordpress sites and simple brochure sites with php contact forms) to different hardware with a newer php version.
This is actually .... satire? Because unlike other languages its actually easy in php to just do: `&lt;?php echo 'hello world'; ?&gt;` Unless you are doing that really old article where they showed how overly complex java was, but PHP can't compare because unlike java, its legit that simple, we just choose to make it complicated based on our needs.
Can you link to that Java article. I'm having fun with the ridiculous strictness in Java, in a class right now
MySQli It is a 'better' replacement for the older library (the mysql* functions). The real answer right here is that you should take a look at the PDO functions instead. Use those, don't use the mysqli ones, or any 'database specific' ones. Use the PDO functions, always. If for some reason you HAD to use straight mysql functions (can't think of a reason), you should use mysqli. But, don't. Use PDO. http://php.net/manual/en/book.pdo.php
Hi /r/PHP is not a support subreddit. Please visit /r/phphelp for help
This To add on to this answer, get comfortable with prepared statements and data binding. It may not appear intuitive immediately, but it protects you from SQL injection attacks.
From it's own summary, with my takes in italic : &gt;Disputes like “Why do I need PHP if there’s Java?” have become more frequent nowadays. **I don’t know who’s in the right, Holly Wars are tricky**. But each dispute has an argument in favor of PHP — it’s easy for beginners. To my mind, this argument isn’t valid anymore, which is exactly what I was trying to say in this article. A novice programmer will have to learn lots of new things, as well as write tons of configs: frameworks (very similar to java frameworks *(my edit: NOPE. I noped out of Java spring into php for this very reason...)*), databases, linux, shminux, JavaScript with all its baggage, http-protocol, various tooling and many more. Even if it’s not SPA. &gt;Even if my article doesn’t become popular, **I’m not going to change my mind** *(my edit: who's creating the holly war ? you don't know who is right but fuck the other guy ?)*. It’s something like this: &gt;SPA comes more and more into our lives, and we should know how to deal with it, at least in general terms. *(my edit: still never had to build one for work. Did one out of curiosity on personal time, but...)* &gt;You can’t build a decent modern application without frameworks. *(my edit: LUL)* HAHAHAHAHAHAHA someone hates PHP and loves Java ... And tried to prove his point using the most java-like framework, symfony... So many biased or missleading or plain wrong absolutes in this article... I get it you don't like PHP... It's your absolute right. But this isn't an argument against PHP, this is just a joke. A lot of the complexity you talk about isn't always needed, and only introduced by the tools, design and solution YOU chosed. Move on with you day, nothing to see here, or have a good laugh reading it, if you have some spare time. ---- EDIT : Just for fun, this comes from the third paragraphe of the introduction &gt; First, we need to realize that no one makes applications without a framework nowadays. Lol ... I'm perfectly fine with raw PHP for simple stuff ... And before going to a framework you can have 1 or two libraries (router/templating/db) &gt; Therefore, we’ll take a modern and popular framework, e.g. Symfony. Basically the PHP version of spring in Java &gt; But it’s better to create a database before installing the framework. ????? Fuck the framework and it's migration tools I guess &gt; Why the database? Well, I guess we shouln’t hardcode the “hello, world” string directly in the source code. Unless you know it won't change, or you want it in a view ... A lot of home pages are simple HTML view without much database code... And that is only the introduction...
I have zero issues running php storm on a 4k display. I recall having to set a runtime variable to enable it in the past, but I believe that isn't necessary anymore.
For someone just starting out, I think it is the best answer. Start with PDO, versus some mysql* library, then in the future if you're doing some targeted optimization, take the appropriate action. But for just learning PHP and forms, etc, PDO all the way.
&gt; but I imagine you can't just swap out PHP versions easily with it. You literally go to a pull down menu and select the one you want. &gt;I can't think of anything that would break in a 5.2 -&gt; 5.6 migration You've clearly never supported third party Wordpress deployments. There are a huge number that plugins that are PHP 5.2 only. 
even easier &lt;?='hello world'?&gt; 
Sounds like a good host! 
I remember most issues being associated with SEO plugins, but I don't have names unfortunately. Naturally, a lot of businesses have an attitude of "number of SEO plugins directly relates to profit".
[PHP Simple HTML DOM Parser](http://simplehtmldom.sourceforge.net/) would be a great solution for simple web scraping.
To the best of my knowledge there's zero performance benefit to simply using mysqli over PDO, and there are very few features you can't use with PDO (perhaps you could give examples of ones you're aware of). Async queries is the only feature I see specifically mentioned in [the MySQL manual](https://secure.php.net/manual/en/mysqlinfo.api.choosing.php), but I've never seen this used in the wild - probably with good reason (the complexity added, vs the fact that in the vast majority of cases there's likely very little the code can do while it's waiting for results due to the nature of web applications and the request-response cycle) Most DBAL / ORM libraries I've come across also use PDO, which makes PDO a better choice as it's easier to integrate with them. As others have said, if you're at the point where you need advanced features / targeted optimization and you can specifically say mysqli will give you something PDO won't, then go with mysqli. But up until that point (and given that most users probably aren't even knowledgeable enough on MySQL basics such as setting up indexes correctly) I would recommend PDO.
https://github.com/jwilder/nginx-proxy - this approach is better. I personally use dinghy-http-proxy.
He's probably quick because he has learnt it well. Learn the framework your interested on and get results with it. I'd recommend laravel with laracasts or symfony and stick with it.
Generally, convention over configuration are faster when you are used to the framework. The learning cure are softer, too. So, frameworks like Laravel or CakePHP, when you follow their rules, are faster to start and to have something small/médium done than Symfony (the same with Rails, Django - they are insanely fast to start and have something small/médium dons). Take some time to learn one framework and try to develop something simple on it. If you like the rules and syntax keep using it.
that escalated quickly
You could give this https://github.com/laravel/dusk a shot. Its primary purpose is mainly for testing, but people have successfully used it to automate various browser tasks. It also understands JS, which is great for automating web-app related stuff.
Do you prefer camelCase over under_scores when writing your test methods?
For example If I'm working editing the source code of the website. Is FTP okey, I'm connecting through Netbeans because PHPstorms hangs on validating server. There is also webdav, maybe phpstorm doesn't hang with that. Still, When I say FTP everybody goes insane and Say "FTP what years is this?" 
Take a look at [Symfony DomCrawler Component](http://symfony.com/doc/current/components/dom_crawler.html)
What about [https://github.com/FriendsOfPHP/Goutte](https://github.com/FriendsOfPHP/Goutte)?
He's probably used to using CI, but it's code base is honestly pretty dated. Last time I tried doing a project in CI, I spent a lot of time rebuilding things that Laravel just hands you. I switched it to Laravel after a few days.
You need to swap the order. $imagesArray['images'][$var]['name'] ... or instead use foreach as suggested: foreach($imagesArray as $img) { $img['name'] ... }
&gt; why not just using jQuery? Unless he is using JQuery for something else than AJAX, in which case I'm ok with it, why not use axios ?
I personally would recommend using git and optionally a deployment script to push changes without needing ftp. Then once you push a change you could either do a `git pull` on the server or use your [deployment script](http://deployer.org) which does all that for you. If you're working with legacy code on a huge code base then use ssh w/ something like WinSCP.
All fine suggestions so far, Goutte looks especially popular!
I disagree. Speed of changes in python, ruby and java (languages, libraries, frameworks, ...) is equally slow or maybe even slower. **edit** Sorry, I answered wrong or not asked question. Really I wanted to say is "php is as good as other languages for most of the future problems"
Languages come and go but it takes a lot of years for that to happen. You can see that languages like PHP and Python are still top of their game after more than 20 years and people are heavily recruited in these areas. The ecosystem in my opinion is the biggest advantage that keeps them used so much. Looking at the future, golang and Elixir might become a lot more popular in web development (although golang is already being used for systems programming a lot). There is also Scala for those who come from the Java ecosystem. Personally I don't see Node.js winning over. The only arguments were speed, which golang and Elixir beat. Oh and that it is Javascript, so you get to have frontend and backend the same language. But that was never the problem, most developers I've met in my life know more than 1 language. So yeah, it is pretty safe to be a pro at PHP, which means you are good at OOP. That skillset is enough to make a quick transition to another OOP language. You might want to delve into functional programming as well so you're not stuck with an OOP mindset for everything.
Good point and it seems others agree. Though I've heard Ruby is showing early signs of possible fading to black
http://www.tiobe.com/tiobe-index/ It seems both Ruby and PHP are slipping in favor of Java, Node, and Python. Interesting to see that Swift is gaining ground as well. PHP is not the end all of programming, but will likely enjoy popularity for another 5-10 years, and is a useful skill in your belt. That said, a professional developer should constantly be adding tools to the belt, and be agile enough to take on the demands of a company/industry. It should be noted that if you happen to be one of the last dozen developers in a certain language, it can be worth a lot. Check out job postings for Cobol or Fortran developers.
Codeigniter is certainly a lot easier in your standard ftp deployment, there's a lot less files to know about and deal with That said as a symfony guy who usually has huge vendor folders and and no git or ssh access when dealing with shared hosts, I deploy by zipping up my directory into an archive, deleting the stuff inside the archive I don't want overridden (parameters yml, cache folders, etc) and then just upload that to the root directory and extract It takes 2 minutes to deploy with this method, but the changes are pretty close to instant to the people viewing the site 👌 
Don't become a PHP Developer, become a developer. Yeah you might be fine working with PHP in an agency for awhile creating basic websites. But when you get a job creating large, scalable systems, PHP isn't always going to be able to do the job. There might be frameworks/libraries to do things like async, queues, map reduce or websockets, but for most cases, PHP is a terrible language to do those in a scalable, maintainable way.
Related: My relative is looking for salaries for php developers. Does anyone have a good source of real world salaries in the usa? Is glassdoor.com the best? Any others?
Even though PHP has been around a really long time, it has been in a steady decline for years. If you look at the Tiobe index or the annual SO Dev Survey you will see that PHP has been losing market share for years. I wouldn't bet on it in the long run. Learn the skills of being a good programmer (analytical approach, debugging, understanding of architecture and tools, software design, ...). Part of being a good programmer is to keep up with the times which means you will need to learn new languages. At the end of the day a programming language is just a tool and if there is a better tool for the job the one who can use it will get the job.
http://www.zend.com/en/services/certification http://www.pearsonvue.com/zend/
Absolutely. I never understood Python as much as when I put it down to learn C#. I never understood C# as much as when I put it down to learn PHP. I never understood PHP as much as when I put it down to learn Javascript.
It depends where you live. In the middle of the country, it's probably 80k max. Move to NYC or LA/SF and that's a starting salary for a junior developer. 
Exactly. I never fully understood PHP's weak typing until I learned a language where that truly mattered. There's pluses a minuses to every language.
Aha, Zend certification, that I have heard of. I haven't seen too many employers who require it or even know about it. I suppose it's one more credential you can put on a resume, but honestly I think most employers would be more impressed to see your own project you have built with php. Plus, the exam is rather expensive and difficult, there's no guarantee you'll pass first time unless you study every corner of the language. There are some great courses on Udemy etc. which cost less and will make you well prepared. But the results of that are only as good as you make them. If you have spare money, need to pad out a resume, and like studying, nobody will look down on you for getting the Zend certification.
Completely agree with this. Especially the last paragraph. PHP is my main language because of my job but when I started learning some Python, Java and Swift on the side, it started to help my PHP a lot. 
You're probably right, but I'm an associate director of software at a $3 bn. company and we routinely hire people with no existing experience in PHP, if they can demonstrate actually programming ability in a similar language, or do some straightforward exercises in PHP with an open book. The most valuable skills are understanding design principles and when you should violate them. Those are the same in most languages. 
&gt; Is it fair to say that time spent learning PHP at ever higher levels is enough to sustain a good career? Yes. &gt; given the choice between learning the new javascript framework of the week or becoming a PHP master Not mutually exclusive - but I see your point. I am currently a Senior Software Engineer at a time &amp; materials development shop. It's around 500 employees and we brought in around $90M last year. Of those 500, roughly 200-300 are developers. Every one was hired for their specific knowledge in a technology. Our teams are based around them. I'm on a PHP team. We have a .NET team. An Android team. Etc. However, there are huge benefits to learning other languages and/or frameworks. I understood Symfony more after doing some Laravel. I understood more about OO after doing some Ruby. You should always work to know more. But there is nothing wrong specializing. I don't think PHP is really going anywhere. Especially in the next five years. And I wouldn't bother doing too much planning past that. People change. Life happens. It's not like PHP is COBOL or something. It runs at least a quarter of the internet. Personally, I'm doing the opposite. I'm doing alot of cross-training now for JavaScript. We're getting alot of work and I like it. Working on a React thing now while trying to ween myself off jQuery for the more menial tasks I have to do in my day-to-day.
It's easier to teach a good programmer PHP than to teach a PHP programmer how to be a good programmer
They are not always junior (the junior devs also typically have little PHP experience but also don't understand code smells or how to design a system from scratch). It is effective because someone who is adept at a scripting language like Python, Ruby, or even Javascript, can pick up PHP very quickly. To your third point, "no other function than to come to work and write what they are told": that is precisely **not** what our engineers do, and the main reason PHP knowledge isn't a blocking factor. There are plenty of people who know PHP very well who are bad at programming, and plenty of people who are very good at programming who have never written PHP seriously. Our hiring strategy is not to limit ourselves to the "already knows PHP" audience. It is more efficient to let great engineers learn PHP syntax on the job than to teach hundreds of people good software design skills.
Generally no. However, if somebody else is paying for it and you have the time, why not. Or, if you have some place you want to work someday and they prefer people that have passed that test.
This. It took me 10 years to be a good programmer. Probably would have learned better habits in, say, Python.
And: CI3 has massive problems when using PHP gte 7.0. 
I guess it works for you or you wouldn't do it. I've just never really seen it. I've seen people pick up a language very quickly but never seen anybody be as effective as it's sold around here. 
it's not that PHP won't scale, the issue is the cost. in big deployments, you will cross a threshold where switching some parts of your application stack to a more suitable language/runtime will be worth the investment in terms of cost and development time. with regards to speed, there are projects now that try to mimic the execution model of node/java applications, where you have one process serving all application requests. this removes the bootstrapping cost of handling requests. you'll have to remember though that php has become so ubiquitous because of its existing execution model -- start fresh on every request, share nothing, and throw away everything when done. i want to see where this new approach goes, though.
&gt; Because every job posting I ever see is "X years of Y experience". With Y being a language. Every job interview I've ever done has asked specifically about a language. I've also interviewed PHP developers this year that have "8+ years of PHP experience" that still use mysql_* functions, that have never worked with a framework, that their databases have never gone above 1GB worth of data, that have never used caching or write all their code (config/db connections, page logic and view) in one file per page. Needless to say I would probably only hire them for a junior role, which they would never accept even if that is their level. I've also hired developers that have no real experience with PHP, but demonstrated they know dependency injection, DRY principals, OOP and have worked with large distributed systems. Within a week, they were fully adjusted to our code bases and were coding PHP like they have known it for years.
Yeah, plus once you've got a good understanding you should just have a "blank slate" repo that already has your useful modules and basic code already included in it. No need to start from scratch every time. 
^ this. 
&gt; Personally I don't see Node.js winning over. It will still remain popular though. There is some things that are just easier in node, like server side rendering a javascript app or real-time web applications with socket.io. In fact, I have a laravel app that offloads all of the realtime work to an express app. I also really like node/express for building out apis. But you are right, other than that it doesn't really have much of an advantage over other languages.
I hate the rails pipeline. They give you an option in Rails 5 to use webpack, which is a nice change. If I were to make a new Rails app (I would much rather use Laravel at this point though), I wouldn't bother with the Rails asset pipeline. I'd probably replace it with gulp or something.
Two types of hate in this subreddit. * Serious constructive criticisms * Hipster "PHP is shit" bullshit My advice is to not let either get in your way.
Disagree, this certification sure - no employer will probably think more of you for having it. On the other hand some industry certifications calm demonstrate significant knowledge and skill (Microsoft, Intel, Cisco, AWS) - as a self employed contractor I've found having AWS certification to be extremely beneficial for getting work
Thank! I'll take a look at it.
Can confirm. Have hired software engineers for the last 5 years. Certifications mean nothing, if you have a certification but no github you can show me, your certification actually works against you in my eyes. The exception would be that you got it through your work...in which you're back up to "it means nothing"
Because there are a lot of terrible tutorials, really bad developers and horrible code that gets posted here. PHP has a very, very low barrier to entry, which in turn produces a lot of copy/paste code and developers that really do not know what they are doing or why they are doing it. Many people will defend their code that has no design patterns, no DI, no tests, all in one file and using mysql_* functions, refusing to adapt to actually doing it in a more scalable, maintainable and cleaner way.
&gt; Within a week, they were fully adjusted to our code bases and were coding PHP like they have known it for years I don't doubt that. But I still don't believe they are as good as somebody that is a good developer **and** has worked with the technology. My issue is not *if* a developer can quickly learn. It's part of the job. My issue is the efficiency and efficacy of that developer compared to one that has experience in the technology. There is a difference between being a good developer and being good at your job. In a week, you example dev would not be able to tell me the pros and cons of one framework or another. Or one CMS or another. They have no context of the entire landscape. Or they spend a week writing something that should have just been a third party library that is commonly used. I mean, in what world does experience not matter? What industry? I think it's disingenuous to state language doesn't matter in the context of being hirable. Being a good developer is assumed. In the realm of web development I fully believe you are more hirable in a technology if you have experience in that technology. But I still think fundamentals and the study of multiple languages should be highly encouraged. It will make you a better developer.
I don't believe that you can ignore PHP 7. It is being deployed at breakneck pace for good reason. I decided to switch to using it exclusively because the general improvements in performance are so compelling. Having decided that, I found myself letting go of all manner of backwards-compatible habits, things that I had kept doing "just in case" the code needed to be run by PHP 5.2 instead of 5.6, for instance. This allowed me to adopt somewhat more modern conventions, especially with regards to function nesting.
I mean really why mail it in with a line like: &gt; We should only change the driver to driver: pdo_pgsql in the config.yml config. Hopefully, you have a pdo_pgsql PHP extension installed on your compute You already have a 40 page article of ridiculous complexity why miss this opportunity to add another 3 paragraphs.
I've interviewed people with programming certs. It means nothing. I make them solve the same exact whiteboard problem, and ask them the same exact technical question. You want certs that stand out? AWS developer or architect certification. Show them you're​ not only a good developer, but also know a thing or two about dev ops.
It is a problem for absolute beginners and the overabundance of js focused code camps and learn to code websites in recent years is exploiting that in my opinion.
I would add SQL to this list. 
&gt; In a week, you example dev would not be able to tell me the pros and cons of one framework or another. Or one CMS or another. They have no context of the entire landscape. We wouldn't use a technology unless someone on the team knew about it or had experience with it. But we can definitely put someone on a technology that hasn't had experience with it if they have someone to fall back on and answer questions. &gt; Or they spend a week writing something that should have just been a third party library that is commonly used. That would show me they aren't at a senior level. Besides a lot of our business logic, most of the stuff we have is just another library. And using 3rd party libraries is part of any language.
cant you just put actual time when the form is displayed? &lt;input type="hidden" name='start' value="&lt;?php echo time(); ?&gt;" When teacher hits submit you will have start and end time. 
Well, theoretically they could open the form and go grab a coffee first...
Not sure what the actual question is; you "can't get any reasonable numbers in there?" Do you mean that numbers are saving but they don't make sense? My recommendation is to do the simplest thing possible: use UNIX epoch time (seconds since Jan 1, 1970) so that you can simply subtract the start seconds from the end seconds to get how many seconds elapsed between. I also like /u/piegus's idea of placing the start time directly into the form. With that approach, you don't need to add rows that might never be completed.
I don't actually hire people, but personally I would be less likely to hire someone who put an exam certification on their resume than someone who had the same resume without the certification. A certification makes it look like you are overly interested in looking like you know what you are doing. Valuing looking like you know what you are doing is likely to make it harder for you to produce good results on real projects.
Care to back up your rant with some evidence? I honestly have no idea what you're talking about. Besides the occasional trolls, this sub is largely enthusiastic about PHP.
No
Not sure actually. I used it because it is what I was familiar with. Maybe someone else can chime in. 
If a teacher opens the form and gets distracted by a student, it'll seem like it took a long time. This type of data won't be accurate unless multiplied by a hell of a lot. Nonetheless, you could save the current time in a session. Unset/reset the session​ variable you choose on open and unset it again if you'd like after you record the form data. Still, seems like pointless data that can easily be skewed depending on the user environment. Source: work extensively with teachers and students
As someone who started with PHP and now mostly does work in Javascript: only go into Javascript if you have a ton of time on your hands. The pre-build automation, package management, frameworks, libraries, and all that jazz make it hard to be "one of the best" unless you have copious amounts of time to dedicate to learning it. Node, Express, and NoSQL databases are in high demand and are worth pursuing if you want to chase after $$ or be able to spin a local server up really quickly, but again Javascript is changing very quickly and it can be a hassle to keep up. I essentially stopped really coding in PHP a year ago and there is something nice about the stability of the language (eg not as many syntax changes from version to version) that makes it easy to occasionally do a little bit of coding even a year later.
The flipside is master of only one trade can be in a bad spot to find jobs. A balance between proeficiency and diversity is usually a good idea. And less boring at one point.
I think the event should be "focus" rather than click. Someone could use tab to focus the field
Perfect way to get yourself into depression!
&gt; Being a good developer is assumed. There's where your argument dies. If you've ever had to hire programmers it's a bit of a nightmare to weed out all of the ineptitude. Code monkeys are a dime a dozen, good programmers are mythical unicorns. Finding someone who seems intelligent enough to learn, can be trusted enough that they won't burn your code base to the ground, and doesn't make you want to stab them in their first twenty minute interview is often times more than enough to get the job, regardless of language or experience.
I'm not quite sure what you were meaning to get at, but if you were referring to an empty github because they're busy actually doing work then I'm left with a number of questions 1. But you had time to get a certification? 2. You don't do any development on your free time? 3. You don't have any free time? 4. You can't / won't get a job with an employer that doesn't have you working 60+ hours a week? If you aren't doing any development in your own time, what exactly are you bringing to the table other than the knowledge you have and the limited knowledge you can gain while you're working? Take for example a candidate I interviewed for a front end engineering position. Brilliant guy, looked great on paper. Interviewed him and all he could offer up was pre-promise, ancient javascript that was performant (his justification on why he hadn't learned any new stuff) but entirely unmaintainable for large scale sass applications.
Second this: use hotjar or a similar tool to actually record this and get an exact metric on time spent filling out
[removed]
I build custom web apps. When I started, Apache was the only thing that came up on how to instructions (for me, anyway) in the form of LAMP. I read enough people using nginx to wonder if I should consider using that instead. Is there anything inherently and exponentially more useful using nginx? Thanks
My suggestion would be to build the docker compose file using "bash environment" variables and a .env file. This adds the benefit that the same docker compose file can be used differently without any changes to the architecture and file structure. Also if you're using a *Nix box , look at persisting the data by mapping a volume to the container. I like keeping the project data with the project :)
&gt;"Hi, we use PHP/Node/Go here, would you want to work with all these languages?" Turns out the answer to this question is *not* "Lol who the fuck uses node in production outside of startup hacks and losers who put stickers on their macbook and call themselves 'artisans'?" -- ^(sarcasm obviously, i use javascript daily and put stickers on my macbook like the startup trash i am)
Verily tides of Reddit are unpredictable and treacherous.
I would recommend a staging server that mirrors the production and is in the same datacentre to run these tests, and is either behind a VPN, or your IP is whitelisted. If that's not available, I'd say whitelist your IP to assure you can make these tests against production.
Thanks
Yes. Most of the hipster-tech anyway.
That is not a problem, I am eliminating the top quartiles.
... but oftentimes better than a master of one. (edit: I'm an idiot and made a crucial none vs one typo) . 
I do some research for data container. Unfortunately I've got some "command not found" issues with alpine. I can't figure out how to resolve the problem. Therefore I decide to use Debian Jessie, since it also used by php, their will no increased storage usage. I think about volumes like scratch (tianon/true). Do anyone have experience with alpine as data only container or may figure out why the container is not running? 
You only need one further line "command: /bin/true" in your docker-compose file for the data container if you changed the image to alpine:latest, for example.
&gt; Jack of all trades, master of none, though oftentimes better than a master of one. I learned this from Adam Savage.
idk why the downvotes, i generally agree with u, i also did some interviewing a couple times and its alot easier if you can take a look at someones GH account, not only that, its generally a solid pick if programming is someone's life, even if they are bad if some ways, its easily fixable with that attitude. i wasnt trying to say that devs with an empty github are generally better, it was late, i should elaborate more. when i read your post i started thinking about devs i know that arent active on GH, and i automatically related them all being better than me :) those guys just worked 24/7, some of them did work i honestly felt shouldve been done by 2/3 devs. one guy for example also did forex trading, scripting his own agents for automation a hour or 2 before bedtime making shitloads of money with it. im just saying, all exceptional devs without having a GH account, so that was kinda funny but i do agree with you that its alot easier to hire people based on their GH accounts, and i would prefer those as well.. but no, i dont know if they had any certs, i doubt it. they were all near borderline patients personally i have them all, my first one was zend(php4 :D). i dont feel like they made me any better, but it made job interviews a walk in the park for me, the 3 times i had to sollicitate showing them was literally enough. so alot of companies do seem to care. it all adds up.
Thanks for writing out your edit, otherwise I'd look foolish :-) cheers
What I learned so far is that a "hype" will come and go. Some will stay, some will go and some will just improve. If you going to stay as a Backend Developer only and be one of the best PHP developers, you can stay with it, but then you have "to be the very best.. like no one ever was.. dum dum dum". I think this is a hard job, because there are a lot of good developers around and you have to make a manager clear that he really needs someone that has this special indepth knowledge that you have and nearly no one else. Or they will choose someone who has more skills like front end etc. .. I for my self thought knowing front- and backend would be the best benefit. This means HTML(5), CSS(3), JavaScript (ES5/6), PHP(5.x/7) and MySQL. The more you know, the higher your value. At this point let me come back to the "hype" section. There are so many frameworks and tools hyped, that every year a few new one comes. Some are pretty useful and will stay like "composer" or "vagrant/docker". Some will be hyped and everybody will be like "omg, everybody will now change to it, it's a must have!" like "Ruby and Rails", but in the end it still stays a nice product. Some will coexist like Node.JS. In the end you should stick to everything that you really like. That's important, because you have to spend a lot of hours/weeks/month/years into this language and you want to have joy while doing it. There is no point in doing something that you don't like. Like Java. Sorry I had to put anywhere in the text that I dislike Java.
No, we need people who use doctrine and sqlalchemy and entity framework and hibernate to know some SQL. I don't call myself a DBA... 
Zend PHP Exams are not easy, nor you can "just study for it". I know a few people who gone for it just for fun (the cost in PHP5 years way way less than now - you could get the whole bundle for 200$ or even under a 100$ on Black Friday) - it turned out it was not that easy and fun as it looked on the surface. The exam requires you to have a broad knowledge of the PHP and it's standard library and it's OOP stuff. There are questions, that can be answered only if you meet one of the conditions: 1) You have worked with that stuff. 2) You have an encyclopedic knowledge of the manual. Even a seasoned developer will find quite a few blind spots that he will be required to brush up on before just taking it blindly. Just see the list of themes you will be asked about in no specific order: http://www.zend.com/en/services/certification/php-certification Is it well known or cared about by many? - Not really, but can be useful. Is it useless and shit? - No, it is not. Should you go for it? - If you want - why not?
Different strokes and so on. From what I've read, it's better to become a specialist as you get a special branding and rates to match. Our field might diminish that somewhat due to its rapid pace, but even then I suspect erring towards 'less is more' would be helpful.
Just use hotjar
mysql_* functions are deprecated so must learn mysqli. Mysqli is a great extension to work with mysql database. Many people will tell you to learn PDO, Well it is a must to learn. But for it is best to learn both mysqli as well as PDO with a proper OOP structures. Don't follow any thing which teaches you less or make you a bad programmer
There are Slim and Silex which have the same API and much more optional features that you can use. But congratulations on your first php library
It is a great option to build your websites or applications using frameworks, Because framework provides you a proper structure of code which is very difficult to develop on own. It provides you better security, more reusability and it also make the development process faster and smoother. 
How do people unit test their MVC code &amp; MVC framework?
Are you planning to take this seriously or was it just a spur of the moment creative fun? There are quite a few areas you could improve on, For eample PSR-1 for the code (your code is very Javascript like...). You also seem to use some out dated practices? (No namespaces, including files, no autoloader, no composer integration?, out dated PHP syntax eg: array() should be [], no Docblocks) This doesn't touch the "why", when looking at more established routers, eg: https://github.com/marcojanssen/silex-routing-service-provider
Regex part seems to be incomplete won't match all routes
You should look into composer
Depends how you put it across and who reads it first, if a post is in negative score people will mostly just follow the trend without considering if its a valid argument or not. I too have been down voted many times on the PHP sub for recommending another language when someone has asked how to solve a problem, PHP isn't always the answer, in fact most of the time it isn't.
I can't work out if you're trolling or this is genuine? So I ask you this.... How much is a car?
NodeJS have even lower barrier since all front-ends are doing back-end work. Where is hate for node. I think problem is something else.
how do you link your beginning time to your end time, do you have a hidden element that rerpesents a hash or id in your table? cause i dont see a reason why this wouldnt work, granted its not the most precise approach, but as you seem to not be aiming for precision, i dont see a bigger issue with the approach.
Seriously, if i find a good wrapper around symfony's router. I would use it on every project. The only that seems to exist is *illuminate/routing* but i''d be crazy to use it though
No hate from me. You took something you liked and made it available for PHP. I think it is a great learning tool to help you progress as an individual developer. What most others are saying is that they would never use it for several reasons. What you could do now is evaluate those reasons and incorporate them if you are wanting to truly have other people use the library. That should also assist you in learning more about PHP development and bring you to the next level. Great job though!
Always learn new things. We use the same handful of languages for the backend that we did 20 years ago, basically. The trend I've seen for the past few years is that we will move to domain specific languages. If you're shop uses Scala, that's what websites will be made in at that shop, if the they use Haskell, the website will be in Haskell. Every non-web language has a webstack. PHP's strength is that it is _only_ for Web Development. You still know what is going in other areas so you can transition back and forth or make decisions as necessary.
Thanks for your input guys. It really helped me understand some flaws in the library. As I mentioned earlier, I am experimenting with this library. My intention is to make it as simple as possible. Really appreciate your input.
Other's have already covered the fact that PHP has many valid areas to criticize. What in the hell are you even talking about? I check this subreddit every morning at work and I really think you're misinterpreting discussions as "hate." 
For anyone that's reading this and thinking to themselves 'christ! f* releasing anything to the public' might I suggest that r/php should be reserved for projects that are production ready. Everything else should be posted at /r/phphelp, you will get better feedback. Any replies in this sub will likely just be 'do not use' warnings to other developers rather than constructive criticism.
I built one just for shits and giggles.
this. phpdelusions is probably the best source of information I have ever read about how and why use PDO, the same can be said about the article about SQL injection https://phpdelusions.net/sql_injection imho those articles are a must read for every php developer, 
I somewhat agree with this. I think it's good to internally class yourself as a developer and not limit yourself to one tool, but I think it's very important to market yourself as a specific 'type' of developer because it's much easier to find jobs relating to that language or tool than a broad search for any "developer" job. You see this all around the world with businesses who cater to specific markets instead of anyone that wants the service.
Feedback on projects can be very hit and miss in here. I believe that if you're following PSR standards, Composer and have at least some tests, it shows that the project is more serious than most. Kudos to the guy for trying and plucking up the courage to post it to somewhere like this, but he definitely still has a lot to learn when it comes to rolling his own package.
Oh, i totally forgot about that.. I would check that out 
AbstractHelloWorldOutputBufferInterfaceFactoryImplConfigParamValidationFactoryFactoryValidationInterface
Source?
&gt;[**Triangle wheeled bike - Burning Man 2012 [1:08]**](http://youtu.be/BeOS9pG6vjU) &gt;&gt;Note that, while the wheels appear to bounce, the frame and rider don't bounce a millimeter. The wheels are in the shape of a Reuleaux triangle - a curve of constant width. The frame sits on top of the wheels, supported by rollers within the fenders. &gt; [*^Phillip ^Miller*](https://www.youtube.com/channel/UCsuC7XXkY7f8cWzZLN-GK7g) ^in ^Science ^&amp; ^Technology &gt;*^44,483 ^views ^since ^Jul ^2016* [^bot ^info](/r/youtubefactsbot/wiki/index)
It's a combination of PHP7 and CI not updating their documentation. [](https://forum.codeigniter.com/thread-67306.html) 
Hmm, would this work if I were to move myself into your house while you were away and when you came I could just say "You were gone too long, it's mine now"? Where is the line drawn? Of course what I'm suggesting is crazy, but copyright laws and trademarks etc can be really confusing at times. Maybe it's just because I've never looked into it, but it can get really complicated. :/
Or MouseFlow, which would be good for this because you can visualize the fillout process and see if they maybe left their desk and got coffee or something. 
Yeah, same thoughts. In IntelliJ (PhpStorm at least) you can switch via profiles as well, so it's useful, but since my IDE can do it, I don't need to do it. Still a cool thing for people whose IDE does not have such a feature.
I was like you once, got curious and tried it, maybe even forced myself to keep going and see where this leads me. Eventually I started to enjoy it and then eventually even to prefer it. Never looked back since.
&gt; array() should be [], no Docblocks Does anyone ever use doxygen anymore? When will the rest of the world move to a more compact comment format?
Fuck I hate emojis. Let's make reddit look like an invitation to a kindergarten excursion. What could go wrong...
once you write a good slim app, you can copy most of the skeleton over to the next. it makes new projects so easy to dev... ofc that's the benefit you get from using a laravel or symfony to begin with... however you are also powerless to make big changes ... If you have lots of dev time Slim et al is great. If you need to pump out things then Laravel/Symfony is the way to go.
Sounds good 👌
Dropping #3 to #4 isn't nearly as bad as dropping from #5 to #7. Tiobe is inaccurate. Not a php fanboy. If php was #10 on the list I'd still suggest you read PYPL's analysis of the problems with TIOBE.
So how do these people do if you ask them task oriented questions? I have what I consider to be a reasonable computer science background but I'm personally more interested in getting things done than in knowing all the computer science terms.
For the most extreme example, see r/deepfriedmemes
I (successfully) took the exam two years ago. It was kinda hard. Not very hard if you know the language, but still tricky. I don't know if it is worth something, I just did it because "why not ?". If I remember well, you have 40 questions, and it lasts 45 minutes (I could be wrong though). They don't give you a score. Either "you pass", or "you fail". They don't even tell you what you got wrong, and you don't know if you got 40 out of 40 good answers. For this exam, I studied the basics again, read a few beginner books. Because there are a few things I never use at my work (or not enough). And because I knew some questions were tricky.
I'm guessing that the original poster is conflating development with deployment.
*again*, right? :D
Once you're used to it, there's not even much of a skeleton to make. One or two providers that you can pull in with composer if you're using the same everywhere, some factories for your services and classes which take less than a minute to make. Controllers don't need to extend from anything. Maybe a bit more if you're serving up HTML, but if you've got a common setup composer can just pull it in for you... I just don't find there's much I need to set up at all. Then again, I don't work in a digital agency where I'm pumping out a new project each month, so maybe I'm missing some things
At least for my companies projects, we have a large framework that uses CQRS so there's a lot of infrastructure to copy over when we start designing a new product [Doctrine, RabbitMQ, Domain Events/Subscribers... etc]
I just wondering: why CodeSniffer and not e.g. https://github.com/FriendsOfPHP/PHP-CS-Fixer which is out there for quite a while and used by Symfony, Zend Framework, Laravel, Magento, Shopware and others? EDIT: it's also flexible when it comes to configuration (e.g. yoda/classic styles) 
I like this mentality and I hope it exists out there. If I'm ever in a position where I have to dust off the ol' resume, I hope I interview with someone like you (or your company)
Thanks! Appreciate it. :)
I always tell people to build an inventory system. You could take inventory of your own stuff around the house. Inventory systems have so many components that you run into a lot of what one would need in real world applications.
&gt; New or used? This proves me point exactly in relation to your first question
OP, I have a question for you. What does it bring to the table which SLIM v3 doesn't? I am looking for some good pointers that would motivate me to try this one out. And great job so far!
This is great stuff. 
Very nice (yes, `strpos` is wrong). The YAML is simply a list, if there are slashes it's a regular expression. I'll revise the code following your suggestions, great stuff. The only thing I don't like is this: isRegex($pattern) The subdomains in the list are ~500 (but it's growing quickly), I'm differentiating between regex and regular string to avoid calling `preg_match` every time, since a regular comparison or `strpos` are more performant. If you use `preg_match` to check if it's a regex it defeats the purpose. Thanks!
Ah, definitely. We're assuming that the YAML is formatted correctly (might be a wrong assumption).
@preg_match would also suppress this warning without the non-performant check.
Makes sense. I can refactor with the factory pattern like you suggested and perhaps incorporate /u/Jack9's suggestions as well. Thanks! Very helpful.
I've posted this a few days ago on the previous thread, but I created a client library for [DNS-O-Matic](https://www.dnsomatic.com/), you can find it on [github](https://github.com/flavioheleno/dnsomatic-php), it allows you to update multiple dynamic-dns services.
Keep in mind a lot of what the parent commenter tells you is generic advice, most of which only makes sense for larger projects. People here are very good at giving you generic tips, but very poor at getting into the specifics of your project and its needs. You don't make a paper plane the same way you build an actual passenger airliner. So take everything with a pinch of salt, otherwise you'll be writing a ton of code and metafiles and adding zero value to your package.
If array() instead of [] bothers you, exceptionally verbose function-level comments in a legacy format that no one needs anymore seem like a topic of interest in PHP7 codebases to explore. Why are we still doing this when we have type hinting? /** * captureStreamSample returns an array of elements from a TessStream, with an optional maximum * * @param TessStream stream is a TessStream handle implemented by TessStream * @param maxElements is an integer that defaults to five that specifies the maxElements * * @return [] */ function captureStreamSample($myArgument){ } vs //function definition returns an array of elements from a TessStream, with an optional maximum $maxElements function captureStreamSample(TessStream $stream, int $maxElements=5) : [] { } Literally the same information in 2 lines instead of 9, and not particularly challenging to formalize in a standard or to write regexes to extract for external documentation. In fact most IDEs would probably prefer to extract from the typehinting the class documentation. 
Kind of neat. I have just a simple git subcommand set up "git personal" that sets the repo levels settings to my personal settings (email address and such) which works well enough. 
I have had success with the ACL and RBAC components from Zend Framework: http://zf2.readthedocs.io/en/latest/index.html#zend-permissions-acl http://zf2.readthedocs.io/en/latest/index.html#zend-permissions-rbac Edit: PS. These components don't include any database persistence and this a good thing. The persistence of permissions will be too application/use-case dependent. You can easily serialise/deserialise your permissions to any storage you want. You only use these components to provide a model to test against. 
I was going to post something similar until I saw your post, which is just a better version of my comment. I 100% agree!
Add **types**! If you're happy to restrict this code to PHP 7, then you can add [function parameter types](http://php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration) and [function return types](http://php.net/manual/en/functions.returning-values.php#functions.returning-values.type-declaration) (but be sure to make clear your minimum supported PHP version in composer). Whether or not you add those, *definitely* add types in function docblocks. And while you're at it, add descriptions of what the methods do as well.
&gt; /r/DeepFriedMemes /r/emojipasta has some competition.
AES-GCM isn't without issue either: http://crypto.stackexchange.com/questions/18420/aes-gcm-disadvantage/18422#18422
Thanks for clarifying that to the OP. And although I am aware that not everything is specifically needed in his project, throwing him up a learning curve and having him decide that for himself is really valuable as well. However, if, as I mentioned, the OP uses a data provider, some well thought out interfaces and a means to expand on the readily available matching methods, it makes it more interesting as a package for other people to use. What's more: if the OP were to keep the logic as is, and then expands on the matching methods, the code becomes increasingly complex and hard to maintain. Setting up unit tests is a bonus at this stage, but it would give our developers the sense that OP has thought about testability and as such most likely uses IoC. For his specific needs this all seems a bit much, but on the other hand, now it will remain just that. Specific to his needs and only usable for people who can use it in the exact same manner. Using a proper data provider interface can also some the problem of huge data sets, the OP is expecting, since one would be able to pass in an iterator and load in data subdomain by subdomain.
So the problem with implementation, not with JWT itself? 1. For example I don't look at headers of JWT token when I select signing algorithm. I just know which algorithm I using. 2. I use refresh-tokens. 3. I use HMAC + SHA256. Is it enough? So may I continue to use JWT?
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/nocontext] [I was like you once, got curious and tried it, maybe even forced myself](https://np.reddit.com/r/nocontext/comments/5zay20/i_was_like_you_once_got_curious_and_tried_it/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
This post is dumb. Jwt is a solid choice. 
 &gt; Sessions: Just use cookies over HTTPS. Do you run an API server on a separate subdomain (e.g. api.mydomain.com)? If not, let me be the first to warn you that Safari blocks cross-domain cookies now, so expressing authentication state via session cookies is officially impossible today. You can get cookies to work, but only if you load up a browser page first on the api domain; once a cookie is created, cross-domain AJAX request cookies work normally, but that completely defeats the purpose of a separate API domain. I feel so completely screwed by this issue. I'm well aware of the problems of JWTs and I don't use them for anything more stateful than "userId", but I feel like Apple painted me into a corner, forcing me to use them for their users. Out of morbid curiosity, has anyone encountered a solution to this that doesn't involved signed tokens?
Alright, I just setup the [Oauth2 server](http://oauth2.thephpleague.com/) from The League of Extraordinary Packages, via Laraval Passport and I'm having a hard time figuring out how this might affect me. I get the points made in the article, but I'd also avoid building an Oauth2 server myself, so I'd appreciate if anyone who has some insight, can help me understand if I need to take action?
 public function isReserved($subdomain) { foreach ($this-&gt;reserved_subdomains as $reserved_subdomain) { if ((strpos($reserved_subdomain, '/') !== false &amp;&amp; preg_match($reserved_subdomain, $subdomain)) || strpos($reserved_subdomain, $subdomain) !== false)) { return true; } } return false; } You could make it more readible, but you get the point :)
Normally I would accept anything written by /r/sarciszewski as a solid point, but this honestly reads as some kind of personal vendetta war being waged on JWT. You don't like algorithms 'none' and 'hs256'? Don't accept those then! Issue solved, another tragedy prevented by our superhero team, yay!
I have actual problems.
Of which one is too many indentation levels.
Why not do both? OP has neither.... do proper docblocks as that is industry wide.
I have experience writing sniffs for PHP_CodeSniffer since 2010, that's why it's my tool of choice :) PHP-CS-Fixer seems like it's just for writing autofixable rules so it does not apply to everything the Slevomat CS can check for.
yes.
So far, I am relying on callbacks. When the user add the routes, it gets added in the lookup array. The lookup array matches routes with associated callback. When a route is matched, the associated callback is called and passed the parameters.
Sounds great. Where are you from?
I am based in Sharjah, U.A.E. Originally from India.
Thank you, that's a good idea. I also documented the option to use docker-compose.override.yml. 
South or North? I am looking at your project now. Are you accepting pull requests?
Thanks, I'll give it a try in the future. But I prefer the prooph nginx config at the moment.
Yes, That's what I am doing actually (though the access-token headers are only used when the cookie system breaks down). Replicating cookie behaviour is actually really tough. Problems are: persistence (the user refreshes the browser -- so, maybe use localstorage), concurrency (the user opens a new tab -- localstorage works here too), and expiration (replay attacks are the biggest threat and I am really not sure how to handle this -- in fact, I'm not sure how cookies are any safer). JWT seem to take you about 75% of the way, but that last 25% is really annoying.
South. Yea, sure
Kerala eh?
PHP is a powerful tool for making dynamic &amp; interactive websites. some PHP libraries that will scrap websites &amp; store data such as : * Guzzle * Requests * HTTPFul * Goutte * PHP VCR 
To add to this: What the OP describes is a [known-plaintext attack](https://en.wikipedia.org/wiki/Known-plaintext_attack), while raw ciphers are generally secure against [chosen-plaintext attacks](https://en.wikipedia.org/wiki/Chosen-plaintext_attack), which is a stronger criterion. However, unauthenticated encryption is usually susceptible to [chosen-ciphertext attacks](https://en.wikipedia.org/wiki/Chosen-ciphertext_attack), including the mentioned padding oracles.
&gt; I've been a web dev for 10 years and I still haven't gotten around unit tests. I suck. "Yes, you do". But that is nothing that can't be fixed :). The sooner you learn Unit test, the more they will be able to help you in your career. Writing unit test will help you to improve your classes. Unit test tends to make code more SOLID, as it's usually easier to test them if they follow the SOLID principles. 
Definitely. I did't mean that using them is not worth it, more that it's not worth it to require PHP 7 just for that, for such a small lib. Most websites still use PHP 5.
Symfony or Laravel if you aim to learn and get job. Phalcon if you want to learn more about php extensions or you aim performance or you can just use it no matter other things.
Definitely.
wrapping your mvc inside a docker container is not a microservice-oriented architecture. and example of that was given in the article. 
Indeed, we only look for cases that can be fixed automatically. We do have some of the same rules, like you can configure PHP-CS-Fixer to insert `declare(strict_types = 1)` where missing. Looks to me the tools are nicely complementary to each other, nice work will give it a try! 
Well, you did ask how the code could be improved. You don't have to agree with everything but you should at least consider why the criticism was made.
league/oauth2-server [always uses SHA256](https://github.com/thephpleague/oauth2-server/blob/master/src/Entities/Traits/AccessTokenTrait.php#L38), signed with a private key. It looks like [passport doesn't change that](https://github.com/laravel/passport/blob/2.0/src/Bridge/AccessToken.php). Later it's [validated using the public key](https://github.com/thephpleague/oauth2-server/blob/master/src/AuthorizationValidators/BearerTokenValidator.php#L52), regardless of what the claim in the token says. That seems to address the two problems this article talks about. Edit: It looks like Passport uses HS256 if you are using a cookie instead of a bearer token ([here](https://github.com/laravel/passport/blob/c87deee105c3e4d7d71d578019aca00db1f1133a/src/ApiTokenCookieFactory.php#L74), which calls [this](https://github.com/firebase/php-jwt/blob/master/src/JWT.php#L153), and gets decoded [here](https://github.com/laravel/passport/blob/c87deee105c3e4d7d71d578019aca00db1f1133a/src/Guards/TokenGuard.php#L188). It still specifies the algorithm so it isn't going to blindly trust the alg claim.
Document the methods, what are they supposed to do, what exceptions are thrown? Also the arguments, what do they represent? I don't want to have to search your source code to use it. Check visibility, should everything be public, like isRegex()? And I expect that to check if the argument is a valid regex, but what is does is try to check if a string has a '/'. Also remember a regex may have different delimiters, so instruct your unit tests to try this. With only static methods, it looks like a collection on unrelated utility functions, not a validator as the namespace suggests. A code smell for me is the number of .. segments in the literal value. There are more of them then there are namespaces. That looks like it goes too high up the folder structure to do something. Personally I would restructure the conditions and assignment of the checks. Now they perform a check and do nothing else then setting a boolean value. And I would remove the breaks by using a while loop because I don't like leaving a code block somewhere in the middle. But that's a matter of taste, or coding conventions.
Elaborate on what a preflight check is. Maybe you're looking for a HEAD request, which doesn't return the body, but it's not clear what a preflight check means.
I think you’re wrong. If you can tell me it's a string/integer, that should be right there in your code. Then you can use a static analysis tool to figure out if there are any logical issues. [Here](https://gist.github.com/muglug/e54f74a68f6959fbbf8c359cdc7c226e) is your file with types added (and verified as correct online [here](https://getpsalm.org)).
I absolutely do. Like you said I don't have to agree though.
Not really. You can't expect anybody else to put in any more effort that your willing to put in. Thats just how it would get reviewed where I work. I wouldn't of said that on r/phphelp mind you but this isn't a help sub and I expect the developer knows what tests are and just hasn't bothered to write them. 
Have you taken the exam? I think the validity of your comment hinges heavily on whether your opinion is based on personal experience with the exam. If you have taken it and have this opinion that's quite valuable, but if you haven't that's a pretty harmful mindset to have.
Bill Gates created Windows. Richest man in the world. Linus Torvalds created Linux. Still coding aways collecting paychecks.
Happy to help. I actually use this in production to encrypt sensitive customer data for storing in the database. I set it up myself in high-availability mode using Consul, which I also set up myself. I am not a server admin, and I had to learn a few things to be able to properly set these up. In my experience, not everything was laid out very clearly in the documentation. I could answer any specific questions you might have if you decide to use it for yourself. On the subject of ultimate security, if an attacker can run arbitrary code on your system, they can still decrypt your secrets. That is just a fact. In theory, if you feel your system is being compromised, you can stop the Vault service which will prevent it from being used until you unseal it again. In practice, I don't know how you could detect an attack and shut down Vault before the damage is done. Vault encrypts and decrypts data very quickly. On the other hand, if someone gains a copy of your database, you should be OK. If they also gain a copy of your filesystem (offline), you should still be OK. That is the real advantage of using this setup.
The harshness in my view is the tone &amp; assumption of motive. &gt; I fail to believe that you posted this without seeing the other 500 odd posts that keep saying this isn't a help reddit. I think people are doing this just to get more attention to their cause. Your points above: &gt; You can't expect anybody else to put in any more effort that your willing to put in. Thats just how it would get reviewed where I work. Are valid in and of themselves!
Welcome to /r/ProgrammerCringe 
PHP is very much like COBOL in that a huge chunk of software is written in it and software tends to linger. There's still a massive amount of COBOL code in production. Like... so much.
Is phpdbg dead?
&gt; you're ignoring a good chunk of the (supposed) benefit of having the format in the first place. Please provide use cases. 
&gt; does this mean that such implementation is safe, even if using problematic library like lcobucci's? I'm not decrying specific implementations or use cases here, I'm decrying *the standard itself*.
Sure, you can say I have a vendetta against [error-prone cryptographic designs](https://cr.yp.to/talks/2015.01.07/slides-djb-20150107-a4.pdf). And you should all be glad for that. See also: how `random_bytes()` behaved in the PHP 7 release candidates before [this RFC was passed](https://wiki.php.net/rfc/random-function-exceptions). JWT is like Russian Roulette with 5 loaded chambers. Sure, a "good library" will do things securely, but that does *nothing* to redeem the standard itself. The *standard* is broken, even if clever library developers can work around its brokenness. &gt; You don't like algorithms 'none' and 'hs256'? Don't accept those then! Issue solved, another tragedy prevented by our superhero team, yay! Way to miss the point.
All of the [other semantics fields](https://tools.ietf.org/html/rfc7519#section-4.1) in the header: IAT, NBF, etc. Of course, you can encode the same data in the body, but good implementations will understand the semantic meaning of those standard fields and provide validation and handling of them: automatically rejecting expired tokens, as one example. If you only care about having a signed, structured payload that's fine too.
for all the extremely small effort it is - do it. Its worth it. 
yes.
Ah, I see. I corrected whitespace in a later commit, there were some tab characters instead of 4 spaces. Thanks for the tool, it looks very interesting.
Does it mean that when I *force* JWT implementation to be bound to a single algorithm (like RS256) and ignore RFC compliance then I should be safe (or at least not vulnerable to mentioned vectors of attack)? I thoroughly read your article (after update too) and I really don't see anything against JWTs when used *like that*. Please correct me if I'm wrong.
&gt; Do you think it's fine to not support PHP 5, though? Depends on who you think will benefit. At a minimum, those types should go in a docblock. &gt; Also, what if I wanted the $yamlfile parameter to be a string _or an array..? Then the type goes in the docblock (as `@param $yaml_file string|array`)
&gt;replay attacks are the biggest threat and I am really not sure how to handle this I'm also currently working on a JWT powered api (just for fun in Go). What I'm doing is give those tokens a 5min validity lifespan, then refresh it. But I want to believe I can also blacklist expired tokens. If you ever fix this, do reply. 
The code is indeed kind of crappy. I'll list a few points and suggest a better implementation: 1. OOP. You are doing it wrong. Your class just wraps a bunch of plain old functions, and is otherwise stateless. As a result, every `isReserved()` call reads the data file, again and again, which is very inefficient. — you should read the file once and store the data in some field of the class instance. 2. Performance. Every call to `isReserved()` iterates the whole list. — Consider storing data in a [trie](https://en.wikipedia.org/wiki/Trie) or just using a map (in php, an array with subdomains as keys). Lookup time should be close to O(1). 3. Bloat. You don't need YAML. — Just use plain text. 4. Design. Your code is strongly-coupled, inelegant, and untestable. — Pass some kind of `Reader` interface or an Iterable to the constructor to decouple your data source from the class implementation, thus removing the abomination of a path such as `'/../../../../../reserved-subdomains.yaml'`. The Java-like `/php/src/nkkollaw/Multitenancy/Validators/` is also completely unnecessary thanks to Composer. You've got a single class, store it in a fucking project root (or simply, /src). Without regexps, the whole class could look like this: https://gist.github.com/anonymous/737355a3400304e0d61bf06ffdc9613b
&gt; User ID is not encrypted, UUID is just a "random enough" identifier In that case, you definitely have an issue. How do you revoke a session? Just because it's unguessable doesn't mean it can't be leaked. (And as always with JWTs, short expiry times don't solve this issue; they just push it to the refresh token, although if you're using the user ID *AS* the session identifier, I imagine you don't have those.) And again: Even if this works 100%, what's the advantage over using vanilla sessions like the rest of the internet? Isn't this a solved problem? &gt; I don't necessarily need to hit the database to get user's data, there are a lot of options like Redis Well yes, but those same options could be used for your session store, and the extra layer of indirection would have significant advantages at essentially zero cost, right?
&gt; The "alg" value is a case- sensitive ASCII string containing a StringOrURI value. This Header Parameter MUST be present and MUST be understood and processed by implementations. Rejecting tokens using algorithms that aren't whitelisted seems like a reasonable way to 'understand and process' it. Does the spec actually say you should blindly trust the claim?
What a compelling, well-thought-out rebuttal.
I was a PHP dev for over a decade. This past year I took a new job as a full stack JS dev. We use Koa instead of express, but it's pretty close. At this point, I couldn't imagine going back to PHP. It offers me nothing I can't do with Node ... and I get the benefit of using the same language front and back. :)
A variation on your idea of using a separate server holding the key and encrypting/decrypting via REST calls would be to use key-pairs instead, so that encryption can be done on any machine, but decryption can only be done on your hardened server.
You're bad at making a good, valid, constructive point. Your horrible tone defeats and blurs whatever you're trying to achieve.
&gt;Also thought about using a separate hardened server holding the key, just to encrypt/decrypt data via REST calls Have a look at Amazon KMS, which is basically this, but accordingly means a totally compromise of your environment still doesn't give someone access to that key.
IMHO, deleting everything before "A chain of mistakes" would improve the article.
I'll checkout doctrine/collections. Thank you. 
Why? It gives insight to why he protects his trademark in the first place.
Nothing wrong with the illuminate components either. Unfortunately they tend import other loosely related components with them. But that may have been fixed. 
That's kind of the problem all over again: following the spec to the letter is a recipe for disaster, and there's no point in having a spec if people can't (or won't) follow it in the first place. The library I wrote relies heavily on the reserved header fields, but still needs to be very careful about not creating a vulnerability. Most skip that or roll their own approach. I set the alg header but ignore it during verification, relying only on kid field (the key looked up indicates the expected algorithm) The whole format ends up being cumbersome to use in a secure manner, despite having a goal of being simple and secure. 
Handled extremely well if you ask me. Kind of reminded me of the incident between [Mike Krahulik and Ocean Marketing](https://www.penny-arcade.com/news/post/2011/12/26/just-wow1) in the way that a third party is capable of going rogue acting on behalf of the real entity who is actually oblivious to the actions taken until a public outcry is heard by the real people in charge.
ok thanks!
Still too long: php -r '?&gt;Hello World'
Where are your tests?
Firewall a tokenization service on a vpn tunnel and store the token on the front end. Write a quick split computation on the token server and store a random guid key as part of your hash. Done. 
I learned a thing or two about how some trademarks really work as well.
I added a section to the documentation about using composer events 
In terms of on-boarding, I doubt you'll find documentation near as good as https://adamwathan.me/refactoring-to-collections. https://github.com/tightenco/collect is also a clean split if you're not keen on adding illuminate/support to a non-Laravel project.
&gt; Amazon KMS Had no idea they have this. But it really makes sense to provide such a service. While not the only possibility, I will definitely look into it. Thanks
Besides of Symfony bring an awesome framework, I'm also really glad we have Fabien in charge!
These fools need to hire one of those developers they are peddling to fix their site on iPads. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
[removed]
So the above is practically the same as: https://github.com/kutny/tracy-bundle. With the exception that it uses different lib to do a stacktrace
good god.
Yeah, tried to tell him the same, but nope. not 1997. Luckily, the director has a meeting with a company that translated our application. Hope they can talk some sense into him, because i couldn't. Different version indeed, because clients are free to update when they want(as there are 2 hospitals so they are careful) He thinks branches are not needed because there will be only 1 or 2 people developing the application. He also doesn't want to move from CVS to a newer system such as GIT because he's afraid to lose all current history(havn't yet researched if that will happen). The best thing i could come up with is a excell sheet or about page with the version information. I do not think that what he wants is possible without having to do any manual labour. With GIT it might be a lot easier though. 
You can always require a certain PHP core version as well, so all the standard library functions will be available. The only exception I know is money_format function, which is not available on Windows. I suppose you could write a Composer plugin for that. 
Tests are the backbone of any project IMO. If you are going to take time to release something to the world then you should take time to make sure it works as you intend it to, and not make us rely on your word.
In other words: It's his/her take on it.
For a where I work we use Git to automate all this. We have 3 version data points, Commit Count and Commit Date and "Tag" So, We just finished a bunch of work and that is ready to go live, the actions are: - Tag it, eg: 1.5 - Commit count is appended: 1.5-cc&lt;commit-count&gt; - Date is appended: 1.5-cc&lt;commit-count&gt; [date] This is then packaged and deployed. If we do not have a full release update and it's mostly just hot fixes, we use the commit-count, if we have a full new release (Doesn't happen often), then the version number is updated. The date just makes it easier for Clients/Managers, they prefer dates rather than versions. The commit-count just gives an idea of how many changes have been made (we don't commit random stuff or single files and do our best to properly commit changes together) We use mainly Symfony so the [tag]-cc&lt;commit-count&gt; [date] entry is added to a config yml file and we can show that in-app. Finally, to provide a change log our deployment script goes through all commits since the last commit-count, so if the current commit-count is 50 and the last deployed was 35, then it gets all messages from 36-50 and appends that to a CHANGELOG file. A manager will take that and "spice it up" (take out technical jargon, add buzz words) before sharing it with clients or posting it somewhere. This has worked for us quite well.
France's presidential election is coming up. I wonder if they accept write in votes?
Neither does the presence of tests guarantee the proper functioning of a library, nor their absence indicate any bugs. While I agree that a tested library is more reliable than one without tests, we should apply common sense — is there really anything to test here? 
Thanks for feedback, I'll try implement your suggestions today evening :)
&gt; all on one virtual server Get it running on different servers. Not hard but definitely important if you want to go to scalability/kubernetes/etc. If you don't have money to run different servers, get a vultr trial (50$ for 2/3 month). You will need to search for it though, it isn't on home page...
uhuh. you'll be surprised at how much of your world runs on software that relies on "other people's no-testing world".
Don't let others drive you crazy. For most web related stuf you can get a cheap VM (virtual machine), drop php and mysql on it. Maybe even redis and you are set. In the time you are working with your containers and what not, others are building and shipping.
Looks nice. A bit of nitpicking though: - memcache is not a database - Sphinx Search is a real good fulltext search engine - for the backend dev it's essential to know your web-server, from the wide choice of Apache and Nginx
I'm assuming that the default value is for flexibility in representing the cache miss scenario. I'm also assuming that they didn't want a read-through function provided so as not to imply this way of handling cache misses. In most high traffic applications, cache updates are handled on an entirely separate process to avoid cache stampeding. They want you to send back a default cache-miss-describing value and decide on how you'll handle this miss separately.
&gt; The interface has a has('key')' method to determine if the value was a miss &gt; You then have the possibility of a race condition as mentioned in the spec. The item was there when you checked it but its no longer there when you go to fetch it. &gt; I know your example was a bit contrived, but it seems to me if a "default," non-expensive value will work in some use-case, then just do &gt; a if (is_null($username)) { $username = 'Guest' } &gt; A default on a cache-getter is a mixed metaphor. It's true, however, it's a common practice within PHP development (and I'm sure in other languages too) therefore a spec shared by multiple teams and projects would need to support it for those who want to do it to reduce the verboseness of their code.
&gt; They want you to send back a default cache-miss-describing value and decide on how you'll handle this miss separately. wouldn't this work? $value = $myCache-&gt;get('foo'); if (is_null($value) &amp;&amp; !$myCache-&gt;has('foo')) { // this was a miss $value = 'some default'; } and if so, actually fulfill the "handle this miss separately" intention
This looks interesting. Thank you.
Bookmarked. Thank you.
Yes. Code you wrote your self. Why is there such a backlash against testing all of a sudden. When did TDD and testing in general fall out of favour.
You can't, because the function isn't an array. You're looking at a child object of the function that is stored as a public member. In the code $this-&gt;cartTotals, cartTotals is a child member of $this, or that instance of getCartTotals(). For the same reason $this['cartTotals'] will not work. The code above without a class is complete gibberish by the way. Nothing is defined in the scope of the function to be refered to as a variable, so it would simply resolve into a compiler error. Place it into a class with declared variables and I can assist you further.
I've done a lot this month, and, as always, would like to share. * [Clarifai PHP Client](https://github.com/darrynten/clarifai-php) - the big one this month. Taken a while (6 weeks, 3 people) but it's awesome. Cloud AI image and video recognition service. * [Google Natural Language Client](https://github.com/darrynten/google-cloud-translate-php) - client for the new google cloud translate service. * [After The Deadline Client](https://github.com/darrynten/after-the-deadline-php) - spelling and grammar checker. Working on some other really cool stuff and will have some more links for y'all next month! 
Even then, the only reason sample 1 works is because it's altering the weight variable of the parent object. Calling the function is complete gibberish. It's refering to the instance of the class somehow and not of the actual function. The code seems to do two things at once - act as a getter for a class(the actual function) and work as a setter(both samples). There is no parent decleration to see where 'weight' is specified. There is no logical reason this should work at all.
but easier convert to unixtime then add 86400seconds
Current UNIX time at 2017-03-15 15:03:34 GMT = **1489590214.09** *^I ^am ^a ^[bot](http://pastebin.com/raw/BjBZMYj7). ^Please ^click ^[here](https://www.reddit.com/r/unixtime_bot/submit?selftext=true) ^to ^give ^comments/feedback*
Simply, because your return value is, um..., an object. Were you returning an array, [you'd be able to access it as array](https://3v4l.org/fBAVf).
Every. Single. Time. I can't not read it as FapBot.
`$this-&gt;cartTotals` was an array, but it wouldn't add the `weight` key with the value.
... says the guy whose site needs 15000 lines of code to work. *Edit: Dear downvoters. Instead of silently disagreeing with my 100 percent correct statement ("Recently I got curious about function length in the toolchain that builds this website. It's mostly Ruby and runs to about 15 KLOC.", so yes, it does not run off those 15 KLOC, but it NEEDS them in order to be there at all and thus the site needs those 15 KLOC.) tell my why you disagree so we all can improve our point of view and have a nice technical discussion.*
Not all days have 86400 seconds.
That's too unfounded a statement. Provide a code. https://3v4l.org/ is where you could run it and then share BTW, providing a *certain error message* is better than just stating "I can't".
Thank you. This answers it perfectly.
oh i didn't know :( do you mind sharing where i can find and read more about this? ty
Can you elaborate? He posted a blog.
&gt; memcache is not a database Maybe he means memcached?
&gt; Everything I tried did not work. Was it not you that wrote this?
If this were true the majority of tutorials and code samples would be Wordpress, instead of generic PHP. Also, if Wordpress encourages cloud providers to support the greater PHP community, that's a win for everyone as far as I'm concerned.
Ok only for you now: Everything I tried did not work. (After 45 min of searching (GOOGLE) and trying out many lines of Code). Have a nice day buddy. Thanks anyway.
I would put d3 instead of just SVG. It's by far the most powerful way to use SVG. 
A very ephemeral one. It does NOT fit the role of database just because it stores data.
I find it interesting that he specifically mentions `isEmpty` because I recently implemented that method in my own simple collection class. I fought with myself for a moment for the exact reason he mentioned - why not just check against the count? Thanks for sharing.
Nice your PHP framework section could do with some work. There are more popular ones that those listed, why did you pick these. Also I dont think any of them are specific to PHP 7? It also seems bizzare that you missed SQL Server off the RMDBS list. I would also add PSR specs to the PHP section.
d3 is great. It should be added under SVG as "Getting Deeper" → SVG → d3.
I ended up using your suggestion. I inserted the "From" time into my "Timers" table when the Form loaded and then I inserted the "To" time, when they click the Submit button. Works pretty well. I even did the value = value + $newValue into the SQL query so I feel like a bad ass, lol.
Your colors change. In the intro, Frontend uses a blue line and backend uses a green line. Probably should have stuck with those lines in the other 2 pics. I also don't think 'Git' is necessary for any path. Any DVCS will do; notably Mercurial. Familiarity with Github is still a must even if you don't host your projects there. I'd also offer Make as a perfectly good task runner. I've switched to Make+Webpack and it works great. No tasks run if there's nothing to do; saves on compile times. Webpack is great for running 99% of your JS things -- it's the other command-line stuff that you need a task-runner for -- and what's better than a tool specifically built for running CLI commands that has stood the test of time?
I always assumed "d" was for daemon because it runs continuously. I supposed it could just be a word ending, as in "cached in memory"
[This section](https://secure.php.net/manual/en/language.oop5.references.php) of the PHP manual describes how objects are sort-of-but-not-really passed around by reference. That's not the case for arrays and scalars (among other things).
Respect. I don't agree with all of Fabpot's decisions but I think he handled this situation admirably. 
I agree, but we lack any firm standards other than these
Pro-tip: Create a dumby value like `$notFound = new \stdClass;` to guarantee that you don't misclassify a cache-hit as a miss. The cache might legitimately contain the string "NOTFOUND".
&gt; The interface has a `has('key')` method to determine if the value was a miss Won't you be hitting the cache *twice* if you do that? if($cache-&gt;has('key')) { doSomething($cache-&gt;get('key')); } I almost always use just the getter if I need the value, and use `-&gt;has` if I *only* care about existence. &gt; It seems to encourage something boneheaded like Well, don't be a bonehead then. Use it properly.
Not familiar with the "CVS" but it does have changeset IDs, no? All you have to do is SSH into the production server and check this hash, then you can update your local copy to the same version. We stopped using version control for deploys because it's not fast enough -- it's better to deploy into a new directory then hotswap a symlink. In such a scenario we don't have version info on our production server, so instead we write a little .json file with all the details about what was deployed and when. We have a debugbar that only admins can see on the production site, and that shows us this version info so you don't have to SSH in or anything. Alternatively, you could put the version on the footer of your page like stackoverflow.com and others do. e.g., &gt; rev 2017.3.15.25430
Does it work well for you?
Thank you for telling us current unixtime!
Current UNIX time at 2017-03-15 20:09:55 GMT = **1489608595.67** *^I ^am ^a ^[bot](http://pastebin.com/raw/BjBZMYj7). ^Please ^click ^[here](https://www.reddit.com/r/unixtime_bot/submit?selftext=true) ^to ^give ^comments/feedback*
`interval 1 day` doesn't work on unix timestamps. you'd have to convert it first. but mysql only supports conversions between 1970 and 2038.
Current UNIX time at 2017-03-15 20:32:14 GMT = **1489609934.33** *^I ^am ^a ^[bot](http://pastebin.com/raw/BjBZMYj7). ^Please ^click ^[here](https://www.reddit.com/r/unixtime_bot/submit?selftext=true) ^to ^give ^comments/feedback*
 $start = strtotime('+1 day', strtotime($start)); $start = date('Y-m-d H:i:s', $start); That's indeed the easiest way to do it. Another way would be the pull the date apart and then use `mktime` to manipulate it.
&gt; There are more popular ones that those listed Like what? Maybe CodeIgniter, but that shouldn't be used for new projects today. &gt; Also I dont think any of them are specific to PHP 7? No one claimed they are. OP recommended PHP7, and those are frameworks that work on PHP7.
The following will take a column in your mySQL database which contains mySQL unix-time and return a date 1 day in the future SELECT FROM_UNIXTIME(UNIX_TIMESTAMP() + 86400); Replace UNIX_TIMESTAMP() with your column. This returns a date. If you want the timestamp itself, dont use the FROM_UNIXTIME function.
for me it works
Thank you for telling us current unixtime!
Current UNIX time at 2017-03-15 21:09:35 GMT = **1489612175.35** *^I ^am ^a ^[bot](http://pastebin.com/raw/BjBZMYj7). ^Please ^click ^[here](https://www.reddit.com/r/unixtime_bot/submit?selftext=true) ^to ^give ^comments/feedback*
Thank you for telling us current unixtime!
Current UNIX time at 2017-03-15 21:09:43 GMT = **1489612183.19** *^I ^am ^a ^[bot](http://pastebin.com/raw/BjBZMYj7). ^Please ^click ^[here](https://www.reddit.com/r/unixtime_bot/submit?selftext=true) ^to ^give ^comments/feedback*
Thank you for telling us current unixtime!
Current UNIX time at 2017-03-15 21:10:13 GMT = **1489612213.96** *^I ^am ^a ^[bot](http://pastebin.com/raw/BjBZMYj7). ^Please ^click ^[here](https://www.reddit.com/r/unixtime_bot/submit?selftext=true) ^to ^give ^comments/feedback*
Many open source libraries adhere to PSR standards. Knowing the standards means that you can more easily write software that interfaces with those libraries. It's just as useful to know as anything else.
That's pretty cool, thanks for sharing!
Good to know. If it was added to the official source, does that mean it is well supported from IDEs / editors? I know you can use it from the terminal. But at one point people were requesting that phpdbg should implement the DBGP protocol which would make IDE / editor support very easy. They became interested in implementing it, but ended up implementing their own protocol instead: https://github.com/krakjoe/phpdbg/issues/105
phpdbg is good for running from the command line directly. It's unfortunate it doesn't implement an existing debugging protocol for IDE connectivity but at the same time we already have xdebug for that, and I think using xdbebug from the command line is quite poor. So in summary: - Debugging from command line? Use phpdbg. - Debugging with IDE or remote server? xdebug. I've never used Zend's debugger tool so can't comment there.
&gt; Any DVCS will do; notably Mercurial havent used this before but the ubiquity of git makes it a must. Hell you state github is a must but the underpinning is git, isn't that a bit contradictory? At any rate, what's the main advantage of mercurial over git in your opinion? 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Wow that looks awesome!
Thank God, I'm not alone.
I don't think any of the big IDEs (PhpStorm, Netbeans, PHP for VS Code) support phpdbg. 
Yeah I don't think any of those are on the same level as Laravel/Symfony in terms of popularity. Having said that, he does have Yii on the list which is also less popular. 
I've seen a MASSIVE amount of backends in .Net and Java.
It is true, and it is a win. It's just not the absolute kind of win I'm hoping for.
Check your servers mail logs, recipients mail server probably doesn't trust your server. If so, switch to PHPMailer with a smtp service, or use a 3rd party mail api.
[PHP documentation](http://php.net/docs.php) Look at how post and math work. Also; this subreddit isn't for help. Post at [/r/phphelp](http://www.reddit.com/r/phphelp) for help.
Awesome video! so helpful and myHead === exploded 
What seems to be deleted?
The JS side of the graphic could very easily fan out in a fractal pattern. Particularly the "Choose a Framework" part.
Playing with RedBean, it seems super unorthodox. From having to include it instead of using namespaces (although I think they provide a way to do so), to allowing on-the-fly creation of the database schema, I have to wonder, is RedBean considered a good PHP package to use in terms of programming practices. That being said, it is pretty awesome that you can persist to a database without defining a schema beforehand, and I'm enjoying using it.
Could they be fucking with you? --Just a thought. My host switched to the cloud and stopped supporting mail(). Had to switch to a 3rd party library. Ask your user to open up the browser console and see what the output is. It might be that they are using an old version of safari or have some kind of blocker installed that is causing the problem. 
Try Cloudways they provide managed hosting platform on DO, AWS, GCE, Vultr and Kyup. There lowest price starts from 7$/month on DO 512 MB server
The phpdbg repo is historical source for phpdbg, the repository itself is unused and has been for a while. We should have noted this in readme a long time ago, but more important things beckoned. At the start of the project, I spent a few hours making phpdbg work remotely, and knocking up a Java UI for the remote functionality. This wasn't well thought out, or robust, but "worked". It turned out to be a horrible tease. When phpdbg became part of PHP, many people expressed interest in being able to use phpdbg from their IDE. What we should have said is "no, use xdebug": xdebug is mature software, full of features, with excellent remote capabilities. We didn't want to focus on those things, or try to compete with xdebug. Nevertheless, time was spent on a formal protocol for remote phpdbg'ing ... this caused quite a storm in phpland, rightly, upsetting Derick. We never intended to step on his toes, so we backed off. phpdbg has some extremely powerful features that do not fit into DBGp (we later learned that DBGp could have been extended), and because of the architecture of the software is not really suitable for debugging your Apache or FPM process. It is focused on providing a powerful command line debugger, and we are very happy to leave IDE integration and remote debugging to the stable, mature platform that existed when we started. As already mentioned by Levi, if it's remote debugging or IDE integration you want, look toward xdebug. If you are a budding internals developer, or an advanced PHP programmer who is *very* comfortable on the command line, possibly familiar with gdb, or you want to generate fast test code coverage with PHPUnit, then phpdbg may have something for you. TL;DR phpdbg is not dead, long live phpdbg ...
[removed]
https://platform.sh has PHP support, and comes with stage/dev environments. It's a bit more expensive (at least for me) though. PHP is not hard to maintain. Redis/memcache, varnish, nginx etc are not impossible to quickly learn either. Consider rolling out your own platform. 2GB VPSs are available for $10, and that is enough to have 9,000 req/s on Apache with mod_php. A lot more with php-fpm+fcgi. IaaS gives best performance per buck.
Who is this article targeting?
I do like it. Good job! Minor issue - why are there two CSS blocks?
If most mail is getting to you, it's probably your own mail server rejecting the message. My educated guess is that the from address is either invalid or, more likely, has SPF rules on the domain blocking "forgeries" like this. If you know the from domain, look up TXT records on the domain and see if one contains SPF info. If so, that's almost certainly the problem. Change the from header to reply-to and put a generic email (or your own) in its place. Even if that's not what happening here you may want to do it anyway because other messages may be getting lost (or just tagged as spam) as a result. 
Is that "out of the box" so hard to write in full english ?
&gt; Is that "out of the box" so hard to write in full english ? Is "English" so hard to write with capital E? Don't be an ass. Downvote for content, not for abbreviations and acronyms you don't like.
It probably is, but still is an abbreviation, as a non-native english speaker, you have to take into account that a lot of people like me have to learn the english language itself before learning the abbreviations, and I can't possibly know all of them!
I've been a unix/linux sysadmin a good 20 years now. Mostly web servers, used to handle smtp/pop/imap/exchange mail servers too, even experienced the (not) joy of manually editing sendmail.cf and shit like that in the 90s. About two years I gave up wasting time trying to get outgoing SMTP on web servers to be reliable. It's very hard to pass spam filters these days without IP reputation and flawlessly configured SMTP servers. Especially when Google or Microsoft are the recipient hosts (highly likely these days). If you want mail sending to be reliable, you really have no choice anymore. Just use mailgun or a similar mail gateway. mailgun is free for 10k emails/month, and worth just paying for beyond that. You'll never be able to have mail from from your own servers accepted as reliably as one of these big mail gateways. If I sound like a shill by getting you to use a service, go read some more **recent** forum threads on the subject. Most big websites that need to reliably send email now either use one of these gateways, or have their own dedicated team of full time email server sysadmins. And even though you're small, this will still be less work/time/cost to do than trying to maintain your own SMTP servers.
Just a tip if you want people to help you in the future... you should include examples of what you tried. Otherwise you're asking a very broad question that has many different answers. And you'll likely get negative responses because you're not putting much effort into explaining your problem, so people are less likely to put much effort in helping.
EngineYard PaaS for PHP application
The idea is to simplify the code in case where cache miss is normal and acceptable (default values is not to be cached). Example: $x = $cache-&gt;get('my-key', 9); $y = $x/3; vs if ($cache-&gt;has('my-key')) { $x = $cache-&gt;get('my-key'); } else { $x = 9; } $y = $x/3; or vs: $x = $cache-&gt;get('my-key'); if (null === $x) { $x = 9; } $y = $x/3;
It would be great if you could post some blog posts or documentation that show specific examples of when you might use phpdbg over xdebug along with a few examples.
Digital Ocean running http://flynn.io/ which lets you scale beyond one VM if you want to. (Dokku is single node only)
Why C#, Python, Go and Java are all bundle together? Honest question, I'm learning 
good f*ck*ng god, is this one of those political correctness "i'm offended therefore this should be deleted" posts!? all it takes to do is go to your browser address bar and type OOTB, bam! learn something new. good lord! not everyone posts content here to please you!
Just to test, you can change this line and change *$email* to your own e-mail address. $header = "From: " . $email . "\r\n";
Amen! 
Engine Yard was way behind on PHP for a long time, but they are up to 7.0 support finally. The company I'm at hosts three PHP apps on EY and I can say it's fine, but eventually you're going to have to embrace writing (or at least customizing) Chef scripts if your apps scale beyond dead simple. You'll also run into the occasional oddity because the entire ecosystem still sort of revolves around Ruby and the way Ruby apps are deployed. Their support is fantastic though. 
Subclass types when overloading would be a better approach. No need to introduce weird syntax. // Interface public function handle (CommandInterface command): ResultInterface; // Implementation public function handle (MyCommand command): MyResult {}
9000 r/s??? What are you hitting? Your varnish cash? You can't even get 9k r/s hitting a hello world golang app, let alone a PHP app.
Yes! Never pass user input to From.
&gt; would be a better approach. What part of the discussion did you not understand? Obviously a speculative feature won't work as it's neither implemented or an accepted solution to anything.
The number of requests is not the issue. When you need a batch request you usually need to do the same operation on a large number of objects. For example, getting a list of objects, updating a field on a bunch of objects etc. These kinds of operations can sometimes be optimized by stating a database query that fetches everything at once. Here is an example that can benefit a lot from a well-designed batching API: Give me all employee objects created last year, and their corresponding department objects. In your database system this might be a single query. In a lot of non-batching systems you would first fetch a list of ids for employee objects, then you fetch each employee object, then you fetch each department. This introduces roundtrip times and needs a lot of database queries. *That* is where you need batching, and that is the reason most APIs have a special format for batch requests. Doing a subrequest for each object in the batch is not an exciting solution. We can already use HTTP pipelining for that. A batch API should add more semantics to the request which can help the server to optimize the query.
Than nothing more than polymorphism, and in PHP you can have it for free without specifying the typing. Nothing prevents you to do something like: public function handle (CommandInterface command): MyResult { Assert:instanceOf(MyCommand::class, $command); } which throws a `LogicException`.
How many database angels fit on the head of your key value store? The insistence about "never rely on memcached" is amateur hour at this point. If memcached were as unreliable as it claims to be philosophically it would be unusable even for the case it claims to be useful for.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/webdev] [Symfony\/YAML-esque library to use .php for Application Configuration. Feedback wanted :) • r\/PHP](https://np.reddit.com/r/webdev/comments/5zqdmr/symfonyyamlesque_library_to_use_php_for/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Yes, please start an argument with this clown so we can downvote all his replies, too.
Github? Really? Why?
You just can't tell a cache service from a database and thus your confusion. What is good for a cache service (data invalidation) is unacceptable for a database. Memcached is extremely reliable as a cache service but one just cannot use it as a database. It doesn't return value you stored here **by design**. It could be staled due to expiration timeout or simply overwritten by fresher data stored for the other keys. If you consider this behavior OK for a database - well, your definition for one is too generic but not that common.
Because, open source! : )
There is no bundle, I just did not add the details/separate arrows to them; you can pick any of them or the ones that I pointed out i.e. Ruby, PHP and Node are my personal suggestions. Have a look at the legends please, it will give you a better idea.
This. Same boat, same conclusion. We switched to mailgun a couple years back and haven't looked back.
Yep, I went CpE/CS for my undergrad, and now I'm working on my CS grad. I've seen too many devs be able to master a tech stack and end up pigeon holing themselves into that stack. When novel problems come up they aren't able to solve it as quickly or as efficiently as someone with a more rigorous background in the maths. As a dev that is required to switch up web stacks and programming paradigms frequently, having the fundamentals has made my ramp up time quicker. It's also helped me solve the more novel problems at work. You're right though, it depends on the field you're in. If you plan to stay in web dev for the rest of your career, maths is probably not as important.
MemcacheDB site is stale for almost 10 years by now. Do you have any other implementation in mind?
As posted elsewhere previously: class Collection { public static function FromUsers(User ...$users) { // do stuff } }
This looks really nice but there doesn't seem to be any tests? Also it would be great if we could get a demo version. The UI looks great from the image - I just want to explore it a little bit more :P
I have a depth of experience in these technologies that allows me to see their commonality more than their differences. I would say that memcached is not in actual fact, though maybe in usage, a "cache service" as that describes, more accurately, a one way system vs. memcached that does have "modification" capabilities such as incrementing and decrementing values. I would also say that scheduled, as well as purposeful, invalidation of data is a perfectly acceptable behavior of a database. Permanence is not a requirement. Either way, the semantic usefulness of the distinction was what I was expressing disdain for. There is no confusion about people's misplaced insistence on seeming to give a shit whether something is a database or not since the term doesn't accurately describe in an actionable or reliable way meaningful properties of the system.
Per my comment, you'd have to create a new subclass of `Collection` for each and every type of object that you'd want to assert having a collection of. It goes right back to the difference between composition and inheritance. Sure you could do the latter, but the former is an order of magnitude cleaner.
Well, I agree that it's a purely a terminological argument but still, it's not only a scheduled invalidation but essential "counter-persistence" if I may call it this way. When you shutdown a DB server, you don't expect all the data will be lost forever. Which is exact case for the cache. 
Many OO languages allow this...
Submit a PR.
Memory tables have existed if even the most "database" of databases forever. This level of durability is quite common. In addition, most "cache services" are more persistent even than memcached. The most common (file based caching) is quite durable, NGINX microcache survives a restart of the service, browser file caching survives a restart of the browser. Memcached isn't particularly counter anything. It's not a political statement, it's just a property of this particular datastore and one that many, many, many systems are quite tolerant of.
Just for the sake of learning, what do you not like about it? 
Actually, I've been using them a lot more now since I've played around with them. In my experience, traits are only useful if you pretend they've been copy/pasted into the body of your class. In this case, you wouldn’t check to see if the class uses a trait, you would check to see if it implements an interface that the trait fulfills or just treat it as a class method. The way I've been using it is when one class can have a set of functionality shared by another class, but the two+ classes aren't necessarily in the same hierarchy. Most recently, I made a "ReadonlyTrait" with the functions "isReadonly()" and "setReadonly()" per the standard way that functionality is used. Then, the classes I use it in might implement an interface called "CanBeReadonly". In this case, though, the classes that are going to be read-only are assumed to be able to be read-only to begin with, so I don't use interfaces in this case, I just use the functions. On second thought, though, it might be clearer to use an interface to bring attention to that code. Otherwise traits can get messy and can be annoying to try to make sense of. 
Client sites, paying for hosting, yup. I've already looked into trying to update them, but they are based on CMSs that are years out of date. It is just more practical to pay the money and switch hosting over than trying update them. The end goal is to have them all transition to new sites, but that is a mission for our sales guy. 
Look to your right ------&gt; "/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required)."
I see. I guess the "timeline" idea needs to be more obvious.
Well it's literally called a "roadmap". Roadmap and timeline are synonyms.
...maybe? Assuming for the sake of argument that your example works across the board, generics would still be simpler and more readable.
What? A little outside of the discussion, are we? Your statement is true for both solutions and would be a runtime error, nothing else (as with many other features that are not available at compile time).
&gt; Ovh Offhand, do you know what versions of MySQL they offer? I don't see it listed like PHP.
Over-engeneering is the perfect obfuscation, with all due respect, I don't mean to be rude, but if you're actually a begginer, the very first question you should ask is: "why would I build a wrapper around a language feature?". In your case, I don't think it brings any added value, you are basically only encapsulating a (potentially multidimentional, but that does not matter) configuration array into complex classes. Be aware that the YAML nonsense that your readme refers too is complex only in the parsing and caching phase, but the result, in the end, is a simple multidimensional array you can access as such. So, when I read your code, I see it's well written, but basically your are wrapping something that doesn't need to.
Doesn't HTTP2 already handles this usecase?
5.5.54-0+deb7u1-log (from the included MysqlDB provided in web hosting package)
Thank you.
To be honest, I'm generally very happy with jquery. I used another framework that starts with b on one project and it went well enough, but I can't remember the full name right now.
Thank you so much for that write-up! I got to admit that I indeed felt a little attacked by your comment at first. That probably explains my salty answer. Sorry for that! Speaking of over-engineering, you may have a point. I thought of this tiny class to be the best way to decouple frequently used concepts. Can you point me to some ways where I can inform about what is and what is not over-engineering? Because decoupling this made perfect sense to me :c
Decoupling is a good thing in most cases, but you have to have the need to it before actually doing it. I'll explain with this rule of thumb: you write some line of code for the first time then you need it a second time, just copy/paste; if you need it a third time, then think about factorization and or decoupling, not before. It's not the perfect absolute rule, but it's one that works in most cases. You must decouple or factorize only if it fits into a greater pattern which is, will it be ever useful to someone ? And the most perfect answer is, if it didn't serve you, it probably won't serve anyone, ever. Problem is where to start and where to stop? Will it save time later or will I loose more time now that I will ever save later? If your problem is not complex enough so that you can fix it by writing the same 3 lines over and over again, you probably don't need to abstract anything. I can't give you a perfect use case for decoupling, it always depends on your project and your need. But when you write a single class, that only carries 2 methods with no more than 2 lines each, it's probably that you failed in your design, you probably took much more time to decouple than it will ever make you gain in the future. 
Yeah. I have no desire to relearn angular or change all my plugins. NG1 FTW!
It seems to me that they are lacking because you are not building API's but mixing js frameworks that are best used for SAP and actual PHP views
Currently using Angular 1 with TypeScript, and quite happy with it. Especially important: API boundaries encapsulated as DTOs defined via TypeScript. Didn't try Angular 2, but not really having a strong need for it so far.
Backbone
Zend Certified Engineer(5.3) and Zend Certified PHP Engineer(5.5) here. Will passing the exam make you look good in the eyes of potential prospects? Yes, your resume will highlight between others, no matter if others have more experience than you, I took the exam and 2 days later I was working in a new job, others candidates have more experience than me, a lot more, it was my first job and I got it, ok a certification doesn't prove that you know how to program, but a least it proves that you know how PHP works very well. How many minutes is in the exam? 90 min How many questions are in the exam? 70 What is the passing exam score? 2 years ago was 70 points or more, idk now... There is no point studying for an exam if nobody likes it. That's just right, do not take the exam if you only want to have a certification that everybody could admire, take the exam for you and to test your confidence as PHP developer, most people dont even knows that ZCE exists.... 
Right! Backbone. Used it on DIA.
I love ionic too, but for mobile, I prefer nativescript + angular 
I used to use Backbone and loved it back in the day. I've since migrated to Vue and am loving it. Some of the painful things about Backbone have just gone away. Of course, Vue brings a smaller set of new pains, so it's no panacea. The thing that really pains me about either of them, though, is trying to handle relational data. Backbone-Relational kinda worked for that, but was awkward. For Vue, I'm seeing no such thing. The way forward with it is starting to look like using Vuex (a Flux implementation for Vue) and just implementing some methods on the store to fetch all of a related model based on some key value.
If order isn't important: cat dataA.csv dataB.csv | sort -u &gt; third.csv
What about advanced HTML, such as preprocessors or frameworks? Which is the best in your opinion because it's one of the things I'm looking into.
I need more Info tho 
Hello world is useless benchmark, what would that prove? It's a PSR micro framework based on zendframework/zend-diactoros. What's to benchmark? Fast Route is quick, you can use pimple over zend-servicemanager everything else is down to you.
This is a very good idea. I've been entertaining the idea of Docker for some time. This would be a good opportunity.
 $ dig TXT yahoo.ca ; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; TXT yahoo.ca ;; global options: +cmd ;; Got answer: ;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 43978 ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0 ;; QUESTION SECTION: ;yahoo.ca. IN TXT ;; ANSWER SECTION: yahoo.ca. 5358 IN TXT "v=spf1 redirect=_spf.mail.yahoo.com" yahoo.ca contains an SPF record, so what you're describing is exactly the behavior I would expect. 