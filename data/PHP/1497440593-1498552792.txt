What kinds of data do you have in mind? It can convert between anything that is representable in "digits". If you want to convert `!$SDFP&gt;:{?` to some other base then no problem, just tell Numbase what is the value of `!` and other symbols. Please take a look at "showcase" section in README. I would be grateful for any examples of your use cases and possible ideas.
##International Safe Harbor Privacy Principles The international Safe Harbor Privacy Principles or Safe Harbour Privacy Principles were principles developed between 1998 and 2000 in order to prevent private organizations within the European Union or United States which store customer data from accidentally disclosing or losing personal information. They were overturned on October 6, 2015 by the European Court of Justice (ECJ), which enabled some US companies to comply with privacy laws protecting European Union and Swiss citizens. US companies storing customer data could self-certify that they adhered to 7 principles, to comply with the EU Data Protection Directive and with Swiss requirements. The US Department of Commerce developed privacy frameworks in conjunction with both the European Union and the Federal Data Protection and Information Commissioner of Switzerland. Within the context of a series of decisions on the adequacy of the protection of personal data transferred to other countries, the European Commission made a decision in 2000 that the United States' principles did comply with the EU Directive - the so-called "Safe Harbour decision". *** ##EU-US Privacy Shield The EU-US Privacy Shield is a framework for transatlantic exchanges of personal data for commercial purposes between the European Union and the United States. One of its purposes is to enable US companies to more easily receive personal data from EU entities under EU privacy laws meant to protect European Union citizens. The EU-US Privacy Shield is a replacement for the International Safe Harbor Privacy Principles, which were declared invalid by the European Court of Justice in October 2015. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^] ^Downvote ^to ^remove ^| ^v0.2
It's a separate package. Anyone can use it as a promise implementation.
In current code Queue class calls $this-&gt;push(...); , but it doesn't have any push method, abstract or not. So, this class just hopes that inheritor will implement all methods from QueueContract. This "hoping" looks very weird. I just tried to force them to implement it.
That's what I mean by saying if the pull request also implemented the abstract methods in the Queue class.
no
[removed]
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [laravel/framework/.../**DatabaseQueue.php#L9** (5.4 → bd858cc)](https://github.com/laravel/framework/blob/bd858cc8b18d26ce00a6c5dbf893c4e4f20d7b9b/src/Illuminate/Queue/DatabaseQueue.php#L9) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply diw2h4e.)^.
Signed up :)
IANAL but I do work for a company that is dealing with this a lot. Safe harbour is on another level. You need a processing agreement in order to be allowed to hand any personal data to any 3rd party. No exceptions. (apart from when you are legally required to hand them over to the police for instance). This has nothing to do with whether the data leaves the EU or not. A German company handing data to another German company would need to do this as well. So unless you have such an agreement with Dropbox (and I don't believe anyone has) you have a problem. Safe harbour is about whether you can send the data to the US at all. Even if you have such an agreement. At the moment you can, but the current agreement between the EU and the US is heavily criticised because it offers no real assurances that the US government won't force US companies to hand over the data anyway. So I wouldn't be surprised if it's invalidated at some point.
http://inchoo.net Helped me quite a lot in understanding of Magento.
"PHP compiler" PHP isn't getting compiled, just interpreted. 
I would have let it go as a mistake but it's in there twice. 
#!/bin/bash mysqldump -u user &gt; mybackup.sql aws s3 ./backup.sql s3://mybucket
[removed]
Encrypt the backups first, then put the encrypted files in DropBox.
Nice read. That must cost an absolute fortune on AWS which would cost less than $50 on a dedicated server
Database configuration and making it a mvc, ill figure it out though
Dam it, I need Sublime Text, Filezilla and XAMPP installed to use this tutorial and I don't have any of those. /s
[removed]
hmm, for me even a reference fails. php &gt; $array = [1]; php &gt; echo reset(&amp;$array); PHP Parse error: syntax error, unexpected '&amp;' in php shell code on line 1`
You state the product page receives around 2million hits a day, the linked page is 90kb in size that's about 180GB of traffic a day for that single page if my maths is correct? So that's over $5 a day just in traffic for a single page on the site without any other costs associated with the severing of that page, file storage, compute etc so we're already up to $155 a month just to send a response back to a user for just one page. I understand the use case of AWS for someone just starting with a low traffic site but it seems silly to pour that much money into AWS when you hit any kind of scale considering how cheap dedicated servers are now. Each to their own though
[removed]
It's possibly marked as taking the parameter by reference, just to assuage the possible concern people could have about the array being copied before being passed to the function. Which is not a real concern in PHP 7, but possibly was in earlier versions of PHP. The code inside current() just doesn't do anything that triggers the "is variable or a value" check, as it doesn't need to. You could update the docs if you felt like doing so. 
On PHP 7: The docs are simply outdated, current() now takes by-value On PHP 5: current() did not accept by-reference, but by-prefer-reference, which is a special mode only available to extensions. It will accept by-reference is possible, but also allow passing values. The reason why this was done even though the function does not modify the array is related to the fact that on PHP 5 a structure could not be shared between a value and a reference. As current() is generally used in conjunction with reference-functions like next(), this would have lead to unnecessary copies.
You _could_ do that, but there's no reason to. (1) You have to assign a separate task queue. (2) `PromiseInterface::wait` mixes responsibilities. (3) Why would I use that over ReactPHP's or Amp's implementation?
(3) not saying anyone should, just providing options.
Absolutely, that is probably the best option. The defaults should do as I said. :)
That clears it , thanks!
No, that won't work. You will need add extra columns to your table to store the old values (will work but not great database design) or add another column to store a version number or status. The general idea being when they hit reset in your form, it submits to your php script which then pulls the old values out of the database and restores them, or deletes the newer data (this depends on how you are fetching the data and your use case)
Whoops! You're right. It should be spelled "Laravel". https://laravel.com/ The reason I included the descriptor before PHP API is because we have two PHP APIs - one is based on Laravel and the other is based on Amp.
Thank you very much for your assistance, but how would i be able to fetch data from a database in php and display in textbox before editing. ** i know how to fetch data, but i dont know how to fetch it into a textbox
Yep! Our entry point is a nodejs server. We do server side rendering for react there.
Agree with this 100%. My thought is that developer time is by and large more expensive than infrastructure costs. Lowering the amount of maintenance, scaling or building a developer has to do usually has a positive ROI. 
As a side node the MySQL code you wrote is vulnerable to SQL injection. https://youtu.be/_jKylhJtPmI Use PDO or mysqli prepared statements. 
I was able to run a site serving 1.5mm views in a day on a shared account with most views running several aggregate functions in MySQL with millions of rows using plain PHP and MySQL and only me managing it and no cache at all. 
You could write PHP in textbox value attribute, that echoes the value from db... 
it really annoys me how often people downvote things they simple dislike or disagree with. I mean generally, I don't feel confident enough to say whether this sub is worse than average or not. I wonder if reddit's scoring algorithm could be tweaked to devalue downvotes from users that issue lots of them... similar to how a post will get less and less karma as the upvotes get higher and higher
It's not just newcomers that get hit by toxicity, it affects everyone. Literally everything I submit used to get reported as spam. I don't know if that's still happening. (I haven't asked /u/FrozenFire in a long time.) I'm not entirely sure that the apparent toxicity of the PHP community is totally or even mostly localized. Some alternative causes worth considering: * There are a lot of Redditors (especially in /r/programming) that look down on PHP and people who use it. * There was an influx of *outright shitlords* from /r/drama during the CoC discussions, some whom may still skulk about to this day. * Bots. Holy shit, are there ever bot accounts. Unsurprising, considering that Reddit used MT19937 to generate its CAPTCHA for a long time. Unfortunately, there's very little we can do about either of these three factors, except scream into the void and hope against all odds that a Reddit admin remotely cares about us. My point is, we shouldn't be quick to assume the community is the source of the toxicity. However, to the degree that it is toxic, that's the only factor we can directly control, so I think you're probably right to focus on that. (Hopefully this comment side-steps a lot of bikeshedding comments from nitpickers about the actual sources of toxicity.)
&gt; Hello All, I am both new to this subreddit and PHP so please forgive me if my question sounds ridiculous. Welcome to this subreddit! There are no ridiculous questions, only ridiculous answers. :-) &gt; I have made a User registration system using a PHP script via POST. I would like to ask how to I send sensitive data back from the server to the client. Have you built some kind of RESTful API? What kind of sensitive data are you trying to include in your server's response? What does the registration process look like? &gt; I hear that simply echoing the data will be good enough but I feel as if it is not secure / correct. Why do you feel as if it would not be secure or correct?
I guess we left/are leaving php for different reasons. I'm on my last php project because of folks who scream thought police and censorship over what I consider should be basic norms of behavior.
hehe well it's funny. But I fear it is incorrect. Duck typing makes assumptions. Your code, makes no assumptions. furthermore if $garbage is instanceof UsableTwo with the same functions, it will return 'no dice' even though it should not. under https://youtrack.jetbrains.com/issue/WI-36786 it seems like they will implement a feature I requested
[removed]
&gt; the injection of entrist political ideology over the past few years has lost much of the good-will that the larger "PHP Community" once had. It's why I've mostly left, and have changed my career focus. The PHP community has become too political for opinionated people to survive in it. I'm relatively new(I guess I'm coming up on 2 years of regular PHP use in a professional setting) to the PHP community and unfortunately this is the impression I'm getting. We've seen it with things like the CoC, some FIG shenanigans, and the Drupal incidents. I'm extremely thankful to mods like you who make an effort to allow free and open discussion. In all honesty if there wasn't a place for that I would probably be drawn away from PHP as a whole. I already have major reservations about investigating Drupal further because of the social/political drama and behavior I've seen. I'm not saying it's a reasonable reaction necessarily, but the fact is that this type of behavior pushes a lot of people away. 
&gt; I wonder if reddit's scoring algorithm could be tweaked to devalue downvotes from users that issue lots of them... similar to how a post will get less and less karma as the upvotes get higher and higher There's a lot of tricks they use to avoid abuse. IIRC under some conditions up/downvotes cast through a user's profile(e.g. /u/Dgc2002) will appear to count but don't actually. 
300k in a single directory shouldn't be any problem for modern file systems. I created 500k files on one of the servers - works fine. As long as you have enough inodes. Regarding UUID: I should have clarified that the problem here is not to get unique filenames. I want them unguessable.
That's too bad
I wasn't trying to open a debate, you didn't have to explain your side. What you said is already quite clear through other posts. I've been coding in PHP off and on for 10+ years, and I just stopped being able to stand it. You're welcome to it though of course.
That's great! It's really cool that they addressed the issue so quickly. A+ support right there if you ask me.
[Mydumper is better](https://github.com/maxbube/mydumper)
Though im not sure if the change to php 5 way is correct really. It feels more consistent that get_object_vars was returning stringified properties. Why? Because you can't actually access or create property like `$object-&gt;1 = "anything";` or `$object-&gt;1`. Doing something like: $key = 1; $object-&gt;$key = "anything"; Allows you to do it, this feels weird really. Oh okay, you can do `$object-&gt;{1}`. Didn't know this.
The unwelcoming attitude I was referencing was your angry response to not being well-understood. It was entirely counter-productive. You should consider yourself on notice that continuing to be abusive as you are will result in a ban. I've given you a lot of leeway as I assumed you were just trolling in a light-hearted way. You're crossing the line into abusiveness.
[removed]
&gt;== What is mydumper? Why? == &gt;* Parallelism (hence, speed) and performance (avoids expensive character set conversion routines, efficient code overall) * Easier to manage output (separate files for tables, dump metadata, etc, easy to view/parse data) * Consistency - maintains snapshot across all threads, provides accurate master and slave log positions, etc * Manageability - supports PCRE for specifying database and tables inclusions and exclusions So far so good... &gt;== How to build it? == jerry-seinfeld-leaving.gif 
&gt; I've been coding in PHP off and on for 10+ years, and I just stopped being able to stand it. You're welcome to it though of course. You're turned off using a language you've used for 10+ years because of the actions of a few in one of vast communities in the language? That's strange.
I use vagrant, so I wonder if that has to do with anything.
There's no substitute for installing PHP, getting a good code editor, and Googling a lot, while trying things. Do check phptherightway.com but don't consider all of it mandatory for proper development. Just a good set of reference points.
&gt; Excessive self-promotion To be fair, /u/sarciszewski does post a lot links to his own stuff here in /r/PHP. I can think of a few others who do the same. There's a very clear difference between spam and something useful, though. /u/sarciszewski's content is always pretty useful. I'm not the one reporting, but I can see why someone would. Though I can't imagine why someone would give enough of a shit to report it every single time.
Your architecture seems strangely... extremely convoluted for some reason? Also if you guys are moving away from PHP then there's no reason for it to be here... just saying.
Haaa! I got Sublime Text but.....
I agree that it's complicated right now. In a perfect world we'd be in the state you describe - with no PHP. However, TpT has been around for ~10 years and has helped ~5 million educators during that time. We've built a bunch of features along the way including products outside of the core website like our Android and iPhone apps. The reality of our landscape is such that we're swapping out the engine of an airplane while it's flying and do not have the risk appetite for major turbulence. The situation described is what inevitably leads to this complexity from my perspective. Have we nailed every call correctly during the migration? Definitely not. However, we're continuing to delight our customers on a daily basis despite the temporary complexity and that's our bottom line. Does that context help put the complexity in perspective?
As some pointed out, it might not have been the best example, given that the OP of that topic was kind of mad at everyone not agreeing to his point of view. I'm fairly new to this subreddit, and try to be semi-active. Posting some of my own opinions, but also going into many other threads and having conversations about PHP, and sometimes even helping people out. Personally, in that one month I've been trying to be an active community member, I haven't felt about the PHP subreddit the way you describe it. On the contrary actually. I've always felt the PHP community had been much more welcoming than other subreddits, eg. /r/webdev.
If you're into videos to learn, and willing to invest a small amount of money in that learning process, laracasts.com is the place to be. Especially the PHP section: https://laracasts.com/skills/php, which covers bare PHP and programming principles, in comparison to a full blown framework.
WAMP provides the necessary server setup for you to run PHP, without you having to worry about tinkering with configuration files etc. yourself. If you have another host, setup with Apache, PHP en MySQL, you can just copy over your source files, make a dump of the database and import those into the new MySQL server. Regarding the source files, you'll need to let Apache know where the so called "document root" is located, this is the directory in which Apache will search for files, with a default to `index.php` or `index.html`. If you want to fully copy the WAMP configuration to another setup, I think you must do it manually. Not 100% sure though.
So you're suggesting that tpt, who has generated 175 million in payouts, should move away from the industry standard in hosting providers because they could save a few hundred dollars... Thank you for the chuckle.
I had just gone to a PHP conference and he recommended me laracasts as well. Thanks for the help :)
Did you ever come up with a secure solution for your project? Just curious what you decided on.
Out of all this stuff only Google is essential. Either you're able to help yourself, even with this very question, "How to start with PHP", or better forget it. "Coding", as you call it, is one of professions that heavily rely on *research.*
I was about to post a similar post but I dare not post it. I was scared of being downvoted (or even worst) :) Side note: I read and post on some other subreddits, and I'm not afraid of downvote. An example of welcoming community: https://www.reddit.com/r/rust/ I almost never post on PHP because I'm scared. Remember: this bookmarklet gives happiness on a subreddit: `javascript:$('.arrow.up').click();` ❤️ ❤️ ❤️
Can you post anything without throwing in some personal inuendo aimed at trying to piss someone off? Seriously, try it some day. Say what you feel by all means, but insinuating people's motivation in a negative way will really get people's back up. That last sentence does that, and leaves people with a sour taste in their mouth, and in a defensive situation, rather than encouraging them to engage in discussion. The implication is that you don't want discussion, so there is no point continuing. 
Someone asks how to start learning PHP and you recommend they learn Python? Wow... no wonder you're getting downvoted! This is a PHP sub! Also, finding PHP hosting is a hell of a lot easier than Python hosting... I'm assuming the OP doesn't want to start pissing around with mod_python or mod_wsgi. OP, go for PHP! Stick to your guns!
&gt; I assumed you were just trolling in a light-hearted way Given his reddit profile I'd say thats exactly what he was doing. Maybe this is a discussion for elsewhere, and I'm not familiar with any mod rules of reddit, but when there's someone like that who is clearly never ever going to add value to the subreddit, would it not make sense to kick them out there and then and save the extended hassle of having to clear up their mess all the time? It's not the first time that this particular person has intentionally annoyed or insulted people here and it wont be the last.
it was kind of the point to make something convoluted to show how easily you can lose track of where things might be changing your instance. I didn't say it was *good* code, I said it was *common* code. :-) 
Yeah I agree, I like his articles and think they add value to the sub. At the same time I can see why people report them because he literally will only post links to his own stuff and nothing else, its basically a marketing channel for him rather than being actively interested in other things going on in the community. 
I also have been moving around communities away from PHP because the quality of PHP contributions has really taken a dive and its mostly new comers posting/talking about complete crap with literally no basic under standing what so ever of computer science at all. Other communities (mostly GO for me) have a higher grade of poster creating thought provoking and in depth discussions which PHP simply doesn't have. For me PHP is entering such a great phase in the 7 series it should really be enjoying an up-surge in high quality developers but I feel they are put off by the overall poor level of PHP developers in general and the baggage the language has with it from years past. It's a shame I want PHP to succeed but I don't know how to fix it.
Personally for learning PHP I'd recommend CodeCademy you can sign up for a free course here https://www.codecademy.com/learn/php. CodeCademy also has HTML and JavaScript courses you may find useful. Unfortunately though, If you're looking into web hosting you'll have to pay money for a VPS or other alternative. Good luck!
What if the data is properly encrypted? Is it then personal data or just random noise?
Unrelated to the post itself, just to the theme of it. I sincerely hope none of my old clients sees this blog post. I can see a lot of new "facebook killers" being requested to my old team for under 15 000 euros with a deadline of a month and a half.
I've reported this individual for mod attention several times. I am with you on getting this sub to be _generally_ better, but on this occasion I don't feel I even need to read the threads. They are a troll. 
The monolith got unwieldy over all those years and hampered our ability to iterate without introducing bugs.
I think the influx of bad developers stems from PHP's low bar to entry, and there's not really anything we can do about that. You just install WAMP and edit the `index.php` file with Notepad, and bingo, you're developing in PHP. The race is on to add SQL injection and XSS vulns and ask zero-effort questions on Stack Overflow. There is an online publishing industry supported by Google Ads based on terrible quality tutorial material, and I've tried tweeting to those people in the past, and they don't reply (or they agree but don't change their material). This is partly why I don't like video tutorials - if there is a security problem, the cost to the producer of fixing the error is generally too high. And thus they leave terrible material up. 
But how changing language will help that? You can build a monolith in any language...
&gt; You just install WAMP and edit the index.php Yeah a lot of people think WAMP/XAMPP + cPanel hosting is PHP and have literally no idea about servers or the underlying reasons PHP doe's things in certain ways. I met a "mid-level" PHP dev only a few weeks ago who didn't even have a basic understanding of types or why it even matters which type you use. That deeper understanding can't be copy and pasted from stackoverflow and that's where our community on a whole lacks. I see it time and time again on here and other boards company owners asking where the hell do we find good PHP devs because they can't even get candidates with even the very basic understanding of computer science topics.
Mods have control over the CSS, so they can hide one or both vote buttons if they wish. Many subs do that. However, I am not sure forcing a valid reason is policeable - even if the Reddit platform could capture it, I doubt any sub would be able to widely agree on what constitutes a valid reason. 
Yep. I don't think there can be a quick fix though. Getting people through a Computer Science degree is helpful, or perhaps encouraging more organisations that employ programmers to help with vocational qualifications. Getting to a good level of understanding is _really quite hard_. Another problem is encouraging self-resilience and determination when it comes to researching a problem. I'm a seasoned Stack Overflow user/editor and it's getting to the point where I spend more time rescuing or closing terrible questions than actually answering any questions. It's a huge magnet for lazy programmers who think they can just outsource their work to volunteers. I'm not quite old enough to be complaining about the youth of today, but give it a couple of years, and I'll be doing exactly that. The "culture of free" amongst bad programmers is a huge drag on our profession. 
There's a bunch of introductory materials in the sidebar at r/PHPhelp. 
I was actually wondering why you needed / felt you need to use sleep. Was there a technical reason for it?
&gt; because he literally will only post links to his own stuff and nothing else [This is factually incorrect](https://www.reddit.com/r/PHP/search?q=author%3Asarciszewski+-site%3Aparagonie.com+-site%3Agithub.com&amp;restrict_sr=on&amp;sort=new&amp;t=all). &gt; its basically a marketing channel for him rather than being actively interested in other things going on in the community. My interest in the other things going on the community cannot be measured by submissions, but rather, [comments](https://www.reddit.com/user/sarciszewski/comments/). I also frequently give a 1 minute security review of (virtually every) library people post here and attempt to inform them of any issues I find so they can *never need to hire me*. Finally, there are a lot of things I publish that I don't link to on Reddit because they add no value to the community. Recent example: One of our blog posts (June 4, 2017) is like 90% self-promotional and 10% informational. You will never see me submit it here. Shrinking my potential customer base, doing work for free, and never sharing material that might sell our services and offset the time costs of the first two: If I were treating Reddit as a marketing channel, I'm doing so rather poorly. It's easy for people to look at what I'm doing and assume "oh, this is a marketing thing" but just an ounce of [background knowledge into my motivation](https://meta.stackoverflow.com/questions/293930/problematic-php-cryptography-advice-in-popular-questions) for being involved into the community ought to make folks question their assumptions here. If the optics are bad, that's simply because I don't bother trying to deceive or manipulate people because I find the act of doing so very distasteful.
If you are creating micro services, especially ones living in docker/ecs/kubernetes containers, PHP is sometimes more of a pain to deploy. Having to create separate containers for nginx, php-fpm and the app itself could easily be just one container with Node or Go for example.
I'm pretty sure you are friendly firing here. /u/twiggy99999 seems to be on your side on this matter. [edited] I am too, I learn a shitton from you every other day, and I have a craving for high quality content **where the whole problem space is explained, not just the solution**. Too much blanket statement in this sub. I am pretty sure almost all of our good practices can be bad ones or irrelevant in some contexts. You usually show both sides of the coin. And to be honnest, even if you were blatantly self promotting (didn't say you are), with such high quality, flood me if you want.
I think many regular Reddit users probably have something like Reddit Enhancement Suite which allows you to disable subreddit themes. I have all themes disabled by default because they're either terrible or don't play well with REI's 'night mode'
ah ok that makes sense
Not really.. A matter of trial and error, depending on the tasks which are executed in parallel, intervals of 1s sleeptime might be too high. But that might be overthinking the problem, because such small processes could be as well be handled in the parent process, eliminating the parallel overhead. So no: not really any good reason besides that train of thought I had whilst coding :)
My personal suggestion is to split the projects and merge patches into each other when needed. Common components can be united into modular code if needed, but usually that's a big waste of time on customer-specific stuff.
I'd like to say I am an expert in JavaScript, and have enough experience with Webpack for you to tell me what you want your app to do and be able to write a custom webpack.config.js file from memory, and I would still rather use Mix.
from the sidebar: &gt;/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required).
To me sounds like a non-existing engineering problem.
code and message are not in the array, they are a JSON object. you will need to json_decode() the response and then access the elements like an object: `$test-&gt;code . $test-&gt;message`
phptherightway isn't a tutorial, it is a guide to follow standards.
Not really a tutorial but provides a lot of useful tips and links. Beginners can learn a lot from there.
Is there any any difference performance wise between this way of returning value in the function: function someFunction(){ $var = someActions(); return $var; } and this way: function someFunction(){ return someActions(); }
True, my point was that this smells like it could easily not be a problem if less "cool" techs were used.
I will definately look into this a bit further, but it seems really handy. The problem is currently that I need to migrate everything over and then change the IP of the VM to direct current traffic to it. It's one of those things where we monitor things from customer so I can't really have a lapse in coverage. 
The beginner would first need to understand the concepts before knowing the best way to do them. No point telling someone to use dependency injection when they don't know the first thing about Object orientated PHP or Abstraction.
Your suggestion was shared on he PHP internals mailinglist ;-)
Thanks psr2!
if your host is running linux you might be able to install a pcntl package from the installation media, even though pcntl is supposed to be built in to PHP maybe you can sync the composer cache from somewhere else, I'm not sure if it still checks for internet (https://getcomposer.org/doc/06-config.md#cache-dir) or tell your boss that no web developer can function at their peak without a working internet connection :(
you should check the header for an accepts header https://symfony.com/doc/current/components/http_foundation.html#accessing-accept-headers-data if you get a 'text/html' you respond with your twig rendered view. if you get a 'application/json' you respond with json (use JsonResponse) object.. 
Sorry to hear! Being afraid to post due to fear you'll be heavily criticized if your content doesn't perfectly line with with the "right way" to do things as viewed by the community is a real problem. People should feel safe to post a topic no matter their skill level or industry experience. Hopefully this thread encourages /r/PHP to band together and improve on that.
I'm not really sure to follow what you application is doing: - Why do you need to install development dependencies for your application? - I don't really get your trick either: your solution is basically bypassing any dep manager to just install them and pray for having no conflict and incompatibilities
Exactly! I don't know anyone who physically uses the [spacebar] for indentation, I just assume people press the [tab] key and it inserts a set number of spaces (and 4 is the correct number)
Said poster simply made the mistake of falsely revealing a fallacy. He should just have asked how the problem can be solved.
&gt; Why do you need to install development dependencies for your application? We use development dependencies on developers’ machines and CI server to enforce coding style and prevent some mistakes. &gt; I don't really get your trick either: your solution is basically bypassing any dep manager to just install them and pray for having no conflict and incompatibilities We would like to use Composer but it is not possible due to its limitations. 
That may wholly depend on the framework, if they supply testing solutions for that, but mostly you can create integration and functional tests, using a testing suite like PHPUnit. Other solutions include selenium, which you can also use with PHPUnit.
Looks interesting! PS: the certificate of your demo site https://o-0.me/dump_r/ expired on 05.01.2017 17:25 ...
I'll sidestep the main question: For local package development it's much easier to configure a [path repository](https://getcomposer.org/doc/05-repositories.md#path). Like so: "repositories": [ { "type": "path", "url": "../local-package-dir" } ]
Sounds like something his boss would say.
yeah, i've been dragging my feet to swap the cert for a Lets Encrypt. it's a personal server that doesnt see much use :/
&gt; and 4 is the correct number http://i.imgur.com/ef0wReq.jpg
And this is exactly why you should just use tabs. You can both use whatever level of indentation you like. 
&gt; And this is exactly why you should just use tabs http://i.imgur.com/ef0wReq.jpg
This is a strawman, no one's arguing about pressing space 4 times. The main problems are: - Tab is the technically correct (the best kind of correct) character to use. It's one indentation unit. - Enforcing spaces means you also have to enforce a specific indentation level (e.g. 2 vs 4 spaces). Everyone must view it in the enforced way, rather than what is more comfortable for them. - Copy-pasting is worse with spaces. It's easier to copy "half a tab" or whatever. Here's a good roundup of other minor issues: http://lea.verou.me/2012/01/why-tabs-are-clearly-superior/
Gaming industry. Regulations are quite heavy in everything that involves customer data (understandably so by the way) 
Hah :) But what about [this](http://www.yaml.org/faq.html)...? 3:) ;D &gt; **Why does YAML forbid tabs?** &gt; Tabs have been outlawed since they are treated differently by different editors and tools. And since indentation is so critical to proper interpretation of YAML, this issue is just too tricky to even attempt. Indeed Guido van Rossum of Python has acknowledged that allowing TABs in Python source is a headache for many people and that were he to design Python again, he would forbid them. 
I think branch in Git should be useful for you. Keep each of your client's app within its own branch. That way you can easily track any configuration changes. Better yet, learn how to take advantage of Git as a deployment tools. For example bare repo on your server that checkouts to your working directory.
vague questions get vague answers, but take a look at botman if you haven't already. https://botman.io/
The only argument I need is "What key do you press to indent?"
I'm not a big fan of committing environments - it makes it hard to do development with multiple dev (for our apps at least). Given you're deploying the same application, I would recommend looking into the possibility of using the servers environment variables (ENV's set on the vhost or nginx hosts). They will look like this: nginx 'location / {' block: fastcgi_param CUSTOMER_SPECIFIC_CONFIG_HERE abc123456; apache virtualhost block: SetEnv CUSTOMER_SPECIFIC_CONFIG_HERE abc123456; This is assuming they are not things the client could reconfigure. If the client can configure them to a degree I would put them into the database.
There is no problem. Although hitting backspace to delete a tab is more convenient than having to hit shift+tab. When you use spaces, you risk inconsistent indentation as your indentation as your indentation unit is "4 things" instead of "1 thing", and those "4 things" are small and hard to detect if you're a space off sometimes. Other than this... who cares. I personally solve this issue by having filters that convert spaces to tabs on open, and tabs to spaces on save. Now everyone can have their precious spaces in my repository, but I have my even more precious tabs in my editor. Also this study seems quite useless, I bet it's implicitly correlated on what language the developer uses. Most developers stick with language conventions, and so those who use tabs will be those whose language recommends tabs. Then blaming their salary on the use of tabs is obviously silly.
I read this as "I get paid less than 1k". Was getting ready to hire you for $2k.
"We use tabs because it is best, but there are lots of problems with tabs".
Does this take into account developers who prefer to use tabs, but are forced to use spaces?
The blog post has data for the correlations between language and spaces vs tabs vs salary.
I think it's because they liked the idea, even if they adjusted it a bit
people hate it... lol
You can make your editor insert spaces when you hit tab, you know. It works really nicely.
I recently switched to spaces only instead of tabs, so seeing this article makes me very happy.
why? i'm seriously interested. what are the advantages?
Yea sorry about that. Data mining
Ah, i was using mobile so i was oblivious. Thanks 
I like to pad my code with 3 spaces and two semicolons on each side.
&gt; hitting backspace to delete a tab is more convenient than having to hit shift+tab What editor do you use? Mine deletes 4 spaces when it's whitespace at the beginning of a line.
Let me guess, you probably use PHPStorm. I use Zend Studio :-)
It may be as simple as running phpenmod trader
I use spaces to get around the crazy shifting shit that happens in different IDEs when tab stops are changed. Forcing conversion to spaces keeps things uniformed whether I'm using PhpStorm, vi, or vim regardless of server. ^_^ 
"Data mining" sounds incredibly broad. But if you have an idea of where to start, go for it.
Thanks to /u/kelunik for letting me know, he knew I was waiting for this one :-) Also: with the v2 release, [amphp/parellel](https://github.com/amphp/parallel) is also tagged now!
Thanks &lt;3
Oh... Sorry.. :-# Should I delete it?
Guess I was a bit too exited after your message.. I've been waiting for this release for a while now :-)
A lot of people waited for that. :-) And it's the reason I wanted to wait with the announcement, because people are really exited now, but not all packages are tagged yet. Here's an overview: https://gist.github.com/kelunik/c981c655618c2536f4178ed8de9eabb1
Can we expect some blogs on this? :) 
As I stated in the topic - new ones and don't remove old for backward compatibility. I did not write something about "breaking changes". I'm using phpstorm and even in this case I often check for arguments etc, because I'm typing fast and not waiting it to show helpers for arguments.
cloud9 is open source! So you could just spin your own instance. Of course, there is the same risk as with nitrous.io that shut down unexpectedly, but it would be silly to not have anything under version control anyway. I use cloud9 for eveything code-related and am very happy with it.
I've seen this project [pop up a few times](https://github.com/php-pm/php-pm/issues/146). I used ReactPHP years ago and just discovered Swoole, both seem to be very popular and actively developed. What's the motiviation behind amphp, why would I use it over these other established solutions? Great looking project though.
I think the future is to make everything an object even strings and arrays, and these will be specific methods that the object can use. At which time rewriting with backwards compatibility won't be a problem.
Yes, there actually is an RFC for that: https://wiki.php.net/rfc/consistent_function_names. Its been "under discussion" for two years and it didn't make the PHP version the author targeted (7.0), so I'm not sure if the RFC is going somewhere or has been abandoned, but an RFC does exist. There is also a bug report (https://bugs.php.net/bug.php?id=52424) which Rasmus marked "Won't fix" with the message "We don't mind change, but our users really really don't like it when we break their working applications for cosmetic reasons."
I'm not saying it lacks features (although I am sure it does, especially compared to IntelliJ). It's just really slow, the autocomplete, hinting etc. doesn't always work and it's just "sloppy" in general.
Yes, but why no new builtins with better naming, arguments etc? Old ones can just use new ones inside them, for not copy-pasting code.
This RFC is actually decent. Wondering why no love and attention for it.
http://php.net/manual/en/types.comparisons.php
The first one cast the string to int=0, and performs the comparison 0 == 0, which is true The second one compares the string "and" with the string "0" (no casting), and since the strings are different, evaluates to false
I gave up on max line length the same day my employer disposed of their last EGA monitors and dot-matrix printers at the local recycling station. I believe that was back in 1997 or some 20 years ago...
No real tangible return on investment. There are loads of tools to help developers stay straight. While a vocal set of developers wouldn't mind and would embrace it, there are thousands of average developers who would never use it or care to. It simply wouldn't see heavy adoption for a long time and even when it does, the old apis still can't be removed. It's situation that no matter what you do developers will complain about something. So might as well continue with the devil you know.
To much duplication leading to confusion without any tangible gain.
I think adding more functions with different names, parameter order and version requirements alongside the existing ones will led to even more ambiguity and confusion.
You can write your own wrappers if you prefer a more intuitive API. Not entirely sure adding more keywords just for the sake consistency will benefit most people and I highly doubt it will ever get approved by internals. You're free to try obviously. I'd vote for it.
&gt;Am I the only one Probably not
ReactPHP was inspired a lot by Node and thus makes a lot of use of callbacks. While `then()` helps to prevent the callback nesting, it's a similar callback hell. Generators make async code way easier to read and write (as soon as you understand how Generators work). See also http://amphp.org/faq.
Nope. Vim.
What a fantastic achievement. Aerys in particular. Well done for all your hard work Niklas, Bob, Aaron and Daniel.
Thanks! I hope we're able to tag an Aerys release based on Amp v2 soon.
Yeah I can ditch this code completely :-) it was still useful to tinker with though, now I also have a better understanding of what's going on behind the scenes in AMP, which is always a good thing.
Yes, understanding what's going on definitely helps a lot!
Totally, my point is that I'd consider it if they had better guidelines but itd be better if they had a way to change storage providers so if they go bust I can easily migrate to a different tool
Phalcon is the easiest to learn according to your infographs.... yeah ok sure
You haven't seen shit until you look at the string functions, its a complete mis-match of underscores and abbreviations, complete train wreck 
I can't explain why (it surprised me) but for some reason I actually did find phalcon easier to learn than laravel. Might have been because I did laravel first or something. Also I didn't even notice the "hard" marker on that graph until seeing your comment. I thought it was the other way around seeing the bars are more complete and the title is "lerning ease". Oh wait... this graph isn't about learning at all. It's about lerning. No wonder we're so confused.
&gt; and hitting tab once is faster then spamming space ba The argument isn't concerned with how spaces are generated (ie IDE converting tab to space or pressing space x amount of times)
There's also `use const` FYI. Granted you don't see them very often :P
Considering PHP's loose type nature, I just want to show you what your imagined future looks like. You're probably thinking this: $string = $string-&gt;substr(1); But to make sure the method is there, in case this is some other kind of scalar that came from PDO, or some array in $_POST or god knows where, he's what you'll *have to do*: $string = ((string) $string)-&gt;substr(1); Enjoy... :-)
To ask the obvious, are you using it properly? stop debugger put in xdebug_break(); save file run debugger 
IMO the standard should simply enforce consistency. A file should either use tabs OR spaces, but not a combination. Really stupid to pick a "side".... because it is so opinionated. /end opinion
I did that, but doesn't work : https://puu.sh/wlKtz/22962c1da3.png If I start the server only, with app/console server:run, it works fine on port 8000 If I start the debugger, it doesn't launch the symfony application, so I start it using the command, but the website doesn't work, port 9000 shows https://puu.sh/wlKFA/25efd601a8.png
yeah, its all that copy-paste OT! lol
It's per annum not monthly :) Still 80k is high. I'm in Canada and the market I'm in (Winnipeg) they really try to low ball you. You're lucky to get 70, most likely to be offered 35-50.
what is the result of `php -i | grep xdebug`
So that explains why I'm so poor.
For those of us unfamiliar with these types of "stays running" website servers (I guess "event loop" is the term?)... Does this serve the same purpose as reactphp? Or do they have different goals? And generally speaking is the purpose of using "event loop" mainly done for performance? I've never done anything aside from regular "execute the whole thing and exit" like most php is. So keen for any event-loop-n00b pointers anyone has. 
Thank you
&gt; Does this serve the same purpose as reactphp? Or do they have different goals? Yes and it's compatible with ReactPHP, but it's a different approach API wise, we prefer Generators instead of callbacks. &gt; And generally speaking is the purpose of using "event loop" mainly done for performance? Performance can be one reason, because you can do things concurrently without threading, but there are also entirely new fields like building chats. Sure, you can also build chats with polling, but that's not what you generally want.
As opposed to fgetcsv?
Obviously. They're typing way more so must sure be more productive.
Just use strict types and you are fine. No need to cast every single variable.
Probably more /r/nyc than /r/php
For shame! Is nothing real anymore? ;)
Enjoy your bump in pay.
There are also some very nice beginner guides on asynchronous PHP programming on SitePoint, written by /u/assertchris: https://www.sitepoint.com/author/assertchris/
I'm in Southern California so salaries are pretty competitive here. Especially since most of the top talent is still in the Silicon Valley area, if you're good you can expect a higher salary. Of course, 80k/yr is barely enough to survive in this ridiculous state...
Well, I think it's much better then Codenvy. But I just used cloud 9 and codenvy.
Too bad functions can't be autoloaded, though.
You can use all ReactPHP libraries with the Amp event loop. There's currently no fully working adapter the other way around. The adapter is simply another implementation of ReactPHP's `LoopInterface`: https://github.com/amphp/react-adapter/blob/809f160c983eb7b0b3fa5fca78b828892a5b24d3/lib/ReactAdapter.php
Ah, that's pretty cool.
We also have a chat if you have more questions. :)
Yes but have you ever `define('0',null);` ? or `use sendmail as json_decode`?
Function call overhead ftw!
You had one job, Shannon!
I am using zend framework 3
I tried that and I got WARNING: Module trader ini file doesn't exist under /etc/php/7.0/mods-available WARNING: Module trader ini file doesn't exist under /etc/php/7.1/mods-available WARNING: Module trader ini file doesn't exist under /etc/php/7.1/mods-available So I feel like I'm getting closer. When I try to download trader from [here](https://pecl.php.net/package/trader) I don't find a .ini file. 
^(Hi, I'm a bot for linking direct images of albums with only 1 image) https://i.imgur.com/cHMXDA2.png ^[Source](https://github.com/AUTplayed/imguralbumbot) ^| ^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^| ^[Creator](https://np.reddit.com/user/AUTplayed/) ^| ^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^| ^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dizr7gc) 
The `;` in front of the line means it's commented out, place it as `extension=/usr/lib/php/20160303/trader.so`. Also, are you sure the file path is correct. It was on my system, it might not on yours. Run `file /usr/lib/php/20160303/trader.so`. Output should be sillimar to this: /usr/lib/php5/20100525+lfs/pdo.so: ELF 32-bit LSB ..... Edit: You can find the correct path by running `pecl uninstall trader` followed by `pecl install trader | grep "\.so"`. 
Seems like they're pretty serious about Laravel. I'd take em seriously 
Thank you so much! That was totally the problem, it was just commented out. I knew it was going to be something too simple to find a help thread about! I really appreciate it.
No problem, have fun!
* A degree in Laravel or related field/trade * ...
* Must be Taylor Otwell or a clone.
You're right! The function files are listed in composer.json for the library I was referring to :-) https://github.com/amphp/amp/blob/master/composer.json 
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [amphp/amp/.../**composer.json** (master → 5b2f547)](https://github.com/amphp/amp/blob/5b2f54707ca5d6d1e541ceeafa8b4904e5ea4837/composer.json) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dizwpsc.)^.
this is what happens when someone in HR writes the job post after having a 45 second phone call with the hiring manager in engineering and not understanding what all the nerd words meant. 
r/php is certainly not the worst, that's something even I can agree on. I still think more could be done though.
nope, and I hope I won't have to come across that kind of code :P
Must be able to trade Laravel. 
Must be laravel in fluent, with 8-10 php's of year experience
&gt; https://www.screencast.com/t/xFUZXhIEnfQb this.
That actually makes it worse...
Maybe this is me explaining the joke but incase you missed it, it also requires much longer Larvel experience than PHP experience. 
What does "Popularity According to Google" mean? A google search for the raw terms or something entirely different?
I've been thinking about this a lot since you got back to me, and I'm having a hard time visualizing the use case where 10 different configuration files would be needed. There are lots of libraries which can assist in configurations, such as [dotenv](https://github.com/vlucas/phpdotenv). From this, there could simple be a main configuration file, or many files, which have baseline settings and then use that library to import the local .env file which can be on the servers. That needs to be configured manually, but it can be shared across deployments when you use tools like deployer, so that should only require the initial setup to involve a developer (which likely does anyway if you provision the servers). A setup like that would basically be main.config.php toast.config.php Where toast.config.php could simply contain: return [ 'specific_configuration_value_here' =&gt; env('KEY', 'default'); ]; and main can honestly just have the shared settings and then return array_merge of all the other files to create that main application configuration. Then if someone adds a config, you just deploy the same config for each person. As long as their .env is in place, it should be fine. If you need client specific data, you'll just need to go in and update the .env If for some reason that is not going to work... then I'm not exactly sure what I would do :)
8 &gt; 6
LANA!
Did it pass testing? 
vuejs now have more stars that angularjs, I remember that the last time it was near to the half wtf
vuejs now have more stars that angularjs, I remember that the last time it was near to the half wtf
vuejs now have more stars that angularjs, I remember that the last time it was near to the half wtf
vuejs now have more stars that angularjs, I remember that the last time it was near to the half wtf
Great thanks so much. Ill check it out
Proof that these idiots have no idea what they’re doing. If you want to hire a developer at least do some research 
1. Hit ctrl-p when your cursor is inside the function args brackets. It'll show you the args. There's no delay for me. 2. Also turn this on: https://blog.jetbrains.com/phpstorm/2017/03/new-in-phpstorm-2017-1-parameter-hints/
Interesting!
That 0.3μs is generally not going to be an issue.
The joke is wanting Laravel experience.
You mean having one project is better than having n projects? 🤔
I think you took the mention of strict types the wrong way. If you are using strict types, then you are *already* in precisely the situation you seem to be so afraid of. If you are using strict types, you already can only write `substr($string, 1)` if you know that `$string` really is a string. The object orientated notation does not change anything about that -- apart from the fact that the weak types option does not exist (at least that is your assumption, of course this could also be implemented in a way that makes a weak/strict typing distinction, though I don't think that's desirable.)
As much as I'm a fan of elaborate algebraic types, generics, dependent types and all other wonderful strictly typed things other languages offer, I just feel strictly typed scalars are 100% inappropriate for PHP. It'll only serve to make it more verbose, more fragile, and ultimately less useful, as it deals with mixed scalar types from virtually all kinds of inputs it reads during normal operation. So what's desirable or not... I think is up for debate. If PHP's future is to be a broken slower version of Java, I can just use Java. PHP is already much more verbose when typehints are involved, because we have no type unions, or method overloads to express API variations which are natural in Java and other strictly typed or strictly **un**typed (i.e. dynamically typed) languages like Python and Ruby. We're in this awkward "worst of both worlds situation" and I don't think getting stricter on types, without letting types model how people use PHP, is a good idea. Say if it was me... I'd add overloads and unions to typehints, and make any possible pseudo-method API for scalars to cover all scalars i.e. int/float/string/bool. This will make it non-fragile and match the way PHP is used. It won't matter for ex. when PDO flip-flops between numeric stricts and ints for columns, which it does all the time. P.S.: Talking about this, I badly miss scalar type-hint in PHP. I mean an actual `scalar` typehint to match the behavior of `is_scalar()`. Accepting a scalar *of some kind* is a relatively common requirement and currently the only way to enforce it comes with a (sometimes) unwanted cast. Maybe I don't want to cast, but I have no choice, or else I have to remove the typehint, and use `is_scalar()` which hurts the self-documentation properties of my method signature. Another thing which is increasingly awkward in PHP is the ability to express "I return something but it's not a single type-hint PHP can understand" right now (i.e. unions), and until the community figures out we need unions, it'd be nice if we could at least have a `mixed` typehint to express "this method returns SOMETHING", versus omitting the typehint and making it look like the method returns nothing (PHPDoc helps, but not much once people get used to looking at the typehints on the methods themselves). There's a lot of work to do until PHP's type system is a cohesive thing... and I'm afraid it's not a straight line to making types just stricter. 
These idiots own company. And we work for these idiots. I think that after you work at that company you might clıne their buisness and become their competitor.
I know, this visualizes code coverage. But in my case i would need ~document coverage~. It would be nice if the components for the coverage report could be re-used for this purpose too.
yes, I can see that it could be a problem for someone who mainly develop on php. For someone like me who spend most of my time in cloud9 developing html/css/javascript or twig I still think it's a great tool.
guess Mohammed or Matt Stauffer might be a closer second. 
Meanwhile someone had already made a little something called Xdebug.
Uhm... Write RFCs in gherkin? :-\
I think laravel hit it's popularity around 4.1, That's when I jumped on the train. Got off around 5 when things started shifting directions.
How did it shift?
If you want to know why, read why python3 adoption went so painfully
Me and my company gave estimate for facebook like app at 6 months for mvp. Company from america gave 3 months for fully functional app. Customer moved and started with them. Cant wait to see that app in 3 months. Btw app have android/ios/web versions 😁
Said elsewhere, but I'll echo it. Let's all write some together. Let's do it in PHP. Whole algorithms where appropriate, wrapping ugly internal functions where not. Let's package it into composer/packagist. Let's put this gripe to rest. More code, less complaint.
&gt; One is the fact that the vocal developers (like you said) have been wishing for something like this for a long time. The vocal ones are a major minority of the overall developers. As soon as the old stuff is eventually removed, all the people who only ever used that come out of the woodwork demanding it back. They won't be happy with including a wrapper package for what used to be supplied by the language. This argument literally will switch when the pendulum reaches the other apex. &gt; Secondly i think it would help in making the language a lot easier to learn for new developers Of course it would. But, it hasn't stopped PHP's adoption by developers thus far. Also unless you're a backend-only and even more-so PHP-only developer, you're going to keep referencing the docs on things or some IDE helper. Because as you hop languages the naming blurs between them. So, not really a super compelling point here either. &gt; its one of the big things the detractors of PHP complain about. Who gives a shit. As soon as this is fixed, they'll find something else to complain about. Like dynamic typing (which is basically required to build *web* apps.) So then PHP will be obligated to go to strict-typing only like Java to keep the "detractors" at bay once again. This is a non-sense point.
Could I ask get a clarification on your notation # 1 /** * @ignores rfc6749:70-90(explains illustration) */ So if I read this right, phpunit would not count these pages towards the total coverage. My question for that is, wouldn't it just be easier to put this in the phpunit.xml i.e. the `&lt;ignores&gt;` tag should have these page numbers. # 2 /** * @tests rfc6749:148(15)-152;177-180 */ So this tells phpunit that the next piece of code tests the rfc at multiple page ranges? I don't know what the 15 is, line number? Would it be good practice to have one test cover multiple parts of the document?
Because there has to be something they hate...
Somewhat interesting that 5 out of the top 10 most duplicated questions are php based. Almost seems as though new php developers would rather ask than search.
I'm starting to hate people who ask this question every month. But really as with everything, there's fanboys who thrive on hating competing technologies and pick on their every shortcoming. PHP is popular so it's in the crosshairs of a lot of fanboys. 
A lot of cursory language studies go out of their way to prune data regarding PHP, e.g. http://blog.interviewing.io/what-really-matters-in-technical-interviews-we-analyzed-thousands-of-interviews-on-everything-from-language-to-code-style-heres-what-we-found/ There are many examples that I've noticed in the last few years. It's counter-productive imo.
Ask the people who hate PHP.
**sigh** https://www.reddit.com/r/php/search?q=hate%20php
This particular question makes it sound as if ~~people~~ programmers these days can't form as opinion for themselves and have to resort to crowdsourcing. It's that, or they are seeking acceptance from the crowd on their choice of PHP.
Thanks! I'll try asking there.
It actually looks like my question has been asked a couple of times in /r/cscareerquestions already. Thanks for pointing me in the right direction.
Practice using https://codility.com/demo/take-sample-test/ in PHP
Cloud9 was pretty good last time I used it, functionality-wise. However, Amazon AWS bought them, so I prefer not to use it now. Perhaps when Amazon revises its tax position... 
Choose the best tool for the job, that matters. Opinions, not so much.
Lack of good multithreading support similar to Go Lack of a good async web framework similar to Node.js
Although not PHP related, I also find how it is interesting 3 out of the 10 most upvoted questions are about git. As much as I love git, I think they could make it much more intuitive.
People hate PHP because it has the stigma that PHP programmers are bad programmers. This is because there are a lot of PHP programmers out there who were a designer, Googled up a tutorial for a horribly insecure contact form, and hey presto, they can now add PHP to their buzzwords on LinkedIn and all of a sudden they are a developer. I exaggerated there, but unfortunately not by much. There are many, many "the owner's nephew" PHP coders out there. That's because it's really easy to quickly whip something up in PHP. As a consequence, there is a *lot* of shitty and very insecure PHP code out there, and probably more than shitty Java or C# code. I've seen folks charge good money for PHP products they should be downright ashamed of, and I am not the only one. Also, PHP used to be objectively a bad language in the PHP 3 and 4 days, and many people not very familiar with PHP remember it from those days (which happened a long time ago). When you look at the blog article that I'm not going to be linking to, it strikes me as partially hyperbolic and far-fetched, but, more to the point, not really wrong. So I'm not saying the stigma is very accurate today, and I'm definitely not saying other languages don't have their share of shit code in production, but even though it's basically an annoying meme at this point, it would be unfair to claim that there is no grain of truth there. I hope I could answer your question by explaining my perception of other people's opinions of PHP.
There's no harm in failing an interview (and it's possible to do so for reasons that are entirely outside of your control, like the interviewer just having a bad day). For nearly everyone, it's just part of the process. I've turned down hundreds of candidates as an interviewer, and only accepted a couple dozen. I hold no grudge against any of them, and would have no problem if they re-applied in a few months after improving their skills. If you apply somewhere and are turned down, analyze the questions you were asked and consider what about your answers may have not worked in your favor. Take notes, if you can. Plenty of people are willing to lend a hand in discussing what went well and what did not. Keep in that many tech companies have an awful, unrefined interview process. Often one that poorly reflects the kind of work you'll be expected to do. It's fairly common that good candidates get turned down simply because the company sucks at interviewing them. Try not to get hung up on it if it happens to you
Why do people hate Reddit's useless search function?
It's a language, a tool. It's like a mechanic saying she hates air wrenches. I dont get it and always roll my eyes at anyone who says "XYZ is terrible" like they are the savior of computer science who will deliver us from "antipatterns" 
Could you get your administrators to install Docker on the remote server, and then you build a Dockerised version of your app, which you can push to the server with SFTP? You can then install pthreads if you wish, in the container rather than on the server directly. All Composer deps are also resolved locally, and are included in the build. In fact, as a bonus, you could set up the firewall so it can only pull Docker images from a recognised image repository, and then close off the SFTP port completely. Security win, possibly? 
&gt; Hm ok but then does it need to be installed as a dev dependency? Huh? What is being described is the *point* of dev dependencies. Perhaps OP needs to update their deployment process to include the `--no-dev` flag, that way development dependencies don't get pushed to production. There's also an `install` flag to bypass the platform deps IIRC, although I'm not at my dev machine and don't remember it off the top of my head.
Found it! Something like this: https://try.jupyter.org/ (see the examples) This makes any document a runnable document, allowing you to inline test data, examples, etc.
Hm yeah, I actually played with that a while ago. But at the end it all comes down to initially write a spec with that tool, just like with gherkin.
I like this idea. It could implement any RFC-proposed changes, becoming the working prototype and guided by the community. We could maintain both forward- and backward-compatible packages (or both combined), in the event that core implements any updates. The biggest concern I can see would be websites and applications that don't utilize Composer (looking at you, WordPress).
Wait Wait, laravel hasn't been around for 10 years .... Let alone 8 ... Yet you need 3-5 of PHP? WTF.
I agree with your general statement, but realistically this is just a limitation of how PHP works (as compared to e.g. node, where multiple version of a library can live alongside just fine). Without completely rebuilding the way depsolving and autoloading works, and doing so in such a way that makes each dev dependency completely independent (which is *also* probably the wrong behavior), there's really no good way around the problem.
No worries. 1. Yes, Docker will work fine on Centos. You'd definitely have to do some thorough R&amp;D to ensure it would work in your case, but I think it covers a lot of situations. I'm mid-speed with it presently - pretty confident with building containers and using the Docker Compose system to create multi-container systems, but I've not got a lot of production experience. I'm trying out stuff on a VM playbox - keeping databases on the host, and putting apps in containers and using mod_proxy between host and container to wire them up. 2. I got up to speed using the official Docker docs. I know that's a glib answer, but the docs really are excellent. The nice thing is a `Dockerfile` really is simple to build - it is basically a series of build instructions. On Centos, is it `yum`? If so, you'll be doing a bunch of `RUN yum &lt;params&gt;` to install things and then `COPY &lt;src&gt; &lt;dest&gt;` to install things in various locations. There is a [base Centos image](https://hub.docker.com/_/centos/) to start with as well (all the major distros have them). 3. Yes, you can install Docker locally, and you should. You do all of your dev/building here. Once you have created an image you can then send it to the server using `docker save` locally and `docker load` on the remote. If you want I can fish out some Dockerfile examples of PHP projects, using Composer etc, for you to look at. I expect you will need to get Docker authorised on your systems, but once you have got the nod for some R&amp;D, let me know. Docker really is an interesting technology, and the lovely thing is that it takes about 10 minutes to run your first demo. 
Nice to see some Welsh out in the wild!
Loom and up work have tests as well to prove competency.
&gt; This is because there are a lot of PHP programmers out there who were a designer, Googled up a tutorial for a horribly insecure contact form, and hey presto, they can now add PHP to their buzzwords on LinkedIn and all of a sudden they are a developer. So true!
Just had a look at some of those practice tests and they were more what you would expect in a mathematics exam. It's not how I would ever test when hiring my guys. I check for coding ability and habits, and perhaps some language familiarity. Surely these virility tests aren't how others are testing out there?
You'd just import an existing spec and interpolate it with code
It looks like this is some kind of a log? MongoDB seems a good choice for this. No need to do shard or replica set. Just one instance, you'll be fine. Do you need all data to be saved correctly? Or you okay with some data loss in the process? If it's the former than keep the MongoDB default setting, but if it's the latter you can turn off [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for more write throughput. You can also tweak the write concern parameter to fits your needs. I used MongoDB a lot for logging stuff because it's just that fast, I have terabytes of documents (after more than 2 years of logging) that I can queried without performance impact. Granted that I shard it to multiple instance as increasing storage size to more than a terabytes is just not my style.
Maybe a time series database such as InfluxDB or Graphite? https://github.com/influxdata/influxdb https://graphiteapp.org
Have a look at RRD instead: http://php.net/manual/en/book.rrd.php
20-30M is nothing for MySQL. You can achieve 400 writes per sec easily. I would give it a go since it's simple technology, then only if you need to scale n times, focus on solutions like OpenTSDB/InfluxDB
If stability isn't a hard requirement for you, don't use Debian. Or RHEL, for that matter. 
The truth is PHP is one of the most easiest language that anyone can learn so fast. Unlike Java you only need to write few lines of codes to achieve same functionality. Eg MD5 hashing. Now the problem is since PHP is soo popular early days and google give high SEO to old popular blog posts and stack overflow posts many beginners use old insecure coding style. Eg still using old MD5 hashing for password instead of using password_hash functionality of PHP which use high secure bcrypt with random salt. So my recommendation is use frameworks like laravel or codeignitor if you are a beginner which anyone can learn soo easily. Laravel can help anyone to create professional quality application easily. And there are good quality tutorials availabe too for it like laracast.
As long as I'm n ot an entitled whiner, I can live with whatever you want to call me. I hope you eventually find some sort of closure in your professional life. 
Yeah it's completely a PHP limitation. However I think that bamarni/composer-bin-plugin solves the issue most of the time. Its limitation is for applications like PHPUnit that needs to load your application code. For those, we can rely on a PHAR which could be isolated (that's the https://github.com/humbug/php-scoper project). It's not perfect either but I think it's "good enough".
Like I already mentioned to you, I'm simply checking if there are some technical or other reasons that it doesn't exist. I figured that finding this out would be a good "step C" before attempting to advocate or embark on something large like this, which isn't something I can totally control myself, I don't run php.net. I like to get feedback on things before doing them (or suggesting ideas for others), especially if there's a lot of work involved.
Is there a reason that makes sense for them, but not PHP? Not saying you're wrong about any of this, just trying to find out the details from people that might know more about it all than me. Also I didn't mention in the OP, but I'm including production usage here. 
&gt; or for that matter about the safety considerations of using either testing or unstable. I'm a bit confused about that bit? Is it relevant to anything I posted? I'm mainly talking about use in production here. e.g. It's quite common for people to use the current versions of postgres + elasticsearch from these official repos in production. So just wondering 'if or why' PHP shouldn't be used the same way.
Debian unstable is (Despite the name) more stable than ubuntu LTS releases so it's perfectly fine for production. Perhaps it's because besides debian all other other distros keep things more or less up-to-date? Alternatively, it could be because PHP is relatively complicated (Have to build mbstring, intl, gd, etc etc separately)
I am sorry to say that even as an avid Debian user, I really don't feel that Debian servers are that prevalent anymore. Ubuntu/Arch appear to have kicked Debian out of its spot as being the RHEL/CentOS alternative. People dont value stability(software features remaining consistent) as much as they used to. Ubuntu/Arch can give them the latest versions of software and people dont see the benefit of keeping software versions consistent over long periods of time. Having said that, I agree that using Debian as a core and incredibly stable base platform and running developer maintained software repositories on top of that for some core services where there is a requirement for newer features makes a lot of sense.
[removed]
Your main concern is going to be latency when using MySQL. It'll probably run just fine for your application but if you have a lot of inserts in one call, I'd suggest you bundle them together and insert them at the same time using transactions. 
Maintaining PPAs is a lot of work and there are already people doing it. PHP has neither the resources nor the inclination to do the same work again. If you think that it's just a matter of providing PHP builds, think again: You also need to support hundreds of extensions for each PHP version you provide. The ondrej PPA for debian is pretty much "official". The debian and Ubuntu stable PHP packages are based on it as well. Similarly, the remi RPM repo is essentially "official" for Fedora / RHEL / CentOS. (Remi also happens to be one of the release managers for PHP 7.2.)
[removed]
[removed]
[removed]
[removed]
[removed]
mysql will suit just fine, but you could also go for a message queue like kafka. it can take a lot of load and store/process your data asynchronously
On behalf of PSR-2, "You're welcome!"
As the lead on PSR-2, I said this on that topic: &gt; Q: *Why can’t the rule be “use either tabs or spaces, as long as you’re consistent within a project?”* &gt; &gt; The focus of these recommendations is not “individual projects by themselves.” The focus is on “working with/on lots of different projects.” If one project wants to use tabs, cool; if another wants to use spaces, fine; but if you end up working on both, you want the rules to be the same for each one. Thus, we have to pick something to apply identically across lots of projects at the same time. More rationale and explanation here: &lt;http://paul-m-jones.com/archives/2420&gt;
cassandra. It's main purpose - storing data sequentially, idel for storing results of measurements and for aggregation queries. And yes, InfluxDB could be also good choise.
[There's always Windows!](http://windows.php.net/) (/me ducks for cover)
There is still a large portion of the PHP community that thinks that CodeIgniter is a reasonable framework, it isn't by astronomical units...
Cassandra was designed for this type of problem. Super fast writes.
In also have good experiences with InfluxDB for storing measurement data. For measurement data dashboards I usually use [Grafana](https://grafana.com/) which queries the given InfluxDB instance.
What's wrong with a logfile? What kind of queries do you want to do? Logfiles have simple error paths and relatively low latency compared to MySQL. There's nothing that says you can't have another program that reads logfiles and puts them into MySQL (or generates statistics or whatever), and if you want to try some other tool, you still have your raw logs.
If you're going to depend on packages for that long a period of time, you really need to set up an internal mirror. My current workplace uses Artifactory as a passthrough cache, and that works really well.
Because commonly-used packages like these are (and should be) provided by the distribution? For what it's worth, the new Debian (Stretch) is just (yesterday) out, and it ships with PHP 7.0, MariaDB 10.1, Apache 2.4, etc. But yeah Debian Stable is pretty 'stable' (or old, if you want to call it that). Before Debian Stretch released, I used Debian testing for that reason on some servers because I really needed PHP 7 and Apache 2.4 and such. If I needed newer packages, I generally would prefer using a more up-to-date distro over using third-party repositories on a 'conservative' distro.
Those do not sound too high, but if you have a busy slow server and the requirements increase there are some optimizations. Inserting multiple records in one statement is much faster (maybe 10 times) than inserting just one at a time. You could insert for example the 400 records in a one bigger statement. https://dev.mysql.com/doc/refman/5.7/en/insert-optimization.html You could also store the measurements in a normal log file and then send the file with mysqlimport and LOAD DATA INFILE which is maybe about 20 times faster than inserts: https://dev.mysql.com/doc/refman/5.7/en/load-data.html If you happen to need many repetitive reports from older data, you may consider copying historical data into another table that isn't being updated all the time. That way repetitive queries from the static historical table can be cached. 
Box is what I had in mind when saying that the tooling isn't great. It's far better than anything else out there, but I find it still really struggles to handle `vendor/` well - ironically, this is a great demonstration of your point about global installs, since it's only an issue when installed as a project-specific dev dependency. I have a half-baked (unpublished) project that tries to do approximately the same thing, but instead makes broad assumptions about what you want based on `composer.json` (i.e. automatically include `vendor/` but filter out anything that was only included as a result of `require-dev`). Unfortunately the structure of Composer itself makes doing this well a huge pain.
Someone needs a chill pill. That someone is you.
It seems crazy but there is a sizeable volume of people who do it. Check out the r/linux os distribution surveys (last one was 2015 and showed 10% of people surveyed used Arch as their main server OS) Personally I use Debian for all of my employers servers. I know many other companies around the area though who all use latest Ubuntu when they launch a project and never bother to update it ever.
You cant directly compare stability of exact versions. But you can look at a distributions release cycle and infer knowledge from that. Debian take a very slow and methodical approach to releasing new versions which they then promise to support for a lengthy period of time. If you are of the opinion that only LTS releases belong on servers and Ubuntu intermediate short support releases should never be used for servers then the OP ends up with the same issue with Ubuntu as he has with Debian, LTS versions are frozen to a specific PHP release, if you want newer then you need to pull from other sources which may introduce stability issues. Also, no Ubuntu has used Debian testing since ~14 even LTS versions use Debian unstable these days.
Actually, the money offered is $127k-$155k. Too bad nobody can satisfy the requirements. Sauce: https://stackoverflow.com/jobs/146072/laravel-full-stack-developer-cobird-inc
Applying to jobs ?
If all those projects do the same thing just with different parameters (number conversion for base2, base64, base85, etc.) then yes, one project will be better. With this said, I read the code of Tuupola's Base58 and from what I see these are not about simple numeric conversion, there are other quirks that need different flow, so while I'd appreciate if he used Numbase, it won't be as helpful as I hoped. I will further investigate whether the problems his libraries solve can be integrated into my project, will let you know when there is something to report.
I worked a project where I had to log network logins at a huge bank business facility (~10,000 seats). Between 7:50 and 8:10 am we'd sustain a few hundred inserts a second for many minutes at time, with peaks around 1000 inserts a second. We were receiving these logs via syslogd, through a very simple daemon written in Perl. We had one MySQL db that was the "catcher", with a single MyISAM table with only one identity index. It was replicated in realtime to a reporting DB that had more complex relationships and indexing, and used InnoDB. We produced charts and graphs off of that. We never saw reporting lagging more than a second or two behind the current time. Point is, MySQL is more than capable of this, especially if you think in advance about high-availability design for rapid inserts.
Phpstorm gets rid of all preceding indentation and the last newline with a single backspace press, and indents to the correct level (with spaces if you're using them) with a single return/tab/end press. I've always thought this part of the standard was mind-bogglingly stupid, but it's fortunately unnecessary to ever think about if your IDE is smart about it.
Interesting, I was convinced that MySQL is not up to logging a lot of records. I checked on my laptop and actually it's able to insert ~10k/s if records are pushed in 1k transactions; while data are committed after each record performance drops to ~800/s.
Have you ever compared InfluxDB with ElasticSearch? I used the later one, but I know it's very hungry for resources.
Don't use any PHP: https://dev.mysql.com/doc/refman/5.7/en/load-data.html
/u/fesor, /u/Xnuiem: It looks very promising, the only thing which worries me drivers available for PHP aren't documented, but I need to dig further.
The problem with flat file is I cannot easily correlate information from multiple sources. Sure, it's possible to import data later on, but this adds extra steps and requires to code additional meta files etc - using database is just easier.
This is the PPA for PHP on Ubuntu, maintained by the same guy who maintains the packages provided by Ubuntu itself. It's just that these are co-installable and are all currently supported PHP versions. :) https://launchpad.net/~ondrej/+archive/ubuntu/php I feel that makes it practically official
That's what I actually tried today - on avg. laptop I've got ~800 records/s w/o transaction and ~10k/s with transaction commit every 1k. The delay I've got for transaction commit was around 100ms - I can fit such amount of data in the input buffer,
Use transactions if you're worried about index rebuilding and commit every so often - either time based every 10s of importing or every 50k rows, up to you really. &gt; What if it was a fixed width data file? eg. the first 30 characters represent the first name, the next 30, the last name, etc. Would you use PHP to convert that to a CSV or some such and then do that? I'd treat that as any other file, but read it in as a binary and divide it up into you predefined field sizes - you could map it like so: $row = ['name' =&gt; 30, 'lastname' =&gt; 30, 'email' =&gt; 255]; and read the file in chunks of 16k, split it up into `array_map('array_sum', $row)` sizes, keep a position variable, etc. - if you can use `LOAD DATA INFILE` in MySQL, you should convert your fixed size format to CSV and load that in since it'll be _super quick_ compared to doing it in PHP. 
`str_replace`, `stripos`, `strrpos`, `strripos`, and `strncasecmp` checking in. `sort` and `array_map` .. but `sort` can only sort arrays (makes sense). I love PHP - it's what I make my living off of - but god damn, it could use some consistency cleanup. `str_replace` is fine, but `str_case_pos` or `str_rev_case_pos` would IMO make more sense to read than their current names. I suppose it's part of its heritage from C with the obscurely short and inconsistent names. Edit: `str_pos` could even just have a `flags` argument with a bitwise `FLAG_CASE` and `FLAG_REVERSE` or something instead of having three names for, basically, the same method.
I actually run a production server on Arch even though people think I'm crazy. I just do `pacman -Syu` on a staging server first... 
I use both, but for very different purposes. Influx makes a lot more sense for your requirements.
Ah yes, it would be so nice to have `mixed` and `scalar` in PHP. TypeScript does it quite well with `any` and `string | number`, but obviously it presents other issues, but it seems nice.
Even if you're not using the Remi repo directly, that's still where the PHP packages for Fedora are coming from.
This is why questions should be accurate :P
Convert the data file to tab delimited with a command line filter (awk would work), then import the delimited file. 
You guys can take inspiration from https://github.com/consistence/consistence and https://github.com/Anahkiasen/underscore-php
If you have a pretty good grasp on the language, I believe the best way to learn about components and how they work, is to study well known, battle-tested, implementations. Symfony's Session class (part of the HttpFoundation component), is a good place to start. Go back and forth between the documentation(https://symfony.com/doc/current/components/http_foundation/sessions.html) and the code(https://github.com/symfony/http-foundation/blob/master/Session/Session.php) and you can see what many consider to be, a good, secure implementation. From there, check out Laravel's Illuminate/Session component(https://github.com/illuminate/session). Laravel actually utilizes Symfony's HttpFoundation, but expands on it, giving it a, somewhat simpler, API.
That's a good idea! Thanks.
I am more talking about ways to implement through the code, all the sites I found have a lot of similar settings. Still useful, thanks!
https://github.com/datastax/php-driver The driver is supported pretty well. The documentation is good. Might require a little experimentation. I have not used it with PHP before, but the Java and Python libraries are quite good.
Disk I/O can be very slow in this kind of situation. PHP is not stateful, and will keep starting and stopping with the requests. To be honest, a higher performance option would be something like Python using websockets to write to the logs. OR use Node as a logging Restful API and just have the php send the requests to it but not wait for the answer. Which is similar to how MongoDB works.
a) see /r/PHPhelp b) `$str &gt; 10` is (in your case) evaluating to false `"bob" &gt; 10` = false `"11" &gt; 10` = true c) `strlen(false)` = 0 d) $strlen($str &gt; 10); will likely result in two errors: * notice: undefined variable $strlen * fatal: function name must be a string
they shifted a lot of focus early on into the frontend &amp; frontend tools going forward with 5 and a bunch of other things like folder structure changes, etc... I still recommend laravel to my peers who are getting back into php to get stuff going, but I personally roll my own now using any packages from packagist that does the job.
Why is that a "bad" thing? I'm genuinely curious, here. I'm primarily a PHP developer (with a lot of room to improve), but I've been studying/using Laravel for the past few months and I really enjoy it. 
I don't think you understand the separation between client and server. You write code for your server in whatever language (PHP for example) and you use HTTP to transfer data to/from your mobile apps. The mobile apps are completely separate applications and shouldn't be sharing code with the server (unless you have a shared library for business logic and such). You'll be writing the mobile apps in Swift or Objective-C for iOS and Kotlin/Java for Android (unless you use one of the countless frameworks that let you use other languages such as Xamarin, etc).
That seems crazy to me (as an avowed Arch advocate). I use Arch on all my personal machines, but it seems professionally negligent to recommend it for a work server, and I've never seen it used as such. Maybe my slice of industry just doesn't touch that part, interesting.
Ah I should have been clearer, I was inquiring if PHP is sufficient with regards to security. It works fine, but I can't find a definite library/framework or readups on client to server communication. Documentation is rather sparse and was wondering if there a was a sort of "mainstream" way (most popular opensource examples for instance).
PHP is just a language. How you use it is what determines if your application is secure. Documentation is definitely not sparse. PHP is quite well documented.
In that case I would say that MySQL will suit you just fine. Even plenty of room to grow in as well
&gt; How do I implement sessions that are as secure as possible? I will have HTTPS/TLS in the production environment. There, you answered your own question. Okay, fine, there's a little more to it than that, but not much. Just [setting some configuration settings to sane values](https://paragonie.com/blog/2015/04/fast-track-safe-and-secure-php-sessions) (so your cookies are HTTP-Only and not exposed to JavaScript). And ensuring your cookies are sources from the kernel's CSPRNG (`/dev/urandom`, not `/dev/random`; [this is important](http://www.2uo.de/myths-about-urandom/)). But, really, `session_start()` and HTTPS is all you need.
No that's true, although a check should be done before running any command IMO (in the PHAR). For PHARs installation, I find https://packagist.org/packages/tm/composer-tool-installer-plugin quite nice. But we should be able to do better
Enabling strict_types in PHP 7 will cause an error for this (and similar) coding errors: https://3v4l.org/uuNAC
Yeah we are. I've heard of that, I'll totally check that out. Thanks man!
I like it, but it's still a nightmare for everyone joining the team and writing some unit tests because he doesn't know that the spaces are actually nonbreaking spaces. I think the camelcase test cases with good comments, splitted in groups etc. are still seperior.
&gt; There's no harm in failing an interview I would second this, getting used to the interview process and learning "to pass interviews" is a key skill and you can only become good at it by trail and error.
I should have read the comments before posting, this is exactly what I said :) at a junior level the coding ability is not so much the main factor in hiring 
As I say in the article it's not a nightmare. We have been doing this for more than a year and it works well, even with new colleagues (we have more than doubled our team size). For very large teams it will be more complicated though, so that could weigh in the decision. But for smaller team this works well.
Cool theory and an interesting read bro!
I don't get why you keep claiming the naming is more clear, when you're not even comparing the same method name. Of course the one with more words is clearer, why not use the same name in camel case?
How do you feel about packages that add an abstraction layer on top of a not so beautiful package? For example, there is a package you want to use. But as you said the code is kinda ugly, and so is the API. Would a "cleanup" package build on top of the old one convince you to use it?
Looks like a thorough and interesting question. Is there something you'd like to draw attention to in particular? 
Not in particular. I just think it's good guide for that issue.
What are the issues you were seeing?
The root of the problem is everyone thinking that `thisIsAVeryReadableString` is more readable than `this_is_a_very_readable_string`. This is so stupid tbh
PHP can just do what Node can do. https://github.com/amphp/amp
No, that's not all you need. You forgot `session_regenerate_id()` on login.
Whatever approach you take I'd reccomend you use [CLI tools to split your CSV file](https://stackoverflow.com/questions/20721120/how-to-split-csv-files-as-per-number-of-rows-specified) into smaller chunks first. It just makes working with everything so much easier... when you're developing your script you can do fast tests without crashing Excel/LibreOffice or waiting eons to hit a bug!
reminds me of the sourcecode of PHPCS. The irony of a tool built to check your codebase having such a codebase...
alt gr + space doesnt seem to work for me in linux, phpstorm is going mad.
Password can be written to a file and be read back with `--defaults-file` if I recall correctly.
We would all rather do that, given enough time~~s~~ and limitless funds.
Just going to throw it out there... Docker is another way to solve this problem. The better way, in my opinion, at least in cases where you're developing something new. Use whatever is appropriate for your app, and run it on (more or less) whichever OS you want. 
If don't see how this: array_map($item =&gt; $item-&gt;name, $collection) if less readable. There's an implied `return` statement, but that's it. I really like it, but I've been dealing with a lot of EMCAScript 6 lately, so perhaps I've been _tainted_. When you have a lot of these methods in sequence, it becomes very long and takes up unnecessary screen real estate for basically no value. However, each to their own.
Nah, it’s vendor code. Edit: ok, fixed that too: https://i.imgur.com/CViyZpE.png
especially all the `// end foreach` `// end if` stuff, but it's all round very messy code, I've spent some time creating and adapting sniffs, it's no fun.
Any open source Yii2 and Cake3 projects out there worth checking out? Curious how the project structure looks and seeing if they are using what a lot of what /r/php has been preaching when it comes to phptherightway, etc...
Do the math. -2 years of both PHP and Laravel required
That's what I get anxious about. I keep thinking what if I can't actually do my tasks.
Even if that were the correct number, I'm curious why they would expect somebody to have that level of commercial experience after having spent 3-4 years on a full-time Computer Science degree.
Always keep calm and ensure you are in control of the situation. Never be afraid to hear the words "no".
&gt; i can make like full app but with no repository design pattern or TDD in laravel should i still apply for jobs Yes, at a junior level this is more than enough for your first role. TDD and design patterns aren't really expected at entry level/junior roles but more towards the mid/senior level
&gt; when you can confidently assert you can solve any programming problem quickly and efficiently Well after 10 years of programming in many different languages at some of the worlds largest companies buy your definition I'm not ready for a job in programming :(
Wow, it's almost like he is saying visual debt is real. 
symfony is the hardest to learn? I'm not even gonna check anything else on that page after I see that BS
Just because you can use something, doesnt mean you should. PHP has huge benefits and strengths, but the "me too" attitude of languages these days is just pathetic. Play to your strengths. To be completely objective, JS migrating to the backend, is quite a bit of the "me too" virus as well. Personally, for anything like this, I would use Python. 
Being abled to use non-breaking spaces (or emoji) in method names is good to know. Actually using them in production code is something else. But using them in internal tests just might be acceptable (and fun)
We did something similar. We defined an xml with all our requirements and added a PHP requirements class. At the beginning of every unit test/integration test we added a line Requirements::CoverRequirement("RequirementID"); This then created its own report files and we did a trace to check if anything wasn't covered. Maintenance of this sucks a bit because we always forget to add in new requirements. 
Arguments to a function are input. The return value is output. What relation these have depends on the function in question.
So... where do you define the function?
👍 10/10
Oh, yeah. I've conceptually rolled that into the authentication piece rather than the session piece, but it's definitely worth mentioning.
I've always had a simple approach to this: Indices and [recursive CTEs](https://github.com/paragonie/airship/blob/cc22c76c824937c15aff99bd2bf1780e9da376b3/src/Installer/sql/pgsql/11-groups.sql#L25-L74). (Linked code snippet implements hierarchical group membership, which is used in an ACL system.)
Was the fastest way I had to prevent people from voting a thousand times, but later I will change it :)
&gt; Is there a facility for people to adjust their answers after they have made them? Thanks! :'D. Not now, but it would be a good idea to implement it.
I know it..., later I will change it, in such a short time that was the simplest way I had to prevent people from voting a thousand times
* send(): https://github.com/jonathangjertsen/Send This is a single function that I use whenever I just need to send a HTTP request to some site. It takes an array that describes the request (many of the options are the same as in e.g. jQuery's `ajax()`). It's just a wrapper around typical cURL usage (so you can either provide human-readable strings and/or CURLOPTs) to avoid writing like 15 lines of curl_init, curl_exec, curl_errno, curl_error, etc., for every single request. I know there's a whole bunch of libraries that do this, but they usually make you instantiate an object or something, which seems a bit overkill when you just want to ask a website a quick question about something. * repl(): https://github.com/jonathangjertsen/ReplBreakpoint Lets you spin up a REPL at any point in your code (as long as it can be ran as a PHP-CLI script), again through a single function. All the variables that are available at the point of calling `repl()` are available from the REPL, so this can be used as a middle ground between var_dump and a debugger.
Type safety (usually facilitated through type **declarations**) is a damn good idea.
Yep, less thing to test/check.
The vibe I got from the article is that you either test everything or typehint everything, no mixing/matching/in between. Disclaimer: Not saying I agree with that statement.
You might be interested in using [behat](http://docs.behat.org/en/v2.5/) Going against a long standing habit in not just PHP but almost every programming language does not seem like a good idea. Furthermore the argument for clarity does not really count, because 1) This is highly subjective. 2) Visually, spaces are the same, whether one is an `nbsp` and the other a normal space. My opinion.
&gt; type-hints are a waste of time and lead to poorly coded, brittle systems https://gist.github.com/taylorotwell/ee2f782aec59aa53863fd09c8e47f304 /s
&gt; https://gist.github.com/taylorotwell/ee2f782aec59aa53863fd09c8e47f304 The decorator needs to implement the same interface as the thing it decorates in order for this to work. Or you could extend it, but that's probably not ideal.
*shudder* Place I used to work had a set of related classes that passed a *massive* AoA around, it was basically pseudo-globals. You'd have to set up your array with every option that every class needed, and they'd pass it along, one to the next to the next. Ugh. 
&gt; By Simon Jaillet — Filed under PHP &gt; on Thursday 22 May 2014 I wonder if he still agrees with this post, 3 years on. I definitely disagree. Things like TypeScript have been an absolute boon for JS development, and I've personally seen a handful of bugs that type declarations fix. 
because a production env's, inputs and outputs are *always* somewhat different than what you've accounted for. believe it or not, sometimes you *do* need insight into a live env for helpdesk, etc. thanks for your valuable insights.
I'd recommend check out Yii2 source code. It was really helpful for me.
Thank you. We are actually using Behat too and we quite like it. However PHPUnit is better for unit-testing, we found this was a good compromise.
&gt; Getting halfway into static typing, as PHP does if you rely on type-hints and interfaces where duck-typing could have been applied, ends up with you gaining little in terms of static analysis, because the type checks are still runtime-only, and losing a lot of the advantage of being able to put things together more quickly with not having to think much about typing. Unless of course you happen to use an IDE which continuously "compiles" your code and gives you useful feedback based on type checks.
I find type hints make for easier to read code. It means that I can confidently know that when I’m looking at a variable I can see what type it is, and on larger code bases this makes it a lot easier to pick a random class and instantly understand what a method is doing. 
I would say it is good to always do it unless you have a reason not to. =]
&gt; Unless of course you happen to use an IDE which continuously "compiles" your code and gives you useful feedback based on type checks. The whole point I'm making is PHP isn't 'compiled' in the sense that a statically typed language like, say, C is. There simply isn't enough information to pick up on all type issues objectively, PHP was built to run through an interpreter that handled a lot for you. function foo(int $x) { echo $x; } foo("bar"); It's not hard to pick up that type information and realize that the call to `foo` is going to cause a type error, but: function foo(int $x) { echo $x; } function bar() { if (&lt;some runtime conditional&gt;) return 10; else return "ten"; } foo(bar()); Can only be picked up, at best, as a potential type error. If I choose to ignore potential type errors then I'm back to waiting for potential errors to crop up at runtime. Even if I choose to try and fix any potential type error: any time I use any library (or large parts of the standard library that have mutliple return types) that doesn't do the same I'll end up writing code that can't be adquately checked until runtime anyway. It's a pain to be sure that you can't get static analysis half as good as C's in PHP, but the reason why is also as strength: duck-typing has its good parts, and that's why plenty of languages, even new ones with all the benefit of hindsight, still often choose to go for dynamic typing. IMO the benefits you can get from opt-in typing like PHP's just isn't really worth it.
Yeah fuck all those Java developers and their strongly typed anti-patterns.
Just pick some resources off the resources tree.
I meant, I wanted to see a project built w/ yii2 outside of the skeleton.
From watching the attached link to this thread I couldn't find any relative content related to your question(using Reddit on mobile but now on edit I see your gif). But however I'd recommend using Docker to be honest. From doing ruby(and php) and lately elixir for a few years I'd really recommend using it because you can easily run your things in more or less the same environment as production. And makes switching between different projects an ease. The site https://phpdocker.io/generator has good generated images for you to use if you're new to docker
some of the most successful people i know are people that were too stupid to realize they weren't ready
Wondering what works best for products inventories with categories and attributes?
&gt; I find myself wanting to WATCH (not read) something that dives a little deeper. I'm trying to imagine the venn diagram of people who: * have knowledge of PHP internals. * have the skills to make a video. * think making a video to explain the internal workings would be a valuable use of their time. *NULL SET LIKE DIAGRAM DETECTED*.
Try searching for "PHP Internals"
WAT.
Nice!
Exactly! Marketing managers got their greasy, slimy hands all over the decision making processes they aren't qualified to handle.
Why do you even have to concern yourself with this? Wouldn't it be a lot better if you had only 1 way to get the posts? If you need a specific subset of posts, it's up to your model to return those and you shouldn't be caring how that happens. 
&gt; And even if you do strict typing all the way through all code and all dependencies... at that point why not just use a statically typed language that takes advantage of all the benefits of static typing? It has been provided in PHP, so i would use it to add "strictness" to my code, and it works for me so far :D PHP too wasn't made for OOP and other language/platform has more OOP-ness than PHP, yet (most) people love to use OOP in PHP.
Yeah this for me is a big win. I don't have to dig any deeper than the parameter signature to know what shape the argument should have. Without a typehint, I have no choice but to dive into the method itself to see how that parameter is being used.
You are correct. Many of the BaseXX binary-to-text encoding algorithms are not just about changing a base of a number. [Base32](https://en.wikipedia.org/wiki/Base32) and [Base85](https://en.wikipedia.org/wiki/Ascii85) are good examples of encodings which have more than just base convert going on.
I got it. Look there http://yiipowered.com/ru/projects?title=&amp;url=&amp;opensource=1&amp;featured=0&amp;yiiVersion=2.0
&gt; what's wrong with making a getPosts and a getLikedPosts? No magic, no concerns, implementations nicely hidden. This has already been explained, there *are* concerns. Let's look at two different implementations of `getLikedPosts()` ***Version 1*** class Author extends Model { public function posts() { return $this-&gt;hasMany(Post::class); } public function getLikedPosts() { return $this-&gt;posts()-&gt;where('likes', '&gt;', 0)-&gt;get(); } } ***Version 2*** class Author extends Model { public function posts() { return $this-&gt;hasMany(Post::class); } public function getLikedPosts() { return $this-&gt;posts-&gt;where('likes', '&gt;', 0); } } Both models have encapsulated `getLikedPosts()`, but based on the article and the discussion had so far, can you tell me why version 2 is problematic? 
You mean...like these? https://twitter.com/assertchris/status/877048977564340225
I am from the UK and I have always used color just to keep things consistent.
sure. Krumo, php-ref, kint, dBug, etc. were all around when i wrote dump_r. i didnt quite like any of them. symfony's var-dumper came out some time later.
I personally love the instant IDE warnings that occur if you use a wrong type or the methods you can use without using `/** @var TypeInterface $var **/`. I don't know, this post also sounds like "why use Interfaces when you can TDD everything? Your Class never should miss a method if you test it", yes, if I test 1000% everytime, which I believe is a myth, then I don't need every best practice pattern.
Getting any PR approved in our company requires type declarations or phpdoc type hints. It's a *basic* requirement, there's no arguing. Our JS developers are slower in adoption currently but eventually we'll use Flow/TypeScript at some point. I've had so many bugs already prevented by using this approach, for me there's no point in arguing. And if I need a certain method to be clever than the next developer in what arguments it accepts, I leave out the type decl and document it appropriately. It also helps: - your IDE, e.g. PhpStorm - static analysis tools, like https://github.com/phpstan/phpstan - the next developer I don't have a Java background but I'm developing &gt; 15 years. To me dynamic languages, especially how they entered the static type territory, still strike the best balance in terms of pragmatism to me. I don't recall a single time where I had a real problem because I couldn't fulfill a certain type hint. If I need a union to express something, I just use the phpdoc type hints like `@param Foo|Bar|string|null $whatever` which the IDE still supports well enough autocompleting for the objects.
Yes! You're right! I've seen that Stack Overflow's post yesterday, but I didn't comprehend how the Hell that was working. I should pay more attention to the documentation while I read it and, actually, I should read the **whole** documentation. Thank you very much, man! Regards.
If you sure in variable's type - use type hinting without doubts. Don't waste time for deep reflections. If you don't sure - don't waste time for strict OOP. If your team/project is huge - type hinting is necessary. Maybe with declare(strict_types=1);
Pick one and use it in all cases. It doesn't matter which.
No. Just no. Just grepping for methods names will eventually cause mental breakdowns. Something (exception, phpunit, whatever) reports there's an error in a method called, `using non breaking spaces is AIDS`. Now, some browsers, shells, editors, IDEs, etc. may render the non-breaking space as a regular space, so copy-pasting goes out the window. To correctly target the method, and possibly any mention of it in an error log file, you must then grep for `using\snon\sbreaking\sspaces\sis\sAIDS`. It's a cute thought, but bad in practice. Use docblocks for detailed descriptions.
Sort of, but I won't use those kind of hacks.
In my mind I always read "colour" like "colo-uh-r". (And "centre" like "centr-eh".) Maybe I'm just used to use the American variants.
It's obviously not as big of an issue, but I've had to work with code written in Dutch before. I would want them to use American English, so I do the same myself. If anything it makes my day-to-day easier because all code is American English then everything else is British English, so context switching is easier. And it makes working with multi-national teams easier.
I'm not your Pal, buddy.
I'm not your buddy, friend
hacks?
&gt; Worst since polymorphism (a.k.a overloading) is not available for PHP wat.
I thought it was a separate thread for each week, new week = no longer sticky ?
Ever taken a look on how these kind of things work?
All professional developers I know use (American-ish) English. This does, however, lead to an interesting problem: If you want to apply DDD their ubiquitous language (meaning, the developers and the business experts use the same exact words, making things clearer), you're pretty much stuck adding English translations for the words in your ubiquitous language.
I always use en-US. I have never seen PHP or any other language choosing any other variant. 
I read the article. I read they were happy with it. That's fine. Good for them. I - personally - still don't want to get near it. I'm all for innovation and shaking things up once in a while. But definitely not in this case. And yes, AIDS. An obvious pun. Your salt may be allocated elsewhere.
Aren't center and centre two different words? Like centre is a place (shopping centre) and center is the middle?
I think `centre` can mean both (shopping centre &amp; centre of something). At least thats what Google Translator says. 
I use yankcase. Consider the following $color = [ red=&gt;0xFF0000, green=&gt;0x00FF00, gray=&gt;0xADADAD ]; $colour = $color["grey"];
You are completely missing the point of literally this whole discussion. 
&gt; If I choose to ignore potential type errors then I'm back to waiting for potential errors to crop up at runtime. Well duh. I happen to use C in my daytime job. You might be amused to discover that the C compiler can not only generate actual error messages but also warnings. Warnings which, if ignored, can often lead to code that still works fine. Of course, in my neck of the development woods, ignoring warnings is a strong no no. And C is not as strongly typed as you seem to be making it out to be. You can do wonderful things with void pointers. &gt; What about when it's 3rd party code (or the standard library itself) that's not hinting a single return type? Are you going to root through every single dependency all the way down and do strict typing all through? Well yes. As least the interfaces need to be properly typed. You really should take a look at some of the more modern PHP components like Symfony. You might be surprised at how much code is available that takes advantage of static analysis. And how much effort it can save you during development. In my own not so humble opinion, the line between statically typed and dynamically typed languages is a lot thinner than you seem to think.
Yes. Use a singleton class to wrap your pdo connection. Here an example: https://gist.github.com/rob-murray/5454707
No, that is not the point. That is not even remotely the point. Encapsulation is not the topic of conversation here. You might as well be talking about what you had for dinner last night.
Ah, I should've read the comments
At some point another dev will work on your code and curse you. Theres too many "hard coded" uses of color and center to start messing with using British spelling.
You could even say that's how HTTP works.
Not all web servers work that way though. With many languages you can pool database connections and keep things running on the backend irrelevant of the web requests. It's just a matter of how PHP is usually run (php-fpm).
Which are the other ones? The other one that's stickied now is the "Weekly Discussion" thread, but that one gets renewed every week anyway
Genuine question: why? 
Encapsulation is very important, because this whole blog post would not have been necessary otherwise. Not to mention that my point on magic properties is still valid.
Thank you. Having the class as a singleton but not the connection seems a bit unnecessary or even counterproductive to me :)
There are plenty of properties: https://developer.mozilla.org/en-US/docs/Web/CSS/Reference There is just no reason to use colour in coding besides being obtuse
It's as hacky as modern JS. Just easier to use...
Doesn't mean I'll use it. I avoid JavaScript like the plague as well...
It doesn't look funny in my opinion, but it doesn't contribute towards the thread so I've downvoted it. Why would someone's written thoughts be funny? It was someone's effort, don't belittle it.
What the hell is that piece of code :) lol 
As another from the UK, I say Color. makes sense when most work will default to American English
No I just have really poor vocabulary. 
If five people used this script one a month bing's traffic would triple.
I'm not sure where this type of solicitation falls into the rules of this subreddit, but I'm going to direct you to r/phphelp, or r/forhire. You should also consider doing your own school assignments.
I think its more about the people you're going to be writing the code with. If you are alone, then use your local spelling. I am Canadian and I always use variable and function names with Canadian English. When I subcontracted for an American company I kept it American English.
So how can I figure out how to navigate through the source code.. im hoping there's some sort of flow chart? Where would i find the builtin functions defined and where would i find the logic behind those functions? ** edit - I did poke around briefly and found some of what i was looking for however i feel like lewis and clark w/o a map in there. 
Not the webserver - calls can still be fronted by Apache, IIS, etc, but be fulfilled by a handler passes off those calls to a multithreaded, shared-memory application. The web server complies with the HTTP specification, the application does whatever it does, and everyone's happy.
He means ad-hoc polymorphism. And technically speaking, it comes to PHP out the box since it has dynamic type system. Overloading required only for statically typed languages so compiler could build vtable for method dispatch.
Please don't
I personally always use color because it's a letter shorter (also favorite). But I did work with some British clients that demanded colour, for consistency. I hated that. So choose depending on the project - if it is or will be international - use color. If it's strictly a UK thing (eg. a government application) - use colour. Or choose whatever the fuck you want - it's a useless discussion, just like spaces vs tabs.
&gt;And C is not as strongly typed as you seem to be making it out to be. You can do wonderful things with void pointers. Yeah, fair enough, I should have just jumped straight to an example statically typed language with a better type system that removes the need for untyped pointers. &gt;Well yes. As least the interfaces need to be properly typed. You really should take a look at some of the more modern PHP components like Symfony. I've seen it, but what happens when you there isn't a fully type-hinted library I need to use? Like (again) PHP's own standard library? And beyond that, as I said, even if I did end up with a fully type hinted system all the way down (and one sufficently well-done so as to preclude something like type-hinting `array`, but needing an array with a specific set of key:value pairs still letting runtime errors be a distinct possbility) I'd end up needing to write code comparable to the effort it'd take to write it in Java or some other statically typed language, and those languages, as a rule, have better and/or more mature tooling to realize the benefits a statically typed system can offer. If the rapid iteration and lack of tedium in satisfying a compiler take a backseat to the benefits of a more strict compiler forcing provable type-correctness or the like that's entirely fine, of course, but why not just opt to use a language that better leverages the benefits of it?
Actually... PDO supports persistent connections. So while this is the default behavior, you can make it live across script lifetime. http://php.net/manual/en/pdo.connections.php example 4. 
Yes, you could say that, but you'd be wrong.
Well, according to the scientific study, it does. [It seems that a contradiction, an unexpected result what is contrary to a thought outcome that makes us laugh](https://en.m.wikipedia.org/wiki/World%27s_funniest_joke) So a thing that does something opposite to its purpose should look funny
Just like `center` can mean both. 
Tutorials, books, looking at existing code and trying to understand how it work and what it does, online courses, offline courses and ofc simply trying.
Whatever makes you feel better.
Here is a CakePHP 3 codebase containing real world examples (CRUD, auth, advanced patterns and more). https://github.com/gothinkster/cakephp-realworld-example-app
Yeah, they need to at least move that connection to the constructor. I also can't understand why it's set to `protected` instead of `private` and another point is instead of returning false for `__clone` and `__wakeup` you could just set them to `private` and let the bodies be empty `{}`... also `getConnection` shouldn't accept the connection information that should come in as optional parameters on `instance()` - if this is a brand new instance then those optional parameters aren't optional and become required so throw an exception or error whatever you want if they aren't provided... at which point you need to know before calling if this class has been instantiated - meaning I probably wouldn't access this directly (if at all).. it would be called from some sort of container that insures that it has been instantiated and if not can provide the credentials.
I disagree. In addition to not knowing that the method form returns a query builder, I also see lots of people posting coding help in the laracasts forums and other places wondering why things like this doesn't work: $this-&gt;foo-&gt;orderBy('bar', 'DESC')-&gt;get(); Because they really meant to call $this-&gt;foo()-&gt;orderBy('bar', 'DESC')-&gt;get(); `orderBy` is a method on the query builder, but not the collection, hence it throws an error. It's actually really easy to make that stupid mistake by accident even when you know what's going on and know how it works. It can get especially confusing since you may have started off with something like this by mistake which *does* work since both the query builder and the collection share a similar API. $this-&gt;foo-&gt;where('baz', true); And then decide you want to order it later on: $this-&gt;foo-&gt;where('baz', true)-&gt;orderBy('bar', 'DESC'); And now it breaks, even though it was working before. So then you change it to this: $this-&gt;foo()-&gt;where('baz', true)-&gt;orderBy('bar', 'DESC'); But you aren't getting what you expect. Why? Now it's a query builder, and you forgot to call `get()` at the end: $this-&gt;foo()-&gt;where('baz', true)-&gt;orderBy('bar', 'DESC')-&gt;get(); Again - even when you know for sure how everything works, it's one of those subtle things that you can accidentally trip over. I work with Laravel extensively every single day, and have done so for a few years now, and I still trip on it. &gt; I don't think it should have to explain the basics of SQL as well. I agree, but that's not really the issue here. The issue is the API difference between collection filtering and query building is subtle and easy to overlook. People new to Laravel (even experienced developers), have to make it a point to remember that key difference and be particularly careful when crafting filtered queries from relations. If the API for fetching a collection from a relation, vs building a query from the relation, were two very separate, distinct things, then it would be less of an issue. Or a relation returned a query builder by default (like it does), and the magic property access didn't exist. Instead you had to explicitly call `toCollection()` or `toModel()` on it to actually extract the contents into the final form you want. It's more verbose, but it's more clear. 
There isn't really a place for hate in this community. We have more than we need, already.
"latest version" is difficult, since php is just the toolkit and best practice is how you should apply those tools. [phptherightway](http://www.phptherightway.com/) is always a good source if you want to learn best practice. It heavily focuses on OOPhp, which currently is best practice. But for complete beginners, W3C-Schools is a good source to learn and understand the absolute basics of how the language works. They just aren't up do date with best practice. The fundamentals still apply though. 
Please don't recommend w3schools. http://www.w3fools.com/
You've just been informed by multiple developers that it is not. Did you pose this question with the intent of ignoring what other, non-noob developers recommend? 
So what's the point of `$blog-&gt;posts` ? Why even have that when you can do `$blog-&gt;posts()-&gt;get()` ?
But why does that second version exist? I don't understand what point you are trying to make by showing a faulty example. 
Iltar claimed that encapsulation would save us from these concerns. My second example illustrates that it won't. I've clearly encapsulated the call to get a filtered collection of liked posts, yet I've still used Eloquent inefficiently as the implementation behind that encapsulation. Thus encapsulation is not a solution to the problem.
&gt; If the posts relation is already loaded on the model then this will actually be the faster path because you wouldn’t need to make any queries at all. I hoped that this line would be sufficient to highlight the fact that a relation may already be loaded on the model. The bottom line of the article was to encourage others to consider what the framework is doing behind the scenes so that they can make smarter choices. Could have written a small book but wanted to keep it short. 
The reason why eager loading wasn't mentioned in the article once is because it doesn't solve this problem. It's only useful to avoid N+1 queries when iterating through a nested relation. For example, $blog-&gt;load('posts.authors') would be only 2 queries but it's a completely different context than the examples in the article. 
This is a subtler part of Laravel's behavior that is also worth being aware of. `$blog-&gt;posts` loads and "caches" the relation so the next time you call `$blog-&gt;posts` in the same request, it doesn't need to query them again. Meanwhile `$this-&gt;posts()-&gt;get()` creates a new query every time. And yes, not being aware of this will bite you in the ass, because say you do this: // Do something with the blog posts in the request $blog-&gt;posts // Later on in the request, create a new Post and attach it to the Blog via the relation $blog-&gt;posts()-&gt;save(new Post(...)); // Do something else with the collection later on in the request $blog-&gt;posts That second call does ***NOT*** contain the new `Post` model you just attached to the `Blog`, since that collection was cached as-is when it was first called. If you want that new Post model to be present in the collection, you have to call `$blog-&gt;posts()-&gt;get()`. Maybe that's a bug that's been fixed since the last time I ran into it.
My bad! So there it goes: very good article, congratulations :-) In our test suite we added a PHPUnit Listener which collects the SQL calls fired which is used within our test as an assertion. Gives a good feeling if some queries run wild, but doesn't protect from such errors though :/
You probably won't find many sympathetic ears here. A subreddit focused on a programming language is likely to be filled with people who enjoy and put it in hard work programming. If you have specific questions, as others have mentioned, /r/phphelp is the place to go.
Howdily doodily, is this TreyTweets?
&gt; Encapsulation is very important, because this whole blog post would not have been necessary otherwise No, this is not true at all. I've already shown you an example where I used encapsulation, but also used Eloquent inefficiently. Encapsulation is good, but it's not the issue here. &gt; Not to mention that my point on magic properties is still valid. Yes it is. You should keep repeating your one valid point and stop repeating your other invalid point.
So this is the PHP equivalent of babel for ES2015 transpiling?
So that is how it actually works? Thank you for detailing it!
Actually my problem is to work with huge strings, because my client is attaching files inside the XML file, coding them in Base64. I know it's stupid, but the clients always are. XMLRead didn't work for me, because it's being collapsed when it founds the Base64 attached file, so I'm parsing the XML files with regular expressions via `fread` function. Anyway, thank you very much for your comment and that blog post!
I'm not entirely sure, but it seems like you might simply be asking how to only use one PDO Connection *script* in two other scripts that are being called by AJAX. If this is the case, you can create the PDO Connection script only once, and use an [include or a require statement](http://php.net/manual/en/function.include.php) to include it into the script, cutting down on code reuse and making it "prettier". 
Oh yea, I've never even looked to W3Schools for PHP info. I was just commenting on the specific site linked and saying not to recommend W3Schools at all.
Yes, putting it in a separate file and simply including it will allow you to access it in any script without any code reuse. So yes, if that's what you were looking for, that's exactly how you do it.
Something like that, yes. It's easier to use but it doesn't track any proposed new syntax discussions. Mainly it's a tool to introduce compiler macro support, easily, for PHP projects. The macros I make with it are just bits of syntax I happen to like...
PDO has a persistant connection setting, you could look into that: PDO::ATTR_PERSISTENT =&gt; true http://php.net/manual/en/pdo.connections.php
Thank you sir, I aim to please. 
If everyone referred to it as "kolr", then so should you
Indeed, it doesn't make much sense like this.
It's more nuanced than that. Lets assume you're not working with a collection: `$post-&gt;author`. Doing `$post-&gt;author` will fetch the author from the database and store it on the $post instance. Subsequent calls to `$post-&gt;author` will not hit the database. If you know that your collection size will remain fixed and relatively small you can gain performance by using `$post-&gt;tags` rather than `$post-&gt;tags()` since the second will issue a query.
Sorry, you're correct. I conflated the two since that tends to be my most upfront issue with the properties. 
Are you trying to get an idea of how an interpreted language works in general or specifically PHP?
Great advice but one thing this article fails to mention is that if accesing via the attribute, the result will actually be cached meaning if you need to access this data more than once, you won't need two (or more) database queries. Another good tip is that if you know you aren't going to need certain fields, then use the select() function to only return the fields you need. By skipping the unnecessary stuff, you can greatly reduce both query times and memory usage. Most importantly, however, and this probably goes without saying, but premature optimization is the completely opposite of what you should be doing if you want to get things done. This article has great tips, but unless you are working with enormous amounts of data, I wouldn't overly worry about them until you are experiencing a problem. Instead, focus on adding new features that your users want and when you are making money, focus on optimization at that time. 
Hmm ok... I took it to mean there would be a 'getPosts' function built in to Laravel, not a userland one. 
Ah, looks like I misunderstood the post.
Maybe I'm reading your question wrong, but you can use the @param doc tags to specify an input type of class type for a parameter in a function. In PHP7 you can do things like this: function(int $variable). This means that $variable parameter must be an integer. You can also use class names instead of basic data types.
`$blog-&gt;posts()` will return a builder instance. This is a basic building block of Laravel and Eloquent and caching is too high level at this point. You can cache in a variable `$blogPosts = $blog-&gt;posts()-&gt;get()`, or create your own wrapper or service class which executes and caches the queries for you. 
&gt; across script lifetime. An ajax call would be a separate script and have it's own lifetime. 
That actually does make sense sometimes. For example, slice makes sense for both arrays and strings (array_slice and substr do exactly that), but it doesn't make sense for ints and floats.
You are looking for generics. PHP does not support them sadly: https://wiki.php.net/rfc/generics You will need to do instanceof checks if you require this amount of strictness.
Yeah, Cuz you called me a retard for asking a question. I still haven't called you a name, so how can you say I did? I'm thinking about it now, but I still haven't. Edit: I don't even care anymore. You're clearly trolling, and I hope someday you'll grow out of it. Best of luck to you. 
Who trolls r/php, anyway? 
Try explaining what you're trying to solve. Because offhand, it's hard to see what you're hoping for from this approach.
ITT: People reacting strongly to a poorly argued article from 2014 that has, shall we say, not stood the test of time well.
If I'm understanding correctly, it seems that you want to be able to overload the getDependentInterface() method so that it could return a different interface based on subclass. That's not how type hints work. Essentially, type hints are static (similar to constants) in so far that they are defined once and cannot change during runtime. I don't know all of the specifics for a loosely-typed language like PHP, but in general they are guards used by the engine to make sure you don't pass in the wrong type of value. For languages like C/C++, the compiler does a "static analysis" of the code before it creates the executable/binary. If you've ever heard a programmer talk about "a contract", this is what they are talking about. You've said that your function/method can only accept a type of T (T is a common way to refer to a type, similar to how people refer to an arbitrary number as n), and the engine will throw an error if you try to pass a different type - because the code has broken the contract. What you need to do is create an interface that you can then implement by some super type to pass into that method. Keep in mind, in languages like PHP, your classes can implement as many interfaces as you need. But you can only extend one class (single inheritance). An interface simply requires your class to implement zero or more methods. It's so that you can guarantee that a class implementing a specific interface will have certain methods available. Hint: never type hint for an interface and then start using methods not defined in the interface. You're asking for trouble by doing that. 😊
I've tried this approach, but it unfortunately leads to a bunch of unnecessary methods on the various classes that implement "CanDoSomething".
Yes, unfortunately, that's exactly what I was looking for. I was able to do a workaround where I added methods to the "CanDoSomething" interface that return strings of the various DependentInterface methods names that it would be dependent on. I can then do something like: interface CanDoSomething { public function doSomething(DependentInterface $objectOfDependentInterface); public function getDependentInterfaceMethodName(); } interface DependentInterface { public function dependentInterfaceMethod (CanDoSomething $canDoSomething); } class DependentClass implements DependentInterface { public function dependentInterfaceMethod (CanDoSomething $canDoSomething) { $functionName = $canDoSomething-&gt;getDependentInterfaceMethodName(); return $this-&gt;$functionName(); } public function dependentMethodForCanDoSomething () { // } } class DoSomethingClass implements CanDoSomething { public function getDependentInterfaceMethodName () { return 'dependentMethodForCanDoSomething'; } } 
Well I should have spend more than 20 secs looking at the code before posting it. Not the funiest thing I have seen. 
I've been working as a developer using php for about a year and a half now and I am trying to up my game. I've had experience using polymorphism in c++ and Java, but I am trying to figure out its proper place in web dev. Does anyone have any examples where they have used polymorphism to simplify a problem in their php code?
Got em
Your dependentObjectImplementation might be able to implement a Trait? I'm on mobile, not sure if this will format correctly: trait doSomething { public function something() { return $this-&gt;domethingImplementation(); } } Then give your doSomething classes the implementation you need. 
This will confuse the shit out of you in a week IMO. Also, the circular dependency between `CanDoSomething` and `DependentInterface` tells me there's something wrong with the responsibility assignments of these behaviors. 
You might want something like a Command Bus pattern, where each implementation gets a different `DependentHandler`. It's hard to say without having more details about your problem, it definitely sounds like you are over-engineering the solution though.
Man it was gonna be my first answer on reddit... 
It's my first on PHP!
I keep it is _color_ so I avoid messing it up where it's absolutely needed (eg css rules), for me there's the chance that outsourced developers would be touching the code so I avoid adding any confusing semantics.
You can also have a class implement multiple interfaces. Lets say you have specific methods that only certain classes need to implement. Implement them in it's own interface (which is where you would put getDependentInterfaceMethodName()) and then have your implemented class 'implement' more than one interface. class DoSomethingClass implements DependentInterface, CanDoSomething Other classes may only need the one contract. This also adheres to SOLID principles and SRP
I don't understand. What's the issue?
So what's your opinion? :)
Check webtest2 in your debugger, make sure it is valid. Then report back?
thank you for responding. How do I make sure that it's vaid? Sorry if this sounds like i don't know what I'm doing. Right now I have this at the top of my file require_once 'vendor/autoload.php'; class webtest2 extends PHPUnit_Framework_TestCase and then i have my setUp function..and then my test function.
Yeah I go for joined words in anything I'm naming now. Including whole projects / library / package names etc. Makes code grepping, and online searching etc a million times easier. Some things do/don't support spaces/underscores/hyphens... but everything supports not using any of them to begin with. And is especially specific for fulltext search.
I don't think that's what a pun is. 
Let me rephrase; **why** don't you know what service you are going to need *at construction time*. Even when interfacing with unknown third party systems you can very well use classic dependency injection. The only requirement is that the injected object follows a given interface. If the specifics of the injected object are to be decided at runtime, delegate this problem to the injected object. 
https://github.com/ramsey/uuid-doctrine `$id = Uuid::uuid4()` You're welcome :-P
Thanks! :)
&gt;I'm running it with the seventh version of the PHP language for some reason, this is beautiful
Until generics are out, do this on runtime (because PHP is more made for Runtime checks than "Compile" time ones): interface CanDoSomething { public function doSomething($objectOfDependentInterface); } abstract class ACanDoSomething { public function doSomething($objectOfDependentInterface) { $type = $this-&gt;getInterfaceType() if (!$objectOfDependentInterfaceinstanceof $type) { throw new LogicException('Object is not of the right type'); } $this-&gt;actuallyDoThing($objectOfDependentInterface); } abstract protected function getInterfaceType(); abstract protected function actuallyDoThing($objectOfDependentInterface); } You may remove the abstract function "actuallyDoThing" to typehint it in the heriting class (I also think that there was a PHP option/recent release that allows the inheriting class to override the typehinting, but I'm unsure about that), or you can leave this and not typehint the inheriting function: use a PHP doc instead (/* @var $objectOfDependentInterface MyInheritingType */) I do so on my projects (for some Handler [ie Controller] classes and some Formatters [ie View]).
not at all!
A case of misuse. Using both an IF operator and a shorthand for a shorthand for an IF operator makes no sense. Use ether an IF or a ternary or a null coalesce operator but not all of them at once. Besides, in the second variant you are effectively obfuscating your code making it hard to read. Try to read aloud both code snippets and see form which you can make any sense. 
AIDS weakens its host, making it susceptible to - and threatened by - a multitude of common diseases. Much like non-breaking spaces can sneak up on you and cause problems over time, because even the simplest tasks (like debugging and grepping) aren't trivial anymore. The pun is there.
But they are monthly
&gt; Does it have any advantages? well it removes a function call. but I dunno how often you have to do that to get a mensurable speed result.
If (@$foo ['bar']) Will emit null if key doesnt exist, otherwise will emit the value...although theres nothing wrong with isset() 
you're right, sorry. I guess the URL https://secure.php.net/manual/en/function.isset.php was a bit misleading.
no
 if ((bool) (($foo ?? [])['bar'] ?? false)) { }
nah use whatever grammar and spelling makes sense to you where you are. There's no such thing as "international english"
&gt; And there is the 4th example. To be honest, I don't know why does it do assign by reference instead of making a copy. PHP shouldn't do that because arrays are defined to be passed by value. That is, all values are copied to the new array. My guess is that there is something funky going on with copy-on-write, which is the mechanism whereby PHP only actually copies the array if a value changes (until then both variables point to the same array in memory).
I still fail to see what benefit Hiraeth provides.. Is it anything more than another way of loading config and handling dependencies? Do you think that writing a new way of dependency injection has a benefit in comparison to existing possibilities? I'm thinking about [PSR-11](https://github.com/container-interop/fig-standards/blob/master/proposed/container.md), dependency injection in Symfony or Laravel, packages like [pimple](https://pimple.sensiolabs.org/) etc. I appreciate your persistence in promoting your library, but I don't see the benefit of using it? Edit: I'd also think about rephrasing this bit, because there's really no argument besides your own opinion. &gt; YAML makes you want to claw your eyes out
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [container-interop/fig-standards/.../**container.md** (master → c177ec9)](https://github.com/container-interop/fig-standards/blob/c177ec9f55e7e42b8da3d0bc73864e2730e9b97e/proposed/container.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dj726ov.)^.
The manual is potentially misleading for these language constructs that look like functions, yeah :/
You should leave your plate of milk out every night without fail. Constants like consistency.
the amount of milk is immutable, so it can't be changed anyway.
Sometimes you have to e.g. https://gist.github.com/Isinlor/260113a810addaa34cbc053709a0ce6a But in general, yes - I agree ;) .
its also spam and nothing to do with this subreddit
Some people digest information easily in a more interactive form, as well as if you are working on something you can leave the video playing in the background and wont need to direct your attention to reading a blog post/tutorial.
But I'm thirsty, I can only see the milk I can't have any.
I've no view about the library, but I wonder if I can offer feedback on this: &gt; By far the most common response, thus far, to Hiraeth has been, "I don't get it." While it would be easy to assume that such criticism comes from a place of ignorance There has been a view in the tech industry in the last five years or so that "ignorance" is just a noun, meaning a "lack of knowledge", and it is not aggressive at all. However, I've not been persuaded by that, and I think it implies that a person is wilfully ill-educated, or not possible to educate. I'd suggest toning that down a bit, otherwise you risk alienating readers that might otherwise turn into users. Anyway, +1 for promoting an interesting project. You've clearly put a lot of effort into writing about it. 
If you're lazy to use a noSQL solution. Pair your MySQL DB to a ElasticSearch index, it's the easiest thing. https://www.elastic.co/cloud/as-a-service/pricing
Quality banter mate
Yes, they are minefields. make a habit of always doing unset($ref) asap.
First of all you use `??` which is available only from php 7.
Any constant data associated with particular relevance to the class. This could be magic numbers (flags, say), lookup tables, suggested default values, etc. Remember that since PHP 7.1, class constants can be `private` or `protected` if you want, so you can use them even for data you don't want to expose outside the class! Also remember that since PHP 5.6, constants can contain arrays.
I can see what you mean. Thanks!
&gt; I just wanted to find a way to evaluate if an array key was falsey without having to use isset(), like with standard variables. Try `empty()`! That's exactly what it does, despite the name.
&gt; there's really no argument besides your own opinion. Well of course it's his opinion, the same way it's *your* opinion that it *doesn't* make you want to claw your eyes out.
What is your theory behind it? I think its fully random and that there is no way you could ever guess the next number.
It's as smart as you telling him "there's really no argument besides your own opinion." You disagree with his opinion, fine; he disagrees with yours.
Laravel 5.4 is 5 months old, Vue 2.0 is 9 months old. My 9-month-old can't even digest hard food properly...
Nothing interactive about a video.
True, as long as you remember to unset the loop iterator var after the loop ends. Otherwise, if you happen to reuse the var (say in another loop) it can corrupt the contents of the array. Personally, I'd rather have a bit of inefficiency than a potential new class of bugs, and will then add the reference if it turns out the memory/speed benefit is worth it. 
This is unrelated to the matter at hand, but I'd love to see a short rationale given for each member's vote. I imagine some of this can be gleaned from the internals mailing list, but as we don't have a secret ballot and the RFC remains as a record of the vote, it would be good to know why something was voted for or against. It seems in this case neither the Pre-Discussion or Discussion links have anything beyond the initial post, which further renders the reasons for the votes either way mysterious in this case. Although it seems at least one reasoning was posted in reply to the vote announcement.
Laravel 5.4 is latest stable release, same as with Vue. What's your problem exactly?
Premature optimization is the root of all evil.
https://developer.microsoft.com/en-us/graph/graph/quick-start
&gt; Angular 1 clone My sides. Just because it has a similar syntax in some places hardly makes it a clone. 
I really don't understand the duck typing argument for PHP. It's not really a duck typable language. https://3v4l.org/YZpga How can you argue that you should treat it like a duck if it quacks, if you can't treat it like not a duck when it doesn't? By comparison, in python: https://repl.it/Ivmi/1
You can install the composer package in your existing app and just include the vendor/autoload.php file where you need it
Whats the use case, Does it needs to have commands during runtime? or can the commands be pass through on call.
Notes. I have a single `Note` class that always belongs to a `User` but can be attached to any number of different entities, e.g. a `Listing`, `RentalApplication` or `Deal`.
Thanks for clarifying that. Though this is partly why I think having a rationale per-vote would be good for both transparency and to just help people understand at a glance why RFCs pass or fail. Some people vote against because they think the concept in general isn't appropriate, some because they think an alternative approach to resolving a particular problem is more appropriate and some because they don't think the particular RFC goes far enough, and so I think it would be good to have a clear record of those reasons.
An example is in a shopping cart system. Imagine one day your boss says "We need to allow products to be bundled and discounted". The problem with this is each product has its own way of being weighed and calculated since they're all hand crafted and you don't want to create a combination of potentially everything in the store. A very simple way to resolve this problem was to create a product bundle that extended the base product class, and thanks to polymorphism it was treated as any other product. abstract class Product{ protected $name = ''; public function getName(){return $this-&gt;name;} abstract public function calculatePrice(); abstract public function calculateWeight(); } class GlassVase extends Product{ // Stuff } class MetallicSculpture extends Product{ // Stuff } class ProductBundle extends Product{ private $products = []; private $discount = 0; public function __construct(Product ...$products){ $names = []; foreach ($products as $p){ $this-&gt;products[] = $p; $names[] = $p-&gt;getName(); } $this-&gt;name = 'Bundle: ' . implode(' + ', $names); } public function setDiscount($amount){ $this-&gt;discount = amount; } public function calculatePrice(){ $total = 0; foreach ($this-&gt;products as $p){ $total += $p-&gt;calculatePrice(); } return $total - $this-&gt;discount; } public function calculateWeight(){ $weight = 0; foreach ($this-&gt;products as $p){ $weight += $p-&gt;calculateWeight(); } return $weight; } } Now, anything using the abstract Product class (like the shopping cart, or a product catalogue page) won't have a problem at all when handling a product bundle.
This has been suggested many times already and the answer is always the same: If someone implements it, we're okay with having an optional voting rationale. Nobody has implemented it yet.
&gt; I'd suggest toning that down a bit, otherwise you risk alienating readers that might otherwise turn into users. I'm not sure I understand. Regardless of how one defines ignorance, I'm saying that's **not** the problem. The full sentence is: _While it would be easy to assume that such criticism comes from a place of ignorance, **what's more likely is simply that there's not enough to get.**_
&gt; Do you think that writing a new way of dependency injection has a benefit in comparison to existing possibilities? I didn't write a new way of dependency injection. The dependency injector is Auryn. With respect to PSR-11 and pimple -- these are actually much more containers for service locator pattern than they are dependency injection. To my knowledge this practice is equally promoted in Laravel and Symfony docs. At the configuraiton level, there's not a huge difference between a Laravel service provider vs. Hiraeths delegates/providers except that a service provider can be rather convoluted. That is, in theory, a service provider can do almost anything with respect to boot strapping, where in Hiraeth, delegates and providers have a very specific focus. &gt; I appreciate your persistence in promoting your library, but I don't see the benefit of using it? Perhaps there is none for you? &gt; ...because there's really no argument besides your own opinion. Correct.
&gt; hence why people provide feedback to help the author hone his message. Which I appreciate, but there will be people for whom it's just not meaningful. /u/pmjones being the author of his own framework most likely one of those people. I'm certainly appreciative of his work as I use some of his packages frequently (and some even already have integration packages with Hiraeth). For me Hiraeth boils down to my ability to use a wide variety of packages and integrate them quickly on a common base. Full-stack frameworks provide too much. Microframeworks provide too much. Starting from scratch every time provides too little.
What, you don't want another data serialisation format? `:-)` 
No, composer is a dependency manager. It will install the office API files and all the other packages you need for it to work.
I saw some videos that someone did it.
I always do this if I need to export some data in different formats. So that would be an `Exporter` class with an abstract `export` function which is implemented by `JsonExporter`, `TxtExporter`, `ExcelExporter` etc. Consumers of the exporter have no knowledge of which concrete implementation is being used, they just call `$exporter-&gt;export($data)`. Then it is very easy to swap out the concrete class that `$exporter` belongs to, for example in a dropdown menu. Another advantage of having a class hierarchy for this is that if you need some new functionality that's common to all of the implementations, e.g. `exportMultiple` to export multiple documents, you can just implement that in the base class and the child classes will automatically behave correctly I think it's also common to do this if you need to deal with different payment systems, database engines, etc. - it lets you hide the different implementation details behind a common API so you don't need like a big `switch` to take into account each special case. Also you don't need to load all of the possible dependencies in your main logic, you can keep each dependency confined to the concrete class that has to deal with it
I can't argue with your preference towards removing the accessor methods for relationships. Even though I use Laravel a lot I don't like the magic models one bit. I don't agree with your opening point though. Laravel is very popular and many beginners start with it - the visibility of this is a symptom of that more than anything. Input/output should be concise, functions should be small, and data manipulation should not be done in views. Not knowing whether you're holding a collection or a query builder instance isn't a problem with the API as much as it is a problem with that persons own software. Using a `toCollection` method doesn't seem like it would address your complaint. The model property accessors would need to be removed, and even then, the collection API is similar to the query builder API. We could change this too, but then we have a whole new section of docs that people aren't going to read. I think that unifying the interfaces further would be a better solution. Change `sortBy` to `orderBy`, etc. This doesn't address the performance problems the OP is talking about, but this would start to address your issue without massive backwards compatibility changes to the framework.
On mobile the effect doesnt trigger until you explicitly tap the text.
Out of curiosity, did you try out Symfony Serializer or JMS Serializer?
Hmmm. Not sure if I like it because it's convenient, or if I dislike it because it could lead to bad practices.
Bad practices?
Clearly angular was the first to use {{ var }} in a template language
Right you are, Sir. My bad. :)
&gt; Good to know, it should probably just be wholly disabled ~~on mobile~~.
Aramaki, he's allowed to build stuff, and to talk about the stuff he's built. If you don't get it, that's on you, not him.
I didn't tell him he's not allowed to build stuff. I didn't tell him he's not allowed to talk about it. I'm asking questions. Take your straw men elsewhere.
You could consider not saying it at all. &gt; By far the most common response, thus far, to Hiraeth has been, "I don't get it." This article will attempt to clarify any misconceptions, specify the problems this package solves, and demonstrate common use-case scenarios.
The syntax errors from PHP &lt; 7 are not the problem OP intended to highlight. Rather, how the usage of references in PHP may lead to unexpected results in certain scenarios.
&gt; So Hiraeth is for front-end developers, who want to tweak PHP apps but don't know PHP? No, Hiraeth is for back-end developers who see the value in abstracting configuration, normalizing dependency setup, and who create applications from a number of different libraries which vary from project to project depending on needs as opposed to sticking with a single monolithic framework, or using a micro-framework that fails to abstract those things nicely. That one of the values of abstracting configs is that junior devs or front end developers will find adding or changing the system more accessible is just a condition of configuration having been abstracted. &gt; And who is going to be building this ecosystem of filters/modules? My personal intention is to use this as a baseline moving forward, so whenever I build a project that makes use of a new library/feature, I'd be adding integrating packages anyhow so that I can then re-use it in the future. Currently all the packages I've created are listed here: http://hiraeth.dotink.org/packages/ A few have READMEs regarding their integration and how to use them. On the specific question of twig filters. I assume the filter eco-system for twig is already fairly extensive. So one could just composer require those and add them to the config.
I agree. This poll, in particular, is especially weird because *stas* voted in favor of something.
I appreciate the support. I'm more than happy to answer /u/LtAramaki's criticisms and questions. Though I don't personally understand why one would feel the need to point out that something doesn't solve a concern they have as if it's a problem with the project, I will answer what is actually asked. One of the major reasons I stick to PHP is because it is a very ubiquitous and easy to set up language on the server side. And while I don't think that's as true of Ruby/Python, it would seem strange for a Ruby or Python developer to tell a PHP developer that PHP is flawed because ubiquity and ease of server-side setup is not one of their concerns. I presume it is a concern for many PHP developers.
I'm a little disappointed this is down voted so much. OP's question could easily happen to many developers, and this thread does a great job explaining the differences.
&gt;[**CSGOPolygon Predict Hack 2017 by Mr. Sander 08.06.17 UPDATED CSGOPolygon Script 2017 HACK [1:11]**](http://youtu.be/39sATpUg7-M) &gt;&gt;CSGOPolygon Hack CSGOPolygon Script CSGOPolygon Predict 2017 UPDATED 08.06.17 &gt; [*^Mr. ^SANDER*](https://www.youtube.com/channel/UCIFqHlReK-1Vhw36ctHAIPg) ^in ^Gaming &gt;*^30,217 ^views ^since ^Jan ^2017* [^bot ^info](/r/youtubefactsbot/wiki/index)
I don't know relationships in advance. We need to handle many types of internships groups in a single year. Moreover, business rules tend to change from year to year. For example, a company may have many departments, but if departments are not related to any business rules for a given set of students then I'm better of eliminating the concept of departments completely. I have tried doing something like: $relationship = new Relationship; foreach ($arrayRelationship as $type =&gt; $element) { $relationship-&gt;{$type} = $element; } But this is significantly slower in comparison with arrays.
nikic are you working on any more good stuff for PHP right now?
&gt; yocto-framework Looks interesting, though I'm not sure I understand the connection to PHP.
Well, you know. In the PHP community every time a change is proposed to the language that's obviously beneficial, it's customary to start complaining it will lead to bad practices. What about the parser? Does this introduce complexity to figure out which version of the operator is being used?
Vue is not an Angular 1 clone by any means at all. What are you smoking.
Found the guy who hasn't used either Angular 1 or Vue. Knowledge of both would make it clear Vue is not a clone of A1. Not even by a long shot.
This looks kinda funny from the parser perspective: will `$x ?? +1` mean `$x ?? (+1)` or `($x??) + 1`? I think grammar specifies the former, but it may be tempting to try `$x?? + 1` as a shortcut for `($x ?? 0) + 1`.
Well, a few years ago the `@` was all over the place and then it was slowly weeded out. With this I fear we'd see `$var??` all over the place; not because it's prudent, but "just in case". It would be bad for the same reason `@` is bad. It hides errors.
I finally checked it out with the strings option too, this is pretty great. There's a pretty high number of "false positives" for our code base thanks to some poor practices, but it's definitely going to be a huge help.
Yea but i can't see those diffrent scenarios because i see only one.
That's ok :) In the future, think of typing a keyword or two in Packagist and eventually order them by downloads/popularity, there's sometimes very interesting things!
You don't see much because it doesn't really matter :) I personally like to have my test classes under the same namespace as my source classes, but that's more a preference than anything else.
I believe he was using what you humans call "sarcasm"
Good point. I think `$x ?? +1` would have to mean the former. Imagine you have a function that returns -1 as a default value. return $x ?? -1; That would be totally valid for today's PHP. Technically you end up with the same value though as `null - 1 === -1`
The doodle plugin is already being [patched](https://github.com/php/web-wiki/blob/master/systems/doodle-voting.diff), so it's probably fine to patch it further. Oh, and I didn't mean that it's hard to implement, just that nobody has cared enough to do it yet.
I agree with u/akeniscool - if what you want to say is potentially alienating to attracting users, you need to say it in a different way, or not at all. Ultimately, getting users is akin to selling a product - you are asking for an investment of people's valuable time and attention, and they will only give that selectively. Anyway, it was a small point, and I don't wish to distract from the purpose of your thread! I just thought it was worth remarking upon. 
you've gone too far, now turn back and give me arrow functions
Unfortunately I don't have time right now to do any kind of serious work on PHP :(
Sorry, forgot my /s tag. I love me some Twig
11 comments: 1 hater and 10 face palms
My phone doesn't have a mouse. Doesn't help 
Can't beat a tag system for that sort of thing. 
The use of ? for null handing is present in quite a few languages, and is fundamentally pretty different than @ for error suppression. You're right about the "just in case" situation, but I've seen isset misapplied to the same effect too. Without becoming a strongly typed language, that's not really avoidable. 
I'm sorry, but this seems like another lolphp when in reality it's such a far-fetched edge case that most languages would get messy. Not saying understanding this isn't useful, but it's a one-time understanding - then forget ASAP.
Sorry for not looking further into this - and this has immense value - but what about Client -&gt; Server connections. That's something that I think probably (pure speculation) has higher value. Right now I'm digging through OAuth.. but I'd love to see a clean wrapper or alternative. EDIT: When I say "client" I mean browser. I'm still struggling with how to deal with secure access from browser to API - due to JS.
What is with all the hate in this thread?
Some background; I'm working in a company that has a huge app, with two distinct legacy applications - a huge procedural mess application and a slightly better but still messy ZF1 application. A while ago we added DI in the form of PHP-DI to the ZF1 application and this has worked well for quite a while. We only have 4 or 5 things that are manually registered in the container. Now we're prepping work to migrate our app to a clean API (framework details to be finalised) and a JS based front end, and we're also adding a Symfony console app to manage certain deployment steps (etc...). **The question**: Is there a "good" way to expose our existing container, with some items that are added to the container on every request, across all 4 of our distinct "parts" of our application? The only way I can think is to have some sort of singleton factory.
Oh my, this is fantastic, and yes it would be amazing to have a javascript port :) Thanks for your work!
You could try setting `CURLOPT_FORBID_REUSE` to false
With Symfomy 3.3, you actually never need to use the service locator anymore.
Cloudflare terminates the HTTP(s) requests, meaning they can analyze your request beyond the IP address. Rotating IP addresses is quite useless IMO. Even if you have multiple IP addresses, chances are they belong to same ASN, so it's trivial to see the connection. CF has a feature to whitelist certain IP addresses. Also, CF has a direct access host name that bypasses CF proxy. Ask the site owner to whitelist your IP address or give you the direct access host name. One dirty alternative would be to know their origin server IP address (online tools can help to find the DNS history), and make a direct request to that IP (`CURLOPT_DNS_LOCAL_IP4`) but with the host name, so the SNI/Host header will contain the host name. The origin server might reject your request if it detects you are not CF (IP match, client certificate, secret key header, etc).
Why would I want to use this over Symfony? What are the benefits of this framework in terms of documentation, technical debt and dependency injection? How much of the configuration is cached or processed in a build step?
Hey I just wanted to let you know I purchased the book and am about 50% through it. So far I think it's great! I finally understand what git and github are and I just got my first homestead vagrant up and running. I even got my current php/mysql project working in it within a few minutes! I really wish I had found your book a lot sooner as I have been doing everything with a Raspberry pi and a text editor. Iv already recommended it to a few friends who I am learning with. Once I finish it I'll send you my final thoughts and any other feedback.
Thank you, I appreciate it very much! That's great to hear - let me know if you need any help with it at all, I'll do my best to chime in asap
Neat. I have no idea why the PEAR serializer is so slow, but your benchmarks correlates with the number of features each provides. So well done :)
If you'd like someone to write a Javascript implementation, your best bet would be to hire /u/joepie91 whom is a phenomenal JS dev and probably can turn it around quicker than I'd ever hope to.
[This blog post](https://www.codevate.com/blog/12-securing-client-side-public-api-access-with-oauth-2-and-symfony) might be what you're looking for, if you need server-to-server style auth but one end is the browser. Basically it describes how to use the OAuth2 grant flow "client credentials" without exposing the secret. 
You should reach out to the [Bolt](https://bolt.cm) people, to see if you could join forces. I've heard they're all very friendly, competent people, and pretty welcoming to newcomers. Apparently, some of the lead devs even live in [The Hague](https://twokings.nl), which isn't all that far from your agency. 
[removed]
I hear you. I am not sure I think it is good that there is a "sales" aspect to giving something away, but I do think it exists. I think there's a psychological process whenever a new piece of free software is presented, especially in an open forum such as this. Software engineer readers, being part of a somewhat cynical culture, wonder if the code is terrible, or that the project is pointless, or they cannot see a use case, or that it contains malware, or that it is not well tested, etc. If those hurdles can be overcome, then does the reader like the author, if they are well-known? Do they like the logo? Do they like the font/colour of the docs? I don't know if these are "demands" as such, more just subconscious manifestations of the human condition. I assert they are why people can produce great projects and still have trouble giving them away - unfortunately they need to be _marketed_. 
We put our tests in a different folder, but the same namespace as the class they test. So \Vendor\Project\Package\Class.php lives in src/Vendor/Project/Packages/Class.php, and it's corresponding test, \Vendor\Project\Package\ClassTest.php, lives in tests/unit/Vendor/Project/Packages/ClassTest.php We find it makes it easy to reference the class and dependencies your mocking, as they're frequently in the same namespace as the class you're testing. It also allows us to easily exclude the tests and fixtures from the deployment package.
Curious what the purpose of it is to begin with? It's a annoying on desktop too. Especially if someone is working in another window while reading the content. Which is pretty likely for anything related programming. The text is even faded when I'm scrolling within the article window itself (when mouse is over scrollbar on the right). And aside from the actual feature detriments themselves, it distracts and annoys programmers in general. We're a pedantic bunch. :)
Why does it wrap Guzzle instead of just providing APIs and having the Guzzle wrapping on top of generic APIs?
Reading I back now I don't know how I missed it. I shouldn't reddit past 2 am I think 
Anyone else think these requirements are a bit OTT? Core expertise required with: PHP, Laravel framework, JavaScript, Object Oriented Java, MySQL, Couchbase, Hadoop, MapReduce, HDFS, HTML/CSS, jQueryUI, Node.js, Linux shell scripting, Angular and AJAX.At least 10 years of full stack web development experience.
It does specifically say "don't use this", [but...](https://github.com/ircmaxell/PhpGenerics)
This explains how the php rfc process works and allows searching for existing proposals: https://wiki.php.net/rfc/howto If you really feel this is a useful feature then code it up and submit a proposal.
Yes and the titanic could be boiled down into an infomercial saying: "watch out for icebergs when sailing" :-) Isn't that kind of why we share our experience? To give examples on why we think it would take longer and so on?
For anyone that does use some kind of Enum package in PHP, I'm curious... How do you then store these values in SQL? I got scared off from using actual ENUMs in my early days of using mysql when I saw how fragile they can be when the values change. Feels like too many things can go wrong. I'm using postgres now, and didn't even realise it supported them until now. But for the last 15 years or so, I've just stuck to using SMALLINTs, with class constants in PHP like... const USER_LEVEL_ADMIN=1000; Which covers auto-completion, and means options are easy to add/remove/rename. Curious how other people are going about it? 
I have been working on a “true” enum implementation which I might finish up and announce soon (7.2 feature freeze looms). In the meantime there's SplEnum.
No new complexity, it's literally a two-line change.
??= was already accepted in an RFC. But there is no implementation, so…
Why wouldn't it exist? `=` always assigns a value.
https://wiki.php.net/rfc/enum there is a RFC actually targetting 7.2! awesome. Anyone knows if it got accepted though?
Dude please hurry up! This just needs to make it into 7.2
For the love of god, please please please &lt;3
Wraping Guzzle: * Predictable A generic API that can be pluggable with multiple backends: * Unpredictable * Possible source of vulnerabilities after v1.0.0 is tagged, which means paying money out in our bug bounty program for no real win But if anyone thinks this should be the other way around, submit an issue detailing why you think it should be pluggable.
I do what you do
You're referring to the example code, right? It doesn't need to be an absolutely perfectly compliant representation of time according to the standard, it just needs to be adequate to defeat replay attacks beyond a certain time window.
it does, but assigns what? With `?? null`, it is 100% clear that it assigned a `null`. Without the null, one could assume it would be a zero, an empty string, etc.
We're still in `v0.x` so that can be changed between now and `v1.0` But Only if changing is a win and not a hit to the wallet
unfortunately it has been in draft since 2015....
&gt; Possible source of vulnerabilities after v1.0.0 is tagged, which means paying money out in our bug bounty program for no real win Why would you have to pay for possible bugs in dependency libraries? The benefit of using for example `httplug` is that the user can inject the client implementation they want to use. This also means the user is fully responsible for said client.
Because people tend to submit gray area findings like [this](https://hackerone.com/reports/228112) that shouldn't be our responsibility, but in a way, are.
:O I'll have to add `and Enums` to my [RES tag](http://i.imgur.com/hH99kwk.png) for you.
I suppose they would have to be stored as strings. Or serialized :/
this is broken?: [passwords not compared, wrong $_POST variables used](https://github.com/gauti123456/LoginSystemProject/blob/c1e21e7bec0e61c001c563218849a2f714954786/resetpassword.php#L7) not using password_hash: [logging in](https://github.com/gauti123456/LoginSystemProject/blob/c1e21e7bec0e61c001c563218849a2f714954786/login.php#L22), [resetting password](https://github.com/gauti123456/LoginSystemProject/blob/c1e21e7bec0e61c001c563218849a2f714954786/resetpassword.php#L13)
https://github.com/paragonie/sapient/commit/890ce879c1fdf707778fb7697ed85eb66f9cae6c
Thanks again for the contributions. The RFC doesn't list any example, but I imagine if ($a['thing']??) would work too when not set.
If you're still nervous about using enums in that way in Postgres, you can take a slightly different approach using domains: create domain animal as text check (value in ('dog', 'cat', 'giraffe')); create table foo(id serial, pet animal); insert INTO foo(pet) values ('dog'); --INSERT 0 1 insert INTO foo(pet) values ('cthulu'); --ERROR: value for domain animal violates check constraint "animal_check" So similarly strongly typed, but ultimately just text underneath, and the check constraint can be dropped or modified whenever without restriction. Also it can be arbitrarily complex as it's just an SQL predicate.
That title and the NASA radio talk overlay are kind of misleading given it was hooked to a balloon, not literally sent to space on a space craft. But cool, this wins as a most elaborate way to throw away an elephpant. 
&gt; $search = mysqli_query($conn,"SELECT Email, Activation_Code, Active FROM users WHERE email='".$email."' AND Activation_Code='".$activation_code."' AND Active='0'") or die(**mysql_error()**); It's 2017 here and there are still people around who aren't ashamed to post a code like this
Some silly questions for my own edification here. Apologies for the question dump, but I don't often get to ask questions like this of people. :) - Why Base64 encode the keys for storage? As binary strings, can't they just be written to a file? - If the keys are fixed length and random, how does a constant-time Base64 decoding function help? Wouldn't the conversion time be constant regardless of implementation? - Furthermore, why use a variant of Base64 instead of plain Base64 in this case? - Why store the nonce as additional data in AEAD encryption _and_ at the start of the encrypted string? Isn't it available before decryption as "additional data"? Thanks!
It was mainly to offset the focus to the menu when you were over the menu. There are additional options up there if you're logged in which is probably why it doesn't seem to make much sense. It'll definitely get redone once I have more time to commit to styling as I intend to revamp the whole thing.
&gt; Why would I want to use this over Symfony? I don't know that you would. That probably depends on what you're doing. As I've noted elsewhere, the point is to provide a baseline for integrating a wide variety of packages that one might use across any number of projects. It's not a full-stack solution, nor is it intended to be. It's intended to provide an anchor point for creating varied solutions very rapidly. &gt; What are the benefits of this framework in terms of documentation... Absolutely none right now. Documentation is extremely limited and since it doesn't do much, most documentation is going to be with respect to the packages integrated. &gt; technical debt... Unless there's some particular issue you see with the way providers/delegates are, then whatever technical debt is introduced would be with respect to whatever packages you create for it. &gt; and dependency injection? Dependency injection is extremely robust. The system uses Auryn at its core. For more information on that, I'd suggest you see their docs: https://github.com/rdlowrey/auryn -- The Delegates and Providers are simply a means to encapsulate dependency configuration. &gt; How much of the configuration is cached or processed in a build step? Config is not cached yet, though at current this has not presented a significant optimization problem. It's on the list and should be pretty straightforward.
I didn't know that about AEAD. I'll also read up on the blog post you link. Thanks.
https://github.com/paragonie/sapient/issues/4
Yeah, I think that's pretty much it - a nicely named reusable bag of constraints. Slightly related, if you're interested in such things, you can do something similar for groups of fields that always appear together. Say your application is very interested in points in three dimensions, you might end up with a lot of tables defining columns (x int, y int, z int). Instead, you can create a composite type `create type point as (x int, y int, z int);` and just reuse that in all tables. Again, doesn't achieve anything that couldn't be done before, but saves duplication and makes things tidier and a bit more strongly typed. You could define a function `distance(point, point)` for example, and have it unambiguous what it does.
This is fantastic, so easy to setup and resizing service. Great work !
&gt; `strip_tags` What happens if my username is `&lt;john@gmail.com&gt;` or password `&lt;password`?
&gt;I have been working on a “true” enum implementation which I might finish up and announce soon (7.2 feature freeze looms). Is it similar to Java enums? Immutable instances of the class on static constants? 
I feel like tests are an exception to this. Do you guys keep your tests PSR-2 compliant? For me it all goes out of the window and I use a style similar to author with snake case.
The one I've been using is this very simple class which unfortunately uses reflection but it's the easiest way I've seen to get almost proper enums: abstract class Enum { public function __construct($value) { $constants = (new \ReflectionClass(static::class))-&gt;getConstants(); if (!in_array($value, $constants, true)) { throw new \InvalidArgumentException(sprintf('Expecting a valid %s', get_class($this))); } $this-&gt;_value = $value; } public function __toString() { return (string) $this-&gt;_value; } } class Test extends Enum { const RAWR = 'rawr'; const FOO = 'foo'; } $t = new Test(Test::RAWR); // Passes $t2 = new Test('fail'); // Throws InvalidArgumentException function onlyEnums(Test $t) {} // You can now type-hint the ENUM
Andrea pls
You keep showing up in the threads I read and being awesome...
Wait, what have they done to you? Have they turned you into a wageslave, too? Who would ever do such a thing? 😠
I'd just be happy if someone explained the benefits of this.
Anyone working w/ a common code base to run multiple sites where each site has their own set of features that are completely different from each other? How are you maintaining the common code between those two sites? I don't want to get into a situation where I maintain two different code bases that have a lot of similar code (like 80%), yet individually they have their own set of tweaks that modified some of that common code as well (which goes as far as slight changes domain code for each individual site). My googling is sucking today. Edit: I wonder if something like http://blog.ircmaxell.com/2012/03/handling-plugins-in-php.html would work.
&gt; 1) Do I need to try to escape from the gravity of Magento and become more of a PHP generalist? As someone who hires programmers, it's always good for candidates to have a couple different frameworks/projects written from scratch under their belt. Sometimes they'll get really good with one set of technology and try to solve every problem that comes along with that same set of technology. Working with something else tells me you can see different ways of solving problems. &gt; 2) Is it best to focus on another language in general? I have an active github and am frequently experimenting with PHP frameworks I enjoy, but it seems like the ceiling for Java/Python devs is much higher than PHP. Again this is nice to have a way to pad your resume and get past HR filters but any manager worth working for will know PHP skills transfer to other programming languages (reminds me of http://www.jasonbock.net/jb/News/Item/7c334037d1a9437d9fa6506e2f35eaac).
Looks nice. Does the Raspberry Pi have enough horsepower to run the backend services or it it just a display and it's running off another server? I only ask because I want something similar but I haven't found time to get it setup.
not much from the PHP project has been clean quality code since the last 5.6 release. The 7.x stuff won't compile much of anywhere that is strict or standards compliant. Full of code bugs and bizarre extensions and gnuisms everywhere.
[removed]
It is subtyping which is polymorphism.
Covered in the NEWS file: https://github.com/php/php-src/blob/php-7.2.0alpha2/NEWS On the surface seems like a pretty meaty cleanup/optimisation release.
It would be great if they could release performance Bench marks for each new version so we could easily see how much faster it is. Speed upgrades from simply upgrading php will massively boost adoption
A single package seems hardly a big deal to swap out. That's why it's a package right?
 &gt; In fact so far this year we’ve only managed to ship 6 releases. Urgh, now I feel super-guilty :-\
Have always used Phinx after discovering it, even in combination with Doctrine, love it!
Note that compression defaults to the awesome moz-jpeg algorithm! 
Yes except that in this case, you would depend on an interface definition only. Like I said, the user picks the client implementation. In other words, the actual client implementation is never a direct dependency of your library. Only the interface definition is. Client implementations must be explicitly chosen and composer required/downloaded by the user.
cool, I am looking forward to the new version. Ever since 3.x came out, I really enjoy working with cakephp. Glad that the upgrade path to 4.x is going to be way easiert thant the upgrade to 3.x
Seems like they are following a very reasonable upgrading method now. Not a fan of the Framework, but glad they chose this way for those who do.
Wonder what else 4.0 will bring aside from easier upgrading, removing deprecated features from 3.0, better error messaging and making the code base more PHP 7.1 friendly. Unless this is more about the foundation of the framework than introducing big new features/changes.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
The codebase runs on Digital Ocean server. The Raspberry Pi is just used for displaying the dashboard.
We've been incrementally introducing big new features/changes with each 3.x release, and deprecating code that is replaced by the new code. For example, 3.3 added PSR-7 compatible middleware (and deprecated the CakePHP specific dispatch filters), 3.4 did a major method naming cleanup and made the entire HTTP stack PSR-7 compatible. 3.5 is moving a bunch of code into the middleware stack, adding middleware pipelines (middlewares that are only run for specific routes) and 3.6 will have a major refactor of the shell/console functionality. The basic release plan for CakePHP is to incrementally add new features in minor releases, and every now-and-then do a cleanup of old code as a major release.
Agree. I will recommend using Google for searching in Packagist, though. site:packagist.org xml serializable Packagist results aren't always great.
For me, a free book from Dayle Rees was enough. https://daylerees.com/codebright/ . though it's a bit outdated (on Laravel 4), but it's sufficient to get an idea. Or you can order a paid version on Laravel 5. And for someone without experience with other frameworks, I would recommend the following course 1. Get an idea of what a framework is from [Symfony versus Flat PHP](https://symfony.com/doc/current/introduction/from_flat_php_to_symfony2.html) 2. Get a book on Laravel (there is even a free book, https://daylerees.com/codebright/ though a bit outdated, but you can order a new version) 3. Make yourself familiar with Composer [basically just download its executable](https://getcomposer.org/download/) 4. [Install Laravel](https://laravel.com/docs/5.4/installation) 5. Start a project on your own. For someone with decent experience with PHP completing the list above will take just one or two days.
Do you code when reading a book?
Nope. I am just reading the code samples, which is enough. I start coding as the next step. 
Well then, It will be an exciting release. How dare you say otherwise!
Figured, thanks for letting me know. 
I appreciate you pointing it out (now for the third time). Feel like I've committed the deadly façades error... :(
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Converting an enum to a string and back is nowadays a common requirement for enums, especially in languages that interact with the world a lot though on-the-wire formats. So this should definitely be not just a JSON encoding feature, but a general feature of enums: to convert to a string, and from a string. Just taking the name of the constant 1:1 would be a nice solution. Ability to assign custom values would be a great addition, i.e.: enum MyCoolAnimalEnum{ const dog; // Implies: = "dog"; const cat; // Implies: = "cat"; const giraffe = "cucumber"; // Overrides implied value. } (string) MyCoolAnimalEnum::dog; // "dog" (string) MyCoolAnimalEnum::giraffe; // "cucumber" MyCoolAnimalEnum::fromString("dog"); // MyCoolAnimalEnum::dog MyCoolAnimalEnum::fromString("cucumber"); // MyCoolAnimalEnum::giraffe MyCoolAnimalEnum::fromString("giraffe"); // ERROR: no such enum This is a solved problem, in that most languages implementing enums (especially dynamic ones like PHP) now have something like this.
The problem with integers is they're not stable over time. PHP is not C. It would take a simple re-ordering of the enums to wreck complete havoc in serialized values. Integers are also hard to debug, as you would need to constantly go back to the enum and count enums in order to understand what enum you have in a serialized value. No, integers are not a good solution for a script. Strings matching the constant name, with an option to override with a custom scalar is the best approach. It's stable as you add and remove values, it's stable as you reorder values, and it's easy to debug.
I'd say any scalar, but the default value is a string matching the constant. Integers would be a hell to debug in serialized values, and easy to mess-up if you re-order/add/delete values to the enum. PHP is not C so we should put our "glue script language" hat on and leave the "compiled low-level language" hat on the table.
Aaah, I must have missed this. Thanks!
&gt; you end up with the same value Only if $x was null/unset. If $x was, for example string(1) "5", then unary binding the ?? and binary bind the -, you get int(4), which is a very different result.
Yeah I wanted to send this to the c# devs in the company and tell them to suck it. Once I saw the tech involved, I figured the joke would rather backfire on me.
Symfony 4: "Look, we can copy Laravel too!"
This is the ideal release strategy from a technical PoV. Unfortunately it leads to lack-luster major releases from a marketing perspective. I've been struggling with the balance between those two myself for a long time.
Thanks for sharing. The post says &gt;This presentation was followed by a live coding session (not recorded, unfortunately). Neither of them was recorded or the coding session wasn't?
I don't understand, which part of the slide is copying Laravel? (genuine question)
Are you a down vote farming bot?
As someone who uses 1.3 still at work I fucking hate CakePHP with a fiery passion. I love Laravel but I know it's not apples to apples seeing how my Cake is so old but after all I've put up with with cake I would never pick it again. Thank god we are slowly deprecating that code.
I'm kind of shocked they still develop it. Security releases and things like that I can understand but I'd personally have a hard time investing effort in new features when something like laravel is so much better and widely used
I think that behavior would make me want to hang myself the first time I came across a misspelled enum and had the realization that it could never be corrected.
Well [there you go](https://en.wikipedia.org/wiki/Subtyping). I learn something new every day.
Why does Symfony still uses `REMOTE_ADDR` checks in a front controller? Most people work in a virtualized environment nowadays. Not to mention Vagrant, even [the linked Docker setup](https://github.com/dunglas/symfony-docker-skeleton) won't work is some environments because of platform-dependent `DOCKER_BRIDGED_IP` value (I am not sure about Mac, but at least on Windows that IP will differ from the one expected). It's enough to just check whether the environment is production and debug mode is enabled. Don't let the misguided security concerns stand in a way of common sense convenience. 
And then [everyone on this subreddit was like...](https://s-media-cache-ak0.pinimg.com/564x/b7/80/a1/b780a19ad70a7125baba4e4e3864b755.jpg). :D
Have you tried cake 3 or are you just comparing to cake 1.3? I'd love to know un what sense Laravel is so much better than cake 3
Laravel didn't invent any of those things. Autowiring has been in Spring Java for a long time. Many frameworks in various languages use environment variables.
Keep trying.
Thank you for the work /u/dunglas :)
You're right, the check in the Docker skeleton is useless (it's a legacy of the non-Docker version) and I'll remove it. For the official skeleton, I'll suggest to remove it too (but I don't know if it will be accepted). Btw, the trick with `DOCKER_BRIDGED_IP` works on Mac. I never tried it with Windows.
It has no cost at runtime because (unlike Laravel), Symfony "compiles" the container. It resolves all dependencies then dumps an optimized container in `var/cache/` (usually when you execute bin/console cache:warmup). No introspection occurs at runtime. Enabling the autowiring feature or not doesn't impact performance and doesn't change at all the generated PHP file. Autowiring is now on by default because it improves the developper experience and makes refactoring easier. But you can easily disable it if you don't want to use it, and you can even mix "traditional" full definitions for some services and let the autowiring for others.
Thanks for sharing 👊
Looking through the source code, curious about something: const NEWLINE = "\n"; Why not use the built-in `PHP_EOL` instead?
I am a big fan of cakephp 3, but please add job queue and a gui for managing acl. Edit: Also friendsofcake/crud should be the recommended way of creating crud controller.
Cool project. What does this have that Symfony Command Line doesn't?
array_key_exists() returns true even with a NULL value
&gt; If you had misspelled an enum, and it's in a library where other packages use it, you can't change it regardless of how it serializes, because it'll be referred to by name anyway. Sure you can. You just deprecate the misspelling in the next minor and fix it in the next major, like any other BC breaking change. &gt; The moral of the story is be careful how you spell when you define identifiers. One could say the same about making changes to enums with engine-assigned integer values. "Be careful" is pretty universally good advice. Besides, mistakes aren't the only reason to need to change a name. Should the names change in the domain, this behavior would muddle your [ubiquitous language](https://martinfowler.com/bliki/UbiquitousLanguage.html). &gt; Also, the serialization issue is easy to fix as you can always map the typo to the right value in your deserialization logic. I'd rather not codify typos.
think of it like this $return_from_ternary = ( $b ? print('TRUE') : print('FALSE') ); "print" is a language construct but it is also a function. it writes to STDOUT (the screen, or page) and then returns 1. also a ternary operation returns the return value of whatever side is executed based on the value of $b so in this example $return_from_ternary will always be 1
What do you mean by it writes the screen, or page.
In unix processes, all programs have a return value - a number indicating success (`0`) or failure (non-zero). Taking `0` for success, and leaving higher numbers free allowed programs to decide what their failures meant, and support multiple types of failure. You will see `int main() {` bandied about, especially in C (which is *the* "unix programming language") - this means the "main" part of the program returns an integer (the return value). PHP adopted a lot of ideas from Unix/C\*, and this is one of those. Unfortunately, the idea doesn't totally translate. `0` in unix means success (true), but `0` in PHP is `false` - so instead, they've used `1` - because `1` is true, and it more or less holds to the idea of "return values". ____ Edit: Oh, and the reason this is useful is to print in a conditional chain, like.. // if first and second are true, print. // but, only enter the block when first and second AND third are true. if ( $is_first &amp;&amp; second() &amp;&amp; print("first and second are true") &amp;&amp; third() ) { // all of the things are true! all_of_the_things(); } This is called "short circuit conditioning", where it doesn't bother to continue to evaluate a conditional once it knows the answer (in the above, if `$is_first` is false, then there's no way the condition can execute - and so it never even runs the `print()`). Don't use this trick in production code though, because it doesn't clearly express intention. ____ \* In case you didn't know, C and Unix were developed at the same time by the same guys - so they're definitely bedfellows.
So is print just for non-null values?
Wow thanks for taking the time to clear that up. I'm kind of mad at my book not going into more depth to explain this
[removed]
Cool, thanks for making &amp; releasing this! I've been thinking about doing something along these lines for a while. Edit: oh thanks for the downvote for thanking someone. 
1.x and 3.x are completely different things. You should give it a try.
You may disagree with his view or the character, but this constant bashing is really tiring and doesn't make the PHP community better
Or in `back ticks` for inline :)
Laravel Zero uses Symfony Console through (Laravel) Illuminate Console. Zero has the following advantages though: - It's faster to kickstart a Laravel Zero project: just "composer create-project ..." and you're good to go. - It has some additional features (thanks in part to third party packages) : easily package your tool in a phar standalone executable, send desktop notifications, analyse the performance of your commands.
Agreed, Taylor is an alright guy but it makes it sound like one of his products to be called Laravel Zero
Some brief notes from the code: 1. Uses fopen to load the image over HTTP. allow_url_fopen required. 2. Doesn't use a stream context to provide HTTP timeouts or proxies, follow redirects, etc 3. Uses a custom filename randomisation scheme instead of tempnam() 4. Reads the entire source image into memory on every request, even if it's located on a blacklisted domain or has already been fetched 5. Uses external commands to process images, but does not apply memory limits or timeouts Some other design notes to be aware of (currently implementing my own version of this, to replace a very similar ageing system): 1. Makes no attempt to reuse fetched resources, despite caching them to disk. 2. Provides no means to evict cached items or monitor their use - cache will grow infinitely. 3. Does not attempt to respect cache headers - all resources will be fetched new.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
ITT: people who don't know how to ride a unicycle, trying to get on one for the first time, falling off and then blaming the product. It's a shame that people go to an effort to release some open source software, then just get negativity thrown back at them by people who most likely don't know anything about the subject to begin with. SERP scraping isn't something that just always works in any environment.
How do I broadcast an event to my client side JavaScript out of the box? How do I queue a background job out of the box?
The joke is Laravel.
[removed]
Currently applying for a job just like this and the words of wisdom help a ton to build my confidence (I was fretting language proficiency). GL to the OP, hope you get the job you want!
I honestly though this was made by Taylor when I saw the title. Im not one for caring much but its really misleading to his trademark
I took up Haskell a couple of years ago. It was pretty challenging for me - Haskell demands a purely functional programming style, and it seems I bump up against my maths knowledge a lot in using it (and am forced to expand my knowledge there). Working in Haskell has completely changed the way I write Javascript. Every serious PHP developer should learn a few other really different languages imo, and not just Ruby/Python/Perl. 
Not that much. I really can't quantify 🤔 was made at weekends.
More reliable option. https://cse.google.com/cse/create/new Plus this way you never get blocked but yes you have to pay for it. Using the XML feed you can style it however you want to. Edit: nevermind... &gt;Google has discontinued sale/renewal of the Google Site Search since Apr 1 2017. The product will be completely shut down by April 1, 2018.
Just said thanks for the sharing. Now I understand the twitter php community drama about the reddit posts 😉
I'd rather pull in another library so I'm not stuck using Laravel if I have to break it out into smaller services using Slim or Silex, etc. Also that global dispatch function in the queues pacakge... yuck.
&gt; most of my code would make a grown neck beard cry themselves to sleep for a solid month. Thank you sir. Your post makes me feel better about my own 20 years worth of php code!
Think about it this way: if you cast $b to a boolean, would the resulting value be true or false?
How? By including "return 1;" at the end of the function, just like you might in any of yours. Computer functions do not have to be describable in terms of evaluating algebraic equations, so there's no reason to believe that the parameters to a function or action performed by a function need ever have any relation to the value returned. Why? No reason, it has no meaning. Someone made a choice, and there's no reason to change that now because it does no harm. There's nothing besides the author to decide on whether a return type has a real-world meaning. In this case, there is none. And it's not a status code, since it always returns 1, and no possible failure exists that wouldn't cause the execution environment to fail (in which case, the function wouldn't return anyway). Perhaps they had originally wanted to leave open the possibility that it might return a status code based on some not-yet-defined type of error - and never did. They could have given it a void return type and it would function exactly the same. 
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [howie6879/php-google/.../**all_domain.txt** (master → 092006b)](https://github.com/howie6879/php-google/blob/092006baee773ee8c7773cbf3b919f9ea30766a0/src/data/all_domain.txt) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply djcz0td.)^.
The fact I have never seen this compliant anywhere before, except from your earlier post, probably says a lot.
You should use proxies for this. Multiple ones. If not it will just show the captcha thing all the time. And your up will get blocked. But it looks really good!
Do people even use rails anymore? I see so much more Go or Node for web dev now.
How does it the whole thing!?
 function print($str) { echo $str; return 1; }
It absolutely is a status code. It is hardwired to return success status because unlike something like the curl function, this function will never fail.
Several years ago, I was asked to write a SERP scraper as part of a job interview. Turned the job offer down after I came to the conclusion that such a thing (in the particular context of writing a SERP scraper that auto-switched proxies upon recaptcha error) was a violation of [Section 1 of the Computer Misuse Act 1990](http://www.legislation.gov.uk/ukpga/1990/18/section/1)
I never implied that I was the creator of Laravel Zero, and I'm sorry if my wording gave you this impression. I am a happy user of this project, and yes, a friend of the developer who maintains it, /u/nunomaduro (and I told him I posted it here). If that makes it "fake hype" in the eyes of most of you, I will be more careful next time, maybe with a direct disclaimer.
Thing about #3 is for example project 1 shouldn't/won't have features from project 2 and vice versa so how would I get it to be `config -&gt; project -&gt; output` when only certain common code is used across both projects? It also comes down to say I have some common code as in controllers that are in both projects, but I'd end up needing to add functionality to that code just for project 1. And yeah I don't mind the effort/time it takes, I just need to get it done, but I've never really done anything like this before.
In your case #3 won't really work since there's actual difference in code between projects instead of just config variable differences. In that case I'd probably look into modularizing the code and then extending classes that I need to be different in the projects. It's hard for me to make that judgement though since you would know your code base better than I. 
I've written long-running worker scripts that only restarted after code deployments as far back as PHP 5.4 with no memory management issues. PHP is suited just fine for that sort of thing if done correctly. Funny enough, they were written to replace some Node workers that had to be restarted every 10 min due to memory exhaustion. If done incorrectly, though, you can achieve memory leaks in any language. :)
If you've worked with react or angular front end JavaScript frameworks, redux or flux is all event sourcing. 
the example is in the question. Its readability.
I see two problems: Test::RAWR returns a string instead of itself $t = new Test(Test::RAWR); $t2 = new Test(Test::RAWR); $t === $t2 //false
You're looking at the old version. As I noted above, check the notes on the improved version, or just go by the code I posted here and on [https://3v4l.org/ZQhMn](https://3v4l.org/ZQhMn). No duplication.
ok now I am happy. Even though having critical code in phpdoc is certainly suboptimal. But: i guess that's the best we can do ATM
It's sub-optimal in a perfect universe, but the nice thing about it is that this type of PHPDoc is understood the same by the IDEs, and the PHP runtime (due to my code). In terms of autocompletion, error-checking, etc. it's virtually identical to real methods. The only risk is if you decide to strip comments from your code, because then it'd be like stripping methods off your class. But I think that's not common practice for PHP code.
Known IP ranges of VPS companies are obvious automated traffic to Google.
Well... that's actually wrong; the expression is equivalent to this: $always_one = (function ($b) { if ($b) { echo "TRUE"; } else { echo "FALSE"; } return 1; })($b); You missed the "returns one" part.
I was referring to the ternary part where I thought he was confused but maybe I misunderstood.
Why not use audit trails or events to track the changes? I use a table of entity states with a columns: `entity_type`, `entity_id`, `timestap` and `state`. Based the time stamp I can determine the changes applied during after change (ie: make a diff) without having to implement events and play them back. Whenever I do `$respository-&gt;save()` I trigger an event to record the new state. I find this solution overly complex.
you should look at this great site for your answer: [http://www.lmgtfy.com/?q=php+%20publish+facebook+post+with+Facebook+Graph+API](http://www.lmgtfy.com/?q=php+%20publish+facebook+post+with+Facebook+Graph+API)
I'd rather use `foreach` over either. But `do ... while` has it's place.
Because it's not all explained in the article, event sourcing needs CQRS to work properly (you can do it without but then it's not actually event sourcing and in my opinion you'll tend to end up in a mess). In an app, built with cqrs and event sourcing your single source of truth is the event store. Your app got basically no state at all. Sure you'll implement a snapshot system or use other things to "cache your state" but you'll save this state specifically for a given view. There's a lot to consider and a lot of downsides, but if your app or service is generating enough money it's worth it 100% (even without generating a huge amount of money, a simple implementation of cqrs and event sourcing is always benifitial). Watch Greg Youngs talk from 2014 if haven't, it explains a lot of the "why should I do event sourcing" https://www.youtube.com/watch?v=JHGkaShoyNs
You can achieve same speed &amp; more than Node with React for PHP. But for bots with no huge calculation, I would still go with Node.
Looks syntactically correct. What's the problem?
You need to put parens around the statement when it's being concatenated with other strings.
Concatenation operator has higher [precedence](http://php.net/manual/en/language.operators.precedence.php) than comparison and ternary operators. Add parentheses: 'foo' . (3 &gt;= 0 ? 'a' : 'b') . 'bar'
Nope, see for yourself: https://secure.php.net/manual/en/class.splenum.php.
The question makes no sense, even without the butchered English, all of you are bots upvoting each other.
been doing that for my PHP 7.2.0 alpha testing - alpha2 has a nice improvement over alpha1 https://community.centminmod.com/threads/php-7-2-0-alpha2.12064/. Looking great :) though i am running into the same problems using -flto with php 7.2 as outlined at https://gcc.gnu.org/bugzilla/show_bug.cgi?id=68384
&gt; `while` is for when you have even less information, but you'll know it when you're done. Things like `while ($stream-&gt;hasMore())` This can be easily converted to a `foreach`. 
Interesting, I ended up just stripping down laravel base app to only include console only stuff. Worked out quite well. But knowing I got access to the full potential of laravel if needed.
How to get started with Laravel?
Would that not work with file streams?
It looks like on top PHP5 was used. Read comments on the link, there are some people who tried it with PHP7 and HHVM as well. PHP7+Reach is faster than default NodeJS. PHP7+React is almost the same with properly configured NodeJS. And when I say almost the same I mean less than half a second same.
Send a patch with your suggested naming?
The author's naming strategy seems to be to name everything "Factory" even if it's not a factory, and wrapping every string in its own dedicated object, that also comes from a factory. The library seems to be created by smart fellows, but they really don't have a knack for creating concise, intuitive APIs. I'll compare the README example with my own internal library. Their example: $message = (new FormattedMessageFactory()) -&gt;withHtml('&lt;html&gt;&lt;body&gt;&lt;p&gt;Hello World&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;') -&gt;withAttachment(new FileAttachment('/order1.pdf', new ContentType('application/pdf'))) -&gt;createMessage() -&gt;withHeader(new Subject('Hello World')) -&gt;withHeader(From::fromEmailAddress('from@example.com')) -&gt;withHeader(To::fromSingleAddress('to@example.com', 'name')) -&gt;withHeader(Cc::fromSingleAddress('cc@example.com', 'name')); $transport = new SmtpTransport( ClientFactory::fromString('smtp://user:pass@host/')-&gt;newClient(), EnvelopeFactory::useExtractedHeader() ); $transport-&gt;send($message); ... or how it can be (this sends the **exact same email**): $message = (new Email()) -&gt;subject('Hello World') -&gt;from('from@example.com') -&gt;to('to@example.com', 'name') -&gt;cc('cc@example.com', 'name') -&gt;html('&lt;html&gt;&lt;body&gt;&lt;p&gt;Hello World&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;') -&gt;attach('/order1.pdf'); $transport = new SmtpTransport('user', pass', 'host'); $transport-&gt;send($message);
Well, it's open-source and on github - provide feedback in issues :)
Is your library open source..?
Finally I can ditch PHPMailer.
From a purley number crunching point of view, is there any speed differences between the two?
It appears they've blended builder and factory together, resulting in neither. Digging through the source even more, the fun part about the example is the object type you're dealing with actually changes halfway through, and you can't tell at a glance: before `-&gt;createMessage()` it's a `FormattedMessageFactory`, and after it it's a `MessageInterface`. 
Many thanks for your review, we'll definitely take your notes and check them. Thank you again, much appreciated!
We mentioned this lib in our latest ["app bounty"](https://www.sitepoint.com/family-crms-guzzle-wrappers-php-machine-learning/) (bottom of post) so if you're looking to score some cash and get to know the library, I guess here's a chance?
I'm no mail expert. Can someone explain how "discourages SSL" is a good thing?
&gt; when you have mixed messages (text + html) with attachments, and some clients can't open them right. Interesting. I have used SwiftMailer for a long time now and not run into these kinds of issues. Do you have more details to share? Thanks!
Well, it makes sense, that `-&gt;createMessage()` returns a MessageInterface, doesn't it? The From/To/Cc Handling looks rather ugly and the factory is a builder. The factory pattern defines one function (abstract class or method) to handle object creation. The builder pattern defines an object, that stores the initialization steps and provides a method to create the object based on povided parameters. They should rename it. The approach is in no way different to $query = $doctrine-&gt;createQueryBuilder() -&gt;insert("user") -&gt;values(["id" =&gt; ":id"]) -&gt;getQuery() -&gt;setQueryHint('foo', 'bar') -&gt;useResultCache('my_cache_id'); It's just, that noone should write in in their docs like this, because you can't see at a glance where the interface changes. This looks way better for documentation, even though comments would be helpful still: $messageBuilder = (new FormattedMessageFactory()) -&gt;withHtml('&lt;html&gt;&lt;body&gt;&lt;p&gt;Hello World&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;') -&gt;withAttachment(new FileAttachment('/order1.pdf', new ContentType('application/pdf'))); $message = $messageBuilder-&gt;createMessage(); $message-&gt;withHeader(new Subject('Hello World')) -&gt;withHeader(From::fromEmailAddress('from@example.com')) -&gt;withHeader(To::fromSingleAddress('to@example.com', 'name')) -&gt;withHeader(Cc::fromSingleAddress('cc@example.com', 'name')); But! I **really** think, the library requires convenience methods.
Is the `withThing()` some kind of recommended naming convention? It seems overly unnecessary when most of the methods are prefixed with `with`.
You actually have to scroll all the way to the bottom of the docs, right before the comments to see: &gt; Note: Because this is a language construct and not a function, it cannot be called using variable functions. Which doesn't help to clarify this.
Issues aren't for feedback if the feedback is *your design is fundamentally flawed; start over*. From our perspective it's better to just forget it and use something else, like [Swift Mailer](http://swiftmailer.org/).
Logically those have nothing in common except being loops. The first iterates over something and the last runs as long as something has a defined value.
I misspoke a little, the issue is related to inline images, not attachments, but basically when you have mixed text/html messages, inline images, and attachments, there is a **very strict order** the multipart tree that has to be built. It's like this: - If the body is just html or just text, leave it as-is (no multipart). - If we have both html+text, wrap them as parts in `multipart/alternative`, text being first, and set this as the body. - If there are inline files, take the existing body, and set it as the first part in `multipart/related` and push every inline file as a new part there. Set the newly created `multipart/related` as the body. - If there attached files, take the existing body, and set it as the first part in `multipart/mixed` and push every attached file as a new part there. Set the newly created `multipart/mixed` as the body. I forgot how SwiftMailer exactly messes this up as I inspected it around a year or two ago, but basically it doesn't follow this order. If I remember right it messes up the nesting order so the `mixed` and `related` parts end up as children of the `alternative` parts in the HTML body. So inline files and attachments end up deep in the structure and `alternative` ends up on top, which is exactly the opposite of what's supposed to happen. The result is that when you have inline files and attachments, some clients would show your HTML and text content as file attachments, and other such irregularities, depending on the client. The issue is Swift is factored quite poorly, so there's no way to manually build a multipart structure, and tell Swift "send this". It's all implicit, and hardcoded into private methods that can't be augmented without monkey patching. And that's when I created my own mailer lib...
I still don't get why the put a language construct into the cloak of a function. I'm just wondering which other "functions" are just language constructs that happen to look like one... 
Yep, indeed. I was actually surprised by the high rate of adoption for PostgreSQL and SQLite as well.
Does anyone know what the actual ***question*** was to determine "popularity"? Was it what you currently use, or prefer? Maybe something else? And if the question was anything related to what people **post** about on stack, then that's very different again.
I fail to see why the whole thing seems to be overengineered with unnecessary immutability.
I looked into the raw data from StackOverflow's survey (2017) and the exact question was: "Which of the following database technologies have you done extensive development work in over the past year, and which do you want to work in over the next year?"
This is absolute bullshit there is no way MariaDB wouldn't be in the top 5, I will put my house on the line that MariaDB has more installs than Cassandra
What?
Sure. But still - realistically this shouldn't take more than couple of data files and one or two classes. Importing multiple dependencies with over 1600 files for such a trivial thing seems crazy.
Most of those files will be from 'phpspec' though, so wouldn't be part of a normal installation (ignoring the fact that the vendor directory shouldn't be in VC). I don't disagree that this should be a small project. The name + country calling code (which I don't think are correct for NANP countries) is only one small file: https://github.com/IftekherSunny/Country/blob/master/data/countries.php
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [IftekherSunny/Country/.../**countries.php** (master → 1e8b731)](https://github.com/IftekherSunny/Country/blob/1e8b7315408ed5a56b4d84a5f29ee4b491cba220/data/countries.php) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply djevfqb.)^.
It's the hottest thing this season. "Set" is out of fashion, as we made everything immutable, and prefixed it with "with", with which you know what your object is with. Get in on it while the trend is strong, because next year we're doing away with prehistoric stateful objects entirely and replacing them with an upcoming hit - CQRS. It's got everything: write-only commands, read-only queries, and basically no methods that do anything, just objects and objects all over.
One reason I see is that I can use it as the service and it won't change its state
Is PostgreSQL not the default in the Rails world? Asking out of ignorance
Oh my gawd, how antediluvian and obstreperous. Have you even moved all your code to middleware yet, the coruscating, au courant, axiomatic response to the scrofulous, feckless, moribund mutable request/response logic of yore?
As a non-native English speaker, I understood little of that, but I did understand the sentiment :p
While the example you name is a handy sideshow, it is absolutely not the reason why someone should implement event sourcing as it has a lot of downsides for most businesses and/or applications. An event sourced system contains streams of truth for different aggregates. This means that you can indeed trace every step that happened, it does however cost a fair amount of extra resources to implement and it costs an additional amount of resources to let the event store change with your domain. You should only implement this in application parts where knowing the absolute truth is important for your business (e.g. payments, critical business information). Let me take a deeper dive in to the 'it costs an additional amount of resources to let the event store change with your domain' part: Your business grows and changes most of the time, while the requirements from the business were 'only a first name on registration' now they also need a last name because of legal reasons. The event now changes, but your event store is immutable (although, there is a discussion going if this is technical immutability or functional immutability). This means you will have to upcast your event to the newer version on load, you will have to change your projectors to work with the new event version and you will have to replay all your existing projections to let your read models include the last name. I hope you see the amount of complexity this adds while you just want to add an additional field. Long story short: event sourcing is a great tool, if you use it for the right reasons and in the right places
Check out Symfony, Laravel, Composer, a whole lot has changed since ZF1, PECL and so on...
build something simple like a todo list
Learn to program in the abstract and worry about the exact language/syntax later. Doing it this way would be like learning a foreign language by trying to memorize words one at a time but having no idea what the important words are, what they sound like, how to put them together in a sentence, and so on. You can look up the word for "apple" in some language in seconds, but you have to have the concept of what an apple is first. I've been doing PHP for well over a decade now and I still look up relatively common syntax based stuff all the time. 
Time for you to start building things. You can google app ideas for learning if you're not sure what to make.
The best link I could find on the subject - it's not in much depth, but suggests that playing with the PHP letters in an attempt to make a logo kind of looks like an elephant: https://php.earth/doc/community/elephpant
Build a todo app to store your todo list of what todo in the php todo list that you build for todo stuff
I would definitely switch. I just need a class that can send HTML and plain text emails in UTF-8 with support for attachments, with function names that I can remember and make sense, and throws exceptions instead of printing error messages. Right now I use PHPMailer, and it doesn't do any of the above.
Could you show me an example that would make more sense than `while`? [The documentation](http://php.net/manual/en/splfileobject.fgets.php) shows a `while`-loop as an example.
I'll keep my eye on it, but I'm going to stick with SwiftMailer for now.
Well this is purely my own experiment so if it's too low I'm totally willing to up the value and just basically spitball about how to make it more appealing. No takers so far :/ Only thing is I have a limited budget per month I can give away so I'm looking to make the most impact with it, so.. Open to ideas. Turning it into several tutorials isn't out of the question either, and the final "bounty" would depend on whether the author only did the code work and I had to turn it into a tutorial or he did everything, and a bunch of other factors. 
I chuckled. 
As a native speaker, ditto.
Thanks ! It helped. I was searching queries like 'what programming language can be used with facebook api' and the results were just driving me nuts .
I see, thanks. So it was multiple choice? They asked two separate &amp; different questions for one answer? Would have been interesting to see the difference. For me the answer to the 1st would have been mysql, and for the 2nd: postgres. 
Yeah, kind of what I did this morning. Basically required the common code repo using composer/versioning and extended the classes that I needed to change and updated the interface aliases &amp; updated my registered controllers and it seems to work out nicely. Guess it'll just come down to testing changes before deploying.
It represents all the crufty backwards compatibility. Never forget
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
[C'Mon](https://www.youtube.com/watch?v=eRYkUASUpZ0) -&gt; Youtube Video that explains all!
Ah! However, `fgets()` obviously doesn't need to read from a file that can be opened via SplFileObject I suppose - if reading from a stream, or if you want to read binary data, there's no point in using `foreach` I suppose.
You used JMS serializer much? The docs are a bit brief. Took us ages to find out how to add attributes, having to register the annotations files to use the annotations feels a bit clunky. 
If it's a file just use `SplFileObject` which is an iterator and `foreach` will give you the file one line at a time.
I honestly think what you're trying to do is a good idea and I should have prefaced my comment as such. I guess the problem is the budget is fixed but the suggestions are more nebulous in scope... Going back to Monica again, what you proposed is a neat idea, but I imagine it'd be a lot of work for the existing maintainers let alone a newcomer, so it's not feasible for someone to pick up in my opinion. And when money is involved people start thinking about time and opportunity cost. One thought, which you might have had already, would be to split the bounty. Find some popular but not so well maintained libraries that are lagging behind in terms of PRs addressing open feature/bug-fix requests, and award based on that? So you could get your readers involved in contributing to open-source projects and write-up who was involved &amp; what was achieved, e.g. issues closed, code contributed, how they solved the problem(s) etc. But I'm not sure if that'd fit into the content model you need to produce, and it's prone to abuse unless you carefully vet the "value" of what exactly was contributed, which could be a contentious point if someone feels they're owed more than what's on offer. It seems really difficult to fairly compensate people for their time and get the content you need to justify the expense... :/ 
Look at the code, I'd say PHPMailer does throw exceptions if you instruct it to do it.
You'll need to write some JS to load the data for each select as they are chosen But anyways, from the sidebar: &gt;/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required).
I had a lot of trouble guessing how old that page was cause it still looks pretty decent. Then it mentioned needing Real Media Player to stream a video.
&gt; It represents the **elephpance** of PHP. FTFY
From a historical perspective, this was a good article, but nowadays, nodejs could soon become the new defacto standard for building business apps.
god damnit, how did I miss that. +1.
Na turns out its the authors alt account. 
Oh, lol. I had my suspicions but no proof. 
I am ok with the request being immutable, but I find it very counter-intuitive that the response is. I know the justifications for the PSR are documented and all... but it just feels wrong.
I agree, but mind you, the bounty isn't the only benefit the author will net. Any author that does this will have enough material for several posts, all paid, and will get other gigs with us easily (highly paid sponsorship posts, side projects for actual development, etc.) Apart from the monetary gain, there's also the very good opportunity to build a healthy portfolio of written content - something that lets you get hired easily by devangelist-seeking companies, and gets you into the habit of writing, building an audience, and just setting yourself up for a recognizable career. Naturally, one needs to *want* all this in the first place, so it's a little hard, and I can understand the hesitation of most people. But like I said, if you have any ideas on how we can make this more appealing or whatever, I'm all ears. I'm literally all about just putting more good content out on the PHP channel, that's all I care about. My pay's the same either way, so I just want to see the quality grow.
*X-Powered-By: PHP/4.4.3-dev*
Sure, but I don't want to use a library that prints errors by default, and doesn't handle UTF-8 by default unless you tell it. It's 2017.
because PHP is the elephant in the room?
No, it's not _catastrophic_, but you will also suppress any errors that may be introduced later in PHP which will then be ignored because `@` suppresses _all_ non-fatal errors. It's better to use `??` or to simply check with `empty()` or `isset()` depending on your use case, it also immediately makes it evident what you want to do as those two are not identical.
PHP Look at it... It's an elephant. Trunk loops on the last P... 4 legs.
&gt;It's better to use ?? I'm talking pre-7..id love to use `??` I started off doing `-&gt;setFoo(isset($bar['baz']) ? $bar['baz'] : null)` but honestly i was getting tired of typing out the same array accessor twice when I do a lot of integration mapping work. I'll probably keep using `-&gt;setFoo(@$bar['baz'])` until we upgrade to 7+.
Yeah I'm surprised to doesn't get more press in PHP 
I'd be inclined to agree with you. :)
`with` has been bothering me a bit over the last year or so.. it seems appropriate with builder patterns, but otherwise it's just a work around to immutability.. as I've said before - I don't get it - why not just mutate in place instead of clone and instantiate - and that might be more my problem than an actual problem.
This library is a great first pass, but it won't become widely used without reducing/simplifying the syntax. The library should do all the hard work, not the developers using it.
 &lt;?php
https://s-media-cache-ak0.pinimg.com/236x/0a/a7/b2/0aa7b2ff246d946d316c5fb074516bd9.jpg
If you stop paying you get a perpetual fallback to (I think) whatever your current version is. Really you're just paying for updates because the software doesn't magically stop working
After a year of paying, yes - fallback license to the version that was around 12 months ago. 
Got it, I misunderstood.
I don't know of any others like PHPStorm. It is the best tool for the job. My efficiency and consistency improves with the cognitive overhead it takes away when leaning on the visual hints, generators, shortcuts, etc... It also does everything I need it to for developing with latest JS trends. It's not cheap, but as a professional PHP developer, the time saved and gains in code quality produced during 1k+ hours of development per year, the licensing price is justified.
I'am afraid I agree with you. Unfortunately the async single threaded event loop model is totally not suitable for building business apps (i.e. crud). This is not so such a JavaScript problem (although JavaScript is a very poor language without proper namespacing, interfaces and a half decent exception model) but more a NodeJS problem. NodeJS is a programmable socket server and it's that problem that it solves very well. Every time I see a business app code base written in JavaScript running in NodeJS the "mental overhead" of the promises soup and callback hell makes me run out screaming with my hair on fire. But hey, the kids seem to love it... Maybe it's a lack of a frame of reference... 
IMO you should go with expressive or slim for new projects: it is clear that MVC is a poor fit for the http world (if you wanna call it h MVC), and we did indeed exaggerate with the event design. An HTTP-centric solution (around PSR-7) is a better fit. And we still achieved the modularity we wanted 👍
Use frameworks. It's good to eventually understand what they're doing, but it's pretty much impossible to achieve anything of value in any language without a framework or years of experience. Using them will be much more rewarding while learning. Check out different ones tho. It'll give you a good feeling for different solutions to the same problems (routing, databases, etc.). It'll also make you understand which problems there are. 
It should be more legible now.
i'm using vim and it's more powerful, i have 4 plugins and i more productive too
There is no strict requirement that you use a framework but I would at least familiarize myself with [composer](https://getcomposer.org/) which will serve as your dependency management tool and the various [PHP-FIG](http://www.php-fig.org/psr/) recommendations. You should also take a look at some of the libraries that are available via [Packagist](https://packagist.org/). This will allow you to save time and should provide you with at least a few good examples of well written code: https://packagist.org/search/?q=routing If you're already familiar with the Hibernate ORM then you may also want to take a look at [Doctrine](http://www.doctrine-project.org/) - or you could just use the [PDO](http://php.net/manual/en/intro.pdo.php) library as your DAL. Lastly, since PHP is a loosely typed language you may want to review the following [page](http://php.net/manual/en/types.comparisons.php#types.comparisons).
Details details ;)
framework experience is looked at more favorably than without. Coming from Java, C++ you know most of what is to know already, the framework will do the rest!
Learn principles as a beginner. Afterwards syntax will usually be easy. If you're also a beginner developer then I would go with /u/c00yt825 advice, use framework, but while learning don't stick with only one.
Be a man and use Notepad++. 
It was good, but nowadays it's struggling and new PHP features take months, sometimes years, to be implemented. I was a big fan of Netbeans, until they forced me over to PHPStorm - haven't looked back since.
Use the search, this is asked every so often. 
Grammar aside, and honestly asking: is this really the most efficient way of doing this task? Or is this just standard practice in Laravel? Not knocking the article, just honestly wondering if this is considered standard. Thanks
It is Rasmus lerdorfs totem.
This is a great answer. Let me add one more link: http://www.phptherightway.com/ This is a good overall resource to get familiar with how things should be done.
Their pricing is indeed confusing, they bill me £4.92 a month for my PhpStorm personal license which doesn't seem to correspond to any of the options on their licensing page.
I don't know about PHP, but from experience with other languages, you better start with frameworks and as you understand it works from high level you can start digging dipper. There are many people saying opposite, but i strongly believe that those are the ones that never written any code) If you just starting and never worked on any serious project, the framework would give you a mindset of those who written it - what problems they was trying to solve and what solutions they came up with. Those things that you would never get from just learning the language. And as you become good at that framework, you may start to see it week spots and limitations. It would mean that this is a good time to look under the hood(or some other word i can't remember, fuk-_-);
I'm thinking at most to write a simple to-do list using standard PHP and MySQL, then go straight to frameworks and keep on learning from there. Good or bad idea?
Very good point here, I was initially planning to do exactly this. Once I become very familiar with the framework and its capabilities, I can then look into how things are done without one. However, I wonder if doing things this way would mean that I'd struggle with frameworks due to my lack of fundamentals in PHP?