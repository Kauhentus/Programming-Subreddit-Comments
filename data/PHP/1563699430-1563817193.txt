This is a Perfect course for PHP Beginners to learn PHP: [https://www.udemy.com/ultimate-php-course-for-absolute-beginners](https://www.udemy.com/ultimate-php-course-for-absolute-beginners)
Take a look at [Payum](https://github.com/Payum/Payum/blob/master/docs/index.md)
Don't do it.
Refactor on the go. It begins with one big step only. Start investing time in a fork that includes Symfony and Doctrine. Properly the model the database (if it isn’t already) and make the entire system work based on Doctrine models and your optimized new database format. Test as much as you can, automate as much of that as you can. When that works, switch production over to the new version and start optimizing and adding new functionality. You could start building a single page JS interface that talks with a json api for new features and start migrating to a new, better codebase one feature at a time without ever impacting feature availability in production.
Why not open source it? I hate to be a jerk, but honestly I would be much more interested in this project if it were, and I imagine the /r/PHP community would be too. As it stands, there's not much for me to look at here in context of PHP besides what's possible.
Are you trying to recreate Napster/Pirate Bay?
Laravel Cashier supports Braintree as well: https://github.com/laravel/cashier-braintree And Mollie: https://github.com/laravel/cashier-mollie You can make an adapter for any other payment provider.
Sound waves are cool, yeah. But why I need to wait for them to start listening song? smh Pregenerate waves info, or place some placeholder at least.
I have 7 years full time experience as a full stack developer, and I have worked with a lot of different platforms. I am looking to start creating content to teach others how to start developing or further their developer education. There are already a lot of great tutorials and classes available that will teach you what you need to know, but what kind of content would you like to see to help you further your development career?
I have 7 years full time experience as a full stack developer, and I have worked with a lot of different platforms. I am looking to start creating content to teach others how to start developing or further their developer education. There are already a lot of great tutorials and classes available that will teach you what you need to know, but what kind of content would you like to see to help you further your development career?
I'm using grumphp for validating commit messages.
I don't think the PHP-FIG should standardise the payment systems. There are too many different systems and too many different scenarios for payment platforms. You've got push systems (like wire transfer or iDeal) and pull systems (like credit cards or SEPA direct debits), systems that support recurring payments, systems that don't, and a bunch more factors. The closest you can probably get is [Omnipay](https://omnipay.thephpleague.com/) by The PHP League. The FIG should be focused on higher architecture elements (like PSR-7 for requests and PSR-4 for autoloading).
Context: in the times when this proposal was accepted there were few people using IDEs. Also the available options were pretty crappy. Additionally the language went thought a huge transformation in development community since then. That would be my guess why. Nobody will remove this because why? It doesn’t hurt to support this but it’s used less and less in the wild like $GLOBALS or global keyword.
Why not?
NSSM's last stable release was 7 years ago, and its last update was 4 years ago. Is that not risky from a security position?
Thanks for the suggestion. I will try to add placeholders or something like that.
It's just personal project not that much big thing.
Try r/phphelp
Will make it open sourced and place save to locally instead of s3.
Github is no place to advertise your service...
Running php on windows is a bad idea. It would be better to run a Linux VM and do it from there. Docker is super popular and easy to set up. I did Windows php with MAMP etc, but it is just a hassle and not good practice. I use Windows and putty to local VMs, Puppet etc are a lot of fun. Anyway pick your favourite flavour of Linux and start using it (I like Centos) rather than Windows.
nssm only registers windows services and captures their output. Not much it really does that could ne insecure.
Interesting, but you know you can make your own if the others don't do the job?
What is Devilbox?
http://devilbox.io It's an automated setup for a dockerized development environment (like Homestead from Laravel which is VirtualBox based).
I'd say it's practice developing your own library, developing "testing" javascript functions, and creating pragmatic web page templates. Get people away from special circumstances code and more universal fit mvc style. That's what I'm always developing to make life easier.
Its not weird at all, to put it another way, do you wish they rush PHP 8.0 on the expected schedule when it aint ready? Its no different from companies rushing a product to meet the deadline, except that they may actually be under financial pressure to push it happen, but theres no such problem for PHP.
Don't all their options require approval before going into production? I've never really been a fan of companies that do that
Is a side observer you can’t just decide when PHP 8 is ready or is not ready based on some random period of time you pulled out of your ass. It’s nonsense.
Yep. We had some struggle with that too. Not a big fan of it either but I guess beggars can't be choosers.
Docker with volume mounts here. There's next to no overhead if you're in Linux already.
Have been using CaptainHook for 2.5 years already, great tool! You can set it up so it does the same checks as a service like Travis (for me: phpunit, phpstan, phpcs and psalm), just locally and as a pre-commit hook.
Note that this is no longer maintained.
My setup: https://www.reddit.com/r/PHP/comments/ced0v2/maybe_someone_can_use_it_so_ill_just_leave_it/?utm_medium=android_app&amp;utm_source=share
Docker ate up LXC. Why bother with the arcane stuff when docker-compose provides such a fluent and expressive interface? Answer: No smart + sane person does in 2019.
I'm building a proprietary source app called Laurapay that does this. There's way too much money involved for it to be open sourced.
Without source no one can help you but I suggest using flysystem https://flysystem.thephpleague.com/docs/ to abstract saving locally or on the cloud.
Spotted The Not True Developer!!
Well, I started using PHP/FI 2 when I was 16. Looks like I might start using PHP 8 when I'm 40. Since v6 was skipped, that's 8 - 2 + 1 = 5 releases in 34/35 years or one major release every 7 years.
If it's short lived hack, inheritance will do the trick! Will not work with locally instantiated objects! Better yet. Just profile.
Time boxed releases &gt;&gt;&gt;&gt;&gt;&gt; whar user think is big enough to warrant new release model. Just let go. PS new major version allows for deprecations. Less cruft the better ;)
Anonymous classes allow for easier unit testing without polluting name space. They provide similar benefit towards adapters.
Only that make conceptual sense. Only last thing is a thing that's importable. Different paths -&gt; different modules from which we import.
I guess nobody here uses it. Thanks.
vim
Out of curiosity, what do you dislike about that approach?
YouTube is cheap! It will cost you approximately $0/month
Great job on documenting what your functions are doing / how you're using them to handle things. I'll have to take a more in depth look at it whenever I get on my computer and im not on my phone in bed.
It's just frustrating having to fill out a 10-page form to apply for approval only to find out you were rejected 3 months later
There is zero quality control on YT.
So it matters on what you are actually trying to do? Its much easier to learn/teach if you have a goal in mind. If you want to build a webapp you should probably be using one of the bigger frameworks like laravel or symfony. If you are just building a website, wordpress is probably a good place to start. If you are looking for more a of microservice a composer package would make sense. If you are looking for a small small project that is "just PHP" I suggest making a composer package or contributing to an already existing one.
&gt;every course is $295 but only $19.95 for the next 4 hours That's basically what every online "university" does. They promise the video creators that they will sell their videos at x amount but they're always on discount.
Still. Great source. I learned Java from there. Problem is. You don't need course to learn these. You need experience.
Have a look at https://phptherightway.com
Try doing simple projects, you will get into errors, search them on websites like stack overflow, and you can learn like that. That's the best way to learn.
This is completely, comically nonsensical. I'm gonna wager this article was originally not written in English, and was run through Google translate and posted here. Either that, or a TV show writer took on a challenge to see if they could write an article that sounded technical as an exercise. Or both. For those not interested in clicking... &gt; After the system is serviced, the dependency is complicated, and the number of interactions between the service and the service is increased. In the development mode of fpm, because the resident memory cannot be brought to us, every request must be from zero. Starting to load to the exit process, adding a lot of useless overhead, the database connection can not be reused and can not be protected, because fpm is the process-based fpm process number also determines the number of concurrent, this is also Fpm development is simple to bring us problems. So why is the Internet platform Java more popular now, .NET and PHP will not work in this regard. Needless to say PHP non-memory resident. In addition, there are many other issues that need to be addressed. Or maybe it was just a word generator. Either way, my brain hurts.
If you don't want to self learn through experimentation and Googling, I still think Laracasts is a worthwhile place to start. Pretty sure they have some basic PHP tutorials.
https://youtu.be/i3RqDp7i308
Laracasts has an entire series on 'just PHP'. Jeffrey Way is excellent. [https://laracasts.com/series/php-for-beginners](https://laracasts.com/series/php-for-beginners) &amp;#x200B; Udemy is famous for running 'sales'. The sale price you see is really the normal price. &amp;#x200B; John Morris on YouTube is practical and down-to-earth, and has extensive videos on PHP: [https://www.youtube.com/playlist?list=PLrG78JjvL7hVzN5zrfiYsu4yWZNWF9QvM](https://www.youtube.com/playlist?list=PLrG78JjvL7hVzN5zrfiYsu4yWZNWF9QvM)
Have you considered buying a book? Small investment but there's something about buying a book on the language that motivates you
Checkout CodeCourse! Best videos so far
Laracasts is looking like the best video option.
That looks pretty good. I also found one called w3schools.
I use to read extensively, but now my eyes cant see things close, so I get frustrated when I have to hold a book at arms length. Maybe I will get reading classes. I miss reading.
Check out symfonycasts.com
Check if you have any vision coverage from your plan or your parents. Also you could just pay for an eye exam at your nearest cvs or Walgreens then buy some glasses cheap at eye buy direct
W3Schools is known for teaching web dev. They’re great but not too far in depth as far as actually teaching you. It’s more like the web dev dictionary
If you are like me, doing tutorials get kinda boring and less engaging. I really only watch tutorial video's just to get a gist of how the language / framework is structured. I need a project I'm doing then I'd write out pseudo code learn how to accomplish what I need to do in that language. It's the only way I've ever learnt. But first ask yourself, is this a hobby project or are you wanting to learn php to make a career out of? If it's hobby project, you can get away with doing procedural code. Example: A form that you enter information that save's data to a database. You could do all that one php file. If it's a few pages then do most of your repeated code in includes. You'll learn pretty quick this way the basics of the syntax. Just google "PHP connect to mysql database" and you will get a snippet right there and then. Php.net and W3schools are great places to get snippets. If this is something you want to make a career out of your approach will have to be more structured. Feel free to learn the basics above and get a feel for it. But career wise you will need to understand Object Orientated Programming. You might actually have to step back and learn the theory of it before touching any code. Then get a good grasp of MYSQL and database's in general if you are new to it. Then once you get into PHP learn to write your code to [the PSR standard](https://medium.com/solvup-tech/php-best-practices-with-psr-standards-d960498e1cd0). You will probably be faced with having to chose a Framework such as Laravel or Symfony. These are a set of reusable PHP components/libraries structured into a set framework. Before everyone had their own framework in their place of work. But this wasn't very transferable as you move jobs as you had to relearn how your new work interacts with their framework. Using a off the shelf standardised framework with great documentation is very transferable and essentially a requirement in these days. The downside to this is, you need to learn a another syntax on top of PHP to interact with them, this is a just the way it goes in modern PHP. So yeah, depending how far you want to go, changes your approach. Hope that helps
They only have 3 PHP videos.
Trifocals. People over 40.
John morris
I have found that the Udemy discounts have nothing to do with quality. Some of their courses are low quality, but I have found tons of very high quality courses, discounted for $10. The price has nothing to do with it. Just add courses to your wishlist and wait for them to be on discount. Just preview the course before you buy, that will tell you what you need to know about the author's teaching style and what topics are covered.
W3schools.com is only useful when I want to look up something for a quick like CSS hsla color function or PHP Ternary statement. Kind of like php.net/manual
There's an amazing book I tech-edited, the [6th edition of PHP &amp; MySQL Novice to Ninja](https://www.sitepoint.com/premium/books/php-mysql-novice-to-ninja-6th-edition). I used to work for SitePoint and have nothing to gain currently by shilling it, so I can objectively say it's one of the best getting started books out there. It'll skip the theory and dive right into teaching you how to build something from scratch while also baking in best practices AND teaching you to use and build MVC (model view controller) frameworks which are still the standard in PHP land (with good reason). I seriously can't recommend this book enough as a practical starting point. It basically gets you to a junior level in a month, as long as you follow along.
W3schools is awful.
I thought it was just monday morning...
Their OOP videos are also PHP and really helpful.
I mean, it’s not bad. It’s just inferior to other resources. I personally like some of its info on HTML and CSS for being concise and easy to navigate. However I have noticed it’s almost literally useless for bootstrap. It has to be the worst documentation of it, and I’m not exaggerating. When I first started with bootstrap I used W3schools and I couldn’t understand why bootstrap was so popular. Got ahold of MDN and everything actually made sense and was laid out properly. I imagine bootstrap isn’t alone in this
We are using lxd/lxc and docker. Both work okay, both has problems. I don't think there is best solution. If you didn't work with docker then lxd will be better as lxd containers runs whole system with services and systemd/initd and in docker you would run each service in own container. &amp;#x200B; I didn't run IDE from inside container but I work with phpstorm on my workstation which connects to lxd (or docker), most things work great with lxd and docker but phpstorm has better integration with docker and docker-compose. When you want to share your container config with someone it is waaay easier in docker than in lxc. Also it is easier to expose ports from docker containers than from lxd. &amp;#x200B; If you want to work on project on your workstation and have changes immediately in lxd container than you can mount volume just as in docker [https://ubuntu.com/blog/mounting-your-home-directory-in-lxd](https://ubuntu.com/blog/mounting-your-home-directory-in-lxd)
Come to think about it, I still have one! It's called websites with PHP 5!!! I just trashed it.
No W3schools is bad as hell. The whole purpose is not to help you. Its to sell their shit certificates.
Check out Coursera. There's a few PHP courses on there, and so far, all the courses i've done there have been of amazing quality. &amp;#x200B; [https://www.coursera.org/courses?query=php](https://www.coursera.org/courses?query=php)
Wow, that's pretty horrific
Try the sololearn app, it covers the basics to get started, and from there I would just trial and error things, try to make something, and when you don't know what to do, google the issue, you learn alot by trying to make something
you shouldn't teach anyone database development this way in 2019.
Dont be like this, update you stuff.
All of the proposed deprecations have been accepted, meaning the following things will be deprecated in 7.4: * The real type * Magic quotes legacy * array_key_exists() with objects * FILTER_SANITIZE_MAGIC_QUOTES filter * Reflection export() methods * mb_strrpos() with encoding as 3rd argument * implode() parameter order mix * Unbinding $this from non-static closures * hebrevc() function * convert_cyr_string() function * money_format() function * ezmlm_hash() function * restore_include_path() function * allow_url_include ini directive
It does kinda bug me that array_key_exists doesn't work with ArrayAccess :-\ It feels a bit half-arsed in that respect.
[https://codecourse.com/](https://codecourse.com/) its a more general web developement course site. Alex is a really good guy, I learned PHP off his youtube tutorials back before he launched code course.
W3Fools
X-Sendfile is massively outdated, see [https://github.com/nmaier/mod\_xsendfile](https://github.com/nmaier/mod_xsendfile) I admit I dont have much experience with nginx, if it works without blocking the FPM process then yes very good.
Docker did not "eat up" LXC/LXD - both have different purposes and thus different niches.
Small nitpick: PHP do not assume what will be loaded. Thus abstract classes are loaded as any other classes would.
&gt; allow_url_include Hmm, I understand why this is gone, but I had some specific dev flows dependent upon it. Trouble is running code through eval() is not exactly the same (constants like __DIR__ etc. don't get set to the same values).
That's most of the array API isn't it
goto https://www.reddit.com/r/PHP/comments/cfdmuk/true_or_false_variable_names_can_contain_spaces/eu978tp/
Sorry .. Noob here. So in your opinion docker-compose &gt; LXC ?
Maybe you could download the file and then require it? I'm also really interesting as what causes a need in this kind of workflows.
Basically there's a live, often-updated dependency on the server (made up of generated code + data), which all production projects include directly from the file system. But when you test on a local machine, you need to load that dependency somehow, and it needs to be up-to-date (mocks, and stubs don't work in this scenario), so there's a tiny service that can authenticate you through a public key and serve you the code and data to run, purely for dev. I felt dirty when I devised this, I still feel dirty, yet it works great, can't argue with that...
Definitelly... You are right.
Thank you. ;)
Can code be put into the repo? Can data be fetched with automated tasks? &amp;#x200B; Then local dev is a correct entry in composer and a post install script (and/or manually executed one).
If it was something updated occasionally, sure. But here, you literally fall behind if you wait less than an hour.
Ok, another thought. Network drive? (If it wont affect production access to said drives ofc.)
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
It's problematic from security PoV, because the service is very simple and custom and hard to discover, while network file protocols are often attacked :-) But I'll just... eval(file_get_contents('https://...', ...)) I haven't evalled in a loooong time ;-)
You didn't read the article, right? Because the article clearly specifies how to get rid of "the junk".
`money_format`, crap. Time to update some legacy code...
[removed]
[removed]
Such a pathetic rant for a such clickbaity title. All for snatching a few penny from page-wide ads.
You spam your content, so here's my answer: https://stitcher.io/blog/php-in-2019
I can't view the link for some reason. It is one of the most-recommended languages to learn, but why is it so popular? I disliked it from the first moment I saw it.
It's a free blog, so I don't collect any revenue from ads. I am legitimately interested in why anyone likes PHP.
Did you add a name attribute to the textarea?
Nothing particularly special required. Can you explain more about what you’re trying to do? And share code?
If you're gonna copy and paste, give credit you ass xD
I don't like to eat liver. So what? It don't post everywhere asking why everyone likes liver while I don't. Frankly, nobody gives a fuck if you dislike something.
Does `allow_url_include` apply to *all* stream wrappers?
Your work in inspiring. I often source dive your and your teams work. Thank you for helping and improving the community.
1. /r/PHPhelp 2. "It's not working, help me" is not useful. And there's a reason why you can't post a text field (see point #1)
There is no prevention (that's the idea) but there is a lot of authentication, validation, and limitations. Our servers provide the HTML code to show to the administrators and that's part of the core idea. Our servers have limited access to your website data (only when you use them) and that's another part of the core idea. You can host everything yourself (that's one of the popular ways to go) or you can use services to send emails, manage inventory, accept payments... and manage your website. I'll be happy to take a look at a specific case and see how it's handled in the different architectures.
Depends who's recommending you to learn it, and where in the world you are. Careers adviser, etc? Do you want to work in a sector where it's easy to find work, and pays 'enough' (definitely or do you want to work in a sector where the jobs are like hen's teeth, but pay more. Other developers? Maybe there's a shortage in your area and they want you involved (or, they want you away from their piece of the pie if they're particularly Machiavellian)
Thank you! I appreciate it 😊
What do you mean, you can't view the link?
So, just say you don't have an answer. You stumbled across it, and it's what you use. You have no argument in favor of using PHP.
You're a funny little spammer but no. "Don't give a fuck" means I don't care if someone thinks I don't have an answer to a stupid question :)
I've only seen it once. I looked at the code and immediately disliked it. I never bothered to ask why it was in use as long as I didn't have to use it. More recently, I've seen it recommended in several YouTube videos as one of the top few languages worth knowing in 2019. So, I decided to increase my familiarity with it. Unfortunately, I like it less post-certificate than pre-certificate. If the main argument in favor of it is jobs, why is it so popular among employers? Linux vs .NET?
It finally loaded; I'm in a 3rd-world country. Your blog? OK, so I see it is a feature-rich language. The course I took suggested that, as well. But, why is it so ugly? Compare it to Python: simple. Pretty. Or, compare it to my favorite: Assembly. Nice columns. Spacious. Elegant. Classical, even.
You are clearly incapable of articulating an answer. At least I've got a couple of intelligent responses from others.
"Problematic from security PoV", they said and then eval'd a file downloaded directly through external network. You scare me. :D
&gt; "Problematic from security PoV", they said and then eval'd a file downloaded directly through external network. Oh, so I bet you don't use Composer, huh.
&gt;"It's not working, help me" is not useful. And there's a reason why you can't post a text field (see point #1) I don't think that's the reason. If it is, this is just stupid. There is a lot of stuff to talk about in the actual post body. Removing post bodies make this subreddit an ideal place to throw meaningless links to random blog posts proving no info whatsover.
[Invision Power Suite](https://invisioncommunity.com/) is the goto forum software atm. It is paid, but worth.
The most specialized method for a textarea is [https://www.php.net/manual/de/function.nl2br.php](https://www.php.net/manual/de/function.nl2br.php).
PHPMD complains when you use more than X extends/implements/traits. I think that's fair. I use max 3 traits I believe in my project. But I could totally understand why it would end up being 40. A typical silver bullet example. As long as the code is well unit tested, I don't see any problem with this. It's just hard to read maybe. These 40 traits probably hide multiple inheritance which itself is a recipe for disaster in terms of design. Not sure how you can solve this mess. In any case, it would be an iterative process. Getting rid of trait one by one. Do you have any dependency injection to solve this ?
Nobody mentioned Payum ? It does the job on the backend. Adds your favorite API and whatever you like on the frontend. And you're good to go.
Supporting ArrayAccess is not possible, because the API does not allow for it. Even though the method is called offsetExists(), a correct implementation must have isset() semantics (i.e. return false for null values), which are not sufficient to implement array_key_exists. It would be necessary to either change the semantics of offsetExists() or introduce a new interface to make this work.
It only applies to URL stream wrappers. When registering a custom stream wrapper you can specify the type.
Funny thing is that most of the traits seemingly are what kinda drives dependency injection, as in provide setters for injection. The problem I see is that somehow some classes need to have references to half of the application via DI.
You are clearly incapable of getting a simple message delivered to you several times :)
No, I'm clearly working on another blog article (not directly related to PHP). Thank you for your contribution!
Yeah that's the thing that bugs me with trait, you need to setService and use $this-&gt;myService while crossing fingers that you service will be correctly injected into your class. Not sure if that's maintainable or even a good idea. The opposite is not great either, having a constructor with 20 services... I'm moving more and more towards ServiceLocator or Listeners for this scenario. [https://symfony.com/doc/current/service\_container/service\_subscribers\_locators.html](https://symfony.com/doc/current/service_container/service_subscribers_locators.html)
Thanks, I'm not immediately seeing anything in the docs that described the behaviour you mentioned, but I can certainly see why it's confusing. According to the docs, `empty()` first does offsetExists then offsetGet then tests against falsey values, so I would naturally expect isset() to do the same, but test against null: ```php function isset($obj) { if ($obj instanceof ArrayAccess) { return ($obj-&gt;offsetExists($key) &amp;&amp; $obj-&gt;offsetGet($key) !== null); } ... } ```
&gt; Not sure how prevalent this is in the rest of the PHP world, but I'm working with a codebase where there are classes that use traits like hell. I mean, it's a matter of style, I doubt that... &gt; in a single class that contains 40 or more traits from all around the code base ... OH MY FUCKING GOD. Kidding aside, that's not prevalent in the PHP world. I think your predecessor was seriously confused about object design. &gt; How would you start trimming that list down? My first instinct is to split the class up and rewire the traits into those, but then in addition to a million traits I would have thousands of classes with slightly shorter use lists. I'd need to see more to realize why so many different classes would have the same getters/setters (coming from traits).
&gt; as in provide setters for injection This may sound like an extreme position, but IMO setter injection is not dependency injection, it's an anti-pattern that leads to fragile, unreliable objects that are potentially invalid. $foo = new Foo(); $foo-&gt;bar(); // ERROR! Whoops, turns out you forgot to do `$foo-&gt;setBarProvider($barProvider)` This is bad, bad, bad OO design. An object should be guaranteed to be valid at instantiation. If it's not valid at instantiation, then it's going to cause headaches. One could argue you could use a builder or factory pattern to take care of this, but then that means the only way to instantiate an object is through that builder. If someone doesn't do that, now you have an invalid object. Hence, any dependencies you need should *always* come through the constructor. Using setters for DI is just asking for trouble and pain and anguish. So that being said, the traits being used are fundamentally bad in design if they are exposing setters for injection. And the fact that a class is using so many definitely sounds like a "god class" problem.
We are doing recurrent payments and aren't saving any credit card data. It's all handled by a third party, using iframes during the payment procedure. The credit card never touches our server. (Europe.)
We use Joomla with an old accounting software called nBill (no longer maintained, so we're looking to switch eventually). nBill works with PayPal, and we added our own gateway plugin to handle credit card purchases together with a third party. It's a simple setup.
Please tell me goto was in there...
So traits are for injection setters. Well the way to fix that might be to reduse these dependencies little by little and start removing traits. But it's a tall task. I can also propose another pattern: separate dependencies into "layers" and each layer into a factory. Then pass only this factory to the relevant classes and make them stick to their "layer" instead of using everything. Very hard to judge without seeing the code with my eyes though.
&gt; Yeah that's the thing that bugs me with trait, you need to setService and use $this-&gt;myService while crossing fingers that you service will be correctly injected into your class. I suspect the predecessor used some reflection to see which traits a class uses and inject the dependency automatically. Or in other words "reinventing $GLOBALS" as it often happens with loose and quick dependency injection.
The simplest and fastest autoloader is still: spl_autoload_register(); What a pity that Composer doesn't organize the code accordingly...
&gt; Docker with volume mounts here. There's next to no overhead if you're in Linux already. Did you performance check this? When I put php-fpm in a Docker container, the slow-down was 100% (testing done with `ab`).
I think a happy medium is to to use a service container and use it in the constructor: &amp;#x200B; `public function __construct() {` `$this-&gt;logger = container()-&gt;getService(Logger::class);` `$this-&gt;database = container()-&gt;getService(Database::class);` `}`
I can see modern real world uses for a function like that. I'm surprised they opted to deprecate it rather than fixing the issues with it.
The invalid-objects problem has bit me a few times already when writing tests. Painful.
Will need to consider factories, maybe they're better than the alternative in any case. :)
At this point I guess this would not be any worse. :D
Don't use phpMyAdmin. For development - keep your databases local and use something like Sequel Pro. For databases in prod.. STILL don't use phpMyAdmin... use migrations and test locally.
The solution to "crossing your fingers" is to make sure the trait implements an interface. That said, PHP traits cannot declare that they implement and interface, so many developers forego the interface and just write the trait for some brevity. Otherwise, the interface goes on the class and the trait simply fulfills it, which doesn't always make the relationship clear. &amp;#x200B; Since setter injection itself is a single method, I prefer to create the interfaces for better typesafety, then simply re-implement the one setter method where needed. &amp;#x200B; Either way... 40 doesn't seem right.
Asking purely out of curiosity and ignorance, but how does that compare to using composers optimized autoloader?
Right, that's what one might expect to happen given the name, but it's not what actually happens. Instead isset() will only call offsetExists() and directly report the result. Adding an explicit check of offsetGet() is a possibility, but it's also something of a BC nightmare in that it changes the way a correct offsetExists() implementation has to look like between PHP versions.
Udemy is ok as long as you find the courses with very high ratings, i.e. 10,000 ratings and an average of 4.5, you'll generally be alright - I've been programming for 14 years and in the past year I've been using Udemy to further my knowledge, I've had no problems and found the quality pretty spot on. Only buy from Udemy when they're on sale though, which is pretty much every day of the year.
If there's no prevention, what do the "authentication, validation, and limitations" do ?
The fact you can get a certificate without understanding more about the language than 'I don't like the syntax' is kind of laughable in terms of what the "certificate" must have covered. If I'm right about the part of the world you're coming from (given the 'third world country' comment below), would go a long way to explain the quality of the "blogs" and code that come out of companies that way. Personally, I hate Javascript's syntax and laxity (and Node on the server is as much as a perversion of nature as PHP on the client), but for front-end, browser applications, it is damn good at what it does - PHP does the Web, and it does it fast, cheap and reasonably well. I'd never use it for a desktop application, that's where Java and the other compiled C-style languages rule the roost, and while it can be used as a scripting tool, that's where I find Python(or plain old bash) works well. PHP is free to run, with no licences, and easy to configure to run on almost any server environment. Wordpress is incredibly popular (\~30% of all websites) and more generally, \~75-80% of the internet runs PHP of some shape, there's a huge open source community and it's also easy to learn/teach the basics, with no lengthy compile process - just write and run. All of these things make it a popular language, because small/medium companies do not have the wherewithal to run multi-disciplined development teams, so if they can do their internal systems, products and marketing site with one language, then why not? Sure you can do that with other things now (Nothing to stop you using a Java or C-based API, or running Node for every-damn-thing), but PHP got there first. TL;DR: Don't disregard an entire language just because it's not appealing to your sensitivities - that's like saying you don't like hammers, and only want to use your screwdriver. It's petty and shortsighted. Sure, you can bang that nail in with the butt of the driver, but it might not be the most effective tool available for the situation.
Gladly not, we have a static DI container with hardwired dependencies through setters. The sheer amount of traits (and hence setters and dependencies per class) are what concerns me most.
phpmailer + google account mailgun
Sparkpost is good
Sparkpost was good before they changed CEO.
Oh surely it will be a treasure of wisdom.
Damn. Just looked at your post history, and wish I hadn't taken a few minutes out to comment to an out-and-out troll. You're "studying" courses which cover Day 1 of any new programming language (effectively, the syntax) and calling it done, and thinking that you're god's gift to developer-kind while baiting various subs for some other blogshite you want to hand out? Whee, you can do ASM, You're so smart! (It's not hard, by the way, it's just long winded, that's why people use high level languages in the first place - speed and maintainability). Go learn some actual computer science, rather than the shallowest toe-dipping into the varieties of syntax, then reevaluate how much you thought you knew at this point in time.
Mailchimp/Mandrill were the answer until made the price laughably unreasonebe. but there are competitors like Mailgun. Google for "trnsactional emails"
I like to use a ReflectionClass and the __call() magic method to handle stuff like this. Given that the properties you're using getters/setters for should all be protected, you can whip up a trait with a function to determine if the property is protected and use __call() to automatically handle the getter/setter for any protected property. In your actual code you just use the single trait, declare whichever protected properties you want, and you're done. A very basic example would be something like this: trait TestTrait { protected function isProtected($propertyName) { $reflect = new ReflectionObject($this); $property = $reflect-&gt;getProperty($propertyName); return $property::IS_PROTECTED; } public function __call($method, $args) { $type = substr($method, 0, 3); if (!in_array($type, ['get', 'set'])) { return; } $property = strtolower(explode($type, $method)[1]); if (!$this-&gt;isProtected($property)) { return; } if ($type == "set") { $this-&gt;$property = $args[0]; } else { return $this-&gt;$property; } } } class TestClass { use TestTrait; protected $value = 'demonstration'; } $a = new TestClass(); echo $a-&gt;getValue() . "&lt;br /&gt;\n"; $a-&gt;setValue("testing"); echo $a-&gt;getValue() . "&lt;br /&gt;\n"; Obviously you'd probably want to handle extracting the property name in a more reliable fashion and you might want to build out some additional logic for handling different types in the setter, but this should give you the gist of it. In your use case you'd add the TestTrait to your classes and replace all of the property/getter/setter traits with either protected property declarations or other traits that only contain those declarations.
Composer uses it behind the scenes, so... the same?
I used to try to do it myself, but use Mailgun now.
I mean, that was always my assumption, but I was hoping for an explanation from OP.
Sendgrid, SparkPost, Mandrill, Mailgun, Postmark, Mailjet
It's just an introductory course. The Python equivalent, for example, doesn't exactly get into Deep Learning models, if you know what I mean. The developers I've met (only 3, I think) all spoke English as a second language. Sort of. And wrote English accordingly. Thanks for the explanation of Python's rise. Logical. I think I'm biased, in part, because I did a lot with VBScript back in the day. Really enjoyed it. Plus, I'm studying many languages, which lends itself to comparing and contrasting. I often find myself wondering why any one language, not just PHP, would feel it necessary to do something radically different from every other language.
What was wrong with the `implode()` one?
I'd like to check how Exakat works on this code base (Disclaimer : I'm not asking for the code base). I rarely find trait-heavy situations, so that could be a &amp;#x200B; In particular, exakat extract the traits hierarchy, which could be helpful to you here (which trait extends which other trait). That may help weed out some dependencies. Could you install exakat ([https://exakat.readthedocs.io/en/latest/Installation.html](https://exakat.readthedocs.io/en/latest/Installation.html)) and run the audit? DM are open, or Slack.
This is new tutorial for mongodb CRUD [https://www.phpflow.com/php/crud-operations-using-php-and-mongodb/](https://www.phpflow.com/php/crud-operations-using-php-and-mongodb/)
I have, in multiple occasions when I've migrated setups from ec2 to ecs using siege, taurus/jmeter etc it's one of the first benchmarks I do to ensure qos baseline isn't affected. 100% slowdown feels like xdebug is on tbf or opcache is off.
There are *much* better libraries to deal with money, such as moneyphp, which properly implements the money pattern and handles large numbers, currency conversion, and formatting.
I have, siege, taurus/jmeter etc using volume mounts on laptops and aws. 100% slowdown feels like xdebug is on or opcache is off.
200% depends on the use case. For regular php development, I can't think of a use case where I would need a whole system instead of just the bits required to run php.
Two options: 1. Use something like [mailgun.com](https://mailgun.com) (free to some extent) 2. Send the mails yourself, but test them with [www.mail-tester.com](https://www.mail-tester.com/) for things like DKIM, SPF, etc.
Thank you! I already use docker for other languages but for web development I want just a simple vm-like container. I'll consider running my IDEs on the host.
While I agree that you _really_ need to use a proper library for handling money, I thought at least one of the bundled formatters used the built-in `money_format`. It's possible I'm mixing up some JS package though.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
The Net Ninja at youtube: [https://www.youtube.com/watch?v=pWG7ajC\_OVo&amp;list=PL4cUxeGkcC9gksOX3Kd9KPo-O68ncT05o](https://www.youtube.com/watch?v=pWG7ajC_OVo&amp;list=PL4cUxeGkcC9gksOX3Kd9KPo-O68ncT05o)
I think a decent mail server setup with an FQDN and with SPF, DKIM and DMARC records should be enough. As long as you haven't been flagged yet and your mails aren't full of spam words I don't see any reason why you'd end up in spam.
I would combine common traits in other traits (yeey more traits) and create abstract classes that already use traits, even if not all children use all the dependencies it will be much cleaner.
Thank you for noticing the documentation and for your comment. :)
You could try Project Euler - it is language-independent. Once you figure out how to execute a PHP script, you'll have to start digging into conditionals, recursion, etc. to solve the problems. It's also just good brain training.