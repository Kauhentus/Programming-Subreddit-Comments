Let's try all three at once, for fun.
That's exactly the point, you CAN'T be consistent by doing this. The only time you can get away with this code is when there's only one statement in the block... in every other instance you have to use braces... this practice is *entirely* inconsistent!
My solution to this lately has been to do AJAX submissions with the action URL specified in the JS, because then if JS is disabled, you get no submission. Yes, not the most accessible method, but I think it's an interesting theory.
Nope, the CURL request would be entirely from within your system. You're posting from a PHP script to another system. The client only sees your form.
According to PEP 8: &gt; Use 4 spaces per indentation level. &gt; For really old code that you don't want to mess up, you can continue to use 8-space tabs.
Everybody has [standards](http://framework.zend.com/manual/en/coding-standard.coding-style.html).
im using reddit mobile right now and i cant up dat this post but i do see one problem. This is could be hacked with a brute attack. I will springle some numbers into this when i get a chance
I don't see the point of intentionally reducing the entropy of the password. It would make more sense to have the full range of letters, numbers, and symbols available. Also, use mt_rand() - rand() is a lot less random.
Thanks for the reply. I was trying to make this as simple, yet secure as i could. I see i need to add some values that are not in the email to protect against brute
You've significantly limited the possibilities for characters. Using only characters that people have in their email addresses also gives attackers foreknowledge of what to look for, if they have a specific target. One I've used before (this particular version was thrown together by a coworker), while hardly statistically perfect, is works well: /** * Default character set used for passwords */ const DEFAULT_PWSET = "0123456789ABCDEFGHIJKLMOPQRSTUVWXYZabcdefghijqlmnopqrstuvwxyz!@#$%^&amp;*()~-=_+/?[]{}&lt;&gt;"; /** * Generates a password with the specified length * @param int $length * @return string */ public static function generatePassword($length) { if (!is_int($length) || $length &lt;= 0) { throw new UserException("Length must be an integer greater than 0"); } $newPassword = ""; $charset = str_split(self::DEFAULT_PWSET); $charsetLen = count($charset) - 1; for ($i = 0; $i &lt; $length; $i++) { $index = rand(0, $charsetLen); $newPassword .= $charset[$index]; } return $newPassword; } We use it simply for password resets, and force the user to immediately change their password.
The way you're constructing the string isn't horrible, I just wouldn't use the email address as the character pool. $pool = "abcdefghijklmnopqrstuvwxyz0123456789!@#$%&amp;*"; might be a bit better.
You should probably look into http redirection replies ([3xx](http://en.wikipedia.org/wiki/URL_redirection#HTTP_status_codes_3xx)), if you're able to install php extensions on your server. I did not look into the matter carefully, but the PHP site has documentation of a '[http](http://ca2.php.net/manual/en/book.http.php)' extension, which includes the function [http_redirect](http://ca2.php.net/manual/en/function.http-redirect.php). CURL does seem to be required, so a simpler solution may be available.
It happens to everyone in every industry at some point. Managers (some not all) rise often because the people who are actually capable fo the job are too valuable actually doing the job where the guy who bullshits well and is at best mediocre is a natural fit for a lead/sales role. I'm luck, our company has one developer (me) and one IT guy (me) and I have alot of discretion.
Back to amateur hour. Here, let me help you out. * Don't use rand(), Use mt_rand(). * Using str_split is over-thinking the problem. Access indexes in the string instead ($string[index]). * While using upper and lowercase characters offers more entropy, it confuses users. Often this isn't worth the hassle.
This probably isn't a very secure method, because any determined spammers could make a dummy copy of your webpage (all resources linked to your site except the javascript) and just use an edited copy of your script. However, you could do something similar with server-side validation of an AJAX request, responding with a (temporary) GET-style URL. On most browsers you could then just set location.href to the new URL ... I don't know if that passes the "works on IE8" test, but I think so.
I read that as *...and I have alot of discussions.* I am tired after conference calls all week :-( (also, you double posted)
I think it would be fine if he was in lead or sales, actually. But right now he decides to do half a site in Dreamweaver and when something slightly functional is required he passes it to me. I pretty much have to start again with his HTML before I do PHP work or Javascript just shits itself with the DOM tree. Then we go into a meeting and: "**We** made X happen look how cool it is!"
Happens everywhere. I've spent most of professional career working under people who either were not moderately intelligent or didn't know how to program (sometimes both). Luckily I work under someone who can program, who is smart, and whom I can learn from. This is one of the big things to look for when jumping ship.
Not if planning on using any sort of autoloader. For a simple one-off project, sure... but generally those don't go beyond a single class or two anyway. Anything more than that and it gets parted out for autoload purposes.
I recently got hired to do some PHP, first task is updating an older site (done by a former employee) with some additional features. Oh god... the horror. Table formatting OUT THE ASS. I'm talking nested for loops of tables/table rows. There was a navigation bar that pulled categories from an xml file, each individual navbar was a seperate table. Transparent gif's EVERYWHERE for whitespace, basically zero css. Every table had different formatting in the html. On to the actual PHP: used $_REQUEST exclusively. Total clusterfuck of session variables. Multiple two or three dimensional associative arrays all named with 1 to 3 letters. Doing comparisons against a "y" or "n" string. He tried to make some sort of file handler that would include the needed content, but that was nested in another file, each using variables that are modified or created in the first file. You get the idea here I ended up just killing most of the site and reworking it.. but due to time and consistency issues I didn't have the chance to just rebuild the whole thing. The first chance I get thought, that thing is gone.
Not if it's production code. It creates unnecessary overhead if your code is loosely coupled.
Very rarely. I have a few subclasses of exception that have no body that are all grouped together into one file but otherwise it's one class per file. 
Only if there is no possible way I will ever need to call the other class outside of the parent class that the file is for. That pretty much limits it to strange data types or class specific exceptions.
I'll admit I do at times when I'm lazy. But only if the primary class (loaded by auto loaded) is the only class that uses the class I'm putting in the same file. If any other class use it then no.
Using md5() in your updated set has just limited your character set even further. You're down to a space consisting of only 16 characters [a-f0-9]. In your original version the variety of characters was smaller due to the typical 'word-like' qualities of email addresses, but the character set was much larger. [A-z0-9@_+.-] (plus potentially others) were available for use before, but now they're not.
There was this guy once setting up a php project that involved storing dates in the database. He used m/d/y format to store them and figuring out how to pull date ranges was a pain. Luckily I'm a much better programmer now and know better.
Myself, 5 or 6 years ago. Sometimes I look back at old code and get angry with myself.
Sounds horrible. People keep insisting on using static / inline code makes me go nuts. Kinda similar situation with one of these sites my boss has made, where he has static html for the menu and footer section of the page. For 100 pages. No includes. Static html for the news section too. Adding a news article requires manually copy/pasting the last article file, changing the title and header tags, pasting the new article in. Then manually going to the news archive and adding a new div and paragraph with link to it. And then finally manually removing the oldest news link off the main index.html page and creating a link to the new article.
I like how the responses in this thread are making me consider whether the OP may be unwittingly talking about himself as well.
I feel that if you don't do this, you aren't a good programmer. You always need to try harder to make your code better.
Every sentence of this reply just made me feel worse and worse. I just don't get how someone can do all that work and not think "there has to be an easier way"
My thoughts exactly.
The rage from all these things has brought me to post here and see what others think, and possibly look for another job, even though I haven't been here that long...
So many "wtf" stories, but this one takes at least one of the available cakes: &lt;?php $max_width = 1024; $width = imagesx($image); while ($width &gt; $max_width) { $width = $width - 1; } ?&gt; &lt;img src="/images/photo.jpg" width=&lt;?php echo $width; ?&gt; /&gt;
I've only been doing php for less than a year so I'm still learning, but reading these stories really motivates me to go read best practices and standards, just learn the best way to do anything I can. I don't want to be *THAT* guy
OP is not talking about himself, OP has had some code/ideas that deserves to be in here tho.
heh. that took a second until I had a kazaam! moment and realized the programmer could've just set width to max_width in a condition block. I think the dev was just trying to have some fun lol ;-)
I had a job programming in college and they hired this woman who supposedly had a MS in Computer Science from Purdue. She barely spoke English and knew almost knowing about programming. They fired her when they gave her the simple task of writing a web page to display a directory of internal contact numbers on our Intranet. First she took a week to create a page indexed by letter that had 26 if statements (if $letter == 'a' then db.execute("SELECT * FROM table WHERE LastName LIKE 'A%'")). Then when they asked for a simple search feature too, she started hand-coding every name in the database with if statements. The week after she was fired several of us went out to lunch at a Chinese Restaurant and she was working as a server there. It was a very awkward lunch. 
People who use variable names that provide ZERO clue of how they work, like "TallOrShort" or "OnOrOff", or use bosses names because they are pissed off "JohnIsStupid". The first thing that I did on the project was rename all those moronic variable names.
Another person never "range check" and "bound" any input values from a user. Even after I started on the project, they kept doing it, I'm not sure if the person was a moron or lazy.
One new person kept saying during discusions and arguments "Well I have a degree from XYZ thus I know I'm right". XYZ is a very well known important big east-coast college. Any way, we kicked this persons dumb ass to the curb in less than 6 weeks. If anyone ever uses this type of logic again during a discusion in the future, I will make it my priority to get them pushed out the door. 
agentmd is spot on, as long as the URL is publicly avail it'll keep getting submissions. Does the client have control over their web server? I know in Apache, you can setup an .htaccess rule so that it can only allow traffic to your IP. That'll allow you to be the gateway to the offending form. I'd be surprised if IIS and the sort don't have that functionality too. edit: added webserver specific stuff
This. I think about the companies I've hurt. I've tried to do good all the way through, from start to finish, but it could have always been better. I've made so many bad choices in design schemes, so many bad choices that could have been stopped if I knew better, or had just seeked out the knowledge better.
wow... That is awkward.
He was partially right, but I'm going to assume that he didn't use the DATETIME data type and used a string instead.
We hired a kid directly out of college for the network side of things and light programming work. * He copied and pasted code directly from the Internet. I found code with Dutch comments and variable names in the code, and found the exact website he lifted the code from. * He didn't understand what a function was and why you would use it. One script had the same block of code copied/pasted 6 times in a row. * I was trying to ween the company off of Dreamweaver and use a proper IDE. Part of this was to implement a PHP templating system instead of the one in Dreamweaver. When my coworker couldn't understand how the new system worked (despite my attempts to teach him), he complained to our boss that I was ruining the website by slowing it down with the new template system. My boss didn't bite, but I got chewed out for not helping more. Keep in mind this kid got hired because he said he knew PHP, and that during college he almost won a programming tournament.
if you can do 10 hours of work in 2 hours - don't bill hourly - if you require 10 hours of coding to do 10 hours of work then bill hourly. in the end if you can work 24hours for 7 days - and finish the project i'll pay you that - assuming good quality work - and i'll suspect you only worked 8 hours a day since you are that good. bottom line: getting things done quickly and adeptly is more important so you should bill for the project. if you suck - then bill hourly since you do not fully understand the scope of the project (this is why you have an analyst scope the project first). not saying you suck or not - i don't know you. but that's how i see it. plus you might bring on 4 more people so your hourly rate *4 - be sure to tell the client you are doing that ahead of time. 
This wasn't a PHP project, but a vendor one we had spent way too much money on. We needed some answers for an audit, so we asked the vendor some questions. One of them was what hashing or encryption algorithm they were using for the passwords. They said they were encrypted in binary. So I cracked open the DB, and noticed that it looked like hex. No letters higher than F for anything. Plugged some of the passwords into a hex to ASCII converter, and sure enough it worked. Went back and forth with the vendor, and they swore up and down that it was binary, and safe. We ended up having the auditor make a rule that we only accepted SHA384 or higher for hashing, and AES256 or higher for encryption. The vendor said we would weaken the security of the system with this rule, but we made them do it anyway.
Can you maybe explain this in more simpler terms? I'm interested but ignorant :(
This wasn't in PHP but a programmer I worked with was falling behind on our semester-long project. He assured us he would do his part on time. I tried to tell him what all he had left (which was creating a GUI and handling different events in Java) and he was all like "yeah yeah, I know. GUI stuff. It's very trivial." Long story short he didn't submit the code and still got the same grade as the rest of us. tl;dr self-proclaimed hot shot programmer couldn't figure out "trivial GUI" stuff and left us all hanging
wow you have to be really retarded to do that.
Guy was a terrible cold fusion programmer. I really can't remember all the little things that made me want to bang my head on the wall. I had just stated the job. I looked at a site in production with a doctype, and down to somewhere in the head section at the top of each page and then the real doctype started. It was taking him hours how to paginate on the last page where there could be less than ten results. I said just set a variable to 1. Increment it by one in the loop and then you'll have the final amount in the end. A good hour went by and he couldn't get it working. When I looked at his code and showed him where to put the "increment by one" code. He said "oh well thats not the loop thats the query."
Hex isn't encryption. Anyone can decode it easily. The vendor is an idiot for saying not using hex for encryption would weaken the security system. 
Sure. Generally for passwords, you will use a one-way hashing algorithm like SHA256 Or something higher so that 'mypassword' gets tuned into gibberish. One-way hashes are generally hard to reverse, so if someone gets your database, they don't have the exact text of the password, just the hash. In some more rare cases, you might need to encrypt the password. The gibberish is stored in the database, but the algorithm used allows you to turn the gibberish back into the actual password. Like the hash, if someone gets the database the passwords are reasonable protected as they would need to steal the encryption key ad well. Microsoft SQL Server has an option to store data as hexidecimal instead of straight ASCII. So 'mypassword' gets turned into '4d7970617373776f7264'. This isn't secure at all because anyone can convert hex to ASCII by searching the Internet. So from a security standpoint, this isn't secure at all. The vendor claimed that binary (1's and 0's) was how the data was stored, and they binary was an encryption method... Which it isn't. This was a fortune 500 company that we were buying this software from. The Indian outsource programmers had no idea what they were talking about.
Sounds like you're describing me when I was 18, except for the fact that I was put in charge of my own project.
&gt;I think the dev was just trying to have some fun lol ಠ_ಠ
Psh. That's nothing. (I save this little code snippet, and whip it out any time people start talking about "bad code" as if they've actually seen bad code...) $query_login="select * FROM user"; $result_login = mysql_query($query_login) or die("Query failed"); //$login_check = mysql_num_rows($result_login); while($row=mysql_fetch_array($result_login)) { $username=$row["username"]; if ($username==$username1) { echo "&lt;script&gt;"; echo "window.location.href='login_error.php?rec=qq';"; echo "&lt;/script&gt;"; exit; } }` Also, one time I saw a guy write out: $var1 = 1; $var2 = 2; $var3 = 3; $var4 = 4; $var5 = 5; $var6 = 6; ... $var100 = 100; Yeah, apparently he didn't understand the concept of arrays.
&gt; static $Yaf_Session-&gt;_instance ; shit.
file_get_contents is better suited for reading local files that you own. It'll work with URLs but their are other things in PHP similar but that doesn't mean you should use them. cURL is going to be your better option.
wtf?
Unfortunately, I think that CF's ease leads people to be complete dumbasses with it. Not the fault of CF, it's just so easy to use that braindead people occasionally slip in as "programmers"
Probably going to do something like this. How do you handle the buffer? 1.5x? 2x? etc...
I was 25, was made the lead of the web side of a department. I wrote the framework for the entire thing from the ground up, but admittedly I was still pretty fresh. Hell... I'm still learning things. My boss hired a guy to work under me that was 45+, which I had interviewed and told him wouldn't work. He was brought in on a new project, and I told him we were doing the whole thing OO. Of course management undercut our time limit, so I couldn't 'watch' him as much as I would have liked to. I made it simple, he would take care of writing a virtual warehouse, I would take care of the rest. He would create classes, to which everything was a static member. I tried to get him to change, to do things in a proper OO, but he kept telling me I didn't know what I was talking about. I kept asking my boss to back me up, but he kept telling me that as long as the code worked, he didn't care. Long story short, he created the worst blocks of code I have seen till this day, and the code never worked correctly. He had to baby sit it, which ended up becoming his job, to make sure things kept going through the system without trouble. If I remember correctly, he had a static function that was 2k lines long, most of which was a switch statement. I quit about 6 months after we launched the system. I still get emails from people there telling me how horrible the system is, or at least the warehouse side of things. So... still not sure if it was my boss, which enabled him, or that guy
Hell... I have code from 6 weeks ago that I often get pissed at myself for when I need to revisit.
Thats the thing, It takes me 10 hours to do 10 hours of work, so that is what I charge, also the hourly rate is very decent for them. I guess they want a list of completed things before paying, instead of just paying me each month regardless of what is completed or not. Maybe more incentive for me to get it done in a timely manner?
well... it was Purdue...
I was once told to calculate the volume of the Earth's oceans in an interview and I used a similar argument when I was stating the radius of the Earth. It was an Astronomy degree, they didn't believe I knew the radius of the Earth, and I was interviewing as a software engineer so I think I was justified. Still didn't get the job though.
Ah, I get it. I thought you meant you go through and obsessively reformat the code for fun, which would piss off your peers if it's their code. That's a decent rationale, though.
Two if them come to mind: 1. Had a masters in CS and could barely write any code at all. even when given the exact answer in code form it took him days to finish. He would pour over the final code given to try and understand it and improve it, or assumed it still wasn't done even though he was told it was. 2. He was given all documentation for the code base and apparently didn't bother reading any of it. So decided to code things his own way and broke existing conventions. After learning my lesson about him I made sure to advise him of conventions before he started a task and I was told under no certain terms would he be doing it the way I asked. neither person was ever let go either.
Wait, isn't this /r/PHP?
What if you're storing birth dates? Not everyone was born after 1970 .. I don't think this is too frowned upon; considering you can't store a timestamp with a value before 1970.
OP said "worst programmer" not "worst PHP programmer" and by most PHP devs sentiments, we could automatically nominate all CF devs for worst dev.
That kind of up to you, i guess the more confidant you are the lower you can go. If you feel confidant in your estimates then mabye 1.2-1.5x? However if your not confidant or there are still a lot of unknowns in what your building or there is going to be significant "learning time" in the project definitely 2x or more. You dont want to have to go back to them and ask for more money because its not going well, clients never like that =/
&gt; but once it's in the database it's pci compliant now that's funny. 
What the hell was it trying to achieve? List of Users?
You could require javascript to be enabled; which many web spiders cannot handle. Basically, set the form action to be blank so the web spiders don't know where to post to. Implement an onsubmit handler to call a javascript method. From here, you can perform client-side validation, set the action of the form (if the form values are valid), set the form action, then submit..
In my actual source I have braces and there is more going on, I just wrote this quickly as an example and was feeling lazy lol
Your password is "Mypassword". 
Your if statement is checking the RESULT of the query, not the returned value(s) from the query. Since your query always fails due to incorrect WHERE syntax, the result of the mysql_query function is always false, thus your "You are derp" string is always echoed. Fix the query, and you are only half done. Now you are returning a MYSQL RESULT RESOURCE (instead of false) that you'll need to capture in a variable now that your query isn't failing. You need to pull the data that was returned by the original query out of that resource by feeding it to the mysql_fetch_assoc($result) or mysql_fetch_object($result) functions. Since those functions will return either an associative array of results from the query or object containing the data from the query, respectively, and FALSE once you've exhausted all rows returned, you can put these functions in a while loop: while ($aRow = mysql_fetch_assoc($result)) { // $aRow contains an array with a single element 'mn' mapped to the value stored in the database for the row we've currently pulled from the result list } Change your code to this: $user = "SELECT DISTINCT mn FROM medl WHERE mn=1"; // fix the sql problem (remove IN) $result = mysql_query($user); // capture the result set in a variable if( $result !== false ) // if the result set isn't FALSE (indicating query failed) { while ($aRow = mysql_fetch_assoc($result)) // get every row returned, may just be 1. { if ($aRow['mn'] == 1) // if the mn value in the current row is "1"... { echo '&lt;br /&gt;You are herp'; } else // if the mn value is NOT 1 { echo '&lt;br /&gt;You are derp'; } } } else // query failed... assume derp. { echo "&lt;br /&gt;You are derp."; } 
Or you will remember it but cant exactly remember the name. I do that all the time and end up with vague, shot in the dark, google searches for libraries that "I know I saw somewhere"
I inherited responsibility for a system that was designed by my predecessor. He commissioned a programmer to write the interface, which was rather buggy and would crash at least once a day. My predecessor chose to live by this by checking the interface daily. I saw this as unacceptable and tried to get the programmer to fix his software. It took at least six months of me emailing and calling him several times a week before he finally agreed to fix it. I've never felt like such a nag before, but now the software is completely autonomous; I haven't checked it in months. 
In graduate school on a CS project, I had a girl give me her code in MS Word (not a text document)...which she never compiled and I had to throw out. A guy straight out of college with a CS degree who couldn't write a for loop even tho his resume listed C/C++. Tried to minimize his impact by having him fix numerous casting warnings but he managed to introduce more bugs doing that than he ever fixed. I was in such a disbelief that I checked that he didn't falsify his degree. Another guy code was so convoluted with pointless and useless dead code. It was like a maze with dead ends. He just quit coming to work one day. We just looked at it during a code review after a few minutes of WTFs we declared the entire module should be rewritten as it had routines doing nothing, unused variables, needless casting, etc. Did I mention the last two were on the same project with me?
&gt; neither person was ever let go either. They never are man...they never are. :(
That's only if you're storing a timestamp. DATETIME, for instance, can store dates since 1000. http://dev.mysql.com/doc/refman/5.1/en/datetime.html
Myself a week earlier.
mysql_query("SELECT * FROM `records` WHERE `name` = '" . $_GET['name'] . "'"); I had to stop myself from correcting that.
One time I went to a job interview on 40 hours of no sleep. I used XOR instead of not equal because I was that tired. The interviewer said I got bonus points for that but I still didn't get the job.
I was actually looking at code I wrote about 3 years ago. I cannot even imagine what was I thinking when I committed that code.
Well... I'm pretty new to this, so aside from the awful things I've caught myelf doing, I do have two guys to vent about. Guy 1: Thinks he's super talented, but he's just okay, kind of like me. He's over zealous, implements strange conventions without discussing them, and uses his seniority as an argument when I disagree with his methods. Also ridicules me to boost his confidence or something. He often breaks projects because he just isn't careful at all and is incredibly over-confident in his abilities. Uses incredibly convoluted methods for doing simple things. Guy 2: *Extremely* fast developer, extremely knowledgable, and extremely lazy when it comes to the details. I'm knew to this stuff - I started programming last year after several years of frontend work (html, css, javascript, graphic design) so I can't say too much with absolute confidence... But shit, the more I learn the more I can't stand to look at some of his work. I deal with it daily. He wrote a search function that is absolutely riddled with fairly brittle logic (Using logical or's and and's without fully understanding how the potential variables could be interpreted, primarily) that was plaguing us with weird results for months. It was loaded with oversights and it appeared that he never went through the code to actually think about what it would do. Another example is an extremely sensitive form that was validated using a method that went something like 'foreach fields as field, make sure this shit isn't empty and we're golden'. That ended up costing us a lot of money. The projects he built were unfortunately pretty massive, so this shit is everywhere. edit: Oh yeah, that form was for the shitty search function. Haha. I think I'm just whining now.
*Don't* use sha[1-9]+ or md5 for passwords! It's been web programming's greatest error for way too long. These hashing algorithms were originally designed for *speed* and have always been bad choices for passwords, but it's only caught up to us now, in the days of GPU cracking. Use [bcrypt()](http://stackoverflow.com/questions/4795385/how-do-you-use-bcrypt-for-hashing-passwords-in-php) with a high work factor instead; even if your table got stolen it's probable it wouldn't be worth trying to brute-force. Nine times out of ten you should just use [phpass](http://www.openwall.com/phpass/), which is very good. [For your consideration](http://howsecureismypassword.net/), if you don't believe me.
- In a system where embedded scritpting language was vbScript, all functions returned result via function argument, not by assignment. - Altered system's core functionality, so that if URL contains a special parameter, major security checks aren't performed. For convenience.
http://www.cueball61.com/lookup.php?name=%27+OR+1%3b+DROP+records%3b+--
As a current Purdue student about to graduate from CGT &amp; CS I must say that is disappointing to hear. I believe it might be due to the fact that she had a MS from Computer Science and not any undergrad here. I have seen excellent programmers in the Masters and PHD Computer Science here at Purdue. I currently have a roommate from Germany doing PHD work at Purdue dealing with security. However, I have also come across a Comp Sci Grad Student that really only focused on algorithms and didn't understand the programming side. Edit: Then again I also ran into a kid who didn't know what FTP is.... he was a CS major.
2k is harsh. I get to deal with 100 - 1000 lines per method. I always try to find some workaround not to have to alter that code. Up to 7 levels of nesting, multi-dimension arrays with dynamic keys. Ugh...
Well, the absolute worst would have to be the girl we not-so-affectionately referred to as "Cow-orker" at my last place of employment. (Which may have had something to do with the 400lbs of pure fat.) She was the textbook definition of "unconsciously incompetent". She was constantly trying to do things well beyond her skill level, and fucking them up. She would never stop to ask for help because she thought she knew what she was doing. She was poison. Everything she touch turned to garbage. She tried to modify some old JavaScript of mine. Months and months later I was asked to go make some other changes (after she was unable to do it after several days). I looked through the code and ended up having to throw it out and rewrite it all. She is a brute-force programmer. She just went and changed or added various lines until it kind of did what she wanted. Unfortunately, the code was littered with lines that did nothing, or broke under certain conditions because she didn't know what she was doing. She wrote CSS the same way. She'd just fiddle with things until it kind of did what she wanted, then cross-browser test and continue doing it. This result in horribly bloated and disgusting CSS. She once managed to write an over 400 line drop-down menu. She asked my competent co-worker for help because it wasn't displaying correctly in IE7 or something. He took one look and re-wrote it in something like 20 lines. Worked in all the browsers. And her incompetence didn't just extend to programming. I walked into the office one day and walked past the server room, stopped, and took a few steps backwards and looked - she was in there typing on some keyboard. Walked in and she had the monitor for the fileserver on and at a root login prompt. I said "... Hey. Watcha doin'?" "What's the root password for the server?" "Why?" "I don't know." "Yeah, if you don't know you don't need it. And that's not the file server's keyboard. You've been typing on the VOIP server." She just walked away. She did try writing some PHP one day. Came back and asked me where some class in our CMS was. "Why?" "Well, we're having this issue with &lt;totally unrelated thing&gt;." "So why do you want to find &lt;class&gt;?" "I don't know." "Yeah, that's class isn't going to help you. Just let me know about issues like that and I'll fix it." "But then how do I learn!" "On software I don't have to support on a couple hundred sites." Neither her nor the other girl could ever seem to figure out how file paths work. They had endless issues trying to use include/require for a common header. Apparently "../" is fucking voodoo. Every day was a fucking nightmare with her. And the second worst programmer I've ever dealt with would probably have to be half of r/php. I see way more misinformation and garbage here passed off as answers and "best practice" than anywhere else, and the occasional bit of good information I do see is usually buried at the bottom. This subreddit is more or less a cesspool of festering idiocy.
I'd say checking if the username is already taken.
&gt; It would take a desktop PC &gt; About 1 billion years &gt; to hack your password I'm cool with that. ninja edit Adding a "!" at the end ended up with &gt; It would take a desktop PC &gt; About 13 trillion years &gt; to hack your password So yeah, I guess it's secure.
&gt; In some more rare cases, you might need to encrypt the password. No, you don't. You might need to encrypt something else, but you should never encrypt a password.
&gt; Altered system's core functionality, so that if URL contains a special parameter, major security checks aren't performed. For convenience. wtf.
&gt; he complained to our boss that I was ruining the website by slowing it down with the new template system He was right. Templating systems are pointless and slow down the website.
Something similar to my own ultra-secret password yields similar results, but the thing is your users are unlikely to be as conscientious with their passwords, no matter how carefully you try to force them not to be. If you make it too easy, they'll use shitty passwords. If you make it too hard, they'll just mash the keyboard and write it down on a Post-It on their desk. You should make the computer work as hard as it can to compensate for human fallibility, and use a hashing algorithm that was built for one-way hashing that is exceedingly expensive to crack, not one that was built for quick checksums. 
As others have mentioned, the files *will* be included conditionally like that, but if you're worried about performance it's a bad idea to include things conditionally. You will probably see a very, very tiny performance improvement when you're not using opcode caching... You'll save the time of pulling the file from your operating system's cache, tokenizing and parsing it again which is miniscule. Anyone who cares at all about performance is going to be using an opcode cache for PHP, and conditional includes [do not play nice with caching](http://stackoverflow.com/questions/1396501/do-php-opcode-cache-work-with-autoload/1397160#1397160). With the exception of an absolutely *massive* file that you *know* will always be run on a server without opcode caching, the right answer is **always include your files unconditionally**.
Just as bad as the people who use the filename "new" as version control, then you end up with NewNewNewFunctions.php
You know, I've never really seen what I would consider to be a "bad" programmer. I've seen folks with different skill sets, and folks with less experience making mistakes that would be obvious to a more experienced person, but I've never really *seen* a "bad" programmer. Honestly, I think most of the "bad" programmers people complain about are folks with different skill sets that somehow offended the person who considers them bad. That being said, I did recently have a fairly bad experience with a certain individual. I do freelance, and I was contracted with a company that had a "tech lead" (and I put that in quotes) who was a decent programmer, but severely inexperienced when it came to managing projects. On top of that, he was ego driven to the point of being blind. In the 7-8 months I was there, The only time I could ever get him to agree with an approach that I thought best is when I didn't mention it. Instead I'd recommend everything I didn't think we should do (worked like a charm, I was a bit surprised the first time I did it). I think with experience and a few failures he could be good, but unfortunately I encountered him at a stage in his development as a software developer where he just wasn't competent at his position. The decisions he made actively hurt the productivity of everyone on the project, I won't go into details, but it was pretty severe. As a result of this experience, I've become convinced that programmers don't make good tech leads. You need someone who is familiar with programming, but after seeing how well he did, I almost think it would be better to have a good manager who has a decent grasp of programming, and enough honesty about him to trust the developers under him when they start telling him something. That experience most definitely taught me a few things.
[The Peter Principle](http://en.wikipedia.org/wiki/Peter_Principle)
Started work for a website when I was a student who outsourced development to a "professional web consultancy" who had written it in Classic ASP (with an Access DB). I asked them to make a minor change to the footer, and they told us that would cost £3,000 and take 2 weeks. After much digging found out they didn't know what includes or functions were and every single one of the 500 pages repeated every other page, database connections, headers, footers all replicated 500 times. Every line of their code was scrapped and it was rebuilt from the ground up.
It depends on why you're doing multiple hashes. SHA1 is computationally difficult to encode, and is much easier to decode, thanks to specialty hardware and sites like http://www.md5decrypter.co.uk/sha1-decrypt.aspx. If you're attempting to protect the original password, it might be more efficient and secure to use something like crypt() using SHA512, with a few thousand rounds, and a salt sourced from urandom.
Interesting... I worked with a guy who designed our whole framework from scratch. It was fairly decent, but lacked the capabilities of your standard MVC framework. I've seen so much bad code in my years of being a developer that I often question the human mind's capabilities. I can't even begin to describe the horrors I've seen... All programming logic aside, my main pet peeve with coders is lack of consistency/formatting/commenting. I don't give a fuck if you like to use single quotes or double quotes, new-line bracket openings or same-line, spaces after things or not... JUST BE CONSISTENT! Also, throwing completely RANDOM line breaks everywhere in your code is real annoying, along with RANDOM ass tabs. Realize that 99% of the time, someone else is going to have to read your code and modify it in some fashion. *edit* Also, pretty much every job I've been in, there is some idiot who doesn't know that you CANNOT store user passwords in cleartext. Mindboggling.
You can store UNIX time-stamp before 1970 as unsigned integer.
Mr. obvious!
People can rise through a career until they're limited by their own incompetence, where they then remain. *edit* someone below named this as the Peter Principle
One place I worked the app was quite slow, but it was complex so I didn't think much about it until one day I had to dive into their homebrew run_sql() function. It made a new connection for every query.
That's when you have to surreptitiously give each team member the same task to do. Time each person and draw a bar chart of cost per member. Show this to the boss and demand that pay relates to that chart. This never works, it's far more important who you play golf with and invite to your bar-b-q than actual science :(
It's amazing how some 'coders' fail to realize the computer is supposed to do the repetitive tasks. Bonkers.
haha, seen this a few times. No need to scrap the code, search and replace (with a bit of regex) can tidy this code up pretty quickly.
I my opinion no coder gets above level 'junior' until they can indent correctly while keeping line lengths below 100 chars (or 120 if we've all got wide screen monitors) Also if they have loops within loops and ifs to a depth greater than 4 I start ranting. Lol.
The idea behind hashing a string multiple times is that it takes time to try out a password. You can imagine that cracking login credentials is faster when you can do 1000 requests per minute, rather than 10. For that reason, some people recommend using the slowest possible hashing method available. MD5 in particular is a very fast hashing algorithm. However, it does not make the hashed password more secure when the above is not a factor, for example, when your user database has been leaked. Your solution might be a decent way to prevent people from finding out the original password (they might still find a hash collision), but if they know how you hash the password (by MD5'ing 100 times in your case), it might be doable to brute force the passwords. Another issue is that if I have 'hunter2' as my password and you do too, we'd have the same password hash. Only one of our passwords needs to be cracked and both our accounts would be compromised. Have you considered adding a salt to the password? An example would be: md5( $password . $random_string_from_database ); Or something like this, but I'm not convinced it'd be more safe: md5( md5($password) . $a_string_from_database ); When the user signs up, you can generate a random string and store it in the database (one per user). If my password is 'hunter2' and yours is too, then we'd have totally different hashes. Some people also use a 'pepper': md5( $password . $a_string_from_database . $a_string_from_a_config_file ); Both your database, configuration file and maybe even your source would have to leak before they'd know how you hash the passwords. Even then, they'd need to compute the password of *every single user*. Of course, as I said above (and see wshs' post), MD5 is very 'cheap' and you ought'a use a more expensive hashing function.
How do you feel about CouchDB getting a lot of flak recently?
I'm not very familiar with salt, I've tried searching it up a couple of times, but there are no good explanations on how I should go about doing it, which is a bit annoying. Thanks for great feedback.
Just for 'playing' there's nothing wrong with this, and it's (in theory) a similar idea to what a lot of hashing algorithms do with their complexity value (adjusting the 100 iterations up or down based on complexity). When it comes to production time, though, don't try and do smart things with cryptography. There are people much smarter than both of us that have spent a lot of time researching and examining these things... There may be some unforeseen side effect to this. You'd be better off using a well-researched hashing algorithm that supports a complexity value.
Not everyone was born after 1000. (Only being slightly facetious here, there is a thriving industry in ancestry programs.)
That 'we' kills me. I'm the only developer on a team of five that is responsible, essentially, for creating experimental web properties for our larger production division to replicate when we create successful things. Like a prototyping team I guess. No one else in my team knows how to do anything website related. They just kind of... Come up with ideas. Can you guess who is responsible for all the rad stuff 'we' make? Lucky for me though, they are amazing backseat developers who have the problem solving capabilities of ten thousand elite think-tanks, calculating logical wonders in bullet time. We need to do X with Y when Z happens? You can do an if thing! It'll take thirty minutes tops, everyone. Everything is under control.
What we do is generate a password with alternating consonants and vowels, then randomly capitalize one consonant. Add a number or two on the end if you'd like. This results in a *reasonably* complicated password (especially if it's used for a password reset) while still making it pretty easily memorable/pronouncable. It's an acceptable trade-off between security and usability for what we're doing. Some example passwords generated: &gt; Ladof2 &gt; jiSec2 &gt; Lahal9 &gt; Nohuy3 &gt; reNuk2 &gt; towuK2 When it comes to security, don't try and do 'smart' things... They often have consequences you may not realize. Using their e-mail account as a character set severely limits the password complexity, and causes it to approximate the same character frequency. This is not a good password. There is absolutely no reason to do this except for the novelty factor. Using characters out of an MD5 hash is not much better. You're still limiting your character set to 16 characters. And why seed it from the e-mail? It will always have less entropy than a proper random number generator. Reducing password entropy is *the exact opposite of what you want to do*. Resetting and e-mailing the password isn't really necessary anyway. Use a token and a reset page. When the user attempts to reset their password, store a token (a **proper** random value) on their account and e-mail them to a password reset page with that token in the URL. (Better yet, store an expiration as well so it's only valid for a few hours.) When they get there, let them enter a new password. Validate the token and reset it. This has the advantage of **not** allowing some random jackass to lock your account out simply by knowing your e-mail. (What's stopping me resetting your password?) It saves you the hassle of trying to force them to change it on next login, as it's already changed. It prevents their password *ever* hitting their e-mail inbox. All around better.
For reference, a lazy programmer is often a good thing, because they will write stuff that means they don't need to write it again in the future :)
Take it up with MySQL.
Everyone in that room was incompetent, "disagreeing" over a fact that can be googled is ridiculous.
This is the kind of stuff cracks me up. We have someone who implies their security consciousness is better than most peoples, yet they enter their "ultra-secret" password into a random website to get back a "score". I have no idea how long it would take to break my passwords...
I get tired of the consistency argument. If it's that important to you, start using a code prettifier and insist on a hook that runs it over files before they're checked in to keep your history sane. Problem solved. I mean seriously, if the worst thing you have to worry about in a codebase is whether or not everyone is putting a space after the opening parenthesis of an if statement, you're doing pretty damned good. If not doing so really and truly hampers your developers ability to read that code, you have bigger problems than whether or not someone is putting a space in the correct place. And I don't want to hear about the "readability" either. Your developers don't live in a bubble, every single one of them has gotten used to different styles, so citing readability is a canard. You'll never find a single style that's completely comfortable for all of them. consistency is never the goal. If you can provide an actual rational reason for preferring one style over the other (less mistakes, for example), do so. But citing consistency alone just means it isn't important.
Well, if it makes your life simpler (it will) you're typically not required to collect taxes outside of your jurisdiction. If it's not charged, it's the responsibility of the recipient to remit the appropriate taxes to their local government. So, located in Saskatchewan, I charge GST to anyone in Canada and GST+PST to anyone in Saskatchewan. Other than that it's very much not my problem. This also saves me having to pre-emptively sign up for tax numbers from 10 different provinces and try and remit it all. And trust me, when in doubt, you're better off *not* charging taxes than charging them incorrectly or charging them then not remitting them correctly. The government will give you a what for for not charging a non-obvious tax if you're a small operation. They'll nail your balls to the wall for charging taxes and not giving them the correct amount of money. (I am not an accountant. Don't blame me if you end up in FPMITA prison.)
honestly, I'd be more concerned with why so many queries are being made. Obviously I have no context, but 1 query per connection isn't necessarily such a bad way to do things.
Why not use bcrypt, a hashing algorithm which uses the blowfish cipher and has salts and multiple hashing built-in?
In regards to the last paragraph, care to link us to somewhere that is a decent learning resource?
There was a sophisticated permissions hierarchy and he couldn't use a component in his module, because the data that component held wasn't accessible for some of the module target user groups. It was a lazy workaround for poor design problem.
Worked with a guy who was completing his Masters in Computer Science. I gave up trying to help him after the 5th time explaining why javascript couldn't directly access and use variables defined in php. Apparently understanding the difference between client and server side was just way way too hard for him. He got fired, best for all concerned :-)
Congrats!
A very simplified salt would be to add a string to the password before/during encryption ----- Example: $salt = "r4nd0mstr1ng38894"; $encyped_password = md5($salt . md5($password)) ----- Basically stops rainbow tables, and also slows down brute force decryption etc
I deal with the upper and lower case issue by taking out the possibly confusing characters like; 0OI1
None that I'm particularly familiar with - I came from a C background before I moved to PHP (stopping at half a dozen other languages along the way). All my knowledge of programming concepts come from languages besides PHP. The only PHP resource I've ever really used was PHP.net itself (and then mostly as a function reference). But I think that very question is half of the problem. PHP is a language with a *very* low barrier to entry. It's trivial for someone to pull up any "PHP tutorial" and write some sort of web page. People get started like this then want every subsequent task spoon-fed. (And it certainly doesn't help that half the PHP tutorials are shit too - how many 'PHP login script tutorial' pages are there with SQL injection problems?) The issue isn't learning PHP as a language, or learning its function names, but learning how to program. PHP as a language is simple. Programming is hard. There are a lot of people that can write PHP, but very few that can really program in it. A lot of issues that crop up aren't PHP-specific, but rather more basic errors - seemingly symptoms of people that have dived straight into programming without making a pitstop in even a Computer Science 30 class. People start out writing basic bits and pieces for their HTML pages (for which that level of knowledge is fine!) but then get into trying to build bigger and better things without any foundation and very little experience in some really base concepts - for instance algorithms and debugging. You need to be able to conceptualize what your code is doing. You need to have a clear intent for every line you write. Once you've got that down, the debugging kind of follows - conceptualize, then test your assumptions. Anything other than that is just brute force. (Side note: One of the things I like to do when people show me projects is to pick out a line I can see on the screen and then ask them "So what does this function do if I remove/change this? How will the result change?" If you can't answer that without running it, you don't really know what it's doing, do you?) The issue isn't learning more PHP. It's learning more programming. It's learning how to think and figure things out. Once you've got the very basics down then, with the exception of a quick trip to php.net to look up a function here or there (is this one of those string functions with or without the damn underscore...), the rest is all just knowing how to fit them together. The rest are just guidelines (that apply equally to most languages out there, e.g. design patterns) and practice. Problem is, it's really, really tough to just come up with generic rules to encompass all that research and experience. It's not just something you can put into an article or a tutorial. It's something you have to experience. With everything you write, you need to look at it and go "Okay. This works. Now how do I make it cleaner/more efficient/more elegant/more functional." Then go figure out how to do it. There is no book, article or website that is a replacement for that experience. For what it's worth, I realized in typing this long, rambling, drunken post that the only real way to shortcut even some of that practice and experience is advice and mentoring from someone who *has* more experience. To that end I've created r/phpcodereview. Post code, get advice and suggestions. I guess I'll go submit it to r/PHP and stop planning things for my weekends. :) And regarding that last paragraph - the 'festering idiocy' part comes more from the number of people commenting authoritively on things they clearly know nothing about, not from the people asking for advice or help. The one that first springs to mind is the dozen or so people I've had to argue about hashing and salts with (here and elsewhere) because apparently fast hashes are better for passwords, and keeping salts secret is part of the security of the scheme (both very, very wrong).
same with CVS or other types of version control. Download todays change...it is called "New"....then the next day it is "New2" then "New3".......arg!!! 
In 2011, yes!
Very interesting. I definitely agree with most points there. The low barrier to entry makes it seriously easy for people to jump in start coding with no idea what they are doing. Just look at my old code is proof enough for that *shudder*. If they're lucky though, PHP sparks an serious interest in learning the ins and outs of programming, like it has for me, and that's when people switch from bruteforce programming to actually planning everything they do. [/r/phpcodereview](/r/phpcodereview) sounds like an awesome idea, i'll subscribe and post some of my code (definitely not perfect, I'm still very much learning) Cheers!
That's pretty retarded lol, questioning the number of queries running? Huh?
Well done. My friend went through a similar process and also severely underestimated the work. I hope it sells like hot cakes!
But if I was to use a random string generator for this, how would I go around and select it back from the database after inserting the data? Is it even necessary?
Logs in to a production box by FTP. Manually edits 200+ websites to include a snippet of code placed in /tmp directory called, prosaically, tmp1. Gets angry at me when I refuse to give positive endorsement to the next employer.
Comments. In. Spanish.
You can save it to your database. You calculate a random string during signup and save it to your `users` table. Even if the database leaks and the attacker finds the salt (which is plain text), their rainbow tables would be useless anyway. You can also have a single salt stored in your application/ configuration file. You'd compute that once (or even just mash your keyboard) and use it for everyone. Doing both (one hardcoded in your application or configuration file, one in your database which is dynamic and different per user) is pretty easy. If you use both types, it's often referred to as using both a 'salt' and 'pepper'. --- This should explain the whys and the hows: http://security.stackexchange.com/questions/3272/password-hashing-add-salt-pepper-or-is-salt-enough/3289#3289
haw haw.
I think that was mongo
sometimes I add exceptions to class defined in that file.. 
well, you are wrong, and you are wrong: $array = array( "input_name" =&gt; array( "required" =&gt; true, "not_null" =&gt; true, ), "input_name2" =&gt; array( "required" =&gt; true, ), ); class Test { public function __construct(array $array) { foreach ($array AS $input =&gt; $validations) { foreach ($validations AS $method =&gt; $value) { echo $this-&gt;{$method}($value) . "\n"; } } } public function required() { return "something"; } public function not_null() { return "something else"; } } $test = new Test($array); This is a valid example of what a constructor should do. However, there is a slight but major difference between what the original example mentioned and what you mentioned. You are using an array and you need to call multiple methods from the controller **which you do not know from the beginning** . I hope you can see now the difference. $t = new T(some_array) is wayyyy differend than $t = new T(some_variable_you_already_know_what_it_contains). Even with the latter method i mentioned, i would say i still think you should use a setter to push a differend array, and do the processing in a separate method, which is public. Why? because it will allow you to push new validation arrays once you are finished with **initial one** and still do validation on those without instantiating the object. So the constructor should really look like public function __construct(array $test = NULL) { $this-&gt;setConditions($test); $this-&gt;validate(); } So you are calling 2 methods in constructor, without losing the flexibility of reusing the object later so you don't go through instantiation again. PS: Using a setter and controlling what goes in the object and using a separate validate method will also let you control exactly what information goes in and what goes out **from a single point**. PS2: you might want to implement also a __call() to catch all the methods that are not defined in the current validator class.
Very thanks! This helped me understand it loads much better.
I am the worst programmer i have ever worked with... :P
Nice. Good luck with it.
nope, kills my autoloader [i bet i can structure stuff in a coherent way so that the autoloader will work, but seems unnatural]. Also is not so readable, and people will not find the specific file without knowledge of the system first.
&gt; Use bcrypt. Use bcrypt. Use bcrypt. Use bcrypt. Use bcrypt. Use bcrypt. Use bcrypt. Use bcrypt. Use bcrypt. http://codahale.com/how-to-safely-store-a-password
But as I noticed, there's quite an extensive way of implementing bcrypt.
Know what really pisses me off? 2 spaces. Seriously, fuck 2 spaces.
What about when you have an automated process that has to talk to an API that requires a username and password? 
From a technical standpoint, yes, templating systems are slower than static content. But considering the template system did output caching and we had PHP opcode caching, there was no visible slowdown. he was claiming the site was nearly unresponsive. As for being pointless? When you need to add a link, it is way easier to do it in one layout file than 20 individual pages.
That's why I said rare. I've had to do it one time, because we needed to interface our app with another one and didn't have any choice. So when batch jobs ran, we had to decrypt the password to use against the other system. Encryption keys were separate from the main one and rotated every 30 days. 
Don't you mean a *signed* integer?
&gt; He copied and pasted code directly from the Internet. I found code with Dutch comments and variable names in the code, and found the exact website he lifted the code from. Seen that a few times, in my case they usually modify 2 or 3 lines so it doesn't work half as well and then replace the header comments with their name. Usually if I just google what they were trying to accomplish it's the first result.
Are people actually opposed to code review being done in this subreddit?
Worked with one programmer that was bilingual. One day he took home the code and rewrote it so every comment and variable name was in french. Then came in the next day and swapped it out and acted like we were the jackasses for discriminating him by writing it in English to begin with (even though he spoke perfect English). Edit: So only an hour after typing this I found something even more bizarre in our code here at work. There's a table in the one database called date_lookup so I thought "Hmmmm... what's that for?" and I go in there and immediately start laughing my ass off. There's an entry in there for every possible date for 2000 to 2025, so the first field says '2000-01-01' then it has an xyear which is set to 2000, an xmonth set to 01 and xday set to 01 and xweekday of 6. So the original programmer was completely unaware of date functions and not to mention string parsing functions such as substr() and created a fucking lookup table for every possible date so he could parse out the date parts. Even worse, there's a god damn lookup_hours table that basically would convert a 1 based hour to a 0 based hour. So there's 24 rows, each going 1=0, 2=1, 3=2, etc. *face palm* 
So use an include? That's not a reason for using a templating system.
mongo is webscale.
Extensive? It's [built-in](http://php.net/manual/en/function.crypt.php). I quote from the changelog (5.3.0): &gt;PHP now contains its own implementation for the MD5 crypt, Standard DES, Extended DES and the Blowfish algorithms and will use that if the system lacks of support for one or more of the algorithms. And how to use it: **If you are creating a hash for storing in a database:** $hashed_password = crypt($plaintext_password, $salt); The salt needs to be in the following format, otherwise it'll use a different (read: WRONG) crypto: $2a$&lt; two digits for work factor &gt;$&lt; 22 (0-9A-Za-z) characters for salt &gt;$ And an example of a salt: $2a$07$usesomesillystringforsalt$ **If you are using a hash for authentication:** if (crypt($_POST['password'], $hashed_password) == $hashed_password) { //authenticated, do stuff } The $hashed_password being the hash you have fetched from the database. Simple enough, don't you think?
It did. The template system was just PHP code, so includes and echos were used to generate the HTML. We didn't use something like Smarty, just PHP to separate out the business logic from the output. 
And performance issues are rarely a valid argument for not using a template system. The convenience of a templating framework is worth the trouble of implementing good caching to make it perform well under load.
I think that guy that works with the variables might have finally been introduced to arrays... For awhile I was being paid a good amount fixing sites that were outsourced cheaply (most 'fixing' involved completely redoing). Anyways, my "favorite" came from a Joombla plugin this guy took and then added his brilliance on top of it. All that was needed was an array for creating the dropdown. [This is the actual code...](http://pastebin.com/VFrYGb2J) For those not inclined to view that file, he declared an array and then every single item in the array was it's own variable that he then array_unshifted into the array... for ~50 items... This was on a live site as well, also one of those scraped sites.
Yes. I wrote a web-server for my senior project in high school that executed PHP (although poorly). The code can be found at: [http://www.efficientcode.com/stuff/webserver.zip](http://www.efficientcode.com/stuff/webserver.zip) or [https://github.com/JohnKurlak/Simple-Web-Server](https://github.com/JohnKurlak/Simple-Web-Server) To run it, go to /config/config.txt and set the paths for things, then go to /src/server.java and run that. Look at lines 170-197 of /src/RequestHandler.java It comes down to: Process process = Runtime.getRuntime().exec("COMMAND... i.e., path to php + input"); Then you have to check out small things... like whether the script is trying to set a cookie or location header. Sorry for the bad code--it was high school :( If you need further explanation or help, let me know!
http://www.stackoverflow.com I've never seen anything better, and I truly believe that their community system of moderation is as good as it gets.
I wouldn't call that a template system, but its ok. We do it the same way.
not really a big WTF, but something like this if($a &gt;1 &amp;&amp; a &lt; 3 &amp;&amp; $a!=0) { //code here } When I asked him why he didn't use $a==2 he went into this explanation that I had hard time to follow. Granted he was a junior programmer (as in - one year experience) so it was forgiven. 
People that don't know PHP but need to work with templates need to learn something, either PHP or Smarty. People that know PHP but need to work with Smarty must learn a completely new system of writing, and adjust to it. So, whats the point? How is writing {foreach from=$data item="entry"} {$entry.Name} {/foreach} more convenient than foreach($data as $entry): echo $entry['Name']; endforeach; 
With that I agree. There's generally no reason for a separate templating language. I thought you were railing against the use of templating in general for some reason. Carry on.
stop using unix timestamps to store dates. Right now! mySQL has DATETIME which is better than timestamps in every possible way, seriously. Start using mySQL to format the date, not php's date() function. It's faster, and not only that, your dates will be displayed in your DB admin app (phpMyadmin or whatever you use) in a way you can actually read. EDIT: Why the downvotes? Does someone actually disagree? This is an industry best practice.
Smarty sucks, but Twig is amazing. And the #1 reason to use a template engine instead of pure PHP is auto-escaping variables... Pure PHP templates are usually littered with potential XSS vulnerabilities because who wants to write htmlspecialchars() everywhere? [http://fabien.potencier.org/article/34/templating-engines-in-php](http://fabien.potencier.org/article/34/templating-engines-in-php)
even though it 404's out, i can guess the page you referenced is not 'decoding' the string. [Rainbow Table](http://en.wikipedia.org/wiki/Rainbow_table)
not sure who downvoted you, you are right.
Where do you store the keys for unencrypting this password before sending it?
Why would you ever do that? If you're writing a web server, make it support CGI. That is easy to do, and then not only can you support PHP correctly, but any language you want.
correct answer :)
You don't need to do this yourself. PHP includes the standard UNIX crypt() function - if you have access to 5.3, use CRYPT_BLOWFISH. If you don't, then you can substitute the phpass library instead. **EDIT: TLDR for the long Nicoon-me thread below - if you don't know what [phpass](http://www.openwall.com/phpass/) is doing, read the docs - it has fallbacks if bcrypt isn't available, first to extended DES, and then to stretched MD5. Either is more secure than the home-rolled MD5 solution of the original poster. I think Nicoon opposes any use of MD5 in the context of password hashing though.** The standard crypt() library already does exactly what you're thinking - repeats the hash multiple times to make it harder to brute-force. You can also set a unique salt for each password (just generate one for each user, using the mt_rand() or uniqid() functions), meaning that cracking the passwords of 100 users takes 100 times as long - with no salt, it's just as fast to brute force 100 users as it is 1. [http://php.net/crypt](http://php.net/crypt)
Which PDF libraries are you trying to use to analyze the PDF? Did you already look at PDFLib TET and find it unusable for your purposes? http://www.pdflib.com/products/tet/ If PDFLib can't do it, then you may have to look at some Java tools (e.g. [this](http://www.jpedal.org/support_tutHT.php) or [this](http://www.aspose.com/documentation/java-components/aspose.pdf.kit-for-java/highlighting-text-with-replacetext-method.html)) instead of available PHP libraries... PDF is a tough, complicated format to parse and besides the basic FPDF / dompdf sort of libraries and the $$ PDFLib, I don't know of anything else available for PHP. You could of course write your own PDF parser/library (PDF is an open standard) but that is probably many, many months of work. What you want to do is not impossible since Google Books does it, though.
Not sure I want to post a roadmap to how stupid I am, but I'm subscribing to see where this goes :)
Thank you! I have a greater understanding of how security works now!
I'll look into those, some I have looked at already and they just don't allow for enough customisation to get the job done, PDFlib is also a non-free solution and we are trying to keep the model completely open source. The problem is that PDF's to not seem to have a mechanism to identify the location of words on a page, so its very tough to draw a box over a word without the ability to zero in on it. For google books to work we'd have to upload hundreds of copyright protected pdf's to them every day and wait for them to be processed, this has to be a system integrated into the text stripping and keyword searching database we already have in place.
I was once required to make a pdf from html and it was the most hell I've ever experienced in programming, so don't feel so bad... I wish pdf to die very very harshly.
I'd like to do it all in pdf.js frankly, but that project is just not ready to go yet. Its looking amazing but who knows if it will be ready in a month or a year?
Ah-ha, this looks interesting; http://pdfclown.wordpress.com/2011/04/12/waiting-for-pdf-clown-0-1-1-release/
Interesting project, but I'm with you, when... It's a great idea though, I'd like to see more stuff like this, something that completely kills flash would be a nice one too. (Prolly someone is doing this)
I'm a female programmer, with more than 8 years of experience. I generally don't have any problems getting respect from my male cohorts, because I'm fairly good at what I do. But we hired one guy a few years back, who I think had issues with women or something -- every single thing that came out of my mouth, he would contradict or find fault with. I started testing the situation in different ways -- like having someone else (a male) come up with a suggestion/comment, and the dick programmer would agree with the other guy. As soon as I would make the same suggestion, though, it was magically a bad idea. Thankfully, he didn't last very long.
wkhtmltopdf has really made this easy (there is even php bindings for it) , I absolutely hated drawing pdf's in PHP before I found this gem.
This is pretty much exactly what I thought about using back in the day, the "browser" to do the rendering and print to pdf, basically! Nice find sir! Bookmarked for next time!
&gt;if you have access to 5.3, use CRYPT_BLOWFISH. If you don't, then you can substitute the phpass library instead. Uh. Phpass uses crypt(), you know. It makes no difference. From the class: if (CRYPT_BLOWFISH == 1 &amp;&amp; !$this-&gt;portable_hashes) { $random = $this-&gt;get_random_bytes(16); $hash = crypt($password, $this-&gt;gensalt_blowfish($random)); if (strlen($hash) == 60) return $hash; }
This *only* works (at least in the case of the EU and Canada, where I have real-world experience) in as far as the various tax regulators never notice your business. Once they do, your company *will* owe GST, HST, and VAT, plus fines.
You really should head over to [OWASP](https://www.owasp.org/index.php/Main_Page) and read up on the stuff there. By the way, Norway?
I think the F is for FreeBSD.
Similarly, if you don't find anything bad in your code from a couple years ago, then you probably aren't improving/moving forward and are just doing the same thing day in and day out. If that's all your job requires, then that will suffice (my job is like that), but it's a sure way to find yourself behind the times in technology when it comes to looking for a new job.
AHhhhhh, now I get it. FAP = FreeBSD Apache PHP. Its how some people run a website if they don't need MySQL!
Maybe this? http://code.google.com/p/flamp/
Controller is supposed to do the sanitization, not the view.
The answer may be here; http://pdfbox.apache.org/userguide/highlighting.html Unfortunately I know nothing about programming in java. 
Contribute to open source and code review is guaranteed with a pretty high level of scrutiny... plus you get the usefulness of inline comments, and other such benefits offered by things like github.
&gt; Can Java be used to interpret PHP? I'm far from a CS guru, but I believe that any language implemented with a [context-free grammar](http://en.wikipedia.org/wiki/Context-free_grammar) can be used to interpret/compile just about any other another context-free language (if you're so inclined and skilled). Others here have seemingly done this. &gt; I'd like to know if it's possible to execute php or a php interpreter from a Java program Now, if you're only wanting to _use_ PHP (as opposed to parsing/interpreting it), then I thin it'd be trivial to make a system call in JAVA to the PHP interpreter.
Here's some [more SPL documentation](http://www.php.net/~helly/php/ext/spl/) though I'm not sure if it will help you.
Seconded. That's a good book. I would also recommend that if you're interested in branching into OOP, you might serve yourself well by not limiting yourself to literature directly related to PHP. Each language has it's own little differences in how it approaches OOP concepts, and if you learn the general concepts of OOP, you'll be more well-positions to adapt to any language. If you learn OOP based on PHP's OOP model, you'll probably find yourself making some false assumptions when you start to dabble in another language. As such, I'd recommend getting the above mentioned (or a similar) PHP book, but ALSO look into getting/borrowing/"procuring" a copy of [Design Patterns](http://en.wikipedia.org/wiki/Design_Patterns). Also, PHP Architect has a decent book about design patterns specifically for PHP: [Guide to PHP Design Patterns](http://www.amazon.com/php-architects-Guide-Design-Patterns/dp/0973589825). I do own all three of the above mentioned books.
This isn't really true. Nothing guarantees people will review your code. OSing your project just provides opportunity for others to look.
Good point. I really can't think of a secure way of storing that data.
Oh that reminds me. I had a job as recently as last year, where one of the first things I noticed was that it took aaaaaages to log in to the public contact management system. Didn't take long to find out why: &lt;?php // Log in $username = $_POST['username']; $password = $_POST['password']; $login = false; $result = mysql_query('SELECT * FROM users'); while ($row = mysql_fetch_row($result)) { if ($result['username'] == $username &amp;&amp; $result['password'] == $password) { $login = true; } } if ($login == true) { // Set cookie etc. }
Walk before you run. Contribute to the projects of others before open sourcing your own work. If you make a pull request to a major project do you honestly think they'll accept it without giving you some feedback and corrections first?
Wow, but perhaps next time learn to read on something more simple?
If the controller sanitizes input, you end up with a database full of HTML entities. Then if you ever output something that's not HTML, like a PDF, JavaScript, or text/plain email, you'll end up accidentally outputting HTML entities into something that isn't HTML. The view is the proper place for sanitizing, because it's the only place where you actually know what kind of sanitization is needed - HTML, XML, JS, none at all, etc. Modern web frameworks like RoR, Django, Symfony2, and ZF 2.0 all support auto-escaping in the view layer because manual escaping, or escaping at the controller level, has proven not to work time and time again.
Yeah, but if your app is 5.3 minimum (say you use namespaces, closures, or something already), then there's no need to include the phpass code at all - crypt() alone will serve just fine. PHPass is great for anything that has to be 5.2 compatible still, though.
You're not making any sense. Phpass does not implement its own version of bcrypt, it uses PHP's crypt().
 foreach(range(1, 100) as $x) { print $x . "\n"; }
Don't the F and the L contradict each other? Assuming the other comments are correct, you can't have the Linux kernel and the FreeBSD kernel on the same stack, right? EDIT: At least not on the same machine. But what sort of environment would you be running FreeBSD as well as Linux?
**No, it's not.** Phpass does not have its own implementation of bcrypt, it uses PHP's crypt() and that alone. I do not know why you people keep perpetuating this lie over and over. Here is the snippet which deals with bcrypt from the phpass class: if (CRYPT_BLOWFISH == 1 &amp;&amp; !$this-&gt;portable_hashes) { $random = $this-&gt;get_random_bytes(16); $hash = crypt($password, $this-&gt;gensalt_blowfish($random)); if (strlen($hash) == 60) return $hash; } That's all there is pertaining to hashing a password with bcrypt. Have you guys even looked at the class?!
I demand you fix it ;)
I agree with you, don't worry about downvotes. I am the final word:)
Yes, but you don't need Phpass at all if you have PHP 5.3 crypt() available. Phpass isn't just a function that calls crypt(), it also includes a "portable" MD5-based algorithm as an alternative. PHP 5.3 and above will always have CRYPT_BLOWFISH so you don't *need* phpass - you can use the PasswordHash class phpass provides if you want of course, but there's nothing wrong with just using the built-in crypt() function.
I don't know either, it's definitely an interesting problem to think about. Most of the possibilities I can come up with require the API server to do most of the work: single-use tokens and IP whitelists not requiring a password at all for example. I can't think of any way of having an encrypted password that doesn't require the encrypted password and the decryption key to be in the same place at the same time at some point in the process. Even if you do the decryption on a separate machine, then anyone who can get into the box to get the encrypted password can call the decryption box from the rooted box and get the decrypted version. Might as well not bother securing the password at all and just try to lock the box down as much as possible.
&gt;Phpass isn't just a function that calls crypt(), it also includes a "portable" MD5-based algorithm as an alternative. First of all, that's not bcrypt. Bcrypt uses Blowfish. Secondly, [you should not use MD5 at all](http://www.kb.cert.org/vuls/id/836068). &gt;PHP 5.3 and above will always have CRYPT_BLOWFISH so you don't need phpass You don't need phpass for PHP &lt;5.3 either. Phpass is a convenience class. crypt() with CRYPT_BLOWFISH will work just as well on, say, 5.2 as it does on 5.3, assuming blowfish is available on the system.
I used to work for a company that wanted to try some outsourcing. The end goal was to use labor from another country, but to test the waters they decided to hire a local developer. The goal was dead-simple: Build a plugin for our (home brew) CMS that managed a user's Vimeo account using Vimeo's API. The guy they hired had a CS degree and was supposed to be really sharp. He completely cocked up the plugin. The first thing that struck me was that it didn't look like the rest of our CMS, even though our designer showed him exactly what it was supposed to look like. It also didn't work like the rest of our CMS, and in fact, made little to no sense at all from a usability standpoint. Me: "How do I edit the title of the video?" Him: "You just double click on the title and it becomes a text field!" Me: "How is the user supposed to know that?" Him: "..." His entire UI was based on things he thought were cool instead of things that would make sense to our users. Again, none of it worked like the rest of our CMS. He was so excited to show me his first demo, which he claimed had all of the necessary functionality, but needed some cleaning up of the styles. Me: "So how do I add a video?" Him: "Oh, I guess I still need to do that." Me: "How do I delete a video?" Him: "It needs to be able to delete?!" *facepalm* The worst, however, was that I had to explain several times how OAuth works. He kept insisting that our users would have to get developer accounts with Vimeo, and then register our plugin as their own application, and then hook up the application to their normal Vimeo accounts. I had to explain to this guy (who has a CS degree, whereas I'm self-taught) over and over again how it actually works. Each time he would nod and say, "O.K., I get it now. That makes a lot more sense." He never did manage to figure out how it worked. When he delivered the final product, it only worked in Chrome. Also, he wrote about 5 lines of PHP, and decided to do THE ENTIRE REST OF THE PROJECT in Javascript. I ended up rewriting the whole thing myself.
Definitely *brillant* (sic) [Paula Bean](http://thedailywtf.com/Articles/The_Brillant_Paula_Bean.aspx).
Maybe they just want the person to be knowledgable in both. I wouldn't think these jobs advertisements would be hard to write, but it seems at least half of them are packed with a tonne of meaningless buzzwords and nothing else.
&gt; First of all, that's not bcrypt. Bcrypt uses Blowfish. Yes, exactly. Phpass isn't just bcrypt, which is the point I was trying to make in the very first post of this thread :) Phpass is a class which uses either bcrypt or a fallback stretched-MD5 salted hash, depending on what's available on the PHP where it's called. If you're using PHP 5.3, I'd recommend just going straight to using crypt() with the CRYPT_BLOWFISH option, there's no need to include phpass and its MD5-based fallback. &gt; Secondly, you should not use MD5 at all. phpass uses stretched MD5 on PHP 5.2 and below if CRYPT_BLOWFISH and CRYPT_EXT_DES aren't available, or if the user selects the "portable hash" option in the call to HashPassword. [It's right here in the source code of phpass](http://cvsweb.openwall.com/cgi/cvsweb.cgi/projects/phpass/PasswordHash.php?rev=1.8;content-type=text%2Fplain): # We're kind of forced to use MD5 here since it's the only # cryptographic primitive available in all versions of PHP # currently in use. To implement our own low-level crypto # in PHP would result in much worse performance and # consequently in lower iteration counts and hashes that are # quicker to crack (by non-PHP code). MD5 collision attacks, while problematic for other uses of MD5, have very little to do with securely hashing passwords - the problem with storing passwords as MD5, MD5+salt, or standard MD5 crypt() (40-iteration stretched MD5) is that all three of these alternatives are very easy to compute on modern processors. Phpass uses a multiple-iteration stretched and salted MD5 which can prevent brute-forcing of passwords, just like bcrypt. Bcrypt is always available in PHP 5.3 so there's no need to include phpass - you can rely on bcrypt being available, there's no need for a fallback. &gt; crypt() with CRYPT_BLOWFISH will work just as well on, say, 5.2 as it does on 5.3, assuming blowfish is available on the system. Yes, but not all 5.2 and below installations have CRYPT_BLOWFISH. Since 5.3, CRYPT_BLOWFISH is standard and will always exist. If you want to support all PHP 5.2 installations, you need phpass or another fallback mechanism that uses stretched MD5 or stretched SHA hashes to provide protection from brute force attacks.
My first real programming gig was for a local startup that did custom dynamic Web sites on the side. When I started, they didn't use source control, test code before deploying it to the live Web server, or use any frameworks because of "licensing concerns." The kicker, though, was the department lead. He had dropped out of college after taking a year of C, and read one of those Ullman Visual QuickPro PHP books, which was the basis for all of his code. All of it. Our 40 or 50 customers' sites ran off this half-baked CMS that he had developed in-house over the course of a few sleep-deprived weeks. The back-end script consisted of one file: a single 22,000-line PHP class that had everything from hard-coded passwords to "mystery" variables to huge blocks of copied-and-pasted code. If you tried to open it in Eclipse, it would crash. Somehow the guy did all this in Notepad, because he "didn't believe in IDEs." He also refused to use source control, and would still make changes on the live site after another dev went through the trouble of setting us up with Subversion, Trac, and a local XAMPP development server. The guy couldn't even be bothered to comprehend a UML class diagram, let alone document anything. I didn't last long, and neither did my replacement.
This chick has a monkey scrotum and she's bragging about it...
Well, then there are a lot of large Canadian companies that are cheating on their taxes. I don't get charged PST on orders from Amazon.ca, ncix.ca and half a dozen other large retailers that can undoubtedly afford high-priced accountants. And, according to [this page](http://www.taxtips.ca/pst/outofprovincesellers.htm) you're not required to collect any PST for any out-of-province transaction. You're only required if you have a business presence or (in the case of B.C.) specifically advertise to it.
After being employed I've never done what the job description suggested. In my experience, the list of required skills is approximately 50% relevant. It's awful. I hope that'll improve as I get better jobs.
You're not actually doing any hash-strengthening in your code here. `$string` is set to the same thing on every loop This is very secure: &lt;?php function hashPass($password, $salt = '', $strength = 10) { if ($salt === '') $salt = substr(md5(uniqid('a74jif8', true)),-20); // Will make sure hash is always same length $strength = round($strength); if ($strength &lt; 10 || $strength &gt; 100) $strength = 10; for ($i = 0; $i &lt; (2 &lt;&lt; $strength); $i++) { $password = hash('sha256', $salt . $password . $i . $salt, true); } return $salt.'$$'.$strength.'$$'.base64_encode($password); } function compPass($password, $hash) { list($salt, $strength) = explode('$$', $hash); $comp = hashPass($password, $salt, $strength); return ($comp === $hash); } ?&gt; 
&gt;Yes, exactly. Phpass isn't just bcrypt, which is the point I was trying to make in the very first post of this thread :) Then you were deceptively vague. &gt;Phpass is a class which uses either bcrypt or a fallback stretched-MD5 salted hash, depending on what's available on the PHP where it's called. Not really. Phpass is a class which supports bcrypt, Extended DES and MD5. It does not do anything which PHP already does. It is a convenience class. &gt;MD5 collision attacks, while problematic for other uses of MD5, have very little to do with securely hashing passwords MD5, while not only fast, is also cryptographically broken, and should not be used at all for anything, except perhaps providing a file checksum for integrity checking. For anything else it is utterly useless. &gt;Bcrypt is always available in PHP 5.3 so there's no need to include phpass Exactly. And for the same reason, there's no reason to include Phpass on lower versions of PHP either, if your intention is to use bcrypt. &gt;you can rely on bcrypt being available, there's no need for a fallback. Actually, if blowfish isn't available, crypt() will fall back on DES. &gt;Yes, but not all 5.2 and below installations have CRYPT_BLOWFISH. Like said, it depends on the system. Either way, your argument is moot, because if CRYPT_BLOWFISH doesn't exist, then phpass won't fix that either. Anyway, PHP 5.2 should not even matter, since it is no longer supported. If your web host is running outdated software, you really should switch.
I'm fluent in multiple languages and I worked with a guy on a ColdFusion project a few years ago. He wrote a fucky little script that totaled up some numbers and set it to a variable. **His output would sometimes be blank, because of how he wrote it, and wanted it to display zero (0) instead.** After struggling for an hour, he came to me asking why this wouldn't work: &lt;cfif total eq "0"&gt; 0 &lt;cfelse&gt; #total# &lt;/cfif&gt; He was hired because he knew "3 and a half languages" &amp;#3232;\_&amp;#3232; ... yeah, my boss was an idiot. 
Or do the sensible thing and use crypt(). No need to reinvent the wheel.
Surely, it is a typo.
Just showing him what it should look like, since he managed to get it so wrong himself. Developers should have an understanding of cryptographic elements, not wield them blindly.
I literally lol'd, how could someone get anywhere with SQL and not know about conditionals?
&gt;Developers should have an understanding of cryptographic elements, not wield them blindly. I agree, however I do not see how your snippet would really teach him anything. 
OK, sounds like your problem is with my suggestion of using Phpass, not with crypt. I thought you were arguing against my suggesting of using crypt :-) Maybe you should write something up about your issues with Phpass specifically - it's often recommended here on the forum, and is being integrated into some major PHP projects like wordpress. If you can demonstrate how hash collision attacks on MD5 make this problematic, I'm sure there would be a lot of people interested. Right now, I still think phpass on 5.2 and below, even with CRYPT_BLOWFISH and CRYPT_EXT_DES disabled, is more secure than using crypt's MD5 option (edit: if you increase the number of rounds, it looks like crypt md5 has 1000 rounds), and far more secure than just md5 or md5+salt. The default work factor of 8 for Phpass will give 256 iterations of salted MD5, which makes it 256 times harder to crack than plain salted MD5. EDIT: removed statement about CRYPT_MD5's rounds as I think it was inaccurate. Instead, [reference for CRYPT_MD5 being problematic](http://en.wikipedia.org/wiki/Crypt_\(Unix\)#MD5-based_scheme). EDIT2: removed statement about drupal, I forgot they had replaced MD5 with SHA in their final implementation of phpass.
How to do proper key strengthening? The OP failed horribly.
Flash?
It never happened in my projects, but wouldn't that be expected if you worked in Mexico or Spain :-)
&gt;OK, sounds like your problem is with my suggestion of using Phpass, not with crypt. No, the problem was that it sounded like you were suggesting phpass for bcrypt when it was not available on the system natively. This really is a problem, because there are a ton of people that think it does provide an independent implementation of bcrypt. Look at [this post](http://www.reddit.com/r/PHP/comments/mfhle/is_multiple_hashing_more_secure/c30kyuo) in this very thread for example. &gt;Maybe you should write something up about your issues with Phpass specifically I don't have any issues with phpass, however, I find it superfluous. There's no real need for it, as it doesn't really add much from what PHP has to offer. It's just a really thin wrapper, more or less. 
At one job I did basically a lot of everything; one time this involved doing a landing page that was 90% css and a tiny smattering of javascript and php. One of our long term developers lived out of state but came into the office for a few weeks. He was given the task of updating this landing page with new images and colors. Like probably ten minutes of work but he is having trouble and taking days on it. He calls me over and he asks me why the links aren't red like they are on the original version? I ask him to open up firebug. "What's that." We download firebug. I show him how to inspect. There is no rule for the links. Open up the CSS, major chunks are gone. I ask why he deleted the CSS statement for that element (and many others) and didn't add new ones. He asks what a css rule is? It's ok, I left that job. *edit: BTW this guy ONLY DID html/css. Just as an fyi. I am not making fun of some cobol programmer or something for not knowing our new fangled tools.
My point is that if you're just going to post a snippet to someone who doesn't have an understanding for how things work (which he would've found out on his own, had he any curiosity), then he's not going to learn anything. He'll just threat it as a magic black box, so in order for him to learn anything, you'd have to properly de-construct what you've pasted, and explain it in steps. 
Sounds like I hit a soft spot, LOL. Actually, there are mild conventions that EVERYONE should somewhat follow while coding. Indenting, however you do it, should be done at the correct points. It provides structure to the code and allows for immediate understanding of general flow to the viewer. Code prettifiers can work well, but they aren't always ideal when mixing languages, or when you purposefully break convention to have temporary code "stand out", etc. etc. Your argument could be compared to the likes of a person that doesn't maintain their personal appearance at all, or even care to. Sure, they can accomplish the same things as everyone else with their unshaven beard, knotty hair, mismatched clothing and bad breath... but others perceive them as being a total mess. Does this person not see that they look like a trainwreck? Why would they do that? Same thing with coding: formatting semi-properly and consistently is far easier than writing functional code, so why doesn't everyone just do it? Laziness? Apathy? If you can't even be consistent in your code formatting, what makes me think you can be consistent in anything else you do? I know everyone has their own STYLE of writing code, but how would you explain the inconsistencies? One function uses newline brackets, one doesn't. One HTML tag uses double quotes, one uses single. Some lines are indented with 4 spaces, others with 2. Why on earth would someone fluctuate like this? "Today is a DOUBLE QUOTE DAY!" "I'm really feeling the 2-space indent today!" "I flip a coin for every function declaration: heads means I newline before bracket, tails means it's on the same line." Consistency will lead to less mistakes. You will immediately notice when your code has syntax errors, etc. because you are familiar with how things look. Formatting will also lead to less mistakes as you can see proper nesting and other structural errors. Bottom line: two programmers with exactly the same experience/abilities, one has excellent formatting/consistency and one writes code like a trainwreck. WHICH ONE DO YOU HIRE? 
Oh man thank you so much for that. Great story and it ended with an amazing palette cleanser. I am laughing conspicuously at my desk. Amazing.
crypt() is a black box. You can see the LOC in what I pasted. If I need to comment *every LOC* for him.... maybe he should be asking someone else to implement app security... Learning from example is a very relevant method for programming, provided you actually do so. The problem is people not actually doing so, not that people can't.
&gt;crypt() is a black box. No more so than hash(). The work factor is provided in the salt string, and you're going to have to understand both in order to use bcrypt properly. We need not explain the cryptological algorithm, but it is a good idea to explain the general mechanism and explain why certain decisions have been made.
Given the simplicity of the code for constructing a general variable strengthening password hash method, I feel the code explains the idea much more succinctly than text.
Thanks
Well, whatever. I'm not gonna argue with you about it.
lol
We just did. :)
If AMP sites on top of L, then L must sit atop F. So what is F? These bastards are giving you riddles and you haven't even interviewed with them yet.
Either it is FreeBSD (which is mutually exclusive with Linux...) or the job poster as a convulsed way of saying his distro of choice is Fedora (**F**edora **L**inux **A**pache **M**ySQL **P**HP).
YYYYMMDD.
FYI, in PHP you don't have to split the `$charset` var, you can already treat PHP strings as an array. public static function random_chars($min_length, $max_length=null) { static $letters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'; $len = $max_length === null ? $min_length : mt_rand($min_length, $max_length); $str = ''; for ($i=0; $i &lt; $len; $i++) { $str .= $letters[mt_rand(0, 61)]; } return $str; }
I agree with your first two points, but the upper/lower thing isn't true. If you want solid passwords, don't limit them to a certain case... 
&gt; This really is a problem, because there are a ton of people that think it does provide an independent implementation of bcrypt. Look at this post in this very thread for example. OK, fair enough - I've modified my original post to make this more clear and mention that phpass has CRYPT_EXT_DES and MD5 fallbacks. &gt; I don't have any issues with phpass, however, I find it superfluous. There's no real need for it, as it doesn't really add much from what PHP has to offer. It's just a really thin wrapper, more or less. Obviously I didn't write my original post clearly enough, or just assumed that the reader would know about how phpass works - the point of the phpass library is to provide alternatives in case CRYPT_BLOWFISH isn't available, so it is basically unneeded on 5.3 and above - that's why I was only recommending it for deployments that need 5.2 compatibility. I know 5.3 should be standard everywhere but it may be a while longer till we can assume that, which is why wordpress and other big projects still have 5.2 support. Phpass does use MD5 if bcrypt can't be found on the system, so if you have a requirement of only using bcrypt, not stretched MD5, it's obviously unsuitable. Let me know if you think my edited post is still unclear on this.
I hope a potential employer asks me if I know how to FAP.
The F is for FREEDOM!
Norwegian, yes.
Then what's the L? The L in LAMP is Linux, doesn't make sense to say FreeBSD Linux Apache MySQL
Howdy neighbour. I'm a swede, myself.
&gt;I think Nicoon opposes any use of MD5 in any context though. That's not true. I just oppose the use of MD5 in any place where it handles sensitive information. Like said, using MD5 for integrity checks is fine.
I've previously added the necessary info -- LoadModule php5_module "c:/php/php5apache2_2.dll" AddType application/x-httpd-php .php PHPIniDir "C:/php" but to no avail.
*Something similar* to my own ultra-secret password. And read the JavaScript, it doesn't pass anything back to the server. Also I didn't for a moment imply that it was to "score" the password; the website is intended to underline the relative ease of cracking shorter or otherwise poorly-chosen passwords. Don't be a dick!
Seriously. I'm self taught so I don't want people ridiculing my code. :/
im familiar with SQL databases, if i am correct couchDB doesnt replace mysql/oracle/pg but is better to store stuff. can you give me an example of couchdb usage ? really confused here trying to compare oracle/couchdb/cassandra
Why hello there, söta bror!
Only when I'm rush prototyping... besides that it's a very bad idea
Could you link me to that please?
Finally, flash makes a comeback
I believe it's a point of usability. Keep in mind this is for generated passwords that the user would potentially have to read. It isn't meant to limit what the user can change their password to, and it's not meant as a form of policy for password strength.
My bad, I think you are right.
Right, sorry, I was thinking password hashes - I've corrected it to say "I think Nicoon opposes any use of MD5 in the context of password hashing though." so I hope that isn't misrepresenting you now :)
Fabulous
Fuckin' LAMP!
&gt;&gt;(this particular version was thrown together by a coworker)
Anything in your error logs? You're not really giving much to go on. If you're using windows I'd probably go with [Xampp](http://www.apachefriends.org/en/xampp.html) or [Wamp](http://www.wampserver.com/en/)
Short answer: Yes. You should know how to write OOP and MVC applications, and the best way of learning that is to use a framework.
Short answer: It can't hurt. Longer: ...but I've still never needed one. The applications I've worked on have all been built from the ground up, and I've seen that this is largely true for companies where their web presence *is* their product. Both of the applications that I currently support handle billions of data requests per month (excluding page resources like images, etc.), handling both social media and advertising data. Performance is incredibly important to us, so limiting the overhead was a good thing. However, this means that you need to implement your own testing (for example) at all levels instead of being able to rely on any form of unit testing which is built into the framework. It's more work up front, but it can be worth the reward - it depends entirely on the company's needs.
I'm overqualified.
I'm going to give up and install Wamp. thanks. 
Flash I bet, or perhaps a typo. Be sure to call them out on it!
S'all about LNPP Linux Nginx PHP and Postgres (or perhaps Percona?)
Calendar tables are actually not that abnormal and they do have their uses. For example, create a report that shows sales by product by day, but include a row showing $0 for the products that didn't sell on a given day. One way to do this is to have a calendar table and then left outer join to the sales table. A calendar table can also help eliminate loops in some cases. For example you might have a holidays table and the requirement to determine the number of business days or business hours between two arbitrary dates, excluding holidays and weekends. Without a calendar table you basically need a loop or cursor, but with one you can accomplish it with a couple of joins.
Not necessarily. PHP5 is vastly different than PHP4. MySQL 5 has some stuff that earlier versions didn't.
Have you tried changing your / to \\? Not done any development on Windows but I know the path delimiter is different then on *nix.
I don't know CF, but is that because he was comparing a numeric type 'total' to a string type "0" ?
It was a string from the start, why? Who knows. I never looked into it only because it was for some ass-hat of a client and I really didn't like the guy enough to care. My simple fix for him was to delete one character: &lt;cfif total eq ""&gt; 0 &lt;cfelse&gt; #total# &lt;/cfif&gt; Edit: fixed code not showing
There's a performance hit to MD5'ing (and SHA'ing) your password 100 times 
There's no need to save it in the database every time, and in fact, if the database is ever compromised the attacker will have the salt available anyway. Generate a random string one time from a place like random.org and define it as a constant named SALT somewhere in your script - that way, they have to compromise your filesystem and read your source code to generate original passwords. When you want to salt your password, you just concat the original password with that value then hash with your favourite secure function
I was just working on the php/couchbase tutorial over at couchbase http://docs.couchbase.org/couchbase-sdk-php-tutorial/index.html It's a nice introduction to php/couch 
If I had to guess I'd also say they're specifying a distro since LAMP is Linux Apache MySQL PHP, and the reference Linux shell scripting as well.
Well done, but you don't have to tease me with a release date of next March. I really need something now. 
pointing out the problem with someone's actions is not being a dick anymore than pointing out that the person doing the pointing misunderstood. If you thought I was being a dick, that has more to do with you than me. But you're right, I misunderstood what you said. 
Then how do you expect to improve? It's better to expose yourself (&amp;#3232;\_&amp;#3232;) and grow into a better coder than to keep quiet and in 3 months be the same guy.
Would be nice if we could see your httpd.conf I did this a month or so back, manual setup of everything (except through zips, not installed), had everything working fine. Running linux with nginx now though.
&gt; Bottom line: two programmers with exactly the same experience/abilities, one has excellent formatting/consistency and one writes code like a trainwreck. WHICH ONE DO YOU HIRE? both. If one of your other developers comes back and complains about the code, tell them to learn how to read code. On your indentation point; this is what I actually said: &gt; consistency is never the goal. If you can provide an actual rational reason for preferring one style over the other (less mistakes, for example), do so. But citing consistency alone just means it isn't important. And the same thing applies with your single/double quote argument. Most languages that support both, do so for a reason. There are performance implications to using one versus the other, and the use of one versus the other clearly communicates different things to the developer reading the code. For example, if someone were to standardize on "always use single quotes unless you're doing interpolation", I would stand by that. There are rational reasons for that. If someone were to say "always use double quotes for consistency", I would not stand behind that. Always using double quotes is just not important. And if you feel uncomfortable with "always" replace it with "strongly prefer", my points do not change. And I realize you brought up the single/double quote wrt html, but in html I couldn't care less. I've come across html files that were badly formatted, I just run them through a prettifier and be done with it. But if I'm looking at fairly well formatted html, and some of the attributes are using single quotes, I don't blink. *especially* if said html was dynamically generated, in a lot of languages, using single quotes makes the server code *simpler*. And the consistency of the single/double quotes in the html is not more important than the simplicity of the server code. The point is, I don't think you understood my point.
You're gonna interact with the shell no matter what distrobution of GNU/Linux / FreeBSD you use.
It was 2006 though.
Haha, I'm aware of that
Fedora Linux?
Will the other kids make fun of me because I WAMP?
&gt;both. I asked which one you would hire. "One" being the key word here. Grats, you managed to "dodge" my question by saying that you would hire a someone that did not perform as well as another applicant simply because you wanted to prove me "wrong". I see your point with the HTML quotes. They accomplish the same thing. My real pet peeve here is that quality coders (&gt;5 years experience) will have chosen a style (hopefully) by this point in their career. If a coder is still flip flopping back-and-forth between single and double quotes in HTML then that implies a lack of experience. Why would you "suddenly" change your mind. &gt;in a lot of languages, using single quotes makes the server code simpler. Good job! Except in PHP it doesn't matter (see topic). PHP handles single quotes and double quotes with the same efficiency. Regardless of my actual point or what you perceive to be my point, I have been a lead developer for 6 years and I have noticed a direct correlation between a programmer's ability to produce robust, scalable code with their ability to correctly format. Here is your argument: "I'm too retarded to indent and maintain simple consistency in my code. I can't remember if I used a single quote in my last HTML attribute or not because FUCK IT!!! It's all the same... right?" Here is my argument: "I work in a highly advanced development environment where I only hire top-notch developers who have their shit together. Formatting code is one of the simplest things I could ask of someone that I am paying $80,000/year+ to do. It's not a complex algorithm. It's not difficult. If I want shitty code, I will outsource it for $5/hr to India and reformat the shit myself." I guess I expect more out of the people I hire/work with. If you are OK with sub-par performance then that is your problem, and I wish you the best of luck in all of your endeavors... but I guarantee you that Google/Apple have the same standards that I do, and that is what I strive for. Perfection is the goal here. I guarantee you that Apple/Google code is 100% formatted correctly/consistently without your silly prettifier crutch. Again, it appears I hit a soft spot. You write messy code. Sorry? 
Silly question, but does c:\php\php5apache2_2.dll actually exist?, and is it in the same directory as the other PHP files (like phpts.dll).
That shouldn't throw a "Module not found" error, it'd load successfully but randomly crash at some point. Even with a different runtime version, loading the library should work fine. :P Unless it's a VC9 build but the VC9 runtime is missing. 
Exactly... it's not necessarily the fact that they format incorrectly, it's that you know they are still "junior" level because they haven't been in the industry long enough to be considered experienced.
I came here to suggest this too, having just set up Apache on Windows myself. No idea what this php module thing is for though, I don't use it.
Yes.
I didn't downvote you (came into the thread too late for that), but I'm skeptical about your assertions, particularly because you claim "every possible way, seriously". There are always exceptions to everything. &gt; Start using mySQL to format the date, not php's date() function. What if you're using a fuzzy-date library (e.g. "2 months ago") that expects its input to be provided as a timestamp? &gt; It's faster Citation? &gt; your dates will be displayed in your DB admin app (phpMyadmin or whatever you use) in a way you can actually read. There's no reason why your DB admin app might not already format timestamp fields in human-readable formats.
'Cause $a == 2 would involve using a magic number, duh.
Check *all* the modules you are loading in your php.ini file. Also make sure your have the right version of that dll. VC6/9, and the correct php version, 5.x, etc..
&gt; I asked which one you would hire. "One" being the key word here. Grats, you managed to "dodge" my question by saying that you would hire a someone that did not perform as well as another applicant simply because you wanted to prove me "wrong". Or I recognized the sillines of the question. "Given that two developers have the same abilities, which one would you hire, the one with the better abilities, or the one with the worse abilities". You can't answer that question, nor does it have any basis in reality. &gt; I see your point with the HTML quotes. They accomplish the same thing. My real pet peeve here is that quality coders (&gt;5 years experience) will have chosen a style (hopefully) by this point in their career. If a coder is still flip flopping back-and-forth between single and double quotes in HTML then that implies a lack of experience. Why would you "suddenly" change your mind. Or it implies that multiple people have worked on the code over the years. And you'll note that I also said this: _And I don't want to hear about the "readability" either. Your developers don't live in a bubble, every single one of them has gotten used to different styles, so citing readability is a canard. You'll never find a single style that's completely comfortable for all of them._ And I find it telling that you claim over 6 years experience as a "lead", yet you thought I was implying that the multiple styles were due to a single person "flip flopping randomly", rather than a team of people developing a piece of software over years (in which both sensibilities change, personnel change, and internal code standards change). &gt; Good job! Except in PHP it doesn't matter (see topic). PHP handles single quotes and double quotes with the same efficiency. http://micro-optimization.com/single-vs-double-quotes It doesn't even make sense for the two to be on par performance wise.
Maybe Flash Linux Apache MySQL and PHP?
Have you tried checking the permissions on the c:\php directory to ensure that everyone has access. You shouldn't have a problem since you chose to put them in c:\php and not c:\program files\php, but it doesn't hurt to double check. You should check the user that the Apache service is running as and then ensure that that user has read privileges. If you are unsure, just add a user "everyone" with read/write privileges temporarily.
Probably :) But it just looks \*very bad\* for a tech recruiter to Make Shit Up™ 
Funnily enough, when people ask about experience with Nginx instead of Apache they'll say LEMP instead of LAMP. It's _e_ because Nginx is pronounced _Engine X_.
&gt;What if you're using a fuzzy-date library (e.g. "2 months ago") Mysql has that. You use interval. SELECT DATE_SUB('2008-01-02', INTERVAL 2 MONTHS); &gt;There's no reason why your DB admin app might not already format timestamp fields in human-readable formats. If you store dates as a unix time stamp as an integer... it just looks like a bunch of numbers, not any date that makes sense.
Wow sorry, I just discovered the message area of my profile! Didn't know anyone had actually replied to this. Check out the [Computation Arts](http://design.concordia.ca/programs/undergraduate/computation-arts/) at Concordia. It's a unique program, don't think there's anything like it in Canada. It's really an amazing crossover between arts and computer science, for nerds who have a creative passion basically. I take classes in Processing, Max MSP Jitter, PHP, etc. but all that have a view for conceptual artistic intent. (You're my first "stalker" since I stopped just being a lurker! Wooo)
Possibly it's Fedora? Or maybe it's a trick to see if anyone will admit they don't know and ask about it.
That's why I use Zend Server CE to set up my dev env in Windows.
The benefit of phpass is that you can use this single library across all your projects and not have to change a thing. The problem with phpass is that it fallsback to `md5()` if `crypt()` is not available... but using PHP's built in `crypt()` is stupidly easy so always use that.
[CHECK IT](http://design.concordia.ca/programs/undergraduate/computation-arts/) before you WRECK IT
Thanks for this! I thought no one replied to this thread! See the edit in my description for what I ended up doing.... I avoided Twitter because that's essentially what everyone in my program ends up using due to its well-documented API and current status in our society. 
lolol I'm doing integrated media at OCAD, and we do a bunch of stuff involving processing and Max/MSP... although I've also been looking in to stuff involving super collider. We also do stuff involving physical computing and kinetic art. Glad to hear there are other programs in ontario do similar work!!!
Right on, definitely bookmarking this for comparison (i'm looking at finding a good validation library to stick with). Considering it's done in PHP, I'm assuming the most modern course of action would be to couple this with some basic AJAX functionality?
FastCGI?
Interesting....we also have whole physical computing department as well as soft computing (wearable reactive art using conductive threads and this huge Jacquard loom we have). Yeah, Concordia's actually in Montreal but it's interesting to hear of another program. I wonder if there are ever collaborations between the two. I'm born and raised in Toronto so I know OCAD has a great reputation. Hadn't heard of SuperCollider before...what makes it different than MSP?
Nicoon is right. Look at the [jQuery Validate Plugin](http://bassistance.de/jquery-plugins/jquery-plugin-validation/) and port that to PHP
I ended up going with the database, Thanks again for the advice.
SuperCollider is object-oriented programming language similar to small talk, although it also borrows syntax from a variety of other languages including lisp. You execute commands to a server, which is constantly running. http://supercollider.sourceforge.net/
Seems kinda superfluous... HttpTcpEthernetFastcgiLinuxApacheMysqlPhp
At the bottom of the README there is an example of adding your own validator at run time.
It's another case of language bigotry. "Mine is good, yours sucks." It doesn't matter which languages are being referenced. They all have their benefits and drawbacks, but some people just want to hate them for whatever reason they can drum up. Use whatever language(s) are comfortable to you. I primarily code in PHP, and have for many years, but will use anything necessary to get the job done, especially when it comes to working with other applications. C, Python, Perl... I've managed to avoid having to learn any Ruby so far. &gt;&gt; PHP devalues the entire industry as most learning resources are tailored towards non-programmers As for that... if difficulty to learn made a language better, we'd all still be using COBOL, or ADA, or what have you. Maybe we can go back to punch cards...
Some (that PHP was started as a hobby product, also almost all the "flaws" are ture). But that is all (slowly) changing for better. Also, saying that {LANGUAGE} is bad, because there is a lot of bad software for it, or majority of the documentation/tutorials are aimed at basic level programmers is just stupid.
PHP's lack of namespaces and anonymous functions are fixed in version 5.3. If you like to see some good use of namespaces in PHP have a look at [FuelPHP-framework](https://github.com/fuel/). [Exceptions](http://fi.php.net/manual/en/class.exception.php) are also added in 5.3 which improves error handling a lot.
Very little. I've just replied with a point-by-point castration of his entire comment. He basically uses criticisms that were *maybe* applicable in 2008. And for the most part, they were only applicable in ~2005.
Exceptions were added long before PHP 5.3, in PHP 5.
Please remain civil in this subreddit. If you have a criticism of how others have replied to the linked comment, then feel free to voice them. However, directly insulting the integrity of the OP is not acceptable.
I don't have an issue with how others have replied, I have an issue with this topic being posted in the first place. Who cares what language is better? I only care that he is using this subreddit to circle jerk downvotes in another thread. I also have issues with mods who condone this behavior and propagate it.
You could use it to validate any data, so yes, you could use it to validate data you're passing through an AJAX request or more commonly, data you're getting through form submission via $_POST, $_GET, etc.
Us mods are here to enforce the community guidelines, and to manage the spam and report queues. If someone is being uncivil, or abusive, then feel free to report them. However, this is not such a case.
I didn't read the removed reply, and I'm glad I didn't. I didn't post this to get downvotes in the original thread, I really hope no one does this. I just think it's interesting to know how other Redditors think about this PHP vs Python discussion. Maybe I could seriously speed up development by switching to Python, who knows?
I've no idea why I put .3 there... Maybe it has something to do with a straight male [porn star](http://www.reddit.com/r/IAmA/comments/mfjds/iama_straight_male_porn_star/c30hugm).
The problem is people do this all the time to further their holy war. It works famously and makes karma useless as a tool to decided whether something is insightful enough to read.
This broke my heart.
tl;dr... implemented this over a week ago: class Form { public static function validate( $values, $rules ) { $errors = array(); foreach ($rules as $name =&gt; $rule_array) { $value = trim( $values[ $name ] ); if ($value == '' &amp;&amp; !isset( $rule_array['required'] )) continue; foreach ($rule_array as $rule_key =&gt; $details) { if (!isset( $details[1] )) $details[1] = 0; if (!self::$rule_key( $value, $details[1] )) { $errors[ $name ] = $details[0]; break; } } } return (count( $errors ) == 0) ? false : $errors; } public static function required( $value ) { return ($value) ? true : false; } public static function minlength( $value, $length ) { return (strlen( $value ) &lt; $length) ? false : true; } public static function maxlength( $value, $length ) { return (strlen( $value ) &gt; $length) ? false : true; } public static function alpha( $value ) { return ctype_alpha( $value ); } public static function alphanumeric( $value ) { return ctype_alnum( $value ); } public static function email( $value ) { return filter_var( $value, FILTER_VALIDATE_EMAIL ); } public static function numeric( $value ) { return ctype_digit( $value ); } public static function integer( $value ) { return filter_var( $value, FILTER_VALIDATE_INT ); } public static function decimal( $value ) { return filter_var( $value, FILTER_VALIDATE_FLOAT ); } public static function callback( $value, $callback ) { return $callback( $value ); } }
That's pretty clever. I like it!
Validating data through $_GET/POST is a hassle IMHO. It adds an extra step for both the developer and user, requiring you to pass the data back to the form via GET if there's a problem, even if you originally used POST. This is why I've always used client-side validation, historically. EDIT: Thanks for the info, it's what I come here for :)
&gt;&gt; What if you're using a fuzzy-date library (e.g. "2 months ago") &gt; Mysql has that. You use interval. SELECT DATE_SUB('2008-01-02', INTERVAL 2 MONTHS); But how do you know the interval should be 2 months? Maybe the fuzzy-rendering should be "6 hours ago" instead. &gt; If you store dates as a unix time stamp as an integer... it just looks like a bunch of numbers, not any date that makes sense. Maybe with *your* DB admin software, but there's no reason why a different DB admin software might not render it as a human-readable string.
&gt;But how do you know the interval should be 2 months? Maybe the fuzzy-rendering should be "6 hours ago" instead. Intervals work with hours, too. Seconds, minutes, hours, days, weeks, months, quarters, and years. THEN you can even combine those, like "MINUTE_SECOND" and stuff like that. If you didn't know this, I'm guessing you haven't dealt with the mysql date object much, have you? You should [read this](http://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html), it's going to fucking blow your mind. Seriously. There's a million things you can do here that you can't do with a number. If you limit yourself to unix timestamps, you're limiting yourself as a developer. &gt;Maybe with your DB admin software, but there's no reason why a different DB admin software might not render it as a human-readable string. Fine, if you can find some DB admin software that automatically converts numbers to dates for you, then you win. I've never seen one that does it. But regardless, date objects are readable in **ALL** dbadmin software... unix time stamps *might* be displayed correctly in some dbadmin software where you'll have to explicitly configure to display that integer field as a date. That's the argument you're going with? Why are you arguing this point? Do you really think unix timestamps are better? You're saying a plain number is better than an object *designed specifically for this reason?* Go ahead and make your case. Tell me what about unix timestamps are better than date objects.
He's right about the origins of PHP but he's wrong about the problems with PHP meaning that it is terrible and you should always use Python instead, and Python being awesome and above reproach. Python has lots of stupid aspects of its own. For example the thing that always annoys the shit out of me is that the only form of multiline comment is to basically make a big string block that isn't used for anything.
Managed to avoid ruby? I love ruby! You might enjoy it too.
[mongodb is webscale](http://www.xtranormal.com/watch/6995033/mongo-db-is-web-scale)
I'm not sure if there'll be a next time. A full time job and writing a book at the same time was a bit crazier than I expected.
&gt;&gt; But how do you know the interval should be 2 months? Maybe the fuzzy-rendering should be "6 hours ago" instead. &gt; Intervals work with hours, too. Seconds, minutes, hours, days, weeks, months, quarters, and years. THEN you can even combine those, like "MINUTE_SECOND" and stuff like that. There's some sort of misscommunication going on here, so let me rephrase my question to you: What SQL expression should I write, such that I can give it an arbitrary date-time object, and have it return to me a fuzzy string whose format is identical to the one that Reddit uses for showing the page of comments (e.g. it will automatically decide to return "x minutes" if the date-time object represents a point in time less than an hour in the past, but switch to "x hours" if the date-time object is between 1 and 24 hours in the past, and so on)? &gt; Why are you arguing this point? Well first of all, let's clarify what you mean by "this point". There's multiple levels of "arguments" here. * The top level is this: You're asking why you got downvoted, and I'm explaining to you why I find some of your claims skeptical. * A lower level is this: You claim that datetime is *always* better than timestamp, and I'm saying that "always"-type statements are inherently suspect, and I'm asking you to justify this claim: How can you prove that there are no situations that could ever occur in which timestamps are better? * And then a slightly lower level is this: You're claiming that there does not exist a DB admin software will not render timestamps as a human-friendly string, and I think this is surely false, as anyone could go out and make a DB admin software that DOES render timestamps as a human-friendly string. But to answer the "why" part of your question: I am trying to do you a favor of providing you information you specifically requested. It seemed you were confused about sources of disagreements, so I'm trying to help you see where these sources might come from. &gt; Do you really think unix timestamps are better? Nope. &gt; You're saying a plain number is better than an object *designed specifically for this reason*? I'm not saying that, but I would strongly suspect that your "object *designed specifically for this reason*" is actually implemented underneath by a plain number, so I also disagree with the inverse. In other words, I do not believe timestamps are (universally) better than datetimes, and simultaneously I do not believe that datetimes are (universally) better than timestamps. &gt; Go ahead and make your case. Tell me what about unix timestamps are better than date objects. I don't actually think unix timestamps are better than date objects, so I won't be able to fulfill your request.
Thats the joke.
thanks!!
&gt;What SQL expression should I write, such that I can give it an arbitrary date-time object, and have it return to me a fuzzy string whose format is identical to the one that Reddit uses for showing the page of comments.... Still don't know what you're asking. Show me the MYSQL statement using unix timestamps, and I'll show you how it's done using a date object. &gt;How can you prove that there are no situations that could ever occur in which timestamps are better? Well, the fact that you can convert it to a timestamp on the fly means that it can do anything a timestamp can do and more. That being said, there's nothing you can do with a timestamp that you can't do with a date object. That's the whole *reason* it's it own object. &gt;You're claiming that there does not exist a DB admin software will not render timestamps as a human-friendly string, and I think this is surely false, as anyone could go out and make a DB admin software that DOES render timestamps as a human-friendly string. Ok, but as of now, one doesn't exist, and if it does, it's pretty obscure. One day, this imaginary dbadmin app might become widely used. But since it's not, today it's +1 for date objects. 
I really appreciate that! :) it's a nerve racking process when people start reading through it...I just hope it make sense.
PHP turned Ruby enthusiast here. While I love PHP, I don't see myself ever going back at this point. Ruby is a very powerful language that got a lot of hate because of failures in Rails that have now all been addressed.
I gave a talk a few weeks ago to my local PHP group about NoSQL/SQL databases, here are the slides if it helps! http://www.slideshare.net/timjuravich/mysql-nosql-from-a-php-perspective
Thanks :)
Every generalization is rooted in truth to some extend. Haven't read through all the bickering in that thread, but it's of course more diverse and a subjective choice in reality. To go with the example. Python is indeed the better language than PHP. No denying there. It has been designed and shit. It's for example a real OOP language, so developers aren't pretending and overcompensating with design patterns there. It also does in fact have a richer library ecosystem. But that being said, it still is unfit for web development. There might be web frameworks, and web server integrations. But it's just not as easy to deploy. There's for example not a single HTTP library in Python that gets Content-Encoding right (before it comes up again, yes, made a bug report, provided code, still not fixed in Python 3.2). And the built-in regex library of Python is just so much behind the times, it's not funny anymore. Both are basic features that don't get much attention, because it's not meant specifically for web development. Unlike PHP. Same with MySQL. It's still a substandard database feature-wise. But it get's the job done. Specifically case-insensitive string comparisons are actually what people want. And unlike Postgres it can store binary BLOBs without getting escaped results back from the database (still a pet peeve of mine; not that you should actually do it). And yes, PHP still suffers from cruft. That things got deprecated years ago doesn't mean it's actually gone. My provider just Britta'd the server config again, et voila, magic quotes are back. Other things mentioned there are just personal preferences. And personally I do like some of the weird language semantics. (Mind you, shitty namespace separator is still shitty.)
Yep. In the given time, PHP went from one of the most erroneous projects, to one of the least. Besides, by that logic, you should also avoid Linux, Reddit, and pretty much all other open source software, because it was once a small side project.
I think I get what you're going for with that first question. Is this it? SELECT CASE WHEN DATEDIFF(NOW(),`posted_date`) =1 THEN '1 day') WHEN DATEDIFF(NOW(),`posted_date`)&lt;=31 THEN CONCAT(DATEDIFF(NOW(),`posted_date`),' days') WHEN DATEDIFF(NOW(),`posted_date`) BETWEEN 31 AND 60 THEN '1 month') WHEN DATEDIFF(NOW(),`posted_date`) BETWEEN 61 AND 365 THEN CONCAT(ROUND(DATEDIFF(NOW(),`posted_date`)/31),' months') WHEN DATEDIFF(NOW(),`posted_date`) BETWEEN 365 AND 730 THEN '1 year') WHEN DATEDIFF(NOW(),`posted_date`)&gt;730 THEN CONCAT(ROUND(DATEDIFF(NOW(),`posted_date`)/356),' years') END `fuzzy_date`, `article_id`, `anything_else` FROM `articles_table` ORDER BY `posted_date` DESC LIMIT 25 Basically, if it's less than 1 month, it displays like "10 days" or if it's between a month and a year it displays like "6 months" and if it's over a year, it displays like "3 years." 
&gt; Validating data through $_GET/POST is a hassle IMHO. No no no. It's not a hassle, it's what you should be doing. A user can disable javascript and then all your validation has vanished. Never leave security in the hands of the user. &gt; requiring you to pass the data back to the form via GET if there's a problem This statement hurts my brain. You don't pass errors back using $_GET. When you submit the form, the server will do the validation and then either: 1. Rebuild the form with the errors passed into it or 2. do something on success. Once you've got solid server side validation in place, then you can do the prettier (javascript) validation. This way you have a form that degrades in a good way.
The user can turn off JavaScript, so make sure you are willing to let anything that they put in the form go into your database. If you only want to do one, do it server-side, if you care at all about the data.
Something doesn't look right. Your variable names make it almost impossible to read what's going on and switch statements aren't your friend. Particularly switch statements that look at the first character of a variable type. It's just obtuse. PEAR has a pretty good XML serializer/unserializer: http://pear.php.net/package/XML_Serializer/redirected Maybe look at that.
The linked thread was indeed very informative. Its a shame that the only way how many people contribute to a discussion is by hitting the downvote button. Because of that, the linked thread is hidden in the original post. 
I'm just curious as I've never noticed this before; why do you have a moderator symbol next to your name by this post, yet just regular old blue name [here](http://www.reddit.com/r/PHP/comments/mh7n8/how_much_truth_is_there_in_this_comment/c30w610)? Does Reddit allow you to choose whether or not to post as a mod? Sorry for the off-topic post.
Yup. When I post in a subreddit for which I'm a moderator, below my post there is a "distinguish" link. By clicking it, it "distinguishes" my post as a moderator. Admins have a similar thing, where they can distinguish as an admin. Typically, one only distinguishes a post when they're speaking in an "official capacity", as a moderator. This is to separate opinion from decree. :P
Some dick thinks he'll sound more intelligent by pretending to be the only person who hates X topic when the general consensus is every else likes it.
No, it's quite common. Just don't let it become a difficult behemoth of hundreds of functions in one file. ------------ Re: posts.php Depends on what posts.php is, if it's some kind of router that passes different requests to different files, then no. If (more likely) you're putting all the validation and/or associated actions in to it, then yes, that is bad.
I'm going to say... it depends. 5500 lines of functions? Maybe your site shouldn't be procedural. 
We have one at work called common.php but it is specifically for really common generic functions. Just don't let it become a huge file with things that really should be class methods. In the case of form posts. If these are things like drawing form fields I might make a class or at least put them into their own file called post_helpers or something.
sounds like high school :) obviously, it's the same thing as executing from command-line. Did you get any of the request superglobals to work? get,post,session 
yea, if those functions are not 10000s of lines and are not related to one another. if the functions are all random, and has no relation, its actually better that you do it that way.
I'm going to go with bad. It's very hard to maintain something like that unless it's a very small project or just a few helper functions. I prefer keeping most of my functions as class methods in classes/classname.class.php files with relevant names. Keeps things easy to handle, and if you really don't want to rely on object orientation you can call them out like classname::method(); and just have a slightly ass backwards, slightly more organized function list.
And spaces/tabs for delimiting blocks, fucking stupid
this is how many people use php to connect to their javascript application - check out extjs 4 and ext.direct and Extremely easy php api/router. essentially you can call your crud functions directly from your ui like ext.php.posts.createnewpost which resides in post.php as class posts with function createnewpost. not a bad way - but i'm gonna go out on a limb and say you'll eventually find its faster to just run node.js and do the same thing using javascript server side. with UI frameworks becoming the MVC and your php becoming simple crud with fabulous mvc frameworks like extjs 4 for your web-based-application. makes you wonder if the whole xamp stack is alot of bloat. anyways check out extjs 4 - ext.direct - extremely easy php router (sencha forum ext.direct) and you'll see what i mean. i'm assuming you are making a web-application. no need for two mvc's
I made GET and POST work. I never tried SESSION.
Use a framework?
It depends on the size of your project; I'll tell you how I tend to organize code in my projects: * have a folder that contains a set of classes and files that make up 'parts' of the code, such as an Analytics class in analytics.php; * A Model-View-Control system or something similar that automatically includes a set of import classes from the previous folder and provides a function like require() that allows controllers to load classes that aren't needed in every controller. 
Just don't let it get out of hand. We let it get wayyy out of hand with MediaWiki, and ended up with a file with dozens of unrelated functions that was hard to maintain. We had database getter functions, almost a dozen messaging functions, and various rendering functions. We've been working to change it to proper class and object methods, but it's hard when the hundreds of thousands of lines use the old functions.
Not that I'm defending anything here, but this is the stupidest complaint ever. The people who whine about python's block style are usually the people who know nothing about python, but wish to appear like they do.
&gt; My provider just Britta'd the server config again, et voila, magic quotes are back. if (get_magic_quotes_runtime()) { set_magic_quotes_runtime(false); } if (get_magic_quotes_gpc()) { // Reverse effects of magic quotes } Why not just have a simple check at the beginning of your scripts and never have to worry about magic quotes again. Same can be done for register globals. Maybe log an error if they are on if performance is a concern.
No, it's quite common.php
Err, it's not stupid. I use Python extensively (more than PHP) and the block system is a pain in the ass
I think line 13 should be: $retVal = '&lt;?xml version="1.0"?&gt;&lt;'.$root.'/&gt;'; Also, it doesn't appear that there is any escaping of string values.
&gt; Well, the fact that you can convert it to a timestamp on the fly means that it can do anything a timestamp can do and more. That being said, there's nothing you can do with a timestamp that you can't do with a date object. That's the whole reason it's it own object. The argument works both ways: Anything you can do with a dateobject, you can do with a timestamp and anything you can do with a timestamp, you can do with a date object, because MySQL provides functions to convert between the two. Hence why I disagree that date object is always better: In my view, the two are essentially equal overall, with one gaining a small edge over the other in very specific circumstances. &gt; Ok, but as of now, one doesn't exist, and if it does, it's pretty obscure. One day, this imaginary dbadmin app might become widely used. But since it's not, today it's +1 for date objects. phpMyAdmin is a pretty famous DB admin app, and it auto formats timestamp as, e.g. "2005-01-01 01:16:15"
Nice catch on ln 13. I don't escape the strings since they're wrapped in CDATA, though I have had a terrible time with non-ASCII characters (eyes of disapproval for example). Any ideas on that?
Yeah, this is what I'm getting at, and it sounds like your solution is "reimplement it yourself". But the original scenario I posted was: "What if you're using a fuzzy-date **library** that expects its input to be provided as a timestamp?" (emphasis added). I.e. you've already got the library written for you, and it wants its input to be provided as a timestamp. Rather write your own, you should just use the library. And rather than save the field as a datetime object and convert on each query to timestamp, just store it natively as a timestamp.
You should look into MVC and/or an MVC framework such as FuelPHP.
Heh, I've been trying to get my boss not to reuse an ID 30 times on a page, or to not hard link images (which then break when we move the site out of a staging URL) for almost 2 years now. The mess the man makes out of things is fucking legendary. If he adds something and it does not work, he will just keep adding. You end up with 4 or 5 .js files with a similar purpose, 200 extraneous lines of css, and no fucking clue where to start troubleshooting.
&gt; In the given time, PHP went from one of the most erroneous projects, to one of the least. Um. You do remember how [nobody ran the test suite](https://bugs.php.net/bug.php?id=55439) before releasing 5.3.7?
Have that. Just really feel like I *shouldn't have to* have that. Also I went the lazy route and just added `fix_magic_quotes.php` per `auto_prepend_file=` in a `.user.ini` everywhere. My hoster is not exactly clueless. It's still telling that it got reenabled though. There's just so much outdated code that relies on dated settings that admins simply have give in to laziness. With the result that everyone else has to pay with babysitting such settings. I guess that's what the original discussion was about. Can fix bugs. Can't fix inertia.
I've only heard two decent arguments against it, in the many times I've asked people why they think it's stupid: 1. Preference for closing delimiters. 2. When copy+pasting code around, lost formatting can't be re-established by the editor. Personally, neither of these has ever bothered me, but I can see how they would. Do your complaints fall into one of these two categories?
Python does some retarded shit too. Like as a "real" OOP language, guess how you get the character length of a string object? String.len()? Nope. len(String).
With CDATA you still have to worry about strings containing ']]&gt;'. If somewhere were to serialize a class containing an XML string your code might break. 
Because its common does not means its a good idea. Your site should either run mostly on object oriented code or use an MVC framework. In my opinion a big file with a bunch of functions is crap. At a minimum split them out and use some classes with static functions. 
I wouldn't assume that I understand how much entropy is preserved. It *appears* to be strong enough, but why don't you just grab some random value and hash that? function gen_pw($lol) { return substr(sha1(mt_rand()), 0, 8); } This is a lot more random (and **obviously random**) than anything you're doing. If you feel like being extra paranoid, `mt_rand()` seems to have 31-bit entropy (`mt_getrandmax()` yields 2147483647 = 2^31 - 1). If this bothers you, just concatenate multiple numbers, first padding them with zeroes to `strlen(mt_getrandmax())`. Doing this six times before hashing gets you to 186 bits, larger than `sha1()`'s 160-bit output. However, *none of this really matters* if you truncate it to 8 characters -- 32 bits, just shy of `mt_rand()`'s 31-bit entropy.
That's easy, too. Don't cripple your whole app because of one crappy library, especially when that library is something so superficial as to how to display how long ago a particular date was. But if you absolutely must use the crappy library, do it like this: SELECT UNIX_TIMESTAMP(`pub_date`) FROM `articles` But, I literally just wrote that script in all of 3 minutes, you shouldn't have to use a substandard data type just so you can use a library you could othewise write in php or mysql in less than 10 minutes.
I'm sure no one really is, but there's a hell of a lot of noise on r/PHP. Trying to find any actual code among the questions, "Hey look at this extension/project/function I found!", "My project is released, use it!", "My project is broken, fix it!" and news was proving kind of difficult. I figured I'd set up the subreddit to make it easier for people who want their code looked at and people who have the time to actually look through code and provide constructive feedback to find each other. The time commitment in dealing with each kind of post is vastly different, so it seemed a logical separation.
Jesus fucking Christ, you win. Unix timestamps are better. I FUCKING GIVE UP. Good luck as a programmer in the future, and I wish you well. But if you ever find yourself sitting across from me in an interview, and you say something asinine like "I just use numbers as dates, instead of using dates as dates because you can't prove it's better" you probably aren't going to get the job. You're the kind of programmer that sets of red flags, and I don't want you within 10 miles of my code.
Either it has an effect on the maintainability of the files by humans, which is the same as every file; or it has an effect on the running of the code, which you can measure directly.
Well, you'll end up with a monster file [from past experience] which is more prone to errors. Imagine a programmer needs to do something, he does not know that the function already exists, and he has not got the time to search through 5k lines of code. He will write a new function, and there you have it: duplicate code. In order to avoid that, group your functions in logical structures. That might lead you to classes and oop. OOP is fantastic at structuring the data and creating custom datasets that localize and groups together functionality. Ofc, OOP is much more than that, but it will help alot. 
On high traffic sites something like this can get a huge performance problem! If a lot of functions are not often called they get parsed nevertheless on every hit!
The value that crypt gives you back, say if you use it's blowfish version, will actually contain the salt prepended to it.
I've *never* found it to be a pain in the ass. :S
1. Organize your functions into relevant classes 2. Save classes somewhere like classes/classname.class.php 3. require (classes/each.class.php) in a file like init.php 4. require init.php on each of your scripts. 5. Instantiate objects and call functions as needed. Even better, write your classes as static classes and call them with Classname::myFunction(...) You end up with roughly the same thing, but you end up with organized code that's easier to maintain. 
There are actually very good reasons why len (and others) are implemented the way they are. http://lucumr.pocoo.org/2011/7/9/python-and-pola/ is a good read if you're interested. That's the thing with python... it has been notoriously well designed. Almost any thing that could be considered a quirk actually has a damned good reason behind it.
The problem with this approach is that it will tend to grow over time and will become a problem in the future.
Similarly, I'd be hesitant to hire you, since you seem to have trouble with formal reasoning and precise communication. For example, you seem to conflate the claim "datetime is not better than timestamp" with "timestamp is better than datetime", despite my repeatedly bringing to your attention the possibility that "datetime and timestamp are approximately equally good". Also, you and I are not in some sort of competition, so "winning" is irrelevant here. I'm just on /r/PHP to learn and share knowledge.
Very bad.
This is my favourite response (but I'm not doing it yet because php5.4 on my system yet and I only want to do one big overhaul of all the PHP5 features for each project :P) AFAIK steps 3/4 aren't required if you use this: http://php.net/manual/en/language.oop5.autoload.php
Don't use classes as namespace containers, we already have those, they're called namespaces. namespace foo; function bar() { return 'hello'; } ... print \foo\bar() // prints 'hello' to stdout Static classes are very frowned upon in PHP development, you'll see that a lot of major projects don't use a single static method at all, because it tends to introduce dependencies.
replace step three with __autoload() or spl autoload register()...
Stop throwing the MVC architecture at everything, it's not even really fit for the web.
Both. I'd also add working with others, and different editor settings for tabs and spacing and all of that. Anyone I've talked to hates (and avoid) Python because of the block system
Yes it is. There are some really bad responses on this thread. I'm surprised everyone is advocating include files on pages.
This is bad. PHP is moving towards an object oriented approach. MVC is much better than having HTML and PHP in the same file. If you use autoloading you don't need to manually include files.
I'm not, MVC is not the end-all architecture for the web, and not agreeing with the gratuitous use of the MVC doesn't mean I'm all for procedural madness. There are very good MVC frameworks for PHP, but more and more I see a crowd of developers touting this architecture as some sort of silver bullet, when there are often much better alternatives for the problem at hand, such as the RMR architecture, for example. And no, it's not fit for the web. Most MVC web frameworks don't implement MVC at all, but something highly inspired by it.
&amp;gt;When you submit the form, the server will do the validation and then either: &amp;gt;1. Rebuild the form with the errors passed into it So if you're submitting POST from "form.php" to "process_form.php", how does one transmit the data that *is* correctly filled out back to form.php (alongside the error(s)) without using GET or some bastardized auto-submit POST-based form? e.g. form.php --[data]--&amp;gt; process_form.php --[errors&amp;amp;data]--&amp;gt; form.php Or is the only acceptable solution to include the processing logic at the top of form.php (which would naturally have direct access to $_POST/GET)? There is probably some MVC shenanigans you can pull off but how do you do this on an archaic website with thousands of static pages (I work at a university w/ an outdated website)?
&gt; And no, it's not fit for the web. Most MVC web frameworks don't implement MVC at all, but something highly inspired by it. I'm not sure what's your point, then
I would like to add maybe have functions.php include files with more closely related function groups.
woohoo, lets take an easily understandable codebase and replace it with magic. yeah, lets do that! I'll be "easy", and the jackasses who point out that magic isn't really all that discoverable are just bad programmers. And with that in mind, we can really go and feel good about ourselves. rawr! magic! goooooo magic!
There's no real problem with it, as long as you are sure to only use it for a limited pool of functions, basically only things that don't benefit from being part of a class. I'm talking, for most projects, 10-15 functions tops.
A framework is not always the answer. A good developer should be more than a framework monkey. They should be able to design a code engine from scratch.
Include relevant functions. If a page doesn't use half the functions in the file, those functions don't need to be in the file. It's not too bad if only a few functions you don't use are included, but don't let it get so that the majority aren't used on each page. Group by the function goals, e.g. './functions/images.php' or './functions/database.php' and only include the function sets that the page uses. Usually in this case, you can convert such functions to classes, but there's no requirement for that.
I've developed and used my own framework for years. So I guess you could say I'm a monkey for my own code. I always like to say "Dont Repeat Yourself" and so that code has eventually turned into an organized and reusable codebase for starting new sites with certain functionality (you can always add/remove modules, including a CMS or no CMS with a script that sets up the framework code). 
No, I'm telling you, if you walk into the interview and try to argue against an industry best practice, and fight to use an antiquated datatype because you think it's "just as good", then fuck no... stay the hell away from my company's code. I posted you a whole page of things you can't do with integers that you can with DATETIME that you can't do with TIMESTAMPS and you ignored it. DATETIME has selecting and/or grouping by days of the week, adding and subtracting dates, automatically accounting for time changes and leap years. Using numbers as dates does not. Hell, I even showed you one that will take into consideration that some months have 31 days, some have 30. Like I said, you're arguing for the use of a non-industry best practice just because you think no one has proven it's better, yet you won't even read the fucking documentation? GO READ IT BEFORE YOU START YOUR NEXT PROJECT WITH TIMESTAMPS. FOR YOUR OWN GODDAMN GOOD, GO FUCKING READ IT. 
No idea, works fine on both sources for me. The error must be somewhere else.
Well dubya tee eff! The crazy cms I'm using it in is [here](http://github.com/ambiversive/asg/) if you are interested.
In load(), have you tried using the LIBXML_NOCDATA option?
I'm not sure my problem is CDATA anymore.. It is strange and intermittent.
&gt; different editor settings for tabs and spacing and all of that Python will happily accept code like this: def foobar(): ....for i in range(10): ....--&gt;print i (Dots represent spaces, arrows tabs.) As long as it's unambiguous, it's fine. Now, *this*: def foobar(): ....print 'foo' ---&gt;print 'bar' it will not, but you really **should not** be checking that in, anyways, because it's inconsistent and will look funky for people using anything other than 4-space tab expansion. For that matter, you shouldn't be checking in the first example, either, so I really think that Python's being rather loose about the whole thing. I mean, I guess your company could not have style guidelines, but that'd be a hell of a place to work. &gt; Anyone I've talked to hates (and avoid) Python because of the block system So you've talked to, what, 3 programmers in your life?
lazy loading. Figure out a naming scheme and work with it. http://php.net/manual/en/language.oop5.autoload.php 
Perhaps the feed is occasionally returning invalid XML. When attempting the load, you could add error handling: $success = $doc-&gt;load($this-&gt;url); if (!$success) { // handle error } 
While I agree with you, I think frameworks and/or CMS are pretty awesome for anyone. My last company had me and the team develop an MVC framework from scratch. It was incredibly FAST because we didn't include features we didn't need, but I think it may have actually hurt us down the road because we didn't have the open-mindedness to create something 100% solid for every possible situation. We ended up spending a lot of time re-developing parts of the framework when that time could have been spent improving client's products in a manner that made sense to them. It's very hard to explain to clients (at least from a smaller company) that you are working on improving your framework. My latest company takes a completely different approach... highly customized wordpress implemenations for any commercial website and codeigniter MVC for most of our complex applications. We are able to focus 100% on the "important" stuff. One thing I definitely don't regret about building an MVC from scratch is the experience you gain... I am able to easily work with ANY MVC/CMS framework instantly because understanding the core concept of frameworks is natural. 
That's awesome you were able to combine CMS and MVC on your own! 
What is the error output when it fails? You _are_ logging your errors, right? :)
Well the entire function stack is pretty convoluted. When I click on a feed title from within my cms, it sends a $.get request to fetch_single_rss.php which instantiates a Feed object that returns the array generated by the above function. It then formats the items into JSON and outputs it, which is then processed by my javascript and appended in the appropriate place. After some recent digging, the strange thing is that if I go directly to fetch_single_rss.php and look at the output for a feed that is failing, it is there and looks fine! So it must be failing in the javascript somewhere.. but the javascript works for *almost* every other feed. The even stranger thing is that if I break fetch_single_rss.php in such a way that it outputs something that should in no way fail (like 'doo' for title and 'woo' for url) it still fails! 
What advantage does a namespace offer over a static class? I don't see how \foo\bar() is less prone to dependencies than Foo::bar() if you're using them in the same way &gt; Static classes are very frowned upon in PHP development. Can you elaborate on that? Who exactly is frowning upon it? Static classes are just another tool to do the job, and they aren't limited to PHP. 
&gt; No, I'm telling you, if you walk into the interview and try to argue against an industry best practice, and fight to use an antiquated datatype because you think it's "just as good", then fuck no... stay the hell away from my company's code. You started off your sentence with "no" as if there's some sort of disagreement here. I know you're telling me that if I walk into an interview and state the things you've listed, then you won't hire me. That's not in dispute. You don't need to bring it up and re-clarify it again, I already understand that. (This is an example of lack of formal-reasoning capabilities, btw, which is part of what would make me hesitate to hire you in the inverse situation). &gt; I posted you a whole page of things you can't do with integers that you can with DATETIME that you can't do with TIMESTAMPS and you ignored it. Are you referring to http://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html ? If so, you're wrong. This is not a page of things you can do with DATETIME that you can't do with TIMESTAMPS. For example, the query "SELECT MONTHNAME( dateWritten ) FROM blogPosts" works whether "dateWritten" is a DATETIME or a TIMESTAMP. &gt; Like I said, you're arguing for the use of a non-industry best practice just because you think no one has proven it's better Like I said, you're continuing to conflate "A is not better than B" with "B is better than A" and forgetting the possibility of "A and B are more or less equally good". I am *not* arguing for "the use of a non-industry best practice". I'm arguing against cargo-cult programming, where you take some rule ("never use timestamp") as dogma without actually having rational reasons for these rules. Recall that these are the reasons you listed for preferring DATETIME over TIMESTAMP: 1. DB Admin software will render TIMESTAMP is some unreadable format. 2. DATETIME is faster than TIMESTAMP. 3. You can't use the functions listed at http://dev.mysql.com/doc/refman/5.5/en/date-and-time-functions.html on TIMESTAMP. And here are my responses: 1. False. PhpMyAdmin renders them in a human-readable font. 2. Citation? 3. False, "SELECT MONTHNAME( dateWritten ) FROM blogPosts" for example, works on TIMESTAMP columns. I'm not trying to convince you to use TIMESTAMP. Rather, I'm trying to make sure that when you make a decision between TIMESTAMP and DATETIME, it's an informed opinion, rather than one based upon false beliefs.
So....about those error logs?
Actually, yeah -- I built my own PHP based template object for MVC. It's fairly simple, it just uses output buffering to capture output and you just use native PHP to iterate, output and do other simple template-only stuff (since obviously you prepare everything up front as much as possible before passing it over to the template, as I see no need for additional template code when designers have plenty of online/forum/tutorial support for PHP code).
God, that's terrible.
init.php should contain your __autoload function if you go this route. That way, you can still use it to define application-wide configuration settings, like the filesystem location, intended URL, site title, etc
This guy is the hipster of PHP coders. He did RMR before it was cool. Update: [Just did some reading on it](http://www.peej.co.uk/articles/rmr-architecture.html), I don't see how it's any different than an MVC, other than naming the individual components something else. A 'model' in the MVC sense can easily account for a RESTful object (I do it in CakePHP all the time) in the same way that a 'resource' does, and the method/representation components function in exactly the same way as controllers and views. I also LOL'ed when it suggested that URL routing is evil, but then goes on to use URL routing anyway. Can you point me to a better resource explaining why RMR is advantageous over MVC in any way?
Failed: [19:15:05.915] GET http://localhost/asg/rss/fetch_single_rss.php?feed_id=386 [undefined 2478ms] Worked: [19:14:57.653] GET http://localhost/asg/rss/fetch_single_rss.php?feed_id=387 [HTTP/1.1 200 OK 432ms] Found the problem! I had a really short timeout on the get request (2.5s)!
RMR is just like MVC. Either way don't use include files. You need to separate layout from everything else. OO is definitely better than a big function list. 
That appears to be an Apache `access.log`. What I'm referring to specifically is PHP's `php_errors.log` (or similar name), which I think exists in your PHP directory by default, but you can always check the setting with `phpinfo()` or `ini_get('error_log')`. I set my `php.ini` like this: error_reporting = E_ALL | E_STRICT log_errors = On Now run your script, and check the log file (and post back here if you want). EDIT: It is odd in the access log that it has `[undefined 2478ms]` for the one that failed; that gives us 2 clues. One, something may have gone wrong with the request sent from javascript (since `undefined` is more of a JS idiom), or Apache barfed on it. You should also check your Apache error log (should be named `error.log` or `error_log` in the Apache directory). The 2nd clue is the excessive amount of time the request took... that's odd.
It was a javascript error log, and I found my problem- it was a short timeout on the get request.
I thought the excessive time on that request was suspicious :) Cool, glad you figured it out. Logs are your best friend, it's the first place I look whenever I have a problem. 
Cookies, IP, User agent.
Using a feature of the language that is well documented, and was introduced in like what, 5 years ago is magic?
can I also access information about plug-ins, like that site that tells you your digital footprint, or is that a sophisticated process?
I think you need to do that from Javascript.
thanks, will look into that with JS. Hope it's reasonably easy. Last night I fought like 90 minutes with the jQuery API, would love to have a bunch more situations like that tonight : )
I read to the bottom of this and I think you two are talking about different things: storing a unix timestamp in an INTEGER (oddmanout is talking about this) vs storing a datetime in a typed date field, i.e. DATETIME or TIMESTAMP.
IP is not really reliable. Many ISPs have more users than IPs so there are many cases where different people share the same IP.
&gt; Cookies Cookies can be cleared and only apply to the current browser. Firefox, Chrome, and Safari don't share cookies. &gt; IP Not reliable. IPs change. People work behind firewalls that don't reveal their true IP. &gt; User agent Doesn't help if using multiple browsers.
I agree, I'm not sure why it was assumed I thought otherwise. There's just a growing mentality amongst the PHP community where the acronym "MVC" is thrown around without so much as essential knowledge about the project at hand (and usually with very little knowledge of what the paradigm entails) - that's wrong. Despite my side-notes about the architecture, I'm very much fine with the available MVC frameworks on the web, and I've contributed code to several. Like I said, it's simply not a silver bullet, however.
No, using a feature that's magic makes it magic.
This might be helpful. When I was working with an xml parser in VB the presence of CDATA caused bugs because it treated the "&lt;" in "&lt;![CDATA[ " as the end of the parent item, i.e, &lt;script&gt;&lt;![CDATA[ ]]&gt; so, it thought the "&lt;" was the end of item and stopped reading the line. If this is the problem then you can do regex to remove the CDATA. I will post if if you want? 
Well I solved my problem, it had to do with a short timeout on a get request.
thanks for the update, I was about to pick out the regex ;)
Cookies can be cleared, so can html5 local cache, IP isn't reliable etc. The only truely reliable way is with user accounts, I.E. with some unique record which prevents multiple votes when it's in some state. Without, the best you can do is stop most happening, but some users will easily find a workaround and exploit it.
as I stated: I'm not looking to stop users from doing it. If someone wants to and knows how, then they can go crazy with the fake votes. I just want the majority of users to be controlled with that method, without asking for a registration to a site they'll probably visit just once anyway.
These techniques, used in combination, are pretty effective: http://samy.pl/evercookie/
thank you SO much. It's something I've always wanted to learn and this project is just the excuse.
I read a paper a while back about browser fingerprinting; they used things like screen resolution, available fonts, and zombie cookies (super hard to delete) which could be used to make a unique hash. found it: https://panopticlick.eff.org/browser-uniqueness.pdf from this test: https://panopticlick.eff.org/ methods: - user_agent - available plugins - available fonts - video support - supercookies - http_accept headers - timezone
I had completely forgotten about the fonts. Thank you for reminding me of that : )
"go get me coffee and a sandwich"
Just implement OpenID or OAuth (including Facebook and Twitter) logins. It's seriously one click for your users to log in; they don't have to provide you with any information; you don't have to store any information other than their unique ID with the authenticating server. The problem is... you don't really have a way to _prove_ that that's all your storing. Facebook, for example, will give you back some more information on the user. Information the user may not be comfortable with you having. And that may dissuade the user from participating. You can prominently promise to not store any of their personal information. People are unlikely to believe you. I still say go for it. Most people don't care, and many who do will probably stop caring over time.
I added more to my first reply, check out the pdf it's pretty smart about this stuff, they even use the absence of font detection or the presence of adblockers as a unique identifier
the fonts thing does sound like a great idea. Thanks again : )
Ignore. Static methods have a very real and useful place in programming. For example, the factory pattern uses static methods. *you probably already know this and I'm an idiot*.
Autoloader is used in many large projects. If done correctly, it can be extremely useful in keeping track of where each class is. Then you have projects like CI that didn't have an autoloader. I don't know many people who enjoy doing `$this-&gt;load-&gt;library('encrypt');` from CI over, say, `$encrypt = new Encrypt;` from Kohana.
The problem with the EFF's approach is that it fails on corporate networks where machines are identical by policy — they all look the same. Whether that's an issue depends on your target audience, I guess.
This is something that is covered by the Amazon payment API, did you read the docs yet or are you just pre-emptively trying to gather information?
You could throw the post into session then do a redirect back to form.php
The triplet is a good identifier though - none of them alone is really useful, but all three together is good enough, I think.
Yes, because you should absolutely decrease the discoverability of your project to save on typing.
While it's possible, Oddmanout specifically uses "TIMESTAMP" in all caps, along with "DATETIME" in all caps, implying that he's following the (pretty typical) orthographic practice of citing the type names in all case, so it really sounds like he's specifically talking about the "TIMESTAMP" type.
I think the point is to create a system that the average web user won't try to defeat, not to build the Ft. Knox of voting apps. The number of people who will change their IP/clear cookies/change browsers to vote twice will be insignificant enough that it won't matter.
After payment is complete Amazon will send you IPN with *callerReference* as a reference to your order. http://docs.amazonwebservices.com/AmazonFPS/2007-01-08/FPSDeveloperGuide/index.html?ipn.html Basically, before you send user to he Amazon payment page you have to store order_id somewhere whcih becomes your callerReference and when Amazon return IPN then you update your order table and put user to invoice table or wherever you wanted to do. I don't know why you have to store customers only after order has been payed for. I would suggest to create order table just before you do a payment with status "transaction_started" and then update that table depending on succesful/unsuccesful order. You have to count that IPN can fail for some reason. Liek this you have track of started transaction 
&gt; Haha, no, 3 programmers in my life... no need to be condescending, you don't know my profile or credentials to make that assertion. I work with some who are the top in their fields, I was a senior engineer right under VP of tech at a large (tech) company, now VP at a startup. I wasn't questioning your skills, but rather observing that if "anyone [you've] talked to hates (and avoids) Python because of the block system", it seems unlikely you've talked to very many programmers. Since, y'know, it has a rather large following, and any sufficiently popular language has both proponents and detractors wherever you go. I mean, my development team at work (which is only like, 10 or so people), I know of people on both sides of the fence for C, C++, Python, Ruby, shell, Javascript, and PHP. I guess I disprove myself a bit in that no one there likes Java, but I've certainly met a number of those at school. :) (I should also note that Microsoft languages haven't really come up in conversation due to us being a Linux shop, so I don't know what the opinions are there.)
You might look into the evercookie: http://samy.pl/evercookie/
thanks for tha reference. Will look into it
The biggest problem I've had with implementing such restriction is people using their mobile to mass vote for themselves. It's hard to tell one from another when they have privacy settings turned on and cookies turned off. It doesn't help when providers give a huge range of IPs for them, some lasting only the duration of the session. At most they'd just restart the device and poof, new IP. Eventually I ended up weighing votes from mobile user agents differently than if from a desktop. Most people never figured this out. Even fewer found a way to get around the problem.
I fucking love you for this tip; I shall be extra careful with mobile votes or even disable some functions for mobile
It will matter, but dealing with them manually/instituting a few sanity checks on vote-frequency will probably suffice until traction.
This may not count but I'll tell you anyway. One of my colleagues is a novice programmer with experience of running a CMS. He pushed really hard to get us to adopt a drupal based staff intranet and succeeded in the face of near complete scepticism. Our organisation has over 1500 employees but the intranet was as slow as a week in jail when only 75 users had logged in. My colleague did some investigating as it was his pet project and later came back to explain the performance issues. It seems that each page had been running at least 500 queries when it loaded. I am inexperienced myself, and guilty of much mentioned in this thread, but that strikes me as pretty stupid.
I've only been programming for about a year and a half with no previous IT background at all. I cringe every time I look at previous work but it is good to know that this is a side effect of learning new things.
school project, just wanna see what I can do with it
Unless your specific situation actually calls for it. I would have thought you'd be better off creating and storing the order in the DB before the customer goes off to the payment provider/payment is processed. Store it with an order status field and set the status to 'payment pending' or something. Then update it after a successful payment is made.
and people sue the shit out of a couple sites right now for using those type of permanent storages like flash cache. on of them was pornhub or youporn i think. the other page that got sued is something similar big.
Well youd always have the issue of people cracking the software to remove the checks if its any good. However to answer your question you'd need your program to do a check with the server to check if the code is valid. Id possibly get the server to generate a random key place it in the database along with a userID and the length of time the key is valid for. Then the user puts in the key to activate the software, it sends it to your server and your server responds with some sort of message letting it know its valid (I'm not too sure if this is the best way as people can easily spoof server responses). After that make it check with the server to see if it is still valid every time the program is opened or every hour. Once you've done that you should have an activation system which isn't easily bypassed by most common users.
He keeps calling the timestamp he's talking about a "plain number" though so I think he's talking about integers. e.g. "You're saying a plain number is better than an object designed specifically for this reason?" The original post in the thread was definitely talking about integers - he was talking about people storing the result of PHP's date() in an integer field. I found this discussion interesting though because I actually thought mysql's TIMESTAMP was stored like a DATETIME, I didn't know it used a unix timestamp as the internal representation :) so I learned something anyway... 
You probably shouldn't be using keygen, it doesn't exist in IE at all, and MS has said they will never add it. http://html5.litten.com/?p=117
after payment, most payment processors (like amazon/paypal) will send the user to a callback. the callback will have relevent details about the user purchase. use that info to store to db
I'm not sure why you are being downvoted. That's reddit for you ZOMG DONT LIKE CLICK DOWN ARROW!
I had a Drupal site which had anonymous voting, and a few users were cheating by flipping their iPhones to airport mode and back so that they would receive a new IP address. These are not what I'd call particularly savvy users. IP is no good, user agent is not helpful. Cookies can be deleted.
I think the reason people are responding like they are is that its not that the Ft. Knox of voting apps is the goal. Its just that its fairly easy to circumvent and the more voters you have the higher the chances are that it will happen. All making it slightly more difficult does is give an advantage to more technically savvy users. Its important not to provide a false sense of security.
The Factory pattern also introduces dependencies and is usually a sign of bad architecture. Don't use classes just for the sake of it (hint: your code is not OO just because you use classes), when other tools are a better fit for the job.
I can echo this. I had a contest that users admitted to doing exactly this. In my case, they didnt even restart they just flipped to airport mode and back.
An encoder such os [Ioncube](http://www.ioncube.com/) or [Zende Encoder](http://www.zend.com/en/products/guard/) and a licensing system such as [PHPAudit/SPBAS](http://www.spbas.com/) or do it yourself using [PADL \(PHP Application Distribution Licensing\)](http://www.phpclasses.org/package/2298-PHP-Generate-PHP-application-license-keys.html)
has that actually happened? You have any references. I imagine if you stated what it was being used for in the t and c's it wouldn't be so much of a problem.
cookies.
What are you trying to accomplish?
Thanks for pointing out this great element! [here's something I found](http://lists.whatwg.org/pipermail/whatwg-whatwg.org/attachments/20080714/07ea5534/attachment.txt)
It sounds like a thoroughly under-implemented specification. I wouldn't ever try it.
99% of users will not change their IP address or User Agent. You cannot stop the 1% from voting twice. Protip: Don't let users know they can't vote again. Just don't record duplicate votes. That way some of the 1% will not try and circumvent the system (because they'll believe that they're already gaming it).
There was a lot of truth to that statement...in 2004. IMHO PHP is still not as fast as it could be, but other than that it's the best language to write in for the web right now. Pointing out all of the faults with one language and not pointing out those of another is disingenuous. Python is not faultless.
That's an amazing idea. I can't believe I never thought of that, I'm almost embarrassed. Thanks so much.
&gt; developers aren't pretending and overcompensating with design patterns there What features does Python have that PHP doesn't that fundamentally changes the way PHP implements OOP? &gt;Python is indeed the better language than PHP. No denying there. ... &gt;And the built-in regex library of Python is just so much behind the times, it's not funny anymore. As someone with a Unix background, I'd consider a bad native regex implementation a deal breaker for any higher level language to be considered "better" than another. 
If you like ruby, you'll love perl!
use an sha1 hash of a base64 encoded encrypted string... here is what I do... I have a user database and every user has a unique 16 character randomly generated salt key. For every license, I use a serialized array of the license information. You can use the same unique key to decrypt it. $verification_key = sha1(encrypt($sixteen_char_salt, $serialized_array)); public function encrypt($salt, $crypt) { return trim(base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $salt, $crypt, MCRYPT_MODE_ECB, mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND)))); } public function decrypt($salt, $crypt) { return trim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $salt, base64_decode($crypt), MCRYPT_MODE_ECB, mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND))); } You have to store the verification key, obviously, otherwise you could just use the base64 encoded value which can be directly decrypted.
&gt; What features does Python have that PHP doesn't that fundamentally changes the way PHP implements OOP? Everything is an object. Functions are objects, base types are objects, classes are objects - first class all the things. Wheras PHP at the core is a procedural language. (Not that there's anything wrong with that. Quite the contrary. People just don't like it when you point that out). Multiple inheritance is quite a fundamental difference. Syntax for getter/setter properties (there's a patch for PHP 5.4 though). Most of the more coherent syntax has to do with a single identifier namespace; for example allowing to bind real methods. Method chaining right after instantiation (avoids the commonplace static factory method workaround). More important in my opinion are the omissions however. PHP follows a more stale semantic for non-scripting languages. Like having access modifiers in the C++ incarnation. (Many people don't understand the origin and its use for ABI constraints.) There's however also the occasional case where PHPs simpler syntax constructs are significantly more charming. And you cannot exactly look at OO utilization separated from the other language features.
"Everything is an object" can slow shit down. PHP is a C-based language, thus not everything needs to be an object. First-class functions are also not a core aspect of OOP. Also, every language is at its core a procedural language. Even LISP is procedural when you get right down to it. Your other points are valid, but they don't fundamentally change the way programmers write code - just what the code looks like.
From link: &gt;It’s hard to find examples of &lt;keygen&gt; being actively used today. Well, no shit. Obviously that will be the case if the browser with the largest market share doesn't support it. 
From memory, last time I did something like this: function lol_make_a_code($int_required_code_length = 8){ $str_code = ''; while(strlen($str_code) &lt; $int_required_code_length){ $str_code.= base_convert(rand(0,36),10,36); } return strtoupper($str_code); } 
PHP is the wrong tool for the job... however Gearman would work nicely.
For some reason there isn't yet a shim/polyfill for it https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills But IE always supported similar functionality through some ActiveX API, so it should be reasonable to emulate &amp;lt;keygen&amp;gt; nowadays. (Or do the sensible thing. Don't support IE users. They've chosen [whether consciously or not] a browser that doesn't support it. Because that's how the vendor calls the shots. Who are you to force extraneous security or usability onto them?!!)
Yeah, but not enough to matter. Ultimately, in a datareporting system, generating/gathering the data will take eon's longer than almost any rendering system you could pick. Generative HTML is neat because it opens up the option of modifying what `echo h1("something")` means later down the line across everything, where as Views will give you more detailed control, at the (general) cost of being more verbose. 
Any recommendations of what I should be using? I want to create a backoffice and between other things it'll have to zip/encrypt some files on the server side, manage clients, start some services/scripts in the server and interact with 100+ small SQLite and one MySQL databases. I first thought of PHP because of the number of clients I'll have (40+) and because of the good support for SQLite3 and SSL, but this lack of of threading capabilities is really showing to be a pain in the ass.
In terms of modern 5.3+ code, take a look at the Symfony2 framework and Doctrine2 ORM, which both take full advantage of the PHP OO features, namespaces, etc. The Symfony2 "book" (official docs) is quite good in my opinion: http://symfony.com/doc/current/ Symfony2 has configuration via XML, YAML, or annotations, so in that regard it may be similar to Java frameworks you've used in the past.
Just a note: All of those would create a new _process_. There is *no multithreading* in PHP. You may want to look at proc_open, though I don't know how it works on a Win32 system. But as others have pointed, PHP may not be the tool for the job.
I suspect they didn't "make it up" as much as they are just passing along stuff from their client company. It's probably the client company that made it up, or don't know the popular acronyms enough to know that even if that's the term they use internally, it's not a commonly-used acronym in the larger dev world
... and now you understand what differentiates good technology recruiters from bad ones :)
So yeah, it bothers me that there are so many people on this thread saying yeah put an include at the top of the script. Its unfortunate that so many people are using PHP like this. 
You aren't going to write code where everything is independent. Its wishful thinking but somewhere in your code (usually a lot of it) is going to be specific to the project. The factory pattern is fine and works great with things like interfaces and abstract classes.
Include include_one and reqire_once and require are all sloppy and unnecessary. Your code shouldn't be dependent on file system paths. Autoloading is a great feature.
Allright, I think I should add my little experience to this post. I know it's not PHP but the subject still suits. I am a peer tutor for a high school Comp Sci class (Java), which basically (should) mean that the teacher teaches the students, and I fill in the gaps, or answer questions that the students don't feel comfortable asking the teacher. My complaint is not with the students but with the teacher, but first some backstory. The school's Comp Sci class has been a rather large clusterfuck for several years now. I had taken it Sophomore (AP Comp Sci A), Junior (AP Comp Sci A Independent Study), and now I am observing it Senior year. The first year it was taught by a nice woman who also taught math (it's not in the budget to hire two separate teachers, so they now look for an Pre-AP Algebra 2/AP Comp Sci teacher, which is part of the problem.). She was great except when she showed the powerpoints (part of the lesson plan), her only confirmation that we understood them was the voice of one savant in the class, that she assumed had been informally elected as speaker for the rest of us. I understand that it should have been our responsibility to "wait, can we go back over that", but on the rare occasions someone did act, the teacher would simply repeat what she had first said, and then wait for the savant's approval. When she assigned labs, we would stare at them for days, looking back over the powerpoints in self-made study groups, until we gave up and asked for her help. She would come over, write the lab for us, and then give us a 100. That was awesome for the first week or so, but those of us who truly wanted to learn were disappointed. Again, when we asked her to explain to us what she just did, she would refer us to the powerpoints. We failed most of the tests. My Junior year was horrible. I thought Independent Study would be fun. We(a couple friends from last year's class and I) had forgotten a substantial amount of Java, but felt confident that some of it might come back, and that we could, you know, independently study. The teacher immediately gave us a lab that had to do with checking airplane seats or something. We started in, but were hindered by her glares and shouts at us for talking too loud while she was trying to teach a lesson to the rest of the class. I wish I was kidding, but we were honestly talking at [about 25 dB](http://www.soundbytes.com/page/SB/CTGY/decibel-levels). That - coupled with the pre-historic CRT monitor(ed) computers that would freeze immediately after start up for at least 20 mins (50 minute classes), and would die altogether if (god forbid) the (XP) Start Menu button was pressed, this made our airplane assignment very difficult. We had completed 1 of about 7 classes (.java class not curriculum class) and were experiencing trouble with the next that warranted a question for the teacher, her C training (not Java...cause that was a good administration move) kicked in, and she took it as a sign that we were all complete dumbasses, and decided to go back to the basics. The very basics. In a week we had gone from writing one very high leveled part of a program to "YOU KNOW NOTHING!", and we were forced (not even kidding) to write the Hello World! lab. She ended up having multiple emotional breakdowns from a strange and apparently turbulent social life so much so that they fired her mid year without a replacement lined up. We played Unreal Tournament, Rubber Ninjas, and Liquid Wars 4 for about a month before the System Administrator / Tech Guy was brought in part time to finish out the year. He had some difficulty interacting with the students, but it was much better than before. This year has been interesting. They decided to bundle the Pre-AP and AP Comp Sci classes into one, thinking that being able to teach two maturity / difficulty levels at once would be possible, even easy. The teacher they hired (again for ALG 2 / AP CS) was trained in JavaScript which the administration probably thought "was just a different version of Java". The prospective teacher did not correct them on this until shortly before the school year began. The school paid for a "Java Immersion" course that he took. There were two results of this. *He now believes the best way of teaching (anything) is immersion, regardless of age, maturity levels, interest in the subject, or any other factors you can name. *There are one or two topics during this course that he remembers distinctly. I don't know if it was because he didn't have to sit in traffic that morning, or he had an extra cup of coffee, it really doesn't matter. The point is, the man thinks **EVERYTHING** can be solved with recursion Some undesirable results have...resulted. On the first day, he explained his philosophy behind teaching (immersion). Which meant on the second day, he asked these kids (with no prior programming knowledge of any sort) what the program he displayed on the screen did. (The program was basically a simple banking example, with hardcoded objects acting as "accounts". These objects were created in a bank_runner.class, and were instances of a bank_account.class). The program featured stuff one usually doesn't see until the 5th or 6th powerpoint (on OOP), like methods, multiple classes, objects, as well as (can I say outdated?) libraries like Buffered reader to take in input. The students were clueless, and it was my apparent job to help them. We are now 2 weeks + 1 day (assuming 5 teaching days / 1 week) away from half the year being over, and we haven't even cracked open the "How to draw a house in ASCII art!" powerpoint. There are still kids that ask me what System.out.println() does. The teacher frequently "reviews" over subjects he hasn't actually taught the class, proclaiming "If you guys don't know this by now...because we've been over this a lot" I have started to take note of some of my favourite quotes of his, including but not limited to: * "Well, Linux is just a big array..." * (And not 15 seconds later) "Linux is like recursion..." He enjoys spelling out words like they were meant to be acronyms(which is somewhat plausible when dealing with MySQL, but not as common (or even correct) when in Java: * "Yeah, like double, long, short, I.N.T" * "Oh yeah, phpMyA.D.M.I.N is great" And the default response to anything I say, whether it was a question or a statement: * "Oh yeah, it's like recursion!" Hell, he probably uses that outside of Comp Sci, I can see him at Subway: "Would you like pickles, olives, or Jalapeños sir?" "Oh yeah, they're like recursion" He wanted to make the students do the GridWorld TicTacToe lab. This was the LAST lab assigned in the curriculum, and he wanted to do it as an "introduction to GridWorld". Not to toot my own horn...oh what the hell, last year, my class was given the same exact lab. Because of poor teaching, it took us over a month to complete, and when I say us I mean me. I proudly say that I was the only one to waste countless hours on the weekends to get the mentally handicapped pieceTester class to work, and finally the program. This year's teacher believed (before he knew that one was given the shell already, and was only(I toss that around too easily) required to fill in the methods) that we could probably complete it in about 2 days. And that it would be incredibly easy if we used (you guessed it) recursion. So far i've only had to step out of the room once due to simultaneous hilarity / depression / frustration, this is the conversation: Teacher: "So do you understand?" Student: "Wait so println() is basically like print() with a \n at the end?" Teacher: "EXACTLY, OH MY GOSH, YOU'RE GOING TO GET A 5 (out of 5 on the AP CS exam)" This should be a fun year.
Seriously, PHP isn't the tool for this kind of thing.
I do this, basically. I have function files named like so. func_strings.inc.php func_accounts.inc.php foreach (glob(getenv("DOCUMENT_ROOT") . "/config/*.php") as $file) { // goes through each php file in config folder... if (strpos($file, "func_")) { // looks for file containing "func_"...could be changed obviously to only work on .inc.php, etc. require_once($file); } } This way, it's easy to add more, change them...
I think you're honestly going to have to split this up into two parts... the front end and the back end. Sounds like the back end will be a cronjob that fires off and builds packages or something (not entirely sure what you're trying to do), and the front end will be php which will allow users to access those zip files created. You the db as a talk between. I'd personally use Java for the back end, but that's because I know the language rather well and can manage stuff like that without too much trouble. Maybe Python would work for you as a back end scripting language, but it's not always on Win boxes but Java usually is.
I think you would probably do something like this: http://devzone.zend.com/1098/generating-and-validating-web-forms-with-pear-html_quickform/ You'd just need to write a function to read your array and use the PEAR class to build a form from the contents.
I don't really mind that not everything is an Object in PHP. Even in Java not everything is an Object. However, what I do miss for design purposes, is a method visibility between public and protected (such as package level visibility in Java). This really makes some design patterns of Java not being implementable as strongly in PHP. Another Issue I have with design patterns is lack of signature overloading which I also love in Java. Python on the other hand, doesn't have any access restrictions AFAIK, making everything public. In my mind this is less OOP, because an Object is supposed to encapsulate behavior - and hide the implementation details giving you an API you can rely on regardless of those details changing. in Python there is no grantee anyone will use your object in your intended way, so it pretty much breaks the foreword compatibility offered by having a public API and hiding the implementation behind it. 
This is off topic, but displaying tables like that is bad practice in my opinion. Wouldn't it be better to have a static table rendered first and then have javascript create that sort of functionality afterwards? What would happen if the user didn't have javascript enabled or an error occurred? 
"sue the shit out of"? Citation please.
Generating HTML programmatically leads to leaky abstraction.
I think he's being downvoted because he's not really that correct. It's less work for most people to set up a new account than to evade the more pernicious multi-factor browser fingerprinting tools.
Heh, I did the same thing about 5 years ago but never really got it to a state fit for public release. Maybe some day...
google "flash cookie lawsuit". it's not really about flash, it's about persistant cookies.
With Zend Framework (specifically Zend_Form), you can build all of your form logic with arrays. That includes rendering (through decorators), validating, and filtering user input. There is a bit of learning overhead here, but ultimately you can create your form logic incredibly quickly.
I seem to remember something in Symfony that did nice form creation/validation, but I didn't start using that aspect of frameworks until Django. Ah, [here we go](http://symfony.com/doc/2.0/book/forms.html). Also, &gt; The Symfony form component is a standalone library that can be used outside of Symfony2 projects. For more information, see the Symfony2 Form Component on Github.
I've used symfony forms extensively. They are great and somewhat intuitive. Extending them is a breeze a well.
CakePHP's form helper. Even better, if it's a form that adds/edits/deletes data from a database, use the Bake script to generate a scaffold.
Definitely take a look at either Symfony Form or Zend Form; or both. I've used Zend Form extensively. Its default markup isn't exactly ideal (dt/dd tags), which forces the developer to jump through the hoops of creating decorators. Decorators are a hassle in Zend Form. I've been working more with Symfony Form lately, and I think I'm liking it more than Zend Form. Either option has a bit of a learning curve.
PHP could make sense with an all-object system (see phpreboot), but necessary it is not, indeed. The thing with package-level visibility is that PHP5 really just copied the first chapter of C++ for dummies. Namespaces would have been an opportunity to introduce friends or script visibility, but it didn't. Internally it's just a hack around the lookup tables.. Access and visibility to me is not a pure OO concept. It's static-linking baggage. Simula introduced a simple version, and Smalltalk only a built-in policy, which C++ and Java just macerated. It rarely makes sense to me in scripting languages built upon the dictionary/hash as central data type. This is why personally I prefer the simpler model in Python and Javascript (aware that they're about to add baggage). You just need more personal constraint than prohibition per syntax in such languages. (Messaging is the core concept behind OOP, and a sensible interface often sufficices to make people eschew interna.)
&gt; The court dismisses the claims against the advertisers with prejudice, finding that any amendments against these defendants would be futile. &gt; This is the second lawsuit over flash cookies to meet a chilly reception in court. That's not what I call "suing the shit out of".
you want to battle this out in court? got too much money?
Thanks much for taking the time to reply. I'm glad the Symfony2 docs can be considered good examples (I believe this is their intended framework). Any chance you can comment on the quality of PHP support in Eclipse? I am torn between using their PDT module or just using vim rails style.
jFormer - [http://www.jformer.com/](http://www.jformer.com/) - nice jQuery / php based form framework. It generates all of the javascript / jQuery and HTML based on a series of PHP function calls. Some nice features, such as instantiable fields and groups of fields. The included CSS also generates nice looking forms. Based on your description, this sounds like exactly what you're looking for. 
I know some people like Eclipse PDT, but I don't really know much about it, sorry. I use [JetBrains PhpStorm](http://www.jetbrains.com/phpstorm/), which is a cut-down version of IntelliJ just for PHP. I really like it, but it does cost money, unlike Eclipse :) They have a free trial, or right now they are also releasing public betas ("EAPs") of the upcoming 3.0 version.
Okay, punk, see you in Southern District Court of New York. There will be blood.
What's wrong with the decorators, I don't like the dd dt ones so I wrap each element in a div instead. it's as easy as $this-&gt;clearDecorators(); $this-&gt;addDecorator('FormElements') -&gt;addDecorator('Form'); $this-&gt;setElementDecorators(array( array('ViewHelper'), array('Errors'), array('Description'), array('Label'), array('HtmlTag', array('tag' =&gt; 'div', 'class'=&gt;'element')) ));
As somebody who has never used Zend_Form, I wouldn't have had the first clue wtf you were doing with that snippet of code.
Umm...okay?
The code is not very readable.
Wow, this definitely makes me never want to use Zend Form. 
different strokes for different folks
Never really found one that does things sanely. You always need something which the framework can't quite provide and the effort of implementing it in the framework is such a pain in the ass it's easier to use regular forms.
Drupal's form API is great but it has a bit of a learning curve in that you really need to understand the render array structures. But yes, they have beaten you to the punch.
You're being sarcastic, right... right?
As somebody who spent a few years hacking out zend forms on a very large project yeah..... the decorators take some getting used to.... Apparently they were planning on looking at it for ZF2, haven't seen where they got to with that though. That being said. If you ignore this snippet and look at the actual usage of the form validators, filters etc, it's actually really good. Just those decorators..... ugh
Maybe I'm weird, but I like them
Reading all the comments there I got depressed and have decided to begin learning Python. My understanding of PHP is extensive and I had studied its underlying implementation. I don't regret learning PHP. Back when I chose to concentrate on PHP instead of Python, very few people were using Python 3 and PHP had better OOP than the joke which was Python 2. I'm a CS researcher, not a web developer, so I lost nothing in terms of career. It's onwards to new pastures now for me. (= 
Yea, **signed*.
Formo is a module for Kohana 3. You could port it as standalone script! :) https://github.com/bmidget/kohana-formo
LOL @ joke which was python 2. Most pythonistas are still using 2.7 or so. Perhaps anything before 2.2 wasn't particularly impressive, but even saying that is a stretch. *ninja edit*
The comments on that thread are mostly deplorable, as are most "language flame war" threads. PHP and Python are both good tools. The biggest differences between the two language are focus and syntax. Choose the language which fits your task and personal preference and STFU about which language is "better". It's like arguing over whether French or Italian is better.
TIL that the only alternative to autoloading is raw include and require statements. I suppose I'm just more imaginative than you.
&gt;In Polish, for example, plural forms differ for various numbers: &gt;&gt;1 plik (file) &gt;&gt;2-4 pliki &gt;&gt;5-21 plików &gt;&gt;22-24 pliki &gt;&gt;25-31 plików Unrelated php rant: Why must languages have these silly quirks?! Surely there is no benefit in having multiple plural forms? (Awaiting someone to prove me wrong)
French of course. It's more widely spoken and other modern languages have words rooted in French. It also has a prettier syntax and it's what I know better, therefore it must be better than what you know. Oh right.
Use the date class.
Can you give me an example on how would you do this with the Date Class? And by "this" I mean given a date add a month. Tks!
If you're a CS researcher, you should realize that turring complete language is a turring complete language. There's a comment on that thread that mentions how Facebook used to be completely written in PHP, however they started to move different parts to different languages. PHP is a very good language, for what is was designed to do. It's designed to be a simple presentation language that allows you to manage the front ends of your websites easier. Often I get in conversations with people about how to design their new sites or programs, and I tell them always the same thing: PHP in the front, Python or Java in the back. Write it so the two sides use web services where possible, and your architecture is no longer completely language dependent. Getting in an which language is better over all fight is just stupid, because no one language can truly rule them all, other than machine code, but good luck writing a script in that.
&gt; ~~if the day is not in the end of the month PHP will add a calendar month if it’s in the end of the month~~ PHP will add the number of days that the current month has
the real wtf is using strtotime for this, this is exactly what mktime() is for
I think mktime also has it's problems: http://www.php.net/manual/en/function.mktime.php#74241
Anything but Zend. Zend_Form is terrible.
That's not a problem nor a WTF. It's working exactly how the example requested it to be working. You're dealing with variable day months, and trying to use it as a perfect absolute system. Perhaps you need to approach the problem in a different way to get more consistent results. Neither of the functions posted could (or even should) try to guess how you intend to use it, and change it's output.
Use Y-m-t instead.
&gt;Neither of the functions posted could (or even should) try to guess how you intend to use it I understand that, but shouldn't be at least documented that if you input a date that is in the end of the month when you add a month to that date PHP will add the number of days that current month has? At least I could not find mention to this in documentation. Why if you add a month to date 2012-02-01 you will get 2012-03-01 but if you add a month to 2012-01-31 you will get 2012-03-02? EDIT: Run this two examples to get what I mean for ( $c = 0; $c &lt; 12; $c++ ) echo date("F", strtotime("+" . $c . " month 2012-11-01")) . "&lt;br&gt;"; and for ( $c = 0; $c &lt; 12; $c++ ) echo date("F", strtotime("+" . $c . " month 2012-11-30")) . "&lt;br&gt;"; 
It's simple, when you request "+1 month", it's adding the number of days in your current month. When you input a date to the end of the month, the rule doesn't change. There is no special case scenario happening. Try this as a test: #!/usr/local/bin/php &lt;?php $start = strtotime('2011-01-01'); for($i=1; $i&lt;60; $i++) { $plusone = strtotime('+1 month '.date('Y-m-d', $start)); print 'start = '.date('Y-m-d', $start); print ', +1 month = '.date('Y-m-d', $plusone); print ', difference = '.(($plusone-$start) / 86400).' days'; print "\n"; $start += 86400; // advance one day } ?&gt; (My test program shows a weird result ~March 14th, but that's a DST change)
Thanks, I'm currently looking into Python it does seem to be a more robust/clean language, I guess it's just a matter of learning to use one of the frameworks. I'm inclined to choose Django.
Nice little script, got some weird results with it in then last days of February. Here's my output on a Debian 6 machine: http://scrp.at/aLP NINJA EDIT: what's weird for me is this: &gt;start = 2011-01-31, +1 month = 2011-03-03, difference = 31 days &gt;start = 2011-02-01, +1 month = 2011-03-01, difference = 28 days 
That's not a "very good discussion". It's just a circle jerk. Any good developer should learn every new language he can when the opportunity presents itself. People who say "Oh language X is fine, but the language I program in is far better." are just being ridiculous. 
[Choice-supportive bias?](http://en.wikipedia.org/wiki/Choice-supportive_bias) you're justifying the language on one of its faults, it SHOULD figure out which month you're adding to and calculate the appropiate number of days because he's not adding "30 days" he's adding "a month" or just disallow the operation completely, by giving some result is doing exactly what you say it shouldn't: it's guessing. imo adding "a month" should take you to the same day you're in but on the next month and if such date does not exist throw exception but disallowing the operation entirely is also valid.
1st line, it's still in January, so it's going to add 31 days. 2nd line, it's now adding the proper amount of days for being in February. The weird results with the last days of Feb is because the target date is falling into a timezone change. edit: the rest of the year is going to look weird, because $start is still on non-DST time. You have to start at March 15th for all the DST calcs to not look weird.
Thanks Engival, nice explanation. I got it now.
Pythonistas, eh? What does that make PHP developers? 
You want to be able to fire off a zip/encrypt job during the execution of a php script? Create a pending_zip_jobs table in your db and run a cron job to fulfill them. No need to make php do everything.
 echo date("Y-m-d", strtotime("+1 month 2011-11-30")); returns: 2011-12-30 // wtf? but I wanted 2011-12-31 This is why you don't use months when calculating dates. A month is ambiguous. Think about it - since months vary, which month is it supposed to use to calculate 1 month? November or December? Since The starting date is in November, it assumes that is the first month it should start calculating from. So, for the first iteration, 1 month is 30 days. However, it recalculates what a month is for every iteration. consider this: echo date("Y-m-d", strtotime("+1 month 2011-11-30")); // 2011-12-30 or 30 days echo date("Y-m-d", strtotime("+2 month 2011-11-30")); // 2012-01-30 or 61 days echo date("Y-m-d", strtotime("+30 days 2011-11-30")); // 2011-12-30 echo date("Y-m-d", strtotime("+60 days 2011-11-30")); // 2012-01-29 Notice how when I use +2 months it suddenly becomes 61 days. This is because it starts in December on the second iteration, and it recalculates what a month is based on that. EDIT: I don't know why you guys are downvoting the OP. I think this is easily something that anyone could become confused about, and is a legitimate question. The answer could very well help out other people.
Just a quick note: there are very few postings in indeed.com looking for straight python developers, especially when compared to postings looking for PHP developers.
This does not solve the problem. Have you even tried this? $date = new DateTime('2011-11-30'); $newdate = $date-&gt;add(new DateInterval('P1M')); echo $newdate-&gt;format('Y-m-d'); // 2011-12-30 This is the problem here. Someone provides a bad/non-functional answer and people vote him up for it.
The problem here is that you *don't understand how it works*. It follows a perfectly logical and predictable pattern.
If you haven't used it sure, to me it's normal.
Tks SkepticalMartian that makes perfect sense I just wish that was documented :/ I just stumble upon this because as you probably know when we are talking about on going contracts that should be billed in the end of the month you got to know what's the end of the month when you add n "calendar" months to 2011-11-30 date for example. Anyway if you use this piece of code: $tmp_date1 = strtotime("+1 day", strtotime("2011-11-30")); $tmp_date2 = strtotime("+1 month", $tmp_date1); $final_date = date('Y-m-d', strtotime("-1 day", $tmp_date2)); there should be no problems regarding "end of month" calculations. 
Also a quick note: Python gets you BETTER jobs than PHP. 99% of the PHP jobs are ad agencies (if you're lucky) looking for somebody fresh out of highschool to throw together wordpress blogs. Whereas most Python jobs are (at least) interesting or well-paying, if not both. (Note: Not trolling, I've been paid to code in python and php since the turn of the millenium.)
If we don't ever mktime(), how can we ever tktime(); ?&gt;
fuck that guy. I had a guy in college who would always pull that shit on us. one time he told us he had to go to vegas *the weekend* when we planned on finalizing and finishing up a big upper div project. yes *had to*. needless to say, i don't talk to that fucking leech anymore, and I hope you don't either (your story).
a documented bug does not become a feature (neither a documented design decision that does something wrong)
Why, you spend a few minutes (seconds with copy paste) to set up a form and then validating is a breeze. Some people complain about the decorators but they just haven't read the documentation.
Except that it isn't a bug, that's how it is supposed to work. This is the thing you don't seem to get.
it's not supposed to work like that, the devs chose to make it like that but that doesn't make it right.
Aaannnddd... here we go again. This is a circle jerk post to get more /r/PHP members to downvote in the religious war.
I haven't used the Symfony2 forms, but I've used the 1.x ones pretty heavily. They work very well as long as you aren't thinking too far outside of the standard form behavior box. The 1.x ones, however, are very much not standalone.
*Turing
sometimes I stuttter 
Then how is it supposed to work, and why is your answer so definitive? Just because something isn't documented, doesn't instantly mean it wasn't intended. The way it works is perfectly logical.
Poster is a known troll. Every time he posts in /r/php it's to shit on it somehow, and to promote python or ruby. The discussion in /r/python is exactly what you'd expect - language bigotry at its finest.
No, you're pretty much trolling.
PhaPers
Suggest an edit to the phpdoc team. I'm sure they'd be happy to amend the documentation.
I'm trying not to get into the PHP vs Python argument. I only want reddit to work properly.
strtotime is fairly complex function. I'd recommend any PHP programmer who's going to do extensive date-related programming to view the actual source of the function. Also worth noting: &gt; echo date('Y-m-d', strtotime('last day of january 2012')); 2012-01-31 &gt; echo date('Y-m-d', strtotime('last day of december 2011')); 2011-12-31
I used to be a PHP programmer, I worked in almost all the big ad agencies in Toronto. It was a fine language and got the job done. But I often saw friends replaced with high schoolers because they could be paid less. Also the people I worked with didn't really care about what they were doing. It was a pay cheque to them. I was upset about my career path after that. All the postings in the job bank for PHP seemed alright, until I showed up for the interview and they're looking for a PHP programmer because that was the only language they could remember the name of. I work full time in Python now and work with bright individuals who love their jobs. I said I wouldn't get into the holy war, but TylerEaves point is the most identifiable argument for me and I had not seen it brought up.
&gt; copy paste Using that as the basis for development strikes fear into my heart as someone who has to maintain a system built like that.
Actually, most of strtotime's accepted inputs are [very well documented](http://php.net/manual/en/datetime.formats.php). They just happened to miss this in the docs.
Really you're going to put your include statements in a class somewhere. Or a function. So you can do load-&gt;('thing'). Just to be imaginative? Or is your imagination going to do file_get_contents and put that in an eval function?
Indeed, I've never seen that before. That's probably a lot easier than sifting through a large FSM :)
[O Rly?](http://www.reddit.com/r/PHP/comments/mjpvc/very_good_discussion_over_on_rpython_about_php/c31mz5p)
Huh strange, I thought it was an interesting read.. and quite consistent with a lot of other things I've read about Python. (Also, _XKCD_ likes Python, that has to mean something..)
You can find it as a link off the [strtotime page](http://php.net/strtotime). It's in the "See Also" section linked as "Date and Time Formats". I find that's a bit easier to remember than the full URL that goes directly to it.
I don't copy it evetytime. I extend the class and reuse. The copy paste is for other people to take it from say this comment and paste into their code. 
I've remove this comment due to it being uncivil, specifically in targeting joshuajonah directly. Please keep the tone friendly. ;)
This subreddit is not for advertising. Please do not post such things here.
I'll see about amending [this document](http://php.net/manual/en/datetime.formats.relative.php) to include the mentioned behaviour.
I know the memes are wrong here, but I would have personally laughed if you had said "**CHALLENGE ACCEPTED**"
:P Memes are fine in the comments. It's just image macros/rage comics that we hate. So yes, "[**CHALLENGE ACCEPTED**](https://bugs.php.net/bug.php?id=60353)".
Held by Matthew Weier O'Phinney.
That's the one thing I hate about PHP: we don't have a hip name that sounds like a job title for someone who serves overpriced coffee.
That's pretty misguided. I work for, and have various friends working for companies involved with serious and very interesting PHP projects. From my job-seeking days as both a Python and PHP developer, Python offers were rare and usually for support tasks, with the PHP offers being much more varied (with a fair share of horrible Wordpress/Drupal/Joomla grunt work).
It means he likes Python. Randall likes Python.
I would use a CRON job that would run every few minutes. It would grab all the feeds and compile them into a text file. All the web page has to do is read in that file, wrap some HTML around it and echo it to the browser. Hope this helps
But would you do it all in one big long script or break it up somehow into bite sized chunks?
PHP is a linear, single-threaded language that is not event driven, which makes it less than ideal for projects like this, particularly as retrieving hundreds of RSS feeds could take wildly varying amounts of time depending on network latency, which would leave you exposed to timeout risks. The easiest way to do this, by far, would be to fork the feed retrieval into many processes through the CLI (essentially applying a [map](http://en.wikipedia.org/wiki/Map_\(higher-order_function\)) process to every thread in your list). Then, when these have completed, run a [fold](http://en.wikipedia.org/wiki/Fold_\(higher-order_function\)) function on the results that were retrieved. Unfortunately, since PHP is not event-driven, you'll have to run this process separately once all feeds have been retrieved.
You talk funny! edit: Oh come on I'm joking lighten up! 
I would assume that some of the feeds might break so I would do each in its own cache and re-assemble them at the end. If one feed fails its cache copy (done on the previous sweep) could still be used.
I'd do it in chunks. Process maybe one RSS feed in each execution. Execute once every minute or so. Myself I'd keep track of progress in a database, but there are many other ways.
Beware the groupthink. The amount of Stockholm Syndrome in this thread is fairly shocking. Never seen a group of people so happy with their tool get so defensive...
make a queue (like a table with timestamps of when the rss was scraped for the last time). then create a script which retrieves one or two entries at a time, scraps, saves in a table and updates the timestamp. then add a cronjob entry for that script, each…5? 10 min? …or just go ahead and use superfeedr.com with pubsubhubbub, not a bad option either and pretty cheap
^ yep, I'm definitely more imaginative than you are.
This is actually pretty complicated if you want to do it properly. But at the most basic level you can just put all the feeds into a feeds table with a last_updated timestamp and a run_interval stored against each one. Then you can run an update script with a query to get all feeds that need to be updated and do something for each one - i.e. parse all items into an articles table and update the last_run time. The update script should be run on a cronjob every ~5 mins. Implementing locking to prevent concurrent update scripts being run is also worth doing. I do this with file locking because it's simple (i.e. lock an empty file for exclusive writing at the start of the script - the lock is automatically released when the script terminates and if another script tries to lock it it will fail. Though it doesn't work on Windows).
If you're looking to track RSS feeds, you might want to look at [FlexGet](http://flexget.com/). It's not PHP, but it's very well-implemented.
wow this turned to be a productive post even with all the downvotes. Tks frozenfire.
Funny you say that, because all I see is mindless PHP bashing.
[Gearman](http://gearman.org/) FTW! I do major map/reduce style algorithm crunching with Gearman and PHP and it is simply awesome.
Sounds like you were working junior positions and got replaced by more junior people. All's fair in love and war. Once you start calling yourself "senior", though, the game changes. I'm making a comfortable salary in Texas, working on a large, custom ecommerce application with a team of smart individuals. I can't see myself getting replaced with kids straight out of high school.
I was trying to create a easily maintainable solution, so I could deploy this solution without much hassle configuring the target machine, I wanted to keep the number of different tools/languages used to a minimum, and so I thought I could have PHP doing all the job since it has so great support for SQLite and SSL and could run my jobs as a typical script, but I now understand that I amm by no means using the right tool for the job, maybe I'll have more luck with Python, learning a lot and enjoying so far. 
Definitely Gearman. If you have a task that can easily be reduced to steps then gearman and map-reduce is exactly what you need. Having to parse hundreds of RSS feeds just happen to fit this.
This is markup not layout or design.
Not 100% sure what you mean, but you don't need to use bindParam() - you can bind an assoc. array via named parameters: # the data we want to insert $data = array( 'name' =&gt; 'Cathy', 'addr' =&gt; '9 Dark and Twisty Way', 'city' =&gt; 'Cardiff' ); # the shortcut! $STH = $DBH-&gt;("INSERT INTO folks (name, addr, city) value (:name, :addr, :city)"); $STH-&gt;execute($data); Once you have the statement handle ($STH) you can call execute on it repeatedly with different sets of data. Since the statement itself is already on the server, waiting, you're only sending data with each call, with no setup time. But my guess is you want to insert a large quantity of rows (thousands?) and a 20% or 30% difference in speed matters (or are you prematurely optimizing?). You may have to escape your data manually and build the insert statement yourself rather then use prepared statements if there's need to optimize that greatly. If you're inserting dozens, or even hundreds of rows, the speed up will be so small as to have no discernable effect. Edit: I did some quick tests for my own amusement -- on VERY large datasets doing a multirow insert is much faster -- say on 10,000 rows. On smaller datasets, say 80 rows its pretty meaningless. Here's the results of me running it on a localhost mySQL install: # 10,000 rows Bulk: 0.124601135254 seconds Prepared: 4.15818095207 seconds # 80 rows Bulk: 0.001 seconds Prepared: 0.031 seconds # 200 rows Bulk: 0.003 Prepared: 0.07 For the bulk insert I'm just putting together a string via a loop over the data array in the format of (val,val),(val,val) .. and then inserting it all in one shot with $PDO-&gt;query($SQL); I knew it would be faster but I was honestly surprised that its 1/10th a second for 10k rows. 
It's extremely difficult figure out all inputs. I'd suggest piping the possible-address data to Yahoo Placefinder or Google Geocoder and letting that do the hard part for you.
Ok so how would you do it?
I think that Google Geocoder can only be used in conjunction with other Google products per the terms of service. Yahoo Placefinder and MapQuest can both be used for free Geocoder services without such hassles.
Your guess is correct. I am trying to build a query more like this: $STH = $DBH-&gt;("INSERT INTO folks (name, addr, city) value (:name1, :addr1, :city1), (:name2, :addr2, :city2), [SNIP] (:name300, :addr300, :city300)"); With all the talk about PDO is the future and the fact that the mysql_ functions are becoming depreciated in the future makes me think that there has to be a solution. I am currently building the query the old fashioned way with mysql_escape_string(), but I am running into problems where the slashes added by the escapement are ending up in the database (presumably because PDO assumes that it's data is free of problematic characters?) EDIT: In response to you stats about speed, this is also a more generic problem for me. For example, I have a number of objects which are defined in code as extensions of a generic data object wich has generic methods for UPDATE and INSERT. I would like to be able to do something like this: INSERT INTO :table ( implode($fields) ) VALUES ( implode($values) );
Then build a string, and use $DBH-&gt;quote($string) to escape your strings. It will never be as safe as a prepared statement (prepared statements work in a completely different fashion) but its the PDO equiv. of mysql_escape_string. But refer to my examples above if you're only doing 300 rows, do you really need it faster then 3/100ths of a second? Don't use mysql_escape_string with PDO -- it has its own escape method should you need one.
This will be very confusing code. I haven't tried any of it out, and I used some practices that might be frowned upon. You will have to figure out the database statements and what to do with the results. Also, since we wouldn't know if they typed a city or a state you will have to look at both tables, probably state first. Edit: This was just fun little hack. I wouldn't use this, rather some drop downs would work better. if(strlen($string) &gt; 0){ $ordnum = ord(substr($string,0,1)); if(($ordnum &gt;= 65 &amp;&amp; $ordnum &lt;= 90) || ($ordnum &gt;= 97 &amp;&amp; $ordnum &lt;= 122)){ //could be a city/state //does it have a comma? if(strpos($string,",") !== false){ $parts = explode(",",$string,2); $cityorState = $parts[0]; if(preg_match("/\s+\d+$/",$parts[1])){ //ends in space numbers $zipparts = explode(" ",$parts[1]); $zip = $zipparts[count($zipparts)-1]; //city or state goes back in $parts $parts[1] = $zipparts[0]; if(count($parts) &gt; 1){ $city = $parts[0]; $state = $parts[1]; //try the $zip, $city, and $state against the DB }else{ $cityOrState = $parts[0]; //try the city or state DB tables } }else{ //doesn't end in space and numbers if(count($parts) &gt; 1){ $city = $parts[0]; $state = $parts[1]; //try the $zip, $city, and $state against the DB }else{ $cityOrState = $parts[0]; //try the city or state DB tables } } }else{ //no comma //probably a city or a state //try the city or state DB tables } }else if($ordnum &gt;=48 &amp;&amp; $ordnum &lt;= 57){ //could be a zip or ID if(strlen($string) == 7){ //try the ID DB query }else{ //maybe it's a zip if(strlen($string) == 5){ //try zip DB query }else if(strlen($string) == 10){ //zip with dash and location? $newstring = substr($string,0,5); //try zip DB query } } }
FreeBSD**/**Linux Apache MySQL
What I've done in the past is to put the long process on a page that only performs that action and which cannot be triggered externally by a visitor (usually I do this using a local checkfile). In this file I disable PHP's auto-termination so that the script is allowed to run until completion. When I need to run the process, I write out the checkfile, and simply make a web request to the page using CURL. I put a one or two second timeout on the request so that it doesn't block the page making the request. The CURL request starts the long script and then asks the user to wait. I then use a value marked in the database to keep track of the progress. However, **I do NOT recommend this solution for public facing code**. I've only used it in admin interfaces where only one user will ever be running it at a time. I'm pretty sure that an apache thread is still tied up while the script is running, so it's probably a resource hog, and (lets face it) it really is an ugly hack. Cron jobs are the better way to go.
I kind of have a similar problem right now. I have multiple servers with the same database schema with each having a table that logs certain events. However the people who want to view this information don't want to go to each server and look at each table, so I made a php cron that pulls all the data daily, does a few things, and then combines it into a central database for people to do the analytics on one set of data. Unfortunately I didn't do it in a smart way, it does it all in one go loading all the tables into memory and then dumping it to the single database. It worked at first but of course as the amount of data and sources grew the script would run out of memory, and increasing PHP memory limit can only go so far... I gotta rewrite that thing in a smarter way some day.
If you would rather use brew to install php/pear, I recommend this blog entry: http://justinhileman.info/article/reinstalling-php-53-on-mac-os-x/
depends entirely on the project and the level of structure required. But, the point isn't *how* I would do it, it's why I would do it. I would do it because a developer can look at the code and see *exactly* what's going on. There is something to be said about a code file you can actually reason about without having to understand magic. It's this reason that I do not like implementing most of the magic methods in PHP. __isset, for example. I don't want to worry about having the latency of a DB call in an isset call, I should be aware of it. And while you may argue that shouldn't happen, performance issues in the implementation of isset is a problem. And no, I'm not saying don't ever use isset, magic is useful, but you limit that shit as much as you can. adding magic throughout your app willy nilly is a good way to make your codebase difficult to pick up, nigh on undiscoverable, and a nightmare to think about. One thing a require_once has going for it is simplicity. Don't forget that.
I have a project at work that deals with about fifteen feeds. I have a cron job which grabs each feed, sees if it has changed since last check, then uses a handler for each feed which preps it for the database and then saves it there. Depending on your needs, it works really well and performance is great. Adding a new feed is as simple as adding a new handler (a file that preps it for the database) and adding it to the cron job. My goal is to make each feed standardized so it will fit into the same tables as the others, and you might not need to do that so your process could be quite a bit different in that regard. You can see how I'm using it [here](www.bargain.com). It just takes advertiser deal feeds, makes them all the same, then outputs them as requested.
$DBH-&gt;quote($string) should allow me to do what I need. Thanks! You are absolutely correct, the speed is not really the bottle neck here. I was mostly trying to find a solution which would allow me to properly escape the data and not have to program each object as a special case. 
You mean open source software on a site like Github?
I just write them out by hand. I've looked at the form creators for CakePHP and CodeIgniter and I just don't think its needed. Sure the forms are boiler plate code in development, but I've developed other code to reduce the amount of work. Particularly js code that automatically posts my forms and core classes that map that input to database fields for updates and saves.
Yes, except I'm not sure github will actually run your code. Its just a repository.
Something like this could probably be done using some sort of cloud based platform like PHP Fog and Github for deployment. I'm not sure how you would automate it, but you could at least just allow pull request on the Github repo, and when you've merged their changes, redeploy onto PHP Fog or something.
Get back to /r/python!
you are comparing strings. basically "02" is bigger than "01" and your dates just happen to work out. change 2011 to 2013 and it's still true.
Not that bizarre. Take this example: "z" &gt; "a"; "zyx" &gt; "abc"; "z" &gt; "abcdefgh"; Makes sense, right? "z" is later in the alphabet than "a". "02" &gt; "01"; The zeros are equal, but the "2" comes after "1". Note that these (should be) interpreted as strings. So then, what happens if we do this? "02-01-1901" &gt; "02-01-1900"; Most characters are considered equal, but the last character ("1") is larger than the string "0". If you do this: "02-01-1900" &gt; "01-01-1999"; Then it'll see that the "2" is larger than "1", so this evaluates to `true`. After all, going back to letters, wouldn't you say that string 1 is 'larger than' string 2? "z-aaaaa" &gt; "aaaaa-z";
That's why your dates should be YYYY-MM-DD, then they will order correctly. That also helps for people of other countries because 01-02-2011 could be 1st of Feb or 2nd of Jan depending on where you are.
You could use multiprocessing in PHP by using a load of PHP-FPM workers, then having JavaScript that called the script for each feed. The scripts could use redis as a shared memory pool, then, when the JavaScripts have returned, you could call a script that pulls the cached results from redis. Bam. Call me insane, but I'd prefer to use Python for this sort of thing. I say redis because it allows you to have lists, so essentially you could sort the things and store them order.
It does not strip numbers non numbers, it directly compares a characters value to another, under the hood I think it simply treats the address as an int and compares the ascii (or unicode) values directly.
i don't get your point. what is not true?
No, he was correct. What you wrote completely agrees with what he said.
well although it helps string comparison, the year in the beginning is actually for faster searches in the db. and yes this is a very bad practice and better convert the dates to unix time-stamps and compare.
Or even better as Unix timestamps
PHPistas? 
Storing date in DATE format (assuming MySQL) is bad practice?
when any string that does not start with a number is cast to an integer, it returns zero. but when comparing the string "1" to "A" the characters are compared separately.
Why do you assume string is converted to int? var_dump(':' &gt; '9'); // bool(true) ASCII ":" - 58 ASCII "9" - 57
PDO also allows for you to do ordered params instead of named params. Taking the provided SQL as an example: $data = array( 'name' =&gt; 'Cathy', 'addr' =&gt; '9 Dark and Twisty Way', 'city' =&gt; 'Cardiff' ); $STH = $DBH-&gt;("INSERT INTO folks (name, addr, city) value (:name, :addr, :city)"); $STH-&gt;execute($data); Using the numbered params instead: $data = array( 1 =&gt; 'Cathy', 2 =&gt; '9 Dark and Twisty Way', 3 =&gt; 'Cardiff', 4 =&gt; 'Bill', 5 =&gt; 'Something something', 6 =&gt; 'Sydney' ); $STH = $DBH-&gt;("INSERT INTO folks (name, addr, city) value (?, ?, ?), (?, ?, ?)"); $STH-&gt;execute($data); Unfortunately the caveat here is that a numerical array is required, starting at 1 and not 0. The initial purpose of PDO though is to accomplish what is outlined above, where the same statement would be used (via $DBH-&gt;prepare($sql) ) and each param would be re-bound. The examples (#1 and #2) are great in the [PDOStatement::bindParam](http://www.php.net/manual/en/pdostatement.bindparam.php) docs.
why would "this string" equal "this other string"? i don't really know why i'm even bothering to answer anymore .. but .. if you want to do that then try: var_dump((int)"1A" == (int)"1B");
no, no. Comparing date's as strings is a bad practice.
Yeah, if you look into running code in a "sandbox" to prevent anything malicious, you'll find you pretty much have to neuter any language you want to use.
Ah that's true, I misunderstood your comment. Still, I think unix timestamp is not a good way to go (integer overflow and all that). I prefer to store my dates as DATE or DATETIME and use PHP's DateTime class: $date1 = new DateTime('2011-11-22'); $date2 = new DateTime('2011-11-21'); var_dump($date1 &gt; $date2); // bool(true) 
I don't know if it has to have that extra overhead, it should be as simple as matching a few common patterns and after that, just popup a suggestion to the user on how to input their request properly.
So I wanted to know if a [Reliant Robin](http://upload.wikimedia.org/wikipedia/commons/thumb/2/21/Reliant_Robin_Green.jpg/640px-Reliant_Robin_Green.jpg) was better than a [Ferrari 550](http://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Maranello.JPG/800px-Maranello.JPG). I asked PHP if: 'Reliant Robin' &gt; 'Ferrari 550' Y'know what? PHP says the Reliant Robin is better. I'm surprised, but surely PHP knows how to compare them? Right?
Although I appreciate the insight, I think this is better accomplished with preg_match(). Also, I don't have a table for cities specifically. The table lists tide stations with their ID,city,state,zip,latitude,longitude,etc. I know the states are constant but the variation in cities is extensive and opportunity for misspelling is high so when I have the state and zip isolated, I assume the other portion is the city. I will then use a mysql function to cleanse it for query and check it against the db. Any tips for optimizing my regular expressions?
2 is in fact bigger than 1, therefore that string comparison makes perfect sense.
Take the hyphens out and then think about it - which number is bigger?
I'm not convinced - yyyy-mm-dd is human readable, whereas a timestamp is not - arguably an advantage. Edit: although if they're stored in a database, then obviously unix timestamps are better. Faster to perform a numerical comparison than a string one.
If your trying to do mathematical operations such as the one above it makes no sense doing it in text. Eg working out the difference between values in months, days, hours between two values would be a nightmare doing it in a purely text form. When the value is output you just push the timestamp through the date() function to get the formatting, it couldn't be simpler. 
Please don't do this. Check out: http://us3.php.net/manual/en/function.strtotime.php
I've had some experience with Gearman and, while it has it's limitations, is a solid solution. There is also a PHP port of GitHub's Resque called [PHP Resque](https://github.com/chrisboulton/php-resque) which might be of use to you. Using a cron job to pop jobs off a queue works too, you just have to ensure that the time between executions is longer than the run time of the task or you might get some overlap.
It is when using alphabetical^[1] order, which is what strings use in comparisons. "1A" == "1B" This doesn't work because you are using the "is equal" operator which returns a boolen if the strings are an exact match. "1" &gt; "A"; This is false because you are using the greater than operator, which compares in alphabetical order. "1" is before "A" in alphabetical order and is therefore **less than** the string "1"; "A" is not converted to int before the comparison, they are both compared as strings. [1] It's alphabetical because that is how the encoded characters are ordered.
The best way I would suggest is to use an auto-suggest AJAX function to query the database as the user's typing. That way you limit their possibilities to what you have in the database, nothing more. I don't think you could really get what you're asking with preg-match because of the high variability.
I've used a lot of Zend Form and I hate it. I've heard great things about Symfony2's forms (especially Model-based forms) so maybe take a look at that framework.
If they're in a MySQL database, timestamps aren't better. Timestamps can store a date range from about 1970-2050 (I think... don't know actual values off hand). This is especially a problem for birthdates. &gt; The DATETIME type is used when you need values that contain both date and time information. MySQL retrieves and displays DATETIME values in 'YYYY-MM-DD HH:MM:SS' format. The supported range is '1000-01-01 00:00:00' to '9999-12-31 23:59:59'. &gt; The TIMESTAMP data type has a range of '1970-01-01 00:00:01' UTC to '2038-01-09 03:14:07' UTC. It has varying properties, depending on the MySQL version and the SQL mode the server is running in. The DATE or DATETIME column types have a much greater range. Edit: The date range on datetime is much greater than I thought. [MySQL documentation](http://dev.mysql.com/doc/refman/5.1/en/datetime.html)
That is only relevant for dates &lt; 3rd Nov 1971, for dates past 2038 you just use a field size of greater than 32 bits.
I'm working on getting away from AJAX (the site currently does most front-end stuff with jQuery) because I plan on making a widget of sorts and want my site to handle as much as I can on the back-end to avoid inconsistencies on other sites who choose to use my widget.
True, you can do that - or any other myriad things - but why not use a column type that's built for exactly these kind of issues?
Use the DateTime library for all date manipulations. It makes everything so much easier and object oriented.
Although the column type may be built for dates it is still a huge overhead as soon as you want to perform a mathematical operation on the date. IMO integers all the way unless the range involves dates &lt; 1971
Yeah, Mr. Imagination looks like you can't name another way. If you like hardcoding filepaths and writing code that you do not need to write, be my guest. No one is stopping you. Autoloading inherently requires a clean codebase. Thats how you can get around manually typing out paths. If you think it is a nightmare to think about, make sure you never get out of the wonderful world of web. This is where its easy. And if you think magic methods are so bad, make sure you never use a constructor. 
Ok, fair point, but this did absolute *nothing* to answer the OPs question.
&gt; you also need to take into account chars that aren't in the "alphabet" Well that's a valid point. But I was more addressing [this comment](http://www.reddit.com/r/PHP/comments/ml77y/0201201201022011_1/c31u4v4). "A" does not get converted into an integer for the comparison. `(int) "A"` will not yield the ASCII character code, it will simply attempt to convert it to an integer which wont work because it will only convert properly if the string starts with an integer. Otherwise it will convert it to 0. &gt; With your first point, that condition is not checking if the strings are an exact match Yes it is. It's just not doing a type conversion, the two stings are still an exact match and they're both still compared as strings. If you do: 1 == "1a" It's still an exact match because you are doing a loose comparison. Scalar values are implicitly converted at runtime. When you use the strict comparison (===) PHP no longer attempts to convert it and therefore the comparison fails.
Of course, *that's* what you took away from that response. Good luck with that attitude, I'm sure it'll serve you well.
Or, you could just use the DateTime stuff to do all of that. 
DateTime deals with timezones by ignoring them if you have servers all over the world its just more pain
Huh? The second argument to the DateTime object is the Timezone. $date1 = new DateTime('2011-01-01', new DateTimeZone('America/New_York')); $date2 = new DateTime('2011-01-01', new DateTimeZone('Europe/London')); var_dump($date1-&gt;diff($date2)); var_dump($date1 &gt; $date2); The first var_dump correctly shows a difference of 5 hours, and the second one shows that `$date1` is greater than `$date2` since it's 5 hours ahead. 
#1) Comment the hell out of your code. It's so much easier to come back and figure out what you were trying to do at a later time. #2) Analyze your code after you complete a chunk and try to imagine a way to do it better or faster. Also step through the lines of code in your head and see if you can spot any obvious errors. #3) Use good formatting. Everybody seems to have their own preferences but most would agree some form of indenting helps improve the readability of code. #4) Read a book like "The Pragmatic Programmer" which many have recommended as a must read for any programmer regardless of chosen language. http://pragprog.com/book/tpp/the-pragmatic-programmer 
Ah I see the confusion, I was looking at the MySQL DateTime type not PHP DateTime! :)
Comment comment comment. Seriously. I've been a professional PHP developer for over 6 years now and most of my coworkers at my current job and previous jobs don't do this. It's my biggest annoyance. Let me ask you this: Why do we have source code? We could just run our PHP code through some type of interrupter that will compile it down to a sort of byte code that PHP actually executes. PHP has to do this with our source code each time a file is included so caching our code in that form would shave off a quite a lot of time during execution. After that we could delete our PHP code, right? You're probably thinking something along the lines of "Well, what happens if I need to make a change to the code?" That's exactly why we keep the source code around, for ease of modifications. The code is meant to be read. Comments help with that quite a lot.
Writing horrible code is your rite of passage. Everybody starts out writing unreadable undocumented spaghetti code. I'm not saying that you shouldn't study how to write good code - just don't fixate so hard on it that it effectively stagnates your projects.
Typically, beginner level php developers work with a CMS (wordpress, drupal, etc) because it's paid work. That is fine and many of us have been there. If I had one suggestion it would be to learn how to program to an interface not an implementation. You won't get very many opportunities customizing CMS's to practice so it will be on you to develop small libraries and eventually your own applications. As soon as you have that "aha" moment programming will become a lot easier.
Every outsourced developer from India or the Philippines I have ever worked with...
Yes :)
All about that [Wamp](http://www.wampserver.com/en/)
Read these: http://www.jasonlotito.com/tag/lessons/
1) Stop calling yourself a "coder". That is like construction workers calling themselves "hammerers"
Do not comment the hell out of your code. That's the fastest way to get a mess! Instead, strive to write your code so it doesn't *need* comments to be easily understood. Then add comments when you've reached a point where you don't feel you can improve it much further. A good trick is to write your code, leave it uncommented. Do something else (work on another unrelated portion of the app for example) for at least 20 to 30 minutes. Then come back to it and try to understand it again. If it takes you more than about 5 seconds to understand it, it's not clear enough. Revise the code some more until it passes that test. Then add comments as to the approach. (This works, because 20 minutes is enough to push the details from your mind without forgetting about the higher level concept. If it's not clear then, it will never be in the future)... Also, **never** comment on what code is doing. Comment on *why* it's doing it the way it is. The *how* is what the code is for. And if your code is so dirty that you can't understand the how without comments, it belongs in the garbage can and needs to be fixed. Remember, code changes, but comments rarely do. So over time the comments are going to drift apart from the code and will be worse than useless, they will give the wrong message... **Note:** I'm not saying that your code shouldn't have comments in it. I'm saying that "commenting the hell out of it" is far worse than no comments. Instead, write as clean as you can, and use comments to fill out the gap. Also, I'd advise avoiding optimization at all costs. Make it work first, then profile and optimize. But avoid premature optimization at all costs. Here's a [blog post that I wrote on the subject](http://blog.ircmaxell.com/2011/08/on-optimization-in-php.html)...
I think the biggest turning point for me was the slow evolution from file-per-page to full on MVC. It wasn't easy (because you have to do a lot of stupid shit) but you'll realize after you launch your first site that MVC saves you tons of trouble when re-x-ing anything. Also, and I'm probably the worst at this because I started doing it so late, but learn to do unit testing early on. I'm not saying you have to fully embrace tdd or anything but knowing how to unit test is important.
I actually [wrote a blog post](http://blog.ircmaxell.com/2011/11/becoming-better-developer.html) recently on this very subject. It was not targeted towards new coders, but more established coders that are fairly junior to mid level. But I think the lessons are 100% applicable here. The key points: * Be motivated to make yourself better (I think you fit this one, since you posted here) * Have confidence in what you know how to do (but don't get cocky) * Learn concepts instead of "How to do this in PHP" * Read at least 1 book per week * Share your knowledge (speak to others about it) * Become a mentor That last one may seem pretty odd in this context. But I think it's even more important here. There's always someone out there who knows less than you (or is in a lower position). Start to mentor them. Learn from them and their mistakes. Nothing will make you learn a skill better than teaching it to others...
If you are a new coder, looking at code and figuring out what is happening isn't nearly as obvious as it would be for somebody who is experienced. While learning, I still say comment the hell out of it. You will eventually reach a point where you "get it" and are writing clearer and more concise code. At this point, the commenting will go down a notch or two because you start to feel like there isn't much need to comment the obvious.
Coders: People who code. Farmers: People who farm. Loggers: People who log. Construction Workers: People who construct. Saying it's like construction workers calling themselves "hammerers" is like saying farmers are "tractorers" or loggers are "chainsawers". Quit being so judgemental.
As a new coder, I doubt OP would want to waste time getting bogged down with semantics regarding what to actually CALL him/herself. Also, I think coding requires a little more finesse than hammerring. I suggest "welding", at which point, there is no problem with being called a welder.
One book a week - yikes. Good advice, but tough to follow :)
&gt; 3) Use good formatting. Everybody seems to have their own preferences but most would agree some form of indenting helps improve the readability of code. Definitely this. The most mediocre programmers I have run into don't have any concept of indentation whatsoever. Whenever anyone asks what I look for in a codebase, the answer is always "readability". Unreadable code risks getting trashed, which in the end (imo) wastes more time. Pick [a style](http://en.wikipedia.org/wiki/Indent_style#Variant:_1TBS), stick with it, and you'll be fine.
Wamp and XAMPP are both good (I always used XAMPP when I was on Windows) but another option is to install Linux and the full LAMP stack. (Linux, Apache, MySQL, PHP)
I'm curious what kinds of data you use with timestamps. I'm pretty much a datetime person, so I'd like to know how you're using timestamps and how they work out.
An hour before that post was made, a relevant answer to OP's question was posted. There is no need to repeat the already given answer. Instead we can contribute to the conversation with alternative techniques, etc. Cool your jets. 
I'd have to check the source to be sure, so I'll only say it's *possible* that PHP is converting these to ints for comparison: &gt; If you compare a number with a string **or the comparison involves numerical strings**, then each string is converted to a number and the comparison performed numerically. &gt; (Emphasis mine. [Source](http://us3.php.net/manual/en/language.operators.comparison.php)) $ php -r "var_dump((int) '02-01-2012', (int) '01-02-2011', (int) '01-02-2013');" int(2) int(1) int(1) 
I guess programmer is out then too. So, software engineer? Software architect?
If you want to act like you're 12, go back to facebook where people understand you.
I 100% second this. XAMPP comes with a bunch of crap you'll never need when developing: Perl, mod_perl, mod_ssl, OpenSSL,Webalizer, Mercury Mail Transport System, Ming, FileZilla FTP Server, eAccelerator, and WEB-DAV + mod_auth_mysql. WAMP is slimmer and faster. It also allows for switching between different PHP versions (a feature I love) and includes XDebug.
I'll just leave this [here](http://hashphp.org). Pay particular attention to the security section. Learning and understanding code security is something you should worry about before anything else.
Some of the best advice I've gotten when writing functional code, is to not let your functions get bigger than your head. Think about the purpose of the functions you're creating, and if you feel like its getting to big, step back and figure out what you can, and what you should, move to a function of its own. This helped me tremendously when I started actively looking at my own functions this way. A function should have a single, clearly defined purpose, is what I'm getting at here.
Most of the stuff I code is related event logs and building statistics and graphs from that data. Eg to produce a 300 pixel wide graph of the logs of $foo over the last year. With integers I can just work out the range value of a year in seconds and divide by 300 to get each pixels value, I then average that figure from each year/300 value and make pretty graphs for yearly $foo. I also use them to determine the time between random events and react accordingly if the event is below a configurable value. I would have gone mad if I tried to do that in a string :)
Sure, it's a bit much. But it's a guideline more than a rule...
Listen to ircmaxell. He has written a lot of good articles on various subjects and has proven time and again that he understands what he's saying. He isn't just parroting random bullshit like many others here.
Yip that's exactly right!
Actually deploying the code from github wouldn't too terribly difficult. Using post-commit hooks to push code to its endpoint is a fairly simple process: http://progit.org/book/ch7-3.html
Log data is a good use of timestamps, definitely. Because no matter what your date format is, pulling it out of the db is pretty much the same. (Code is written for brevity, and not optimized or safe) $offset = $_GET['end_date'] ? $_GET['end_date'] : date('Y-m-d'); // or whatever you want it to be $start = date('Y-m-d', strtotime($offset.' -1 year')); $end = date('Y-m-d', strtotime($offset)); $sql = "SELECT * FROM data WHERE `date` &gt;='{$start}' AND `date`&lt;='{$end}'"; (curses, code formatting doesn't like &lt; and &gt;) Personally, I'd use google's JS graph API for displaying a pretty chart, but I can see how rolling your own would benefit from integers. Would you mind giving me an example of your difference SQL is? I can see the potential benefit, but it'd also probably be possible to do as a string-based date time, and I'd be interested to see how it works out.
MySQL has CONVERT_TZ(), you can just store the timezone and then calculate using that.
WAMP includes SSL as well. Personally I don't care too much about bloat, but I had a better experience with WAMP.
I'd agree that comments should explain why, and this is the key point. The code is there to explain what. // loop from 1 to 10 for x = 1 to 10 This is an example of a bad comment. We know its a loop from 1 to 10. What is it looping through? Why is it 1 to 10 instead of 0 to 9? Why are we assuming the loop always runs 10 times and not 12, or 7? I completely agree that commenting everything is just as wrong as commenting nothing, and I've gotten into arguments about it because someone else wanted an over abundance of comments like the above.
tbh - I probably am closer to a "hammerer" than a "construction worker" at the moment, "programmer" just seemed too *fancy* for my abilities at this stage :-)
So I guess the book called "Coders at work" which was a series of interviews with famous programmers / language inventors is inaccurate, and they should all be upset about it?
In that case I'm probably slightly atypical; I have played around with Wordpress, but I've never deployed or modded it in anger. I'm currently building a web console to display various sets of data from an SQL DB - rightly or not I'm doing it from scratch. Apart from anything else it seemed the best way to learn something on work's nickel...
Done properly, this project would be motherfucking *massive*.
WAMP is great for getting out the door, just don't expect to be able to troubleshoot a real-world implementation. I prefer 'factory' install packages and knowing how to install them all to work with each other for when the SHTF
Advice heeded! I'm basically hammering out some code that works, then re-visiting it, seeing what I can move off into functions, looking at how I can make the code work with minimum maintenance in the future etc..
On this one, should I be looking to use an OO approach for everything? For example, my functions in total only run to a couple of hundred of lines at the moment. If the project is small, is it worth still adopting classes/methods as opposed to functions?
It may not be your cup of tea yet, but the 5.4 release has a built in web server.
I'll still work like that occasionally, especially when trying to work through a tricky problem. I've been programming for 10+ years now. 
it's not a login mechanism, it's a system to avoid, but not make impossible, multiple votes on a site intended so that every person would visit only 1 time in their life
Thanks for the link - interesting read. I understand how the idea of learning concepts rather than "How to do this in PHP" is beneficial. I do find conceptualising some things generally a little tough at the moment - there's been a lot of head scratching going on recently!
Honestly, yeah, I do think you are being unreasonable. By your standards, I don't think you would hire me for your company, despite the fact that I'd consider myself a top-tier PHP developer. You're not reading the resume? So I've been a lead developer for 3+ years and a graduate from nationally recognized university, but I've been stuck in PHP 5.2 for that whole time because my boss won't sanction an upgrade, and that wouldn't meet your standards here. I think the important thing for you to recognize is that what someone knows or doesn't know is often a product of their previous experience, for better or for worse. A "qualified" developer is not going to have long bouts of unemployment, meaning that they don't have a lot of spare time outside of their job to learn stuff beyond what is required for their job. That does NOT mean that they wouldn't pick it up in a flash once they started off at your company. You need to equally value the resume and the code samples. Education and experience are huge even if they don't fit the mold of the very specific requirements you've laid out here. The code samples are great to make sure that their code backs up what their experience says they can do, and it is an easy way to eliminate anyone make egregious errors (e.g. SQL sanitation is not unreasonable). And yes, I have worked as a hiring manager before too.
This is great feedback. Thank you. I should clarify that I do very much value a strong education and come from a recognized university as well. I generally use the resume to gauge skill sets but to me, 3+ years, or 10+ years is relatively arbitrary when the web has changed so much in the past few. But you are correct that not everyone comes from a work place where they can use the latest cutting edge technologies, and I'll definitely incorporate that feedback.
FWIW I work somewhere that has a similar hiring bar, though we give candidates a paper-based coding test rather than asking for code samples. As well as going through this with the candidate they get a moderate technical screening – ask them to whiteboard a basic system, explain MVC, what do you hate about PHP, how do you write code that's easy to test, etc. Basically a bunch of open-ended questions that give you an idea of how much a candidate knows and opens up the conversation. These are tailored to the candidate, going by their CV &amp; covering letter – for instance, a candidate who says they're a front-ender with a love of the semantic web is going to get questions about accessibility, HTML5, etc. We also don't see a lot of qualified candidates, for what it's worth. 
I think those are good qualifications for a senior PHP developer, although I think the stuff about OOP in PHP is hard to find. I've worked with very few PHP code bases that actually have real OOP (mostly because they were built when PHP didn't really have OO). Are you prepared to offer the same sort of compensation? Typically good developers of that caliber and experience are already gainfully employed at some other company, so you could either count on getting lucky and finding someone in between jobs, or try to offer enough incentives to wrest them from their current job. But yeah, it's just hard in general to find senior-level developers period. Your other alternative is to hire a journeyman-level developer and grow him into a senior dev role, and hope he stays with you long enough to be worth the investment. Personally, as a PHP developer I tend to stay away from advertising companies, because out of the few that I've talked to, all of them seem to have a short turn-around low-maintenance business model: e.g. they may take a 1-month contract, ramp up a website, deliver it, and then basically not touch it ever again. I personally prefer a longer development project life cycle. Also, from what I've heard, these companies seem to have fairly high turn-over rates. 
What would you say is the average time to get a new developer into your company (from when you start looking?)
I am by far an amateur developer, so I'm not sure how valuable my input is, but I feel I could easily answer ~40% of these questions despite not having a computer science degree. So, a qualified candidate should get it all hands down. You could probably even make the questions a little more challenging. Things I consider a bit tricky are: &gt;You write code in PHP 5.3+ (no deprecated methods, etc.) I started coding in php 7 years ago when ereg was not deprecated. It has since been replaced with preg_match. So, there may be a few functions that developers with lots of experience still use that may be deprecated. But, if they're still using magic_quotes or mysql_escape_string in lieu of mysql_real_escape_string... you have a problem. Also, no $HTTP_POST_VARS :D &gt;You use or have used MVC's FYI, I've never used a 3rd party MVC, but get asked several times by developer friends to try Kohana. &gt;(This area, I feel like a candidate only at the minimum needs to understand up to joins, sub selects and foreign key constraint) I'm not sure exactly how much data you plan to handle, but I personally believe good database design is a key knowledge component (and not too much to ask for in a programmer). I'd probably add a question asking the difference between innodb and myisam. Other than that, it looks like an excellent set of questions to me. 
I agree that 10+ years is not always better than 3+. In fact, in many cases it can be worse. Just because your job doesn't allow you to use the cutting edge technologies, does not mean that you should let yourself get stuck in a rut either. But on the other hand, someone with 10 years of experience, who spent the last 3 as a lead developer on a Python project (after an earlier career in PHP) would probably be a better hire than someone who has been a junior level programmer working on the latest and greatest PHP stuff for the entirety of their 3 year career, despite the fact that the latter might mesh better with your criteria.
OP, I'm curious. In what other language, would that comparison have worked?
Wow, plenty to chew through there! Thanks for the link - looks like some interesting reading.
I really like Kohana; it's a personal favorite of mine :)
I just want to throw in another log on the "stuck with older tech" fire. If you were to look at the code I have on github you'd think I only know PHP 5.2, simply because all the code I have has to work in 5.2 for it to be usable in my job. That obviously doesn't mean that I don't know the features that 5.3 offers, so I suggest strongly keeping this in mind when looking at code samples.
I don't think that's unreasonable to request they know 75%-85% of that (I know 95% of what you posted); anything more, and you're entering the territory of the company that doesn't know what they want (in the mind of the applicant). Not everyone knows everything, but certainly good developers could simply be asked to learn something, and they will learn it for purposes of a job. I would cut it down the list and be more concise and inviting for developers to apply. Sure, you'll get some noise, but you'll have a selection, at least. As far as skills go, I would narrow it down to this: * Can write clean code for PHP 5.3 (namespaces, no deprecated features) * Understand the fundamentals of relational database design and have a decent command over SQL * Experienced in OOP design patterns (can leverage inheritance, interfaces, dependency injection) * Used and understand the concept of an MVC framework * Understands the HTTP protocol (headers, request types) * Security conscience coder (knows how to prevent SQL injection, XSS, CSRF, LFI, RFI) - This is a big point * Understands the role of JavaScript and has a minimum, basic knowledge of it Git is a plus (we use git, but I typically train the ones we hire). Don't restrict them on the code they send, just ask them to send in code. Anyone looking to be hired will send their best stuff, if you do not see immediate potential, move on. You do not need to give them requirements on what to submit, or ask about coding style. You should be able to determine if they are a good dev based on the quality of work they submit with minimal prompting. I manage a medium-sized, in-house web application in PHP for the company I work for and we're always looking to hire people to help maintain it. I typically skip qualifications (degrees, certs) and ask to specifically see a portfolio. Next, I ask them if they've worked in Open Source Software. If they can verify they have written code, worked with people, and were successful, I put them higher on the list. To be honest, I like hiring students who have passion for this stuff, which is exactly how I was. I'd choose the passionate Open Source Developer student over the recent grad with no real-world experience any day. Ask for their Github, bitbucket, or other coding community's name they go by. See what they do, browse commits and see how disciplined they are. Don't judge negatively based on errors they have made (and fixed in source control), that's a plus for a code maintainer.
First off, thanks for listing this type of thing. I know a lot of developers really want to know what it is that companies want. I would imagine a lot of PHP code falls under "giant hub of functions" category. Not a lot of PHP coders know what those things are (factory, singleton, etc). You're asking for a lot of knowledge from one person on the "higher end" of the PHP spectrum; while, at the same time, asking for a Front End developer. It seems like you want a Programmer's programmer (like the C++ type), but also for them to handle things that that type of person normally wouldn't do, IMO. I had to google "fat controller", but once I saw what it was, I was like "Oh yeah, that". If asked that question initially, I'd give a blank stare. That phrase isn't something I hear or see a lot, however I have opinions on the matter. Some of this isn't important at all either. KNF/Allman? Who cares. You hire me, you tell me which way you want it. I wouldn't have a problem conforming to the standards of a team. Also, I think you were just saying it for effect, but not looking at the resume is a terrible idea (or a brilliant one, I'm not sure). Requiring a bachelors is a terrible idea and reeks of HR bullshit that everybody hates. But, part of the "Job game" is realizing that you aren't actually expected to know 100% of what an employers asks of, and I hope you take that into effect as well. You're describing perfection, but it doesn't exist. Too tough? Like I said, you want somebody high-end, and that's fine. But you're excluding a lot of people who could learn some of the trivial stuff super fast. You're the team lead, and I'm assuming you have other developers. This person isn't going to come in day one and say "I've made a decision, we're using the singleton pattern!". For fun, the gauging myself: I think I'd meet a lot of these requirements, certainly not 100%. I think I have more emphasis on the things you were "meh" about: I'm awesome with JOIN's/etc and I'm awesome with Javascript. If I were in SoCal, and needed a job, I'd at least try for this position. Good luck! Edit: Also, as other's have stated, whatever salary you are offering may be the problem. You didn't list it, which raises some questions as well.
Not too tough, not unreasonable so long as your salary / benefits would match your criteria. I've not got a degree in comp sci, I just did high-school level, then 10 years later decided to get into programming again and taught myself PHP whilst working tech support. I've been using php for about 1 year now and can comfortably pass all these requirements except more detailed SQL (currently taking a free Stamford course to remedy this) and the use of an MVC. (I'll get onto it though, thanks!.) FYI, I still consider myself a beginner / junior developer. Although I am consistently disappointed by the standards of a lot of people who claim to be pros! Summary: If I can teach myself this in 1 yr, it's not asking too much.
My opinion may not mean much since I'm still fairly Junior Level with only about 2 years full-time web development, but I feel like the way you present your criteria is a bit intimidating. I feel like I am a fairly well rounded developer. I do HTML 4/5, CSS 2/3, JS &amp; jQuery, PHP, and I work with CodeIngitor and ExpressionEngine on a daily basis. But your criteria seem like your asking for a senior level 10+ year experience candidate. I don't have a CS degree, so I immediately feel discouraged in applying. You should break out your requirements out into absolute musts and plusses a bit more. It seems like you want someone that knows it all and can do it all, but no one out there is a perfect programmer. There is always more to learn in this field.
This needs to be multi-threaded. If you do this with PHP, you will be spawning off many processes at once, and will need to use your database to ensure they aren't sending the same e-mails out multiple times.
I think that's pretty fair, I think I'd match pretty well. It's hard to find people, I know - I get called nearly day, based off my linkedin and github. I don't think it's too unfair, as long as if someone is lacking a bit in one area, it's a bit forgiveable, meaning, a lot of that stuff, I feel, is pretty easy to catch up on. I know for myself, I didn't graduate with CS, but I'm now working at a very tech-intensive startup, on the forefront with HTML5 and patent-able technology coming out of here - I can see a few things I might be lacking in, but the rest should be ok. I have requirements of my employer too - not being pidgeon-holed into some projects, which is why I'm at a startup now - getting to use Python, learn and make decisions about new tech (Redis, html5 video, architecture), writing C extensions to PHP, and a lot of Javascript - that's really cool stuff. I don't want to write web pages, I want to do web apps. Are advertising/"interactive" agencies like that? I actually want to send you my github, and see what you think. I'm trying to gauge requirements, etc. I'm on the east coast and want to move to the west coast in a year or so... starting to make plans now. I had a chance to join the League of Legends dev team (very, very cool tech there), but the timing was unfortunately off.
&gt; I look mostly at education to see if you have at least a B.S. in Computer Science or related degree but that is not really important as having solid code samples that demonstrate the qualities in code that I'm looking for (but having a degree can put you over the edge if I'm comparing two similar candidates). I have an ivy league postgrad degree and even I think this is silly. You're going to pass over a lot of good people by insisting on compsci (or any) degree. By far the smartest developer I know, who names his own price and has had his fingers in numerous household-name projects, never finished college.
Consider using a professional service to send the emails (I use mail chimp, I guess they could handle this kinda load). They have an API so you still need to do all your code and can personalise etc, but the emails will be being sent from a location familiar to the ISPs and therefore much more likely to get through without being banned as spam. They spend a lot of time working with the ISPS to ensure that hey are comfortable wit their emails and tna their customers are legit (you might not be able to send so many at the start but eventually they would be cool with it). Fixing this issue radically increased the deliver-ability and performance of my email campaigns (e.g. +50%).
There is one thing that I do not see: salary. Your requirements may or may not be unreasonable, but without knowing the salary its difficult to comment. If you said you were offering 40k for all of the above, I'd laugh. If you said you were offering 150k (just for sake of illustrating by using extremes) I'd be a bit shocked. Just in general, I'd say that spending too long looking for someone to fill a position is a good sign that the salary offered is not where it needs to be. This is of course not saying that a higher salary makes that a certainty, its still going to be a pain to find the right person.
I think your requirements are very reasonable, with a few exceptions. You specifically say you don't want globals, but for many projects I work on, we will keep configuration options in there. To me, at that point, it is a matter of preference, and you really shouldn't be disqualifying people that disagree with your preferences (provided that both of you are reasonable). The other thing I would say is that almost everything I have written for the last 4 years is code that I cannot release. I used to crank out my own projects on the side, but lately everything I write is for a paying customer, and I will not release it. You should be prepared to offer applicants an alternative to showing code from recent projects, such as an example project for you. (Don't make it too complicated though... again, it takes time to do these!) Other than that, I'd say your requirements are reasonable, but you will certainly have a hard time finding people with that kind of experience. Most PHP programmers don't have 1/3rd of it. Be prepared to pay someone what their worth.
it is VERY VERY easy to hire great developers. you want to know the secret how? here it is: PAY THEM A LOT OF MONEY. the reason employers never get great developer is that they are not willing to pay what developers are worth. they always want good devs for cheap. but the company doesn't have the money to pay awesome devs? well, whose problem is that then. checking those requirements, is it hard to find someone with those skills? NOPE. a lot of people have those. as long as you are willing to pay and provide their demands, you can have anyone (even rasmus ffs..) on your team.
Yeah, that's the danger of mass email - you don't want to spam your audience with the same email. 
Mail Chimp, or similar, seems like the best way to go here. Saves us from reinventing the wheel and provides a clear path through the dangers of getting blacklisted. 
I definitely agree here. If asked to provide a code sample today, I honestly don't know what I'd show. I've had to sign NDA's out the wazoo for most of the code I am most proud of. I think another thing that you kind of touched on here is that quality developers are very high in demand, and as such are not going to feel the need to "bend over backwards" as far as meeting 70 different requirements and writing custom code samples from scratch, they'd just move onto the next opportunity in a lot of cases.
I work for a startup (and have interviewed numerous candidates) and think your requirements are mostly reasonable. The one thing that I'd probably remove is expecting people to know the latest and greatest methods from PHP 5.3. That seems overly pedantic to me. If I have a developer who can understand what design patterns are and has actually used a few, that's WAY more important to me than not knowing that some specific function was deprecated in PHP 5.3 You probably want to add Drupal to your list of frameworks. I know it's not MVC, but if someone has actually written their own Drupal modules, that shows that they "get" how event-driven frameworks work, and that's a huge plus. As a bonus question, you could ask them to compare and contrast Drupal's event system to object-based inheritance. One good question to ask in a job interview is the "FizzBuzz" problem. You can find the details with a Google Search. If the candidate doesn't understand how loops work or how to work through a simple problem like that, then we end the interview right there. It's not too unreasonable in lieu of submitting a code sample to ask the candidate to solve a sample a problem. In our case, we ask for them to write a sample Drupal module that solves a specific problem. It lets us test their ability to use a framework/learn a framework, and solving a problem from the ground up. (Though don't be surprised if a really good developer tells you that they're not going to work for free, which is also a valid answer) 
Ah, yeah, I guess I was a bit ambiguous since I didn't link to anything. MySQL DATETIME is timezone agnostic, so you're left figuring out what to do from there. In relation to the question, since he's doing the comparison in PHP, he could store the time as a string with the full date, time, and timezone, and then pass that into the DateTime object, or store the timezone as a separate column and make sure to grab it during your select.
I wouldn't even bother applying for an job posting written like that. Why? Because I don't like to deal with shit, and it smells a bit. I have 11 years experience, and more than enough work to keep me busy. You're requiring developers to adhere to certain methodologies under the assumption that the end result will be excellent, Grade A code. The reality is that I, or anyone else could utilize MVC, Inheritence, Namespaces, Symfony and all that junk and still write horseshit. What is good code? I'll tell you. Good code utilizes decomposition. It's efficient. It's readable - without comments. Good code is simple. It's short (while maintaining readability). It does the job. There's a time and a place for everything. A good developer will choose the methodology based on the requirements and write great code without worrying about what standard his asshole boss likes. And by the way, my "custom database wrapper" class writes all my queries for me. I'm pretty proud of it. The rest of your code sample don't do's I agree with however. Good Luck.
Oh, another thing I left out: UNIX command line skills. If a job candidate knows the UNIX command line well, how to shell script, how process control and signals work, etc., that's a really good sign. When a candidate says that they have UNIX CLI experience on their resume, I'll usually ask them a question like, "What does the shell variable $? mean?" That's a fairly basic shell scripting question, but most people who say they know the UNIX CLI do not know the answer. 
I think this is a great response. A lot of what he's looking for is good, and valid, but as you said; some of those things you just don't use until you are in a situation where you need them. I have no problem using VC systems, and I am sure I could pick up an MVC framework (though personally, I'm not a fan of the MVC paradigm), I just haven't yet been in a situation where this is at all important, so I haven't done so yet. Same with PHP 5.3+. I actually started writing something in 5.3, and then had to re-write it with 5.2 because that's what the server was running.
i think you are setting the bar way too high here, unless you are paying at least 6 figures. i've been developing OOP applications with PHP for the past 10 years and do not meet your criteria. i realize this is what you want your employee to be, but a lot of this can be developed after you hire this person. you also seem to want a jack of all trades, and a master of all of them as well. why not hire an SQL guy, a javascript guy, etc... i understand you need to have knowledge of these things, but a lot of this can be abstracted away and handed off to the master of each area. here is my advice. find someone with good fundamentals and build on those. or make sure you include a salary range of 100-150K in your ad.
This is really great. Thank you
I don't think you're being unreasonable. In fact I applaud the defined spec of what you require. There are far too many PHP developers out there that bumble along in their trade without taking the time to develop a good understanding of what being a decent developer means at a basic level. I would say, from that spec, that what you're looking for is a decent mid level PHP developer. You're not asking for masses of experience with software architecture you're not asking for masses of experience with any specific potentially niche framework or bit of software. All you're asking for there is someone that respects their trade and is passionate enough about being a developer that they have made sure they have a decent/working knowledge of all the bases. The only thing I'd say is you may be better with a written test that you don't necessarily look for 100% on, or perhaps allow a timescale + access to the web. Code samples can be far too easily ripped. 
He also said he's in SoCal, so you have to consider cost of living. I'd personally be wary of relocating to CA for anything that paid less than 100K.
You're going to have to learn some statistics, and then you'll find that it's much easier using a specialized language like [R](http://www.r-project.org/). 
I also wouldn't apply for that job. It comes across like the hiring manager is kind of a micro-managing tightwad, and I'd rather not work for someone like that. It sounds like I'd have to wear a suit to work. No offense, OP, but you might want to chill a bit.
Project size shouldn't be a factor. Applicability to the project should be.
1) Degrees shouldn't be the thing you look at most. if anything, a degree means nothing. The only three things a person needs to learn programming is a computer, the internet, and will power. A degree is important maybe for juniors, since they will have very little professional experience, but for a senior? Unless they are immigrating from a different country, then a degree will hold little weight in decision making. 2) The requirements are perfectly reasonable. At the risk of sounding arrogant, I do match all those qualifications. Ctrl-F-Guy makes a good point though. Just because someone doesn't match 100%, it's not necessarily a reason to turn them down. A senior level person should be able to pick up new skills relatively easily, and a good employee will be someone just itching to become a better programmer. I always ask during interviews what kind of coding the interviewee does on their spare time. Not everyone can code during their spare time, but this question often exposes whether someone is a programmer, or if they are just a mindless employee. 3) Ignoring previous job experience is bad bad bad. Yes, everyone fluffs up their resumes with lots of stupid keywords to get past HR droids, but nevertheless, it's not hard for a programmer to read a resume and determine what is really true, what is just fluff for the HR eyes. If you're a company creating CMSes, then the guy whose 5 years of job experience centres around HMI controls, then maybe he can be shortlisted but he wouldn't be your first choice. 4) Your code sample rules are... not fun. 4a) Custom database wrapper is sometimes a necessity. I had to write a custom database wrapper to access SQLServer because of UTF-8 issues (a long time ago). there was no way around it, and if you turn me down because I had to solve this problem, then *shrug* 4b) code ripped from another source and claiming at as your own is plagiarism, but reinventing the wheel is usually just a time sink. don't discourage mashups and using third party code to achieve a goal. 4c) No deprecated methods is... a long shot. Just ask them "you know what E_DEPRECATED is and why you should pay attention?". 4d) Convention is nice and all, but saying someone is a bad programmer because in their personal projects they mix and match is silly. A good programmer shouldn't be bothered by mismatched convention (and we're talking about PHP here, c'mon). If someone claims they can't read code because curly braces are on the same line instead of a new line, then *shrug* 4e) No globals? Tell that to my one-shot CLI scripts. Again, it's all a matter of perspective. There is no such thing as a one-size-fits-all solution. There are merely solutions, and then better solutions. Your code sample DO's are nice, but sort of misses the point. eg, write a set of classes that demonstrate a pattern, only means they know how to implement a pattern, but says nothing about WHY they would want to use that pattern in the first place. Over engineering is just as bad as under-engineering. You want someone that can, at a higher level of understanding, solve problems. If their code samples demonstrate NIH syndrome, or solving the wrong problems (using a random design pattern they read about for no reason), then this will not be the person you want to hire. I think, for a senior level position, you should focus your efforts on people who can code in two or more languages well. I think it's very valid to expect a senior level dev to be able to know PHP + at least one other scripting language at least, like Ruby or Python or Perl (or one of the JVM-specific ones). But in the end, it's very hard to hire good talent. No matter your job description, code samples, tests, etc, a flaky programmer is bound to get through. Which is why you should have probationary periods to test them out. Its the only way to know for certain whether this person will be a good fit for your team, both in technological skills and in people skills.
yes, and Henry Ford tripled his employees salary to increase employee productivity.
I came up with this simple set of questions to gauge a persons web dev skills which worked quite well when looking for several PHP contractors. They are certainly not comprehensive, but it quickly becomes clear what people do and don't understand. Couldn't believe how many couldn't answer the first CSS question. It's rare of course you'll find someone good at the entire range. This would be a starting point, then would ask more questions on areas they seem stronger in. Missing are some good javascript questions. SVN - Have you used any source management control systems? CSS - What's the difference between margins and padding? - What are the differences between DIV and SPAN elements? - What techniques would you use to make a gallery of thumbnails fit a variable size window? - How do you make a block level element completely contain one or more floated elements? - How do you center a fixed width div? - How do collapsing margins work? - What's the difference between setting sizes in ems, percentages or pixels? PHP - What is the different between include, require, include once, and require once? - When would you use GET versus POST? What are the major differences between the two? - Can you explain what the MVC methodology is? In PHP what would each part do? - What frameworks have you used and which do you prefer? - What is an abstract class? - What are magic methods? - What are PHP extensions? have you ever made any? - Explain the difference between the == (2 x ‘=’) and === (3 x ‘=’) - Can you explain the basic idea behind sessions? - What's the difference between print and echo? Database - How do you determine the efficiency of your database queries (in MySQL or Postgres) - What is a left join used for?
I'm self employed and I still work with almost entirely 5.2 because that's what 99% of my clients (and their web hosts) are using.. I know 5.3 very well and play around with it in what little spare time I have, but often developers just don't get to choose the technology they want. Developers who always DO get to choose the technology/platform/coding standards they want all the time can easily become "spoiled" in a way, and find it difficult to work in other ways. As a developer you've often got to adapt to what's required..
I hate to be an ass, and you've got your answer already and that's great, but this is something you could've solved with a very quick google search.
code samples dont work. you can only see the person real code in the probatory period. B.S. in Computer Science - you really think this is going to improve anything ? IMO this is a loss of time.
Very true. I guess it depends on what you're going to be doing with the dates, and where you're going to be storing them.
Yes it would. The point of this post is....is it worth it and general brainstorming.
Yeah, I agree with this too. I find that the main difference between people who have a degree vs. those without a degree, but with experience is their ability to adapt and get things done. You're not in school any more, you're being paid for your time, so you need to be efficient with your time. Introducing new technologies because they're new and cool is often a big time sink (even if it is a good learning experience). Reminds me of this xkcd comic a bit: [http://xkcd.com/974/](http://xkcd.com/974/)
Your job posting and interview are probably so daunting that you scare away most good candidates. I am a high level PHP developer and though I am confident I would meet all of your qualifications, the requirements scare me enough that I probably wouldn't even apply. Try being inviting and interested rather than seemingly aggressive and condescending.
you'll definitely need to go third party. you're going to need a lot of IPs to not get blacklisted / sent to spam.
Q: What is the different between include, require, include once, and require once? A: Who cares ? Q: What's the difference between print and echo? A: Who cares ?
Well you said your designers don't know php so who is going to do the form processing anyway? Looks like you're just trying to complain here.
You aren't looking for a PHP Developer, you are looking for a PHP Master. Your problem: you are not paying $150,000 / year, which is what someone with this type of skill set could easily make via consulting (which is what most true masters do, once they've exceeded the pay rate of web shops).
I agree. Nobody wants to work for a dick.
Well you don't really need a language specialized in statistical computing to do some basic statistics. I work in Institutional Research and part of what I do is maintain a basic reporting interface for our departments website and that's done using nothing more advanced than PHP/MySQL. We calculate persistence rates and other general statistics. For more hardcore reports we do use [SPSS](http://en.wikipedia.org/wiki/SPSS).
you're asking too much. And you make some small mistakes that for someone that really knows his php will mean alot. For example you cannot throw dependancy injection in tha same boat as factory. one is a design pattern for oop, the other one is a application design pattern [not sure about the actual terminologies]. You are asking people to know the names of the patterns: what if i say inversion of control? does that mean anything to you? What if i, at the interview i ask aout what's better: constructor injection or setter injection? Are you prepared to offer a job for the questions you ask? Because good programmers get bored very fast. I have been through a ton of interviews, everyone asked basicly the same thing, and i left asap. Because it was uninteresting. I wasn't designing stuff, i was barelly following some other guy's implementation, with very little room to think myself. Ho about asking about rest? how aout asking about building and working with api's ? Why do you need SEO? that belongs to apache/nginx area [.htaccess for example]. You are not touching nosql for example, no caching tiers: apc, memcache to mention just 2 technologies. You are also not touching specialized search tools: solr, sphinx. And those are usually required. U're not touching varnish. You don't need proof that the candidate has actual knowledge about what each of those does. You need the candidate to be aware of them. That is proof of previous experience. Why do i need to know about js? i hate js and i am no front-end user. i deal with complex backends, not with what the user actually sees. that's another job. Do i understand json/xml or whatever serialization you choose? well yes. Have i used them? maybe no, maybe yes. I am thinking for example the famous question in oop: is square a rectangle or rectangle a square should prove that the candidate has pretty solid oop knowledge, no mater what he responds, granted that he arguments his response. Why you sanitize user input? [well, why all of it?] major frameworks do that for me. I don't need to do it, nor do i care unless it is a custom field [email, username, etc. should be validated by the framework]. Hell, even forget about validation. Use a orm. That should fix it. Use prepared statements. Now that we came to the orm subject: does the candidate know what a orm is? examples? how about dbal? what does that do? what does orm do? As you can see there are alot of things related to my day by day work, questions i would love to see in a interview. And yes. What i wrote are unreasonable for most php developers. Most of what you wrote are unreasonable. Because they need experience. Not a manual, not 1000 books, but experience. And that's what you pay, not knowledge. Knowledge can be gained, experience can tae alot of time. One more chapter you forgot: debugging, backtracking and so on. you might want to test that. PS: education is usually nothing. Not on web. In a somewhat organized development it will count. in here it will not. There are "unorthodox" solutions that work better than what you learned at university. And the university does not give you experience. Between a 6-7 years programmer and a 2 years programmer with a university degree can you tell what i would choose? Forgot one more thing i would love to see in a interview: give the candidate a small application. Put him to design it. Not specific classes.but application logic. See how he sees the modules. See how he splits them. See if the application is scalable. See if he identifies the differend problems within the application. A good programmer should be able to sketch such a application in 20-30 minutes maximum.
DO NOT RUSH. Don't try to skip steps. Take it easy. Patience is hard at first, especially when you see people doing amazing things. You want to go there very fast. But just take it slow. Read alot, ask questions [don't ask stupid ones, you'll end up trolled hard]. study, try, fail. Understand why you failed, understand why you succeeded. PS: don't assume you know something. You will definetly find out later that you don't [ofc not talking about functions, parameters and so on, more about principles].
read a book every 6 months. 1 week... impossible especially later. To understand concepts it takes a long time. Try reading the gang of four in 1 week. Now try reading it in 6 months. Probaby it is still not enaugh to fully comprehend it. There are books and there are books...
why static functions? that is a abstract class. maybe even final if yo like it to. But it is the wrong approach. Your class is a collection of functions and nothing more. i will pos maybe a example of how i see the implementation for such a thing. and a few disadvantages for which i do not like static methods in this case. btw, nice use o filter_var. rare are php programmers that know about this :))
This is a cop-out answer. Letting your skills stagnate because your boss "won't let you" research and toy with new technology on company time is a BS excuse. There are lots of developers whose skills are a snapshot in time of years past. There are guys who don't know anything other than COBOL because they've been working the same job hacking on legacy systems for decades. Is it their boss' fault that they haven't taken the time to keep up to date and upgrade their skills? No. Does that mean someone hiring for a position that works with more bleeding edge technology should settle for someone whose skills are outdated because they've been employed a long time? No. I think the OP's requirements are extremely reasonable. I might change the first one to "You CAN write code in PHP 5.3+ (no deprecated methods, etc.)". This would just require someone to know and understand what's new in 5.3. Staying up to date is every good developer's job - whether it's on company time or not. The only thing I will agree on is that resume is more important than formal education. I have a Bachelors in Computer Science and I wouldn't say it helped me a whole lot. Some of the best developers I've ever met had no degrees or were still in school. Passionate young people will already have a firm grasp of everything a typical CompSci program will teach them by the time they even get to University.
&gt; I had to google "fat controller", but once I saw what it was, I was like "Oh yeah, that". If asked that question initially, I'd give a blank stare. That phrase isn't something I hear or see a lot, however I have opinions on the matter. There are so many things like this in the programming namespace. There's the long joke that programmers use their own vocabulary, but even among programmers there often isn't a unified terms list. It's very easy to fall into the trap of thinking that just because someone doesn't know the term, means they aren't familiar with what the term represents. I remember the first time someone explained Functional Programming to me, and I was like "that's a thing?" For the longest time I thought that "procedural programming" just meant linear execution vs event driven execution, because each step "proceeded" after the previous.
Why not Zoidberg?
I don't think you are unreasonable. I think people are unreasonable to think they should not know these things. I'm 20 years old and self taught. I was able to get a great job in a company that was interviewing for 3 months before I came in and was able to answer all their interview questions. A lot of people don't have a lot to offer. They never get past the basics because nothing ever pushes them to do so. 
Reporting is different from analysis.
If you think you should not know these things you are a shitty programmer. 
True, it doesn't really matter which people use, what's interesting is how they answer these questions. They are pretty simple questions, and I expect and found most PHP developers able to answer them. If they have no idea, and have never looked into these things, it's not a good sign
Most of my opinions have been stated by others in this thread, but I had to flag a point: &gt; are your classes simply wrappers for php functions or a giant hub of functions? This sounds highly speculative and subjective. You're entering a dangerous territory there of confusing developer preference with developer experience. I have code that I know would be scoffed at by OOP purists, but I made it that way on purpose because it worked better for my use cases.
TIL I'm really underpaid.
I don't agree at all. Do you know how long it would take me to get comfortable in 5.3? Like 2 days. Oh, this function is throwing a deprecated warning, let me spend 3 seconds googling what I should use instead (or more likely, looking it up on php.net). But going through and reading the release notes for 5.3 and then jumping back into 5.2 for 60 hours a week is a waste. That's not going to really stick with me a few months down the road. One of the main reasons I love being a programmer is because I love to learn by doing, learn by example. At one of my earlier jobs, I was able to finagle my way in, despite them having a strict "CakePHP experts" requirement on their job posting. I had no CakePHP experience at all. I told them I was a quicker learner and my other experiences and education would make it trivial for me to pick it up quickly. Flashforward 3 months and I was the in-house CakePHP expert and they were sending me to conferences to learn more and bring back to share with the rest of the team. Now of course there are counter-examples and extremes like you reference about the COBOL guy. I [touch on this](http://www.reddit.com/r/PHP/comments/mlpeg/having_trouble_finding_qualified_php_web/c31xess) in another comment of mine on this post. Anyway, in the end, what I was trying to say is it's not always about what someone knows, but what they have the capacity to know given the chance.
While the differences between include and require may be minor, there's a very critical difference between include and include_once. You most certainly should care! print and echo, tho... yeah, not much difference.
On top of all that I think good development skills are often transferrable. I'd recognise a familiar design pattern whether it's in PHP, C#, Java, C++, Delphi or Python, and perhaps more importantly I'd recognise a **bad** design/lack of design in any of those languages also! It's useful to get to know language specific features that can help out in a given situation, but that comes very quickly to most developers using the same language full time.. The OP seems to be looking for very high (although not unreasonable) standards, I would question whether they really need someone with that much in-depth knowledge of their specific technologies/platforms, or whether they could afford to give an otherwise-solid developer a few weeks or so to settle in..
Yeah, I guess it's not "unreasonable." That's not the right word. It's that it is too much of a wish list, and including too much that would eliminate people that could easily do an awesome job. Are there people that match this criteria 100%? Absolutely. But, if the OP is wondering why he's not getting much response to this ad, well, it's pretty obvious.
For JS your two biggest questions should be: 1. Can they explain how JavaScript scoping works and how it differs from PHP 2. Can they explain how prototypical inheritance differs from classical inheritance. Also be sure to ask them how to bind to a DOM event without using a third-party library.
No idea. Measured in months. I couldn't tell you why, to be honest; there's no magic bullet there I expect. One thing worth noting is that this list is the ideal list. We don't insist on all of them, and we expect to have to teach people some stuff. Our public job ad is also fairly generic – specifying server-side web development, object-oriented programming, and experience with web frameworks (for example). 
Factory pattern a sign of bad architecture? Really? I must be really stupid then. Let me rephrase: What would you use for instantiating a specific object from a very similar sets of objects? For example: what would you use to instantiate a payment method from 5 payment methods you jave available if not a factory/abstract factory? Yes, classes are not all there is to OOP. But classes are the building blocks. I do however feel that what you said about factory is completely flawed. Are you sure u're not talking about the Singleton? [which indeed is a very bad pattern]. Factory is a very flexible to add, remove, update members of the same group of objects, without the external application to know about it. I would even say that factory actually induces decoupling by hiding the actual implementation of the final object returned. Abstract factory might induce dependancy, but that's another story. Singletons on he other hand do induce dependancy in all cases, we all know why.
Those are good, cheers
To be fair, I never said that this person needs to meet 100% of these requirements. And per your other comments, you seem to think we won't make an offer to someone who is less qualified but has the aptitude to learn the position. We do want someone with passion for programming, and that does mean keeping up with the latest technologies. However, the vast majority of candidates we do receive, don't even have 30% of what we are looking at. What you're looking at is not the full/real job description. The full/real job description is much better written of course, and is more tame. Lists out what the plusses are and the mandatories. I don't think salary is the problem. We're not offering 40-65k like others seem to be suggesting. The amount is a lot more than that. I would say that is competitive for our area. We don't work 60 hours per week. More like 40-45 on average. We get paid holidays, benefits (medical, dental, vision), options for 401k. Everyone get time off during the holidays (not counted towards your paid time off). Free food a couple of times per week. If you do have to cram, and work those 60 hour weeks, and that may happen like once a quarter or so for a week, you'll get compensated for it. We do pay overtime for those who qualify, we will even contract out to our own employees if they want to take on a project on their own time. Employees are compensated with paid time off, gifts, money, etc. if a lot is required of them. Don't get me wrong, we're not a sweat shop. It's a great environment for a developer who has passion, wants to stay cutting edge, and loves what he/she does. 
I have: $test = ereg_replace("[^0-9]", "", $q); But this only takes all the numbers and puts them together. So, I'd end up with 4127 in the 4 1/2 by 7 example.
We're far from micro-managing at all actually. The point of having these standards is because we want the developer to have autonomy. e.g., Have the ability to work on his own, can find answers or seek help if he needs it, and has the aptitude to figure out complex problems.
I'd go for something like this.
I agree. Letting your skills stagnate because your boss "won't let you" is an excuse.
You saying that the vast majority don't even have 30% makes COMPLETE sense. Your requirements are too strict. I don't care if you say that they don't need 100% of them, YOU'RE CALLING THEM REQUIREMENTS. "Requirements" has a very specific meaning. It's like saying that you're required to be 35 years old to run for president, but it's ok if you're not. No, it's not ok, it's required. So what you are getting instead are the people taking the shotgun approach of generically applying to every single thing they can find and hoping something sticks. My recommendation would be to break it out into a true REQUIREMENTS section (e.g. 2+ years PHP development, working knowledge of MySQL, etc. whatever) and then a section that says "the ideal candidate will also have...". That way you aren't scaring away the people that have 70-90% of what you are looking for. Applying for a job is a lot of work if you're doing it right, and I personally wouldn't want to apply for a job where it seems like I am going to be eliminated right off the bat because I don't meet the "requirements".
Why would any sane developer know this off the top of their head? I've done 11 years of development, and the only time I've ever had to know was when I had to look it up on google after an job interview. Frankly, if you started asking me those questions, I'd probably thank you and leave. [edit: referring to print/echo and include_once/require_once]
I don't think regex is the best way to do this. Is there a reason you don't just split it up into multiple fields? e.g. ` &lt;input name="w[whole]" /&gt; &lt;input name="w[fraction]" /&gt; &lt;input name="h[whole]" /&gt; &lt;input name="h[fraction]" /&gt; ` or just use decimals - 4.5 is easier to parse than 41/2. if you want to do it this way you could try using the space as the delimiter but users will almost certainly screw it up. But if you don't care if it doesn't work half the time you could just explode it: `list($w, $wfrac, $h, $hfrac) = explode(" ", $_GET["q"])` But this will suck so don't do it.
It's on a single "search" input. It doesn't have to be perfect, but it should attempt to make a guess about size if numbers are included. I won't have any control over how the users enter the information.
POSIX regex functions have all been [deprecated](http://php.net/ereg). Never use these. If you need a regex, use [Perl Compatible Regular Expressions](http://php.net/pcre). 
While in some ways I agree there's more to 5.3 than deprecated functions. Namespaces, late static binding and various new classes (like DateTime) that replace old functions can take some time to become accustomed to and longer to actually use effectively. Take a look at Symphony 2 or Zend Framework 2 source if you want to see some proper 5.3 in action.
If you are far from micro-managing, you should actually give the impression that you are far from micro-managing. As it is, reading your post, it sounds like you are a micro-managing tightwad. An experienced developer would probably laugh this off and never apply for this job. 
Why aren't you finding good PHP developers? Because any good developer worth his salt would never apply for a position within your company based on this. Look for problem solvers, GOOD problem solvers, not masters of everything. 
I have hired programmers for 20 years. You list is full of things that can be learned in 12 months time. What they can't learn is: * To be able to work with people. People skills. * To be careful. * To provide meaningful comments. * To be able to produce easy to read code. Those things they have to have already. The others can be learned very quickly. 
Amen
Despite the other posters I feel the bar is not set too high. PHP web development has moved well beyond the days of writing 'PHP pages' (which is where a lot of PHP developers are stuck nowadays). It is truly shameful to expect six-figures for these qualifications comparable to that of junior web developers in other programming languages like Ruby and Python. The definition of 'top-tier' and 'senior developer' encompasses more than what is listed, and I am personally a junior developer and I work with what you listed on a daily basis.
What salary are you offering? If your offers are too low you will scare away good coders.
It was also because he started chopping up the job of making cars into boring repetitive tasks that his employees hated doing for 8 hours a day and then threatened them with firing if they didn't make their new, incredibly high quotas. The wage premiums were to reduce turnover and training costs. Sounds nice for the worker, minus the accountable shortening in their life expectancy from the work.
&gt;evolution from file-per-page to full on MVC This is what I'm starting to work on now, any tips?
If you can do the same thing with software development, I will applaud you sir
Agreed. I know most of the stuff he was asking for, and I know I could learn anything else that he I didn't already know, but I wouldn't want my future boss to be like he came across.
I'm kinda curious as to what this position's salary is. I know right now I'm bored to death with my job (I live in Philly, looking to stay there) and I will interview with companies, but they don't want to pay me what I'm worth. I'm not going to quit my job that pays more just to work with more interesting code, that's what my hacking around at night is. I don't think the requirements are too brutal, it's not really going into a lot of the things I think web devs should also know: the ins and outs of the environment you're running on. Be it apache, nginx, linux, or windows.
Some of that stuff isn't exactly mind blowing if you're played with languages other than PHP before. When I interview, I'm more worried about how someone structures their code, and if they can see beyond just the code to where it ties into the system. I'll have them write metacode, I care about the algorithms and though pattern, not the functions you use. That can, and should be, taught by the lead.
depends where you live. I was thinking 120k (I make 100k) would be fair, but don't know the increased cost of living in cali.
I'm a big fan of [codeigniter](http://codeigniter.com/user_guide/libraries/form_validation.html) MVC Framework (Link to form helper/library on the user guide)
I do live in socal, san diego to be exact :)
These requirements are more than you frequently see for similar positions, but with your environment and pay, not unreasonable. It takes a lot of time to hire the proper programmer considering [large amounts can't even code](http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html). If you want to increase your odds of finding someone, you have one of two options. 1) Don't restrict to PHP. A good programmer is a good programmer. And if they meet your understanding requirements in another language, they'll be able to transition to PHP quickly, especially if you're using a comprehensive framework (I was able to transition to programming Java after never having even seen source over the course of two weeks for an internship). 2) Cut your requirements a bit and focus on finding someone who you think could mature into the kind of programmer you're looking for. Most PHP programmers have skipped the things you mention not because they can't (although that's certainly true in some cases), but because they either don't know they should or don't have a reason to take the time to do it in their personal projects. Basically, find someone who understands programming (focus on your design pattern stuff) and you'll find someone faster.
The open/close tags do not have an appreciable impact upon the processing of the script. To make a bunch of changes like these would be premature optimization. The only advantage would be backwards-compatibility to servers which aren't running 5.4, and don't have short tags enabled.
Well, it'll work for a little while... a month, maybe two.
I don't know where you live, but man that's expensive for someone with just some technical skill in a limited range of technologies. $150k/yr and we're talking architecturally savvy. Someone who matches the OP's requirements but does not exceed them will probably tell you that REST is just a "fancy way of using HTTP".
Why wouldn't the developers make the zend form object from the designers' html? If you ask me symfony 2's forms are an abomination.
I feel like I can stand up to this list, should I be making at least 150k?
How to be a good coder in two steps: Step 1: Solve the problem at hand. Step 2: When you have to go back and re-do Step 1, learn from your mistakes.
If you know you'll have exactly this kind of input: if (preg_match('/^(\d+)\s+(\d+)\/(\d+)\s+by\s(\d+)widget$/', $_GET["q"], $matches)) { var_dump($matches); } $matches will now contain what you're looking for. I'm not entirely sure of what you're trying to do, and can't assess if you really want a regex, or just something else.
Because they are basic language constructs that every single php developer would have to have used at some point in time. The difference between include and include_once is like the difference between == and ===. There's only two situations where you wouldn't have had to use those functions: 1. You only make very simple pages that never pull outside elements 2. You use autoload for EVERYTHING. Both are cases for a really awful PHP developer. As for echo and print, they are fundamental elements of the language. You cannot work in PHP without knowing at least one of those two functions. I mean, you're right, the question is stupid, but only because **every php developer should know the answer.** We're talking chapter 1 of every PHP book ever written.
You could try something along the lines of the following (RegexBuddy is your friend!) $regs = array(); if (preg_match('%([w]:\d+).+([wfrac]:\d+/\d+).+([h]:\d+).+([hfrac]:\d+/\d+)%', $subject, $regs)) { $w = $regs['w']; $wfrac = $regs['wfrac']; $h = $regs['h']; $hfrac = $regs['hfrac']; } Not sure if it'll only match if *all* terms tie in or if it'll work for a partial match though.
alright, I['ll try this out. * SVN sucks because tags and branches aren't what you'd logically think they are. Use git ;) * Margin is space from edge outwards, padding is space from edge inwards. * DIV is a block element, used to denote structure. Spans are inline elements. * haha I'm not a designer. I'd just opt for a non-GPL open source solution and get it done in half the time instead of reinventing the wheel. * nope * I don't think so * what? * em is relative to text size, percentage is relative to container size, pixel is exact. * include is recoverable, require is not. using _once on either will prevent the file from being included two or more times * GET is appended to the URL. POST is part of the body. The only difference is that POST is more flexible in content types, get is only key/value pairs. POST can involve more bandwidth since all headers must be sent before the BODY whereas GET requires the first header only. * Model represents logic on data. View represents logic on presentation. Controller represents the glue between the two. This holds true regardless of the language (and I'd point out it's regardless of whether or not the data the model represents is persisted in any form or fashion) * The only framework I have extensive experience on is Zend. I hate most frameworks just because it's very difficult to use just the good parts and discard the rest. Symphony2 is apparently supposed to be quite modular, but I havent looked hard. These days I always implement my own dispatching logic / front controller using Zend_Controller_Route_*, and I use a few other zend components which I always extend or wrap around just so my hands aren't tied. * An interface is just a contract, an abstract class is a foundation to build upon. * Oft abused methods ;) methods with hidden functionality pretty much. * no I have not. mostly because I hear nothing but horror stories * === checks type ontop of value (3 == '3' !== '3') * persisted data unique to a client * echo is a language construct, print is a language construct dressed as a function (haha I had to google this, I was suddenly wrecked with uncertainty) * EXPLAIN SELECT is a good start. * left join will ignore data not present in the right table
include is recoverable, require is not. That's one reason to care. doing if (!@include($file)) throw Exception('could not include file') is a bit more elegant than: if (file_exists($file)) { require($file); } else { throw Exception('file not found'); } 
You first say "you're asking too much" then list off a bunch of technologies that were never mentioned. Later on you basically say "I don't know, and don't want to know, what my third party libs are doing", then advocate an ORM. Which is a shame, because your last paragraph was actually a great thing to point out
 while(1){mail(...);}
Yip pretty good :) The worst answer I got for the margin/paddings question was "Margins are left and right, paddings are top and bottom?" Not a good start when you're applying for a web developer position. The collapsing margins was probably the hardest question, only one person of about 10 interviews knew what it was. They actually happen all the time, but we don't use the name very often so maybe it's not a very good question. Basically imagine two block level elements with margins, one after the other in the HTML. One has margins of 10px, the other 20px. What is the distance between them? The margins 'collapse'.
Very unreasonable. I have 15+ year of experience, been working as sw engineer, architect and hiring manager. 1. Code samples is a wrong way of assessing developer's skills and experience, because it's not that hard to come up with some cool design pattern implementation. Especially, when candidate is sitting at home and have virtually unlimited amount of time for preparation. 2. Not reading resume - a big no no. Basically, you are giving them a message that you don't care about what they've achieved in past. With the approach you've shown, your best candidate is a college graduate with 0 industrial experience, but lots of knowledge of best practices. I'm sure they exist and, probably, would be happy to work for you. Advice: setup a development environment, prepare a few simple original tasks which candidate should be able to complete within an hour and invite candidates with good resumes to your office. Each candidate should be given an hour of time, unlimited use of Internet and should produce working code which solves the task. If a candidate does not solve a task or code is not working, say "Good luck" and start arranging for the next one. If task is solved and code is good, continue discussion. With this approach you can streamline the process and see how candidates really perform.
Pretty sure that is the basics to be considered capable of calling yourself a PHP developer. 150K? Perhaps in San Jose.
I agree that they should know what an include/require statement does (i.e. include another file) or that an echo/print statement prints stuff to the stdout. To ask the **difference** between and include and a require or the **difference** between a print and an echo is stupid, and I certainly don't agree that every php developer should know the answer. They should know how to **find** the answer (I'll grant), but to know that off the top of their head just tells me that they've been spending a lot of time browsing sites like www.phpinterviewquestions.com. It tells me zero information about if they can actually write maintainable code.
not a good start!? I think you're confusing developer for designer then. As the programmer, I shouldn't need more than basic CSS knowledge. Understanding the flow and semantics of HTML as well, but understanding how to assemble complex table-less layouts? not so much. The web designer should be proficient in this as well as graphics tools. I wouldn't work any other way, figuring out cross browser compatible CSS? ugh.... no thanks. Here are some variables I'm injecting to your template, have fun.
I don't know about your hiring experiences, but I've found that the job ad is rarely read past an identifiable skill mentioned in it. C'mon, how many people couldn't even tell you what the company does...
What's your current salary? Edit: You say you make $100k in a comment below.
I see what you're saying, but it also depends on the requirements of the position. Sometimes, you need a code monkey, sometimes you need a guru with intimate knowledge. A code monkey not knowing something mundane is not a bad thing. It is for a guru though.
Oh yes it all depends what the person says on their CV, and I always ask what their strengths are before we start. If they say they are a PHP &amp; Javascript developer then yes we don't worry so much about the CSS.
You'd best look where your script spends most of its time rather than trying to do pointless micro-optimisations like these, especially when they have little or no statistical significance to the performance of the script what-so-ever. Run your script through a profiler such as xdebug. Also, the best code is the one which doesn't need to run. If what you're displaying to the user doesn't change a lot, then I'd recommend caching those to static pages.
ok, then out of curiousity, why do you think its not good for the position of web developer? (I am employed technically as a web developer, in a more or less tech lead role, so maybe I suck at job interviews :( )
Hell yea!
So you're saying I could be making 150k a year? Fuck
Yeah, collapsing margins is obscure. I would always run into problems with my margins not showing up and then notice that adding a border to the element fixed it which makes no kind of sense unless you understand collapsing margins. The #1 Google results for "CSS collapsing margins" explains it pretty well: http://reference.sitepoint.com/css/collapsingmargins
Esp namespaces and LSB. 
I'd say pretty much all web developers should at least understand the basics of CSS, and padding vs margins, and inline vs block elements are some of the basics. If they had exceptional programming skills elsewhere, but absolutely no CSS, then I may overlook it. Generally though from the people I interviewed, if they couldn't answer the basic CSS questions, they wouldn't excel in any other area either.
ok, maybe I used some very... light words. A chief architect can earn $150k/year A senior dev can get $80 to $100k/yr mind you. 
bah! I don't want to work for you anyways :(
Even for a Guru, I would find that question insulting to ask. And again, whether my guru candidate could or could not answer this question would mean absolutely nothing to me. I have never ever run across the situation where answering those questions would be relevant to any real-world problem. I would rather ask them questions like: What the various caching/performance strategies I would use to deal with sporadic website performance issues? What's the best way to detect if someone's attempting to use a stolen credit card on my website, and what's the best way to protect the company from such persons? How do I make this duct-tape &amp; bailing-wire code-base into something that's easier to maintain, without introducing bugs, falling behind on new features, or affecting existing functionality? Which of the current technology buzzwords is BS? Should we build our own XYZ (payroll, reporting, time-clock, document sharing, mailing group, blogger, etc) server or use an existing solution? What are the risks &amp; advantages of adopting a PHP framework versus using our own? 
Given that those are very common language constructs I think a decent programmer should know the difference. I have had interviewers ask much harder questions. One of them was at the top 500 websites in the world by traffic. Another (where I'm working now) is for the largest Real Estate company in America. I think that the company's interviewing process says a lot about the quality of the company. The people who don't ask questions like these don't know what they are managing. Also, knowing what things do does not make you insane. 
lol what are you programming? I'm sure it wouldn't take long to figure out some basic CSS would it?! We have lots of programmers here, C and Java primarily, and most of them don't know CSS either. However they didn't apply for web developer positions!
No globals?? That makes sense if you're creating a reusable class or a library of functions, but globals are the correct choice for most regular scripts. I used to write C++ code, so I understand that logic for some programming environments. But too often I see PHP programmers who make simple tasks ridiculously complex by overusing OOP, putting everything into classes and functions for no good reason. That sort of style isn't appropriate an environment like PHP where each program (script) performs an action and then terminates almost immediately. Just keep it simple, and save the complexity of using functions and OOP for the cases where it's actually necessary. 
oh I agree. I just don't think vertically centering a fix width div is necessarily "basic". Maybe moderate. I know CSS. I know how to read it, how to write it, and how to be smart with class and ID names, and how CSS selectors work. I'm not always certain what clear: both is always doing, but I think I get the gist of it :P I know the value behind semantically correct HTML as well. But if you expect me to design a form using nothing but form-related elements and some CSS, I will struggle. These two things should be prepared for me by someone else whose expertise is exactly this. The person who designs the site should be the one manipulating its design. I guess where I take issue here, is that you say you're making an evaluation for the position of "web developer" based on CSS skills. I just think you have it the wrong way around heh
This. Premature optimization is the root of all evil.
Yeah the questions for each section should range from easy to hard. The goal isn't to check they can answer everything correctly, but to get an idea what skill level they are up to. And yes if you say you're primarily a PHP &amp; database developer, then I wouldn't be concerned if your CSS skills aren't as high. Depends on the position we are interviewing for too, if we already have lots of developers and need a front end web designer, then I'd need CSS skills to be high. In conclusion, you would have done fine in our interview I'm sure :)
These are all valid questions to ask. But none of them really answer how well someone knows the language. Answering all of these satisfactorily says that the person you're hiring understands the bigger picture. Let me throw this at you: Why is it bad to use require() in an autoloader? Or how about: Is it always bad to use the @? Why? PHP, like any other language, is full of oddities, inconsistencies, and quirks. Understanding how to solve problems is a very important thing, understanding how to avoid them is equally important though. 
No.
Useful. This explains a few things.
This isn't helpful at all, but your title made me think: [http://i42.tinypic.com/2mwbh8i.jpg](http://i42.tinypic.com/2mwbh8i.jpg)
Your apache configuration might have set the max session length to 30 minutes. It's either in the httpd.conf or it's in php.ini, I can't remember which.
i read a bunch of this, and i'm not clear; are you getting hundreds of applicants - none of which pique your interest? or are you doing hundreds of interviews where the applicant loses interest?
yay! i'm self-taught, in my third year of professional experience, and i would apply for your job with confidence. i think i need a raise! where do you advertise your positions?
well, for example, i'd love to teach someone php, if they can teach me something i need to learn, say css or cross-domain javascript.
&gt; but to me, 3+ years, or 10+ years is relatively arbitrary when the web has changed so much in the past few I have to disagree. Someone with 10+ years of development experience (especially for the web) shows someone who is able to adapt their skill set and grow as a programmer. Things have changed over the years and being able to keep up with it shows willingness (and the adeptness) to mature. Also, I find someone with more years of real experience is more likely to assess new technologies with a more critical eye and not just bandwagon.
I would recommend Amazon SES if you want the most control... It has a lot of solid features, and you can see the statistics. Use a multi-thread setup to generate the e-mails and send accordingly. I recently used MailChimp's STS service, which was pretty easy to use and tied in nicely with the client's other e-mail needs... It's basically Amazon's SES, but you get the reports through Mailchimp's tools. My partner-in-crime just signed up for SendGrid today, and we are looking at implementing that for future e-mail needs of smaller clients. From the looks of it, it will provide a nice gateway for us to monitor the e-mails from multiple client sources.
Not all of us can put in much time at home. If you work at a job that doesn't allow time on personal problems, when would you suggest they explore new tech that the job doesn't allow?
Not sure on the exact implementation of Zend Session but I'm guessing it's going to be governed by the PHP Session settings. Due to the configuration of [session.gc-probability](http://www.php.net/manual/en/session.configuration.php#ini.session.gc-probability) and [session.gc-divisor](http://www.php.net/manual/en/session.configuration.php#ini.session.gc-divisor) the sessions aren't actually cleaned up every request, so it's possible/probable that your sessions will last longer than the configured expiration.
&gt;To be careful. In my experience, this is not taught anywhere, and a lot of people never learn it. It has been the most frustrating aspect of my introduction to the industry.