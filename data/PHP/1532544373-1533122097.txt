well written i think thats relative, maybe its well written by WP plugin standards but for an enterprise piece of software it looks like a disaster. you could say that about wordpress in general tho
What framework? what type of testing? ... with out knowing more I am going to say MANY, like 160 (that is about 4 months of 8hr work days) hours of actual focused study and practice. 
Everyone learns at different speeds. Just pick up a Laracasts account and go to town. https://laracasts.com/series?curated
We have a lot of people still struggling to transition off of the old procedural way of doing things. If you're on a legacy application, you're probably dealing with that horrible old style of PHP every day. You have my sympathies. You also sound as if you're the kind of dev who can and will fix the mess as you work with it, so hang in there.
The moment you change anything in the network you will lose the connection.
depends on your capacity to learn,reason and read code. 
Anecdotically thr best employees I've have suggested to hire ar young people with not much experience but willingness to learn new stuff. Basic skills are easy to test by giving some assignment
It's easy to enforce immutability on objects (modulo things life reflection) by passing data at construction time and having no mutators. This way they act as pure data types.
To phrase this another way: an object method is just a static function with an implicit `$this` passed in as parameter. Whenever you don't need that parameter use static functions or just free functions. When combined with the good practise of trying to reduce the mutable surface of your code to a minimum this means that you'll end up with lots of pure static/free functions, which is great. Re static/free my sadness is that php does not support function autoloading. This combined with namespacing makes me do static over free the majority of times while i would very much like to use free functions.
Why not work with ssh/shell?
I'll go much further and say that mocking is an anti-pattern that you should never use. Pure code is fully and trivially testable without mocks. IO/effectul code on the other hand should be tested with the whole world included. Mocking lies and gives a false sense of security.
&gt; Re static/free my sadness is that php does not support function autoloading. Good point. That's definitely a pain point and can force you to pursue the old "class as namespace" idiom that we are forced to do in Java and Swift.
Well, yes... That's basically what I said. You don't want to expose your class's properties as public because that implies mutation. Instead you want to keep all properties private and use getters and (if mutable) setters. 
I *think* most people would agree that integration/functional tests are more important than unit tests (if you can only have one...), but mocking out network connected services can save huge amounts of time. just as one real world example, I've had to use a pretty slow API where building the full set of data for one of the page renders was anywhere from 5-10 seconds. that adds up quickly for every test done.
Thanks for the vote of confidence, internet stranger.
I just set my environment up in a Lubuntu Virtualbox VM or in a Centos 7 VM that matches our servers.
Ah yep, sorry, misread your original comment and jumped on the word "setter" :) Yup we say the same thing and I agree with php the lang has no concept of immutability putting this responsibility on the developer.
I disagree for basically the same reason that /u/CensorVictim described. You should have unit tests and integration tests. Some of your code will not be pure, as you mentioned. This is anything dealing with a database, local filesystem, or network. The code that operates on those things can and should still have unit tests. Those unit tests should use mocks to isolate your unit's behavior from the behavior of the external world. You should \*also\* have full integration tests.
I would like to learn Larvel and PHP Unit along with some of the more intermediate skills I'll need to know 
This isn't really PHP related. You'll need to configure the second Ethernet port with it's own IP address, then you should be able to SSH in. Use `ifconfig -a` to see all of your available NICs.
Trust me, I've been there and feel your pain. But what you do by mocking out that slow api is trading correctness for performance where performance does not really matter. Also, I don't think integration test is more important then unit test. They both have their roles. I dislike the word "unit" in unit testing as it's ambiguous. What I mean by unit test is testing pure functions in isolation. There are many ways to do this the most pedestrian and widespread being hand crafted tests. On the other hand when we come out of the comfy isolation bubble to test nasty effectful code we need to accept this reality, ie. that to test in the real world we need to be part of the real world. Of course this might not be 100% possible but we should push it as far as possible.
The requirement is to be something web-based, and the configuration would be done on eth0 via eth1, so connections won't be lost. I just found RASPAP which looks like might fit the bill nicely. 
&gt; an object method is just a static function with an implicit `$this` passed in as parameter There's a big difference between the two - calls to an object method will be dynamically dispatched at runtime according to the type of `$this`, enabling polymorphism. That's not always necessary, and I do write static methods at times, but there is also a place for instance methods that don't mention `$this`.
To learn those things, a few hours. To learn those things, a lifetime.
It's refreshing to hear this. I'm currently looking for a PHP developer position and I know that I'm not the best and most experienced but I am incredibly passionate and interested. I'm eager to learn now technologies and methodologies but just need that chance to prove myself. That's how I got my current position but due to cut backs and budgets I've started to look for a new job as I have a family to provide for and don't want to take any risks.
&gt; If a function is pure, it makes no sense to make it a method on an object Only if its pure and doesn't need to be dynamically looked up based on the type of an instance. I might have several classes representing different types of email, all with different, pure function implementations of a function like *getSubject() : string {return 'Hello, world';}*. 
Please could you send it to me too?
Hi, would you mind sharing the job posting with me? I'm currently looking for a new position but I'm not sure if I'd meet your criteria. I won't waste your time and apply but I'd like to see what skills your looking for to help me better under the market. Thank you and good luck!
What's with the fad these days to make sure you cram as much into single line as possible? 
Great thank you so much!
Magento is famously bizarre. I've tried once already to wrap my head around building a plugin for it, but the docs were terrible and the concepts embodied in their classes muddy.
There is no difference. Again: an object method is a static method taking `$this`, a pointer to the object, as an implicit argument. Dynamic dispatch is a consequence of this. &gt; there is also a place for instance methods that don't mention $this Could you give an example what you mean? 
Probably 6 months to a year to get comfortable, 2 years or more to truly understand what you're doing.
Not OP, but: class MySingleton { private $value; private const VALUE = 'foo'; public function __construct($value) { if ($value !== self::VALUE) { throw new \LogicException(); } $this-&gt;value = $value; } public function eq(MySingleton $_): bool { return true; } } \assert((new MySingleton('foo'))-&gt;eq(new MySingleton('foo')) === true); (ﾉ◕ヮ◕)ﾉ*:･ﾟ✧
I'd say this is generally true across every language, but in the case of PHP and PSR, I find it hard to argue for any other standard than PSR. We're talking about standards that have been adopted by the largest frameworks, packages, and companies out there. In many cases, the entire PHP ecosystem in the last few years has been shaped by PSR's. We wouldn't have Composer without it. As you said, the most important thing is using _a_ coding standard. But when choosing a coding standard for PHP, why wouldn't you go with the most widely used standard that will give you the best maintainability down the road? That's PSR.
&gt; Also you switch between strict and loose comparisons (==/=) (`===`/`==`) ;)
Can you say a bit about how this differs from Monolog? 
I don’t think it’s the community I think it’s taylor, if he used php storm for five minutes with laravel, he would hate him self.
I don't know monolog, sorry. How old is monolog? See, when I implemented the first bits in 2016 I didn't find anything open source which could log Combined to a file similar to Apache logs but for limited freehosting webspace. I needed this for one of my projects so I started implementing. Maybe today there's something else around or I just didn't search too well I don't know.
I am not sure this could even be called an implementation of the pattern, but lets overlook that. Care to elaborate on the purpose and benefit this?
Monolog has been aroudn since at least 2011 [https://github.com/Seldaek/monolog](https://github.com/Seldaek/monolog)
Ok, I had a brief look at monolog. As far as I understand the concept, it only logs events and has a focus on sending logs somewhere (feek free ti correct me if I'm wrong). phpWTL can do this as well but its basic purpose is access logging similar to a webserver (common, combined and W3C extended). It seems Monolog can't do this kind of logging. It can send logs to files (rotation possible) or a relational database via an abstraction layer. When it comes to log storage, monolog can do much more as it seems. 
I'd personally always opt for PSR but I'd leave it open for debate, there might be good reasons to use something different (eg: projects already using a different standard). So far I've only written in PSR code style.
\`php-ldap\` is a PHP extension. Try running \`yum install php-ldap\`
Monolog does all kinds of logging. You can setup specific channels and such to log what you need.
http://php.net/manual/en/ldap.installation.php Does that help? 
I am assuming that is after running the command: yum install php-ldap
I think his point is about subclasses basically calling a different function than a base class in a given context. Example: class Foo { public function someMethod(): int { return 1; } } class Bar extends Foo { public function someMethod(): int { return 2; } } function weirdFunction(Foo $x): int { return $x-&gt;someMethod(); } So \`weirdFunction\` will return \`1\` if you passed it a \`Foo\` instance, and \`2\` if you passed it a \`Bar\` instance. In this trivial example, you'd be better off with an Interface and two classes that are not related by inheritance. But perhaps there are situations where this kind of thing is justified?
That was my thought. Just SSH and run the right commands. 
Vim.
Yum install php-ldap should have installed it. Did you restart Apache/whatever webserver? That's required. If that also doesn't solve it, you should manually enable the extension in php.ini after installing it. Then you'll also need to restart the web server.
Is it [psr-3](https://www.php-fig.org/psr/psr-3/) compliant? I looked it over briefly but didn't see any mention. If it's PSR-3 compliant I might try plugging it into an existing monolog app. 
&gt;**Laravel Galaxy - An blogging platform for Laravel** I am calling it first.
Are Laravel developers lazy enough to spend $100 (or more) on an admin panel?
Watch the keynote. It's way better built than any admin panel I have ever seen. [https://www.youtube.com/watch?v=pLcM3mpZSV0](https://www.youtube.com/watch?v=pLcM3mpZSV0)
Lazy has nothing to do with it. There’s no way you can produce anything approaching this for 10x the cost. 
**ColdPress**
If you're concerned about anything on that list, you made a mistake by choosing PHP.
I found the guy who still writes his own framework. 
Aww now what will I call my ColdFusion blogging platform...
You charge the client for it. It's like the same cost as 1-2 billable hours so yeah if it's going to save a ton of dev work it's well worth it for them.
Oh this is nice. A couple of my clients are looking at full rewrites in Laravel soon and I might pitch this if it evaluates well.
$100 is about 50-70 minutes of my time depending on the client. I can't write this in an hour.
So the system is designed with soft errors in mind (error codes/flags instead of throwing), that probably most people wont check anyway. Why would you want to know if the update went through? To display an error / message to the user? Thats not an error. You dont know what happened. It could be some business validation logic that prevented the update, or a purely technical reason, like event sourcing, creating another version of the data and storing it elsewhere, etc. And if you expect `false` to mean a specific thing (you cant be sure if another part of the system isnt affecting it), why not make it explicit instead of relying on a low level generic mechanism? And in the `tap` example you‘re specifically working around that design. There is a separate tooling that causes other issues (losing type information by relying on magic proxies) just so that an obscure use case can be made possible. You can probably have the best of both worlds, but it requires much effort. So unless you‘re extra carefull each day, the framework is making you make bad choices and write „weird” code. I don‘t like my tools workig against me and a good quality code. I don‘t like not the `tap` itself, but the context in which it was born, and the most common reasons to use it. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Hmm, that's not exactly a lot, and not even slightly hard to read.
The next Magento, here we go. 
I don't see how this is a singleton in any manner of the word. You can create multiple instances still, all you're enforcing is that the passed value is exactly of the string type and exactly of "foo" value, that's not singleton. 
An easy way to pipe string modifications. Right now I use my own class: $str-&gt;trim()-&gt;strtoupper()-&gt;getFirstChar(); Would love to see something like that native. I don't like having multiple lines or stacking methods.
You don't have time to write tests, but you have time to do manual tests over and over? 
It's worth the watch IMO, it looks well thought through.
I see a lot of push back with the tap method. I'm not entirely sure I'd use it in the above example, but there have been a few "neat" instances I've seen it used. Did you always find array_map easier to understand than a foreach doing the same thing? If that answer is no, then why is this any different?
Backpack for Laravel is already viable. And cheaper.
I used to build Phonegap apps in a prior job and that typically involved building an API, an admin interface, and the app itself. When I used Django for that, it saved me loads of time because Django has an admin interface baked in. Using Laravel often meant a lot more work because I needed to write the admin myself. It would be far cheaper to use Nova than spend a week or so writing my own admin.
Apparently, yes. Not my decision!
Its nice....but with the pricing its killed the chance of most agencies using it. 
Singletons as in types with a single inhabitant, right? They are useful to emulate dependent types by exploiting the fact that we can extract type level information from runtime values as there’s a one to one relation. See here: https://cs.brynmawr.edu/~rae/papers/2012/singletons/paper.pdf also, obvious troll is obvious ;)
Singletons as in types with a single inhabitant, right? They are useful to emulate dependent types by exploiting the fact that we can extract type level information from runtime values as there’s a one to one relation. See here: https://cs.brynmawr.edu/~rae/papers/2012/singletons/paper.pdf also, obvious troll is obvious ;)
Atom or sublime 
Agreed. I´d add that just follow the framework/enviroment guidelines. Codeigniter has its own, for example. The problem, of course, is that you probably are going to use some composer package in a given time, and have that mix of styles is really painful.
Hey, csshuelva, just a quick heads-up: **enviroment** is actually spelled **environment**. You can remember it by **n before the m**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Lenses sounds cool, is it Nova specific or is it a concept other people are already using?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Yeah, I'm eagerly waiting for the justification :)
I've heard good things about Sublime, haven't tried it yet. Atom wasn't my cup of tea, but hey whatever works. I use Netbeans as my go to PHP IDE. but mostly because I switch between java, js, shell scripting and php. 
PHP Storm is by far the best for this tasks. [https://www.jetbrains.com/help/phpstorm/installing-and-launching.html](https://www.jetbrains.com/help/phpstorm/installing-and-launching.html)
I used that as a guideline while implementing error/event logging. It could be compliant but was not specifically a blueprint. 
Do you have to implement such a channel yourself or is it provided by Monolog or third parties?
One mystery solved for me. I do not use laravel anymore but when I had a look at the code a while ago I wondered what the hell this `tap()` helper could be. This is one of the million things that made me dislike laravel. &gt;return tap($user)-&gt;update(\[...\]); First reaction: why the hell should the user be wrapped inside a `tap()` helper? &gt;$user-&gt;update(\[...\]); &gt; &gt; &gt; &gt;return $user; Everything is clear. I can even infer from this piece of code that the update method returns a boolean.
From your readme: &gt; No shell access needed! This means pure FTP installation without the need for tools like composer. This is based on the false assumption that composer projects should be deployed as source and installed in production. That is wrong! You need tools like composer only during development, testing, and build process. The result of the build process is what you're actually supposed to transfer to the production environment. There's nothing stopping you from running an optimized composer install locally to build the deployment artifacts and then transfer the final results to the server (via ftp, scp, rsync, etc.)
No it hasn't. That's the cost of a couple of billable hours. You couldn't make anything that featureful in that time.
Except there are free alternatives.
&gt; So the system is designed with soft errors in mind (error codes/flags instead of throwing), that probably most people wont check anyway. Nope. Nothing prevents you from throwing your own exception in your event. The "error code" you speak of is not for errors but for a normal path where you wanted to abort. I never had to use it myself tbh. &gt; It could be some business validation logic that prevented the update, or a purely technical reason, like event sourcing, creating another version of the data and storing it elsewhere, etc. And if you expect false to mean a specific thing (you cant be sure if another part of the system isnt affecting it), why not make it explicit instead of relying on a low level generic mechanism? Then if you need to differentiate, throw a goddamn exception ? Those ain't queued event anyway, they are sync. Nothing forbids you to throw a ValidationException with some error messages and the Exception hadler will transform it to a 422 on itself. The low level generic mechanism, is for aborts that aren't business error. You might have aborted a console script, logged it in the creating event, and just want to gracefully shut down the command itself with a generic "something went wrong" message. I don't know, I don't need it. &gt; And in the tap example you‘re specifically working around that design. There is a separate tooling that causes other issues (losing type information by relying on magic proxies) just so that an obscure use case can be made possible. I also know I don't need that extra type thingy. I never needed it in any project I did previously, so might it come back and bite my ass ? Never say never, but unlikely. &gt; I don‘t like my tools workig against me and a good quality code. In the specific instances I used it, I don't agree it hinders me, so, let's agree to disagree and have a nice day.
If the argument is time/money, I'm pretty sure the whole point of automation is to save time and money ;)
That do not provide the same functionalities.
it looks like a paid version of sonata... nothing special imo
The code above isn't written for your new requirement, you're making a false equivalence Your code doesn't work as presented, you can't execute a query by comparing a variable called $slowQuery It's most likely your code would have actually looked like: $results = fast_lookup(); if (!$results) { $results = slow_lookup(); } Creating nesting where there does not need to be, and creating statements like !$results without context, give me a valid piece of code and I'll give you an equivalent without if statements I use ```and``` and ```or``` because I prefer code that reads closer to English, however the downside is you need to be mindful of operator precedence and interop is lower but that's a culture issue not a technical one If you're going to take your skills seriously, you need to look at your language without preconceptions 
I'm explaining your code in simple terms. $version_exists = (isset($this-&gt;version) and (bool) $this-&gt;version); $version_is_current = $this-&gt;version-&gt;software() &gt; 125; return $version_exists and $version_is_current; `$this-&gt;version-&gt;software()` will always execute. It could be unnecessary and slow, but it will always execute. With either of the ways I posted it will only execute if the first condition passes. &gt;I use and and or because I prefer code that reads closer to English, however the downside is you need to be mindful of operator precedence and interop is lower but that's a culture issue not a technical one Maybe you should pay attention to PHP culture then, because it's practically unheard of to do this.
This should be free. People will say, "yeah but Taylor spent his time and effort to make this, so its just normal that is costs you something". Laravel took time and effort too and its free. I'm just saying, if this was free it could be a great alternative to wordpress, joomla, etc. and that would be good for Laravel and the community, and Taylor specialy. I thing in terms of long time profit, he and we would profit more if this was completely free.
Perhaps it kills the chance of a lone developer using it, but certainly not agencies. $199 is nothing on a project, in most cases that wouldn't even cover the cost of the man hours spent on the initial client meeting, or the estimating/tendering process. Assuming some of it's features are necessary to a project, the chance of implementing them for less than the license cost is vanishingly small
That's one of the shittiest gdpr splashes I've seen. Can't just say I have to go to the advertisers to opt out, gdpr is opt in. 
It sounds like the problem is that they can't produce competent code outside of a framework? Or at least, can't follow it through well enough to cope - you should be able to do that with 1 year of experience.
Even if someone was to make a pre-packaged project with Laravel + Nova + blog scaffold, they'd have to come up with half-decent theming (not templating) system and plugins system, so no, I don't see how this would trump Joomla/WP. All in all Nova seem like a convenient eye-candy and I'll probably use it on some of my clients because it seems useful, but I don't think it's ready to be on par with WP/Joomla at all, in terms of content managing. 
Everyone who was written a half-decent admin panel would've done that. It's a must, you need user filtration based on certain scopes every now and then. Searching takes too much effort when you need to edit 10-15 users
Locally resolved dependencies could lead to lots of trouble if they're just pushed to another platform. There might be platform specific stuff. If you look for example at a similar system, like RoR bundler, you'll know you can't just trust to manually deploy stuff when it's supposed to have their dependencies handled by a tool. Could work, could also fail. So it is a benefit if a system like phpWTL explicitly states it will install just by copying files. 
Everyone who was written a half-decent admin panel would've done that. It's a must, you need user filtration based on certain scopes every now and then. Searching takes too much effort when you need to edit 10-15 users
This looks amazing but the price is a bit much no?
sexy. :)
Unless there's a lot of stuff we haven't seen, they have exactly the same, if not more functionality.
Nice! Had no idea I could watch it online
Git will have terrible performance on windows, just like it has on vagrant/virtualbox. If there's anything I've learned the past few months, is that working on windows is terrible compared to working on linux/unix systems.
I made a million dollars on Spark and it’s more of a niche product. I don’t think the pricing kills the chance of most agencies using it.
Looks nice, I won't be using it, but good on him for making another source of income. Clients will drop at a hat to buy an already created solution to w/e problem they have. 
Not PHP related, and it depends very much on what distro you use. Some examples: [Cockpit](https://cockpit-project.org/) or [Ajenti (1.x)](http://ajenti.org/)
Don't start to learn a specific framework, before learn concepts, after implementations
What's the use case? I don't understand when it would be useful to have. If I've created a Laravel application there is business logic and domain knowledge that this admin panel won't be able to enforce. Am I missing something?
That's why ideally you have a build and staging environments that match your production environment, as well as CI/CD pipeline. But since we're talking about the use case where you're limited to FTP uploads, that's not really relevant.
Plenty of free feature-rich products out there. This is a lackluster with a price tag. 
And... guess who you are. 
The price means I won’t even look into it beyond this post. I was wondering what it was. I can do all this stuff myself, already have and can just pull from my own packages. 
Fair point. I was not considering typical polymorphism to carry pure functions around. I just use that so rarely these days. I'm sure that's mainly my bias of having worked in languages like Rust, Go, Swift, etc, that either don't support inheritance or kind of discourage its use. I'm sure there are times where you'd want to do what you're talking about, but I can't really think of any. For your email example, you just need a constructor, or maybe several static builder methods: final class Email { private $subject; private $body; private function __construct(string $subject, string $body) { $this-&gt;subject = $subject; $this-&gt;body = $body; } public static function helloWorldEmail(string $body): Email { return new Email('Hello, world', $body); } public static function redditEmail(string $body): Email { return new Email('Hello, Reddit', $body); } public function getSubject(): string { return $this-&gt;subject; } // etc }
What would you recommend? I have used backpack for laravel for a while now. (Not free for commercial projects though)
Initially I thought so, but if you put it in perspective the price is about the same as a couple of billable hours. If you had to write this functionality yourself the end cost in terms of billable hours will be way more than the 99/199 price point.
Exactly. The project was designed with freehosting webspace in mind. A *very* limited environment, no shell, no accesss to real logs of course, nearly no way to configure PHP, version potentially outdated or at least far from up-to-date. In no way an environment you would face in a professional situation. 
Is there a demo of Nova? I would be interested to see how it works to the end user first
&gt; chances of most agencies using it. The same guy who is creating Nova?
The question looks quite pointless, especially without the explanation why do you need such a comparison and what criteria should be used for it. 
Yep it is. 
I'm personally very glad he's charging for it. He put a ton of time and thought into this and it showed (in his demo). I would happily pay 3x this if it means I don't have to put however many hours into building what he's built. I don't understand how people can expect the highest possible quality software and also not want to pay or contribute anything for it.
I'm personally very glad he's charging for it. He put a ton of time and thought into this and it showed (in his demo). I would happily pay 3x this if it means I don't have to put however many hours into building what he's built. I don't understand how people can expect the highest possible quality software and also not want to pay or contribute anything for it.
I just watched the keynote, where he tells/show the admin panel: https://youtu.be/pLcM3mpZSV0?t=5m2s
How does this man find the time to work on Laravel, Forge, Envoyer, Horizon, Nova, and any new projects?
Pricing on company size or revenue is stupid. This product doesn’t warrant a pricing structure like that. And honestly it will prohibit quite a lot of devs who would want to develop with it. Just like statimic, in the end, very few addons, and tiny community. Make money elsewhere. Provide a useful function free to everyone and you charge for other things around the free product the community would need/want. These closed communities are the worst. I used to think about charging for products that I’ve built, but then realized an open product provides so much more useful benefits and then you can find other means of making income from it. Sell 1-2 licenses vs 50 free licenses and dozens of addons sales. Etc. 
¯\_(ツ)_/¯ I guess that we'll soon hear about /u/missionofpiece's new PHP framework and it's associated administration panel any day now..
Laravel Backpack costs money too there, bucko.
Easy CRUD operations through a GUI. If/when you can watch his walkthrough of it you'll see that Nova actually intelligently picks up the business logic you describe in your models/controllers as well as applicable auth control. I think it'd be super useful in many cases. An example would be: an iphone app which pulls it's data from a laravel backend, which the end client would like to update. Instead of spending another $10k on building a web based admin custom or using something like WP/Joomla, we can drop in Nova and be done.
No shit, right? I don't understand how one person could build so many quality, ingenious apps/packages/frameworks in such a short amount of time.
Voyager is a mess and Backpack is paid.
I didn't actually see a GDPR splash on that. But! My favorite (hated) is one I got for [nymag](http://nymag.com/consent.html?redirect_uri=%2Fselectall%2F2018%2F05%2Fhow-a-jason-derulo-parody-came-to-define-han-solo.html%3Fvia%3Dgdpr-consent&amp;redirect_host=nymag.com&amp;orig_qs=). Not only is it a redirect instead of a splash. Not only is their "opt out" just disabling cookies all together (other fucking sites do this, and it pisses me off. I'm looking at you polygon), but for at least a week after GDPR launched you couldn't even click to the cookie policies page to see what you were agreeing to. Trying to see the cookies policy just redirected you back to the GDPR page
honestly if i had that information id give it to you but i didn't chose the topic 
It was more the constant need to renew. It's really unclear on the page how long that price covers you for. Based on where I work, every site would be $199. Is that per year? Per version? Per random decision? Things like this really need making clear. Combine that with the closed nature makes it a hard sell. It's easy to sell something like paying for PyroCMS pro as you've got the base system in place and pay for those few extra features you might need. I just think agencies would be more open to it if there was a X price per year for unlimited commercial sites type license. 
well bro, you need to work on your cognitive abilities. you were asked, why do you need such a comparison. the answer is like someone gave you such a topic, whatever it means. So there are at least a topic and someone to be mentioned, *not indirectly*. But you failed to provide even that little information. So I doubt you are qualified for the task, whatever it is.
WordFusion
alright you want the full story and details its not my paper im just doing somone a favor because i have some background in research because its normal to ask for help and its normal to help people but i didnt really think you needed to know that and it would be simpler just to say it was my paper. so i thought ill just ask a bunch of people who know all about one of the two topics surely that would be a good starting point when your researching something in say history the first thing you do is talk to the people who were there, but between here and the java Reddit all i have gotten is condescending remarks. so thanks your your reply but i think ill tell my friend to fuck off
&gt; &gt; So the system is designed with soft errors in mind (error codes/flags instead of throwing), that probably most people wont check anyway. &gt; &gt; Nope. Nothing prevents you from throwing your own exception in your event. The "error code" you speak of is not for errors but for a normal path where you wanted to abort. I never had to use it myself tbh. That’s what I was referring to. The return `true/false` is a „soft” error (not an exception) you may or may not want to check and react to. It violates Command/Query separation principle. It either has side effects and returns `void`, or is a query, returns stuff (even a boolean) but has no side effects. I get that a lot of system mix those concerns, so it’s more of a nitpick. &gt; Then if you need to differentiate, throw a goddamn exception ? Those ain't queued event anyway, they are sync. Nothing forbids you to throw a ValidationException with some error messages and the Exception hadler will transform it to a 422 on itself. So again you have no reason to return a boolean from `update` in that scenario. You could change that design to return `self` instead and `tap` wouldn’t be needed in the original example. &gt; I also know I don't need that extra type thingy [Why does the Laravel community hate static analysis and autocomplete so much, I always wonder.](https://www.reddit.com/r/PHP/comments/91i75l/tap_tap_tap_a_useful_utility_function_used_in/e2yotzv/) Simply put, I’d rather have that static type information instead of `update` returning a boolean. 
[php](https://learnxinyminutes.com/docs/php/) vs [java](https://learnxinyminutes.com/docs/java/) 
Dude, we don't want to attack you or something. But the field you are asking here is just to broad. You can compare so much about the two that we have no idea where we should point you to. That's why colshrapnel asked you for the reason. What goal are you trying to reach with this comparison? Do you want to compare the syntax or differences between Javas vm and PHPs parser? Do you want to compare the ecosystem or the usecases? We need to know something about your goal to point you in the right direction.
&gt; Are you using username and password for github auth, or token? I’m using un/pw. Also in your git config is your repo origin url using https or ssh? I’m using ssh None of that will affect `git status`, since it doesn't query github.
Backpack has a free tier.
With a fairly big limitation.
That depends, give me an example.
Sorry man like I said it's not just here it's the java Reddit as well so I guess I'm just a little aggravated I think part of why I have been asked to help is because my friend don't know much of what they are doing ether
&gt;Provide a useful function free to everyone and you charge for other things around the free product the community would need/want. You mean like ... Laravel (free product), and charge for other things around it such as Forge, Envoyer, and ... Nova? Brilliant!
WTF everyone in this thread is talking about? There's already a Sonata Admin Bundle for Symfony. It offers better functionality (from what i saw in this video) and it's completely free. Why is everyone OK with the fact that this simple CRUD generator costs money?
Your best bet is going to be to get the full essay question and info from your friend. Pretty sure there should be some sort of background to the question - even if its just the name of the module its for (e.g. history of programming, in comparison to something about the differences between compiled and interpreted languages)
It's not limited in any way unless you make money with it. Unreal Engine works in a similar fashion. Other than that, backpack is half the price. At least Nova isn't competing at the same price point. 
Making money with it can mean a lot of things. Even if the website doesn't directly make you money, if it even advertises your services or markets anything, it's indirectly making money for you. Yes, it is a big limitation.
Backpack does cost half as much yeah. Voyager is free, has at least the same functionality.
well for example access logging in Apache combined format 
And my guess is that a lot of people abuse that free tier to use on projects that should have a license. I think Taylor is smart here avoiding the race to the bottom.
&gt;Perhaps it kills the chance of a lone developer using it Even as a lone developer, $99/$199 added to a client bill is nothing. That's what? 2-3 billable hours depending on your rate? And from it you get a nicely designed panel that does 90% of the mundane CRUD work you would otherwise have to code yourself? Sold!
You keep saying that, but i don't really know what you mean. Can you give a code example?
Why would we not be okay with it? Nobody is forced to buy it and there are already free alternatives. There's also clearly far more to it than a simple CRUD generator. People put work into making it, there's no reason they shouldn't charge for that work if people are willing to pay it. Given that the developers of it already develop and maintain a widely used framework for free, I can't see any reason people would be angry at them for also producing paid for software to fund development of their open source offering. Furthermore, many of the people here work for companies (or themselves) where several hundred dollars on a project is barely worth the time to debate whether or not it should be spent. From the features that have been announced, there has clearly been hundreds of hours put into the project, paying a couple of hundred to save myself or my team that kind of time is huge, especially when it includes email support that may be able to solve issues quicker than going via the community. &gt;Why is everyone OK with the fact that this simple CRUD generator costs money? Because we charge money for our work, we're not opposed to paying a small amount for tools that make it drastically easier.
Since way back in the days when reddit first added a comment system, downvotes were for comments which didn't add anything to the discussion: 1. The CommonMisspellingBot bot adds absolutely \*\*nothing\*\* to the discussions in the comments threads. It's intrusive to the conversations we hold as a community and it devalues the ideas presented in those conversations and as such it should be downvoted. 2. The bot is rude, as you don't just start a conversation with someone and point out every mistake they make. 3. For us commenting who have english as our 2nd, 3rd or 4th language but take our time to write long, informed and on-topic comments, the bot is both condescending and unnecessary. The bot shows up and pollutes the thread because somewhere in that insightful and well thought out comment "a lot" was spelled "alot", "weird" was spelled "wierd", etc. 4. When redditors spell "remember" as "remeber", it's not a spelling mistake, it's a typing error. The redditor probably knows damn well how to spell remember. A condescending comment will not fix typing errors, shitty keyboards, small mobile screens or the anatomy of human thumbs that hinder perfect typing accuracy. 5. When the bot writes: "**noticable** is actually spelled **noticeable**. You can remember it by **remember the middle e**". It's like writing: "The capital of Australia is actually Canberra and not Sidney. \*\*You can remember it by remember it\*\*" ...and isn't the correct sentence: "You can remember it by remember**ing** the middle e"? /r/shittyrobots
Hey, thowaway185920, just a quick heads-up: **noticable** is actually spelled **noticeable**. You can remember it by **remember the middle e**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
I don't understand what you need code for, I described rather a concept. I mean you have a web application and simulate access logging in a certain format like a webserver. As authentic as possible. You include the logging facility in your PHP code. This logging instance knows how to obtain all the information. It's there already in phpWTL. The question was, is it there as a "snap in " inthe monolog tool? I mean just have a look at the examples on how phpWTL handles it on github (if you follow the link I posted here). 
PHP is for those who like to get things done. JAVA is for those who like to talk about getting things done. *runs off giggling like an errant schoolboy
We’ve been batting around that use case for pricing and I’m not against it I think it’s just more the case we didn’t have time to settle on a price for that during my talk. But I think we’ll come up with something. You would pick Nova over Backpack because it’s better designed and more full featured (imo).
&gt; I don't understand what you need code for, I described rather a concept. Because I don't think I'm really following what you're on about. I took a quick look at the examples on your github and it kind of looks like you just mean combining for example, errors and warnings in the same log file. Is that correct? If so that's extremely easy to do in Monolog.
Incorrect Sir. Laravel is a dev product, Forge and Envoyer are services. Nova is another dev product, you rely on developers to build from it to make it more useful for everyone. Nova is not an addon to Laravel. Nova can have its own community with its own addons/plugins. 
&gt; Laravel Backpack that theme reminds me so much of https://adminlte.io/
ಠ_ಠ
I definitely would love to have a flat fee for unlimited sites option as well.
Errors amd warnings belong to the concept of PHP event logging. Yes, phpWTL can do that. But I was talking about another thing it can do: Statistical access logging similar like a webserver. Look here https://github.com/mgbeyer/phpwtl/blob/master/README.md#formats
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [mgbeyer/phpwtl/.../**README.md#formats** (master → 1ff3a2b)](https://github.com/mgbeyer/phpwtl/blob/1ff3a2bce7471586a133d53150b6882913fab420/README.md#formats) ---- 
It's all about perspective. If you're making thousands/month on your site, $100 or $200 is a non-issue. If you have a site that makes $10/month yeah maybe it's not worth it?
"Keeps your application [pure](https://i.ytimg.com/vi/wSJSWy2o_1I/maxresdefault.jpg)"
&gt; $version_exists = (isset($this-&gt;version) and (bool) $this-&gt;version); &gt; $version_is_current = $this-&gt;version-&gt;software() &gt; 125; &gt; return $version_exists and $version_is_current; Thank you for clarifying $version_exists = (isset($this-&gt;version) and (bool) $this-&gt;version); $version_is_current = $version_exists and $this-&gt;version-&gt;software() &gt; 125; return $version_is_current; You've assumed I'm not paying attention to PHP culture, which is a odd assumption, PHP culture is practically glacial 
Ideal command for dealing with drupal: `rm -rf /path/to/drupal;`
&gt; There's already a Sonata Admin Bundle for *Symfony* &gt; *Laravel* Nova
You say tap doesn't support static analysis. I'm pretty sure it could be understood by a static analyser, or they currently lack power. That's one of the limitations of docblock by the way. It lacks a `@return (Type of parameter $a)` It's not a complicated behavior at all, as long as you know the type of the value passed, you know what methods can be called, and the type the proxy method returns... But again, I never looked at how those tools are implemented, I might not know what I'm talking about. Can a rigorously typed system help you ? Yes. Can the command/query segregation help you ? Yes again. Should you only ever comply to those both ? Depends, they are tools in your toolbox, like the rest. Laravel is heavily inspired by RoR, ever heard of duck typing ? No strict types, but the language works fine too. --- As an aside, I'm pretty sure you are mostly using symfony in php these days, as you have their mindset (which is basically Java Spring, ported to PHP). I still need to try Symfony 4, it seemed a lot less heavyhanded that 2.7/3, and I heard only good things about it.
... what? Let's just assume a senior engineer costs $50/hour (which is conservative). If your engineer can build this entire thing in 4 hour or less then it is not worth it. But there is not an engineer in the world who can build all this in 4 hours. This price is a STEAL for just about any agency or professional user in the entire world. 
I'm kind of confused. The article specifically recommends PHPStorm but your comment kind of seems like "What the article says isn't the best, PhpStorm is the best."
If you have a job in software you'd understand that $199 is NOTHING for high quality products. Even at $50/hour you'd have to find an engineer who can replicate this functionality in 4 hours or less. That's impossible. And it works intelligently with Laravel's ecosystem. Did you watch the demo or actually read what it does? Doesn't seem like you did.
You need to value your time more. This is the cost of 2-4 engineering hours and has a ton of functionality. 
AFAIK the only reason to prefer Sublime over Visual Studio Code is 'speed'. Though that 'speed' is usually startup speed, which isn't a factor for people who just keep it open for long periods of time. VSCode has pretty good support for every language you mentioned. Though I don't really use it for sizable projects. If you can afford them, or get free versions(they offer a few ways to get free licenses), the JetBrains IDEs are amazing and cover everything you mentioned.
Why not look at something like Laravel Spark which has pretty good adoption in the laravel community. That sold tens of thousands of licenses according to Taylor so I dont think this (which has a wider appeal) is going to be any different.
Seriously. This kind of comment happens in every software that is sold to businesses. If this saves just one hour it pays for itself. I’m paying (through my employer) thousands a month for servers and hosted services, including many services I’m more than capable of running myself “for free” - it’s just not worth the opportunity and maintenance costs. I wouldn’t even blink at something that’s $100/yr. Even at a tiny company, my guidance was “just give me a heads up if it’s over a thousand a month” My *personal* software budget is a bit lower, but even that I can justify as being able to demand a higher salary (and it works)
No matter what programming language or technology you are interested in, the entire learning and staying relevant process is that of "Continuous Education". I've been working with PHP (among many other things) for 20yrs now, and I'm still learning new things (almost) daily.
You are a [shill](https://en.wikipedia.org/wiki/Shill). In every thread possible today you lick his ass and are "glad" he is charging. 
You spend 10k on Wp or Joomla? Or even a simple custom CRUD frontend? Stop bullshitting you really are a shill
Thanks for linking to the definition, in case he doesn't know what that means. Glad to see people doing the good work around here. /s
Im right there with you. But a lot of the people commenting are shills so thats why it seems that everyone support that this costs as much or even at all. Other frameworks have this functionality for free from day 1
No problem. He is a definition of a shill tho. He posted the exact same [comment](https://old.reddit.com/r/PHP/comments/91yhsk/laravel_nova_an_administration_panel_for_laravel/e32c3zc/) bellow in this same thread and exactly the same one in the laravel subreddit earlier today and who knows where else. So yeah thats a shill
Hey there, I see that you invested quite some work in your project but… I need to be frank: no matter how and where I look at your project, nothing in there appeals/ensures me that is something I want to use in 2018. Please don't take this the wrong way, I've no intention dissing your hard work but it you posted it on reddit for a reason so I think you expect feedback, given it this kind of exposure. - no `composer.json`, therefore not on packagist. Therefore absolute overhead for anyone even _wanting_ this: no versioning, no releases, etc. - I can guarantee you: nowadays it's either `composer require` or the highway - so many source files in the root of the project? I quick look at the structure of your software leaves little impression of organized software - is that, err…, a doctrine DBAL dump of a specific version, right there in your libraries source tree ?! - no tests (no phpunit, no nothing) - just took a glimpse at some source files: totally individual code style, nothing related to any PSR in existence - I really have a hard time reading your code because of you unique style (placing spaces, naming variables like `$snake_case` is very uncommon) - source files sprinkled with `require_once`, so no proper autoloading - Would be nice if your readme would have some proper code formatting tags to highlight PHP, you can do this with writing tripple backquote and `php` right after it - code feels very hard-wired, not really fit for DI nowadays; hard-codeding property values in classes and not being able to inject them, etc. My impression is that it's written in isolation, in a bubble, void of any existing best practice for years. Also: that you _never_ heard of Monolog, the de-facto standard for logging is.. Well, everything here is a red flag to no go near this software at all. If someone wrote me what I just wrote to you, I would feel ... uhm, probably not happy. But when I post my stuff here, I expect it to be scrutinized. Hold up my the communities highest standard what is current best practice to be reminded I can do a better job. OTOH: let's not forget that it's OSS, your giving back to the community. This is always appreciated and it's voluntarily and as always: you can do, what you want. It's just, if you expect reaching users willing to use your software here, I think that the project does not meet even the minimum of standards expected nowadays. Sorry for this negative post; I don't like writing this but in my crazy mind I though, well, maybe being frank could be a positive thing 🤷‍♀️ :-)
&gt; a lot of the people commenting are shills Yeah we are all shills because we appreciate the time that went into other peoples' work and are willing to pay for it. For commercial projects another $99-$199 is a rounding error.
&gt;realized I don’t know if the $100 is once, per year, per month, or something else. Unless it’s weekly or daily, I stand by my point. If he goes the same way he did for Spark pricing, thats per major (paradigm shifting) version. Spark went a few years and multiple versions without a paid upgrade. And even then it was heavily discounted from the "new customer" price.
You missed where he said 'or', but carry on being angry its a good look.
This is what I was looking for when I went to the site. Either way, the plans that are there certainly fit my needs so I’m not complaining heh.
WordPressSucks
Lenses is described as being more than just filters. I've definitely never heard the term before can you point to some examples?
Ok this was bitter. I mean I appreciate your feedback, it was extensive and you made some effort here. Thanks for that. But you took a major dump not only on the project but on my ability in sw engineering in principle. Like a cook asks people how do you like this specific menu and you tell him he can't even fry an egg. I built something huge as a one-man-show besides a 40h job which works fine in production since 2017. There are surely specific feature or design flaws I wanted to learn about because you have tunnel vision with your own work. I didn't want someone to berate me because of coding style which is a silly thing to do because I have a readable and above all consistent style. I've seen vighly praised OS projects out there which internally looked like spaghetti and they didn't have to take unjustified criticism like this. and as for composer there's a reason, directly stated in the synopsis above test driven design there you have a point, ok documentation is extensive and full of practical examples. I highly doubt you've as much as read a fraction of it. but you nag about it. why? because of php code formatting? which btw is absolutely there. this is inappropriate, sorry. instead NOTHING about features, about usability, about conceptual flaws (which would be highly appreciated by me) As I said, honestly thanks for extensive feedback. but it's the wrong kind and belittlement to the bone. unacceptable. 
The way you phrase your comments is pointlessly aggressive. You could have simply asked “What is the point of the comparison” or “what types of differences are you looking for” rather than descend into a tirade of condescension that ends with “I doubt you are qualified.” It’s like you *want* to piss people off.
I think Laravel captures a certain kind of developer that is willing to pay for these tools (Forge, Spark, Nova, etc). Sure, one can get by just fine without them, and more advanced devs may even wonder "what's the point?", but clearly there is a segment of the developer market that is all about these tools Taylor makes. I say good for him for capturing that market. Seems to me he's kicking ass all the way to the bank. Why hate on that?
Not a shill, and in fact I don't even use Laravel. There's nothing wrong with the pricing and for the people that want/need to use this product, it's a Cost of Doing Business and it's happily paid for. If you don't think it's worth the price, you don't have to buy the product. Sounds more like you're just butthurt that you like the product and want to use it and there's a charge for it. Like you said, there are other free alternatives, go ahead and use them then! You're also welcome to use your time and resources and build your own and give it away for free
You posted some code, I explained why it was bad, you didn't understand, I explained in detail, finally you get it. I think your "culture" or whatever you're doing is not so good.
It’s his full time job, not that surprising.
There is some plugin for PhpStorm that can add this type of "return based on parameter". But that’s not the case. TappedUser isn’t the same as User. `User::update()` returns a boolean, while `TappedUser::update()` returns `User`. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; But that’s not the case. TappedUser isn’t the same as User. User::update() returns a boolean, while TappedUser::update() returns User. Never said it was, but I might not have been clear, sry. When you write `tap($object)-&gt;update(...)`, as long as you know what $object is, you can infer if `update` is a method that can be called (autocomplete) and what it will return (always `$object`). To me, a good tool should be able to recognise that `TappedUser` got all the same public methods than `User`, except they all return `$this` instead. I think a good static analyser should have a way to understand that, and not stumble and give up with mixed. Do they already, I don't know. Docblock doesn't, PHPStorm with basic laravel support (ide-helper) doesn't either. I don't care that much for it, as I usually only use it for thing where at a glance I'll know if I made a mistake or not, so the full autocomplete/type safety doesn't bring anything of value. I stripped `tap` of some code, when it was too unclear to me. A bread and butter `update` is instantaneous to grab to me.
$199 per site (for the pro tier). It's not a subscription.
Another point is that it’s a hardcoded dependency. You cannot change it without changing the consumer class (in contrast to injecting it to the consumer class, be it an object or a function). So as long as your static method is just extracted from your main method for readability or a narrow scope reuse, I think it’s fine — it’s not really a dependency, just splitting up code for internal use. In other, more advanced cases I would stick to Open/Closed. And I agree with you about testing pure / query functions. As long as every part of your dependency graph is tested, you don’t need to mock this kind of calls — it’s actually an antipattern, testing the implementation instead of the result.
Yes, it’s not needed for queries / pure functions, but you should definitely use mocks / expectations on outgoing messages. If your modules responsibility is to persist some data, send a text message, connect to an external service or talk to another module (think: dispatching an event, creating side effects on it’s dependency, etc) then you should make sure it does what it’s tasked to do by setting expectations on a mocked dependency. To add, you should not mock the I/O itself, but the abstraction on top of it. Mock Repositiories, not the DBAL; mock your API client, not the HTTP client. [Don’t mock what you don’t own](https://github.com/mockito/mockito/wiki/How-to-write-good-tests#dont-mock-type-you-dont-own) This does not mean you should skip the integration tests, but it’s usually more practical to have more tests, for more obscure and detailed cases on the unit level than on the integration level. And those unit tests will probably give you a more clear answer of what’s exactly wrong.
Not the only person called Taylor.
It depends, I guess. I wouldn't exactly use it for a personal blog, but if a client is already spending thousands on a project, it shouldn't be hard to make them see the value of spending a couple hundred (at most) on a top quality admin interface. 
I've seen this man code at Laracon, he's literally a wizard.. he can code so fast and don't forget he knows this framework like noone else he can build things incredibly fast in Laravel.. he outsources the design and has other employees that manage other areas.
Already a thing, though not developed by Laravel. http://octobercms.com/ I tried it and was less than impressed. 
Lenses is basically an SQL view done in PHP
As a happy Laravel Spark user I'm very happy with that kind of business model. I wish I could do the same one day!
Or you could just look at his account history. 
Or he actually holds that opinion, does copying and pasting a comment make someone a shill?
Good job, thanks for sharing this!
https://laravelvoyager.com voyager is a good free alternative
It's about time phpmyadmin got an upgrade
Laravel is turning into the new wordpress. 
Something is strange about it. I summoned it in a test subreddit the other day and it was at -9 within 3 minutes.
The only pitfall is I don't want to spend $100 to test it out only to find out it doesn't fit my use case. 
horizon's ... nice, but has been buggy (anecdotal and issues on github). I don't think it's too overly complicated for what it does. Spark... bought in, then... accidentally upgraded. Was a bit underwhelmed, honestly, in that... much of what it looks like nova is promising is sort of what I expected in spark ('superhero scaffolding', etc). I honestly thought the 'users' link was just broken for a while because... it's an empty page. You have to explicitly search (even for \*) to see a list of users. Just... doesn't do as much as I'd expected for a paid product. Friends rave about envoyer and forge - haven't tried them yet. Will be watching nova, but probably not jumping on board on day one.
there is a middle ground between 'drop in nova' and 'spend $10k on ... something else'. If you've got a laravel app already, you probably have already built admin area stuff anyway, given how easy it is to build some of this stuff in laravel in the first place. And it probably didn't cost you near $10k. (there's even an adminlte package for laravel, iirc, which can serve as a visual shell to get started).
The counter to that position is that you're assuming 0 hours for learning how to use this. as someone who dealt with spark and horizon, there's not a 0 hour learning curve - that time needs to count for something too. And... dealing with bugs, which will happen. If something doesn't work, is it your poor understanding? Or an actual bug? And you need to spend time determining that. It's still not a bad price, but for larger agencies.. if you were going to add an extra $200 per project on, and you're doing dozens of projects, the cost becomes something that you could compare to an internal person building and maintaining. Taylor's testing the water here with a license based on revenue. If that becomes a metric agencies need to deal with (or... number of servers, or cpus, or whatever), there's a stronger argument to build inhouse (bugs may get fixed faster, etc). Overall, this still seems like a good move and price point for some situations, just not necessarily the "no brainer" for all situations.
I have forge and it's great, haven't tried the rest though. I really want to use Spark but I can't think of a good idea.
My experience and opinions: - I've found a lot of JAVA projects I've looked at have hard to understand documentation. I'm not sure if JAVA developers are just generally worse at explaining things, or if they just don't put as high a priority on it as PHP devs, or if it's just coincidence based on the project's I've looked at, but it's my experience none-the-less. - Unlike PHP which is an interpreted language, JAVA has to get compiled down to bytecode which generally means you'll be using build tools such as Maven, Ant, Gradle, etc. - In PHP developers rarely have to think about basic data structures, they just create objects, arrays, etc, and can even mix and match different data types. PHP is very forgiving in this respect and gives great speed of development at the cost of a small amount of speed. JAVA on the other hand will require more upfront planning for your application (not necessarily bad, just different) and knowledgeable devs will have much more control over how things are stored in memory. Because JAVA is compiled to bytecode, it allows code optimizations during compile and it also has what's called the Hot Spot compiler which will further optimize instructions that are getting executed many times. For these reasons, JAVA code is generally going to execute noticeably faster than PHP. - In addition to the built tools stuff already mentioned, JAVA was not built specifically for the web like PHP was. PHP has one of the lowest barriers to entry for web programming out there - it's stupid easy. This "stupid easy" aspect to PHP is also why it got a bad reputation in the early 2000s, because every Joe and Susan out there was writing bad, security hole ridden PHP code for their websites. - JAVA has had struggles adapting to the cloud based, microservices oriented work flows people want nowadays because the Java Virtual Machine takes up a lot of ram. This makes breaking up your single large application into a number of smaller apps that each run in their own containers difficult because each service needs that JVM. - JAVA's API is better designed than PHP's, since PHP started out as a simple scripting language that evolved over many years into a fully featured language, but lacked consistency while doing so. If I think of more stuff, I'll add it later.
Lol
You’re a dick
It's not laravel, but a hybrid...this annoying
link? never heard of bonfire.
"We could charge you $5,000 dollars to build this, or we could integrate Laravel Nova for a $99.00 license and $500 integration fee, but since Laravel Nova costs money we chose to only offer you the $5,000 custom build." Said no Agency ever.
Most people still using CI based applications are doing it for legacy reasons. Haven't really heard it being used in anything big or new in a long while. 
Sorry. Should have added a link. Thought it was more commonly known. 
Yes you can, but it depends on what you want it to do with the package, nothing stops you from registering another autoloader if its rogue/legacy code that you want included. If that package also has dependencies though you cant use the above method, but you could override the path to the vcs to local file system: [https://getcomposer.org/doc/05-repositories.md#vcs](https://getcomposer.org/doc/05-repositories.md#vcs) Odds are you cant use the above method because of environment issues. If it is a problem you can use the wikimedia plugin to have a vcs location per environment: [https://github.com/wikimedia/composer-merge-plugin](https://github.com/wikimedia/composer-merge-plugin) 
Thanks a lot for appropriating me :) 
It looks okay, but I can't imagine willingly developing a new project using CI.
testableWhy have a static factory method? Why not create a factory object and have a non-static build method? Makes it injectable and thus the using code testable and it prevents you from having to either cram all the creation code in one method or use private static methods. Static methods are okayish imo, but only when they are completely pure. Unfortunately that’s rarely the case is my experience.
Sure, there's a curve, but it's the same curve for all projects; so it's less of a project expense and more of a business expense. Same with framework and CI.
Still seems to be in early development and transitioning over to CI3, I wouldn't use it until it hits stable 1.0. At least it's still actively being updated so if your interest is there, talk to the lead developer and see if they are committed to keep supporting it.
There are cases where micro-optimization is necessary. I wrote an AutoCAD to SVG converter in PHP once (regrettably not open source), and I spent a lot of time googling for micro-optimization advice to get it to run faster. Articles like this one were very helpful for pointing me in the right direction. But, in general, yes, that's about the only time I've had to do this kind of micro-optimization. Every other time I had to work on performance it was doing things like avoiding unnecessary queries, adding indexes, avoiding redundantly nested loops (like looping over a 10.000 item array three times nested, meaning 10.000^3 loop iterations, which was rewritten as a single loop after some careful thought), and generally sound application architecture.
You most likely mean \*appreciating\*, and you're welcome :)
&gt;You spend 10k on Wp or Joomla? No but my clients do
&gt;I have forge and it's great I can't understand the amount of people that are willing to bet their complete infrastructure and stack on a closed source proprietary build system. If forge dies overnight or they do a Google and up the price past your budget could you repeat the build without the use of forge? Sounds like a failure waiting to happen.
&gt; they have exactly the same, if not more functionality I can absolutely say, categorically this is 100% false and a poorly educated comment. [https://youtu.be/pLcM3mpZSV0?t=5m2s](https://youtu.be/pLcM3mpZSV0?t=5m2s) Nothing comes close to that
&gt; **Are very many people using Bonfire as their base for web application development** The obvious answer is no because I'm unaware of anyone even considering using CI on a new project in the last 3/4years. The main choices are Laravel and Symfony and there are a huge number of admin style packages for these to get you started. Sonata is the obvious choice for Symfony although there are others and for Laravel there is Voyager and Backpack. Recently Nova as well.
While I'll use Laravel for most new projects certainly, I do think CI still has a place. I've a few projects that have to use a WISP stack because of business reasons, and I find the simplicity of CI tends to work better with that. Must admit I've not looked for about a year, but running Laravel on Windows against MSSQL used to be an exercise in pain. 
&gt;PHP Storm is by far the best for this tasks. That is literally what the article says all the way through and even goes on how to integrate sniffers, xdebug and build processes. Did you even read the post?
&gt;Netbeans as my go to PHP IDE. but mostly because I switch between java, js, shell scripting and php Netbeans was my go to when using multiple languages as well, it works flawlessly. I'm amazed at what they have achieved for a free product.
Dude it took me reading the whole thread to finally realize this is not even about Continuous Integration (which I presumed) but about codeigniter :D
Vanilla PHP knowledge is essential. But it's not how you would develop after you have that knowledge. App structure, libraries, Composer, are all essential for modern development. I keep referring folks to no-framework examples. That is, app structures that use vanilla code but rely upon libraries to get the real work done. One of my favorites references is: https://github.com/PatrickLouys/no-framework-tutorial Good luck.
Can you provide any more information? Talking about improving semantics of code is something I very much enjoy but rarely find appreciation for
Travis, Codeship, etc. Same deal?
He does this full time. When you can dedicate all your attention to it, it’s easy to deliver. Particularly when you see the pain points, the things people are after, and can scratch your own itch. 
I was excited by the title. Configure X-debug for dockers regardless of host operating system? I need this. The second first paragraph contains links to _different_ configuration for _specific_ host operating systems. And those links contain references to host specific issues that have their own specific fixes. I believe the post's title should be something like "configure PHP IDE for X-debug regardless of OS, for Docker"
OK, well you can carry on believing that, and I'll carry on using the tools I've been using for years to do all those things in the presentation. Deal?
When setting up PHP Xdebug, there are always two steps: 1. configure PHP itself 2. configure your IDE/editor The first part will differ a lot in a dockerized environment (depending on host os). You will find the os specific links under the following headline: https://devilbox.readthedocs.io/en/latest/intermediate/configure-php-xdebug.html#configure-php-container-for-xdebug
https://imgur.com/a/Ps65N9k not really sure what you don't understand: 1. Your code will execute 2 statements when it could be optimised to only execute one 2. Your code is unnecessarily verbose and therefore harder to read 3. underscore_case is not used in PHP these days, although it's still prevalent in config, db, and others 4. `and` vs `&amp;&amp;` is so obscure I don't even think it's mentioned in any standard ...
I'm just starting a massive project on Windows with MSSQL and it has been a breeze so far (running on Azure online and Vagrant locally)
With Laravel? That's great if so, I'd definitely give it another go next time then. 
Indeed, people referring to CodeIgniter as CI had me totally confused!
ubuntu unity had lenses in the search
Funny how every comment mentioning the price is downvoted into the negatives, feels a bit like /r/Bitcoin in here.
I still use CI for my new projects - I’m in a relatively niche market (higher-end restaurants) and have developed a CMS and reporting system that gets customized for them. Stuff like analytics reporting, menu entry, that sort of thing. The one thing I did that made a major difference was to not use the built-in database library and use Eloquent (from Laravel) instead. It’s super easy to do and works like a wonder.
&gt; Everyone stay calm. This isn’t another PHP or Java is better or worse than your preferred language argument. What this is really about is enterprise technology, for example Java Enterprise Subtext: &gt; But I gave it this crap clickbait article title anyway. I don't actually know anything about Java EE.
I think your knowledge of PHP is a bit dated.
You realize your servers aren't actually hosted with Forge, right?
Okay, each point in turn: **Type safety:** &lt;?php $i = 0; $i = "fish"; ?&gt; No error. **Global state:** &lt;?php $i = 0; ?&gt; No error. **Optimised compiled form:** $ phpc myWellUsedPHP.php Command not found 'phpc' PHP doesn't scale. Facebook replaced it with C++ https://www.zdnet.com/article/facebook-may-release-its-core-c-library-this-year/ Note specifically, reference to performance. Which bit was dated?
So what’s your theory of why people still choose to start new projects in PHP?
Because some of the arguments **are** correct. I'm not dismissing all of it. It's easy to deploy which means it's available on lots of web-servers. It's often taught in University which means it's easy to recruit developers that know it. It's a fairly forgiving language - it's quite hard to go down a rabbit hole and not be able to code round it (even if the resulting code is spaghetti nightmares). It's not strict on anything which is bad for complex enterprise apps but good for blogs and little projects. If I had a start-up and we had to deploy a quick prototype with some CRUD I would probably end up picking up PHP. Once I got funding would I stick with PHP? Heck no.
I totally agree with the article. I could add my own points too like &gt;PHP programmers are more plentiful and cheaper than Java programmers. Not only are they cheaper and more plentiful but they also speak better english.
Harsh
The pains of PHP are felt by developers. The pain of migration will be felt by everyone. In my experience such migration almost never happens.
It wouldn't be a migration. The whole point of a prototype is to throw it away. If it's not thrown away you didn't build a prototype you built an early alpha.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
You’re painting a very black and white kind of picture. No wonder you don’t like the taste of PHP “salad” :)
[removed]
\&gt; *Which bit was dated?* The bit about linking a 2012 article referencing tools that they've since released which have helped push php performance overall? Your "$i" example makes no sense. What should cause an error? You define a variable then echo it? You didn't call the function. global state is explicitly defined there. It's arguably not great form to use it, but identifiable with the 'global' keyword. Further, few modern packages/frameworks do much of anything with global state. For most modern php projects, global state is a non-issue (and it's still easier to reckon with and deal with 'global state' issues in a PHP app than threading issues in Java apps). Started some spring projects several years back - planning to migrate them to php in the next year. Speed diff was a concern at the time, but php has improved on speed front. The majority of time is often in the database queries on these projects, so the speed diff now is far less impactful than a decade ago. Both ecosystems have made progress in the last decade. In the context of 'startups', most don't last anyway - the overhead of using java/jvm stuff can often outweigh any potential longterm benefits. That is, of course, unless you already know it well and/or have a team already well versed in it. I've actually not run across too many jvm-based developers who are both capable and comfortable with rapid iteration of ideas (compared with php/ruby and even js folks). Not saying they don't exist, but don't seem to be as plentiful. All of course just imo, ymmv.
Click bait title for sure. Clearly nothing about Java. Looking at your post history and assuming that is your github account, you've been extensively java for the past 5 or 6 years, and it looks like you're out of touch of where PHP is today. Specifically * PHP has introduced _some_ changes regarding being more type safe (hinting, declaring return types, strict type enabled) and is moving forward. But is it really that necessary for most of these startup CRUD and marketing web applications? I would never recommend PHP to write a financial application, a desktop application, defense or medical software (though I can't say someone hasn't probably done just that). But for the web, to get to market and scale it's perfect. * From my experience Java requires a significant server configuration effort and usually involves vertical scaling. But really I don't know Java web development (I do some Java application development for school) outside of a few applications we've installed for work like JIRA and some NoSQL xml applications. * We have decoupled php from apache using php_fpm, further more there are several php libraries that are building the web server in PHP itself. This means I can easily spin up multiple servers or containers, scaling actively running PHP processes dynamically to the load on the servers. I can use Apache, Nginx and separate them from the PHP app completely. I don't see a downside. * Scaling an app like facebook now to the audience targeted for this article isn't really apples to apples. And I think their migration to Hack, and moving heavy loaded code to microservices is a sane and recommended development approach. And internally on our enterprise level apps that's what we do! Symfony based app, and if we need to generate a PDF for a report we bake that into a separate microservice that is in GO or _whatever_ best suited compiled language (right tool for the job) because yeah, PHP isn't great for that. What we have in this sub is a lot of hate from software developers who don't even work in the language they are bashing. There is no _best_ language, this is just a continuous opinionated unconstructive circle jerk that effects every language at some point, and we are at the tail end of a pretty big transition 20 years ago from desktop software applications (and enterprise server) to web based distributed software development. I like PHP because it reminds me of c/c++/c# and I dislike the syntax and development in ruby, python and GO. That doesn't mean those are inferior languages or do things worse or better - its all paradigm and opinions. At the end of the day, the developer is responsible for writing good or bad code. Shit in is shit out. Sorry, meant for this to be more constructive and coherent but I feel like the reddit php community could do better. Hell we totally bashed on a non developer who was just asking some questions about PHP (vs Java I think) in an earlier thread.
&gt; But is it really that necessary for most of these startup CRUD and marketing web applications? I would never recommend PHP to write a financial application, a desktop application, defense or medical software (though I can't say someone hasn't probably done just that). But for the web, to get to market and scale it's perfect. Which is why I was attacking usage of PHP in enterprise. 
but all these things dont matter if you have a competent programmer.
I use PHP in enterprise - but maybe our definitions of the word here are a bit off?
No matter how good a programmer you are, interpreting code takes time which reduces performance. And every programmer makes mistakes. We invented type safety to reduce the technical burden to free the competent programmer to solving higher order problems.
SME's or bigger was my definition. A marketing web app is probably the cross-over point.
Laravel is easy :)
&gt; Your "$i" example makes no sense. What should cause an error? You define a variable then echo it? You didn't call the function. global state is explicitly defined there. It's arguably not great form to use it, but identifiable with the 'global' keyword. Further, few modern packages/frameworks do much of anything with global state. For most modern php projects, global state is a non-issue (and it's still easier to reckon with and deal with 'global state' issues in a PHP app than threading issues in Java apps). `$i` is a global variable. &gt; Further, few modern packages/frameworks do much of anything with global state. Why does the language allow global state at all then.
Which framework is the best for you ?
No, I'm giving you the actual definition of the term prototype.
Not Laravel :)
Which one then?
the one which is best for the Project you try to make... 
I'd hate php too if I wrote it like [this](https://github.com/philipwhiuk/mCMS/blob/master/mcms.php#L113) lol
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [philipwhiuk/mCMS/.../**mcms.php#L113** (master → 8604ee0)](https://github.com/philipwhiuk/mCMS/blob/8604ee037f67b090ddbb97fe6ca5e2bfe345b964/mcms.php#L113) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e34msak.)
You probably weren’t born when I started writing PHP.
Thanks 
How come there's always a trend of people that are very critical of a language (not even just PHP) with really shitty code in said language? 6 years ago isn't that long. I think composer just started development around that time, standards around PHP were maturing, etc... I just find it mildly entertaining :)
How come there’s a trend of newer developers who think their code is amazing just because they wrote it recently.
I agree with the principle but some of the arguments are weak. The main reason PHP developers are more available and cheaper *on average* than Java developers is because there is a lower skill threshold for PHP and it has a much broader scope where as Java roles are predominantly for enterprise projects. A developer who makes wordpress templates (and there are lots of them) does not have the same skill set as a Java developer who works on enterprise software and does not cost nearly as much. If you compare all the PHP developers working on enterprise level projects with Java developers working on enterprise level projects I don't think you would see much difference in cost and availability.
lol smh, alright I'm getting off topic now. Sorry mods I apologize for my fuckery.
Software patents will kill your start up. Met a guy yesterday that holds an extremely vague "sensor to device over wireless" patent and goes around and attempts to crush competition (only small companies of course, because they know Apple would invalidate that shit immediately) If you're worried about language choice, then consider yourself lucky.
You said PHP has *no type safety*, then tried to prove it by providing one example. Yes, PHP doesn’t have type safety everywhere, but it has *some* type safety. You said it has *implicit* global state and tried to prove it by using an *explicit global* keyword. Stated that there is *no optimized compiled form* basing on… the lack of some command you imagined would be responsible for it? Dunno. PHP has *some kind* of optimized form: opcache. 
`opcache` is not the same. It requires the Zend compiler to choose to compile your code and it's STILL not the same as compiled code. I gave two examples, one implicit, one explicit. For type safety, that's how you are taught to write PHP, by the manual. It is the defacto way to declare variables. Sure functions may have type safety but that's worthless if you can just re-type a variable on any given line.
This article is full of dangerous advice. Light it on fire and not because Java is what you should pick or PHP. It's a litany of guesswork and misinterpreted data and poor advice. I cannot imagine what the author thought they were helping "business and operations" with.
&gt;Do frameworks opcache all their code Better: its done by php itself
I have come across a lot of references to Laravel. I guess I have some serious catch up to do. Thanks for the the information.
My Bad. I can see see how one might be confused. 
I am curious about the comment. I have used CI on a couple projects. Coming from PHPCake many years earlier it was refreshing and much faster. Thanks
I am really (really!) behind the curve on PHP frameworks I guess. What would you say the current go-to framework would be? Thanks
CI has a poor reputation in these parts, and with good reason. It's very old, it's barely being maintained, it hasn't adapted to modern PHP best practices, and it's a nightmare to try and extend or build anything complicated with. &gt; Coming from PHPCake many years earlier it was refreshing Many years ago, it was probably a big upgrade over CakePHP. It's still a bad joke compared to modern frameworks like Symfony, Slim, Laravel, etc.
I can guess why you are being downvoted, but you are right here.
I think that today, with all powermachines we have, the difference between PHP, JAVA, PYTHON, RUBY... is just YOU, the more you know better, the one you must choose.
1. Why do you say they suck? 2. What are you using it for?
I just said that like the founder of PHP said , I didnt mean it for real. E-commerce website like blocket.se
Plenty of enterprise platforms written in PHP, if you're talking SME. Totara (based on Moodle) may not be a holy grail of development quality, but it powers the e-learning for quite a few large companies (Tesco, Wella, Unilever), let alone the SME's that it caters for.
I think that works if its your personal startup, or the devs are in charge. Most companies I've worked with / seen in that situation tend to take the prototype to market and damn the developers, because "It's there and working, right?"
Heh yeah, I've definitely seen that practice :)
Teenager, got it. Are you intending to build from scratch, or have you considered things like [https://sylius.com/](https://sylius.com/) ? Which might get you there quicker.
I assume you mean by that that the Zend compiler may eventually choose to?
 &gt; &gt;The first part will differ a lot in a dockerized environment (depending on host os). I know this and dealt with this. Your post's title (not the article's) makes it seem it's about an OS-agnostic solution for exactly that, which it isn't. The only thing 'regardless of host OS' is configuring your IDE for X-debug. The article itself seems great, but it does not solve anything for my current struggles. 
Symfony &amp; Laravel. Personally, I think Laravel is a bit more approachable. But, there are "slim" version of both now that make the learning curve a little less steep. Then you have CMS land and that's Drupal and WordPress. If you add the four together you probably have most modern PHP project covered. I know for a fact where I work that's the only four we ever get asked. --- *Ok, we also don't use anything other than those. They're good products but a larger reason is just logistics. It's better to limit your technology stack when any PHP dev in the company could be put on a project. It's easier to manage.*
1. I updated the code here: https://i.imgur.com/10Hyog0.png to meet the requirement of not triggering all code paths, and yes it's possible to inline the entire condition but you'd lose the ability to add a semantic name for each condition, each semantic name gives a statement of intent 2. If I come to this code in 5 years time, I need to know what I intended to do when I wrote it, so I'm leaning heavily on variable names for signalling intent, because I find I read code first and then comments There will often be bugs in implementation details, but as long as I can infer the intent of code it'll be possible to solve them at any point in time, the worse code to work on is code that does a series of things but you cannot work out why, you'll have to make blind assumptions to fix it 3. My work's coding standard is snake case for variable names, I suggest you use whatever your coding standard says 4. ```and``` vs ```&amp;&amp;``` does have some interesting pros and cons, I prefer the english words for readability, it's often possible to construct close to english sentences like so: ```$close_order = ($paid and $delivered);``` but the order of precedence makes it vulnerable to these kinds of issues: ```$version_exists = isset($this-&gt;version) and (bool) $this-&gt;version;``` In the above code only the first condition is evaluated because = has a higher precedence where as this equivalent would not have an issue ``` $version_exists = isset($this-&gt;version) &amp;&amp; (bool) $this-&gt;version;``` but you do lose the englishness :( there's an outstanding RFC to remove ```or``` and ```and``` or change them to have the same order of precedence as ```&amp;&amp;``` and ```||``` it would be nice if the latter passes 
looks like you're right, I have introduced an issue in the code in my screenshot by not including the brackets maybe below would be better ``` $system_version = 125; $version_is_correct = ( (bool) $this-&gt;version and $this-&gt;version-&gt;software() &gt; $system_version; ); return $version_is_correct; ```
Not heard of Bonfire before, seems like a side project that someone is still working on, so you may be better off with FuelCMS or the like if you want something 'now'? I like CI. It's straight forward, and you can do most things you need to with it, and the learning curve is so shallow it may as well be flat for on-boarding new developers. I can read the internal code and understand exactly what its doing, with relative ease. It's very light weight, moreso than most modern frameworks, so you have to bring in a lot of your own libraries. It does not lend itself to portable code, you can't really write glue to wrap CI in, to make your code easily portable to another framework in the future, but it does have a place for small, fast, s/low change applications. Laravel also has a place, it gives you a lot of stuff right there in the box with it, which makes putting new things out quickly easy, with not too much thought (although, more than CI's "put your controller here, your model here, your view here, and it works"). For flexibility of use, I don't know that you can beat Symfony4 with Flex at the moment, but it probably takes more planning to get something done and off the ground in a maintainable way in the first instance.
If you've been using CodeIgniter, you'd replace it with Laravel. Symfony is a popular framework Laravel is more like CI than Symfony is.
&gt; This isn’t a technical write-up for technical professionals, but instead a business and operations commentary (for non-technical professionals) the target audience for this article is, apparently, non-technical startup founders. &gt; I could have picked any two languages or technologies on each side of the spectrum, I just picked the two most likely to make a point and get you riled up. it's also, admitted directly by the author, bullshit clickbait without substantive reasoning specific to the technologies being discussed. &gt; Find yourself a well trained computer science professional with experience who talks design and architecture first, code and language second and this is the ONLY meaningful sentence in the article, which is otherwise verbal garbage repeated several times over. 
I assume you have no idea about opcache/php since php 7 :-)
That's how I feel about most things posted on medium today. 
I expected something like this and you saved me some time to process hot air over and over again. Have an upvote.
I've got a blog coming up that does exactly what this title says.
That sounds a tad arrogant. I can't deny that it's a cool project though. I'm probably just salty that I can't use it in my open source or free time projects.
That is fucking absurd
And that will be the first time in Automattic history that they make the right choice.
http://engineering.khanacademy.org/posts/kotlin-adoption.htm
You are right im 17, i thought i should use laravel i don't know symfony
I'm pretty sure Amazon started with Java and not PHP.
In true (good) Reddit fashion, the answer is in the comments. Thanks for saving me a click.
Yeah, fuck Java, the thing modern PHP cribs from the most.
Amazon was founded before the first public release of PHP.
That's changing some with stuff like Spring Boot. PHP has a few more convention over configuration frameworks/packages but Spring Boot and some of the other stuff coming out will make a dent in that.
That's because posting on medium is not about being correct, it's about pushing the right buttons and getting shared a lot. 
Good architecture makes your application more easy to scale? Who knew? It's good we have people writing this down for the rest of us to read. /s
Realistic
I was disappointed when I saw that too.
You want /r/PHPhelp/
I work at a smaller agency (&lt; 35 employees, dev team of 5 people) and we would easily drop $200 on this dashboard for any project that needs it. Sure, some agencies have lower rates and may not be able to afford it, but I would imagine this is rare. When you're talking about a web project costing anywhere from $10k - $100k+, $200 is an incredible price.
More like, "We will charge you $5,000 to build this" _Purchases Nova anyway_
Nop
Which doesn't stymie agency buying either.... So...
Can you already share your blog url, so I can check in the upcoming days.
And then what? Land sweet consultancy gigs and tour the talks circuit?
Just learn as you go, create stuff and look things up as you do. Trying to learn an entire framework in one is counter productive. At least in my experience. You'll make mistakes, you'll revisit projects with new knowledge and say "I could have done it this way". Think about something to build, maybe even something that you could profit off of. Alternatively, make an open source project and ask the community for feedback, process the feedback and repeat, you'll immediately have something to show a future employer. Learning is a constant process, you'll never know everything, you'll always be looking things up - even if it's just to confirm your own solution.
Either the framework chooses to or the Zend engine running the PHP chooses to.
&gt;1.How do you structure your projects:a) On the server. Does everything live inside www/? Is it just config outside? Is everything outside except an index file? Depends on the project and the framework involved. Most of our projects live in /var/httpd or /var/www, but then apache is set up on a per-project basis. Say we have a Symfony-based API. We might put it at /var/httpd/derp-api. Based on how [Symfony](https://symfony.com/doc/current/setup/web_server_configuration.html) is set up, we would only host the /var/httpd/derp-api/public, while the source to the application is at derp-api/src. &gt;b) In the project. Do you have a src folder and a test folder?\] Yup. I've found that project structure is pretty similar between these 2 languages. Classes tend to be organized very similarly within src as well. &gt;2. What's your deployment strategy? Do you have a release process than takes your srcs and produces a zip? Presumably you do so you don't deploy test cases? We don't have any automated CI/CD yet. We've played with using Jenkins to run our test suites. Removing non-source code would be fine but unnecessary. Doesn't really matter if it exists on prod or not. Unfortunately, our deployments at work are a bit primitive (like our infrastructure). Some servers are manual SFTP deployments :( . We have some servers deployed with git (releasing via tags) with sym-links to configs/secrets outside the repository. We'd like to use Docker and containerize (most) everything, but we'd need buy-in from our infrastructure first. That may take a while... &gt;3. How do you test? PHPUnit for unit tests seems to be the vogue. But what about end-to-end tests? PHPUnit is fantastic. Coming from PHP and having to pick up some Java projects, I found Junit and Mockito very familiar and simple to pick up. The libraries are set up differently, but the methodology in testing is identical (e.g. Mock dependencies, instantiate class to test, assert results and/or verify mocks were interacted with in certain ways) I've done end-to-end (and some smoke testing) with Behat. It's a PHP implementation of Cucumber and works pretty well.
I thought the saying was "All shops when they mature eventually become Java shops"
Amazon was founded before the first public release of Java. Java 1.0 - January 23, 1996 Amazon - ‎July 5, 1994 
Even better. I bet the first version was in Perl...
https://jtreminio.com
Totally this. I was surprised yesterday to learn a highly skilled C++ dev may not get much more than me. Source: https://twitter.com/pati_gallardo/status/1022429076601102336 TLDR; to get more charge for value, not the specific language or skill, but for a deliverable a client values. C++ devs at one company only get up to 1500NOK/hr (~£130)
It's not true that a startup with 0 users or low-volume (anyone starting out) should focus on architecture. Architecture is emergent and only has to be engineered and addressed much later.
The case for Java https://twitter.com/GeePawHill/status/1022908750099869696
I do, but I've literally never worked somewhere that uses any kind of style guidelines. I think there is a point in skill where you think these things are important, and a large number of us aren't there yet.
&gt; My work's coding standard is snake case for variable names So ... fuck interop?? &gt;there's an outstanding RFC to remove or and and or change them to have the same order of precedence as &amp;&amp; and || it would be nice if the latter passes You hope someone changes the behaviour of all the code you wrote? You are an idiot. You've introduced two bugs in an internet argument, well done. If the meaning of version 125 is actually important then `$system_version` doesn't tell much of a story, either use a decent commit message or e.g. `// we can't go higer than 125 because slifin wrote the code and introduced too many bugs`
I used it when bonfire project started for one or two projects. It was for that time ok but I havent kept up with project's progress. 
Yes of course we follow PSR. Your colleague is a tool.
Seems like a shitty article stuffed with keywords and 'advice' which was designed purely for SEO purposes. 
If I understand your problem correctly, they added a hostname to allow you to talk back to the host regardless a few months ago. This docker xdebug setup allows xdebug to be used regardless of if it's MacOS/Windows/Linux: xdebug.remote_enable = 1 xdebug.remote_autostart = 1 xdebug.remote_port = 9000 xdebug.remote_host = host.docker.internal
That's completely unsubstantiated, especially the English argument. 
Another post talking good about Symfony and writing incorrectly (Symphony)...
It certainly was Perl and probably Perl CGI at first then mod_perl later. So two of the biggest sites in the world, making 2 guys (Bezos, Zuckerberg) the richest in the world were written in flawed scripting languages. There's a message there somewhere.
Yes, my interest in and usage of PHP dropped off after the PHP community imported Java wholesale with the release of PHP5.
Most likely then... 
A developer who makes WordPress templates doesn't have the experience to work on enterprise *PHP* applications. Writing themes for WordPress does not a developer make.
u/WArslett said “compare all the PHP developers working on enterprise level projects”, not “compare all the wordpress devs working at an enterprise level”. u/WArslett also said Wordpress template developers are of a lower skill level and do not work at an enterprise level. No one said Wordpress developers work on enterprise applications.
He said there's a lower skill threshold for PHP, because he's lumping WordPress shops in as "developers". When really, most of those people couldn't code their way out of a paper bag. It's not really a fair comparison. Compare the salary of a senior Symfony developer to that of a Java one and you'll have much more apples to apples comparison.
You should handle your login/authentication logic in a dedicated class for it’s purpose.
&gt;It's not really a fair comparison. Compare the salary of a senior Symfony developer to that of a Java one and you'll have much more apples to apples comparison. That is literally the exact point I already made.
Every project is different. Your chosen amount of modularity should be appropriate considering maintainability and readability. Security is not going to be affected by having code in more or less files.
Abstraction lowers perceived complexity at the expense of adding actual complexity. If you can keep it all together in one nicely bundled file, go for it. I'd at least wrap it in a class so you don't accidental expose functions that shouldn't be usable outside of that class to the wider application. If the file gets too long, and you find yourself searching it for 'where is that bit again' then consider separating using a MVC mentality, so the form code can go in one file, the logic for authentication can go in another etc. Happy coding.
It’s actually the article that makes the comparison between all PHP devs and all Java devs. u/WArslett goes out his way to make the distinction between Wordpress devs and enterprise level PHP devs. He states that the two enterprise level professionals may make similar money. By highlighting that they are enterprise level, he’s excluding Wordpress PHP devs that comparison. It is the article that states that (all) PHP devs earn less on average than (all) Java devs because of the lower skill level. So unless you’re saying that the article isn’t lumping in Wordpress devs with enterprise PHP devs, and it is just u/WArslett who is doing that, then I don’t understand the point you’re making.
You're right. After rereading your post it seems we're saying the same thing.
no. a low volume site should have architecture appropriate for low volume. the decision _not_ to go deep into distributed systems with high redundancy and high parallelism is also an architectural decision. a well trained computer science professional will avoid the mistake of over-engineering things, which is a common problem from inexperienced teams. 
Ostensibly, neither is necessarily more secure. However, the more separation you can create between your display (JS/CSS/HTML) and your functionality (PHP), the harder it is to make mistakes that introduce security issues. The major security issues you're likely to run into in PHP dev are: * Users being able to insert unfiltered text into your SQL queries (sql injection) * Users being able to insert unfiltered text into your JS/HTML (XSS) * Users submitting forms on behalf of other users (CSRF and token re-use) * Insecure password hashing/storage * SSL misconfiguration (MitM attacks) CSRF, SQL injection, and password salting and hasing logic are a lot to include on your login page. For most projects, it will make more sense to have separate, maintainable libraries to handle all of those.
yeah probz
What in all hell is that...
Thanks!
&gt; a MVC mentality, so the form code can go in one file, the logic for authentication can go in another etc. None of that is related to MVC. Why do people keep insisting in using that term instead of separation of concerns?
All my jobs, at least as far back as I can remember, have come from people finding my profile on LinkedIn or me spotting someone post that they need a dev on their. As for company profile, I’ve worked for small agencies all the way up to multinationals.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I was thinking strictly about solo gigs. You found these on LinkedIn? All the recruiters who contact me are looking for someone to join a team.
Scalability should not be your primary concern when you start a new product.
I’ve had solo jobs in the past, but usually contract jobs are to help pad out a team for a project. Is it more remote freelance jobs you’re looking for? I’d still recommend creating a very detailed linked account, and make it clear what kind of work you are looking for and when you are available.
Now it also sounds bitter.
&gt; PHP is simply made for the web. No extra servers, processors, hacks, tricks needed. It is literally one with your web server. It just runs on the clouds... Great advice
I disagree. It's often not an architectural decision in any conscious way to use a non-distributed system, it's a skill and resources problem, an intimidation of large systems problem, not some big choice. That of course does not mean someone that knowingly chooses a system with a basic non-enterprise structure is at fault, if as you've hinted at it's too early for their client business or employer to need that, know about that, etc. It is exactly the point I was making. Architecture is not there to make up-front decisions for new businesses, especially not in the context of this article chatting about unproven startups or prototyping. You don't need architecture for that. Only mature systems need so much focus on structure and high-level design. If you start off on day one with an architect handling architecture decisions, you're burning money with an unproven concept.
Is he in West Texas? There's a family of patent trolls there with the head vampire a judge.
Yes, I have a detailed LinkedIn account but haven't specified solo work to date. Maybe I should do that. To some extent I went with Laravel recently on the assumption that there would be more solo work with PHP. Recruiters approach me for JS, Ruby and Python work all the time but it's invariably for teams which isn't my forte. I know there are a lot of SMEs out there who just need a solo dev to do some freelance work but finding them is a mystery. We need a version of LinkedIn for smaller freelance projects but not with the usual race-to-the-bottom bidding farce you find on a lot of freelance sites. That doesn't empower anyone.
What's with all the ****ing blank lines in PSR-2? Jeezus, with the added KR brace style requirement you end up with half the screen occupied by blank lines. Add doc comments into the mix a-la Symfony and Laravel and you're lucky if you can fit a method definition on one screen. There's none of this craziness in JS, Ruby or Python so why has PHP chosen to specialise in wasting space?
Java sucks. Most aggravating language there is.
[https://github.com/zbateson/MailMimeParser](https://github.com/zbateson/MailMimeParser) Greetings r/PHP I've been working on this project for over 2 years and I recently released a new 1.0-beta version and would love some feedback and... more users. Unlike other email parser libraries, this one doesn't depend on the php imap\* or mailparse extensions. It's written as its own parser, parsing an email into headers and parts, and providing easy access to content and attachments. Mostly I wanted something that felt well written (thinking I could do better... I'm sure after posting I'll find out how wrong I was ;)). I was surprised there wasn't anything PSR-compliant out there. Also I found the challenge of writing the parser intriguing. I particularly enjoyed creating the header parser because there's so much more to it than I ever imagined before looking into this. It uses Psr7 streams internally, so large messages aren't mindlessly stored in-memory unless requested, and attachments can be accessed as a stream directly. Originally I wrote it to use php streams and filters, but found them to be a bit buggy (you can see my work-arounds in the 0.4 branch under src/Streams). Advantages I see over php imap\* and mailparse\*: * Handles header decoding/charset/formats for you. No need to worry about the format a header is in, if it's RFC2047 or RFC2231. * Decoding headers is done with a parser that can handle various complexities usually ignored by a regex pattern. * Handles content decoding and charset conversion for you. No need to worry about whether the content is base64 encoded and using WINDOWS-1256 charset encoding (so long as mb\_\* or iconv\* support the charset and are available, or it's an alias for a supported charset). * Parses messages into a Message object with handy methods like getContent() and getHeader(). * Can handle multiple headers of the same name. * Can update a message, setting headers, overwriting content, changing to/from multipart/alternative, add attachments, set the message as multipart/signed (and add a signature part) and save the message to a stream. One thing I'm not terribly pleased with is my dependency injection -- I didn't want to use anything overly-complicated so ended up throwing everything in a single class. I'd probably be better off using a simple DI library but haven't gotten around to finding one yet. I'd love to hear some feedback and maybe find some bugs -- particularly since I'm hoping to release 1.0 in the next few weeks. Thanks for reading if you got this far!
Have you tried AngelList or at least reaching out to a tech recruitment company?
Damn, after many years I don't really know how to answer this question. Honestly all my cases just found me, never really had to search.
Find local companies that have to use IT stuff, knock on the door, tell them you build web applications and would like to understand what they do to see if you can help them be more efficient. Many companies still use Excel to track things, and you can create a basic framework to convert them to web apps and sell it to the company.
Reminds me of ExpressionEngine, and how it became a paid for CRUD/CMS offering built on CodeIgniter. ;-) Not a bad thing.
That sounds like a good idea if only I could get past the inevitable "you'll have to pry my Excel sheets from my cold dead fingers" response.
Hey if you are in the Chicagoland area hit me up. I did solo dev work for awhile and I got work by going to meetups for business owners. A lot of places run their businesses on PHP, don’t have anyone on staff to help maintain or add features and can easily justify money for relatively small features. We’re talking setting up mailing lists with sendgrid, writing new features for magento, adding some small thing to Wordpress. It’s not glamorous but it’s surprisingly lucrative. The big thing is be strict about billing. Don’t undervalue yourself. 
I get bombarded with offers from tech recruiters daily but, as I said, they invariably want you to join a team and tend not to deal with small companies.
Find your local startup community, make friends. There's always someone who knows someone that needs help.
Tech community. Go to meetups and professional events specifically for mingling. Have business cards. Contact information on the front. Bullet point style tech stack bits you are proficient in on the back. Give those cheap cards out to everyone. Be easy to find. Seriously. Linked In. A simple web page. A blog detailing solutions you have built. The Facebook and reddit pages for your nearest metro areas. Be on there, give your technical perspective on things. You can solve certain problems. People will find you if they can discern they have problems you can solve.
I've attended a couple of Startups &amp; Entrepreneurs meetups here in London but there were a lot of developers there to compete with. A bit discouraging.
Am I missing something? For serious now; can PHP really compete with tools like Python, R, etc, when it comes to ML or is this more proof of concept and thought experiment? Reminds me of those Doom on TI-83 things... 
"The system will include an export facility so that you can still view them as Excel sheets when you want". Admittedly with Office 365 and everything online this is becoming a harder sell, but there are lots of companies that would benefit from an upgrade to a customized, centralized system. A good salesperson (which unfortunately most devs, myself included, are not) should be able to counter the Excel sheets response.
Ah, sorry to hear that. I was referring to making friends and socializing rather than finding work. By making friends in the community, letting those friends know your talents, offering help at times or suggestions, work/projects can naturally follow. Also, I'd recommend more meetup and co-working events/spots vs. something like a hackathon or startup showcase kind of thing. A nice co-working space is a hotbed for meeting interesting people who often time have a need, or know someone in need of your services. This is just one suggestion of many, but in my experience, I've found quite a few projects big and small (and PHP) this way.
Who uses business cards these days?
yo dawg, I heard you like exceptions. 
Very cool, saved
That is pretty presumptuous. They may be simply put off by seeing "sexy". Also, I'm pretty sure their life wouldn't fundamentally be different whether they can share your view on "clean" code being "sexy". Note the quotation, because their use is pretty subjective. I personally don't think that Laravel code shows either characteristic. However, I don't deal with the use cases Laravel is intended to solve. Whether something is clean and/or sexy remains subjective and whether it belongs in a comment on a video post is a separate matter entirely.
Does `host.docker.internal` also exist for Linux and do you have a link that confirms the above?
[Sort of.](http://www.syntheticminds.co.uk/blog/is-php-now-suitable-for-machine-learning.html) It would be faster if it was a compiled library but for prototyping or simple models, there's nothing wrong with using this library.
Then it should be an easy quest, no? Just equip some frost spells (vampires are weak against frost spells) and plenty of magicka potions and he should be good to go. The patent trolls are usually good to get with two-handed melee weapons, so make sure you have at least 80 dmg and they usually go down in 2 - 3 hits. Usually only vampires in northern ~~Tamriel~~ Texas are the harder ones.
It’s fine as part of a data pipeline, but you certainly wouldn’t want it running the actual training or prediction code in production. As a fun experiment, go for it. If it ever gets an FFI module or just an extension that exposes TF natively... maybe, but it’s probably still a bad idea. 
It kind of is though. "form code" is kind of a view. "logic for authentication" would be the controller. But you're right too, it's separation of concerns.
That's why you still post in low traffic r/PHP threads 13 years later.
&gt; Unlike PHP which is an interpreted language, JAVA has to get compiled down to bytecode which generally means you'll be using build tools such as Maven, Ant, Gradle, etc. You're using build tools in php projects too: * gulp * webpack * composer (https://getcomposer.org/doc/articles/autoloader-optimization.md)
Not related to PHP, but here you go [https://www.instructables.com/id/Adding-Webmin-to-manage-a-Raspberry-Pi/](https://www.instructables.com/id/Adding-Webmin-to-manage-a-Raspberry-Pi/)
Integrate how? For what purpose?
&gt; but you certainly wouldn’t want it running the actual training or prediction code in production [I ponder how well PHP 8's JIT might solve this](https://www.youtube.com/watch?v=a4y3UfkATbs). There's also talk of FFIs in PHP 8, so it might be the answer to both of these problems at the same time...
Hmm, unexpected. [This](https://github.com/docker/for-linux/issues/264) implies it doesn't work, but the PR I put in to change from our old hacky solution to using docker.host.internal was accepted and verified by a guy who runs Ubuntu who I'm pretty sure would have kicked off if xdebug wasn't working for a month and a half, so now I'm not sure what to think.
frontend
You gotta keep 'em separated (c) The Offspring
Take a look at how big frameworks like Laravel handles it. There are some pretty common conventions and guides out there.
You don't "integrate" React in PHP, unless you're talking about ReactPHP ( https://reactphp.org ) which is already written in PHP, so no need to "integrate"... If you're talking about the Javascript Framework, it's an entirely different part of your code. PHP lives in the backend. React is on the frontend. If you want the two to communicate, you'd have to make an API on the backend, and use ajax or what have you to make the calls from the frontend. Your backend and frontend are usually entirely separated. They can even be on different servers, using different domains. Using google and youtube to find tutorials for this isn't hard. There are videos and blogposts that tell you exactly how this works.
What if by some miracle an AI is born from this? That be incredible right?! But then you remember it was in PHP... this is really neat tho.
I get most from my friends and family (so don't mess up with them, never) and like 30% from other sources like social media (showcase work on a good platform and share it). But I also recommend to try freelancer website it's great. Good luck
&gt;You realize your servers aren't actually hosted with Forge, right? If Forge goes down, it's not a big deal. Your servers and sites will stay running. That's not what I said or the point that I made..... &gt;If forge dies overnight or they do a Google and up the price past your budget could you repeat the build without the use of forge? Can you repeat the build without your proprietary, closed source system? My money is that you couldn't. That's why it's better and makes sense to use opensource build and deployment tools so you have full control over something that is vital to your business
&gt;OK, well you can carry on believing that, and I'll carry on using the tools I've been using for years to do all those things in the presentation. Deal? I have absolutely no problem with that or did I say otherwise. It's something I probably wont be using either but there is no denying after watch that (very lengthy) demo that nothing I've used comes close to that so I can see the value in it
&gt;Travis, Codeship, etc. Same deal? Yes. Any closed source proprietary system that has complete vendor lock in you're asking for trouble. Just take a look over on /r/programming there is a post roughly every week about someone being stung by price rises or shutdowns. For something so vital and integral to your business I personally think its madness to give complete control to someone else, you're asking to be burnt.
I’ve been freelance for a long time. The bulk of my work comes from contacts and networking. That said I still actively &amp; regularly promote myself with mailers (posted) and (when possible) speaking at events and the like. One of my favourite methods at the moment is to post out promos to agencies with a current job vacancy. Basically the promo suggests that while the agency is looking to full their current opening I’m available to (remotely) take up the slack, giving them more time to make the right decision on who to hire. Whatever you do to promote yourself make sure it’s memorable, otherwise you’re likely wasting your time &amp; energy. 
Thanks. Some good stuff you have there.
Sure you can, or near enough to it. You can fetch the provisioning script and stash it for later. Granted, it won’t be fully automated by a web UI, but it’s there. There’s also the settler stuff that Homestead is built from, which is built around dev/prod parity. 
I guess not everybody wants to reinvent the wheel every time. Not everybody has a systems team and not everybody is a devops person. As long as there are developers that just cut code, services like this will exist and thrive. 
Contract gigs through word of mouth, mostly. All of my clients are long term and have various repeating business concerns such as HIPAA and PCI compliance. I don't take on short-term work these days because its too unreliable, I look for businesses that want to keep someone on retainer for a long period of time.
&gt;I guess not everybody wants to reinvent the wheel every time You don't have to, there are opensource solutions &gt;As long as there are developers that just cut code, services like this will exist and thrive. I have no doubt about that but what happens when the jack the price up or close down? You're screwed. If you follow /r/programming you will see stories about such closed source, hosted solutions on a weekly basis. If you're willing to gamble your companies entire build process on a closed source proprietary system then you're a far braver person than me.
&gt;Sure you can, or near enough to it. You can fetch the provisioning script and stash it for later. Ah okay maybe I have misunderstood Forge then. So they give you a script of your entire build process so you can repeat the build, configuration and deployment outside of Forge on a fresh server?
When should it be?
You could absolutely repeat your build lol.
Not all of machine learning is big honking deep neural stuff. I find that most machine learning in practice is foundational bits and pieces, a classifier here, a regression there. Php does very well in those situations, and I have indeed used this library's random forest in production. If it gives my statement any more clout, I'm a ml researcher that has published two books
Standard single page application setup: frontend (react, in your case) communicates with the backend (PHP) via an API (eg JSON over HTTP).
&gt;You could absolutely repeat your build lol. I guess I missed the point of Forge then. So they give you all the builds scripts and tools needed to repeat the build (configure, deploy, queues etc) outside of Forge on a fresh server? All of that is open source and you can take it to another provider? 
Just curious: in what sense do you see Laravel as a big framework? 
&gt; So they give you all the builds scripts and tools needed to repeat the build (configure, deploy, queues etc) &gt; outside of Forge No. They save the scripts to your server so you can just pull them off at any time.
The "trendy, edgy" names for things in Laravel trigger me.
It's one of the most popular. 
I usually have 1 big project and several smaller ones. Right not the lions share is coming from that big one, but the small ones are enough to take the fall if the big one ended tomorrow. 
Thanks for the link! Had no idea how much potential there is for PHP and ML. Very cool indeed :D
It is a cheat sheet about how to get a hold of you that you can pawn off in less than 5 seconds-- if you've made a significant enough impression, they can add your contact info to their contacts at their leisure. I don't think business cards are done yet. They provide a fast, impersonal way to help people contact you. It isn't even 50/50-- I prefer getting 
Laravel dev here, forced to work on these projects. I cannot find a single reason why I would choose Laravel over Symfony - considering I use interfaces, type hints, dependency injection etc. Any specific reasons for it?
What project? It's just a link to a github account.
Yes, github page for my project!
Your typed array project only works based on strict types. Which might be fine for me, but could be a wtf for others. Also why do you have two separate classes for "native" types and user objects?
&gt;So they give you all the builds scripts and tools needed to repeat the build (configure, deploy, queues etc) &gt; &gt;Yes. &gt; &gt;outside of Forge &gt; &gt;No. I'm sorry that makes no sense? They give you the build script but that build script can only be used in Forge and no where else? So it's not something like a Jenkins script or a Chef config?
Hi Thanks for comment! On strict types, I think that should be the standard, I decided to write code only for PHP &gt;= 7. For the other question, two separate classes for native and for user, the problem was what can I do with the same code. I managed to group native types under the same code and classes under another. I preferred to have two classes that do one thing that a class does two. I tried to apply the S of the SOLID! How would you have done? 
I would have just provided a single API. The `S`is actually short for `SRP` which is short for `Single Responsibility Principle`. The responsibility of the thing is to have a typed array. That's it. Otherwise to go with your reasoning why wouldn't you have a separate class for all types? The responsibility of both classes are the same: make sure only a certain type of value can be passed in. However it handles that internally is an implementation detail.
What type of agencies? Can you give an example url?
Same gig for the last 4 years, I sort of created job security (custom cms) w/ some guys and I've been maintaining and updating it for a while now. Always asking for new features, etc... probably why I'm not interested in doing web dev outside of work. Ventured into gamedev to keep my interest in programming.
It’s not, actually.
Kid, why don’t you just go sign up for a free trial and figure it out yourself, k?
I've tried that exact library just to try out some ML stuff and it took me 3 days to train my network to get to 90% accuracy on MNIST. I'd rather use something that can run on my GPU, for webdevs tensorflow.js is probably the best choice: It uses webGL to run some of that magic math on the device's GPU and while still about 1.5x to 2x slower than Python, it's still a ton faster than PHP with the library above. On the other hand, you might be able to train your model in your fast language of your choice, and then somehow import it into PHP-ML (though I don't think it even supports any standard formats like Keras). I can also imagine using it for smaller networks, mapping only a handful of inputs to something else.
That is correct :) I will try to merge two classes.
They’re bash scripts. It’s open source but you need a forge account to provision your server to see them.
&gt;It’s not, actually. Why not? because it is under an organization? because it is under MIT licence?
The whole organization set of repos *is* the project. And the project is called Linna.
Yes! Linna is the project!
Seems to suffer from "not invented here" syndrome. Routing, container, etc not are all custom instead of using any number of popular, existing packages. Also lack of PSR-7/15 makes it a no go for me even if everything else was fantastic.
This is about the failings of a Java desktop UI library. What relevance does this have to anything? This is like bitching about the failings of WP but saying that it's a case against PHP.
I tend to team up with small SEO agencies or solo SEO guys that don’t have in house devs. They always need a full stack web dev and they do all the networking to find their clients so I don’t have to.
Amazon started with C++ and switched to Java.
Hi, thaks for comment, no syndrome, easy to use a popular package without knowing how it actually works or how it was written. Write your own tools for me is the best method for understand how they work. PSR7 need to be completed! Finally I would have preferred a technical feedback on the code and not a list of what is or is not there.
It looks good - clean code, but i don't get the idea behind the project. Is it that you want to understand how popular frameworks work or do you want to make your own framework / toolset? Also nearly everything does already exists in other frameworks - so why should devs use your framework?
Web agency of course. And example ? Bro did you try to steal his gig ?
Hi! You already got the idea behind, understand and make my toolset :) &gt;Also nearly everything does already exists in other frameworks - so why should devs use your framework? Yes, now there is a very basic list of tools, already presents in other packages/framework, I have not yet used this code on production environment then is not present any unique helpful feature for solve specific problems. Devs could use my framework for learning purposes or as another point of view for a component implementations. Code it is too unripe for use it as base for a real project.
Pointing out NIH is a technical review; to me it shows that a person is more willing to spend hours writing code than reading code, which leads to technical debt. I'm really not trying to be a troll. I wrote a popular (and pretty bad, technically) framework. My biggest regret is creating something that caused so much technical debt for so many people. Had I spent more time understanding existing projects rather than thinking "I can do that better" it would have saved a lot of people a lot of time.
Mostly people with ill advised ideas, non-plans, and half-assed solutions that someone else walked away from.
I organize meetups once a month in capital city of our country, write posts twice a week, talk at meetups once a 3 month and create and maintain 11 open source packages. This got back to me after a year of work and now I'm getting offers for consulting enough for living.
&gt;Pointing out NIH is a technical review; to me it shows that a person is more willing to spend hours writing code than reading code, which leads to technical debt. &gt; &gt;I'm really not trying to be a troll. I wrote a popular (and pretty bad, technically) framework. My biggest regret is creating something that caused so much technical debt for so many people. Had I spent more time understanding existing projects rather than thinking "I can do that better" it would have saved a lot of people a lot of time. I appreciate your comment and don't think you are a troll, I can guarantee that I have passed lot of time understanding existing projects and mine wants to be a self test, the proof that I understood! Which popular framework?
The first stable and feature-complete release introduced support for middlewares and an experimental ConcurrentServer for handling batch requests.
&gt; Which popular framework? Kohana. If you haven't heard of it, probably for the best.
I saw it on the popular framework list on phptherightway, I think also saw the source code, and after check I saw that I already following you on twitter :)
Woah wait.... really? I mean, maybe by today's standards one could consider that framework "bad", but you wrote that during a time when: 1. PHP was still suffering from growing pains 2. No real coding standards were in place 3. Composer hadn't quite caught on yet Say what you will about it, but what you built was - for its time - pretty commendable.
To add to your "contact agencies with openings" bit, while this isn't a bad idea... Don't push it. If we're unwilling to outsource our extra work today, it doesn't mean we won't be willing in a few months. Let us know you're available for the odd job, give a resume/portfolio, and ask us to give you a call if we need some help in the future. Do not push it. Do not keep contacting us. If you annoy us even a little, we'll forget you exist. But we do indeed keep a list of freelancers handy and do on occasion send a smaller WordPress build to then when we are behind. Just don't be annoying and we might send you a job or two a year. 
Back in the time I used elance and it was great. Good rates, good jobs. But elance was sold and today you can get great opportunity to improve someone website for $5 xD
PHP 7.3 will clean up that `getSpec` heredoc significantly.
If you’re at a size where it’s a gamble, you probably also have enough talent to manage it in house. 
If you choose a custom VPS, this is how it works. If you use supported providers, it does it all for you - including spinning up a fresh VM. 
Exactly, more often than not I get calls from agencies that I sent a promo to 6 or more months ago. Be memorable but not annoying. The most you’ll get from me is a postcard every 6 ~ 12 months and a follow on Instagram. 
Which is exactly what we want. We need a list of dependable names for a rainy day, more or less. In most cases, you won't get steady or reliable work, but I mean... I doubt any freelancer is going to complain with a ~$3k, ~1 week build landing in their lap every now and then.
Ill take it. 
Thanks you all. I'm currently looking to get a few gigs om the side of a long term contract. Comments gave some.nice ideas 
Personally, I'd much rather go for casting to object or wish the interface allowed arrays as return values: ``` return (object) [ "key" =&gt; (object) [ // ... ], ]; ```
Batch and everything already supported without middlewares and schemas: server: [https://github.com/DawidMazurek/php-jsonrpc-server](https://github.com/DawidMazurek/php-jsonrpc-server) client: [https://github.com/DawidMazurek/php-jsonrpc-client](https://github.com/DawidMazurek/php-jsonrpc-client) hovewer not 1.0 released yet, but 100% jsonrpc spec compatible [https://www.jsonrpc.org/specification](https://www.jsonrpc.org/specification)
Neat, I did not actually remember that you can also get stdClasses by casting arrays to (object). UX-wise, that's practically the same than returning an array. However I only used these HEREDOCs in the documentation to fit the class and the schema in the same place, but it's not mandatory. On real projects I store the schemas in a well-known path as standalone json files, then PhpStorm can highlight, validate and autoformat them.
Mine should be 100% compatible to the spec, too. In fact... the main functional test runs all examples from section 7. Just to clarify, the regular Server also supports batch requests, but it runs each one sequentially, whereas the ConcurrentServer spawns a child process for each. This might or might not be a good idea depending on the workload, since the overhead of spawning and waiting for these processes is pretty hefty.
The vast majority from existing contacts or by by word of mouth and networking. If you cultivate half a dozen to a dozen good contacts they'll keep you in work. However it is worthwhile putting a profile up on one of the freelancing websites - choose one you like the look of - and take a few small and quick jobs dirt cheap to get a good rating. After that increase your price to a normal rate and don't compete on it (they'll always be someone who'll underbid you for cookie cutter work) - once you have your foot in the door sell yourself on speciality and competence and not on price, and pick your bids carefully. I've picked up several interesting gigs over the years and generally starting with something like "This won't be your cheapest bid, but this is why you should do this...". These can quite often lead to longer term relationships and you're not interested in people who want to pay you a pittance. Not quite your normal freelancing website, but I'm rather fond of Codementor - www.codementor.io - they're somewhat more picky about getting in than most and they're not a normal freelancing site in that you get paid by the minute for direct 1:1 help. If you're sure of your skills and enjoy interactive debugging under pressure then it's a fun way of earning a few bucks on the side. If I'm in the mood and not under a deadline I quite often keep it open on my desktop and keep an eye out for interesting problems (helping people with SQL in my case is one I tend to go for - having been a DBA for part of my career on several different RDBMs) 
Yeah, makes sense. would be neat if we could cast like `(stdClass) ["key" =&gt; "value"]` and it would recursively make it into an object...
I love the Laravel Socialite package when working inside of the Laravel framework. I have tried to get it working outside of a Laravel project without success and the problem is the package has extremely poor documentation outside of it's basic usage inside of Laravel. I feel I'm setting myself up for a fail using something so tightly coupled to the Laravel framework and very little documentation. What are the alternatives?
https://github.com/thephpleague/oauth1-client and https://github.com/thephpleague/oauth2-client
Here is the documentation on how to make it work: https://github.com/spiral/roadrunner/wiki/AWS-Lambda As expected, AWS Lambda function won't be destroyed immediately, this allows RoadRunner to reuse worker pool to reduce latency for following requests.
Not Php related, but I've used happy.js for social login
WOW awesome work! Really excited to see JsonRpc support.
Nice work but if you want others to use it, think in terms of "product" not "project". What new problems you solve? How is it different. What is your on-going commitment. Is this for general purpose projects or for specific ones? I would also appreciate some more ideology behind it. Include some illustrations and create a good introduction especially for someone who is already familiar with popular frameworks.
tl;dr dev who never used X jumps in without understanding X and complains about things he didn't try to understand
and can’t spell or grammar. 
In fairness, wording is hard and I constantly fuck up basic things so I tend not to call out people on they sort of stuff. 
but he can make a python.
For example: - self in class instances - docstrings - pip vs pip3 (lol) - requirements files - scope - relates syntax of a conditional operator and a variable type/value, really odd to compare.
Having said that composer is far easier to work with than pip, especially when getting something installed on a server
`this = sys.modules[__name__]` might be the most wtf I've seen in a while and I've done some weird path hacking stuff in Python. 
Yeah, agreed. Got a good eyeroll from me. As well as complaining about indentation, yet loves yaml, and "I write clean readable code" then discusses ternary operators (which can be argued as not clean/readable). Seems to ignore PSR, and doesn't mention PEP8. 
You might wanna look into [pipenv](https://github.com/pypa/pipenv) then.
I can't really compare to composer since it's been a long time since I've done php and composer wasn't a thing (or widespread at least) the last time I did. Python doesn't have a good packaging story, and that's the been the case for quite a while. Most of the difficulty comes from outdated/incomplete docs (or worse, both), tutorials that are very sparse, and way too many options: * setup.py * setup.cfg * pyproject.toml And that's just files actually used by setuptools and pip. If you use poetry, a competitor to setuptools, then you'll have a different set of files. There's also requirements.txt which is commonly used to pin dependencies and is consumed by pip. But in my experience, the best approach is to use setup.py to install your application rather than just plopping the code on the server and running a `pip install -r requirements.txt`. If you're paranoid about someone publishing it to pypi, you can add an invalid trove classifier to prevent that. 
Smart to post on weekend morning. This would be downvoted to reddit hell on weekday. Beginner dont follow this. This is exactly why php has a bad rep “Encrypting” password with base64? Come on!
I’ll totally on Java these days using gradle, but yes, virtual envs seemed the only sane way when I was doing some python work.
There's a lot in the article that's just weird to moan about it. I had a big thing written up but I hit back on my phone and lost it. But honestly, it was just every line of the article. Because all of it is wrong. 
not really though. 
&gt; **Why you don’t have to capitalize If yet you have to capitalize True ?** Because Bool, True, False, Dict, List, Tuple are all object classes under the hood. As such, you could overload them or subclass them with your own logic. if is just an operator. I feel this guy is ripping Python apart without knowing the internals of the language, when he clearly understands the internals of PHP. A coworker of mine wrote [php: a fractal of bad design](https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/).
&gt;A few days ago I wrote step by step Tutorial for Restful Web Services in PHP Example – PHP + MySQL Best Practice... Just because you called it best practice doesn't make it so. Everything from your file structure to your HTML is terrible practice and should be followed by no one. Take your "infinite" blog spam somewhere else.
WoW. Didn't expect to see a post from 2018 with a base64\_decode($\_POST\['password'\]);, shoosh. Tutorials like this are - in my opinion - strongly missing using standards from today. There's only "Learn $Framework" and no longer "Learn Basics". So for that I have to give credit. However, the implementation is lacking A LOT. Sorry to say, but I hope that no beginner stumbles upon this as it is detrimental to the learning success of a newcomer.
plus sql injection in login function...
See very similar question from last day. You'll find many useful tips there: https://www.reddit.com/r/PHP/comments/92l0wt/as_a_freelancer_what_is_your_main_source_of_your/
Regarding the tab case: If that indented block is too long to see in a single screen, the code needs to be refactored somehow. There are a bunch of different code aesthetics to consider in Python that don't make as much of a difference elsewhere, but ending a long and deeply nested block with a series of braces is bad to read in any language.
&gt;and can’t spell or grammar. Looking at the authors name it's clear he's not a native English speaker so probably a little harsh
I can't work out if this is just a troll post of bad habits or if its genuine? 
You're not going to contribute anything worthwhile to machine learning with only one language. Each language can have something to contribute. The key is knowing the strengths of each language and using them for their strengths.
\&gt; only one language Straw man much? ಠ\_ಠ I even say "Python, R, etc"; how on earth did you get the idea there's an argument for only one language for ML?
I meant an example web agency url so, no, I didn't steal anything.
As a mainly PHP developer with some Python experience … I can't take this article seriously. His first point on white spacing: most decent IDE take care of this. It's only when you're writing in the terminal that it becomes a pain in the posterior. Once I was working with a student PHP code he had left with very poor white spacing … it was a nightmare. Second point on imports: PHP has no problem with circular imports due to the *_once functions. His third point on this vs self: you don't go to a foreign country, and expect that they can understand you provide you speak louder and slower. This is the same. As a developer, you need to learn how to use the language at hand, not cobble the language into something you are more comfortable. I couldn't continue. 
[https://github.com/zbateson/MailMimeParser](https://github.com/zbateson/MailMimeParser) I've been working on this project for over 2 years and I recently released a new 1.0-beta version and would love some feedback and... more users. At some point some contributers would be nice, too! Current users are all coming from one thread I posted on StackOverflow.com I think, and I haven't really "put it out there". Unlike other email parser libraries, this one doesn't depend on php imap or mailparse extensions. It's written as its own parser, parsing an email into headers and parts, and providing easy access to content and attachments. It uses Psr7 streams internally, and large messages aren't mindlessly stored in-memory unless requested; attachments can be accessed as a psr7 stream directly. Originally I wrote it to use php streams and filters, but found them to be a bit buggy with larger streams (you can see my work-arounds in the 0.4 branch under src/Streams). Advantages I see over php imap and mailparse: * Handles header decoding/charset/formats for you. No need to worry about the format a header is in, if it's RFC2047 or RFC2231, contains nested comments, email lists, multiple lines, or combinations thereof. Most imap or mailparse users rely on regex patterns to decode parts of a header, but end up ignoring some of the complexities that can arise. * Handles content decoding and charset conversion for you. No need to worry about whether the content is base64 encoded and using WINDOWS-1256 charset encoding (so long as mb\_\* or iconv\* support the charset, or I've identified it as an alias for a supported charset). * Parses messages into a Message object with handy methods like getContent(), getHeader(). * Can handle multiple headers of the same name (unlike mailparse). * Can edit a message by setting headers, overwriting content, changing to/from multipart/alternative or mixed, add/remove attachments, set the message as multipart/signed (signing functionality not included, but the library can convert the message and provide the part of the message that needs to be signed). It was written to be PSR-compliant and tested where possible. In addition to unit testing, a library of 69 (and growing) emails of various types and formats are used (some somewhat repeated admittedly) for functional testing. One thing I'm not terribly pleased with is my dependency injection -- I didn't want to use anything overly-complicated so ended up throwing everything into a single class and creating factory/service classes as needed. I'd love to hear some feedback and maybe find some bugs -- particularly since I'm hoping to release 1.0 in the next few weeks.
I am currently using it in a (WIP) project as I needed a quick drop-in message parser. It does what it says on the can. IIRC the parts of the API was a bit unwieldy, but I don't know exactly what parts. Might be attachment handling. Anyway gratz on your beta and thanks for providing the lib! Sorry for not providing better / more useful feedback at this point, but I sure will once I have time to pick up the project again.
Nice to hear from a current user, thanks for the comment :) Would be great to hear what parts you had trouble with and what could be made better. Definitely hit me up when you get back to your project -- I'm sure there's lots that can be improved!
How did you afford doing this for a year?
I use Auth0
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
There is no alternative. A business card is a way to communicate the idea that following up later via mail or a call is welcome.
all about the bytes ;)
I've working with PHP for 11 years. Most of it in Argentina and the las 4 years in Germany in about 7 different companies. In my experience most of them follow little to non good practices. Something you could do is to try to change things for better, little by little. You'll become a valuable part of your team and it's nice to help other people to get better. Your coworkers might get defensive at first, since most people don't like to change the way they work, but if you have patience and the right arguments to stand for you opinion with time you'll get there Good luck! 
This is what it's like, strap in.
You have now learned that the interview process is a two way process. As you get more skilled and confident you will start to interview them more and more. One of the reasons to avoid getting stuck in a mess like this. Yes parts of the industry is like this, and yes you can definitely find better. Regarding what you should do that is all up to you. You may learn a lot working for this company as well as racking up some impressive stuff to put on your CV (if you manage to modernize the team, dev stack, etc in any way). On the flip side you might burn out while bashing your head against a wall of denial and refusal. Either way I'm sure you would grow from an experience like that, and next time around you will for sure have more demands before signing any contracts. The question is, is this what you want to do for a large period of time? Are you able to discuss this with the team to see if there is any willingness/interest/time to try to change?
My advice is to get experience and help them migrate. There's a reason they hired you hopefully.
I've been working for the same company for more than a decade and once in a while I still bump into PHP files introduced in the early 2000's by at least two generations of teams before me. Some of those files wouldn't be considered good even back then. Not to mention all the code I did myself that I profoundly regret today. And of course most of our code base aren't covered by automated tests. So there's that. The truth is it's really tough to refactor everything into well designed fairly tale code and to keep it that way when we have other real issues to solve. I'm sure there are other companies that already have a good code base that you'd be more excited to work with (it might as well be the majority of them), but maybe you could look forward to improve what exists now instead of going somewhere else. At least there's a lot of room for improvements.
Make yourself valuable and improve things with small changes. Maybe start by centralizing all the passwords into a single config, so you can later move them out of the code repo. 
Welcome to the world of a PHP developer in 2018. Buckle up, Buckaroo. 
That depends on many factors. Companies with new code bases are most likely to be in better shape. Those with older code bases … you already know. I'll echo others in this thread. Go around fixing small things around. Don't say it's badly done. Express the benefits of your changes. 
Sometimes the inline if is what you want. Consider: def foobar(things=None): things = things or {} ... With or even if the caller passes their own empty dictionary (maybe they're trying to backdoor something) it'll be discarded in favor of your own empty dictionary. But replacing it with `things if things is not None else {}` then it'll be used at the cost of a more verbose check, though honestly I tend to not inline these and just use an if block: `if things is None: things = {}` since that reflects what I actually want a little better. That said, [PEP505](https://www.python.org/dev/peps/pep-0505/) proposes None coalescing operators, including `??=` which is what people actually want 99% of the time when they do an inline or. 
Teach them a better way. Leverage the fact that legacy php 5 code is a ticking Tim's bomb and use what you know to sell required improvements so code does either fail or get hacked after 1/1/2019.
Yup, that’s a PHP job for ya, unless the company is new or have insane resources expect your career to be fixing the past
Visually it would be easier for the eye to clearly mark on the slides the pros with (+) and the cons with (-). Currently you have the same arrow for both.
I don't disagree with any of these points. I speak only from my experience (20 years+). If someone wants to get a hold of you, they will. If you want to share contact info, and the other wan't to receive your contact info, you can exchange it. Otherwise, I'd imagine 99.9% of cards (in this dev/tech space) is thrown in the trash. I appreciate your experience and opinion, not saying it's wrong, just expressing my own.
&gt; a library of 69 nice
PHP has been around for a long time. Unfortunately there is a lot of technical debt and legacy code in production. Not much you can do about it other than endure. Make things beter incrementally if you can. Welcome!
its a conspiracy from top down, just use C++ and compile your code... you can even build your own storage db for data, that way its hard for others to know your stuff ;)
Consider this an opportunity grow as an engineer. Any large codebase will have rough (read: legacy) parts. But it sounds like codebase you'll be working on is very backwards. Here's some steps that you (and that company) _need_ to take: - Version control: `git init` that bad boy. - Automated deployments: Look into something like capistrano. If you're just manually copying around files, at least _automate_ the copying. - Testing: Use PHPunit. At the least, build a suite of `curl` commands that validate the code 200's on endpoints. Start building unit and integration testing for _new code_. If you don't have these three things, get them first. Make it very clear to your management that these things provide the same business value as MONTHS of hacking around without them. Devs are expensive. Tooling is not. Leverage it. Good luck, best wishes, it's a long road ahead. 
It sounds pretty much normal to me. lol ... legacy ... Joomla 1.5 was released in 2008, that's nothing. The last PHP project I took over was written during the Y2K scare using Filemaker Pro as the backend database. The best you can do is pull them forward into 2018 standards but yeah, you're either going to have to get used to legacy (I still port people from LISP, PERL and RPG systems) or join a modern shop.
Recommended [https://github.com/socialite-manager/socialite](https://github.com/socialite-manager/socialite)
I was working for a team devloping new applications. SOLID, design patterns, testing, the works. I took an opportunity to work with a much more experienced team with a much larger codebase. It was 6 months of agony. The code was a disaster. There were literally applications that didn't work, and they had NO IDEA. In those months, I learned more than I had in the entire remainder of my career. Refactoring, fixing bugs, and upgrading taught me lessons I had never even thought to learn. After the experience, you can give me a project in a language I don't know, with horrible code, and even worse infrastructure, and I can still work with it. It was the best working experience of my life. I left things better than I found them, and I came away better for it. So you might pull your hair out for a while, but if you can stomach it you will probably come away with invaluable skills. It's not like that everywhere. Get the experience, and when you feel it has lost its value you can move on. 
Composer isn't a build tool. Its package management. An auto-loader is also not a build tool. Gulp and webpack are for JS not PHP. And are not necessary. 
What happens 1/1/2019?
No more security updates I think 
Hi guys and seasoned php professionals, Quick question for you: I am developing a custom php website (app ,if you will). I am looking at options to convert it to a extension and keep it that way instead of running the app entirely. Any way to convert php app (with dependencies and my custom classes) into an extension so that: * Make php load that extension on boot. * Specify configuration constants and run. I understand this might hamper development (and increase the testing cycle in a way), but is it possible? I saw some tools but those aren't that widely discussed and updated. Any words?
This. But also, take ownership of the mess. If it's just code problems then you should be able to help fix things. On the other hand, if it's personnel or organisational issues then you probably should look elsewhere sooner rather than later.
This looks promising! We've been using https://github.com/goetas/to-swift-mime-parser but relying on SwiftMailer messages certainly adds some limitations, even though they are easy to resend.
If you decide to be the driving force behind progressing this codebase and tooling to modern standards, make sure to keep the whole team well informed about this progress (presentations maybe?). You don't want to be the only one understanding these new ways, as it can become quite a burden. As for if you should take this route, I think that it could be a great opportunity for your career, but if the resistance (from management and teammates) will be too big I would reconsider.
I am using it for http://externals.io and I’m very happy with it! (Code: https://github.com/mnapoli/externals) Thank you for your work, dealing with emails is such a pain!
Hey, nothing wrong with Lisp or Perl. ;)
Pay attention to the job description. This is what you will get when wordpress is mentioned or if it sounds like a job description for a web developer. You will most likely encounter this issues at small companies. You will have better luck if job descriptions mentions TDD, unit tests, git, full stack development.
&gt; Composer isn't a build tool. Its package management. &gt; An auto-loader is also not a build tool. While not in its entirety. Compiling the optimized autoloader IS a build part of a build process. &gt; Gulp and webpack are for JS not PHP. And are not necessary. There is sizeable enough fraction of PHP projects that are heavily dependent on JS/CSS. Ignoring this is dishonest.
So true, once you've dealt with some of the worst, picking up well documented and architectured code will be a doddle.
Welcome to the real world, I know there are companies out there whose code and practices do not resemble large piles of mammalian waste product, steaming or otherwise, but it's usually because someone else has already gone through what you're about to go through, and decided to make the world a better place for the next guy. Be that guy, take it slowly, be sensitive to the current staff, be aware that there may be reasons for some of it. If the reason turns out to me 'management', then it's probably worth running away if you can't persuade them that things can be better. Otherwise, be the guy who made it all better. 
&gt; and they plan on starting to update the code in a year or so. Do they really mean this? Try and find out quietly if they have been saying that for the last couple of years ..... :-) 
You say working with teams isn't your forte? Sad to say, you need to play well with others to get places in the world, regardless of whether they're other tech-bods, or the project team, or just the guy who needs a developer. Social skills required, and working with other developers is probably the easiest place to start. Make friends with other contractors, with agencies, etc - I've been offered work by people I've worked with in teams before, when they've had too much to do.
&gt; I’m just after advice really. Is this what the industry is like, or is this a bad egg? Yes, sadly this is very much the normal rather than the exception. You have to remember the vast majority of PHP developers are self taught rather than coming in with a computer science degree. That's not to say self taught automatically === bad code or degree automatically === great code but on the most part PHP is put together by someone with little to no understanding of the larger computer science concepts. They know how to use PHP but don't understand what it's doing 'under the hood' and usually have little to no knowledge about design patterns. They are basically 'coders' rather than 'engineers'. As PHP developers mature they start using some of the modern standards you listed but there is a trail of destruction left behind them and it sounds like you're now working on one of them. Source: I was the same until I did a CS degree and realised just how much knowledge I was missing and realised I had transformed from a script kiddy into a professional architect.
&gt; Damn, after many years I don't really know how to answer this question. Honestly all my cases just found me, never really had to search. Maybe you could tell him how they found you? Phone directory? Google search? Social Media Profiles?
There's a definite benefit to learning the basics, but they have to be good basics. This is just basically bad...
When you need to scale.
*beep beep* Hi, I'm JobsHelperBot, your friendly neighborhood jobs helper bot! My job in life is to help you with your job search but I'm just 315.4 days old and I'm still learning, so please tell me if I screw up. *boop* It looks like you're asking about job search advice. But, I'm only ~15% sure of this. Let me know if I'm wrong! Have you checked out Forbes, LiveCareer, TalentWorks? They've got some great resources: * https://www.forbes.com/sites/karstenstrauss/2017/03/07/job-hunting-tips-for-2017/#794febea5c12 * https://www.livecareer.com/quintessential/15-job-hunting-tips * https://talent.works/automate-your-job-search
True, the direct `or` only makes sense if all valid values are truthy (eg, non-empty string parameters, or non-zero numbers). Python doesn't currently have `??`, but it is in planning: https://www.python.org/dev/peps/pep-0505/
Welcome to the World that has given PHP such a bad reputation :) In most new places there will almost always be legacy code visible to you. Some parts no single person wants to touch because "it works". Depending on your skill level you may just want to tackle that. They want to "update their code in a year or so"? Challenge them, do it now. Refarctor piece by piece - refactoring is a very difficult process where loads of stuff can go wrong.
But that could easily mean a complete rewrite, which for a large app could be very expensive. Why not design a solution that scales with the company as it grows, protecting the initial investment? Some smart decisions early on in architecture goes a long way to building a strong, extensible and flexible foundation that will scale horizontally. This insides the ability to load balance, caching, asynchronous processing, using a scalable database, etc. 
Apply for more jobs, see if you get them. If you get a better job quit, if you don't, then do your best
Found your arch nemesis / wingman
Good design should take that into account without too much extra effort - but picking something because of scalability up front needs to be factored against how long it takes to get to market. If it takes longer to get out there because of scaling, it's entirely possible you'll miss the boat. On the other hand, if the option for scaling takes no additional time, then obviously you make the opposite call. Scalability at its core is a problem of success, if you are successful enough to require scaling, then you are successful enough to spend some time looking back over the architecture. Just look at Facebook, their code was horrific originally, but they got out there and popular before the next social network arrived and took their spot, *then* they built their own PHP interpretter to handle the load, not before. Very few projects are built knowing ahead of time that they are going to require to scale massively, so you shouldn't spend any more time on that than you would on premature optimisation. E.g. I've just seen a company spend three months working on the infrastructure design, deployment processes, CI/CD tooling, all for a notional product, that had to be shelved temporarily because they ran out of budget for it this quarter. No doubt it will be a beautifully designed platform for developers to work within, but making developers happy does not bring in revenue. Personally, I would have spent a few days spinning up AWS CodeStar or similar to get the bare bones in place, and the remaining time on development - then if it had legs once it hit market, deal with making the CI/CD work better later.
Right but I think you just said, that if you can make choices at the start that don't take much extra effort that make the product more scalable down the track, then you should. Right? I think we can agree on that.
I skipped the whole article, because everything is already in the image. I just can't imagine any "exclusive" material written in this article.
PHP 5.6 (last version of PHP 5) is already on life support, having had it's security support extended once already. At the beginning of 2019 security support for PHP 5.6 stops completely. Meaning it will no longer receive security hotfixes. PHP 5.6 installs will become a security issue. And unless you test your code for PHP 7 support and resolve any conflicts, it may not be as simple as just swithing to PHP 7.1/7.2. Check out the [PHP Supported Versions](http://php.net/supported-versions.php) page for more info.
Yep I do!
thanks a lot for everyone who cares or replies this.
1. Meh. OK. Not really a trick. 2. * That's no [exception handler](http://php.net/set_exception_handler)! That's a try-catch block! * It's a trap! Fatal errors are fatal and can't be caught (even via PHP 7's thrown errors) 3. Amazingly 1 simple function is faster than 2 simple functions. This is a micro-optimization tho and not likely to actually affect your application. Go learn how to properly index your DB tables instead. 4. Let's just completely skip over than JSON encoding can't handle many data types (particularly object based ones). Even ignoring that, you can find the types of some of your data changed when you may not expect them to be. Simply saying replace one with the other is naive - they do different things. Overall, a terrible article that's far too light on detail. Not a recommended read. 
I really can't imagine a worse file upload method like this.
Hello,my boss told me I should imitate an website using an opensoure CMS project.But I'm just new there and don't know how to do from scratch. Is there any tutorial about doing this?The boss let me search from the Internet,but I just can't see something about website's imitation as tutorial.
1.Choose a cms. ( something like drupal ) [https://www.drupal.org/home](https://www.drupal.org/home) 2. Learn it 3. Use it to build your website. 4.?? 5.Profit.
If you start going through and fixing this, and there's someone else there to brag on you, it's a fast track to raises and promotions. 
Usually school or college friends. But almost half of my jobs were with just one friend. He did the frontend and I the backend, so it was his contacts and not mine 
Some days ago I heard one said that many people using wordpress with nearly no PHP coding,is that just wordpress? so if I want to learn imitate website,just learn CMS like drupal?
No, seriously, piss off with your shitty blog spam. Your methods of programming are not something that should be taught to anyone 
Please stop these comparison posts, every language got his pro's/cons.
An extension to what? PHP itself?
I prefer using isset() instead of array\_key\_exist(), however pay attention, isset check if a variable exist but return false if a variable or an array element contanin null value. isset() isn't a function, and it is faster than array\_key\_exist(). [https://3v4l.org/BTlDE](https://3v4l.org/BTlDE)
&gt; "Is this what the industry is like?" A lot of it, yeah. In fact, I encountered so much of it that I wrote a book on how to deal with those kinds of codebases: [Modernizing Legacy Applications in PHP](https://leanpub.com/mlaphp).
Everyone here is now scrambling to see if you are the new hire at their office.
This x1000000000
&gt; C++ devs at one company only get up to 1500NOK/hr (~£130) Maybe I’m reading this wrong but...*only*? That’s over a quarter million pounds per year for a 40 hour work week. That seems like an extraordinary amount of money for even a senior developer. 
Most php in the wild is legacy garbage. It was only a few years ago that the community grew up a bit. A lot of old phone is still out there. It's particularly bad for CMS frameworks. WordPress, Drupal, etc, in capable hands can be used to make quick secure sites with testing and automation. They also have the lowest barrier to entry so you will also see a lot of shit out there. Introduce concepts, and push the organization on the correct direction.
That is the top-end. I doubt they would work 40 hours per-week since they are not stacking shelves, but the problems they solve if they are put to good use would easily network out to a multiple of that. If you want to be sick look at CEO pay.
I feel you. When I worked for a company a year so back I lasted a couple of months, the code was atrocious. No tests, html and php mixed together, files.&gt; 8000 LOC, poor practices, code they claimed was OOP, but was just dumped in a class, no such thing as DRY, I could go on, it was the worst code-base I've ever seen. I quit because every day I was coming home with a headache from the mess I was looking at lol. 
I work for a company that has 10 years of legacy PHP and Perl code. There is a large ~100 table database with some tables into the hundreds of millions of records. It had very few indexes and was not normalized (and what few normalized tables existed, there were no foreign constraints). You just have to try and not touch the old stuff, and make a conscious effort to make any new code spotless. Be mindful that old code is probably running on old servers. There are a few minor gotchas such as version 5.4 adding the short array syntax of $array = []; Usually the fixes aren't too severe, but if you are trying to use a bunch of 3rd party libraries they may get you. "Starting to update the code in a year or so" is not going to happen. That's just something you say to woo people. You (and the other programmers) are the ones who are going to make that happen by purposely looking for outdated code that can be replaced rather than patched repeatedly.
This is pretty common, especially of companies that have been around for a while. The landscape is getting better, but their are plenty of legacy practices to go with legacy code. You may have to cut your teeth there and look for a good egg when you can.
I'm working on a Zend 1 legacy code base right now, and refactoring that so migrating to a new framework has taught me a lot. It's a horrible code base, but picking it up and modernizing it has taught me more about applying design patterns than any greenfield project would.
1. Referrals from past clients. 2. Referrals from other industry experts familiar with my work. 3. Organic search traffic for people who have similar problems to ones I've blogged about over the past 3 years. If I had to put a percentage on each, it would break down roughly as: 1. 55% 2. 30% 3. 5% 4. Other: 10%
Yep that's par for the course... start looking for other reasons to enjoy your work besides the code quality!
worked in one company where they dangled that carrot in front of the developers for ages, and had been doing for at least 4 years before I started.
ugh..its all too common. In my experience, the biggest hurdle is buy-in from the non-technical execs, etc. They have a hard time rectifying the up front costs with the benefits after.
PHP extensions are written in C you cant complie PHP code to an extension.
***BURN***
Excellent, very happy to hear that! When I started the project I found it hard to believe no one had built anything to do this nicely. Hopefully not *such* a pain any longer.
I was looking for something like this https://github.com/jimthunderbird/php-to-c-extension
Yes. Create my php classes and then create an extension of those classes. Example: https://github.com/jimthunderbird/php-to-c-extension
Hi ! I have created a new library called Doublit for unit testing. This library can generate test doubles of pretty much any PHP class and make them easy to test in PhpUnit. It is meant to be non restrictive, lightweight and simple to learn and use ! * It can create test doubles of classes, traits or interfaces (or so called mocks). It can also deal with abstract and final classes. * Doubles methods can be tested. It includes everything you might need : counting methods’ calls, testing methods' arguments and changing methods' behaviour (stub). Methods can be public or protected, static, abstract or final (private methods should be tested through public methods). * The library includes other features like naming doubles, creating non instantiated doubles, spies, implementing interfaces, traits and methods, automatic count testing, etc, which you can find out in the documentation. You can find the full documentation here : [getdoublit.com](https://getdoublit.com) I aim of this library is to help to learn and do unit testing easy in PHP. I will appreciate any suggestion to help improving the library or its documentation which is written in my non native english :) Here is the link to the GitHub repository : [https://github.com/gealex/doublit](https://github.com/gealex/doublit) And here the link to Packagist : [https://packagist.org/packages/gealex/doublit](https://packagist.org/packages/gealex/doublit)
I would do one of two things: 1. Try to convince them to upgrade/refactor faster, maybe even a security audit. Being "the new guy" this may take a while. Must haves: Version control (GIT), Semi-automated deployements (so you don't copy the code on FTP), ideally some functional tests for core functionality. Participating in such an upgrade would teach you A LOT! 2. If you are not happy with the answers/speed of #1 - leave. Note that there is no ideal project where the code is always pretty. Most projects are stitched together with duct tape and hope.
You are my hero, but I don’t envy you 
what is your goal / what do you want to achieve with your project as extension source code protection ? or speed ? facebooks hhvm translates PHP to c/c++ but it does as JIT so if you look for sourcecode protection it will probably not work out for you.
Apparently, yes. Most industry are like that and most of old school PHP are narcissist because they can write something that no one understands.
Some of this I'm sure has already been said, but I'll go ahead and say it again... It sounds like the development team already has a plan on when to start refactoeing code. In the meantime, use your fresh perspective and create a list (for yourself only, at first) of all the things you come across that you feel need refactoring. When you note these, assign them a number to designate their priority - 1 to 5 with 1 being ASAP and 5 being eventually. Pay particular attention to dependencies between the items you find. Also, be sure to flag anything that should happen now, like emergent security issues (hard coded passwords, db connections, unsafe parsing of submitted data, as well as implementing vcs (git or svn) with a standardized branching, code review, and merging workflow. Once you have a fairly comprehensive organized list, ask to go over it with your team lead. Try to be professional, without a sky is falling attitude, and just lay out what you've observed and how you think this should be approached over the short and long term. Ensure to highlight how your ideas will mitigate risk and bolster efficiency. It may seem dark, stormy, and chaotic right now, but you have a new unbiased perspective that could prove valuable to your new company. It is one thing to have the knowledge you have of how it should be done, but another to actually be able to be a part of evolving a company to get there. That is where real developers are born.
yeah it was more for a source code protection and then secondarily since entire app is bundled in an extension, hopefully better performance in comparison of reading 20 odd files for every request 
I won’t rehash everything already said. A lot of good advice has already been given. The key is whether or not the organization has the philosophical approach that empowers you, or too much politics that hinder you, in your effort to enjoy the job. Learning good code practice “on the side” during nights and weekends gives you the opportunity to grow unencumbered by the weight of a massive old codebase and the politics of an office that makes money day after day even though “the code sucks.” Some businesses see the value in making incremental changes that will ultimately result in the dev team working less, not more, but to get there is pure cost to the bottom line, so not all companies see the value in refactoring. Many developers employed in such places often don’t want to do good work because it takes effort, or extra effort, and a) they’re happy doing as little as possible on the current system and b) someone like you makes everyone else look bad. My advice is to remain quiet, especially at first, do what they tell you only and study the code and company culture. Get some champions internally who are “on your side” - that being: this codebase is awful and we should work hard to improve it - someone above you ideally. Take notes (never take them home) and suggest special projects (SMART goals) toward that mission you’d like to take on (removing passwords to a config file is a good example). Explain why it’s important to do and give accurate estimates of how long it will take. Keep your resume out there and keep interviewing. Over time you’ll either move up, or find a new job where your approach will be valued.
If you decide to keep the job, create yourself a hobby project where you work with more modern stuff.
This is every job every language. Python, Js, Java, PHP, and even go. I'm at Amazon now and it's really not that different. An developer's true skill isn't how he/she works with a perfect system... Part of being a great developer... Ability to take a pile of crap code and make it into something modern and shiny Ability to influence the people around you and driving consensus.
Yep. Pretty normal. The better the language gets, the more of a mess the developers seem. You'll get used to it, but as you progress in your career and get better jobs, you'll find other things that don't make sense like deployments, or servers. It will always be something, but you will get used to it. Good luck.
"port people" ?
I still have no clue how in the hell he came to that solution. He obviously didn't come up with it on his own, which means he MUST have been searching for a solution to his problem. I'm just dumbfounded. The most basic `Baby's first Python module` shows the usage of `self`
Amazon - really? Surely they have the resources to either ensure code quality or refactor crufty old code? Tell me more. Don't languages like Python and Go lend themselves to cleaner code, to some extent, due to the design of the language?
To port, or porting, is adapting software. You can port a game from Nintendo to Xbox for example, or a LISP app to PHP. 
Sounds like kinf of a nightmare situation code-wise. If an employer has enough $$$ to hire someone full-time, and their web site is *still* running Joomla 1.5, that means they purposely didn't update their core for 6.5 years now (so far)...have missed the entire 2.5 series, and the majority of the 3.x series. There's, of course, no clear / easy migration path to get this current. Most likely, it's because they've hacked the core and/or have a bazillion also-outdated extensions (possibly also hack-customized) doing god knows what. In these cases (when the goal is updating to the current Joomla release), I usually feel like scrapping the entire site &amp; rebuilding from scratch works best. Good luck!
Apart from OOP and some basic algorithms which parts of a CS degree are relevant to programming in a scripting language?
I started my last job not knowing that I would end up having to maintain a Drupal 6/PHP 5.3 site for three years. I only recently left that job, so the stack and code was woefully out-of-date even when I started. From my experience, the best advice I can give is: Try to be the change you want to see in the world. You might have to be tactful in order to not ruffle the feathers of longer-time employees responsible for the state of things, however. It will be crucial for you to find out if your employer is willing to allow you enough agency to make things better. If they do not intend to do so, walk away now. 
Proxy pass to S3 I believe is what you should google.
1. If it's a one time download link, just store a quick cache and clear it once it's been visited once. For example you could write a cache with some key like \`my-file-download:$hash\` and have the contents just contain some info about the user allowed to visit and the URL of the file. 2. Don't redirect, programmatically fetch the file contents and stream it to the user as a download. Then they'll just see your download link. If you're not familiar with this concept it's pretty easy just do some searching around. If you're using a framework many of them will provide helpers to get you going on this.
I assume you have a route for /{id}/download that is linked to a controller method that validates the request, so why don't you stream the file directly from that endpoint if the validation is successful? You can use something like Flysystem (http://flysystem.thephpleague.com/docs/) to handle the fetching of the file from S3.
It takes about 2 hours a day on average, so time was not a problem. The most important was to believe this direction, to see education and open-source as my mission. That took me 4 years to realize.
Yep. Learning best practices is great. Learning why they exist is in the first place is even better.
I would stay, help them clean up their codebase and then move on. You will learn a ton, especially as this is your first PHP job.
I think that a one-time download link that allows a single click is problematic in that if the download fails for some reason the user will be unable to retry and require manual intervention by a site administrator, additionally it would require that you store download link mappings. You could instead provide time-limited download links direct from S3 which would remove the need for storing download link mappings *and* allow for re-downloading if the initial download fails for whatever reason. For example, a user clicks on "Download" -&gt; Your make a request to AWS to [create a signed URL](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-signed-urls.html#private-content-how-signed-urls-work) with an expiry of ...5 minutes? 10 minutes? 30 minutes... -&gt; redirect user to the signed download URL. The disadvantage of this approach is that it marries your application to AWS, so if you're looking to build an application with a swappable storage layer this might not be a valid option.
Why not configure S3 ACLs correctly then generate signed URLs which the /{id}/download controller can redirect to? [https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/s3-example-presigned-urls.html](https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/s3-example-presigned-urls.html)
if you have access to the vhost (in apache), ProxyPass is the more scalable way. ProxyPass /a-non-existing-folder/ http://yourbucket.s3.amazonaws.com/a-folder-on-s3-with-your-video/ 
&gt;Apart from OOP and some basic algorithms which parts of a CS degree are relevant to programming in a scripting language? All of it. As mentioned in my post..... &gt; They know how to use PHP but don't understand what it's doing 'under the hood' If you're only ever going to be installing a plugin on a Wordpress site or creating basic websites where you need to get an array/object from a database then yes you can get through and make a perfectly good living. Being able to understand what PHP functions are doing in memory or with the CPU, what data structures to use and why to use them, what design patterns to use etc, this is the difference as mentioned about between a 'coder' and an 'engineer'. The gap in learning/skill set becomes even more apparent when someone who has just taught themselves to 'use PHP' switch to another language, they have little understanding of how the new language works because they have simply learnt PHP syntax rather than programming theory. I know, I was one of these people. That's why when you search for jobs (on the most part) jobs for 'computer engineer' or 'software architect' pay much higher than something like 'PHP developer'. The language is irrelevant, it's the skill set of how to apply CS theorems is where the value is at.
Yep there's bad code in Amazon too. No matter what level of development you're doing, there's always going to be sacrifices made in the name of making deadlines and pushing our results. There are times when we're aware of it, because most of us know bad code when we see it in our own code or during code reviews. We discuss it, put in comment for why we're hardcoding/not wrapping/lowering standards for this block/method/class, add a TODO comment, create tickets to make up for it and put it in the backlog. There are also plenty of times (especially when it's a small team, or when a junior developer approved something below our standard) when we let bad code slip pass. Also when you discover bad code, do you fix it? consider that doing so will increase the scope of your task, adding unplanned points. It means pulling more resources from other developers and testers in the form of code review, discussions, testing, churns... etc. If the existing code is ugly but works, does that justify the unplanned resources right this moment? creating an additional task to fix it and adding it to backlog means you're giving up resources that can be used elsewhere. So all of the above are just some examples of how we both contribute to AND persists bad code. It happens everywhere, Amazon, Google, Facebook, million dollar startups... Go and Python can absolutely have bad code, maybe less, but they still do.
\&gt; The job has almost none of that. There are hardcoded passwords and &gt;database connections throughout the code, mysql\_connect function calls &gt;(gasp) and also some hardcoded database connections to prod databases, &gt;no software tests, no proper version control (incomplete is more the word, &gt;for example “clone the repo then FTP into this server and download these &gt;other files that aren’t included in the repo for some reason”). It’s &gt;maintaining a lot of legacy code, mainly Joomla (VERSION 1.5) and some &gt;hacked together MVC patterned code. The company know, and they plan &gt;on starting to update the code in a year or so. you could of just said "typical php shop"
Seeing as those AWS URLs are only valid for a limited amount of time, and you'd have to store the files _somewhere_ anyway, returning a url to a different provider later if you decide to drop AWS shouldn't be too much work. It's not like any external resource will have the S3 link for use.
this is sadly pretty normal...id say at least half the php jobs ive had have been cleaning up some level of disaster app
i have been doing php 19 years...yeah this is very typical...things are getting better since frameworks have been in common use now about 15 years , so lately more of the "php messes" ive seen have at least been using a framework or drupal/wrordpress type thing
wonderful advice!!! seriously listen to this guy
i had a project that we had to roll forward from php4 to 5.6 lol
Why would you port working systems from LISP or PERL to PHP ?!
congratulations you are now working on a legacy codebase. this is what most of software development is and you would do well to learn how to manage it. 
you will probably need this [https://leanpub.com/mlaphp](https://leanpub.com/mlaphp)
Who said they're working? By the time I get called in, it's because the older software is limiting the company growth. I had a client earlier this year that's LISP powered HR system wouldn't save changes to employee salary records. Turned out that the software was trying to write to an LPT1 that'd be disconnected for a decade but the error log had finally maxed out. The technical fix? Delete the error log, that should do it for another few years but ... porting them to an HR system that wasn't written in the 70's would be a great idea as well.
So there is a rise of blockchain applications, block chain will be the new future for sure. With that being said, would it matter what programming language you decide to use when it comes to developing a block chain project. I saw this one project called "Proof of existence". It was made with node js, and to be honest i don't f\*\*\* with node js. [https://poex.io/](https://poex.io/) Would a developer be able to use a framework like laravel to develop something blockchain related ? 
Maybe not justified, but I did make a small library where I was being opinionated about the constructor. I still created an interface, but in the consuming class I typed hinted the abstract class instead of the interface. Meaning, you could write your own implementation, but you have to make sure that you are extending the abstract which inherently implemented the interface.
That's a good friend.
I've still yet to see anything convincing that indicates that block chain will be the future
Not so much. He always accepts the jobs first without consulting me. He can't do backend so a bit of an emotional blackmail hahahaha
Everything would be better if more people were like you!
Hello, my new blog post is up: https://jtreminio.com/blog/developing-at-full-speed-with-xdebug
Depends on how you mean by "develop something". It's possible to use PHP to execute the [binaries for blockchain integration](https://www.ethereum.org/cli) (think imagemagick with exec() or system()) in order to read and write to the distributed ledger. Definitely doable, but is whether it's advised I have no clue. But. If you wanted to create your own blockchain implementation with PHP, that'd be a tall order, I imagine. 
So as far as block chain implementation, what language should i focus on ?
How could it not be the future ? 
I haven't seen a practical use case where it's the best option available. Even its main usage, cryptocurrency, is a worse option to existing methods of currency. On top of that, privacy laws such as the GDPR put limitations on what you can do with Blockchain without missing the whole point of it. I just don't see how it can be the future when people still haven't found a use case where it's the best option available. It's a solution that, over a decade later, is still searching for a problem
And you can even install it through the auto-updater, totally overdue that this is finally possible.
Why do you think blockchain is the future? It's basically a slow database for people who don't trust each other. I mean, if you're trying to create a giant distributed ledger for some variation of a transaction, like real estate deeds or vehicle titles, more power to you and God bless -- but good luck actually monetizing it. 
Honestly, were it me, I'd use Java or Python. But really, any language that can compile into binary that has access to strong encryption should suffice. Looking deeper though, I'm not really seeing anything that would \*prevent\* PHP from being used. Take a look at: [https://hackernoon.com/learn-blockchains-by-building-one-117428612f46](https://hackernoon.com/learn-blockchains-by-building-one-117428612f46) [https://medium.com/@ssaurel/create-your-own-blockchain-in-30-minutes-dbde3293b390](https://medium.com/@ssaurel/create-your-own-blockchain-in-30-minutes-dbde3293b390) While simple and basic implementations of a Blockchain, there's not really anything in there that would specifically \*preclude\* PHP as a candidate (though being interpreted REALLY hurts the case since speed is a main requirement) So may have been wrong to say it was a tall order. Probably better to say there are more effective options for it. 
Fabulous :-)
I'm so looking for the day that blockchain fad is over.
Blockchain applications are like any other piece of software. You send it input, it does something with the input, it sends an output. If you're looking to get into "dapps", Ethereum probably has the best documentation available, if not the only actually competent documentation. And it's mostly javascript based. 
It's ok. Next version you might very well be downloading it manually again. It's kinda hit and miss when it comes to PHPStorm upgrades.
The Jetbrains Toolbox could update and install all your JetBrains tools for quite some time, couldn't it? I've used that exclusively for installing PHPStorm and PyCharm the last year or two.
Originally I used a different library back when I was fetching emails using IMAP: https://github.com/mnapoli/imapi Maybe I could switch IMAPI to using your library at some point too.
Does PhpStorm have a built-in sftp tool with file browser? I still use Coda2 for that reason. Not trying to get into a whole DevOps conversation though. But hey, if you want to share how PhpStorm integrates with your deployments I'd be interested. 
&gt;And you can even install it through the auto-updater, totally overdue that this is finally possible. Where is this option I can't find it?
It has a Deployment menu which you can setup to use sftp. Upon telling it to deploy it will upload to that location. It also has tools to compare your local files to those on the server as well as autoupload on changes. It isn't often that I have to use sftp for that sort of thing, but it comes in handy every so often.
And as a bonus, you can trigger a deployment when committing, so it'll only deploy the changed files. Great timesaver for those environments where the whole devops thing hasn't really landed yet.
Help -&gt; Check for Updates. Before it would only release minor updates and I would always have to manually download and extract the files into your current directory like it's 1999.
https://www.jetbrains.com/help/phpstorm/remote-host-tool-window.html
I might be mistaken but I think the behavior has not changed in years, it always used to be that patches were downloaded via PHPStorm directly but not major updates (i.e. PHPStorm 2018.1 -&gt; 2018.2).
I have added a barebones example for you to test this out: https://github.com/jtreminio/blog/tree/master/developing-at-full-speed-with-xdebug Just clone the repo and run the `init` inside.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [jtreminio/blog/.../**developing-at-full-speed-with-xdebug** (master → ebccb0f)](https://github.com/jtreminio/blog/tree/ebccb0fdf10d193c295b133a9012182023924b24/developing-at-full-speed-with-xdebug) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e3b4h11.)
Yeah, I looked into it before but I could not be bothered to install some application which only exists to update one other application on my system. It's just incredibly pointless and they could have just created an official PPA and let me update / install all their software via apt instead of developing some proprietary solution like most other companies do. Updating via the application itself is also fine by me, though.
My favorite feature `Custom postfix completion templates`
Is "blockchain" the new "webscale"?
So I do a lot of "cowboy coding" for older sites, either saving directly on the server, or doing a sync. Looking over the docs and video tutorials I'm unclear about a key part- do I have to download an entire site (while allowing for excluded directories) to do this deployment, or can I just download one file at a time? Thanks for your help. 
Hi! Thanks for advices!
Also, `Improved SQL Injections` ;)
For now, thanks to all those who have commented, both positive and especially the negative ones because they allow us to improve!
For my workflow it would be better if it switched environments when you start debugging in the IDE. 
I held on to Coda for way too long. Give phpStorm a try with an open mind. You might like it.
Interesting. I'm going to come back, read it and dig into it later tonight but one thought I did have. &gt; Docker has a special hostname, host.docker.internal that points to the host machine. Unfortunately this only works on Windows and MacOS, Docker on Linux does not have this feature. I'm curious, and pretty sure, this is because Windows and macOS both run in a VM-like environment whereas on Linux it's in it's native environment.
You'd download the entire site once. After that it will just sync the changes. But really fellow PHP coder, checkout out valet, if you're not on windows that is. It really is dead simple to set up a local environment complete with SSL cert. :)
Maybe for AI and ML but not for your average CRUD web application. There are many excellent senior software engineers in web development who come from a humanities background and never studied CS. Check out David Heinemeier Hansson's piece on Ruby programmers as writers. Unless you're doing systems programming most of what you learn in CS is irrelevant (compilers, os, building a language from scratch), especially if PHP is your focus. Why do you even need to think about memory management if you're using a scripting language? 
Clever idea, I love it, had the same problem already in the past! :)
Ever since I updated this morning, code completion takes forever to suggest relevant class names which haven't been imported (\`use ClassName\`) into the current file yet. I've tried invalidating caches already.
But how do you "port people"?
Unsure if IDE can connect to current browser session and set a cookie.
I think you know.
http://www.pomm-project.org/ is doing that, and a whole lot more. Performance is incredible. It's a data mapper tough, not an ORM.
I imagine you might be able to pull this off as a trio of Atlas [TableEvents](http://atlasphp.io/cassini/table/events.html), via `modifySelectedRow()`, `modifyInsertRow()`, and `modifyUpdateRow()`. In short: decode the column value in modifySelectedRow() for reads, and bind an encoded value as part of the insert/update query object for writes. If you're interested I can put together a short example.
Most debuggers can trigger a new browser window with a query param which is suspect you could use rather than a cookie ? 
And if sftp is a make-or-break perhaps having it with Filezilla is enough for oyu to move text editors?
Uhg devops. I waste so much time trying to figure out modern devops. I work on OS X. Tried Docker, Vagrant, haven't got in the habit. Stillf all back on MAMP. Is Valet Laravel only? I appreciate the suggestions. 
Have you used Pomm in many projects (or even just one big project)? I've been really interested in it since I first saw it posted here, but have never taken the plunge and started a legit work project. It ticks all the boxes for me - doesn't pretend tuples are objects, understands that projections are real data, not just incomplete objects, doesn't pretend that choice of RDBMS is an implementation detail that can be abstracted away, understands that making the DB do heavy-lifting with data is not a dirty hack but actually the natural order of things... But it'd be good to hear some success stories from serious projects too.
Yeah that's kind of what I'm wondering if I'm doing. Were there any specific challenges you remember when you switched, any specific learning curves? Or is PhpStorm just have everything and more?
At first, to me it was all referrals, then I took some [SEO courses](https://www.udemy.com/rank-local-business-websites/), those help a lot to get traffic to your website and get more work from online source, not only organic, but from citation sites, related sites, etc. There are some sites also where you can [offer your services as freelancer](https://www.workana.com/) and get more work.
Valet is hardly devops. :) Valet is an order of magnitude simpler than any container system. Checkout https://laravel.com/docs/5.6/valet Out of the box it supports: * Laravel * Lumen * Bedrock * CakePHP 3 * Concrete5 * Contao * Craft * Drupal * Jigsaw * Joomla * Katana * Kirby * Magento * OctoberCMS * Sculpin * Slim * Statamic * Static HTML * Symfony * WordPress * Zend You'll have it up and running in 5 minutes. If all your projects are under one folder, you run valet park in that folder, now all your projects can be loaded via &lt;foldername&gt;.dev on port 80 (or https if you need it with valet secure) 
Awesome, thanks. I guess I would have just dismissed this as a Laravel-only tool. 
I’ve been using sublime since 2014, is it worth migrating to PHP Storm? 
Sublime is text editor, PHPStorm is IDE.
100% yes 
same issue here
Explain please :D
I'm able to update major versions just fine. Did this with two machines. I think the issue is that if you're not at the most recent release (patch, whatever) then it cannot be done through auto update. 
That's like asking if Word is better than notepad. Of course migrate today !
Nice but I prefer this approach https://www.jetbrains.com/help/phpstorm/configuring-xdebug.html (Scroll down to Configuring Xdebug for using in the On-Demand mode) It essentially loads the php.ini that has xdebug enabled when you click the debug icon
Nice , a better? alternative is https://www.jetbrains.com/help/phpstorm/configuring-xdebug.html#on_demand_mode If you have phpstorm
I have tried everything to get my setup to work with Xdebug (I run Windows locally and my remote Docker Machine is running Linux) But I've learned a few new things reading this, so I will have to go back and try it again and see if I can get it up and running. 
If you have phpstorm look at this, on demand xdebug. https://www.jetbrains.com/help/phpstorm/configuring-xdebug.html#on_demand_mode
This page could not be found! 
Ahh wait ill repost the link 
It was a great read!
If you’re more than one version behind the update (so can’t auto update), you can click “ignore” on each update until you’re only one behind. Then one by one remove the updates you ignored from the ignore list in preferences and you can auto update all the way. 
I love the feature where it will give a warning if you use a function from an extension that is not listed as a requirement in your composer file. I'm going to have to load up a bunch of libraries I maintain and double check that their dependencies are properly documented now. 
And you can go into sub folders and mark them as subdomains too. So: /development /project /order-system /payment-system /secret-sauce-system can all be tagged as orders.project.test, payments.project.test, and secret-sauce.project.test (also, don't use .dev anymore... you could have issues now that .dev is a real tld, owned by google) Valet is dead simple to set up and use, as the other poster said. My iMac is too old to run native docker and I hate having to use vagrent etc. This was a simple way of setting up my projects and not needing to monkey with Nginx or Apache, or my hosts file...
Sounds like a normal project from the old days. If you stay there (worth it if there's good pay / good co-workers), you should take it one step at a time. Start by fixing Git Repo, then centralize the config, then fix the worst parts of the codebase, slowly making your job better.
For me on fedora it can't even properly gain sudo access to install the command line launcher. I could see why auto updating could be an issue.
I'm not sure about that. All I know is that for a awesome piece of software in general the update process almost always just sucks. It's always a moment of adventure whether it will update just fine, needs a manual download, or just nukes my settings whenever it feels like it.
I'm not sure I understand the question
I mean what can be the best article about php that you wish you'll find this week
Shopify 
Certainly not one advocating the singleton pattern
If you guys find the upgrade process too much with a manual download, JetBrains offers this tool for managing upgrades/versions of their tools: https://www.jetbrains.com/toolbox/app/
It's in the bullets of the announcement. My guess is that it means the inspector has been detection of coding patterns that can lead to SQL injections.
I agree with this. It's harder for non comp-sci ish people to understand, so it takes some years in it to get a grasp of it, though, and with so many non-comp-sci typed people picking it up for open-source (among various other reasons) it's hard for them to get a full grasp of this until it's at the time where they need to learn it. If PHP devs could ALL adopt an approach like this, we'd be able to easily bridge the gap between the other various languages due to OOP. My own opinion of course, but these OOP frameworks across languages seem to have somewhat of a way to "once you learn one it's not hard to pick up the others". In my mind that is one of the key benefits to knowing how to do it at a OO level.
In this day and age, no news could be good news.
"How not to post stupid shit in /r/php"
The social sharing icons cover the first 2-3 words over every line of text, for about 17 lines at a time, on my machine.
IDEs, just like linters, reduce the amount of mistakes you make dramatically. Also they make your life easier overall with many convenient tools and functionalities. So yes you should at least try PhpStorm. I bet you will have a blast :)
How do you think in OOP all the time though? Whenever I think about writing a process it always seems to execute top down in a synchronous manner. Of course usually PHP for my use has been primarily for DB interface/templating/possibly routing. I'm particularly struggling in coding immediately before thinking so I'm working on that. What happens is I start well, have clean code/a direction, then it just goes to hell as some small errors appear and it piles on/becomes worse. Eventually I produce something that works but man is it bad/not ideal
&gt;How do you think in OOP all the time though? I think it just comes with years of experience in design practices. Top down is fun, and can build your innovation however you still have to put it into practical application principals. When I first started developing I was all about the "big picture" rather than the smaller things needed to achieve it. Now with *some* years of experience in it, I've turned that mindset around. I've had people (in my jobs) hound me to make sure i'm looking at the little chunks needed. It really does help out in the long run. &gt; What happens is I start well, have clean code/a direction, then it just goes to hell as some small errors appear and it piles on/becomes worse. These OO design frameworks help you with that for sure. They've helped scope my way of thinking into more of an OO way. I'd suggest you pick one up and play around with it, and I believe it can help your way of thinking move more OO a lot. I only know about the ones for PHP, and am a little biased towards one framework in particular ([Laravel](https://laravel.com/)) but it's turned me into more of a well-rounded dev for sure. &gt;Should say ".. ~~without~~ knowing it's already solved" Agreed. It is painful, but I like to think there's always room for improvement. I guess that's what keeps me motivated to learn more.
&gt; I've had people (in my jobs) hound me to make sure i'm looking at the little chunks needed. It really does help out in the long run. Yeah currently I'm pressed for time usually. I think it's funny when non-developers scope out time for you to complete a task. Then yeah becomes tech debt, stuff to fix later. I did start to use Laravel but I still think/work with out an MVC at the moment. It is nice to wrap things like the models rather than writing direct SQL queries and the router is nice. Although I think I'm missing the OOP aspect which I was having trouble passing data between is it methods the public functions, particularly $this. I don't know, it's tough to get used to using something "in production" I guess vs. learning it initially while still stuck just writing scratch PHP.
Laravel Eloquent ORM has some helpers with this. [Eloquent ORM](https://laravel.com/docs/5.6/eloquent). I've just recently started using it for API dev, and it's helped out a lot. Look into their API dev part for the ways to abstract objects for your various needs. 
&gt;Although I think I'm missing the OOP aspect which I was having trouble passing data between is it methods the public functions, particularly $this. That's just time in the language and what it allows you to use. In any of the OOP methods you still a good base knowledge of PHP to fully utilize it to it's potential. Using the models in Laravel has been a blast, and has made my code so much nicer and easier to maintain. I think there's a way in a package called "passport" to handle the cors issue by storing callbacks, but i'm not fully sure just yet because i mainly build API consumers. Currently moving to using Laravel as an API for all of the applications in an ecosystem, and the front end using React/Angular/Vue, but i'm more of a backend php dev so it's taking me a bit. The in production part really comes with time (at least it did to me). There's so much tech behind it all.
&gt;React/Angular/Vue Haha good luck with that. React is something but Angular oh man, all three?! Damn
Lol, thankfully I just need to figure out which one I want to move forward with, but not all three at the same time. Now thinking about someone who needs to know how to use all 3... they'd be worth some money. 
I don't know if it's true but I'm under the impression the ease of learning/adoption is Angular/React/Vue. I've tried all three myself and Vue is definitely much smaller/easier to grasp than the other two. But from the hour crash courses I tried out, it makes sense when you're walked through it and you're not exposed to all of the capabilities, but man... you really have to use it everyday for it to sync in. The few things that translate like interpolation/routing, otherwise I can't even build a react/angular app if I tried right now from memory haha. Have to hit up that hour crash course again. Oh well, good luck to you
I've used Vue mainly. It's easier for my brain for right now. lol Some of the apps i've worked with in Angular have been in job settings where they say "update this value to this" - okay - a monkey can use find/replace easy enough. I need to learn more about all of them in general, but you're right about needing to use it all the time to get it to really sink in. Good luck to you as well! Nice chatting with you.
thanks for the update
It's always been able to update if you've got the previous version. But yeah, it's a crappy system.
I hope they've enabled again the right click on file &gt; FTP upload to "server name"
Love the icon changes, now it's much more simple and easier to my eyes.
It seems perfectly possible using commands: https://stackoverflow.com/a/43842988/5865844
I read somewhere that one can try the early access version indefinitely. I guess this is the EAP that was available a couple weeks back?
 Doctrine DBAL/ORM supports this out of the box. https://www.doctrine-project.org/projects/doctrine-dbal/en/2.7/reference/types.html#json
I've never quite got my head around how factories are used in PHP. The theory and examples are okay, but in practice I get the impression that factories are used in many libraries to solve a different problem to the one used in most examples. I just can't seem to square the theory with how I see it used in practice. What could I be missing? 
Thanks for the heads up! 
Yep!
Im using Valet+, a fork from Laravel Valet. It offers a lot more options :) [https://github.com/weprovide/valet-plus](https://github.com/weprovide/valet-plus)
The database support is nice, do you know how often they merge upstream changes?
Lost me on the first (anti) pattern.
No post date... Please add a date of when this was posted.
1. Singleton -&gt; stop reading.
Umm why ?
Generics landing in a stable PHP version
&gt; Depending on how you have PHP setup, curl may have trouble with the secure HTTPS connection. If that’s the case you can bypass it with curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false). That's just poor advice.
Your favorite framework's IoC container is probably built upon singleton. I don't know why people keep calling it an anti-pattern. If used right, it's good. Just like all of them. If you shove it in every object that you have then you are a clown. Doesn't mean the pattern or rather the idea behind it is fundamentally flawed, like your half-assed comment implies. 
if you had a monthly subscription (like me) and got a message that you already have an active one, just switch to annual using the link in your account page, the discount will be applied. took me a few minutes to figure this out...
&gt;Help -&gt; Check for Updates. Before it would only release minor updates and I would always have to manually download and extract the files into your current directory like it's 1999. Doesn't seem to work correctly (at all?) for me on Elementary OS (based on Ubuntu 16.04)
&gt;but not for your average CRUD web application Yep that's what I said above..... &gt;If you're only ever going to be installing a plugin on a Wordpress site or creating basic websites where you need to get an array/object from a database then yes you can get through and make a perfectly good living The difference between a 'developer' and an 'engineer' is huge. &gt;There are many excellent senior software engineers in web development who come from a humanities background and never studied CS Yep I said that in my post above &gt;That's not to say self taught automatically === bad code or degree automatically === great code People can fill that information gap by researching but most don't, they know enough to update a database and that will do them. &gt;Why do you even need to think about memory management if you're using a scripting language? Again if you're just installing plugins on Wordpress you don't. When you're working with an finical API handling million+ requests per second then the smaller lower level implementation details start to matter..... which goes back to my point the company I currently work for wouldn't hire a 'PHP developer' for this kind of work instead look for a 'computer engineer' or 'software architect' the language is very much irrelevant
Hey thank you. I'll fix is soon. 
Factories are bit difficult to understand where you can use the. I'll say a practial example can be. When you have to make an object according to some if conditions, (Like make this object if this happens, make this object of this happens. and all the claases that will instantiate objects share same interface,) then rather then floating your if conditions here and there. its better to encapsulate these if conditions in a factory. So did you understand now ?
Do you know your favorite frameworks IOC container is based on singleton pattern. I dont know why people are so againt singleton pattern.
Haha thats not true. What happened dude ?
&gt; I dont know why people are so againt singleton pattern. Then you should find a new job 
When you look at examples like the one in posted article, they usually tend to simplify the factory pattern quite a bit. It maybe hard to grasp the usefulness of the pattern entirely, since the pattern is used to address several distinct concerns. Examples, like the one in the article, only tend to focus on one of the concerns for the sake of simplicity. In short, you can think of the factory pattern as simply delegating the instantiation of classes to separate methods. This pattern, however, has multiple use cases. On top of my head, I can list four separate concerns that factories can be used to address: * Like in the example, a factory can be used to instatiate different objects based on parameters. Typically, you may have a factory method that takes some parameters and has a return type of an interface. The purpose of this kind of factory is to facilitate polymorphism so that you can, for example, have a method `getDog($breed)`, which has return type of interface `Dog`, but the actual implementation for different breed´s is separated to different classes like `class Bulldog` and `class Terrier`. * A factory can also help facilitating creation of complex classes. For a real life example, you can look at Zend Diactoros library, which has a class `ServerRequest`. The class itself is very simple, but it takes a lot of parameters in the constructor. To help in creation of this class, the library also provides a class `ServerRequestFactory`, which deals with the complex logic of detecting the appropriate constructor parameters from PHP globals like `$_SERVER`. * A third and slightly simpler use case is to provide alternative constructors to classes. PHP, in particular, does not allow function overloading, so adding static methods for instatiating a class from different kinds of parameters may make it easier to use the class in common use cases. For example, if you had a class `List` which would normally take an array in constructor, but you also oftern deal with comma separated strings as lists, so you might also add a static factory method like `createFromCommaSeparateString($string)`. * A fourth and quite a bit more complex use case is to help with depedency injection and reducing hard coupling. This use case is quite often omitted by examples, because understanding it requires at least a rudimentary idea of what dependency injection is and why hard coupling is bad. Essentially, instead of writing `$foo = new FooBar()`, in a class, this allows you to provide a factory object to the class, so that you can call `$foo = $this-&gt;fooBarFactory-&gt;createNew()` instead. This way, the class doesn't need to depend on a concrete implementation of a specific class, but instead the factory can return anything that simply implements the correct interface. This can particularly help with testing, as it allows mocking over concrete implementations. I'm not sure if this clarifies the factory pattern at all or simple causes more confusion. The factory pattern, however, is quite useful pattern with number of different use cases. To cover all of them in simple examples is not quite straightforward, so I'm not surprised if it's hard to get your head around it.
[Phalcon](https://phalconphp.com/en/) is a framework that does just that. It's written in C and gives you access to various classes in PHP. To convert PHP to C sounds like a good idea, but to be honest, I doubt it will work unless you know (or are willing to learn) C.
Haha that's what you think
Is the JetBrains Php IDE really that worth it?
If that’s the best argument you have, we are done here. Go find somewhere else to source ideas for your blog spam
Best thing that happened to PHP after composer.
Mine expires almost half a year from now; is it possible to renew in advance?
Yes. With all the different inspections it offers for PHP Code (coupled with EA Extended), I can honestly say that it has helped me become a better programmer. It has also helped me to reduce the number of bugs in my code quite significantly.
Sometimes is tricky to know how the company is gonna be without checking the code. In my current company when I had the interview they asked me about all the best practices (SOLID, experience with frameworks, Code Review, versioning, PSR standards and so on). Also the interview got really technical, I would say it was the hardest interview I've had so far. When I finally started here the code was completely different of what they described. It is the worst code I've worked with so far. There is no separation of concerns, classes with +5k lines of code, there are HTML views stored in tables, singleton everywhere, no tests, etc, any weird kind of thing you can imagine. Also we use all built in house tools. We have our own github, our own jira, own wiki, etc, but worse and without documentation. I am not allowed to interview developers anymore because I am "to honest" about the code quality and I scare devs away. I believe that a developer should be aware of what kind of code is here and be prepared for it in case they wants to join the company.
Thanks for the feedback!
&gt;If your current subscription ends in less than 12 months, you can use this special offer and add another year to your subscription at 50% off the original 1st year price. So, you win even if it's your 3rd year! 
yes exactly, but the app written in Phalcon cant be converted to C (or an extension) right?
&gt; How do you think in OOP all the time though? Whenever I think about writing a process it always seems to execute top down in a synchronous manner. what do you mean by synchronous? OOP and sync or async execution are not really related
Sadly only for personal licenses, still a good deal though.
&gt; Your favorite framework's IoC container is probably built upon singleton no it's not, they havent been for quite a while now...
Thanks for the reply! :)
It already is a PHP extension. Not sure if they programmed it in C or in PHP and then converted it to C.
I know when singleton pattern isn't harmful, but what would be the case of php class that needs to assure its single instance? To me sigleton pattern for high level languages always looked like needlesly defensive programming that is exploited for its global access and not security.
Don't use Magento 2 OMFG It's a nightmare to maintain and customize.
Step1: Use Symfony Step2: Build lots of services and manage their dependency injection Step3: Unit test all the services Step4: Refactor with factories because you need them to unit test correctly Step5: Realize only 3 factories are needed out of 100 services.
Hey. Can you talk politely? I don't want to do an argument. Go get a life.
I picked up web development about 4 years ago, we started a business and needed a website so I just dove into it and haven't let go since, safe to say I love what I do. The thing is, I read a lot and implement best practices whenever I can but I'm more caught up in the workflow that I just work stupid. I never been a part of a team that works effectively with modern tools or frameworks. For example: I use Wordpress with a custom template I made but I don't use Git for version control yet. I'm using PHPStorm (which is awesome) but I know I'm not utilizing all of it's capabilities, whenever I create a feature or tweak some front end appearance I just go ahead and sync each file with the remote deployment, which is time consuming and prone to bugs. More than that, I'm doing PHP the procedural way and I pretty much didn't encounter any barriers/problems which I know hold me back from learning to do it object oriented until recently with multiple function and variable names that I know using classes would help (again, no experience what so ever doing that). I also heard by the little I saw about things like composer that are like NPM ( I did experiment with Node and all that stuff for a fraction). I didn't made the transition to PHP7 also which I know I need to. I always feel there's tools and ways I could do better but I'm just stuck. I'm really looking for any information on where and what to look to make my work more effective, automated and get better in doing it.
&gt;I’m just after advice really. Is this what the industry is like, or is this a bad egg? Your experience can happen to anyone, in all countries and in any industry regardless of programming language. There are programming sweatshops in 3rd world countries churning out endless Android and iOS apps using better development tools and having better coding hygiene than $500/hour consultants from top 100 tech firms developing multi-million dollar critical infrastructure projects for public authorities, hospitals, banks, etc. Just because you are wearing an expensive suit doesn't mean you are a good project manager or programmer.
Yep. It's the gold standard.
What about the 2nd and 3rd+ year license? If I get PHPStorm which has a normal pricing of € 89 / € 71 / € 53, what will I pay next year? I assume it should be € 71. Or will I have to pay the €89 next year?
71, because it's your second year
Because singleton is almost always used wrong. Runtime API (well, there is none in PHP) - that could be a singleton, maybe, because there will never be two runtimes in a single process. Database, HTTP request/response, DI container - all of those, when used as a singleton, are wrong.
Nice. However.. Their pricing is completely borked. e.g I updated the PHPStorm at the end of april... and if I want to do an upgrade to all pack right now. They are offering me just 39€ of additional discount. WTH? 89€/12\*4 is not 39€!
It is not anti-pattern, it's just most abused pattern ever and the article should highlight that.
Personal attacks, clearly you are the better 
Oh PHPStorm in itself is the new defacto for PHP development. The other products are as good too. I love Jetbrains! By the way, there is an early-access program you can use to use their products for free. If you download their toolbox it should show a way to access those for the various products you want to use.
The PSR-17 vote ended with unanimous vote in favor of acceptance and thus, it seems the standard has been moved into accepted standards in PHP-FIG repo: * The accepted standard: [https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-17-http-factory.md](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-17-http-factory.md) * The related meta: [https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-17-http-factory-meta.md](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-17-http-factory-meta.md) * The voting thread: [https://groups.google.com/forum/?fromgroups#!topic/php-fig/M8PapGXXE1E](https://groups.google.com/forum/?fromgroups#!topic/php-fig/M8PapGXXE1E) The HTTP Factory PSR brings standardized interfaces for factories for creating PSR-7 `ResponseInterface`, `RequestInterface`, `ServerRequestInterface`, `StreamInterface` and `UriInterface` classes. In effect, this means that couple with the standardized requests, responses and request handlers, you'll be able to write almost entirely framework agnostic middleware and request handlers as long as the frameworks support these standards.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [php-fig/fig-standards/.../**PSR-17-http-factory.md** (master → e4023e2)](https://github.com/php-fig/fig-standards/blob/e4023e2bd02f8494dc95932b52362f79b14e5670/accepted/PSR-17-http-factory.md) * [php-fig/fig-standards/.../**PSR-17-http-factory-meta.md** (master → e4023e2)](https://github.com/php-fig/fig-standards/blob/e4023e2bd02f8494dc95932b52362f79b14e5670/accepted/PSR-17-http-factory-meta.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e3ce9gy.)
The request/response cases are interesting because, in a share-nothing synchronous arch they are fine as singletons. Once you start to share (like with many middleware implementations) and once you start to handle asynchronous requests, then they totally should not be singetons. I think a lot of the historical "use singletons" advice was to prevent people from inefficient use of resources (like not reusing DB connections), but not to actually teach them how to use things efficiently (like connection pools etc). Lazy and/or ignorant teachers, in other words...
Imagine this: You have a system where HTTP request/response is a singleton. Your users write articles and in the meantime, they'll get logged out (expired session). How to fix this? Well, hardly. If you and your application consider request/response to be a non-global object, solution would be easy. Just serialize the request (including POST and everything) and execute it through application lifecycle after successfull re-login. Zero effort. Sure, that's just an ideal scenario, but you'll get the point - you never shoud assume that *something* can be a singleton - it's really rare, in fact.
If you are saying don't ever use singleton pattern in real life large scale applications, ofcourse i am with you on this point. But the key point here is a person should atleast know what a singleton is. If helps understanding what IOC container does. If you dont have any idea about singleton. You'll never going to get it what it is and how it works. 
Where can I get that $5 pan pizza though?
Do this ... type your favorite framework and add "singleton". See what turns up. 
Haha i dont have any clue :D
I'm not saying you should forget them or pretend they do not exist, just avoid them by default. IoC container has by itself nothing to do with singletons, does it?
Ioc container also stores objects that need to be instantiated only once.
That does it a singleton? How so?
I get a page for how to create a shared service in a non singleton container... It sounds like you havent touched any modern framework in a while.
tl;dr; Hey, what exactly can we help you with?
Would you care to share any examples? I use vim heavily for any development simply because I like the portability and ease to configure (xdebug is still an asshole). A developer I used to work alongside had the most shocked look on his face when he saw that I used vim and his crew was all running PHPStorm. I've never tried it out, seen a few pictures, but I've always disliked the clutter of IDEs in general (CodeBlocks, Visual Studio, etc.)
It stores the object and does't create a new one. Doesn't its feels same ?
lol..well, regardless..nice write up!
Your Symfony is showing ;)
Everyday, I'm using a DI container implementation which does exactly the same. And no, it's not a singleton. I really don't underestand why you need a singleton for that, could you refine?
Really appreciate that you've give it a read. I am new to blogging and its one of my first artcles :) thank you
his ZF1 is showing :p
Open Source projects always get a free license to all of their products. Its well worth it.
you can get JetBrains IDEs to perform like vim if you'd like through a plugin: https://plugins.jetbrains.com/plugin/164-ideavim so you'd get the best of both worlds.
Oh noes! Somebody pull this man back from the depths of hell...
I did something similar but without messing with nginx configs (which was easier in my case). You need 2 nginx containers, one linked with PHP another with PHP + xDebug And then use traefik rule to forward to one or the other nginx: image: your_nginx_container environment: NGINX_BACKEND_HOST: your_php_without_xdebug labels: - 'traefik.frontend.rule=Host:mysite.local' nginx_xdebug: image: your_nginx_container environment: NGINX_BACKEND_HOST: your_php_**with_xdebug** labels: - 'traefik.frontend.rule=Host:mysite.local;**Query:xdebug=1**' Not saying that this is better, just an alternative.
Note that MySQL *before version 8* does a full write when changing JSON. See https://mysqlserverteam.com/partial-update-of-json-values/
If you like this, then I'd recommending adding [composer-require-checker](https://github.com/maglnet/ComposerRequireChecker) to your CI
True. I was looking to renew my business license but came back empty handed :(
Looks like it is 50% off first year license, which is cheaper than 3rd year (and later) renewal rate. So I’m on like year 5 or so with the complete tool pack (bought during end of the world sale and been renewing every year), and I’ll save only $15USD or so... oh well, free coffee :)
start with git. now.
I agree, that's a great approach to solving that problem. &gt; you never shoud assume that something can be a singleton Don't know if I fully agree with this. Could just as easily assume that nothing will ever be a singleton. Put assumptions aside and decide what you're designing to allow. At least, that's how I'd approach the situation... 
Be interesting to check back in ten years or so and see if PSR-7/17 has gained any traction. Doubtful that Symfony will ever refactor itself around them. The attempts at immutability has probably hindered PSR-7 more than it helped. We shall see.
After coding PHP for 2 years in Vim, it was the first plugin I've installed. It's recommended if your are used to move quickly with key combinations. Sometimes have some weird behaviour with text selection but you will get used to it.
Well, might be a bit extreme. But I've seen too much programmers doing refactoring and getting rid of singletons. On the other hand, I've never seen anyone doing the reverse. Also, it's way simpler to change something into a singleton than vice versa.
It's hard to give any specific examples, as it's a combination a lot of small things, but, to give idea of some things that it does help with: * The inspections highlight unused, undefined and "possibly" undefined variables. This helps with highlighting a lot of small issues when moving code around and refactoring. * A good type inference in the IDE helps moving around, when you can just jump to definitions in addition to providing good auto complete. This has gotten to the point for me, that if the IDE can't infer types in the code, I'm always asking myself "What am I doing wrong/funnily" and try to improve the typing. * With properly typed code, the IDE can also point in a lot of places if I'm passing around values with incorrect types. * The refactoring tools are also a godsend, since the IDE is pretty good at figuring out all usages of methods, classes, etc, which makes renaming, for example, really easy. This has been especially true when I've had to move classes between namespaces. Everything just tends to work like magic. Essentially, it offers a powerful linting/static analysis tools built into the IDE itself. Having the IDE constantly nagging me about bad practices has at least really helped me to improve myself. And as said, it helps me to notice a lot of issues already while I'm writing code and not just when running tests and passing it through CI. Now, I'm not a vim expert myself, so I can't really say how this all compares to heavily customized vim, but then thing I like about PHPStorm is that a lot of the tooling in the IDE is based on the PHP community best practices.
https://www.slimframework.com/ sounds like it might be a good match for you.
I'm pretty much as against paying for software as anyone can be (or most things that can be done for free)... I just refuse to do it. I'll either use open source, or cracked software if I have to. I'm on a Linux desktop now, but everything was cracked when I was on Windows. I used to run a warez BBS in the 90s. But yeah, phpstorm is worth it. I pay for it (and nothing else). Used to use a cracked version, but I'm just that happy with it that I made this exception to my usual hard-line attitude. And I actually prefer the subscription model over the old "paying for each version"... even if it costs more money overall. Because it means I'm always on the latest version and don't need to waste mental time/energy thinking about whether I should buy an upgrade or not. Knowing my general attitude against paying for software, some of my friends thought it was funny that I'm actually paying for one program now. I've used lots of other editors/IDEs in the past: netbeans, eclipse, vim + loads of plugins, Atom, VSCode and some older editors. None of them come close really in my opinion. And it's not just about all the big notable features that you can list off, but all the minor touches everywhere that nobody would think to mention. Most of my coding is Typescript now, but still need to maintain PHP stuff, so I'll keep using phpstorm as its all included. Also the included datagrip functionality is really good. Way better than the other DB GUIs I've used in the past, and especially having your DB in the same code project, and not having to use different keyboard shortcuts etc.
I use a factory for login types. For example, someone can login via Google OAuth, Microsoft OAuth, or a few other OAuth providers. We want some different details depening on which OAuth provider they use. So we use a factory pattern to get the corresponding Oauth class. 
20 PHP flies in a request is NOTHING.
"Php 9 will supersede all java apps within a year" :-)
definitely. Its fast as anything (just including), but always, always the extension will be faster so just wondering..
The container stores a single instance of a service (by default, but it doesn’t have to), this is true. But it doesn’t do that in a shared global scope. `Singleton::$instance` is globally unique, but on the other hand, you can have multiple containers and multiple instances of a given service. You can tear down a container and create another one (for example between tests). Another thing is that it’s not coupled with your actual class — you can make as many of those as you feel. So it may feel like its similar to a Singleton, the container has different key characteristics.
There is an open issue for this problem, it could use some more attention: https://youtrack.jetbrains.com/issue/WI-42350
It happens, it might depend on the OS and the FS behind. It happens very often when I'm developing atop of a NFS file system, mostly with PHP 5.6, but I haven't experienced it with PHP &gt;=7.
Well, I think, that's the good thing with interfaces. You don't require a complete implementation or something "refactored around something", something like a bridge is already enough to create support between your opinionated libraries and standards (https://symfony.com/doc/current/components/psr7.html) and that is what is most important. Your own HTTP libraries doesn't need to implement immutable PSR-7 requests to create support for the interface behind it. You can just go and convert your own mutable request into any of the existing standards-based immutable requests that exist. You can write event-handlers that take a PSR-15 middleware, handle your own (converted) request with it and give you a response, that you can convert again. Surely libraries that implement these standards closely might be better to use, as they don't need bridges and mapping, but the important thing is: The support is there. You can go and use it, everything in everything.
Just a small thing that usually bugs me, but you can care less, obviously, as it's just picky. `new Authenticate()` simply sounds like wrong english, authenticate is a verb. Rather go for `new Authentication()`. I understand it would conflict with the fact that `new Linna\Authentication\Authentication()` is just as bad because of the doubled `Authentication`, but in this case, either move the class one namespace up (`new Linna\Authentication()`, that's why I do, usually) or rename the namespace to avoid duplication (`new Linna\User\Authentication()`, just as an example).
I value PhpStorm more than composer or PHP7 Not sure what that says about my values...
Ugh scroll jacking is such a terrible thing to put on a website.
phpStorm will be slower. That will be the first thing you notice. The UI layout will default differently. This can be configured. I pop the "file bar" to the right, just like Coda had. I don't know how else you used Coda--but pretty much any functionality is there or available by plugin. What phpStorm has that you should love: - type hints/autocomplete - linting - templates for basic structures and generators for other things, like setters/getters/interfaces/abstract/overrides. - plugins for your framework/template engine. laravel, symfony, wordpress even. Check out some of the "quick tips" on youtube as well. Everyones' workflow is different, but phpStorm is very adaptable to what you want (and it probably already exists).
Maybe your overthinking it a little too much. Laravel is a really good framework to start off with, even as a beginner. It does come with a ton of features and can be a little intimidating. What I suggest is to start with the most basic features like routing, templating, and the controller as that's all you really need for a functioning application. After you're familiar with it's basic features move on and explore the more advanced features one by one. It's a lot easier to break it up into blocks of knowledge that you absorb over time or else it just becomes too overwhelming. Laravel has a lot of design patterns and architecture that is cutting edge. If you want to make a career out of development it's best to dive in head first as the market is very competitive and companies are always looking for the latest and greatest.
Thanks for finding this. In the meantime I'm reverting back to 2018.1.5.
&gt; The attempts at immutability has probably hindered PSR-7 more than it helped. Could you explain where this conclusion comes from? 
Why would this matter in the least?
Better check out visual studio code https://code.visualstudio.com/ it made me say bye bye to php storm. Best thing is... it’s open source and free. Weird thing is, i never thought i would recommend an microsoft product 😇 
It's nice to know when a post was written/published so that you can gauge how out of date the information might be.
I'm a bit self-conscious about this, because this is my first Medium posts and one of my oldest, most obsolete, most junior-level publications. I tried to be as open as possible that I would never recommend anyone actually generate gradients on the server in this day and age, while still maintaining value for the reader. Of course, this isn't the most valuable article, but it took at most 30 minutes to type into Medium, and I'm hoping to use it as a learning experience for the Medium platform before dabbling in senior-level publications. Any feedback is greatly appreciated.
Care to explain more your reasoning for not paying for software? I mean, I understand choosing free open source alternatives, but don't get why you have such a hard-line attitude that you crack software "if you need to". Not that I'm mad or anything, but as a developer, I think that paying for software is not the worst thing you can do since you are actually paying for hard work.
Because Symfony 2.4 is mentioned, it seems like this post is out-of-date. If I read a post that mentions a lot of performance tricks, I want to see when this is posted, it might very well be that the suggestions are no longer valid. 
OK thanks I'll check it out
I understand. It was posted as 5 minutes before I created the Reddit link. I'll add date somewhere.
So you pay and it quits working in a year? It looks cool, but renting software just doesn't sit right with me.
How do I deal with potential collisions, knowing that? 
\&gt; Laravel has a lot of design patterns and architecture that is cutting edge Please also mention the fact that it has anti-patterns and its biggest risk is that it's pretty much a one-man-show. Laravel is often noted down as easy to start with, so it might be worth looking at it. Personally I would recommend Symfony instead, but that boils down to personal preferences.
Then I suggest to refer to a more up-to-date Symfony, because 2.4 hasn't been maintained since 2015: [https://symfony.com/roadmap?version=2.4](https://symfony.com/roadmap?version=2.4)
Seriously this has absolutely nothing to do with Symfony. You're focusing on the wrong stuff.
Thanks - I have my revalidation frequency at 1 second. I'll enable revalidate path but the files being included are already all fully resolved by the autoloader.
Fair question. It's not really a logical or reasoned stance that can be justified. I'm just careful with money in general, and I'm used to getting my software and media for free, seeing that's what I've always done. When it was harder (before mp3s became common etc)... I just stuck with what I could get for free, like tracker music (.mod files etc) and free mp3s from the old mp3.com etc. If I can't get it for free I just go without. So I don't personally feel that guilty when I do copy something, seeing it doesn't make any difference to the vendor as they'll earn $0 from me regardless. That's not a justification, and I know everyone say that using that as an "argument" is stupid (which is valid criticism)... but just explains why it doesn't bother me too much when I think about my personal morality. Living this way in general, and often "going without" by default means I can live off a very minimal amount of contract work and spend 90%+ of my time building my own projects. I'm not really using any cracked software regularly anymore. It's just there if some client sends me something in some Adobe format or something (less than once a year probably), or if I need to test something on Windows. So not using it for any kind of personal tasks. Pretty much using open source for everything except phpstorm now I think.
That's always struck me as a weird argument because it's open source software. If the creator dies it's still as useful as it is it's current form, it just may not evolve.
I don't think so. I think you just stop receiving updates, but might me wrong. Maybe someone else does know better 
Great. Guzzle is going to have Yet Another Breaking Version. We haven't even gotten to v6 yet.
This of course is all opinion. I think it's safe to say that being immutable is a core principle of PSR-7. One immediate problem is that it is not really immutable. PHP simple does not have the necessary built in support for true immutability so the best you can do is a sort of a pseudo-immutability. Purists are not amused. But I think that major problem is that no compelling use case has yet emerged for immutable request/response objects. The value still seems theoretical. And if you do run into a case where you need to pass a request off while ensuring the original is not changed then you can clone it. Symfony does this for their sub-requests. The bottom line is that it has been just over three years since PSR-7 was accepted and, as far as I know, none of the major platforms (Symfony,Laravel, Drupal 8 etc) have switched to it. Without the immutability requirement, I suspect that it would have been fairly straight forward to tweak the Symfony Request/Response objects to support the interface.
The only thing that bothered me a bit was the spacing and indenting of the code and comments you showed in the post. Made it quite hard to read.
You may be right in that I'm over thinking this. Im coming from getting lost in the new world of javascript frameworks and it left a sour taste in my mouth
Oddly enough, I couldn't find the "insert code block" option on Medium. I could only get the code style to appear by copy-pasting code into Medium's WYSIWYG editor. The code on the original publication source is color-coded and probably wider as well. If you know any tricks for Medium to display code in a better format, I would love to know. Otherwise, should I go back and add white space? Maybe put the comments on a new line instead of after the code? What didn't you like, and how would you prefer it?
At least you'll be skipping 6 then.
At that time, nice article and good code. Not many people bothered sanitize their input back these days.
We do provide snaps for Ubuntu customers: https://snapcraft.io/phpstorm
You can edit the single file on the server. See: https://www.jetbrains.com/help/phpstorm/editing-individual-files-on-remote-hosts.html
I could merge authentication and authorization under the same namespace! After all, they are two things that concern the user.
&gt; It's harder for non comp-sci ish people to understand I'm self taught and maybe I'm the odd man out (and not trying to toot my own horn by any means), but one of the first things I started learning after having a base knowledge of programming was design patterns. For whatever reason, the importance of well-structured code became apparent to me very quickly. Once I learned Laravel and started reading through the source code, that importance became even more clear. On the flip side, some of the more entry level comp sci concepts are still foreign to me, such as big O and algorithms which is something I need to start studying since it seems a lot of the larger companies are still screening candidates based on that stuff. So, for me as a "non comp-sci ish person", design patterns came naturally, other concepts did not.
Maybe Singleton shouldn't have been the first example, since it seems you lost a lot of Design Pattern Experts™. No big deal though, because the article is geared for people new to design patterns anyway. I will say though, the one pattern that completely changed the way I think about OOP was Strategy. Learning about object composition and specifically swapping behavior made it all click for me. IMO this is the first pattern everyone should learn, as it touches on so many other design principles. Good write up :+1:
Little Caesar's might still do that, they did last time I checked but that was like 6 years ago.
Please also mention the fact that symfony has antipatterns too.
No, it means better "language injection". This is what they call one language embedded in another. So, this feature is talking about SQL highlighting in PHP strings.
inflation..I think the pan is like 6 or 7 now...highway robbery!
Correct - they call it the ["Perpetual Fallback License"](https://sales.jetbrains.com/hc/en-gb/articles/207240845-What-is-a-perpetual-fallback-license-), and mention on the promo page that it does apply here. Basically, so long as you're subscribed for 12+ consecutive months, you get a non-expiring license for the latest version you were subscribed for.
There's an open GitHub issue: https://github.com/docker/for-linux/issues/264
Being open-source doesn't automatically make it well-maintained. Yes in theory you can fork it and have a go with it, but that means you have to put in a lot of time and energy. While using a well maintained project can spare you that. 
Hey thank you for your feedback. I i am the guy to love to see people learn something. Since i am new to blogging and qriting articles. I was a bit discouraged. But after viewing this comment. Em glad finally someone understand something that is intended for beginners. 
woo, this is awesome
they can just release it for php6! /s
couldn't you just do: \`return $user-&gt;update(...);\` ?? That seems simpler
I believe Slim's request and response classes derive from PSR-7, with added convenience methods and some support for it's routing functionality.
Yes, that sounds reasonable :)
I have a question for you php enthusiasts/gurus . Im trying to do some steganography in php but im facing a hard time cause the bitmaps only have 24 bits. (8 for each component of RGB). Ive done steganography before in java and the bitmaps had 32, (8 more for the alpha channel) so i could be very creative, hiding 4 bits, Eck! Sometimes 8 bits in a single pixel. So Im trying to hide images in other images, but with php my freedom is almost **null** cause with 24 bits, the only thing i can do seems to change the least signifying bit. Which is something i dont fancy a lot, cause if I choose this path, for each pixel i want to hide i would need +10 pixels on the bigger image. So im asking you php gurus and experts... Is there any method to change the alpha value of a pixel in php without interfering with the values of the RGB components? I know i can get get the values of the alpha component with imagecolorsforindex(), but i dont know how to set the alpha. imagesetpixel() only seems to work for rgb. thanks a lot
No because update returns a boolean. That's why he use the tap helper.
I need to get input from users but I'm still getting some spam. I need it to block any http etc. Basically if there is any link in the form, I want to blocked. Also worried about cross scripting etc. Thanks for any links or advice.
I'm surprised createStreamFromFile() uses 'r' as the default mode instead of 'rb'. This just causes the default behavior to differ according to the platform, which means you ALWAYS need to specify the mode if you want consistent behavior.
https://i.imgur.com/DK1ckG8.png
Yep. Slim is a very nice framework. There is also a [PSR-7 based Zend framework](https://docs.zendframework.com/#expressive-and-psr-15-middleware). It is just that neither have achieved the popularity of some of the other frameworks out there. And if you take a look at Slim's [middleware based request/response flow](https://www.slimframework.com/docs/v3/concepts/middleware.html), you will notice that it is fundamentally different than the linear flow that Symfony/Laravel follow. It is all ancient history but the Framework Interoperability Group basically chose to ignore the existing Request/Response objects when PSR-7 was developed. The group chose immutability over a more standard get/set/has approach. Time will tell if they picked wisely or not.
I liked the "How to avoid them" part. Reported as spam. 
Yes finally, yesterday I started my workstation and saw that snap had already updated PHPstorm
Psr 7 is a standard already
Thanks and sorry. I deleted my post and moved it over
There are lots of standard that end up never being used in real projects.
I've also recently used a factory method (not a distinct class) on an object to make the instantiation dead simple. This was for a library that I decoupled even from itself. So the 'useful' class has a constructor of something like `$service = new Service(new ApiConsumer(new Communicator($url), $options));` which is messy and I felt unnecessary being that I provide defaults for those objects. Using a factory method it's simply `$service = Service::make($url, $options);`. If you're happy with the provided implementations it's dead simple to get moving.
&gt; an microsoft All credibility lost. 
You kind of have to be strategic when you write tech articles. Think about how people are going to pick apart your article and address their arguments in the article itself before they get the chance. Your article will be better as a result, and you'll avoid a lot of pointless criticism. The two design patterns that are often torn apart are Facades and Singletons. Reason being, a lot of people _do_ abuse them in a codebase. Since you're writing this post for beginners, it would be beneficial to explain anti-patterns and when certain patterns can become problematic. No need to feel discouraged, criticism is part of the process! There's no such thing as a perfect write up, so keep on blogging and improving!
I keep hearing about always using 'rb' instead of 'r', 'wb' instead of 'w', and so on. There's even a red warning in php docs about this. But I have never seen a piece of php code that behaves differently between platforms if it uses a non binary mode. When is this actually an issue?
Do you have some examples?
You must be american.... you probably couldn’t say a word in my language. 
it's accepted by some people...
Most the 5.6 features came from multiple contributors. If anything, one man show or not, others would have no problem picking it up. There's one man show and then there's one man show with a huge community behind it. But Laravel also has a full-time employee and many others willing to add contributions on a free, regular basis.
From the PHP manual: &gt;Windows offers a text-mode translation flag ('t') which will transparently translate \n to \r\n when working with the file. In contrast, you can also use 'b' to force binary mode, which will not translate your data. To use these flags, specify either 'b' or 't' as the last character of the mode parameter. &gt;The default translation mode depends on the SAPI and version of PHP that you are using, so you are encouraged to always specify the appropriate flag for portability reasons. If you use 'r' on a Windows server to read a file that contains "A\r\nB", the returned string in PHP will be "A\nB". Likewise, if you write the string "A\nB" to a file using the 'w' mode on a Windows server, it will actually write "A\r\nB". Windows also mucks around with the data in other ways when you're in text mode. [See here.](https://en.cppreference.com/w/c/io#Binary_and_text_modes) Meanwhile, on Linux servers, 'r' means exactly the same thing as 'rb', and 'w' means exactly the same thing as 'wb'. Basically, text mode produces inconsistent (and even lossy) behavior that varies from one OS to the next, and it really should never be used. Which makes it bizarre that PSR-17 chose to use it by default. I guess they assume nobody is running PHP on Windows servers anymore.
Yes, there's many standards are not used in a lot project, if you go in Github and type PHP and see a lot of repositories with many stars a few of then are out standard (when there's no one on then). 
[`https://github.com/linna/typed-array/tree/b2.0.0`](https://github.com/linna/typed-array/tree/b2.0.0) classes merged :)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [linna/typed-array/.../**881a92142ada3e906872f1abb4c41a07a1c87528** (b2.0.0 → 881a921)](https://github.com/linna/typed-array/tree/881a92142ada3e906872f1abb4c41a07a1c87528) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e3dejp8.)
Find another language you crayon eater
[www.phptherightway.com/](https://www.phptherightway.com/) is highly regarded, as is Josh Lockhart's Modern PHP.
Notepad is better for writing code than Word.
Thanks very much 
Why this hate ? 
I don't believe that is the best approach because you must keep in your mind that you converting a web based language into another. It's like that frameworks of hybrids app. It could cost you the performance of your app. But for studies propositions is valid. But I believe I don't do that for a costumer for example. It might better you choose a proper language to do that job. I believe the python is a good choose for you and it very easy to learn. 
It's available in laravel. Just use the right class in your controller and you get a psr-7 request injected instead of a laravel request. You can even use both at the same time.
This was posted a few days ago: https://devilbox.readthedocs.io/en/latest/intermediate/configure-php-xdebug/xdebug-win.html If your remote host is in the same network and runs xdebug, you can point the `xdebug.remote_host` to the ip of you windows machine, and your IDE on windows can set breakpoints. Especially useful if you have the code in a network share. Had it running while I wasn't able to fix my docker in windows. 
Sure for the controller action. Bit more difficult for the various "middleware" kernel listeners.
As an example: the documentation uses the form builder as a method of validation for your entities. Entities shouldn’t be created in an invalid state that allows this to be possible. I came across an article on it here: https://blog.martinhujer.cz/symfony-forms-with-request-objects/ I don’t have much experience with symfony outside of this, and a few other components, though.
That is how PHP is supposed to function. When using php-fpm or php as cgi, php code may be kept in memory to more rapidly respond to requests. Each request calls a new instance of the application to memory and the variables are disposed of upon completion of the program.
You're supporting an American product by accusing him of being an American? Also, people coming to America all adapting just one language is a big part of what made America so successful.
It mimics the HTTP behavior: it's a stateless protocol. Anything you want to save between connections, you must actively save it. 
&gt; So they were consistent but consistently shitty. Finally, an IDE that matches my code!
Did you search some library in Github? I believe you could find some third party library on github. 
Look into $_SESSION[] variable. 
Yes. Because every time someone for example enters in your system this is an new instance of the same. And we you send a file works in the same way. 
&gt; Im coming from getting lost in the new world of javascript frameworks and it left a sour taste in my mouth To be fair, the javascript world is absolutely nuts. Modern Php is nowhere near the crazyness of Modern Js. Comming back to your actual pbm, I'm guessing you don't use packages/libraries either, and mostly do your thing alone. If it's true, then it's kind of a mindset issue. You are used to know everything about your project; now we ask you to let go of this complete mental picture, and use third party code without any knowledge of how they work inside. I had the same issue when I tried symfony few years ago, there was too many things I thought I had to learn to use it. I used to know every line of every file of my websites, and suddenly, there was this tool with 10 times more LOC that I had to learn. The trick is, don't learn all of it, just what you need, and build on it. The trick is to learn to trust the framework and its doc, go with the basics, one thing at a time, and dive in the source only when you absolutely need it. Which is maybe once or twice every 5 projects. Think of external code as a black box you don't need to know anything about, except how to operate the screen and buttons (the public methods). I have no idea how my microwave works, but I can use it without thinking. It's the same thing. (That's also why you will only want to use tested third party code)
I'm going to fully agree with this. The thing you do have to keep in mind is that you will make mistakes as well. I started using Symfony about three years ago (after about 15 years of inventing my own frameworks one after another), and if I revisit my first Symfony projects I'm still disgusted to see my own work. But the matter of the fact is, the more I work with Symfony - or any other framework for that matter, Symfony is simply a choice I made at some point - the more I realise how much time it all saves me. My advice: take your time to choose a decent framework, go through the docs as good as you can, and learn by doing it. It will take some time in the beginning, but afterwards you'll see nothing but advantages.
I'm having trouble trying to add a warning notice underneath the add to cart button in my WooCommerce theme. I've been editing in the functions.php but I can't get this code to work with the conditional: add\_action( 'woocommerce\_after\_add\_to\_cart\_button', 'custom\_content\_after\_addtocart\_button', 100 ); function custom\_content\_after\_addtocart\_button() { if (is\_product\_category(array('Pod','Cartridges'))){ echo '&lt;br/&gt;&lt;div&gt;&lt;p style="font-size:10pt; margin-top:100%;"&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; Cancer and Reproductive Harm - &lt;ahref="[http://www.P65Warnings.ca.gov](http://www.P65Warnings.ca.gov)"&gt;[www.P65Warnings.ca.gov](https://www.P65Warnings.ca.gov)&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;'; } } Any ideas? If I remove the conditional it works fine...
Yes, a new instance. The only variables that are kept between page loads is the contents of the array called $_SESSION, everything else is lost. 
I mean if you're not up to guzzle v6 yet and are [at least at v5](https://github.com/guzzle/guzzle/blob/5.3.3/src/Client.php#L111) then you're pretty darn close to PSR-17. So really if you do skip v6 chances are v7 may have similar methods to v5 again.
Adding to that, have a look at https://php.net/session_start to see how to get session variables to work.
Very bad at a lot of things, it would seem. Why even make the effort to reply?
The problem with books is that they tend to be out dated before they are even printed. I would recommend an online course, this one is free: https://laracasts.com/series/php-for-beginners 
it may be interesting, thanks 
Good bot
Yes. Correctly. Its not matter if a photo of a just txt file. Every time when you call a upload file and calls the session global you automatically are instances it. 
It prevents memory leaks.
ahh, wow, yeah, they could use a better name for that. "better mixed Inline SQL syntax highlighting" or something
&gt;big O and algorithms Fear not, they ain't that hard. It is just the associated lingo which is confusing. I encourage you to understand the idea for a term, then rename it for yourself. Big O and limits becomes which is the part of the code that grows out of control when you repeat it a lot. While a mouthful, it's self explanatory.
&gt; Currently moving to using Laravel as an API for all of the applications in an ecosystem, and the front end using React/Angular/Vue, but i'm more of a backend php dev so it's taking me a bit. While it's never a bad idea to learn, I went full spa, and I am now voluntarily coming back to PHP rendered apps with js sprinkles for most of my public websites. (Vue is also good in that context by the way, unlike react/angular) It's not worth the hassle to me.
I was saying procedural like top down execution which I guess if you look a the individual components of OOP they would execute top down as well so I don't know. If I was asked to write code that does something, at this time more than likely it would be done in one function that goes top to bottom, on one file. Which again arguable this could be a "method?" that is part of code using OOP
You can setup SFTP/FTP connections and automatically sync your server and local changes. https://confluence.jetbrains.com/display/PhpStorm/Deploying+PHP+applications+with+PhpStorm#DeployingPHPapplicationswithPhpStorm-FTP,FTPS,SFTP
I would focus more on learning to write tests, integrating with payment systems , building an architecture that is easy to modify or hook into specifically the cart and price calculation, there will be a time when a customer asks for a "simple" web store, and you build a simple thing with products, a cart and a stripe integration, but SUDDENLY, omfg the customers are having a sale, and now you have to implement coupon codes that works in various ways, one code should be a simple percentage off on the total, another will be a flat discount, then another one makes the least expensive product free if your total is over a certain amount. Being able to build a system where you and your team can easily add these changes without rewriting everything each time a feature has to be added is way more important than which framework you use. Learn to build a sane architecture, then worry about which framework or tool to use, it will also help you understand choices made in various frameworks. My 2 cents.
Roughly yes. But session data is saved on the server, considering you use the default config. This will not work if you have multiple servers or the according cookie is not stored in the browser. The latter is a common beginner problem. The cookie is not stored if you send output before session_start. Check your logs or set error_reporting(E_ALL) at the very beginning if you have a non production system.
Even though you are not wrong, that is not why PHP is designed as "per-request"
&gt; Please also mention the fact that it has anti-patterns and its biggest risk is that it's pretty much a one-man-show. So much misinformation in one sentence. 
I'm crying inside when I see usage of static methods for *object oriented* design patterns.
I always suggest this [laracast](https://laracasts.com/series/php-for-beginners) by /u/JeffreyWay when a question like this comes up. That particular serie is free, short (a couple hours) but also pretty much in-depth. Jeffrey is kinda fast-paced, and sometimes you have to go back and re-watch/re-listen what he did/said, but overall i find it really nice. I've been programming pure php for 5 years, just 6 months ago i started playing around with frameworks, and this serie helped me immensely when i wanted to understand what are the main and most important parts of a framework.
Symfony docs shows entities because it is simple but nothing prevents you to use DTO. Or simple arrays if you want. In fact, symfony/form itself has no connection to entities at all, it is doctrine-bundle that gives extra form guessers and data transformers. And after 6 years, I still don't use DTO. I don't see any practical reasons to complicate things just so I can say "look, here is DTO". 
Because of how this post is written and how the Reddit app works on mobile, I cannot click on or select the text of the link you placed.
I don't understand your question
&gt; almost Why almost? What's missing?
&gt;PHP changed their behavior back in PHP 4.3.2 so that it basically adds the 'b' automatically if there's no 't' set. This differs from the fopen() function in C++, hence my confusion. I guess there really is no difference between 'r' and 'rb' on any platform in modern versions of PHP. This is what I was actually curious about. Do you know any sources where this is specified?
Now i dont have any answer to this "for me". And since this article mentions in the begining its for beginners. I think ypu should understand what the article is saying to you. 
I don't understand why you are so angry at me. I think Singleton and facades shouldn't be promoted, especially to beginners. Do you allow me to express this idea?
I am just angry because i am new to writing. I've put so much effort in it. And still there is criticism. 
Don't take it personally. The intent of my comments is not to discourage you from writing. Sorry about that :-)
Slim 4 is being built around PSR-7 and 15.
But they webscale, motherfucker 
Mostly contacts, people I've worked with that are in a position to hire or to suggest to someone who is. Occasionally agencies, but I try avoid them as much as I can as they take a cut and you can't push your rates up quite so much.
Stuff that actually works without actually changing your code structure: \* use fully qualified global function names, eg \\json\_encode vs json\_encode That's all I can think of really. Simply use common sense when writing up code, then optimise what isn't fast enough using the proper tooling - blackfire, tideways or similar coming here to the rescue.
webscale? Mapping to ORM on relational DBs? Are you OK mate? Need to water?
Yeah, I tried all that and it still doesn't work. I just blame my company's network. It's probably set up in an extremely awkward way that doesn't allow XDebug to work.
Nice, now tell me, what is your favorite language and db choice for REST?
i think it is some reference to the folks over r/programmingcirclejerk
Here's a sneak peek of /r/programmingcirclejerk using the [top posts](https://np.reddit.com/r/programmingcirclejerk/top/?sort=top&amp;t=year) of the year! \#1: [ELECTRON](https://i.redd.it/u2197se4gciz.jpg) | [21 comments](https://np.reddit.com/r/programmingcirclejerk/comments/6wepp0/electron/) \#2: [Mathematical notation needs to be disrupted](https://imgur.com/TJ27lSx) | [91 comments](https://np.reddit.com/r/programmingcirclejerk/comments/6zkl20/mathematical_notation_needs_to_be_disrupted/) \#3: [10x pub coder scales in two dimensions](https://i.imgur.com/GPm3gqR.jpg) | [49 comments](https://np.reddit.com/r/programmingcirclejerk/comments/7zibe4/10x_pub_coder_scales_in_two_dimensions/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
That documentation which you just linked doesn't actually describe what happens if the Docblock is invalid. Can you test these annotations in unit tests or do you have to use integrations tests instead?
Hi. Although the strong language sounds real harsh for no reason, I think he was being sarcastic. "Webscale" is often used to mock technologies used inappropriately to aledgely support many users worldwide. Don't let it bother you. Thanks for sharing a nice article. 
That would be amazing lol
Thanks! :)