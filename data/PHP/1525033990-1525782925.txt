I agree, it's just some temporary lazyness that stops me from incrementing the coverage. Anyway thanks for the comment, i'll add it soon
IoC and SOLID may be "related", but aren't relevant to this particular discussion. Pass a container of abstract dependencies can be equally described as "an implementation of dependency inversion" so that's an inaccurate definition of how these two terms relate. Dependency inversion postulates, in general, that high-level modules depend on abstractions, and implementation details depend on abstractions. It's not related to injection. 
Well, I noticed you deleted your previous comment, which I was replying to, so I'll post the reply to your previous comment here: I want to take the time to answer your post thoughtfully, since even with your colorful language, it seems that you put a lot of thought into your answer. But I want to address a few things you've said that I feel are misleading and potentially damaging to any engineers trying to get better. SOLID is not just a meme being thrown around. It is an extremely useful set of principles, that when followed DOES lead to better, cleaner code. I've been developing for close to 20 years, and while not all engineers produce bad code when not following SOLID, I have seen the principles as work well as "guard rails" against code smells. I've never paid for any of uncle bob's "marketing" nor know what you're referring to when you say that his interest in the coining SOLID had more to do with marketing efforts than him teaching younger engineers. He has many articles, blog posts, and tutorials that he freely shares, and he's a highly knowledgeable engineer. Now, to address the technical things you've brought up: As you've already stated, the dependency inversion principle and IoC are not the same thing. I've never claimed they are. I, in fact, echoed your sentiment regarding them being related but not the same thing. Now, to support my saying that DI is an implementation of DiP (As well as IoC), let's look modern DI containers as an example. Decent DI containers (Including the ones in things like JBoss, Spring, Symfony, Etc), have the concept of auto-wiring built into it. What does that mean? It means that while you're typehinting a contract (an interface, or abstract class, which should be an abstraction), a concrete "default" object is injected into the class that depends on said contract. Does that not meet the criteria for dependency inversion? Containers and Locators are patterns that are a part of (or fulfill) the solution to dependency inversion. You can choose to ignore real world implementations of DiCs or choose "simpler" containers to support your argument, but I am being pragmatic when saying that DI containers can solve dependency inversion, as generally, when choosing a library or framework i'm going to use the ones that solve most of my problems so that I do not have to implement boilerplate code myself.
\+1 On this. You should definitely follow the PSRs if you are looking for adoption. For me, projects not following PSRs are non\-starters in most cases.
This happens to me at work sometimes. You will find that the people who are actually worth talking to and listening to are not the ones who come by with their, ‚ÄúEww, [programming language],‚Äù statements. It usually means they do not have the intellect to engage in a real convo so they make statements that defer to an area they are comfy with. 
&gt; Well, I noticed you deleted your previous comment, which I was replying to, so I'll post the reply to your previous comment here: I deleted it because I rambled too much, I wanted to express my point more succinctly, which I did above. The fact I don't like Robert Martin wasn't relevant. üòÉ &gt; SOLID is not just a meme being thrown around... I know what SOLID is. But it's not relevant to the discussion of "dep. injection" vs. "dep. inversion". To me SOLID is mostly a Rorschach test. If you don't like a piece of code, you can *always* point to a few of these principles and say "that's why your code is bad". Thing is once the jig is up, you learn you can always point to excellent code and *also* legitimately claim bunch of the rules in SOLID are violated. "SRP" is highly subjective. It means nothing. "OCP" is an old principle about using class inheritance - the modern advice is "just avoid class inheritance in most cases", so it's hardly ever relevant. "Liskov" wasn't invented by Martin, and it's about class inheritance again, same thing applies (but it's probably the most clear rule of the entire SOLID). "ISP" is essentially "SRP but for interfaces", I guess he needed that "I" in there to make a neat acronym. And "Dep. Inversion"... means just "rely on abstractions". What a great set of principles! Redundant, unclear, and outdated. But they make an excellent Rorschach test, so I guess you'll keep seeing whatever you want to see. &gt; Decent DI containers (Including the ones in things like JBoss, Spring, Symfony, Etc), have the concept of auto-wiring built into it. What does that mean? It means that while you're typehinting a contract (an interface, or abstract class, which should be an abstraction), a concrete "default" object is injected into the class that depends on said contract. Does that not meet the criteria for dependency inversion? No. In fact I often share my opinion here that autowiring is a terrible practice. It inverses the "inversed control" back to the component, which can now ask for anything from the environment and get it autowired by type. It's a global service locator obfuscated through reflection to *look* like injection, but to *behave* exactly like a global service locator. You don't need autowiring to depend on an interface. It has to be wired, but not "auto" for sure. 
Well done dude :clap:
&gt; Disagree. It seems to me that you don't like uncle Bob too much and are putting a lot of your personal opinions into this. I prefer to go by industry standards. Which part of what I said about SOLID feelings like a "personal opinion" here? I may not like Bob too much, but I gave you an objective list of arguments why SOLID isn't all it's cracked up to be. And don't fall for marketing ploys. SOLID is one man's marketing effort. It may be popular (and hell yes, it is!) but it's absolutely not "an industry standard" by any definition of that phrase. &gt; You say auto wiring is a service locator. If I'm hinting a contract, how is that a service locator? By that definition this way you're also "hitting a contract": function __construct(ContainerOfAllTheThings $c) { $whatever = $c-&gt;getWhateverInterface(); } Do you see a problem here? &gt; The DiC will inject the default implementation for that contact. That's literally one part of the principle (depend on abstractions). No, there's absolutely no concept of "default implementation" in the principle of depending on abstractions. Point to me where it talks about every component having access to "default implementations". Do you know how components can also have access to "default implementations"? Global registries. Static service locators. All of those exist to provide "default implementations" to some type, including abstract ones. &gt; In fact, I'm pretty sure that most of what your saying is not correct. Yeah, let's see you replying to my queries above, if you're so sure. &gt; A service locator is a dependency into a registry, which basically tells me nothing about what your class actually needs. Type hinting an interface does. Tell me how is an autowiring container not an implicit dependency on everything in your container. When you have a hundred controllers with different constructor signatures, and they can ask for absolutely anything from your environment by typehint, how *exactly* do you think you're controlling the coupling between your controllers and that environment? The answer is you absolutely don't. Just imagine the crazy idea you'd take a project with a hundred controllers from one project, and drop it in another project and just use these controllers by configuring a few narrow dependencies, because "SOLID"! No. Those controllers are picking stuff from all over the original project they were written for and they're deeply coupled to that specific application. Which is the very situation injection was intended to resolve. So you tell me how autowiring is different. You're falling for syntax over substance. Whether you do `(Foo $foo)` or you do `$c-&gt;getFoo()` is absolutely irrelevant, when the final effect is the same.
https://symfony.com/doc/current/service_container/autowiring.html#working-with-interfaces Nuff said. 
While this setting is important, you should also make sure to have `composer.lock` committed and always use `composer install` instead of `update` on your production server, just to make sure that the dependency versions you tested your stuff on stays the same. Otherwise the risk of grabbing a breaking-change version in production is always there.
üèÖ Here, take this medal, for participating in the great battles against Laravelisms.
&gt; What makes you say that? PHP can accept any HTTP verb you want, even non-standard ones you make up. (Ex: ASDF). Some servers may not like it... That distinction is kind of unnecessary, don't you think? Yes, because some servers don't like it (like... all the popular ones PHP is deployed on), and the built-in one doesn't like it, and because the globals are called $_GET and $_POST which is incorrect, but clearly shows what was on Rasmus'es mind, we can say PHP mostly deals with GET and POST (and I'd add HEAD, implicitly or not). But this is fine, because all you need is HEAD, GET and POST anyway. No solid technical reasons to go out of your way around defaults in receiving the other ones (yeah I know, everyone: downvote me, but I'm right). 
&gt; Not related though, but 0 === 0.0 being false has come up a few times as well. It should be false, they're not equal things.
thanks :\)
Thanks for that, I'll take some time to re\-read the entire code and refactor whatever looks weird.
Don't get rid of them, just create an Abstract or "Generic" class. For example: https://github.com/thephpleague/oauth2-client/blob/master/src/Provider/GenericProvider.php
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [thephpleague/oauth2-client/.../**GenericProvider.php** (master ‚Üí a68854f)](https://github.com/thephpleague/oauth2-client/blob/a68854ffbfa3e301264c287a1f27f3f6404ea246/src/Provider/GenericProvider.php) ---- 
Another best practice would be to start with your tests. Libraries such as http://www.phpspec.net allow you to think about what you'll be implementing before writing the concrete interfaces. I usually start a library with Specification Based Development alongside TDD. Remember, write your tests first.
Maybe your SQL needs to be using the mysql `PASSWORD()` function since the test password appears to be a result from it? $sql = "SELECT id FROM admin WHERE login = '{$myusername}' and password = PASSWORD('${mypassword}')"; Also, look up how to use prepared statements and parameters in mysqli (http://php.net/manual/en/mysqli.prepare.php) 
$_GET may be populated on a POST request as well. And $_POST may be populated on any request type that has a body. $_GET = Parsed URL Query Params $_POST = Parsed HTTP Body Params (Like so many other things in PHP) those are misnormers.
Oh right, sorry I missed that.
Please don't use MySQL password hashes in your applications. MySQL's authentication is designed to be fast and backed by other security features such as firewalling and host restrictions. Modern web applications should be using [something like bcrypt](http://www.phptherightway.com/#password_hashing), which is supported in PHP by the [`password_hash()`](http://php.net/password_hash) function.
It`s actually a game server, i don`t own it and i didn t make the site for it, i just need to do an auxiliary page for admins, and i can`t figure out this login.
This is taken from the site`s login form, this doesn`t work here, maybe i fail to modify it : &gt; &lt;?php &gt; &gt; if(isset($_POST['login']) &amp;&amp; $_POST['login'] == 'Login') { &gt; &gt; include('./inc/config.inc.php'); &gt; mysql_select_db('account'); &gt; &gt; $user = mysql_real_escape_string($_POST['user']); &gt; $pw = mysql_real_escape_string($_POST['pw']); &gt; &gt; $check = "SELECT * from account where login = '" . $user . "' and password = PASSWORD('$pw')"; &gt; $query = mysql_query($check); &gt; $num = mysql_num_rows($query); &gt; &gt; &gt; if($num &gt; 0) { &gt; &gt; $array = mysql_fetch_array($query); &gt; &gt; &gt; // SESSION variable start // &gt; &gt; $_SESSION['id'] = $array['login']; &gt; $_SESSION['coins'] = $array['coins']; &gt; $_SESSION['isadmin'] = $array['isadmin']; &gt; $_SESSION['pscadmin'] = $array['pscadmin']; &gt; $_SESSION['email'] = $array['email']; &gt; $_SESSION['real_name'] = $array['real_name']; &gt; $_SESSION['social_id'] = $array['social_id']; &gt; $_SESSION['user_admin'] = $array['web_admin']; &gt; $_SESSION['user_id'] = $array['id']; &gt; $_SESSION['user_name'] = $array['login']; &gt; $_SESSION['user_coins'] = $array['coins']; &gt; $_SESSION['user_email'] = $array['email']; &gt; echo "&lt;meta http-equiv='refresh' content='0; URL=index.php?s=home'&gt;"; &gt; } else { &gt; echo "&lt;meta http-equiv='refresh' content='0; URL=index.php?s=login_error'&gt;"; &gt; } &gt; } &gt; &gt; ?&gt; &gt; &lt;!-- center column --&gt; &gt; &lt;div id="login" class="col-2"&gt; &gt; &lt;div class="content content-last"&gt; &gt; &lt;div class="content-bg"&gt; &gt; &lt;div class="content-bg-bottom"&gt; &gt; &lt;h2&gt;&lt;?PHP echo $serverSettings['titel']; ?&gt; - Login&lt;/h2&gt; &gt; &lt;div class="inner-form-border"&gt; &gt; &lt;div class="inner-form-box"&gt; &gt; &lt;h3&gt;&lt;a id="topwLost" href="index.php?s=passwordlost" title="Ai uitat parola?"&gt;Ai uitat parola?&lt;/a&gt;Logare&lt;/h3&gt; &gt; &lt;div class="trenner"&gt;&lt;/div&gt; &gt; &lt;form name="loginForm" id="loginForm" action="index.php?s=login" method="post"&gt; &gt; &lt;div&gt; &gt; &lt;label for="username"&gt;Username: *&lt;/label&gt; &gt; &lt;input AUTOCOMPLETE="off" type="text" class="validate[required,custom[noSpecialCharacters],length[3,16]]" id="username" name="user" maxlength="16" value=""/&gt; &gt; &lt;/div&gt; &gt; &lt;div&gt; &gt; &lt;label for="password"&gt;Password: *&lt;/label&gt; &gt; &lt;input AUTOCOMPLETE="off" type="password" class="validate[required,length[5,16]]" id="password" name="pw" maxlength="16" value=""/&gt; &gt; &lt;/div&gt; &gt; &lt;div id="checkerror"&gt; &gt; &lt;p&gt;Login to see&lt;/p&gt; &gt; &lt;/div&gt; &gt; &gt; &lt;input id="submitBtn"class="btn-big" type="submit" name="login" value="Login"/&gt; &gt; &lt;script type="text/javascript"&gt; &gt; &lt;/script&gt; &gt; &lt;/form&gt; &gt; &lt;p id="regLegend"&gt;* Must fill&lt;/p&gt; &gt; &lt;div class="trenner"&gt;&lt;/div&gt; &gt; &lt;div id="subscribe"&gt; &gt; &lt;h3&gt;&lt;br&gt;No account?&lt;/h3&gt; &gt; &lt;a class="btn-big" href="index.php?s=register" title="CreazƒÉ un cont"&gt;Create an account&lt;/a&gt; &gt; &lt;/div&gt; &gt; &lt;/div&gt; &gt; &lt;/div&gt; &gt; &lt;/div&gt; &gt; &lt;/div&gt; &gt; &lt;/div&gt; &gt; &lt;/div&gt;
I think this would benefit from Nginx instead of Apache... otherwise it‚Äôs a good example of tying things together.
&gt; I mean technically you could implement everything with nothing but GET if you felt like it Well... Nah, because GET should be safe to invoke (by Google, by prefetching browsers, etc.). HEAD is needed to check if a resource has changed. And POST is needed for everything else. So you see how HEAD, GET, POST kind of can explain their existence via truly valuable semantics. The other methods... well, some of them have seemingly useful semantics (PUT, DELETE), but in practice they're not that useful. While others literally have no reason to exist (looking at you PATCH). There's a reason why modern HTML forms still support GET and POST only. It's because it makes no sense to send a HEAD form, and because the rest of the verbs are useless.
How about http://dec64.com/ then? Bonus PHP does this before JavaScript to spite its creator. https://github.com/douglascrockford/DEC64 
Hey, just my opinion and experience (~10 years being a dev): when it comes to big applications, a framework will keep everything organized and maintainable. That is impossible to do without a "frame" that sets the structure for a dev team. It mostly comes down to the use-case, but I haven't had a bigger project not using a framework as base. The ones that did not where unmaintainable and got replaced, it is just too expensive to maintain and extend code that does not stick to a certain paradigm (an example would be MVC). Think about the content and quality of the documentations like Symfony or CakePHP - it is highly unlikely that this will be equal to a big app build without a framework. 
I haven't looked in to it much yet, but I'm in total agreement with the others here; building your own frameworks is one of the best ways to learn about frameworks. I also really like the idea of integrating docker so tightly with your framework. Maybe it's a really bad/stupid idea I can't tell yet, but I like that you came up with it. Good job!
&gt; but most of my applications don't need the added power. famous last words. But in all seriousness I don't see how that Money library adds so much complexion that you wouldn't want to use it. I use it for every single project that has even a little bit to do with money.
If you're in a position to change the code, you can alter the offending code to take an array or a value object, refactor the calling code to pass the value object, and then remove the array-handling special case logic.
I like to keep my number of dependencies down, so I'm cautious about adding new libraries to any project. If I did need a Money class, I'd pull down [this library](https://github.com/moneyphp/money) rather than roll my own. It appears to have been maturing nicely.
That's the library we were talking about. 
&gt; It's funny you say that, while in a neighborhood thread, people are making fun of injecting containers, or creating context objects to pass around, because through combining related objects together, they "increase coupling" and "reduce testability". It's all a matter of PoV, isn't it curious? I don't really understand what any of that has to do with anything that we're discussing here. &gt; Yes, I'd like to hear a few of those "plenty of benefits" please? It's very easy to be vague like that. If you don't want to be specific about benefits, then the negatives of more verbose code, lower readability, lower performance and forced unnecessary complexity easily outweigh the generic statements of "plenty of benefits". Well, thank you for that list of "specifics", and I'm more than happy to return the favor with my own list of definitely-not-vague several-word-groupings such as data locality, cognitive ease, error resistance, lower barrier to entry, _higher_ readability, and _lower_ complexity. I'll also rebut your verbosity claim by pointing out that data references are quite often repeated in code, and it usually only takes a single repetition to tilt the verbosity scales back in favor of VOs. And I'd like to point out that the typical case would not be manual construction in the first place, and that those VOs would usually be coming from elsewhere (e.g. returned from other methods), making it less verbose no matter how you look at it. &gt; No, as I already said, the example was a wrapper around ImageMagick (Imagick), so it's not "hidden polymorphism dying to get out", instead it's a library that supports N composition modes and that's it. The examples were showing changes to an API which I presumed to be at a level just above something like Imagick, as, being a thin library wrapper meant to expose the underlying library, it wouldn't make any sense for Imagick itself to have a drastically different API than ImageMagick. But the Imagick API isn't one that an average developer is expected to be interfacing with directly on a regular basis anyway. Rather, it's code that would typically be removed from you by at least another level of abstraction. If you're working on an abstraction layers itself, then I don't think any of the approaches being discussed here are very relevant to that scenario. Compatibility-layer code has always been a special snowflake. &gt; But even if we put this aside, saying "polymorphism!" doesn't solve anything here. Does it remove the extra parameter? No. It may move it around. It may actually double or triple the code again. Quite a bit of software architecture improvements can be distilled down to "moving things around", so your point isn't very convincing here. If done improperly, yes, you can make things worse. &gt; What does that even mean? All encryption APIs work with and expose "raw bits". _Higher-level_ (you conveniently left out that part) encryption APIs do not expose the raw bits being worked with/on. That would defeat the purpose of it being a higher-level API. &gt; Sara is comparing the performance of arrays with simple structs. A struct in the context of PHP means a naked class with no methods (and typically no constructor), and only public properties. A struct in the context of PHP is simply a class used for nothing but its properties. "No constructor" is a pretty arbitrary requirement that you've slapped on. In the prior examples, the VOs would almost certainly be "structs" in that sense. &gt; A VO is typically encapsulated, immutable, and in the examples here, it had a constructor (which adds significant overhead to initialization, compared to inline property initialization of a struct). A VO in classic DDD perhaps, but in the context that we're using it (as a simple typed data structure to keep related datums together), it's more like a struct. In a lot of other scenarios, it could (and should) be a VO in the more traditional sense, but the gains from immutability or encapsulation in this scenario would be pretty minimal. And, of course a constructor adds overhead, but that overhead is completely negligible on the scales that matter to us. By the time it amounts to anything, you would have to be doing something in PHP that you almost certainly shouldn't be, and, at that point, it's simply a symptom of a bigger mistake. &gt; Introducing objects where there were none (and no arrays) is a significant relative performance slow-down for low-level operations. We could say the same about "introducing a PHP process where there was none", yet you don't seem to have the same objection to using Imagick and doing your graphics processing within PHP when it could be done _much_ more efficiently outside of it. It seems like you might be cherry-picking your performance arguments here. &gt; I've measured them. Have you? Oh, great. Well, link me to your patched Imagick extension that implements VOs for points and sizes and I'll take a look. &gt; "Red flag"? OK, I guess it depends on what it means to you to have a red flag. "This method has 5 arguments" might temporarily raise a red flag for me too. But then when I see it's a low-level graphics API and the first arguments are target, x, y, width, height I'd put down the red flag and say "boys, false alarm, everything is OK!" And I'd completely agree with you on that point, but only because it's a lower-level compatibility-layer API. This whole thread feels like cross-talk to me at this point, as it's pretty clear that the original question and reply (as well as the comments that came after) were in the context of higher-level development practices.
&gt;There's a reason why modern HTML forms still support GET and POST only. It's because it makes no sense to send a HEAD form, and because the rest of the verbs are useless... The REST architecture doesn't require all those verbs, go check the paper. Sure, but it sure is nice to have them all available - remember why we're having this discussion now: I just pointed out PHP *can* handle other methods and there's no need for the `_method` deal. Even though I'm all for the full gamut of HTTP verbs where appropriate the point of this discussion is really just that OP's framework doesn't let you use them without adequate cause (ie it won't let you use them because OP got the idea somewhere that PHP itself is `GET`/`POST` only.) 
Too much static calls, they will make it harder to test. Try to use dependency injection wherever possible 
Uncle Bob is a retard. Watch people like sussman, linus https://www.youtube.com/watch?v=O3tVctB_VSU
I asked Douglas if it's cool to DEC64 for the internal implementation and he pointed out that public domain is more lenient than any other license so no problem, but I then came across [libmpdec](http://www.bytereef.org/mpdecimal/doc/libmpdec/index.html) which Python 3 now uses for their `decimal` module and appears to be better choice for it.
TIL! I've never seen anyone do that though. 
I don‚Äôt get all the hate towards him. He sometimes exaggerates, but it doesn‚Äôt mean, that he‚Äôs not worth listening to. The guy basically grew up with programming and knows hell lot of stuff about it. He also often tells why certain languages were build certain ways, which is sometimes really important in understanding the concepts. 
technically, you can just use cents as an internal value and only add the comma on output. But if you fail to output it correctly once, you have an error of magnitude 100... 
You could still use CMSs for it, but you could only really use the site-structure of the CMS. You'd have to write your own modules for it. But I suppose if you do something very specific, getting it to connect with the CMS existing systems will take you just as long as writing your own. On the other hand, I've heard of people using wordpress user-authentification only and writing their own pages around that... So people do weird stuff xD 
That's a bold statement and not easily given. You must be on to something.
coming from a Java/C background, you'll probably want to jump into OOphp right away. You'll find it bothersome at first, since objects in php are not implemented as "pure" as they might have been in other languages, but other than that, they work similarly. www.phptherightway.com should help you out too. With a professional background you shouldn't have issues understanding it. (might be a bit much for total beginners though) 
https://i.imgur.com/DK1ckG8.png
like this? &lt;?php $str = 7373625; echo substr($str, 0, 2) . str_repeat('x', strlen($str) - 2);
I'll elaborate a bit on it since a quick google yields many \*many\* results: Singletons are considered an anti\-pattern for reasons such as the following: \- Creates global dependencies \- Makes code harder to test \(A singleton uses ::getInstance, as opposed to just injecting the instance using a DiC\) which means that you can't switch those out as readily in tests \(e.g. for mocks\). This leads to the next point. \- Encourages tight coupling \(Not sure if you're familiar with the concept of loose coupling and high cohesion, but it is a good one\) The reasons above are just a few. I'm not saying you can't \*EVER\* use singletons, but I am saying they should be used \*ONLY\* when necessary, in very specific use cases \(Don't use a hammer when you should be using a screwdriver type thing\).
Definitely this.
yeah, thank you!
The first 10 minutes are spent ranting that we have to many languages. Up until 40 minutes he's talking about history. Then he talks about "too few women".
&gt;A monoid is a pipeline of functions. e.g. cat x | sort | uniq ; or F(G(H(x))). A monad is a monoid with smart pipes Smart how?
No need to be sorry JUST DELETE your pos
It is, but you have no access to it. 
&gt;80 minutes Haha, nope.
&gt; "too few women" Thanks, that's all I needed to know.
Hi, after reading the documentation I am still a bit confused about how the component works. Once the message is dispatched into the bus, there is a handler and sender processing the message, but what is exactly the difference between these two objects ? In the documentation : https://symfony.com/doc/master/components/messenger.html there is an example in which message is handled by handler and then passed to sender object where its sent as an email, but why its not sent already in handler method ? I though reciever and sender are used as a producer and consumer over the bus and handler takes care of processing the actual message (for example sending and email). If someone could describe the whole process of how the component work, I d be very glad. 
Calling him a retard is out of line. He, like most people, has views that I disagree with, but I consider his "Clean" book series (Clean Code, Clear Architecture, etc) a recommend read for all programmers. I think he makes some excellent points with regards to the training of programmers and how we're doomed to repeating the mistakes of the past and continuing to produce substandard code until we fix these issues.
The title is "the future of programming" and he only starts talking about the future at the 70 minute mark. That's how you know it's time-wasting trash.
Which makes perfect sense because you lead with: "too few women", Thanks, that's all I needed to know.
Found the soyboy SJW.
He gets an extra helping of derision because lots of people don‚Äôt like his political views.
THanks, was very informative article.
Personally I find any shopping platform and their design useful for understanding how I would do the exact same things in Laravel. Otherwise since laravel I will never go back to another commerce platform again. I cant stand the updates which destroy entire systems. Otherwise no. It is of no use.
wait this is bob martin: is he saying there are too few women or that there aren't? or both and neither?
Actually, we were only talking about Fowler's Money pattern, not a specific library that implements it. That said, I rather hope that they're basically synonymous for anyone doing this in PHP.
Yeah. That's exactly how it has bitten me.
I guess I got thrown of by the fact that OP linked to the library I was talking about.
Don't use OpenCart. The developer is toxic.
Watch the clip? He's wondering how there seemed to be more women in IT/programming back in his time (50/50).
OpenCart is great in that it's pretty lightweight and straight forward to learn. While the 3.x release has been kind of a disappointment, overall it gets the job done if you're looking for something not too complex to get an online store up and running quickly. We've been building marketplaces with OpenCart for years now and although I'm not a fan of the direction it's going with 3.x, we've been quite happy overall. As long as you don't plan to interact with Daniel on OpenCart Forums, you'll be fine :)
Ooooh, you're so edgy! Do AOL! Do AOL!
What you mean about developer is toxic? is the bad code?
I've tweeted about him several times: * https://twitter.com/juantreminio/status/464401440572997632 * https://twitter.com/juantreminio/status/689674463797882881 * https://twitter.com/juantreminio/status/689811307374075905 * https://twitter.com/juantreminio/status/690582593591377920 * https://twitter.com/juantreminio/status/801461641846095874
That's OK, you're not missing much. 80 minutes of very bad dad (uncle?) jokes, random rambling about the history of computing, including what's a *magnet*, what's a *vacuum tube*, how *a telegraph works* (I'm not kidding), how the *first computer languages worked* and stale theories from 50 years ago about "what the next 50 years of programming will be". Bob Martin was always a high noise/low signal presenter.
but i am lazy!
I'm kind of agree your idea, Laravel is pretty awesome but I think maybe is worth to know some other tools, like WordPress or OpenCart, to serve some cases quickly. That's why I think is worth to learn this kind of tools
Thanks for your opinion! Who is Daniel?
Wow.... this is really toxic! I've never ever see this kind of situation in open source env (except Linus) Good to know
Daniel's OpenCart's founder and the original lead developer. They have a larger team now, but originally he was the only guy behind the project. You'll hear a lot about his annoying behavior, but as long as you keep it in mind and don't try and argue your point it's not a big deal. We've found it much easier not to interact with OpenCart's core team at all. I covered this and some other peculiarities of OpenCart in my MultiMerch blog posts and Quora answers, so if you're interested I'll be happy to share the links with you.
Please do share the links!
I know them all already. I found drupal to be the best. After experiencing most all CMS it is extremely helpful when it comes to building my Laravel Apps. I would say the CMs is much faster to turn out a product but my Laravel apps are far better and not as bloated. 
Please share the links =D
You can find my OpenCart-related answers through my Quora profile and the (currently) two-part series on OpenCart problems in our MultiMerch blog: * https://www.quora.com/profile/Martin-Boss-5 * https://multimerch.com/blog/opencart-problems-bad-upgrades-releases-integrity/ There's more on OpenCart in our blog, too ‚Äì a few articles covering OpenCart 3 and the differences between OpenCart versions, a thorough overview of OpenCart, a guide to finding great themes and a few other things. Won't be spamming links, but you'll find them. Planning a few more on OpenCart's usability and interface design issues.
Any more recent demonstrations of toxicity? Those are five year old discussions. 
Don‚Äôt be an asshole.
On one of the GitHub issues: &gt; it was not ignored dick head why lie! are you a professional or not? professionals don't need to lie to prove a point they use facts! Ironic.
unfortunately the GMP module of PHP sucks. it doesn't handle floating point numbers at all, thus i use bcmath instead of GMP in php (note, this is NOT a limitation of gmplib, it's a limitation of PHP's bindings for gmplib)
important to note that it's NOT gmplib's fault, it's PHP's gmplib wrappers that can't handle floating point numbers. (gmplib has 2 different apis for handling floating point numbers, and non-floaty numbers, and PHP only implemented the latter)
You should not use the mpf_t for money even in C. From [the documentation](https://gmplib.org/manual/Floating_002dpoint-Functions.html): *The mantissa is stored in binary. One consequence of this is that decimal fractions like 0.1 cannot be represented exactly.*
Ah, I see! I'm already so spoiled by the DiCs, because that's how I define the Services as singletons; not using get `getInstance()` or so (and, when I did in the past, I almost always needed a `setInstance()` for testing =&gt; exactly what you're referring to I think). So, I guess I'm cool. I pride myself trying hard to make Services qualify as singletons which means that in 99% they don't have a local state and the data only "flows" through them. In that way, it's very useful and efficient to only have a single instance floating around in the system. 
Sure, and also LONG. The current behavior of turning the variable into a float when an int can't hold it anymore is really fucked up. Most webapps don't have a problem with this, but it's weird anyway.
Just spamming your channel around? This has nothing to do with PHP.
*rolls eyes*
Pretty much depends on OP's reason behind the decision to start learning new tools. OpenCart does a great job as a simple tool for building online stores that you can modify to suit your needs ‚Äì so if that's the main reason, it'll do great. On the other hand, if the main reason is to learn something new, exciting and promising ‚Äì OpenCart might not be the best choice. But then again ‚Äì I wouldn't really call building online stores with WordPress+WooCommerce an exciting venture either and alternatives like PrestaShop and Magento have their own issues.
So, if paramater count exceeds four, I usually flesh a class(es) to inject. That seems like what's happening here with the instantiations?
He doesn't give a clue about what to do or why the situation is like that now . He basically state the obvious by saying "Yeah few women in IT now" ...Wow , real genius there... 
Absolutely awful talk , nothing is correlated to anything. Start to rant about too many languages ( doesn't even follow up about this nor the state of JS ) then there is too few women in IT (all aboard the diversity train please !) then talk about agile , but he doesn't even get to the point of "The future of programming" . I expected Serverless , AI assisted code editor , AI Driven design , Reactive Micro-Services , none of that is present just an old guy talking about what he had in his mind and being super proud of himself for that. That was insulting to watch.
I mean, ever job I have worked at has been male based. But like who cares, if you want to be a programmer, be a programmer. Like who cares about your gender, orientation, pronoun .... If you want to be something, be it. Don't complain about it.
[Here's the library source](https://github.com/koselig/library). It's pretty small, the whole "getting Wordpress running on Laravel" part is [relatively simple](https://github.com/koselig/library/blob/master/src/Providers/WordpressServiceProvider.php) with a few hacks. It's so powerful though, working with it is a dream! [And here's the original post](https://www.reddit.com/r/laravel/comments/8frzk4/i_wrote_a_toy_library_a_few_years_ago_to_run/).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [koselig/library/.../**WordpressServiceProvider.php** (master ‚Üí f916d34)](https://github.com/koselig/library/blob/f916d34c690dc9012bf78e64e3bb269787e50548/src/Providers/WordpressServiceProvider.php) ---- 
You should go see Grady Booch.
Then purge it.
If there's enough of a community that you don't need to interact with the core team, why not? I would make an educated guess that core developers for popular open-source projects are way over-worked and probably under-rewarded (like a lot of people) and most people could get by with interacting with someone less central to the project. 
I enjoyed it, thanks for posting!
I feel like it‚Äôs not that simple and we could use a little nuance in here...
What are the benefits of template engines and what do you think about Smarty?
&gt; The main point Bob eventually gets to is that we as programmers will inevitably be regulated in the same way other engineering disciplines (or say, doctors/laywers) are. The problem he misses is that software development is still very immature. Many of the "recommendations" I've heard from "Uncle Bob" have been worthy of being in /r/programmingcirclejerk (in fact [his article "The Dark Path"](https://www.reddit.com/r/programming/comments/5njjjh/uncle_bob_argues_for_languages_that_let_you_shoot/) deservedly got into it). What are the rules or norms that developers are supposed to follow? The ones he likes? The ones I like? And if they are too abstract and general then they would be worthless.
If you want to see proof that there is an actual problem in Computer Science and women compared to women doing other scientific jobs watch the video at minute 46 for a couple minutes. Just because you haven't been discriminated against doesn't mean that everyone has the same opportunity and career opportunities that you have.
No one said anything about discrimination until now. All I‚Äôm saying is if you want to do something, do it. 
How is it not that simple to get into the tech industry. 
Women in CS declined since '85. Either the social environment has become increasingly less accepting of women or women are not that interested in CS and they have opportunities to do something else AND they choose to pursue those opportunities. Given there is always 100% of women split by domain the decrease in CS and increase in law and medicine implies that the misoginy in CS men is extremely high compared to doctors and lawyers. Doubtful to say the least. Btw, do you even james damore?
Ya, using the word discrimination was probably me subconsciously trying to make sense of the situation. But ya nobody really knows why.... Interesting situation.
Most of what I read on the subject years back talked more about the targeted audience being primarily male and that's what should be changed (though - to me in my world bubble - it has changed).
&gt; working with it is a dream! A scary one that makes you wake up covered in sweat? What does running WordPress on Laravel do for anyone?
&gt; I'm not sure what you mean by having data "flow" through your singleton services, With that I mean that usually, in the best and most cases, the constructor only defines some dependencies which are being injected (inc. config values, which are usually immutable) and every method call only has input/output but rarely I need an intermediate state being saved in a property. Data flows, mostly gets transformed and then is returned. User/Request objects gets in, queries are run, result is adapted/transformed and returned. &gt; Have you asked the question of "why" is it necessary (to make them all singletons) and "how" much more efficient it is? I did approached it differently: whenever I saw a certain class doesn't depend on a state, I mark it as singleton because in that case there's no reason to create multiple instances. It's also somewhat a signal to other developers what the intent of this classes is and introducing state shouldn't be done unless absolutely necessary. When I write code I try to apply my best knowledge of OOP as well as the best practices I know about FP. The latter is usually the expense of more explicit arguments passed around and the benefit of easier testing code because except other services usually everything is passed around by argument and thus can be easily tested that way.
So you put two things people in PHP seem to hate, yea, people are going to downvote out of spite. A pretty cool idea, well done.
the issue is now that users have to install or understand how to install laravel no? like this isn't a plugin, this seems like a foundation.
no one hates either of these. so I am not sure what youre talking about. there are people with their own oppinions - but a lot of them, not all of them but a lot, seem to be jumping on the band wagon of "hate for the sake of hate"
I'm confused by this statement, at first you say no one hates either of these. Then in the next line, you say that a lot of people of people are on the bandwagon of "hate for the sake of hate". These seem to be contradicting each other. WordPress is definitely hated, the codebase is terrible so people want to be snobby. With Laravel being a lot it or hate it framework. Saying no one hates either of these is a bold statement to make when people hate everything and anything for various reasons.
Well I would assume if you're building on Laravel you would want to do that? I assume the use case is you have a blog section on your website but you also have a bunch of very complex logic that you also need on the website. So you would integrate WordPress so the content people are happy while being able to avoid having to write complex logic in the WordPress plugin system.
I'm not sure that he misses the point that software development is immature. I think he's merely suggesting that without any regulatory body anyone can call themselves a software dev; therefore how do you know if someone is proficient enough to do it professionally? I think we can all agree that someone who just learned 'hello world' probably shouldn't be responsible for implementing self-driving cars, so where do we draw the line? In terms of what that regulation looks like, I would have to agree it's difficult to say. I personally don't know how these other regulated industries came to agree on their rules; nor does it make sense to me that any single individual (Bob or otherwise) would hand down a set of rules which everyone would have to submit to without debate. It feels like it would need to be a long process involving many folks, perhaps similar to how technical standards such as ECMAScript or HTML are handled. It's not an easy problem nor one that I personally have much interest in solving. It doesn't mean it's not worth considering.
How about [Sylius](https://sylius.com/)? It's an open source eCommerce framework on Symfony. You already know Laravel so you'll love it.
I recently started working at a new job and they use OO PHP on some of their projects. I've worked on enterprise level PHP applications multiple times so I'm not really new to it. But at this place the architect wants us to create an object interface every time we make a new class. It's not really that much extra work, so I don't really mind it. But I just hadn't seen this before and was wondering if it was normal practice, or it's just how they do things here. 
This is a foundation for a new website. This is for much more than just blog posts, it's sort of narrow minded to think a CMS such as Wordpress can only be used for blogging. Using something like Advanced Custom Fields' [flexible content](https://www.advancedcustomfields.com/resources/flexible-content/) you can create "blocks" that the admin of the site can use to build pages comprised of these blocks and instead of writing the logic to those blocks (and the rest of the page) in Wordpress' horrible theming system, you can now do it in Laravel. If you ever work at an agency, you'll find many of them use Wordpress as the basis for a lot of their websites simply because of the ease of use for their clients (less developer time spent updating content). Many of them use bastardised versions of Laravel like [Themosis](https://framework.themosis.com/) which are just a few Laravel framework components and a nice folder directory.
Definitely not every time, no. Things that cross subsystem boundaries may have interfaces even if there is just a single regular implementation. This allows for ad-hoc implementations for testing.
&gt; how programmers need to take responsibility for their actions. Until the profession is regulated and devs are protected from employer retaliation for refusing to do things that are insecure/unethical, it's not going to happen.
As I see it there are 2 options: 1. Status quo - unregulated, employers are liable for bad code, whether intentional or not, whether the code is bad because the programmer was bad or because he was forced to be bad by external forces (time constraints, "don't bother writing tests" etc). 2. Regulated - we have a license we can lose if we don't abide by some common standards and practices. We can say no. If we fail to meet those standards we may be held individually liable for violating them in addition to losing the license. There are pros and cons to each.
Pretty much it's still Laravel, Symfony, and Zend leading the pack. I think Laravel has a total overall higher developer count.
&gt; architect wants us to create an object interface every time we make a new class. Is his primary experience with C#?
No. He said he didn't use to, but he found that he'd eventually have to write one anyways so now it's expected that you write one each time. 
I only create an interface when/where it makes sense to do so. Namely: If there are going to be multiple implementations of something that solves the same problem (e.g. third-party API integration).
Now the only thing we're missing is a more flexible spread/splat operator. These scenarios work in ES6, but not in PHP: $bar = [4, 5, 6]; $foo = [1, 2, 3, ...$bar]; // [1, 2, 3, 4, 5, 6] $baz = [...$bar, 1, 2, 3]; // [4, 5, 6, 1, 2, 3] $qux-&gt;foo(1, 2, 3, ...$bar, 1, 2, 3); // Calls foo(1, 2, 3, 4, 5, 6, 1, 2, 3) 
Or if you want to mock it for testing purposes
I hate people who do this. Nowadays it‚Äôs so easy extracting an interface. And when debugging, and I reach an interface and see it only has one implementation it really grinds my gears. 
Bob Martin is more of a marketing guy than a programmer. He knows that saying "but the women!" is enough to get PR points these days, so he says it.
Thanks for the headache.
This is still one of his better talks. He likes to open most of his talks by giving a random lecture on physics or chemistry. I'm not kidding.
&gt;I think he's merely suggesting that without any regulatory body anyone can call themselves a software dev. And anybody can call themselves a basketball player. &gt;therefore how do you know if someone is proficient enough to do it professionally? I think we can all agree that someone who just learned 'hello world' probably shouldn't be responsible for implementing self-driving cars, so where do we draw the line? The line is being drawn by companies. You think Google is hiring Drupal developers for that? Companies are actually pretty good in checking if someone is actually good for what they need. &gt;In terms of what that regulation looks like, I would have to agree it's difficult to say. I personally don't know how these other regulated industries came to agree on their rules... As someone formally educated in telecommunications engineering I think it is because it is a mature field. For example if you want to define how to distribute the cells in a cellular network you have basically a clear process and clear physical models to use for that. There is already software out there that already does the work or almost all the work for you. In software even for simple things like decision branching you have different ways of doing it and there is nothing there to make you say what's the right path to walk other than "I think this code is more readable this way". &gt; nor does it make sense to me that any single individual (Bob or otherwise) would hand down a set of rules which everyone would have to submit to without debate. It feels like it would need to be a long process involving many folks, perhaps similar to how technical standards such as ECMAScript or HTML are handled. HTML is actually a pretty good example of something not working. The W3C was a failure, browser developers decided to do their own thing and now the W3C recently decided to take arbitrary decisions that is getting angry the browser developers that have 99.9% of the market share. &gt;It's not an easy problem nor one that I personally have much interest in solving. It doesn't mean it's not worth considering. But it has been considered before and the result has been the same. Uncle Bob's is not adding anything to that old debate.
This is very interesting, but I'm struggling to find a practical application for the day to day that's not made more complex by using something like this. Perhaps I don't fully understand it? 
There is not a one on one relationship between classes and interfaces, so no. A great example I ran into recently with a bunch of guys who thought that they have to create interfaces for every class, since you're supposed to program against interfaces, right? So, they had e.g. an interface called `Md5Token` with a `generateMd5` method on it. This is obviously pointless since the interface is way to specific. You might have `Token` interface with a `generate` method that can be implemented by an `Md5Token` class as well as a `Sha1Token` class. 
I typically do so when as part of isolating my code from a a third party dependency or I'm writing something that could and will be implemented in different ways. Also when publishing functionality as a library. Things like entities surely can implement interfaces, but it would be crazy to interface them individually. 
Do a search for "idiot" or "moron". Those seem to be the lead dev's favorite insults.
 I have use `corcel/corcel` to do same thing
One of the hard requirements we had was the ability to keep using Wordpress plugins :( That ruled out corcel immediately unfortunately.
The CMS with the most add\-ons is probably WordPress, so that's where I'd start. Or look for something open\-source that's 90&amp;#37; of what you need, and hack it. Maybe Limesurvey? There are lots of vertical market PHP products on CodeCanyon that might provide what you need, or close to it. But long term, if this is for a real commercial project/service rather than a bit of fun, you may find that you have to write something yourself from scratch. I spent \*weeks\* looking for something that would fit my needs, but ended up having to write something from scratch. I don't think you need a CMS. So if that's what you're googling for, that's probably why you're failing to come up with something. Look for more relevant keywords. Eg polls, surveys, voting etc. But take care with the "just get going" attitude. Make sure you end up with the system you wanted, rather than the one that was forced on you by the codebase you had to use. Spend some time thinking about the functionality you want, and THEN look for some code that implements it. And be prepared to walk away if the code doesn't do things the way you want it to.
ugh. please no. i love when people start coalescing nullable strict types let wait wtf are you doing. function strongInt():int { return "1hello"; } function strongerInt():int { return "hello1"; } function strongestInt():int { return 3.9415926535; } function cmonNow():bool { return "wtf"; } strongInt(); // returns 1 strongerInt(); // typeerror strongestInt(); // 3 cmonNow(); // true of course just say no. credit a blog at web-techno.net about this. 
It has nothing to do with "getting into the tech industry" and everything to do with how they're treated once they're there. Lower salaries, stunted career growth, general sexism, etc.
&gt; In PHP 7.1 the array type has become even more powerful! This phrase should strike fear into the hearts of experienced PHP developers everywhere :P 
`declare(strict_types=1);` FTW
Don't need an interface to mock a class, although one caveat to that is that mocking finals is very difficult and it's easier to mock an interface when possible. If your code type hints a final class instead of its interface or if your final class has methods that aren't in the interface then you won't be able to use a mock of the interface. I've come across this and thankfully have been in a position where I can fix the code to make the tests easier to write. 
No way! I only create interfaces when I need to hint for something that could be swapped out later. Otherwise, my code gets cluttered with tons of extra files that contribute only extra indirection. However, interfaces are absolutely invaluable when it comes time to mock something out, decorate an existing implementation, or provide third-party developers an extension point. I'm still working out the details on exactly when to use them versus not, but I have discovered a few things over the years: - Whenever I want to type hint for a particular class, it's usually a sign that I should create an interface. - The exception is for helper methods, which are frequently private methods on some class. If I know that I'm looking for an object of a specific type, I just hint for that. Since these methods are explicitly local, the hinting is more for self-documenting code than for any external users. - Some classes exist as internal implementation details that are not intended to be visible or used outside of the local context. These may be nodes in some data structure, for example. Classes like this wouldn't be documented for external users, are more likely to be created inside of, rather than injected into, constructor functions. They're part of the internal working of the consuming class, subject to change at any time on my end, and are not a part of the published interface. As such, an interface would be counter-productive. Classes like this are fairly rare for me, but they occasionally pop up. - If you make a class that you later want to convert to an interface, it's actually quite easy to refactor onto the interface without even breaking backwards-compatibility. Just extract an interface with the used methods, make the class implement the interface, and update all consumers to use the interface. I did this once on a library when I realized that a particular class needed to be able to be swapped out for other implementations.
Is ‚Äûdeconstructuring‚Äú some fun pun i never heard before?
[removed]
if I expect a class function to accept an interface of X, then sure. But usually no. Only if I am basically saying: "I have this implementation, but it might not work for your use case so there's the interface". At that point method interacting with said interface as a named argument would use the interface instead of the "predefined class"
The array in php is hands down one of the worst things about the language in my opinion. 
Don't even bother consider working with OpenCart. It is badly written. It is a mess. In the version 2 the extensibility was nought. There was no clear separation between the user code and the application. The way to add new features was to edit the code of the platform or to use a system that inject code in runtime into the platform... I did not work with OpenCart 3 yet, but at first glance, it looks like it is still the same. I would not advise you to use this platform for anything more than the basic features.
What about performance? Is it faster to use plain PHP or template egines are faster?
Try https://www.reddit.com/r/PHPhelp/ Also your arrays are identical.
Total differs
I know right, it's like the root of all bugs. PHP desperately needs structs, or [shapes from Hack](https://docs.hhvm.com/hack/shapes/introduction).
Most accurate metaphore I have seen in a while . Just an old guy rambling.
Nope, that was me yet to find out I've been incorrectly naming this feature for the last 5 years.
 class MyStructure { public $foo; public $bar; public function __construct($foo, $bar) { $this-&gt;foo = $foo; $this-&gt;bar = $bar; } } $myStructure = new MyStructure(42, "hello world"); How does that not already solve the structure thing?
You should've mentioned two more things. Undefined indexes (even when it is just a notice): ``` ['does_not_exist' =&gt; $a, 'b' =&gt; $b] = ['a' =&gt; 1, 'b' =&gt; 2]; // shows Notice: Undefined index ``` Skipping values: ``` [,,$c] = [1, 2, 3]; // $c = 3 ``` https://3v4l.org/ZM3p9
Hey, thanks! For me the practical application was about validating (big and complex) json inputs against a (big and complex) domain model built out of immutable value objects (i've gone into a bit more detail about it above). In general, whenever you'd use array_map or array_reduce but you have a tree instead of a list this lib should have you covered. Ultimately I think it boils down to how people write code. Those who write more functional code will probably have greater use of it that those who don't.
Magento 2 - you'll learn to debug the core and good methodology that will pay for itself given the number of users!
I wish they have a --with-old-countable magic it gets old patching the same countable interface (disable warning) every revision!
The problem is that it lacks type safety, since you can't type hint properties; so you have to write a class with private properties and getters every time you want to pass data safely between services. Some people can never be bothered, so they just use an array/dictionary, and _hope_ it's what they're expecting to look like. But yes, you should be using classes. It's just overkill sometimes, and makes the language quite exhausting to work with if you haven't got an IDE to generate most of the code for you.
&gt; ~300-400 ms Wow. Those are high numbers to my knowledge. Are you counting latency to a very distant DO droplet?
that's daft. I mean, yeah, add one if you need it but only if you need it.
Isn't there already krumo and kint and others with similar purpose that one can freely pull from packagist?
Bing is a decision engine
Which one do you recommend?
No, but what I do is I don't append "Interface" to the names of interfaces, which means I can easily start with class named, say final class ImageResizer {} ...and then with zero B.C. code breaks transition this to: interface ImageResizer {} class ImagickImageResizer implements ImageResizer {} You don't have to know what you'll need years ahead of time, if you plan for smart and easy refactoring.
Overall, I'd say the talk is OK. My understanding of this talk seems to be wildly different from many others. Maybe it is an age difference. Maybe it's because I've read and listened to some of Martin's other work. I don't know. The history on hardware, number of computers/programmers over time, etc. is not meant to be a fluff history lesson or presentation filler. The lesson is if you can write software today then you can read and write software written by someone in the 1940s and that person can read and write yours. Software today is fundamentally the same thing today as it was back then, only the syntax has changed. The other history lesson is we (as an industry) generally keep making the same mistakes and we're on course to repeat history again: (1) software is still the same stuff it always has been and we keep messing around with new languages. To this day we're still claiming this is productive but this can't be true indefinitely and Martin definitely thinks we've crossed that point; (2) early programmers had an agile-like method, this was lost when these older professionals retired in the '80s and '90s, then in 2001 we got agile, but the wrong people (business people, not programmers) joined and hijacked the movement; (3) we will get an agile-like process again, most likely through forced regulation unless the industry comes together to self-regulate like the medical, legal, and other professions. Also, Martin's point about younger programmers seems to be lost. His point is younger people are being taken advantage of and they lack the professionalism and discipline as a whole to see it themselves. The number of programmers doubles every 5 years, so within 5 years you will be part of the old guard. Become a leader, try do something about these problems. He mentions a lack of women and diversity, total time spent in this video talking about the lack of women is &lt;5 mins. This topic seems to trigger many people (esp. the youtube comments). Martin is treating the lack of women currently in the field as an open problem---meaning, he says it's a problem and he has no immediate solution for it---but he talks about his experiences. He states that (1) the number of women used to be close to 50/50; and (2) the other sciences don't have the same problem as computer science does. (TL;DR is roughly "lack of women is a problem, we need to figure out what to do, here's my experiences maybe someone can figure out why we went from close to 50/50 to what we have now.") Timestamps/table of contents: * [0:10](https://youtu.be/ecIWPzGEbFc?t=10) Jiminy Christmas * [0:22](https://youtu.be/ecIWPzGEbFc?t=22) Gauging his audience's background (iOS devs, Objective C, ...) * [0:50](https://youtu.be/ecIWPzGEbFc?t=50) Objective-C history; parallel history with C++; C lineage * [7:00](https://youtu.be/ecIWPzGEbFc?t=420) Obj-C unfortunately resurrected (Apple/Jobs/NeXT/back to Apple) * [8:54](https://youtu.be/ecIWPzGEbFc?t=534) Gender Experiment; Gender differences in his early career vs mid and late career * [11:12](https://youtu.be/ecIWPzGEbFc?t=672) History - Turing; Annotated Turing; Turing inventions (subroutines, macros, variables); early hardware (relays, vacuum tubes, memory delay lines) * [22:17](https://youtu.be/ecIWPzGEbFc?t=1337) Turing's report about his work, claims: 1. "we will need mathematicians of ability" - referring to training Mathematicians how to code 1. "a good deal of this kind of work will need to be done" - referring to the act of coding itself 1. "our difficulties will be in the maintenance of appropriate discipline so that we don't lose sight of what we are doing" - referring to the need to maintain the code we've already written * [24:22](https://youtu.be/ecIWPzGEbFc?t=1462) number of computers/programmers in the 1940s, 1950s * [25:16](https://youtu.be/ecIWPzGEbFc?t=1516) the memory problem; magnetic-core memory * [28:03](https://youtu.be/ecIWPzGEbFc?t=1683) languages; Fortran; turnaround time of a program in the days of computer operators * [33:10](https://youtu.be/ecIWPzGEbFc?t=1990) Lisp; IBM 70x computers; number of computers/programmers 1960s * [35:00](https://youtu.be/ecIWPzGEbFc?t=2100) Programmer's from 1950s were scientists, engineers, mathematicians---generally older, mature adults; (1965-ish) transistor replaces vacuum tube; IBM 1401 machine/decimal computer * [37:04](https://youtu.be/ecIWPzGEbFc?t=2224) Number of computers/programmers increasing significantly; Not enough scientists, engineers, mathematicians so programmer's were best/brightest from various fields---programmers were still generally older, mature adults * [39:11](https://youtu.be/ecIWPzGEbFc?t=2351) 1960s: IBM 360s; Simula-67 / object orientation; structured programming; C, Unix * [41:45](https://youtu.be/ecIWPzGEbFc?t=2505) 1970s: DEC PDP-8s; number of computers/programmers; programmers trained in computer science, electrical engineering - almost all young, almost all male * [44:30](https://youtu.be/ecIWPzGEbFc?t=2670) 1980s: names of all the women Bob probably ever worked with; graph of the percentage of women (0-50%) over time in years (1970s to 2010s) in all science fields vs computer science; business needed programmers, programmers were young men---made up for their lack of discipline with energy (long hours, hyper focused) and they are cheap labor * [47:31](https://youtu.be/ecIWPzGEbFc?t=2851) Programmers being young---not knowing how to manage projects, responsibilities, or time---started to need management and processes to meet business's needs; older generations used agile-like processes---work cycles ("sprints") of 6 weeks; writing tests in the morning, getting them passing in the afternoon * [49:33](https://youtu.be/ecIWPzGEbFc?t=2973) Younger generation disciplined via the waterfall method; number of programmers doubles every 5 years; software is perpetually a new, young, and inexperienced industry * [52:20](https://youtu.be/ecIWPzGEbFc?t=3140) Hardware/demographic changes; physical space of transistors in your phone vs as if it were vacuum tubes * [55:39](https://youtu.be/ecIWPzGEbFc?t=3339) "The future of programming" is more of the same because the software is what hasn't changed throughout history; you can read/write old code; dead programmer's could probably read/write new code; the syntax has changed, but the concepts are still the same * [57:44](https://youtu.be/ecIWPzGEbFc?t=3464) Learned, and learning, what not to do; lost professionalism/discipline in the field * [59:34](https://youtu.be/ecIWPzGEbFc?t=3574) 1995: professionals retiring; career programmers hitting 40s+; agile manifesto; agile is about discipline, professionalism, craftmanship; business doesn't understand refactoring, testing, etc---programmers as professionals need to own that risks; wrong people got certified for scrum/agile * [1:09:46](https://youtu.be/ecIWPzGEbFc?t=4186) What must change: we must define what it means to be a programmer; we need leaders---software runs everything, people don't understand us, we don't understand our discipline; programmers knowingly wrote code that cheated emissions tests, a large disaster is like inevitable, regulation will come---best to self-regulate before it's forced 
You‚Äôve the right attitude :)
&gt; It irks me to no end that `+` behaves differently than `array_merge()` It'd be pointless to have both, if it didn't, don't you agree?
&gt; The problem is that it lacks type safety Let's see this problem from different perspective. Firstly we need to agree that we need ability to specify types and it's not required that this types will be checked in runtime. This would allow to have generics, typed properties and so without any performance drawbacks (this is the reason why we don't have property typehits or types for variables so far). Instead of runtime checks we could use static analysis tools like psalm for example (which has option to fail if it not managed to detect type, so you will be forced to explicitly provide type, and since it uses type inference this would require not as much from you as developer). Then let's remember the one difference which makes php's arrays perfect to be a simple DTO. Objects in php always passed by value, so this is the reason why we need all this private propeties and getters instead of just class which some amount of phpdocs. And tools like psalm already allows you to make shapes for arrays. /** * @psalm-return array{id: int, name: string, age: int} */ public function buildSomeDTO(): array { return [ 'id' =&gt; 1, 'name' =&gt; 'Bob', 'age' =&gt; 31, ]; } The problem is only that we can't have type aliases or something like type declarations for arrays which means that we are limited only by inline declaration, which isn't that handy.
What's the point of the alternative constructor [here](https://github.com/wvoelcker/project/blob/master/src/Controller.php#L10) when it does the exact same thing as the actual constructor?
I really don't get how this isn't standard...it's so _obviously_ the better way. But although it's not actually specified, example code in psr-2 uses the Interface suffix. The only argument I've ever seen against it is "but then I can't tell from looking at a filename whether it's an interface or not" which is such a strange requirement I don't even know how to begin arguing against it. Even ignoring your refactoring argument, the semantics behind what you're typing makes way more sense without the suffix. If I need an `ImageResizer` it's because I wan something that can resize images. If I ask for an `ImageResizerInterface` then I'm saying "not only do I want something that can resize images, but by God you'd better have used two or more files to implement it."
This is a mostly knowledge-free article telling people that they should keep PHP up-to-date, which is never bad advice.
Now look what you've done. This garbage is boated into the stratosphere so everyone has to waste time looking at it.
WooCommerce is definitely a safe bet whether or not you are familiar with WordPress.
[Sylius](https://sylius.com/) looks is the best one on the market IMO. 
As far as I can tell, this is the only vulnerability listed: https://nvd.nist.gov/vuln/detail/CVE-2018-5712#vulnCurrentDescriptionTitle "An issue was discovered in PHP before 5.6.33, 7.0.x before 7.0.27, 7.1.x before 7.1.13, and 7.2.x before 7.2.1. There is Reflected XSS on the PHAR 404 error page via the URI of a request for a .phar file."
Now that you mentioned it, yep, I think json schema is trying to solve the same problem I had. I personally much prefer separating data from interpretation, let me try to explain why: 1. With json schema you're giving richer semantics to the underlying json, your data. To do this however, you are stuck with whatever is defined in the spec, which will likely never be a perfect fit for your domain. So it will always be some intermediate step before another layer of validation/interpretation. On the other hand if I already have my domain codified by my types to my exact needs then all I really want to do is interpret an input (eg. json) and accept it into my domain if it's correct or reject it if it's not. There's no need for double effort. 2. It gets more interesting as you build up your domain and your larger composite types have their own invariants in addition of their component's invariants. A simple example would be a `DatePeriod` type, which is a composite of a `StartDate` and an `EndDate`, both are `DateTime`s, but with the additional constraint that Start has to be before End. This is trivial to codify in your domain, but afaict not in json schema. And even if it is, as you domain becomes richer and more complex there will be more and more value in composing smaller types into larger types (aka. algebraic data types). Having to rely on json schema to define something sufficiently complex sounds like an arduous and error prone exercise to me. 3. Once you have a declarative definition of your domain with which you can interpret data then you can easily extract that definition into a documentation that is alive. This eliminates any sort of mismatches, where the schema says one thing and the code another. Back to Treegami, it is just about separating a structure (tree in this case) from the information it contains. It knows how to traverse and transform the structure itself without knowing anything about what we'll do with the underlying information.
Exception handling
Clearly the exploit rhymes with "Sonic rainboom."
If you're talking about syntax errors (typos etc) then you could probably get your text editor to check for those each time you save.
I know it's bad practice -- and 90% of the time I would never consider doing this. That being said, I'm doing this for small WordPress sites and it's really only to introduce 20 - 30 lines of code for layout purposes. Anything larger than that I do on my dev environments. 
I can't see how that's any simpler. If you have a working dev environment it doesn't take any longer to make the changes there than it does in a production environment. If anything it should be smoother. I wouldn't take the risk personally.
Oh my god I can't help but read Daniel "Scurvy" Kerr's tweets in Donald Trump's voice. CANNOT UNHEAR.
&gt; It also works when you're using variables in the source array, so you can effectively swap variables using this syntax: ``` $a = 1; $b = 2; [$a, $b] = [$b, $a]; ``` .... don't give people ideas. But yes, array destructuring has been a blast since 7.1. 
If you're talking about syntax errors, you can use includes, because then the rest of the page won't fail. I.e. &lt;?php if ($devMode) include 'yolo.php' ?&gt;
Or just run php -l myphpfile.php Right before uploading it to your server (that's a lowercase L) to check for syntax errors/typos
I agree, that something like that is a great step in the right direction, or even public class fields that can be typed. The real issue though is that php arrays are somewhere between a map, a json object, and an array. I just want a real array. array_values shouldn't need to exist as a function. 
You've the wrong grammar :) 
display_errors should be set to off in php.ini if ($developmentMode) { ini_set('display_errors', 1); } and I guess you can wrap everything in a try { ... } catch(\Throwable $e) { ... } but this is horrible practice as everyone's mentioned. You should look into using git + creating a staging/production environment. If you can't reproduce an edge case from production in staging, then you need to log more information from user interaction.
Use try...catch...finally construction and Exception handling.
There are several cases where there's duplicate functionality and aliases throughout PHP. To me I find `+` doesn't behave logically. I would assume `append/additive` and not `merge/or`. For numerically indexed arrays `+` behaves differently than `array_merge` and _not_ in a way I feel is intuitive. You would think `[1,2] + [3,4]` would result in `[1,2,3,4]` but it results in `[1,2]` where the `a_m` results in the expected result of appending. Once they become proper hash tables `+` and `a_m` behave opposite of each other where the former uses the left most array as precedence and the latter the right most.
I'm pretty sure they are only replicating the bug tracker and putting a clickbaity title...
and hence the PHP bad rep...
Honestly https://www.cisecurity.org/ should be blacklisted on this sub by now. If a mod reads this, please react.
I don't know that one knowing Laravel would make one love Sylius. I like it, but, i don't think there is a correlation there.
WooCommerce or Magento will probably serve you the best, in terms of what you are likely to be asked to work with. I would second Sylius though, as far as what i would prefer to work with.
"How" it works is a different issue, and I agree that the way `+` works isn't exactly intuitive.
DONT FUCKING DO THIS JESUS CHRIST test on localhost in a development environment. get a dedicated staging server so others can test your changes before releasing. 
Yeah you're right. I was trying say both of them are modern and have similar enjoyable learning curve.
&gt;This way I can make edits to live sites and test in the live environment http://i0.kym-cdn.com/photos/images/original/000/665/542/464.png
I can vouch for their support - friendly, quick to respond (they're US and we're in UK) and really knowledgable about email.
I like how reddit is different from Stackoverflow, on SO OP would get -5000 karma immediately for that kind of question, here he actual has +5 :)
It's not a bad question \- just bad practice! If people are discouraged from asking questions, they'll keep doing things like this without ever learning.
I‚Äôm not saying it‚Äôs a bad question, without questions there is no answers, so you might never know without asking, I‚Äôm just saying it‚Äôs funny how different the reactions are. 
&gt;PSR\-11 makes total sense, I'll do that, as soon as possible :\) thanks!
I also wouldn't get such tribal responses to a simple question :)
https://probot.github.io/apps/stale/
It's not a tribal response because everyone is saying the same thing - it's a best practice to have separate staging and live environments and for very good reason.
Premature abstraction will mean you will most certainly design abstraction wrong in the first place. Create interface when you start needing it, not before. Caveat: this is specific to applications only, not libraries.
name checks out seriously don't do this. put you code in git, test locally, push to production. that way you can sleep at night
Sorry! I wasn't disagreeing with you \- I apologize if it came across that way.
Yeah I meant it as in "if you got no dedicated tool for it"
This is nothing specific to PHP, are you just sharing your blog around? 
["This is a security release which also contains several minor bug fixes."](http://php.net/archive/2018.php#id2018-04-26-1) I'd like to suggest that future 1-2 sentence summaries give at least SOME kind of info about what was fixed. Yes, someone can look at the changelog, but that doesn't mean a good summary can't be written. (just a suggestion - not trying to bash on you or anyone else. &lt;3)
Some obscure ways a server can be crashed were fixed. However, the main culprit is probably [CVE-2018-10547](https://bugs.php.net/bug.php?id=76129). It is a continuation of [CVE-5712](https://bugs.php.net/bug.php?id=74782) which can be exploited to do XSS attacks.
Great idea, thanks for sharing!
I don't run big oss project so I don't use any. I have no experience with bot I linked either, I have just heard about it. I would like to avoid these when I can though. On smaller scale it's better to treat issues on case by case basis imho.
I see. Well, in reality, the smaller scale grows and you have to decide to either ignore issues, be frustrated and put that into replies with anger or short answers or burn-out on overmaintaining. I'll try the bot myself and see how it works in my workflow.
I'd not, 'd I?
The main reasoning behind this, is that I have branches that I release every every 2 - 3 weeks, and then hotfix brances that I push every 3-4 days. I manage just over 95 sites and sometimes I need to make a very quick change, but I don't want to roll out the current hotfix branch just yet. Surprised I got so a bad reaction in here for this question. Had I been an actual noob at this I probably would have been a bit more dismayed by this community. 
If Robert Martin were to read the comments here, his reaction would probably be: &gt; *These "boys" of programming /smh*
Exactly, I frequently create repository interfaces because they're good boundary points for things like testing, adding additional services like caching, etc.
can anyone suggest any sites or resources that I can use to really practise my knowledge of processing arrays, array manipulation etc in php ? Basically, I need to brush up on everything to do with arrays and looking for practise resources to test myself. Thanks
I agree... here's an upvote cause others seems to hate the messenger.
Did you try anything? Where does that value come from? Where are you having trouble? 
I don't try i ask is it possible
Yes it should be possible, on the back-end insert the value using SQL and request it dynamically with javascript on your website.
Another one bro I try to create a coinmarketcap website using api but my values in the table are display one by one only but I want to display that table values in one shot How to do this?
There are too many tutorials on the internet. If you're going to do this, then atleast use mysqli. Google it if you want to know why. 
Thank you
I'm not sure if I understood that, do you have any examples or any other details?
I have video clip 
&gt; atleast *at least
phpMyAdmin is not itself a type of database. Your database is either [MySQL](https://en.wikipedia.org/wiki/MySQL) or [MariaDB](https://en.wikipedia.org/wiki/MariaDB). In other words, you will write PHP code (or another language) to connect to the database and query it by using SQL queries. Search for thing like "PHP MySQL" (without quotes) or "PHP MariaDB" (without quotes), and you'll find tutorials for how to write PHP code that accesses your database. phpMyAdmin will have nothing to do with it. It is simply a tool (one of many) for administering MySQL-compliant databases, for things like creating databases, creating tables (and editing their structure and values), or creating users. **The data itself is NOT stored in phpMyAdmin.** It is simply an editor that talks to a database server, but you could easily use a different editor to access the same database (or even write you own). phpMyAdmin will have nothing to do with your website code. Since you're new to this, one thing you need to learn about before going live is security. For example, the need to do input validation to prevent [SQL injection attacks](https://en.wikipedia.org/wiki/SQL_injection).
Use the PDO! It's all object-oriented and gives you some protection against SQL Injection.
PDO?
I think the problem begins that we do not know what you mean by ‚Äûlive value‚Äú. A value that is changing all the time? Then how often per second do you intend to save it into a database? In order to answer the question how to use a database properly I would recommend www.phptherightway.com
PSR-2 do not mandate "Interface" suffixes!
that is 100% .. afterwards I said to myself, i should have told them that is dumb sh1t and I would delete it .. lol
Because they don't know how to interview in a way to distinguish good devs from bad ones.
Maybe they want to see how you try to rationalize a very messy syntax. Maybe they wanted to see how you react to an irrational question; do you keep your cool, do you sneer, do you melt into a puddle, do you yawn and just try to slowly grok what you can. Maybe this is real production code made by the India team, it looks like typical outsourced level code to me. This is not too too horrible a question, you could probably get away with being wrong, so long as you go through and explain what you think step by step with clarity of thought in your speech. It's harder, more common and more complicated to synthesize solutions to a complex problem on the spot while talking,.
great points .. 
They could be seeing how you break a problem down into smaller parts but more likely they are coming from a mindset of "if they have this many years of programming experience they should know how to do this". I wouldn't expect to get rejected if you don't come up with a correct answer as the interviewer may have been more interested in your approach.
Nice write up about destructuring! But please rewrite intro. &gt;Most of those features have to do with loose and dynamic typing. Personally I like how freely you can transform data without worrying too much about the structure. Nope. Associative array destructuring have nothing to do with "loose" or dynamic typing. It only means that bugs (e.g. non existing keys) will be only cough at runtime. While statically typed language could catch it at "compile" time. Also destructuring is sometimes called pattern matching (not to be confused with regexp - one works on data shape, other on string content).
huh? That's implicit type coercion. It have nothing to do with type hints. Nor with destructuring.
Besides, wouldn't something like this yield very different outputs depending on php version, since php7 enforces a left-to-right order of precedence compared to php5?
I love to punish myself. So i use GD
&gt; mocking finals is very difficult You made me curious. I was under the impression, that mocking final is not possible, which is something else than "very difficult". So how do you mock something which is final?
I was asking few times similar question to this - so maybe I'll tell you why this could be asked. First thing - it doesn't matter if you will "solve" it or not, such a question doesn't need to have some "correct" solution etc. This question is to see how you are approaching to a problem that is not comfortable to work on. Programming is not only about writing the code, but also solving the bugs - that can be sometimes not obvious, tedious to work on and seems to doesn't make sense - like your example code. Are you going to give up fast? How creative you will be into splitting it down to smaller parts? How you will decouple correct working code from maybe flawed one? There are not good answers on that, everything depends on the person and how he/she presents it on the talk - and show his experience. From my perspective - I would like to have a guy in my team, that didn't solve that, but was just not giving up, split this code into more readable parts, talked about dumping it part by part or using xdebug, told me why using $$$ is wrong, maybe asked what is the meaning of $a &amp; $b and how it differs form object $b variable. But I wouldn't hire a guy that just gave up quite fast, proposed to run it in REPL or said "it doesn't make sense".
This reminds me of the interview for my current job, the interviewer who turned out to be my boss showed me the source to the homepage of the website and asked me to find the obvious error. On the first line of code after the initial requires there was this. if( $database_connected = true ) { ... } Needless to say that wasn't the answer he was expecting, and we spent the next hour talking about salary and start dates.
There are always extra questions. They don't make the final decision but just flavor the interview making the interviewer a better view on the interviewee. Some questions are not aimed to getting the the answer but rather at revealing your approach to the problem. There are several reasons to ask such a question: - like you said, to see how you deal with stress - to see your approach to solving problems - to see your urge/ability to refactor this shit into something readable and maintainable - after all, to see your understanding of PHP syntax - to see, will you dare to criticize this question
I would recommend to add a notification before like done on the Travis repository and not close it right away since when you do so, the author of the issue has no choice but to open a new issue which can be very off-putting.
I was just listing some of the things I like about PHP and what make them great for web programming. I didn't imply or say that this feature had anything to do with typing. Thanks for the feedback tho.
Exactly that!
&gt; Ooooohh! Okey.. yea,.. you're right, thank you! Have a nice day, sir. We got what we seaked. . &gt; So I am hired? . &gt; What? No, haha. We just wanted to understand that line..
Depends on the real problem/question. Some just want to see if you know some geeky/cool, unnecessary insider knowledge like the "NaN NaN NaN batman!" thing within the Javascript World (If you don't know it yet and asking your self [Wat?](https://www.destroyallsoftware.com/talks/wat) right now.. watch the talk). But some questions want to look how much you know and try to solve problems. Like what is your point of view and how do you start and go with solution management.
What is the answer to this question?
A: Parse error: syntax error, unexpected '$b'
* [Mockery](http://docs.mockery.io/en/latest/reference/final_methods_classes.html) lets you proxy methods but the mock doesn't pass instanceof comparison. * There's an [extension](https://stackoverflow.com/a/33095281) that lets you rewrite flags at runtime. * This is a terrible idea, but you could hook into your autoloader and rewrite files when including them.
Does it evaluate to 12? I'm going to try this now.
Well, I am such an employer to ask these kind of things. I give a fuck about the right answer, I want to know how a person tackles a tricky and unexpected question.
Beautiful answer. Being able to go down, understand and explain what's happening with xdebug will make a tremendous difference between 2 php devs. Remember software dev: it's not about coding, it's about communicating with people.
For PHP the result is quite expected (first $i++ returns 6 **and** changes $i's value to 6). It's for C, where the result is 14, and it's a dark magic why. 
Plot twist: very first commit of companies main product contained this code. 
Right ok... but do u think these guys in charge of the tech interviews are actually intelligent enough to see this or did they just Google interview questions and think that would be fun...
Didn't know that he is so "emotional". I don't know why he overreacts this much.. was he stressed? Did he feel attacked? Narrowed in the corner? Is it just his character (wtf)? Also.. should we take his character into the wage? I mean the only interesting part is that it "MIGHT" be that exploits aren't fixed, because he don't want to.. but are these exploits are really working and still not fixed yet? In the end.. it's kinda sad, since OpenCart is the only code base that was "kinda okey" compared to Wordpress or other products. 
What‚Äôs the better way of doing this (never worked with real databases just mock ones for projects in 1st and 2nd year) thanks for your answer in advance wanna learn anything I can !
technically `$i++` returns `$i` (5) and then increments to 6 which is why `$i++ + $i++` is 11. `++$i` increments first and then returns the value of `$i`. Breaking this into the post-syntax method it becomes: $i = 5 [++$i, ++$i, +] // $i = 5 [[$i, 1, +, assign], ++$i, +] // $i = 5 [6, ++$i, +] // $i = 6 [6, [$i, 1, +, assign, return], +] // $i = 7 [6, 7, +] 13 That's a bastardization of it but the idea is the same :) 
sorry it was a typo in the previous comment. I meant ++$i from the post above good notation btw.
Well, this isn't the actual test, as you yourself said. So without the actual test, we don't know why the test is what it was. Trick questions like this can be annoying, for sure. They can also be an indicator for deep familiarity with the language, which may not be the absolute deciding factor, but it's a factor.
&gt; But I wouldn't hire a guy that just gave up quite fast, proposed to run it in REPL or said "it doesn't make sense". I mean if the question is literally "what will this output" as in OP's question, REPL is the most intelligent approach to the exact problem as defined. Otherwise you're hiring someone who is assuming requirements and going round-around on a problem to show off, in a way that doesn't provide value to the given task in any way. So I guess always be careful what you ask for (literally and metaphorically).
There isn't a one size fits all solution really, it depends if you need to take the whole site offline or just disable certain functions. If the whole site goes down I will normally return the 'site unavailable' message if the database isn't available, and set a http 503 header so that search engines don't index the page when it's offline. So somewhere before any output I do something like: if(! $database_connected ) { header( 'HTTP/1.1 503 Service Temporarily Unavailable' ); if ( $in_backup_window ) { header( 'Retry-After: ' . date( 'r', $expected_finish_time)); } else { header( 'Retry-After: ' . date( 'r', $small_delay)); } require( 'maintenance.php' ); die(); } Obviously the real solution is to get the database doing online backups, but in the corporate world that decision is not ours to make so you have to find work arounds.
Guy doing the interview sounds like a little picture kind of guy.
PHP (5 as well as 7) doesn't enforce left-to-right order of anything except boolean operators. For all other operators `a op b` there is no guarantee that a will be executed before b. https://3v4l.org/673qe
Actually those questions are the one I prefer. I don't get when people just asks the same old boring questions, for example what is a singleton, what are traits, how does a left join works Who cares? I mean, if you don't know the basics will be obvious in a technical test and if you don't remember the name "singleton" you can google it up. Moreover you can find those answer in the basic "commonly asked questions" on google. So, an impossible question let the interviewser focus on how you think and how you will interact with a nasty bug. You can really suck at a framework and maybe you won't be able to answer the old "How to wolve the a^(n) Issue on Eloquent and Laravel" \(pre\-hydration is the answer\) but if you are smart and your mindset is right you would find the bottleneck and work with it.
My response would probably have been "I would be more interested in why such a horrible piece of code ended up in a real world program. It really needs refactoring.". Then, I'd proceed to take it apart and figure out what it does.
Totally agree. I always do a fizzbuzz-like test in interviews; the test in itself is quite stupid and useless (although some people really struggle with it), but the point is to discuss (what if we add "bar" for 5, "baz" for 6, how to maintain it, where to store the word-value numbers, etc.). 
Let's say we're replacing a &lt;select&gt; element with a fancy Javascript alternative. The native one allows the user to choose the option using a keyboard. Most JS components for this do allow the same, but it's not mandatory and it depends on how the component is built. Now someone who can't move the mouse can make the selection. But since it's not the native component, how do you know you're supposed to select something? Because it looks similar to a combo box? Well some users can't see, so it's necessary to place some hint as to what to do with that component. Now let's say it's a SPA or even just some simple HTML that hides a DIV and displays another one while browsing the menu. It's much faster and makes the experience much better than waiting for another request to the server and for the whole content to be downloaded and processed again. But how is it like for a screen reader to notice the change? It's more tricky than noticing a page reload. Again, it's possible to accomplish all this with JS but it's necessary to care about it. As long as it's all possible, it's alright to rely on it. So I just wanted to point out scenarios like these. It's not only about browsers that don't support JS as someone asked, but there are users that might still have issues to use Javascript enhanced pages, if they're not developed with care.
I disagree, if there are specific operational issues that are both expected and predictable then I think it is perfectly appropriate that they are treated separately from unexpected errors and outages. Obviously the details of where the handling occurs can be debated and is highly dependent on the system architecture and and frameworks that are used.
IF the treatment is any different from the general purpose error handling, then yes. But there is nothing specific in your code which could be used to handle any critical error and therefore such a condition is just redundant. 
A self taught developer who didn‚Äôt go to school trying to flex their knowledge muscles perhaps?
It was a \*simplified\* example, and there was one minor change in treatment, if we database is unavailable during the backup window then set the retry\-after header to be the expected finish time rather than a short delay.
&gt; Objects in php always passed by value They are not? https://3v4l.org/vsf4s
That's true, but I don't ask on output on my questions, but "what this will code do". It's quite easy to misunderstood the difference between those two. I've missed this text when writing the post. About the REPL thought - I would like to little disagree. Based on my experience, if somebody want to just throw out stuff into REPL to get an answer - it's quite probable that he will do same when encountered some error - by refreshing the browser / re-running the CLI worker. Personally I prefer to work with people who first analyse, then run the code - not the opposite. Running bugged code first can make some side-effects that are not obvious - like sending malformed email to the customer again, which will land on twitter, and from there... it escalated quickly! That's why it's a little sign of being junior dev for me (nothing bad - everybody starts somewhere) - that fixes the code by running it multiple times with different parameters, until it will "catch". Of course, in my case, that's one of many different questions, that comes AFTER writing sample code by candidate.
I think that it's quite easy to talk about a blame being always on one side, and in meanwhile quite hard to get perfect interview questions that would be fitting for each candidate and each situation - especially that those questions are not created to make candidate happy, but filter out those that this one specific company needs to run it's business. Sometimes it will be a need for hacker, team player, visionary or just another code monkey. You never know what was on mind of this "other" side and their reasoning - that's what I've learned, so I try not to judge on shallow things. Life is not about only living in dreamland of perfect code and easy to track bugs. Sometimes you have to use code that was written by others, and later fix their code that is no more maintained. Then you get knowing how production code is looking for probably few thousands servers that used this library. And let's not talk about Wordpress, shall we?
Classes are okay, but they do have a bit of overhead to them. Structs and tuples are also useful, when the language supports them better, statics often seem clearer and more flexible some situations, too. For example: // tuple: very short, but maybe less clear $image-&gt;drawCircle((200, 200), 100); // struct, names are in the order declared $image-&gt;drawCircle(Point2D { 200, 200 }, 100); // struct, with names $image-&gt;drawCircle(Point2D { x: 200, y: 200 }, 100); // static method $image-&gt;drawCircle(Point2D::new(200, 200), 100); // original constructor $image-&gt;drawCircle(new Point2D(200, 200), 100);
Lucky me, I never met an interviewer who felt *that* insecure to do such tricks.
For that code I would just say "That's part of the Fatal Error Generator."
I'm referring to [http://php.net/manual/en/migration70.incompatible.php#migration70.incompatible.variable\-handling.indirect](http://php.net/manual/en/migration70.incompatible.php#migration70.incompatible.variable-handling.indirect)
I'd just run it with couple of test variables and see what it actually does from there. No need to split it up. Next thing I'm gonna do is straight up tell you that I'm not THAT desperate and if you have similar code, you are an organization that I don't want to work for. 
Could you explain it evaluating to 14 in C?
Only partially so. You have fixed keys, but values are still untyped (or more properly unityped - anything is accepted). Add there type hints for the constructor and change public properties to private. If mutability is important expose public getters with type hinted arguments. Now you have replacement. But that's not perfect solution. Kotlin have special class syntax for less boilerplate for dumb structures.
PHP uses Copy On Write optimization. 10 invocations of function with array argument MAY, but DO NOT HAVE TO mean 11 copies of said array in memory. It's writes that trigger cloning.
&gt; Most of these issues and PRs are handled by our team. But sometimes those issues and PRs become stale. The original author may not respond anymore, discussions maybe end up dead, or sometimes the issue isn't important enough for us to invest time in. To feel the issue is not important enough to invest time in is one thing. To systematically leave issues open and unaddressed, and not being able to summon enough of a fuck (pardon my French) to even go close the issue manually is another thing entirely. A system that automatically closes issues after they get old basically communicates "stop filing issues, we don't care, a bot closes them without us every reading them". It's already frustrating enough when developers declare real bug reports bogus, or non-duplicate issues as duplicate, that's a brand new level of "fuck you" to customers and users.
Thank you, marmulin, for voting on CommonMisspellingBot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
Just guessing, but probably order of operations. The 2 pre increments are done first, and then the addition.
I an not a C guy, but from what I read, first of all such a statement's behavior in C is undefined, and therefore such a statement shouldn't be used at all. Then people are explaining that like C compiler doesn't take ++i as an expression but rather as a link* to a memory cell, on which an operation is performed. So, first this cell's value gets incremented (6), then incremented again (7) and finally assigned the result of addition (7+7). *don't know the proper term, afraid to use a wrong one
Aha, yeah that might affect it.
https://secure.php.net/manual/en/book.pdo.php https://www.google.com/search?q=PHP+PDO+tutorial
delet this
To me, unreadable code can be considred a bug, so what I'd do is file an issue to have that code analyzed and properly rewritten. This would be my answer to the question.
In case you are interviewed for the manager's position. From a programmer, a code contains a bug is rather expected to *be* actually analyzed and properly (re)written :-)
I used them with Drupal... my experience is great but the enterprise edition had a lot of issues specially if you have a big project. I think is good for small projects/team and very focus on the frontend or if you have a client that wants to see and test every new feature before going live (they have a very cool integration with GH to spin up a new env for that PR and destroy it once is closed/merged)
The answer to this question is more easy then people give it credit. It not about the solution. Its about the candidate showing several things: * Show that is a horrible piece of code * Understanding how to split the code. * Showing that the interviewee understands the order that code is processed in PHP. You may be surprised how many people fail that. * Talking to the interviewer about how to solve it. * Getting a error left or right is never a deal breaker because the interviewer knows its a high stress situation. But more importantly its to show **HOW** you handle a high-stress situation. Its NEVER about the correct sum. Any interviewer that only looks at the end result, is a bad interviewer. **My personal experience:** Unfortunately i have had Senior PHP interview candidates that came in with a big and fancy looking CV with Senior PHP developer plaster everywhere on it. And them being unable to even do any points. * No explaining its a piece of **** code. * No understanding how to properly split the code, as to what is valid in PHP and what is not. * No ability to understand the order of execution * Simply mumbling instead of talking to the interviewer. * Refusing to write down any basic problem solving steps It shows you a lot about the candidate. Those same interview candidates also fail or have a hard time on other simpler questions ( some basic school level. The problem is that some people ( mistakenly ) think they are better then they are. Or some simply try to bullshit into a comfy high paid position. A story that was told to me about a interview candidate. When faced with a difficult regex question his answer was: "This question is below me, i do not do that". When i was faced with that same question during my interview, it got solved and more important was the fact that i explained how i came to that result. And that there are more solutions to that problem. I got hired on the spot. And if you think that is stressful, try doing it on the interviewer his Mac, when you work with Windows and Linux. That freaking mouse alone is more stress :) &gt; Ok I get that I should probably still have a good answer, but seriously, what is the meaning of this unless its just to trick people who are in a high-stress situation ? I have seen people on Reddit bitch and moan how its unfair the subject a candidate to have trick question, yet, those trick questions do work very well to expose people who are applying for positions above there level. Do some interviers misuse trick questions on people who are looking for lower level jobs ( junior positions ). Yes ... But if the interviewer was questioning you for a Senior Job position, that can involve multi-millions projects and has a salary to compensate for that. I think its only fair that the interview is hard. When you program and you are on a deadline. Is that not a high stressed situation? You got some horrible bug that shuts down a multi-million dollar website, the client is yelling at you, your boss is looking over your shoulders, ... i think that high stress interview suddenly feels like a walk in the park. **Trick Question:** Trick questions are only trick questions if you lack the knowledge to solve them. ;) I have no shame in admitting that i probably lost several job offers with trick questions / blackouts years ago. I was simply out of my league. But it helped me to focus and learn more. Now, do i advice those trick question for people who are looking for a junior level PHP job. NO!!! As a interviewer you need to know what you are interviewing people for and make your questions fit the job.
Apparently I'm not competent enough to even think about working professionaly with php. I'm still super confused üòï 
But as a dev I wouldn't do it right away unless I'm already writing code near this clusterfuck. You don't want to change code just because you stumbled on it, you plan it for later.
A good idea! You could the same approach towards any question asked on the interview! Like, - What's the difference between abstract class and interface? - I am not going to answer right now, I'll file a documentation request! Just brilliant!
If it's php, syntax error
I'd expect that question to provoke the magic phrase "operator precedence". For bonus points, "not a clue, but pass me an operator precedence table and I'll take a crack at it". (Although in this example, I think the answer's probably something along the lines of "syntax error". I'm pretty sure it's going to choke on some of that, even before it reaches the $this).
Seriously? I lent you my laptop and you installed kazaa on it. I'm not going to let anyone listen to your nonsense. Who still even uses askjeeves, let alone installing a search bar on internet explorer 4.2. How did you even install that?!?
There's more than one solution to this. While you're right, it's probably a readability thing.
Well, if you're expecting me to pull the answer out of the compiler I have built into my ass, then you suck. If you would accept "let me run it and see, and with a few minutes breaking it down I can probably tell you why, but I can't say right off the top of my head because I've never had a practical reason to use such a construct in real life and shouldn't be reasonably expected to solve it on the spot" as an answer, then good for you.
I don't know if I understood your question correctly but yes, we don't mock data holders either in here. But since you're already mocking service2 you don't ned the entity anyway? I mean, if you're using ``` $someClass = $this-&gt;getMockBuilder(SomeClass::class)-&gt;disableOriginalConstructor(); ``` or ``` $someClass = $this-prophesize(SomeClass::class) ``` you don't set the dependencies anyway so you don't need to mock the entity in that case. 
Template engines cache most of what they are doing as plain PHP once they are compiled. The performance impact should be minimal in most cases.
You are probably looking to answers to [What are the London and Chicago schools of TDD?](https://softwareengineering.stackexchange.com/questions/123627/what-are-the-london-and-chicago-schools-of-tdd). 
I figured :)
I've used variable names in objects before, but never realized $$a was a thing until now. Thanks I learned something today
[@unclebobmartin's latest tweet](https://i.imgur.com/TRIDHAT.jpg) [@unclebobmartin on Twitter](https://twitter.com/unclebobmartin) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
The point is to have limited amount of things which could break your test. So you could quickly find a problem which causes tests to fail (without need to debug). This, and the fact that unit test suite could be run in a second should bring you very short feedback loop. Unit tests are also good for design, as it highly sensitive to coupling. For example if you have many failed tests from single change - your tests is not isolated (and you have high coupling). But this doesn't mean that you need to stub/mock all dependencies. But you need to have few dependencies in the first place. &gt; Some people say that we need only mock services but not Entities because they didn't have business logic First of all, entities should contain business logic (at least logic which rely on class invariants), but this is big topic on it's own. The main reason why you don't want to mock anemic entities is that... this is similar to trying to mock query builder. This is just impractical. This could be a signal that your services highly coupled to entities if you can't mock them. But if you can't mock entities you will end up with not-so isolated tests. This isn't something bad, this is just integration tests but not unit tests.
There's a lot that fit into that category. I could write about bash scripting to automate my web server, but that wouldnt belong in r/php
I believe mysqldump is blocking right? I know postgres has a non blocking backup.
I asked one like this for a guy who claimed to be an expert in JavaScript but had pretty much no experience and nothing to back it up. He was a boyfriend of a co-workers sister, so I wanted to make sure he was legit. He failed the question and took a long time to give up, but I had one of my junior devs figure it out to prove I didn‚Äôt make it overly obscure. I do have another question I ask that has jibberish code which mixes multiple languages. I ask the interviewer what is wrong with the code, after making it clear it is intentionally not a valid language. This question helps me to identify the level the developer is most likely at and what may be their specialty. Did they focus on syntax, security, optimization, maintainability, etc...? 
fair enough! I've had plenty of use for variable names for attributes of objects, usually for processing JSON with unpredictable content, but I can't really imagine a use for variable variables off the top of my head. 
I'm working with legacy Oracle 8.1.6 databases where the corporate backup policy is to shut down the database and copy the datafiles to another server. They've been planning to migrate to something written this century for 5 years, my guess is that it will be completed by 2020.
Well the trick is to define what is a unit at first place. And the problem is that unlike Java or C#, PHP isn't really capable of having units other than a single class or a function since neither functions or classes can be private. You can't have it both ways.
2 words: Legacy. Code. \*cries in a corner\*
That code does not check if $database_connected is true. It checks if the value of $database_connected can be set to true. = is for assignments, == and === are for comparisons.
Is it bad/costly to do the following: \&lt;script src="\&lt;?php echo $path?\&gt;/file.js"\&gt; \&lt;script src="\&lt;?php echo $path?\&gt;/file2.js"\&gt; \&lt;script src="\&lt;?php echo $path?\&gt;/file3.js"\&gt; and having it contained in a .php file and including it versus just using a .html file and typing out the whole path as follows : \&lt;script src="filepath/file.js"\&gt; ? I've been doing the latter just to avoid putting any 'work' on the server, even if it is minor and trying to separate my HTML, CSS, JS and PHP as much as possible. 
 8===D is the correct answer. 
c'mon, gtfo right now with that :)
"eh, uh... no thanks. Goodbye, Felicia!"
Not 100% sure about internal work but I know agencies are not allowed to deliver PHP apps, Python is allowed though. Not sure if other languages are allowed.
Thank you for all the replies I was wondering if it would just be not using the else and instead having it just read that if the if statement fails, thanks again !
Thank you this was informative !!
No one here has tried to actually run that code snippet so there was no way for us to know the result of that line.
IMHO getting presented a question like that during an interview is a red flag and may warrant not accepting the job if it is offered. Remember that an interview is just as much you evaluating them as it is vice versa. 
Thanks for sharing your experience. Do you have a Github link to share? Are there any other bots worth trying?
Everyday I'm coupling Everyday I'm coupling. 
Thanks. It's compatible with more versions of PHP. I.e. Controller::create($projRoot, $environment)-&gt;run() Works in more versions of PHP than (new Controller($projRoot, $environment))-&gt;run() Would do
The person interviewing you needs training on effective interviewing. 
You do realize that latest version that piece of code doesn't run on and been dead for almost *4 years* right?
I'd go with my answer, if you want me to solve dumb shit like this on a daily basis then I don't want the job.
Here is a good answer: Sir, I am not going to answer your question. Needless to say if someone in my team wrote that, it would never make it into production and they would possibly get fired if they cannot be retrained. I expect and demand maintainable well commented code, with whitespace, with aligned indents. Any strange operation must be commented. If you ask me to maintain code like that I will determine what you are trying to do and rewrite it with comments and structure, and provide a test method. I have been doing this for many years, and simply dont want to waste your time trying to interpret what is obviously the worst kind of code segment. 
Honestly, it's because the interviewer is too lazy to make up difficult problems that actually relate to the work. A question like this is a red flag for me. But the other answers are good.
In practice, having a tinyint column with values 0/1 for each attribute is almost certainly a better way to go. The complexity of this is absolutely not justified unless profiling shows it is. Are you using your database like it's meant to be used and running into scalability problems? Then, and only then, should you ever consider doing something like this. If not, please, for all our sanity, just don't do it. And if you're going to do it, using a bit field is probably a better way to go.
What do you mean by "the complexity of this"? O(n) is the complexity here, seems simple. And yes, bit field seems better, that's true, although it's almost the same calculation. I know it's not searchable this way, but I wasn't aiming for searchable. Although you can search it by analyzing the bit position. Could you explain to me the "in practice" section? Cause I don't get it.
&gt; I wasn't aiming for searchable. Consider the plight of the maintenance programmer.
good catch, you're hired
LOL you're hired
&gt; Check out this Laravel example using the Eloquent‚Äôs Accessors and Murators Small typo, it's mutator no murator.
Couldn‚Äôt agree more. You‚Äôd have to have an _incredibly_ compelling reason for me to approve that PR. 
&gt; Although you can search it by analyzing the bit position. And there goes performance ... Simply keep your data in tinyint columns like yathief stated. Or if you really need to store more information in a byte use a bitfield ( what is way faster! ). http://php.net/manual/en/language.operators.bitwise.php $bitfield; $bitfield |= 1 &lt;&lt; 0; // Put a 1 at the first (ie 0th) position in the bitfield $bitfield |= 0 &lt;&lt; 1; // Sets $third Bit to 0. $bitfield |= 1 &lt;&lt; 2; // Sets $third Bit to 1. The operations that you are doing like decbin, str_split, ... are way more expensive in CPU power then the little bit of storage that you save. SSDs, Memory etc is cheaper and cheaper by the day. CPU speed increases way slower then storage space for years ( even more with NVMe ). This over-optimizing for a non-problem.
We could also write extremely performant binary file I/O to store booleans, but we use a database for lots of reasons, one of which is maintaining our sanity.
It's a simple and clever concept, but it's really an overkill in most cases. It feels pretty much like gzip your strings first then save it into database. Perhaps you can show us a solid problem that this is way better than storing it columns by columns? By then, storing it in different columns seems to be the best solution for most cases.
Well, PHP is kinda the joke of the programming world. Go to any other programming circle, and everyone will rip on PHP. If you've never really spent some time outside of the PHP world, then I guess it could be somewhat surprising and unexpected that people would talk negatively about PHP. I wouldn't take it personally, it's a probably just a judgment of PHP rather than you personally. To me it isn't surprising, because I'm also involved with other programming languages, and I can understand why people make fun of it, it's a bit of an odd language.
Sure! By complexity, I'm not referring to space complexity or time complexity (i.e. not the big O complexity), but rather "how simple is the code to understand and work with". This goes really far in terms of maintaining your application over time, as you add and change features. Let's say I want to find all hotels with wifi. By using a boolean field, this is incredibly simple: SELECT * FROM hotels WHERE wifi = 1 As your application becomes more and more complex (in terms of features, i.e. as your code does more and more things), keeping things as simple as possible makes it orders of magnitude easier to work with. Storing booleans in the way you propose will make your application much, much more difficult to maintain in the long run. By in practice, I mean that in most real-world applications, the amount of space a row takes up isn't going to be a problem, and combining a few fields into one (e.g. combining 'bar', 'room_service', 'wifi', and 'breakfast' into a single field) is unlikely to actually help you. If you're facing scalability issues, the number of rows, not the number of columns, is almost certainly going to be your problem. tl;dr it makes the code orders of magnitude more difficult to maintain. You might save some space doing it, but you probably didn't need to save that space in the first place. The cost (harder to maintain code) BY FAR outweighs the benefit.
The reason, is they want to just see you think though it. They know it/'s something you haven't seen before, but just want to see your analytical skills and though process. 'ok, well, this is tricky, but I guess let's start with order of operations and find the first instruction to be executed. Ok, it's this one, it's doing "this and that"' 
Da\-ha\-ha\-mn, Reddit promised me to put my link in the title. Oh well... [https://github.com/1ma/DIC](https://github.com/1ma/DIC)
I ask similar questions (albeit far less "tricky" than this), but I really do not care that much about the correct answer. What I am trying to do is evaluate how you solve problems. Can you break things into pieces--break the problem down into smaller parts you know how to solve? How do you solve something that isn't immediately obvious? It's like the back in school in math class when the teacher would dock points for not showing your work. It's not really about the correct answer, it's about the steps you took to get there. If you make the right choice in 9 out of 10 steps but mess up one step, you'll arrive at the wrong answer, but you still did a good job of solving the problem and demonstrating you know how to solve it. For questions like this, I think it really comes down to the interviewer and how they approach it. If they only care about the final answer and whether it's right or wrong, then this is a garbage question. On the other hand, if it's a conversation walking through it, with less emphasis on the correct answer, then it's an acceptable question.
Why not just &lt;?php @include ‚Äú/maintainance.php ?&gt; And then on page &lt;?php if( !$database_connected ){ ob_clean(); // clean buffer, unless you dont want to ofc http_response_code(503); @require ‚Äúmaintainance.html‚Äù; // do you need any php in there? ob_end_flush(); // release the new maintainance buffer! // if code comes after, use ‚Äú exit; ‚Äú instead of ‚Äúdie()‚Äù here unless you need to push a message? } ^ asking to hear your opinion or if just old habits?
It's just a very robust database. Database server could be on fire and it will still forever be "connected" /s.
interesting , php is finally coming to be much like perl these days, not sure how good of a thing that is 
ive been thinking along the same lines for many years. 
he should google nostaliga bias
im so over the "women in tech" thing...i cant think of a field MORE welcoming to women than tech...people make it sound like your sending a woman into a construction site or something where suddenly the room is filled with wolf whistles and crass come-ons, it is the total opposite of that...any time there is a woman programmer either the devs are scared to death of her or falling all over themselves to fedora tip/m'lady her 
no why would you ,unless you reasonably expect to need one
I have a personal policy not to continue the interview process with companies that want anything more than a 1 hour live code challenge, and the code challenge MUST be representative of the kinds of work I would be expected to do on the job. Giving someone 4+ hours of homework is not a fair use of the candidate's time, and it's not going to really tell you anything about the candidate's ability to break down a problem and solve it. The code challenges I give candidates are things directly related to the work I expect them to do, which is often things like building REST apis, or perhaps things like a nested comment system (e.g. how well they know how to leverage recursion and appropriate DB storage patterns). Further, this challenge is prescribing the solution to them. You're literally telling them what you want built (comparator, reporter etc). Testing a candidate's ability to follow a template is not going to tell you anything about the candidate. You need to simply specify the criteria and let them come up with a design, then have a discussion with them about the design and their rationale for it. Again, best if this is done *live* so you can see how they think about and tackle a problem. 
Are we trying to write very vanilla, plain PHP here without any OOP or design patterns or using autoloading or whatnot?
I doubt this was built with a "CMS". It looks custom built. You can build a small site on just about anything, it only matters what *you* know and what *you* are comfortable with. But when you reach a scale of the kind where you're serving 6 million products, sorry, but these beginner/casual solutions don't cut it. I can only tell you to check out Solr for search and indexing. That's not a CMS, it's basically a custom search engine for your content. You'll need something like that for a site with a giant searchable catalog.
How they built it [is already pretty good](https://builtwith.com/?https%3a%2f%2fwww.thomasnet.com%2f).
Why
That doesn't use a CMS, it's custom.
Very well may be home-rolled. It's not Wordpress or Drupal or an ecommerce platform like Magento as far as I can tell. The source suggests a modern build system and Bootstrap 4 as the foundation of the design, so this may just be the work of a talented backend team. 
Hard to say, the markup doesn't suggest it's wordpress or drupal. But it could be some sort of framework with that info stripped out or just customized to someone else's preferences.
"Code carnival" questions like these are silly. If you're not testing a candidate for their ability and experience writing similar solutions to what you will actually have them writing on the job, you're wasting your time and theirs. 
Lol! Ok... :) How mission critical is this PHP app? If it's a big deal, I might recommend at least applying some better testing, CI and devops practices. And then maybe rewriting the PHP app in a framework like Symfony or Laravel (which handles this stuff a bit more elegantly)?
Looking like a custom built PHP site. Might be a Laravel underbelly, I‚Äôm uncertain though 
You don't have to build everything with CMS. This website is a sort of heavily data oriented website that internal elements are interconnected in multiple directions. You may know that addons like Wappalyzer or BuiltWith can answer kinda websites, but after all they don't cover *everything* out there. Anyway back to your question, IMO, this site can be developed using Drupal. 
Makes sense.
Yes, if you are talking about database maintenance, this solution is a total nightmare. I'm thinking on removing this post altogether, cause now I'm even regretting having made this. Maybe having one column for each value does not seem the right way to go, but maybe using a json value to store as an array the keys that were positive. That way it's readable from the database and from the code, and it might take up a few more bytes on storage, but it's a tradeoff... Thanks for this detailed explanation
If someone gave me a 4 hour test I would talk away. If they asked why I give a two word response "opportunity cost". Last place I interviewed for wanted me to write an small application without using a framework, though I could use libraries. I determined to effectively wow them with unit tests, custom exception handlers, and figure out which libraries to use it would take me around 18 hours or so. That is either my weekend or every night of my work week. Sorry, your company isn't that cool and I rather do almost anything than write free code, for a lame project, the will be thrown away in a week. If I were hiring, the "lab" portion of the interview would be simple. For mid to senior level developer: 1. Write a small inefficient application that requires some indexes, SQL optimization, and some code optimization. Very, very small. Very, very easy for a reasonable developer to fix. Afterwards I'd have a conversation about other general optimization things like Redis, Beanstalkd etc... because we'll optimization is important, especially to me. 2. A small class with very poor cyclomatic complexity. Clean it up. Because clean code is important. 3. A small insecure application. Things like not using bind parameters in queries, not cleaning inputs, XSS etc.. Secure it. 4. Show me something you've done. Personal or professional. I would then ask questions and it would be an open conversation. Because I want to see how much you enjoy programming and how we'll you can speak about it. I think these 3 items, combined with the other interview questions, their experience, and resume would give me enough to go off. Ideally, 1, 2 &amp; 3 can be done in under an hour and 4 is just a discussion. I think that is reasonable for pre-screaning an applicant. I certainly wouldn't send me running, but I am also writing the test so who knows...
I've used this one before--it's custom.
If you're looking for something extensible, you can use Eloquent to break out those characteristics in another table with a many-to-many relationship. It looks like you're implementing "tagging" where you might want to offer refiners or search to users based on "has wifi" or something like that. For this, you might consider three tables: Hotels(hotel_id, ...) HotelsTags(hotel_id, tag_id) Tags(tag_id, tag) Docs here: https://laravel.com/docs/5.6/eloquent-relationships#many-to-many
4 and 6 especially. I wish more places would do this. I'd add to 4, leave the room. I feel like my productivity drops when someone watches me code in an interview setting. The interviewer can ask all the questions they want when time is up.
I don't want you to feel discouraged, because I think you learned something cool about the nature of numeric representation within computer science. Booleans, at their most efficient representation in a binary system, can be represented with one bit. It appears that MySQL's best ability (even with a `bit` column) can only pack a bit down to 1 byte, and you found a way to encode many bits into a byte, which is cool. Databases, however, work really, really hard to make storing and retrieving data easy and reliable, and often, the guarantees given by the DB are often far better than trying to out-think the database with optimizations like this. In other words, it's worth spending 7 bits to get what the DB has to offer, which is another valuable lesson in computer science. Keep discovering and keep writing about stuff. This was a great academic pursuit.
Why so rude?
LMFAO. No, not any place that I would work for at least. The only place you would ever see code like that is on a test or a in a piece of code you are about to completely refactor out of existence.
What if I pay you to invest the 4 hours in a real client project? 
We don't generally do code tests, I ask for code 'examples' (preferably have them provide us with a public project they've done) and then my questions are more around how do you approach problem solving and some verbal questions. The only code test we have asked in the past is to weed out people who don't know the basics before they even get to us. That is, here's a public Github repo. Pull it down, set it up locally (basic laravel app), we ask them to make a change to the way it works (i.e. add another form field for X), and then submit a pull request back so we can check.
Hi, we use it on Bolt. The config for Stale is here: https://github.com/bolt/bolt/blob/3.5/.github/stale.yml If you click through to the issues and then the `stale` tag, you‚Äôll see a bunch of issues closed by it.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [bolt/bolt/.../**stale.yml** (3.5 ‚Üí c455e1f)](https://github.com/bolt/bolt/blob/c455e1f8097ff736b7d3a2fa3429be0a7ddd4d57/.github/stale.yml) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dyd6xt9.)
https://www.thomasnet.com/catalogs/%22%3E%3Cscript%3Ealert('blah');%3C/script%3E lol "talented"
That is a grunt level trick question though and all good and experienced devs I know would walk out on you when reaching it unless you somehow greatly impressed them by then.
Sure. I wouldn't have picked PHP for type safety in the first place anyway though. In some cases the unsafe dynamic typing is an advantage. For example we can have recursive data structures, option types, result types etc. just as in Rust (or OCaml, Haskell ...) without requiring generics. We can hold just any value in it. And you can still validate the types (and values) at runtime.
&gt;Also many people will have clauses in their contracts that they can't carry out paid work for their employer's competition. Just curious.. How is that enforceable? 
As far as I know the work on the server is so little that practically there is no difference. TBH if you have something similar pointing to the same direction maybe you have a mistake. Also don't echo path... Do it with __DIR__ or even $_SERVER['DOCUMENT_ROOT']. Also, if you want the server to chill just write the path in html. There is no work in parsing for the server. However I don't think that the server unloading from simple commands makes any difference. Those commands are optimized and are not able to burn your server's CPU. (Also the server has it's ways to manage.)
That will vary from place to place. However it's the same argument for most breaches of contract. Fundamentally I don't want to do that because I said that I wouldn't. It's got nothing to do with whether they can enforce it. That's also a quality I look for in my candidates - trustworthiness.
Get Wappalyzer and see what built everything.
Lol. It might look like a joke because this started as a single class that I used to copy\-paste back and forth from the tests directory of some of my projects. Until now I used this container on integration tests, for when I didn't feel like pulling down a fully featured DIC and none was already available \(i.e. the project just dependended on psr/container\). But after shaping it up and adding a couple of features \(providers and lazy services\) it actually looked like something I could use in favor of other containers with an order of magnitude more LoC.
It's absolutely mission critical, however what is critical is that the customers see up-to-date and accurate account information. It's not critical that the account features are available through the website is available at 3am. Symfony or Laravel are not going to help with a legacy database going offline for several hours.
Sorry I am nitpicking on this point. I understand your point of view. I see such non-compete clauses as unethical. States like California have banned non-compete agreements. Hopefully other factors can define the trustworthiness of a candidate (e.g. being able to do his/her job and being reliable/punctual).
DIC?
ma/DIC
So the database just goes offline (purposefully) for other reasons, eh? Maybe this would be useful in some way (I hope)? https://www.reddit.com/r/PHP/comments/8gez63/why_would_anyone_ask_this_php_code_question_in_a/dyd3rl3/?st=jgq7ln69&amp;sh=08be7dbb I honestly would love to provide any advice I can give (if you want it and it is of any value).
It heavly looks like a custom made website. Probally with some sort of framework (doesn't matter which one). It's not Wordpress (WP has it's special url format), a eCommerce Plattform is a bad use for that format and everyone who can modify a eCommerce framework to work like that, would prefer a normal framework instead of manipulating something that has a different job. If you planning in doing such a website, choose your prefered framework (symf, lara or if you like something else) and take a bunch of time, because that project will take a lot of it!
Hey, zorndyuke, just a quick heads-up: **prefered** is actually spelled **preferred**. You can remember it by **two rs**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Givin that I have to return Id from Entity1 in my suite test: ```$someClass-&gt;getEntity1()-&gt;getId();``` In this case, I have two choices for `service1Mock`-&gt;getEntity(): 1. pass a mock of Entity1 with a return id value. 2. pass an object of Entitiy1.
The organisation in question runs on a ancient Delphi application with an unsupported version of Oracle that doesn't support replication or online backups. In an ideal world the organisation would migrate to a modern database and CRM, but the investment and risk involved is substantial and at the moment the website going down overnight is their preferred option. 
Of course its possible. A RFC compliant email is always formatted in a certain way. If you can use IMAP functions I'd strongly recommend using them, but if all you're looking for is to extract the body, all you need to do is to break at each `---boundary` as you can see above, and then look for the first blank line which looks to be the end-of-headers indicator.
In my experience, it's much faster thanks to caching.
Oh, my. All that angst. 
On a side note... How *do* you model a nested comment system in MySQL? My first instinct would be to have a "parent_comment_id" field (or table for the 6NF freaks) that FK's to itself on the comment_id field. The PHP logic could go two ways depending on the expected data. For small-to-moderate comment count with deep breeding, I'd grab the whole thing in one SELECT &amp; recurse on the result set. If it's huge but shallow, I'd grab one level at a time.
Re: #3, I remember reading on OWASP or a similar resource that for security-related issues, you should always on a 3rd party library or framework to handle them. Developers are inevitably going to make mistakes like forgetting to sanitize an input, so the best practice is to force them to code against a secure layer by default.
&gt; Its not discrete math, this can even be built on Drupal if you know what you're doing. I was just looking for external insight so, thanks for chiming in nonetheless. I object, because if you know what you're doing you'd never build this on Drupal.
If there is a library to deal with something, you need to be able use the library correctly. Having a basic understanding of security will help you do that. E.g. there are libraries for jwt, but they may not stop you from using a bad encryption algorithm. Not all security issues are something a library can fix either. E.g. there is no magic bullet to 100% fix XSS, so you need to be aware of it. Finally, even very popular libraries will get security wrong. E.g. symfony's SecurityBundle still doesn't rehash passwords.
You my dick?
I use mailparse \(pecl module\) and [https://packagist.org/packages/php\-mime\-mail\-parser/php\-mime\-mail\-parser](https://packagist.org/packages/php-mime-mail-parser/php-mime-mail-parser) ... in a similar situation.
He doesn't understand it :)
[Kboom?](https://m.popkey.co/1ae86c/AGyXw_s-200x150.gif)
We usually ask candidate to pick an issue from any open source project (preferably something the candidate has not contributed to already) and then implement it and open a pull request. The task don't need to be huge, an hour or two tops, something to produce enough code for discussion is enough. We are comfortable asking this because it doesn't benefit us, unlike a real client project would. It will also help the open source project and not just be some useless joke task.
Don't you like the name? :D
yes, in theory if you want consistency between the hashmap and the set the two operations should be in the same transaction using [https://redis.io/commands/multi](https://redis.io/commands/multi)
Looks like they fixed it. 
Maybe a custom CMS. We have one and 6 mill records search isn't a biggie if done right.
Aside from the fact this link is a blatant spam, I had a chance to [review one of udemy curses](https://www.reddit.com/r/PHP/comments/8axx0e/create_a_php_login_and_registration_system_from/) recently which turned to be a fucking trash and a reason why people are still taking PHP for that silly Pretty Home Page set of scripts from 1990-x. Any reason we should believe this one is any better?
Programming is about problem solving. No code test or programming project is going to easily demonstrate this. The world is at people's finger tips. Doing a small project does not mean the person understood the work they did, nor does it demonstrate that they know how to solve the problem. interview that focuses solely on the coding skills misses the point. It takes 30 minutes---tops---to interview someone over the phone and assess their problem solving ability. Simply give them a problem, ask them to walk you through their thought process and how they'd solve the problem. Code samples in addition to this style interview is a bonus, but not required.
Maybe I'm asking too much but can you please tell how to install these module in hosted shared server ? I have access to cpanel.
I have no opinion about the name, except that it sounds funny when spoken out loud üòä
Will the email has to pass specific filters to be piped , further the email address is only used to receive emails from our system so we are safe unless our system was hacked.
For a super simple project this might be okay. But this doesn't provide inversion of control unless you write a closure/callable for every class that has dependencies. Why would I use this over something like Pimple, Aura.Di, or Zend service manager?
a: /r/phphelp b: think about how you're going to be handling &amp; processing the data, i.e. will it be necessary to have classes to model your data?
Its simple aplication. Currently I managed to do simple shop , this display all the data from "X" table , adds button with function which add item id to characters and substract gold. It look something like this; [](https://i.imgur.com/BrzsMnf.png) Now I want display in same method player items . Collects ID of items from columns head,body,foot,gloves WHERE $Session_[guid]. But these items must contain also data from other tables where they are stored. I don't know how to do it ;/ Instead of buy it would be sell.
There are joins: http://www.sql-join.com/
everything is doable. start from deleting this question from this sub and re-asking the appropriate one 
If you need values from Items, for the itemIDs in the players inventory, you can do a JOIN on the 2 tables or use IN to search within a query, like "SELECT * from items where itemID IN SELECT itemID from playerInventory where PlayerID = ?" 
Of course :) But that does require you to always call them both, with a custom script the chance of messing that up is smaller I'd say.
I recommend the talk "Models for hierarchical data" by Bill Karwin. I only read [the slides](https://www.slideshare.net/billkarwin/models-for-hierarchical-data), and they are pretty easy to follow/understand. There might be a video of talk somewhere as well.
:(
Personally, I don't see how it's any viable. Main Stack Overflow largely relies on the Google search, while internal search just sucks. Besides, the main Stack Overflow contains as much stale questions as allegedly "stale wikis and lost emails" do. How i's intended to keep all questions up to date? How can it better than your internal documentation project? Honestly, I don't see how it can be used in our company. What about yours? 
https://www.thomasnet.com/catalogs/%22%3E%3Cp%20style=%22font-size:200pt%22%3Enope%3C/p%3E
Honestly I did not realize it, I'm not a native English speaker. But now I'm growing fond of the name haha.
Thanks for the link. I read this a long time ago but forgot about it. Yeah, it seems that Bill Karwin is leaning very hard onto Closure Tables as the general best solution for hierarchical data. I'm honestly inclined to agree.
It's a bad replacement, that's the point. A documentation page is usually written to cover many issues at once, while SO answers are more like one-bite snacks. It could do with help with Google Search but without Google you won't find anything. And internal search just sucks. Compare [mysql where to use single quotes](https://stackoverflow.com/search?q=mysql+where+to+use+single+quotes) on SO with [mysql where to use single quotes](https://www.google.com/search?q=mysql+where+to+use+single+quotes) from Google. Unless you know the exact phrasing, you wont find anything relevant. 
That's correct, if used seriously most definitions should be closures, like in Pimple \(which is the one I use the most\). The class "interface" is very similar, but uses an explicit set method instead of array access. You might use this package if you are the kind of developer that likes to dive into vendor/ and understand as much as possible of the project's code. I tried to add all the features I use\* in as less LoC as I could. They aren't a lot, admittedly.
- If you've internal frameworks - If you're a &gt; 200 ppl company and use that like a "community forum" ¬Ø\\_(„ÉÑ)_/¬Ø
I have retrieved these for you _ _ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¬Ø\\\_(„ÉÑ)_/¬Ø`&amp;#32;or&amp;#32;`¬Ø\\\_(„ÉÑ)\_/¬Ø` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
It's simply an alternative way to organize the container's bootstrap, I wrote a half\-arsed example at the end of the README. I don't recall ever doing container "introspection", so I didn't put it in. I guess it can be thought of as a subset of Pimple.
I didn't say its a great forum, but at the end if it's private you do what you want. 
That's hot pile of garbage. Any decent company would give you at least a month to get familiar with existing codebase. Anything less is just not serious work. You'd be racing to find 1 or 2 things that would help you solve the issue at hand and move on. Or worse, homebrew everything that you need, possibly duplicating code like a dumb motherfucker. 
Never used a forum before? Oh, wait.. 
[Stack Overflow is not a discussion forum](https://stackoverflow.com/tour)
&gt; Main Stack Overflow largely relies on the Google search, while internal search just sucks. I hadn't really thought about this until now but... I don't think I've ever actually navigated Stack Overflow. I exclusively enter the site from a google search, then leave. I actually have no clue what any other page on their site looks like.
I don't understand all these code tests. Can't you guys tell if people are intelligent and know what they are doing just by talking to them? If you hire someone smart and they don't do things exactly the way you want them to, you just tell them to change. Your candidates shouldn't be punished for 4 hours because you don't know how to interview people.
&gt;There were a couple of nice questions in the end: * how often do you profile ‚Äì each CI build, daily, or time to time? * do you run Blackfire in production? Does it incur any performance penalty? (this was also explained in depth) * how does Blackfire know that a request should be profiled ‚Äì what is the request signing technique between the probe and server? * have you considered XDebug profiler (cachegrind outputs, uploadable to Blackfire) ‚Äì https://xdebug.org/docs/profiler &amp; https://blog.blackfire.io/cli-upload.html * how do you account for false alarms in CI due to overutilized underlying shared hardware, for example in Travis? Nice read, but I would've really loved if one-line answers to these questions had been included. Well, mostly 1&amp;2 for me, but, in general it was a big cliffhanger. I loved playing around with blackfire when the free trial worked for non-local dev. A days work cut over a second off of some crazy xml parsing and manipulation one of our pages does. Alas for an employer that won't pay for it, though.
A really good question is to ask the candidates, what they think about Laravel. 
We replaced the structure in a couple of places from Nested sets to Closure table, and the biggest benefits observed: * the team was visibly happier when writing SELECT queries on them * the queries became more consistent, and reduced the max execution time in the worst cases And, for what it's worth, MySQL 8 adds support for [WITH RECURSIVE](https://dev.mysql.com/doc/refman/8.0/en/with.html#common-table-expressions-recursive), so I assume the Adjacency List model will become a decent alternative to the Closure table, since the table structure is much simpler.
Yep. #3 in my mind is just that they are aware of these flaws and can identify obvious examples of insecure code like unsanitized input directly into a raw query or echoing query parameters directly to the screen. Follow-up questions after the coding sample would be how would you keep an application secure over time. Acceptable answers: 1. Keep software and services up-to-date. 2. Using an automated web application security scanning service.
That was already asked many times. PS is predominant, with NetBeans following behind. The rest is either not IDE or has insignificant share. And also there is a small but firm ghetto of Vim lovers. 
Hum okay ü§ì
VS Code. Super easy to customize. I use InType as a backup, as a glorified Notepad.
As someone in a position to hire people, I don't give code tests during interviews. I ask to see samples of code that you wrote that I can review later. The interview is to make sure you fit with the team, can follow direction, have ideas of your own, etc. It's a waste of both our time to test you on your coding abilities, you either understand this stuff or you don't. If you don't, and lie to me and say you do, you won't be able to keep up the pace and will find yourself out of work in a hurry. Coding tests are dumb.
Very nice, good job!
No, I was just being sarcastic. :) But thanks for clarifying.
&gt; That's hot pile of garbage. Glad to hear you disagreeing so strongly, maybe there's something we can improve! I have very hard time understanding your whole point though and even with the example I just don't get what you're trying to say. &gt; Any decent company would give you at least a month to get familiar with existing codebase. Anything less is just not serious work. Completely agree with this! In our case one month is probably not nearly enough. &gt; You'd be racing to find 1 or 2 things that would help you solve the issue at hand and move on. Or worse, homebrew everything that you need, possibly duplicating existing, tested, production code like a dumb motherfucker. This one I just don't get. Racing? What? &gt; Quick example: Some project has an issue detecting whether the client is on a mobile device or desktop. Instead of fixing the bug in the library that you already have, the interviewee decides to write his own one. I don't get it. We ask candidates to pick any open source project to make the contribution to. So exactly what you're suggesting, "fixing the bug in the library".
Sorry, I didn't notice that this was already uploaded.
Obviously I do.
I parse wheat form chaff with a single question: Give me an example of when/why you'd have to make an algorithm choice and how you decide(d) which one to use? This, frankly, has been the best indicator of competence in my shop.
Looks nice, good job! A few small things though I noticed: - Why not name your ServiceProvider interface: ServiceProviderInterface ? - set() is strict typed to string, why not do the other functions too? - register() has no doc block - In the ServiceProvider interface, why use "$c" as variable name instead of $container
I would see it as a good way to see what needs to be better documented. Pose the question there, when question is answered make sure the answer is a reference to documentation. Then if someone in the future has a close enough question, they are pointed to the correct documentation. Probably only viable for companies with large departments spread across multiple locations. Value add does seem pretty minimal.
Good catch, thank you! That'd have bitten me. I pushed a new unit test and the fix. Will tag 1.0.1 later.
Honestly it's for large tech companies growing who don't have a better alternative , I don't believe small team are going to pay 5$ per month for that. Also SO management is really out of touch with reality so I i'm not surprised to see something like this , honestly it should be free for small team .
It's like in golf... A lot of people - I don't want this to sound trivial - but a lot of people use Netbeans or these things that boil down to a glorified text editor and in some cases that's ok. But for PHP it's very inefficient, very unattractive... it's weird. You see these coders with these really bad "IDEs", because they think it makes them great and they feel superior. And, I hate it. I am a traditionalist. I have so many fabulous friends who happen to use bad "IDEs", but I am a traditionalist I use PhpStorm. It's great. It has so many plugins, absolutely the best plugins. Auto-completion, let me tell you.. it doesn't get any better. The layout, the utility... debugging doesn't get any easier. It's beautiful. When I see someone using var_dump() to debug a problem.. I just have to stop and ask why? I mean, this is so PhpStorm makes it so easy, why do it any other way. But it's great IDE and a great product.. simply great.
Yup, some of these issues were subjective but deliberate choices, and a few others unavoidable. 1. I just prefer to not use the "Interface" suffix, Matthias Verras wrote up the rationale in his blog: [http://verraes.net/2013/09/sensible\-interfaces/](http://verraes.net/2013/09/sensible-interfaces/) I no longer remember but I might have picked that up from himself. At any rate, I don't think neither option is wrong, I'd call them different "schools of thought". 2. Because "has" and "get" have to honor PSR\-11's ContainerInterface, which targets PHP 5.3. So typehints are not allowed, but the DocBlock says that $id has to be a string anyway. "set" on the other hand is introduced by the Container class, which targets PHP 7.1, so.. typehint because it's better, even if it looks a bit incoherent. Thanks to this I noticed that "resolved\($id\)" did not have a typehint, now it does. 3. I like to spare the DocBlock when typehints are able document the function completely \_and\_ there's nothing much to comment on the method. All other DocBlocks say things than can not be expressed with typehints \(i.e. the @throws tag, or the "mixed" type\). 4. I agree on this. But in this particular case I thought that at two levels of indentation service definitions with a variable named $container would be quite wide :P
But wouldn't most large tech companies already have something that does this? For example we use TFS and VSTS, it has a built-in wikis which have documentation for our teams. If it's not already answered we use a comm channel like Teams to see who might have an answer. 
I meant startup , like Airbnb / Uber who go from 10 to 1000 employees in 5 years and don't have time to use complex stuff , this is just my guess obviously but I don't think Unicorn uses Microsoft product in general meaning SO is a good fit there, but as pointed by others SO has a shitty search tool 90% of the questions are pulled out by Google.
I see it as more of a middle-ground between a wiki and a chat service like Slack. I might check my team's wiki and be unable to find the answer (either it's not there or it's hard to find). I could ask the question on Slack but maybe nobody online knows the answer immediately, and I don't even know who would have that information. Maybe somebody from another team could have an answer, but I don't know which Slack channel they frequent. Basically, it's not a wiki because it's designed to be more frequently affected and exists as a social platform. But it's not a chat service because questions and answers persist for future people who have a similar question to check to find the answer. Even a wiki + Slack isn't 100% an alternative, because Slack in a large corporation may not be designed to get your answer in front of those who can help the most. Basically, I think those who can use it will find it useful. It's not for everyone.
Thanks for taking the time and effort to comment on all items :) 1. I understand the reasoning but do not agree with it but feel free to do so of course. I do find it ironic that you implement a PSR-11 container without following other PSR standards, not judging though :) 2. Of course, makes total sense. 3. It's personal preference I guess then 4. Understandable, still don't like how it looks though :D Again, nice work :)
Apologies that I don't have an answer to your question, but what exactly are you trying to accomplish?
Thanks Bob!
evilmaus, hi! We would like to A/B test position of blocks, different design of blocks, different messages, etc - all things that could effect buyers behavior and conversion rates.
Wordpress ?
Can you explain further what do you mean by "not providing inversion of control"?
You're going to have either pay someone for a plugin, or modify the router code yourself. Or upgrade to Magento 2. It's got A/B testing built in.
Inversion of control means using the constructor (or setters) to pass dependencies into the class, vs passing a container into an object and using the container to retrieve dependencies. The former is called Dependency Injection, the latter Service Locator.
google optimize
It's not terribly hard to build out a rudimentary A/B testing setup. I'm currently on a project that requires HIPAA compliance and we didn't have time/budget/resources to properly vet A/B vendors. For a lot of things, we simply choose randomly from a list of options of switch things out on a daily schedule. Some very, very basic logic. It's been great for getting things done quickly. While the results aren't statistically meaningful, they do provide enough indication for us to further improve. One thing we're looking into more lately is utilizing Feature Flags for A/B testing. Several of the open source libraries support staggered rollouts which is basically just A/B testing. We're in Ruby land right now, so I don't have a good PHP recommendation. This list may help though: https://featureflags.io/php-feature-flags/
Google app engine offers AB testing https://cloud.google.com/appengine/docs/standard/python/splitting-traffic
Have a look at https://github.com/phpab/phpab / https://phpab.github.io/ or https://github.com/namshi/AB (see https://odino.org/ab-testing-in-php-with-namshi-slash-ab/). 
He means that the candidate would just browse issues until they found simple problems that could be solved quickly, rather than giving a good demonstration of their problem solving skills. I have to agree. It's a waste of time to submit trivial solutions (for the sake of getting hired) and it is too time consuming to find and fix a more substantial problem.
I don't do code tests unless it's a junior developer. If it's a junior, I'll have them do FizzBuzz at most with an emphasis on walking us through their thought process. I have had a couple cases where applicants did not have any available public work and their employer history was not enough for me to evaluate their skills. The first one I didn't really know what to do yet, but for the second I asked him, after the interview to go home and either make an open source contribution somewhere that would demonstrate some of his skills - or publish a small personal project. I explained why I asked this of him, and he agreed that it was a fair test of skill and went on to push a library he wrote for an API to github. While it can be very hard to determine someone's suitability for a programming role, I don't ever think that giving them tests or defined projects to do is an appropriate interview tactic. Beyond being a waste of their time, it introduces stress factors that are not a normal course of work. In general these days, if a candidate's resume and work portfolio do not demonstrate enough for me to go off of without a code test - I simply don't give them an interview.
This is only for those who have no alternative code sample for us. We accept any sample they are willing to show but a surprising numer of applicants (even at senior level) claim to have nothing to show. we prefer them to send us something thats not a contrived example,obviously. i dont like live challenges i think they are unfairly pressuring the applicant. I had started with a much simpler proposal as you suggest but what ended up happening is either we'd get stuff that is so trivial as to be meaningless (50 lines of code, basically a script) or the prospect would request the requirements be clarified as to understand the scope of what we were looking for. What I am trying to see if they can demonstrate mastery of certain fundamental concepts to gague what level they are at. The problem is a lot of times people come in to interview for a senior level position and they throw out a lot of the right buzzwords but we can't tell where their skill level is in application of these concepts. 
there are a lot of bullshit artists in this field who try to talk themselves up to a higher position than their skills are really up to. that is my experience in the last 20yrs maybe its different in other cities
write it yourself, no kidding
yes i agree, i always would rather see work product but about half the people i interview either have nothing to show or can only supply something truly trivial (like a single class from a larger application without any context)
that is my preference to, what do you do if they have nothing to show. our "code test" is for those who h ave nothing or what they supply is too trivial to be meaningful
SkyPuncher, thank you for your reply. Will look into that. It's first time i am hearing about Feature Flags. Do i understand it right that you just turn on/turn off parts of your code/application?
i ask a similar question to this, more than a few times ive been unsure of the persons skils or their ability to answer the question well in english.
Yep, that's pretty much what they do. They're designed to help with rollout of new features, but they also work well for A/B testing
Donald Trump, is that you?
For a big organisation above the 200+ employee mark this is going to be a real win IMHO. It's either this or maintain wikis. 
I honestly don't know how I would answer this question...so I guess that'd be me out of the running.. 
Funny enough, After I did my interiview and got the job, the interviewers asked me how to improve the interview process. They did the classic fizzBuzz question, but that is commonly documented now and I think has fizzed out. What I suggested was having the applicant do a simple login system using OOP with a provided User and MySQL class, it was up to the applicant to write the logic. It will test how they handle data, how they handle sessions and cookes, coding style, code expandbility and maintainability as well as what do they understand about security. After a couple of months of working there, they came back to me saying they trailed it on a few applicants and it was a huge success. They were able to filter out applicatents who didnt understand OOP, poor security knowlege or just flat out terrible non-functioning code. As well a few who showed dextarity in PHP which was the aim of the test. I wouldn't test someone for Unit testing or Coding standards, When I got the job I got, I had never done TDD, You may require it, But i feel you should allow someone who never unitted before to come into an envoriment where it is essetial so they may learn. Coding standard just bring contriversey, Recruiting someone based on if they follow PSR or not is so mediocore, Just let the CI's handle it. Thats what we do.
[10 Things I learned from /r/php!](https://www.reddit.com/r/PHP/comments/25mdqi/10_things_i_learned_from_rphp/)
Nice, With this library I was able to fold a tree. Take alook. [My tree](https://img.wonderhowto.com/img/99/04/63475338918982/0/fold-simple-origami-christmas-tree.1280x600.jpg)
Oh, I don't mind switching languages; I'll interview in Mandarin, Korean, Russian, Spanish, German, or English. Mind sharing your similar question?
Ever have to parse and mutate pieces of data from a multidimensional array? Lots of ways to skin that cat. So, which way did you choose and why/how did you decide that was the best tool to do that?
&gt; I suspect this is because their ability to write code and read code are correlated but it takes them less time to read and reason about the code than it would to write it. This is fact. Consider: how many times is a piece of code read by a person vs. written. 
Check out split.io. I visited their both in aws reinvent. Not sure of the cost but it's another option.
I usually ask "what do you like most/least about PHP/JavaScript/whatever technology we're primarily using." Can usually get a pretty good idea on where someone is at based on their answers.
Big Bill fan here, SQL antipatterns was such a masterpiece
notepad++
From OP's link &gt; Anyone who has used a wiki for this purpose has probably discovered that not very much knowledge actually makes it into the wiki, and what does is not particularly useful, doesn‚Äôt get updated, and honestly it just feels like a bunch of homework to write a bunch of wiki documentation about your code when you don‚Äôt know if it will ever help anyone
You're right! I failed the test.
Hello again! I'm pondering something and your input here may tip me into writing some code on a project or away from it. Hence the potentially cryptic line of questioning. On a given test, how do you know whether the option presented did well or poorly? Is it a boolean response variable? Something else?
Remember there will be no Google to find you relevant answers. For the small amount of data it should be OK but with hundreds questions in each tag I doubt it would be possible to reuse once answered question.
Can anyone provide resources to learn more about dependency injection in general, and best practices associated with automatic dependency injection in particular? I'm not fully versed with the topic despite being a PHP dev for 5-ish years, but the way frameworks like Laravel can automagically pull in the required object by just asking for it as a parameter in a controller method unnerves me.
Errr - the kind of data I would be storing as a business would more than likely be personal/private to the company itself - trade secrets/internal projects/software/policies - not something I want to search via Google. I think maybe you're missing the point of this as an offering? 
I think maybe you're missing the point of this as an offering. Completely. There is NO practice exists in using Stack Overflow without Google. Like it is said in the other comment, [I don't think I've ever actually navigated Stack Overflow. I exclusively enter the site from a google search, then leave](https://www.reddit.com/r/PHP/comments/8gqhmq/stack_overflow_introduced_so_for_teams_sort_of/dyec45i/). That's how people are using Stack Overflow. Now take out Google from this equation.
No love for this bot. ‚òπÔ∏è
Yeah you've lost me. SO has it's own search internal - yes, Google index the public side great and yes, I usually do the same to find answers (via Google). But clearly that isn't going to work for an internal SO site - and that will in no way a problem for the target market here. It's like saying I can't use my companies Wiki since it's private and thus Google can't index it.
I've written a blog post about DI for beginners last week, maybe it can help? https://www.stitcher.io/blog/dependency-injection-for-beginners
Have you tried using it for what they're suggesting the use case is?
We used to use something and it was terrible. This would have been so much better. Now we just use Slack which is mostly instant but worse in the fact you can't find historical answers.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
You can have recursive data structures in statically typed languages. Generics also can be had in dynamically typed language. So another unrelated argument. &gt; And you can still validate the types (and values) at runtime You have to validate tags at runtime.
I personally know more than 20 of PSR-11 based containers which does exactly the same thing... https://packagist.org/packages/psr/container/dependents
We ask candidates to build the game Crazy Eights. They are allowed to do anything and take as much time as they need until the working day is over. By using this method we see a lot of different ways of creating the game. Some people will make one file without classes in 8 hours, the other one builds classes, uses composer and adds unit testing in 3 hours. After they say they're done then we check the code and ask them/her to explain it. By using this test we can determine if a candidate is junior, medior or senior based on the code quality, time they spent and how good they can explain their own code. 
I think I also adopted that approach because it made constructors slightly easier to override when unit testing. Anyhow, thank you both for your constructive feedback. Any more?
This is spam shit.
mysql_* Anyone who gives that answer to me in an interview can go home right away. 
If people aren‚Äôt using your internal wiki, people aren‚Äôt going to use your internal SO.
Well, I'm not so sure about that. When you have to fill up the wiki you are in kind of a bringing mode. You have to anticipate what people would want to know about your system and what questions they might have. In a private SO setting there would rather be a request mode. People would first ask the questions they actually need to know (I don't know how often I had to ask our payment guys what parameters their api takes) and then you would only answer those, and thus the documentation would flesh out over time with actual questions that somebody was interested in. Now, the main problem I see with this is, that the connection between the people asking and the people answering is not always there, and I doubt any company would be willing to let people spend regular time on their internal SO to answer questions.
What is not true? I said his answers are wrong. The example i gave is from the blog.
Ah damn I misunderstood your answer. Editing. 
I just released an even more ultra-lightweight PSR-11 container: class Meh implements ContainerInterface { private $stuff; function __construct($stuff) { $this-&gt;stuff = $stuff; } function get($id) { if (!isset($this-&gt;stuff[$id])) throw new class implements NotFoundExceptionInterface(); if ($this-&gt;stuff[$id] instanceof \Closure) $this-&gt;stuff[$id] = $this-&gt;stuff[$id](); return $this-&gt;stuff[$id]; } function has($id) { return isset($this-&gt;stuff[$id]); } }
&gt; For a super simple project this might be okay. But this doesn't provide inversion of control unless you write a closure/callable for every class that has dependencies. That's not what "inversion of control" means.
None of this means what you said it did.
Very nice, good comment!
Not as far as I know. You can do it yourself using something like Gulp but it's a bit of manual work.
And there will be 20 more next year, so? That's precisely why PSR contracts exist.
Just did.
I love you
I love you both
You obviously read over &gt; without requiring generics. Also you don't &gt; have to validate tags at runtime. In some cases you can just let your program crash. Especially if some "struct" is only intended to be provided by programmers statically. Such as a configuration object for use in multiple places.
It is not only a question of making it into a knowledge base but also a question of actually using it. While nobody have the experience in using SO without Google. And I can tell you it will be a pain, as SO is all about finding questions using Google.
That's a survival bias problem. You are aware only of those lazy butts who don't bother to read the documentation, and completely unaware of the proper folks who just read the docs and get their answers. So you think nobody reads the docs at all. 
Yes, but what is the point of writing one on one same code then there is already one present? I mean if you don't have anything to do then go ahead but I personally see it as a waste of time... 
&gt; Eclipse is the first name that comes to any PHP developer‚Äôs mind when talking of the most useful PHP tools and IDE LOL!
I use the test tools in PHPStorm which offer a few more possibilities compared to the CLI tool. Things like only rerunning failed tests, debugging a failing test, etc. I also sometimes use this package: https://github.com/spatie/phpunit-watcher . It will start a long running process in your IDE, and rerun your tests, filtered or not; when saving files.
Come on, you are too demanding towards a blogspam article written by a janitor :)
Well, I know our docs. And let me assure you, they are less than stellar. Never mind that they have been transported between several systems (Internal Wordpress Blog -&gt; Some kind of Wiki -&gt; Phabrikator) whenever the devops found some new cool thing to use and with each movement some things fall away to the side and some things are just very old and no longer true. We have people who are very active in updating their part of the wiki (the devops themselves for example) and then we have parts that have been "tbd" for a depressingly long time...
Or run open stackexchange for free
The easy answer is OAuth2 with OpenID Connect. Unfortunately, this implies JSON Web Tokens, so you'll have to make sure you're using a secure library ([e.g.](https://github.com/lcobucci/jwt/tree/3.2.2)) and only with `RS256` or `HS256` (but not both, choose to accept only one). If that's too scary/boring, read up on [cross-domain authentication](https://paragonie.com/blog/2016/02/one-login-rule-them-all-seamless-and-secure-cross-domain-authentication).
I am just unable to get what makes you think that Q&amp;A format will make it any better. Given existing problems of SO, like a lot of duplicated answers most of which are stale and unreliable, I don't see how it can help. People are always excited about *writing*, the possibility to write a question or an answer. But seldom think who would read the answer beside the OP and why.
I'd recommend this one: https://github.com/offdev/bandit It's better than classic A/B testing, as it corrects itself over time, making it way more effective. The algorithm is used in medicine too, when testing new medications, and to reduce the amount of harm potentially posed by some new experimental drug.
Well, if you really want it, you can make a good IDE from vim, and there is a lot of info [in this very sub](https://www.reddit.com/r/vim/comments/7q3mth/using_vim_as_a_php_ide/). But it seems you just want someone to come up with a robust solution for your quite an odd whim served on a plate. This I doubt you'll get. 
there are tons of task runners that watch file changes... ie. grunt watch, etc...
The closest your going to get is launching a IDE through command line. If that's not an option, You'll just need to go all out with plugins like need-tree, fugitive, etc. The appeal of command line text editors like vim is how lightweight they are and you're not going to get some w/ parity to a full on IDE without launching an application with a full gui. 
What are you trying to figure out? I have some old code I wrote for a subreddit bot, but the API's take anywhere from 5 to 50 minutes to update video feeds, so I decided to just scrape their HTML instead.
I'm not aware of anything that _exactly_ matches your requirements, but I wonder if [Spacevim](https://github.com/SpaceVim/SpaceVim) comes close? I don't use it myself, but as I understand it it's basically a vim distribution that has curated all the plugins that you might want in order to make it into a mostly-IDE for many languages - php included. So it's still just vim, but with all the hard work setting up plugins done for you.
You mean like SSO? https://www.shibboleth.net
Huh, I thought was asking if such a thing existed. In fact, quoting myself: &gt;Does a proper cli/text-based IDE exist? In addition, as I said, I realize that vim makes a pretty good php editor. Again, quoting the OP: &gt;I'm aware that vim, with the proper menagerie of plugins, etc., makes a pretty good php editor. I'm sorry you saw that as a request to actually build something. Blue
I'm guessing you haven't spent the time to learn vim because navigating text (with a keyboard) in vim is already as simple as it gets. You want to go 22 lines down ? type 22 then the down arrow. You want to search for text ? type /whateverYouWant, then enter. It doesn't get any more simple than this, my friend.
As I said: &gt; Does a proper *cli/text-based* IDE exist? By that I mean an IDE that is text-based. I assumed that would eliminate GUIs. 
Yeah, not exactly what I was asking for, but helpful nonetheless, thanks! I'll give it try. I'm always a little hesitant to change start mucking about with my vim practices, mainly because I've got muscle memory burned in pretty deep (I've been using vi/vim for a long, long time). Thanks again!
Jenkins + git
The closest you'll probably get is PhpStorm with the Vim plugin installed. I believe it matches or creates Vim keybindings in PhpStorm. Turn off the menus and a few other things and you'll be pretty close. But have you thought about how a text only IDE would work? I'm trying to think about it and all I can think off is a bunch - and I mean a bunch - of config files. Then trying to manage global settings vs project settings. Bleh. Good luck.
Well, on the original SO that's mainly because of the massive number of users with a wiiiide range of capabilities. Sometimes those do not include the ability to even formulate what they want to know. In a closed office environment I guess this would be much more focused, since people (well, at least where I work) are more or less on the same level. I keep wondering why you are SO vehemently against this, as if it was a personal affront to you?!
haha . try typing :q .
All I wanted to do was list my channel's videos but I struggled to even get the credentials sorted. Basically got no where
[SpaceVim](https://github.com/SpaceVim/SpaceVim) might be a good option for you. It is a vim distribution that is much more IDE like out of the box. Under the hood, it is exactly what you didn't want - but this was certainly assembled with IDE functionality in mind without you having to chase down, install, and configure a menagerie of plugins. 
Aren't you a bit old for cutesy text faces.... &gt;.&lt;
A combination of infinite loop and Supervisord is one way.
Cron is what you're looking for. 
Kinda relevant talk of why it can really exist : https://www.destroyallsoftware.com/talks/a-whole-new-world tl; dr; You would have to create a brand new console standard which isn't based on some 40 years old VT100 and didn't change for global retrocompatibility purposes
Shibboleth is a pretty well established package that can be setup on one server or multiple servers. SSO sounds like it's more appropriate to what you're wanting to do.
lol . i give up 
/u/therealgaxbo beat you to the punch, but thanks anyway!
&gt; I've actually been using vi/vim for decades. &gt; An IDE assists with coding. For example, suppose I have a method called getAllThingsByName in a class called theClassOfAllThings. An IDE is aware of the both the class and the method and helps by offering suggestions as I type. That way I don't do something like theClassOfAlThings::getAllThingsByNames(). I bet I've saved months of effort over the years by using an IDE. There is no way you've been using vim for 20+years (you said decades), and don't know how to enable smart autocompletion. I use vim for everything, and typing theClassOfAllThings:: will pop a window with stuff I can use, with function signatures. 
Damn, I skimmed all of the posts, missed that one. Good luck with your search! 
This could be a series of Cron jobs, or a single script run from the command line. In the script you could have an infinite loop that: * Checks the time * Decides whether any action is necessary based on the current time and the last time action was taken (which is stored in the database) * Takes any actions necessary * sleep(60) before executing the loop again It'll keep running at the command line until interrupted by ctrl-c, system shutdown, etc.
Single database table of usernames, \(hashed\) passwords, etc. And a flag or 2 to say which of the sites the credentials are valid for. Be careful when you say "you'll have one login that will log you into both sites". Do you mean that you'll have one valid username/pw that will work on both sites? Or are you looking for single sign\-on? The former is easy, and can be done as described in my first point above. The latter is harder, and frankly is best avoided if you possibly can, because it's a lot more hassle. And once someone's logged into each site once, their browser will probably cache the passwords anyway so it's not really an issue.
I'm not sure what you mean by a text\-based command line IDE. And I don't think you are either. And I fail to understand why you want one. Get some clarity on those issues first, then perhaps revise your question?
What I mean is an IDE that isn't GUI-based. Again, vim comes to mind right way, but my question is if there's a purpose-built IDE that's text based. I used the terms cli and text-based to cast a wider net.
can you give me some idea on how much direction of scope you give them? I;m not sure what "crazy eights " is (the card game i assume?) . 
Thanks. This is my feeling as well. In addition, it bolsters the idea that vim is probably as close as we'll get any time soon. Well, maybe emacs, but I haven't used emacs since I was an Amiga, decades ago. 
i like this idea, it hits on most of the stuff we are looking for: &gt;It will test how they handle data, how they handle sessions and cookes, coding style, code expandbility and maintainability as well &gt;as what do they understand about security. only thing i will say is my def of senior level candidate requires a working knowledge of unit testing we have a largely untested code base and i really dont want any more devs who need training or exhaustive amount of arguing/convincing to believe there is value in having tests,we're all stocked up on those already 
[Sismo](https://sismo.symfony.com) is the first thing that springs to mind. It's set up to run on git commits and is essentially a lightweight CI server for local use.
Cron jobs are what you're after, use them to run code and specific times. I've built games using the same technique.
Jwt all the way
Thats what its inteded. All you do is provide 3 files, index.php, Library/Database.class.php and Library/User.class.php index.php will be as follows: &lt;?php require_once("Library/Database.class.php"); require_once("Library/User.class.php"); ?&gt; &lt;html&gt; &lt;body&gt; &lt;h1&gt;Login&lt;/h1&gt; &lt;form&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; Database.class.php will be as follows (and same for User class): &lt;?php class Database { } It is up to the condident to decide if they should use mysql_ (Yuck) PDO::class or Mysql::class. Test if they correctly ingest data, test how they display data, Do they mitigate XSS, Do they build the mysql class to accept configuration parameters or do they hard code them into the class. etc etc. You understand, you can add unit testing specifics if you feels its absolutly required. 
delete
Depends, I usually define exception types for similar issues \- so parser would throw an IO exception for missing or unreadable file both. I consider messages for debugging purposes only \- those aren't designed for handling, a code is. So mentioned parser would throw same exception for missing closing tag, invalid attribute etc., just code would be different for all kind of issues.
Hey. Im sort of in the same situation, let me draw you an image. This is a website that offers website designs to the customers. It has a portal customers can log in to, a support ticket system and order.php to order custom designs and a support contract. The support contract is going to be paid monthly, is there an easy way to do this? 
time_sleep_until() instead of sleep() is what you‚Äôd want so that each iteration wouldn‚Äôt get farther and farther off clock time.
You gave one example, I gave you one answer..
PSR\-2 coding what? Are you really gona reject someone because you don't like what whitespace character he uses or because he places braces *wrong*? We have tools for this, don't we?
I don't like the idea of creating a process for every message. Sending a SMTP isn't that hard, you could quite easily handle that with React Socket. Another solution would be a queue \- you can dispatch messages in non\-blocking manner and handle messages per minute limitation in a worker, which is good idea anyway.
That's so bad...like that's not even how canonical URLs should work at all. Your user shouldn't really have control over what the canonical URL ends up being.
I've been doing a hybrid of late; custom Exception class with static constructor methods. Lets me organize into BadFileException class but have built in error messages for the issue in the class itself instead of the code throwing the exception. Something like throw BadFileException::fileNotFound($filename);
The philosophy in our codebase is that exceptions are exceptional and in nearly all cases you are not going to handle them except at the root of the application or request handler. This means it matters very little about what type of exception is thrown because the error message is more important. So we use generic exception types with specific messages.
You should be answering questions with a wiki. Someone asks a question, direct them to the answer on the wiki answering them. You have a question? Ask for the documentation on the wiki. If you can‚Äôt do that, an internal SO isn‚Äôt going to fix that. What it will do is split the documentation into multiple sources.
It's definitely useful as you can specifically "catch" specific exceptions and handle them differently. try { } catch (FileFormatMistmatchException $e) { // Do something about the file format? } catch (FileNotFoundException $e) { // Maybe look for it somewhere else? } catch (Exception $e) { // Everything else }
Some interesting points brought up/addressed in this thread. We do a handful of ecom sites a year at my agency, mainly in Magento 2. Though I do not work on them (by choice), I can see the developers here that do getting the life sucked out of them since we switched to Magento 2. It's starting to feel like CE is going to drown in issues and end up dead. With all the focus and resources on EE, there just isn't enough effort going to CE. If we continue doing ecom here, I will probably push for a switch to Sylius, which seems to be doing well lately.
The short answer is to split by types based on how you expect people will be writing their catch-blocks.
I'm tagging this on to here because you're the only one besides myself that mentioned infinite loops. I don't think it needs the sleep as it could just keep running continuously. Each run could potentially have a user/player that needs something updated. &gt; Create product 1, which takes 1h and 20 resources A player is going to create a product which takes 1 hour to process but if you have 10 players creating products, all the products are not going to be done at the same time. So, if you have a cron job running every hour and say Player 1 has a product ready but Players 2,3,and 4 still have about 10-15 minutes left, Player 2, 3, and 4 will not get their product completed until the next cron job which is another hour. You could run the cron job every minute but that's a lot of processes running and how would that be any different than an infinite loop script being managed by Supervisor?
You can use a distributed worker/message system to speed up the process of scanning, you can use RabbitMQ to dispatch a list of sites and build up a work queue then launch background workers to consume the queue. Since each php worker is in a separate process you can get N times the throughput.
&gt; that's just one example. my question is, do you prefer to have one exception type per exception. i.e. if you have 100 different exceptions firing off, do you make 100 different exception classes, or just use messages with more general classes as long you extend one general exception it doesnt matter at all and you shouldnt think about it
I was reading about it recently. Maybe this summary about different Exception types will be useful to someone http://code.ironleg.net/php/php-oop-spl-exception-classes/
What is your database? 100k records is nothing. Is it indexed properly?
Themed PHP the right way. I'm trying to understand better what would be the architecture behind "good" PHP apps. 1. Redirect all requests to the index 2. Set up an autoloader for your classes (manually, composer, which one? and is it just as simply as calling the function on the folder containing the classes?) 3. Set up a config file that you'll include in the index. 4. Explode the url by slashes 5. Depending on the url, call a certain "controller function" which may or may not obtain some data from either directly the database or through a service function from the database, package the data into an object and depending on the url, call a render function passing the data as a param. 6. The render function just includes some html file making the data object available to this html page localhost/blog/post/1 would translate roughly into: blog class, getBlogPost($id) controller function, getPostByID($id) service, blogpost.html view Did I got it wrong? 
&gt; I've been working with Magento 2 for over a year now, and I don't agree with your comments at all. As any software, it gets better with every release, and the Magento team is there to hear your feedback if you are experiencing problems. Iv'e looked their their mess of what they call a code base and while 1.0 was a mess, 2.0 was a bit cleaner, it just seems like, in a lot of areas, they went backwards, not forwards.
Liking this.
I usually use a standard [SPL exception class](http://php.net/manual/en/spl.exceptions.php) that is as specific as possible. Then pass the exact error message to this Exception instance. However, I would not create a separate class for each individual error message. Only in rare exceptional cases I create my own exception class. (For example: ValidationException).
&gt; The philosophy in our codebase at work is that exceptions are exceptional and in nearly all cases you are not going to handle them except at the root of the application or request handler. This is, by and large, the only safe approach I've found when it comes to error handling. Write code that will fail loudly, and then create glue/routing/controllers/etc that assumes success and handles (almost) no error cases. Having said that, I still prefer to throw very specific exceptions whenever possible - not to the point where every `throw` has its own exception class, but at least to a level of "be more specific than just `Exception`". My root-level exception handler has switching logic, but mostly "this is uninteresting, don't log", "this translates to HTTP 403", "this class is for data validation problems, and I can use this method to expose the list of invalid fields" and stuff like that. Nearly all of these cases are defined by third-party libraries. Outside of authentication (and a couple very specific things), my application code just uses SPL Exceptions.
This is what I follow as well. I rarely use anything more than \Exception. But for distributed code, like a library or platform, it's better to have specific exceptions for developer sanity.
How does this work exactly?
So you extend them and have thought about it. I just have to shake my head at idiots like you who are self ignorant and condescending at the same time.
[Huehuehuehuehuehuehuehuehuehuehue](https://i.ytimg.com/vi/ura5TD0AfcI/hqdefault.jpg)
Yeahh I don't think you're understanding the question. Obviously you extend base exception classes
One option is to put PHP at the top to initialize variables and compute or get data, then use a hereto to output HTML with any PHP variables easily included. Example: print &lt;&lt;&lt; ENDHTML HTML here with $mydata. ENDHTML; Simple, but easy to write and understand.
Use a template engine like Plates, Handlebars, or Twig.
It would have made sense in Perl, but PHP can *escape HTML already*, without this ugly heredoc thing. Just close PHP tag and write HTML as is.
You might be able to avoid loops and timers altogether. When a user starts a task, write a record to a task tracker with the start time and rate of change. When that user or any user hits the server again, you can query to find the time difference and compute the new value or quantity as needed. Thoughts?
Different types for different handling. Same type, but different messages for: logging and easier debugging.
I do this too. It really helps at making the exception messages consistent (rather than a slightly different message in all the places you throw the exception), which helps in log file processing.
The MVC pattern is for you.
Look into this vim plugin: https://github.com/phpactor/phpactor
These days we use MVC frameworks. I doubt redoing the entire site using one of those is going to be worth the effort though. You may be better off using a template engine as suggested by /u/Shadowhand. This will allow you to at least separate the PHP and HTML into different files.
1. Correct. That's called the [front controller](https://en.wikipedia.org/wiki/Front_controller) pattern - all requests are routed through a single entry point. You can have a more complex setup where there are multiple entry points but that's rarely necessary, especially not for simple applications. 2. You should use Composer and its autoloader since Composer should already be used for managing your dependencies. That way you don't have to do almost any manual work and you also adhere to community standards such as [PSR-4](https://www.php-fig.org/psr/psr-4/) (it will be easier to work with other people this way). If you do that, it's enough to simply declare `"autoload": {"psr-4": {"App\\": "src/"}}`, run `composer dump-autoload` and include the generated `vendor/autoload.php` file in your `index.php` file. 3. It's usually a bit more complex for several reasons. 1) Real world application configuration tends to be split into multiple files due to the amount of configuration options. 2) You have to find a way to pass the config values to the controller (assuming that routing and dispatching is done automatically). 3) There will often be options that you don't want included in the config file such as DB credentials. That means that you either need to use environment variables or keep the config file outside of the version control (often both of these options are used at the same time). I'd probably create a dedicated service for accessing config files and pass it to the controller by using dependency injection. Alternatively it's also possible to pass only the required config values if you utilize controller factories (IIRC Zend Framework 2 did something similar). 4. Correct, although you'll want to use a framework or a 3rd party library such as `nikic/fast-route` to avoid reinventing the wheel. 5. Correct. The difficult part is usually handling the dependencies (e.g. controller accepts a repository, as well as view rendering service in its constructor). 6. It's usually a PHP file that you're including not plain HTML. Most people use a templating engine such as Twig, Plates or Blade to handle this part. The overall idea is correct though.
**Front controller** The front controller software design pattern is listed in several pattern catalogs and related to the design of web applications. It is "a controller that handles all requests for a website", which is a useful structure for web application developers to achieve the flexibility and reuse without code redundancy. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Why not remove the redundant **Exception** suffix and **file** prefix and write it like this: throw BadFile::notFound($filename); To me, this is much much more clean. It's already implied that **BadFile** is an exception and **notFound** implies that the file with the name of $filename is not found. Feel free to throw your valuable opinion in a replay.
It works when you're doing everything yourself. But once you decide to outsource some HTML design, or get a designer to work along it will be a pain. HTML is better to be stored as is, in a single file with some template engine logic between. it is much more readable and maintainable than your separate snippets scattered along PHP files
Maybe a daft question, but what is the best way to handle an exception after you've caught it? Log it somewhere? Show it to the user?
Deadlybeef, thank you for your suggestion Do i understand it right that advantage of Bandit over traditional AB is that Bandit recognized better outcomes himself and auto applies them? It's kind of auto AB testing, am i right? (of course you still need to provide variations, but it automatically recognizes and applies better outcome)
There's nothing wrong with PHP in html files. Template engines are just syntactic sugar for injecting another language into html. The important step that nobody seems to have emphasized is to keep your html (view files) dump. Take all the logic that you don't consider strictly presentational and put it in a controller. You'll find this will make the code base a lot cleaner and more manageable down the line. If you've got time to completely rewrite everything then yeah go for something like Twig. You might find a better middle ground is to simply refactor out most the heavy logic and try to only leave &lt;?= (Echo statements) and the inevitable loops &amp; conditionals that wrap them.
The comments here made me forget all the progress we made with PHP in a split second. Unless you are making a single page prototype for something, never mix your HTML with PHP. It will quickly be insanely hard to reuse code, refactor code and just have a general perspective 'where things live'. Once your app gets bigger than a single script, this will pave the way for a totally unmaintable situation (which is what you are presented now). Most PHP frameworks will have some split between logic / presentation. Mostly with controllers in PHP and presentation in some template engine like twig. Depending on the scale of your project you might want to split it up in even more layers but what I gather from your question that might be a big leap. If you are interested though I would recommend watching this talk: https://www.youtube.com/watch?v=fgQWnglnGeU
Laravel is a great choice but may be an overkill for smaller projects.
If you simply sort by the last time they were selected, you should always get the person who got the benefit the longest ago.
Correct. 
The person who last benefitted should be at the bottom. The earliest date is the highest value (May 2nd &gt; May 1st), so you'll want to sort by date in ascending order. Keep in mind someone new could have no last_benefitted date, depending on how you set up that value.
Thank you, would you mind taking me a step further into so more details related to the last few steps(4,5,6)? I'm not looking for an exhaustive breakup, just enough to clarify some things I still wonder about. I like Laravel as a framework and I plan on using that when needed while I'm also reading about symfony arhitecture, there is a tutorial which takes you from plain PHP to the symfony arhitecture(https://symfony.com/doc/current/introduction/from_flat_php_to_symfony2.html). However, I do want to go through all these parts of an MVC app myself and if possible create the logics behind following guidelines so I can get a better understanding of whats going on with each part and also to feel more in control when using frameworks that are built on similar patterns, because I feel that once I know more about the raw parts, I can take that to any language more easily(say Java) The part handling the URL and breaking it into pieces to know what functions to call it's called, routing, right? that's what it does, it solves requests to "pages" which are actually bunch of functions, models and templates served back to the client. What are the difficult parts for which using a 3rd party library is better than writing your own routing? Can it be done, writing your own routing for personal projects? A summary of what it involves? "Controller accepts a repository as well as view rendering service in its constructor", what does the rendering usually do? And the repository is persistent data taken from database, other sources, modeled into a class which also has bunch of methods to interact with the data(gets,sets), right? And how is the templating part being done? I've heard about Blade, but as I said, I'm trying to reinvent the wheel for myself for learning purposes. I imagine after you get a request, say localhost/viewprofile/oneistbesser, after you get all the data you need inside some variables in your entry point(index in my case), do you just require a view based on the first param(viewprofile) which will be a php file that has html, but echoing data from the PHP variables that you have prepared? or do you need a "render" method? what does that do? I've seen something with ob_start(), but im not sure yet why use that.
I've installed PHPStorm with snapcraft. Seems like a nice idea especially for desktop applications. Although for server side applications and environments, the docker ecosystem essentially fills the same brief.
It's easier calling risky code that has specific exceptions, ideally ones that have a common interface for typehinting the generic case. I.e. NotFound and BadFile implement the FileException interface so that I can target specific errors I can deal with and catch-all ones I can't deal with.
I want the new people at the bottom and the oldest last selected date at the top, for a fair rotation, so ASC then?
I would never want my php (or any underlying server application) to auto update. Before updating I make sure to thoroughly test my code. I think snaps will be great for some uses like desktop applications, but not suitable for server applications.
&gt; The part handling the URL and breaking it into pieces to know what functions to call it's called, routing, right? that's what it does, it solves requests to "pages" which are actually bunch of functions, models and templates served back to the client. Yep, that's routing. The part where you actually call a method on the controller by passing the route parameters is called dispatching. Some frameworks and libraries mix these things together but it's generally better to adhere to SRP (Single Responsibility Principle) and have a dedicated route dispatcher. &gt; What are the difficult parts for which using a 3rd party library is better than writing your own routing? Can it be done, writing your own routing for personal projects? A summary of what it involves? Yes, you absolutely can write your own router. If you're learning, it can be quite beneficial to try to do everything by yourself. I wouldn't recommend actually using it in production though. Writing a good library is difficult, and most of the popular ones have been battle tested for months or years. If you want to create your own router, you should try to replicate what any of the popular libraries does (not how does it do it). A simple example of how a route library could look like: * A route object * A router that will be the main API of your library * Some kind of route registry that allows you to register and store new routes (e.g. `$router-&gt;registerRoute(Request::METHOD_GET, '/foo/:bar', function ($bar) { echo $bar; });`). * A route resolver that would parse the URL and attempt to match it to a registered route. * A route dispatcher that invokes the registered handler (it can be a closure, a method on a controller or the controller itself if it uses the `__invoke` magic method). &gt; "Controller accepts a repository as well as view rendering service in its constructor", what does the rendering usually do? And the repository is persistent data taken from database, other sources, modeled into a class which also has bunch of methods to interact with the data(gets,sets), right? View rendering is responsible for transforming a template file (e.g. `blog/index.php`) to a HTML that can be displayed in the browser. It usually involves combining several smaller template files (partials), handling the template inheritance (e.g. a template that extends from a master layout file) and replacing the provided variables into HTML content. A [repository](https://www.martinfowler.com/eaaCatalog/repository.html) is used for retrieving your domain models / entities. It could have methods like `find(string $id)`, `findBy(Closure $criteria)` and `getAll()`. Depending on the implementation it could also persist the objects in the DB. &gt; And how is the templating part being done? I've heard about Blade, but as I said, I'm trying to reinvent the wheel for myself for learning purposes. &gt; or do you need a "render" method? what does that do? I've seen something with ob_start(), but im not sure yet why use that. You're on the right path. `ob` in `ob_start` means output buffering. It's used for storing the template output in a variable (buffer) and sending it to the browser in one go. While the output buffering is active (e.g. from `ob_start` till the point you're calling `ob_end_flush` to flush the buffer and output the result), no output will be sent from your script aside from HTTP headers. I may have missed something but that hopefully should answer most of your questions. 
Yes, ASC, and then you make the last selected date ‚Äútoday‚Äù for new people, so they will go to the end of the queue.
Golang and node.js are already using it as an optional installation way. And installation is really simple and fast. Just saying... But since so far it seems that also the PHP core team is not really in favor of this idea either we will have issues seeing an official PHP snaps there.
From the top of my head, you may also have some of BadFile::parserNotFound BadFile::mimeNotFound possible exceptions. As for "Exception" part it may help in huge project in case you don't use namespaces for some reason (even though it is 2018) making class names more clear in IDE autocomplete dialogue.
thank you very much! :-)
I am not sure the updating is the forced automated update you may think it is. If these were truly unattended automated updates and there wasn't the ability to configure that then there would be no need for: &gt; snap refresh &lt;name&gt; https://docs.snapcraft.io/core/updates
&gt;Should the exception type describe the exception? Ideally, yes. It should describe them well enough that the suffix `Exception` shouldn't even be necessary. `FileNotFound`, `InvalidFileFormat` and `MismatchingFileFormats` are all communicative enough of exceptional behaviour, whereas `BadFile` is ambiguous \(for the very reason that there are at least 3 ways from your example that a file can be "bad"\). It also allows gives you the flexibility of handling each case separately if need be, without having to parse the message or give a custom exception code: try { // ... } catch (FileNotFound $exception) { // ... } catch (InvalidFileFormat $exception) { // ... } catch (MismatchingFileFormats $exception) { // ... } If all three cases frequently need to be handled by the same block of code, you can create a base exception for them to extend and catch that instead \(the code which throws the exception is still being as communicative as possible about what the error is\). But it also depends on how fine\-grained it needs to be within your application. Domain logic exceptions rarely need to be that fine\-grained because they are so rarely encountered \(and often require the user to deliberately try to cause the exceptional behaviour\). On the other hand, common cases of user error \(e.g. missing/invalid request parameters\) will likely be easier for both the user \(and developer\) to debug with more fine\-grained exception types. I prefer having more exception types because it is easy to get lazy and throw a non\-descriptive or badly described plain `Exception` that is difficult for developers to debug further down the line. More types means more reusable error messages whilst still communicating the actual error effectively from the thrower's perspective.
PHP has a template syntax that looks like this: &lt;div&lt;?php if ($active): ?&gt; class="active"&lt;? endif; ?&gt;&gt; &lt;?= $username ?&gt; &lt;/div&gt;
Yeah I think I'm with you here, I need to get more granular. I have a bunch of message constants that I set into a very general exception. It'd make a lot more sense for them to all be exceptions. 
Not really...all of the major PHP frameworks are MVC frameworks and while MVSC patterns are creeping into "web" development workflows, I don't think you commonly see major CQRS or ESB frameworks on most web projects today, outside of an enterprise context.
I usually do have the Exception removed, I just typed it out here for the example. I much prefer removing the redundancy like Exception, Interface, Abstract...
Check if "Micro" text editor fits your needs. I think goal of the project is to make text mode Sublime Text clone. https://micro-editor.github.io/
I dunno much about mvc framework history but helpers and commands feature heavily in the ones I've seen as of late, Laravel coming first to mind... ( https://laravel.com/docs/5.0/commands https://laravel.com/docs/5.0/helpers )
Depends on the error. You definitely want to tell the user something. In the example given by OP, there is probably some really useful messaging that could be driven off of the specific file exception types. These can be neatly integrated into the UI as simple warning or error messages. You also want to log _most_ of them. Basically, you want to log it if the application messed up so you can find it later and fix it. If the exception is driven entirely by user input (e.g. BadFileException), then there's no value to be had by logging it, because the remedy would be for the user not to have sent in a bad file in the first place.
I would suggest sorting twice. This is possible in MySQL. Give all new users the last_benefit date of "2016-01-01" or something. Also store a "registered_at" date **and time**. Then, sort on both: sort by last_benefit ASC, registered_at ASC
It isn't as robust as a template engine or MVC framework, but if you just need a quick- dirty way of pulling the business logic out of templates, you could use the [output buffer](http://php.net/manual/en/ref.outcontrol.php) wrapped up in a function that returns the rendered templates. ie // path is the template file you want to include ( // args is an array containing any data you want to be available in your template file function render_php($path,array $args){ ob_start(); include($path); // include the template file. $var=ob_get_contents(); ob_end_clean(); return $var; } 
I'm not a fan of the separation, especially when dealing with many hundreds of functional pages dealing with things such as databases, forms, reporting . I prefer that the controller sets itself up with the desired properties and then has the rendering contained within. Is there any static analysis tools that deal with passing information to templating engines that can ensure variables/functions/members are known ahead of time? 
On what planet is MVC a controversial topic in PHP? There may be disagreements on how to _implement_ MVC, which is why we have more than one major framework, but basically everyone has agreed for years that MVC is a good thing.
In the example of bad file uploads, what is the benefit of throwing an exception over simply printing the file upload error message?
I prefer a simple `&lt;div&lt;?= $active ? ' class="active"' : '' ?&gt;&gt; &lt;?= $username ?&gt; &lt;/div&gt;` I think PHPs "alternative" syntax leads to an unreadable mess
That's weak: ```php &lt;?php if ($active == true) { ?&gt; &lt;div class="active"&gt; &lt;?= $username ?&gt; &lt;/div&gt; &lt;?php } else { ?&gt; &lt;div&gt; &lt;?= $username ?&gt; &lt;/div&gt; &lt;?php } ?&gt; ```
I prefer flightphp it‚Äôs a micro framework, basically the barebones to do what you want (separate php/html and organize your requests and files) 
Usually that you're going to have some dedicated code to handle the file upload separated from your controller. The dedicated code throws, the controller catches and prints.
You don't get syntax coloration with that. I don't echo html, I always output it.
Depeds on your editor/ide
True dat. 
Well I don't know for other pieces of software, but it works with vim. 
If you don't see someone fulfilling a need, then that someone is you.
You could also default the `selected_at` column (or whatever you‚Äôve named it) to `NULL` and query all users, loop through them and find users with `NULL` value first, if it finds one, take it; if it finds multiple, then sort them by their `created_at` or `registered_at` (or whatever you‚Äôve named it) date; and if it finds none then just look at the `selected_at` column ascending.
This kind of answer makes me sad every single time i read it. Just stating something without giving a proper reason as to why you're suggesting this. Especially on this topic because there's just not really any advantage in doing so. All you're gaining is a different syntax for pretty much the same thing. PHP *IS* a templating engine in itself. Handlebars, Twig - or older Smarty - are nothing but frameworks on top of this. They are just another layer that's helpful for people who are less proficient in PHP itself, as these engines are mostly designed to be used by editors, rather than developers. The only suggestion you gave that I'd agree with that is an advantage to use is *Plates* as this is very close to PHP itself and pretty much only provides helpers to access different templates and make structuring your files very comfortable without needing to learn any new syntactical sugar.
In contrast to this I like simple libraries composed of functions modelling the output domain so they can do context-aware escaping when emitting output but do nothing else. For instance, for HTML I have a library like this: ```php use morrisonlevi\html; $author = "Levi Morrison"; $pubdate = "2018-05-05"; $article = html\article()( html\header()( html\h1()("A Simple HTML Library"), html\address()("By {$author}."), html\p()("Published ", html\time(['pubdate' =&gt; $pubdate])($pubdate), ".") ), html\p()("These functions perform proper escaping for attributes, their values, and their children.") ); html\render_fragment($article); ``` For the specific question this user posed it is an easy migration, too. When compared to a "template" library, anyway.
&gt; never mix your HTML with PHP. It will quickly be insanely hard to reuse code There's absolutely nothing wrong with PHP in templates in general. It all depends on WHAT php stuff you're doing in there. Conditional formatting - that's fine. Fetching additional data - naaaaah. And that code-reuse-argument is kinda bogus. Looking into the real world and projects, the number of times I'm actually able to re-use code without modifying more than half of it comes fairly close to zero anyways. 
Sounds like someone needs some {{$blade}} syntax
thank you. 
I like that syntax. üëç
Lol that‚Äôll never happen
php and html is fine, commonly referred to as ".phtml", or you can use a renderer like twig/plates/etc 
Consider using a modern framework. My preference is Laravel.
 It works on the new theme.
There are a lot of variations on the MVC paradigm. Most modern frameworks don't use a pure MVC approach, but fairly similar approaches.
When someone is saying mixing PHP and HTML I do not assume that this person is talking about using PHP as a templating language. Which I agree can be used with proper separation of concerns but then again the question would be why would you? You can so easily use a template engine with more syntactic sugar that lets you focus more on the templating with virtually no overhead or backlash. When talking about reusing code I'm not talking about between different projects per se but more within the same project. Extracting logic towards separate objects/functions with clearly defined (implicit) public interfaces greatly reduces duplicate code and benefits the testability and understandability of your code. However if you do this properly you should be able to extract infralayer code to external packages quite easily.
I love this post, just because it's completely folowwing the KISS principle. Very well explained too!
Thank you, I appreciate it!
My first thought was array_sort, but i guess, this does jot work here... So youay implement a function which takes the array and returns the array. In here, loop the array, find the lowest total ($array[$i]["total']) and add this to a new array. Remember the total value. Then loop again, find the next bigger total, add it, remember, ... Repeat until all values in array (count) are in the new array. Have fun and answer with your function for others to learn, if you like :-)
http://php.net/manual/en/function.usort.php
[usort](http://php.net/manual/en/function.usort.php) is what you're looking for.
Thanks for perfectly summarizing my stance on the topic so that I can easily share it with others :D 0.001 bch u/tippr 
u/localheinz, you've received `0.001 BCH ($1.75 USD)`! *** [^^How to use](https://np.reddit.com/r/tippr/wiki/index) ^^| [^^What is Bitcoin Cash?](https://learnbitcoin.cash/) ^^| [^^Who accepts it?](https://acceptbitcoin.cash) ^^| ^^r/tippr ^(Bitcoin Cash is what Bitcoin should be. Ask about it on r/btc)
Also I like defining proprty docblocks in one line /** @var int */ Which makes classes more readable
What's your approach when you have two or more annotations on a property?
There was no framework mentioned in the comment above. But meh I should know better than explaining obvious things to a random guy on Reddit who understands no context. Cheers.
or he could *just use include*
It's Reddit. People never comment on the *thread*, keeping in mind the context, but just on the message, as though it was posted alone.
Great post thanks and has given me some things to think about. I usually force my Devs to use docblocks on all methods and properties simply because; - files without the are less readable in general. In addition to providing useful information they spread out the code and make the files easier to read. - files with and without docblocks look messy so it‚Äôs an all or nothing approach - I don‚Äôt like to assume another developer will always be able to understand what is going on, I can appreciate some method are probably self explanatory without but that would just be an assumption I don‚Äôt want to make. I‚Äôm not that bothered about class level comments. 
So, it's cleaner to read when unnecessary details are removed, but how do automated documentation tools handle this?
If you can add a dockblock automatically (based on the code that is being document), then the added dockblock falls into the "does not add value" category.
I don't know why you think *"""dependency-free"""* is some kind of utopia, but reimplementing `symfony/process` is fucking stupid. By simply doing that you introduce hundreds of the same old bugs into your code. It probably doesn't even work on Windows.
PHP is a template engine to begin with (though not secure by default since it doesn't automatically escape html or js and is incapable of API sandboxing), but it is still a template engine (maybe that's what PHP core should focus on for the next PHP versions). Yet despite these shortcoming it still makes no sense for me to recommend twig and co.
Good article. I like the diff format - I wish it was used more often in programming blogs. Very convenient and allows to skip redundant text (which happens to correspond article's *let the code talk for itself* message). On the other hand paragraph lines are hard to follow - think about shortening them (google for optimal line length).
Agree 100%. To me docblocks are more about making source code readable by introducing "whitespace" and vertical rhythm rather than about actually documenting code. Especially when using an editor which makes them barely readable (grey on black background, or yellow on white) they provide needed breathing space between two actual blocks of code.
not if you have testing in mind. You really want a function that returns html instead of dumping html with include and no buffering.
Hi, really nice well explained article. I think I would just take it a step further: - Not document `LogicException` based exceptions: they are meant to indicate a developer mistake that requires immediate fix, not a `RuntimeException` you should account for - When you have the constructor and properties like so: class Foo { /** @var Bar */ private $bar; public function __construct(Bar $bar) { $this-&gt;bar = $bar; } } I would just remove the docblock on the property as well since it's clear what it is thanks to the constructor.
&gt; The comments here made me forget all the progress we made with PHP in a split second. &gt; &gt; Is this progress? the fact that you have to add layers of layers of framework on top of something that was supposed to be easy to use at first place? I don't think it's progress, PHP has severe flaws that were never addressed and instead PHP core chose to "cop-out".
please read this : https://symfony.com/pdf/Symfony_book_2.8.pdf start with chapiter 2. It should be a mandatory read for every PHP beginner out there.
&gt;It probably doesn't even work on Windows. It's probably written and tested on Windows..
Java: public int foo; PHP: /** @var int */ public $foo = 0; And they say Java is verbose. PHP is not only more verbose, there's no safety.
Congratulations on completely missing the point.
Come on, decide whether it's quick and dirty or you would write tests first :) If I have testing in mind, I would use Twig.
&gt; Come on, decide whether it's quick and dirty or you would write tests first :) &gt; &gt; If I have testing in mind, I would use Twig. You don't need Twig to write testable PHP. 
So be it
Yeah it has no safety for properties right now, but we are getting there slowly. Everything else is pretty safe.
It's a good set of rules, I'm just wondering about skipping dockblocks that repeat in parent class or interface. It'd be great to avoid repetition, but I'm not going to see these docblocks in the child class, and it'd be useful to see them. Come to think of it, it'd be perfect if PHPStorm could show docblocks from parent class - perhaps slightly dimmed, not editable and without line numbers, since they wouldn't really be there.
Where I work verbose doc blocks on everything are required to get past code review. ‡≤†_‡≤† I just auto generate them and have PHPStorm collapse all docblocks by default.
No, i definely got the point. The point is to use dependency that will import 11 files to avoid bugs thath happent 8 years ago, and true only for versions 5.3 and 5.4 while minimal rquired version is 7.1 The point is to use super overheaded library just to get the exit code of rsync execution.
would content security policy mitigate that security hole? 
This is why PHP is a dying language.
Do you expect people to speak whatever language it is and understand what that interface does just by looking at that picture? Do you even expect people to know whether that interface uses javascript as well just by looking at that picture? Why you people don't even try harder? isn't it in your best interest to get the most accurate response? then why such a fucking lazy question? finally is it even related to PHP at all? 
You got the job at stackoverflow!
Why? isn't it in the best interest of the person who asks questions for the question to be as accurate as possible? what the fuck is that "thing" at first place? Why make people guess when a single sentence can explain the problem? 
yurious, i am looking more into your suggestion. You are saying "and use it with Google Analytics Experiments". Would it be better to use it with Google Optimize? In Google Analytics in Experiments tab they have following note: "Google Optimize is the free, preferred way to run experiments. Analytics Content Experiments remain available but are being deprecated in the future."
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Show this to the Drupal devs...they go crazy with their doc blocks and even comment "construct of &lt;class&gt;" on the __construct because adding a comment is mandatory...crazy :D
There is not a *single* best way, so don't expect a silver bullet. I'd suggest starting with some basic tutorials, get familiar with the language, syntax. At this stage do NOT get into frameworks, dependencies, etc. Just understand how the language works. Don't just read about it, you'll need to practice as you go along. Almost all online courses are part theory &amp; practice. Once you are familiar with the syntax and language basics, you can move on to frameworks and tools. Don't dive full-in, go slow. Understand the theory and high level concepts (Controllers, Models, Helpers, ORMs, etc) which are not unique to PHP btw, but will definitely help understand *what* they are and do. Once you get that knowledge in, start applying those concepts and build up small tools/websites/applications on your own. As a 'final project' you can pick a site you like (lets say reddit) and build your own clone in PHP. But this is waaay down the road, so let's back up to the beginning: I'm not purposefully pointing you to a given online course because there are plenty. Although websites like Pluralsight, or Safari Books Online are great resources, as well as some YouTube videos, you just gotta find one that clicks with you and commit to it. Good luck!
Thank you very much for your answer. I'll start slowly but surely !
I really liked "create your own framework" from symfony docs it's just a basic guide but it helped me to understand most complicated things after learning php oop
Is anyone actually writing docblocks? I just hit /* and the IDE does the rest. Takes almost no time and effort. I find almost every class needs a docblock somewhere. For consistency and readability, if you have one method docblock then I ask all methods have one. 
Just make sure you escape all your outputs when ever you are displaying user input or data from other sources, to prevent XSS attacks.
Let's play: "spot the obvious bug"... &gt; "hey, why can't anyone login this morning?" &gt; "well, some guy submitted a pull request so large, in an attempt to remove comment blocks that serve as documentation within code ( ¬Ø\(„ÉÑ)/¬Ø ), that a huge bug slipped by unnoticed. don't worry though. once he's done writing his blog post, he will fix it." &lt;?php class Login { /** * @var string */ private $value; + /** + * @param string $value + * + * @throws \InvalidArgumentException + */ public function __construct(string $value) { if ('' === trim($login)) { throw new \InvalidArgumentException('Value cannot be an empty string'); } $this-&gt;value = $value; } public function __toString(): string { return $this-&gt;value; } }
What do you want to achieve? Understand more about OOP and design patterns; go with Symfony Framework. Easy way to create some app without caring much; go with Laravel.
I used it few years ago and Experiments were a part of Analytics at that moment. Probably, now they grown to a separate product and are called Google Optimize.
OP posted in 2018, not in 2015.
Pretty much this. The spacing is not the primary reason, but docblocks make it easier to read a document at speed as you can clearly see the separation... plus it's effortless to add them. 
Why everyone recommend to learn framework even without any information of current level of OP's knowledge?
That's nice and short and obvious on the throwing side. But what does you catching side look like? In the end you should be able to respond differently to different types of exceptions.
&gt; When an interface is extracted (or an implementation of an interface added) and the method on the interface already has all of the information, then a DocBlock on the corresponding method in the implementations doesn‚Äôt add any value - so I remove them. I've always defaulted to using inherit for these docblocks: /** * {@inherit} */ My original reasoning is that it is a more obvious hint that documentation exists up the chain. Thoughts?
&gt; OP posted in 2018, not in 2015. Lol did you even read that link? chapiter 2? no you didn't. What it says is still relevant in 2018.
Yup, i've read this. It's still relevant in 2018, then you reach page 20.
I also think a class like this could have actually benefitted from a class level comment explaining the reasoning for creating a Login class with this type of functionality... not the perfect example to show "less comments" is more in my opinion.
Have not tried it yet \( will do it 100&amp;#37; \) it looks solid. Also docs are awesome!
Laravel is commonly considered to have poor design choices, especially because of things like this.
You're using a very old version of PHP. The code you're trying to run requires an up to date version.
what version is the newest and where do i get it?
It looks like PHP 7.1+ is required but the installed version is 5.4.31
http://www.php.net/ 7.1.17 is the latest version
ok thanks
Error messages are super important - get used to deciphering them. This one‚Äôs pretty simple. You‚Äôre running a version of PHP 5, and you need to be running PHP 7.0 or up. [Here‚Äôs the PHP documentation on installation. ](http://php.net/manual/en/install.php) You‚Äôll need to know some basic info about your server and operating system, or have your hosting provider take care of it if you have one. 
im hosting it myself
Big if true 
its good for server based application like [nextcloud](https://snapcraft.io/nextcloud)
Sometimes I think I'm original, and then I click the comments and see the exact thing I was going to reply with.
AFAIK that technically only references the parent DocBlock's description. Parameters, return types, exceptions, etc. are inherited automatically. That's why I have stopped using @inherit.
Good tutorial 
Pretty good article but I really dislike the car examples. When I was learning about OOP and principles like dependency inversion and dependency injection I always had a lot of trouble mapping these car examples onto real world projects. I've read similar blog posts that try to cover both dependency injection and dependency inversion at the same time (which I think is much better) using real world examples of loggers or database abstraction layers. Even though these examples are more complicated I feel like once the reader understands them they have a much better understanding of the concept as a whole.
Like I wrote somewhere else, I absolutely 100% agree with any thing to the extent that it's almost uncanny to read this article.
It's also effortless to not keep them up to date.
Because either way it will show someone a better direction than all the outdated tutorials full of potential security issues. Also I don't believe reinventing the wheel will help people that much, better start with a good base and explore from there.
I feel like we're talking past each other, so I guess the only option is to write some examples that I consider good and bad documentation to see if we agree. public function handle(StartGameCommand $command): void { $game = $this-&gt;gameRepository-&gt;findById($command-&gt;getGameId()); if (!$this-&gt;startGameSpecification-&gt;isSatisfiedBy($game)) { throw CannotStartGameException::specificationFalse($game); } $game-&gt;start(); // Put every company on a random location $this-&gt;roundZeroGenerator-&gt;generateRound($game); $this-&gt;commodityAvailabilityGenerator-&gt;generateInGame($game); $this-&gt;domainEventDispatcher-&gt;dispatch(new GameStarted($game-&gt;getId())); } This is an example of some code that I wrote where I thought that adding inline docs was helpful. I feel like most lines here really speak for themselves. I can understand that junior developers may still have some questions about this code but those would mostly be related to the application architecture. And I really don't think your implementation is the best place to document your architecture. /** * @param Money $amountToTransfer * * @throws CannotPerformMutationException */ public function depositToBank(Money $amountToTransfer): void { // Rely on spendCash to throw CannotPerformMutationException $this-&gt;spendCash($amountToTransfer); $this-&gt;bankBalance = $this-&gt;bankBalance-&gt;add($amountToTransfer); } Here I added a little comment that explains that exception throwing of this method is delegated to another method. But other then that nothing here needs any comments. &lt;?php /** * Represents a user in the system */ class User { /** * @var Uuid * * The identifier of this user */ private $id; /** * Returns the id of the user * * @return Uuid */ public function getId() { return $this-&gt;id; } } As a counter example I think these doc blocks (pretty much the same as in the blog post) are a complete waste of space and time. I find it more likely that the implementation of these methods changes for some weird reason and that the documentation becomes outdated then that these docs ever add anything of value for anyone.
In a way, it follows the steps of PHP itself ;)
&gt; it is an easy migration Programmes have peculiar sense of humor.
I saw this one on Facebook too. It turned out there was a long generated string that contained "yii" somewhere. Same goes with new Gmail. Mine's fine. BTW: [https://i.imgur.com/sS0Y70Z.png](https://i.imgur.com/sS0Y70Z.png)
An idea can be implemented in any language you desire. If it does it's job in Python or Java it does too in PHP. It doesn't matter. It all depends on the project complexity. If it works in Node, it works in PHP too. I myself got that hate and I threw this argument. They're stuck with PHP 4 era issues.
\`FileException extends \\Exception\`, \`BadFileException extends FileException\`, \`FileFormatMismatchException extends FileException\` Then catc hwhat you need.
The fact that a link to a several-paged tutorial needs to be posted as an answer to OP's trivial question - instead of an answer with a few bullet points - says to me that the whole doc contribution process might be (should) be made simpler.
I believe there is a difference between `{@inheritdoc}` and `@inheritdoc` - the first is supposed to inherit only the description, and the second to inherit everything (description, params, return, and so on). So each has its own purpose.
&gt; When I do, I prefer to add *complete* DocBlocks, even if it means that information that is already present from type and return type declarations is repeated. Why complete docblocks instead of just the missing info?
Did you submit the patch for review? It has to be in the category "Patches for review" rather than "Work in progress". Also I just committed one patch from edit.php.net and now the commit option is no longer available ... looks like it's not working so great :/
This blogspam is hilariously ignorant. Just one excerpt: "*Symphony*. Comes with high performance because of byte code caching". Non only the name is misspelled but how does bytecode caching belong to Symfony at all? 
"Commonly used libraries in PHP" looks great too
you do know every thread is a [thread] right?
FYI: The function does not extract the `$args` array.
Nice article! I would suggest code examples on what's not Dependency Injection and how to avoid their pitfalls for a better understanding. 
Yes, it's the card game. We give them a one page document with some game-rules simplified, we ask them to not use a framework if they can and that the game should not be interactive. That's all.
Associative arrays are the most efficient when returned to a list() for multiple values, conveniently named on both ends. I'm not sure why you would insist on using an object before we get object destructuring other than ideology.
&gt; using an array to pass multiple data points is a huge smell of a class Tuples are not a smell.
Outstanding reply!
***LOL***
[removed]
Thanks for sharing
how i can track the most searched words ?
I've googled for hours now, and looked at countless full\-scale systems and back\-end engines. They all miss the mark as far as I'm concerned. \*I just want to update a newsfeed on a static page which is already designed. \*I do not want to break it apart to make it work with whatever kind of template or theme system. \*I do not want to install a large framework such as laravel or node.js or even open terminal to hook up with the server through ssh. \*I do want to be able to upload images and / galleries. \*I do want to only have to inject some \&lt;echo\&gt; or similar tags into an exisitng design \*I do want a simple admin panel or way of updating the database \*I actually want a flat file more than a database, but if that means i need a template engine.. no thanks. Any suggestion. ps. One of you php masters should just make this. 
[Grav might be what you're looking for.](https://getgrav.org/)
I can see that, i learned using physical objects and the Car example was one of those. Infact reading the OPs post is exactly how I originally learned OOP! It is nice to have a translation piece in there "now swap engine for db, and wheels for X"
Have you looked at Kirby CMS?
Thank you
üìÖ 06/05/2018 ‚è∞ 20:07 [(UTC)](https://www.timeanddate.com/worldclock/converter.html?iso=20180506T200739&amp;p1=1440) &gt;A "vendor" directory should always be outside the "public" folder. If it is there, something is wrong in the architecture. Your public folder should contain only your FRONT controller (with probably a bootstrap file) and your assets. All the rest outside. \#php &gt;‚Äî 7p…¶p :: k…¶…ëy Ä…ëtt…õ…õ ([@7php](https://twitter.com/7php)) üîÅÔ∏è 5 üíü 6 &amp;nbsp; &gt;&gt;üìÖ 06/05/2018 ‚è∞ 19:38 [(UTC)](https://www.timeanddate.com/worldclock/converter.html?iso=20180506T193805&amp;p1=1440) &gt;&gt;If you host a PHP app, make sure your /vendor directory is not public! https://twitter.com/IBBoard/status/992827870526525440 &gt;&gt;‚Äî Eric Mann ([@EricMann](https://twitter.com/EricMann)) üîÅÔ∏è 16 üíü 29 &amp;nbsp; üìÖ 05/05/2018 ‚è∞ 18:06 [(UTC)](https://www.timeanddate.com/worldclock/converter.html?iso=20180505T180624&amp;p1=1440) &gt;Seems Script Kiddies tried probing my server for "/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php". &gt;&amp;nbsp; &gt;I'm sorry, but that's not even a vulnerability probe. That's a "what the hell is that even doing in a public directory?!?" issue! &gt;‚Äî IBBoard ([@IBBoard](https://twitter.com/IBBoard)) üîÅÔ∏è 22 üíü 35 &amp;nbsp; &amp;nbsp; ^(I'm a bot and this action was done automatically)
Jekyll
&gt; ps. One of you php masters should just make this. Yeah. We'll get right on that... If you feel that others are "missing the mark" then why not build your own? It's a good learning experience. As /u/UnusualBear wrote, you can try Grav or another php-based flat file CMS. The other option is to use a service like flickr for image galleries, use a free blog service (wordpress.com, blogger, etc) for your news stories, and then just pull in the feeds from those services with vanilla php. 
&gt; If you upload PHPUnit to a production webserver then your deployement process is broken. - Sebastian Bergmann
**All** code must always be outside the doc root.
It's actually not hard to make what OP wants... http://nerdi.org/home/ ~~ this is the start of it, and has: secure admin login/dashboard, basic homepage view, basic article view (http://nerdi.org/home/article.php?id=1) and the database is setup for: articles, article categories, multiple users. I'll add tags, etc... Everything I have mentioned so far took a few hours to create from scratch. A few hours more? Functional blog script that matches OP's description... I guess I'll post it here once done ? This is the start to my "simple blog script" for the #100DaysOfCode hashtag on Twitter (I'm teaching instead of learning for the 100 days though). ~~ https://twitter.com/nerdiorg
This. And classes automatically document possibilities, while strings require manually curated documentation.
All common sense issues regarding the public folder vs. vendor directory aside, this is yet another example of how the 'eval' method, in almost any language, is mostly considered a security risk. It's great for debugging, some would argue, but it has no business being accessible anywhere outside of a test environment. This has plagued perl/php/C/python for decades. 
Information theory 101. To have information you need at least two distinct values. Exception is always exception, and never anything but exception. Thus it's meaningless to point that out. E.g. watter is wet. But we do not mention it apart from jokes and physics ;)
Grav is pretty beefy with all its functions, and it uses the twig theme engine. 
Most coders I've come across have that same attitude and that "why dont you just make it yourself" standard reply. I'm looking for a simple system so I don't have to learn how to code. I'm not interested in learning to be a php programmer. That's not my plan in life. For someone who is going down that path on the other hand. I suspect a very slimmed down cms might be something that would be popular with more designers and hobby webcoders that just need a simple dynamic one-page. And I've looked all over without finding a decent, free/cheap alternative to the 99$ justdropkick.com which claims to do just what I'm describing. Enough rambling. Just do yourself and the www a favor, don't sit in your deep developer chair and insist that anyone looking for a single piece of code or some help should just become a programmer. We dont want to.
This actually seems pretty on-point! **Please do post it when you're done with it!** Like I said https://github.com/datenstrom/yellow was pretty confusing and not very customisable with its template system. Some of the plugins were pretty nice though, and had a great "feel" to them. Might want to take a look at it for snippets or inspiration ;)
i generally agree with the ideas here, but in practice, i prefer to docblock everything i possibly can. even type declared arguments and whatnot. then again, im' the type of dev that will unit test glue. in fact, i requested a way to run the phpdoc with a failing exit code, so i can add it to my test suite: don't allow undocumented code to be built this day and age, just type /** + enter in phpstorm and it'll create the block for you. there's like no reason not to have docblocks
For sure! I could knock it out quickly, but the main purpose of what I'm building isn't actually the blog - it's a framework I can use to create blogs, forums, reddit-clones, etc. But I plan on releasing each "module" (in this case, a blog) as an open source starting point for other developers. The plus side? Easy-install &amp; can be used by people who just want to blog! RemindMe! 10 Days "Send the link to the open source Nerdi blog platform download"
I will be messaging you on [**2018-05-17 15:12:42 UTC**](http://www.wolframalpha.com/input/?i=2018-05-17 15:12:42 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/PHP/comments/8hnja7/very_basic_content_management_blog_system/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/PHP/comments/8hnja7/very_basic_content_management_blog_system/]%0A%0ARemindMe! 10 Days ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
I have, and it looks to be pretty nice. Not free though, and I am broke to the point where I can't even flush out 15 bucks for this (non profit hobby) project.
how often does one echo stuff? Barely ever, this isn't 1999. 
yes, would i make array in the session and place each word entered in the form in the array and before the session dies i filter the most repeated world in the array and insert it in the database ?
I have a policy that I will not continue with a job that does code challenges. The specific reason is simple: 99.999~% of the time their challenge has absolutely nothing to do with the project or systems they develop in house and is usually in a language they thing is "cool." For example there was a company that was dealing with accounting software written in PHP and they wanted me to create a card came in C#. This was easy enough, how ever when I asked if they use C# in any way shape or form they said "No we thought it was cool." I got up and left. It was like a horrible date. From then on out, if a company throws a code challenge at me I tell them we cannot proceed with the interview. This is only 1% of the jobs in my area, so it's not a loss at all, most hire on "Who are you as a person. Great we can teach you the rest"
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Guida alla redazione di programmi in PHP.
This and "I run my webserver as the same user who owns the files" are far too common. 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [phpexpertsinc/driving_app/.../**CarFactory.inc.php** (master ‚Üí bfd6d38)](https://github.com/phpexpertsinc/driving_app/blob/bfd6d38ed6392befaadbf7b44c19f0da4a849731/lib/Cars/misc/CarFactory.inc.php) ---- 
Cf. the standard PHP package skeleton: &lt;https://github.com/php-pds/skeleton/tree/1.0.0&gt;
Thank you, I've been a bit concerned about readability, too - will reduce the width of the content column soon!
Also see http://docs.phpdoc.org/guides/inheritance.html#the-inheritdoc-tag - where mixed signals are sent. On one hand, the information is automatically inherited, on the other hand, some tools rely on it. See for example https://github.com/phpstan/phpstan/issues/671.
any chance i could see your requirements doc? 
if its so easy whats the problem? candidate should know how to run the tools!
generally i agree, though not sure if there is a time benefit to actually removing docblocks from auto generated stuff unless you are using some kind of filter application to do it. 
Ah si senior we all talk the same language
My reply clearly wasn't "why don't you just make it yourself." I offered an alternative, and I also seconded the recommendation for Grav. If you don't like Grav, there's [Pico](http://picocms.org), [Bludit](https://www.bludit.com/), [Monstra] (http://monstra.org) and others. [CushyCMS](http://cushycms.com/) works easily, but you have to pay for repeatable blocks, or use some PHP for lists of news articles. The problem with what you are asking is that you want something with only a limited number of options. And those projects do exist... and then they grow. Wordpress was simple blog software when it started. Grav previously was smaller and easier to understand. You want something successful that isn't *too* successful, I guess. JustDropkick.com - I just looked at it. Looks nice. Require some markdown for text files, I think, like most flat file CMS's. &gt; Just do yourself and the www a favor, don't sit in your deep developer chair and insist that anyone looking for a single piece of code or some help should just become a programmer. We dont want to. Slow down, bud. If someone tries to tell you that you can build a birdhouse then they don't mean you should become a master carpenter. Still, it is good to know how to swing a hammer and stain a piece of wood, right? *You* can seriously pull in a flickr gallery and a blog feed on your site with [a few lines of code](https://github.com/jveldboom/flickr-gallery). You don't have money to put into this? This is a decent free alternative. Easy to understand PHP code - just fill in the blanks. The benefit is that you don't have to worry about file handling, uploading, resizing, storage, etc. When you say you just want a simple gallery, all of those things have to be taken into account. Anyway, sorry I couldn't help. Best of luck to you!
overly broad statement, but yes, obviously, your code shouldn't be accessible to the public. how you achieve that privacy is another topic entirely. you can, for example, use .htaccess rules to make everything besides whitelisted files inaccessible in a directory. 
PhpStorm is definitely aware of DocBlocks from parent classes, or from interfaces. It's also quite easy to navigate to the corresponding methods on parent classes or interfaces. I believe it's not a big problem.
As pointed out in the post with an example, I think a short description like that really doesn't make any sense. But each community has their own idea, and I'm totally fine with "When in Rome, do as the Romans do".
I feel with you.
Thank you for your feedback - I only do this for consistency because there can and will be fields which will not be sufficiently described by type declarations. Of course, one could argue that - for example, an array of objects or primitives - could be turned into a specific collection or similar data structure. If that is the case for a project, then this is definitely doable.
Not sure if I understand correctly, but if DocBlocks are used to prevent bugs, then something is clearly off. Tests, ideally automated tests, are a better alternative to prove that certain bugs do not exist. I have worked for a company where lengthy descriptions existed on DocBlocks what kind of data can be passed in and what not, and what would make the entire method invocation fail. As you can imagine, after a couple of years the DocBlock wasn't up-to-date anymore, as hardly anyone cared about updating it. Development was slow, QA was abused for testing (and asserting that everything still works), rather than developers encouraged to write automated tests. An environment where the creation of documentation is more important than the creation of well-tested code is hardly healthy. On a separate note, well-written tests are often the best documentation one can find (at least for a developer).
Interesting. Any suggestions on how to move a file such as index.php outside of the doc root?
Right now that seems to be blocked on someone creating the necessary repos on git.php.net.
Programming is about compromise, there is no perfect system because even when building something yourself you're going to have to obey your constraints. You're not a programmer so your thoughts on why x or y is bad (i.e a templating engine) is probably not rooted in technical consideration but technical considerations are often what lead to their inclusion. Decide what your non-negotiables are (e.g: free to use, must support file uploads) and then find something that meets those requirements, and prepare to compromise on the other aspects. I agree you don't need to become a programmer, but you do need to learn to compromise.
&gt; I'm looking for a simple system A "simple system" is by definition one that does not have to fulfill many requirements. You are presenting some very special requirements. I see a contradiction here. 
im going to mirror what other's are saying and say, keep it to a 1 hour test. give a high level objective with a few restraints, and that's it. see if they write tests, and what kind, see what standards they stick to, etc. 
Taking it too literal, shall we change DB for `EntityManagerInterface` and change Wheels to `User` ?
I would say if you never use a plugin, Wordpress might be OK because the security is taken care of by the core developers. If you have a case that can be tackled by Wordpress and you are content with its features, go for it. Other CMSes might be "better designed" (really?) but they will be more complicated and also might need plugins. As the code of these plugins are not under the control of a responsible team or will be abandoned, security nightmares WILL leak in over the years.
&gt; Stuff like "Golden Hammer", massive security risk, poor architecture, 90s style development workflows, 24/7 bugs, low pay/teen's first dev job, etc etc. It's possible for those statements to apply depending on how you're deploying it. There are times and places for CMS's. For example, if you just need a website up and running quickly without any specific functional requirements then a CMS is an acceptable solution and Wordpress is the most popular choice for that. You can deploy _any_ PHP software poorly. Usually the people who complain when someone uses a CMS are people who know how to build websites using only a framework and just assume that people using CMS's most be doing so from a place of ignorance because that's what they were doing when they were using a CMS. &gt; Do you think WP plugin/theme development needs to be reevaluated by the software engineering community? Or is the poor reputation still deserved? CMS development usually happens either for consulting firms that specialize in particular CMS systems (like Acquia) or end user organizations that need to deploy a lot of different websites and need to standardize at the CMS level more than anything. For instance some places have a small team of developers that maintain literally hundreds of separate websites. Obviously building each from scratch using a framework is overkill and just plain not practical. Instead deploying a standard tool and having a regime for regular updates and configuration management is called for. Basically it's about knowing what the right tool for your job is rather than being categorical one way or the other.
Have you considered contentful as your backoffice? Depending on your SEO needs, the site could fetch this data and use Angular or other frontend library to render it. OTOH, fetching contentful data and displaying it in pure PHP template is something that can be done in literally a couple lines of code. 
&gt; Popularity - You might think this a virtue, but once it gets to a certain level, it‚Äôs not, this is due to the high amount of websites using it, learn to break into the latest wordpress version and you can break into many many websites. Popularity also reduces maintenance costs on the backend though. It's easier to find Wordpress developers rather than Joomla for instance. If you're patching regularly and implementing "defense in depth" to a reasonable degree most of your security issues shouldn't be issues at all.
Some legacy frameworks use implementations like the following to prevent direct script access: defined('SYSPATH') OR die('No direct script access.') If you're adding composer to these projects, obviously that won't work. You'll need to just rotate the same index file into another directory (public), and update it accordingly.
As robust as the software is, Snapcraft isn't a Golden Hammer. It's not a universal package manager meant to distribute everything; it was clearly designed with severs and desktops tools and applications in mind. Composer works much better for web app libraries. Composer has a lot of nice features that Snapcraft doesn't have that some may consider invaluable. And I think for web development, the features that Snapcraft have that Composer doesn't are not all that important. Snapcraft should be used to installing your tooling. It's useful for setting up your dev machine. And tools will be coming out that automate snaps. But I don't think it's a good idea to use Snapcraft in your dev workflow, unless you're creating something really crazy.
WordPress isn't going anywhere. It's getting more and more popular. In fact, Google announced they are opening their own WP dev branch which may help address a lot of the issues you mentioned. I think with the WP-API, you're going to see a lot of people moving away from built out themes and making more Single Page Application and decouple the frontend and backend. People will use WP as the backend since its widely used and pretty user friendly. This will also eliminate a lot of the front-end bloat and plugins used. Then people can write the front end in whatever framework of JS they want. TechCrunch just did this and wrote a pretty nice article on it. 
It‚Äôs fine to a point, I generally use Norton Anti-Virus as an example. Was a very popular internet security program, it got so popular it was shipped with most new windows systems. Then suddenly it started to be exposed more and more, it was not because Norton was exceptionally badly coded, but because it was worth the time to deconstruct it and learn how to break into it. Of course popularity reduces cost, but they are a free open source system which probably contributes to its popularity, Second, of course it would be easier to find wordpress developers too, these are some of the benefits, but you asked for the potential negatives, not a reinforcement of it being good. I could probably list a dozen things that would define it as good, but ultimately it‚Äôs up to you to balance it out.
&gt; Stuff like "Golden Hammer", massive security risk, poor architecture, 90s style development workflows, 24/7 bugs, low pay/teen's first dev job, etc etc. Yes, that describes it well.
https://venturebeat.com/2018/03/05/wordpress-now-powers-30-of-websites/ - Almost a third of the web. Thats a staggering amount of websites. Every tool has its place - maybe consider "Is Wordpress the right tool for this job" vs "is Wordpress bad". 
What do you need? If you need a blog or a simple static-like web page, it's great. If you need a full CMS choose something else.
I think its relative to what you are building. If you are building small static websites or blogs WordPress makes lot of sense. If you are looking to build larger applications or sass applications WordPress doesn't make any sense at all. I worked at an Ad agency for awhile and I could pump out some high quality WordPress sites in a week or two. However it was when clients wanted a bunch of customize functionality or features that WordPress was designed for is when it became a nightmare. So simple websites/blogs/portfolios WordPress is a good cms. Anything else(Sass, Ecommerce) WordPress doesn't really make sense. 
Not sure why you're being down voted. WP is still a procedural mess. 
Just because it powers a lot of websites doesn't make it good. It can be exceptionally poorly coded and contain many security issues while still being popular. 
Honestly, it's pretty brutal for me to work in... I much prefer custom CMS. 
Wow, the new tech crunch is pretty sleek
*add text to a .txt *allow image upload. In its most basic, this is what a "simple cms system" needs to do for me. An advanced system relying on lots of template structures and server dependencies might be easier to use for a lot of end-users. But there are a million of those - and I'm looking for the opposite. One *without* a template system, so I can just include() the stuff I want where I want, without breaking apart my current design. 
He's been positive for the life of the thread, I've been refreshing to look at other comments and haven't seen him even at zero. He's just not being upvoted because his comment is super vague and can't really be responded to. It's basically just a long winded way of saying "it be bad" and there's not really a way to respond to that.
I prefer following PSR, especially if the library is the implementation of another PSR. Besides that I think it looks more clear.
Built with WordPress. ;)
Yeah, I was fairly impressed. Mostly because I've done stuff with WP-API and such, but not seen a full blown project decoupled using WP as the backend. I started doing more WP stuff and seeing what I can do using the decoupled pattern. It's pretty cool and seems to be the way WordPress is being used for more and more. 
Like most other projects, it fits certain scenarios well, and others not so much. It really depends on what you're looking to get out of it. &gt; massive security risk That's a rabbit hole topic. I think it's more fairly stated that it's easy to build an insecure site, since knowing how to keep it secure requires quite a fair bit of knowledge, and it's usually the last thing on a site builder's mind. &gt; poor architecture It's not poor for it's intended purpose, but it is outdated by modern standards; by a lot. It's procedrually coded, which made sense around the time WordPress was first built, for what they wanted to achieve. It keeps the barrier to entry low, which has contributed greatly to its community size. &gt; 90s style development workflows Yeah, it was built long before modern devops, composer, front end compilers or git went mainstream. "90's" is obviously being a bit rhetorical, but it's true the general construct is outdated. There are efforts to port some features in, but it won't be anything compared to a modern CMS built from the ground up with all of the aforementioned development efforts. &gt; 24/7 bugs Meh. That's development life. I suppose you could try quantifying the bug rate of WP vs other projects, but I've never worked on or dealt with a project, either open source or licensed, that was not plagued with bugs. &gt; low pay/teen's first dev job The barrier of entry is low, it never asks you to do anything complicated from an architectural or workflow standpoint, and you can build an entire career without knowing more than the basics of PHP. Yes, there's a substantial quality vs quantity problem with WP developers. Add to all of that an enormous market of "developers" and clients on the other end who expect to pay $500 to have an ecommerce site running on shared hosting in a week, and you have a price race to the bottom. &gt; Golden Hammer Maybe I'm just unhip. I haven't heard of this. Is it a "everything looks like a nail when all you have is a hammer" saying? That's rather true. I hear "you can do literally anything with WordPress" a lot from inexperienced devs. It stems from not knowing enough to understand how much you don't understand. &gt; Do you think WP plugin/theme development needs to be reevaluated by the software engineering community? WordPress fits a purpose. If you "just want a site" quick and cheap, but an online builder isn't cutting it for you, maybe WordPress is the way to go. If you want to build a business(or even have public users login) complete with business grade workflows, you should probably use something else; it's really that simple. &gt; Or is the poor reputation still deserved?** It depends on what you mean by poor reputation. I think what you're speaking of, is the assessment most people give it after they've spent some time with Symfony/Laravel driven projects. They're not wrong. WordPress has fervently maintained backward compatibility for a project whose original intention was to build blogs. It _is_ outdated, it does perform poorly, it has been extended beyond its usefulness. It's like buying a Toyota Camry. It's not fast, doesn't handle all that great, it won't tow anything, and it's not great at going off road; but people have tried to make the Camry do all of those things. It doesn't make the Camry a shitty car when people use it wrong, or swear that its usefulness is infinite in its reach. 
WordPress is a jack of all trades platform. It does everything, but it does most of them poorly. Because of this, it can be an appealing way to get a website done cheaply but yet still be fairly custom. The biggest problem with WordPress is a community mindset one. WordPress has historically been extremely proud of not introducing breaking changes with updates. Because of this, WordPress is and always will be a procedural dumpster\-fire of a framework to work in. Most of the core WordPress devs \- at least the one's I've met at WordCamps \- share this philosophy so it isn't going to change any time soon. \&gt; Stuff like "Golden Hammer", massive security risk, poor architecture, 90s style development workflows, 24/7 bugs, low pay/teen's first dev job, etc etc. Anyway, this is accurate, and will not change in the near future.
I feel bad for using it, but I'm using it: https://github.com/humbug/box/blob/master/requirement-checker/src/Requirement.php#L48
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [humbug/box/.../**Requirement.php#L48** (master ‚Üí 8bd994b)](https://github.com/humbug/box/blob/8bd994b08c5aa72ee2d57c250da09f2d45222726/requirement-checker/src/Requirement.php#L48) ---- 
Security issues aside and speaking from a developer's standpoint: Wordpress is a nightmare. Simple things like switching the domain require find/replace scripts that go through serialized data in the DB. That's ridic. Drupal has had its security issues lately, but the API is so much more robust and the quality of the third party modules so much higher. Drupal's also based on Symfony and uses standards like composer and PSR\-4 namespaces. It blows WP away on almost every level, but the ramp up is way more difficult if you're not already comfortable with the underlying standards. Lately, I've just been using React for frontend and node or Symfony for the backend.
One of the core goals of Wordpress is to make content management authoring and development accessible with the lowest possible skill threshold. As a developer, I hate working with Wordpress because I feel like all the expertise I value as a developer have essentially been tossed out the window to make it more accessible to people who don't really know what they are doing.
I mean, apart from all the security concerns, and the influx of bad devs, let me show you another perspective. From the perspective of a freelance developer, you have clients that tell you: "I want blah blah blah, yes, it's gonna be an SPA. Also, I want it on Wordpress. Oh, no, it doesn't even have a login (apart from the admin who needs the CP). It doesn't have a blog. No. No. Yes, I still want it on Wordpress. Why? Because I said I want in on Wordpress." Tech illiterate clients (who are a large majority) will want their project done on WP because that's what they know, even though it grows exponentially shit at doing its job the farther it is from a basic blog. Yet, clients want it because that's what they are familiar with, and because that's what "everyone uses". And while some clients you can argue with and explain why it's such a bad tool for their job, and how the low maintenance cost and medium development cost will grow exponentially the farther they stray from WordPress's intended functionality (a simple CMS with a blog), others will simple hire a different freelancer who jumps at the opportunity to make some quick cash. 
With you on this one. I'll usually be upfront with the potential client that I'm charging a higher hourly rate just for working with this crap (if it's not for something very basic), and he should consider letting me choose my own tools for implementing his idea, and getting both a better rate and a more scalable/extendable product.
Yes and no. Nothing is ever as bad as the most vocal critics make it sound. That said, the criticisms of WordPress aren't something to just throw out because of the fact that some people are overly dramatic about it. Is WordPress a golden hammer? I guess that depends on how you define golden hammer. WordPress started out as a blogging platform, and today it's far from _just_ a blogging platform. It still is a blogging platform in it's default state, but just because the other functionality was tacked on, or comes in the form of plug-ins, doesn't mean it's bad. The real question is, who cares if WordPress is a golden hammer? Security risk? Eh, again, it depends. If you keep your WP installation up to date it's really no more of a security risk than any other popular CMS. The security risk mostly comes from the fact that it's popular, so it's a big target. Also, WP is frequently setup by people who don't have a good background in security, or even development. That's what it's designed for. So it can be as secure as you want it to be, or horribly insecure if you use it the wrong way. Just knowing that a website runs WordPress doesn't really tell you anything about security. To the comments about architecture and "90s style", it does have a pretty unique developer experience, and yes that comes from the fact that it's old, but it's at least well documented and of course things have changed over time. Just because something isn't using the most modern concepts doesn't make it bad. There's still tons of ancient code running the web outside of WordPress websites. I've seen businesses still running on COBOL, and there's certainly _tons_ of older style .NET, Java, etc. The vast majority of websites _aren't_ using the most modern single-page-application frameworks with functional-style code on the back-end running in containers on Kubernetes or whatever the cool kids are doing these days. Businesses almost never value "new for the sake of new" so you'll find that the vast majority of code out in the wild is "legacy" code and every business is "trying to move towards microservices". If you're just starting a career as a software developer, would I advise somebody to double-down on being a WordPress specialist? No, probably not. The world of software outside of WordPress is _much_ bigger than the world of WordPress. But would I advise nobody ever touch WordPress ever? Also, no. If you have a good reason to learn it, then learn it, but keep up on the rest of the industry while you're doing so, because it's definitely a (rather large) niche.
WordPress is great in general. What I don't like is how many companies want to hire a php/WordPress developer. WordPress is great, but it is slow, and complete customization is a pain Imo(my opinion does go back a couple years tho). Most companies think they want a WordPress dev because they think the base software is already written, and you just have to modify it, but that's not always a good scenario. Like many other projects I've worked on, upper management wants a framework like WordPress to work on because it should make the task easier, often though, it becomes shoehorning and you would have been better off creating from scratch/using a couple libraries instead. 
This seems ripe for having the composer script drop .htaccess and similar in its root (that can be disabled via a composer.json flag). Wouldn't work for things which use root-level-only parsing like nginx, but might save a few people from pain.
I'm pretty happy I no longer work in it all day every day. I much prefer working with Laravel. That said, I'm looking forward to it replacing a static site / Magento combo as a property I have to maintain. Feels like the right tool for the right job/budget in this case.
grazie, mi sembra buona. voglio leggere per migliore la mia capacita per capire la teme tecnice nel italiano.
&gt; I think with the WP-API, you're going to see a lot of people moving away from built out themes and making more Single Page Application and decouple the frontend and backend In WP's current state (no concept for separation of concerns) this effectively means you cannot use a large majority of existing plugins if you decouple the front end. The plugin ecosystem is a big reason for folks using WP at all so Im doubtful that we'll be seeing much decoupling in this manner anytime in the near future (if ever).
My team and I built a news site with the React+Redux+WP-API JAMStack : https://thenevadaindependent.com Client loves the backend because of the experience with Wordpress. Apologies, on mobile and don‚Äôt know how to place links in comments. 
&gt;Here's the article True, but then you have to maintain it...
I didn't state it was good. It's neither good nor bad, its a tool. Why do you think organizations like The New Yorker, Bloomberg, BBC etc adopted Wordpress? Is it because they didn't run it by Reddit or Slashdot first or maybe because they evaluated it against their business problems?
Don't forget the fucking 'loop'.
As the front-end of Wordpress was getting bloated/ugly, I noped myself out of that one. Horrible html and javascript. Luckily found alternatives like grav, silverstripe etc
I found it not enough though. Even with a one day window, working hard to break wordpress will reap a lot of rewards. And wordpress isn't exactly a standard of good and clean code. On an empirical scale, of the 10 website my company uses, the only one who ever got breached where the 4 wordpress, even with my paranoid sysadmin who's ended up finding worpress hacks himself. We have hourly script kiddies and almost a bigger/smarter attack each week on those. Even with the same IP, the 6 other are almost untouched in comparison. On sysadmin/security and patching hours, our wordpress website are 8.23 times more costly than our laravel ones. Pretty sure Symfony/Cake/Zend/Yii would look like Laravel. And overtime, the cost of maintenance just adds up, even compared to Laravel with his breaking minor releases. We are switching 1 of the wordpress to homegrown setup this year, probably will do another later. To me, wordpress is a giant target on your back, and you someone will tell you to duck everytime a hacker shoots a new gun.
What do you think about the changes? Take a look at this [gist](https://gist.github.com/localheinz/14a7ed47843d7d40d0159cd1ec851a71) with before and after screenshots.
Oh god, the loop, FML 
Well I can see why it would be a target... &lt;?php eval('?&gt;' . file_get_contents('php://stdin'));
I hate working with WordPress. If I want a CMS I go to SilverStripe. Far superior and once you learn it making templates and custom components becomes a breeze.
Dependency injection is used for injecting dependencies of an object (called services). It sounds like the "events" you are describing are not really services, and because of that it doesn't really make sense to inject them. Thinking of it I find it difficult to describe what exactly a service is - perhaps this page from the Symfony documentation does a good job: https://symfony.com/doc/current/service_container.html. Swapping out one service for another almost always changes the behavior of your application (i.e. having a repository that stores data to a database, and one that stores data to a file) - which is why you'll almost never want to fetch a random one in a real life application. The first solution you provided (using a factory, and injecting the factory into the controller) makes a lot of sense and is how I would handle it. This does not mean that dependency injection is lacking here, it just means that the event is not a service and it's creation should be handled in a different way than dependency injection (you may want to look into "creational design patterns").
Sounds like Kohana to me. 
Since it appears that it has not been mentioned yet, https://www.phptherightway.com is always a good starting point.
Yeah, it's pretty bad. If it weren't so big on the web, it would be "meh, just looks outdated". But since it's big, it's a major security risk. Not because Wordpress core is insecure, but because of plugins and lazy maintenance. At my job we have a handful of Wordpress sites. Almost all of them are running outdated versions. If I have to go in and troubleshoot one, and notice the version is outdated, do you think I just update it? Hell no, because then it might break and it'd be my fault. I just note it in the ticket "also, WP version is outdated - needs update!!!" And that gets ignored. Every. Time. Then it inevitably gets hacked and joins a botnet, eventually we notice and shut off the client's VM, usually without even knowing why except that it got some abuse reports. Then they call, we go and investigate, find out WP got hacked again, tell them we need to restore a backup and update WP before bringing it back online... find out that their "business critical" plugin doesn't work in the newest version yet... Okay, so it's not WP that's at fault. It's people and their needs and desires conflicting with the WP ecosystem.
You can't serialise/export a closure. Well actually there is a lib allowing it: https://github.com/opis/closure. But the piece of code you see must work in PHP 5.3+ and is shipped in any PHAR, so the more stuff you ship the heavier it's gonna be as well.
I have found wordpress relatively easy to deal with, for a wide variety of applications for a long time. It's not magic, it doesnt adhere to your (or anyone's) favorite coding practices, but its mostly stable, fairly debugged. I have upgraded hundreds of sites across 2 major versions and not really ever had to deal bad issues from core wordpress. It's not the most secure once everything is loaded in and your users take over, but taking some good practices like "host each site as its own user" and "use open_base_dir" to restrict access, help a ton, as do disallowing interactions (from webserver config) to any part of wordpress thats not a public interface (eg, no one should post directly to the wp-plugins directory for the most part ) Its not magic, but of all the CMS I have interacted with, its the only one most end users even have a chance at using correctly.
Good post! Apologies for pointing out, but there‚Äôs a recurring typo: ‚Äúdependecy‚Äù vs ‚Äúdependency‚Äù. 
That's a completely valid point. Maybe I should have made a stronger comparison with WordPress against some other CMS, like Drupal or octobercms.
but that exactly what i'm not getting. It not a very good cms. . why would you want to use wordpress if you are not building a blog or not using a premade themes. it make no sense.
because despite all its flaws it has a very loyal fan base, mostly Apple users and vegans.
A number of our clients prefer it in part because they're accustomed to it already, and because it has a pretty good front end experience for non-developer users. That it can be incredibly un-fun for developers (I find much of the architectural logic absolutely baffling) doesn't matter at all to the will-be users. It's also not a *bad* CMS, and it's gotten quite a bit better since the first time I had to drag it kicking and screaming into actually acting like one. I'd rather use Drupal any day, but WordPress can do the job.
Same, I'm 20 and I know completely how that feels lol
&gt; I was considering writing a simple console game If the goal is to learn about OO and how to use a dependency injector, I wouldn't choose a game to learn from. You'd be much better off writing something simple like a note taking application, and using DI to make it be 100% unit tested. Objected Oriented programming is not a good fit for games, for several reasons but the main one is that composition of object's behaviours in OO is too hard. Something more like data-oriented programming gives a much better fit to games programming: https://sites.google.com/site/thegreatoptimizer/data-oriented-design https://github.com/dbartolini/data-oriented-design
Do you have a public repo anywhere? I was bummed that TechCrunch didn't have any code along with their article :( 
I think it's the labor market and the plugin market. Every writer knows WordPress. And a lot of publishing, copy writing, and marketing use cases can be handled through plugins that can be installed and configured within a week or faster. So it's cheaper to use something with a big ecosystem, basically. This was how Photoshop took over the photo editing business, and I suspect this is what's going on with WP. Coding for WP, of course, is a different concern. Was wondering if the development experience has improved over the years...
Yes. The dev is on the board for PSR too, so there's that too.
My only complaint is the complexity of Wordpress makes it possibly necessarily bloated. If your goal is to deliver a simple website to thousands of users, it will be crippling to use plain vanilla Wordpress. I've seen dedicated servers crash under the strain before. This is where caching plugins can be a life saver, but ultimately, this is a talking point I have with my clients in which I suggest possibly going custom coded. Because Wordpress is made to be flexible, it has so much overhead in simply delivering a single page. I've analyzed it before and believe at the time it loaded about 110 files to generate the home page of a site I was working on. Multiply that by a thousand hits in a minute and suddenly your server has to deal with loading 110,000 files in a minute, as well as execute the code. Worse, then you add in plugins, which can be authored and listed in the Wordpress plugin repository by anyone regardless of skill level or coding knowledge, and your site can come to a screaming halt. Even commercial plugins like WooCommerce are insanely costly in terms of resources. As a result of all of this, I actually created a custom coded front-end that used the Wordpress database, which only loaded about 3 or 4 files per page load and was screaming fast in comparison, faster than even a Wordpress site with caching. It can be a huge undertaking, depending on the site complexity, but it gave my client the ability to use a familiar back-end to manage their sites. If your client isn't expecting a lot of traffic, then by all means, just stick them with Wordpress and add a caching plugin. Regardless of any other complaints like architecture, I'm not concerned, it's the world's most popular CMS powering millions of websites. Yes, there are security concerns, but follow the security guide provided by Wordpress, never use "admin" as a username, block XMLRPC in .htaccess, add one of the Wordpress firewalls. As for the plugin/theme development community, it would be awesome if there was a vetting process that analyzed all plugins to make sure they are safe to use and not poorly coded. The only implementation of this I can think of is using one of those managed Wordpress hosts that block specific plugins known to be bad. What it comes down to for me is that I custom code plugins all the time rather than use someone else's code that usually doesn't quite fit the needs of the project which would require me editing their plugin anyway using about the same amount of time. This way I know I can trust my own work, and better, it's obscure and unpublished, so no hackers can analyze the plugin code I've created for weaknesses. I don't know what you mean by "Golden Hammer", though.
I would have to disagree. In general, websites have been moving that direction, at least form what I've seen. I don't have any survey mentioning that, but if you look at any general web dev posting, it has something to do with JS Framework one way or another. I agree about the ecosystem with WP completely, but we are already seeing decoupled website with WP as the backend, which is why I disagree. I even see digital agencies here in Seattle announcing they specialize in stuff like that. 
I didn't hear about the WP-API before, but have created my own custom front-ends for Wordpress before. I'm gladd someone finally decided to make this easier for everyone. One great benefit was that the back-end didn't have to live on the same domain or in the same folder, which made securing it that much easier. No one could simply hit wp-admin, nor could they try all the various hacks to access the back-end.
I think the difference here is between small businesses and large entities. A large entity won't have any concerns in hiring a developer like myself to custom code a plugin to fit their needs. WP-API would best fit a high-availability high-usage Wordpress website, and probably would be overkill for a regular person just looking for a simple website.
You can ignore the majority of the comments in here ‚Äî not because people don‚Äôt know what they‚Äôre talking about or that I think I‚Äôm right and they‚Äôre wrong, but because the amount of over-dramatisation is absolutely ridiculous, to the point you shouldn‚Äôt be taking their opinions seriously purely for the very odd ‚ÄòWordPress sucks‚Äô stance people seem to have. Reddit is somewhat of an anti-WordPress circlejerk that has culminated from people jumping on a bandwagon as opposed to having solid experience using it. Someone who has been programming for 2 years using the most up-to-date methodologies, technologies and workflow will look at WordPress from a programming perspective and just instantly talk shit about it. Oh it does this and doesn‚Äôt do that, it must be bad. There‚Äôs no denying that the code could be better, or that the security isn‚Äôt all too fantastic, but that‚Äôs generally what happens with open source software where tens, hundreds of thousands of other people contribute and you‚Äôre at a point where refactoring a codebase entirely is going to be a very, very daunting task. People complain that WordPress is hard to work with or manipulate outside of the core functionality it was developed for; that‚Äôs also untrue. A developer who knows what they‚Äôre doing can achieve pretty much anything with WordPress that they can otherwise with other platforms. A lot of misinformation has been spread about WordPress having limitations, whereas the limitations lie with the developer(s) and their abilities. WordPress development is NOT easy and it takes a good while to master. Just because you can design a half-assed theme and publish some content it doesn‚Äôt instantly make you a WordPress developer. That makes you a content publisher. It‚Äôs also worth noting that as a developer, it‚Äôs your job to keep WordPress secure. If you‚Äôre not doing that as standard and expecting WordPress and the plugin development community to do it for you then you‚Äôre just straight up crazy. Although I no longer use WordPress as I use another open source CMS based on Laravel in my day job, I can attest that it‚Äôs a good CMS but not without its downsides. It‚Äôs not the correct tool for the job every time ‚Äî every time you develop a website you should use the correct tools for the job. Which tools are the correct ones? That‚Äôs your job to decide. 9 times out of 10 WordPress will do whatever it is you want, even beyond complicated functionality that extends upon WordPress‚Äô native uses. It‚Äôs a good all rounder, but there are better tools out there for specific needs. For example if you‚Äôre after eCommerce, sure use WooCommerce but there are better tools for the job such as Shopify. TLDR; too many ill-informed bandwangoners in here are unnecessarily talking shit. It‚Äôs a good CMS but not always the right tool for the job. Could be more secure and written better from a programming perspective.
Great point and I wholly agree. I'd wager that the number of large entities that can afford a cost like that is vastly outnumbered by the small businesses that depend on WP and its plugin ecosystem for an affordable online presence.
Wordpress itself is good at what it does. It provides a CMS quickly and folks find it intuitive to edit stuff. The problem comes after site setup. The ongoing maintenance required of Wordpress is often neglected. The Wordpress Core is reasonably secure - most of the hacks comes via plugins that are not updated. **So update your plugins peoples!** I can't emphasise this enough. Get a tool like InfiniteWP if you have a lot of sites to maintain. Source: I have expertise is recovering hacked Wordpress sites - more by circumstance than choice.
Sort of like the reliance of jQuery for everything Javascript? I avoid jQuery for nearly everything unless there is animation needed, but so many people use it for simple things like setting className.
Absolutely, but I'd say there is a direct correlation of needs between the two groups. Large entities do use Wordpress, just not the way most people do.
&gt; I even see digital agencies here in Seattle announcing they specialize in stuff like that As anecdotal as your example is, those shops very well may offer such a service, but I'm inclined to believe that when this service is offered to their clients its with a giant asterisk describing the limitation this imposes on compatible plugins.
I would have to agree there, but often, a lot of limitations or solutions plugins were created to solve was a major reason why the WP-API was pushed so hard by the WP community, to get past the limitations. The point was stating that it's already moving in that direction you said isn't (ever) going to happen. Even comments below counter that statement. 
&gt; otherwise their sites would be crippling their servers, not work with load balancers, etc. I may be misunderstanding you but if you've suggesting that WP is used for performance benefits then it'd be the first I've heard of it. WP has nothing to do with load balancing or improved server performance and, especially from a front end standpoint, is frustratingly non-performant.
I don't think those two things need to be mutually exclusive. WordPress is bad because it's holding onto the way it was written 15 years ago, not because it's made to be accessible to average joe content editors. The loop, a hugely polluted global namespace \(with REALLY TERRIBLE function names\), really poor performance due to storing basically everything possible in 4 tables, poor user permissions, etc. \-\- those are the reasons I do not like working in WordPress. The actual content editing experience is \(generally\) pretty great, and would not need to be changed to fix the issues I have with it.
Well, it depends on what you care about in terms of reputation. Code? Sure, it is as dirty as other CMS with years of baggage. But in terms of ease of use and flexibility, it is head and heals above anything else
That's one of my biggest issues with WP, the way it's put together, it's stuck in php4 land, doesn't use composer, and to my knowledge. Their use of mysqli doesn't use prepared statements the last time I checked. Even so, and how they do their plugin system, maybe things have changed, but every time I check, the codebase is a giant piece of garbage. Then getting things into their system is a complete hackjob overall.
I think it's simply the wrong method to build a website. For a whole bunch of reasons... There's no way for you to expand it without it becoming a monster. The more it's customised the more difficult it becomes to maintain all your plugins and theme. Everything breaks apart. I think you have two different points of view on this subject because you have the less experienced that deal with just shipping new projects so they just throw WordPress together with a few plugins, a paid theme and push it out, get paid then move on to the next project. If they're maintaining projects it's typically something very basic so they can't understand what all the fuss is about. Then you have the other side of the coin, those that get handed these WordPress monsters where the client can't edit things because it's buried in layers of admin UI, the paid theme has expired with the contractor long gone, and the customisations don't work with any of the plugins making each upgrade a nightmare. Then the client will ask you to do something like integrate a huge coding project completely unsuitable for WordPress on top one day. I think it's foolish to choose a development framework with such poor technical limitations. You never know what the future holds for a project so it makes no sense to choose such a poor framework to build upon when alternatives exist. It's like a developer not commenting his code and arguing that he's never had any problems with that. Well yeah, because you never stuck around long enough to have them.. I think another issue with WordPress is that it's simply outdated in its model of development. A lot of things we take advantage of aren't used in WordPress so you're handicapping yourself right from the beginning. This only ever becomes apparent later in a project after a few release cycles as things become more complex.
I have been working with WordPress off and on for the past 5 years. I think it is turning into a cancer for the whole PHP ecosystem. It is holding PHP itself back with its ancient "best practices" and procedural methods. I have a buddy whose first real PHP project was on a WordPress plugin, and it honestly just about scared her away from the language entirely. Since it's open source you would think it would be fairly forward-facing and adaptable, but it's gatekeepers on their Trac system are backwards elitists. For example, I add a few helper functions into literally every single project I run. One of them is a function to register multiple "action hooks" to the same callback. I submitted the patch and it was closed immediately saying that nobody wanted this change and it had already been discussed in another thread. Clicking through to that thread, it was closed for the same reason linking to an even older thread. This same feature request had been posted 4-5 times a year for the past 8 years, and this same core developer was the one closing all of them. Security wise it is so bad that Google has dedicated a dev team to modernizing it. As someone who hosts 150+ WordPress sites, I can see why it's needed. It seems like every few weeks I need to suspend an a compromised account that is sending bulk spam email. Long story short it is slow, heavy, insecure, and backwards facing. It works fine as a blog, but it's time for it to make some breaking changes and catch up with modern development practices. 
&gt; But in terms of ease of use and flexibility, it is head and heals above anything else Fishing for globals that store everything in arrays, APIs where "foo()" "the_foo()" and "get_foo()" do absolutely different things (with zero rhyme or reason) is not my idea of ease of use and flexibility. When you install WordPress and use it as a non-technical person, the web UI is nice enough, indeed. But the code and APIs underneath are laughably bad. 
Still too long imo. Maybe with more line spacing it wouldn't be a problem. I remember this [article](https://css-tricks.com/equilateral-triangle-perfect-paragraph/) made me realize why some texts might be easier for me to read than others. I also suggest pasting your own paragraph (browser dev tools) into the page you consideer convenient to read.
I think it really depends on what perspective you come into it from. From a user perspective of "I need a website" vs "I've been involved with a site that gets enormous amount of traffic and I have to maintain this thing, and prevent it from getting hacked and be on call when it breaks" yeah, the con side is pretty heavy. For the person/people setting it up for their 1st site, and setting up all kinds of features, they love it, because they accomplish a lot in a little amount of time. But playing devils advocate here, there are sites on the internet which release zero-day exploits all the time for crypto currencies, and this product is like the common cold, major industries try to come up with a vaccine every year, but the virus changes it's composition just enough and hundreds of thousands still get sick. This product due to how it's designed and the procedural mess that it is, unless it's completely rewritten, it's like patching a ship made of glue &amp; toothpicks. Water will always find it's way in, and the water is the lack of security, and some script kitty will get into your new WooCommerce site because he found a backdoor in some crazy fangled plugin by rainbow tabling tests against every majorly common vulnerable plugin that got installed. So yes, it accomplishes a lot, but just as a lot of people can build a really tall building, you need the right people &amp; licenses to make it that tall and be a safe structure from both a technical &amp; legal standpoint. Don't risk building an infrastructure around this product unless you can ensure that you can mitigate the worse offenses of it's security to the public. That means putting this thing behind closed doors and never let anyone know it's actually a WP site, mask every nice feature about it behind proxies, static sites built out with the content it generates and never allow direct access without htaccess / basic/auth or something. You can protect your files with wordpress, but then you have to also scrub your database if it gets injected with garbage to exploit the clients with xss. It's a frustrating mess. It's part of why products like drupal are trying to abandon their old codebases to improve / re-invent themselves enough times to where they rid themselves of the garbage of yesteryear, sometimes it's going to be painful to migrate to a new system, but the benefits outweigh the cons especially as security becomes more &amp; more important.
&gt; Obviously it has a poor reputation. And with good reason. &gt; But so does/did PHP, which has improved tremendously over the last 5-6 years. True; the difference is WP really hasn't improved, in large part due to their (understandable!) obsession with backwards compatibility. &gt; Or is the poor reputation still deserved? It absolutely is. Whether that's a reason to avoid WP, or to roll up our sleeves and try and fix it is another question. On the one hand, it's very, very, very popular, and getting more so. On the other hand, the project is tightly controlled by Automattic, so there's limited scope to actually fix things. (As I write this, most of the other comments seem to be either saying "Wordpress is terrible!" or "Wordpress is popular!". Both are right, sadly.)
Not strictly PHP related but Rainbow Brackets is handy: https://github.com/izhangzhihao/intellij-rainbow-brackets
That‚Äôs so cool!
This article is a joke, right? 
The comment you replied to literally provided an example of that decoupling (TechCrunch), so it is already happening on a large scale. We‚Äôre going down this road too at my work. Front end centric plugins are not a concern for us as most of the functionality we desire doesn‚Äôt rely on the front end which I imagine most companies looking to decouple bed from fed would either.
The way to learn any language is going to depend on the individual. I have studied quite a few languages, and have just started retraining myself in PHP. I'll usually use a 2-pass approach. First pass, I go for a quick overview of the language. I try to get the basics of working with built-in types and expressions out of the way early. I might put together some scripts that demonstrate simple operations, with a comment next to them describing the result/output. I might watch a video lecture - one in particular I've been enjoying on YouTube is called "PHP Front To Back". This guy is very good. 2nd pass, if I'm still interested in it, I'll will cover things in greater depth, with a more extensive tutorial, preferably with a detailed book with good examples. I might also go through the standard library, and practice using many of its features. By going through that first pass, you'll know more about what makes a good book - there are a lot of bad ones out there. With PHP, you're also going to want to learn some HTML, but you don't have to know much at all to get started. Beginner lessons rarely get into Javascript. You'll also probably get into some database transactions - all the beginner tutorials I've seen make use of MySQL. But again, the lessons will assume you have little or no knowledge of databases. Eventually, you'll need to get away from tutorials and exercises, and come up with some small projects of your own - something you're interested in. That's where it gets fun, and you learn the most. PHP is nice in that there appear to be lots of places that will host small projects for you for free, or very inexpensively. For example, I've been looking at boardgamearena.com. They provide a framework for you to code up your own games, requiring a little bit of PHP, Javascript, and HTML knowledge. 
Unused features as you mentioned are not unused per se. Its a CMS made for the primary purpose of pushing the content and hence it has the apt amount of features readily available for the time a blogger, site owner or a publisher needs it. It reduces the cost of creating necessary features on the ad hoc basis and in general provides value in the longer run. Plugins were/are never endorsed as something you can use with a blind eye. There are reviews and ratings for each plugin and most of the users know the risk they take when they install a potentially vulnerable (not updated, out if repo, poor support reviews) plugins. Again, this goes for almost all the frameworks and systems as one cannot and should not use someone‚Äôs code to make/extend a feature set without a proper review. 
The plugin system for WP should be written to an interface, define your class, implement a specific interface with callbacks and let it figure out at which level to execute this particular interface, lets now play this string loop attachment B.S. where each one executes at different stages, just define your callback. They're writing event systems like javascript and this is why it's impossible to debug javascript, callback hell as it's known to be. It's why angular &amp; even to some degree the react bandwagon are jumping into the typescript bandwagon since they can actually debug / understand WTF is going on.
Oh boy.. Thanks for pointing that out! After writing a blog post and staring at it for hours, you get blind for these kind of typos.. Thanks you very much!
I do: https://www.stitcher.io/
I don't love it, but I don't hate it either. I recently had a client who already had a WordPress site up and wanted me to add functionality and update it's design. Hadn't touched a WordPress site in 4 years but it was very easy for me to jump back in. Documentation was great, I found everything I needed right away in the official docs or on StackOverflow in seconds. WP-Migrate-DB helped me get rid of past issues with deploying to different environments and Advanced Custom Forms is really versatile. For the type of sites I create for work for clients, I'd honestly rather not use WordPress but things have gotten better. Now security is a whole different thing. I know it's had its issues and probably will continue to do so, but that's a possibility with any third party software (including the majors OSes on our phones and computers). It happens to pretty much all popular software, the key is how fast do they address the issue, which is pretty fast (once they know about it). Hopefully with Google officially getting involved they'll release a fork of it that targets PHP 7 and finally start a deprecation path for their support of PHP 5 (maybe only patching major vulnerabilities)
/u/ocramius codebases
That looks awesome, thanks!!!
_shudder_
The way I learned: learn it as you need it. Start from the bottom and learn the basics and set project goals for yourself. Think of a website you‚Äôd like to build and start building it. In the process you will come up against problems that will require you to learn new skills. Use these problems to your advantage. ‚ÄúLearn it as you need it.‚Äù Don‚Äôt overwhelm yourself with all the features PHP offers. You‚Äôll only scratch the surface in everyday development.
Keep the pivot table as is, and use a JOIN in your SQL query. Something like: SELECT username FROM users JOIN follows WHERE Follower = user_id; 
Wasn‚Äôt familiar with the JOIN clause, that will do EXACTLY what‚Äôs needed. I knew there had to be a better way than looping a query a billion times. Thanks so much.
That'as odd, seeing how @SuprisreDyslxeia is able to wrap it up in a few hours. If coding something like this, which by other users here is said to be a few lines of code would take you a month, I 
Not free and not exactly a lightweight approach to having some div read a flatfile I can easily manipulate through the browser.
Wordpress, Inc. has done a lot to improve security, but the architecture (if you can call it that) is still awful, and the 90s development workflow remains. I guess it says a lot that Wordpress, Inc. themselves chose to use Node.js (and thus not reuse a single line of code from Wordpress) for Calypso: https://developer.wordpress.com/calypso/
&gt; Not sure if I understand correctly, but if DocBlocks are used to prevent bugs, then something is clearly off. DocBlocks are not specifically meant to catch bugs, but it can certainly assist in doing that (some IDEs will point out obvious mismatches between what is described in the docblock and what is actual code. this has saved my bacon from embarrassing myself among my peers a number of times!). It's primary function is to help auto-generate documentation with the added bonus of helping to make the code easier to reason with and understand at a glance for someone who hasn't touched it before or in a while (instead of having to read the code in order to understand it). It also makes code reviews that much smoother. Saying that, I also take the view that code should ideally be so well written that it is practically self-documenting (kind of like what functional programming encourages), but the reality is that this is a high-minded goal which in practice doesn't scale very well as more and more people get involved with the same codebase with differing levels of experience. Unit tests certainly assist in understanding a section of code you are not familiar with, but it too by no means is ideal and often is verbose. As in... would you rather read 2-3 lines that someone wrote in human language that conveys the basic functionality of a function over 10+ tests that try to cover all bases? Unit tests are meant to be verbose, because it is trying to cover all bases in order to get 100% test coverage. I would prefer the former over reading a unit test when scanning through code or reading a code review. &gt; I have worked for a company where lengthy descriptions existed on DocBlocks what kind of data can be passed in and what not, and what would make the entire method invocation fail. That just sounds like code that is in need of some major refactoring. Having a large docblock like that to me would seem like a red flag and would likely not pass my code review or at least get written down on a piece of paper and put into my "technical debt to be dealt with later" jar. &gt; As you can imagine, after a couple of years the DocBlock wasn't up-to-date anymore, as hardly anyone cared about updating it That to me seems like a problem with your teams workflow. It should be part of the acceptance criteria for code passing code review. Plus, a lot of IDEs will auto-generate the docblock for you (ie. phpstorm), so I don't really see docblocks as the problem, but this being a symptom of another problem (and this is coming from someone who actually uses sublime rather than phpstorm :) ). &gt; Development was slow, QA was abused for testing (and asserting that everything still works), rather than developers encouraged to write automated tests. An environment where the creation of documentation is more important than the creation of well-tested code is hardly healthy. I see them as mutually exclusive issues. Teams should be asked to write good documentation and write good unit/acceptance/integration/smoke/etc tests and maybe its worth talking about what those could be at the point of writing your user stories, rather than a hopeful by-product. Each provides value in different ways. It's not a binary choice. &gt; On a separate note, well-written tests are often the best documentation one can find (at least for a developer). I made my point about this earlier, so I will just add that I don't disagree, but I would modify your sentence to replace "best documentation" with "most complete documentation".
Came across this flatfile lib that might be of interest: https://github.com/badpenguin/flatfiledb
There is a free plan on contentful, I think it‚Äôs more than enough for this use case. To read a static file on the disk you‚Äôd use `file_get_contents`, same as to fetch data from the API over HTTP, I see little difference here. As for the backoffice, you can either try to find something lightweight that meets your needs (but as you can see, most of the solutions tend to expand into something bigger), or use an already build panel provided by contentful. I would also consider Jekyll with Github Pages and [Prose.io](http://prose.io/) as a backend. Jekyll isn‚Äôt lightweight if it comes to features, but in reality all you need to do is to paste your layout into the main template. Some kind of templating would be required either way to insert your data, so you‚Äôd need to learn a simple for loop in the jekyll templates. GH pages provide hosting, and Prose is a simple online editor for markdown files. Just leaving it here for consideration
I agree, this does seem possible.
Store it as a tiny int is the most secure
&gt; password_needs_rehash Woah, cool! Didn't know such a thing existed. In practicality how do I use this? Should I use this each time someone logins? 
If it's working awesome :\) I had a hard time grasping JOINS, I'm not sure I've got it 100&amp;#37; yet, I have yet to implement it into something practical to test it out, so I don't know if this will work, but it seems logical, and that's what I'll use when I try to get JOIN's to work. I just liked the way the "tutorial" was laid out and the concept. Enjoy the read, it's by /u/lightkeeper. [https://www.reddit.com/r/webdev/comments/8dfxg6/i\_wrote\_this\_to\_help\_web\_developers\_learn\_basics/](https://www.reddit.com/r/webdev/comments/8dfxg6/i_wrote_this_to_help_web_developers_learn_basics/)
&gt; I hear "you can do literally anything with WordPress" a lot from inexperienced devs. It stems from not knowing enough to understand how much you don't understand. Doesn't matter what it is.. I will *make* WP do it. Even if it isn't WP when I'm done.
Yup. Everytime someone provides their current password, so that you have something to hash.
So the size of a bcrypt hash is always 60 right (assuming my passwords are less than 60 chars of course). Is there any ETA on what the next default algorithm will be and what size hash it might out put? 
&gt; I think with the WP-API, you're going to see a lot of people moving away from built out themes and making more Single Page Application and decouple the frontend and backend. Otherwise known as a [headless CMS](https://en.wikipedia.org/wiki/Headless_CMS). I built one for a major telecoms company. Fun stuff! I wanted to open source it, but alas I wasn't allowed to. Best project I ever worked on/architected and is still being used there to this day after 2-3 years (without any active development or maintenance!).
**Headless CMS** A Headless CMS is a back-end only content management system (CMS) built from the ground up as a content repository that makes content accessible via a RESTful API for display on any device. The term ‚Äúheadless‚Äù comes from the concept of chopping the ‚Äúhead‚Äù (the front end, i.e. the website) off the ‚Äúbody‚Äù (the back end, i.e. the content repository). *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
[Timber](https://www.upstatement.com/timber/) removes the need to work with the loop.
Imho the biggest issue with WP is, that many "developers" make a business these days, throwing plugins together and selling it. A single plugin that doesn't properly secure itself can create a vulnerability that is not noticed. Since people tend to forget their credentials, WP allows you to create admin-accounts through pretty much any means of access you could have to the server. ftp, sql, .. there's a "create admin user" command for it you just have to inject to get admin access. Wordpress used to be a Blogging-software, that people 'extended' to be a website-tool, that it never intended to be. To improve on it, they'd have to rethink their approach and structure it more like a framework with CMS elements. But most importantly, unify the approach of adding content and structure to it, while providing a secure channel for IO-handling that removes the need for plugins to do their own sanitation. The only big problem with it is, that WP is successful, because of the tons of plugins and templates you can already get for it. If they fundamentally change the system, that benefit will go away and many people will not have a reason to switch to the newer one. 
I'm not really sure why you'd need an ID here. combined primary key for Follower and Followee. that's it. Do not worry about the database. It's made for requests. The bigger issue will be request by second with larger user-numbers, that most bigger sites solve by distributing the load over multiple servers. But for m:n relationships, using a 3rd table containing both primary-keys is the most efficient way to solve it. 
Good to know. So the "cost" is the amount of real time in seconds that the server will spend "hashing" (generating randomness?) and it's a good idea to lower the cost down if the server is at peak load? Does this mean when a user signs up the server will actually wait 10 seconds before sending the response?
And thank you!
&gt; assuming my passwords are less than 60 chars of course This is wrong. Password hashes don't change length regardless of how long a a password is. Never limit password length
Yep, that is a good general approach. If the defaults give you, say, 20ms hashing time, I'd probably just leave it as is (even it could be possible to increase). But there are many ways to look at it ;)
Frankly, bcrypt has 72 char limit. But realistically it probably won't matter in real life. If one want's to take that into consideration, a good approach is to just SHA256 (hex-encoded output) the password before feeding it into bcrypt.
Thank you for sharing!
&gt; There are efforts to port some features in, but it won't be anything compared to a modern CMS built from the ground up with all of the aforementioned development efforts. Okay so what modern features do other things have? Please lets focus on user-features, so things visitors and other administrative / operational staff will use
Lets be fair, most of the plugins are crap, and if you pin WP to a SPA (lots of media are), you're just selling hot-air
What about a callable class? e.g. `class Foo { public function __invoke() { return 1; } }`
Wow.. you can put a dud theme in and it'll add almost nothing to the frontend. You can have a non-css, non-js experience if you know what you're doing. I agree it's not raw performance (what would that measure anyway, computation, bytes of RAM, load-time?). No web-platform software is, which is why we code in a text format and transmit lots of things as strings.
You've been very helpful. Thanks!
Wow! I didn't know that. Is there a limit to how large of a password bcrypt can safely hash?
 &gt; is an array of *references* https://twitter.com/infinite_scream
Surely this is not good news for the dev team that they deployed 4 wordpress sites that have been hacked. It shows something broken in IT for sure.
Hm maybe that could work. Before it was code from `symfony/requirement-checker` so it was not an option but now that I ditched it and moved everything under the Box namespace this should be doable, will try that thanks!
I prefer to store my passwords as booleans
&gt; a good approach is to just SHA256 (hex-encoded output) the password before feeding it into bcrypt. This may be a bad suggestion. You are effectively double-hashing your password like that, which is bad: https://stackoverflow.com/questions/1225528/double-hashing-security
Congrats, you just got crossposted
How much time did you put into formally testing and working with WP though? Was it that you were looking for bits of Symfony that were not there? Have to be super specific, because for years I blamed WP for not being something it never claimed to be. It doesn't ever boast developer tooling or enterprise tooling. How much would you charge to rebuild it with a cleaner, "more modern" coding style? What would be sacrificed at the altar of abstract technical correctness?
Remember that also means that if by a miracle your service becomes wildly popular and your servers and being put under full load, whenever there is a login amongst the traffic that they'll be down performing that request for 100ms each time.
Argon2i &gt; Bcrypt 
Double hashing is bad when you don't know what you are doing, and frankly most people don't know what they are doing. In bcrypt's case, max input is 72 bytes. It's a pretty good approach to double hash, if you want longer than 72 characters accepted. Of course you can't feed anything longer, so you need to pre-hash with something as close to 72 bytes as possible. The best contenders are 64 byte hash functions, which are sha-512 or whirlpool.
&gt; I just read some stuff about bcrypt being broken (some Debian programmers said so) You are mistaken in this context. There are two different "bcrypt"s operating here. What is common amongst them, is that they are both adapted from the original blowfish symmetric cipher. The "bcrypt" that PHP uses is a specific standardized algorithm used for hashing passwords. The "bcrypt" being complained about in Debain is a binary application that performs general file encryption using the blowfish algorithm, but it uses an insecure mode of operation. Debian developers are complaining about the bcrypt file encryption package in their repositories, **not** the bcrypt password hashing algorithm.
WordPress has established itself as an enterprise grade solution for a lot of situations. The main vulnerabilities come from outdated themes and plugins. If you‚Äôre use to modern frameworks like Symfony or Laravel then WordPress might be different for you. It‚Äôs not that it‚Äôs hard per-say but it is quirky but once you understand how actions, hooks, and filters work and spend some time in the developer handbook it‚Äôs pretty straight forward and easy to write code for. 
I‚Äôll read up on those aswell. :) Thanks a ton for the help.
everything that doesn't require client side access should be outside of the public folder. 
And not even the courtesy to say where? Aww. 
Or use mysql in strict mode
&gt; but casting objects to arrays is the only reliable way to get object properties. I hope that is documented behaviour, otherwise that "reliable way" might vanish with any new PHP release.
Yes, but it doesn‚Äôt actually remove the bad architecture beneath.
Short answer: no
It's hard to upgrade from Magento 1.9 to Magento 2. Most of the modules won't work. None of the custom work can be reused.
in the title: &gt; sinlges lines in the changelog: &gt; singe lines quality control on point :)
Of course it doesn't, but given most of us will at least occasionally have to work with Wordpress we have to do what we can to make it less painful.
Nope, you could use bcrypt to hash the entire volume of human knowledge.
From what I've seen, 1 hack was from an outdated plugin. That was on us. The 3 other were from the same wordpress core failures used before any related cve ([this one](https://www.cvedetails.com/cve/CVE-2015-2213/)) was released. So maybe it's our fault to not have seen what the whole worpress community didn't saw ... /s
Very nice, looks like it works seamlessly. I'm assuming you're using server-side rendering to avoid the initial loading of content, what were your experience with it like? 
Sounds like CI2
That's actually a great idea, I'll try to do it soon, thanks :\)
Collisions are not security relevant here. No need to worry about it. While it may be arguable if you need to be able to bcypt longer than 72 char passwords, but if you want to make it possible, there is no other change than pre-hash the password with something which truncates the string to fit bcrypt's input. A good and reputable hashing function, like SHA256 or SHA512 or SHA512/256 will be all good. Just pick any of them.
I agree (personally i hate WP). At my work we took over a company that had a WP site and did a pen test on it, came back with all sorts of crap, including cross-site scripting in the "reviews", you could post Javascript hahah. Surprisingly, never excploited. But the theory still stands, *usually* if something is big, exploits are often found and fixed quicker as a lot more people working on it, but not always the case. I think the major issue with WP is it's plugin system.
So what special in your config?