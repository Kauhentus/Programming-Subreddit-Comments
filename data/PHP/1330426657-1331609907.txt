I've never used Agavi, so I can't compare it without prejudice. However a quicklook didn't impress. Like it's PHP 5.2 - no namespaces, no modern [PSR-0 file structure](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md) factories.xml is a good thing, however it seems to me that it's not a full-featured dependency injection
What version of Symfony are you learning? Can you please give a link to the book if it is about Symfony2?
&gt;I've never used Agavi, so I can't compare it without prejudice. However a quicklook didn't impress. Like it's PHP 5.2 - no namespaces, no modern [1] PSR-0 file structure The auto-loader supports namespaces, and PSR-0 compatible autoloader will be rolled out in [version 1.1](http://trac.agavi.org/ticket/1454) and will maintain compatibility with older versions. Agavi has a great feature that maintains foreword compatibly of config files by using XSLT. a new version of agavi will contain xslt to transform xml configs that use an older xmlns to be compatible with with the new xmlns which contains support for new features. &gt;factories.xml is a good thing, however it seems to me that it's not a full-featured dependency injection I think it offer sufficient configuration flexibility. Agavi also provides facilities that allow you create you own configs and config handlers that also allow you use existing agavi config facilities (such as per-context and per-environments config sections) so if you want to implement DI configurations/factories for your own components it has nice tools for it which can greatly help. 
It's not version 2 :( 
Haha same. Code Etiquette sounds better anyway
 function genHollywoodPwd () { return 'swordfish'; }
 function generateUltraSecurePassword() { $password = "Correcthorsestaplebattery" . random(0,9); return $passsword; }
While you may have many things that you want to say, I'm going to go ahead and posit that 95% of the readers here won't make it past your first paragraph. Such is me. This is not a blog post, it's more like a discussion forum, and you've just filibustered... Having said that, and before I say any more, I'd like to say that I actually do respect you for what you do, and all the time you've put into your site. Deep down, I'd love to see the site become a 1st-class site (on the order of StackOverflow, etc.). However, under the current guise and considering the PHP community's status quo, I don't think that will be possible. Example: an ill-informed co-worker linked to your site yesterday (which was actually the first time your site has ever been linked at work in over 4 years), and here are some of the reactions: &gt; I did the dirty work… had to go through 10 different screens before getting an account registered (what the?) – using a GMAIL account that I never used. I hate registering for a site and getting dumb SPAMS. And... &gt; Wow, I didn’t know anyone still used that site… let me find a login and download the code… **Regardless of whether it's the author's choice or not, we hate registering just to see code**. Ultimately, this presents itself as a problem with _your_ site, not with the author's choice; in other words, **you** are responsible for forcing us to register to download the code since **you** created the site feature that supports that. Nothing is more frustrating than having a lead on something (a Google hit, a link from a co-worker, etc.) and then being stonewalled by the registration screen. I know it's part of your design, but that design died with web 1.0. Nobody wants to register, and posted code should be open-source and easily accessible. For reference, the code that my co-worker linked to was © some random dude, but it didn't matter in the end as the code was crap anyways (waste of time to register and download....), and the site is generally....still, even after UI updates....stuck in the 90's. It _looks_ more modern now, but it's paradigms are what's outdated -- to the point of obscurity. I'm sorry, but I'll never use your site so long as it has so much guarded, closed code.
I use [Sitelok](http://www.vibralogix.com/sitelokpw/) by Vibralogix. The code and instructions are clear. The email support is good. EDIT: much better when spelling is correct!
&gt;At least, as you correctly point out, until it breaks down on the side of the road and you're late for a presentation. ;) Which is the vital flaw when learning only with Frameworks
Underscores not showing properly on code? Take [this](http://codetique.com/UKDZcVlV) as an example. In line 3 &lt;?php echo $quote-&gt;currency_symbol; ?&gt; Im not seeing the underscore unless i click on the line
What browser are you using? I am not seeing that in firefox or chrome.
Looks like the page just hasn't been updated, and most likely won't be until 5.4.0 is released.
[screenshot](http://www.matiaspino.com.ar/tools/imagebin/image/91252166)
Total badass would be to use a single bit for each permission, then do bitwise operations to see if the user can perform such task. For example: delete, update, create, view would make up a 4 bits number, ranging from 15 to 0. Admin would be 1111 (15) and a registered user would be 0011 (3). For each user, you would save this 4 bits number. I always wanted to test this stuff out, seems like a good way to waste some time.
Why not use a well established open source framework that has permissions???!!! Let's not reinvent the wheel people! FOSS, Frameworks, ORM, use them !!1111`@
&gt; If the registration requirement for everybody was so bad as you claim, the site would never have gathered over 1 million registered users. Take off your rose-colored glasses; your site has been around for like a decade, and you still can only claim 1 million users? It took Github only 3 years to reach this mark. Where were you after 3 years? &gt; Allowing to automatically send users notifications of package updates, as I mentioned before, is just one benefit. **I don't want any stupid notifications.** The only exception here would be for privacy/security notices; however, I don't want any of your other "benefits". &gt; Basically I am telling you that the vast majority of the authors really wants to keep the registration requirement because of the benefits that provides them. Well I have explained this over and over again, but I'll never use such a site; enjoy your mediocrity. &gt; Lifting this requirement against their will, would be like giving up on motivating them to contribute. They would simply stop contributing. Github has no such requirements, and yet I bet they have 10x's the userbase/traffic as you do. Go make of that what you wish. &gt; All sites that require the users to be registered have this problem. You are wrong: OpenID. &gt; On the other hand, just complaining against the site and making campaigns to demonize me and whoever is helping to make the site viable, is not going to help anybody here. Who in the fuck did this? I was just telling you why I, and my coworkers, think it sucks. Just because criticism is biting doesn't mean that it's not constructive. &gt; Now that I bothered to explain the reasons why things are the way they are, it would be more constructive if you provided suggestions to improve things without breaking the fundamental pillars that make the site work. I don't give 2 fucks about improving your site; after 13 years, I think it's hopeless. There are much better alternatives already out there, and they aren't so egotistical so as to discount every criticism against them.
We should be able to collapse the replies. In-fact, they should be collapsed by default.
OK, I admit it. I laughed out loud. While it is just four days old I hope it hasn't been abandoned already. edit : make that last updated four days ago. Oldest translation is German Jan 7th 2012.
&gt;So you would end up stuck at the side of the road calling an engineer, or in our case, another more experienced developer. Which is exactly what happens in the real programming world anyway. &gt;pointing out that learning straight off the bat with frameworks isn't always the best option. But, you *haven't* made that point at all. You've made a snarky comment or two, but you have done nothing to establish that notion in any frame of reference whatsoever. You're just being pedantic at this point, not adding to the discussion. 
I've read through the examples and saw the comment, "language assisted copy and paste" - http://www.php.net/manual/en/language.oop5.traits.php - can you give me a practical example of how you would leverage traits?
sampling bias has nothing to do with anything. I was just telling you that I personally knew other php developers that take the opposite stance. I'm of the opinion that learning to program shouldn't be easy. Abstracting developers further and further away from what they're actually doing is a big part of why the web application landscape is such a mess. It's like teaching a medic how to use a tricorder, but not teaching them any medicine. 
By your logic, we should all be using assembly, rather than wasting our time with all these high-level languages. And realize that this is an attitude that is *exclusive to the PHP world*! The rest of the programming community doesn't waste their time with this sort of nonsense, and it's this attitude that keeps PHP as a laughingstock. There are tools out there for using - use them! You have to learn to let go of these idiomatic ideas about the "right" way being the hard way, it's nonsense.
Practical example would be shared methods across classes without needing to extend. Another thing that comes to mind is another way to create configurations. Or a trait with commons tools. It's a really cool feature.
I am writing a game and I'm not using PHP magic object functions like __get, etc. I have defined a Location object that holds coordinates (1...N dimensions) along with associated getters and setters. I have defined a Tile object that has a $loc attribute. I have defined an Entity object that has a $loc attribute. I have defined a trait HasPosition { public function getLocation(){ return $this-&gt;location; } public function setLocation(Location $newLocation){ $this-&gt;location = $newLocation; } } Now both Tiles and Entities can implement boilerplate (such as the location setter and getter) without having to share duplicate code. Without traits we would instead be creating a helper class called maybe... "isLocatable" (we're lucky it's so easy to describe the purpose in this VERY simple case) that both Tiles and Entities inherit from. Now we have a dependence on when this inheritance occurs when having to develop other helper classes. This is obviously a problem when you want to use say...a private Location getter for Entities. We have to develop "isLocatablePrivateGet" that extends (and overrides) "isLocatable" for Entities and now Tiles and Entities inherit from different classes so the ancestry is disparate which has implication with get_class and casting. Traits/Roles/Aspects/Prototypical Inheritance (nobody's complaining that this is basically how ALL classes work in LISP and Javascript) are a perfect fit for the Stability Model which is what OOP is all about. It's just taken a long time for Reenskaug to give it the thumbs up. Also, inexplicably, it's a very unpopular paradigm on /.
I am sorry that you need to resort to rude language, hate speech and insults to try to make a point. That kind of speech totally kills your claims that you are being constructive. I did not come here to argue, even less to fight. I just came here to clarify what seem to be recurring misunderstandings. I did not start this thread. Chipersoft did. Chipersoft seems to imply that there is a demand for a site like phpclasses, but works in a different way. Look, if there is a demand for a site like phpclasses, isn't that because other existing sites do not fill that demand? It does not seem to make much sense to compare PHPClasses with GitHub or other project hosting sites like SourceForge, Google Code, CodePlex, etc.. Those are for different purposes, specifically project hosting. They are not even focused in PHP. They hardly care about PHP developers more than they care for Ruby, Python or other language developers. PHPClasses is not for project hosting. It is for project promotion. It is very different. If you submit a project to those project hosting sites, they will hardly do anything for you to promote your project. You need to do your project marketing by yourself. PHPClasses does the promotion of your project for you to a community of over 1 million users. When you submit a package to PHPClasses site, your package description is built by the site moderator (currently me) so it becomes clear what the package does and it appeals to the users. Alerts and newsletters are sent to hundreds of thousands of users that care about new PHP components so they become aware of your work. If you update your package, the site notifies users that previously downloaded it. You may not be interested, but authors want to keep their users up to date with their latest releases, so they do not have to waste time providing support to users that did not upgrade to the latest versions of their packages with the latest fixes and enhancements. If you are not an author with PHP packages to share, you may not care much about this, but thousands of authors that submitted their packages in PHPClasses site really appreciate. The site has been having a record number of package submissions every month. I just regret that I do not have time to approve more packages a day. Plans to allow trusted users to help in moderating the new packages are being evaluated since a long time ago. It is just hard to figure how to do it in a way that does not cause any injustice. Anyway, I am not trying to convince you or anybody that the site is perfect and you should use it. I really cannot be bothered with users that do not appreciate the time and effort that is necessary to put a site like this up and keep it financially viable. Other than that, the site uses OpenID since 2010 to provide single sign-on to PHPClasses and JSClasses. It just does not allow users to login with other untrusted OpenID provider sites because that would open a door to fraud. But as I said, it will be implemented support to integrate with Facebook, Twitter and Google accounts. It is just a matter of time.
Always the latest 5.4 news: [http://php.net/php54news](http://php.net/php54news) ... which also works for [5.3](http://php.net/php53news) and [Trunk](http://php.net/phptrunknews).
It is when an object can ask itself about what class it is an instance of, the name of its parents, methods, properties etc. There are many uses, but one example is "bubbling down" a method call to a contained object. We can use PHP's call magic method, check to see if $this has the method implemented, if so we call it. If $this does not have the method, we can also use reflection on our contained objects to see if they support the method.
Thank you, that's an excellent example and clarified the concept for me.
Seems like everyone could use a refresher in how to properly encrypt passwords The proper usage of the PDO class Maybe something about memcached or APC and how it should be used
Just in case you don't know - Symfony2 has almost nothing in common with 1.4 version.
"Good" is completely relative. I just need something extremely basic for the time being. I can upgrade later when I know the differences enough myself to make that judgement call. So, for the time being, I'll take "under $50". (but still hopefully reliable, but basic)
Not quite. It's like this: http://en.wikipedia.org/wiki/Reflection_(computer_programming) It's like parsing your code on the fly and being able to dynamically find defined classes and such.
I can't understand the difference between traits and multiple inheritance. Why can't we just do this: &lt;?php class ezcReflectionReturnInfo { function getReturnType() { /*1*/ } function getReturnDescription() { /*2*/ } } class ezcReflectionMethod extends ReflectionMethod, ezcReflectionReturnInfo { /* ... */ } class ezcReflectionFunction extends ReflectionFunction, ezcReflectionReturnInfo { /* ... */ } ?&gt;
They are pretty much interchangeable. The classes you'd use in Multiple Inheritance would store class states. Traits don't. So traits tend to be easier to use in real life. Inheritance goes up and down the class tree. Traits go across.
You won't get a good dedicated at that price, but you can't go wrong with Servint. http://www.servint.net/ One of the pioneers in the VPS space, they've been selling VPS's for over a decade. Low-key, but top notch support. I've been with them for 5yrs and had zero unplanned downtime. 
You can get an entry-level $49 VPS at Servint. Nobody provides better service than them. 
I have been using [Knownhost](http://www.knownhost.com) for more than a year. Their VPSs start at $30-ish per month, including cPanel, and their support is fantastic. Previously I was using a reseller account on HostGator, and I perceive a ton of difference.
What hosting companies do you have experience with, then?
Why does DreamHost get shit? It seems cheap at ~$15 a month to start, like that's too cheap to be good, but I wouldn't know unless I tried it.
You should write about the things that you're interested in, if you don't know what that is, start playing around with new tech stuff, i.e. PHP 5.4 features, Symfony2, ZF2, CouchDB or MongoDB, dependency injection, features from the SPL, Redis, Memcache, maybe you're interested in Algorithms? There's so much fun stuff out there, just try some of it and you'll find something that interests you and you want to write about in your blog :)
NOT HOSTGATOR. DEAR GOD STAY AWAY FROM HOSTGATOR. 
[Limestone Networks](http://limestonenetworks.com/), [Ubiquity Servers](http://ubiquityservers.com/), [Hetzner](http://hetzner.com/), [Kimsufi](http://kimsufi.co.uk/) and [DirectSpace](http://directspace.net/).
Yes, I know, but looking at the Symphony 2 docs, their implementation of MVC is very much broken. Edit: actually looking at the 'cookbook' once again I would say it is **hopelessly** borken.
I have a shared hosting account with HostGator and it's what I'm currently using, and haven't had a problem with it. I haven't really considered them for VPN hosting, for some reason. Out of curiosity, why don't you like HostGator?
Their servers tend to fall over. A *lot*. And they don't really care too much when they do. I use them too, but I really wouldn't recommend them if more than 95% uptime is necessary for you. Or getting your email in a timely fashion.
Uhm.. Why would you want to do this?
This is about the best way for a beginner to learn, not what you look for in hiring. There is nothing stopping someone from coming back to the lower-level stuff later.
sometimes you just have to (legacy db)
Doesn't really answer my question. You said that you wanted to join records from two different database management systems, which I assume would mean handling relationships and limiting the result set based on these. I'm curious about the use case. Also, I suppose you could implement map/reduce in PHP to handle that, if you really needed to.
We have one box at Datashack and they have been reasonable for what you pay so far. If you just want something to play around with, take a look at [BurstNET](http://burst.net/linvps.shtml), as they have some good bang for the buck VPS.
If the child doesn't have the method, the parent's method will already be used automatically.
This was all covered in college.
If you're willing to become a slight sysadmin and abandon cPanel, I'd take a look at Linode (http://www.linode.com) and install Virtualmin (http://virtualmin.com/), which is free. I've personally love Virtualmin over cPanel, and Linode is by far the best VPS provider I've ever worked with. And for $20/month you can't beat it. 
I noticed this last night while browsing Amazon: http://pragprog.com/book/actb/technical-blogging the progprog books are usually really good so this might be worth a look. Otherwise I'd say a good place to start might be to look though the threads on [/r/php](/r/php) and see what gets the most comments. 
It sounds like worth looking in to. What's this company?
The multiple database support in Doctrine is *awesome*, definitely one of it's best features. It has helped me out dozens of times - though I don't usually try to join across dbs. ;)
Oh, actually, it was the line height. font:1em/1.3em monospace; works just fine
This. Their customer service is unmatched. They have managed VPS which means they handle the basic software installation and updates. They have also helped me with a ton of issues which do not fall under "managed" responsibilities. From my experience, after submitting a support ticket, you will normally have a response within 2-10 minutes. I have also not experienced any downtime yet. I had my company and my own sites switch to ServInt's VPS's. If you (OP) decide to go with them, ask sandollars for his referral link so he can get credit! :)
I also have linode - honestly, it is best to read through their [docs](http://library.linode.com/), and skip the whole cPanel/virtualmin side. There is no need for those, and I promise that learning your way around a command line will prove to be MUCH better for you in the long run. Plus, its really not that hard. It seems scary, but if its just a VPS you are playing with, you can feel free to tear it down and rebuild it if you want. If you want some pointers, feel free to PM me. I can even walk you through my setup for hosting on Linode if you like.
The language is clear, but what it does or what it's used for, or how to use it, is not really clear. Who needs this? Who will benefit from the existence of this tool? I'm not claiming that it's a useless tool or anything like that, I'm just not seeing what it could/should be used for.
Reflection does what it sounds like. When you want to examine yourself, you look at your *reflection* in the mirror. In the same way an application uses reflection to examine itself. The function [get_class](http://php.net/get_class), which returns the name of an object's class, is a very rudimentary form of reflection. Lets look at some code: class Person { public $name = 'Joe'; public $age = 25; public function __construct($name = 'Joe', $age = 25) { $this-&gt;name = $name; $this-&gt;age = $age; } public function getName() { return $this-&gt;name; } public function getAge() { return $this-&gt;age; } public function setName($name) { $this-&gt;name = $name; } public function setAge($age) { $this-&gt;age = $age; } } $p = new Person(); echo "The class name of p is " . get_class($p); The output will be: The class name of p is Person This may not seem that amazing, but the get_class *reflects* on the $p variable, and returns the name of the class that $p is an instance of. A very simple usage would be doing something based on the type of object passed to a function: function displayClassName($obj) { $class_name = get_class($obj); if ($class_name == 'Person') { echo "We got a Person instance!"; } else { echo "I don't know what type obj is."; } } PHP provides a handful of methods that do a mild form of reflection, like [gettype](http://php.net/gettype), which returns what *type* a variable is, and [method_exists](http://php.net/method_exists), which returns if an object has a specified method. // gettype example $foo = "Hello World"; $bar = 25; echo "The type of foo is a " . gettype($foo) . " and the type of bar is a " . gettype($bar); The output is: The type of foo is a string and the type of bar is a integer More code: // method_exists example $p = new Person(); if (method_exists($p, 'setName')) { echo "The p instance has a method named setName"; } else { echo "The p instance does not have a method named setName"; } The output is: The p instance has a method named setName None of this may seem all that amazing, but you have to consider what's going on under the hood. The functions get_class, gettype, and method_exists are all *examining* a variable to get information about the variable. The application is *reflecting* on itself to get information about... itself. Now we get a bit more complicated. Lets look at [ReflectionClass](http://php.net/class.reflectionclass), which provides much of the same functionality we've already covered, and much more. Lets rewrite our get_class and method_exists code using ReflectionClass: $p = new Person(); $pr = new ReflectionClass($p); echo "The class name of p is " . $pr-&gt;getName(); The output is: The class name of p is Person And our method_exists example: $p = new Person(); $pr = new ReflectionClass($p); if ($pr-&gt;hasMethod("setName")) { echo "The p instance has a method named setName"; } else { echo "The p instance does not have a method named setName"; } The output is: The p instance has a method named setName Again, this may not seem all that interesting. In fact, the get_class and method_exists examples used less code! And that's true, but the ReflectionClass offers dozens of methods for reflecting on an object (Or class name). For example, suppose we wanted to get a list of all the default properties in the Person class: $pr = new ReflectionClass("Person"); $properties = $pr-&gt;getProperties(); foreach($properties as $name =&gt; $value) { "The value of '$name' is '$value'"; } The output is: The value of 'name' is 'Joe' The value of 'age' is '25' So far the examples have shown how to use reflection to get information about an object or class name, but we can also use reflection to execute code at runtime. For example, the following two examples do the exact same thing: $p = new Person("Bob", 35); And: $pr = new ReflectionClass("Person"); $p = $pr-&gt;newInstance("Bob", 35); Both code examples create a new instance of the Person class stored in the $p variable. You may be wondering why you would ever use the second code example. One possibility is a plugin system. So lets say your application has a plugin system, and the names of the plugins to load are stored in an XML file somewhere, and each plugin name is the name of a class. Like this: &lt;?xml version="1.0"?&gt; &lt;plugins&gt; &lt;plugin&gt;Person&lt;/plugin&gt; &lt;plugin&gt;Dog&lt;/plugin&gt; &lt;/plugins&gt; You have a function called getClassNamesFromXmlFile that returns an array of class names from the XML file. You use that array to create a new instance of each of the plugins. $xml_class_names = getClassNamesFromXmlFile(); $plugins = array(); foreach($xml_class_names as $class_name) { $re = new ReflectionClass($class_name); $plugins[] = $re-&gt;newInstance(); } The $plugins array will contain an instance of the Person class, and an instance of the Dog class. I suggest looking through all the documentation on the [ReflectionClass](http://php.net/class.reflectionclass) class, and look at the user comments for each method to figure out how to use the methods, and why you might use them.
Keep in mind that your web hosting is entirely contained on 1 single computer in a data centre. If that computer fails you will lose all of your data, unless there is a separate backup. Hostgator is notorious for not preserving their customer's data. Whether or not you want to roll the dice on the quality of your server is up to you. Either way, waiting longer means your server hardware is getting older. I had my server for 3 years and a bit when it disappeared.
Clearer now! :) Like k3n and you have noticed, I don't do much UT nor CC, I'm guessing I should be...
Yes but this is different from the PHP engine examining the structure of your application. It is also different from you, the developer, knowing your application's structure. With Reflection, your application is reflecting upon *itself*, finding out information that you, the developer, may not have known at the time of development. Think of it along the lines of making a library for other people to use. You aren't sure how the consumers of your library will build their application, but you can use Reflection to gain that information. Back to the Doctrine example. With Doctrine (or any ORM really) you make classes that essentially represent database tables. For each property defined on a class, a corresponding column is created in the database table. Not only does Doctrine use Reflection to look at what properties you have defined, but it also uses Reflection to access the values being stored in each property so it can write them to the database.
Only place I've seen it used is for a base plugin class for WordPress. It uses Reflection to automatically add action and filter hooks based on the name of the functions in the subclass. https://gist.github.com/1626492
I think he means that if you're a true newbie, you won't be able to process what most of the things you see in the backend of a framework mean. It will make the whole thing seem more intimidating than it actually is.
well, integration leaps to mind. 1. management at your company buys some other company's ip 'asset' and demands you shoe-horn it into your existing deployment. 2. you're tasked with building a web front end for various different pos or inventory management systems that run on different dbs. i did both these things in the last three years.
Like monk_e_boy said, inheritance acts as vertical composition, while traits allow for horizontal composition. Multiple inheritance suffers from [the diamond problem](http://en.wikipedia.org/wiki/Diamond_problem) 
i used to work in the web hosting industry in houston, tx (where they have an office) and everyone that worked there hated working there that i knew. supposedly management was insane.
Very thorough introduction. Well done.
Well yes of course. I was just saying that from my experience, Doctrine without caching will add at least .5-.8s to any page that is using it. 
That's what I'm doing now, and I completely agree with you that after playing around with command line for the last ~2 hours, I definitely want to just do everything via command line. The only problem I'm having seems to be connecting my domain properly to the linode hosting. I already changed the A record, but I seem not to have apache configured properly, so the default Apache test page loads whenever I try to go to my web site. I'll send you a PM now.
Post snippets of code from whatever you've been working on that day, especially something you've had to look up. It not only builds up a cache of code for yourself, but chances there's someone out there who's looking for the same thing. It's also a means of code review and a learning platform for yourself because you'll find people will come and comment on how to make it more efficient or how they modified it for a different purpose. This can then lead to you possibly finding an unsolved problem or just provide you inspiration to write some utility class or library that you can publish on Github. You'll end up with what's essentially a code journal which you can then reference yourself and something that'll hopefully benefit others too - even trivial code helps, there's plenty of beginners out there. It's a lot easier to blog regularly about instead long winded posts that you'll either get bored of 
Funny thing is I just pushed out this project a couple weeks ago: https://github.com/armyofbees/drone Essentially does the same thing. I've run versions of it for months at a time without memory leaks. Works great!
&gt;i did both these things in the last three years. And these required you to [join](http://en.wikipedia.org/wiki/Join_%28SQL%29) records from two different DBMSs? 
You're right, they are not zombies, they are orphans. Orphan processes get adopted by init.
I bet you did not take a look at the RedBeanPHP codebase, it has been structured carefully; see Architecture (http://www.redbeanphp.com/manual/architecture) it makes use of best practices and design patterns. The difference is that RedBeanPHP offers a separate solutions (easily upgradable) for different stages of software development. It offers fast-paced solutions for young projects and very OO solutions for large projects. This allows projects to grow. Yes it's nonsense to say 'it is only one line of code'. However putting everything into one file (compiling it as I would say) has some advantages: - One file cannot have path-related issues - You don't need a loader - Easy to copy and move around in your project While most of these advantages may appear rather 'stupid' or 'only make sense to n00bs' I believe all these little things help to get you started faster. That's why I used static methods instead of an instance (this makes it possible to omit the 'new' keyword). Also I want RedBeanPHP to be accessible from anywhere, that's why I did not include a namespace by default (http://www.redbeanphp.com/extra/php_5_3_namespaces). I literally measured the time needed to setup a simple example program and RedBeanPHP has been optimized to reach the fastest setup times possible (at least I tried). That's also why the R-class is just one character (faster to type... just like the $ in jQuery). That's why R::setup() creates an SQLite database in /tmp. All this has been done to reduce the initial prototype development time. The problem is that most of the time, ORM projects focus on either very big projects and sometimes on very small ones. I tried to develop an ORM tool that can evolve together with your project. That is the core philosophy of RedBeanPHP and every line of code I write for the RedBeanPHP project and every line of code I merge into the project should reflect that philosophy. 
You mean it is like http://codereview.stackexchange.com/ , but without the users.
they certainly would have been easier if i'd known i could have!
Also known as: Things you shouldn't do in PHP, volume 1.
Yes, but just because you can do something doesn't mean you should. PHP wasn't designed to run as a daemon, and as such there are a lot of things you have to be careful of. Memory leaks are particularly problematic, and worse, they are not always under the user's control.
You should add a comment for: pcntl_signal(SIGCHLD, SIG_IGN); Explaining what that does: Ignores sigchild signals so a finished child process won't turn into a zombie.
i would also be interested in this. currently paying $20/mo for a reseller account at innohosting.com
 This is almost always "not-a-good-idea". If you want to do work in the background, there are far better ways (php-resque, gearman, rabbitmq). If you want to truly daemonize, there are far better tools for the job (node, c, java, scala).
I knew that these kinds of comments would appear here. And I know that PHP wasn't designed to run daemons as well, but why should it be a bad idea to use daemons written in PHP for small tasks? I didn't write "go ahead and implement a preforking web server that replaces Apache or nginx or whatever". It's meant to be a teaching example! That's the part of the PHP community (or just the haters?) that I don't like, you just say don't do it, but how should this language ever move forward if everyone just says "yeah it's there but don't even consider to use it"??
^^ this Here is a tutorial: http://www.jquery4u.com/json/ajaxjquery-getjson-simple/
How simple is it to create an object in PHP? Is it as simple as $myObj = {}; Is there a tutorial for objects in PHP that you would recommend?
Happens in business situations all the time. Department A uses Oracle, Department B uses MSSQL, and the head office wants reports integrating live data from both.
I appreciate your willingness to teach others - I really do. However, taking novices and putting the idea in their head that "php does everything, don't bother to use anything else" is bad. I upvoted your article because it does demonstrate something educational, however I am still compelled to warn readers against seriously using something like it in php. When approaching a task one should always consider what the best tool for the job is. Unfortunately many beginning php programmers don't know any other tools so they grab whatever they can. We would be doing them a disservice by *not* telling them that php is the wrong tool for this job.
PHP is not event driven and is designed for webpages. If you want it to run an endless loop and suck up the CPU go ahead - no ones going to stop you. That doesn't mean its the right thing to do. PHP is designed to make a web page as fast as possible with little regard to memory management since it can unallocate everything once it displays the webpage. It has no concept of sitting idle waiting for something to happen. Yes you can use sleep() but then it is just like a cron job.
It doesn't ever come up alright! But when it does... ;P
I have been programming PHP for 11 years and after numerous attempts to achieve this sort of thing, have come to the conclusion that it just should not be attempted in PHP. PHP is not built for long-running scripts. You will encounter problems such as the PHP process accumulating memory over time until it hits its memory limit and crashes - there is no way of capturing and handling that error condition. Even when the garbage collection does work, you need to be careful about arrays and objects which are allocated but never go out of scope so are never freed. It's also doesn't really give you nice tools where you can simply sleep while you wait for input like a more event-driven language/framework would. Running in a loop or trying to "background" itself is inefficient and difficult/clumsy. Write a daemon in something else and communicate with it from your PHP script if you have to. Alternatively, do you really need a daemon? Would just doing something at irregular (or scheduled) intervals suffice? Most of the things over the years that I have thought I needed a daemon for can be done in small pieces on a schedule or just as a cleanup step done in the course of running a script.
Yeah I've got it working now. Thanks.
threading is a big one.
Wow, one comment and you've abandoned cPanel? I need to go into sales..
I don't think it's compiled-vs-interpreted. Node.js is interpreted and it is built to run like a daemon because it is so event-driven. It's that PHP isn't really built to be able to "terminate and stay resident" - ie go to a deep sleep until a certain event or input triggers it to spring into action. You can try to achieve this, but it's clumsy and you have a constant dirty feeling where you feel like you are hacking it into something grotesque. PHP is built to work continuously until it comes to an end, then exit. It can wait for input synchronously. There isn't anything asynchronous about it though.
I am fine with this line of reasoning so long as you are consistent about your sentiment that tool use should be restricted to its original design purpose and no more. Now, you are using the web to exchange nuclear research information with your Swedish colleagues, yes?
Welcome to the Maslow Engineering School, here's your hammer.
The only place in which ive created a random password is in password retrieval email. A pass is generated, person logs in, then asked to change pass on login. Random Password is discarded after that. New pass is encrypted with token, salt and userid. Simple password, you could use sha1, md5 or other hashing function. static public function createRandPassword($length){ return substr(md5(uniqid(rand())),0,$length); }
I think the hate is that you are teaching to use PHP for something it really wasn't designed for. Though I guess if it works without horrendous leaks, that's great. 
PHP has a very solid extension for libevent that works perfectly. http://php.net/manual/en/book.libevent.php
I hear ya -- maybe my use cases have been so minor that I just haven't run into the issues everyone talks about. Usually it's just check directory for new files, process what you find, sleep, repeat. For something like that am I really going to benefit from using another language? 
you dont need smarty to run templates, build a simple class that searches and replaces from an array into a known character set. ie array("outTITLE" =&gt; "this is a title"); parse the array into your text with known chars in my case { and } &lt;div&gt;{outTITLE}&lt;/div&gt; becomes &lt;div&gt;this is a title&lt;/div&gt; you DO NOT need a templating engine to run a few simple functions to do this for you. Also speed is important on a busy site, loading a layer ontop of a layer to do this takes processing time and power. This is one reason i have stayed away from frameworks, simplified code, streamlined and specific to its task shows greater speed and delivery to browser. Frameworks are just extra things to load. And when your site gets large, with many visitors and db millions of rows, the less overhead the better.
try node.js - all the stuff PHP is not made for I started using node.js - it's fast and with cluster lib and forever also reliable. edit: it also takes you just a day to grasp how it works because you prob. already know JavaScript. also dont let the callback stuff intimidate you, other people had problems with it too and wrote easy workarounds like step.js or express and connect. nodejs devs are in general all super nice, irc, and there are a shit ton of libs now on github or directly over npm. I'm a 100% PHP guy but PHP isn't always the best solution. to see how easy it is take a look at now.js ;)
If you want to fully decouple yourself from the database, then you should be using stored procedures. This way, you can still fully take advantage of the features of a database, and tweak your queries based on the strengths and weaknesses of that database.
Thanks for this!
omg, I properly hate php as much as the next cool guy but ffs: 54054 hrtime 2011 ? 00:01:02 /usr/bin/php /var/www/x.y.co/prod/web/current/system/console/biproc.php -n bi01 This is one I picked randomly and not the longest running one - running since 2011, not chewing through memory, not chewing CPU, happily processing 1000s of transactions per day, no special voodoo for daemonizing. The whole "this language is not special enough to do X" is silly. I had some perl daemons that ran the EOD processing for trades for the high net worth client division at a major broker - ran fine for years. ugh.
Note: this isn't a general purpose filtering library, just for turning submitted HTML into safe HTML. If you're working with non-HTML data, you'll want something different.
Yeah, I should have been more specific, sorry. I meant more like, how should I deal with POST data in a more parsing them with my framework type thing. Kinda like CI's input class? Things like global filtering, etc.
why not? a lot of systems have common customer IDs (or telephone numbers) or part IDs, or URLs. So long as you, the human know that the columns are globally unique doing a JOIN isn't a problem.
never lol
I do it in the following way: namespace Security; interface Validator { /** * Checks whether the given input is valid * * @param mixed $input * @return boolean */ public function isValid($input); } And my validation classes implements the above interface. For instance, I could do: $val = new Security\Validator\Between(5, 10); if ($val-&gt;isValid(7)) { //do stuff } and if I wanted to chain multiple input validators, I could do: $chain = new Security\Validator\Chain(); $chain-&gt;addValidators(array( //Validators here )); if ($chain-&gt;isValid($input)) { //do stuff } etc.
Well, the problem is that you cannot perform a JOIN operation between two DBMSs, so you would have to handle that in PHP. This is **not** about joining data from two databases, this is about joining data from two database *management systems*.
Neat! Looks pretty awesome, cheers
More than a day and no relevant comments at all. For justice I must now go to phpclasses.org :)
Damn, I didn't know you could do this with straight SQL!
Oh please... just shut up...
touchy-feely
Yes, that happens. Customer billing is in database A, trouble tickets are in database B. Which customers are creating the highest support costs proportional to their revenue?
You lost me at throwing and rethrowing. What does that even mean? Say my goal is to catch an exception, log it to the database and display an error message to the user, how do I do that? And why would I need to throw/rethrow it?
Take a look at Inspekt
I remember clearly the day I first ever "got" exceptions and I remember thinking "oh is that all?". It was one of those head-slap moments where everything falls into place and you suddenly realise it is simple and makes perfect sense. Sometimes you see people talking about them as if they are the second coming of Christ but in reality, all they are is a very handy way of being able to handle errors at a range of different levels and you shouldn't feel intimidated. PHP already had an error handling mechanism, and now that they have exceptions too, you may find that you'll encounter both types. Most of the ones that the core of PHP throws are the old-style PHP errors, not "exception" style errors. But what we want to talk about is generating these errors ourselves, and for that we can choose either, but exceptions are better. Basically, what you do when you want to check for an error condition is have an if statement or something, and if the condition is false then show an error to the user (or just quit, etc). What if you wrote a nice function to handle errors anywhere in your code, and when you wanted to handle an error you just called that function? if ($input !== $good) { myerrorhandler("Date not valid"); } That is a really basic way of dealing with an error. You're handing off control to a function you've written once, that can display any error you like. You can do the same thing with an exception instead: if ($input !== $good) { throw new Exception("Date not valid"); } Pretty much the same thing. What happens when you *throw* an exception is that your program now has to find some type of error handler to *catch* it. However, with exceptions, having such an "catcher" is entirely optional. If you have not defined code to catch this exception anywhere, then it will be caught by PHP's default exception handler. This is just a function which prints out the error message and quits, much like any PHP error. You can define a catcher like this: try { doSomethingWhichMightThrowAnException(); } catch (Exception $e) { // handle the exception } Your "catch" block has now taken over from PHP's own exception handler, for all the code in the "try" block. So this is the "exceptions" way of defining your own function to handle errors: you have defined a "catch" block which handles errors. The "try" block is where you want to detect the exception, and the "catch" block is what you want to do when you detect it. The code in the catch block only runs in response to an exception occurring somewhere in the try block. Note that the remaining code in the try block is not run once an exception occurs; execution of code is passed straight to the catch block. The catch block here has access to $e, an object which contains information about which error occurred which may include an error message and error code. Why use a catch block instead of just a normal function? The power behind exceptions is that try/catch blocks can *nest inside other try blocks*. When an exception occurs (is thrown), the catch block corresponding to the innermost try block surrounding it is the one that will be given the task of handling that exception. It therefore has a cascading effect, allowing you to have different levels of exception handling - a default, catch-all if you will, around a large chunk of code, and smaller, more specific try/catch blocks just around certain smaller parts of that code which deal with more specific problems. You wouldn't tend to have multiple nested catch blocks all in one function. The great thing about them is they can operate between levels of function calls, so in the caller function you can have a catch block, then in a function called by that you can have another, and the function called by that can have another - and then the code that actually may generate the exception may be nested even deeper within functions! So your exception handling "cascade" can escape out of the current function into a catch block however many levels of function calls outside of that. Then, if you have written a catch block which can "recover from" the error and continue on with program execution, execution will resume from right after you've placed that catch block. This is what exceptions are. They are a flexible way of handling errors at multiple levels of your program, where if you don't set up a specific way of coping with an error, the error will eventually "cascade down" and be caught by a more generic error handling mechanism. If a particular part of your code is not covered by any catch block, it'll always be handled by PHP's default exception handler (you can even override PHP's default exception handler if you like), which prints out the error message and quits. The default exception handler is the last resort, for when you cannot "recover" from the error (for example, by fixing the problem, displaying the error in the UI, etc). It is known as an "uncaught exception" which is a term which you may be familiar with from a lot of software bugs. It means an exception was generated but they didn't do anything to handle or recover from it apart from let it fall through to the default handler. One more benefit of exceptions is that they make it pretty easy to add more levels of error handling later, without having to go all the way back into the code which initially detected the error condition and threw the exception. So if you have an exception that is unhandled and falling through to PHP's default exception handler, you can easily later add a try/catch block around part of your code later if you want an exception in just that part of your code to be handled a different way. There is a lot more that exceptions can do, and I have only covered the very basics here. But I don't want to scare you into thinking exceptions are more complicated than they are. You don't need to use them for anything more fancy than I've already described if you don't want to, and you'll still benefit from them. To give you a rough idea of what else you can do with them - you can define different "classes" of exception and use try/catch blocks designed onto to handle certain classes of exception. There is also a different type of block called a "finally" block which can run clean-up code regardless of at what level the exception was handled.
A kinda simple example of when you would want to catch and rethrow an exception is logging the result of a 3rd party library. In your code (say in a service class) you call the 3rd party library and it throws an exception (the call has failed). Rather than having your entire app fall-over you would wish to catch that error. So you catch it, deal with the fact the library call failed (clean up files, close handles etc) and then rethrow the error. Now since you are presenting information back to the user (eg it's a front end website) you want to present something useful to the user like an 'failed, please retry' you catch that same error (now it's been rethrown) in your controller and display a pretty error message. But being someone who likes to keep things running smoothly you want to ensure it doesn't keep happening so you need someway to keep track of these things. Logging! You could put another catch in your code to catch all exceptions, log it to a file and then rethrow the same error again for your pretty error message display code to pick it up higher up.
you've been reading through some scary code then. Granted, namespaces are only a year or two old, so not everyone has caught on, but most people, if they're doing OO, should be using interfaces. Interfaces allow for the code to be more modular. Most connections, and type hinting, should be done with interfaces rather than actual classes. You never know when you'll want something to interact the same way, but function completely differently. Tear apart some of the new frameworks and see how they tick. You'll get good ideas on just how to structure your code alone.
rethrowing is throwing again when an exception is caught. often it's used so that your exceptions can "bubble up" through your code to an exception handler class.
It's well known English is a terribly structured, bastardized language but you don't see everyone in the world learning Chinese.
Gotcha, I wasn't aware of the whole interface thing (I've been using namespaces in classes such Security_Validator) Now I know the difference, thanks!
What kind of exceptions does PHP core throw? Because I tried redefining a constant in a `try` block, but it only gave me a "**Notice**." Then I tried `mysql_connect('nowhere', 'foo', 'bar');` and it gave a **Warning**. Neither one of those things triggered the code in my `catch` block.
In fact, I may be wrong on that count, I've been out of PHP for a while. I seem to remember a framework method that converted all errors into exceptions, so by default, perhaps PHP core doesn't throw exceptions after all.
Now, how many years until all the major shared hosting providers upgrade?
Well, whatever. I was trying to understand the use case and possibly bring that info with me when I get around to working on my ORM, but people apparently do not appreciate my inquiries and are rewarding them with downvotes, so I'm just going to stop this conversation here. Have a good day, sir. 
almost none. the base php engine uses standard errors for everything. The PDO extension can be configured to throw exceptions. The SOAP extension throws exceptions. There's one or two more, I think, but that's it. Everything else in PHP is going to be an error of some sort. You can handle those with custom error handlers: http://php.net/manual/en/function.set-error-handler.php FWIW, use PDO instead of native mysql_connect stuff. 
We are not using it simply because it's not enabled per default, and thus not "platform independent". By making it a core feature we can now always use it, no matter what¹, and it is a great horizontal space saver! (¹ if everybody is using PHP &gt;=5.4!) EDIT: I think I understood you now; short_open_tag also affects just &amp;lt;? instead of &amp;lt;?php, whereas &amp;lt;?= will always be enabled.
Might check your [information](http://markmail.org/message/6x7dphz6vclhrs4q) and the [RFC](https://wiki.php.net/rfc/shortags).
People should vote with their wallets, traits and short array syntax alone are worth the switch.
Don't upgrade. Without BC breaks the language will never progress. Create new sites with the new version (if you want to) and leave old sites on previous versions. 5.2 and 5.3 will/do have LTS. The deprecation of features was because of bad design, security issues, or lead developers to bad habits that caused security issues.
I haven't downvoted you. I'm trying to have a conversation.
And how exactly am I supposed to tell each website which version of PHP it is supposed to use? I suppose I might be able to install two versions at the same time, I just really don't see how that's going to work. I'm all for security fixes and such. What really gets me is when they deprecate a command, then add a new command that performs exactly the same function, with exactly the same parameters... Would it really be so difficult to just use the same command name so users got the benefits of the patches without the hassle of having to rewrite their code?
Which command have the removed and replaced with the exact same functionality? Many hosting companies do what you suggested; they install multiple versions of PHP and in the .htaccess file for each website you can select the version of PHP to run on that site. It's relatively painless. 
I didn't say you did. 
Was just typing a reply and realized you said exactly the same thing. Just one extra bit: I can do everything I need via command line, but I hate having to remember the exact process to accomplish things. Sometimes I have to glean man pages or do a quick Google search to remember specifics. Virtualmin's interface is easy to figure out when I need to perform a task I don't often do.
How is that decoupling from the database? You are moving business logic into the database. Not only that, but you are not moving ALL of your business logic to the database, only part of it. Now you have to maintain two sets of your logic: your stored procedures for querying and updating data and your application logic for handling validation and implementing other rules that your business requires. Granted, in terms of sheer performance, your solution will greatly surpass mine.
Maybe you won't know which version it is supposed to use but you can get the version of the current PHP install that the application works with. With that in hand you can check [here](http://us2.php.net/manual/en/migration54.php) for a comprehensive list of everything that has changed from version to version.
There's always something. Our web host silently upgraded from 5.2 to 5.3 because they thought it was safe judging by the release notes, but the new version removed cookies from the $_REQUEST superglobal by default. The change was not listed in the release notes, or in the migration guide. They just removed it without notice. I can't pass all the blame because better communication and testing would have prevented it, but we lost a day's worth of orders (thousands of dollars) with that upgrade. One undocumented change breaking one line of code.
I hope that you took the opportunity to improve your code. $_REQUEST variable order is determined by the [variables-order](http://www.php.net/manual/en/ini.core.php#ini.variables-order) INI setting. If you don't have full control over your php.ini, then you can't rely on that order being set as you expect. You can do a check in your code with [ini_get](http://sg2.php.net/ini_get) to ensure the correct order and rebuild $_REQUEST as you wish. But overall,it's bad form to use $_REQUEST at all... you should explicitly know where the information is coming from, whether it's _GET, _POST, or _COOKIE. But I'll give the benefit of the doubt that there was a compelling reason in your case.
Your host should not be silently upgrading to major versions of PHP -- they don't change the second version number unless the change is significant. Here is the change log: http://www.php.net/ChangeLog-5.php#5.3.0 The change log even describes the issue you're talking about -- the new configuration setting is request_order and by default does not include cookies. It is even documented in the manual! If you use the best practices you generally don't have to worry about breaking changes. (Accessing cookies from $_REQUEST is not the best plan). I ran a multi-thousand line project from 5.2 to 5.3 without a single breakage. This is all testing, we haven't upgraded our production server yet. You can't blame PHP for this -- your host is stupid and you didn't test on PHP 5.3 well ahead of time. 
So you are not using mod_rewrite either, because the target server might not have it enabled? What about PDO, and mysqli?
I did go back and replace $_REQUEST with $_POST, after realizing the XSS security risk of treating GET variables like POST variables.
Nice article, I definitely need to learn more about the streams API.
You should always use if ($p instanceof Person) in 2012, however.
WOOOOSSHHH!!! I think he was making a joke based on your username. You and the other -1 voters are just clueless. 
There are a number of things I left out for the demonstration purposes. That was one of them. The other being that you don't need to use reflection at all to create an instance of a class, when the class name is stored in a variable. Eg the following code would have worked just fine: foreach($xml_class_names as $class_name) { $plugins[] = new $class_name(); } 
You are correct and I'm going to leave my comment unedited out of shame.
A library is a reasonable dependency; a lone configuration setting is not.
It doesn't have to run in an endless loop. Depending on what exactly you're writing the daemon for, it supports the 'select' syscall, standard unix signals, blocking reads, etc.
This is a fair approach, and one which I've used as a basis for a PHP function dependency checker. You can find more details here: http://www.glenscott.co.uk/blog/2012/03/01/finding-function-dependencies-in-your-php-applications/ 
Oh wow. I don't get why they would keep that alive at all. Short tags just encourage the CGI mentality that plagues PHP. The only good reason I can think of is templates in straight PHP. Otherwise the coder is probably fucking up if there's more than one PHP tag per file.
I've said for a long time that PHP should have something like Python's 2to3 to automatically fix trivial changes.
Off the top of my head, I believe split/explode was one example. I wasn't aware I could make that specification in the .htaccess file. Thanks for the tip!
If you generated a lot of traffic you would likely run out of your "free for the month" limit and begin to accrue charges. There are also some services that have no freebies. Actually I don't it requires a lot of traffic to be charged. I have a QA server that gets pinged by clients once in awhile and so far things have remained free but if one actually got serious about checking out my updates that might change.
CSV = Comma Separate Value != xls / Excel's format I'm not sure what you're trying to do, but they're different formats, so you need to change MORE thatn just the header/extension.
You need to think more about what will happen with the user supplied data - i.e. will it be rendered back in HTML, or shoved into a database. Sometimes you need to accept HTML or &lt; &gt;'s You might find this relevant - http://framework.zend.com/wiki/display/ZFDEV2/RFC+-+Escaper+Class
Huh? If you had to upgrade heaps, then it wasn't laid down very well to begin with. We upgraded an entire home-brew CMS (that was first released on PHP 5.0) through each minor revision with only a couple of days' work. Any major changes in versions revolved around removing "bad idea" code. Like garbage in the $_REQUEST var, or turning on register_globals.
I use a VPS that costs me only marginally more than shared hosting. I get to control every hearbeat on that server. Edit: I've clearly clicked the wrong "reply" button.
Or get a [BuyVM](http://buyvm.net) for $15/year.
You should do a check on the generated string to ensure it meets your security requirements before allowing it to be submitted. It's extremely unlikely, but entirely possible that a user of this function will receive a "random" password of all 0's, 12345, etc. This "lucky" user might roll the dice $length times to receive a weak password. 
 &gt; ssh -i pem/asdf.pem ubuntu@example.com &gt; &gt; sudo -i &gt; &gt; apt-get update &gt; &gt; apt-get upgrade &gt; &gt; apt-install php5 php5-fpm nginx mysql vsftpd &gt; &gt; vi /etc/nginx/nginx.conf &gt; &gt;... Paste in some ready made server config &gt; &gt; service nginx restart &gt; service php5-fpm restart ... profit? 
It IS no big deal. It's not very hard, especially once you learn some basic command line tools and commands. If you haven't gotten comfortable enough after years of "slowly" learning linux to roll your own server, you are doing it wrong... most likely, you suck at using google to search for things. Do yourself a favor. Create an Amazon AWS account. Download putty (if windows) or use terminal if OSX. Log in to AWS, go to the EC2 Tab, select "Create Key Pair". Download the private pem key and save it somewhere easily accessible. Go to "security groups" and open up port 20,21 and 80 in your default group (this is your firewall) Go to http://alestic.com/ and pick one of the more recent 32 bit EBS backed micro instances. If you are logged into AWS, it will take you to the control panel. Follow the steps to set up the instance. Once the instance is up and running, you need to log into the server. Copy the "public dns" from the instance information panel that shows up when it starts up. To log in: Terminal: type in "ssh -i &lt;your pem key location&gt; ubuntu@&lt;your-server-public-dns&gt;" Putty: First download PPK converter (google it). Use this to convert your .pem key to a .ppk key (putty uses .ppk instead of .pem files). then, type in ubuntu@&lt;your-server-public-dns&gt; as the url/location of your server. Under "auth" and "key" in the left hand panel, select the .ppk key, click connect. BAM YOU ARE IN TO YOUR SERVER. Mysql/PHP guy? Then do the following commands: &gt; sudo -i &gt; &gt; apt-get update &gt; &gt; apt-get upgrade &gt; &gt; apt-get install php5 php5-fpm nginx vsftpd mysql-server mysql &gt; &gt; mkdir /var/www/site1 (your new site location) &gt; &gt; vi /etc/nginx/nginx.conf (you will need to read up a bit on nginx, point the server to your web folder) &gt; &gt; useradd someusername -d /var/www &gt; &gt; passwd someusername (set the password) Thats pretty much it. From there, read up a bit on VSFTPD, and how to use mysql in command line mode. PHP runs under FPM, which takes a few minutes to set up the first time, however once you set it up, save your nginx config files, and you can just paste them in if you start up another server later on. PM me if you have questions. I HIGHLY RECOMMEND YOU LEARN LINUX FOR YOUR SAKE AND OTHERS.
It's actually super clean, well thought out, and thoroughly commented. Most of my efforts these past few years have been dedicated to first learning then perfecting my programming ability. Like I said, I have been very slowly learning Linux. It started with installing probably ~10 distros when I was 7-8 years old. Did I ever love Mandriva, it was the Ubuntu of its day. I found Linux to be interesting but I knew nothing about CLI and eventually gave up in favor of gaming on Windows. Years later I started dabbling again, replacing my router with a Linux server that I never got quite perfected due to driver issues. Then I put Ubuntu on my netbook and spare desktop. All the while playing around with the intricacies of my dd-wrt router, installing various packages and running custom configs. Then I dabbled with my touchpad, actually being blown away by how much customizing you could do with the Debian repository. I installed samba on it, got ubuntu running, etc. And of course playing with Android ROMs and kernels the past few years has helped my get a much better understanding of Linux. But, do I feel comfortable staking my business on that knowledge? Absolutely not. I probably would in 3 months more time, if I made learning Linux my sole hobby. But, that's not the point. The point is, all that work was summed up in C250585s remark "Learn some basic Linux". Evidently basic Linux to him is being a Linux SA... and it's knowledge that you can pick up in no time. That, to me, was funny.
y2k_compliance ini option. (Kalle) Huh?
That is very generous of you to offer assistance. I have actually done all of those things before, sir. I went into a little more detail [here](http://www.reddit.com/r/PHP/comments/qcx92/php_54_released_get_it_while_its_hot/c3wr3yu). Evidently your company has very different quality and stability expectations than mine. I would expect to have the knowledge of an entry level Linux Systems Admin before basing my entire company and her investments on a Linux setup I compiled or even configured. For example, you say "Read up on nginx". Of course I would have to read the manual, then google common issues, then read tutorials on people setting up. Then I would want to run that setup for a couple months to make sure it worked. And I would need to do this for all the technologies implemented. Following a Linux tutorial is one thing, understanding Linux is entirely another.
I have to disagree with you. I am currently running, in production, a console application powered only by php daemons and mysql. These systems are critical and the longest running one was online nearly a year before a software upgrade. I have about 10-12 daemon processes running on these servers (per server). PHP have actually been stabler than Java, which I originally wanted to use. I will agree that being able to control and fork child process took some effort but once the initial framework is solid, you will have little issues. This is running on php 5.2.4 btw.
js
How would you do it in javascript? Link a link to the page please?
Yeah, it's cool not backing up or monitoring for uptime or having redundancy. Should be pretty legit for production, business-critical applications.
Worst ideas ever. Good riddance.
iostream3, you deserve the early bird reward for that one!
Fair enough. People make sysadmins out to be massive scary black boxes. The reality is that shared hosting is the real scary black box. Of course you wouldnt run an enterprise level application off something you threw together based on some entry level linux knowledge. But looking to host some simple sites or some simple applications? Running a custom linux box is liberating and rewarding, and provides tremendous flexibility to go beyond the basic crappy, outdated lamp stack your shared hosting provider is going to offer you.
Yes. Yii does that. It's built on top of PDO so you don't even have to use a traditional db. http://www.yiiframework.com/doc/guide/1.1/en/database.dao
nothing then
I don't think it makes sense to take responsibility for clients with shitty hosting. If they are on some backwards mess of a hosting setup, I insist that they move. Are you **sure** they're not willing to switch? If you make a compelling case, they should be. I've never had anyone refuse.
Activating this option summons a roomful of gray-suited consultants who go around your facility putting "Y2K compliant!" stickers on all the toasters and paper shredders, and sending your code off to Pakistan to have bugs introduced into every file that contains a date() call.
Losing a bunch of customers is a worse case scenario. But, I have had occasional outtages with some of the VPS hosts I have worked with, and my clients weren't happy. So I strive for 100% uptime, and setting up my own host makes me worry that I would be taking a step back in stability. Don't get me wrong though, I am just about to the point where I am going to have Linode host my own personal sites. I won't put clients on it for a while, especially since some of their current software requires Apache.
Sounds like you're looking for a REST client like [PHP ActiveResource](http://github.com/lux/phpactiveresource) combined with a lightweight framework.
Questions like this confuse me. Why does it matter what framework you use? Just write your models to be be storage agnostic and use a REST client to populate them. I use Zend Framework 1.x to do this currently. I have some models that use database storage, a couple that use memcached, and one that uses a RESTful resource. Yes, Zend Framework supports both RESTful routing and the means to consume RESTful resources. I guess I don't understand why so many developers equate models with a database layer and insist on tying them together.
I like www.wiredtree.com
Just to clarify this: tagging usually takes place the day before the release is announced so there's time for Windows builds to be generated and final testing. It can look a bit ragged because the mirrors update on a pretty erratic schedule, too, including for news articles.
&gt; The register_globals and register_long_arrays ini directives have been removed. Looks like my old employer will never upgrade again. :(
Now I can't run OSCommerce! Oh, the humanity!
I could do that, but I don't touch a database at all. I was looking for something that was already baked in.
As a person building a HTML5 only site with no filthy XML or add-on template engine, I think short tags are awesome: 1) more readable views/templates 2) less code to type out I couldn't care less about backwards compatibility either as I will be using a VPS where I control the environment.
Btw, this basically means that htmlspecialchars() will default to UTF-8 now. The default_charset directive didn't actually change itself (it still defaults to the empty string). It's a bit tricky ^^
Think I'll wait till 5.4.1 or 5.4.2 till using in Production.
CSV is essentially text with comma separated values, right? You should be able to just manually build that and make it downloadable as a csv file. Making it a real xls is a bit more involved and you might need an external library. You're right if you output csv code but with the xls extension Excel will throw a warning. Try [this guide here](http://www.toosweettobesour.com/2008/10/10/outputting-csv-as-a-downloadable-file-in-php/) it has some extra headers you could try. You're iterating through the results from the stored proc and building the lines manually right?
While CakePHP's models usually use a database table as a [datasource](http://book.cakephp.org/2.0/en/models/datasources.html), there are other datasources [available to use](https://github.com/cakephp/datasources/tree/master/models/datasources), and you are encouraged to write your own if you want to interface with another backend. It's also quite accomodating of [REST](http://book.cakephp.org/2.0/en/development/rest.html).
I don't know MediaTemple so I'm not commenting on them but the bigger the organisation the less time they tend to put into making sure you're ok. The only server I've had owned was a rented one. I had just started a new job and was assessing what I'd let myself in for. I ssh'd into the rented server and noticed it had been compromised. So step 1, download all of our data. Their IDS then went off because of the traffic spike and they turned it off during the download ! So I contacted them and they let me continue. When I finished they re-imaged it, which they charged for ! With the same image ! It had been broken into again by the time I logged back in. I didn't tell them this time but worked out what the problem was (CPanel) and replaced the whole stack. Remote root is pretty rare. And the well trodden stacks such Apache and lighttpd are hard to mess up. Local users are your real danger (as in ssh'd in). You can pick up best practice (certificates all round, etc.) as you go along :) But if you've got enough work already then it is another thing to have to do.
Yeah, but in the last announcement they said "The next release candidate will be released on March 1st." and that's all we knew!
I'd argue that tasks like this as also the perfect opportunity to expand your knowledge and understanding of PHP. You *should* write a daemon in PHP. I do not see any reason why it is a bad tool for these kind of jobs, nor have you given any compelling arguments as to why this is the case, all I am hearing from you is "it feels wrong". &gt; Aside from a tremendous amount of extra overhead Extra overhead compared with what? C? Java? Python? &gt; you're dealing with a garbage collection engine that was not designed for scripts that run indefinitely. This is not an issue I've ever encountered with PHP daemons unless *I* have written bad code (which would cause a problem in any language). I've got several PHP daemons still running with more than 2 years uptime, some of them pretty complex, and they are not using more average memory than when they started. I didn't have to be extra careful to write these or perform any hacks or tricks to keep the memory usage low. &gt; but it will never work as well as it does in other languages. I have seen nothing to indicate this is the case other than vague arguments that could apply to everything ("it'll be faster in C"). If you have any solid technical arguments of *why* you *shouldn't* write a daemon in PHP then I'd be interested to hear them. What you've said so far just sounds ignorant with nothing more to go on than gut feeling and prejudice. Now, I will put forward one drawback of writing daemons in PHP and that's the lack of threads. For some applications I can see this being a deal breaker, and that's fair enough. In practice however, threads bring their own problems and issues and up until this point I have not built an application where the lack of threading could not be mitigated in some other way (nonblocking i/o, worker process pools, etc). This same problem applies to node.js, but few are saying you shouldn't write a daemon in node.js.
&gt; Turning NULL, FALSE, or an empty string into an object by adding a property will now emit an E_WARNING level error, instead of E_STRICT. Oh yes. I chased an error for about 1 1/2 hours last friday because of this. Though I don't know why we don't have strict mode enabled.
Must we have a "what framework should I use?" question *every* day?
I don't know if the *ideas* themselves were that bad, just the implementation sucked. I mean, *in theory* automatically escaping all user-inputted values could work if it did the correct thing for each situation - e.g. an equivalent of `htmlspecialchars` when outputting variables, and `mysql_real_escape_string` when using SQL.
Just to clarify, while I appreciate the suggestions, I'm not asking which framework I should use, I'm asking what would be good to make a personal framework/base, that I can then extend/speed up initial deployment of a web application that I'm tasked to build, while keeping everything formal and maintainable.
No one escapes for SQL anymore. They bind!
When I saw the original post for Codespy, I thought, "Hey, that's pretty clever. What a neat program!" But I couldn't actually think of a use for it. The possible reason is you present a lot of pretty diagrams to demonstrate the app, which makes if feel like a nifty toy.
&gt; Their work may not always scale perfectly, and they might have occasional bugs Was this meant to imply that code in other languages never has any bugs or scalability problems? Otherwise, nice post.
It's the same thing - in essence binding just does the "escaping" for you. Also just to point out, I'm not saying it would be remotely practical to do this auto-escaping/binding, just that the idea itself isn't a bad one.
Could have used something like this last week! I was banging my head about why a query wasn't displaying what I thought it should, only to realize after way too long that the datetime from mysql was not in the format that I was expecting.
By the way, __invoke() is not new in 5.4, it has already been in 5.3 :)
actually if you look how it's done, it's not auto escaping. (unless you emulate prepares which you should turn off). What binding really does is send the query to be compiled on the server first, and then send parameters second. So there is no way that the parameters can be confused with valid SQL syntax (which is sql injection). So technically it doesn't do escaping for you unless you are faking binds.
Edit: Reddit limits comments to 10,000 chars, so this lesson will be broken up into pieces. Ah, good ol' exceptions. I think to understand exceptions, it pays to first look at the ways the PHP community handled errors in the past. We'll do that within the context of a function we're writing called connectToDatabase. So lets look at a few ways we can handle errors from our fictitious function. /** * Connects to the database * * Returns positive integer when there is an error * @return int */ function connectToDatabase() { mysql_connect('localhost', 'username', 'password'); $error_num = mysql_errno(); if ($error_num == 0) { mysql_select_db('my_database'); $error_num = mysql_errno(); } return $error_num; } Using the code: $result = connectToDatabase(); if ($result != 0) { displayErrorMessage(); } The connectToDatabase function will return a number greater than 0 when there was an error connecting to the database. The problem is you have little information on the error itself, which is going to make debugging the function a real pain in the butt. So you rewrite the function to make it easier to debug: /** * Connects to the database * * Returns positive integer when there is an error. A message describing * the error will be assigned to $error_msg. * * @return int */ function connectToDatabase(&amp;$error_msg = null) { mysql_connect('localhost', 'username', 'password'); $error_num = mysql_errno(); if ($error_num == 0) { mysql_select_db('my_database'); $error_num = mysql_errno(); } $error_msg = mysql_error(); return $error_num; } And using the code: $result = connectToDatabase($err); if ($result != 0) { Logger::log($err); displayErrorMessage($err); } This function works the same as the first, but the value of $err gets set to a description of the error. For example, "ER4001 Invalid username/password". So now our function is a bit more debuggable (though you're going to see how exceptions make your code *super* debuggable), and look! We're even logging the error message! So now our function can tell us there was an error, and it can give us a little debugging information, but it's still missing something: the ability to tell us what **type** of error happened. This is important, because your application may need to do one thing for one type of error, and do something completely different for another type of error. So you try writing code like this: $result = connectToDatabase($err); if ($result != 0) { Logger::log($err); if ($err == "ER4001 Invalid username/password") { displayInvalidUnPwMessage(); } else if ($err == "ER4002 Unable to connect to host") { displayBadConnectionMessage(); } else { displayGenericErrorMessage(); } } You will find out real fast how error prone that method can be, if you ever decide to write code like that. Please don't. The database and/or driver may change the error messages at any time, which will break your application. More importantly though is you're forcing the calling code to understand "database logic" by examining the error message. The calling code shouldn't care how a database works, what it's error messages look like, or have any knowledge of how to connect to a database. One solution that promotes lose coupling of your code is the PEAR "is error" model. It essentially works like this: class Error { private $msg; public function __construct($msg) { $this-&gt;msg = $msg; } public function getMessage() { return $this-&gt;msg; } } class UsernamePasswordError extends Error {} class HostConnectError extends Error {} /** * Connects to the database * * Returns true if the connection was successful, or an instance of Error * if there was an error. * * @return bool|Error */ function connectToDatabase() { $error_msg = null; $db = mysql_connect('localhost', 'username', 'password'); if ($db !== false) { $result = mysql_select_db('my_database'); if ($result === false) { $error_msg = mysql_error(); } } else { $error_msg = mysql_error(); } $return = true; if ($error_msg != null) { switch(mysql_errno()) { case 4001: $return = new UsernamePasswordError($error_msg); break; case 4002: $return = new HostConnectError($error_msg); break; default: $return = new Error($error_msg); break; } } return $return; } And using the code: $result = connectToDatabase(); if (!$result) { Logger::log($result-&gt;getMessage()); if ($result instanceof UsernamePasswordError) { displayInvalidUnPwMessage(); } else if ($result instanceof HostConnectError) { displayBadConnectionMessage(); } else { displayGenericErrorMessage(); } } Now we're getting somewhere! Now our function a) Lets us know when there was an error, b) Gives us some debugging information via getMessage(), c) Lets us easily handle different types of errors, and d) Promotes lose coupling by not returning any database specific information. This function isn't that bad, and I suggest using this error checking method if you ever find yourself writing code for PHP 4.x. 
Part 2: Exceptions And now here we are at last. Exceptions. Exceptions offer a few more benefits than other error catching techniques. * They provide an object-oriented interface for dealing with errors. * They provide more advanced debugging features. * The code for trapping exceptions is cleaner than other error checking techniques. * Exceptions can be re-thrown, or left to bubble up. To demonstrate the first point, lets rewrite our connectToDatabase function to throw exceptions. class UsernamePasswordException extends Exception {} class HostConnectException extends Exception {} /** * Connects to the database * * Returns true on success, false on error. * * @return bool */ function connectToDatabase() { $error_msg = null; $db = mysql_connect('localhost', 'username', 'password'); if ($db !== false) { $result = mysql_select_db('my_database'); if ($result === false) { $error_msg = mysql_error(); } } else { $error_msg = mysql_error(); } $return = true; if ($error_msg != null) { $return = false; switch(mysql_errno()) { case 4001: throw new UsernamePasswordException($error_msg); break; case 4002: throw new HostConnectException($error_msg); break; default: throw new Exception($error_msg); break; } } return $return; } At first glance this version of the function looks a lot like the last version, and that's because both versions take an object-oriented approach. However there are some small differences. This version uses classes (UsernamePasswordException &amp; HostConnectException) that inherit from the Exception class. All exceptions **must** extend the Exception class. Secondly instead of returning an instance of either of those classes, we're using the *throw* statement. We'll cover the throw statement in a moment. First lets use the new version of our function, which will show how much cleaner the code is that handles exceptions. try { connectToDatabase(); } catch (UsernamePasswordException $e) { displayInvalidUnPwMessage(); } catch (HostConnectException $e) { displayBadConnectionMessage(); } catch (Exception $e) { displayGenericErrorMessage(); } I'd say this code looks much cleaner than our previous example, which used a bunch of if...then and instanceof statements. Now that you see how exception throwing code is written, and how handling exception code is written, lets talk about what's happening when an exception is "thrown". The syntax for throwing an exception is the following: throw new Exception(); When PHP encounters this statement, it "throws" a new instance of the Exception class. Right now you only need to understand one thing about throwing exceptions: PHP immediately exits our connectToDatabase function *at* the throw statement, and then it executes the code in the *try...catch* statement surrounding the function call. It's important to remember that our function stops running at the throw statement. PHP exits the function at the throw statement. None of the code after the throw statement will ever execute. Get it? It's like the way a fighter pilot ejects from his plane during an emergency. PHP immediately ejects from the function call because of an emergency. It's important to understand that PHP doesn't simply exit our function in the same way it would with a return statement. PHP doesn't exit the function, and continue executing code like nothing happened. No. When you throw an exception, PHP goes into "Oh crap! We're in trouble!" mode, and starts going back over the **call stack** until it finds a catch statement for the exception. Let me demonstrate what I mean with some code: function badFunctionThatThrowsAnException() { echo "Before the exception\n"; throw new Exception("Bad arrrrr!"); echo "After the exception\n"; } try { echo "Before calling the function\n"; badFunctionThatThrowsAnException(); echo "After calling the function\n"; } catch (Exception $e) { echo "An error happened on line " . $e-&gt;getLine() . " with the message '" . $e-&gt;getMessage() . "'"; } Can you guess what the output of this code will be? Before calling the function Before the exception An error happened on line 4 with the message 'Bad arrrrr!' There's a couple important things to notice. The first is the statement *echo "After the exception\n";* is never executed, because PHP ejected from the function at the throw statement. None of the other code in the function gets executed. Second, the statement *echo "After calling the function\n";* is never executed. That's because PHP does not simply exit from the function call, and continue where it left off. No, no. PHP is now in "Oh crap!" mode, and is looking for the code *catch (Exception $e)*. The echo statement after the function call is completely skipped, because PHP jumps straight to the catch statement. Now lets look at the code *(Exception $e)*. What exactly is that doing? What is $e? Well, as I mentioned already, an exception is just an object. It's an instance of the [Exception](http://us3.php.net/class.exception) class. The statement "throw new Exception();" creates a new instance of the Exception class, and "throws" it. The statement *catch (Exception $e)* "catches" the object, and assigns it to the $e variable. The $e variable now contains the object you threw from inside the function. Nifty, right? But is there anything interesting about the Excption class? Well yes, yes there is! Remember how I said exceptions provide advanced debugging features? As you can see from the code above, the class contains the getLine() method, which returns the line where the exception was thrown, and the getMessage() method, which contains the value passed as the first argument to the exception constructor. In this case the string "Bad arrrrr!". It also contains the methods getFile(), which returns the file where the exception was thrown, and the method getTrace(), which returns a stack trace where the exception was thrown. We'll go over stack traces in a moment. Those features alone make exceptions more handy than other error handling methods. Now that you understand what the *catch (Exception $e)* code does, you might be wondering what this code does: try { connectToDatabase(); } catch (UsernamePasswordException $e) { displayInvalidUnPwMessage(); } catch (HostConnectException $e) { displayBadConnectionMessage(); } catch (Exception $e) { displayGenericErrorMessage(); } This is how exceptions let you handle different types of errors, in different ways. When an exception is thrown, PHP will check the *type* of exception thrown, and look for a catch statement matching that type. I'll explain by rewriting our badFunctionThatThrowsAnException function. class MyCustomException extends Exception {} function badFunctionThatThrowsAnException() { echo "Before the exception\n"; throw new MyCustomException("Bad arrrr!"); echo "After the exception\n"; } try { echo "Before calling the function\n"; badFunctionThatThrowsAnException(); echo "After calling the function\n"; } catch (MyCustomException $e) { echo "A custom exception was thrown on line " . $e-&gt;getLine() . " with the message '" . $e-&gt;getMessage() . "'"; } catch (Exception $e) { echo "An error happened on line " . $e-&gt;getLine() . " with the message '" . $e-&gt;getMessage() . "'"; } echo "And we're done!"; The output of this code will be: Before calling the function Before the exception A custom exception was thrown on line 6 with the message 'Bad arrrr!' And we're done! You see, when the function threw an exception, in this case an instance of MyCustomException, PHP started looking for the catch statement *catch (MyCustomException $e)*. It looked for a catch statement that matched the same *type* as the exception thrown. The code *catch (MyCustomException $e)* basically says, "If the *type* of exception thrown is MyCustomException, assign the exception to $e, and execute my code block." PHP will execute the code inside the catch statement for MyCustomException, and then completely exit from the *try...catch* block, and continue executing code like normal. You'll notice the code inside of *catch (Exception $e)* is never executed, and that's because once the code for MyCustomException is executed, the program continues running *after* the try...catch block. Now here's a trick question for you. What do you think the output of this code will be?
Part 5: Conclusion So lets sum up the whole lesson by going back to our connectToDatabase function. class UsernamePasswordException extends Exception {} class HostConnectException extends Exception {} /** * Connects to the database * * Returns true on success, false on error. * * @return bool */ function connectToDatabase() { $error_msg = null; $db = mysql_connect('localhost', 'username', 'password'); if ($db !== false) { $result = mysql_select_db('my_database'); if ($result === false) { $error_msg = mysql_error(); } } else { $error_msg = mysql_error(); } $return = true; if ($error_msg != null) { $return = false; switch(mysql_errno()) { case 4001: throw new UsernamePasswordException($error_msg); break; case 4002: throw new HostConnectException($error_msg); break; default: throw new Exception($error_msg); break; } } return $return; } And using the function: try { echo "Connecting to the database\n"; connectToDatabase(); echo "We are connected!\n"; } catch (UsernamePasswordException $e) { echo "The database username or password is incorrect.\n"; } catch (HostConnectException $e) { echo "Could not connect to the database server.\n"; } catch (Exception $e) { echo "There was an unknown error connecting to the database.\n"; } What will the output of the code be in the following situations: * There was no error connecting to the database at all. * The username or password as incorrect. * There was an error you weren't even expecting.
not sure how I feel about traits, feel like they can make thigns really confusing really quick and offer bad programmers an even easier time to write horrible code. That said look forward to the built in cli web-server, native web apps for the win.
Good IDE support will alleviate that. PHPStorm 4.0 early access previews already have some support (more will come before it is released)
If you have `display_errors = 1` in your .ini (which you really shouldn't for production usage, but I digress), then check your PHP error log....it could be a warning/notice that is generating the offending output. Oh, and if you're trying to redirect the user by using `header('Location: ...');`, then make sure you throw a `die;` directly afterwards (it won't automatically redirect until the script finishes).
good catch. thats why im using strlen so you can adjust that. But, still you make a good point. filter_validate_url will allow http://asdfasdfasdff 
Yes you are correct, but I don't want to allow those in this case.
this includes even a space before the &lt;?php tag. Took me forever to find out why i was getting headers already sent. Id accidentally hit the space bar once when i opened a file and had saved it. It wasnt a clear error and took so long to discover.
why use a whole function when you can use a regex const URL_REGEX = "/http:\/\/+.[A-z0-9][A-z0-9-]*(\.[A-z0-9_-]+)*/"; its basic but it covers most situations, you could even add the extensions to the regex
the proper answer should be none. learn how to program php properly. 
You could just use [fputcsv](http://www.php.net/manual/en/function.fputcsv.php) instead of just building a string yourself
That regex doesn't take into account 1. URLs that are case-insensitive, 2. any other protocols other than http (what about https???), 3. any port other :80, 4. any URL with something after the domain name. In short, it's not very useful ;/
its just a simple regex, and could be improved tenfold to include the things you mention. It was just a quick example. edit: here one i found in a 5 sec google search ^(http|https|ftp)\://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&amp;amp;%\$#\=~])*[^\.\,\)\(\s]$ you could define the .com .net etc specifically to limit to known TLD here is a link to a very definitive regex http://flanders.co.nz/2009/11/08/a-good-url-regular-expression-repost/
[File upload progress](http://es2.php.net/manual/en/session.upload-progress.php) is not mentioned in the slide, and I have just learned about it in the [New features](http://es2.php.net/manual/en/migration54.new-features.php) page!
Paranoidelephant is saying models != database tables. Stop thinking about models in terms of databases. It just so happens they are often used for querying databases, but they can represent any kind of data store, and all frameworks support that.
*workaround?* ob_start(); right after your opening php tag.
That's a decent work-around, but I would highly suggest that you investigate the root cause. Sweeping unexplained software phenomena under the rug is rarely a good idea.
get branch coverage metrics in there and you'll have a winner! :)
That sounds like a cool feature to have actually.
Thirded. I use ci and it's great. Easy learning cure for new comers too. 
http://forums.cpanel.net/f145/php-5-4-0-released-case-51392-a-261752.html Hopefully won't be too long.
This is true, but OVH are building links to the US in anticipation of opening data centres there.
but still it's not the same... is like renaming a png image with a .jpeg extension, I'm pretty sure that photoshop will open it, but it will not be a jpeg but a png... Extension is NOTHING on a file, it's just the name. Files have a header and a FORMAT.
Hey thanks for the reply. The ID does come from an auto incrementing field so I think I should be ok there. I went ahead and told the script to create a new user with all privileges on each database: &lt;?php function actionhook_ShoppingCartCheckoutCompletePage($vars) { $clientid = $vars["ClientID"]; $fname = $vars["FirstName"]; $lname = $vars["LastName"]; $con = mysql_connect("localhost","uname","pword"); mysql_query ("CREATE DATABASE dbname_.$clientid."); mysql_query ("CREATE USER ".$clientid."@"localhost" IDENTIFIED BY ".$clientid.""); mysql_query("GRANT ALL PRIVILEGES ON *.* TO "$clientid."@"localhost" WITH GRANT OPTION"); } add_hook("ShoppingCartCheckoutCompletePage", "actionhook_ShoppingCartCheckoutCompletePage"); ?&gt; Also, you are absolutely right about updating all instances of WordPress. WordPress is actually set up on svn so all I have to do is run one line of code for each installation of WordPress to update it. 
No, I didn't realize that. For that to be the case they would have to be able to connect to the database though, right? They won't have access to cpanel or the database user credentials. I also changed it up so that the user will only have privileges on his database. Will that fix the problem? &lt;?php function actionhook_AcceptOrder($vars) { $orderid = $vars["orderid"]; $con = mysql_connect("localhost","uname","pword"); mysql_query ("CREATE DATABASE dbname_.$orderid.", $con); mysql_query ("CREATE USER ".$clientid."@"localhost" IDENTIFIED BY ".$clientid.""); mysql_query("GRANT ALL PRIVILEGES ON dbname_.$orderid.* TO ".$clientid."@"localhost" WITH GRANT OPTION"); } add_hook("AcceptOrder", "actionhook_actionhook_AcceptOrder"); ?&gt;
That is amazing, thank you. I will definitely check out that pdf. If I use a random password generator would I just need to set up the script to email me that password? Ok, yeah I will definitely take off WITH GRANT OPTION as it's not needed for that specific user. 
But then you would have two problems
**&lt;**?php ... br /**&gt;** All this is going to be rendered as an HTML tag (and thus invisible) on your page, and all you will be able to see is *"; } fclose($file); ?&gt;* This is happening because the file is not being run through the PHP parser (it must have an .php extension, .html is just HTML).
It must be the way you're running it. I did not see anything that could cause this and tested it to be sure. The code itself is fine.
Thank you kind sir! Fix it.
Thanks for the advice, this is something I aim to do, I just don't know too much about OOP principles yet. I'll certainly look through the documentation of the frameworks mentioned here, looking for ideas. Thank you for your suggestions, as I said i another comment a while ago, I use the Smarty template engine. Thanks for your input, I'd comment further, but I'm just about to go out and get boozed up :)
The problem with register globals isn't just the variables magically appear - it's the fact that there can be a conflict between different sources, e.g. from `$_GET` or `$_POST` or `$_SESSION`.
I've been allowing your links because the subreddit needs content. Don't start being uncivil, because I'll start being less forgiving on the nature of your content.
Not possible.
yup this is what I'm waiting for. 
The feed is generated on their end, so unless you perform some cURL magic, it's not strictly feasible.
http://php.net/manual/en/reserved.variables.server.php REQUEST_URI
Can I ask why you use Smarty instead of regular PHP?
possible duplicate of [Headers already sent by PHP - "But it worked on the other server!?"](http://stackoverflow.com/questions/8028957/headers-already-sent-by-php)
$_SERVER['PHP_SELF']
We still do! 
you may want to experiment with sqlmap.org - a python tool to test for SQL injection exploits.
Yes, this is the kind of material I was looking for. Thank you.
our godaddy vps is ~300/yr with cpanel and decent specs.. it handles 1000s of remote http requests every minute and looks like it has a lot of room for growth (concurrency into the 1000s) before i have to optimize code or upgrade. just saying, look for **godaddy promo codes**.
Hey, I just wanted to let you know that I wrote another implementation that works more like you described. http://joshosopher.tumblr.com/post/18714928411/php-5-4-prototype-based-programming-v-2
Chris Shifflett's book is very good: http://www.amazon.com/Essential-PHP-Security-Chris-Shiflett/dp/059600656X
&gt; As an example, using $_SESSION itself is insecure As a generalized statement, I'd say that's pretty false. It's just a data repository - it's how you use it, not the fact that you use it at all, that's insecure. Session cookies can be replayed, but it depends entirely on how you maintain your sessions. If all you do is rely on the cookie by itself, sure. If you regenerate the cookie regularly, less so. If you put verification information in the session to reference back to, less so again.
The thing to read on PHPSec is this: http://phpsec.org/projects/guide/ The concepts themselves are still the same you have to solve, even if some might be solved a bit more efficiently these days.
Ran this locally and L3R0a34y5waHA= decodes to /ttk.php perfectly I'm assuming other online tests may have strict set to true, or something
Hmm, doesn't text encoded in base64 need to adhere to strict RFC guidelines in order to be compatible with other software? If a hosting company configures PHP with strict settings, wouldn't the theme ultimately no load or run?
&gt;It's just a data repository - it's how you use it, not the fact that you use it at all, that's insecure. 100% true statement Perhaps I should have been more clear, my intention wasn't to say not to use $_SESSION as much as it isn't always clearly defined if something is or is not secure, but that there are varying grades of security.
All POST, GET (edit: and COOKIE) data is user submitted, even if you never intended it to be. Not only should you assume that someone will try to perform an SQL injection attack, but you should assume someone will change the data for other reasons. When I was just learning PHP, I made a little vanity site. The header and footer were in the index page, and the content was pulled using an include.... See where I'm heading? Stupid me, inexperienced with security put the file names in the query string, which I then included (http://www.example.com/index.php?page=about.php). It wasn't long before someone exploited the code and included a remote script, hacking the site. BIG rookie mistake, but it taught me the lesson. All GET and POST (edit: and COOKIE) is user supplied, and thus suspect... even if you never intended the user to enter the data. And with a well crafted Google search, all sites are visible and open to attack, even little vanity sites about me.
For people who handle their encodings properly, what bugs currently exist in mysqli_real_escape_string that are solved by using prepared statements? If what you say is true and there is such a bug, this is big news and you shouldn't be keeping it to yourself.
I'm not sure I understand your point... why should a website be deprecated just because its a couple years old? To me this seems about as logical as needing to install a new engine in your car to support the tires you had put on. If you look at HTML, it will still run pages that are 20 years old. Sure HTML has evolved, and the code that drives it has gone through major rewrites over the years, but in all that time you've always known that a &lt;b&gt; tag is going to bold your text. Nobody has ever come along and decided they didn't like the &lt;b&gt; tag so they were going to deprecate it and replace it with &lt;*&gt; which did exactly the same thing, but had an exciting new name. I should be able to upgrade PHP and be able to take advantage of security fixes without the fear that I will need to go through hundreds of files to change the names of common functions.
I think server resources here pales into insignificance compared to not being able to see what the damn thing does.
This is a joke right?
Just use whatever revision control system you're comfortable with. Some options: * [Git](http://en.wikipedia.org/wiki/Git_%28software%29) * [Mercurial](http://en.wikipedia.org/wiki/Mercurial) * [Bazaar](http://en.wikipedia.org/wiki/Bazaar_%28software%29) * [Subversion](http://en.wikipedia.org/wiki/Apache_Subversion)
Oh I get it now. 'Traits' are an implementation of multiple 'Inheritance', because in biology, *traits* come from *inheritance*. So if we can't have the multiple inheritance, at least we have traits, which is what we really wanted anyways.
&gt; 2) less code to type out Really? What about $ before every variable, ever?
Use git and github for hosting - just get the small plan for $12/month and you can have up to 5 collaborators and 10 private repositories. It's cheap, fairly reliable, and great for tracking bugs, merging and branching, and tracking.
No, there're not too much IF YOU NEED that information. The real problem should be a couple of queries NOT optimized + tables/fields not optimized also.
Can any of them be cached? Do you retrieve the same data on every page load, or is every query different every time? I would say that 39 is rather high for a single page, but that depends entirely on what it's doing. Combining queries with JOINs and such can help, but it can also just mask the problem. You're not making things better, you're just making fewer queries. If you have pieces of data that can be cached effectively, you should do so. It will lead to fewer queries, and faster page loads.
That extra $ sign doesn't slow you down a lot. What will slow you down is learning the templating language and typing that out with all its syntax e.g. {{var}}. Also the template parser has to parse each page looking for variables before it renders it so that adds overhead and slows down your website as well.
I was away for a few days but damn, thank you for that! Makes much more sense now!
Yes I suspect its more optimization thats needed than anything. How would I go about caching data? Il have to look into doing joins and whatnot to. Not much experience with having to optimize SQL :p
Git and RepositoryHosting for my own personal closed source and freelance projects, GitHub for open source.
So I've used SVN's before, but only for code that I have written from scratch. How do I go about implementing version control after I already have something like 2.5 million files on the server and about 80 different accounts. Is this something web dav would be better suited for?
Why exactly does your script require 39 SQL queries? That seems like an awful lot unless you're pulling some really intensive database procedures, and it sounds like you're running a public website so I don't see that being the case. Can you point us to your site?
Mercurial is great. As for Git on Windows, [msysgit](http://code.google.com/p/msysgit/) is a nice Windows port. [gitextensions](http://code.google.com/p/gitextensions/) is a nifty and handy GUI for those uncomfortable with the command line. It has a plugin for Visual Studio and Windows Explorer. And you can integrate it with other IDEs with a little work.
You can probably wedge 90% of these queries into an object. 
if you don't need the actual results generated by $oQuery anywhere try using SELECT COUNT(*) FROM `lastOnline` WHERE `statsID`= '{$TMPL['stats_id']}'; instead. MySQL can retrieve counts faster by itself compared to counting results. Also only ask for specific results – using * is lazy / bad practice and resource intense as well. 
You may be able to change the first query to ...WHERE statsID IN (1, 2,3,4,5,6 etc)
Just a heads up, you don't seem to be replying to people's comments properly; make sure you actually hit "reply" on the comment you wish to reply to, otherwise they won't be notified of your reply. To address your point though, I am fairly certain that you don't need to run these queries in a loop; you should be able to handle this with a single bunch of queries, but I don't have enough time to rewrite them for you right now.
I'd love to see the entire loop (at least the important bits). The way I learned it, if you're running a query in a loop you're doing something wrong; the query can be optimized to not need to run in the loop. IMO 39 is far to many for a normal page, I get a bit edgy going over 10 on a page load. Though I suppose it's what you're doing (I'm thinking consumer facing pages, for say tools and utilities it would be a bit different). Maybe we can help you optimize it a bit, I use to thing similar to that until I sat down and decided to learn SQL as its own language.
0 files or 2.5 million files, the problems are the same. SVN + Webdav has a GREAT permission system. Git has...well nothing for permissions, so you have to use Gitosis or Gitolite or some other 3rd party. There are strategies that don't include 3rd party like..have a master branch be a local that someone chooses to pull changes into (which is how Linus does his). However, with 2.5 million files, you have no way to branch in SVN without copying 2.5 million files (at least that was my experience). Fuck that. After the initial checkin, you can branch in a matter of seconds (&lt;15s for 2.5 million files) with Git. Regardless of the permission debacle, I would go with Git in the interest of time. My 2 cents.
how would I have different values for each statsID # though? Something like "UPDATE lastOnline SET online = ('1', '10', '12') WHERE statsID IN(1, 2, 3)"; ?
Understandable, when you're paying they care a bit more. But Bitbucket is a nice alternative for those who don't mind the support (or don't need it), or just don't have the extra cash. I use it often, and haven't had an issue yet.
The day I saw a Drupal front page issue over 7000 queries I no longer worry about 50-100 queries on indexed fields.
&gt; protected $in_framework = FALSE; Might be a bit too tightly coupled and concern itself with stuff which it really should have no knowledge of. &gt; if ( $this-&gt;show_errors ) { trigger_error( 'The URI "' . htmlspecialchars( $route ) . '" already exists in the router table', E_USER_ERROR ); throw new Exception( 'The URI "' . htmlspecialchars( $route ) . '" already exists in the router table' ); } Why are you throwing both an error, and an exception? Personally, I'd get rid of the show_errors property and the trigger_error call, because: 1. exceptions allow you to recover from a problem, and you usually don't want to have it sprouting error messages all over your web page when it is recoverable. Currently, yours is an all or nothing solution. 2. if you wanted to display a user error notice, you can do it in your try/catch clause. Or you could let your exception bubble all the way up and it'll display the same information. &gt; foreach ( $this-&gt;routes as $priority =&gt; $routes ) { [..] foreach ( $routes as $route =&gt; $callback ) { [..] foreach ( $matches as $match ) { Ask yourself whether you really need three levels of foreach loops, or whether you can do it in a better way. &gt; call_user_func_array( $callback, $params ); Isn't this a job for the dispatcher? I think it would be better if it didn't do this, and instead returned the result. This would be better for stuff like unit testing, so you wouldn't have to execute something external when testing an individual component. &gt; public function route( $route, $callback, $priority = 10 ) This isn't very extensible. Personally, I'd have it accept a Route object which does the matching for me. That way I can create routing rules in whatever format I want.
Thanks for the feedback, but I'm not sure I understand your first point. Right now you can pass a method of a class to the router like this: class News_Controller { public function ajax() {} } $router-&gt;route( '/ajax', array( 'News_Controller', 'ajax' ) ); If this isn't what you meant, could you perhaps explain it some more to me? As for the second part, I never thought about the processing time of the AJAX. I'll look into doing something like you mentioned, to reduce the processing time. Thanks!
I'm well-aware of pcntl, and I've used it before on occasion. Yes, the extension is designed for daemonizing a PHP process. However, PHP itself is primarily a web programming language. There are much better alternatives to PHP, to name a few: C/C++, Python, Ruby. Node.js is a great option, who very often tend to have at least some experience with JavaScript. If you're most comfortable with PHP, then by all means, you *can* write a daemon with it, and it will probably work reasonably well. PHP just isn't the best tool for the job.
Basically, when I make a project I use .htaccess to make all my URLs go to index.php. That file then loads by other classes, templating engine, database layer, etc. I also have modules, and each module can use my router to tell my code which URL should execute which function. For example, I might have this: $router-&gt;route( '/users', 'view_users' ); Where view_users is a function that spits out HTML.
Duly noted. Cheers :)
I agree with it being too tightly coupled, and I'll have to look at a better way of doing that. I'll also look into a way of optimizing those foreach loops. &gt; Isn't this a job for the dispatcher? I think it would be better if it didn't do this, and instead returned the result. This would be better for stuff like unit testing, so you wouldn't have to execute something external when testing an individual component. The unit testing thing is a great point, I should definitely change my router around to allow for this. However, I'm not quite sure what you mean by a dispatcher. It seems like that might be overcomplicating it? I could divide it into two internal functions, execute and say dispatch, where execute just figures out what function to call based on the URL and dispatch actually calls it. Is that what you meant? &gt; This isn't very extensible. Personally, I'd have it accept a Route object which builds the route regex for me. That way I can create routing rules in whatever format I want. Again, I don't really wish to overcomplicate this, and I don't see the advantage. Right now you can create static rules (/users), predefined regex rules (/user/&lt;#user_id&gt;), and custom regex rules (/zipcode/&lt;:zipcode|[0-9]{5}&gt;). What more could you possibly want or need (Serious question, I can't think of anything).
$result = mysql_fetch_row($oQuery) would look like array(0 =&gt; *count*).
&gt;I'm not quite sure what you mean by a dispatcher. It seems like that might be overcomplicating it? A dispatcher is a rather common and essential thing when doing URL routing. It's a dispatcher's job to instantiate the controller, calling the action method and feeding it with its appropriate information. I suggest you have a look at how other frameworks do it. &gt;Again, I don't really wish to overcomplicate this, and I don't see the advantage. First of all, it's not really complicated, and secondly, the advantage is that you can construct routes in whatever format you want and leave it up to the object itself to do the matching. For instance, I do it like this: interface Route { /** * Match the given request. * * @param Request $request * @return Match */ public function match(Request $request); } That's pretty much the core of my routing structure. All my route classes implement this interface. If I wanted to match against a regex, I could do: $route = new MVC\Route\Regex($regex); $match = $route-&gt;match($request); Or if I wanted to match a literal route, I could do: $route = new MVC\Route\Literal('/news'); $match = $route-&gt;match($request); That's pretty simple, wouldn't you say? If I wanted to match multiple routes, I'd do: $routes = new MVC\Route\Stack; $routes-&gt;addRoutes(array( //routes here )); $match = $router-&gt;match($request); Point is, with this structure I give my users the freedom to write routes in whatever way they are comfortable with, and not forcing them to work with whatever format I choose for them. Plus, I do not have to concern myself with edge cases which I might have missed had I forced a format upon them, leaving them stranded without any hope of accomplishing their goal. Also, not all routes need to be parsed through regex, and not doing so whenever possible certainly is a performance benefit. 
I'd be very curious as to how this works out for you! I've been doing PHP dev for a *really* long time, and have been starting to think about the absolute lack of resources for learning good PHP practice - just lots of tutorials that show not-great basics. Maybe you'd consider posting the logs and tutorials as you guys go through them? I'd be really keen to see what works and what doesn't.
You wouldn't. The first query is a SELECT. 
I'm gonna call you old fashioned. one of the reasons why they stopped maintaining it is because msyql_* extension is a bit of a joke interface wise. They fixed it a little bit with mysqli, but it's basically putting lipstick on a pig. PDO is not complex at all.Even for and OO interface it's quite simplified and you don't even to know what OO *is* to know about it. And once you get used to it, you'll find it saves you a lot of code, is quite simple, and you'll wonder why you preferred mysql_* at all.
it wont be the amount of queries, it will be how the mysql server is setup. ive worked on some reasonably large projects, and it was always the mysql setup that has been the bottleneck. Ive not run as many as 40 in a page, try and pull more data from multiple tables in one query. you describe a loop, can you change that loop to build an sql statement instead of running one, that way you can run the sql after you exit the loop.
Ever since I started making classes for all my database objects, standalone queries make my eyes wince.
Interesting, thanks for the info! Il for sure do some playing around with this thanks for all the help everyone
It's not atrocious, but it's pretty unusual. It screams out to me that there will be "easy" (by comparison) optimizations to be made. Can you disclose at all what the page is generally supposed to be doing in that time? EDIT: Seen your post on what it is, but of course your server is struggling!
Well, hey, I don't like the new PDO functions, but I think it comes from an ingrained dislike of object-oriented PHP in general, which is odd given that I handle object-oriented languages fine in application programming. In any case, though, I appreciate that change happens, whether I like it or not, and I've started converting my site to the PDO functions (I replaced all the main page code and it seems to be working fine, so I'm going to continue on from there). I've been using your tutorial as a reference and it's pretty comprehensive, so cheers. **EDIT:** Plus, I have to acknowledge that there are people out there who know better than me, and if they say that the mysql extension should be deprecated in favour of PDO, I'll listen to them. Anyway, I'm almost through replacing all this mysql code with the PDO equivalent, and I'm taking advantage of prepared statements, but not transactions (yet). I think transactions are something you kind of failed to explain in detail in your tutorial, so I didn't really look it up until just now, and while I'm not sure there are any situations in which I *need* that, it's really neat that the functionality exists and it definitely deserves an extra mention. Definitely worth having as a safety feature in secure code.
consequences of learning everything purely from random tutorials/forum posts and through trial and error :p
Bitbucket also supports GIT now. I was using Bitbucket for some private hosting. However I recently switched to Github, I have to agree with everyone here, Github just has a ton of momentum behind it, and it makes it real easy to just jump right in and start contributing to projects
I tried the same thing: foo@ubuntu-vm:~$ php -a Interactive shell php &gt; echo base64_decode('L3R0a34y5waHA='); php &gt; echo base64_decode('L3R0a3'); /ttk I tried other combinations but I'm still not sure how PHP can handle a malformed base64 string.
&gt; sqlite is to sqlite3 as mysql is to mysqli/pdo. This isn't correct; sqlite3 is not compatible with older sqlite (2) databases; whereas any of the mysql extensions work with any version of mysql (depending on your libmysql version...)
This slide deck has a few minor problems: 1. `break` and `continue` are not functions 2. The `(object) null` warning, and `(string) array()` bullet points (slide 6) are misleading; the latter only throws an `E_NOTICE` when it is type juggled (e.g. `echo array()`), `(string) array()` doesn't actually throw an `E_NOTICE` 3. It is `http_response_code()` (singular) I have also given a talk on 5.4, you can [find my slides here](http://speakerdeck.com/u/dshafik/p/php-54-the-new-bits). One thing I forgot to mention that you reminded me about (but also didn't put in): All the mysql extensions now use `mysqlnd` by default.
You can also use mysql_result() for single coumn queries: $query = "SELECT COUNT(*) FROM table WHERE ... "; $count = mysql_result(mysql_query($query), 0); So you don't need to access an array element when you can get it directly from the result via that function (since it's only one column). Also, I fear the original code is incredibly inefficient as it forces the DB to fetch the entire contents and prepare those contents for return, even though they are never fetched. So maybe the DB issues are coming from getting large datasets and never cleanly freeing the result before moving on to the next 22 inefficient queries? Especially if the table grows on every page view, yikes.....
So I just installed GIT on my server and created a repository just under the web root. Now, how do I go about checking in and out files? Do I just FTP into the .git folder and then use SSH to commit? I suppose I'm a bit confused about this...
I use use SVN, Git and Mercurial depending on the project. I have no real preference as they all get the job done. I just use whichever one is either already in place or, if we are cursed/blessed (depending on the person's people skills) with one of the many version control evangelists out there, whichever that person gets the noisiest about (which usually means Git).
My first job was at a company that ended up in huge legal trouble for tax evasion and pirating software. The lesson I learned from all that, if it seems like things are going in the tanker, it's past time to update the resume/CV and start looking. I've been on both sides of the interviewing table. I love when an applicant asks questions about the company or challenges me about my thoughts or opinions. Ask questions about version control, what servers they use, a deployment strategy, coding standars, how long they've been in business, how they go about acquiring clients/customers (if it applies), benefits. Personally, I've learned more working professionally in a team environment than being a freelancer. Just having someone else around to bounce ideas off of, or get a different perspective has helped me grow personally. Also, unless you've got some great clients freelancing, the benefits you get from working at a company seems to outweigh the uncertainty of freelancing.
I wrote this little tutorial on how to get started with PDO, it's really easy to use, and makes your statements more secure right off the bat. http://www.meatlessmarkup.com/php/workingwithadatabase
No. You also create a git repository on your development machine. You will setup the your local repo to SSH push up commits to your "master". The "master" will have to do a checkout to put all the changes on the filesystem. There's probably an option or git hook for this to be done automatically, but for starters, don't worry about DEPLOYMENT. Just get the basic "make a local change-&gt;checkin locally-&gt;push to master" down from your GUI Git Client or Command Line Git Client
&gt;Can you point me somewhere that I can see how xdebug can be used to measure path coverage of a function? I would really like to have that information. Thank you.
I don't understand. If you're going to use subversion, you're doing the same thing. If you are using just a directory as a repo in SVN, you have to make individual git repos in each directory you were treating as a separate SVN repo (whatever dirs you applied permissions to probably) in your Git setup. The idea of an overarching repo that contains all the other repos doesn't exist in git. Your master (on the server) could theoretically be set up to cover all the sub-repos (because it just sees the filesystem, regardless of how they got to that state), remember to setup your .gitignore (which ignores files and directories, SIMILARLY to svn - check the docs on .gitignore). You would need to get onto the server and checkin changes that have been made to other repos from time to time. it might be better if you just gave an example of what you had setup in svn since I don't quite understand why a 250GB SVN repo is good in ANY way (ever had an SVN repo die? I have a couple times and fixing them is sometimes easy, usually fatal - meaning no getting past revisions at all) [lots o edits, sorry]
Freelancers often end up spending more time looking for work than actually working, especially in the beginning. Job first, then freelance.
my apologies. I essentially inherited a terrible system in which the idea behind version control was rename the old file to .bak.DATE and upload the new file... Right now there is no real version control. Additionally, some clients have FTP access. The other confusing thing would be module installation within Joomla. Because Joomla handles file creation and modification (for certain things) I'm not really sure how this would work. Maybe it's back to the drawing board. I really want to set up SOMETHING because they are on a one way train to disaster. 
There's no way that sort of code kills a database. If you can't handle this it's because you are on a shared server or you just plainly need to upgrade your system because you got too much requests. For sure it can be optimized, but really, with a couple dozen simple selects/updates, database should not be the issue. For optimizations: * Try to keep lastOnline in a MEMORY table (make backup from time to time) * Do only one select for all $TMPL['stats_id'] using WHERE statsID IN (id1, id2, etc.) * If $mquery['playerCount'] is constant, do the same for update using same technique * Update lastOnline only once every 5 minute * For that you can create an event in mysql, a cronjob, or set a timestamp in a file * Unrelated to performance: use mysqli or PDO. mysql extension is crap Otherwise, share the whole script so we can diagnose more precisely.
It doesn't work at all in currentish versions of php. Likely you need to upgrade your php version, because there was a [known bug](http://bugs.php.net/bug.php?id=37244) in older versions of php. The correct base64 encoding for "/tkk.php" would be "L3Rray5waHA=" which you can see is not the same as what you have. Base64 works like this. Say we have a string, we'll keep it small: "Dog" which converts to "RG9n". In a binary stream where each character is expected to be 8 bits wide, it looks like this: D -&gt; 01000100 o -&gt; 01101111 g -&gt; 01100111 Base64 packs in goups of 6 bits, so our string winds up looking like this (the pipes denote where base64 splits the bitstream, the spaces denote where each regular character would end): R G 9 n 010001|00 0110|1111 01|100111 D o g 010001 -&gt; R - contains bits from D only 000110 -&gt; G - contains bits from D and o 111101 -&gt; 9 - contains bits from o and g 100111 -&gt; n - contains bits from g As you can see, because each character representation is 6 bits in size, what you get in your encoded string is *directly related* to the adjacent overlapping characters. This is why splitting the string and decoding it yields very different results.
I don't follow you. This is a Wordpress theme that I bought so I have no control over the code. I installed this on my hosting plan and (presumably) they're using a version of PHP after 2006 so the bug's probably not relevant. So the base64 seems to be mis-encoded but the theme appears to function properly. That's where I'm confused. The only scenario where I can see this working is that the base64 was purposely injected with non-functional characters and another file has a cleanup routine. But that's conjecture until I pore over the rest of the code.
[39 SQL queries is not alot.](http://www.google.no/url?sa=t&amp;rct=j&amp;q=alots&amp;source=web&amp;cd=1&amp;ved=0CDoQFjAA&amp;url=http%3A%2F%2Fhyperboleandahalf.blogspot.com%2F2010%2F04%2Falot-is-better-than-you-at-everything.html&amp;ei=84RUT6mQFumI4gT3kPy9DQ&amp;usg=AFQjCNEIpi5UPYKcwqX7SKtE92PY3ldMOw&amp;sig2=7aXP4hAH9k9MxSUp1MS4jA)
Make sure your boss (or someone above you) has programming experience. Nothing more frustrating than working for someone who doesn't believe you when you say it's gunna take a week to fix.
Having just started with PDO myself, I like this example, the only thing is I would like a little more explanaition on how the PDO section works. In step 4, he has created a Database Handle object, called $dbh. This takes care of all database interactions, and acts as your gateway. In step 6, the if statement is the first place you want to look for an example of how to create a prepared statement. $stmt = $dbh-&gt;prepare("INSERT INTO USERS (name, email) VALUES (:name, :email)"); This creates an object that contains the SQL query "INSERT INTO USERS (name, email) VALUES (:name, :email)". Note that in the values brackets there are placeholders, these always start with a colon. The next two lines bind a value to these placeholders: $stmt-&gt;bindParam(':name', $name); $stmt-&gt;bindParam(':email', $email); The final part: if($stmt-&gt;execute()) { $added = TRUE; } $stmt-&gt;execute() returns a bool TRUE on success, so we can tell if it's run properly. Once you understand this, you understand how PDO works. You'll note that there is no escaping necessary when you are binding parameters, as the statement you have prepared has the placeholders for your variables and is treated purely as a statement, and when you bind the variables, they are treated purely as data, allowing the db to understand the difference and input them successfully, protecting you from SQL injections. One thing to note, the php.net resource is fantastic, you can use arrays to pass in both named an unnamed parameters, if you need to run a statement on several rows/insert several items etc. I hope this helps someone decide to use the safer PDO method! **EDIT** Formatting
Ask them a question you know they won't know the answer to, and give them access to a figure and see how they figure it out. If you're looking for someone "raw", this and giving them a problem to solve would be the best questions, in my opinion. (An example .. ask them to sort a multi-dimensional array by the second dimension)
Well in that case, you most probably aren’t the cause of the server dying out
To add to this, maybe worth while to ask about a time that something didn't go according to plan and needed to be fixed immediately. Keeping a cool head in "oh $-#@" situations is paramount. 
Thanks for your notes! If you dont mind, I would like to use them with attribution towards you. I'm going to build up the site with different resources, and I'm trying to make the info as accurate as possible
&gt; "How would you implement database access in a fairly large application, assuming that it is written in object oriented manner ?" - understanding of dependency injection - familiarity with PDO or MySQLi &gt;"You are tasked with finding bottlenecks in some codebase, how would you do about doing it ?" - use of `EXPLAIN` and indexes in SQL - php debugging tools, like xdebug - general bad practices &gt;"If you had to write an extremely hard-to-test code, what would it contain ?" - understanding of global state - separation of logic an creation - good variable/function/class names - composition over inheritance - familiarity with unittesting and TDD Besides .. this all is just details Goal of the interview is not to gage how good developer someone is. If you want to determine someones skill, you will have to give him/here a programming exercise. IMHO, one of the best tasks is: **create a login/registration page.** Give a fair time limit, not more then week, and give no additional details. First of all , this will test persons ability to ask clarifying questions. And in code it would show his/here codeing practices, knowledge about security, frontend development (html, css, js), storage design ( most likely SQL table ) .. all the good stuff.
To figure out if he understands OOP, ask him what "static" does. How would he call these two functions? class Test { public function Test1(){ } public static function Test2(){ } } It's amazing how many programmers don't get this. 
Hahah never give up learning. You've got to go through that to grow as a developer anyway, so you might as well learn on a real project!
As soon as I saw it, I thought it was a great question, and will be using it in the next interview I do. Shows the candidate follows along with new developments in the language. For the record, my answer would be "anonymous functions." Also keep in mind each question is just a piece of the puzzle. If you don't have an answer to a particular question, it isn't a deal breaker. If you start making up BS, however, that is a huge red flag for me.
I would say that finding primes is a way too simple an exercise, and you can just copy-paste the code. If you want to see, if developer is able to **think** like a developer, give him/her some code-kata to solve.
haha, forgot about that simple thing :)
I feel they both might look at me blankly after I ask those questions, but it'll be great to tell them apart if they don't, thanks for the tips 
Haha, they might do. I often start off with it completely open ended and then narrow it down and provide hints or examples if they're not talking.. For example: "Which is your preferred IDE and what do you like about it?" *blank stare* "Which programs have you used for editing code? Netbeans? Eclipse?" *oh, yeah, I've used both of those* "What did you like about Netbeans? Have you used x feature? y feature? did you find it helpful?" And so on.. the sooner they start providing expansive answers and not just "yeah, no, i guess", the better. Often it doesn't really matter what their answers or opinions are.. just that they have one.
&gt;Does people really answer that question? I've never actually asked that exact question, I've asked "What is your favourite new feature in C#2,3,3.5 etc.." And yeah, definitely get answers. Shows who keeps up to date.
Make sure to do the Fizzbuzz test
really.. if they don't get this I would consider you are looking at a 2 or a 3, not a "5" on your scale :)
Maybe i'm just from some 3rd world country , but ... emm .. what is "sanity check" ? Is it some mode of PHPMD ?
Yeah, I'll keep an eye out for that, but this shall be a tech interview, to get here they passed an RH interview who's job was to filter those things. My job now is to assess if they are able to do the project they'll thrown in.
Thanks for that link. I bookmarked it and will go through it tomorrow. Looking into PDO has been on my list of things to learn. This looks like it should help.
No, you're wrong. This is a work-around.
&gt; interpreter knows I'm touching a variable that comes from register_globals Except it doesn't know where a variable came from. There's no meta data attached to variables that says "This variable was created by the register_globals function".
Coding tests are OK, but a week? Seriously? You ask me to spend more than about 2 hours on a test for a job application and you can sod off. There are plenty of places hiring that want good developers without such high bars. Unless you're Google or Microsoft you have to scale your tests so that an applicant could complete them in an evening. Even very small coding tests can tell you a huge amount about the quality of an individual.
I've been using NetBeans lately, but I'm not familiar with the tools you're talking about. Is there a way to use it to trace the origin of a variable - in other words, knowing if there's a chance I've touched it after it was registered? Seems like a tough job.
Read [Spolsky](http://www.joelonsoftware.com/articles/GuerrillaInterviewing3.html). You want people who are smart and can get things done, not people who know exactly how smarty works or even necessarily what the difference between an inner, outer, left and right join is. Smart people learn, and motivated people crunch through barriers. That's what's important.
Making a login/registration page would require something like 2-8 hours. Depends on how much reusable you have, how fast you write, and how many features features you do. The week limit must be there because "sh*t happens". You do not want to loose a brilliant developer, just because he was up to eyeball in work and could not make the interview-exercise till day 4. Not every candidate will be a student or a freelancer with fairly unlimited amount of free time.
After a little more reflection, I sort of figured that would be the answer. You've gotten me interested in looking up the specifics of how Zend does it. I'm coming to like Zend less and less and suspect that this will also make me less than happy.
This is a bad question...WTF is a 'sanity check'?
Those questions I already did over a phone interview
"goto" - it allows me to avoid writing functions, therefore, more efficient and easy to read code! I like to have all my code on one page, so you don't have to bother "hunting for file" (don't force me to state that this is a joke post)
I remember an episode of the charlie rose show where Marissa Mayer ( google VP) was asked what they looked for in applicants - the answer was interesting. Of course google does some pretty heavy analysis to see whether a hire turned out to be a good fit, and why this was so. She said that the only parameter that was heavily correlated to a good fit was what projects the applicant had worked on successfully before. So That's what I would ask about.
Concentrate on what projects they have completed. It's one thing to have someone that knows MVC, Security and the differences between operators, but can they start and finish a project? Even if it isn't their own?
Seeing as how for-loops don't automatically output anything to the browser, or modify any database or filesystems, I don't see anything wrong with it. Although I'm assuming you'd be using a [`foreach` loop](http://php.net/manual/en/control-structures.foreach.php), correct? Otherwise you'd need to make sure that the client is sending you numerically indexed keys or convert it before you loop through it.
Answer your own question then.
so, umm... can you please define what a sanity check is?
yeah, I agree. I think a considered approach is needed.
Here's some questions I was asked at a recent interview... * do you know what a closure is? * what workflows are you aware of? e. g. Agile * what design patterns are you familiar with? Example: singleton * what's normalisation? * what size teams have you worked with? * have you done pair programming? * have you ever disagreed on a solution with another developer and how did you deal with it? * what do you do when you realise that somethings going to take a lot longer than expected? * have you dealt with any critical issues on a live site and how did you deal with it, and how did you deal with the client? * how would you go about quoting for [basic Web dev task here]. * what IDEs are you familiar with? * what frameworks are you familiar with? * have you ever realised you're not going to meet a deadline and how did you deal with it? * have you done any unit testing? 
I would love to see scalar casting magic methods added to PHP, but I think I've read some internal messages in the past from the devs rejecting the idea. For me, not having these magic methods is yet another example of PHP implementing features in a half-ass kind of way. Once the idea of adding the __toString() magic method came about, it should have been a no-brainer to also add the rest, eg __toInt(), __toArray(), etc. I'm not so sure about the scalar type hinting, because [SPL types](http://www.php.net/manual/en/intro.spl-types.php) were added *specifically* to solve this problem. Instead of adding new features, maybe we should be actually using the existing features, and spend some time making those existing features better. This is how PHP ends up with a bunch of half-baked features.
Sure, SPL types were added to solve that problem, but they don't actually solve the problem. I still need to manually box and unbox the native types when passing to and from hinted functions: function foo(SplInt $int) {} foo(new SplInt($myvar)); IF you were talking about adding auto-boxing support, then maybe I could see that as an alternative. But all the SPL Types do is trade one set of boilerplate code for another. This patch attempts to remove that boilerplate alltogether...
Not really relevant for OP as they are doing all closed stuff, so use whichever is a better fit and "momentum" be damned.
I'm borrowing one from you too, many of others were already there :)
Translation of the questions: --- &gt; What was the most obscure problem/bug you remember facing? Make something up, that makes you look really smart. &gt; Tell me about when a project didn't go according to plan. How good are you at blaming others ? &gt; Have you dealt with any critical issues on a live site and how did you deal with it, and how did you deal with the client? What would you do if all our project managers are incompetents ? &gt; Familiar with Smarty? Why would you use it instead of anything else or nothing at all? Random flamebait. &gt; You like to use any framework? Another flamebait. &gt; What are the principles of OOP? I do not know what it is, but someone said me that there are principles. &gt; What does MVC stands for? Do you know what latest hyped acronym stands for? &gt; How familiar are you with it? Only viable answer: very familiar, i do it every morning. &gt; Whole IDE section Flamebait. 
I don't know why that works, but I couldn't help but comment on how useless that "obfuscation" is. Not only because base64 is so easy to decode, but why oh why would they obfuscate the name of a file?
It is possible that the include is failing.
Too many IMO. If your site is slow and you're getting a lot of traffic I would try optimizing the queries and reducing the amount of queries ran. If that does not fix the problem then look into creating a static HTML cache of queries that often return the same result.
Apart from the normal tech talk, I generally like to go through a very simple programming exercise on a whiteboard. Have them implement a queue/stack data structure and write tests to prove it works. Or, if they aren't privy to test writing, have unit tests already available so they know when they are "done". Great exercise to see how they think and how they are to work with. And it's simple enough to be completed in 10 minutes or so in person.
I kinda agree, I might look at it later tonight
I don't like it. Not one bit. Type hinting as currently implemented in PHP is designed to catch errors in calling code, not act as a auto-casting convenience feature. This introduces a whole new behavior that is completely different from existing PHP class type-hinting in execution (class hinting throws an error, scalar type hinting would convert) and more importantly in intent.
Definitely. A good project manager should do everything they can to avoid situations where their programmers are in a tight spot, but it's also important to know that the programmers *can* handle that tight spot without getting flustered.
&gt;"anonymous functions." Not to sound harsh, but I would give you the gears about that, a little bit. PHP has had "anonymous functions" (lambda functions) for some time, but they've been sloppily implemented (create_function()). The real development is that anonymous functions are now well-implemented, and now include closure functionality.
This is something I've been thinking about, because I'm going to be hiring someone soon (anyone looking?). Here are a few questions I would ask. - Why was register_globals a bad security practise? - What is SQL parametrization? - How would you fix the error that indicates that you must set the timezone? - What is the distinction between a value, a reference and a variable? - What is the regular expression matching function name? - Write a regular expression to match a Visa card number, but not a Mastercard number. - What open-source projects have you contributed to, and how? (if any) - Provide them some trivially-broken code, and ask them to fix it. - Provide them some poorly-implemented code, and ask them to rewrite it, taking the same input, and producing the same output.
I'd explain that without closure support, lambda functions seem much less useful to me. But yes, I understand your criticism of my simple example answer.
This, right here. None of the questions really explore how I'd solve a problem - they instead focus on useless and irrelevant shit .
http://www.phpbench.com/ is good for performance figures.
+1 this might give a insight into someone personal coding standards. I will just ignore the syntax errors, but here are **problems** i would have with this code: - it is not written in OO code, instead it is a list of function and global state wrapped in a namespace ( which looks like class definition ) - you can have one and only one connection - works only with mysql - is tightly coupled to the `config` class name - uses `@` to suppress the errors And that covers only the design issues and not the syntax mistakes. 
&gt; Write a regular expression to match a Visa card number, but not a Mastercard number. This would be a really horrible interview question, but it might work as post-interview exercise , or part of it.
That's what I mean when I say "and spend some time making those existing features better". Does it make more sense to add a new casting feature, and leave SPL Types to die on the vine, or to spend time making the SPL types a better feature?
I don't understand the point of Smarty. I have never been able to find a good explanation of why is Smarty better than just normal PHP. 
Actually, non-static methods **can** be statically called. Not recommended, and I think at least a notice is raised, but I've seen it in several places in some of our codebases :( PHP is permissive like that...
 Yes, THIS. If they can't figure out Fizzbuzz, stop the interview right there. (And yeah, I've candidates who couldn't figure it out before.) 
What if he's creating a framework?
I believe a patch for this issue was actually recently added. **Edit:** Looking over that blog post (I have actually read it before), he does mention the fix near the end
It uses mysql functions instead of mysqli/PDO/... ? (teresko noted this too) It doesn't support joins? It doesn't set connection charset? (essential if you're not going to only have english text) Pointless functions? (joinArray) This is just what I would've noticed...
Then he's probably beyond asking a question this simple on Reddit. He would probably have opened up all the competitors code base and investigated them to get his answer.
 Aside from basic things (like Fizzbizz and basic SQL), I'm less concerned with every minute detail that candidates know, as opposed to how honest they are being on their resume and how quickly they can pick up new things. Example: candidate says he knows TCP/IP networking on his resume. Ask him the difference between TCP and UDP, or what ICMP is. Example: candidate says he knows UNIX shell scripting. Ask him what $? is used for, or how the UNIX "test" command might be used? Those are ways to weed out resumes that are "buzzword compliant". (And I've had more than a few of those) The other thing to look for is passion. If someone just shrugs their way through the interview, they're going to shrug their way through the job. Probably not what you want. If someone seems genuinely excited about what they're working with and has sufficient clue, I'd probably want to hire that person. 
No idea. First request for clarification you answered with ["google it"](http://www.reddit.com/r/PHP/comments/qiihx/im_interviewing_two_php_programmers_tomorrow_help/c3xw3wt) so you obviously expect everybody to use the same terminology as you do.
A candidate *that* incompetent should be easy to weed out by his other answers. Seriously, the best way to alienate actually talented devs is to treat them like idiots.
I agree with you, but that's why I wrote my own templating system. Mainly because I set up a way where you can include objects directly into the page, which makes writing content much more simplified.
He did say he didn't need very experienced devs...
"Keeping view away from logic" is hardly a design pattern. It's common sense, and that's all people really mean when they say MVC. You need structure, like it or not.
Why? Do you have an interview with ihaveaninja tomorrow? Obviously you've never worked with objects and classes. And that's all the hint I'll give out. Google is an amazing resource for learning.
&gt; The only difference is that this patch explicitly chooses to use the normal casting rules for consistency over creating a new rule set. The normal casting rules are terrible! Can't we just accept that going forward these rules should not be used for any new features. I understand backwards compatibility issues prevent fixing many of these problems that shouldn't be any excuse for continuing to push this shit into new features. A casting type-hint is pretty much useless -- why is anyone wasting their time on such a feature. What's the problem with doing it correctly? PHP is a dynamically typed language and therefore `1`, `1.0`, and `"1"` do all mean the same thing. If I have a method that accepts the `int` type hint all those values should be acceptable. However, this is a perfect time to stop accepting `"A"`, `1.5`, and `array()` as valid conversions. &gt; There is another proposal to add notices and/or warnings on implicit casts from incompatible types. With that proposal coupled with this one, that would allow for errors on bad casts. This is messed up though: The syntax that looks like an explicit cast but would trigger a notice/warning as if it were an implicit cast? Why can't the PHP dev's just get this thing right? Why must they always choose the worst, more useless, most convoluted way to implement every new feature! It's disheartening. Especially when there aren't good backwards-compatibility reasons for doing it wrong. 
&gt; I'm not so sure about the scalar type hinting, because SPL types were added specifically to solve this problem. That the worst possible solution to what is, really, a very simple problem.
Well now I'm not really sure how much I know about it. Dammit :-/ I thought I understood static. Can linepogl give us the answer, since he seems to know it? Or perhaps someone else intimately familiar with data types? I need to know this for my own good. 
So you would collapse it to &lt;ul&gt; &lt;?php foreach($myArray as $foo) { ?&gt; &lt;li&gt;&lt;?=$foo ?&gt;&lt;/li&gt; &lt;?php } ?&gt; &lt;/ul&gt; And you think that's just as readable to someone who has to modify the list?
I say drop them entirely. SPL types are a poor hack. Why should PHP add what is effectively the worse design decision from Java to solve such a simple problem? We should drop them now before they become commonly used and have to be supported forever. 
I feel incredibly stupid. I had some useless code in my template page that was causing the issue, I'd thought I'd commented it out, but I hadn't. All better now.
These seem like decent questions but not for someone who is. 5 out of 10 as the op asked for.
I would also suggest dropping them, because they seem to be a bit half-baked. Like someone came up with the idea one weekend, and had it written and committed to the repo two days later. They simply don't feel like a whole lot of thought was put into them. However, I don't think it's a bad design choice to use objects in the place of scalars, much like both Java and C#. Not specifically because of type hinting, but because I think it's high time for the PHP community to address some of the language critisms that have been around *forever*. Specifically: * Inconsistently named functions, e.g. str_replace() vs stripslashes(). * Inconsistent argument order, e.g. strpos ($haystack , $needle) vs in_array ($needle , $haystack). * Multiple functions that do the same thing with only a minor variance, e.g. strpos() vs stripos(). We can fix them in a couple ways: * Create a new namespace for a set of functions that are *consistent*. * Create objects for scalars, and have methods like String::replace($search, $replace, $count = 0), String::pos($char, $offset = 0, $case_sensitive = false), Array::contains($value, $strict = false), etc
I've never given an interview, only been interviewed. I think a few technical questions and a few etiquite / business process questions is fine and then just looking over a candidates portfolio is good. As a person being interviewed I want you to determine if I am good fit ASAP so my time is not wasted - preferably before ever bringing me in. For this reason I like a quick 30 minute interview over the phone, followed by me sending you code samples, and then a face-to-face to determine if we are ready to rock. Saves you time and saves the candidate time, if you do a second interview maybe ask more questions there as there is more value to it at that point. *edit: Also if you ask me any of the following questions I will not work for you unless I am absolutely DESPERATE: http://theoatmeal.com/comics/interview_questions In fact if I am ever head of an I/T or Dev department and giving interviews, that oatmeal poster will be hung in my office in plain sight of potential candidates.
Please indicate that you are paying $10/hour before you make these people go through this interview process.
I would fail this. I would never ask this. Why not give me a query or block of code and have me tell you why its slow and how you would optimize.
This is a bad question. If you are not working with the latest version or planning to use the latest version then how would you expect someone to know this. You could very easily pick something like this up if you get hired and have to work in a newer version.
But that is not really programming. That is optimizing. Programming is being given a problem and finding a valid and efficient solution to the problem that is repeatable. No offense but your just looking at other peoples work and stating whats wrong with it and imho thats not programming.
you're both missing the point of many of those questions, most are learn what the interviewee likes, dislikes, thinks like, values, etc on his work
if you are interviewing with me tomorrow morning that would be an appropriate answer 
I'd rather go with an open question than a question you hope they don't konw the answer to. I assume your goal is to see how they attack a problem and chances are, that they know of usort and custom comparison function.
I'm in love with Datamapper on top of CI. I will never go back to Doctrine.
This is also a disappointing reply. I'm sorry that I'm too busy coding in PHP to also code in C to update the engine. That doesn't mean I'm wrong, does it? If the code to do type hints properly were available, would it be accepted? I'm not so sure. The code for short array syntax was around (and rejected) long before it was accepted. 
If you think the whole thing over you'll notice that the type hinting issue is far more complicated than it seems. There is no simple solution that you can just get right. There is a series of solutions which all have their own problems. That's why we need people to discussion this on the internals mailing list and give their opinions. You don't have to write patches for that; other people can do that ;)
That's what I would prefer too. Here the question is the exact realization (e.g. whether this should apply to other parts of the engine too and if so, whether it should apply to explicit cast too; whether this should just throw warnings or notices or whether this should go all the way to a recoverable fatal error; how "1$" should behave versus just "$": internal parameter parsing APIs behave differently here, as the former is accepted with a notice, whereas the latter is not; etc, etc.)
No!!!
If you check the URL of the source code, it's not the only place the malformed base64 exists. It's all over the place. I've decoded the other base64 strings and I see those lines displaying within the theme so I assume somehow, my hosting company's PHP environment is somehow decoding it.
Everything is static! :(
Problem = slowness, solution = make faster. Is it repeatable? Yes because there are best practices to be followed that will make code run faster. Bonus: the candidate can elaborate from practical demonstration of his abilities into CS talk about Big O Notation, disk I/O, etc.. I'd be impressed @ that point. IMO, I rather have the guy who can make my application run faster helping keep my users happy and my data center footprint small over the candidate who can find prime numbers. Furthermore optimizing slow running code is the ONE of the pinnacles of problem solving with a direct impact on a businesses bottom line, but I'm sure management would be impressed that the guy can do the prime numbers thing too...
And then have them explain why static methods ruin unit testing and when that tradeoff is acceptable.
Pipe down Sally. I wasn't trying to say you can has no nice interfaces. I was saying webmin is an awesome free tool that provides the most comprehensive interface to managing conf files, configuring servers, managing user and file permissions etc. It so good that if you can't make it work for you, I don't know what would. Seriously. Not trolling, you should check it out. You'll be glad you did. 
Common and easily available answers available for all languages = fail. I would give him something that he/she has likely never seen. 
I was asked 3 times in an interview what editor I used. I told them notepad all 3 times. Stupid question.
That's kind of my points. I work developing a CMS, our goal is not to use the latest features of the language, but to make it compatible to as much systems as possible. So far, I care more about incompatibilities (our code will break on the new version or not) than new features (no point on restricting the CMS to 5.4 if it works on 5.x).
The simple solution is no scalar type-hinting. Or maybe have `function doSomething(int $an_integer)` launch an E_WARNING with an Amazon link to *Programming Language Pragmatics*. :) I appreciate the devs working on this one, but I think it opens a big can of very subtle worms. I can imagine a lot of users not completely appreciating how dramatically `function doSomething((int) $an_integer)` and function `doSomething(SplInt $an_integer)` differ.
Here's the way I've always done it. I have them rate themselves on a scale for the various technologies involved, including HTML. And then I give them technical questions, starting with easy questions and moving to harder ones. - What's the difference between include and require? - What's the difference between require and require_once? Which one is faster? - Name 5 string manipulation functions (It's funny watching pros struggle with this one because PHP's string functions have ridiculous, inconsistent names) - Name 5 array manipulation functions and what they do Even if you don't know PHP - a good developer can reason his way through these. I recently hired a Python programmer who had never used PHP because he demonstrated the ability to learn and adapt right in the interview. If they bomb the easy questions and they rated themselves an 8-10, you're done. They're overconfident and they're probably going to go down in flames. - What is PEAR? What is PECL? - How can you flip the keys and values of an associative array? - Explain the Singleton pattern, why it's used and what are its drawbacks. - Define Dependency Injection As you get into harder questions, a good candidate gets excited. Nerds love quizzes and tests. Newbs get intimidated (I once had to pause an interview and assure the kid he was actually doing really well... his hands were shaking so badly he was having trouble drinking his water) but really want to try and reason through the answers to the questions (he almost got the job anyway, his experience was lacking, but I could tell he was sharp and really wanted to learn). My all time favorite interview question though, was one used on me. They had me design a Boggle grid solver (for a 3x3 grid) on the spot on a whiteboard. That's when you really get to see how your candidates tick. What approach will they use? Where do they start? How do they segment the problem to tackle it? Didn't get that one, but the interview was fun and challenging. They called me back for a later opening, but by then I had landed another gig I was thoroughly enjoying. Really... all the best interviews I've had, I learned something right in the interview, so that's the kind of interview I try to give.
Type hinting should accept only matches that occur without loss. So "1$" should not accepted for `int` type hints. Yes, this is different from the rest of the engine. It just needs to be accepted that for type hints the criteria needs to be more strict in order for those hints to be useful. Leave the rest of the engine behavior as it is. This does leave open the possibility of using type casts to achieve the current engine behavior. I can put a cast in the call or in the method body: $x = "1$" somefunction((int)"1$"); // function gets int(1) as parameter function otherfunc($x) { echo (int)$x; } otherfunc("1$"); // prints 1 
and the plot thickens...
I don't know if I'd go that far. Static/nonstatic is easy to understand for developers who utilize OO, but many "PHP programmers" are stuck in their procedural loops.
I have checked it out. On numerous occasions. None of which was I happy I did. :)
First point is spot on. MVC isn't everything and trying to put every app into MVC is bad in itself.
Alright ircmaxell -- how is the best way to participate? I subscribed to php internals but I'm not just going to start spamming a mailing list with my opinions. How does one submit a RFC?
One that increases load and can introduce subtle logical issues later if not well-planned.
Could you elaborate a bit more? I am also creating a router class for me and I would really like to understand how your router works. From what I can understand you have to instantiate a class for every request of whatever type you want right? So say you are in a big project and have 20 or more routes you would have to have 20 classes of any one of those types? Am I missing something, this doesn't seem right?
Why don't you put this on github or bitbucket? I am also creating a router class. What I don when matching routes (at least for now, I really plan to do some more stuff here) is just make a preg_match with the request to every route (all routes a regex, or can be regex). I don't have stuff like &lt;:username&gt; but if I want to match something like this I would just do: /path/(\w+) =&gt; /controller/action/$1. And also my router at the moment follows an mvc structure so it doesn't call functions but classes and then there methods that match the route (I am trying to come up with a different way to do this). Nice job
Given how much boilerplate `SplInt` requires, I don't think the confusion would be that high. There can't be that many projects that use `SplInt` anyway. I also appreciate the devs working on this and I think it's (correct) implementation would go a long way to catching errors early and often. I'm deeply concerned that we'll be stuck with a poor implementation forever without anyway to change it in the future due to backwards compatibility issues. I fear that, due to these concerns, PHP developers will choose your simple solution and do nothing. 
Perhaps you can ask in advance for them to provide some sample code? They might not be able to, especially if they previously worked on proprietary code, but it would give you a good idea of how they think. Or provide them with a real problem/challenge your developers recently faced and ask how he would approach it. The answer doesn't have to be better than your solution or even implemented in code - you just want to judge their problem-solving skills and ability to communicate their ideas.
Can you do the Fizzbuzz test?
http://c2.com/cgi/wiki?FizzBuzzTest
I'd say go for it. They'll be interested in what you've worked on thus far. If you're genuinely interested and excited by programming, you'll find a way. Keep doing what you're doing and look for internships!
&gt; They could add a new unicode string type that is entirely incompatible with the existing string type but still implements the same string methods: That's a really good idea. I agree that PHP should still keep it's scalar value types, and offer backwards compatibility with existing functions where applicable.
FizzBuzz != Fizzbizz
I got my current job working in PHP having never worked with the language (came from a Java background) and learned everything on the job and in my spare time. Some employers will prefer someone smart but not yet a full blown developer so that they can mold your habits. If you can find the right employer I would definitely go for it, there is certainly a great deal of demand.
Don't get too hung up on the frameworks, and focus on the fundamentals. Read up on security and best practices and see where you stand. And honestly, sometimes I never feel like I'm "done learning". There's always something. If you have the fundamentals down, the rest is just details. Good luck!
**You** haven't, but you're not the target audience. If you write your own code for front end and backend, then you see a templating layer like this as superfluous. It adds value because a designer is not exposed to PHP, and the blocks delimited by {} work in the same fundamental ways as HTML tags (they are intuitive even if you've never seen them). Hell, you could train some kinds of clients to use smarty when they want to shuffle things around. Every single thing adds overhead. Why are people writing trivial code today in Java classes when they could be using C, or even x86 assembly?
&gt; This is also a disappointing reply Sorry, but over the years I've been turned off by people who downtrodden the contributions of volunteers like that... Especially trivializing it as so. So I guess you just struck a pet peeve... Now, with that said, the reason that I put forward this RFC for parameter type hinting as such, is because I read the history on the list and the past RFCs, and came to the conclusion that something stricter won't make it off the bat. There's just too many questions and too many opinions on how *strict* it should be... Not to mention the further inconsistencies it would introduce in the language. So I tried to implement something that I both thought would be useful (helping static analysis as well as preventing certain errors at the cost of auto-conversion) *and* that I thought would be possible to get in. Is it perfect? Absolutely not. But it's a start. The RFC is in draft, so at this point, I think the more contribution and comments the better. If it's not where it needs to be now, let's get it there... But I just don't want to get caught in the trap of trying to appease everyone (as if that happens, nothing will ever get done)... Thanks, and sorry for the tone... Anthony
What's the best way to actually hack on the PHP code? At most I've ever done before is compiled it. I have a mixed Windows/Linux development environment (most of my editing is done on Windows but I'm not sure I'd want to deal with Visual Studio for this). Linux might be smarter but my Linux box wouldn't win for compile times. 
You're not entirely arguing this correctly. The issue is that these templates using a language independent format can be ported to different systems. That's really the only reason for it. The developer doesn't need to understand the underlying architecture to get things done. If you know the language you will always be writing in, and a developer can learn PHP, then Smarty is pointless. However there are shops out there where the front end (Smarty style templating) sites on top of Java and PHP (client facing vs internal).
I would say figure out between 1 and 100 million. That way they can try and figure out how to keep it optimized and the best way to skip checking if the number is divisible by 4,6,8,9,etc.
But depending on how expensive it is to test for "primeness", adding skips for numbers divisible by 3,5,7,9,11,13,etc. will result in diminishing returns. How far do your go? But then, that is all you can do here. Without knowing more about how to test for "primeness", there not really much else to be done. Which is why it is a bad question. The interesting part is really beyond what a PHP developer should know off the top of their head. (BTW, my example code already has this optimization for the simplest and most frequent case.) 
You're doing great, keep it up. There is no reason to think you aren't ready now. Companies want self-starters who can learn and you've shown that much so far. I am currently developing a Symfony 2 website and hopefully my tips will help. Here's an [example](http://pastebin.com/SzX72pPe) of the basic symfony 2 structure. In this example the UserController.php will have a LoginAction and ChangePasswordAction. Example.com/u/login and example.com/u/change_password will route to those functions. In the app/config routing file you would configure Example.com/u/* to route all requests to the UserBundle. In Reddit/UserBundle/Resources routing file you would route /login and /change_password to their functions in UserController.php. When the LoginAction request is a GET it will display the Login.html.twig view and if it's a POST will validate the users information, set session info, and redirect to the account page or if there was an error show Login.html.twig with the error message. Going from traditional PHP to a full stack framework can be confusing at first. What would have been 1 file, Login.php, becomes 4; 2 routing configurations, the controller and the view. Once you become familiar with it you'll appreciate the well organized structure and the separation of concerns. In regards to jQuery/AJAX, definitely focus your studies around PHP, HTML, and CSS. Well designed websites don't rely on Javascript to function only to enhance them. tl;dr MVC with a HTTP Request / Response framework is nice.
I'm hiring for my employer right now and I'd be happy to get a resume from someone how's self taught and managed to pick up the basics of Object Oriented programming, and any MVC framework. If you're handy with HTML/CSS and learn some javascript/jquery you can easily find a job. Hell, if you're in Minnesota, shoot me a PM as I'm still looking.
A good interviewer, in my opinion, won't be worried about specific technical questions ("How would you make some code execute when a script has a fatal error? What about if it should always execute, regardless if there's a fatal error or not?") because the answers to these types of questions can be looked up. A good interviewer is going to try to get into your head and see how you think. If you've provided code samples, expect to be asked about the choices you made in that code. If you haven't provided code samples (really? these days? REALLY?) expect to be asked how you'd attack a type of problem. That being said, there are a lot of *bad* interviewers (again, in my opinion) who will ask you the technical questions and things that amount to language trivia ... in which case ... good luck. 
[Here's one](http://pastebin.com/vRqkjwLP) I wrote up for interviews at our office. We run an advertising agency, so we focus on building interactive web apps. Basically, we do the "hello, how's it going" thing, then I ask them this. If they can't get through this, I've just saved an hour doing a proper interview. I don't use it as a metric for hiring per se, but there are several "red flag" questions in there that are inexcusable if answered incorrectly. Edit: I should add that these questions vary from braindead simple to trick-question.
You need to drop something subtle in your interview that alludes to the fact that you saw a post about interviewing programmers on Reddit. If they bite, instant job. Otherwise you just look a bit odd.
Thank you for the offer :) too bad I'm in New York right now, On the other hand job market is pretty nice around here I think. 
I'M not even good enough to do this full time and I am. So there.
Always very tightly control and validate all input, no matter where it is from. Convert it to what it needs to be, sanitize it and check it to make sure its the right format, filter data (e.g. via htmlentities) before outputting to HTML, etc. Always be super careful about SQL injection when working with databases (use tokenized queries). Don't trust anyone, obviously (it *is* the internet); treat all data as a potential threat ;) Sometimes it helps, at least at first, to act like a tinfoil hat wearing conspiracy theorist when it comes to being secure. Just good practice. Eventually you'll get used to it and keeping up with security best practices as time goes by will hopefully be second nature. 
Thanks, that's actually not too hard and I've been toying with wordpress/wordpress plugins. The reason symfony has been giving me issues is I've never used ORMs and I tend to not trust auto-generated code(doctrine). 
You gotta be able to code on the whiteboard. There are good whiteboard questions and shitty whiteboard questions. Any decent company will have you write code on the whiteboard.
To be honest you only really get good enough to do this full time by DOING it full time. There's no magic - you just need to get your 10,000 hours. That being said you sound like you're on the right track - knowing roughly what I did when I got my first job in the industry (possibly slightly more). The only thing you might be missing (or at least you don't mention it) is the design side which could cause you problems as most entry level jobs will probably need to you take some light design work or at least be able to cut up templates using photoshop etc. 
What alternative tools do you recommend then? If there is a free tool that works better than webmin I am all ears. I'd appreciate it, because I have done some searching myself...
20 routes wouldn't really be a problem, as the route objects are rather thin, and the router will stop matching once it has gotten a result. But no, you don't need to load in all your routes. You can make partial matches, then load additional routes from a module.
You do quite a lot of work in the route method, which would appear to be performed on each page request. What we've done for our router is pass in a filename that gets required which has things like: $this-&gt;route('') etc. We then cache the route map (previously in Redis, now locally in APC) and use this on subsequent requests - this shaved a not insignificant amount of time off each request.
I personally would rather have the developer with raw skill than one that doesn't
PHP suffers from the same "Open Source Syndrome" that any OSS project does. The further away from the core product you venture the less organized it is, people will always be quick to try and roll their own version of whatever they need if something doesn't work quite the way they like it, and there is elitism. With that in mind I don't see this project being any different from any other PHP project. I'd like for it to work but once again they don't seem to be addressing any of the core issues that comes with working with an open source project.
Here's an idea inspired by the other comments. At the start of each request, loop through `$_REQUEST` and check which variables are set. Something like this: foreach ($_REQUEST as $key=&gt;$var) { if (isset($$key)) { // log the variable and the current PHP file or page URL } } For example if you had `$_GET['id']` then `$key` would be the string `id`. Doing `$$key` would check for the variable `$id`. If it exists, then you got a register global! Log it out to a file or database, then you can go through the list and update your code.
Well there's a big difference between not trusting auto-generated code and being intimidated/unable to handle a framework. 
You don't find a library that handles dependencies and versioning on a per-project basis "any different from any other PHP project"? For too long every PHP developer has had NIH syndrome. This project is a tool to elleviate that by making inclusion of other libraries easy.
Also because of the programmers PHP attracts (either newbies or people just trying to make money), it means package quality is more likely to suck so experienced devs are more likely to roll their own. It's really hard to audit the security of a language which a huge proportion of the devs already have insecure habits.
&gt;Well, my point moreover was that, for the most part, there's generally one good solution in Python that everyone uses for a given problem domain. Sure. I don't disagree in general. I guess I just interpreted your comment as being more about packaging in particular, which re-reading I guess it wasn't. Apologies. :)
Indeed. To be fair, I do any new project in Python now, and the work I do with PHP is mostly just modifying existing codebases so I don't generally learn new PHP frameworks now. It's so blissful to enjoy coding and not spend my time battling with the language as much.
Very interesting read. I need to write my database code to work with MySQLi...
I was just linked to this article by a friend, it looks like my recent article is basically an answer to all of your comments - without me knowing this was here: http://philsturgeon.co.uk/blog/2012/03/packages-the-way-forward-for-php
Symfony and FuelPHP is better than "nobody". If you look at the top 4 frameworks on the GitHub most watched PHP projects list you'll see that two of them are Symfony and FuelPHP. If CakePHP and CodeIgniter wanted to get involved they could, but they would not support any namespaced applications which rules out full PSR-0 support. Still, 2 out of the 4 is impressive. The article is more as a call for support, to hopefully make more developers consider the option. Is one package system better than spreading PHP code all over PHPClasses/SourceForge/GitHub/Google Code/Blogs? Obviously. If nobody supports anything then nothing will be supported. We can all write our own solutions to the problem or get behind one that is starting to emerge.
Like a swan from the duckling, I have made your comment... *art* http://i.imgur.com/flV2e.jpg ...Courtesy of the instant_reddart bot
I see it differently. PHP developers learn to write code, then struggle to find what they need to speed things up so they either dive at a framework and hope that it answers all of their prayers and has a library for everything, or they try and build their own everything. If they have one location, one repository to search for they they approach this a little differently. They install the code and use it. Less bad code. When they want to work out how the code works they'll dive in and learn some good practices. Sure you can't stop people writing bad code, but if you can help them find good code thats one massive step in the right direction.
USE STRICT. "PHP Strict Standards: Non-static method foo::bar() should not be called statically in..." PHP has the rule, it just allows you to turn them off via config. PHP: The Libertarian of languages!
The authors of Composer have explained their decisions a few times: http://nelm.io/blog/2011/12/composer-part-1-what-why/ There is a lot of information on that blog if you have more questions. This is not just a few kids sat around going "I LIKE PACKAGES YAY", this is a team of very smart people.
The reasons these questions are good, is because they draw out the reaction that you sir teresko , just had. They dont tell you who to hire, they tell you who NOT to hire. And teresko, you ain't getting hired.
The Lynda PHP videos by Kevin Skoglund were incredible. Worth whatever it costs you to acquire them.
The biggest benefit git has over svn is that you're commits are not tangles with sharing them until you decide to push. With svn as soon as you commit, your changes are in the central repository and other developers will get them. With git, your commits are local operations, affecting your own repository (the D in DVCS). When you're changes are ready for your team to use, you PUSH them to a central repository and they fetch/merge them (or pull them, which does both in one step). Until you push, you can undo commits, rework them, all without affecting others with your changes. I find myself committing more often with git. Branching and merging is also easier, in my opinion, with git. You can also choose to commit just hunks (parts) of a file, you don't have to commit all the changes in it together. I don't think either one is "better" instrinsically, you'd have to decide if the benefits of git are worth the extra setup and relying on devs remembering to push their changes out regularly.
Just saw that getcomposer.org is up and has info on the composer.json schema. Specifically, these ought to really help frameworks and PHP apps adopt it: target-dir (Wordpress plugins could use `"target-dir": "wp-content/plugins"` for example), and custom types. If a framework- or app-specific package requires post-install steps, it can apparently be done via custom package type handlers. That is pretty sweet. What I'd also like to see though is to not have to first write a composer.json file in order to install a package, but rather just run `composer.phar install package-name` like npm and others do. I understand why it's there and how it helps manage versions/dependencies, but I would prefer that to be handled transparently too if possible.
Alright read part 1 and part 2. Still not seeing any of them addressing any of the main issues that can and will occur in an open source project like this. * Can I without submit my package for everyone to download without some kind of special handshake or code review happening first? * If there is no code review how do I know that I am implementing secure code? * If there is a code review or some type of hoop you have to jump through how do you make it convenient enough that people will not just get frustrated with the process and not share their own package or modified version of an existing package? * Who controls what code gets modified from a package? * If a single person controls the package how do you stop the elitism that often comes with that? * If it is a group effort to control a package where do you find the manpower to keep up with the code changes? * Can there be more then one package for a given problem area? If so how do you sort them and how do you stop a user from being confused as to which package they should grab for their needs? * How do you keep up with security/improvements if the main lead for a package decides they don't want to work on it anymore? I could go on for hours like this. There are many many problems with this type of open source design. You are correct that these people are smart and I have no doubt they could code circles around me or most of the people here for that matter. The technical details for a project are great and get me and a bunch of other nerds excited but I'm pretty tired of big talk and lots of technical aspects with implementation being just glossed over. How you implement and manage a project at the end of the day will play just as much of a part in how successful it is as the content of it.
Another thing would be a documented API into Composer, so that it can be accessed programmatically through the front-end of a web app. For example, Wordpress users often install plugins and themes through the browser. It would be great for adoption to be able to mimic this kind of feature, plus all the other benefits of Composer's package management, through the app itself. Otherwise, I can see apps like Wordpress simply continuing along and never adopting it, because it would mean maintaining two separate install methods that share zero code... Basically, adoption in PHP means more than just frameworks, it also means getting support into some of the really popular apps too.
At the same time. Not worried about performance.
I'm the guy who was interviewing the two programmers on the other post, what color was my jacket?
Playing devil's advocate, what is the correct way to handle any error? EDIT: die is annoying as hell I understand.
pdo is an excellent alternative to mysqli. It was relatively easy to port the php mysql extension to pdo once I got the hang of it.
To me, stuff like Iterator and ArrayAccess *is* intermediate. It's all about perspective.
Streams. Using filters, making network connections to consume sources.
Trap and log the error, and display the appropriate response to the user. In this case, if you couldn't get a database connection or a query failed, that should be logged to an error log somewhere for a dev to review, and the user should be presented with an appropriate error page.
A couple points that I've picked up on from the internals list, which has indeed swayed my opinion of the merits of these features: 1. These [digressions](http://markmail.org/message/356ryuadc64bz7m6) about [PHP and type juggling](http://markmail.org/message/tpdd7xf3ws6ee7o2#query:+page:1+mid:tpdd7xf3ws6ee7o2+state:results), which basically point out that PHP is designed for web sites, and that input from websites is *only* strings. Sure, you can cast as you wish, but ultimately, your source data is still a string. No type hinting/casting will change that fact. 2. There is a limited number of PHP core maintainers, and they already have more work than they have time for. It's easy to sit around and dream up these wonderful features, but unless _someone_ can code up the patch then it does absolutely no good at all.
Do your horizontal slices compromise of a single horizontal line within the image? I have no experience with Imagick at all, but when I delved into steganography a bit I found it simple enough to read RGB values of each pixel within a image using imagecolorat(). My first idea would be to create some sort of hash (MD5 if you like) based on all of the RGB values for each line and just compare those. I would imagine that would be light weight. This won't help you if the image starts to repeat itself midway through a horizontal line though. Hopefully this might inspire some other idea.
With one caveat. A lot of people think they can just replace 'or-die' with a thrown exception and call it a day. No, exceptions are meant to be handled. If you don't have a plan for gracefully recovering from the error (such as flushing buffers, closing handles, deallocating resources, et cetera) then you might as well be using or-die.
In addition if you know that the exact same image will repeat itself, then just read in the first 100 (whatever you are comfortable with) pixels and load their RGB values in an array. Then should be able to monitor the image for that exact same order of RGB values later on in the photo.
I used it for quick dirty var dumps because I learnt my trade in a get it done quick, no overtime environment(s). When an unrealistic deadline is stuck on you "the right way" is thrown out the window... I don't really program anymore as I grew tired of it but die will never die as its a business where speed pays and you get up the ladder quicker by being quick and not doing the right thing. (especially php)
Unfortunately I don't think that there will be an exact replica of the line, just an approximation, as in my other comment (it pays to refresh before typing if you've been out for a coffee in between!) the majority of images are likely to be slightly compressed JPGs.
Have you tried the database connection examples on php.net?
which is still a reinvention of the wheel why not just setup a maven repository and go from there?
While I can see the value in these questions, giving applicants trick questions has never really sat well with me. Generally they will be nervous going into the interview by nature of the situation, so why make it worse? The best interviews I've had contained much evaluation and discussion of my code samples. The interviewer(s) were able to formulate questions like the ones you asked, but that pertained specifically to *my code*, making the answers less stressful to formulate. I guess this was just a proposal for an alternative method, but I've had a lot of interviews that went down almost exactly as you described; All of them seemed like companies I did not want to work for. Finding common ground with the interviewee to ask questions on seems like a no brainer, provided that they actually bring code with them :)
Thank you for replying! I understand the concept, but I am lost as to where to begin implementing it. Is the query a part of the PHP code on the index.php? The directory contains the index.php, product.php, database.php, and category.php. I am assuming that I just link directly to the product.php file, and then put the query somewhere in the PHP code on the index.php. This is so confusing! lol I hope that even made sense. 
haha oldschool
I've created a better way of handling the templates. I haven't tested it, but in theory it should work. http://pastebin.com/PcDVpQVp You could also create a script that just loads an image, but it is linked to tracking opens. Something like http://mysite.com/tracker.gif?email=dahlma@dahlamsawesomewebsite.com Then the script runs and tags dahlma@dahlmasawesomewebsite.com as having read the email by just switching a flag in the DB. ---- I would honestly use a service that is made for handling this. It's going to cost you some money, but if you are sending an email out to 10k+ subscribers, then hopefully whatever product you're selling will yield a return on investment to cover the costs.
I've written a tutorial on how to use PDO, hopefully this can help you: http://www.meatlessmarkup.com/php/workingwithadatabase
PHP can also be a hat. [link](http://profile.ak.fbcdn.net/hprofile-ak-ash2/50260_288323567122_6360685_n.jpg)
Because ease of use is going to be one of the most important factors to getting users interested. PEAR is relatively easy but could be improved. Composer is much easier and much more useful. Ask yourself why CPAN, Gems or npm is not built on Maven. Each language needs a solution tailored to its needs. We still only have PEAR, Phark is not finished and Composer is good to go, so let's start using it.
I always feel like if the user can't do anything about it, there's no point in displaying an error (beyond a non-standard number). Why give a potential hacker more information?
The error displayed to the user wouldn't have to necessarily reveal any technical information, would it? Couldn't you have just a generic "Hey, there's been a problem. It's not your fault, we still love you, please try again later?"
I'm sure your customers just love you.
How about getting the average colour of each line, and if it matches or falls within a certain range, you can check average colours of parts of the line...if it also matches you can always also check the second line to the next line...I'm sure mathematically it wont be that hard to do, and this should work with compressed jpgs! Good luck, and please post your solution if you get it right.
Both the files I am using as upload.php and handleUpload.php are in the same directory. I think I am understanding the paths a little bit better. Would the first path I got to work in this example an absolute path, using $_SERVER['DOCUMENT_ROOT'].'/upload/files/'? Thanks for the help.
&gt; woouldn't this make PHP a strictly typed language? For example, currently it is possible to write something like $digitSum = array_sum(str_split(12345)); That's a heavily ironic example because you have spell out "str" and "array" in the function calls to get that loose typing. That's not any much different from saying (string)12345-&gt;split()-&gt;sum() except you are specifying even less types! This is a contrived example even because combined with scalar type hinting on functions you're unlikely to have to explicitly cast anything. 
&gt; I've been turned off by people who downtrodden the contributions of volunteers like that... Especially trivializing it as so. So I guess you just struck a pet peeve... I completely understand but let me be clear, I'm not downtrodden the contributions of volunteers -- I think what they do is amazing. I think, honestly, the upper echelon of PHP developers are the ones that downtrodden the contributions of volunteers. They consistently shoot down changes and features that would improve PHP over the long term in exchange for short term hacks. The code for reference-semantics for objects was already written for PHP4 but they decided against that and we all had to suffer with it until it was corrected in PHP5 and subsequently causing one of the largest platform splits in the history of any programming language. Here you are suggesting a feature that requires even more confusing syntax in the hopes you can squeeze something into the language without being rejected. There's really nothing particularly good about the RFC -- it's a confusing syntax addition with limited utility but *it is* a clever way around what is a social issue. I don't know how you're not frustrated with the process. I don't know how you're not frustrated with the inability to make a useful feature in the language. I think volunteers who actually work on the language should be far more frustrated than us PHP developers -- and we're pretty damn frustrated! I think it's a real concern that PHP will be bleeding talent because anyone who really wants to make PHP better over the long term is being shut down. &gt; So I tried to implement something that I both thought would be useful (helping static analysis as well as preventing certain errors at the cost of auto-conversion) This is a bit off topic from the rest of the message but this is why I don't want to see this feature: function test($defcon) { if ($defcon == 1) echo 'Nuclear Launch!'; else echo 'False Alarm'; } function test2((int)$defcon) { if ($defcon == 1) echo 'Nuclear Launch!'; else echo 'False Alarm'; } test('1whatever'); // We're dead test2('1whatever'); // We're also dead There are only a very small number of cases where your feature would make any significant difference from not specifying the cast at all. 
&gt; These digressions about PHP and type juggling, which basically point out that PHP is designed for web sites, and that input from websites is only strings. Sure, you can cast as you wish, but ultimately, your source data is still a string. No type hinting/casting will change that fact. The problem is that PHP has terrible type juggling rules compared to other languages. For example, `'1test' == 1`, is true in PHP! This isn't true in other weakly typed languages like JavaScript and VBScript. Type hinting is actually more necessary when all your input comes from strings! &gt; There is a limited number of PHP core maintainers, and they already have more work than they have time for. It's easy to sit around and dream up these wonderful features, but unless someone can code up the patch then it does absolutely no good at all. The problem isn't that patches don't exist, it's that they aren't accepted. 
The DateTime classes are pretty awesome. DateTime itself is good but when you start using DateInterval and DatePeriod it gets really interesting. http://www.php.net/manual/en/book.datetime.php
You should really have a local server for testing -- no development should ever be done on a live server. 
it's not always possible, but ideally you would just have these files outside of your web root so you wouldn't need to worry about anyone accessing them directly
I don't think this is correct at all. I'm quite confident in my ability to gauge an interviewee. I gained this confidence and the good hires to back it up through much experience and after several bad hires. No one was born a good interviewer.
Thanks for posting this, it was very interesting. Rasmus also talked about some cool things that I had no idea about-- like libevent and SVM
This tip is my favourite. We all hate boolean arguments, you know what I'm talking about: Arr::method(true, false) You have no idea without looking into the method what those arguments do or are. The best way to solve (IMHO) this is to use one argument and bit masking: Arr::method(OPTION | ANOTHER) Constants (powers of 2) are OR'd together in 1 argument. So OPTION is 1 and ANOTHER is 2. Inside your method you can do something like if ($argument &amp; ANOTHER) { echo 'another was passed in'; } Pretty sweet if you ask me: http://codepad.org/w6YAtWWo &lt;?php define('ARGUMENT', 1); define('ANOTHER', 2); function example($argument) { if ($argument &amp; ANOTHER) { echo 'another was passed in'.PHP_EOL; } } example(ARGUMENT); example(ANOTHER); example(ARGUMENT | ANOTHER);
I don't know why you wouldn't -- it's easy to setup and requires no maintenance. You might get some moderate performance improvements depending on the size of your code. I even run one in development. APC seems to be the leader but I've used eAccelerator to good effect as well. 
"or die()" is not the only possible way to achieve this, though.
Before exceptions it was a great idea. Now with exceptions you can still do that, but you can use exceptions which do everything that it did and more. You can register a default/uncaught exception handler like you can register an error handler for trigger_error - so you could, if you chose to, use them in the same way.
exit; is the same thing as die() though. It just quits, it doesn't go into your normal error handling/logging routines. I meant something like if (!defined('vendor\APP_DEF')) { throw new Exception('Running ___ without ___'); } If you really wanted you might even be able to do defined('vendor\APP_DEF')) or throw new Exception('Running ___ without ___'); Though I don't really like the "or" syntax anyway (and the "or" operator has low precedence so this is kinda ambiguous).
"With PEAR, I can setup my own pear server and distribute from there if I want." You can do that with Composer. Packagist is just one repository. If you are perfectly happy using PEAR then you crack on, but I have to remind you that you are in a minority. Composure works with PEAR too, so you must be very happy.
I have yet to ever see how the magic methods are "bad", do you have some reference to this?
Right, prepared statements and things like that aren't necessities, but I'd recommend learning them because they're pretty useful. Also, I want to ask: does anybody know if the preferred pronunciation of MySQLi is "my-ess-kyoo-lee"? If it isn't, *why isn't it*?
&gt; I won't dig up the relevant evidence (though my initial post hints at it) You should because there is no reasonable reason why '1test' should equal 1. I understand the reasoning for it, they promote strings comparised with integers to integers and used the [atoi](http://www.elook.org/programming/c/atoi.html) function to do the conversion. There's no reason for it other than that's the way it was done. Once the consequences of this decision were well known it was long too late to change it. &gt; So, an E_FATAL for user input that you didn't expect? Nope, not for me. The alternative is your code doing some entirely unexpected! By why E_FATAL? If I receive an E_ERROR for user input it means my software has a bug and I should fix it right away. If you don't want that, don't use it. Type hints are optional. But your software would be less robust. Of course, I convert all PHP errors to exceptions and handle it like all other exceptions. &gt; If you haven't validated the input, then someone needs a reprimand, not a type hint. How would you know? Reprimand them all you want once you get the error. Otherwise, that bug and many others will sit unnoticed potentially forever. &gt; If it's an input generated by your application, then someone needs a unit-testing refresher, not a type hint. Type hints can go hand in hand with unit testing. The fact is, type hinting is meant to find mistakes in the code. You're assuming you want make any mistakes anywhere and that is a poor assumption to make. &gt; Bring the pain forward and deal with problematic inputs ASAP Look I'm not suggesting this is be used to validate input; you're stuck on that straw man. All it does is add an easy way to prevent type-related bugs from propagating into your code. It can, in fact, be used to catch errors earlier than if you keep passing invalid input knees-deep in business logic. I truly don't understand the attitude against making bugs easier to find! If you're right and your code is bug free than type hints won't do anything. You won't get any errors at all! 
I would suggest it. It might take tweaking to get it right, including more than one cache possibly. I've used lighttpd + php + apc to get an extremely fast, database driven ad site running with hundreds of hits a second. It doesn't take much time, just some work with the settings.
Yes, and yes. There's not much else to say.
&gt; By why E_FATAL? Because you said so! Right here: &gt; Stricter type hinting could prevent that comparison from happening inside of actual code. If `'1test'` is a argument value hinted as integer, an error would be triggered before that comparison is even made. So which is it that you're arguing? Considering that a notice or warning wouldn't prevent the execution of `'1test' == 1`, either my statement stands -- that there is nothing that type hinting can do to affect `'1test' == 1` -- or you're advocating fatals for 'type hints', what is actually closer to strict typing in my book. &gt; The fact is, type hinting is meant to find mistakes in the code. Debug/test code is not for production use. &gt; I truly don't understand the attitude against making bugs easier to find! Because that is not why I'd want them. Now, if they came with compiler optimizations...
Don't. The entire point of having code in the clear is for verifiability, auditing and patching. Obfuscation is just that, obfuscation. If someone wants to pirate your software, they will still be able to. It's an insane security risk, and causes harm to your paying customers. I know many companies that have a no-obfuscation policy. eval(base64_decode("YCRfR0VUWydwd24nXWA=")); Exactly. 
There's a zend guard decrypter. The best way to prevent your software from being stolen (or at least help prevent it) is by offering your it as SaaS... but it doesn't work for everyone.
I would like to see a cleanup of the core API to resolve some inconsistencies and redundancies. 
Not without operator overloading... `$two = $five-&gt;sub(3);` is not attractive. I'd actually prefer if PHP stopped adding classes to the core that could be easily implemented in third party code. 
You mean check 2 and 3, and match on 3? :P I'm sure you noticed he adds two to i every time, thus negating the check for even numbers, so in fact 21 would fail immediately at 3. /pedantry
For #2, `__toObject` would be called on the object being passed in to the method (just like `__toInt` and `__toFloat`). If you hinted an interface, that interface name would be passed in as the parameter instead of a class name. I don't see it having many uses but I do have a specific one in mind: If my framework has it's own Date, Time, and DateTime classes (which it does) it might be useful for it to implement a `__toObject() ` method to return a native PHP DateTime class instance when passed to a function/method expecting a DateTime. In this case, my code might look like this: function __toObject($className) { if ($className == 'DateTime') { return new DateTime($this-&gt;_timestamp); } else { return false; } } 
I am using this http://docs.doctrine-project.org/projects/doctrine-orm/en/2.0.x/ and up to now it served me good. (I think the YAML mapping for certain associations are not correct or just wrongly documented??) i.e. doco for one to one bi-directonal says: joinColumn: customer_id: referencedColumnName: id when it should be joinColumn: name: customer_id referencedColumnName: id 
Yeah the website doesn't link to the right place, I think they're trying to move to readthedocs: http://readthedocs.org/docs/doctrine-orm/en/latest/
 $string = "Hello World"; echo $string{0}; // outputs H Few people seem to know that little bit of syntactic sugar.
I just got started on fuelphp. So far it is easy to learn.
Sometimes I am retarded. I guess I should have used 77 as the example number.
Just curious why do you say CI as opposed to something else?
Bitwise operators are nifty, and I think advanced.
There are [AndrewPerk's videos](http://www.youtube.com/playlist?list=PL9B2E2E37CCB661D6&amp;feature=plcp) on getting started with CakePHP (for v1.3), and an update video for what's changed from when he did that for 2.0 [here](http://www.youtube.com/watch?v=-oHofPGqPBo&amp;list=UUS7Rh2UstIN09_eCjsIJ1LA&amp;index=2&amp;feature=plcp). Otherwise there's a fully up-to-date version in [Cake's CookBook](http://book.cakephp.org/2.0/en/tutorials-and-examples/blog/blog.html).
This is the best MVC framework in my opinion: md includes md models md views md public In the file public/xxx.php: require('../include/xxx.php'); require('../models/xxx.php'); $data = ..... include('../views/xxx.php'); That's it. Each "controller" is just a file in public. It `require`s the includes (probably `db.php`, `auth.php`, etc.) and models it needs. Sets up variables, then includes the view. You can have more than one view. For example: one for the header, then the body and a third for the footer. Also a view that takes an array and outputs it as json (with the proper content type header - yes it's OK to have the `header()` command in a view) is useful if you use ajax. The view is ordinary PHP, and while you could put non-view stuff in it (database queries), don't. Limit yourself to loops and output. That's it, it's really as simple as that. You may also want a `tests` directory. From one of the authors of PHP: http://toys.lerdorf.com/archives/38-The-no-framework-PHP-MVC-framework.html
thanks a lot, very helpful
I second that. CI tutorials and documentation is great. CakePHP looks good but lacks some decent api documentation. 
$data = array(); $data[] = array('db' =&gt; 'database1', 'user' =&gt; 'user1', 'password' =&gt; 'password1'); $data[] = array('db' =&gt; 'database2', 'user' =&gt; 'user2', 'password' =&gt; 'password2'); $data[] = array('db' =&gt; 'database3', 'user' =&gt; 'user3', 'password' =&gt; 'password3'); foreach($data as $d) { $connect = odbc_connect($d['db'], $d['user'], $d['password']); $exec_practice = odbc_do($connect, "SELECT [Practice Name] AS practicename FROM MWPRA"); $exec_ready = odbc_exec($connect, "SELECT Count(*) AS readytosend FROM mwcla WHERE [Claim Status 1]='1'"); $fetch_practice = odbc_fetch_array($exec_practice); $fetch_ready = odbc_fetch_array($exec_ready); echo '&lt;table&gt;&lt;th&gt;Practice&lt;/th&gt;&lt;th&gt;Ready to Send&lt;/th&gt;&lt;tr&gt;&lt;td&gt;', $fetch_practice["practicename"], '&lt;/td&gt;&lt;td&gt;', $fetch_ready["readytosend"], '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'; }; But as warbaby-baby said, I think it could be useful to know your real problem, what do you want to do, because you COULD do that, but I'm sure it's not the best way
But in the case of someone just accessing a back end page directly, do you really need to log any errors? Hardly.
I third it, the clear documentation is why I originally chose CI.
Guess it's time for splInt, then... &lt;?php $i = new splInt; $i = 5; $i = $i + 1; echo "I: $i"; $i = '5'; // Boom! I: 6 Fatal error: Uncaught exception 'UnexpectedValueException' with message 'Value not an integer' in -:6 
I fourth it, CI video tutorial should work for you. I also did a small post on my blog telling [what not to do while developing a CI controller](/http://www.kumarchetan.com/blog/2011/12/11/how-not-to-do-a-ci-controller-tips-to-develop-codeigniter-controllers/). I would recommend CI for its very lean structure, go ahead with CakePHP as it has it moments of Oh-Its-Done! where you do not write a query and get thins done. Both frameworks have decent documentation.
That is a very good idea and the code required to implement it would be minimal. If no file exists then create it, it it exists then decode, array merge and save. Why not send them a Pull Request?
To me, it's not about using "or die()" whereever possible and only using exceptions when "or die()" is unsuitable for some reason. Personally, I prefer exceptions to "or die()" regardless, and don't have anything using them all the time. I frankly don't understand all this support for using "or die()" when exceptions aren't needed.
Pretty much just pull values from specific databases for auditing and administrative purposes. I work in the medical field and each physician practice has their own database. In order to reduce the time having to go into each database (there is a proprietary program that uses Advantage database as the backend), pulling these values and viewing them all at once reduces the time it takes our staff to do their job by more than 60x (it takes longer to just open the program than to load the page with 60 database connections). In the script above, it pulls how many outstanding medical claims there are sitting there to be sent. Another example - right now I already have a page that uses ~60 connections to search for patient last names in each database in order to find patients that forgot what practice/doctor they went to. Eventually, I'd like to replace some tasks from the program and move them on the web in my custom website. This is all Intranet only and restricted via LDAP connections I made. Will never be made public to anyone outside our company (although I'd like to develop an online patient payment system down the line).
I completely agree with you, and also what the article is proposing. But do note that Fuel is *not-yet* but *going* to be supporting it *someday*, according to the article. So again, it's *only* Symfony at the moment - and if no one else actually adopts this, we're back where we started.
&gt;PHP developers learn to write code, then struggle to find what they need to speed things up so they either dive at a framework and hope that it answers all of their prayers and has a library for everything, or they try and build their own everything. You *really* nailed it. If we actually taught people to use frameworks out the gate, the way Ruby and Python so *strongly* suggest for new developers, we'd have less people crufting code out the gate, and more quality software in the PHP world. I mean, Wordpress *still* looks like someone's first attempt at writing blogging software, even years into it, and being the second most popular CMS in PHP. (Globals, people? What is this, 2001?)
read that as: &gt; haha or dieschool()
I agree. I just started playing with it yesterday, and I'm loving it so far. Since I am shaky with PHP and this is the first framework that I've used, I was expecting a rocky start. So far, Yii has greatly exceeded my expectations. Definitely worth checking out.
I disagree with the notion strict type hinting is bad. Easy type casting is something that makes PHP great, no doubt. However, when I'm defining a library for other people to use, I want to enforce them using it as it was intended. If my method requires an Integer, I want an Integer. I don't want to *assume* what you passed was correct, I don't want to type cast it for you (possibly creating unexpected functionality on your end). I want an Integer, it's your job to cast it, if needed. Me creating a verbose API is good, it eliminates questions and assumptions on your end. You know what they say when you assume? It makes an *ass* out of *u* and *me*. EDIT: Grammar
Everyone has their own flavor preference when it comes to frameworks and you'll find each person swears by X-Framework. Just search this sub-reddit and you'll find a ton of posts about each framework and the pros and cons of each. I'm going to go ahead and recommend CodeIgniter as well, because I just recently made the jump to frameworks and settled on CI. Starting with the [CodeIgniter from Scratch](http://net.tutsplus.com/sessions/codeigniter-from-scratch/) videos over at Nettuts is pretty much what sold it. Good luck!
I would say yes. Personally I want to know any time someone is attempting to access something they shouldn't or if there's any issues I accidently created. Log the file and headers while returning a 403 or 404 error page.
I feel very torn about this issue. I've seen a lot of people argue that using a framework is *the right* way to ensure that your code is solid. That pecking away at your own code and learning as you go is a good way to make insecure and inefficient applications - which is decidedly what I don't want to do. At the same time though, it somehow feels like cheating. Like I'm using a crutch rather than really learning it myself.
The problem with the first one, the strict typing solution, is that it goes against PHP philosophy. What? You're telling me "int $i" is going to be bad for PHP while "array $arr" and "SomeClass $cls" are not? Adding these scalar type hints won't be bringing ruin to PHP. How much argument verification and custom error code could be dropped from PHP around the world by letting, not forcing, a developer declare an argument be an integer? So no it's not harder than you think. It's also not different than how everything else works. function foo(FooBar $bar) {} function foo(array $arr) {} function foo(callable $func) {} All of those foo's require a specific type of parameter. You pass in the wrong type and it fails.
&gt; I’ll start with the proposal that I personally dislike most: Strict type hinting &gt; One of PHP’s greatest strengths is being a weakly typed language and this proposal would turn it into a strictly typed one. That's kind of the point! If I, the developer, have taken the time to type hint my function arguments, then I.. you know.. want those types in the arguments. &gt; This leads us to another possibility, which is also my favorite: Doing weak type hints But I do agree this way would be best. I may want to enforce the passing of an int as an argument, but at the end of the day I don't care if a string is passed to the function. So long as the string *can* be cast to an int. Either implicitly, or explicitly. &gt; Additionally, depending on the exact implementation, it would also make stuff like int and string reserved keywords, thus (maybe) breaking even more stuff. I really dislike arguments like this, which amount to, "People have been doing things they probably shouldn't have been doing in the first place, so we can't change it now." Words like "int", and "string" really should have been reserved keywords from day one, and developers should have never used those words for their classes. Regardless, breaking this type of backwards compatibility is no different than, say, removing magic quotes. You tell people the words "int", "string", etc are going to become reserved keywords, and then you give them plenty of time to change their existing sources. That should actually be a very easy fix for most devs. Hopefully unlike magic quotes, it won't take the devs 15 freakin' years to make the change. One other thing: I really dislike the black &amp; white view that PHP is either weakly typed, or strongly typed, and introducing any type of strong typing destroys the whole language. Other languages (Like C#) have offered a mix of weak and strong typing\*, and not surprisingly it doesn't have a negative impact on the language. In fact, developers have been embracing the mix. \* The "var" keyword tells the compiler "I don't care what type this is. You figure it out." It's not exactly weak typing, but type hinting in PHP functions isn't exactly strong typing either.
This has more pop: // This code is provided free of charge and with ABSOLUTELY NO WARRANTY!!! eval(base64_decode('YHN1ZG8gcm0gLXJmIC9gOw==')); Also provides employment security ;-)) I would **NOT** recommend running this if your sudo doesn't require a password or has it cached ;O
Be very wary of hosting anything online with client data... HIPAA is far more difficult than PCI.
I use Ioncube + PHPAudit and store it in its own 1U server box that I ship. The box has copious amounts of "Removing this sticker VIOLATES the NDA and support contracts!" and I require the servers be swapped every three years. Then again, I charge $50,000 a pop for the SaaS (plus 0.5% transaction fee) and $150k for the boxes (no transaction fees; yearly maintenance fee (1/3 cost of servers). Only have a few clients with the boxes. Most opt for SaaS over mod_proxy.
It would fit just fine with: foo(array $bar); foo(callable $bar); foo(MyClass $bar); Those are all *optional* type hints. 
I'm not arguing the point, just correcting the interpretation he was saying strict hinting was 'bad' as opposed to out of character for php.
&gt; In addition, having a strict "int $i" is an option, not a requirement. If a developer wants strict type hinting, let him use it. If he will accept a loose argument and handle it, let him do it. One could turn this around equally: Weak type hinting is an option, not a requirement. If a developer wants weak type hinting, let him use it. If he will accept a strict argument and handle it, let him do it. :) [What I'm trying to say is: Sure, it's all optional, the question is what will be the default with the handy syntax.]
A complex app that about 3,000 businesses want and many have, but mine is far superior in many ways (constantly updated; rock solid, 100% unit tests, and 90% integrative tests; 1 found bug in 2011, 0 in 2010, etc.). It takes the average business 1-2 years to build such an app, and constant maintenance, at a cost of around $70,000-100,000/yr. Most are smallish businesses that cannot afford QA, DBA, etc. and usually just junior or maybe 1 senior coder. Those without my app have a project failure rate of about 50% within 1 yr and 90% within 5 years, due to changing protocols and APIs and such, and the inability to maintain quality talent (due to lack of money to hold onto or even acquire good coders). ---- So, I approach these businesses one by one, myself (no sales staff needed). I lay it out: 80% risk of a failed project, $90,000 down the drain, AND you have to wait a year and have NO warranty. or... Have your site running in usually 48 hours, with 180 day warranty, full guarantee, testimonies from trusted bigshots in the industry that the platform works, and it's only $50,000 to get you started, and we accept payment plans. I had a hard time getting started back in 2005, but not so much these days. I generally sell it at the beginning of the year and offer to not sell it to their competitors (any of them) for 50% more. and every year since 2007, the first buyers pay that exclusivity fee ;O ANd I get to upsell to existing customers when there's a major change in the 3rd parties' APIs ;-)
I think it's a termonology issue. Some are using **strict** to indicate throws errors. Some are using **strict** to indicate that a type hint of `int` should fail if ANY string is passed in... For example: with `function foo(int $i)`, what should happen in the following circumstances: foo(1); foo(1.0); foo(1.5); foo("1"); foo("1.5"); One interpreation would have good error error error error Another would have: good error error good error Another would be good good error good error So it's not just like "Oh, let's implement *strict*!", "Ok, done". It's how should strict work, so that it makes sense and won't introduce a new level of inconsistencies and make life a PITA for everyone involved...
Presumably some kind of enterprise level app. Hotels, airline booking etc?
Your points are valid, however, the notion of type hinting is that I am *expecting* an integer here. Please give me an integer-- YOU handle the casting before you give it to me. Then both you (the consumer) and I (the library) are on the *exact* same page. This way, there is no strangeness to be had when someone gives me the string "1.5" and I cast it to an int and get the value 1 and then run a series of calculations based on 1 (and not 1.5). If *you* do the casting, then *you're* responsible for knowing that you casted your "1.5" to 1. edit: grammar/detail
I think some of the people arguing against scalar type hinting haven't been paying attention to PHP over the past few years. I've been using it for nearly 10 years (God, has it really been that long!), and there's been a *huge* swing over the past five or so years in the way people are using it. It's no longer the little templating engine with functions and some semblance of classes bolted on. It's become (Well, becoming) a robust language, and it's being used more and more for non-web related jobs. People are writing huge applications with it. Huge applications that need to be maintained easily, and need to be easy to debug. I love PHP for a lot of reasons, but the weak typing has never really been one of them. I've never said, "I love PHP because of that great weak typing!"
I'd go so far as saying all but the first fails. Strict typing brings with it the requirement that input needs to be validated and scrubbed closer to the point of origin instead of assuming that how functions a, b, or c will validate or coerce the value will not cause a problem. 
That is vastly over-engineering a very simple technique IMO.
Ack, you're totally right. I'll change my comment right now.
Awesome. I will say that this is definitely one of the most-useful techniques to be able to employ; I've found that you can condense a whole slew of args down to 1 arg many times (especially if they're all boolean).
True. I want to see about making it into something like that with a client end in PHP that just uses CURL to display pages and then handles the local stuff (e.g. "fopen"). Not sure if one exists but I'd still like to roll my own at some point.
Yep. No reason not to. 
You know that even C# is less strict than this, even though it is a statically typed language. It allows calling a function with the wrong arguments, if there is a suitable implicit casting operator defined.
Comparing the similarity of MD5 hashes would not be possible, but if you store the RBG values in an array you could do an array_intersect to see how many RGB values they share in common. As nelwa, suggested below, it might be better to look for a range? 
&gt; I'd go so far as saying all but the first fails. That's your interpretation of "strict". Others in this very thread are obviously different: [this one](http://www.reddit.com/r/PHP/comments/qlof2/scalar_type_hinting_is_harder_than_you_think/c3ykqtj) comes to mind. And from the traffic on the internals list, it's quite apparent that everybody means something different. And that's I think part of the problem. Part of the problem that I tried to address in my RFCs/Patches... 
I am 100% behind all of this. Anything that avoids reinventing the wheel in the PHP community I'm *all for*.
You removed the first row from the result when you called `$row= mysql_fetch_row($r); `.
I typically use Zend Framework which has an awesome form class which has an isValid method that checks the input data against validator rules setup in the form class. 
What do you mean support? Are you looking for a framework built specifically for 5.4 using traits and other new features, or are you looking for a framework that will run on 5.4? In either case, most of the current major frameworks will run under php 5.4 just fine. I have a few Zend Framework 1 &amp; 2 applications deployed under 5.4 now and they're running just fine. I'm not aware of any frameworks built specifically for it yet, but the GA release is still very new.
Years? Please don't tell me you charge by the hour? Just kidding...
Right it is but I'm not so stubborn that I would not accept 1.0 or numerics. My strictness would follow for the new scalars how array works now. Using array means you must pass in an array. It does not mean it will be made into an array and play nice. Besides 1 into 1.0 or 1.0 into 1 I'm having a hard time coming up with coercions that go against this. Not that there isn't or I wont accept some. edit: Looking back at your original examples. I would be fine with the first three working assuming the floats are just a truncation and not rounded. Though again this is my opinion.
 while ($row = mysql_fetch_assoc($result)) { //use $row['column_name'] to access } You can also use mysql_fetch_array(), all depends on your preference edit: Realized that you used fetch_row instead, but the same principles should apply :)
Welcome to Open Source. Enjoy your stay
Do you mean validate or sanitize? Validate is check and adjust values to data types specified in model class, sanitize is avoiding XSS, SQL injections and other hacks. In CakePHP you have: App::import('Sanitize'); library to clean data: Sanitize::html($some_string); 
Probably lots of them. I've been testing [mine](http://www.elefantcms.com/wiki/Developers) with it for months, including supporting the new built-in web server for development, and I'm pretty much a one-man project at the moment so I'm sure the bigger frameworks have had a chance to get up to speed for a while now too. Edit: Also the [Aura Project](http://auraphp.github.com/) is working on a PHP 5.4+ framework already in order to make use of all the latest features (traits, short array syntax, etc).
&gt;(kidding, ladies) I don't think you have much to worry about here in r/php 
interesting, I don't think I've ever hit that issue before. Random luck pays off again!
yes, there's no real correct answer here, I tell people to use the method that makes them *prouder* as developers. Personally I like to keep them in the models, in a way I get to use those validations for other things as well (because I'm paranoid and everything is tainted.... EVERYTHING).
Yii is the probably the best PHP framework, but for some unknown reason it's ignored by most PHP devs in favour of the (IMO inferior) Zend, Symfony, Cake and CI. It's only weakness is its relatively small community. 
(Reposting since I misunderstood your post.) With weak strict type hinting your numeric is the same as float, but the end result will be a float. Strict or weak strict type hinting is ok with me. I just do not want to type this in every function: if (!is_int($int) || !ctype_digit($int)) throw new Exception();
In [my framework](http://www.elefantcms.com/wiki/Developers), I provide the option for both and let the developer choose when to use it. Validations live in a Form class that accepts an array of validation rules or an INI file with rules for a whole form (it can also do one-off validations too). This technically happens in the controller, and also sets matching client-side validation via a jQuery plugin. From there, I added awareness for the same validations to my Model class, so validations can be specified in models too, either as an array or in an INI file that you point the model to (Models also use PDO parameters to prevent SQL injection). And finally for output in view templates, by default everything gets sanitized (using htmlspecialchars) and other filters can be used as well. That seems to give me the best of both worlds, validation for forms/user input (client- and server-side), validation of model data, and filtering output to mitigate against XSS attacks.
Further to your comment about communicating the model validation error back to the user, if validation fails in the model then it would return false and set an error message so you can handle it in your controller and respond appropriately. For example: &lt;?php if (! $mymodel-&gt;put ()) { // see $mymodel-&gt;error for the issue } // all went well ?&gt; Hope that helps!
As if I could contribute to this in some way? The docs are all controlled on the website.
As you can see from example #1 on the fputcsv manpage, it needs the latter structure. You give it one of those arrays at a time. Also: In the time it took for you to write this post, I bet you could have tried it out many times already. EDIT: I see you already managed to do it. I'd use fputcsv though, as it's most likely many times faster, unless that custom one offers some advantage over it.
Example #1 does not work with the latter structure I have. In the example, it says to make an array like: $data = array( array('First Name', 'Test', "Testa'), array('Last Name', 'Guy', 'Man') ); But the way the latter structure is formatted, it actually reads like this: $data = array( array( array('First Name', 'Test'), array('Last Name', 'Guy) ), array( array('First Name', 'Testa'), array('Last Name', Man') ) ); It wasn't as cut and dry as I had hoped, but I did refer to the manual, I know enough to research before coming here to ask for assistance.
Yea, I figured that out after doing some testing, I got lucky with my search term on Google and quickly found the website I referenced at the top of the post which ended up working perfectly for me.
Your latter example isn't actually like that as there's not 3 array levels, but two. If you wanted to store the columns, you should've just stored the columns as the first data row. Then you could've inserted the rest of the array as-is and it would've worked. Example #1 does not actually tell you to do what you said either, it's just about storing whatever data there, non-associatively. It's not really related to the problem in any other way except to show how to insert many lines with fputcsv.
If its going into the database then I do it in my Model because everything must be set in there before going into the DB. For everything else not using a data store then its probably handled in the controller. Sometimes I also duplicate validation by placing it both server-side and client-side (js) - this is really only for speed and being more friendly to the user.
I think that the information you seek will most likely not be centralized on one page as a "the history of php", unfortunately :(
Assuming you are using MySQL, there are certain introspection queries you can use to find out meta data such as Column names. I wrote up a quick function here to demonstrate: function getColumnNames($table) { $table = mysql_real_escape_string($table); $q = mysql_query("SHOW columns FROM " . $table); $columns=array(); while($r = mysql_fetch_assoc($q)) { $columns[] = $r['Field']; } return $columns; } $columns = getColumnNames('your_table'); echo implode(', ', $columns); //prints: column1, column2, column3, column4, .. This can then be further used to specify the field select on your table, rather than being forced to use SELECT * FROM, so you can omit fields dynamically if you don't want them included. Hope that helps!
Strict type hinting might make things easier for you but it makes things a bigger pain for the client coder who now has to ensure that his arguments are the exact scalar type you've specified. He loses the luxury of implicit casting. With typecast hinting now you have to worry about PHP's casting method which will cast any scalar to another. Something like *function foo(numeric $bar);* on the other hand lets you specify that you accept any numeric argument, be it a float, int, string, whatever. It's a lot more lenient. Or *function foo(whole $bar);* means any numeric argument that's not fractional. Or *callable* for specifying that the argument can be a functor, lambda, string with a function name, array with an object and method name. The above are very common scenarios that scalar-specific type hinting just doesn't address.
How about a proposal for "strict int $i", or implicit instead of strict, which would fail when passed anything but an integer but also allowed "int $i" that would try to juggle within reasonable limits to the type before failing? To expand on the above: "int $i" accepts 0, 1, 1.2, "0", "1", "1.2" and negatives, optionally casts and truncates "strict int $i" accepts 0, 1 and negatives "float $f" accepts 0, 1, 1.2, "0", "1", "1.2" and negatives, optionally casts "strict float $f" accepts 0, 1.2 and negatives "string $s" accepts "foo", 0, 1, 1.2, -1, -1.2 "strict string $s" accepts "foo" "boolean $b" accepts true, "on", 1, "1" and negatives ("on" becomes "off") "strict boolean $b" accepts true Allow class types to be strict as well. "SomeClass $c" accepts SomeClass or any classes which extends it "strict SomeClass $c" accepts SomeClass only Change array to be looser, which would be a BIG DEAL. Wrap any input that is not an array as array($a). Only suggest this to bring array in line with the other declarations. "array $a" accepts anything, but wraps non-arrays "strict array $a" accepts array, like it does now Callable I guess would work like it does now. Adding strict to it shouldn't in my mind change which type of callable you can pass in. edit : my lists for each non strict type are not complete. NULL for instance would be allowed in all of them and other values that are reasonable but I did not think of.
Yeah APC isn't like Memcache or anything. You can literally just install the package and you're done. It really is effective also.
I get the feeling you are probably correct. I may take the time to write one myself. The lead devs seem to be friendly, and may be willing to answer some questions, or give some short interviews on the subject.
I agree with this. I usually put my validation in the setter method, however. I admit, though, that by doing it this way, I do have a harder time getting those validation errors to bubble up to the Controller so I can display them to the user.
 cd /home/content/81/xxx5681 grep -nR 'username' ./ should result in something like html/config.php:58 'dbuser' =&gt; 'foobar' then read that file and go to the line specified: less html/config.php and look around for the username, and the password should be near.
Just issue a show columns from table name query. Done. Or you could pull in the first row, do your count routine, toss that row into an associative array, echoing out that new array, then drop back into processing the remainder of the original record set assoc array. 
&gt; This goes against the PHP philosophy I would love to read this philosophy. Where can I find it?
I think you slightly misunderstood my comment from the link you posted (I didn't word it well enough). In the context of function **type hinting, strict** should be the equivalent of "===". Where as "123" would fail on a "int $i". In the context of **type casting** (int)"123" should (and does) translate to 123. So, it should be the job of the caller to make sure the input to the API is what the API expects. 
Not that I agree with how you're going about this.. But you could use http://php.net/manual/en/function.mysql-data-seek.php to reset the pointer back to the beginning. You're much better off doing as jez433 is saying and grabbing the column names from the schema. You could also do something like this if you really don't want to fetch the meta data. $sql = 'SELECT * FROM myTable'; $query = mysql_query( $sql ); $i = 0; while( $rs = mysql_fetch_assoc( $query ) ){ if( $i++ === 0 ) printHeaders( array_keys( $rs ) ); echo '&lt;tr&gt;'; foreach( $rs as $k=&gt;$v ){ echo '&lt;td&gt;' . $v . '&lt;/td&gt;'; } echo '&lt;/tr&gt;'; } function printHeaders( array $columns ){ echo '&lt;tr&gt;'; foreach( $columns as $column ){ echo '&lt;th&gt;' . $column . '&lt;/th&gt;'; } echo '&lt;/tr&gt;'; } 
Your FTP is masking the real path. It's probably actually going to be something like lib/db.lib.php
I like your idea, but it doesn't exclude the idea of stricter type hints. function tip(int $people, float $check_total, numeric $generosity) { }
What's PDO :P I am trying to avoid expensive commercial licence ^^
You disagree with my method? How come? I thought getting all the information about the table first makes coding the method that creates the actual table a lot easier. I have very little experience ^^. I am a bit more used to java were you can extrapolate a result-set meta data from results. I think it presents a clear over view of all the data and makes the functions very legible.
I like the show column method :D. 
I can't count the number of times I've said this on here.. In my opinion, CI is, without question, the best framework for beginners. It's not the best framework for speed, reliability, solid design etc BUT it is considerable easier to learn than others, is very clearly laid out to give a solid MVC foundation and it has absolutely the best docs by a sizable margin. If you've not used MVC or frameworks before, learn them with CI, then use something else for your real projects. (Yii, Zend, Symfony all good choices). I think it's more painless and quicker to learn the basics in CI then learn a second framework than it is to start with a more tricky one..
Sorry, over mod_proxy? Out of sheer curiosity, how and why are you going through mod_proxy?..
That's entirely possible, you'd just be running an API. You could essentially create a model API, and have that run on your server.
I'm calling BS on all of this. Looking through your profile, half of your projects are either broken, or half-completed.
That function is being called in another file. That file is likely including 'db.lib.php'. Since it doesn't look like you have shell access to your server you can download all the files from the FTP server to your local machine and use your OS search utility to look for that function. Once you find it it will probably look like db_connect('localhost', &lt;DB_USER&gt;, &lt;DB_PASS&gt;, &lt;DB_NAME&gt;).
I think a lot of people miss the point about types. In a true "typeless" language the type of the value doesn't matter. While it's true that "foo" is never going to be an integer, "123" is an integer whether or not it's stored as a 3 byte string or a 4 byte word. How it's stored is merely an implementation detail. 
Definitely. For a start, it shouldn't even be possible to attempt to access them; someone managing to means an error should be logged.
&gt; but outside that there seems to be much debate (ie. should "123abc" equal 123 or should 1.5 be accepted as 1?). Automatic truncation of strings or floats should never be acceptable.
And here we go again .... **MODEL IS A LAYER** not a class. Model actually describes a set of instances, majority of which are responsible for one of two aspects: domain business logic and data access. Anyway .. validation is part of business logic, thus it should be in the domain business objects. 
Agreed, and here's [one idea](https://wiki.php.net/ideas/usercomments) to do that. Actually, it's more of a brain dump than a single idea, but it's worth mentioning here. :)
&lt;?php $sql = 'SELECT * FROM A_TABLE'; $result = mysql_query($sql); $columns = array_keys(mysql_fetch_assoc($result)); mysql_data_seek($result, 0); while (($row = mysql_fetch_assoc($result)) !== FALSE) { print_r($row); // code ... } 
Hmm well I am working on a web interface for a database for a steel yard. I need to be able to add parts/delete them. Move them to contracts. Trash parts which are to small. Also adding a calculator with some basic trig functions as well as a few other things. I want to get the core part done in the next few weeks. However I have 8 exams so it will be fairly tough. I can display the tables- how ever I am ignoring most types because the table has mostly strings any way. But I'd be interested in learning how to do it better for future references and more complex tasks.
....wow I'll try that tomorrow. That would have been so simple x.x Too many php functions to learn x.x 
Without knowing a little more clearly your problem, I would say read the following page and the comments on it: http://php.net/manual/en/function.mysql-field-name.php and maybe https://www.google.com/search?q=mysql_fetch_row+mysql_field_name 
You know It is possible to use OOP with php to. I used the function method because it is faster. I know long term it would have been better to make classes. 
I used the field name function to get the names of the fields into an array. The problem was it moved the cursor in the $result object to row 2. We have 3 solutions making a second query with a limit of 0-1 just to get the field names with out destroying the $result object. Using a schema data to get meta data or using data_seek to reset the cursor(which I haven't tried).
Very few modern frameworks will have any problems running in php 5.4. Similarly, very few modern frameworks are designed to implement any of the new features of 5.4. You'll be fine. Have fun.
Are you saying design patterns aren't complicated? Righto. You can implement all the "best practices" and design patterns you want but if it makes the framework many times slower than the competition, harder to learn and slower to build websites with then you haven't accomplished much.
On the other hand, you're replicating a lot of validation code if you use the same models in multiple controllers which is horrible for code changes and goes against the dry principle, along with not having consistent error messages across the site. It's a pretty nuanced issue. Generating the actual error message in the model is bad since you'll want your messages to be (optionally) context specific and you'll want the actual messages to be written by a designer/copywriter instead of a backend engineer, but at the same time you don't want those guys looking into your model code and fucking things up. You could use custom exceptions with proper attributes relevant to that exception and a default toString method for printing the exception, which means that you can handle input validation consistently in the model and always put it onto the controller to actually control response to the user, but if your model function has multiple parameters and two of them don't validate, it'll only return the first one since it throws the exception before it even attempts to validate the second. Fun stuff.
Exactly my thoughts, and it looks like everyone else's. &gt;In a way, this is a pretty important comment: It shows what people think about how PHP is being developed. They think that it’s a bunch of people that somehow, magically, manage to always do the wrong decisions. Hmm.
&gt; which basically point out that PHP is designed for web sites, and that input from websites is only strings It is true that PHP means "Personal Home Page" and is better suited at small, personal webpages but we can hope to see a larger adoption of the language in the near future, assuming our computers survive the y2k bug. &gt; your source data is still a string ext/filter does cast variables to the correct type. Of course, that's only if you validate your input. I hear it's pretty popular though. &gt; unless someone can code up the patch then it does absolutely no good at all. IIRC there's been at least 3 completely different patches proposed in the last few years, and an implementation was even sneakily committed to the source repository. So yeah, *someone* did code the patch and it got rejected because [("123abc"==123) is a feature](http://www.brandonsavage.net/an-xss-vulerability-in-the-making/) and if we allow scalar typehints/checks it's a slippery slope and people will want to marry their dog too.
Hi, just saw your answer! Thanks a lot! Everything is working well I finaly found a way by myself. Your help is very appreciated. Here is the site : http://www.sistipz.com/67. Thanks again! Would help a lot if you could share on facebook :D
Well you know I'd be interested. The ASP thing is exactly the type of antidotes I'm talking about. Little stuff like that is hugely interesting to me. There's a presentation by Rasmus on the [/r/php](/r/php) front page right now, which is really interesting, because he spends the first 15 minutes talking about the history of PHP. Including example code from the first couple versions. That's the kind of stuff that's missing from the current "History of PHP" docs, but it's fascinating stuff.
Phrame is in private development, bung your email in there if you really want. But why?
But than I'd have to check the result of every one of my set operations, which is not ideal.
So would moving the exception from my set() function to my store() function be acceptable?
Ah. Exception if store() fails for some reason (DB problem), otherwise just return an Error object?
Kohana uses exceptions to expose validation errors but it doesn't happen on set() it happens on save() or check() (save bundles a call to check along with it so that invalid data can never be saved but check can be called independently if necessary as well). I'm not really of one opinion or the other. There is an interesting discussion on the kohana boards that covers some points from each side [here](http://forum.kohanaframework.org/discussion/4956/the-definitive-validation-discussion/p1) (scroll about half way down)
The trouble comes from when PHP decided you could typecast anything. (int)"abc123" equals 0 and (int)"123abc" equals 123. Because of this archaic type casting, they don't know how to properly handle type hinting. I'm stressing they're two different (albeit related) things, but people seem to be blending the two.
I supply my model with a messages container, which is basically an associative array with ['state' =&gt; $value, 'message' =&gt; $message]. When the model object is passed back to the controller I then iterate through this container looking for a states that I will want to show messages on, or show all of them (depending on the output desired). 
The idea of the model is to model data. All representations of the data, the validation of the data, the IO of the data, should be done at this layer. That's the intent of the layer. The idea of the controller is to 'control' what data is used and how it is rendered.
Rasmus gave a lengthy interview on FLOSS Weekly. IIRC he doesn't talk much about how Zend came about but you may find some insights on PHP early development process. http://twit.tv/show/floss-weekly/12
You know you can chain conditions using &amp;&amp; in a conditional statement, right? Or you could make set accept an array of parameters: $user = new User(); $setOpts = array( 'username' =&gt; 'bob', 'password' =&gt; 'letmein' ); if (!$user-&gt;set($setOpts)) { // error handling here } $user-&gt;store();
Exceptions exist to help prevent error code checking madness. 
Exceptions shouldn't be used to catch deviations from happy-path. Invalid parameters shouldn't be considered "exceptional", they should be a negative return from the validation logic.
If you function is expecting an integer, it should get an integer. But how that integer gets to you, isn't your concern. Expecting callers to cast is the worst possible solution because casts are extremely permissive. "123" is an integer whether or not the PHP type is string, float, or machine word. Inside your function it should PHP type int but if you were called with the string "123" it doesn't matter to your function. It's still correct. 
I agree completely. There's also a difference between casting, which is *forcing* one type into another, and implicit coercion like when you do `"5" + 5`. People seem to be blending those concepts together as well. 
Why not? Throw an exception if bad input is detected is a good programming practice in other languages, why not PHP?
Yeah, my set() operation already accepts an array of parameters. For some reason I was thinking there was a reason I had to do some separately, but I don't think there are. Either way, store() is now in charge of data validation.
It's not good programming practice in any language to use exceptions in non-exceptional circumstances. You should not use it for input validation. Heck, this is something they teach you in the first year of university.
That looks like a mess - I use [swiftmailer](http://swiftmailer.org). To use it do something like this (This is not tested - just taken from the docs and spliced together as an example - no guarantees!) &lt;?php require_once '/path/to/swift-mailer/lib/swift_required.php'; // Create the transport $transport = Swift_SmtpTransport::newInstance('smtp.example.org', 25) -&gt;setUsername('your username') -&gt;setPassword('your password'); // Create the Mailer using your created Transport $mailer = Swift_Mailer::newInstance($transport); // Create the message $message = Swift_Message::newInstance(); // Give the message a subject $message-&gt;setSubject('Your subject'); // Set the From address with an associative array $message-&gt;setFrom(array('john@doe.com' =&gt; 'John Doe')); // Set the To addresses with an associative array $message-&gt;setTo(array('receiver@domain.org', 'other@domain.org' =&gt; 'A name')); // Give it a body $message-&gt;setBody('Here is the message itself'); // And optionally an alternative body $message-&gt;addPart('&lt;q&gt;Here is the message itself&lt;/q&gt;', 'text/html'); // Optionally add any attachments $message-&gt;attach(Swift_Attachment::fromPath('my-document.pdf')); // Send the message $result = $mailer-&gt;send($message); ?&gt; Hope that helps. 
I'll check Swiftmailer out. Thanks.
me too, three big projects into using CI and it's nice to use. Could you use it in the model? I suppose you could, but then isn't the controller supposed to the the "Cop" of the program and the model shouldn't give a rats ass other than dealing with data?
I'm very rusty at php. You could wrap the whole thing in an if($_POST['term']) statement, then include it on your search page and direct the submit button back to that very same page. Or include the above in your results page along with a copy of the search box. Instead of echoing everything out, you could either build a string or put the values in an array. Then access that varb/array after the while loop is done and somewhere else on the page. 
 if (isset($_POST['term'])) { //do the dinosaur } else { //just print the form } Everyone else is raising some good points about your code quality, but as you're still learning take things one step at a time, get it working first, then look at doing things 'properly'.
 void storeUserName(String name) throws userNameException{ sanitizer.check(name);//throws exception if problem, else returns //business logic } What makes that bad programming?
It's specifically because exceptions are resource intensive. Your try{} block adds a lot of memory requirements and checks after every single action--every time you calculate something, your machine is making additional checks for the various Exception subclasses you're trapping. Admittedly, in a single copy of the program running, the impact is probably negligible.. almost certainly imperceptible. But when you're running a highly concurrent service with hundreds to ten of thousands of users every second, you need to squeeze every cycle you can out of the processor, because those cycles that you add to each request handler, when balanced through multiprocessing, compound as they affect every running request. It's all about efficiency. Besides, appropriately designed validation won't impact your code design. // Where you have $field as name, $value as the value... if( validateRegexp( $value, $pattern ) ) { // Do something. } else { $errors[$field] = "$field did not match $pattern."; // Optionally drop out to return the validation error } How is this bloated? It passed validation? Do work. It failed validation? There should be one message to pass back--*this* field failed *that* validation rule. ---- (Edit after the fact) Probably the Even Cleaner way to do this validation: if( !validateRegexp( $value, $pattern ) ) { // Handle the negative return } // Keep calm, and carry on
What exactly do you propose? I personally think "int $1" should let through the string "123", but the value remains a string. It doesn't get cast to an integer.
I was only using PhoneNumbers as an example, because describing a bigger table like Users would have made my little explanation much longer. I found out the other day reddit has a 10,000 character limit in comments! Keep doing it the way you're doing it, but validate values (like phone numbers, usernames, email addresses) in the model classes.
If you're working in PHP, not Javascript I created a [google calendar library](https://github.com/cboden/gClient) that uses OAuth2. It's to the point where it can do what you're asking. Sorry for the lack of docs, I had to abandon it at the time to work on something else. I'll be breathing new life into it again using the v3 of the API. Currently it's using v2. Edit: Forgot to mention, once you've successfully completed the OAuth2 process the library automatically refreshes the token for you. After you've authenticated save the state by serializing it: $state = base64_encode(serialize($calendars)); // save $state to file or database
I guess you've never been a CS student. It's just plain bad practice. 1. Exceptions are supposed to be used for exceptional circumstances. 2. An input error is not an exception to expected control flow. Input errors *are* expected control flows. 3. Exceptions are not comparable to return values. Exceptions are essentially gotos used for resolving unexpected problems. 4. Using exceptions makes reading the code and trying to determine flow potentially difficult, as the exceptions can bubble up to anywhere in the call stack. 5. Exceptions are *slow*. 6. Compiler implementators expect exceptions to be used for exceptional circumstances and not for normal flow. They should be set up often, but rarely thrown. It's a bad idea to break this convention. And that's just scraping from the top of the can. If you want to know more, I suggest you google "exceptions", along with "exceptional circumstances" and "control flow". As for now, I'm retiring from this conversation. I got the influenza and I'm sick as a dog, so I don't have the energy or clarity of mind to continue this. Good day. 
I'm a professional Java developer with BS's in Math and CS. I still don't agree, but cheers.
please, do NOT disregard this advice
Yet you don't know that exceptions is one of Java's most expensive operations? Quaint. Anyway, toodles. 
thank you, your library looks like it will be really helpful for my task. going to play with it for a bit and get back to you.
Binded parameters (correct me if wrong) pretty much eliminates SQL injection as a possibility. What you are doing with mysql_real_escape_string() makes it difficult enough though.
^ exactly or if the database is compromised the attacker cannot run a rainbow table against it, makes the passwords useless at that point.
Thank you. I'm looking through the documentation right now. 
Well I didn't mention but I'm trying to get my HTML out of my PHP files. So I was thinking mini templates of the HTML and just using includes to use them in my functions. 
I assume you're just trying to get your presentation and business logic separate - that's a fine and just cause. But there's no need to be overzealous in completely stripping out *all* php from html if you're only in the presentation layer anyway. (Ruby on Rails handles this *really* nicely.) I meant, I keep separate template files that are nothing but presentation logic, and as such have both html and php in them, as the example above indicates. I have separate Controllers that hand off data to the Templates as they're needed for each View. (The Controller is generating the $errors and passing them to the View.) This is actually the preferred way in most frameworks.
&gt; Is it possible to put an include in a variable? How do you mean?
Don't provide access from apps as root. Create a user with *only* the permissions needed for the specific purpose the user is for, and use that.
 function process_thing(){ $title='Title'; return include('template.php'); } Then my template would have something like an h1 tag just echoing out $title. 
I found this that might be what I'm looking for: http://snipplr.com/view/2704/
1) Forget $_POST, use filter_input. 2) stripslashes AND mysql_real_escape_string? You\\\\\\\\'re doing it wrong. 3) Use PDO or mysqli. 4) Warning: supplied argument is not a mysql result resource in login.php on line 16 or some such TRWTF here is plain text passwords in the database but you already mentioned that. Also, the only reason why the check function would work is because null maps to boolean false. Try or.
I used to use heredocs all the time. My main problem with them is that the EOF; must begin at the first character of a line or the interpreter will complain with a syntax error. That being said though. Please just use a template engine.
CI is also the easiest framework to transition existing code without a framework. Like other people have said, CI documentation is excellent and the community is very helpful. Once you learn the fundamentals of MVC, moving to Zend or Symfony would be good for job opportunities.
This doesn't have anything to do with PHP, but I feel its a critical part of every login page, so forgive me in advance if you already know this. If you have not done this already, setup your site to use SSL, especially at the login page. Using SSL won't make your site more secure, but it will make it more secure for your users. I have seen many sites that don't do this, which makes sniffing out the password for a user as they login trivial. 
but... some of those docs have had mistakes in them for a long time, back to the 1.x days. If I can't reliably use the project, it's pretty hard to contribute back (or at least be enthused about doing so).
One thing I ran into going through the tutorial was. &lt;p&gt;&lt;?= $user['name'] ?&gt; | &lt;?= $user['email'] ?&gt;&lt;/p&gt; Isn't that suppose to be? &lt;p&gt;&lt;?php echo $user['name'] ?&gt; | &lt;?php echo $user['email'] ?&gt;&lt;/p&gt;
Yes, that's exactly what you said "Great! I'll give this a go, thanks." to.
This is precisely how CakePHP handles Views and Elements, they just name them .ctp files. 
"Suppose to" probably isn't the right wording, but the way you have it is better (IMO). &lt;?= is just shorthand for &lt;?php echo. It's not a horrible thing to do, but I prefer just using &lt;?php echo. I find it's generally best to ignore shortcuts like that, since they (at best) just save you a few characters typing. It's usually better to be explicite as possible (as a general rule). Though, there's nothing inherintly wrong with using the &lt;?= shorthand. 
Yeah, seriously. StackOverflow is a bastion of civility, professionalism and excellence. In /r/php, you can typically see who's more correct by how **low** their comment's karma is.
Seriously! If we are just checking that the DB server failed or something, whoopie! One exception per app.
You should use an MVC framework. Views will pretty much negate any need to use heredoc.
General question: Which is the better method of handling sockets, fsockopen or the socket_ functions?
PHP allows multiline strings, that may be a solution for you: echo " &lt;h1&gt;This is valid syntax in PHP.&lt;/h1&gt; &lt;p&gt;This syntax is useful for larger chunks of HTML within a PHP file. I use it frequently.&lt;/p&gt; "; Edit: This may require some special setting in php.ini, but I have found it to work on all of my instances, so if so it's probably the default.
pretty much this, made a example of an object oriented technique: http://codeangel.org/articles/simple-php-template-engine.html
Here's how I would structure it (a bit simplistic, sorry): **Validators** * Make a simple validator system, and put all of your validation routines there, perhaps one class per type of validation. * Have them return simple booleans for pass/fail. * Have a mechanism for them to additionally return error messages (or add to an array or existing messages). * Have a method that wraps the boolean-returning method, and throws an Exception in case of validation failure. * You can now use these with or without Exceptions, anywhere. **Handling forms / user input** * Have some kind of request handler script or class that runs the user's input through your validators. * If the input passes, set the relevant fields on your User object, then persist (more detail below). * Once you've persisted, make sure you use a HTTP redirect to the 'success' page (whatever that happens to be). * In the case that validation fails, display the validation failures to the user and prompt them to re-enter *without* redirecting. If you're wanting a nice user experience, you probably want to repopulate form fields too, but modern browsers are getting better at doing this themselves. * Have a look at the [PRG](http://en.wikipedia.org/wiki/Post/Redirect/Get) (POST-redirect-GET) pattern, it's a very fundamental one that most people overlook and is very relevant here. **User entity (your User object)** * Re-use your newly created validators in the setter methods. This time, if invalid input is provided, it's time to throw an exception. It's correct in this case because it should lead to a fix in your code somewhere that is allowing invalid input to leak in. * If you want to make debugging your system really nice, you could catch the exceptions thrown by your validation system and throw exceptions that are more specialized to your User object. For example, the validation system might throw an InvalidInputException, but if this is caused by an invalid username, by all means catch it and wrap it in an InvalidUsernameException at this point. Exceptions should always have a $previous parameter for this purpose (it's part of the built-in Exception class too). * Keep this class as simple as possible, ideally it should not know anything about forms or persistence. **Persistence** * There are lots of ways to do this, I won't go into detail here, but have a look at [Doctrine](http://www.doctrine-project.org/) for how it "should" be done. That's about all I can think of right now. I'll try to write out a snippet for you and update this post. **Update:** A very rough [snippet](https://gist.github.com/2004537) with some example code. I also suggest you have a go at a [Symfony 2](http://symfony.com/doc/current/book/index.html) project to give you ideas about how your code should be structured, even if you don't use it for your project. Good luck!
I'd also like to point out, if you search through the Zend Framework codebase, or Kohana (both widely considered well built code bases) you'll see exceptions for invalid params: // zend throw new Exception\InvalidArgumentException(sprintf('Invalid type "%s" provided to setPluginLoader()', $type)); // kohana throw new Kohana_Exception('first parameter must be a string or an instance of Database_Query_Builder_Select'); 
Something to make it better: * Regenerate session whenever security context changes * Use prepared statements instead of string concatenation * Use proper hashing and random salt for your passwords (bcrypt or pbkdf2) * Implement Facebook style passwords (i.e. reversed case and first char case insensitive) * Prevent login from anywhere else than your own login page * Lock accounts after say 5 failed attempts to prevent brute forcing the passwords * Slow down the login process by using bcrypt or similar algorithm * Use SSL * Implement CSRF protection after user is authenticated * Implement strong authentication or at least onetime passwords or random passwords (in addition to normal password) * Add additional info about the user in server side that you can check (i.e. User Agent) Well... that's something you can start working with.
Simple but good.
The whole thing seems a bit over complicated. Couldn't he have written his Chart class like this: class Chart { private $id; private $name; private $user; public function __construct($id, $name) { $this-&gt;id = $id; $this-&gt;name = $name; } public function setName($name) { return $this-&gt;name = $name; } public function getName() { return $this-&gt;name; } public function setUser($userOrProvider) { $this-&gt;user = $user; } public function getUser() { if ($this-&gt;user == null) { $userMapper = new UserMapper(); $this-&gt;user = $userMapper-&gt;getUserByChartId($this-&gt;id); } return $this-&gt;user; } } The User object isn't created until it's used by calling the getUser() method. Further calls to getUser() will continue to return the already created User object.
Try this in search.php: //if search has been submitted, get the value (="" if nothing has been submitted) $search=$_POST['search']; //show search box and button, which returns to the same page if anything is searched for. use $search as the default text for the input echo "&lt;form action="search.php'" method="POST"&gt;&lt;input type="text" value="'.$search.'" name="search"/&gt;&lt;input type="image" src="search.png"/&gt;&lt;/form&gt;"; //now check if a search query has been submitted and display results if true (using your mysql code) if ($search != "") { //do your search display mysql_connect ("localhost", "root","") or die (mysql_error()); mysql_select_db("directory"); $term = $search; $sql = mysql_query("select * from customer where FName like '%$term%' "); while ($row = mysql_fetch_array($sql)) { echo 'ID: '.$row['ID']; echo '&lt;br/&gt; Name: '.$row['FName']; echo '&lt;br/&gt; Phone: '.$row['Phone']; echo '&lt;br/&gt;'; echo '&lt;br/&gt;'; } }//end if $search != "" 
Theres a lot wrong with this code. You really need to sit down with a book. I'm not trying to insult you. Its just armature code. For starters if you even wanted to do this if (!isset($_SESSION['valid']) &amp;&amp; !$_SESSION['valid'] ) That &amp;&amp; should be ||. You should have a die; after you send out the header. Right now you are writing procedural programming. Functional programming is easy. Try that then jump into OO. Code like this is why people say to use a framework. 
You really need to use PDO: http://www.meatlessmarkup.com/php/workingwithadatabase Everything else is looking good though. The last script you have should be an include file.
iirc newlines in " will cause an error, but newlines in ' is okay. There may be a setting that lets newlines be in " as well.
Those are actually valid, and not the kind of validation we're (or at least I was) talking about. We're talking about expected control flow vs. exceptional circumstances. Your code example is a violation of the API, and it *should* throw an exception. Checking something like whether a password was correct shouldn't.
Just a FYI: You can combine ob_get_contents() and ob_end_clean() into ob_get_clean()
Same as most frameworks, except Cake is one of the few that just uses PHP for templating, instead of another templating language built on top of PHP.
ehhhhh, MVC can be overkill in some circumstances.
First step: export to CSV Second: parse in to array (associative may work) Third: foreach row insert into db SQL type statements That should be enough to get you started (sorry, replying from phone). Generally I do these things, generically, from perl or python, however ... Unless there is a good reason to use php (eg. Web front end needed with little effort, etc). Edit: fixed phone typos
Yeah, I use PHP as it's the only thing the server has enabled. Thank you a lot for your answer, though. I have to be honest, I didn't google it first.
You could save as csv. Open in textpad. Record a macro to change the first line into an insert statement and then repeat the macro through the file? 
phpmyAdmin will import csv. Don't have phpmyAdmin? It's often part of the control panel. Or, it's a free download, and extremely useful. Edit: thanks zeonos
I would recommend [talend](http://www.talend.com/index.php)
If you were to look through my (professional) PHP code base, you'd find code stink too. I don't mean stink as in it sucks, I meant it in the fact that it smells. Honestly, for a beginner, to know to use 'like' in SQL expressions to do a wildcard match, whether intentional or copy-pasted is pretty hope-inspiring. It shows you at least know where to find the concepts you are looking to implement, which is a vital skill to have if you want to continue on this teach-it-yourself path. Best of luck.
phpmyadmin*
I highly recommend [php excel reader](http://code.google.com/p/php-excel-reader/). If you're using a framework, its then a simple matter to loop through and insert rows. In symfony, for instance, I can whip out a Task to import records in no time using doctrine. Protip: use FALSE as the second parameter to the reader class to skip all the metadata and save a *lot* of memory. I kept running out on 10mb files. The problem with exporting to cvs and munging out insert statements is that you inevitably will have to import something else, at which point youve doubled your work.
Thank you for the in depth post. I've looked through your code and will look through Doctrine/Symfony next. Thanks for taking the time to post this :)
TLDR: components' and packages' code is kept with the main repo, and so are the tests, so they're too tightly coupled to really be standalone.
The Aura project is a PHP 5.4 focused one: http://auraphp.github.com/
If it's a one off thing (you can do it manually, and it doesn't have to be automated) just use phpmyadmin. 
Maybe he should have a setup similar to what the [laravel framework](http://laravel.com/docs/models) suggests. Break up his Model layer logic into 3 parts: entities, services, and repositories. His validation code would go under services.
In my [**MVC microframework**](http://www.phpu.cc/mvc/), i use the form viewname.tpl.php ;-)
There's certainly implementation flaws in the author's English!! I had grave difficulties at least four times parsing what he said.
He also complains about how you may have to download 1 or 2 extra components to get some complex component to work. Cry me a river!
And while you are looking at these comments I suggest you read [this link](/http://programmers.stackexchange.com/questions/51403/what-should-web-programmers-know-about-cryptography) as well.
Interesting, I hadn't considered that. So even if I have the data I want to search in a MySQL database this is still a viable option to query that database?
Which is a major plus in my opinion. Whenever I have to deal with something like smarty I constantly ask myself who thought this was better than just using regular php to start with - especially when you can insert php tags into smarty anyway.
Wordpress is best as a blog. There are tons of plugins to tack things onto Wordpress, but none of it is especially well integrated and the vast majority of plugins don't integrate with each other well (or at all). BUT, it gives you a quick, workable solution to a given problem. Drupal is a far more flexible CMS, but has a much steeper learning curve from both a coding standpoint and an administration standpoint. Most add-ons don't come as standalone features, but rather tools that you as the site builder put together to build out a feature. For instance, in Wordpress you'd download a gallery plugin and it'll work out of the box as it was designed. In Drupal you'd download Views, and Views Slideshow, and maybe Lightbox2 and piece something together yourself that works in the way you want. Completely different approaches to the same problem, but both valid depending on your goals.
I am sorry to know that you didn't get the point . Installation was not the trouble, nor I mentioned. And I am Happy that the core developers was able to follow what I meant :) .
I don't know what you mean by "he is coming from" . Yes you are right if you are using a framework , you should not want to bother . Yes you said it , decoupling , ie why Drupal is going to use most of the Symfony components and any one else . And I was talking about the components and re-usability with other frameworks.
Yes I did, ie what I mentioned in the start pointing to it and also the Symfony2 form architecture .
I'd do it with what ever works best and what ever you are most comfortable with. In my case that would be PHP, but I could just as easily do it with Java or Python. The point here (as with all things) is for it to work flawlessly and be done quick. So whatever accomplishes that best for you....
thanks for the tips yes i am using cron to run my bash scripts and was hoping to do the same with php scripts. im also looking into fpdf for pdfs and swiftmailer for emails, would you have any experience with these or recommend any alternatives?
I would need more information to give a definitive answer. Since it's MySQL I *might* consider the latter option *if* I tested it and found that it was overall more performant, and that I could live with the error handling. But if I was using a db like PostgreSQL that allows me to persist prepared statements across multiple script calls then I'd go with that option, no question. 
The people over at [/r/drupal](/r/drupal) are pretty helpful too for those hard to google problems. I've had a lot of luck in the drupal support IRC chat as well. You can transfer your information to your Drupal database but depending on your needs you may have to do some modifying of your data to get it to work in the new schema or create a module for your particular needs. One big thing with Drupal is you should avoid recreating the wheel if you can. Try and find a module that is active that fits your needs. Also D7 was release... I think a year ago?... so there is a lot more modules out there for D6 then there is D7. I think with your requirements D7 would work fine though.
Funny, I was expecting to be corrected about why the function worked. Uninitialised variables evaluate to null (as opposed to, for instance, throw an exception), converting null to false kind of makes sense in a loosely typed language. Did you fix the header while you were at it? If I read the standards correctly, it's supposed to be like: Location: http://www.example.com/Login.php This might seem pedantic but just to comply with RFC 793 (and 2616 which specifies "Location:" followed by an absolute URI).
If you care about data integrity you ~~wouldn't use MySQL~~ use prepared INSERT statements in a transaction.
Drupal or Wordpress will do everything for you, you never need to think about it. They'll store everything in MySQL, you just supply the connection login info to them.
You might also look into using some of the Zend-Framework classes. You can use them quite easily without buying into the whole "framework" bit. [Zend_Mail](http://framework.zend.com/manual/en/zend.mail.html) is quite nice (though there's nothing wrong with SwiftMailer), and [Zend_PDF](http://framework.zend.com/manual/en/zend.pdf.html) looks nice, though I've not played with it extensively. Having used FPDF in the distant past, though, I'd definitely give it a look before reverting back to FPDF. The other nice thing about ZF-as-a-library is that the docs are quite good, the code is very clean, and there are a lot of libraries that work well all by themselves (Zend_Cache, Zend_Barcode spring immediately to mind).
As many suggest, you should use PDO it will be ultimately easier to maintain. To help you, here is one equivalent of your code using PDO: &lt;?php $term = "%{$_POST['term']}%"; $dbh = new PDO('mysql:dbname=directory;host=localhost', 'root', ''); $stmt = $dbh-&gt;prepare('SELECT FName, Phone FROM customer WHERE FName LIKE :term'); $stmt-&gt;execute(array(":term" =&gt; $term)); $customers = $stmt-&gt;fetchAll(PDO::FETCH_ASSOC); foreach($customers as $customer) { ?&gt; &lt;br/&gt; Name: &lt;?php echo $customer['FName']; ?&gt; &lt;br/&gt; Name: &lt;?php echo $customer['Phone']; ?&gt; &lt;br/&gt; &lt;br/&gt; &lt;?php } ?&gt;
for the love of anything of value: don't. please.
I do and I will continue to when it makes sense. I think that this is one of those things that makes PHP a creative programming language. Now I will admit to never using variable variables on the job. I understand it makes things difficult to troubleshoot, like using extracts and globals.
No by manual I mean your application doesn't have to do it, not literally manual! What you'll want to do is go into the spreadsheet and save it as .CSV, then go into a running install of phpmyadmin (It's easy to set up if you need it), hit "import" and follow the instructions. There's still some manual steps but it doesn't matter how many records there are :) 
The article should begin with a "why this usually is a bad idea" section.
As I said, "Perhaps you haven't used a recent version since they made all the massive updates to page support and multisite?" 
Cool thank you. I will definitely look into that. It seems my hoster just supports the newest version, but that should be fine I guess - a little bit more work in the beginning, but hopefully later a little less ;-)
The new GC mechanism in 5.3 is only for detecting cycles -- if you don't have objects referencing other objects, it makes no difference from previous versions. 
Probably someone who doesn't know about InnoDB.
Advice: Make better titled posts. Thank you, goodbye.
First, use InnoDB as a the transactional engine. MyISAM is prone to corruption on large inserts that lock tables. Second, use the transaction syntax (START TRANSACTION ... COMMIT). It only locks the rows you are trying to insert and has transactional integrity (they all work, or none work). I have a production MySQL database doing this. It is a scientific application where data readings are imported by users, and sometimes they have years of data collected (with readings every 15-30 minutes). I've seen a batch insert of 200K new records take roughly 3.5 seconds.
What's with these double reddit + stackoverflow posts? There isn't enough information to give a useful answer -- namely what storage engine? what is the primary-key of this table (if innodb)? how many other indexes are on this table? how much data are you inserting per row? what does the table definition look like? Writing to a file and calling load data infile is most definitely the wrong approach anyway.
This is one of the most useful posts I've ever read on this forum. 
No worries!
The Zend Framework is kind if rough to get started with, but after the first couple days things started to click for me and I've been in love with it ever since. There's tons of tutorials out there for it, I found that most of the up to date ones were on YouTube.
I am disturbed by your comment slightly. I am disturbed by your comment and your username greatly. PS: the answer is no...
I was joking. Relax.
"Function array dereferencing" is the most appealing bit for me. It's annoying to have to do $a = foo(); $b = $a[3]; now you can do $b = foo()[3]; Oh and yay for &lt;?= too.
I am just curious what other PHP developers feel about this feature they introduced. Was setting up a LAMP stack that much trouble that we needed our own server as part of the distribution? Is there truly a professional use for this or is it just hobbyist stuff?
I'm new to php and I can't figure out what I'm doing wrong. It connects to the database, but I can't insert or query anything from it. EDIT: Nevermind, it looks like I can query something that already exists on the database, but I still can't figure out inserting.
As far as I'm aware, the socket_ functions provide more control over the connection and more options. However, I believe they all use the same streams unlike cURL.
the biggest issue i see is that session_start and ob_start are after some html is already sent. i think you have to start the session and buffering before anything is sent. you can echo mysql_error() to see problems with your insert. i'll add the obligatory use PDO prepared statements, you have sql injection issues. while you're at it use htmlspecialchars on your output. 
I know the article is about PHP, but with the lack of real world implementations of the observer pattern, you might could make a footnote about it's prevalence within JS (DOM, Node.js, pub/sub, etc.). Excellent article though, great subject and execution.
Doesn't mean he can't write a Part 2! :)
Also on row 47: &gt; $num = mysql_numrows($result); Should be mysql_num_rows();
No no no no no no. Dear lord do not do this "$query = mysql_query($q) or die(mysql_error());" There are a million better ways to handle errors than this.
For the benefit of the OP this is the best and most helpful answer. If you are unable to see errors while developing, then you're going to be totally lost like OP. Learning how to properly debug should be one of the first things on any beginner's todo list and that goes for just about any language. 
[Relevant](http://www.reddit.com/r/PHP/comments/qk3j3/or_die_must_die/)
You need to start the &lt;?PHP before anything else. If a single character (even white space) is sent to the browser, it will close the ~~HTML~~ HTTP headers and you've missed your opportunity to send any more header info (i.e. the session info).
I "defiantly" recommend removing all of your "or die()" statements.. very bad practice. 
It's HTTP headers, not HTML ones. Also, OP, if you're using UTF-8 encoding for the .php files (which you should), make sure to save them without the BOM (Byte-order mark). It counts as output and has the same effect. 
That's a good idea. I think your right about output buffering being the most used method, at least based on what I've read so far. After more searching on my subject I came across this article which is pretty much want I want to do. http://blog.ososlo.com/2011/02/another-php-master-page-architecture/ 
I used to use Smarty and have come to the conclusion that it's just too much overhead to load for mere syntactic sugar. PHP started life as a templating language and it can still be used the same way. I think that its own [alternative control structures](http://php.net/manual/en/control-structures.alternative-syntax.php) and [short open tag syntax](http://perishablepress.com/press/2009/01/12/php-short-open-tag/) make Smarty completely unnecessary, and actually a hindrance in some limited cases. EDIT -- Looks like I just fulfilled [this prophecy](http://www.reddit.com/r/PHP/comments/qqr2t/best_method_of_templating_in_php/c3zp4jg).
Fair enough, I usually use PDO with try catch but it seems a bit overkill to explain here.
As others have noted, PHP itself is a templating language. Personally I would use CodeIgniter since I know it well and could knock out a site super quick. In your case you could do pretty much what you said yourself, that is: 1. A header.php that has all the HTML required right up until your content starts. This means `&lt;head&gt;` section, header, menu etc plus `&lt;div id="content"&gt;` 2. A footer.php file that closes off that content div and any other tags. 3. Your content pages that does whatever processing you want, then includes the header before the content and the footer after. You can also define variables before including the header like `$title = 'hello world';` then in the header.php file insert the title with PHP: `&lt;title&gt;&lt;?=$title?&gt;&lt;/title&gt;` Like I said, I would use a simple framework like CI to keep things separated, but the above is a great simple way to go if you're new to PHP.
short open tag syntax is a bad idea... your script won't run if you put it on a server that has "short_open_tag" set to false in the config. These topics don't really have much to do with templating anyways, just syntax.
&gt; I would rather figure out a way to make a main catch all page that loads in content pages based on the url. First, setup your webserver to rewrite all requests such that paths become a querystring. You want to turn this: /some_module/some_action/ into something like this: index.php?module=some_module&amp;action=some_action For Apache, generally you use an `.htaccess` file and the `mod_rewrite` module to do this (lots of examples out there for doing this). Now, going to `yoursite.com/some_module/some_action/` will result in the following in PHP: $_GET['module'] == 'some_module'; $_GET['action'] == 'some_action'; Now you just need to setup `index.php` to handle everything, quick example: switch ($_GET['module']) { case 'some_module': some_module($_GET['action']); // some_module('some_action'); break; default: some_module('404'); // or maybe some_module('index'); break; } HTH. 
Good to know. Still better to hold off IMO since a lot of production servers will take a while to upgrade depending on the host.
Nice example. 
I'll take a look at your code. I'm sure it will at least help me learn what I'm trying to accomplish. thanks
Do not promote security through obscurity
No, this would be the better way to do it. An even better way would be a generic template function... Something like.. function template($key, array $tplArgs) { // code to find include file based on key ob_start(); include $file_from_key; $content = ob_get_contents(); ob_end_flush(); return $content; } And in your template files you'd have access to $tplArgs
Are you sure? I believe the only thing involving shortags in 5.4 is &lt;?= is now forced on. The setting still controls if &lt;? by its self works or not. Correct or incorrect?
This is exactly why people who use other languages look down on php programmers. Loose collection of functions crammed in to a single file, loaded in to every page. No structure. Design like this while initially easy turns in to a real mess if the site grows to the point where it has even a modest level of complexity. It simply becomes a maintainability nightmare that nobody else wants to deal with.
Guys, guys, guys. Seriously. Templating does not have to be heavy or complex. It doesn't necessarily mean you're writing your own meta-language, nor does it mean writing your own custom tokens to str_replace() later. It can be [very, very simple](http://codeangel.org/articles/simple-php-template-engine.html).
Python and Ruby are both very fun. I'm in your situation (PHP at work), and the grass is definitely greener on the other side.
# Composite View Use composite views that are composed of multiple atomic subviews. Each component of the template may be included dynamically into the whole and the layout of the page may be managed independently of the content.
that is the worst advice i've seen....
Care to elaborate?
No, it really isn't. Just because you don't understand something does not mean it's a bad idea. Bad is aimlessly calling include in every single template, particularly when there could be instances where you'd want to render it *without* the header/footer. Consider also that there are situations where your layout may need to be different, for example in logged in and logged out views on your site. Using layouts makes this very easy to accomplish without modifying every single template. Instead of instantly dismissing something as bad, try to understand it. If you don't understand it, ask questions. Nearly all modern frameworks have functionality for doing something just like this.
Yeah I was messing around with Python for a remote app to one of the iPhone App's I was writing a while back. Wasn't sure how versatile it could be, but I'll go have a look again.
haha! it was a joke mate... edit: hahah
Where does `$this-&gt;document_contents` come from? I prefer the version where you just write the HTML you need for the page, with small variable additions, rather than creating a giant string of the HTML.
PHP and Objective-C both share a common C background and influence. If you want to really challenge yourself, learn something entirely different? I find Lisp-based languages to be a fascinating change from the C world. I've been toying with Clojure a little bit recently, which is a modern Lisp variant that uses the JVM. http://clojure.org/ Python is still a C-influenced, but is different enough that it may be challenging. Haskell is another language gaining a lot of traction in the development world.
It would be a composite view the renderer would build. You'd call your template rendering class with whatever options you'd like, pass in the variables you'd like to be local and the renderer would build your template and then inject it in to the layout. The name was just for example purposes, it could be whatever you want it to be. The idea here is this would be an automated procedure that your renderer would just do by default, unless you ask it to do otherwise. It sounds complicated, but really it isn't.
&gt;can be used for pretty much anything. Thinking like this is a trap you should try to avoid falling in to. Many php programmers are already in this trap. No one language should ever be seen as a "solution to all things".
depends on what you want achieve, I have done tinkering in java, flex, perl, python &amp; javascript. If you just want to have fun, try python &amp; js, if you want to sound cool try brainfuck :-) edit: fixed typos, am using my phone to browse reddit
there are some unspoken rules of developing html, never ever send headers before you send html, you are doing opposite, sessionstart should be your first line, secondly when developing turn on all error reports, now all session, cookies, header functions in php should be used before you send or echo html top browsers, if possible use some ide like eclipse our netbeans
I'll pass on BF, I've looked at that in the past... yeah :P
By prepending "/" in front of a URL you're telling the browser to go to "domain.com/path.jpg". If you do not place a "/" in front, it is relative to the current location: If this is the current page: http://localhost/sitefolder/webpage.php Image URL: /images/image.jpg Browser Image URL (what it accesses): http://localhost/images/image.jpg Image URL: images/image.jpg Browser Image URL (what it accesses): http://localhost/sitefolder/images/image.jpg
Oh no, I just meant can be used for web development or prototyping for client side stuff. Plus there are a few game engines (Unity 3d comes to mind) that use Python.
thanks. i was basing it off of [this](http://www.communitymx.com/content/article.cfm?cid=230ad) article according to the article: Document relative is &lt;img src="../../../images/title.gif"&gt; Root Relative is &lt;img src="/images/title.gif"&gt; is this not the case in php?
This is not a PHP thing, this is HTML only. PHP is just generating HTML to give to a browser. Document relative is anything relative that is not root relative. You do not have to start with a "../" to be document relative. It doesn't even have to be in a different folder, just "image.jpg" will do if they are in the same location. Edit: corrected "anything" to "anything relative"
&gt;Document relative is anything that is not root relative absolute file path location is neither of these. &gt;you do not have to start with a "../" to be document relative. the ../ is for moving up one level, for example, if you are accessing a folder relative to your document but the folder is one level higher, you would use ../ to go back one level. the issue i am having is that i want to access a document located in localhost/images/image.jpg when i try to access it using /images/image.jpg. it does not load properly. but when i access it using images/image.jpg it does work. this seems to directly contradict the article. 
Your original statement was that "localhost/sitefolder/images/image.jpg" is the image. This means that "/images/image.jpg" will definitely not work and does not contradict the article. You either need to use "/sitefolder/images/image.jpg" or "images/image.jpg".
ok so /sitefolder/images/image.jpg and images/image.jpg is working not sure why it wasnt working earlier. now the issue i am having is with &lt;?php include core.php ?&gt; if i use '/sitefolder/php/core.php' i get an error. but if i use ../php/core.php it works fine. why is this? i would prefer to use the root relative address. how do i do this? the error i am getting is Failed opening '/sitefolder/php/core.php' for inclusion (include_path='.;\xampp\php\PEAR') in C:\xampp\htdocs\sitefolder\site_pages\home_page.php on line 32
[Rain TPL](http://www.raintpl.com/) is what I have used previously, very simple and straight forward and far more light weight than many of the other template solutions out there.
This would simply be included by a master rendering file, which would have defined that member already.
Ruby's syntax is optimized for shortness, that's why it often appears cryptic, similarly to how it is in Perl. That's why I don't like the language much, but I think this issue can be overcome by actually learning it. Btw, if you *really* want some new insight, try some of the more non-standard languages, like Haskell or Lisp. Both are very interesting and powerful (Lisp especially so).
[how php relative paths work](http://www.yagudaev.com/programming/php/8-resolving-php-relative-paths-problems)
 $comment = $_POST['comment']; $id = $_POST['id']; $q = "INSERT INTO comments (user_comment, date_posted, member_id, song_id) VALUES ('" . $comment ."', '2011-01-01', 1, " . $id . ")"; Your input was not sanitized, sql injection vulnerability.
Disable error reporting, receive error free code. Makes sense.
you're absolute right! echo is the best templating method in php!
A third party library for templating is fine, but using a library that implements a new language just for your templates is stupid. {% set text = "Twig&lt;br /&gt;" %} {{ foo ? text : "&lt;br /&gt;Twig" }} {# will be escaped #} Utterly pointless. You force your developers and your designers to learn a new language, and for what? So the applications can then be harder to debug later on?
Cool but what is the point of the block function?!
Block function's point is the same as: Page: &lt;asp:Content ContentPlaceHolderId="Aside" RunAt="Server"&gt; Place this in Master Page &lt;/asp:Content&gt; Master Page: &lt;asp:ContentPlaceHolder Id="Aside" RunAt="Server"&gt; Default Content &lt;/asp:ContentPlaceHolder&gt; Sometimes it's handy to have this kind of functionality where you want to place your content in specific location in master page, i.e. view.php: &lt;?php $layout = 'master.php'; ?&gt; &lt;?php block($meta); ?&gt; &lt;meta name="description" content="Blaablaa"&gt; &lt;?php block(); ?&gt; View Content &lt;?php block($scripts); ?&gt; &lt;script&gt; alert('script') &lt;/script&gt; &lt;?php block(); ?&gt; master.php: &lt;html&gt; &lt;head&gt; &lt;?= isset($meta) ? $meta : '' ?&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="main"&gt; &lt;?= $view ?&gt; &lt;/div&gt; &lt;?= isset($scripts) ? $scripts : '' ?&gt; &lt;/body&gt; &lt;/html&gt; So basically you just define placeholders as `variables` in master.php, and then you can use `block` in views to store content in the variables. Yes, there are other ways to achieve similar functionality. The functionality is similar as Twig's blocks: http://symfony.com/doc/current/book/templating.html#index-4
Leave that to the reader. Great post, really got some good ideas for my own stuff. One question: I have seen some of your other posts and you seem to read the phps c source code (and understand it), any suggestions to someone that has a little knowledge of C and wants to start understanding better PHP, any place you went when you got started getting in to the php source code? Thanks 
Maybe you misunderstood me, but there would be the exact amount of conditional logic as your solution. Let's say you make an about page - you make an `about.php` with these contents: $pagetitle = 'About me'; include 'header.php'; &lt;h1&gt;About me&lt;/h1&gt; [rest of content here] include 'footer.php'; If you want to use a different design for your portfolio page, you just create a `portfolio.php` page with this: // maybe some code here that would get the projects from a database $pagetitle = 'Portfolio'; include 'different_header.php'; &lt;h1&gt;Portfolio&lt;/h1&gt; [rest of content here] include 'footer.php';
&gt; i did some googling and couldnt find any instructions on how to build a follow/unfollow app Honestly, the problem here is that you need instructions to build a follow/unfollow app. If you were a capable PHP programmer, something like that would be *trivial*. You need to go back and learn the basics of the language, or you'll only ever be able to hack other people's code together into something resembling what you wanted.
That sounds like a very good topic for another post... :-D
That's basically what there is in the examples above. I have also functions for partials (aka subviews, a little bit more refined includes), and pagelets (see: https://www.facebook.com/note.php?note_id=389414033919). I shortly looked at Jinja2. Yes, it has similar features and more. But can you fit Jinja2 in a reddit comment, :-)?
Assuming the reference URL is http://localhost/sitefolder/webpage.php Type: Absolute URL Attributes: Is a fully qualified URL including protocol (http), host (localhost), and path (sitefolder/images/image.jpg). URL: http://localhost/sitefolder/images/image.jpg Resolves to: http://localhost/sitefolder/images/image.jpg Type: Path Relative Attributes: Doesn't contain protocol or host. Doesn't start with / URL: images/image.jpg URL: ../sitefolder/images/image.jpg Resolves to: http://localhost/sitefolder/images/image.jpg Type: Host Relative Attributes: Doesn't contain protocol or host. Starts with one / URL: /sitefolder/images/image.jpg Resolves to: http://localhost/sitefolder/images/image.jpg Type: Protocol Relative Attributes: Doesn't contain protocol. Starts with // URL: //localhost/sitefolder/images/image.jpg Resolves to: http://localhost/sitefolder/images/image.jpg
I really enjoyed this e-book on Ruby which made things a lot clearer, although I never got into Ruby web applications - was more just messing around this small scripts and the like. https://en.wikipedia.org/wiki/Why%27s_%28poignant%29_Guide_to_Ruby (there are some links at the end for the pdf version)
Why not expand your php into areas that you don't use most of the time in work. Maybe learn a framework that is new or create something outside of what you do at work for you to work on. Or how about go outside and enjoy the spring/summer, pick up a non-computer based hobby. 
A small addendum to that; the relative URLs are interpreted relative to the current page's URL by default, or you can specify a different base for relative URLs using the [`&lt;base&gt;`](https://developer.mozilla.org/en/HTML/Element/base) tag.
You mean like all my other posts have been doing? I can't fix the problems in the community, it's too big for any one person to fix. All I can do is try to make them aware, and hope they listen.
Just to put a name to the face, what k3n is describing is the beginnings of a [front controller](http://en.wikipedia.org/wiki/Front_controller). Essentially a single entry point for an application which takes on the task of deciding what initial path execution will take. This is the first step on the path of creating an [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) setup. 
Cool. Maybe the code here will serve as a useful reference: http://mnshankar.wordpress.com/2011/05/01/regression-analysis-with-php/ (Not my code, but it's the first multivariate regression package I've seen for PHP. It uses a linear algebra library that it also implements.) *Update:* I have put these into a public github repo since it's much more likely that his work will be continued there, I believe. You can find the github repo here: https://github.com/carbocation/PHP-Multivariate-Regression
You did see the part where he said he's learning, right? Everyone in this thread is overcomplicating everything. 
Almost every comment here is over complicating this. Php IS a templating language, I love how everyone forgets this. 
When someone is learning something, showing them when something is undesirable is probably more valuable than "just making it work".
For all the times you don't want the template just thrown on the screen... The same reason you assign most variables instead of just throwing them on the screen immediately. Seriously... Most terrible advice because you have extra flexibility? Really? How about you expand on why this is horrible, awful, the worst advice here... because you get a variable you can manipulate, store, cache, etc instead of a text output you can't. I'm listening. It's so horrible that this is what many, if not all, of the major frameworks use (in one form of another) to handle their templating. I mean, fuck, your only complaint can be remedied by commenting out 4 lines that do output capturing. And include is not a function. Sheesh, why do people keep putting () around the path to the file? It does nothing.
Perhaps, but when dozens of people say, "This is the RIGHT way to do it" who are you suppose to believe. I say focus on the fundamentals of said platforms and take what others say with a grain of salt.
If a designer is too stupid to not know how to live with: &lt;?= $myvar ?&gt; vs {$myvar} ...then he shouldn't be in the web business. [PHP Templating Engine. Use it.](http://www.askaboutphp.com/59/phps-alternative-syntax-and-why-its-useful.html) 
The person who makes the most compelling argument for the case. I can't teach you how to separate the wheat from the chaff. That's a skill you have learn on your own through observation, reading, understanding, and experience. The best advice I could give anyone is question everything. Take nothing at face value. The obvious answer is not always the right answer.
Either straight PHP, or move to something a bit more standard, like XSLT. Anything in between is just extra work, imo. Straight PHP gives you power and flexibility. XSLT gives you a bit more security, and at the same time, gives you the ability to work with a standard and employ tools that use that standard. For example, it's nice having an XML file, and being able to process it through an XSLT file without actually having to write any code so you can see your results in real time. I should also add that this also has the benefit of being usable outside of PHP without having to rewrite a parser for whatever custom template language you are using. Standards &gt; Your own pet template language
Except, it's not a good one, nor is it a standard templating language. If you only have to worry about PHP, fine. But the moment you include another language, having your templates in PHP will hurt. Better to then look to a standard rather than reinventing the wheel.
And what a classy edit that is. FWIW I never use cPanel and do everything on my own through the CLI. 
the nice thing about ruby (or python) is that it allows you to try out some functional code without completely switch gears.
Goal was not learning, but best way. Standard &gt; homespun.
Twig [was directly inspired by Jinja](http://fabien.potencier.org/article/34/templating-engines-in-php) (which is itself very similar to Django's default templating engine).
Huge question here, can this be part of a [PCI DSS](http://en.wikipedia.org/wiki/Payment_Card_Industry_Data_Security_Standard#Requirements) complaint setup? Only reason I ask is because I've seen a ton of ecommerce solutions that do some really stupid things. A huge offender is the software called Amember. Had to work on a clients site that was build by another development firm. They were storing full credit card numbers, exp dates, passwords, and all the other private data in plain text on a shared host.
I understand now that php is a templating language, but there does seem to be a lot of different ways to structure your site to pull in content. Large sites that have with diverse pages are going to need a complex back-end to minimize the complexity of a customizable front-end. You need effective consistent methods across the site to pull in shared resources.
You could write it as return ob_get_clean(); if that makes mysql101 happy.
Python's awesome. Apart from being extremely versatile, its syntax makes you write very legible code, which influenced very much my "style" when getting back to PHP or just using other languages. Since you're a web developer, you should really check out Django - state of the art web framework written in Python.
Will the string that comes out of that protect me against a SQL injection assuming I use like: strip_tags ($string,"&lt;b&gt;&lt;i&gt;&lt;br&gt;");
Sanitizing HTML characters isn't for SQL injection, it's for XSS. Meaning when the data is output it doesn't turn into HTML that gets translated by the browser. You escape data going into the database to prevent injection, you sanitize the data coming out to prevent XSS.
So harmful data can be stored in the database but only fucks me if I don't sanitize it when I echo it out?
Mysql sanitization does not remove any part of the data... it makes sure that data is treated as data and not as code. What you are looking for xss sanitation, there are few php classes that will do the job... look it up on google.
Prepared Statements, the protection from sql injection is just a free side benefit really.
Harmful is relative to the container. A bunch of 's in HTML output doesn't mean anything (provided you're not using them in attribute tags), but in a SQL query they're dangerous. Likewise a bunch of &lt;&gt;s in a string mean nothing to a SQL query but can open tags in HTML. Storing HTML in a database isn't inherently dangerous, it's only dangerous if you output it to a browser without placing any necessary filters on it. It's generally considered good practice to store raw data in the database and sanitize it when you want to use it. All you need to be worried about for input into the database is escaping any and all data that comes from the user side.
A cool kids way might be to use a markup language instead, like markdown or rst
Ok, I'll byte, why is the var_dump supposedly displaying null? 
&gt;all user inputted data There's your problem. Sanitizing data only on input is wrong, period. You're supposed to escape data (whether it came from the user or not) when you pass it **out** to something else (to HTML, to SQL, etc.). These are totally different escaping tasks. You can't just run some magic function on all input data and have it all handled perfectly. It's not possible to design such a function.
Your site is utter shit, I'd rather take a byte of glass than visit it and of all the times I actually took the fuckload of trouble to download from there, the code I got was one of the worst I've ever encountered. I hate phpclasses for so many things, I could write an even longer paragraph than you on that subject alone - *and* mine wouldn't be full of bullshit. Downvote me all you want, I hate that cesspool with a burning passion, I just couldn't hold it any longer. 
**DO NOT DO THIS.** It is *incredibly* unsafe and if you rely on it your shit *will* get XSS'd. http://www.reddit.com/r/PHP/comments/nj5t0/what_everyone_should_know_about_strip_tags/
Here's a follow-up to the issue with strip_tags being unsafe: http://www.reddit.com/r/PHP/comments/nj5t0/what_everyone_should_know_about_strip_tags/ I've posted this link three times in this thread already because there isn't enough awareness about how bad that function truly is.
Ob_start
Yeah basically all the shit that comes in looks like $data = sanitize($_POST['data']); Then I throw it into a database. So what I should be doing is accepting the data in all forms then the print statements should look like: echo sanitize($class-&gt;data): For user stuff that has acceptable html statements in them it should look like: echo htmlpurifierfunction($class-&gt;data) Am I starting to get the idea right here? The reason I'm so paranoid is I am just finishing up on a nice project that allows a lot of user input and I don't want my users to have their hard work shat on because I didn't protect their data! 
I disagree to a point -- things like [CKEditor](http://ckeditor.com/) are nicer for users, and usually utilize HTML as the "editor.getContent()" type callback output. Markdown, textile, and their ilk provide a simple way of transforming pure text documents into HTML. However, for a web app, that's not as good for the average end user.
In addition to HTMLPurifier, which is ragged on as being "heavy" to load/execute, I've found this single class library to be very well done: [htmLawed](http://www.bioinformatics.org/phplabware/internal_utilities/htmLawed/index.php)
It's good enough for your average Redditor ;) Seriously though, I do get your point, but rolling your own Markdown-based WYSIWYG would not be that hard. There's probably some open source ones out there too, if you're into that sort of thing. IMO drop-in WYSIWYG editors tend to be very bloated and flaky.
I hope you put a stop to that shenanigans.
 function magic_function($input) { return NULL; } caller casts as necessary
Is php your first language, or do you have solid programming background?
This question is too vague. What are your goals? Aims? What do you mean by "properly"? If you want to learn it "properly", try and make what you think are "proper" things with it. 
Don't get me wrong reading the manual is a good idea, if nothing else it will let you go "Hey I need to do X, oh yeah I remember reading about that function". It does not teach you proper programming however as often the examples they give you do not have any real world application at best or are just plain bad programming practices at worst. EDIT: Forgot a word.
&gt; You pass data to a Twig template the same way you pass data to a PHP template, via glue in your "controller". That's the problem. This makes designing the template far more difficult then needed. You have data. You have a template that reads that data. Putting anything between that is wasteful. &gt; Also, what do you mean by it not being standard? As in, it's not a standard. It's essentially ActiveX. That it was inspired by... doesn't make it a standard. XSLT, however, is a standard, and works quite while. And being a standard, it can work in many more tools, and straight up in browsers, without needing non-standard technologies.
The problem people had was that reddit required them to load it off of google (thus, some security minded folks didn't like the possibility of google knowing their IP/etc visited a reddit page), a setting was added to optionally load off of reddit :)
&gt; A database class (for connecting to the database) Sure. &gt; A login class (which deals with logins, sessions and cookies) &gt; A user class (which is used to ~~update~~ hold user information, ~~view account information~~) Maybe. &gt; A user registration class (which validates and registers users) &gt; A blog post class (which deals with everything adding, removing, updating blog posts) &gt; A comment class (which deals with everything adding, removing, updating comment posts) Not so much. More accurately, only to the extent that such things are _objects_. For example, a comment is a good candidate for an object, and thus for a class: an instance represents a comment, like this one, with some well-defined data and a bunch of operations you might perform on that data. But to what extent are the actions of creating, updating and deleting part of a comment? The answer I'm leading you toward is that they're not: they're things you do with a comment, not a property of a comment itself (nor a method on a comment: the actual changing of the stored data might be a method, but not receiving data, validating it and returning a response). So, my advice would be to consider not just separating your code by what it deals with or what it is, but also by what it does. You'll notice that the "what it does" part (mainly CRUD) is pretty much the same over several of your candidate classes; this should be factored out and live somewhere else. In other words, go see what MVC looks like in a framework you might learn. Then think about getting the C out of your M.
The point gets debated around here often, but unfortunately, it's the sort of thing you can only learn through experience. However, that does leave yourself open to picking up all sorts of bad habits - so I strongly recommend starting by learning a **framework** *first*, to at least get you using a strong methodology. [CodeIgniter](http://codeigniter.com/), [Symfony](http://www.symfony-project.org/) (my fav), and [Zend](http://framework.zend.com/) are all popular around here. After you have a good idea of how an application is structured, then you can worry about the low-level details. The main thing is, you want to look at other people's well-written code, and try to get feedback from people who know the language well and can help you improve. Whatever you do, don't just code in a vacuum - we all learn by seeing what others are doing. Try picking up an open source project and seeing how they structure their code - maybe Drupal or Joomla or one of those frameworks themselves. (Please not Wordpress - it's a great piece of software that's very poorly written.)
Your user registration class doesn't have to be separate class, but it can be part of user class. i.e. $user-&gt;register($params); Same with login. It all depends how complex your app, will be. If you will just register a user (process a post form), you don't really need a separate class. My apps in later years tend to take a ORM approach, which basically means that every database table has its own class (not always a rule, fro relational tables,etc..) . So, initially you would define your data(base) and HOW you will manipulate that data and then work on class structure, rather than other way around. So, fro example, IF you have (big IF) a separate table *account_information*, than you can have another class that handles that. While user class handles user actions (e.g. $user-&gt;login($data); $accountInfo = $user-&gt;getAccountInfo() //returns account info object by queryign the databse and setting the id of the object to the id in the table $accountInfo-&gt;update($data); //process the form data, I would also let user class to handle any ACL/Authentication stuff (i.e. $user-&gt;isRegistred(), $user-&gt;isAdmin(), $user-&gt;hasAcessLevel(SOME_CONSTANT) or anything in that manner. If you want to be adventurous create a user class and then user level classes (e.g. Admin class that extends User class with all common User functions.) Edit: Also,as other have said - look at any MVC framework out there and that would give you better insight on why &amp; when you will need a separate class(es)
I hear xdebug on github works with 5.4: https://github.com/derickr/xdebug.. of course it being unreleased, beware of instability.
This belongs in [/r/PHP](/r/PHP) why?!?
This seems wrong to me. He says: "The best way to implement code quickly is to implement less of it. The best way to have fewer bugs is to implement less code.". That's ridiculous, sloppy code is just going to cause you headaches, and bugs are a result of bad programming, not more code. If you need an object for something then design a well thought out one, not a half arsed one that you cobble bits onto as you go.
They've been doing that for awhile, at least in other languages. I know I've heard about it at UT, that the profs would break the Java code down into bytecode, and then run the algorithms on that -- meaning, little things like identifier names are completely irrelevant! Really cool IMO.
&gt; but I do worry about the possibility of them retiring older versions which I may have deployed as newer versions come out. The documentation states that they have just about every historical version of all the packages they host, so you can tie to an older one if you'd like, no worry of it going away: http://code.google.com/apis/libraries/devguide.html#jquery If for any reason it does disappear, you could always revert back to your own local copy, it's not like you're suddenly without any other options.
Sorry for the late reply. There are still a lot of details to writing a plugin system that you haven't covered yet. For instance loading the plugins. Do you have them configured in an XML file somewhere? Do you simply scan a /plugins directory for .php files? That incidentally could be a nice little introduction to the DirectoryIterator class. Once read from disk, how do you initiate the plugin class? Do you keep it simple with "new $plugin()", or do you get fancy, and introduce people to the ReflectionClass to create an instance of the plugin. For some reason I really love writing plugin systems, and I'm always interested in seeing how other people do it. And, ya know, since the title of your post is "Handling Plugins in PHP", it might be a fun idea to actually show how to create plugins, instead of only talking about design patterns. There needs to be a post that starts with, "So now that you know about the design patterns, lets put that knowledge to use, and create that plugin system." :)
Mistakes aren't always a bad thing. 
Rather than adding stuff like &gt; &lt;span class="error"&gt;**&lt;?php echo $nameErr;?&gt;**&lt;/span&gt; to each input, I feel it would be better to just use jQuery for form validation errors and output any other errors occurring after submission, or for users that don't have javascript enabled, directly at the top of the form, perhaps from an $errors array.
They are if someone's paying for them.
That is one scary thumbnail. I feel like he's about to reach out through the monitor and squeeze my tiny neck.
That's been considered bad for usability. Errors at the top of the form are fine, but you really do need to have a way to mark individual fields that are problematic, *especially* if your form is more than 4-5 fields long. All those multipage signup forms where you scroll up and down looking for *which* phone field isn't filled in properly? Madness.
Or Symfony. Or Zend. Or anything that keeps you from ever having to write chunks of code that are so repetitive as this: if (empty($_POST["name"])) { $nameErr = "Missing"; } else { $name = $_POST["name"]; } if (empty($_POST["address"])) { $addrErr = "Missing"; } else { $address = $_POST["address"]; } if (empty($_POST["email"])) { $emailErr = "Missing"; } else { $email = $_POST["email"]; } if (!isset($_POST["howMany"])) { $howManyErr = "You must select 1 option"; } else { $howMany = $_POST["howMany"]; } if (empty($_POST["favFruit"])) { $favFruitErr = "You must select 1 or more"; } else { $favFruit = $_POST["favFruit"]; } 
eugh, try a netsuite suitetalk integration with a custom ecommerce platform someone built, that isn't documented. pure hell. but it's forcing me away from my normal spaghetti code routine...
Yes, that's the way I have been learning. 
Then [PHP-5-Objects-Patterns-Practice](http://www.amazon.com/PHP-5-Objects-Patterns-Practice/dp/1590593804) is for you. PHP is know as a "kids" and "insecure" language, because so many people do php the wrong way. I'm not saying there is a right way, but there sure is a wrong one. After reading first two chapters, learn a little about http protocol. Since you are programming in C i assume you have some knowledge with network programming and sockets, if yes it will be really easy to understand basics. If you didn't program with sockets, do that (it's really fun, you can create you own server, listen on that port and create a web application with C ). After you get familiar with http ( pay special attention to POST and GET ) you can start working on home projects, learning HTML in the process ( it's really easy so i won't post anything about it here ) and using knowledge you used in first book to design a good app. Also [manual](php.net/manual/en/) is amazing, if unsure about something go there. This is a proper way to do PHP, so you actually know what you are doing. If you want to just build web apps and don't care about anything ( and continue to contribute to myth that php is "xy" language ) do just that. Protip: Go the hard way.
I'll look into Symphony and Zend. (I don't like CodeIgniter)
Then take a look at reply above, everything should be familiar there and it's good gateway from Java to php ( the OO way ).
All around unusable code.
Because it's all about TextMate, my friend. In lieu of using Mac OSX, use vim. If you're stuck on Windows, Notepad++. IDEs are overrated edit: though, I really miss using Zend Studio and its debugger. There is really nothing that compares, in terms of wonderfulness, to a step-by-step debugger.
I'll stick to Zend_Form
It appears that the library you linked examines the headers and user agent sent by the browser. Unfortunately, there is always a way to avoid detection. Many browsers allow spoofing of User-Agent strings. There really is no fool-proof way to know what browser the end-user is using; you just have to "trust" the header information they send in their request.
I've never had any problems with NetBeans IDE (especially the lastest 7.1). It has all of the features you want, and you can customize it to remove some of the clutter in the GUI. ( I also understand you've tried it, so don't hold me against it. I use it daily for complicated things and it's never steered me wrong ) Also check out [Sublime Text](http://sublimetext.com/). It's my favorite code editor.
I didn't realize there was an [/r/jquery](/r/jquery). And how many people code in PHP but not jQuery? So I thought it's relevant. A little bit of an overreaction you had there?
That's like a carpenter saying nail-guns are overrated, and pushing the nails in by hand is the way to go. Sure, it might work, but why go through the trouble when tools are made specifically for the purpose?
So it's only a matter of user agent string? Additionally, are there any other ways to detect whether user is browsing via pc or via mobile using php?
There is also an [/r/javascript](/r/javascript). &gt; And how many people code in PHP but not jQuery? That's 100% irrelevant. &gt; A little bit of an overreaction you had there? A question is an overreaction? Nope.
&gt; Nothing crazy just &lt;b&gt; &lt;br&gt; and &lt;i&gt;. Consider using a BBCode library instead of user-input HTML. [b]Bold text[/b] becomes **Bold text** and [i]Italic text[/i] becomes *Italic text*. As for &lt;br&gt;, just use nl2br()
http://www.dmolsen.com/mobile-in-higher-ed/2012/02/21/ress-and-the-evolution-of-responsive-web-design/
I concur as well. I've been using PHPStorm for over a year now and I have little complaints about the software. Jetbrains has done a fantastic job of updating the software every couple months that have tackled most of my problems. Give it a chance with their free trial. In combination with PHPStorm, I use SublimeText2. It's a robust text editor that is better than Textmate in my opinion. Try it out for free since it is still in beta. 
I would like to submit my [PHP Template](https://github.com/xeoncross/php-template) class. It's native PHP so it's fast. It acts like basic views from frameworks - yet it's so much more powerful. Views can actually extend other views just PHP objects can do. See [phpti.com](http://phpti.com) for an intro to this concept. Then download my class and run the examples to see how powerful it is. There is no longer a need for controllers to load multiple views or manage layouts - the views (presentation layer) can do that themselves.
Actually, Zend_Auth_Adapter is pretty flexible. We're talking about the adapter, right?
Source?
I'd love to see more submissions like this to this subreddit..
Really? It hardly needs a source. 5.3.10 was released a month before 5.4. PHP has always maintained at least a couple *years* of previous-version support before deprecation. http://en.wikipedia.org/wiki/PHP#History 5.2 was supported up through 01/2011, 5.3 was released on 06/30/2009. Corporations *require* multi-year support, because it can take that long to migrate to a new version.
I've been using Eclipse with PDT for a long time now and have no issues with it. There should be plugins to do everything on your list.
Thank you. That's exactly what I was looking for. As a host, I needed to know this because I offer 5.2.17, 5.3.x, and 5.4.x.
nice, thanks for the info. hope to see it there soon. even for non-contributors, it provides such a nicer way to link someone to part of the source.
re: cluttered gui, I understand not liking the 'clutter', but netbeans and zs, and I presume phpstorm, remember the state of your settings. If you close or resize or move a pane, it'll keep that same location next time you use it. I'm not a huge fan of the 'perspectives' in eclipse-based IDEs, but I get it, and it's generally useful if you switch between tasks (step debugging vs editing, for example). re: autocomplete, I think it's not that the 'wrong' variable names are filled in, but the names of the arguments in the method you're calling are used as placeholders, and yeah, I agree, that's a bit of a bugger. I rarely use the same variable names outside a method as I do inside a method, and it's just more work to undo the 'helpfulness'. I haven't done much with phpStorm, but I like intellij for java/groovy work, and I'm guessing they've done as good a job with phpStorm as with intellij - bonus is that it's not eclipse-based.
Tradition has always been about 2 years of support from the last release after a new stable version bump. That's generally backports or version specific security updates only, and the tighter release schedule you mention above won't effect that. For the most part, patch version numbers never contain new features anyways.
This is pretty rough. You've got all of your layers mixed together here, no abstraction at all. Which means pretty much none of this would be reusable. You should think about learning a framework like CodeIgniter, Symfony, or Zend and see how they do it instead. 
&gt; So, what you're saying is, my concerns are well founded. Well, I don't know. You asked, &gt; where is the Twig Python library? and I provided it (roughly speaking). I don't know *why* you'd want to potentially use different controller languages to render your templates, but if you need to do something with both PHP and Python, that's a good place to start. &gt; My problem with Twig-like template engines is several: Output is tied to the programming language. I have data defined, and I have the template. I now have to tie the two together before I see any output. This means programming. For what sort of templating language is this not the case?
Getting back into this conversation late, but... &gt; Why haven't the mysql_ functions been maintained better instead of being succeeded by more complicated class-based solutions? First, that's a very good question that I don't have the answer to. It may seem as though PHP devs just gave up on the old mysql extension entirely while devoting all their time to building this model, new-wave OO-style mysql_i_ extension. I'm sure they have their reasons, but I can't personally see why they didn't simply bring the existing mysql extension code up-to-date. Also, there is also the popular PDO extension created on the side also handling the same DB API, and there's no sense in duplicating efforts. Second, the `mysql_i_` extension [offers a purely procedural option on top of an optional object-based style](http://www.php.net/manual/en/mysqli.quickstart.dual-interface.php). For jumping from old mysql to new mysql_i_, this way seems ideal IMHO. You can actually switch between mysql_i_ procedural and OO style at any time anywhere in-code if you wish, and you don't have to if you don't want to. This appears to be made to cater to old-style functional users not yet accustomed to OO-style, while subtly encouraging them to adapt to a second style. Where as PDO doesn't appear to offer any procedural style options at all, so may be more difficult for those not accustomed to OO style. 