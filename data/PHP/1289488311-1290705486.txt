Try this: &lt;?php while (true) { if ($fp = fopen('myfile.log','a') === FALSE) { throw new Exception('Cound not open file handle!'); } if (fwrite($fp,"new line".PHP_EOL) === FALSE) { throw new Exception('Could not write to file handle!'); } fclose($fp); sleep(1); } ?&gt; 
By the way, "not equal" doesn't mean the same thing in Big O complexity. Two O(1) tasks might have drastically different run times and still both be "constant time". You only proved that if count() is O(1), it has a higher constant than variable reference, which is interesting, but not helpful in deciding the actual complexity of count(). Runtime testing doesn't necessarily reveal complexity. You can't guarantee that your code is the only thing the processor is doing, and the actual runtimes can be hidden in the noise caused by other processes. The best way is to analyze the code, as I think others have done in other replies, but I guess you can still estimate to get some idea of how something scales with input size. A better estimation would be to iterate over lots of input lengths. for( $l = 10000; $l &lt; 1000000; $l += 10000 ) { $a = array_fill(0, $l, 1); $t = microtime(true); for( $i = 0; $i &lt; 1000000; $i++ ) { $c = count($a); } echo 'Time for 1,000,000 count()s with '.$l.' values = '.(microtime(true) - $t) . '\n'; } When I run that, all of the times are around 0.3 seconds, so based on that I would guess that count() is O(1).
You should show /r/codeigniter some love and post there. It is sad how neglected that subreddit is.
Off topic: `count()` can be overloaded by implementing [`Countable`][1]. [1]: http://www.php.net/manual/en/class.countable.php
This seems to be the most accurate answer. I checked php.net, and they do have alternate modes, but in default it seems to be O(1).
I didn't know about it. I'll repost.
My first reaction was "setup a default value on that column" but it looks like MySQL isn't very flexible in this regard. According to [their documentation](http://dev.mysql.com/doc/refman/5.0/en/data-type-defaults.html): &gt;The DEFAULT value clause in a data type specification indicates a default value for a column. With one exception, the default value must be a constant; it cannot be a function or an expression. That's not gonna work. So I guess you have the choice of a) Populating your calculated field with your INSERT statments or b) Using a Stored Proc to do inserts or c) Using a trigger. In this situation I would lean towards option a.
Wow, looks cool!
With a horrible logo on [their website](http://winapiforphp.net/).
This is cool. I've been looking for a Windows replacement to PHP-GTK for a while. That project stalled a bit last year and was difficult to build around. I haven't used it for a while, but I do look forward to trying this out instead for my Windows only applications.
My only thought is:Why spend so much time on a 'because we can' project? Who's ever really going to build a windows app with php if there's a gazillion IDE's and languages outthere that do it better? The only real cool thing i can see this do is port it to a javascript proxy and then kickstart windows 8 :P
[practical php programming](http://www.tuxradar.com/practicalphp) worked for me. Online book.
I do stuff like function dec_to_hex($int) { return dechex($int); } function proper($string) { return ucwords(strtolower($string)); } because php's method naming strategy is hosed in places. strpos, str_pad etc.. but that's really the only reason I'd wrap that stuff.
You need to be travelling at 88 miles per hour on November 5th in order to get the appropriate flux capacitor and then setup these scripts to run using .. cron.
easily port a HTML presentation layer written in PHP to an aesthetically familiar in-memory application, or something like that?
Safe, clean, efficient: [jquery barcode plugin](http://plugins.jquery.com/project/BarcodePlugin)
I just forked [Mantis](http://mantisbt.org) and launched [Mango](http://mango-pm.org), which will be project management only, with a jquerymobile interface. It will be fun. C'mon aboard.
MVC, Overloaded Active Recordish Classes, [Whitesmith Style](http://en.wikipedia.org/wiki/Indent_style#Whitesmiths_style)
IMO, dependency injection as a concept is much ado about nothing, a magical relic from Java that adds considerable complexity without adding much of anything. Are you too lazy to re-write that framework that you f'cked up? Well, there is a work-around for that, allegedly a "design pattern" - but in reality it's just a hack to avoid spelunking through your scary basement. That said, I have skimmed through Lithium periodically over the past few weeks and think over-all it's impeccably well written and terribly useful(no, I don't work for them).
An object is simply a more complex variable with functions inside it. When you are inside it (the class definition) it's $this, when you are outside it, it goes by the name you instantiated it with. It took me about 2 months to fully grok this inside/outside concept. Then I was okay. 
crack open a text editor, write &lt;? class Foo { $bar = null; } $foo = new Foo; // let the vardumps begin..
Mantis, Mantis, Mantis.
Command line/utility scripts can be written quickly in PHP.
This is the one true way.
[Jquery UI Datepicker](http://jqueryui.com/demos/datepicker/)
Once I get some free time I'll have to check out how they're doing everything. GDI and System shouldn't be too bad. But the animal that is Windows GUI isn't something you can't wrap very easily, especially not in a PHP friendly manner. Hell, there aren't even any C++ wrappers that handle the GUI decently. 
I wrote a cacher for my FacebookUser class and added a reload arg to the constructor. If the guts (array) are not in the cache or if you pass reload, the constructor does a query (and makes the cached copy). $fu = new Facebookuser($db, 1, true); # reload (not cached) user_id 1 
Oh lord, i thought Smarty died. Now I'm sad
I don’t understand why templating engines are needed in PHP. PHP has a templating syntax already (moreover, there’s an [alternative syntax][1] that helps templating), because it was born as basically _programmable HTML_, in other words, template engine. [1]: http://www.php.net/manual/en/control-structures.alternative-syntax.php
I don't know, I think it illustrates the idea of binding PHP to WinAPI pretty well...
Any overview of the major differences/updates?
I agree with you, but smarty does have some curious syntax that is interesting to work with: {html_table loop=$myvar|truncate:40:"..."} you can chain this sort of stuff together: {$articleTitle|lower|spacify|truncate:30:". . ."} I *think* this looks nicer than: &lt;?php echo truncate(spacify(lower($articleTitle)), 30, '...'); ... or is it? I don't know, I'm so used to the normal PHP it's hard for me to call. It's also easy to write your own modifiers and filters and stuff. Smarty 3 also does [template inheritance](http://www.smarty.net/forums/viewtopic.php?t=17953&amp;sid=e24fd5084a1d58d68b06a2326c17f0d3), PHP doesn't have this sort of thing built into it (i.e. MVC where the view templates have inheritance built in) so you need some sort of view tool/class to do this for you. [Zend_View](http://framework.zend.com/manual/en/zend.view.introduction.html) does all this for me and lets me use the alt syntax. But I don't get those wacky Smarty modifiers.
It's super easy to use caching in Smarty, I do like that benefit.
That stuff does not belong in the template any way! You're modifying data which you should do in your controller/model depending on which style you use. The key to templates is to keep is as simple as possible, a good template contains only control logic and echoing of data. From what I can read template inheritance does nothing but move logic from the controller/model into the template. It allows your template to know how the header should look and even dictate it. A template should not be that smart, the controller should. The only use I've ever had for a template system was when I couldn't trust the template designer, be this an outsourced person I've never worked with or the end-user. If I need to be able to limit what my template designer can do then I need the template language. Other than that? Waste of CPU and brain cycles.
The use of *truncate* (and similar functions) is a decision that, for me, belongs in the View. The data is not being modified; it's being displayed in a certain way. Otherwise, in order to change the View, I would have to alter code in the Controller. The Controller only needs to know what data (or Models) the View requires. The View then displays the data from the Models accordingly.
http://smarty-php.googlecode.com/svn/trunk/distribution/README
Oh come on, what is with all the Smarty hate? I don't think your comment is helpful or constructive. Smarty is useful to other people, myself included, for a variety of different reasons, if you don't like it, then don't use it. You certainly don't need to click on a link titled "Smarty 3.0 out of beta". Someone put a lot of time and effort into creating Smarty, and giving it away free to the community. A lot of people are extremely grateful for this and find Smarty very useful. Why piss on everyone's bonfire? Just ignore it if you don't like it.
&gt; That stuff does not belong in the template any way! Correct, it belongs in CSS.
The Twig templating system's site does an alright job of argueing for (his) template engines. It's also a really good one, blazing fast too. http://www.twig-project.org/
If you have ever tried to customise the POS that is OSCommerce, you will understand why we need a templating engine. Yes, in the end, you *can* put everything in one big file, but it is easier in the long run to divide up the application into functional layers.
Because Smarty makes people code dumb by adding another layer
So are you suggesting that there is never any reason anyone could use smarty to be more productive? Or that there is never a good reason to add another layer? If so, you are incredibly short sighted. And seriously.. if you're going to bash something because people use it to code badly.. why not start with PHP?
&gt;From what I can read template inheritance does nothing but move logic from the controller/model into the template No. All your templates share common stuff, header, footer, js, css, menu, navigation, breadcrumbs. Some templates will modify them, say you have some cool widget that requires some jQuery and a .css file (e.g. a calendar). This is a perfect case for inheritance. If your templates look like this: include 'header.php'; ... stuff .... include 'footer.php'; you should look at how [twig](http://www.twig-project.org/book/02-Twig-for-Template-Designers) does it, zoom down to the inheritance section. Or look at ZF View. ZF View lets you 'inject' stuff into the header like this: &lt;?php $this-&gt;appendCss('my-style.css'); $this-&gt;appendJs('calendar.js'); $this-&gt;startJqueryCapture(); ?&gt; calendar.run(); &lt;?php $this-&gt;endJqueryCapture() ?&gt; Please enter your date: &lt;input type="text" id="cal"&gt; Well, I forgot the exact syntax - lol but you get the idea. All this logic resides in the view. Like all code, the view is a hairy, wooly, complex beast that needs taming. Using inheritance just lets you manage the *view* complexity. There are lots of other ways (partials are a good example, widgets are another) but it's nice to see smarty has inheritance now.
thanks.
My thoughts exactly, benjick.
If this is a success, it will end up being a bloat like the rest of the CMS systems. I installed Magento commerce the other day. It had 300 tables out of the box! It was not made that way but its success required multiple languages, currencies, payment types, authentication, etc..
You won't hear me arguing that Magento isn't a total mess. I'm sitting at 13 tables now and wondering how I can get rid of them. And you have my word it will never be bloated. Sub half-second page rendering times, low memory footprint, secure, and highly customizable are my goals. I'm getting ready to release the beta at the end of November, you should sign up on the list at http://sankla.org to be notified when I do. Thanks!
Mine was and still is more: 1. Oh fuck, how do I do this 2. Google "php some function" 3. now how does that work?! 4. google "php another function" 5. go back to 1 
Textpattern
Word. A lot of developers are quick to bash technologies they don't agree with. Projects like Smarty are filling some void. That's why they've gotten to the point of releasing version 3.0, for instance. Smarty was also a [sub-project of PHP](http://smarty.php.net/) at some point. That said, I am also not a particular fan of Smarty. At all. I find it entirely useless (in the context of _my_ use-cases). But that's an opinion that I'm not basing on popular knee-jerk or hivemind thinking. It's something that's evolved over time. And my experience certainly doesn't apply to everyone. This goes back to around 2002 when I was using PEAR's [Integrated templates](http://pear.php.net/package/HTML_Template_IT). Separating business logic from presentation logic and all. A bit later I switched to [Sigma Templates](http://pear.php.net/package/HTML_Template_Sigma/). The problem was that those templates don't really do presentation _logic_ at all. Eventually I dabbled with Smarty, and immediately found it bulky and slow. And just as limiting. Of course there are ways to write plug-ins, but it still felt cumbersome. I find most template languages annoying in that I have to essentially learn a [DSL](http://en.wikipedia.org/wiki/Domain-specific_language) for doing presentation logic, even though using pure PHP works _just fine_, not to mention it's faster out of the box. Now, I can see a use-case where you're letting non-technical people such as customers loose on being able to build their own templates and want to prevent to execute actual, raw PHP code as a security measure. But beyond that, I don't think template languages do that much good. This [article on template engines](http://www.massassi.com/php/articles/template_engines/) is kind of interesting. It reasonably explains why something (complex) like Smarty is not _really_ needed. I'm a fan of [Zend_View](http://framework.zend.com/manual/en/zend.view.introduction.html) in combination with the proper [view helpers](http://framework.zend.com/manual/en/zend.view.helpers.html) for anything more complex than a one-liner, [alternate PHP syntax for control structures](http://php.net/manual/en/control-structures.alternative-syntax.php), [short tags](http://php.net/manual/en/ini.core.php) enabled, and the proper layers of [Zend_Cache](http://framework.zend.com/manual/en/zend.cache.introduction.html). I've worked on a project a few years ago that used the Zend Framework and the only reason Smarty was used was because the designer was afraid of PHP's &lt;? ?&gt; tags. Really. And if you [compare the syntax](http://www.smarty.net/syntax_comparison), it's not much of a difference. Especially if you use short tags, which they're not doing in those examples to dramatize for effect. Anyhow, the project turned into a mess as people didn't write or use plug-ins. The presentation logic was leaking into the controllers which were now concatenating strings and building HTML snippets so Smarty could be this "dumb template engine". Barf. Of course, this isn't really an example for the purpose of pointing fingers at Smarty. Because the response to that would be "well, you used it wrong." Still, it left a bad taste in my mouth. It just seems like unnecessary overhead. It's like trying to use [XSLT](http://en.wikipedia.org/wiki/XSLT) as your template language. On purpose. Long story short, I'm quite content with using Zend_View (and Zend_Layout) and I'm much more careful to work with people who buy into the same technologies. Having everyone on the same page is _most important_ for coherent productivity. And if that group decides to use Smarty as a whole, that's fine too. TL;DR - Use whatever you like. Like-minded people work better in a team. I prefer Zend_View.
Agreed. And if you're doing anything complex, it's time to use a view helper. &lt;?= $this-&gt;formatArticleTitle($article) ?&gt; Now you can easily update the view helper to uniformly affect all places that format your article title.
Use capistrano (or, I guess webistrano) with passworded deploy keys for production...solves the problem.
I have a set of classes I've been working on for about 3 years... happy to share if anyone is interested.
Smarty is a major boon and needs to go away. It does nothing but abstract PHP in a VERY annoying way.
&gt; the only reason Smarty was used was because the designer was afraid of PHP's &lt;? ?&gt; tags I ... bu... wha... &gt; Projects like Smarty are filling some void. That's a polite way of saying what I want to say right now, so I'll just quote it.
Looks like they fixed a lot of problems with arrays, array keys and looping. Besides the general syntax (and, say, the general unnecessity of it all), those were my biggest complaints.
I already understand why we should separate views from models and logics. What I said is I don’t understand why not use just PHP own syntax as templating engine.
It seems straight PHP port of [Jinja2][] which is a well-known templating engine for Python. [Jinja2]: http://jinja.pocoo.org/
just use Dwoo
(Not so) theoretical situation; I use Smarty because in my team there are a few people who are designers, not coders. Now, these people are almost certainly capable of learning the PHP necessary to produce the HTML files that they have to, and many of them are willing, or even eager to dabble in PHP. That said, I don't want them to. I don't want to give these people the opportunity to accidentally call functions or access values in PHP they are not supposed to, I don't want them to start thinking they can just dive into PHP code and put some business logic in the front end because, well, the PHP open bracket is right there. I speak from experience when I say this is exactly what can happen. "Hmm, the figures I'm getting from the Business Logic layer aren't quite right, but hell, I know a little PHP, I'll just fix them in this file instead of bothering the programmers". You can easily end up with code written by non-programmers in your template files. ARGH! Also, a tpl file will generally display fairly nicely in a web browser where a .php file won't. Edit: Also, damn it, I like the caching, I like typing a few less characters, I like the visual reminder that I am not in PHP anymore and don't start doing any data processing here. If performance is that much of an issue (for what little difference Smarty makes), then I am going to be using C# anyway.
But people can still see projects they don't have access to, right? I'd like to prevent people from acting on projects to which they don't have access, and also not see those projects as well. I've taken a look at the source for Webistrano and I'm thinking about adding the functionality myself (want to do some RoR hacking anyway). I've forked the project on Github... feel free to follow it: https://github.com/mitc0185/webistrano
Do you mean bane?
Because, if you want to render anything securely in PHP you have type a crap-ton of code. Compare: &lt;?php echo str_replace("\n", "&lt;br /&gt;", htmlentities($value, ENT_COMPAT, 'UTF-8')); ?&gt; to something like: {$value} That being said, smarty is really bloated and its syntax is very weird. When I needed a compiling template engine I wrote my own that's a fraction of the size. 
In that case, it sounds like you really need flock() unless you want a bunch of mixed up content in your file. What are you actually trying to accomplish here? 
If you've ever worked with a big, corporate solution created over a long period of time... You'll realize why SMARTY is just plain awful. Just awful. MVC is necessary for big projects, but not using SMARTY - it is largely unnecessary in PHP, to have a custom language just for templates. It is confusing, buggy, slow, and adds an extra layer for vulnerabilities.
Why write a compiling template engine? Just write one that uses PHP, and exposes certain 'modules' of methods that can only be accessed in a template. It sticks with the MVC standard, you don't have to learn a new language, and it's faster.
Because when people use SMARTY, people like myself and I'm assuming a lot of other PHP redditors, have to deal with it later. Working on a legacy project that decided on a whim to use SMARTY is a massive pain. When SMARTY is accepted as a templating solution for live projects, it is used in live projects - normally by a newbie programmer who was contracted to write something for a corporation. Corporation eventually fires this programmer, and goes through several years of hiring various other programmers - who proceed to butcher SMARTY, modifying the core files, not writing functions in it properly, etc.. Making it impossible to update or work with. SMARTY is fine for small, casual projects - or for people new to PHP, as long as the code is kept between a few programmers/designers, it works out fine - but that's rarely how it works out. You can still write code that should **not** be in a template file in SMARTY, your designers can still royally screw your site up, etc.. The only difference between PHP and SMARTY in those regards - is that now the programmer has to learn a new language too. So I'm sorry, but I can't just 'ignore' SMARTY news, and I can understand why a lot of other redditors can't either. In a perfect world, none of what I said above would happen - but it does, a lot, and I'm one of the ones who has to clean it up.
Don't you have code reviews?
Of course, what is your point?
What you're complaining about is people using Smarty incorrectly, I can't agree with or defend that..
What I'm complaining about is that it's not possible to use SMARTY correctly 100% of the time in large projects, and even when used correctly there is no benefit over using PHP correctly. Don't get me wrong, I used to love SMARTY and used it religiously, but after awhile you start to realize it adds nothing but problems. Or at least I did.
A boon is a good thing.
&gt;I don't want to give these people the opportunity to accidentally call functions or access values in PHP they are not supposed to Don't they work?
It's still not optimal that way. PHP is crappy as a template language -- the signal-to-noise ratio is way too high. With some simple constructs, you can make the templates significantly more clear than the equivalent pure PHP code. And safer too, since the default is to properly escape everything. It's not really a new language, either. Smarty wastes a lot of effort parsing a not-quite-similar to PHP language -- I just allow any PHP expression between the braces. It's not slower either, since it's compiled to PHP code and cached -- it might even be faster since it inlines code rather than making function calls. The template engine does a little more than this too -- custom tags become instances of classes to handle high-level tasks like, for example, form fields and grids. I can define a form field as a tag and it'll pull in all the code to validate that field (client and server side). 
Always always escape regardless of how it is put into the query. You coded sku to always be numeric but it creates an open door for an attacker if you don't escape it beforehand.
I'm a CEO of a web shop. Here is why templating engines are important. I have **developers** working on their PHP code and **designers / integration specialists** working on the HTML/CSS aspect. I do not want my **designers / integration specialists** to fiddle in PHP code and break the work of the developer. I do not want my **developers** to fiddle in HTML / CSS code and break the work of the designer. I don't want to increase my costs by having **designers / integration specialists** know PHP (opposite also applies).
This seems really nice, but I need to be able to have it print well in as many cases as possible. I ended up going with the PDF solution that chime suggested.
You are not using parametrized queries.. sigh
I'm with you on this one. As a PHP developer for a small web design/hosting company, we recently took over hosting a site for a new client. My task was to pull down the existing site and get it up on our preview host. Little did we know when we quoted the price of $free to move everything from one PHP/mysql setup to another, was the damn thing a SMARTY site. I have zero experience with it and any other template engine and I don't want it. I've spent at least 6 hours getting the thing working right (granted some of that was phpBB issues).
[verbier](http://github.com/Hanse/verbier) looks promising too.
While i dont like Smarty i like template engines (i prefer Dwoo atm). The most important feature for me using a template engine are "block plugins". That's a feature PHP as "template engine" dont have. Most of the time you're using PHP to generate HTML that contains block elements and the UI-Design is organized in blocks too (TabsControl -&gt; Tab -&gt; Panel -&gt; Content + Widgets ... and so on ). Why should i use the serial "template engine" PHP?
His point was that your usage of Smarty seems to be (at least partially) for the purpose of preventing designers from writing PHP. This hints that you're employing a technical solution to a business / political problem. One approach is for you to be able to enjoy the capabilities of raw PHP code, while using code reviews to point out poor code written by designers (or _anyone_, really). That's actually also the approach that we're taking at work. Our designers are responsible for the cleanest use of HTML and CSS, since that's _their_ domain. If they need anything "fancy" in terms of preparing data for output, we provide (unit tested) view helpers. It works well for us since the developers also create (crude) view scripts which the designers then optimize and style.
It's just nice to have that separation. It's a psychological thing as much as anything. Plus the other reasons I mentioned.
They print just fine for me.
considering my skill level, unpaid. I want to focus on gaining useful experience and skills right now.
Great question. As someone starting out I'd be interested in finding this out as well!
Interesting idea... what would you want to learn and over how long?
well, I would like to learn how pros doing their programming. I am mostly a self taught programmer so I am missing the techniques I would gain when learning from pros instead of just books. Also, I know I have to know how to use team oriented software like version control software. I haven't used one before. I figure 4-8 months would be good. But I also work full time, so I'm limited to committing 1-3 hours a day to it on weekdays and 4-6 hours on weekends.
Akin to what [glacierexpress](http://www.reddit.com/r/PHP/comments/e5vxz/how_to_go_about_finding_an_online_internship/c15jyqu) said, rather than do unpaid business work, why not select an OSS project to your liking and attempt to contribute? Some possible benefits: * Working with an international team * The project would likely enforce coding standards and use a [DVCS](http://en.wikipedia.org/wiki/Distributed_Version_Control_System), like git or hg * Alongside closing out community tickets/bugs, you can take on tasks for feature development or writing extensions/plugins are you become more acquainted * Build up a reputation and/or business contacts in the community * Your work is public record and not tied up in some company's private code base (great for providing code samples down the line) Projects such as Symfony2, Lithium and Zend Framework 2 would be great opportunities to pick up solid PHP 5.3 skills, and familiarizing yourself with them while under active development could make you a marketable hire when companies start adapting them some months down the line (all are still under active development, with Lithium perhaps the most stable).
http://www.reddit.com/r/UofRIntro2PHP/ You should be able to get caught up pretty fast.
I completely agree. Especially because open source components are so widely used in web dev. to save time and money. Also, along the lines of building up a reputation -- I think it'd far more impressive to say that you're a significant contributor to, for example, Symfony and Wordpress rather than obscure company X's CMS or something. You may be able to build up the expertise and contacts this way and then take them on to work for yourself rather than in a company. Giving you more options.
as usual: unpaid : find opensource project you like on github and join. paid : find something easy on odesk.com and join. 
do not join big projects such as Symfony2 or Zend or Lithium. you dont have skills and you need to build them. find small and good project and make big contribution. example : 'i am one of 2 contributors of xxxpdf which helps you creating pdfs from php' vs ' i am one of 156 452 contributors in zend frameworks, they deleted 99% of my contributions but i think you can find 2 lines of my code somewhere there' 
I've had good experiences just building things like WordPress plugins. Look around for a need, find something that either hasn't been done or could be done better, and work on filling that hole. There's a lot of people who are willing to pay for good WordPress work, and having someone with experience making plugins is the first thing they'll look at.
cool. PM me a contact email address and I may be able to help you out.
I think the odd indentation is kind of a way of indicating that the function is (for the purposes of the application) effectively an anonymous function. If this were 5.3, no doubt they would have done something like: dispatch('/writing/*/to/*', function() { # Matches /writing/an_email/to/joe $type = params(0); # "an_email" $name = params(1); # "joe" # ... } );
Where would be a good place to find smaller projects?
https://github.com/search?langOverride=&amp;q=php&amp;repo=&amp;start_value=280&amp;type=Repositories and go up. 
or http://sourceforge.net/search/?type_of_search=soft&amp;words=php
How did you manage that in 3-4 weeks. It'd take me at least 3 months to work on that.
are you proficient with drupal ;) I'm looking for a drupal developer! haha
http://openhatch.org
So to further clarify you create the view in mysql as rbnc showed you above, and based on his example you then run a select query like 'select * from new_table_name' which will give you your joined fruit name 'red_apple' in the color_fruit column
You don't want to know... :) I'm slowly rewriting parts of it in more sane code. 
They're programmers, not designers...
Just came through it and I'm using in combination with idiorm and mustache. It made me want to use PHP after 6 years of avoiding this and camping in python :)
There was a joke about linux some time ago, that there are more linux distros than linux users. It seems that this joke can be adapted to php frameworks now.
I got interested in FatFree Framework, but it requires php 5.3. Came to this combination after a weekend of internet scavenging. The most confortable environment yet, and works with php 5.2
&gt; Clean and simple DSL for writing powerful web applications Stopped reading here. A set of classes and methods does not a [Domain-Specific **Language**](http://en.wikipedia.org/wiki/Domain-specific_language) make.
You're missing an 'is'. Here's is an extra one.
Are you, by chance, looking for [phpPgAdmin](http://phppgadmin.sourceforge.net/)?
*Thank you!* I see this all the time and it's ridiculous. Having a list of chainable shortly named methods on an object does not make it a DSL! This is not a DSL: $db-&gt;select()-&gt;from('table')-&gt;where('field = 10')-&gt;where('age &gt; 24')-&gt;query(); It's a nice API and interface to a larger sub-system, but it's not a DSL. I see this in the Rails community often. New developers: please note the languages in the Wikipedia article above are actual languages that are very specific to a certain subset of problems. Thanks for pointing this out, **McGlockenshire**.
Thank you grammar nazi, sadly I can't edit the title
Requiring 5.3 should be a bonus, not something you "fix". 
No, I'm looking for database connectors, ORM's, etc
I know, it's just I don't have where to host 5.3
I think a lot of the reason has to do with prevalence: MySQL is everywhere, especially on your average $7 / month shared webhosts. 
What do you use for database interaction?
We use Zend + PDO to connect to PostgreSQL. Seems to work well.
I would use PDO, php.net has a good tutorial to get you into it.
Look at pdo-mysql documentation: http://php.net/manual/en/ref.pdo-mysql.php Now look at pdo-pgsql: http://php.net/manual/en/ref.pdo-pgsql.php sadly pgsql's is not mysql's. I'm talking of that kind of things. Anyway, I told I'm a PHP noob, so I could just overlooked some stuff. 
PDO documentation on postgres look scarce too me. Even more comparing it with mysql's documentation. Overall I found little information about PHP + Postgres comparing with PHP + Mysql. I just wanted to know some background. 
Sure, as far as I can tell PDO is THE way to go. I've been using https://github.com/j4mie/idiorm for my needs, which is built on top of PDO. It lacks some features working with pgsql, like incrementing the ID value automatically, but the project is still young, I believe pgsql support will be stronger in the future. Hopefully :)
It seems there are countless PHP frameworks that attempt to solve the most mundane and easy problems of web development: routing urls to code. 
More people use MySQL. So more people make tools. So more people write documentation. It's that simple. In some cases, it might even be a self-feeding cycle: more tools and more documentation means more people using MySQL. I feel the critical mass for Postgres hasn't happened yet -- probably because these technology decisions take years. 
Apart from the the fact that MySQL is more popular, I suspect it's also because the postgres users have fewer problems. They're typically smart enough to solve the really obvious things themselves.
Interesting thoughts. I prefer using auto-increment for the sake of simplicity. &gt;"Your Warranty Claim number is 108207." That's easy to write down. It's easy to talk about on the phone. It fits well into detailed reports. Also, get\_last\_id() (or it's SQL Server equivalent: SELECT @@IDENTITY) is something that my data model does automatically, and $data-&gt;insert() returns the newly created ID.
I once dated a girl with an IUD...
Use mysqli and re-write all of your statements to use bound parameters. It will basically prevent injections completely.
I swear by autoincrement IDs. I think that the extra metadata contained within them (the order of insertion) added to the ease of setup and joins makes it far worth a little line or two of retrieval...
I can second this. When you have a identifier that needs to be provided to the user giving them a number as opposed to "550e8400-e29b-41d4-a716-446655440000" is a lot nicer. To the OPs point using UUIDs that are generated specifically for the table can be a little more secure when your using the ID for things like APIs since they are not as predictable as 1,2,3...
How are you generating UUIDs? Something important to consider... PK lookups on varchar (or any string) fields are horrendously slow, so you could see a problem there.
The only thing I don't like about UUIDs is joining across tables with them. It means joining via char field, instead of int; this is a many times slower.
Don't forget to press F5!
Insert shameless plug here for my series on building a DSL in PHP. I'll be posting part 3 this week. http://dougmart.in/2010/10/building-a-dsl-in-php-part-1-the-pipeline/
&gt; Developers still see it as the future, but they think it is currently overhyped and vendor-driven Got it in one.
Please stop writing SQL queries.
And if you hide away those extra lines in a framework's api...
64bit integer comparisons are very fast on a high scale. Most people who store UUID's dont even bother converting them to a BIGINT, and just store them as VARCHAR. Bad, if you care about performance.
I'm fairly certain that a properly indexed varchar column of UUID's will join at the same speed as an indexed column of ints will. 
Char joins shouldn't take too much of a performance hit if they're indexed and properly collated (and assuming the DB engine in question isn't poorly written). In most cases your biggest bottleneck is hardware IO which is leagues and bounds slower than any type of straight comparison operation the CPU must perform. But one shouldn't be storing UUIDs as char anyway. It's a 128bit number and should be stored as such. Depending on the DB engine use bigints or binary or a UUID datatype itself if the engine supports it natively or through user defined types. But yeah, if you're using UUID as a substitution for auto_inc/identity values, then you aren't really gaining anything.
Hell you don't need a framework, a little database class should do it for you...
WE NEED MORE HARDWARE!
The number you give your customer or user doesn't have to be your unique key.
&gt; If there is one thing I hate doing, it's insert() get_last_id() rockon() You're using PG, yet you don't know about `INSERT INTO ... `[`RETURNING`](http://www.postgresql.org/docs/8.4/static/sql-insert.html)? For shame, for shame. 
If you use var/char fields to store UUIDs, you're doing it wrong.
But if it's an auto increment number then it leaves you with the same problem the OP is trying to avoid. Not to mention the fact you're gonna run into problems if the numbers you give out aren't unique. Making it the key (or a significant part of it) is simply part of good table design.
That's true, but by making multiple unique identifiers you're just creating redundancy.
UUID != var/char fields. At least if you're doing it right.
I agree. It sucks when you migrate a few tables or rows over and the auto increment screws up the table integrity. It also sucks when trying to move to another platform. But with UUIDs, you pretty much guarantee a match.
Why?
I can't argue with you because I don't know, but I would like to know why.
downvote for posting another PHP framework
Interestingly [MailChimp](http://www.mailchimp.com/) employs a combination of UUID and integer, where the UUID is for internal and API purposes and URIs use integers (aptly named id and web_id).
You can use both. Naturally one can logically reason that the numeric representation of an item in the database can be construed as metadata, no?
Usually its: id = sequence.nextValue() insert(id, ...) ...
You should be using significant primary keys, not generate irrelevant ones. Both autoincrementing fields and UUIDs share this problem. Now, practically there are times when the only distinguishing characteristic is something like created at, which is a pain in the ass, so people *do* then use integers. But don't pretend like that's the 90% case.
Why would you want a unique id that isn't the key? Also, why would generating your own "unique key" be any more unique than auto_increment? I can't think how that would be possible.
Store them as a binary (or varbinary -- since they are all the same length it won't get padded so they are functionally similar here), length 16. Half the size. MySQL: SELECT HEX(UUID) FROM Table Where... INSERT INTO Table SET UNHEX('UUID')...
You should really consider a solid CS curriculum. That doesn't necessarily mean that you should go to a 4-year school, but there are so many 'isms' and peripheral knowledge you gain from formal instruction that you just can't get otherwise. I know there are many good self-taught programmers out there, and for the most part they are capable of doing tasks that have been so many times that they have become commoditized. But when there's a new problem that needs to be solved, the self-taught folks often fall short (I can't stress enough how general this sentiment is, there are always exceptions) If you want to go beyond being pigeonholed in current tools/languages that are sure to change, you need to understand the underlying logic and theory. As a first language, I recommend you DON'T go with PHP. PHP has too many gotchas that tend to give it a bad reputation, mainly because the barrier to entry is so low that anyone can just pick it up and start making sites. I recommend you start with a more structured language. I think Python is the way to go, mainly because it is slowly overtaking Java as the teaching language of choice at colleges. Python is also good because you can do pretty much anything with it, from shell scripts to self-contained web servers. Lastly, I think Python is good because it has a stricter syntax and structure, which is very important when trying to organize a big codebase. Look for Zed Shaw's 'Python the Hard Way'. It's a free download (just don't try to alter it). After that, look for 'Learning Python' from O'Rielly. Feel free to PM me for other resources. Cheers
Thanks for the great advice. I have to learn PHP more or less as soon as possible (as that is what my job entitles), would you still recommend learning Python first? (Also, Python has been recommended to me before, so I'll certainly look into it).
If you're unsure about functions, arrays, and constants you have much bigger problems on your hands then worrying about the best way to use PHP. Read up on very basic programming constructs.
Yes, you are right :). I was simply seeing what sort of advice I would get. Is /r/php for PHP help as well? I might post here if I get stuck.
Switch hosts?
Can't make the same comment twice with out backing it up. Keep in mind this is r/php so were talking mysql most likely though some of us may have postgres how exactly would you store a uuid?
[UUID's](http://en.wikipedia.org/wiki/UUID) aren't just random numbers, they're a defined standard and can be amazingly unique. &gt;The intent of UUIDs is to enable distributed systems to uniquely identify information without significant central coordination. Thus, anyone can create a UUID and use it to identify something with reasonable confidence that the identifier will never be unintentionally used by anyone for anything else. Information labeled with UUIDs can therefore be later combined into a single database without needing to resolve name conflicts.
You can store them in binary, which makes a lot more sense considering that UUID's are just hex characters.
Then there's [this.](http://code.google.com/p/redis/wiki/IncrCommand)
Interesting. No, I did not know about RETURNING.
Well, what exactly do you mean by "significant keys"? A lot of times when I see people doing this they're using things like varchars for keys and have awful performance.
It looks like there is something wrong with that example. I'm guessing they meant: &gt; function db_connect() &gt; { &gt; $connection = @mysql_connect("localhost", "username", "password") &gt; or die(mysql_error()); &gt; $db = @mysql_select_db($db_name, $connection) &gt; or die(mysql_error()); &gt; } If this is just some quick &amp; dirty example code to illustrate a point then it's probably fine, but it doesn't look like the highest quality of code to learn from. A lot of PHP examples are somewhat outdated, unfortunately. I would recommend looking into using PDO for database connectivity and possibly even using try/throw/catch error handling instead of just using the die() function.
Thanks for your reply. Yes it is quite a dated book, but it's more to familiarze myself with PHP and gain the understanding of concepts. Thanks for the suggestion!
I'd suggest finding a newer book as soon as you can. This example is riddled with bad practices, and it's best to avoid forming bad habits instead of trying to break them later. Some things that jump out at me: 1. The shut-up operator (@) shouldn't ever be used. It's slow, and makes debugging a pain in the ass. 2. While using "or die()" might be adequate for a quick and dirty script, it's never a good idea to simply exit a program because an error has occurred. Look into [Exceptions](http://ca2.php.net/manual/en/language.exceptions.php) for error handling. 3. The mysql\_* functions are dated and shouldn't be used. Use instead [PDO](http://php.net/manual/en/book.pdo.php) (with prepared statements) (highly recommended) or [mysqli](http://php.net/manual/en/book.mysqli.php). Mysqli has procedural methods similar to the ones in your example, but you need to be careful to escape all of your user-inputted values with [mysqli::real_escape_string or mysqli_real_escape_string](http://php.net/manual/en/mysqli.real-escape-string.php) My personal recommendation would be [PHP 5 Objects, Patterns, and Practice](http://www.amazon.com/PHP-5-Objects-Patterns-Practice/dp/1590593804), as it will teach you stuff you should know about programming in general, as opposed to simply PHP syntax.
Thanks very much for all the great advice. I'll see if I can get ahold of that book. 
I agree, he's moaning about what seems to him to be an extra line of code, so he's written a homebrew unique id system that must consist of more than 2 lines of code, he's got to explain it to every employee in his business and has written a reddit post about how smart he is. Seems like a lot more work than two lines of code ;)
Your best bet is to go to IRC. #PHP on freenode.net is a good place to ask questions.
Cron on the cob.
hey, you wouldnt know of any way to read text from a .pdf using php? i get tonnes of data in pdf form that i would like to analyze. I've seen loads of stuff for making pdfs in php but none that will read from one.
My forehead has a desk-shaped indent after seeing this.
well no. This entire thread missed the point. It's not about how much code there is, it's about how illogical it is. When an object is created, a UUID is assigned to it, and that UUID will only ever be for that object for it's entire life time, whether it's only for a single request, or persisted in any fashion. You can avoid race conditions by computing what the next ID will be int he sequence, but that's illogical too. Why would you closely couple your ID to you database?
Think about it this way. I can round robin requests to databases and never worry about one database table having the same ID as the another database table of the same name/function. You get no such guarantee of authenticity with auto increment IDs.
I concur
that can be problem, and i dont think its doable in pure php. you need something like this http://linux.die.net/man/1/pdftohtml
PostgreSQL can actually return the inserted ID from an insert statement. I'm not sure if this is how PDO handles it.
Interesting. I've never thought about storing them in a binary field.
Which one you recommend?
In python land that's actually the opposite, the best tools are first for postgres. I don't think it's a matter of sheer number. But then I may be wrong.
That would be [idiorm](https://github.com/j4mie/idiorm). The same guy has an Active Record implementation ([paris](https://github.com/j4mie/paris) )but I haven't dig that far
This is probably what my post should have said. I'm glad you took the time to link to all the relevant info and recommend a good book, unlike my "hey, pdo, exceptions. see ya later"
It wasn't posted before. I'm using it. I found it interesting and wanted to share. I don't see the problem with that
It's absolutely fine, especially if you're using PostgreSQL. Just do this: $insert = $pdo-&gt;prepare('insert into "test" ( "string" ) values (:string) RETURNING id'); $insert-&gt;execute(array( ':string' =&gt; 'asdas' )); $returned = $insert-&gt;fetch(); echo "INSERTED ID {$returned['id']}\n\n"; Pretty messy code but you get the idea.
So you're sugesting we replace an automatically created, table scoped unique number with a globally scoped unique ID. The auto inc id column is really: [machine name+database name+table name+id]. When I am in the table, I have already chosen my machine (this one) the database and the table. That is the scope of the ID. Your GUID is very close to this anyway, but you are storing things like date, IP address MAC address all togther in the key field. This, to me, smells a bit. &gt; It's not about how much code there is, it's about how illogical it is I don't really care about the implimentation of my auto id system. Just so long as it works. I *would* find it harder to mentally debug this: SELECT * FROM users WHERE id='a1e420a1-f18c-11df-8013-002219333850' (oh silly me, I meant user 'a1e420a1-f18c-11df-8013-002119333850',) compared with: SELECT * FROM users WHERE id=1 (oh silly me, I meant user 2) Why try to convince some random people on reddit? Submit your proposal to ANSI, they are the experts who actually know what they are talking about :/
You can fix that bug by using the full unique id of that row: ip address, port, database, table, row id I'm finding it hard to imagine why round robin requests would have this problem, could you expand a little please.
that's what the upvote arrow is for ;)
isn't it bad table design to actually pack logic into UUIDs instead of using short autoincrement unique fields? massive data warehouse here.
[Disqus.com](http://disqus.com) ?
Right now i'm building a site that needs something similar, but instead of looking for something that is prebuilt I'm making my own so I know how it works. 
http://apisnetworks.com/ is the *only* shared webhost provider that provides PHP 5.3 that I found that does not look like it's a foreign operation run by a bunch of 12 year olds. Plus it's run by goons (I think) and support has been fantastic for me so far. Oh and they're incredibly affordable and stable.
Mine too, that's why I'm doing it. 
Same, I made a pagination class though which has a pre-made pagination thing for if you want the simple "&lt; 123... 5 ... 678 &gt;", but if you want to make your own it's also available.
PHP doesn't implement the full standard last time I checked. 
This is what I use. It took 10 minutes to set up and works great. 
I've only used PEAR once, when developing on localhost. I used the SMTP module because I didn't feel like configuring sendmail.
Yes. Pear modules are generally a steaming pile of unportable, amateur code. edit*: note, *GENERALLY*. Not every module is crap, but a big enough percentage are to scare away proper usage w/o prior audit. 
Along the lines of the other commenters here, I've implemented Zend before and reimplemented with [SphinxSearch](http://sphinxsearch.com/)(i'm posting because I didn't see it mentioned). For one, Sphinx is infinitely faster at indexing, I found zend's implementation of indexing to be horrendously slow(like in the ballpark of 10-20 minutes for a mil records) where sphinx was in the ballpark of 1-2 seconds for the exact same record set, and it supports delta indexing(where you only index "new" records and splice those into your index). anyway check it out.
Yes. If it's in PEAR, I'm probably not going to use it - even if they have what I want.
I've used it here and there. Usually when my project was on a deadline and I didn't have time to do it myself. PECL on the other hand was recently invaluable for including JSON functionality on a PHP4 server that I wasn't allowed to upgrade to 5.3
I've been a web developer for 10 years and I have never knowingly used PEAR. I may have used something that had it already configured for me though. I can't think of any time I specifically used it.
I modified the Advanced Comment System example from HotScripts to make my own AJAX-style comment system. [I've documented the effort](http://opencodeproject.com/article.php/62/creating+a+phpjsonmysqljquery+comment+system+updated) to some extent in order to guide you in the right direction. It might not be the easiest, but it gives you a lot of control over the code.
I came here to say the same, though expecting everyone else to think it was awesome. I see it used so often I figure there must be something good about it, but I've have had nothing but troubles with PEAR and groan whenever I see it mentioned.
UUIDs are represented as hex, which is an easier-to-read representation of binary. Use large integer fields (or if you need to get specific about size, a binary field) for your UUIDs so you can cram more combinations into less bytes which makes for faster lookups, joins, etc. In PHP, functions like bin2hex() and unpack() can help you switch back and forth.
PEAR lacks the depth and breadth of CPAN, and I've rarely found a solution there first. Code quality is hit or miss, with a large number of modules still written for PHP4... but it's head and shoulders better than the ghetto of PHP Classes. The fact that PEAR permits undocumented modules to be published severely decreases its overall usefulness. (This goes double for PECL, while we're on the subject.) With the rise of modern frameworks, many PEAR components are rapidly being replaced in functionality with better, more integrated, properly documented code.
I've used PEAR, specifically PEAR::MDB2 and PEAR::Mail_mime. Most modules are crap though.
Anything that's actually a unique attribute of the item at hand. It could be a title, for example, if those are unique. http://en.wikipedia.org/wiki/Surrogate_key has more about the disadvantages of surrogate keys.
TBH this sounds like it breaks all sorts of KISS and DRY principles to coding for not a whole lot of benefit(over auto increment ID's that is).
IMO, there will always be a better module avalaible than the one on PEAR.
ya, I tried to install it on my existing textpattern site and ALL the css gets jacked by my existing styles. Cool system, but yes, a pain in the ass to style. I gave up after about an hour.
I have this book called Pro PHP Development and it has half a chapter on PEAR. It's a recent edition so I thought maybe it was a good thing to learn on my resume. 
TIL what [touche](http://www.internetslang.com/TOUCHE.asp) means.
Five years, used it once because a client had already implemented it in a system I had to maintain. Not great to be honest.
PEAR's great. Why would you want to write something that's already done for you? Tried and tested. Don't be fooled. PHP isn't an enterprise language, it's about getting the job done.
I've used PEAR for Mail_mime. Other than that, I don't use it. It isn't normal or abnormal to use or not use stuff like this... you should be using what makes sense for your situation.
I think PHPunit counts as PEAR package .. if so , then i'm using at least one.
Don't you find yourself writing the same thing over and over again?
Hooray! Me too! That code scares the crappy out of me
If he has been a developer for 10 years I bet he has his own library of functions he reuses
Well, PEAR is many things, which most posters here obviously don't understand. The PEAR repository does have many dated packages, which were built ages ago and because of strict BC rules, continue to work. The other part of PEAR is the installation and distribution infrastructure, which is the de-facto standard for PHP library and extension distribution. Many other repositories distribute their code through PEAR-installable packages. Also, most of the PHP frameworks have roots in PEAR. That is why you should at least know what PEAR is. Whether you should use any of the packages in the original PEAR repository is moot. Also, check out http://pear2.php.net/ and the other PHP 5.3 frameworks for where things are going.
I have been a developer for over 10 years, and I have a library of my own stuff. I have also taken advantage of PEAR modules many times in the past. That said ... a lot of what I used to use PEAR for has now been either incorporated into the language itself, or is handled by various frameworks. I've also been away from PHP for about 9 months now ... moved over to RoR.
Exactly. One of the easiest ways to contribute back to the PHP project is to release to the PEAR project. That way we're not all programming for 10 years to end up with the same library of functions...
is RoR better? 
i will be sure to stay away from it
The whole thing is wrapped in an ID'ed div, so overriding via CSS is easy: #disqus_thread .dsq-comment-header { border: none; }
what do you use?
I like Zend Framework.
your definitely right. but writing your own functions contributes a great deal to learning. 
As does learning by example. ;)
Came here to share that link and you beat me to it :)
What a wonderful and insightful observation. You've definitely given us something to think about.
It isn't easy, but it's being done. I haven't touched anything in Win\Gui so I'm unsure of how it's working - Elizabeth is the wizard in that area. She's also working on a decent threading wrapper for the Windows threading stuff.
We enjoy using PHP and would like to have a comprehensive set of extensions, similar to those of other languages. If, before doing anything, we thought "Has this been done in a different language?", we'd probably have _jack_-_shit_ to use in PHP.
You may also enjoy using PHP and decide to go 'desktop' with it, rather than learn a new language.
PHP-GTK is in a state of... rotting, yes, but development hasn't *completely* stopped, rather moved elsewhere, to the GObject for PHP, GLib for PHP, Cairo and Pango extensions. We're working on bringing PHP-GTK up-to-date at the minute.
cron 4 lyfe
It's actually "touch**é**", touche is just weird :)
PHP4 compatibility is the use case for http://upgradephp.berlios.de/ or http://pear.php.net/PHP_Compat since we're talking about PEAR.
Yep, PEAR, HTML_TEMPLATE_FLEXY, a mail package, etc. We're switching over to Zend slowly but I've been a pear user for several years. 
That might be so. But specifically the package format and distribution protocol is the weakest part of PEAR. I'm refering to the XML description format, which is not compatible to anything and hence has no tool support. While yes, it's readable, it's too much overhead for widespread use. But the package download scheme is seriously retarded. Instead of content negotiation, PEAR uses basename URLs and probes for hardcoded .tgz or .tar extensions instead. That's at the other end of the professionalism scale. Now that there is http://www.pirum-project.org/ it's significantly simpler to set up a PEAR channel. Nervertheless I think it's overall too much trouble to catch on as generic distribution format for everyday PHP code.
Oh, I agree with you completely, auto increment is my friend too. But if you had to implement UUIDs for some reason that's beyond me, you would want to pack them into an appropriately sized int or binary field.
Try http://www.nabble.com/ - it's easily embeddable and can be customized with some patience. But it's a better alternative to an all-proprietary Disqus.
While useful if you can't install the extensions from PECL on the server I'd definitely rather have them as compiled than as PHP classes in the interest of execution efficiency.
It's not really a fair comparison, as PHP is a language and Rails is a framework. But having said that, I feel like I've been more productive in rails than any PHP framework I've used since I've started messing around with it. I think Ruby is overall a more powerful &amp; verbose language, but it has a steeper learning curve than PHP.
and if you're doing for learning, that's fine. But when it comes to actually producing output, there's no reason to waste time solving problems that have already been solved.
Interesting read, however I left that article still feeling like there are more advantages to auto increment keys than disadvantages. For many applications, there is no natural key among the data so a system-generated key is the only way to go. Auto increment gets you there quickly, usually with a 4-byte integer that makes for quick joins. For "detail" tables I often find foreign key + auto increment makes for the best fitting key.
Thanks for the advice!
I've used it, but I've stopped using it because of the overhead, difficulty and frankly, the desire to have a website I understand. OTOH, it's good to learn some functionality I've never been exposed to - so it helps. 
From a development standpoint, Ruby is a very nice language. Rails is a nice framework to work in as well. From a scalability standpoint ... I think Rails is a bit more challenging to scale than PHP. If you want to get a taste of a very rails-like framework in PHP land, check out CakePHP. I was working on a Cake project before I got my current Rails gig, and I was amazed at the parallels.
Thanks! Another one worth checking into.
soon, Google buys Disqus.com
That's good news! I did see the last update on the website which made me feel much better, but the last two times I had to re-compile the extension and it took a hour of editing to fix it. Any updates are welcome in my book! I do still use it.
What game specifically? a lot of games have this built in with exportable XML. 
Not often. I used to use PEAR's mail module, just recently switched to SwiftMailer instead, mostly out of personal preference. I just like it better.
True. I have to admit I've found interest in php only after looking at [fat free](http://fatfree.sourceforge.net/). It surprised me that there was nothing so small and complete for PHP 5.2, and that there was so many solutions for simple routing (and the occurrence of "REST", "DSL", and a couple more keywords :P). I've spent the last weekend looking for small frameworks, and Slim was the one that felt more natural to me. But still it's very limited, it doesn't provides templating or ORM. But I didn't feel like installing kohana or other "real" framework
Exactly. Technically I DO write the same thing over and over, because I need to do the same things a lot. I make my libraries a little better each time and learn while I do it. Ever since I started using dropbox it's been a lot handier to keep it all organized too. I don't have any problem with PEAR, but since I never used it I really couldn't. Maybe it's life-changing and this whole time I'm missing out! But I've managed everything I needed with PHP without it so far. P.S. She, but I know that's not the norm on reddit, especially the PHP group. :)
PEAR is horrible. I've created a package for it and I'll never use it again Compared to similar repo's in other languages its a mess.
Honestly, this sounds fairly trivial (I don't mean to sound derisive when I say that). your database is essentially built for you with an RPG, since you know exactly what statistics and such you wish to store, and how they relate to each other. I'd say, build the DB, then it's a case of writing a few simple data extraction classes and whacking some CSS on it to make it pretty. if you really don't want to put the work in, go and have a chat on clantemplates.com. though they're more FPS based, I'm sure someone can help you out. Good luck! EDIT: if the problem is the volume of data, MySQLAdmin does CSV imports.
Not since I found Github. Nowadays, if it's not on Github, I don't use it.
Why isn't Smarty part of PHP anymore? The address used to be smarty.php.net.
Thanks for the info. My main problem is that I'm no expert in PHP or MySQL. I've only 'messed around' in it. But I'll check out the link you posted. I know CSS and HTML and making it pretty wouldn't be a problem. It's the actual framework - e.g. allow an officer to promote a lower ranked member while logged into the Roster. Stuff like that. :P
I would break it down into a list of the requirements for your finished application: * List clan members by rank * Allow an officer to promote other members to a higher rank. Is there more than one level of officer? Can an officer only promote up to their own rank and not any higher? * Allow clan members to log in. Do you need anything else here, such as user registration, password reset, etc? Once you have your requirements, then you can start building it step by step. I'm not sure how familiar you are with PHP and MySQL, but your database might look something like: Table: ranks id (primary key) rank (numeric number for this rank, 1 is the highest rank, 2 next, etc. this is so you know how to order the ranks in the system) name (name of the rank) is_officer (boolean value indicating if this rank is an officer) Table: members id (primary key) name (name of the member) rank_id (id of the rank of this member, relates to the ranks table) username (username or email or whatever this member logs in with) password_hash (hash of the password) password_salt (salt you use to hash the password) So basically you would have a page for the person to log in, and once they are in you can show the guild roster. If they are an officer, give them some up and down arrows to promote/demote other members, but don't let them update anyone who is their rank or higher, and don't let them move anyone any higher than their own rank. This would involve updating the member's rank_id in your database. This project is pretty small and it is a good one to take on if you are trying to learn how to do this. There is a lot left out of the example I gave, and there are a lot of different ways to do what you are asking for. One more question: Are you doing this to learn, or are you just looking to have a working system at the end of all of this?
True, but what if later on you want to add a rank between rank 2 and 3? Or for some reason re-order existing ranks?
PHP doesn't, but there is a PECL extension that does and a couple of pure-php libraries.
I try to avoid PEAR at all costs, but sometimes it's the only option out there.
google
You are hereby cordially invited to submit either a bug report or a feature request.
I really like how the site breaks down how to use the framework. I will be installing this weekend!
Wow. Thanks for the list. Yep, that's pretty much what I had in mind - and I suppose I'm doing this to learn and to have a working system at the end of all of this. As for my knowledge, I'm NOT very smart in PHP or MySQL. I've been reading a book called [PHP and MySQL Web Development](http://www.amazon.com/PHP-MySQL-Web-Development-4th/dp/0672329166/ref=sr_1_1?ie=UTF8&amp;qid=1289993610&amp;sr=8-1) it's long, but I hope to be familiar with the language as I take my time with it throughout my life. 
If you learn to use SVN or Git it makes it even easier to manage.
Premoting/demoting is simple enough. you just need a database field with an integer, then another table with the ranks and the integer related to them. most of the hard work for you will be the SQL.
&gt; most of the hard work for you will be the SQL. Do you mean overall, everything SQL will be hard or is there something specific I should get help with? Tnx.
I mean, there will be little PHP, mostly data extraction classes. You'll need to look at relational elements, particularly joins.
Ok thanks, will do.
PEAR is a component framework (and, as saltybeagle said, an installer, a package format [which even typo3 ripped off], a set of coding standards etc) - you can pick and mix PEAR components with other components from zend, zetaComponents, "call out" to them from Cake, Symphony, codeIgnitor etc etc. You're never limited to just using PEAR in your code. Also, there are a number of excellent utilities that are installable via PEAR; namely [phpcs](http://pear.php.net/package/PHP_CodeSniffer/) (for checking your code against an established Coding Standard) and phpUnit at the very least. There is an "ongoing campaign" by members of the [PEAR QA Team](http://pear.php.net/qa/) to improve the quality of all packages in the PEAR repository - if squashing bugs is your thing maybe you should look into that ;) To the point --&gt; Over the past few years, projects that I have developed for my employers have utilised the following PEAR packages: * Cache_Lite * Crypt_GPG * Date * Date_Holidays * Date_Holidays_Ireland * DB * File * File_CSV * File_Util * HTML_Quickform * HTML_QuickForm_DHTMLRulesTableless * HTML_Table * HTML_Template_IT * HTTP_Upload * Image_QRCode * Mail * Mail_Mime * Mail_mimeDecode * Mail_Queue * MDB2 * MDB2_Driver_mysqli * Net_DNS * Net_IMAP * Net_IPv4 * Net_Ping * Net_SMTP * Net_Whois * Structures_Graph * Text_Password * Validate * Validate_IE I've also used the PEAR installer to install and update these packages on development, staging and production server (both individually and via 'meta-packages') and this saves me a lot of time - plus I don't have to do any dependency tracking "by hand". For what it's worth I have also used Smarty (which started off as a PEAR package, but that's beside the point), fpdf and ezPDF. Some had bugs so I filed bug reports and where I could I uploaded patches to fix the bugs I encountered. Others were 99% there with regards to what was needed - I filed feature requests and again where I could I uploaded patches: this time to show how one might implement the feature that was required. This took a lot less time than reimplementing the entire functionality myself or having it done by a team member. In one or two cases I developed "subpackages" from scratch; such as the Date_Holidays_Ireland package - because it was quicker to write that package than take a "Not Invented Here" approach and develop the entire solution myself. I'm not saying that PEAR is the One True Solution or anything at all like that - because there is no such thing - and it is true to say there are packages in PEAR that are woefully bug ridden and can't be fixed because that would be breaking the PEAR guidelines on backwards compatibility. **PEAR, like any other open source project, is a collaborative project.** In other words: * If you find a bug...report it. * If you think the documentation needs to be updated or isn't good enough...tell the maintainer or add a note. * If you need an extra bit of functionality - request it with a good/reasonable 'use case'. * If you need help - ask! There's the irc room #pear on efnet and the pear mailing list for starters. Disclaimer: I'm a PEAR developer and a member of the PEAR Group.
No problem. Good luck with the project, feel free to PM me if you ever get stuck. Always happy to help out if I can.
Will definitely remember. I suppose I can ask this question right here.. for &gt; table ranks Should they be INT or VARCHAR? I tried doing BOOL as well for the is_officer field, but I just get an error in mySQL. Not sure what I'm doing wrong here. 
For group projects I absolutely agree, but since it's just me updating these files dropbox works great. I signed up for the 100GB and the "pack rat" add-on which lets you keep unlimited versions. It's perfect for my needs...using the beta that supports selective sync anyway. I tried using dropbox for multiple coders just once when I got my boyfriend to jQuery-ify a fancy menu for me, and the conflicts were annoying, but not deal-killing for the small time we needed to work on it. Any project of significance beyond four files with more than one person needs real source control. I had a [hosted SVN with Codesion](http://codesion.com/), but I find I don't use it when I work solo. I tried setting up my own source control on my NAS once, but my desire to maintain it was nil so I just went back to what worked. At my full-time jobs there's always been some kind of source control, with an agonizing progression from Microsoft SourceSafe, to CVS, to SVN, to Clearcase, and now currently to the current loveliness of Mercurial. SVN to clearcase was the most awful transition, like forcing myself to write with my foot in swedish. And compared to clearcase, Mercurial is like honey-wine sent by angels. I haven't used GIT yet, but I'm sure it'll arrive in the list eventually.
Not necessarily something new and innovating, but those who don't know about it might learn something from the article. :)
You know what? While I want this, I see some very big problems with it. &gt; One obvious advantage, you will write less code. It's not that much more code to write the object's variable as many times as you call it. It doesn't take up any more lines. *And* you have to put `return $this` at the end of each function. And then you have to have a comment explaining why you're doing that, since nobody's doing it. And then, not all of your functions can return `$this` (you might want them returning something else), so it breaks intuitiveness -- you don't know which functions will allow chaining or not; you have to refer to documentation. &gt; By adopting Method Chaining and proper indentation techniques you will also find yourself writing cleaner code. &gt; Your code will be more expressive and easier to understand. The the syntax looks too similar to calling methods on objects within objects. This could get messy quickly. 
IBM developerWorks is a wonderful resource for PHP tutorials and guides. More links: * [Five common PHP design patterns](https://www.ibm.com/developerworks/mydeveloperworks/bookmarks/click?link=b6b06e7d-9dcf-4938-9b54-c2152ed2a25d) * [Five more PHP design patterns](https://www.ibm.com/developerworks/mydeveloperworks/bookmarks/click?link=528da2e1-19f4-4cf8-97c2-fce1851fe6dc) * [Build seven good object-oriented habits in PHP](http://www.ibm.com/developerworks/library/os-php-7oohabits/)
After thinking about it you are right about the "you will write less code". In some cases it might give you a lot more code. I feel that all setters can be chainable. After all, should setters really return something? Getters cannot be chainable as they return something but this is normal as you are trying to obtain something in particular. One of the problems I was trying to tackle is the lack of being able to specify arguments in a Python'ic way. I.e. setcookie($name = "username", $value = "password", $domain = ".domain.com");
thanks, I know. they also have good info on BASH and linux. And AIX,... but that's expected
What's wrong with passing in an array literal? setcookie(array("name"=&gt;"foo", "value"=&gt;"bar", "domain"=&gt;".baz.com"))
&gt; I feel that all setters can be chainable. After all, should setters really return something? Getters cannot be chainable as they return something but this is normal as you are trying to obtain something in particular. That's true, you could do this with any method that doesn't return something, but then you're always wondering if you can chain methods with this method or not. IIRC, VB has a syntax `with` ( or some keyword like that ) that indicates the start of chaining, soemthing liek `with $objIsntance -&gt;method1(); $var = -&gt;method2($arg1, $arg2); ` So right away the reader knows what's going on. It's cool, but without widespread knowledge and usage of this, it just creates confusing code. 
Well you *could* write $object-&gt;method1()-&gt;method2()-&gt;method3(); if you really wanted to.
As far as I know the setcookie function doesn't support this. If we forget about setcookie and think more generally, passing an array creates a big problem documentation wise. If you properly document your code for chaining you can still have auto-completion for your arguments, but if you pass an array to a function that pretty much breaks all form of auto-completion.
Yeah you're right. You pretty much have to put chaining on everything if you are going to implement it or atleast have some sort of way for the user to know something can be chained. You bring up a great point about the `with` keyword. Maybe it's something PHP lacks? Thanks for your feedback by the way.
Probably should note this is a *nix based tutorial. You can go [here](http://php.net/manual/en/install.windows.commandline.php) for some hot and heavy Wind'rs action.
But doesn't that just bring us back to the regular *setcookie* method, since auto-completion would remove the possible confusion surrounding argument ordering?
Yes, but you still need to null out the arguments. Edit: null out the arguments when you want to set like the 7th but not the 3 before it..
I didn't realize that there was a difference between method chaining and fluent interface. Good to know.
&gt; then you have to have a comment explaining why you're doing that, since nobody's doing it Unless you work with developers that have used any OO code. Method chaining is not rare.
All of that without mentioning `--interactive`? Try it out in 5.3. It's also present but not as awesome in earlier versions.
It can be very useful, I've used it for quite some time for my persistent objects.
Or use anything from the Zend framework. All of the setters do this.
Method chaining does indeed make things a little easier and even fun for the developer, but at the end of the day you're essentially changing the way objects behave for the sole purpose of writing less but not gaining anything substantial. Facilitating the grunt work of the programmer should be the job of the language, not the program itself. I think a proper way to do method chaining would be to enhance the PHP interpreter to recognize a new method chaining syntax. Perhaps use a special symbol (for example "&gt;&gt;") after method calls to indicate that you're referencing the object just called instead of the return value. Something like $obj-&gt;method1()&gt;&gt;method2()&gt;&gt;method3(). So until that day (hopefully) comes I'm going to steer clear of method chaining.
I hope PHP Next gets named parameter support in at least *some* capacity, including support in functions like setcookie.
I don't know how it would be possible though since the $param = 'name' is already used for variable assignment. They'd have to come up with another character to represent the argument. 
Hm, I thought there was an RFC for it. Looks like I was mistaken, though.
Thanks! Just what i needed. Have you ever tried elasticsearch?
I would probably use: id (usigned int, autoincrement, primary key) rank (int) name (varchar) is_officer (bool, which is really just a tinyint(1)) You could really probably use a smaller datatype for "id", since I doubt you will ever have too many entries in this ranks table. I wouldn't worry a whole lot about database optimization stuff at this point though when you're just trying to get it done. There is a lot to learn there as well. If you are getting errors with MySQL, what are they?
You have given no details at all. "Zend built" means nothing useful. What features do you need? Are you aiming for shared? VPS? Dedicated? Cloud? What's your expected traffic levels, bandwidth usage and resource utilizations, and by that I mean is your site CPU intensive. These are all things you need to consider when you choose hosting, it's not just about sticking your site online and then praying shit works.
&gt; PHP Deprecated: Comments starting with '#' are deprecated in /etc/php5/cli/conf.d/mcrypt.ini on line 1 in Unknown on line 0
Wait, what? You want to use a UUID if, and only if, you are doing some kind of crazy sharding or replication. UUIDs are 16-32 bytes long, and int is 2-4 bytes long. Performance of UUIDs is poor in contrast. What you are suggesting is security through obscurity and, frankly, is a dumb idea.
Not only that, but this has also been discussed [here](http://www.reddit.com/r/PHP/comments/e6kqf/auto_incrementing_ids_plague_or_cure/) as well.
 replace the semicolon with an opening curly
I have some nice abstraction classes for postgres.. $db = new PgSQL(array('user' =&gt; 'foo', 'pass' =&gt; 'bar', 'db' =&gt; 'baz'); $c = new Customer($db, array()); $c-&gt;set(array('first' =&gt; 'bob', 'last' =&gt; 'smith')); # or $c-&gt;set($_POST); .. etc.. let me know if you want 
In a scenario where an object stored in the database would also have a public unique identifier, it seems prudent to combine the primary key and this unique id for storage savings. Im not sure I agree with your suggestion that security through obscurity is a fault, if carefully designed and used in the appropriate context.
If I had to go this route, I'd look at Drupal w/Uber Cart, or just roll my own, leaning more heavily to rolling my own. Uber can do a lot though.
I want to say Skankla.. read Trout and Ries
You might start by trying a smaller piece like ZendCache before you go overboard with ZendFramework. It can have a straightjacket effect on you.
Thank you. I'm still working on the framework. I got really frustrated one day and put it down. The next I printed a bunch of papers and took it to work with me. I like what the framework allows me to do but I'm still in the deepend. 
I like the ability to look up who of my buddies is already registered for the beta... Some may consider this "funny feature" a security hole
&gt; Being able to use "for / endfor", "if / endif", etc, instead of curly brackets when needed. This is never needed. &gt; Magic methods are very handy if used correctly. Build in interfaces would have been better. E.g. instead of implementing __get, implement the IDynamicGetter interface, etc... &gt; Strings can span multiple lines. This introduces line ending issues in some cases, especially when migrating between platforms, or converting source files. In languages with insignificant white-space, like PHP, you should be able to convert the line ending style of your source files without changing run time behavior, but with line-spanning strings, this isn't the case. **edit:** Just to clarify, I'm not trying to put down PHP itself. Its one of the languages I choose most frequently.
&gt; This is never needed. It's frequently more clear than curlies when mixing PHP with HTML in templates.
execution speed
&gt; This is never needed. This is opinion/preference. You're gonna need one or the other!
Here's my list, not all of these are exclusive to PHP but are useful regardless: * Magic methods * Simple regex and string functions * Ability to cast an array to an object and access it with the -&gt; operator * Anonymous functions (oh yes) * Foreach with references ( foreach ($vars as &amp;$var) { $var = "${var}something"; } ) * String variable interpolation (if you bind a function to a variable you can call them too, see [here](https://github.com/ZaneA/Misc-Hacks/blob/master/phphacks/interpcall.php)) * Default arguments, and variable-length argument functions * Functional style functions, such as array_map * Ternary operator (when used like $var = $othervar ?: 'default'; ) * I'm going to add "included batteries" here. PHP has a feature full standard library, and many extensions for other stuff
Yeah, one or the other. But its still never *needed*. :)
I agree that it can be clearer in that case, although mixing PHP and HTML is never needed either. In any case, the BASIC syntax is never *needed*.
It's certainly *needed* when you're using PHP as a templating language rather than adding on a template engine.
im not sure if you know what youre talking about. How would you output dynamic content with putting php inside html?
&gt; This is never needed. Actually, with "when needed", I meant "where appropriate" :) &gt; Build in interfaces would have been better. E.g. instead of implementing __get, implement the IDynamicGetter interface, etc... I don't see how an interface could replace something like __call. &gt; This introduces line ending issues in some cases This is true, but in practice this is rarely an issue. If there's chance it will be a problem (say for example when working with files), then don't use it, but otherwise it can improve readability.
One solution would be to use some other technology layer such as EXTJS, in which case your PHP would be generating JSON, probably using json_encode. Assuming you want your site to be generating pure HTML though, you have a few options: 1. Use a template engine as McGlockenshire suggests. PHPTAL comes to mind, though there are better XML-based systems. I'm not a fan of Smarty at all, but its another option none-the-less. 2. Use an object oriented UI framework. This is the method I generally prefer when possible. In this case, a library of widgets is made available to your page controllers such that you can do things like: $tabstrip = new Widget_Tabstrip(); $tabstrip-&gt;addTab(new Widget_Report_Products()); $tabstrip-&gt;addTab(new Widget_Form_OrderForm()); $tabstrip-&gt;addTab(new Widget_Template("techSpecs.template.xml")); $page-&gt;addWidget($tabstrip); 
I think you mean *strongly desired*.
I was being a smart ass with my first point. You can ignore that. In any case... The idea with my second point is that instead of declaring magic methods such as \_\_call as part of the language by naming convention, a series of interfaces be defined. The interface equivalent of \_\_call might look like: // Native Code (shown here as PHP for illustration) namespace php; interface IDynamicCall { public function call (string $name, array $arguments); } Then instead of doing this: class MyClass { public functon __call ($name, $arguments) { // ... } } You would do this: class MyClass implements php\IDynamicCall { public functon call (string $name, array $arguments) { // ... } } And if you then do something crazy like: $myClass = new MyClass(); $myClass-&gt;hello(); PHP would work its usual magic.
arrays. Many PHP developers without much experience with other platforms may think that arrays are as flexible everywhere. Well, they are not. 
Array in PHP are pretty cool, though I think they could have been better. A native array literal syntax a la JavaScript (using square brackets) would be been interesting. Combining dictionaries and arrays into one concept was probably a mistake, and undoubtedly confuses the two concepts. I kinda wish dict() was its own thing a la Python. The ability to dynamically add and remove elements and have PHP do all the reallocation internally is particularly nice, although I kinda like Java's implementation (the List interface and ArrayList implementation) a bit better. Its more verbose but exposes to the end programmer the idea that reallocations are not free, which likely results in programming with that aspect of performance in mind.
From a strictly OO point of view, what you say would be better than the actual implementation, although the end result would be almost the same. In both cases there's a magic method somewhere.
Would you agree thereby that curly braces are not *needed*? :)
If you use symfony framework and the plugin model these are all packaged and delivered via PEAR though a symfony PEAR channel. Yes it is true that most packages on the PEAR channel it self are crappy... As someone already mentioned before PEAR is just a "packaging and distribution system for reusable PHP components". Look at it like this: * CPAN - a programming library and package manager for Perl * PEAR - a programming library for PHP * RubyGems - a programming library for Ruby * Maven - a package manager and build tool for Java * Ivy - a package manager for Java, integrated into Ant build tool * EasyInstall - a programming library and package manager for Python using so called Python eggs * Cabal - a programming library and package manager for Haskell * LuaRocks - a programming library and package manager for Lua * VI Package Manager - a package manager for the LabVIEW platform and development environment that gives access to the OpenG programming library * PAR::Repository and Perl package manager - binary package managers for Perl * NuGet - a package manager for the .NET Framework
If you post a feature in here, please supplement it with an example. Thanks :D
But where's "myfile.log"? In the case of PHP file functions, you're mostly dealing with names. Inode info is just for information purposes only in PHP. So, what you say is very useful and something for PHP Org to consider, but not for PHP users to expect especially across platforms. Personally, I think this case is a PHP bug that should be reported. Tough issue though - something I imagine creators of highest level languages have to contend with all the time.
Absolutely. :) ...except where they are needed of course (class and function definitions, et al).
&gt; Combining dictionaries and arrays into one concept was probably a mistake, and undoubtedly confuses the two concepts. But then arrays would be... arrays... :) That's what so flexible about them, they can be arrays, hash tables, collections, stacks, queues, lists, dictionaries. The concepts are distinct, but similar enough to not need different structures. IMHO, confusing the concepts has nothing to do with the implementation, but everything to do with actually confusing the concepts. &gt; Its more verbose but exposes to the end programmer the idea that reallocations are not free, which likely results in programming with that aspect of performance in mind. Java's beautifully structured elements and inherit need to save the developer from common pitfalls it's not enough to account for it's dogmatic inflexibility. edit: btw, all of the above are about personal style and preference. When a job needs to be done, I always try to use the best fitting tool, which in many cases would be a List interface. 
Of course, but that's why my favorite PHP features are `end class` and `end function`. Just kidding :)
Well, technically, there would be no magic methods. The "magic" would be formalized into a series of well defined traditional interfaces (albeit built in), which declare traditional methods, whose implementations are entirely conventional. All of these components follow their usual semantics. These interfaces can then be used by the language itself to provide "syntactic sugar" around their implementations. There is nothing "magic" about it. It would certainly be nice to be able to implement an ICallable interface, for example, which allows its implementations' instances to be called as functions: interface ICallable { public function invoke (array $arguments); } class MyClass implements ICallable { public function invoke (array $arguments) { // ... } } $myClass = new MyClass(); $myClass(); // implicit call to invoke or an interface, that allows an object to emulate an array: class MyClass implements IArray // or something { // ... } $myClass = new MyClass(); $myClass[] = 'One'; $myClass[] = 'Two'; foreach ($myClass as $item) { // ... } The SPL has some of these characteristics, although frankly they are not formalized very well.
[Autoloading](http://nz.php.net/autoload)
This works. example.php: #!/path/to/php &lt;?php echo "Hello World."; terminal: chmod +x example.php ./example.php
[register_shutdown_function](http://php.net/manual/en/function.register-shutdown-function.php)
All the new stuff in 5.3: - anonymous functions (and closures with use()) - namespaces and "use" (killer for autoloading) - late static binding - `__invoke()` and `__callStatic()` Makes PHP fun again.
protected function myMethod(OnlyThisTypeOfVar $obj)
there's something satisfying about seeing your pedantic asshatery downvoted so quickly. 
I believe you mean one line of sarcasm followed by a couple of decent points. There's something satisfying about the thought that the PHP community is so sensitive to criticism, and so unable to defend themselves from it, that they feel it necessary to ignore the substance of that criticism, while tearing apart the one line of accompanying sarcasm so as to pursue a straw man strategy of defense. Do you have anything interesting to add to the actual discussion here (magic methods and semi-significant white space), or are you afraid to address any of that and instead continue to discuss only my poor attempt at humor?
[:P](http://www.php.net/)
actually I found every one of your posts on this thread to be utterly useless pedantry, as I pointed out before. I simply chose to reply to the most obnoxious example. but since you asked- the alternative control structure syntax is highly useful for 'templating' purposes (placing PHP control structures in HTML files). it's nice that you think that it's suitable to use an object oriented 'form generator'-style approach, but it demonstrates a lack of real-world experience on your part. using that sort of model is great for programmers prototyping things, but completely incompatible with a workflow that involves designers and marketing folk. that incompatibility is where the strength of alternative syntax lies. there's a better chance of an html/css-skillset person being able to work within them without breaking them, than with the traditional braces approach. it also increases readability for someone who is DOM-minded.
Being mindful of the need to separate business logic from presentation, the number one reason I use PHP is because PHP files are HTML pages with code, not code containing HTML. I love so much that I don't have to use a templating system if I don't want to. My second favorite feature isn't even a part of the language, it's the online reference.
Here is the [study giude](http://static.zend.com/topics/Zend-PHP-5.3-Study-Guide-v1-3.pdf) for the Zend certification course. It covers the major topics of PHP, but doesn't go into any detail. I used it to get an overall idea, and then went and researched each section separately .
die();
You could check this [UofR class](http://www.reddit.com/r/UofRIntro2PHP/), it might be a little boring at first, if you've been working with php for 3 years, but we will speed up the pace soon... 
 exit()
- Very flexible (albeit slow) arrays/maps. - Excellent regexp support, especially tricks like using a function to generate replacements.
http://www.php.net/manual/en/index.php
Ease of deploying (index.php).
Using an xml-based solution is essentially the same as mixing php and html. Obviously the engine is going to parse the xml and do some replacing. You can still mess up syntax, which would create errors...etc... Not to mention this adds a layer of complexity that is completely unneccessary.
See also [Hidden features of PHP?](http://stackoverflow.com/questions/61401) (Stack Overflow) Lots of useful "I didn't know /that/ one!"s in there.
Now if only they would let us overload our methods based on the argument types... but this suggestion has been continually shot down on PHP internals because the developers don't seem to know what they're talking about. They just keep shouting "PHP DOESNT USE TYPES!!!1" :( So until they realize this, we have to overload manually inside the function, which is incredibly ugly and makes documenting it a pain in the ass.
I agree with your points, with these exceptions: &gt; Magic methods Probably the worst feature of PHP: What's so 'magic' about them anyway? Why they could not be implemented using normal and well defined interfaces? Why only _ _ toString() and not _ _ toInteger(), _ _ toBoolean() etc.? Why _ _ toString() cannot throw an exception? I see good intension to magic methods, but with this implementation, they cannot be used for anything more consistent than ad-hoc solutions. Edit: On the other hand, the interfaces ArrayAccess, IteratorAggregate and Iterator are in the correct direction. Nothing magic about them, they are built-in interfaces, so they can be used as a solid base to build consistent libraries. &gt; Ability to cast an array to an object and access it with the -&gt; operator And why arrays are not already objects? &gt; Ternary operator (when used like $var = $othervar ?: 'default'; ) So, $othervar has some type (probably string) that will be converted to boolean (arbitrarily in my opinion) to test the condition. What a big source of bugs! I really cannot tell the result of these expressions without looking at the manual: $var = 'false' ?: 'default'; $var = '' ?: 'default'; $var = 0 ?: 'default'; 
Its ability to easily interface with any DB. The community
&gt; # String variable interpolation (if you bind a function to a variable you can call them too, see here) Thought I'd seen them all! :-p Just for kicks I'll add one I found that I suspect few others have seen: class foo { function __call($func, $args) { eval($func); } } $x = new foo; $x-&gt;{"echo 'hello world!';"}(); // 'hello world!' Apparently method names can look like any string - sorta. Not when you define them - at least, I haven't managed, but the code is passed on to __call() which executes it. (people complaining about the use of eval(): you're missing the point)
&gt;So, $othervar has some type (probably string) that will be converted to boolean (arbitrarily in my opinion) This is what literal comparisons (===) are for, javascript does the exact same thing.
I totally agree with you. But your point is irrelevant: we are talking about the ?: operator. In your opinion how could === be used in this context? Give me an example.
You can do some really odd things if you combine method chaining with magic methods: https://gist.github.com/589081
It's availability everywhere.
Bottom-of-the-barrel debugging eh? var_dump($everything); die(); // HELP!
Or we could use different functions for different functionality.
If anyone is thinking of slogging through the php.net manual route I have one piece of advice for you: **Ignore** the user comments, pretend they aren't even there, don't feel obliged to read through them. There may be some useful advice on some pages, but the vast majority of them are either useless, outdated, or plain wrong. The only time I would pay any attention to the user comments is if you're having trouble with some specific facet of php and want to see if someone else ran into the same problem or has some insight into what's happening to you. In terms of trying to get a good overall feel for php, though, the comments are nothing but a waste of time. Also, I'll put in a plug for the [Practical PHP tutorials](http://www.tuxradar.com/practicalphp).
I've noticed this is a fairly major problem with people like us: * We're self-taught * Have worked alone almost 100% of the time * Have not had any formal training whatsoever This hasn't stopped me from slowly, but surely, climbing the totem pole job/salary wise, but there's always that nagging feeling in the back of my head of * Am I doing this right? These ~200 lines of code ... is there a native function I'm not aware of that handles it in a single line of code that makes mine look stupid and amateurish in comparison? * This tutorial I'm reading ... is it written by someone who knows their stuff? Are they using best practices? (1) * What's my next logical step? I'm comfortable with what I know, but I need to up my game! What do I do now?! We're like the 21st century's hermits... and it's not really our fault. Most of my job interviews can be divided into three different types of companies: * Remote, long-term freelance/contract work, * In-house, replacing a company's contractor or replacing a programmer that is leaving/fired/whatever, * In-house, to join a huge company's team of programmers where I'll be simply another faceless employee delegated to a chilly back office away from most human interaction except for my fellow programmers I've done a ton of #1 work, but it feels fleeting and doesn't give me a sense of security. #3 seems to be the best way of gaining access to more programmers where theoretically I learn from them and this would solve the 'hermit' issue I feel I have, but having worked for large companies before that really doesn't appeal to me. So, I'm most comfortable with #2, even though I'm always the only programmer there and all the work that I do goes right over the heads of the people I share the office with (secretaries, designers, managers, owners, etc). So, what have I done so far? Well, 6 months ago I tightened my belt and decided to move away from my procedural-style comfort zone and finally wrap my head around OOP. I bought [Object-Oriented Solutions](http://www.amazon.com/PHP-Object-Oriented-Solutions-David-Powers/dp/1430210117) and went through it. I felt I learned a ton of useful information that I previously couldn't understand. I've also purchased [PHP Objects, Patterns and Practice](http://www.amazon.com/PHP-Objects-Patterns-Practice-Second/dp/1590599098/ref=pd_sim_b_3) but I've yet to start on it. Why? Because it wouldn't look good for me to sit in my office at work and go through a book to teach myself, so the only option I have is doing it all at home where my wife complains I'm no longer spending enough time with her. It's the problem with learning by book, instead of learning by example which I would have if I was surrounded by programmers, but it's the price I have to pay I guess! Anyways, learn OOP. If you know OOP, learn about namespaces. If you know about namespaces, dive into MVC theory. If you're comfortable with MVC, learn yourself frameworks. If you know one framework, learn more. Companies are paying **big** money to programmers who can say, "I know Zend Framework/CakePHP (ugh)/CodeIgniter/Symfony inside-out". I mean *big* money (as in, upper 5 figures, lower 6 figures). Once you know a good selection of frameworks and are comfortable with them, start (or you can probably do this concurrently) donating time developing to an OSS project of your choice. It makes your resume sing! Trust me, you have a lot to learn if you've only 3 years under your belt (unless you've skipped bathing and working and socializing for those 1095 days, then you may actually be a guru already). Sorry about going off on a semi-related tangent! (1) - For my most recent example of this, I'm "learning" the whole MVC thing, with frameworks. I've jumped around with, I'd say, at least 10 different PHP frameworks. I settle in to try to learn it, and pick up a few pointers, but then I find I'm not comfortable in that particular framework (CakePHP, too many arrays), or there's simply not enough documentation to walk a newbie through the whole process (Zend Framework, newest version, and ESPECIALLY Kohana), or the writing style is still a little over my head (namespaces! namespaces *everywhere!*). Anyways, one thing I noticed on reading tutorials is that many framework tutorials say we should build big great monolithic controllers, and the "model" should only be used to do simple CRUD work. But then Zend Framework books/tutorials tell me the model should be nice and fat, and the controller should be very small, which makes a ton of sense to me since the model will be reused over and over by different controllers, so why on earth would I stick a bunch of logic in my controllers? Controllers should be like the office manager - doesn't really do much of the heavy lifting, but directs everyone towards a common goal.
Except it's not different functionality. public function add(Item $item) { $this-&gt;items[] = $item; } public function add(array $items) { foreach($items as $item) { $this-&gt;add($item); } } ... is, in my opinion, much cleaner than: public function add($item) { if(is_array($item)) { foreach($item as $i) { $this-&gt;add($i); } } else { $this-&gt;items[] = $item; } } And it is much easier to document and would work a lot nicer with IDE argument hinting.
 public function add($item) { foreach((array)$item as $i) { $this-&gt;items[] = $i; } } ... should do quite nicely
$$var I've even tried to replicate the function in classic asp - the language in which I'm forced to work now.
&gt; but since you asked- I didn't ask you to respond to my coy remark again. I was obviously fucking around about the alternative control structures never being needed, as I just said. I hope you understand my frustration. I posted three comments. One was a coy remark I didn't expect anyone to take seriously. The other two were the reason I commented. Out of the three people that replied, two of them replied to only the coy remark, ignoring my two other points.
&gt; Using an xml-based solution is essentially the same as mixing php and html. We're talking about the alternative syntax here (endif, endfor, etc...).
I like the ability to do this: function funkyfunc($args) { extract($args); echo $lol; ... } funkyfunc(array('lol'=&gt;45)); Also, swapping vars in one line: list($var1,$var2) = array($var2,$var1); Not the most important thing, but the list() construct is great when you need a lot of stuff from an array. This has saved my ass on some time-sensitive projects: ob_start(); include('file_with_lots_of_unnecessary_output.php') $output = ob_get_contents(); ob_end_clean();
* PCRE * Weakly Typed * Simple, Flexible Arrays * Static class methods They are onto a lot of cool things with PHP5.3 but they aren't quite there yet. If I had three wishes: 1. Functions would be first-class objects 2. I would be able to declare a numerically-indexed hash that array functions wouldn't re-order 3. Regex would be a native data-type.
CLI PHP is a great for cron jobs. Re-use your PHP business logic on a schedule.
Except casting objects to arrays [doesn't work that way](http://www.php.net/manual/en/language.types.array.php#language.types.array.casting). You would have to do: public function add($item) { $item = is_array($item) ? $item : array($item); foreach($item as $i) { $this-&gt;items[] = $i; } } Which still doesn't fix the issue with argument hinting being completely useless. 
How about not closeing connections? I have spent the last week cleaning that crap up. Edit: Perhaps some people don't understand how new "developers" work. The site I am fixing uses a combination of mysql_connect and mysql_pconnect, and any time the "developer" copied and pasted the connection code every time he wanted to connect to the database, never closing a connection, there is no OOP DB handler or even a function to handle opening the connection...oh, and for some reason the site uses over a dozen different databases to store whatever random shit the guy thought of...and none of the query statements specify which connection to use.
To be fair to the people that are complaining that class scares the ever loving crap out of me. Nifty feature though.
A well configured MySQL server should reuse threads, but when you aren't using any sort of persistence, the easiest way to deal with that would be to register a shutdown function. 
Unless you're using mysql_pconnect() you don't technically need to as php will handle that when the script ends. (and if you're using pconnect and still closing you're doing it wrong)
Regarding output buffering (all the `ob_` methods), you can do this if you're having character issues: ob_start(); // stuff echo filter_var(ob_get_clean(), FILTER_SANITIZE_STRING, FILTER_FLAG_ENCODE_HIGH); This will encode all the special characters (accented characters, etc) to their respective decimal HTML entities.
InnoDB hasn't been noticeably slower than MyISAM since 4.x. It's only slower when you end up using modern features it supports, like, say, foreign keys (which require extra work to enforce). The same performance hit exists for the same reason in all other modern databases. The performance "hit" for SELECT * instead of picking out columns is frequently negligible, but it depends on the circumstances. Picking out columns means that only those columns need to be read from disk. This is only a real problem if your tables can't fit in memory to begin with.
&gt; you don't technically need to as **php will handle that when the script ends.** Quoting for emphasis. You just blew the past week doing something unnecessary. 
Reddit uses a variation on [Markdown](http://daringfireball.net/projects/markdown/), so a quick search for [markdown php](http://www.google.com/search?hl=en&amp;lr=&amp;q=markdown%20php) should be enlightening. You'll absolutely want to use a library rather than doing it yourself.
much obliged, thanks!
Thanks for your reply. I've been using MyISAM just because it's the default engine, but I suppose I'll give InnoDB a shot.
Shutdown functions are incredibly useful. They are almost always called, even when an *uncatchable* fatal error happens: [mcg@mcg-workstation ~]$ echo '&lt;?php FATAL PARSE ERROR' &gt; fatal_parse_error.php [mcg@mcg-workstation ~]$ php --interactive Interactive shell php &gt; register_shutdown_function(function(){ print_r( error_get_last() ); }); php &gt; require 'fatal_parse_error.php'; PHP Parse error: syntax error, unexpected T_STRING in /home/mcg/fatal_parse_error.php on line 1 Array ( [type] =&gt; 4 [message] =&gt; syntax error, unexpected T_STRING [file] =&gt; /home/mcg/fatal_parse_error.php [line] =&gt; 1 ) You can't stop the shutdown from a shutdown function, but at least you can log when horrible things happen.
When you do so, keep in mind that InnoDB uses it's own set of configuration and tuning directives. If you've already tuned MySQL for MyISAM, you'll need to go back and read up on InnoDB tweaking.
Will do, thanks a bunch.
I still don't understand what you're saying. In PHP, `__call()`, `__invoke()`, etc are already functionally built in to PHP's class structure, and defining/implementing any or none of those built-in functions is completely up to the user to decide. Throwing in an interface wouldn't actually do anything. It would only mean adding twice the amount of code for the exact same end result. If you want, you can of course define an interface which has all the typical magic methods (`__call()`, etc) laid out, thereby forcing any class that implements it to also define your required list of magic methods. So if I'm understanding what you're saying correctly, you can already do what you describe... if you want to. Hell, you could easily draw up your own PHP framework which has this functionality across the board if you really wanted to. Hopefully that makes sense.
Another thing to note is that Full-text indexes/search is only supported by MyISAM
Also InnoDB tables can't be indexed using MYSQL's native fulltext indexer. You'd have to use something like Sphinx to fulltext index an InnoDB table.
What should you be doing if you're using mysql_pconnect()?
Hey that is pretty clever, and it makes perfect sense too even despite how dodgy it is :D
Genuinely curious, you say you've tried to replicate this in classic ASP, what is your use case for these?
With the shortened ternary operator, your first example will return 'false' because 'false' is a non-empty string, and PHP doesn't look at the contents of the string. For the other two examples they will both return 'default', which is perfectly reasonable in my opinion, and very useful.
Persistent connections are fraught with peril if you use transactions or table locks. If your script exits without closing the transaction or releasing the lock, the transaction/locks live forever (or until the server kills them). Worse, the next script to pick up the connection also picks up the transaction or locks, and won't be aware of it. So, if you are using pconnect, your best bet is ... not to. MySQL connections are cheap and light-weight. Other database engines also offer pconnect, but there are often better solutions like third-party stateful connection pools.
One of the biggest benefits of InnoDB is row-level locking. When you insert or update a row in a table with the MyISAM engine, the entire table is locked, and then the row is written and then the table is unlocked. Under heavy traffic, this can very easily kill a database server while hundreds of writes queue up. InnoDB only locks the row it needs to write/update. This is the reason why almost no medium-to-large sized websites use MyISAM (and most use InnoDB).
Is there any benefit to using MyISAM now-a-days, since apparently InnoDB is just as fast and better for larger sites?
Yeah, I'll admit to adding my fare share of useless or grossly inaccurate comments. I wish there was a delete button. But for pages lacking clear examples or explanations - and there are quite a few especially in the most obscure functions or extensions - likely you will find the correct usage clearly spelled out somewhere in a user comment.
Coming from VB, `with` was pretty useful. I missed that in PHP, especially when using XML... $obj-&gt;obj2-&gt;obj3-&gt;obj4-&gt;do_something(); $obj-&gt;obj2-&gt;obj3-&gt;obj4-&gt;do_something_else(); $obj-&gt;obj2-&gt;obj3-&gt;obj4-&gt;obj5-&gt;do_another_thing(); vs maybe something like this... with ($obj-&gt;obj2-&gt;obj3-&gt;obj4) { -&gt;do_something(); -&gt;do_something_else(); -&gt;obj5-&gt;do_another_thing(); } Then again, it's solved pretty much by doing this... $t_obj = $obj-&gt;obj2-&gt;obj3-&gt;obj4; $t_obj-&gt;do_something(); $t_obj-&gt;do_something_else(); $t_obj-&gt;obj5-&gt;do_another_thing();
Some good stuff in there, but also some epic turds too. I guess that's par for the course for PHP sample code though.
This was very helpful to understand MySQL http://code.google.com/edu/tools101/mysql.html programming is fun when you throw in mysql with php 
I'll definitely agree that there are some good and useful comments, but if your goal is to read through the php manual in any breadth you need to avoid the comments. My problem with the comments is that by being so closely connected with the manual they give the impression that they are near an equal significance to the official manual content. I wish there was a big disclaimer separating the comments from the main manual text saying "Warning, what follows is of dubious quality at best! You should just move on unless you really need to see if you can find a nugget of wisdom in 5+ years of mostly useless blather". Or something. I don't mean to be insulting, but I tried to go through the php manual once, and I wasted a lot of time because I felt like I couldn't move past a page until I had read the comments. Now I just go to the manual when I need help on a specific topic, need the full story from the horse's mouth, and I know I can just skim the comments if I look at them at all. 
InnoDB also supports full ACID which is worth (the possibility) of a performance hit. As a rule, the value of data exceeds the value of the hardware it is stored on so when you have tweaked if you still need more performance then throwing hardware at it is the right idea. Losing a blog post to a crash is not the end of the world..losing a large financial transaction might be the end of your employment.
It's actually pretty easy if you take an indirect route. I made my own wrapper, but it goes through VB.Net via COM. Crappy dependency and security issue there, can't port to Mono for Linux since a few key classes which it depends on just aren't there yet, and not exactly a WINAPI per se, but it works.
I can't remember what I was trying to do, but the way that asp scopes made it impossible to implement - it just plain didn't work. Better to use dictionary objects for a similar function.
My relationship with arrays was terrible before php which made me very standoffish when going in to working with them in php. I avoided using them wherever possible just to avoid the eventual headache induced. When I was finally faced with a situation where I'd either use an array or sacrifice efficiency I took a step in and worried no more. I do like how php handles arrays. As for my favorite feature I'd say the speed at which I can go from zero to working model.
It's actually great for quick build-your-own WIN applications, but it seems a bad idea for users to package and distribute those apps. Your entire app is utterly dependent on the host system having the correct PHP version pre-installed. You could of course package PHP with your app, but then there's the problem of what if the target user already has a different and preferred version installed.
$var == 'false' ?: 'default';
Whatever you do, don't dwell in the bug reports section. Don't let curiosity get the best of you, even if you know for a fact a user is flat out wrong or completely nonsensical about a bug they perceived, or even if you have a bright idea of a temporary workaround the user could use. It's exactly like the line at a fast food joint, where everyone feels entitled to a smile and having it their way or else someone deserves a firing. Just politely file your bug/feature request and move on.
Cheap article. &gt; Using * in SELECT queries Never use * to return all columns in a table. It’s lazy: you should only extract the data you need. Even if you require every field, your tables will inevitably change. How is this lazy if you want all the tuples in a table?
I forget the error, I'll log back in and see it. As for my members, I have over 300+ I will be adding to my list. What I wanted to do as well, was allow officers to add members to the list.
The point (4) about UTF-8 launches straight into "other languages" as the reason, giving people and excuse to still ignore it. There are enough non-ASCII characters in English alone to justify it: “£” for just one example. Or is that three examples? However, the database does not need to be set to UTF-8 to store these characters. It does need to be set to UTF-8 to allow proper searches and to get the character lengths on string columns correct (20 UTF-8 characters certainly does not equal 20 bytes, or a string size of 20 in an ISO8859 character set).
Floating fixed width div tags. Don't use tables. Or, a single tr with 5 columns. your "rows" are just br's. You might need to build it up in a temp buffer and then dump it into the table.
1. Put together the list of departments and subdepartments. 2. Count the total number of subdepts. 3. Take that number and divide it by the number of columns you wish to have. 4. Now, go through the list of departments and subdepts. Group departments together until you've counted as many subdepts as you calculated in step three. 5. Once you've hit that threshold, finish up the current department and start a new list. 6. Repeat until you're done. 7. Take the list of columns and render it into three very tall table cells or divs or something to ensure equal width and height. Alternatively, [jQuery Masonry](http://desandro.com/resources/jquery-masonry/).
This is where Firebug comes in handy. Right-click on the element on walmart's page, then examine it's HTML structure. Without myself going there to check, I imagine it just uses the standard method of grouping or arranging columns as floating DIV's instead of a table.
&gt; your "rows" are just br's Would be better to use unordered lists for each dept's subgroup. Easier to control overall style that way.
The Walmart page in question is [here](http://www.walmart.com/cp/All-Departments/121828). Notice that they use `div`s, not tables. Tables are not the right element for this purpose. That said, their markup is absolutely freaking horrible. A cleaner way of doing this would be using lists. Something like this per category: &lt;h2&gt;&lt;a href="#"&gt;Apparel, Shoes &amp;amp; Accessories&lt;/a&gt;&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#"&gt;Accessories&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Baby&lt;/a&gt;&lt;/li&gt; ... &lt;/ul&gt;
I got started with oreilly's php cookbook. I think that it is fantastic. 
It's my first language. I plan to sit down with a book and work through it, take examples, understand it, then write it without assistance and check back on it. Once I'm comfortable with the concepts and syntax I will head to PHP.net and work on improving my programming and using better code - but thanks for the suggestion regardless!
Thank you. I'll have a look at it. The reason I'm asking for a new book is because the one I currently have is ~10 years old and it has outdated, slower and less secure code in it. I want to learn with good habits from day one :)
Also note that fulltext searching in MySQL sucks! You're far better off off-loading this to Sphinx or some other application specialized in fulltext search.
Documentation purposes, if you're working on code that you didn't write and you see SELECT * you really have no idea what is being selected. This forces you to check the table structure before you can continue. However, with SELECT foo, bar, baz you know exactly what you have to work with.
Ahh yes thank you for helping me finish my thought process I was basically thinking the exact same thing except for some reason I was having a brain fart and couldn't come up with the "count all sub-departments and divide by the number of columns" step. For some reason I was hung up on thinking I had to generate that number manually. Damn I feel kinda silly now, I had that whole process worked out in my head except the first 3 steps. Guess that means it's time to call it quits for today when that kind of simple logic completely escapes me haha thanks again!
Yeah, but that is not an option on shared servers.
Valid reason that I overlooked.
Very true. Ff you're on shared hosting performance probably isn't your biggest worry, though.
I would probably achieve this by using fixed width divs set to display: inline-block; in a fixed width container so they wrap around.. but haven't tested that so I'm probably wrong.. Edit: Upon closer inspection.. yeah that won't work, nevermind :(
If you write for enterprise quality it doesnt matter what language you use. (To an extent) 2 of the most popular websites in the US (possibly worldwide) use PHP and Python, Facebook and Twitter.
Other than full-text search, probably not. There may be very specialized conditions where using MyISAM might be appropriate but by default InnoDB is superior in almost every way. 
&gt; I see good intension to magic methods, but with this implementation, they cannot be used for anything more consistent than ad-hoc solutions. I'm not sure I follow. If you have an interface called magicMethods that defined __get, __set, and __call that would do exactly the same thing. 
Holy crap. I thought I knew everything about PHP, but I had no idea that shutdown functions ran after fatal errors. I'm going to have to test this and perhaps re-write a bunch of my error handling and logging functions. 
It would probably be a colon: setcookie(name: 'name', domain: $domain); But I suppose the double-arrow would also work: setcookie(name =&gt; 'name', domain =&gt; $domain); 
[Practical PHP Programming](http://www.tuxradar.com/practicalphp).
Thanks! This will be handy for the meantime :)
It can cause unexpected conflicts such as column incompatibility if you have procs or other queries that rely on the exact number and ordering of columns. For example: &gt; insert into tbl_a (a, b, c) select * from tbl_b 
&gt;MyISAM is used by default. However, unless you’re creating a very simple or experimental database, it’s almost certainly the wrong choice! Well that's going a little far. There are times when it's appropriate and times when it's not. To say it's almost certainly the wrong choice is certainly an overstatement.
Would be neat
Isn't the same true of Java, Python, Ruby, etc.?
unsigned int will get you up to something like 4 billion, unsigned medium int will get you to around 64k. Like I said, you shouldn't worry too much about little things that like at this point, but it's always good to know.
No offense intended, it is great to see articles trying to improve code quality, but... Other than #2 (using mysql instead of mysqli), none of these are really PHP-specific. It would probably be useful to have more "this is how to fix it" type of answers rather than just pointing out the issues. &gt;3 - Not sanitizing user input "Never trust user input" is very good advice, but maybe some links could be provided as to what exactly SQL injection attacks are, or maybe an example of using PDO with named parameters to avoid these kinds of attacks? &gt;4 - Not using UTF-8 Again, maybe some examples of configuring a PHP 5 sever to better handle multibyte strings. Talk about using the mb_* functions that are multi-byte safe. And also, setting your database encoding to UTF-8 (since it is a MySQL article), since most database installs default to latin or some other non multi-byte option. &gt;10 - Forgetting to back-up! Possibly provide an example of backing up your database. The mysqldump command line option, or using phpMyAdmin to export a copy of your database. Again, Hopefully this is taken as constructive criticism and not an attack on your article. I just think it would help a lot of people had specific keywords or ideas to start Googling that would help them get to the answers. Looking forward to your next post! edit: formatting
&gt; Never use * to return all columns in a table. Never say never. If there was not a good use for it, it would not be there. Lets say I have a table that holds configuration values. My code selects every column in the table, and loads it into an array. If I go into the database and add a new configuration value, I shouldn't need to go in my code and also add that column. I already know that I ALWAYS want every configuration value to be loaded in my array.
All equally bad ideas. // trolling... mostly
&gt;Yeah, I'll admit to adding my fare share of useless or grossly inaccurate comments. I wish there was a delete button. For what it's worth, if you [file a doc bug](http://bugs.php.net/report.php?bug_type=Documentation+problem) with the manual page and note ID (the usually five digit number after the hash in the note permalink), we're quite happy to review the note and delete those that are outdated or just plain wrong.
Good to know. Might actually be best to have a 'flag' option next to each comment to make it easier for all. &gt; we're... If you do work in PHP org, I'm interested in a group IAMA from the collective (including volunteers). Maybe you could pass on the idea..?
&gt;It's only slower when you end up using modern features it supports, like, say, foreign keys (which require extra work to enforce). So wouldn't that make it slower? It's just as fast as MyISAM unless you want to use the features that are different from MyISAM
Thanks mate, I'll check out #php on IRC and see what they recommend. 
&gt; Other than #2 (using mysql instead of mysqli), none of these are really PHP-specific. Sorry, but I don't think this is going to stop people from loving to hate on PHP. We don't need your facts around here.
&gt;Good to know. Might actually be best to have a 'flag' option next to each comment to make it easier for all. Definitely. We've (well, mostly Felipe, but I've squashed a couple of bugs too) been tinkering with the bug tracker a bit in the last couple of weeks — the report a bug links in the manual now do sensible things again, for example — so that might be something I can look at adding. &gt;If you do work in PHP org, I'm interested in a group IAMA from the collective (including volunteers). Maybe you could pass on the idea..? Work is probably a strong word: I do some bug triage, some manual updates, some minor bug fixes, the odd change on the Web site. My actual paid job isn't PHP related at all, so that tends to limit the time I can allot to PHP related things. Beyond that, I'm not sure a group AMA really makes much sense for a loosely organised project like PHP. (If only we had a marketing team to not answer everyone's questions like a certain browser manufacturer.) People tend to scratch their own itches, so there's often not much of a group opinion to relay.
MyISAM is an orange to InnoDB's apple. Sure, they're both fruits, and you eat them, and they're tasty, but they're ultimately very different things. Restricting InnoDB to just what MyISAM can do, performance isn't too far apart. It's hard to compare MyISAM performance to InnoDB performance when using features only InnoDB implements. It'd be more fair to compare performance across engines with similar features, like, say, PostgreSQL. I don't have hard numbers for you because I'm not an expert and haven't been scientific and thorough. I've been using sysbench to determine what our best VM setup should be on a new server. Using the complex OLTP benchmark on a 10M row table (slightly larger than the available memory on the machine to force some I/O), PG's numbers were within 10% of InnoDB's numbers. 
I'm a little confused as to how __invoke() is actually useful...
I do agree it's cool to hate on PHP, but this article didn't seem to be doing that really. If anything, it's just a badly titled article. I guess it might be negative that the title sort of insinuates that these mistakes are only made by PHP Developers, but I hadn't thought of it like that until right now.
Aye, I see no reason not to use $pdo-&gt;prepare(), ever.
And what did they say when you asked them about it?
I disagree. In most cases it is the wrong choice- there is only one area where it excels- full text searching- and in most cases that isn't the real bottleneck for a site. Row locking versus full table locking is better for most every situation. Seriously, having the entire table lock up just because a row is being inserted really makes for some impressive slowdowns.
I'm guessing the people doing the downvoting haven't been in this game for awhile. Guys, if you don't close your database connections PHP will not *always* do it for you! Sometimes it just drops the connection, without letting mysql know. This results in mysql keeping the connection alive until the timeout setting is eached (which is typically something ridiculous like 12 hours). It may be a bug, but I have seen this before- quite a bit actually, all the way up to php 5.2.12. I can't tell you how many oscommerce installs I debugged due to "max_connection" issues (and no, it wasn't due to a mysql_pconnect call).
Drupal, Joomla and Wordpress are the big three and these are pretty good for sites and blogs. If you are looking to build custom apps, you will need to look beyond these and into frameworks such as Zend, CakePHP, codeigniter or syphony.
Agreed. I've had many complaints from app users about fulltext search being crap. Perhaps it's because they expect Google-like results, but it's certainly not a reason to use MyISAM over InnoDB.
SilverStripe strikes a reasonably nice balance between CMS and framework, quite flexible, there is a bit of a learning curve and the templating language can be frustrating, but very nice user interface in the CMS and leveraging the framework its built on (Sapphire) is very handy for out of the box stuff
Joomla, Combined with MediaWiki for the support you mentioned. Joomla is great and 1.6 will be out by the end of the year which will be added heaps of awesome features. 
I tried SilverStripe for all of about 10 minutes. It was the most buggy CMS I have ever encountered. Huge chunks of it simply didn't work.
I can assure you huge chunks of it work. Give it another 10 mins perhaps?
People, for the love of sanity stop using mysql_* functions. Use PDO or some ORM library. I've been using Doctrine for a while, eg. 
PHP was never designed to be an enterprise level language. PHP is more about getting the job done and less about programming. See: http://en.wikiquote.org/wiki/Rasmus_Lerdorf This is one reason why Facebook wrote their own PHP runtime. See: http://en.wikipedia.org/wiki/HipHop_%28software%29
I've had a good experience with TYPO3
I had massive issues with SilverStripe too. It seemed like a great idea to begin with, but it just wasn't quite there yet. Further more, I found it difficult to get involved in the development, so I decided against using that. However, at the time, I was looking for an eCommerce CMS suite.
Wordpress is a good place to start if you're after something simple. It's seemless updates make it a joy to work with.
I find this totally wrong. It is as fast (No, I am going to say faster) to develop a custom Joomla extension than it is to develop a whole web site in Cake or Zend. The only reason you would do it in Cake or Zend is if you a building a massively scalable web app. For a normal business web application a CMS with custom extensions will be the better choice.
Upvote for Joomla, it is probably your best choice. 
He never said it was faster, only better.
eZ Publish if you need flexibility as far as content goes - a totally open object-oriented content model and a very powerful PHP framework, with lots of built-in functionality you can use, extend, or replace. Also a learning curve bigger than your mom.
Drupal. What do you not like about drupal?
The learning curve.
Give Modx a try. 
The trouble is, if you want to step outside of its core document structure, it is a word of pain. If what you want *fits* with WordPress, then it is great.
Well, I am not sure I agree with that either - unless the OP is a very experienced PHP developer.
thats an edge case, really you shouldn't be doing that without defining the collums
You might want to have a look at http://www.contao.org/index.html
I'm a fan of [Textpattern](http://textpattern.com/download), I maintain 20+ sites built with it.
Try concrete5.org. It's free, open source and you can write packages (plugins) fairly quick. Based on MVC. Addons cost money though. Edit: many addons cost money.
it's funny they mention Markdown as a replacement for Textile in Textpattern. I actually like textile formatting. *bold* "link name":http://somesite.com
Wow, so you basically have no previous knowledge about any programming language, at all? I would then definitely skip the PHP 5 Objects, Patterns and Practice for now - those types of books assume you've already got a fairly solid grasp of PHP and programming in general, and introduce you to the world of OOP. While you *could* skip procedural programming completely (and I might even argue it would be best if you did), that particular book is not suited at all for a newbie. I'm sure there's got to be PHP introduction books that skip procedural style and dive straight into OOP - but someone else will have to recommend one because I don't know of any.
select * denotes that you want all the columns, it has not say in the number of rows you're getting. Adding a configuration value will be another row, so it will still be retrieved. tl;dr: If you're adding configuration values as columns, you're doing it wrong.
Not true at all. I've molded Wordpress, and quite easily, into many different things it was not meant to be, at all. One example is a tube site. As in a real, honest to god tube site. You give it a URL that contains a video, or a direct link to a video, and it downloads the video and makes screenshots and then creates the post with all the information necessary. Another example is a remote gallery ripper. I'll leave this one vague, but pretty much any type of site you can think of can be created by Wordpress.
&gt;Even if you require every field, your tables will inevitably change. Most of the time I change tables I am only adding additional fields. SELECT * is lazy, but it allows me to continue being lazy because I don't have to change my query.
Perhaps because PDO has inconsistent or flat-out broken features among different drivers?
Concrete5 FTW. And not all addons cost money.
&gt; tl;dr: If you're adding configuration values as columns, you're doing it wrong. That is incorrect. Lets say I have a web application that can serve any number of websites. Each website has a line in a table which holds its configuration values. Each config value should be a column, with each site having its own row. And even still, if you only ever need a single set of configuration values, I would say it is STILL better to use columns because each value will be strongly typed, and can be cross referenced with other tables if needed. What would you suggest, storing everything as a varchar? That doesn't seem like a great idea to me. Even if the scenario I suggested was incorrect (which it is not), there are other scenarios where you will want to unconditionally select all columns anyway.
Wordpress? Drupal? Joomla?
mm, even though it's not strictly PHP-only, I started using Aptana 3 a month or so back, and am hooked. WAY more stable than ZendStudio, and you can customize editor background colours too!
Eclipse, since I use it for PHP (PDT), Erlang (Erlide), and Android development.
ZendStudio? No if it's above 5.5 - all later are just crap. Currently I'm using NuSphere phpEd and I'm in love with it.
https://github.com/Hanse/verbier is another one
I like PHPEclipse, personally.
Typo3 is awesome, especially for multi-language sites. The admin interface is great function-wise but looks kinda crappy though. 
you can make the admin interface a touch prettier if you really want to, just swap out the CSS or install one of the many replacement interface packages.
Well I use Zend for PHP, used to use Eclipse but... if you like Eclipse, then Zend should be like Eclipse**5000 to you...after all it's based on it and they really enhanced it you know what I mean?(my english is the worst ever, I know) I keep working on Eclipse for python stuff though
This is an old article from 2006. There are some new kids on the block since this was written such as PHPStorm.
Wordpress, anything else is rubbish
vim forever.
I suppose. Anyhow, Typo3 is great. 
I'll stick with Vim and Geany.
I've tried Zend and Eclipse and Komodo and they were okay. Finally settled on PHPEd. It's pricey but if you can afford or get your employer to foot the bill I would recommend it. The only complaint I have is that it only supports CVS at the moment. Not a huge deal since with some effort you can rig it to work with other repositories. But it would be nice to have Git integration. If you don't have the money then I'd probably recommend Eclipse above the others.
I've asked before, but still haven't figured it out. How do you get FTP to work in PDT? Something as simple as opening a remote file, editing it and saving to the remote location is complex enough that I haven't figured it out.
I use gedit. Works fine for me, although every once in a while I'll try out an IDE.
I hope that you're right about 1.6 being out so soon, I've not found the expected release date anywhere, do you have a link? I'm using 1.6 on several internal websites now as it solves so many weaknesses of Joomla. That said, given the OPs list, I'd choose Joomla. I know nothing of PHP-Fusion and I cannot stand the php4 put-it-all-in-one-table architecture of Drupal. One shouldn't code on a framework that makes one feel ill every time they look at the architecture. Codeigniter (Expression Engine) would be nice, if they ever updated it or even addressed long standing bugs. I really enjoy writing small projects in it anyway. For larger projects where bug fixes and updates are important, Symfony is my choice and there are two CMSs that are built on it, I like [Diem](http://diem-project.org/) although I've never actually built a project on it. *tl;dr* Joomla is OPs best choice from his given options and what we know about him.
Using this in quite a few sites now, modx is the best
Anything worth learning is hard.
the code underneath is a load of procedural crap from the past century.
VS.PHP!! Been using it for years, it's awesome, especially if you're already used to the Visual Studio environment
Sure, but it's one of the better PHP CMS's right now.
Drupal is powerful but difficult to wield. Wordpress is simple but limiting. Joomla has a nice back-end, but the rest is a PITA (imho). By the description you gave of your requirements, I lean towards Wordpress for its combination of plugins (related articles, for instance), and straightforward templating system.
Aptana is also based on Eclipse. You can download it as an Eclipse plugin or as a standalone Eclipse install. &lt;3 aptana
I don't dislike Drupal, I've just been there and done that. I kind of like Joomla better anyway, but I was just curious if there's something bigger/better that's all the rage now.
I'm self-taught and no. You'd probably be more than able to inject code into any of my older PHP/mySQL made from scratch sites because I lack a decent understanding of security :). I use CMS's to fill in the gaps until I have enough time to actually learn me some PHP from the ground up.
I'm a Komodo IDE guy. Used ZendStudio and then Eclipse for years but finally got fed up with having to deal with Java.
As reliable as your SMTP server.
Download the Remote Systems Explorer from http://download.eclipse.org/dsdp/tm/updates (add this link to your update manager). Add it to your window by going to Window -&gt; Show View -&gt; Other -&gt; Remote Systems -&gt; Remote Systems. Add your FTP system to the new panel.
If they're using mail() by itself, then they're probably not using SMTP. 
Netbeans for me and I agree with a previous commented that Zend Studio went way downhill after 5.5
Don't know much about Cake though... but their site seems promising
You might be able to get them sent off. That is the easy part. The hard part is doing everything you can to ensure that the email is actually delivered into someone's inbox. The really hard part is getting that person to actually open the email, read it, understand, and do what you want them to do.
What are your other options?
I built a system for a client 3 years ago who was adamant that we send the email from our own system. The lists were generally 20,000 people and took forever to send and often went straight to SPAM folders (despite everyone on the list being an existing customer.) That said, for large email lists, it is absolutely best to use a third-party service that specializes in making sure your emails actually make it to the inbox and have all the tools already needed to optimize this. Google 'email marketing' for a list of companies.
Normally I don't like Jeff Atwood's blog, but ["So You'd Like to Send Some Email (Through Code)"](http://www.codinghorror.com/blog/2010/04/so-youd-like-to-send-some-email-through-code.html) is relevant and worthwhile.
5.5 was really good. I cried a little when they went Eclipse... Speaking of IDE, anyone knows one running under osx and not written in java crap?
If you have any number of e-mail addresses &gt; 100 or so, you should probably use a service like MailChimp or CampaignMonitor. They have great APIs, are fairly inexpensive, and you pay them money to make *sure* your emails get delivered.
Phpstorm is nice and its new
I assure you that if they are sending e-mail to another system, at some point they are using SMTP.
Coda. Not a true IDE but I love it so much.
vim. I have no need for all your newfangled bloat.
&gt; I like to give the customer a button "Add gig" with Title, Location, Time fields. create a custom post type and set up all the default meta fields you need. you can do this in &lt;5 minutes in wordpress. maybe I've misunderstood what you were getting at.
The hard thing is doing this on a server where you can't control the script timeout, as sending user specific mail to 20,000 people will generally reach that timeout period. What I ended up doing is creating an ajax mailer that would send x emails at a time where x is settable in the configuration. Then reload the page again to send another x until it was complete. Since it kept track of which emails it sent to, should something happen, the user could continue where it left off.
Drupal 7 :D
In my experience mail() is perfectly reliable, sometimes even preferred since it sends it to a mailing queue and doesn't block your code while connecting to the server. The hard part is getting your reverse DNS setup properly so that the receiving server doesn't junk the message immediately.
I use PhpED, I have yet to find an IDE as good as it, I've tried ZendStudio a couple years ago and it was missing a lot of the FTP functionality that I love about PhpED, but that could of changed by now. I don't use the debugger at all, I wish there was a PhpED lite without it and all the HTML prefab crap or at least a version where you can disable it entirely.
Plus it only actually takes 15 minutes to set up. 
Although a very large majority of email bouncing around the internet is at some point using the SMTP protocol, not all of it is. For example Exchange servers and clients use a proprietary messaging protocol. Phifty's comment is just silly though, since the mail() function ONLY uses SMTP to connect to your mail relay.
[Postmark](http://postmarkapp.com/) is really nice, they also give you 1000 credits (*One credit = one email*) for free.
PHPStorm for me.
i've tried almost everyone of these at one time or the other and even though i've been constantly impressed with how useful most of them are and the loads of features built into it, i somehow keep reverting back to editplus over and over again.. even for big projects and complete websites.. i don't know but it's so quick and breezy that loading an IDE to edit PHP to me is like starting an car when you can just go walking there
Exactly my point. In a CMS you get registration and user control and all that handed to you as well as the actual content management, so why re-invent the wheel?
I was wondering why this wasn't on the list. Although new, it's quite good.
Opposite experience here. I went back to Zend Studio from Aptana because Aptana was horribly buggy and unstable (at least on the Mac).
CLI?
We use this on a command line script to do it. http://sourceforge.net/projects/phpmailer/
TextMate. All I have ever needed is syntax highlighting, folding, and Zen coding.
NetBeans. I am currently using the 7.0 beta build on OSX and it is awesome. (www.netbeans.org) EDIT: I just realized that NetBeans is actually coded in Java so I guess that wouldn't get you away from "java crap". I will say though, that it is much more stable than Zend Studio or any other IDE I have used to date.
Only on Windows. On a Linux box, it simply executes sendmail. If you are sending mail to another system, then whatever is functioning as sendmail on your system uses SMTP. Exchange servers also use SMTP when sending to other domains.
I prefer Komodo, having tried lots of editors such as Netbeans, Eclipse/Aptana, etc. It's nice that one license covers every operating system and computer a user wishes to use. It's code intelligence is awesome, and it has great tools like the regex editor. Version 6, which is just released is really good, has great project management browsing, and handles a lot of files open at once really well. I just wish the upgrade from v.5 was cheaper.
Good point, I forgot that it used sendmail. But sendmail is another example of how electronic mail can be sent with or without SMTP.
&gt; In PHP, arrays are the duct tape of the universe! love it!
I know. I picked it up about 6 months ago and have since made about a dozen sites with it. There is a learning curve, its a bit to get your head around the architecture of it but once you do it has a lot of potential and really you can do anything with it. Last year it was second equal in the open source CMS awards at Pakt Pub and its a finalist this year. Solid, but not over bloated. 
I just started using textmate for php, like seriously last night, took me a while to get macfuse. Before that I just liked vim.
["In any case, we expect version 1.6.0 to be released before the end of 2010."](http://www.joomla.org/component/content/article/5252.html) I guess it doesn't sound finalized, but that's what they are aiming for. 
In the advanced text editor segment I always thought Kate absolutely trounced everything else.
I don't know why you were downvoted. Actually, it seems like a few people went and downvoted most of these comments... Eclipse is a nice editor but it's full of bloat and can be extremely slow and memory intensive from my experience. I use Komodo Edit and I love that thing.
Why don't you like it?
http://swiftmailer.org/ You're welcome.
Half of these are PHP-specific. I don't understand why someone would spend the time to learn an editor that can only be used for one language. Seems like a bad investment to me.
PHPMailer used to be the thing a few years ago. Your best bet now is http://swiftmailer.org/
These days, doing this kind of stuff from scratch is a bit silly. Smarter to use a cloud based service such as [sendgrid](http://sendgrid.com/), who give you things like stats, taking care mail actually gets delivered etc. etc. Sendgrid is not the only option - have a look at [this discussion](http://stackoverflow.com/questions/3746213/sendgrid-vs-postmark/3830175#3830175).
didn't you check the date of the article? it's from 2006. on topic: i now use PDT (PHP Development Tool) plugin for Eclipse which replaced the PHP IDE Project mentioned in that old article. Great thing about Eclipse is I don't have to switch IDEs when working with different languages. just install the correct plugin and switch perspective depending on what i need to work on.
Agreed, SwiftMailer is the new standard for php email.
CLI + Cronjob? Seriously though, I cringe when I see php apps that need the browser to do standard maintenance or ajax hacks to constantly run on some browser. Even most shared hosts will let people run cronjobs, so there's no real reason to force things through the browser (and no real benefit either).
... not if you are sending to another system.
Ok, like I said before I don't know much about either PHP or MySQL. I doubt I'll ever get 64k let alone 4 bill members. LOL Working on the login feature right now, as it's easier. Once I finish that I need to figure out how the rest. 
Textmate is great, would use it too if i did all my coding on Mac.
He's a talking head who has been found to be frequently blatantly incompetent. He does have his moments.
I like Netbeans, though for most my PHP/HTML/CSS work I'm currently getting into using Notepad++. I used to used Eclipse and I kept finding it a bit memory/resource hungry which lead to poor performance. 
I use Komodo myself.
The version of ZendStudio in the article isn't even maintained anymore- they ditched it in favor of writing yet another eclipse plugin. Op, as someone supposedly using ZendStudio did this not jump out at you as a bit strange? It should have been your first clue before posting a 4 year old article.
also sendmail is pants, it calls the system registered mail client, usually what ever it is configured to reference sendmail as. We used to use exim before offloading it to another properly configured SMTP server that wasn't our web server aswell
Notepad++
Vim and Komodo on Windows and Ubuntu Coda and Vim on Mac
I've tried using other editors several times over the last 2 years (Zend, NetBeans, Eclipse, VS.PHP, and some others I forget) and I always end up back with vim. My favorite part about using vim: I can setup my environment from a fresh Linux install by simply cloning my vim git repository. Everything is then as it should be, no going through 15 dialogs every time I have to reinstall.
Emacs FTW!
Agreed. I don't think the OP is looking for anything too advanced though, but I could be wrong.
PHP mail(), swiftmailer &amp; phpmailer sucks. Try this instead: http://www.phpmaniac.net/wiki/index.php/Pear_Mail I've written wrappers for all of them in the past, PEAR Mail is still the most favorable of the bunch.
To my knowledge PHP's mail() uses sendmail, which does not usually use your SMTP server. Although it may use SMTP (protocol).
Bulky and outdated. It sucks to interface with.
Just use the PEAR Mail Queue package. Easy peasy. :) See: http://pear.php.net/package/Mail_Queue
SwiftMailer is really ugly to work with.
if anyone using netbeans wants this ability, in the options dialog there is an export button which produces a zip archive. there's an import button next to the export button.
this is a big reason i use netbeans and haven't tried out something like phpstorm.
Weak article, they left out NetBeans, I use it, because I think it's best.
Yup, I've done this, but saving the file saves to the local copy not the remote system.
with nxthtml for great web development justice!
Arrays and magic methods
How do you think sendmail transports that mail? If you're sending e-mail outside of your local server/network, you're going to hit an SMTP server at some point. That SMTP server is the one I am talking about, whether you're running your own using one provided by an ISP.
You make me want to switch from vim
Don't you get false syntax errors and bad formatting when editing a file that has both html and php? If so, is there a way to fix it?
But now my editor settings don't work on my servers :(
gedit :)
Feature for feature, Netbeans is still the best. I can't wait for IntelliJ IDEA to expand its PHP support up to its Java support level. As soon as that happens I'm switching. I still use vim more than anything for PHP development though.
Use server side verification, use fileinfo to figure out what the file is.
6.x would get all wonky and required frequent restarts on my macbook. So far the 7.x dev versions have been very good to me, though.
**2006**
Netbeans. It just works.
What do you want to do ? "Pretty things that fly out of the screen", go with javascript if wanna use a browser, Download several images from X server, automated, learn a little php
Coda for me too, although I find it pretty frustrating it doesn't have codecompletion for custom functions/classes, everything else it's great at. When working on a Windows system I use PHP Designer: very fast/responsive and all the functions I need.
Use HTTPS. If there were known serious security issues with a library as popular as jQuery, they'd be fixed pretty fast I would think.
I work with PHP everyday, and it's probably the language I know the best, followed by Java and C. My advice to you is: learn PHP if you like a simple language that's easy to pick up despite its flaws. Because it definitely has a lot of flaws. If you're looking for a more elegant language, learn Ruby. But if you're looking for a language thats' quick to learn and gets the job done, then PHP is the way to go.
Never ever rely on Javascript for any kind of validation because it is client-side, which means it can be tampered with. Instead, worry about validating the file upload on the server side of things.
gtfo n00b lol php is da best. Just kidding. PHP is everywhere, there's many jobs that require it, it's fairly easy to learn and there are plenty of materials to learn from. I recommend "PHP in Action - Manning" if you already know how to program and "Beginning PHP and MySQL - Apress 4th Edition" if you don't. "PHP Objects, Patterns and Practice - Apress 3rd Edition" when you're done with either of them.
[Velociraptors](http://www.zurb.com/playground/jquery-raptorize), mostly.
You should learn a more "complicated" language like c++ or Java first really. Don't get me wrong, I love (and hate) php, but there a lot important concepts that other languages force you to learn and use that php will let you get away with. You don't have to become a master at them, but at least take a class or work your way through a book first. I think it's very important to realize why php is a great language, while at the same time a not so great language. A couple things of note: * Variable initialization and casting * Loose versus strict comparisons * Arrays (I LOVE arrays in php, but they're not nearly so flexible in other languages for better or worse) 
If you're not a programmer, I would recommend Python or Ruby first. The both have a shell to play with stuff on the fly, and they both use good coding standards which will be important for you to learn.
Ok, but the ability of them to take PHP and run it on an Enterprise grade runtime is a positive, and Zend also has an enterprise runtime that they maintain. I can take a Java web app and run it on Tomcat, But i would never want to run Tomcat at an enterprise level, I would put it on WebSphere or something of that nature
Holy shit that was awesome. If only I had a site that used a lot of jQuery for that...
[SendGrid](http://sendgrid.com/pricing.html) also have a free account which allows you to send up to 200 emails per day. Look at the small print under the table to find it.
I recommend php because there is a huge amount of web work and php is probably the most used language for web work. So learning it first will give you the most opportunity for jobs. As far as it being a good language heck no there are way more that are far better and easier to work with.
Because while I can use another IDE, it may not be as complete as something specific to the one language I need. For PHP, I'll stick with PHPStorm. There's a python version as well. Between the two, I have all of my commercial development work covered. Though actually, PHPStorm is a stripped down (and much cheaper) IDEA so..
As someone else said, it comes down to your goals. If your goals are to be a flexible and capable programmer, read on for my $.02. I've been a (primarily) PHP developer for a long time. If I were training programmers, I'd probably start them out with Python, or maybe Ruby. I'd make them do academic "101 Introduction to Algorithms and Data Structures" stuff, followed by a basic overview of Object-Oriented stuff. Then I'd be a bastard and make them learn some C. It's always good to know some C, so you get a better idea of what the hell these more abstract languages do. One you've gotten your head around some basic algorithms in C, you understand the difference between by-value and by-reference, have a clue about pointer arithmetic, and understand type systems, you're ready to go self-directed. This is not the path to instant gratification for a lot of people. "oh boy! implemented a doubly-linked list. joy. (sob...)" But if you spend a few months plowing through all this, you'll be able to jump into Java/PHP/C#/C++/Objective-C pretty easily. Then if you want to break your head a bit, you can start playing with Lisp or Scheme, just to be a nerd. 
I'd say pretty much exactly this, but substitute Python for Ruby
I've actually just set up HTTPS on apache (mod_ssl), and we're looking at getting a certificate for this stuff, as well as some other stuff. 
This is the dark side. Resist! There are lots of people who followed this advice. And I have to spend way too much of my time triaging the trail of shattered and bloody data and control structures they leave in their wake. Many of these people even have degrees in computer science, but were lazy, and never did any programming that wasn't directly related to some assignment for class until they graduated and got a job at a PHP shop, where they managed to not get fired long enough to be able to churn out some steaming pile, which, if you look at it and blur your eyes, kind of meets whatever requirements they were given. PHP is a great tool, for all its warts. As one guy put it, it's a big sticky ball with nails poking out of it -- it ain't pretty -- but you throw it at a problem and it sticks. For learning, you want a nice "ideal" ball, that is smooth, and perfectly spherical. That perfect globe is predictable and consistent. Use that ball to learn. Do the work, and work hard. Find joy not only in writing a little program that works, but in the fact that you have a complete understanding of how and why it works. But picking a language because it's marketable is, IMO, terrible advice. I'll never understand how all these CS programs starting using Java as a teaching language -- but it's been a fucking disaster. The quick path to a job is the Dark Side. There will be plenty of time for hacking later -- learn to design and program first. Disclaimer: One could learn to program using PHP, and do it right. But the number of shitty tutorials, books, etc, will make it hard. Pick something obscure (acadmeic, even!), to keep the signal to noise ratio high.
I agree. I would recommended learning c/c++ before PHP. If you had a decent grasp of those languages, you can pick up PHP _easily_, and I really believe that you'll end up a better programmer in the long run.
I don't necessarily want to do anything specific. I've just been seeing PHP pop up in several places (where I work, my choir directors website, etc...) and thought it might be beneficial to learn it... so I suppose I just answered my own question.
So basically you're saying I shouldn't be a dumbass? lol k. Seriously though, everyone else has been saying something along the lines of what you are: learn something else first, then learn PHP out of necessity.
Thanks for the advice! Everyone else had the same $.02
&gt; You should learn a more "complicated" language like c++ or Java first really None of your examples are very good. Really. No language forces you to learn much at all. People copy paste all day long and are bad because they are happy to know what they know and do what they do. Don't be silly. PHP is the fastest way to start (and fail) quickly. Also, someone will be able to learn if they want to be a programmer with less pain. Learning a language is not learning computer science or how to do development. Those are separate topics. Programmers get as good as they want to be as switching languages is not very hard once you get one down. PHP is particularly forgiving in how you develop or how badly you design so you end up with a wider range of talents and it's very hard to tell who's awesome and who's just getting by. It does require more talent and knowledge to use C++ correctly and completely different type of knowledge and talent to use Java, although the syntax looks similar at a glance. Java is the next friendliest and fastest to get you a job.
PHPStorm is a crappy version of Komodo. I used PHPStorm for a month. It was truly painful. I gave it a shot. Then I shot it.
How do you manage multiple projects from the same window without opening and closing them?
Netbeans has a great vim plugin. It works perfectly, no reason to leave Vim behind. I've used several of the IDEs and it's Netbeans for me. I don't just do PHP, so the support for C, ruby, and python are nice. Full support for symfony and zend is also handy along with that vim plugin. I've used vi/vim for years and Netbeans makes it worth using an IDE. Wish that they supported perl though.
Validate on the backend. You can do a cursory check with jquery, but that does not replace back end validation. Remember, anyone can turn off javascript, or even change the javascript code you use for validation at run time. First check extension and match against the proper mime type, which can be done with $_FILES. If it's an image, open and re-save to a new file with gd or imagemagick, then delete the original. Text files you can cleanse for xss/sql injection, then save to new file, delete the original. For things like word docs, pdfs, open office docs, it is obviously harder. There are some command line utilities you can use for virus scanning, though I really don't know which one to tell you to use. The biggest thing to remember is to never trust user input, though you seem to already know that, which means you are ahead of the curve. Also, if you don't know how to use a security token to protect against cross site request forgery, learn it and use it. It's actually pretty simple. Though the chances of being hit by it are probably small if your site isn't extremely popular, it will save your ass if anyone decides to try it on you in the future.
Yeah, we're all right! I wanted to reply directly to nodren's post because I disagree in a very particular way with his reasoning. 
Awesome suggestions, I'll make sure I work on all of this. I was actually looking into some Linux-based (web server is Debian) virus scanning and I'm leaning towards [Clam](http://www.clamav.net). Thanks for the post!
Vim for me also. If I'm forced to use windows, then Notepad++ works. PHP is pretty simple so it's hard to justify the need for much else.
False syntax errors? No.
Vim FTW
I am quite disappointed in this article completely. NetBeans is where the action is and it wasn't even under consideration. I find its Mercurial integration a great resource as well as the support for 5.3 and namespaces. Not to mention that Symfony and Zend Framework libraries and tools are integrated as well. Additionally when you can't do what you need to do with NetBeans you can man up and crack open VI or you can use its VI integrated plugin to make it behave like VI. NetBeans FTW.
Hello, I am a PHP developer as well and I was once in your position, I sit on the IRC server freenode and sit in the #zftalk, #php and #phpc channels. In my searches I met an individual named Rob Allen who pointed me to his blog. Take a look at the following article to get you pointed in the right direction http://akrabat.com/zend-framework-tutorial/. This individual knows what he is talking about. He is also a ZF demi-god so you can rest assured he knows what he is talking about.
One of the most valuable pear/pecl libraries I wish they would include in core is UUID. I use it for example in generating unique identifiers for images in a system where a identifier + image size is the true unique identifier of the image.
I don't think any has read the internal mailing listing. APC caching is now part of trunk so it is installed by default. Once APC goes in place the JIT compiler can be built. Someone was working on LLVM a while ago and that is where the pure 35% speed increase will come from.
phpdeveloper.org
The list was written in 2006...
Why?
It's a real joy to work with. It feels as solid as it gets, unlike PHPMailer, which feels like a bunch of functions glued together. By any chance, you're not very into OOP, right? Abstract classes, interfaces - any of this ring a bell?
"your SMTP server" and "an SMTP server" aren't the same thing. You are mistaken.
http://www.vim.org/download.php#pc
On the contrary. I've worked with mail() to build my own wrapper class, PHPMailer and SwiftMailer. I found that PEAR Mail was far superior. Although I now don't recall the specific issues with SwiftMailer, I do recall it being needlessly problematic, while PEAR Mail was completely seamless.
It doesn't sound like you have a definite purpose for it. Like any other programming language (or language in general): if you aren't going to use it, you will not retain what you learn.
I'd say pretty much exactly this, but substitute Spanish for Python
This is one of my main beefs with PHP. The inconsistency with function naming and argument orders is terrible. It's also something that makes it hard to convince non PHP devs to move from another language and give it a go.
To each his own I guess.
Very nice. Looks like there's quite a few springing up at the moment which is nice to see.
Postmark is only for transactional emails; if you want to mail something like a newsletter, or an arbitrary announcement to your list, they'll cancel you
Nice, I have needed this a couple of times. 
Can someone explain how are traits differents from multiple inheritance? Why didn't they just add multiple inheritance to PHP 5.4? Are traits less "dangerous"? Also, - Will it be possible to use *instanceof* on traits? ie: $myObject instanceof SomeTrait - Will it be possible to use traits as a parameter type in a method? ie: public function myFunc(SomeTrait $obj) 
Doesn't this reduce portability quite a bit? While C++ has something similar with templates, is there anything like this in Python and C#?
The answer to both your questions are no. That is what makes traits different than multiple inheritance. Traits do not change the type hierarchy. As it is described in the article it is basically a language supported copy-and-paste mechanism. 
All you would have to do is copy-and-paste manually instead of using the built-in support for it.
But then, why did they implement traits instead of multiple inheritance? Similar gotchas seem to exist in traits and in multiple inheritance (which version of a method will be run?), but traits do not provide the benefits of polymorphism. Maybe the fact that traits can't contain properties is the main reason why they are less dangerous/have been choosen? 
A little bit of insight into that here: http://wiki.php.net/rfc/horizontalreuse#why_do_we_need_horizontal_reuse &gt; To circumvent this problems multiple inheritance and Mixins have been invented. But both of them are complex and hard to understand. PHP5 has been explicitly designed with the clean and successful model of Java in mind: single inheritance, but multiple interfaces. This decision has been taken to avoid the known problems of for example C++. The presented approaches have been designed to avoid those problems and to enable designers to build conceptually clean class hierarchies without the need to consider code reuse or complexity problems, but focusing on the real problem domain and maintainability instead. Otherwise you may also want to look over http://wiki.php.net/rfc/traits ( which has been superceded by http://wiki.php.net/rfc/horizontalreuse )
jQuery runs on the client side. Therefore your security precautions shouldn't even be taking it into account. Pretend it isn't there. Validate and sanitize everything on the server side as you always would.
sendmail uses whatever it's configured to use. If it's properly configured on your machine, then your mail will go out properly. This is not a question of PHP's mail() function but rather of competent system administration.
I can't wait for this. In a lot of my classes, I have the repetitious code private $blnError = FALSE; private $strError = NULL; private function setError($strError) { $this-&gt;strError = $strError; $blnError = TRUE; } public function isError() { return $this-&gt;blnError; } public function getError() { return $this-&gt;strError(); } Sometimes I'll have it as an error object in my code. But it's annoying. I'd just like to have all those methods and properties in the class without having to duplicate the code in each class. Will traits do this for me?
Multiple inheritance will not allow you to use a common singleton class in more than one class without causing conflicts between the child classes.
This is true only if the language does not provide a sane ambiguity resolution mechanism. C++ is pretty much the only commonly used language that supports multiple inheritance and people tend to think that the implementation C++ *defines* how it *must* be done. A language like Eiffel has a much saner and useful (and powerful) multiple inheritance mechanism that rather easily allows you to resolve diamond inheritance without individually redefining *each and every damned potentially ambiguous reference* like C++ does. Just watching the contortions that languages undergo in order to avoid niche situations that are largely academic is kind of sad, as they invariably end up adopting a weaker form of the same feature. Traits are similarly a shadow of MI in that they don't modify the type hierarchy and users will invariably want to use *instanceof* on it, which they won't be able to do. It's similar to the generics introduced in C#; the 2.0 version didn't incorporate any sensible type conformity (like IEnumerable&lt;object&gt; was not considered an ancestor of IList&lt;string&gt;); the 4.0 version introduces the glory of co- and contravariance, but it's also an implementation that restricts things unnecessarily in order to avoid the dreaded **Catcall**, where code *could* be fooled into a runtime error. So we end up with an improved form of generics that allows *some* of what most developers would consider to be logical conformity but disallows others -- for what are very sound, mathematical reasons -- but which forces the pragmatic programmer to just use Cast&lt;T&gt; anyway. Traits, in an effort to avoid the dreaded stigma of *MI*, introduces new keywords and much of the resolution machinery of a sensible version of MI (like in Eiffel) without the type conformity that makes MI so useful.
Yeah, I realized that after I posted, but felt no reason to delete it.
Using a novel concept: working on one project at a time, and just opening the one I want.
Have you tried using `is_null` instead of having a separate "this other variable isn't null" boolean, or does your code assign yet another meaning to that?
Good point. I could just check to see if $strError `is_null()`.
**tl;dr** Nothing they can't just undo later. Just the installer script for someone's Kusaba X installation.
throw new Exception($myErrorString); FTFY ^^
Fair enough.
&gt; Using a novel concept: working on one project at a time What's a debugger? Why would you ever need one for php? (i use DeerParkDebug regardless of editor, but if you don't need a debugger you do a much simpler kind of development where var_dump has always been good enough). Who works on multiple ancilliary projects that serve multiple projects like search or 3rd party (cc/game/etc) authentication or simple webservices like geolocation? It's not novel, it's small scale and simplistic (not to say that simple projects are easy...everyone knows how that goes).
[Comments on HN](http://news.ycombinator.com/item?id=1924442) (Some interesting discussion)
Call it what you will if it makes you feel better. In my 10+ years of PHP development, I've never once had need of a debugger. Besides, I can debug *outside* of my coding environment.
Textmate doesn't integrate with dpdg. When I did use TM, I used my debugger outside as well. Same with phpStorm, vim, etc.
I've used Netbeans since I learnt PHP, it is *the best* IDE I've ever used for any language on any platform. It's stable, flexible and it integrates mercurial superbly well (unsurprisingly since the development team use mercurial). For php stuff its great it supports HTML and XHTML, CSS completion links to the CSS docs with examples (great if you are rusty). It is a class product.
I think that "your SMTP server" is reasonable shorthand for "the first SMTP server you're going to hit, whether it's your own server, your connecting ISP's server, or your mail ISP's server". If you're going to get that deep into semantics, just suck my dick instead.
Yep. Or they uploaded everything and left it.
This looks like PHP.net developers are still overcompensating for the lack of OOP features in PHP4. While it's nice that academic papers have been consulted this time, it's syntactic overkill. Adding half a dozen new keywords to work around multiple inheritance stigmas doesn't seem very sensible. And it also looks like this route is taken because it forgoes a Zend runtime extension in favour of a macro preprocessor ("traits are just a copy and paste shortcut").
Whoa, whoa, whoa. We all know, thanks to CSI, that it's IRC that's like sailboats. I couldn't login with Kusaba's default info, which is admin/admin. I decided not to bother.
I would posit that MI in Python is relatively sane. I've used it quite effectively and have never had any problems with it.
I don't think multiple inheritance would be a good addition to PHP because it would be grossly mis-used. The situations where multiple inheritance is truly useful are very limited, and with the addition of traits, non-existent. A common mis-use of multiple inheritance can be demonstrated by the following: abstract class ForceSide { protected $leader; public function getLeader() { return $this-&gt;leader; } } class LightSide extends ForceSide { protected $leader = 'Yoda'; } abstract class ForceWarrior { protected $strength; } Now, an inexperienced programmer, knowing multiple inheritance is available to them, might try to define a Jedi class like the following: class Jedi extends ForceWarrior, LightSide { protected $strength = 100; } This is a bad idea, because it side-steps the purpose of an inheritance hierarchy. When you are extending a class, you should be asking yourself "is B the same type of object as A"? Is a Jedi a warrior of the Force? Yes. Is a Jedi a Light Side? No. It is _aligned with_ the Light Side. Therefore, the following pattern would make a lot more sense: abstract class ForceWarrior { protected $strength; protected $side; abstract public function __construct(); public function getLeader() { return $this-&gt;side-&gt;getLeader(); } } class Jedi extends ForceWarrior { protected $strength = 100; public function __construct() { $this-&gt;side = new LightSide(); } } 
I read that thinking the whole time that your some sort of Pron ninja. I must know what sites you are talking about!
Multiple inheritance is very much like interfaces and traits combined into a single feature. 
Save a function call: ($this-&gt;error === null) I'm curious why you have this structure in a lot of your classes? Would exceptions work? 
Gedit, but with several addons
For me, it's got traits like C with it's loop structures, curly braces, and semicolon end of statement clauses. And it's got an OOP implementation, which I appreciate. It compiles into bytecode and is therefore very efficient. It scales pretty decently, and now scales even more thanks to some of the recent compilers that have been created. You can code a module in C and add it into your PHP to make it even faster -- some have even done this to speed up RegExps, sorts, and so on. It's got a fairly simple to use database API. It's not an explicit, typed variable language like Java, C, or C++, so I like that. It's not confusing to me like Ruby, Java, or Python were. It doesn't use crazy begin/end statements like Pascal did, which not only added more typing, but often confused me as to what end matched what begin (in nested begin/ends where someone screwed up the indentation). And on and on we go. Does it have some serious flaws? Yeah, in some places. Does it have quirky parameter order? Yeah in some places. But the #1 reason for me is that it's an all-purpose, common, easy-to-learn (at first), and capable language for getting web development done on Linux. It's free, going along with the free cost of Linux. So, it makes me feel like I can do almost anything and conquer the world.
You could try http://www.axure.com/ You can make clickable wireframes, flow diagrams and so on..
Um, seems rather obvious...so they can have a better chance at winning? Just sounds like a person(s) spamming it with some tool.
Do you have an affiliate program and are you paying bounties to people that generate entries from their sites? If so, then I would venture to guess that people are gaming your affiliate program by filling out phone and address info from the phone book and then populating a random email that validates. This is most likely being done in some sort of automated way. A captcha is a good idea, but I would also be using ip/user agent combos and session ids to do your best at limiting one entry per computer. However, there are relatively easy ways to bypass this and good scammers will be tough to trace.
Semantics is what makes this work. Jerk.
[_Go optimize something that matters._](http://ch2.php.net/manual/en/function.is-null.php#84161)
This is a common method to insert your images in your CSS files, thereby making them load instantly rather than the usual process of loading the page -&gt; loading the CSS -&gt; loading the image. This skips the last bit and embeds the image into the CSS file. Read more: http://johndyer.name/post/Optimizing-CSS-with-Base64-Embedded-Images-with-Bonus-Utility.aspx EDIT: I must point out that obviously you wouldn't be encoding the images for every request, but usually only the first (and let caching take over).
&gt; Adding half a dozen new keywords to work around multiple inheritance stigmas doesn't seem very sensible. 2 new keywords were introduced: "trait" and "insteadof" (named on already existing "instanceof"). The rest are already used within language in one way or another. &gt; And it also looks like this route is taken because it forgoes a Zend runtime extension in favour of a macro preprocessor ("traits are just a copy and paste shortcut"). Yes, but this copy and paste is supported within language level providing some extras like symbol conflict resolution. I don't see how this could work with macro preprocessor.
Nope, nothing like that. We run mailing campaigns and have clickthroughs from popular sites. I'm sure it's just a case of "ooh a form without a captcha, what can we do with that!!!" from some script... I tell you what though... it's bloody annoying as I have 180,000 (115k unique) records to trawl through and filter out the crap. I have been listing IP addresses, so I guess that is going to be the first port of call.. Looks like most of the MX records for the domains are listed on the backscatterer blacklist, but just ran the list through that, and it generated so many false positives it just isn't worth the bother (spent a whole day getting that sorted out)... 
Yeah, although we reserve the right to invalidate any entry we so please, so it's really not helping their case, just costing me another weekend to sort it out before I can update our mailing lists...
Oh neat, I remember wanting to do this 10 years ago and it wasn't possible at the time with gecko as far as I could find... very cool!
Embed in CSS doesn't work in IE7. Does it not support any inline image, or only from CSS is the problem?
I guess it's more of a warning than an error. Of course I have exceptions being thrown in my classes. But sometimes the gist of the method will occur, but I want to communicate that something went wrong, without stopping execution. I guess it serves as a warning log.
&gt; Embed in CSS doesn't work in IE7. Not a problem on platforms where requests need to be kept at a minimum (namely mobile platforms, eg: iOS and Android). Most IE7 users aren't in request-starved environments with high latency. &gt; Does it not support any inline image, or only from CSS is the problem? Only inline-images are supported. CSS base64-encoded images on IE7 (and below) on the other hand aren't supported.
Why do people keep on using fopen(), fread() to read the **whole** file, while you can just do file_get_contents()?
This sounds pretty pointless unless you're seriously concerned about multiple connections. Encoding images in base64 increases the size of them by around three times and probably isn't worth the resources used to create a new connection and send the image separately. What about sprites? And since this doesn't even work with older browsers, newer browsers have keep-alive HTTP support which makes this even more pointless (particularly for dedicated static image servers).
PHP is fun. The reason that I find it fun? Its so easy to just get something up and running. That's why I picked it up in the first place. If you download a package like MAMP or WAMP, you can up and running your first PHP code in 2 minutes with PHPMyAdmin right by your side. Until you find the fun in programming, you will probably not have the patience to work with the "complex"/low level languages. There are many nuances to the language that people will point out, but by the time you come across those you will probably have a good enough understanding under your belt to just shrug it off and give it a laugh. PHP.net is an awesome resource. I write some C# and I find MSDN a nightmare in terms of usability compare to PHP.net. The amount of resources that are out there on the net for PHP is un-matched IMHO. Blogs, forums, frameworks, open source projects, the list goes on and on. I think PHP is what the internet is all about. Its very accessible to techies and non-techies alike, open sourced, utilitarian and community driven. It provides a solid toolbox to build your idea. If you are looking to get caught up in the nitty gritty of programming, maybe its not the language for you. But if you have an idea and want to make it a reality, PHP is a great place to start. C/C++ programmers will be toiling in the basement of their mother's house calculating memory allocations, pointers, and obtuse 'make' error messages while you are thinking about the next feature to add to your idea. Once your idea takes off, maybe then you can come back and revisit the question of PHP being the right language for the job, but till then, lets worry about whats really important. There is a theoretical boundary where PHP might not scale to. But i would argue that 90% of the websites out there wouldn't come close to pushing PHP to its breaking point.
That´s one of the problems Kohana has right now, they are shifting to the version 3 of the framework, which has no backwards-compatibility... And right now the docs are not ready. And you cannot use v2 docs
Ehm, so it's just 2 brand new keywords. The others have been used elsewhere and are now refitted with new semanctic meaning. Multi-use keywords are not exactly better for understandable syntax. However I agree it's way better than the original traits RFC. &gt; .. providing some extras like symbol conflict resolution. Well, traits are described and basically amount to method copy and pasting. But duplicate method names would already trigger a fatal error, there's no need for extraneous support. What I'm saying is that traits add a lot of syntax and semantics just to avoid edge cases. Overlapping functions are not a frequent problem with multiple inheritance, as every Python developer can tell you. Using wrapper methods for conflict resolution is simpler and easier to understand than a convoluted syntax Also, the papers read like traits were designed for compiled languages and not for interpreted scripting code.
A website which requests 22 javascript files talking about reducing unnecessary requests.
This question is probably the best answer. The right languages all depends on what you want to create. PHP, at least starting off, is mainly for creating interactive websites. You'll also need to know about server software (especially Apache), a little Mysql syntax, HTML and at least a little bit of javascript to begin with. You'll also get yelled at if you don't consistently practice "security first" in everything you make. If you want to make applications for Windows, but this is your first leap into the programming world, IHMO learn VB.Net. It's like the training wheels of learning to program. Once you get the hang of it, jump to more advanced/complex languages like C#, C++, or Java. If you want to make applications for Linux, go with Java, C++, Python, or Perl. Most importantly, think about what you want to create, and find and dig through the manuals for each language, looking at semantics, structure, etc, and test out a few "hello world" apps in each, to see if any particular language clicks for you. In fact, [shop around](http://en.wikipedia.org/wiki/Comparison_of_programming_languages).
Folks, don't do this. There are only a couple specific situations where it would make sense to do so. (Small icons, for example.) Remember, the size of the data goes up quite a bit when using base-64 encoding. Plus, there are some compatibility issues.
Bummer. I was hoping it would be something easy to track down and stop. Here's a crazy idea, but may help you filter the list easier. Why not do a check for SPF records on the domains that have signed up. In my experience, script kiddies and scammers don't bother with SPF for the most part and more and more valid email services do. You are going to have some false positives but it could be worth a shot. If your list to go through goes from 115K to 15K you're most of the way home. Here's some PHP code to do it. Hopefully it helps. &lt;?php foreach ($emails as $email) { $temp = Array(); $temp = explode('@',$email); $domain = $temp[1]; $dns = Array(); $dns = dns_get_record($domain, DNS_TXT); $spf_found = false; foreach ($dns as $record) { if (stripos($record['txt'],'v=spf') !== false) { $spf_found = true; break; } } if (!$spf_found) { //delete, put in greylist, etc. } } ?&gt;
and caching.
Suggestion - if you have a method that can execute successfully AND encounter recoverable errors during the processes, you should probably break your code out into methods that do smaller units of work. You can then throw exceptions from those smaller methods, and recover from said exceptions. If you need to log what went wrong then you should log from your catch() clause. E.g. //... public function doWork() { try { $this-&gt;doSomething(); } catch(RecoverableException $ex) { MyLogger::logError($ex); } // rest of method } 
&gt; We didn't want to put a capcha in place because it would be a barrier to collecting addresses This is your problem. The users that refuse to fill out a captcha are also the users who will wrongly fill out a form. You removed a mechanism responsible for weeding out bad data and are now complaining you have bad data. Also, as you are using email as a unique identifier, you can only assure that the entries are accurate up to that point. You can have entries confirmed by email or introduce some late stage authentication such as requiring winners to supply the "Ticket Number" they received when they entered the competition. This validation will only bring you up to the point of "an email is a person". If you're worried about people spamming the system with tons of emails, you would need to rethink what it takes to enter the competition such as requiring a valid mailing address.
That sounds good. Thanks! :) Can you recommend any sites or books for writing good OO code?
What chunks didn't work? It definitely sounds like there was an installation issue. 
Design Patterns FTW. I would recommend any book that tries to explain the original GoF Design Patterns from a PHP perspective. Also Martin Fowlers Patterns of Enterprise Application Architecture (sorry no php examples, still a great breakdown of commonly used patterns for things like ORM and MVC) A good writeup on using exceptions is here: [PHP5 Exception Use Guidelines](http://ciaweb.net/pear-exception-use-guidelines.html) Most php frameworks these days provide some built in logging capability. If you are not using a framework I would suggest looking into using the Zend_Log component as a standalone.
Wow, thanks. I've been looking for that exception guideline forever. Question for you: In public methods, should I use exceptions when type checking arguments?
I would try to rely more on type hinting than exceptions, *but* there is this: http://www.php.net/manual/en/class.invalidargumentexception.php
Yeah, but sometimes I want to make sure it's an integer. You know?
`is_null()` is explicit, it's surprisingly easy to forget to test for identity instead of equality (namely forgetting to put `===` instead of `==`).
fantastic
Knowing me, I'd probably want the one feature that'd push PHP to it's limit &gt;.&lt;
What is the problem? You're displaying the link (first param to printf()) and not using the $imagepath, is that correct?
Sad thing is, if these meetings happened, I'd probably actually go.
replace "get_random_post_url()" with "$imagepath"?
* $text is undefined, as is get_random_post_url(). * $imagepath isn't used - I'm presuming you want to use it as the SRC attribute of an IMG element within the ANCHOR * You're missing a closing curly bracket.
I'm just guessing, but this line is probably what you want: printf('&lt;a href="%s"&gt;&lt;img src="%s" alt="" /&gt;&lt;/a&gt;', get_random_post_url(), $imagepath);
You're guessing wrong, that would just display the string, no &lt;IMG&gt; tag there.
thanks, i am still trying to learn some of the basic rules, i appreciate your help
the best way to learn is to program. so think of something, or find an in-depth tutorial, and build it. i would also recommend learning a framework, like cakePHP et al. 
Would be good if you'd actually linked to a book.
Have you checked out W3Schools? I'm learning PHP as another language but I'm primarily a c# programmer. One thing I'm doing is going through the source code for PHPBB bulletin boards and Drupal and trying my hand at modifying it. So far, I've learned how things work together pretty well. With that said, a Drupal site could be a good one to add to the ol' portfolio ;)
It's a very quick read. Though the knowledge contained within is a bit without substance.
I doubt you really need a book. The basic language syntax like variables, control structures and what not is something you can do in an afternoon. On top of that I'd say read the [pages on OOP](http://php.net/oop5) and keep in mind how flexible arrays are. [There are functions](http://php.net/ref.array) for _everything_. You'll probably be okay learning from the code base that's already in place. If you get stuck, php.net most likely has the answer. The documentation is pretty good (comments are a minefield, though. Some gems, lots of junk) and searchable. If you really get stuck, ask a team mate to point you in the right direction. Unless your team is using a particular framework (if they are, read up on that), it's anyones guess what their coding conventions are. PHP code can differ quite a bit from one mind to the next. Some folks take a more top-down procedural approach, others are very object oriented and framework driven. Some teams care about about strict compliance, others not at all. PHP is really easy, and if that's all you're doing full-time, you'll be fluent within a week.
DO NOT DO ANYTHING WITH THAT 2 OPEN SOURCE PROJECTS. THEIR SOURCE CODE IS MESS sorry for caps, but that 2 ... they just sucks. if you want to learn, try some framework, they tend to have decent coding .. 
Try something with media involved. Make your own imgur/imageshack/etc. Design it properly. Store the media names in a table and look up the locations when you need them. Try learning how to [hash](http://www.php.net/hash) (security) things like passwords, file names, file md5 sums, etc. Learn how to dynamically manipulate the data moving between the database and the user. Also, try learning about what Javascript/AJAX/jQuery can offer you client side as far as improvements on top of either your agent listings site, or whatever your new project might be. Try setting up dynamic RSS on your site to let your readers subscribe to new listing updates. I'd recommend [Codeigniter](http://www.codeigniter.com) if you're looking for a framework to get started on. It uses the [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93View%E2%80%93Controller) approach to moving data and showing pages. Their documentation and speed is top notch as well. 
IMO [PHP.net](http://www.php.net/manual/en/) is all you need. Sorry if English is not your first language.
D'OH!
I feel silly now...book link was added to my original post . :-(
Yeah. I thought the code was rather muddy too. Good to know that this package is not worth the trouble. 
I don't understand. Do you mean there shouldn't be an image tag?
Write a simple content management system. It's something that will come up a bit in the future, and it's pretty easy thing to start with. Basically, just create a system where you have a back end and a front end. On the back end you make changes to the content, and on the front end it displays the content like a normal website.
PHP is easy as hell because it is so pliable and if you're coming from C#, you should be able to pick it up in no time. 
No, there should be an &lt;IMG&gt; tag, your example would output: &lt;a href="SOME_INFO_RETURNED_BYGET_RANDOM_POST_URL()"&gt;http://i.imgur.com/lqUW2.png&lt;/a&gt; I guess that is not the goal.
Talk to your mother/father/family member/friend/whoever about their data and problems related to it (collection of books/stamps/whatnot, gardening, cooking, taxes, family tree, ...) and what their most ideal solution would be. Start coding implementing one of those ideas/problems. If you need the pressure, tell them you're building something for them.
What are you trying to accomplish with filtering by categories and tags? Unless you're trying to say something else entirely, I've done this many a times. For speed boost, use either W3C Total Cache or WP-Super Cache.
I'm already doing it by using TDO tag fixes. Essentially I'm talking about being able to filter by category and then tag: http://example.com/category/tag/ In wordpress it's *easy* to do *http://example.com/category/* **or** *http://example.com/tag/* But it requires a plugin to do both. Edit: Already using W3C, and it's helped - just not as much as I would like in an ideal world
don't write your own CMS if all you need is a CMS. imo. if you're writing something that is real, real custom, then I can see rolling your own. but if it's a straight cms, you're just making more work for yourself. also, if you stick with Wordpress (and use standard Wordpress approaches), developers that come after you will love you for it. now, having said that, if you are really hell bent on using something otehr than WP, use another (less popular) platform to build a couple of sites. Joomla, for instance. 
Disregard people who say you don't need a book. Naturally you'll be fine without one, but a good book will always be a good guide. I can't offer advice on that book. The only PHP book I read was [this](http://www.amazon.com/Advanced-PHP-Programming-George-Schlossnagle/dp/0672325616) and while I recommend it I'm not sure it's the best for beginners (although I'm sure they would benefit tremendously). Also, it might be a bit dated.
What I'm *especially* keen not to do is overcomplicate this. I'm not looking for a challenge, just the best option for my business. The site in question currently makes use of the facilities available in Wordpress &amp; through extensions, but new 'problems' keep presenting themselves &amp; it's getting harder to justify continuing with the platform as it wasn't really built to deal with. New bit's we're talking about include: * Full customer CRM * eCommerce with multiple payment processors * iPhone application integration of data I mean, WP *can* do all of those things, but is it the *best* way to do them? 
Their problem, not yours.
I have yet to see a CRM that is any good. it's a constant complaint from our clients, and I see them move around to different solutions at least once a year. we could have bid multiple times to develop CRM solutions that integrate with their customer-facing website, but I was pretty vocal about what a hassle that would be. as for ecommerce with multiple payment, I suggest taking a look at "magento". it does have some flaws, but it is a great FOSS platform. as for iphone, I have no opinion really. also, take everything I say with a huge heap of salt... I'm currently the only developer here, and there's probably enough work for at least 2 full time positions. in the right situation, with the right team of people, there's no reason why you couldn't make a kick-ass system that does what you describe.
One word... Drupal.
That might be true for small integers, but not larger integers or floats. A 32-bit unsigned integer is 4 bytes and can store values from -2,147,483,648 to 2,147,483,647. As a string, these values would require 11 and 10 bytes, respectively, plus n bytes for the commas and null terminator, plus overhead for string concatenation, exploding and conversion to integers (which, if PHP's array implementation is sane, should take a LOT longer than simply storing an array of integers).
Why is the parent post being downvoted? Is it the caps? The grammar? I haven't looked at the Drupal code, but I can vouch for the phpBB codebase being a pile of arse. Sure it's understandable, and I could get it to do what I wanted, but I certainly wouldn't recommend it as an example of good code for someone wanting to learn PHP.
Can't really comment on the book apart from to warn that PHP 5.3 isn't widely supported by most hosting companies yet (most of them are still offering PHP 5.2.x). You mention that this is for an in-house team - you might want to check with them on this. Anyway - if you're an experienced developer and know the basics already, then your instincts and the reference manual that is php.net will probably be all that you need.
Magento is great so long as you don't try to customise too much. The lack of documentation and debugging tools will have you tearing your hair out for days trying to find the simplest answer to a problem.
Finding the CRM sweet spot is an ongoing challenge. The CRMs out there either focus in a sales force, or focus on getting donations in from people. There is virtually nothing that is a generic "customer relationshio management" system that does not assume you are constantly trying to sell things.
Now you're just silly.
Wordpress 3 [custom post types](http://codex.wordpress.org/Custom_Post_Types) are a wonderful addition that makes WP an excellent platform to work on. I'm sure if you become familiar with them you'll start to see how easy they can make your life (when you need to add some extensibility).
Book/CD catalogue, for yourself, and then for other people (add a user-table with login). File editor with which you can edit the files that make up your website - and the file editor itself (directory listings, viewer, editor, file upload, syntax highlighting, etc). This is usually the first real thing I write in middleware. MVC CMS. Or you could just dig through the function reference and see if there are things you'd like to play with (image generation, CLI scripts, ID3, etc). And scratch an itch!
I really think you just need to get more proficient in Wordpress and build/customize plugins for your site. What it sounds like is you have built a very customized setup. You need to embrace that, with the understanding that you can make things work better, even if it makes your upgrades a bit tougher to implement (vs the one click way you might be used to). Any of the cms you have mentioned have learning curves and limitations of their own. While joomla or drupal might do a certain thing better than Wordpress, they are likely to fall short in other areas. Using something like Zend framework will be a lot of work, pretty much a total re-write of your entire platform. That is a major commitment of time and money. It also has a steep learning curve and you will have problems along the way. &gt; How far removed from the Wordpress ethos is it? For someone whose been locked into WP since 1.5. It'd be like learning to write in hieroglyphics. Especially if your strength is front end and not writing custom php. Also, Zend is a framework, not a CMS, big difference. &gt; Overall speed performance of the platform You'll hit that wall with Joomla and drupal as well. Same with Zend if you aren't used to writing real solid code with it. Better to improve your current system to work better. My advice is to customize your plugins, minimize your plugin footprint by merging them (where applicable), removing any unnecessary cruft that you don't use. Modify your wordpress to work how you need it to instead of modifying how you work to fit in with how your WP plugins work. You need someone who is very familiar in writing custom code with wordpress, doing so in a way that is more efficient than the customary wordpress way. Wordpress is made for ease of use, not performance, that includes a lot of the tools that are usually used for writing plugins. That is great for use "out of the box" and being able to install a bunch of plugins easily. But not for when you need to be able to get better performance.
Build an ecommerce site, with a back end. Learn how to install shopping carts. 
I'm Pretty familiar with this, but making use of Custom fields &amp; generic post types actually suits what we're doing pretty well... Things might change of course, but at the moment we're pretty comfortable with posting content itself. 
Sorry, but I *really* haven't enjoyed working with Drupal - did a couple of builds, found it incredibly confusing &amp; not terribly well suited to my building style. 
You May be right. I mean, Wordpress itself I know *really* well - but the more advanced side of things is what I generally struggle with. Building out &amp; optimising custom plugins would be included with that. Is it worth hiring somebody to look over what we've got? A PHP/Wordpress consultant? Quick Edit: Just to clarify, I really think my knowledge of WP is being let down by my lack of knowledge in PHP. I think I really need a steer in the right direction with this. 
Yeah I mean we *are* constantly trying to sell things, heh. To be fair, I need to do more investigation into Wordpress CRM's, I'm not familiar with what's out there. 
You can either do a link or top text not both.
This seems unlikely. Can we see the code used for benchmarking?
Magento
&gt; Already using W3C, and it's helped - just not as much as I would like in an ideal world * Have you optimized your site according to YSlow guidelines? * Are you actually experiencing load issues? If so, are you running it on a shared web host? 
i dont know but it happens to me often. i am non english speaker and all i know about english i have learned from tv shows and internet so ... oh yeah, and i tend to have different opinions than the rest ... and i dont care about karma .. so ... fuck 'em :) 
For web developers that want a framework, and not just a blog, drupal is the way to go. Once you actually understand how drupal is made and why it's built that way, your website systems will really start working they way they should.
I Hadn't had a look at YSlow, but I have now - It's come up with a few things to take care of, a couple of which I could get done pretty quick - Thanks for that. It's on a dedicated box, shared with around 6/7 other sites, none of the others receive terribly high traffic as they're used for content syndication &amp; delivery. 
I agree, please share your research.
if you want to use it, its fine forum software, and drupal might be ok cms, but developing for it/modifying it is pain. 
Definitely one of the hardest parts of learning to program or building a portfolio to get into programming as a hobby and career is coming up with ideas. Try things like creating a web forum, news aggregator (think Reddit), social networking status update, etc. Basically, go to any site out there and try to replicate it. The goal isn't to make "the next big thing", but to learn. When you're "done", you'll have learned a fair deal of the language/framework/etc to help you go onto other projects. Or you might have had a spark of imagination during the creation and put your own spin on it, and you end up making that project your baby. I know of a few people who use college semester projects and don't put much thought into it until they're halfway through and fall in love with their creation to the point that after the semester they continue on and end up turning it into an actual venture. As far as "practical" example books, the Heads First line usually has a project or 2 throughout the book that are more "real world" and useful for picking bits and pieces for your own projects. Very basic stuff they tend to teach, but also very practical.
Very true, the only downside is the learning curve required to get proficient, even more so if you're looking into module development
WordPress 3.1 (whose first beta is expected soon) can do that: http://example.com/?cat=foo&amp;tag=bar See the main ticket for the multi-taxonomy queries: http://core.trac.wordpress.org/ticket/12891
 if(!is_int($myParam)) { throw new InvalidArgumentException("param must be an int"); } Also, check out the rest of the SPL. It is *sexy*
Good to know, thanks for this. 
&gt; Encoding images in base64 increases the size of them by around three times 30% != 300% Other than that, I agree with your post.
It could be possible because there would only ever be two arrays in memory at a time (The top level array, and the one currently being used. I'm guessing the script simply looped through the top level one, and did something with each array within. Arrays are memory hungry beasts compared to strings.
and everybody has their own idea what CRM means, sales want one thing, admin needs another. It ends up as a clusterfuck eventually
"7e4" == 70000 //will return true
Good deal. Let us know how the tweaks go. Now, as for my other question, are you noticing slowness? How are you noticing it? From you machine, via benchmarks, complaints from users? If you are noticing performance issues, specifics are necessary. If you're not, I have to ask why you're worried enough to consider moving platforms. It's not an insignificant undertaking, and you very well may be wasting effort unneeded. 
I think it would be best to find a strong php programmer to help you. Someone who knows wordpress, but that isn't the only thing they do. The reason I say that is, you need quality code that will integrate with Wordpress, not necessarily just Wordpress code. Wordpress, especially when using a lot of plugins, carries a lot of overhead. You need someone who can cut that down, merge files to reduce repetitive use of hooks, cut out the crap and can do it without making a buggy mess. On the admin side, if you use plugins, it is best to loosen them a bit. By that I mean admin plugins should run on their own infrastructure and only loosely tie into wordpress. This not only will give you better performance, but if you do move platforms in the future, it will be much easier to port code.
$str = 'Test 1'; $str++; // === Test 2
[It's true!](http://codepad.org/cQkchib5) I didn't think that would work. Why does that work?
"$this" bleeds in to static calls to non-static methods. This is documented behavior, but I'm still counting it as a quirk, 'cause it's probably not something you run in to every day. &lt;?php $od = new Dummy( ); $od-&gt;DoIt( ); class Dummy { function DoIt() { OtherDummy::DoIt( ); } } class OtherDummy { function DoIt( ) { print get_class( $this ) . "\n"; } } $ php test.php Dummy This happens with PHP 5.2 and 5.3. Not sure about other versions.
For strings, it increments the ANSI value. Sort of a base 26/36 increment depending on characters/numbers mixed in. Try `$str = "z9"; $str++;`. Too bad no `$str--`.
That's cool, it's not for everyone, there is a fairly steep learning curve, not nearly as bad as people make it out to be though. The main thing I really like about Drupal over WP for small projects is that everything I develop feels much less hacky. Drupal's hook system allows you to customize anything and everything is a sustainable way. Wordpress of course has a good plugin system too but I find when I build a project in Wordpress I end up with a good working site, but not a lot of re-usable code. If I make something in drupal I find I end up with easily re-usable custom modules that can be contributed back, or used later. And of course drupal seems to meet the needs you outlined very well.
The slowness comes from benchmarks in Google Webmaster Tools &amp; some other site speed tests. It's also noticeably slow when browsing at times. No complaints from users, but our bounce rates are a little higher than they should be. I'm not freaking out about continuing to use WP - just want to make sure that to some degree at least, we're future-resisting - or at least building elements that can be reused in the future rather than being locked into any one particular platform. I would imagine that continuing to develop on WP, then realising a year down the line that we really should have done something different will be harder to change than switching sooner, before we've developed countless other components. 
We've tried to stay away from plugins wherever possible, but of course it's not always possible to avoid them. We haven't got tons of admin plugins running - A few sure, but again we've tried to keep it down to a minimum. Prettylinks, Newsletter Pro &amp; Custom Field Template we use religiously &amp; most likely add the majority of the bulk. Hiring a developer is a good idea though - I'll speak with some of the contractors we've used and see if they'd be interested in doing a clean-up session. 
I got pulled kicking and screaming into the Drupal world. I resisted for years. But when I finally started getting to know it, it made a HUGE difference. Yes it is more difficult in the beginning, but once you get familiar with it, it just works and feels so much more fluid when doing advanced functionality. Edit: Plus you gotta love the command line magic with Drush.
That's not really a quirk, since it's [documented](http://php.net/manual/en/language.operators.comparison.php) and on par with PHP's dynamic nature... 
Do you have a link to the site so we can look at it?
This: $arr = array(1, 2, 3, 4, 5); foreach ($arr as &amp;$x) { echo $x, ', '; } echo "\n"; foreach ($arr as $x) { echo $x, ', '; } echo "\n"; That outputs: 1 2 3 4 5 1 2 3 4 4 It's not hard to see why it happens when it's laid out plainly like that (it's [even documented](http://php.net/manual/control-structures.foreach.php)), but this was part of a big and complicated script and I was trying for two hours to diagnose what seemed to be a bug in PHP. Grrr.
http://php.net/manual/en/language.oop5.late-static-bindings.php
Oh and this: misuse of references: $s = str_repeat('Hello Reddit World', 10000); function doSomething($s) { return strlen($s); } $t = microtime(1); for ($i = 0; $i &lt; 100000; $i++) { doSomething($s); } printf("Done in %.2f seconds\n", microtime(1) - $t); function doSomething2(&amp;$s) { return strlen($s); } $t = microtime(1); for ($i = 0; $i &lt; 100000; $i++) { doSomething2($s); } printf("Done in %.2f seconds\n", microtime(1) - $t); function doSomething3(&amp;$s) { return strlen(&amp;$s); } $t = microtime(1); for ($i = 0; $i &lt; 100000; $i++) { doSomething3($s); } printf("Done in %.2f seconds\n", microtime(1) - $t); Output: Done in 0.74 seconds Done in 58.51 seconds Done in 0.74 seconds Moral of the story: PHP's references are to be used only when you need to modify the value pointed to by one variable in another place. Don't try to use them to improve performance; it doesn't work. For explanation, see: [http://www.php.net/manual/features.gc.refcounting-basics.php](http://www.php.net/manual/features.gc.refcounting-basics.php). (Edit: I added a third example to make clear that references themselves are not slow, just the mix of passing/assignment-by-value and passing/assignment-by-reference.)
well from my http://www.phpgolf.org experience: $r = '&lt;?echo ~'.(~"Hello World!").';'; file_put_contents('hw.php',$r); if you few hw.php it will contain some ugly bytes, but once ran, it will print Hello World! woohoo! Oh using ~ is the same as in c, it negates a byte and in phpgolf it eventually saves you 1 byte per string! very usefull to get the upperhand! 
I just checked it out. I am mostly replying about the speed aspect of the site. From what I saw, it's not really THAT slow but a few things I noticed: - You're pulling images from remote sources and they're not really optimised at all. ie: on the frontpage, [this](http://cms.keynoir.com/files/2010/11/GC-Main.jpg) could easily be a 18kb file instead of 90kb even at that same size. If you grabbed those images and thumbnailed it and stored it on your server it's more likely to be around 5-8kb. Same thing for a lot of the other images. There's a PNG of the Fiat logo at around 55kb. I did also notice you were pulling 2 copies of jquery.. a minimised version and a non-min version but both were 1.4.2. I also ran Apache Benchmark (from Australia, so take it as a grain of salt). Concurrency Level: 5 Time taken for tests: 73.775 seconds Complete requests: 100 **Failed requests: 82** (Connect: 0, Receive: 0, Length: 82, Exceptions: 0) Write errors: 0 Total transferred: 13578838 bytes HTML transferred: 13533238 bytes Requests per second: 1.36 [#/sec] (mean) Time per request: 3688.773 [ms] (mean) Time per request: 737.755 [ms] (mean, across all concurrent requests) Transfer rate: 179.74 [Kbytes/sec] received Connection Times (ms) min mean[+/-sd] median max Connect: 394 397 6.5 395 451 Processing: 2995 3239 474.8 3077 5911 Waiting: 1000 1214 469.5 1051 3838 Total: 3390 3636 474.7 3472 6306 Percentage of the requests served within a certain time (ms) 50% 3472 66% 3504 75% 3601 80% 3650 90% 4018 95% 4599 98% 5875 99% 6306 100% 6306 (longest request) The worrying thing here is that 82 requests failed, partly why I only ran 100 requests as I didn't want to crash your server. Have you considered running wp-supercache? The way it works is that it basically caches your pages as compressed html pages. Typically you will see a server that could handle 10 reqs/ps go to around 1700 reqs/ps using it. It's pretty straight forward. Install and it adds some lines to your .htaccess and relies on mod_rewrite which you're obviously using already.
Garbeld on my printer. Any idea why?
Yep It took me many tries before something finally clicked. Now it all makes sense. Nothing beats Drupal's community.
also look into serving your static content from a cookie-less subdomain.
What's your level? http://www.amazon.com/PHP-5-Objects-Patterns-Practice/dp/1590593804
Have your entry script send them an email with a link to click to verify their email address prior to accepting the entry. 
Go download a framework like Kohana or Cake and take a peek under the hood.
As much as I love Cake, it's still PHP4 compatible so they don't quite use all the new things. Lithium on the other hand is 5.3 based so it uses a lot of the bells and whistles.
I noticed the width of the div was pretty touchy.. I had to play around with barwidth and barheight quite a bit with the css rendering barWidth:1, barHeight:40 etc.. maybe one of the other render methods would work better for you. (svg) 
I tend to forget sort() returns boolean instead of returning the sorted array.
This can only be used badly. What evildoer would increment text? Down with this sort of thing. 
See, this is what I was concerned about. It's easy to pick up old or outdated habits, and if I just downloaded Cake and thought to do what they did, then I would be misleading myself. Thank you.
With respect to the other comment, this doesn't have anything to do with late static bindings (how could it in 5.2?), or even static methods for that matter. I made `OtherDummy::DoIt()` explicitly static and `$this` is no longer defined when invoked from `Dummy::DoIt()`. If you remove `$this` and simply call `get_class()`, it will return "OtherDummy" as both a non-static method called as static and static method called as static.
Beware of extract. class Example { public function woops( array $config ) { extract($config); return $this; } } $example = new Example; // Returns instantiated class reference $example $config = array('ok' =&gt; 'sure'); var_dump($example-&gt;woops($config)); // Take a guess what this returns ... $config = array('this' =&gt; 'well, shit'); var_dump($example-&gt;woops($config)); 
Get Zend Framework and Symfony, those are widely considered to be some of the most well designed frameworks. Zend Framework is more an example of what was/is current practice (2.0 isn't far enough along yet to glean architectural ideas from) and would probably be the best example of 5.2 design practices. In particular Zend's unit tests for the project itself and the frameworks integration with PHPUnit are to be paid close attention to. As well the mostly decoupled nature of the system bodes well if your'e trying to learn good OOP architecture, and their components like Zend_Form come straight out of the pages of Design Patterns. With Symfony it is really best to focus on their use and implementation of dependency injection. Their DI container is very nice and Symfony's widespread use of it is something to learn from. Lithium is new, is trying out new techniques, and made some controversial design decisions (though "standards" haven't really been agreed upon yet). Namely they've come under fire for using static methods as much as they do when the community is shifting away from them due to their inability to be adequately unit tested. Also, Doctrine 2.0 is a great example of what 5.3 can provide, especially their work into the annotations driver. If you really want to see 5.3 pushed to the limits, Doctrine 2.0 is a really good example to check out (though you won't find too terribly many examples using closures).
Performance wise you're **much** better off using isset($array['key']) to see if something is in an array than using in_array($val, $array) Of course this requires that you create your arrays with your values as keys, but if you're doing a lot of checking for a value in an array, it's substantially faster.
You can use constants within strings, as array keys at least: $foo = array('a','b',42 =&gt; 'World'); define('bar', 42); echo "Hello {$foo[bar]}"; // Hello World Or let's say you want to execute a function within a string. Yep, you can do that too: $exec = "shell_exec"; $cmd = "ls -l"; echo "This is embedded exec: {$exec($cmd)}"; 
See Also: http://www.phpwtf.org/
Take a look at [Cake 2.0](https://github.com/cakephp/cakephp/tree/2.0). It is basically a rewrite of Cake to be PHP 5.2 based (They decided early on not to jump straight to 5.3 due to the relatively low adoption rate)
Try [Symfony Reloaded](http://symfony-reloaded.org/). It uses the newest php5.3 features and is an excellent framework. This version is still in beta though, so it's great for learning but less so in production. If you want a production version, which works with older php versions, try their [main site](http://www.symfony-project.org/).
&gt; Arrays are memory hungry beasts compared to strings. Citation?
you'd think there would be some kind of central repository for stuff like this. Books are too static so they're no good.
Another example of this: &lt;?php $permissions = array( 'Basic Read' =&gt; 1, 'Full Read' =&gt; 2, 'Write' =&gt; 4, 'Delete' =&gt; 8, 'All Privileges' =&gt; 16 ); $people = array( 'Group 1' =&gt; 1, 'Group 2' =&gt; 14, 'Group 3' =&gt; 16 ); foreach ($people as $k =&gt; $v) { foreach ($permissions as $k2 =&gt; $v2) { if ($v &amp; $v2) { echo $k . ' / ' . $k2 . ': ' . ($v &amp; $v2) . '&lt;br&gt;'; } } echo '&lt;br&gt;'; } will give you: Group 1 / Basic Read: 1 Group 2 / Full Read: 2 Group 2 / Write: 4 Group 2 / Delete: 8 Group 3 / All Privileges: 16 
In that case, look at [Lithium](http://lithify.me/). It's a fork of early Cake 3.0 done by some of the lead developers. PHP 5.3+
This is a great book - exactly what he needs. Also PHP5 Recipes in that same series is also good.
I respectfully disagree with you, good sir.
maybe that was rather final. Books are good only for a certain period before they become outdated.
That's how it works in C, and is perfectly acceptable.
downvoted for suggesting the best way to learn is to program. this is why php sucks - the lazy fucks learning it just want to strap a bunch of libraries together and copypasta their whole way thru a project. good luck, maybe if you grow a sack you'll learn a real programming language.
Shit like this, PHP. Shit like this.
I'd also check out talks.php.net, they usually keep it updated
So, if I understand correctly: really it didn't demonstrate that the arrays were slower at all, except insofar as if you have an unlikely giant number of arrays, you'll hit the RAM ceiling sooner.
Drupal isn't [really a full MVC](http://archivemati.ca/2006/01/21/drupal-as-a-mvc-framework/). If it is too in depth for you then your only other real (php) options are wordpress and joomla.
On another note, I came from C# to PHP.. You'll be fine.. not sure you even need a book. Dive in, give it a go. If you're a pretty well-seasoned C# developer then you'll find it pretty straightforward. Just remember, a lot of legacy code (including frameworks, open source projects etc) is coded to a much lower standard than C# code generally is.. by which I mean there are a lot more bad practices lurking about.
Only mentions actual profiling and benchmarking in passing. Focuses on micro-optimizations. Suggests Apache 1.3, unsupported for years. Ignores lighttpd, nginx and other high-performance web servers. Mentions PHP6. Conclusion: Article is out of date and should not be trusted.
**Big Fat Warning:** PHP can't represent integers over 32 bits in size in a cross-platform way. Always check `PHP_INT_MAX` before dealing with bitwise operators if there's a risk of hitting 32 bits. On 64-bit systems, `PHP_INT_MAX` is 2^63, while on 32-bit systems, `PHP_INT_MAX` is 2^31. This means that if you use bitmasks for, say, a permission system (such as the example posted here), you're effectively limited to 31 groups and 31 permissions if you need the script to reliably run on someone else's system. Well, 32 if you want zero to count.
Nominating for the Most Useless Article Award. Nominating for the Most Useless Use of PDF Award. Nominating for the Most Unhelpful Reason to Quote an Integer Because You're Just Going To Do Math On It Award.
Its the same thing in this case, but imagine this: $simpleXMLDocument-&gt;{'line-item'}; The property "line-item" has a hyphen, which isn't allowed in PHP identifiers. So instead of accessing the property by an identifier, you access the property by a braced string.
Let's find out! [mcg@mcg-workstation ~]$ php --interactive php &gt; class Foo { public $bar; public function baz() { echo "I think I bazzed myself.\n"; } } php &gt; $foo = new Foo(); php &gt; $foo-&gt;bar = 'Bar!'; php &gt; echo $foo-&gt;{'bar'}; Bar! It's a funny way of saying: php &gt; $something = 'bar'; php &gt; echo $foo-&gt;$something; Bar! This also works: php &gt; echo $foo-&gt;{$something}; Bar! The curly syntax is most frequently seen inside double-quoted strings as a way to separate the variable name from a string that it needs to be right next to: $noun = 'PHP'; $verb = 'bark'; $time = 'midnight' $interpolated = "The {$noun} {$verb}ed at {$time}"; As you might be able to guess, you can also do things like this. php &gt; $foo-&gt;{'baz'}(); I think I bazzed myself. php &gt; $something_else = 'baz'; php &gt; $foo-&gt;$something_else(); I think I bazzed myself. This is only the tip of the [Variable Variable](http://php.net/manual/en/language.variables.variable.php) iceburg. php &gt; $vv = 'Variable'; php &gt; $w = 'Variable'; php &gt; $VariableVariable = 'Oh snap!'; php &gt; echo ${$vv . $w}; Oh snap! 
FWIW, this is pretty much the only time that you'd ever want to use curlies and quotes to access an object property in the real world.
Fails for failing to mention that the zip extension is non-standard.
And it allows this to work: $test = 'a-b'; $$test = 'c'; echo ${'a-b'}; Go crazy with the variable names.
A great practical application (in C) is when you want to know the value but you have a character, for instance you start with `'7'`: '7' - '0' = 7
time and time again, i try to justify variable variables, and time and time again, i find myself screwing myself over in the long run and having to rewrite it
Or you could use Symfony, and actually be able to write PHP and get an application deployed quickly.
Whaaaaa???? That's the most confusing thing I've ever seen!
I've actually made use of them many times and find them extremely useful. There's been times I've wished other languages supported them.
I'm fresh out of Polytechnic (almost a year ago now) with a Diploma, and we didn't cover much programming in my studies. I have a small amount of knowledge with Visual Basic and C#, but that's about it. I'm actually wanting to become a decent programmer, so I don't want to limit myself to PHP (would be interested to get into Android apps etc). Thanks for the advice, and are you able to recommend anything that will help me? I don't really want to take any shortcuts.
The guy can only count to (2^20 - 8001) in binary using his hands/feet? Does he have deformed feet or something?
Also fun, [variable functions](http://php.net/manual/en/functions.variable-functions.php).
Awww, I was hoping my function to return the numerical equivalent of an excel column name was the most confusing. function b($b){$l=strlen($b);while($i&lt;$l){$c+=(base_convert($b[$i],36,10)-9)*pow(26,$l-1-$i);$i++;}return $c;}
There's a reason why php is 100x times slower than C++ :) Check this out, I've read just about the whole thing! http://shootout.alioth.debian.org/ Still, in the end, I agree. PHP has a lot of nice things, but I just haven't really fallen in love with variable variables yet.
That's why you never use that aspect of the PHP language (variable variables) in practice. The only purpose for the braced property syntax is to access a property whose name isn't accessible as an identifier due to a poorly designed API (I'm looking at you Simple XML). As for variable variables, this is one of those aspect of the language that's deeply regretted, along with syntax configuration (short open tags), magic quotes, register globals, strip_slashes, @-based error suppression, and safe mode. Don't be surprised when a future release of PHP totally drops support for the construct, or starts filling your log files with depreciation notices. Which means, use at your own risk, and with the knowledge that your application will eventually need to be rewritten. Variable variables should be relegated to use in shitty interviews and even shittier certification exams, but never used for anything intended to be taken seriously.
I'm a college drop out. Stopped going to classes 1/4 of the way through the second semester freshman year. Ended with a 1.2 GPA. But now I'm fairly happy I did so because I only gathered around $2.5k in debt and making more money than some buddies who did graduate (read: all). I say this just to point out that going to school really has had no effect on my ability to program and make a living from programming. I'm not the best, but I am self-learning all the time. As for advice: Some people will say to learn multiple languages at once. I would recommend you simply dive into PHP and learn it inside out. It'll take you a while. Then, once you're comfortable, move on to another language. Or start with a different language from the outset. I just think that unless you're coming from a Software Engineering school and have a bunch of class time with programming theory, trying to juggle multiple languages at once may be too difficult to handle at the beginning. Android apps are written in Java, which is purely OOP. PHP is procedural and OOP, but if you have a deep understanding of either language, then picking up the syntax of the other and learning the ins and outs of it becomes much easier than if you're simply starting from scratch.
Pretty awesome answer!
Yet at the same time you can crime up something 100x times quicker in PHP than in C++. It all depends on *what* you optimize. ha
I think it's a good feature though. The metaprograming powers of php, because of this, is astounding. 
Thanks for the advice. And yes that's basically what I'm saying - I haven't done much programming so I want to get into it! I'm going to also be learning MySQL and JScript - Would you recommend learning these after I feel comfortable with PHP? 
You can't store anonymous functions in class variables, static or not, in PHP 5.3.3. I wrote about it [on my blog](http://blog.meltingice.net/programming/tonights-wtf-with-php-and-anonymous-functions/), really annoying when developing some more advanced PHP applications. 
ha? This isn't a contest. And also, I disagree with your development time factor. C++ may take more time, but in the end it's not going to be anywhere near a factor of 100. I do not believe you have any empirical evidence to show otherwise.
Also you would use it to ensure proper order of precedence. Here is one I came across recently, that caught me out. A property on an object contained an array. The object name was in a variable, and to access element 0 of that array, this was used: $MyObject-&gt;{$SomePropertyName}[0] That is not the same as this in the slightest: $MyObject-&gt;$SomePropertyName[0] The array index binds tightly to the SomePropertyName variable, which is a string, and so is treated differently (element 0 of string "bar" is "b"): &lt;?php $obj = new stdClass(); $foo = 'bar'; $obj-&gt;bar = array(0 =&gt; 'hello'); $obj-&gt;b = 'world'; echo $obj-&gt;{$foo}[0]; // hello echo $obj-&gt;$foo[0]; // world ?&gt; 
Haha, yeah. :) It's a great idea to get a solid understanding of all the general concepts first. They you can apply them to any language that you learn. Loops, arrays, etc. Good luck on your mission!
Cheers mate :). I've bought a book called [PHP and MySQL Web Development 4th Edition](http://www.fishpond.co.nz/Books/Computers/Server_Database/General_Database/9780672329166/?cf=3&amp;rid=118505323&amp;i=2&amp;keywords=php), hopefully that does the trick! Then from there I'll just check out PHP.net and tweak my code :)
http://www.tuxradar.com/practicalphp
This is pretty much useless because the scalar type hints are unchecked. Furthermore, if they add this functionality now like this they'll never be able to make scalar type hints work because it'll break backwards compatibility for code which uses these hints but expects them not to do anything. I don't understand why scalar type hints would be that hard; just make them identical to doing a cast of the parameter to the specified type. 
&gt; I don't understand why scalar type hints would be that hard Neither do most people outside of php-internals. The php-internals folks want to make the hints do incredibly stupid things like fatal when there's a type mismatch, and then think that's a bad idea, so they don't want to do it. As usual, it's the people in charge that are holding progress back.
[No. No, no, no](http://www.tuxradar.com/practicalphp/7/4/5). Teaching XSS practices out the gate.
I found [w3schools](http://www.w3schools.com/php/default.asp) and [tizag](http://www.tizag.com/phpT/) to be very useful when I was learning PHP. Good luck!
I think there's a lack of understanding about what PHP programmers actually want and need. I don't know if it's because php-internals developers are more C programmers than PHP programmers or what. It should be pretty obvious how to make scalar type hints work. They absolutely should not do a strict comparison.
I checked out your blog, and I don't agree with your conclusion. Variable initializers in PHP must be constants (so they can't be arrays, anonymous functions, results of functions, etc). So you can't *initialize* a static variable to be an anonymous function, but that doesn't mean you can't store them in there. Did you try: class MyClass { public static $some_var; public static function do_something() { self::$some_var['first'](); } } MyClass::$some_var = array( 'first' =&gt; function($data) { echo "ohai"; } );
What about array_key_exists('key', $array); vs the other 2? *EDIT: Someone [benchmarked them](http://www.php.net/manual/en/function.array-key-exists.php#82867), isset() is still faster than array_key_exists as well.
The problem is that you basically have two camps with regards to scalar type hinting: those who think the hints should error out if an invalid value is passed, and those who think PHP should try to cast the value and do its best from there. (Well, there's also a third camp: people who think scalar type hints are just a bad idea period.) Internals is pretty much split down the middle, hence the compromise that's likely to end up in 5.4. Sadly, as is typical for a compromise, it really doesn't satisfy anyone.
Sorry, I really wasn't trying to sound unpleasant or arrogant, I just didn't agree/believe.
 function foo(string $bar, int $baz) {} function foo( (string)$bar, (int)$baz ) {} Problem solved. A viable argument against this would be the cast looks silly. 
Well I stole that number from your comment. Where you've pulled it from, I don't even wanna know.
What he said. Also, the type hint code in current SVN trunk (5.4) was not really discussed nor agreed upon, but rather, it's something a few people liked so committed. A long story with plenty of variables but this is important to realize. Personally I don't understand the "no way" some people feel when considering to allow both methods. To me, it'd be like how PHP has strict and loose type checking today (== vs ===).
I don't understand how that can be a debate. The casting behavior is useless. The variables will get typecast anyway when they're eventually used. The point of type hinting is to catch the situation where you've screwed up the semantics (like you're passing a string when the function expects a boolean) and to catch it *as close as possible* to where you went wrong, so you can fix whatever is the flaw in your logic. It works great for objects. Why would they not think it will work for scalars? 
At the gym
Exactly. They already allow for type hinting of arrays, which are by no means objects, why not use the same behavior (no casting, but loose checking along the lines of is_array) for the rest of the primitives?
You might like to consider a full-blown ORM. Doctrine and Propel are two I've used, and both are actively developed. Both have nice "behaviors" that work with hierarchical data. * [Doctrine 1.2's Nested Set Behavior](http://www.doctrine-project.org/projects/orm/1.2/docs/manual/hierarchical-data/nl#nested-set) * [Propel's Nested Set Behavior](http://www.propelorm.org/wiki/Documentation/1.5/Behaviors/nested_set) I must say I haven't used either with Zend Framework. I guess it's decoupled "library-like" nature might make it easy to integrate with an ORM and other libraries. But it definitely means sometimes you have to look for third party stuff yourself. (e.g. [this](https://github.com/stem/ZF_NestedSet), which I haven't tried myself) I usually use Symfony, which takes a slightly more coupled, convention-based, monolithic approach. But it has batteries included. :-)
In a plane, on a train?
A starting point for research would be [this site](http://php.opensourcecms.com/).
The best solution is consistency. Pick one and stick with it. Even better is if it's a convention that's already being used or somewhat popular. Following the Zend conventions is not a bad idea. They're fairly consistent. And although it's easy to quickly dismiss it as silly to capitalize letters at all, it's really helpful to be as unambiguous as possible when it gets to things like: XMLtoJSON vs XmlToJson Of course in that case `XMLtoJSON` is still quite reasonable. But when you get project names like jQuery, it gets interesting: jQuery vs JQuery vs Jquery Which is it? Your convention should be clear on that. It's not a big issue when it's just you working on your own project. But it can easily become frustrating when you're dealing with a team of people that each have their own preferences "because they like it," or "it looks good to them."
I think what you are looking for is the hidden container prefix ('__' by default). [1] To do away with the root element: &lt;?php require_once 'XML/Query2XML.php'; require_once 'MDB2.php'; $query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests')); $dom = $query2xml-&gt;getXML( "SELECT artist.*, NULL as null_column FROM artist", array( 'rootTag' =&gt; '__root', 'rowTag' =&gt; 'artist', 'idColumn' =&gt; 'artistid', 'elements' =&gt; array( 'artistid', 'name' ) ) ); header('Content-Type: application/xml'); $dom-&gt;formatOutput = true; print $dom-&gt;saveXML(); ?&gt; Furthermore, to run multiple unrelated queries using a single getXML() call, you might want to look at another example in XML_Query2XML tutorial [2] (search for "As stated above $sql can also be a boolean value of false."). [1] http://query2xml.sourceforge.net/docs/html/XML_Query2XML/tutorial_XML_Query2XML.pkg.html#global_options.hidden_container_prefix [2] http://query2xml.sourceforge.net/docs
I follow the rule of camel casing with classes starting with uppercase letters and methods/functions starting with lowercase letters. In the case of namespaces it would be the same as class names. I'm also an avid user of Zend Framework so I'm just used to doing it that way.
I love joomla. I use it to build sites quickly whether the client wants a cms or not. Ive written custom components and integrated with the backend. Creating custom programs from scratch and integrate is pretty easy. There are thousands of extensions for things like ecommerce (virtuemart!!) that are very extensive and hackable to your liking. Ive been able to build custom ecommerce stores that would cost thousands of dollars for a fraction of the price using the available open source code.
i say this only because, I only use wordpress when someone wants a blog-type/oriented website. I never use wordpress as a cms unless I am absolutely required too. Ive been able to do things faster and easier in joomla
There are no issues using Doctrine 1.x's nested set behavior in Zend. However Doctrine 1.x is being supplanted by Doctrine 2.0 which has so many major changes it's only the same library in name only. Doctrine 2.0 will not have nested set (or any behaviors) built in but [third parties](https://github.com/blt04/doctrine2-nestedset) are striving to provide this functionality. Of course, Doctrine 2.0 is 5.3+ so if you aren't running 5.3 it's not much an issue :P
Doesn't change the fact that typehinting is pointless when you can't define several different method signatures or at least hint multiple types for each argument. Want to ensure the argument passed to your function can be iterated? NO SOUP FOR YOU. You're stuck with: function myFunction($anArgument) { if($anArgument instanceof Iterator || is_array($anArgument)) { // blah blah } else { throw SomeKindOfException(); } } Want to allow flexible argument types to avoid creating unnecessary arrays/collections? GET OUTTA TOWN. You will use: function addThingsToSomewhere($items) { $items = is_array($items) || $items instanceof Iterator ? $items : array($items); foreach($items as $item) { $this-&gt;data[] = $item; } } Unfortunately the lead devs' heads are too far up their asses to see the logic behind this because nothing is "the PHP way". &lt;/rant&gt;
The problem is that PHP is meant to be mostly typeless. But, I agree, the casting behavior may be useless because PHP is far too forgiving on casting. However, I should be able to pass the string "54" to a function requesting an integer. Or the integer 54 to a function requesting a float. Totally strict comparisons would make that impossible. So what I think needs to happen is that scalar type hints need an entirely different model for type coercion than PHP currently has. But PHP developers might not be too keen on that.
The problem is the correct solution is neither strict or loose. PHP's type casting rules are too loose to be useful when combined with type hinting -- you don't want empty strings allowed for integers (and casted to zeros), for example. But strict comparisons are too strict; integers inside of strings should be allowed as well as integers for float parameters, etc. 
Hi Lukas, I'm the guy who emailed you :-) I solved the problem by learning XPath :-) Thanks for writing a great class!!!
I think it's more likely a lack of understanding by PHP programmers about what _they think_ they need, and subsequently a lack of vision about what _they really_ need. As it stands, PHP can't seem to decide if it wants to be statically typed or dynamically typed, because the internals insist on dynamic but the language structure and feature set (in my opinion) favor static. If they want a truly dynamic language, where are the following? * non-primitive casting * custom casting overrides * operator overloading Until they can sort out their own identity crisis, the community will always be split on issues like these.
I do: Name_Space\Sub; class Class_Name { } Since php has a lot of case insensitive naming, I always put underscores between words, and variables are always lower case.
&gt; namespace aa\bb\cc; class Dd { } This. You could add a comment for each variation and we could vote on them...
What i've been doing is # /path/ns/db/model/relationships/ManyToOne.php namespace ns\db\model\relationships; class ManyToOne {} 
This is the ["standard"](https://gist.github.com/426304) way. Many of the larger projects now implement a class loader that works with paths and namespaces in that format.
For me it was `\` that set alarm bells ringing. I ran away from PHP after that and never looked back.
read [this](http://www.amazon.com/PHP-MySQL-Web-Development-4th/dp/0672329166/ref=sr_1_1?ie=UTF8&amp;qid=1290635158&amp;sr=8-1) then [this](http://www.amazon.com/Objects-Patterns-Practice-Experts-Source/dp/143022925X/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1290635208&amp;sr=1-1) Build something you like while reading them.
Roll your own Nested Set/MPTT implementation: Its not *that* difficult. * [Modified Preorder Tree Traversal](http://articles.sitepoint.com/article/hierarchical-data-database/2) * [Managing Hierarchical Data in MySQL](http://dev.mysql.com/tech-resources/articles/hierarchical-data.html) 
I hate that standard. I'm not gonna use it. Sorry.
What do you hate about it? I'm really curious, as I can't think of any other way to do it that doesn't suck.
phpStorm is amazing - I'm an IDE-hopper but phpStorm was the one I stuck with the longest. The project I'm working on has tens of thousands of files, thousands of classes... phpStorm was the only IDE that correctly handled code completion at a decent level of performance (anything eclipse-based was shithouse). Avoid the current EAP/beta version - terrible performance.
Why can't you just access the element from $_POST? This is the reason register globals was removed from the PHP trunk; it is a terrible coding methodology and it'll lead to many security vulnerabilities eventually.
Don't do this, ever. Not even for "test scripts". Registered globals is off for a reason, and foreach is a hell of a lot easier to read.
Using variable variables seems quite hackish and is usually just a sign that someone doesn't know how to use references (I know not in this case, but usually). I disagree that the foreach method is any more clear.. and it also doesn't allow for variable prefixing and thus is a security risk. See my reply to the previous comment.
I agree that it is not the best way to code as it would probably lead to someone sitting looking at the code going "huh? where did this come from" But you're plain wrong about the security aspect of it. The only reason why it's insecure to register globals to local scope is that someone with malicious intent could purposefully register variables which are intended to be used for access control, or just to mess up the flow of your code (yielding errors which could give away information about the script). Using the foreach method this is a problem, but with import_request_variables all imported variables are prefixed. The only way this could become a security issue is if you already used variables in your code which were prefixed in the exact same way.
&gt; $$key = $elem; Well just put those values into an array instead of making vars on the fly and you won't have that issue.
Haha, at that point why not just do $Whatever_I_Want = $_POST; Regardless, it's just food for thought! Don't take it so seriously. Options are options, it's in the current version of PHP.. and it's there for a reason.
Ya, for hacks who can't figure out how to code without jamming everything in the global scope.
Really? You think traversing through an array and using variable variables to do reassignment to local scope or importing variables with prefixes through a rarely used and hard to find function... is easier than accessing than the way that's taught on thousands of PHP tutorials? Now you're just being intentionally obtuse good sir :] Oh, and $_POST is already in global scope.. I think you meant local scope.
I like fucking with you, especially since you deleted your post.
Thanks to you guys, anyone who read it would invariably down-vote it without thought.. why leave it up &gt;_&lt;
 $key .= "mK".$key; $$key = $elem; Will fix your variable prefixing problem ;) 
Haha What about characters which aren't allowed in php variable names? preg_replace?
It could be useful in that situation, but why aren't you checking to make sure you're getting what you want in $_GET or $_POST to begin with? Can't trust user input.
Relevant: http://www.doctrine-project.org/blog/doctrine2-behavioral-extensions
&gt; The only way this could become a security issue is if you already used variables in your code which were prefixed in the exact same way. This is pretty much all I have to use as a counterargument, but it's very true nonetheless. When any external request has a dynamic influence on even a prefixed portion of variables, it becomes a very clear security issue if you don't pay attention. People should learn to code the right way instead of using functions like import_request_variables which give PHP a horrible name.
True enough. The problem really is if you give people a gigantic toolkit with multiple tools for every job, they'll eventually choose the the wrong tool. One side would argue that instead, you shouldn't use such a large kit. I however like the flexibility :]
You are absolute right. I just happen to like to code PHP with no capitals. No reason. I just don't like that "standard". Namespaces: log db Functions: log\debug db\query I don't use classes or objects a much, 'cause I usually have found a better approach without them (with anonymous functions and namespaced functions and static keyword, if state is needed). But if I have classes I just name them all lower case. I try to name everything with a single word: picasa\photos\find(...); instead of: picasa\find_photos(...) or Picasa::findPhotos(...) I know that this is just a matter of taste. But I can make my own choices. That's all. No need to fight who is right, 'cause there isn't single truth. PHP internally uses many styles, so I think it cannot be standardized. The most common way to name functions in PHP core is: lib_func but there are also libfunc style. With classes there is stdClass and there is Directory and there are SplClass. Go figure. I just follow all lowercase and single word functions and methods and classes.
That's not a big problem, as long as you make sure you know how to deal with XSS-vulnerable situations. They aren't mentioned in the tutorial to keep things simple and understandable.
1. [Tizag](http://www.tizag.com/phpT) to get familiar with the syntax, 2. Choose something you want to do. Nothing crazy, but something you don't know how to do. 3. Google and trial-and-error until you accomplish the above. 4. See 2.
 print "${$a or print shell_exec('ls')}"; Arbitrary code will run inside of an interpolated string if you trick it by placing a variable first.
Because Perl 5 does it, and the PHP devs apparently want to remain syntax-compatible with PHP/FI 1.0.
The 'Diving Into PHP' from Nettuts is a very good place to start. http://blog.themeforest.net/screencasts/diving-into-php-video-series/
Can I ask why you think this tutorial is useless? If you are going to comment on it please give constructive criticism.
Cool article. At first, I thought your title meant the verb *to SSH*, and I was about to link to [a very helpful function](http://php.net/manual/en/function.exec.php).
yeah but exec() doesn't work on many hosting servers because when you're not cautious about how to use it...well... things can get messy. I wrote something about it in linuxandprogramming.info... communicating php with python without sockets..
as another commenter above pointed out, it's because of how the underlying C functions work. 
or he could have installed the ssh extension and been done with it.
If you're on a shared hosting environment, sure, but a lot of developers either own their own box, have a virtual box, and/or use their company's servers. But I agree it can be extremely dangerous.
Basic math operations are not tutorial material, plain and simple. Nobody that has any business doing any programming whatsoever would need this tutorial.
XSS *is* a big problem. If you don't learn about it early and understand how to mitigate it, you will design insecure code.
Shared servers! I remember using those! \*2002 nostalgia\*