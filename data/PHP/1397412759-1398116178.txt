That's what I used to do too, but that was in 1990s. :-) Saying that generating form dynamically is going to slow down the page is not a valid argument over the security and code-reusability benefits it provides. Your time spent re-writting the form (e.g. because markup needs to change) vs buying additional server resources, is more valuable in 99.99% of the cases.
Are you wanting tips on how to write *good* tests or how technically how do you write a test, run it, get reports, etc?
good ones!!
Maybe this can help you: https://jtreminio.com/2013/03/unit-testing-tutorial-introduction-to-phpunit/
Your PHPPixie is an open source project. They'll give you an open source license for free.
Well, if we get back to the original topic. A tool like the one I describe might be useful for non-IDE users. For example I really use CS-fixer a lot.
Cool. didn't know that. Thats really awesome that they do that. Though I don't like IDEs, so i'd probably pass
Try it before you dismiss it. The productivity gains of a properly utilized IDE are manifold.
Yes I read that. I am currently doing this for all my log files and then using Kibana to view things. This works great for log files and internal viewing and graphing. Now I want to add Javascript events to the application. I want to capture all these events and put them into ElasticSearch. I then want to be able to create graphs for my users. I can't use Kibana for this since it will expose all of my internal data. 
Honestly, this should be removed. I mean, we know great apps can be written in PHP and we know that PHP is a not just a hammer and we know that people who develop in PHP are not actually analphabets etc. because we actually use PHP. People who have these wild ideas about PHP don't. Or they've never written anything more complex than a Wordpress page. 
It is pretty loosely coupled actually. I have used it stand-alone in a few non-Symfony projects and it works pretty well.
Yes, best to *exhaust* all your options. I'll show myself out.
Considering your ES server won't be open to the public, you'll probably need to rebuild parts of Kibana using PHP. You can create your event loggers with PHP, and the Apache logs will show those URLs being called from javascript. The PHP actions can insert additional info into ES also.
Also [Sandi Metz](https://www.youtube.com/watch?v=URSWYvyc42M) and [Ian Cooper](http://vimeo.com/68375232).
I will after I get some initial feedback. I'd like to improve it based on people feedback before starting to promote it. So far it has been used only internally. I have used it for 7 months, updating as I go, and finally writing most of it less than a week ago with all the feedback I have collected along the way.
Facebook, WordPress, WikiPedia, Moodle
I think the headline was poorly written, but the article was still insightful. I know PHP has a bad rep, but it irks me when a guy like Glen Campbell, a PHP developer and keynote speaker at the 2014 PHP Conference in UK contributes to the PHP bashing. If you don't like it, don't use it. Yet he says: &gt; PHP is an embarrassment, a blight upon my craft. It’s so broken, but so lauded by every empowered amateur who’s yet to learn anything else, as to be maddening. It has paltry few redeeming qualities and I would prefer to forget it exists at all. I ultimately agree with the author here when he says &gt; But the old adage of a poor worker blames his tools can also be attributed here. And &gt; Am I the only one who feels that, despite PHP’s shortcomings, it’s still infinitely more than capable? 
I hate when data is exported in CSV. It is acceptable format for developers, but if you distribute it to non-technical people, you will end up with bunch of emails complaining about compatibility issues. I suggest instead take an extra step and use either of the libraries to generate Excel (xls or xlsx) file, either https://phpexcel.codeplex.com/ (open-source) or http://www.libxl.com/ (commercial). There is no need to use the commercial (libxl) unless you are dealing with large files.
IDEs do that too. And you can use Vi in most IDEs I know (though I've never tried).
I've got to say I disagree. Having worked in the industry for the past half decade, I'm honestly shocked at how csv is still a standard amongst large organisations instead of the likes of json or xml. That said, it is, and whilst ever that's the case we've just got to go with it. I suspect it's still popular for three big reasons: it isn't broken, it's relatively lightweight, and it can be opened in whatever version of Microsoft Office that they please, so it's transferable from a technical environment to an office environment. That said, that's still no excuse for using the msql_ functions in this day and age, because they are most definitely not up to the task and are very antiquated as far as tech tools go. 
Welp. I flicked two links and it was nsfw. Just a heads up for those that click through to find out what this is.
I recommend http://www.jobserve.com/. Is there a particular reason you want to go permanent? As a permanent, you are going to end up paying taxes around 45%. As a contractor, you are looking at getting at least 2x what permanent is getting and pay about ~30% (depending on how you align your expenses, how much salary you pay yourself, etc). There is job security, of course. But that does not make sense if working 1 month is eq. to 3 as a permanent. As a contractor, you get used to changing jobs. You get more experience this way, etc.
As a Hungarian who moved to the UK for PHP jobs, I can tell you that I don't recommend you looking for jobs, but rather have your Resume uploaded to several job sites and have agencies write to you or call you, as you will get way more more calls and emails. Though I came from the EU so I didn't need a work Visa, I would guess you would need one. You could try discussing immigration with any companies you contact. But I would also be good to know what someone from outside the EU has to say.
Job security is a big reason, but I really wasn't outing contract as an option. I was more curious why so many of the job listings I found are contract. Also, I didn't know about the tax and pay differences. That is great to know, and I'll definitely be less hesitant about contract jobs because of that. However, the idea of being on my own in terms of finding work fairly often is scary. Jumping jobs is not an issue; I'm currently a consultant, so jumping jobs *is* my job. However, I'm a permanent employee for a consulting company, so they handle the overhead, finding most of the jobs, etc. All I have to do is show up and code, basically, which I'm perfectly fine with. That said, what does it take to be a contract worker in the UK? In the USA, you basically have to set up your own business (even if it's just your real name) for tax purposes, and file taxes a certain way, etc. I don't have much knowledge of how this works in the UK, which is another reason I've been focusing on permanent positions. Having an employer/company that can help me out and/or take care of most of the tax work (or at least be there to help me with it) is a huge plus in my book. Then again, maybe I'm making a mountain out of a molehill. This is exactly why I'm asking for advise. :-) Also, thanks for that jobserve.com link. I'll definitely check them out.
That's not a bad idea about uploading a resume just to get some conversations going. Can you recommend some sites? I will, indeed, need a Visa prior to moving. What I've done so far is find a job listing that seemed to fit what I'm looking for, then instead of applying, I've sent emails directly just trying to start a conversation. I basically come out and say I'm an American wanting to move over there and I'd like to discuss that option.
Sure. These are the ones I was using: http://www.monster.co.uk/ http://www.reed.co.uk/ http://www.jobsite.co.uk/‎
Great advise. Sounds like there's a consensus on uploading my resumé. Is there anything specifically different between an US resumé and an UK CV in terms of content or layout that might make me rewrite mine before submitting to sites? Or is the only real difference what it's called (resumé vs CV)?
Awesome, thanks!
Well, I don't know what US CVs look like. We don't generally put photos on ours. Limit it to 2 pages. Seriously, 2 pages. I mean it, 2 pages. No more. I'm not fucking kidding. 2 pages. I would say the general format is: your name and contact details, then a couple of introductory sentences (tailored to the specific job if you're applying for one directly), then list your skills with time served and any big highlights that show you know your stuff, e.g. "5 years C++ programming, including repeated contributions to open source project X", then your job history, with detail for the last 2 or 3 jobs, just 3 lines for anything older, then your education, then any references. You need at least 2 references, but you can put "references on request" if you don't want to list their details right there. And no more than 2 pages. As a hiring manager, if it's more than 2 pages, I bin it.
&gt; We don't put that objective section at the top. I don't either. I've always thought it was stupid, to be frank. My current resume is actually 4 8x10's (standard size over here.. yeah, I know, it makes no sense compared to the A&lt;number&gt; system...). Well, two page if you print it front and back. Basically it has my education and work history, experience, skills, achievements, community stuff that's relevant, and URLs to my LInkedIn, github, etc.
Have you thought about getting a job with a global American company and then getting an inter-company transfer to the UK? For instance there are a lot of American ad agencies that you could apply with. R/GA, Huge, Mother, etc. Might make it easier to get full time employment and take care of all the visa issues at the same time.
Well, ok then Two pages. Got it. Is that two pages front and back (four sides total), or two sides total? My current resume is the former (though I never print it front and back, so it's always 4 pieces of paper). &gt; a couple of introductory sentences (tailored to the specific job if you're applying for one directly) This sounds like what we call a cover letter, and is separate from the resumé but is usually sent with it (hence the name). I have never made or used a cover letter, though. They feel as weird to be as the "objective" section some people use. I mean, come on, the objective is to get hired. What else do you want? I suppose it could help weed out the people who just blanket the market and send their resumé to everyone, but it still seems weird to me. &gt; You need at least 2 references, but you can put "references on request" if you don't want to list their details right there. I don't usually put reference information directly on the resumés for various reasons. However, I usually just leave the references section off. I don't feel like I should have to tell them they can ask for references. Of *course* references are available on request. Why wouldn't they be, ever?
I have considered this as well. I just haven't found the companies yet (nothing with PHP). Actually, that's not true. There was one - a global currency exchange company. That said, I'm certainly keeping my eye out for this. It seems like it'd be the best of both worlds and would alleviate some of the headache on my end.
I hate it when people call variables things like "$flag". So redundant and pointless. What is the variable actually for? To tell when the title row has been output. so call it "first" or "headings_output" or something that actually gives some indication of it's purpose.
Sounds good.
&gt; Also, I didn't know about the tax and pay differences I'm a self-employed programmer, I have no idea what they're talking about with regard to the taxes.. Taxes are really straightforward, or you can pay an accountant to do them. For a contractor they're really simple, I do them myself and it takes me a few hours, but I've also been quoted about £300 *per year* for an accountant to do them for me..
That seems a reasonable price, and may not be a bad idea for a while at least, until I become more familiar with the system. Hopefully, it's less crazy and convoluted than our system tends to be. Anyway, as was pointed out in another comment, because I'm going to need a Visa and, thus, a sponsor company, contract work is pretty much out anyway. 
Good idea. Maybe I'll need to dust of my Google Voice number...
One employer I've looked at time and time again is [Last.fm](http://www.last.fm/about/jobs). They always seem to be hiring, and they seem like such a fun employer to work for. 
Fair enough on the references, though I've always felt the company could figure that out when requesting references (whether or not the resumé said they could). I guess having an extra line won't hurt, although it'll make it more difficult to get down to two pages as suggested.
&gt; Anyway, as was pointed out in another comment, because I'm going to need a Visa and, thus, a sponsor company, contract work is pretty much out anyway. Yeah, in which case you likely won't be worrying about taxes at all. They'll just be taken directly out of your pay packet and sorted out for you.
We don't have Google Voice over here..
Google Voice provides a phone number that could be called, no different than my normal cell phone number.
Which is what I'm hoping for. That's basically what I've got going now, except I still have to file at the end of the year to prove it was taken out I guess? /shrug It's a PITA either way.
True, but your going to want a UK number - not a US number, and Google Voice only provides numbers in the US
This is so true. Also, the equivalent of Google voice you can use here is http://localphone.com/
Fair enough, though I'd hoped email would do. Or even Skype or some such service.
&gt; I'm a self-employed programmer, I have no idea what they're talking about with regard to the taxes.. I think he's talking about the difference between earning through a limited company and taking dividends (standard practice for contractors) which attracts a much lower tax rate vs. PAYE or self employment.
Can you do an AJAX request from JS that contains all of its logging payload in the URL or headers, leave the endpoint as basically a non-op, and let logstash collect that data from the HTTP log itself? That would probably the most performant way to get the data from JS into a searchable log. We use HTTP headers and URL strings to capture a lot of data in our production environment (on the order of millions of items per day).
Wordpress and Wikipedia are obviously very popular, but they are not adverts for great PHP code.
Oops. That's what I meant. Still, the A system makes more sense. There's a YouTube video that explains it well.
* http://www.oilcareers.com/content/jobsearch/job_search.asp?topCat1=11&amp;subCat1=0&amp;Country=UK&amp;SearchTerms=PHP&amp;SearchType=1&amp;OrderBy=JobAd.DateExtended+DESC&amp;JobType=Staff%2FPerm&amp;advancedSearch=1&amp;submit=Search * Ireland? http://www.greythorn.co.uk/Jobs/?source=internalsearch&amp;pagesize=10&amp;q=PHP&amp;sortby=Rank * https://www.google.co.uk/search?q=UK+recruitment+agency * https://www.google.co.uk/search?q=uk+recruitment+agency+for+foreigners * http://www.reed.co.uk/ * Linkedin * http://www.michaelpage.co.uk/ (Search PHP) * http://www.theguardian.com/uk/2012/jun/21/job-agencies-prefer-foreign-workers * http://www.transitionsabroad.com/listings/living/living_abroad/living_in_the_united_kingdom.shtml * http://www.expatarrivals.com/the-united-kingdom/working-in-the-united-kingdom 
FB, Twitter and Google have offices in Dublin and London.
I like how your answer is "ermagerd moar taxes"
How good are you at PHP/Software Development? (ie: Is there something about you that makes you better than the rest?) Although the odds are not in your favour try www.trivago.com/jobs They are ALWAYS searching for talent, and, visa requirements might be forgivable. Good luck either way. 
For immigration purposes, if the UK is anything like the US, you can't just go there and start taking clients as an independent contractor. You probably need a visa, meaning you need to be sponsored by an employer. Most countries have no interest in allowing foreigners to enter and live there as a self-employed individual, with exceptions for extraordinarily talented people in specialized fields. Rather you must enter as an employee, work for several years, and after obtaining a more permanent visa, then you're free to go off on your own.
I usually just write them out straight as HTML but I've had a spanking good time using the [Nette framework's form component](http://doc.nette.org/en/2.1/forms). I belive it covers doing everything you want to do.
He's getting downvoted because it's clear he didn't really want to hear how other people are doing it. Each person that replies gets a "Your way of doing it is wrongbad" response from him. It's pretty clear his posting was intended all along to just be about him.
I feel I'm more prepared to handle legacy code as well as get and keep code in good shape as far as OOD and refactoring are concerned. Thanks, for the link. I'll definitely check it out.
&gt; Each person that replies gets a "Your way of doing it is wrongbad" response from him. None of my responses are intended to offend anyone. I am guessing you are referring to the comment where I argue that writing plain HTML is not productive. I cannot see how would anyone disagree with this argument. The overhead of using any Form generation library is negligible when compared with the overhead of avg. framework (e.g. Symfony). Your time (as a developer) is literally more valuable than the hardware it will cost you to compensate for the performance penalty. I am not even mentioning security implications, code maintainability, etc. all of which result in higher time consumption. &gt; He's getting downvoted because it's clear he didn't really want to hear how other people are doing it. Quite the opposite. I am disappointed that very few people shared their approach.
welcome to the internet. it seems you are new here.
CSV is the defacto standard in E-Commerce.
I use grunt/gulp/guard and slim. If you must generate your forms do it on the toolset side not the server side.
If you do this, do not use a primary phone number. Once your number (and email) is in circulation you will get never-ending stream of communications. Recruiters are sharks waiting for a sniff of blood to pounce on.
[Skype number](http://www.skype.com/en/features/online-number/) is €4.79 per month.
&gt; I am disappointed that very few people shared their approach. Why would anyone share their approach after seeing your first 2 responses? &gt; I cannot see how would anyone disagree Of course you don't see it. That's your flaw. That is why the post in question is at -14 right now.
Try some code kata's. There is a difference between testing your code and TDD.
Well, that doesn't make much sense.
I'm sorry for misunderstanding here. I'm not afflicted by this delay in any way. It was just informational addition to this link. I fully understand problems in community and I know that PHP is contributed by people who have their own life. If anyone felt resentful by this post, then I am sorry.
It depends on your business model. You might charge them for the time you put in (like rounded up to the nearest half hour, whether you charge them full or half price is up to you), you might charge them a service fee (as a fixed cost) or you might be nice about it and not charge them anything (but this leaves it open for abuse). Either way you should list it in your contract.
PHP Summer Training 
Our web servers are configured to log certain header values in their normal access logs. 
No, every minute of communication, writing documentation, training clients employees or any other time spent on their needs is billed by the same price as coding. Assuming you are freelancer, just think about how communication is usually handled in bigger companies - it is done by the management, and their time is usually valued more than time of coder. 
I've never had anyone question it but I'd simply explain to them that they're not buying code, they're buying my time - whether it's a phone call or development time. Additionally, I bill in minimum 15 minute increments. It's the absolute best way to stop the people that call 4-5 times per day with 1 minute questions. They tend to save all their questions for one call but some of them happily pay 1.25 hrs for 5 x 1 minute phone calls over a day which is easily worth the extra annoyance factor.
Lots of interesting information here! Since you are a Kiwi, do you know how it is for coming to New Zealand (from France)? I had a quick look at PHP job offers and I couldn't say there was a lot of choice. Is it the same, i.e. you should rather upload your resume?
Linking to an article that has no correlation to anything you mentioned in your own solution does not make you right. As I expected. Some ForHire consultant with zero real life experience.
It's not that specific to Laravel - I would recommend it to anybody asking me this question. 
www.totaljobs.co.uk www.monster.co.uk These are both quite good too.
Instead of trying to crow bar graphing into ES/Logstash, why not take a look at something like [Graphite](http://graphite.wikidot.com/)? It's designed to do exactly this, and if you want to show your own graphs you can get the raw data out easily too.
Yes, using web-mode for php too. It does not like very long file mixing js, css, html and php but I see that as a good thing. You may want to check geben to hook-up with xdebug. Edit: you can check nxhtml for php files too. It has not been updated for some time but it usually works quite well.
+1 for nxhtml
Saying salt+md5 is better than not hashing at all, is definitely technically true. But it's like saying getting shot in the heart is better than getting shot in the head, because it will take longer to die. You're dead in both cases. 
When we get a project we just estimate "project management" time and add that in at full cost. But for ongoing clients we don't bill them for communication that seems silly to me. Though none of our clients call us multiple times a day to ask us questions about thing.
That's not too bad, actually. Thanks.
&gt; Do you bill your clients half your hourly rate for anything? For half an hour's work. But no, nothing other than that.
You probably want to add the fact that `$_SERVER["APPLICATION_ENVIRONMENT"]` should be set to "local" in the wiki for the installation.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Opportunity cost**](https://en.wikipedia.org/wiki/Opportunity%20cost): [](#sfw) --- &gt;In [microeconomic theory](https://en.wikipedia.org/wiki/Microeconomics), the __opportunity cost of a choice__ is the [value](https://en.wikipedia.org/wiki/Value_(economics\)) of the best alternative forgone, in a situation in which a choice needs to be made between several [mutually exclusive](https://en.wikipedia.org/wiki/Mutually_exclusive) alternatives given limited [resources](https://en.wikipedia.org/wiki/Resource). Assuming the best choice is made, it is the "cost" incurred by not enjoying the benefit that would be had by taking the second best choice available. The *[New Oxford American Dictionary](https://en.wikipedia.org/wiki/New_Oxford_American_Dictionary)* defines it as "the loss of potential gain from other alternatives when one alternative is chosen". Opportunity cost is a key concept in [economics](https://en.wikipedia.org/wiki/Economics), and has been described as expressing "the basic relationship between [scarcity](https://en.wikipedia.org/wiki/Scarcity) and [choice](https://en.wikipedia.org/wiki/Utility)". The notion of opportunity cost plays a crucial part in ensuring that scarce resources are used efficiently. Thus, opportunity costs are not restricted to monetary or financial costs: the [real cost](https://en.wikipedia.org/wiki/Real_versus_nominal_value_(economics\)) of [output forgone](https://en.wikipedia.org/wiki/Production_possibilities_frontier), lost time, pleasure or any other benefit that provides [utility](https://en.wikipedia.org/wiki/Utility_(economics\)) should also be considered opportunity costs. &gt;==== &gt;[**Image**](https://i.imgur.com/zv7r3ht.png) [^(i)](https://commons.wikimedia.org/wiki/File:Gdpercapita.PNG) --- ^Interesting: [^Opportunity ^cost ^of ^capital](https://en.wikipedia.org/wiki/Opportunity_cost_of_capital) ^| [^Diminishing ^returns](https://en.wikipedia.org/wiki/Diminishing_returns) ^| [^Microeconomics](https://en.wikipedia.org/wiki/Microeconomics) ^| [^Economics](https://en.wikipedia.org/wiki/Economics) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgs1hhw) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgs1hhw)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
The author already mentions [Flysystem](https://github.com/thephpleague/flysystem) for the filesystem layer - id say that you'd be better off using that library with the [Carbon](https://github.com/briannesbitt/Carbon) wrapper around PHP's DateTime class.
I used to, but currently I do not. I now use Vim, Sublime, Notepad++, and Netbeans.
My first programming language that I have learned was C. Then when I looked at PHP code I was immediately able to recognize what was going on the code, I mean very easy to understand. But still I cannot read Java or Python code. I don't understand why they make so complicated to read them.
they had me at "goodly and nice"
Not half rate, no, but sometimes I will credit time. I will sometimes get the opportunity to learn a new framework or API that I'm unfamiliar with. I like to take these projects as an opportunity to learn something new, but these projects will sometimes take longer to complete than if I had used more familiar tools. Every project involve some degree of skill development, but some take way more than others. If I feel as though I spent a *significant* amount of time learning a tool, as opposed to actually working with it, I'll credit some of my time to the client. I get the benefit of improving my skills while doing paid work, and I can then do 100% paid work with this tool in the future. Of course sometimes I'm too busy and will just subcontract or turn down projects I don't know how to do. However I prefer to learn more to improve my skills to make my time more valuable.
That's not the point, as I point out in the post. What about testing for set headers? What if you're writing a library like Flysystem? :)
&gt; What about *[insert global function here]*? Global is the enemy if you want to test your code. What you article show is a clever hack, but it's still a hack (and definitely not a practical one).
If I was compiling some software where I only really had to babysit it, or if I was just uploading files via SFTP and it was taking literal hours , while I went on reddit, those would be the only situations where I would probably bill half time.
Something that I've thought about was either creating a PHP (this is the php sub) or a node.js collector for your JS frontend. Send this collector everything that you want and then use monolog (for PHP) or some other framework for node.js to inject these events into redis--&gt;logstash--&gt;ES. In terms of capturing headers, in your JS error/logging handler you can capture all of the browser headers in JS, package them up and send them back to the collector.
Agreed. If you use extract, read the [manual](http://php.net/extract). You should use either EXTR_SKIP OR EXTR_PREFIX_ALL to be safe.
&gt; if you're billing in 15 minute increments, you'd have to answer over 30 of these calls a day just to bill out eight hours of work. I charge them 15 minutes even if they ring me and say "I just wanted to check, was it X or Y?" If I had 4 people do that in one day, I've spent &lt; 10 minutes on the phone and I've charged an hours work for it. If your problem is that you're spending more time managing and less time coding I'd say that is a good problem to have. it might be the case that you need to hire someone to do the programming while you do the managing. 
Because the overall reaction to the Cheatsheet was surprisingly positive, and lots of people helped me to iron out most obvious errors, I added the Propel ORM section to the site.
Nice! The old way was to inject a class that used `__call()` to forward to the global PHP functions. Then you could override the global function by writing a identically-named method on the class, and inject that during your tests. This looks much cleaner, although I think you'd need to be careful to redefine the function in the test case, and not in the source code somewhere. My only nitpick is that this is not a "Laravel" tip -- it's a good tip for any codebase, not just the one framework. EDIT: Having said that, if there is any way to wrap the native functions into a support class that can be replaced with a test double, that's probably the better way to go.
At first glance, it seems quite practical to me, but I might be missing something. It looks nicer than some other solutions I've used.
Thank you for the warning. I was going to browse this project at work.
A third option, is: public function getFriends($args) { $user_id = null; $screen_name = null; $cursor = -1; $skip_status = false; $include_user_entities; = false; extract($args, EXTR_IF_EXISTS); } This provides: * explicit defaults * limitations on possible arguments
I use PHPStorm for anything serious.
Never. I look at it this way: If I had 2 clients with unlimited work, one was paying full price (say, 100$/hr), and one was paying 90% (90$/hr), I'd never do any work for the 2nd. So discounting a certain task (questions, phone calls, meetings) would make me avoid those tasks. By paying the same amount for all tasks, they get equal priority, and ultimately, I get happier clients. That being said, you should adhere to some rules as well. For example, I don't check email while I'm working on a task. I do the current task to completion, log the hours (for billing later), then check email. If someone has an emergency, I'll look at that email and start the timer, then repeat. I do similar things with calls.
No offense taken, just felt about explaining the situation.
Does web mode highlight every PHP keyword? IIRC it doesn't recognize namespaces, use statements, traits etc. 
Vim is great. That said, whenever Symfony is involved, I'm getting less and less work done because of Vim.
&gt; I can't find any reason to move from vim to emacs Some of the reasons I've started the move: * background jobs * elisp * ability to really program your editor, not just extend it * multi monitor support
I've been eyeing PHPStorm as well, but their Vim plugin still has a long way to go. And editing in a non-modal way just seems barbaric at this point. 
Actually I use windows in my personal computer, but I will make a tutorial for Linux environment soon!
I'm mostly thinking about the fact that you test needs to be in the same namespace as your class :S Or you could just put the mock in the class namespace, but you are "polluting" the namespace with the mock for all the other tests too. Unless you run each test in a separate process but it's much slower and not done by default by PHPUnit.
&gt; editing in a non-modal way Yeah, well whatever. That's just, like, your opinion, man.
What's wrong with skip? It'll only cause a bug if you start using another parameter without defining it, which is the same thing that'd happen if we had named parameters and you forgot to add it to the function declaration.
Seems like a fucky idea.
What are you talking about?
and if one of the parameters is coming from user input, how should I treat the data before extract()?
I'll do this sometimes for work that I feel "I should have done right the first time." I think it makes sense for doubling back on something that had a quick-fix put in place. Usually this is a piece of functionality or something that the quick-fix created a significantly negative experience. I however never tell my clients this, I just bill it as taking half as long as it took.
What you're describing sounds more like `EXTR_IF_EXISTS` than `EXTR_SKIP`. `EXTR_SKIP` will prevent overwriting of existing variables. $foo = 'X'; $bar = array( 'foo' =&gt; 'Y', 'baz' =&gt; 'Z' ); extract( $bar, EXTR_SKIP ); echo $foo; // output X echo $baz; // output Z unset($baz); extract( $bar, EXTR_IF_EXISTS ); echo $foo; // output Y echo $baz; // output NULL / undefined 
Take a look at the [data mapper pattern](http://en.wikipedia.org/wiki/Data_mapper_pattern). That should get you in the right direction.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Data mapper pattern**](https://en.wikipedia.org/wiki/Data%20mapper%20pattern): [](#sfw) --- &gt; &gt;In [software engineering](https://en.wikipedia.org/wiki/Software_engineering), the __data mapper pattern__ is an [architectural pattern](https://en.wikipedia.org/wiki/Architectural_pattern_(computer_science\)). It was named by [Martin Fowler](https://en.wikipedia.org/wiki/Martin_Fowler) in his 2003 book *Patterns of Enterprise Application Architecture*. The interface of an object conforming to this pattern would include functions such as Create, Read, Update, and Delete, that operate on objects that represent domain entity types in a data store. &gt;A Data Mapper is a [Data Access Layer](https://en.wikipedia.org/wiki/Data_access_layer) that performs bidirectional transfer of data between a persistent data store (often a [relational database](https://en.wikipedia.org/wiki/Relational_database)) and an in memory data representation (the domain layer). The goal of the pattern is to keep the in memory representation and the persistent data store independent of each other and the data mapper itself. The layer is composed of one or more mappers (or [Data Access Objects](https://en.wikipedia.org/wiki/Data_Access_Object)), performing the data transfer. Mapper implementations vary in scope. Generic mappers will handle many different domain entity types, dedicated mappers will handle one or a few. &gt; --- ^Interesting: [^SQLAlchemy](https://en.wikipedia.org/wiki/SQLAlchemy) ^| [^Active ^record ^pattern](https://en.wikipedia.org/wiki/Active_record_pattern) ^| [^Comparison ^of ^web ^application ^frameworks](https://en.wikipedia.org/wiki/Comparison_of_web_application_frameworks) ^| [^Doctrine ^\(PHP)](https://en.wikipedia.org/wiki/Doctrine_\(PHP\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cgs80tw) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cgs80tw)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Exactly. function foo( $args = array(), $arg1 = null, $arg2 = null ){ extract( $args, EXTR_IF_EXISTS ); } So if you want to set just $arg1 you can: foo( array(), true );
True, my only qualm is that the examples use Laravel's TestCase class instead of directly extending PHPUnit_Framework_Testcase ... so they wouldn't work outside of Laravel as they are given. Beyond that, I agree it's basically universal.
I guess anything interesting or cool that you've found. Stuff you use in your IT work. Websites that sell or host software to pick from. Thanks for your reply. 
I have a few questions. If you're using ActiveRecord pattern, why do you want to put your own custom sql queries? You probably need to post your sample codes.
As long as the user is not able to provide the array key you should be theoretically safe. That being said i'd still recommend against using extract - particularly if you think HHVM will ever be a target for your code. The magicness of this function makes removing uses of extract particularly tricky to do in a safe manner.
I got one ... - http://pecl.php.net/uopz - http://php.net/uopz Some codez ... &lt;?php class Native extends PHPUnit_Framework_Testcase { public static function setupBeforeClass() { $strlen = uopz_copy("strlen"); uopz_function("strlen", function($string) use ($strlen) { /* can call original $strlen function */ return 10; }); $time = uopz_copy("time"); uopz_function("time", function() use ($time) { /* can call original $time function */ return 10; }); /* can override internal methods too */ uopz_function(Exception::class, "__toString", function() { return "hello uopz"; }); /* brace for voodoo ... */ $toString = uopz_copy(Exception::class, "__toString"); uopz_compose(FakeException::class, [Exception::class], [ "__toString" =&gt; function() use ($toString) { return sprintf("hello fake exception -&gt; %s", $toString()); } ]); /* now it's just getting silly ... */ uopz_compose(FakeExceptionTrait::class, [], [ "getSomething" =&gt; function() { return "something"; } ], [], ZEND_ACC_TRAIT); /* because, why not ... */ uopz_extend(FakeException::class, FakeExceptionTrait::class); } public function testStrlen() { $this-&gt;assertEquals(strlen("four"), 10); } public function testTime() { $this-&gt;assertEquals(time(), 10); } public function testExceptionToString() { $this-&gt;assertEquals((string) new Exception(), "hello uopz"); } public function testFakeExceptionExists() { $this-&gt;assertEquals(class_exists(FakeException::class), true); } public function testFakeExceptionExtendsException() { $this-&gt;assertEquals(in_array(Exception::class, class_parents(FakeException::class)), true); } public function testFakeExceptionTraitExists() { $this-&gt;assertEquals(trait_exists(FakeExceptionTrait::class), true); } public function testFakeExceptionUsesFakeExceptionTrait() { $this-&gt;assertEquals(in_array(FakeExceptionTrait::class, class_uses(FakeException::class)), true); } public function testFakeExceptionToString() { $this-&gt;assertEquals((string) new FakeException(), "hello fake exception -&gt; hello uopz"); } public function testSomethingAboutFakeException() { $fake = new FakeException(); $this-&gt;assertEquals($fake-&gt;getSomething(), "something"); } public static function teardownAfterClass() { uopz_restore("strlen"); uopz_restore("time"); uopz_restore(Exception::class, "__toString"); } } ?&gt; Delicious, obviously ... most of that completely unecessary for the example ... but great fun :D
&gt;The old way was to inject a class that used __call() to forward to the global PHP functions What's the new way? I'm doing exactly that (injecting a class with nothing but __call()) in a little library for making Wordpress apps. It lets me abstract all Wordpress's global functions.
https://github.com/CodepadME/laravel-tricks is also open sourced.
Oh yeah - definitely not a Laravel thing. That's just the default collection Medium put this in. https://medium.com/p/b4422f07ec5f works just as well. :) EDIT: of course - then I would be able to use AspectMock. Sometimes you just gotta deal with a bunch of global functions.
Unless you're suggesting I re-implement all global, low-level functions so that I can make practical PHP apps, this is a useful hack. Of course stubbing and mocking and not polluting the global namespace are all preferable. Then there's the real world... ;)
&gt; What about testing for set headers? If you mean HTTP headers then I almost always choose a toolset that includes [stack](http://stackphp.com/) HTTP middleware. &gt; What if you're writing a library like Flysystem? I'd implement a mock using the appropriate interface; unit tests should, after-all, be free of side-effects ;) If I wanted to test that data was written correctly we'd be talking about integration tests and the need for mocking would be moot. Snarkiness aside, I tend to work hard to avoid relying upon free functions that have side-effects - unchecked they are a subtle form of coupling to a persistence layer and lead to difficult to test code.
&gt; I almost always choose a toolset that includes stack HTTP middleware. What if you are writing middleware that sets those headers? &gt; I'd implement a mock using the appropriate interface How do you test that your concrete implementation is calling the functions correctly? I understand the theory behind unit testing, the pain of side-effects, the nonchalance of integration tests. All of that fancy-footwork aside - sometimes you need to know if a global function is called correctly. For those times, this helps.
Honestly you can perfectly make an app without touching at native headers, file, cookies, session, http, etc... functions.
&gt; What if you are writing middleware that sets those headers? I'd write integration tests ;) &gt; How do you test that your concrete implementation is calling the functions correctly? Integration tests again ;) Please don't take this as hand-waving or being overly dismissive as it's not intended to be. The distinction between an integration and unit test is not superficial - they are designed to fulfil different guarantees. Personally if given the option between two extreme examples of codebases that are either *only* unit or integration tested i'd prefer the solution with integration tests every time for the very reasons you state - usually you *have* to know that the operation actually has the intended effect (writes to the db, filesystem, caching layer or whatever).
Indeed. With a hand-full of libraries or a full-stack framework I can. Does that mean I should only be writing apps if I can use those dependencies? Or would it be useful for me to know how the tools I depend on work, and how to deal with weaknesses in the language I use?
I don't believe I should have to give up unit tests just to avoid testing things that are difficult to unit test. Especially not now that this discussion has revealed a library and two distinct methods of testing global functions. :)
Looks good.
Never. You set up poor expectancies like this. Your time never loses value unless you are admittedly doing a half ass job. Never do a half ass job.
Great question. It is more "aimed at experienced developers who have been thrown a crappy application and are expected to bring it into the modern age", although the developer need not be *that* experienced to gain benefits from the book. Hell, the developer is going to *become* experienced by working through it. ;-) As far as "lessons on how to avoid typical legacy pitfalls in your next project" ... reading through the book is probably going to help with that too, at least as a narrative of things that will have to get fixed later.
I have different items i put on the invoice. like Phone Support, Remote Desktop support, Coding, Hosting, Onsite support and so on. It let the clients see exactly what they bought, and how much of it.
I think we're having a simple issue of differing understandings of what is a unit and what is an integration test - conventionally you would call a test that persists state an integration test rather than a unit test. By using (or building) abstractions around stateful functionality you can separate your integration from your unit tests. For small projects this distinction is rather academic but with medium/large projects the opposite is true - statefulness implies I/O which means longer test runs. In concrete(ish) terms, i'd expect to be able to run 100s of unit tests a second - this gives us the rapid iteration cycle that we thrive with. Integration tests i'd expect 10s of tests a second - still fast enough to run often but slow enough that I don't want them blocking my progress. And to take it to it's logical conclusion, with acceptance tests (eg with selenium) i'd expect one test every 10 seconds or so. By abstracting the stateful functions I can still write tests that do the real work; but i'd be testing the abstraction only a handful of times rather than implicitly testing the same stateful operation again and again. For medium/large projects which are well tested the difference in execution time and thus the iteration cycle is substantial 
Here is the method I use to stub the global `time` function: [stubTimeFunction()](https://github.com/rybakit/phive-queue/blob/83b9865784533968b8f3c620c6fed57976cbc5d4/tests/Queue/QueueTest.php#L138-L149). The stub function is created in the class namespace dynamically and can be easily disabled after the test, e.g: self::$now = strtotime('+10 minutes'); $this-&gt;testObj-&gt;someMethodWhichUsesTimeFunc(); self::$now = null; 
Here's some code I played with a while back, not sure if it still works: https://gist.github.com/davedevelopment/8ba23f1425fcbb4d8572 It uses mockery and has the benefit of trying to fall back to normal behaviour after Mockery::close() has been called. An example for your example: \FuncMockery\FuncMockery::mock("Acme\file_get_contents") -&gt;shouldReturn('mocked file_get_contents'); 
Can't receive or make international calls with it.
Well that's a shame.
Don't tell me what to do with my life.
it's exhausting to have discussions about php with people that don't know nothing about the current features. I think everyone is in the right to hate some language, but you need to have at least updated references
I would never tell, I just suggest.
Yeah, and I doubt we'll ever be able to. The lack of attention it gets from google smells of their abandonware. It will probably disappear in a couple years.
The problem with being on the defensive for years is that you sometimes forget not everyone is an enemy.
I'll tell you why people laugh at PHP. This thing got released in 2014 -&gt; http://tildehash.com/?article=announcing-hashover-1.0 Here's the reddit thread in /r/webdev -&gt; http://www.reddit.com/r/webdev/comments/22xju7/hashover_10_an_open_source_commenting_system/ That thing got 50 upvotes. In the thread, people even got excited for the project... and it's one of the most vile code I have ever seen. Really. Here's my comments about it: http://www.reddit.com/r/webdev/comments/22xju7/hashover_10_an_open_source_commenting_system/cgs34xe I also emailed the author. Here's another example; an e-commerce... http://www.reddit.com/r/webdev/comments/227ffk/can_open_source_ecommerce_be_better_we_think_so/ And my comments -&gt; http://www.reddit.com/r/webdev/comments/227ffk/can_open_source_ecommerce_be_better_we_think_so/cgklfhl It's just pure luck that I stumbled upon these in reddit. Who knows how many of them are in the wild.. These types of things gets popular and used by normal people... Then a security researcher or a script kiddie comes in, finds a hole, pwns it and everyone that's running it... and every single time, PHP gets the blame, instead of the dev who wrote it. And that's the problem. Instead of blaming the dev, they blame the language. If people said "PHP has a lot of sucky devs", I'd jump in and agreed, even give some anecdotes. Instead, they chose "PHP sucks". And it always happens to PHP. When heartbleed came out, only a minority blamed C and said "nuh-uh, should have used Rust!", yet when a similar bug happens in PHP, people go "lolol php". I can't really blame them. What is the "PHP Community"? is it /r/php? is it the guys on freenode? Is it the dysfunctional core group? Cause, TBH, all I really care is getting a site up ASAP and get paid. I'm just part of the group that cares that its secure and well written. I think we all personally know people that don't care at all. Anyways, good for you to stand up! Here's a modified MLK quote for you that I whopped from nowhere. &gt; I have a dream that my language will one day live in a nation where they will not be judged by the average suckyness of their developers, but by its current core functionality and best practices. 
TL;DR any spec is awesome. A lot of spec is even more awesome. See where I'm going here? Just be weary that the spec will change so you must also change with it. 
Very simple. If you find yourself needing named args, you probably should refactor. About 50% of the time you're better suited with a [parameter object](http://www.refactoring.com/catalog/introduceParameterObject.html) and the other 50% of the time [extract method](http://www.refactoring.com/catalog/extractMethod.html) to reduce the number of arguments needed in the first place. Needing named parameters is a strong sign that the method is trying to do too much. Try spliting out some of those conditionals into separate methods. As far as the code-blocks, I tend to prefer the `+=` approach, but without the `extract()`. Keep it an array, but use addition to add the defaults rather than merge... Just personal preference...
A classic case of over-engineering for 95% of the use-cases it solves... When you need something like that, you **really** need it. But the vast majority of the time it's way overkill (like using a bazooka to kill a fly).
My rule has been that if the new tech is of future value to me, I bill somewhere between 25-75% depending on ... gut feel. If it is some weird legacy thing then I bill at full rate, and I let them know that in advance. In a few cases where I felt I should have already known something, I just eat the learning time.
cool, I'm gonna rethink how I could improve my methods the parameters I'm using right now are basic filters and pagination: get_item*s*($parent_id, $date, $output (csv, xml, json), $limit, $offset) and the model is also affected by several states (session based), I don't feel like adding more things there but maybe I should edit: plural
hating on programming languages is just silly if you use it as a way to earn money and pay the bills, then that's all that matters.
Thanks for the reply. So is there such a thing as "too much spec"? For example, is this too detailed: "Here, a user will enter the password and email he used to register for the site. Passwords will be ***’d out (each dot representing one character). If a user clicks “Keep me signed in”, his session will last until his browser is reset, cache is cleared, or anything that would force terminate a session. If it is not checked, the session will just last until the browser is closed. When the user clicks “sign in”, he will be brought to Page 6. If a user clicks “Forgot you password?”, he will be brought to Page 20.
That's fair!
Great points all around.
I may be wrong but if it is like with nxhtml there is a list of keywords you can edit.
Even in that case, I'd remove the authentication and authorization systems from the controller and put them somewhere else like in a service layer. I'd then have that subsystem triggered between the router and controller prior to dispatching. If someone tries to access a restricted area and needs to authenticate, trigger a 401 and have your error handling controller provide a login. If they aren't authorized, trigger a 403 and have your error handler deal with it. I view controllers as simpletons where they work on an assembly line moving information along without knowledge of what's going on around them. With this view, if the controller has enough logic to warrant a test, then it's too complicated. I like to think that the only tests controllers should be part of are integration tests since they should only be integrating the different parts anyway.
I noticed in your comment you mentioned using XML to store the data as one of the problems and I wondered if you could elaborate on why that is a problem specifically, or is it how he did it? I have seen CMS that used XML so I had the impression it could be done well.
Ended up with both because I purchased Komodo prior to trying out PHPStorm. Personally enjoy working in PHPStorm for everything I do, but won't discount the fact that somewhere somebody probably prefers Komodo.
For me it depends on if I am working as a contractor or employee. As an employee I love less detailed specs, and more of a vision for the product. This gives me room to be creative and dabble in product development in addition to coding. Communication on your designs and progress with the product are key when specs are less detailed. As a contractor I want very detailed specs. Detailed specs make it so there is less disagreement when I deliver something. In fact, I wont start on a contract until the specs are detailed. Detailed specs prevent feature creep. Less detailed specs allow for the client to say that it was implied that something should have been done.
that's the controller method, and it's actually plural on my app (I just invented a generic name trying to make it more clear, but I failed) thanks again 
With PHP-FPM it arguably makes sense just to have the Full library floating in memory anyway, so I think thats not a decent argument.
I think it's dumb, it's a gripe I have. At least I can articulate real problems I have with the language beyond the fairly regular "Lol obscure name for ::, the devs are fucking stupid". Agree to disagree. I prefer to explicitly declare which parts of the standard library and extensions I'm using ala Python. 
Why go through the hassle of storing stuff in crappy XML when you could use a database? And, at the same time, profit from benefits like "query stuff" and "related data". A project that uses XML to store data just screams "Halp, we don't know how to SQL?!" to me.
[Astah](http://astah.net/)
Well, it's like Python 2 vs Python 3. By breaking backward compatibility, people are less likely to upgrade. There's project going out today that's still using Python 2 (which is fine, if we compare Py2 to Py3 and PHP4 with PHP5, lolol). The unhandled exception thing is true for the standard library, but I guess it was designed this way and it's liked to the compatibility thing. and, yeah, the language really does a lot of funky things.. I solved it by doing my own classes around userland functions. Some people hate it.. but I think it makes my code clearer and more predictable. It also throws exceptions instead of returning false. ``new String("hello!")-&gt;length() vs strlen`` ``new String("hello")-&gt;findPosition($needle, $offset)`` instead of checking the needle or haystack in the PHP manual for strpos. 
I agree with the sentiment of Py2 vs Py3. I'm still using Py2. I should switch. I think I'll start tonight.
I appreciate this post, and I appreciate the author knows he was wrong to judge... but "die in a fire?" 
There is such a thing as a "bad spec", where "bad" can be anything from uninformed to impossible. * You specify "local@domain.tld". In addition to that rejecting a number of valid email addresses, the whole practice of validating email addresses is itself quite silly (because of the insane spec). Send an email and see what happens. * Dialogs are wildly irritating from a UX perspective. They should only be used when the user's attention absolutely must be captured (e.g. errors). Almost everything else can be inlined, even action confirmation (but be careful with that). An example of a perfectly plausible requirement could be that users should be able to recover their passwords. Any self-respecting developer would object loudly to that. The more detailed a spec is, the easier our job is. But we're supposed to be experts, and if we say the spec needs to be changed you'd do well to listen.
I did, but not differentiating by the type of work (e.g. programming or phone support). I billed my clients anywhere between 50% and 80% of my hourly rate if my work consisted of writing or patching open source software and ensuring it was accepted upstream. I.e. I would not bill a lower rate if you wanted some customisations on your wordpress installation. But if you wanted a new feature or bugfix and wanted to push it upstream so everyone benefits, I would be willing to negotiate a lower rate. I actually marketed myself that way. Over half my work was on open source projects. Of course I adjusted my prices accordingly.
I suppose yes, and maybe in this situation, but maybe not. There are benefits when considering revision support and portability. It also allows the comment system to work with flat file CMSs where SQL may not be installed (which is a common reason Disqus get used on these kinds of blogs/sites). Though general there are so many problems with this system it's hard to imagine any of these consideration were made and it likely comes down to your original assumption. Thanks for your thoughts.
*"To the heavily bearded dude who turned around and scoffed when I mentioned PHP, **die in a fire*.#minnebar" What are you twelve? 
lol, I was angry.
Ok, but is not a reason to act like you are twelve years old.
I understand that and I commend you for admitting your shortcoming. It's tough to eat crow! But please, never wish death upon anyone. Saying things like that highlights a lack of empathy.
Sorry, "old" as in "what I've been doing before this article." I'll probably keep doing as I have, since I am a man of habit and routine, but this looks like it definitely has its place in one's testing arsenal.
In general ... AR: $entity-&gt;save(); DM: $entityManager-&gt;save($entity); The advantage of DM is that the models don't know anything about their persistence. This makes them easier to test; they don't violate the [SRP](http://en.wikipedia.org/wiki/Single_responsibility_principle).
&gt; Saying things like that highlights a lack of empathy. Not one bit; nobody wished anyone else would die in a fire, and nobody went to meet anybody who wished they would die in a fire, because that'd never happen. It is a (extremely funny, in this case) rhetorical device, used to provoke a response, it worked. If you say to someone you wish to engage that they are a bad man, they likely will not listen to you, if however, you tell them they are worse than hitler, they are much more likely to respond.
This applies to any skill in life. It is up to you to decide the long term benefits, vs short term gains.
&gt; I wouldn't say knowing the difference between POST and GET is "knowing the http protocol" it is, however, knowing the function of two of its verbs. I am with you here. &gt; I'd say you should know the http status codes once you get into making more complicated applications. Agreed. &gt; why do you need to learn the http protocol? PHP is a "language" to build web applications. You **need** to understand how a web application is meant to be by its protocol. For example: a GET request should never update a resource. Understanding a little of the protocol will also help him understand where the language is among its HTTP implementation/usage which may be clear to us but foggy to beginners, like: what are Cookies, HTTP headers (there are useful and dumb stuff like language and content negotiation stuff), GET&amp;POST contents (limits and the fact that POSTs are not hidden, so the requirement of HTTPs) and so on. It is like, IMO, learning Math to do the Physics. (worse analogy ever).
Cool, thanks. So often, the top results on searches for PHP solutions are the tutorials that have been around the longest, and not the tutorials that take you through the safest and most maintainable and testable solutions. There are so many bad habits in the PHP community at large, because of this, that are just not going to disappear overnight. Hopefully this book will help get the community moving in the right direction that little bit quicker :-) Looking forward to trying it out.
Parsing XML is a slow process, if you are going to store it on a file system either use YAML or JSON. 
&gt; When heartbleed came out, only a minority blamed C So you think that the heartbeat bug was fault of C ?? That's wholly illogical. &gt; Cause, TBH, all I really care is getting a site up ASAP and get paid Admit it or not, industry experts will tell you that _this is a more genuine cause of the heartbleed bug than the programming language it was found in_: The masses, even corporations, are under the impression they can use software they spend little to no resources on researching, and then push out products accompanied by guarantees they are ill equipped to provide, to the world at large in exchange for vast sums of money. http://www.theguardian.com/technology/2014/apr/13/heartbleed-bug-cant-blamed-on-coders-human-error-website-security &gt; Most open-source software – and Open SSL is no exception – is produced voluntarily by people who are not paid for creating it. They do it for love, professional pride or as a way of demonstrating technical virtuosity. And mostly they do it in their spare time. Responsible corporate use of open-source software should therefore involve some measure of reciprocity: a corporation that benefits hugely from such software ought to put something back, either in the form of financial support for a particular open-source project, or – better still – by encouraging its own software people to contribute to the project. http://www.infoworld.com/d/open-source-software/stop-laying-the-blame-heartbleed-open-source-240434?page=0,1 &gt; Shouldn't the commercial entities using the code have done some due diligence? Isn't their lack of investment at least partly to blame? Software freedom delivers rights. What about responsibilities? &gt; They should be employing developers to participate in this crucial project, so they have in-hous skills in its close to half-million lines of code. http://www.newyorker.com/online/blogs/elements/2014/04/the-internets-telltale-heartbleed.html &gt; If open-source software is at the heart of the Internet, then we might need to examine it from time to time to make sure it’s not bleeding. To blame heartbleed on C is to deny that there is a problem at all, memory management _happens_ to be the nature of this bug.
I happen to like that the standard library is always loaded, and that PHP is forgiving. Each language is used different, I feel PHP should stop trying to become ROR and stick with what it is.
Aye, I have used argo before thanks for the reply though!
Downloaded a trial of this, looks promising thanks!
Try PlantUML --&gt; http://plantuml.sourceforge.net/ Pretty simple text-based UML diagrams... its really really easy and fast to type in anything you can think, and it should be pretty trivial to automate it for PHP... An example: -- Bob-&gt;Alice : hello -- Translates to: http://www.plantuml.com/plantuml/png/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000
Ugh, I asked a coworker about version control one time. And he referred me to Dreamweaver's check-in/out system. While this feature may do it's job just fine, it is in no way version control. Also, if you're not also using Dreamweaver, no other text editor gives a fuck about your lock Dreamweaver.
YAML is great for humans. You should use something smaller for machine readable configs/data.
Good point, you've given me some good points to ponder. Thanks for the discussion. Cheers!
I hate so much when people develop things only for mac, argh.
That makes WAY more sense. Composite pattern on top of that would allow me to save collections of entities too (...right?). Edit: Holy cow... Alright, **** it, framework time. http://www.sitepoint.com/integrating-the-data-mappers/ Edit 2: Sorry about cursing previous post edit... I let my frustration get the better of me.
Yep, I brain dumbed. Thanks.
I haven't read your book, but my first thought is that it has to be a challenge to write such a book, since legacy PHP applications come in all flavours, the problems can be various and different in scope and the solutions can also come in all sorts of flavours or frameworks. Of course, you can tackle some obvious things, but, for instance, I'm working on an app that still uses MySQLi, a homegrown "ORM", and then many layers of abstract classes which are then used by hundreds of other classes, which then means that any change affects the application in so many different ways that it is hard to even justify the development cost - because it will be significant and you could easily introduce so many bugs, you will spend a lot of time firefighting and/or have critical bugs slip through the cracks (and test coverage is very rudimentary). So, yeah. Our approach was to decouple components that were once responsibilities of the homebrew framework and silo off the legacy code into an API, with the intent of developing new projects off of a proper framework/stack/whatever. The point being that, in this case, the design decisions by the original developers created a situation where many such modernization initiatives faced too much of a barrier to make it worth the effort realistically. We can't fix the original code - we can only isolate it.
Configurations are often viewed and edited by users. Your devops will thank you.
http://i.imgur.com/AZyTUWn.png His other wish list ("Xdebug xmas list") is more or less the same, except with whiskey instead.
Plus, anyone who says this has clearly never experienced actually bad languages like MUMPS or even MATLAB.
It really makes no sense, to me, for every function and class and constant and whatever from every aspect of the standard library AND installed extensions to be loaded into every script. It's silly. Sure, if PHP loaded them into it's memory and then you reached out and said, `use \PDO` or something similar and didn't clog up main's namespace, then I'd consider it a nonissue. 
&gt; for example, urllib is painful to use urllib2 is pretty good, what are you having trouble with? I would take it over php_curl any day. It is not as slick as requests (ohh how I love requests), but you can do most stuff pretty easily: import cookielib, urllib2 from urllib import urlencode #Set up session + cookie handeling cookiejar = cookielib.CookieJar() opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookiejar)) opener.addheaders = [('User-Agent', 'urllib2')] #Get request r = opener.open("http://httpbin.org/user-agent") print r.read() #Post request post_data = {"Hello": "World"} r = opener.open("http://httpbin.org/post", urlencode(post_data)) print r.read() #Get header data from previous request print r.info()['Content-Type'] #HTTP Status Code print r.getcode() #Set cookie (It is automatic with cookiejar) r = opener.open("http://httpbin.org/cookies/set?test=true") #Test cookie r = opener.open("http://httpbin.org/cookies") print r.read() I completely agree on the datetime modules though.
Eventually you end up memory bound. If you're using memory for php standard library instead of for real data, you're limiting your capacity. That may not matter for you, but I've got PHP projects running on "hundreds" of servers (like &gt; 300). If I could remove parts of php's standard library I wasn't using, I could probably save real money. 
Wow you clearly took your time to write a reply, but I think you didn't read my comment carefully. No, I'm not saying heartbleed was the language fault. 
How did you read that far into his post and then misunderstand that line?
"Sounds sketchy I know but this is legit." - Well, at least you know it...
I think he was being facetious and I thought it was pretty funny, but it's actually really not bizarre at all. Your program is never going to react emotionally to some input you give it, at least not yet. You don't have to understand how the computer feels in order to make it do something. Lack of empathy is actually a major symptom of asperger syndrome and from what I've observed over the years, there are an awful lot of programmers who, although not diagnosed, exhibit a lot of asperger symptoms. Kind of explains why they cling to computers and are portrayed through various media as a bit odd.
Yeah I think he missed your point. This is standard way of doing things for one off-requests that come in after project is complete. 
A flat file to store data is a database. It's just a vastly inferior database. If you just want to store something in a file, at the very least use sqlite. XML should be used for transport, not storage imho.
I was under the impression they were using it as an alternative to an XML datastore, which would be mostly data for the serving of comments.
You could try http://graylog2.org/ I quite like it and *apparently* works well with logstash
Sorry for the delays. Again, I really DO want to say nice work on getting something out there, so here's a couple of things that I can see you've done and obviously you put effort into, shows you're not just trying to hack something together. - Namespaces, nice. - Docblocks - General layout of directories inside Libraries/Attw, very good, logical, intuitive - SRP, most of your classes just do one thing which makes it very easy to comprehend - Autoloader - You've got one, so that's a start! Here's some of the turn-offs I found. - Global state all over the place, for instance your config class. While you will read various things about statics and singletons online, my personal opinion is that they should be avoided. Global state is just very difficult to manage. Besides, you can turn an instance of an object into a singleton with a wrapper or DI container if needed but you can't turn a purely static class into an instance. - No composer integration (toolchain, getcomposer.org, packagist.org) - The word "Libraries"... nothing wrong with the word, but it's becoming a little untrendy and kind of a throwback to the days of PECL. Generally the PHP community likes to talk about packages now, managed via Composer. - Very little inversion of control. I see some IoC happening in your DB namespace, but didn't look to far elsewhere. For instance, here... https://github.com/AttwFramework/AttwFramework/blob/master/Libraries/Attw/Application/Application.php#L46 Aside from hacking the core files of your framework, if I wanted to use a different routing manager, I couldn't. In this case, your routing manager should be defined as an interface and injected into the constructor of your Application class. But that's just one way you'd fix that particular piece of code, and not necessarily the best architecture or solution to the problem you're tackling. In reality, your app needs a ton of dependencies to execute a request - Input from the request, routes to match against the URI segments, etc., etc., etc.. Injecting them all into the constructor of an Application probably doesn't make much sense and is very difficult to manage. I've been meaning to blog about this for awhile but things always come up. Basically, read up on Dependency Injection containers (e.g. - Pimple) and imagine how things might work if your Application class WAS a DI container and extended Pimple. This is (mostly) how Laravel works at it's core as well as Silex and others. The application is a DI container and things just get constructed and injected into it via service providers. It makes it super easy to swap dependencies - e.g., if I want to switch a RoutingManager, I just edit the config (note config, not class) to replace the RoutingManager service provider with my own and inject my own routing manager. Your code is actually very good! You've obviously got a real grasp of the language and know how to create classes, it just seems like you're writing class oriented code rather than objected oriented code. Honestly you're nearly there ("there" being the somewhat enlightened state of embracing SOLID), you just need to do some more exploring.
That, and the chicks.
That post is full of advice that does not scale. The database should not map to end-points. Table naming conventions should follow relationships. Have fun working with a database that has 100 randomly named tables that are based on end-points. &gt; Saying a user has-many mailing lists doesn't really make sense. They don’t own the mailing list. Right, but what does this have to do with architecture of things? What makes no sense is ruining the naming conventions of database for an URI that looks better. As the complexity grows you will end up with stuff like: mailing_list_user -&gt; subscription (/subscription) mailing_list_group -&gt; subscription_group (/subscription/group, does not look that pretty now) From DBA end, that would not make any sense, who is subscribing to group? What group? Do we mean subscription is for something called group or a group id that represents many to one relationships within database? Now we need to denormalize data for performance reasons, first it has to go into pending table and then we use workers to transfer it at their own pace. We create subscription_group_pending and switch /subscription to insert data to that table. Boom your /subscription end point that you designed for your precious subscription table no longer has a point; but you have a useless table named 'subscription' in your database. TLDR: If you want that URI, simply route it to a model that will map the request into a proper data structure. 
I'm so sorry for whoever inherits your codebase. Being short for time is no excuse to use some random-ass db adapter on github. Look into well-test libraries that have tons of documentation and a large following. If you don't, you're an asshole. http://framework.zend.com/manual/1.12/en/zend.db.adapter.html http://framework.zend.com/manual/2.0/en/modules/zend.db.adapter.html http://ellislab.com/codeigniter/user-guide/database/ http://www.yiiframework.com/doc/guide/1.1/en/database.dao http://laravel.com/docs/database 
form one of you comments (or rather from code of one of the projects) &gt;$del_file = $dir . '/' . sanitize($_POST['cmtfile'] . '.xml'); function sanitize($query) { $value = str_replace('../', '', $query); return $value; } wow. and yeah, this is exactly the reason PHP gets flak. But back on topic, I was thinking that title "PPHP Has Grown Up, You Should Too" was referring to PHP developers, not to "haters". Because PHP has grown up but there is code out there that is still following programming patterns of PHP 4. Naturally, non PHP devs will still laugh at PHP 
Similarly, I'm tired of people writing off legitimate criticism as knowing "nothing about the current features." There is *plenty* to criticize about PHP, in its present form. It actually *is* a pretty poor language. It works, it's popular, and there are some positive aspects, but it has many flaws.
Requests is exactly why I find urllib2 painful to use. How spoiled are we?
&gt; I would take it over php_curl any day. I absolutely loathed working with curl since nobody bothers documenting how to actually *use* the dozens of `curlopt` options. And then I discovered `curl --libcurl foo.c` which outputs a C file containing the libcurl function calls that `curl` made to complete your request. Amazing how easy it is once you see that the documentation is lying when it claims `CURLOPT_POSTFIELDS` "can either be passed as a urlencoded string ... or as an array with the field name as key and field data as value."
Need something on the local filesystem? Want to use real DBs and tables? Want to write SQL? Want to use PDO? Need transactions (*only with v3*)? http://www.php.net/manual/en/book.sqlite.php http://www.php.net/manual/en/ref.pdo-sqlite.php That look intimidating? http://www.tutorialspoint.com/sqlite/sqlite_php.htm (That said, don't take us back to the days of MS Access - host your flat/file DBs outside of the docroot!!!)
There are some awesome things in PHP that I really love but it has serious issues and anyone who tries to assert that it doesn't is simply lying or ignorant. 
Firstly, to be clear, I did not mean to imply your spec is bad at all. I only meant to give examples of requirements that, for whatever reason, may not be ideal. * `localhost` is a valid, and at times useful, email address domain. It does not have a TLD. More importantly, however, is the potential for ambiguity in interpretation of the format requirement. Does `lo+cal@domain.tld`, which is also a valid address, fit the format? Email address validation was actually recently discussed [right here](http://www.reddit.com/r/PHP/comments/22f1hx/how_to_properly_validate_email_addresses_format/), and the consensus was to keep it very simple, or better, to just send an email and be done with it. This doesn't mean you can't use the specified format but it does mean that you need to be prepared for questions about it, or possibly that you will have users failing to register. * This is an interaction thing and is in danger of being considered loose science. The science is solid, mind, but it doesn't translate well into something digestible. You want to avoid unnecessarily stealing the user's focus. Imagine upon going to a website you see a JavaScript alert welcoming you. That alert will have your full attention even though it isn't doing anything useful. What it is doing is distracting you -- odds are you knew why you were going to that site. The problem with popups specifically is that they often have a very restricted interaction model and that the model is inconsistent between sites (and sometimes within). The user may have to think about how to close it, and even if they know, if it's difficult ("click the little X in the corner") it will take time. * Being able to recover a password implies that passwords are stored either in plaintext or with two-way encryption. I don't know which of the two is worse: with plaintext you at least don't have the illusion of security. If you store passwords correctly they *cannot* be recovered, and the correct reset process is to send a (time-gated) URL to the user's email address where they can specify a new password, which may or may not be identical to the old password.
Exactly. What I don't like about this is that the title seems to promise a silver bullet for all legacy applications with out regarding the fact that every big legacy applications, big enough to justify a refactor instead of rewrite, has to be tackled in very specific ways. I can only think of one use case for this book. If you were someone starting out with programming and has built something small, in a very naive manner, you may be able to use the book to refactor your app. But if you are serious about programming, I suggest to avoid this and try to learn core principles and try to apply them in your projects. It may take several failed attempts before you develop the skill to apply good development principles to any scenario you may face. And I don't think there are any shortcuts for achieving this and any book, or program that promises you anything like that is trying to selling you a lie.
If anyone is wondering, this works because of this. &gt;For functions and constants, PHP will fall back to global functions or constants if a namespaced function or constant does not exist. From http://www.php.net/manual/en/language.namespaces.fallback.php
&gt; The masses, even corporations, are under the impression they can use software they spend little to no resources on researching, and then push out products accompanied by guarantees they are ill equipped to provide, to the world at large in exchange for vast sums of money. AFAIK they are right, what's the problem with that? I mean nobody has closed shop because of this.
Typo, fixed.
about dialogues: I fully agree. I do have some modals requested in my specs, but the reason isn't for pop-up sake. In fact, most modals would actually look just like page continuations, not pop ups. They are there because after function A is completed, it is time for function B. In some instances on my site, I think giving the impression that we are very fast and snappy by having function B happen instantaneously (the element was already there on page load) by just having it shown with JS, as opposed to having a new page load, could be beneficial. The way I have them planned out was so they would aid the UX, not impede or frustrate the user. As for password recovery, I understand and agree with you there. Using that as an example... spec'ing out a full "forgot password" and "change password" system could be a full page or two of writing. Does something as common as a password reset need to be fully spec'd out? Granted it's very common, would explicitly saying "we need this notification, this button, the following checks, this email, this timer, etc" be overkill?
http://www.doctrine-project.org/projects/orm.html I find doctrine great too
uhm... this is kind of way-too-easy and the code is bad. welcome to my php legacy code when i was 12.
Also code completion in the IDE. I like that very much.
Saying XML is crappy is surely a sign of stupidity. I agree using XML in this situation is a tad silly, but XML has its place.
XML is becoming obsolete very quickly, IMHO. Databases work much better for saving structured data. JSON is better for doing remote stuff, and YAML is much friendlier for configuration files and the like. What would you use XML for on a new project, if you had the freedom to pick any technology you'd like?
Please, do my work for free. Also from home, so no social learning experience provided.
Why the hell is the client passing the comment's filename within the post data in the first place?
So why not just use custom PHP builds tailored to the application, excluding the unnecessary extensions from static linking by using the `--disable-extension` flags?
Yeah, I feel like everyone involved in this programming language hatin/lovin thing are 13-year olds who's been watching too much One Tree Hill
Good luck with that perspective here. I know PHP better than I know the back of my own hand, so it is not a lack of knowledge or experience with the language that has brought me to the same conclusion you have reached. I will probably always have a kind of nostalgic affinity for PHP, but unless the improbable happens and the committee says to hell with BC and whips the language into serious shape I see myself and PHP drifting further and further apart, no matter how much sugar they continue to sprinkle on top. PhpStorm has thankfully taken the sting out of some things like API inconsistencies via parameter hints, and the XDebug integration is a godsend...yet landmines still abound. 
Can we not have both?
I feel the same way. I try to inform whenever I see a post about a new project. Sometimes I back down because I feel like an asshole, but when it comes to security, I go all out.
I was really hoping they would go the Symfony/Laravel route of not reinventing the wheel with everything. Also, I see the Yii::$app god object is back: https://github.com/yiisoft/yii2/blob/master/apps/advanced/backend/controllers/SiteController.php I was considering giving this a shot, but it seems they didn't to do any serious architectural changes. 
No. Not at all. I'm currently working on a project for a school that grades applications. And the people who are grading are elderly. They know nothing about anything computer. So your spec is great for my clients. Keep what you have. It allows for all levels of users use your program. Just like I said before spec sometimes changes, so you should change with it. Other than that in my honesty opinion... Your fine. TL;DR (moreSpec === 'Good')
From my experience, it's country specific (unless you count something like indeed.com). And that sucks.
Yeah!! I just woke up in 2002. Oh wait... it's the present. Read what Roy Fielding wrote about it ;) Might help
A quick look at the [BaseSecurity class](https://github.com/yiisoft/yii2/blob/master/framework/helpers/BaseSecurity.php) shows some critical issues. Ie. ciphertext is not authenticated and weak initializing vector generation. Such issues should be immediately fixed. Hopefully someone has the time to take a more detailed look and raise an issue or send a pull request.
&gt; The format for Laravel’s “remember me” cookie is simply the user’s ID string. This blew my mind. Who does that? There have been so much talk about the proper way of handling remember_me cookies, there are heaps of great ideas on stackoverflow: http://stackoverflow.com/questions/244882/what-is-the-best-way-to-implement-remember-me-for-a-website Doing it by encrypting users id is just plain lazy. How hard is it to implement a random 'remember_me' token for each user? It's done in like 10 minutes. Gonna go hack me some laravel sites.... **EDIT** : The other problem is that those cookies don't have any obvious expiry date. So if you steal someone cookie once, you can log as him any time you like. You could at least hash some timestamp with the cookie to prevent this. Some forums also hash users IP into cookies so that you cant use them on a different machine. The token approach saves remember_me tokens and their validity time into the database. **If you steal someones remember_me cookie you'll be able to acccess his account event after he CHANGES HIS PASSWORD. This is seriously fucked up**
This has been fixed: https://github.com/laravel/framework/blob/master/src/Illuminate/Encryption/Encrypter.php#L148 It looks like 11 months ago: https://github.com/laravel/framework/commit/7836868e0125e29ed6255f27727c2933105991ec **Edit:** - See the very last sentence in that post: &gt; This vulnerability was reported to the Laravel developers in June 2013 and was promptly fixed. Unfortunately the strict equality check for MAC verification was broken again just a couple of months later! 
This brings up one of the core issues PHP keeps running into. People keep releasing these "flagship" style, end USER applications that are dangerously bad (WordPress and it's ilk). Our most visible projects are garbage dumps full of people smashing cans together and calling them PHP plugins. Our tool set has grown tremendously in the last couple of years. Composer, Symfony, Laravel. The list goes on, but only PHP devs ever look at them so they don't help our image in the slightest. We need a [Discourse](http://www.discourse.org/).
&gt; It actually is a pretty poor language Please, quantify. Saying that redwall_hp actually *is* a pretty poor developer is similarly meaningless.
Oh, don't get me wrong, I'm not trying to say it's bad. I'm showing some questions that you can ask to help possibly split it apart into one or more other methods. Then you can find the common ground, and make a parameter object for that...
Couldn't you just add a token field to the users table and roll your own remember me (possibly that logs IPs, etc)? Laravel doesn't lock you in to using theirs do they (haven't used the FW before)?
Well if you are shipping your framework with an authentication system you really should make sure its done well. People using a framework assert that the framework is doing stuff in the best way possible
I live and work in London and all my contracts have come from www.cwjobs.co.uk
&gt; XML is stupid to use as a data store. I never condoned it use for data storage, please read my previous comment. &gt; 1) XML is very verbose. If you want to keep integer 42 called foobar, it's 19 bytes. &lt;foobar&gt;42&lt;/foobar&gt;. So its not efficient as storage. Again, I did not condone it as storage mechanism, I only condone it for Configurations or transmission of data between foreign systems. &gt; 2) Scalable? Mate, try querying a 10gb XML datastore. Again made based on something I didn't say. &gt; API versioning is the way to go, whether you're using XML or JSON. You include the the version as an attribute. And you can use xincludes or whatever else to handle this problem. A proven workable solution without having to code more on a well developed application. &gt; Yes, unfortunately, it is. Even you say You don't know what you're talking about. &gt; Mongo uses json, Elasticsearch uses json, most APIs coming out are using json... it has become the de-facto format for data transport. You're in control of the response and the creation of the response, not a client or external system, so that point is invalid to my argument. &gt; Every object is a namespace. Learn more about namespacing :: sigh :: &gt; IMHO, The application should be responsible for validation. In the scenario of a datastore, like I said, JSON and XML are bad for data storage. A database should have its field types and indexes. Excluding your assumption that I thought it was sensible to use XML as data storage. DTD and XSD can do validation out of the box with a solid definition, why reinvent the sodding wheel? &gt; I'm all ears for your rebuttal, but please keep it civilized? Never fun to debate with useless name calling. Wasn't name calling, just annoying to hear people talk about XML when they clearly don't have a understanding for its usage. 
You can't "hack some laravel sites" because you can't create the proper cookie, nor decrypt any existing cookies.
No your example would work without extract since you set $arg1 anyway. My example would have been the correct example to your code. I'll edit my comment for clarity.
Actually, it is still possible to forge a MAC. As I said earlier in this thread, === string comparison is explotable via timing leaks.
This is scary and definitely valid - just want to point out one thing, though. &gt; if PHP error reporting is enabled Even if it is, by default Laravel will not display information about exceptions unless app.debug in the config is set to true.
funny that in your article you mention === with a [link](https://github.com/laravel/framework/commit/3271f78e85a343bde67dae5a84c79739fbe8d4be) that it is implemented again, but it isnt. In this commit it was removed and not added. 
What if I steal someones cookie? That user is fucked. Your remember_me cookie doesn't expire, it's not bound to the users IP, even a password change won't help.
&gt; it has to be a challenge to write such a book, since legacy PHP applications come in all flavours, the problems can be various and different in scope and the solutions can also come in all sorts of flavours or frameworks. Absolutely. I say on the book's main page that it targets primarily "page-based include-oriented" PHP applications. In the book itself, I mention that each different framework is its own special hell, and that the book does not target individual frameworks specifically. (One nice thing about http://leanpub.com is that they have a 100% money-back guarantee in 45 days, so anyone who gets the book and realizes it's not for them can do so without penalty.) &gt; many layers of abstract classes which are then used by hundreds of other classes Believe it or not, you're in both a better and worse position than a "typical" page-based include-oriented PHP app. At least you have classes that can benefit from a proper refactoring approach (all-includes-all-the-time makes that very difficult). But the position is worse because you are in your own special hell of tight coupling through custom mechanisms. &gt; Our approach was to decouple components that were once responsibilities of the homebrew framework and silo off the legacy code into an API I do not mention that in the book, since it's not about frameworks so much, but in my ["It Was Like That When I Got Here"](http://paul-m-jones.com/archives/2667) talk that's a regular Q&amp;A point. I need to incorporate it into the talk itself.
Sure, but the point is to be able to handle multiple input style and rare options: $options = array(); $options['arg1'] = true; if( isset($bar) ){ $options['arg2'] = $bar; }else{ $options['arg2'] = new Bar(); } $options['arg8'] = 'blue'; foo($options); Variables which are mandatory, I'd usually leave as real arguments without defaults, and then decide whether or not to put the available options in the function header or in the function body before the extract. Putting them in the function declaration would actually allow you to also have different "defaults": function foo2($id, $options = array(), $opt1 = null, $opt2 = 'default', $opt3 = true){ ... } // $options = user input array('opt3' =&gt; false ); foo2( 99, $options, 'blue' ); // Now you have: // $id = 99 // $opt1 = blue; // $opt2 = 'default'; // $opt3 = false; ... foo2( 99, $options, 'green' ); 
FYI, I have 4.1.25 running and I just verified that the === operator **is** there. Taylor just linked to the wrong commit, but at least as of 4.1.25, it is there.
&gt; try to learn core principles I agree! The book helps to teach some of them, such as dependency injection and good use of design patterns. &gt; It may take several failed attempts before you develop the skill to apply good development principles to any scenario you may face. I agree here too, and say as much in the book. To wit, you may need to scrap your work in any particular sub-step and start again, having learned a bit more about the codebase and the refactoring process involved. &gt; I don't think there are any shortcuts for achieving this Again, we agree! If you actually decide to read the book, you will find it says over and over that the process is tedious, tiresome, and time-consuming. The end result, though, is a modernized codebase, and that makes the effort worthwhile.
That's really a separate issue that we can address.
Well you should also obviously regenerate the token after each login or whenever the user changes his password. Google it, implementations of this system have been thoroughly covered
Ah, gotcha ; )
You can use the free community-edition.
IMO any job offer or job candidate found through http://careers.stackoverflow.com has a good start.
To be fair, it's not a very large object: http://www.yiiframework.com/doc-2.0/yii.html Looks like more of a facade that provides convenient access to a few common methods. No different from Laravel's `App::whatever()`.
&gt; I never condoned it use for data storage, please read my previous comment. My bad! I apologize for that. &gt; You include the the version as an attribute. And you can use xincludes or whatever else to handle this problem. A proven workable solution without having to code more on a well developed application. I don't seem to understand that. In the REST/JSON world, you explicitly request the version you want. So one endpoint can be requested as v1, the other as v2, so on. Can you give me a concrete example? &gt; You're in control of the response and the creation of the response, not a client or external system, so that point is invalid to my argument. Can you give me a proper example of that scenario? I can't seem to think of an example. If I'm a client, and I'm consuming an XML only API, well, I don't have a choice there. Doesn't mean it's not becoming obsolete. If I have to produce a specific API endpoint for an old client that only understands XML, same thing. /u/bopp clearly asked if you have the choice to pick a technology for a new piece of software. &gt; Learn more about namespacing :: sigh :: Why don't you give us an example so we can show you how you can do it in JSON? At the same time, give us a reason why you should use namespacing. Google replaces : with $. &lt;book:title&gt; becomes book$title in JSON, and gets deprecated. Look at Youtube API, there's no XML version anymore. It's simpler and more efficient. And since the big boys are not doing XML anymore, people are assuming XML is becoming obsolete.. which it is. &gt; DTD and XSD can do validation out of the box with a solid definition, why reinvent the sodding wheel? Because it's a complicated POS. It's super verbose. It's ugly - non-human readable. Even parsing it is not logical and easy. How many versions of XML exists? They didn't get it right in their first version so they added a bunch of shit that made it even uglier and complicated. JSON got popular for a reason. It forces you to simplify your shit, and yes, that's a good thing. &gt; Wasn't name calling, just annoying to hear people talk about XML when they clearly don't have a understanding for its usage. Just be more civilized, man. When people don't have a clue, just tell them and explain. No need to get infuriated, we were all noobs once. 
You are quick to judge and throw some hard words (without even having read the book I suppose).
&gt; I'm so sorry for whoever inherits your codebase :( I'm really trying here... This next (d)evolutionary step is really problematic right now :S
I think he more meant that depending on when calls come in, you can end up getting almost no coding done in the gaps between calls. 8 15 min chunks is not the same as 2 hours of uninterrupted coding. It gets worse if you have many different clients calling, and you have to keep switching projects / mindsets. 
I don't know why this is being down-voted, because it's very true. How hard is it to implement a token system coupled to a user ID?
Yeah. Definitely not worth "scaring" devs or bashing them. But I think it's important for things like this to be made public, for 2 reasons: 1. To encourage people to upgrade to newer versions, as "See, the version you're running *is* insecure". 2. So that we all can learn from each other's mistakes. Better than being doomed to keep repeating them... :-)
He probably got the idea you were discussing information storage because of the comment you replied to (Bopp). Anyway, one thing stood out to me... &gt;XML allows for future changes without breaking compatibility existing/legacy systems. Can you explain to me how XML is any better at this than JSON, preferably with an example? If this isn't a problem in an XML-based system it shouldn't be one in a JSON-based system either. If it is, it likely falls back to the design that's the problem, not the format. I'm also not sure why you think XML is "more scalable" than JSON in terms of passing or delivering information, because it's just not.
A lot of caffees offer free wifi, its super easy to steal someones cookie there. I've done that lots of times for fun actually. Poor cokie based auth is one of the biggest security holes a site may have
This blog could seriously benefit from some syntax highlighting in those code snippets.
I will do later on, sorry little busy ATM an will take little time for me to reply :) &gt; Just be more civilized, man. When people don't have a clue, just tell them and explain. No need to get infuriated, we were all noobs once. Completely agree, long as people don't come out with hyperbolic statements that ooze with arrogance.
Note: this issue has been fixed in release 4.1.26.
You can read about it here: http://laravel.com/docs/upgrade And of course the source is on Github. Further details: a new `remember_token` is present on your `users` table (or equivalent). This token is refreshed on every login and logout, and is stored in the "remember me" cookie. When retrieving the user via a remember me cookie, we validate that the token in the remember me cookie still matches the token on the `users` table. If a "remember me" cookie happens to be hi-jacked, simply logging out of the application will invalidate all extant remember me cookies.
Poor cookie based auth is not the vulnerability that you're talking about. The vulnerability you're dealing with is not having SSL enabled. It's 100% impossible to secure **any** auth without SSL for the case you're talking about (where you can intercept traffic in a read-only manner). Where poor cookie auth comes into play is when you can predict an auth cookie *without ever seeing it*. In this case, you can forge any token knowing any other valid token. In other cases, you may be able to predict valid tokens (via flawed random number generators). But the case you're talking about is literally impossible to solve for the case of unsecured wifi *without* SSL...
About == string comparison, take a look at http://rdist.root.org/2009/05/28/timing-attack-in-google-keyczar-library/ and http://rdist.root.org/2010/01/07/timing-independent-array-comparison/ When dealing with general web apps, the actual attack would be probably mounted from the same data center where the victim application runs, so it gets more practical for the adversary (no need to deal with "over the internet" setting). I opened an issue about a few things that caught my eye on the Encrypter class (including the timing side-channel): https://github.com/laravel/framework/issues/4130 I did not have the time for a concrete pull request, but those pointers should get you started. I'll try to watch and comment the issue.
Quick question: If you refresh the token on login, does that mean it will be impossible to have multiple computers logged in to the same account with remember-me?
So now you create user frustration since I can't be logged in on both my computer at once. Think how frustrating it would be if logging in into facebook on your phone would log you out on your computer.
I definitely feel like I made the right choice in dropping Yii and switching to Symfony2 for all my applications.
This was already addressed.
Yes, but I just fixed this an hour ago or so.
Yii was originally created by a person with Chinese as their initial language. English was probably not the primary language of whoever wrote this. 
I'd love to hear why 
Have you thought about opening up an issue on their repo to point out this problem?
I was kind of young, Im not doing that now. Also its not like I messed with their accounts or something
Not the OP, but I'm in the same boat. Switched to Symfony2 because: * there was a lot of tight coupling in Yii 1, and it seems it hasn't gone away. For instance, using a different ORM was a pain. Testing was a pain. You couldn't mock objects accessed through the global Yii object like the request object etc. * Symfony has powerful console commands, and you can add your own. Yii's idea of a console application was underdeveloped and I personally had a lot of unpleasant experiences. * (at the time of switching) Composer support and fully embracing a modular, anti-NIH architecture. [From the looks of it](https://github.com/yiisoft/yii2-framework/blob/master/composer.json), Yii2 doesn't use any 3rd party packages and I guess they wrote everything from logging to file system access to migrations etc.
That's just the core. [Here is the fully fledged composer.json](https://github.com/yiisoft/yii2/blob/master/composer.json). You're right that Yii mostly writes it's own stuff (though I tend to like their stuff more than anything else I've encountered, so that's on me). Their release notes show that they're moving in such a way to lighten the coupling - but it's very clear they're new to it. [Yii::app()](https://github.com/yiisoft/yii2/blob/master/framework/BaseYii.php) (in v2) appears to be a container, where everything it gives off is injected into it, so the Request and Response objects are probably injected from the default implementation of the Http manager. I've honestly had nothing but pleasant experiences in Yii - so it might be we just like doing things a bit differently.
I think reading that gave me cancer. 
Well, one reason why I like frameworks that use already existing packages, is because I can move between them easily. For instance, I switch between Laravel and Symfony easily because Laravel uses a lot of S2 packages. It also means that per total more people use the same packages, therefore bugs are easily spotted etc. Regarding my Yii experiences, I wouldn't say they were entirely unpleasant. On the contrary, there's no better feeling than starting a project with Yii because you can get so much done so quickly. The bad part of Yii comes after 8-12 months with a project. I found it very hard to maintain, and it's mostly because of the tight coupling. 
Lipstick on a pig :/ Let wordpress die.
This is exactly what WP needs to be honest. Wordpress should be STRICTLY a back-end / admin / content-entry area, and then you write scratch code to create the front-end app for it. The amount of time I've wasted trying to shoehorn a complex site into Wordpress boggles my mind (not by choice, mind you... client insistence).
As someone who develops in Wordpress, believe me when I say I understand its flaws. This project is borne from no small amount of pain. The fact is, Wordpress isn't going anywhere any time soon, so why not try to improve the experience of working with it?
I completely agree with what you just said. I hate working on wordpress, but some clients insist on it. Hopefully, this will make working in it more enjoyable. 
&gt;The amount of time I've wasted trying to shoehorn a complex site into Wordpress boggles my mind I don't know your particulars, but i've built some fairly complex apps using wordpress as both a backend, and frontend without much issue at all. It all boils down to planning and determining what you need and your solutions to it from the start. I know the addage "if all you have is a hammer, all problems look like nails", to which I say, "fuck it then, im the hammer guy, Ill get good at hammering"
What?
If you read the [documentation in the "Symfony Book"](http://symfony.com/doc/current/book/forms.html) you may think it's tightly coupled. That's the documentation for the Symfony full stack framework, the forms being a part of that. You may want to start in the [component documentation for forms](http://symfony.com/doc/current/components/form/index.html), which show how the library can be used standalone. That documentation shows the forms working with other Symfony related libraries like Twig, but it does not require them. &gt; tightly coupled with the framework itself, models In Symfony "models" are plain old PHP objects, just "hydrated" using Doctrine. You could use your own generic objects with Symfony Forms, or arrays, etc.
Does your time cost less sometimes? People should really understand that the time is the only really scarce resource in our world. 
I like it! Would Sketch be a good starting point for a Wordpress plugin or would that be overkill?
What blows me away are those that use it for anything other than a content site because it happens to include user/authentication. It's a Content Management System. Honestly I don't think it would be as popular if Drupal wasn't such a bloated mess.
That sounds pretty awesome. As someone who switched from WP to Laravel, what would be your selling points to me for checking this out? (I feel like there's a grammatical error with that question but hopefully you get the gist of what I'm asking...)
I'd say it definitely depends on what kind of plugin you're making. So far I've been using it to create admin menu pages where site admins can manipulate data, and also setting up domain logic "as a service." So for example one application needs to "sync" wordpress data with an external API. I basically defined the external API interaction stuff as services, then let the IoC container inject the services into my controllers. Sketch was really good for helping me manage a handful of different data types, while keeping all that API stuff organized in a logical and sane way. I'm not sure if that answers your questions directly but should give you an idea at least of how *we've* used it.
Absolutely, thanks for clarifying! Never got into Wordpress development, but maybe this will do the trick for me. Thanks!
It was created in a development shop that does both Wordpress and Laravel development, and it was created because we realized how awesome it would be if we could take some of the great lessons we'd learned from the Laravel community and make them applicable in Wordpress. So, if you like Laravel development, and you're in a situation where you need (or it just makes sense) to use Wordpress, and you also need to include some moderately complex application logic, then Sketch is something you might want to check out.
Nah they totally got css down: http://i.imgur.com/NwCUyAQ.png
Alright. Well, I've starred the repo and I'll save this thread to remind me at some point. Are you guys planning to actively maintain this project or is it more of a proof of concept sort of thing? Edit: Forgot to say thanks for making this and again for sharing.
I would argue it's not even a good CMS. It's meant to be just a blog. Sure, you can create cusotm post types, but you have to write code for that. Out of the box, it does not support unique layouts or even custom taxonomies. Not that coding these is necessarily hard, it's just not something you can get out of the box. Many theme frameworks offer you more in this regard, but that's another layer of someone else's code and "documentation" you have to wade through. Where I've found Wordpress to really fall flat on its face is when you try and make it do things with its URL structure, breadcrumbs, or sidebars that it just doesn't want to do. I had one project where the client wanted a 100% custom information architecture (involving the structure of their URIs and breadcrumbs), with REALLY complex sidebar &amp; widget placement rules. Pages X Y and Z needed a sidebar of this color, but then page Xa, Zd needed different widgets etc. Meanwhile some of the widgets were actual navigation boxes, so if you were on page Zd, you needed to show that menu link in bold with an arrow to indicate that was the currently active page... Also, I needed to REVERSE the normal URI structure of custom post types. I created a Case Study custom post type. And normally you would have a uri like /case-studies/some-category/case-study-1 But they wanted /some-category/case-studies/case-study-1 /different-category/case-studies/case-study-5 whereby `some-category` was more like a context thing than a category. I've implemented something similar and far more complex in Laravel for a gaming site, whereby the URI was `/leagueoflegends/tournaments/touranment-1` or `/starcraft2/forums/forum-35`. Doing that vertical IA context vs horizontal IA context is easy in a framework. If you try it in Wordpress, it attempts to rape you. I probably could have made my life easier with some rewrite rules, but somehow I managed to do it without them and without hacking WP core. I forget how I did it and I never want to attempt to remember. Ever.
We'll be using it for those "moderately complex" WP apps for the foreseeable future. We're a small shop but we already have a couple of those in the hopper. So it will definitely be maintained and features will be added, and people are free to make pull requests or just ask for new features and bug fixes. That said, it's small enough that I think it would be really easy to create your own fork if you needed / wanted to. So to that extent it also serves well as a proof of concept. In a way the "proof of concept" aspect is more the thing that gets me excited about this project, because it shows that it really doesn't have to take a whole lot to interact with Wordpress in this more organized / maintainable / testable and SOLID way.
I have been pretty hard on the php hobbyists as of late so I thought I would be nice this time. It would be best if someone put a bullet in Drupal, Joomla and Wordpress as quickly as possible.
&gt; Does something as common as a password reset need to be fully spec'd out? "It depends". Who's your target audience? How much time is it going to take to write the spec, and would it be faster to just ask directly? There are always trade-offs.
Agreed. The funny part about Wordpress and WP themes is they include really complex shortcodes that are no simpler than writing HTML. So what you have is a fucked up situation where you've given a client a CMS that was intended to allow them to enter their own content, but they can't, because the shortcodes are too advanced for them. So the primary reason why you built a site in a CMS rather than a framework with CMS-like form fields, is now moot... Content Management Systems are incorrectly chosen as the tool for most jobs because there is very out-of-date thinking that custom code is expensive and takes longer. That's no longer the case. PHP as a language, and the framework scene allow for rapid construction of relatively secure, complex sites. Authentication? Symfony and Laravel make that a snap. CMS-like behavior? No problem. Custom pages and URI hierarchy? Easy. Integrating 3rd party payment gateways and APIs? Cinch.... You can build better, more stable, faster, more secure custom sites more quickly with custom code than you can via a CMS and 2938742934 different plugins which may or may not conflict with one another, have little-to-no documentation, and are likely full of bugs. Really wish this paradigm of "CMS = short dev time &amp; cheap, custom code = long dev time &amp; expensive" would die. 
I tend to argue a lot
You know it's completely f^^ked when there are listings for "senior" Drupal programmers paying upwards of $90,000/yr. Might as well say "yeah we need a Fisher Price level programmer that never learns enough to abandon the bloated pig we keep riding".
-_- where did I go wrong in life :(
I personally love https://www.lucidchart.com It isn't language specific, but it is the best modeling tool I have used. 
it's the same thing, and you actually can do this in 1.x, you can replace existing components with your mock.
We are in a bubble for sure. It makes perfect sense. Wallstreet has been allowed to steal 100 years worth of future money and all those drippings have been made into gravy for the VCs and private equity. They have to launder and pretend to invest all the money and tech is the easiest vehicle. I mean seriously look at that latest facebook acquisition .... are we really supposed to believe that a sexting app is worth $20 billion .... please. All the symptoms are there. Know nothing MBAs acting as managers calling themselves "technologists". Programmers with ten minutes of experience labeling themselves as experts because they wrote their first Ruby Gem and it didn't tank the DB immediately. Blog after blog hyping supposed innovation while every deviant framework is labeled as the next big thing. It's just a giant hype machine with a handful of real privately owned tech companies giving it some credibility. If you want to understand how completely screwed we are just read this article: [Who would fund the company mentioned in this article .... that's the real story ... not the hype agenda they are pushing](https://shine.yahoo.com/healthy-living/female-ceo-gets-hit-on-in-email-from-potential-employee-153536376.html)
Well said, when I started at my current place they were using Wordpress wihtout any framework and just a lot of third party plugins but over the two years I have been there we have created something very similar to your Sketch and have found that Wordpress plus a decent MVC framework is actually pretty good! Any reason why you haven't used Timber/Twig for your views?
Your specs are fine. There is no such thing as too much detail in a specification. Be flexible and willing to make some changes if the implementation guy discusses them with you and has good reason. 
&gt; What am I missing? The guy you met is an idiot that is still stuck in 2002? However, CI only brings you up to 2007. The whole project is now deprecated and dead.
Yii is great for writing small quick applications. I'm not too fond of the tight coupling and no use of namespaces. I'm also not a fan of ActiveRecord, I prefer a datamapper pattern. I only recently started using composer and it sucks that yii has no support for it. I'm currently a professional Java dev but I use php for small/medium sized fun web applications I like to build. Symfony2 seems better to me and closer to what I'm used to.
Yii 1.1.14 has support for composer, and Yii 2 has LOTS of support for composer. Yii2 was a complete rewrite, so it's not really appropriate to focus on Yii1 in this context
The guy you met is either just a hobbyist, a masochist, or an idiot. Writing PHP from scratch for every project is not only stupid, it's slow, bug prone and insecure. That's like someone telling you they refuse to use power tools to build a house because they're a "pure hammer and nails guy". The drawbacks to using a framework are dependent on the individual framework - with one like cake, there are few drawbacks and multitudes of pluses. For example, a CRUD framework could take you a few hours in "pure" php. In Cake, it takes about 5 minutes. Please be aware that CI is no longer actively developed though. Don't use it.
Moodle? MOODLE? HAVE YOU LOOKED AT MOODLE'S SOURCE FOR FIVE SECONDS? Moodle is the poster child for what not to do in PHP, or any programming language, ever. Moodle is by far the most undocumented, barely working, hacked together mess of idiotic spaghetti code from hundreds of developers with no direction or maintenance whatsoever. Moodle should never, ever be put in the same context as "great" unless the word is followed by "big steaming pile of shit." (Can you tell I've had to work with Moodle yet? Reading it's name triggers me into a PTSD-style fit of rage.)
Yii2 may be a full rewrite, but it's still Beta. Like I said, only just started using composer... could've sworn everywhere I've looked I've heard composer doesn't work with yii. I'll always turn to Yii when I need a quick easy application, it really is great for getting things going fast.
Pure = Basic/Naked Pure != Hipster Pure
I reject what most people say here. There are different ways to go about php development, and depending on your needs it _could_ be that a very simple *pure* approach is desirable. You don't _need_ a router. A webserver can act as a router for you, and files in a directory can be your individual routes. Maybe he doesn't need a database, and if you don't need routing, even micro-frameworks become unneeded. However, I've met very little people so far that opt into that approach and fall in the category 'know what they are doing'. Most people with that opinion tend to be not that great and resist change. So I do understand that most would assume this guy would be in the latter group, but objectively I feel that there are certain scenarios that call for something a bit closer to bare PHP. Just ask Rasmus ;)
Honest question here, if you were to not use a framework and do something from scratch. This would give you more understanding of how everything works and give you more experience for in the future, right? Which is good for learning?
I know a guy like this. He went on to tell me all databases should have one table only. Also how all files should be in the same folder. 
Can we please have a moment of silence for CI? It taught me so much until I moved to laravel. 
Honestly, I still don't understand your question and intention.....what is this "domain object SQL statements go" ? domain objects do not have SQL statements.. domain objects belong to domain layer while SQL statements belong to infrastructure layer...they should not mix..
I pity whoever has to work with the code you output
ಠ_ಠ I love robclancy so much. He teeters the perfect edge between troll and legit
Yeah, but I wouldn't be where I am today if it wasn't for 12 year old me playing with e107, then joomla and wordpress. Which is why I find it hilarious that people pay others to set up those sites for them.
Why do you hold this opinion? The now-deleted comment was particularly ignorant. http://www.reddit.com/user/3DGrunge
**If it's a core business function -- do it yourself, no matter what.** ~[Joel Spolsky](http://www.joelonsoftware.com/articles/fog0000000007.html) This is the rule the great developers that I personally know use. It's a good one, and the linked article explains why. So how does this pertain to frameworks? Is the website, as a whole, a core business function? If it is you had better build it yourself or commit to building an uncommonly strong relationship with the framework team. Here are some examples from the article which hopefully helps clarify how this might relate to frameworks: &gt;If you're a pharmaceutical company, write software for drug research, but don't write your own accounting package. If you're a web accounting service, write your own accounting package, but don't try to create your own magazine ads. [...] &gt; If you're developing a computer game where the plot is your competitive advantage, it's OK to use a third party 3D library. But if cool 3D effects are going to be your distinguishing feature, you had better roll your own. Note that I have purposefully not stated whether using a framework would infringe on a core business function. This is something that must be decided for each project; you can't make a blanket statement for all projects in this regard.
&gt;That's not a compelling reason to avoid it. Unless you're actively improving the core codebase to keep up with current standards and functions, it absolutely is a reason to avoid it.
&gt; It's possible he's written his own set of libraries and developed his own "framework" which he uses for every project. Then he worded it quite poorly.
&gt; To be fair, plain 'ole PHP has become a better language to use out-of-the-box in the past few years. It's not just a hammer and nails. It's a full toolbox, sure. But not using a framework for anything bigger than a hobby project is just a waste of time and potential problem. 
&gt; Unless you're actively improving the core codebase to keep up with current standards and functions, it absolutely is a reason to avoid it. Please explain. I really can't agree that "not maintained therefore abandon or avoid" is rational.
Sure, absolutely. To be honest, that's how I learned and it's made using frameworks a thousand times easier because I can inspect things I'm curious about to understand how their functionality is played out. There's nothing wrong with learning either way, as long as you're learning. I'm speaking purely from a "getting shit done" standpoint.
Same reason as it is for why using Windows XP now that Microsoft don't support it is a bad idea. Some hacker comes along and identifies a key security flaw in the framework, nobody else would really care any more, so you have to. You'd be building on top of something knowing full well that it's already out of date compared to the alternatives, and you'd also know that was only ever going to get worse. There are probably a lot more reasons than just those few, but even those alone would be enough to put most sensible people off.
There are several reasons to avoid an unmaintained project: 1. It's not patched for exploits. Out of date frameworks are one of the highest moving targets in the malware world. 2. The older it is, the less new standards and functionality it implements, so you will find yourself able to use less and less baked in methods in favor of more efficient ones that you have to write yourself. 3. It keeps you out of date with the community. By pidgeonholing yourself in a codebase that hasn't moved forward in years, you're sticking to things that are no longer innovated on and may even be abandoned for good reason by the rest of the development world. 4. Deprecation will apply. As PHP moves on and improves, old APIs and function libraries (like the mysql wrapper) will be depricated and removed, leaving any library using them in need of updates to even be functional on an up to date system. 
Heh. :-)
This was exactly my experience (and continues to be, I suppose)
&gt; Same reason as it is for why using Windows XP now that Microsoft don't support it is a bad idea. Completely different. You can't modify XP (for example) nor is it simple enough for a novice to inspect and modify. You didn't really point out anything else of concern.
Twig and Timber look fantastic but for Sketch I just wanted the simplicity and general tininess of Plates. I don't much mind using straight php or even "the loop". Sketch is basically only concerned with making it easier to build out application logic.
BTW, I've gone back to look for what I messed up. Can't find it for the life of me.
100kb php file? What on earth is the responsibility of that file? Implementing the book of Genesis?
Or they could use QT. That's a better option in my opinion. Using QT and C++ for the maximum performance with the cross platform interoperability.
For most things there's absolutely nothing wrong with using a framework, unless you're trying to learn or it's a mission critical application. If it __needs__ to be online or working at all times, write it yourself and extensively test your code. Don't rely on someone elses' work. Other than that, go nuts.
100Kb file is pretty hard to manage. I agree that this is too much for useful file.
If any other PHP framework shipped with a default user/auth system out of the box, developers would flock to it, and some of the wind would be taken out of the WP juggernaut. It would not die instantly, but many projects default to WP as a base because of the turnkey functionality it provides. 
You are welcome! And thanks!
For freelancers or businesses who are into the business of creating websites for clients, then the php framework they use isn't really the core business function. it's more about the efficiency of creating the websites for the clients, so that means making use of design templates, a well-known php framework, etc. but if you work for a company whose core business is a website that does software-as-a-service, this is a case where you'll make big gains by rolling some, if not all, parts of your application in house. all this depends on the kind of team you have, as you need to know what you're doing. this is what was/is being done in yahoo. php frameworks were a big no, a lot of the routines are turned into apache modules and php extensions, etc.
What does error.log say?
Dude... split the file into like, 20 different files and call each other... Then you can locate which file is erroring... Also ini_set('display_errors', '1');
I was starting to develop in CodeIgniter and PHP (with some wordpress scripting in the past) coming from Django. I had decided I didn't like codeigniter or php about halfway through a project. Then I discovered Laravel and programming has never been so much fun. It (along with php 5+) will save this language.
CI is a compelling reason to avoid it.
Im getting real tired of hearing these black and white opinions from framework purists. Face it, from what he's told us, there is no single best answer. Clearly writing pure PHP is more work than adopting a framework, but over time you build up libraries and if you're competent and willing to put the extra work in, there's really not much difference. I imagine a few years ago you were also advising people to use CI, and now all those people are stuck on a shitty obsoleted framework. So in the interests of impartiality, your advice should really read 'use a framework, and then when that framework dies spend just as much time converting it all to the latest new fad'
I think Spolsky always goes too far in his preaching, but generally speaking it can be interpreted as 'if you commit to using third party tools, make sure you can pretty much guarantee aren't going away anytime soon'.
I don't understand why someone would want to rewrite the same core stuff every time. Using a framework gives you a solid foundation to build apps with. Personally i would look into laravel as a php framework. It uses components from symfony which are rock solid and always updated. It also uses composer for package management so adding functionality is as simple as a single command. I can never understand the logic of going for "pure php".
I'm a bit confused as to how to use it. This is basically a stand alone framework that you include into the theme's functions.php? Then it is used in the theme, plugins, etc? If this is the case, I'd recommend you change your instructions to have them put a loader.php file in the mu-plugins directory which does the require, so plugins don't instantly break when the theme is changed. I also think the project should always be created in WordPress's root. I have a lot of experience with integrating Composer &amp; WordPress, and one issue you'll want to avoid is accidentally having multiple vendor directories, putting the vendor directory in the root of the site would help mitigate that. Overall I like it though, a bit too custom for my shop (they like having everything in neat plugins), but a cool idea none-the-less. Right now I'm building a plugin which will automatically handle other plugin's composer dependencies when they're installed, this might integrate well into that, or at the very least I might steal your code for the routing ;)
MySQLi can be useful in some instances, but there are two main things that go against it in my opinion. Firstly, it does not support query parameterization natively. Secondly, it is being depricated in PHP as of version 5.6. The async option is great, but I have never seen it personally used in any project I've worked on and is not great enough a feature to outweigh the benefits of the more modern PDO driver, which falls more in line with that PHP wants to be more OO as a language. Anoter benefit of PDO is that it supports multiple data sources and not just MySQL. And, with regards to this code base I'm currently in, they certainly did not design it with any of mysqli's unique features in mind. :)
A much better concept is to make sure *you're involved* with the things you use. If you don't contribute to the framework you're using; don't help fix bugs; don't give an opinion on the right way to do things; don't help keep the community positive and growing; hell, be lazy and simply contribute financially! Then you are missing every opportunity possible to make sure the thing you use continues to be healthy and does what you want it to do. Like 10 people in the world maintain OpenSSL, and millions use it. And those millions get frustrated when it doesn't work like they wanted to... wonder why.
The moment you make a change to CI core, you essentially fork it. That change has no chance of being folded back into the framework unless someone takes it over and starts developing it again. You are deviating from CI. You can not depend on collaborators knowing how you have changed your fork. You can not expect support for those changes unless you're asking people to help with custom code (as opposed to CI code). There's nothing wrong with patching undeveloped frameworks. You just can't treat it as a framework in every way you were doing before...
You say that. I just heard Dustin Whittle talk about his time at Yahoo, migrating a number of properties to Symfony...
In My very limited experience pros and cons of using pure php are : Pros : * You understand how things work. * You have control on how things work. * You can easily change stuffs you want Cons : * Security * Your code Maybe Buggy, so again a Security problem. * Might take some time to develop what you want, as you might have to go through the framework (if you are new to framework). In conclusion, its better to use pure-php if you are making something "customary" and you are experienced enough whereas if you just want another content based site (like a blog or news site,etc), go ahead with using a framework. Also if you are new to PHP please stay away from frameworks tilll you are confident enough. 
While I agree with you, one recent change in PHP development is the rise of PSRs from the PHP-FIG. If their goal is recognized, the standards for interfaces will be defined and improved as part of the communities best practices and research. Each framework out there will ideally follow these interface guidelines, and the obsoletion of frameworks will become less of an issue.
lets assume you want to go from New York to Florida. Using "pure php" translates to just walk the whole way, whilst using a framework (try laravel instead of ci) is like sitting in a well made car and drive down there -&gt; for free. It´ll still take you a while, but its way more comfortable, faster, secure and even more fun. There is very few reasons i can think of when "pure php" is the right choice. 
I need a server that does simple crud on 3 tables and serves json for a mobile app - what framework do you recommend? I just used plain php/PDO myself. I think it was the right choice for that one.
Cannot read it right now but this might be the article that made Jeff Atwood (his later cofounder for stackoverflow) blog about how Joel has jumped the shark.
First you should check to see if the files permissions are right, it should be 0644, some servers don't allow you to open files that have read and write permissions for group or 0664. Second you should check the server logs for errors, this should tell you what is not working. Third see if there are any syntax errors, includes that don't point to the right file. Echoing stuff before and after includes helps track which one is giving you trouble.
If I only had time for more solid contribution.. Maybe someone on the Yii community can sort this out. I don't have a "detailed guide" to point to on implementing encryption, but earlier I wrote a short post about common mistakes and "quirks" related to data encryption in web apps: http://timoh6.github.io/2012/08/21/Cryptography-in-web-applications-a-false-sense-of-security.html This post should give you some pointers and get you started.
I'd claim exactly the opposite, frameworks are great tools for smaller projects, where deployment speed is important. When talking about large projects, why not spend some extra time in having total control over the code. Knowing what every single line in the code does. Doing your project's framework from scratch might be more work, more error prone, but for a competent developer with enough experience building such projects... With frameworks changing, evolving and just dying over time. Doing it yourself could be the safer, better bet to make.
I know very well the example he's referring to, because we use the same framework and it does this thing: XML configuration is versioned by namespace. Much of it comes from the framework itself. The XML configuration is compiled into PHP initialization statements, so there's never configuration parsing in production. One of the requirements of such setup is that you should be able to upgrade the host framework without breaking the application. The framework expects new XML configuration format from the application; but if the XML files are in the old version, what the framework does is applying XSLT transforms to interpret it as a new format, and *then* compiles the result into PHP code. Unfortunately, neither JSON nor YAML have strong and standardized processors available that can do namespaces, transforms, querying, and schema validation. To my eye, JSON is worse in readability than XML (almost as bad as PHP's native serialization format), and while YAML is better, it is only marginally so, because of strange @symbols, [stuff] and syntactic whitespace. Frankly, in this particular instance, the proper use of XML by the framework has spared us so much hell, it is kind of an eyebrow raiser when other people say that XML is kludgy or dying out. 
sorry, my comment was based on years 2006 to 2009. back then there were already engineers trying to introduce symfony for internal stuff but were having a bit of a hard time trying to keep it patched in accordance to internal security requirements. that was still symfony1 though, i think. for everything external, they were all developed internally. they also pushed out a lot of code into php/mysql/apache since they had a lot of experts/contributors employed (Rasmus was still with Yahoo then).
&gt; They may be more than you really need. That's why I rarely use frameworks. I have a couple of libraries for the basic stuff that I have already written and used in other projects and I just re-use those over and over. The rest I write when I need. I mostly do small mobile websites and using a full framework seems like an overkill. It may also be the fact that for these small websites the maintenance/troubleshooting job seems easier when I'm not using a framework.
IMO, PHP's biggest woe is not the misguided evolutionary process or the many software defects and idiosyncracies it has, rather it is the very low bar of entry that allows people with minimal interest in programming as a discipline and a negative sense of aesthetics to produce useful results quickly, and then feel like they are entitled to opinions. Somebody above ITT produced a couple of examples.
Yeah - Rasmus is not much a fan of frameworks is he? :) Dig them both - great guys. They were both speakers at phpsouthafrica.com...
Couldn't agree more. All of the "lol frameworks" people I've seen were undisciplined hacks who think their code is amazing because of how big the codebase is. What's a unit test? What's a design pattern? What's documentation? What's an autoloader? What's a namespace? Pah, such things are for academics and architecture astronauts. A real coder writes code, thousands of lines at a time.
You have to better define "core business function" here, I think. There may well be unique business logic and functionality, and those can and should be built yourself. But you could say "it's a core business function!" to pretty much every aspect of development and you'd end up writing it all yourself. Your website might not be a core business function, but the API is. Your application might not be a core business function, but the transaction engine is. Your dating site might not be a core business function, but its matching system is. IMO this argument is valid, but you have to refine what exactly the "core business function" is *within* the application.
The fact is that frameworks, like a lot of things, increase in value with scale. Many times frameworks aren't sold particularly effectively because they are shown with trivial examples. Getting the users from a DB with PDO isn't exactly any harder than with an ORM, it's when you have a hundred different models interacting through a dozen controller actions... The value of a framework certainly becomes clear. The best thing about frameworks for me isn't the utility or ease of use they provide, but structure and consistency. If that's not useful in a project (and let's be honest, sometimes it's not) then you're right. But I think frameworks are more often not used when they're needed than used when they're not.
More... CI is so old now that when it got a bit too crap and behind the times someone forked and upgraded it substantially, and even **that** is now dead. It's not just old, its *children* are old.
I'm doing exactly that. I used Laravel. :)
Absolutely! Also building a framework from scratch should be a learning exercise for all PHP programmers and it's also great fun! Write a router, write some MVC infrastructure, write a template engine, and then ditch all and use Symfony/Lavarel/Whatever for Real Work ®.
Seriously, though, at what point are you just no longer using Wordpress? I mean, if I buy a Datsun 120Y and replace the engine, chassis and electrics and body with Chevy parts and then start saying how great my Datsun is now... aren't I kind of kidding myself? Why not just use something from the start that isn't a rancid cunthole?
Here is another feedback. According to my french diploma, I'm supposed to be a software engineer. I learned (a long time ago) design patterns like MVC, and I witnessed the raise of such designed frameworks in almost every languages I know. However, when I started coding in PHP 2 years ago for a job, I choose NOT to use: * neither a MVC framework, * nor an ORM layer, * nor a template engine. (edit: I however picked up a REST application framework: Slim. See bellow) I did so because I knew there was going to be equivalent layers elsewhere and adding extra layers of complexity didn't worse it. The explanation is that I was asked to develop a single page web application with a lot of user interactions backed up by AJAX calls. In such a context, there is already a de facto MVC pattern: * a view layer (the HTML5/JS code) * a model/business layer: the SQL database * a controller layer: materialized by the REST API * and a middleware to glue all these layers together: Apache/PHP and HTTP In such a context, you also won't need a template engine on PHP side if the work is actually done in the browser. On my side, I used a CSS framework (Bootstrap) and a MVVM framework ("knockout.js"). At last, I don't need ORM on PHP side because I don't need Object Oriented programming at all. The PHP code essentially consists in querying the database, building up associative arrays, and serializing them to json. The code is so straightforward that I only used OO PHP to define "ressource" classes with static GET POST and PUT methods. To be honest, I eventually picked up a couple of libraries including: * "Slim" which is a REST-oriented "*micro-framework*" * "NotORM" which generates SQL queries for me like an ORM layer would do but without the OO boilerplate code. Now that the application I'm working on is at the end of its life, I'm not even sure that I really needed these libraries. PDO is a good enough "database abstraction layer". And the only thing that Slim brought me was cookie based sessions. edit: I think now I underestimated the advantages of *Slim*. It really helped me in structuring my app while hiding the average PHP nonsense (super globals and such). I also used "Tonic" before for a smaller project and found it very efficient to develop a small PHP based JSON/API. 
I posted this as a comment to something else, but... Seriously, though, at what point are you just no longer using Wordpress? I mean, if I buy a Datsun 120Y and replace the engine, chassis, seats, and electrics and body with Chevy parts and then start saying how great my Datsun is now... aren't I kind of kidding myself? Why would you use scattered parts to make something bad "barely adequate" instead of working with something good?
&gt; Firstly, it does not support query parameterization natively. Yes it does. It does not support *named* parameters however. &gt; Secondly, it is being depricated in PHP as of version 5.6. Source? [This page](http://us3.php.net/manual/en/migration56.deprecated.php) does not mention it.
Important to note: this is the **WordPress.com** parent company, Automattic. Not really anything to do with the WordPress Foundation or the software itself, so not really relevant to /r/php. **Edit:** FWIW, the [Mashable](http://mashable.com/2014/04/15/wordpress-automattic/?yafdafd) article is a bit more accurate (was [just updated](https://twitter.com/film_girl/status/456449135822917632), so might still be cached).
The Wordpress foundation was founded by the Matt of Auto(matt)ic. Same dude behind both.
It's not really related to stackoverflow. There's a good lot of job offers there, and what's great is that the offers are really detailed, and most of the time are very interesting.
&gt; No, it's called being a professional and keeping up with the industry I totally disagree, as a professional. What you work on or with, has no bearing on being informed. You're implying a correlation, where there is none. &gt; The technical reason is that it is no longer developed. This is not a technical reason. If a project is no longer being developed, you stop using it? Think about that for a moment. If you have written code and are using it in production, where it "is no longer being developed', you should replace it? Are you really identifying pieces of code nobody has touched in awhile and replacing them all day every day? Fit for use is different than modified lately. My tests are my benchmark. &gt; You are literally arguing against one of the most widely accepted paradigms of the software world. It's not a "widely accepted paradigm" (strange cliche to throw in there). I'm speaking to the characteristics of what we're discussing. A framework is not a library of functionality, it's simply a methodology for organization. If you're using a framework for something different, you're going to run into problems either way (for whatever value you want to assign frameworks today, A &gt; B or today B &gt; A whatever). 
Good to know, however does Automattic contributes to Wordpress (in terms of development)?
&gt; You probably won't even know about the security flaw if you're running some increasingly-obscure piece of software. CI is anything but obscure. It's laughably obtuse.
On top of what catime said, what novice would be able to inspect and modify your PHP application? If your application is THAT simple, then don't use a framework. Otherwise, I just don't see why you'd choose an old, unsupported framework to make anything new in. Personally, in projects I work on, and also where I work actually, we never modify vendor code. We build on top of it. Simply because when it comes to deploying the application, or creating a new dev box, all the changes to vendor code would be gone. We can let vendors handle updates, and update accordingly. A luxury you would not have with an unsupported framework. At the end of the day it's your own choice, but I think it's better to learn something new, progress as a developer, use modern tools where you can because otherwise you fall behind. If there was a security vulnerability in as modern framework, that was being maintained, you could simply open a pull request with some code of your own to fix it, or at least submit an issue. Another thing you can't do with an unsupported framework.
&gt; then don't use a framework As with most of reddit, framework is often maligned to mean more than it does. A framework is a way of organizing implementation. It's not necessarily clean or right. A framework is necessarily convenient and useful, to an arbitrary degree. Everyone has some framework for any project larger than 1 file. CI is fine, as a framework. It worked, still works, and I was hoping someone would point out a conflict with a contemporary set of useful modules. I haven't seen it in practice or theory.
No, it won't be. In this case use the framework as the glue between request and response and split your actual business logic in such a way that the framework is just a detail. A homegrown framework will work well... For the few weeks months it is actually being taken care of then will languish and rot as the original developers leave or abandon it.
&gt; A homegrown framework will work well... For the few weeks months it is actually being taken care of then will languish and rot as the original developers leave or abandon it. In that scenario your whole project would stand just as little a chance, the business logic will languish and rot just as much. The "glue" won't do you much good. If you are to build your own framework completely, you need to aim at quality level just as good or better than what is publicly available. If you're not going employ good practices, such as documentation and standards... what good would a different framework do if you custom business logic is just as badly coded as the custom framework would have been? You'd opt for a custom framework, because it needs to fulfill very specific needs custom to that project. That doesn't stop you from using publicly available libraries, for instance to handle Routing. A code-library and a framework are not the same thing. 
IMNSHO - use whatever it takes to turn out easily understood, easily maintained, easily modifiable code i don't care if you write it from scratch or use a framework or make burnt offerings to the coding gods at midnight. the end justifies the means i've used frameworks and i've built stuff from scratch. i like frameworks for the time savings, i don't like frameworks because i've got to follow the framework's rules which may or may not be applicable to the particular business problem.
I put it in proper context. What do you think he meant by obscure? Either it's not well known or not well understood. I chose to interpret it by the latter.
I'm not saying you are right or wrong because of Reddit, I'm saying you're wrong because this is a popular opinion in the entire development community (that isn't just Reddit too). You have STILL ignored the main point of more peoples posts, including my own, and you yourself have not given ANY reasons FOR using CI. If you were spouting the nonsense you've been doing here, I'd be throwing you out of my building; you've not given a single rational reason for your argument, yet ignore every rational argument that is against your own, or taken them out of context. I think the fact here is, you are either very stubborn, or very reluctant to change and use modern technologies (which in my eyes, and a lot of others would make you a bad developer), or just a troll, which I'm starting to think is the most likely.
Ok, sounds good. Thanks for clarifying (and for a quick "fix")...
Sometimes my company travels out to our clients for a meeting or something like that. The meeting is billed at full rate but the travel time is billed as ( hourly rate / 2 ) + travel expenses. 
I mean, you missed the point about security. To retort though, I think it's clear that when he said "increasingly-obscure" he meant there will be less and less people working with it and the concepts used within CI would be getting more and more outdated and people wouldn't care to learn or use them any more. Therefore it'd be harder to get support for it, and as has been said elsewhere in this thread, you'd have to make your own fork of CI to improve it, which then you wouldn't be able to pull back into CI. 
&gt; you yourself have not given ANY reasons FOR using C It's a framework. It exists as a way to organize. The discussion has expanded to talking about which to choose and why. I think it's an existing, well tested (meaning there are known strengths and weaknesses), solution. There's no other reason. &gt; or very reluctant to change and use modern technologies I claimed an old framework is useable and is not necessarily something to be avoided. Please try to read what I post. &gt; (which in my eyes, and a lot of others would make you a bad developer), or just a troll, which I'm starting to think is the most likely. I disagree and articulate why. I challenge you and you fall back to "because of the community" or now calling me some form of luddite when I don't agree. I certainly haven't attacked anyone, I've just challenged and justified without misdirection or misinformation. You don't have anything more to say and sooo... now I'm possibly a troll. Got it.
Ouch! That's the kind of justification I'd expect to hear for that from someone whose idea of a database was an Excel spreadsheet. I'm guessing this chap has probably never built anything terribly substantial.
I'll agree the scope of this thread has expanded significantly. I wouldn't say you have the likeness of a Luddite, but I would say you seem to be stuck in the past, and fairly ignorant of the advantages one can gain from using modern technologies (and keeping up with the community), and you also seem to not appreciate the dangers one might face when using older technology. I would 'fall back?' to using the community as a reason because the community is what drives a significant portion of web development. Think about how many large projects now are made and maintained by the community. CI was one of those projects, and the community moved on to newer, better things. You haven't attacked anyone sure, but I do still think you could be trolling, and that's not the only thing I've got to say left. The pros you've listed for your choice are far outweighed by the cons listed by many others here.
I would use laravel for sure. It has RESTful routing and spits out json by default when returning. Perfect for an API.
&gt;What deleted comment? &gt;It is ignorant to think that frameworks for php actually benefit you. It is stupid and the sign of an amateur. I believe you are suffering from the Dunning-Kruger effect if you seriously believe that. 
By "pure PHP", I assume you mean "writing everything from scratch". In general, and I accept YMMV, but sod that for lark.
Frameworks slow down production. They only help people who do not understand php. The only one here who is an idiot but thinks they are amazing are people who think php frameworks are needed and or good for production.
That's correct.
So what happens when Taylor Otwell abandons Laravel? He's the only core developer. It'll happen eventually.
They may increase in value when scaling, but they certainly don't increase it in performance. The advent of the full page cache saddens me.
.. or you could do something unthinkable, like "learn proper OOP" before messing with frameworks 
Apparently, I'm an "undisciplined hack". I wrote my own PHP MVC framework (not full stack) using just PHP.
Lets not forget that Rasmus spawned an insecure mess of spaghetti code that took others *years* to clean up and fix. Rasmus' advice is the very last advice I'd tell anyone to take.
True, but JS at least has a specification..
This thread has been linked to from elsewhere on reddit. - [/r/ProgrammerHumor] [Working on some code... \[x-post /r/php\]](http://np.reddit.com/r/ProgrammerHumor/comments/236kck/working_on_some_code_xpost_rphp/) *^I ^am ^a ^bot. ^Comments? ^Complaints? [^Send ^them ^to ^my ^inbox!](http://www.reddit.com/message/compose/?to=totes_meta_bot)* 
It doesn't actually "replace" any of Wordpress. The WpApiWrapper class for instance gets injected all over the place, and all that contains is "__call". It relies heavily on native wordpress functions and datatypes, but provides the thinnest possible layer of abstraction in order to make that reliance mockable. Why use these "scattered parts"? That's just all that was needed. I'd say "barely adequate" is going to be relative to the purpose you put it to. We use Laravel for that which Wordpress can't handle and have developed a pretty good intuition regarding where to draw that line.
Yep, just one, but supported by a big comunity, i guess.
Honestly? I like it. It's cool. It breaks a lot of conventions for the sake of being a single page (you know, one class per file, etc). So I was wrong about it being shithouse. But it's also an edge case. Not representative of a routine requirement. Also, I think you misunderstood my point. I said that people who are "lol frameworks", by which I mean people who outright reject all frameworks out of hand in all situations. Not people who feel a framework isn't appropriate for a specific project. Maybe that's you, and maybe it's not.
And his advice and attitude continues to be regressive and obstructive.
&gt; have a couple of libraries for the basic stuff that I have already written and used in other projects and I just re-use those over and over. I bet they're reeeeally good.
I searched it and found a gz file with the user agents/times etc. Is there a php error log?
No it just includes a bunch of classes for database access and a few APIS plus html uincontrols
Can i make themes with ?
&gt; That said, IIRC Reddit has only two tables. Seems unlikely. You'd need a list of posts, a list of users, and a list of comments. Though... I suppose it's possible that comments and posts are the same table...
Unfortunately, I couldn't use git for the project
According to the rule you may use a framework if it is not a core business function. I think you misunderstood.
Is doesn't hurt to clarify enough posible bug about some software older versions.
Thanks, I'm a right tool-right job person. Symfony and the Raspberry PI were not very friendly, even for single-user use. I've been working on/with it for 8 months now; with the goal of having MVC that reduced Disk IO so I don't kill the SD card. Edit: I tried other micro-frameworks and then ultimately wrote that.
I'd strongly recommend keeping anything you build with Sketch separate from the theme. Instead, you'd build a thing in Sketch, then require that thing in your theme's functions.php file, or turn it into a plugin.
I don't really understand exactly what he's getting at here. Is he basically advocating using some PHP code to create a facade interface of the legacy app? I think he might be onto something, but the article is so short and lacking detail that I'm not really sure what the point is.
Hay dios mío!
if there is it will be defined in php.ini
[See here for details](https://kev.inburke.com/kevin/reddits-database-has-two-tables/). Apparently the two tables are Things (eg users, comments, links etc) and Data (which only contains the Thing ID, a key, and a value) It sounds absolutely bananas to me, but evidently it works for them.
You're talking about configuration data in this case though, and this could still be accomplished using JSON (though I will admit, in a configuration sense for this case, XML probably makes more sense). I'll also agree that JSON can appear to be worse readability without line breaks and tabbing, but I think it's actually easier to read, understand, and far more effective at creating data structures when you bring the proper formatting into the picture (and there are countless tools including built-in ones that will display it this way).
After hanging out with him for the last two weeks and hearing his answers to a lot of questions in Q&amp;A sessions I would not agree with you there. He is not always right, but to suggest that just because his code does not seem like as good of an idea now as it did 20 years ago is a fairly unfair statement to make. Do you like your code from a year ago? How about 10? 20 is insane. 
Well said. I've recently started taking the approach of using a "pseudo-framework" where you have a basic "framework" to bootstrap your DB, config, etc., but aren't tied to any of the framework-specific syntax and operations. You then cherry pick libraries to do your security, DB interactions, etc. for you, making your code secure, but still fast b/c you don't have the full overhead of a *framework* framework. This gives you the ability to write "pure php" without being an douchebag. Don't be a douchebag.
Sure, I might try and get involved with Sketch too.
Yeah thats the point of most modern "frameworks". Symfony, ZF, Aura, Laravel, etc all give you components that are coupled/de-coupled to some various degree, then you use the bits you want or grab the whole lot. Or, you pick and chose from random people until you have enough bits covered. People were doing that with PEAR before CodeIgniter/Cake/Symfony/Rails/whatever, it's just less gross now.
*sigh* I think I don't know. I think I need to take a break on trying to learn this stuff, take my learning and go back to using frameworks. At least with my new knowledge, I can better appreciate how frameworks like Laravel are organized. When I get more time or another bout of curiosity hits me (like this time), I'll go ahead and return to this topic. 
Calling me "stupid" in two subsequent comments surely shows how mature and senior you are, as an experienced developer. 
Actually he surprisingly has. But for some reason he's just very closed minded about the subject, even though he doesn't totally practice it. Most recently, he developed a "one page cms" which generates all the pages for your cms from one file. I have no idea how it works.
Because if you force control too much it usually leads to a "community edition" fork.
I believe so, but there's a huge community which is very involved. 
Seems like you need VCS, an autoloader (composer), and to break up all those classes into smaller more manageable files.
The company he works for uses it as well, so there's that.
Nicely done. Succinct and elegant :)
Way too much overhead. You’re using a sledgehammer smash a mosquito. I like laravel, I’m using it - but sometimes all you want is a fly swatter - three pages of raw php vs the entire laravel stack.
I do not use a framework, but I do follow the advice I learned from this "Clean Code" training I stumbled upon awhile back. http://www.pluralsight.com/training/Courses/TableOfContents/writing-clean-code-humans I love the tagline: Anyone can write code a computer can understand, but professional developers write code *humans* can understand. Every developer should have to watch it.
How could I make the integration with the composer? Folders and files that I put in the repository only for packagist?
Excellent information! I was especially surprised how precise the SVG timing attack was. Scary stuff...
thank you.
They are actually a huge majority of the developers behind WordPress. While still an open source project, it is led by many Automattic employees. * 3.9, lead by Konstatin Koshevin, and Automattic employee. * 3.8, lead by Matt Mullenweg, CEO of Automattic, and Audrey Capital * 3.7, lead by Andrew Nacin, Audrey Capital (Matt's company) * 3.6, lead by Mark Jaiquith, (Freelancer, long time contributor) * 3.5, lead by Andrew Nacin Obviously, takes a village, and all of that. But to think that Automattic isn't involved in WordPress development is to not understand what a vested (maybe to the tune of about a billion dollars) interest the company has in it.
I'd familiarize yourself with composer as well. Knowing some package management system will probably help in the interview. Review design patterns, the Head First Design Patterns book is a great resource and easy read. I'd also want candidates to know of SOLID, and to be able to speak to these concepts.
How much do you know about the company you're interviewing for? What are their expectations? do they use frameworks? Do they use composer? If their interview process is to hand you a blank piece of paper and ask you to write code, you should flee. You probably wouldn't want to work somewhere that would be that incompetent at evaluating a developer, because that would test all the wrong things. Not using frameworks is both an advantage and disadvantage. On one hand, frameworks have already solved a lot of problems for you, so not using one is reinventing wheels. On the other hand, it's valuable to understand the kinds of problems that frameworks solve, so if you have only ever worked within the confines of a framework, you might not be able to assess the difference between the different approaches that frameworks take. It shouldnt be too much trouble to pick up a framework if you've never used one before... 
I haven't watched those, but I highly recommend Uncle Bob http://cleancoders.com/
Clearly you do not understand programming. Exactly the kind of half assed php developer that gives everybody else a bad name.
At your level of experience, I'd expect you to be able whiteboard solutions, talk through software design and implementation oriented questions, and demonstrate communication skills - not recite details of frameworks. 
I think you have it backwards. I may not be the best php dev out there but at least I know that 3rd party frameworks for php are worthless and merely make it a pain in the ass to maintain code and finish projects. If you need a framework when working with php, you should probably go back to school or just step away from the computer. Name one benefit from using a framework for an experienced dev.
Until that mosquito becomes a swarm of mosquitos, oh and a couple of wasps too - extending the application to handle those unknown unknowns and being flexible to future requirements and change is where it brings value. But perhaps that mobile app is just a flash in the pan marketing app thats destined to disappear. In that case, no sweat. 
3.9 was lead by Nacin and Mike Schroder, not Konstantin.
I work for Automattic. We do ".org rotations", where Automattic employees are given the opportunity to dedicate their time solely to contributing to WordPress (the software) instead of WordPress.com (or whatever their current project is, like Akismet or Polldaddy or Gravatar). We also have a ".org team" -- 10 people or so whose full-time jobs are to contribute to WordPress software and community. Even if we're not on the .org team or doing a .org rotation, we tend to make regular contributions back to the core software, since we spend so much time working with it. For each recent major WordPress release, between 15% and 20% of Automatticians have had at least one "props" (or credited contribution) to WordPress core.
You missed shell_exec() If you want to run a shell command, i'd read the php.net docs on those 3, and find which one you think is easiest. They will all work. Since you mentioned RRD, there exists a php rrd library that might let you avoid using CLI tools.... http://www.php.net/manual/en/book.rrd.php
Like this: https://github.com/AttwFramework/Attw Ok, so I need create a autoload file to this directory. Right?
You completely misunderstand the purpose of a framework. You seem to be under the mistaken assumption that frameworks are there to make it 'easier' for people with lower skill sets to accomplish tasks. A framework exists to solve the most common problems you typically face when building a complex web application. Authentication &amp; session management, routing, form handling, logging, database access, Api development, etc etc etc. Not only are those problems already solved in a framework, they are typically solved in a much more secure way, and have been examined by many, many eyeballs to make sure it works as intended. So you end up with bulletproof, battle tested code that solves common problems that you don't have to then re-solve. All code has the potential for errors, no matter how capable/competent of a developer you are. Thats not a 'go back to school' thing, thats professional programming. So re-implementing any of the above stuff means the potential for creating more work for yourself, security issues for your clients, and unforeseen stability problems. You should pay particular attention to phil sturgeons comment here: http://www.reddit.com/r/PHP/comments/234shb/pure_php_vs_using_a_framework/cgtqw2u Especially the part where he describes you: &gt; In my experience, most folks using "pure PHP" are not hitting any of those criteria. They are usually (in my experience) dickheads who think they are better than everyone else, and who take a really long time to produce really complicated PHP code which is hackable as fuck. Just in case you dont know who he is: http://philsturgeon.co.uk/ 
No. It's good to try to learn these yourself. This is a good way to understand stuff. I think you just have to clarify your questions. If you don't know a term, just explain what it is.
Interacting with other programs/your custom daemons, processes etc - rabbitmq/zmq, i dunno, reactphp maybe (did not dig in this deep but it's kinda does many things). Executing outside commands - yep, exec. Why you are not satisfied with this? also http://www.php.net/manual/ru/ref.rrd.php But anyway, that's some interesting question. In my opinion, e.g. if rrdtool had only python libs - make python daemon that will lookup signal in zmq, than make php script fire that signal whenever you need. So python daemon will update rrd and problem is solved (of course if it existed, in first place)
If you're doing much directly to the command line with php, then you'll run into timeout issues. When a command is executed from a web-facing php page and it times out, the process is effectively detached and orphaned to run until it is finished; the only way to kill it is through a command like kill of the process id. If it's just running a command without interaction, then store the commands in some form of queue or log and use a cron to process them automatically in the background. I usually recommend against communicating with the command line through php because the problem you'll face is that web-facing php installations don't maintain state in addition to timing out. If you're running the php script from a command line as well, then it's not a problem and you treat it as a true pass through for the terminal by taking your commands and sending them and returning the response. Through the web, since a php instance is completely destroyed once its finished executing, maintaining the state of the command line in some form of interactive way would be tricky. If this is a linux environment, my recommendation for the overly complicated edge cases where you need to interact with a command line in real time is to use a program called screen on the terminal or something similar. What this program allows is the ability to maintain a console state across multiple sessions. Many sysadmins use this when they shell into a remote server so they have the ability to log out and log back in from elsewhere without losing what they were working on. If you've got a vim session open within screen, you can leave screen and close out everything, then log back into the screen session and the buffers will still be open in vim. If you're able to hook into screen using a unique identifier like a session id, then you might be able to do the more complicated stuff. Don't use this method unless you really need to because it could be a nightmare to maintain properly.
It should never be gender
I have been lucky enough to see this from both sides, working on custom frameworks and corperate CMS’s and for a company that employ Symfony as their backbone. I can say its whatever you prefer and whatever is fit for purpose. If you’re a great programmer, someone who understands how to secure your application / website, then write it from scratch and reduce the overhead. Using a framework like Symfony means you can forget about most of that bullshit and concentrate on getting shit done, working within a very opinionated framework. I prefer using a framework, others might not. 
you mean you discounted your hourly rate for a nonprofit, wrote an invoice like "$1000 work - $400 donation: Please pay $600" and claimed $400 donation on your taxes?
&gt; named parameters Sorry yes that's what I meant &gt; PHP 5.6 That's odd. I could have sworn I read that it was being deprecated in 5.6 somewhere in a changelog. I know mysql_* is removed but I also thought mysqli_* was as well. My bad. I guess I should be more careful about posting things late at night while being sleep deprived in general.
Kind of. Composer generates your autoloader for you. Generally your directory structure would be more like... src/ &lt;-- all of your Attw component sub-directories, like... src/Application src/Application/Application.php And in the root, just... .gitignore &lt;-- Ignore the /vendor directory, don't store that in your repo composer.json &lt;-- Composer config README.md &lt;-- Some docs In your composer.json (in addition to all the other stuff you store in there) you can use something like this to generate your autoloader. { "autoload": { "psr-4": { "Attw\\": "src/" } } } Then when you do a composer dump-autoload, you'll find your autloader in the vendor directory that gets created.
That's interesting about screen, I never considered that as an option. I use often for long running administration processes but the thought never occurred to me to try it through PHP, although I could see how it may quickly become tough to maintain. I haven't seen timeout issues yet, but the storing of PIDs in a queue or database seems like good method. Thank you for the information.
I wasn't aware of this library, thank you. I'm really interested in how cPanel, OpenPanel, ISPConfig, etc. go about executing software setups/configurations/maintenance using PHP to build a front end. I'm about to start digging through the code on OpenPanel and then cPanel but from the onset it looks arduous to say the least. 
IMO you shouldn't have php in the templates. It makes things messy. Clear html is easier for front end devs as well. My two cents.
The AMQP seems to be the most suggested route but I haven't read enough to understand how it handles system commands and program executions. I guess I will need to finish reading and hopefully have a better understanding. exec() has been working fine in the legacy systems, no real troubles. I'm of the mindset that I shouldn't fix anything that is not broken as well, but as development moves forward I am curious about alternatives, better methods/practices, etc. but apparently this is an acceptable method so I shouldn't worry.
What you need is a good facebook clone. Go on craigslist and see if you can get a developer to do it really cheap.
You could probably get him to do it for free with all the exposure he would get!
Wat
A blog with ads.
But the whole point of the message I replies to was that frameworks are left behind to rot once the original developers leave.
http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612
It is fast!
[Symfony Process Component](http://symfony.com/doc/master/components/process.html)
Oh my god this code is bad. Someone needs to learn how to actually tokenize and build a proper parse tree.
Absolutely. If you want to fail fast, you're better off grabbing a 'huge framework' and using the parts you need from it, instead of burning up time re-inventing stuff that is neither new, nor entrepreneurial. Spend all your time on the actual value you're building in the app, and none of it writing yet more user input validation. 
Gotcha, tnx.
This is one of those libraries I like using in my project. The code isn't the cleanest ever, but the developer is responsive, and it's under active development. Those factors are at least as important, to me.
https://github.com/domnikl/DesignPatternsPHP
No, I mean to pretend that a framework does not add basic overhead is to lie to yourself. To pretend that it definitely matters every time is just as foolish. You gotta understand the ifs and whens and whats and whys. :)
[PHP is meant to die](http://software-gunslinger.tumblr.com/post/47131406821/php-is-meant-to-die)
&gt; Its a server Therefore it has input validation. That data may be coming from a mobile app, but its also exposed to the internet. Therefore you have to check that incoming data and make sure its what you are expecting, otherwise you've created a security hole. Unless, of course you plan on using somebodies oauth library, which is only marginally different than using a framework. Again, if you want the fastest path to a minimum viable product, you dont roll your own everything. You reuse as much as possible and ducttape it all together to get it out the door. 
Start up a side-project using a framework. Having even a remote amount of knowledge about one of the big ones, (Laravel or Symfony), will work wonders. edit: spelling, about changed to amount
12 bucks an episode and 24 episodes. That seems kind of pricey.
I think a statement like this would carry more weight if you had some sort of use case or example that showed how the code was completely unable to handle complex markdown structures, or something. Otherwise this just sounds a bit dicky, because if it does the job and it does it considerably faster than the competition... does it matter? :)
What are the pro and con of using array() and why? I like to ask this and tangent off to data structure.
Right; Automattic *does* contribute an amount of time back to WordPress core, but to say that they're "responsible for [...] the associated open-source community" does the community a huge disservice. They contribute, but so do the other large companies using WordPress.
Every technical interview I've been in for the last 2 years, without fail I've been asked how I would implement a link shortening service, and scale it.
As noted: 3.9 was lead by nacin and Mike (DreamHost); 3.7 by nacin and (IIRC) Jon Cave. Audrey Capital is Matt's venture capital arm, and also the employer of Andrew Nacin [and a few others](http://audrey.co/), but is otherwise not related to Automattic at all. Audrey employees are specifically *not* Automattic employees, and spend their time working on WordPress core.
imo, Ciconia has the opposite problem.. overly abstracted. There's no need for 30 different files for this*... \* says the guy who has never made a Markdown parser
I don’t really think you’re in any position to tell me how to build or release products. It is more work to *install* laravel than these servers take to write.
I have a lot of experience on OOP accross different languages. For this reason I can say that I do not think that learning a FW can be challenging because they rely on OOP, since they use objects in a standard way, not too difficult to understand with basic OOP skills. However, I do think the organization, conventions, configuration, sequence of execution, modularization, extension (...) are the core of a particular FW and those are the details that can be challening to grasp at once. The documentation is key for the adoption of a FW and I believe Yii (1.1.x) docs provide a very good tutorial of its internals. Yii2 may be another story, though. 
Thanks this is cool.
Relax. Technical interviews are not about remembering everything by heart. It's about demonstrating that you can solve problems with code.
Very much agreed.
Oh /u/mnapoli you don't recall i_make_snow_flakes :)
I am one among the happy readers of the book. As /u/pmjones mentions it is leanpub.com 100% money-back guarantee in 45 days. And if you are still unsure, hear the talk "It was like that when I got here" :) . Yes no introduction to any components to hold your breath. All your PHP code. Reading any book, you get some of the experience of the author in a few hours is great!
I recommend blogs, AMAs (checkout the /r/sysadmin), Facebook developer blog, and definitely [highscalability.com](http://highscalability.com/). Shameless plug for my recent blog article on [basic scaling with load balancers](http://brandonwamboldt.ca/basics-of-scaling-load-balancers-1432/). Doesn't cover setup or implementation, but should have some useful info for getting started.
This code make me unhappy and makes me wanna stab my eyes. 
This is crap. I've worked on billion dollar cloud services and deamons with PHP. It can do a lot.
a) what do you mean an array of hashes? is it a hash or an array? If it is a hash how does it handle collisions? b) how does it take up so much memory? Is there a trade-off or a reason for this memory intensive usage? c) What's the worst case, average case O(n)? I would tangent into that. I'm asking this because array is possibly the most used data structure in all of PHP, and knowing its strength and weaknesses tells me two things, 1. you give care enough about efficiency to actually explore into it. 2. you know something about data structures and their O(n). well... one data structure. OOP and all those other stuff can be learned, but someone who cares /is curious enough about the language to explore what's underneath the hood is not a person you come across every day. But I wouldn't bet on all interviewer asking this question.
Before you rent a couple EC2 instances, I would highly recommend firing up some local virtual machines for free. I've been using [Vagrant](http://www.vagrantup.com/) to test machines and it's been a great way to learn about load balancing and scaling applications. You may want to look into Apache benchmarking tool to simulate requests. http://httpd.apache.org/docs/2.2/programs/ab.html. I've not spent much time with it so I'm not sure if it's the "best" tool for the job.
Setup and implementation....sound like a few ideas for your next posts
[700+ line parser block](https://github.com/erusev/parsedown/blob/master/Parsedown.php#L77). I don't even want to run the complexity numbers on it...
Yes
Yeah, I get the distinction, all I wanted to do is show that there is a lot of carryover between. Had I have noticed your username, I prolly wouldn't have said anything at all. :)
A word of advice is that I've found that you can avoid sharding for a good long time if you use postgres and have a decent DB design and use a system that uses efficient SQL queries. If you're using a data-centric application, I take a good RDBMS tool (postgres or Oracle) and either write the SQL manually or tightly control and monitor the SQL your ORM is generating so you can use all the features of your DB instead of just he "lowest common denominator" (poorly performing) SQL that most ORM's generate. just my .02.
[Everything is awesome when you're part of a team](http://www.youtube.com/watch?v=StTqXEQ2l-Y)!
It's a great start. After that you can move up to jmeter or Selenium and one of it's many grid-like options.
I guess the main problem here is just that if other people want to contribute code then they might have a hard time, because it is completely uncommented and has too much complexity in a single method? I am mostly trying to play devils advocate here, because misleading_taco is saying its bad code, but it performs considerably quicker than its peers. One of those tricky toss ups, but if it works then... :)
It is pretty terrible. It's sorta like he took every best practice for OOP to blendtec to see if it would blend. I mean, props for making it work, but what a maintainability nightmare.
The problem is when you have methods which take on far too many responsibilities at once it becomes extremely difficult - if not impossible - to write a decent test suite with full coverage. You can't properly isolate individual responsibilities.
&gt;One of those tricky toss ups, but if it works then... :) ...but that's really the problem the PHP community is trying to overcome. We need to break out of this train of thought where we're saying "it works so its good enough".
I hear good things about http://www.joedog.org/siege-home/
At least many German companies tend to reinvent more or less everything themself, because "it" doesn't fit perfectly and "we don't pay you to help other companies" (aka "contributing"). Even if it's a single simple and minor bug, it has to be written ourself. "We can do it better"
Almost all Mac apps come in the form of a disk image file that when mounted (after double clicking) displays a window with an app bundle and a shortcut to the applications folder. Then you install it by dragging the app bundle into the applications folder. 
I've tried several of them, and visual paradigm is the one least sucky. Also try http://www.yworks.com/en/products_yed_about.html but thats more of a drawing tool then an proper UML tool.
Yeah maybe, my company bought them in so I guess it's more directed at companies. But just download them on tpb or something.
I find them a bit sloppy as well. Even if they are not too hard I'm not sure what exactly you learn from an applicant with these questions. For me "a more sensible architecture" is totally subjective therefore not measurable. Also I prefer challenges with no code written before me, I have the feeling that you want to guide me to somewhere and it demotivates me.
Well, SOLID suggests that the code is readable, where that is deliberately obtuse. What are you trying to find out? Is that code representative of anything the applicant would ever have to do in your company? I doubt it :) I don't think that it's a bad idea to give people puzzles, necessarily, but I think you're weeding out some people you don't need to weed out.
Not at the moment, no.
Doing more things takes longer. If you include code that does more things than your code will do, then it will always take longer regardless of language. But yes, a Java framework may well be quicker than a PHP framework of a similar size or functionality set.
We'll check it. Thanks! https://github.com/yiisoft/yii2/issues/3145
In general, well written well maintained code is wonderful, but I'm not going to lose sleep over one perfectly functioning package deciding to have a 700 line method instead of splitting it up into lots of smaller methods, especially if splitting it up kills off the performance gains it has managed to achieve over other "better written" code. I'm not saying all PHP code should always be written to be as fast as possible regardless of quality, I'm asking: in this instance, is it worth saying the whole package is crap because the cyclomatic complexity of its methods is high?
That is not entirely true, you just need to throw more tests at the method with more inputs until you've hit the correct criteria. 
We're working on improving the docs for 2.0. Personally I think these will be much better than 1.1 docs.
Thanks for pointing it out. These were actually my mistakes. I'm not native as well and I was pretty tired while typing the announcement. All fixed.
It will be stable in a couple of months if everything will be OK.
i'd go over its correctness against my requirements first, then how actively maintained it is. if i use this, i'll be using this to actually process markdown. i couldn't really care if it meets the abstracted-to-oblivion requirements for modern packages or not, nor if it has 100% code coverage or not. if it works, it's secure, and actively developed, i'm buying.
Author here. Please, see the latest version of Parsedown.php.
It is. OP has never used a Mac before or he thinks drawing an arrow like in PHP is somehow clever.
Really? Are PHP quizzes a thing at job interviews/applications? 1) why would you want to hire someone (or even interview him) if he has written zero code in his life. Even if he just came from school/uni he must have made his homework at least one time and there for have some kind of code example. 2) I am pretty sure even "pros" rely heavily on research and online docs, would that be possible in your quiz? 3) just because you spent time in those "problems" does not mean its conclusive for an applicant, right away, under pressure. A github profile of an applicant will tell a lot about his potentials (even if he's junior junior) - the rest you can figure out in a two week internship.
Still quite complicated, but an awesome step in the right direction! Keep it up!
It's not crap because the cc is high. That alone is only an indicator. Here's a tactile example of potential problems: How extensible is it? ReST is basically an extension to markdown. Can this parser be modified without code changes (via extension, composition, etc) to support it? No. Should it be able to? I have no idea (perhaps not). But the point is more that it's not extensible, and therefore breaks a number of SOLID principles (pretty much every one of them actually). It's a choice. I wouldn't say "OMG this is horrible". Definitely not. Is there room for improvement? Absolutely. Is that improvement *needed*? I don't know. But it's definitely worth discussing...
Start using virtual machines locally (vagrant?) and just load in those tools and play around with them. That's how a TON of my learning happened. I recommend making notes of every command/configuration made so you can replicate/automate it later (and blog about it for us :D ) Virtualize all the things!
I've used a Mac for 8 years, and I *appreciate* the effort that JetBrains puts into packaging it's applications via styling the DMG. RubyMine, PyCharm and I'm sure the rest of their products all have language-specific and product specific packaging. It shows effort, and care, and fore-thought. This is why it's something worth noting.
Yeah a discussion is one thing. Original comment was ZOMG ITS SHIT, which is unfair. If absolute speed was the goal, this works. If I genuinely do not care about extending it to add other syntax, or ReST or whatever, and all I want is a quick as fuck markdown parser, then yay for me, I have found something. :)
https://www.scalingphpbook.com/ I reallllllly enjoyed this book
I use Capistrano for deploments. It's a Ruby tool, designed for Rails apps, but it works perfectly fine for PHP. Version 2.x (not v3, the latest) has a 'deploy via copy' mode, which works exactly as specified in your 1-5 steps. I use it for some apps where the live server can't access the git repo.
i was more involved in the interview process at my last job and as we were smaller and hired more full-stack people, we put them through a little whiteboard quiz session just to make sure they weren't bullshitting us. For example: if the applicant said they were good with SQL, we made sure they knew the difference between JOINS and could write one. If you say you "know SQL" but can't write an inner join between two tables, then you don't know SQL. Same with php; you say you've been in PHP for 6 years, ok sort this list and give me a count of all the words that start with 'a'. Maybe you get it, maybe you make a few mistakes, or do it inefficiently, fine. but if we can tell you're completely lost and can't even begin, then you're either lying to us or your portfolio is full of copypasta that you don't actually understand. We had a guy who came in with a decent portfolio (of live sites, not code, which should have been a red flag). He claimed to have 2 startups and years of experience and that he wrote his own cms. Great. Except when we asked him to sketch out a rough class model of a chess game, we discovered quickly that he barely even grasped OO, and had no idea abstract classes or interfaces even existed. So we asked him more about his cms and discovered thats what he called tweaking wordpress templates. Good bye. We stopped short of the big brain teasers bc those are kinda pointless, it was just relatively simple stuff to make sure they actually wrote and understood the things they said they did in their application.
Likewise, I have a similar setup built on capistrano. The only difference is I use rsync to push up the changes, since that gives a much faster deploy than pushing the whole lot up over sftp. 
Cool, I was wondering about rsync, that uses SSH right?
So, the "deploy via copy" was removed in the latest version?
Capistrano 3 was a complete rewrite by different people. Although this may have changed since release, last time I looked it only supported the standard 'deploy from source control' use case. From my cursory glance, v3 seemed to have lost some of it's flexibility, and it looked like deploy via. copy would take some effort to code back in. I'm sure this will change over time though.
That is not entirely true either. If you have a method that takes on far too many responsibilities, then there's a likely chance there's some coupling or other tight dependencies going on within. If there are some tightly coupled aspects, then no amount of mocking and input permutations will properly isolate problem areas to tell you which of the items holds a specific responsibility.
We're proud to announce that today is our 1 year anniversary since our first issue. I'd like to thank the readers of Hacker News for giving us some direction and from helping us to shape what we ultimately became. We have also never missed getting an issue out. 
yes it does.
Yep, it's definitely on my list of blog posts, however it requires separate blog posts for the various load balancers such as ELBs, HAProxy, Varnish, Nginx, etc. I have my work cut out for me :)
If you are seriously going to look at improving code quality, I recommend that you hook it up to [Scrutinizer CI](https://scrutinizer-ci.com/). It's been a valuable tool for me so far.
Why not use Jenkins with the Publish over FTP/SSH plugins?
You can use lftp to sync files over FTP/SFTP. But rsync performance is vastly superior. Try talking with your hosting company, most enable ssh access if asked.
Perhaps that was your intent, but the comment reads as a generalized statement given the context and no mention of a specific method. I'm guessing you were thinking of elsewhere in the post about the parser which would put the "lots of lines of code" in a better frame of reference. I do agree that messy code isn't necessarily bad code so long as it's not unmaintainable. If code can't be maintained, it's bad in my book even if it's functionally correct.
These aren't bad although I would argue that providing a larger task with rather than a small set of exercises would probably tell you more about a developer's skill and thoughtfulness.
reddit is open-source, so shouldn't be hard to find out for sure.
&gt; 1) why would you want to hire someone (or even interview him) if he has written zero code in his life. Even if he just came from school/uni he must have made his homework at least one time and there for have some kind of code example. Have you done much interviewing? Because there's a surprising number of "developers" who can't actually write code -- in my experience, less than 50% of those I interview can write even a simple script. A degree merely shows that they attended class, nothing more. &gt; A github profile of an applicant will tell a lot about his potentials (even if he's junior junior) A github would be the easiest thing in the world to fake, so how can you tell if they're legit without some sort of test? I'm also reminded of the applicant many years ago who could sit and talk about OOP, design patterns, SDLC, agile, etc. He came across as very knowledgeable and an industry veteran. Well, we had to let him go after a few weeks because he couldn't code a damn thing. So you just can't talk it over and hope to get a good idea of their skills. &gt; the rest you can figure out in a two week internship. Internships are a [touchy subject](http://www.npr.org/2011/11/16/142224360/unpaid-interns-real-world-work-or-just-free-labor), especially considering the [FSLA 6-point test](http://www.dol.gov/whd/regs/compliance/whdfs71.htm), there's too many stipulations to make them worthwhile; e.g. you can't have them do any "real" work, it has to be training only. For actual corporations, bringing on a new hire can be highly disruptive and expensive (creating ID badges, filing all the paperwork, procuring and setting up a new cubicle with PC, granting access to internal systems, etc.). So, interns aren't really a "try before you buy" scenario, they can actually be very expensive to bring onboard.
What the fuck? Sorry to be a dick here, but what on earth are these tests attempting to evaluate? &gt; Challenge 1: Modify Test::$secret before it's output. Modify it how? &gt; // $v is some kind of weird array The fuck? &gt; $answer = $answer-&gt;get()-&gt;the()-&gt;answer(); In what way is this silly fluent call going to tell you any more about a candidate than if AnswerInterface had a SINGLE, logical method called `getTheAnswer()`, or `getAnswer()`? The illogically named and chained fluent methods don't add any actual value to this test. Further, this isn't testing any knowledge of interfaces and implementation. The challenge with interface design isn't in implementing the methods someone spoon feeds you, it's actually coming up with a logical interface segregation in the first place. Challenge 3 is completely insane. I don't even... &gt; // Challenge: refactor these interfaces into a more sensible architecture (adding new interfaces where required) This isn't the "right way" to design interfaces. You design interfaces around client code. A client needs to use an interface, and the client should be what defines the interface that it needs. From there you apply the interface segregation principle to classes/objects that make sense to implement that interface. Nobody can reasonably refactor those interfaces without knowing what the client code is supposed to do. You always engineer interfaces around client code, not the other way around. These exercises are absurd and I would walk out of an interview if someone threw this obtuse trick code at me.
Again, SSH is not an option. Do they have a FTP only plugin? If so, I'll maybe have to take a closer look at Jenkins.
Yes, I have done a lot of interviews in my past, or was involved in the process. Mostly startups and 10-50 employees companies. Just reread my first point, as that does not contradict in what you are saying. I know that a degree is worth nothing alone, but that's why I said if someone has a degree and does not even have one single code example - why even bother to invite him for an interview? Secondly, doing an interview you need to actually have the ability to read people. If you just ask OOP questions which anyone can answer after reading a book - do you really think you have done your job as an interviewer correctly? There are of course much more questions to ask and mostly you will figure out during the process if he actually knows what he is talking about or not. Thirdly, if you are so inflexible to hire an intern, well what should I say... Maybe being in the online business is nothing for you as it requires being highly flexible. Did not say he needs to work on production code (which I would not recommend anyway). Give him an encapsuled problem/bug. See how he solves it and what questions he asks. Is he sitting there for a week no results no questions? Bye. Asking every second "how do I use the PHP function strip_tags". Bye.
Are you sure this will work without SSH? Here is a snippet from the Fabric home page: &gt; Fabric is a Python (2.5-2.7) library and command-line tool for streamlining the use of **SSH** for application deployment or systems administration tasks.
The point is that spending 30min. doing these little coding exercises is the most efficient way to see whether or not someone can actually _program_. &gt; There are of course much more questions to ask and mostly you will figure out during the process if he actually knows what he is talking about or not. I addressed this specifically, it doesn't matter if someone can talk about it intelligently or not... anyone can memorize a textbook. You have to actually get them on the whiteboard at least. &gt; Thirdly, if you are so inflexible to hire an intern, well what should I say... Maybe being in the online business is nothing for you as it requires being highly flexible. lol? I might be offended if I wasn't laughing at you so much.
These are all pretty trivial but I would question the value from any (all) of these.
Don't you have the original file? Do a diff. Or are you saying you edited a file on a live site without taking any kind of backup?
Boy you get offended rather quickly. Sorry, I did not mean to. But you see, if we were in an interview I could read out of your comment not to hire you. Its the way you said it like "haha no I AM laughing at YOU" which just makes it very childish, and shows your lack of experience. Even if you were good at programming it might cause problems in the team in future.
Yes they have an [FTP Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Publish+Over+FTP+Plugin).
Good stuff
Your script looks nice Dave. Thanks for sharing, will be using your example.
Just to be clear: I never said this practice will work with every company, therefore I wrote this was the process for startups and small sized online businesses - and even then I'm pretty sure there are other working methods. Also that was a hypothetical "if you were being interviewed by me". But your inability to reflect and take everything literal, even stating "no problem burning my bridge with you" is a little scary, as I am pretty sure I am not living in the same country as you nor am I hiring atm. But its interesting learning more about you. Perfect example how little text will show if someone should get hired or not. Now someone please tell me again they can't figure out the person by interacting with them.
I didn't read the article, but a while back this helped me immensely when trying to create a consistent UTF-8 database. Might be of help for someone. http://mysql.rjweb.org/doc.php/charcoll 
The two important ones are move_uploaded_file, and GD. Extension and MIME checks are basically pointless. They are only useful for catching innocent upload mistakes and displaying an appropriate error to the user. Beyond that, they do nothing for security.
An important thing to realize is that this is moving into Web Ops territory - I wouldn't expect a senior developer to know about setting up HAProxy because that's my job, not theirs.
"I don't want to use try catch" - Why?
I heard somewhere it's bad and there is a better way?
&gt; This is my main question. How would I go about doing this the other way around, i.e. writing to the database? I would like to use the help of setter methods such as setInsertTime() that would accept a unix timestamp. I have two ideas so far: a) I would need to create a second class to deal with only writing, or b) change this class to only be pseudo-immutable, having its setters modify a set of properties different from the ones the getters are using You could use a mapper or repository. I forked your gist and added an example repository and controller. https://gist.github.com/codenamegary/10996302 
try/catch is the way to go with PDO errors. If you get an error that's truly an exceptional error (query broken, database down, etc.). They will also still be thrown when there is an error when you have error reporting turned off in production.
&gt; I don't want to use a Try Catch. What is the right way? Using try catch and proper exception handling *is* the right way. 
Thanks for the feedback. The architecture one is a good way to see if someone understands how to architect a domain from scratch. It's not measurable at all, but it provides a was to see how the candidate tackles a problem and if they understand where responsibilities should lie.
Thanks. The code is fairly unreadable. My thinking was that a really readable test wouldn't require nearly so much problem solving and understanding of PHP. I could be wrong though. To complete the challenges you have to understand things like exceptions and reflection. Completing the challenges also shows that candidates can actually write PHP and know how to solve problems.
OK, thanks.
OK, I'll use try catch then. Thank you.
Seconding that recommendation.
Ah yes, wasn't thinking straight! Not being able to run remote commands makes fabric pretty useless, I'd just use make or another task runner, but you could still somehow do a build, upload and make live. 
Well I guess you break it up into smaller chunks and tackle each chunk. * Creating the shortened links * Do users need to register or login to create a link? Captcha? * Checking new long links to make sure they are valid (reachable) * Making sure new short links are not already taken * How to store the short and long links * the re-director when people navigate to the short link * URL Rewrite (mod_rewrite) rule to gather the short link * getting the long link from the database * send location header to do the redirect to the long link * How to scale * performance - usage probably tends to be in bursts so only retrieve a long link once and put it into a cache for several hours. (memcahe or wincache) When querying the database for the long link first check the cache. * storage space - this probably is not an issue. If it is we could put a last_used date on entries and things that have not been used for a long long period could be deleted. * Multiple servers - separate the database to its own server. Have the cache replicate to the web servers. This is a built-in function of memcahce. 
As someone who interviews engineers regularly I find these sort of 'exam' style interviews don't yield the best engineers. Like so many others have noted in here, you'll get much betters sense of where their skill level if you walk through an actual real-world problem with them and not some puzzle. edit: don't know how to words 
a) Well in php even when you do not define a key your array has one. If not defined it uses an integer starting at 0. b) how or why? The why is that PHP arrays are fast and indexed to be looked up by the keys directly. So if I had a million cars in an array and each car used the VIN number as its index I could get that array item when all I had was the VIN. c) worst case is that your script crashes with an out of memory error. usually when developing you check the php environment to see how much memory it is allowed with a get usage check. Then get some test data that should represent your worst case scenario as best as you can predict. If you are pushing the limit then you should consider a different implementation or for some small intranet environments it might be ok to increase the amount of memory the script is allowed to use. Though I prefer to check around for some best practices to see if a different implementation can prevent the problem entirely. great question. Thank You,
&gt; The S in SFTP stands for SSH soooo..... probably not True, but there is still an important difference between SFTP and SSH. Many web hosting companies provide SFTP, but don't offer SSH (shell access).
Thank you for taking the time to write that for me! You did, however, forget the most important thing: the mapper itself Where you do this: https://gist.github.com/codenamegary/10996302#file-personcontroller-php-L27 The mapping part is missing. It's not the security part I'm concerned with, but the fact that the data as received by $_POST is not in the same format the Person class. Namely in my example the insert time is always extracted (and will also be received as) as unix timestamp even though it's actually stored as a date string. So I'm going to need to map the received insert time to be placed under the `insertDate` key and converted to a date string. (OK, let's pretend that the insert time is something you can freely change :D) So where would logic go to help me build a data array for my class (with helper setters e.g. `setInsertTime()` and what would they be called? If I did everything in the controller, I would be tightly coupling assembling the data array to that controller and wouldn't be able to do the same elsewhere without code duplication. What would be the best or any good way of implementing mapping helpers? I might need a separate builder class?
But on the other hand, having all projects deployed from a central server doesn't hurt. Simple Projects just poll the SCM every now and then and deploy new Versions via (S)FTP, more complex one do composer operations before and/or Unit tests. I don't see the downside of having one server that deploys everything. It also removes you from the "the guy who deploys it" role
Really solid point, I hadn't considered it that way. Thanks so much!
UTF8 is a HUGE pain to deal with, much more than people realize. Content needs to be encoded within your code (utilizing mb_* functions usually and converting with iconv), sent to your db in UTF8 and then stored in the DB as UTF8. Forms need to be submitted in UTF8, browsers need to be told that the content should be utf8. Nothing assumes utf8. This article is a huge help and should be read by everyone.
Another thing to recognise is that big companies running applications under huge load are often not expecting to hire people with this experience. I work at a company whose application at peak times is performing a million operations an hour. Very few people we interview have worked with systems that come anywhere near what we are dealing with. Hiring is really difficult for us. At our interviews it is far more important that you understand the concepts and show an eagerness and ability to pick these things up. I don't think any of the last 5 hires have had much practical experience working with a system the size of ours. You learn best by doing. If you want to work with large scale applications I would start looking for a job in a company which has a large application. I don't know what your experience is. I took a new job recently and learned more in 2 weeks than I probably have done in the past 2 months.
Have you tried [Phing](http://phing.info)? It is an ant-like build tool that can do steps 1-4 for you. It has a FTP Deploy step but I didn't see any secure (SFTP) version. You could write your own or shoehorn it with a ExecTask though. Edit: It seems somebody else has done it already: https://github.com/discont/phing-sftptask 
If the cookie and values aren't set by your domain, you won't be able to read them.
Are you *absolutely* sure that the cookies are there *before* the page request is made? Those cookies are set by the GA javascript itself, and that doesn't run until after you've already served the page at least once.
Have confirmed that the cookies are there, checked with document.cookie in the browser on the same page making the request to the php page. The difference has been narrowed down to something in the production environment, just don't have any clue where to look as I only joined the team in the last month and wasn't part of initial setup of the system.
A quick note to anyone using PDO, you can set the charset in the DSN: $dbh = new \PDO('mysql:host=localhost;dbname=yourdb;charset=utf8'); Or, with doctrine, provide the `charset` argument to `DriverManager::getConnection`: use Doctrine\DBAL\DriverManager $conn = DriverMannager::getConnection([ 'host' =&gt; 'localhost', 'dbname' =&gt; 'yourdb', 'charset' =&gt; 'utf8', ]);
I'm not really an expert on the data mapper pattern although I used them back in the ZF1 days. Here's an article that seems to explain it. http://www.sitepoint.com/integrating-the-data-mappers/ I was trying to say that you can use either a repository or mapper to abstract your CRUD logic away from your controller, that was all. Regarding mapping data from post for entities, a builder sounds overkill to me, but again... I won't pretend to be an expert in that particular pattern. Surely you'll end up with something like that but probably don't need to adhere strictly to the traditional definition. The PHP league has this fractal package which contains a Transformer concept that seems relevant, worth checking out... http://fractal.thephpleague.com/transformers/
do the cookies have the same path component in both places? if so, does the actual page path match between dev and production?
In a recent project, I have to convert data to and from 3 different formats - My internal database model, a public API model, and rows from a CSV import. Here's an example: https://gist.github.com/thepsion5/11008147 EDIT: I added a simple example of how you might implement this with a Person domain entity. 
I'd love to view your websites. I'm assuming you also don't need backend input validation since the javascript can validate the input!
Have you looked at capistrano? We are using cap to deploy our code base after jenkins runs composer, tests, records output, then ships the code and provides a way for simple rollbacks.
This looks great, do you recommend getting the case studies as well? $60 looks a bit steep. 
This is ingenious, do you know how much a session like this would cost on average? 
You're right of course, and it's frankly impossible to simulate/learn to scale to a million requests/hour on my own. That said, I would still like to know the basic concepts, like what is a load balancer, how would I set that up etc. What does 1000 requests/hour look like etc. This sort of stuff. 
I don't think the author tested/checked his suggestions. 1) php.ini lines don't need semicolons at the end. 2) mysql configuration files refer to "utf8", not "UTF-8". 
I agree that everyone needs to have at least a basic understanding of what's going on, but I've never found it to be a huge pain to deal with. Follow a few simple procedures and pretty much everything works great.
Is there something specific to Postgres that allows it to scale well, better than MySQL for instance? MySQL is still my go to RDBMS atm, perhaps I should get out of my comfort zone. 
It's little enough that I've never calculated it, but you can do some quick back-of-the-napkin calculations based on the micro instance cost of 2 cents an hour.
What subs upvoted you for sharing this link, if any? /r/php could just be biased for all I know. 
Looks very interesting and I might get a copy for myself. However, I hope the author remained unbiased, and not filling this book with plugs for Aura... is it?
First, make sure your browser is sending the cookies by checking the headers in your browser's dev tools. Assuming they are being sent, either your local code doesn't mirror production or there's some server config that is stripping those cookies from the request. This is common if you use cache/proxy software such as Varnish.
Just a little primer to get started...... and then a cocopuff
I didn't get the case studies so I don't know. But it is certainly worth the $39.
One thing is that in order to get scaling read/write performance (and better reliability), it's important to use the InnoDB storage engine in mySql. With InnoDB, it's very fast at primary key lookups, however, it's a very slow for secondary keys and other index lookups because, due to the way innoDb is engineered-- secondary keys have to do 2 lookups-- first, the secondary key, then the primary key, every time. So for searches not using the primary key, it can be significantly slower than postgres. Second, MySQL's "sql" engine and optimizer can completely suck compared to postgresql. Some types of queries (notably certain subqueries) are simply not allowed in mySql and require resorting to certain hacks like temporary tables that further slow things down. Unfortunately, postgresql's optimizer can, in some situations, make poor choices and isn't (and never will be) able to use "hints" (by design), so instead you can, if necessary, adjust statistics to push queries to use different, more efficient execution plans in certain situations. postgresql can use native JSON, which can actually cause you to use significantly less numbers of queries, which can can increase performance (and code readability) as well. There are other things-- logging, compression, caching, built in alternate programming languages and more that all add up to a performant DB especially when scaling. Recent versions of Postgres are able to take advantage of dozens of processor cores and scales linearly on those cores, which helps a lot.
To answer this part: &gt; I thought you wanted errors turned off in production for security reasons. But if errors are off then how do you know if there is an error? Logging. The 'display_errors' setting should be 'Off' in production, but you should still have error reporting on, and log the errors to a file that you can read.
What is the modification time on the file? Are requests from that time still in your access logs? If the file is uploaded via a POST upload, Apache saves this to /tmp but deletes it at the end of the request. So I would think it's unlikely it was uploaded directly via a POST upload. I'm guessing that it's a virtualmin/webmin exploit. Who is the owner on the file? Does virtualmin/webmin run as a different user to Apache and PHP? Do your PHP scripts write files anywhere, use eval(), or use functions like exec()?
THIS. You need more hints, just finding a file blindly probably won't lead you to much. Check your access logs, make sure other services on the box are up to date, is their an FTP account? Does it allow anonymous access... can an anonymous user write files to /tmp/? Do you have access logs you can grep for the file or commands, can you trace the remote address interactions with the box? We'll/you'll need way more info than a snippet of a PHP backdoor if you plan on piecing this back together.
These are pretty easy. The interesting one is the API design for Flight systems which I can see subjectivity. Some people seem to be upset but this is a good way to weed out shitty candidates.
Yes, tests can provide expectations when documentation is vague, ambiguous, or doesn't make sense.
They are set for his domain or they wouldn't exist. Heres the cookies during a request to a site of mine that uses google analytics. Cookie:PHPSESSID=f9da542186286fcb5eb3716021be2155; __utma=4078508.1468759755.1360994926.1397449846.1397698193.610; __utmc=4078508; __utmz=4078508.1360994926.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none) He SHOULD be setting them.
none if my scripts do any file writing. sadly the access logs have been rotated out so I can not grep for the access point. I believe web min runs as a different user. I made a sample upload script and verified the file is killed after the request so it seems like a web min hack is now more likely then a php based attack. I'll get the hosting company involved. thanks for the quick responses, I've been trying to figure it out all afternoon. it was attempted once and doesn't appear to have affected any other sites that are running similar php scripts, so I'm hoping it was a fluke. 
correct though it's supposed to delete file after request 
It also shows focus on trivial matters. I would have preferred instead that when I trialed it recently that it didn't just start to randomly delete my code line by line. Every single keyboard press resulted in another deleted line. Oh you pressed the up arrow, delete. Backspace, delete. Alt, delete. Fortunately it didn't auto-save on me after every keystroke that time like it normally does.
Dreamhost is shared hosting. gmagick is a PECL extension. You can't install PECL extensions on shared hosting. Well, not any more. It used to be possible to use [`dl()`](http://php.net/dl), but it was plagued with issues and was a bad idea. If you need gmagick, then you need to be able to compile it yourself or install it from an appropriate OS-specific repository. Both of these basically require root level access to a container, a VPS, or some other form of dedicated server. However, in order to manage a server as root, you need to have some sysadmin chops. If you were unable to determine that you can't install PECL extensions on shared hosting, chances are that you shouldn't let yourself touch a server quite yet. tl;dr: If you're stuck on shared hosting, no gmagick for you. Use something else instead.
Step 1, delete mysql and load up postgresql
as someone who has been using Linode for years skip them and go to https://digitalocean.com/ I am currently in the painful process of moving hosts because I chose the wrong one.
Good stuff! Would you separate the UI server where users create a short link and the forwarder servers somehow? Possibly to make the forwarder server as bare an installation as possibly?
I like this idea, but what about "bundles" in the sense of 3rd party plugins. E.g. an oauth server bundle that has all the endpoints. Would you suggest those should be split into a separate library and a thin bundle?
Yes. Take a look at Symfony bundles like GaufretteBundle (depends on Gaufrette. Library) and AsseticBundle (depends on Assetic). Great examples of libraries exposed via Bundle 
There are so many things wrong with Symfony's bundles. First of all, what is a bundle? I.e. what should it contain? In the Symfony world a bundle can exist for many reasons: 1. a bundle can integrate a 3rd party library into the framework, like the DoctrineBundle provides advanced integration in Symfony 2. a bundle can add features to the framework, like the FOSRestBundle 3. a bundle can be an "application" module, i.e. routing + controllers, views and maybe models, like maybe the SonataAdminBundle or FOSUserBundle (even though it's maybe also a mix of the previous one) And many bundles mix all these stuff. IMO that's a **very bad thing**. It might be powerful, but "bundle" means so many different things it's messy and complex to understand. There are many questions online like "what should I put into a bundle" to prove that. Most open source bundles are #1 or #2, and most bundles written by developers (inside real applications) are #3. This is confusing! ## 1. Library bundles The biggest problem with #1 is this: **why the fuck would every library on earth need a bundle?** Is the framework so closed that it needs a whole project written for every library you want to use? And I tend to think the answer is yes, mostly because of the container: it's so unpractical that yes you have to write so much code just to initialize and configure external classes. The problems with all those "library" bundles: - duplicated documentation: where should you look at the doc? On the official library website, or on the bundle website? Tough choice - bundles out of date: the library is at v2.5 but the bundle was made for v1.2 and hasn't been updated since - Configuration through the container: I hate this one so much. Have you ever wondered *how the hell do I set option X on that library??* The library documentation says you need to call method Y, but because the bundle forces you to configure the library through the container YAML file, who says how to do it? What if it's lacking in the bundle's documentation? What if the bundle doesn't even handle that option? - no bundle for library X: you're screwed - bundle pollution: imagine 1 bundle per open source library, now the framework can brag about 10,000 bundles but none of them is really useful - *libraries as bundle only*: that one is a big problem too, I've seen many good libraries written as Symfony bundles... They are unusable outside of Symfony, great! OK I'm generalizing a lot, many library bundles actually provide much more than just installing the 3rd party lib: they also add features to the framework, for example Twig functions. ## 2. Bundle for framework extensions These make a lot of sense. I just don't like that they are called "bundle", this is very confusing with #3 because it's really not the same use case. I would love to see the concept of "Framework extension", with the equivalent of a "bundle" class that would register extensions and stuff... (or container configuration) ## 3. Application modules OK these are the one that make the most sense with the word "bundle". It allows developers to divide their application in decoupled and reusable **modules**. That's it! A module can come with routing, controllers, views, models, etc... Examples: a BlogBundle, an ECommerceBundle, PaymentBundle, UserBundle, etc... that makes sense. And of course these bundles could come with "Framework extensions" if needed (see my previous point). --- Other random things: - In Symfony, a bundle is at the same time a folder (which contains the code of the bundle) and a class (which configures your bundle). That's too confusing. If the class was a "BundleConfiguration" that would be much clearer. - Symfony forces you to have at least 1 bundle. This is bullshit. Please don't do this. Why would every application need to be inside a decoupled and reusable module?? Sometimes I just want to build a very small app and I don't want to have to write a "AppBundle" just to put my app inside it. However you could as well consider 2 options: either you don't use bundle at all, either you do, but you could forbid to mix the 2? - It's a bit related to the previous question but in Symfony everything has to be inside a bundle. Well not necessarily but it's not always easy to bypass it. In the end, you end up with code coupled to Symfony because 1) it's inside a bundle and 2) the bundle layout is very strict. I would love if it was possible to write your own "application module", and write a BundleConfiguration class (or similar) that would be coupled to the framework. That configuration class would be used by the framework to find the controllers, views, etc... That way the "module"/"bundle" is not coupled to the framework, and if I switch of framework I just have to rewrite the bundle configuration. I should write a blog post about all this...
Title is pun. Joke lost on many. Requires actual reading of article. /toohard
Well yes, that is somewhat related - remember reading that the other week.
It's well designed on the whole. I only have one real comment and that's to use `public function` instead of `function` in [Collection.php#L9](https://github.com/siriusphp/upload/blob/master/src/Result/Collection.php#L9). Nice work though.
Those are some great ideas. But if you think about what is a framework specific thing in a bundle it boils down to just a Controller. Views aren't reallt framework dependant at all. So in your interpretation a bundle is a collection of controllers that get injected with some framework specific stuff. Now the problem I have with these is indirect coupling, e.g. one bundle may depend on components from another bundle, e.g. if I want to get all users from a forum bundle I'll first have to get the User bundle like: $user_model = $bundles-&gt;get('user')-&gt;orm('user'). How will I make sure that the 'user' model is not accessible from the forum bundle directly? I mean imagine there is an orm service. Each bundle must obviously getit as a dependency if it want's to work with models, so in theory it could just access the user model directly using that service. The solutions seems to be in making each bundle have it's own service container that doesn't know about containers of other bundles, but this is kind of wasteful since I'd be handling duplicated instances of stuff. 
How would you handle views?
Obligatory https://leanpub.com/mlaphp link ;-)
ok thx. I have the hosting company investigating now. argh. 
The way laravel does, I guess. If I was writing my own framework, I'd probably just use something like twig that's already written and composer-ready.
It doesn't do any sanitation though... which makes using this unsafe for any user input.
It doesn't sanitize the output, which makes it really hard to work with. What happens if someone adds this? [CLICK ME](javascript:location.href="nefarioussite.com?c="+cookieContents) 
Use APC/APCU and cache the full contents of the homepage for however many number of seconds you're comfortable for it to take new content to reach the home page. Monitor a log of your SQL queries to ensure that subsequent loads of your homepage within the caching period don't generate _any_ database queries or remote API calls. Even something minuscule like 5 seconds might not seem like much, users won't likely even notice the delay, but it puts a comfortable upper bound on your database traffic.
I don't like symfonys approach to be honest, mnapoli described why that approach is kinda bad in this thread.
It seems like users would have content that's unique only to themselves. Wouldn't that make caching for a very small amount of time be a bit fruitless?
What I would recommend is using Redis as an ephemeral cache *and* database store. So when someone tweets, you write it to the database (MySQL, PostgreSQL, etc.) and write it to Redis. Say user 1 sends "foo" and the message gets the id of "1234" after being inserted into the SQL database. You can then write "SET m:1234 foo" in Redis (prefixing with m to denote a message and avoid conflicts). Then, if user 2 follows the messages of user 1, you would insert that message ID into user 2's stream using "LPUSH u:2 m:1234". Then when you run "LRANGE u:2 0 -1" you will get all of the tweets that should be in user 2's timeline. If that Redis data is lost, you don't really lose any data since it can be recreated from SQL. For the current user, find the people they follow, their tweets, and build up the Redis cache again. This is *kinda* how Twitter does it. When someone with 5 million followers tweets, they do 5 million inserts into Redis. See: http://redis.io/topics/twitter-clone (the Updates section, mostly).
It's cool that they split up Web from Cli, though I don't imagine a lot of people making pure CLI projects with PHP. One nice project template that also might be useful would be one that has split parts for frontent and administration part. Also a RESTserver project might be useful. I would imagine those are dead easy to make, but it wouldnt hurt if those existed to kickstart the development a bit.
If the goal is to cache the entire page for a set period, look into Varnish. 
But how will you include a template from a random twig packge in twig
This is such a broad topic - there are many ways of caching web content, and you should probably be using several of them. What are you doing now? What have you considered? Or have you done absolutely no research and are expecting us to do all your work?
Well obviously they have, and you're just not aware of it.
&gt; How will I make sure that the 'user' model is not accessible from the forum bundle directly? Why would it be bad?
Cache whatever you can during page generation. You don't need to rebuild homepage just because it has 1 new tweet.
To make sure bundles are incapsulated, also tgis would prevent model collisions between bundles
Add the packages vendor path to the view lookup path, done.
Thanks! Yes, template inheritance is coming down the pipe! I need to write unit tests and add the ability to test template first so it will be easy to find issues.
&gt; A framework built from the ground up with "modules" installed via composer is very interesting to me. Is there anything like that out there yet? Isn't that how all modern PHP frameworks are built? Certainly Zend Framework 2, Symfony 2 and Laravel appear to fit the bill.
I moved from Linode to DO just because DO is (well ... was, see below) cheaper. Linode's service is very good but I've also been pretty happy with DO. Linode have just announced new plans etc and are now the same price for the same GB of ram and have better specs than DO. But ... Linode's lowest plan is $20 / 2 GB. DO's is $5 / 512M which is hard to beat if that's all you need. I'm running a few light Drupal sites and a Symfony app on a $5 droplet at DO.
Yeah, until your website starts supporting multiple languages. Then you'll realize you've just been lucky, and you'll have a bunch of shit to fix.
.. or use varnish with ESI to build separetely cached components of front page, allowing you to deliver the dynamic stuff (am I still logged in, are there messages in my message box, etc) while still caching common elements ("last" tweets, "last" images, today's top tweets) for 1m, 5m, etc. That way you don't have to (but can) cache the entire page, and still can get the speed and modularity of Varnish.
Seems to me for a PHP programmer, that doing it in php with memcache or redis would be a lot easier if thats what you need. Though I'd bet on varnish being more efficient in the end.
You have a lot of assumptions in there. Like….that there are passwords. Or accounts. And well, you know, databases do validation too.
If your connection is too slow, try it with port and without domain. &lt;?php //Normal connection $mailbox = imap_open("{SERVER}INBOX", $username, $password); //Faster connection $mailbox = imap_open("{SERVER:143}INBOX", $username, $password); //Very slow connection $mailbox = imap_open ("{SERVER.DOMAIN}INBOX", "DOMAIN/".$username, $password); ?&gt; http://www.php.net/manual/en/function.imap-open.php#104394
You are going to have to give more details but it sounds like this is the sort of thing that is best done in Javascript 
Saw that, tried it, but it didn't help...
So right now I have a page where when I click "edit" it opens a php page that loads an entire html documents for editing. How can I make it so it just loads the div that I want to edit? This is just for a project I'm doing for class. We learned like nothing about PHP so that's why I'm asking here.
Okay, professional PHP programmer here, this is how I would do it. You have three files, the page with the html, an rpc php script and the popup window. You should include jquery on your html page. I will assume the button is inside of the target div for this example. I will also assume that the rpc file is located at /ajax/rpc.php and the buttons have a class of edit_button add this block of javascript to your html page &lt;script&gt; $(function(){ $('.edit_button').on('click',function(){ $.ajax({ url: '/ajax/rpc.php', type: 'POST', data: {param1: $(this).closest('div').html()} }) .done(function() { console.log("success"); }) .fail(function() { console.log("error"); }); }); }); &lt;/script&gt; then in your rpc.php file &lt;?php $html = $_POST['param1']; require('../popup.php'); ?&gt; in your editor place the html variable using &lt;?= $html ?&gt; you will have to mess around with the paths to the files but this basic aproach would be about right. if you get stuck shoot me a pm and I can look at your code.
DNS possibly, try adding host entries to your hosts file for any names you're trying to resolve. If that fixes it, use a new DNS server.
If you don't know PHP, a few days of reading with no real world experience will not help this interview go better. http://www.php.net/manual/en/language.oop5.php http://www.phptherightway.com/pages/Functional-Programming.html http://www.sitepoint.com/the-mvc-pattern-and-php-1/ http://www.w3schools.com/php/php_form_validation.asp "Some experience with php" implies you know basic procedural flow. Maybe some of the above can broaden your horizons. 
[This is a pretty good sum up of the basics (evercodelab.com)](http://php-guide.evercodelab.com/)
To anybody learning GIT, use a GUI, ditch the command line for now. I used CLI GIT for months, then I started using Git Tower and the clouds parted. It just helps you visualize what is going on. Atlassian has a free git gui I haven't used but appears to be very similar to git tower: http://www.sourcetreeapp.com/
I was never taught Jquery is that important for this to work. What does rpc mean?
I would have to see the specs for what you have to do but if you are trying to do what I think you are doing then yes. There is nothing in jQuery that you cannot do in regular javascript but trust me writing plain javascript is a royal pain. I don't know what rpc stands for but it's a way to send data to a server side script without reloading the page. My solution above basically uses jQuery to select the html inside of a div and then make an rpc call passing that html code via post, the rpc.php script simply takes that data and the uses require (like include in c or import in python) whatever php file you have for popup.
Looking at the results again, this seems very possible. 
No worries. :-)
Try mysql_result instead of mysql_num_rows, and your LIKE query should use wild cards (%) otherwise use = instead. You should also look at PDO since mysql_* functions are deprecated.
Thanks for the suggestion, will give it a try. I just attempted: SELECT * FROM information_schema WHERE TABLE_NAME = "Admin", Which seems to return results I can work with. PS: Deleted context thinking I found a solution before you posted your suggestion, my bad.
Just from and alternative anecdotal perspective, I had the opposite experience with git. Coming from a Linux background, CLI was easier for me to grasp and navigate. But using a visual tool can be great if that's what works for you.
Reverse DNS missing? If the IMAP server is logging connections, it may be waiting to look up the PTR record for the IP address that connects to it.
sourcetree is fantastic (it's what I use day to day), but github's app is much simpler and might be better for true beginners
I'm not too familiar with actually using continuous integration servers like Travis and such, but this sounds extremely similar. How does this differ? 
Is there a form where you enter the &lt;div&gt; name? You say "specified &lt;div&gt;" so how are you specifying it? Let's assume for a moment that it's a dropdown that lists all of the &lt;div&gt;'s and you choose the one you want to edit. You already have the code written to take the entire page and put it into a text editor, so now you just have to write some code that'll search for the specific &lt;div&gt; and then capture everything between it. Start with the &lt;div&gt; and go until you find the closing &lt;/div&gt; The difficulty of course is that you can have nested &lt;div&gt;'s so your code will have to keep track of that. I assume you're using http://www.php.net/manual/en/class.domdocument.php ?
Posting this in PHP, I assume you're not just trying to temporarily edit content on the current page you're on, but actually have it 'stick' when other users view the page or when the page is refreshed? It's not possible for PHP to reliably traverse your whole html (or php) document and update only a certain region. To edit part of the page, you need to define and save the editable regions to some type of storage (file or database). When the page is viewed, these &lt;div&gt; regions will look to the storage to pull in these editable regions as html on the page. To make the regions editable, you'll want to add &lt;textarea&gt;s that contain the editable content, so that when the form is submitted, the region (html in the textarea) can be read by your php script and updated in the database (or wherever you decide to store these editable regions).
I don't disagree with you :) . Need to write some tutorials on it.
To anybody learning GIT, ditch GIT, use Mercurial. Regarding, using CLI, I can :!hg commit -m "message" &amp;&amp; hg push, from VIM faster than using any gui. And in case I need to use a graphical view of history I use hg glog with awesome revset queries to view only the portion of history I am interested in. In the newer versions, this also works from the gui served to a browser by hg serve command. 
It's stuff like this that made me write [Fetch](https://github.com/tedivm/Fetch). It's a wrapper around the php imap libraries that makes things a lot easier to manage.
and you can you github's app with bitbucket, which is good for those ever so private repos.
PHP-FIG is a good place to start for standards http://www.php-fig.org/
Could be (anti-virus|spam-prevention) scanners on windows/sharedhost. Could be network issues. Could be many things.
My personal opinion. That regex is too complex and probably signifies that there is a better way to approach this issue. My thought would be maybe have a few different simpler regexs and string matches to verify if it's a valid url. The makes your code easier to read and debug and unless performance is a huge issue the difference is negligible. I would also recommend moving this off into its own method as well. Something "isYoutubeUrl" 
Regular expressions are nice and all, but why not use [parse_url](http://us1.php.net/manual/en/function.parse-url.php) and just switch based on the 'host' variable. Before the switch, just parse the query part using [parse_str](http://us1.php.net/manual/en/function.parse-str.php) and in the switch return the id you're wanting (or an array with the values, like source and id). Your function will be too complex if you keep trying to do a BUNCH of preg_match calls and still having to do a switch based on the url. Since urls are "uniform", it makes no sense to try and do regexes on a small string like a url.
Some pseudo-code I would use would be: function parse_content($url) { $url_parts = parse_url($url); $query_parts = parse_str($url_parts['query']); switch($url_parts['host']) { case "youtube.com": case "youtu.be": return ['source' =&gt; 'youtube', 'id' =&gt; $query_parts['v']]; } // return some error if submitted url is not a valid one return FALSE; } That should let you specify the exact return and still account for sources that aren't valid.
&gt; Merging via CLI? Well, I'm all for using the command line to do things in Git, but your command line interaction with git and merging should be limited to "git mergetool" to launch something else. If you ever find yourself in vim or notepad with: &gt;&gt;&gt;&gt; ==== &lt;&lt;&lt;&lt; You need to bailout and install KDIFF3 or something else. 
You didn't really explain why hg is superior to git. You made the statement that hg is superior. Then went on to discuss why CLI and vim is better than a GUI, which has nothing to do with the first statement. Yes, in some specific cases, hg actually is significantly better. (When you're dealing with huge commit chains that span many years and take on a certain structure, hg can process them faster), but for nearly every other project, it's been shown that git is superior.
At your recommendation, I checked out some of the tutorials and the guy seems to be doing his best to teach things the right way. For example, one of the videos is about how to migrate from MD5 to password_hash. As I suppose things always are with YouTube, the comments are horrid. Some choice favorites: &gt; i know its not mandatory but please please please can you close of your php tags ?&gt; thanks ^( ) &gt; if you're trying to work with different developer with the same project it will be hard to collaborate with them if they are unaware of this ternery operator so better to stick with the basic. 
You examples make it pretty clear that you know the answer you want already. As a candidate, I wouldn't bother because I'm not a mind reader. Your examples are also structured so that I have to write bad code to honor your requirements. class Ducks extends Exception { public function getAnswer(Question $question) { $fnGetAnswer = Closure::bind( function(Question $question) { return $question-&gt;answer; }, null, $question ); return $fnGetAnswer($question); } } $e = new Ducks('Quack'); That's a perfectly valid answer to your third challenge that doesn't use reflection, but you've hamstrung me from actually showing you how I'd address the situation. [Reflection is much slower here](http://ocramius.github.io/blog/accessing-private-php-class-members-without-reflection/) My recommendation would be to create a small, non-business related feature request, and have them implement it as they see fit. You can then review their approach to the problem. If you decide to move forward with an interview, you can also talk through it with them to see how they respond to your feedback. Here's an example: Given this CSV file of various information about muppets, please print a json response that provides the breakdown of the number of muppets by color. Example output for just Ms. Piggy and Kermit: {"pink":1,"green":1}. Once complete, add additional functionality to get similar output for the list of cars stored in this SQLite database. And even then, you're just getting a sense of how they approach problems. The example lends itself to OOP, but you'll get a lot of procedural goop for sure.
MS SQL? MySQL?
oops.. thanks for the heads up.. didnt see the typo! Will edit it XD
Apparently you can't edit titles.. I am a noob.
So... what database are we talking?
I had a manager who every single time he saw that ternary operator would say "aren't I clever" and then give a lecture about how code should be self documenting. Um, its a well known operator. It isn't like I'm swapping values with a XOR operator.
No I don't think so, you need to call `trigger_error` in your catch clause.
Nice opportunity to mention for any beginners reading along that W3Schools is NOT the way to learn PHP, or anything else, despite the fact that they're highly ranked on Google. Also phpgang.com's stuff is often unsafe and just plain shitty. I'll be sure to check out phpacademy. I personally like [phptherightway.com](http://www.phptherightway.com/).
That's a little dramatic. I personally kind of like doing it in Sublime Text, my favorite editor, but I'm sure it's easy in vi or Vim, too. It works fine and there are a lot of developers who do it this way several times a day. So thanks for elaborating on what developers "should" and "need to" do but I like to think I know what I'm doing. Personally, I'd recommend learning a good text editor's features and shortcuts, and using them well, over pointing and clicking when it comes to coding.
Vimdiff has long been my mergetool of choice, though in fairness because the alternatives are often worse. It's important to keep in mind, when a merge fails, that it's because there is a *conflict*, not because Git decided to take a nap. Too many non-editors, for whatever reason, do not adequately emphasize this conflict or facilitate its resolution (NetBeans' is awful, and I don't rate KDiff3 highly). It is a very rare situation where merge resolution boils down to simply picking one side over the other. I've been experimenting with [Meld](http://meldmerge.org/) for a couple of months now and am mostly pleased with it. It doesn't try to be too clever and the interface is very simple (gripes I have with KDiff3), but sometimes I feel it could be a bit more clever than it is.
&gt; Don't use curly brackets and nested if blocks unless it is an absolute requirement. (8 line long function is lowered to be 1 line, plus I explained ternary here.) Always use curly brackets! Have you not heard of `goto fail;`? That entire fiasco could've been prevented when using curly brackets. Plus: curly brackets help for readability. &gt; Don't use mysql_real_escape_string() (Alternatives explained.) Just don't use any of the `mysql_` functions. Use PDO. Always. &gt; What is PSR and why it is useful on some cases. (e.g autoloading) I personally feel any modern PHP dev should use PSR.
Hi, Sorry, I guess I wrote the subject wrong here. (I translated most of the stuff just for Reddit.) My article doesn't mean never use curly brackets, but rather it teaches you that you can skip curly brackets, get rid of unnecessary else statement, teaches you ternary operator. Article minifies the following example. function isArray($input) { if(is_array($input) { return true; } else { return false; } } It can be written as: (you can skip unnecessary else) function isArray($input) { if(is_array($input) { return true; } return false; } then, you can remove curly brackets. function isArray($input) { if(is_array($input) return true; return false; } then, you can convert it to ternary. function isArray($input) { return is_array($input) ? true : false; } then, you can even get rid of `true`. (I agree this is too much.) function isArray($input) { return is_array($input) ?: false; } I simply tried to explain what you can do to make your code shorter. (I'm not a curly brackets oppositor, don't get me wrong.) In my country there is a big misinformation about `mysql_real_escape_string()` preventing SQL Injection. It is false. Not using `mysql` functions (cause of being deprecated and overally being insecured) at all explained too. As for alternatives, I mentioned about `prepared statements`, `mysqli`, `PDO` - Plus, `ORM` tools and `database abstraction layers.` Yup, that is included too. Additionally, I also tried to explain that it would help you on some causes such as autoloading.
The problem if that if you skip curly brackets, you run a risk that when modifying your code later, you might add another statement afterwards that always gets run, even if you didn't expect it to. This isn't so much of an issue if you're the only one working on the code, and you're not using version control... but version control tools and multiple people editing the code can introduce such issues by mistake. Apple have messed this up recently, and introduced a bug which bypassed website security on Macs, iPhones, and iPads. It's not something you really want to mess up. Making code shorter for the sake of making it shorter isn't always a good thing; it should always be about making code clearer, not shorter.
Now, it somebody were NESTING ternary operators, then that's a paddling. 
Create a class object and store the array of objects in the session variable. class Product { private $id; private $variants; public Product($id, $variantIds) { $this-&gt;id = $id; $this-&gt;variants = array(); foreach($variantIds as $id) $this-&gt;variants[$id] = 0; } public add($variantId, $quantity=1) { $this-&gt;variants[$variantId] += $quantity; } public remove($variantId, $quantity=1) { $this-&gt;variants[$variantId] = max(0,$this-&gt;variants[$variantId] - $quantity); } } $_SESSION['cart'][12] = new Product(12, array(1,2,3)); $_SESSION['cart'][12]-&gt;add(1); $_SESSION['cart'][12]-&gt;add(2,2); $_SESSION['cart'][23] = new Product(23, array(1,2)); $_SESSION['cart'][23]-&gt;add(1); Obviously you'd want to add in some error checking and things. Maybe some more class variables describing the product to make the class more useful.
Sounds like my country. I still find `mysql_real_escape_string` in snippets of code in every Portuguese article or forum. This is why PHP is still mocked. You don't happen to be Portuguese as well, do you? I'd actually like to read all of this stuff and recommend it to others. Or maybe you're planning to write it in English too? That'd be great.
No, I'm Turkish. I can translate it when it is done but I don't think it will be anything important for the english speaking community. Good developers (I'm nothing compared to them.) and good articles are everywhere. 
Okay, I'll add extra notices for this part. By the way I just checked Apple's `goto fail` issue. Like... wow really.
&gt; Like... wow really. Exactly. That's the best argument for curly braces.
Absolutely not this. function isArray($input) { if(is_array($input) return true; return false; } However, it could also be written as: function isArray( $input ) { return is_array( $input ); } 
I tend to use: https://www.redline13.com/ It's easy to setup and use, and you can program your load tests simulating real user usage and have as fine a control over your load tests as you want. 
Definitely. I guess I need to come up with another function and refactor whole section to be more understandable. 
Which workflow, exactly, would've meant that this could not possibly happen? Even with a culture of unit testing everything, people often fail to implement unit tests which cover 100% of the codebase and edge cases. I can think of only one complex project off the top of my head that does have 100% code coverage (SQLite), and it still occasionally has bugs! This wasn't in their website, btw; it was in the SSL layer of their devices and operating systems. They were not editing in production, and had a fully working version control system, and I assume a code review system as well. People make mistakes, and people don't notice things sometimes. Here's a decent explanation, you can find more by googling "goto fail": http://nakedsecurity.sophos.com/2014/02/24/anatomy-of-a-goto-fail-apples-ssl-bug-explained-plus-an-unofficial-patch/
Debian is with PHP 5.4 and Ubuntu is now out with PHP 5.5. I say this because I think that people new people should learn with nothing older than PHP 5.4. Sure it is easier to find hosting for PHP 5.2 but is that really relevant for someone that will be growing into their knowledge over the next few years? PHP 5.4+ and learn projects that were started or rewritten after at least PHP 5.3. Namespaces or bust. Its the future already.
&gt; You didn't really explain why hg is superior to git. Yea, I am a bit tired of doing that. Now I just leave a reference to Mercurial when ever someone says OMG GIT IS AWESOME...Any one curious enough can find a lot of articles on this topic online. 
Cool! I'll give that a look into too, thanks guys. Much love &lt;3
Don't use PHP. 
Thought you guys could take a joke by now. 
Maybe it is a good idea to add something about design patterns. It may not be a standard in the sense that you mean it right here, but it is definitely a standard way to solve a problem, and helps developers not reinvent the wheel.
It is bad coding practice to rely on the try - catch statement to make your program work. Mostly because it is slow, and not meant for that. E.g. if you have this: try { $variable = $array[0]; } catch (Exception $e) { $variable = 0; } This should be replaced with: $variable = isset($array[0]) ? $array[0] : 0; However, when an actual error occurs that should not happen, try-catch is a very good practice try { // Something that should work, but didn't work } catch (Exception $e) { if ($setting == "Development) { // If we are in development, we want to show the error print_r($e); die; } else { // Else, we want to log the error, but not display it Logger::log($e); } }
I use Ruby too. Thanks for the info.
Haha, `return is_array($input)` is definitely the way to go here. *However,* Let's say you're writing code for a library, and let's say it depends on another outside 3rd party library: it actually is a good idea to use a ternary like this (or an if/else combo, whatever floats your boat), because if the outside library's implementation changes, you can update the way your code handles it without changing your library's interface on your users (therefore not affecting your users): // using OutsideLibrary v1 function checkHeb ($heb) { // Our library's function for checking hebs return OutsideLibrary::useBlab($heb) // 3rd party library function for using blab to check a heb ? true : false; } // SUDDENLY, in the latest version of OutsideLibrary (below), // useBlab now returns an integer (instead of a bool, like above) // -1 indicates no match // using OutsideLibrary v2 function checkHeb ($heb) { return OutsideLibrary::useBlab($heb) &gt; -1 : true : false; }
why is it better than using phpmyadmin (i'm mentioning it because it's on the screenshots)?
This looks like a more modern version of xataface.com, which is a great project. I'll give this a spin soon. 
You dont 'have to' know any standards like that out of the box. What standards you need to know, is the standards that they will need you to use at your job. Or your projects. Doesnt matter which. At one point you may have to learn SOAP for a project. Amazon API for another. Then for years you may not even come close to using them. So, it is outright fallacy to go and learn 10-12 standards and protocols just like that. 
You are reinventing the wheel. Your approach is not needed. There was reason for encapsulation to be created many years ago. Well, the thing is, you have interface, and you can only declare public methods in it. Ask yourself - why? Because you don't need something to be more complex than HouseBuilder::build($params). You test this public method, because everyone else outside will use and reuse this class with this particular public method, also keeping in mind interface, which will help other concrete classes to use only public methods to keep it simple. You get it? Test one public method with whole bunch of cases, that can break something inside this particular concrete class. You want build - you get build. And you pass params. Testing based on build() and $params. Thats it. Don't overcomplicate things, man, keep it simple.
I'm happy with phpMyAdmin. Thanks though. 
Okay. Let me introduce you to something like this: HouseBuilder::build($params) WallsMaker::make($params) RoofMaker::make($params) or XmlNodeFactory::create($string) XmlNode::getRaw() XmlNode::setRaw() Pretend there is a bunch of classes and DI going on over there, when building a house and parsing XML. You do understand that there can not be one class with &gt;10 protected methods each with &gt;100 code lines and one public method? You have classes for simplifying your coding, for making your work fun and interesting (nobody wants to do math and logic in if/else/if/else/ over 100 lines in one place and arrays everywhere). You test WallsMaker public methods, you test RoofMaker public methods, you test other classes public methods and if test cover them you then test of HouseBuilder should pass because it depends on this other classes. Now you can see, that you are really are reinventing the wheel, or i dunno, your type of traits for no good reason.
I totally agree with your approach of splitting Makers into separate classes and yes, obviously the parser was an exhagurated example to better state my point. Bt if RoofMaker::make() is dead simple, like calling new Roof() and nothing else, I doubt people would like dedicating a separate class to it. My HouseBuilderTools acts as a asort of factory class for house, walls, roofs and foundations. You state that there is some limit on how much logic can we put in protected methods. I agree with you on that 100%, I just state that that limit is about 0 =) Of course there may be some trivial stuff up to 4 lines of code that might as well be protected, but things above that are much better separated imho. 
&gt; PHP under the hood. (Rarely known things explained, such as closure scope binding. Those are reeeally rare here.) You piqued my interest, been doing PHP for 6 years and I've no idea what that is? EDIT: Oh and forgive me if I missed them, but I think you missed input validation, XSS attacks, SQL injections (since this is all good practices etc.). 
let's see.. Silex and Doctrine? and a Bootstrappy interface.. I dig it.
That is my first thought too. Unless this carries all the features of phpmyadmin in a prettier interface (I'm can't tell if this is meant to be a replacement for that) or it accurately guesses the relationships of tables, I don't have a need for it. I'll still have to make my own admin for certain sites anyway. Sincerely asking, am I missing the point? 
I don't know, I mean, if this is a basic CRUD app I really don't see the use of it (maybe other than teaching 5th grade students how CRUD works) but as a replacement of phpMyAdmin I doubt it would have any serious use. 
Thing is - you should not show your inner stuff that should not be used outside of builder class for yourself/other people using this class in production for just creating houses. You can make whatever you like classes for tools/instruments in dev, but even this will be bad practice because you will overcomplicate things by putting unnecessary logic where it does not belong. I mean there is no "instrument for making roof, walls etc". There is no robot for parsing nodes and counting them. It is all - different parts and classes with interfaces. Using patterns you should not think about solving a problem with testing protected methods. You give up on creating classes like WallMaker and RoofMaker but creating classes like HouseBuilderInstruments. And this is - overcomplicating things, when you basically win nothing. Because if your protected methods should be tested so carefully, you again, made them so complex. And that complexity should be simplified by other classes with their methods. The point of good system guts is - you see it, you get it. You don't need to check on 'strange classes' or 'strange use cases'. You see that there is HouseBuilder, and it gets Roof from RoofMaker and Wall from WallMaker. Even kid will get it. Also you are really describing traits. Just somehow you don't get that your traits won't be different from other simple php traits. Also services is better for something like $houseTools-&gt;checkAvailabilityOnMarker(House $house) $houseTools-&gt;calculatePrice(House $house) $houseTools-&gt;sell(House $house, Buyer $buyer) but not for creating tools for making classes. (of course you can use factory as service, as it is done I assume in Symfony2 Form Component) You should understand - that all problems with COMPLEXITY was solved many years ago. Just don't overthink this. EDIT: Also, of course, if you will make class HouseBuilder { protected $tools; //HouseBuilderTools instance } It will be okay for yourself and won't break anything, but you will just create another class for just testing, and I never ever heard about that sort of huge problem with testing in protected methods. Mainly because developers try to keep protected methods specified for the purpose of the class and keep them simple, so that no additional super tests required.
The Builder was probably a bad example since I basically butchered a Builder pattern. I actually sat there for 5 minutes trying to come up with a class that would use protected methods to showcase the idea on, but couldn't come up with nothing better. I don't suggest using this approach instead of separate classes (like RoofMaker in your case). In fact I think that the bigger the number of smaller classes yoou can split a large class into, the better. So I'm not suggesting you cram all the protected logic into some HouseBuilderProtectedTrashCan, rather I'd like to enforce the idea of splitting and separation to a larger extent.
yeah, OutOfBoundsException or something :)
When you code straight and proper, PHP doesn't come in the way anymore. Especially given the SPL, Zend, Yii, and other frameworks.
If you have a client that needs an admin, you probably don't want to give him an access to phpMyAdmin ;) To me, those tools are generating the base of an admin panel. After that, you can just tweak it from there.
Maybe I'm misunderstanding what you're saying, but innodb stores the primary key with every secondary index. There's no additional lookup involved. If your index is on (country,state), a query such as select id from table where country = a and state = b will only use the index. You might be thinking of myisam which uses different pages for indexes and data, but innodb has been this way for at least 4 years now.
True
I think it's meant to be a simpler interface for people who need to give members of a team access to an internal database, but don't want to teach them how a to work a database in phpMyAdmin/Adminer. For example, your team wants to record and manage a database that tracks specific people and maybe other information, and you want them to have a simple interface since they aren't tech savvy. I've used [grocery CRUD](http://www.grocerycrud.com/) for this exact reason, and also so it would be easier to create members with credentials to the interface, instead of having to maintain MySQL members (who may be added and removed well after I'm not maintaining the database).
It isn't actually the law to take a private member and later make it public when your needs change. 
So... CakePHP?
Sure there should be modern task runner in PHP. Because everyone will switch to Grunt/Gulp/Rake/Ant just because PHP doesn't have something simpler then Phing. So it's good to see new project of such kind. When I required a task runner I wrote my own https://github.com/Codegyre/Robo In my case I wanted to define tasks in PHP. It looked natural to me, especially all the majority of task runners I know (expect Ant and Phing) use their native language for configuration. So just curious why did you choose YAML?
Thank you /u/midniteslayr I am seeign that psuedo code., will try and develop this and tell if i was successful or not. Really appreciate the help :) 
You talk about task runners having big dependencies, yet you have 11 dependencies? Sure, those dependencies aren't as heavy as the JVM, but I found it odd. Perhaps you should review this list and carefully think about which ones you actually need.
It's worth noting that there is definitely a difference between big dependencies, and multiple dependencies. I wouldn't even say the 11 I have is a lot. These aren't big dependencies, they are small components. Also I mostly mean no cross language dependencies. If I'm working on a PHP project, I don't want to use NPM, or Java.
Yes, but it stores the primary key, not the location, which will result having to look up the primary key index to find the location of the row which is the secondary lookup I'm talking about.
You need to elaborate on what this thing does. I use Bower for client-side libraries, NPM for server-side JS libraries. Composer for PHP stuff. On what face is this competing, and how/why is this any better? I don't really care how many 'dependencies' any of these projects have; they're one-click installers and add 0 bloat to my actual project (since I don't redistribute the package manager itself). Also, where's the repository of supported packages? And how are they added?
If you know rake, https://github.com/jaz303/phake is a good PHP flavor of it.
Start small and build your way up. I suggest you re-implement a past project in some framework like Laravel. Start with 1 small feature and keep growing it, since you already have domain knowledge about the app, the only thing that's missing is learning the framework well enough to do what you need to do. You'll get there. Just know that there's a light at the end of the tunnel. Those 7 years didn't go to waste, just persevere. All MVCs work like this: - Your html goes into views. These views you could be broken up into nested chunks so that you keep your html DRY. - Your data models go into models (i.e. PostModel, PageModel, [Entity]Model, etc) and the same as business logic. PostModel::getTrending(); - Your controllers should be "thin", they should only be used to pass data from your models to your views (separation of concerns). If they end up being over 50 lines long then you should probably be putting some of that logic (if it's domain logic) into the respective models and/or into separate classes. - Some frameworks have a public folder which will hows all of your assets (CSS, images, JS), some just dump everything into the project root. - Most frameworks, if not all, have routes. Routes are used to point URLs to specific controllers if you want to change the default convention. The default URL convention is generally always /controllername/action/parameter. Is some frameworks, you have to enable routes to work with controllers, such as in Laravel.
This isn't a replacement, or even a competitor to bower, npm, or composer. Those all just install dependencies. This is a task runner. Given a list of tasks, it will run through them, performing the tasks you want, like Grunt (gruntjs.com). As for the repository of extensions, I'm working on that right now.
Yeah, similar to Robo. I didn't like the idea of using PHP to define the logic of my tasks
Just to elaborate on the sizes. Right now, Bldr (the phar file) is less than 5mb. A simple grunt setup is &gt;~50mb. And java is close to 100mb
They're explained in my article. :) That section will be used for less commonly used/known stuff.
It is vastly superior, almost all of the functions, 1% of the bloat.
Reading this, it gives me several ideas (I don't have any use for it atm but this sounds interesting). But say I'm using something similar to Eloquent or Yii's ActiveRecords to actually query DB, I believe the best practice would be to code redis' integration within the models? I mean, you can't efficiently automate this to automatically work with models right?
Sorry.. I got mixed up. Grunt or Gulp I should have said. I'm a big fan of gulp, even though it could be improved in a few areas. Does yours allow chaining? Can I, for example, compile less to css, then run it through autoprefixer, then clean-css without writing any intermediate files?
&gt; create the first lines of code for an admin panel that doesn't make sense. if you're going to spend the time to develop it out, you might as well choose a full framework.
Can it support adding relationships for MyISAM tables? Can it handle unix timestamps gracefully (displayed in human readable format in the list, and timepicker on the add/edit)?
currently, no.... But PR's are welcome :), though, i'm not sure how it'd fit in...
Well, composition is exactly what I am trying to achieve here. The example being a Builder pattern is just a coincidence, it was the first thing that came to my mind. I am not suggesting that all the protected methods should go into a single HouseBuilderTools class, its a simplified example. Obvuously the bigger the number of classes you split your HouseBuilder too the better. Your appriach is close to what I'd like to achive ( just without statics maybe ), but lets take a llok at the setwalls() method, why not make it public too? 
Usually if you have a class that extends a class with private members it can be easily refactores i to composition
wow, thank you
a lot of small objects is always better than a few big objects. This is also true for lines of code / functions. A lot of simple functions is better than one big one. to answer both your questions look over my fork of your gist https://gist.github.com/Nilithus/11108720 Immutable Domain Objects are very possible. It's all about creating good abstractions. Having a Model, Repository (reading / creating models), Persister for storing object information back to the DB. Another option is having the Domain object keep track of their state. So if you wanted to use setter methods you would have the timestamp property and a isTimeStampUpdated property (true | false) you would then pass the whole object to a save function on your persister and the save function would check the different booleans and if it found that the isChanged=true call the appropriate update methods on a service class. as for question number 2. Yes it is very lazy and I'd say is a bad practice (though this is a bit harsh). using objects is about creating interfaces and contracts for other objects to use them. Array's are like black boxes no interface to use them no contract. They have their place storing collections of things but they are usually over used when creating an object out of the data is a better idea. If this looks like overkill on the objects...model, persister, parser, repo, service. It's absolutely not. Don't be afraid of making a lot of small classes. Don't be afraid of objects...its object oriented programming after all :) Edit: Typo
I already wrote an article about Hack but I don't think I will include it. It is a seperate programming language, after all. I'll include HHVM. Thanks for reminding it. :) 
For codeigniter users, there is grocerycrud.com
The main difference (not that I have installed it yet) is that this one lets you add your own code easily. When you need to provide an admin interface, you can't just toss a client phpmy admin. Generally they have their own authentication, display needs, theme, etc..
Oh, that is what those Indian guys have been using to build my websites!
This is exactly what i'm gonna need/use for a potential project this week. If i get the contract, is there a place I can shoot you a couple donation bucks? 
This is the project I've been waiting for (too many projects already to make it myself). I'm a little too invested in Grunt right now but I can't wait to give bldr a spin.
There are two points of view in this debate and they can never be united. One side sees a potential for bugs and mandates braces even in the most trivial of cases, because it is easier to always do it than to assess whether it is warranted. The other side observes that never in their 20 years of experience has this flexibility manifested as a bug, and that anyone for whom this is not the case either themselves is varying degrees of incompetent or has been surrounded by such. But the debate is stupid and useless, and there should be no room for ego. It is an *undeniable fact* that mandating braced control structures fully eliminates an entire class of bugs (dangling-else), and it is irrelevant how often that class of bugs occurs in practice. As much as opinions cannot be wrong, it is a fully wrong opinion that braces should be optional -- no good has ever come of it. Rust, for example, requires braced control structures.
Sounds a fair bit like http://www.phreeze.com/
The generated code is pure PHP, you can easily edit it. I wait your pull request so :) When a column ends in "_id" and the first part is a database table, the edit and create form automatically generates a select with the column name, title, username or email of this table. Also on listings that value is displayed instead of the id.
I've encountered a similar issue with Imagemagick and 1and1 shared hosting, it's really annoying. any php extension isn't going to happen without root, however there may be another solution: PHP *magick libs are just wrappers around the same functionality as the CLI program so you may be able to use shell_exec calls to achieve the same functionality. That just leaves the issue of getting the Imagemagick binary. If Dreamhost have installed the common build tools (gcc et al.) then you'll likely be able to build Imagemagick in a folder where you do have permissions and then just call the resulting binary using shell exec. Something like: http://faq.1and1.co.uk/web_space__access/ssh/7.html and specify a writeable path in step 6/
Log their IP address and add a cookie. If either come back positive, don't let them vote. If it's for something similar to 'would you rather' it's not going to matter much if someone figures out to get around it. The vast majority will not
Why use a URL shortener? Why not just redirect them, it's not like it is any different to the end user
My wife predominantly photos weddings and gives out a URL to their private gallery for them to use and share with their guests. This means that the Bride and Groom end up with a URL like: http://thelensgallery.com/index.php?autolog=usernameofcouple&amp;cat=22&amp;album=couplesprivatealbum Which is a little bit cumbersome, especially to then e-mail around to guests etc. Using a URL reducer, we can give them something such as: http://lens.pics/bridegroom **edit** Mis-interpreted what you meant. The root gallery / website URL isn't the shortest in the world to begin with and I need something my wife can administer herself without needing to write nginx config files and updates etc. **edit 2** There's also the fun of creating something like this from scratch as a pet project :)
Yeah..that's kind of a core structure thing, not an add-it-in-later kind of thing. That's why Gulp got so much momentum and many people switched away from Grunt. It simply can't be added to Grunt.
I always tell project managers and sales people that voting without registering simply cannot be trusted.
Same here. But you know - client is client.
Ahh. I'm actually the opposite. I like the idea of using PHP because I'm able to load my app's environment and work with the models. I have tasks similar to what's in a Rails Makefile.
Somehow Yaml is easy and wonderful at first sight. Like you now, marketing, ads, fancy shmancy words and pictures like "yo! web is easy, man. and FUN. and yaml is FUN. go for it man!". Aaaaaand everyone loves Yaml without trying different formats and seeing Yaml as panacea for everything.
It's open to anyone without any type of registration and there is a massive banner &amp; PPC ad campaign pointing to that website.
Do you own lens.pics? is 'pics' a top level domain you can own? What it sounds like you need to do is get a shorter domain and do URL rewriting for pretty URL's like reddit does so you could have &lt;short domain&gt;/&lt;username&gt;/&lt;album&gt; so it would look like lens.pics/jones/wedding That's what I would do anyway
In this case of using a private method on setWalls(), it is to keep the object immutable. In my example, I decided I would not like my walls changed. Once a building is created, it should exist exactly how it is until it is completely destroyed. If I wanted to change the walls after the House is created, then I would expose it as a public method. The goal of it is to keep the objects as simple as possible to avoid coupling in the code or unexpected changes to an object. Forcing setWalls() to be private makes me confident that the walls will never change after the object is created. I could shove the setWalls() method guts into the constructor, but that makes it harder for me to read later on. There are reasons to use each type of visibility on a method just as there are reasons not to. Dismissing the entire concept for a problem that is unrelated to the real issue is just silly. While I see you're using some composition, the example just defers the problem into a new object. It does remove the coupling between the object building and the object components themselves, but it just moves the way objects are built into another object. It is like taking the object and just pulling the builder out. In the context of what you're wanting here, I would say that private and protected methods are probably not necessary here. Not every problem needs a hammer to be solved either, though.
Some small nitpicks: **General** * Use === instead of == when possible. The triple equals does type and value comparison. The cost is that you have to be more explicit about what you're comparing, but the value it provides is that it prevents you from accidentally writing buggy code. The same goes for != and !==. * I would consider putting spaces after commas. You have spaces after commas in some places, but not all places. It will improve your code readability. * Favor single quotes for string literals instead of double quotes (unless you're specifically using string interpolation). ~~Single quoted string literals are faster.~~ Single quoted strings are easier to type and play nicer when storing HTML in strings (no need to escape double quotes around attributes). * Consider adding your database connection code into some include file to maximize re-use. **index.php** * Consider renaming $requested to $requested_uri. Improves readability. * Consider changing `$returned_rows != 1` to `$returned_rows === 0`. That's what you're really checking for, isn't it? (Being as specific as possible with these kind of things makes your intention clearer to anyone that is reading your code.) **admin.php** * Instead of outputting escaped HTML, which is hard to maintain, consider adding PHP tags inside of your HTML. Shorttags are nice for this. Your `printform` function could look like: function printform() { ?&gt; &lt;form name="Redirection" action="manage.php" method="post"&gt; Full Url: &lt;input type="text" name="url"&gt; Short Name: &lt;input type="text" name="short"&gt; &lt;input type="submit" value="Submit"&gt; &lt;/form&gt; &lt;?php } * Consider renaming `printform` to `print_form` (it's two words). * Why does the name of the form start with a capital letter and the names of the form fields start with lowercase letters? * Consider putting a space before the opening brace of your functions. * Consider adding a space before and after &amp;&amp;. Will increase readability. * Consider renaming `$stmt` to something like `$insert_redirect_sql_statement`. Abbreviations increase the amount of mental load necessary to read code. You want variable identifiers to be as descriptive as possible. * Consider adding labels around your form text. * Validate your HTML and fix W3C validation issues. As a final note: for small projects like the one you've posted, what you have is fine. However, if you want to work on a big project, consider learning an MVC framework. It will make code organization a cinch!
Mostly looks good to me. A couple of small things: * Use === rather than == when possible (index.php:4) * It's not clear from just the code, but make sure the uniqueness of the short url is enforced in the database as well as in any business logic. 
I'd like to buy a vowel.
Thanks so much for this. I wasn't aware of the added benefit of === over == I shall be going over and cleaning up all your points, but this was really handy for me to help ascertain that my code wasn't "that" terrible for using out on the big bad internet.
Thanks a bundle for taking the time to look over the code, it's really appreciated and I shall be implementing the === in place of == (I didn't know about it until yourself and zhay mentioned it)
Glad to help! It's always good to see someone using PDO :)
You can use a micro-framework, something like http://docs.slimframework.com/#GET-Routes
are they forced to validate their email address? are phone numbers limited to a country or anything? Who's allowed to enter? what are the users voting for?
Use FB login, or something similar as the login?
Wow, thanks for the gold. Can you post the structure of your database - I'm not sure TEXT is the right datatype for this. SHOW CREATE TABLE redirects will show it for you.
You're more than welcome on the gold, I figure it's the least I can do for anyone willing to take some of their personal time on a Sunday to help me out. The database table is: &gt;CREATE TABLE \`redirects\` ( \`id\` int(11) NOT NULL AUTO_INCREMENT, \`fullurl\` mediumtext NOT NULL, \`shorturl\` tinytext NOT NULL, \`date\` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, \`ip\` varchar(40) NOT NULL, PRIMARY KEY (\`id\`) ) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 
This is list of suggestions is okay. However: &gt; Single quoted string literals are faster. This is simply wrong and has been for at least several years. Here's a post by NikiC: http://nikic.github.io/2012/01/09/Disproving-the-Single-Quotes-Performance-Myth.html Can we stop perpetuating this misconception? Thank you.
No login is allowed, not even Facebook. 
Take a look at how the XML configs are handled. I'm not sure this really matters. I could be wrong though :). 
Yeah, I'll probably be making an extension sometime soon to be able to do stuff like this.. 
On lines 7 and 22 of index.php, get rid of the "else" statements and indent the code up one level. Since the "if" conditions exit if true, there is no need to have an else, and also it's clearer to read. This suggestion is inspired by http://golang.org/doc/effective_go.html#if (last part of the section on "if"), basically try to reduce indenting and make your left edge as straight as possible, only indenting to handle errors. P.S. Thank you for the gold. It's my first time receiving it!
Thanks for the info. However, if I'm going to habitually use one over the other, I'd rather use the option that involves fewer keystrokes. Plus, if you ever want to put an HTML template in a string, it's easier to use single quotes so you don't have to escape the double quotes for HTML attributes.
I'm on a campaign against vowels.
I can definitely see that the else statements are superfluous (it's so obvious once someone points it out), but (and I promise I did read the linked article end to end but I'm being a little slow due to wine consumption), what's the benefit of dropping the else statements? (Am just trying to gain as much understanding and learning from this exercise)
If they're forced to enter a phone number your problem is solved, isn't it? Don't let a number vote more than once. Or, if you're picking a number at random, pick from entered contact numbers, not votes. Obviously you're going to have to just write some algorithm that standardises the number format, or force them to enter it in a certain format.
Well you know what they say about assumption... I had assumed there was no reason for varchar to not have the same indexing constraints as tinytext, turns out I was wrong. Have just flipped the "shorturl" column in the DB to be varchar(255) and created a unique index and constraint on it, so major thanks for yet another learning experience :)
In addition to that you can screen for real phone numbers. For instance denying anything with an 888, 855, or 900 area code. Or actually building a table of valid area codes and checking against that then add phone numbers as they are entered so it cannot be used twice. You might also throw in something that says winners will be contacted by phone to stop people from using fake numbers as well
P.S. no patronising noticed or inferred, but I did note and ponder on your consideration of this fact and it was appreciated but your really have no worries on that regard, but extra kudos and warm fuzzy hugs to you for being a socially aware and considerate person :)
Definitely use varchar where you can. Also I'd suggest using datetime rather than timestamp. MySQL is strange sometimes and timestamp does odd things if your server ever changes timezone (whereas datetime values are not adjusted for timezone and always stay as whatever you enter them as)
That was what I assumed, but wanted to be sure. I shall be dropping them anyway as I come from the hacker (Steven Levy, not the other type) school of thought when it comes to coding. Thanks muchly for helping further my education.
MySQL/MariaDB didn't like the column being set with a DB timestamp autovalue on a datetime field. I did consider setting the insert time in PHP as a value, but I figured it was best to reduce the amount of inserted variables to the core minimum and allow MariaDB to handle the rest natively. Do you advise otherwise? (and if so, why? I ask so I can learn as much as possible)
Frameworks always scare and confuse the heck out of me. They always reference controllers and routing and mvc conventions and other scary and intimidating stuff to someone like me who is still just getting to grips with OO code...
Note you'll probably want to add some error checking code where you execute the statement (admin.php:46). As you're using PDO in exception mode you'll have to wrap it in a try, catch block. As you need to do this because of the uniqueness constraint, you could actually remove the first query entirely, reducing the amount of queries per page!
Maybe rename the settings file to database.php and have the file return the complete database object, if you want to have a file that does that. Then also move the setAttribute() calls into that file so that you do not have to repeat these over files. Your could then do: $db = include("database.php"); In the first conditional, I am not sure how $requested could be "/". If it were "/", it would have been removed by ltrim the line above it. If you are checking for "" or null with ==, that's evaluates the same for all values of $requested. Maybe just try empty(), it seems appropriate here. I would forgo the LIMIT 1 in the SQL query and instead have a UNIQUE index. Since you are not telling the database how to sort the results, there is no telling which row you will get if there are multiple with the same value for shorturl. If you have an exit or return statement at the end of a conditional, don't write down the else, so you can have less indenting. Less indenting = nicer to read. In admin.php: this checking if a url exists does not really work. What if somebody else inserts just between your check and your insert? Then it'll be a duplicate. Use a unique index, and in the insert fails, give the error message. Probably already mentioned, but you are not escaping $short in admin.php allowing XSS. What if the URL were to contain HTML. Just habitually escape always, even if you are sure it cannot contain HTML. Good luck.
Timestamps do strange things with timezones. They're actually stored in UTC and converted to and from the local timezone when saved. This means that if you ever change the timezone of your server or move the data to another server, all the dates will appear to have changed. Datetime fields just store the value you entered as-is, with no adjustment for timezone. Modern versions of MySQL (5.6+) and MariaDB support default values for datetime fields: MariaDB [temp]&gt; create table foo ( -&gt; id int auto_increment primary key, -&gt; title varchar(50), -&gt; created_date datetime default current_timestamp -&gt; ); Query OK, 0 rows affected (0.20 sec) MariaDB [temp]&gt; insert into foo (title) values ('Hello'), ('World'); Query OK, 2 rows affected (0.01 sec) Records: 2 Duplicates: 0 Warnings: 0 MariaDB [temp]&gt; select * from foo; +----+-------+---------------------+ | id | title | created_date | +----+-------+---------------------+ | 1 | Hello | 2014-04-20 13:57:14 | | 2 | World | 2014-04-20 13:57:14 | +----+-------+---------------------+ 2 rows in set (0.00 sec) MariaDB [temp]&gt; show variables like 'version'; +---------------+--------------------------+ | Variable_name | Value | +---------------+--------------------------+ | version | 10.0.10-MariaDB-1~wheezy | +---------------+--------------------------+ 1 row in set (0.00 sec) If yours doesn't, it's time to upgrade :D
Exactly. When I write code, I try to write it in a way that somebody else can understand quickly. Usually that "somebody else" is me a few months/years into the future, having long forgotten how everything fits together in the project.
&gt;(ugh, can't get Reddit to format this right) Looks like the code stuff is broken somehow by being after a bulleted list. Adding non-bulleted text fixes it, but here it is all pretty: function printform() { ?&gt; &lt;form name="Redirection" action="manage.php" method="post"&gt; Full Url: &lt;input type="text" name="url"&gt; Short Name: &lt;input type="text" name="short"&gt; &lt;input type="submit" value="Submit"&gt; &lt;/form&gt; &lt;?php } 
Such nonsence.
I shall have to look into this more as both phpMyAdmin and command line give me: &gt; MariaDB [thelensgallery_lenspics]&gt; ALTER TABLE redirects CHANGE COLUMN date date datetime default current_timestamp; ERROR 1067 (42000): Invalid default value for 'date' Am currently using dev-db/mariadb-5.5.32 so I will check if this is a change introduced between 5.5 and 5.6 but it would seem unlikely. 
This is probably your best option if you won't require login. Still ways of beating it though.
Well, if you just need to plug some business rules and add 2-3 forms here and there, I don't see how starting with a framework and write everything from scratch would be better, but you do whatever the hell you want based on your project context (time, budget, etc)
i dunno man.. i think it might start that way, but over time every project grows out of proportion. i think it should either require 0 to little work to throw up so that you don't feel bad when your project outgrows it, or you lay down some better groundwork. but anyway..to each their own. i'll poke into this more later, could still be useful.
Could you send an email, with confirmation link, which must be clicked for the vote to be counted. It also verifies it to ensure you can contact the winner. Use a captcha to help combat bots. Drop a cookie that expires after the voting closes, log the IP address and perhaps user agent information to prevent non savvy users from entering all of their different email addresses. Can't think of many other options. Even requiring people to register wouldn't prevent people creating multiple accounts.
Yes but there are many many cloaking services. Anybody can hide their email addresses.
For many yaml is the sweet spot between json, ini and xml where it's legible, not overly verbose and has plenty of features. For that I think it's pretty good. XML is for many, and myself included just too verbose and it takes significant effort to parse. Especially when it comes to configuration it's nice to be able to parse something that translates directly into native types. Simplexml promises this, but I think it falls short. The alternative is to define an xml structure like the one from xmlrpc that does map directly to common native types.. but then you have to wonder why you'd pick xml in the first place? Xml to me is a powerful format for transmitting data. If I'd be building a new API that emits that and this system is supposed to last a long time, xml tends to be my go-to. But I don't think I would ever use it for something like configuration.
I'm just wondering, would it work if you modified an existing form to accept files using Firebug or similar and then proceed to upload a file. Would it be written to /tmp automatically?
You can't if you care about uniqueness. 
I'm asking this more as a question than anything else. Is there any good reason to use bindParam rather than bindValue? I think they both work okay here but, to me, bindValue seems more direct. I don't think I've ever used BindParam. I guess it's useful for loops. You'd BindParam and then change the value of the bound variable as required for each loop.
If email and phone are mandatory then combine them, hash and there is your unique identifier. Then to cover your back beef up the t&amp;c to cover fraudulent votes. Your never going to prevent vote abuse if someone really wants to do it but that doesn't mean you have to pay out if you've got evidence that they have done so.
I believe `date` is a reserved word so you may need to escape it in the alter statement or rename it. 
 echo "&lt;a href=\"trackInfo.php?name={$row['name']}\"&gt;Click for more information on this track&lt;/a&gt;"; 
:| The difference between 5mb and 100mb within my **multi-terabyte** hard drive isn't a real selling point.
+1 for PDO!
You can just use single quotes around HTML attributes instead, the spec allows it. But I agree that using single quoted strings in PHP looks tidier. 
&gt; I will check if this is a change introduced between 5.5 and 5.6 It is, the behaviour was changed in MySQL 5.6. Previously only timestamps could have default values, and even then, you could only have one per table (so you couldn't have both "created" and "altered" timestamps, both with default values) For what it's worth, I'm on MariaDB 10.
You have to indent stuff an extra 4 spaces (ie 8 total) when inside lists. - List item Some code here - More - List - Items
True, but Adminer's interface is pretty sucky.
tons of weird ass TLD are being released every week this year, check out the providers, theres crazy stuff like .pizza or .plumber
Seems most of my thoughts have already been covered except one: what's with all the bindParam calls? You can just pass an array to execute: $stmt-&gt;execute(['id' =&gt; 1, 'other' =&gt; 'thing']);
How does it "fully eliminate" anything? If someone is stupid enough to not add braces, they are stupid enough to accidentally put an extra statement *after* some existing braces when they weren't supposed to.
JokeNotFoundException
URLs can technically be longer than 255 characters. You may decide not to support them, and that's cool; I just thought it was worth noting.
That's when you give the client what they ask for. When you cannot solve it, ask them for a solution, and implement solution. Make sure you're hourly and then just milk their stupidity until they fire you for "incompetence".
I prefer IIS to Apache on Windows (very easy to set up with Web PI, + PHP manager) or just use XAMPP || WAMP || Zend server. I can't remember the last time I configured Apache, but I do remember it was a pain... MySQL &amp; PHP .ini will probably need to increase the memory allocation &amp; timeout times. 
And double-quotes looks nicer in html. Win-win. 
You might also want to check out "WAMP" solutions which bundle up most of this and are pretty easy to get turned up.
Thanks!! Someone said having separate php, mysql and apache is more professional. Any truth to that? 
"more professional"? That's ridiculous. For development, I'd say WAMP is the perfect choice. 
It think using a preferred web/db server and PHP version depends on your production. The closer your development to production environment the better.
So your problem doesn't seem to have anything to do with php, apache, or mysql. SMTP is an email protocol and in context of your error it means that you need to have an email server setup or configured for this application to work correctly. As far as the other requirements are concerned, it says on the GitHub page that the tutorial covers how to install/fulfill them. Honestly though, if you're going to build an application of some sort, I'd suggest a more fully-featured framework. This one looks interesting, but isn't really intended to be a full framework, just the login portion. It may seem like more work to start with, but learning a framework gives you some big advantages, one of which is having an entire working site in a very short time. I'd suggest you have a look at something like [Laravel](http://laravel.com) to get started with. Also, to use Laravel, you don't need to setup or have an email server.
I prefer using Linux OS on a VM, as my production environment is almost certainly going to be a LAMP stack and I use tools like grep a lot. 
When you use rowCount() to check that the returned row count is equal to one, you're really saying "if I were to retrieve a row from the resultset, would I succeed"? But actually, fetch() is specced to return false on failure, which might happen under various conditions. So even if your rowcount is 1, you might not successfully retrieve that row using fetch(). This makes the check for rowcount worthless, and inflates your codesize to no good purpose. I would do this instead: http://pastebin.com/KmH4sswJ Now you just go ahead and try to fetch() the row without checking the row count. If a row exists, it'll redirect them to the target, otherwise if the row didn't exist or some other error occurred fetching the row, they'll be redirected to the homepage.
Just don't develop ON your production environment.
Are you a ColdFusion Developer? :P
What would the advantage of this be against using composer? Isn't the whole point of autoloading the fact that I have all classes available when I need them, via the use statement?
Since you put it that way, Vagrant is the answer...
&gt;Use === instead of == when possible. The triple equals does type and value comparison. The cost is that you have to be more explicit about what you're comparing, but the value it provides is that it **prevents you from accidentally writing buggy code**. The same goes for != and !==. Sweet Zombie Jesus .... Are you kidding?
Move into project management. Get a business degree or some PMP certification. Either that or find work at a top 10/50 company. 
A really good concept I saw in a talk about code quality a few months ago is called a "[happy path](https://en.wikipedia.org/wiki/Happy_path)". The idea is that you have a "happy path" through your code and then you branch off that for "bad" things, when you approach conditional things with that in mind it prevents unwieldy nested statements and makes code *so much easier* to understand. Probably the single best idea for improving code quality, certainly helped me a ton. Here's the talk, I highly recommend it: https://www.youtube.com/watch?v=H2AvoAzbGOE
I'm reasonably sure what this guy is talking about *is* using composer. Composer supports the PSR autoloading formats- and, in fact, Jordi (author of composer) is one of the people who worked on the PSR's themselves.
Less buggy than it could be. 
I've been using XAMPP , should I be using WAMP instead ?
Become an entrepreneur and set your own salary. That's what I did.
What is the real benefit of a higher salary if you have to move to one of super-expensive places to get that (yes, looking at you Mr. SanFran)? 
After a very scary upgrade to Maria-10.0.10 (I use two servers configured in multi-master replication) I have now been able to set this, so many thanks!
The url field is regular text so supports up to 65,535 characters, this is the "short" alias field that's being restricted to 255 characters, but thanks for checking.
&gt; what I do in my daily 9-5 is CMS work (Wordpress/Drupal/Joomla) IMO, this is the problem. The way I see it - these frameworks hold me back from being a good developer. Refuse all work using these. Do you have a GitHub? Make something that's better than these and put it on GitHub. Even if it's something small.
I am the author of the article and the post is about writing a class autoloader. Something you would normally not be doing (as the post states). You are right. One of the things Composer does is that it provides you with an autoloader. Composer is really great software and this just shows you how to implement this little part of the Composer functionality. I hope this makes it a little more clear and that you liked the post.
PHP on IIS what kind of monster are you !!? Just kidding, yeah his best bet would be WAMP or maybe a preconfigured vagrant instance but that one may be to confusing
Depends what you are working on WAMP might be less than ideal
Thats typically something people cite as an advantage of using a strongly typed language, so I'd say he probably isn't kidding. I don't think that he means that you magically write bug free code once you stop using type inference though.
no, but the difference between downloading 5mb and 100mb frequently can be a selling point. Doing this on a travis machine can add some time to your builds. Its also not the only selling point.
The "use" statement does not, in fact, "make classes available to use." It only aliases namespaces (see the docs here: http://www.php.net/manual/en/language.namespaces.importing.php). Referencing a class triggers your autoloader functions, you do not need a "use" statement for that to happen. The "use" statement allows you to "import" a long namespace so that you only need to type a class's base name when you know it won't conflict with another class name in your base namespace or it lets you alias one class name with another. namespace Vendor\Application\Module; use \OtherVendor\Application\Widget; $widget = new Widget(); Without the "use" statement above, PHP would assume that "Widget" is in the "Vendor\Application\Module" namespace, because that is the namespace of the file. You would have to type out "new \OtherVendor\Application\Widget". Sometimes that makes things more clear in large files. Ultimately it's up to you. I see a lot of newer engineers at my job putting in "use" statements for every single class that they use in a file. That is not necessary, especially if they are in the same namespace as the file!
This may seem counter intuitive, but stop looking at jobs seeking specific product-based skill sets, like wp et al., and start looking at companies requiring more bespoke, 'boutique' solutions. Cms work is commoditized, which makes it difficult to 'stand out' for your work; go somewhere you can architect a platform, or implement an engineering workflow that demonstrates results (ie profits, or cost savings). Be the big fish in a small pond (ideally in a mid-level metropolis like Chicago, Austin) where the cost of living won't decimate your income, yet still provides enough opportunity to thrive. Screw the coasts, a low six figure job there is equivalent to making 60k in the Midwest after cost of living is accounted for. 
Do you need to validate that the requested variable is legit? Why php redirection rather than the server rewrite?
PHP Redirection so wife can administer it and create her own entries. Why not validate?
I'd love to hear more about how you did that, and what you do.
Thanks for your reply! :D One of my problems is that I don't understand PHP well enough to be able to interpret the files that I downloaded from that website. I realize that I "need to have an email server setup or configured for this application to work correctly", but I don't know how to set this up, it isn't quite what I have been studying (I have mostly being doing coding proper) though I guess this is not quite PHP-related. I googled "setting up an SMTP email server" and got this page: http://geekswithblogs.net/ferdous/archive/2011/03/15/smtp-setup-for-windows-7.aspx It says that SMTP is not supported on the Home Premium edition of Win7 that I have. Is there any third-party installation? I am hoping that that is what http://www.smtp2go.com/ is... Could you also explain to me what is meant by an "application" in this context? I mean, is facebook.com an "application"?
So WAMP is all I need? I am wondering whether it will fulfil the last four requirements of this Login code: " - installed PHP extensions: pdo, gd, openssl (the tutorial shows how to do) - installed tools on your server: git, curl, composer (the tutorial shows how to do) - for professional mail sending: an SMTP account (I use SMTP2GO) - activated mod_rewrite on your server (the tutorial shows how to do)"
I hear XAMPP and WAMP a lot, care to explain the difference?
I'm actually writing a login page for a simple web game and this has been been on my mind: Should sessions just be ignored completely? Is there any reason not to just use a cookie to authenticate on every page? Maybe efficiency? (You save the actual cookie data being sent, that's all I can think of. Maybe if you stored some basic info in the session, like the user's name or something, for display. Actually, maybe I just answered my own question.)
So a real dumb question: is Windows 7 and WAMP _the only_ stuff I will need to be able to fully run the code above? (i.e. does it fulfil the last four requirements they mentioned: " - installed PHP extensions: pdo, gd, openssl (the tutorial shows how to do) - installed tools on your server: git, curl, composer (the tutorial shows how to do) - for professional mail sending: an SMTP account (I use SMTP2GO) - activated mod_rewrite on your server (the tutorial shows how to do)" ) I am unsure what environment my real server is using, I haven't uploaded anything to it for ages for fear of hackers. I just prefer to develop the code itself and website functionality first, before I worry about making my website go live. Though I guess it helps to be using the correct tools from the start. I will check out WAMP.
It might be a good idea to force shorturl to be always lower case in the database and do a strtolower on the incoming request. I know MySQL is case insensitive so it doesn't really matter for this but, since you're using PDO, it would be quite easy to move to PostgreSQL which is case sensitive.
If that's letting you get the development done, good enough. No reason to switch.
Do most serious websites use VM on Linux to develop live websites? My website isn't going to be, like, a bank, but I want it to be fairly serious within reason. At this early stage however, making progress and being able to use and make changes to the above code is more important than learning VM etc.
php will accept any incoming file upload request and put the file in tmp. but it is supposed to delete it after the request is finished. 
If you learn the difference between these two, please tell me!
With the cloud, and easy-to-admin systems, etc. sysadmin is on the way out. There is still enterprise-level work and system architecture at big-level cos, but your regular sysadmin jobs are dropping 15% every year.
There are lots of WordPress folks making north of 6 figures. If you can stomach freelance (not everybody likes working directly with clients or managing business stuff) it's easy to find 20 $5k projects per year or something similar. Also Automattic hires all the time and pays competitive developer salaries. http://automattic.com/work-with-us/
I assume getting help if you get stuck, would be harder if you use a lesser well-known package such as this, right?
I'll echo quite a few of the other commenters: 1. Move away from being a **PHP Developer** unless you plan to dive super deep. You can make 6 figs doing CMS work but you have to be core-dev and speaking at conferences level. 2. Get really knowledgable in another area. Become awesome at DevOps, turn yourself into an amazing JavaScript expert, etc. You need to be the whole package. 3. Find an opportunity to lead a team of other developers as soon as possible and get leadership experience under your belt. A 6 figure job that doesn't require leadership is almost nonexistent. However while all this is happening you need to get yourself out there and visible. These 6 figure jobs are usually going to come on referral, you're almost never going to be able to apply for them because they'll be filled long before it gets that far. 1. Attend user group meetups monthly. 2. Attend conferences (save up $1-2000 for travel, room&amp;board, and tickets and attend something like tek or Lone Star PHP [SHAMELESS PLUG]) 3. Start giving presentations at user groups 4. Start giving talks at conferences by submitting to their CFPs **Get out and get active** and get people to know who you are. To recap: At the level that pays 6 figures you need to be more than a code-monkey, because those are a dime a dozen. You need to be able to manage and mentor junior developers, you need to be able to run every aspect of the tech side of your employer's business because the buck will likely stop with you, and you need to be able to bring good publicity and attention to your company as an ambassador.
It's good that you're so excited about this stuff, but I really think you're getting ahead of yourself. If you have so many private / protected methods in your class that it's really difficult to test them, then yeah that's a problem. It's a sign that your class is doing too much and you should refactor into multiple classes - *maybe* using the composition pattern or maybe using any other available pattern. It doesn't mean that all protected / private methods are bad, and it doesn't mean that the composition pattern is the best choice for any given use case.
This is by far the most constructive thread I've ever seen regarding a review of someones work on r/PHP. I tip my fedora to you all.
Government contracting. I do Drupal @160k. If you can deliver full stack including IA you are worth that much to .govs.
Honestly, the best way to increase your salary is to job hop. In almost every case, you aren't going to get ahead by working hard in one place and hoping for a nice promotion and raise. You want to find a competing company that doesn't know how much money you are making and wants to steal you and your company secrets away. You really don't need to chase after a better title somewhere, what you really want is a position in a huge company. I worked on the financing pages for Apple. Once that was on my resume, jobs were offering me almost double the salary they were previously. It wasn't hard to get the position working on the Apple site either, they were going though developers weekly. Even the contractors from India couldn't wait to go home. In less than one year, I had seen 12 different developers join and quit from mistreatment. Working there for that year really sucked, but it definitely paid off in the long run. My current position is a lot more money, laid back, and I work from home three days a week.
Generally I try to stay away from too many of these topics, but I believe there is some really bad advice in here(and a couple really great pieces). Firstly, the idea that because you use a CMS, you are automatically going to make less is absolutely absurd. I specifically find myself spending much of my time in Drupal these days, and from my experience there is an astronomically high market for Drupal and an astonishingly low amount of talent. The number of languages, frameworks, CMS's on your resume will not dictate your salary, finding a job in a strong market that requires the skills you have is where the money is at. UNDERSTAND YOUR MARKET, FIND YOUR NICHE AND ADAPT AS NEEDED. Now I'm not suggesting you pick a CMS and embrace, it, what I'm saying is that it's on you to make yourself valuable, and then to sell those talents and capitalize on them. Make sure that you can very clearly demonstrate your talent level, and that you present yourself well. This may include becoming a big part of a community, or creating your own project on github that becomes widely used, or having a widely known blog where you delve into deeper technical issues. My point is, you have to treat yourself like a business, you need to be considerate of how you market yourself, you need to network with people and you need to build YOUR brand. I feel like among developers, it's far too common to see people say "I am a great developer, I've learned so many languages, I can tell you the 1's and 0's of everything, why can't I get an awesome job?", but then when it comes to their portfolio they have little to show for it. They've never really owned a position, or been an instrumental part of any project, and then they are surprised when few want to offer them that sort of money. (Sorry if this is tough to read, typed on my phone) 
[I found this blog post](http://roshanbh.com.np/2007/12/sending-e-mail-from-localhost-in-php-in-windows-environment.html) addressing local mail in WAMP. I haven't tried it, in fact I haven't even read it because I'm on my way to work and I don't have WAMP installed ATM, but try seeing if it works for you. As for password_hash, note that two arguments are required for the function: the password, and the algorithm as a PHP constant. Try using the constant PASSWORD_DEFAULT as the second option.
Interesting! Is this service free for open source projects?
Hm. For some reason I thought it was free for open source, but now I don't see where I found that. Will keep looking. UPDATE: Yes, free for open source, confirmed by [@schmittjoh](https://twitter.com/schmittjoh/status/458276298763538432).
Most more-serious developers would be developing in a virtual machine that runs the same software as in production. This is important because you have a higher certainty deploying/publishing to the live site will not break anything, as well as enables you to easily work on multiple versions of the site at one time (just spin up a new virtual machine with the latest copy and youre good to go). A lot of people use Vagrant or Virtualbox these days as mentioned by /u/chuyskywalker ... I'd definitely recommend that.
i'd advise you to figure out what sort of work gets you motivated and excited, seek that path, and don't just think about money. at the end of the day, money generally doesn't make people happy. more money != more happiness think about what will make you happy, blend that in with what pays well, and seek that. if you come up with something where you don't have any experience, get some experience. for example, if you think mobile app development seems like it will make you happy, create some mobile apps. being a developer, it's one of the few professions where you can create your own experience easily. contribute to an open source project, make your own apps, etc... that said, most of the advice here is great. stop calling yourself a PHP developer, generalize your title a bit. i'd suggest becoming familiar with AWS/cloud based development, where you leverage cloud services for your applications. auto scaling, sharding, etc... those skills are all valuable to startups that could offer you a challenging career path.
I think the "We make slightly less than other languages" comes from us having a higher concentration of non-technical folk trying to hack something together which brings the mean down. There's a better way to Word that, but I think it got the idea across. 
Unfortunately that means you need to work with magento. I kid I kid (kinda). Magento is good once you've used it long enough but the lack of good documentation and tutorials makes it one of the most difficult frameworks to learn. 
Nice... Any special strategy? Which is your expertise? Where are you located?
Awesome, thanks for digging into this Paul. I see they've updated their website to reflect this questions as well—mint!
I am simply trying to implement the code above, and then I will develop some basic functionality for users to share some info. Any internet site 10 years ago could do all of this, it's nothing high-tech.
I absolutely want to make the jump to more advanced features later on, but right now I would just love to get the above code working completely, SMTP server and all.
No specific strategy, but I did get involved in online communities with a lot of other remote developers; Networking helps a lot. The latest job I'm in actually came from a blog post I wrote that the project lead found. I'm a systems architect, both front-end and backend. I live in Southern California, but I could probably be anywhere. The current company I work for is about 30 miles north of me, and my last job was for a company in Buffalo, NY.
Does this provide anything that a Jenkins setup with http://jenkins-php.org doesn't? (Apart from ease of setup)
Are you suggesting I'm in SanFran? Because I'm not. I live in the LA area, but as long as you don't live in downtown areas, the cost of living isn't that great.
here's an interesting study http://content.time.com/time/magazine/article/0,9171,2019628,00.html not having money does suck, and makes people unhappy. but people making more and more money does not make them more happy. it only works up until a certain point. of course you need a balance between doing what you like and making money. i'd place more emphasis on doing what you like.
No idea. Let us know if you discover anything!
Jenkins is a tool for Continuous Integration, Scrutinizer is for Continuous Inspection. Similar to Scrutinizer is [SonarQube](http://www.sonarqube.org/) Differences 1. The Continuous Inspection tools allows you to see who is responsible for a problem (I might be wrong on this one, I've just started playing with Jenkins) 2. You can create issues from the reports (Scrutinizer allows you to create Github issues, SonarQube can be linked to a JIRA instance) 3. Besides things like phpmd, phpcs that you might set up to be run during a Jenkins build these code inspection tools have their own analysis rules.
I do Drupal Commerce dev work in the private sector and pretty much the same here. Love it or hate it, Drupal dev work is good for your wallet. 
Yo, Paul, good book, but don't you think posting a review of your book is kinda spammy? Cheers. 
hello, I have pagination. My problem is when someone submits 10-12 posts at a time and it floods the "latest" list. It's a song submission site, so when the user submits 12 songs within a specified time limit, i'd like to only show, say 4 of those results and omit the rest, while still showing the other 'latest' songs. 
you will need to add the age of the post as a weight. REDDIT is an opensource project so you could try and brave the source and figure out how they do it. Edit: as far as weighting, I would say that a zero day post get's 100 points, and a 1 day old would get 90 points and so forth until day 10 it would be zero, then down to negatives until -1000 is hit or something. 
Assuming you're using the new algorithm from [here](http://www.outofscope.com/reddits-empire-no-longer-founded-on-a-flawed-algorithm/), you just need to change the scale factor for age. Increase the number 45000, so the time something was posted has less of an effect.
"For instance, I want to write an api, how should i do it?" This, and the answer to ALL of the questions you posed is "It depends on circumstances" What you do at one project wont be viable in another due to the circumstances involved. Factors can be anything, mostly things you cant even imagine now. Speaking from broader engineering terms, software development is a 'job shop' affair. It is not an assembly line thing, in which the system and tasks and circumstances can be standardized. 
I plead guilty to enthusiasm. :-)
"As you can see: unit tests, refactoring, disease, heartbreak - they all go together. Paul found out the hard way that his troubles were just beginning. His mind was so messed up he could hardly do nothing. He was in a quandary, being devoured by the swirling cesspool of his own steaming code coverage... ehh, the guy was a wreck. So what does he do? For once he does something smart, he goes out and pays a lot of money to Laravel Ron Hoover, at the First Church of Otwell-ology..." (Central Scrutinizer, http://youtu.be/WSz3M9fb_Z4?t=38m26s)
My http://github.com/phpixie/database got 8.87 right of the bat =) Helped me found a few minor bugs too =)