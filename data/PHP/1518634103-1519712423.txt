Do it the other way around. Learn the frameworks and then pop the hood to see how and why they do something. This is particularly true for those unknown unknowns. For example, I didn't know anything about proper CSRF protections or session fixation attacks and how to mitigate them until I went digging into Laravel. I wouldn't have even known to look for them until I noticed a few funny things about the framework and decided to investigate them, like how it always injects a token into forms and how it regenerates session IDs upon login. A lot of distilled wisdom goes into a mature project like a major framework, so it's a great source of learning. Once you have that, you can better evaluate other frameworks and libraries and know what to watch out for when going without a framework.
Exactly, its has great benefits for organization, security related, though it's very cumbersome to deal with it in the beginning of new projects. Maybe I'll write a blog post on how we deal with an initial production deployment, that could be Hollywood movie right there :)
Agreed, that's one solution to simply not use it. The main idea is to embrace new symfony4 features, but if it becomes a blocker will just skip it for now. aurimasniekis/flex-server looks interesting, we should contribute to it after all.
Are you sure they didn't watch the video, were you there when they commented? Cause I watched the video and still think it's a load of BS. The dude claims to be a Privacy advocate but calls HTTPS dangerous and makes false claims to prove his point. Saying fake certs are easy to make is a pretty bold and unsubstantiated statement.
(From my experience in a small team that communicates well) Formal UML diagrams that get archived for later, no, not really. We did this for a short time, but we rarely read the diagrams and updated them less. We do an informal design that usually consists of conversations and whiteboarding. We get a good direction and architecture to try. If some of our assumptions are wrong or we find another design to fit better, we adapt and change direction then. This works really well for our small, experienced team. However, when using off-shore staff augmentation, this method worked really poorly. Design is necessary. I would suggest that the formality of the design seems to depend on the team.
You can try [Private Packagist](https://packagist.com/) or if you don't want to go that route, search github for toran proxy docker containers, they'll have links you can download toran proxy too. Either of those and Satis would need public access to Github still though but maybe they can setup an environment where *only* that server has public access and your app can get everything from the local instance? They use Nexus here where I am but Nexus doesn't support Composer, yet.
https://community.letsencrypt.org/t/acme-tls-sni-01-validation-disabled-due-to-vulnerability/49965 &gt;ACME TLS-SNI-01 validation which could allow people to get certificates they should not be able to get
How do you deal with open source libraries at the company? Also keeping up with security updates as well? Seems like cumbersome situation.
SEO isn't framework specific :|
He says that HTTPS is not enough secure and becouse of this, that and those reasons and its security should be improved. Especially because of NSA involvment in some standards. He proposes to rewrite the security protocols from sratch without NSA involvment. That is what I got.
Heh yeah its a little more complex than that. The whole thing is in a little framework I made that will probably just confuse you even more. What you should really do is download the gsx_db file and play with loading it with include('gsx_db.php') Grab the newest version here: https://pastebin.com/pmKPbcEf You'll need to make a google spreadsheet, and ensure its publicly-viewable (File -&gt; Publish to the Web) And also at the top right corner of google sheet, SHARE it, click 'Advanced' and change "Who has access" to set it so anyone who has the link can edit Copy the URL of the spreadsheet and save that to a variable $url_of_spreadsheet = "https://docs.google.com... whatever" $my_spreadsheet = new Gsx_db($url_of_spreadsheet); then load a table $table = $my_spreadsheet-&gt;get_table('Sheet1'); And then see whats inside the $table variable with var_dump($table); That should get you working!
&gt; I understand what you say. My question is why? Because decoupled code is highly important in staying agile and being able to maintain and grow systems. The more you couple your code to the database, the harder that is to do. &gt; How is that better? Because it decouples the database-engine specific concerns from your application. &gt; Now I have code that doesn't even live in my git repo Then you're doing it wrong. You should have a set of database migrations that live in version control. Those database migrations should include the management of the stored proc. &gt; and it's not obvious it even exists for other developers That's like saying that it's not obvious that a database table exists. It's no more or less obvious that something exists in the database regardless of whether it's a table, view or stored proc. &gt; You are using the word objectively but it really seems like you mean subjectively. I'm confident enough about this that I think it should be considered objectively. I've managed enough large-scale systems at this point in both PHP and other languages that I think it's exceptionally important to aggressively avoid coupling. &gt; So again I'm really curious what makes it bad code to use database-specific features on the PHP-side of things. I've pretty clearly answered that at this point: coupling is probably the worst possible tech debt to accrue in your code. Coupling your code tightly to your database is a huge tech debt loan. &gt; As an example, lets say I'm using Postgres json datatype and my ORM layer abstracts away from how it's actually being used. My app now supports MySql &gt;=5.7, Postgres and MSSQL 2016. Is your answer really not to use the json datatype (because stored procedures don't help here). I would argue that you need to make a decision of whether your data is better suited to a relational database or a document store and choose the appropriate engine. I think it was a terrible idea for Postgres to shove a document store into their RDBMS, but it's an equally terrible idea for a developer to choose to couple themselves that closely to Postgres in order to use it. This is a prime example of something that will be a deep regret the minute you encounter a situation where you need to migrate elsewhere. 
And one of his pain points is that SSL certs expire. That is not a security issue it's a convenience one. If anything the alternative (eternal Certs) would be more of a security risk and would more heavily rely on CRL and OSCP. Also, this NSA point is tiresome. Just because the NSA was involved with some standards creation doesn't mean the tech is tainted in totality. As you point you this dude is on the board of openSUSE, a distro that supports SELinux. If the NSA's involvemnt were an actual issue here then why isn't SELinux a liability like he implicates HTTPS?
Yeah I was using [this functionality](/s "Closure::bind").
&gt; Then you're doing it wrong. You should have a set of database migrations that live in version control. Those database migrations should include the management of the stored proc. My bad.. I totally forgot that stored procedures would of course be in the migrations. Thanks for clearing that up.
Yeah I was using [this functionality](/s "Closure::bind").
Thanks for the advice! Always up for a challenge... that's why I wanted to start learning this stuff anyway. I will report back when I get it working!
And soon, if you use Chrome, Problem #4: You used the wrong Certificate Authority.
&gt; I would argue that you need to make a decision of whether your data is better suited to a relational database or a document store and choose the appropriate engine. I think it was a terrible idea for Postgres to shove a document store into their RDBMS, but it's an equally terrible idea for a developer to choose to couple themselves that closely to Postgres in order to use it. This is a prime example of something that will be a deep regret the minute you encounter a situation where you need to migrate elsewhere. Serious question, though. When the current usage of json supports MySQL, MariaDB, Postgres, Oracle and MSSQL. Where would I possible want to migrate to from that? I really don't see how this could ever be an issue. This might be a special case because the feature in question is quickly becoming a standard in many relation databases. So I ask the question differently: How often have you ever had to switch the database system on a project. I've never had to do this in the past 18 years (apart from switching stuff from sqlite to a real engine). Granted I never worked on large-scale projects. I have worked on some "medium-sized" enterprise projects over the years, though. We modernized legacy codebases (i.e. moving from mysqli to PDO, moving to OOP and ensuring the whole application logic is tested, ...).
&gt;Build a layer around ORM Any advice here? I typically will go to some sort of repository.. never feels like I'm doing it *quite* right, but it's testable and is a layer between my application and the framework.
&gt; So I ask the question differently: How often have you ever had to switch the database system on a project. A good handful of times. Sometimes because of arising scale needs that one engine suits better than another and other times from people migrating away from Oracle or MSSQL to something open like MySQL or Postgres. And I've seen it happen on both sides of the coin - where the codebase is tightly coupled and where the codebase is not tightly coupled. And let me tell you, the cost of decoupling upfront versus hunting down database-specific stuff in years old code is overwhelmingly in favor of decoupling upfront. 
This is awesome! I sent it to my coworkers, I had to help them finish... nobody here knows much about PHP 7 yet :-/ Now to code golf it... smallest solutions possible, before I read any replies here. - Level 1: `!0` - Level 2: `function(){return'true';}` - Level 3: `new class{function __tostring(){static$x=1;return $x--;}}` (passes, with notices). - Level 4: `0` - Level 5: `asdf` (passes with notice) - Level 6: `$f=function()use(&amp;$f){return$f;}` - Level 7: `(object)[!0]` - Level 8: `new class extends Bar{}` - Level 9: `x` (passes with warning) [1] - Level 10: `function(&amp;$x){$x=new class{function a(){return!0;}};}` - Level 11: `[]` (passes with notice) [1] This was a challenge. `@('x'+1)` is `1`, `$x='x';@(++$x);` is... `y`. `@(++'x')` is a parse error. EDIT: for level 2: looks like 'str_rot13' is the smallest answer. I didn't analyze the meaning of 'gehr'... for level 5: an eggplant emoji (🍆) is visibly shorter (same number of code points though). 
Nope, although I have experience with Ractive.js, which is kind of similar. Honestly, I'm not sure why they offered me so much. I was very transparent that I was making about 85k and would leave for anything higher than that. 
&gt; I've noticed Laravel is rarely specified on it's own in most job listings, most employers are just looking for any general framework experience. Right, because it's a framework. If you're a good coder, you'll do fine with any framework. Even knowing PHP isn't really required; being experienced with Laravel in specific *certainly* isn't. Conversely if you're bad enough that you need experience with the particular framework we use to be productive, then I have no interest in working with you. &gt; Laravel is virtually unused in the Bay Area How would you know? &gt; I've literally never heard of anyone reputable there using Laravel for anything. Absence of evidence is not evidence of absence. &gt; Is Laravel just best for hobbyists and small side projects? That might be true, but it has nothing to do with your question.
So, $view-&gt;itemsSet is obviously a collection. Youre doing a loop on that already, resulting in $items filling with one item of that collection. Its not clear, but are you saying that some property of $items (which really should be named $item) holds a collection of other data? In that case, you simply loop on that property.
This should probably be in /r/phphelp, but... Just output an &lt;input type="hidden"&gt; inside the per-iteration form.
I've been complaining about this since Flex was first announced. I've yet to hear a good reason why Flex recipes couldn't be hosted in bundle's repository.
This works fine with the PHP built-in web server. It's probably the web server you are using that has it's own buffer. 
What server are you using?
Is buffering disabled in php’s config?
Random thoughts: * Are you sure there isn't any kind of caching proxy in the way, one which may me waiting for Apache to "finish" before sending stuff onwards? * Are you sure Apache doesn't have some module installed that does something similar? * If you're using nginx, try adding a response header that tells it to not do any buffering: X-Accel-Buffering: no` 
what happens when you curl the url instead of using a browser?
Some browsers will not start rendering until they have hit a certain amount of data. At one point Chrome had a 4kb limit, not sure if that has changed. Anyways, probably not on the PHP end. What are you trying to accomplish?
Paste the `curl -v url.com` output 
Be sure to escape the content if there's even a CHANCE it could contain something that will mess up your HTML
&gt; time curl the terminal takes the command but does nothing. it ouputs real 1m6.393s user 0m0.025s sys 0m0.018s when i Ctrl+c 
the terminal outputs * Trying 10.157.0.1... curl: (7) Failed to connect to 10.157.0.1 port 80: Connection timed out
Is response sent compressed with gzip? Check HTTP headers in response. You can try setting Content-type to text/plain or other. You might have to turn off gzip compression for your script or folder in httpd.conf file. Are you calling your PHP via AJAX? That won’t send progressively. I have had luck with a simple flush() to make PHP send output to browser as it runs.
Correct, but the article is exactly for people who want to add seo tags for their Symfony apps.
We are using Satis instead of Private Packagist and they both won't work because Flex uses it's own protocol and stores only recipes on github. Satis is available on a separated server in intranet that has monitored and filtered proxy access to packagist and github and a dedicated few are administrating it. We use Nexus heavily for npm and java packages, but as you said it doesn't support php...
We are using Satis which is available on a separated server in intranet that has monitored and filtered proxy access to packagist and github and our internal VCS for proprietary packages. A dedicated team is administrating it and white listing new packages if they comply with security policy.
A few things to note: * echo can output multiple "arguments", therefore instead of concatenating everything into a single string, you can replace " . " parts with "," * &lt;tr&gt; doesn't have a close tag, but you have 2 closing &lt;/td&gt; tags at the end * &lt;img&gt; has two " character after height=50, you may want to remove both, otherwise syntax error * What is the purpose of the mailto link? * Why is the mailto link wrapping the form? * Why is the mailto link start in one table cell and ends in another? It is a syntax error
I was out - basically what /u/reddeth said
&gt; you still shouldn't commit project secrets to even private repos, Also, because then you can't share those private repos with other developers without also sharing all your credentials with them. This maybe doesn't apply in all cases but for instance in a medium size company you can't then get a junior/new/outside dev working on the code without also giving them full access.
Very very nice! Is there any kind of built in system for alerting if a job went wrong?
Flex server https://github.com/aurimasniekis/flex-server
Good to know, thanks !
The most efficient answer (that I've discovered) to 10. [Spoilers](https://reddit.com/s "function(&amp;$x){$x=new$x(1);}").
I think its more related to twig than symfony
Oh nice that is cool!
Yeah "develop" is pretty broad, and isn't even limited to IT. Program is pretty specific of course, but even then sometimes the word is used outside coding, i.e. "programming a VCR".
There are frameworks that are famous for getting stars and you hear about, and there are frameworks that gets the job done and nothing else, Yii2 is a good framework, just not enough hipsters around the scene. I still use Yii2 along with Symfony
I would say, don’t use flex then. From the symfony docs it says it’s a composer plugin but if it’s doing some weird mix of integrating with composer then stepping around composer, it might not be worth it.
&gt; would have been better as an article Would have been better piped to `/dev/null`.
I think this isn't even related to twig. Seriously, who struggles to render a &lt;title&gt; tag ?
This is awesome, I hadn't even heard of Symfony Dom Crawler before, that's the real takeaway for me, but ReactPHP looks good to.
Is a docker image that includes a Symfony 4 project with a job scheduler&amp;manager service? 
I used corkscrew back in the days. It could be what you're looking for. 
This is an excellent point, and leads to another one as well: If the credentials aren't in your repo by default, it makes it easier to _not_ screw up and use the wrong credentials for the wrong environment. Meaning if you're developing a system to send texts (like, I dunno, an alert system for an entire state) and you keep the live production keys in your repo, a developer could download it and, in the process of testing, accidentally send a very alarming text to thousand of people. However, if the keys aren't in there, you can keep your production key safe from even other developers, and ensure that your developers are always using development or testing keys!
QueryPath
The service code: https://github.com/php-comrade/comrade-dev/tree/master/apps/jm The demo workers: https://github.com/php-comrade/comrade-dev/blob/master/apps/demo/queue_demo.php The php client: https://github.com/php-comrade/comrade-dev/tree/master/pkg
Oh yeah, totally! Don't be this company: https://www.reddit.com/r/cscareerquestions/comments/6ez8ag/accidentally_destroyed_production_database_on/. Note all the replies saying this was the companies fault.
New to ReactPHP so pardon me if this is a dumb question... but what makes this fast(er than non-react)? Does the loop spawn individual PHP processes that run in parallel? Is there a benchmark of a traditional loop vs an event loop in PHP? My understanding is PHP runs a single process with each request (or command line) and to truly have a faster async experience you would use a job server. 1. Main script gathers all urls to crawl 2. Main script creates individual parse jobs ("events") 3. each parse job (event) is picked up by gearman or something and spawns its own PHP process that requests and parses 4. jobs(event) can be run in parallel
https://stackoverflow.com/questions/5309926/how-to-get-the-data-id-attribute
So while the code given is ok, just make sure you change this line: $this-&gt;verificationCode = sprintf('%0'.self::CODE_LENGTH.'d', mt_rand(1, str_repeat(9, self::CODE_LENGTH))); To this: $this-&gt;verificationCode = sprintf('%0'.self::CODE_LENGTH.'d', random_int(1, str_repeat(9, self::CODE_LENGTH))); (Basically change mt_rand to random_int). Otherwise someone can request a few tokens, work out what the seed is, then register any number they want, as they'll be able to predict the confirmation code. If you're not on PHP7 (why not?), then you can use [random_compat](https://github.com/paragonie/random_compat) to give you the random_int/random_bytes functions in PHP 5.6 and earlier. Though you should upgrade.
Ideally yes, but there just simply isn't time to do all that and all of the information be meaningful at the end. You can learn about PHP sessions etc, but until you need to persist some data between requests it will mean practically nothing to you. Really, you learn by building. And as requirements evolve for your application or project, so does your learning and skills. Then you get the point where your application has enough things in it, that are common to web applications that you should probably use a framework. Great! Now that you're making use of a framework, it would make sense for you to learn how the features work (under the hood). Then you read dev articles, reddit, StackOverflow and learn about design patterns and other programming theory, and you then go back and re-do some parts of your application based on some new best-practise that you've learned.
i dont think react is threaded its just nonblocking
you are going to have to know one or more frontend (js) frameworks these days as much of the app logic is being pushed into the frontend code for better or worse
&gt; corkscrew Well the idea is not to bend corporate rules but to find legitimate and security compliant solution. Even if I wanted to use corkscrew I could not install it as developers do not have admin privileges and I'd need a very good explanation for security department.
Why is PHP score so low on Tech Empower benchmarks? https://www.techempower.com/benchmarks/#section=data-r15&amp;hw=ph&amp;test=json&amp;l=hr9urj&amp;c=3 Could it be optimized somehow?
That's another story though. Centralized recipe repository still undergoes some sort of security checking and QA (I hope so). Having the freedom to ship recipes within bundles might be tricky concerning Symfony QA in general. Anyway, providing a way to use your own recipes within private Flex server should be allowed and by the docs there is or will be an option to do that. However, my need is to host such server on premises and that seems to be unavailable at the moment as Flex server is not open sourced.
https://github.com/bkdotcom/phpdebugconsole Think javascript's console api, but for PHP supports these methods: * log * info * warn * error * assert * count * group * groupCollapsed * groupEnd * table * time * timeEnd * trace Can output to the page (as html or \&lt;script&gt; tag), ChromeLogger, FirePHP, file, plain-text, websockets (WAMP) displays php errors. password protected. debugging a string will reveal "special[\u00a0]chars" Can be used as an instance, or as a singleton extensible I think it's the bees knees (but I'm the author)
If you're still keen to learn about Cake in 2018, you should re-evaluate your life decisions.
ReactPHP does async streams (using either stream_select or lib_event) and can run code while waiting for sockets to be active. So the longer the request takes to respond, the more efficient running multiple of them in parallel will be.
&gt; For a small CLI script, there is nothing wrong with mixing PHP and HTML. Yes there is. &gt; That's one of the best things about PHP. No it isn't.
Trust me you don't want that project anywhere. It's riddled with security holes, hasn't been updated in years and doesn't run on any supported PHP version. 
Oh okay, didn't know that. I just search for a program to do an Elo-Ranking database for like three years now and I can't find anything that works for me. It's pretty sad.
Yes, but I've literally no idea how to run this scripts. I know I talked to a guy a few years ago, who did such a program but you had to run it through a webserver or something and I wasn't able to.
it might not be a brand name like symfony in the world of enterprise php, but it is used all over the place
Well that's Java, so you probably won't find much help here.
&gt; Maybe using DateTime to store and compare the different dates? Also, either saving the hard coded dates into a variable or constant so it doesn't appear so "magic". I would probably rearrange it so that it uses the currentReportStyle as default and don't even bother with the else and elseif, just do two if's one after the other. we are using Carbon and storing the cutoffs in a variable, i just excised all that for my example to make it simple to understand... I already suggested eliminating the else block as you suggested because the else sets off Mess Detector I get what you mean about the DB, i am not a huge fan of making a DB query for such simple logic to me that make it more complex not less.
Those aren't arguments against, those are declarative statements that add no value to the conversation. Generating an html file via the cli with php is a perfectly acceptable use case. There, did I do it right?
isn't symfony flex just getting a script to config a bundle?
Can you elaborate what's wrong about CakePHP 3? Every time I see comment like yours, it's based from experience of old versions only.
took 5 seconds to google this... https://github.com/Chovanec/elo-rating
&gt; Will it make you a better developer to learn how to write effective code for everything frameworks provide before learning them? Well, learning how to write code to do things makes you a better developer, so sure, learning that stuff will make you a better developer...in exactly the same way that learning how to write effective code for everything frameworks *don't* provide will make you a better developer. :) &gt; i was curious if it would make me more of an asset looking for work in the long run if i can create authorization forms, creating blogs and everything that frameworks make easier. Marginally, yes. But the reality is that most of the core framework tasks are quite hard to get right, require a lot of code, and are fairly boring. Learning the principles behind say, how to do form handling without opening yourself to injection attacks is valuable, yes, but actually writing your own form handling library is pretty pointless. It's like: 1. Knowing how to use a framework to avoid CSRF attacks: 80% of the benefit, 10% of the work 2. Knowing in principle what CSRF attacks are and how to use CSRF tokens to mitigate them: 95% of the benefit, 20% of the work 3. Writing your own form handling library that uses CSRF tokens: 100% of the benefit, 100% of the work I'd stop at step 2 personally. :) TL;DR: Yes, but there's vastly more productive ways of becoming a better developer.
I've looked at Cake 3. It's still a tightly coupled framework that leads to the development of tightly coupled monoliths that are impossible to maintain.
Thoughts like that are why PHP has a bad reputation. Barfing HTML in a CLI script is objectively bad code. It's tightly coupling concerns that don't belong near one another.
I see lot of different components here https://github.com/cakephp
Not the point. Dependency injection is still not a first class citizen in cake. It doesn't matter if you have things broken into components if your paradigm for working with those components is dog poop. 
It's not really a problem, but it is a bit 'eh' to rely on dates for versions. If you want to change this, you can add a `report_version` column and then your report service depends on a report version instead of the date. Since you've already got them segmented by date, you could easily update them and give them the correct version number. Every time you update the report style for newer records, change the default value of the version column. To be fair though, all this accomplishes is moving the gate from `date` to `version`, however it also frees you up because now you can use different types of reports in parallel if you choose to. 
*HISSSSSSSSSS* BE GONE JAVA SSSSSSSSSsssssssssssssss
How quickly did the curl spit out the first number?
I understand that now they are generating a regex based on our urls, is this correct?
The most important thing is that this branching stays in one place - some low level (abstract) factory. I'm not sure which is the case because at first you've said it does, but later you've mentioned something like: &gt; i would just be taking the same block of code and moving it around and that changes situation 180*, because that is something you have to avoid. It would tie together distant parts of code making it fragile and rigid. If that's what happening then the code you've provided won't show how to fix the problem (how the service is used? what these `reportStyle()` methods return? ...). If not - don't worry - refactoring it into some iterable search will be piece of cake when the need comes.
Full blown diagrams not but on the other hand spend a year writing down semi diagrams for a new system. The issue with a lot of people, not just PHP is they got a good idea. They start working on it and then run into issues. And scramble to save the idea at the cost of the code. You see it in every language. PHP has a bad rep because it attracted more cowboys as it is a easier language to learn. Go look at Go and you will see the same issue also more and more. Part of the reputation is deserved, part is also other people simply being jealous. Why do you people not use my language type of attitude.
with the delay just like the browser
&gt; very easy to get wrong. That applies to every system. Its not that hard to program in C. But its just as easy to blow up your program or introduce memory leaks/allocation issues. I find C/C++ or all the harder languages, way more dangerous because PHP shields its users still a bit from the advanced/nasty stuff. PHP is like giving kid a pencil, easy to get going, annoying when they draw on the table and bad if they stick it in their eye. C/C++/... is like giving a kid a drill. Sure, it takes longer for the kid to figure out how it works but they moment they figure out how to put the battery in ... it can result in masterpieces but just as well in major bodily harm to them and the people around. :) The person quoted above, change PHPStorm by CLion in his text and you will find the exact same persons like that in the C community. Do not let the rhetoric fool people, bad opinionated lazy programmers are everywhere. Not just in the "easy" languages.
Seem somebody forgot to read their conditions page. http://www.imdb.com/conditions?ref_=ft_cou &gt; Robots and **Screen Scraping**: You may **not** use data mining, robots, screen **scraping**, or similar data gathering and extraction tools on this site, except with our express written consent as noted below.
This looks interesting. I look forward to seeing it on Windows/Linux :)
hmm
&gt; i am not a huge fan of making a DB query for such simple logic to me that make it more complex not less. I hear you there. I think that would depend on what else is going on in the app. I mean, if you’re already doing a bunch of other calls to the database, one little simple select shouldn’t be that huge of a deal.
*uch* Wanted to give Swoole and PHP-PM ( what uses ReactPHP ) a benchmark tryout but boy those install instruction did not work out. Swoole ended up being much easier to install.
Java... lol
I’d argue the inability to understand tradeoffs along with arbitrarily applied dogmatism is why PHP engineers have a bad reputation. PHP is a scripting language that was originally designed to build html templates. There are plenty of use cases where that design consideration is still valid. 
This is fantastic, but there are other frameworks that don't use pattern matching for route resolution... so a better title might be "fastest pattern matching based route resolution".
Sounds similar to how [RapidRoute](https://github.com/TimeToogo/RapidRoute) works, except that splits by ‘directory’ segments. It was faster than FastRoute last time I used it. 
I'm pretty sure`fuel/fuel` only gets updated when a release happens. `fuel/core` has commits as recent as a couple of weeks ago.
the function in the service just returns the report results which are in a standard format (its just the formula used to make the calculations that differs). That is basically what i told my co-worker, its abstracted behind the service method so long as the date gate isnt used anywhere else, then its fine. When i said "i'd just be moving the code around" i mean that i toyed with the idea of moving the various report generators into their own classes and putting the date gate code into a factory inside the DIC, and then instead of injecting the service just inject the approriate report generator. However all of that seemed like a ton of work to accomplish basically the same result. All it seems like it would do is move the date gate code out of the service and into the DIC. Since the results are a standard format, i could not see any logical reason as to why that would have been better. 
&gt;If you want to change this, you can add a report_version column and then your report service depends on a report version instead of the date. Since you've already got them segmented by date, you could easily update them and give them the correct version number. Wouldnt that just make things more complex? because The difference between the three functions is the math used to generate the numbers. To maintain consistency when someone requests a historical report, we need to use the same formulas that would have been used to generate the report on that date. That is why we map the dates to the generator methods. So even if I changed it to use version numbers, I would still have to map dates to version numbers then version numbers to methods. That seems to me more complex,not less. I am not arguing but someone else made the same suggestion and i am just trying to understand why this keeps being suggested? Am I missing something?
For 1 that's returning a 500 error. You should make sure PHP and Apache are configured to log to a file and then see whats in them. And also it looks like the server is trying the use HTTP/2, I'm not sure if this would work with HTTP/2.
 Thank you FIFA55 เว็บแทงบอลออนไลน์ แทงหวยออนไลน์ คุณภาพยอดนิยมอันดับหนึ่งไม่ผ่านเอเย่น มีเกมส์เดิมพันมากมายไม่ว่าจะเป็นแทงบอลออนไลน์" แทงมวย คาสิโนออนไลน์ แทงหวยออนไลน์ ลอตเตอร์รี่ เป็นต้น เรามีระบบบริการที่รวดเร็ว ทันสมัย ปลอดภัยและดีที่สุด เราได้รวบรวมความสนุกไว้ที่นี่ที่เดียวโดยสำนักงานใหญ่ตั้งอยู่ที่ ปอยเปต ประเทศกัมพูชา เดิมพันง่ายทั้งบนคอมพิวเตอร์ โทรศัพท์มือถือ และแท็บเล็ต สมัครสมาชิกได้ง่ายที่ call center มีพนักงานคอยให้คำปรึกษาตลอด 24 ชั่วโมง [url=http://www.s4p4.com/fifa55/][color=#ffffff]fifa55[/color][/url] [url=http://www.s4p4.com/fifa55/][color=#ffffff]fifa55[/color][/url] [url=http://www.s4p4.com/fifa55/][color=#ffffff]fifa55[/color][/url] 
Are you being intentionally dense or did you not read the actual initial post? He's writing a batch script that's barfing HTML. If you find that acceptable, I don't even know where to begin with you.
Can't. I accepted a 2 month contract extension on my 1 month contract at the same rate. It's the only job I could get, I tried finding a job for like 5 months.
omg omg goto in example 😳
Since when is HTML an unacceptable output format for a script written in PHP? 
You can ad hominem all you want, your points are dogmatic, condescending and naive. 
like this? https://github.com/cztomczak/phpdesktop
One of the CakePHP core developers here. Just for reference, do you mind giving me an example or two where dependency injection in the CakePHP _framework_ would be beneficial to downstream developers? That would probably help us figure out if this is just a difference in opinion or something we should solve (in the specific or general case). Generally speak, I write code with dependency injection in mind, but don't find myself - often - overriding classes in the core.
Props for removing the useless `elseif` and `else`. 
Ditto.
&gt; Symfony 4.1 URL matching is 77 times faster than in previous Symfony versions. This also means that Symfony 4.1 router is now the fastest PHP router, beating FastRoute and all the other routing libraries. So by comparing the new Symfony router to the old Symfony router, we can conclude it's faster than all other routers? What? Where is the benchmark comparison to FastRoute? It also combines patterns just like this "new" router does.
Can't be butthurt as Laravel uses's Symfony route matching. It'll eventually pick-up the 4.1 router.
str_rot13 is the best solution for this level. It shows a notice without quotations but who cares :D
I realise that. It's the mention of anything other than laravel being good he can't deal with. Check this out https://twitter.com/fabpot/status/940595074580209665
Well if you would shut your mouth first and also click to the link in first post! or on link in the actual blog post you would see the benchmark comparison.
Our community doesn't need cancerous people like you. Please go away or stop talking and make our community a better place to be at. Thank you
&gt; Also more faster solution are much harder to install and maintain How?
So if I **only go off the article** and hunt for **benchmarks in the PR links**... 
The benchmarks were buried and I had the same question. Maybe take the sass down to a 9?
I worked with the first version of this framework, and I can say that you should avoid it as much as you can. It's full of inconsistencies, it has a significant lack of documentation, and the API documentation they provide is confusing for developers with no experience. I also talked via IRC with the development team, and they said they're only providing some security updates, focusing on the development of the second version, which is taking forever to be released. I'd say it's a dying project.
Posting non helpful, childish comments is how Taylor got that reputation. Seems like you want the same one.
Does it come with it's own composer plugin?
Thank you very much :-) I was also thinking about it, I mean to put a modification in package.json but I was affraid to ruin some copyright or something like that... But once more, thank you, now I really think that I'll do that... I made this because I noticed that most of PHPMailer configures are made with thousands of lines, mine is different mostly because of that, external html template make you feel free to modify there, not on page... :-D
A repository is a good start, and can definitely be a good place to stop if you don't need to go any deeper. You can always take another step and extract out *how* you talk to the database and simply have your repositories talk to that (For example, create a simple method called "getById($id)" in a "mapper" and implement that). But at this point you're basically abstracting out your ORM, which is already an abstraction. It can be fun, and if you're working on a microservice that doesn't need a particularly powerful set of commands it might even work out well, but for most use-cases you can just stop at the repository level. [Here](https://github.com/Garethp/hexagonal-ddd) is just an example repo where I use DDD and Hexagonal Architecture to show people what I mean, and I do that kind of layering where my repositories look at a mapper and an adaptor layer.
CalculRunner extends Runner, we all know you shouod use composition over inheritance
Perhaps something like this pseudocode. &lt;?php use Carbon/Carbon; class ReportService { private static $report_styles = [ ModernReport::class =&gt; [ 'start' =&gt; Carbon::now(), 'end' =&gt; Carbon::createFromDate(2017, 5, 1), ], OldReport::class =&gt; [ 'start' =&gt; Carbon::createFromDate(2016, 8, 1), 'end' =&gt; Carbon::createFromDate(2017, 4, 30) ], OlderReport::class =&gt; [ 'start' =&gt; Carbon::createFromDate(2015, 1, 1), 'end' =&gt; Carbon::createFromDate(2016, 7, 3) ] ]; public function getReport(Carbon $date) : Report { foreach ($this-&gt;report_styles as $report =&gt; $date_range) { if ($date-&gt;between($date_range['start'], $date_range['end'])) { return new $report($date); } } return new ModernReport($date); } } interface Report {} class ModernReport implements Report {} class OldReport implements Report {} class OlderReport implements Report {} Some notes on my though process: * I would move $report_styles to a config file, that way you don't have to change the service class whenever you add a new report style. It would then be relatively simple to move to getting this info from a database if you wanted to later. * The reports I've moved out of class functions and into seperate classes. That way when editing or adding a report you're only editing that specific report. When this isn't possible for some reason it could be changed to call the function instead but I don't find this desirable. * The Dates are now ranges that default to the modern style. * I feel like the $report_styles array structure may not be the best way to do it, there is room for improvement there perhaps.
Reading this, I'm not sure if April Fool's came early..
Cooperative multitasking, see https://github.com/fiberphp/fiber-ext/issues/21.
Nice to see you here :) I noticed you now serve https, which is cool.
Very well put, if I had gold i'd give it to you! 
Yeah, I guess it did for some reason. Fun fact, it's been WIP since Dec 2010. I'm kinda baffled people invested this much time into it....whatever it is exactly.
Someone sounds salty about the amount of downvotes they've got in this thread. Ding ding, top answer. 
I haven't noticed, but thanks for the update. Send regular updates twice a day on PM, I'm very interested in the development of this thread and its long-term impact on my life and the world in general.
Neither the RFC nor the README mentions what "cooperative multitasking" means. The example is not really about multitasking and doesn't provide an idea how it would work with I/O. Does it allow async I/O? Are fibers run in parallel somehow? Does it need pthreads? Honestly it opens more questions than it answers :-)
Sure. Seems you find joy in trying to antagonise people with useless comments. Why don't you go and do something constructive.
Hahaha! Laughed with it.
I can multitask, mate!
&gt; It's the mention of anything other than laravel being good he can't deal with That's not what he said. What he did say was that framework performance should be compared on an even playing field - that's often hard to do because frameworks offer different kinds of features turned on out the box. You can read more about this here in Taylor's article "make correct comparisons": https://medium.com/@taylorotwell/make-correct-comparisons-6ccc2216242d 
Have an upvote. I know you care. :)
So by saying "treated anonymously", you're actually saying we're supplying PII, but we have to trust you not to do anything with it? I'm not going to trust a random public form of which I can't verify the source. I hope you'll understand.
ha! You async fanbois need to work on your PR if you've ever any chance of selling it to the wider community! I've read through the above and the links from it, and I am utterly none the wiser. 
I really don't think your service should accept a database pool. Just one or more database connections. They can be stored in or even be created by the pool (of the latter I'm also not a fan), but your service should give a rats ass about where those connections came from and you should solve this in your DI. The real problem you came across is the DI container builder your project is using is either only capable of using autowiring or you are not aware of how to configure it to work differently. Most containers support having more than one service using the same interface or class. Containers or service locators that do not support this are flawed IMHO. Setting up a connection pool is not a bad idea, though, but should be used to share configuration for your connections and make it easier to reference the same connection by a shared identifier or name. In a more simple application you can even make it so it has multiple connections to the same database, using different users, so you can split up read and write access. The solution you wrote in your article is one step in the right direction compared to the more problematic solutions described up front, but still pollutes your eventual service class.
We know what's popular. That wasn't the question.
laravel is rubbish, i hate it.
&gt; setter method - add a method to the service class that allows changing object's configuration on the fly An alternative to this is using a `with` method that clones the object and returns it with the changed parameter (think PSR-7). It solves the author's primary complaint against the setter without requiring you to write a factory. In the database connection example from the article I agree the factory/connection pool/manager object makes the most sense (although I still wouldn't inject that), but the `with` methods are a nice solution if the object has sensible defaults that you might need to tweak in some cases.
Laravel only uses Symfony Routing for compiling the regular expression. It does not use any other part of the library. However, we will certainly look into tweaking things so we can use this improvement.
Hype is strong. I was waiting for something like this for ages. Can't wait to use it!
Making dumb shit like this is a great way to learn
A 30 second glance at their codebase doesn't bode well. https://github.com/fuel/core/blob/abfdd2a897595dc8d8b4d5bc17a34f3f74be84ab/classes/crypt.php#L52
"Method"? That's way too low on the granularity scale. Also self-reporting here would yield absolutely distorted results, so honestly I'm not even sure what you're trying to do.
Over 80 commits. That is some dedication to a joke.
The above link isn't meant to provide information to newcomers. http://sergeyzhuk.me/2018/01/19/amp-event-loop/ and https://amphp.org/ are better resources for that.
From what you are saying it sounds like the report knows what dates it is for, so it seems like that information should go on the report. If you need to validate that the dates don't conflict that sounds like that would be the responsibility of the thing that collects them. I would probably let the report return a date period for the dates it covers, then make a 'registry' type object that the reports are registered with. Maybe something like this? interface ReportRegistry { function register(DatePeriod $datePeriod, Report $report): void; function get(DatePeriod $datePeriod): Report; } interface Report { function dateRange(): DatePeriod; function generate(): array; } The nice thing about this setup is you can easily register new reports without having to edit any of the existing code (open/closed). You still need to register all of the reports somewhere so that would probably use the DI container but your business logic stays in **your** code, not in the framework.
Dependency Injection should be a first class citizen in any and every framework. You can't know when and where someone might need to override any of your code. You shouldn't even try to guess that because you will always be wrong. But DI isn't about just overriding the core. That thought kind of betrays a deep misunderstanding of the value of DI. Further, the fact that you don't have a global dependency injection model that you yourselves use throughout your components is a problem. It means you're going to be slow to be able to change and when you do change it's going to have a much higher chance of introducing breaking changes. At the end of the day, if I see the underlying framework isn't as internally flexible as the code I want to develop, then I know that framework isn't one I want to use.
Putting the oldest first simplifies the logic. class ReportService { public function getReport(DateTimeInterface $date) { $oldestReportDate = new Datetime('2016-08-01'); $oldReportDate = new DateTime('2017-05-01'); if ($date &lt; $oldestReportDate) { return $this-&gt;oldestReportStyle($date); } if ($date &lt; $oldReportDate) { return $this-&gt;oldReportStyle($date); } return $this-&gt;currentReportStyle($date); } }
That’s fine with me. You kept returning the current as the default at the bottom. 😉
I prefer making additions in the client side to save server cpu usage. plus there are great jquery plugins for adding numbers together, namely the "jQuery basic arithmetic plugin" 
Nice job! Really looking forward for this feature in the PHP core.
yeah big commitment right there ps: sry 
Sarcasm?
So consider if your router took 300ms to match a request. That's 300ms *before* any of your code runs. That's 300ms some poor sod on a mobile phone has to wait before they even have a chance of any response from the server. Most non-regex routes should match in under 5ms (or your router is doing something wrong/you have too many routes to look through). That said, a performance increase for free is always worth taking.
Fair enough, point taken. Read all the stuff before, but still it does not click. I guess because I can see no use for it, as all my PHP code is for web servers, and as far as I can tell there is no way to really benefit from async PHP in a normal request-response cycle?
its*
Not at all
I was laughing at the last line in the example, with the comment `// 2`! So simple!
&gt; So consider if your router took 300ms to match a request. I think the point was that most routers for common routing scenarios (in other words "99% of web apps") will never be the bottleneck in your application. It's very nice that symfony's routing is now a lot faster, but for most applications this probably won't have a huge impact since their bottleneck is somewhere else.
... we were all thinking it.
A good example is logging. In Cake, I get there's a number of ways to declare different loggers and declare scopes, etc. But what if I want Database to use a different Logger? Your implementation of the QueryLogger in database explicitly depends on Cake\Log\Log. Maybe I want the QueryLogger to go somewhere else and only the QueryLogger to go somewhere else. I should be able to inject my own Logger into QueryLogger and as long as my injected Logger obeys PSR Log, the QueryLogger should be good to go. Instead, you made QueryLogger tightly coupled to Cake\Log. Now, the best I can do is configure my 'debug' log handler to do what I want with the database. But then the rub is that maybe my application also has a Console component and Cake Console also uses Log::write('debug','some message') so now my choice is to override the database QueryLogger class for no good reason just to replace how it logs. That kind of thing is far too rigid for me to want to use to start any new applications. If there's one thing I've learned from nearly 20 years of application dev, it's that you need to be able to hot swap anything and everything in order for your application to be maintainable over the long haul. If I can't even arbitrarily use different logs from one module to the next, the code is too tightly coupled, and if the underlying framework is wound that tight, I certainly don't want to build on it. 
how does the async i/o work? does it provide new APIs for this or how does it work?
Exactly! This solves all the issues we had with the private recipe offer from SensioLabs. Now we can control our own recipes, override existing aliases and without having to put them on Github! I'm very thankful to the person who reverse engineered it. Don't get me wrong; SensioLabs deserves an unlimited amount of credit for their contributions to the PHP community but not wanting to open up Flex a little more seems a little weird to me.
MVC is **not for small apps. It is for really large applications, where you need to add more constraints to impose order (that's where the Separation of Concerns comes in).
ilu
[The shebang is read by the operating system kernel, not the shell](https://stackoverflow.com/questions/3009192/how-does-the-shebang-work). The kernel knows how to run programs written in various formats - e.g. on Linux the standard binary format is ELF. Another of those formats is files that start with #! . 
The Mersenne Twister is awesome, but not for key generation. :-/
Note enough reflection...
The singleton pattern as the described by the gang of four makes the constructor private, and called only within the class which makes sure that only one instance exists. I think that's almost always an anti pattern and I would avoid it. But you can implement the rest of the pattern which will allow consumers to use your code as if it were a singleton if they want to, or if they don't they can create their own instances of it. You don't need to create the default logger during bootstrap - you can create it the first time it's required and store the reference to it in static property for use later in the run, as in the singleton pattern.
I haven't done the survey but it's likely that when they're saying method they're talking about "the method by which it's being done" rather than the method that the code is in. Maybe a language issue?
Thanks! I've been thinking of writing a bot for it. I bet people would love that.
There is. Bootstrapping your framework of choice and then only having to process incoming requests within the event loop shaves off a big chunk of the loading time. This also goes for the bootstrap time needed for every PHP request, loading in INI files, extensions, etc.
And they don't even use math.getAnswer();
No factory?
Once again man, I'm totally cool with your comments :D I understand you and have nothing to add :D
I can see some value in this. It means that applications built with Laravel don't have to depend directly on Ramsey\Uuid . Laravel can switch to a different implementation of uuid in future if Ramsey's package isn't maintained. And particularly for people doing RAD or junior developers it's simpler to remember how to get a UUID if the code is just Str::uuid();
To me webmaster implies another responsibility along with everything you've said - they write or edit the content for the website, in addition to everything you've mentioned. They are sysadmins, programmers, developers, support, and what was called 'cms executive' at my last company. The webmaster is literally the master of the website. It's a role from the early days of the web, when few websites were complex or important enough to justify splitting the responsibilities.
The spiritual successor is Laravel I think. They feel very close in usage (static calls, "drivers", etc.).
It's publicly accessible. Websites don't get to dictate who or how their website can be accessed unless they place it behind a login. * https://www.eff.org/deeplinks/2018/01/ninth-circuit-doubles-down-violating-websites-terms-service-not-crime * https://www.eff.org/deeplinks/2017/12/eff-court-accessing-publicly-available-information-internet-not-crime
Yeah, after starting the survey I think you're right.
If you think Cake is a good framework to start an app from in 2018, yeah, you should probably re-think your life as a software engineer. No apologies. 
You're absolutly right, the impact is minimal for the 90% use case... until you really need to scale, then you'll be happy the framework your app is using is "optimized" in anyway. More performances, at no cost as a developer, is always nice. So that's still a very good news for the Symfony users !
Just set a cron job to commit once every other day and then on the 79th commit, you actually add the meat of the code
Please also make one for “your an idiot” too. That one drives me bonkers.
Hey, you leave my an idiot out of this.
that's so funny, I was confused at first, couldn't believe someone spent that much time to create this and after a while, I was like yea, this whole shit is for making 1+1
Kinda sounds like Drupalvm (using docker), or Lando, or Docksal ...
You magnificent bastard.
Hey, I am one of these one-framework jockeys. More accurately, I conciously refuse working with other PHP frameworks because none of them have mature enough testing facilities and a lot of work is done by throwing shit against the wall and seeing if it sticks. Or at least that's how I feel about the rest of the ecosystem. Not to argue against what you're saying in general. You are absolutely right that good developer must have a wide range of skills. But I've experienced big enterprise apps written in other frameworks and I did not enjoy the sight of it. If anything, not being familiar with Laravel in 2018, knowing nothing about TDD and seeding databases with raw sql scripts etc. is more of a red flag to me. But hey, I am young and stupid so what do I even know?
Always living up your name I see
Wow, it's been five years already?
&lt;?php Perhaps something like this? Laravel's style seems to be placing app meta-data and lists of class names into config files. I'm assuming you either have separate classes for each report or could refactor the report generation methods into them. If that's not the case you could map the dates to the method name instead, and use `$this-&gt;{$reportMethod}($date)` instead. In `config/app.php`: // Reports as minimum date in Ymd format =&gt; report class name. 'reports' =&gt; [ '20170501' =&gt; App\Reports\CurrentReport::class, '20160801' =&gt; App\Reports\OldReport::class, '19700101' =&gt; App\Reports\OldestReport::class, ] And in ReportService.php: class ReportService { private function getReport($date) { // Better if you could just typehint for a DateTimeInterface, // but that may not fit in with the rest of your app. // It looks like you expect 'Y-m-d' format. That's easily // converted to a numeric string we can compare against // without the overhead of creating a throw-away DateTime object // to compare with each date in the config. $numericDate = str_replace('-', '', $date); // Or to get some validation (DateTime::__construct will throw an error if the date is invalid) $numericDate = (new DateTime($date))-&gt;format('Ymd'); $availableReports = config('app.reports'); // Ensure the most recent date is considered first. // This will avoid the potential headache of requiring that developers remember to // place them in the correct order / manually keep the list sorted. krsort($availableReports, SORT_NUMERIC); // I've picked the oldest report as the default here. // If desired you might prefer to keep something like a `default_report_class` in the config. $reportClass = array_first($availableReports, function ($minimumDate) use ($date) { return $date &gt;= $minimumDate; }, last($availableReports)); return (new $reportClass($date))-&gt;generate(); } } You might prefer to keep the date inside the report class itself, and simply keep a list of report classes. Then in `getReport` you would ask the class for the earliest date that it supports, perhaps a simple constant like `$reportClass::MINIMUM_DATE` or a method like `$reportClass-&gt;getMinimumDate()`. From a design perspective it depends on whether you consider that reports should "own" or be aware of the date that they are targeting. 
IME, every PHP app I've worked on that was large enough to use multiple databases threw all these ideas about keeping code abstract and decoupled out the window, or never had them in the first place (legacy software...) It ends up being that you as the developer must be aware of what data is in which connection and write code that is tightly coupled to that. So it ends up like $this-&gt;conn_mssql = GlobalDatabaseProvider::getMssql(); $this-&gt;conn_mysql = GlobalDatabaseProvider::getMysql(); And for testing, it's usually an actual database on a dev server that contains some outdated copy of the production database mixed with a bunch of crap people stuck in for testing purposes. This is how it's often done even in vast enterprise software with hundreds of developers (which is pretty uncommon in the PHP world anyway). Theoretically, from a software engineering standpoint, it's imperfect. But it works. You know the adage "Good, fast, cheap: pick two." ? Companies always pick cheap and fast (note that's fast as in "implemented quickly" not "functions efficiently").
Welcome 
Your right!
Tf is up with that thumbnail tho??
Looks like you have an outstanding pull request from yourself from a few days ago... Did you forget that one? I'm not a fan of having anything in public accessible directories than index.php, .htaccess, and static files. Interesting that you chose to support a template system, but didn't include a database connector for your models to access, to pull data into your templates? Also, not much of a Wiki! Not to knock, but I would encourage you to work on it further... Maybe bounce ideas around /r/phphelp or what not. Also, look at what others have done. Panique has a whole series of MVC projects (tiny, mini, mini2, huge) at https://github.com/panique You might look at those, too...
Thanks for the input.
 I had assumed you were passing in a model that contained a date, upon further reading I see you're just passing the date as a param to the function. If your function solely relies on a date to make it work, then by all means continue as you are, after all we don't know the context of the code or the rest of how things are run. 
I encourage people to come up with something that's *not* MVC.
You landed a PHP job without PHP experience? I mean, your employers deserve what they get. Now. PHP is in many ways similar to JS, but I'm talking in broad strokes. The syntax has many little annoying differences and the semantics of various primitives may trip you up in places (say: arrays are copy-on-write, not by-reference, variable scopes are different etc.). The only way to figure this out is practice. But PHP is the easy part. See, WordPress is a shitty mess written by a million drunken monkeys hammering on keyboards with drum sticks. You'll need at least a week to get oriented in WordPress after the week you need to get oriented in PHP (if you're a very fast learner, that is). I'd suggest honesty. Talk to your employer about your worries and you'll either get help, or you'll be freed up to look for a job that's more suitable for you, instead of the stress roller-coaster you're in for.
Well good, so you can ask your employer about your worries, right?
the problem working with server-side code is you'll also need to learn server basics just to get it running (vhost, apache config, php.ini) and that's a steep learning curve they don't bother to teach in courses unless you're training to be a sysadmin. you can dodge that bullet using a cloud hosted IDE like Cloud9 (free when i joined): https://c9.io/login you can get a functioning install of WP in 30 seconds
Doing one regex operation is faster than doing multiple, isn't this common sense? I thought Symfony was supposed to be the smart way of doing things. 
Congratz on your first junior dev job. Despite that I'm not liking wordpress (or almost any cms out there) too, this won't help you when I'd rant about it too. So here is my advice to get a quick start in php. There are two resources (well there are a lot more to be honest) which I'd recommend you to get started, the first one would be to watch some of the free content Jeffrey offers on his website laracasts.com, [this one](https://laracasts.com/series/php-for-beginners) is for beginners and there is a lot more - you have to look around a bit, the search offers a skill-level filter. You won't necessary need the *laravel* related content because it's a php framework you won't touch while working with wordpress. The second resource (which is also one of the most relevant for intermediates) is [phptherightway](http://www.phptherightway.com/). I hope this will give you a little headstart, the rest should come as you go along and hopefully your new co-workers will help you to get going. As for Wordpress I cannot recommend you anything because I really just installed it once (out of curiousity) as the passed hype started. Good luck!
Just like it works now with Amp, except that don't need to work with promises everywhere. The implementation difference for components working directly on the event loop is pretty small, see https://github.com/amphp/byte-stream/compare/amphp:11da27c...amphp:5097375#diff-ff0e367fa0e78d71dcafff02f2240f79. You register a readability callback for a certain stream on the event loop and call `Fiber::yield()`, yielding a placeholder (a promise). The fiber is then continued once that promise is resolved, so when there's new data on the stream.
1. /r/phphelp 2. It is not a database issue, it's a login issue. Seems you still have a vague idea what a login is. Make it working first
If you’re a decent developer you’ll pick it up soon enough. Don’t stress. You’re not the first to be hired in a stack you don’t have experience with. You must have a solid background if they see you’re fit and you’ll learn in time.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Hey! I wasn't aware of Lando or Docksal. Thanks for pointing those. Actually, those solutions are quite different. thecodingmachine/php is a Docker image for PHP. So it's only a part of what solutions like Lando or Docksal can do (they are providing a full development environment by picking several Docker images and putting them together). thecodingmachine/php images could be a part of Lando or Docksal though!
They were saying during the interview that they are using PHP for front-end, but I thought it was a slip on their part, being that my understanding is that PHP is for the server-side.
What do they deserve exactly? Maybe the wanted an entry level person who they can train up, maybe they want him to work mostly on the front end. Why will it be stressful for him, maybe they will dedicate someone to onboarding him for a couple of weeks. You seem to have made a lot of assumptions about the situation.
Might want to have a quick look at creating plug ins in WordPress as well as installing and configuring it yourself. It's relatively simple. 
OP obviously has no clarity on what his job entails and is currently scrambling to catch up on technologies he hasn't used. That's a mistake of his new employer. &gt; maybe they want him to work mostly on the front end. Why will it be stressful for him? maybe they will dedicate someone to onboarding him for a couple of weeks, maybe longer. You seem to have made a lot of assumptions about the situation. So you have a bunch of arbitrary "maybe this", "maybe that", and I'm the one making assumptions? I haven't made a single assumption, aside from adopting the one OP is giving us (that he needs to study PHP and WordPress). And because I'm not making assumptions, and I don't want to make any, my advice was: consult with the employer. What better advice you'd give? Just imagine a bunch of lucky "maybes" and go blind into it?
I didn't attack the "humbleness" of the post, I didn't attack the size of the project, I didn't attack trying out things. I just said: I encourage people to try something different.
If you think PHP is a good languagae/framework then you probably need to re-think your life as a software engineer.
You're right. I agree, would be interesting to see something new instead of yet another mvc clone 
Don't worry you'll be fine.
in Egypt its like 90% php-laravel
codecademy.com laracast.com udemy.com You will pretty much learn basics in a week. I'd suggest don't touch WP for now, Just go through PHP basics first so it will be easier to understand WP code base, otherwise it could also get overwhelming. Do familiarise yourself with WP admin panel to take breaks from php lessons. Cheers &amp; Best of luck
Front end is not necessarily the same as “client side”. For example, you could have some “front-end” servers that serve up web pages and the likes, whilst connecting to “back-end” servers to do other work such as intensive work like image processing. The terminology is a bit loose. 
They are likely confused in the server-client paradigm, versus the front-back end interpretation. They are likely considering front end to be the theming and templating system which converts uses some PHP to turn data into markup.
First things first is you need to get familiar with how WordPress works as a user / administrator..forget about as a developer at first. Find a way to install it on your local computer so you can tinker with it easily and install various themes (https://wordpress.org/themes/) and plugins (https://wordpress.org/plugins/). You also need to understand how adding content and media works. By far the quickest and easiest way I have found to run WordPress on your local machine is DesktopServer: https://serverpress.com/ There are other, better options but they tend to be more complicated. Local by Flywheel is becoming very popular: https://local.getflywheel.com/ Once you get WordPress installed login and look through every menu item in the backend to at least have some familiarity with what is there. Try creating a post, try adding a user, try adding a theme or a plugin. This will hopefully be pretty obvious once you are looking at the admin dashboard. There are probably some good free resources for learning WordPress from the perspective of a user / admin but I'm not familiar with them. If you want to go the route of a paid course check out this series from Treehouse: https://teamtreehouse.com/tracks/beginning-wordpress Once you have some familiarity with how WordPress works for a user / admin, then you can start thinking about how to develop with WordPress. For that, I recommend this course: https://www.udemy.com/become-a-wordpress-developer-php-javascript/learn/v4/overview It gives a fast intro to PHP then demonstrates how it can be used with WordPress to build a custom site. You can watch the first 3 hours or so of the course for free here: https://www.youtube.com/watch?v=FVqzKAUsM68 Treehouse also has a WordPress Theme &amp; Plugin development track that covers some PHP first. https://teamtreehouse.com/tracks/development-for-wordpress 
One very common problem with new hires is they don't talk. They don't ask questions, they don't share worries, they don't reveal their problems. They're trying to "fake it till they make it". They try to be prepared for everything without asking what's needed. When I see what OP's writing, that's the problem I see. They're not talking with their employer, instead they're asking *us* how to prepare for some job we know nothing about. That **will** result in a stress roller-coaster whether it's warranted or not. 
You will probably just be making WP themes not WordPress plugins or stuff like that. WordPress isn't so bad. And PHP has gotten way better since version 7. 
&gt; Where are your tests? Lean programming principles says: * Eliminate Waste - Your code will change anyway and those tests will have to be rewritten * Deliver as fast as possible - Tests take time to write so slow down time to deliver &gt; Why are checking in dependencies? It's this new concept called Immutable Deploys without Builds or IDwB Builds. Just git checkout / git pull and boom, done. No need for any CI, build commands or anything! &gt; Why are you not using composer for autoloading? Why do I need to pull in an external dependency for autoloading when i can achieve the same thing in 7 lines. &gt; Why do you think it’s necessary to repeat the same .htaccess everywhere, rather than exposing a single directory as document root instead? It's all about verbosity and simplicity! **Simple:** No magic here, no extra config needed, just drop it on your godaddy shared server and done! **Verbose:** We know whats going on in each directory by looking in the .htaccess in that directory.
My recommendations are that you should follow the php and Wordpress documentation! Be careful with wp plugins, don’t use them too much, a majority of plugins are made for people who don’t know how to program, and they aren’t optimized and often transform you project into a mess!
The language has tons of warts and still isn't in the best place. That said, that doesn't mean you should use an unmanageable framework just because the language you're using it on isn't perfect. 
You’d have to pay to do it, but I’d highly endorse the Wordpress tracks at Team Treehouse. Code-along videos with quizzes interspersed. Good description of design intent and architecture. Not complete by any means, but you’ll be out of the kiddie pool in short order.
Shared hosting is dangerous, not HTTPS.
Why does Bangladesh keep moving?
But the query logger can be easily injected, can't it? That's why there is a setter method for it, in fact that is how the debugging toolbar (DebugKit) works. It injects at runtime a decorated query logger that has nothing to do with the Log class.
&gt; If I can't even arbitrarily use different logs from one module to the next What do you mean by this? I quite interested in your feedback
If you press back you probably only see a cached version of the page. You aren't really logged in. If that's a deal breaker then you can add headers to disable caching of sensitive pages.
You can also reload page on back and check for session.
A container is ideal at this point. I think that pattern has more or less won the debate. Using Locators isn't really the same as a DI container. A Locator is kind of backward. I don't want to ask for a specific thing and have the framework go find that thing. I just want to know I have a thing that conforms to a contract and not care where it comes from. There's philosophically more to DI than just object retrieval. 
Don’t sweat it man. My first job as a dev, 10 years ago, was exactly the same situation. Specially on junior positions, it’s pretty common for companies to hire people that can code something instead of hiring &lt;insert language here&gt; devs. (Also, if you’re a dev specialized in a given language, you’re probably not junior anymore). They’re most likely expecting that from you. In a few weeks you’ll be ready to roll. It’s not a big deal :) Good luck :)
I don't necessarily agree that he doesn't need to be a programmer. There ARE WordPress jobs out there where they look for actual professional WordPress developers. For example, my company is looking for someone who is proficient in WordPress and can create plugins from scratch with RESTful APIs.
I'm a fairly experienced PHP developer who has worked with several MVC frameworks. Is WordPress really that bad to learn and work with?
Loads of good advise here already. I just want to add; don't worry about whether WordPress is shit or not, it's not important right now. Ask your employer if a colleague can be assigned to you whom you can ask questions. Not a manager, but more like a code buddy (it will give that person also an opportunity to do some mentoring). If you're starting with WordPress you'd probably will be doing "theming" first. there is a lot of information on the WordPress website already. I suggest you go through this [1]. Learn about the "template hierarchy", this is important [1]. Good luck! [1] https://developer.wordpress.org/themes/basics/ [2] https://developer.wordpress.org/themes/basics/template-hierarchy 
Not really, you'd pick it up pretty quickly. There are some discrepancies to say the least, especially in how the functions perform. I feel like it has its place, and I have no reservations using it in these cases. That said, it's definitely not an enterprise level public facing solution. I say this because given its popularity it's a big target that has the vulnerabilities of each release available for all to exploit. It's good if that's not a big concern. But I guess any large and popular open source project feels the same pain. I don't see any reason to love it or hate it.
You can use any PSR-3 compatible logger, in reality. The Log class is just a factory for any PSR-3 implementation. You an think of it as service locator, both capable of building and holding the instances.
You really aren't understanding the problem, and I don't care enough about Cake to keep going in circles. 
I made intensive use of dependency injection techniques when designing the CakePHP ORM, including constructor and setter injection. You can dependency inject (mostly) any collaborator of the ORM classes. What is a philosophical stance of mine, is that I don't like the ideas of a global dependency injection _container_. I like having many of them, dedicated to one specific area. One could be Logging (the Log class), another could be Caching (the Cache class), another could be interfacing with tables (the TableLocator and TableRegistry classes) If you do make a serious reading at Cake's source code, you would find the DI pattern everywhere, and also a bunch of different service locators that are used to inject dependencies at runtime. My stance on this is that without a typing system (like C# has), having a global dependency injection framework is more of a distraction than anything else.
Alright, thanks for trying to enlighten me anyway
Thanks for this , basically what i ended up doing, id had the thought before i posted but i was concerned about overlapping date ranges, putting a check into the repo register fn to deal with overlaps is very smart thank you, i feel like an idiot for not thinking of it, also never saw those dateperiod objects before, very useful thanks!!!
I think one would rather mix PHP with plain-text if it's a CLI script.
Oh.. I was thinking the score was byte based (ascii) not mb_strlen based.
No. You just can't stop your subconscious from churning away at the question "Why the fuck would anyone choose to implement X like that?"
&gt; I'm a fairly experienced PHP developer who has worked with several MVC frameworks. Is WordPress really that bad to learn and work with? WordPress has nothing to do with MVC frameworks. You'll be able to learn and work with it, but at every step, the stupidity of those who implemented will feel like getting punched in the face, occasionally balls. We're talking about people who know absolutely nothing about architecture, nothing about security, and apparently were born without the ability to recognize and utilize common sense. 
98% of egypt php jobs is laravel 
Because "Laravel" isn't really a talent set worth hiring an entire developer for. Besides that, anyone competent enough to be meaningfully efficient with Laravel (or any framework) should have the skills to pick up and run with another framework. If I am hiring for a non-junior role, I would be hesitant to specify a framework for fear of wasting my time with applicants who only know how to use that one framework - those people are not the kind of people I would trust with my codebase. I have worked with many companies that are *open* to using Laravel, and some that do use it. The most recent one was in fact in the bay area and powered a large SaaS platform. 
It’s also possible that you stumbled onto a shop that isn’t dumb and hires good people instead of just people that can match their checklist of techs. A junior developer is supposed to learn on the job. They should give you the opportunity to learn all the languages and tools they use, so don’t worry too much. The first week is all about learning how they do things, their development stack. Setup your dev box, get to know your coworkers, etc. If you’d like to get a head start, go through one of those 2 or 3 hours Wordpress courses to familiarize yourself with the concepts. Don’t worry about WP dev stuff yet. If you’ve never used php, I highly recommend the laracasts php for beginners series. Looks like all the vids are free. Since you’re not a complete beginner, you’ll be able to get a basic understanding of php fairly quickly. https://laracasts.com/series/php-for-beginners Good luck!
I wish any of that were untrue :(. 
Hi. This guide was very useful for me. I have one question. Why there is Dockerfile AND docker-compose.yml in your test repository? How does it work together?
I don't call mail() myself since 2010, but it's interesting to know that filter_var() is totally unreliable when it comes to security
Here is a list of threads in other subreddits about the same content: |Title|Subreddit|Author|Time|Karma| |---|---|---|---|---| |[Open source Mobile and Web QA Automation platform](https://www.reddit.com/r/programming/comments/7yeb7q/open_source_mobile_and_web_qa_automation_platform/)|/r/programming|/u/zeeshanu|2018-02-18 21:47:13|1| ---- I am a bot [FAQ](https://www.reddit.com/r/DuplicatesBot/wiki/index)-[Code](https://github.com/PokestarFan/DuplicateBot)-[Bugs](https://www.reddit.com/r/DuplicatesBot/comments/6ypgmx/bugs_and_problems/)-[Suggestions](https://www.reddit.com/r/DuplicatesBot/comments/6ypg85/suggestion_for_duplicatesbot/)-[Block user (op only)](https://www.reddit.com/message/compose/?to=DuplicatesBotBlocker&amp;subject=remove%20user&amp;message=zeeshanu)-[Block from subreddit (mods only)](https://www.reddit.com/message/compose/?to=DuplicatesBotBlocker&amp;subject=remove%20subreddit&amp;message=PHP) Now you can remove the comment by replying delete! (op only) 
honestly the first time I've seen `goto` in the wild _on purpose_
Same, seems to be a very old router from 2015 that never took off.
Wow, that definitely sounds worse than the MVC frameworks I am used to working with. lol
Why would ever someone let headers/anything from the frontend put into some function without validating it first? I really don't get it
I thought that was well known.
Swoole is faster because it’s a PHP extension, which hurts its portability.
It seems to have nothing to do with `mail()`, and everything to do with using user input incorrectly. It's basically like saying, "Why `$pdo-&gt;prepare()` is dangerous": $pdo-&gt;prepare("select * from user where id=" . $_GET['user_id']) 
PHP bloggers misrepresenting security issues? COLOUR ME SURPRISED!
I used homebrew, it wasn’t smooth or easy but I got it to work eventually 
If you get the chance, attend this talk from the maintainer of phpmailer when it gets near you: https://conference.phpbenelux.eu/2018/sessions/tales-from-the-wrong-end/ It was very interesting to see how this issue was handled by the php mailing libs.
https://gist.github.com/uran1980/ec05ce5c51a9a7524d5e4f40de838c86
You are probably looking for [macOS 10.13 High Sierra Apache Setup: Multiple PHP Versions](https://getgrav.org/blog/macos-sierra-apache-multiple-php-versions). Good luck!
That's incorrect, clearly. It depends entirely on how you use `filter_var()`, and for what context you're using it, as to whether or not it's reliable as a security measure.
Maybe I'm missing something, but it really sounds like a problem with the program that PHP calls at some level, not the language/library itself. That's not to say that properly sanitizing input isn't for the best.
This isn't really 'why mail is dangerous', more like 'why you should really learn how to do user input correctly'. This isn't the only thing that can fuck up when using unsanitized inputs.
I love PHP integrator but this release has been quite a let down. I found serious issues in handling autocompletion with "use" statements, plus some problems (which may or may not be related to ide-ui and the themes I'm using). I tried to manually downgrade to a previous release, but I can't get it to work properly...
That's what I'm doing, hopefully something will come through! Thanks
The problem is with mail() because it has a shitty interface that promoted exploitable code. SQL is a very complex language compared to a flat list of key=&gt;val headers, so it's injectable. There's no reason to make a key=&gt;val list injectable via CRLF, yet here we are. Likewise, exposing a list of command line options as a string is so lazy, it's almost like the author thought he's playing code golf and this was the shortest solution.
And yet filter_var() is indeed mostly useless for security. It's written poorly. I think the only thing I ever use from it is the float filter.
You think an API like this is not a problem? mail(*, *, *, raw list of headers, raw list of CLI options) This is a terrible API design, you need to become an SMTP and CLI expert just to properly send an email. There's no excuse why these parameters are not properly abstracted as associative arrays (or object, or *something*) and secure to use.
I don't see the data supporting the fastest claim; is it somewhere else on the site?
Will look into this...
7.1 breaks Random-Lib... 
There seems to be a lot of misunderstanding about the role of a filter. Filters exist to reject known-bad data. That does not imply that what comes out the other side is necessarily known-good data, and even if we assume that it is (which is always a bad assumption), it _certainly_ doesn't imply that that data is somehow magically safe to use in any given context. This is why the naive approach in the article wasn't ever in danger of being a good idea in the first place. Not because `filter_var()` is broken or inferior in terms of filtering like the author seems to be implying, but because _that's not how filters work_. Even the most basic and bulletproof of filters can lead to security vulnerabilities if you use the data in the wrong context. It's like complaining that your oil filter is garbage because it didn't prevent your engine from catastrophically failing when you dumped honey into it instead of oil.
Can you please tell your experience?
My man, when is your next set?
As the article says, even though PHP and Apache ship with MacOS you probably still want to use MAMP. It’s self contained, supports multiple PHP versions and sets up in minutes. I’m a very experienced developer and server admin and I still prefer it for the old “just works” attitude. 
You're talking about stuff that's irrelevant here. `filter_var()` is 90% garbage, pure and simple. It's poorly written and poorly designed. One needs to carefully test what this crap considers valid and what it doesn't in high detail before they use it for a specific data, because the criteria is at points outright arbitrary. Such as, specifically, the email validator, which would pass through tons of invalid email addresses, and forbid valid ones.
Thanks!
It isn't arbitrary at all. Though, I could see how you might consider it as such if you aren't familiar with the relevant specs when it comes to what is or isn't a "valid email address". Most email providers, clients, and software in general operate on various (wildly different) subsets of the actual specs, based solely on what is or isn't deemed useful to them. So, a lot of what the email filter for `filter_var()` considers valid is valid merely because the specs say it's valid, not because it would be real-world useful to your application. But making a "real-world useful to your application" filter that's useful for any developer or team's situation/context is categorically impossible.
Thanks, that's what I meant.
I think you're looking at this the wrong way. All that says is that it was probably coded in C. Writing everything in higher level languages isn't necessary and may not be practical.
&gt; I think you're looking at this the wrong way. All that says is that it was probably coded in C. &gt; Writing everything in higher level languages isn't necessary and may not be practical. We're in /r/php. This is a PHP API. As such, it sucks ass.
And what is the PHP interpreter written in? Abstracting away aspects of the underlying language is probably very difficult. https://en.m.wikipedia.org/wiki/PHP ^ the lack of a formal specification until 2014 (assuming wiki is correct) explains perfectly the situation. Also given it's current name containing the words "hypertext pre-processor" perhaps part of the problem is using it for stuff not well suited to it's core purposes/intent?
**PHP** PHP is a server-side scripting language designed for web development but also used as a general-purpose programming language. Originally created by Rasmus Lerdorf in 1994, the PHP reference implementation is now produced by The PHP Group. PHP originally stood for Personal Home Page, but it now stands for the recursive acronym PHP: Hypertext Preprocessor PHP code may be embedded into HTML code, or it can be used in combination with various web template systems, web content management systems, and web frameworks. PHP code is usually processed by a PHP interpreter implemented as a module in the web server or as a Common Gateway Interface (CGI) executable. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
&gt; And what is the PHP interpreter written in? Abstracting away aspects of the underlying language is probably very difficult. Are you shitting me? It's "very difficult" to ask for headers as an assoc. array where CRLF is not allowed, in a language with assoc. arrays? Here's the JavaMail API http://www.oracle.com/technetwork/java/javamail/index.html Notice how they managed to abstract all this. Guess what, the Java VM, compiler and so on are also written in C. &gt; Also given it's current name containing the words "hypertext pre-processor" perhaps part of the problem is using it for stuff not well suited to it's core purposes/intent? That's... I'm sorry that's a very stupid argument.
I use PHPMailer.
Lando and Docker! 
Maybe I missed something but how does the presence or absence of CRLF (two mere bytes) affect anything here?
I don't know anything about DC but if you have decent PHP chops and might consider Boston, PM me.
&gt; Maybe I missed something but how does the presence or absence of CRLF (two mere bytes) affect anything here? Yes, you missed something. Precisely because you missed it, the mail API should've been designed better so you don't shoot yourself in the foot when you use it.
It's not mail's fault that you gave it exploitable data.
So precisely as I thought, you're defending this shitty API because you think you're so smart and working around shitty APIs is your way to show your intellectual superiority. Fine, well I'm a developer so my job is to fix insecure APIs, not insecure developers. So I'll always go for a better API design. And you can hack around trash and think you're very smart if you prefer that.
Oh man, it’s been a while. I remember having to boot in safe mode to be able to get OS X from insisting I use its version of php, git, Python, and MySQL. And there’s been a couple of times, after an update, that it went back to osx versions. I’m sure I followed a guide or two. I know for php I found a guide that would let me switch versions on the fly. Apple needs to upgrade its default PHP version to 7.1 at least. They had no problem removing headphone jacks or adobe flash to force people to upgrade.
deserves a double downvote for not addressing the question.
I'm deliberately not addressing the question, because you're so arrogant to argue about this without having a clue what the attack vectors are here or how headers are encoded. 
You are a worthless piece of crap. This conversation is over.
And you still don't know how CRLF figures into all this? Haha, buddy...
Which was vulnerable to this very problem last year. 
Terminals are dangerous! You can type stuff in there and bad things will happen!
&gt;And what is the PHP interpreter written in? Abstracting away aspects of the underlying language is probably very difficult. This is ridiculous. Python is also written in C, and they actually have a proper well-designed object-oriented module for sending email in the standard library.
Will check it out!
Php as a whole is dangerous isn't is
Based on EOL PHP, has no Composer package, reinvents the wheel by using no (micro) framework and has no tests to verify what happens if you touch any of this custom stack. I would suggest cutting your losses, choose a (micro) framework and start from there, focusing on the domain logic, properly defining the requirements in a package and adding tests so contributed code can be verified. 
Scrap EOL, it's flat out not supported anymore.
I was going to build one but then I needed a byte type in PHP
I'm not defending anything. I'm just saying don't blindly pass questionable user input to shit and hope for the best. &gt; But then again, I'm not talking to a good developer here, I'm talking to you. LOL. Your petty personal attacks in every one of your comments just makes you look like a jackass. Like you're some big fuckin cheese whose opinion matters most of all.
Does it actually have incompatibilities with PHP 7.2? Saying it's based on EOL PHP simply because it supports versions of PHP as low as 5.5 seems unfair. What's next? Saying `&lt;?php echo 'hello, world!'; ?&gt;` is based on EOL PHP because it works on PHP 3 just as well as it does on PHP 7.2?
the mail() function makes it pretty hard to do some of the more complicated stuff (securely) compared to using a library like swiftmailer/phpmailer .
Wait... so using escapeshellcmd on a string that uses escapeshellarg is insecure?
It's just a lower level, more raw. Good practices have nothing to do with the language/took you are using
&gt; I remember having to boot in safe mode to be able to get OS X from insisting I use its version of php, You definitely don’t need to do that. You can install homebrew PHP then easily link it from Apache by changing one line of config. &gt; Apple needs to upgrade its default PHP version to 7.1 at least. They already did, that’s what’s on the latest OSX.
What they're saying is that you shouldn't combine them by passing the results of one into the other. The root of the problem comes down to having multiple quoting mechanisms causing conflicts and loopholes in parsing/escaping. What should be done is: 'echo -f ' . escapeshellarg($userInput); or 'echo ' . implode(' ', array_map('escapeshellarg', $args)); 
Implying that it's even "very difficult" is ridiculous. It's just yet another anachronism of PHP that no one seems to want to fix that will continue to let inexperienced developers shoot themselves in the foot.
So symfony 4 seems like a big improvement over 2 &amp; 3. Can anyone share professional experience with it?
I can see why she wants to support old PHP versions (easy to find a cheap host). But it also deters developers. New syntactic sugar in PHP have been adopted because it makes it so much less of a pain to work with.
I think the article itself is a great explanation of why to actually *NOT* use assertions: * Awkward AST evaluation - I knew this one, but argumentsReallbeing computed? Really?! This is not a purely functional and lazy language: stuff like this is just dangerous (anyone bitten by the "Rasmus optimisation"? I got bitten badly.) * Behaviour changes depending on global state/flag set at runtime - you can now add this to the permutations under which your system needs to be tested * Warnings instead of exceptions?! Now go out there and use an assertion library like `webmozart/assert` or `beberlei/assert`, please.
[removed]
interesting enough :)
Wondeful
Someone using this in production? I am using it for our band to give non-facebook people access to their photos. It is not really responsive. Is there any plugin to make it bootstrap based? img-responsive would be great here.
This is a really bad example for anyone wanting to create a reusable module for Magento 2. The app/code folder only still exists because Magento was foolish enough to put it there for developers requiring a transition between M1 and M2. All new modules should be created as Composer packages.
And kinda required upgrade: https://github.com/Roave/SecurityAdvisories/commit/94230db36bded9d164ffccabcb38c67eedd63595
Thanks for all your brilliant work
I believe composer is a package manager, but not a Magento tool to manage modules. If you’re developing your own module or if you want to continue development of an existing module you add your files or clone a git repo to app/code/&lt;vendor-name&gt;/&lt;module&gt;. When you want to publish your module for community to access, you better go with package manager. Read this article from Magento officails https://community.magento.com/t5/Just-Ask-Alan/Why-two-locations-to-develop-themes/m-p/30147
It is. While severity in these CVEs is way too high, it's better to upgrade.
If you want a debug tool, use a debugger and unit tests, not assertions. Assertions are not a substitute for proper types and constraint enforcement. &gt; For such a common and widely accepted practice, I'm afraid "really?!" is not a good comeback, it just says you weren't exposed to this and rejecting it as a kneejerk without evaluating it objectively. In other languages, an assertion leads to a panic, not to a warning and silent execution continuation. &gt; Assertions don't change system behavior and state. They just run checks against system state. Any side-effect caused by the expression will be lost. This can only be avoided by disallowing impure operations in the assertion contents, and the parser can't do that due to PHP's nature of "everything outside this file is not my problem". The "Rasmus optimisation" is one of the worst PHP sadness entries, and for a good reason. &gt; This library is not an alternative to `assert()`, these are entirely complementary. No, one is useful, the other one is completely useless. That's the core difference between the two. Code your invariants properly, not in some debug tool.
It was me, thanks for the kind words ;)
You are confusing themes with modules. If your module solves a generic problem, you definitely shouldn't start in the app/code folder.
&gt; If you want a debug tool, use a debugger and unit tests, not assertions. Those are three complementary tools. You statement is as absurd as saying "if you want a debug tool use a debugger, not unit tests". *There is more than one debug tool...* &gt; Assertions are not a substitute for proper types and constraint enforcement. Yes, they are not. You're the only one who thinks this is what assertions are. First, understand what assertions are. Then critique them. In that order. Don't use straw men. &gt; Any side-effect caused by the expression will be lost. A side-effect in an assertion is a bug in the assertion. In practice it happens... hmm... I can't think it ever happening to me, honestly? You don't go into an assertion with the intent of causing side-effects, and therefore they tend not to happen. &gt; No, one is useful, the other one is completely useless. That's the core difference between the two. Code your invariants properly, not in some debug tool. Once again, assertions are not about enforcing invariants. They're about checking the invariants enforced *by other means* are doing their job. If we have a perfect type system that can enforce every single invariant in your business domain, we wouldn't need *either* unit tests, or assertions. Unit tests and assertions exist because there's no such perfect type system. Even Haskell doesn't, let alone PHP. Honestly, you don't yet understand assertions. 
I´ve been toying with this framework in the last two weeks and it´s impressive. Definetly it gets way less attention that it deserves in the php frameworks overview. I´m going to use it for my next pet project, and for sure I´m gonna keep one eye in the future relaeses. Kudos to the team!
Nice &lt;3
 &gt; * Unit tests are good for testing external interface/contract expectations. &gt; * Assertions are good for testing internal implementation expectations. No, a unit test guarantees that the unit works as advertised, including values that are considered "edge cases", which is what you are trying to push into assertions (plain wrong approach). &gt; A unit test which cracks open an implementation and starts messing about in its implementation details is a bad unit test. So don't abuse unit tests where assertions should be used. In focused TDD, code that isn't touched by a test scenario should not exist in first place. I don't go and hack into implementation details of the test except for external cooperators (mocks/spies). &gt; This doesn't happen. It's downright pathological you keep talking about it without any real-world evidence about it, and in fact in the face of contrary evidence. I already see it with deprecation messages being upcast to exceptions depending on context. This is a massive amount of pain for us library maintainers, and symfony even had to write (for example) an entire component called `phpunit-bridge` just to deal with the noise. This is just one of the many ways in which the `E_WHATEVER` approach of the PHP language completely sucks and is utterly useless. &gt; Let me give you one example of a real-world assertion in something you'd be familiar with. Let's say Doctrine implements a type of cache that promises, through smart algorithms, that the cache is always in sync with the database. At all times `DB === cache`. &gt; &gt; You add some unit tests specifically to test for the cache consistency. But despite your attempts to cover all edge cases, you know in the big picture your test set is very minimal, and you know that replicating all kind of exotic race conditions that might occur is a gargantuan task. It is, but something that leads to invalid, inconsistent or unexpected state anywhere in the system must lead to an exception and crash, because the system can no longer operate under the advertised runtime invariants. In the case of Doctrine, we even go as far as "closing" the `EntityManager`, preventing any further interaction with it *by design*. Also, that video is 33 minutes and you answered ~15m after my post, so I'll just assume that you're not even willing to follow along.
I did the previous route optimisation and have aided in profiling this one. For my previous job (freelance) I worked for the Dutch airport Schiphol. The application immense of spike traffic. We needed very advanced caching strategies in order to case and still have a personalised experience for the customers. A great way to achieve this involves using ESI's (Edge Side Includes). Using this you'll end being able to cache A LOT, but also on a stale hit you'll get more http requests your way. You'll also get a somewhat exploded number of routes (for all the partials you need an additional one). Because of this, matching of routes was actually the part where the majority of the time was spent. So optimising this made a lot of sense. It also made the difference between matching the first and last route smaller. This is better, because predicting what effect traffic will have because infinitely easier. For us the change in routing allowed us to cancel the request of additional webservers. If it wasn't for that we would have needed to put more metal in place just to handle the base traffic as well as setup some sort of auto scaling for spike traffic. After the upgrade we didn't have to do either. I call that an enormous win.
Remember that change I sent you a while back? ;-) that was like 90% of what you needed to leverage all of this.
PHP is an open source language most of developer are using php to develop their application because it is easy to use and varieties of frameworks and solutions are find easily.
&gt; the "Rasmus optimisation" What is this? I've not heard this term before and Google just brings up a bunch of presentations of PHP performance.
 class Foo{} new Foo(call_user_func(function() { echo 'hi'; })); https://3v4l.org/6RgDT 
&gt; A critical problem with hard-coded conditions is their tendency to stay in teh code until production. It is not good to check values in production, let alone to kill the whole script if anything happens. I've never got this PoV. I use a defensive coding style which involves lots of "assertions" on state and throwing exceptions when something isn't as I expect. I think it is a good idea to make sure that your assumptions in development are still / always true in production. Any effect on performance of these checks is likely to be minimal - I'll remove or refactor the checks if and when profiling tells me they're causing an issue. As for "killing the whole script", I think bailing out when the system state isn't what you expect it to be is also the right things to do, especially in production - you use exception handling and transactions to gracefully handle this (report it to your error logging with contextual information and display an appropriate message to the user to tell them something broke and you're on the case).
Fuelphp is nothing Not worth developing on at this point if you care about the longevity of your project. Use modern Frameworks like Laravel and symphony. 
&gt;Using PSR-7 also means you're not shackled to one framework. If you've been using Laravel but suddenly need to use Symfony/Zend/Slim for a particular project, enjoy rewriting all your middleware. In theory I agree, in practice however I don't think it works the same. Firstly being shackled to a framework, the reality is for a language like PHP which normally is used in a relatively limited scope (type of projects, scale of projects, etc) the common reality is that you have say an agency and in most cases that agency is tied to a certain framework for X number years until it moves to a new framework or new language. Hence in a lot of cases a lot of jumping from framework to framework isn't really an issue. I'd also add that the other problem with theory vs practice, is that the two biggest frameworks in PHP don't use psr-7. The other issues I have with theory vs reality, is yes it sounds great you can just move this middleware from one project to another, but firstly a lot of middleware functionality already exists in the two most popular frameworks, so it is rather redundant in that aspect (especially in a community like PHP which is overly obsessed with frameworks), so sure if I use Slim then I can grab a middleware to add trusted proxies functionlity, but then if I use say Symfony, trusted proxies is already built into the Request object. Secondly that the whole saving time argument is a bit of a myth given a lot of middleware is pretty trivial you aren't saving a lot of time anyway even if you wrote it from scratch for whatever framework you use, let alone if you simply reworked it to fit whatever you use, for example long ago I remember there was a middleware dispatcher for Symfony Http-Kernel, it would have taken very little time to rewrite a typical PSR-7 middleware to fit that. Middleware seems to work a lot better in languages where the community is not so obsessed with frameworks, where the usuage is a lot more about grabbing components, libraries,etc and where the language itself has a wider number of uses then PHP. Maybe in the future PHP will become more like that, but today, well, go look at how many PHP based companies are tied to Laravel or Sympfony...
And for everyone wondering why yet another alpha release, please see https://github.com/propelorm/Propel2#status-of-the-project.
How widespread is this in production? I might be interested in updating the code to PHP 7.x
Fiber does not know anything async i/o. A fiber is just like a userland thread. With Fiber::resume and Fiber::yield API, you can resume or pause a php execution by you php code in certain condition.
What kind of banana isn't using prepared statements
[One of the more famous examples](https://github.com/igorw/retry/issues/3)
I use Craft CMS (based on Yii) for a lot of my projects and have created plugins for the CMS and same sentiment as you, I like a lot of things it offers. and it's not as opinionated as Laravel.
The explanation is you need to do the job you're hired to do. It is completely not unreasonable to expect access to tools that are needed for the job. They can easily create a VM with internet access, isolated from the rest of the corporate network, which can only access white listed host/ip for composer. Completely not unreasonable. I work in a corporate with all the rules and policies but the tech team is competent and always finds a way. 
I have no idea what is in this picture.
Take a peek at Symfony 4 Flex, you'll like it. 
I have no idea what this could be used for, but I'm upvoting because it sounds cool.
i have always wanted to try Yii but im just so used to laravel :/. i might consider toying around with this since it looks pretty neat 
I used a different way to get PDF. I start from an OpenOffice document used as template. Using odtReportSQL (https://www.phpclasses.org/package/10276-PHP-Generate-report-from-MySQL-data-using-ODT-template.html) I can update this template with data from mySQL. The result is a OpenOffice editable document, that i can export as PDF. The big advantage is that I build a new document in OO, and not on PHP code. When you have 20+ documents in one application that is a BIG advantage. The second advantage is that is DB driven: to add new documents I must only add the OO templates and related SQL queries on DB. Last advantage it that this class produces also the HTML UI fragment for document production. So it can be added to any existing PHP application with only 2 code lines: &lt;?php include('odtReportSQL.php'); ?&gt; &lt;?php echo getReportMenu('this_page'); ?&gt; Hope this can help Best regards m.s.
because of 25k installations each month.
It can be used to write static code analysis tools, code formatting tools or PHP to another language transpiler or AST based diff tool and semantic merge tool… For example, I am planning to use it to build and visualize UML and call graph.
It is different. You probably won't like it at first :)
Either I'm too good to have any issues, or too bad to ever encounter a difficulty with it.
You can't bind offset/limit ¯\_(ツ)_/¯
You dropped this \ *** ^^To ^^prevent ^^any ^^more ^^lost ^^limbs ^^throughout ^^Reddit, ^^correctly ^^escape ^^the ^^arms ^^and ^^shoulders ^^by ^^typing ^^the ^^shrug ^^as ^^`¯\\\_(ツ)_/¯`
why not to use C?
Oh shit ye
Just cast them as ints?
There are still API keys in the code.
Because go is "better" .
IMHO it's worth noting that &gt; If you aren’t convinced yet, Fabien Potencier, who originally contributed the RunScriptCommand to composer, recommends using Makefiles. Is not true anymore. As per http://fabien.potencier.org/symfony4-flex-update.html &gt; Makefile support proves to be a nightmare. Despite several patches to the recipes having some Makefile support (support for Windows and whatnot), it was a never ending battle. That does not mean that makefile sucks. It's just that it's really not as portable and widespread as it seems. So it may be fine for a closed-source internal project where you have control over the environments it will be used in. But it would be wise to use something more portable for a widely used opensource project. 
And a SQL injection vector... if(isset($_POST['message']) &amp;&amp; !empty($_POST['message'])) { $data = $_POST['message']; // $return["allresponses"] = $response; // $return = json_encode( $return); $conn = getdb(); $user_pro_info = "INSERT INTO messages (message) VALUES('$data')";
Didn't know what to expect with that first slide but not a bad read. You mention PDO as being a successor to the deprecated MySQL database extension. Why PDO instead of MySQLi? I personally use PDO everywhere since why not but I feel like the MySQLi extension gets shit on all the time even though it's safe to use with prepared statements.
Unmanageable? Your only valid responses to this thread relate to some DI stuff and that you can't swap out a logger. When I look at problems in code those are pretty far down the list. But maybe your a god emperor and I am just techno peasant toiling away like an idiot. I'm not sure, but I've never needed to swap out a logger and all the DI related stuff I do is in my own service layer. But again, I'm just a techno peasant.
I didn't even read that far :o
That's a reasonable point. Mostly I just wanted to conserve space and stay on track. I didn't even mention Doctrine or Eloquent ... maybe in a future update. :)
Nicely put together, I enjoyed reading it. Your blog looks great too 
The typical reason given is that you're locked into MySQL.
On the OOP slide, should read “most” and not “much”
If you're only going to mention one, PDO is an obviously better choice than MySQLi, no? Doesn't lock you into a single DB vendor, more widely used, and honestly, I think PDO's support for prepared statements is a lot more useable. Here's how some PDO code: $arr = array(1,2,3); $in = str_repeat('?,', count($arr) - 1) . '?'; $stmt = $db-&gt;prepare("SELECT * FROM table WHERE column IN ($in)"); $stmt-&gt;execute($arr); $data = $stmt-&gt;fetchAll(); Not beautiful, but okay. Here's the equivalent MySQLi code: $arr = array(1,2,3); $in = str_repeat('?,', count($arr) - 1) . '?'; $bind = array(); foreach($params as $key =&gt; $val){ $bind[$key] = &amp;$params[$key]; } $types = str_repeat("s", count($params)); array_unshift($bind, $types); call_user_func_array(array($stmt, 'bind_param'), $bind); $stmt-&gt;execute(); $res = $stm-&gt;get_result(); $data = $res-&gt;fetch_all(); Ouch.
Thanks! :)
check there [r/phphelp](https://www.reddit.com/r/PHPhelp/)
First of all, I must agree that the question is not important at all. But just to sum up the reasons: - Mysqli, being a very thin wrapper for the underlying API, is better not to be used as is but wrapped into a helper library, otherwise it will take you to write a lot of unnecessary code. - Given the similarity to the old mysql ext, mysqli makes it too appealing for newbies to stick to the old ways without prepared statements - Given unintuitive usage patterns with prepared statements, again [mysqli is not recommended for newbies](https://phpdelusions.net/top#mysqli_vs_pdo) - The magnificent idea of the unified database wrapper and much well-thought API makes PDO the indisputable winner. - 
Forcing composer is dumb unless you plan on a open source or public-use extension.
Why You think so ?? nd everyone one needs choir of his Business Dude 
Thank you, Tomáš! I have removed the sentence from the postscriptum. As pointed out earlier, `Makefile` works fine for me, and as I turned my back on Windows in 2010 (after using DOS and Windows for more than 20 years), I don’t care much about these systems. If any of my projects require portability, I‘m happy to use composer scripts. Thank you again for taking the time!
Have you tried [Stack Overflow](https://stackoverflow.com)?
Your own website detects 2 security problems with itself! Hmmmmm....
Hi, indeed. We are actually in the middle of separating the site because of the traffic so security headers will be reset when it's on the new server. About the vulnerabilities, it's because the scanner is fingerprinting according to the software versions on the site (much like attackers do ), and because the latest version of WordPress has unpatched DoS vulnerability, it's getting the hit (even tho it will be blocked by the WAF): https://wpvulndb.com/vulnerabilities/9021 Thanks for pointing it out tho, we'll work on it ;)
I like to use [MacPorts](https://www.macports.org/) instead of HomeBrew to accomplish this, but I might be an outlier. I enjoyed using FreeBSD's ports system, so it was a natural fit when I moved to OS X (which itself is partly derived from BSD). It's a bit harder than some other solutions (MAMP is easier, I'm sure). But it's what I like, and it lets me toggle between PHP versions, so it works well for me.
https://laracasts.com/
Just because the original creator started with C, there is no other explaination. History is always the only answer.
I'd say php being started 3 years before C++ was standardized would have a big part in it.
Let's break it down: $x = session_id; // undefined constant called "session_id", it triggers a notice but evaluates to a string $x($x); // session_id("session_id"); you are setting the session_id with "session_id" null.$x; // you are concatenating null with "session_id", this is just a short way to pass it as a parameter for foo TLDR: it's just abusing that there's a function called session_id that will return the string you told it to return, so it can use the shortest code possible
FYI really bad navigation on mobile (android and chrome). Some slides provided a down arrow to see more of one slides topic, but then ended at "about the author" with the only navigation out being to the right, which went to "spread the word". From there, it was impossible to navigate away at all. Had to reload the page and start over. Pretty much unusable on mobile unless you only click right. But I assume one misses half the content that way. 
I wrote traverser as it written in go/ast and in Nikic PHP-Parser. Everybody can traverse AST struct manually or write own visitor with own logic. How can I make it easier without knowledge usage specific? For example, it can be possible write visitor with methods for every node type, and you would extend the visitor and implement logic only for nodes you need.
Various reasons, but one big thing is that C++ for large projects that need to be able to compile pieces at different times. In C, so long as you follow the C standard, pulling in one module (or extension as PHP has named them) that is compiled with a different compiler is pretty trivial. In C++.......it isn't*. Different compilers generate slightly different names for the symbols that are generated, which means that getting a module compiled with one compiler to work with another module compiled with a different compiler can be annoyingly difficult. Add to that the quality of the C++ compilers in the 90's was really not very good, with lots of compiler generated bugs, meant that using C was far more sane. * Or at least it wasn't when I gave up on C++ as not being productive enough for software development.
If you intend to reuse in other private projects it certainly has its appeal as well seeing it as a composer package inherently will be a self-contained unit and there will be no sneaky leaking into other parts of the app.
From switzerland -&gt; same
Clicking right is not great on all devices either, on my note8 the right button falls on the edge of the display which is purposefully less responsive to avoid accidental clicks.
Interesting, thanks! I‘d be curious on hearing more about your last sentence..
Well ideally you have a DBAL or ORM or something in front anyway. But for small stuff, I'm happy with just PDO by itself. It's very usable. Mysqli is garbage though, don't ever touch that without a wrapper.
Psssst. Don't tell it to any PHP developer, but procedural programming is not that bad. Nor is OOP that good.
Does anyone take care to write only ANSI SQL and avoid all the features of their dbms to keep their PDO usage portable? Seems better to use a query builder that supports multiple grammars if you need that, or just accept that you're tied to a specific database system.
But is it worth $15 bucks a month?
Wow six people think alike. Wonder if any of them can prove a statement that PDO is that bad as a database access API.
In my personal opinion, yes. It's a very high quality learning resource. I've been a paying member for more than two years now. 
I would say most AAA games/engines are written with C++ but the fact is you can combine C and C++ pretty easily
&gt; $15 a month is better than $30 an hour I suppose! That sounds reasonable :)
Any game with Unreal Engine 3/4. 
The real question is why is PHP not written in Rust.
Does anyone have any example code of the League\JsonGuard\Validator being used to validate either: i) A swagger.json file conforms to the open api spec? ii) The data returned by a rest end point conforms to the expected format for that end-point from a swagger.json definition ? 
I didn't say the "real reason", but rather the reason given. Most people do stuff because that's what the herd does, and in this case, "mooo, you're locked into MySQL."
Here is a list of threads in other subreddits about the same content: |Title|Subreddit|Author|Time|Karma| |---|---|---|---|---| |[New PHP RFC Draft: Immutable classes and properties](https://www.reddit.com/r/PHP/comments/4y4uz7/new_php_rfc_draft_immutable_classes_and_properties/)|/r/PHP|/u/Jean1985|2016-08-17 18:38:47|1| ---- I am a bot [FAQ](https://www.reddit.com/r/DuplicatesBot/wiki/index)-[Code](https://github.com/PokestarFan/DuplicateBot)-[Bugs](https://www.reddit.com/r/DuplicatesBot/comments/6ypgmx/bugs_and_problems/)-[Suggestions](https://www.reddit.com/r/DuplicatesBot/comments/6ypg85/suggestion_for_duplicatesbot/)-[Block user (op only)](https://www.reddit.com/message/compose/?to=DuplicatesBotBlocker&amp;subject=remove%20user&amp;message=cuntkicker420)-[Block from subreddit (mods only)](https://www.reddit.com/message/compose/?to=DuplicatesBotBlocker&amp;subject=remove%20subreddit&amp;message=PHP) Now you can remove the comment by replying delete! (op only) 
Using `PDO::bind_*()` is kind of a pain in the ass when you need to prepare a query with non-string parameters, but I consider it a pretty minor nitpick.
Thanks but I meant the downsides of "C++ being not productive enough." - I am an "old school" procedural programmer since 30 years now and while i do understand most of the concepts of OOP, I could not yet find an example where in my case (web development) it made my life easier, code gets bloated instead and very hard to follow, much too many unneccessary handlers and symbols are being made. I'm using OOP for the database connection and some modules but that's it. The rest are tables and what we need is efficient terse code. Less lines, less errors is more of my philosophy (and I don't mean less comments).
This has what to do with php?
This is a fucking advert. Piss off.
I see. I don't think it's such a bad thing, in fact it's not a bad idea to fully use the features of your DBMS and then no matter what you're going to be locked in, because every SQL server has unique syntax for different stuff (e.g. JSON columns) and no query builder or ORM accounts for all of them across all SQL implementations. But it's no different than being locked in to MongoDB or Redis or anything else. Hell if you write PHP you're probably not trying to accommodate the few competing PHP implementations so you're "locked in" to the official implementation.
Nice. Won't be using any time soon, but I did enjoy PHP-DI when I used it and it's improving.
You have got quite a bunch of typos in your post - maybe take a look again and fix them?
&gt; If an immutable property contains an object, to preserve immutability, the object that is being assigned to the immutable property must also be immutable. I see this RFC is coming much more from an ideological rather than pragmatic PoV. A mutable object assigned to an immutable public property is a very common situation in the languages that allow it. It allows building complex objects via composition. For example let's say we have a human object: $human-&gt;head-&gt;ear-&gt;hear('Words'); Now notice the human is composed of extremities, and organs, and those organs also have their organs. I want to human called to be able to interact with a human head/ear in a mutable way, but I don't want callers to be able to *replace the human's head or ears*. So this can be achieved by the head property being immutable, but the value assigned to it being mutable. Likewise for ear. Also. You should never forget immutability is most often used as a *workaround to achieving value semantics for reference-based object systems*. It's a workaround. Immutables are very unpleasant and verbose to work with, especially at depth. So if they're a workaround, what's the actual non-workaround solutions? Values with copy semantics. Wouldn't you know we already have such primitives in PHP: arrays and strings. They're copy-on-write. If we could have this: value class Foo {} ... which creates a pass-by-copy value object (instead of being by reference) we pretty much solve the problem we were trying to solve through immutability, without all the awkward "-&gt;withSomething()" rituals you need to use to interact with actual immutables. Value semantics, but mutable. That's what we need, before anything else.
I can see where they are coming from, but I think it will result in more confusion than benefits. For example - what would be the behaviour in this case? immutable class A { private $foo; public function __construct($foo) { $this-&gt;foo = $foo; } } immutable class B extends A { private $foo; public function __construct($foo, $bar) { parent::__construct($foo); $this-&gt;foo = $bar; } } $b = new B('one', 'two'); Using encapsulation to achieve immutability is pretty intuitive and straight-forward, it also gives more control to the user to implement whatever 'type' of immutability they want.
Besides the C++ not being standardized, [some quotes from Rasmus Lerdorf](https://en.wikiquote.org/wiki/Rasmus_Lerdorf) certainly suggest he would have just went with C just because it was what he was most comfortable with arleady, not for any very particular reason.
I am
sweat! I will try this. Hope it doesn't find anything ^^
I'm with you, bud. This environment is a garbage fire
PHP is largely written in C-89, as in 1989. At least, that’s what Sara Goleman explained during PHPBenelux this year. If I remember correctly the reason for this is keeping PHP available on an insane amount of platforms.
How does this have anything to do with immutability? private variables are already scoped to the class. If you meant to write protected, the value of `-&gt;foo` is `'two'` since that was assigned last before leaving the constructor. But even then this caveat is not exclusive to immutability.
I like immutability a lot, but sometimes a class has to behave immutable while not actually having mutable state, like memoizing some calculation. I've written VOs like that in the last week... So I'd consider that extending an immutable class (or implementing an immutable interface) might not require the full immutability but I haven't looked at the details. Perhaps most immutable classes are better of final anyway...
This might be due to being designed as a slideshow - slides with related content are stacked, and require swiping down. It would seem more natural if it were actually being presented, rather than taking the form of a website, but it's kind of a hybrid weekend creation. I tried to make it so that if one only went straight through, the missed content would be secondary. My testing on mobile seemed OK, though, because swipe is supported - I didn't need to use the arrows, except to see if a slide had stacked content. I think I will try to find a way to improve it visually so that stacked content is more obvious (or just not stacked at all), and the site definitely needs a way to jump back to the first slide. Thanks for your feedback :)
I wasn't able to test it on an Android device, but swiping should be supported on touchscreen devices. The arrow buttons shouldn't need to be clicked. Thanks for reading &amp; providing feedback :)
I've used this program for a few galleries. It's simple and lightweight. I've been following this on github. I really like this program. 
This would fit kinda awkwardly into PHP. Why not make objects that work like arrays: you can pass them around seemingly by-value, so you can make changes to an object and it won't affect other places you stored the same value. In order words, I'd like to see optional PHP 4-style objects, distinct from normal objects.
There is no confusion. Private instance variables are scoped to the class, and cannot be accessed externally.
&gt; Values with copy semantics. Wouldn't you know we already have such primitives in PHP: arrays and strings. Wouldn't you know we already had such capabilities with objects in PHP 4. In retrospect (and I was not a contributor at the time) the issue was not our by-value, copy-on-write objects but rather our reference semantics which are still poor. In any case I agree that in many cases value semantics are better than the proposed idea. 
There is [Tagua VM](https://github.com/tagua-vm/tagua-vm), but there wasn't much progress on it recently. Rust developers are still pretty rare nowadays.
&gt; Wouldn't you know we already had such capabilities with objects in PHP 4. Yeah, I somewhat regret PHP 5 made that change. Sure, it's convenient for entity-like objects because you don't need to explicitly pass them by `&amp;reference`. But it takes away the ability to have value object passed by copy. We can still reintroduce it though. Arrays are excellent with copy on write, and we can look to other languages that have both types of primitives (values and objects) for syntax/semantics ideas, for ex. Swift. It has copy-on-write lists, dicts and structs. Our PHP arrays serve as lists and dicts. We're missing "structs" - values that can implement interfaces, have methods, and typed fields.
&gt; This would fit kinda awkwardly into PHP. Why not make objects that work like arrays? You could pass them around seemingly by-value, so you could make changes to an object and it wouldn't affect other places you stored the same value Finally, I see someone else (than me) start talking about this. It's about time that idea starts gaining popularity.
Any plans to support multiple arguments for `empty` in say PHP 7.4? similar to how `isset` supports more than one argument?
PDO::PARAM_INT
[ORLY?](https://3v4l.org/nuCQm)
Does anyone know what the costs are?
If you don’t know how to add files to your exotic complex distributed file system, you shouldn’t be using it. 
First of all. I had no idea what RRD is before your post. It seems pretty old school and seems pretty common in the systems administration space. I just have never seen it used with PHP. Or on web applications at all. I can however give you advice on js charting libraries and visualising large datasets. Ok so as for charting libraries. There are js tools that are free and as good as highcharts imo, although my experience with highcharts is limited. I recommend giving D3 a try. Its very good but has a very high learning curve. So it really depends on the scale of your project and your budget. However a quick google search shows that people have used D3.js to create visualisations of RRD data. So if you are still intent on using RRD then D3 might be useful. http://bl.ocks.org/tdack/eb51f3bedcf80d893171 If you are mixing RRD data with anything else (or if you determine browsers won't handle your large dataset) then I recommend storing all of your data in an index optimized for search. I've had a great experience with Elasticsearch. They have logstash which can ingest all sorts of data into your elasticsearch index. And something called Beats which are lightweight data shippers that send data to logstash. And a quick search yielded a Beats module for RRD: https://github.com/jlecour/rrdbeat There are also a few other efforts to integrate RRD and elasticsearch. Give it a google. If you are using RRD for its traditional usage (monitoring servers) then I would think having server log files and other data sources in your elasticsearch index would be of great benefit. In fact simply indexing your log files with logstash might remove the need for RRD altogether! Ok so if you go this approach then you just query your elasticsearch cluster with PHP using their nice JSON api. Then you can punt the results to your client and use D3 or something simpler like chartjs to visualise it. Then again once you have indexed everything in elasticsearch you can use their visualisation tool called Kibana to do all of your visualisations! So you may not need to develop anything at all! Anyway good luck with it. 
As just explained, you cannot bind offset/limit to a placeholder
I have an extremely hard time taking advice on performance from an article written about Wordpress.
WordPress has a tone of opportunity to be made faster. It's terrible! This post is more about not trusting the fact that just because you have caching enabled, your site can and will probably still be slow. Just because devs don't like WordPress, doesn't mean that it's not part of the ecosystem or influential in any way.
I did. It seems they just execute the RRD parameters directly on the command line and are not using the PHP rrd_create, rrd_update....functions...." https://secure.php.net/manual/en/book.rrd.php While I might also do that, the idea was to keep things inside PHP; otherwise, I would just use Bash directly to talk to RRD.
There's still no ambiguity in that situation.
I would never sacrifice properties for array entries....
Personally, I try to keep these settings in the web server, rather than the application. For a laravel app, I would just have created a middleware and add the headers to response or use App::after. Would be nice with a collection of these CSP headers as snippets.
Implementing properly PHP bugs take time.
I think this "academic" immutability adds little value for PHP. PHP is a code sharing language, an "I'll wrap this around it to make it fit my use-case" language. I'm a big fan of immutability, but not like this. The absolute dealbreaker for me is the extended immutability requirement, it excludes many many many valid use-cases for immutability. For example, immutable collections, pipeline builders, or any other composition pattern can really benefit from immutability. With this RFC, if one wanted to use immutability you'd immediately opt out of any interoperability with other packages. It's not practical. PHP has always been practical.
No, just unapologetic factual inaccuracy, it seems.
What is missing for me is the ability to make member functions immutable, maybe I just have missed it in the rfc. Having methods that promise to not modify the instance they belong to seems very handy. But I would prefer `const` as the keyword over. `immutable`.
How does this compare in performance to eg. what PHPStorm does to analyse its code, which - I guess - is written in Java: https://plugins.jetbrains.com/plugin/7622-php-inspections-ea-extended- ? Would it be possible in the future that a tool like this is able to replace IDE functionality like PHPStorm's in a much more performant way? Also: how does it compare in performance to Nikic's parser?
The funny part about this code isn't how esoteric the argument is, but rather it's faulty. One of the "fun" features of empty() is that the string "0" is treated as empty. So size 0 clothes (which are totally a thing, for babies, etc) would fail. empty() is terrible. Don't use it.
PDOStatement::bindValue()
Yes, and you can't do it on `OFFSET` and `LIMIT`, because no placeholder is allowed there.
Because what—? Wordpress is meant to be slow? Making it fast is not a challenge? Using this logic, doctors would only cure healthy people.
Good article. I want to read more related to Laravel/Symfony and Wordpress.
Nice article. I discussed this with a coworker some time ago tand we concluded that DRY is about finding the right abstractions, not necessarily about code duplication. By DRY'ing up code, one is forcing it into a generalization and introducing conceptual coupling, potentially decreasing flexibility and obfuscating the domain model -- especially when working with complex domains. Trading flexibility for generalization has to be a conscious decision.
exit()
It was actually one of the options but i'm not the one handling the hardware part and the guy who handles it prefers it the firebase way (I srsly don't want firebase), also he has trouble making it work through the webserver, so maybe if i can handle it with firebase, might as well do it. Also, we are using Arduino + an RFID module, not the plug and play kind. 
If you find Laravel fantastic, I bet you’d enjoy Rails even more, as it’s cleaner. Anyway, Laravel is highly inspired by Rails in the good way (convention over configuration, migrations tool, ...).
I consider it a common use-case where a property value should not be changed, while the state of this object _can_ be changed. This would make it extremely useful to have DTOs where you can change values, but not its internal structure, without having to create a bunch of getters/setters. Imo, immutable properties should not enforce the state of the object inside, that seems really silly to me.
That doesn't really make sense though. If size is required, which to some extent it is, and it's empty, then something is wrong. Empty just wouldn't be the appropriate test for this.
Here are two articles I wrote on the topic, should help answer some questions I'm seing here: - https://medium.com/@nicolas.grekas/making-symfonys-router-77-7x-faster-1-2-958e3754f0e1 - https://medium.com/@nicolas.grekas/making-symfony-router-lightning-fast-2-2-19281dcd245b
Just so I am clear, we are talking about this (http://php.net/manual/en/book.rrd.php) right?
Yes. I managed to get stuff working after a few hours of frustration as they are not adequately documented. Even the comments on the PHP book, it seems most people just find how some things work by testing different syntax approaches. Stuff changed between older RRD versions and older PHP versions which is why most examples and codes are outdated today.
&gt; Personally, I try to keep these settings in the web server, rather than the application. Nonces make that difficult.
So, am I correct that, the RFID module scanned a RFID unit, read the string in it, send to Arduino, and the Arduino send the message to firebase, and firebase sync all the Arduino unit with the scanned data, plus your php will then see the changes, and update the centralised database with the updated data?
Here's some example prices: https://shop.ripstech.com/.
FYI: https://github.com/lvht/phpcd.vim https://github.com/lvht/phpfold.vim
Yeah but what is it supposed to even do? What's the point of that?
[PHP's empty()](http://php.net/manual/en/function.empty.php) returns true if the variable is unset or *if the value is not "truthy"*. As Fosnez points out, in some situations zero might be valid but not truthy. Selling baby clothes (or clothes for that matter) are never mentioned though, so I'm willing to cut the author some slack here and assume that size zero products don't exist for the (unmentioned!) fictional product. While empty() is not safe for validating variables that can legitimately have non-truthy values, I disagree that empty should not be used at all. It is a great option for validation as long as you are aware how it works.
You don’t use the composer auto Loader?
Too bad that you can't see all bug types with the trial but I found a few critical bugs for free!!!
You don't get such impression that code duplication isn't DRY violation from wikipedia. Author of the article acknlowledges that he is the one who assumed what "piece of knowledge" means and goes on from that. It's like, your opinion, man. https://en.wikipedia.org/wiki/Don%27t_repeat_yourself
**Don't repeat yourself** In software engineering, don't repeat yourself (DRY) is a principle of software development aimed at reducing repetition of software patterns, replacing them with abstractions; and several copies of the same data, using data normalization to avoid redundancy. The DRY principle is stated as "Every piece of knowledge must have a single, unambiguous, authoritative representation within a system". The principle has been formulated by Andy Hunt and Dave Thomas in their book The Pragmatic Programmer. They apply it quite broadly to include "database schemas, test plans, the build system, even documentation". *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
You can do this can you.... mmmmm
Lets all rollback to php4 where we cab decide if we copy or not ! 
spotted Dave
[maybe they have the same opinion as Linus...](http://harmful.cat-v.org/software/c++/linus)
```isset()``` will [fail on null values](https://3v4l.org/dNJD3). Using ```array_key_exists()``` is probably something most PHP developers learn the hard way. I know I did.
If it’s a required property for your data, you will likely want it to return false on `null`. So in this case, `isset()` would be what you want.
I wouldn't say they're *never* the right choice but I would say there are so many gotchyas with ```isset()``` and ```empty()``` that they're rarely the best solution.
ErrorException : Sarcasm not implemented.
I believe this is from the now deprecated PHPOffice lib which was has been around for a long time.. so probably a good amount of legacy code.
Influxdb is à good alternative too RRD, graphite is another commonly used alternative (with grafana)
PHP over FPM/CGI should work with MPM worker. What kind of problems are you experiencing?
That's odd, I didn't see Eloquent anywhere in his post. But I agree. WordPress is a perfectly adequate tool for creating robust unified APIs.
Stellar work 👍
PhpSpreadsheet is the BC breaking update of the old PHPOffice/PhpExcel library and was just released at 1.0.0 in December. The library documentation is far better than the blog post.
Is this comparable to the concept of https://github.com/facebook/jscodeshift ? I.e. a codemod for PHP? Wasn't exactly clear from just the docs. However, I Hope so :-) Have been waiting for such tools. There's always this odd moment where you only can get so far with regexing etc. Though I've to admit, with PhpStorm/bash/vim regexing I was able to overcome the most annoying refactors in the last three years and they didn't took me more than 30 minutes. Still, very nice! 👌
Technically curious question: can you/do you plan to take advantage of GOs concurrency primitives? I don't even know if that makes sense in the context of parsing PHP, sorry if it's a stupid question.
Whenever someone needs something they can open in Excel I usually just give them a CSV file. Although somewhat recently I got handed an Excel document with rows colored to give them meaning, and of course CSV does not retain color information, so I used PhpSpreadsheet to parse it into a JSON file I could work with. Current project at work is a legacy site that uses [ext-fdf](http://php.net/manual/en/book.fdf.php) to generate XLS files from templates, someday that will end up converted to use PhpSpreadsheet, I think. It looks like it's not available for PHP 7 on pecl.
That's just an example. What could happen in real apps is that a constructor is removed somewhere, and some evaluation is completely skipped. Luckily, this kind of "optimisation" is now gone.
In what cases would ambiguous validation be preferable to strict? Honestly asking.
I honestly didn't read the blog initially because I already have a working solution for this problem, but I guess at some point I should update some of my older apps to this provided it's sane.
https://laravel-news.com/laravel-5-6
They offer a free "[laravel from scratch](https://laracasts.com/series/laravel-from-scratch-2017)" series that is actually quite expansive. Since you're already an experienced programmer, in my opinion it will be more than enough for you to understand the workings of Laravel, especially if you've used any other MVC's before. 
Oh lord... again? I'm still on 5.4! Get a break!
It's a 10 minute update... 
It happens on a regular 6 month cycle... nothing really surprising about it...
Elk is?
10 to 30 estimated, but it's important to stay up to date. Seems like it doesn't have any real BC breaks this time, so maybe Taylor is learning and deprecating stuff at least 1 "major" version ahead.
When it comes to Excel reports and performance there is nothing like native libxl library and php extension php_excel. It can write hundreds of thousands of rows per second https://blog.mayflower.de/4922-Performant-Handling-Excel-Files-PHP.html Unfortunately the license is not cheap...
I understand your point. A counterargument can be found in C++. In C++ so-called "const" is not transitive. In D it is. It is regarded as a mistake in C++. Because it's impossible to enforce thread-safety without transitive qualifiers. Of course the situation is different than PHP because const can also be used on variables and function arguments, and is checked at compile-time. (plus multi-threading is not common in PHP) 
Like literally at the top of that page: &gt; ELK Stack (Elasticsearch, Logstash &amp; Kibana) 
Yep. My blog, my opinion. Otherwise: I didn't say code duplication is not DRY violation. I said that code duplication doesn't automatically mean DRY violation. Even the author of the Pragmatic Programmer (Dave Thomas) says that DRY goes beyond code duplication.
Thanks for the link!
Nice saying!
You're welcome :)
That's a valid point. I didn't know about the size 0 for clothes. I don't have baby, that could explains a lot :D
&gt; Arrays are not allowed to be assigned to immutable properties. I don't really get that one.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
dear mod. i have a question why my post was deleted. 
im not spam.
Here's an [alternative](https://github.com/mikefrancis/laravel-secureheaders) I made a while ago, which just acts as a Laravel wrapper for the already popular [aidantwoods/secureheaders] package (https://github.com/aidantwoods/secureheaders).
DRY going beyond code duplication means to me that there are other things besides code duplication which are considered DRY violations as well, not that code duplication alone isn't DRY violation.
Safety is an interesting topic and I do see value in being able to do something like, say: safe function foo() { // Side-effects are forbidden recursively here } But it's also quite exotic for PHP. As you say, threads are not common. Not only are they not common, they're outright not supported, and the couple of extensions we have are just experiments for the bold and brave to use (I just use forks and separate processes when I want multiple threads, which means I never run into safety issues). But the RFC mentions value objects, and talk about encapsulating public properties, without addressing core use cases, so I believe this RFC would set PHP on a wrong path towards poorly imitating Haskell, which... is honestly such a hilariously poor fit for PHP. We can do much better than this.
Just enforce a minimum version of the reference library. It's so much simpler for everyone.
I never said that code duplication alone isn't DRY violation. I said that code duplication can be DRY violation, but not necessarily.
Very nice explanation as to why DRY is not about code duplication. However I would add "abstraction" to the list of things DRY is for.
I am all over that! I don’t have a lot of experience in MVC, except that one time i made an MVC for vbscript... I’m just looking for a mid-level guide that explains the technical basics. I’ll check it out! Thanks!
If this algorithm would be the recommendation, why not make it the default algorithm ?
why isn't it possible to just get the diff from the result? the only way to get to the results is to pass a callable and process the results immediately?
You can create issue on GitHub if you need this function.
Also, where is the PREG doc speaking about MARKERs ? That's the (*:xxx) thing that is used to identify which route matched.
Been using php for 7 years and I’ve never heard any of those words before...
 $object1 = (object)['foo' =&gt; 'bar']; $object2 = $object1; $object3 =&amp; $object1; $object-&gt;foo = 'baz'; print_r([$object1, $object2, $object3]);
it's in the first article: https://medium.com/@nicolas.grekas/making-symfonys-router-77-7x-faster-1-2-958e3754f0e1
Thanks for feedback, I've added the "AST" to title. Jscodeshift is AST, so yes. Codemode was rather regulards IIRC. "...they didn't took me more than 30 minutes" Same you could say about downloading zip files from repositories 6 years ago ;) why do it manually, when composer can do it for you. I'm fast as well, but tools can do it for me. Also this works while I sleep ;).
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Well, it's certainly shorter but that's mostly because the long version is a poor solution for recursively moving through an array. But what sticks out like a sore thumb is the classic mistake of validating what an object *isn't* rather than what it *is*. As a developer, I'm not left with an explicit understanding of what those values should be. A non-false boolean? A non-zero number? A non-empty string? A non-empty array? Who knows.
&gt; All those principles where holding me back to be productive and efficient. On the other hand people often use the same statement as a crutch to justify bad code. Find a middle ground but don't let one extreme drive you to the other.
Typically one would use empty() as a simple sanity check *before more specific validation*. It's the same as with isset(), except you don't have to worry about triggering warnings.
upgrading *any* piece of software strikes fear into my soul 
Specifically, `5.7.0` contains the issue that causes this. But, if you got hosed in the small time this was active as `next` and you're using a vm like vagrant/homestead, you can just destroy and recreate it. They reverted the patch that caused this in `5.7.1` and announced it already: https://twitter.com/npmjs/status/966728609346945024 This was even published in the link when this thread was posted.
https://github.com/npm/npm/issues/19883#issuecomment-367680190 The bigger concern is: * They're tagging before the release is ready, but marking it as pre-release * The downstream software is not aware of pre-release status, and just upgrades before QA is finished Either one of those in isolation is fine. It's the overlap of both conditions that concerns me.
Vue 
&gt; why do it manually, when composer can do it for you. Touché! :-)
banana
fruity pebbles
We had a Pi setup at work which was really basic. Just boot, wait 10s, start Chromium with a URL parameter in kiosk mode. Took the guy well over 8 hours to setup. We wanted the annoying, "Looks like Chromium didn't shut down alright" message gone. One extra boot flag. He thought it'd be good to update arch Linux (why would you even want to run that on a Pi..) while he was at it. Completely ruined it. Had to reformat the SD card and have someone else do it. I fucking hate updates. People dismiss the warnings and cautions like it's nothing. "It's just an update, it's just a minor version, it's just a patch version", and meanwhile you're entire system could go fuck itself.
Just some feedback here. I enjoyed the NYC conference and will probably be doing this one as well as I've heard good things about Nashville. However, I won't be doing the workshop. They are too basic. The workshop should include more advanced concepts.
Ah I use Symfony I'm safe
This is why I really like [nvm](https://github.com/creationix/nvm). I can't be bothered to learn how to properly admin a node.js install for a server when all I use it for is compiling assets. NVM lets me just run whatever node version will actually get what I'm working on to run and not have to manage node globally.
Except that sometimes they do. Go was initially written in C and through automated tools, it was itself rewritten in Go. 
Oh, thanks, I didn't noticethe link. Damn, PREG...
Please don't use xampp, instead use Vagrant -&gt; Homestead. 
None of the flags will disable that one, though some are named as though they would. You need to change the shutdown status from some json file in your home directory.
There is a flag that does it, if I recall correctly. Was some trial and error, and indeed lots of falsehoods out there. I could figure it out if you'd like - but I'd have to ask what my other coworker replaced it with, because we sure as hell wouldn't let the same guy do his Arc Linux bull again
If it's not too much of a hassle, it'd fix a sed hack I have in one of my personal projects.
That's why immutable servers are a cool concept. Instead of upgrading the production server, you build a new one with the new tools. If it passes the checks you can swap it out with the old out and go about your business.
Disclaimer: I don’t like WP. But the article talks about optimizing within the context of WP, so the author isn’t wrong.. although the writing is kind of all over the place. 
It's a blog post. Most company blogs try to promote something in their articles.
I want a damn flying car that flies itself and feeds me now, instead of a shitty road car and be stuck on the highway. This is what you’re saying.
"N" is pretty cool too :) https://github.com/tj/n
I didn't even say I *want* anything, so you're very far off from successfully representing what I'm saying
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
It's not different from 3.4 flex
&gt;The example does not just check for an array key -- it checks to confirm that a value can be accessed at all without generating warnings or errors. Not true. 
This is effectively the docker deploy strategy.
&gt; Argon2id is only available in reference library &gt;= 20161029. The versioning here drives me up the wall. They go from minor comment changes to breaking changes with no indication in the version number.
How fast does this run?
Everything in 1 method in 1 class? Might aswell not bother with classes. Write some tests and split up the code a bit. 
This is why I never used NPM package manager. It tries to do too much, and use directories it shouldn't be touching.
Is it possible for me to contribute towards the project in github
I'll write some tests up tonight, and split the code up. I'm likely going to actually extend the library to work with more of Troy's services (HIBP, etc.). Thanks!
If you know how github works, then yes. Fork the project, and apply your changes, then make a pull request.
&gt; All popular ... and web browsers like Mozilla, Chrome, Internet Explorer, Safari etc, support PHP. Browsers generally do not support PHP. The listed browsers support the HTTP/* protocol response generated by your server and php scripts.
That's what do almost every compiler out there: compiler being able to compile itself is an important milestone, it's an important part in the way to achieve the compiler bootstrap.
The workshops are split into beginner and advanced sessions. What sort of advanced concepts would you be interested in?
Learning PHP requires none of the listed requirements
What about the fact that you have to use sudo to run certain NPM commands? It got me thinking about the fact that I have to use sudo when I run `composer self-update`, too. I'm not a Linux expert but wouldn't it be better to install this kind of tools in directories that are owned by the user instead of root? I have opened an issue for the Composer documentation (https://github.com/composer/composer/issues/7132), feedback is welcome.
https://wiki.php.net/rfc/password_hash#updating_password_default - Any new algorithm must be in core for at least 1 full release of PHP prior to becoming default. So if scrypt is added in 5.5.5, it wouldn't be eligible for default until 5.7 (since 5.6 would be the full release). But if jcrypt (making it up) was added in 5.6.0, it would also be eligible for default at 5.7.0. - The default should only change on a full release (5.6.0, 6.0.0, etc) and not on a revision release. The only exception to this is in an emergency when a critical security flaw is found in the current default. - For a normal (non-emergency) change in default, an RFC shall be issued for the update of the default algorithm, following normal RFC rules. 
Nice work!
Didn't know about that. Thanks! 
Your passwords should be stored with a salted hash. How would that work?
Very cool. Added to my ridiculously long “want to learn” list...
Love PHP School. The CLI lib is awesome.
Next would be to integrate it with `symfony/console` and/or `illuminate/console` Then it would be very awesome :)
I'm assuming this is performed when a password is entered for the first time, or changed. One could then warn the user I presume? Really though, for most websites, I don't think it would help. Having to explain the situation to the user would only alienate the people that need it most I expect.
&gt; Symfony 4 Flex Thank you, i'll give it a try.
No worries, it can be as small or big as you want it to be :-) 
Actually there is a flag that disables it. `google-chrome --kiosk --no-default-browser-check --allow-running-insecure-content --disable-infobars --no-first-run &lt;your-url&gt;` That'll stop anything popping up over your page.
At the bottom under "Integrations": - [Symfony Console](https://github.com/RedAntNL/console)
I don't think calling out to a remote service with your users' passwords is a good thing to encourage (even if in this case Troy is trustworthy).
To me bad code is code which is not refactored. It's okay to write bad code... but there is no excuse to not refactor it as soon as you see it's bad code. Often it's just after writing it / writing your test. 
Nice! Well, the readme was a bit long, so I just skimmed it, but thank you, now I dont know what I want to do in the weekend :)
/u/phordijk's answer is correct. To elaborate a little further however, PASSWORD_ARGON2I isn't eligible for DEFAULT until 7.3, and PASSWORD_ARGON2ID, assuming this RFC is approved and merged into 7.3, wouldn't be eligible for DEFAULT until 7.5. The nice thing about PASSWORD_BCRYPT is that all the code for it is self-contained into the php-src tree, without any external dependencies. It's going to take some time for Argon2 to gain greater adopting since it requires a separate library to be referenced. For Argon2 specifically to be considered for DEFAULT we'd probably need to include the reference library into php-src to ensure _everyone_ could use PASSWORD_ARGON2* out of the box. There's some politics involved in bringing in other libraries into core that need to be considered for that process. With the right arguments and adoption rates we could make it happen, but don't anticipate seeing it as DEFAULT for a while longer. If it proves to be the right decision however, we'll get there.
It doesn't send the full password. It takes an SHA1 checksum and sends the first five characters of that checksum to his k-Anonymity API. Then, it returns all results and performs all checks within the library. At no point is any password ever transmitted in full.
oh wow, this is really cool
`sudo npm` nope. Stop that. At this point NPM seems to have such a poor track record of behavior/bugs/crazy errors that nobody should ever trust it with root privileges. Hell, you shouldn't even use it to install node packages in a place that requires root privileges IMO. Put that shit in a better place. 
I'm sure pretty quick, however there's an API limit so I wouldn't recommend hammering it too hard.
1. No tests. 2. Your requirements are wrong since namespaces were introduced in PHP 5.3. 3. I wouldn't bother supporting EOL PHP versions. It doesn't really matter for your library though since it's so small it fits into a single class.
My understanding is that the rate limit was disabled in this v2 API?
I'm getting some tests written up later today. I'll also fix the requirements.
The password is hashed as SHA1 and the first five characters are sent to the PwnedPasswords API. The API then returns a list of hashes with those first five characters as a prefix, and they are tested within the library to see if any hashes match the hash of the given password. I'd run this when a user submits a new password, either on registration or on change password, and while I wouldn't disallow using the password, I would perhaps show a warning about it being *less than secure* (for lack of a better phrase).
Haha I know what you mean ^^
It's not my work! But I thought it would be good to share :)
 &gt; I have to use sudo when I run `composer self-update` Only if composer is in a location owned by `root`
Absolutely! Then thanks for sharing!
Yeah, much less readable, my IDE doesn't recognise it as a function and I no longer get argument hints. At least I don't have any of those pesky variables though right?
&gt; Scalability: &gt; It has a quality to grow your site and attracts the traffic. It has an ability to bring most of the people to your site. &gt; The ability of PHP supporting all major web browsers makes it even more scalable. WTF. Is this a !#%&amp; joke?
&gt; Scalability: &gt; It has a quality to grow your site and attracts the traffic. It has an ability to bring most of the people to your site. &gt; The ability of PHP supporting all major web browsers makes it even more scalable. WTF. Is this a !#%&amp; joke?
bloody hell.
You mention a few times that abstraction causes unnecessary tight coupling. I have to disagree with you. On the contrary, abstraction means **avoiding** tight coupling by definition. When you take common code and "combine" it (to use your terminology), like the example you gave with the Shipment/Order Time date calculation, you're not *abstracting* but *extracting*. I agree that *that's* bad. Abstraction would be creating a common mechanism for calculating _any_ arbitrary date. You might, say, create a trait with a `calculateDate($timestamp, $duration)` method, which instead of using a hardcoded string with "now" and "day" as being unchangeable, would allow you to use an integer timestamp and an integer number of seconds as duration. This **decouples** you from using `DateTime`, from adding just "days" and from adding from "now". tldr; Abstraction != Extraction
I stopped there also. really weak post
Sure thank you. After 2 years of working as web developer I realised how badly I have contributed to the community. Time for contribution. 
Downvote this to hell
Indian shit, why you take this serious? 
auth0 ?
Good work. Strange though that people want to emulate GUI in CLI.
Method chaining itself is a bit dangerous, but having no code completion with custom chaining? Your successors will not thank you for it 😂 nice idea though!
Can it do stuff like progress bars? If so I may just add it to my framework, I've been looking for a good CLI package.
Didn’t look at the code yet, but the readme and API look great. Going to keep an eye on this one! Does this use/depend on `ncurses`? I thought doing this kind of thing was practically impossible without it, but I didn’t see it mentioned. 
Well now you put me on the spot. One idea is doing stuff with non-cake core code like here: https://github.com/FriendsOfCake/ I likely fall into the trap of rolling my own when I could've saved time by using something off the shelf. I'm sure other developers do the same thing. This might not be advanced per-say, but for people attending that have been using cake for 6+ years like myself, they would be more likely walk away with useful information.
# **Managing** —-
Why gaming uses only one m while programming uses two m ?
I've developed some helper functions, with a progress bar included, feel free to look at it. https://github.com/MarcBrillault/helpers/
Since I had no idea what RRD was: &gt; RRD stands for Round Robin Database. It is a database for collecting all kinds of data against time. The “round robin” stands for the fact that only a certain amount of “data points” can be stored. When we reach the end of the database, it will wrap back to the begin again. This means that RRD database files will never grow in size.
&gt; Speed like anything is what you put into it. I don’t think its possible to simply install Anything and have a sub 40ms response time. It’s ridiculous to think that. Really weird defense of the performance.
Great fit for one of my apps. Thank you for sharing!
Mmm, love me some PCI and GDPR
If you have a team of developers, why are you asking the PHP community? If they are capable of developing it, they should be able to tell you what can and can't be done.
I see 3 options for you: - Learn to trust your Indian developers - Find a technical co-founder who can manage your team of Indian developers - Hire a local trustworthy developer
I'd be delighted to have your comments. 
asdf
That makes sense. From the title I assumed you wanted to inform your users about a data breach on a later date. Tying the sign up process to external api is a little to risky for me. It could be an option if they can make a additional check if the password they use on every website has been breached. The other question would be if it really is insecure to use a breached password if it is not used with the same e-mail? 
I see other projects of cli with nodejs and they never look like screenshot, at least in linux, screenshots looks from osx
I feel like this just makes a better argument for scalar objects.
Why is it strange?
Nope, it's not ncurses, we draw it all manually. We didn't want to rely on an extension.
no sweat, life happens. It's never too late though!
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I'll never sudo-npm, just use nvm and you're set
Ha... javascript people are a little fearless in that aspect. Always the latest shit.
I just use Yarn .... Then again i may be an idiot and not realize yarn is just a wrapper for NPM ... ???
I don't recall seeing an RFC for it. Sadly you can't fix this in userland, because of how empty is able to short-circuit lookups you can't do in userland without yielding notices.
Auth0 is similar, as is Amazon Cognito. If you're looking for something open source, there's [IdentityServer](http://docs.identityserver.io/en/release/). It's a .NET Core app, but it's easy to set up and since you can easily set up OAuth2 or OpenID Connect clients, it's pretty easy to use it to dish out auth tokens for a PHP app. 
Yes my frnd...... I have a team but they are just experienced only about 1-2 years &amp; all their professional life they haven't thought of making this..... They haven't seen something like this.... That's why I was more intrigued for having help from you guys to share me with some lil direction so that they could at least try. Thanks anyways bud
I trust them already buddy.... It's just that i had this weird idea.... But as m absolutely 0 in developing knowledge thats why i was looking for some guidance over here so that I could use that guidance as a morale boost for my team so that they feel motivated to be able to do it. Alas it's not that important whether that module gets implemented or not.... Its just random idea. I'll see what other people can bring up for this.... Thanks for stopping by &amp; dropping a comment buddy. Appreciated. 
Well, there are many ways you can go about it. It depends on the taxonomy of pages that is already in place, what meta data is available and if for example you have a list of jargon used by your area of expertise, they can use to create matches with. I think the easiest approach would be to normalize articles into a small list of words weighted by the number of occurrences in the article and meta data and then find up to five of the closest matches with already existing articles. You then store those matches with the article in question and you're done. Of course that is a really simplistic approach, which may or may not work for your needs. If you need better results, you should hire a more experienced developer with leadership skills.
That sounds... super unpleasant - but I'm a huge fan of not needing to screw around with that extension. Tried it myself a couple years ago, and never again. Props for figuring it out!
1. No input validation - I don't think that blank password value is equal to insecure password (which would be the result of execution). Maybe some `\InvalidArgumentException` (or better - your custom exception extending `\InvalidArgumentException`)? 2. No api connection error handling - you should check status code of response and react to them. In your code, when api returns e.g. 404, `$passwordArray` is empty and again it doesn't exactly mean that password is secure or not (again - some `ApiConnectionException` would be needed). 3. For such a simple request you can use `file_get_contents` which frees you from `ext-curl` dependency.
I’ll add in some exceptions for invalid arguments and improve the handling of arguments. I’ll also put in some checks around the API to ensure we’re actually getting a valid response. I was going to use file\_get\_contents, but I was under the assumption that the behaviour of it is affected by allow\_url\_fopen - I could check to see if it’s allowed and use that instead of curl, but what about if it’s disabled? Or am I just confusing myself?
&gt; morale boost for my team so that they feel motivated to be able to do it just get some actual developers and pay them lol
if I ever have to take over legacy code using this bullshit, I'll find you and I will say mean words to you
How often does data change and how often do you need it? You could make 3 request per second (2000/600 = 3.3) amd have it always running. 
Beat me to it
What kind of requests are they? Is it from one instance, or from several? Do they need to be real-time, or can they be queued for a couple of seconds?
If they don't need to be real time, you probably can have your own queue pool, that whenever you have a new request, throw it into the queue. Then, run one or more workers clearing the queue, and whenever the service says stop, stops and wait exponentially and start clearing again. Rinse and repeat. If the service does return you the remaining calls in the header, you can also make use of that info to auto stop/slow down without stressing the service. Like for example if the remaining is 2000, clear 200 per run. If remaining is 50, clear 1 per run until it recovers. Whatever is easier :)
Wait, no one on the entire team has more than two years of experience? No matter how good or well intentioned they may be, you"re missing important skills from that team. Try to find someone with _at least_ five years to add to the team or to replace the next person who leaves.
Sorry, but can someone explain to me why I should use Smarty over using plain-jane PHP?
came here for the answer. I'll wait :) I'm a designer so HTML templates with simple dynamic smart tags makes sense, e.g. in my CMS: &lt;div class="categories"&gt;{$category_links}&lt;/div&gt; but loops and arrays is sortof what you expect to be handled by PHP. I have been tempted to go there but so far the only logic I've added is an if conditional statement: {{ if($category_links) &lt;div class="categories"&gt;{$category_links}&lt;/div&gt; }} I have email templates for example, when an order is placed, so you do need some way of not showing things that are not relevant, like if shipping ...
I'm not sure which side you're on (pro PHP or pro template system), but regardless, the same can be achieved using PHP: &lt;div class="categories"&gt;&lt;?=$category_links?&gt;&lt;/div&gt; &lt;? if($category_links): ?&gt; &lt;div class="categories"&gt;&lt;?=$category_links?&gt;&lt;/div&gt; &lt;? endif; ?&gt; &lt;? foreach($links as $link): ?&gt; &lt;div class="link"&gt;&lt;a href="&lt;?=$link?&gt;"&gt;&lt;?=$link?&gt;&lt;/a&gt;&lt;/div&gt; &lt;? endforeach; ?&gt; 
It's not a defence. It's fact. If you do nothing and your api has a 40ms response time then good for you. But no language in real world scenarios will get those results.
Cloudfront will cache and compress responses and server it off of their server. So yea. It's much faster. I never mentioned eloquent at all. 
Honestly, anytime you start trying to use some technology to simulate another, you're doing it wrong. I would look at [GraphQL](http://graphql.org). One of it's first features is being able to get multiple requests with just one request.
Getting back into some coding and having a blast. 0) What’s the major diff between 5.x and 7.x (and 6.x!?). 1) My current hosting seems to be something like 5.5. Am I missing anything? Thanks
This is some way of doing it....kudos
Hmmmm...... Planning it braahhh
I’m a big fan of auth0. Well documented. Error logs, many different SSO methods.
I can grasp two reasons rapidly, but Smarty [has an explanation of why](https://www.smarty.net/why_use), and yes, it says "Smarty is clearly not meant for every project" and "there is no right or wrong answer: every development team has their own preferences for managing code and templates". My two cents: * [Template inheritance](https://stackoverflow.com/questions/40144432/template-inheritance-with-plain-php), that Smarty, Twig or Blade have for a reason. * When you scale to a lot of template files for your website 
Take a look at Gearman. It can do standard background jobs but also supports creating multiple jobs in a batch and getting the results synchronously.
I recently discovered [`rtheunissen/guzzle-rate-limiter`](https://github.com/rtheunissen/guzzle-rate-limiter). You might find it helpful for rate-limiting your outgoing requests. 
if you use something like AMP or React PHP you can implement it exactly like that, you have a variable that holds the request you have done and a time variable that saves the time of the 1st request, and you simple have a while loop that checks whether you still can do requests (i.e. &lt; 2000) otherwise it just loops until you hit the 10 minutes, then you reset both variables and do it again. 
I have got to ask OP: why the repeated trails of dots (...) at the end of sentences? It reads like a cloud of apathy and annoyance is hanging over your head while writing this. 
What did you decide to go with in the end? 
alot of [new features](http://php.net/manual/en/migration70.new-features.php) have been added to php 7.x such as scalar type hinting (finally) and return type declarations, and the performance has improved drastically (PHPNG) imo i would say you are missing alot and should consider [migrating](http://php.net/manual/en/migration70.php) to php 7
We are not building something huge..... The developers are doing fine. But as we all know that some things would be left apart no matter how good talent you hire. 
You can use a combination of [Artax](https://github.com/amphp/artax) and [`amphp/parallel-functions`](https://github.com/amphp/parallel-functions) instead of Guzzle. Artax basically allows the same as Guzzle, but allows other things that are not HTTP requests in the event loop. `amphp/parallel-functions` allow you to easily run a closure in another PHP process or thread (if available). That way you can keep your REST requests with a low overhead via non-blocking I/O and use a separate process for an existing blocking SOAP client, that won't block Artax in the main process. That way you can wait for all responses in parallel.
That's multiple *queries* in a single request, surely? It doesn't tackle OPs problem though, which is about the time it takes to collect the data. 
A cached response doesn't mean your API is fast. That's a scary thought. You never mentioned Eloquent however if you're not using it why not use Lumen? You're going to have a heap of services to disable in Laravel if its only going to be an API.
That only works if all requests are against the same API. Eg: * Request object A from API 1 * Request object B from API 1 It won't help at all if they are separate API's. Eg: * Request object A from API 1 * Request object B from API 2 It's not totally clear what situation OP has. 
Huh, and you use that on your CI server?
How would you propose splitting this up? Into what components? Genuinely curious as it's pretty trivial so I'm not sure how it would make sense to break up.
https://gist.github.com/rainbow-alex/c577bdc119a0aaf74626bc0e9543adbe :D
Why would you use (s)FTP in your CI?
I'm not saying that _I_ would, but I'm saying that if I were at a place that was still using (s)FTP for deployments then I'd rather have some tool automate part of it at least. I worked at a place for about a week before quitting because they were so stuck in the past like this before - they do exist still. I wouldn't use (s)FTP for anything in a normal web deployment stack, and haven't for years.
Great resources and response thank you
What do you use? Just curious. DeployHQ, for one, uses it.
I think it's pretty well explained on the website of Twig (imo the best template engine): https://twig.symfony.com/
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
https://packagist-trends.firebaseapp.com/
https://packagist-trends.firebaseapp.com/
Self-made tool. We have created an application that allows us to see all our applications and environments and we can deploy tags to each environment per application. Then a phar takes over the deployment process. Currently does a git clone, composer install, some config fixing etc, switches the symlink and we're live. This tool is pretty much similar to [Deployer](https://deployer.org/), so we might change are UI to control that instead. However, my personal preference is to build a container and simply deploy that to production. The alternative would be to use a build server and build the application there before moving it to production, which implies that our CI makes the builds rather than the deployment (which is a bad practice anyway). Edit: rsync is 
It’s called schema stitching, so yeah it will. https://www.apollographql.com/docs/graphql-tools/schema-stitching.html **EDIT** https://dev-blog.apollodata.com/graphql-schema-stitching-8af23354ac37
Well that's horrific.
Good to know if you're in control of all your apis and use graphql exclusively. I think op is using 4 external rest/soap apis that they are not graphql.
Magento 2
I will ask you kindly to mind the language. Saying "fucking habit" is not warming me up to give constructive feedback or business advice in the future. Please be aware that good willed people are taking the time out of their day to read your plight and put forth effort and energy to help you out. Writing to me in a familiar manner is neither cute nor absolving you of bad conduct and manners. I wish you best of luck, but count me out if you're looking for help beyond what you've gotten so far.
Windows have no symbolic links.
yes , it is a shortcut 
Didn't know that worked remotely, thank you!
Huh...TIL smarty is still a thing. 
Yea makes total sense actually. And when the PSR for the HTTP client is done, use that to make it swappable?
&gt; This is a serious and problematic issue. However if you are running versions of critical software, like NPM, in production only hours after it's released you should probably reconsider your deployment procedures. The same applies to composer.
Just make it simple: - create a script to scrape and standardise the data from your APIs (one script per API) - create another script that makes the requests to your scraping scripts in parallel using curl/Guzzle (curl_multi), once it gets all the data, do your magic and show it to the user. You get some web-server overhead compared to a job system, but it's much simpler to implement/maintain. I'm using this to scrape about 100-300 API sources per user request (each with 1 - 50 sequential requests) and with an old 32gb dual x5670 cpus server can handle 50 searches / sec (~200k outgoing API HTTP/socket requests) with a ~20-30sec response time (usually slow because of the API response time AND your encode/decode when standardising data, something you need to do with the job systems also) Queues are good when you need way longer processing time for your jobs, something the user doesn't have to wait for. (ex: they search, you give them results, but add a job in the background to scrape more info on that product and return it in the next search. BUT your source api is throttled and you want to server more requests per sec than it allows, assuming you can't cache the data)
Woaaaahhhhh chill dude. Chill. 
seems like a layer on top of basic GIT management, no real difference than doing a `git pull` on your server... Not bad but don't see much promise over something like Ansible.
This one: https://github.com/php-fig/fig-standards/blob/master/proposed/http-client/http-client.md
I'm not sure it's good to see new tools that promote antiquated, suboptimal solutions like this. There are so many better tools and deployment management strategies than ftp. Promotion of tools like these reinforces bad practices amongst our less experienced or more impressionable brethren. 
Pay the API to allow more requests.
this is the dumbest answer ever.
If you keep going over the limit of free service, you have a responsibility to pay for what you use.
if you run an npm script, yarn just runs npm for it. but for package management as far as I know yarn does its own thing.
good idea but i wouldn’t use it in my project :-)
I suppose, I forget shared hosting is a thing since cloud is so cheap these days
Been looking at both of these today - I am surprised by the costs associated with both of them, over 50,000 logins a month or so in both cases and you quickly get into the several hundred bucks a month range. Not exactly a bank breaker but seems like a really strange neiche thing with kinda absurd costs for what it is. The issue I am seeing with the self host options is adding in Google / MSN / Facebook and Twitter is a big job and in some cases like Twitter limited now...
This is the hack solution I prototyped. Basically my last resort.
Last I checked there was a composer package that removes your dependence on a native extension.
It’s called git pull on one server having a shell script that can do rsync to all locations in a split of a second no matter the size of changes. 
It's pointed out in the article but breaking IDEs, or needing IDEs to be more aware for syntax/argument/type checking seemed like the biggest reason against this. Largely seems like "neat" syntactic surgar that's only 'near' because it's new. The initial argument of "it's easier to read" shows the pipes on new lines, you could do something similar with white spacing nested arguments. 
Take a guess. The author is a "wordpress developer". So, no surprises.
The first of the two solutions provided doesn't break IDEs in any way (in fact goes out of its way to get IDE support back). That said, it's hard to space out functions when you have so many needing to be chained together - adding whitespace or new lines isn't always feasible. Take this for example, and imagine needing to chain more higher order functions in the same process: $subdomain = reset( array_map(function($value) { return strtoupper($value); }, explode('.', parse_url('https://blog.sebastiaanluca.com/', PHP_URL_HOST) ) ); 
could be useful for shared hosting setups that don't have git I suppose 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This. Twig is a great template engine and I would honestly prefer if PHP deprecated allowing it to be embedded into html. It can be done OK, but generally leads to some very shitty code. 
Why so complicated? SOAP is just xml over http, why not send the soap xml payloads using async Guzzle? It looks like there are even libraries for this on packagist. https://packagist.org/packages/meng-tian/async-soap-guzzle
Support for this tool suggests that a user can be using git for version control, running (something) in a serious, production environment, and performing incremental deployment, but are too ignorant to learn a proper deployment chain and should just use the simplicity of sFTP. It just doesn't make much sense.
Or you just place the actions on separate lines, works the same, just as readable, no changes to PHP required
??? so what exactly have I been doing since PHP 5, setting the charset to UTF-8, and using unicode characters in the code that worked as intended?
Unless i really missed some big news, PHP functions are *not* multibyte compatible.you can pass the info, for example, from browser to database and that will work because the data hasn't been modified. But as soon as you start modifying data, substr(), strlen() and what more, things go south real fast because these functions don't support multibyte characters and now you need to use the mb library functions
I used to follow this argument, that substr and friends don’t play well with multibyte characters, but I’ve since spent years building a text editor in JavaScript. All strings are UTF-16 in that language and substr and friends really aren’t easier to work with. Unicode is so much more than multibyte characters. The entire notion of what a character is becomes rather difficult rather quickly such that using substr on an arbitrary string becomes eyebrow raising. Many of these multibyte characters combine or modify other characters in interesting ways such that splitting between them is nonsense. Other times whether splitting is meaningful depends very much on what your goal is. Using a Unicode encoding as the default string encoding isn’t that important, I’ve found. It’s important to have a consistent encoding and functions that work with it but the specific encoding rarely matters.
See here: https://thephp.cc/news/2018/02/putting-php-8-on-the-roadmap
Well, use utf8 for storage and transport, use utf32 internally looks like the best solution to me. Either way, it needs to be supported, because the current setup is just crap
&gt; use utf32 internally looks like the best solution to me That depends entirely on what you’re doing. If you’re working with English text then UTF-32 wastes three bytes for every byte with data. That’s the issue: different encodings are useful in different situations. A default that uses a 7-bit encoding isn’t very useful in our international or emoji-using world but PHP does give you the tools to choose an encoding that makes sense for your problem.
No
Laravel uses a couple of Symfony *components*, not the *entire* framework, so you can learn Laravel on its own just fine.
The order you learn frameworks doesn't matter, but knowing more than just one will take you a long way.
&gt; In short, it would take the following line of code, where you have to start reading in the middle and simultaneously work your way out both sides: &gt; &gt; $subdomain = explode('.', parse_url('https://blog.sebastiaanluca.com/', PHP_URL_HOST))[0]; &gt; &gt; And refactor it into the following block, which shows the clear chain of what happens in an easy to read format so you can understand what happened at each stage to get the final result: &gt; &gt; $subdomain = 'https://blog.sebastiaanluca.com/' &gt; |&gt; parse_url($$, PHP_URL_HOST) &gt; |&gt; explode('.', $$) &gt; |&gt; reset($$); &gt; &gt; Now it’s much clearer what’s happening, and in what order. There you go: $p = 'https://blog.sebastiaanluca.com/'; $p = parse_url($p, PHP_URL_HOST); $p = explode('.', $p); $p = reset($p); $subdomain = $p; Where `$p` can stand for "pipe" if you will, a temp variable shorthand like `$i` for iteration. I wouldn't mind a pipe operator, but it's not that important. Also it's not as concise with static methods, and who uses functions in PHP these days? Without autoloading, and with these awkward namespace resolution rules, not many (aside from the built-in ones).
I like it.
Exactly. Considering 1 character can be something like ﷽, most uses of strlen or substr are no longer meaningful.
No, it's not necessary, but you have to use Symfony a few times in your Laravel project. you can find in the internet how to use Symfony
If you never encountered things like dependency injection, request-response approach, routing... I would suggest that you just start with Symfony. Thenew version 4.x is as lightweight as possible so it will take you just a few hours to understand the concept. Laravel tries to oversimplify everything and it’s quite good for a back end developer to know what’s going on behind the scenes. 
I wouldn't really say "oversimplify", but it does simplify things. I don't think it's too much, it's just enough to make it easier to develop with in general, I think.
No
I spent the last 8+ years at a company where the people in charge refused to use any version control. I was only given ssh access in my last 18 months there. It was on a small island I couldn't afford to leave and there were no other web development business I was aware of there that used version control or proper deployment or something other than php/asp/lasso. In my time there I worked on over 100 projects because there was no shortage of older/non-tech-savvy businesses owners that were afraid of hiring a foreigner over the internet so they came to the _only_ local option they had. The world of web dev is not just San Francisco, New York, &amp; London with their college educated developers, sky high salaries, and perfect modern deployment techniques to an armada of cloud servers. If you don't have the time to learn to be your own linux admin so you can solo properly secure, and maintian your own linux installs on your $2 per month cloud servers, then your only other option is shared hosting. Some noobs literally cannot afford the extra money it costs per month to get ssh access on their shared hosting account, thus limiting their deployment techniques. When I did get ssh access my #1 use for git and rsync was to check if someone else had modified a project and not told me about it. My coworkers did not have a single project setup locally for development and testing. Once the css was done, everything else was edited live on the server via auto-upload-on-save. **MANY** of our clients wanted their "SEO guy" to have ftp access to their websites and I had to make cron jobs that ran dry-run rsync comparisons daily to I could keep my git repos up to date with whatever they were changing. The rest of the world is huge and diverse and _far far far_ from perfect and professional.
Hideous
The $p thing is what I use. It's nice for both the step by step debugger and git compare. 
The consensus here seems to be DON'T jump straight to Symfony, and I agree. But it really depends a lot on what your goal is. I assume your goal is to be able to build awesome web apps, and that's why I'll recommend sticking with Laravel in the beginning. Laravel is designed for people who want to get s**t done with a minimum of hassle. It's pretty opinionated, which is a huge turnoff for some people. For others it's a relief. Because too much freedom can be kind of paralyzing if you're not properly equipped to make the right choices. That said, it requires a leap of faith to start building on top of something you don't fully understand. And debugging Laravel can be a daunting task due to its heavy use of magic methods. 
I personally hate this, probably because I consider variables to be implicitly typed. Here $p is a string then an array then a string.
Yeah, I did not expect so many upvotes myself. :)
Initially for personal use. All I got from clients for many years was just FTP access. Nowadays PHPloy is use by thousands of developers and that's just one of the such tools out there.
Hell yeah! :D
Thanks!
You’re free to use different variables. But PHP is dynamically typed. Avoiding this for no reason is just cargo cult thinking. Types are useful when they provide value. Often they do. Sometimes they don’t. In this case they don’t. 
Great article, thanks for posting! Really helpful to understand this foundational concept a bit more. 
But you couldn't make a blog post about that.
As a Symfony user over Laravel, I concur. If you want to use Laravel, learn Laravel.
The problem's not ftp: swapping in a new transport layer would be trivial, and it could even be switchable in the ini file. The problem's the design: incremental deployments are an anti-pattern. There will be points during the deployment when you cannot predict what will happen when a request comes in. Each release should be a build from scratch in a new directory.
Is installing the mbstring and Intl extensions really a big deal? Symfony even provides userland implementations of those that will work everywhere. Then you can use the mb_ or grapheme_ functions as you need them. Sure it would be nicer to have this functionality in the core, but I don't think it's a big problem. the preg_ functions functions also exist and are part of every standard PHP distribution I know, and using the /u flag, they can easily work with code points (.) and even grapheme clusters (\X) - other languages like JavaScript are much, much worse in that regard.
Yes :) Due to the need to add `mb_` and still not every function has a multibyte safe equivalent. For example `ucfirst`. I still see a lot of usage of `strtolower` where `mb_strtolower` is necessary. When manipulating urls for example. 
As a Symfony user, I agree also, no. That said, hopefully you're not choosing Laravel because it is said to be easier, or that Symfony is "old school". (I actually had someone tell me that when they couldn't imagine why I preferred Symfony after evaluating both) Take a short time to evaluate each by building some models and writing controllers around them. Then dig deeper into the one that works best for you.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
From this: namespace Model\Foo; data Person = Person { string $name, ?int $age }; to this: namespace Model\Foo { final class Person { private $name; private $age; public function __construct(string $name, ?int $age) { $this-&gt;name = $name; $this-&gt;age = $age; } public function name(): string { return $this-&gt;name; } public function age(): ?int { return $this-&gt;age; } public function withName(string $name): Person { return new self($name, $this-&gt;age); } public function withAge(?int $age): Person { return new self($this-&gt;name, $age); } } } and much more... YouTube Video Tutorial here: https://youtu.be/MYh1_sydQ5U
User-&gt;email() and User::create()?
You have no proof or at least presented nothing other then your own seriously downvotes opinions on this. Let’s see the articles and research before you go spouting off
`User::create()`. Typically we tend to follow http://php.net when it comes to parameter declaration (Such as [`array_map`](http://uk1.php.net/manual/en/function.array-map.php) or [`PDO::prepare()`](http://php.net/manual/en/pdo.prepare.php)), but you'll notice that http://php.net/ declares the return type *before* the method name, similar to how method declarations work in Java for example. Since PHP7 allows you to actually type-hint returns, I've personally documented them the way I would in code (so `User::create(): void` for example, but I'm not sure that as a community there's a standard around that. `void User::create()` would also be acceptable, since it's easily understood.
In your opinion, what does gearman have over beanstalkd? They seem pretty similar to me. I tried beanstalkd do using the pheanstalk package and it works great. Is it the best tool for what I am doing, maybe not. But I don't see much of a difference between the two.
The bigger issue besides that already mentioend by /u/newPhoenixz is that in PHP (or any other programming language in which you're puttng encoded text in bytestrings) is that the programmer is expected to know what encoding any given text-string is using and always apply the correct special methods to it (Which can be tedious and very easy to get wrong if you ever have to work in 2+ text encodings), and that if any source of text information provides bad data it'll most likely cause buggy behaviour or raise a fatal error somewhere down the line without a clear reason as to why. Attaching encoding information on a string (and enforcing the encoding on any attempt to mutate the string) means you'll get errors as close as possible to the source of the error, and means that checks that you could theoretically do with raw bytestrings manually are now just automatic.
Do you mean for the SOAP request? In that case, do you have an example of your current code to make such a request?
but you need to write a medium blog post about an rfc about bullshit for your resume
First, thanks for such a detailed response. So they approach you mentioned of returning an ID and asking the client to poll us for completion is an idea I had thought up, glad to see others have thought of it as well. It might be worth me prototyping it out out. As for your other questions... &gt; How slow are these APIs? They can take anywhere from 2-4 seconds. Our local API runs pretty fast, under a second for a non-cached request. But when you combine them all together you're looking at 6-10 seconds, which is far too slow. &gt; Are you sure you can't make them faster? Can you not use cacheing? We do cache, we could do more, but there is a limit to cacheing. Inventory pricing changes based on who is searching, the location, and date. So customer * location * date get's big. We can do more here and we will, but we'll never be able to cache everything. Even if we can cache 80%, I can't allow 20% of requests to run like molasses. Are you sure everything has to be done using PHP? No, this is definitely worth looking into. Granted, a ton of time has been invested into our service layer which is all PHP, but if we could ask another language to do some of the requesting with a lower overhead before passing items back to our service layer then that would be fine.
&gt;What could be wrong? &gt;What could *go* wrong?
Correct. These are external third party apis 
Here properties is an array of Property objects from our service layer. Each inventory API implements an interface which must work with these objects. This has made it easy to add new APIs. // local (these one just works with local database) try { $Extranet = new Extranet(); $properties = $Extranet-&gt;properties($properties, $request); } catch(\Exception $e) { if (Configure::read('environment') == 'production') { trigger_error('Error retrieving properties from extranet: ' . $e-&gt;getMessage(), E_USER_WARNING); } } // check foo (http rest) try { $Foo = new Foo(); $properties = $Foo-&gt;properties($properties, $request); } catch(\Exception $e) { if (Configure::read('environment') == 'production') { trigger_error('Error retrieving properties from foo: ' . $e-&gt;getMessage(), E_USER_WARNING); } } // check bar (soap) try { $Bar = new Bar(); $properties = $Bar-&gt;properties($properties, $request); } catch(\Exception $e) { if (Configure::read('environment') == 'production') { trigger_error('Error retrieving properties from bar: ' . $e-&gt;getMessage(), E_USER_WARNING); } } The non-parallel nature of this code makes it unforunately slow though. We just keep adding them into here and its going to get slow :-(
Not sure what might be going wrong, but you could try using passthru() or system() instead of exec, that might help deliver a clearer picture of what's going wrong (I'm not sure if retval works the same on Windows as it does on Linux - but if so, a "0" means success and non-zero means something failed). You might also try passing the command you want to run to cmd.exe or powershell (if there's a way to do that), instead of just running it raw. That might help get any environment stuff set properly. This takes me back to one of my first web tools, a C++-based CGI program that could start and stop ftpd and telnetd on BeOS :)
This is the hack approach that I prototyped. It can be done, but I'm not sure its the best solution.
It actually does work with Guzzle::postAsync and having endpoints with our own API, but at this point thats the solution of last resort.
Fair. I posted a code sample of what I'm doing here, is this a good use-case for ReactPHP: https://www.reddit.com/r/PHP/comments/7zsy4w/question_on_using_beanstalkd_to_simulate_threads/duta9pf/ And here is a jenky approach that simulates what I want with Guzzle::postAsync https://www.reddit.com/r/PHP/comments/7zsy4w/question_on_using_beanstalkd_to_simulate_threads/dutb64d/
Actually in both cases `User::email()` and `User::create()`. For details Refer to the API doc generated with something like phpdocumenter. It shows static and non-static methods differently. But honestly, I think there shouldn't be any static method besides alternate constructors. But I'm an OOP nazi, sooo....
Like i said Gearman has the added ability spin up multiple jobs in parallel and then wait on a return value from all of them within execution of your script (simulated multi threading, foreground tasks). Other than that they both seem that beanstalkd and gearman seem to be functionally equivalent. I would say the tooling, documentation and active support is better in beanstalkd so I personally use it over gearman.
&gt; look how far PHP behind is in cool compared to something like node Thank God
Pretty sure this is the right answer.
Yeah, sure, but what happens if one person forgets once to process the bytes in from the network? Potentially very tedious to work with bugs because they'll only crop up somewhere else in the code when the bad input causes an error or some kind of mangled output. What if someone uses a string method not remembering that the PHP string methods aren't able to handle non-ASCII? Again: weird errors or weird mangled output is likely, and it'll be tedious to track down the issue. Enforcing that string methods require strings with attached encoding information and the constraint the text is actually valid makes easy-to-make and easy-to-miss mistakes instead become automatically-doing-the-right-thing, or an obvious type error at the point where the error exists because you passed a bytestring to a function requiring a text string. **I'm not saying PHP can't be used to handle these things**, I'm saying PHP doesn't handle them that nicely.
Take a look at how PHPStorm creates references to things. I tend to use that style because it tends to be inclusive of namespaces. &gt; PhpStorm creates a string in the format that depends on a symbol at caret. For example: &gt; &gt; \MyNamespace\Catcher for a PHP class &gt; \MyNamespace\Catcher::$name for a PHP variable &gt; \MyNamespace\Catcher::set_experience for a PHP method 
This is pure gold. Thanks for sharing!
That and the lack of factual evidence to back up biased and pathetic claims does
Mmm, in that case, another thing to look at is forking PHP workers directly. There's a lot of ways to do it, but I like the [Forker](https://duncan3dc.github.io/fork-helper/) library rather than trying to handle the PCNTL calls directly. Something like: use duncan3dc\Forker\Fork; $fork = new Fork(); // Placeholder for whatever actually does the requests for you $api = new Api(); $data = []; $data = $fork-&gt;call(function() use ($api, $data) { // Anything should be able to go here $data['call1'] = $api-&gt;call1(); }); $data = $fork-&gt;call(function() use ($api, $data) { $data['call2'] = $api-&gt;call2(); }); $data = $fork-&gt;call(function() use ($api, $data) { $data['call3'] = $api-&gt;call3(); }); $fork-&gt;wait(); // At this point $data will contain the results of // all 3 requests, which will have been run in // parallel. I don't see why that wouldn't work for your purposes. Obviously you need to think about the impact of forking a number of PHP processes, scalability, etc., but it's a pretty simple way to run some PHP code in parallel without a lot of fuss.
This actually makes me want to go back and recreate one of my old text games I had built in QBasic.
I haven't looked into PCNTL because "Process Control support in PHP implements the Unix style of process creation, program execution, signal handling and process termination. Process Control should not be enabled within a web server environment and unexpected results may happen if any Process Control functions are used within a web server environment." per http://php.net/manual/en/intro.pcntl.php Does this library somehow resolve these issues?
I personally don't like specifying functions as strings, it just "feels" wrong. And as others have stated, you lose functionality within your IDE. It's not hard for engineers to allow method chaining if they use stricter OOP and return $this;
Awsome thanks for the insight. I've worked only with Magento 1 + Magento 2, both are a mess to work with, but extremely powerful once you get past the highly customized zend-framework / over-engineered mess - respectively. I've got a feeling that out of the box features even's out once you factor in the long time to integrate even the most simple features on Magento. But there's a much smaller community on any other ecommerce framework. Lately, I've had my eye on Sylius, and will be building a mock project to try it out soon.
This is more correct than the top response. OP specifically asked about documentation standards and this is the answer. We follow php.net. Whereas the top response is simply the function call syntax.
It's basically just symfony with a bunch of compartmentalized e-commerce bundles that work together. It's got semantic ui on the front, and raw symfony on the back. 
Then you're not working with any large amounts of data. In the search/indexing space elasticsearch has become the entry level option for those not wanting the complexity of a hadoop cluster.
Is there a reason an interface or abstract class cannot define a required property? Using accessors is fine and all, but this: `abstract public $foo` Seems a bit cleaner than this: `abstract public function getFoo()`
Pretty cool! Thanks. It'll be be a good use :)
Too many session_start maybe? 
What is funny, other answers mostly agree with me, but using just smoother wording, yet you have no objections. So we can tell that you just can't read. Given that, why should I care for your nuisance?
Have you heard of [Xdebug](https://xdebug.org)?
Is it important to learn driving a Citroën before learning to drive a Chrysler?
I actually meant all the other replies, not your question. If you build the XML for the SOAP yourself, then you have already done the work to do REST + SOAP async with Guzzle, using SoapClient#doRequest in this case doesn't seem necessary (from what I understand of your usage, I can be wrong). RPC is also only over HTTP, so you can send with Guzzle as well. If you absolutely must use a job queue, then Gearman is one that is built for parallel worker execution and getting data back from the same script. The benefit is that you can make the HTTP call using regular (not async) Guzzle or any other client. The downside is that you need to scale this. If this endpoint of yours calling 4-5 APIs is called multiple times per second, then you must have a large amount of workers on stand by, otherwise your initial script will block until the queues get empty and you end up with a solution thats going to be slower then what you have now. This is why I think building for async Guzzle is much easier because you don't have to worry about this scaling factor.
you can develop and host php on almost every os/hardware there is. I can develop php on a windows machine and deploy the code to a linux server or windows server using arm, ppc, x86 etc with ease. Try to set up a rails dev env on a windows machine. 
I tend to use (and have seen elsewhere) :: for both static and instance. It's justifiable, in my opinion - they share a namespace, so it's not ambiguous. Omitting that information isn't any worse than omitting the full signature of arguments. The short hand notation only needs to uniquely identify the function and where to find it; additional information like visibility/static/arguments/return type can be looked up from that.
I wouldn't call that a hack. If you had async calls, or threads, you would have threads returning normalized results from different sources. By using separate processes and async REST calls, you simply abstract threads into async services
... ok?
From community guidelines: "Do not advertise. Unless you are sharing PHP-relevant content, please do not post links to websites that you own or develop. If you're unsure, run it by the mods first."
shameless advertising
Haven't seen this, no. Are these newlines between the cookies really in the response? If they are, that's not even a valid HTTP response.
&lt;3
You know, I'm not a racist, but /r/php is dangerously close to making me one. 
I understand that you think that "abstract public $foo" seems cleaner, but it also forbid implementations to have any different behaviour than the one you have in mind. Think about a cache wrapper for instance : it would have no other choice than preloading asap the $foo value to provide it, preventing anyt sort of lazy loading implementation.
Magic? Didn’t everyone write their own auto loader at some point?
So the idea here is to give a bit of a spotlight to the people working the community (as in: OSS, organising meetups or conferences, writing blogs etc). We obviously couldn't include everyone we met. Also we are pretty aware of the quality of the camera and sound. We are very new to these thing and still trying to learn/upgrade. 
U would be surprised how many people can't launch a PHP project anymore without using some framework :)
That's a good point. I wonder if this lib could be modified so that a new build is created on the remote? Changed files are transmitted from local to remote, and unchanged files are copied from remote to remote. 
I have not heard of atoum before but it sounded interesting. I know this article wasnt a "fight" one but I still find that to be a good google starting point https://php.libhunt.com/compare-atoum-vs-behat?rel=cmp-cmp
Learn Symfony HttpFoundation at least, Laravel's HTTP classes are built on it. Often times when trying to see how something is working with those i end up in the Symfony source code. You don't really have to learn it just reference it i suppose.
Comparing atoum and behat doesn't make much sense; they aren't competitors
Agree, there are not competitors at all :-).
No.
So you would use both? From the article &gt; New competitors, like atoum or Behat, have a good position in the game. I've only ever used PHPUnit but keep an eye on things, I thought Behat was a testing framework as well
I used to but composer has been out for what six+ years now? Once I started using it I never felt the need to write my own anymore. I would imagine plenty of developers with less than 5 years or so of experience have never had the need. You sometimes need to know a bit about psr0/psr4 when naming classes but otherwise auto loading is just something that happens. Which is a good thing because navigating a mass of include statements is seldom fun.
I would not be interested
No, what the point of that? seems completely useless and totally unrelated to PHP.
To be completly honest, I used wordpress for many years and never even knew they unit tested it, let alone that it could be unit tested.
I use Yii, or the built in PHP functions, like htmlspecialchars
It is, but Behat is Behaviour Driven Development (BDD) whereas PHPUnit is Test Driven Development (TDD). BDD is basically like writing documentation that completes tests along the way. TDD are tests that are usually written from the start and I believe tests smaller units of code.
I'm talking about WordPress.com, not WordPress.org. They share many LOC, but still, the infrastructure behind is really different :-).
waste of time
Generate immutable data types with FPP: https://github.com/prolic/fpp Create a file and put this in it: namespace Model\Foo; data Person = Person { string $name, ?int $age }; This will generate the following php code: namespace Model\Foo { final class Person { private $name; private $age; public function __construct(string $name, ?int $age) { $this-&gt;name = $name; $this-&gt;age = $age; } public function name(): string { return $this-&gt;name; } public function age(): ?int { return $this-&gt;age; } public function withName(string $name): Person { return new self($name, $this-&gt;age); } public function withAge(?int $age): Person { return new self($this-&gt;name, $age); } } } YouTube Video Tutorial can be found here: https://youtu.be/MYh1_sydQ5U
It is but it's a different type of testing - I've used it w/ PHPUnit and other tools on the same project to address different needs
This has nothing to do with PHP or PHPFIG. This is some guys brainfart made into a tweet.
no, sure
Agreed. Not PHP-centric. 
Marc, could you do a similar project update on the Propel blog please? 
I'll answer, but I have no intention of debating one vs the other. It's just personal preference. My evaluation was based on going through a video course, and perhaps it wasn't the best introduction. I still saw enough to know Symfony was still the right one for my development style. It's been a while, but this is what I recall off the top of my head: - I prefer Symfony's core forms as opposed to a less standardized 3rd party form component. The course I was using required installing a 3rd party form library. That library wasn't too cool either as the action had to be defined in the template. - Blade felt like a step backwards from twig. It was a little like Drupal &lt;=7's default template engine. Perhaps that is swappable, but again, standards have weight with me - The routing file seemed like a hack compared to Symfony's config or annotation based method. - A simplified directory structure was an appeal, but that is not so relevant with Symfony 4. - Symfony development in PHPStorm is a treat. Laravel plugins did not provide nearly as much framework level integration. That said, plugin support for Symfony 4 has not caught up yet either. There were more, but I obviously evaluated it based on experience with Symfony already and I'm sure my familiarity with it added a little bias. I've been developing since early 2000's and it felt like a modern framework with a few old school practices. Again, it's just opinion, and I could have been more thorough with my evaluation. I saw enough to confidently determine my preference.
&gt; I honestly would prefer some "internal string type" setting, that would always automoatically (and correctly) translate all incoming data to utf32 Exactly what python does, except it uses UTF-8 as the standard [for reasons some guy went over in great detail here](http://utf8everywhere.org/), and seeing as there are times when you dont expect a text string you sometimes need to explicitly attempt to decode text from bytes. x = "foo" # x is a utf-8 string y = socket.recv() # y is a bytestring containing whatever the socket emitted y = y.decode() # y either becomes a utf-8 string, or raises a DecodeError You can definitely work with multiple encodings, though z = socket.recv().decode('utf-32').encode('ascii') # z becomes a bytestring guaranteed to only contain valid ascii characters, or it'll raise a DecodeError citing the problem the socket emitted non UTF-32 bytes, or it'll raise a DecodeError citing the problem some of the UTF-32 sequence isn't representable in ASCII. &gt; . The extra memory required, I think, is a relatively small price to pay. If you make that internal string type configurable, English only sites could always use latin1, so you wouldn't have the memory issue either.. As mentioned before by that link: UTF-8 is a perfectly good default for primarily English/Latin-alphabet-based situations; it'll generally store each character as a single byte, but supports the whole range of unicode code points. Using latin1 or similar doesn't really save any space, but does prevent any of your content using any of a whole range of unicode code points that people may want. &gt; Then have it but convert automatically, just have a function cinver_datatype() or something like that that would cobertores all get and post variables so from that point on they'd be the right data type.. That sort of approach of auto-decoding cripples the ability of the programmer to handle errors, though; if PHP *must* gaurantee you'll never get anything but UTF-32 or whatever out of `$_POST['something']` then PHP is now responsible for deciding how to fail if someone POSTs bytes that aren't decodeable. Most people would really rather be able to define an error-handling chain to tell the user they sent nonsense in a user-friendly way. &gt; Either way, I don't want to have to keep track of the type of string I'm handling for each string that I'm handling, that sounds like a lot, a lot of overhead.. Currently it's the case in PHP you have to do exactly that *manually*. If you ever accept some bytes from a user in trust that they're any specific encoding and you don't manually check it is: you're open to bugs that'll be hard to track, or sometimes even hard to notice until it's too late. But in a system like python3's that standardizes on UTF-8 internally and requires decoding bytes to UTF-8 to get something from a socket or whatever into a string, and require encoding again to emit non UTF-8 strings, the overhead is pretty trivial - if string encoding/decoding is your bottleneck you're doing something very weird for which python or PHP is almost certainly not the best tool. 
I have no intention either to discuss which is better :) just curious. 
with out composer I would be lost. thank god we don't live in a world with out composer slash I wasn't around when composer didn't exist.
Deploying zipped content is a feature request for PHPloy: https://github.com/banago/PHPloy/issues/259 It would be awesome if you could share your solution somehow.
As others have mentioned, lets go over whats wrong with this: No tests (stated, you said you were getting those out, but this should not be 1.0.x with out them) How did you even test it? Your example? // Now we can fire it off to the API. $apiURL = $this-&gt;apiURL . '/range/' . $passwordPrefix; $ch = curl_init($apiURL); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); $passwordList = curl_exec($ch); curl_close($ch); I would have used guzzle here - this seems very backwards. While its clean and concise I still would have pulled in guzzle. Just a personal preference. foreach ($passwordArray as $password) { // We need to extract the password hash. $passwordLine = explode(':', $password); $testHash = $passwordPrefix . trim(strtoupper($passwordLine[0])); // Check the password hash and see if it matches. if ($testHash === $passwordHash) { // The password has been found in the list. Now let's examine if it's been used more than our threshold allows. if (intval($passwordLine[1]) &gt; $maxUsage) { return true; } return false; } } For too much nesting. I would split this up. It's not overly bad but: for if if Seems bad to me. It's some how instilled that one if is ok but multiple is bad. Maybe I am wrong here, but I feel this is messy. &gt; PHP &gt;= 5.0.0 &gt; ext-curl Lets bump that to 7.x because most people don't use 5.x any more, I don't even know of shared hosting that does and if they do I would stay away. I feel like some more thought needs to be put into this to be honest. 
"The code is complex for justified reasons" Installs PHP 5.2...
Yeah, it's pretty cool: + https://make.wordpress.org/cli/handbook/plugin-unit-tests/ + https://github.com/WordPress/wordpress-develop/tree/master/tests/phpunit + http://kizu514.com/blog/write-unit-tests-for-your-wordpress-plugin-using-phpstorm-code-completion/ 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [WordPress/wordpress-develop/.../**phpunit** (master → c6d5775)](https://github.com/WordPress/wordpress-develop/tree/c6d57758405af15369ca902f0244f612bfde1e26/tests/phpunit) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply duuyu50.)
1 billion MySQL tables can't be wrong!
Cache
&gt; "The code is complex for justified reasons" No offense, usually as sign of code smell. Automattic has a public github repo with 454 projects. I doubt any of these would fare well against scrutinizer or any modern benchmark for how one should be writing PHP in 2018. &gt; “legacy” (aka PHPUnit) PHPUnit is not legacy in the least. &gt; "In one line of code, it was possible to mock the get_userdata function." I'm confused, do you not know how your own PhpUnit testing framework works? ``` $user_id = $this-&gt;factory()-&gt;user-&gt;create( [ 'role' =&gt; 'contributor' ] ); ``` 
well done on being a jack ass
No problem.
If you are doing all of these extra features in INI files, why not simply use YAML or TOML instead which already support them?
My code is not open source and so not shareable as-is. I own the rights to it though, and don't mind sharing pieces. The blocker is finding the time to extract interesting code into a useable library. 
I guess I am creating "microservices" aren't I haha.
&gt; use utf8 for storage and transport, use utf32 internally looks like the best solution to me. You're going to need to show your work on that. &gt; the current setup is just crap It's not perfect but for the vast majority of people, they can write applications that consume utf8 or whichever character set they want, and generate utf8 responses. Making a really large internal api change needs an actual justification to be expressed more clearly than "it's crap".
&gt; No offense, usually a sign of code smell Really? ;-) We know that, that's why we are cleaning everything. But still, the code is complex, and it's expected. &gt; Automattic has a public github repo with 454 projects. I doubt any Many of these would not fare well against scrutinizer or any modern benchmark for how one should be writing PHP in 2018. Probably, but this is not the topic. What's your point? &gt; PHPUnit is not legacy in the least. You're removing the context. The context is: We are migrating the test suites to another test framework, so the old tests become legacy by definition. It's not connotated. &gt; I'm confused, do you not know how your own PhpUnit testing framework works? &gt; $user_id = $this-&gt;factory()-&gt;user-&gt;create( [ 'role' =&gt; 'contributor' ] ); This is the framework used by WordPress.org, not WordPress.com. Moreover, I'm almost sure this LOC creates a user in the DB, whilst what we want is to mock a particular function without creating/touching a DB :-).
I'm pretty sure there is a misunderstanding here. I'm just repeating in case of :-). By introducing a new test framework to create new tests, the old test suites become legacy, that's the definition of legacy. Also, I'm talking about WordPress.com, not WordPress.com. This is not the same code base, nor the same tests at all :-). Is it more clearer :-)? Sorry for the confusion.
thumbs up emoji
I'd love to have a tool that would allow me to run "run test" and get docker initialized and all tests executed. If "run dev" would start a working webserver so that I don't have to worry about that, even better. But it would have to work for PHP, node, jvm.. that would be the real benefit to me. I could quickly try a project from github without thinking about setting up an environment.
That was nice to watch, amazed by how many people I recognised from PHP South Coast conference, even people I've spoken to. Unfortunately couldn't make this one, we *might* have left GDPR compliance a bit later than we should of. I'll be there next year though.
Agreed 
here's a silly idea; shove all the config data into composer.json extra :P
See pds-skeleton. https://github.com/php-pds/skeleton
Someone should tell atoum that. https://github.com/atoum/atoum &gt; atoum supports a BDD-like syntax with a lot of structural keywords: &lt;?php $this -&gt;given($testedInstance = new testedClass()) -&gt;and($testedClass[] = $firstValue = uniqid()) -&gt;then -&gt;sizeof($testedInstance)-&gt;isEqualTo(1) -&gt;string($testedClass[0])-&gt;isEqualTo($firstValue) ;
When referring to a public function on a class as a string, Laravel opts for `User@email` That said, I agree with the other comments that `User-&gt;email()` and `User::create()` should be what you refer to them as, especially in documentation.
Maybe you have to work with existing configuration that you cannot change.
This is not laravel’s default
Holy Shit! Is it ethical to post something like this on reddit?
&gt; :-) 
You should get a job in politics.
wouldnt this be more of a webserver configuration issue?
And why are these people storing an .env file under the web root? Crappy shared hosting?
You can also find hundreds of private keys on github; photos people take of their new credit card on twitter etc. 
Jesus!
Lots of publically accessible databases and mail servers on offer there. Just goes to show that these frameworks are not a panacea and that developers really need to understand the basics before deploying production websites. 
&gt; As mentioned before by that link: UTF-8 is a perfectly good default for primarily English/Latin-alphabet-based situations; Until you have a string that has just even one character that has two bytes.. Eiter damn near all string functions would break, or all string functions would be required to independently of each other do a character by character search over the entire string, ensuring that they get to the right position in that case of multi byte characers.. That would be *extremely* inefficient. I agree that UTF16 is a horrible in between solution (which probably is why microsoft picked that in the first place, they have tendency to go with wtf solutions) but I really think UTF8 would be a very bad solution as well.. The "but I use only English!" is a bad argument, because you cannot guarantee that you will only receive 1 byte English characters. The second that you receive something else, everything gets messed up unless, again, every function checks character for character how many bytes each character has. Imagine doing a substr($string, 1000, 10) ? that poor substr would have to check each character just to get to 1000... UTF32 has none of these issues. Need to substr($string, 1000, 10)? that is 1000x32=byte# 32000 until byte #32009, easy and fast. I'll admit that I haven't read your article yet, don't have the time at this hour, I'll do that later tonight. But from my current point of view, I'd be very very surprised if python really used UTF8 internally instead of sense making UTF32. UTF8 is very nice to strip data, kind of like JS minimizing, I guess, so very nice for both storage and transmission. You don't process gzip data or jpeg data either, you first convert that to a format that makes sense.
&gt; You're going to need to show your work on that. I'm unsure what you're saying here.. you mean you'd need proof? From another reply I wrote: The "but I use only English!" is a bad argument, because you cannot guarantee that you will only receive 1 byte English characters. The second that you receive something else, everything gets messed up unless, again, every function checks character for character how many bytes each character has. Imagine doing a substr($string, 1000, 10) ? that poor substr would have to check each character just to get to 1000... UTF32 has none of these issues. Need to substr($string, 1000, 10)? that is 1000x32=byte# 32000 until byte #32009, easy and fast. It takes 4 times as much memory, sure, but how much text do you manage, really? That, and, memory is relatively cheap these days, if you really run heavy websites.. The current PHP development can write utf8 compatible sites yeah, as long as they either don't modify strings, depend on measuring strings, don't care about bugs in there, or just can 100% guarantee that they will only have 1 byte english characters..
Yes, let's blame everyone else about the stupid dotenv practices infecting certain programming communities.
So you're saying configuring your web server to allow access to your root directory should be fine? The above issue is not a Laravel problem, and it has existed long before .env
I just started listing some of these files: https://www.datatig.com/gh/DataTig/Config-Files-In-Git/b/master//d/configs/f/files The data for these is stored in a GitHub repo - please add some more via PR: https://github.com/DataTig/Config-Files-In-Git/tree/master/configs Some services already allow subfolders - like ".github". Also, there are already some standards in other places - the ".well-known" directory: https://ma.ttias.be/well-known-directory-webservers-aka-rfc-5785/ So it would be interesting if a pattern emerged. (But also agree with everyone else that this is not a PSR/PHP thing).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [DataTig/Config-Files-In-Git/.../**configs** (master → a86cce9)](https://github.com/DataTig/Config-Files-In-Git/tree/a86cce99baffbde1df88e7ac65500e22e7ef2d38/configs) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply duvi6gk.)
I'm saying both are a problem. Security incidents are almost always a result of a series of stupid things happening together. Picking them apart and saying "nah my stupid thing doesn't matter, because that other stupid thing made it a security problem" is not an intelligent conversation to have. Keep in mind that `.env` is pushed as a best practice for increasing security, compared to, say, putting those settings in a PHP file. Well, was security **increased** here, you tell me? Good intentions don't count. Only results count.
&gt; the default out-of-the-box behavior of Apache isn't it Apache default to block dotfiles from being accessed?
Randomly just found https://github.com/servo-php/fluidxml - interesting use of symlinks to put the config files elsewhere.
Yeah, let's blame the hammer for not hitting the nail straight.
.env file is a development-only file and it shouldn't be deployed to production server in the first place.
Many apps are safe deployed this way. Many apps actually recognize they're deployed to shared servers that don't allow you to set the public root, or upload outside the web root. Hell, even *WordPress* is more secure out of the box than this. On one hand you have basically most shared hosts out there, on the other hand you have a framework that comes with its passwords and keys in a plain text file. And of course, the framework is 100% innocent! Because it's much easier to change those thousands of shared hosts around the world! Give me a fucking break. An engineer doesn't choose sides, an engineer solves a problem when it's identified. PHP exists as a thing today because of those cheap shared hosts. If apps are deployed to those shared hosts, and a framework requires an incompatible deployment that's at high risk of being insecure when deployed on a *common shared host*, the fix belongs with the framework *first*, and then if you can convince your client, you can get them to migrate to a better host. **Also, you didn't answer my question.** I asked you - `.env` is pushed as a measure to increase security. Did it increase security for those poor bastards showing up in OP's search?
Yeah, let's quote arbitrary short memorable phrases, and pretend that this in itself is a valid argument.
&gt; :-) 
Yes. Security is and active process.
That's not true
Nope. Just `.htaccess`.
Does not make it ethical to do something like this... At least alert the companies and let them patch before doing this.
you can't be serious
Patch what? 
That's scary! I was running around checking all my apps for this issue. Thank god! None is exposed!!
Good point. I don't agree with .well-known, but it's kind of how it happened and unavoidable now if you use LetsEncrypt.
.env is not for security, it’s a convenience to allow emulating environment variables when hosting multiple sites. It’s not meant for production. Also you aren’t meant to have your doc root at the level the .env file is anyway. 
til
Actually he's right, while you can use a .env file in production, you're actually expected to set up environment variables on your server for production, just a lot of people don't get this or just feel having a .env file is easier to edit quickly. You're then support to use an artisan command to cache the configs with the environment variables in them so it won't change automatically and lets you control it etc.
No, Apache doesn't block things like `.env` or `.git` by default, only `.ht*`.
Ah my mistake. 
Their web developer.
I know it's not meant for production. There it is all over the internet in production. Good intentions don't matter. Only results matter.
Saving to look at later
Can blame the documentation, though.
Why would Laravel Forge have a native feature to drop the file to prod for you then? It's not meant to be kept under version control.
Believe it or not, LOTs of people still use shared hosts. I'd shudder to think what would happen if every site was on its own unique IP. Many Laravel devs seem especially keen on deploying each of their sites to separate VPS instances, but not everyone goes that route. And the documentation about that is sparse to say the least. I asked before, I honestly haven't checked. Does Forge even support deploying multiple sites to the same server using name based virtual hosts?
&gt; Until you have a string that has just even one character that has two bytes... Which is why you bundle a string's encoding with the data - either have string functions that select the right implementaiton based on the encoding, or make strings objects with methods that use the right implementation. A utf-8 aware string function will do just fine at doing whatever string operation you care to do, whether it has any multi-byte characters or no. That, or just assert that all strings in your language are encoded in, say, utf-8 and therfore you can always select the implementation for something that works on utf-8 text. &gt; but I really think UTF8 would be a very bad solution as well.. The "but I use only English!" is a bad argument, because you cannot guarantee that you will only receive 1 byte English characters. UTF-8 handles multi-bytes just fine, though, but it works exceptionally well for mostly-English text because it'll use 1 byte per character and it'll be exactly identical to ASCII for strings that only use the subset of ASCII characters. A lot of languages tend to pack well in terms of final size into UTF-8, but even with a lot of multibyte characters: UTF-8 works just fine. &gt; The second that you receive something else, everything gets messed up unless, again, every function checks character for character how many bytes each character has. Imagine doing a substr($string, 1000, 10) ? that poor substr would have to check each character just to get to 1000... That's not true, though. UTF-8 has common prefixes - a single-byte codepoint is going to start with `0`, whereas those that have multiple bytes start with `11`. A continuation of a multi-byte character starts with `10`. Worst case scenario is that you'd have to iterate over 3 bytes before finding the start of the previous/next codepoint regardless of how far you blindly jump into a UTF-8 sequence. The bigger problem with this idea, though, is that it's not quite correct for what you probably mean by 'substring'. Iterating codepoints is easy in UTF-32 as you said, and only slightly more complex in UTF-8, but a **codepoint** is not necessarily what you want to split a string up by. Look at this: s̹̹̟̺͎̼̊̌ͭ̊̓ò͖̯͔̆ͅͅm̖ͤͯ͑̈͌ē͇ͩ ̓t̫ê̹̺̣͎̬̝ͣ̓x̞̱͔̳̭̞̹̉t̰̤̆ͨ̽ What's the substring of element 0 through 4 of that? It's `s̊̌ͭ` Breaking that string into codepoints isn't terribly useful if your goal is to extract what a human would likely consider a single 'character'. Even worse: in Unicode there exist many different codepoint sequences that are visually identical, yet will substring differently going by codepoints! &gt; But from my current point of view, I'd be very very surprised if python really used UTF8 internally instead of sense making UTF32. Go [uses UTF-8](https://golang.org/pkg/strings/), Rust [uses UTF-8](https://doc.rust-lang.org/std/string/struct.String.html), Python [uses UTF-8 by default](https://docs.python.org/3/library/stdtypes.html#textseq), it's [the recommended charset for html/xml documents](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta), and plenty of other things. It's more or less the normal, standard choice all over the place.
No it's not, .env files shouldn't be reachable from an http server, that's totally the fault of the person that configured the server.
Because the world is moving and Bangladesh is not out of the world. :P
&gt; I'm unsure what you're saying here.. you mean you'd need proof? I mean an actual list of problems that can be solved with PHP as it is. &gt; The current PHP development can write utf8 compatible sites yeah, as long as they either don't modify strings, depend on measuring strings, don't care about bugs in there, I can use the mb_ functions for modifying any utf8 strings. I have no idea what you mean by 'not caring about bugs in there'. To be clear, for sites that I care about, I setup a code checker that ensure that any strlen() function calls, (or any other non-mb string function) is only for non-utf8 data. So I can be reasonably sure there's no bugs in there, as well as caring about if there are bugs in there.
So, every software project needs to maintain documentation on how to configure apache, nginx, IIS, lightspeed, AWS, cherokee, etc. Maybe before you deploy shit, you learn how to do so.
&gt; Many Laravel devs seem especially keen on deploying each of their sites to separate VPS instances Or they take 2 hours and learn how to create virtual host entries on their server.
Stupid users. That's it. The webroot default is `public`, a folder within the root of the project. `.env` is supposed to be in the root, one level up from `public`.
This has got nothing to do with Laravel. At all. I think you are misunderstanding the issue.
The first result shown here isn't even a Laravel site, it's running WordPress/Bedrock
I don't consider myself an expert at all (totally expected this issue to apply to my sites), but it turns out it's not an issue if you avoid dropping your whole project into a public folder. 
You're supposed to use real environment variables. If and only if you cannot do that, then you use .env. But I don't see why the push for .env either, compared to a simple php config file.
Because PHP is not language that we need, but one that we deserve. That's why instead of RFC about pipe operators, enums, generics and so on we have [this](https://wiki.php.net/rfc/immutability).
There are already config files for application and services and they don't change often after declared. They are for production environment, let's say they are the originals but .env is for other environments like testing, local etc. and they can change frequently. I'm working on a project both at home and office and I have different .env files for both computers because I need different variables on both computers like mysql password. These .env files are not part of source control. I don't say this is the correct way but best suited way for my situation imo.
Absolutely agree. But the framework documentation talks so frankly about how they've taken care of *everything* so that their devs can get to work on the fun stuff like coding, and spends hardly a second talking about server configuration. Like, golly! Not even a word of warning as far as I can tell. They warn that .env shouldn't be stored in VCS. But they do have .gitignore's all over the place. So obviously, they don't trust that their devs will know that. Besides, really, what's the functional advantage of dotenv DB_HOST=127.0.0.1 etc.... vs &lt;?php define('DB_HOST', '127.0.0.1'); etc... I'm not hear to bash Laravel. I just got into it, mind you! But there shouldn't be anything wrong with suggesting room for improvement. And if hundreds of developers are making the same mistake (which it looks like they are), then maybe there is a shortcoming in the documentation. One that could be solved with one more page of documentation. I'd write it even.
Or maybe the documentation that talks about how awesome the framework is and they've done all the thinking for you, should just say "by the way, if you deploy to a shared host, here is something to take into consideration". Come on! Suggestions for improvement shouldn't be greeted so negatively. 
Not sure if it was you! I made a point not to recall the posters name :)
oh I agree here, laravel manual is terrible. there are parts that are crucial but you only get there after reading it second time+
Apparently the downvotes mean others disagree, but I came here to agree with you. As someone who's been an admin and a developer they are two distinct fields often bridged by a 3rd team called DevAdmins. The DevAdmins are the people who should require Admin skills to deploy production environments and devs should (at the least) be able to configure their local environment (if they need one).
No, like that was really the whole point of the dotenv system, it's a way of using environment variables but not having to set them up on your local machine and making them easier to change locally for multiple projects etc. Dotenv files are actually quite clunky to load, hence the config caching.
&gt; :-)? 
Isn't Laravel code located outside of the webroot, like Symfony does it?
the developers should be aware that any .env file should not be placed in the public directory. IF these servers are from shared hosting. the devs should move the app one folder app and modify the app.php to find the new location. Any configuration file should be outside of the public folder and only accessible by the appropriate user. 
Even better is that you can google search `"BEGIN RSA PRIVATE KEY" site:github.com` or replace the site with pastebin.com or equivalent, or you can search for `filetype:id_rsa`. I found this: http://www.wware.org/download/192.168.0.4.id_rsa
&gt; Or add a single page of documentation that outlines it. Until ngnix, or apache, or microsoft, etc. change something. It is NOT their responsibility to teach you how to be a server admin. That's on you. It's their responsibility to document the software THEY create.
&gt; and they've done all the thinking for you, Where the hell is that? I'm sorry you can't take responsibility to know more than a themeforest customer. I bet you damn well charge your client as if you do.
If you are a developer, and you are promoting your code to an Internet-accessible server, it damn well is your responsibility to be skilled in how to configure your web server and your application to avoid such incredibly stupid mistakes such as this post demonstrates. I will go ahead and say it: I am not a fan of Laravel. That said, I also will say that it’s not Laravel’s (or any framework’s) job to configure your web server or to secure your application. That is always the developer’s job. Always.
Why doesn't laravel just make these php files? This would never happen a) If configuration files were kept in a non web-accessible folder b) If the files were php. If you want to have some fun just try appending composer.json to the root of any sites url or composer.lock. Not a security issue? Well it is because I can see everything you're using and cross check versions with a vulnerability database. Tons of .git is exposed as well. It's not a sysadmin or dev issue, the lines there have blurred IMO. Each should know just enough of the other.
In all fairness, cPanel at least puts a sub-folder in the domain’s user folder so it is easily possible to store things like .env or other sensitive data outside of the web root. It’s a super lazy/apathetic developer who couldn’t be bothered to take the 5 seconds to learn this fact. 
&gt; Holy Shit! Is it ethical to post something like this on reddit? I’m legit curious about how you feel this to be unethical? In my opinion it’s easily accessible information that everyone has equal access to use. It’s not as if OP was posting private information that very few others would have access to view. That, IMO, would be unethical. 
Come off it. I'm trying to suggest an improvement, I don't get why you all should be so negative. Laravel's documentation explains how to implement URL rewrites with both Apache and Nginx. According to your logic, they shouldn't even do that. I'm suggesting one more block on this page: https://laravel.com/docs/5.5/installation ##Considerations when installing on shared hosting environments Could probably do it in two paragraphs. If that. Just a heads up. Oh, geez, will you [look at this](https://laravel.com/docs/5.5/homestead) - a call out box about if you're installing on Windows. Why in the world should they do that, shouldn't all you developers know how to configured Virtualization on your own? Oh another one on the same page! A warning if you're using NFS! Further still, a warning about what ports you should be using in your VM with port forwarding, which features are compatible only with NGinx. Seriously. I don't get why all of you are so up in arms about the possibility that the documentation could be expanded some. It's ludicrous. I'm NOT a developer who got bitten by this, I'm not throwing up my arms and saying "I'm being sued and its all Taylor's fault!". I'm just saying be welcoming - a lot of devs only know about development, they don't know the ins and outs of configuring Apache or Nginx. Maybe they should, sure. But than be amenable to the idea that a helping hand could be in order, you seem to want to stomp your feet and berate them. It's nonsensical, it's silly, and it reflects very poorly on the community. 
Yes. Nothing is in the webroot except index.php. These are examples of people misconfiguring webservers.
No. You really have two sane options here: Either don't use config files (as per factor 3 of the [12 factor app concept](https://12factor.net/config)), or put them outside the web root. The concept behind a .env file is a convenient way of configuring 12 factor app-stype env variables *in dev*. It shouldn't contain production credentials, should (probably) not be committed to your git repo, and certainly shouldn't be inside the web root in production. People saying ".env files shouldn't be reachable from an http server" are missing the point, *they shouldn't be on the server to begin with*. If they're on the server, it's a config file, which means 1) it's not a 12 factor app (which is fine, it's a bunch of hipster nonsense anyhow), but in that case, stop pretending you're one of the cool kids and 2) it needs to be out of the web root. `.env` files in production are basically the worst possible outcome; you're using a technique explicitly meant to *NOT* be used in production (so there's fewer safeguards and warnings), you're using a standard file name (so it's easier to sniff), you're making your app more complicated (by weird indirection), you're almost certainly committing production credentials to your repo. Just...why? A regular config file would be better in every way. Especially if you put it outside the webroot. &gt;&lt;
I guess they installed it in a sub directory and misconfigured it. That's pretty bad
&gt; don't think you're "expected" to use environment variables - it's simply an alternative to .env file That's....totally wrong. Either you're using environment variables or on-disk config. `.env` files are a hack to emulate environment variables in dev (hence the name), but if you're using it in production you've done something totally wrong. The alternative to environment variables is a config file; why would you call your config file `.env`? :)
I'm not saying this is unethical, I'm wondering (and asking other people's opinions). I remember some questions arose when Shodan appeared. Yes, it uses simple keywords than anyone can use with Google, but making the results so easy to access to anybody is a different thing. If I were to realize that the backdoor of a jeweller isn't locked, is it ethical or not to tell it to everyone I meet? Even though anyone could just realize that it's not locked by touching the door handle. Then again I realize that making as much noise as possible is the best way to force the site owners to realize that they have a problem and to fix it (besides contacting them directly, which is not advisable because that's the best way to get sued).
Oh, you CAN do sites for UTF8, just that you have to replace the entire string functions library for another one for it to work.. My point is, it should be an integral part of PHP
You raise some interesting points with respect to your analogy of the jeweler and their backdoor. But, I think you also nailed it with your comment about making as much noise so that sites can learn their lesson before it becomes a much larger issue.
I think you could have posted this flaw without the google search, regardless of what others are saying with regards to it being the developers or system administrator's failure that causes this. The data stored on these databases could very well be sensitive material. People could have their identity stolen because of this... I would say it's not very ethical posting it in this manner. That being said it's important to us developers to ensure that our websites are properly secured, so thank you for sharing this with the community. 
The config files are php files. The .env files are used for development to override those php configuration files for development environments. They should never be used in a production environment. 
I see your array literals, and raise you full JSON support, including multi-line literals: https://github.com/dotink/jin
We ended up doing exactly this ( curl to redis job queue, to german, and back to curl), and then move back to the "hacky" solution previously posted. The job system proved to complex to maintain, ( seems better in theory than practice, unless you work for doing work) it used to many servers ( we need 5000 workers on standby), so we replaced it with an haproxy load balancer and apache2 web servers. Cut the hardware in half, BUT need extra checks to keep the site up when it goes over capacity.
And actually it supports comments now too. Here's an example for Hiraeth configs: https://github.com/hiraeth-php/journey/blob/master/plugin/config/journey.jin
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [hiraeth-php/journey/.../**journey.jin** (master → ef41e54)](https://github.com/hiraeth-php/journey/blob/ef41e54dcaf25f61885280aa6fd99f74dfb7a821/plugin/config/journey.jin) ---- 
PM Jone's relay middleware has a way to deal with this. You need to set some INI settings appropriately and translate the ID to a proper cookie in the response object. See the code and the lead comment here: https://github.com/relayphp/Relay.Middleware/blob/1.x/src/SessionHeadersHandler.php
That's not true, at least in the Laravel ecosystem. The point of the .env file is not for overriding values in dev, it's for keeping secrets out of version control. Even Laravel Forge has an interface for editing the .env file.
*Boy, the person who made this post definitely doesn't have an agenda relating to Laravel*
This is hilarious and I see people do this all the time. Chmod 400 and never ever keep this file in your document root.
Sigh. Guys, wtf?!?! This is the kind of shit that makes people laugh whenever I try to tell them that PHP is actually a better choice in some situations.
Well.. its php.. you cant have nice things here.. (lack of people who know php-internals well enough, some things cant be done as engine doesn't support.. and such). You should look for alternatives other than php. I dont think that the current php-internals-team can implement stuff that developers need.
&gt; I wish people would stop saying env files are not meant for production. They're not. &gt; Why do you think they are called env files? Because they are a file that allows you to *replicate* the effect of setting environment variables in dev. The concept comes from [12 factor apps](https://12factor.net/config). &gt; Laravel uses them exactly to work with both development and production environments Laravel uses the excellent [vlucas/phpdotenv](https://github.com/vlucas/phpdotenv) library. Allow me to quote from the readme: &gt; phpdotenv is made for development environments, and generally should not be used in production. In production, the actual environment variables should be set so that there is no overhead of loading the .env file on each request. The concept was invented as a way of getting config values out of files in production, and the tools being used are designed to get config values out of files in production. If you're just going to use config files fine; that's what I do too (although, you know, not in the webroot 'cause I'm not an idiot), but this has nothing to do with environment variables, 12 factor apps, or *`.env` files*. Other tools for dealing with `.env` files have the same caveats; they were built to allow people to more easily build 12 factor apps, and thus, *not use config files in production*. That's the point. &gt; After all, everything in Linux is a file, so in the end, it doesn't matter where you put it Environment variables are not files. The point of using environment variables for config is that you *aren't putting it in a file*. 
It's called .env because it's an environment based configuration file and there's nothing wrong with using them in production. I'm pretty sure all of Taylor's services like envoyer, forge and spark use this approach, and the manual does as well. The people who suggest putting these variables in the environment might be overlooking the fact that a user who can read an .env file can just as easily read the variables from the environment and mistake obscurity for security.
As far as I know, environment variables can be read just like your env file. The only thing it solves is the misconfigured doc root.
&gt; The people who suggest putting these variables in the environment might be overlooking the fact that a user who can read an .env file can just as easily read the variables from the environment Really? Check out that google search linked **in this thread**. The top result is `http://www.oneluxstudio.com/.env` Go ahead, explain to me how I'm meant to get that site's environment variables "just as easily" as I can download their `.env` file. :) I personally think the 12 factor app stuff is mostly nonsense, and I'd agree that the proposed security benefits are usually overstates, but come on. Obviously dropping an `.env` file into production is weaker security than using environment variables; you might accidentally expose in in your webroot (as, you know, thousands of sites have). Accidentally exposing your environment variables is harder, and generally requires an actual compromise of the server.
It's called .env because it's from phpdotenv which is a PHP implementation of the dotenv system, intended to load environment variables from a file as a hack.
&gt; Allow me to quote from the readme By"the" readme you mean that of a package. If you look at the Laravel docs and services, it's a common practice, and there's nothing wrong with it when done right. On top of that, the readme points out that it's to *counter overhead*, which is a non issue because the configuration is cached. &gt; 12 factor apps, and thus, *not use config files in production*. That's the point. No, that's someone's opinion, and the Laravel author doesn't seem to share it. And for good reasons, because they are not unsafe unless misconfigured. Environment variables only counter the doc root misconfiguration issue, they are not a panacea of security. &gt; Environment variables are not files. /proc/pid/environ People seem panicked about a readable file on their disk, but guess what's in .ssh/id_rsa, the keys to the kingdom.
Key word in your explanation is environment.
I've already repeated myself a few times that environment variables do counter issues I misconfiguration, my point is that they are not inherently unsafe when done right and that there is value in understanding correct configuration rather than saying "use environment variables" as if that solves every issue.
Are you serious? A good engineer should know and understand the implication of the approach to the solution. This includes understanding the behaviour of a web server and how to properly secure them. What's next? The next thing you are saying is an engineer does not need to understand sanitizing input or how to prevent a sql injection attack, the framework should baby sit all of these for him.
You certainly could use environment variables, but there’s really not a big difference between either implementation.
&gt; People seem panicked about a readable file on their disk, but guess what's in .ssh/id_rsa, the keys to the kingdom. But very rarely inside the web root. :) Whereas...
While true, the reality is that a lot of developers are also tasked with deployment (or aren't tasked with, but it do it themselves for their own sites). So everyone is right and needs to stop arguing with each other: it's a developer skills issue that has resulted in a misconfigured webserver. 
Yeah like that'd stop anyone.
Weird there is such argument over a simple thing. In Cake you simply gitignore your config files be it app.php or foobar.php. I do keep a copy in git that matches the settings in it the ignored config file naming it is app.default.php or foorbar.default.php, but it has empty values. This is more of an explanation to new developers of how to construct their local config. Then in our deployment script I compare the local config versus the one stored in git and spit out warnings if setting names don't match, the values can be different, its the actually setting names that can't be. Basically letting us know that someone forgot to include their configs. There is another item that runs in dev only as part of the bootstrap process that does the inverse, ensuring all configurations always match because there is nothing that annoys me more than someone forgetting a fucking configuration and cratering a release right off the bat.
That didn't do much good for [Rudy G](https://www.theregister.co.uk/2017/01/13/giuliani_joomla_outdated_site/)!
Not sure I understand what you mean by this. Yes, environment variables are from the current running environment. This is how dotenv intends you use the library.
Um yeah this isn't PHP. It's a poor http server configuration.
My senior guided me how to secure .env file, now from start i configure my server by removing access to .env...
It's concept at least partially inspired by [12 factor app methodology](https://12factor.net/config). It's a way to move config along with code, without embedding it in code. It's not the hack you describe, though I can see how that's helpful to prop up a belief.