Every now and then I get a nice reminder about why I use request blockers: [Page 1](http://i.imgur.com/GEHw3yF.png) [Page 2](http://i.imgur.com/cDQnURJ.png) [Page 3](http://i.imgur.com/JSOKokV.png)
&gt; You’re not looking at this code anyway. Until you have to debug it, that is.
I work for a company that designs semiconductors for the RF industry and internet connected vehicles are a big topic right now.
&gt; Micro optimizations are not going to make your code significantly faster - good algorithms will. If you can make userland autoloading faster with "algorithms", you should let us know how. Otherwise you're just offering low-hanging fruit platitudes. SQLite [sped itself 50% using micro-optimizations](http://web.archive.org/web/20160305085922/http://permalink.gmane.org/gmane.comp.db.sqlite.general/90549), and PHP 7 sped itself up *twice* with micro-optimizations. 
&gt; Seriously, what’s wrong with using get_defined_vars / extract in this example? You’re not looking at this code anyway. Yes, you're not looking into it. But PHP has to, in order to execute it. If you compare the performance of the two samples above, you'll see a very, very ugly disadvantage for the first one. 
I think that i tried that and something was wrong, and each was last resort. But i'll try to do that better anyway
Anyone tried Org-Mode for this purpose?
Until it throws $up.
Your code is of course better, but that is probably not possible without extending php. I really hope this doesn't gets wide acceptance. We have already enough "freedom" in the js ecosystem.
Hi Ondrej, Any progress on the laravel support?
It's possible without extending PHP but it requires more source analysis. Which frankly should be relatively easy as this project builds a full AST of the source (check its dependencies in Composer). I think it's fine as a proof of concept. Just not good for production. Not just because of performance etc. but also because your IDE won't understand the new syntax. 
https://www.youtube.com/watch?v=CDl9ZMfj6aE
&gt;[**Alien Ant Farm - Smooth Criminal [3:39]**](http://youtu.be/CDl9ZMfj6aE) &gt;&gt;Music video by Alien Ant Farm performing Smooth Criminal. (C) 2001 Geffen Records &gt; [*^AlienAntFarmVEVO*](https://www.youtube.com/channel/UCS4K7vSumGqCQp3n1U994jg) ^in ^Music &gt;*^93,810,246 ^views ^since ^Oct ^2009* [^bot ^info](/r/youtubefactsbot/wiki/index)
Ugh, static?
I think that the errors both tools find will be similar, but PHPStan has these advantages: * It's free and it's open-source. A company can save up to 200 euros monthly by switching to PHPStan. * You can run it in your own CI environment along your other tests - in GitLab, Travis, Jenkins, TeamCity... You can also run it locally and don't have to wait for a 3rd party server to run your build. * PHPStan doesn't bother you with false negatives, every error it shows to you should be considered to fix. * PHPStan is extensible - you can write extensions to define magic behaviour of classes that use __get, __set, __call... This is especially a big deal for folks that rely on magic behavior a lot, like devs using Laravel. * I (author of PHPStan) have a lot of cool ideas how to make it even better in the future - for example I could statically analyze DQL queries in Doctrine.
You need to learn to use Google. 
Yeah I completely fabricated the syntax in that example. Although it's consistent with Java and uses the ~&gt; operator which was suggested in an RFC at one point. I mean it's not about actually getting the multi-threading, I don't care about that. Just the idea that the actual implementation could be changed like that makes it appealing to me.
No, he said he didn't have any *hands on experience* with it, but then goes on to talk about the amount of research he did in the area.
My way isn't very academic but well here we go. Try to tap all sources of knowledge. Internet, peers, books, etc. Take notes - just bullet points, maybe with links - about what you need to solve and more important what you need to understand. Order the notes in any way that makes sense for you. Do more research based on the notes go deeper and add more notes. If you see single simple things that you can instantly solve, do it or move it to a low priority list and ignore it for now. Iterate until you have ideas of a structure and the important building blocks. Make a small roadmap, bullet points of course. Order the roadmap and put the hardest or most uncertain topics on top. Start working on it. If you get stuck you need more iterations, but you know more know. This is practically the whole process. But I recently became aware of how important background processing is. You know, the magic moments you get the brilliant idea or insight under the shower. You can read all the books in the world, but without reasonable downtime your brain won't process this information. Don't reasearch 24/7, take a day or two off, do something simple. The insight will kick in, you can push it, but you cannot force when.
Ooh, looks good - ta very much! I really like Scrutinizer for open source work, but for a closed-source project I have that is currently generating £0 per month, I can't justify the cost. Does PHPStan produce an overall quality score, like Scrutinizer does? I rather like that - it gamifies quality, and encourages continuous small improvements. 
Nope, it's currently for finding bugs in your code only.
Nice summary ..
Freelance here: I usually acquire around 2 pages of purple links on Google search. It's a painful process but I think with experience you learn to filter bad answers from good answers (often by reading comments). Fortunately my current client uses symfony which has no shortage of documentation and stack overflow posts. I'd stay in the Google phase until I'm comfortable with a solution. Client doesn't care as long as I meet deadlines.
Cool! For anyone who want's to try it, you could play with it at https://3v4l.org (select `rfc-arrow_functions` in preview selectbox).
Too bad that multi-line functions are not supported. I'd argue that this omission makes the same code that uses both long and short anonymous functions look very inconsistent. It might encourage people to force everything onto one line. The examples using single character variable names are proof of that.
That's why it's under "Future Scope". The suggested syntax could be extended without any ambiguities. ;) Additionally, I think short variables names in closures are not much of a problem since the variables are so short-lived.
Aww man, that hurt, my dog really did just die.
Does anyone know of an example where the `() =&gt;` syntax would be ambiguous?
Exactly! I'd very much like to see the incremental improvement this grants us sooner rather than later instead of delaying until a time where we can solve everything. Especially since the demand for multi-line short closures may actually be very small. Speaking from my own experience with other languages, I'd say 90%+ of the value lies in your basic `new = old.map(x =&gt; x.prop)`. The savings (in both boilerplate and cognitive load) from short closure syntax drops rapidly as the function body increases. Granted, I wouldn't complain if `use($var)` disappeared forever, but it's not *that* bad.
Experience is everything in our trade. 
This is a well written article. Thanks! I have begun a project to actually reduce microservices at my company. Far too many repos for a small team and lots of code that did the same thing across multiple services. Using Cake I built a monolithic architecture but divide the different services into cake plugins. This has several advantages: * Single code base is easier to maintain and deploy * Primary business logic sits at the core of the application, but can be used by the different services. * Multiple servers can still be used by configuring the application to only run the API plugin on the API server, the CRM plugin on the CRM server etc.. For us this works well. For a larger team where the API developer would rarely need to go into the CRM I think micro-services makes sense. My two cents.
Here are some examples: [($x) =&gt; $x]; yield (Foo &amp; $bar) =&gt; $bar;
&gt; force everything onto one line I don't think that's possible. It's one *statement*, not one line. 
I also wish this was generalized as an alternative method/function syntax: class Decorator { private $super; function __construct($super) { $this-&gt;super = $super; } fn doThis() =&gt; $this-&gt;super-&gt;doThis(); fn doThat() =&gt; $this-&gt;super-&gt;doThat(); fn getFoo() =&gt; $this-&gt;super-&gt;getFoo(); fn setBar($bar) =&gt; $this-&gt;super-&gt;setBar($bar); } Thoughts, /u/MorrisonLevi ? 
If I'm dealing with a new technology or unfamiliar software stack I dig in via published books using safari books online and my local college's interlibrary loans. I've found for complex topics nothing beats reading through a book instead of skimming webpages and api docs. I've use OneNote since it first came out in Office 2003 on a Tablet PC dedicated for note taking so I've got a wealth of my own research notes I can reference and always have the stylus handy to doodle out ideas. The major research todos are tracked in Trello and specific coding tasks are put into PivotalTracker. I've not done it in a long time but making Visio flow charts can really help visualize complex processes.
But Laravel makes it so easy! https://laravel.com/docs/5.4/routing#route-group-sub-domain-routing
Ah, yes it is. I'll try replacing Eloquent with Model - thanks!
Anything of importance gets tagged and saved in Google Keep, previously use Pocket but find the ability to store TODOs and Notes a big plus point. Then anything else get hand written out or dumped into a blank buffer in my editor in markdown style, find this good for working through my thought process.
They aren't ambiguous from a syntax perspective, but they are ambiguous from a finite-lookahead parser perspective. You basically get a choice between a) a closure syntax that has *some* kind of prefix or b) a closure syntax that only allows simple parameter lists (no types, default values, etc). Anything else would require some significant implementation hacks (both for us and for any tooling).
this does https://insight.sensiolabs.com/ combine it with scrutinizer and you're good.
I recommend this talk: [Greg Young: The Long Sad History of MicroServices](https://www.youtube.com/watch?v=j32nn5pgm9g)
I didn't realize how much I wanted that until just now. So much boilerplate around accessors just melts away.
Neither of those use cases is going to get significantly (as in, more than a few hundredth of a millisecond) faster with `__autoload` instead of `spl`
OK - thanks a lot, I'll try again tomorrow after reading more of the documentation.
If we are going by how much $$ you want to make, just learn COBOL...
Me no type so much. But yes.
At a glance `echo` does not seem to be an expression so it will take more investigation. The machine I use for building PHP is under heavy load right now so I can't quickly test.
"function" to fn(...) is long overdue. The rest...is that supposed to be readable? Because it's not. &gt; $this-&gt;existingSchemaPaths = array_filter($paths, fn($v) =&gt; in_array($v, $names)); Great, where did $names come from? Oh I have to look up php closures to figure out scoping rules or is it arrow function (or whatever operator) rules. Having answers doesn't change the unnecessary questions that arise from looking at it. This shift from explicit to implicit is backward. Is that a valid statement or not? Can't tell by looking at it anymore. Thats a loss for the language.
There is no ambiguity with echo, as it is not an expression. If it were, you'd already get an ambiguity with just `call(echo $a, $b)`, no need to bring arrow functions into it. The code you provided *should* be generating a parse error, so there's probably something wrong with the implementation. 
Thanks, that makes sense. I guess the expanding the arrow function syntax to the full syntax with my minds eye had me a little confused.
then you have it easy to do that part. aren't you lucky? .^(Sorry for your lost pal)
Your points seem to be more about testing in general rather than TDD (the technique of writing the tests before you implement the solution). Yes, testing is a good thing, especially integration testing that tests the final result to see if the code is achieving the correct result, and testing edge cases, etc. I was mostly talking about how it's not necessarily a good idea to write the tests first since there are reasons why people tend to write better designed software when they at least start designing and implementing the code first. But in addition, sometimes people get too focused on testing and end up writing overly complicated code with too many layers of abstraction for no reason other than to try to make it more testable. In that case, being overly focused on testability to result in bad design.
grate .... 
Thanks for this! I used it yesterday on a small project, and worked really well. I really like the error level configuration. For projects that I take over, CI servers often slap hard that I turn off the static analyzer. Is there any support to turn off individual tests in certain directories? This would help a lot in cases that I want to test a coupled component of an otherwise larger project. Right now I'm getting many undefined function errors because they exist in a different hierarchy. 
PHP 7 is about getting something slow to be less slow... PHP 7 is a about PHP being faster than itself. But in practice is still slower than many of its competitors. So praising PHP 7 speed is red herring. 
I really like [Magallanes](http://magephp.com/). It's easy to use and configure (yaml based)
People like to add "architecture" after a concept or design pattern which makes it sound like a golden ticket end-all solution to every problem - because *that's how you build a good product*. A lot of times I feel like I'm trying to be sold something. Architecture usually includes the process of choosing a number of different patterns to come up with a solution for a given problem. It's not a technology stack, re-labeled buzz pattern or something you can just sell as a solution to everything.
I have used got deploy in the past, we are now setting up a complex project with deployer.org. I am going to start using gitlab ci for personal projects, maybe with deployer together. 
Deployer here too. I used to like Rocketeer but development seems to be halted. Deployer rocks though.
And confidence is better then hype.
Will try it on my project later on. Last time i checked phpstan was october.
[deploybot.com](https://deploybot.com/), I have registered when it was free and I still use it as free.
It depends on much of your technology stack needs to be coordinated, how many servers you need to touch, and how big your team that does your deployment is. If your team is able to maintain sanity during deployments/rollbacks with a custom-rolled script, it's not bad to stick with it. Only when things grow does it eventually make sense to move to something that's more extensible (plugins for custom tasks, integrations) and more documented (wider developer support thus easier to hire new staff that could hit the team running). it's ok NOT to make things complicated until you need to or you can shoulder the cost/overhead. You could also let your team decide which tools they use (developer happiness, learn new skills).
I use Deploybot for personal and side projects, Forge &amp; Envoyer at work.
Ah i've used this a long time ago :) Thx for the reminder.
One more for the list, [DeployHQ](http://www.deployhq.com).
I still am a big fan of Jenkins. The inital setup takes some time but after that creating and managing deployments is really easy. 
Jenkins is an automation server, not a deployment tool. Sure you can ssh into a server and run commands, but essentially you're using SSH to deploy.
Thats what we use in all of our environments @ work.
jenkins + ansible 
You are most welcome ;-)
Why is that ideal?
Another vote for Deployer here. It gets the job done when your project is primarily PHP. If you are at all comfortable with Ansible then Ansistrano (https://github.com/ansistrano/deploy) is well worth a look also.
Edit: We use the paid option ([Envoyer](https://envoyer.io)) at work for a few non-Laravel projects and it's excellent. IMHO it's well worth the money. I think that it's worth mentioning that Envoy/Envoyer are not restricted to just Laravel projects.
I am possibly being really stupid but in this example $y = 1; $versionA = fn($x) =&gt; $x + $y; $versionB = function ($x) use ($y) { return $x + $y; }; how/why is $y in the scope of the arrow function? Obviously in the second example you bring it in using *use* but isn't this first example likely to cause issues with variables polluting the body of the arrow functions?
Envoy and Envoyer are 2 different things ;) Envoy is a task runner https://laravel.com/docs/5.3/envoy envoyer is the hosted deployment solution. But as you said, neither are restricted to just Laravel
Ah that's what I get for not reading before coffee. Thanks. :)
http://flarum.org/ ? What do you mean when you say "plugin like forums"?
[removed]
Wow, didn't know about typicode/hotel, thanks for sharing
Thanks, I'll check it out, ...plugin was the wrong term to use, any kind of software that can work with PHP will do just fine.
I’m not a fan of vagrant either, and I never managed to run docker on mac the way I’d like it to, so I’m using native apache / php. These are some hints for you: * Remove all of the PHP versions except your desired one. There can be a lot of different packages, from different package managers. In my experience, those only confuse developers (why is my cli version different than apache version, etc). On OSX you can’t go wrong with the brew version, I don’t know about windows. * If you need multiple PHP versions use some kind of version manager. I have no experience in that matter and certainly using docker here would help a lot * Set up a wildcard virtual host so that you don’t need to bootstrap each project. For example, [this is my `httpd-vhosts.conf`](https://github.com/mlebkowski/dotfiles/blob/master/apache/httpd-vhosts.conf). It maps every `project.dev` to `/../Some/Projects/Dir/project.dev/web/` * Use a local name resolver to resolve the `*.dev` domains to localhost. If you don’t like the suffix, you can use existing domain names (`ServerAlias *.vcap.me *.localtest.me *.lvh.me *.fuf.me`) that work out of the box and point to localhost always * Try not to experiment with the architecture and always use similar setup. This way you won’t have to tweak the apache / php for each project Advanced topics: ;) * I have a script alias that hijacks all calls for `node`, `npm`, `gulp`, etc and looks at the `package.json` of a current project (if any). Then resolves the required node version and uses `n` version manager to switch to it. This way I can use multiple node versions with seamless integration. Same could be done for PHP * I use [nassau-https-proxy](https://www.npmjs.com/package/nassau-https-proxy) so I have valid SSL certs on localhost without a hassle. This way I can test HTTPS-only features, for example the geolocation API * In case that is not clear, keep all the configuration in a git repo and automate it’s recreation on a new machine
http://windows.php.net/ and the left side says Apache Lounge and that's why I use Apache Lounge. Everything is 64 bit. And also I use virtual domains (with hosts file and Apache configuration) for different projects. Windows 10. I believe that PHP is or should be OS independent and the PHP apps should work in any OS. But yeah, Unix systems are more suitable for this job. This is at work. At home I simply run build-in PHP server.
Recently I had to implement a forum that had this requirements: one install over multiple domains, each domain with it's own language, topics visible on a per-language basis, same user table, shared user points. I chose vanillaforums. The plugin/hooking architecture is pretty easy (basically you need to follow some naming conventions for your plugin's methods). I had to add a new field to the topics table to link it to the domain's language. If you need forum groups ("categories" in vanilla forums) it would be more complex because it uses https://en.wikipedia.org/wiki/Nested_set_model so adding a language column is not enough.
thx for replying. I'm sure you must have seen all kind of suggestions about how the syntax should be. But...I had a crazy idea and I can't help myself from posting it: array_filter($array, |$x| $x === 2); 
Yep, seems about right 😊 I'll try to tackle this in PHPStan extension so the setup is easier for Laravel users 😊
Cool -thanks, I'll let you know if I spot anything else useful!
What exactly do you mean by "pollute"? If I understood the RFC correctly, it will only bring in the variables that are used in the arrow function. So if you declare a $z before the arrow function and it's not used in the arrow function, then nothing is "polluted".
I don't like `fn`, really don't like it. I've been trying to figure out why. I mean, it's a small change, and I love arrow functions in ES6. Having `fn` might be well worth it, right? I realised that my biggest problem is probably that it adds one more inconsistency in the language, something we don't need. When we're deprecating PHP4 style constructors and when you can't pass an iterable in to `array_*` functions, when I need to use the `iter\` library to have a nice api for mapping and filtering generators, adding one more inconsistency just doesn't feel right. I'd be happier with using `function` instead. A few extra characters, but I'd rather PHP didn't adopt a second token for functions, just for arrow functions. Just my 2c
Well I mean the variable will exist in the arrow function, but now I think about it the arrow function can only be one line so it isn't really a problem as it would be difficult to reuse a variable without realising 
Same
Wtf? Aspergers is a thing... Autism is a massive spectrum and Asperger's defines a range on this spectrum. STFU. How old are you anyway?
Git post-receive hooks.
Nothing wrong with native Apache/nginx. I use vagrant for testing/staging at various points, but it's too slow for regular development.
If you do it with mamp, changing the hosts file is basically all you can do. I had the same issues you had and just bought a small webserver I use for development now. It's just a couple bucks each month, DB is automatically backed up and I get full Webserver-features. I still upload the files by hand, but I think many editors offer ftp-support, so you could do it directly I suppose. 
Same here. Trying to stay away from other tools as plain old scripts and hooks can also do the job :)
the question itself is funny, because there are a bazillion of php-based forums out there. Most I know off are written in php. The question is, how big do you need it and do you want a professional BulletinBoard that costs money because it's well supported or do you want a basic free-BB that doesn't cost a thing and does the basic things you need? The features you request are pretty basic. Most free boards should suffice here. but if you want to pay for it, vBulletin always had great support and used to be worth its money. Haven't used it in a while though. 
Interesting idea, but like others said the output is pretty poor. Actually what would be cool is accepting the new short closure syntax that's (hopefully) going to be in 7.2 and transpiling that for use with earlier versions.
You could use official phpstan Docker image [here](https://hub.docker.com/r/tommymuehle/docker-phpstan/)
Literally looking for a lib that does this at the moment, looks good. Thanks. 
The problem with the RFC, if we have to be accurate, isn't that variables are brought into the scope of the closure. The problem is that what's brought in is a copy, not the actual variable. I.e. $x = 1; (fn() =&gt; $x++)(); echo $x; // 1 Java deals with the same limitation as PHP - its closures can't modify brought-in variables. But their design is semantically sound, because they require that variables are declared final (immutable), before they can be brought in. They did this, precisely because implicit variable clones would be confusing. I mean, I realize how it works *internally*, so it's not as confusing to me, and it's not as confusing to you. But using PHP shouldn't require that one be familiar with the desugared version of a construct, and how the parser/runtime works. I.e. the approach of implicit copies, while better than nothing, is a leaky abstraction in its current form. Ideally one of those would happen, and I realize it complicates the implementation significantly: final $x = 1; (fn() =&gt; $x++)(); // Fatal error: attempting to modify final variable. echo $x; // 1 // Or... $x = 1; (fn() =&gt; $x++)(); echo $x; // 2 A compromise approach to preserving design soundness, and giving the community something, would be to add fn(), but without bringing in variables either explicitly (through "use") or implicitly, and then figuring out a sound solution in a future RFC: $x = 1; (fn() =&gt; $x++)(); // Notice: Undefined variable: x echo $x; // 1 Or a bit better, as it leaves more options open for the future RFC, any use of outside variables (read or write) should be forbidden for the time being: $x = 1; (fn() =&gt; $x++)(); // Fatal error: variable already in declaration scope. echo $x; // 1
I'm not sure I get the purpose of this article. It isn't so much a comparison as a list of things that all IDEs do with minor detail around whether a plugin is required - and frankly, how many people care if support is baked in or added via plugin if the plugin ecosystem is easy to use. Most of the features listed are supported across the board; so there's nothing to differentiate there and the author has provided none of their own insight that would let the reader compare a feature in one IDE over another. Many of the features listed are pretty much what you'd expect from any IDE. If an IDE didn't have syntax highlighting in 2017, it's not an IDE. There's nothing to be gained by itemising core feature support if all IDEs have the same core features. There's nothing that defines what the features actually are. Eg, What does 'Laravel support' actually mean. - Is the PHPStorm plugin more feature-rich than PHPED's native support? - How limiting is Netbeans' lack of support of laravel? I mean, laravel is written PHP after all, and if Netbeans supports PHP well, a Laravel developer probably wouldn't have a problem using it. 
Is vBulletin still popular? I know some old versions of vBulletin fell prey to a lot of leaks last year. 
Build docker container in Gitlab CI. I build containers for every branch, so that I can leverage Review Apps. We use Kubernetes. We're working towards Blue/Green deployment. For now, rollout deployment seems to work fine. 
I just run Debian linux with nginx and couple of different php versions installed locally, and my servers are on Debian+nginx+php as well. With this setup I don't see any need for containers or virtual machines.
Hi, I just discovered your project and it look like really good !
There is also http://xip.io/ it is a dns server which resolves to ip address given in the url. It may sound crazy but you can for example use http://my.cool.project.127.0.0.1.xip.io/ and just configure your local webserver with virtualhost "my.cool.project.127.0.0.1.xip.io" and voila, you have a "local" domain. It is very useful also in LAN, like when you want to test your site with a mobile device, just instead of "127.0.0.1" use LAN ip of your computer. You can use it also in a combination with vagrant boxes or docker.
Well i think it's pretty fine. Other frameworks you should consider is symfony or phalcon. I would say other big frameworks than laravel/yii/symfony/phalcon is waste of time.
Aside from the necessary code (to implicitly bind variables to scope, in the short closure macro), the output of the macros is actually pretty good. I doubt many folks here even went past the first page, or tried any of the other macros. And of course I'd welcome advice on how to make the other macros output better `^5.6|^7.0` code. &gt; Actually what would be cool is accepting the new short closure syntax that's (hopefully) going to be in 7.2 and transpiling that for use with earlier versions. That is the plan, though until yesterday it appeared as though the short closures RFC had lapsed into another of the dormant phases it's been in (since 2015). I have no problem reducing the available macros to bring them inline with RFCs that look like they'll become standard. In that sense, Pre is far more like Babel than CoffeeScript. It's of course easier to see where the language is going with an independent standards body or an RFC process that doesn't so heavily encourage patches alongside suggestions.
Unfortunately, I think most folks here stopped at the front page. The entire justification for the Pre short closure macro is to implicitly bind variables to the scope of the closure. If you can suggest better `^5.6|^7.0` code to do this, I'd love to improve the macro. It's not about "array_map/walk/filter", but rather shorter anonymous functions that also implicitly bind scope. There are also quite a few other macros to try...
`·cfcd208495d565ef66e7dff9f98764da` is to avoid collisions with other variables named `$extract` in scope, and the exact (md5) formatting is thanks to the underlying macro library, not by my choice. `extract` and `get_defined_vars` are to implicitly bind scope. The entire justification for the Pre short closure macro is to implicitly bind variables to the scope of the closure. If you can suggest better `^5.6|^7.0` code to do this, I'd love to improve the macro. 
The output is PSR-2 formatted and properly indented. I invite you to have a look at a non-trivial bit of code (perhaps through the "try" screen), to see this firsthand. Having written an overwhelming amount of code for this, in the last few days, I don't personally think debugging is noticeably more difficult than traditional PHP code.
Would you be kind to post the links to articles/videos that helped you with docker, please? Thanks ;)
&gt; I'm keen to benchmark the difference. I expect the performance in ^7.0 isn't that much worse. Well temper your expectations. Especially when using short closures for their best use case (small expressions you use in usort(), array_filter() etc.) the difference might go 5x or more.
It's not really a crazy idea. It's how Rust does their closures and it actually has some really nice properties about it: - It's the shortest syntax of the lot - It is unambiguous in the grammar But it does look weird when there isn't a parameter: `|| $x`. If there's enough protesting with `fn(params) =&gt; expr` maybe I'll try `|params| expr`.
Macbook Pro with Laravel Homestead (vagrant). It allows http://project.dev and is not just for Laravel - can be used by any framework. I have customised the VM with ElasticSearch and MongoDB.
Too slow? I haven't experienced that. 
Not really, I started this journey nearly a year ago I can no longer recall specific tutorials. However I can refer you to real examples of Dockerfiles and docker-compose.yml files like the ones I use on a daily basis. A simple development environment with just the PHP interpreter for developing a standalone library: https://github.com/1ma/Psr7Hmac/blob/master/docker-compose.yml.dist A more complete environment for a Symfony app featuring nginx, php-fpm, postgresql and redis: https://github.com/1ma/docker-symfony/blob/master/inf/dev/docker-compose.yml My own set of PHP images and their soure code: https://hub.docker.com/r/1maa/php-apa/tags/ https://hub.docker.com/r/1maa/php-cli/tags/ https://hub.docker.com/r/1maa/php-fpm/tags/ https://github.com/1ma/dockertronics/tree/master/php Also, to me I think these have been the two most helpful articles of the official documentation, "Best practices for writing Dockerfiles" and "Compose file reference": https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/ https://docs.docker.com/compose/compose-file/
&gt; Still, 200 microseconds for 10,000 operations is not bad. That's milliseconds (the float result of microtime(1) is in seconds, multiplied by 1000 it's ms). &gt; Also, do you think the performance could get any better without dropping support for implicit variable bindings? I'm not aware of any other ^5.6 syntax that would make this faster... It's perfectly possible to implement the "use ($ignore)" syntax from the AST, without changing the semantics and features of the short syntax. So that would make it faster.
&gt; That's milliseconds Oh yes. Silly me. [edit: stand by my point of a single db query of file system op rendering the difference moot] &gt; It's perfectly possible to implement the "use ($ignore)" syntax from the AST It's just not practical given I'd be reaching through 2 levels of vendor libraries to do so. I agree this would make it faster. It's just a little too close to static analysis for what the libraries can do at this point. I guess that brings the discussion to an end? Thank you for the advice!
&gt; Oh yes. Silly me. [edit: stand by my point of a single db query of file system op rendering the difference moot] You overestimate how long DB queries take, and underestimate how much code an average framework/app has. I always remind people of the empirical evidence we have: WordPress and Drupal were sped up twice by PHP 7 alone, same database and so on. This means PHP code performance is not irrelevant. And dropping tiny 7x slowdowns here and there, every time a short closure is used, won't be irrelevant either. &gt; It's just not practical given I'd be reaching through 2 levels of vendor libraries to do so. I didn't inspect that I thought you're using the AST directly. You should check it out, it's not as hard to work with it as it might seem. In fact... having access to the AST is where all the fun is.
DeployBot is rock solid. I use it for a bunch of projects. I love how many different types of deployment techniques you can use. Also be sure to check out [Envoyer](https://envoyer.io/), which is also really nice.
&gt; I always remind people of the empirical evidence we have: WordPress and Drupal were sped up twice by PHP 7 alone, same database and so on. I appreciate that. I think the same can be said of overestimating the effect of using these short closures in an app we have yet to accurately describe. That speed-up you mention is heavily dependent on the specific applications and test plans used. It's good marketing, but hardly empirical. I don't doubt that doing more work in code has a relevant effect on performance, but I still don't think this conversation has convinced me to give up on the idea of a preprocessor for PHP. If anything, you've helped me see ways in which it could be improved. Let's not forget, preprocessing has a successful history, not least of all in web dev. :) &gt; In fact... having access to the AST is where all the fun is. I'll check it out!
Phpstorm (with plugins) allows you to jump to route definitions and blade templates, and reasons about facades and the container. These things are framework specific, supporting PHP doesn't cover it. I don't think that is a limiting factor in choosing an IDE. I only wanted to address the points you made.
An important problem comes from get_defined_vars() and extract(). If you have defined a lot of variables, the performance becomes much worse. https://3v4l.org/tTLRk The time approximately goes with the number of variables defined (on my machine, 0.04s with 100 variables, 0.3s with 1k variables, 3s with 10k variables for 1k iterations); the vanilla code always took less than 0.001s. The size of $items does not seem to influence the time used.
Thanks!
Awesome thanks, I'm new to reddit too
&gt; Although I have a few ideas in mind, what do you think the next PDS publication should focus on? &gt; Let me know if you have a particular area of interest. Here are just some topics I would like to talk about: **Extended PHP package skeleton (or 2-level folder)** * Controller, Model, View, Service * assets: javascript, css, images * temp, log and cache directory **Other project ideas (a little bit offtopic)** * Database, table and column naming conventions * Tables (singular vs pluaral), field names, primary key (id), index names, fk names etc... * Naming convention for array index names in configuration files (lower_snake_case, lowerCamelCase) 
How do you manage your files?
I think XenForo is better than vB now. vBulletin was good in the 3.x series which coincidently enough was when the founders of XenForo were working on it.
I'd recommend XenForo.com if you're looking for paid software. Alternatively check out mybb.com and phpbb.com both of which are free.
If I use Envoyer, will I need Forge?
Basically, you make a request - either using cURL (which I would not recommend, horrible API) or using an HTTP client like Guzzle. The response is your data.
I suggest rather fixing your configuration than tolerating a lot of undefined function errors. As for turning off individual checks in different directories - this can be done by executing PHPStan with different arguments (rule levels) for each directory separately.
+1 for Jenkins
Can Envoyer be used on RHEL/CentOS? Edit: Nvm, I can just look at the site myself.
I made my own thing which is powered by docker, vagrant and a whole lot of Python. It's very frustrating not being able to talk about it yet, but it'll be ready for people to use soon. I'll make a post about it once I've ironed out the last of the bugs and written some docs.
Not related to PHP.
I can't conform this. There are several scripts outhere which use much more space like this one. Also the speed is quite good. To increase the performance you can pass an array of languages to the constructor. To compare the desired sentence only with the given languages. Or remove language files you don't need. Please have a look at the feature branch. This version is 3-4x faster than the master branch. @FruitdealerF: Your doubts are justified. I'm using the constitution because this is the most translated text of the world. Which allows me to cover a wide range of languages, currently 106. I can say this work pretty good (not perfect). Also all script are tested. It's also possible to train the script on your own text. For example to detect spam and ham. You don't have to use the language files.
[This is exactly how I set up my Vagrant Boxes](https://github.com/BlakeBeus/vagrant-ubuntu16.4-LEMP-provision-script). I have a Macbook pro that's pretty beefy as well. That may make a difference for speed.
I've been using Vagrant. The way I provision a site I can have a brand new server up and running locally in just a few minutes. [This is how I setup my servers](https://github.com/BlakeBeus/vagrant-ubuntu16.4-LEMP-provision-script). I also created a LAMP version of this on CentOS, but I've since switched to Ubuntu and LEMP and so I never uploaded it. If someone wants it I can throw it on GitHub. All this being said, I've spend LOADS of time learning how Vagrant works. It definitely has a learning curve, but I think it's improved my development workflow (and understanding of web servers in general) immensely.
Absolutely wasn't looking for this, but it still looks great. Now looking for problems where i can use this solution ;) Also thanks!
I'm going to create a problem just so I can use this solution 
That's a great idea. Sounds like great problem solving to me in this case 👍 
Yup! Any server that you can grant SSH access to will work. You may want to look into this as well: https://laravel.com/docs/5.4/envoy
The main problem for me have always been synced folders, even a beefy macbook won't help you with that. Reading and writing is just terribly slow, a deal breaker for every developer in my eyes. However, this might just as well be related to the provider (I used VirtualBox). What provider are you using?
As someone who frequently works on development tools (static analysis, documentation generators, etc), I really appreciate this type of standardization and hope to see lots of adoption. It takes a lot of weird guesswork and unnecessary configuration out of the process, so development time can be spent on the tools rather than things to infer project structure (src/lib, public/webroot/web, etc)
MariaDB supports all of MySql features up to version 5.5. Then they have another version (10.x) where they started adding new features not found in MySql, while MySql continues with their own versions. See the [faq](https://mariadb.com/kb/en/mariadb/mariadb-vs-mysql-compatibility/). MariaDB already replaced MySql in Debian testing, so it will probably trickle down to Ubuntu and from there everywhere.
This is a completely useless article.
Watter probleem sal jy skep, al is?
&gt;how old are you anyway The typical response of a social retard 
&gt; How is it necessary? The top comment already shows you a much better output. If you mean the comment offering alternative syntax for use with array_filter, it misses the point of the macro: to provide short closures with implicit variable binding. It's necessary as a design decision. If you're not interested in the implicit binding then maybe that macro isn't for you? &gt; class accessors (seems fine) These hook in via `__get`, `__set`, and `__unset`, so they're not very different from the property loaders. &gt; loaders (breaks __construct) "breaks" is a strange word to use. They provide a default `__construct` implementation (through the trait), but also a `__property_loaders` function to call them if `__construct` is overridden. There are another couple macros (`defer { unlink("file"); };` and `function __construct($a = ucwords("chris"), $b = new \stdClass)`) which aren't documented. I'm not crazy about the state of the docs, though all of these macros can be explained through the tests in each repo: github.com/preprocess). Thinking of better ways to convey this info. Thanks for taking the time to go beyond the home page, and to respond. :)
The macro performs a pattern match on `(···parameters) =&gt; {···body}` and replaces it with valid `^5.6` code that will bind variables in the containing scope. I cannot follow the advice of that comment without being closer to the AST, which I cannot do without digging very deep through the vendor dependencies on which this library is built. 
When asking tech questions anywhere on the web, please make your title as detailed as possible (whilst keeping it succinct). All questions could be titled "Please help me" but it would start to become hard to distinguish them on the front page, and in search results. Thanks! 
PHPClasses.org desperately trying to cling to any relevance it still has...
Yeah basically this. But be prepared to pass around the account_id and not make it fully auto-magic. You don't want a CLI task to attempt to read HTTP headers to figure out the context.
&gt; But in practice is still slower than many of its competitors. WRONG Python: http://benchmarksgame.alioth.debian.org/u64q/php.html Ruby: https://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=php&amp;lang2=yarv As previously mentioned by /u/skillsofanartist
Deployments will always use either SSH/SCP or (god forbid) FTP to deploy at some point, unless you're writing code directly on the server. The only question is how abstracted away do you want that to be. With Jenkins, you're configuring it yourself. With e.g. Heroku, they've pre-configured it.
Deployment is one of those things that you should generally leave alone once it's working unless there's a compelling reason to change it (i.e. you require new functionality). Migrating your deployment tool for the sake of using the latest hotness is at best pointless, and can easily result in critical infrastructure getting broken.
That doesn't really look right to me. The point of the arrow syntax is that you're dropping all the fluff around a function expression, leaving just the simple mapping from inputs to outputs (i.e. `x =&gt; x + 1` just expresses a mapping from any x to x + 1). Putting a function name directly in front of the argument list is weird in that view. Instead, the logical thing to do with an arrow is to assign it to a variable, like any other value: &lt;?php class Foo { public $bar = fn ($x) =&gt; $x + 1; } (Which is already possible.)
Do you use Alpine in production? Unless you use it production, I think it's better to keep the dev OS and production OS the same.
I think you must be working on a small project. Synced folders are slow as balls, even on an SSD. You won't notice how long the uploads/downloads take because it's probably only a millisecond or so, but when you *run* that app and it tries loading 300 files all at once, you will notice your page loads are hella slow.
I ran into this problem too. Solution: don't use synced folders. I've found two solutions that work pretty well. (1) If you're using PhpStorm, set up automatic uploads to vagrant. (2) use `lsyncd`. I haven't tried it, but if you need 2-way syncing, you can probably use `unison`.
I use vagrant. If you're working on a serious/big project, I strongly recommend it. It's important that your dev environment closely matches your production environment. I can be a pain in the butt sometimes, but I still think it's a must.
&gt; So functions can have their "fluff" dropped, but methods can't? Why? Well for one, we're not changing of the syntax of regular functions, only anonymous function expressions. Function *declarations* have not changed, and similarly I would not expect method *declarations* to change. But stylistically, I also don't like it. From an imperative/OOP programming language point of view, the following makes sense: function inc($x) { return $x +1; } Since in this world view, functions are this special language construct, which are invoked with some data and "return" with some result value. The other world view is the functional one, where this makes sense: $inc = fn($x) =&gt; $x + 1; I.e. functions are values like any other, and are therefore assigned to variables like any other. Your method proposal mixes these two in a weird way. &gt; Heh. No. Oh, right, PHP still has those stupid restrictions on property declarations. Guess I've been coding too much JavaScript. Seems to me like more reason to push for better property declarations.
Briefly tried Deployer, hated it. There's *way* too much magic going on there. The documentation is crap. You have no idea what it's doing under the hood. The recipe system is garbage. Include a random file and it just brings some random functions into global scope and adds a bunch of random tasks? No thanks. I ended up writing my own and just hooked it into a Laravel command. Not that I love laravel either, but there was no sense adding another CLI tool when I already had artisan. Only took about 100 lines of code with phpseclib and now I know exactly what it's going to do to my server.
If you want to pay for the best product use PHPStorm. If you are cheap like me and you don't believe that you need super fancy top of the line IDE features to do good development use Eclipse for PHP which is IMO the best open source freely available platform. I had to tweak the dark theme to my liking because I am a big fan of high contrast and I couldn't find a ready made theme that was perfect but it was a really minor inconvenience. Edit : I just felt like adding that doing a set up such as [this one](https://mattstauffer.co/blog/sublime-text-3-for-php-developers) in sublime text could be a really nice set up too as it will provide with a lot of productivity increasing shortcuts.
thanks a lot! wow that is an incredible article btw
That's 90% of the benefit of the new arrow syntax. You don't have to explicitly import everything into your func. This is incredibly useful in JS.
It appears so. PHP makes a copy of the var, JS does not.
Yes, I do. It's been rock solid. My DE boots directly from iPXE which is a mirror of my ideal working environment for production servers. People's eyes roll around when I tell them I serve production from Alpine, but it's perfect for me, and is __crazy__ lightweight. My consumers don't even notice the difference. Just had a request last week for H2O webserver with PHP 7 support. Was able to setup in less than 3 minutes and the server handles a crazy number of connections because of the low overhead and the high throughput of the server.
All the fun functions in JS are on the array prototype too, so at least they have that in common.
&gt; That's not a rational reason... there's nothing objectively better about having a function body be in curlies, rather than followed by an arrow. I wouldn't say that. There's a reason for the choice of symbol (an arrow). `x =&gt; x + 1` reads "map the part in front of the arrow (x) to the part after the arrow (x + 1)". It's borrowed from the mathematical notation "x ↦ x + 1". It's inherently an expression, rather than a declaration (a statement). A declaration in mathematical terms would be something like "let f = x ↦ x + 1", i.e. define a variable that is assigned the function expression. To anyone who's familiar with this notation (people who are used to functional programming languages for one), the syntax `fn f($x) =&gt; $x + 1` would be illogical and confusing. If you want a shorter function/method declaration syntax, just pick a different symbol. Maybe just `fn f($x) = $x`.
First time I've heard of Alpine. As long you can easily install PHP, Nginx, Node and maybe a couple other things, I'd be happy if it's as stable and fast as you say. Does it have a package manager like apt/apt-get?
I use Sublime (an editor) together with a few other tools/plugins that afford some of the features I used to have with Visual Studio/C#. Its plugability is a bonus when editing Javascript. I've used PhpStorm on occasion to facilitate large refactors – the refactoring tools have nothing on Visual Studio, as PHP is antagonistic towards static analysis, but it does a reasonable job given the circumstances.
Well, the arrow isn't that important, it can be "=" when there's a name, but visually this looks even more confusing: fn concat($x, $y) = $x . $y; Because it looks as if the expression is computed immediately and its *result* is assigned to the function. **EDIT:** To match other expressions with optional block statements (like "if", "for", "foreach" etc.) we can skip the arrow/equals completely, that'd work best: $mul = fn($a, $b) =&gt; $a * $b; fn mul($a, $b) $a * $b; class Example { fn mul($a, $b) $a * $b; } Which means my initial example would look like this: class Decorator { private $super; function __construct($super) { $this-&gt;super = $super; } fn doThis() $this-&gt;super-&gt;doThis(); fn doThat() $this-&gt;super-&gt;doThat(); fn getFoo() $this-&gt;super-&gt;getFoo(); fn setBar($bar) $this-&gt;super-&gt;setBar($bar); } Makes one think... why have arrow at all with closures, either. 
Which behind the scenes is moving your code around with SSH, just hidden from you.
AFAIK Laravel has it's own deployment script (remote task runner), [Laravel Envoy](https://laravel.com/docs/5.3/envoy)
Yeah you're right, not sure what I was thinking, clearly not with it today... I think the only times I've used arrow function has always been like this (x, y) =&gt; x + y; (z) =&gt; z.length; so hadn't actually occurred to me
thank you. if you are used to VS and you like it so much, why have you not considered PHPTools for VS?
Use *nix-like OS if you would go deep with modern web development, ex: Ubuntu. It plays nice with Vagrant and Docker, and with some other webdev stuff like Nodejs, Rails, etc.
An amazon EC2 instance?
Any source on "MariaDB already **replaced** MySQL in Debian testing"?
Google it! Or a DigitalOcean instance. Quite similar. Might be a bit easier in signing up or so. Also Google it.
A "cloud server". https://aws.amazon.com/ec2/ You make it, you do what you have to do for the day, you delete it, you pay for whatever resources you used. 
https://packagist.org/packages/jrbarnard/hookable I released this package recently that provides a trait to allow you to make classes hookable, by this I mean in methods you can specify to run named hooks, then it will run the various hooks registered to that name. (Think of Laravel eloquent model events) It's pretty simple, but can be quite useful, especially if you're building something with a lot of abstracts and generic classes. (My original use case was an API where all the controllers used a generic CRUD controller, I didn't want to override full methods, so wrote this). Let me know any thoughts / feedback etc
This syntax is starting to grow on me… maybe `|params| expr` is better than the `fn` prefix. Perhaps it's better to still include `=&gt;` to help separate the parameters from function body, particularly when including types. array_map(|Deferred $deferred|: Promise =&gt; $deferred-&gt;promise(), $deferreds); // vs. array_map(|Deferred $deferred|: Promise $deferred-&gt;promise(), $deferreds); It also helps the case without parameters: `|| =&gt; $x`
Amazon also has a VPS service for $5 a month: https://amazonlightsail.com/
Same. Slightly fancier, use a shellscript that pulls a list of my app servers from the linode API. But it basically is doing `git pull` on all the servers.
NFS is considerably faster. Still nowhere near native speeds, but a large step in the right direction.
I currently work in a team where everyone uses [Homestead Improved](http://www.sitepoint.com/quick-tip-get-homestead-vagrant-vm-running/). One dev is on Windows, two on Linux, I on OS X and sometimes Windows. All environments are perfectly in sync, we use one box per project and currently have three active projects. We didn't want Docker because of a reliance on yet another tool on top of everything, and the baggage that comes with it, and this Vagrant approach worked really well so far. Can recommend. Do let us know what you come up with, though!
Wow, really? You switched to your own project? Tell me more.
With a reasonable system (i5, 16gb RAM), and 64 bit PHPStorm, the latest version runs sweet as a nut on my system. No slow problems at all.
Been using Vim for PHP development for almost 2 years now. Zero issues.
I think there's a mistake in the language codes. Under RFC 5646, which uses ISO 639-1 language codes, Japanese would be `ja`, not `jp` (the latter is the country code for Japan, not the language code). Edit: Also, Norwegian Bokmål's language code should be `nb`. `nn` is the code for Nynorsk. You might want to check the rest of your language codes.
I love digital ocean. Also starting at 5 dollar per month. The interface is a lot cleaner than aws. 
If you mean application cache, that should be external to your project ideally, something like /tmp/my-project-cache
You've convinced me. +1
&gt; I think this looks less goofy. Frankly I think the arrow is fine there, just trying to find middle-ground with parent poster :-) &gt; `fn getFoo(): Foo [];` would now be ambiguous Yup, good point.
You should get a carbon monoxide detector.
Still on the front page: https://www.reddit.com/r/PHP/comments/5r7idl/what_is_your_php_dev_environment_like/
I did not know this, thank you!
Not the parent, but I use VirtualBox, and just leave the file system on the VN, and mount it over ssh from the desktop machine (whatever that happens to be running) for my IDE.
I used PHP for a long while and then used python for a bit. Working at an agency, I wrote a lot of different languages. 
I use the following to setup my local environments using the osx built in php/httpd. Whenever i want to setup a new site i simply run: php setup.php /Projects/frightersite frightersite And it will setup the httpd vhost with the proper docroot, mysql database and host file stuff. &lt;?php echo "\n\n"; $fp1 = fopen('/etc/apache2/extra/httpd-vhosts.conf', 'a'); $fp2 = fopen('/etc/hosts', 'a'); $folder = $argv[1]; $host = $argv[2]; $vhost_data = '&lt;VirtualHost *:80&gt; DocumentRoot "' . $folder . '" ServerName ' . $host . '.local DirectoryIndex index.php index.html &lt;Directory "' . $folder . '"&gt; AllowOverride All Allow from all &lt;/Directory&gt; ErrorLog "/private/var/log/apache2/' . $host . '.local-error_log" CustomLog "/private/var/log/apache2/' . $host . '.local-access_log" common &lt;/VirtualHost&gt;'; if (!isset($argv[3])) { $conn = new mysqli('127.0.0.1', 'root', ''); $conn-&gt;query("CREATE DATABASE " . $host); $conn-&gt;close(); echo "Created DB named " . $host . "\n"; } fwrite($fp1, "\n\n" . $vhost_data . "\n"); fwrite($fp2, "\n127.0.0.1\t" . $host . ".local"); fclose($fp1); fclose($fp2); exec("apachectl restart"); echo "Created Host http://" . $host . ".local with docroot " . $folder . "\n"; echo "Apache Restarted\n\n"; 
Hey, I just got around to watching this tutorial and I gotta say... Docker is blowing my mind... Wtf is this wizardry?
Aw... that was Afrikaans not carbon monoxide poisoning...
Wait... You're the creator.. Thanks man this tutorial is amazing.
I'm going back to when I didn't know about pre, so pre-pre, about 5 mins ago. Ffs. 
What code is it moving? Use Docker images and run containers from them. You only tell the PaaS the image and tag, there is no code moved. So no SSH really.
Docker / Mesos / Marathon. Not really deployment tools, but if you're doing Docker right, it's development environment, CI, infrastructure, deployment all rolled in to one. 
If you tag docker releases then you can change the version from `:latest` to `:&lt;version&gt;` in `docker-compose.yml` and it pretty much allows a rollback. If you need to do a database rollback, then you might need to do that separately depending on how you have that implemented (migrations like in Laravel/Yii would do that). It does disrupt users if you go with this route, but one way of counteracting that is spawning a container with the new version first, then shutting down the previous one. [This comment](https://github.com/docker/compose/issues/734#issuecomment-167392770) kinda covers that use-case.
I'm on a mac, and I'm interested in building cross-platform tools that can be integrated into the build process (rather than just supporting a single app).
may be..
I have fixed it. :) Thanks for your help.
I wanted to cover a wide range of languages. The text which I'm using is on of the most translated text of the world. I wanted to use the same language files for every language model. That's the reason. The results are quite good but not perfect. Feel free to use your own language files. Adding material would definitely help to improve the results drastically, but not exponentially. It's coming already with a "precompiled" language model. :)
Java is horrible. See how easy that game is?
This is quite nice, but I really wish they'd add a feature like projects in BitBucket to group repositories up. This could do something similar, but the approach that BitBucket took there is fast clearer.
lol. It was not spam.
This randomly appeared while I was working on a project last night. For a few sweet seconds it was the most popular project tagged ZSH. Great feature though 
&gt; I just can't understand why create a linux virtual machine for every project, isn't that too much? I have a mate that thinks the same way. He says that the "only" advantage mimic your webserver isn't a reason to use it and he may be not wrong, but the fact is, that it's not the only advantage. I myself love to use either XAMPP or Vagrant. Normally Vagrant helps to have a easy to install and everywhere the same base server for your team.. this means you can configure it once, share it with your mates and everyone have 1:1 the same setup. There won't be something like "I get an error here..", because everyone has the same conditions. I use it for my own projects, so I don't get any advantages in this direction. I just can save the Vagrant build any install it very fast somewhere else. This is one advantage.. but this is also not an advantage I often use. I mainly use it to learn how to work with it and also to get better with Linux. I think you can configure Xampp's Virtual Hosts that you can use a real domain too (and edit the hosts file so it works). Xampp is very cool and is fast installed too, but I prefer Linux+Nginx as a server (without any special reason). If you want to use Vagrant, I would recommend using it with the help of [PuPHPet](https://puphpet.com). PuPHPet is just a GUI that helps you to configure Vagrant without big knowledge. You say (click) what you want in your system and some pre-configurations and in the end, you get your Vagrant files. Just copy it anywhere where you love you have your files saved. In the first page you have to configure where your files located are (shared folders). You don't have to use that feature, but it's very useful, because you can use and manipulate your files on your original operating system and use IDEs like PHPStorm while still having them in use for your webserver. Just write your dir in "folder source" like "C:/local/workspace/BASENAME" where BASENAME would be the name of the whole thing. Of course you can create more than one server, but I like to have one server with one big name that contains every project. The "Folder Target" can stay "var/www", but you also can change it to something like "/home/BASENAME" (there will be a "/home/vagrant" too). Just don't use the same in productive.. I think "/home/..." isn't the best-practice, I remember a list with a intended folder structure. 
This is where Docker shines! Projects inside containers share resources. And you only need 1 vm running, if you are on Windows. None on Mac or Linux. It is a bit tricky to get your head around in the beginning. But it helped to greatly improve my development experience.
One human said some shit. Is the speaker just a human holding a microphone? I'm asking because humans always say some shit from time to time (me 2). Don't be surprised next time.
no surprise there, working as intended. I don't see what other results could have been expected.
in-house PHP script. When we wrote it neither deployer nor rocketeer were around. works similarly - scp to server into releases &amp; symlink to `active release` = 0 downtime deploys.
you're welcome!
No. Organisations are not a good way to handle this. They take up tons of usernames when they don't really need to. Consider you're an agency, or a freelancer, which of these two scenarios would you prefer: Using Github: * Make organisation for agency (and pay for private repos) * Make organisation per-client (and pay for private repos for each) - just to group up the repositories! * Make repos in each organisation Using BitBucket: * Make organisation for agency (and pay for more users if necessary) * Make project per-client * Make repos in project On Github a lot of names for projects are already taken by either users or organisations that aren't active. With BitBucket, you can call a project whatever you like, and it's scoped to your own user / organisation. Even for personal projects, I've got about 10 organisations on the go just to try organise my repos. Another negative effect of this is that if you're trying to show off your Github account to a potential employer for your open-source endeavours they're probably not going to look at your organisations either.
Okay. I confess that I assumed that standard was for applications as well as packages. Guess I should have read the title:) Does not make much sense to have a temp directory in a package. The only thing I might suggest is to define what a package is as opposed to an application. Especially since applications are sometimes deployed using Packagist.
Yes I am using Docker for Mac. I have a script that re-mounts everything using NFS but only works with docker-machine rather than the newer 'native' client. I haven't tried the latest builds, I may have a look at the latest beta to see if there are any improvements. If you have another script that can help, it would be appreciated.
I dunno, man... I'd prefer not having product placement show up at random in my logs. &gt;Spread Your Message &gt;$250 or more per month &gt;You love PHPStan and you want to grow the audience of your dev-related product. This tier gives you an exclusive place to spread your message - everyone will see it when they run PHPStan. In the terminal on their machine, in the logs of their continuous integration server, in Travis CI logs of popular open source projects. &gt;Your message will be showed for a month each month you're a pledger of this tier.
Ahh right, I misunderstood
I'm using it by it's own images, not including them into my web app php images. My php image (based on php-fpm) only consist of some required php extension and my web app source code. I'm using Docker Compose to create my project's development environment, wiring up images like nginx, php-fpm + source code, database, composer, codecept/phpunit, etc.
I'm trying different approaches with community funding. There wasn't anyone interested in this yet and I don't still know if it's a good idea. I'd like to work on PHPStan fulltime while being able to support myself and my family.
Author of the article is a different person than the author of PHPStan.
The below script is what I use in the office iMac which has a mechanical drive and terrible read/write performance, whereas my home hackintosh is on SSDs and i've never had a problem with it. ❯ cat .docker-patch.sh #!/bin/bash # Tune fsync perf for docker mac per # https://github.com/docker/for-mac/issues/668 # NB: You must be on Docker 1.12.2-rc1-beta27 or greater cd ~/Library/Containers/com.docker.docker/Data/database/ f="com.docker.driver.amd64-linux/disk/full-sync-on-flush" git reset --hard cat $f echo "false" &gt; $f git add $f &amp;&amp; git commit -s -m "Disable flushing" echo "You should now restart Docker for Mac." Hopefully this helps you!
So I read through your methodology paper (https://github.com/php-pds/skeleton_research). I did not see any effort to single out application packages. Which is understandable because I suspect it would be difficult. Nevertheless it seems to me that most applications generate temporary files (caches, sessions, logs etc) so I guess that application packages would have a fairly high percentage of tmp directories.
&gt; If the package provides a root-level directory for web server files, it MUST be named public/. Is it uncommon for packages to provide multiple root-level directories? For example one for the api, one for compiled assets, one for the admin dashboard, etc. I did this more than once, and didn't feel it was worth splitting the application in multiple repos. If it's that uncommon then I guess it would make sense for pds/skeleton to not go too much into these kind of details.
Performance for example.
_A lot_ of stuff is built with Symfony components. Not saying you're wrong about jobs for Symfony, but it's good to have a solid understanding of the stuff underneath the framework.
The [PHP repository](https://hub.docker.com/_/php/) has alpine versions of their containers. [Here](https://github.com/docker-library/php/blob/9abc1efe542b56aa93835e4987d5d4a88171b232/7.1/alpine/Dockerfile) is the alpine 7.1 Dockerfile [Here](https://github.com/nginxinc/docker-nginx/blob/e950fa7dfcee74933b1248a7fe345bdbc176fffb/mainline/alpine/Dockerfile) is NGINX's mainline Dockerfile using alpine. [Here](https://github.com/docker-library/redis/blob/9db6cc1645465f134d03584dbbbd962ce822479a/3.0/alpine/Dockerfile) is Redis' alpine Dockerfile. [ElasticSearch](https://github.com/docker-library/elasticsearch/blob/ffaaf3283e47dcb732e90288a58757b87a8439a7/5/alpine/Dockerfile) [Postgres](https://github.com/docker-library/postgres/blob/e43016225fea0cdf47ae1df0888885ae02a8a7f4/9.6/alpine/Dockerfile) [Node](https://github.com/nodejs/docker-node/blob/28425ed95cebaea2ff589c1516d79c60181983b2/7.4/alpine/Dockerfile) [HTTPD](https://github.com/docker-library/httpd/blob/a5ab6fb434c13a3578a2e7e6ce2cf30d66c625bc/2.2/alpine/Dockerfile) [Logstash](https://github.com/docker-library/logstash/blob/3e0af5d894e622dadf08ec849386ed64da23bb4b/5/alpine/Dockerfile) [Jenkins](https://github.com/jenkinsci/docker/blob/c8ef1879caef495f692b8c46eeb1de88a3783886/Dockerfile) [Python](https://github.com/docker-library/python/blob/ad4706ad7d23ef13472d2ee340aa43f3b9573e3d/2.7/alpine/Dockerfile) [Ruby](https://github.com/docker-library/ruby/blob/e32433a12099d96dc5a1b28a011b73af4f17cfff/2.1/alpine/Dockerfile) [Go](https://github.com/docker-library/golang/blob/bfbd521de2942d10d96b14f99c491536490db018/1.6/alpine/Dockerfile) [...Docker](https://github.com/docker-library/docker/blob/b202ec7e529f5426e2ad7e8c0a8b82cacd406573/1.13/Dockerfile) And you can browse the available packages [here](https://pkgs.alpinelinux.org/packages)
Yea, I wanted to like it but there were too many times I had to ask "What the hell is meant by 'vaguely worded configuration option'?" I'll pull up the docs "oh god"
&gt; I did not see any effort to single out application packages. Which is understandable because I suspect it would be difficult. I suspect the same. ;-) &gt; I guess that application packages would have a fairly high percentage of tmp directories. My intuition is that you're correct. Even so, *both* application *and* library packages (and I presume other kinds of packages) have some need for the directories in the standard. And other kinds of directories are not dis-allowed, they are merely not assigned standard names. (Hope that makes sense.)
Yeah, seems a little counter-intuitive at first, but… &gt; [The destructor method will be called as soon as there are no other references to a particular object, or in any order during the shutdown sequence.](http://php.net/manual/en/language.oop5.decon.php) Since there is still a reference to the object up until after the assignment is actually made, that means the destructor isn’t triggered until after the assignment is made. So the assignment *is* made, but then the destructor is called after that, which changes the value of $a.
&gt; Is it uncommon for packages to provide multiple root-level directories? Hard to tell without setting up a new research process. Having said that, the repo *should* have all the data you would need to look for them, if you felt like scraping through the file listings and counting the number of times more than one identifiable web-server-doc-root directory shows up in a repo.
Use an EOL'd version of PHP so an update doesn't accidentally cause a BC break.
Caching is a great tool. However going into a project expecting Cache to solve bloatware means you are careless for the code base. Many answers about response time comparing popular frameworks today in PHP have responses "with cache you can..."
DPC, because... amsterdam.
Yep, it's just an idea at this stage.
Initialising objects via $a-&gt;b-&gt;c = "d"; // stdClass created Ditto arrays: $a["b"]["c"] = ["d"]; Changing the case of classes/functions throughout your script: class FooBar { function bat() {} } $a = new foobar(); $b = new FoObAR(); $c = (new fOObar())-&gt;baT(); 
[removed]
Just note the comical irony of that post...
I'd also point out that even without teams, you could be working on multiple code-bases with different, even conflicting, requirements. I work on one legacy code-base that would break horribly on PHP 7.0 or newer and simply isn't worth the effort to bring forward. Its remaining shelf-life simply isn't long enough. Meanwhile, there's another one that requires 7.0 or newer to work. With VMs, it's simple to accommodate both of these. Without VMs, it's be a major headache at the very least.
Everybody needs to cache at some point. If you don't need to cache yet, you either don't have enough data, or don't have enough traffic to need it. Of course a simpler architecture and good SQL will push that point out further, but caching is an essential strategy, and if you don't plan for it it can be painful to retrofit in.
Debian Testing with XFCE and PHPStorm. Each project has a Vagrant box dedicated to it that runs Debian Stretch with PHP, MySQL, etc set up and ready to go. I have a base VM image with the minimal set up for a typical PHP (Laravel) project to work out of the box and then install additional extensions or useful CLI tools with my provisioning scripts.
Make sure you save the existing file as index.php.bak
Using ext-mysql :D
And 90% of the WordPress answers/help sites... Yuck....
because telling me to 'google it' after i already got the answer is stupid. only an asshole does that.
&gt; acceptable to have multiple doc root dirs inside public/ and still comply to the pds/skeleton standard If I'm reading you right, you're asking if: public/ api/ admin/ other/ etc/ ... is compliant. If so: the answer is "yes": (1) the contents of `public/` are intended for serving on the web, and (2) the structure of the subdirectories and files in `public/`is intentionally undefined by the standard. Does that help? UPDATE: Also note that the standard does not say that `public/` *must* be a document root, only that the files therein must be intended for serving on the web. (It *can* be a document root if you want.)
great feature, well done 
PSR-16? Did I miss a ton of PSRs? 
Use string concatenation to build sql queries. 
Yes, that's exactly what I meant, and yes, it does help, thanks!
Are we Java now?
Good points. Great to see that someone out there advocates against static.
That really depends on the project size :p
Funny, I see a lot of Symfony jobs :) As for wordpress, stop spreading the cancer already.
What is bad about that?
Why?
&gt; haven't. There are quite a few drafts. You can see the list of all here: Ah! I was confused, because I know there was one already done for caching. Of course last time the PSR was ripped apart because it was limiting to, since caching could work all sorts of ways.
That's when you use .php.tmp or .php.old instead. Duh.
It turned out to be a hoax.
you don't even need a query builder to avoid string concat, you could always use bound parameters with PDO or mysqli. 
That can work too, but if you don't leave the `.php` extension then sometimes apache won't execute the file. /s But really now I am trying to figure out if I would rather have apache execute it or have it just serve the source... there are so many bad things on both sides 
Wait I got this. Stick this in your `.bashrc` edit() { NOW=`date +"%T"` if [ -z $1 ]; then echo "Parameter not passed!" else cp $1 "$1.$NOW" nano -c $1 # or vi, vim, emacs, pico, etc. fi } Usage: `edit blah.php` 
What I remember seeing throughout the years (not strictly related to PHP): - implementing some sort of RPC by doing eval($_GET['command']) - have the testing environment use the production database - have the testing environment as a dev/ subdir in the production application - connect to the testing application by going to http://prod-domain/dev/ - secure access to the testing application by doing `if (!in_array($_SERVER['REMOTE_ADDR'], $allowedIps)) die('Not allowed');` - have an abstract Singleton base class - use reflection in Singleton base class to identify the correct class that needs to be instantiated - have an abstract Magic base class that provides implementation for __get(), __set(), __isset(), __unset() - rely on debug_backtrace() in Magic class to figure out where the non-existing properties are being called from - have the Magic class extend the Singleton class - make constructor public in Singleton class - implement an abstract method named `constructor` in Singleton class, which is executed in __constructor - code in French - comments in French - code in unidentified language - code in unidentified encoding - storing dates in db in VARCHAR columns - doing `SELECT ... WHERE TRIM(date) =` because the dates are stored with accidental spaces - storing country codes in BLOB columns (trivia: 0x4652 is the contry code for France) - storing htmlentities($value) in database - using html_entity_decode() on values fetched from db when building CSV files - storing the string `""` instead of an actual empty string in database - `if (empty($row['column']) || $row['column'] == '""')` - index2010-04-05.php - index2008-01-20.php3 - have applications interact with each other by using SOAP - have a SOAP wsdl file defining a single `getData($args)` function, used for every operation - reuse said wsdl file everywhere because nobody knows how to write wsdl files - separate the M from MVC as a separate application - have the VC call M through SOAP - increase memory limit because M returns too much data over SOAP - implement an internal pagination system in M to avoid remaining memory limit errors - implement a feature that sends an email notification when the export is ready to be downloaded, because it takes too long to build the export using the internal pagination system - `if (user_exists_in_db($_POST['user']) &amp;&amp; password_exists_in_db($_POST['pass'])) { login($_POST['user']); }` 
On Mac I use Laravel Valet (https://laravel.com/docs/5.3/valet) it was nice and easy to set up, uses Nginx, PHP7.1 and optionally MariaDB. It runs natively on the Mac so it isn't slow or cumbersome like a VM &amp; `vagrant up`. Everything runs neatly from the command line. On PC I use Laragon (https://laragon.org) which has been mentioned already. Really easy to set up and includes all of the modern tools you'll likely need. Comes with bundled apps like a customised Cmder install with Git, Composer, Node already included and accessible.
Thanks, I'm planning a talk. In planning the talk I decided to just write blog posts. I put it on reddit to get honest feedback. 
I already read it: http://www.wiley.com/WileyCDA/WileyTitle/productCd-0764543644.html
PSRs aren't the ultimate truth of PHP. If you like .class.php, you can do whatever you want.
"stick this snippet into your functions.php file and you're good to go!" edit: often with zero regard for the fact that all it takes a theme update to render the code useless anyway, because lord knows they don't teach child templates or simple plugins on those sites.
Ahh defining classes in the middle of html documents. Love it. 
&gt; Sorry, I should specify that i mean using that as your only debugging method. Avid var_dumper myself. That said, hooking up XDebug to PHPStorm and using a proper step debugger with proper breakpoints, has completely changed my life. 
What is the problem with static method vs instance method in certain cases? Is there some performance difference? Genuine question as I'm relatively new to PHP. I recently implemented a static "delete" method for an object. The reason for this was because a single uid is passed and required for the delete query; it sort of felt wasteful to create new object instance and then call the method on it and not use the object after that. 
&gt; Changing the case of classes/functions throughout your script That would only be allowed to work on php builds that ignore case, which to my memory is really only by default enabled on Windows, and even then when using stuff like Xampp on Windows, is turned off now. So hopefully that kind of problem becomes a distant thing of the past. 
By that logic we should stop recommending people use Linux. It's too easy to `apt-get install telnet` and set the root password to `letmein` WordPress itself isn't terrible. The problem is that with 27% market share you're going to get a metric F-ton of developers trying to target that platform. Some of those devs are going to be sub-par. Would'nt a better solution be to educate your clients on not downloading/installing every bad plugin they see on the registry?
http://verraes.net/2014/06/when-to-use-static-methods-in-php/ It's very niche to want to avoid Static methods. Because PHP doesn't have namespaced functions (yet), a utility class (serving as a namespace container) full of static methods is often used. Generally you don't want to mix static members with your non-static, in a class. It gets you into trouble. That being said, I prefer static methods when I can, as they are more testable without any sort of stateful dependencies. Moving your validation, data transforms, etc into named static functions so that your main execution path reads (rather than reasons) via method names is my goal in considerate coding. 
I wouldn't worry about it. The website is clearly written with a heavy bias
It depends on the filesystem, generally speaking. I believe only Linux ships with case sensitivity on by default (and maybe only some distros at that). And, helpfully, it will only break the first time since it really only matters during autoloading.
I once did a calculation in PHP by iterating over a SELECT result in a way that was O(n^(3)) if memory serves. Being sure to "clean up the connection" by closing it after every query, of course. This could have been done with a single query very easily. Page took about ~1.5min to load about 1kb of data. So... that.
&gt; Initialising objects via &gt; &gt; $a-&gt;b-&gt;c = "d"; // stdClass created Oh wow, I had no idea that was possible. It does produce an E_WARNING, at least.
Whoops, I misunderstood initially. It looks like lemminman got the link replacement; this one will prepend your site URL to all image paths: $data = preg_replace('|&lt;img src="(.*?)"&gt;|mi', "&lt;img src='http://mysite.com$1'&gt;", $data); This assumes the image paths are all absolute and on-site.
It exists, it's called w3schools. 
What are you guys' opinions on using MS Visual Studio for web development stuff?
Why is it bad to make a function static if its output is dependent only on the parameters? E.g. https://book.cakephp.org/3.0/en/core-libraries/inflector.html
It seems like there should be a way to do it in the replace, but I can't figure it out. I think the best way to do that would be to translate the question mark beforehand: preg_replace('/href="(.+?.php[^"]*)"/', 'href="$_SERVER[\'REQUEST_URI\']?p=$1"', strtr($html, '?', '&amp;'));
what the fuck 
Oh my! 
I think so as well. I've got a 750-ish line PHP script that basically just handles file uploads. It's procedural, all one file. It's not hard to go back and add/edit.
You just described the average WordPress plugin. 
Sorry, I did. This was an inherited project, and although fixing it took just a few minutes, no idea for how long it was there, and no way to check. There was no version control, everything was done through FTP.
this is more like a bad news..I mean 2.0.11 after so much time..it should be already 2.3 or 2.4
why not?
If it takes more than a minute I usually try to move it into a queue.
The salt is not stored separately to the file system by PHP. The return value of password_hash() contains the random salt in plain sight, and you store that whole return value in your database. It's explained [here](http://php.net/manual/en/faq.passwords.php#faq.passwords.salt).
We all have skeletons in our closet. 
I would be OK with this if I saw it. Most of the statics I see are done not because they are serving as helpers but rather because they are commonly used about the system. DI would probably be better for that case.
what's wrong with ci? 
No but putting in features, modernizing would..I mean I still remember before 1 and half year when deciding if we go for Yii 2..and after such time..almost nothing has happened whereas see the competition
For lists like `IN (1, 2, 3)` clause, you will still need to concat together a placeholder for each bound parameter in the list. There isn't a way to bind one variable/placeholder to represent the whole list.
Yes. Depending on the cache backend. Imagine if you were caching documents in s3 or some remote storage, you could make 1 call over multiple calls to get files back. 
Just woefully ancient development practices. Hasn't really kept up with the times. That said, I truly believe it's got its place, it's just way behind other frameworks like Silex and Lumen (for light development on shared hosting services). 
Check the announcement. There are both modernizing and features. Also, 2.1 is in development which will introduce some backwards compatibility changes as well to clean up bad decisions from the past.
Definitely. Redis supports fetching multiple keys in a single call. Doing hundreds of `get()`s can add up to a few seconds, whereas one `getMultiple()` would be under a few milliseconds.
mysql_*
Jesus fucking Christ I needed a good laugh Except now I want to gauge my eyes out
`eval($_GET['code']);`
what's the right way? 
Sanitise all GET requests if you have to use them. Don't just pass them straight through to the database. Really you should be using POST instead of GET. You also shouldn't ever use a COOKIE value to set an admin, you can manpulate it on the client PC. SESSION is far better.
actually using it
Amen. Every new dev complains that I have E_NOTICE enabled.
And since the salt is stored with the password in the db, any php server using the same data will work correctly. Now you may wonder, the salt is for security of passwords right? Why are you storing it in plaintext with the hashed passwords??!? Because its for the security of stolen password databases. Hashing is one way, but if you make a hash table where you hash every combination of possible passwords youll eventually get a matching hash and thus (kinda) know password. But, salting changes how the same password is hashed, thus you would need to make a hash table for every salt which is a real pain and costly. But for your php app, it just needs to get the password the login form is trying, hash it with the salt it found with the stored password and see if the hashes match (more or less).
I still get that from time to time where you're doing stuff with the data after selecting it, and about 15 minutes later you wonder why you've just reinvented a join.
Great list! I'd definitely add the following monstrosity too: `extract($_REQUEST);`
and how do these query builders do this exactly?
Strange. It seems this just makes the app easier to hack. Ie - DB access: its all there; vs before they needed DB access and a local file system access. 
thanks! Now i get how it works. I dont get WHY its better vs local. Seems 1 data source = more risk; but I like not having to keep Crypt keys around ;) 
What's with the French stuff? Is this a major problem in the PHP world? I'm a public sector programmer so I haven't run into it.
&gt; Putting definition files (such as class and function files) and/or config files in the document root. Really, putting anything other than a bootstrap or index file in the document root. One of the saddest days in my career is when I finally just gave the fuck up on trying to explain to my boss that we should do this.
Boss moved an old site to a shared hosting server instead of the server he maintains personally. It's configured to dump all (E_ALL) PHP errors to a file in the root and there's no way to turn that off. Within hours that file was 200 megabytes. It took me literally 30 days of work to clean up most of them and then gave up and added custom error handling code that just deletes the file whenever specific notices occur.
Woah now what's wrong with var_dump?
Here's a quick script I threw together using DOMDocument and XPath. Hopefully this should shed some light on how you can go about structuring this without relying on messy regular expressions: //Example HTML $html = &lt;&lt;&lt;EOT replace &lt;a href="link.php"&gt;link&lt;/a&gt; with &lt;a href="/?p=link.php"&gt;link&lt;/a&gt; replace &lt;a href="login.php?action=register"&gt;link&lt;/a&gt; with &lt;a href="/?p=login.php&amp;amp;action=register"&gt;link&lt;/a&gt; replace &lt;img src="/path/to/img.png"&gt; with &lt;img src="http://mysite.com/path/to/img.png"&gt; EOT; $dom = new DOMDocument(); $dom-&gt;loadHTML($html); $xpath = new DOMXPath($dom); $linksAndImages = $xpath-&gt;query('//a | //img'); //Grab all &lt;a&gt; and &lt;img&gt; tags foreach ($linksAndImages as $element) { if ($element-&gt;hasAttribute('href') || $element-&gt;hasAttribute('src')) { //Basic attribute check $clean = new CleanAttribute($element); $clean-&gt;clean($element-&gt;hasAttribute('href') ? 'href' : 'src'); //Run the appropriate cleaner } } $cleanHtml = $dom-&gt;saveHTML(); //Get the new markup var_dump($cleanHtml); class CleanAttribute { private $el; public function __construct(DOMElement $el) { $this-&gt;el = $el; } public function clean($attribute) { $link = $this-&gt;el-&gt;getAttribute($attribute); //Original value $cleaned = $this-&gt;{$attribute}($link); //Run either href or src methods return $this-&gt;el-&gt;setAttribute($attribute, $cleaned); //Set the sttribute } private function href($href) { //Replace php file string with query string... return $href; } private function src($src) { //Replace relative path with absolute path... return $src; } }
Superfluous, perhaps. But PSR-4 can handle .class.php.
&gt; storing htmlentities($value) in database This wouldn't *still* be happening if there were one truly well written and *thorough* tutorial on exactly how to deal with utf in php.
Yeah but its array equivalent doesn’t. Also bad: `error_reporting(E_ERROR);` (on your development box).
&gt; if ($row['password'] = $_GET['password']){ FTFY
 //------------------------------------------ // Include the Common Useful Stuff //------------------------------------------ // GD: Be aware that the first few lines of func.generic.php automatically run extract() on both // GET and POST, emulating the behaviour of having register_globals enabled. // To quote php.net: // register_globals has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 6.0.0. // Relying on this feature is highly discouraged. // http://php.net/manual/en/ini.core.php#ini.register-globals // http://php.net/manual/en/security.globals.php // AH: BUT most admin includes rely on this behaviour so either you change them all on your own time for free or stop nagging. include_once ('func.generic.php'); // GD: Undo the extract() done on GET and POST by default in func.generic.php // This must come before anything else. undoExtract();
^shit
I was 19 and we all do dumb things in college. I have no regrets. 
There's DrupalCon Vienna in Sept 2017. 
Oh come on.
A wrong implementation of this made Drupalgeddon. 
&gt; Because PHP doesn't have namespaced functions (yet) Yes it does, and has for years. They just don't trigger autoloading, so you have to either require them on-the-fly or use something like e.g. Composer's `files` directive.
This reply gets the cake for highest WTFs/line. 
Since 5.6 (according to php faq) - [I see](https://www.sitepoint.com/php-53-namespaces-basics/) that a lot of blogs and guides talk about it being possible since 5.3?
UTF-8 works just fine out of the box unless you're doing byte-length operations. MySQL at least has some kind-of-stupid defaults but nothing terribly problematic. What that's usually trying to address is XSS attacks, and that's always a pain in the ass. The meta-templating systems (e.g. Twig) are all kind-of-shit to work with, and the ones that are mostly native PHP generally still require you to remember to escape things. My personal preference is to just turn everything into an API that emits JSON and let the front end framework deal with it. Excepting the need to let users provide HTML directly, it basically routes around the problem entirely.
They probably think its too hard to use isset()
I still fight with people that think web application code needs to be owned by the PHP/apache/nginx user and/or think that self updating web applications are a good idea.
[removed]
All of my code would be in "PHP The Wrong Way". And that's how I like it!
Maybe he wants to measure them
I personally try to keep everything in English.
&gt; *Using global `$var` inside a function or method, especially when $var has not been initialized yet.* MediaWiki does this too: https://github.com/wikimedia/mediawiki/search?l=PHP&amp;q=global+%24wg&amp;utf8=%E2%9C%93
http://www.phpthewrongway.com/
Wait, isn't that just-in-time compilation? 
Praise the ?? operator
"Woah now what's wrong with var_dump?" It's okay if you just need to check on some values, but it's hard to track more complex issues with it. You can (and should?) use an IDE and a debugger for that. It'll show you the exact state of your application at certain breakpoints that you can define, making your life a lot easier. Personally, I simply love PHPStorm and would recommend that one. Watch a YouTube video or two on debugging PHP with it, it'll make things much clearer if you don't know break points etc. yet. (Edit: PS: I still use var_dump a lot. Old habits die hard.)
It's better to use prepared statements if you don't want to get hacked by an 11 year old with sqlmap. https://paragonie.com/blog/2015/05/preventing-sql-injection-in-php-applications-easy-and-definitive-guide
I guess it's because it wasn't designed for developers. "Anyone can use WordPress." The day we switched from WordPress to Craft CMS was a great day.
Same here. We have a pretty huge CodeIgniter project and it's a little wordy and sometimes awkward to work with. I agree with /u/DJDarkViper that e.g. Silex is a much better choice nowadays.
You dont actually think /u/EspadaV8 is wrong do you? Wordpress is the definition of an over engineered php project by developers who follow terrible practices, enabling even more terrible practices by plugin developers.
This happens in far too many closed source projects too. If you are ever a part of a software procurement process consider putting in a requirement for English usage in the source code as a part of the spec.
A DNS Alias record to phpclasses.org.
*the high-end paid plugin
The problem with this approach is that I can't enter the name of the backup file in the browser to quickly check the code.
yeah if you're fan to roll your own autoloader... Otherwise Composer is the de-facto standard for autoloading.
I'm always forgetting that :)
I very consciously don't use prepared statements because afaik there's no way to see the entire query as executed by the DB server from PHP. That makes tech support cripplingly difficult. As with everything, it's all trade-offs.
Yes, so what if it says "PHP's not dead"? I should definitely look into it, might be an excellent spaghetti sauce recipe. 
I was complaining mostly about code written in non-English. I don't have anything against French specifically, I'm sure there's code out there written in hundreds of languages. But code in French was what I had the opportunity to work on. It's not that big of a deal with code written in a different language, but it does sound weird to use Google Translate to debug an application.
I'm starting to think we need some more drastic measures against spam.
Thanks for this. The one reason I don't necessarily want to use this method is that it uses a lot more resources and is a lot slower. I am making a plugin that other users will be utilizing to connect to my page and this would bog things down 
I'm not French, which is why I was complaining. It was a project that was outsorced to the company where I was employed. The good part was that I learned a bit of French in the process :)
Any chance of changing the standard operator? (In PHP 8.0 of course.) The current behaviour is literally useless. 
&gt; Features: Readable: no annoying ; or $ to distract you, only the real code No
Using get_defined_vars() and extract() altogether to virtually propagate scope is a terrible, terrible idea for example. Using magic methods, in general, such as __get(), __set() or __unset() definitely make the code slower. More generally, you are hiding the real language behind something that's not that evident in the end. For example, accessors at the language level would be a good idea, anonymous arrow functions too, but it's not, and you're hiding behind your preprocessor a huge lot of complexity the developer doesn't know.
That's not a great excuse to keep writing bad code though. It would be within their means to write an abstraction layer of global functions that call actual class methods (similar to Laravel helpers and Facades) and throw deprecation warning as code is ported. The DB layer as only recently added mysqli and MySQL is the only DB they support. They actively hurt PHP upgrades by refusing to drop old and massively EOLd versions.
I'm not sure the array version is bad, personally… though I can't say I've found much use for it.
They have their uses. One of them is sorting by multiple columns, e.g.: usort($array, function (array $a, array $b): int { return ($a["name"] &lt;=&gt; $b["name"]) ?: ($a["date"] &lt;=&gt; $b["date"]) ?: ($a["location"] &lt;=&gt; $b["location"]); }); Which sorts by the name column, or if that matches, the date column, or if that matches, the location column.
What's "kind of shit" about Twig?
I remember when register_globals got updated from being ON to OFF by default in php.ini files. Like going from PHP3 to 4 I think, but instead of taking the time to learn proper scoping back then, the quick fix would just go and turn it back on... Most wtf as of recent memories was actually inheriting a code igniter project where every single database call was in a single Model.php file....there were about 15 tables in the project...and one model..called Model..to access them.
Good old `rm -rf` mistakes.
Since I follow you on Twitter, this comment is perfectly hilarious! Made my day! Looking forward to the article dropping on SitePoint soon :)
Bloody autocorrect. I typed guoge by mistake and it switched to gauge. I mean I still spelt it wrong, so there's that...
With a giant switch statment 1000's of lines long. switch ($_GET['page']) ... 
A few years back we had a client complain about a report that was taking upwards of 30 minutes to generate. After taking a quick look at it, I realized that whoever had written it was performing a subquery with multiple joins in the select line when defining a custom field. I restructured the query and got it down to about ~10 seconds.
Then you never have to include or require anything!
I know right? Some people just have zero forward thinking.
What you're looking for is REDIS.
But if you're using a bunch of raw complex queries because you can't do it through ORM and associations, you may need to rethink your DB design
Yes, was looking into that. If I've understand things correctly, Redis is more of an key-value store. My issue in that case is that I would need a "mysql-abstraction-layer" in between somehow.
Yeah..pretty much this. WP came out around 99/2000 I believe, and has for the most part maintained a lot of backwards compatibility through having a very lax architecture or lack of one. I give them credit though...they've been around along ass time and are still useful to a lot of people. Plus I made a little extra cash rebuilding people's sites in not wordpress after the big godaddy / wordpress hack where like, half of the "streetwear" industry got pwned by some 12 year olds...was a pretty easy sell to explain that when you build on a common package, you basically give someone a map to your house and if they figure out how to break into one, you're fucked...
You can still use the appropriate escape string functions without prepared statements.
this is exactly the reason why many are opposed to using them, especially when nesting them...
Still in the rudimentary stages of getting it all slick and effortless... but we have local dev setups on XAMPP with hosts DNS changes so lcl.dev.site.com points to the local version of the site. Then we have a staging version on the company server at dev.site.com so anyone in the company can see it for testing/eval purposes. That's a LAMP setup tweaked manually. We use PHPStorm for the IDE and Git for version control. 
Yep, I included this loader in my benchmark. I'm steel 3 times faster.
What ads? *checks AdBlock Count*
It drives me crazy that with all these interfaces, there's still not one which deals with a create-on-use pattern, instead relying on a plethora of if-else blocks: $cached_data = $cache-&gt;getOrCache('some_key', function($cache_request) { return /* some complex code */; }, 3600);
On this group against Wordpress. I mean, come on people. If it powers more than a quarter of the web, even if you don't like it, you can't just ignore it.
Maybe you should switch to phpbench for the performance benchmark, I'd be more confortable with it, it's highly configurable and will give you much more precise measures, and much more figures in general.
You just made my exact point about readability. I actually have to sit through this and reason out what happens. The only saving grace here is the short syntax, but this still argues my case almost exactly. 
Yeah, I can see why you would go that route, but I'd rather see the developer just break it into much easier to read chunks of code.
Thought it was actually a good framework to transition into. Was getting into it when I realized that being a Flash developer was going to run it's course, but was lucky enough to make friends the php team at the agency I was at (there was a whole flash vs other dev type thing because one of the kids thought he was a rockstar, and most of the backend dudes were older), and got a good rundown about Cake and a chance to build a project with it before I bounced...
There is *one* overarching reason I could considering PHP for new projects: it's easy to hire cheap developers.
I think you misspelled `phpclasses.org`
Partition your table by day, then the hot partition will run fast.
The caching credentials are actually located in this file, so it is loaded every time and the impact was far from zero.
You were talking about getting hacked, not good practice.
OLX is more like European craiglist.
I do this all the time, often I need to generate Open Graph tags that Facebook will parse.
&gt; I can't inject environment variables into my server because there is more than one application being run per server Err, why is that? I mean you can inject the environment variables in your vhost and have 1 vhost per application. &gt;I use Laravel, so I just cache the values for it to load. I'm not sure to understand how you do it: both components are designed to look for a `.env` file which cause an IO access. By design you cannot bypass it, otherwise you are not looking it up at all hence changing your environment variables won't change anything.
the ad was blocked, but the container was still blocking a chunk of the page on my ipad. I disabled the adblocker for a moment and saw two large banners, one on top of the other. And the blog-spam just keeps going. This guy has dumped 3 more articles from his poorly written blog into r/php since then.
Besides the "should I read a `.env` in production" discussion (and I side with the "you should'nt"), your `Loader` class definitely shouldn't be instantiating the `Parser`. It should be getting a `Parser` through its constructor. Also, you should definitely have a `ParserInterface` for that.
I've got some app to rewrite that uses PEAR::Auth package for authenticating users, how i can safely get rid of it, without data loss?
I use PHPStorm and love it. For the most part I am able to debug using the Laravel stack trace, but I should actually learn how to use a debugger. 
Ok, listen. We appreciate your enthusiasm creating these posts, but /r/php is _not_ the place for beginner's tutorials. We're aiming this subreddit to service mid-to-senior level development. For beginner's tutorials you might want to consider /r/webdev or /r/WebdevTutorials Please don't let this deter you from creating more content, it's just that this sub is not the correct place.
I'll admit this is new excuse for me. Might want to look again. I have never had any trouble determining what the actual queries and parameters were.
2M calls a day is nothing in the grand scheme of things. I highly doubt .env file loading optimization is worth your time. 
Why not use Amazon RDS ? You can get a high-memory instance to make sure your "hot" data can be cached by the DB server. Amazon RDS allows for easy monitoring of performances, disk/cpu/memory usage through Cloudwatch.
Yes they are equivalent logically, it'll check if remember was set and assigned to "on". Slight difference is that it'll cast to NULL if it isn't set, and then always compare. Versus the other way which would immediately short-circuit evaluate on isset() without doing the equality comparison at all. I'd call it a micro-consideration at most though. As for gotcha's, I'd have to say none offhand other than being very careful (or not doing it) about nesting/falling back with multiple null coalesces.
Does lumen support config cache? Because in full laravel "PHP artisan config:cache" saves all configs (which mostly come from .env) to a single file, which means .env and all config are not read anymore.
Yes. It is just a convention for listing the available methods. None of them are actually static nor can be called that way.
Agreed. I end up rewriting this code *every single time* I implement any kind of caching layer.
Add a timestamp column (int lookup is faster than datetime) and index it. Finding something where timestamp &gt; timestamp - 86400 (return everything from the past 24h) should be pretty fast. 
It caches config files (including values loaded through the `env` function). It doesn't cache app-wide calls to the `env` function - they'll stop working if loaded only via Laravel's config system (because the env loader is disabled when config is cached). As seen [here](https://github.com/laravel/framework/blob/59ef5bff290195445925dc89a160782485bfc425/src/Illuminate/Foundation/Console/ConfigCacheCommand.php#L50-L75) and [here](https://github.com/laravel/framework/blob/c74782097556740b75563f43d7f8c351fc01a375/src/Illuminate/Foundation/Bootstrap/LoadEnvironmentVariables.php#L18-L31). * env var defined outside .env + no cached config = fine * env var defined inside .env + cached config = fine * env var defined outside .env + cached config = not fine
I'm not near my PHP dev setup right now, but I see the artisan file is there in the Lumen repo, give "php artisan config:cache" a try, I'm really convinced it should work.
I will probably use Aurora once my app is live. 
The env() function is not meant to be used outside of the config/ folder if you plan on caching your config. And not caching the config in production is a big performance hit.
You could just ignore the comment?
i could, but i won't.
This was posted a few days ago https://www.reddit.com/r/PHP/comments/5r0efc/pre_effortless_new_php_syntax/
https://www.dropbox.com/s/abi7d1wevaa59ct/Screen%20Shot%202017-02-02%20at%2017.59.25.png?dl=0
This is the correct answer. We use chef to take in environment variables as JSON. Then we put all those environment variables straight into the nginx config so they are available to the FPM process. From there using `getenv` is super easy. [edit] Point being, by dropping them right into the nginx config file they're loaded only once when nginx is restarted. After that they're always available to the fpm process without an IO call.
Oh damn, sorry, totally missed it :/
I am going to attempt to use this method. Can I use it as is or do I need external libraries? Edit: Nevermind, it worked great. Thank you for your help. I will be using this method.
To be fair, I think the important bit of this post is the ["how it was made"](https://www.sitepoint.com/how-to-make-modern-php-more-modern-with-preprocessing) link /u/bitfalls commented with...
I don't think that was the purpose of the code I was thinking of. :)
Then I'd rather use hacklang...
Not sure why this is being downvoted...
These days I find myself using local versions of various services (php-fpm, mysql, postgres, redis) managed through homebrew on a mac, using Caddy as a web server. This is nice because each project can have its own Caddyfile in the project root. Caddy configs are pretty simple. Here's one for a zend-expressive app I'm working on today: localhost:8080 root ./public log access.log errors error.log rewrite { to {path} /index.php?{query} } fastcgi / 127.0.0.1:9000 This is quite nice, since the Caddyfile lives in the project root, and is versioned. If I'm building a new dev machine, I just brew install a bunch of stuff, manually install caddy, check out my project and `cd myproject/; caddy;`, and I'm off to the races. Edit: For more complex systems, where I'm worried about a specific production setup, I'm still using virtualbox VMs. I'm looking at docker to replace that kind of setup, but haven't taken the plunge yet.
The PHP Out-of-the-Box Bytecode Cache is your friend. Example: $env = include "env.php"; 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
No particular finding here. I'm just using the parse_ini_file built in function. :)
You are aguing with the wrong person. We maintain thousands of lines of sql. We need to understand the raw logic behind the queries and to reason about the performance. We also need a wide set of functionality. All of these wouldn't be possible with a ~~ORM~~ query builder. ~~ORMs are - at the very best - there to make naive CRUD at application level.~~
How much data and queries are you expecting? What do you mean by cluster, app servers or mysql?
The PPA owner Ondřej Surý is also the maintainer of the official PHP packages in Debian.
Both the template syntax (matter of opinion, obviously) and how non-performant it is without extreme caching. And in my experience, the cache configuration is both fiddly and has bad defaults.
App servers are clustered. Amount of data is unknown since I'm still developing but I want to learn and be prepared. 
Correct, as far as I'm aware. They've been [supported](http://php.net/manual/en/language.namespaces.faq.php#language.namespaces.faq.nofuncconstantuse) since 5.3 but being able to import them conveniently with `use` was a 5.6 thing. Presumably you had to use a qualified name every time before that. So they were possible, but not really practical. And still kind of suck, but that's been true of scoping PHP functions for its entire existence and is why so many codebases have a `functions.php` file.
The only way to install, I even have a 5.6/7.1 side by side install. https://launchpad.net/~ondrej/+archive/ubuntu/php/
If your mysql server is well configured, has enough ram for the data to fit into the memory and is physically close to your app servers, then I wouldn't care too much about caching. (Cannot say anything about AWS) Like another guy here suggested you can partition the tables by day. Just create a new clone of the table structure and do a rename. As long you don't access the older tables they won't really need memory. It would be ideal to replicate the old tables to another db and do slow processing on it and then move aggregated data to your master as needed. If you still want a cache I'd go with redis too. Just insert data into redis and mysql, but only read from redis. Of course same rules apply here, make sure you have enough ram and it is physically close (fast roundrip times). Use redis only in memory and leave persistence to mysql. That would be a very simple model.
I think you may have replied to the wrong post. Nothing I wrote implies an ORM and I completely agree with you as to their usefulness. A SQL query builder helps when building dynamic sql queries. Nothing more, nothing less.
Well, FWIW my own framework is loosely based on ADR and it looks a lot like this except with different packages.
Yeah my mistake, same things apply to query builders.
I just poked around the Craft site for a minute and the pricing model is worrying. Last time I tried to use a pay-per-site CMS I ended up having a *horrible* time with ExpressionEngine. I'll take WP's global stuffing and bad code any day over repeating that awful experience, so seeing that kind of model triggers some kind of coding PTSD.
&gt; My issue in that case is that I would need a "mysql-abstraction-layer" in between somehow. Not necessarily MySQL abstraction layer, but you'll need to write and implement a repository interface, which contains the minimum methods for defining your persistence logic.
Totally understood. :-)
Check out the best practices to see more detail regarding the prefered patterns such as: new directory structure, your application bundle, using annotations for entities. Everything is option so you can continue using symfony as before, but you might as well find something useful from the document http://symfony.com/doc/current/best_practices/index.html Also check the symfony demo app (run: symfony demo). 
OOP is a fad. PHP's just a scripting language, use it like one!
As long as you have access to the Authorize source code, I'd track down where the particular error is being thrown and figure out exactly why. Having said that, there is exceedingly little information to go on here...
E00014: A required field is not present. I'm pretty sure the data isn't going into the function, no?
Does it specifcially break when you change *only* `$subscription-&gt;setName("Sample Name");` to `$subscription-&gt;setName($firstName);`? Or do you change the whole set of `$subscription-&gt;setStuff()` calls at once (from static strings to variables). Because "A required field is not present" seems kind of obvious that something you're passing it is empty. If you're replacing all test strings with your variables at once, try replacing them one-by-one to narrow down which is breaking. After you that (or if you already have narrows it to the name), try doing something like `echo "--".$firstName."--";` Maybe there's some invisible character or line break in the variable that's causing the API to choke.
Well, you might want to have a look here: https://github.com/AuthorizeNet/sdk-php/blob/9d24edc675362b6349983205b8288d178fa0c469/lib/shared/AuthorizeNetRequest.php#L90 and var_dump exactly what's getting sent
You could have something like: // maps the user command to a handler func $commandHandlers = [ "foo" =&gt; "fooFunc", "bar" =&gt; "barFunc", "baz" =&gt; "bazFunc", // ... ] $command = getUserCommand(); if (isset($commandHandlers[$command])) { $commandHandlers[$command](); } else { // handle invalid command } Then you would have a function mapped to each of your commands. This would give you a little bit of organization, but you'd lose access to your scoped variables inside the handlers without getting creative. It might also be overkill to have a function for each of your commands if they are really simple, in which case you could use anonymous functions like: $commandHandlers = [ "foo" =&gt; function() { // do foo }, "bar" =&gt; function() { // do bar } ] But at that point it might not be that much better than using switch statements.
I wouldn't recommend starting out as a freelancer. You'll learn so much more from how other developers in your team. You can teach yourself how to use the language but it's invaluable to learn from past mistakes of others.
So i should join some development company to enhance my knowledge.
You won't be able to make a living out of freelancing until you're much more experienced. Just learn your trade, keep on top of your technology stack, branch out on the things you do and you will naturally get there after a few years. 
Yes, they are a little bit different, but they share the same purpose: giving a set of key=value. So why not taking advantage of a lower level function ?
So how much years experience do i need to start freelancing. Is there any age limit. 
In my opinion yes. I've seen a lot of poor quality, slow, insecure and buggy code caused by a developer that didn't have anyone there to share ideas with.
That's quite intangible to measure.
It wont be stored as JSON. If you want JSON it would need to be a string value. Storing as JSON and then decoding into a PHP array I think is significantly slower than using a Redis hashmap which will return as an array.
Part 1 is pushing the button? How about, I don't know, checking what will break first? 
I was thinking of a json as a string, but it sounds like I should read into Redis hashmap thanks again!
I think it's terrible and there is zero reason to write it like that except to be a smartass. I would definitely prefer if ($email !== null) { $this-&gt;setEmail($email); } // On a single line ... But then I would also not initialize properties with setter functions like that, and also, if `$email` really is optional, why can't I just call `setEmail(null)` anyway? But of course, example code, etc. Slightly unrelated: In an ideal world, I would also like `if` to be an expression like in Kotlin (https://kotlinlang.org/docs/reference/control-flow.html), but we have to work with the language limitations we have. Abusing the short-circuiting of operators like this often suggests a missing language feature.
 - **You don't need to use the native ext/session**. Use cookies, implement storage, use your own interfaces, implement a method to regenerate the session id, forget about $_SESSION, if you want - Read about session.lazy_write, session.use_strict_mode and implement the same behaviour - Use JSON as your session serializer instead of serialize() or the session serialize format. You avoid a special format and you avoid serialize() security concerns - Lazy destroy the sessions (mark them as deleted, so they can be used a few seconds after deletion, in parallel requests) - If you do a lot of writing (or anyway really), use a lock mechanism so you prevent parallel same-session writing requests to overwrite data - Don't bother storing data in the cookies themselves 
From the [changelog](https://github.com/sebastianbergmann/phpunit/blob/6.0/ChangeLog-6.0.md) &gt; DbUnit is no longer bundled in the PHAR distribution of PHPUnit From the [documentation](https://phpunit.de/manual/6.0/en/installation.html#installation.optional-packages) &gt; DbUnit port for PHP/PHPUnit to support database interaction testing. &gt; This package is included in the PHAR distribution of PHPUnit Which is correct?
I prefer not to call `setEmail(null)` because it will knock down the default property value, if it is set. There are setters/getters for all the props, but building through constructor is also available because it's very convenient in tests. 
Your setter does not have to be dumb. You can move the check for null into the setter and have cleaner code in the constructor plus you will guard the email property for all other places that you might call setEmail() from. The way you wrote it will only check for null during object construction.
This is unreadable IMHO. Not to mention that it is not compatible with PSR-2 that you mention as a requirement. See http://www.php-fig.org/psr/psr-2/#if-elseif-else
In what environment/country do you live where it is acceptable to just throw in a not-working link to a screenshot and a question that is so misleading formulated that nobody on earth could build a relation between "feature" and one of the 6+ features visible in the screenshot, and on top, asking all this in a non-support reddit?
How do you handle situations when both webserver and CLI invoked PHP code needs the information? For example: Database credentials used by the web application and the cli migration/seeding scripts.
Years of experience will not make you a better programmer. If you just started, learn more about OOP, PSR-4, Auto loading, SOLID, Design Patterns, BDD and etc. Mostly companies will not use the latest tech. So do some side projects and share on Github. You can show them on interviews. Personally recommend Laravel(Easiest to learn) &amp; phalcon(Highest Performance) frameworks and Codeception for BDD.
Can you give me the purpose/definition of a constructor?
To create and initialize an object basically. Which for me means the object should be in a valid state after a constructor is called (what exactly "valid" means depends on the context) - or the constructor should throw an exception if that is not possible to achieve. I don't get how this relates to your original point.
phahahaha
The constructor must expect everything that is necessary to create a valid object/state to work with it. Everything additionally (and/or nullable) is just nonsense , because the signature is read like: "To construct this object I need A, B and C". If you put nullable arguments in it, the signature for reading gets unclear... Is it now needed? How badly is it needed? Is it really optional? Why is it in the constructor then? Also you could then argue about every property/state going into the constructor at the end with nullable, because: why not?
If you think so, than it shall be like this.
[removed]
&gt; Is there some interface / interop out there I should be using for $_SESSION? The Symfony HTTP Foundation component has a Session object integrated with it's (non PSR7) Request object. It just seems to work. https://symfony.com/doc/current/components/http_foundation/sessions.html It is worth taking a look at.
I think the question should really be, why does this even exist. Why is it needed. What massive problem does it solve. I'm seeing nothing other than horribly messy code that just invites confusion when someone picks it up in 6 months time.
Multiple constructors are a separate topic, not really related to this. You can have default arguments in C++, and you can kind of "fake" multiple constructors in PHP by using static factory methods. Another super useful feature that neither PHP nor C++ have is named arguments (e.g. https://kotlinlang.org/docs/reference/functions.html#named-arguments)
The project with the fewest lines of code is not necessarily the profitable project. That's very difficult to understand and maintain. It should be an actual conditional.
[PSR-2 requires braces surrounding control structures](http://www.php-fig.org/psr/psr-2/#control-structures), so this wouldn't follow that standard.
But what is your argument for _keeping_ optional parameters in the constructor? You're just giving us examples of optional parameters. What benefits are provided by including them in the constructor, rather than: class User { private $name; private $birthdate; public function __construct(string $name) { $this-&gt;name = $name; } public function setBirthdate(DateTimeImmutable $birthdate) { $this-&gt;birthdate = $birthdate; } } class MyClass { private $someValue; private $logger; public function __construct($someValue) { $this-&gt;someValue = $someValue; } public function setLogger(LoggerInterface $logger) { $this-&gt;logger = $logger; } public function getLogger(): LoggerInterface { if ($this-&gt;logger === null) { $this-&gt;logger = new NullLogger(); } return $this-&gt;logger; } }
Nice article, having auto-completion for the Symfony console &amp; aliases for common commands like cache:clear has saved me a lot of time over the years. For anyone using Oh My Zsh this will already be available as a bundled [completion plugin](https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/symfony2/symfony2.plugin.zsh) (check the [plugin wiki page](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins) to see how to enable them)
PHPExcel: Haven't tried using it for updating existing files, but I've used it for creating new files very successfully. I think it should work though. https://github.com/PHPOffice/PHPExcel Also, haven't tried the other recommendation, spout, so I have no comparison there.
That's how the TC agent runs PHPUnit, I'll have to remove the native one and custom step it. Ta
Yeah soon as I read that bit I thought "never worked for money then". Choosing the right framework fro the right project ? Oh yeah, better believe you should do that.
Are there many teams that prefer Yii2 over other PHP frameworks for new systems? And are there many teams who prefer to migrate from Yii1 to Yii2, and not to something else?
Keep yourself employed in the same job. A time honoured tradition in software development. Looking at you COBOL developers
You just said it wasn't... right? At least submit a ticket via the link at the bottom of the doc. 
FYI you've been shadowbanned from Reddit. The /r/php mods didn't do this and we can't change it, contact the admins. Good luck.
Can't explain why, so my answer is probably garbage, but I would prefer the second one. First one look like a function call to me. Like `[keymaker(params) =&gt; 'value']`. Not that I would ever write such code, but still bugs me. Side note, any reasons why `(params) ~&gt; expr` or `(params): expr` (I guess ternary and alternative control structure syntax rule the later out) were not accepted/proposed ?
I do like logging in with the username ');UPDATE users SET password='12345';
&gt;**What do you think, Reddit**? LOL. As an aside, it looks like Ruby. I like it. But I'm just a Reddit, why would you take anything I say seriously.
If you are doing Php, PhpStorm is better.
Superglobals ARE going away 
Read other's code. Read Symfony's code or the code from any of the projects from the Php League. Wordpress is old and the way it is written is not the way you should write modern Php. It stays for legacy reasons, but I'd suggest looking at modern projects for learning.
Can this be used for other commands build with Symfony's Command package?
I've used this library for reading existing, and writing new spreadsheets. Updating an existing should be trivial once you understand the library - which isn't too difficult.
Yes and yes. Yii isn't as popular as Laravel or Symfony in US but in other countries it is because of strong i18n, multi-language community, faster bootstrap times, code generation etc. As for choosing something else, people are migrating both ways and that's OK. It's not a good idea to learn one framework and never try another.
I have no idea why, JS syntax for arrow functions is nice, I kinda like ``([PARAM, ...]) =&gt; EXPR`` And now that PHP has a real lexer/parser using a full-on grammar, the ``\`` is better than ``.`` because ``.`` is alredy reserved argument is no argument anymore, parsers can do better than that guys! ``fn`` is terrible, I don't want to write this, ever.
Aha, the more practical downside.
yeah, I like this more. `fn` looks like an ugly hook. No real difference from `function`
 array_map(|$x| =&gt; $x * 22, [1,2,3]); array_map(fn($x) =&gt; $x * 22, [1,2,3]); I think the pipes are fine, I guess. I don't really care for either, but if that's what it takes to get the feature, I'd be happy to have it. With the Pipe Operator RFC, wasn't there a worry that the |&gt; symbol is hard to type on a Japanese keyboard. Is that because of the vertical line, or the angle bracket?
&gt; And now that PHP has a real lexer/parser using a full-on grammar, the `\` is better than `.` because `.` is alredy reserved argument is no argument anymore, parsers can do better than that guys! I didn't understand. Can someone explain this comment differently?
&gt; With the Pipe Operator RFC, wasn't there a worry that the |&gt; symbol is hard to type on a Japanese keyboard. Is that because of the vertical line, or the angle bracket? I must have missed this. Can you find a source? For what it is worth the syntax I've proposed is very similar to Ruby's syntax, and Ruby was written by a Japanese man while in Japan, so... I doubt it's an issue but if you can find a source I'll read more into it.
The `|pipes|` will take some getting used to, but I think I still prefer it over `fn`.
The TTL should be a limit counted *from the last visit/hit* and not from the creation of a session.
I've never been a fan of the fn() syntax. The pipes seem like a great alternative, I can't think of any downside. 
It's the child of a Ruby block with an arrow function... I like it. I prefer the more Ruby-like |params| expr, like array_map(|$x| $x * 2) but as some guy said in the previous thread, this would be confusing with return types (although i don't think i will be type hinting short closures like this): array_map(|int $x|:int $x * 2) So with your proposal the arrow separates clearly the return type from the expression: array_map(|int $x|:int =&gt; $x * 2) I've read a comment on the internals about how a (not yet existing) union type would be impacted by this: array_map(|int|float $x|:int =&gt; $x * 2) // ambiguous? array_map(|(int|float) $x|:int =&gt; $x * 2) // somehow harder to read But again i don't think people should type hint these closures because you don't type hint this: $foo = $x * 2; // you don't type hint this! $foo = |$x| =&gt; $x * 2; // why would you type hint this? Good luck with this one, can't wait to map, reduce and filter all the things! 
I'd prefer to drop the `=&gt;` as well, but aside from the visual awkwardness with return types there is another consideration: it limits future type syntax. As an example, if an [arrayof](https://wiki.php.net/rfc/arrayof) RFC passed then type declarations such as `Type []` could be ambiguous: ||: array [] Is that returning an empty array or is it a continuation of the type to indicate this is an array of arrays? Without actually writing the rules I don't know if this ambiguity could actually be avoided (it may be finite-lookahead and thus not an issue). In any case the `=&gt;` symbol is unlikely to be included in future type information and would thus eliminated this potential issue.
Not that easy to always just "do something". Companies obviously have to choose - either rewrite the app in another language, which is costly and has to be tested extensively, often requiring downtime etc, or leave it as it is and try to make the best of it. This project offers a pretty nice alternative imo. The 'opening new markets' feature is a stretch obviously, but who knows. The video shows a pretty solid usecase for the project, so we'll see how big the market will be. PHP came a long way as well since the days of PHP5, let's not forget.
Amazon doesn't do that with a super-long-TTL however. Doing so exposes major security holes, and they'd have been taken to town for it. They do that with remember-me cookies. They set appropriate encrypted cookies in your browser, that makes it that when you next hit their website after being absent for a while, the cookies contain what are needed to identify you as you. And then when you hit the website, it reads those cookies, does some security/sanity checks, and then logs you in, and recreates a session for you. The existence of 'appearing always logged in' is not done via really long TTL (or should not be). 
Correct libe ... and you still expire sessions if they go beyond that and use the remember-me cookies to log them back in (invisibly to them even) after expiration.
How do you remember all of that at once? Is your head just constantly full of fuck? You sound like the programmer equivalent of a veteran returning home with two lost limbs and tales of his jaded past.
I'm not a fan of the pipe syntax simply because I like type algebra and I'm looking forward to it (unions and intersections) in PHP, and this looks like a clusterf**k: |Foo|Bar $a, Baz|Qux $b| =&gt; something;
Out of all proposed syntaxes to date I like tilde-arrow the most, it looks very similar to the way PHP is usually written yet distinct enough to be confused, and it does not introduce any weird blocks from other languages. Look at this marvelous example: `array_map(($x): int ~&gt; $x * 2, $array)`. Combined with pipe operator would be really lovely to write.
It is strictly incorrect and you're bad if you do this in 2017.
Not a fan personally. If we're gonna go back to pure syntax why not `$x ==&gt; $x * $y` ? The only reason given against that before was that ==&gt; is different to what JS uses which is moot now. 
In English we call it, "what the fuck is this guy even saying?"
xD
I think it just means encrypted (and the keys are the same) and stored in an web-INaccessible location. I could be wrong tho.
The tilde arrow didn't pass; I can't change that, only propose something different.
The goal is not to completely replace the existing syntax. Rather there has been an observed pattern where there is a single statement in a closure with a return statement. It requires a lot of typing and boilerplate. Binding variables from the outer context takes even more space and distracts from the point. Here is a single-expression closure with before and after: function($x) use($array) { return in_array($x, $array); } // compared to |$x| =&gt; in_array($x, $array) But compare multi-statement bodies: function($aggregate, $i) use($array) { if (!in_array($x, $array)) { $aggregate[] = $x; } return $aggregate; } |$aggregate, $i| { if (!in_array($x, $array)) { $aggregate[] = $x; } return $aggregate; } Very little gained, and the explicitness of variable binding has more value as the number of statements in the closure increases. Additionally, as you move from single-expressions to multiple statements the choice of binding by-value or by-reference becomes more valuable as well. So... overall there is questionable value gained and simple auditing is lost. This is why the current RFC focuses only on the single-expression case.
Finally: additions in their own namespace! I thought I'd die of old age before seeing this happen in core.
I don't see what's wrong with `|$param| =&gt; $expr`, myself. ----- You keep going to that suggestion without commenting on the proposal. That's not discussion... Imagine the scenario: &gt; Me: Hey guys, what do you think about doing B instead of A? &gt; Andrea: Why not C? &gt; Me: I'd really like to talk about A and B. &gt; Andrea: I still don't see what's wrong with C. Maybe that helps you see why you I'm thrilled about your responses; I want to talk about A and B, which is reasonable given it is my proposal, but you keep wanting to talk about C. C is not up for discussion. Please discuss A and/or B. To actually address what's wrong with your suggestion: there's nothing wrong with the existing closure syntax and semantics right? Right..? So why are we proposing shorter closures at all? It's because they are so verbose. Characters *do* matter. Concision *is* a concern. Adding an extra 6-8 characters that don't need to be there for a feature created because the existing syntax is too verbose is just... ironic.
Hack's syntax *is* ambiguous and therefore not a trivial option; see [here](https://www.reddit.com/r/PHP/comments/5rvljl/alternative_syntax_for_arrow_functions/ddaukim/).
I'm sorry if I'm distracting from the main focus. I haven't commented on B because I'm indifferent to it and don't have much to say about it. My comment on A is that I'm unconvinced of the need for a new keyword given it would still be significantly shorter without one.
Personally, I don't like the pipes. It looks like Ruby, Perl, and line noise. It's hard to search for, too. Would this break using pipes for bitwise OR? `[ $x | $y | $z =&gt; $a ]`
Personal preference? The pipes are ugly AF. Not to mention that there is no similar usage anywhere in PHP, or any other languages that I've used. It looks alien to me, just like after years, the namespace separator still looks alien.
Honestly, I want you to get to your market and get lots of money. I'm not that douche wanting you to fail miserably cause I don't believe in your product and I HAVE to be right. Prove me wrong, I'll genuinly be happy for you. But I'm sceptical and not sold yet.
The only real use case I could see this being good for is any specific PHP libraries that you need to port over to C# that do not exist in C#. What would the point in taking a web site in PHP and compiling it for C# .NET? It would be simpler to just run the site with PHP.
Rather than "fn" before the parenthesis you put "==&gt;" after. They are both new keywords. They both disambiguate the content of the parenthesis. How is one ambiguous and the other is not? (remember parenthesis must always match and finding the matching parenthesis is fairly easy). Maybe you should not use the word ambiguous but "more difficult to implement" or "not possible with the current parser".
If it's just a quick fix and you're just trying to avoid the error, you can also just add a @ in front of $_GET, instead of always having to append a query string ```@$_GET['message']``` should suppress the error, but you'll still be rendering the rest of that markup... Checking for it before it renders the output would be the way to go but this is a bandaid to get you on your way...
try if (isset($_GET['message'])){--your code here--} ps: 'variable not defined' is a notice, not an error. Errors halt the script, notices don't. 
On correctly configured production systems you shouldn't see any notices - so if you are, might want to adjust error display settings. On development systems it helps you to notice you're using an uninitialized variable. There's a million easily googable reasons for why that's a bad idea. If it's ok to have uninitialized variables in the app (because reality), do something like: function _r($var) { return isset($_REQUEST[$var]) ? $_REQUEST[$var] : ''; } in a library file and replace instances where this is an issue with: &lt;p&gt;&lt;font color=red&gt;&lt;?=_r('message')?&gt;&lt;/font&gt; &lt;/p&gt; or even better, don't output unnecessary html and space when there is no message, especially since there's a space between &lt;/font&gt; and &lt;/p&gt;: &lt;?php if (isset($_GET['message'])) { ?&gt; &lt;p&gt;&lt;font color=red&gt;&lt;?= $_GET['message'] ?&gt;&lt;/font&gt; &lt;/p&gt; &lt;?php } ?&gt; Note: technically the correct testing function is array_key_exists, but in 99% of cases isset is identical, shorter, and not met with blank stares.
&gt; I want to talk about A and B, which is reasonable given it is my proposal, but you keep wanting to talk about C. C is not up for discussion. Please discuss A and/or B. https://en.wikipedia.org/wiki/False_dilemma
&gt;The problem with passing by value is twofold. Once if you modify the value within the closure, it won't change outside the closure. &gt; But also, and maybe even more importantly for short closures, the value changing outside after the closure is defined, won't change it inside the closure. Erm... that's the entire point of binding by value.
Asking people to talk about two specific discussion points as the RFC author is well within bounds, and hardly a false dichotomy.
&gt; I cannot give an example of a single language with mutable variables, which does "bind by value" in this particular manner. All languages are different, but Java and Objective C bind by value in their closures. This is not unique to what I'm proposing. 
I already discussed why Java is different, it requires final variables, so the imported variables don't get "split personality". The Objective C blocks are a mess, but even they have so-called "block" variables for modifying variables captured from outside. You're right that the default resolution in Objective C is similar to the PHP binding by value. However, when they had the chance to make a clean implementation of closures in Swift, guess what they did? No more binding by value – it works like in JavaScript. Clean and simple.
But I did refute your point. There are languages that do what I'm proposing despite your claim it was unique. It's not actually me you have to convince; bug Bob Weinand and /u/nikic. I'm happy with by value or by reference as they both have advantages and disadvantages and can live with either.
Well, I hope Nikita Popov is reading this thread...
How do you know?
Yeah it's better than fn(), but so long as the use statement is gone I am happy.
Personally, I prefer the explicitness of `fn(params)` (and the muscle memory of typing parens over pipes), but don't feel terribly strongly about it. This is assuming that the semantics are otherwise identical to the other proposal. I'd use either without complaining. For me, the real gain in short closure syntax is the automatic binding of variables much more so than saving a few characters. Both are nice improvements, of course, but my concern is much more for the cognitive load of something rather than key presses. I also hope that PHP will eventually gain a way to typehint callables, and I hope that whatever syntax this goes forward with puts the language in a better position to achieve that (or, at minimum, not a worse one). Seems like either could more-or-less work. e.g. function something(fn(User, mixed): int $callback): Group { ... } // or function something(|User, mixed|: int $callback): Group { ... } // Swift, for comparison func something(callback: (User, Any) -&gt; Int) -&gt; Group ap{ ... } Pipes could fall apart here if (your own!) union types happens in some form. It already feels like asking for trouble with the multi-catch stuff. Also, I'll note that I typed the latter with a closing paren instead of pipe out of muscle memory, hence my slight preference for the `fn` syntax. 
If u/whuf was shadow banned, then his post would be invisible to us, right? 
I'd like to see more things in their own namespace too. But does it really make sense to use the base namespace of Sodium for this? Think of if other extensions were namespaced. I think it would make sense for core items to share a root namespace if they went that route. Something like Php\Sodium. Or maybe this is overkill? :/
Yeah, I had looked up that syntax. Don't get me wrong - with PHP you have a little more boilerplate to write, but you could deal with it easily enough in a trait. I guess my point was that you get all the same cases taken care of and the consumer/user of the API doesn't really need to be aware of the methods, they can access the properties like normal.
Glad to hear. That book I bought 7 years ago on learning PHP 6 won't go to waste.
The PHP 7.1 nullable type hint is okay because it forces the caller to make a decision about the argument. This is not true for a nulled argument. public function __construct(?int $age) public function __construct(int $age = null) The first constructor will fail if you don't provide an argument, but it allows you to pass null. So it's not optional, it just allows null. In the second example the argument is optional and shouldn't be in the constructor. 
I'm ok with both, and I think dropping the =&gt; from || (`|$a| 2 * $a`) would also be nice. The most important thing for me is that we can use blocks with them which, as far as I remember, was not part of the discussion.
would like to see this too
Hey, so it looks like you have no problems with performance on your Mac. However, for my Symfony app, performance is unacceptable. It can take up to a minute to load a page. I've checked out this [issue](https://github.com/docker/for-mac/issues/77) on Github (no solution). What have you done to make performance acceptable?
[removed]
Yeah, I mentioned that in some [other comment](https://www.reddit.com/r/PHP/comments/5rt13b/do_you_consider_inline_if_statements/dda6seu/), it's about what meaning of the word "optional" we're using. It means different things in different contexts.
How can a 2/3rds majority vote be required to *choose between* two different naming conventions? What if the result is 49/51 split? Which do you choose? Is this RFC actually retarded?
Google not in the URL. Sounds shady...
appspot.com is registered to Google Inc and points to Google's dns servers.
Pretty simple answer: performance and security. The compiled PHP site would run significantly faster and the countless security leaks due to the architecture of PHP would no longer ve an issue.
&gt; Edit: I meant to ask about short-circuiting statements, not inline IFs. You could try chaining promise then callbacks if it needs to be serial with a single invalid handling logic, or even just things only happen if the prior result was success, maybe you get some validation from a third party service (so not synchronous)... It provides early exit, restricts your unit tests to the promise implementation, each isolated callable can be tested in isolation outside of being plugged into the promise. The main downside is that it mostly works with single typed input, but your example seems to use email, so that's perfect.
I know it is but appspot is a domain from Google cloud and can have user generated content 
This looks pretty cool! I looked at the editing example and I like that you always return a payload that you then convert to a response. If you wanted to create a JSON API, would you use a responder that you use for every route or some Middleware? Also, I see that your editing action requires a user, mapper and payload as depencies but I never see you inject them. How would you do that in a real life example? /u/pmjones Thanks! :)
That's a good attitude though :) I wish there were more people with that approach
would it be possible to use by-ref? I don't think I'd use it, but it's something to consider: |$x| use (&amp;$y) =&gt; $y += $x;
PHP as root namespace for core would be great. 5/7 - perfect score.
Beware: I couldn't get past level 3 in Firefox (somehow it filters special characters), started to think I'm stupid. In Chrome it's trivial to pass.
What I do is have a list of permissions (eg read_post, write_post, delete_post). Then store the permission the user has access to, I simply put them in a JSON string, but you could go fancy with bitwise operations and store them in an integer, if your users have roles then store it the same way for the roles. Then have some manager object that, when you ask for the permission for a user, grabs the user and the roles he has and then merge the permissions, you can also merge here a logged_in permission or anonymous permission (eg anonymous can go to register page but logged_in user can't). After that, just check if the permission you are requesting is in the list of permissions.
What you wrote should work, assuming I am understanding what you are trying to do.
IMHO this is fine too: if ($email !== null) $this-&gt;setEmail($email); The only danger of single-line if/for/while/etc. constructs is if the statement is on a new line (as you then risk accidentally duplicating it, or adding another statement and not adding the curlies).
A solid starting point. SINCEREST thanks! Knowing what to look for is the half of the battle that was stopping me cold.
Try MySQL Workbench https://dev.mysql.com/downloads/workbench/ I stopped using phpMyAdmin a couple of years ago and I haven't looked back 
If we get 2/3 majority, anyone who tries to decry "but it breaks the coding standards so we can't accept that change" will be overruled. If it passed with only a 50%+1 majority, there's still wiggle-room for them to block the change by bikeshedding. This is far from "not even a real vote", it's a proactively defensive choice against the old guard being petty or spiteful. If it doesn't pass 2/3 but does pass 50%+1, then the logical thing to do is hold off until the coding standard can be updated first. If it doesn't pass 50%+1, then the logical thing to do is not even bother.
Come to think of it, I may be remembering getting HTMLPurifier to work well, not twig. Although I think they both have weird caching settings. 
Actually I might be wrong, I'm looking at php-src to check. Aaaaannnd found it: https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y it's if I'm not mistaken parser grammar using regexes (it seems to be using yacc).
You are welcome! The DB export can be saved locally by the way (as a backup) and imported in a clean database at any time. It's just a series of SQL statements to build up the tables structures and data again.
Second this. Sequel Pro is the app you need.
You can simply upload files onto someone's site if there aren't enough precautionary measures, e.g. using require_once(). It's an open-source server side language, whereas .NET is compiled to .dll. Peachpie handles this issue by not allowing the include of non-compiled content files. The compiler recognizes that the site performs a Require on a file that had originally not been compiled. Rather than running it, which can potentially be harmful, it merely inserts its content into the site. 
Can't argue with that :D obviously it's only going to help if you compile the site before any attacks have taken place. Most of the vulnerabilities come from the plugins anyway, like the whole Panama paper issue due to the revolution slider plugin. 
But this doesnt include mysql server, or does it? Update: sorry, but why downvote me? I was only asking whether you can work with a database only with workbench, without also having a mysql server. I thought workbench is just a client. 
Your logic makes no sense, so what its not named after google? That doesnt mean anything nor makes it less secure, XSS is to test in the site if the site is vulnerable, they created a mock site that is vulnerable so you can test your skills.
And looking at your reddit activity, I guess you're what we call a jerk :o
I'm not following. Why are script tags not executed but the JS in event attributes is?
I understand the need for "naive serializers" sometimes, but it generally wrecks the encapsulation of your objects, and the problem is that it silently assumes how an object should be serialized and deserialized, which can lead to subtly or not-so-subtly broken (de)serializations, while you're blindly trusting the serializer to somehow automatically do the right thing. I usually tend to work against "naive" object operations that PHP allows, things like sleep/wake/clone or assigning undefined properties on an object. It requires a bit more effort up-front to "ask" the object to help you serialize/deserialize itself, but it pays off tremendously. Plus... if you think about it, the gain of "hardcoding" naivety in your serializer is not only limiting, but of rather low value, because you can port the same serialization logic, into, say, a trait like NaiveJsonSerialize, and then all the "custom configuration and code" you'd need to serialize would be: class Foo implements JsonSerializable { use NaiveJsonSerializable; } At least with this the contract is explicit, through the provided interface, and can be customized or replaced, when needed. Instead, OP's solution seems to use implicit conventions, including DocBlock, and this, I feel, is very very fragile, because you have no idea what you're affecting when tweaking your @var declarations, for ex. 
I didn't down vote you, mainly because you are correct, you would need to install windows server but workbench will help setup the db and help you import all of the data when you have setup mysql server.
(1) If you can't use any aiding function, your code is wrong from the very start for using strlen :D (2) How exactly would looking at both ends of the string each iteration be faster than the classical way, mmh?
Oh my, this is fun. First of all, strlen is a function so no, by your own rules you can't use it and your code is invalid. Look at my snippet to see an example without aiding functions. Now that that's out of the way, saving loop executions is utterly irrelevant when each iteration you do way more work than the alternative. Compare: (1) my code is doing 1 offset find (isset), 1 compare (===), 1 inplace increment ($i++) and maybe an array append each iteration. All of these are _a priori_ pretty cheap operations. If each costs "1", that's 4000*3 "cycles" + 1 for every character found. (2) your code performs 1 compare (&lt;), 1 function call (strlen), 1 increment ($i++), then 2 subs and 1 strlen call just for the first offset calculation, then 1 compare (==), then maybe 2 string appends (string appends are crazyy (®), THEN you do another compare, THEN another compare, then maybe 2 additional string appends, THEN another compare (==), then another compare (||), then another compare (&gt;), then another function call (strlen), and eventually an assign ($i). Do I need to calculate how many operations that yields for a 4000-char string? Nah, your version is just crazily more expensive than anything that's been posted here so far :D
It is not the number of executions that counts, it is the number of cycles. It's pretty simple. Run this: &lt;?php $s4k = str_shuffle( str_repeat( "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 65 ) ); $time_start = microtime(true); function bad ( $lookfor, $string ) { $found = ""; for ( $i = 0; $i &lt; strlen($string); $i++) { // 4 line $i2 = strlen($string) - 1 - $i; // 5 line $found = $string[$i] == $lookfor? $found . $i . ",": $found; // 6 line $found = $string[$i2] == $lookfor &amp;&amp; $i != $i2? $found . $i . ",": $found; // 7 line $i = $i == $i2 || $i &gt; $i2? strlen($string) : $i; // 8 line } return $found; } for ($i = 0; $i &lt; 5000; ++$i) { $foo = bad( 'm', $s4k ); } echo number_format( microtime(true) - $time_start, 4 ); echo "\n\n"; $time_start = microtime(true); function better ( $needle='', $haystack='', $pos=[], $start=0 ) { while ( isset( $haystack[$start] ) ) { if ( $haystack[$start++] === $needle ) { $pos[] = $start-1; } } return $pos; } for ($i = 0; $i &lt; 5000; ++$i) { $foo = better( 'm', $s4k ); } echo number_format( microtime(true) - $time_start, 4 ); On my VPS (can't be bothered to find out the specs, I think a quad core with 4GB RAM), I get 1.7841 vs 0.8626. Pretty sure the latter code is faster than the former. **edit:** with PHP 7.0.something
Be aware that every single place this is being done is going to be a Cross-Site Scripting (XSS) vulnerability.
That's very trivial to avoid in PHP itself, it's not a good reason for this project to exist. I wish the project success, but it has to work on its value proposition message. Regarding performance, I'd like to see some performance benchmarks with real apps running on both platforms, please?
If you json_encode(DateTime $date) what happens? If you json_encode(\MyNamespace\DateTime $date) what happens? This "naive serializer" makes some decisions about how to serialize a class, along with some DocBlock based decisioning. Both of these aren't a big deal until you see that will also reverse them back to DateTime $date and \MyNameSpace\DateTime $date, respectively. I would never use this "naive serializer", but someone might. If it included the ability to convert a json stream, it would be a lot more useful. The most common issue today is running out of memory with json conversions, not being overwhelmed with serialization differences by type, per se. 
Unless they do some pretty clever things in compile step, a shitty algorithm in PHP will still be shitty when compiled to C#. Even if it's an algorithm from the language core.
You're missing the closing curly brace `}` at the end of your `else` statement.
The namespaces still look alien to me and escaping that char in bash, strings and regexes is a pain in the ass.
Also, please, for the love of God, don't just echo out user input on the page. Avoid it as much as you can. This message thing could easily be changed to a message ID mapped to an array to get the message output. (Assuming it's meant to be outputting a success or fail message.) If this is for a different reason or just you must output their input, sanatize the fuck out of it. 
Yes, that's the general idea if not the exact solution. I'd have to double check my nginx configs but it's 2am.
I don't agree that it's trivial to avoid, especially if you have a large codebase with thousands of such constructs (which is not uncommon). It's also part of the reason that some countries don't allow governmental institutions to have websites in PHP, a law from which the company Jadu for instance profited hugely by using Phalanger. I'll try to consider your suggestion with the value proposition, but at the moment we are trying not to focus on performance. It's the most tangible one by far and people tend to focus on it a lot, but we haven't actually worked on this one much. I can safely say that the first version of WordPress on Peachpie will probably be a lot slower than the standard PHP one. We will then focus on optimizing it and if our math isn't off, we should be able to run almost any app faster. Anyway, we'd like to stay away from focusing on performance so much, even though it's definitely one of the major features. It just requires a lot of attention on optimization. Thanks for your kind words though!
Opinions can only be incorrect in a totalitarian environment.
I posted here, too, but this is a bigger subbredit, so I thought, that here I get the answer quicker. (I also posted this to /r/linuxmint /r/learnprogramming) When I tried a2enmod php7.0 I couldn't restart apache becouse, the "exit-code"
Definitely something to do with Apache. Could be some other webbserving software on your system that's hijacking it, like Nginx or lighttp. I'd uninstall apache, see what shows up if your connect your web browser, then reinstall apache.
After removing apache2 I can't connect to localhost After reinstall the problem still there
You have to enable the PHP module in apache2. Run this command: a2enmod php
nope, only arrays and scalars that would be captured with use (&amp;$bar)
 feralheart@feralheart-ThinkPad-X61 ~ $ sudo a2enmod php ERROR: Module php does not exist! feralheart@feralheart-ThinkPad-X61 ~ $ sudo a2enmod php7.0 Considering conflict php5 for php7.0: Enabling module php7.0. To activate the new configuration, you need to run: service apache2 restart feralheart@feralheart-ThinkPad-X61 ~ $ sudo service apache2 restart Job for apache2.service failed because the control process exited with error code. See "systemctl status apache2.service" and "journalctl -xe" for details. feralheart@feralheart-ThinkPad-X61 ~ $ 
PSR-2 also prohibits spaces within braces so it fails even harder. u/azuretan has not read PSR-2 at all.
I suggest spaceship argument short closures: &lt;|$a, $b|&gt; $a * $b; &lt;:$a, $b:&gt; $a * $b; 
Yes. access.log access.log.1 error.log error.log.1 other_vhosts_access.log error.log.1: [Fri Feb 03 21:36:01.498541 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00489: Apache/2.4.18 (Ubuntu) configured -- resuming normal operations [Fri Feb 03 21:36:01.498664 2017] [core:notice] [pid 18597:tid 140607026689920] AH00094: Command line: '/usr/sbin/apache2' [Fri Feb 03 21:36:15.319497 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00493: SIGUSR1 received. Doing graceful restart AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message [Fri Feb 03 21:36:15.326928 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00489: Apache/2.4.18 (Ubuntu) configured -- resuming normal operations [Fri Feb 03 21:36:15.326945 2017] [core:notice] [pid 18597:tid 140607026689920] AH00094: Command line: '/usr/sbin/apache2' [Fri Feb 03 21:36:15.908488 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00493: SIGUSR1 received. Doing graceful restart AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message [Fri Feb 03 21:36:15.914278 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00489: Apache/2.4.18 (Ubuntu) configured -- resuming normal operations [Fri Feb 03 21:36:15.914290 2017] [core:notice] [pid 18597:tid 140607026689920] AH00094: Command line: '/usr/sbin/apache2' [Fri Feb 03 21:38:46.266958 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00493: SIGUSR1 received. Doing graceful restart AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message [Fri Feb 03 21:38:46.272534 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00489: Apache/2.4.18 (Ubuntu) configured -- resuming normal operations [Fri Feb 03 21:38:46.272547 2017] [core:notice] [pid 18597:tid 140607026689920] AH00094: Command line: '/usr/sbin/apache2' [Fri Feb 03 21:38:46.805597 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00493: SIGUSR1 received. Doing graceful restart AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message [Fri Feb 03 21:38:46.812642 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00489: Apache/2.4.18 (Ubuntu) configured -- resuming normal operations [Fri Feb 03 21:38:46.812655 2017] [core:notice] [pid 18597:tid 140607026689920] AH00094: Command line: '/usr/sbin/apache2' [Fri Feb 03 21:57:21.560088 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00493: SIGUSR1 received. Doing graceful restart AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message [Fri Feb 03 21:57:21.617087 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00489: Apache/2.4.18 (Ubuntu) configured -- resuming normal operations [Fri Feb 03 21:57:21.617117 2017] [core:notice] [pid 18597:tid 140607026689920] AH00094: Command line: '/usr/sbin/apache2' [Fri Feb 03 21:57:22.362922 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00493: SIGUSR1 received. Doing graceful restart AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message [Fri Feb 03 21:57:22.368656 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00489: Apache/2.4.18 (Ubuntu) configured -- resuming normal operations [Fri Feb 03 21:57:22.368671 2017] [core:notice] [pid 18597:tid 140607026689920] AH00094: Command line: '/usr/sbin/apache2' [Fri Feb 03 21:58:22.472817 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00493: SIGUSR1 received. Doing graceful restart AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message [Fri Feb 03 21:58:22.479493 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00489: Apache/2.4.18 (Ubuntu) configured -- resuming normal operations [Fri Feb 03 21:58:22.479505 2017] [core:notice] [pid 18597:tid 140607026689920] AH00094: Command line: '/usr/sbin/apache2' [Fri Feb 03 21:58:23.200713 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00493: SIGUSR1 received. Doing graceful restart AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message [Fri Feb 03 21:58:23.207359 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00489: Apache/2.4.18 (Ubuntu) configured -- resuming normal operations [Fri Feb 03 21:58:23.207379 2017] [core:notice] [pid 18597:tid 140607026689920] AH00094: Command line: '/usr/sbin/apache2' [Sat Feb 04 00:31:25.395620 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00493: SIGUSR1 received. Doing graceful restart AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message [Sat Feb 04 00:31:25.445134 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00489: Apache/2.4.18 (Ubuntu) configured -- resuming normal operations [Sat Feb 04 00:31:25.445156 2017] [core:notice] [pid 18597:tid 140607026689920] AH00094: Command line: '/usr/sbin/apache2' [Sat Feb 04 00:31:25.946126 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00493: SIGUSR1 received. Doing graceful restart AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message [Sat Feb 04 00:31:25.951472 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00489: Apache/2.4.18 (Ubuntu) configured -- resuming normal operations [Sat Feb 04 00:31:25.951485 2017] [core:notice] [pid 18597:tid 140607026689920] AH00094: Command line: '/usr/sbin/apache2' [Sat Feb 04 00:36:51.462183 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00493: SIGUSR1 received. Doing graceful restart AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message [Sat Feb 04 00:36:51.468731 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00489: Apache/2.4.18 (Ubuntu) configured -- resuming normal operations [Sat Feb 04 00:36:51.468744 2017] [core:notice] [pid 18597:tid 140607026689920] AH00094: Command line: '/usr/sbin/apache2' [Sat Feb 04 00:36:52.031876 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00493: SIGUSR1 received. Doing graceful restart AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message [Sat Feb 04 00:36:52.038106 2017] [mpm_event:notice] [pid 18597:tid 140607026689920] AH00489: Apache/2.4.18 (Ubuntu) configured -- resuming normal operations [Sat Feb 04 00:36:52.038132 2017] [core:notice] [pid 18597:tid 140607026689920] AH00094: Command line: '/usr/sbin/apache2' [Sat Feb 04 10:30:27.000175 2017] [mpm_event:notice] [pid 1457:tid 139707281594240] AH00489: Apache/2.4.18 (Ubuntu) configured -- resuming normal operations [Sat Feb 04 10:30:27.004405 2017] [core:notice] [pid 1457:tid 139707281594240] AH00094: Command line: '/usr/sbin/apache2' [Sat Feb 04 12:27:03.931099 2017] [mpm_event:notice] [pid 1457:tid 139707281594240] AH00491: caught SIGTERM, shutting down [Sat Feb 04 12:27:05.046366 2017] [mpm_event:notice] [pid 5203:tid 140375917111168] AH00489: Apache/2.4.18 (Ubuntu) configured -- resuming normal operations [Sat Feb 04 12:27:05.046483 2017] [core:notice] [pid 5203:tid 140375917111168] AH00094: Command line: '/usr/sbin/apache2' [Sat Feb 04 12:29:31.455938 2017] [mpm_event:notice] [pid 5203:tid 140375917111168] AH00491: caught SIGTERM, shutting down [Sat Feb 04 21:21:43.103824 2017] [mpm_event:notice] [pid 4622:tid 139847909484416] AH00489: Apache/2.4.18 (Ubuntu) configured -- resuming normal operations [Sat Feb 04 21:21:43.121638 2017] [core:notice] [pid 4622:tid 139847909484416] AH00094: Command line: '/usr/sbin/apache2' [Sat Feb 04 21:28:03.587370 2017] [mpm_event:notice] [pid 4622:tid 139847909484416] AH00491: caught SIGTERM, shutting down [Sat Feb 04 21:28:04.699821 2017] [mpm_event:notice] [pid 5076:tid 140704542279552] AH00489: Apache/2.4.18 (Ubuntu) configured -- resuming normal operations [Sat Feb 04 21:28:04.699940 2017] [core:notice] [pid 5076:tid 140704542279552] AH00094: Command line: '/usr/sbin/apache2' [Sun Feb 05 00:25:42.902796 2017] [mpm_event:notice] [pid 5076:tid 140704542279552] AH00493: SIGUSR1 received. Doing graceful restart AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message
&gt; systemctl status apache2.service What's the output of that?
ERROR: Module php5 does not exist!
-- Unit apache2.service has begun shutting down. febr 05 14:06:53 feralheart-ThinkPad-X61 apache2[8382]: * Stopping Apache httpd web server apache2 febr 05 14:06:54 feralheart-ThinkPad-X61 apache2[8382]: * febr 05 14:06:54 feralheart-ThinkPad-X61 apache2[8382]: * The apache2 configtest failed, so we are trying to kill it manually febr 05 14:06:54 feralheart-ThinkPad-X61 systemd[1]: Stopped LSB: Apache2 web server. -- Subject: Unit apache2.service has finished shutting down -- Defined-By: systemd -- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel -- -- Unit apache2.service has finished shutting down. febr 05 14:06:54 feralheart-ThinkPad-X61 systemd[1]: Starting LSB: Apache2 web server... -- Subject: Unit apache2.service has begun start-up -- Defined-By: systemd -- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel -- -- Unit apache2.service has begun starting up. febr 05 14:06:54 feralheart-ThinkPad-X61 apache2[8409]: * Starting Apache httpd web server apache2 febr 05 14:06:54 feralheart-ThinkPad-X61 apache2[8409]: * febr 05 14:06:54 feralheart-ThinkPad-X61 apache2[8409]: * The apache2 configtest failed. febr 05 14:06:54 feralheart-ThinkPad-X61 apache2[8409]: Output of config test was: febr 05 14:06:54 feralheart-ThinkPad-X61 apache2[8409]: [Sun Feb 05 14:06:54.112175 2017] [:crit] [pid 8421:tid 13983812374720 febr 05 14:06:54 feralheart-ThinkPad-X61 apache2[8409]: AH00013: Pre-configuration failed febr 05 14:06:54 feralheart-ThinkPad-X61 apache2[8409]: Action 'configtest' failed. febr 05 14:06:54 feralheart-ThinkPad-X61 apache2[8409]: The Apache error log may have more information. febr 05 14:06:54 feralheart-ThinkPad-X61 systemd[1]: apache2.service: Control process exited, code=exited status=1 febr 05 14:06:54 feralheart-ThinkPad-X61 systemd[1]: Failed to start LSB: Apache2 web server. -- Subject: Unit apache2.service has failed -- Defined-By: systemd -- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel -- -- Unit apache2.service has failed. -- -- The result is failed. febr 05 14:06:54 feralheart-ThinkPad-X61 systemd[1]: apache2.service: Unit entered failed state. febr 05 14:06:54 feralheart-ThinkPad-X61 systemd[1]: apache2.service: Failed with result 'exit-code'. febr 05 14:06:54 feralheart-ThinkPad-X61 sudo[8376]: pam_unix(sudo:session): session closed for user root febr 05 14:07:27 feralheart-ThinkPad-X61 ntpd[3434]: bind(22) AF_INET6 fe80::38c9:3707:baa7:72c3%3#123 flags 0x11 failed: Cann febr 05 14:07:27 feralheart-ThinkPad-X61 ntpd[3434]: unable to create socket on wls3 (230) for fe80::38c9:3707:baa7:72c3%3#123 febr 05 14:07:27 feralheart-ThinkPad-X61 ntpd[3434]: failed to init interface for address fe80::38c9:3707:baa7:72c3%3 febr 05 14:07:27 feralheart-ThinkPad-X61 ntpd[3434]: bind(22) AF_INET6 fe80::f9af:ed2f:13e6:d0c%3#123 flags 0x11 failed: Canno febr 05 14:07:27 feralheart-ThinkPad-X61 ntpd[3434]: unable to create socket on wls3 (231) for fe80::f9af:ed2f:13e6:d0c%3#123 febr 05 14:07:27 feralheart-ThinkPad-X61 ntpd[3434]: failed to init interface for address fe80::f9af:ed2f:13e6:d0c%3 febr 05 14:07:27 feralheart-ThinkPad-X61 ntpd[3434]: bind(22) AF_INET6 fe80::7a52:9038:7025:18eb%3#123 flags 0x11 failed: Cann febr 05 14:07:27 feralheart-ThinkPad-X61 ntpd[3434]: unable to create socket on wls3 (232) for fe80::7a52:9038:7025:18eb%3#123 febr 05 14:07:27 feralheart-ThinkPad-X61 ntpd[3434]: failed to init interface for address fe80::7a52:9038:7025:18eb%3 lines 1247-1291/1291 (END
Thanks for your help ! 
&gt; Unless they do some pretty clever things in compile step Oh they do a plethora of clever things at the language design step, then at the compile step, then at runtime. If you're wondering whether languages do "clever things" that affect performance, the answer is unequivocally... **yes**.
I found 2 issues testing the arrow function branch on 3v4l. unexpected? $outer not defined in fn1: $outer = 42; echo "fn1:\n"; $test = fn() =&gt; var_dump(get_defined_vars()); $test(); echo "fn2:\n"; $test = fn() =&gt; var_dump(get_defined_vars(), $outer); $test(); no result with fn version (segfault?) echo "function:\n"; $test = function() {foreach (range(11,12) as $k =&gt; $v) var_dump($k, $v);}; $test(); echo "fn:\n"; $test = fn() =&gt; foreach (range(11,12) as $k =&gt; $v) var_dump($k, $v); $test(); 
Do you still pick your nose and suck your thumb as well?
&gt;Do you still pick your nose and suck your thumb as well? Yeah, no need for personal attacks there. And besides, I've started recently using php-cs-fixer. I wrote some sample code and in fact it does expand one-liner `if(...) ...;` into brackets. Now that I know that for sure, I'll be adjusting my coding style accordingly.
Indian blogspam.
Why you think this is a blogspam.
Or just use a decent profiler
What do you have so far? I think it depends on how complicated these things you are doing are.
Depends on the full lists of tasks and what framework you are using, but using events can be very beneficial. Example: - create user - event user created: add info, create perms, add to groups, etc... This will allow your controller to look very simple and small, but it will cause confusion when someone is reading the code for the first time and doesn't understand where these extra things happen 
Put tasks in methods and then call them. You are now OOP master. It's essentially a "good practice" to keep things as simple as possible, instead of hammering your code with concepts and structures you don't need.
&gt; It's also part of the reason that some countries don't allow governmental institutions to have websites in PHP ... source? &gt; I don't agree that it's trivial to avoid, especially if you have a large codebase with thousands of such constructs (which is not uncommon). A modern codebase has one such construct: the autoloader (typically the Composer autoloader). The risk comes from outside PHP, in the way servers like Apache would execute any file as PHP, which is regardless of your codebase. But Apache can be configured to not recognize files as PHP in general, but do so only for your application bootstrap file. Then people can upload PHP all they want, but they'll be getting just their source text back. And to make this change, it's one line of configuration change in your httpd.conf, no matter how large your PHP codebase is. Once again, if this is the value proposition, "security", then this project is a solution in search of a problem, despite how cool in a nerdy way it is. Sorry to say that.
I agree. 
`fn` does not import the entire outer scope; only variables that are used. Thus `$outer` should not be defined in your first arrow function. I *think* the second issue is just because 3v4l hasn't rebuilt since I fixed another bug; I'll check later to make sure it's the same bug. But the syntax wouldn't be allowed; `foreach` is not an expression. Edit: I just checked my implementation and it properly gives a syntax error for: fn() =&gt; foreach(range(11, 12) as $k =&gt; $v) var_dump($k, $v); Instead of segfaulting. The implementation on 3v4l needs updated.
exact thoughts. How can someone build an app using solely PHP? It could've been better if she was described as the one who came up with the idea for the app and built the whole backend stuff; but using "all the coding"? really? She must be a one-man team.
Feels hacky, not in a good way. 
Question: is Laravel your full time job? What's your business model?
You keep wanting to talk about one thing, I keep wanting to talk about another. We're doing the same thing, and this conversation is pointless. You don't seem to understand or want to talk about my point of view, and at this point I no longer care about yours either. Good day.
You living in the wrong century bro :)
If you have a shitty website in php..it will be the same in asp :D
How is it different from http://couscous.io?
C#, C, and PHP are different languages with different syntax. Using single quotes is perfectly correct in PHP and has a different meaning from single quotes in C or C#. PHP does not have a char type; single quotes means that the string does not support variable interpolation like double quote strings do (also, a feature not present in the other two languages).
&gt; Because i think it a bit better than using something like this How about this: FROM php:7.1-fpm RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer ONBUILD COPY composer.json composer.lock /usr/src/app/ WORKDIR /usr/src/app ONBUILD RUN composer install --prefer-dist --ignore-platform-reqs --no-scripts --no-autoloader My point is that composer misses some feature in separate container. I prefer to store composer right in my application container since i could use `composer run-script` in that case.
Well, OK, but then there needs to be a naming convention. PHP\Crypto\Sodium? Anything, really, just as long as we're not using stupid_methods_in_the_global_namespace().
1. Two entirely different systems. 2. What makes you think it will be Trump vs Hillary again? 3. I just outlined the strategy here. Instead of going back-and-forth and giving bikeshedders something to use to block the adoption of libsodium, it's a secondary option. The final score of the final option leads to tree possible outcomes: 1. An exception to the coding standard, without updating the coding standard, that the bikeshedders can't do anything about. 2. Measured support for amending the coding standard entirely, then revisiting this decision with a superseding RFC vote. 3. Measured support for keeping the coding standard entirely, which means that namespaces in core functions aren't going to ever happen. Instead of pouting about a perceived bias, try to see the forest apart from the trees. If you lack the capacity for strategic planning and execution entirely, I'm not sure what we can accomplish by further discussion.
I suspect Yoda conditionals might be more popular when they match the syntax of the programmer's native language. As a native English speaker I find myself having to stop and read them backwards. The accidental assignment bug they prevent is quite rare in my experience so the extra cognitive load just isn't worth it.
But that's how the language works *now*. It's better to be consistent with that and implement a well thought out change in a major release than to introduce more inconsistencies in PHP.
It is different in the following ways: 1. It has no configuration and relies wholly on your chosen file structure and data in version control as meta data. 2. It is not made to work specifically in tandem with GitHub pages. 3. For people familiar with the used technology, it has a learning curve of 0. 4. It allows more fine-grained control over the resulting website. Does not stick to predefined templates and simply does not try to be smart on any decisions. 5. All components and technology can be swapped out by custom implementations. One may use Smarty templates or stop using Markdown if they so desire. However, for those already using couscous, there is probably no good reason to switch, as their overall feature set will not be enriched. It is merely a different approach to what's already out there. More in the way of manually creating HTML pages, only with the benefit of using Markdown, if one so desires.
I have to! (╯°□°）╯︵ ┻━┻
It's not a matter of strong or weak typing. It's just that php has no notion of a char type, only strings, so the single quote syntax can be freed up for strings. 
Wow. Huge improvement. Still too slow though. Initial load with cleared cache took ~25 seconds. With cache takes about ~12 seconds.
In PHP7 it is actually reversed - no boost in performance for single quoted strings, and string concatenation is slower than using variables in strings: https://blog.blackfire.io/php-7-performance-improvements-encapsed-strings-optimization.html That said, I usually prefer string concatenation for clarity and also because you have more options to change a variable if needed (even if at first you do not need that, it can quickly become relevant and then you need to change to concatenation anyway).
Set keyboard to US english, it's easier for programming.
I get your point but sometimes I have to write mails with people in my language. Constant switching would make me mad, writing mails is annoying enough :S
Hmm don't know what to suggest as it was good enough for myself, you could try one of the alternative mounting options that is suppose to bring back native disk i/o. 
I can confirm I've been having issues with work on a mac + docker. I tested my docker-compose setup on Ubuntu, it takes roughly 300ms to run one of the Controller routes I have set up in Symfony to do basic tasks. On a mac... it takes 10 seconds. I haven't found a solution yet, but others are hinting towards docker-sync as stated in the open issue. I haven't tried it yet but others are saying it works.
Looking for http://www.whitewashing.de/2013/07/24/doctrine_and_domainevents.html ?
&gt; docker-machine start dinghy `dinghy up` actually &gt; It starts up correctly but going to http://localhost does not work (nothing is listening on port 80 anymore). If you are using it with virtualbox then it will listen on virtual box's host. For that case dinghy has nginx-proxy (for virtual hosts support) and dns service (*.docker domain)
well `localhost.docker` is not `localhost`. Dinghy's dns server will point any `*.docker` host to dinghy vm host. Please read documentation.
3.x. Branch has integrated a workflow bundle that makes implementing state machines easy. Would this be a decent approach? I have no idea I have not used this feature yet. I assume the workflow has a queuing process, abstractions to lay out the different steps of your business process and logging in a clean coherent manner. There are other versions of workflow bundles for 2.x, now if this is a valid approach.. is for you to investigate. Currently I am involved on a project that uses digital state platform application built on symfony 2.x and comes integrated with Camunda, a BPML compatible state machine. This is fully available on github (search for digital state). Camunda is also open+source. This symfony / Camunda setup allows management to modify the workflows/operations on data in the queue without writing a line of code. It is quite impressive but if you are limited on ressources, would recommend the simpler workflow bundles. 
A demo would be great. 
Single quotes being more performant is a [long living myth](https://nikic.github.io/2012/01/09/Disproving-the-Single-Quotes-Performance-Myth.html).
Yep, you could also do that. I choose to separate it because i don't need any composer on my production image. For a quick and dirty project, i prefer to use my composer as is (`herloct/composer`), and add `--ignore-platform-reqs` on the `install`, `update`, and `require` commands.
Here is one more feature you probably didn't know: echo 'hello', $world, 'some string', 'one more string'; ...and this is possible because `echo` is not a function.
 // In your model public function scopeWithCalculatedPricing( $query, $include_tax = false ) { ... } // Elsewhere... // Let's get some product with the total_price calculated with tax $products_with_prices = Product::withCalculatedPricing( true ); We need to stop for a moment and savor the misery here. At one place you write: - an instance method with a certain name and two parameters and elsewhere this allows you to call: - a static method with another name and one parameter That's what I call good API design!
Why would it be? It could fail either having no return while Foo[] is expected, or because it returns [] while Foo is expected
If this get accepted it it will add the SCrypt password hashing officially to PHP which is a much slower hashing algorythme when Bcrypt
Nope. https://wiki.php.net/rfc/libsodium#libsodium_api_subset
&gt; your generating an audit log and 1 event = 1 row and the log tables don't have any complex triggers, then 50+ queries is not going to effect your database. Second this. If mysql is already in the tech stack and the workload isn't huge or even known I'd go with this. Huge bonus for mysql is persistence, which you will only ruin with more complicated architecture. 
The meaning is that, although a software installation is required, there is no additional configuration beyond that. Why a static site versus a dynamic site? Well, most people choose for that because of maintainability. Simply don't wanting to set up and maintain any web stack, yet also not wanting to rely on shared hosting solutions. If one still wants to use web forms, I suggest taking a look at https://www.wufoo.com/ 
This is sort of unrelated, but why are PHP RFC votes visible before the end of the voting period?
Yep, \Sodium\crypto_pwhash() hashes using SCrypt https://download.libsodium.org/doc/password_hashing/scrypt.html For php https://paragonie.com/book/pecl-libsodium/read/07-password-hashing.md#crypto-pwhash-scryptsalsa208sha256-str
It would probably be better if you implemented [PSR-6](http://www.php-fig.org/psr/psr-6/)
Transparency.
Not sure if trolling (I wrote that documentation you linked) or just confused. * `crypto_pwhash()` is Argon2i * `crypto_pwhash_scryptsalsa208sha256()` is Scrypt We're including `crypto_pwhash()` (as well as `crypto_pwhash_str()` and `crypto_pwhash_str_verify()`) but not `crypto_pwhash_scryptsalsa208sha256()` (or the respective other functions). Quoth the RFC (from the section I linked): &gt; We don't need scrypt; we have crypto_pwhash() which is Argon2i. So, no, this RFC doesn't get scrypt into PHP, it gets you something far better instead.
The documentation: https://docs.spatie.be/image
Obligatory http://stackoverflow.com/a/1732454
Yup I'm using DON now but I have new problems. http://www.reddit.com/r/PHP/comments/5s9q31/input_elements_disappear_when_using_dom_document/
PHP isn't C or C#. Single-quoted and double-quoted strings have important differences. You can insert variables and expressions in double-quoted strings. Double-quoted strings also support special characters and escape sequences, such as `\n`.
On a related note: https://github.com/paragonie/sodium_compat
If you're using this operator to define a variable that will be used down in the code, it's all right. If you're using this operator to gag an E_NOTICE error, you are doing it wrong. 
It is an if statement (although there is no implicit "if" in it, but it is a conditional as stated in the subject). And I linked to the PSR-2 documentation about if statements so please explain the validity of your sentence in this context. Why do you think I don't understand how it works? That is not what I said, I said that it is unreadable, as in hard to grasp because the code is trying to be more complex than it needs to be. You are basing your comment on an incorrect assumption. Although, I get where you are getting your conclusions from (there was an interesting discussion about that on HN a few days ago), but I don't agree since this is not idiomatic PHP code and there is absolutely no reason to write code like this just to save a few keystrokes (the code is read more often that it is written).
Gonna be honest, making a programming language that asks you to use an English keyboard to easily access new features of it, ignoring the rest of the world, seems rather obnoxious and a bad move all around. Tilde looks nice, but concerns about it being difficult to type on other keyboards seem much more important imo. 
For a real project, i'm using my own base php image (based on php-fpm alpine), with all required extensions and configurations there. That image would be used as a base for my composer, codeception/phpunit, and application image. Yes, i did install the xdebug extension on my base image, but it disabled by default (never call `docker-php-ext-enable xdebug`, nor including `xdebug.so` on `php.ini`). On my codeception/phpunit image, i would enable the xdebug extension (by adding the `xdebug.so` to `php.ini`). P.S.: I'm too still looking for better way of using docker...
I think you have a few options. As mentioned you can just insert to your database at each operation, as long as you're in a transaction that gets committed after all operations are complete should be fine. You can also store a queue of events on the entity itself, i.e each method looks like this public function addSomething($something) { // Class per event. Lots of boiler plate but easier to maintain IMO $this-&gt;enqueueEvent(new SomethingWasAdded($something)); // Stringy event, less boiler plate but hard to reason about $this-&gt;enqueueEvent('something-was-added', ['something' =&gt; $something]); } Then you just have to get those events off the queue and into you're storage. I have had some success with the approach in /u/ocramius 's [post](http://www.whitewashing.de/2013/07/24/doctrine_and_domainevents.html) but it has some problems, [you can't safely use the entity manager from postFlush](http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/events.html#postflush) because the Unit of Work hasn't been properly cleaned up yet... (https://github.com/doctrine/doctrine2/pull/1503 /u/ocramius might have a suggestion for how to avoid this). So that depends on if you want to use the EM from the lifecycle events, can turn out to be a big gotcha later down the road if someone tries to add some additional writes. Your other option for persisting things held against entities is make sure all writes go through a single repository method and pop your events off there. Requires more code-review enforcement to make sure nothing slips through, and complicates batch processing etc. As for the queue itself don't see why you couldn't do it in memory, RabbitMQ is going to complicate things because you might have events in your queue that didn't actually get committed (unless you want that?). Will also slow things down by adding dispatching overhead depending on where your queue is served from. Making an in memory queue is trivially easy in PHP, just use an array and `array_push` to enqueue and `array_shift` to dequeue (or `array_unshift` / `array_pop`). If that's turning out to eat too much memory / be slow go for a linked list queue (easy to implement or [available in SPL](http://php.net/manual/en/class.splqueue.php)) or a resizing queue backed by `SplFixedArray` 
&gt; Simply don't wanting to set up and maintain any web stack How is this possible when the script requires *at a minimum* PHP, a server and an operating system? The only thing you're *removing* from the web stack is the database part, everything else is still needed. The user still has to set-up and maintain the stack
This is `$GLOBALS2`, though. Surely even you can see the value in that.
They (spite.be) often *create* classes which are just wrappers around existing packages or software to promote their agency, see it as free marketing for minimal effort. The only reason I can see for this package is so you can pragmatically work with Glide in your code as in its current state you need to make HTTP requests passing URL params for Glide to work. This isn't really a bad thing and the HTTP request can be made in your current code flow and it works perfectly as is, this package simply gives you *another* way of using Glide. 
Feels like old time's [Zend Registry](https://framework.zend.com/manual/1.12/en/zend.registry.using.html).
&gt; Expected behavior &gt; File-system performance in the container not significantly slower than on the host or docker-machine. No can do. On windows and OS X, mounted volumes are synchronized between the host and the docker VM. This is inherently slow. It can be slightly improved with NFS, but it will always carry a significant overhead. What you need to do is minimize the amount of files being synced. Is there stuff in the volume that you don't need to share between container and host? Cache, for example, should only be on the container. Add --tmpfs /path/to/var/cache to prevent docker from syncing it. Or you could switch to Linux.
Even CodeIgniter 4 requires PHP 7 as minimum
False. That is not how Docker for Mac works. RTFM. 
I wasn't really sure what this did at first, so I just remapped ctrl+w to close the current tab. Now that you mentioned it and I tried it properly, this will be really useful.
Handy! Never knew this worked on DB tables too. 
Why global state is not so good: public function test_context_container_has_key() { $this-&gt;assertTrue(ContextContainer::has($this-&gt;getKey())); } Why would that test pass? How come you should expect some arbitrary key to be present in this container?
I'm new(ly returning) to PHP-land due to a job change -- I've long been one of those people who sneers at PHP and prefers stuff like OCaml or F#. With that being said, PHP is a different critter than when I last touched it about a decade ago. It's definitely made big strides, and is looking nicer to use in a lot of ways! I say all that as preface to explain that I don't know how much my opinion is wanted/welcome/etc, and I don't (yet) know how things are done around here, but I think `fn($x) =&gt; $x *2` style syntax makes a lot of sense here: 1. `fn` vs `function` indicates "this is a *short* function", kinda like how "fn" is *short* for "function", and so the choice of keyword calls out the presence of a semantic difference (automatic capture) -- which makes for a great mnemonic aid for newcomers to the language. 2. `fn` has precedent in other languages: * Elixir uses `fn x y z -&gt; x * y * z end`, which, while ambiguous for PHP's usage due to the lack of parens and space-separated arguments, does add the `end` keyword at, well, the end -- which could help disambiguate some grammar if needed. * Rust uses `fn` is its standard keyword for functions. * OCaml, Standard ML, F#, and Kotlin all use the very-similar `fun` for function declaration, and Swift uses the less-similar-but-in-the-ballpark `func`. 3. `fn` is commonly-known shorthand for "function", often used as a parameter name when working with first-class functions. 4. `fn` gives the right balance of being shorter than `function`, but still searchable -- the Ruby-style double-pipes aren't terribly searchable, and as noted in the discussion thread, can be ambiguous in cases like `[|| =&gt; new SomethingException()]` 5. `fn` allows for the later addition of union type hinting (which I personally would love to see, but I know I can't speak for everyone :) ) used in closures: `fn(OldFrameworkClass | NewFrameworkClass foo) =&gt; foo-&gt;getId())` But that's all just syntax, which is bikesheddable to no end, so reasonable people can definitely disagree with me for valid reasons. More on the topic of semantics, my thoughts coming from various other languages are this: * Yes, the necessity of a `use` clause for anonymous functions *is* different from Javascript, and could cause initial confusion for people coming to PHP from JS, but in a good way: it helps teach good habits. I've been a PHP skeptic for years, but I think this is a really cool and mostly-unique language feature. It's kinda like Haskell's pure-vs-monadic separation: it teaches you to think differently in a more-disciplined, and you can carry that thought pattern with you anywhere you go. Except unlike pure-vs-monadic, it's not a huge pain in the butt to work with. :) * With that being said, I do think the decision to allow implicit capture for these "short closures" is good. If the goal is to reduce visual clutter so that simple value-returning functions like predicates for `array_filter` are more clear, then having `use` clauses works counter to that goal. * While I'd love to see support for multi-statement short-closures *in theory* (more flexible is good!), in practice, by the time you're writing multiple statements, ratio between content and syntax is such that the current "long" syntax is fine. Something like: array_map(function(User $user) use ($userService) { if ($user-&gt;isActive()) { return $userService-&gt;getActivationTime()-&gt;isoFormat(); } else { $referringUser = $userService-&gt;getReferringUser($user); return "Not yet activated; referred by ${referringUser-&gt;getName()}."; } }); is a case where `function` doesn't get in the way -- the actual logic outweighs the syntax, and is still clearly visible.
&gt;Every language is the same This is how retarded you're being.
no, we use lots of other packages and software that was not created in house.
I am not contradicting myself. The answer is obviously performance, I'm merely saying that it isn't something we've focused on, so any benchmarks we produce don't reflect the accurate performance. The first step is to actually get a real-world application running on Peachpie, only then are we going to start optimizing and tweaking performance. 
Yeah there is a difference. About 6 characters difference
https://docs.spatie.be/image/v1/usage/advanced-manipulations https://docs.spatie.be/image/v1/usage/preparing-manipulations https://docs.spatie.be/image/v1/usage/saving-images 
First of all I want to get one thing out of the way. $names = $users-&gt;map(function(User $user) { return $user-&gt;getName(); }); Is a fucking nightmare. It gets somewhat better when you split if over 3 or even 5 lines, but it's horrible otherwise. And I didn't even include a `use` in my example which is a massive problem in itself (currently). In Java the following statement could be written as List&lt;String&gt; names = users.map(User::getName); or List&lt;String&gt; names = users.map(user -&gt; user.getName()); Your suggestion is to have $names = $users-&gt;map(fn($user) =&gt; $user-&gt;getName()); And my first reaction is "But it's not as cool as in Java". But like you are saying yourself: this is probably as good as it gets, we don't really have many alternatives. And most importantly this will fix the issues I'm having right now. The alternative syntax with `||` I don't really have an argument against other than "It looks icky" but if that became a thing I would probably get used to it quick enough. I want to thank you for all the good work you are doing with the RFC and I really hope some version of this short-closure syntax will pass soon. I'm sick of having to write `function() use() { return ; }`
How is it not a contradiction when you say the main selling point of transpiling to c# is performance and then go on to say the output will be slower than PHP?
Why not just store a "token" for the session in cookie and then pull the session data out of redis using the token? Storing all that in a cookie is usually not something people do unless there is a good use case? 
Readable is of course subjective but for me: - null !== $email is backwards trips me up - setting the email on the same line as checking is confusing 
does the same disk access occur when using OpCache?
I'm guessing it's [this issue](https://github.com/symfony/symfony/issues/21534). Or another one like it. The OP's code creates a workaround by aliasing the new name of the `TestCase` class to use the old name.
PHP Next (7.2?) is already getting Argon2i (https://wiki.php.net/rfc/argon2_password_hash) to the password hashing API. It just means PHP will have 2 separate Argon2i implementations (`password_hash` and `crypto_pwhash()`). I think in an ideal world we'd update the `password_hash` implementation to use the Sodium implementation, assuming this RFC gets approved. Personally I'd like to add Argon2id in as a second alternative to Argon2i. I don't think libsodium supports that yet though.
so can we just sum it up as chrome is more insecure? ;)
Yes that specific issue.
I'm confused about what problem this solves. PHP arrays are current context key-value stores. If you want to just access it from anywhere, then you just want the global array.
MOTHERFUCKING GLOBALS. STOP IT. JUST STOP IT!
As far as I'm aware, this looks like an issue with Phalcon or maybe PHPUnit, not PHP itself. Are you running the same installation on both versions of PHP?
A lot of people aren't mentioning this but I've found a way to solve this that wasn't too difficult. Start by dropping use of symfony altogether. Then do the same with php, and you'll end your unit test woes
Yes, exactly same installation, i already checked on non-debug version, same problem. It's not phalcon problem or zephir, it doesn't override any internal php stuff. As well not phpunit because the same class(IsEqual) is already used in other test and this problem doesn't occur for some reason.
&gt; how is Docker so popular? because people use it on a platform it was designed for. without Virtualbox, NFS mounts or other stupid shit.
`global $anything;`
Enable `magic_quotes_gpc`.
If you had used one of these, you would appreciate the benefit isn't in just the getting part, but in the setting part also. It is equivalent to: if ($cache-&gt;exists($key)) { return $cache-&gt;get($key); } else { $tool = new SomeCacheTool($cache); $result = $callback($tool); if ($tool-&gt;cachable) { $cache-&gt;set($key, $result, $timeout); } return $result; }
Thanks!
Is this what I should be using?
Yeah, get the latest stable from here: https://docs.docker.com/docker-for-mac/ You won't need docker-machine anymore.
http://replycandy.com/wp-content/uploads/Stevie-Wonder-I-See-What-You-Did-There.jpg
Or you simply update your code to use phpunit 6....
Do any of the Phalcon-specific classes that extend `PHPUnit_Framework_Constraint` redeclare the variable by any chance? I recall some weird non-intuitive behavior around that.
My best guess would be that phalcon is making improper use of scope faking, leaking the fake scope where it doesn't belong.
Personally, having now 4 ways to possibly configure an app is just overkill. YAML, XML, PHP and now the way you are thinking of. Why not just PHP? Or Yaml whatever. 
You didn't actually read the issue did you.
No, none of those class extend PHPUnit_Framework_Constraint
This is exactly why you are not recommended to use Phalcon, since when something breaks in Phalcon you have to wait for their patches instead of fixing it on yourself. If it is not fixed promptly or never fixed at all, you are on your own. It's better to use a PHP framework in which you can at least go into Their source code and fix some things yourself when bugs happen. This is a different story if you know enough of C programming though.
From a read through of the README, it essentially de-crufts the existing PHP configuration support, removing a lot of boilerplate, while still providing for closer IDE and tool chain integration. 
Laravel config files return arrays too, but unlike this package all values returned are plain arrays, no fluent calls, constants or whathever
Lycos.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
An ORM with multiple database is perfectly fine. I don't know about redbean because I have never used that ORM but it sounds better to have one connection open on each than switching all the time.
[An obligatory XKCD](https://xkcd.com/927/)
http://unix.stackexchange.com/questions/28158/is-there-a-tool-to-get-the-lines-in-one-file-that-are-not-in-another
For application config that's yaml afaik.
Really not an excuse - I very much want to be able to use prepared statements. The query and the parameters are sent to the server and compiled there. There's no way for PHP to be able to get back from the server what the full compiled query looked like. Therefore if you get a query error, you can't see the SQL that caused the error. It's infuriating, really. My application creates a high quantity of dynamic queries based on customer configuration and options. If things go wrong, it's usually in the SQL. With no access to the customer's server, code, or logs, being able to see the SQL statement that caused an error is really important for us.
This is not a standard, it's just an alternative (and it's totally compatible and mixable with existing configuration formats). Else that image would be relevant each time a new PHP project is submitted here.
Even if that was all stored in memory, that's only 10mb of ram. The smallest server you can provision on Digital Ocean has like 500mb. If you're concerned about memory, write an AWS Lambda function to process it once a day. You'll fall into the free tier and never have to pay for it anyways. You shouldn't really have a problem with 10mb of data. 43k rows and 52 columns isn't that big. One thing you could do would be to add another column that stores a hash of each row, then to find out if a row has changed, you hash your current row and compare it against the saved rows. $file_handle = @fopen('/tmp/somefile.csv', 'r'); $iterable_with_known_hashes = some_call_to_get_from_db(); while (($b = fgets($file_handle, 4096)) !== false) { $current = md5($b); foreach ($iterable_with_known_hashes as $item) if ($item['hash'] === $current) { break; } } // Do the things here because the hash was not found transform_and_save_row($b); } fclose($file_handle);
The "Why" is the [first section of the README](https://github.com/mnapoli/fluent-symfony#why) but to make it more clear: - YAML sucks because: - YAML in itself is ambiguous and sucks to write, even though it's easy to read - writing the config is error prone (lately we had a co-worker loose half a day because of a duplicate key, which is silently ignored in YAML) - there is no auto-completion on the config options available and it's not discoverable (you need to alternate between the documentation and the code) - using PHP items is a mess (e.g. a class name, a constant, …): - no refactoring support - no auto-completion on class names - no validation at "write time" (i.e. IDE warnings) - some of these things can be fixed by writing a plugin specifically for Symfony for PhpStorm -&gt; I think it's time wasted when PHP is supported natively and much better - we are PHP developers and we know how to write PHP - XML sucks because: - writing it by hand is hard - reading it is hard - using PHP items is a mess (e.g. a class name, a constant, …): - no refactoring support - no auto-completion on class names - no validation at "write time" (i.e. IDE warnings) - some of these things can be fixed by writing a plugin specifically for Symfony for PhpStorm -&gt; I think it's time wasted when PHP is supported natively and much better - we are PHP developers and we know how to write PHP - the current Symfony PHP config format sucks because: - it's lower level than the YAML or XML formats (which is also why it's not often used or advertised in documentations) - it's imperative instead of being declarative (i.e. you `set()` things on the container instead of describing how to create X or Y), it's maybe a matter of preference here but it's really different from the Symfony spirit - it's not easy to use (the `Definition` class has a *lot* of methods, I don't see that as good developer experience) My ultimate goal would be to get rid of YAML. XML is better (as you can see above), but still not as good as PHP. And the current PHP format sucks. So I agree with you, I also think there should be 1 format. I think there isn't one today because all 3 have issues. That's why I'm researching a 4th solution and trying to see if the syntax may sound better to Symfony users.
In Symfony 3.3 there will be the possibility to use class names as service names, so it will be possible to skip arbitrary string names entirely, e.g. Mailer::class =&gt; create(), Is that what you meant?
Magento use a EAV pattern with non-normalized tables so the same data is stored in multiple places. Perhaps you also might want to go through the Magento object model so that changes triggers events and so on. Say that we need 20ms per row in a world where we go through the object model (instantiating each product and changing the attributes through the ORM). That is 14 minutes for 43k rows. If only 10% are expected to change we are down to less than 2 minutes. A hash/checksum is what I would do too. I would also see if I am missing some column index, and of course evaluate if I really need to go through Magento or if it would be worthwhile to query the DB directly (but again, Magento is non-normalized and might be hard to query manually).
I know what it is and more important, which one it is, hence I said "but my guess is about standards" *I often link this one myself*
If you can get the arrays into memory and only need to compare them once a day, I would not worry too much about the difference in performance here. The key is, OP needs to know what has changed. The performance issues come in the Magento import that follows. Personally I would keep the current data in the database, updating it each day from the file, and pushing changed rows to a queue for importing into the store. Moving those changes into the store is a separate process.
How did he not _"get"_ this comic? He clearly explains why he think its not relevant.
Even if you use the PHPUnit Bridge, you will run into the same issue. If you had actually read the issue, you would know that's it's not actually the users tests that are failing, it's symfony/framework that's stopping phpunit 6 from running. But much easier to just give an unhelpful comment than doing some actual reading right?
Exactly. He didn't get it because he thinks it's not relevant :)
What if I get a slow dev env with the latest Docker for Mac (xhyve) installation too? Unfortunately I work with a big Symfony 2 app, which uses a lot of disk i\o that slows everything down a lot... Is it possible to have a read-only share? I would like to access the cache, logs and vendor folder, but I don't need to write on them from outside Docker...
So, this is where I was unable to make PHP do what I wanted with a super small RAM footprint. Fortunately, I had made the move a long time ago to linux hosts and VPSs in general or machines where I had access to the command line like EC2 or container hosting. I eat my dog food, my own stuff lives on linodes work stuff is mostly on EC2s. I had external CSV files. PHP was unable to process them quickly and efficiently for me through a browser. The job would time out or I would run out of resources. I would run a cron job to 'poll' at timed intervals for new files, thank God I didn't have to deal with updates to CSV files. The files would sit in a 'to be processed' directory. Then line by line I'd read a line of CSV, run it through a TCL csv processing script that output an SQL insert statement. When I was out of lines and files, I'd clean out my working directory. The processing never took more than 15 minutes and I'd check for new files every two hours. Those kinds of helpful coincidences made stuff easier. Now I've got all these insert statements all bundled up nice, thousands of them. Still not good enough. SQL load data infile... https://dev.mysql.com/doc/refman/5.7/en/load-data.html Boom, into a temp table to check loading works okay. Fast, memory efficient. Broken most of the time. Still not good enough. Okay, TCL CSV processing again. If TCL can parse it and rewrite it and quasi limited validation on the field values, then we output to a new intermediate CSV file. Bad lines are logged for manual review and eventual insertion. Good lines are lumped together and bulk load infile'd. Works efficiently enough without breaking. Ship it!
Nah, sorry, I wasn't very specific. I meant type hints for just "bare" variables, like so: function foo() { int $x = 42; // like this ... }
Nice. This is the way CakePHP is using and I really like it. 
First thing that came to my mind looking at the README: - "hey it looks like PHP-DI, I should be talking about this alternative config file to /u/mnapoli" *looks at the package author* - "Oh, of course... :)" 
But IsEqual is plain php class. Code running this test is also plain php class. Just returned value for which assertEquals is done is from phalcon. As i wrote - i can't reproduce this with some other code. But it happens on every run in same place.
But it's not breaking in Phalcon itself. It's breaking on phpunit. &gt; Error: Cannot access protected property PHPUnit_Framework_Constraint_IsEqual::$exporter This is not phalcon stuff.
Import it into a database, and use SQL queries to manipulate the data.
I went with PHP-DI on a recent project and didn't get along with this way of doing things. Too close to a drupalism for my liking. Yet another way of pushing data to an array. 
Try Load data infile from Mysql, it is way faster than opening it with fopen. Then you might want to index that table.
:p
Just some off the top of my head observations... PHP was originally a scripting language that didn't have all the features of other more established programming languages - it didn't get any OO support until PHP4 for example. This is where it got it's initial reputation for being looked down on. When the language was young (PHP3 days), the internals process was a lot different, more chaotic and new features weren't always given the same level of consideration they are today. There were a lot of inconsistent patterns that got introduced to the language giving it the reputation for inconsistency. It's only recently we started adopting best practices and common libraries. Prior to that everyone did everything their own way, there were no common guides or standards to adhere to and it's really easy to write really bad and insecure PHP code without even realising it. Which is where the reputation for bad/insecure code comes from. The language is easy to learn but hard to master, and it's common to see a programming variant of the [Dunning Kruger Effect](https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect). I've seen some absolutely appalling code from individuals who consider themselves hot shit. I saw Gary Hockin speak last year (PHPNW) and he made the analogy that when he thought he had plateaued and finished climbing the mountain that is mastering PHP he soon realised that there is an even bigger mountain hidden behind it and had the revelation that he was nowhere near as good as he thought he was and still had a lot to learn. The people who are bad but think that their great contribute to the impression that PHP is for bad coders. 
If you're worried about the memory footprint, PHP has the ability to stream files line at a time or chunk at a time depending on the format. As for your solution, it all depends on your use case. - Does the row count vary day to day? Will there be 5 new rows tomorrow that don't exist today? If so we will need to keep this in mind at the end. - Is there a chance that Row 20,000 of 45,000 will be deleted tomorrow, making every item after row 20,000 be technically different? If so you will need to perform some light processing to get the unique identifier per row. For your solution, since it's only 10mb I wouldn't worry too much about the memory it's taking and just use file_get_contents for both and then do a comparison then and there. However if you'd like to stream (read it line by line) instead: - Stream your first file, hash the whole line and store it into an array. PHP can read line by line by using `$file = fopen($path); while($line = fgets($file)){/* do stuff */}`, but if you need to do processing to extract the ID at an index use `fgetcsv($file)` - Stream your second file, hash the value and compare to first array with the same index. - If the hashes do not match, you've got a diff, store the contents of that line in an array of diffs and worry about it at the end. - Once they're complete, you have your diffs, do what you like.
Actually, I do like (not love) PHP - I'm a PHP developer for quite some time now (I was a Java developer once too, and played with a lot of other languages for non professional purposes). I went all the way up from PHP 3 to now, and I have to admit the language was once just a non-consistent scripting language. Furthermore, interpreted. And non statically-typed. All I hate, basically. Today, it's much more mature, stable, fast, has a lot of decent features, and is really nice to work with, especially since the ecosystem started to add standards and really do use them. But we have to keep in mind that PHP has still a lot of weaknesses, and it's not possible to drop them without dropping the whole existing codebase, so PHP will always stick with a few low-standard issues, such as the lack of static typing, writing static analysis tooling will always remain very hard to achieve correctly. And a few other problems, of course. That's why I do understand people that once said "PHP LOL" and continue to say so, because there still a lot of "LOL"s in PHP, even thought there's also a lot of mature features and decent runtime. Don't misinterpret me, a lot of languages are "LOL" languages. I mean, JavaScript the worst of all, Python is not far behind it for some of its aspects (not a Python insult, I do not hate Python and it has many qualities, but let's be serious, no static typing and monkey patching are two terrible things to have altogether). Not speaking about languages I don't know, but as a passionate being about languages, believe me there is no perfect language, and almost all of them are the LOL language of someone, and most of them have decent qualities (except JavaScript).
Not the same. In the first you are only appending the object to the result, no further action is taken. In the later you modify the $object you are passing to the getObjectRecursive function, which is then iterated over again.
The problem is actually with your logic! It's not the same because: - In your first function, you are assigning the `key =&gt; value` at the last possible moment, and passing the correct key down the whole time. - In the second function, you are assigning `key =&gt; value` at the first possible moment. The topmost key is used the first time it is encountered, and then reassigning it to the child, so long as it keeps recursing it is taking the first key that it encounters ("Group1") and passing that key down forever. Trace down an output on pen and paper if it looks fucky next time, it helps a lot.
Or you who didn't understand his explanation... :P
&gt; YAML in itself is ambiguous and sucks to write, even though it's easy to read I have never encounter this ambiguity when writing symfony configs. &gt; writing it by hand is hard Writing code by hand is hard. Use an IDE. &gt; writing the config is error prone (lately we had a co-worker loose half a day because of a duplicate key, which is silently ignored in YAML) Please use an IDE: https://i.imgur.com/ucdueRu.png &gt; there is no auto-completion on the config options available and it's not discoverable (you need to alternate between the documentation and the code) Please use an IDE: https://i.imgur.com/KNobGGk.png &gt; it's not easy to use (the Definition class has a lot of methods, I don't see that as good developer experience) `Definition` is a value object, it has setters and getters only. Think about it as of a hash table with autocompletion &amp; typehinting. Seriously, just install the Symfony Plugin for PHPStorm. You wouldn’t start a project without it either way, and it fixes most if not all of the problems (I think it cannot refactor class names yet). Instead, you choose to add a new dependency you have to maintain. I’d focus on the business domain of your projects instead.
Do it stages. Read the CSV file into a table. Then you can use SQL to compare the differences and figure out what the changes are to load into the Magento table. You'll still have to loop over it row by row but don't try and do all the steps in one go and the SQL queries would be faster than looping through the CSV and having to deal with the memory.
There are a number of things people dislike about PHP, some are valid and some invalid. My main gripe with PHP is the poorly thought out API of the core language, there is no consistency whatsoever, many of the other popular languages do not go out of their way to make an inconsistent API the way the PHP developers do. Its like who ever is designing the functions or allowing them into the code has no clue what naming conventions are already in place or just doesn't care. Take for example the string functions http://php.net/manual/en/ref.strings.php * Some functions are prefixed with str, others aren't (str_pad/rtrim) * Some functions that are prefixed with str use an underscore after it, others don't (str_len/strrev) * Some functions manage the above two points but then don't bother to carry on the underscoring naming convention yet others do (str_word_count/str_getcsv) * Some functions use underscores others don't (money_format/addslashes) * Ambiguous function names that you have to research to know what its doing (strstr/ord/strpbrk) There are many other issues with PHP about consistency you can get some pretty strange results without knowing its 'quirks'. A lot of the other criticism is around the (mostly) poor code produced, this is mainly down to the amount of 'new' developers to PHP but also, most importantly, PHP allows people to produce really crap code by allowing things like type juggling and the way PHP doesn't halt/die on an error. This allows most people to ignore errors in their code and just plough on anyway causing unpredictable results further on. PHP has come a long way in recent years (and i love the progress) but it will always be under pinned by years of legacy and poor decisions. 
Yes. And Yes.
I switched from SQL Server to MySQL four or five years ago. Getting the data from SQL Server to MySQL was a huge pain and the tool we used to make do the conversion caused some odd data inconsistencies (some columns had extra or missing data) so we had to write our own tool to copy over the tables that had problems. The ORM did help though. The one place it didn't was in some of the reports that had been written that used SQL Server specific functions.
I didn't word that correctly. :-) 
Yes and Yes too. Had to convert a Doctrine App from Postgres to be supplied to another host that only had MySQL support. Ran with no changes in code other than having to move UUID generation from the Postgres db extension to PHP code instead.
All the recursion issues aren't at all related to memory safety. The crash happening is caused by a stack overflow in the engine which of course make sense as all of the samples are infinitely recursing. Explicit stack overflow protection, like protection against endless loops is not something languages normally provide and, honestly, I actually prefer the SIGSEGV situation of a stack overflow to a consume-100%-CPU-forever situation of an endless loop, against neither a good way of protecting exists. If you use XDebug, you can limit the stack depth and have XDebug terminate your script before the OS will terminate the engine, but what ever you do, endless recursion will always be terminated eventually.
This is what I thought as well when I looked at them.
I think he meant the system diff tool, and then you could just pipe the updated/new rows to a new smaller CSV before hitting PHP and just implement the changes.
You could use a generator to get the contents of the file and then yield it out to your function for processing, if you house an ID on the CSV thats also in the DB Table, you could then check for differences and only update when needed. I use this as a way to process a 500k line CSV thats 100MB big in a few minuets.
This isn't nearly as entertaining as it should be.
&gt; Yeah, most infinite recursions will just cause PHP to crash with SIGSEGV s/most/all/ Also, why create a repo of "elaborate" cases where all you need is &lt;?php function foo(){ foo(); } foo(); 
Sure that would work. However, you do then need to start managing versions of the file, to make sure you are doing the correct comparison. And suppose the updates fail for one of those comparisons, but you don't detect that and moved the file to the "last processed" area - then you could end up losing a bunch of updates. You can mitigate it, but it's a risk.
Actually, the original idea was to use double colon :: as namespace separator, as it is used for calling static methods. I have no idea why it was overturned and \ was introduced, maybe using double colons at the leading namespace level is extremely ugly compared to backslash, although leading backslash is enough ugly too. 
Yes and Yes, but it was pretty much small project. Far more realistic case is "we have database A in our project and some module require another database in order to increase efficiency of search". Your application should use more than one database. In that case any abstractions over storage will be useful. ORM is just one of possible solutions. 
I just point those people to an IDE. :)
Last I saw phalcon can't even compile on 7.1. My money is on this being related. Also this belongs on stackoverflow or https://www.reddit.com/r/PHPhelp/
It violates the "Don't make me think" principle, but yeah, without IDE, you're going to have a bad time.
Have you tried to upgrade your phpunit, maybe 4.8 was too old for php 7.1
Because it limited on web dev only :'(
Not exactly what you are asking but we added a new database to our production app alongside our primary. The ORM allows seamless swapping between the two distinct dbs.
With anonymous classes, the clone-recursion script can be reduced to: clone new class {public function __clone(){clone $this;}}; Expand with whitespace as you see fit.
[removed]
Web dev _or_ server dev, actually. PHP isn't just for websites but can power servers and APIs as well. I've seen a few local CLI utilities handily written in PHP as well. It's just not suited for desktop or mobile _apps_, but not every language is, anyway.
The mentioned php.iquest.net is archived: http://web.archive.org/web/19980114060940/http://php.iquest.net/
1 script, several DBs. Basically, how Redbean seems written is you connect to all db's at app startup in an array. You call which DB you want to use (it uses a switch); We have also tried treating the RB::db connections as objects ($this-&gt;db = R::setup(this_db1,etc)) Then using a Switch to type function to say "switch to this Db, ie R::setup use this NEW connection" But it seems like R:: doesnt "close" the former; it lets it die on inactivity. So as indicated: if a process is delayed (not a query, but more PHP / Apache / Memleak nonsense); Redbean tends to hold open the connection that would normally time out and Die; but never kills it. Its like Apache/php becomes overloaded, and "time out / idle time out" doesnt work anymore. I think after explaining this, we should probably "Close" before "switching"
Its def a lot of apache processesses locking things and CPU/Mem limits of other services; but not MySQL; Is it typical for Apache/php configs to fail to close idle connections if the app runs out of memory?
Holy damn I never knew those 'logos' existed! You can clearly see the 90's in those gifs, thanks for sharing!
But that's a critical thing to consider. Nearly every DBAL/ORM exposes a way to run raw SQL, and sufficiently-sophisticated applications tend to outgrow the abstracted functionality and end up having to go direct in a few places. Of course the transition will be easy if you never do that.
I originally [joked](https://www.reddit.com/r/PHP/comments/5rwg62/rfc_vote_libsodium_as_a_core_extension_in_php_72/ddb63dg/) about doing this, but it looks like the namespace vote will fail on the RFC, so I hacked this together in about ten minutes.
To expand on this, don't use mysql_*. It's terribly out of date. The link above is very thorough.
&gt; I actually prefer the SIGSEGV situation of a stack overflow to a consume-100%-CPU-forever situation of an endless loop, against neither a good way of protecting exists. set_time_limit() :P
Using the repository pattern this can be reasonably straightforward - with laravel I use https://packagist.org/packages/prettus/l5-repository with 1 contract per repository and concrete implementations per DBMS as required.
I had a look at your site/blog. It feels like nothing more than spammy/seo posts with no actual content of any value. Why would anyone want you to write guest posts for them based on that?
Its even worse - these haters are using some shitty language themselves, like ruby, python, javascript or others. So, these haters are basically hippies that have nothing better to do than to hate better language.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I was referring to the get() calls where you need to pass a string and get() does know about the return type and thus you cannot use type hint checks to make sure that expected instances get passed. You need to create an instance yourself to figure out if the construction is possible or not.
As mentioned by @mr_always_right, use an abstraction layer like PDO. Also, do not **ever** use snippets like this: die('Couldn't connect, something went wrong: mysql_error()) It may dump all your database connection information, including password.
very cool feature are added in php 7. a good read thanks
Do you really think people are going to go to this website and buy this, Helen? I'm guessing that's what you want considering all you post are links to this website.
About 7: If PHPStorm is kinda expensive for you in long term, you should look up to netbeans. With some addons and plugins it can done about half "cool jobs" PHPStorm does out of the box. But be aware, there is hardly any IDE that supports for symfony like PHPStorm. Try .atom as alternative to sublimeText. 
There is already PR waiting with some fixes for making it possible.
I am wondering whether there plans to kill scientific notation numeric strings the as well as hexdecimal ones were killed in PHP7.
* `$timestamp = time();` or `php -r "echo time();"` (PHP) * `date +%s` (Linux terminal) * `timestamp = os.time()` or `lua -eprint(os.time())` (Lua) * `python -c "from time import time; print(time());"` (Python) * `var timestamp = +new Date()/1000` or `node -e "console.log(+new Date()/1000)"` (seconds precision) (Node.js)
Yes and Yes. Developed an application using Cake 3 using mysql locally, but the project requirements changed and we had to go ahead with postgres at the end. The ORM made this transition a breeze :)
&gt; but overwrite the result on a completely arbitrary basis(the order in which instances of the filter classes were passed in). Well, a PHP-array, when used without specifying keys, behaves like a list, so an ordered collection. This means that the order in which you add the filters is the order in which they are applied, so it is no arbitrary. In the context of filters this also is relevant: htmlentities for example will also encode control-characters, which you therefore might want to filter out first.
Ah right I see, that's a downside compared to actual PHP factories indeed.
They're trying to get referral money from UDemy.
Missing unit tests, do not trust.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
&gt; I'm pretty sure symfony use an observer pattern (as almost any decent event systems, at least in PHP). While close enough for confusion, it's not the same. Don't look at me man, that's what the docs say: &gt; [The Symfony EventDispatcher component implements the **Mediator pattern** in a simple and effective way to make all these things possible and to make your projects truly extensible.](http://symfony.com/doc/current/components/event_dispatcher.html#introduction) ---- But other than that, yeah. Your example is good. I can see uses for it now.
Are there recordings available?
Just think of the Mediator as being an air-traffic controller. It centralizes all of the communication among several objects. The alternative is a web of interdependencies. Sometimes, this is desired. Often, it isn't. For what it's worth, I have yet to want to reach for it to solve anything. It's good to keep in your mental toolbox should a situation come up where it'd be useful, but this pattern just isn't frequently called for.
The reality is that a dedicated attacker would pre-compute all short letter combinations + the lists of most common passwords from hacks, plus some other magic sauce like word dictionaries and simple word combinations, take that list, and pre-compute all the possible combinations for something like WPA-PSK which used a combination with the SSID, 1 million words X 1000 SSIDs is 33Gb, making the salts longer (or even having one to begin with) and making the hashing algorithm take longer to compute seriously decreases the viability of rainbow tables
Okay, I can explain this simply. Here's an example problem: you want to be able to transform something, like a string, in an arbitrary number of ways, such as: trim the excess spaces; add html tags; or whatnot. Let's look at our options. **One huge class**. You could write a single class that does all this, but that breaks the Single Responsibility Principle and also the Open/Closed principle. You would have one class doing three things, which makes the class not likely to be reused and hard to maintain. Additionally, in order to add a new transformation you have to modify old code, which is prone to bugs and also hard to maintain and causes code rot. So, let's *not* do this. **A Decorator Pattern.** You could have a chain of string transformers that each implement some transforming method from an interface. Then, each one references the next and transforms the string in order: the trim transformer knows about the html transformer. When you ask the trim transformer to transform the text, it does it and then asks the next one in the chain to do it. We've solve the Open/Closed violation: now, in order to add new transformations, we create *new* transformers and add them to the reference chain. We have a coupling, though: each transformer knows about the possibility of other transformations. Because we didn't resolve the Single Responsibility violation, each one in the chain has two responsibilities: transforming and *also* doing the next one in the chain. It's better, but not best. **The Pattern in Question.** Make a transformer that contains a whole list of transformers, and whose only responsibility is to apply an arbitrary number of transformations to a string in the order they were added. Now, like before, in order to add new transformations, we create *new* transformer classes, which is good, but *also* each one doesn't have to know about the concept of other possible transformations at all. Each one has a simple job: apply its only transformation. You could choose to reuse one of these on its own in another project if you wanted. The composite transformer -- the *Mediator* -- also has one simple simple job: apply many of them in order. The Mediator is so simple, it will likely never change in the future. Each transformation is so simple that they will likely never change in the future. To change the behavior of the app at large, we change the list of transformations in the Mediator, which is unlikely to cause bugs. To make new transformations, we *create new transformation classes* that each do *only one simple transformation* and nothing else. Thus, the solution is *open for extension, while closed for modification*, because we extend it by *adding new code*, not by modifying old code. In the example you posted, the InputElement class is being used to first make any null values into empty strings, then trim excess spaces, and then does htmlentities to it. The filters it applies can be set to whatever Filter classes you choose to give to it in whatever order you do. I am, however, confused at why they didn't use a Composition Pattern and make the InputElement class a Filter itself.
&gt;So many early decisions made on a whim still affecting us today. Frame this.
Laravel is vastly simpler to use than Symfony, meaning it will likely be easier to hire for should you need to add more developers to the project (though it depends on your location). Symfony devs may be harder to find and more expensive. That said, because Laravel is so simple, you can use it poorly, and you'll want to spend extra time developing a robust style guide and architecture so that everyone is on the same page about *how* to use Laravel. Laravel makes more assumptions than Symfony, but only through defaults. I've not run into a situation where Laravel is restrictive, so both frameworks should be able to get you where you need to be. So if hiring considerations aren't an issue, just go with Symfony. It's what you know, and it's not going to get in your way. 
This is a really good write-up on a clever exploit. But the fix is wrong. Instead of `===` they should be using `hash_equals()`.
This is what happens when programmers are allowed to make graphics.
The primary reason we chose symfony in our corporate environment is semantic versioning. symfony offers a more stable framework to rely on, you even have LTS release with quite long support cycles (36 months for lts versions). That makes it a bit easier to not constantly change your own app in order to still be "safe" regarding bugs and security patches.
There are some from last year here: https://www.youtube.com/channel/UC3PGn-hQdbtRiqxZK9XBGqQ I suppose they will put some from this year as well at some point.
Is there one for GitLab instead?
OP is trying to understand a pattern. Instead of explaining the pattern, you give him another pattern, without any context. How exactly is that helpful?
Could be the existing version is hugely outdated, written by poor developers in huge time constraints with massive hacky fixes all over the place. The fact they recognise and are willing to absorb the costs of a rewrite could be a blessing here.
I'm assuming you aren't a native english speaker / writer; so i'll give a little feedback on the wording, not the content. Please don't take offence at this, but it will hopefully make it easier for other non-natives to understand and read what you intend to say. I'm going to ignore niggles like commas in wrong places or whatever, that don't really affect readability, and focus more on wording that I found unclear. &gt; I created several Composer plugins and script’s in the last time. "time" here doesn't make sense. I'm assuming you mean year, month, X days etc. &gt; need a further local Git repository and move some tags around. I'm not sure what the "move some tags around" here means. &gt; minimal familiar Isn't really how it would be written in english, it should be `familiarity`, so it would read :`to have minimal familiarity`. &gt; You can found "find" 
LTS. This alone is enough for me to stay on symfony.
At my company we find that it's extremely useful, especially at scale. We don't use it in isolation - we build almost exclusively event sourced systems, so CQRS + ES + DDD is normal for us. In that combination, it's useful for entirely non-technical reasons - IMHOP, it's all about project management: CQRS/ES/DDD, when done correctly (i.e. with due attention to transactional boundaries) is great for managing coupling and cohesion and therefore makes projects a lot simpler to coordinate. We also find that it cuts down dramatically on QA effort because there are less side effects. (We don't have and don't anticipate needing a QA team.) Wrote a post on some of that: https://adaptechsolutions.net/eventsourcing-why-are-people-into-that/
The Blub Paradox - http://paulgraham.com/avg.html One additional point that I see rarely see is that PHP has no academic roots nor support. The majority of user visible characteristics evolved from real world issues and most of them have been solved pragmatically. For academic purposes the language is probably too naive. Functional languages have much more to offer and to explore. Languages like C are very useful to teach bare metal programming. Python as dynamic language has a strong background in academics and has much broader usecases. While the web has become more important it is at least for academics just one niche and PHP doesn't excel at other purposes. Even if it would be possible, no one is really doing it. Two major technical issues are probably that PHP had never strong concepts for long running processes and threading. So the lack of academic support and experience is for me at least one serious point why PHP gets not much respect. On the other hand academia should really care why PHP is so widely used and what made it so successful or what could even make it better.
Laravel has too much magic behind the scenes for my tastes. Symfony is much easier to create bundles and break them out into difference micro services later if needed. Also LTS is pretty much reason alone if you are building a system that's going to be constantly updated and changing.
+1 Actually, you can call not $mediator itself, but $myClass itself, which could say mediator to perform something, which can call $myClass2 or something else. Like event manager.
Do some research. While all major PHP frameworks are extremely similar (to me anyway), one must have a feature that is ever so slightly better suited for your project. How is there all this talk of which framework to use without discussion about the problem that needs to be solved. Framework fandom is toxic.
yea but it just removes 350gbs of data. 
hi very useful tool, can you make support for bitbuket and gitlab?
$answer = $q1_answers[$_POST['videogame']];
Just a note: Why not set the value of those options to the corresponding integer?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
eval is used for call plugins hooks...
Laravel adds a bunch of sugar on top of Symfony, but I'm not convinced it's good sugar. Too much magic. It might be easier to get started with because it's a "batteries included" framework but that doesn't mean the new devs will actually understand anything that's going on under the hood, and IMO that's dangerous.
Procedural code is the best. Don't use mysqli use the unsecure mysql_connect(). Also mvc is the cancer of software development. Don't use it
What the hell is that website ? The more I scroll, the bigger my Internet history becomes.
Why? Variadics were adding 5.6 and this is only going to support 7.2.
Almost all of Laravel's magic is optional, and can be explicitly disabled in the configuration. Of course that means you still need to enforce a coding standard so the new junior dev doesn't start spraying `App::make()` all over your domain models.
It is a wrapper of the following query: DROP DATABASE %s
Variable scope. The calculate() function has no idea that $total is defined outside of it. You would need: function calculate($answers) { $total = 0; foreach ($answers as $value) { $total += $value; } return $total; } $total = calculate($answers);
Indeed. If people actually want this as a real thing I'd clean it up quite a bit (or accept pull requests), but I don't even know the actual signatures of the underlying methods right now. This is basically a copy-paste of the RFC run through a couple of regexes and vim macros.
beyond what others have pointed out, you could just use the `array_sum` function: $total = array_sum($answers);
You never need a global. 
`array_reduce` works too as a more generic solution, although that's kind of overkill here unless the array contains something more than just numbers.
Laravel also has LTS releases with updates provided for 36 months. They're released shortly after Symfony makes an LTS release, so that the underlying Symfony components have a similar support lifetime to the Laravel release. I think it is often worth having a long think about whether using LTS versions of a framework is right for a project or organisation. I've seen a lot of cases, with Symfony, Laravel and other platforms (PHP or not) where an LTS version was used with the intention of upgrading to the next LTS version when it released. But in the intervening years the platform changes in significant ways and instead of a number of smaller, regular, easy to test upgrades, you end up with one major upgrade that breaks many parts of the system at once, requiring proportionally more development time, planning and testing than if the application is regularly updated with a lag behind the latest cutting edge version for any release bugs to be worked out. Additionally, because it can be years between needing to upgrade an LTS version, planning for these major upgrades is often not well thought through and enough resources aren't available to actually execute the upgrade alongside normal business before the LTS runs out. There are certainly situations where LTS versions make sense, but it's definitely a decision to put some thought into. 
Beware there may be no more LTS releases for Laravel, https://twitter.com/taylorotwell/status/809768330118758400 
It seems actually a pretty good answer, cheers. Just let me make sure I'm getting it right. I also might want to follow up on some of the 'how' if that's alright? So, I should only really be worried about what's going on in the loadForm() method? That's what I've been leaning towards - what does it get back, what happens when the private methods are fed incorrect data, does it return an appropriate value? If this is the case, I don't know what best practice is for doing certain things. Writing a test to check for the first exception is a no-brainer, but how can I test the second, which needs to load from an actual file, without also triggering the first? Separate out the first into another private method and stub it, or actually create a file to test against? Maybe neither... It's these edge-cases beyond the commonly used assertions and using mocking etc. I'm finding difficulty getting some solid info on.
No votes for ZF3? ZF3, Doctrine, Phpspec are a pretty formidable combination!
I was thinking that if they're not going to properly back up our data we kind of need a way to.
DAS Keyboard but an older edition without the weird knobs and shit on it: http://www.daskeyboard.com Edit: Its the Model-S that I have: http://www.daskeyboard.com/model-s-professional/
http://www.pckeyboard.com/page/product/UNI0P4A
Right now a Microsoft curve 2000. Switched out from a Microsoft Keyboard 6000 after dumping coffee on it. I like the 6000 better. Oh don't ever buy a Microsoft Comfort Curve Keyboard 3000, the key offset is crap. Go for Z and hit shift instead, that's how bad it is. ^Fixed ^shitty ^typo
This is not a PHP topic.
Great! Yup, that's the idea. If you find yourself writing more than two tests that are exactly the same, except for the different files referenced, then I'd recommend take a look at the @dataProvider annotation for phpunit, which makes building a bunch of happy path tests much easier. https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.dataProvider
I've actually grown quite fond of the basic [Apple keyboard](http://www.apple.com/shop/product/MB110LL/B/apple-keyboard-with-numeric-keypad-us-english). Not too loud, just enough feedback and I don't feel like I need to press too hard with each keystroke. And the low profile of the keys *seems* to help keep it a little bit cleaner. 
Shout out to/r/mechanicalkeyboards. I rock a Pok3r at home and V60 Matias Mini at work. Cherry MX Brown on the Pok3r and Matias Click switches on the other. 
That example is definitely too simple, and highlights how functional programming would solve that particular problem more concisely than stateful OO. let result = transform('Hello, World!', [ nullToEmptyString, trim, htmlentities ]); The `transform` function just applies the array of pure functions in the sequence it's given. There is no state or side-effects, the function is 100% pure. The PHP pipe operator has been proposed which would make this even simpler: $result = 'Hello World' |&gt; nullToEmptyString |&gt; trim, |&gt; htmlentities So given that, the ceremony needed to wrap such simple behaviors into classes, and a stateful class that tracks which transforms have been added, seems like overkill to me. In short, don't use mediator where a chain/sequence of pure functions will suffice. You'll get the most value out of the mediator pattern when you do actually need to be able to partially apply transformations through an execution cycle, and you want various points of that cycle to register transformations. The classic example is response mutation (setting headers, setting content, etc). Different middleware and controllers can apply different transformations to the response before the response is executed. But this can lead to bugs, because different transforms might conflict with one another, and you have to track down when they're being applied. So I would argue that the more you rely on state in your mediator, and the more places apply transformations, the more bugs you'll encounter.
I can only speak to personal experience. For methods that load data from external sources like file or database I often mock these and use them to return test data to evaluate if the public methods return what I expect them too. I do try to have one test that uses the class without mocking of methods in which use test file or test database. I find easier to use method mocking to test things like bad data I find easier then creating external data and its contained within the test and I generally find that easier to maintain when don't have to dig to see the data I'm using 
Same keyboard, same reasons. I just can't get used to the feel of the keys of anything else. What I really miss are those old IBM Model M keyboards.
You can't /thread
The CODE keyboard with Cherry MX Clear switches. Can highly recommend!
I love mine for gaming but don't get these if you work in an office with others. Please.
What other programming languages do you know?
You know any website or material that can help me learn it fast.
There are some sites that have paid courses that you could learn from. You could go through laracasts but I dont think most of the material would be understandable unless you've done some programming (particularly web development) in the past. But it might give you useful information while leading you to questions which will lead to the knowledge that you need (like "what is a controller" or "what is middleware"). Applying that knowledge and building your own site will lead you to solve your own problems (how do I do this in PHP, how do I do that. Oh there is a library to do that, how do I use it? Oh what's composer? What's dependency management? how do I install composer? etc.).
Have you tried [this](http://lmgtfy.com/?q=php+user+ip+address)?
I learned originally from lynda.com, which I really liked. But is not fast, I've been doing it for a couple years and I still wouldn't call myself an expert
I'm using a Razer Deathstalker Essential. I Love the way it types. Thin, fast keys but enough feedback too make it feel like a good solid press.
I hate it when I hit shit while typing.
Local system where php is running? Maybe you could shell exec an ifconfig command and interpret it. Public IP of the visitor is $_SERVER ["REMOTE_ADDRESS"]
Currently on a ducky one 1508f with brown switches. Recently bought it to replace my 15 year old happy hacking keyboard. Basically any mechanical keyboard will be fine. I chose the ducky because it can easily remap keys. I always use the caps lock as ctrl. Two of my colleagues use Das keyboard model s, also with brown switches. The rest either use apple keyboards or some assorted crap. [Ducky one 1508f ](http://i.imgur.com/HfIEiU9.jpg)
Used mine for about 15 years. Loved it. Had to be replaced finally, because too much coffee :) 
That's not true at all. Not all mechanical keyboards are built the same, and if you get lighter switches (like reds for example) it requires much less force to actuate them. There's a lot of options and most of them don't lead to fatigue.
If you get a mechanical keyboard for office work, make sure you get one with Brown keyswitches. The Blue keyswitches are extremely loud and will irritate everyone in your building. Brown keyswitches have a similar feel but without the audible click.
I am using this one https://www.sharkoon.com/product//SkillerPro#desc It's very cheap and pritty good quality. I will buy a more expensive one next time but i needed a cheap one. This one is machanical and has a backlight, 6 macro asignable keys. Multimedia buttons and software to configure it (not the best, pritty slow) but i like it and it only costs 35 euro...
KBC Poker with Cherry MX Red and Deep Space Keycaps. looks something like this: https://s-media-cache-ak0.pinimg.com/originals/ff/77/5a/ff775a3c8b12f60fc9c256d0a9cdbfb6.jpg i don't have that cool astronaut cap and i have "normal" number keys on the top row.
Not with that attitude you can't.
To whoever this person ends up working with.
As always, there's more than a 100 ways to do things. Yes, ofc that works too, why shouldn't it.
^ This guy gets it
&gt; If you had actually read the issue &gt;&gt; There was no issue linked ... &gt; it's symfony/framework that's stopping phpunit 6 from running You don't have to worry about the phpunit version if you use the simple-phpunit wrapper, that's what I'm saying.
Same, only MX blue. Overall good keyboard but I feel I paid too much for minimal functionality. USB cable was cheap shit, too.
&gt; Symfony has odd DSL conventions like the underscore in _controller, and AppBundle:Blog:show which maps to a function called showAction. This suffix is completely unnecessary, and is just straight-up poor API design. That's if you use bundles. If you use Controller as a Service, which I highly recommend, as it abolishes the need of bundles in your `src/` dir, you can simply do `your.service.definition:method`. That's only if you use a non annotation configuration. &gt; Conversely, Laravel just uses regular old namespaces for locating the controller, and the method maps directly to the method name on the controller. No weird suffix needed You can do that in Symfony too. &gt; Don't even get me started on annotations Please don't. I love them, you can hate them, but they are extremely useful. I agree that `_controller` is weird, but that's probably because just like the defaults you configure, it gets put in the `Request-&gt;attributes` bag. 
Unfortunately my use case is a big Symfony app, which has A LOT of I/O from the disk... VMWare Fusion with NFS was really slow too. Dinghy will be my last attempt, but I fear I will get the same slow results. Last resort will be putting the project inside a Virtualbox VM and sync to the outside, in the opposite direction. The perfect solution would have been docker-sync with multiple one-way syncs, but I would have needed the option to choose the direction of the sync: code from host to VM, vendor cache and logs on the opposite direction.
Using this beasty. Absolutely love it. Specially the huge spacebar. https://media.steelseriescdn.com/filer_public/b3/47/b347ea33-8c5e-4fad-9fcb-903216df0aea/apex300_leadin_proof3_l.png
My first recommendation is to abstract the file loading from your class. If not, you fall into 1 of 2 traps. 1. You end up writing holistic tests and thus are forced to create a lot of test cases to test a variety of scenarios as a result of having to take into account of logic that sits outside the boundary of what you are actually testing. Is it really valuable that your test suite now has to test what happens when the file is not found? Or if the xml is invalid? etc etc. This is really inefficient. 2. You end up mocking a lot of things in your tests, which leads to reducing the value of your tests. My preference is to remove dependencies and have other tests deal with testing it. `function loadFile` should be a method of a class outside this one which gets injected as a dependency. This way, you can write tests that test the dependency object for its essential requirements. Meanwhile, you can inject a mock object into the other class to test it independently. This leads to fewer, but more meaningful tests and less complexity. I hope this made sense. PM if you are still uncertain and want to know more.
I wish you could still buy the mini USB keyboard, the same form-factor as the laptop. Never been a big fan of bluetooth, and it seems kind of pointless for an accessory that never moves anyway.
My laptop keyboard died a few weeks ago, so using an ancient Compaq keyboard from the junk box, probably late 90s. It is actually surprisingly good - heavy, and with proper mechanical keys. PS2 to USB adapter was necessary. 
[Just replace C++ with PHP and you have your answer](http://abstrusegoose.com/strips/ars_longa_vita_brevis.png)
[dell SK8110](http://en.community.dell.com/cfs-file/__key/communityserver-discussions-components-files/3514/SK8110.jpg) been using it for years. picked it up for $1 at a eco-recycler, best $1 i've ever spent. basic, but works flawlessly. 
Vortex Pok3r https://i.imgur.com/ctvmCZH.jpg
A standard black Dell Keyboard at work and a [Logitech G105 CoD version](https://www.amazon.com/Logitech-Gaming-Keyboard-G105-Call/dp/B005S0KH7I) (Just for the green LEDs, no CoD kiddy here) at home. I think the most important is that it's not "bad". I have no problem to use other keyboards as long as they don't get worse like laptop keyboards or Mac keyboards, because either they are smaller or their keyboard layout is different, so I have to use different strokes or longer/shorter moves to hit a certain button like `&lt;?= x(); ?&gt;` while this one is pretty easy done on many keyboards, on other keyboards I had to look on the keyboard pattern and do some finger moves to actually reach the buttons.
I will not agree with all the rest. You can be a PHP developer in one month, even probably less. The thing is, you want be a good one. In a month though you might get the proper base knowledge to help you understand your limitations and work on them. Developing in any programming language requires constant learning, since there is something new coming out all the time. In addition to the other recommendations in the previous post, I am linking you the following resource which provides among others and PHP lessons followed by quizzes you have to answer by using PHP. [Academy of Code](http://www.academy-of-code.com/en/) I admit I am partial to the above site since I have played a part in its creation.
Vengeance® K90 Performance MMO Mechanical Gaming Keyboard http://www.corsair.com/en-gb/vengeance-k90-performance-mmo-mechanical-gaming-keyboard It has programmable keys (G-keys) on the side which I have bound to common tasks like load the terminal and do a git add or load up SSH and connect to a given server. This saves some notable time in my day so I can have extra time to browse reddit
I'm using a Microsoft "Wired keyboard 600", both at work and for my computers at home. Have a few spares laying around as well. Pretty much everyone at work uses them too. Can be bought inexpensive locally, around $10. [amazon link](https://www.amazon.com/Microsoft-Wired-Keyboard-600-Black/dp/B001OAR26K/ref=sr_1_6?s=electronics&amp;ie=UTF8&amp;qid=1486633646&amp;sr=1-6)
Laptop's built-in when mobile and [Corsair K70 Brown](http://www.corsair.com/en-us/landing/k70-rgb) when stationary (office or home)
And that's the one that I use at work. :) I can definitely tell it apart from the Apple keyboard though: It has slightly concave key caps and feels like it has a bit more travel. Or maybe it's just a different resistance? Anyways, I think I actually like it better than my Apple keyboard that I use at home. It's great to type on for long periods of time.
haha Give him a PHPElephant. 
[This one at work](https://www.amazon.de/Cherry-G80-3850LYBDE-2-MX-Board-Professional-Tastatur/dp/B00D63W7TU/ref=sr_1_1?ie=UTF8&amp;qid=1486635264&amp;sr=8-1&amp;keywords=cherry+mx-board+3.0+red+switches) and [this one at home](https://www.amazon.de/Logitech-Spectrum-Mechanische-RGB-Gaming-Tastatur-deutsches/dp/B01G5Y27VY/ref=sr_1_2?ie=UTF8&amp;qid=1486635285&amp;sr=8-2&amp;keywords=g910%2Borion%2Bspark&amp;th=1)
Yes definitely overpriced, but i got a good deal through massdrop otherwise i wouldn't have ordered it. I think the minimalism looks great though, that was the main reason for me to get it
how open to modification is the first line? can you create an object and use __toString()?
Me too, as simple as it gets http://www.logitech.com/en-us/product/k120 Best i've ever used for writing code, it has the perfect tilt for my hands. Took me a few years to finally find it after trying out more expensive alternatives. Who'd think the cheapest keyboard would be the best for me :P For my gaming rig I'm using https://www.newegg.com/Product/Product.aspx?Item=N82E16823239023
&gt;laravel, cakephp or codeigniter None of those.
 $lol = 'A'; Or to put it another way, your question is bad. You need to provide much more context or no one can answer it. 
So to boil it down you're effectively asking how to break any PHP script with no effort. How millennial.
This isn't where you come to get homework answers.
[removed]
Pretty much
Well if you look at http://php.net/manual/en/reserved.variables.server.php You will notice that there is $_SERVER["SERVER_ADDR"] But that is limited to server current IP . Server might have multiple IP's. If you need those, then you can't get them. The only way is to use shell_exec ifconfig as suggested or with some other server command/script. Not with php variables, because it doesn't know these addresses.
I'm fortunate to work with a bunch of nerds who also use mechanical keyboards and we're all jacked into our headphones and clicking and clacking all day. I find the sound somewhat soothing.
You must type pretty hard. I find the sound of the keys bottoming out on the browns to be rather muted and quite tolerable. I switched from blue to brown at home because my home office is like an echo chamber and the blue switches were even driving *me* crazy. At work we have an open office with acoustic tile ceiling and carpet so noise doesn't actually travel very far. Browns are practically silent compared to blues there.
Thanks. I appreciate your advice. I'm comfortable with html and css. I have a website that I built from scratch. I want to learn php because I want to be a back-end developer and I don't really know how to cos of so many confusing terms, like php, php5 and php7. I don't even know if I should finish the topics on w3school before learning a framework, laravel. I'm currently using w3school to learn. Thank you.
I'm there already
Try eval()
I would recommend the blue key switches for light pressure typing with that clicky tactile feel. You don't have to bottom out the switch to know that it triggered. Reds and browns are very similar, the keys don't have the kind of mid-press click that blues do. Reds require more pressure to bottom out and tend to be preferred by gamers who really whale on their keys and want to be sure the key doesn't activate accidentally part-way down the key stroke. I use browns full-time at home, they are also pretty good for lighter typists (like me), but the activation happens "quietly"; you don't have to bottom out the key for it to activate and it activates partway down the key stroke. There are also some slightly less popular Cherry color key switches, like clear. You can buy a key switch demo unit from some keyboard sellers to be able to try out the different kinds. Moreover, you can also add rubber "O" rings to mute the "bottom out" sound and change the feel. Between the key switch color and available "O" rings you have a ton of options to choose from.
worked, thanks mate
You don't need annotations for dependencies types in get() method to not lost yourself in a project. If your container is compatible with Symfony than you can use Symfony plugin in PhpStorm, which will hint you dependencies alias names and types automatically. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
I could use a tester like you for the project i'm woking on: https://github.com/atk4/ui
It's not.
microsoft natural keyboards always for more than 10 years now. i am not a fan of the newest generation yet though, takes quite some times getting used to
Shity MacBookPro keyboard. The newest, 'old generation, early 2016's with that haptic mouse are garbage. I don't know what they did but I'm not CONSTANTLY having my palm move the cursor and start typing in random fucking places. Last MBP I'm going to buy unless apple does a 180 and stops with this garbage they've put out recently. At home I have https://smile.amazon.com/Razer-BlackWidow-Chroma-Mechanical-Keyboard/dp/B00MTWV0II/ref=sr_1_2?ie=UTF8&amp;qid=1486643511&amp;sr=8-2&amp;keywords=mechanical+keyboard+gaming+razer but it's used for gaming. If you share a space/office, do not have this keyboard. It will drive you co-workers crazy. It's a dream to type on but it's quite loud.
¯\\\_(ツ)\_/¯ you know how it is.... After 15 years and plenty of fallen over coffee cups, it gets too sticky and uncleanable. 
https://laracasts.com/series/laravel-from-scratch-2017
Out of interest, why do you need the clients local IP address anyway?
Microsoft Sculpture (the Manta Ray keyboard) is the best keyboard I've ever abused.
Razer blackwidow ultimate. Awesome to type on and macro buttons. 
The key isn't the primary element of comfort yet the whole world focuses on it because keyboard manufacturers can market to it. Alignment through the wrist and shoulder rotation (or lack of) are far more important but Microsoft owns every patent in the space and the other companies don't do research like MS does so they just make key"boards" with various bling.
Would be better if there weren't two pop ups on one page.
Roland RD700NX
There were definitely cameras in all the talks
I love it. Thumb cluster thought is really bad, I'm using 2 keys from each, rest is mapped for actions that I want to access when not touch typing (like `del` or `pgup`). I'm using 4 keys by each thumb, 2 from cluster, and two from the bottom line. I've changed layout a lot so it fits my needs, which is brilliant. Down side of it is when I want to type something on colleague keyboard I'm hunt picking with lots of annoying missclicks.
A scheduled cloudways promo post, without any useful value. 
What a shite website. Stop this idiotic trend of smothering visitors with popups trying to get them on your mailing list.
You can be one badly in one month lol
Clear wasn't available when I ordered; still love the keyboard. I think I have blue switches (don't remember)
Matias Quiet, switches are nice, but it has QC issues and I've spent enough time resoldering to make it not worth the price.
Same, I used a Mac at work for a while and really liked the keyboard but hated the OS. Haven't found a good metal ultrathin one for PCs yet but I'm using a cheap Dell kb213p which is a passable chiclet-style keyboard until I do find a good one. Got one both at work and home.