It would be great if PHP had a formal foundation, one not focused in a single country, and we actually paid people for: - Maintaining our infrastructure - Release management - Maintaining our code bases - Possibly developing features
&gt; Do you locate your database in remote (like RDS) even for dev? No, everything is on my computer. Most of the time I use Docker, except when I'm working with compiled languages. I don't see the benefit of doing otherwise. &gt; Do you have a test step? Yes. Automated tests provide very limited value if they aren't a part of your CI setup. Usually I use phpspec for unit tests and Codeception for everything else, although I've been considering alternatives lately (either Behat or PHPUnit using Symfony Panther). I'm probably going to try Infection as well. &gt; Do you use CI? Yes, absolutely. For the last couple of years I've been using GitLab CI for running tests and code quality checks. No major complaints so far. &gt; Or do you use old school manual FTP copy? Hell no. There are so many better tools for this that I'm genuinely baffled by people who still do that. It doesn't matter whether you use a CD (such as GitLab CD) or a dedicated tool such as Capistrano or Deployer - it still beats using FTP by a long shot. &gt; Do you like splitting in API and Front-framework or do you mix both in a framework (Like Laravel &amp; Blade vs Laravel API &amp; Vue.js)? Depends on the project, but generally I don't. Currently I'm working on financial software that's not available for public so there's no real benefit of splitting the frontend and the backend. I also strongly dislike any frontend work - it gets somewhat decent with Typescript, but I still prefer to leave this stuff to dedicated frontend devs. &gt; Do you do TDD? Yes, both for work and personal projects.
Why is this article landed in r/PHP? I know that PHP is tech and you talk about the tech industry, but still I don't think that this belongs here.
I absolutely agree. Come to think of it, I seem to remember publicly offering a few hundred $ to the drinks fund of the person who implemented generics, heh. I know very little about what it would take to set up such a foundation, let alone the politics of deciding who gets what, but I'd certainly be pushing the SMEs that I am involved with to make at least some contribution to any such fund as we're 100% dependant on PHP as our primary back end language. I am curious what the full-time going rate would be though? $150,000? $250,000? More?
In most companies I've worked for in the past 20 years other drugs than alcohol have been consumed at company-parties as well. In some of them more, in some of them less public, mostly because posession is illegal in most countries I've worked in - but the closer co-workers are to eachother, the more likely I've seen it public too. The same goes for social events on fairs or conferences.
Hey CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". You're useless. Have a nice day!
Our industry (whatever that is) doesn’t have a single culture. I’ve been a web developer in the UK professionally for 13 years. In that time I’ve worked in insurance, publishing, for a few digital agencies, a couple of startups and freelanced a few times. Out of all those: the booziest Christmas party? Insurance, by a huge margin. Insurance isn’t IT. The company with the biggest lunchtime/after work drinking culture? One of the agencies. But not the other three agencies at all. Hell, one of them was totally remote so after work drinks weren’t a thing at all. So I’m not sure why you’re seeing a pattern. Maybe it’s got more to do with where you’ve lived, or some other factor? 
it's a comment. the controller does not know anything about the router, it's simply that the mapping is defined in a comment above the method.
If I could choose the fastest, it wouldn't be in PHP.
I prefaced the article and mention I’m an engineer, and also that it does go across industries essentially across cultures, this is not only my observation but that of many others as well I may not have articulated it well enough in the article and perhaps tied it a bit too much to industry instead of just generally culture the fact is we have pubs everywhere and drinking is basically the thing to do when you go out. 
&gt;besttopnewcontroversialoldq&amp;a it doesnt matter if it is admin.php or something completly different. I want to secure any further points of website.
Hey, nobrox, just a quick heads-up: **completly** is actually spelled **completely**. You can remember it by **ends with -ely**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". You're useless. Have a nice day!
You secure the website by having admin.php ask for a username and password. Are you saying that your admin features are not protected by such things, and anyone who knows the URL can run the admin functions? &amp;#x200B;
https://i.imgur.com/DK1ckG8.png
I blame Laravel for this. :-3 Out of jokes, the IT industry is usually wealthy, with the exception of sugar/coffee and so on. I worked in miners (consultants), they drink hard, really hard. They started with aged whiskey. I also worked with high-top executives, lots of drugs. However, the IT industry has some perk, they (we) are bored, and we don't drink so much, neither do drugs and it makes sense. 
lol
Recently I'm using the following PHPDoc format in PhpStorm: /** * @param $param1 * Description of param1 (must be in a new line). * @param string[] $param2 * Description of param2. * * @returns * Description of return value (must be in a new line). */ public function someMethod(int $param1, array $param2): string; I've also disabled *Missing @return tag* and *PHPDoc comment matches function/method signature* inspections.
you're confusing a simple annotation to define a route with a bunch of magic to do DI and hijack returns. when I say use an annotation for the route, I mean exactly that: a string/regex used by the router to match a controller. &gt;i'm sorry but ain't going to discuss it 'cause you already know everything and others are beneath you?
I was wrong, putting the route config in the comment section is a great idea. They even recommend it in the best practices! Let's keep doing it.
it's an artificial social gathering. forced isn't quite the right word (well, sometimes it is, I guess), but you're ending up in a purely social situation among people not because you enjoy their company for its own sake, but because you happen to work together in the same physical location. so yeah, a little lubricant makes is easier. that said, our Christmas parties have an open bar, but it's far from the main theme
Only if you want to save time and write less bugs.
I see by your sarcasm that &gt;you already know everything and others are beneath you 
I can hardly imagine that happening anytime soon.
Personally I know guy at senior role in the UK earning \~70k, he smokes weed quite regularly. :)
Proper requires context. What’s “proper” in one situation isn’t necessarily the best option in others. The same is true for coupling. You’re trading time for maintainability/extensibility. In some cases it’s just not worth it. Also, how do you consider this your *humble* opinion? Do you read your comments? 
&gt; Namespaces are missing right, it's needed. &gt; there is already PSR for cache Sure, but [psr-6](https://www.php-fig.org/psr/psr-6/) is a class interface. There is no class here. renaming *cache* to *set* and *cached* to *get* will be a loose of meaning. This is not supposed to be a cache library but a small cli app, tldr client for example, so namespace will be tldr. So function *tldr\set()* and *tldr\get()* not meaning really something. *tldr\cache()* and *tldr\cached()* really better. Maybe you mean something else ...
**Shameless self-plug** I wrote a lighweight template engine: https://github.com/Ayesh/PHPTemplate Yet another PHP template engine that returns variables sanitized by default. Appreciate any feedback. 
PHP with HTML is not the proper way to develop nowadays. Is it a bad idea? Probably not for someone that is starting to learn programming. Should we say to that person that it is a proper way? No, we shouldn't. And maybe that person has to learn so many things that it's better that he does it this way to get used and then move. Same applies in this case, symfony best practices helps less skilled developers to start with the framework and are not bad. But in this case adding comments to a method so a process can read by reflection what's the route is not the way because you are coupling this component to a random class+method. If you do ever want to change this component and want to put it outside your Symfony, you will have to change all your comments. If you have this in a separate file you can change the configuration without touching your controllers. And that's why this is not the proper way to do it, I guess I can have my own opinion even when others can't tolerate this. Humble? Who said my comment was humble? Do you know what the H stands for?
Maintaining code and infrastructure is not glamorous, nor is release management. They need done, few contributors *want* to do it, and paying them means it will get done. Writing new features is probably a tool that the paid people are allowed to spend a portion of their time on, but I don't think them being paid means it *must* be accepted or something like that.
what if your work can serve as a track record. 
You're going to have to have a solid portfolio of code and good interview skills to make it happen. Not saying it's impossible but remote opportunities are less common and there is a lot of competition for them.
Development: Always local. Sometimes requires mocking certain services which can be painful if the application is not configurable. Testing: I encourage my devs to test locally before committing. Pushing to the master or staging branches triggers an automatic CI job which then flags the commit pass/fail. Production: Various VPS providers. For a long time we used capistrano for deployment but have recently started switching over to a PHP-native variant simply called "deployer". Software in use: my only requirement is that the major &amp; minor of the runtime and database are the same for all devs. One dude using 7.1.0 and another 7.1.5 is totally OK for example.
a) lie, or more specifically, be creative with your words. b) work hard Of course, everybody started at some point. (https://en.wikipedia.org/wiki/Catch-22)
I also shared a PHP template library, so I don't need it. However, when I shared in my library I found that most devs are ungrateful swine. :-3 , so here is my +1 For the speed, I did exactly what Laravel did it, it pre-compiles. So what the end-user runs is vanilla PHP. In fact, my library is compatible with the template system of Laravel minus Laravel. 
Sort of reminds me of Plates.
The future of Zend Framework is as bright as Zend Studio!!
Why don't you just extract the variables so you can use them directly? Also, not sure this qualifies as a template engine (it's just plain PHP), perhaps a variable sanitizer library?
Yes there are corners in PHP which receive little maintenance. That's a reason why extensions are moved to Siberia-eh-I-mean-PECL. But for most parts over the past 20 years this has been only a limited issue. If a company wants to pay for hat they are fine to assign a developer in part time or to buy a few hours of one of the freelancing core devs. As soon as the [php.net](https://php.net) project (whatever entity that means) gets into a contractual relationship with somebody paying for work there is a conflict of interests. In Germany recently a non-profit association [https://igphp.de/](https://igphp.de/) was set up, which could transfer money from the outside to developers as an external entity. One has to be very careful, when creating different kinds of developers, especially in a existing community living for a large part from enthusiastic volunteers.
I did, back in 2005. Landed my first dev job right out of college. Basically it was a "who you know" as much as a "what you know" situation. I had worked on some projects within a small community online and one of the other members was making a move to a much better job (in Redmond) and offered to hand in my resume and provide a reference. I've worked as a remote dev since then, having spent less than 3 months in an office over the last 13 years.
Funnily enough, I’ve written a php template library too. And while it is publicly available, I don’t push it as I can’t stand feedback.
Upvoted for the honest title
I'll mess around with it this weekend. I find it funny how we use templating for what was originally a templating language. 
Sincerely disappointed at the missing "report this answer as incorrect" UI, at least when one is logged out, on Quora. 
Tons of people. They usually create jobs for the rest of us...
you can have the opinion that this is tight coupling in the same way you can have the opinion that fire is cold. 1. the controller is unaware of the routing unless it uses reflection to read it's own comment, but this is no different than if it fopened the yml mapping file - they are the same. 2. loose coupling would mean the ability to swap out the router, however this depends only on whether the new router can understand the routing config, it doesn't matter whether it's yml or annotations - they are the same. 3. if you're assuming things linked in that article then you are no longer talking about an annotation for mapping but a bunch of framework/library magic and it can be the case no matter how you do routing - yml/annotations are the same. annotations can be terrible because they aren't code but cause code things to happen, but for e.g. routing or orm mapping they are well defined and understood, and in general the alternative is not code either, just some other arbitrary strings in a yml/xml file somewhere out of sight. 
Eh, someone will take it over. There are plenty of enterprises and companies that use it. Just won’t be called “Zend Framework” anymore. Zend Guard we don’t talk about. I’m sure Zend Studio will continue to live on as the generic PHP plugins that Eclipse uses. 
It's going to be very difficult but not impossible. I have worked 100% remotely for the past 3 years, and about 50/50 for a couple years before that and I can tell you right now that if you don't have a steel will and extremely strong sense of responsibility when you have things to get done - remote work is not going to go well for you. Most people think remote work is going to be so much easier and convenient - it's not. While you do get the benefits of not having to show up at an office, there's little more than that. On the flipside, your responsibilities have now increased exponentially - among those are that you now need to be able to ignore all distractions during your work hours despite being in the most psychologically comfortable place in your life and you need to put 300% more effort into effective communication because you're not talking face to face with anyone. I cannot stress enough how difficult that second one is to achieve even with years of prior experience. Because of these factors most any company willing to hire remotely is not going to take chances on a greenhorn with absolutely 0 experience. More than that, you need to ask yourself if you really think you can handle those responsibilities - they sound simple but most people just can't manage it. I strongly suggest that before you go trying to get a remote PHP job, you at least do something like get involved in an open source project that requires some coordination with other developers so you can get a feel for what makes effective communication.
I found, but had about 10 years in programming experience on private projects and some of them are very popular.
&gt; In fact, my library is compatible with the template system of Laravel minus Laravel. Bravo! Have my updote.
They are not extracted because I wanted the variables sanitized on their access. I was trying to make "secure by default" kind of a feature of the library. Extracting variables and accessing them kindness e people would make writing templates easier though. 
Upvoted this comment because you upvoted mine. Have a nice weekend!
Pardon my ignorance, but why *doesn't* php itself get used as the template more often? I would have considered this one of its strengths?
Seems like you could just loop the args to escape them, extract() them, and then include your php script. 
We don't really know if the user of the template actually wants the variables unescaped. `$v['!var']` returns the variable unescaped. It's pronounced "$v LOOKUOUT! car", so the template author is aware that it's unescaped HTML. 
Craigslist, no problem. Just setup a portfolio first and be a smooth talker. Might take a few days but you'll find something. Been doing it for 15 years.
You double the memory used. Just have a function to escape it ex: &lt;?= h($var) ?&gt; and then you can add some filters, ex: &lt;?= h($var, CURRENCY) ?&gt; &lt;?= h($var, MUMERIC) ?&gt; &lt;?= h($var, FOO) ?&gt; &lt;?= h($var, DATA_TABLE) ?&gt; *I have this in my templates*
I agree there are different approaches. That is one of the reasons for me to write this in the first place. PHP variables copy-on-write. So unless the template overwrites the variables, the memory usage would be the same. I don't know enough PHP internals to confirm this, but with extract(), PHP now has to create new variables which might actually double the memory usage. 
Because with the step between template language and php you can do a number of things you can’t (easily) do in vanilla php: - automatic sanitizing - you would have to call a function to sanitize output - limit functionality - you cannot turn off certain features per file, so every template would have access to the entire php api. 
what do u mean ?
thank you for sharing, great feedback. 
Extending base layout, conditionals, loops?
Extending base layout is definitely something this engine needs but conditionals and loops already exist in PHP and thus are available in this engine. Reinventing the wheel isn't always a bad thing, but what's the reason for it in this context?
This is a port of jsr 310 https://github.com/brick/date-time
I think I will work on an include() helper. I'm not sure what more value it could add compared to a simple PHP `include()` call though. 
I suppose any template engine that compiles to plain PHP would be about the same performance. I will try to find out. Thanks for the idea. 
Does your template support non-scalar variables? If not, it could be difficult to convince other devs to use it.
Because of auto-escaping, which is considered essential nowadays.
&gt; MUMERIC 
It won't double the memory usage, but it will increase it, because PHP has to build another hashtable (local vars) out of an existing hashtable (the array of vars). It won't have the performance of compiled local vars, it'll just look a bit shorter. But you can make it shorter in the source and in the compile cycle expand it to traditional syntax as arrays, so...
Yeah I’m not saying we don’t have it good just highlighting we love our booze and drugs but it’s not really talked about, I think the response I’ve had to the article has been a clear sign of just how many people don’t realise how engrained the culture is
Good idea, appreciated.
I guess I am the only one here to never build my own php template library... to busy making money I guess. 
Better than usual home made classes as starting with something simple is the best aproach. The one thing that I would immediately change is API, by switching render data array with template file name. This sjould be your template object: $template = new FileTemplate($file); ..and array of \`$vars\` is just input parameter fot its render method.
Ooh ooh ooh, this library is a small effort for exactly that :)
There is a `$v-&gt;attrbutes([])` method that spreads an array of attributes to HTML attributes. `$v-&gt;get('whatever'])` will return the exact variables set in the template caller, scalar or otherwise.
Good luck, looking forward to see it.
&gt; Who owns the PHP Trademark? [The PHP Group does](https://github.com/php/php-src/blob/37c329d7153b65fd2430fa42e8af8e8a0cbc0a41/LICENSE#L3).
Awesome! I've made a template engine and considered putting it on github... Nice to see another do it!
Please post it here too, I'm looking forward to try it out.
What about building a templating engine to gain time and make money faster ? Seriously, that's something interesting to build, that's maybe why so many people tried.
I meant can you supply a User object as a variable and then output it's properties or methods?
Fantastic! Thanks for the link.
One reason is so that the templates can be run in multiple places: on the server to draw up an initial page, and on the client to draw up updates to parts of pages. Abstracting the template from the implementation of a specific language has been a goal for a long time.
I'm glad you liked the documentation. I tried my best to make the code clean and lean, with proper APIs and using modern PHP (return/parameter type hints, requiring PHP 7.2, etc). There is [100% test coverage](https://travis-ci.org/Ayesh/PHPTemplate/jobs/447028036#L502-L525) and several tests too.
Here's a sneak peek of /r/PHPhelp using the [top posts](https://np.reddit.com/r/PHPhelp/top/?sort=top&amp;t=year) of the year! \#1: [Join the battle for Net Neutrality! The FCC plans to kill Net Neutrality and it will affect everyone unless YOU fight for it!](https://www.battleforthenet.com/) | [4 comments](https://np.reddit.com/r/PHPhelp/comments/7eoq2o/join_the_battle_for_net_neutrality_the_fcc_plans/) \#2: [Please stop closing your PHP tags](https://np.reddit.com/r/PHPhelp/comments/8tq4h7/please_stop_closing_your_php_tags/) \#3: [Making /r/PHPHelp better, Pt 2.](https://np.reddit.com/r/PHPhelp/comments/8jejyf/making_rphphelp_better_pt_2/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
Ya I’m doing pretty much same thing - good luck 
I personally like using route annotations, but just to present the downside more fairly: Routing annotations don't necessarily couple the controller to your framework, but they could be seen as a form of hard-coding. Imagine you've got a common library of controllers, but you want to change their URLs - with annotations, you'll either have to edit the code or write out a whole new YAML routing file. You'll still have to write a new routing file if you're already using YAML, but it should be a much simpler process. Similarly, if you want to use the framework with a different router, you'll have to scour the code for all the annotations in order to write your new config rather than having them in a single place.
So you're saying that if I want to edit all my routes at once it will be easier with a single file? This has never been a thing I've needed to do. Conversely, being able to see the route next to the controller (or find the controller easily from the route) is something I am grateful for multiple times a day.
Manually escaping HTML metacharacters in templates is error-prone, and may not work correctly in corner cases such as variables interpolated inside HTML tags or scripts. Variables in templates are not escaped by default, increasing the likelihood of cross-site scripting vulnerabilities. It's recommended to use a templates engine which performs automatic HTML escaping. This is one reason why CakePHP will change its template engine to Twig: https://wiki.mozilla.org/images/4/40/Cakephp-report.pdf#page=7
Thanks. This library _does_ escape all variables by default. To access the raw value, the template author must access the variables in a special way (prefix with a `!`, for example `$v['!var_name']`). It is not context-aware (e.g it does not sanitize a URL when request a variable inside an `&lt;a href` attribute), but additional helper methods are provided for that.
I lol'd
I got started like this. I started on upwork doing shitty gigs for shitty pay. Built up a portfolio and rep on the site. Now I employ 2 people, looking to expand with 3 more. (I no longer use upwork, as other than a stepping stone, it's a pretty shitty platform) 
&gt; So you're saying that if I want to edit all my routes at once it will be easier with a single file? Not really - basically, if you can't use the current routes for whatever reason (new router, different site layout, etc), it's harder to adapt the routes if they only exist as annotations. &gt; This has never been a thing I've needed to do. Me either - in practice, when I'm reusing controllers the most I'll do is mount them at a different path &gt; Conversely, being able to see the route next to the controller (or find the controller easily from the route) is something I am grateful for multiple times a day. Same here - in particular, I find it annoying to have to go look up the route names if I have them written in YAML &gt; we work in both worlds and it's pretty nice to have db info next to the code That sums up my attitude pretty nicely
&gt; simple and straight forward Why call it a boring name like "PHPTemplate" then? Be proud of your work, call it "Simplate". Jokes aside, that's really straight-forward. It's pretty much just PHP, which is already a good templating engine by itself. Will star that to see where it goes.
Have a try with thecodingmachine/tdbm. 
Oh CI still exists?
Will give it a try. Will feedback in github most likely.
Thank you 🙌🍻👍.
False
Php is Fidel Castro lol
No it's about ego
Inertia is not vitality. And importantly, PHP still has large (although shrinking) base of people invested in its success. Also, programming languages don't die as people do. There is no graveyard of popular programming languages; either they stop evolving or get reduced to niche. PHP little by little is being redirected to a particular niche: CMS. Drupal, Wordpress, MediaWiki, and siblings. In different words, do you see any bleeding edge market companies using PHP for anything? In 2018, perhaps the most memorable piece of hack in PHP was the port of NES runtime into PHP. And that's it. I don't see lock servers, databases, etc. written in PHP. In terms of features that use what the processors and architectures have of the most recent, PHP is severely lagging behind. Just recently an external library added greenthreads-like support. If you want to jump into ML/AI, you are out of luck. Tensorflow, for instance, offers official libraries for C, Java, Python, Ruby, Swift - but no PHP. If you want to use Tensorflow in PHP, then you have to use a third-party library. This is an overarching trend in PHP ecosystem for years: taking too long to react to new technologies, not being favored for support, a very busy and crowded marketplace with all but stagnant salaries. The articles does make a point by accident however. If you are an early startup then you do want low salaries.
PHpnot only used on website development.. So far I see many mobile apps are using php as backend programming languages in China.
As a Magento dev i aint seeing php going anywhere in the near future. There are monolithc Projects running php and those will stay for a while. Would i choose php for a new Project however? Nah.
&gt; If you are an early startup then you do want low salaries. Ooo, but you get what you pay for. My only contention is that every company wants lower salaries regardless of how old your company is. If they could get away with paying you nothing or replacing your project with free and open source solutions they might. If they can automate away your job they will. If they can't do that maybe they can Outsource. If they can't do that maybe they can hire on a Visa. if they can't do that maybe they can replace you with a junior developer. The junior developer only knows JavaScript and nosql. Everything else was spot-on though.
I don’t know. I have a successful web app that makes great money in a niche written and is written in php. Same partners are starting another app and we will use php again because it’s what I know and it works great. Most web server software is data in and data out. Php handles is marvelously. Bleeding edge tech? What the heck is that? VR, Embedded devices and such probably. That stuff is irrelevant to the steadfastness of a language. Just because a new space emerges does not mean the old space dies or becomes irrelevant. Php will be around for a long time and hopefully be improved. 
What would you choose if you don’t mind me asking 
It's not just PHP. The notion that X is dead is usually perpetuated by the idea that it's cooler to use Y. I find it to understand how anyone can be productive with jumping from one shiny tool to another. Just because that new thing can also do what X can doesn't automatically mean you have to use it. Unless your use-case is totally not designed for X, you're better off mastering what you already know. Every new fad will have gotchas that you'll face and it's possible that you're the first to face it and there's no answer on Google. Imagine doing that for every new fad that's comes along. Actually shipping something trumps tech fads that end customers don't give a shit about.
This is a good write up, and I agree with pretty much all of your points. There is one that I think deserves to be expanded upon a bit more, however: &gt; PHP little by little is being redirected to a particular niche: CMS. Drupal, Wordpress, MediaWiki, and siblings. This is partially true. In my experience, PHP is being redirected at CRUD web applications. CMS, Drupal, WordPress, etc are all tools which, in one way or another, accomplish a similar goal. That being said, frameworks like Laravel, Symfony, Slim and similar, combined with open source packages from groups like the PHP League and the greater community, has lead to far more powerful web applications built on PHP than Drupal or WordPress can provide. I think that this is a huge point, as I've generally started to see the community move away from CMS solutions in favor of frameworks. I don't believe CMS will ever die because it's a solid business solution that saves time and money, but I do believe that business needs are growing more in-line with CRUD style web applications than WordPress and the like can provide.
&gt; I can’t stand feedback. You are awesome :)
https://w3techs.com/technologies/overview/programming_language/all
It's also a good filter when hiring people. If they turn up their nose at it and want to use the latest shiniest thing instead, you might have a bit of a troublemaker who's more interested in coding per se than the business. Might make a great employee for a bigger company, but not the best kind of person for a startup in my opinion.
Thanks for the explanation! 
I felt this way about the whole movement to NoSQL. It \_does\_ have a place in our tool belt, but most data follows a schema, whether it's formalized in a table layout or not. By having it defined, you get more power in querying the data store.
I extracted this from a project that I've been working on and packaged it up for more general use. My personal use case is that I have a bunch of "cron" jobs that process and I want to spread out different tasks evenly over time. Test coverage is 100%, but two of them are skipped on the PHP 7.1 build for the lack of libsodium functions being natively available in that version, which kicks down the measured code coverage. I could require \`paragonie/sodium\_compat\` to make them pass, but don't want to force the dependency on users for a library feature that's thoroughly optional. Anyhow, I hope this helps others in some small way!
I'm constantly hearing how PHP is shit and python is amazing. Recently had to do a bunch of ML work on py (as nearly everything AI is heavily python based at the moment), and it was so awful. All these non-standard serialization approaches (fucking pickle) and extremely bizarre reactions to not every single thing being encoded exactly the way it needed (some of my data tested on a module delivered by an external dev failed wildly and took a lot to fix because one of my strings had a ’ instead of ' in it). I think the problem with language reputations is they're often built on individual instead of long term, organizational experience. Cowboy coders working on their thesis will have all kinds of sunny reviews for some languages, because they're good fits for one person building something from scratch then abandoning it after a year. Obviously languages like Java and PHP have done quite well at scale. 
Yeah I remember when NoSQL was the new cool thing, I had the urge to learn and use it but it felt like not the right tool for the job.
What is this list? Is it from somewhere?
Plus the fact that PHP is improving quickly with new features and performance optimizations
This is a double edge sword though. There are too many developers that are scared to try/learn anything new.
I completely agree that PHP is not dead, but Facebook has actually migrated all of their PHP to Hack. Your point still stands though.
I would argue that PHP actually isn’t that easy to deploy. With languages like Node and Go that come packaged with production-ready web servers, deploying is drastically simpler, especially in containers.
A graciously lubricated beard facilities easier pondering as one strokes, prevents excessive food build up, and increases general aerodynamics.
What is harder about deploying a PHP app compared to a Node app?
You have to spin up and configure a separate web server and run it in a separate container, versus just shipping the app (or a binary in the case of Go).
What about outside of containers? Your use of "especially in containers" made it seem like you had a point in this scenario. (Not trying to be rude, by the way that previous sentence is worded. I'm genuinely interested in your opinion.)
It’s still difficult even outside of containers because you have to install and manage a separate web server. That task goes away entirely with Node and Go.
Silicon Valley recruitment demands.
Tries unconventional solutions and always keeps an eye on the security of the project. 
Care to share any additional thought? I’m not clear on the point you’re trying to make since you’ve shared nothing but a package installation command.
Hack is essentially PHP. At the end of the day it compiles down to PHP. Just saying. 
Does anyone run node or go like that in production though? I’ve only ever seen them behind a webserver (for static assets, cache, etc). So in practice it’s no simpler.
If you’re using a framework (which you should be for any web app), this functionality comes out of the box.
That's all it takes to install a full webserver stack on Ubuntu, with Apache, PHP, and MySQL.
Okay. What if I don’t want MySQL installed? Now I have to manage and keep up with security vulnerabilities, configuration, and compatibility with Apache in addition to PHP. What if I am using an OS other than Ubuntu? Regardless, this is still more difficult than other languages, which was my original point.
Maybe also writting clean and short code?I suck at programming and this is my main difference with good programmers.
First of all, it is PHP that is processing the file (even if with mod_php is is running inside Apache). The file will be parsed completely, so it is completely read. After the parsing the php code will be executed, in this step PHP will skip over the inner part of the of condition if it is not true. In this case all statements (function calls, variable assignments, ...) in this inner art will not be executed at all.
With that much data, I'm assuming you're talking about web page content, HTML and such. You need to flip around how you look at the PHP file. It isn't PHP code "inside" HTML... it's all PHP code but with giant sections of "print this HTML." There is an implicit, invisible, "start a collecting string to print" at the beginning. 
No worries. I like the idea and your premise as Im tired of frameworks that totally transform php. 
I’m partially at your opinion. Some people are geniuses but are not able to write clean code. They are the only ones to understand their own code but the results are great. If you’re the only person who works on the project and nobody else is supposed to see the code, let it look like you want. But if you need help you should have nice clean code. The shortness is sometimes not the most important, especially on devices with less power it’s sometimes better to have more code for a higher overall performance. For example: It’s shorter to put a lot of data in just one database but the search for a specific result where 5 of 6 columns in a &gt;100.000 entry DB (let’s use adress fields as example) can bring something like a raspberry for a too long time to the limits. Instead split it in multiple databases. Use a good system for a faster search, to come back to the example one database per zip/postal code could speed up the search for a certain customer from an address. Even if you have to scan the whole database its less than when you only have one. A lot of additional coding and easy thousands of databases but the performance increases. And in the end only two things matters: Security and performance. 
Don't you like to build some stuff for fun or learning ? Or are you just working for the money ?..
Please correct me if I'm wrong, but the component is for consuming (server side), not for creating http requests (client side).
I... agree haha. Not sure why I got downvotes and this response. I was saying OP’s point was valid, and I am in total agreement that the PHP world has never been better. Just a small correction about the current state of affairs for Facebook’s codebase. I will say that Facebook had actual reasons to migrate from PHP to Hack (namely, Hack is derived from a compiler that they wrote for PHP to fit their business needs and then eventually created an even newer compiler for Hack JIT to tailor even further to their need, and also the reason they will stop PHP support later this year). I don’t agree that billion dollar companies switch to things on a whim.
To be fair they did so long before PHP 7+ and many of the reasons they chose to move (at least the language ones, performance aside) were used to inform PHP 7's design
Empathy &amp; Compassionate Willing to work with people. Seeking getting better Caring about helping. And over all Humbleness.
`lamp-server^` simply tells the package manager to download and install a certain list of packages. You can easily install `apache2`, `php-fpm`, `mysql-server`, and other packages you need by name. You don't need to worry about keeping up with Apache, because that's what the package manager is for. `apt upgrade` will download and install updates for installed packages. There are hundreds of tutorials for doing this. Apache is the most popular web server software ever, and Ubuntu is the most popular server OS. Have you actually ever tried to setup Apache and PHP? The system practically does it for you. Just dump your code into `/var/www/html` and you're done. With Node I would need to install packages too, and for Go I would need to compile my code. Then I would need to configure SystemD or whatever tool the OS uses to manage services, writing custom configuration files so my application automatically starts after boot and restarts if it crashes. Most websites are not popular enough to warrant a separate database server.
Syntax was definitely informed by Hack. Hack’s most important feature for fb now though is “asynchronous” code blocks (not threaded async, but instead delayed execution similar to promises... kinda. Complex topic) and also the JIT compiling they’ve moved to. Definitely though the addition of typing, generics, and other sugar on top of the language was part of the reasoning.
What's the benefit, except losing all experience (both by contributors and users), breaking all APIs and having to redo all tuning from the past? Yes, C is not the nicest language, but the issue for contributing is not learning C. Even if you use Rust PHP would need to break out into unsafe a lot, which caries about the same risk.
I agree really. Or at least as difference between a bad dev and a good one. Overall I think it’s not easy to answer. You can generally only get to that stage (keeping code bases clean, trying to minimise code use, modularity, good principles and using tools appropriately) and that’s generally it. Answer above makes a good point though. 
Being a great developer is not a matter of only coding but of have also a good set of values to go forward with.
Good point
&gt; I would argue that PHP actually isn’t that easy to deploy. LOL. Kid, just because node and go are easy doesn't make php hard. ffs.
fuckin lol.
That is a copyright notice, not a trademark notice As far as I am aware, PHP is not a trademark
I would rather list what they don't - Doesn't think in terms of a language (i.e. language constructs, functions, files), but more in language agnostic terms such as of data structures, algorithms, user experience, design patterns... - Doesn't suffer from "Not invented here" syndrome - Doesn't write shortest code. Values the ease of reading and understanding much more than ease of writing. 
There’s none at all, it’s a horrible idea from every practical standpoint. It was (mostly) a joke
Which framework are you using these days? -- You know Laravel is good, but still doesn't have the simplicity, and "not get in your way" of coding PHP approach, that I enjoy with CodeIgniter.
This is the exact answer I was hoping for! Thank you very much for the clarification. That is what I had thought but couldn’t quite get an answer from my coworker (who said it “just skips it”...) and wasn’t sure exactly how to Google it. Thanks again all! :)
That last line was my exact line of thinking but wanted to check with someone who knew what they were talking about. Thank you for the explanation!
And not just a multi-billion dollar company, but a company with multiple BILLIONS of users (2.3 at the last count I saw). Imagine trying to program, scale, and manage a platform with 2.3 billion users (1/4 of the world's population). Any company operating at that scale would have to make critical programming and implementation choices, and makes no statement as to the versatility and utility of PHP as a whole. 
&gt;If you’re the only person who works on the project and nobody else is supposed to see the code, let it look like you want. But if you need help you should have nice clean code. I don't agree, If it's your own code, go ahead - but if it's code you write for a client, that code might end up on someone elses plate if the client one day asks you to transfer it to a different party. You should always code as if someone else will have to maintain it one day, your future self will thank you when you need to re-visit the project after months or years of inactivity. Documenting it (deployment, migrations, building assets, ..) and following standards (PSR) is the least you can do. &amp;#x200B; Your performance issue with the search could easily be solved with something like Elasticsearch, but 100k rows should hardly be an issue for MySQL if it has the proper indexes. &amp;#x200B; &gt;And in the end only two things matters: Security and performance. If something is hard to maintain, you'll just create more performance and security issues. If people don't understand your code because it's an undocumented mess, they will introduce bugs, which may lead to security/performance issues. So to me, maintainability/clean code, along with security, are my top priorities.
What separates great developers from good ones may not necessarily be things that a specific to development. For most kinds of projects, most developers can write code until the project functions according to the spec. Sadly, this is not the hard bit.
You're right, I did a dumb. 
I must admit I fall for this one sometimes (the above one not the bottom, lol.) it’s a good point though - I’m not sure why I do. I must think it will make things easier down the road. But now I see the truth 🤯 
So what is?
Not sure what you mean by short, but wanted to throw this in here. I've seen people returning complicated statements because they think short code is good code. eg: \`return (condition1 &amp;&amp; condition2) || (condition1 &amp;&amp; condition3);\` This kind of thing can get out of hand quickly and can be difficult to read, extra lines of code do not cost anything - you want your code to be understandable by just glancing over it. A way to make the example better would be to have if statements and return early or even separate those individual if statements in their own methods.
It's possible, but I don't think /u/burying_luck's comparison is fair. The Node run time has a built-in web server. A Node web app runs as a daemon, unlike a PHP script that has all of its resources released forcefully after it runs (or hits the execution time limit). You can serve the Node web app directly from its built-in server, or proxy it through something like Nginx. An issue with Node compared to PHP is that the Node web app is single-threaded (with some complication of asynchronous tasks being ran on other threads), where a common configuration for PHP is to have a thread pool and hand them out to incoming requests for running the PHP script. So Nginx is used for scalability with Node apps (via load balancing), in addition to serving static assets. Since the Node web app is running as a daemon, and its code base is necessarily not as well tested as something like Apache, it's probably going to die at some point. All of the production Node environments I've seen include process monitors to restart dead app instances. I've never used Go in a web app, my experience with it is limited to Kubernetes (container orchestration app written in Go). As I understand, if you follow the approach mentioned above of building a Go binary with a built-in web server, it's just a dependency you've picked like any other (e.g. not built into the language run time). I *really wish* there was a good deployment approach for Node apps, as easy as deploying a PHP app. But if you're paying for experience on deployment, it doesn't really matter if it's a Spring app, or a .Net app, or Ruby with Passenger, or whatever. If the person deploying is the office WordPress expert, PHP is the only real current possibility. I'm hoping when I get free in the early spring to do something in Electron. It's a Node runtime with the Chromium browser engine, and a build stack to produce executables for major platforms and distributions. It seems to me that build stack could be modified to let a Node web app be installed from an executable or package manager, and then the web-based "5 minute configuration" from a browser. I think Electron already has SQLite database engine built-in, so you could have a single install with everything up and running. It could be added to the `cpanel`-style automatic webhost install managers easily.
Yeah, my team is spending a lot of time cursing python for ML as well. I’m really happy to be building the data pipeline to support it, and not the actual logic. 
I had websites dealing with more than 4 million entries with more than 4000 daily additions everyday, it's one corresponded to few files.we hited one million visits per day approx 500.000 db searches per day and a lot of background processes.i had to do a lot of scaling as we wanted to keep one server for everything.i miss the old days ,now i am feeling most programmers are beyond that point and i don't even try to search for a job at this field.i really enjoyed this stuff though if I ever had the opportunity to work on similar conditions I would certainly do it.
Fair enough!
This still applies for other server APIs too, for example php-fpm with apache mpm_event or nginx. PHP gets the full file, and parses accordingly.
Yes, agreed with this. It’s essentially automating / making a tool for something which you initially might know nothing about. The more you know about the area it’s aimed at, the better you can build the tool. 
I’m not even a programmer. I do it for fun and to make a few things easier. My „server“ isn’t anywhere near the capabilities of the Servers you worked with. When i run at a problem i search a workaround. When i touch the performance limits i try to change the way i approach the problem. Maybe the question is stupid but which point do you mean? 
Yes. And to be able to know about something new, you need to be able to listen and ask questions. Even if people are not speaking the same language as you. You need to be able to have a conversation with a banker who knows nothing about technology, and at the end of that conversation, you know what the structure of your database schema should be or how your API is organised.
Truth is I am more into linux shell scripting and server management .I just had a consultant role to a php developer and I remember our scripts ended more than 30.000 lines of code.after few years was difficult to make changes.Things can escalate pretty fast if there is creativity and money flow...but yes overcomplicating for the shake of shortness doesn't sound good.
But this is assuming you’re developing something for somebody else. And also is this again not more of a “granted” skill than something specific to being a great developer - kind of life saying “to be a good developer you need to have fingers”? Which is obviously true (or maybe not in special cases) but also a granted? 
Exactly.i was constantly trying to remind him that .he knew how to code but didn't constructed a proper architecture in order to make his future life easier LOL.
I agree with /u/bkanber's reasons. I think another reason is inherent limitations in PHP's execution model compared to other environments. Every time some of this is mentioned, a PHP stalwart will say "but there's a PECL module for that!". A badly maintained, buggy module that isn't widely deployed, but *still...* they say. An example is websockets; a persistent connection requires a persistent daemon, which PHP is not. But there *is* a websockets PECL module! Romper-room selection of datatype primitives. Heavy object implementation (&gt;1k memory). No parallel computing possibility. Deferring to the kernel for process management is trading simplicity for heavy resource usage (e.g., when you make an asynchronous call like opening a file, PHP relies on the kernel to sleep the whole process instead of implementing some kind of gray threading in the language runtime). PHP's implicit type conversions are non-intuitive and potentially dangerous. 
Speaking as someone who has wrestled with setting up Nginx + PHP-FPM numerous times (as well as Apache), I can confidently say that it’s not always a flip of a switch like you’re alluding to. Web site popularity has nothing to do with the best practice of running your database server on a separate instance; it’s a best practice for security. But sure, go ahead and run yours on the same server because it’s easier. From what I can see, you’re unable to admit that other languages have better developer and management experiences. The fact of the matter is that something like Go is way easier to deploy, but since this is the PHP subreddit, people are incapable of admitting that another language could possibly do something better than PHP. I’m not going to keep arguing about this. I’ll just wait until PHP starts getting packaged with a built-in production web server and watch everyone celebrate how awesome of a feature it is. In the meantime, enjoy!
&gt;2.3 billion users &amp;#x200B; &gt;make critical programming and implementation choices `ALTER TABLE users MODIFY id_user from INT(11) to BIGINT(20);` 
In the wild, natural secretions and the fat of slain competitors are sufficient to maintain a lustrous coating of beard oil, however, modern life is not amenable to a healthy beard - it is therefore necessary to protect one's bristly investment with premium beard oil.
Thank you for responding rationally! I agree that there is a lot of VPS support out there for PHP...a definite advantage of its popularity.
Yeah, good luck running this in prod.
No it’s not. It’s a simple one-liner command. 
And when a generation of aspiring web developers got past their first YouTube tutorials
I seriously think this sub needs better moderation. The amount of shitty self-promotion posts is just too damn high!
This was debated in other threads, but it’s definitely not that simple if you want to manage it properly. And it’s certainly not that simple when running containers.
i would be lucky if can get a job on upwork. 
The article and I may roughly agree in that some of the criticism of PHP is unmerited and that PHP is fine for certain things, but a lot of the arguments and "facts" in it are frankly nonsense. For example Facebook is not an example of PHP scaling to massive levels it is the opposite, it is a site that started out as PHP, but then to scale had to have more and more of the backend to other languages, they had to write their own version of PHP because PHP was not up to it and even then they basically replaced much of that when they moved stuff to the frontend with react. Same with their claim that PHP is 3 times faster than Python "supported" by a link to some other terrible random article that just says that same thing with nothing to back it up and the reason they have nothing to back it up is because it is nonsense and also largely an irrelevance. Now sure PHP at base level performs better than Python, and on specific benchmarks (regex for example) it is even more than 3 times faster, but then on other benchmarks (fasta for instance) it is maybe only 2% faster. But then the reality is that does not matter, because in practice PHP is not sufficiently faster in the way say Rust, Golang, etc are to actually make a meaningful difference (PHP is still a slow language like Python, Ruby, etc), because most projects are not comparable to pure benchmarks like that because they are nowhere near that calculation heavy. Then for the type of project that is calculation heavy Python blows PHP out of the water, because Python has a vast infrastructure of libraries for machine learning, maths, etc written in c, Cython, etc that PHP does not. Even with the web, PHP being a bit faster than Python as a language is typically rendered irrelevant because PHP-FPM is much less efficient than Python using a WGSI server where copies of the app are held in memory in worker threads. I could go on, but this is already too long.
From what I read Wordpress is switching its editor to "Gutenberg", which is React based. So they may be referring to the fact that "OMG React replaces PHP in Wordpress".
Why are we talking about containers? If I want to run this in Docker it’s pretty easy to setup. If I want to run it locally on my laptop it’s a single command that’s built in to PHP. 
I’m talking about production workloads, of which containers are a very common option.
But the important distinctinction is that it's read during parsing, which doesn't actually run the code, thus you dont worry about it getting evaluated. You dont want all code in a giant file anyway, but there is many more important reasons for that than parsing speed.
I disagree. Let's say that you are a seasoned developer and to your team arrives a novice. You can't spend time teaching him/her because you have your own deadlines to fulfill. You could help a little (3-5 minutes top). Also, this novice will delay the entire project. Compassion?. Yep, if your business lacks of deadlines. Also for humble, the humble developers earn less than the rock star/ninja/Jedi or whatever he/she wants to be called. I don't say to be arrogant but humble? no way. 
Having used PHP since before 5.2, where it is now is pretty decent. However I can't fathom how a new startup or new project would use PHP. There are a lot of things it doesn't do as well as other technologies, and those other technologies are not even cutting edge. Here's a few examples I could see why: * Server Side rendering of javascript could be done more simply in Node if you're concerned with SEO * PHP's execution model fires and dies, doing simple non blocking tasks that aren't tied to the user request finishing isn't as simple * Many languages in this space are already dynamic (if not have type inference for ease) and due to their execution model can be used as a web server without extra tools * If your product ever gets to the point of doing something outside of normal CRUD (Machine Learning, Data Engineering) you will most likely have to add another language to your company's tech stack * Working around these drawbacks adds more complexity to your project All of the points above can be worked around (ReactPHP, V8JS) but when it's built into other languages I question its use for new projects. I definitely see the case for upgrading existing projects as soon as possible however.
&gt; Speaking as someone who has wrestled with setting up Nginx + PHP-FPM numerous times (as well as Apache), I can confidently say that it’s not always a flip of a switch like you’re alluding to. Just as setting up Go is not as easy as people make it out to be. GOPATH has haunted my development for years when you want to have a more sane setup with multiple compiled go binaries. How about testing code? PHP =&gt; Push code to testing server. Ready to test the results. Go =&gt; Push to testing server ... But wait, if your old binary was still active on the server, this blocks you. So you need to be sure its stopped. Ok, push ... wait, wait for your 7 to 10MB binary get pushed because hey, not everybody has a 100Mbit upload line ( 5Mbit thank you very much! ). Now lets run that binary manually. Ready to test the results. Wait, maybe the old binary did not unload from memory and is now blocking the ports. You may almost say i have some experience in developing Go :) Now only with the current 1.11 release and the first steps to a more sane modular design, is Go finally more easy to make multi service apps with. Go is easier to multi server deploy because its more self contained but lets not kid ourselves, their are little tools called Docker for the PHP guys. &gt; I’ll just wait until PHP starts getting packaged with a built-in production web server and watch everyone celebrate how awesome of a feature it is. Swoole ... pecl install swoole, php xxxx.php And the same issues like Go, with stopping and restarting your webserver. Unless you use some kind of sentry / build watcher etc... For ultra fast development / result focus, nothing beats a interpreter languages like PHP. For fast deployment on multiple servers, a compile language rules. If you want a compile like effect, ... Docker ... Make a docker image with Swoole / whatever else you want, and you add the php files to for your deployment docker file. And in case your worried about my experiences... Rust, Crystal, Go, Julia, Nim, Swift are all languages i worked with or tested extensively. Crystal is probably the closed thing to a Go+PHP combination you can get.
Its the same ... The moment when you have setup a docker container script, the deployment for a PHP based or Go based container are identical. I feel like your deliberately trying to make it seem like PHP is harder when both are the same using this approach. I can even argue that its easier on PHP because i can have a pre-set docker image layer on the servers ( auto caching the apache layer ), push a bunch of small PHP files for the changes and have docker faster up, then go where you are forced to each time include the whole Go webserver and dependencies. Go its power is in simply executable deployment, its loses this in a container based setup that uses commit layers like docker.
higherlogic, you are actually right. Burying_luck is just trying to confuse you. Their is no difference between local testing or production, its a matter of setting up local / production layers. Go its power is simply in single deployment executable but Go loses this advantages when we start dealing with containers like docker. You simply end up caching apache or whatever webserver layer you have with docker as a sub layer and reading in the local/remote/git PHP files with a ultra fast docker compile and deploy speed because the layers are already present. I feel Burying_luck is trying to focus on one way of deployment too much, not realize their are multiple ways to get things done, several what are just as fast for PHP as Go can deploy.
Followed by 30 minutes of your db being locked 
That's not true, PHP is bundled with its own web server, and it just takes one command to run. I would guess that most node and PHP servers in prod are run in apache anyways.
I would say the same for node's. Apache is far superior to both node and php's web server
Of course, but PHP’s is actually classified as a development server: http://php.net/manual/en/features.commandline.webserver.php
I work to make a living, to keep a roof over my head. Not for kicks. Kicks are for kids and I am 40 years old. 
I love php and use it in all my projects I don’t know why people hate on it so much. 
You can learn the way to write shell script, write your own script to achieve stability 
I remember the clowns that rode the shiny ruby train to nowhere
I like PHP and have used it for 8 years, and it's a great language especially after 7. But even I recognize that there are drawbacks to making this a choice based on that extra work.
It's not just the ability to query, but the ability to tell a database engine semantic information and purpose about the data it needs to optimize for.. there just isn't an alternative to that.
We have a script to setup PHP+nginx+mariadb, and a second one to deploy the actual source code. Only takes 5 minutes when you’re used to it. 
If you think there are only *corners* which receive little maintenance you are sorely mistaken. We have maintenance issues everywhere, including the mailing list, the docs website, the docsrendering system, bugs.php.net, php-src with respect to gcov reports, and far, far more. To be honest, it's an absolute miracle that works as well as it does. Thanks to everyone who helps out in some way here.
PHP ain’t dead but it’s been on a slow decline for the last 3 years or so. Doesn’t mean there isn’t tons of jobs with it, but it’s competitive edge (ease of use and setup) has been reduced by the growth and growth of cloud computing platforms which are providing similar ease of use and setup for other languages. My guess is it will be around forever but will be a much smaller player 10-15 years from now. There are plenty of reasons to use it for new projects, but none of them are unique to it anymore. 
For years, I worked on many projects, starting them from scratch. And I kept trying to shoehorn things to work with a NoSQL approach. But I never did and I just thought my lack of understanding of NoSQL was why I hadn't been able to find a good use case. I'm glad to see now that people are finally figuring out that NoSQL is rarely something that will handle all your database needs. I can think of very few applications where you don't at least need a relational database for basic user data. NoSQL is great alongside a relational DB for certain things, but rarely a panacea. 
Looks pretty good and clean code. I would personally do a gross hash, substring, covert to int, modulo in a few lines but your approach obviously looks more structured. Question: why did you decide to support PHP ^7.0? it will be unsupported in a few weeks, and 7.1 doesn't have a longer shelf life now either. Wouldn't it be just pain to maintain it for long term, perhaps it's good to start new libraries with the latest GA version? 
Php7 is great. A lot of people who moan about php are talking about version 4 or 5. 
I find you just end up with oily fingers and slippery keys
&gt;PHP is being redirected at CRUD web applications. Hasn't it always been directed at CRUD web applications ? I mean you can use PHP as a general purpose language, but it's strength and purpose has always been to build websites.
 True. Even if it’s sometimes helpful to reinvent the wheel or parts of it when you are not happy with the existing ones it doesn’t mean you have to reinvent every wheel you use. 
Spring Framework is easy too. In fact everything is simple when you know how to use it. CI just makes your life harder in the long run because it ignores features that keep PHP up to date.
What does Laravel offer what Symfony doesn't?
I use php for WP and Codeigniter. but i can't wrap my head around the fact php is considered a yesterday's technology. everyone seems to be on Js bandwagon. why don't bigger companies like facebook support php? 
&gt; I find it hard to understand how anyone can be productive with jumping from one shiny tool to another. It was never about being productive, for that kind of people. Curiosity, innovation maybe...but mostly bragging IMO. Also, people who spend their time writing blog articles are usually not those who spend time programming real stuff. Reading, or even writing tic-tac-toe tutorials doesn't give you the insights you need about any language, ever. Which is why it's harder over time, to take online technical advices seriously.
I still find PHP a delight to work with as backend for small webapplications and for API's. Even though that many people hate it as a "fundamentally broken language" they cant deny that a lot of things you can do with PHP is pretty straight forward and well documented these days. I may be biased though since PHP was my first programming language.
There are two major Problems with PHP: 1. it's easy to write bad working code 2. A lot of Programmer write bad code, because they aren't payed for writing good code. The Second one is the bigger one, because, bad code when it must updated and/or fixed costs a lot more the good/clean code. When you not separate logic from rendering, when you reuse code by copying, this all can be a nightmare. In one firm I must edit about 2000 Pages to fix everywhere the same Bug, sometimes with little changes in it, so that I literally must look at everything. After about 6 Month later I was done with it and then a little other Bug appears in about 1500 Pages, this was the time where I'm was on the run... This is a extreme, but also not so seldom... I knew about 8 Companies with similar Problems, only three of them got rid of them. Always complete new developments two times in PHP one in Java. Both PHP solutions are running fine now, the Java thing is also running fine, as long not too much User are parallel on the Site... PHP is not a perfect Language, but I like it and when you know what you do, it's fast, secure and easy to maintenance. But it could also a Hell of swamp, which security holes, performance-killer and unreadable mixup of function and rendering... &amp;#x200B; Here are some Rules I thing which are trivial, but also necessary for good Code: * split function and rendering * A Template-Engine is not needed every time. * php files with output only is OK * Function, should be reusable * Use Namespace * Use Classes * Testing should be automated, even it is a little Project with two classes and one template * phpUnit and so on * Separate the configuration from the Code, use config Files * Own PHP-Classes as Config are OK, when the Project is smaller, up too a month worth of work * Prefer ini or json as Config files, they are easier too handle by automated build and deploy processes * if the Project smaller then one week of Work, then php array based config-files are also OK, but use a wrapper class to access to the config. * analyze the requirements * look for what can be cached and what must be loaded realtime from the Datasource (DB, Dataservice, and so on) * If a Page is static, why render it, write directly in the public where the route hits, delete them automaticly by deploy or Content-Change * Handle errors * Catch everything global * but every time when you knew something could happen decide locally to handle it * Have a Error-Handler which inform you about Problem, per Mail, SMS, WhatsApp or whatever suits you. * The Error-Handler should inform the User, but not in detail, but detailed enough, so that he knows it is temporarily. Perhaps add a Form for a registration for email-adresses at it, so you can send them info when everything as back too normal. (I recomend this only for real important pages, like Payment or Payment-Cancel Pages) * never let them see something like: "Error establishing a database connection" * max package size for development should be lesser then 24 hour * always include documentation / about 10% of the time * always include automated test development / about 10% to 20% for simple things, for complex logic up to 40%-50% in extreme even 80% could be ok * always include a buffer before this par is needed by other Parts / this is a dream I know * deploy a coding style * make shure all developers IDE have this style configures * Use a Stylechecker, so no wrong formatted code can be submitted, deployed * The Style should be usable * Use a SVN, GIT or other * For bigger projects +3Month, create a automated deploymen and Test system (Trak/bitten/svn work for smaller Team just fine) * Communicate with the People who ordered/use the Project * let them see early steps * try too get response for every subpart of the Project * Most of the hell comes when you are done, but the customer says, that is not what I had ordered;) * Go from easy to complex as long as possible * Ask the User to kill your application (They will do it anyway, but better while testing, then when productive) * Don't overwork yourself, after 12 hours of coding your coding don't look good anymore
Weird thing is that JS and PHP were created in the same year
We currently have two situations: 1) Most users would like to buy items WITHOUT creating an account (90%). Yet this is a marketplace and we need to soft-create an account for them for lots of reasons. We have their email from first order, and have them complete signup on next purchase/return. Problem is, on checkout anyone can test whether an email already exists, in this way. 2) Usernames: When creating a new account, you have to enter an username for the platform, and an error will occur if it's taken. Again super easy to probe whether an username exists. What to do. TIA &amp;#x200B;
Knowing an email exists isn't a security issue per se, they'd need the full string to match against. If you're worried about a bruce force to discover emails, your server would likely fall over before that was an issue of any size... If your frontend and backend are split, add throttling to the API?
&gt;everyone seems to be on Js bandwagon Hype. Without typed parameters, no decent FW, it is easy to attract beginners. &amp;#x200B; &gt;I use php for WP and Codeigniter. but i can't wrap my head around the fact php is considered a yesterday's technology. No, it is that Codeigniter and WP are yesterday's technology. Take a look at Symfony, take few weeks to understand the basics (trust me, it takes months/years to master it) and you will understand why all PHP conferences are talking about it. 
the funny thing is; javascript suffers from the same problems; regarding 1,2
true, but I always think it is a lot harder to write good code in JS than in PHP. The Syntax-Style: function foo() { foo: function() { foo: function() { } } } is pure evil;) JS have classes but nobody normally use them, I know why... Proper on autloading for JS in the browser is a real pain... enough here is PHP ;)
One of the reasons I like PHP for personal projects is that almost every consumer webhost runs Apache. Professionally I think it’s still viable but it probably depends on what developers you have available.
Nah, Perl is dead dead.
&gt; PHP is awesome ,and easy to learn, install,and deploy. so is Go, Python, nodejs and co. 
If you are worried for this, ban IPs that try more that 7 checks per minute to say something... Should be more than enough 
Or online comments. You see lots of opinions on reddit, for example, written by complete noobs. This stack is better than that stack etc... But when you go and look at the comment history you realize they have no relevant experience.
I love the migration system for Symfony 4 ( like Django). However, how about the default user model (Simpler authentication) for Laravel? Both are awesome, I have use Symfony components, such as console, process,and twig component to do many simple tasks using php
To be fair, most people are here for the porn :)
Yes, that's one of the first measures to implement that went into our list. And it helps, so do other things like tokens, captca and more. I was wondering though if there's some way to prevent the discovery in the first place, so it was more of the side of prevention by the process itself, rather than second stage prevention/detection/mitigation.
I think this is the tipical thing the big ones does, like apple, Google and so on... 👌
I must admit, haven't thought about going to the police... sounds funny at first to me, but also might be an option. We're in Europe too, so whatever is illegal in Germany should be illegal here too. I wonder though if they are going to be of any use. There must be a cybercrime department in any country by now though. Thank you for your answer and list of counter-measures posted.
For array kind of data I prefer to use json if possible and validate each type from the request 
 Facebook has ended support for php. https://www.infoworld.com/article/3226489/web-development/forget-php-facebooks-hhvm-engine-switches-to-hack-instead.html http://hhvm.com/blog/2018/09/12/end-of-php-support-future-of-hack.html 
Facebook doesn't use php anymore because it wasn't scalable. https://www.infoworld.com/article/3226489/web-development/forget-php-facebooks-hhvm-engine-switches-to-hack-instead.html https://hhvm.com/blog/2018/09/12/end-of-php-support-future-of-hack.html 
I want to talk about the other points but b) it's the more important: **Simple question: I have X project, how much time it will take to develop, test and production?.** And the answer is: **nobody knows!** And usually, it's not who sells the project (that sometimes it's also clueless about technology). Now, we have a budget that it's not clear because it's not easy to determine a single factor: time!. So, we have AGILE to save the day!. And no, Agile is by principle, anti-schedule, so and again, we aren't clear about the schedule (neither Agile cares about that). Agile could express the number of sprints, but still, it is not even an exact science and usually an agile estimation fells off the mark for a long margin. If you have the formula to determine the time, then go ahead and show us. :-3. It is not an isolated problem, but it is generalized. Companies like Microsoft, Apple, Oracle, and Google are witnesses of it. There is another factor. Let's say that I have a programmer that produce X code in 10 days. So, If I add another programmer, Can the team deliver the same result in 5 days?. And the answer is, no!. We programmers AREN'T COMMODITIES, there are slow and fast ones, there are good programmers at some task, but they are slow in other tasks. A good project in chief, with a fine-tuned team, could estimate (in gross terms) the estimation of a plan by using past experiences. Do you know why most interview asks you if you can work under pressure?. Well, it is the reason. 
Look up if there is a Cybercrime division in your Country and contact them directly, normal Police mostly don't know how to handle this kind of business. The last time where I was involved in something like that, the boss hired a specialized lawyer who manged the communication with the police. Hi toold the Admins how to make the backups (practical clons) of the harddrive, to make the backup law relevant. He saved a lot of time for both sides, but also got a nice sum.
Saying "it wasn't scalable" is a little misleading with out some context on what that "scale" is, given that they have over 2 billion users. They moved away from PHP, but it did serve them well for many years.
They said what that scale was. The scale of a language evolving over time. Many languages have remedied this already. An example is https://golang.org/cmd/fix/ “Trying to support both PHP 7 and Hack would lead to undesirable compromises on both fronts. We plan to decouple ourselves even more from PHP so that we can make Hack great without having to account for all of the oldest, darkest corners of PHP’s design,” the team HHVM team said. True, this is not the end of the world stuff but that also depends on how big your code base is. If it's big then yeah fixing this stuff borders on a rewrite. It not only compromises your company, developers, and code but your legitimacy.
&gt; Bruce Also called The Hulk. 
Mind that even there many things are political. See for instance discussions about bugsweb. (From technical "no frameworks!" to usability things around registration etc.) Putting a paid developer on it doesn't help much unless attitude in the community changes.
I think your problem is that you're trying to use the email as an account name. It's okay to have multiple accounts with the SAME email. A guest checkout should really create some kind of internal "guest user", which can't be used for logins in the future. Multiple guest orders will result in multiple guest accounts. If the user decides to finally create an account, you could always merge the guest orders back to their main account. Just don't leak ANY information on the order until that email is validated. Also, are you validating the email of the guest account? Most of the time, you'll use a "checkout as guest" to avoid all that verification. If you don't verify it, you then allow anyone to "block" someone else's email in your DB, making the original owner go through hoops for "forgot password" and whatever for something they never did. You really should treat the "guest account" as a pile of unverified information.
&gt;Most users would like to buy items WITHOUT creating an account (90%). Yet this is a marketplace and we need to soft-create an account for them for lots of reasons. We have their email from first order, and have them complete signup on next purchase/return. Problem is, on checkout anyone can test whether an email already exists. Would it impact your business to only ever show the signup suggestion *after* a purchase was made? &gt;Usernames: When creating a new account, you have to enter an username for the platform, and an error will occur if it's taken. Again super easy to probe whether an username exists. Add throttling (something like 2-3 tries per second, 20 tries per minute, 60 per hour should be responsive enough for the user) to prevent brute force and enforce strong passwords or 2fa. Or instead of hard throttling add a captcha after a certain number of tries, solving google reCaptcha costs about $1 - $3 for 1000 captchas which should stop anyone from brute forcing your usernames.
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required).
Well, JS suffers from a lot more. The language its self is inconsistant alot more than php. JS core library is missing alot of functionallity. "JS is has great single thread performance" is what alot of people bloat, But thats just it, single threaded. Once that one thread is exhausted your app is dead, throwing more cpu's or cores at it wont help performace unlike php.
Not disagreeing, just a small hint: not long ago the MakerBundle introduced 'make:user' and 'make:auth'. Its awesome, worth checking out :)
Well, Lying can get you in alot of trouble. You sure you want to give that advice? Being creative is very different from lying, Everyone is creative in an interview, After all you are selling your self. 
Hey CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". You're useless. Have a nice day!
How bout React on the PHP backend and nothing on the front-end? :D
SEEMS LEGIT
&gt; Would it impact your business to only ever show the signup suggestion after a purchase was made? Nope. Good idea! :D Thanks for the tips
Allow multiple accounts with the same email. 
&gt; Some people are geniuses but are not able to write clean code. They are the only ones to understand their own code but the results are great. If you’re the only person who works on the project and nobody else is supposed to see the code, let it look like you want. No, No, NO NO NO. This is a fallacy that many developers fall into and unless you are spitting out projects that won't last any significant amount of time it will come back to bite your ass off. All that shit code you are writing that you think you have a handle on will be gibberish in 6 months - 1 year when you have to come back and maintain or build upon it. You will basically be an outside developer looking at someone else's code, saying how terrible it is. Source: Worked with my own code for 20 years, and I hate past me.
An attacker wouldn't be able to see which emails are in use , because the account registration would succeed.
&gt; Looks pretty good and clean code. I would personally do a gross hash, substring, covert to int, modulo in a few lines but your approach obviously looks more structured. Thanks! It's something like that where it originated from. Quick and dirty. I usually spend the time when building a package to make sure it's as well-structured OO code as I can make it. After all, you can easily change a gross handful of lines within a project but can't really reach into a library's code to rework something. &gt; Question: why did you decide to support PHP ^7.0? it will be unsupported in a few weeks, and 7.1 doesn't have a longer shelf life now either. Wouldn't it be just pain to maintain it for long term, perhaps it's good to start new libraries with the latest GA version? A few reasons: After writing it, I realized that I had used nothing that required anything newer than 7.0. So... why not just mark the minimum required PHP as 7.0? Because PHP doesn't (normally) do any BC breaks within a major version series, it'll probably still work unchanged until 8.0 rolls around. Of course, I'm not going to be shy about using features from newer releases and bumping the version requirement if there's something I want from a later version of PHP. It's easy to make a new major version release, after all. The originating project is on 7.0, for a constellation of reasons. I'm going to haul it forward to 7.3 when that becomes a thing. It would be nice to go ahead and replace the rougher version present than to have to wait.
Nice to hax you, to hax you, nice!
I tried it for a side project when it was the hot new chick on the block, just not many use-cases for it. Structured is better. As the /u/cruachanmor stated, JSON data type lets you have your cake and eat it too. 
Hmm, you're right, haven't looked at it in this way. I just realized we need to save a token to the user's browser (cookie consent is given at this stage, finalizing order) so we can realize that particular user has actually placed the order. While it is not an 100% safe method, most users tend to use the same browser later. If so, when they return, we'll know this is a second order of the same user, and invite them to complete their user registration (if they haven't done so already). But I guess they'll do it anyway... once order is saved, we'll email them things such as "your order status" and entice them to fully register / login anyway. Guess we'll have to think this whole process thoroughly, there are many paths in the decision tree.
I see its time for the monthly PHP is dead, no its not, yes it is thread.
Okay, I see. What’s the answer?
While I agree that it _is_ violating the declared return type that's in the docblock, it _is_ applying the filter as expected still. It's just the `preg_replace` returns an array if it's given an array and `ParameterBag::get` is actually declared as a _mixed_ return type. I guess this is one of those valid use-cases for a union type.
&gt; I don't what to tell you, I still think it is a feature and related to how http works. Your user case is not something most people would need. You've lost me... you're saying reading a parameter from a query string is not a common use case? Also, again, this is nothing to do with HTTP.
You should run all requests with user input through a validator before using them. Your validator would catch this issue. Never trust any type of validation to happen automatically. If you want more insight into _why_ Symfony isn't catching this issue, you'd have better luck opening an issue on the Symfony github or something. They may have a reason, or they may not. 
What I have done in similar projects is: detect anomalous usage, show them recaptcha and need that to go to the next step, it worked like charm and most of the users didn't even see the recaptcha 
Sounds good. Thanks!
Facebook probably still uses php. HHVM and Hack optimizations are now irrelevant since php 7 is faster than their optimisations. There's nothing magical about a language that makes it scalable or unscalable. 99 percent of scalalility lies in the architecture; caching, and how databases are setup. In fact, on a typical web app the web server is the one area that's trivially easy to scale. PHP, Ruby, Python running slow, add another webserver. Done. Databases are a different story. 
Still not much of a use-case....
Add a sizeable sleep() - this will only be mildly inconvenient for users but will make brute force much more expensive. Set up monitoring to detect IP addresses that are hitting that specific part of the sign-up process
Make the account registration process proceed as normal, but drop an email to the address saying 'you are trying to sign up a new account, but you already have one; click here to merge the accounts'
It's mostly a years old circle jerk that got reinvigorated by an influx of new js hype devs. Sure, some of the criticism has it's reasons, but that applies mostly to older php versions (&lt; 7). But the other languages have their problems , too. Most web projects are small to medium sized web pages or web applications and php can handle them has all the tools for that. Excellent frameworks (laravel, symfony, yii, etc.); well tested, maintained CMS (october, statamic, craft, pyro, processwire etc.), tooling - you don't find that in many (if not any) other languages. You can build bad stuff in php, but that's more the fault of the programmer than of the language. And yeah, facebook moved away from php. But any company that gets to this scale will have to rewrite and restructure their system. If you start a new startup and aim at that size and scale (unless you have serious reasons to do it) you can close down your company without even having made an mvp.
Well, how have you improved your skills over the last year? Look at those things and keeping doing them. Look around you, what skills do other engineers have that you don't? Do those things. This is still all subjective to you, but I can see you are looking for something more concrete. From my personal experience I've really made an effort this year to do the following: Reduce cylcomatic complexity of code. Following the single responsibility principle. Not paying lip service to unit and integration testing. Spending more time planning projects instead of hacking right in. I didn't have a fancy JS library like Vue or React under my belt either, so I added that (I choose VueJS). Its coming to the end of the year again and one of the things I'd really like to add to my skill set is a good CI and build process. I'm sure I'll find other stuff to improve on as 2019 roles on.
Yeah I generally partake in the practices And principles described here too. I’m quite surprised you don’t write unit tests though. Does this include live projects? Is there any particular reason for this?
You misunderstood. I meant not JUST paying lip service to unit tests. Projects don't happen without them anymore. Bugs don't get fixed without a unit test first anymore. I also think organizations can have fancy code coverage graphs and want not, but are those tests actually reliable. Will the aid you if you actually decide to refactor large portions of your application?
Sorry but it's coming https://youtu.be/YiNt4kUnnIM Your single instance no matter how many times you throw more money at the problem, lie to your office, and wrap it in golang host providers from their containers to yours is going to "help" you change that.
Thanks for the tip! Seems good.
Only if query param is array, I don't see why it should be allowed to be read as string. I really can't see any benefits to that. Mixed types are always bad because you must use \`\`if (is\_string) {}\`\` or similar. I prefer explicit typehints. Even before I used Symfony, array query param was always treated as array, not mixed. But as I said, you can easily fix it in simple event listener.
I think depending on ParameterBag as your validation library is your mistake then. Yes, it has some filtering built it, that is **not** validation.
$offset = (string)$request-&gt;query-&gt;get('offset', 0); Would give the user the ability to trigger a type error by using ?offset[]=1
It's part of validation... if you have a module which validates an animal is a type of horse, it wouldn't make sense to ask it if a potato was a horse. Equally, if you have a module which validates UTF8 sequences on a string, it doesn't make sense to pass it an array.
Sure, but Rails is a better choice for an API server. Support for websockets and multithreading in a native app API server is important.
thanks for showing that!
By flexible way i mean: let the admin, inside the page, add "as many" blocks as he wants, each one with a type. And the developer can add new block type (for example a slider, an image, a block of text displayed with a special style etc), so that the admin can compose his page with a great flexibility. 
You have strong point, but if there is no GNU Make on machine and I can't install it, should I even touch this host? :D
Doctrine doesn’t really do pagination. It’s strictly an abstraction for your SQL. Doctrine offset and limit maps to the appropriate SQL offset and limit. You would then need a pagination library that that filters queries instead of offset.
Laravel's Eloquent ORM. Check out its official ghub repository [here](https://github.com/illuminate/database), and its official documentation [here](https://laravel.com/docs/5.7/eloquent). 
It doesn't have stronger typing than modern php. Static analysis tools masquarding as typings can lead you to different impressions though. However, the async part is interesting.
Documentation makes no mention of not using OFFSET keyword. And the abstraction of certain API method is not what I'm looking for. Although I'll try to dig through the repository. Perhaps you have specific reference already?
Can you describe why you need pagination without OFFSET in a SELECT query?
How would you build the query without offset? The eloquent API allows you to specify what page you want and builds the query for you. There is even a "simple" paginator that does not count the total rows/pages.
To avoid bugs, data loss and make queries more efficient. https://use-the-index-luke.com/no-offset 
`OFFSET` is only used in the generated SQL if the underlying RDBMS uses that as a mechanism: if your RDBMS uses cursors, then it will use cursors. The pseudo-code is as follows: 1. run complex query, fetch the X identifiers (only the identifiers) of the currently selected page, ignoring any `LEFT JOIN` operation 2. use the identifiers to run the selected query with all relevant join clauses applied The `setOffset()` call you see in https://github.com/doctrine/doctrine2/blob/91346c41e71c8b4c4184abd6e109059d0fcecab6/lib/Doctrine/ORM/Tools/Pagination/Paginator.php#L129 will either generate an `OFFSET` or configure the cursor, if that's what your RDBMS uses.
In title I mean the OFFSET being used in generated SQL, not the API. I'm looking for ORM which implements somesort of API to do pagination without building query with OFFSET keyword. The OFFSET in select query for querying ordered subset of rows is the evil I'm trying to avoid here.
what is with people just putting everything in the title? Including the link to the github url?
“Simple question: I have X project, how much time it will take to develop, test and production?.” That’s not a simple question at all, but you can expose to stakeholders and not tech people in a simple way. The thing is you can’t say “let’s do everything on the fly because nobody knows!” And when clients/stakeholders present a need very vaguely explained not make the effort to think about what needs and make as many questions as you might need to extract enough information of what need to be done? You need to understand, and then if what is asking is impossible because whatever reason try to make them understand. Shielding you behind “he/she doesn’t know what wants!” is a very bad thing to do. About agile; is not a magic trick that will solve all your problems, but that’s why you should adapt, refine and look what is best for your team to make the most of it, and that’s the reason most agile methodologies included these steps. Even could happen you can not so Agile, and waterfall is what you need to do! (very unlikely) In my team we used to have a saying “No plan resist contact” and it was 100% true all the time, until sick of it, all the team we sit together to analyse the problem (Engineers analysing something! 😱). Long story short, we were to accommodating with unexpected/unplanned requests coming from some teams and members of the C level and our plans weren’t complete enough, what make us constantly postponing or not delivering to the top of our standard. So the solution was pretty obvious for all of us, we needed to level up our planning and we should stop to say yes to things that were urgent, but not important no matter who ask for it. With that goals in mind, we adjusted our way to do SCRUM, with emphasis on do always, always the best specs and estimations possible and never jeopardise our sprint goals for being over enthusiastic, disastrously optimistic or not strict enough to say *no* to what’s not important, no matter if is the CEO who asks. If is not important or operationally urgent falls in the % of hours we reserved for this kind of things (5% of the monthly total time). For doing accurate time estimations what we found really helping, and it’s so obvious that I feel embarrassed of making it public, is just check how long took fo do similar task, ideally in the closest past if possible, basically what you said at the end of your post. Also to level our planning we teamed up with the projects team to do the best of the best when it comes to capture the requisites, mixing the pm’s product knowledge with our own technical ability, so we are able to translate the stakeholders needs in something we can measure and quantify, define and develo with no virtually no problem. As today thanks to this we are getting ahead of our deadlines and delivering quality code and hitting a big 92% average sprint completion. Obviously this is one of my experiences, but in my professional life I worked for a fair amount of companies with different approach to planning, but if done well usually your planning will work. And this can be achieved without enormous amounts of stress, but also you should not be naive, in this profession there is going to be moments where you have to much stress and you should know how to deal with it, however if that stress/pressure is the norm, again, something is failing. About devs not being a commodity that’s clear, and is obvious that two developers usually don’t produce two times amount of code, but that’s why teams should be carefully hand picked to create an environment were members of the team complement each others and help themselves to grow and get better at those things they aren’t. To closing this up, I want to add that few years back I was of the same opinion, but I realised that formal planning, methodologies, a good culture an a synergy in your team is 9 out 10 a success combo and sorry for the textwall! 
1 million dollars
/u/ocramius explained how to do pagination. If you are worried about speed, you can limit results to i.e. 1000 and only allow pagination of them. Example: you have some really crazy query but you add LIMIT 1000. In paginator, make a copy of that query, paginate as usual and only fetch IDs. Use original query and add \`\`where id in (:ids)-&gt;setParameter('id', $ids)\`\`. The reason for this is that noone will ever go thru thousands of pages. Even google limits nr of results to 1000. With this trick, I work with 100 million records in MySql, hobby project, no problem at all. Note: It is a bit more advanced because I always show total nr of rows (100 million) but allow pagination only of 1000. Nr of records is saved in another table and updated whenever entity is persisted or removed.
You could use Sonata's Block Bundle without using Sonata Admin. In fact, that's how the Symfony CMF is built. It should not be difficult to make a custom block for showing Easy Admins.
How much is it worth to you?
I'm not sure you grasp the issue I'm trying to avoid here. And that's partly due to the fact that subreddit doesn't allow to provide context in title post. The issue is with the keyword "OFFSET" in sql query. Even when you optimize indexes, you are still suffering the penalty of using OFFSET in your query. Which should not be used for incrementally selecting subsets for filtered rows.
It's not just performance, although hit is rather huge when DB has to operate on OFFSET clause with to select subset of filtered rows somwhere in the middle of total results. The another huge hazzards OFFSET introduces is that it messes up ordering when new rows are inserted into your database at the time your making a query. For example, you are doing a maintenance task, where you batch process huge part of your records due to some state change in your application. You will do it in subsets of lets say 50 rows per batch until you process entire set of 1000. If new rows is introduced during the process, data will be lost, as OFFSET cannot take this into account. I'm not sure we are on the same page in this discussion. Perhaps I haven't proposed the issue clear enough. The problem is, you should get rid of using offset as a way to select subset of rows from your filtered result if you want to iterate through it. It's non performant and a hazzard. It may be new to many people, and it was new to me too, just came back after PHP CE conference where one of the guest was SQL expert and gave a detailed talk on modern SQL. I've provided the links which explain the issue in detail.
So what’s it like program a mission critical nuclear submarine in PHP?
`offset` is a performance drain. It is not an index issue. However, there can be index issues that make it worse. If you have a non-trivial query, using `offset` will degrade performance dramatically as you get away from zero. https://www.eversql.com/faster-pagination-in-mysql-why-order-by-with-limit-and-offset-is-slow/ http://devoluk.com/mysql-limit-offset-performance.html https://use-the-index-luke.com/sql/partial-results/fetch-next-page
Except that you still have yet to describe the particular issue you're facing where using offset is a problem. Proper indexing is fundamental. Indexes themselves can be ordered. You can literally "select offset" on a table with 10 million rows where the query you're executing makes proper use of indexes and returns the results you need in milliseconds. An EXPLAIN will ensure that you're query and your understanding of that queries execution would result in such a result set. Thinking that some NOSQL approach to SQL is better shows you made a left turn at fork when you should have hung a right or made a U. 
https://use-the-index-luke.com/no-offset when read through it. Because it seems we are talking through each other. You cannot ensure correct ordering when using OFFSET, due to how SQL works. 
I've experienced this issue but for me it was an indexing issue. I'm sure we may not have the same use case... and the vast majority of my non trial queries really limit the number of rows that are looked at. If you are executing really sophisticated queries that results in millions of records that would definitely be an issue. I have had this issue once before.. our solution was to insert that queries results into a new table with indexes and then to paginate over the new table. I know this isn't the solution you are asking for with this post but is a potential alternative if your backend doesn't really support another option. 
If you are concerned with performance to this point, maybe using an ORM is not your best solution and should you resort to writing your queries yourself. You’ll have all the freedom to use every alternative for offset you want.
This is awesome, and should make money math in PHP much less of a headache for me.
I suppose not all databases support cursors. Although Ocramius mentioned configuration of Doctrine to enable it. I suppose my initial issue is actually addressed by Doctrine, not in most commonly used way, though.
Well, without ORM support there is solution which is pretty simple. You can select via sequence / count / incremental id and add limit. For next page, use result of last record of previous page as starting point for another page. And iterate. No OFFSET needed, should be achievable via any ORM api.
Do you mean like an actual data type like `int` and `float`? If the precision was fixed we could use something like decimal64 internally but because the precision can vary, the obvious solution is a final class. It would be a value-object but PHP does not support that very well. 
For me there is also the uncertainty of the result - can I trust that it is correct? I'm sure that many contexts don't care for exact precision (eg. physical measurement), but equality and "reference" values being close but not exactly equal to the result would cause more anxiety than actual bugs. I like to know that I can trust the result, and not wonder whether the 0.01 I'm seeing should actually be 0. BC isn't crazy expensive but we can do better. :)
&gt; Still when using cents you will have to multiply by 0.1 in other words - you are dividing cents x/10 - this is only problem with cents/integer solution &gt; We have 19% added value tax. You can’t divide by 1.19 and later multiply by 1.19 without losing bits even if you take 1/10000 as unit. Too tired to prove that right now but trust me, I‘ve ran into these problems. If you do such calculations you need `bcmath`. I never saw accounting with more than 2 decimal places.
&gt; programmers that need real number accuracy are using bcmath already 
Well now you don't need `bcmath` ;) &gt; I never saw accounting dealing with numbers with more than 2 decimal places I have seen things like milk price / unit using 4 decimal places, or currencies like Ethereum that use 18. 
&gt; milk price / unit using 4 decimal places it's not accounting also I'm not sure does milk price/unit needs perfect floating point accuracy 
Ok, I re-read whole post and I agree this is good replacement for bcmath
&gt; …the rows are first sorted according to the &lt;order by clause&gt; and then limited by dropping the number of rows specified in the &lt;result offset clause&gt; from the beginning… How does this not ensure correct ordering? I understand the performance part, but I fail to see how the keyset solves the missing/duplicate entries: If I order by column a, let’s say number of seats in a room, and between showing page 1 and page 2 a new room is added that would place it on page 1, the keyset method would still show a room on top of page 2, that was also shown on the bottom of page 1 before the insertion. Right? The examples shown in the article lean towards a situation with tail additions. Unfortunately not every real life scenario has tail additions :)
Yes but, and correct me if i’m wrong, but in order to have the page composer (with blocks) system of sonata it requires also the page bundle which require the sonata admin etc. The symfony CMF use sonata blocks for creating standalone blocks of content that you can use but not like the page composer of sonata
If you allow this (and it is a decent recommendation) also provide a way to merge accounts. It's also a nice feature to have even if you don't allow multiple accounts per address, because it's common to have multiple email addresses, and you can't always remember which was used.
Merging the accounts, as in selecting one to be used further, no problem. Merging the data, however... that's a different story. The platform is already turning into a monster and adding this feature, I don't see it coming soon, and it could be really troublesome with all the complex automation behind each account where historical data is very important for the performance and tuning to be accurate. So we're probably going to pass on that, at least for the time being. It's possible but not currently feasible.
\o/
This post was removed because you have a new account and we get a lot of spam from newly created accounts. If you have any questions or think your post should be reinstated, please send a message to the mods. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/PHP) if you have any questions or concerns.*
Static values? Inherited values? Generic states? Caches?
So right now I am using CURL along with DOMDocument and DOMXPath to retrieve this, but a question is coming to mind about the efficiency of what I'm looking to achieve. &amp;#x200B; In other words, it doesn't make sense to me to CURL and download the entire website (over 1mb), when all I really need is this portion in the external URL's header &amp;#x200B; `&lt;script type="application/ld+json"&gt;` `{` `"@context": "`[`http://schema.org`](http://schema.org)`",` `"@type": "VideoObject",` `"name": "Funny Cat Poses 2.0",` `"description": "A short description of your video, we'd keep it at 140 characters just to be safe.",` `"thumbnailUrl": "`[`http://www.example.com/thumbnail.jpg`](http://www.example.com/thumbnail.jpg)`",` `"uploadDate": "2015-04-05T08:00:00+02:00",` `"duration": "PT1M33S",` `"contentUrl": "`[`http://www.example.com/movie.mov`](http://www.example.com/movie.mov)`",` `"embedUrl": "`[`http://www.example.com/embed?videoetc`](http://www.example.com/embed?videoetc)`",` `"interactionCount": "2347"` `}` `&lt;/script&gt;` &amp;#x200B; This is all I need, and is 20x less of a smaller burden (as far as the json filesize goes) on the webserver. &amp;#x200B; Honestly I've been doing stuff with CURL for a bit now -- still probably don't know much -- but I've never came across this question. It seems like if it was possible I would have heard about it. &amp;#x200B; I'm open to using anything, doesn't have to be CURL or whatever. Anyone has any suggestions; Can this be optimized in this way? &amp;#x200B; Thank you!
you have a few options for dealing with this kind of API decision: 1- let it explode: make everything as type safe as possible and let it break when a user tries to mess with the request. since it won't affect normal users, it's not a big problem. 2- validate the received data against a schema (eg. using Symfony validator) and return 403 response if it fails validation. 3- accept the array: by casting a string into an array, it will generate a new array with a single item. make the function accept an array of strings and cast it before passing it to the function. (`(array) $req-&gt;...-&gt;getAlpha('x')`) I use all of those depending on the occasion, but prefer the first one, since it's free and the average user is not impacted in any way. This way I can spend more of my time making the app work great for those users. 
&gt; is there any kind of work that suffer from floating point problem other than finance? If by "finance" you mean "anything that involves money in any way", then yeah, that's the primary use case. &gt; just convert $1.00 to 100 cents, problem solved. Nope, that doesn't even *start* to solve it, unless you never have to deal with taxes, exchange rates, discounts, surcharges, etc. Which (spoiler alert!) you almost certainly will need to. As of right now, you basically have to use bcmath if you care about getting the right answer. Making it easier would be nice.
Core competencies I like to see: Creates solutions. Put it into production. Monitor them. Take measures if they don't work well enough. Imho cleaning up your own shit makes you a reasonably good programmer.
WTF thats awful. Reddit why!
I wanted to explain more in the OP but was limited by the number of characters. Say I had two classes Cars and Bikes. Each of these have a function to return the biggest selling of a specified year. On one page I want to show the biggest selling from each of these for a year. Rather than pass the year into each class, is there a way of passing it once to be available in both? I know this could be done with $globals but always thought that would be frowned upon? 
The text option is still there for me.
A lot more than I can afford. I don't want to get ripped off or pay someone cheap who isn't going to do the job is all.
Switch back to the old reddit view to be able to add text to your posts. That new reddit them is horrendous anyways. As for your example. I don't see what you really hope to gain here, its a bit vague for me to give advice. Sorry.
Do not acknowledge but send a double opt in mail.
There's a [slightly more up to date library](https://github.com/dgoring/php-pwinty) that supports v2.3, might be a better place to start.
We use Filebeat and Elasticsearch for API request logs, and sentry for any error reporting. Works pretty well for out use cases. 
Well, at least as long as WordPress is using PHP, it will remain the most popular back-end programming language for the web. That being said, the web is changing/evolving with increasing interest and demand for interactivity and responsiveness. That's what many new JS-based technologies are providing solutions to.
&gt;Rather than pass the year into each class That's how it should be done. You could encapsulate both (or more if you use a loop) objects and pass that parameter to them and return combined response (see: Composite pattern).
It absolutely is accounting. If the price of one gallon of milk is $3.50, but when running inventory costing reports you need to represent the quantity in ounces, you need more than two digits of value. $350/128 = $0.02734375. If your accounting system can only represent that as $0.03 (assuming rounding), that means for every gallon you'd be off by $0.044. Every one hundred gallons, that's $4.40. Imagine if you process/sell ten thousand gallons a week, that's $440 you're off by. That's not small potatoes when it comes to write-offs/rounding errors. (Also, I have no idea if my above hypothetical situation is at all accurate to the milk market, but it served as a good way to show how the pricing of units of items can make the precision of a decimal extremely important from an accounting perspective.) 
Just dump your logs into flat files on a regular basis, the ETL jobs on relevant data.
this isn't black magic, write the appropriate query sorted by index then use limit. 
&gt; All rational numbers can be represented accurately. This isn't true, surely? 1/11 can't be represented in a finite number of decimal digits, for instance.
“Any decimal value to a given precision.”
How about cursor? https://github.com/juampi92/cursor-pagination
You can test this out for yourself by adding a syntax error inside the else block and seeing if the error is noticed. 
And this limit is for a reason, as /r/PHP is not a support subreddit
I might have used it but for two reasons. 1. I don't like that you did not keep the same rounding method as PHP, and that you can't set a default. 2. You require an extension installed (but that is less of an issue these days with containers). 
PHP doesn't really have an internal rounding mode, only default modes for the rounding functions (round, number_format). I decided to go with a different default mode because I wanted to follow IEEE and avoid biasing, even if it meant that the defaults are not the same. You can specify a rounding mode for `round` and `toFixed` too so as long as your precision is enough, this should be a non-issue. It wouldn't have been possible to achieve the same performance and operator/comparison overloading without writing it as an extension. It's easy enough to depend on it, just like you would for other extensions like mongodb, redis, or apcu. Unless you're on a shared host, the tools are all there. 
You can't create a decimal with a float though, you can only compare it. There's nothing stopping someone from casting a float to a string to construct a decimal, so it made sense to me to honor the string cast result rather than the actual value of the float. I have no problem ignoring the ini precision, as long as it's intuitive and predictable. 
I’ve used both Sentry and Splunk. I think both were populated by monitoring the syslog.
May be illegal.
We use filebeat and elasticsearch for logs. Viewing is done with Kibana. 
The problem for me is that the current implementation of string casting from float in PHP is a footgun, if you would explicitly support floats and handle them less awfully it could avoid that. (For comparisons, wouldn't it be better to use floats to the same precision as the decimal? Likewise for construction. If you have some decimal a of precision 17 and some float b with the global precision set to 14, then comparing them could produce the wrong result with the current casting behaviour.)
As PHP gets more type-aware, this could change :) I have no idea about those internals but I‘d have guessed that there are compilers out there that might have solved the same problem as you already with an „integer with added decimal places / precision“ number construct.
You will not find what you look for. Every orm will implement an offset because it exists in sql, and no orm will be able to transmit a field value to a later query. 
Why not implement a '[Fraction]' sort of class to represent all rational numbers accurately without any limit to precision? [Fraction]: https://docs.python.org/3/library/fractions.html
[wat](https://i.kym-cdn.com/entries/icons/original/000/001/007/WAT.jpg) 
Problem solved? Two litres of petrol at £1.2999 says it's not quite so simple. 
I read a quote the other day that was something to the effect of “so much of computer science is just people parroting each other’s opinions until it reaches critical mass and becomes best practice” Database people always have outlandish best practices. For one example, Doctrine devs have said in presentations that you should never use an auto increment ID. Are they technically correct about the benefits of UUIDS? Sure! And yet people are still using auto increment IDs because the perceived cons are negligible inmost environments
Sp you are saying you don't need decimals for a defined range of applications that don't need decimals? Guess what, people are giving you examples of the *other* applications that DO need decimals fractions of a minor unit.
On the topic of blogs: do you know other good ones worth following as a PHP developer?
I used graylog2 in the past. Was great to keep and organize everything. But takes a lot of time to setup right.
Mandatory next step :)
&gt; if you follow the approach mentioned above of building a Go binary with a built-in web server, it's just a dependency you've picked like any other (e.g. not built into the language run time) Why would you class something part of the standard library as a dependency? I think that's an unfair assumption. Do you class using array functions in PHP as a dependency? &amp;#x200B;
I might have read the article too fast, and I love it! I have one question, is `Decimal` immutable or mutable (I would *strongly* prefer immutable!) 
&gt;LOL. Kid, Ironic 
[removed]
Unfortunately, I find /r/php also contains of lot of lesser content. The idea of individual blogs really speaks to me, but I wish they were more easy to discover.
What is that? This is what I see; https://imgur.com/a/O1kx91J
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/O9XZrpZ.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20e8njz46) 
As far as I’m aware, Sentry is only application logs (including exceptions) and client side JS exceptions. However, it’s brilliant at those things! I don’t know how anyone can get by without them. A lot of the time we know about an issue before the user even notices anything was wrong. :)
Indeed this is not possible to do with EasyAdmin. If you really need that feature in your app, that may be a good reason to use SonataAdmin for that specific app instead of EasyAdmin.
&gt; Don’t misuse our Services. For example, don’t interfere with our Services or try to access them using a method other than the interface and the instructions that we provide. Line #2 under "Using out service"
That's the redesign, in dark mode.
Must be a redesign thing, then?
Looks like PHP has [GMP bindings], so it seems that's already covered. [GMP bindings]: https://secure.php.net/manual/en/book.gmp.php
this could not be implemented in pure php, so not creating an extension is not an option.
We have several logics within our service as a workaround. 1. We allow to register the same e-mail with different password. So you can have an account with the same e-mail as often as you want. The only time we trigger an "e-mail already exists" error is when the password is also the same.. 2. We allow anonymouse account/closes. That means we just need your e-mail and that's it! If the payment was successfull, all data will be send to the e-mail address. Since the european data protection (DSGVO) cries a lot about privacy, we have to find a workaround to get rid of the e-mail addresses. We are planning on allowing anonymous accounts to register just with their phone number, just as Facebook/Amazon/Google does too. Phone number should be unique, should allow instant two-factor-auth (password + phonenumber) and the privacy center shouldn't cry anymore (I am not sure if this was a reason.. I just assume it was). The problem on "anonymous" closes are that they are easily a target of scams and so there is no possible way to make that fail safe. If we would punish everyone doing that scam, we could reduce the amount.. but it seems to be a heavy work, even with the police included to it! There was this one asshole who scammed me at eBay and then used my bankdata to buy things in several online stores with my name and bankdata. I don't even know if he got punished or not, but the police couldn't do much.. 
Will work until Google changes it without prior notice as it isn't an official API. Alternatively, you can use Bing Autosuggest API which will cost you $3 for 10k transactions and similar results.
True, but then again. I don't debug my television, my car, my motorcycle to have an understanding of it's behaviour.
&gt; The OFFSET in select query for querying ordered subset of rows is the evil I'm trying to avoid here. Can you elaborate? How would you implement pagination in pseudo-code, if not how I've explained it above? The requirement is to support any given SQL query.
How so?
Q: do you prefer using (in 2018) using a framework or jus plain old PHP for upcoming projects, I know this was asked many times but I just want to know what developer prefer to use right now :)
Man, I'm about to finish a year-long project with lots of calculations and I was initially looking for something better than stringly typing with BCMath. I would've loved to use something like this.
&gt;Does anyone run node or go like that in production though? Yes of course, that's what it's designed for. It's exactly how Google run their GO services (using the net/http built into Go's standard library). &gt; I’ve only ever seen them behind a webserver GO and the standard library net/http is the http/web server. Why would you put another 3rd party HTTP server in front of you GO application which is a HTTP server? This literally makes no sense. &gt; So in practice it’s no simpler It's 100 times simpler. You create one binary (for any OS you wish to deploy to) and run. There is no need to learn/set-up/maintain a 3rd party HTTP server like nginx or Apache and then configure them all exactly the same everywhere you want to deploy your app. PHP doesn't even come close to this for deployment.
&gt;I would argue that PHP actually isn’t that easy to deploy. With languages like Node and Go that come packaged with production-ready web servers Your getting a lot of downvotes here but you're certainly correct in terms of GO however I can't speak for node. Maybe that's what the downvotes are for? In GO you build one single binary and run it. It's that simple. No messing around with 3rd party HTTP servers like Nginx and Apache. Yes sure PHP *has sort of* an equivalent with it's built in server but it's not even close to being a full featured HTTP server and its performance is extremely poor compared to GO's HTTP standard library net/http. With PHP you have to learn an entire 3rd party application to run it, which you must set-up, configure and maintain everywhere you have deployed it to. With GO just update your binary and boom all done in one file, no messing around. To say deploying PHP is as easy as deploying a GO application is nothing short of farcical.
I feel like I'm picking weed strains ever time I look at javascript names
Illegal and being against their TOS is completely different. But clearly anybody watching can see this is clearly an educational exercise with no real purpose. Trust me, you are not going to get a knock on the door from the FBI or a fine from Google for testing, or even using, this. Google steals so much of my data I feel it owes me.
First time I discovered this could be done was in 2012. Exactly the same thing is still possible. Google doesn't care lol. It's not in their interest to try and protect against this because it will cost them in terms of resources and processing time. It's cheaper to do nothing about it.
I love PHP but in the words of The Dude, "that's just, like, your opinion, man."
Thanks, comprehensive arbitrary precision/order arithmetic is what PHP is really lacking. Why do you base on mpdecimal library and not on more popular like gmp ? For example my Linux distribution is missing mpdecimal and have to download and compile manually.. 
You'll need to find something to prevent spam messages being posted. Something like Akismet is probably a good start for that.
It's quite common these days to simply embed a disqus comment section, maybe that's what you're looking for? 
There are no opinions; ``` Everyone prefers PHP for their website development. ```
&gt;is there any kind of work that suffer from floating point problem other than finance? just convert $1.00 to 100 cents, problem solved. That works great if you're only dealing with one currency type. When you have to convert between multiple currencies, only bcmath comes close to keeping the numbers correct. I store everything as US Dollar, but I need to be able to convert on the fly to any number of currencies. I also have to deal with multiple measurement systems. Going from square feet to square meters for example. This also needs bcmath (today at least) to get even reasonably close. It would be awesome to have a type in PHP that allows me to calculate these kinds of values using regular operators rather than converting the float to a string, running it through library specific functions, then converting back to a float for the result.
pHp Is ThE bEsT pLaTfOrM fOr YoUr WeBsiTe DeVelOPmEnT
Lol, nice mantra to mutter to yourself when it does the exact opposite and you want to avoid destroying everything.
If cannot make it from the title, take look at the post list from the OP. This intended to be a spam link, just something went wrong. Report it and move on.
[http://phptraininggurgaon.in](http://phptraininggurgaon.in)
Wow, that exactly what we're finding. &amp;#x200B; North East PHP devs are premium right now. Keep thinking I might dust off my CV :) 
This is not how you should use Reddit. 
What Is this? Really bad Advertising?
19% VAT? Jesus, where does all the money go?
I don't have the exact numbers on the amount of data, we do strip sensitive data like PAN data (for PCI compliance) before writing the log. It could very well be 1GB a day and growing.
Laravel : - Pro: easy to start, the community is big and there are so many works related to Laravel. - Cons: Even a single project requires over 20 libraries. And every library is a small project that must be learned, maintenance and integrated. I'm not saying that we must re-invent the wheel, but it's a bad practice to add libraries (add dependency) that we don't need it. Right now, I am working on a project with over 140 libraries, who created it was silly, it's a Franken-stein project!.
I am leaning towards this sort of setup. How much of a pain in the arse is/was it. Did you set it up yourself?
Our two biggest logs do about 500 MB each a week, so 1 GB a week or 146 MB a day. Not huge, but that will of course only grow over time. We strip sensitive data out of our logs already to avoid PCI violations.
A bit. I recommend ansible to set it up. It wasn't hard to setup. But the Kibana learning curve might be a bit harder
I prefer CakePHP. A close second would be any modern framework over plain PHP.
The Etsy blog is pretty interesting
Didn't really need an article to tell us its ok to use php...
&gt; PHP ain’t dead but it’s been on a slow decline for the last 3 years or so. Source?
Shallow? My ex-girlfriend has more depth than this article.
You're kidding right? It's hard enough trying to convince the archaic core developers to use modern php functionality, you're never going to get them to switch to another language. Cant break that php 5.2 compatibility!
Generally most of the people hating on it have no clue what php is and fixate on issues fixed 10 years ago.
Maybe phar? Its basically a jar file.
So what? Post links when he's interesting articles, sure. But posting a link to a pretty much empty blog on /r/php seems pointless and spammy.
XY problem? Why do you want it compiled in the first place?
If you are looking for a "simplified" version of Laravel check out (Laravel Zero)[https://laravel-zero.com/] and (Lumen)[https://lumen.laravel.com/]. - (Laravel Zero)[https://laravel-zero.com/] is designed for CLI projects and is a unofficial fork. Actively maintained by (Nuno Maduro)[https://github.com/nunomaduro]. - (Lumen)[https://lumen.laravel.com/] is designed for web APIs and an official fork. In my opinion it should get more attention from Taylor.
Code that I don’t want to share. Will be subscription based. Can’t be on a private server because access user private information. Basically it’s a code useful but no user will trust if not hosted by themselves.
I would love to have something like what bamcompile used to do in a more modern and robust way. Sadly I don't know any easy to use ways to do it in php 7+ either.
I've seen tweets with more information than this article.
Immutable, both value and precision. 
I have a PHP code. AFAIK I can run using apache/ngynx right? What I want to do is make this code as a software to sell it. 
Exactly. Can’t turn back to php 5 😕
[Yes](https://github.com/clue/phar-composer)
Your prerequisites are mutually exclusive. It's an "old PHP code" I wouldn't trust in the first place. It always works as a service, we are trusting out private data to banks, Facebook, Tinder, helluvalot other sites, we leak our personal data to Google and a zillion silent affiliate advertizing platforms, but for some reason wouldn't trust another one. And why anyone would like to prolong a subscription if they already have a compiled program of their own? And what about the interface? Is it going to be a command line utility?
I'm looking at bundling it with the extension somehow. I looked at mpfr (binary, bit precision) but found mpdecimal (decimal) easier to use. Python bundles mpdecimal with cpython so I'm sure it's possible. 
I beg to differ. I think there's a lot of value in sharing blogs of known, good writers. I think it's a characteristic of a good programmer to always be on the lookout for valuable resources to learn from.
I don't really follow the phone celebrities, but who is Christopher Pitt and why is he worth to follow?
Wow, will try that, thanks
No worries, let us know how you get on as it looks pretty interesting.
Thanks for the input. Would be subscription based like any other software. And yes would have an UI. Think of having a PHP code but executed privately in a easy way. I can do this fair easily with C# or Java but like I said I would have to migrate everything. And yes I know , PHP is not for this hence my question.
Sure will!
Can someone please give me a quick ELI5 who Christopher Pitt is, please.
Great point. Thanks!
Thought so. Thanks. 
Wouldn't that be the wrong result technically (vs actual value of the float) but the right result by expectation? I'm wondering whether comparing to float should even be allowed because of the inconsistency either way. 
I'm going to head over to /r/nodejs and do a survey, brb :)
&gt; known, good writers Reading the replies to this thread though, he's not that well known. Again, posting links to stuff that has content is absolutely great, but theres nothing there. For all we know it'll be 6 months before any decent php related content appears.
Maybe try compiling it to .NET with [Peachpie](https://www.peachpie.io)? 
That's a good question actually. Forcing an explicit conversion from float with specified precision (even ignoring the bad default value of `precision`, INI settings are unpredictable, and this is also something that may require care anyway) might be best? I'm sure other people will also have opinions here.
Thank you for your kind words :)
phar archives are like zip files, they need to be decompressed in order to be executed. Nothing is compiled.
There was a Decimal::fromFloat but I removed it because I wanted the responsibility of the conversion to be on the engine/user. Honestly not 100% sure what is best here, will listen to hear what others come across while using it. 
Seems like a small sample set to be drawing that conclusion from. If you're interested in other things I've done elsewhere, have a look at [the links I've given in another comment](https://www.reddit.com/r/PHP/comments/9sb85f/christopher_pitt_is_starting_his_own_blog_i_think/e8nztga/)
What is a PHP celebrity and how do I opt out of being that?
I assumed you made some hot php library, which made you famous too php developers, opt out is impossible you become once you are php celebrity you become some cult hero. 😄
I know! Just providing a legit alternative, I'd just use Google in private projects but for client projects I'd rather go for the paid alternative.
Framework. 
That's only if it's exclusively PHP. Executing scripts and executables from other languages isn't out of the question.
So it will be a command line PHP utility called by other programs?
Unrelated but I read "Christopher Pratt" and I was confused for a sec
I would rather just avoid `float` support entirely. If you're using decimal, you shouldn't also have a `float`. Other libraries or API's might only provide `float` though, so there is a case for `float` support. I think something like `fromFloat(float $val, int $prec = 18)` is asking for weird edge-cases. For now I think the cast-to-string convention on comparison is okay, but not solved. 
Not necessarily. You can run scripts on the CLI, *but* if the script expects to be called from a web server, it's not going to work properly. Your options are: 1. Modify the scripts to be called from the CLI. 2. Modify the scripts to be called as an API. This should be easier. 3. Rewrite the scripts into your language of choice. 
Can I use this to shamelessly plug my blog? r/https://r.je 
I know Christopher from his time as a [SitePoint author](https://www.sitepoint.com/author/assertchris/), his [books](https://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&amp;field-keywords=programming+books+by+christopher+pitt&amp;rh=i%3Aaps%2Ck%3Aprogramming+books+by+christopher+pitt), his [conference talks](https://www.youtube.com/results?search_query=christopher+pitt), his work on improving PHP in the FIG (in the past) and recently by exploring uncharted [territories](https://preprocess.io/).
From method docs: &gt; Returns the alphabetic characters of the parameter value. So no - it's not validating query parameters. The purpose of _ParameterBag_ is to give you convenient interface to get/iterate/manipulate over query/request parameters. Thera are other components for this (_Validator_, _Form_). If you want ot get plain query string just use _getQueryString()_ on _Request_ object directly.
?? 4 paid services compared? what about codeception, phpunit, phantom? we run mission critical code and we have crazy good coverage (integration, api, unit) with open source test frameworks
they don't need to be decompressed.
like the other guy said, i think you's just looking for a loop foreach($years as $year){ echo $cars-&gt;getBestSeller($year); echo $bikes-&gt;getBestSeller($year); }
they do, but running a phar through your php interpreter will just do it automatically, so you don't have to manually unzip it first. 
Thanks, I didn't know where to post so my first guess was here. 
Try preg_split('/(?=[A-Z])/', 'OneTwoThree', -1, PREG_SPLIT_NO_EMPTY) It returns for me Array ( [0] =&gt; One [1] =&gt; Two [2] =&gt; Three )
I have found this exact solution 5 mins after posting here. Thanks anyway.
Thank you, should I delete the post then?
No need IMHO
Lol me too 
Some good are: * [https://murze.be/](https://murze.be/) (Laravel focused) * [https://paragonie.com/blog](https://paragonie.com/blog) (Security focused) * [https://www.sitepoint.com/php/](https://www.sitepoint.com/php/) * [https://blog.ircmaxell.com/](https://blog.ircmaxell.com/) (Security focused) * [http://nikic.github.io/](http://nikic.github.io/) Other: * [https://blog.shameerc.com/](https://blog.shameerc.com/) * [https://stitcher.io/](https://stitcher.io/) (I just like its webdesign)
GitHub repo needs tests with coverage metric to inspire confidence. Awesome progress.
Can someone explain what kind of problems this solves ? 
And who uses RSS feeds still?
Me too.
From the docs: /** * Returns the alphabetic characters and digits of the parameter value. * * @param string $key The parameter key * @param string $default The default value if the parameter key does not exist * * @return string The filtered value */ Pay attention to: * @return string The filtered value
That's not really nice to say to someone who put effort in helping you.
Add this to your list of sites https://www.phpliveregex.com Do all the testing you need with the click of a button until you find what works.
&gt; I like the idea of an expression that simplifies itself Like a fraction using two integers, exactly. No doubt we'll see a `Decimal\Number` interface and a `Decimal\Rational` type. Integer overflow could be a big problem here if we use native long types, but sounds like fun to take a look at. 
It is not tested because it's basically empty - only method headers for IDE's and static analysis tools. Code coverage here would be meaningless.
It solves problems like: `var_dump((0.1 + 0.2 - 0.3) == 0); // FALSE`. A real world example could where you want to check if values in a table row sum up to a total. At some point a number might be slightly off, and the sum won't equal the total. You would need to check if it's within a defined threshold of accuracy, which I hope we can all agree is not something we should need to think about. Using a decimal implementation can represent those numbers so your equality checks will always be correct - the number you see is exactly what it is.
Something like this: https://en.wikipedia.org/wiki/Decimal64_floating-point_format
Man who cares? Honestly this is not /r/battlestations and you can develop PHP solidly on a raspberry pi with a 13" CRT and a USB keyboard you found at goodwill.
Put it in a docker image.
Will do👍
This really doesn't have much to do with PHP in it at all
Obligatory... https://xkcd.com/927/
Single main monitor? GTFO. 
This is probably not going to work out of the box on a Linux system because in index.php you require "config.php" but the file is called "Config.php".
FuelPHP is almost this simple.
Shelf explained? 👍
(facepalm) ahahha done
Hey! Looked at it, and it looks great. I'm actually working on a framework myself at the moment. So I got 2 suggestions, and a question, just out of curiosity: Suggestion(s): 1.1 Make a site that runs on your Framework, and host it there. Preferably, host all the documentations and examples on that site, too. Domains are dirt cheap (usually less than $1/month), and you can get a small DO droplet starting $5/month. If it works on a typical apache hosting service (with cpanel+mySQL), it's even cheaper. 1.2 Host it on a live service, and test everything there. Also if your home dev environment isn't Windows, better dual-boot and test it on Windows, as the hosts are always Linux based. Do it for cross platform compatibility. 2. Create way more (live) examples. And way more in depth documentation. Those things are as important for a framework as the quality of the code, and even more so (eg. Wordpress). See [Symfony doc page](https://symfony.com/doc/current/index.html) as a gold standard. Question: How long did it take? And are you planning to do anything with it? 
Looks like my edit crossed your comment, your framework is very insecure and I would recommend that neither you nor anyone else use it in production. If you have this in production, I recommend that you take it down as soon as possible or you run a serious risk of getting hacked, now that people know about this. Also you want to read up on PHP's password hash functionality, SQL injection, and parametrized queries. Sorry to burst your bubble like this... :(
My biggest issues is that it doesn't seem to use hashed passwords, it doesn't use prepared/parameterized queries, your db schema isn't standarized (Customer table has pk "id", User table has pk "user\_id". &amp;#x200B; Is it possible to use route params? Ie /customer/{id}/orders &amp;#x200B; Also while a can appreciate someone making everything themselves I just don't really approve of it when you can easily add a router, templating engine, etc. These extensions are bigger, better documentet, better tested, and frankly most often just better than something created in house.
It's not finished! is made to understand it and to be easy, also not complete
People love good badges more than they love good code.
the routing system is: file/class/method?get\_variables=value so should be something like customers/customer/getCustomer?id=0 (Yes I'm aware of the pass hassing, as the FIXME comment says)
If you read the code again says //FIXME: bla bla implement pass hasing I'm aware of that already, it's not finish, is made for learning and to be simple (in the future will be more complete) if you read farther you see more about SQL injection protection in my code
As well as almost this dead
Resurrecting this graveyard thread because of a current frustration. I decided to chose laravel, and I disliked facades from the beginning due to issues with ide, and distaste for magic and globals. In the long run this costs time no matter what. The issue is that even if you chose not to use facades the vast majority of the community uses them. It makes finding useful information almost impossible. I almost always have to go digging around in the guts of laravel to track down what is actually happening. Ultimately I am certain choosing laravel cost me time and frustration. The overwhelming community support convinced me to try it, at this point I don't understand the hype. Not that there are not really good things about laravel. There are aspects of it that are great, route model binding, framework supported worker pattern, etc. It's just that the good things for me are overshadowed by the issues created by facades, even when you don't use them.
If you learnt some things, that is always good. But please put a big warning on your readme that this is a learning project and not something that should be used in production 
See, this exact comment is where you lost my respect, because the reaction should be "yes, I should have secured this before releasing it", not "you don't understand, it's not done yet". This is much, much too insecure for anybody to even consider using, and you should have mentioned this, because you are clearly aware of it judging by this comment. You should not be trusted with anyone's data and this level of indifference to the safety of consumers should be illegal for people who build internet facing systems. Also the lack of hashes is not even the worst of your problems, it's the lack of parametrized queries. Read up on the stuff I mentioned in the other comment before you take someone's money. Better yet, read a book on PHP security.
We don't have to read anything other than the code linked above which is an SQL injection as big as an iceberg that sunk Titanic.
What did you pick up from this one ?
Probably an AJAX request? Not sure exactly what you mean. But I assume in school your /index.php file printed out some HTML/JS stuffs depending maybe on some input. Now you want to have an /index.html (or index.php whatever) that does something like print a form that you then send to the server?
**Model–view–controller** Model–view–controller is an architectural pattern commonly used for developing user interfaces that divides an application into three interconnected parts. This is done to separate internal representations of information from the ways information is presented to and accepted from the user. The MVC design pattern decouples these major components allowing for efficient code reuse and parallel development. Traditionally used for desktop graphical user interfaces (GUIs), this architecture has become popular for designing web applications and even mobile, desktop and other clients. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
I am using a WAMP server. But i have never heard of twig before 
So i am currently using a WAMP sever and have all the files in. All i wanted to do is have the a separate file that dose the logic for processing forms and orders then some how i call the logic files into the html pages. My apologies if i am confusing some of you. my technical vocabulary is not up there yet.
The reason why using globals is frowned upon is because your methods should know as little about the environment as possible, so that if the environment changes, you can still reuse your class. For example, if you had a global in your script called `$year`, and your classes each used that global to display the best seller... what happens if you somehow didn't have `$year` set to something meaningful? For example, [`example.com/script.php?year=`](https://example.com/script.php?year=) \---- Now... what you're asking for is dependency injection. The classes `Cars` and `Bikes` have a dependency based on the year, so when you initialize your objects, (preferably inside the constructor, as separate "init()" methods are somewhat frowned upon), the car and bike will each know what year you care about. At the very least, your `Cars` and `Bikes` classes won't have to know implementation details about the system... but the rest of the system (or at the very least, your DI container/factory methods) does have to know the dependency in your classes. \---- The problem is, this only answers the question as asked, and isn't particularly useful. The fact is that the year is an unnecessary dependency. Why should cars and bikes care about what year the page is for, except in the one case of picking the best seller that year? What if you want to show multiple years of best sellers across different years, all on the same page? Do what others have said: Pass the year to your `getBestSeller()` method. class Cars implements RepositoryInterface { public function getBestSeller(int $year): Car { .... } } &amp;#x200B;
What i mean is there some examples that have the php code written into the html front end and because security i wanted to separate the logic from the front end coding.
\`\` "SELECT \* FROM user WHERE \`name\` = '".$user\_name."' AND \`password\` = '".$pass."' " \`\` Ooof, it hurts
You should really read about the MVC (Model-View-Controller) design pattern in another comment in this thread. You could use a framework, or make your own. [This is a good starting point](https://symfony.com/doc/current/introduction/http_fundamentals.html), regardless of what you decide. 
i hear visuak studio is the best program for codding.
Agree here. Use a trusted framework that already uses an MVC design pattern. Using a framework with a strong community really comes in handy. 
&gt; That's how it should be done. I don't understand why you would recommend that. He specifically said he didn't want to do that. This is about as unhelpful as it gets to then elaborate, as if he doesn't understand what it means. - Can be achieved by: Static value. Inherited value. Generic states. Inject the other class as a dependency and access its value.
You could call your php file from an *action attribute* in the html submission form try [this stackoverflow response](https://stackoverflow.com/questions/12328354/calling-a-particular-php-function-on-form-submit) and instead of calling a function you call your php script
can someone read the comment FIXME: bla bla implement hash, not a simple select? You are right this is a not finish function, you are right it's simple and insecure, I'm just saying it's not complete! was in my roadmap to finish that function already (before this post)
Guys, I now already that insecure function, was in my roadmap to fix it before this reddit post. This will be (obviusly) fixed when I have time, if someone it's interested in learn, read code and know how this works (because I regard it as something simple to read/understand) can use my project, thanks for understanding
&gt; implement hash, not a simple select It has nothing to do with hashing, it's about query parametrization
1. Your code is full of non-parametrized queries. If you have a website running this framework, all it takes for me to have access to login or registration form, and I can do ``drop databse`` just like that. 2. You have ``ROOT`` still defined to yor XAMPP directory 2. Forms have no XCSRF protection, no captcha or even a honeypot 3. Instead of making the framework be, you know, universal, with names like ``user``, you opted for ``customer`` and ``product`` instead. Which leads me to believe it's a Frankenstein's monster made out of code copy-pasted from various tutorials 4. What grounds me in that belief, is that you also have quite a lengthy [comment](https://github.com/bakeiro/Light-PHP/blob/master/system/config/php_settings.php) that looks like tutorial instructions. And it references to a cart. Which goes along your usage of "customer" and "product". 5. I don't even know what is happening [here](https://github.com/bakeiro/Light-PHP/tree/master/admin/view/template) and [here](https://github.com/bakeiro/Light-PHP/tree/master/admin/view/template). You have an [empty file](https://github.com/bakeiro/Light-PHP/blob/master/admin/view/template/error/notFoundView.php) there, a file with ``&lt;div&gt;&lt;?=$var ?&gt;&lt;/div&gt;`` [style](https://github.com/bakeiro/Light-PHP/blob/master/admin/view/template/customers/customersVIew.php) templating right next to a file with [Twig](https://github.com/bakeiro/Light-PHP/blob/master/admin/view/template/products/productsView.php) syntax... A mess. 6. [Another example](https://github.com/bakeiro/Light-PHP/blob/master/site/view/template/account/infoView.php) of (an incorrect) usage of Twig syntax out of nowhere And that's enough, I believe. What you have is a material for a private Gitlab project, not something to release to the public and make a website for. 
That you need a microphone, a boom arm, and an entire audio setup in general to program in PHP, I guess.
Who 
[removed]
RSS????? UwU what's this
how can you judge that project if I public it in less than an hour? not it's not a copy paste, as it says, it creates a sample site to see how it works, this is why the product table. the user table is for accessing the admin site, the customer table is for (guess what) customers that tried to login in and buy (guess what) one product This is the idea, it's not a online shop, just a test/sample site, you need to dig in to realize
anyhow, I take your feedback from your first points
&gt; how can you judge that project if I public it in less than an hour? By going to your repo and browsing the files. Bad code is bad code, no matter when it was written or published.
Welcome to the wonderful world of WordPress (plugins), where developers would rather disable every security feature on the world than lose even a single installation to some "scary error message".
Just chmod 777! To be fair though if people would stop one starring shit when they cant follow instructions, maybe stuff like this would happen less.
nah, the best program for coding is subkime text.
Whats a good CMS framework that's light? I heard of Drupal and WP but was told they are heavy for very small sites but clients want to modify backend.
Been programming professionally since 1998 and I have done it exactly zero times and I have no recollection of any project where the code stayed and the database system was replaced by a different vendor either...
This is one of the things most "security-aware" developers fail to remedy. # just f\*ing use cacert.pem! Make your app download this regularly: [https://curl.haxx.se/ca/cacert.pem](https://curl.haxx.se/ca/cacert.pem) Use this in your cURLs: ```php curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, true); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true); curl_setopt($ch, CURLOPT_CAINFO, '/wherever/cacert.pem'); ``` Problem solved.
Well it sure does rhyme with light...
What about akom? Is it good for codpieces?
Because I think OP is about to make a mistake by asking how to resolve wrongly assumed solution ([XY Problem](https://en.wikipedia.org/wiki/XY_problem)). Btw. Your suggestions don't fit the context from given example. Last one might, but it's still repeated argument passing, and first one is the same as global variable.
**XY problem** The XY problem is a communication problem encountered in help desk and similar situations in which the real issue ("X") of the person asking for help is obscured, because instead of asking directly about issue X, they ask how to solve a secondary issue ("Y") which they believe will allow them to resolve issue X. However, resolving issue Y often does not resolve issue X, or is a poor way to resolve it, and the obscuring of the real issue and the introduction of the potentially strange secondary issue can lead to the person trying to help having unnecessary difficulties in communication and offering poor solutions. The XY problem is commonly encountered in technical support or customer service environments where the end user has attempted to solve the problem on their own, and misunderstands the real nature of the problem, believing that their real problem X has already been solved, except for some small detail Y in their solution. The inability of the support personnel to resolve their real problem or to understand the nature of their enquiry may cause the end user to become frustrated. The situation can make itself clear if the end user asks about some seemingly inane detail which is disconnected from any useful end goal. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/PHP/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Who needs multiple physical desktops when you can have as many virtual ones as you like? Also see https://hiltmon.com/blog/2013/01/17/being-productive-with-virtual-desktops/. 
Not if it can't be monetized easily.
lol this was typo i meant *visual 
While I do use virtual desktops, virtual desktops do not equal more pixels. At any given time I almost always have one monitor dedicated to PHPStorm, although depending on what I'm working on I may have multiple instances up at once. Then my secondary is almost always the website itself / debugging console. I've got a third which I have in portrait orientation and that serves as my communication screen (skype, emails etc) but I can do without that if needs be.
I'm not in the UK, but in our office, we have a *very* casual dress code...as in no dress code at all as long as you aren't slovenly. However, I'd expect people we interview to dress up a little. &amp;#x200B; Slacks, dress shirt, and nice shoes would be the minimum, in my opinion. A tie and jacket wouldn't hurt if you wanted to step it up a notch. You should be better dressed than the person giving the interview. The only way you could overdress is if you went in wearing a tuxedo.
RIP
I guarantee you I like my $1650 desktop with 64 GB of RAM way way way more than your crapbook.
I prefer to use my own framework. It is not hard to build your own framework, and the benefit is that you will know everything very well and you will control the level of complexity. If you don't have time to build one, I guess Laravel is a good option.
One thing I see missing is that a great developer writes the code thinking about future developers. For example, he doesn't just suppose that any other developer will understand what he has in mind. I always tell others to make the code **developer foolproof**.
I've grudgingly embraced Wordpress with the use of the Advanced Custom Fields plugin. Add caching and its fine. I don't love it, but if you build your own them and avoid those prefab garbage thems, it works. That is, if you just need a CMS and that is not the core part of your business.
A suit worth at least 1/12 of your yearly salary. Because, as you know, nothing increases programming skills like clothing.
This is so office-specific that there’s really no good answer. As a general interviewing rule of thumb, one level more formal than their dress code, if they have one (which near me means come fully clothed and not too high, but closed-toed shoes are still optional). You can always ask the hiring manager if the office has any sort of dress code. Reasonably safe guess: button down shirt, chinos, and decent shoes. 
I agree with the going next level from their standard level of dress. If you can, scope out the office and see what the employees are wearing on a Tuesday or Wednesday and go one level up from that. 
Check whatever framework you used to build it. If you didn't use a framework... well you probably have a bunch of other problems too. Throw this on the pile.
We know.
No.
I usually just wear a button shirt and slacks at the minimum for the interview... I normally wear a regular t-shirt and shorts/pants on a regular work day. Most devs are pretty casual, but if you're working in business-y firm (like a dev division of a law office or something similar) then you might be expected to dress up. Really depends on the job.
What else can you do with Kibana. I know I can look this up, but I have you. What are you using it for? Just logs? What other kind of data can you throw at it and work with?
It's a simple service, you don't need an API to use it and maybe you don't need to use all services. Also, I think that it's easy to start from zero.
While asking the hiring manager is a good idea, they'll probably just say something like "smart casual" which will still leave you a little bit confused. Make a drive-by/walk-by at some time. Look on their social media or website. Just try to catch a look at what people are wearing. If they're wearing a t-shirt and jeans, wear a polo and tidy jeans. Etc etc.
The pagination depends on the database. For example, Mysql has "limit" since eons so it's easy. Sql Server has pagination but it's tricky, You could optimize it with an awful expression. It also changed (its easy) in the version 2012. Oracle is unable to paginate correctly until the 12c. And so no. It is one of the cases when an ORM - database agnostic - library could not work. 
If is of any help. I did my interview for senior dev in London, three years ago, wearing this one: https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcS7YpVJiHhwVuNPbuvtVoUNCWSoCKEVP5dLF5sPysahPIv7kfIbYMRO5BxC And a long (clean) beard. I got the job. Now I do the interviews and, I can’t care less about what the candidate wears. Your clothing is not gonna be taken in account jn the 99% of places. Wear something that is you (because why to suit up if the first day you are gonna go with t-shirts and converses?) that is clean and that’s it.
Idk, first example I could think of a corporate, dressy place. Admittedly not the best example.
A small PHP elephant on your keychain is obligatory.
How can I check if my WP sites have switched of this? Is there a better technique than just searching for this lines? Or should I use Certanity by default?
Well basically everything. It just works with JSON. For example we just it a bit to log health status of servers like memory usage at 20% and then we can visualize that in Kibana as a graph or whatever 
How dare you speak of that evil, evil word... Jk you do you
A good dev refers the documentation rather than relying on StackOverflow. While mediocre dev follows this to a lesser extent. Bad dev solely relies on SO.
Yeah maybe not too much, but I know lots of PHP developer always try to improve their work station. So I still think, it is interesting to many.
Thanks, yeah the same with me. I also find it quite interesting to read about others setup. Always ways to improve something.
[removed]
I'd say a button up and jeans is good enough in most cases. If you are applying for like a really big company like Oracle or IBM something like that I would maybe even consider a full suit. Personally I'd say just don't come in a tshirt and sweatpants 
&gt; Multiple monitors are so much better. Moving your eyes is so much easier than having to press keys to switch applications. [...] Alt-tabbing all day or whatever the keys to switch desktops would drive me nuts. I swipe left or right to the next application (or screen). I double-press the Control key to reach for a full-screen terminal on any of these virtual desktops (also see [System-wide terminal accessible via hotkey on macOS](https://localheinz.com/blog/2018/10/02/system-wide-terminal-accessible-via-hotkey-on-macos/). 
&gt; ... you can develop PHP solidly on a raspberry pi with a 13" CRT and a USB keyboard you found at goodwill. Yes, you can, but why would you? Personally, I find nothing wrong with sharing productivity tips in r/PHP. I often see other PHP developers using their setup in a non-optimal way, and what’s to say against allocating what limited resources we have in such a way that we can spend more time on things more interesting than - shuffling around windows on a screen in search for a specific application window - using the mouse (or touchpad) to shuffle through menus rather than using keyboard shortcuts - retyping long-winded commands rather than using a terminal that is capable of auto-suggesting previous used commands We all can become better developers when we need less time for repetitive tasks, and can spend more time finding out what the valuable problems to solve are. 
I can't imagine being interested in a course about a single SPL exception. That being said: you really need to at least add a description or excerpt to get people interested enough to want to pay for this.
I agree with u/christophrumpel that the most important things is that you enjoy working with your setup. Whatever works for you and let’s you be most productive is the way you should go with. However, hating on others because they use a setup different form yours is not helpful. 
Thanks for sharing! Don’t let negative people get in your way. 
Sit in a café on the opposite side of the street and watch the people of the place come in and out during lunch break. Check their dress code and dress accordingly. As others have stated, one level more formal is ok, but don't go too far. You want to match, and mismatches go both ways, too formal and too normal.
We also had the certificate validation offline for a long time while using an outdated version of Guzzle. After we updated it, the validation accidentally went on by default and almost all of our SSO customers were locked out on release because their certificates were invalid. We then disabled certificate validation.
Did you know that in german the word "Kot" is another term for "shit" and is pronounced exactly like "code"? Many expressions get a funny meaning when you see it this way. "Codebase", "Can you review my code?"
In a small company I think with some small documentation you will be alright because the framework shouldn't be complex. In a larger company with many employees you will have that problem, I must agree with you.
Wait. I haven't disabled the verification in my current project but don't get an error... What is the certificate for?
It would depend entirely on where you are being interviewed. If your interviewing for an agency or a tech company, you can probably turn up in T-shirt, shirts and bare foot. Financial institution or government, you get yourself a suit, or at the very least shirt at formal pants with proper shoes. Also, replica sports shirts are near universally frowned upon.
Clown costume. (Sorry couldn’t resist. I like PHP though)
I don't care much about what you wear. T-shirt and jeans are fine. Just, do not smell like a sheep and do not look like you're masturbating five times a day. I'm serious, we had those type applicants lol
Maybe beach shorts it out my style, but whatever the candidate is feeling best haha. I’m waiting for the day people stop to try to impress other people by what they wear and do it for what they know.
Good job. I'd however more appreciate a more general approach without reinventing a wheel. In other words, a numeric class based on already included stock `gmp` extension with [overloaded operators](https://wiki.php.net/rfc/operator-overloading), where arbitrary precision arithmetic is only a subset of available features.
Sentry is great for _error_ logging. You set up your frameworks exception handler to report to sentry, that's it. Same can be done for JS, etc. It will receive the whole stacktrace and variables in the scope, so it's very useful for debugging. And it supports notifications: email summaries, slack, etc.
Fedora. Refer to the interviewer as m’liege. Jokes aside, pair of slacks, casual dress shirt. Dress for comfort, nail the interview. You can hash out dress code later. You need some flexibility to address questions without choking.
Smart Casual, Your Sunday Best. Like you would wear to visit your grandma. Although you could take a risk, and wear your best hawaiian shirt. . . brave move though. Good Luck, I hope it goes well for you
Suit, no tie, you can't go wrong.
&gt;Now I do the interviews and, I can’t care less about what the candidate wears Same boat and agree with this. My only side note here is if you're going into a large corporate style business rather than a dev shop or start-up you will need to consider dressing more smartly. The people hiring here are generally business people and not developers, if you turn up in flip-flops it could put you at a disadvantage instantly. 
 try { $this-&gt;getCourse(); } catch (SpamException $ex) { exit; } &amp;#x200B;
&gt;Dress for the job you want. Next time I interview I'm going in dressed as Mal Reynolds from Firefly...
For the three jobs I’ve had as a developer in London so far this is what I’ve worn. That includes a big enterprise place (where the guy interviewing me actually had shorts on...) to a t shirt and hoodie loving startup. It’s safe middle ground, says you’re taking the interview seriously but aren’t completely clueless about culture (suit). That said, I’ve been on the other side of the table a couple of times and I really really don’t care what candidates arrive in.
🙌
See https://packagist.org/packages/giorgiosironi/eris/dependents.
I too leave my door unlocked since it jammed this one time. 
So how do you serve your HTML+CSS+JS when deploying on a Node application? I guess you forgot that instead of using a separate web server you're maybe writing your own, which comes with overhead and additional costs as well. :)
Low barrier to entry is making JS look bad as well. No proper standard library is making JS look bad as well. npm woes are making JS look bad as well. Still, folks think JS is a sensible choice over PHP for some insane reason. :D
After working with PHP for almost a decade I've recently been working with Python. I ask: what the hell do people see in Python? It is super confusing and filled with invisible magic that makes it even more confusing.
Did you check _global_ recruitment demands? Welcome to the real world.
For the individual customers ofc. 
You want to get fired after a year even though you're great at your job and everybody loves you?
Best wordpress config ever: &amp;#x200B; `define( 'WP_DEBUG', false );` &amp;#x200B; [https://codex.wordpress.org/WP\_DEBUG](https://codex.wordpress.org/WP_DEBUG)
Because they realized that PHP 7 is better than Hack lang.
This isn't productivity tips, not even the section labeled productivity is a productivity tip. It's "look at my things and how I made them pretty", it has nothing to do with PHP at all, and barely anything to do with development. This is an /r/battlestations post.
I think you're completely taking what I've shared out of context. A thanks would be nice rather than bashing my choice of "project" for the tutorial :) Have a good day.
It was not my intention to "bash" but to inform. It is still a risk you take, even if they haven't changed it. They do know devs use it, they've already added measures that prevent you from using it in AJAX calls. See [https://webmasters.googleblog.com/2015/07/update-on-autocomplete-api.html](https://webmasters.googleblog.com/2015/07/update-on-autocomplete-api.html) &amp;#x200B; Again, it isn't my intention to bash you and I'm if it came across that way. 
The PSR-18, HTTP Client was unanimously accepted in the vote and is now the next accepted standard by PHP FIG. * Specification: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-18-http-client.md * Meta document: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-18-http-client-meta.md * The voting thread: https://groups.google.com/forum/#!topic/php-fig/rScdiW38nLM In essence, the standard proposes a common interface for sending and receiving PSR-7 based http requests and responses with an interface that amounts to: ``` interface ClientInterface { public function sendRequest(RequestInterface $request): ResponseInterface; } ``` The purpose of the standard is to make it easier to write interoperable libraries that need to communicate with network resources without requiring each of these libraries to necessarily write their own code for making HTTP requests.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [php-fig/fig-standards/.../**PSR-18-http-client-meta.md** (master → 02f2d93)](https://github.com/php-fig/fig-standards/blob/02f2d936d1e7c01cb34802f9154489a9a3f06003/accepted/PSR-18-http-client-meta.md) * [php-fig/fig-standards/.../**PSR-18-http-client.md** (master → 02f2d93)](https://github.com/php-fig/fig-standards/blob/02f2d936d1e7c01cb34802f9154489a9a3f06003/accepted/PSR-18-http-client.md) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply e8pvlq8.)
Looking at you Reddit. 
It took me a while.
&gt; Our two biggest logs do about 500 MB each a week, so 1 GB a week or 146 MB a day. What are you logging, and do you need to log it? There's no way 146MB/day is useful logs, and the fact you're truncating it at 3 days means that it holds no long-term significance either.
We get it. Please stop reposting this article. 
Sorry Sir i am new on reddit . Thanks for your good advice . Thanks a lot &amp;#x200B;
Wow, another MAWDURN WEB satire post. How original. 
Alternate solution: Find or create guides for your customers to follow to obtain valid certificates. Now that LetsEncrypt is a thing, this should be *really* easy.
Neat. I must say though, this PSR definitely feels less useful than a lot of the others in the grand scheme of things. PSR-2/3/4/6/7 are all really awesome. The more the merrier though, nothing wrong with it, just less exciting than some of the others I guess. I'm perfectly happy using Guzzle directly, no complaints there.
Assuming that Guzzle will eventually implement PSR-18, doesn't this mean that you can *still* use Guzzle directly, but you can pass your Guzzle requests/responses to other libraries that *don't* use Guzzle directly? i.e. you could build HTTP implementation agnostic middleware, and such.
What car is it?=) I am PHP developer and almost everything in my article is important for my work as an PHP developer every day. It's maybe not a typical PHP code resource, but in my opinion it is still PHP related. Guess we just have a different opinion on this and that's ok.
You can already get standarized response objects from Guzzle, i.e. PSR-7. This doesn't change that.
I was thinking the same thing. Switching from vanilla cURL to Guzzle was a breeze but I don't have any reason to switch another library from Guzzle. Maybe there's going to be a reason for us in the future but can't think one right now.
short of a tuxedo, you can't really overdress for an interview. it's a nice sign of respect to dress well, and I do the same when I am the interviewer. at a minimum, I would ask about their normal dress code, and dress nicer than that.
My advice would be to ask the person who's going to interview you. I always say "whatever you're comfortable in, we're all going to be wearing jeans &amp; t-shirt". I like this because it gives the candidate a choice, but also gives them context to what people around them will be wearing. It's a little odd when people turn up suited and booted, clearly comfortable in it, but then look/feel out of place in a very casual office. As someone who interviews and recruits people regularly for PHP engineering positions - I don't care what you wear, I care what you can do.
SV is a very good indication of the worlds needs with regards to startups and new projects.
Yeah, but you still have to instantiate the client, right? With PSR-18, any lib that requires an HTTP client will be able to be client-agnostic, and do not rely on a specific one. One fine example would be that in the future we will avoid any other "this lib requires guzzle 3, this one 5 and this other one 6" mishaps, as an easy example. Or having 5 different client installed because you have different deps using different clients!
Same response here as above: https://www.reddit.com/r/PHP/comments/9smt69/psr18_http_client_has_been_accepted/e8q2gd7
If you have a large codebase and you want to switch to a new version of Guzzle? The interfaces between Guzzle 5 and 6 have the same name, but not the same interface. If you were to upgrade you would have to update every piece of code that performs an HTTP request. &amp;#x200B; With this unified interface you don't. You just have to update the part where the client is created, which can be centralized with a factory for example.
If Guzzle weren't the go-to standard for the ecosystem it'd be useful. I'd say it's still a good idea, one day Guzzle may not be the king.
This is very basic low level PHP, you can easily set up and HTML form that submits to DB. And for reporting you can easily query the DB and display the results in table format. 
&gt; I swipe left or right to the next application (or screen). So if I have PHPStorm, WebStorm, Slack, a browser, SQL client, Office, Spotify all open, I have to keep swiping left or right until I have that application in view? No thank you. It's bad enough I have to switch screens with 2 monitors sometimes, it must be was worse with only one. &gt; also see System-wide terminal accessible via hotkey on macOS. I have iTerm and only have to alt + ~ to slide it down. 
 &gt; your $3,000 16GB crapbook. You can get a 16GB "crapbook" for under $1500. Also, that setup won't work for everyone. I can't get XCode or the real Office.
lol... out of curiosity, were you using it for anything critical?
That's why I create an adapter for 3rd party libraries so things like this never happen. 
You mean [http://php.net/manual/en/function.spl-autoload-register.php](http://php.net/manual/en/function.spl-autoload-register.php)?
Nope, you still need to know which method to call to actually send the request. &amp;#x200B; So you write library X that will send those requests with help of http client. But after a time you get a ticket that library C1 is not working without your lib X, and then C2, and C3 and ... all because they named their sending methods differently :( PSR18 fixes that. &amp;#x200B; Of course those C1/C2/C3 libs will be instantiated differently, but that's not your concern, and whoever uses them will be able to instantiate them on their own.
&gt; I am needing an application log setup like you have. Fire up a shell and type man logrotate into it. It's fairly simple to understand, you just write a config file for it and cron the config file once a day. Once you nail that, then log management is easier, as you only really care about the critical log. If you need to deeply investigate the critical log, then it's either super recent stuff (so active logfile) or you have a gzipped logfile ready to parse. Good log discipline starts with a bit of legwork, but once you're there it's easy to maintain.
SQL Injections are when unexpected user data is injected into a string and run as SQL. e.g. $sql = "SELECT \* FROM users WHERE id=$id"; This is fine where $id is a number as expected, but what if $id is the string "1; DELETE FROM users;" The whole query you execute will be: SELECT \* FROM users WHERE id=1; DELETE FROM users; (Your user table just got emptied!) In the example you give, you don't have anything other than a plain text string "SELECT [a.ID](https://a.ID), a.post\_date..." There's nowhere for hacked data to get injected into the string. Please post the whole of the query code :-) &amp;#x200B;
What if someone wanted to implement [HTTP pipelining](https://en.wikipedia.org/wiki/HTTP_pipelining)? Standards like this I think can make people dismissive of libraries that don't implement them and yet there may be very valid reasons for not implementing them. eg. the standard doesn't provide for advanced features for the things it's trying to abstract away.
Latest blog post about traits in PHP.
If you turn the verification off you are allowing man-in-the-middle attacks. https://curl.haxx.se/libcurl/c/CURLOPT_SSL_VERIFYHOST.html https://curl.haxx.se/libcurl/c/CURLOPT_SSL_VERIFYPEER.html
Or, he could just use mysqli prepared statements. No need to completely swap (even if I am biased towards PDO over mysqli).
Given your table is called wp_177afd7937_posts I suppose you are working this Wordpress. in this case you are supposed to use [wpdb](https://developer.wordpress.org/reference/classes/wpdb/) which has the support for [prepared statements](https://developer.wordpress.org/reference/classes/wpdb/prepare/) If your code is standalone and independent from Wordpress codebase, then create a [PDO instance](https://phpdelusions.net/pdo_examples/connect_to_mysql) and use it with [prepared statements](https://phpdelusions.net/pdo_examples/select#prepare) 
Presumably Guzzle wouldn't have changed the interface unless doing so actually resulted in an improvement. If we're gonna be locked to a single interface, as this PSR would have people do, then the ability to improve API's is going to be pretty limited.
&gt; in this case you are supposed to use wpdb which has the support for prepared statements Nit: "...which has support for **emulated** prepared statements" WordPress doesn't do an actual PREPARE, sadly :(
Which is why I haven't?
Maybe this is already the case, but is there any work aiming to share the test suites of those PSR components?
Well, that single exception is the parent of half of spl exceptions and the most misused exception by developers :) I couldn't put a post when I posted this link. You can read the description in the course.
Wow that's some anti-SRP code you've got there :O
Sounds like you're needing some form of templating to separate the business logic from presentation. You can achieve that with Twig, Smarty, or even PHP itself, without the need for doing MVC (but that's the best recommendation).
Long time ago i used xampp and nsis
I wore flip flops to my last interview. They havent fired me yet.
WordPress plugin devs should be searching for: `https_ssl_verify` and `https_local_ssl_verify` https://developer.wordpress.org/reference/hooks/https_ssl_verify/ https://developer.wordpress.org/reference/hooks/https_local_ssl_verify/ Those are the hooks in `\WP_Http`, `\WP_Http_Curl`, and `\WP_Http_Streams` (aka `wp_remote_request` aka [Requests](https://requests.ryanmccue.info/) aka ...) Straight up calls to cUrl, when developing in WP, is a good sign that the code sucks more than just that one const. 
Valid point. Maybe "almost" was not the correct word and I think I can agree with you on that. Still, I thought the rest would be interesting for other PHP developers and from most of the feedback I got, it seems so. Didn't want harm anyone or spam anything.
It's something I'm constantly telling my juniors -- familiarity !== simplicity. People feel like python syntax is similar to English, and believe that makes it simple/easy to learn. But time to Hello World! is not the same as ease of use for the language. To be fair though, I could've given all those same critiques to PHP pre 7. 
The diamond problem doesn't exist in PHP because "D" can't extend from "B" and "A" 
Use Lumen -- it's basically Laravel lite, and plays nicely with most Laravel extensions and components. That, and the Eloquent ORM is a joy to use.
Don't get me wrong, I'm not trying to attack you here like you've done something horribly wrong or anything, I'm just saying that other subreddits do exist that are more appropriate for this sort of thing.
I've tried looking at W3School's PHP tutorial, or on other sites - but no luck. All I found are general PHP tutorials but no sites which tell you how to use an API key to access site data. If someone knows how to do it, and explain it in a simplified version - I'd be grateful.
 cURL is what you are looking for.
Api Key for which site/app? Useage often differs, sometimes you can work without it and just take what you need. Even google seem to do not much to prevent it.
That would be implemented with async sending, which is out of scope of this PSR as per meta doc. It would be a characteristic of the specific client implementation, one of which you would use to choose one over the other. 
I've spent 4 years cleaning up turds sir!
The site is: [https://www.humanity.com/](https://www.humanity.com/). I started practicing PHP where I want to check if there is a time clock for a given employee shift made on that site. They make schedules for employees' shifts, time clocks etc.
Well, for starters, I was thinking to check and pull if there is a time clock for a given employee shift made on that site. They make schedules for employees' shifts, time clocks etc. From the site [https://www.humanity.com/](https://www.humanity.com/). Also - I found out you can get the API key from [http://www.humanity.com/app/admin/api/](http://www.humanity.com/app/admin/api/) once you create a free trial.
I'm just going to leave this old but relevant post here: [http://www.workingsoftware.com.au/page/Your\_templating\_engine\_sucks\_and\_everything\_you\_have\_ever\_written\_is\_spaghetti\_code\_yes\_you](http://www.workingsoftware.com.au/page/Your_templating_engine_sucks_and_everything_you_have_ever_written_is_spaghetti_code_yes_you) &amp;#x200B; &amp;#x200B;
Every API is different - there is no one way. You are looking in the wrong place for information; you should be looking at the API docs for the API you are trying to use: https://platform.humanity.com/v2.0/reference
&gt; This RFC just makes the problem worse. No, it doesn't, it solves a different problem. Lets say I release a library with a single entry point: MyLibrary\SomeClass() with a public API : ``` $myLibrary = new MyLibrary\SomeClass(); $myLibrary-&gt;foo(); $myLibrary-&gt;bar(); ``` Behind the scenes, the library could be made up of dozens of classes which are instantiated when you call one of the methods. Without namespace visibility (private classes), someone could instantiate a class: ``` $foo = new MyLibrary\Foobar(); ``` As It stands, I cannot refactor the project `MyLibrary` and remove the `FooBar` without potentially breaking someone else's code. I have no way to know whether or not someone is using the class. By making the class private, I know the only place the class is being used is by code inside my project, I can remove the class knowing that it's not going to break something a user of the library is doing. The same is true of methods, if I have a method with public visibility, it may be being called by end-users. If it has namespace visibility, I know that it's only being called by code in classes I control and can refactor it out without breaking backwards compatibility. 
I actually find Guzzle to be quite complex to work with compared to vanilla cURL, but that might just be due to muscle memory. Depends very heavily on the use-case though.
Yet another reason that /u/sarciszewski is one of my PHP heroes! Keep up the good work. :) Now just to get all those WordPress plugins using this library instead of disabling validation. On that note, I wish that WordPress had more incentive to more easily integrate composer support within plugins. Not that it can't be done, but there are some situations where using composer in a WP plugin is cumbersome. It'd be nice if WP core found a way to support composer within plugins officially to get around those odd cases.
The base controller in my app contains functionality that isn't in the example, which pertains to the controller and should be available to all of them.
If you're using cURL or Guzzle, you'll want to use Certainty. /u/wtf_is_codeigniter's comment here also sheds some light on the "right" way to write WordPress plugins that make HTTPS requests: https://www.reddit.com/r/PHP/comments/9shm92/psa_your_cmsframework_pluginsextensions_are/e8qfd06/
mysql\_ is different from mysqli\_ Yes, it matters. I'm not just being pedantic for the sake of being pedantic.
SurveyMonkey instead of open-source PHP LimeSurvey? Bah!
One can use lazy data structures to represent irrational numbers to any given precision, I think.
For sure. And if the need arises this psr might be deprecated in favor of a new and better implementation. This has been done with psr-0 in favor of psr-4 iirc. But for now this is more than adequate in my opinion.
Our logs are in the database, not the file system. I am familiar with logrotate.
Hmm how do you implement client certificates? 
Thanks for the comments everyone. I was pulled away and could not look back at this until now. I'll check out those links. 
And yet people try to argue that it's not inheritly insecure.
PSR-0 and PSR-4 are funny. It forces us to write the code in a very specific way, it's not compatible with so many features that PHP indeed supports and it turns into a mess. I like composer as Repository but the autoloader is a joke. For example, a project outside of the scope, a file with two or more classes (why?, because a sometimes you want the elegance of a self contained file), a file without namespace or a file without any class at all. Those, while they are half-baked supported by "autoloader", they are breaking the psr-4 specification.
Shooting blindly, but try to use absolute links instead of relative. 
I 100% agree with PSR-4 not allowing those things. They're smelly.
Dev, testing and release all on the release server. Yuo see Ivan, when you do it all in one place, you write better code because of fear of breaking the site
The advantage here is you can write an API Wrapper for Reddit against this interface but never declare a hard dependency on the HTTP library you want to use. Instead, you tell the user, "Use whatever library implements this and we got you." You like Guzzle? Cool. Someone else likes this other one more? :thumbsup: You want to provide your own HTTP Client middleware for your lib? No problem, here's an interface.
In the last question, it asks about charts on a test. Why? and record video?. why?. A Test must be easy, one button, click and hope for the green icon. If fails, then I want to be pointed at the error, if success, then it's ok. However, if it's about a stress test then, we are talking. 
Damn, you are too tidy. It is my desktop setup https://medium.com/cook-php/my-desktop-setup-f4b2b5822919 It is not a desktop for php, since I am working on PHP, Java, Visual Studio (also GoLand, Go = Good) 
I love Linux too but the GUI is not the best one. 
I use Sourceguardian (paid app). It is not foolproof but it is not (yet) possible to decrypt without paying for it. It encrypts the code. However, it requires a loader extension (that it's for free) to run. So, it will not work in shared hosting (unless it is installed). 
Who did what, and to whom?
So... why are php security updates ending in December for php 5.6 and 7.0 again?
Well time to throw your terrible apps behind http basic auth
That is not a solution, a syntax error is always flagged as it doesn’t pass the interpretation.
So what does this tell you about whether the code within the else is "read"? If it were"skipped over" how could it trigger a parsing error? 
Because the code is interpreted as whole, converted to ZendEngine and then compiled to lower machine language. This is because in order to prevent unexpected behaviours the code must be syntactically correct. I’ve explained in another comment. The if content is skipped over _after_ the interpreter converts everything into op tags, and then evaluates the condition to trigger (or not) the if statement. Clearly there is here a lot of people who don’t understand the PHP execution process and is giving shitty or misleading answers. 
His questions goes in the lines if the content inside an if is loaded on memory and taken in account when is not meeting the conditions, and the answer is only during parsing and interpreting, but on runtime that code is never referenced if doesn’t meet the conditions. Putting a syntax error inside an if, only probes that all the file is parsed, nothing else.
I took "reading" to mean from file system, not memory. 
Well then you are only understanding half of it, as the size of the response is not based in the size of the file, but on what is actually returned from the script, and at the end this is what OP was asking.
A pointless click-bait. Security-wise It doesn't matter whether a site is leaking its PHP version or not. A hacker would be a bloody fool planning an attack based on the version info. Every exploit will be tried for the every version. This is how the hacking works.
1. Questions are to be posted in /r/phphelp 2. [Relative and absolute paths, in the file system and on the web server](https://phpdelusions.net/articles/paths)
Ok, then everything is fine. Always up for a helpful discussion. Thanks, I will consider it for my next article.
It is stated you can create a decimal from a string. Does this support different notations based on locale? E.g.: $1 000 000.00 vs €1.000.000,00 (not addressing currency, but the decimal separator in this case). Note that casting a float to string yields different results in different locales.
Still not convinced of any good reason to use traits. Can also just use static function calls if I want to share behaviour, except that those don't have the ability to modify my object (which is better). If not via static (or global) functions, you can inject your dependencies.
&gt; What richard says is true but in case you need to avoid sql injection just PDO instead Wrong. &gt; But if you really need to use mysql_ functions then use mysqli_escape_string on the user input values. WRONG Don't give people bad advice like this please... If you want to prevent sql injection use prepared statements. Whether OP uses mysqli or PDO doesn't matter at all. The choice whether to use mysqli or PDO is mostly a design and feature decision and has nothing to do with preventing sql injection. Use mysqli when you need specific features that only that API provides. Use PDO in all other cases as it provides a much nicer API to work with. In *both* cases use prepared statements and stop trying to manually escape data be it with ` mysqli_escape_string` or `PDO::quote`.
Like my web site https://ayesh.me/ ?
Because it's a free project with limited resources. You can license Zend Server, or similar, and continue getting updates for 5.6 and 7.0. Or you can be more nimble and keep up with the program and keep using PHP free. Honestly the latter option is not just cheaper, but smarter in general.
Traits can seem wonderful at the beginning but should always be used as a last resort.
I don't recall any major show-stoppers going from 7.0 to 7.2? Going from 5.6 to 7.0 had a few stumbling blocks, naturally. I'm curious as to why folk would be stuck at 7.0. Were there some less-than-edge edge-cases I've managed to unwittingly avoid?
It is true that some half assed plugins are probably disabling TLS validation in TLS. However, php's curl implementation **validates TLS certificates by default**. These certificates are maintained by the OS vendor (for example in Ubuntu, check `/etc/ssl/certs` directory and `update-ca-certificates` command). $url = 'https://self-signed.badssl.com/'; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_exec($ch); Above snippet **must** fail in your system, or you have a problem in your system. If you OS/software vendor maintains the trusted CA store, I don't think you need `Certainly` or any other third party tool to have a different trust store. It is quite easy to shoot yourself in the foot with a cert store managed by yourself. 
Personally 6.0.6 was where it was at. 6.0.7 was just too much.
Single large monitor for me is the way to go, 27 or 29 inch allows split screen nicely. Two monitors is just extra neck movement.
29.0 inches ≈ 73.7 centimetres ^(1 inch = 2.54cm) ^(I'm a bot. Downvote to remove.) _____ ^| ^[Info](https://www.reddit.com/user/Bot_Metric/comments/8lt7af/i_am_a_bot/) ^| ^[PM](https://www.reddit.com/message/compose?to=Ttime5) ^| ^[Stats](http://botmetric.pythonanywhere.com) ^| ^[Opt-out](https://www.reddit.com/message/compose?to=Bot_Metric&amp;subject=Don't%20reply%20to%20me&amp;message=If%20you%20send%20this%20message,%20I%20will%20no%20longer%20reply%20to%20your%20comments%20and%20posts.) ^| ^[v.4.4.6](https://www.reddit.com/user/Bot_Metric/comments/8o9vgz/updates/) ^|
Everyone who uses blog aggregators like http://newsblur.com/ How do you keep track of all the blogs?
from the readme example: &gt;Eris also tries to shrink the input after a failure, giving you the simplest input that still fails the test. In this example, the original input was probably something like 562, but Eris tries to make it smaller until the test became green again. The smallest value that still fails the test is the one presented to you. how does it know it needs to look for a smaller number? what if you reverse the test and it needs to look for a larger number? How does this work with strings?
he should not look into a framework yet, he obviously doesn't even have a clue how PHP itself works yet.... crawl before you walk.
PHP.ini ; Decides whether PHP may expose the fact that it is installed on the server ; (e.g. by adding its signature to the Web server header). It is no security ; threat in any way, but it makes it possible to determine whether you use PHP ; on your server or not. ; http://php.net/expose-php expose_php = Off &gt; It is no security a threat in any way 
&gt; Security-wise It doesn't matter whether a site is leaking its PHP version or not. No but there is no reason for this kind of information to leak either. Whether it be PHP headers, Apache headers or anything else. Servers , Langage and frameworks (express in node.js used to do that) need to stop leaking these infos, they are absolutely not relevant for the user.
&gt; Because it's a free project with limited resources. you mean business making billions from PHP don't contribute back by financing its development. This is the story of most successful open source projects.
Uhm, what are you talking about? WordPress totally supports prepared statements! global $wpdb; $reflect = new ReflectionClass( $wpdb ); $prop = $reflect-&gt;getProperty( 'dbh' ); $prop-&gt;setAccessible( true ); $dbh = $prop-&gt;getValue( $wpdb ); $stmt = mysqli_prepare( $dbh, $some_sql_to_prepare ); /s
It absolutely helps *real* hackers find zero-days. The more information you give them, they more likely they'll be successful.
That's the user's problem. If they're too lazy/stupid to upgrade, then oh well. Their hands can't be held forever.
Well, a lot of what you see with PHP and lower versions is linux distros coming with a particular version standard. Ubuntu 14.04 LTS which still has support until Apr. 2019 includes PHP 5.5.
I already used httplug instead and setting up new request (guzzle psr7) and using http client interface. This way I am already not tied to Guzzle in my code and switching to other client is very easy
Seriously bad choices everywhere... both in graph type and colors. It's ridiculous.
I have done a tiny bit without frameworks inspired by F# &amp;#x200B; The one thing I would say is make sure it's easy to replicate the fail state, I get the impression that if you're using a nice library that would be easier maybe a library would give you a replication seed for easier debug? &amp;#x200B; &amp;#x200B;
You gotta show up just a little high for a dev interview or they might think something is awry
I work alone so I thought it would be nice to share here (I hope it's okay). &amp;#x200B; Any feedback (security, possible features ...) is welcome, thanks !
Hi! Maybe I'm a bit late, but here is an answer. There isn't a required place for a ratchet project since it initializes its own server (apache is not needed) and MariaDB should be accesible from localhost. Thanks to this you can separate your application into different segments. One project will handle HTTP requests and the other one will handle WebSocket connections.
Considering as to how all my projects are personal projects, i.e. this is in no means my profession or primary source of income, I prefer to use my own framework. It gives me a lot more flexibility and control, and more importantly it also gives a much higher level of satisfaction. Having used it for years in my projects its also entirely suited to my needs. Nothing extra added to it.
That's true if you start with determining what system to attack. If you start with determining what hack to use (like a recent 0-day), then this is absolutely valuable as you can reduce the number of failed attacks by a massive amount when starting with a potential target list of several million.
&gt; insults as well. man, this is a complete horseshit
\- Doesn't use composer (use it!!!) \- Doesn't follow most common PSRs (see [https://www.php-fig.org/psr/](https://www.php-fig.org/psr/)) \- Doesn't have tests (use composer to install PHPUnit) \- Folder structure isn't very good (composer autoloading would help here) \- etc.
This is what I was looking for, making your own tools and using them correctly, thank you for taking the time to answer this :)
Well, as far as I understands it, for a discontinued version you don't necessarily need a recent 0-day hack, as the breach won't be patched anyway. 
Thanks for your feedback. I'm gonna check how to use composer in my project and check the PSR then. I was completely lost about the folder structure I should have, glad composer could help there !
The bit about a 0-day was just an example relevant to **any** version, that's not the important bit.
Because of a passing lower number
It won’t force an upgrade for most users, but it could prompt Wordpress to stop supporting PHP 5.2. Oh my bad, they’ll keep writing workarounds to prevent their users and hosting companies from having to update. 
Lumen is slowly getting behind, and less and less of a performance upgrade. Default laravel vs default lumen is a 30% up only, which means with any added decent cache or varnish, is irrelevant, and you loose a lot of conveniences by going lumen. https://medium.com/@laurencei/lumen-vs-laravel-performance-in-2018-1a9346428c01 It's easier to go with laravel and strip it down to only have what you need than upping lumen to laravel's level piece by piece. I'm predicting lumen will end up like silex for symfony, abandonned because irrelevant in a few years.
I’d bet that that’s 90% due to Wordpress installs and the “it works fine, why should I upgrade?” crowd. If Wordpress 5 set its minimum version to support at PHP7 or 7.2, we’d all see a wave updates. 
That's what I have in mind too, but I'm wondering whether a fraction-like structure can achieve the same thing without having to evaluate a stack of operations. 
Always good to try things and improve while doing it (this is what life is all about). Beware of traps that others did cover in the past. But out of curiosity, why didn't you start with a microframework that has allready had it's growing pains?
That is not currently supported. You can use scientific form but no whitespace, symbols or commas. If there's a clear use case I would considered adding flexibility for that, but I'm not convinced that a clean string can not be obtained before construction. 
GMP uses binary floating point (could be wrong here), which is not suitable for this project. If I used a GMP big integer internally and implement exponent arithmetic on that, I would arguably be reinventing the wheel more than I have already, by using mpdecimal. 
I think it can be fun to build things from scratch :) Of course this isn't better than well known frameworks but I like to challenge myself as this is the most motivating way to learn to me. 
Maybe have a look at your readme. It's common to use `directory/subdir` for files and `Name\Name` for namespaces. Don't use the Windows directory separator (\\) in your docs, since most PHP projects are likely to end up on a Linux server (and a lot of debs are apparently using Mac)
&gt;Single main monitor? GTFO. Used to always use a double monitor set-up but now dropped for a single ultrawide and can not go back now
&gt;Man who cares? I think it would actually be interested to see peoples set-ups when coding. It would be good to get some ideas/tips on how people work and to improve my own home office.
Did not think about that, thanks I'll check the readme and core files !
Sorry, there is no opt out! :)
https://i.imgur.com/DK1ckG8.png
There is a term used by RedHat which they call (backporting)[https://access.redhat.com/security/updates/backporting]]. &gt; [...] the action of taking a fix for a security flaw out of the most recent version of an upstream software package and applying that fix to an older version of the package [...] They provide fixes for PHP 5.3 till the end of the support of CentOS 6 which is November 30th, 2020 and for PHP 5.4 till the end of support of CentOS 7 which is June 30th, 2024. (You can check their supporting table [here](https://wiki.centos.org/About/Product#fndef-a91b3c0c287c782f9af063daff9e64b566d648c7-2)). So official support may end but in enterprise-class applications they are going to support old version for a long time.
Rhymes with blunder. Fitting. 
I'm still on PHP 5.3 with 'no foreseeable upgrade' due to 'business reasons' ¯\\_(ツ)_/¯
Ensure you have a pattern for Composer usage, but don't include it unless it's necessary for the framework. Most people use Composer as a modern package manager.
&gt; Of course this isn't better than well known frameworks I'm glad you realise that. Most of the guys posting there new framework here don't. That's part of why those thread are usually only backlash. &gt; I like to challenge myself as this is the most motivating way to learn to me. To be honnest, it's also one of the slowest and most insecure. It takes a few years to understand well enough why the complexity of a thing like symfony or laravel is worth it, by using it every day, and twice that to understand where you'd be better off by yourself. To me, a better way to do it would be to do some project in symfony/laravel first, and redo it without it after. The obvious benefit is you will understand all the things you lack when you are on your own. The less obvious benefit is that you'll then have been introduced to a lot of concepts and problems you would take years to get a feel for each on your own.
They're just waiting for that one exploit to finally shut down the business.
You still have time to remove the word-**ph**un in your name. Don't miss the chance!
Pro tip; Let styleci handle the formatting for you. It has presets for the different PSR style guides and is free for open source projects. [https://styleci.io/](https://styleci.io/)
Thanks for this nice comment !
It's all on one server with no backups, so most likely! :D
Well if you're on CentOS/Red Hat they backport security fixes to 5.3.3, so it's still secure as long as it's installed from the official repo.
I didn't realize the jump from 5.3 to 5.4 was so bad, lots of [backwards incompatibilies](http://php.net/manual/en/migration53.incompatible.php) . Not really an excuse to not upgrade though, since most of the BC breaks would have been considered bad practice anyway.
Just wanna say that the new Reddit layout does not show that ;)
Yeah, I'm still waiting till they upgrade PHP in the Debian repo as well.
I have created an issue [here](https://github.com/php-decimal/extension/issues/4).
Thanks for the links ! I think it was a really good idea to share my code here, I can improve my work while it's not too hard to change it. I have set the Router to follow PSR 1 &amp; 2, PSR-4 with Composer and now getting my head into PHPUnit. Once done for the Router I'll be able to do it for the other components and the whole project.
You wait until you upgrade to 7. I'm doing it now and it's driving me nuts. Principally the loss of POSIX regex (automating the conversion to Perl regex has been fraught) but also little gotchas like the "/e" option in Perl regex having been dropped. And then there's the little niggles like stronger type checking which throws up errors and warnings now which it didn't before. Someone at PHP HQ obviously doesn't like that it's a weakly typed language.
Only thing in 'Public' directory should be the bootstrap (instantiation) of the framework and public files such as css/js/images etc.
Remember that time they forgot to backport timezone data for 9 months?
PHP has come such a long way, it is getting stronger and stronger! :D
 *You can create a* connection type to *paginate* them by: \`\`\`. connection ... It is possible to *provide* additional *pagination* arguments to a Relay.[butt](https://healthylivinglifefacts.com/apex-vitality-booty-pop-reviews/) Connection. From\_query 
I'll change the whole folder structure, did not know the meaning of the "public" directory before the other comments.
Yes I'll change the whole folder structure I wasn't aware of the meaning of the "public directory before the other comments. I will also need to think about front-end resources management with rewrited URLs
I read your comment many times but I still don't get it... A pun I guess
I'll install it in the project I think. I just need to learn how to use it !
Why so noisy?
/r/PHP is not a support subreddit. Please visit /r/phphelp for help, or connect to ##php on Freenode IRC (nickserv registration required). You may also join us on at #phpmentoring on Freenode IRC for community and mentoring discussions.
I agree with you. Where Laravel shines is the community, clear documentation and number of available packages. If I were the maintainer of Lumen (which I'm not), I would modify it to be a only stateless Laravel. Just for faster application initialization for API development and maybe better separation for microservices. Actually when I need to develop an application which has to be fast I try to avoid PHP. I know that PHP 7 is fast but in some cases the performance of C++ and Go is needed. If speed of the application is not that important but the development time is I choose Symfony or Laravel. (Personally I would choose Symfony as in my opinion it is a more mature framework but as always I do not work alone.)
they provide support outside of the official php channels. they will backport any security fixes until the eol of Stretch
Same, we put all code sniffers, formatters, testing tools/libs, etc. in the require-dev block. None of it ends up in production deployments but is always available to the developer.
&gt; This function was DEPRECATED in PHP 5.3.0, and REMOVED in PHP 7.0.0. PHP 5.3 was released in 2009.
&gt; If I were the maintainer of Lumen (which I'm not), I would modify it to be a only stateless Laravel. Just for faster application initialization for API development and maybe better separation for microservices. Or just create a guide somewhere of what to delete to have a bare bones laravel install. I think a guy made a talk about that at laravel us this year. Microservices... Too much teams start with a microservice setup by default. Bad microservice is even worse than bad monolith in my mind. &gt; Actually when I need to develop an application which has to be fast I try to avoid PHP. I know that PHP 7 is fast but in some cases the performance of C++ and Go is needed. I'd say it's more of a domain than a language thing. Some things, PHP is better at. Some things C++ is better at. Some things Go is better at. And "has to be fast" is always a trade of between perf and usability. &gt; I choose Symfony or Laravel. Pick your poison \^\^, it's mostly taste these days.
My recommendation to learn modern PHP: • ⁠http://www.phptherightway.com/ (free) • ⁠Modern PHP written by Josh Lockhart, the guy who create Slim framework: https://www.amazon.com/Modern-PHP-Features-Good-Practices/dp/1491905018
Stone projects, or libraries, are that old.
Use the ondrej repo
&gt; Stone projects, or libraries, are that old PHP Stone version 0.1 codename granite. Release date: 2000 BC Feature: You hit stone. Stone make noise. Known bugs: Worms, cockroaches and those weird ones that curl up into a ball. Supported platforms: dirt. Support contact: Zug@cave76
Phone did a thing :(
Yeah, I know it's autocorret, but I couldn't resist :) 
Modern PHP features basically rely on namespacing/autoloading, which Composer provides on top of other things, including package management. Sure, you can do autoloading without Composer... but why? You're just crippling yourself refusing to use it these days. There are many strong arguments for using it, and very few against. Unless you have some I haven't heard already?
I'm fascinated by how you got good enough at php to make all this but haven't discovered composer? I'm genuinely intrigued to know how long you've been coding php and what other languages you can code?
It's not great but if you picked it and it's enough for you to make a living then I would ride it out for at least a year. You can always try and negotiate on performance reviews. Also if they give you growth opportunities as well as autonomy and opportunity to learn more languages and skills then that is worth more than a larger pay check on my opinion. Just make sure you make enough where money is no longer the driving force for a new job, this means making a budget and living by it. Doesn't matter how much of a pay raise you get, you don't have to try very hard to find ways of spending that extra money. 
That sounds incredibly low to me (I got double that at my first real job, and that was below market rate at a then-poor startup close to a decade ago), but I don’t know anything about the going rates there. Maybe check Glassdoor to try getting a rough idea of the local market. Near me, I’d expect a fresh grad to make roughly 4x that, but the Bay Area is *a bit* of an outlier. 
Rip
I can live off of this but if I'm saving for a holiday then I'm not putting anything away as emergency fund/savings. It's one or the other. I will ride it out as that 5k will put me in a comfortable place. I may even ask for 10k. Then after a year see where I'm at. This company has huge potential and I want to be a part of that. I agree with your opinion and appreciate your insight. I am learning every day and not just in PHP. So no matter what it's still growth and experience. Thank you.
Yep.
It depends where you are, but you’re being ripped off. In Western Sydney I started on 90k as a back end php dev. I’d have taken 80k. In Wollongong I’d have taken 70k. In the city I’d have accepted 80k+ so long as there was room to grow both personally and inside the company. If this is your first job and you’re learning and can afford to eat, stick it out. Are they training and mentoring you? Are you learning the full stack or at least getting your toes wet? Stick it out. Do you start at 9 and leave at 5? Stick it out. Otherwise I’d have a talk with your senior dev for support before approaching your managers. Regardless, this seems very unfair. May I ask where you are?
Did you go with a CS degree? I'm learning PHP and wanted to know if not having one is still doable to get in the industry.
Still worth reading in 2018 and 2019. Some tooling may outdate but patterns are forever. 
I'm working in Keysborough for a logistics company. I do get to leave on time and they're casual about it. I am in a sense being taught loosely and being pointed in the right direction/mentored. I'm only 22 with a Holmesglen Diploma. I know that I'm not great too but friends doing casual work all week earn more than me you know.
At that rate you should be getting some other perk from it, be it training or whatever.. if not, start looking around, it doesnt hurt.
My pleasure, hopefully they appreciate you and your work so they will volunteer a generous raise in the near future. When I stared as a developer 14 years ago my first job paid about 28k usd, as the market got more competitive and my skills increased, so did my pay. I make over 100k usd now and the important part to me is the quality of the work environment. I see friends and co-workers leaving for crap jobs chasing larger pay checks, becoming miserable, working 50 hours a week, hating their jobs and lack of input. Love your work but live your life. 
I fought this issue to with my first dev job coincidentally it was PHP backend work. Don't fret so much about who's making what.. I too lazy to convert 35k AUD to USD so I wont weigh in on whether or not it's enough. Just know that it never hurts to look, and the grass is hardly ever greener on the other side. Think about everything being offered, such as benefits, good work life balance and training being offered. In the mean time get experience, get pay bumps if you can, and keep your eyes peeled for other opportunities.
My feeling with this company and job is to ride the wave and I'm about the long stretch and don't want to play hopscotch and have to get acquainted with new software every year, etc. Thank you for the input.
Before or after super? Either way i'd still say you're being massively underpaid. I started working fulltime while I was at uni before i'd graduated and started on 60k. If you believe in your skillset i'd start looking around, you can make more than 35k a year working at a supermarket which has 0 skill requirement. 50-60k i'd say should be bare minimum. Where are you based out of curiosity? That may also have an effect on the wage.
Hey mate. I can offer some experience here. I started as a PHO developer about 7 years back on the same salary. Used them to get experience and moved on after a year. I think if this is your first position it's fine because the experience you get can't be measured. It's a way more important since people will just dismiss you if you don't have any experience. I would say if the pay bump doesn't happen then approach them or move on. I moved on and slowly increased my salary over the years. Developers here are underpaid in general compared to the US but you'll quickly settle on the average rate which I think is around $75 - $90k for mid level.
Tbh I knew composer to install quickly some library but not to build my own packages (which is in fact cool and easy !). I mostly had to learn by myself even if I had years studying. I know PHP enough to build some nice stuff but I lack standards for projects like this no one ever told me before. I'm doing PHP for 3 years. I started coding in C by myself when I was 14, but now (22) I'm only doing web (PHP, SQL, JS, HTML, SCSS). The worst part is that I teach coding. I only work with beginners at the moment and everything's fine (I'm not as dumb as I look in this thread..). But I wish to teach about more stuff including security and standards. I knew that I'd quickly know what would be wrong by posting here, allowing me yesterday to improve myself real quick (I learn fast + having quality links). Well, time to get up, thanks for your comment !
Dude, that's the right motivation to learn. So I hope you learn a lot. When you're stuck, you can always see how others didi it :-) And you never now, in a couple of months/years, you'll suprise the world.
Yesterday I learnt a lot with all the comments I got, this was a very great day. I'd love to surprise the world, I'll need to work a bit more before that hahaha !
I can't :( My company uses the a provider that can only use official repo's. For security reasons or some bullshit. 
Use the ppa:ondrej/php repository, it's got all major php versions.
Far older than that in our case. Verging on last millennial. It then becomes a case, given that all code does become obsolete **eventually**, of playing a waiting game. Sometimes you win (we've lost two customers this year whose sites were in PHP 5.6 and were previously scheduled to be upgraded before the end of the year) and sometimes you lose. Which is why we're only now in the process of upgrading the remaining code to PHP7.
Of course I'm biased here, but my book \[Professional PHP\]([https://patricklouys.com/professional-php/](https://patricklouys.com/professional-php/)) is pretty up to date :) &amp;#x200B; Check out my \[free tutorial\]([https://github.com/PatrickLouys/no-framework-tutorial/blob/master/README.md](https://github.com/PatrickLouys/no-framework-tutorial/blob/master/README.md)) on Github to see if you like my writing (even though the tutorial is outdated and I changed a lot since then).
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [PatrickLouys/no-framework-tutorial/.../**README.md** (master → 97579d6)](https://github.com/PatrickLouys/no-framework-tutorial/blob/97579d6d91b57403e9b246147550c11766ecb553/README.md) ---- 
You are 100% correct. &gt; I think a guy made a talk about that at laravel us this year. Do you have a link to that talk? &gt; Too much teams start with a microservice setup by default. Creating microservices isn't my choice most of the times I'm totally fine with monoliths but clients get what they want.
I think you might be better off looking for (or creating) a package to extend an existing ORM to add this functionality if you need it.
We're considering using ciphersweet. Seeing that I'm not an expert I can only determine it based on simple things like it's age (\~6 months), github stars (136) and public reviews on the internet. I can't find a lot about it though, so I wonder whether there are any external writeups on the security of Ciphersweet. &amp;#x200B; Any more info is very welcome!
The consensus seems to be just that. Take in what this opportunity is offering me until it becomes redundant or something even better and I'm comfortable anyway just ya know. dream I guess is earning more.
I think you did what you felt you needed to do to get your first job in the industry. No point in 2nd-guessing yourself now. See if they give you the raise they promised at 6-moths. After that, look for a job that pays better. Getting your 2nd job in the industry will be a whole lot easier than the first.
If the setting ”expose_php” is set to On, the version is shown in the response headers.
Reponse headers are basically the best way to do it. However, given that a lot of sysadmins turn off PHP version reporting, you can still guess it by looking at other factors. For example, most of the time PHP is installed from the standard repos. So if the webserver version is "Apache/x.x.x (Ubuntu)" you can look at what version of Ubuntu runs that Apache version and then see what the standard PHP version is. Also, sometimes the software helps narrow things down, eg if they are using Laravel you can look at the minimum requirements for that version. Ultimately though, it's hard to find out programatically without doing things like probe for known vulnerabilities or see if you can find something like "test.php" which probably outputs phpinfo(). However doing stuff like that can lead to legal issues unless you have a signed agreement with the site owner...
Returning PHP or Apache version is considered a security problem so you should not be able to find it in headers of well configured servers. Exception to that is string "Apache" which I believe is not trivial to disable.
This also demonstrates nicely why you shouldn't do that because `&lt;li&gt;&lt;?php echo $employee; ?&gt;&lt;/li&gt;` Is not escaped and thus allows for cross site scripting.
well I dont want to do that because its not good for SEO what I want to do is; [www.somesite.com/this-is-my-article.php?article=t](http://www.somesite.com/load-full-news.php?article=someIdentifier)hisismyarticleidentifier so basically the whole url is a dynamic link
But that is _literally the entire point_ of long lifecycle enterprise systems like centos. It's so you can build your app, stick it on a server, and then you're good for the next 10 years. You don't get new software, new features etc, but equally you never have to worry about a dependency breaking or having to rewrite parts of your code due to language changes. Whether that's valuable to you depends 100% on your use-case.
Oh ok, that makes sense, thanks
I don't remember the name of the company but basically there launched an equivalent to Apache Cordova/Phonegap back in the the day (Oh the company was Appcelerator and the product was Titaniu). You could make desktop app with it as well and you could use PHP (or Ruby) in place of Javascript for scripting). Thus instead of having. &lt;script type="text/javascript"&gt;&lt;/script&gt; you'd write &lt;script type="text/php"&gt;&lt;/script&gt; in your HTML and it worked!
I might've misunderstood your comment but isn't that just what I said? To use GET values in the URL to define which article is displayed? Sorry if my first comment wasn't clear or I'm missing the point completely by now.
How do you make XSS with static data dude
Some guys at work have approached me for help writing PHP(They're not programmers by trade). The servers they're stuck with are php 4.3 :) I hate it :)
&gt; &lt;script type="text/php"&gt; This is just a lesser-known alternative to `&lt;?php`. I think Apache allows this type out of the box, but if not you can configure it to. You don't need wrappers to write client-side programs in php. Create a script with a php shebang and run it.
Same, it's just perfectly and slowly explained, without tons of details that you will forgot at the end of the video. :D 
What I mean is that you are actually writing the frontend in PHP
I think "client-side" is what makes the browser work, "server-side" is what makes the server work. On the other side "front-side" is what the user can see and "back-end" is what the user can't see, usually related to manage data. But I can be wrong.
This library's last update was 4 years ago.
&gt; In the real world, you won't have a constant array, obviously. you would especially on &gt; super simple 4-5 pages 
&gt; You don't need wrappers to write client-side programs in php. Create a script with a php shebang and run it. I don't think you understand what Titanium did. Your PHP would actually run in the browser in place of Javascript, react to user events, .... You certainly can't do that with Apache or stock PHP.
I literally just explained it tho. if you dont want to believe me feel free to consult a dictionary.
The DOM is a generic spec created in order to work with XML nodes. It is not tied to the browser, what I'm talking about is the DOM implementation inside the browser accessible via Javascript. PHP can't create an HTML element interactively from the server directly in most browsers, it needs to delegate it to Javascript. Titanium browser did run PHP in place of Javascript in the browser, not on the server, while still giving the developer access to all PHP std lib functions.
&gt; The DOM is a generic spec created in order to work with XML nodes. It is not tied to the browser lol.. you telling me or just reminding yourself?
To add to my previous message, you're talking about PHP evaluated on the server, I'm talking about PHP evaluated directly by a browser. Obviously you can't do that just with stock PHP or Apache.
You would be surprised how many developers do NOT have this skill (or do have it somewhat, but not at the level that it makes them much more effective) despite being good at actual programming.
I think he means having charts to track pass/fail over time and stuff like that. Coverage percentages, etc. people love their dashboards.
php is just a programming language. there is nothing in the spec that says "php is only allowed to run on an http server" that is ridiculous. teh only reason php doesn't run in a browser is because browsers choose not to implement it. 
i understand just fine what you're saying. someone invented a browser that executes php. fantastic. it's all the other stuff that *you* clearly don't understand that i'm responding to.
&gt; php is just a programming language. there is nothing in the spec that says "php is only allowed to run on an http server" that is ridiculous. teh only reason php doesn't run in a browser is because browsers choose not to implement it. I'm not sure what you are trying to argue here. OR why.
Nope, I don’t have a degree in CS. However, you need a very strong portfolio (GitHub, typically) to get into the industry without one. Most interviewers in my experience don’t really care about a degree, but you have to get through HR/recruiting first and they do. And to be perfectly honest, if you’re just starting out and have PHP as your best/preferred language, you’re going to have a difficult time. Something like Go or Python will help a lot more as a starting point. 
why u getting mad? you should chill, be humble. learn something new. you're obviously not an expert so i'm just pointing out some semantics you got wrong. no need to get butthurt, friend.
why did you feel the need to make that point? we're pretty far removed from my original message. we're talking about something completely different now - try to keep up buddy.
https://youtu.be/K0xid2vS7Oo?t=815
&gt; why u getting mad? you should chill, be humble. learn something new. you're obviously not an expert so i'm just pointing out some semantics you got wrong. no need to get butthurt, friend. Butthurt by whom and how? what did you say that invalided anything I said? nothing. It's you who is butthurt, realizing whatever you were babbling about has absolutely nothing to do with my first message. 
last comment. i win.
And you're useless.
Last comment, I win and you're blocked.
[Strict-Transport-Security](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security) is your friend, perhaps ?
nah, you're just mad cus i'm smarter than you.
I'm a huge fan of Slim, and have just started working with Symfony Flex. So far I enjoy it a lot. Still all the applications I use at work are built on Laravel, and I'm not entirely sure what you mean by Laravel getting in your way--I think most (all?) of its conventions can be disabled and/or replace, but why would you want to?
pamblam0, you're obviously both an idiot and an asshole. Maybe a troll, too! -I win.
Why did they ban /u/hopeseekr and allow a cretin like you is beyond me!
From what I can see by reading the CakePHP API docs you should be able to control this output. If you just pass true as the second parameter, then the `Router::url` method will prepend the full URL. From there you just need to make sure it's using the protocol you want. So, if necessary you can call the `Router::fullBaseUrl` method and set the base URL for your App. Router::url('some.action'); // Outputs http://myapp.site/action Router::fullBaseUrl('https://myapp.site'); Router::url('some.action'); // Outputs https://myapp.site/action
last comment, i win.
Are you looking for PSR compliant libraries that _use_ `fsockopen`? If so then there are a lot of libraries. Like PHPMailer: https://github.com/PHPMailer/PHPMailer/blob/master/src/SMTP.php
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [PHPMailer/PHPMailer/.../**SMTP.php** (master → 3c90248)](https://github.com/PHPMailer/PHPMailer/blob/3c90248c0136ec8e377691f334d385a217de7151/src/SMTP.php) ---- 
Cool. That's what I thought. I guess if you're doing pure-events and only for authenticated users, that works fine.
There is a [quick start](https://docs.opis.io/json-schema/1.x/quick-start.html) page (5 minutes read) that briefly explains how to build a validation schema and shows a simple example. After you finish reading just try, as an exercise, to write the PHP code that validates the example presented there. At the end, I'm sure that you will find this library extremely useful. 
Step 1. Head over to /r/phphelp Step 2. Delete your post before anyone else sees "curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false)";
What exactly are you trying to do? You'r main loops will never run since it's check is 0. If you want to iterate over the array of $hrefs and append to the curl service, you need to remove $href from inside the for loop and and run a count on it. The below will run, but it just pulls in two separate html pages into one. &lt;?php $href = array( "/Regions/108/Tournaments/5/Italy-Serie-A", "/Regions/155/Tournaments/13/Netherlands-Eredivisie" ); for ($i = 0; $i &lt; count($href); $i++) { //$arr = explode(" ", trim($href[1])); $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, "https://www.whoscored.com" . $href[$i] . ""); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true); curl_setopt($ch, CURLOPT_HEADER, 0); curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5"); $result = curl_exec($ch); print_r($result); } ?&gt;
First, format your code: &amp;#x200B; &lt;?php for ($i = 0; $i &lt;= 0; $i++) { $href = array( "Regions/108/Tournaments/5/Italy-Serie-A", "Regions/155/Tournaments/13/Netherlands-Eredivisie" ); $arr = explode(" ", trim($href[1])); $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, "https://www.whoscored.com" . $href[$i] . ""); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true); curl_setopt($ch, CURLOPT_HEADER, 0); curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5"); $result = curl_exec($ch); print_r($result); } ?&gt; &amp;#x200B; Secondly, sample date is what we need, not the CURL code.
Step 3. Check out [Guzzle](http://docs.guzzlephp.org/en/stable/) and stop messing with doing curl on your own.
Just to clarify. Front-end could mean doing UI stuff, generating menus, etc. Perfectly common to do in PHP. But client-side is generally taken to mean stuff that runs in the browser rather than on a server. IE, Javascript rather than PHP. &amp;#x200B;
doing this manually has always been a PITA :)
business reason probably being "this is what Red Hat provides security support for."
don't worry, the Debian Security Team will keep updating PHP 7.0 with security patches until Debian Stretch is EOL. 
&gt; 35k AUD 25,232 USD.
guzzle isn't a socket library, not even close.
What, no ACAB?
Which is why I asked because there are no PSR standards for sockets?
Use Babel to convert your PHP into JavaScript? + https://old.babeljs.io/php + https://gitlab.com/kornelski/babel-preset-php Sorry, not sorry.
The last time I've tried that library was two years ago, so I'm not up to date with its progress. But I remember that back in those days it lack the ability to define custom validation rules, and that was pretty important for us. So we kept looking for an alternative and we finally found [JSON Guard](https://github.com/thephpleague/json-guard) and never looked back. Until we were forced to build our own implementation, but that's another story... Custom validation rules are extremely important since they allow you to simplify your code tremendously. Imagine you have an API that allow users to handle virtual machines that are identified by a human-readable ID. Our library allows you to define a filter, that will not only check that the ID is correctly formatted, but more important, it will make sure that the specified virtual machine actually exists. Of course, this is just the tip of the iceberg, we've added a lot of extra functionalities on top of the standard JSON Schema. So if the library you are currently using supports all these features, then, honestly, I see no reason for you to migrate. Otherwise, maybe you want to take a closer look at what our library provides.
Gah!
Ooh, nice! We needed custom validation rules as well and had to write our own validation layer on top to make it work, it'd be great to be able to build it in as a legitimate rule. I'll definitely look into this, thanks!
I am getting experience and feedback/pointers but definitely not training. I wouldnt really say there are any perks. What I said before was a joke.
Omg why does this exist?
Stuck on 5.2. At least it's internal only. Hired a year ago on a '3 month' contract to maintain the existing internal site while a dev team built a new one... if I wasn't already bald... :/
I'm starting out and based more in front end. I was hoping maybe getting a back end job, most refer PHP and I enjoy that more. You dont think that's possible, I should focus on go or python? Heard those are more for degree having persons. Thanks btw!
just a typical transpiler for PHP to JS. Most programming languages have such a transpiler that you can write client side code in them instead of JS. I tried to experiment with Bridge.NET, the C# to JS transpiler, and the productivity increases as I am more comfortable writing in C# than JS. 
Thank you so much for this. I promise, I read those same docs and saw that, just didn't click that it was the solution. Thank you so much, it seems to be working. I'll continue testing, but the things I've tested so far works!
This is exactly what require-dev _is_ made for. If I see phpunit or any other devices tool in it's require block, I would simply throw it away. 
This is the kind of constructive criticism the world needs. Hats off. 
Really depends on your goals. Many companies are going to pass on a resume that lists "I know PHP" with little/nothing else and no work or meaningful portfolio history. Like it or not, the bad reputation is still around and it will do disproportionally more damage to people just entering the workforce. They also may take it as an opportunity to make lowball offers. Go and Python don't have that reputation, and generally speaking companies using those languages are going to have "better" jobs - or, at least, less on the "please maintain my clusterfuck of drupal plugins" side. I personally hate Python and think it's inferior to PHP in pretty much every way, but most hiring managers will strongly disagree. Do keep in mind my viewpoint is highly Bay Area-centric. Near you, the job market could be completely different. While I use PHP professionally, I'm in the local minority in terms of using it at all AND an even smaller minority of having a decent modern codebase to work with. No matter what, you'll grow more as a developer by learning additional languages. Each have their own strengths and weaknesses, but the more you see the more you'll be able to identify common patterns and implement sane solutions. Dabbling with Rust and Swift has strongly influenced how I design solutions to certain problems regardless of what language I'm working with.
Really insightful post bro, appreciate it. I'll try to dabble in python or go and expand my skill set.
&gt; LimeSurvey I just opened the project on github and opened a [random file](https://github.com/LimeSurvey/LimeSurvey/blob/master/application/models/Permission.php) and god you are right. Bah! indeed!
XML is evil, they said, JSON is cool, they said. The future is schema-less, they said. :-P While I think it is highly useful but I prefer to validate the model. 
I'm in Melbourne, you should be on 45k at least, but use it as a learning experience.
What is ACAB?
I started on 35k in the same job in Australia 14 years ago. That was low back then. I think the entry level wage has gone up since then. I would say 45k is where I'd start you. But then again, in your first job you shouldn't really be that worried. Its the experience that matters. However look at the award rates. (industry specific minimum wage). If you have a degree then the minimum wage is in the high 40k vicinity. Still this is just your first job. Treat it like work experience. 5k extra after 6 months is good. Stay on 40k for a year and then ask for a raise or get a new job. In the end this is valuable experience. The hardest part of finding your first job is not having experience. Many employers won't touch you. Just by having this job for a year or so you have opened up so many new opportunities.
Great library! Thanks for sharing. Since JSON Guard has been abandoned I’ve been looking for a replacement. The biggest issues I’ve encountered with JSON Schema so far is the inability to add comprehensible custom error messages which has led me to roll out my own dynamic implementation for schema generation. My schemas allow for easy composition as the schema is dynamically generated by PHP Objects. Which also means, no references which can cause some annoyances on the client side. I’ve also created an error formatter which takes the error message from JSON Guard and formats it in a user friendly message using a field’s label and not it’s property name in the data object that’s being validated. Example: if there’s an error with *addressLine1* it will say “Address Line 1 cannot be empty” instead of “addressLine1 ...”. Another upside to dynamically generating the schemas with PHP is the ability to have “connected” fields. For example, if I want to validate that the input is solely what exists in the database, example *objectId* can only be one that matches one in my database. I can validate that with custom rules (pretty much the way your filters work). 
The model links are broken in the readme.md
In the words of Charles Babbage: " I am not able rightly to apprehend the kind of confusion of ideas that could provoke such a question."
Best of luck! Don’t go nuts over the advice from a random internet stranger, but enjoy the journey and always try to learn more :)
Doctrine
Once made a script for editing the levels in Solomon's Key in NES. Another time I scraped 100s of thousands of images and videos from a free sms service. Also made crypto trading bots that made $20k in one day once.
There have been over 1400 issues. https://github.com/briannesbitt/Carbon/issues/1490 is the currently-open issue.
Who the heck needs an API extension for DateTime?? 😦
You should look at how many comparable npm libraries there are. 
End of List.
DateTime sucks balls.
Well because date time management in js is very, very bad. But the DateTime class is a very powerful class, fucking ton of options for creation like ``` $date = new \DateTime(“next monday”); ``` and modify it is pretty easy with DateInterval and the modify() function once instantiated.
Stupid wobbly tilted sphere 
As someone who remembers handling times in PHP _before_ DateTime existed I'd say it's not the most terrible thing ever, but I also don't mind using Carbon. 
 Carbon::yesterday()-&gt;subMonth(); Hurray!
Haha that open issue is insane. Something is _wrong_ with that guy's system.
Did someone ran a profiler on a Carbon generated date vs a natively generated one? I just check the source of Carbon and oh boy...
I'm sure someone has probably benchmarked it specifically somewhere, but I've benchmarked / profiled applications using Carbon and never seen it show up as a performance issue. 
This library is shit and should not be used. I've had to twice pin Carbon to a minor release to avoid massive BC breakages. If you're not doing anything important with dates then it provides a heap of helpers, but if accuracy is important just use DateTimeImmutable.
Totally agree with you. 99% of uses of cabron I've seen can be replaced with and equivalent of DateTimeImmutable class. 
Doctrine is utter shit. Downvote me all you want.
Depends on the app. Anything can become a bottleneck in the right (well, wrong) situation. Which isn’t to say don’t use it, but know where your hot paths are and plan accordingly. 
We are programmers, not airport fans. We can goie you the feedback on the code, if you give it to us for the review. Otherwise you must look for the feedback elsewhere.
Any examples?
I don't appreciate working with Doctrine either, but I'm interested in an elaboration along with your labeling? 
Care to elaborate? I've found it exceedingly helpful and useful.
All Cop Are Bastards ?
That's one of the more well-structured files of the project. I dare you to have a look at the expression manager helper. 10k loc, all in imperative style.
That's one of the more well-structured files of the project. I dare you to have a look at the expression manager helper. 10k loc, all in imperative style.
PDO
I mean it's an extension to DateTime SPL class. Can't be that bad. Your instanceof checks would still work BUT you have some syntactic sugar added as a bonus.
Elaboration: He's a shit-tier dev.
you mean like [is_it_monday](https://www.npmjs.com/package/is_it_monday), [is-tuesday](https://www.npmjs.com/package/is-tuesday), [is-wednesday](https://www.npmjs.com/package/is-wednesday), [is-it-thursday](https://www.npmjs.com/package/is-it-thursday), [isitfriday](https://www.npmjs.com/package/isitfriday), [is-it-weekend](https://www.npmjs.com/package/is-it-weekend)? ;) 
I've been caught more than once thinking a Carbon object is immutable and accidentally adding some days or months to a base value. The `copy()` method helps out there. $newDate = $someDate-&gt;copy ()-&gt;addDays (1); Just something the documentation needs to make a little more clear IMO. 
You're probably just using it wrong. I mean, you don't even mention what exactly goes wrong, and that is because you don't know the cause, which is 99% sure something in your own source code. This library is brilliant.
Username checks out
Oh man that just gave me an aneurysm. :|
Nope, but you should probably read up the bloody fact that your library of choice is, in fact, not immutable. See ... don't expect shit to be immutable just because you feel like it should be. 
Copy is just a wrapper for clone but yeah, you are right, should be made clear in the docs, still, using libraries without caring about the underlying code is just a recipe for disaster. 
Wow, I didn't want to offend you in any way. It's just that I am unable to judge the security of Ciphersweet and seeing that most repos that I use have thousands of stars I just considered it. Even though I know the star count doesn't actually need to mean a lot. I really appreciate your work on this and I've read your blogpost with great interest. I'm just looking for alternative reviews on your concepts and code to see if it's something we (working in EU medical industry) are confortable with using.
I'd be interested in trait. Did you post it somewhere publicly? Also, do you know of any alternative reviews of this code and the concepts within it? We're considering using it, but since I'm not a cryptographical expert I'm looking for alternative reviews on it to be able to justify the usage of it internally.
I will, but not because your opinion, but the lack of discussion material. I fully accept if you think it's not good, but if you share your opinion, then why not "explain" it too? You always have to think: "How will my sentence will be any help to anyone". Imagine the Doctrine developer is reading this and you have like 10 things that you don't like. How the hell should he/she work on it, if the only thing he can read is "it's utter shit" instead of writing something like "X, Y, Z and especially Yuhee, is not good. I would solve it this way... or I would expect that it does this and that and does less of this or that". This is way more helpfull. Also for people who want to choose an ORM (or something else where they searching for reviews) they have more data to compare with. Like an Amazon item.. what helps you more? 5* with "Perfect!" or 1-3* with a 500 word explanation?
Sorry, never wrote a Laravel plugin for CipherSweet, and the trait I had wrote is closed source. I do highly recommend anything that Scott writes in terms of security. He's really the best in terms of PHP security. The concepts behind CipherSweet are sound, and this isn't the first time it's been done.
Being aware of the versioning system of your dependencies sounds like a you problem.
Sweet mother of all that is holy.
How difficult is it to install and maintain these extensions?
Only one question, wtf is 7PHP?
I want to say that I've never really given Doctrine a chance except for when using symfony and used in the way their documentation says to us it, so I don't have any experience in customizing Doctrine to get it to do what I want. That said, below are some of my experiences; I can appreciate Doctrine DQL and the overall handling of entities, persisting and fetching etc. What I can never seem to get along with is everything else about doctrine. Doctrine works super with symfony, and when I work with a symfony framework project I always use doctrine, but when I work on projects where I don't use symfony I never use Doctrine. Annotations here and there, entity classes are a mess and there is to my knowledge no good way of isolating. Working with tenants is extremely hard to my experience and whenever symfony generates entities there is no way to determine which entity class goes to which namespace, if you're generating from schema. I want my schema to be reflected by the entities, not the other way around. Updates etc I want to perform in SQL, not annotations. Imagine the tables `invoice` and `invoice_item`, invoice items have a relation to the invoice, and in doctrine there is no way of auto-generating entities where `Invoice` has a method with `public function addItem(InvoiceItem $item): void {}` that just appends the invoice item to an array property `private $items = [];`. Whenever my entity manager receives or loads `Invoice`, only then will they be "Collections", and injected to the properties. I never want any changes to my entity classes except for when there are updates to the schema, thus I never code in my "parent" entity classes, so to each entity comes a subclass. And the parent entity class is never used other by the subclass. This way, the entity can be entirely changed, and my test of the subclass will show the incompatibilities. I hope I'm making sense in the above, I've always been bad at explaining. Simply put I don't like how Doctrine auto-generates entities and how the final entity classes "look". Maybe I have never given Doctrine a real chance due to my hate for annotations, and maybe doctrine can do whatever I'm doing on my own, but I have never found a real tutorial or article on standalone usage of Doctrine, and how to fully implement it without relying on a persistence layer.
With composer pretty simple.
People trashing a popular open-source project without valid arguments or showing an attempt to help? Happy to downvote yeah people like you are a reason why open-source is so toxic
There is a good integration with Doctrine via the DoctrineBundle but also https://github.com/WouterJ/WouterJEloquentBundle if you fancy using Eloquent
Carbon::now()-&gt;addDays(2)-&gt;subMonth()-&gt;subYears(6); Or is it... Carbon::now()-&gt;addDays(7)-&gt;subMonths(7)-&gt;subYears(6);
Hi MaxGhost, following your advices I changed the whole project structure (and learned a lot). I guess it's not the perfect framework but if you still have other advices or warnings to give let me know. Thanks again, it was useful.
Carbon is not painful.
Yes! This is great! The main pain I have with Carbon is that it's not immutable. `$date-&gt;addDay()` will both return the updated object and update the object in place. It's surprisingly often I do something with dates where I am required to keep the original around. It's also not very nice to borrow a date attribute from an object, do some math on it and *poof* the original attribute was updated as well! In both these cases we have to remember (&lt;- cognitive load) to clone the object first: `$date-&gt;copy()-&gt;addDay()`.
I'm mostly in agreement. Traits are normally a bad idea. However, I've used them a few times to give helper methods to a bunch of classes without resorting to introducing (more) inheritance. The reason these were methods, rather than pure functions, is because they *did* depend on the object's state. But you should never refer to `$this` in a trait- you should have `abstract` getters as part of the trait.
I'm mostly in agreement. Traits are normally a bad idea. However, I've used them a few times to give helper methods to a bunch of classes without resorting to introducing (more) inheritance. They could have been functions, but it just didn't feel reusable enough to really be out on its own. It felt more natural to "tie" it to the object's class, since it was behavior. But that's all subjective. It's a judgement call.
i like eloquent, i will check this out. 
I happen to know who Cal Evans is and I've got a selfie with Rasmus himself. Being an owner of such a photo and the fact I attended to a couple of PHP conferences doesn't make me a well renowned person whatsoever. So it doesn't answer the question. Anyway, this link appears to be a blatant case of corporate spam, leading to a site offering hosting services in India. 
If you just close all 1xxx issues that were open, you can sure claim to have only 1 issue open :P I would go with the successor Chronos ( [https://github.com/cakephp/chronos](https://github.com/cakephp/chronos) ) these days.
[removed]
If you want a third party review, the best thing to do is probably to consult a third-party security company.
because node.js core and JS handling of dates is poor to begin with. It doesn't excuse the bullshit packages though.
That's a shame though, it makes it impossible to mutual-ssl
Wtf crazy person would use yyyy-dd-mm
Personally, I like to use yy-md-dm-yy for symmetry
I still don't understand. If you need a specific functionality, you can still use a specific implementation that offers it. This PSR has nothing to do with that. 
The whole point PSR's of this sort is precisely to avoid hard dependencies on specific implementations - you can depend on PSR interfaces instead. TLS verification is something that I find I do quite often, and on projects I need it I certainly won't be using two different http clients. I love PSR-3/6/7/11/15 but on this one they've missed a trick.
I still don't understand. This PSR is about usage, not construction of clients. You shouldn't mix those two in the same PSR. And that's apart from the fact that TLS should be enabled and supported by default; I don't think we can find a single modern client that doesn't do it out of the box. 
&gt; PHPDeveloper.org Not exactly a blog, but there's a podcast worth listenting to called [PHP Town Hall.](https://phptownhall.com/) .
Your Hello World MVC in PHP article is outstanding. 
I don't think you're getting me at all. I'm talking about interfaces here, therefore about usage. Not construction. &gt; TLS should be enabled and supported by default Yes. But if you don't provide with an interface to provide individual certs for individual requests, then you have to rely on the implementation's specifics to provision the certificate (for instance on the implementation's constructor or via a setter) which is outside of the interface's scope. Which is the problem with all the different PSR-7 implementations that HTTP factories PSR is trying to patch.
There is a `CarbonImmutable` which extends the `DateTimeImmutable`
I disagree. While you can certainly spawn different http clients for different services, you can also use the same instance for different services. Both approaches are equally valid, and the advantage of a single instance to an http client is simplifying population of whatever service container you're using by naming the service as the interface, not with a specific name or implementation. There are very good things about this PSR around error handling and PSR-7 usage, but this omission will push functionality from the interface into service construction, same as it's happened with PSR-7.
And that's the point where we disagree then. Having something like that is highly opinionated and would make impossible producing an implementation with immutable configuration, which in my opinion is a good thing. Having multiple clients in the DI container with different configurations is a good thing, and won't hinder the usage of the FQCN as an ID for the default/preferred one. 
I think the only thing we can agree on is to disagree.
JS having no standard library really is the cause for the plethora of NPM packages that does some stupid thing over and over. When you end up writing the same 10 lines in every single one of your projects, the Node way to reuse that code is to extract it in a module, and the right way to include it in all your projects without copy/pasting it is to just push it on NPM.
Seems like it might be prudent to ask for his `phpinfo()`. Having it might not be enough to hone in on the problem but then again it might idk
Yeah, you are correct on all accounts
Or 18-112-211-18 I suppose
Maths fail on the first one I'm afraid!
1.1.x should not break bc
Oh yeah. We're in November now.
This is how I get raises: Apply for another job, nail it, if you like your current job give them a chance to beat the new offer. Works great.
&gt; You're probably just using it wrong. lol, yep pretty sure it was my fault that they completely changed the behaviour of a method, then realised they needed the old behaviour so added a _new_ method with _old_ behaviour while leaving the _old_ method name with unexpected _new_ behaviour. 
Thank you. Good to know that is about what I expected.
which it does, what is your point? 
People not liking your templating library had nothing to do with them being ungrateful swine, it had everything to do with the fact that you tout having a single 2000+ line file as some sort of feature
I install seconds, minutes, hours, and days-of-the-week off npm for all my time wizardry
I think author is a troll
&gt; Let's say that you are a seasoned developer and to your team arrives a novice. You can't spend time teaching him/her because you have your own deadlines to fulfill. You could help a little (3-5 minutes top) You would make an asshole senior developer I wish to never work with and that's coming from another senior. 
Working alone is TERRIBLE FOr beginner devs! This is always how I meet the guys who have been "coding PHP for 15 years" and still code for PHP4!
As long as you don't go around calling yourself a senior dev, buddy.
CABRON! 
Seriously, I have a hard time imagining a situation where the datetime converter you are using in a serious application is anything close to the top of the list of speed concerns.
Nobody to give advices or warnings is the issue. Lol about version I code PHP7.2 and am ready for 7.4
No need to say you're probably a great mentor, I did not have that chance. I'm currently working freelance and I have time to improve myself. Let me tell you more about studies.. I did 1 year in design then 2 years as an apprentice in web development. I was in a class where few people were working (which was slowing everything), there wasn't enough PHP lessons (even my teacher insisted in the need) and the best part was the job part of it where I was told I'd see web dev, mobile apps, etc but they had 200+ WordPress websites maintained by an external company, the tech manager never wanted to work with me because of how I looked, meaning the most technical task in 2 year have been with Excel and I've been told (without any solution) I was an "hiring error" as there was nothing to learn there. Then I did 1 more year in a small company, still as an apprentice, but I was alone, nobody knew coding except me. I discovered Composer without realising what it was (now I know I won't work without it) and learned much by myself but still alone. The bad part was school as we had not much time there, and we had only 1 week about PHP where a random guy came to show Symfony (nice but I bet 1 week isn't enough to be able to use it), and the team work where I, again, worked alone (the 2 other guys were absolute assholes). You read till there ? Well just to say I can learn (and I love learning) but this have been often hard to do. I could not continue studies as it was obviously time lost (I changed school every time). And I'm a fresher (if that means I just quited studies). Thanks for you comment and those advices.
&gt;Well, I already have a trait for Laravel that does most of the work already (for my own implementation of this sort of thing) if you want me to share it. &gt; &gt; &gt; &gt;Sorry, never wrote a Laravel plugin for CipherSweet, and the trait I had wrote is closed source. I don't really get this. But thanks for your words on Scott and Ciphersweet. We will investigate it further.